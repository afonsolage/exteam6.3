; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\Mercenary.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMercenary@@6B@				; CMercenary::`vftable'
PUBLIC	??0CMercenary@@QAE@XZ				; CMercenary::CMercenary
PUBLIC	??_R4CMercenary@@6B@				; CMercenary::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMercenary@@@8				; CMercenary `RTTI Type Descriptor'
PUBLIC	??_R3CMercenary@@8				; CMercenary::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMercenary@@8				; CMercenary::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMercenary@@8			; CMercenary::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMercenary@@UAEPAXI@Z:PROC			; CMercenary::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMercenary@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\mercenary.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMercenary@@8 DD FLAT:??_R0?AVCMercenary@@@8 ; CMercenary::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMercenary@@8
rdata$r	ENDS
;	COMDAT ??_R2CMercenary@@8
rdata$r	SEGMENT
??_R2CMercenary@@8 DD FLAT:??_R1A@?0A@EA@CMercenary@@8	; CMercenary::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMercenary@@8
rdata$r	SEGMENT
??_R3CMercenary@@8 DD 00H				; CMercenary::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMercenary@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMercenary@@@8
_DATA	SEGMENT
??_R0?AVCMercenary@@@8 DD FLAT:??_7type_info@@6B@	; CMercenary `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMercenary@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMercenary@@6B@
rdata$r	SEGMENT
??_R4CMercenary@@6B@ DD 00H				; CMercenary::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMercenary@@@8
	DD	FLAT:??_R3CMercenary@@8
rdata$r	ENDS
;	COMDAT ??_7CMercenary@@6B@
CONST	SEGMENT
??_7CMercenary@@6B@ DD FLAT:??_R4CMercenary@@6B@	; CMercenary::`vftable'
	DD	FLAT:??_ECMercenary@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMercenary@@QAE@XZ PROC				; CMercenary::CMercenary
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMercenary@@6B@

; 15   : 	this->m_iMercenaryCount = 0;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 16   : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CMercenary@@QAE@XZ ENDP				; CMercenary::CMercenary
_TEXT	ENDS
PUBLIC	??1CMercenary@@UAE@XZ				; CMercenary::~CMercenary
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMercenary@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMercenary@@UAEPAXI@Z PROC				; CMercenary::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMercenary@@UAE@XZ	; CMercenary::~CMercenary
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCMercenary@@UAEPAXI@Z ENDP				; CMercenary::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMercenary@@UAE@XZ PROC				; CMercenary::~CMercenary
; _this$ = ecx

; 19   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMercenary@@6B@

; 20   : 	return;
; 21   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??1CMercenary@@UAE@XZ ENDP				; CMercenary::~CMercenary
_TEXT	ENDS
PUBLIC	??_C@_0EB@OMADJMIM@?$FLCastleSiege?$FN?5Mercenary?5is?5summo@ ; `string'
PUBLIC	??_C@_0FA@FFPEJJMM@?$FLCastleSiege?$FN?5Mercenary?5is?5summo@ ; `string'
PUBLIC	?GetCastleState@CCastleSiegeSync@@QAEHXZ	; CCastleSiegeSync::GetCastleState
PUBLIC	?CreateMercenary@CMercenary@@QAEHHHEE@Z		; CMercenary::CreateMercenary
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?g_CastleSiegeSync@@3VCCastleSiegeSync@@A:BYTE	; g_CastleSiegeSync
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0EB@OMADJMIM@?$FLCastleSiege?$FN?5Mercenary?5is?5summo@
CONST	SEGMENT
??_C@_0EB@OMADJMIM@?$FLCastleSiege?$FN?5Mercenary?5is?5summo@ DB '[Castle'
	DB	'Siege] Mercenary is summoned [%d] - [%d][%d] [%s][%s][%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@FFPEJJMM@?$FLCastleSiege?$FN?5Mercenary?5is?5summo@
CONST	SEGMENT
??_C@_0FA@FFPEJJMM@?$FLCastleSiege?$FN?5Mercenary?5is?5summo@ DB '[Castle'
	DB	'Siege] Mercenary is summoned [%d] - [%d][%d] [%s][%s][%d] - ('
	DB	'Guild : %s)', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_lpattr$227146 = -20					; size = 4
_btMapAttr$ = -15					; size = 1
_cY$ = -14						; size = 1
_cX$ = -13						; size = 1
_iMonsterIndex$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
_iMercenaryTypeIndex$ = 12				; size = 4
_cTX$ = 16						; size = 1
_cTY$ = 20						; size = 1
?CreateMercenary@CMercenary@@QAEHHHEE@Z PROC		; CMercenary::CreateMercenary
; _this$ = ecx

; 24   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 54	 sub	 esp, 84			; 00000054H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 	LPOBJ lpObj = &gObj[iIndex];

  0005c	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0005f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00065	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 26   : 	int iMonsterIndex = -1;

  0006e	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _iMonsterIndex$[ebp], -1

; 27   : 	BYTE cX = cTX;

  00075	8a 45 10	 mov	 al, BYTE PTR _cTX$[ebp]
  00078	88 45 f3	 mov	 BYTE PTR _cX$[ebp], al

; 28   : 	BYTE cY = cTY;

  0007b	8a 45 14	 mov	 al, BYTE PTR _cTY$[ebp]
  0007e	88 45 f2	 mov	 BYTE PTR _cY$[ebp], al

; 29   : 
; 30   : 	BYTE btMapAttr = MapC[lpObj->MapNumber].GetAttr(cX, cY);

  00081	0f b6 45 f2	 movzx	 eax, BYTE PTR _cY$[ebp]
  00085	50		 push	 eax
  00086	0f b6 4d f3	 movzx	 ecx, BYTE PTR _cX$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0008e	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  00095	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  0009b	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  000a1	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  000a6	88 45 f1	 mov	 BYTE PTR _btMapAttr$[ebp], al

; 31   : 
; 32   : 	if(btMapAttr & 16 != 16) //siege camp?
; 33   : 	{
; 34   : 		//return FALSE;
; 35   : 	}
; 36   : 
; 37   : 	if ( lpObj->MapNumber != MAP_INDEX_CASTLESIEGE )

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000ac	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  000b3	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  000b6	74 23		 je	 SHORT $LN12@CreateMerc

; 38   : 	{
; 39   : 		::MsgOutput(iIndex, lMsg.Get(MSGGET(6, 91)));

  000b8	68 5b 06 00 00	 push	 1627			; 0000065bH
  000bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000c2	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000c7	50		 push	 eax
  000c8	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000d1	83 c4 08	 add	 esp, 8

; 40   : 
; 41   : 		return FALSE;

  000d4	33 c0		 xor	 eax, eax
  000d6	e9 a6 04 00 00	 jmp	 $LN14@CreateMerc
$LN12@CreateMerc:

; 42   : 	}
; 43   : 
; 44   : //#if(GS_CASTLE==1) //HermeX Decompilation 100%
; 45   : 	if(g_CastleSiegeSync.GetCastleState() != CASTLESIEGE_STATE_STARTSIEGE)

  000db	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000e0	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiegeSync@@QAEHXZ ; CCastleSiegeSync::GetCastleState
  000e5	83 f8 07	 cmp	 eax, 7
  000e8	74 23		 je	 SHORT $LN11@CreateMerc

; 46   : 	{
; 47   : 		::MsgOutput(iIndex, lMsg.Get(1630));

  000ea	68 5e 06 00 00	 push	 1630			; 0000065eH
  000ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000f4	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000f9	50		 push	 eax
  000fa	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00103	83 c4 08	 add	 esp, 8

; 48   : 		return FALSE;

  00106	33 c0		 xor	 eax, eax
  00108	e9 74 04 00 00	 jmp	 $LN14@CreateMerc
$LN11@CreateMerc:

; 49   : 	}
; 50   : 
; 51   : 	if( iMercenaryTypeIndex == 286 || iMercenaryTypeIndex == 287)

  0010d	81 7d 0c 1e 01
	00 00		 cmp	 DWORD PTR _iMercenaryTypeIndex$[ebp], 286 ; 0000011eH
  00114	74 09		 je	 SHORT $LN9@CreateMerc
  00116	81 7d 0c 1f 01
	00 00		 cmp	 DWORD PTR _iMercenaryTypeIndex$[ebp], 287 ; 0000011fH
  0011d	75 70		 jne	 SHORT $LN7@CreateMerc
$LN9@CreateMerc:

; 52   : 	{
; 53   : 		if( lpObj->m_btCsJoinSide != 1)

  0011f	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00122	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  00129	83 f9 01	 cmp	 ecx, 1
  0012c	74 23		 je	 SHORT $LN8@CreateMerc

; 54   : 		{
; 55   : 			::MsgOutput(iIndex, lMsg.Get(1628));

  0012e	68 5c 06 00 00	 push	 1628			; 0000065cH
  00133	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00138	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0013d	50		 push	 eax
  0013e	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00147	83 c4 08	 add	 esp, 8

; 56   : 			return FALSE;

  0014a	33 c0		 xor	 eax, eax
  0014c	e9 30 04 00 00	 jmp	 $LN14@CreateMerc
$LN8@CreateMerc:

; 57   : 		}
; 58   : 		if(lpObj->GuildStatus != G_MASTER && lpObj->GuildStatus != G_SUB_MASTER)

  00151	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00154	81 b8 48 04 00
	00 80 00 00 00	 cmp	 DWORD PTR [eax+1096], 128 ; 00000080H
  0015e	74 2f		 je	 SHORT $LN7@CreateMerc
  00160	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00163	83 b8 48 04 00
	00 40		 cmp	 DWORD PTR [eax+1096], 64 ; 00000040H
  0016a	74 23		 je	 SHORT $LN7@CreateMerc

; 59   : 		{
; 60   : 			::MsgOutput(iIndex, lMsg.Get(1629));

  0016c	68 5d 06 00 00	 push	 1629			; 0000065dH
  00171	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00176	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0017b	50		 push	 eax
  0017c	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00185	83 c4 08	 add	 esp, 8

; 61   : 				return FALSE;

  00188	33 c0		 xor	 eax, eax
  0018a	e9 f2 03 00 00	 jmp	 $LN14@CreateMerc
$LN7@CreateMerc:

; 62   : 		}
; 63   : 	}
; 64   : 
; 65   : 	if( this->m_iMercenaryCount > 100 )

  0018f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00192	83 78 04 64	 cmp	 DWORD PTR [eax+4], 100	; 00000064H
  00196	7e 23		 jle	 SHORT $LN6@CreateMerc

; 66   : 	{
; 67   : 		::MsgOutput(iIndex, lMsg.Get(1631));

  00198	68 5f 06 00 00	 push	 1631			; 0000065fH
  0019d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001a2	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001a7	50		 push	 eax
  001a8	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  001b1	83 c4 08	 add	 esp, 8

; 68   : 		return FALSE;

  001b4	33 c0		 xor	 eax, eax
  001b6	e9 c6 03 00 00	 jmp	 $LN14@CreateMerc
$LN6@CreateMerc:

; 69   : 	}
; 70   : 
; 71   : 	iMonsterIndex = gObjAddMonster(lpObj->MapNumber);

  001bb	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001be	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  001c5	51		 push	 ecx
  001c6	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  001cb	83 c4 04	 add	 esp, 4
  001ce	0f bf d0	 movsx	 edx, ax
  001d1	89 55 f4	 mov	 DWORD PTR _iMonsterIndex$[ebp], edx

; 72   : 
; 73   : 	if(iMonsterIndex >= 0)

  001d4	83 7d f4 00	 cmp	 DWORD PTR _iMonsterIndex$[ebp], 0
  001d8	0f 8c 7e 03 00
	00		 jl	 $LN5@CreateMerc

; 74   : 	{
; 75   : 		LPMONSTER_ATTRIBUTE lpattr = gMAttr.GetAttr(iMercenaryTypeIndex);

  001de	8b 45 0c	 mov	 eax, DWORD PTR _iMercenaryTypeIndex$[ebp]
  001e1	50		 push	 eax
  001e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  001e7	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr
  001ec	89 45 ec	 mov	 DWORD PTR _lpattr$227146[ebp], eax

; 76   : 
; 77   : 		if(lpattr == NULL)

  001ef	83 7d ec 00	 cmp	 DWORD PTR _lpattr$227146[ebp], 0
  001f3	75 13		 jne	 SHORT $LN4@CreateMerc

; 78   : 		{
; 79   : 			gObjDel(iMonsterIndex);

  001f5	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  001fe	83 c4 04	 add	 esp, 4

; 80   : 			return FALSE;

  00201	33 c0		 xor	 eax, eax
  00203	e9 79 03 00 00	 jmp	 $LN14@CreateMerc
$LN4@CreateMerc:

; 81   : 		}
; 82   : 
; 83   : 		gObjSetMonster(iMonsterIndex, iMercenaryTypeIndex);

  00208	8b 45 0c	 mov	 eax, DWORD PTR _iMercenaryTypeIndex$[ebp]
  0020b	50		 push	 eax
  0020c	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  0020f	51		 push	 ecx
  00210	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  00215	83 c4 08	 add	 esp, 8

; 84   : 
; 85   : 		gObj[iMonsterIndex].Live = 1;

  00218	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  0021b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00221	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00227	c6 44 01 6a 01	 mov	 BYTE PTR [ecx+eax+106], 1

; 86   : 		gObj[iMonsterIndex].Life = lpattr->m_Hp;

  0022c	8b 45 ec	 mov	 eax, DWORD PTR _lpattr$227146[ebp]
  0022f	db 40 28	 fild	 DWORD PTR [eax+40]
  00232	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  00235	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0023b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00241	d9 9c 0a fc 00
	00 00		 fstp	 DWORD PTR [edx+ecx+252]

; 87   : 		gObj[iMonsterIndex].MaxLife = lpattr->m_Hp;

  00248	8b 45 ec	 mov	 eax, DWORD PTR _lpattr$227146[ebp]
  0024b	db 40 28	 fild	 DWORD PTR [eax+40]
  0024e	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  00251	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00257	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0025d	d9 9c 0a 00 01
	00 00		 fstp	 DWORD PTR [edx+ecx+256]

; 88   : 		gObj[iMonsterIndex].m_PosNum = -1;

  00264	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  00267	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0026d	83 c9 ff	 or	 ecx, -1
  00270	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00276	66 89 8c 02 b0
	03 00 00	 mov	 WORD PTR [edx+eax+944], cx

; 89   : 		gObj[iMonsterIndex].X = cX;

  0027e	66 0f b6 45 f3	 movzx	 ax, BYTE PTR _cX$[ebp]
  00283	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  00286	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0028c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00292	66 89 84 0a 44
	01 00 00	 mov	 WORD PTR [edx+ecx+324], ax

; 90   : 		gObj[iMonsterIndex].Y = cY;

  0029a	66 0f b6 45 f2	 movzx	 ax, BYTE PTR _cY$[ebp]
  0029f	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  002a2	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  002a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002ae	66 89 84 0a 46
	01 00 00	 mov	 WORD PTR [edx+ecx+326], ax

; 91   : 		gObj[iMonsterIndex].MTX = cX;

  002b6	66 0f b6 45 f3	 movzx	 ax, BYTE PTR _cX$[ebp]
  002bb	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  002be	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  002c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002ca	66 89 84 0a 80
	01 00 00	 mov	 WORD PTR [edx+ecx+384], ax

; 92   : 		gObj[iMonsterIndex].MTY = cY;

  002d2	66 0f b6 45 f2	 movzx	 ax, BYTE PTR _cY$[ebp]
  002d7	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  002da	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  002e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002e6	66 89 84 0a 82
	01 00 00	 mov	 WORD PTR [edx+ecx+386], ax

; 93   : 		gObj[iMonsterIndex].TX = cX;

  002ee	66 0f b6 45 f3	 movzx	 ax, BYTE PTR _cX$[ebp]
  002f3	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  002f6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  002fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00302	66 89 84 0a 7c
	01 00 00	 mov	 WORD PTR [edx+ecx+380], ax

; 94   : 		gObj[iMonsterIndex].TY = cY;

  0030a	66 0f b6 45 f2	 movzx	 ax, BYTE PTR _cY$[ebp]
  0030f	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  00312	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00318	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0031e	66 89 84 0a 7e
	01 00 00	 mov	 WORD PTR [edx+ecx+382], ax

; 95   : 		gObj[iMonsterIndex].m_OldX = cX;

  00326	66 0f b6 45 f3	 movzx	 ax, BYTE PTR _cX$[ebp]
  0032b	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  0032e	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00334	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0033a	66 89 84 0a 78
	01 00 00	 mov	 WORD PTR [edx+ecx+376], ax

; 96   : 		gObj[iMonsterIndex].m_OldY = cY;

  00342	66 0f b6 45 f2	 movzx	 ax, BYTE PTR _cY$[ebp]
  00347	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  0034a	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00350	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00356	66 89 84 0a 7a
	01 00 00	 mov	 WORD PTR [edx+ecx+378], ax

; 97   : 		gObj[iMonsterIndex].StartX = cX;

  0035e	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  00361	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00367	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0036d	8a 55 f3	 mov	 dl, BYTE PTR _cX$[ebp]
  00370	88 94 01 76 01
	00 00		 mov	 BYTE PTR [ecx+eax+374], dl

; 98   : 		gObj[iMonsterIndex].StartY = cY;

  00377	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  0037a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00380	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00386	8a 55 f2	 mov	 dl, BYTE PTR _cY$[ebp]
  00389	88 94 01 77 01
	00 00		 mov	 BYTE PTR [ecx+eax+375], dl

; 99   : 		gObj[iMonsterIndex].MapNumber = lpObj->MapNumber;

  00390	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  00393	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00399	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0039f	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  003a2	8a 92 49 01 00
	00		 mov	 dl, BYTE PTR [edx+329]
  003a8	88 94 01 49 01
	00 00		 mov	 BYTE PTR [ecx+eax+329], dl

; 100  : 		gObj[iMonsterIndex].m_MoveRange = 0;

  003af	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  003b2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  003b8	33 c9		 xor	 ecx, ecx
  003ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003c0	66 89 8c 02 ae
	04 00 00	 mov	 WORD PTR [edx+eax+1198], cx

; 101  : 		gObj[iMonsterIndex].Level = lpattr->m_Level;

  003c8	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  003cb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  003d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003d7	8b 55 ec	 mov	 edx, DWORD PTR _lpattr$227146[ebp]
  003da	66 8b 52 1c	 mov	 dx, WORD PTR [edx+28]
  003de	66 89 94 01 be
	00 00 00	 mov	 WORD PTR [ecx+eax+190], dx

; 102  : 		gObj[iMonsterIndex].Type = OBJ_MONSTER;

  003e6	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  003e9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  003ef	b9 02 00 00 00	 mov	 ecx, 2
  003f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003fa	66 89 4c 02 68	 mov	 WORD PTR [edx+eax+104], cx

; 103  : 		gObj[iMonsterIndex].MaxRegenTime = 1000;

  003ff	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  00402	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00408	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0040e	c7 84 01 ac 03
	00 00 e8 03 00
	00		 mov	 DWORD PTR [ecx+eax+940], 1000 ; 000003e8H

; 104  : 		gObj[iMonsterIndex].Dir = 1;

  00419	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  0041c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00422	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00428	c6 84 01 48 01
	00 00 01	 mov	 BYTE PTR [ecx+eax+328], 1

; 105  : 		gObj[iMonsterIndex].RegenTime = GetTickCount();

  00430	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00436	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  00439	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0043f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00445	89 84 0a a8 03
	00 00		 mov	 DWORD PTR [edx+ecx+936], eax

; 106  : 		gObj[iMonsterIndex].m_Attribute = 0;

  0044c	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  0044f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00455	33 c9		 xor	 ecx, ecx
  00457	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0045d	66 89 8c 02 b6
	04 00 00	 mov	 WORD PTR [edx+eax+1206], cx

; 107  : 		gObj[iMonsterIndex].DieRegen = 0;

  00465	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  00468	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0046e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00474	c6 84 01 a2 03
	00 00 00	 mov	 BYTE PTR [ecx+eax+930], 0

; 108  : 		gObj[iMonsterIndex].m_btCsNpcType = 2;

  0047c	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  0047f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00485	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0048b	c6 84 01 f8 1b
	00 00 02	 mov	 BYTE PTR [ecx+eax+7160], 2

; 109  : 		gObj[iMonsterIndex].m_btCsJoinSide = 1;

  00493	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  00496	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0049c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004a2	c6 84 01 02 1c
	00 00 01	 mov	 BYTE PTR [ecx+eax+7170], 1

; 110  : 
; 111  : 		::MsgOutput(iIndex, lMsg.Get(1632));

  004aa	68 60 06 00 00	 push	 1632			; 00000660H
  004af	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  004b4	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  004b9	50		 push	 eax
  004ba	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  004bd	50		 push	 eax
  004be	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  004c3	83 c4 08	 add	 esp, 8

; 112  : 
; 113  : 		this->m_iMercenaryCount++;

  004c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004cc	83 c1 01	 add	 ecx, 1
  004cf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004d2	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 114  : 
; 115  : 		if(lpObj->lpGuild != NULL)

  004d5	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004d8	83 b8 38 04 00
	00 00		 cmp	 DWORD PTR [eax+1080], 0
  004df	74 44		 je	 SHORT $LN3@CreateMerc

; 116  : 		{
; 117  : 			LogAddTD("[CastleSiege] Mercenary is summoned [%d] - [%d][%d] [%s][%s][%d] - (Guild : %s)",iMonsterIndex, iMercenaryTypeIndex,this->m_iMercenaryCount,lpObj->AccountID,lpObj->Name,lpObj->GuildStatus,lpObj->lpGuild->Name);

  004e1	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004e4	8b 88 38 04 00
	00		 mov	 ecx, DWORD PTR [eax+1080]
  004ea	83 c1 04	 add	 ecx, 4
  004ed	51		 push	 ecx
  004ee	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  004f1	8b 82 48 04 00
	00		 mov	 eax, DWORD PTR [edx+1096]
  004f7	50		 push	 eax
  004f8	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  004fb	83 c1 77	 add	 ecx, 119		; 00000077H
  004fe	51		 push	 ecx
  004ff	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00502	83 c2 6c	 add	 edx, 108		; 0000006cH
  00505	52		 push	 edx
  00506	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00509	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0050c	51		 push	 ecx
  0050d	8b 55 0c	 mov	 edx, DWORD PTR _iMercenaryTypeIndex$[ebp]
  00510	52		 push	 edx
  00511	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterIndex$[ebp]
  00514	50		 push	 eax
  00515	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@FFPEJJMM@?$FLCastleSiege?$FN?5Mercenary?5is?5summo@
  0051a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00520	83 c4 20	 add	 esp, 32			; 00000020H

; 118  : 		}
; 119  : 		else

  00523	eb 35		 jmp	 SHORT $LN2@CreateMerc
$LN3@CreateMerc:

; 120  : 		{
; 121  : 			LogAddTD("[CastleSiege] Mercenary is summoned [%d] - [%d][%d] [%s][%s][%d]",iMonsterIndex, iMercenaryTypeIndex,this->m_iMercenaryCount,lpObj->AccountID,lpObj->Name,lpObj->GuildStatus);

  00525	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00528	8b 88 48 04 00
	00		 mov	 ecx, DWORD PTR [eax+1096]
  0052e	51		 push	 ecx
  0052f	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00532	83 c2 77	 add	 edx, 119		; 00000077H
  00535	52		 push	 edx
  00536	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00539	83 c0 6c	 add	 eax, 108		; 0000006cH
  0053c	50		 push	 eax
  0053d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00540	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00543	52		 push	 edx
  00544	8b 45 0c	 mov	 eax, DWORD PTR _iMercenaryTypeIndex$[ebp]
  00547	50		 push	 eax
  00548	8b 4d f4	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  0054b	51		 push	 ecx
  0054c	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@OMADJMIM@?$FLCastleSiege?$FN?5Mercenary?5is?5summo@
  00551	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00557	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@CreateMerc:

; 122  : 		}
; 123  : 	}
; 124  : 	else

  0055a	eb 20		 jmp	 SHORT $LN1@CreateMerc
$LN5@CreateMerc:

; 125  : 	{
; 126  : 		::MsgOutput(iIndex, lMsg.Get(1633));

  0055c	68 61 06 00 00	 push	 1633			; 00000661H
  00561	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00566	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0056b	50		 push	 eax
  0056c	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0056f	50		 push	 eax
  00570	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00575	83 c4 08	 add	 esp, 8

; 127  : 		return FALSE;

  00578	33 c0		 xor	 eax, eax
  0057a	eb 05		 jmp	 SHORT $LN14@CreateMerc
$LN1@CreateMerc:

; 128  : 	}
; 129  : //#endif
; 130  : 	return TRUE;

  0057c	b8 01 00 00 00	 mov	 eax, 1
$LN14@CreateMerc:

; 131  : }

  00581	5f		 pop	 edi
  00582	5e		 pop	 esi
  00583	5b		 pop	 ebx
  00584	8b e5		 mov	 esp, ebp
  00586	5d		 pop	 ebp
  00587	c2 10 00	 ret	 16			; 00000010H
?CreateMercenary@CMercenary@@QAEHHHEE@Z ENDP		; CMercenary::CreateMercenary
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\castlesiegesync.h
_TEXT	ENDS
;	COMDAT ?GetCastleState@CCastleSiegeSync@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCastleState@CCastleSiegeSync@@QAEHXZ PROC		; CCastleSiegeSync::GetCastleState, COMDAT
; _this$ = ecx

; 34   : 	int  GetCastleState(){return this->m_iCurCastleState;};	// line : 70

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCastleState@CCastleSiegeSync@@QAEHXZ ENDP		; CCastleSiegeSync::GetCastleState
_TEXT	ENDS
PUBLIC	??_C@_0CO@NHOFBALN@?$FLCastleSiege?$FN?5Mercenary?5is?5broke@ ; `string'
PUBLIC	?DeleteMercenary@CMercenary@@QAEHH@Z		; CMercenary::DeleteMercenary
;	COMDAT ??_C@_0CO@NHOFBALN@?$FLCastleSiege?$FN?5Mercenary?5is?5broke@
; File d:\projects\exteam6.3\source\gameserver\gameserver\mercenary.cpp
CONST	SEGMENT
??_C@_0CO@NHOFBALN@?$FLCastleSiege?$FN?5Mercenary?5is?5broke@ DB '[Castle'
	DB	'Siege] Mercenary is broken [%d] - [%d]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?DeleteMercenary@CMercenary@@QAEHH@Z PROC		; CMercenary::DeleteMercenary
; _this$ = ecx

; 135  : {

  00590	55		 push	 ebp
  00591	8b ec		 mov	 ebp, esp
  00593	83 ec 44	 sub	 esp, 68			; 00000044H
  00596	53		 push	 ebx
  00597	56		 push	 esi
  00598	57		 push	 edi
  00599	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 136  : 	if ( iIndex < 0 || iIndex > OBJMAX-1 )

  0059c	83 7d 08 00	 cmp	 DWORD PTR _iIndex$[ebp], 0
  005a0	7c 09		 jl	 SHORT $LN2@DeleteMerc
  005a2	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _iIndex$[ebp], 14999 ; 00003a97H
  005a9	7e 04		 jle	 SHORT $LN3@DeleteMerc
$LN2@DeleteMerc:

; 137  : 	{
; 138  : 		return FALSE;

  005ab	33 c0		 xor	 eax, eax
  005ad	eb 40		 jmp	 SHORT $LN4@DeleteMerc
$LN3@DeleteMerc:

; 139  : 	}
; 140  : 
; 141  : 	this->m_iMercenaryCount--;

  005af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005b2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005b5	83 e9 01	 sub	 ecx, 1
  005b8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005bb	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 142  : 
; 143  : 	LogAddTD("[CastleSiege] Mercenary is broken [%d] - [%d]", iIndex, this->m_iMercenaryCount);

  005be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005c4	51		 push	 ecx
  005c5	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  005c8	52		 push	 edx
  005c9	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@NHOFBALN@?$FLCastleSiege?$FN?5Mercenary?5is?5broke@
  005ce	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  005d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 144  : 
; 145  : 	if ( this->m_iMercenaryCount < 0 )

  005d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005da	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  005de	7d 0a		 jge	 SHORT $LN1@DeleteMerc

; 146  : 	{
; 147  : 		this->m_iMercenaryCount = 0;

  005e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005e3	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN1@DeleteMerc:

; 148  : 	}
; 149  : 
; 150  : 	return TRUE;

  005ea	b8 01 00 00 00	 mov	 eax, 1
$LN4@DeleteMerc:

; 151  : }

  005ef	5f		 pop	 edi
  005f0	5e		 pop	 esi
  005f1	5b		 pop	 ebx
  005f2	8b e5		 mov	 esp, ebp
  005f4	5d		 pop	 ebp
  005f5	c2 04 00	 ret	 4
?DeleteMercenary@CMercenary@@QAEHH@Z ENDP		; CMercenary::DeleteMercenary
_TEXT	ENDS
PUBLIC	?SearchEnemy@CMercenary@@QAEHPAUOBJECTSTRUCT@@@Z ; CMercenary::SearchEnemy
EXTRN	_abs:PROC
EXTRN	_sqrt:PROC
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_SquareDist$227181 = -40				; size = 4
_cX$227180 = -36					; size = 4
_cY$227179 = -32					; size = 4
_iTargetDist$227178 = -28				; size = 4
_iTargetDisY$227177 = -24				; size = 4
_iTargetDisX$227176 = -20				; size = 4
_i$ = -16						; size = 4
_iAttackRange$ = -12					; size = 4
_iTargetNumber$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?SearchEnemy@CMercenary@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CMercenary::SearchEnemy
; _this$ = ecx

; 157  : {

  00600	55		 push	 ebp
  00601	8b ec		 mov	 ebp, esp
  00603	83 ec 68	 sub	 esp, 104		; 00000068H
  00606	53		 push	 ebx
  00607	56		 push	 esi
  00608	57		 push	 edi
  00609	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 158  : //#if(GS_CASTLE==1)
; 159  : 	int iTargetNumber = -1;

  0060c	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _iTargetNumber$[ebp], -1

; 160  : 	int iAttackRange = 0;

  00613	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iAttackRange$[ebp], 0

; 161  : 
; 162  : 	lpObj->TargetNumber = -1;

  0061a	83 c8 ff	 or	 eax, -1
  0061d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00620	66 89 81 58 04
	00 00		 mov	 WORD PTR [ecx+1112], ax

; 163  : 
; 164  : 	if(lpObj->Class == 286)

  00627	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0062a	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00631	81 f9 1e 01 00
	00		 cmp	 ecx, 286		; 0000011eH
  00637	75 09		 jne	 SHORT $LN14@SearchEnem

; 165  : 	{
; 166  : 		iAttackRange = 5;

  00639	c7 45 f4 05 00
	00 00		 mov	 DWORD PTR _iAttackRange$[ebp], 5
  00640	eb 19		 jmp	 SHORT $LN12@SearchEnem
$LN14@SearchEnem:

; 167  : 	}
; 168  : 	else if(lpObj->Class == 287)

  00642	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00645	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0064c	81 f9 1f 01 00
	00		 cmp	 ecx, 287		; 0000011fH
  00652	75 07		 jne	 SHORT $LN12@SearchEnem

; 169  : 	{
; 170  : 		iAttackRange = 3;

  00654	c7 45 f4 03 00
	00 00		 mov	 DWORD PTR _iAttackRange$[ebp], 3
$LN12@SearchEnem:

; 171  : 	}
; 172  : 
; 173  : 	int i;
; 174  : 	for(i = 0; i < MAX_VIEWPORT; i++)

  0065b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00662	eb 09		 jmp	 SHORT $LN11@SearchEnem
$LN10@SearchEnem:
  00664	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00667	83 c0 01	 add	 eax, 1
  0066a	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN11@SearchEnem:
  0066d	83 7d f0 4b	 cmp	 DWORD PTR _i$[ebp], 75	; 0000004bH
  00671	0f 8d 3b 02 00
	00		 jge	 $LN9@SearchEnem

; 175  : 	{
; 176  : 		iTargetNumber = lpObj->VpPlayer2[i].number;

  00677	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0067a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0067d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00680	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  00688	89 55 f8	 mov	 DWORD PTR _iTargetNumber$[ebp], edx

; 177  : 
; 178  : 		if(iTargetNumber >= 0 && gObj[iTargetNumber].Type == 1 && gObj[iTargetNumber].Live != FALSE && gObj[iTargetNumber].Teleport == FALSE)

  0068b	83 7d f8 00	 cmp	 DWORD PTR _iTargetNumber$[ebp], 0
  0068f	0f 8c 18 02 00
	00		 jl	 $LN1@SearchEnem
  00695	8b 45 f8	 mov	 eax, DWORD PTR _iTargetNumber$[ebp]
  00698	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0069e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  006a4	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  006a9	83 fa 01	 cmp	 edx, 1
  006ac	0f 85 fb 01 00
	00		 jne	 $LN1@SearchEnem
  006b2	8b 45 f8	 mov	 eax, DWORD PTR _iTargetNumber$[ebp]
  006b5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  006bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  006c1	0f b6 54 01 6a	 movzx	 edx, BYTE PTR [ecx+eax+106]
  006c6	85 d2		 test	 edx, edx
  006c8	0f 84 df 01 00
	00		 je	 $LN1@SearchEnem
  006ce	8b 45 f8	 mov	 eax, DWORD PTR _iTargetNumber$[ebp]
  006d1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  006d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  006dd	0f be 94 01 a0
	03 00 00	 movsx	 edx, BYTE PTR [ecx+eax+928]
  006e5	85 d2		 test	 edx, edx
  006e7	0f 85 c0 01 00
	00		 jne	 $LN1@SearchEnem

; 179  : 		{
; 180  : 			if(gObj[iTargetNumber].m_btCsJoinSide == lpObj->m_btCsJoinSide)

  006ed	8b 45 f8	 mov	 eax, DWORD PTR _iTargetNumber$[ebp]
  006f0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  006f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  006fc	0f b6 94 01 02
	1c 00 00	 movzx	 edx, BYTE PTR [ecx+eax+7170]
  00704	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00707	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0070e	3b d1		 cmp	 edx, ecx
  00710	75 05		 jne	 SHORT $LN7@SearchEnem

; 181  : 			{
; 182  : 				continue;

  00712	e9 4d ff ff ff	 jmp	 $LN10@SearchEnem
$LN7@SearchEnem:

; 183  : 			}
; 184  : 
; 185  : 			//Mr.Marin Decompilation 100%
; 186  : 			int iTargetDisX = lpObj->X - gObj[iTargetNumber].X;

  00717	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0071a	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00721	8b 55 f8	 mov	 edx, DWORD PTR _iTargetNumber$[ebp]
  00724	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0072a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0072f	0f bf 94 10 44
	01 00 00	 movsx	 edx, WORD PTR [eax+edx+324]
  00737	2b ca		 sub	 ecx, edx
  00739	89 4d ec	 mov	 DWORD PTR _iTargetDisX$227176[ebp], ecx

; 187  : 			int iTargetDisY = lpObj->Y - gObj[iTargetNumber].Y;

  0073c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0073f	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00746	8b 55 f8	 mov	 edx, DWORD PTR _iTargetNumber$[ebp]
  00749	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0074f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00754	0f bf 94 10 46
	01 00 00	 movsx	 edx, WORD PTR [eax+edx+326]
  0075c	2b ca		 sub	 ecx, edx
  0075e	89 4d e8	 mov	 DWORD PTR _iTargetDisY$227177[ebp], ecx

; 188  : 			int iTargetDist;
; 189  : 			int cY;
; 190  : 			int cX;
; 191  : 			int SquareDist = (iTargetDisX*iTargetDisX)+(iTargetDisY*iTargetDisY);

  00761	8b 45 ec	 mov	 eax, DWORD PTR _iTargetDisX$227176[ebp]
  00764	0f af 45 ec	 imul	 eax, DWORD PTR _iTargetDisX$227176[ebp]
  00768	8b 4d e8	 mov	 ecx, DWORD PTR _iTargetDisY$227177[ebp]
  0076b	0f af 4d e8	 imul	 ecx, DWORD PTR _iTargetDisY$227177[ebp]
  0076f	03 c1		 add	 eax, ecx
  00771	89 45 d8	 mov	 DWORD PTR _SquareDist$227181[ebp], eax

; 192  : 
; 193  : 			iTargetDist = (long)sqrt((double)SquareDist);

  00774	db 45 d8	 fild	 DWORD PTR _SquareDist$227181[ebp]
  00777	83 ec 08	 sub	 esp, 8
  0077a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0077d	e8 00 00 00 00	 call	 _sqrt
  00782	83 c4 08	 add	 esp, 8
  00785	e8 00 00 00 00	 call	 __ftol2_sse
  0078a	89 45 e4	 mov	 DWORD PTR _iTargetDist$227178[ebp], eax

; 194  : 			
; 195  : 			lpObj->VpPlayer2[i].dis = iTargetDist;

  0078d	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00790	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00793	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00796	8b 55 e4	 mov	 edx, DWORD PTR _iTargetDist$227178[ebp]
  00799	89 94 01 b4 08
	00 00		 mov	 DWORD PTR [ecx+eax+2228], edx

; 196  : 
; 197  : 			if(lpObj->Dir == 1 && abs(iTargetDisX) <= 2)

  007a0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007a3	0f b6 88 48 01
	00 00		 movzx	 ecx, BYTE PTR [eax+328]
  007aa	83 f9 01	 cmp	 ecx, 1
  007ad	75 79		 jne	 SHORT $LN4@SearchEnem
  007af	8b 45 ec	 mov	 eax, DWORD PTR _iTargetDisX$227176[ebp]
  007b2	50		 push	 eax
  007b3	e8 00 00 00 00	 call	 _abs
  007b8	83 c4 04	 add	 esp, 4
  007bb	83 f8 02	 cmp	 eax, 2
  007be	7f 68		 jg	 SHORT $LN4@SearchEnem

; 198  : 			{
; 199  : 				cY = lpObj->Y - iAttackRange;

  007c0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007c3	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  007ca	2b 4d f4	 sub	 ecx, DWORD PTR _iAttackRange$[ebp]
  007cd	89 4d e0	 mov	 DWORD PTR _cY$227179[ebp], ecx

; 200  : 				if(cY <= gObj[iTargetNumber].Y)

  007d0	8b 45 f8	 mov	 eax, DWORD PTR _iTargetNumber$[ebp]
  007d3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  007d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  007df	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  007e7	39 55 e0	 cmp	 DWORD PTR _cY$227179[ebp], edx
  007ea	7f 3c		 jg	 SHORT $LN4@SearchEnem

; 201  : 				{
; 202  : 					if(lpObj->Y >= gObj[iTargetNumber].Y)

  007ec	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007ef	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  007f6	8b 55 f8	 mov	 edx, DWORD PTR _iTargetNumber$[ebp]
  007f9	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  007ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00804	0f bf 94 10 46
	01 00 00	 movsx	 edx, WORD PTR [eax+edx+326]
  0080c	3b ca		 cmp	 ecx, edx
  0080e	7c 18		 jl	 SHORT $LN4@SearchEnem

; 203  : 					{
; 204  : 						lpObj->TargetNumber = iTargetNumber;

  00810	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00813	66 8b 4d f8	 mov	 cx, WORD PTR _iTargetNumber$[ebp]
  00817	66 89 88 58 04
	00 00		 mov	 WORD PTR [eax+1112], cx

; 205  : 						return 1;

  0081e	b8 01 00 00 00	 mov	 eax, 1
  00823	e9 8c 00 00 00	 jmp	 $LN15@SearchEnem
$LN4@SearchEnem:

; 206  : 					}
; 207  : 				}
; 208  : 			}
; 209  : 
; 210  : 			if(lpObj->Dir == 3 && abs(iTargetDisY) <= 2)

  00828	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0082b	0f b6 88 48 01
	00 00		 movzx	 ecx, BYTE PTR [eax+328]
  00832	83 f9 03	 cmp	 ecx, 3
  00835	75 76		 jne	 SHORT $LN1@SearchEnem
  00837	8b 45 e8	 mov	 eax, DWORD PTR _iTargetDisY$227177[ebp]
  0083a	50		 push	 eax
  0083b	e8 00 00 00 00	 call	 _abs
  00840	83 c4 04	 add	 esp, 4
  00843	83 f8 02	 cmp	 eax, 2
  00846	7f 65		 jg	 SHORT $LN1@SearchEnem

; 211  : 			{
; 212  : 				cX = lpObj->X - iAttackRange;

  00848	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0084b	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00852	2b 4d f4	 sub	 ecx, DWORD PTR _iAttackRange$[ebp]
  00855	89 4d dc	 mov	 DWORD PTR _cX$227180[ebp], ecx

; 213  : 				if(cX <= gObj[iTargetNumber].X)

  00858	8b 45 f8	 mov	 eax, DWORD PTR _iTargetNumber$[ebp]
  0085b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00861	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00867	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0086f	39 55 dc	 cmp	 DWORD PTR _cX$227180[ebp], edx
  00872	7f 39		 jg	 SHORT $LN1@SearchEnem

; 214  : 				{
; 215  : 					if(lpObj->X >= gObj[iTargetNumber].X)

  00874	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00877	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0087e	8b 55 f8	 mov	 edx, DWORD PTR _iTargetNumber$[ebp]
  00881	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  00887	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0088c	0f bf 94 10 44
	01 00 00	 movsx	 edx, WORD PTR [eax+edx+324]
  00894	3b ca		 cmp	 ecx, edx
  00896	7c 15		 jl	 SHORT $LN1@SearchEnem

; 216  : 					{
; 217  : 						lpObj->TargetNumber = iTargetNumber;

  00898	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0089b	66 8b 4d f8	 mov	 cx, WORD PTR _iTargetNumber$[ebp]
  0089f	66 89 88 58 04
	00 00		 mov	 WORD PTR [eax+1112], cx

; 218  : 						return 1;

  008a6	b8 01 00 00 00	 mov	 eax, 1
  008ab	eb 07		 jmp	 SHORT $LN15@SearchEnem
$LN1@SearchEnem:

; 219  : 					}
; 220  : 				}
; 221  : 			}
; 222  : 
; 223  : 		}
; 224  : 
; 225  : 
; 226  : 	}

  008ad	e9 b2 fd ff ff	 jmp	 $LN10@SearchEnem
$LN9@SearchEnem:

; 227  : //#endif
; 228  : 	return 0;

  008b2	33 c0		 xor	 eax, eax
$LN15@SearchEnem:

; 229  : }

  008b4	5f		 pop	 edi
  008b5	5e		 pop	 esi
  008b6	5b		 pop	 ebx
  008b7	8b e5		 mov	 esp, ebp
  008b9	5d		 pop	 ebp
  008ba	c2 04 00	 ret	 4
?SearchEnemy@CMercenary@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CMercenary::SearchEnemy
_TEXT	ENDS
PUBLIC	?MercenaryAct@CMercenary@@QAEXH@Z		; CMercenary::MercenaryAct
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?MercenaryAct@CMercenary@@QAEXH@Z PROC			; CMercenary::MercenaryAct
; _this$ = ecx

; 235  : {

  008c0	55		 push	 ebp
  008c1	8b ec		 mov	 ebp, esp
  008c3	83 ec 48	 sub	 esp, 72			; 00000048H
  008c6	53		 push	 ebx
  008c7	56		 push	 esi
  008c8	57		 push	 edi
  008c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 236  : 	if ( ::gObjIsConnected(iIndex) == FALSE )

  008cc	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  008cf	50		 push	 eax
  008d0	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  008d5	83 c4 04	 add	 esp, 4
  008d8	85 c0		 test	 eax, eax
  008da	75 02		 jne	 SHORT $LN4@MercenaryA

; 237  : 	{
; 238  : 		return;

  008dc	eb 7a		 jmp	 SHORT $LN5@MercenaryA
$LN4@MercenaryA:

; 239  : 	}
; 240  : 
; 241  : 	LPOBJ lpObj = &gObj[iIndex];

  008de	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  008e1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  008e7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  008ed	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 242  : 
; 243  : 
; 244  : 	if ( lpObj->VPCount2 < 1 )

  008f0	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  008f3	83 b8 34 0c 00
	00 01		 cmp	 DWORD PTR [eax+3124], 1
  008fa	7d 02		 jge	 SHORT $LN3@MercenaryA

; 245  : 	{
; 246  : 		return;

  008fc	eb 5a		 jmp	 SHORT $LN5@MercenaryA
$LN3@MercenaryA:

; 247  : 	}
; 248  : 
; 249  : 	if ( this->SearchEnemy(lpObj) != 0 && lpObj->TargetNumber >= 0)

  008fe	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00901	50		 push	 eax
  00902	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00905	e8 00 00 00 00	 call	 ?SearchEnemy@CMercenary@@QAEHPAUOBJECTSTRUCT@@@Z ; CMercenary::SearchEnemy
  0090a	85 c0		 test	 eax, eax
  0090c	74 37		 je	 SHORT $LN2@MercenaryA
  0090e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00911	0f bf 88 58 04
	00 00		 movsx	 ecx, WORD PTR [eax+1112]
  00918	85 c9		 test	 ecx, ecx
  0091a	7c 29		 jl	 SHORT $LN2@MercenaryA

; 250  : 	{
; 251  : 		lpObj->m_ActState.Attack = 1;

  0091c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0091f	8b 88 18 02 00
	00		 mov	 ecx, DWORD PTR [eax+536]
  00925	83 c9 02	 or	 ecx, 2
  00928	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0092b	89 8a 18 02 00
	00		 mov	 DWORD PTR [edx+536], ecx

; 252  : 		lpObj->NextActionTime = lpObj->m_AttackSpeed;

  00931	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00934	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00937	8b 91 8c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1164]
  0093d	89 90 bc 03 00
	00		 mov	 DWORD PTR [eax+956], edx

; 253  : 	}
; 254  : 	else

  00943	eb 13		 jmp	 SHORT $LN5@MercenaryA
$LN2@MercenaryA:

; 255  : 	{
; 256  : 		lpObj->NextActionTime = lpObj->m_MoveSpeed;

  00945	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00948	0f bf 88 ac 04
	00 00		 movsx	 ecx, WORD PTR [eax+1196]
  0094f	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00952	89 8a bc 03 00
	00		 mov	 DWORD PTR [edx+956], ecx
$LN5@MercenaryA:

; 257  : 	}
; 258  : }

  00958	5f		 pop	 edi
  00959	5e		 pop	 esi
  0095a	5b		 pop	 ebx
  0095b	8b e5		 mov	 esp, ebp
  0095d	5d		 pop	 ebp
  0095e	c2 04 00	 ret	 4
?MercenaryAct@CMercenary@@QAEXH@Z ENDP			; CMercenary::MercenaryAct
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_CsNPC_Mercenary@@YAXXZ
text$yc	SEGMENT
??__Eg_CsNPC_Mercenary@@YAXXZ PROC			; `dynamic initializer for 'g_CsNPC_Mercenary'', COMDAT

; 11   : CMercenary g_CsNPC_Mercenary;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Mercenary@@3VCMercenary@@A ; g_CsNPC_Mercenary
  0000e	e8 00 00 00 00	 call	 ??0CMercenary@@QAE@XZ	; CMercenary::CMercenary
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_Mercenary@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_Mercenary''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_CsNPC_Mercenary@@YAXXZ ENDP			; `dynamic initializer for 'g_CsNPC_Mercenary''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_CsNPC_Mercenary@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_Mercenary@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CsNPC_Mercenary'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Mercenary@@3VCMercenary@@A ; g_CsNPC_Mercenary
  0000e	e8 00 00 00 00	 call	 ??1CMercenary@@UAE@XZ	; CMercenary::~CMercenary
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_CsNPC_Mercenary@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CsNPC_Mercenary''
text$yd	ENDS
PUBLIC	?g_CsNPC_Mercenary@@3VCMercenary@@A		; g_CsNPC_Mercenary
_BSS	SEGMENT
?g_CsNPC_Mercenary@@3VCMercenary@@A DQ 01H DUP (?)	; g_CsNPC_Mercenary
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CsNPC_Mercenary$initializer$ DD FLAT:??__Eg_CsNPC_Mercenary@@YAXXZ
CRT$XCU	ENDS
END
