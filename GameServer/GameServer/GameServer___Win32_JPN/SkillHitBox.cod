; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\SkillHitBox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CSkillHitBox@@6B@				; CSkillHitBox::`vftable'
PUBLIC	??0CSkillHitBox@@QAE@XZ				; CSkillHitBox::CSkillHitBox
PUBLIC	??_R4CSkillHitBox@@6B@				; CSkillHitBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSkillHitBox@@@8			; CSkillHitBox `RTTI Type Descriptor'
PUBLIC	??_R3CSkillHitBox@@8				; CSkillHitBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSkillHitBox@@8				; CSkillHitBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSkillHitBox@@8			; CSkillHitBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECSkillHitBox@@UAEPAXI@Z:PROC		; CSkillHitBox::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CSkillHitBox@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\skillhitbox.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkillHitBox@@8 DD FLAT:??_R0?AVCSkillHitBox@@@8 ; CSkillHitBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkillHitBox@@8
rdata$r	SEGMENT
??_R2CSkillHitBox@@8 DD FLAT:??_R1A@?0A@EA@CSkillHitBox@@8 ; CSkillHitBox::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSkillHitBox@@8
rdata$r	SEGMENT
??_R3CSkillHitBox@@8 DD 00H				; CSkillHitBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkillHitBox@@@8
_DATA	SEGMENT
??_R0?AVCSkillHitBox@@@8 DD FLAT:??_7type_info@@6B@	; CSkillHitBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkillHitBox@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSkillHitBox@@6B@
rdata$r	SEGMENT
??_R4CSkillHitBox@@6B@ DD 00H				; CSkillHitBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkillHitBox@@@8
	DD	FLAT:??_R3CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_7CSkillHitBox@@6B@
CONST	SEGMENT
??_7CSkillHitBox@@6B@ DD FLAT:??_R4CSkillHitBox@@6B@	; CSkillHitBox::`vftable'
	DD	FLAT:??_ECSkillHitBox@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSkillHitBox@@QAE@XZ PROC				; CSkillHitBox::CSkillHitBox
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSkillHitBox@@6B@

; 9    : 	return;
; 10   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CSkillHitBox@@QAE@XZ ENDP				; CSkillHitBox::CSkillHitBox
_TEXT	ENDS
PUBLIC	??1CSkillHitBox@@UAE@XZ				; CSkillHitBox::~CSkillHitBox
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCSkillHitBox@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSkillHitBox@@UAEPAXI@Z PROC			; CSkillHitBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCSkillHitBox@@UAEPAXI@Z ENDP			; CSkillHitBox::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSkillHitBox@@UAE@XZ PROC				; CSkillHitBox::~CSkillHitBox
; _this$ = ecx

; 14   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSkillHitBox@@6B@

; 15   : 	return;
; 16   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CSkillHitBox@@UAE@XZ ENDP				; CSkillHitBox::~CSkillHitBox
_TEXT	ENDS
PUBLIC	?Init@CSkillHitBox@@QAEXXZ			; CSkillHitBox::Init
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CSkillHitBox@@QAEXXZ PROC				; CSkillHitBox::Init
; _this$ = ecx

; 19   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	memset(this->m_Table, 0, sizeof(this->m_Table));

  0004c	68 04 3e 00 00	 push	 15876			; 00003e04H
  00051	6a 00		 push	 0
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	83 c0 04	 add	 eax, 4
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _memset
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 21   : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?Init@CSkillHitBox@@QAEXXZ ENDP				; CSkillHitBox::Init
_TEXT	ENDS
PUBLIC	?Check@CSkillHitBox@@QAEHHHH@Z			; CSkillHitBox::Check
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dir$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?Check@CSkillHitBox@@QAEHHHH@Z PROC			; CSkillHitBox::Check
; _this$ = ecx

; 26   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 44	 sub	 esp, 68			; 00000044H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	if ( x <0 || x >= 21 || y < 0 || y >= 21 || dir < 0 || dir >= 36 )

  0007c	83 7d 0c 00	 cmp	 DWORD PTR _x$[ebp], 0
  00080	7c 1e		 jl	 SHORT $LN1@Check
  00082	83 7d 0c 15	 cmp	 DWORD PTR _x$[ebp], 21	; 00000015H
  00086	7d 18		 jge	 SHORT $LN1@Check
  00088	83 7d 10 00	 cmp	 DWORD PTR _y$[ebp], 0
  0008c	7c 12		 jl	 SHORT $LN1@Check
  0008e	83 7d 10 15	 cmp	 DWORD PTR _y$[ebp], 21	; 00000015H
  00092	7d 0c		 jge	 SHORT $LN1@Check
  00094	83 7d 08 00	 cmp	 DWORD PTR _dir$[ebp], 0
  00098	7c 06		 jl	 SHORT $LN1@Check
  0009a	83 7d 08 24	 cmp	 DWORD PTR _dir$[ebp], 36 ; 00000024H
  0009e	7c 04		 jl	 SHORT $LN2@Check
$LN1@Check:

; 28   : 	{
; 29   : 		return 0;

  000a0	33 c0		 xor	 eax, eax
  000a2	eb 1d		 jmp	 SHORT $LN3@Check
$LN2@Check:

; 30   : 	}
; 31   : 
; 32   : 	return this->m_Table[dir][y * 21 + x];

  000a4	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  000a7	69 c0 b9 01 00
	00		 imul	 eax, 441		; 000001b9H
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000b4	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b7	6b c0 15	 imul	 eax, 21			; 00000015H
  000ba	03 55 0c	 add	 edx, DWORD PTR _x$[ebp]
  000bd	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
$LN3@Check:

; 33   : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 0c 00	 ret	 12			; 0000000cH
?Check@CSkillHitBox@@QAEHHHH@Z ENDP			; CSkillHitBox::Check
_TEXT	ENDS
PUBLIC	?HitCheck@CSkillHitBox@@QAEHHHHHH@Z		; CSkillHitBox::HitCheck
EXTRN	_abs:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_targety$ = -12						; size = 4
_targetx$ = -8						; size = 4
_this$ = -4						; size = 4
_dir$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_tx$ = 20						; size = 4
_ty$ = 24						; size = 4
?HitCheck@CSkillHitBox@@QAEHHHHHH@Z PROC		; CSkillHitBox::HitCheck
; _this$ = ecx

; 39   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  000d6	53		 push	 ebx
  000d7	56		 push	 esi
  000d8	57		 push	 edi
  000d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 	dir /= 10;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  000df	99		 cdq
  000e0	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000e5	f7 f9		 idiv	 ecx
  000e7	89 45 08	 mov	 DWORD PTR _dir$[ebp], eax

; 41   : 
; 42   : 	if ( dir < 0 || dir >= 36 )

  000ea	83 7d 08 00	 cmp	 DWORD PTR _dir$[ebp], 0
  000ee	7c 06		 jl	 SHORT $LN3@HitCheck
  000f0	83 7d 08 24	 cmp	 DWORD PTR _dir$[ebp], 36 ; 00000024H
  000f4	7c 04		 jl	 SHORT $LN4@HitCheck
$LN3@HitCheck:

; 43   : 	{
; 44   : 		return 0;

  000f6	33 c0		 xor	 eax, eax
  000f8	eb 73		 jmp	 SHORT $LN5@HitCheck
$LN4@HitCheck:

; 45   : 	}
; 46   : 
; 47   : 	int targetx = tx - x;

  000fa	8b 45 14	 mov	 eax, DWORD PTR _tx$[ebp]
  000fd	2b 45 0c	 sub	 eax, DWORD PTR _x$[ebp]
  00100	89 45 f8	 mov	 DWORD PTR _targetx$[ebp], eax

; 48   : 	int targety = ty - y;

  00103	8b 45 18	 mov	 eax, DWORD PTR _ty$[ebp]
  00106	2b 45 10	 sub	 eax, DWORD PTR _y$[ebp]
  00109	89 45 f4	 mov	 DWORD PTR _targety$[ebp], eax

; 49   : 
; 50   : 	targetx += 10;

  0010c	8b 45 f8	 mov	 eax, DWORD PTR _targetx$[ebp]
  0010f	83 c0 0a	 add	 eax, 10			; 0000000aH
  00112	89 45 f8	 mov	 DWORD PTR _targetx$[ebp], eax

; 51   : 	targety += 10;

  00115	8b 45 f4	 mov	 eax, DWORD PTR _targety$[ebp]
  00118	83 c0 0a	 add	 eax, 10			; 0000000aH
  0011b	89 45 f4	 mov	 DWORD PTR _targety$[ebp], eax

; 52   : 
; 53   : 	if ( targetx <0 || abs(targetx) >= 21 || targety <0 || abs(targety) >= 21 )

  0011e	83 7d f8 00	 cmp	 DWORD PTR _targetx$[ebp], 0
  00122	7c 28		 jl	 SHORT $LN1@HitCheck
  00124	8b 45 f8	 mov	 eax, DWORD PTR _targetx$[ebp]
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 _abs
  0012d	83 c4 04	 add	 esp, 4
  00130	83 f8 15	 cmp	 eax, 21			; 00000015H
  00133	7d 17		 jge	 SHORT $LN1@HitCheck
  00135	83 7d f4 00	 cmp	 DWORD PTR _targety$[ebp], 0
  00139	7c 11		 jl	 SHORT $LN1@HitCheck
  0013b	8b 45 f4	 mov	 eax, DWORD PTR _targety$[ebp]
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 _abs
  00144	83 c4 04	 add	 esp, 4
  00147	83 f8 15	 cmp	 eax, 21			; 00000015H
  0014a	7c 04		 jl	 SHORT $LN2@HitCheck
$LN1@HitCheck:

; 54   : 	{
; 55   : 		return 0;

  0014c	33 c0		 xor	 eax, eax
  0014e	eb 1d		 jmp	 SHORT $LN5@HitCheck
$LN2@HitCheck:

; 56   : 	}
; 57   : 
; 58   : 	return this->m_Table[dir][targety * 21 + targetx];

  00150	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  00153	69 c0 b9 01 00
	00		 imul	 eax, 441		; 000001b9H
  00159	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00160	8b 45 f4	 mov	 eax, DWORD PTR _targety$[ebp]
  00163	6b c0 15	 imul	 eax, 21			; 00000015H
  00166	03 55 f8	 add	 edx, DWORD PTR _targetx$[ebp]
  00169	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
$LN5@HitCheck:

; 59   : }

  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 14 00	 ret	 20			; 00000014H
?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ENDP		; CSkillHitBox::HitCheck
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Load@CSkillHitBox@@QAEHPAD@Z			; CSkillHitBox::Load
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp___lclose@4:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__OpenFile@12:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_readfilesize$ = -156					; size = 4
_filesize$ = -152					; size = 4
_hfile$ = -148						; size = 4
_ofst$ = -144						; size = 136
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Load@CSkillHitBox@@QAEHPAD@Z PROC			; CSkillHitBox::Load
; _this$ = ecx

; 62   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0018e	33 c5		 xor	 eax, ebp
  00190	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00193	53		 push	 ebx
  00194	56		 push	 esi
  00195	57		 push	 edi
  00196	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 	OFSTRUCT ofst;
; 64   : 	HFILE hfile;
; 65   : 	int filesize;
; 66   : 	DWORD readfilesize;
; 67   : 
; 68   : 	this->Init();

  00199	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	e8 00 00 00 00	 call	 ?Init@CSkillHitBox@@QAEXXZ ; CSkillHitBox::Init

; 69   : 	
; 70   : 	hfile = OpenFile( filename, &ofst, OF_READ|OF_SHARE_COMPAT);

  001a1	6a 00		 push	 0
  001a3	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ofst$[ebp]
  001a9	50		 push	 eax
  001aa	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  001ad	51		 push	 ecx
  001ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenFile@12
  001b4	89 85 6c ff ff
	ff		 mov	 DWORD PTR _hfile$[ebp], eax

; 71   : 
; 72   : 	if ( hfile == NULL )

  001ba	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _hfile$[ebp], 0
  001c1	75 07		 jne	 SHORT $LN4@Load

; 73   : 	{
; 74   : 		return false;

  001c3	33 c0		 xor	 eax, eax
  001c5	e9 9c 00 00 00	 jmp	 $LN5@Load
$LN4@Load:

; 75   : 	}
; 76   : 
; 77   : 	filesize = GetFileSize((HANDLE) hfile, NULL );

  001ca	6a 00		 push	 0
  001cc	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  001d2	50		 push	 eax
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  001d9	89 85 68 ff ff
	ff		 mov	 DWORD PTR _filesize$[ebp], eax

; 78   : 
; 79   : 	if ( filesize != sizeof(this->m_Table) )

  001df	81 bd 68 ff ff
	ff 04 3e 00 00	 cmp	 DWORD PTR _filesize$[ebp], 15876 ; 00003e04H
  001e9	74 11		 je	 SHORT $LN3@Load

; 80   : 	{
; 81   : 		_lclose(hfile);

  001eb	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  001f1	50		 push	 eax
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 82   : 		return false;

  001f8	33 c0		 xor	 eax, eax
  001fa	eb 6a		 jmp	 SHORT $LN5@Load
$LN3@Load:

; 83   : 	}
; 84   : 
; 85   : 	if (ReadFile( (HANDLE) hfile, this->m_Table, filesize, &readfilesize, NULL) == 0 )

  001fc	6a 00		 push	 0
  001fe	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _readfilesize$[ebp]
  00204	50		 push	 eax
  00205	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _filesize$[ebp]
  0020b	51		 push	 ecx
  0020c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0020f	83 c2 04	 add	 edx, 4
  00212	52		 push	 edx
  00213	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  00219	50		 push	 eax
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00220	85 c0		 test	 eax, eax
  00222	75 11		 jne	 SHORT $LN2@Load

; 86   : 	{
; 87   : 		_lclose(hfile);

  00224	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  0022a	50		 push	 eax
  0022b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 88   : 		return false;

  00231	33 c0		 xor	 eax, eax
  00233	eb 31		 jmp	 SHORT $LN5@Load
$LN2@Load:

; 89   : 	}
; 90   : 
; 91   : 	if ( readfilesize != filesize )

  00235	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _readfilesize$[ebp]
  0023b	3b 85 68 ff ff
	ff		 cmp	 eax, DWORD PTR _filesize$[ebp]
  00241	74 11		 je	 SHORT $LN1@Load

; 92   : 	{
; 93   : 		_lclose( hfile);

  00243	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  00249	50		 push	 eax
  0024a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 94   : 		return false;

  00250	33 c0		 xor	 eax, eax
  00252	eb 12		 jmp	 SHORT $LN5@Load
$LN1@Load:

; 95   : 	}
; 96   : 
; 97   : 	_lclose( hfile);

  00254	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  0025a	50		 push	 eax
  0025b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 98   : 	return true;

  00261	b8 01 00 00 00	 mov	 eax, 1
$LN5@Load:

; 99   : }

  00266	5f		 pop	 edi
  00267	5e		 pop	 esi
  00268	5b		 pop	 ebx
  00269	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026c	33 cd		 xor	 ecx, ebp
  0026e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00273	8b e5		 mov	 esp, ebp
  00275	5d		 pop	 ebp
  00276	c2 04 00	 ret	 4
?Load@CSkillHitBox@@QAEHPAD@Z ENDP			; CSkillHitBox::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__ESkillSpearHitBox@@YAXXZ
text$yc	SEGMENT
??__ESkillSpearHitBox@@YAXXZ PROC			; `dynamic initializer for 'SkillSpearHitBox'', COMDAT

; 4    : CSkillHitBox SkillSpearHitBox;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  0000e	e8 00 00 00 00	 call	 ??0CSkillHitBox@@QAE@XZ	; CSkillHitBox::CSkillHitBox
  00013	68 00 00 00 00	 push	 OFFSET ??__FSkillSpearHitBox@@YAXXZ ; `dynamic atexit destructor for 'SkillSpearHitBox''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__ESkillSpearHitBox@@YAXXZ ENDP			; `dynamic initializer for 'SkillSpearHitBox''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__ESkillElectricSparkHitBox@@YAXXZ
text$yc	SEGMENT
??__ESkillElectricSparkHitBox@@YAXXZ PROC		; `dynamic initializer for 'SkillElectricSparkHitBox'', COMDAT

; 5    : CSkillHitBox SkillElectricSparkHitBox;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  0000e	e8 00 00 00 00	 call	 ??0CSkillHitBox@@QAE@XZ	; CSkillHitBox::CSkillHitBox
  00013	68 00 00 00 00	 push	 OFFSET ??__FSkillElectricSparkHitBox@@YAXXZ ; `dynamic atexit destructor for 'SkillElectricSparkHitBox''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__ESkillElectricSparkHitBox@@YAXXZ ENDP		; `dynamic initializer for 'SkillElectricSparkHitBox''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FSkillSpearHitBox@@YAXXZ
text$yd	SEGMENT
??__FSkillSpearHitBox@@YAXXZ PROC			; `dynamic atexit destructor for 'SkillSpearHitBox'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  0000e	e8 00 00 00 00	 call	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FSkillSpearHitBox@@YAXXZ ENDP			; `dynamic atexit destructor for 'SkillSpearHitBox''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FSkillElectricSparkHitBox@@YAXXZ
text$yd	SEGMENT
??__FSkillElectricSparkHitBox@@YAXXZ PROC		; `dynamic atexit destructor for 'SkillElectricSparkHitBox'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  0000e	e8 00 00 00 00	 call	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FSkillElectricSparkHitBox@@YAXXZ ENDP		; `dynamic atexit destructor for 'SkillElectricSparkHitBox''
text$yd	ENDS
PUBLIC	?SkillElectricSparkHitBox@@3VCSkillHitBox@@A	; SkillElectricSparkHitBox
PUBLIC	?SkillSpearHitBox@@3VCSkillHitBox@@A		; SkillSpearHitBox
_BSS	SEGMENT
?SkillElectricSparkHitBox@@3VCSkillHitBox@@A DB 03e08H DUP (?) ; SkillElectricSparkHitBox
?SkillSpearHitBox@@3VCSkillHitBox@@A DB 03e08H DUP (?)	; SkillSpearHitBox
_BSS	ENDS
CRT$XCU	SEGMENT
_SkillSpearHitBox$initializer$ DD FLAT:??__ESkillSpearHitBox@@YAXXZ
_SkillElectricSparkHitBox$initializer$ DD FLAT:??__ESkillElectricSparkHitBox@@YAXXZ
CRT$XCU	ENDS
END
