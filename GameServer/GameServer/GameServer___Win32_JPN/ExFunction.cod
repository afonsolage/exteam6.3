; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ExFunction.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
PUBLIC	__$ArrayPad$
PUBLIC	?exGCConfigSend@@YAXH@Z				; exGCConfigSend
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	?gEventTimer@@3VcEventTimer@@A:BYTE		; gEventTimer
EXTRN	?gGENS@@3HA:DWORD				; gGENS
EXTRN	?ExConfig@@3VcExConfigs@@A:BYTE			; ExConfig
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exfunction.cpp
_TEXT	SEGMENT
_lpObj$ = -40						; size = 4
_rSend$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?exGCConfigSend@@YAXH@Z PROC				; exGCConfigSend

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 16   : 	EX_GC_CONFIG_SEND rSend;
; 17   : 	LPOBJ lpObj =&gObj[aIndex];

  00013	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00016	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0001c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00022	89 45 d8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 18   : 	rSend.h.set((LPBYTE)&rSend, 0xFB, 15, sizeof(rSend));

  00025	6a 20		 push	 32			; 00000020H
  00027	6a 0f		 push	 15			; 0000000fH
  00029	68 fb 00 00 00	 push	 251			; 000000fbH
  0002e	8d 45 dc	 lea	 eax, DWORD PTR _rSend$[ebp]
  00031	50		 push	 eax
  00032	8d 4d dc	 lea	 ecx, DWORD PTR _rSend$[ebp]
  00035	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 19   : 	rSend.CharSwitch = (BYTE)ExConfig.ExCustom.SwitchChar;

  0003a	a0 00 00 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A
  0003f	88 45 e0	 mov	 BYTE PTR _rSend$[ebp+4], al

; 20   : 	rSend.sGENS = (BYTE)gGENS;

  00042	a0 00 00 00 00	 mov	 al, BYTE PTR ?gGENS@@3HA
  00047	88 45 e1	 mov	 BYTE PTR _rSend$[ebp+5], al

; 21   : 	rSend.HelperLevel = ExConfig.ExCustom.HelperClickerLevel;

  0004a	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?ExConfig@@3VcExConfigs@@A+4
  00050	66 89 45 e2	 mov	 WORD PTR _rSend$[ebp+6], ax

; 22   : 	rSend.AutoParty =  ExConfig.ExCustom.AutoParty;

  00054	a0 08 00 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+8
  00059	88 45 e4	 mov	 BYTE PTR _rSend$[ebp+8], al

; 23   : 	rSend.Top100 = ExConfig.ExCustom.Top100;

  0005c	a0 09 00 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+9
  00061	88 45 e5	 mov	 BYTE PTR _rSend$[ebp+9], al

; 24   : 	rSend.EventTimer = gEventTimer.Enable;

  00064	a0 00 00 00 00	 mov	 al, BYTE PTR ?gEventTimer@@3VcEventTimer@@A
  00069	88 45 e6	 mov	 BYTE PTR _rSend$[ebp+10], al

; 25   : 	rSend.MoveTargetPosEffect = ExConfig.ExCustom.MoveTargetPosEffect;

  0006c	a0 0a 00 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+10
  00071	88 45 e7	 mov	 BYTE PTR _rSend$[ebp+11], al

; 26   : 	rSend.CastleSiegeSkill = ExConfig.Character.CastleSiegeSkillEnable;

  00074	a0 3c 01 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+316
  00079	88 45 e8	 mov	 BYTE PTR _rSend$[ebp+12], al

; 27   : 	rSend.AntiCheat = ExConfig.ExCustom.ClientAntiCheat;

  0007c	a0 0b 00 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+11
  00081	88 45 e9	 mov	 BYTE PTR _rSend$[ebp+13], al

; 28   : 	rSend.GensColorEnable = ExConfig.Command.GensColorEnable;

  00084	a0 a0 06 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+1696
  00089	88 45 ea	 mov	 BYTE PTR _rSend$[ebp+14], al

; 29   : 	rSend.GensColorRed = ExConfig.Command.GensColorRed;

  0008c	a0 a1 06 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+1697
  00091	88 45 eb	 mov	 BYTE PTR _rSend$[ebp+15], al

; 30   : 	rSend.GensColorGreen = ExConfig.Command.GensColorGreen;

  00094	a0 a2 06 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+1698
  00099	88 45 ec	 mov	 BYTE PTR _rSend$[ebp+16], al

; 31   : 	rSend.GensColorBlue = ExConfig.Command.GensColorBlue;

  0009c	a0 a3 06 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+1699
  000a1	88 45 ed	 mov	 BYTE PTR _rSend$[ebp+17], al

; 32   : 	rSend.MaxStats = ExConfig.Character.MaxStats;

  000a4	a1 50 01 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+336
  000a9	89 45 f0	 mov	 DWORD PTR _rSend$[ebp+20], eax

; 33   : 
; 34   : 	rSend.DLReflect = 0;

  000ac	c6 45 f4 00	 mov	 BYTE PTR _rSend$[ebp+24], 0

; 35   : 	rSend.MasterSkills = 1;

  000b0	c6 45 f5 01	 mov	 BYTE PTR _rSend$[ebp+25], 1

; 36   : 	rSend.DivFireScreamSpeed = 1;

  000b4	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _rSend$[ebp+28], 1

; 37   : 	if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::Gredy2) || g_ExLicense.CheckUser(eExUB::GredyLocal))

  000bb	6a 20		 push	 32			; 00000020H
  000bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000c2	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000c7	0f b6 c0	 movzx	 eax, al
  000ca	85 c0		 test	 eax, eax
  000cc	75 26		 jne	 SHORT $LN3@exGCConfig
  000ce	6a 22		 push	 34			; 00000022H
  000d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000d5	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000da	0f b6 c0	 movzx	 eax, al
  000dd	85 c0		 test	 eax, eax
  000df	75 13		 jne	 SHORT $LN3@exGCConfig
  000e1	6a 21		 push	 33			; 00000021H
  000e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000e8	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000ed	0f b6 c0	 movzx	 eax, al
  000f0	85 c0		 test	 eax, eax
  000f2	74 18		 je	 SHORT $LN4@exGCConfig
$LN3@exGCConfig:

; 38   : 	{
; 39   : 		rSend.DLReflect = ExConfig.ExCustom.DLReflect;

  000f4	a0 16 00 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+22
  000f9	88 45 f4	 mov	 BYTE PTR _rSend$[ebp+24], al

; 40   : 		rSend.MasterSkills = ExConfig.ExCustom.MasterSkills;

  000fc	a0 17 00 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+23
  00101	88 45 f5	 mov	 BYTE PTR _rSend$[ebp+25], al

; 41   : 		rSend.DivFireScreamSpeed = ExConfig.ExCustom.DivFireScreamSpeed;

  00104	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+24
  00109	89 45 f8	 mov	 DWORD PTR _rSend$[ebp+28], eax
$LN4@exGCConfig:

; 42   : 	}
; 43   : 
; 44   : 	if(g_ExLicense.CheckUser(eExUB::SILVER1) || g_ExLicense.CheckUser(eExUB::SILVER2))

  0010c	6a 07		 push	 7
  0010e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00113	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00118	0f b6 c0	 movzx	 eax, al
  0011b	85 c0		 test	 eax, eax
  0011d	75 13		 jne	 SHORT $LN1@exGCConfig
  0011f	6a 08		 push	 8
  00121	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00126	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0012b	0f b6 c0	 movzx	 eax, al
  0012e	85 c0		 test	 eax, eax
  00130	74 08		 je	 SHORT $LN2@exGCConfig
$LN1@exGCConfig:

; 45   : 	{
; 46   : 		rSend.DivFireScreamSpeed = ExConfig.ExCustom.DivFireScreamSpeed;

  00132	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+24
  00137	89 45 f8	 mov	 DWORD PTR _rSend$[ebp+28], eax
$LN2@exGCConfig:

; 47   : 	}
; 48   : 
; 49   : 	rSend.MasterSkills = ExConfig.ExCustom.MasterSkills;

  0013a	a0 17 00 00 00	 mov	 al, BYTE PTR ?ExConfig@@3VcExConfigs@@A+23
  0013f	88 45 f5	 mov	 BYTE PTR _rSend$[ebp+25], al

; 50   : 
; 51   : 	DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  00142	6a 20		 push	 32			; 00000020H
  00144	8d 45 dc	 lea	 eax, DWORD PTR _rSend$[ebp]
  00147	50		 push	 eax
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH

; 52   : }

  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015a	33 cd		 xor	 ecx, ebp
  0015c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
?exGCConfigSend@@YAXH@Z ENDP				; exGCConfigSend
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 106  : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 107  : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 108  : 		lpBuf[3] = sub;

  00024	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00027	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0002a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?exCheckSimbol@@YA_NPADH@Z			; exCheckSimbol
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exfunction.cpp
_TEXT	SEGMENT
tv71 = -72						; size = 4
_i$228784 = -4						; size = 4
_String$ = 8						; size = 4
_StrLen$ = 12						; size = 4
?exCheckSimbol@@YA_NPADH@Z PROC				; exCheckSimbol

; 57   : {

  00170	55		 push	 ebp
  00171	8b ec		 mov	 ebp, esp
  00173	83 ec 48	 sub	 esp, 72			; 00000048H
  00176	53		 push	 ebx
  00177	56		 push	 esi
  00178	57		 push	 edi

; 58   : 	for(int i=0;i<StrLen;i++)

  00179	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$228784[ebp], 0
  00180	eb 09		 jmp	 SHORT $LN69@exCheckSim
$LN68@exCheckSim:
  00182	8b 45 fc	 mov	 eax, DWORD PTR _i$228784[ebp]
  00185	83 c0 01	 add	 eax, 1
  00188	89 45 fc	 mov	 DWORD PTR _i$228784[ebp], eax
$LN69@exCheckSim:
  0018b	8b 45 fc	 mov	 eax, DWORD PTR _i$228784[ebp]
  0018e	3b 45 0c	 cmp	 eax, DWORD PTR _StrLen$[ebp]
  00191	0f 8d 5f 02 00
	00		 jge	 $LN67@exCheckSim

; 59   : 	{
; 60   : 		if(String[i] == NULL)

  00197	8b 45 08	 mov	 eax, DWORD PTR _String$[ebp]
  0019a	03 45 fc	 add	 eax, DWORD PTR _i$228784[ebp]
  0019d	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001a0	85 c9		 test	 ecx, ecx
  001a2	75 02		 jne	 SHORT $LN66@exCheckSim

; 61   : 			continue;

  001a4	eb dc		 jmp	 SHORT $LN68@exCheckSim
$LN66@exCheckSim:

; 62   : 		
; 63   : 		switch(String[i])

  001a6	8b 45 08	 mov	 eax, DWORD PTR _String$[ebp]
  001a9	03 45 fc	 add	 eax, DWORD PTR _i$228784[ebp]
  001ac	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001af	89 4d b8	 mov	 DWORD PTR tv71[ebp], ecx
  001b2	8b 55 b8	 mov	 edx, DWORD PTR tv71[ebp]
  001b5	83 ea 30	 sub	 edx, 48			; 00000030H
  001b8	89 55 b8	 mov	 DWORD PTR tv71[ebp], edx
  001bb	83 7d b8 4a	 cmp	 DWORD PTR tv71[ebp], 74	; 0000004aH
  001bf	0f 87 28 02 00
	00		 ja	 $LN1@exCheckSim
  001c5	8b 45 b8	 mov	 eax, DWORD PTR tv71[ebp]
  001c8	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN72@exCheckSim[eax*4]
$LN63@exCheckSim:

; 64   : 		{
; 65   : 			case 'a': continue ; break;

  001cf	eb b1		 jmp	 SHORT $LN68@exCheckSim
  001d1	e9 1b 02 00 00	 jmp	 $LN64@exCheckSim
$LN62@exCheckSim:

; 66   : 			case 'b': continue ; break;

  001d6	eb aa		 jmp	 SHORT $LN68@exCheckSim
  001d8	e9 14 02 00 00	 jmp	 $LN64@exCheckSim
$LN61@exCheckSim:

; 67   : 			case 'c': continue ; break;

  001dd	eb a3		 jmp	 SHORT $LN68@exCheckSim
  001df	e9 0d 02 00 00	 jmp	 $LN64@exCheckSim
$LN60@exCheckSim:

; 68   : 			case 'd': continue ; break;

  001e4	eb 9c		 jmp	 SHORT $LN68@exCheckSim
  001e6	e9 06 02 00 00	 jmp	 $LN64@exCheckSim
$LN59@exCheckSim:

; 69   : 			case 'e': continue ; break;

  001eb	eb 95		 jmp	 SHORT $LN68@exCheckSim
  001ed	e9 ff 01 00 00	 jmp	 $LN64@exCheckSim
$LN58@exCheckSim:

; 70   : 			case 'f': continue ; break;

  001f2	eb 8e		 jmp	 SHORT $LN68@exCheckSim
  001f4	e9 f8 01 00 00	 jmp	 $LN64@exCheckSim
$LN57@exCheckSim:

; 71   : 			case 'g': continue ; break;

  001f9	eb 87		 jmp	 SHORT $LN68@exCheckSim
  001fb	e9 f1 01 00 00	 jmp	 $LN64@exCheckSim
$LN56@exCheckSim:

; 72   : 			case 'h': continue ; break;

  00200	eb 80		 jmp	 SHORT $LN68@exCheckSim
  00202	e9 ea 01 00 00	 jmp	 $LN64@exCheckSim
$LN55@exCheckSim:

; 73   : 			case 'i': continue ; break;

  00207	e9 76 ff ff ff	 jmp	 $LN68@exCheckSim
  0020c	e9 e0 01 00 00	 jmp	 $LN64@exCheckSim
$LN54@exCheckSim:

; 74   : 			case 'j': continue ; break;

  00211	e9 6c ff ff ff	 jmp	 $LN68@exCheckSim
  00216	e9 d6 01 00 00	 jmp	 $LN64@exCheckSim
$LN53@exCheckSim:

; 75   : 			case 'k': continue ; break;

  0021b	e9 62 ff ff ff	 jmp	 $LN68@exCheckSim
  00220	e9 cc 01 00 00	 jmp	 $LN64@exCheckSim
$LN52@exCheckSim:

; 76   : 			case 'l': continue ; break;

  00225	e9 58 ff ff ff	 jmp	 $LN68@exCheckSim
  0022a	e9 c2 01 00 00	 jmp	 $LN64@exCheckSim
$LN51@exCheckSim:

; 77   : 			case 'm': continue ; break;

  0022f	e9 4e ff ff ff	 jmp	 $LN68@exCheckSim
  00234	e9 b8 01 00 00	 jmp	 $LN64@exCheckSim
$LN50@exCheckSim:

; 78   : 			case 'n': continue ; break;

  00239	e9 44 ff ff ff	 jmp	 $LN68@exCheckSim
  0023e	e9 ae 01 00 00	 jmp	 $LN64@exCheckSim
$LN49@exCheckSim:

; 79   : 			case 'o': continue ; break;

  00243	e9 3a ff ff ff	 jmp	 $LN68@exCheckSim
  00248	e9 a4 01 00 00	 jmp	 $LN64@exCheckSim
$LN48@exCheckSim:

; 80   : 			case 'p': continue ; break;

  0024d	e9 30 ff ff ff	 jmp	 $LN68@exCheckSim
  00252	e9 9a 01 00 00	 jmp	 $LN64@exCheckSim
$LN47@exCheckSim:

; 81   : 			case 'q': continue ; break;

  00257	e9 26 ff ff ff	 jmp	 $LN68@exCheckSim
  0025c	e9 90 01 00 00	 jmp	 $LN64@exCheckSim
$LN46@exCheckSim:

; 82   : 			case 'r': continue ; break;

  00261	e9 1c ff ff ff	 jmp	 $LN68@exCheckSim
  00266	e9 86 01 00 00	 jmp	 $LN64@exCheckSim
$LN45@exCheckSim:

; 83   : 			case 's': continue ; break;

  0026b	e9 12 ff ff ff	 jmp	 $LN68@exCheckSim
  00270	e9 7c 01 00 00	 jmp	 $LN64@exCheckSim
$LN44@exCheckSim:

; 84   : 			case 't': continue ; break;

  00275	e9 08 ff ff ff	 jmp	 $LN68@exCheckSim
  0027a	e9 72 01 00 00	 jmp	 $LN64@exCheckSim
$LN43@exCheckSim:

; 85   : 			case 'u': continue ; break;

  0027f	e9 fe fe ff ff	 jmp	 $LN68@exCheckSim
  00284	e9 68 01 00 00	 jmp	 $LN64@exCheckSim
$LN42@exCheckSim:

; 86   : 			case 'v': continue ; break;

  00289	e9 f4 fe ff ff	 jmp	 $LN68@exCheckSim
  0028e	e9 5e 01 00 00	 jmp	 $LN64@exCheckSim
$LN41@exCheckSim:

; 87   : 			case 'w': continue ; break;

  00293	e9 ea fe ff ff	 jmp	 $LN68@exCheckSim
  00298	e9 54 01 00 00	 jmp	 $LN64@exCheckSim
$LN40@exCheckSim:

; 88   : 			case 'x': continue ; break;

  0029d	e9 e0 fe ff ff	 jmp	 $LN68@exCheckSim
  002a2	e9 4a 01 00 00	 jmp	 $LN64@exCheckSim
$LN39@exCheckSim:

; 89   : 			case 'y': continue ; break;

  002a7	e9 d6 fe ff ff	 jmp	 $LN68@exCheckSim
  002ac	e9 40 01 00 00	 jmp	 $LN64@exCheckSim
$LN38@exCheckSim:

; 90   : 			case 'z': continue ; break;

  002b1	e9 cc fe ff ff	 jmp	 $LN68@exCheckSim
  002b6	e9 36 01 00 00	 jmp	 $LN64@exCheckSim
$LN37@exCheckSim:

; 91   : 			case 'A': continue ; break;

  002bb	e9 c2 fe ff ff	 jmp	 $LN68@exCheckSim
  002c0	e9 2c 01 00 00	 jmp	 $LN64@exCheckSim
$LN36@exCheckSim:

; 92   : 			case 'B': continue ; break;

  002c5	e9 b8 fe ff ff	 jmp	 $LN68@exCheckSim
  002ca	e9 22 01 00 00	 jmp	 $LN64@exCheckSim
$LN35@exCheckSim:

; 93   : 			case 'C': continue ; break;

  002cf	e9 ae fe ff ff	 jmp	 $LN68@exCheckSim
  002d4	e9 18 01 00 00	 jmp	 $LN64@exCheckSim
$LN34@exCheckSim:

; 94   : 			case 'D': continue ; break;

  002d9	e9 a4 fe ff ff	 jmp	 $LN68@exCheckSim
  002de	e9 0e 01 00 00	 jmp	 $LN64@exCheckSim
$LN33@exCheckSim:

; 95   : 			case 'E': continue ; break;

  002e3	e9 9a fe ff ff	 jmp	 $LN68@exCheckSim
  002e8	e9 04 01 00 00	 jmp	 $LN64@exCheckSim
$LN32@exCheckSim:

; 96   : 			case 'F': continue ; break;

  002ed	e9 90 fe ff ff	 jmp	 $LN68@exCheckSim
  002f2	e9 fa 00 00 00	 jmp	 $LN64@exCheckSim
$LN31@exCheckSim:

; 97   : 			case 'G': continue ; break;

  002f7	e9 86 fe ff ff	 jmp	 $LN68@exCheckSim
  002fc	e9 f0 00 00 00	 jmp	 $LN64@exCheckSim
$LN30@exCheckSim:

; 98   : 			case 'H': continue ; break;

  00301	e9 7c fe ff ff	 jmp	 $LN68@exCheckSim
  00306	e9 e6 00 00 00	 jmp	 $LN64@exCheckSim
$LN29@exCheckSim:

; 99   : 			case 'I': continue ; break;

  0030b	e9 72 fe ff ff	 jmp	 $LN68@exCheckSim
  00310	e9 dc 00 00 00	 jmp	 $LN64@exCheckSim
$LN28@exCheckSim:

; 100  : 			case 'J': continue ; break;

  00315	e9 68 fe ff ff	 jmp	 $LN68@exCheckSim
  0031a	e9 d2 00 00 00	 jmp	 $LN64@exCheckSim
$LN27@exCheckSim:

; 101  : 			case 'K': continue ; break;

  0031f	e9 5e fe ff ff	 jmp	 $LN68@exCheckSim
  00324	e9 c8 00 00 00	 jmp	 $LN64@exCheckSim
$LN26@exCheckSim:

; 102  : 			case 'L': continue ; break;

  00329	e9 54 fe ff ff	 jmp	 $LN68@exCheckSim
  0032e	e9 be 00 00 00	 jmp	 $LN64@exCheckSim
$LN25@exCheckSim:

; 103  : 			case 'M': continue ; break;

  00333	e9 4a fe ff ff	 jmp	 $LN68@exCheckSim
  00338	e9 b4 00 00 00	 jmp	 $LN64@exCheckSim
$LN24@exCheckSim:

; 104  : 			case 'N': continue ; break;

  0033d	e9 40 fe ff ff	 jmp	 $LN68@exCheckSim
  00342	e9 aa 00 00 00	 jmp	 $LN64@exCheckSim
$LN23@exCheckSim:

; 105  : 			case 'O': continue ; break;

  00347	e9 36 fe ff ff	 jmp	 $LN68@exCheckSim
  0034c	e9 a0 00 00 00	 jmp	 $LN64@exCheckSim
$LN22@exCheckSim:

; 106  : 			case 'P': continue ; break;

  00351	e9 2c fe ff ff	 jmp	 $LN68@exCheckSim
  00356	e9 96 00 00 00	 jmp	 $LN64@exCheckSim
$LN21@exCheckSim:

; 107  : 			case 'Q': continue ; break;

  0035b	e9 22 fe ff ff	 jmp	 $LN68@exCheckSim
  00360	e9 8c 00 00 00	 jmp	 $LN64@exCheckSim
$LN20@exCheckSim:

; 108  : 			case 'R': continue ; break;

  00365	e9 18 fe ff ff	 jmp	 $LN68@exCheckSim
  0036a	e9 82 00 00 00	 jmp	 $LN64@exCheckSim
$LN19@exCheckSim:

; 109  : 			case 'S': continue ; break;

  0036f	e9 0e fe ff ff	 jmp	 $LN68@exCheckSim
  00374	eb 7b		 jmp	 SHORT $LN64@exCheckSim
$LN18@exCheckSim:

; 110  : 			case 'T': continue ; break;

  00376	e9 07 fe ff ff	 jmp	 $LN68@exCheckSim
  0037b	eb 74		 jmp	 SHORT $LN64@exCheckSim
$LN17@exCheckSim:

; 111  : 			case 'U': continue ; break;

  0037d	e9 00 fe ff ff	 jmp	 $LN68@exCheckSim
  00382	eb 6d		 jmp	 SHORT $LN64@exCheckSim
$LN16@exCheckSim:

; 112  : 			case 'V': continue ; break;

  00384	e9 f9 fd ff ff	 jmp	 $LN68@exCheckSim
  00389	eb 66		 jmp	 SHORT $LN64@exCheckSim
$LN15@exCheckSim:

; 113  : 			case 'W': continue ; break;

  0038b	e9 f2 fd ff ff	 jmp	 $LN68@exCheckSim
  00390	eb 5f		 jmp	 SHORT $LN64@exCheckSim
$LN14@exCheckSim:

; 114  : 			case 'X': continue ; break;

  00392	e9 eb fd ff ff	 jmp	 $LN68@exCheckSim
  00397	eb 58		 jmp	 SHORT $LN64@exCheckSim
$LN13@exCheckSim:

; 115  : 			case 'Y': continue ; break;

  00399	e9 e4 fd ff ff	 jmp	 $LN68@exCheckSim
  0039e	eb 51		 jmp	 SHORT $LN64@exCheckSim
$LN12@exCheckSim:

; 116  : 			case 'Z': continue ; break;

  003a0	e9 dd fd ff ff	 jmp	 $LN68@exCheckSim
  003a5	eb 4a		 jmp	 SHORT $LN64@exCheckSim
$LN11@exCheckSim:

; 117  : 			case '0': continue ; break;

  003a7	e9 d6 fd ff ff	 jmp	 $LN68@exCheckSim
  003ac	eb 43		 jmp	 SHORT $LN64@exCheckSim
$LN10@exCheckSim:

; 118  : 			case '1': continue ; break;

  003ae	e9 cf fd ff ff	 jmp	 $LN68@exCheckSim
  003b3	eb 3c		 jmp	 SHORT $LN64@exCheckSim
$LN9@exCheckSim:

; 119  : 			case '2': continue ; break;

  003b5	e9 c8 fd ff ff	 jmp	 $LN68@exCheckSim
  003ba	eb 35		 jmp	 SHORT $LN64@exCheckSim
$LN8@exCheckSim:

; 120  : 			case '3': continue ; break;

  003bc	e9 c1 fd ff ff	 jmp	 $LN68@exCheckSim
  003c1	eb 2e		 jmp	 SHORT $LN64@exCheckSim
$LN7@exCheckSim:

; 121  : 			case '4': continue ; break;

  003c3	e9 ba fd ff ff	 jmp	 $LN68@exCheckSim
  003c8	eb 27		 jmp	 SHORT $LN64@exCheckSim
$LN6@exCheckSim:

; 122  : 			case '5': continue ; break;

  003ca	e9 b3 fd ff ff	 jmp	 $LN68@exCheckSim
  003cf	eb 20		 jmp	 SHORT $LN64@exCheckSim
$LN5@exCheckSim:

; 123  : 			case '6': continue ; break;

  003d1	e9 ac fd ff ff	 jmp	 $LN68@exCheckSim
  003d6	eb 19		 jmp	 SHORT $LN64@exCheckSim
$LN4@exCheckSim:

; 124  : 			case '7': continue ; break;

  003d8	e9 a5 fd ff ff	 jmp	 $LN68@exCheckSim
  003dd	eb 12		 jmp	 SHORT $LN64@exCheckSim
$LN3@exCheckSim:

; 125  : 			case '8': continue ; break;

  003df	e9 9e fd ff ff	 jmp	 $LN68@exCheckSim
  003e4	eb 0b		 jmp	 SHORT $LN64@exCheckSim
$LN2@exCheckSim:

; 126  : 			case '9': continue ; break;

  003e6	e9 97 fd ff ff	 jmp	 $LN68@exCheckSim
  003eb	eb 04		 jmp	 SHORT $LN64@exCheckSim
$LN1@exCheckSim:

; 127  : 			default: return false;

  003ed	32 c0		 xor	 al, al
  003ef	eb 07		 jmp	 SHORT $LN70@exCheckSim
$LN64@exCheckSim:

; 128  : 		}
; 129  : 	}

  003f1	e9 8c fd ff ff	 jmp	 $LN68@exCheckSim
$LN67@exCheckSim:

; 130  : 	return true;

  003f6	b0 01		 mov	 al, 1
$LN70@exCheckSim:

; 131  : }

  003f8	5f		 pop	 edi
  003f9	5e		 pop	 esi
  003fa	5b		 pop	 ebx
  003fb	8b e5		 mov	 esp, ebp
  003fd	5d		 pop	 ebp
  003fe	c3		 ret	 0
  003ff	90		 npad	 1
$LN72@exCheckSim:
  00400	00 00 00 00	 DD	 $LN11@exCheckSim
  00404	00 00 00 00	 DD	 $LN10@exCheckSim
  00408	00 00 00 00	 DD	 $LN9@exCheckSim
  0040c	00 00 00 00	 DD	 $LN8@exCheckSim
  00410	00 00 00 00	 DD	 $LN7@exCheckSim
  00414	00 00 00 00	 DD	 $LN6@exCheckSim
  00418	00 00 00 00	 DD	 $LN5@exCheckSim
  0041c	00 00 00 00	 DD	 $LN4@exCheckSim
  00420	00 00 00 00	 DD	 $LN3@exCheckSim
  00424	00 00 00 00	 DD	 $LN2@exCheckSim
  00428	00 00 00 00	 DD	 $LN1@exCheckSim
  0042c	00 00 00 00	 DD	 $LN1@exCheckSim
  00430	00 00 00 00	 DD	 $LN1@exCheckSim
  00434	00 00 00 00	 DD	 $LN1@exCheckSim
  00438	00 00 00 00	 DD	 $LN1@exCheckSim
  0043c	00 00 00 00	 DD	 $LN1@exCheckSim
  00440	00 00 00 00	 DD	 $LN1@exCheckSim
  00444	00 00 00 00	 DD	 $LN37@exCheckSim
  00448	00 00 00 00	 DD	 $LN36@exCheckSim
  0044c	00 00 00 00	 DD	 $LN35@exCheckSim
  00450	00 00 00 00	 DD	 $LN34@exCheckSim
  00454	00 00 00 00	 DD	 $LN33@exCheckSim
  00458	00 00 00 00	 DD	 $LN32@exCheckSim
  0045c	00 00 00 00	 DD	 $LN31@exCheckSim
  00460	00 00 00 00	 DD	 $LN30@exCheckSim
  00464	00 00 00 00	 DD	 $LN29@exCheckSim
  00468	00 00 00 00	 DD	 $LN28@exCheckSim
  0046c	00 00 00 00	 DD	 $LN27@exCheckSim
  00470	00 00 00 00	 DD	 $LN26@exCheckSim
  00474	00 00 00 00	 DD	 $LN25@exCheckSim
  00478	00 00 00 00	 DD	 $LN24@exCheckSim
  0047c	00 00 00 00	 DD	 $LN23@exCheckSim
  00480	00 00 00 00	 DD	 $LN22@exCheckSim
  00484	00 00 00 00	 DD	 $LN21@exCheckSim
  00488	00 00 00 00	 DD	 $LN20@exCheckSim
  0048c	00 00 00 00	 DD	 $LN19@exCheckSim
  00490	00 00 00 00	 DD	 $LN18@exCheckSim
  00494	00 00 00 00	 DD	 $LN17@exCheckSim
  00498	00 00 00 00	 DD	 $LN16@exCheckSim
  0049c	00 00 00 00	 DD	 $LN15@exCheckSim
  004a0	00 00 00 00	 DD	 $LN14@exCheckSim
  004a4	00 00 00 00	 DD	 $LN13@exCheckSim
  004a8	00 00 00 00	 DD	 $LN12@exCheckSim
  004ac	00 00 00 00	 DD	 $LN1@exCheckSim
  004b0	00 00 00 00	 DD	 $LN1@exCheckSim
  004b4	00 00 00 00	 DD	 $LN1@exCheckSim
  004b8	00 00 00 00	 DD	 $LN1@exCheckSim
  004bc	00 00 00 00	 DD	 $LN1@exCheckSim
  004c0	00 00 00 00	 DD	 $LN1@exCheckSim
  004c4	00 00 00 00	 DD	 $LN63@exCheckSim
  004c8	00 00 00 00	 DD	 $LN62@exCheckSim
  004cc	00 00 00 00	 DD	 $LN61@exCheckSim
  004d0	00 00 00 00	 DD	 $LN60@exCheckSim
  004d4	00 00 00 00	 DD	 $LN59@exCheckSim
  004d8	00 00 00 00	 DD	 $LN58@exCheckSim
  004dc	00 00 00 00	 DD	 $LN57@exCheckSim
  004e0	00 00 00 00	 DD	 $LN56@exCheckSim
  004e4	00 00 00 00	 DD	 $LN55@exCheckSim
  004e8	00 00 00 00	 DD	 $LN54@exCheckSim
  004ec	00 00 00 00	 DD	 $LN53@exCheckSim
  004f0	00 00 00 00	 DD	 $LN52@exCheckSim
  004f4	00 00 00 00	 DD	 $LN51@exCheckSim
  004f8	00 00 00 00	 DD	 $LN50@exCheckSim
  004fc	00 00 00 00	 DD	 $LN49@exCheckSim
  00500	00 00 00 00	 DD	 $LN48@exCheckSim
  00504	00 00 00 00	 DD	 $LN47@exCheckSim
  00508	00 00 00 00	 DD	 $LN46@exCheckSim
  0050c	00 00 00 00	 DD	 $LN45@exCheckSim
  00510	00 00 00 00	 DD	 $LN44@exCheckSim
  00514	00 00 00 00	 DD	 $LN43@exCheckSim
  00518	00 00 00 00	 DD	 $LN42@exCheckSim
  0051c	00 00 00 00	 DD	 $LN41@exCheckSim
  00520	00 00 00 00	 DD	 $LN40@exCheckSim
  00524	00 00 00 00	 DD	 $LN39@exCheckSim
  00528	00 00 00 00	 DD	 $LN38@exCheckSim
?exCheckSimbol@@YA_NPADH@Z ENDP				; exCheckSimbol
_TEXT	ENDS
PUBLIC	??_C@_07NBCGADJA@Unknown?$AA@			; `string'
PUBLIC	??_C@_07CCGFKIPK@Arkania?$AA@			; `string'
PUBLIC	?exMapName@@YAPADH@Z				; exMapName
EXTRN	?GetText@CExText@@QAEPADH@Z:PROC		; CExText::GetText
EXTRN	?g_ExText@@3VCExText@@A:BYTE			; g_ExText
;	COMDAT ??_C@_07NBCGADJA@Unknown?$AA@
CONST	SEGMENT
??_C@_07NBCGADJA@Unknown?$AA@ DB 'Unknown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGFKIPK@Arkania?$AA@
CONST	SEGMENT
??_C@_07CCGFKIPK@Arkania?$AA@ DB 'Arkania', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv85 = -68						; size = 4
_MapNum$ = 8						; size = 4
?exMapName@@YAPADH@Z PROC				; exMapName

; 134  : {

  00530	55		 push	 ebp
  00531	8b ec		 mov	 ebp, esp
  00533	83 ec 44	 sub	 esp, 68			; 00000044H
  00536	53		 push	 ebx
  00537	56		 push	 esi
  00538	57		 push	 edi

; 135  : 	if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2) || g_ExLicense.CheckUser(eExUB::MU2Play))

  00539	6a 20		 push	 32			; 00000020H
  0053b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00540	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00545	0f b6 c0	 movzx	 eax, al
  00548	85 c0		 test	 eax, eax
  0054a	75 39		 jne	 SHORT $LN72@exMapName
  0054c	6a 21		 push	 33			; 00000021H
  0054e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00553	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00558	0f b6 c0	 movzx	 eax, al
  0055b	85 c0		 test	 eax, eax
  0055d	75 26		 jne	 SHORT $LN72@exMapName
  0055f	6a 22		 push	 34			; 00000022H
  00561	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00566	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0056b	0f b6 c0	 movzx	 eax, al
  0056e	85 c0		 test	 eax, eax
  00570	75 13		 jne	 SHORT $LN72@exMapName
  00572	6a 36		 push	 54			; 00000036H
  00574	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00579	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0057e	0f b6 c0	 movzx	 eax, al
  00581	85 c0		 test	 eax, eax
  00583	74 10		 je	 SHORT $LN73@exMapName
$LN72@exMapName:

; 136  : 	{
; 137  : 		if(MAP_INDEX_ELBELAND == MapNum)

  00585	83 7d 08 33	 cmp	 DWORD PTR _MapNum$[ebp], 51 ; 00000033H
  00589	75 0a		 jne	 SHORT $LN73@exMapName

; 138  : 		{
; 139  : 			return  "Arkania";

  0058b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07CCGFKIPK@Arkania?$AA@
  00590	e9 57 05 00 00	 jmp	 $LN74@exMapName
$LN73@exMapName:

; 140  : 		}
; 141  : 	}
; 142  : 
; 143  : 	switch(MapNum)

  00595	8b 45 08	 mov	 eax, DWORD PTR _MapNum$[ebp]
  00598	89 45 bc	 mov	 DWORD PTR tv85[ebp], eax
  0059b	83 7d bc 51	 cmp	 DWORD PTR tv85[ebp], 81	; 00000051H
  0059f	0f 87 42 05 00
	00		 ja	 $LN69@exMapName
  005a5	8b 4d bc	 mov	 ecx, DWORD PTR tv85[ebp]
  005a8	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN76@exMapName[ecx*4]
$LN68@exMapName:

; 144  : 	{
; 145  : 	case MAP_INDEX_RORENCIA:			return g_ExText.GetText(164); //Lorencia";

  005af	68 a4 00 00 00	 push	 164			; 000000a4H
  005b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  005b9	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  005be	e9 29 05 00 00	 jmp	 $LN74@exMapName
$LN67@exMapName:

; 146  : 	case MAP_INDEX_DUNGEON:				return g_ExText.GetText(165); //Dungeon";

  005c3	68 a5 00 00 00	 push	 165			; 000000a5H
  005c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  005cd	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  005d2	e9 15 05 00 00	 jmp	 $LN74@exMapName
$LN66@exMapName:

; 147  : 	case MAP_INDEX_DEVIAS:				return g_ExText.GetText(166); //Devias";

  005d7	68 a6 00 00 00	 push	 166			; 000000a6H
  005dc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  005e1	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  005e6	e9 01 05 00 00	 jmp	 $LN74@exMapName
$LN65@exMapName:

; 148  : 	case MAP_INDEX_NORIA:				return g_ExText.GetText(167); //Noria";

  005eb	68 a7 00 00 00	 push	 167			; 000000a7H
  005f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  005f5	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  005fa	e9 ed 04 00 00	 jmp	 $LN74@exMapName
$LN64@exMapName:

; 149  : 	case MAP_INDEX_LOSTTOWER:			return g_ExText.GetText(168); //LostTower";

  005ff	68 a8 00 00 00	 push	 168			; 000000a8H
  00604	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00609	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0060e	e9 d9 04 00 00	 jmp	 $LN74@exMapName
$LN63@exMapName:

; 150  : 	//MAP_INDEX_RESERVED = 0x5,
; 151  : 	case MAP_INDEX_BATTLESOCCER:		return g_ExText.GetText(169); //Arena";

  00613	68 a9 00 00 00	 push	 169			; 000000a9H
  00618	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0061d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00622	e9 c5 04 00 00	 jmp	 $LN74@exMapName
$LN62@exMapName:

; 152  : 	case MAP_INDEX_ATHLANSE:			return g_ExText.GetText(170); //Atlans";

  00627	68 aa 00 00 00	 push	 170			; 000000aaH
  0062c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00631	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00636	e9 b1 04 00 00	 jmp	 $LN74@exMapName
$LN61@exMapName:

; 153  : 	case MAP_INDEX_TARKAN:				return g_ExText.GetText(171); //Tarkan";

  0063b	68 ab 00 00 00	 push	 171			; 000000abH
  00640	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00645	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0064a	e9 9d 04 00 00	 jmp	 $LN74@exMapName
$LN60@exMapName:

; 154  : 	case MAP_INDEX_DEVILSQUARE:			return g_ExText.GetText(172); //DevilSquare";

  0064f	68 ac 00 00 00	 push	 172			; 000000acH
  00654	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00659	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0065e	e9 89 04 00 00	 jmp	 $LN74@exMapName
$LN59@exMapName:

; 155  : 	case MAP_INDEX_ICARUS:				return g_ExText.GetText(173); //Icarus";

  00663	68 ad 00 00 00	 push	 173			; 000000adH
  00668	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0066d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00672	e9 75 04 00 00	 jmp	 $LN74@exMapName
$LN58@exMapName:

; 156  : 	case MAP_INDEX_BLOODCASTLE1:		return g_ExText.GetText(174); //Blood Castle 1";

  00677	68 ae 00 00 00	 push	 174			; 000000aeH
  0067c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00681	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00686	e9 61 04 00 00	 jmp	 $LN74@exMapName
$LN57@exMapName:

; 157  : 	case MAP_INDEX_BLOODCASTLE2:		return g_ExText.GetText(175); //Blood Castle 2";

  0068b	68 af 00 00 00	 push	 175			; 000000afH
  00690	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00695	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0069a	e9 4d 04 00 00	 jmp	 $LN74@exMapName
$LN56@exMapName:

; 158  : 	case MAP_INDEX_BLOODCASTLE3:		return g_ExText.GetText(176); //Blood Castle 3";

  0069f	68 b0 00 00 00	 push	 176			; 000000b0H
  006a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  006a9	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  006ae	e9 39 04 00 00	 jmp	 $LN74@exMapName
$LN55@exMapName:

; 159  : 	case MAP_INDEX_BLOODCASTLE4:		return g_ExText.GetText(177); //Blood Castle 4";

  006b3	68 b1 00 00 00	 push	 177			; 000000b1H
  006b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  006bd	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  006c2	e9 25 04 00 00	 jmp	 $LN74@exMapName
$LN54@exMapName:

; 160  : 	case MAP_INDEX_BLOODCASTLE5:		return g_ExText.GetText(178); //Blood Castle 5";

  006c7	68 b2 00 00 00	 push	 178			; 000000b2H
  006cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  006d1	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  006d6	e9 11 04 00 00	 jmp	 $LN74@exMapName
$LN53@exMapName:

; 161  : 	case MAP_INDEX_BLOODCASTLE6:		return g_ExText.GetText(179); //Blood Castle 6";

  006db	68 b3 00 00 00	 push	 179			; 000000b3H
  006e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  006e5	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  006ea	e9 fd 03 00 00	 jmp	 $LN74@exMapName
$LN52@exMapName:

; 162  : 	case MAP_INDEX_BLOODCASTLE7:		return g_ExText.GetText(180); //Blood Castle 7";

  006ef	68 b4 00 00 00	 push	 180			; 000000b4H
  006f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  006f9	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  006fe	e9 e9 03 00 00	 jmp	 $LN74@exMapName
$LN51@exMapName:

; 163  : 	case MAP_INDEX_CHAOSCASTLE1:		return g_ExText.GetText(181); //Chaos Castle 1";

  00703	68 b5 00 00 00	 push	 181			; 000000b5H
  00708	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0070d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00712	e9 d5 03 00 00	 jmp	 $LN74@exMapName
$LN50@exMapName:

; 164  : 	case MAP_INDEX_CHAOSCASTLE2:		return g_ExText.GetText(182); //Chaos Castle 2";

  00717	68 b6 00 00 00	 push	 182			; 000000b6H
  0071c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00721	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00726	e9 c1 03 00 00	 jmp	 $LN74@exMapName
$LN49@exMapName:

; 165  : 	case MAP_INDEX_CHAOSCASTLE3:		return g_ExText.GetText(183); //Chaos Castle 3";

  0072b	68 b7 00 00 00	 push	 183			; 000000b7H
  00730	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00735	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0073a	e9 ad 03 00 00	 jmp	 $LN74@exMapName
$LN48@exMapName:

; 166  : 	case MAP_INDEX_CHAOSCASTLE4:		return g_ExText.GetText(184); //Chaos Castle 4";

  0073f	68 b8 00 00 00	 push	 184			; 000000b8H
  00744	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00749	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0074e	e9 99 03 00 00	 jmp	 $LN74@exMapName
$LN47@exMapName:

; 167  : 	case MAP_INDEX_CHAOSCASTLE5:		return g_ExText.GetText(185); //Chaos Castle 5";

  00753	68 b9 00 00 00	 push	 185			; 000000b9H
  00758	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0075d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00762	e9 85 03 00 00	 jmp	 $LN74@exMapName
$LN46@exMapName:

; 168  : 	case MAP_INDEX_CHAOSCASTLE6:		return g_ExText.GetText(186); //Chaos Castle 6";

  00767	68 ba 00 00 00	 push	 186			; 000000baH
  0076c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00771	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00776	e9 71 03 00 00	 jmp	 $LN74@exMapName
$LN45@exMapName:

; 169  : 	case MAP_INDEX_KALIMA1:				return g_ExText.GetText(187); //Kalima 1";

  0077b	68 bb 00 00 00	 push	 187			; 000000bbH
  00780	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00785	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0078a	e9 5d 03 00 00	 jmp	 $LN74@exMapName
$LN44@exMapName:

; 170  : 	case MAP_INDEX_KALIMA2:				return g_ExText.GetText(188); //Kalima 2";

  0078f	68 bc 00 00 00	 push	 188			; 000000bcH
  00794	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00799	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0079e	e9 49 03 00 00	 jmp	 $LN74@exMapName
$LN43@exMapName:

; 171  : 	case MAP_INDEX_KALIMA3:				return g_ExText.GetText(189); //Kalima 3";

  007a3	68 bd 00 00 00	 push	 189			; 000000bdH
  007a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  007ad	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  007b2	e9 35 03 00 00	 jmp	 $LN74@exMapName
$LN42@exMapName:

; 172  : 	case MAP_INDEX_KALIMA4:				return g_ExText.GetText(190); //Kalima 4";

  007b7	68 be 00 00 00	 push	 190			; 000000beH
  007bc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  007c1	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  007c6	e9 21 03 00 00	 jmp	 $LN74@exMapName
$LN41@exMapName:

; 173  : 	case MAP_INDEX_KALIMA5:				return g_ExText.GetText(191); //Kalima 5";

  007cb	68 bf 00 00 00	 push	 191			; 000000bfH
  007d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  007d5	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  007da	e9 0d 03 00 00	 jmp	 $LN74@exMapName
$LN40@exMapName:

; 174  : 	case MAP_INDEX_KALIMA6:				return g_ExText.GetText(192); //Kalima 6";

  007df	68 c0 00 00 00	 push	 192			; 000000c0H
  007e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  007e9	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  007ee	e9 f9 02 00 00	 jmp	 $LN74@exMapName
$LN39@exMapName:

; 175  : 	case MAP_INDEX_CASTLESIEGE:			return g_ExText.GetText(193); //Castle";

  007f3	68 c1 00 00 00	 push	 193			; 000000c1H
  007f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  007fd	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00802	e9 e5 02 00 00	 jmp	 $LN74@exMapName
$LN38@exMapName:

; 176  : 	case MAP_INDEX_CASTLEHUNTZONE :		return g_ExText.GetText(194); //Land Of Trial";

  00807	68 c2 00 00 00	 push	 194			; 000000c2H
  0080c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00811	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00816	e9 d1 02 00 00	 jmp	 $LN74@exMapName
$LN37@exMapName:

; 177  : 	//case MAP_INDEX_DEVILSQUARE2:		return g_ExText.GetText(164); //Blood Castle 7";
; 178  : 	case MAP_INDEX_AIDA:				return g_ExText.GetText(195); //Aida";

  0081b	68 c3 00 00 00	 push	 195			; 000000c3H
  00820	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00825	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0082a	e9 bd 02 00 00	 jmp	 $LN74@exMapName
$LN36@exMapName:

; 179  : 	case MAP_INDEX_CRYWOLF_FIRSTZONE:	return g_ExText.GetText(196); //Cry Wolf";

  0082f	68 c4 00 00 00	 push	 196			; 000000c4H
  00834	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00839	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0083e	e9 a9 02 00 00	 jmp	 $LN74@exMapName
$LN35@exMapName:

; 180  : 	case MAP_INDEX_CRYWOLF_SECONDZONE:	return g_ExText.GetText(197); //Cry Wolf";

  00843	68 c5 00 00 00	 push	 197			; 000000c5H
  00848	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0084d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00852	e9 95 02 00 00	 jmp	 $LN74@exMapName
$LN34@exMapName:

; 181  : 	case MAP_INDEX_KALIMA7:				return g_ExText.GetText(198); //Kalima 7";

  00857	68 c6 00 00 00	 push	 198			; 000000c6H
  0085c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00861	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00866	e9 81 02 00 00	 jmp	 $LN74@exMapName
$LN33@exMapName:

; 182  : 	case MAP_INDEX_KANTURU1:			return g_ExText.GetText(199); //Kanturu";

  0086b	68 c7 00 00 00	 push	 199			; 000000c7H
  00870	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00875	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0087a	e9 6d 02 00 00	 jmp	 $LN74@exMapName
$LN32@exMapName:

; 183  : 	case MAP_INDEX_KANTURU2:			return g_ExText.GetText(200); //Kanturu Relic";

  0087f	68 c8 00 00 00	 push	 200			; 000000c8H
  00884	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00889	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0088e	e9 59 02 00 00	 jmp	 $LN74@exMapName
$LN31@exMapName:

; 184  : 	case MAP_INDEX_KANTURU_BOSS:		return g_ExText.GetText(201); //Kanturu Boss";

  00893	68 c9 00 00 00	 push	 201			; 000000c9H
  00898	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0089d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  008a2	e9 45 02 00 00	 jmp	 $LN74@exMapName
$LN30@exMapName:

; 185  : 	case MAP_INDEX_GM_SUMMONZONE:		return g_ExText.GetText(245); //Blood Castle 7";

  008a7	68 f5 00 00 00	 push	 245			; 000000f5H
  008ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  008b1	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  008b6	e9 31 02 00 00	 jmp	 $LN74@exMapName
$LN29@exMapName:

; 186  : 	case MAP_INDEX_BALGASS_BARRACKS:	return g_ExText.GetText(202); //Balgas Baraks";

  008bb	68 ca 00 00 00	 push	 202			; 000000caH
  008c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  008c5	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  008ca	e9 1d 02 00 00	 jmp	 $LN74@exMapName
$LN28@exMapName:

; 187  : 	case MAP_INDEX_BALGASS_REFUGEE:		return g_ExText.GetText(203); //Balgas Refuge";

  008cf	68 cb 00 00 00	 push	 203			; 000000cbH
  008d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  008d9	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  008de	e9 09 02 00 00	 jmp	 $LN74@exMapName
$LN27@exMapName:

; 188  : 	case MAP_INDEX_ILLUSIONTEMPLE1:		return g_ExText.GetText(204); //Illusion Temple 1";

  008e3	68 cc 00 00 00	 push	 204			; 000000ccH
  008e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  008ed	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  008f2	e9 f5 01 00 00	 jmp	 $LN74@exMapName
$LN26@exMapName:

; 189  : 	case MAP_INDEX_ILLUSIONTEMPLE2:		return g_ExText.GetText(205); //Illusion Temple 2";

  008f7	68 cd 00 00 00	 push	 205			; 000000cdH
  008fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00901	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00906	e9 e1 01 00 00	 jmp	 $LN74@exMapName
$LN25@exMapName:

; 190  : 	case MAP_INDEX_ILLUSIONTEMPLE3:		return g_ExText.GetText(206); //Illusion Temple 3";

  0090b	68 ce 00 00 00	 push	 206			; 000000ceH
  00910	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00915	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0091a	e9 cd 01 00 00	 jmp	 $LN74@exMapName
$LN24@exMapName:

; 191  : 	case MAP_INDEX_ILLUSIONTEMPLE4:		return g_ExText.GetText(207); //Illusion Temple 4";

  0091f	68 cf 00 00 00	 push	 207			; 000000cfH
  00924	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00929	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0092e	e9 b9 01 00 00	 jmp	 $LN74@exMapName
$LN23@exMapName:

; 192  : 	case MAP_INDEX_ILLUSIONTEMPLE5:		return g_ExText.GetText(208); //Illusion Temple 5";

  00933	68 d0 00 00 00	 push	 208			; 000000d0H
  00938	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0093d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00942	e9 a5 01 00 00	 jmp	 $LN74@exMapName
$LN22@exMapName:

; 193  : 	case MAP_INDEX_ILLUSIONTEMPLE6:		return g_ExText.GetText(209); //Illusion Temple 6";

  00947	68 d1 00 00 00	 push	 209			; 000000d1H
  0094c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00951	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00956	e9 91 01 00 00	 jmp	 $LN74@exMapName
$LN21@exMapName:

; 194  : 	case MAP_INDEX_ELBELAND:			return g_ExText.GetText(210); //Elblend";

  0095b	68 d2 00 00 00	 push	 210			; 000000d2H
  00960	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00965	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0096a	e9 7d 01 00 00	 jmp	 $LN74@exMapName
$LN20@exMapName:

; 195  : 	case MAP_INDEX_BLOODCASTLE8:		return g_ExText.GetText(211); //Blood Castle 8";

  0096f	68 d3 00 00 00	 push	 211			; 000000d3H
  00974	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00979	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0097e	e9 69 01 00 00	 jmp	 $LN74@exMapName
$LN19@exMapName:

; 196  : 	case MAP_INDEX_CHAOSCASTLE7:		return g_ExText.GetText(212); //Chaos Castle 7";

  00983	68 d4 00 00 00	 push	 212			; 000000d4H
  00988	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0098d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00992	e9 55 01 00 00	 jmp	 $LN74@exMapName
$LN18@exMapName:

; 197  : 	case MAP_INDEX_DEVILSQUARE7:		return g_ExText.GetText(213); //Devil Squere 7";

  00997	68 d5 00 00 00	 push	 213			; 000000d5H
  0099c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  009a1	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  009a6	e9 41 01 00 00	 jmp	 $LN74@exMapName
$LN17@exMapName:

; 198  : 	case MAP_INDEX_SWAMPOFCALMNESS:		return g_ExText.GetText(214); //Swamp Of Calmness";

  009ab	68 d6 00 00 00	 push	 214			; 000000d6H
  009b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  009b5	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  009ba	e9 2d 01 00 00	 jmp	 $LN74@exMapName
$LN16@exMapName:

; 199  : 	case MAP_INDEX_RAKLION:				return g_ExText.GetText(215); //Raklion";

  009bf	68 d7 00 00 00	 push	 215			; 000000d7H
  009c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  009c9	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  009ce	e9 19 01 00 00	 jmp	 $LN74@exMapName
$LN15@exMapName:

; 200  : 	case MAP_INDEX_RAKLION_BOSS:		return g_ExText.GetText(216); //Raklion Boss";

  009d3	68 d8 00 00 00	 push	 216			; 000000d8H
  009d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  009dd	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  009e2	e9 05 01 00 00	 jmp	 $LN74@exMapName
$LN14@exMapName:

; 201  : 	case MAP_INDEX_SANTATOWN:			return g_ExText.GetText(217); //Santa Town";

  009e7	68 d9 00 00 00	 push	 217			; 000000d9H
  009ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  009f1	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  009f6	e9 f1 00 00 00	 jmp	 $LN74@exMapName
$LN13@exMapName:

; 202  : 	case MAP_INDEX_VULCAN:				return g_ExText.GetText(218); //Vulcan";

  009fb	68 da 00 00 00	 push	 218			; 000000daH
  00a00	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00a05	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00a0a	e9 dd 00 00 00	 jmp	 $LN74@exMapName
$LN12@exMapName:

; 203  : 	case MAP_INDEX_VULCANROOM:			return g_ExText.GetText(219); //Vulcan Room";

  00a0f	68 db 00 00 00	 push	 219			; 000000dbH
  00a14	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00a19	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00a1e	e9 c9 00 00 00	 jmp	 $LN74@exMapName
$LN11@exMapName:

; 204  : 	case MAP_INDEX_DOUBLE_GOER1:		return g_ExText.GetText(220); //Double Goer 1";

  00a23	68 dc 00 00 00	 push	 220			; 000000dcH
  00a28	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00a2d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00a32	e9 b5 00 00 00	 jmp	 $LN74@exMapName
$LN10@exMapName:

; 205  : 	case MAP_INDEX_DOUBLE_GOER2:		return g_ExText.GetText(221); //Double Goer 2";

  00a37	68 dd 00 00 00	 push	 221			; 000000ddH
  00a3c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00a41	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00a46	e9 a1 00 00 00	 jmp	 $LN74@exMapName
$LN9@exMapName:

; 206  : 	case MAP_INDEX_DOUBLE_GOER3:		return g_ExText.GetText(222); //Double Goer 3";

  00a4b	68 de 00 00 00	 push	 222			; 000000deH
  00a50	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00a55	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00a5a	e9 8d 00 00 00	 jmp	 $LN74@exMapName
$LN8@exMapName:

; 207  : 	case MAP_INDEX_DOUBLE_GOER4:		return g_ExText.GetText(223); //Double Goer 4";

  00a5f	68 df 00 00 00	 push	 223			; 000000dfH
  00a64	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00a69	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00a6e	eb 7c		 jmp	 SHORT $LN74@exMapName
$LN7@exMapName:

; 208  : 	case MAP_INDEX_IMPERIAL1:			return g_ExText.GetText(224); //Imperial 1";

  00a70	68 e0 00 00 00	 push	 224			; 000000e0H
  00a75	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00a7a	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00a7f	eb 6b		 jmp	 SHORT $LN74@exMapName
$LN6@exMapName:

; 209  : 	case MAP_INDEX_IMPERIAL2:			return g_ExText.GetText(225); //Imperial 2";

  00a81	68 e1 00 00 00	 push	 225			; 000000e1H
  00a86	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00a8b	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00a90	eb 5a		 jmp	 SHORT $LN74@exMapName
$LN5@exMapName:

; 210  : 	case MAP_INDEX_IMPERIAL3:			return g_ExText.GetText(226); //Imperial 3";

  00a92	68 e2 00 00 00	 push	 226			; 000000e2H
  00a97	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00a9c	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00aa1	eb 49		 jmp	 SHORT $LN74@exMapName
$LN4@exMapName:

; 211  : 	case MAP_INDEX_IMPERIAL4:			return g_ExText.GetText(227); //Imperial 4";

  00aa3	68 e3 00 00 00	 push	 227			; 000000e3H
  00aa8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00aad	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00ab2	eb 38		 jmp	 SHORT $LN74@exMapName
$LN3@exMapName:

; 212  : 	case 79: return g_ExText.GetText(228); //Loren Market";

  00ab4	68 e4 00 00 00	 push	 228			; 000000e4H
  00ab9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00abe	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00ac3	eb 27		 jmp	 SHORT $LN74@exMapName
$LN2@exMapName:

; 213  : 	case 80: return g_ExText.GetText(229); //Karutan";

  00ac5	68 e5 00 00 00	 push	 229			; 000000e5H
  00aca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00acf	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00ad4	eb 16		 jmp	 SHORT $LN74@exMapName
$LN1@exMapName:

; 214  : 	case 81: return g_ExText.GetText(230); //Karutan 2";

  00ad6	68 e6 00 00 00	 push	 230			; 000000e6H
  00adb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  00ae0	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  00ae5	eb 05		 jmp	 SHORT $LN74@exMapName
$LN69@exMapName:

; 215  : 	}
; 216  : 
; 217  : 	return  "Unknown";

  00ae7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07NBCGADJA@Unknown?$AA@
$LN74@exMapName:

; 218  : }

  00aec	5f		 pop	 edi
  00aed	5e		 pop	 esi
  00aee	5b		 pop	 ebx
  00aef	8b e5		 mov	 esp, ebp
  00af1	5d		 pop	 ebp
  00af2	c3		 ret	 0
  00af3	90		 npad	 1
$LN76@exMapName:
  00af4	00 00 00 00	 DD	 $LN68@exMapName
  00af8	00 00 00 00	 DD	 $LN67@exMapName
  00afc	00 00 00 00	 DD	 $LN66@exMapName
  00b00	00 00 00 00	 DD	 $LN65@exMapName
  00b04	00 00 00 00	 DD	 $LN64@exMapName
  00b08	00 00 00 00	 DD	 $LN69@exMapName
  00b0c	00 00 00 00	 DD	 $LN63@exMapName
  00b10	00 00 00 00	 DD	 $LN62@exMapName
  00b14	00 00 00 00	 DD	 $LN61@exMapName
  00b18	00 00 00 00	 DD	 $LN60@exMapName
  00b1c	00 00 00 00	 DD	 $LN59@exMapName
  00b20	00 00 00 00	 DD	 $LN58@exMapName
  00b24	00 00 00 00	 DD	 $LN57@exMapName
  00b28	00 00 00 00	 DD	 $LN56@exMapName
  00b2c	00 00 00 00	 DD	 $LN55@exMapName
  00b30	00 00 00 00	 DD	 $LN54@exMapName
  00b34	00 00 00 00	 DD	 $LN53@exMapName
  00b38	00 00 00 00	 DD	 $LN52@exMapName
  00b3c	00 00 00 00	 DD	 $LN51@exMapName
  00b40	00 00 00 00	 DD	 $LN50@exMapName
  00b44	00 00 00 00	 DD	 $LN49@exMapName
  00b48	00 00 00 00	 DD	 $LN48@exMapName
  00b4c	00 00 00 00	 DD	 $LN47@exMapName
  00b50	00 00 00 00	 DD	 $LN46@exMapName
  00b54	00 00 00 00	 DD	 $LN45@exMapName
  00b58	00 00 00 00	 DD	 $LN44@exMapName
  00b5c	00 00 00 00	 DD	 $LN43@exMapName
  00b60	00 00 00 00	 DD	 $LN42@exMapName
  00b64	00 00 00 00	 DD	 $LN41@exMapName
  00b68	00 00 00 00	 DD	 $LN40@exMapName
  00b6c	00 00 00 00	 DD	 $LN39@exMapName
  00b70	00 00 00 00	 DD	 $LN38@exMapName
  00b74	00 00 00 00	 DD	 $LN69@exMapName
  00b78	00 00 00 00	 DD	 $LN37@exMapName
  00b7c	00 00 00 00	 DD	 $LN36@exMapName
  00b80	00 00 00 00	 DD	 $LN35@exMapName
  00b84	00 00 00 00	 DD	 $LN34@exMapName
  00b88	00 00 00 00	 DD	 $LN33@exMapName
  00b8c	00 00 00 00	 DD	 $LN32@exMapName
  00b90	00 00 00 00	 DD	 $LN31@exMapName
  00b94	00 00 00 00	 DD	 $LN30@exMapName
  00b98	00 00 00 00	 DD	 $LN29@exMapName
  00b9c	00 00 00 00	 DD	 $LN28@exMapName
  00ba0	00 00 00 00	 DD	 $LN69@exMapName
  00ba4	00 00 00 00	 DD	 $LN69@exMapName
  00ba8	00 00 00 00	 DD	 $LN27@exMapName
  00bac	00 00 00 00	 DD	 $LN26@exMapName
  00bb0	00 00 00 00	 DD	 $LN25@exMapName
  00bb4	00 00 00 00	 DD	 $LN24@exMapName
  00bb8	00 00 00 00	 DD	 $LN23@exMapName
  00bbc	00 00 00 00	 DD	 $LN22@exMapName
  00bc0	00 00 00 00	 DD	 $LN21@exMapName
  00bc4	00 00 00 00	 DD	 $LN20@exMapName
  00bc8	00 00 00 00	 DD	 $LN19@exMapName
  00bcc	00 00 00 00	 DD	 $LN18@exMapName
  00bd0	00 00 00 00	 DD	 $LN69@exMapName
  00bd4	00 00 00 00	 DD	 $LN17@exMapName
  00bd8	00 00 00 00	 DD	 $LN16@exMapName
  00bdc	00 00 00 00	 DD	 $LN15@exMapName
  00be0	00 00 00 00	 DD	 $LN69@exMapName
  00be4	00 00 00 00	 DD	 $LN69@exMapName
  00be8	00 00 00 00	 DD	 $LN69@exMapName
  00bec	00 00 00 00	 DD	 $LN14@exMapName
  00bf0	00 00 00 00	 DD	 $LN13@exMapName
  00bf4	00 00 00 00	 DD	 $LN12@exMapName
  00bf8	00 00 00 00	 DD	 $LN11@exMapName
  00bfc	00 00 00 00	 DD	 $LN10@exMapName
  00c00	00 00 00 00	 DD	 $LN9@exMapName
  00c04	00 00 00 00	 DD	 $LN8@exMapName
  00c08	00 00 00 00	 DD	 $LN7@exMapName
  00c0c	00 00 00 00	 DD	 $LN6@exMapName
  00c10	00 00 00 00	 DD	 $LN5@exMapName
  00c14	00 00 00 00	 DD	 $LN4@exMapName
  00c18	00 00 00 00	 DD	 $LN69@exMapName
  00c1c	00 00 00 00	 DD	 $LN69@exMapName
  00c20	00 00 00 00	 DD	 $LN69@exMapName
  00c24	00 00 00 00	 DD	 $LN69@exMapName
  00c28	00 00 00 00	 DD	 $LN69@exMapName
  00c2c	00 00 00 00	 DD	 $LN69@exMapName
  00c30	00 00 00 00	 DD	 $LN3@exMapName
  00c34	00 00 00 00	 DD	 $LN2@exMapName
  00c38	00 00 00 00	 DD	 $LN1@exMapName
?exMapName@@YAPADH@Z ENDP				; exMapName
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
PUBLIC	??_C@_0BC@FFOHHNEG@?$CFd?4?$CFd?4?$CFd?5?$CFd?3?$CFd?3?$CFd?$AA@ ; `string'
PUBLIC	?StrToCTime@@YA?AVCTime@ATL@@PBD@Z		; StrToCTime
EXTRN	_sscanf:PROC
;	COMDAT ??_C@_0BC@FFOHHNEG@?$CFd?4?$CFd?4?$CFd?5?$CFd?3?$CFd?3?$CFd?$AA@
CONST	SEGMENT
??_C@_0BC@FFOHHNEG@?$CFd?4?$CFd?4?$CFd?5?$CFd?3?$CFd?3?$CFd?$AA@ DB '%d.%'
	DB	'd.%d %d:%d:%d', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_ss$ = -24						; size = 4
_mm$ = -20						; size = 4
_hh$ = -16						; size = 4
_day$ = -12						; size = 4
_month$ = -8						; size = 4
_year$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?StrToCTime@@YA?AVCTime@ATL@@PBD@Z PROC			; StrToCTime

; 221  : {

  00c40	55		 push	 ebp
  00c41	8b ec		 mov	 ebp, esp
  00c43	83 ec 58	 sub	 esp, 88			; 00000058H
  00c46	53		 push	 ebx
  00c47	56		 push	 esi
  00c48	57		 push	 edi

; 222  : 	int year, month, day, hh, mm, ss;
; 223  : 	sscanf(str, "%d.%d.%d %d:%d:%d", &day, &month, &year, &hh, &mm, &ss);

  00c49	8d 45 e8	 lea	 eax, DWORD PTR _ss$[ebp]
  00c4c	50		 push	 eax
  00c4d	8d 4d ec	 lea	 ecx, DWORD PTR _mm$[ebp]
  00c50	51		 push	 ecx
  00c51	8d 55 f0	 lea	 edx, DWORD PTR _hh$[ebp]
  00c54	52		 push	 edx
  00c55	8d 45 fc	 lea	 eax, DWORD PTR _year$[ebp]
  00c58	50		 push	 eax
  00c59	8d 4d f8	 lea	 ecx, DWORD PTR _month$[ebp]
  00c5c	51		 push	 ecx
  00c5d	8d 55 f4	 lea	 edx, DWORD PTR _day$[ebp]
  00c60	52		 push	 edx
  00c61	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FFOHHNEG@?$CFd?4?$CFd?4?$CFd?5?$CFd?3?$CFd?3?$CFd?$AA@
  00c66	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  00c69	50		 push	 eax
  00c6a	e8 00 00 00 00	 call	 _sscanf
  00c6f	83 c4 20	 add	 esp, 32			; 00000020H

; 224  : 	return CTime(year, month, day, hh, mm, ss);

  00c72	6a ff		 push	 -1
  00c74	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00c77	50		 push	 eax
  00c78	8b 4d ec	 mov	 ecx, DWORD PTR _mm$[ebp]
  00c7b	51		 push	 ecx
  00c7c	8b 55 f0	 mov	 edx, DWORD PTR _hh$[ebp]
  00c7f	52		 push	 edx
  00c80	8b 45 f4	 mov	 eax, DWORD PTR _day$[ebp]
  00c83	50		 push	 eax
  00c84	8b 4d f8	 mov	 ecx, DWORD PTR _month$[ebp]
  00c87	51		 push	 ecx
  00c88	8b 55 fc	 mov	 edx, DWORD PTR _year$[ebp]
  00c8b	52		 push	 edx
  00c8c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00c8f	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime
  00c94	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 225  : }

  00c97	5f		 pop	 edi
  00c98	5e		 pop	 esi
  00c99	5b		 pop	 ebx
  00c9a	8b e5		 mov	 esp, ebp
  00c9c	5d		 pop	 ebp
  00c9d	c3		 ret	 0
?StrToCTime@@YA?AVCTime@ATL@@PBD@Z ENDP			; StrToCTime
_TEXT	ENDS
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?CheckFile@@YA_NPAD@Z				; CheckFile
EXTRN	_fclose:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_file$ = -8						; size = 4
_Result$ = -1						; size = 1
_File$ = 8						; size = 4
?CheckFile@@YA_NPAD@Z PROC				; CheckFile

; 228  : {

  00ca0	55		 push	 ebp
  00ca1	8b ec		 mov	 ebp, esp
  00ca3	83 ec 48	 sub	 esp, 72			; 00000048H
  00ca6	53		 push	 ebx
  00ca7	56		 push	 esi
  00ca8	57		 push	 edi

; 229  : 	bool Result = true;

  00ca9	c6 45 ff 01	 mov	 BYTE PTR _Result$[ebp], 1

; 230  : 	FILE *file = fopen(File,"r");

  00cad	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00cb2	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00cb5	50		 push	 eax
  00cb6	e8 00 00 00 00	 call	 _fopen
  00cbb	83 c4 08	 add	 esp, 8
  00cbe	89 45 f8	 mov	 DWORD PTR _file$[ebp], eax

; 231  : 	if (file == NULL)

  00cc1	83 7d f8 00	 cmp	 DWORD PTR _file$[ebp], 0
  00cc5	75 19		 jne	 SHORT $LN2@CheckFile

; 232  : 	{
; 233  : 		Result = false;

  00cc7	c6 45 ff 00	 mov	 BYTE PTR _Result$[ebp], 0

; 234  : 		MessageBoxA(0,File,"LOAD FILE ERROR",0);

  00ccb	6a 00		 push	 0
  00ccd	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  00cd2	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00cd5	50		 push	 eax
  00cd6	6a 00		 push	 0
  00cd8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 235  : 	}
; 236  : 	else

  00cde	eb 0c		 jmp	 SHORT $LN1@CheckFile
$LN2@CheckFile:

; 237  : 	{
; 238  : 		fclose(file);

  00ce0	8b 45 f8	 mov	 eax, DWORD PTR _file$[ebp]
  00ce3	50		 push	 eax
  00ce4	e8 00 00 00 00	 call	 _fclose
  00ce9	83 c4 04	 add	 esp, 4
$LN1@CheckFile:

; 239  : 	}
; 240  : 	
; 241  : 	return Result;

  00cec	8a 45 ff	 mov	 al, BYTE PTR _Result$[ebp]

; 242  : }

  00cef	5f		 pop	 edi
  00cf0	5e		 pop	 esi
  00cf1	5b		 pop	 ebx
  00cf2	8b e5		 mov	 esp, ebp
  00cf4	5d		 pop	 ebp
  00cf5	c3		 ret	 0
?CheckFile@@YA_NPAD@Z ENDP				; CheckFile
_TEXT	ENDS
PUBLIC	?CheckOptionItem@@YA_NHHH@Z			; CheckOptionItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Item1$ = 8						; size = 4
_Item2$ = 12						; size = 4
_iType$ = 16						; size = 4
?CheckOptionItem@@YA_NHHH@Z PROC			; CheckOptionItem

; 315  : {

  00d00	55		 push	 ebp
  00d01	8b ec		 mov	 ebp, esp
  00d03	83 ec 40	 sub	 esp, 64			; 00000040H
  00d06	53		 push	 ebx
  00d07	56		 push	 esi
  00d08	57		 push	 edi

; 316  : 	if(iType)

  00d09	83 7d 10 00	 cmp	 DWORD PTR _iType$[ebp], 0
  00d0d	74 14		 je	 SHORT $LN8@CheckOptio

; 317  : 	{
; 318  : 		if(Item1 == Item2)

  00d0f	8b 45 08	 mov	 eax, DWORD PTR _Item1$[ebp]
  00d12	3b 45 0c	 cmp	 eax, DWORD PTR _Item2$[ebp]
  00d15	75 06		 jne	 SHORT $LN7@CheckOptio

; 319  : 		{
; 320  : 			return true;

  00d17	b0 01		 mov	 al, 1
  00d19	eb 2e		 jmp	 SHORT $LN9@CheckOptio

; 321  : 		}
; 322  : 		else

  00d1b	eb 04		 jmp	 SHORT $LN6@CheckOptio
$LN7@CheckOptio:

; 323  : 		{
; 324  : 			return false;

  00d1d	32 c0		 xor	 al, al
  00d1f	eb 28		 jmp	 SHORT $LN9@CheckOptio
$LN6@CheckOptio:

; 325  : 		}
; 326  : 	}
; 327  : 	else

  00d21	eb 26		 jmp	 SHORT $LN9@CheckOptio
$LN8@CheckOptio:

; 328  : 	{
; 329  : 		if(Item1 && Item2)

  00d23	83 7d 08 00	 cmp	 DWORD PTR _Item1$[ebp], 0
  00d27	74 0c		 je	 SHORT $LN4@CheckOptio
  00d29	83 7d 0c 00	 cmp	 DWORD PTR _Item2$[ebp], 0
  00d2d	74 06		 je	 SHORT $LN4@CheckOptio

; 330  : 		{
; 331  : 			return true;

  00d2f	b0 01		 mov	 al, 1
  00d31	eb 16		 jmp	 SHORT $LN9@CheckOptio
  00d33	eb 14		 jmp	 SHORT $LN9@CheckOptio
$LN4@CheckOptio:

; 332  : 		}
; 333  : 		else if(!Item1 && !Item2)

  00d35	83 7d 08 00	 cmp	 DWORD PTR _Item1$[ebp], 0
  00d39	75 0c		 jne	 SHORT $LN2@CheckOptio
  00d3b	83 7d 0c 00	 cmp	 DWORD PTR _Item2$[ebp], 0
  00d3f	75 06		 jne	 SHORT $LN2@CheckOptio

; 334  : 		{
; 335  : 			return true;

  00d41	b0 01		 mov	 al, 1
  00d43	eb 04		 jmp	 SHORT $LN9@CheckOptio

; 336  : 		}
; 337  : 		else

  00d45	eb 02		 jmp	 SHORT $LN9@CheckOptio
$LN2@CheckOptio:

; 338  : 		{
; 339  : 			return false;

  00d47	32 c0		 xor	 al, al
$LN9@CheckOptio:

; 340  : 		}
; 341  : 	}
; 342  : }

  00d49	5f		 pop	 edi
  00d4a	5e		 pop	 esi
  00d4b	5b		 pop	 ebx
  00d4c	8b e5		 mov	 esp, ebp
  00d4e	5d		 pop	 ebp
  00d4f	c3		 ret	 0
?CheckOptionItem@@YA_NHHH@Z ENDP			; CheckOptionItem
_TEXT	ENDS
PUBLIC	?CheckAndFixMinNumber@@YAXAAHH@Z		; CheckAndFixMinNumber
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Number$ = 8						; size = 4
_MinNumber$ = 12					; size = 4
?CheckAndFixMinNumber@@YAXAAHH@Z PROC			; CheckAndFixMinNumber

; 345  : {

  00d50	55		 push	 ebp
  00d51	8b ec		 mov	 ebp, esp
  00d53	83 ec 40	 sub	 esp, 64			; 00000040H
  00d56	53		 push	 ebx
  00d57	56		 push	 esi
  00d58	57		 push	 edi

; 346  : 	if(Number < MinNumber)

  00d59	8b 45 08	 mov	 eax, DWORD PTR _Number$[ebp]
  00d5c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d5e	3b 4d 0c	 cmp	 ecx, DWORD PTR _MinNumber$[ebp]
  00d61	7d 08		 jge	 SHORT $LN2@CheckAndFi

; 347  : 	{
; 348  : 		Number = MinNumber;

  00d63	8b 45 08	 mov	 eax, DWORD PTR _Number$[ebp]
  00d66	8b 4d 0c	 mov	 ecx, DWORD PTR _MinNumber$[ebp]
  00d69	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@CheckAndFi:

; 349  : 	}
; 350  : }

  00d6b	5f		 pop	 edi
  00d6c	5e		 pop	 esi
  00d6d	5b		 pop	 ebx
  00d6e	8b e5		 mov	 esp, ebp
  00d70	5d		 pop	 ebp
  00d71	c3		 ret	 0
?CheckAndFixMinNumber@@YAXAAHH@Z ENDP			; CheckAndFixMinNumber
_TEXT	ENDS
PUBLIC	?CheckAndFixNumber@@YAXAAHHH@Z			; CheckAndFixNumber
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Number$ = 8						; size = 4
_MinNumber$ = 12					; size = 4
_MaxNumber$ = 16					; size = 4
?CheckAndFixNumber@@YAXAAHHH@Z PROC			; CheckAndFixNumber

; 353  : {

  00d80	55		 push	 ebp
  00d81	8b ec		 mov	 ebp, esp
  00d83	83 ec 40	 sub	 esp, 64			; 00000040H
  00d86	53		 push	 ebx
  00d87	56		 push	 esi
  00d88	57		 push	 edi

; 354  : 	if(Number < MinNumber)

  00d89	8b 45 08	 mov	 eax, DWORD PTR _Number$[ebp]
  00d8c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d8e	3b 4d 0c	 cmp	 ecx, DWORD PTR _MinNumber$[ebp]
  00d91	7d 08		 jge	 SHORT $LN2@CheckAndFi@2

; 355  : 	{
; 356  : 		Number = MinNumber;

  00d93	8b 45 08	 mov	 eax, DWORD PTR _Number$[ebp]
  00d96	8b 4d 0c	 mov	 ecx, DWORD PTR _MinNumber$[ebp]
  00d99	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@CheckAndFi@2:

; 357  : 	}
; 358  : 	if(Number > MaxNumber)

  00d9b	8b 45 08	 mov	 eax, DWORD PTR _Number$[ebp]
  00d9e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00da0	3b 4d 10	 cmp	 ecx, DWORD PTR _MaxNumber$[ebp]
  00da3	7e 08		 jle	 SHORT $LN3@CheckAndFi@2

; 359  : 	{
; 360  : 		Number = MaxNumber;

  00da5	8b 45 08	 mov	 eax, DWORD PTR _Number$[ebp]
  00da8	8b 4d 10	 mov	 ecx, DWORD PTR _MaxNumber$[ebp]
  00dab	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@CheckAndFi@2:

; 361  : 	}
; 362  : }

  00dad	5f		 pop	 edi
  00dae	5e		 pop	 esi
  00daf	5b		 pop	 ebx
  00db0	8b e5		 mov	 esp, ebp
  00db2	5d		 pop	 ebp
  00db3	c3		 ret	 0
?CheckAndFixNumber@@YAXAAHHH@Z ENDP			; CheckAndFixNumber
_TEXT	ENDS
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	__$ArrayPad$
EXTRN	__mktime64:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
tv194 = -136						; size = 4
tv137 = -136						; size = 4
tv129 = -136						; size = 4
tv89 = -136						; size = 4
tv81 = -136						; size = 4
tv73 = -136						; size = 4
_atm$ = -68						; size = 36
___atl_condVal$86718 = -32				; size = 4
___atl_condVal$86705 = -28				; size = 4
___atl_condVal$86692 = -24				; size = 4
___atl_condVal$86679 = -20				; size = 4
___atl_condVal$86666 = -16				; size = 4
___atl_condVal$86653 = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN67@CTime:

; 183  : #pragma warning (push)
; 184  : #pragma warning (disable: 4127)  // conditional expression constant
; 185  : 
; 186  : 	ATLENSURE( nYear >= 1900 );

  00019	33 c0		 xor	 eax, eax
  0001b	81 7d 08 6c 07
	00 00		 cmp	 DWORD PTR _nYear$[ebp], 1900 ; 0000076cH
  00022	0f 9d c0	 setge	 al
  00025	89 45 f4	 mov	 DWORD PTR ___atl_condVal$86653[ebp], eax
$LN60@CTime:
  00028	33 c0		 xor	 eax, eax
  0002a	75 fc		 jne	 SHORT $LN60@CTime
  0002c	33 c0		 xor	 eax, eax
  0002e	75 f8		 jne	 SHORT $LN60@CTime
  00030	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$86653[ebp], 0
  00034	75 0a		 jne	 SHORT $LN66@CTime
  00036	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0003b	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN66@CTime:
  00040	33 c0		 xor	 eax, eax
  00042	75 d5		 jne	 SHORT $LN67@CTime
$LN57@CTime:

; 187  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00044	83 7d 0c 01	 cmp	 DWORD PTR _nMonth$[ebp], 1
  00048	7c 12		 jl	 SHORT $LN70@CTime
  0004a	83 7d 0c 0c	 cmp	 DWORD PTR _nMonth$[ebp], 12 ; 0000000cH
  0004e	7f 0c		 jg	 SHORT $LN70@CTime
  00050	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv73[ebp], 1
  0005a	eb 0a		 jmp	 SHORT $LN71@CTime
$LN70@CTime:
  0005c	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv73[ebp], 0
$LN71@CTime:
  00066	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv73[ebp]
  0006c	89 45 f0	 mov	 DWORD PTR ___atl_condVal$86666[ebp], eax
$LN50@CTime:
  0006f	33 c0		 xor	 eax, eax
  00071	75 fc		 jne	 SHORT $LN50@CTime
  00073	33 c0		 xor	 eax, eax
  00075	75 f8		 jne	 SHORT $LN50@CTime
  00077	83 7d f0 00	 cmp	 DWORD PTR ___atl_condVal$86666[ebp], 0
  0007b	75 0a		 jne	 SHORT $LN56@CTime
  0007d	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00082	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN56@CTime:
  00087	33 c0		 xor	 eax, eax
  00089	75 b9		 jne	 SHORT $LN57@CTime
$LN47@CTime:

; 188  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0008b	83 7d 10 01	 cmp	 DWORD PTR _nDay$[ebp], 1
  0008f	7c 12		 jl	 SHORT $LN72@CTime
  00091	83 7d 10 1f	 cmp	 DWORD PTR _nDay$[ebp], 31 ; 0000001fH
  00095	7f 0c		 jg	 SHORT $LN72@CTime
  00097	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv81[ebp], 1
  000a1	eb 0a		 jmp	 SHORT $LN73@CTime
$LN72@CTime:
  000a3	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN73@CTime:
  000ad	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  000b3	89 45 ec	 mov	 DWORD PTR ___atl_condVal$86679[ebp], eax
$LN40@CTime:
  000b6	33 c0		 xor	 eax, eax
  000b8	75 fc		 jne	 SHORT $LN40@CTime
  000ba	33 c0		 xor	 eax, eax
  000bc	75 f8		 jne	 SHORT $LN40@CTime
  000be	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$86679[ebp], 0
  000c2	75 0a		 jne	 SHORT $LN46@CTime
  000c4	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000c9	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN46@CTime:
  000ce	33 c0		 xor	 eax, eax
  000d0	75 b9		 jne	 SHORT $LN47@CTime
$LN37@CTime:

; 189  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  000d2	83 7d 14 00	 cmp	 DWORD PTR _nHour$[ebp], 0
  000d6	7c 12		 jl	 SHORT $LN74@CTime
  000d8	83 7d 14 17	 cmp	 DWORD PTR _nHour$[ebp], 23 ; 00000017H
  000dc	7f 0c		 jg	 SHORT $LN74@CTime
  000de	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv89[ebp], 1
  000e8	eb 0a		 jmp	 SHORT $LN75@CTime
$LN74@CTime:
  000ea	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN75@CTime:
  000f4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  000fa	89 45 e8	 mov	 DWORD PTR ___atl_condVal$86692[ebp], eax
$LN30@CTime:
  000fd	33 c0		 xor	 eax, eax
  000ff	75 fc		 jne	 SHORT $LN30@CTime
  00101	33 c0		 xor	 eax, eax
  00103	75 f8		 jne	 SHORT $LN30@CTime
  00105	83 7d e8 00	 cmp	 DWORD PTR ___atl_condVal$86692[ebp], 0
  00109	75 0a		 jne	 SHORT $LN36@CTime
  0010b	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00110	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN36@CTime:
  00115	33 c0		 xor	 eax, eax
  00117	75 b9		 jne	 SHORT $LN37@CTime
$LN27@CTime:

; 190  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  00119	83 7d 18 00	 cmp	 DWORD PTR _nMin$[ebp], 0
  0011d	7c 12		 jl	 SHORT $LN76@CTime
  0011f	83 7d 18 3b	 cmp	 DWORD PTR _nMin$[ebp], 59 ; 0000003bH
  00123	7f 0c		 jg	 SHORT $LN76@CTime
  00125	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv129[ebp], 1
  0012f	eb 0a		 jmp	 SHORT $LN77@CTime
$LN76@CTime:
  00131	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN77@CTime:
  0013b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv129[ebp]
  00141	89 45 e4	 mov	 DWORD PTR ___atl_condVal$86705[ebp], eax
$LN20@CTime:
  00144	33 c0		 xor	 eax, eax
  00146	75 fc		 jne	 SHORT $LN20@CTime
  00148	33 c0		 xor	 eax, eax
  0014a	75 f8		 jne	 SHORT $LN20@CTime
  0014c	83 7d e4 00	 cmp	 DWORD PTR ___atl_condVal$86705[ebp], 0
  00150	75 0a		 jne	 SHORT $LN26@CTime
  00152	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00157	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN26@CTime:
  0015c	33 c0		 xor	 eax, eax
  0015e	75 b9		 jne	 SHORT $LN27@CTime
$LN17@CTime:

; 191  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00160	83 7d 1c 00	 cmp	 DWORD PTR _nSec$[ebp], 0
  00164	7c 12		 jl	 SHORT $LN78@CTime
  00166	83 7d 1c 3b	 cmp	 DWORD PTR _nSec$[ebp], 59 ; 0000003bH
  0016a	7f 0c		 jg	 SHORT $LN78@CTime
  0016c	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv137[ebp], 1
  00176	eb 0a		 jmp	 SHORT $LN79@CTime
$LN78@CTime:
  00178	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN79@CTime:
  00182	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00188	89 45 e0	 mov	 DWORD PTR ___atl_condVal$86718[ebp], eax
$LN10@CTime:
  0018b	33 c0		 xor	 eax, eax
  0018d	75 fc		 jne	 SHORT $LN10@CTime
  0018f	33 c0		 xor	 eax, eax
  00191	75 f8		 jne	 SHORT $LN10@CTime
  00193	83 7d e0 00	 cmp	 DWORD PTR ___atl_condVal$86718[ebp], 0
  00197	75 0a		 jne	 SHORT $LN16@CTime
  00199	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0019e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN16@CTime:
  001a3	33 c0		 xor	 eax, eax
  001a5	75 b9		 jne	 SHORT $LN17@CTime

; 192  : 
; 193  : #pragma warning (pop)
; 194  : 
; 195  : 	struct tm atm;
; 196  : 
; 197  : 	atm.tm_sec = nSec;

  001a7	8b 45 1c	 mov	 eax, DWORD PTR _nSec$[ebp]
  001aa	89 45 bc	 mov	 DWORD PTR _atm$[ebp], eax

; 198  : 	atm.tm_min = nMin;

  001ad	8b 45 18	 mov	 eax, DWORD PTR _nMin$[ebp]
  001b0	89 45 c0	 mov	 DWORD PTR _atm$[ebp+4], eax

; 199  : 	atm.tm_hour = nHour;

  001b3	8b 45 14	 mov	 eax, DWORD PTR _nHour$[ebp]
  001b6	89 45 c4	 mov	 DWORD PTR _atm$[ebp+8], eax

; 200  : 	atm.tm_mday = nDay;

  001b9	8b 45 10	 mov	 eax, DWORD PTR _nDay$[ebp]
  001bc	89 45 c8	 mov	 DWORD PTR _atm$[ebp+12], eax

; 201  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based

  001bf	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  001c2	83 e8 01	 sub	 eax, 1
  001c5	89 45 cc	 mov	 DWORD PTR _atm$[ebp+16], eax

; 202  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  001c8	8b 45 08	 mov	 eax, DWORD PTR _nYear$[ebp]
  001cb	2d 6c 07 00 00	 sub	 eax, 1900		; 0000076cH
  001d0	89 45 d0	 mov	 DWORD PTR _atm$[ebp+20], eax

; 203  : 	atm.tm_isdst = nDST;

  001d3	8b 45 20	 mov	 eax, DWORD PTR _nDST$[ebp]
  001d6	89 45 dc	 mov	 DWORD PTR _atm$[ebp+32], eax

; 204  : 
; 205  : 	m_time = _mktime64(&atm);

  001d9	8d 45 bc	 lea	 eax, DWORD PTR _atm$[ebp]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 __mktime64
  001e2	83 c4 04	 add	 esp, 4
  001e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	89 01		 mov	 DWORD PTR [ecx], eax
  001ea	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN3@CTime:

; 206  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time

  001ed	33 c0		 xor	 eax, eax
  001ef	75 fc		 jne	 SHORT $LN3@CTime
  001f1	33 c0		 xor	 eax, eax
  001f3	75 f8		 jne	 SHORT $LN3@CTime

; 207  : 	if(m_time == -1)

  001f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f8	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
  001fe	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  00204	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv194[ebp]
  0020a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0020c	23 42 04	 and	 eax, DWORD PTR [edx+4]
  0020f	83 f8 ff	 cmp	 eax, -1
  00212	75 0a		 jne	 SHORT $LN68@CTime

; 208  : 	{
; 209  : 		AtlThrow(E_INVALIDARG);

  00214	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00219	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN68@CTime:

; 210  : 	}
; 211  : }

  0021e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN69@CTime:
  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	5b		 pop	 ebx
  00224	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00227	33 cd		 xor	 ecx, ebp
  00229	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c2 1c 00	 ret	 28			; 0000001cH
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00009	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00010	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00012	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}
; 72   : 	else

  00017	eb 09		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00019	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
END
