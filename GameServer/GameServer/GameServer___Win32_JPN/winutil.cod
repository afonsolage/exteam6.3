; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\common\winutil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_bBuxCode DB	0fcH
	DB	0cfH
	DB	0abH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?BuxConvert@@YAXPADH@Z				; BuxConvert
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\winutil.cpp
_TEXT	SEGMENT
_n$ = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
?BuxConvert@@YAXPADH@Z PROC				; BuxConvert

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9    : 	int n;
; 10   : 
; 11   : 	for (n=0;n<size;n++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN3@BuxConvert
$LN2@BuxConvert:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN3@BuxConvert:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR _size$[ebp]
  00021	7d 27		 jge	 SHORT $LN4@BuxConvert

; 12   : 	{
; 13   : 		buf[n]^=bBuxCode[n%3] ;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00026	99		 cdq
  00027	b9 03 00 00 00	 mov	 ecx, 3
  0002c	f7 f9		 idiv	 ecx
  0002e	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _bBuxCode[edx]
  00035	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00038	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  0003b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0003e	33 ca		 xor	 ecx, edx
  00040	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00043	03 55 fc	 add	 edx, DWORD PTR _n$[ebp]
  00046	88 0a		 mov	 BYTE PTR [edx], cl

; 14   : 	}

  00048	eb c8		 jmp	 SHORT $LN2@BuxConvert
$LN4@BuxConvert:

; 15   : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?BuxConvert@@YAXPADH@Z ENDP				; BuxConvert
_TEXT	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
PUBLIC	?SQLSyntexCheck@@YAHPAD@Z			; SQLSyntexCheck
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_temp$ = -4						; size = 4
_SQLString$ = 8						; size = 4
?SQLSyntexCheck@@YAHPAD@Z PROC				; SQLSyntexCheck

; 19   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	83 ec 44	 sub	 esp, 68			; 00000044H
  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	57		 push	 edi

; 20   : 	char* temp;
; 21   : 
; 22   : 	temp=strchr(SQLString, 39);

  00069	6a 27		 push	 39			; 00000027H
  0006b	8b 45 08	 mov	 eax, DWORD PTR _SQLString$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?strchr@@YAPADPADH@Z	; strchr
  00074	83 c4 08	 add	 esp, 8
  00077	89 45 fc	 mov	 DWORD PTR _temp$[ebp], eax

; 23   : 	if (temp==0)

  0007a	83 7d fc 00	 cmp	 DWORD PTR _temp$[ebp], 0
  0007e	75 26		 jne	 SHORT $LN4@SQLSyntexC

; 24   : 	{
; 25   : 		temp=strchr(SQLString, 32);

  00080	6a 20		 push	 32			; 00000020H
  00082	8b 45 08	 mov	 eax, DWORD PTR _SQLString$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?strchr@@YAPADPADH@Z	; strchr
  0008b	83 c4 08	 add	 esp, 8
  0008e	89 45 fc	 mov	 DWORD PTR _temp$[ebp], eax

; 26   : 		if (temp==0)

  00091	83 7d fc 00	 cmp	 DWORD PTR _temp$[ebp], 0
  00095	75 09		 jne	 SHORT $LN3@SQLSyntexC

; 27   : 		{
; 28   : 			return TRUE;

  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	eb 0a		 jmp	 SHORT $LN5@SQLSyntexC

; 29   : 		}
; 30   : 		else

  0009e	eb 04		 jmp	 SHORT $LN2@SQLSyntexC
$LN3@SQLSyntexC:

; 31   : 		{
; 32   : 			return FALSE;

  000a0	33 c0		 xor	 eax, eax
  000a2	eb 04		 jmp	 SHORT $LN5@SQLSyntexC
$LN2@SQLSyntexC:

; 33   : 		}
; 34   : 	}
; 35   : 	else

  000a4	eb 02		 jmp	 SHORT $LN5@SQLSyntexC
$LN4@SQLSyntexC:

; 36   : 	{
; 37   : 		return FALSE;

  000a6	33 c0		 xor	 eax, eax
$LN5@SQLSyntexC:

; 38   : 	}
; 39   : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?SQLSyntexCheck@@YAHPAD@Z ENDP				; SQLSyntexCheck
_TEXT	ENDS
EXTRN	_strchr:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 215  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Str$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _strchr
  00016	83 c4 08	 add	 esp, 8
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
PUBLIC	??_C@_02OHHJMEON@?8?8?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SQLSyntexCheckConvert@@YAHPAD@Z		; SQLSyntexCheckConvert
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_02OHHJMEON@?8?8?$AA@
; File d:\projects\exteam6.3\source\gameserver\common\winutil.cpp
CONST	SEGMENT
??_C@_02OHHJMEON@?8?8?$AA@ DB '''''', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_sOfs$ = -280						; size = 4
_tOfs$ = -276						; size = 4
_lOfs$ = -272						; size = 4
_temp2$ = -268						; size = 4
_temp$ = -264						; size = 4
_tempSQL$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_SQLString$ = 8						; size = 4
?SQLSyntexCheckConvert@@YAHPAD@Z PROC			; SQLSyntexCheckConvert

; 42   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000be	33 c5		 xor	 eax, ebp
  000c0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000c3	53		 push	 ebx
  000c4	56		 push	 esi
  000c5	57		 push	 edi

; 43   : 	char tempSQL[256];
; 44   : 	char* temp;
; 45   : 	char* temp2;
; 46   : 
; 47   : 	temp2 = SQLString;

  000c6	8b 45 08	 mov	 eax, DWORD PTR _SQLString$[ebp]
  000c9	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _temp2$[ebp], eax

; 48   : 	int lOfs=0;

  000cf	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _lOfs$[ebp], 0

; 49   : 	int tOfs=0;

  000d9	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _tOfs$[ebp], 0

; 50   : 	int sOfs=0;

  000e3	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _sOfs$[ebp], 0

; 51   : 
; 52   : 	
; 53   : 
; 54   : 	if (SQLString==0)

  000ed	83 7d 08 00	 cmp	 DWORD PTR _SQLString$[ebp], 0
  000f1	75 07		 jne	 SHORT $LN5@SQLSyntexC@2

; 55   : 	{
; 56   : 		return FALSE;

  000f3	33 c0		 xor	 eax, eax
  000f5	e9 25 01 00 00	 jmp	 $LN7@SQLSyntexC@2
$LN5@SQLSyntexC@2:

; 57   : 	}
; 58   : 	while (true)

  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	85 c0		 test	 eax, eax
  00101	0f 84 00 01 00
	00		 je	 $LN4@SQLSyntexC@2

; 59   : 	{
; 60   : 		temp = strchr(temp2, 39);

  00107	6a 27		 push	 39			; 00000027H
  00109	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?strchr@@YAPADPADH@Z	; strchr
  00115	83 c4 08	 add	 esp, 8
  00118	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _temp$[ebp], eax

; 61   : 		if (temp != 0 )

  0011e	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _temp$[ebp], 0
  00125	0f 84 b8 00 00
	00		 je	 $LN3@SQLSyntexC@2

; 62   : 		{
; 63   : 			if (temp - temp2 != 0)

  0012b	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _temp$[ebp]
  00131	2b 85 f4 fe ff
	ff		 sub	 eax, DWORD PTR _temp2$[ebp]
  00137	74 2a		 je	 SHORT $LN2@SQLSyntexC@2

; 64   : 			{
; 65   : 				memcpy(&tempSQL[tOfs], temp2, temp-temp2);

  00139	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _temp$[ebp]
  0013f	2b 85 f4 fe ff
	ff		 sub	 eax, DWORD PTR _temp2$[ebp]
  00145	50		 push	 eax
  00146	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _temp2$[ebp]
  0014c	51		 push	 ecx
  0014d	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _tOfs$[ebp]
  00153	8d 84 15 fc fe
	ff ff		 lea	 eax, DWORD PTR _tempSQL$[ebp+edx]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 _memcpy
  00160	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SQLSyntexC@2:

; 66   : 			}
; 67   : 			lOfs = temp - (temp2 + sOfs);

  00163	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  00169	03 85 e8 fe ff
	ff		 add	 eax, DWORD PTR _sOfs$[ebp]
  0016f	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _temp$[ebp]
  00175	2b c8		 sub	 ecx, eax
  00177	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _lOfs$[ebp], ecx

; 68   : 			tOfs += lOfs;

  0017d	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _tOfs$[ebp]
  00183	03 85 f0 fe ff
	ff		 add	 eax, DWORD PTR _lOfs$[ebp]
  00189	89 85 ec fe ff
	ff		 mov	 DWORD PTR _tOfs$[ebp], eax

; 69   : 			temp2 += lOfs;

  0018f	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  00195	03 85 f0 fe ff
	ff		 add	 eax, DWORD PTR _lOfs$[ebp]
  0019b	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _temp2$[ebp], eax

; 70   : 
; 71   : 			tempSQL[tOfs]=0;

  001a1	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _tOfs$[ebp]
  001a7	c6 84 05 fc fe
	ff ff 00	 mov	 BYTE PTR _tempSQL$[ebp+eax], 0

; 72   : 
; 73   : 			tOfs += 2;

  001af	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _tOfs$[ebp]
  001b5	83 c0 02	 add	 eax, 2
  001b8	89 85 ec fe ff
	ff		 mov	 DWORD PTR _tOfs$[ebp], eax

; 74   : 			temp2++;

  001be	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  001c4	83 c0 01	 add	 eax, 1
  001c7	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _temp2$[ebp], eax

; 75   : 
; 76   : 			strcat(tempSQL, "''");

  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_02OHHJMEON@?8?8?$AA@
  001d2	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _tempSQL$[ebp]
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 _strcat
  001de	83 c4 08	 add	 esp, 8

; 77   : 			
; 78   : 		}
; 79   : 		else

  001e1	eb 1f		 jmp	 SHORT $LN1@SQLSyntexC@2
$LN3@SQLSyntexC@2:

; 80   : 		{
; 81   : 			strcpy(&tempSQL[tOfs], temp2);

  001e3	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  001e9	50		 push	 eax
  001ea	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _tOfs$[ebp]
  001f0	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _tempSQL$[ebp+ecx]
  001f7	52		 push	 edx
  001f8	e8 00 00 00 00	 call	 _strcpy
  001fd	83 c4 08	 add	 esp, 8

; 82   : 			break;

  00200	eb 05		 jmp	 SHORT $LN4@SQLSyntexC@2
$LN1@SQLSyntexC@2:

; 83   : 		}
; 84   : 	}

  00202	e9 f3 fe ff ff	 jmp	 $LN5@SQLSyntexC@2
$LN4@SQLSyntexC@2:

; 85   : 
; 86   : 	
; 87   : 	strcpy(SQLString, tempSQL);

  00207	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _tempSQL$[ebp]
  0020d	50		 push	 eax
  0020e	8b 4d 08	 mov	 ecx, DWORD PTR _SQLString$[ebp]
  00211	51		 push	 ecx
  00212	e8 00 00 00 00	 call	 _strcpy
  00217	83 c4 08	 add	 esp, 8

; 88   : 	return TRUE;

  0021a	b8 01 00 00 00	 mov	 eax, 1
$LN7@SQLSyntexC@2:

; 89   : }

  0021f	5f		 pop	 edi
  00220	5e		 pop	 esi
  00221	5b		 pop	 ebx
  00222	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00225	33 cd		 xor	 ecx, ebp
  00227	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022c	8b e5		 mov	 esp, ebp
  0022e	5d		 pop	 ebp
  0022f	c3		 ret	 0
?SQLSyntexCheckConvert@@YAHPAD@Z ENDP			; SQLSyntexCheckConvert
_TEXT	ENDS
PUBLIC	?SpaceSyntexCheck@@YAHPAD@Z			; SpaceSyntexCheck
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_temp$ = -4						; size = 4
_string$ = 8						; size = 4
?SpaceSyntexCheck@@YAHPAD@Z PROC			; SpaceSyntexCheck

; 93   : {

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	83 ec 44	 sub	 esp, 68			; 00000044H
  00236	53		 push	 ebx
  00237	56		 push	 esi
  00238	57		 push	 edi

; 94   : 	char* temp;
; 95   : 	
; 96   : 	temp = strchr(string, 32);

  00239	6a 20		 push	 32			; 00000020H
  0023b	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  0023e	50		 push	 eax
  0023f	e8 00 00 00 00	 call	 ?strchr@@YAPADPADH@Z	; strchr
  00244	83 c4 08	 add	 esp, 8
  00247	89 45 fc	 mov	 DWORD PTR _temp$[ebp], eax

; 97   : 	if (temp ==0 )

  0024a	83 7d fc 00	 cmp	 DWORD PTR _temp$[ebp], 0
  0024e	75 09		 jne	 SHORT $LN2@SpaceSynte

; 98   : 	{
; 99   : 		return TRUE;

  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	eb 04		 jmp	 SHORT $LN3@SpaceSynte

; 100  : 	}
; 101  : 	else

  00257	eb 02		 jmp	 SHORT $LN3@SpaceSynte
$LN2@SpaceSynte:

; 102  : 	{
; 103  : 		return FALSE;

  00259	33 c0		 xor	 eax, eax
$LN3@SpaceSynte:

; 104  : 	}
; 105  : }

  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	8b e5		 mov	 esp, ebp
  00260	5d		 pop	 ebp
  00261	c3		 ret	 0
?SpaceSyntexCheck@@YAHPAD@Z ENDP			; SpaceSyntexCheck
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?StrHangulCheck@@YAHPAD@Z			; StrHangulCheck
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_count$ = -280						; size = 4
_result$ = -276						; size = 4
_szTemp$ = -272						; size = 256
_n$ = -16						; size = 4
_i$ = -12						; size = 4
_code$ = -7						; size = 1
_code2$ = -6						; size = 1
_code1$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 4
?StrHangulCheck@@YAHPAD@Z PROC				; StrHangulCheck

; 109  : {

  00270	55		 push	 ebp
  00271	8b ec		 mov	 ebp, esp
  00273	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0027e	33 c5		 xor	 eax, ebp
  00280	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00283	53		 push	 ebx
  00284	56		 push	 esi
  00285	57		 push	 edi

; 110  : 	BYTE code1;
; 111  : 	BYTE code2;
; 112  : 	BYTE code;
; 113  : 	int i = 0;

  00286	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 114  : 	int n = 0;

  0028d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 115  : 	char	szTemp[256] = "";

  00294	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00299	88 85 f0 fe ff
	ff		 mov	 BYTE PTR _szTemp$[ebp], al
  0029f	68 ff 00 00 00	 push	 255			; 000000ffH
  002a4	6a 00		 push	 0
  002a6	8d 85 f1 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp+1]
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 _memset
  002b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 116  : 	int result = 1;

  002b5	c7 85 ec fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _result$[ebp], 1

; 117  : 	int count = 0xFF;

  002bf	c7 85 e8 fe ff
	ff ff 00 00 00	 mov	 DWORD PTR _count$[ebp], 255 ; 000000ffH
$LN9@StrHangulC:

; 118  : 
; 119  : 
; 120  : 	while ((count--) != 0)

  002c9	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  002cf	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _count$[ebp]
  002d5	83 e9 01	 sub	 ecx, 1
  002d8	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _count$[ebp], ecx
  002de	85 c0		 test	 eax, eax
  002e0	0f 84 be 00 00
	00		 je	 $LN8@StrHangulC

; 121  : 	{
; 122  : 	
; 123  : 		code1=str[i];

  002e6	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  002e9	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  002ec	8a 08		 mov	 cl, BYTE PTR [eax]
  002ee	88 4d fb	 mov	 BYTE PTR _code1$[ebp], cl

; 124  : 		i++;

  002f1	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  002f4	83 c0 01	 add	 eax, 1
  002f7	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax

; 125  : 
; 126  : 		if (code1==0)

  002fa	0f b6 45 fb	 movzx	 eax, BYTE PTR _code1$[ebp]
  002fe	85 c0		 test	 eax, eax
  00300	75 0a		 jne	 SHORT $LN7@StrHangulC

; 127  : 		{
; 128  : 			break;

  00302	e9 9d 00 00 00	 jmp	 $LN8@StrHangulC

; 129  : 		}
; 130  : 		else

  00307	e9 93 00 00 00	 jmp	 $LN6@StrHangulC
$LN7@StrHangulC:

; 131  : 		{
; 132  : 			if (code1<128)

  0030c	0f b6 45 fb	 movzx	 eax, BYTE PTR _code1$[ebp]
  00310	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00315	7d 1a		 jge	 SHORT $LN5@StrHangulC

; 133  : 			{
; 134  : 				szTemp[n]=code1;

  00317	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  0031a	8a 4d fb	 mov	 cl, BYTE PTR _code1$[ebp]
  0031d	88 8c 05 f0 fe
	ff ff		 mov	 BYTE PTR _szTemp$[ebp+eax], cl

; 135  : 				n++;

  00324	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00327	83 c0 01	 add	 eax, 1
  0032a	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 136  : 				continue;

  0032d	eb 9a		 jmp	 SHORT $LN9@StrHangulC

; 137  : 			}
; 138  : 			else

  0032f	eb 6e		 jmp	 SHORT $LN6@StrHangulC
$LN5@StrHangulC:

; 139  : 			{
; 140  : 				code2=str[i];

  00331	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00334	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  00337	8a 08		 mov	 cl, BYTE PTR [eax]
  00339	88 4d fa	 mov	 BYTE PTR _code2$[ebp], cl

; 141  : 				i++;

  0033c	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0033f	83 c0 01	 add	 eax, 1
  00342	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax

; 142  : 				code=code2 | (code1<<8);

  00345	0f b6 45 fa	 movzx	 eax, BYTE PTR _code2$[ebp]
  00349	0f b6 4d fb	 movzx	 ecx, BYTE PTR _code1$[ebp]
  0034d	c1 e1 08	 shl	 ecx, 8
  00350	0b c1		 or	 eax, ecx
  00352	88 45 f9	 mov	 BYTE PTR _code$[ebp], al

; 143  : 
; 144  : 				if ((code)>0)

  00355	0f b6 45 f9	 movzx	 eax, BYTE PTR _code$[ebp]
  00359	85 c0		 test	 eax, eax
  0035b	7e 2e		 jle	 SHORT $LN3@StrHangulC

; 145  : 				{
; 146  : 					szTemp[n]=code1;

  0035d	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00360	8a 4d fb	 mov	 cl, BYTE PTR _code1$[ebp]
  00363	88 8c 05 f0 fe
	ff ff		 mov	 BYTE PTR _szTemp$[ebp+eax], cl

; 147  : 					n++;

  0036a	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  0036d	83 c0 01	 add	 eax, 1
  00370	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 148  : 					szTemp[n]=code2;

  00373	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00376	8a 4d fa	 mov	 cl, BYTE PTR _code2$[ebp]
  00379	88 8c 05 f0 fe
	ff ff		 mov	 BYTE PTR _szTemp$[ebp+eax], cl

; 149  : 					n++;

  00380	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00383	83 c0 01	 add	 eax, 1
  00386	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 150  : 				}
; 151  : 				else

  00389	eb 0a		 jmp	 SHORT $LN2@StrHangulC
$LN3@StrHangulC:

; 152  : 				{
; 153  : 					result =0;

  0038b	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _result$[ebp], 0
$LN2@StrHangulC:

; 154  : 				}
; 155  : 				if(code2==0)

  00395	0f b6 45 fa	 movzx	 eax, BYTE PTR _code2$[ebp]
  00399	85 c0		 test	 eax, eax
  0039b	75 02		 jne	 SHORT $LN6@StrHangulC

; 156  : 				{
; 157  : 					break;

  0039d	eb 05		 jmp	 SHORT $LN8@StrHangulC
$LN6@StrHangulC:

; 158  : 				}
; 159  : 			}
; 160  : 		}
; 161  : 	}

  0039f	e9 25 ff ff ff	 jmp	 $LN9@StrHangulC
$LN8@StrHangulC:

; 162  : 	
; 163  : 	
; 164  : 	strcpy(str, szTemp);

  003a4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  003aa	50		 push	 eax
  003ab	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  003ae	51		 push	 ecx
  003af	e8 00 00 00 00	 call	 _strcpy
  003b4	83 c4 08	 add	 esp, 8

; 165  : 	return TRUE;

  003b7	b8 01 00 00 00	 mov	 eax, 1

; 166  : }

  003bc	5f		 pop	 edi
  003bd	5e		 pop	 esi
  003be	5b		 pop	 ebx
  003bf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c2	33 cd		 xor	 ecx, ebp
  003c4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c9	8b e5		 mov	 esp, ebp
  003cb	5d		 pop	 ebp
  003cc	c3		 ret	 0
?StrHangulCheck@@YAHPAD@Z ENDP				; StrHangulCheck
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_02CPIDLAI@at?$AA@				; `string'
PUBLIC	?FileSaveString@@YAXPAD0@Z			; FileSaveString
EXTRN	_fclose:PROC
EXTRN	_fprintf:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CPIDLAI@at?$AA@
CONST	SEGMENT
??_C@_02CPIDLAI@at?$AA@ DB 'at', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
_string$ = 12						; size = 4
?FileSaveString@@YAXPAD0@Z PROC				; FileSaveString

; 170  : {

  003d0	55		 push	 ebp
  003d1	8b ec		 mov	 ebp, esp
  003d3	83 ec 44	 sub	 esp, 68			; 00000044H
  003d6	53		 push	 ebx
  003d7	56		 push	 esi
  003d8	57		 push	 edi

; 171  : 	FILE* fp;
; 172  : 	
; 173  : 	fp=fopen(filename, "at");

  003d9	68 00 00 00 00	 push	 OFFSET ??_C@_02CPIDLAI@at?$AA@
  003de	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _fopen
  003e7	83 c4 08	 add	 esp, 8
  003ea	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 174  : 
; 175  : 	if (fp==0)

  003ed	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  003f1	75 04		 jne	 SHORT $LN2@FileSaveSt

; 176  : 	{
; 177  : 		return;

  003f3	eb 2f		 jmp	 SHORT $LN3@FileSaveSt

; 178  : 	}
; 179  : 	else

  003f5	eb 2d		 jmp	 SHORT $LN3@FileSaveSt
$LN2@FileSaveSt:

; 180  : 	{
; 181  : 		fprintf(fp, string);

  003f7	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  003fa	50		 push	 eax
  003fb	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  003fe	51		 push	 ecx
  003ff	e8 00 00 00 00	 call	 _fprintf
  00404	83 c4 08	 add	 esp, 8

; 182  : 		fprintf(fp, "\n");

  00407	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  0040c	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 _fprintf
  00415	83 c4 08	 add	 esp, 8

; 183  : 		fclose(fp);

  00418	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0041b	50		 push	 eax
  0041c	e8 00 00 00 00	 call	 _fclose
  00421	83 c4 04	 add	 esp, 4
$LN3@FileSaveSt:

; 184  : 	}
; 185  : }

  00424	5f		 pop	 edi
  00425	5e		 pop	 esi
  00426	5b		 pop	 ebx
  00427	8b e5		 mov	 esp, ebp
  00429	5d		 pop	 ebp
  0042a	c3		 ret	 0
?FileSaveString@@YAXPAD0@Z ENDP				; FileSaveString
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	?IsFile@@YAHPAD@Z				; IsFile
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
?IsFile@@YAHPAD@Z PROC					; IsFile

; 193  : {

  00430	55		 push	 ebp
  00431	8b ec		 mov	 ebp, esp
  00433	83 ec 44	 sub	 esp, 68			; 00000044H
  00436	53		 push	 ebx
  00437	56		 push	 esi
  00438	57		 push	 edi

; 194  : FILE *fp;
; 195  : 	
; 196  : 	fp=fopen(filename,"rb");

  00439	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  0043e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00441	50		 push	 eax
  00442	e8 00 00 00 00	 call	 _fopen
  00447	83 c4 08	 add	 esp, 8
  0044a	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 197  : 	if (fp==0)

  0044d	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00451	75 06		 jne	 SHORT $LN2@IsFile

; 198  : 	{
; 199  : 		return FALSE;

  00453	33 c0		 xor	 eax, eax
  00455	eb 13		 jmp	 SHORT $LN3@IsFile

; 200  : 	}
; 201  : 	else

  00457	eb 11		 jmp	 SHORT $LN3@IsFile
$LN2@IsFile:

; 202  : 	{
; 203  : 		fclose(fp);

  00459	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0045c	50		 push	 eax
  0045d	e8 00 00 00 00	 call	 _fclose
  00462	83 c4 04	 add	 esp, 4

; 204  : 		return TRUE;

  00465	b8 01 00 00 00	 mov	 eax, 1
$LN3@IsFile:

; 205  : 	}
; 206  : }

  0046a	5f		 pop	 edi
  0046b	5e		 pop	 esi
  0046c	5b		 pop	 ebx
  0046d	8b e5		 mov	 esp, ebp
  0046f	5d		 pop	 ebp
  00470	c3		 ret	 0
?IsFile@@YAHPAD@Z ENDP					; IsFile
_TEXT	ENDS
PUBLIC	??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@	; `string'
PUBLIC	?GetTodayString@@YAXPAD@Z			; GetTodayString
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
CONST	SEGMENT
??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@ DB '%02d%02d%02d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_ltime$ = -12						; size = 8
_today$ = -4						; size = 4
_szDate$ = 8						; size = 4
?GetTodayString@@YAXPAD@Z PROC				; GetTodayString

; 210  : {

  00480	55		 push	 ebp
  00481	8b ec		 mov	 ebp, esp
  00483	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00486	53		 push	 ebx
  00487	56		 push	 esi
  00488	57		 push	 edi

; 211  : 	tm* today;
; 212  : 	time_t ltime;
; 213  : 	
; 214  : 
; 215  : 	time(&ltime);

  00489	8d 45 f4	 lea	 eax, DWORD PTR _ltime$[ebp]
  0048c	50		 push	 eax
  0048d	e8 00 00 00 00	 call	 _time
  00492	83 c4 04	 add	 esp, 4

; 216  : 	today=localtime(&ltime);

  00495	8d 45 f4	 lea	 eax, DWORD PTR _ltime$[ebp]
  00498	50		 push	 eax
  00499	e8 00 00 00 00	 call	 _localtime
  0049e	83 c4 04	 add	 esp, 4
  004a1	89 45 fc	 mov	 DWORD PTR _today$[ebp], eax

; 217  : 
; 218  : 	today->tm_year = today->tm_year +1900;

  004a4	8b 45 fc	 mov	 eax, DWORD PTR _today$[ebp]
  004a7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004aa	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  004b0	8b 55 fc	 mov	 edx, DWORD PTR _today$[ebp]
  004b3	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 219  : 
; 220  : 	wsprintf(szDate, "%02d%02d%02d", today->tm_year , today->tm_mon +1 , today->tm_mday );

  004b6	8b 45 fc	 mov	 eax, DWORD PTR _today$[ebp]
  004b9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  004bc	51		 push	 ecx
  004bd	8b 55 fc	 mov	 edx, DWORD PTR _today$[ebp]
  004c0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004c3	83 c0 01	 add	 eax, 1
  004c6	50		 push	 eax
  004c7	8b 4d fc	 mov	 ecx, DWORD PTR _today$[ebp]
  004ca	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004cd	52		 push	 edx
  004ce	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
  004d3	8b 45 08	 mov	 eax, DWORD PTR _szDate$[ebp]
  004d6	50		 push	 eax
  004d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  004dd	83 c4 14	 add	 esp, 20			; 00000014H

; 221  : }

  004e0	5f		 pop	 edi
  004e1	5e		 pop	 esi
  004e2	5b		 pop	 ebx
  004e3	8b e5		 mov	 esp, ebp
  004e5	5d		 pop	 ebp
  004e6	c3		 ret	 0
?GetTodayString@@YAXPAD@Z ENDP				; GetTodayString
_TEXT	ENDS
PUBLIC	?PHeadSetB@@YAXPAEEH@Z				; PHeadSetB
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?PHeadSetB@@YAXPAEEH@Z PROC				; PHeadSetB

; 225  : {

  004f0	55		 push	 ebp
  004f1	8b ec		 mov	 ebp, esp
  004f3	83 ec 40	 sub	 esp, 64			; 00000040H
  004f6	53		 push	 ebx
  004f7	56		 push	 esi
  004f8	57		 push	 edi

; 226  : 	lpBuf[0] =0xC1;		// Packets

  004f9	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  004fc	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 227  : 	lpBuf[1] =size;

  004ff	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00502	8a 4d 10	 mov	 cl, BYTE PTR _size$[ebp]
  00505	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 228  : 	lpBuf[2] =head;

  00508	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0050b	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0050e	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 229  : }

  00511	5f		 pop	 edi
  00512	5e		 pop	 esi
  00513	5b		 pop	 ebx
  00514	8b e5		 mov	 esp, ebp
  00516	5d		 pop	 ebp
  00517	c3		 ret	 0
?PHeadSetB@@YAXPAEEH@Z ENDP				; PHeadSetB
_TEXT	ENDS
PUBLIC	?PHeadSubSetB@@YAXPAEEEH@Z			; PHeadSubSetB
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?PHeadSubSetB@@YAXPAEEEH@Z PROC				; PHeadSubSetB

; 233  : {

  00520	55		 push	 ebp
  00521	8b ec		 mov	 ebp, esp
  00523	83 ec 40	 sub	 esp, 64			; 00000040H
  00526	53		 push	 ebx
  00527	56		 push	 esi
  00528	57		 push	 edi

; 234  : 	lpBuf[0] =0xC1;	// Packets

  00529	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0052c	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 235  : 	lpBuf[1] =size;

  0052f	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00532	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00535	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 236  : 	lpBuf[2] =head;

  00538	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0053b	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0053e	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 237  : 	lpBuf[3] =sub;

  00541	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00544	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00547	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 238  : }

  0054a	5f		 pop	 edi
  0054b	5e		 pop	 esi
  0054c	5b		 pop	 ebx
  0054d	8b e5		 mov	 esp, ebp
  0054f	5d		 pop	 ebp
  00550	c3		 ret	 0
?PHeadSubSetB@@YAXPAEEEH@Z ENDP				; PHeadSubSetB
_TEXT	ENDS
PUBLIC	?PHeadSetW@@YAXPAEEH@Z				; PHeadSetW
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?PHeadSetW@@YAXPAEEH@Z PROC				; PHeadSetW

; 241  : {

  00560	55		 push	 ebp
  00561	8b ec		 mov	 ebp, esp
  00563	83 ec 40	 sub	 esp, 64			; 00000040H
  00566	53		 push	 ebx
  00567	56		 push	 esi
  00568	57		 push	 edi

; 242  : 	lpBuf[0] = 0xC2;	// Packets Header

  00569	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0056c	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H

; 243  : 	lpBuf[1]= SET_NUMBERH(size);

  0056f	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00572	c1 e8 08	 shr	 eax, 8
  00575	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00578	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 244  : 	lpBuf[2]= SET_NUMBERL(size);

  0057b	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  0057e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00583	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00586	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 245  : 	lpBuf[3]= head;

  00589	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0058c	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0058f	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 246  : }

  00592	5f		 pop	 edi
  00593	5e		 pop	 esi
  00594	5b		 pop	 ebx
  00595	8b e5		 mov	 esp, ebp
  00597	5d		 pop	 ebp
  00598	c3		 ret	 0
?PHeadSetW@@YAXPAEEH@Z ENDP				; PHeadSetW
_TEXT	ENDS
EXTRN	__localtime64:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC

; 113  : {

  005a0	55		 push	 ebp
  005a1	8b ec		 mov	 ebp, esp
  005a3	83 ec 40	 sub	 esp, 64			; 00000040H
  005a6	53		 push	 ebx
  005a7	56		 push	 esi
  005a8	57		 push	 edi

; 114  : #pragma warning( push )
; 115  : #pragma warning( disable : 4996 )
; 116  :     return _localtime64(_Time);

  005a9	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  005ac	50		 push	 eax
  005ad	e8 00 00 00 00	 call	 __localtime64
  005b2	83 c4 04	 add	 esp, 4

; 117  : #pragma warning( pop )
; 118  : }

  005b5	5f		 pop	 edi
  005b6	5e		 pop	 esi
  005b7	5b		 pop	 ebx
  005b8	8b e5		 mov	 esp, ebp
  005ba	5d		 pop	 ebp
  005bb	c3		 ret	 0
_localtime ENDP
_TEXT	ENDS
PUBLIC	?PHeadSubSetW@@YAXPAEEEH@Z			; PHeadSubSetW
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\winutil.cpp
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?PHeadSubSetW@@YAXPAEEEH@Z PROC				; PHeadSubSetW

; 249  : {

  005c0	55		 push	 ebp
  005c1	8b ec		 mov	 ebp, esp
  005c3	83 ec 40	 sub	 esp, 64			; 00000040H
  005c6	53		 push	 ebx
  005c7	56		 push	 esi
  005c8	57		 push	 edi

; 250  : 	lpBuf[0]=0xC2;	// packet header

  005c9	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  005cc	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H

; 251  : 	lpBuf[1]=SET_NUMBERH(size);

  005cf	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  005d2	c1 e8 08	 shr	 eax, 8
  005d5	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  005d8	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 252  : 	lpBuf[2]=SET_NUMBERL(size);

  005db	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  005de	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005e3	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  005e6	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 253  : 	lpBuf[3]=head;

  005e9	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  005ec	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  005ef	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 254  : 	lpBuf[4]=sub;

  005f2	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  005f5	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  005f8	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 255  : }

  005fb	5f		 pop	 edi
  005fc	5e		 pop	 esi
  005fd	5b		 pop	 ebx
  005fe	8b e5		 mov	 esp, ebp
  00600	5d		 pop	 ebp
  00601	c3		 ret	 0
?PHeadSubSetW@@YAXPAEEEH@Z ENDP				; PHeadSubSetW
_TEXT	ENDS
PUBLIC	?PHeadSetBE@@YAXPAEEH@Z				; PHeadSetBE
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?PHeadSetBE@@YAXPAEEH@Z PROC				; PHeadSetBE

; 259  : {

  00610	55		 push	 ebp
  00611	8b ec		 mov	 ebp, esp
  00613	83 ec 40	 sub	 esp, 64			; 00000040H
  00616	53		 push	 ebx
  00617	56		 push	 esi
  00618	57		 push	 edi

; 260  : 	lpBuf[0] =0xC3;

  00619	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0061c	c6 00 c3	 mov	 BYTE PTR [eax], 195	; 000000c3H

; 261  : 	lpBuf[1] =size;

  0061f	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00622	8a 4d 10	 mov	 cl, BYTE PTR _size$[ebp]
  00625	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 262  : 	lpBuf[2] =head;

  00628	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0062b	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0062e	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 263  : }

  00631	5f		 pop	 edi
  00632	5e		 pop	 esi
  00633	5b		 pop	 ebx
  00634	8b e5		 mov	 esp, ebp
  00636	5d		 pop	 ebp
  00637	c3		 ret	 0
?PHeadSetBE@@YAXPAEEH@Z ENDP				; PHeadSetBE
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 132  : {

  00640	55		 push	 ebp
  00641	8b ec		 mov	 ebp, esp
  00643	83 ec 40	 sub	 esp, 64			; 00000040H
  00646	53		 push	 ebx
  00647	56		 push	 esi
  00648	57		 push	 edi

; 133  :     return _time64(_Time);

  00649	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0064c	50		 push	 eax
  0064d	e8 00 00 00 00	 call	 __time64
  00652	83 c4 04	 add	 esp, 4

; 134  : }

  00655	5f		 pop	 edi
  00656	5e		 pop	 esi
  00657	5b		 pop	 ebx
  00658	8b e5		 mov	 esp, ebp
  0065a	5d		 pop	 ebp
  0065b	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	?PHeadSubSetBE@@YAXPAEEEH@Z			; PHeadSubSetBE
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\winutil.cpp
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?PHeadSubSetBE@@YAXPAEEEH@Z PROC			; PHeadSubSetBE

; 266  : {

  00660	55		 push	 ebp
  00661	8b ec		 mov	 ebp, esp
  00663	83 ec 40	 sub	 esp, 64			; 00000040H
  00666	53		 push	 ebx
  00667	56		 push	 esi
  00668	57		 push	 edi

; 267  : 	lpBuf[0] =0xC3;

  00669	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0066c	c6 00 c3	 mov	 BYTE PTR [eax], 195	; 000000c3H

; 268  : 	lpBuf[1] =size;

  0066f	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00672	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00675	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 269  : 	lpBuf[2] =head;

  00678	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0067b	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0067e	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 270  : 	lpBuf[3] =sub;

  00681	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00684	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00687	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 271  : }

  0068a	5f		 pop	 edi
  0068b	5e		 pop	 esi
  0068c	5b		 pop	 ebx
  0068d	8b e5		 mov	 esp, ebp
  0068f	5d		 pop	 ebp
  00690	c3		 ret	 0
?PHeadSubSetBE@@YAXPAEEEH@Z ENDP			; PHeadSubSetBE
_TEXT	ENDS
END
