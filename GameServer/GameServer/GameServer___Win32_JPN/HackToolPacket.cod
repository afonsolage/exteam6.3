; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\HackToolPacket.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?SetState@CHackToolPacket@@QAEPAV1@_N@Z		; CHackToolPacket::SetState
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\hacktoolpacket.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bResult$ = 8						; size = 1
?SetState@CHackToolPacket@@QAEPAV1@_N@Z PROC		; CHackToolPacket::SetState
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 14   : 	this->m_dwTick = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 15   : 	this->bLoad = bResult;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8a 4d 08	 mov	 cl, BYTE PTR _bResult$[ebp]
  0001b	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 16   : 	this->bSetTick = 0;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0

; 17   : 
; 18   : 	return this;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 19   : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?SetState@CHackToolPacket@@QAEPAV1@_N@Z ENDP		; CHackToolPacket::SetState
_TEXT	ENDS
PUBLIC	?ClearTick@CHackToolPacket@@QAEXXZ		; CHackToolPacket::ClearTick
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearTick@CHackToolPacket@@QAEXXZ PROC			; CHackToolPacket::ClearTick
; _this$ = ecx

; 22   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	this->bSetTick = 0;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0

; 24   : 	this->m_dwTick = 0;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 25   : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?ClearTick@CHackToolPacket@@QAEXXZ ENDP			; CHackToolPacket::ClearTick
_TEXT	ENDS
PUBLIC	?Init@CHackToolPacket@@QAEXXZ			; CHackToolPacket::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CHackToolPacket@@QAEXXZ PROC			; CHackToolPacket::Init
; _this$ = ecx

; 28   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 44	 sub	 esp, 68			; 00000044H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 	//empty?
; 30   : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?Init@CHackToolPacket@@QAEXXZ ENDP			; CHackToolPacket::Init
_TEXT	ENDS
PUBLIC	?CheckExpiredTick@CHackToolPacket@@QAEEXZ	; CHackToolPacket::CheckExpiredTick
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckExpiredTick@CHackToolPacket@@QAEEXZ PROC		; CHackToolPacket::CheckExpiredTick
; _this$ = ecx

; 33   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 44	 sub	 esp, 68			; 00000044H
  00096	53		 push	 ebx
  00097	56		 push	 esi
  00098	57		 push	 edi
  00099	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 34   : 	if(this->m_dwTick <= GetTickCount())

  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	39 01		 cmp	 DWORD PTR [ecx], eax
  000a7	77 17		 ja	 SHORT $LN2@CheckExpir

; 35   : 	{
; 36   : 		if(this->bLoad == 1)

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  000b0	83 f9 01	 cmp	 ecx, 1
  000b3	75 07		 jne	 SHORT $LN1@CheckExpir

; 37   : 		{
; 38   : 			this->bSetTick = 0;

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0
$LN1@CheckExpir:

; 39   : 		}
; 40   : 		return 1;

  000bc	b0 01		 mov	 al, 1
  000be	eb 02		 jmp	 SHORT $LN3@CheckExpir
$LN2@CheckExpir:

; 41   : 	}
; 42   : 	return 0;

  000c0	32 c0		 xor	 al, al
$LN3@CheckExpir:

; 43   : }

  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
?CheckExpiredTick@CHackToolPacket@@QAEEXZ ENDP		; CHackToolPacket::CheckExpiredTick
_TEXT	ENDS
PUBLIC	?SetTick@CHackToolPacket@@QAEXK@Z		; CHackToolPacket::SetTick
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwTick$ = 8						; size = 4
?SetTick@CHackToolPacket@@QAEXK@Z PROC			; CHackToolPacket::SetTick
; _this$ = ecx

; 46   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	83 ec 44	 sub	 esp, 68			; 00000044H
  000d6	53		 push	 ebx
  000d7	56		 push	 esi
  000d8	57		 push	 edi
  000d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 	this->bSetTick = 1;

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	c6 40 05 01	 mov	 BYTE PTR [eax+5], 1

; 48   : 	this->m_dwTick = GetTickCount() + dwTick;

  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000e9	03 45 08	 add	 eax, DWORD PTR _dwTick$[ebp]
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	89 01		 mov	 DWORD PTR [ecx], eax

; 49   : }

  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 04 00	 ret	 4
?SetTick@CHackToolPacket@@QAEXK@Z ENDP			; CHackToolPacket::SetTick
_TEXT	ENDS
PUBLIC	??0CHackToolPacket@@QAE@XZ			; CHackToolPacket::CHackToolPacket
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CHackToolPacket@@QAE@XZ PROC				; CHackToolPacket::CHackToolPacket
; _this$ = ecx

; 54   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	83 ec 44	 sub	 esp, 68			; 00000044H
  00106	53		 push	 ebx
  00107	56		 push	 esi
  00108	57		 push	 edi
  00109	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	this->SetState(1);

  0010c	6a 01		 push	 1
  0010e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00111	e8 00 00 00 00	 call	 ?SetState@CHackToolPacket@@QAEPAV1@_N@Z ; CHackToolPacket::SetState

; 56   : 	this->unk_8 = 0;

  00116	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00119	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 57   : 	this->m_iPacketCount = 0;

  00120	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00123	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 58   : 	this->unk_10 = 0;

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 59   : 	this->unk_14 = 0;

  00134	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00137	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 60   : }

  0013e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00141	5f		 pop	 edi
  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
??0CHackToolPacket@@QAE@XZ ENDP				; CHackToolPacket::CHackToolPacket
_TEXT	ENDS
PUBLIC	?Clear@CHackToolPacket@@QAEXK@Z			; CHackToolPacket::Clear
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwTick$ = 8						; size = 4
?Clear@CHackToolPacket@@QAEXK@Z PROC			; CHackToolPacket::Clear
; _this$ = ecx

; 63   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	83 ec 44	 sub	 esp, 68			; 00000044H
  00156	53		 push	 ebx
  00157	56		 push	 esi
  00158	57		 push	 edi
  00159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 	this->unk_8 = dwTick;

  0015c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	8b 4d 08	 mov	 ecx, DWORD PTR _dwTick$[ebp]
  00162	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 65   : 	this->m_iPacketCount = 0;

  00165	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00168	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 66   : 	this->unk_10 = 0;

  0016f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00172	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 67   : 	this->unk_14 = 0;

  00179	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017c	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 68   : 	this->ClearTick();

  00183	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	e8 00 00 00 00	 call	 ?ClearTick@CHackToolPacket@@QAEXXZ ; CHackToolPacket::ClearTick

; 69   : 	this->SetTick(this->unk_8);

  0018b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00191	51		 push	 ecx
  00192	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	e8 00 00 00 00	 call	 ?SetTick@CHackToolPacket@@QAEXK@Z ; CHackToolPacket::SetTick

; 70   : }

  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi
  0019c	5b		 pop	 ebx
  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c2 04 00	 ret	 4
?Clear@CHackToolPacket@@QAEXK@Z ENDP			; CHackToolPacket::Clear
_TEXT	ENDS
PUBLIC	??1CHackToolPacket@@QAE@XZ			; CHackToolPacket::~CHackToolPacket
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CHackToolPacket@@QAE@XZ PROC				; CHackToolPacket::~CHackToolPacket
; _this$ = ecx

; 73   : {

  001b0	55		 push	 ebp
  001b1	8b ec		 mov	 ebp, esp
  001b3	83 ec 44	 sub	 esp, 68			; 00000044H
  001b6	53		 push	 ebx
  001b7	56		 push	 esi
  001b8	57		 push	 edi
  001b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	this->Init();

  001bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bf	e8 00 00 00 00	 call	 ?Init@CHackToolPacket@@QAEXXZ ; CHackToolPacket::Init

; 75   : }

  001c4	5f		 pop	 edi
  001c5	5e		 pop	 esi
  001c6	5b		 pop	 ebx
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c3		 ret	 0
??1CHackToolPacket@@QAE@XZ ENDP				; CHackToolPacket::~CHackToolPacket
_TEXT	ENDS
PUBLIC	?CheckPacketCount@CHackToolPacket@@QAEHXZ	; CHackToolPacket::CheckPacketCount
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckPacketCount@CHackToolPacket@@QAEHXZ PROC		; CHackToolPacket::CheckPacketCount
; _this$ = ecx

; 79   : {

  001d0	55		 push	 ebp
  001d1	8b ec		 mov	 ebp, esp
  001d3	83 ec 44	 sub	 esp, 68			; 00000044H
  001d6	53		 push	 ebx
  001d7	56		 push	 esi
  001d8	57		 push	 edi
  001d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 	if(CheckExpiredTick() == 1)

  001dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001df	e8 00 00 00 00	 call	 ?CheckExpiredTick@CHackToolPacket@@QAEEXZ ; CHackToolPacket::CheckExpiredTick
  001e4	0f b6 c0	 movzx	 eax, al
  001e7	83 f8 01	 cmp	 eax, 1
  001ea	75 16		 jne	 SHORT $LN1@CheckPacke

; 81   : 	{
; 82   : 		this->Clear(this->unk_8);

  001ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001f2	51		 push	 ecx
  001f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f6	e8 00 00 00 00	 call	 ?Clear@CHackToolPacket@@QAEXK@Z ; CHackToolPacket::Clear

; 83   : 		return 2;

  001fb	b8 02 00 00 00	 mov	 eax, 2
  00200	eb 05		 jmp	 SHORT $LN2@CheckPacke
$LN1@CheckPacke:

; 84   : 	}
; 85   : 	return 1;

  00202	b8 01 00 00 00	 mov	 eax, 1
$LN2@CheckPacke:

; 86   : }

  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5b		 pop	 ebx
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c3		 ret	 0
?CheckPacketCount@CHackToolPacket@@QAEHXZ ENDP		; CHackToolPacket::CheckPacketCount
_TEXT	ENDS
PUBLIC	?IncreasePacketCount@CHackToolPacket@@QAEXEK@Z	; CHackToolPacket::IncreasePacketCount
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_arg1$ = 8						; size = 1
_arg2$ = 12						; size = 4
?IncreasePacketCount@CHackToolPacket@@QAEXEK@Z PROC	; CHackToolPacket::IncreasePacketCount
; _this$ = ecx

; 89   : {

  00210	55		 push	 ebp
  00211	8b ec		 mov	 ebp, esp
  00213	83 ec 44	 sub	 esp, 68			; 00000044H
  00216	53		 push	 ebx
  00217	56		 push	 esi
  00218	57		 push	 edi
  00219	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 	this->m_iPacketCount++;

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0021f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00222	83 c1 01	 add	 ecx, 1
  00225	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00228	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 91   : 	this->unk_14 += arg2;

  0022b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00231	03 4d 0c	 add	 ecx, DWORD PTR _arg2$[ebp]
  00234	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00237	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 92   : 
; 93   : 	if(arg1 == 1)

  0023a	0f b6 45 08	 movzx	 eax, BYTE PTR _arg1$[ebp]
  0023e	83 f8 01	 cmp	 eax, 1
  00241	75 0f		 jne	 SHORT $LN2@IncreasePa

; 94   : 	{
; 95   : 		this->unk_10++;

  00243	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00246	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00249	83 c1 01	 add	 ecx, 1
  0024c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0024f	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN2@IncreasePa:

; 96   : 	}
; 97   : }

  00252	5f		 pop	 edi
  00253	5e		 pop	 esi
  00254	5b		 pop	 ebx
  00255	8b e5		 mov	 esp, ebp
  00257	5d		 pop	 ebp
  00258	c2 08 00	 ret	 8
?IncreasePacketCount@CHackToolPacket@@QAEXEK@Z ENDP	; CHackToolPacket::IncreasePacketCount
_TEXT	ENDS
PUBLIC	?GetState@CHackToolPacket@@QAEXPAHPAK1@Z	; CHackToolPacket::GetState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_PacketCount$ = 8					; size = 4
_arg2$ = 12						; size = 4
_arg3$ = 16						; size = 4
?GetState@CHackToolPacket@@QAEXPAHPAK1@Z PROC		; CHackToolPacket::GetState
; _this$ = ecx

; 100  : {

  00260	55		 push	 ebp
  00261	8b ec		 mov	 ebp, esp
  00263	83 ec 44	 sub	 esp, 68			; 00000044H
  00266	53		 push	 ebx
  00267	56		 push	 esi
  00268	57		 push	 edi
  00269	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 101  : 	*PacketCount = this->m_iPacketCount;

  0026c	8b 45 08	 mov	 eax, DWORD PTR _PacketCount$[ebp]
  0026f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00272	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00275	89 10		 mov	 DWORD PTR [eax], edx

; 102  : 	*arg2 = this->unk_10;

  00277	8b 45 0c	 mov	 eax, DWORD PTR _arg2$[ebp]
  0027a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0027d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00280	89 10		 mov	 DWORD PTR [eax], edx

; 103  : 	*arg3 = this->unk_14;

  00282	8b 45 10	 mov	 eax, DWORD PTR _arg3$[ebp]
  00285	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00288	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0028b	89 10		 mov	 DWORD PTR [eax], edx

; 104  : }

  0028d	5f		 pop	 edi
  0028e	5e		 pop	 esi
  0028f	5b		 pop	 ebx
  00290	8b e5		 mov	 esp, ebp
  00292	5d		 pop	 ebp
  00293	c2 0c 00	 ret	 12			; 0000000cH
?GetState@CHackToolPacket@@QAEXPAHPAK1@Z ENDP		; CHackToolPacket::GetState
_TEXT	ENDS
END
