; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\XMasAttackEventData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CEventTimer@@QAE@XZ				; CEventTimer::CEventTimer
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\xmasattackeventdata.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEventTimer@@QAE@XZ PROC				; CEventTimer::CEventTimer
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 15   : 	this->m_iTIME_MSEC_REMAIN = GetTickCount();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 16   : }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CEventTimer@@QAE@XZ ENDP				; CEventTimer::CEventTimer
_TEXT	ENDS
PUBLIC	??1CEventTimer@@QAE@XZ				; CEventTimer::~CEventTimer
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CEventTimer@@QAE@XZ PROC				; CEventTimer::~CEventTimer
; _this$ = ecx

; 19   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 
; 21   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??1CEventTimer@@QAE@XZ ENDP				; CEventTimer::~CEventTimer
_TEXT	ENDS
PUBLIC	?SetSeconds@CEventTimer@@QAEXH@Z		; CEventTimer::SetSeconds
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Time$ = 8						; size = 4
?SetSeconds@CEventTimer@@QAEXH@Z PROC			; CEventTimer::SetSeconds
; _this$ = ecx

; 24   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 44	 sub	 esp, 68			; 00000044H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 	this->m_iTIME_MSEC_REMAIN = GetTickCount() + (1000 * Time);

  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _Time$[ebp]
  00065	69 c9 e8 03 00
	00		 imul	 ecx, 1000		; 000003e8H
  0006b	03 c1		 add	 eax, ecx
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00070	89 02		 mov	 DWORD PTR [edx], eax

; 26   : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
?SetSeconds@CEventTimer@@QAEXH@Z ENDP			; CEventTimer::SetSeconds
_TEXT	ENDS
PUBLIC	?GetSeconds@CEventTimer@@QAEHXZ			; CEventTimer::GetSeconds
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc3$ = -12						; size = 4
_Time$ = -8						; size = 4
_this$ = -4						; size = 4
?GetSeconds@CEventTimer@@QAEHXZ PROC			; CEventTimer::GetSeconds
; _this$ = ecx

; 29   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi
  00089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	int Time = GetTickCount(); //loc2

  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00092	89 45 f8	 mov	 DWORD PTR _Time$[ebp], eax

; 31   : 
; 32   : 	int loc3 = this->m_iTIME_MSEC_REMAIN - Time;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00098	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009a	2b 4d f8	 sub	 ecx, DWORD PTR _Time$[ebp]
  0009d	89 4d f4	 mov	 DWORD PTR _loc3$[ebp], ecx

; 33   : 
; 34   : 	if( loc3 < 0 )

  000a0	79 0c		 jns	 SHORT $LN1@GetSeconds

; 35   : 	{
; 36   : 		this->m_iTIME_MSEC_REMAIN = Time;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _Time$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx

; 37   : 		return 0;

  000aa	33 c0		 xor	 eax, eax
  000ac	eb 10		 jmp	 SHORT $LN2@GetSeconds
$LN1@GetSeconds:

; 38   : 	}
; 39   : 
; 40   : 	return ((loc3+999)/1000);

  000ae	8b 45 f4	 mov	 eax, DWORD PTR _loc3$[ebp]
  000b1	05 e7 03 00 00	 add	 eax, 999		; 000003e7H
  000b6	99		 cdq
  000b7	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  000bc	f7 f9		 idiv	 ecx
$LN2@GetSeconds:

; 41   : }

  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
?GetSeconds@CEventTimer@@QAEHXZ ENDP			; CEventTimer::GetSeconds
_TEXT	ENDS
PUBLIC	?SetMinutes@CEventTimer@@QAEXH@Z		; CEventTimer::SetMinutes
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Time$ = 8						; size = 4
?SetMinutes@CEventTimer@@QAEXH@Z PROC			; CEventTimer::SetMinutes
; _this$ = ecx

; 44   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	83 ec 44	 sub	 esp, 68			; 00000044H
  000d6	53		 push	 ebx
  000d7	56		 push	 esi
  000d8	57		 push	 edi
  000d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 	this->m_iTIME_MSEC_REMAIN = GetTickCount() + (60000 * Time);

  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _Time$[ebp]
  000e5	69 c9 60 ea 00
	00		 imul	 ecx, 60000		; 0000ea60H
  000eb	03 c1		 add	 eax, ecx
  000ed	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f0	89 02		 mov	 DWORD PTR [edx], eax

; 46   : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
?SetMinutes@CEventTimer@@QAEXH@Z ENDP			; CEventTimer::SetMinutes
_TEXT	ENDS
PUBLIC	?GetMinutes@CEventTimer@@QAEHXZ			; CEventTimer::GetMinutes
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc3$ = -12						; size = 4
_Time$ = -8						; size = 4
_this$ = -4						; size = 4
?GetMinutes@CEventTimer@@QAEHXZ PROC			; CEventTimer::GetMinutes
; _this$ = ecx

; 49   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00106	53		 push	 ebx
  00107	56		 push	 esi
  00108	57		 push	 edi
  00109	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 	int Time = GetTickCount(); //loc2

  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00112	89 45 f8	 mov	 DWORD PTR _Time$[ebp], eax

; 51   : 
; 52   : 	int loc3 = this->m_iTIME_MSEC_REMAIN - Time;

  00115	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00118	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011a	2b 4d f8	 sub	 ecx, DWORD PTR _Time$[ebp]
  0011d	89 4d f4	 mov	 DWORD PTR _loc3$[ebp], ecx

; 53   : 
; 54   : 	if( loc3 < 0 )

  00120	79 0c		 jns	 SHORT $LN1@GetMinutes

; 55   : 	{
; 56   : 		this->m_iTIME_MSEC_REMAIN = Time;

  00122	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00125	8b 4d f8	 mov	 ecx, DWORD PTR _Time$[ebp]
  00128	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 		return 0;

  0012a	33 c0		 xor	 eax, eax
  0012c	eb 10		 jmp	 SHORT $LN2@GetMinutes
$LN1@GetMinutes:

; 58   : 	}
; 59   : 
; 60   : 	return ((loc3+59999)/60000);

  0012e	8b 45 f4	 mov	 eax, DWORD PTR _loc3$[ebp]
  00131	05 5f ea 00 00	 add	 eax, 59999		; 0000ea5fH
  00136	99		 cdq
  00137	b9 60 ea 00 00	 mov	 ecx, 60000		; 0000ea60H
  0013c	f7 f9		 idiv	 ecx
$LN2@GetMinutes:

; 61   : }

  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
?GetMinutes@CEventTimer@@QAEHXZ ENDP			; CEventTimer::GetMinutes
_TEXT	ENDS
PUBLIC	?SetMiliSeconds@CEventTimer@@QAEXH@Z		; CEventTimer::SetMiliSeconds
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Time$ = 8						; size = 4
?SetMiliSeconds@CEventTimer@@QAEXH@Z PROC		; CEventTimer::SetMiliSeconds
; _this$ = ecx

; 64   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	83 ec 44	 sub	 esp, 68			; 00000044H
  00156	53		 push	 ebx
  00157	56		 push	 esi
  00158	57		 push	 edi
  00159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	this->m_iTIME_MSEC_REMAIN = GetTickCount() + Time;

  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00162	03 45 08	 add	 eax, DWORD PTR _Time$[ebp]
  00165	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00168	89 01		 mov	 DWORD PTR [ecx], eax

; 66   : }

  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 04 00	 ret	 4
?SetMiliSeconds@CEventTimer@@QAEXH@Z ENDP		; CEventTimer::SetMiliSeconds
_TEXT	ENDS
PUBLIC	?GetMiliSeconds@CEventTimer@@QAEHXZ		; CEventTimer::GetMiliSeconds
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc3$ = -12						; size = 4
_Time$ = -8						; size = 4
_this$ = -4						; size = 4
?GetMiliSeconds@CEventTimer@@QAEHXZ PROC		; CEventTimer::GetMiliSeconds
; _this$ = ecx

; 69   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00186	53		 push	 ebx
  00187	56		 push	 esi
  00188	57		 push	 edi
  00189	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 70   : 	int Time = GetTickCount(); //loc2

  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00192	89 45 f8	 mov	 DWORD PTR _Time$[ebp], eax

; 71   : 
; 72   : 	int loc3 = this->m_iTIME_MSEC_REMAIN - Time;

  00195	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00198	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019a	2b 4d f8	 sub	 ecx, DWORD PTR _Time$[ebp]
  0019d	89 4d f4	 mov	 DWORD PTR _loc3$[ebp], ecx

; 73   : 
; 74   : 	if( loc3 < 0 )

  001a0	79 0c		 jns	 SHORT $LN1@GetMiliSec

; 75   : 	{
; 76   : 		this->m_iTIME_MSEC_REMAIN = Time;

  001a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	8b 4d f8	 mov	 ecx, DWORD PTR _Time$[ebp]
  001a8	89 08		 mov	 DWORD PTR [eax], ecx

; 77   : 		return 0;

  001aa	33 c0		 xor	 eax, eax
  001ac	eb 03		 jmp	 SHORT $LN2@GetMiliSec
$LN1@GetMiliSec:

; 78   : 	}
; 79   : 
; 80   : 	return loc3;

  001ae	8b 45 f4	 mov	 eax, DWORD PTR _loc3$[ebp]
$LN2@GetMiliSec:

; 81   : }

  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	5b		 pop	 ebx
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c3		 ret	 0
?GetMiliSeconds@CEventTimer@@QAEHXZ ENDP		; CEventTimer::GetMiliSeconds
_TEXT	ENDS
PUBLIC	??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
PUBLIC	??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
PUBLIC	??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
PUBLIC	??0?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
PUBLIC	??0?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
PUBLIC	??0?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
PUBLIC	??_7CXMasAttackEventData@@6B@			; CXMasAttackEventData::`vftable'
PUBLIC	??0CXMasAttackEventData@@QAE@XZ			; CXMasAttackEventData::CXMasAttackEventData
PUBLIC	??_R4CXMasAttackEventData@@6B@			; CXMasAttackEventData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCXMasAttackEventData@@@8		; CXMasAttackEventData `RTTI Type Descriptor'
PUBLIC	??_R3CXMasAttackEventData@@8			; CXMasAttackEventData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CXMasAttackEventData@@8			; CXMasAttackEventData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CXMasAttackEventData@@8		; CXMasAttackEventData::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECXMasAttackEventData@@UAEPAXI@Z:PROC	; CXMasAttackEventData::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CXMasAttackEventData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CXMasAttackEventData@@8 DD FLAT:??_R0?AVCXMasAttackEventData@@@8 ; CXMasAttackEventData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CXMasAttackEventData@@8
rdata$r	ENDS
;	COMDAT ??_R2CXMasAttackEventData@@8
rdata$r	SEGMENT
??_R2CXMasAttackEventData@@8 DD FLAT:??_R1A@?0A@EA@CXMasAttackEventData@@8 ; CXMasAttackEventData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CXMasAttackEventData@@8
rdata$r	SEGMENT
??_R3CXMasAttackEventData@@8 DD 00H			; CXMasAttackEventData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CXMasAttackEventData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCXMasAttackEventData@@@8
_DATA	SEGMENT
??_R0?AVCXMasAttackEventData@@@8 DD FLAT:??_7type_info@@6B@ ; CXMasAttackEventData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCXMasAttackEventData@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CXMasAttackEventData@@6B@
rdata$r	SEGMENT
??_R4CXMasAttackEventData@@6B@ DD 00H			; CXMasAttackEventData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCXMasAttackEventData@@@8
	DD	FLAT:??_R3CXMasAttackEventData@@8
rdata$r	ENDS
;	COMDAT ??_7CXMasAttackEventData@@6B@
CONST	SEGMENT
??_7CXMasAttackEventData@@6B@ DD FLAT:??_R4CXMasAttackEventData@@6B@ ; CXMasAttackEventData::`vftable'
	DD	FLAT:??_ECXMasAttackEventData@@UAEPAXI@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CXMasAttackEventData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CXMasAttackEventData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CXMasAttackEventData@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CXMasAttackEventData@@QAE@XZ$2
__ehfuncinfo$??0CXMasAttackEventData@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CXMasAttackEventData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CXMasAttackEventData@@QAE@XZ PROC			; CXMasAttackEventData::CXMasAttackEventData
; _this$ = ecx

; 84   : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	6a ff		 push	 -1
  001c5	68 00 00 00 00	 push	 __ehhandler$??0CXMasAttackEventData@@QAE@XZ
  001ca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  001d0	50		 push	 eax
  001d1	83 ec 44	 sub	 esp, 68			; 00000044H
  001d4	53		 push	 ebx
  001d5	56		 push	 esi
  001d6	57		 push	 edi
  001d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001dc	33 c5		 xor	 eax, ebp
  001de	50		 push	 eax
  001df	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  001e2	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  001e8	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  001eb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001ee	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CXMasAttackEventData@@6B@
  001f4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f7	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  001fe	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00201	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00208	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0020b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00212	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00215	83 c1 28	 add	 ecx, 40			; 00000028H
  00218	e8 00 00 00 00	 call	 ??0?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
  0021d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00224	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00227	83 c1 38	 add	 ecx, 56			; 00000038H
  0022a	e8 00 00 00 00	 call	 ??0?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
  0022f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00233	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00236	83 c1 48	 add	 ecx, 72			; 00000048H
  00239	e8 00 00 00 00	 call	 ??0?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
  0023e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00242	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00245	83 c1 58	 add	 ecx, 88			; 00000058H
  00248	e8 00 00 00 00	 call	 ??0CEventTimer@@QAE@XZ	; CEventTimer::CEventTimer

; 85   : 	InitializeCriticalSection(&this->m_critMonsterAddData);

  0024d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00250	83 c0 10	 add	 eax, 16			; 00000010H
  00253	50		 push	 eax
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 86   : }

  0025a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00261	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00264	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00267	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0026e	59		 pop	 ecx
  0026f	5f		 pop	 edi
  00270	5e		 pop	 esi
  00271	5b		 pop	 ebx
  00272	8b e5		 mov	 esp, ebp
  00274	5d		 pop	 ebp
  00275	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CXMasAttackEventData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 28	 add	 ecx, 40			; 00000028H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
__unwindfunclet$??0CXMasAttackEventData@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 38	 add	 ecx, 56			; 00000038H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
__unwindfunclet$??0CXMasAttackEventData@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 48	 add	 ecx, 72			; 00000048H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
__ehhandler$??0CXMasAttackEventData@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CXMasAttackEventData@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CXMasAttackEventData@@QAE@XZ ENDP			; CXMasAttackEventData::CXMasAttackEventData
PUBLIC	??1CXMasAttackEventData@@UAE@XZ			; CXMasAttackEventData::~CXMasAttackEventData
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCXMasAttackEventData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCXMasAttackEventData@@UAEPAXI@Z PROC		; CXMasAttackEventData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CXMasAttackEventData@@UAE@XZ ; CXMasAttackEventData::~CXMasAttackEventData
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCXMasAttackEventData@@UAEPAXI@Z ENDP		; CXMasAttackEventData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetMenualStart@CXMasAttackEvent@@UAEXH@Z	; CXMasAttackEvent::SetMenualStart
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bMenualStart$ = 8					; size = 4
?SetMenualStart@CXMasAttackEvent@@UAEXH@Z PROC		; CXMasAttackEvent::SetMenualStart
; _this$ = ecx

; 90   : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 44	 sub	 esp, 68			; 00000044H
  00286	53		 push	 ebx
  00287	56		 push	 esi
  00288	57		 push	 edi
  00289	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 	this->m_bMenualStart = bMenualStart;

  0028c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028f	8b 4d 08	 mov	 ecx, DWORD PTR _bMenualStart$[ebp]
  00292	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 92   : }

  00295	5f		 pop	 edi
  00296	5e		 pop	 esi
  00297	5b		 pop	 ebx
  00298	8b e5		 mov	 esp, ebp
  0029a	5d		 pop	 ebp
  0029b	c2 04 00	 ret	 4
?SetMenualStart@CXMasAttackEvent@@UAEXH@Z ENDP		; CXMasAttackEvent::SetMenualStart
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:PROC
xdata$x	SEGMENT
__unwindtable$??1CXMasAttackEventData@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CXMasAttackEventData@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CXMasAttackEventData@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CXMasAttackEventData@@UAE@XZ$2
__ehfuncinfo$??1CXMasAttackEventData@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CXMasAttackEventData@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CXMasAttackEventData@@UAE@XZ PROC			; CXMasAttackEventData::~CXMasAttackEventData
; _this$ = ecx

; 95   : {

  002a0	55		 push	 ebp
  002a1	8b ec		 mov	 ebp, esp
  002a3	6a ff		 push	 -1
  002a5	68 00 00 00 00	 push	 __ehhandler$??1CXMasAttackEventData@@UAE@XZ
  002aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  002b0	50		 push	 eax
  002b1	83 ec 44	 sub	 esp, 68			; 00000044H
  002b4	53		 push	 ebx
  002b5	56		 push	 esi
  002b6	57		 push	 edi
  002b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  002bc	33 c5		 xor	 eax, ebp
  002be	50		 push	 eax
  002bf	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  002c2	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  002c8	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  002cb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002ce	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CXMasAttackEventData@@6B@
  002d4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 96   : 	DeleteCriticalSection(&this->m_critMonsterAddData);

  002db	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002de	83 c0 10	 add	 eax, 16			; 00000010H
  002e1	50		 push	 eax
  002e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 97   : }

  002e8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002eb	83 c1 58	 add	 ecx, 88			; 00000058H
  002ee	e8 00 00 00 00	 call	 ??1CEventTimer@@QAE@XZ	; CEventTimer::~CEventTimer
  002f3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  002f7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002fa	83 c1 48	 add	 ecx, 72			; 00000048H
  002fd	e8 00 00 00 00	 call	 ??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
  00302	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00306	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00309	83 c1 38	 add	 ecx, 56			; 00000038H
  0030c	e8 00 00 00 00	 call	 ??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
  00311	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00318	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0031b	83 c1 28	 add	 ecx, 40			; 00000028H
  0031e	e8 00 00 00 00	 call	 ??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
  00323	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00326	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0032d	59		 pop	 ecx
  0032e	5f		 pop	 edi
  0032f	5e		 pop	 esi
  00330	5b		 pop	 ebx
  00331	8b e5		 mov	 esp, ebp
  00333	5d		 pop	 ebp
  00334	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CXMasAttackEventData@@UAE@XZ$0:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 28	 add	 ecx, 40			; 00000028H
  00042	e9 00 00 00 00	 jmp	 ??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
__unwindfunclet$??1CXMasAttackEventData@@UAE@XZ$1:
  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 38	 add	 ecx, 56			; 00000038H
  0004d	e9 00 00 00 00	 jmp	 ??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
__unwindfunclet$??1CXMasAttackEventData@@UAE@XZ$2:
  00052	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 48	 add	 ecx, 72			; 00000048H
  00058	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
__ehhandler$??1CXMasAttackEventData@@UAE@XZ:
  0005d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00061	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00064	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00067	33 c8		 xor	 ecx, eax
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CXMasAttackEventData@@UAE@XZ
  00073	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CXMasAttackEventData@@UAE@XZ ENDP			; CXMasAttackEventData::~CXMasAttackEventData
PUBLIC	?erase@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@0@Z ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::erase
PUBLIC	?begin@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::begin
PUBLIC	?end@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::end
PUBLIC	?erase@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@0@Z ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::erase
PUBLIC	?begin@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::begin
PUBLIC	?end@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::end
PUBLIC	?Clear@CXMasAttackEventData@@QAEXXZ		; CXMasAttackEventData::Clear
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
$T222556 = -108						; size = 4
$T222557 = -104						; size = 4
$T222558 = -100						; size = 4
$T222559 = -96						; size = 4
$T222560 = -92						; size = 4
$T222561 = -88						; size = 4
$T222562 = -84						; size = 4
$T222563 = -80						; size = 4
$T222564 = -76						; size = 4
$T222565 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@CXMasAttackEventData@@QAEXXZ PROC		; CXMasAttackEventData::Clear
; _this$ = ecx

; 101  : {

  00340	55		 push	 ebp
  00341	8b ec		 mov	 ebp, esp
  00343	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00346	53		 push	 ebx
  00347	56		 push	 esi
  00348	57		 push	 edi
  00349	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 	EnterCriticalSection(&this->m_critMonsterAddData);

  0034c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0034f	83 c0 10	 add	 eax, 16			; 00000010H
  00352	50		 push	 eax
  00353	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 103  : 	this->m_vtMonsterAddData.erase( this->m_vtMonsterAddData.begin(), this->m_vtMonsterAddData.end() );

  00359	8d 45 98	 lea	 eax, DWORD PTR $T222557[ebp]
  0035c	50		 push	 eax
  0035d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00360	83 c1 38	 add	 ecx, 56			; 00000038H
  00363	e8 00 00 00 00	 call	 ?end@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::end
  00368	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036a	89 4d 94	 mov	 DWORD PTR $T222556[ebp], ecx
  0036d	8d 55 a0	 lea	 edx, DWORD PTR $T222559[ebp]
  00370	52		 push	 edx
  00371	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00374	83 c1 38	 add	 ecx, 56			; 00000038H
  00377	e8 00 00 00 00	 call	 ?begin@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::begin
  0037c	8b 00		 mov	 eax, DWORD PTR [eax]
  0037e	89 45 9c	 mov	 DWORD PTR $T222558[ebp], eax
  00381	8b 4d 94	 mov	 ecx, DWORD PTR $T222556[ebp]
  00384	51		 push	 ecx
  00385	8b 55 9c	 mov	 edx, DWORD PTR $T222558[ebp]
  00388	52		 push	 edx
  00389	8d 45 a4	 lea	 eax, DWORD PTR $T222560[ebp]
  0038c	50		 push	 eax
  0038d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00390	83 c1 38	 add	 ecx, 56			; 00000038H
  00393	e8 00 00 00 00	 call	 ?erase@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@0@Z ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::erase

; 104  : 	this->m_vtEventTime.erase( this->m_vtEventTime.begin(), this->m_vtEventTime.end() );

  00398	8d 45 ac	 lea	 eax, DWORD PTR $T222562[ebp]
  0039b	50		 push	 eax
  0039c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0039f	83 c1 28	 add	 ecx, 40			; 00000028H
  003a2	e8 00 00 00 00	 call	 ?end@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::end
  003a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a9	89 4d a8	 mov	 DWORD PTR $T222561[ebp], ecx
  003ac	8d 55 b4	 lea	 edx, DWORD PTR $T222564[ebp]
  003af	52		 push	 edx
  003b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b3	83 c1 28	 add	 ecx, 40			; 00000028H
  003b6	e8 00 00 00 00	 call	 ?begin@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::begin
  003bb	8b 00		 mov	 eax, DWORD PTR [eax]
  003bd	89 45 b0	 mov	 DWORD PTR $T222563[ebp], eax
  003c0	8b 4d a8	 mov	 ecx, DWORD PTR $T222561[ebp]
  003c3	51		 push	 ecx
  003c4	8b 55 b0	 mov	 edx, DWORD PTR $T222563[ebp]
  003c7	52		 push	 edx
  003c8	8d 45 b8	 lea	 eax, DWORD PTR $T222565[ebp]
  003cb	50		 push	 eax
  003cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003cf	83 c1 28	 add	 ecx, 40			; 00000028H
  003d2	e8 00 00 00 00	 call	 ?erase@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@0@Z ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::erase

; 105  : 	LeaveCriticalSection(&this->m_critMonsterAddData);

  003d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003da	83 c0 10	 add	 eax, 16			; 00000010H
  003dd	50		 push	 eax
  003de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 106  : 
; 107  : 	this->m_bHasData = FALSE;

  003e4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e7	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 108  : }

  003ee	5f		 pop	 edi
  003ef	5e		 pop	 esi
  003f0	5b		 pop	 ebx
  003f1	8b e5		 mov	 esp, ebp
  003f3	5d		 pop	 ebp
  003f4	c3		 ret	 0
?Clear@CXMasAttackEventData@@QAEXXZ ENDP		; CXMasAttackEventData::Clear
_TEXT	ENDS
PUBLIC	?Init@CXMasAttackEventData@@QAEHH@Z		; CXMasAttackEventData::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_arg1$ = 8						; size = 4
?Init@CXMasAttackEventData@@QAEHH@Z PROC		; CXMasAttackEventData::Init
; _this$ = ecx

; 112  : {

  00400	55		 push	 ebp
  00401	8b ec		 mov	 ebp, esp
  00403	83 ec 44	 sub	 esp, 68			; 00000044H
  00406	53		 push	 ebx
  00407	56		 push	 esi
  00408	57		 push	 edi
  00409	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 	return FALSE;

  0040c	33 c0		 xor	 eax, eax

; 114  : }

  0040e	5f		 pop	 edi
  0040f	5e		 pop	 esi
  00410	5b		 pop	 ebx
  00411	8b e5		 mov	 esp, ebp
  00413	5d		 pop	 ebp
  00414	c2 04 00	 ret	 4
?Init@CXMasAttackEventData@@QAEHH@Z ENDP		; CXMasAttackEventData::Init
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_EVENT_TIME@@@1@@Z ; std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
PUBLIC	??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@XZ ; std::allocator<XMASMONSTER_EVENT_TIME>::allocator<XMASMONSTER_EVENT_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T222568 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T222568[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@XZ ; std::allocator<XMASMONSTER_EVENT_TIME>::allocator<XMASMONSTER_EVENT_TIME>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_EVENT_TIME@@@1@@Z ; std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
PUBLIC	?_Tidy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXXZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXXZ ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
__ehhandler$??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXPAUXMASMONSTER_EVENT_TIME@@0@Z ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Destroy
PUBLIC	??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00@Z ; std::_Move<XMASMONSTER_EVENT_TIME *,XMASMONSTER_EVENT_TIME *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T222585 = -84						; size = 4
__Ptr$221436 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@0@Z PROC ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00@Z ; std::_Move<XMASMONSTER_EVENT_TIME *,XMASMONSTER_EVENT_TIME *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$221436[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$221436[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXPAUXMASMONSTER_EVENT_TIME@@0@Z ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$221436[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T222585[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T222585[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@0@Z ENDP ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_DATA@@@1@@Z ; std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
PUBLIC	??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@XZ	; std::allocator<XMASMONSTER_DATA>::allocator<XMASMONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T222588 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T222588[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@XZ ; std::allocator<XMASMONSTER_DATA>::allocator<XMASMONSTER_DATA>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_DATA@@@1@@Z ; std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
PUBLIC	?_Tidy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXXZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXXZ ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
__ehhandler$??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXPAUXMASMONSTER_DATA@@0@Z ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Destroy
PUBLIC	??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00@Z ; std::_Move<XMASMONSTER_DATA *,XMASMONSTER_DATA *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@@Z ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T222605 = -84						; size = 4
__Ptr$221490 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@@Z ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@@Z ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00@Z ; std::_Move<XMASMONSTER_DATA *,XMASMONSTER_DATA *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$221490[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$221490[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXPAUXMASMONSTER_DATA@@0@Z ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$221490[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T222605[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T222605[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@@Z ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@V?$allocator@PAVCXMasMonsterHerd@@@1@@Z ; std::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
PUBLIC	??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@XZ ; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T222608 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T222608[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@XZ ; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@V?$allocator@PAVCXMasMonsterHerd@@@1@@Z ; std::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ; std::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
PUBLIC	?_Tidy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXXZ ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXXZ ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ; std::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ; std::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
__ehhandler$??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Make_iter@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z PROC ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z ENDP ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@@Z ; std::_Destroy_range<std::allocator<XMASMONSTER_EVENT_TIME> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXPAUXMASMONSTER_EVENT_TIME@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXPAUXMASMONSTER_EVENT_TIME@@0@Z PROC ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@@Z ; std::_Destroy_range<std::allocator<XMASMONSTER_EVENT_TIME> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXPAUXMASMONSTER_EVENT_TIME@@0@Z ENDP ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@I@Z ; std::allocator<XMASMONSTER_EVENT_TIME>::deallocate
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXXZ PROC ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXPAUXMASMONSTER_EVENT_TIME@@0@Z ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 03	 sar	 edx, 3
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@I@Z ; std::allocator<XMASMONSTER_EVENT_TIME>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@IAEXXZ ENDP ; std::vector<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@ABV01@@Z ; std::allocator<XMASMONSTER_EVENT_TIME>::allocator<XMASMONSTER_EVENT_TIME>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_EVENT_TIME@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_EVENT_TIME@@@1@@Z PROC ; std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@ABV01@@Z ; std::allocator<XMASMONSTER_EVENT_TIME>::allocator<XMASMONSTER_EVENT_TIME>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_EVENT_TIME@@@1@@Z ENDP ; std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >::~_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@XZ PROC ; std::allocator<XMASMONSTER_EVENT_TIME>::allocator<XMASMONSTER_EVENT_TIME>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@XZ ENDP ; std::allocator<XMASMONSTER_EVENT_TIME>::allocator<XMASMONSTER_EVENT_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<XMASMONSTER_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXPAUXMASMONSTER_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXPAUXMASMONSTER_DATA@@0@Z PROC ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<XMASMONSTER_DATA> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXPAUXMASMONSTER_DATA@@0@Z ENDP ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@I@Z ; std::allocator<XMASMONSTER_DATA>::deallocate
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 42		 je	 SHORT $LN1@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXPAUXMASMONSTER_DATA@@0@Z ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0003c	99		 cdq
  0003d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00042	f7 f9		 idiv	 ecx
  00044	50		 push	 eax
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@I@Z ; std::allocator<XMASMONSTER_DATA>::deallocate
$LN1@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Tidy@?$vector@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<XMASMONSTER_DATA>::allocator<XMASMONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_DATA@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_DATA@@@1@@Z PROC ; std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<XMASMONSTER_DATA>::allocator<XMASMONSTER_DATA>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UXMASMONSTER_DATA@@@1@@Z ENDP ; std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >::~_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@XZ PROC	; std::allocator<XMASMONSTER_DATA>::allocator<XMASMONSTER_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@XZ ENDP	; std::allocator<XMASMONSTER_DATA>::allocator<XMASMONSTER_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ; std::allocator<CXMasMonsterHerd *>::deallocate
PUBLIC	?_Destroy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXPAPAVCXMasMonsterHerd@@0@Z ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXXZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXPAPAVCXMasMonsterHerd@@0@Z ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 02	 sar	 edx, 2
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ; std::allocator<CXMasMonsterHerd *>::deallocate
$LN1@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXXZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@ABV01@@Z ; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@V?$allocator@PAVCXMasMonsterHerd@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@V?$allocator@PAVCXMasMonsterHerd@@@1@@Z PROC ; std::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@ABV01@@Z ; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@V?$allocator@PAVCXMasMonsterHerd@@@1@@Z ENDP ; std::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~_Vector_val<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@XZ PROC	; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@XZ ENDP	; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::operator!=
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@ABV01@@Z PROC ; std::allocator<XMASMONSTER_EVENT_TIME>::allocator<XMASMONSTER_EVENT_TIME>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<XMASMONSTER_EVENT_TIME>::allocator<XMASMONSTER_EVENT_TIME>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@I@Z PROC ; std::allocator<XMASMONSTER_EVENT_TIME>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@I@Z ENDP ; std::allocator<XMASMONSTER_EVENT_TIME>::deallocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<XMASMONSTER_DATA>::allocator<XMASMONSTER_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UXMASMONSTER_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<XMASMONSTER_DATA>::allocator<XMASMONSTER_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@I@Z PROC ; std::allocator<XMASMONSTER_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@I@Z ENDP ; std::allocator<XMASMONSTER_DATA>::deallocate
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@@Z ; std::_Destroy_range<std::allocator<CXMasMonsterHerd *> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXPAPAVCXMasMonsterHerd@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXPAPAVCXMasMonsterHerd@@0@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@@Z ; std::_Destroy_range<std::allocator<CXMasMonsterHerd *> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXPAPAVCXMasMonsterHerd@@0@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z PROC ; std::allocator<CXMasMonsterHerd *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ENDP ; std::allocator<CXMasMonsterHerd *>::deallocate
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_DATA@@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_DATA,std::allocator<XMASMONSTER_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UXMASMONSTER_EVENT_TIME@@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<XMASMONSTER_EVENT_TIME,std::allocator<XMASMONSTER_EVENT_TIME> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<XMASMONSTER_EVENT_TIME *,XMASMONSTER_EVENT_TIME *>
PUBLIC	??$_Ptr_cat@UXMASMONSTER_EVENT_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_EVENT_TIME@@0@Z ; std::_Ptr_cat<XMASMONSTER_EVENT_TIME,XMASMONSTER_EVENT_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00@Z
_TEXT	SEGMENT
$T222687 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00@Z PROC ; std::_Move<XMASMONSTER_EVENT_TIME *,XMASMONSTER_EVENT_TIME *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UXMASMONSTER_EVENT_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_EVENT_TIME@@0@Z ; std::_Ptr_cat<XMASMONSTER_EVENT_TIME,XMASMONSTER_EVENT_TIME>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T222687[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T222687[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<XMASMONSTER_EVENT_TIME *,XMASMONSTER_EVENT_TIME *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00@Z ENDP ; std::_Move<XMASMONSTER_EVENT_TIME *,XMASMONSTER_EVENT_TIME *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<XMASMONSTER_DATA *,XMASMONSTER_DATA *>
PUBLIC	??$_Ptr_cat@UXMASMONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_DATA@@0@Z ; std::_Ptr_cat<XMASMONSTER_DATA,XMASMONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00@Z
_TEXT	SEGMENT
$T222690 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00@Z PROC ; std::_Move<XMASMONSTER_DATA *,XMASMONSTER_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UXMASMONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_DATA@@0@Z ; std::_Ptr_cat<XMASMONSTER_DATA,XMASMONSTER_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T222690[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T222690[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<XMASMONSTER_DATA *,XMASMONSTER_DATA *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00@Z ENDP ; std::_Move<XMASMONSTER_DATA *,XMASMONSTER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<XMASMONSTER_EVENT_TIME> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@@Z
_TEXT	SEGMENT
$T222693 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@@Z PROC ; std::_Destroy_range<std::allocator<XMASMONSTER_EVENT_TIME> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UXMASMONSTER_EVENT_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_EVENT_TIME@@0@Z ; std::_Ptr_cat<XMASMONSTER_EVENT_TIME,XMASMONSTER_EVENT_TIME>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T222693[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T222693[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<XMASMONSTER_EVENT_TIME> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<XMASMONSTER_EVENT_TIME> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<XMASMONSTER_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@@Z
_TEXT	SEGMENT
$T222696 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<XMASMONSTER_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UXMASMONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_DATA@@0@Z ; std::_Ptr_cat<XMASMONSTER_DATA,XMASMONSTER_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T222696[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T222696[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<XMASMONSTER_DATA> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<XMASMONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CXMasMonsterHerd *> >
PUBLIC	??$_Ptr_cat@PAVCXMasMonsterHerd@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCXMasMonsterHerd@@0@Z ; std::_Ptr_cat<CXMasMonsterHerd *,CXMasMonsterHerd *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@@Z
_TEXT	SEGMENT
$T222699 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CXMasMonsterHerd *> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@PAVCXMasMonsterHerd@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCXMasMonsterHerd@@0@Z ; std::_Ptr_cat<CXMasMonsterHerd *,CXMasMonsterHerd *>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T222699[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T222699[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CXMasMonsterHerd *> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CXMasMonsterHerd *> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UXMASMONSTER_EVENT_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_EVENT_TIME@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UXMASMONSTER_EVENT_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_EVENT_TIME@@0@Z PROC ; std::_Ptr_cat<XMASMONSTER_EVENT_TIME,XMASMONSTER_EVENT_TIME>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UXMASMONSTER_EVENT_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_EVENT_TIME@@0@Z ENDP ; std::_Ptr_cat<XMASMONSTER_EVENT_TIME,XMASMONSTER_EVENT_TIME>
_TEXT	ENDS
PUBLIC	??$move@AAUXMASMONSTER_EVENT_TIME@@@std@@YA$$QAUXMASMONSTER_EVENT_TIME@@AAU1@@Z ; std::move<XMASMONSTER_EVENT_TIME &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<XMASMONSTER_EVENT_TIME *,XMASMONSTER_EVENT_TIME *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 08	 add	 eax, 8
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 08	 add	 ecx, 8
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 1b		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUXMASMONSTER_EVENT_TIME@@@std@@YA$$QAUXMASMONSTER_EVENT_TIME@@AAU1@@Z ; std::move<XMASMONSTER_EVENT_TIME &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00036	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00039	89 08		 mov	 DWORD PTR [eax], ecx
  0003b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003e	eb cb		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  00040	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Move@PAUXMASMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUXMASMONSTER_EVENT_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<XMASMONSTER_EVENT_TIME *,XMASMONSTER_EVENT_TIME *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UXMASMONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UXMASMONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_DATA@@0@Z PROC ; std::_Ptr_cat<XMASMONSTER_DATA,XMASMONSTER_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UXMASMONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_DATA@@0@Z ENDP ; std::_Ptr_cat<XMASMONSTER_DATA,XMASMONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$move@AAUXMASMONSTER_DATA@@@std@@YA$$QAUXMASMONSTER_DATA@@AAU1@@Z ; std::move<XMASMONSTER_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<XMASMONSTER_DATA *,XMASMONSTER_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move@2
$LN2@Move@2:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move@2:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 21		 je	 SHORT $LN1@Move@2

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUXMASMONSTER_DATA@@@std@@YA$$QAUXMASMONSTER_DATA@@AAU1@@Z ; std::move<XMASMONSTER_DATA &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0003e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00041	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00044	eb c5		 jmp	 SHORT $LN2@Move@2
$LN1@Move@2:

; 2515 : 	return (_Dest);

  00046	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??$_Move@PAUXMASMONSTER_DATA@@PAU1@@std@@YAPAUXMASMONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<XMASMONSTER_DATA *,XMASMONSTER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@UXMASMONSTER_EVENT_TIME@@@std@@YAXAAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@PAUXMASMONSTER_EVENT_TIME@@@Z ; std::_Dest_val<std::allocator<XMASMONSTER_EVENT_TIME>,XMASMONSTER_EVENT_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<XMASMONSTER_EVENT_TIME> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 08	 add	 eax, 8
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@UXMASMONSTER_EVENT_TIME@@@std@@YAXAAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@PAUXMASMONSTER_EVENT_TIME@@@Z ; std::_Dest_val<std::allocator<XMASMONSTER_EVENT_TIME>,XMASMONSTER_EVENT_TIME>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@0AAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<XMASMONSTER_EVENT_TIME> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UXMASMONSTER_DATA@@@std@@UXMASMONSTER_DATA@@@std@@YAXAAV?$allocator@UXMASMONSTER_DATA@@@0@PAUXMASMONSTER_DATA@@@Z ; std::_Dest_val<std::allocator<XMASMONSTER_DATA>,XMASMONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<XMASMONSTER_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra@2

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UXMASMONSTER_DATA@@@std@@UXMASMONSTER_DATA@@@std@@YAXAAV?$allocator@UXMASMONSTER_DATA@@@0@PAUXMASMONSTER_DATA@@@Z ; std::_Dest_val<std::allocator<XMASMONSTER_DATA>,XMASMONSTER_DATA>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UXMASMONSTER_DATA@@@std@@@std@@YAXPAUXMASMONSTER_DATA@@0AAV?$allocator@UXMASMONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<XMASMONSTER_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAVCXMasMonsterHerd@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCXMasMonsterHerd@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCXMasMonsterHerd@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCXMasMonsterHerd@@0@Z PROC ; std::_Ptr_cat<CXMasMonsterHerd *,CXMasMonsterHerd *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@PAVCXMasMonsterHerd@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCXMasMonsterHerd@@0@Z ENDP ; std::_Ptr_cat<CXMasMonsterHerd *,CXMasMonsterHerd *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CXMasMonsterHerd *> >, COMDAT

; 104  : 	{	// destroy [_First, _Last), scalar type (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 105  : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAV?$allocator@PAVCXMasMonsterHerd@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CXMasMonsterHerd *> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$move@AAUXMASMONSTER_EVENT_TIME@@@std@@YA$$QAUXMASMONSTER_EVENT_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUXMASMONSTER_EVENT_TIME@@@std@@YA$$QAUXMASMONSTER_EVENT_TIME@@AAU1@@Z PROC ; std::move<XMASMONSTER_EVENT_TIME &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUXMASMONSTER_EVENT_TIME@@@std@@YA$$QAUXMASMONSTER_EVENT_TIME@@AAU1@@Z ENDP ; std::move<XMASMONSTER_EVENT_TIME &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$move@AAUXMASMONSTER_DATA@@@std@@YA$$QAUXMASMONSTER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUXMASMONSTER_DATA@@@std@@YA$$QAUXMASMONSTER_DATA@@AAU1@@Z PROC ; std::move<XMASMONSTER_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUXMASMONSTER_DATA@@@std@@YA$$QAUXMASMONSTER_DATA@@AAU1@@Z ENDP ; std::move<XMASMONSTER_DATA &>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@@Z ; std::allocator<XMASMONSTER_EVENT_TIME>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@UXMASMONSTER_EVENT_TIME@@@std@@YAXAAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@PAUXMASMONSTER_EVENT_TIME@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@UXMASMONSTER_EVENT_TIME@@@std@@YAXAAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@PAUXMASMONSTER_EVENT_TIME@@@Z PROC ; std::_Dest_val<std::allocator<XMASMONSTER_EVENT_TIME>,XMASMONSTER_EVENT_TIME>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@@Z ; std::allocator<XMASMONSTER_EVENT_TIME>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@UXMASMONSTER_EVENT_TIME@@@std@@YAXAAV?$allocator@UXMASMONSTER_EVENT_TIME@@@0@PAUXMASMONSTER_EVENT_TIME@@@Z ENDP ; std::_Dest_val<std::allocator<XMASMONSTER_EVENT_TIME>,XMASMONSTER_EVENT_TIME>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@@Z ; std::allocator<XMASMONSTER_DATA>::destroy
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Dest_val@V?$allocator@UXMASMONSTER_DATA@@@std@@UXMASMONSTER_DATA@@@std@@YAXAAV?$allocator@UXMASMONSTER_DATA@@@0@PAUXMASMONSTER_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UXMASMONSTER_DATA@@@std@@UXMASMONSTER_DATA@@@std@@YAXAAV?$allocator@UXMASMONSTER_DATA@@@0@PAUXMASMONSTER_DATA@@@Z PROC ; std::_Dest_val<std::allocator<XMASMONSTER_DATA>,XMASMONSTER_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@@Z ; std::allocator<XMASMONSTER_DATA>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UXMASMONSTER_DATA@@@std@@UXMASMONSTER_DATA@@@std@@YAXAAV?$allocator@UXMASMONSTER_DATA@@@0@PAUXMASMONSTER_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<XMASMONSTER_DATA>,XMASMONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy@UXMASMONSTER_EVENT_TIME@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@@Z ; std::_Destroy<XMASMONSTER_EVENT_TIME>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@@Z PROC ; std::allocator<XMASMONSTER_EVENT_TIME>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UXMASMONSTER_EVENT_TIME@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@@Z ; std::_Destroy<XMASMONSTER_EVENT_TIME>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UXMASMONSTER_EVENT_TIME@@@std@@QAEXPAUXMASMONSTER_EVENT_TIME@@@Z ENDP ; std::allocator<XMASMONSTER_EVENT_TIME>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UXMASMONSTER_DATA@@@std@@YAXPAUXMASMONSTER_DATA@@@Z ; std::_Destroy<XMASMONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@@Z PROC ; std::allocator<XMASMONSTER_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UXMASMONSTER_DATA@@@std@@YAXPAUXMASMONSTER_DATA@@@Z ; std::_Destroy<XMASMONSTER_DATA>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UXMASMONSTER_DATA@@@std@@QAEXPAUXMASMONSTER_DATA@@@Z ENDP ; std::allocator<XMASMONSTER_DATA>::destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UXMASMONSTER_EVENT_TIME@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UXMASMONSTER_EVENT_TIME@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@@Z PROC ; std::_Destroy<XMASMONSTER_EVENT_TIME>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UXMASMONSTER_EVENT_TIME@@@std@@YAXPAUXMASMONSTER_EVENT_TIME@@@Z ENDP ; std::_Destroy<XMASMONSTER_EVENT_TIME>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UXMASMONSTER_DATA@@@std@@YAXPAUXMASMONSTER_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UXMASMONSTER_DATA@@@std@@YAXPAUXMASMONSTER_DATA@@@Z PROC ; std::_Destroy<XMASMONSTER_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UXMASMONSTER_DATA@@@std@@YAXPAUXMASMONSTER_DATA@@@Z ENDP ; std::_Destroy<XMASMONSTER_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
END
