; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\CrywolfSync.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CCrywolfSync@@6B@				; CCrywolfSync::`vftable'
PUBLIC	??0CCrywolfSync@@QAE@XZ				; CCrywolfSync::CCrywolfSync
PUBLIC	??_R4CCrywolfSync@@6B@				; CCrywolfSync::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCrywolfSync@@@8			; CCrywolfSync `RTTI Type Descriptor'
PUBLIC	??_R3CCrywolfSync@@8				; CCrywolfSync::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCrywolfSync@@8				; CCrywolfSync::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCrywolfSync@@8			; CCrywolfSync::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCrywolfSync@@UAEPAXI@Z:PROC		; CCrywolfSync::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCrywolfSync@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolfsync.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCrywolfSync@@8 DD FLAT:??_R0?AVCCrywolfSync@@@8 ; CCrywolfSync::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCrywolfSync@@8
rdata$r	ENDS
;	COMDAT ??_R2CCrywolfSync@@8
rdata$r	SEGMENT
??_R2CCrywolfSync@@8 DD FLAT:??_R1A@?0A@EA@CCrywolfSync@@8 ; CCrywolfSync::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCrywolfSync@@8
rdata$r	SEGMENT
??_R3CCrywolfSync@@8 DD 00H				; CCrywolfSync::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCrywolfSync@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCrywolfSync@@@8
_DATA	SEGMENT
??_R0?AVCCrywolfSync@@@8 DD FLAT:??_7type_info@@6B@	; CCrywolfSync `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCrywolfSync@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCrywolfSync@@6B@
rdata$r	SEGMENT
??_R4CCrywolfSync@@6B@ DD 00H				; CCrywolfSync::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCrywolfSync@@@8
	DD	FLAT:??_R3CCrywolfSync@@8
rdata$r	ENDS
;	COMDAT ??_7CCrywolfSync@@6B@
CONST	SEGMENT
??_7CCrywolfSync@@6B@ DD FLAT:??_R4CCrywolfSync@@6B@	; CCrywolfSync::`vftable'
	DD	FLAT:??_ECCrywolfSync@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCrywolfSync@@QAE@XZ PROC				; CCrywolfSync::CCrywolfSync
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCrywolfSync@@6B@

; 14   : 	this->m_bCrywolfEnable = TRUE;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1

; 15   : 	this->m_bApplyBenefit = FALSE;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 16   : 	this->m_bApplyPenalty = FALSE;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 17   : 	this->m_iOccupationState = 1;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1

; 18   : 	this->m_iCrywolfState = 0;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 19   : 	this->m_iPlusChaosRate = 0;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 20   : 	this->m_iGemDropPenaltyRate = 100;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 40 1c 64 00
	00 00		 mov	 DWORD PTR [eax+28], 100	; 00000064H

; 21   : 	this->m_iGettingExpPenaltyRate = 100;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 40 20 64 00
	00 00		 mov	 DWORD PTR [eax+32], 100	; 00000064H

; 22   : 	this->m_iMinusMonHPBenefitRate = 100;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	c7 40 24 64 00
	00 00		 mov	 DWORD PTR [eax+36], 100	; 00000064H

; 23   : 	this->m_iKundunHPRefillState = 1;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1

; 24   : }

  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??0CCrywolfSync@@QAE@XZ ENDP				; CCrywolfSync::CCrywolfSync
_TEXT	ENDS
PUBLIC	??1CCrywolfSync@@UAE@XZ				; CCrywolfSync::~CCrywolfSync
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCCrywolfSync@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCrywolfSync@@UAEPAXI@Z PROC			; CCrywolfSync::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CCrywolfSync@@UAE@XZ	; CCrywolfSync::~CCrywolfSync
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCCrywolfSync@@UAEPAXI@Z ENDP			; CCrywolfSync::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCrywolfSync@@UAE@XZ PROC				; CCrywolfSync::~CCrywolfSync
; _this$ = ecx

; 27   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 44	 sub	 esp, 68			; 00000044H
  00096	53		 push	 ebx
  00097	56		 push	 esi
  00098	57		 push	 edi
  00099	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCrywolfSync@@6B@

; 28   : 	return;
; 29   : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
??1CCrywolfSync@@UAE@XZ ENDP				; CCrywolfSync::~CCrywolfSync
_TEXT	ENDS
PUBLIC	?CheckEnableCrywolf@CCrywolfSync@@QAEHXZ	; CCrywolfSync::CheckEnableCrywolf
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckEnableCrywolf@CCrywolfSync@@QAEHXZ PROC		; CCrywolfSync::CheckEnableCrywolf
; _this$ = ecx

; 32   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	83 ec 44	 sub	 esp, 68			; 00000044H
  000b6	53		 push	 ebx
  000b7	56		 push	 esi
  000b8	57		 push	 edi
  000b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 	return this->m_bCrywolfEnable;

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 34   : }

  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
?CheckEnableCrywolf@CCrywolfSync@@QAEHXZ ENDP		; CCrywolfSync::CheckEnableCrywolf
_TEXT	ENDS
PUBLIC	?SetEnableCrywolf@CCrywolfSync@@QAEXH@Z		; CCrywolfSync::SetEnableCrywolf
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnable$ = 8						; size = 4
?SetEnableCrywolf@CCrywolfSync@@QAEXH@Z PROC		; CCrywolfSync::SetEnableCrywolf
; _this$ = ecx

; 37   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	83 ec 44	 sub	 esp, 68			; 00000044H
  000d6	53		 push	 ebx
  000d7	56		 push	 esi
  000d8	57		 push	 edi
  000d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	this->m_bCrywolfEnable = bEnable;

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _bEnable$[ebp]
  000e2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 39   : }

  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 04 00	 ret	 4
?SetEnableCrywolf@CCrywolfSync@@QAEXH@Z ENDP		; CCrywolfSync::SetEnableCrywolf
_TEXT	ENDS
PUBLIC	?GetOccupationState@CCrywolfSync@@QAEHXZ	; CCrywolfSync::GetOccupationState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOccupationState@CCrywolfSync@@QAEHXZ PROC		; CCrywolfSync::GetOccupationState
; _this$ = ecx

; 42   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	83 ec 44	 sub	 esp, 68			; 00000044H
  000f6	53		 push	 ebx
  000f7	56		 push	 esi
  000f8	57		 push	 edi
  000f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 	return this->m_iOccupationState;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 44   : }

  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
?GetOccupationState@CCrywolfSync@@QAEHXZ ENDP		; CCrywolfSync::GetOccupationState
_TEXT	ENDS
PUBLIC	?GetCrywolfState@CCrywolfSync@@QAEHXZ		; CCrywolfSync::GetCrywolfState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCrywolfState@CCrywolfSync@@QAEHXZ PROC		; CCrywolfSync::GetCrywolfState
; _this$ = ecx

; 47   : {

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	83 ec 44	 sub	 esp, 68			; 00000044H
  00116	53		 push	 ebx
  00117	56		 push	 esi
  00118	57		 push	 edi
  00119	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 	return this->m_iCrywolfState;

  0011c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 49   : }

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
?GetCrywolfState@CCrywolfSync@@QAEHXZ ENDP		; CCrywolfSync::GetCrywolfState
_TEXT	ENDS
PUBLIC	?SetOccupationState@CCrywolfSync@@QAEXH@Z	; CCrywolfSync::SetOccupationState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iOccupationState$ = 8					; size = 4
?SetOccupationState@CCrywolfSync@@QAEXH@Z PROC		; CCrywolfSync::SetOccupationState
; _this$ = ecx

; 52   : {

  00130	55		 push	 ebp
  00131	8b ec		 mov	 ebp, esp
  00133	83 ec 44	 sub	 esp, 68			; 00000044H
  00136	53		 push	 ebx
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : 	this->m_iOccupationState = iOccupationState;

  0013c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _iOccupationState$[ebp]
  00142	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 54   : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 04 00	 ret	 4
?SetOccupationState@CCrywolfSync@@QAEXH@Z ENDP		; CCrywolfSync::SetOccupationState
_TEXT	ENDS
PUBLIC	?SetCrywolfState@CCrywolfSync@@QAEXH@Z		; CCrywolfSync::SetCrywolfState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iCrywolfState$ = 8					; size = 4
?SetCrywolfState@CCrywolfSync@@QAEXH@Z PROC		; CCrywolfSync::SetCrywolfState
; _this$ = ecx

; 57   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	83 ec 44	 sub	 esp, 68			; 00000044H
  00156	53		 push	 ebx
  00157	56		 push	 esi
  00158	57		 push	 edi
  00159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 	this->m_iCrywolfState = iCrywolfState;

  0015c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	8b 4d 08	 mov	 ecx, DWORD PTR _iCrywolfState$[ebp]
  00162	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 59   : }

  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 04 00	 ret	 4
?SetCrywolfState@CCrywolfSync@@QAEXH@Z ENDP		; CCrywolfSync::SetCrywolfState
_TEXT	ENDS
PUBLIC	?GetPlusChaosRate@CCrywolfSync@@QAEHXZ		; CCrywolfSync::GetPlusChaosRate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlusChaosRate@CCrywolfSync@@QAEHXZ PROC		; CCrywolfSync::GetPlusChaosRate
; _this$ = ecx

; 62   : {

  00170	55		 push	 ebp
  00171	8b ec		 mov	 ebp, esp
  00173	83 ec 44	 sub	 esp, 68			; 00000044H
  00176	53		 push	 ebx
  00177	56		 push	 esi
  00178	57		 push	 edi
  00179	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 	return this->m_iPlusChaosRate;

  0017c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 64   : }

  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5b		 pop	 ebx
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
?GetPlusChaosRate@CCrywolfSync@@QAEHXZ ENDP		; CCrywolfSync::GetPlusChaosRate
_TEXT	ENDS
PUBLIC	?SetPlusChaosRate@CCrywolfSync@@QAEXH@Z		; CCrywolfSync::SetPlusChaosRate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iPlusChaosRate$ = 8					; size = 4
?SetPlusChaosRate@CCrywolfSync@@QAEXH@Z PROC		; CCrywolfSync::SetPlusChaosRate
; _this$ = ecx

; 67   : {

  00190	55		 push	 ebp
  00191	8b ec		 mov	 ebp, esp
  00193	83 ec 44	 sub	 esp, 68			; 00000044H
  00196	53		 push	 ebx
  00197	56		 push	 esi
  00198	57		 push	 edi
  00199	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 	this->m_iPlusChaosRate = iPlusChaosRate;

  0019c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019f	8b 4d 08	 mov	 ecx, DWORD PTR _iPlusChaosRate$[ebp]
  001a2	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 69   : }

  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	5b		 pop	 ebx
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c2 04 00	 ret	 4
?SetPlusChaosRate@CCrywolfSync@@QAEXH@Z ENDP		; CCrywolfSync::SetPlusChaosRate
_TEXT	ENDS
PUBLIC	?GetGemDropPenaltiyRate@CCrywolfSync@@QAEHXZ	; CCrywolfSync::GetGemDropPenaltiyRate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGemDropPenaltiyRate@CCrywolfSync@@QAEHXZ PROC	; CCrywolfSync::GetGemDropPenaltiyRate
; _this$ = ecx

; 72   : {

  001b0	55		 push	 ebp
  001b1	8b ec		 mov	 ebp, esp
  001b3	83 ec 44	 sub	 esp, 68			; 00000044H
  001b6	53		 push	 ebx
  001b7	56		 push	 esi
  001b8	57		 push	 edi
  001b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 73   : 	return this->m_iGemDropPenaltyRate;

  001bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001bf	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]

; 74   : }

  001c2	5f		 pop	 edi
  001c3	5e		 pop	 esi
  001c4	5b		 pop	 ebx
  001c5	8b e5		 mov	 esp, ebp
  001c7	5d		 pop	 ebp
  001c8	c3		 ret	 0
?GetGemDropPenaltiyRate@CCrywolfSync@@QAEHXZ ENDP	; CCrywolfSync::GetGemDropPenaltiyRate
_TEXT	ENDS
PUBLIC	?SetGemDropPenaltiyRate@CCrywolfSync@@QAEXH@Z	; CCrywolfSync::SetGemDropPenaltiyRate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iGemDropPenaltyRate$ = 8				; size = 4
?SetGemDropPenaltiyRate@CCrywolfSync@@QAEXH@Z PROC	; CCrywolfSync::SetGemDropPenaltiyRate
; _this$ = ecx

; 77   : {

  001d0	55		 push	 ebp
  001d1	8b ec		 mov	 ebp, esp
  001d3	83 ec 44	 sub	 esp, 68			; 00000044H
  001d6	53		 push	 ebx
  001d7	56		 push	 esi
  001d8	57		 push	 edi
  001d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 	this->m_iGemDropPenaltyRate = iGemDropPenaltyRate;

  001dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001df	8b 4d 08	 mov	 ecx, DWORD PTR _iGemDropPenaltyRate$[ebp]
  001e2	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 79   : }

  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 04 00	 ret	 4
?SetGemDropPenaltiyRate@CCrywolfSync@@QAEXH@Z ENDP	; CCrywolfSync::SetGemDropPenaltiyRate
_TEXT	ENDS
PUBLIC	?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ	; CCrywolfSync::GetGettingExpPenaltyRate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ PROC	; CCrywolfSync::GetGettingExpPenaltyRate
; _this$ = ecx

; 82   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	83 ec 44	 sub	 esp, 68			; 00000044H
  001f6	53		 push	 ebx
  001f7	56		 push	 esi
  001f8	57		 push	 edi
  001f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	return this->m_iGettingExpPenaltyRate;

  001fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ff	8b 40 20	 mov	 eax, DWORD PTR [eax+32]

; 84   : }

  00202	5f		 pop	 edi
  00203	5e		 pop	 esi
  00204	5b		 pop	 ebx
  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c3		 ret	 0
?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ ENDP	; CCrywolfSync::GetGettingExpPenaltyRate
_TEXT	ENDS
PUBLIC	?SetGettingExpPenaltyRate@CCrywolfSync@@QAEXH@Z	; CCrywolfSync::SetGettingExpPenaltyRate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iGettingExpPenaltyRate$ = 8				; size = 4
?SetGettingExpPenaltyRate@CCrywolfSync@@QAEXH@Z PROC	; CCrywolfSync::SetGettingExpPenaltyRate
; _this$ = ecx

; 87   : {

  00210	55		 push	 ebp
  00211	8b ec		 mov	 ebp, esp
  00213	83 ec 44	 sub	 esp, 68			; 00000044H
  00216	53		 push	 ebx
  00217	56		 push	 esi
  00218	57		 push	 edi
  00219	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 88   : 	this->m_iGettingExpPenaltyRate = iGettingExpPenaltyRate;

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0021f	8b 4d 08	 mov	 ecx, DWORD PTR _iGettingExpPenaltyRate$[ebp]
  00222	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 89   : }

  00225	5f		 pop	 edi
  00226	5e		 pop	 esi
  00227	5b		 pop	 ebx
  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c2 04 00	 ret	 4
?SetGettingExpPenaltyRate@CCrywolfSync@@QAEXH@Z ENDP	; CCrywolfSync::SetGettingExpPenaltyRate
_TEXT	ENDS
PUBLIC	?GetMonHPBenefitRate@CCrywolfSync@@QAEHXZ	; CCrywolfSync::GetMonHPBenefitRate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMonHPBenefitRate@CCrywolfSync@@QAEHXZ PROC		; CCrywolfSync::GetMonHPBenefitRate
; _this$ = ecx

; 92   : {

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	83 ec 44	 sub	 esp, 68			; 00000044H
  00236	53		 push	 ebx
  00237	56		 push	 esi
  00238	57		 push	 edi
  00239	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 	return this->m_iMinusMonHPBenefitRate;

  0023c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0023f	8b 40 24	 mov	 eax, DWORD PTR [eax+36]

; 94   : }

  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c3		 ret	 0
?GetMonHPBenefitRate@CCrywolfSync@@QAEHXZ ENDP		; CCrywolfSync::GetMonHPBenefitRate
_TEXT	ENDS
PUBLIC	?SetMonHPBenefitRate@CCrywolfSync@@QAEXH@Z	; CCrywolfSync::SetMonHPBenefitRate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMinusMonHPBenefitRate$ = 8				; size = 4
?SetMonHPBenefitRate@CCrywolfSync@@QAEXH@Z PROC		; CCrywolfSync::SetMonHPBenefitRate
; _this$ = ecx

; 97   : {

  00250	55		 push	 ebp
  00251	8b ec		 mov	 ebp, esp
  00253	83 ec 44	 sub	 esp, 68			; 00000044H
  00256	53		 push	 ebx
  00257	56		 push	 esi
  00258	57		 push	 edi
  00259	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 	this->m_iMinusMonHPBenefitRate = iMinusMonHPBenefitRate;

  0025c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025f	8b 4d 08	 mov	 ecx, DWORD PTR _iMinusMonHPBenefitRate$[ebp]
  00262	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 99   : }

  00265	5f		 pop	 edi
  00266	5e		 pop	 esi
  00267	5b		 pop	 ebx
  00268	8b e5		 mov	 esp, ebp
  0026a	5d		 pop	 ebp
  0026b	c2 04 00	 ret	 4
?SetMonHPBenefitRate@CCrywolfSync@@QAEXH@Z ENDP		; CCrywolfSync::SetMonHPBenefitRate
_TEXT	ENDS
PUBLIC	?GetKundunHPRefillState@CCrywolfSync@@QAEHXZ	; CCrywolfSync::GetKundunHPRefillState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetKundunHPRefillState@CCrywolfSync@@QAEHXZ PROC	; CCrywolfSync::GetKundunHPRefillState
; _this$ = ecx

; 102  : {

  00270	55		 push	 ebp
  00271	8b ec		 mov	 ebp, esp
  00273	83 ec 44	 sub	 esp, 68			; 00000044H
  00276	53		 push	 ebx
  00277	56		 push	 esi
  00278	57		 push	 edi
  00279	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 	return this->m_iKundunHPRefillState;

  0027c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0027f	8b 40 28	 mov	 eax, DWORD PTR [eax+40]

; 104  : }

  00282	5f		 pop	 edi
  00283	5e		 pop	 esi
  00284	5b		 pop	 ebx
  00285	8b e5		 mov	 esp, ebp
  00287	5d		 pop	 ebp
  00288	c3		 ret	 0
?GetKundunHPRefillState@CCrywolfSync@@QAEHXZ ENDP	; CCrywolfSync::GetKundunHPRefillState
_TEXT	ENDS
PUBLIC	?SetKundunHPRefillState@CCrywolfSync@@QAEXH@Z	; CCrywolfSync::SetKundunHPRefillState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iKundunHPRefillState$ = 8				; size = 4
?SetKundunHPRefillState@CCrywolfSync@@QAEXH@Z PROC	; CCrywolfSync::SetKundunHPRefillState
; _this$ = ecx

; 107  : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	83 ec 44	 sub	 esp, 68			; 00000044H
  00296	53		 push	 ebx
  00297	56		 push	 esi
  00298	57		 push	 edi
  00299	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 108  : 	this->m_iKundunHPRefillState = iKundunHPRefillState;

  0029c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0029f	8b 4d 08	 mov	 ecx, DWORD PTR _iKundunHPRefillState$[ebp]
  002a2	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 109  : }

  002a5	5f		 pop	 edi
  002a6	5e		 pop	 esi
  002a7	5b		 pop	 ebx
  002a8	8b e5		 mov	 esp, ebp
  002aa	5d		 pop	 ebp
  002ab	c2 04 00	 ret	 4
?SetKundunHPRefillState@CCrywolfSync@@QAEXH@Z ENDP	; CCrywolfSync::SetKundunHPRefillState
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_CrywolfSync@@YAXXZ
text$yc	SEGMENT
??__Eg_CrywolfSync@@YAXXZ PROC				; `dynamic initializer for 'g_CrywolfSync'', COMDAT

; 7    : CCrywolfSync g_CrywolfSync;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0000e	e8 00 00 00 00	 call	 ??0CCrywolfSync@@QAE@XZ	; CCrywolfSync::CCrywolfSync
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_CrywolfSync@@YAXXZ ; `dynamic atexit destructor for 'g_CrywolfSync''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_CrywolfSync@@YAXXZ ENDP				; `dynamic initializer for 'g_CrywolfSync''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_CrywolfSync@@YAXXZ
text$yd	SEGMENT
??__Fg_CrywolfSync@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CrywolfSync'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0000e	e8 00 00 00 00	 call	 ??1CCrywolfSync@@UAE@XZ	; CCrywolfSync::~CCrywolfSync
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_CrywolfSync@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CrywolfSync''
text$yd	ENDS
PUBLIC	?g_CrywolfSync@@3VCCrywolfSync@@A		; g_CrywolfSync
_BSS	SEGMENT
?g_CrywolfSync@@3VCCrywolfSync@@A DB 02cH DUP (?)	; g_CrywolfSync
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CrywolfSync$initializer$ DD FLAT:??__Eg_CrywolfSync@@YAXXZ
CRT$XCU	ENDS
END
