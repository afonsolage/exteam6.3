; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\TMonsterAIRuleInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Reset@TMonsterAIRuleInfo@@QAEXXZ		; TMonsterAIRuleInfo::Reset
PUBLIC	??0TMonsterAIRuleInfo@@QAE@XZ			; TMonsterAIRuleInfo::TMonsterAIRuleInfo
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\tmonsterairuleinfo.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TMonsterAIRuleInfo@@QAE@XZ PROC			; TMonsterAIRuleInfo::TMonsterAIRuleInfo
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 15   : 	this->Reset();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Reset@TMonsterAIRuleInfo@@QAEXXZ ; TMonsterAIRuleInfo::Reset

; 16   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0TMonsterAIRuleInfo@@QAE@XZ ENDP			; TMonsterAIRuleInfo::TMonsterAIRuleInfo
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@TMonsterAIRuleInfo@@QAEXXZ PROC			; TMonsterAIRuleInfo::Reset
; _this$ = ecx

; 20   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	this->m_iRuleNumber = -1;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 22   : 	this->m_iMonsterClass = -1;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 23   : 	this->m_iMonsterAIUnit = 0;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 24   : 	this->m_iRuleCondition = -1;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 25   : 	this->m_iWaitTime = -1;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1

; 26   : 	this->m_iContinuanceTime = -1;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c7 40 14 ff ff
	ff ff		 mov	 DWORD PTR [eax+20], -1

; 27   : 	this->m_iMonth = -1;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 18 ff ff
	ff ff		 mov	 DWORD PTR [eax+24], -1

; 28   : 	this->m_iDay = -1;

  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 29   : 	this->m_iWeekDay = -1;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1

; 30   : 	this->m_iHour = -1;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 40 24 ff ff
	ff ff		 mov	 DWORD PTR [eax+36], -1

; 31   : 	this->m_iMinute = -1;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	c7 40 28 ff ff
	ff ff		 mov	 DWORD PTR [eax+40], -1

; 32   : 	this->m_iAppliedTime = -1;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	c7 40 2c ff ff
	ff ff		 mov	 DWORD PTR [eax+44], -1

; 33   : 	this->m_iApplyingTime = -1;

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	c7 40 30 ff ff
	ff ff		 mov	 DWORD PTR [eax+48], -1

; 34   : 	memset(this->m_szRuleDesc, 0, sizeof(this->m_szRuleDesc));

  000ad	6a 64		 push	 100			; 00000064H
  000af	6a 00		 push	 0
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	83 c0 34	 add	 eax, 52			; 00000034H
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _memset
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 35   : }

  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
?Reset@TMonsterAIRuleInfo@@QAEXXZ ENDP			; TMonsterAIRuleInfo::Reset
_TEXT	ENDS
PUBLIC	?CheckConditionCrywolfEnd@TMonsterAIRuleInfo@@QAEHXZ ; TMonsterAIRuleInfo::CheckConditionCrywolfEnd
PUBLIC	?CheckConditionCrywolfStart@TMonsterAIRuleInfo@@QAEHXZ ; TMonsterAIRuleInfo::CheckConditionCrywolfStart
PUBLIC	?CheckConditionSpecificDate@TMonsterAIRuleInfo@@QAEHXZ ; TMonsterAIRuleInfo::CheckConditionSpecificDate
PUBLIC	?IsValid@TMonsterAIRuleInfo@@QAEHXZ		; TMonsterAIRuleInfo::IsValid
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv65 = -76						; size = 4
_bIsValid$ = -8						; size = 4
_this$ = -4						; size = 4
?IsValid@TMonsterAIRuleInfo@@QAEHXZ PROC		; TMonsterAIRuleInfo::IsValid
; _this$ = ecx

; 40   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  000d6	53		 push	 ebx
  000d7	56		 push	 esi
  000d8	57		 push	 edi
  000d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	BOOL bIsValid = FALSE;

  000dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bIsValid$[ebp], 0

; 42   : 
; 43   : 	switch ( this->m_iRuleCondition )

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000e9	89 4d b4	 mov	 DWORD PTR tv65[ebp], ecx
  000ec	83 7d b4 01	 cmp	 DWORD PTR tv65[ebp], 1
  000f0	74 0e		 je	 SHORT $LN7@IsValid
  000f2	83 7d b4 47	 cmp	 DWORD PTR tv65[ebp], 71	; 00000047H
  000f6	74 15		 je	 SHORT $LN6@IsValid
  000f8	83 7d b4 48	 cmp	 DWORD PTR tv65[ebp], 72	; 00000048H
  000fc	74 1c		 je	 SHORT $LN5@IsValid
  000fe	eb 25		 jmp	 SHORT $LN8@IsValid
$LN7@IsValid:

; 44   : 	{
; 45   : 		case MAR_CONDITION_SPECIFIC_DATE:
; 46   : 			bIsValid = this->CheckConditionSpecificDate();

  00100	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	e8 00 00 00 00	 call	 ?CheckConditionSpecificDate@TMonsterAIRuleInfo@@QAEHXZ ; TMonsterAIRuleInfo::CheckConditionSpecificDate
  00108	89 45 f8	 mov	 DWORD PTR _bIsValid$[ebp], eax

; 47   : 			break;

  0010b	eb 18		 jmp	 SHORT $LN8@IsValid
$LN6@IsValid:

; 48   : 
; 49   : 		case MAR_CONDITION_CRYWOLF_START:
; 50   : 			bIsValid = this->CheckConditionCrywolfStart();

  0010d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	e8 00 00 00 00	 call	 ?CheckConditionCrywolfStart@TMonsterAIRuleInfo@@QAEHXZ ; TMonsterAIRuleInfo::CheckConditionCrywolfStart
  00115	89 45 f8	 mov	 DWORD PTR _bIsValid$[ebp], eax

; 51   : 			break;

  00118	eb 0b		 jmp	 SHORT $LN8@IsValid
$LN5@IsValid:

; 52   : 
; 53   : 		case MAR_CONDITION_CRYWOLF_END:
; 54   : 			bIsValid = this->CheckConditionCrywolfEnd();

  0011a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	e8 00 00 00 00	 call	 ?CheckConditionCrywolfEnd@TMonsterAIRuleInfo@@QAEHXZ ; TMonsterAIRuleInfo::CheckConditionCrywolfEnd
  00122	89 45 f8	 mov	 DWORD PTR _bIsValid$[ebp], eax
$LN8@IsValid:

; 55   : 			break;
; 56   : 	}
; 57   : 
; 58   : 	if ( !bIsValid )

  00125	83 7d f8 00	 cmp	 DWORD PTR _bIsValid$[ebp], 0
  00129	75 18		 jne	 SHORT $LN4@IsValid

; 59   : 	{
; 60   : 		this->m_iAppliedTime = -1;

  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	c7 40 2c ff ff
	ff ff		 mov	 DWORD PTR [eax+44], -1

; 61   : 		this->m_iApplyingTime = -1;

  00135	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00138	c7 40 30 ff ff
	ff ff		 mov	 DWORD PTR [eax+48], -1

; 62   : 
; 63   : 		return FALSE;

  0013f	33 c0		 xor	 eax, eax
  00141	eb 6a		 jmp	 SHORT $LN10@IsValid
$LN4@IsValid:

; 64   : 	}
; 65   : 
; 66   : 	if ( this->m_iAppliedTime == -1 )

  00143	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00146	83 78 2c ff	 cmp	 DWORD PTR [eax+44], -1
  0014a	75 0c		 jne	 SHORT $LN3@IsValid

; 67   : 		this->m_iAppliedTime = GetTickCount();

  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00152	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00155	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
$LN3@IsValid:

; 68   : 
; 69   : 	if ( (this->m_iAppliedTime + (this->m_iWaitTime * 1000)) > GetTickCount() )

  00158	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  0015e	69 f6 e8 03 00
	00		 imul	 esi, 1000		; 000003e8H
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	03 71 2c	 add	 esi, DWORD PTR [ecx+44]
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00170	3b f0		 cmp	 esi, eax
  00172	76 04		 jbe	 SHORT $LN2@IsValid

; 70   : 		return FALSE;

  00174	33 c0		 xor	 eax, eax
  00176	eb 35		 jmp	 SHORT $LN10@IsValid
$LN2@IsValid:

; 71   : 
; 72   : 	if ( (  this->m_iAppliedTime + this->m_iWaitTime * 1000 + this->m_iContinuanceTime * 1000) < GetTickCount() )

  00178	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0017e	69 c9 e8 03 00
	00		 imul	 ecx, 1000		; 000003e8H
  00184	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00187	8b 72 2c	 mov	 esi, DWORD PTR [edx+44]
  0018a	03 f1		 add	 esi, ecx
  0018c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00192	69 c9 e8 03 00
	00		 imul	 ecx, 1000		; 000003e8H
  00198	03 f1		 add	 esi, ecx
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001a0	3b f0		 cmp	 esi, eax
  001a2	73 04		 jae	 SHORT $LN1@IsValid

; 73   : 		return FALSE;

  001a4	33 c0		 xor	 eax, eax
  001a6	eb 05		 jmp	 SHORT $LN10@IsValid
$LN1@IsValid:

; 74   : 
; 75   : 	return TRUE;

  001a8	b8 01 00 00 00	 mov	 eax, 1
$LN10@IsValid:

; 76   : }

  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	5b		 pop	 ebx
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
?IsValid@TMonsterAIRuleInfo@@QAEHXZ ENDP		; TMonsterAIRuleInfo::IsValid
_TEXT	ENDS
PUBLIC	??OCTime@ATL@@QBE_NV01@@Z			; ATL::CTime::operator>
PUBLIC	??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z		; ATL::CTime::operator+
PUBLIC	??MCTime@ATL@@QBE_NV01@@Z			; ATL::CTime::operator<
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
PUBLIC	?GetMinute@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMinute
PUBLIC	?GetHour@CTime@ATL@@QBEHXZ			; ATL::CTime::GetHour
PUBLIC	?GetDayOfWeek@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDayOfWeek
PUBLIC	?GetDay@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDay
PUBLIC	?GetMonth@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMonth
PUBLIC	?GetYear@CTime@ATL@@QBEHXZ			; ATL::CTime::GetYear
PUBLIC	??0CTimeSpan@ATL@@QAE@JHHH@Z			; ATL::CTimeSpan::CTimeSpan
PUBLIC	?GetTickCount@CTime@ATL@@SG?AV12@XZ		; ATL::CTime::GetTickCount
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv237 = -184						; size = 4
tv232 = -180						; size = 4
tv198 = -180						; size = 4
tv227 = -176						; size = 4
tv193 = -176						; size = 4
tv159 = -176						; size = 4
$T204515 = -172						; size = 8
$T204518 = -164						; size = 8
$T204523 = -156						; size = 8
$T204530 = -148						; size = 8
_tConditionTime$204479 = -76				; size = 8
_tConditionTime$204473 = -68				; size = 8
_tConditionTime$204465 = -60				; size = 8
_tConditionTime$204459 = -52				; size = 8
_iMinute$ = -44						; size = 4
_iHour$ = -40						; size = 4
_iDayOfWeek$ = -36					; size = 4
_iDay$ = -32						; size = 4
_iMonth$ = -28						; size = 4
_iYear$ = -24						; size = 4
_tValidRange$ = -20					; size = 8
_tCurrentTime$ = -12					; size = 8
_this$ = -4						; size = 4
?CheckConditionSpecificDate@TMonsterAIRuleInfo@@QAEHXZ PROC ; TMonsterAIRuleInfo::CheckConditionSpecificDate
; _this$ = ecx

; 81   : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  001c9	53		 push	 ebx
  001ca	56		 push	 esi
  001cb	57		 push	 edi
  001cc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	CTime tCurrentTime = CTime::GetTickCount();

  001cf	8d 45 f4	 lea	 eax, DWORD PTR _tCurrentTime$[ebp]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 83   : 	CTimeSpan tValidRange(0, 0, 0, this->m_iWaitTime+this->m_iContinuanceTime);

  001d8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001db	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001de	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e1	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  001e4	51		 push	 ecx
  001e5	6a 00		 push	 0
  001e7	6a 00		 push	 0
  001e9	6a 00		 push	 0
  001eb	8d 4d ec	 lea	 ecx, DWORD PTR _tValidRange$[ebp]
  001ee	e8 00 00 00 00	 call	 ??0CTimeSpan@ATL@@QAE@JHHH@Z ; ATL::CTimeSpan::CTimeSpan

; 84   : 
; 85   : 	int iYear = tCurrentTime.GetYear();

  001f3	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  001f6	e8 00 00 00 00	 call	 ?GetYear@CTime@ATL@@QBEHXZ ; ATL::CTime::GetYear
  001fb	89 45 e8	 mov	 DWORD PTR _iYear$[ebp], eax

; 86   : 	int iMonth = tCurrentTime.GetMonth();

  001fe	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00201	e8 00 00 00 00	 call	 ?GetMonth@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMonth
  00206	89 45 e4	 mov	 DWORD PTR _iMonth$[ebp], eax

; 87   : 	int iDay = tCurrentTime.GetDay();

  00209	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0020c	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  00211	89 45 e0	 mov	 DWORD PTR _iDay$[ebp], eax

; 88   : 	int iDayOfWeek = tCurrentTime.GetDayOfWeek();

  00214	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00217	e8 00 00 00 00	 call	 ?GetDayOfWeek@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDayOfWeek
  0021c	89 45 dc	 mov	 DWORD PTR _iDayOfWeek$[ebp], eax

; 89   : 	int iHour = tCurrentTime.GetHour();

  0021f	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00222	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00227	89 45 d8	 mov	 DWORD PTR _iHour$[ebp], eax

; 90   : 	int iMinute = tCurrentTime.GetMinute();

  0022a	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0022d	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  00232	89 45 d4	 mov	 DWORD PTR _iMinute$[ebp], eax

; 91   : 
; 92   : 	if ( this->m_iMonth != -1 )

  00235	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00238	83 78 18 ff	 cmp	 DWORD PTR [eax+24], -1
  0023c	74 73		 je	 SHORT $LN18@CheckCondi

; 93   : 	{
; 94   : 		if ( this->m_iMonth != iMonth )

  0023e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00241	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00244	3b 4d e4	 cmp	 ecx, DWORD PTR _iMonth$[ebp]
  00247	74 68		 je	 SHORT $LN18@CheckCondi

; 95   : 		{
; 96   : 			CTime tConditionTime(iYear, this->m_iMonth, 0, 0, 0, 0, -1) ;

  00249	6a ff		 push	 -1
  0024b	6a 00		 push	 0
  0024d	6a 00		 push	 0
  0024f	6a 00		 push	 0
  00251	6a 00		 push	 0
  00253	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00256	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00259	51		 push	 ecx
  0025a	8b 55 e8	 mov	 edx, DWORD PTR _iYear$[ebp]
  0025d	52		 push	 edx
  0025e	8d 4d cc	 lea	 ecx, DWORD PTR _tConditionTime$204459[ebp]
  00261	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 97   : 
; 98   : 			if ( tCurrentTime < tConditionTime  ||
; 99   : 				 tCurrentTime > tConditionTime+tValidRange )

  00266	8b 45 d0	 mov	 eax, DWORD PTR _tConditionTime$204459[ebp+4]
  00269	50		 push	 eax
  0026a	8b 4d cc	 mov	 ecx, DWORD PTR _tConditionTime$204459[ebp]
  0026d	51		 push	 ecx
  0026e	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00271	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  00276	0f b6 d0	 movzx	 edx, al
  00279	85 d2		 test	 edx, edx
  0027b	75 2d		 jne	 SHORT $LN15@CheckCondi
  0027d	8b 45 f0	 mov	 eax, DWORD PTR _tValidRange$[ebp+4]
  00280	50		 push	 eax
  00281	8b 4d ec	 mov	 ecx, DWORD PTR _tValidRange$[ebp]
  00284	51		 push	 ecx
  00285	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR $T204515[ebp]
  0028b	52		 push	 edx
  0028c	8d 4d cc	 lea	 ecx, DWORD PTR _tConditionTime$204459[ebp]
  0028f	e8 00 00 00 00	 call	 ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ; ATL::CTime::operator+
  00294	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00297	51		 push	 ecx
  00298	8b 10		 mov	 edx, DWORD PTR [eax]
  0029a	52		 push	 edx
  0029b	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0029e	e8 00 00 00 00	 call	 ??OCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>
  002a3	0f b6 c0	 movzx	 eax, al
  002a6	85 c0		 test	 eax, eax
  002a8	74 07		 je	 SHORT $LN18@CheckCondi
$LN15@CheckCondi:

; 100  : 			{
; 101  : 				return FALSE;

  002aa	33 c0		 xor	 eax, eax
  002ac	e9 87 02 00 00	 jmp	 $LN19@CheckCondi
$LN18@CheckCondi:

; 102  : 			}
; 103  : 		}
; 104  : 	}
; 105  : 
; 106  : 	if ( this->m_iDay != -1 )

  002b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b4	83 78 1c ff	 cmp	 DWORD PTR [eax+28], -1
  002b8	0f 84 9c 00 00
	00		 je	 $LN14@CheckCondi

; 107  : 	{
; 108  : 		if ( this->m_iDay != iDay )

  002be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c1	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002c4	3b 4d e0	 cmp	 ecx, DWORD PTR _iDay$[ebp]
  002c7	0f 84 8d 00 00
	00		 je	 $LN14@CheckCondi

; 109  : 		{
; 110  : 			CTime tConditionTime(iYear, (this->m_iMonth == -1)?iMonth : this->m_iMonth , this->m_iDay, 0, 0, 0, -1);

  002cd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d0	83 78 18 ff	 cmp	 DWORD PTR [eax+24], -1
  002d4	75 0b		 jne	 SHORT $LN21@CheckCondi
  002d6	8b 4d e4	 mov	 ecx, DWORD PTR _iMonth$[ebp]
  002d9	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv159[ebp], ecx
  002df	eb 0c		 jmp	 SHORT $LN22@CheckCondi
$LN21@CheckCondi:
  002e1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002e4	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  002e7	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv159[ebp], eax
$LN22@CheckCondi:
  002ed	6a ff		 push	 -1
  002ef	6a 00		 push	 0
  002f1	6a 00		 push	 0
  002f3	6a 00		 push	 0
  002f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f8	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  002fb	52		 push	 edx
  002fc	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv159[ebp]
  00302	50		 push	 eax
  00303	8b 4d e8	 mov	 ecx, DWORD PTR _iYear$[ebp]
  00306	51		 push	 ecx
  00307	8d 4d c4	 lea	 ecx, DWORD PTR _tConditionTime$204465[ebp]
  0030a	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 111  : 
; 112  : 			if ( tCurrentTime < tConditionTime  ||
; 113  : 				 tCurrentTime > tConditionTime+tValidRange )

  0030f	8b 45 c8	 mov	 eax, DWORD PTR _tConditionTime$204465[ebp+4]
  00312	50		 push	 eax
  00313	8b 4d c4	 mov	 ecx, DWORD PTR _tConditionTime$204465[ebp]
  00316	51		 push	 ecx
  00317	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0031a	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  0031f	0f b6 d0	 movzx	 edx, al
  00322	85 d2		 test	 edx, edx
  00324	75 2d		 jne	 SHORT $LN11@CheckCondi
  00326	8b 45 f0	 mov	 eax, DWORD PTR _tValidRange$[ebp+4]
  00329	50		 push	 eax
  0032a	8b 4d ec	 mov	 ecx, DWORD PTR _tValidRange$[ebp]
  0032d	51		 push	 ecx
  0032e	8d 95 5c ff ff
	ff		 lea	 edx, DWORD PTR $T204518[ebp]
  00334	52		 push	 edx
  00335	8d 4d c4	 lea	 ecx, DWORD PTR _tConditionTime$204465[ebp]
  00338	e8 00 00 00 00	 call	 ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ; ATL::CTime::operator+
  0033d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00340	51		 push	 ecx
  00341	8b 10		 mov	 edx, DWORD PTR [eax]
  00343	52		 push	 edx
  00344	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00347	e8 00 00 00 00	 call	 ??OCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>
  0034c	0f b6 c0	 movzx	 eax, al
  0034f	85 c0		 test	 eax, eax
  00351	74 07		 je	 SHORT $LN14@CheckCondi
$LN11@CheckCondi:

; 114  : 			{
; 115  : 				return FALSE;

  00353	33 c0		 xor	 eax, eax
  00355	e9 de 01 00 00	 jmp	 $LN19@CheckCondi
$LN14@CheckCondi:

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : 
; 120  : 	if ( this->m_iWeekDay != -1 )

  0035a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0035d	83 78 20 ff	 cmp	 DWORD PTR [eax+32], -1
  00361	74 12		 je	 SHORT $LN10@CheckCondi

; 121  : 	{
; 122  : 		if ( this->m_iWeekDay != iDayOfWeek )

  00363	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00366	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00369	3b 4d dc	 cmp	 ecx, DWORD PTR _iDayOfWeek$[ebp]
  0036c	74 07		 je	 SHORT $LN10@CheckCondi

; 123  : 		{
; 124  : 			return FALSE;

  0036e	33 c0		 xor	 eax, eax
  00370	e9 c3 01 00 00	 jmp	 $LN19@CheckCondi
$LN10@CheckCondi:

; 125  : 		}
; 126  : 	}
; 127  : 
; 128  : 	if ( this->m_iHour != -1 )

  00375	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00378	83 78 24 ff	 cmp	 DWORD PTR [eax+36], -1
  0037c	0f 84 c1 00 00
	00		 je	 $LN8@CheckCondi

; 129  : 	{
; 130  : 		if ( this->m_iHour != iHour )

  00382	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00385	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00388	3b 4d d8	 cmp	 ecx, DWORD PTR _iHour$[ebp]
  0038b	0f 84 b2 00 00
	00		 je	 $LN8@CheckCondi

; 131  : 		{
; 132  : 			CTime tConditionTime(iYear, (this->m_iMonth == -1)?iMonth : this->m_iMonth,
; 133  : 				(this->m_iDay == -1)?iDay : this->m_iDay, this->m_iHour, 0, 0, -1) ;

  00391	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00394	83 78 1c ff	 cmp	 DWORD PTR [eax+28], -1
  00398	75 0b		 jne	 SHORT $LN23@CheckCondi
  0039a	8b 4d e0	 mov	 ecx, DWORD PTR _iDay$[ebp]
  0039d	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv193[ebp], ecx
  003a3	eb 0c		 jmp	 SHORT $LN24@CheckCondi
$LN23@CheckCondi:
  003a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003a8	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  003ab	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv193[ebp], eax
$LN24@CheckCondi:
  003b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b4	83 79 18 ff	 cmp	 DWORD PTR [ecx+24], -1
  003b8	75 0b		 jne	 SHORT $LN25@CheckCondi
  003ba	8b 55 e4	 mov	 edx, DWORD PTR _iMonth$[ebp]
  003bd	89 95 4c ff ff
	ff		 mov	 DWORD PTR tv198[ebp], edx
  003c3	eb 0c		 jmp	 SHORT $LN26@CheckCondi
$LN25@CheckCondi:
  003c5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003c8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003cb	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv198[ebp], ecx
$LN26@CheckCondi:
  003d1	6a ff		 push	 -1
  003d3	6a 00		 push	 0
  003d5	6a 00		 push	 0
  003d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003da	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  003dd	50		 push	 eax
  003de	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv193[ebp]
  003e4	51		 push	 ecx
  003e5	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv198[ebp]
  003eb	52		 push	 edx
  003ec	8b 45 e8	 mov	 eax, DWORD PTR _iYear$[ebp]
  003ef	50		 push	 eax
  003f0	8d 4d bc	 lea	 ecx, DWORD PTR _tConditionTime$204473[ebp]
  003f3	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 134  : 
; 135  : 			if ( tCurrentTime < tConditionTime  ||
; 136  : 				 tCurrentTime > tConditionTime+tValidRange )

  003f8	8b 45 c0	 mov	 eax, DWORD PTR _tConditionTime$204473[ebp+4]
  003fb	50		 push	 eax
  003fc	8b 4d bc	 mov	 ecx, DWORD PTR _tConditionTime$204473[ebp]
  003ff	51		 push	 ecx
  00400	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00403	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  00408	0f b6 d0	 movzx	 edx, al
  0040b	85 d2		 test	 edx, edx
  0040d	75 2d		 jne	 SHORT $LN5@CheckCondi
  0040f	8b 45 f0	 mov	 eax, DWORD PTR _tValidRange$[ebp+4]
  00412	50		 push	 eax
  00413	8b 4d ec	 mov	 ecx, DWORD PTR _tValidRange$[ebp]
  00416	51		 push	 ecx
  00417	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR $T204523[ebp]
  0041d	52		 push	 edx
  0041e	8d 4d bc	 lea	 ecx, DWORD PTR _tConditionTime$204473[ebp]
  00421	e8 00 00 00 00	 call	 ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ; ATL::CTime::operator+
  00426	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00429	51		 push	 ecx
  0042a	8b 10		 mov	 edx, DWORD PTR [eax]
  0042c	52		 push	 edx
  0042d	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00430	e8 00 00 00 00	 call	 ??OCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>
  00435	0f b6 c0	 movzx	 eax, al
  00438	85 c0		 test	 eax, eax
  0043a	74 07		 je	 SHORT $LN8@CheckCondi
$LN5@CheckCondi:

; 137  : 			{
; 138  : 				return FALSE;

  0043c	33 c0		 xor	 eax, eax
  0043e	e9 f5 00 00 00	 jmp	 $LN19@CheckCondi
$LN8@CheckCondi:

; 139  : 			}
; 140  : 		}
; 141  : 	}
; 142  : 
; 143  : 	if ( this->m_iMinute != -1 )

  00443	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00446	83 78 28 ff	 cmp	 DWORD PTR [eax+40], -1
  0044a	0f 84 e3 00 00
	00		 je	 $LN4@CheckCondi

; 144  : 	{
; 145  : 		if ( this->m_iMinute != iMinute )

  00450	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00453	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00456	3b 4d d4	 cmp	 ecx, DWORD PTR _iMinute$[ebp]
  00459	0f 84 d4 00 00
	00		 je	 $LN4@CheckCondi

; 146  : 		{
; 147  : 			CTime tConditionTime(iYear, (this->m_iMonth == -1)?iMonth : this->m_iMonth,
; 148  : 										(this->m_iDay == -1)?iDay : this->m_iDay,
; 149  : 										(this->m_iHour == -1)?iHour : this->m_iHour,
; 150  : 										 this->m_iMinute, 0, -1) ;

  0045f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00462	83 78 24 ff	 cmp	 DWORD PTR [eax+36], -1
  00466	75 0b		 jne	 SHORT $LN27@CheckCondi
  00468	8b 4d d8	 mov	 ecx, DWORD PTR _iHour$[ebp]
  0046b	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv227[ebp], ecx
  00471	eb 0c		 jmp	 SHORT $LN28@CheckCondi
$LN27@CheckCondi:
  00473	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00476	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00479	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv227[ebp], eax
$LN28@CheckCondi:
  0047f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00482	83 79 1c ff	 cmp	 DWORD PTR [ecx+28], -1
  00486	75 0b		 jne	 SHORT $LN29@CheckCondi
  00488	8b 55 e0	 mov	 edx, DWORD PTR _iDay$[ebp]
  0048b	89 95 4c ff ff
	ff		 mov	 DWORD PTR tv232[ebp], edx
  00491	eb 0c		 jmp	 SHORT $LN30@CheckCondi
$LN29@CheckCondi:
  00493	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00496	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00499	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv232[ebp], ecx
$LN30@CheckCondi:
  0049f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004a2	83 7a 18 ff	 cmp	 DWORD PTR [edx+24], -1
  004a6	75 0b		 jne	 SHORT $LN31@CheckCondi
  004a8	8b 45 e4	 mov	 eax, DWORD PTR _iMonth$[ebp]
  004ab	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv237[ebp], eax
  004b1	eb 0c		 jmp	 SHORT $LN32@CheckCondi
$LN31@CheckCondi:
  004b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004b6	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004b9	89 95 48 ff ff
	ff		 mov	 DWORD PTR tv237[ebp], edx
$LN32@CheckCondi:
  004bf	6a ff		 push	 -1
  004c1	6a 00		 push	 0
  004c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004c6	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  004c9	51		 push	 ecx
  004ca	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR tv227[ebp]
  004d0	52		 push	 edx
  004d1	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv232[ebp]
  004d7	50		 push	 eax
  004d8	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  004de	51		 push	 ecx
  004df	8b 55 e8	 mov	 edx, DWORD PTR _iYear$[ebp]
  004e2	52		 push	 edx
  004e3	8d 4d b4	 lea	 ecx, DWORD PTR _tConditionTime$204479[ebp]
  004e6	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 151  : 
; 152  : 			if ( tCurrentTime < tConditionTime  ||
; 153  : 				 tCurrentTime > tConditionTime+tValidRange )

  004eb	8b 45 b8	 mov	 eax, DWORD PTR _tConditionTime$204479[ebp+4]
  004ee	50		 push	 eax
  004ef	8b 4d b4	 mov	 ecx, DWORD PTR _tConditionTime$204479[ebp]
  004f2	51		 push	 ecx
  004f3	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  004f6	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  004fb	0f b6 d0	 movzx	 edx, al
  004fe	85 d2		 test	 edx, edx
  00500	75 2d		 jne	 SHORT $LN1@CheckCondi
  00502	8b 45 f0	 mov	 eax, DWORD PTR _tValidRange$[ebp+4]
  00505	50		 push	 eax
  00506	8b 4d ec	 mov	 ecx, DWORD PTR _tValidRange$[ebp]
  00509	51		 push	 ecx
  0050a	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR $T204530[ebp]
  00510	52		 push	 edx
  00511	8d 4d b4	 lea	 ecx, DWORD PTR _tConditionTime$204479[ebp]
  00514	e8 00 00 00 00	 call	 ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ; ATL::CTime::operator+
  00519	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0051c	51		 push	 ecx
  0051d	8b 10		 mov	 edx, DWORD PTR [eax]
  0051f	52		 push	 edx
  00520	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00523	e8 00 00 00 00	 call	 ??OCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>
  00528	0f b6 c0	 movzx	 eax, al
  0052b	85 c0		 test	 eax, eax
  0052d	74 04		 je	 SHORT $LN4@CheckCondi
$LN1@CheckCondi:

; 154  : 			{
; 155  : 				return FALSE;

  0052f	33 c0		 xor	 eax, eax
  00531	eb 05		 jmp	 SHORT $LN19@CheckCondi
$LN4@CheckCondi:

; 156  : 			}
; 157  : 		}
; 158  : 	}
; 159  : 
; 160  : 	return TRUE;

  00533	b8 01 00 00 00	 mov	 eax, 1
$LN19@CheckCondi:

; 161  : }	

  00538	5f		 pop	 edi
  00539	5e		 pop	 esi
  0053a	5b		 pop	 ebx
  0053b	8b e5		 mov	 esp, ebp
  0053d	5d		 pop	 ebp
  0053e	c3		 ret	 0
?CheckConditionSpecificDate@TMonsterAIRuleInfo@@QAEHXZ ENDP ; TMonsterAIRuleInfo::CheckConditionSpecificDate
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckConditionCrywolfStart@TMonsterAIRuleInfo@@QAEHXZ PROC ; TMonsterAIRuleInfo::CheckConditionCrywolfStart
; _this$ = ecx

; 165  : {

  00540	55		 push	 ebp
  00541	8b ec		 mov	 ebp, esp
  00543	83 ec 44	 sub	 esp, 68			; 00000044H
  00546	53		 push	 ebx
  00547	56		 push	 esi
  00548	57		 push	 edi
  00549	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 	return FALSE;

  0054c	33 c0		 xor	 eax, eax

; 167  : }

  0054e	5f		 pop	 edi
  0054f	5e		 pop	 esi
  00550	5b		 pop	 ebx
  00551	8b e5		 mov	 esp, ebp
  00553	5d		 pop	 ebp
  00554	c3		 ret	 0
?CheckConditionCrywolfStart@TMonsterAIRuleInfo@@QAEHXZ ENDP ; TMonsterAIRuleInfo::CheckConditionCrywolfStart
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckConditionCrywolfEnd@TMonsterAIRuleInfo@@QAEHXZ PROC ; TMonsterAIRuleInfo::CheckConditionCrywolfEnd
; _this$ = ecx

; 171  : {

  00560	55		 push	 ebp
  00561	8b ec		 mov	 ebp, esp
  00563	83 ec 44	 sub	 esp, 68			; 00000044H
  00566	53		 push	 ebx
  00567	56		 push	 esi
  00568	57		 push	 edi
  00569	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 172  : 	return FALSE;

  0056c	33 c0		 xor	 eax, eax

; 173  : }

  0056e	5f		 pop	 edi
  0056f	5e		 pop	 esi
  00570	5b		 pop	 ebx
  00571	8b e5		 mov	 esp, ebp
  00573	5d		 pop	 ebp
  00574	c3		 ret	 0
?CheckConditionCrywolfEnd@TMonsterAIRuleInfo@@QAEHXZ ENDP ; TMonsterAIRuleInfo::CheckConditionCrywolfEnd
_TEXT	ENDS
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??0CTimeSpan@ATL@@QAE@JHHH@Z
_TEXT	SEGMENT
tv180 = -80						; size = 4
tv178 = -76						; size = 4
tv176 = -72						; size = 4
_this$ = -4						; size = 4
_lDays$ = 8						; size = 4
_nHours$ = 12						; size = 4
_nMins$ = 16						; size = 4
_nSecs$ = 20						; size = 4
??0CTimeSpan@ATL@@QAE@JHHH@Z PROC			; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  0000c	8b 45 14	 mov	 eax, DWORD PTR _nSecs$[ebp]
  0000f	99		 cdq
  00010	8b f0		 mov	 esi, eax
  00012	8b fa		 mov	 edi, edx
  00014	8b 45 10	 mov	 eax, DWORD PTR _nMins$[ebp]
  00017	99		 cdq
  00018	8b d8		 mov	 ebx, eax
  0001a	8b c2		 mov	 eax, edx
  0001c	89 45 b8	 mov	 DWORD PTR tv176[ebp], eax
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _nHours$[ebp]
  00022	99		 cdq
  00023	8b ca		 mov	 ecx, edx
  00025	89 45 b4	 mov	 DWORD PTR tv178[ebp], eax
  00028	8b 45 08	 mov	 eax, DWORD PTR _lDays$[ebp]
  0002b	99		 cdq
  0002c	6a 00		 push	 0
  0002e	6a 18		 push	 24			; 00000018H
  00030	52		 push	 edx
  00031	50		 push	 eax
  00032	89 4d b0	 mov	 DWORD PTR tv180[ebp], ecx
  00035	e8 00 00 00 00	 call	 __allmul
  0003a	8b 4d b4	 mov	 ecx, DWORD PTR tv178[ebp]
  0003d	03 c8		 add	 ecx, eax
  0003f	8b 45 b0	 mov	 eax, DWORD PTR tv180[ebp]
  00042	13 c2		 adc	 eax, edx
  00044	6a 00		 push	 0
  00046	6a 3c		 push	 60			; 0000003cH
  00048	50		 push	 eax
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 __allmul
  0004f	03 d8		 add	 ebx, eax
  00051	8b 45 b8	 mov	 eax, DWORD PTR tv176[ebp]
  00054	13 c2		 adc	 eax, edx
  00056	6a 00		 push	 0
  00058	6a 3c		 push	 60			; 0000003cH
  0005a	50		 push	 eax
  0005b	53		 push	 ebx
  0005c	e8 00 00 00 00	 call	 __allmul
  00061	03 f0		 add	 esi, eax
  00063	13 fa		 adc	 edi, edx
  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	89 30		 mov	 DWORD PTR [eax], esi
  0006a	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 43   : }

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 10 00	 ret	 16			; 00000010H
??0CTimeSpan@ATL@@QAE@JHHH@Z ENDP			; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 	return( CTime( ::_time64( NULL ) ) );

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 __time64
  00010	83 c4 04	 add	 esp, 4
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 144  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 172  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	__$ArrayPad$
EXTRN	__mktime64:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
tv194 = -136						; size = 4
tv137 = -136						; size = 4
tv129 = -136						; size = 4
tv89 = -136						; size = 4
tv81 = -136						; size = 4
tv73 = -136						; size = 4
_atm$ = -68						; size = 36
___atl_condVal$86718 = -32				; size = 4
___atl_condVal$86705 = -28				; size = 4
___atl_condVal$86692 = -24				; size = 4
___atl_condVal$86679 = -20				; size = 4
___atl_condVal$86666 = -16				; size = 4
___atl_condVal$86653 = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN67@CTime:

; 183  : #pragma warning (push)
; 184  : #pragma warning (disable: 4127)  // conditional expression constant
; 185  : 
; 186  : 	ATLENSURE( nYear >= 1900 );

  00019	33 c0		 xor	 eax, eax
  0001b	81 7d 08 6c 07
	00 00		 cmp	 DWORD PTR _nYear$[ebp], 1900 ; 0000076cH
  00022	0f 9d c0	 setge	 al
  00025	89 45 f4	 mov	 DWORD PTR ___atl_condVal$86653[ebp], eax
$LN60@CTime:
  00028	33 c0		 xor	 eax, eax
  0002a	75 fc		 jne	 SHORT $LN60@CTime
  0002c	33 c0		 xor	 eax, eax
  0002e	75 f8		 jne	 SHORT $LN60@CTime
  00030	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$86653[ebp], 0
  00034	75 0a		 jne	 SHORT $LN66@CTime
  00036	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0003b	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN66@CTime:
  00040	33 c0		 xor	 eax, eax
  00042	75 d5		 jne	 SHORT $LN67@CTime
$LN57@CTime:

; 187  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00044	83 7d 0c 01	 cmp	 DWORD PTR _nMonth$[ebp], 1
  00048	7c 12		 jl	 SHORT $LN70@CTime
  0004a	83 7d 0c 0c	 cmp	 DWORD PTR _nMonth$[ebp], 12 ; 0000000cH
  0004e	7f 0c		 jg	 SHORT $LN70@CTime
  00050	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv73[ebp], 1
  0005a	eb 0a		 jmp	 SHORT $LN71@CTime
$LN70@CTime:
  0005c	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv73[ebp], 0
$LN71@CTime:
  00066	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv73[ebp]
  0006c	89 45 f0	 mov	 DWORD PTR ___atl_condVal$86666[ebp], eax
$LN50@CTime:
  0006f	33 c0		 xor	 eax, eax
  00071	75 fc		 jne	 SHORT $LN50@CTime
  00073	33 c0		 xor	 eax, eax
  00075	75 f8		 jne	 SHORT $LN50@CTime
  00077	83 7d f0 00	 cmp	 DWORD PTR ___atl_condVal$86666[ebp], 0
  0007b	75 0a		 jne	 SHORT $LN56@CTime
  0007d	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00082	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN56@CTime:
  00087	33 c0		 xor	 eax, eax
  00089	75 b9		 jne	 SHORT $LN57@CTime
$LN47@CTime:

; 188  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0008b	83 7d 10 01	 cmp	 DWORD PTR _nDay$[ebp], 1
  0008f	7c 12		 jl	 SHORT $LN72@CTime
  00091	83 7d 10 1f	 cmp	 DWORD PTR _nDay$[ebp], 31 ; 0000001fH
  00095	7f 0c		 jg	 SHORT $LN72@CTime
  00097	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv81[ebp], 1
  000a1	eb 0a		 jmp	 SHORT $LN73@CTime
$LN72@CTime:
  000a3	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN73@CTime:
  000ad	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  000b3	89 45 ec	 mov	 DWORD PTR ___atl_condVal$86679[ebp], eax
$LN40@CTime:
  000b6	33 c0		 xor	 eax, eax
  000b8	75 fc		 jne	 SHORT $LN40@CTime
  000ba	33 c0		 xor	 eax, eax
  000bc	75 f8		 jne	 SHORT $LN40@CTime
  000be	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$86679[ebp], 0
  000c2	75 0a		 jne	 SHORT $LN46@CTime
  000c4	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000c9	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN46@CTime:
  000ce	33 c0		 xor	 eax, eax
  000d0	75 b9		 jne	 SHORT $LN47@CTime
$LN37@CTime:

; 189  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  000d2	83 7d 14 00	 cmp	 DWORD PTR _nHour$[ebp], 0
  000d6	7c 12		 jl	 SHORT $LN74@CTime
  000d8	83 7d 14 17	 cmp	 DWORD PTR _nHour$[ebp], 23 ; 00000017H
  000dc	7f 0c		 jg	 SHORT $LN74@CTime
  000de	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv89[ebp], 1
  000e8	eb 0a		 jmp	 SHORT $LN75@CTime
$LN74@CTime:
  000ea	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN75@CTime:
  000f4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  000fa	89 45 e8	 mov	 DWORD PTR ___atl_condVal$86692[ebp], eax
$LN30@CTime:
  000fd	33 c0		 xor	 eax, eax
  000ff	75 fc		 jne	 SHORT $LN30@CTime
  00101	33 c0		 xor	 eax, eax
  00103	75 f8		 jne	 SHORT $LN30@CTime
  00105	83 7d e8 00	 cmp	 DWORD PTR ___atl_condVal$86692[ebp], 0
  00109	75 0a		 jne	 SHORT $LN36@CTime
  0010b	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00110	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN36@CTime:
  00115	33 c0		 xor	 eax, eax
  00117	75 b9		 jne	 SHORT $LN37@CTime
$LN27@CTime:

; 190  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  00119	83 7d 18 00	 cmp	 DWORD PTR _nMin$[ebp], 0
  0011d	7c 12		 jl	 SHORT $LN76@CTime
  0011f	83 7d 18 3b	 cmp	 DWORD PTR _nMin$[ebp], 59 ; 0000003bH
  00123	7f 0c		 jg	 SHORT $LN76@CTime
  00125	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv129[ebp], 1
  0012f	eb 0a		 jmp	 SHORT $LN77@CTime
$LN76@CTime:
  00131	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN77@CTime:
  0013b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv129[ebp]
  00141	89 45 e4	 mov	 DWORD PTR ___atl_condVal$86705[ebp], eax
$LN20@CTime:
  00144	33 c0		 xor	 eax, eax
  00146	75 fc		 jne	 SHORT $LN20@CTime
  00148	33 c0		 xor	 eax, eax
  0014a	75 f8		 jne	 SHORT $LN20@CTime
  0014c	83 7d e4 00	 cmp	 DWORD PTR ___atl_condVal$86705[ebp], 0
  00150	75 0a		 jne	 SHORT $LN26@CTime
  00152	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00157	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN26@CTime:
  0015c	33 c0		 xor	 eax, eax
  0015e	75 b9		 jne	 SHORT $LN27@CTime
$LN17@CTime:

; 191  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00160	83 7d 1c 00	 cmp	 DWORD PTR _nSec$[ebp], 0
  00164	7c 12		 jl	 SHORT $LN78@CTime
  00166	83 7d 1c 3b	 cmp	 DWORD PTR _nSec$[ebp], 59 ; 0000003bH
  0016a	7f 0c		 jg	 SHORT $LN78@CTime
  0016c	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv137[ebp], 1
  00176	eb 0a		 jmp	 SHORT $LN79@CTime
$LN78@CTime:
  00178	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN79@CTime:
  00182	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00188	89 45 e0	 mov	 DWORD PTR ___atl_condVal$86718[ebp], eax
$LN10@CTime:
  0018b	33 c0		 xor	 eax, eax
  0018d	75 fc		 jne	 SHORT $LN10@CTime
  0018f	33 c0		 xor	 eax, eax
  00191	75 f8		 jne	 SHORT $LN10@CTime
  00193	83 7d e0 00	 cmp	 DWORD PTR ___atl_condVal$86718[ebp], 0
  00197	75 0a		 jne	 SHORT $LN16@CTime
  00199	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0019e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN16@CTime:
  001a3	33 c0		 xor	 eax, eax
  001a5	75 b9		 jne	 SHORT $LN17@CTime

; 192  : 
; 193  : #pragma warning (pop)
; 194  : 
; 195  : 	struct tm atm;
; 196  : 
; 197  : 	atm.tm_sec = nSec;

  001a7	8b 45 1c	 mov	 eax, DWORD PTR _nSec$[ebp]
  001aa	89 45 bc	 mov	 DWORD PTR _atm$[ebp], eax

; 198  : 	atm.tm_min = nMin;

  001ad	8b 45 18	 mov	 eax, DWORD PTR _nMin$[ebp]
  001b0	89 45 c0	 mov	 DWORD PTR _atm$[ebp+4], eax

; 199  : 	atm.tm_hour = nHour;

  001b3	8b 45 14	 mov	 eax, DWORD PTR _nHour$[ebp]
  001b6	89 45 c4	 mov	 DWORD PTR _atm$[ebp+8], eax

; 200  : 	atm.tm_mday = nDay;

  001b9	8b 45 10	 mov	 eax, DWORD PTR _nDay$[ebp]
  001bc	89 45 c8	 mov	 DWORD PTR _atm$[ebp+12], eax

; 201  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based

  001bf	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  001c2	83 e8 01	 sub	 eax, 1
  001c5	89 45 cc	 mov	 DWORD PTR _atm$[ebp+16], eax

; 202  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  001c8	8b 45 08	 mov	 eax, DWORD PTR _nYear$[ebp]
  001cb	2d 6c 07 00 00	 sub	 eax, 1900		; 0000076cH
  001d0	89 45 d0	 mov	 DWORD PTR _atm$[ebp+20], eax

; 203  : 	atm.tm_isdst = nDST;

  001d3	8b 45 20	 mov	 eax, DWORD PTR _nDST$[ebp]
  001d6	89 45 dc	 mov	 DWORD PTR _atm$[ebp+32], eax

; 204  : 
; 205  : 	m_time = _mktime64(&atm);

  001d9	8d 45 bc	 lea	 eax, DWORD PTR _atm$[ebp]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 __mktime64
  001e2	83 c4 04	 add	 esp, 4
  001e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	89 01		 mov	 DWORD PTR [ecx], eax
  001ea	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN3@CTime:

; 206  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time

  001ed	33 c0		 xor	 eax, eax
  001ef	75 fc		 jne	 SHORT $LN3@CTime
  001f1	33 c0		 xor	 eax, eax
  001f3	75 f8		 jne	 SHORT $LN3@CTime

; 207  : 	if(m_time == -1)

  001f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f8	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
  001fe	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  00204	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv194[ebp]
  0020a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0020c	23 42 04	 and	 eax, DWORD PTR [edx+4]
  0020f	83 f8 ff	 cmp	 eax, -1
  00212	75 0a		 jne	 SHORT $LN68@CTime

; 208  : 	{
; 209  : 		AtlThrow(E_INVALIDARG);

  00214	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00219	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN68@CTime:

; 210  : 	}
; 211  : }

  0021e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN69@CTime:
  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	5b		 pop	 ebx
  00224	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00227	33 cd		 xor	 ecx, ebp
  00229	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c2 1c 00	 ret	 28			; 0000001cH
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00009	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00010	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00012	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}
; 72   : 	else

  00017	eb 09		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00019	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
PUBLIC	?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTimeSpan
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_span$ = 12						; size = 8
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z PROC		; ATL::CTime::operator+, COMDAT
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 315  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  0000c	8d 4d 0c	 lea	 ecx, DWORD PTR _span$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetTimeSpan
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	03 01		 add	 eax, DWORD PTR [ecx]
  00019	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  0001c	52		 push	 edx
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 316  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ENDP		; ATL::CTime::operator+
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTimeSpan, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	return( m_timeSpan );

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 83   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTimeSpan
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??MCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
tv65 = -76						; size = 4
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??MCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator<, COMDAT
; _this$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 330  : 	return( m_time < time.m_time );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv68[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv68[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	3b 55 0c	 cmp	 edx, DWORD PTR _time$[ebp+4]
  0001b	7f 15		 jg	 SHORT $LN3@operator
  0001d	7c 0a		 jl	 SHORT $LN5@operator
  0001f	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	3b 4d 08	 cmp	 ecx, DWORD PTR _time$[ebp]
  00027	73 09		 jae	 SHORT $LN3@operator
$LN5@operator:
  00029	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00030	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00032	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator:
  00039	8a 45 b4	 mov	 al, BYTE PTR tv65[ebp]

; 331  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
??MCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator<
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??OCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
tv65 = -76						; size = 4
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??OCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator>, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 	return( m_time > time.m_time );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv68[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv68[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	3b 55 0c	 cmp	 edx, DWORD PTR _time$[ebp+4]
  0001b	7c 15		 jl	 SHORT $LN3@operator@2
  0001d	7f 0a		 jg	 SHORT $LN5@operator@2
  0001f	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	3b 4d 08	 cmp	 ecx, DWORD PTR _time$[ebp]
  00027	76 09		 jbe	 SHORT $LN3@operator@2
$LN5@operator@2:
  00029	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00030	eb 07		 jmp	 SHORT $LN4@operator@2
$LN3@operator@2:
  00032	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator@2:
  00039	8a 45 b4	 mov	 al, BYTE PTR tv65[ebp]

; 336  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
??OCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator>
_TEXT	ENDS
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetYear@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetYear@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetYear, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 420  : 	struct tm ttm;
; 421  : 	struct tm * ptm;
; 422  : 
; 423  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 424  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 11		 je	 SHORT $LN3@GetYear
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00031	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  00037	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  0003a	eb 07		 jmp	 SHORT $LN4@GetYear
$LN3@GetYear:
  0003c	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetYear:
  00043	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 425  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004c	33 cd		 xor	 ecx, ebp
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?GetYear@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetYear
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__localtime64_s:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
_err$86876 = -52					; size = 4
_ptmTemp$86875 = -48					; size = 36
___atl_condVal$86864 = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN12@GetLocalTm:

; 370  : 	// Ensure ptm is valid
; 371  : 	ATLENSURE( ptm != NULL );

  00016	33 c0		 xor	 eax, eax
  00018	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  0001c	0f 95 c0	 setne	 al
  0001f	89 45 f4	 mov	 DWORD PTR ___atl_condVal$86864[ebp], eax
$LN5@GetLocalTm:
  00022	33 c0		 xor	 eax, eax
  00024	75 fc		 jne	 SHORT $LN5@GetLocalTm
  00026	33 c0		 xor	 eax, eax
  00028	75 f8		 jne	 SHORT $LN5@GetLocalTm
  0002a	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$86864[ebp], 0
  0002e	75 0a		 jne	 SHORT $LN11@GetLocalTm
  00030	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00035	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN11@GetLocalTm:
  0003a	33 c0		 xor	 eax, eax
  0003c	75 d8		 jne	 SHORT $LN12@GetLocalTm

; 372  : 
; 373  : 	if (ptm != NULL)

  0003e	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00042	74 2f		 je	 SHORT $LN2@GetLocalTm

; 374  : 	{
; 375  : 		struct tm ptmTemp;
; 376  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	50		 push	 eax
  00048	8d 4d d0	 lea	 ecx, DWORD PTR _ptmTemp$86875[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 __localtime64_s
  00051	83 c4 08	 add	 esp, 8
  00054	89 45 cc	 mov	 DWORD PTR _err$86876[ebp], eax

; 377  : 
; 378  : 		if (err != 0)

  00057	83 7d cc 00	 cmp	 DWORD PTR _err$86876[ebp], 0
  0005b	74 04		 je	 SHORT $LN1@GetLocalTm

; 379  : 		{
; 380  : 			return NULL;    // indicates that m_time was not initialized!

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 14		 jmp	 SHORT $LN14@GetLocalTm
$LN1@GetLocalTm:

; 381  : 		}
; 382  : 
; 383  : 		*ptm = ptmTemp;

  00061	b9 09 00 00 00	 mov	 ecx, 9
  00066	8d 75 d0	 lea	 esi, DWORD PTR _ptmTemp$86875[ebp]
  00069	8b 7d 08	 mov	 edi, DWORD PTR _ptm$[ebp]
  0006c	f3 a5		 rep movsd

; 384  : 		return ptm;

  0006e	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  00071	eb 02		 jmp	 SHORT $LN14@GetLocalTm
$LN2@GetLocalTm:

; 385  : 	}
; 386  : 
; 387  : 	return NULL;

  00073	33 c0		 xor	 eax, eax
$LN14@GetLocalTm:

; 388  : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007b	33 cd		 xor	 ecx, ebp
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMonth@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetMonth@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMonth, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 429  : 	struct tm ttm;
; 430  : 	struct tm * ptm;
; 431  : 
; 432  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 433  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0e		 je	 SHORT $LN3@GetMonth
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00031	83 c1 01	 add	 ecx, 1
  00034	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  00037	eb 07		 jmp	 SHORT $LN4@GetMonth
$LN3@GetMonth:
  00039	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetMonth:
  00040	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 434  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetMonth@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMonth
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetDay@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetDay@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetDay, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 438  : 	struct tm ttm;
; 439  : 	struct tm * ptm;
; 440  : 
; 441  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 442  : 	return ptm ? ptm->tm_mday : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetDay
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetDay
$LN3@GetDay:
  00036	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@GetDay:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 443  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetDay@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetDay
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetHour@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 447  : 	struct tm ttm;
; 448  : 	struct tm * ptm;
; 449  : 
; 450  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 451  : 	return ptm ? ptm->tm_hour : -1 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetHour
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetHour
$LN3@GetHour:
  00036	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetHour:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 452  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetMinute@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 	struct tm ttm;
; 457  : 	struct tm * ptm;
; 458  : 
; 459  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 460  : 	return ptm ? ptm->tm_min : -1 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetMinute
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetMinute
$LN3@GetMinute:
  00036	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetMinute:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 461  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetDayOfWeek@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetDayOfWeek@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetDayOfWeek, COMDAT
; _this$ = ecx

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 474  : 	struct tm ttm;
; 475  : 	struct tm * ptm;
; 476  : 
; 477  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 478  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0e		 je	 SHORT $LN3@GetDayOfWe
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00031	83 c1 01	 add	 ecx, 1
  00034	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  00037	eb 07		 jmp	 SHORT $LN4@GetDayOfWe
$LN3@GetDayOfWe:
  00039	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetDayOfWe:
  00040	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 479  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetDayOfWeek@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetDayOfWeek
_TEXT	ENDS
END
