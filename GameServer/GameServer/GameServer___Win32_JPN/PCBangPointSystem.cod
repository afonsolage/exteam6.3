; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\PCBangPointSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_btPcBangPointSystemLevel@@3EA		; g_btPcBangPointSystemLevel
PUBLIC	?g_sPCBangFirstRuleTime@@3FA			; g_sPCBangFirstRuleTime
PUBLIC	?g_sPCBangFirstRuleTimePoint@@3FA		; g_sPCBangFirstRuleTimePoint
PUBLIC	?g_sPCBangCommonRuleTime@@3FA			; g_sPCBangCommonRuleTime
PUBLIC	?g_sPCBangCommonRuleTimePoint@@3FA		; g_sPCBangCommonRuleTimePoint
PUBLIC	?g_sPCBangMaxPoint@@3FA				; g_sPCBangMaxPoint
PUBLIC	?g_sPCBangFeverStartHour@@3FA			; g_sPCBangFeverStartHour
PUBLIC	?g_sPCBangFeverEndHour@@3FA			; g_sPCBangFeverEndHour
PUBLIC	?g_sPCBangFeverMultipleValue@@3FA		; g_sPCBangFeverMultipleValue
PUBLIC	?g_sPCBangResetDayOfWeek@@3FA			; g_sPCBangResetDayOfWeek
PUBLIC	?g_sPCBangResetHour@@3FA			; g_sPCBangResetHour
PUBLIC	?g_fPCBangAddExperience@@3MA			; g_fPCBangAddExperience
_BSS	SEGMENT
?g_btPcBangPointSystemLevel@@3EA DB 01H DUP (?)		; g_btPcBangPointSystemLevel
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
	DD	0190H
	DD	0257H
	DD	0190H
	DD	0257H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	070H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
	DD	010eH
?g_sPCBangFirstRuleTime@@3FA DW 0258H			; g_sPCBangFirstRuleTime
	ORG $+2
?g_sPCBangFirstRuleTimePoint@@3FA DW 01H		; g_sPCBangFirstRuleTimePoint
	ORG $+2
?g_sPCBangCommonRuleTime@@3FA DW 0258H			; g_sPCBangCommonRuleTime
	ORG $+2
?g_sPCBangCommonRuleTimePoint@@3FA DW 01H		; g_sPCBangCommonRuleTimePoint
	ORG $+2
?g_sPCBangMaxPoint@@3FA DW 03f0H			; g_sPCBangMaxPoint
	ORG $+2
?g_sPCBangFeverStartHour@@3FA DW 014H			; g_sPCBangFeverStartHour
	ORG $+2
?g_sPCBangFeverEndHour@@3FA DW 018H			; g_sPCBangFeverEndHour
	ORG $+2
?g_sPCBangFeverMultipleValue@@3FA DW 02H		; g_sPCBangFeverMultipleValue
	ORG $+2
?g_sPCBangResetDayOfWeek@@3FA DW 02H			; g_sPCBangResetDayOfWeek
	ORG $+2
?g_sPCBangResetHour@@3FA DW 09H				; g_sPCBangResetHour
	ORG $+2
?g_fPCBangAddExperience@@3MA DD 03f800000r	; 1	; g_fPCBangAddExperience
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CPCBangPointTimeCondition@@6B@		; CPCBangPointTimeCondition::`vftable'
PUBLIC	??0CPCBangPointTimeCondition@@QAE@XZ		; CPCBangPointTimeCondition::CPCBangPointTimeCondition
PUBLIC	??_R4CPCBangPointTimeCondition@@6B@		; CPCBangPointTimeCondition::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPCBangPointTimeCondition@@@8		; CPCBangPointTimeCondition `RTTI Type Descriptor'
PUBLIC	??_R3CPCBangPointTimeCondition@@8		; CPCBangPointTimeCondition::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPCBangPointTimeCondition@@8		; CPCBangPointTimeCondition::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPCBangPointTimeCondition@@8	; CPCBangPointTimeCondition::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECPCBangPointTimeCondition@@UAEPAXI@Z:PROC	; CPCBangPointTimeCondition::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CPCBangPointTimeCondition@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\pcbangpointsystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CPCBangPointTimeCondition@@8 DD FLAT:??_R0?AVCPCBangPointTimeCondition@@@8 ; CPCBangPointTimeCondition::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPCBangPointTimeCondition@@8
rdata$r	ENDS
;	COMDAT ??_R2CPCBangPointTimeCondition@@8
rdata$r	SEGMENT
??_R2CPCBangPointTimeCondition@@8 DD FLAT:??_R1A@?0A@EA@CPCBangPointTimeCondition@@8 ; CPCBangPointTimeCondition::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPCBangPointTimeCondition@@8
rdata$r	SEGMENT
??_R3CPCBangPointTimeCondition@@8 DD 00H		; CPCBangPointTimeCondition::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPCBangPointTimeCondition@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPCBangPointTimeCondition@@@8
_DATA	SEGMENT
??_R0?AVCPCBangPointTimeCondition@@@8 DD FLAT:??_7type_info@@6B@ ; CPCBangPointTimeCondition `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPCBangPointTimeCondition@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPCBangPointTimeCondition@@6B@
rdata$r	SEGMENT
??_R4CPCBangPointTimeCondition@@6B@ DD 00H		; CPCBangPointTimeCondition::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPCBangPointTimeCondition@@@8
	DD	FLAT:??_R3CPCBangPointTimeCondition@@8
rdata$r	ENDS
;	COMDAT ??_7CPCBangPointTimeCondition@@6B@
CONST	SEGMENT
??_7CPCBangPointTimeCondition@@6B@ DD FLAT:??_R4CPCBangPointTimeCondition@@6B@ ; CPCBangPointTimeCondition::`vftable'
	DD	FLAT:??_ECPCBangPointTimeCondition@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPCBangPointTimeCondition@@QAE@XZ PROC		; CPCBangPointTimeCondition::CPCBangPointTimeCondition
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPCBangPointTimeCondition@@6B@

; 26   : 	return;
; 27   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CPCBangPointTimeCondition@@QAE@XZ ENDP		; CPCBangPointTimeCondition::CPCBangPointTimeCondition
_TEXT	ENDS
PUBLIC	??1CPCBangPointTimeCondition@@UAE@XZ		; CPCBangPointTimeCondition::~CPCBangPointTimeCondition
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCPCBangPointTimeCondition@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPCBangPointTimeCondition@@UAEPAXI@Z PROC		; CPCBangPointTimeCondition::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CPCBangPointTimeCondition@@UAE@XZ ; CPCBangPointTimeCondition::~CPCBangPointTimeCondition
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCPCBangPointTimeCondition@@UAEPAXI@Z ENDP		; CPCBangPointTimeCondition::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPCBangPointTimeCondition@@UAE@XZ PROC		; CPCBangPointTimeCondition::~CPCBangPointTimeCondition
; _this$ = ecx

; 30   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPCBangPointTimeCondition@@6B@

; 31   : 	return;
; 32   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CPCBangPointTimeCondition@@UAE@XZ ENDP		; CPCBangPointTimeCondition::~CPCBangPointTimeCondition
_TEXT	ENDS
PUBLIC	?GetTimeDate@CPCBangPointTimeCondition@@QAEHHHH@Z ; CPCBangPointTimeCondition::GetTimeDate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc4$ = -16						; size = 4
_loc3$ = -12						; size = 4
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
_iYear$ = 8						; size = 4
_iMonth$ = 12						; size = 4
_iDay$ = 16						; size = 4
?GetTimeDate@CPCBangPointTimeCondition@@QAEHHHH@Z PROC	; CPCBangPointTimeCondition::GetTimeDate
; _this$ = ecx

; 35   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 50	 sub	 esp, 80			; 00000050H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 	if(iMonth < 3)

  0004c	83 7d 0c 03	 cmp	 DWORD PTR _iMonth$[ebp], 3
  00050	7d 12		 jge	 SHORT $LN1@GetTimeDat

; 37   : 	{
; 38   : 		iYear--;

  00052	8b 45 08	 mov	 eax, DWORD PTR _iYear$[ebp]
  00055	83 e8 01	 sub	 eax, 1
  00058	89 45 08	 mov	 DWORD PTR _iYear$[ebp], eax

; 39   : 		iMonth += 12;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _iMonth$[ebp]
  0005e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00061	89 45 0c	 mov	 DWORD PTR _iMonth$[ebp], eax
$LN1@GetTimeDat:

; 40   : 	}
; 41   : 
; 42   : 	int loc2 = iYear / 100; //

  00064	8b 45 08	 mov	 eax, DWORD PTR _iYear$[ebp]
  00067	99		 cdq
  00068	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0006d	f7 f9		 idiv	 ecx
  0006f	89 45 f8	 mov	 DWORD PTR _loc2$[ebp], eax

; 43   : 	int loc3 = iYear % 100; //

  00072	8b 45 08	 mov	 eax, DWORD PTR _iYear$[ebp]
  00075	99		 cdq
  00076	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0007b	f7 f9		 idiv	 ecx
  0007d	89 55 f4	 mov	 DWORD PTR _loc3$[ebp], edx

; 44   : 
; 45   : 	int loc4 = ((21 * loc2) / 4) + ((5 * loc3) / 4) + ( iDay + (iMonth + 1) * 26 / 10) - 1;

  00080	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  00083	6b c0 15	 imul	 eax, 21			; 00000015H
  00086	99		 cdq
  00087	83 e2 03	 and	 edx, 3
  0008a	03 c2		 add	 eax, edx
  0008c	8b c8		 mov	 ecx, eax
  0008e	c1 f9 02	 sar	 ecx, 2
  00091	8b 45 f4	 mov	 eax, DWORD PTR _loc3$[ebp]
  00094	6b c0 05	 imul	 eax, 5
  00097	99		 cdq
  00098	83 e2 03	 and	 edx, 3
  0009b	03 c2		 add	 eax, edx
  0009d	c1 f8 02	 sar	 eax, 2
  000a0	03 c8		 add	 ecx, eax
  000a2	8b 45 0c	 mov	 eax, DWORD PTR _iMonth$[ebp]
  000a5	83 c0 01	 add	 eax, 1
  000a8	6b c0 1a	 imul	 eax, 26			; 0000001aH
  000ab	99		 cdq
  000ac	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  000b1	f7 fe		 idiv	 esi
  000b3	03 4d 10	 add	 ecx, DWORD PTR _iDay$[ebp]
  000b6	8d 54 08 ff	 lea	 edx, DWORD PTR [eax+ecx-1]
  000ba	89 55 f0	 mov	 DWORD PTR _loc4$[ebp], edx

; 46   : 
; 47   : 	loc4 = loc4%7;

  000bd	8b 45 f0	 mov	 eax, DWORD PTR _loc4$[ebp]
  000c0	99		 cdq
  000c1	b9 07 00 00 00	 mov	 ecx, 7
  000c6	f7 f9		 idiv	 ecx
  000c8	89 55 f0	 mov	 DWORD PTR _loc4$[ebp], edx

; 48   : 
; 49   : 	return loc4;

  000cb	8b 45 f0	 mov	 eax, DWORD PTR _loc4$[ebp]

; 50   : }

  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 0c 00	 ret	 12			; 0000000cH
?GetTimeDate@CPCBangPointTimeCondition@@QAEHHHH@Z ENDP	; CPCBangPointTimeCondition::GetTimeDate
_TEXT	ENDS
PUBLIC	?IsLeapYear@CPCBangPointTimeCondition@@QAEEH@Z	; CPCBangPointTimeCondition::IsLeapYear
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
_iYear$ = 8						; size = 4
?IsLeapYear@CPCBangPointTimeCondition@@QAEEH@Z PROC	; CPCBangPointTimeCondition::IsLeapYear
; _this$ = ecx

; 54   : {

  000e0	55		 push	 ebp
  000e1	8b ec		 mov	 ebp, esp
  000e3	83 ec 48	 sub	 esp, 72			; 00000048H
  000e6	53		 push	 ebx
  000e7	56		 push	 esi
  000e8	57		 push	 edi
  000e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	int loc2;
; 56   : 
; 57   : 	if( (iYear % 400) != 0 && ((iYear % 4) != 0 || (iYear % 100) == 0) )

  000ec	8b 45 08	 mov	 eax, DWORD PTR _iYear$[ebp]
  000ef	99		 cdq
  000f0	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  000f5	f7 f9		 idiv	 ecx
  000f7	85 d2		 test	 edx, edx
  000f9	74 2b		 je	 SHORT $LN3@IsLeapYear
  000fb	8b 45 08	 mov	 eax, DWORD PTR _iYear$[ebp]
  000fe	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00103	79 05		 jns	 SHORT $LN6@IsLeapYear
  00105	48		 dec	 eax
  00106	83 c8 fc	 or	 eax, -4			; fffffffcH
  00109	40		 inc	 eax
$LN6@IsLeapYear:
  0010a	85 c0		 test	 eax, eax
  0010c	75 0f		 jne	 SHORT $LN2@IsLeapYear
  0010e	8b 45 08	 mov	 eax, DWORD PTR _iYear$[ebp]
  00111	99		 cdq
  00112	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00117	f7 f9		 idiv	 ecx
  00119	85 d2		 test	 edx, edx
  0011b	75 09		 jne	 SHORT $LN3@IsLeapYear
$LN2@IsLeapYear:

; 58   : 	{
; 59   : 		loc2 = 0;

  0011d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 0

; 60   : 	}
; 61   : 	else

  00124	eb 07		 jmp	 SHORT $LN1@IsLeapYear
$LN3@IsLeapYear:

; 62   : 	{
; 63   : 		loc2 = 1;

  00126	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 1
$LN1@IsLeapYear:

; 64   : 	}
; 65   : 
; 66   : 	return loc2;

  0012d	8a 45 f8	 mov	 al, BYTE PTR _loc2$[ebp]

; 67   : }

  00130	5f		 pop	 edi
  00131	5e		 pop	 esi
  00132	5b		 pop	 ebx
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c2 04 00	 ret	 4
?IsLeapYear@CPCBangPointTimeCondition@@QAEEH@Z ENDP	; CPCBangPointTimeCondition::IsLeapYear
_TEXT	ENDS
PUBLIC	?GetNumberedDays@CPCBangPointTimeCondition@@QAEHHH@Z ; CPCBangPointTimeCondition::GetNumberedDays
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_iYear$ = 8						; size = 4
_iMonth$ = 12						; size = 4
?GetNumberedDays@CPCBangPointTimeCondition@@QAEHHH@Z PROC ; CPCBangPointTimeCondition::GetNumberedDays
; _this$ = ecx

; 70   : {

  00140	55		 push	 ebp
  00141	8b ec		 mov	 ebp, esp
  00143	83 ec 48	 sub	 esp, 72			; 00000048H
  00146	53		 push	 ebx
  00147	56		 push	 esi
  00148	57		 push	 edi
  00149	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 71   : 	switch(iMonth)

  0014c	8b 45 0c	 mov	 eax, DWORD PTR _iMonth$[ebp]
  0014f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00152	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00155	83 e9 02	 sub	 ecx, 2
  00158	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  0015b	83 7d b8 09	 cmp	 DWORD PTR tv64[ebp], 9
  0015f	77 36		 ja	 SHORT $LN1@GetNumbere
  00161	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00164	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN8@GetNumbere[edx]
  0016b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN9@GetNumbere[eax*4]
$LN3@GetNumbere:

; 72   : 	{
; 73   : 	case 2:
; 74   : 		return !!IsLeapYear(iYear) + 28;

  00172	8b 45 08	 mov	 eax, DWORD PTR _iYear$[ebp]
  00175	50		 push	 eax
  00176	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00179	e8 00 00 00 00	 call	 ?IsLeapYear@CPCBangPointTimeCondition@@QAEEH@Z ; CPCBangPointTimeCondition::IsLeapYear
  0017e	0f b6 c0	 movzx	 eax, al
  00181	f7 d8		 neg	 eax
  00183	1b c0		 sbb	 eax, eax
  00185	f7 d8		 neg	 eax
  00187	83 c0 1c	 add	 eax, 28			; 0000001cH
  0018a	eb 10		 jmp	 SHORT $LN6@GetNumbere

; 75   : 		break;

  0018c	eb 0e		 jmp	 SHORT $LN6@GetNumbere
$LN2@GetNumbere:

; 76   : 	case 4:
; 77   : 	case 6:
; 78   : 	case 9:
; 79   : 	case 11:
; 80   : 		return 30;

  0018e	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  00193	eb 07		 jmp	 SHORT $LN6@GetNumbere

; 81   : 		break;

  00195	eb 05		 jmp	 SHORT $LN6@GetNumbere
$LN1@GetNumbere:

; 82   : 	default:
; 83   : 		return 31;

  00197	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
$LN6@GetNumbere:

; 84   : 	}
; 85   : }

  0019c	5f		 pop	 edi
  0019d	5e		 pop	 esi
  0019e	5b		 pop	 ebx
  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c2 08 00	 ret	 8
  001a5	8d 49 00	 npad	 3
$LN9@GetNumbere:
  001a8	00 00 00 00	 DD	 $LN3@GetNumbere
  001ac	00 00 00 00	 DD	 $LN2@GetNumbere
  001b0	00 00 00 00	 DD	 $LN1@GetNumbere
$LN8@GetNumbere:
  001b4	00		 DB	 0
  001b5	02		 DB	 2
  001b6	01		 DB	 1
  001b7	02		 DB	 2
  001b8	01		 DB	 1
  001b9	02		 DB	 2
  001ba	02		 DB	 2
  001bb	01		 DB	 1
  001bc	02		 DB	 2
  001bd	01		 DB	 1
?GetNumberedDays@CPCBangPointTimeCondition@@QAEHHH@Z ENDP ; CPCBangPointTimeCondition::GetNumberedDays
_TEXT	ENDS
PUBLIC	?ModifyTimeDate@CPCBangPointTimeCondition@@QAEXHPAH00@Z ; CPCBangPointTimeCondition::ModifyTimeDate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc3$ = -12						; size = 4
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
_iDayOfWeek$ = 8					; size = 4
_iYear$ = 12						; size = 4
_iMonth$ = 16						; size = 4
_iDay$ = 20						; size = 4
?ModifyTimeDate@CPCBangPointTimeCondition@@QAEXHPAH00@Z PROC ; CPCBangPointTimeCondition::ModifyTimeDate
; _this$ = ecx

; 88   : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  001c6	53		 push	 ebx
  001c7	56		 push	 esi
  001c8	57		 push	 edi
  001c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   : 	int loc2 = this->GetTimeDate(*iYear, *iMonth, *iDay);

  001cc	8b 45 14	 mov	 eax, DWORD PTR _iDay$[ebp]
  001cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d1	51		 push	 ecx
  001d2	8b 55 10	 mov	 edx, DWORD PTR _iMonth$[ebp]
  001d5	8b 02		 mov	 eax, DWORD PTR [edx]
  001d7	50		 push	 eax
  001d8	8b 4d 0c	 mov	 ecx, DWORD PTR _iYear$[ebp]
  001db	8b 11		 mov	 edx, DWORD PTR [ecx]
  001dd	52		 push	 edx
  001de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e1	e8 00 00 00 00	 call	 ?GetTimeDate@CPCBangPointTimeCondition@@QAEHHHH@Z ; CPCBangPointTimeCondition::GetTimeDate
  001e6	89 45 f8	 mov	 DWORD PTR _loc2$[ebp], eax

; 90   : 	int loc3 = ((loc2 + 7) - iDayOfWeek)%7;

  001e9	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  001ec	83 c0 07	 add	 eax, 7
  001ef	2b 45 08	 sub	 eax, DWORD PTR _iDayOfWeek$[ebp]
  001f2	99		 cdq
  001f3	b9 07 00 00 00	 mov	 ecx, 7
  001f8	f7 f9		 idiv	 ecx
  001fa	89 55 f4	 mov	 DWORD PTR _loc3$[ebp], edx

; 91   : 
; 92   : 	if(*iDay > loc3)

  001fd	8b 45 14	 mov	 eax, DWORD PTR _iDay$[ebp]
  00200	8b 08		 mov	 ecx, DWORD PTR [eax]
  00202	3b 4d f4	 cmp	 ecx, DWORD PTR _loc3$[ebp]
  00205	7e 0f		 jle	 SHORT $LN4@ModifyTime

; 93   : 	{
; 94   : 		*iDay -= loc3;

  00207	8b 45 14	 mov	 eax, DWORD PTR _iDay$[ebp]
  0020a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020c	2b 4d f4	 sub	 ecx, DWORD PTR _loc3$[ebp]
  0020f	8b 55 14	 mov	 edx, DWORD PTR _iDay$[ebp]
  00212	89 0a		 mov	 DWORD PTR [edx], ecx

; 95   : 	}
; 96   : 	else

  00214	eb 54		 jmp	 SHORT $LN5@ModifyTime
$LN4@ModifyTime:

; 97   : 	{
; 98   : 		loc3 -= *iDay;

  00216	8b 45 14	 mov	 eax, DWORD PTR _iDay$[ebp]
  00219	8b 4d f4	 mov	 ecx, DWORD PTR _loc3$[ebp]
  0021c	2b 08		 sub	 ecx, DWORD PTR [eax]
  0021e	89 4d f4	 mov	 DWORD PTR _loc3$[ebp], ecx

; 99   : 
; 100  : 		if(*iMonth == 1)

  00221	8b 45 10	 mov	 eax, DWORD PTR _iMonth$[ebp]
  00224	83 38 01	 cmp	 DWORD PTR [eax], 1
  00227	75 18		 jne	 SHORT $LN2@ModifyTime

; 101  : 		{
; 102  : 			*iMonth = 12;

  00229	8b 45 10	 mov	 eax, DWORD PTR _iMonth$[ebp]
  0022c	c7 00 0c 00 00
	00		 mov	 DWORD PTR [eax], 12	; 0000000cH

; 103  : 			*iYear -= 1;

  00232	8b 45 0c	 mov	 eax, DWORD PTR _iYear$[ebp]
  00235	8b 08		 mov	 ecx, DWORD PTR [eax]
  00237	83 e9 01	 sub	 ecx, 1
  0023a	8b 55 0c	 mov	 edx, DWORD PTR _iYear$[ebp]
  0023d	89 0a		 mov	 DWORD PTR [edx], ecx

; 104  : 		}
; 105  : 		else

  0023f	eb 0d		 jmp	 SHORT $LN1@ModifyTime
$LN2@ModifyTime:

; 106  : 		{
; 107  : 			*iMonth -= 1;

  00241	8b 45 10	 mov	 eax, DWORD PTR _iMonth$[ebp]
  00244	8b 08		 mov	 ecx, DWORD PTR [eax]
  00246	83 e9 01	 sub	 ecx, 1
  00249	8b 55 10	 mov	 edx, DWORD PTR _iMonth$[ebp]
  0024c	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@ModifyTime:

; 108  : 		}
; 109  : 		*iDay = this->GetNumberedDays(*iYear, *iMonth) - loc3;

  0024e	8b 45 10	 mov	 eax, DWORD PTR _iMonth$[ebp]
  00251	8b 08		 mov	 ecx, DWORD PTR [eax]
  00253	51		 push	 ecx
  00254	8b 55 0c	 mov	 edx, DWORD PTR _iYear$[ebp]
  00257	8b 02		 mov	 eax, DWORD PTR [edx]
  00259	50		 push	 eax
  0025a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025d	e8 00 00 00 00	 call	 ?GetNumberedDays@CPCBangPointTimeCondition@@QAEHHH@Z ; CPCBangPointTimeCondition::GetNumberedDays
  00262	2b 45 f4	 sub	 eax, DWORD PTR _loc3$[ebp]
  00265	8b 4d 14	 mov	 ecx, DWORD PTR _iDay$[ebp]
  00268	89 01		 mov	 DWORD PTR [ecx], eax
$LN5@ModifyTime:

; 110  : 	}
; 111  : }

  0026a	5f		 pop	 edi
  0026b	5e		 pop	 esi
  0026c	5b		 pop	 ebx
  0026d	8b e5		 mov	 esp, ebp
  0026f	5d		 pop	 ebp
  00270	c2 10 00	 ret	 16			; 00000010H
?ModifyTimeDate@CPCBangPointTimeCondition@@QAEXHPAH00@Z ENDP ; CPCBangPointTimeCondition::ModifyTimeDate
_TEXT	ENDS
PUBLIC	?CheckUserTimeDate@CPCBangPointTimeCondition@@QAEHHHHHHHHH@Z ; CPCBangPointTimeCondition::CheckUserTimeDate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iUSR_Year$ = 8						; size = 4
_iUSR_Month$ = 12					; size = 4
_iUSR_Day$ = 16						; size = 4
_iUSR_Hour$ = 20					; size = 4
_iSVR_Year$ = 24					; size = 4
_iSVR_Month$ = 28					; size = 4
_iSVR_Day$ = 32						; size = 4
_iSVR_Hour$ = 36					; size = 4
?CheckUserTimeDate@CPCBangPointTimeCondition@@QAEHHHHHHHHH@Z PROC ; CPCBangPointTimeCondition::CheckUserTimeDate
; _this$ = ecx

; 114  : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 44	 sub	 esp, 68			; 00000044H
  00286	53		 push	 ebx
  00287	56		 push	 esi
  00288	57		 push	 edi
  00289	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	if( iUSR_Year == iSVR_Year &&
; 116  : 		iUSR_Month == iSVR_Month &&
; 117  : 		iUSR_Day == iSVR_Day &&
; 118  : 		iUSR_Hour == iSVR_Hour )

  0028c	8b 45 08	 mov	 eax, DWORD PTR _iUSR_Year$[ebp]
  0028f	3b 45 18	 cmp	 eax, DWORD PTR _iSVR_Year$[ebp]
  00292	75 1c		 jne	 SHORT $LN6@CheckUserT
  00294	8b 45 0c	 mov	 eax, DWORD PTR _iUSR_Month$[ebp]
  00297	3b 45 1c	 cmp	 eax, DWORD PTR _iSVR_Month$[ebp]
  0029a	75 14		 jne	 SHORT $LN6@CheckUserT
  0029c	8b 45 10	 mov	 eax, DWORD PTR _iUSR_Day$[ebp]
  0029f	3b 45 20	 cmp	 eax, DWORD PTR _iSVR_Day$[ebp]
  002a2	75 0c		 jne	 SHORT $LN6@CheckUserT
  002a4	8b 45 14	 mov	 eax, DWORD PTR _iUSR_Hour$[ebp]
  002a7	3b 45 24	 cmp	 eax, DWORD PTR _iSVR_Hour$[ebp]
  002aa	75 04		 jne	 SHORT $LN6@CheckUserT

; 119  : 	{
; 120  : 		return 0;

  002ac	33 c0		 xor	 eax, eax
  002ae	eb 5a		 jmp	 SHORT $LN7@CheckUserT
$LN6@CheckUserT:

; 121  : 	}
; 122  : 
; 123  : 	if( (iUSR_Year == iSVR_Year && iUSR_Month == iSVR_Month && iUSR_Day == iSVR_Day && iUSR_Hour > iSVR_Hour) ||
; 124  : 		(iUSR_Year == iSVR_Year && iUSR_Month == iSVR_Month && iUSR_Day > iSVR_Day) ||	
; 125  : 		(iUSR_Year == iSVR_Year && iUSR_Month > iSVR_Month) ||			 
; 126  : 		(iUSR_Year > iSVR_Year) )

  002b0	8b 45 08	 mov	 eax, DWORD PTR _iUSR_Year$[ebp]
  002b3	3b 45 18	 cmp	 eax, DWORD PTR _iSVR_Year$[ebp]
  002b6	75 18		 jne	 SHORT $LN3@CheckUserT
  002b8	8b 45 0c	 mov	 eax, DWORD PTR _iUSR_Month$[ebp]
  002bb	3b 45 1c	 cmp	 eax, DWORD PTR _iSVR_Month$[ebp]
  002be	75 10		 jne	 SHORT $LN3@CheckUserT
  002c0	8b 45 10	 mov	 eax, DWORD PTR _iUSR_Day$[ebp]
  002c3	3b 45 20	 cmp	 eax, DWORD PTR _iSVR_Day$[ebp]
  002c6	75 08		 jne	 SHORT $LN3@CheckUserT
  002c8	8b 45 14	 mov	 eax, DWORD PTR _iUSR_Hour$[ebp]
  002cb	3b 45 24	 cmp	 eax, DWORD PTR _iSVR_Hour$[ebp]
  002ce	7f 30		 jg	 SHORT $LN4@CheckUserT
$LN3@CheckUserT:
  002d0	8b 45 08	 mov	 eax, DWORD PTR _iUSR_Year$[ebp]
  002d3	3b 45 18	 cmp	 eax, DWORD PTR _iSVR_Year$[ebp]
  002d6	75 10		 jne	 SHORT $LN2@CheckUserT
  002d8	8b 45 0c	 mov	 eax, DWORD PTR _iUSR_Month$[ebp]
  002db	3b 45 1c	 cmp	 eax, DWORD PTR _iSVR_Month$[ebp]
  002de	75 08		 jne	 SHORT $LN2@CheckUserT
  002e0	8b 45 10	 mov	 eax, DWORD PTR _iUSR_Day$[ebp]
  002e3	3b 45 20	 cmp	 eax, DWORD PTR _iSVR_Day$[ebp]
  002e6	7f 18		 jg	 SHORT $LN4@CheckUserT
$LN2@CheckUserT:
  002e8	8b 45 08	 mov	 eax, DWORD PTR _iUSR_Year$[ebp]
  002eb	3b 45 18	 cmp	 eax, DWORD PTR _iSVR_Year$[ebp]
  002ee	75 08		 jne	 SHORT $LN1@CheckUserT
  002f0	8b 45 0c	 mov	 eax, DWORD PTR _iUSR_Month$[ebp]
  002f3	3b 45 1c	 cmp	 eax, DWORD PTR _iSVR_Month$[ebp]
  002f6	7f 08		 jg	 SHORT $LN4@CheckUserT
$LN1@CheckUserT:
  002f8	8b 45 08	 mov	 eax, DWORD PTR _iUSR_Year$[ebp]
  002fb	3b 45 18	 cmp	 eax, DWORD PTR _iSVR_Year$[ebp]
  002fe	7e 07		 jle	 SHORT $LN5@CheckUserT
$LN4@CheckUserT:

; 127  : 	{
; 128  : 		return 1;

  00300	b8 01 00 00 00	 mov	 eax, 1
  00305	eb 03		 jmp	 SHORT $LN7@CheckUserT
$LN5@CheckUserT:

; 129  : 	}
; 130  : 
; 131  : 	return -1; //mismatch :)

  00307	83 c8 ff	 or	 eax, -1
$LN7@CheckUserT:

; 132  : }

  0030a	5f		 pop	 edi
  0030b	5e		 pop	 esi
  0030c	5b		 pop	 ebx
  0030d	8b e5		 mov	 esp, ebp
  0030f	5d		 pop	 ebp
  00310	c2 20 00	 ret	 32			; 00000020H
?CheckUserTimeDate@CPCBangPointTimeCondition@@QAEHHHHHHHHH@Z ENDP ; CPCBangPointTimeCondition::CheckUserTimeDate
_TEXT	ENDS
PUBLIC	??_7CPCBangPointTimer@@6B@			; CPCBangPointTimer::`vftable'
PUBLIC	??0CPCBangPointTimer@@QAE@XZ			; CPCBangPointTimer::CPCBangPointTimer
PUBLIC	??_R4CPCBangPointTimer@@6B@			; CPCBangPointTimer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPCBangPointTimer@@@8			; CPCBangPointTimer `RTTI Type Descriptor'
PUBLIC	??_R3CPCBangPointTimer@@8			; CPCBangPointTimer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPCBangPointTimer@@8			; CPCBangPointTimer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPCBangPointTimer@@8		; CPCBangPointTimer::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECPCBangPointTimer@@UAEPAXI@Z:PROC		; CPCBangPointTimer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CPCBangPointTimer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPCBangPointTimer@@8 DD FLAT:??_R0?AVCPCBangPointTimer@@@8 ; CPCBangPointTimer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPCBangPointTimer@@8
rdata$r	ENDS
;	COMDAT ??_R2CPCBangPointTimer@@8
rdata$r	SEGMENT
??_R2CPCBangPointTimer@@8 DD FLAT:??_R1A@?0A@EA@CPCBangPointTimer@@8 ; CPCBangPointTimer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CPCBangPointTimeCondition@@8
rdata$r	ENDS
;	COMDAT ??_R3CPCBangPointTimer@@8
rdata$r	SEGMENT
??_R3CPCBangPointTimer@@8 DD 00H			; CPCBangPointTimer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPCBangPointTimer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPCBangPointTimer@@@8
_DATA	SEGMENT
??_R0?AVCPCBangPointTimer@@@8 DD FLAT:??_7type_info@@6B@ ; CPCBangPointTimer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPCBangPointTimer@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPCBangPointTimer@@6B@
rdata$r	SEGMENT
??_R4CPCBangPointTimer@@6B@ DD 00H			; CPCBangPointTimer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPCBangPointTimer@@@8
	DD	FLAT:??_R3CPCBangPointTimer@@8
rdata$r	ENDS
;	COMDAT ??_7CPCBangPointTimer@@6B@
CONST	SEGMENT
??_7CPCBangPointTimer@@6B@ DD FLAT:??_R4CPCBangPointTimer@@6B@ ; CPCBangPointTimer::`vftable'
	DD	FLAT:??_ECPCBangPointTimer@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPCBangPointTimer@@QAE@XZ PROC			; CPCBangPointTimer::CPCBangPointTimer
; _this$ = ecx

; 136  : {

  00320	55		 push	 ebp
  00321	8b ec		 mov	 ebp, esp
  00323	83 ec 44	 sub	 esp, 68			; 00000044H
  00326	53		 push	 ebx
  00327	56		 push	 esi
  00328	57		 push	 edi
  00329	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0032c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032f	e8 00 00 00 00	 call	 ??0CPCBangPointTimeCondition@@QAE@XZ ; CPCBangPointTimeCondition::CPCBangPointTimeCondition
  00334	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00337	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPCBangPointTimer@@6B@
  0033d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00340	c7 40 04 d0 07
	00 00		 mov	 DWORD PTR [eax+4], 2000	; 000007d0H
  00347	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0034a	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1
  00351	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00354	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1
  0035b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0035e	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00365	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00368	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  0036f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00372	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00379	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0037c	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 137  : 	return;
; 138  : }

  00383	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00386	5f		 pop	 edi
  00387	5e		 pop	 esi
  00388	5b		 pop	 ebx
  00389	8b e5		 mov	 esp, ebp
  0038b	5d		 pop	 ebp
  0038c	c3		 ret	 0
??0CPCBangPointTimer@@QAE@XZ ENDP			; CPCBangPointTimer::CPCBangPointTimer
_TEXT	ENDS
PUBLIC	??1CPCBangPointTimer@@UAE@XZ			; CPCBangPointTimer::~CPCBangPointTimer
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCPCBangPointTimer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPCBangPointTimer@@UAEPAXI@Z PROC			; CPCBangPointTimer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CPCBangPointTimer@@UAE@XZ ; CPCBangPointTimer::~CPCBangPointTimer
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCPCBangPointTimer@@UAEPAXI@Z ENDP			; CPCBangPointTimer::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPCBangPointTimer@@UAE@XZ PROC			; CPCBangPointTimer::~CPCBangPointTimer
; _this$ = ecx

; 142  : {

  00390	55		 push	 ebp
  00391	8b ec		 mov	 ebp, esp
  00393	83 ec 44	 sub	 esp, 68			; 00000044H
  00396	53		 push	 ebx
  00397	56		 push	 esi
  00398	57		 push	 edi
  00399	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0039c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0039f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPCBangPointTimer@@6B@

; 143  : 	return;
; 144  : }

  003a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a8	e8 00 00 00 00	 call	 ??1CPCBangPointTimeCondition@@UAE@XZ ; CPCBangPointTimeCondition::~CPCBangPointTimeCondition
  003ad	5f		 pop	 edi
  003ae	5e		 pop	 esi
  003af	5b		 pop	 ebx
  003b0	8b e5		 mov	 esp, ebp
  003b2	5d		 pop	 ebp
  003b3	c3		 ret	 0
??1CPCBangPointTimer@@UAE@XZ ENDP			; CPCBangPointTimer::~CPCBangPointTimer
_TEXT	ENDS
PUBLIC	?SetResetTimeData@CPCBangPointTimer@@QAEXHHHHHHP6AXPAV1@H@ZH@Z ; CPCBangPointTimer::SetResetTimeData
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iYear$ = 8						; size = 4
_iMonth$ = 12						; size = 4
_iDay$ = 16						; size = 4
_iHour$ = 20						; size = 4
_iSvrDayWeek$ = 24					; size = 4
_iSvrHour$ = 28						; size = 4
_iTUserIndex$ = 32					; size = 4
_aIndex$ = 36						; size = 4
?SetResetTimeData@CPCBangPointTimer@@QAEXHHHHHHP6AXPAV1@H@ZH@Z PROC ; CPCBangPointTimer::SetResetTimeData
; _this$ = ecx

; 148  : {

  003c0	55		 push	 ebp
  003c1	8b ec		 mov	 ebp, esp
  003c3	83 ec 44	 sub	 esp, 68			; 00000044H
  003c6	53		 push	 ebx
  003c7	56		 push	 esi
  003c8	57		 push	 edi
  003c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 149  : 	//User Data
; 150  : 	this->m_iUSR_ResetYear = iYear;

  003cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003cf	8b 4d 08	 mov	 ecx, DWORD PTR _iYear$[ebp]
  003d2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 151  : 	this->m_iUSR_ResetMonth = iMonth;

  003d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003d8	8b 4d 0c	 mov	 ecx, DWORD PTR _iMonth$[ebp]
  003db	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 152  : 	this->m_iUSR_ResetDay = iDay;

  003de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e1	8b 4d 10	 mov	 ecx, DWORD PTR _iDay$[ebp]
  003e4	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 153  : 	this->m_iUSR_ResetHour = iHour;

  003e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003ea	8b 4d 14	 mov	 ecx, DWORD PTR _iHour$[ebp]
  003ed	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 154  : 
; 155  : 	//CommonServer Data
; 156  : 	this->m_iSVR_ResetDayOfWeek = iSvrDayWeek;

  003f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f3	8b 4d 18	 mov	 ecx, DWORD PTR _iSvrDayWeek$[ebp]
  003f6	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 157  : 	this->m_iSVR_ResetHour = iSvrHour;

  003f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003fc	8b 4d 1c	 mov	 ecx, DWORD PTR _iSvrHour$[ebp]
  003ff	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 158  : 	this->m_iTUserIndex = iTUserIndex;

  00402	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00405	8b 4d 20	 mov	 ecx, DWORD PTR _iTUserIndex$[ebp]
  00408	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 159  : 
; 160  : 	this->m_iUserIndex = aIndex;

  0040b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0040e	8b 4d 24	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00411	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 161  : }

  00414	5f		 pop	 edi
  00415	5e		 pop	 esi
  00416	5b		 pop	 ebx
  00417	8b e5		 mov	 esp, ebp
  00419	5d		 pop	 ebp
  0041a	c2 20 00	 ret	 32			; 00000020H
?SetResetTimeData@CPCBangPointTimer@@QAEXHHHHHHP6AXPAV1@H@ZH@Z ENDP ; CPCBangPointTimer::SetResetTimeData
_TEXT	ENDS
PUBLIC	?SetCheckTimer@CPCBangPointTimer@@QAEXH@Z	; CPCBangPointTimer::SetCheckTimer
PUBLIC	?Clear@CPCBangPointTimer@@QAEXXZ		; CPCBangPointTimer::Clear
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CPCBangPointTimer@@QAEXXZ PROC			; CPCBangPointTimer::Clear
; _this$ = ecx

; 165  : {

  00420	55		 push	 ebp
  00421	8b ec		 mov	 ebp, esp
  00423	83 ec 44	 sub	 esp, 68			; 00000044H
  00426	53		 push	 ebx
  00427	56		 push	 esi
  00428	57		 push	 edi
  00429	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 	this->SetCheckTimer(FALSE);

  0042c	6a 00		 push	 0
  0042e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00431	e8 00 00 00 00	 call	 ?SetCheckTimer@CPCBangPointTimer@@QAEXH@Z ; CPCBangPointTimer::SetCheckTimer

; 167  : }

  00436	5f		 pop	 edi
  00437	5e		 pop	 esi
  00438	5b		 pop	 ebx
  00439	8b e5		 mov	 esp, ebp
  0043b	5d		 pop	 ebp
  0043c	c3		 ret	 0
?Clear@CPCBangPointTimer@@QAEXXZ ENDP			; CPCBangPointTimer::Clear
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CheckTime@CPCBangPointTimer@@QAEHXZ		; CPCBangPointTimer::CheckTime
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_m_tmTime$ = -40					; size = 16
_iSVR_ResetHour$ = -24					; size = 4
_iSVR_iDay$ = -20					; size = 4
_iSVR_iMonth$ = -16					; size = 4
_iSVR_iYear$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?CheckTime@CPCBangPointTimer@@QAEHXZ PROC		; CPCBangPointTimer::CheckTime
; _this$ = ecx

; 171  : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	83 ec 68	 sub	 esp, 104		; 00000068H
  00446	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0044b	33 c5		 xor	 eax, ebp
  0044d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00450	53		 push	 ebx
  00451	56		 push	 esi
  00452	57		 push	 edi
  00453	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 172  : 	int iSVR_iYear, iSVR_iMonth, iSVR_iDay, iSVR_ResetHour;
; 173  : 	SYSTEMTIME m_tmTime; //
; 174  : 
; 175  : 	if(this->m_bSetTimer == FALSE) //always false lol

  00456	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00459	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0045d	75 0a		 jne	 SHORT $LN4@CheckTime

; 176  : 	{
; 177  : 		return 1;

  0045f	b8 01 00 00 00	 mov	 eax, 1
  00464	e9 3d 01 00 00	 jmp	 $LN5@CheckTime
$LN4@CheckTime:

; 178  : 	}
; 179  : 
; 180  : 	GetLocalTime(&m_tmTime);

  00469	8d 45 d8	 lea	 eax, DWORD PTR _m_tmTime$[ebp]
  0046c	50		 push	 eax
  0046d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 181  : 
; 182  : 	if( this->m_tmPcBangResetTime.wYear == m_tmTime.wYear &&
; 183  : 		this->m_tmPcBangResetTime.wMonth == m_tmTime.wMonth &&
; 184  : 		this->m_tmPcBangResetTime.wDay == m_tmTime.wDay &&
; 185  : 		this->m_tmPcBangResetTime.wHour == m_tmTime.wHour)

  00473	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00476	0f b7 48 24	 movzx	 ecx, WORD PTR [eax+36]
  0047a	0f b7 55 d8	 movzx	 edx, WORD PTR _m_tmTime$[ebp]
  0047e	3b ca		 cmp	 ecx, edx
  00480	75 37		 jne	 SHORT $LN3@CheckTime
  00482	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00485	0f b7 48 26	 movzx	 ecx, WORD PTR [eax+38]
  00489	0f b7 55 da	 movzx	 edx, WORD PTR _m_tmTime$[ebp+2]
  0048d	3b ca		 cmp	 ecx, edx
  0048f	75 28		 jne	 SHORT $LN3@CheckTime
  00491	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00494	0f b7 48 2a	 movzx	 ecx, WORD PTR [eax+42]
  00498	0f b7 55 de	 movzx	 edx, WORD PTR _m_tmTime$[ebp+6]
  0049c	3b ca		 cmp	 ecx, edx
  0049e	75 19		 jne	 SHORT $LN3@CheckTime
  004a0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004a3	0f b7 48 2c	 movzx	 ecx, WORD PTR [eax+44]
  004a7	0f b7 55 e0	 movzx	 edx, WORD PTR _m_tmTime$[ebp+8]
  004ab	3b ca		 cmp	 ecx, edx
  004ad	75 0a		 jne	 SHORT $LN3@CheckTime

; 186  : 	{
; 187  : 		return 1;

  004af	b8 01 00 00 00	 mov	 eax, 1
  004b4	e9 ed 00 00 00	 jmp	 $LN5@CheckTime
$LN3@CheckTime:

; 188  : 	}
; 189  : 
; 190  : 	this->m_tmPcBangResetTime = m_tmTime;

  004b9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004bc	83 c0 24	 add	 eax, 36			; 00000024H
  004bf	8b 4d d8	 mov	 ecx, DWORD PTR _m_tmTime$[ebp]
  004c2	89 08		 mov	 DWORD PTR [eax], ecx
  004c4	8b 55 dc	 mov	 edx, DWORD PTR _m_tmTime$[ebp+4]
  004c7	89 50 04	 mov	 DWORD PTR [eax+4], edx
  004ca	8b 4d e0	 mov	 ecx, DWORD PTR _m_tmTime$[ebp+8]
  004cd	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  004d0	8b 55 e4	 mov	 edx, DWORD PTR _m_tmTime$[ebp+12]
  004d3	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 191  : 
; 192  : 	iSVR_iYear = m_tmTime.wYear; //loc2

  004d6	0f b7 45 d8	 movzx	 eax, WORD PTR _m_tmTime$[ebp]
  004da	89 45 f4	 mov	 DWORD PTR _iSVR_iYear$[ebp], eax

; 193  : 	iSVR_iMonth = m_tmTime.wMonth; //loc3

  004dd	0f b7 45 da	 movzx	 eax, WORD PTR _m_tmTime$[ebp+2]
  004e1	89 45 f0	 mov	 DWORD PTR _iSVR_iMonth$[ebp], eax

; 194  : 	iSVR_iDay = m_tmTime.wDay; //loc4

  004e4	0f b7 45 de	 movzx	 eax, WORD PTR _m_tmTime$[ebp+6]
  004e8	89 45 ec	 mov	 DWORD PTR _iSVR_iDay$[ebp], eax

; 195  : 	iSVR_ResetHour = this->m_iSVR_ResetHour; //loc5

  004eb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004ee	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004f1	89 4d e8	 mov	 DWORD PTR _iSVR_ResetHour$[ebp], ecx

; 196  : 
; 197  : 	if( this->m_iSVR_ResetHour > m_tmTime.wHour )

  004f4	0f b7 45 e0	 movzx	 eax, WORD PTR _m_tmTime$[ebp+8]
  004f8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004fb	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  004fe	7e 09		 jle	 SHORT $LN2@CheckTime

; 198  : 	{
; 199  : 		iSVR_iDay--;

  00500	8b 45 ec	 mov	 eax, DWORD PTR _iSVR_iDay$[ebp]
  00503	83 e8 01	 sub	 eax, 1
  00506	89 45 ec	 mov	 DWORD PTR _iSVR_iDay$[ebp], eax
$LN2@CheckTime:

; 200  : 	}
; 201  : 
; 202  : 	this->ModifyTimeDate(this->m_iSVR_ResetDayOfWeek, &iSVR_iYear, &iSVR_iMonth, &iSVR_iDay);

  00509	8d 45 ec	 lea	 eax, DWORD PTR _iSVR_iDay$[ebp]
  0050c	50		 push	 eax
  0050d	8d 4d f0	 lea	 ecx, DWORD PTR _iSVR_iMonth$[ebp]
  00510	51		 push	 ecx
  00511	8d 55 f4	 lea	 edx, DWORD PTR _iSVR_iYear$[ebp]
  00514	52		 push	 edx
  00515	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00518	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0051b	51		 push	 ecx
  0051c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0051f	e8 00 00 00 00	 call	 ?ModifyTimeDate@CPCBangPointTimeCondition@@QAEXHPAH00@Z ; CPCBangPointTimeCondition::ModifyTimeDate

; 203  : 
; 204  : 	if(this->CheckUserTimeDate(this->m_iUSR_ResetYear, this->m_iUSR_ResetMonth, this->m_iUSR_ResetDay, this->m_iUSR_ResetHour, iSVR_iYear, iSVR_iMonth, iSVR_iDay, iSVR_ResetHour) < 0)

  00524	8b 45 e8	 mov	 eax, DWORD PTR _iSVR_ResetHour$[ebp]
  00527	50		 push	 eax
  00528	8b 4d ec	 mov	 ecx, DWORD PTR _iSVR_iDay$[ebp]
  0052b	51		 push	 ecx
  0052c	8b 55 f0	 mov	 edx, DWORD PTR _iSVR_iMonth$[ebp]
  0052f	52		 push	 edx
  00530	8b 45 f4	 mov	 eax, DWORD PTR _iSVR_iYear$[ebp]
  00533	50		 push	 eax
  00534	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00537	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0053a	52		 push	 edx
  0053b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0053e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00541	51		 push	 ecx
  00542	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00545	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00548	50		 push	 eax
  00549	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0054c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0054f	52		 push	 edx
  00550	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00553	e8 00 00 00 00	 call	 ?CheckUserTimeDate@CPCBangPointTimeCondition@@QAEHHHHHHHHH@Z ; CPCBangPointTimeCondition::CheckUserTimeDate
  00558	85 c0		 test	 eax, eax
  0055a	7d 45		 jge	 SHORT $LN1@CheckTime

; 205  : 	{
; 206  : 		this->m_iUSR_ResetYear = m_tmTime.wYear;

  0055c	0f b7 45 d8	 movzx	 eax, WORD PTR _m_tmTime$[ebp]
  00560	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00563	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 207  : 		this->m_iUSR_ResetMonth = m_tmTime.wMonth;

  00566	0f b7 45 da	 movzx	 eax, WORD PTR _m_tmTime$[ebp+2]
  0056a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0056d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 208  : 		this->m_iUSR_ResetDay = m_tmTime.wDay;

  00570	0f b7 45 de	 movzx	 eax, WORD PTR _m_tmTime$[ebp+6]
  00574	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00577	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 209  : 		this->m_iUSR_ResetHour = m_tmTime.wHour;

  0057a	0f b7 45 e0	 movzx	 eax, WORD PTR _m_tmTime$[ebp+8]
  0057e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00581	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 210  : 		this->m_iTUserIndex(this, this->m_iUserIndex); //identical ok you are missing the other call...

  00584	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00587	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0058a	51		 push	 ecx
  0058b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0058e	52		 push	 edx
  0058f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00592	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00595	ff d1		 call	 ecx
  00597	83 c4 08	 add	 esp, 8

; 211  : 		return 2;

  0059a	b8 02 00 00 00	 mov	 eax, 2
  0059f	eb 05		 jmp	 SHORT $LN5@CheckTime
$LN1@CheckTime:

; 212  : 	}
; 213  : 
; 214  : 	return 1;

  005a1	b8 01 00 00 00	 mov	 eax, 1
$LN5@CheckTime:

; 215  : }

  005a6	5f		 pop	 edi
  005a7	5e		 pop	 esi
  005a8	5b		 pop	 ebx
  005a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005ac	33 cd		 xor	 ecx, ebp
  005ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005b3	8b e5		 mov	 esp, ebp
  005b5	5d		 pop	 ebp
  005b6	c3		 ret	 0
?CheckTime@CPCBangPointTimer@@QAEHXZ ENDP		; CPCBangPointTimer::CheckTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
_bResult$ = 8						; size = 4
?SetCheckTimer@CPCBangPointTimer@@QAEXH@Z PROC		; CPCBangPointTimer::SetCheckTimer
; _this$ = ecx

; 219  : {

  005c0	55		 push	 ebp
  005c1	8b ec		 mov	 ebp, esp
  005c3	83 ec 44	 sub	 esp, 68			; 00000044H
  005c6	53		 push	 ebx
  005c7	56		 push	 esi
  005c8	57		 push	 edi
  005c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 220  : 	this->m_bSetTimer = bResult;

  005cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005cf	8b 4d 08	 mov	 ecx, DWORD PTR _bResult$[ebp]
  005d2	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 221  : }

  005d5	5f		 pop	 edi
  005d6	5e		 pop	 esi
  005d7	5b		 pop	 ebx
  005d8	8b e5		 mov	 esp, ebp
  005da	5d		 pop	 ebp
  005db	c2 04 00	 ret	 4
?SetCheckTimer@CPCBangPointTimer@@QAEXH@Z ENDP		; CPCBangPointTimer::SetCheckTimer
_TEXT	ENDS
PUBLIC	?ChangeTimeDate@CPCBangPointTimer@@QAEXPAH000@Z	; CPCBangPointTimer::ChangeTimeDate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iYear$ = 8						; size = 4
_iMonth$ = 12						; size = 4
_iDay$ = 16						; size = 4
_iHour$ = 20						; size = 4
?ChangeTimeDate@CPCBangPointTimer@@QAEXPAH000@Z PROC	; CPCBangPointTimer::ChangeTimeDate
; _this$ = ecx

; 225  : {

  005e0	55		 push	 ebp
  005e1	8b ec		 mov	 ebp, esp
  005e3	83 ec 44	 sub	 esp, 68			; 00000044H
  005e6	53		 push	 ebx
  005e7	56		 push	 esi
  005e8	57		 push	 edi
  005e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  : 	this->m_iUSR_ResetYear = *iYear;

  005ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005ef	8b 4d 08	 mov	 ecx, DWORD PTR _iYear$[ebp]
  005f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  005f4	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 227  : 	this->m_iUSR_ResetMonth = *iMonth;

  005f7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005fa	8b 4d 0c	 mov	 ecx, DWORD PTR _iMonth$[ebp]
  005fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  005ff	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 228  : 	this->m_iUSR_ResetDay = *iDay;

  00602	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00605	8b 4d 10	 mov	 ecx, DWORD PTR _iDay$[ebp]
  00608	8b 11		 mov	 edx, DWORD PTR [ecx]
  0060a	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 229  : 	this->m_iUSR_ResetHour = *iHour;

  0060d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00610	8b 4d 14	 mov	 ecx, DWORD PTR _iHour$[ebp]
  00613	8b 11		 mov	 edx, DWORD PTR [ecx]
  00615	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 230  : }

  00618	5f		 pop	 edi
  00619	5e		 pop	 esi
  0061a	5b		 pop	 ebx
  0061b	8b e5		 mov	 esp, ebp
  0061d	5d		 pop	 ebp
  0061e	c2 10 00	 ret	 16			; 00000010H
?ChangeTimeDate@CPCBangPointTimer@@QAEXPAH000@Z ENDP	; CPCBangPointTimer::ChangeTimeDate
_TEXT	ENDS
PUBLIC	?Init@CPCBangPointSystem@@QAEXXZ		; CPCBangPointSystem::Init
PUBLIC	??_7CPCBangPointSystem@@6B@			; CPCBangPointSystem::`vftable'
PUBLIC	??0CPCBangPointSystem@@QAE@XZ			; CPCBangPointSystem::CPCBangPointSystem
PUBLIC	??_R4CPCBangPointSystem@@6B@			; CPCBangPointSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPCBangPointSystem@@@8			; CPCBangPointSystem `RTTI Type Descriptor'
PUBLIC	??_R3CPCBangPointSystem@@8			; CPCBangPointSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPCBangPointSystem@@8			; CPCBangPointSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPCBangPointSystem@@8		; CPCBangPointSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECPCBangPointSystem@@UAEPAXI@Z:PROC		; CPCBangPointSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CPCBangPointSystem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPCBangPointSystem@@8 DD FLAT:??_R0?AVCPCBangPointSystem@@@8 ; CPCBangPointSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPCBangPointSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CPCBangPointSystem@@8
rdata$r	SEGMENT
??_R2CPCBangPointSystem@@8 DD FLAT:??_R1A@?0A@EA@CPCBangPointSystem@@8 ; CPCBangPointSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPCBangPointSystem@@8
rdata$r	SEGMENT
??_R3CPCBangPointSystem@@8 DD 00H			; CPCBangPointSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPCBangPointSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPCBangPointSystem@@@8
_DATA	SEGMENT
??_R0?AVCPCBangPointSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CPCBangPointSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPCBangPointSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPCBangPointSystem@@6B@
rdata$r	SEGMENT
??_R4CPCBangPointSystem@@6B@ DD 00H			; CPCBangPointSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPCBangPointSystem@@@8
	DD	FLAT:??_R3CPCBangPointSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CPCBangPointSystem@@6B@
CONST	SEGMENT
??_7CPCBangPointSystem@@6B@ DD FLAT:??_R4CPCBangPointSystem@@6B@ ; CPCBangPointSystem::`vftable'
	DD	FLAT:??_ECPCBangPointSystem@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPCBangPointSystem@@QAE@XZ PROC			; CPCBangPointSystem::CPCBangPointSystem
; _this$ = ecx

; 252  : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp
  00633	83 ec 44	 sub	 esp, 68			; 00000044H
  00636	53		 push	 ebx
  00637	56		 push	 esi
  00638	57		 push	 edi
  00639	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0063c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0063f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPCBangPointSystem@@6B@

; 253  : 	this->m_bPointSystemOn = FALSE;

  00645	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00648	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 254  : 	this->m_bPointRankEvent = FALSE;

  0064f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00652	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 255  : 	g_btPcBangPointSystemLevel = 1;

  00659	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_btPcBangPointSystemLevel@@3EA, 1 ; g_btPcBangPointSystemLevel

; 256  : 	this->m_btPcBangShopNumber = 14;

  00660	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00663	c6 40 10 0e	 mov	 BYTE PTR [eax+16], 14	; 0000000eH

; 257  : 	this->Init();

  00667	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0066a	e8 00 00 00 00	 call	 ?Init@CPCBangPointSystem@@QAEXXZ ; CPCBangPointSystem::Init

; 258  : }

  0066f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00672	5f		 pop	 edi
  00673	5e		 pop	 esi
  00674	5b		 pop	 ebx
  00675	8b e5		 mov	 esp, ebp
  00677	5d		 pop	 ebp
  00678	c3		 ret	 0
??0CPCBangPointSystem@@QAE@XZ ENDP			; CPCBangPointSystem::CPCBangPointSystem
_TEXT	ENDS
PUBLIC	??1CPCBangPointSystem@@UAE@XZ			; CPCBangPointSystem::~CPCBangPointSystem
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCPCBangPointSystem@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPCBangPointSystem@@UAEPAXI@Z PROC			; CPCBangPointSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CPCBangPointSystem@@UAE@XZ ; CPCBangPointSystem::~CPCBangPointSystem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@3
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@3:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCPCBangPointSystem@@UAEPAXI@Z ENDP			; CPCBangPointSystem::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPCBangPointSystem@@UAE@XZ PROC			; CPCBangPointSystem::~CPCBangPointSystem
; _this$ = ecx

; 261  : {

  00680	55		 push	 ebp
  00681	8b ec		 mov	 ebp, esp
  00683	83 ec 44	 sub	 esp, 68			; 00000044H
  00686	53		 push	 ebx
  00687	56		 push	 esi
  00688	57		 push	 edi
  00689	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0068c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0068f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPCBangPointSystem@@6B@

; 262  : 
; 263  : }

  00695	5f		 pop	 edi
  00696	5e		 pop	 esi
  00697	5b		 pop	 ebx
  00698	8b e5		 mov	 esp, ebp
  0069a	5d		 pop	 ebp
  0069b	c3		 ret	 0
??1CPCBangPointSystem@@UAE@XZ ENDP			; CPCBangPointSystem::~CPCBangPointSystem
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$233522 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CPCBangPointSystem@@QAEXXZ PROC			; CPCBangPointSystem::Init
; _this$ = ecx

; 266  : {

  006a0	55		 push	 ebp
  006a1	8b ec		 mov	 ebp, esp
  006a3	83 ec 48	 sub	 esp, 72			; 00000048H
  006a6	53		 push	 ebx
  006a7	56		 push	 esi
  006a8	57		 push	 edi
  006a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 267  : 	for (int i = 0; i <= MAX_PCBANG_ITEM_COUNT; i++)

  006ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$233522[ebp], 0
  006b3	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  006b5	8b 45 f8	 mov	 eax, DWORD PTR _i$233522[ebp]
  006b8	83 c0 01	 add	 eax, 1
  006bb	89 45 f8	 mov	 DWORD PTR _i$233522[ebp], eax
$LN3@Init:
  006be	83 7d f8 06	 cmp	 DWORD PTR _i$233522[ebp], 6
  006c2	7f 2d		 jg	 SHORT $LN4@Init

; 268  : 	{
; 269  : 		memset(&this->m_PcBangSystem[i], 0, sizeof(this->m_PcBangSystem[i]));

  006c4	6a 18		 push	 24			; 00000018H
  006c6	6a 00		 push	 0
  006c8	8b 45 f8	 mov	 eax, DWORD PTR _i$233522[ebp]
  006cb	6b c0 18	 imul	 eax, 24			; 00000018H
  006ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006d1	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  006d5	52		 push	 edx
  006d6	e8 00 00 00 00	 call	 _memset
  006db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 270  : 		this->m_PcBangSystem[i].Index = -1;

  006de	8b 45 f8	 mov	 eax, DWORD PTR _i$233522[ebp]
  006e1	6b c0 18	 imul	 eax, 24			; 00000018H
  006e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e7	c7 44 01 14 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax+20], -1

; 271  : 	}

  006ef	eb c4		 jmp	 SHORT $LN2@Init
$LN4@Init:

; 272  : }

  006f1	5f		 pop	 edi
  006f2	5e		 pop	 esi
  006f3	5b		 pop	 ebx
  006f4	8b e5		 mov	 esp, ebp
  006f6	5d		 pop	 ebp
  006f7	c3		 ret	 0
?Init@CPCBangPointSystem@@QAEXXZ ENDP			; CPCBangPointSystem::Init
_TEXT	ENDS
PUBLIC	??_C@_0FB@EFBNKEEK@?$FLPCBangPointSystem?$FN?$FLSetPCBangPoi@ ; `string'
PUBLIC	??_C@_0BE@NPBBFCEO@PCBangAddExperience?$AA@	; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_0BA@EPKHAMIK@PCBangResetHour?$AA@		; `string'
PUBLIC	??_C@_0BF@MGMAKGGP@PCBangResetDayOfWeek?$AA@	; `string'
PUBLIC	??_C@_0BO@ECDPNBAK@PCBangPointFeverMultipleValue?$AA@ ; `string'
PUBLIC	??_C@_0BI@NPAJILED@PCBangPointFeverEndHour?$AA@	; `string'
PUBLIC	??_C@_0BK@CLHDOELN@PCBangPointFeverStartHour?$AA@ ; `string'
PUBLIC	??_C@_0P@HABBLMLD@PCBangMaxPoint?$AA@		; `string'
PUBLIC	??_C@_0BP@PNIMHFPA@PCBangPointCommonRuleTimePoint?$AA@ ; `string'
PUBLIC	??_C@_0BK@GNCMODK@PCBangPointCommonRuleTime?$AA@ ; `string'
PUBLIC	??_C@_0BO@KJAFKACF@PCBangPointFirstRuleTimePoint?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JPIIKFLP@PCBangPointFirstRuleTime?$AA@ ; `string'
PUBLIC	??_C@_0BI@EGCJFFDF@PCBangPointRankingEvent?$AA@	; `string'
PUBLIC	??_C@_0BH@MBOBKADC@PCBangPointSystemLevel?$AA@	; `string'
PUBLIC	??_C@_0P@EMJDPFDH@GameServerInfo?$AA@		; `string'
PUBLIC	??_C@_0BE@KLAKJAFG@PCBangPointSystemOn?$AA@	; `string'
PUBLIC	??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@	; `string'
PUBLIC	??_C@_0DI@HNBKFLKH@?$FLPCBangPointSystem?$FN?5Loading?5Exce@ ; `string'
PUBLIC	??_C@_0CI@KDHNLGGF@?$FLPCBangPointSystem?$FN?5?9?5?$CFs?5file?5is@ ; `string'
PUBLIC	??_C@_0DB@ICJBIAPN@?$FLPCBangPointSystem?$FN?5?9?5Exceed?5Max@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CF@CBPEGMGA@?$FLPCBangPointSystem?$FN?5?9?5Can?8t?5Open@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0DI@OHBCGPFP@?$FLPCBangPointSystem?$FN?5?9?5File?5load?5@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@CPCBangPointSystem@@QAEHPAD@Z		; CPCBangPointSystem::Load
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_atof:PROC
EXTRN	__imp__GetPrivateProfileStringA@24:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_fclose:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_fopen:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_strcmp:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
	ALIGN	4

_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0FB@EFBNKEEK@?$FLPCBangPointSystem?$FN?$FLSetPCBangPoi@
CONST	SEGMENT
??_C@_0FB@EFBNKEEK@?$FLPCBangPointSystem?$FN?$FLSetPCBangPoi@ DB '[PCBang'
	DB	'PointSystem][SetPCBangPointInfo] SystemOn:%d, Level:%d, Ranki'
	DB	'ngEventOn:%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NPBBFCEO@PCBangAddExperience?$AA@
CONST	SEGMENT
??_C@_0BE@NPBBFCEO@PCBangAddExperience?$AA@ DB 'PCBangAddExperience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EPKHAMIK@PCBangResetHour?$AA@
CONST	SEGMENT
??_C@_0BA@EPKHAMIK@PCBangResetHour?$AA@ DB 'PCBangResetHour', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MGMAKGGP@PCBangResetDayOfWeek?$AA@
CONST	SEGMENT
??_C@_0BF@MGMAKGGP@PCBangResetDayOfWeek?$AA@ DB 'PCBangResetDayOfWeek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ECDPNBAK@PCBangPointFeverMultipleValue?$AA@
CONST	SEGMENT
??_C@_0BO@ECDPNBAK@PCBangPointFeverMultipleValue?$AA@ DB 'PCBangPointFeve'
	DB	'rMultipleValue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NPAJILED@PCBangPointFeverEndHour?$AA@
CONST	SEGMENT
??_C@_0BI@NPAJILED@PCBangPointFeverEndHour?$AA@ DB 'PCBangPointFeverEndHo'
	DB	'ur', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CLHDOELN@PCBangPointFeverStartHour?$AA@
CONST	SEGMENT
??_C@_0BK@CLHDOELN@PCBangPointFeverStartHour?$AA@ DB 'PCBangPointFeverSta'
	DB	'rtHour', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HABBLMLD@PCBangMaxPoint?$AA@
CONST	SEGMENT
??_C@_0P@HABBLMLD@PCBangMaxPoint?$AA@ DB 'PCBangMaxPoint', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PNIMHFPA@PCBangPointCommonRuleTimePoint?$AA@
CONST	SEGMENT
??_C@_0BP@PNIMHFPA@PCBangPointCommonRuleTimePoint?$AA@ DB 'PCBangPointCom'
	DB	'monRuleTimePoint', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GNCMODK@PCBangPointCommonRuleTime?$AA@
CONST	SEGMENT
??_C@_0BK@GNCMODK@PCBangPointCommonRuleTime?$AA@ DB 'PCBangPointCommonRul'
	DB	'eTime', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KJAFKACF@PCBangPointFirstRuleTimePoint?$AA@
CONST	SEGMENT
??_C@_0BO@KJAFKACF@PCBangPointFirstRuleTimePoint?$AA@ DB 'PCBangPointFirs'
	DB	'tRuleTimePoint', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JPIIKFLP@PCBangPointFirstRuleTime?$AA@
CONST	SEGMENT
??_C@_0BJ@JPIIKFLP@PCBangPointFirstRuleTime?$AA@ DB 'PCBangPointFirstRule'
	DB	'Time', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EGCJFFDF@PCBangPointRankingEvent?$AA@
CONST	SEGMENT
??_C@_0BI@EGCJFFDF@PCBangPointRankingEvent?$AA@ DB 'PCBangPointRankingEve'
	DB	'nt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MBOBKADC@PCBangPointSystemLevel?$AA@
CONST	SEGMENT
??_C@_0BH@MBOBKADC@PCBangPointSystemLevel?$AA@ DB 'PCBangPointSystemLevel'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
CONST	SEGMENT
??_C@_0P@EMJDPFDH@GameServerInfo?$AA@ DB 'GameServerInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KLAKJAFG@PCBangPointSystemOn?$AA@
CONST	SEGMENT
??_C@_0BE@KLAKJAFG@PCBangPointSystemOn?$AA@ DB 'PCBangPointSystemOn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
CONST	SEGMENT
??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@ DB 'commonserver.cfg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HNBKFLKH@?$FLPCBangPointSystem?$FN?5Loading?5Exce@
CONST	SEGMENT
??_C@_0DI@HNBKFLKH@?$FLPCBangPointSystem?$FN?5Loading?5Exce@ DB '[PCBangP'
	DB	'ointSystem] Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KDHNLGGF@?$FLPCBangPointSystem?$FN?5?9?5?$CFs?5file?5is@
CONST	SEGMENT
??_C@_0CI@KDHNLGGF@?$FLPCBangPointSystem?$FN?5?9?5?$CFs?5file?5is@ DB '[P'
	DB	'CBangPointSystem] - %s file is Loaded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@ICJBIAPN@?$FLPCBangPointSystem?$FN?5?9?5Exceed?5Max@
CONST	SEGMENT
??_C@_0DB@ICJBIAPN@?$FLPCBangPointSystem?$FN?5?9?5Exceed?5Max@ DB '[PCBan'
	DB	'gPointSystem] - Exceed Max Item Count (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CBPEGMGA@?$FLPCBangPointSystem?$FN?5?9?5Can?8t?5Open@
CONST	SEGMENT
??_C@_0CF@CBPEGMGA@?$FLPCBangPointSystem?$FN?5?9?5Can?8t?5Open@ DB '[PCBa'
	DB	'ngPointSystem] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OHBCGPFP@?$FLPCBangPointSystem?$FN?5?9?5File?5load?5@
CONST	SEGMENT
??_C@_0DI@OHBCGPFP@?$FLPCBangPointSystem?$FN?5?9?5File?5load?5@ DB '[PCBa'
	DB	'ngPointSystem] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
xdata$x	SEGMENT
__catchsym$?Load@CPCBangPointSystem@@QAEHPAD@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Load@CPCBangPointSystem@@QAEHPAD@Z$0
__unwindtable$?Load@CPCBangPointSystem@@QAEHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Load@CPCBangPointSystem@@QAEHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Load@CPCBangPointSystem@@QAEHPAD@Z$2
__ehfuncinfo$?Load@CPCBangPointSystem@@QAEHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Load@CPCBangPointSystem@@QAEHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Load@CPCBangPointSystem@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv488 = -412						; size = 4
tv477 = -412						; size = 4
tv466 = -412						; size = 4
tv447 = -412						; size = 4
tv436 = -412						; size = 4
tv425 = -412						; size = 4
tv414 = -412						; size = 4
tv403 = -412						; size = 4
tv486 = -408						; size = 4
tv475 = -408						; size = 4
tv464 = -408						; size = 4
tv445 = -408						; size = 4
tv434 = -408						; size = 4
tv423 = -408						; size = 4
tv412 = -408						; size = 4
tv401 = -408						; size = 4
tv349 = -404						; size = 4
tv348 = -404						; size = 4
tv347 = -404						; size = 4
tv346 = -404						; size = 4
tv345 = -404						; size = 4
tv344 = -404						; size = 4
tv343 = -404						; size = 4
tv342 = -404						; size = 4
tv341 = -404						; size = 4
tv340 = -404						; size = 4
tv339 = -404						; size = 4
tv483 = -402						; size = 2
tv472 = -402						; size = 2
tv461 = -402						; size = 2
tv442 = -402						; size = 2
tv431 = -402						; size = 2
tv420 = -402						; size = 2
tv409 = -402						; size = 2
tv398 = -402						; size = 2
_szTemp$ = -336						; size = 256
_m_PcBangInfo$233550 = -80				; size = 4
_iStopExp$233549 = -73					; size = 1
_iGetItemPercent$233548 = -72				; size = 2
_iAddExpPercent$233547 = -68				; size = 2
_iKeepTime$233546 = -64					; size = 4
_iAbility$233545 = -57					; size = 1
_iCondition$233544 = -56				; size = 2
_iBuyPoint$233543 = -52					; size = 2
_iItemIndex$233542 = -48				; size = 2
_iItemType$233541 = -44					; size = 2
_iType$233540 = -40					; size = 4
_Token$233539 = -36					; size = 4
_iItemCount$233538 = -32				; size = 4
_dwGetLastError$ = -28					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?Load@CPCBangPointSystem@@QAEHPAD@Z PROC		; CPCBangPointSystem::Load
; _this$ = ecx

; 275  : {

  00700	55		 push	 ebp
  00701	8b ec		 mov	 ebp, esp
  00703	6a ff		 push	 -1
  00705	68 00 00 00 00	 push	 __ehhandler$?Load@CPCBangPointSystem@@QAEHPAD@Z
  0070a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00710	50		 push	 eax
  00711	51		 push	 ecx
  00712	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00718	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0071d	33 c5		 xor	 eax, ebp
  0071f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00722	53		 push	 ebx
  00723	56		 push	 esi
  00724	57		 push	 edi
  00725	50		 push	 eax
  00726	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00729	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0072f	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00732	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 276  : 	this->m_iPcBangIndex = 0;

  00735	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00738	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 277  : 
; 278  : 	if( lpszFileName == 0 || strcmp(lpszFileName, "") == 0 )

  0073f	83 7d 08 00	 cmp	 DWORD PTR _lpszFileName$[ebp], 0
  00743	74 15		 je	 SHORT $LN14@Load
  00745	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0074a	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  0074d	50		 push	 eax
  0074e	e8 00 00 00 00	 call	 _strcmp
  00753	83 c4 08	 add	 esp, 8
  00756	85 c0		 test	 eax, eax
  00758	75 14		 jne	 SHORT $LN15@Load
$LN14@Load:

; 279  : 	{
; 280  : 		MsgBox("[PCBangPointSystem] - File load error : File Name Error");

  0075a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OHBCGPFP@?$FLPCBangPointSystem?$FN?5?9?5File?5load?5@
  0075f	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00764	83 c4 04	 add	 esp, 4

; 281  : 		return 0;

  00767	33 c0		 xor	 eax, eax
  00769	e9 4e 07 00 00	 jmp	 $LN16@Load
$LN15@Load:

; 282  : 	}
; 283  : 
; 284  : 	DWORD dwGetLastError;
; 285  : 
; 286  : 	try
; 287  : 	{

  0076e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 288  : 		SMDFile = fopen(lpszFileName, "r");

  00775	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0077a	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  0077d	50		 push	 eax
  0077e	e8 00 00 00 00	 call	 _fopen
  00783	83 c4 08	 add	 esp, 8
  00786	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 289  : 
; 290  : 		if( SMDFile == NULL )

  0078b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00792	75 21		 jne	 SHORT $LN12@Load

; 291  : 		{
; 292  : 			dwGetLastError = GetLastError();

  00794	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0079a	89 45 e4	 mov	 DWORD PTR _dwGetLastError$[ebp], eax

; 293  : 			MsgBox("[PCBangPointSystem] - Can't Open %s ", lpszFileName);

  0079d	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  007a0	50		 push	 eax
  007a1	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CBPEGMGA@?$FLPCBangPointSystem?$FN?5?9?5Can?8t?5Open@
  007a6	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  007ab	83 c4 08	 add	 esp, 8

; 294  : 			return 0;

  007ae	33 c0		 xor	 eax, eax
  007b0	e9 07 07 00 00	 jmp	 $LN16@Load
$LN12@Load:

; 295  : 		}
; 296  : 
; 297  : 		this->Init();

  007b5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  007b8	e8 00 00 00 00	 call	 ?Init@CPCBangPointSystem@@QAEXXZ ; CPCBangPointSystem::Init

; 298  : 
; 299  : 		int iItemCount = 0;

  007bd	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iItemCount$233538[ebp], 0

; 300  : 		SMDToken Token;
; 301  : 		int iType = -1;

  007c4	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _iType$233540[ebp], -1

; 302  : 		WORD iItemType = 0;

  007cb	33 c0		 xor	 eax, eax
  007cd	66 89 45 d4	 mov	 WORD PTR _iItemType$233541[ebp], ax

; 303  : 		WORD iItemIndex = 0;

  007d1	33 c0		 xor	 eax, eax
  007d3	66 89 45 d0	 mov	 WORD PTR _iItemIndex$233542[ebp], ax

; 304  : 		WORD iBuyPoint = 0;

  007d7	33 c0		 xor	 eax, eax
  007d9	66 89 45 cc	 mov	 WORD PTR _iBuyPoint$233543[ebp], ax

; 305  : 		WORD iCondition = 0;

  007dd	33 c0		 xor	 eax, eax
  007df	66 89 45 c8	 mov	 WORD PTR _iCondition$233544[ebp], ax

; 306  : 		BYTE iAbility = 0;

  007e3	c6 45 c7 00	 mov	 BYTE PTR _iAbility$233545[ebp], 0

; 307  : 		int iKeepTime = 0;

  007e7	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _iKeepTime$233546[ebp], 0

; 308  : 		WORD iAddExpPercent = 0;

  007ee	33 c0		 xor	 eax, eax
  007f0	66 89 45 bc	 mov	 WORD PTR _iAddExpPercent$233547[ebp], ax

; 309  : 		WORD iGetItemPercent = 0;

  007f4	33 c0		 xor	 eax, eax
  007f6	66 89 45 b8	 mov	 WORD PTR _iGetItemPercent$233548[ebp], ax

; 310  : 		BYTE iStopExp = 0;

  007fa	c6 45 b7 00	 mov	 BYTE PTR _iStopExp$233549[ebp], 0
$LN11@Load:

; 311  : 		PCBANG_LOAD_INFO* m_PcBangInfo;
; 312  : 
; 313  : 		while( true )

  007fe	b8 01 00 00 00	 mov	 eax, 1
  00803	85 c0		 test	 eax, eax
  00805	0f 84 f4 03 00
	00		 je	 $LN10@Load

; 314  : 		{
; 315  : 			Token = GetToken();

  0080b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00810	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv339[ebp], eax
  00816	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv339[ebp]
  0081c	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 316  : 
; 317  : 			if( Token == 2 )

  0081f	83 7d dc 02	 cmp	 DWORD PTR _Token$233539[ebp], 2
  00823	75 05		 jne	 SHORT $LN9@Load

; 318  : 			{
; 319  : 				break;

  00825	e9 d5 03 00 00	 jmp	 $LN10@Load
$LN9@Load:

; 320  : 			}
; 321  : 
; 322  : 			iType = (int)TokenNumber;

  0082a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00830	e8 00 00 00 00	 call	 __ftol2_sse
  00835	89 45 d8	 mov	 DWORD PTR _iType$233540[ebp], eax
$LN8@Load:

; 323  : 
; 324  : 			while( true )

  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	85 c0		 test	 eax, eax
  0083f	0f 84 b5 03 00
	00		 je	 $LN7@Load

; 325  : 			{
; 326  : 				if( iType == 0 )

  00845	83 7d d8 00	 cmp	 DWORD PTR _iType$233540[ebp], 0
  00849	0f 85 7a 03 00
	00		 jne	 $LN6@Load

; 327  : 				{
; 328  : 					iItemType = 0;

  0084f	33 c0		 xor	 eax, eax
  00851	66 89 45 d4	 mov	 WORD PTR _iItemType$233541[ebp], ax

; 329  : 					iItemIndex = 0;

  00855	33 c0		 xor	 eax, eax
  00857	66 89 45 d0	 mov	 WORD PTR _iItemIndex$233542[ebp], ax

; 330  : 					iBuyPoint = 0;

  0085b	33 c0		 xor	 eax, eax
  0085d	66 89 45 cc	 mov	 WORD PTR _iBuyPoint$233543[ebp], ax

; 331  : 					iCondition = 0;

  00861	33 c0		 xor	 eax, eax
  00863	66 89 45 c8	 mov	 WORD PTR _iCondition$233544[ebp], ax

; 332  : 					iAbility = 0;

  00867	c6 45 c7 00	 mov	 BYTE PTR _iAbility$233545[ebp], 0

; 333  : 					iKeepTime = 0;

  0086b	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _iKeepTime$233546[ebp], 0

; 334  : 					iAddExpPercent = 0;

  00872	33 c0		 xor	 eax, eax
  00874	66 89 45 bc	 mov	 WORD PTR _iAddExpPercent$233547[ebp], ax

; 335  : 					iGetItemPercent = 0;

  00878	33 c0		 xor	 eax, eax
  0087a	66 89 45 b8	 mov	 WORD PTR _iGetItemPercent$233548[ebp], ax

; 336  : 					iStopExp = 0;

  0087e	c6 45 b7 00	 mov	 BYTE PTR _iStopExp$233549[ebp], 0

; 337  : 
; 338  : 					Token = GetToken();

  00882	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00887	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv340[ebp], eax
  0088d	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv340[ebp]
  00893	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 339  : 
; 340  : 					if( strcmp("end", TokenString) == 0 )

  00896	68 00 00 00 00	 push	 OFFSET _TokenString
  0089b	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  008a0	e8 00 00 00 00	 call	 _strcmp
  008a5	83 c4 08	 add	 esp, 8
  008a8	85 c0		 test	 eax, eax
  008aa	75 05		 jne	 SHORT $LN5@Load

; 341  : 					{
; 342  : 						break;

  008ac	e9 49 03 00 00	 jmp	 $LN7@Load
$LN5@Load:

; 343  : 					}
; 344  : 
; 345  : 					iItemType = (WORD)TokenNumber;

  008b1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008b7	d9 bd 6e fe ff
	ff		 fnstcw	 WORD PTR tv398[ebp]
  008bd	0f b7 85 6e fe
	ff ff		 movzx	 eax, WORD PTR tv398[ebp]
  008c4	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  008c9	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv401[ebp], eax
  008cf	d9 ad 68 fe ff
	ff		 fldcw	 WORD PTR tv401[ebp]
  008d5	db 9d 64 fe ff
	ff		 fistp	 DWORD PTR tv403[ebp]
  008db	d9 ad 6e fe ff
	ff		 fldcw	 WORD PTR tv398[ebp]
  008e1	66 8b 85 64 fe
	ff ff		 mov	 ax, WORD PTR tv403[ebp]
  008e8	66 89 45 d4	 mov	 WORD PTR _iItemType$233541[ebp], ax

; 346  : 					Token = GetToken();

  008ec	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008f1	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv341[ebp], eax
  008f7	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv341[ebp]
  008fd	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 347  : 
; 348  : 					iItemIndex = (WORD)TokenNumber;

  00900	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00906	d9 bd 6e fe ff
	ff		 fnstcw	 WORD PTR tv409[ebp]
  0090c	0f b7 85 6e fe
	ff ff		 movzx	 eax, WORD PTR tv409[ebp]
  00913	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00918	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv412[ebp], eax
  0091e	d9 ad 68 fe ff
	ff		 fldcw	 WORD PTR tv412[ebp]
  00924	db 9d 64 fe ff
	ff		 fistp	 DWORD PTR tv414[ebp]
  0092a	d9 ad 6e fe ff
	ff		 fldcw	 WORD PTR tv409[ebp]
  00930	66 8b 85 64 fe
	ff ff		 mov	 ax, WORD PTR tv414[ebp]
  00937	66 89 45 d0	 mov	 WORD PTR _iItemIndex$233542[ebp], ax

; 349  : 					Token = GetToken();

  0093b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00940	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv342[ebp], eax
  00946	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv342[ebp]
  0094c	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 350  : 
; 351  : 					iBuyPoint = (WORD)TokenNumber;

  0094f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00955	d9 bd 6e fe ff
	ff		 fnstcw	 WORD PTR tv420[ebp]
  0095b	0f b7 85 6e fe
	ff ff		 movzx	 eax, WORD PTR tv420[ebp]
  00962	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00967	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv423[ebp], eax
  0096d	d9 ad 68 fe ff
	ff		 fldcw	 WORD PTR tv423[ebp]
  00973	db 9d 64 fe ff
	ff		 fistp	 DWORD PTR tv425[ebp]
  00979	d9 ad 6e fe ff
	ff		 fldcw	 WORD PTR tv420[ebp]
  0097f	66 8b 85 64 fe
	ff ff		 mov	 ax, WORD PTR tv425[ebp]
  00986	66 89 45 cc	 mov	 WORD PTR _iBuyPoint$233543[ebp], ax

; 352  : 					Token = GetToken();

  0098a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0098f	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  00995	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp]
  0099b	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 353  : 
; 354  : 					iCondition = (WORD)TokenNumber;

  0099e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  009a4	d9 bd 6e fe ff
	ff		 fnstcw	 WORD PTR tv431[ebp]
  009aa	0f b7 85 6e fe
	ff ff		 movzx	 eax, WORD PTR tv431[ebp]
  009b1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  009b6	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv434[ebp], eax
  009bc	d9 ad 68 fe ff
	ff		 fldcw	 WORD PTR tv434[ebp]
  009c2	db 9d 64 fe ff
	ff		 fistp	 DWORD PTR tv436[ebp]
  009c8	d9 ad 6e fe ff
	ff		 fldcw	 WORD PTR tv431[ebp]
  009ce	66 8b 85 64 fe
	ff ff		 mov	 ax, WORD PTR tv436[ebp]
  009d5	66 89 45 c8	 mov	 WORD PTR _iCondition$233544[ebp], ax

; 355  : 					Token = GetToken();

  009d9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  009de	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv344[ebp], eax
  009e4	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv344[ebp]
  009ea	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 356  : 
; 357  : 					iAbility = (BYTE)TokenNumber;

  009ed	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  009f3	d9 bd 6e fe ff
	ff		 fnstcw	 WORD PTR tv442[ebp]
  009f9	0f b7 85 6e fe
	ff ff		 movzx	 eax, WORD PTR tv442[ebp]
  00a00	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00a05	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv445[ebp], eax
  00a0b	d9 ad 68 fe ff
	ff		 fldcw	 WORD PTR tv445[ebp]
  00a11	db 9d 64 fe ff
	ff		 fistp	 DWORD PTR tv447[ebp]
  00a17	d9 ad 6e fe ff
	ff		 fldcw	 WORD PTR tv442[ebp]
  00a1d	8a 85 64 fe ff
	ff		 mov	 al, BYTE PTR tv447[ebp]
  00a23	88 45 c7	 mov	 BYTE PTR _iAbility$233545[ebp], al

; 358  : 					Token = GetToken();

  00a26	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a2b	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv345[ebp], eax
  00a31	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv345[ebp]
  00a37	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 359  : 
; 360  : 					iKeepTime = (int)TokenNumber;

  00a3a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a40	e8 00 00 00 00	 call	 __ftol2_sse
  00a45	89 45 c0	 mov	 DWORD PTR _iKeepTime$233546[ebp], eax

; 361  : 					Token = GetToken();

  00a48	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a4d	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv346[ebp], eax
  00a53	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv346[ebp]
  00a59	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 362  : 
; 363  : 					iAddExpPercent = (WORD)TokenNumber;

  00a5c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a62	d9 bd 6e fe ff
	ff		 fnstcw	 WORD PTR tv461[ebp]
  00a68	0f b7 85 6e fe
	ff ff		 movzx	 eax, WORD PTR tv461[ebp]
  00a6f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00a74	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv464[ebp], eax
  00a7a	d9 ad 68 fe ff
	ff		 fldcw	 WORD PTR tv464[ebp]
  00a80	db 9d 64 fe ff
	ff		 fistp	 DWORD PTR tv466[ebp]
  00a86	d9 ad 6e fe ff
	ff		 fldcw	 WORD PTR tv461[ebp]
  00a8c	66 8b 85 64 fe
	ff ff		 mov	 ax, WORD PTR tv466[ebp]
  00a93	66 89 45 bc	 mov	 WORD PTR _iAddExpPercent$233547[ebp], ax

; 364  : 					Token = GetToken();

  00a97	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a9c	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv347[ebp], eax
  00aa2	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv347[ebp]
  00aa8	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 365  : 
; 366  : 					iGetItemPercent = (WORD)TokenNumber;

  00aab	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00ab1	d9 bd 6e fe ff
	ff		 fnstcw	 WORD PTR tv472[ebp]
  00ab7	0f b7 85 6e fe
	ff ff		 movzx	 eax, WORD PTR tv472[ebp]
  00abe	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00ac3	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv475[ebp], eax
  00ac9	d9 ad 68 fe ff
	ff		 fldcw	 WORD PTR tv475[ebp]
  00acf	db 9d 64 fe ff
	ff		 fistp	 DWORD PTR tv477[ebp]
  00ad5	d9 ad 6e fe ff
	ff		 fldcw	 WORD PTR tv472[ebp]
  00adb	66 8b 85 64 fe
	ff ff		 mov	 ax, WORD PTR tv477[ebp]
  00ae2	66 89 45 b8	 mov	 WORD PTR _iGetItemPercent$233548[ebp], ax

; 367  : 					Token = GetToken();

  00ae6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00aeb	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv348[ebp], eax
  00af1	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv348[ebp]
  00af7	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 368  : 
; 369  : 					iStopExp = (BYTE)TokenNumber;

  00afa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00b00	d9 bd 6e fe ff
	ff		 fnstcw	 WORD PTR tv483[ebp]
  00b06	0f b7 85 6e fe
	ff ff		 movzx	 eax, WORD PTR tv483[ebp]
  00b0d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00b12	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv486[ebp], eax
  00b18	d9 ad 68 fe ff
	ff		 fldcw	 WORD PTR tv486[ebp]
  00b1e	db 9d 64 fe ff
	ff		 fistp	 DWORD PTR tv488[ebp]
  00b24	d9 ad 6e fe ff
	ff		 fldcw	 WORD PTR tv483[ebp]
  00b2a	8a 85 64 fe ff
	ff		 mov	 al, BYTE PTR tv488[ebp]
  00b30	88 45 b7	 mov	 BYTE PTR _iStopExp$233549[ebp], al

; 370  : 					
; 371  : 					if( iItemCount < 0 || iItemCount > MAX_PCBANG_ITEM_COUNT )

  00b33	83 7d e0 00	 cmp	 DWORD PTR _iItemCount$233538[ebp], 0
  00b37	7c 06		 jl	 SHORT $LN3@Load
  00b39	83 7d e0 06	 cmp	 DWORD PTR _iItemCount$233538[ebp], 6
  00b3d	7e 16		 jle	 SHORT $LN4@Load
$LN3@Load:

; 372  : 					{
; 373  : 						MsgBox("[PCBangPointSystem] - Exceed Max Item Count (%d)", iItemCount);

  00b3f	8b 45 e0	 mov	 eax, DWORD PTR _iItemCount$233538[ebp]
  00b42	50		 push	 eax
  00b43	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@ICJBIAPN@?$FLPCBangPointSystem?$FN?5?9?5Exceed?5Max@
  00b48	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00b4d	83 c4 08	 add	 esp, 8

; 374  : 						break;

  00b50	e9 a5 00 00 00	 jmp	 $LN7@Load
$LN4@Load:

; 375  : 					}
; 376  : 
; 377  : 					m_PcBangInfo = (PCBANG_LOAD_INFO*)&this->m_PcBangSystem[iItemCount].Index;

  00b55	8b 45 e0	 mov	 eax, DWORD PTR _iItemCount$233538[ebp]
  00b58	6b c0 18	 imul	 eax, 24			; 00000018H
  00b5b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00b5e	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00b62	89 55 b0	 mov	 DWORD PTR _m_PcBangInfo$233550[ebp], edx

; 378  : 					m_PcBangInfo->Index = (iItemType << 9) + iItemIndex;

  00b65	0f b7 45 d0	 movzx	 eax, WORD PTR _iItemIndex$233542[ebp]
  00b69	0f b7 4d d4	 movzx	 ecx, WORD PTR _iItemType$233541[ebp]
  00b6d	c1 e1 09	 shl	 ecx, 9
  00b70	03 c8		 add	 ecx, eax
  00b72	8b 55 b0	 mov	 edx, DWORD PTR _m_PcBangInfo$233550[ebp]
  00b75	89 0a		 mov	 DWORD PTR [edx], ecx

; 379  : 					m_PcBangInfo->BuyPoint = iBuyPoint;

  00b77	8b 45 b0	 mov	 eax, DWORD PTR _m_PcBangInfo$233550[ebp]
  00b7a	66 8b 4d cc	 mov	 cx, WORD PTR _iBuyPoint$233543[ebp]
  00b7e	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 380  : 					m_PcBangInfo->Condition = iCondition;

  00b82	8b 45 b0	 mov	 eax, DWORD PTR _m_PcBangInfo$233550[ebp]
  00b85	66 8b 4d c8	 mov	 cx, WORD PTR _iCondition$233544[ebp]
  00b89	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 381  : 					m_PcBangInfo->Ability = iAbility;

  00b8d	8b 45 b0	 mov	 eax, DWORD PTR _m_PcBangInfo$233550[ebp]
  00b90	8a 4d c7	 mov	 cl, BYTE PTR _iAbility$233545[ebp]
  00b93	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 382  : 					m_PcBangInfo->KeepTime = iKeepTime;

  00b96	8b 45 b0	 mov	 eax, DWORD PTR _m_PcBangInfo$233550[ebp]
  00b99	8b 4d c0	 mov	 ecx, DWORD PTR _iKeepTime$233546[ebp]
  00b9c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 383  : 					m_PcBangInfo->AddExpPercent = iAddExpPercent;

  00b9f	8b 45 b0	 mov	 eax, DWORD PTR _m_PcBangInfo$233550[ebp]
  00ba2	66 8b 4d bc	 mov	 cx, WORD PTR _iAddExpPercent$233547[ebp]
  00ba6	66 89 48 10	 mov	 WORD PTR [eax+16], cx

; 384  : 					m_PcBangInfo->GetItemPercent = iGetItemPercent;

  00baa	8b 45 b0	 mov	 eax, DWORD PTR _m_PcBangInfo$233550[ebp]
  00bad	66 8b 4d b8	 mov	 cx, WORD PTR _iGetItemPercent$233548[ebp]
  00bb1	66 89 48 12	 mov	 WORD PTR [eax+18], cx

; 385  : 					m_PcBangInfo->StopExp = iStopExp;

  00bb5	8b 45 b0	 mov	 eax, DWORD PTR _m_PcBangInfo$233550[ebp]
  00bb8	8a 4d b7	 mov	 cl, BYTE PTR _iStopExp$233549[ebp]
  00bbb	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 386  : 					iItemCount++;

  00bbe	8b 45 e0	 mov	 eax, DWORD PTR _iItemCount$233538[ebp]
  00bc1	83 c0 01	 add	 eax, 1
  00bc4	89 45 e0	 mov	 DWORD PTR _iItemCount$233538[ebp], eax

; 387  : 				}
; 388  : 				else

  00bc7	eb 2c		 jmp	 SHORT $LN1@Load
$LN6@Load:

; 389  : 				{
; 390  : 					Token = GetToken();

  00bc9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00bce	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv349[ebp], eax
  00bd4	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR tv349[ebp]
  00bda	89 45 dc	 mov	 DWORD PTR _Token$233539[ebp], eax

; 391  : 
; 392  : 					if( strcmp("end", TokenString) == 0 )

  00bdd	68 00 00 00 00	 push	 OFFSET _TokenString
  00be2	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00be7	e8 00 00 00 00	 call	 _strcmp
  00bec	83 c4 08	 add	 esp, 8
  00bef	85 c0		 test	 eax, eax
  00bf1	75 02		 jne	 SHORT $LN1@Load

; 393  : 					{
; 394  : 						break;

  00bf3	eb 05		 jmp	 SHORT $LN7@Load
$LN1@Load:

; 395  : 					}
; 396  : 				}
; 397  : 			}

  00bf5	e9 3e fc ff ff	 jmp	 $LN8@Load
$LN7@Load:

; 398  : 		}

  00bfa	e9 ff fb ff ff	 jmp	 $LN11@Load
$LN10@Load:

; 399  : 
; 400  : 		fclose(SMDFile);

  00bff	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c04	50		 push	 eax
  00c05	e8 00 00 00 00	 call	 _fclose
  00c0a	83 c4 04	 add	 esp, 4

; 401  : 		LogAddC(2, "[PCBangPointSystem] - %s file is Loaded", lpszFileName);

  00c0d	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00c10	50		 push	 eax
  00c11	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KDHNLGGF@?$FLPCBangPointSystem?$FN?5?9?5?$CFs?5file?5is@
  00c16	6a 02		 push	 2
  00c18	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00c1e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 402  : 	}

  00c21	eb 1e		 jmp	 SHORT $LN18@Load
__catch$?Load@CPCBangPointSystem@@QAEHPAD@Z$0:

; 403  : 	
; 404  : 	catch(...)
; 405  : 	{
; 406  : 		MsgBox("[PCBangPointSystem] Loading Exception Error (%s) File. ", lpszFileName);

  00c23	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00c26	50		 push	 eax
  00c27	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HNBKFLKH@?$FLPCBangPointSystem?$FN?5Loading?5Exce@
  00c2c	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00c31	83 c4 08	 add	 esp, 8

; 407  : 	}

  00c34	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00c3b	b8 00 00 00 00	 mov	 eax, $LN21@Load
  00c40	c3		 ret	 0
$LN18@Load:
  00c41	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN21@Load:

; 408  : 
; 409  : 	this->m_bPointSystemOn = GetPrivateProfileInt("GameServerInfo", "PCBangPointSystemOn", TRUE, gDirPath.GetNewPath("commonserver.cfg"));

  00c48	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00c4d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00c52	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00c57	50		 push	 eax
  00c58	6a 01		 push	 1
  00c5a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KLAKJAFG@PCBangPointSystemOn?$AA@
  00c5f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00c64	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00c6a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c6d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 410  : 	
; 411  : 	g_btPcBangPointSystemLevel = GetPrivateProfileInt("GameServerInfo", "PCBangPointSystemLevel", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00c70	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00c75	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00c7a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00c7f	50		 push	 eax
  00c80	6a 01		 push	 1
  00c82	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MBOBKADC@PCBangPointSystemLevel?$AA@
  00c87	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00c8c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00c92	a2 00 00 00 00	 mov	 BYTE PTR ?g_btPcBangPointSystemLevel@@3EA, al ; g_btPcBangPointSystemLevel

; 412  : 	
; 413  : 	this->m_bPointRankEvent = GetPrivateProfileInt("GameServerInfo", "PCBangPointRankingEvent", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00c97	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00c9c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00ca1	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00ca6	50		 push	 eax
  00ca7	6a 01		 push	 1
  00ca9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EGCJFFDF@PCBangPointRankingEvent?$AA@
  00cae	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00cb3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00cb9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00cbc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 414  : 
; 415  : 	g_sPCBangFirstRuleTime = GetPrivateProfileInt("GameServerInfo", "PCBangPointFirstRuleTime", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00cbf	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00cc4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00cc9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00cce	50		 push	 eax
  00ccf	6a 01		 push	 1
  00cd1	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JPIIKFLP@PCBangPointFirstRuleTime?$AA@
  00cd6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00cdb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00ce1	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangFirstRuleTime@@3FA, ax ; g_sPCBangFirstRuleTime

; 416  : 	g_sPCBangFirstRuleTimePoint = GetPrivateProfileInt("GameServerInfo", "PCBangPointFirstRuleTimePoint", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00ce7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00cec	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00cf1	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00cf6	50		 push	 eax
  00cf7	6a 01		 push	 1
  00cf9	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KJAFKACF@PCBangPointFirstRuleTimePoint?$AA@
  00cfe	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00d03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00d09	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangFirstRuleTimePoint@@3FA, ax ; g_sPCBangFirstRuleTimePoint

; 417  : 	g_sPCBangCommonRuleTime = GetPrivateProfileInt("GameServerInfo", "PCBangPointCommonRuleTime", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00d0f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00d14	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00d19	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00d1e	50		 push	 eax
  00d1f	6a 01		 push	 1
  00d21	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GNCMODK@PCBangPointCommonRuleTime?$AA@
  00d26	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00d2b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00d31	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangCommonRuleTime@@3FA, ax ; g_sPCBangCommonRuleTime

; 418  : 	g_sPCBangCommonRuleTimePoint = GetPrivateProfileInt("GameServerInfo", "PCBangPointCommonRuleTimePoint", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00d37	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00d3c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00d41	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00d46	50		 push	 eax
  00d47	6a 01		 push	 1
  00d49	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@PNIMHFPA@PCBangPointCommonRuleTimePoint?$AA@
  00d4e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00d53	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00d59	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangCommonRuleTimePoint@@3FA, ax ; g_sPCBangCommonRuleTimePoint

; 419  : 	g_sPCBangMaxPoint = GetPrivateProfileInt("GameServerInfo", "PCBangMaxPoint", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00d5f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00d64	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00d69	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00d6e	50		 push	 eax
  00d6f	6a 01		 push	 1
  00d71	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HABBLMLD@PCBangMaxPoint?$AA@
  00d76	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00d7b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00d81	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangMaxPoint@@3FA, ax ; g_sPCBangMaxPoint

; 420  : 	g_sPCBangFeverStartHour = GetPrivateProfileInt("GameServerInfo", "PCBangPointFeverStartHour", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00d87	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00d8c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00d91	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00d96	50		 push	 eax
  00d97	6a 01		 push	 1
  00d99	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CLHDOELN@PCBangPointFeverStartHour?$AA@
  00d9e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00da3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00da9	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangFeverStartHour@@3FA, ax ; g_sPCBangFeverStartHour

; 421  : 	g_sPCBangFeverEndHour = GetPrivateProfileInt("GameServerInfo", "PCBangPointFeverEndHour", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00daf	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00db4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00db9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00dbe	50		 push	 eax
  00dbf	6a 01		 push	 1
  00dc1	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NPAJILED@PCBangPointFeverEndHour?$AA@
  00dc6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00dcb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00dd1	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangFeverEndHour@@3FA, ax ; g_sPCBangFeverEndHour

; 422  : 	g_sPCBangFeverMultipleValue = GetPrivateProfileInt("GameServerInfo", "PCBangPointFeverMultipleValue", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00dd7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00ddc	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00de1	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00de6	50		 push	 eax
  00de7	6a 01		 push	 1
  00de9	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@ECDPNBAK@PCBangPointFeverMultipleValue?$AA@
  00dee	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00df3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00df9	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangFeverMultipleValue@@3FA, ax ; g_sPCBangFeverMultipleValue

; 423  : 	g_sPCBangResetDayOfWeek = GetPrivateProfileInt("GameServerInfo", "PCBangResetDayOfWeek", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00dff	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00e04	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00e09	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00e0e	50		 push	 eax
  00e0f	6a 01		 push	 1
  00e11	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MGMAKGGP@PCBangResetDayOfWeek?$AA@
  00e16	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00e1b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00e21	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangResetDayOfWeek@@3FA, ax ; g_sPCBangResetDayOfWeek

; 424  : 	g_sPCBangResetHour = GetPrivateProfileInt("GameServerInfo", "PCBangResetHour", 1, gDirPath.GetNewPath("commonserver.cfg"));

  00e27	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00e2c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00e31	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00e36	50		 push	 eax
  00e37	6a 01		 push	 1
  00e39	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EPKHAMIK@PCBangResetHour?$AA@
  00e3e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00e43	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00e49	66 a3 00 00 00
	00		 mov	 WORD PTR ?g_sPCBangResetHour@@3FA, ax ; g_sPCBangResetHour

; 425  : 		
; 426  : 	char szTemp[256];
; 427  : 	GetPrivateProfileString("GameServerInfo", "PCBangAddExperience", "1", szTemp, 5, gDirPath.GetNewPath("commonserver.cfg"));

  00e4f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00e54	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00e59	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00e5e	50		 push	 eax
  00e5f	6a 05		 push	 5
  00e61	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00e67	50		 push	 eax
  00e68	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1?$AA@
  00e6d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NPBBFCEO@PCBangAddExperience?$AA@
  00e72	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00e77	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 428  : 	g_fPCBangAddExperience = atof(szTemp);

  00e7d	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00e83	50		 push	 eax
  00e84	e8 00 00 00 00	 call	 _atof
  00e89	83 c4 04	 add	 esp, 4
  00e8c	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?g_fPCBangAddExperience@@3MA ; g_fPCBangAddExperience

; 429  : 
; 430  : 	LogAdd("[PCBangPointSystem][SetPCBangPointInfo] SystemOn:%d, Level:%d, RankingEventOn:%d", this->m_bPointSystemOn, g_btPcBangPointSystemLevel, this->m_bPointRankEvent); 

  00e92	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00e95	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e98	51		 push	 ecx
  00e99	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?g_btPcBangPointSystemLevel@@3EA ; g_btPcBangPointSystemLevel
  00ea0	52		 push	 edx
  00ea1	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00ea4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00ea7	51		 push	 ecx
  00ea8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@EFBNKEEK@?$FLPCBangPointSystem?$FN?$FLSetPCBangPoi@
  00ead	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00eb3	83 c4 10	 add	 esp, 16			; 00000010H

; 431  : 
; 432  : 	return this->m_iPcBangIndex;

  00eb6	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00eb9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$LN16@Load:

; 433  : }

  00ebc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00ebf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00ec6	59		 pop	 ecx
  00ec7	5f		 pop	 edi
  00ec8	5e		 pop	 esi
  00ec9	5b		 pop	 ebx
  00eca	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ecd	33 cd		 xor	 ecx, ebp
  00ecf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ed4	8b e5		 mov	 esp, ebp
  00ed6	5d		 pop	 ebp
  00ed7	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Load@CPCBangPointSystem@@QAEHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 60 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-416]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CPCBangPointSystem@@QAEHPAD@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CPCBangPointSystem@@QAEHPAD@Z ENDP		; CPCBangPointSystem::Load
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00ee0	55		 push	 ebp
  00ee1	8b ec		 mov	 ebp, esp
  00ee3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00ee9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00eee	33 c5		 xor	 eax, ebp
  00ef0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00ef3	53		 push	 ebx
  00ef4	56		 push	 esi
  00ef5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00ef6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00efd	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f02	50		 push	 eax
  00f03	e8 00 00 00 00	 call	 _fgetc
  00f08	83 c4 04	 add	 esp, 4
  00f0b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00f0e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00f12	83 f9 ff	 cmp	 ecx, -1
  00f15	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00f17	b8 02 00 00 00	 mov	 eax, 2
  00f1c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00f21	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00f23	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f27	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00f2a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  00f2c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f31	50		 push	 eax
  00f32	e8 00 00 00 00	 call	 _fgetc
  00f37	83 c4 04	 add	 esp, 4
  00f3a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00f3d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00f41	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00f44	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00f46	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f4a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00f4d	74 1c		 je	 SHORT $LN23@GetToken
  00f4f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f53	83 f8 ff	 cmp	 eax, -1
  00f56	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00f58	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f5d	50		 push	 eax
  00f5e	e8 00 00 00 00	 call	 _fgetc
  00f63	83 c4 04	 add	 esp, 4
  00f66	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00f69	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  00f6b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f6f	83 f8 ff	 cmp	 eax, -1
  00f72	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00f74	b8 02 00 00 00	 mov	 eax, 2
  00f79	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  00f7e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f82	50		 push	 eax
  00f83	e8 00 00 00 00	 call	 _isspace
  00f88	83 c4 04	 add	 esp, 4
  00f8b	85 c0		 test	 eax, eax
  00f8d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00f93	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f97	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00f9d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00fa3	83 e9 22	 sub	 ecx, 34			; 00000022H
  00fa6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  00fac	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00fb3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00fb9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  00fbf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00fc6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  00fcd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00fd7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00fdc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00fe1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00fe6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00ff0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ff5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  00ffa	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  00fff	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  01009	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0100e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  01013	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  01018	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  01022	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01027	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0102c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  01031	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0103b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01040	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  01045	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0104a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0104f	50		 push	 eax
  01050	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01054	51		 push	 ecx
  01055	e8 00 00 00 00	 call	 _ungetc
  0105a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0105d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  01060	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  01063	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  01068	50		 push	 eax
  01069	e8 00 00 00 00	 call	 _getc
  0106e	83 c4 04	 add	 esp, 4
  01071	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  01074	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01078	83 f9 ff	 cmp	 ecx, -1
  0107b	74 36		 je	 SHORT $LN12@GetToken
  0107d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01081	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  01084	74 1a		 je	 SHORT $LN11@GetToken
  01086	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0108a	50		 push	 eax
  0108b	e8 00 00 00 00	 call	 _isdigit
  01090	83 c4 04	 add	 esp, 4
  01093	85 c0		 test	 eax, eax
  01095	75 09		 jne	 SHORT $LN11@GetToken
  01097	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0109b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0109e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  010a0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010a3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  010a6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  010a8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010ab	83 c0 01	 add	 eax, 1
  010ae	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  010b1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  010b3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010b6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  010b9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  010bc	50		 push	 eax
  010bd	e8 00 00 00 00	 call	 _atof
  010c2	83 c4 04	 add	 esp, 4
  010c5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  010cb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  010d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  010da	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  010df	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  010e4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  010eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  010f0	50		 push	 eax
  010f1	e8 00 00 00 00	 call	 _getc
  010f6	83 c4 04	 add	 esp, 4
  010f9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  010fc	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01100	83 f9 ff	 cmp	 ecx, -1
  01103	74 1c		 je	 SHORT $LN8@GetToken
  01105	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01109	83 f8 22	 cmp	 eax, 34			; 00000022H
  0110c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0110e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01111	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  01114	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  01116	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01119	83 c0 01	 add	 eax, 1
  0111c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0111f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  01121	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01125	83 f8 22	 cmp	 eax, 34			; 00000022H
  01128	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0112a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0112f	50		 push	 eax
  01130	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01134	51		 push	 ecx
  01135	e8 00 00 00 00	 call	 _ungetc
  0113a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0113d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01140	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  01143	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0114d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01152	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  01157	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0115c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01160	50		 push	 eax
  01161	e8 00 00 00 00	 call	 _isalpha
  01166	83 c4 04	 add	 esp, 4
  01169	85 c0		 test	 eax, eax
  0116b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  01171	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  01178	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0117b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0117e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  01180	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01183	83 c0 01	 add	 eax, 1
  01186	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  01189	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0118e	50		 push	 eax
  0118f	e8 00 00 00 00	 call	 _getc
  01194	83 c4 04	 add	 esp, 4
  01197	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0119a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0119e	83 f9 ff	 cmp	 ecx, -1
  011a1	74 36		 je	 SHORT $LN3@GetToken
  011a3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011a7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  011aa	74 1a		 je	 SHORT $LN2@GetToken
  011ac	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011b0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  011b3	74 11		 je	 SHORT $LN2@GetToken
  011b5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011b9	50		 push	 eax
  011ba	e8 00 00 00 00	 call	 _isalnum
  011bf	83 c4 04	 add	 esp, 4
  011c2	85 c0		 test	 eax, eax
  011c4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  011c6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011c9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  011cc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  011ce	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011d1	83 c0 01	 add	 eax, 1
  011d4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  011d7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  011d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  011de	50		 push	 eax
  011df	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  011e3	51		 push	 ecx
  011e4	e8 00 00 00 00	 call	 _ungetc
  011e9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  011ec	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011ef	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  011f2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  011fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01201	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  01203	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  01205	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0120f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01214	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  01216	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  01218	5f		 pop	 edi
  01219	5e		 pop	 esi
  0121a	5b		 pop	 ebx
  0121b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0121e	33 cd		 xor	 ecx, ebp
  01220	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01225	8b e5		 mov	 esp, ebp
  01227	5d		 pop	 ebp
  01228	c3		 ret	 0
  01229	8d 49 00	 npad	 3
$LN35@GetToken:
  0122c	00 00 00 00	 DD	 $LN10@GetToken
  01230	00 00 00 00	 DD	 $LN19@GetToken
  01234	00 00 00 00	 DD	 $LN17@GetToken
  01238	00 00 00 00	 DD	 $LN14@GetToken
  0123c	00 00 00 00	 DD	 $LN18@GetToken
  01240	00 00 00 00	 DD	 $LN16@GetToken
  01244	00 00 00 00	 DD	 $LN15@GetToken
  01248	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0124c	00		 DB	 0
  0124d	01		 DB	 1
  0124e	07		 DB	 7
  0124f	07		 DB	 7
  01250	07		 DB	 7
  01251	07		 DB	 7
  01252	07		 DB	 7
  01253	07		 DB	 7
  01254	07		 DB	 7
  01255	07		 DB	 7
  01256	02		 DB	 2
  01257	03		 DB	 3
  01258	03		 DB	 3
  01259	07		 DB	 7
  0125a	03		 DB	 3
  0125b	03		 DB	 3
  0125c	03		 DB	 3
  0125d	03		 DB	 3
  0125e	03		 DB	 3
  0125f	03		 DB	 3
  01260	03		 DB	 3
  01261	03		 DB	 3
  01262	03		 DB	 3
  01263	03		 DB	 3
  01264	07		 DB	 7
  01265	04		 DB	 4
  01266	07		 DB	 7
  01267	07		 DB	 7
  01268	07		 DB	 7
  01269	07		 DB	 7
  0126a	07		 DB	 7
  0126b	07		 DB	 7
  0126c	07		 DB	 7
  0126d	07		 DB	 7
  0126e	07		 DB	 7
  0126f	07		 DB	 7
  01270	07		 DB	 7
  01271	07		 DB	 7
  01272	07		 DB	 7
  01273	07		 DB	 7
  01274	07		 DB	 7
  01275	07		 DB	 7
  01276	07		 DB	 7
  01277	07		 DB	 7
  01278	07		 DB	 7
  01279	07		 DB	 7
  0127a	07		 DB	 7
  0127b	07		 DB	 7
  0127c	07		 DB	 7
  0127d	07		 DB	 7
  0127e	07		 DB	 7
  0127f	07		 DB	 7
  01280	07		 DB	 7
  01281	07		 DB	 7
  01282	07		 DB	 7
  01283	07		 DB	 7
  01284	07		 DB	 7
  01285	07		 DB	 7
  01286	07		 DB	 7
  01287	07		 DB	 7
  01288	07		 DB	 7
  01289	07		 DB	 7
  0128a	07		 DB	 7
  0128b	07		 DB	 7
  0128c	07		 DB	 7
  0128d	07		 DB	 7
  0128e	07		 DB	 7
  0128f	07		 DB	 7
  01290	07		 DB	 7
  01291	07		 DB	 7
  01292	07		 DB	 7
  01293	07		 DB	 7
  01294	07		 DB	 7
  01295	07		 DB	 7
  01296	07		 DB	 7
  01297	07		 DB	 7
  01298	07		 DB	 7
  01299	07		 DB	 7
  0129a	07		 DB	 7
  0129b	07		 DB	 7
  0129c	07		 DB	 7
  0129d	07		 DB	 7
  0129e	07		 DB	 7
  0129f	07		 DB	 7
  012a0	07		 DB	 7
  012a1	07		 DB	 7
  012a2	07		 DB	 7
  012a3	07		 DB	 7
  012a4	07		 DB	 7
  012a5	05		 DB	 5
  012a6	07		 DB	 7
  012a7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?CheckPcBangRuleTime@CPCBangPointSystem@@QAEHH@Z ; CPCBangPointSystem::CheckPcBangRuleTime
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\pcbangpointsystem.cpp
_TEXT	SEGMENT
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?CheckPcBangRuleTime@CPCBangPointSystem@@QAEHH@Z PROC	; CPCBangPointSystem::CheckPcBangRuleTime
; _this$ = ecx

; 436  : {

  012b0	55		 push	 ebp
  012b1	8b ec		 mov	 ebp, esp
  012b3	83 ec 48	 sub	 esp, 72			; 00000048H
  012b6	53		 push	 ebx
  012b7	56		 push	 esi
  012b8	57		 push	 edi
  012b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 437  : 	LPOBJ lpObj = &gObj[aIndex];

  012bc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  012bf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  012c5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012cb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 438  : 
; 439  : 	if (lpObj->m_iPcBangConnectionType == 1)

  012ce	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  012d1	83 b8 1c 20 00
	00 01		 cmp	 DWORD PTR [eax+8220], 1
  012d8	75 07		 jne	 SHORT $LN1@CheckPcBan

; 440  : 	{
; 441  : 		return TRUE;

  012da	b8 01 00 00 00	 mov	 eax, 1
  012df	eb 02		 jmp	 SHORT $LN2@CheckPcBan
$LN1@CheckPcBan:

; 442  : 	}
; 443  : 
; 444  : 	return FALSE;

  012e1	33 c0		 xor	 eax, eax
$LN2@CheckPcBan:

; 445  : }

  012e3	5f		 pop	 edi
  012e4	5e		 pop	 esi
  012e5	5b		 pop	 ebx
  012e6	8b e5		 mov	 esp, ebp
  012e8	5d		 pop	 ebp
  012e9	c2 04 00	 ret	 4
?CheckPcBangRuleTime@CPCBangPointSystem@@QAEHH@Z ENDP	; CPCBangPointSystem::CheckPcBangRuleTime
_TEXT	ENDS
PUBLIC	?GetItemIndex@CPCBangPointSystem@@QAEHH@Z	; CPCBangPointSystem::GetItemIndex
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$233625 = -12						; size = 4
_m_PcBangInfo$ = -8					; size = 4
_this$ = -4						; size = 4
_iItemIndex$ = 8					; size = 4
?GetItemIndex@CPCBangPointSystem@@QAEHH@Z PROC		; CPCBangPointSystem::GetItemIndex
; _this$ = ecx

; 448  : {

  012f0	55		 push	 ebp
  012f1	8b ec		 mov	 ebp, esp
  012f3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  012f6	53		 push	 ebx
  012f7	56		 push	 esi
  012f8	57		 push	 edi
  012f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 449  : 	PCBANG_LOAD_INFO* m_PcBangInfo = this->m_PcBangSystem;

  012fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012ff	83 c0 14	 add	 eax, 20			; 00000014H
  01302	89 45 f8	 mov	 DWORD PTR _m_PcBangInfo$[ebp], eax

; 450  : 
; 451  : 	for (int n = 0; n < MAX_PCBANG_ITEM_COUNT; n++)

  01305	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$233625[ebp], 0
  0130c	eb 09		 jmp	 SHORT $LN4@GetItemInd
$LN3@GetItemInd:
  0130e	8b 45 f4	 mov	 eax, DWORD PTR _n$233625[ebp]
  01311	83 c0 01	 add	 eax, 1
  01314	89 45 f4	 mov	 DWORD PTR _n$233625[ebp], eax
$LN4@GetItemInd:
  01317	83 7d f4 06	 cmp	 DWORD PTR _n$233625[ebp], 6
  0131b	7d 1b		 jge	 SHORT $LN2@GetItemInd

; 452  : 	{
; 453  : 		if (this->m_PcBangSystem[n].Index == iItemIndex)

  0131d	8b 45 f4	 mov	 eax, DWORD PTR _n$233625[ebp]
  01320	6b c0 18	 imul	 eax, 24			; 00000018H
  01323	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01326	8b 54 01 14	 mov	 edx, DWORD PTR [ecx+eax+20]
  0132a	3b 55 08	 cmp	 edx, DWORD PTR _iItemIndex$[ebp]
  0132d	75 07		 jne	 SHORT $LN1@GetItemInd

; 454  : 		{
; 455  : 			return 1;

  0132f	b8 01 00 00 00	 mov	 eax, 1
  01334	eb 04		 jmp	 SHORT $LN5@GetItemInd
$LN1@GetItemInd:

; 456  : 		}
; 457  : 	}

  01336	eb d6		 jmp	 SHORT $LN3@GetItemInd
$LN2@GetItemInd:

; 458  : 
; 459  : 	return 0;

  01338	33 c0		 xor	 eax, eax
$LN5@GetItemInd:

; 460  : }

  0133a	5f		 pop	 edi
  0133b	5e		 pop	 esi
  0133c	5b		 pop	 ebx
  0133d	8b e5		 mov	 esp, ebp
  0133f	5d		 pop	 ebp
  01340	c2 04 00	 ret	 4
?GetItemIndex@CPCBangPointSystem@@QAEHH@Z ENDP		; CPCBangPointSystem::GetItemIndex
_TEXT	ENDS
PUBLIC	?ShopMapCheck@CPCBangPointSystem@@QAEHEFF@Z	; CPCBangPointSystem::ShopMapCheck
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv81 = -80						; size = 4
tv71 = -80						; size = 4
tv128 = -76						; size = 4
tv89 = -76						; size = 4
tv82 = -76						; size = 4
tv72 = -76						; size = 4
_attr$ = -5						; size = 1
_this$ = -4						; size = 4
_MapNumber$ = 8						; size = 1
_X$ = 12						; size = 2
_Y$ = 16						; size = 2
?ShopMapCheck@CPCBangPointSystem@@QAEHEFF@Z PROC	; CPCBangPointSystem::ShopMapCheck
; _this$ = ecx

; 463  : {

  01350	55		 push	 ebp
  01351	8b ec		 mov	 ebp, esp
  01353	83 ec 50	 sub	 esp, 80			; 00000050H
  01356	53		 push	 ebx
  01357	56		 push	 esi
  01358	57		 push	 edi
  01359	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 464  : 	if( BC_MAP_RANGE(MapNumber) ||
; 465  : 		CC_MAP_RANGE(MapNumber) ||
; 466  : 		DS_MAP_RANGE(MapNumber) ||
; 467  : 		IT_MAP_RANGE(MapNumber) ||
; 468  : 		MapNumber == MAP_INDEX_KANTURU_BOSS )

  0135c	0f b6 45 08	 movzx	 eax, BYTE PTR _MapNumber$[ebp]
  01360	83 f8 34	 cmp	 eax, 52			; 00000034H
  01363	75 09		 jne	 SHORT $LN8@ShopMapChe
  01365	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  0136c	eb 27		 jmp	 SHORT $LN9@ShopMapChe
$LN8@ShopMapChe:
  0136e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _MapNumber$[ebp]
  01372	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  01375	7d 09		 jge	 SHORT $LN6@ShopMapChe
  01377	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  0137e	eb 0f		 jmp	 SHORT $LN7@ShopMapChe
$LN6@ShopMapChe:
  01380	0f b6 55 08	 movzx	 edx, BYTE PTR _MapNumber$[ebp]
  01384	33 c0		 xor	 eax, eax
  01386	83 fa 11	 cmp	 edx, 17			; 00000011H
  01389	0f 9e c0	 setle	 al
  0138c	89 45 b0	 mov	 DWORD PTR tv71[ebp], eax
$LN7@ShopMapChe:
  0138f	8b 4d b0	 mov	 ecx, DWORD PTR tv71[ebp]
  01392	89 4d b4	 mov	 DWORD PTR tv72[ebp], ecx
$LN9@ShopMapChe:
  01395	83 7d b4 00	 cmp	 DWORD PTR tv72[ebp], 0
  01399	0f 85 96 00 00
	00		 jne	 $LN2@ShopMapChe
  0139f	0f b6 45 08	 movzx	 eax, BYTE PTR _MapNumber$[ebp]
  013a3	83 f8 35	 cmp	 eax, 53			; 00000035H
  013a6	75 09		 jne	 SHORT $LN12@ShopMapChe
  013a8	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv82[ebp], 1
  013af	eb 27		 jmp	 SHORT $LN13@ShopMapChe
$LN12@ShopMapChe:
  013b1	0f b6 4d 08	 movzx	 ecx, BYTE PTR _MapNumber$[ebp]
  013b5	83 f9 12	 cmp	 ecx, 18			; 00000012H
  013b8	7d 09		 jge	 SHORT $LN10@ShopMapChe
  013ba	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
  013c1	eb 0f		 jmp	 SHORT $LN11@ShopMapChe
$LN10@ShopMapChe:
  013c3	0f b6 55 08	 movzx	 edx, BYTE PTR _MapNumber$[ebp]
  013c7	33 c0		 xor	 eax, eax
  013c9	83 fa 17	 cmp	 edx, 23			; 00000017H
  013cc	0f 9e c0	 setle	 al
  013cf	89 45 b0	 mov	 DWORD PTR tv81[ebp], eax
$LN11@ShopMapChe:
  013d2	8b 4d b0	 mov	 ecx, DWORD PTR tv81[ebp]
  013d5	89 4d b4	 mov	 DWORD PTR tv82[ebp], ecx
$LN13@ShopMapChe:
  013d8	83 7d b4 00	 cmp	 DWORD PTR tv82[ebp], 0
  013dc	75 57		 jne	 SHORT $LN2@ShopMapChe
  013de	0f b6 45 08	 movzx	 eax, BYTE PTR _MapNumber$[ebp]
  013e2	83 f8 09	 cmp	 eax, 9
  013e5	75 09		 jne	 SHORT $LN14@ShopMapChe
  013e7	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv89[ebp], 1
  013ee	eb 0f		 jmp	 SHORT $LN15@ShopMapChe
$LN14@ShopMapChe:
  013f0	0f b6 4d 08	 movzx	 ecx, BYTE PTR _MapNumber$[ebp]
  013f4	33 d2		 xor	 edx, edx
  013f6	83 f9 20	 cmp	 ecx, 32			; 00000020H
  013f9	0f 94 c2	 sete	 dl
  013fc	89 55 b4	 mov	 DWORD PTR tv89[ebp], edx
$LN15@ShopMapChe:
  013ff	83 7d b4 00	 cmp	 DWORD PTR tv89[ebp], 0
  01403	75 30		 jne	 SHORT $LN2@ShopMapChe
  01405	0f b6 45 08	 movzx	 eax, BYTE PTR _MapNumber$[ebp]
  01409	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0140c	7d 09		 jge	 SHORT $LN16@ShopMapChe
  0140e	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
  01415	eb 0f		 jmp	 SHORT $LN17@ShopMapChe
$LN16@ShopMapChe:
  01417	0f b6 4d 08	 movzx	 ecx, BYTE PTR _MapNumber$[ebp]
  0141b	33 d2		 xor	 edx, edx
  0141d	83 f9 32	 cmp	 ecx, 50			; 00000032H
  01420	0f 9e c2	 setle	 dl
  01423	89 55 b4	 mov	 DWORD PTR tv128[ebp], edx
$LN17@ShopMapChe:
  01426	83 7d b4 00	 cmp	 DWORD PTR tv128[ebp], 0
  0142a	75 09		 jne	 SHORT $LN2@ShopMapChe
  0142c	0f b6 45 08	 movzx	 eax, BYTE PTR _MapNumber$[ebp]
  01430	83 f8 27	 cmp	 eax, 39			; 00000027H
  01433	75 04		 jne	 SHORT $LN3@ShopMapChe
$LN2@ShopMapChe:

; 469  : 	{
; 470  : 		return 0;

  01435	33 c0		 xor	 eax, eax
  01437	eb 34		 jmp	 SHORT $LN4@ShopMapChe
$LN3@ShopMapChe:

; 471  : 	}
; 472  : 
; 473  : 	BYTE attr = MapC[MapNumber].GetAttr(X, Y);

  01439	0f bf 45 10	 movsx	 eax, WORD PTR _Y$[ebp]
  0143d	50		 push	 eax
  0143e	0f bf 4d 0c	 movsx	 ecx, WORD PTR _X$[ebp]
  01442	51		 push	 ecx
  01443	0f b6 4d 08	 movzx	 ecx, BYTE PTR _MapNumber$[ebp]
  01447	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  0144d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  01453	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  01458	88 45 fb	 mov	 BYTE PTR _attr$[ebp], al

; 474  : 
; 475  : 	if( (attr &1) == 1 )

  0145b	0f b6 45 fb	 movzx	 eax, BYTE PTR _attr$[ebp]
  0145f	83 e0 01	 and	 eax, 1
  01462	74 07		 je	 SHORT $LN1@ShopMapChe

; 476  : 	{
; 477  : 		return 1;

  01464	b8 01 00 00 00	 mov	 eax, 1
  01469	eb 02		 jmp	 SHORT $LN4@ShopMapChe
$LN1@ShopMapChe:

; 478  : 	}
; 479  : 
; 480  : 	return 0;

  0146b	33 c0		 xor	 eax, eax
$LN4@ShopMapChe:

; 481  : }

  0146d	5f		 pop	 edi
  0146e	5e		 pop	 esi
  0146f	5b		 pop	 ebx
  01470	8b e5		 mov	 esp, ebp
  01472	5d		 pop	 ebp
  01473	c2 0c 00	 ret	 12			; 0000000cH
?ShopMapCheck@CPCBangPointSystem@@QAEHEFF@Z ENDP	; CPCBangPointSystem::ShopMapCheck
_TEXT	ENDS
PUBLIC	?EGUserConnectPcBang@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::EGUserConnectPcBang
PUBLIC	??_C@_0CN@LJIFMDKJ@?$FLPCBangPointSystem?$FN?$FLSetPCBangPoi@ ; `string'
PUBLIC	?SetPointUser@CPCBangPointSystem@@QAEXHH@Z	; CPCBangPointSystem::SetPointUser
;	COMDAT ??_C@_0CN@LJIFMDKJ@?$FLPCBangPointSystem?$FN?$FLSetPCBangPoi@
CONST	SEGMENT
??_C@_0CN@LJIFMDKJ@?$FLPCBangPointSystem?$FN?$FLSetPCBangPoi@ DB '[PCBang'
	DB	'PointSystem][SetPCBangPointUser] [%s]', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_iRuleTime$ = 12					; size = 4
?SetPointUser@CPCBangPointSystem@@QAEXHH@Z PROC		; CPCBangPointSystem::SetPointUser
; _this$ = ecx

; 484  : {

  01480	55		 push	 ebp
  01481	8b ec		 mov	 ebp, esp
  01483	83 ec 44	 sub	 esp, 68			; 00000044H
  01486	53		 push	 ebx
  01487	56		 push	 esi
  01488	57		 push	 edi
  01489	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 485  : 	if( gObj[aIndex].Type != OBJ_USER )

  0148c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0148f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01495	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0149b	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  014a0	83 fa 01	 cmp	 edx, 1
  014a3	74 05		 je	 SHORT $LN7@SetPointUs

; 486  : 	{
; 487  : 		return;

  014a5	e9 bd 00 00 00	 jmp	 $LN8@SetPointUs
$LN7@SetPointUs:

; 488  : 	}
; 489  : 
; 490  : 	if( g_btPcBangPointSystemLevel == 0 )

  014aa	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_btPcBangPointSystemLevel@@3EA ; g_btPcBangPointSystemLevel
  014b1	85 c0		 test	 eax, eax
  014b3	75 1c		 jne	 SHORT $LN6@SetPointUs

; 491  : 	{
; 492  : 		gObj[aIndex].m_iPcBangConnectionType = 0;

  014b5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014b8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  014be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  014c4	c7 84 01 1c 20
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+8220], 0

; 493  : 	}
; 494  : 	else

  014cf	eb 4d		 jmp	 SHORT $LN5@SetPointUs
$LN6@SetPointUs:

; 495  : 	{
; 496  : 		if( g_btPcBangPointSystemLevel == 1 )

  014d1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_btPcBangPointSystemLevel@@3EA ; g_btPcBangPointSystemLevel
  014d8	83 f8 01	 cmp	 eax, 1
  014db	75 1b		 jne	 SHORT $LN4@SetPointUs

; 497  : 		{
; 498  : 			gObj[aIndex].m_iPcBangConnectionType = iRuleTime;

  014dd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014e0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  014e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  014ec	8b 55 0c	 mov	 edx, DWORD PTR _iRuleTime$[ebp]
  014ef	89 94 01 1c 20
	00 00		 mov	 DWORD PTR [ecx+eax+8220], edx
  014f6	eb 26		 jmp	 SHORT $LN5@SetPointUs
$LN4@SetPointUs:

; 499  : 		}
; 500  : 		else if( g_btPcBangPointSystemLevel == 2 )

  014f8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_btPcBangPointSystemLevel@@3EA ; g_btPcBangPointSystemLevel
  014ff	83 f8 02	 cmp	 eax, 2
  01502	75 1a		 jne	 SHORT $LN5@SetPointUs

; 501  : 		{
; 502  : 			gObj[aIndex].m_iPcBangConnectionType = 1;

  01504	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01507	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0150d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01513	c7 84 01 1c 20
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+8220], 1
$LN5@SetPointUs:

; 503  : 		}
; 504  : 	}
; 505  : 
; 506  : 	if( gObj[aIndex].m_iPcBangConnectionType == 1 )

  0151e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01521	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01527	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0152d	83 bc 01 1c 20
	00 00 01	 cmp	 DWORD PTR [ecx+eax+8220], 1
  01535	75 22		 jne	 SHORT $LN1@SetPointUs

; 507  : 	{
; 508  : 		LogAdd("[PCBangPointSystem][SetPCBangPointUser] [%s]", gObj[aIndex].AccountID);

  01537	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0153a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01540	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01546	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  0154a	52		 push	 edx
  0154b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@LJIFMDKJ@?$FLPCBangPointSystem?$FN?$FLSetPCBangPoi@
  01550	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01556	83 c4 08	 add	 esp, 8
$LN1@SetPointUs:

; 509  : 	}
; 510  : 
; 511  : 	g_PCBangPointSystem.EGUserConnectPcBang(aIndex);

  01559	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0155c	50		 push	 eax
  0155d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PCBangPointSystem@@3VCPCBangPointSystem@@A ; g_PCBangPointSystem
  01562	e8 00 00 00 00	 call	 ?EGUserConnectPcBang@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::EGUserConnectPcBang
$LN8@SetPointUs:

; 512  : }

  01567	5f		 pop	 edi
  01568	5e		 pop	 esi
  01569	5b		 pop	 ebx
  0156a	8b e5		 mov	 esp, ebp
  0156c	5d		 pop	 ebp
  0156d	c2 08 00	 ret	 8
?SetPointUser@CPCBangPointSystem@@QAEXHH@Z ENDP		; CPCBangPointSystem::SetPointUser
_TEXT	ENDS
PUBLIC	??_C@_0DJ@BGACMBPK@?$FLPCBangPointSystem?$FN?$FLAdd?5Point?$FN?5?$FL@ ; `string'
PUBLIC	?EGReqUpdatePcBangResetPointInfo@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::EGReqUpdatePcBangResetPointInfo
PUBLIC	__$ArrayPad$
PUBLIC	?AddPoint@CPCBangPointSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CPCBangPointSystem::AddPoint
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__wsprintfA:PROC
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ??_C@_0DJ@BGACMBPK@?$FLPCBangPointSystem?$FN?$FLAdd?5Point?$FN?5?$FL@
CONST	SEGMENT
??_C@_0DJ@BGACMBPK@?$FLPCBangPointSystem?$FN?$FLAdd?5Point?$FN?5?$FL@ DB '['
	DB	'PCBangPointSystem][Add Point] [%s] %d/Total:%d Rule(%d)', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv157 = -360						; size = 4
_szTemp$233694 = -292					; size = 256
_iPointValue$233689 = -36				; size = 4
_iCommonRuleTime$ = -32					; size = 4
_sysTime$ = -28						; size = 16
_bFeverTime$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?AddPoint@CPCBangPointSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CPCBangPointSystem::AddPoint
; _this$ = ecx

; 515  : {

  01570	55		 push	 ebp
  01571	8b ec		 mov	 ebp, esp
  01573	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  01579	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0157e	33 c5		 xor	 eax, ebp
  01580	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01583	53		 push	 ebx
  01584	56		 push	 esi
  01585	57		 push	 edi
  01586	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 516  : 	if( lpObj->Type != OBJ_USER )

  01589	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0158c	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01590	83 f9 01	 cmp	 ecx, 1
  01593	74 0a		 je	 SHORT $LN18@AddPoint

; 517  : 	{
; 518  : 		return TRUE;

  01595	b8 01 00 00 00	 mov	 eax, 1
  0159a	e9 b2 02 00 00	 jmp	 $LN19@AddPoint
$LN18@AddPoint:

; 519  : 	}
; 520  : 
; 521  : 	if( this->m_bPointSystemOn == FALSE )

  0159f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  015a2	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  015a6	75 0a		 jne	 SHORT $LN17@AddPoint

; 522  : 	{
; 523  : 		return TRUE;

  015a8	b8 01 00 00 00	 mov	 eax, 1
  015ad	e9 9f 02 00 00	 jmp	 $LN19@AddPoint
$LN17@AddPoint:

; 524  : 	}
; 525  : 
; 526  : 	if( lpObj->Connected < PLAYER_CONNECTED )

  015b2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015b5	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  015b9	7d 0a		 jge	 SHORT $LN16@AddPoint

; 527  : 	{
; 528  : 		return TRUE;

  015bb	b8 01 00 00 00	 mov	 eax, 1
  015c0	e9 8c 02 00 00	 jmp	 $LN19@AddPoint
$LN16@AddPoint:

; 529  : 	}
; 530  : 
; 531  : 	if( lpObj->m_PcBangPointSystem.m_bPcBangPointEnable == FALSE )

  015c5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015c8	83 b8 20 20 00
	00 00		 cmp	 DWORD PTR [eax+8224], 0
  015cf	75 0a		 jne	 SHORT $LN15@AddPoint

; 532  : 	{
; 533  : 		return TRUE;

  015d1	b8 01 00 00 00	 mov	 eax, 1
  015d6	e9 76 02 00 00	 jmp	 $LN19@AddPoint
$LN15@AddPoint:

; 534  : 	}
; 535  : 
; 536  : 	if( lpObj->m_PcBangPointSystem.m_dwPcBangPointTick <= 0  )

  015db	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015de	83 b8 34 20 00
	00 00		 cmp	 DWORD PTR [eax+8244], 0
  015e5	77 19		 ja	 SHORT $LN14@AddPoint

; 537  : 	{
; 538  : 		lpObj->m_PcBangPointSystem.m_dwPcBangPointTick = GetTickCount();

  015e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  015ed	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  015f0	89 81 34 20 00
	00		 mov	 DWORD PTR [ecx+8244], eax

; 539  : 		return TRUE;

  015f6	b8 01 00 00 00	 mov	 eax, 1
  015fb	e9 51 02 00 00	 jmp	 $LN19@AddPoint
$LN14@AddPoint:

; 540  : 	}
; 541  : 
; 542  : 	BOOL bFeverTime; //loc2
; 543  : 
; 544  : 	SYSTEMTIME sysTime; //
; 545  : 	GetLocalTime(&sysTime); //

  01600	8d 45 e4	 lea	 eax, DWORD PTR _sysTime$[ebp]
  01603	50		 push	 eax
  01604	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 546  : 	
; 547  : 	bFeverTime = FALSE;

  0160a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bFeverTime$[ebp], 0

; 548  : 
; 549  : 	if( g_sPCBangFeverStartHour <= g_sPCBangFeverEndHour )

  01611	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g_sPCBangFeverStartHour@@3FA ; g_sPCBangFeverStartHour
  01618	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?g_sPCBangFeverEndHour@@3FA ; g_sPCBangFeverEndHour
  0161f	3b c1		 cmp	 eax, ecx
  01621	7f 27		 jg	 SHORT $LN13@AddPoint

; 550  : 	{
; 551  : 		if( sysTime.wHour >= g_sPCBangFeverStartHour && sysTime.wHour < g_sPCBangFeverEndHour)

  01623	0f b7 45 ec	 movzx	 eax, WORD PTR _sysTime$[ebp+8]
  01627	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?g_sPCBangFeverStartHour@@3FA ; g_sPCBangFeverStartHour
  0162e	3b c1		 cmp	 eax, ecx
  01630	7c 16		 jl	 SHORT $LN12@AddPoint
  01632	0f b7 45 ec	 movzx	 eax, WORD PTR _sysTime$[ebp+8]
  01636	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?g_sPCBangFeverEndHour@@3FA ; g_sPCBangFeverEndHour
  0163d	3b c1		 cmp	 eax, ecx
  0163f	7d 07		 jge	 SHORT $LN12@AddPoint

; 552  : 		{
; 553  : 			bFeverTime = TRUE;

  01641	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFeverTime$[ebp], 1
$LN12@AddPoint:

; 554  : 		}
; 555  : 	}

  01648	eb 25		 jmp	 SHORT $LN11@AddPoint
$LN13@AddPoint:

; 556  : 	else if( sysTime.wHour >= g_sPCBangFeverStartHour || sysTime.wHour < g_sPCBangFeverEndHour )

  0164a	0f b7 45 ec	 movzx	 eax, WORD PTR _sysTime$[ebp+8]
  0164e	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?g_sPCBangFeverStartHour@@3FA ; g_sPCBangFeverStartHour
  01655	3b c1		 cmp	 eax, ecx
  01657	7d 0f		 jge	 SHORT $LN9@AddPoint
  01659	0f b7 45 ec	 movzx	 eax, WORD PTR _sysTime$[ebp+8]
  0165d	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?g_sPCBangFeverEndHour@@3FA ; g_sPCBangFeverEndHour
  01664	3b c1		 cmp	 eax, ecx
  01666	7d 07		 jge	 SHORT $LN11@AddPoint
$LN9@AddPoint:

; 557  : 	{
; 558  : 		bFeverTime = TRUE;

  01668	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFeverTime$[ebp], 1
$LN11@AddPoint:

; 559  : 	}
; 560  : 
; 561  : 	DWORD iCommonRuleTime = (GetTickCount() - lpObj->m_PcBangPointSystem.m_dwPcBangPointTick) / 1000; //loc7

  0166f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01675	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01678	2b 81 34 20 00
	00		 sub	 eax, DWORD PTR [ecx+8244]
  0167e	33 d2		 xor	 edx, edx
  01680	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  01685	f7 f1		 div	 ecx
  01687	89 45 e0	 mov	 DWORD PTR _iCommonRuleTime$[ebp], eax

; 562  : 
; 563  : 	if( iCommonRuleTime >= lpObj->m_PcBangPointSystem.m_sPcBangCommonRuleTime )

  0168a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0168d	0f bf 88 26 20
	00 00		 movsx	 ecx, WORD PTR [eax+8230]
  01694	39 4d e0	 cmp	 DWORD PTR _iCommonRuleTime$[ebp], ecx
  01697	0f 82 af 01 00
	00		 jb	 $LN8@AddPoint

; 564  : 	{
; 565  : 		//Timer Class Start
; 566  : 		if(lpObj->m_PCBangPointTimer.CheckTime() != 2)

  0169d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016a0	81 c1 40 20 00
	00		 add	 ecx, 8256		; 00002040H
  016a6	e8 00 00 00 00	 call	 ?CheckTime@CPCBangPointTimer@@QAEHXZ ; CPCBangPointTimer::CheckTime
  016ab	83 f8 02	 cmp	 eax, 2
  016ae	0f 84 98 01 00
	00		 je	 $LN8@AddPoint

; 567  : 		{
; 568  : 			lpObj->m_PcBangPointSystem.m_dwPcBangPointTick = GetTickCount();

  016b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  016ba	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016bd	89 81 34 20 00
	00		 mov	 DWORD PTR [ecx+8244], eax

; 569  : 
; 570  : 			if(this->CheckPcBangRuleTime(lpObj->m_Index) == 1)

  016c3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  016c8	51		 push	 ecx
  016c9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  016cc	e8 00 00 00 00	 call	 ?CheckPcBangRuleTime@CPCBangPointSystem@@QAEHH@Z ; CPCBangPointSystem::CheckPcBangRuleTime
  016d1	83 f8 01	 cmp	 eax, 1
  016d4	0f 85 72 01 00
	00		 jne	 $LN8@AddPoint

; 571  : 			{
; 572  : 				int iPointValue = (bFeverTime == TRUE)?(lpObj->m_PcBangPointSystem.m_sPcBangGainPoint * g_sPCBangFeverMultipleValue):(lpObj->m_PcBangPointSystem.m_sPcBangGainPoint); //epic :)

  016da	83 7d f4 01	 cmp	 DWORD PTR _bFeverTime$[ebp], 1
  016de	75 1c		 jne	 SHORT $LN21@AddPoint
  016e0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016e3	0f bf 88 28 20
	00 00		 movsx	 ecx, WORD PTR [eax+8232]
  016ea	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR ?g_sPCBangFeverMultipleValue@@3FA ; g_sPCBangFeverMultipleValue
  016f1	0f af ca	 imul	 ecx, edx
  016f4	89 8d 98 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], ecx
  016fa	eb 10		 jmp	 SHORT $LN22@AddPoint
$LN21@AddPoint:
  016fc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016ff	0f bf 88 28 20
	00 00		 movsx	 ecx, WORD PTR [eax+8232]
  01706	89 8d 98 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], ecx
$LN22@AddPoint:
  0170c	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR tv157[ebp]
  01712	89 55 dc	 mov	 DWORD PTR _iPointValue$233689[ebp], edx

; 573  : 
; 574  : 				lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint += iPointValue;

  01715	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01718	8b 88 2c 20 00
	00		 mov	 ecx, DWORD PTR [eax+8236]
  0171e	03 4d dc	 add	 ecx, DWORD PTR _iPointValue$233689[ebp]
  01721	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01724	89 8a 2c 20 00
	00		 mov	 DWORD PTR [edx+8236], ecx

; 575  : 
; 576  : 				if(lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint < 0)

  0172a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0172d	83 b8 2c 20 00
	00 00		 cmp	 DWORD PTR [eax+8236], 0
  01734	7d 0f		 jge	 SHORT $LN5@AddPoint

; 577  : 				{
; 578  : 					lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint = 0;

  01736	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01739	c7 80 2c 20 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8236], 0
  01743	eb 7f		 jmp	 SHORT $LN4@AddPoint
$LN5@AddPoint:

; 579  : 				}
; 580  : 				else if(lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint > g_sPCBangMaxPoint)

  01745	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g_sPCBangMaxPoint@@3FA ; g_sPCBangMaxPoint
  0174c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0174f	39 81 2c 20 00
	00		 cmp	 DWORD PTR [ecx+8236], eax
  01755	7e 32		 jle	 SHORT $LN3@AddPoint

; 581  : 				{
; 582  : 					lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint = g_sPCBangMaxPoint;

  01757	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g_sPCBangMaxPoint@@3FA ; g_sPCBangMaxPoint
  0175e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01761	89 81 2c 20 00
	00		 mov	 DWORD PTR [ecx+8236], eax

; 583  : 					GCServerMsgStringSend(lMsg.Get(3393), lpObj->m_Index, 1);

  01767	6a 01		 push	 1
  01769	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0176c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0176e	51		 push	 ecx
  0176f	68 41 0d 00 00	 push	 3393			; 00000d41H
  01774	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01779	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0177e	50		 push	 eax
  0177f	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01784	83 c4 0c	 add	 esp, 12			; 0000000cH

; 584  : 				}
; 585  : 				else

  01787	eb 3b		 jmp	 SHORT $LN4@AddPoint
$LN3@AddPoint:

; 586  : 				{
; 587  : 					char szTemp[256];
; 588  : 					wsprintf(szTemp, lMsg.Get(3392), iPointValue);

  01789	8b 45 dc	 mov	 eax, DWORD PTR _iPointValue$233689[ebp]
  0178c	50		 push	 eax
  0178d	68 40 0d 00 00	 push	 3392			; 00000d40H
  01792	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01797	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0179c	50		 push	 eax
  0179d	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$233694[ebp]
  017a3	51		 push	 ecx
  017a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  017aa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 589  : 					GCServerMsgStringSend(szTemp, lpObj->m_Index, 1);

  017ad	6a 01		 push	 1
  017af	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  017b4	51		 push	 ecx
  017b5	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$233694[ebp]
  017bb	52		 push	 edx
  017bc	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  017c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@AddPoint:

; 590  : 				}
; 591  : 
; 592  : 				this->EGReqUpdatePcBangResetPointInfo(lpObj->m_Index);

  017c4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  017c9	51		 push	 ecx
  017ca	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  017cd	e8 00 00 00 00	 call	 ?EGReqUpdatePcBangResetPointInfo@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::EGReqUpdatePcBangResetPointInfo

; 593  : 
; 594  : 				LogAddTD("[PCBangPointSystem][Add Point] [%s] %d/Total:%d Rule(%d)", 
; 595  : 					lpObj->AccountID, lpObj->m_PcBangPointSystem.m_sPcBangGainPoint, 
; 596  : 					lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint, lpObj->m_PcBangPointSystem.m_bPcBangCommonRule);

  017d2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017d5	0f b6 88 24 20
	00 00		 movzx	 ecx, BYTE PTR [eax+8228]
  017dc	51		 push	 ecx
  017dd	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  017e0	8b 82 2c 20 00
	00		 mov	 eax, DWORD PTR [edx+8236]
  017e6	50		 push	 eax
  017e7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  017ea	0f bf 91 28 20
	00 00		 movsx	 edx, WORD PTR [ecx+8232]
  017f1	52		 push	 edx
  017f2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017f5	83 c0 6c	 add	 eax, 108		; 0000006cH
  017f8	50		 push	 eax
  017f9	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@BGACMBPK@?$FLPCBangPointSystem?$FN?$FLAdd?5Point?$FN?5?$FL@
  017fe	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01804	83 c4 14	 add	 esp, 20			; 00000014H

; 597  : 
; 598  : 				if(lpObj->m_PcBangPointSystem.m_bPcBangInfoSet == FALSE)

  01807	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0180a	83 b8 30 20 00
	00 00		 cmp	 DWORD PTR [eax+8240], 0
  01811	75 39		 jne	 SHORT $LN8@AddPoint

; 599  : 				{
; 600  : 					lpObj->m_PcBangPointSystem.m_bPcBangCommonRule = 1;

  01813	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01816	c6 80 24 20 00
	00 01		 mov	 BYTE PTR [eax+8228], 1

; 601  : 					lpObj->m_PcBangPointSystem.m_bPcBangInfoSet = TRUE;

  0181d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01820	c7 80 30 20 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+8240], 1

; 602  : 					lpObj->m_PcBangPointSystem.m_sPcBangCommonRuleTime = g_sPCBangCommonRuleTime;

  0182a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0182d	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?g_sPCBangCommonRuleTime@@3FA ; g_sPCBangCommonRuleTime
  01834	66 89 88 26 20
	00 00		 mov	 WORD PTR [eax+8230], cx

; 603  : 					lpObj->m_PcBangPointSystem.m_sPcBangGainPoint = g_sPCBangCommonRuleTimePoint;

  0183b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0183e	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?g_sPCBangCommonRuleTimePoint@@3FA ; g_sPCBangCommonRuleTimePoint
  01845	66 89 88 28 20
	00 00		 mov	 WORD PTR [eax+8232], cx
$LN8@AddPoint:

; 604  : 				}
; 605  : 			}
; 606  : 		}
; 607  : 	}
; 608  : 
; 609  : 	return TRUE;

  0184c	b8 01 00 00 00	 mov	 eax, 1
$LN19@AddPoint:

; 610  : }

  01851	5f		 pop	 edi
  01852	5e		 pop	 esi
  01853	5b		 pop	 ebx
  01854	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01857	33 cd		 xor	 ecx, ebp
  01859	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0185e	8b e5		 mov	 esp, ebp
  01860	5d		 pop	 ebp
  01861	c2 04 00	 ret	 4
?AddPoint@CPCBangPointSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CPCBangPointSystem::AddPoint
_TEXT	ENDS
PUBLIC	??_C@_0CM@BGBOIGIB@?$FLPCBangPointSystem?$FN?$FLUser?5Connect@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?EGUserConnectTest@CPCBangPointSystem@@QAEXH@Z	; CPCBangPointSystem::EGUserConnectTest
EXTRN	?DataSendEventChip@@YAXPADH@Z:PROC		; DataSendEventChip
EXTRN	_memcpy:PROC
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
;	COMDAT ??_C@_0CM@BGBOIGIB@?$FLPCBangPointSystem?$FN?$FLUser?5Connect@
CONST	SEGMENT
??_C@_0CM@BGBOIGIB@?$FLPCBangPointSystem?$FN?$FLUser?5Connect@ DB '[PCBan'
	DB	'gPointSystem][User Connect] [%s] - %s', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pMsg$233702 = -28					; size = 18
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?EGUserConnectTest@CPCBangPointSystem@@QAEXH@Z PROC	; CPCBangPointSystem::EGUserConnectTest
; _this$ = ecx

; 613  : {

  01870	55		 push	 ebp
  01871	8b ec		 mov	 ebp, esp
  01873	83 ec 5c	 sub	 esp, 92			; 0000005cH
  01876	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0187b	33 c5		 xor	 eax, ebp
  0187d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01880	53		 push	 ebx
  01881	56		 push	 esi
  01882	57		 push	 edi
  01883	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 614  : 	if(gObj[aIndex].m_iPcBangConnectionType == 1) //LocalServer

  01886	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01889	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0188f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01895	83 bc 01 1c 20
	00 00 01	 cmp	 DWORD PTR [ecx+eax+8220], 1
  0189d	0f 85 9b 00 00
	00		 jne	 $LN2@EGUserConn

; 615  : 	{
; 616  : 		PMSG_REQ_REG_PC_POINT pMsg = {0};

  018a3	c6 45 e4 00	 mov	 BYTE PTR _pMsg$233702[ebp], 0
  018a7	33 c0		 xor	 eax, eax
  018a9	89 45 e5	 mov	 DWORD PTR _pMsg$233702[ebp+1], eax
  018ac	89 45 e9	 mov	 DWORD PTR _pMsg$233702[ebp+5], eax
  018af	89 45 ed	 mov	 DWORD PTR _pMsg$233702[ebp+9], eax
  018b2	89 45 f1	 mov	 DWORD PTR _pMsg$233702[ebp+13], eax
  018b5	88 45 f5	 mov	 BYTE PTR _pMsg$233702[ebp+17], al

; 617  : 
; 618  : 		PHeadSetB((LPBYTE)&pMsg, 0x23, sizeof(pMsg));

  018b8	6a 12		 push	 18			; 00000012H
  018ba	6a 23		 push	 35			; 00000023H
  018bc	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$233702[ebp]
  018bf	50		 push	 eax
  018c0	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  018c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 619  : 
; 620  : 		pMsg.aIndex = aIndex;

  018c8	66 8b 45 08	 mov	 ax, WORD PTR _aIndex$[ebp]
  018cc	66 89 45 e8	 mov	 WORD PTR _pMsg$233702[ebp+4], ax

; 621  : 
; 622  : 		memcpy(pMsg.AccountID, gObj[aIndex].AccountID, MAX_ACCOUNT_LEN);

  018d0	6a 0a		 push	 10			; 0000000aH
  018d2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  018d5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  018db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  018e1	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  018e5	52		 push	 edx
  018e6	8d 45 eb	 lea	 eax, DWORD PTR _pMsg$233702[ebp+7]
  018e9	50		 push	 eax
  018ea	e8 00 00 00 00	 call	 _memcpy
  018ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 623  : 
; 624  : 		pMsg.btResult = 0;

  018f2	c6 45 ea 00	 mov	 BYTE PTR _pMsg$233702[ebp+6], 0

; 625  : 
; 626  : 		pMsg.AccountID[10] = '\0';

  018f6	c6 45 f5 00	 mov	 BYTE PTR _pMsg$233702[ebp+17], 0

; 627  : 
; 628  : 		DataSendEventChip((char*)&pMsg, sizeof(pMsg));

  018fa	6a 12		 push	 18			; 00000012H
  018fc	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$233702[ebp]
  018ff	50		 push	 eax
  01900	e8 00 00 00 00	 call	 ?DataSendEventChip@@YAXPADH@Z ; DataSendEventChip
  01905	83 c4 08	 add	 esp, 8

; 629  : 
; 630  : 		LogAdd("[PCBangPointSystem][User Connect] [%s] - %s", 
; 631  : 			gObj[aIndex].AccountID, gObj[aIndex].Ip_addr);

  01908	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0190b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01911	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01917	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  0191b	52		 push	 edx
  0191c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0191f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01925	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0192b	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  0192f	52		 push	 edx
  01930	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BGBOIGIB@?$FLPCBangPointSystem?$FN?$FLUser?5Connect@
  01935	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0193b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@EGUserConn:

; 632  : 	}
; 633  : }

  0193e	5f		 pop	 edi
  0193f	5e		 pop	 esi
  01940	5b		 pop	 ebx
  01941	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01944	33 cd		 xor	 ecx, ebp
  01946	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0194b	8b e5		 mov	 esp, ebp
  0194d	5d		 pop	 ebp
  0194e	c2 04 00	 ret	 4
?EGUserConnectTest@CPCBangPointSystem@@QAEXH@Z ENDP	; CPCBangPointSystem::EGUserConnectTest
_TEXT	ENDS
PUBLIC	?GCSendPcBangUserPoint@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::GCSendPcBangUserPoint
PUBLIC	?EGAnsPcBangPointInfo@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z ; CPCBangPointSystem::EGAnsPcBangPointInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv69 = -84						; size = 4
_lpObj$ = -16						; size = 4
_aIndex$ = -12						; size = 4
_m_PCInfo$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?EGAnsPcBangPointInfo@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z PROC ; CPCBangPointSystem::EGAnsPcBangPointInfo
; _this$ = ecx

; 636  : {

  01960	55		 push	 ebp
  01961	8b ec		 mov	 ebp, esp
  01963	83 ec 54	 sub	 esp, 84			; 00000054H
  01966	53		 push	 ebx
  01967	56		 push	 esi
  01968	57		 push	 edi
  01969	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 637  : 	PMSG_ANS_REG_PC_POINT* m_PCInfo = aRecv;

  0196c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0196f	89 45 f8	 mov	 DWORD PTR _m_PCInfo$[ebp], eax

; 638  : 	int aIndex = m_PCInfo->aIndex;

  01972	8b 45 f8	 mov	 eax, DWORD PTR _m_PCInfo$[ebp]
  01975	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01979	89 4d f4	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 639  : 
; 640  : 	if( OBJMAX_RANGE(aIndex) == 0 )

  0197c	83 7d f4 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  01980	7d 09		 jge	 SHORT $LN4@EGAnsPcBan
  01982	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  01989	eb 0f		 jmp	 SHORT $LN5@EGAnsPcBan
$LN4@EGAnsPcBan:
  0198b	33 c0		 xor	 eax, eax
  0198d	81 7d f4 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  01994	0f 9e c0	 setle	 al
  01997	89 45 ac	 mov	 DWORD PTR tv69[ebp], eax
$LN5@EGAnsPcBan:
  0199a	83 7d ac 00	 cmp	 DWORD PTR tv69[ebp], 0
  0199e	75 02		 jne	 SHORT $LN1@EGAnsPcBan

; 641  : 	{
; 642  : 		return;

  019a0	eb 4a		 jmp	 SHORT $LN2@EGAnsPcBan
$LN1@EGAnsPcBan:

; 643  : 	}
; 644  : 
; 645  : 	LPOBJ lpObj = &gObj[aIndex];

  019a2	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$[ebp]
  019a5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  019ab	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  019b1	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 646  : 
; 647  : 	lpObj->m_PcBangPointSystem.m_bPcBangPointEnable = TRUE;

  019b4	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  019b7	c7 80 20 20 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+8224], 1

; 648  : 	lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint = m_PCInfo->sPoint;

  019c1	8b 45 f8	 mov	 eax, DWORD PTR _m_PCInfo$[ebp]
  019c4	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  019c8	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  019cb	89 8a 2c 20 00
	00		 mov	 DWORD PTR [edx+8236], ecx

; 649  : 	lpObj->m_PcBangPointSystem.m_dwPcBangPointTick = GetTickCount();

  019d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  019d7	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  019da	89 81 34 20 00
	00		 mov	 DWORD PTR [ecx+8244], eax

; 650  : 
; 651  : 	this->GCSendPcBangUserPoint(aIndex);

  019e0	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$[ebp]
  019e3	50		 push	 eax
  019e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019e7	e8 00 00 00 00	 call	 ?GCSendPcBangUserPoint@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::GCSendPcBangUserPoint
$LN2@EGAnsPcBan:

; 652  : }

  019ec	5f		 pop	 edi
  019ed	5e		 pop	 esi
  019ee	5b		 pop	 ebx
  019ef	8b e5		 mov	 esp, ebp
  019f1	5d		 pop	 ebp
  019f2	c2 04 00	 ret	 4
?EGAnsPcBangPointInfo@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z ENDP ; CPCBangPointSystem::EGAnsPcBangPointInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?EGReqUpdatePcBangPointInfo@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::EGReqUpdatePcBangPointInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -36						; size = 28
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?EGReqUpdatePcBangPointInfo@CPCBangPointSystem@@QAEXH@Z PROC ; CPCBangPointSystem::EGReqUpdatePcBangPointInfo
; _this$ = ecx

; 655  : {

  01a00	55		 push	 ebp
  01a01	8b ec		 mov	 ebp, esp
  01a03	83 ec 64	 sub	 esp, 100		; 00000064H
  01a06	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01a0b	33 c5		 xor	 eax, ebp
  01a0d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01a10	53		 push	 ebx
  01a11	56		 push	 esi
  01a12	57		 push	 edi
  01a13	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 656  : 	PMSG_ANS_REG_PC_POINT pMsg = {0};

  01a16	c6 45 dc 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  01a1a	33 c0		 xor	 eax, eax
  01a1c	89 45 dd	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  01a1f	89 45 e1	 mov	 DWORD PTR _pMsg$[ebp+5], eax
  01a22	89 45 e5	 mov	 DWORD PTR _pMsg$[ebp+9], eax
  01a25	89 45 e9	 mov	 DWORD PTR _pMsg$[ebp+13], eax
  01a28	89 45 ed	 mov	 DWORD PTR _pMsg$[ebp+17], eax
  01a2b	89 45 f1	 mov	 DWORD PTR _pMsg$[ebp+21], eax
  01a2e	66 89 45 f5	 mov	 WORD PTR _pMsg$[ebp+25], ax
  01a32	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+27], al

; 657  : 
; 658  : 	PHeadSetB((LPBYTE)&pMsg, 0x24, sizeof(pMsg));

  01a35	6a 1c		 push	 28			; 0000001cH
  01a37	6a 24		 push	 36			; 00000024H
  01a39	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01a3c	50		 push	 eax
  01a3d	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  01a42	83 c4 0c	 add	 esp, 12			; 0000000cH

; 659  : 
; 660  : 	pMsg.aIndex = aIndex;

  01a45	66 8b 45 08	 mov	 ax, WORD PTR _aIndex$[ebp]
  01a49	66 89 45 e0	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 661  : 
; 662  : 	memcpy(pMsg.AccountID, gObj[aIndex].AccountID, MAX_ACCOUNT_LEN);

  01a4d	6a 0a		 push	 10			; 0000000aH
  01a4f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01a52	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01a58	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01a5e	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  01a62	52		 push	 edx
  01a63	8d 45 e2	 lea	 eax, DWORD PTR _pMsg$[ebp+6]
  01a66	50		 push	 eax
  01a67	e8 00 00 00 00	 call	 _memcpy
  01a6c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 663  : 
; 664  : 	pMsg.AccountID[10] = '\0';

  01a6f	c6 45 ec 00	 mov	 BYTE PTR _pMsg$[ebp+16], 0

; 665  : 
; 666  : 	pMsg.btShopItemBuy = 0;

  01a73	c6 45 ed 00	 mov	 BYTE PTR _pMsg$[ebp+17], 0

; 667  : 
; 668  : 	pMsg.sPoint = gObj[aIndex].m_PcBangPointSystem.m_iPcBangAccumulatedPoint;

  01a77	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01a7a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01a80	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01a86	66 8b 94 01 2c
	20 00 00	 mov	 dx, WORD PTR [ecx+eax+8236]
  01a8e	66 89 55 ee	 mov	 WORD PTR _pMsg$[ebp+18], dx

; 669  : 
; 670  : 	DataSendEventChip((char*)&pMsg, sizeof(pMsg));

  01a92	6a 1c		 push	 28			; 0000001cH
  01a94	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01a97	50		 push	 eax
  01a98	e8 00 00 00 00	 call	 ?DataSendEventChip@@YAXPADH@Z ; DataSendEventChip
  01a9d	83 c4 08	 add	 esp, 8

; 671  : }

  01aa0	5f		 pop	 edi
  01aa1	5e		 pop	 esi
  01aa2	5b		 pop	 ebx
  01aa3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01aa6	33 cd		 xor	 ecx, ebp
  01aa8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01aad	8b e5		 mov	 esp, ebp
  01aaf	5d		 pop	 ebp
  01ab0	c2 04 00	 ret	 4
?EGReqUpdatePcBangPointInfo@CPCBangPointSystem@@QAEXH@Z ENDP ; CPCBangPointSystem::EGReqUpdatePcBangPointInfo
_TEXT	ENDS
PUBLIC	?EGAnsUserFirstPcBangUpdatePoint@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z ; CPCBangPointSystem::EGAnsUserFirstPcBangUpdatePoint
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv69 = -80						; size = 4
_aIndex$ = -12						; size = 4
_m_PCInfo$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?EGAnsUserFirstPcBangUpdatePoint@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z PROC ; CPCBangPointSystem::EGAnsUserFirstPcBangUpdatePoint
; _this$ = ecx

; 674  : {

  01ac0	55		 push	 ebp
  01ac1	8b ec		 mov	 ebp, esp
  01ac3	83 ec 50	 sub	 esp, 80			; 00000050H
  01ac6	53		 push	 ebx
  01ac7	56		 push	 esi
  01ac8	57		 push	 edi
  01ac9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 675  : 	PMSG_ANS_REG_PC_POINT* m_PCInfo = aRecv;

  01acc	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01acf	89 45 f8	 mov	 DWORD PTR _m_PCInfo$[ebp], eax

; 676  : 	int aIndex = m_PCInfo->aIndex;

  01ad2	8b 45 f8	 mov	 eax, DWORD PTR _m_PCInfo$[ebp]
  01ad5	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01ad9	89 4d f4	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 677  : 
; 678  : 	if( OBJMAX_RANGE(aIndex) == 0 )

  01adc	83 7d f4 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  01ae0	7d 09		 jge	 SHORT $LN5@EGAnsUserF
  01ae2	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  01ae9	eb 0f		 jmp	 SHORT $LN6@EGAnsUserF
$LN5@EGAnsUserF:
  01aeb	33 c0		 xor	 eax, eax
  01aed	81 7d f4 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  01af4	0f 9e c0	 setle	 al
  01af7	89 45 b0	 mov	 DWORD PTR tv69[ebp], eax
$LN6@EGAnsUserF:
  01afa	83 7d b0 00	 cmp	 DWORD PTR tv69[ebp], 0
  01afe	75 02		 jne	 SHORT $LN2@EGAnsUserF

; 679  : 	{
; 680  : 		return;

  01b00	eb 18		 jmp	 SHORT $LN3@EGAnsUserF
$LN2@EGAnsUserF:

; 681  : 	}
; 682  : 
; 683  : 	if(m_PCInfo->btShopItemBuy == 1)

  01b02	8b 45 f8	 mov	 eax, DWORD PTR _m_PCInfo$[ebp]
  01b05	0f b6 48 11	 movzx	 ecx, BYTE PTR [eax+17]
  01b09	83 f9 01	 cmp	 ecx, 1
  01b0c	75 0c		 jne	 SHORT $LN3@EGAnsUserF

; 684  : 	{
; 685  : 		this->GCSendPcBangUserPoint(aIndex);

  01b0e	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01b11	50		 push	 eax
  01b12	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b15	e8 00 00 00 00	 call	 ?GCSendPcBangUserPoint@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::GCSendPcBangUserPoint
$LN3@EGAnsUserF:

; 686  : 	}
; 687  : }

  01b1a	5f		 pop	 edi
  01b1b	5e		 pop	 esi
  01b1c	5b		 pop	 ebx
  01b1d	8b e5		 mov	 esp, ebp
  01b1f	5d		 pop	 ebp
  01b20	c2 04 00	 ret	 4
?EGAnsUserFirstPcBangUpdatePoint@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z ENDP ; CPCBangPointSystem::EGAnsUserFirstPcBangUpdatePoint
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?EGReqUpdatePcBangPointInfo@CPCBangPointSystem@@QAEXHF@Z ; CPCBangPointSystem::EGReqUpdatePcBangPointInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -28						; size = 20
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_sPCBangPoint$ = 12					; size = 2
?EGReqUpdatePcBangPointInfo@CPCBangPointSystem@@QAEXHF@Z PROC ; CPCBangPointSystem::EGReqUpdatePcBangPointInfo
; _this$ = ecx

; 690  : {

  01b30	55		 push	 ebp
  01b31	8b ec		 mov	 ebp, esp
  01b33	83 ec 5c	 sub	 esp, 92			; 0000005cH
  01b36	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01b3b	33 c5		 xor	 eax, ebp
  01b3d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01b40	53		 push	 ebx
  01b41	56		 push	 esi
  01b42	57		 push	 edi
  01b43	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 691  : 	if(this->m_bPointRankEvent == FALSE)

  01b46	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01b49	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  01b4d	75 02		 jne	 SHORT $LN1@EGReqUpdat

; 692  : 	{
; 693  : 		return;

  01b4f	eb 71		 jmp	 SHORT $LN2@EGReqUpdat
$LN1@EGReqUpdat:

; 694  : 	}
; 695  : 
; 696  : 	PMSG_REQ_UPDATE_PCBANG_USER_POINT pMsg = {0};

  01b51	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  01b55	33 c0		 xor	 eax, eax
  01b57	89 45 e5	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  01b5a	89 45 e9	 mov	 DWORD PTR _pMsg$[ebp+5], eax
  01b5d	89 45 ed	 mov	 DWORD PTR _pMsg$[ebp+9], eax
  01b60	89 45 f1	 mov	 DWORD PTR _pMsg$[ebp+13], eax
  01b63	66 89 45 f5	 mov	 WORD PTR _pMsg$[ebp+17], ax
  01b67	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+19], al

; 697  : 	
; 698  : 	PHeadSetB((LPBYTE)&pMsg, 0x25, sizeof(pMsg));

  01b6a	6a 14		 push	 20			; 00000014H
  01b6c	6a 25		 push	 37			; 00000025H
  01b6e	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01b71	50		 push	 eax
  01b72	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  01b77	83 c4 0c	 add	 esp, 12			; 0000000cH

; 699  : 
; 700  : 	pMsg.aIndex = aIndex;

  01b7a	66 8b 45 08	 mov	 ax, WORD PTR _aIndex$[ebp]
  01b7e	66 89 45 e8	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 701  : 
; 702  : 	memcpy(pMsg.AccountID, gObj[aIndex].AccountID, MAX_ACCOUNT_LEN);

  01b82	6a 0a		 push	 10			; 0000000aH
  01b84	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01b87	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01b8d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01b93	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  01b97	52		 push	 edx
  01b98	8d 45 ea	 lea	 eax, DWORD PTR _pMsg$[ebp+6]
  01b9b	50		 push	 eax
  01b9c	e8 00 00 00 00	 call	 _memcpy
  01ba1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 703  : 
; 704  : 	pMsg.AccountID[10] = '\0';

  01ba4	c6 45 f4 00	 mov	 BYTE PTR _pMsg$[ebp+16], 0

; 705  : 
; 706  : 	pMsg.btResult = 0;

  01ba8	c6 45 f5 00	 mov	 BYTE PTR _pMsg$[ebp+17], 0

; 707  : 
; 708  : 	pMsg.sPoint = sPCBangPoint;

  01bac	66 8b 45 0c	 mov	 ax, WORD PTR _sPCBangPoint$[ebp]
  01bb0	66 89 45 f6	 mov	 WORD PTR _pMsg$[ebp+18], ax

; 709  : 
; 710  : 	DataSendEventChip((char*)&pMsg, sizeof(pMsg));

  01bb4	6a 14		 push	 20			; 00000014H
  01bb6	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01bb9	50		 push	 eax
  01bba	e8 00 00 00 00	 call	 ?DataSendEventChip@@YAXPADH@Z ; DataSendEventChip
  01bbf	83 c4 08	 add	 esp, 8
$LN2@EGReqUpdat:

; 711  : }

  01bc2	5f		 pop	 edi
  01bc3	5e		 pop	 esi
  01bc4	5b		 pop	 ebx
  01bc5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01bc8	33 cd		 xor	 ecx, ebp
  01bca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01bcf	8b e5		 mov	 esp, ebp
  01bd1	5d		 pop	 ebp
  01bd2	c2 08 00	 ret	 8
?EGReqUpdatePcBangPointInfo@CPCBangPointSystem@@QAEXHF@Z ENDP ; CPCBangPointSystem::EGReqUpdatePcBangPointInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -20						; size = 10
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GCSendPcBangUserPoint@CPCBangPointSystem@@QAEXH@Z PROC	; CPCBangPointSystem::GCSendPcBangUserPoint
; _this$ = ecx

; 714  : {

  01be0	55		 push	 ebp
  01be1	8b ec		 mov	 ebp, esp
  01be3	83 ec 54	 sub	 esp, 84			; 00000054H
  01be6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01beb	33 c5		 xor	 eax, ebp
  01bed	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01bf0	53		 push	 ebx
  01bf1	56		 push	 esi
  01bf2	57		 push	 edi
  01bf3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 715  : 	PMSG_ANS_PCBANG_POINT_INFO pMsg = {0};

  01bf6	c6 45 ec 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  01bfa	33 c0		 xor	 eax, eax
  01bfc	89 45 ed	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  01bff	89 45 f1	 mov	 DWORD PTR _pMsg$[ebp+5], eax
  01c02	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+9], al

; 716  : 
; 717  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x04, sizeof(pMsg));

  01c05	6a 0a		 push	 10			; 0000000aH
  01c07	6a 04		 push	 4
  01c09	68 d0 00 00 00	 push	 208			; 000000d0H
  01c0e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01c11	50		 push	 eax
  01c12	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01c17	83 c4 10	 add	 esp, 16			; 00000010H

; 718  : 
; 719  : 	pMsg.m_sPoint = gObj[aIndex].m_PcBangPointSystem.m_iPcBangAccumulatedPoint;

  01c1a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01c1d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01c23	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01c29	66 8b 94 01 2c
	20 00 00	 mov	 dx, WORD PTR [ecx+eax+8236]
  01c31	66 89 55 f0	 mov	 WORD PTR _pMsg$[ebp+4], dx

; 720  : 	pMsg.m_sMaxPoint = g_sPCBangMaxPoint;

  01c35	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?g_sPCBangMaxPoint@@3FA ; g_sPCBangMaxPoint
  01c3b	66 89 45 f2	 mov	 WORD PTR _pMsg$[ebp+6], ax

; 721  : 	pMsg.m_btType = gObj[aIndex].m_iPcBangConnectionType;

  01c3f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01c42	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01c48	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01c4e	8a 94 01 1c 20
	00 00		 mov	 dl, BYTE PTR [ecx+eax+8220]
  01c55	88 55 f4	 mov	 BYTE PTR _pMsg$[ebp+8], dl

; 722  : 
; 723  : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  01c58	6a 0a		 push	 10			; 0000000aH
  01c5a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01c5d	50		 push	 eax
  01c5e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01c61	51		 push	 ecx
  01c62	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01c67	83 c4 0c	 add	 esp, 12			; 0000000cH

; 724  : }

  01c6a	5f		 pop	 edi
  01c6b	5e		 pop	 esi
  01c6c	5b		 pop	 ebx
  01c6d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01c70	33 cd		 xor	 ecx, ebp
  01c72	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01c77	8b e5		 mov	 esp, ebp
  01c79	5d		 pop	 ebp
  01c7a	c2 04 00	 ret	 4
?GCSendPcBangUserPoint@CPCBangPointSystem@@QAEXH@Z ENDP	; CPCBangPointSystem::GCSendPcBangUserPoint
_TEXT	ENDS
PUBLIC	??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@ ; `string'
PUBLIC	??_C@_0EJ@MJJDDFA@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??PCBangShopOpen@CPCBangPointSystem@@QAEXH@Z@4JA ; `CPCBangPointSystem::PCBangShopOpen'::`2'::__LINE__Var
PUBLIC	??_C@_0DK@HCKMKNMO@?$FLANTI?9HACK?$FN?$FLPCBangPointShopOpen?$FN@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?PCBangShopOpen@CPCBangPointSystem@@QAEXH@Z	; CPCBangPointSystem::PCBangShopOpen
EXTRN	?PHeadSetW@@YAXPAEEH@Z:PROC			; PHeadSetW
EXTRN	?gObjFixInventoryPointer@@YA_NH@Z:PROC		; gObjFixInventoryPointer
EXTRN	?ShopC@@3PAVCShop@@A:BYTE			; ShopC
EXTRN	?gObjIsConnectedGP@@YAHH@Z:PROC			; gObjIsConnectedGP
;	COMDAT ??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@
CONST	SEGMENT
??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@ DB '['
	DB	'Fix Inv.Ptr] False Location - %s, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@MJJDDFA@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0EJ@MJJDDFA@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\projects'
	DB	'\exteam6.3\source\gameserver\gameserver\pcbangpointsystem.cpp'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??PCBangShopOpen@CPCBangPointSystem@@QAEXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??PCBangShopOpen@CPCBangPointSystem@@QAEXH@Z@4JA DD 02d7H ; `CPCBangPointSystem::PCBangShopOpen'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DK@HCKMKNMO@?$FLANTI?9HACK?$FN?$FLPCBangPointShopOpen?$FN@
CONST	SEGMENT
??_C@_0DK@HCKMKNMO@?$FLANTI?9HACK?$FN?$FLPCBangPointShopOpen?$FN@ DB '[AN'
	DB	'TI-HACK][PCBangPointShopOpen] Couldn''t Open.. (%s)(%s)', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_size$ = -1060						; size = 4
_lOfs$ = -1056						; size = 4
_SendByte$ = -1052					; size = 1024
_pShopItem$ = -28					; size = 6
_pMsg$ = -20						; size = 5
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?PCBangShopOpen@CPCBangPointSystem@@QAEXH@Z PROC	; CPCBangPointSystem::PCBangShopOpen
; _this$ = ecx

; 727  : {

  01c80	55		 push	 ebp
  01c81	8b ec		 mov	 ebp, esp
  01c83	81 ec 64 04 00
	00		 sub	 esp, 1124		; 00000464H
  01c89	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01c8e	33 c5		 xor	 eax, ebp
  01c90	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01c93	53		 push	 ebx
  01c94	56		 push	 esi
  01c95	57		 push	 edi
  01c96	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 728  : 	LPOBJ lpObj = &gObj[aIndex];

  01c99	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01c9c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01ca2	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01ca8	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 729  : 
; 730  : 	if( lpObj->CloseType != -1 )

  01cab	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01cae	0f be 48 0b	 movsx	 ecx, BYTE PTR [eax+11]
  01cb2	83 f9 ff	 cmp	 ecx, -1
  01cb5	74 05		 je	 SHORT $LN7@PCBangShop

; 731  : 	{
; 732  : 		return;

  01cb7	e9 ab 02 00 00	 jmp	 $LN8@PCBangShop
$LN7@PCBangShop:

; 733  : 	}
; 734  : 
; 735  : 	if( gObjIsConnectedGP(aIndex) == 0 )

  01cbc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01cbf	50		 push	 eax
  01cc0	e8 00 00 00 00	 call	 ?gObjIsConnectedGP@@YAHH@Z ; gObjIsConnectedGP
  01cc5	83 c4 04	 add	 esp, 4
  01cc8	85 c0		 test	 eax, eax
  01cca	75 21		 jne	 SHORT $LN6@PCBangShop

; 736  : 	{
; 737  : 		LogAddTD("[ANTI-HACK][PCBangPointShopOpen] Couldn't Open.. (%s)(%s)", lpObj->AccountID, lpObj->Name);

  01ccc	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ccf	83 c0 77	 add	 eax, 119		; 00000077H
  01cd2	50		 push	 eax
  01cd3	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01cd6	83 c1 6c	 add	 ecx, 108		; 0000006cH
  01cd9	51		 push	 ecx
  01cda	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@HCKMKNMO@?$FLANTI?9HACK?$FN?$FLPCBangPointShopOpen?$FN@
  01cdf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01ce5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 738  : 		return;

  01ce8	e9 7a 02 00 00	 jmp	 $LN8@PCBangShop
$LN6@PCBangShop:

; 739  : 	}
; 740  : 
; 741  : 	PMSG_SHOP_INFO pMsg = {0};

  01ced	c6 45 ec 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  01cf1	33 c0		 xor	 eax, eax
  01cf3	89 45 ed	 mov	 DWORD PTR _pMsg$[ebp+1], eax

; 742  : 
; 743  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x06, sizeof(pMsg));

  01cf6	6a 05		 push	 5
  01cf8	6a 06		 push	 6
  01cfa	68 d0 00 00 00	 push	 208			; 000000d0H
  01cff	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01d02	50		 push	 eax
  01d03	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01d08	83 c4 10	 add	 esp, 16			; 00000010H

; 744  : 	pMsg.Result = 0;

  01d0b	c6 45 f0 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 745  : 
; 746  : 	if( this->ShopMapCheck(lpObj->MapNumber, lpObj->X, lpObj->Y) == 0 )

  01d0f	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01d12	0f b7 88 46 01
	00 00		 movzx	 ecx, WORD PTR [eax+326]
  01d19	51		 push	 ecx
  01d1a	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01d1d	0f b7 82 44 01
	00 00		 movzx	 eax, WORD PTR [edx+324]
  01d24	50		 push	 eax
  01d25	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01d28	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  01d2f	52		 push	 edx
  01d30	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01d33	e8 00 00 00 00	 call	 ?ShopMapCheck@CPCBangPointSystem@@QAEHEFF@Z ; CPCBangPointSystem::ShopMapCheck
  01d38	85 c0		 test	 eax, eax
  01d3a	75 1e		 jne	 SHORT $LN5@PCBangShop

; 747  : 	{
; 748  : 		pMsg.Result = 1;

  01d3c	c6 45 f0 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1

; 749  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  01d40	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01d44	50		 push	 eax
  01d45	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01d48	51		 push	 ecx
  01d49	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01d4c	52		 push	 edx
  01d4d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01d52	83 c4 0c	 add	 esp, 12			; 0000000cH

; 750  : 		return;

  01d55	e9 0d 02 00 00	 jmp	 $LN8@PCBangShop
$LN5@PCBangShop:

; 751  : 	}
; 752  : 
; 753  : 	if( ShopC[this->m_btPcBangShopNumber].ItemCount < 1 )

  01d5a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01d5d	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  01d61	69 c9 9c 6f 00
	00		 imul	 ecx, 28572		; 00006f9cH
  01d67	83 b9 7c 00 00
	00 01		 cmp	 DWORD PTR ?ShopC@@3PAVCShop@@A[ecx+124], 1
  01d6e	7d 1e		 jge	 SHORT $LN4@PCBangShop

; 754  : 	{
; 755  : 		pMsg.Result = 2;

  01d70	c6 45 f0 02	 mov	 BYTE PTR _pMsg$[ebp+4], 2

; 756  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  01d74	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01d78	50		 push	 eax
  01d79	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01d7c	51		 push	 ecx
  01d7d	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01d80	52		 push	 edx
  01d81	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01d86	83 c4 0c	 add	 esp, 12			; 0000000cH

; 757  : 		return;

  01d89	e9 d9 01 00 00	 jmp	 $LN8@PCBangShop
$LN4@PCBangShop:

; 758  : 	}
; 759  : 
; 760  : 	if( lpObj->m_IfState.use > 0 && lpObj->m_IfState.type != 18 )

  01d8e	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01d91	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  01d97	83 e1 03	 and	 ecx, 3
  01d9a	76 35		 jbe	 SHORT $LN3@PCBangShop
  01d9c	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01d9f	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  01da5	c1 e9 06	 shr	 ecx, 6
  01da8	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  01dae	83 f9 12	 cmp	 ecx, 18			; 00000012H
  01db1	74 1e		 je	 SHORT $LN3@PCBangShop

; 761  : 	{
; 762  : 		pMsg.Result = 3;

  01db3	c6 45 f0 03	 mov	 BYTE PTR _pMsg$[ebp+4], 3

; 763  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  01db7	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01dbb	50		 push	 eax
  01dbc	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01dbf	51		 push	 ecx
  01dc0	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01dc3	52		 push	 edx
  01dc4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01dc9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 764  : 		return;

  01dcc	e9 96 01 00 00	 jmp	 $LN8@PCBangShop
$LN3@PCBangShop:

; 765  : 	}
; 766  : 
; 767  : 	if( lpObj->m_ReqWarehouseOpen != 0 )

  01dd1	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01dd4	0f b6 88 1c 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4380]
  01ddb	85 c9		 test	 ecx, ecx
  01ddd	74 1e		 je	 SHORT $LN2@PCBangShop

; 768  : 	{
; 769  : 		pMsg.Result = 3;

  01ddf	c6 45 f0 03	 mov	 BYTE PTR _pMsg$[ebp+4], 3

; 770  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  01de3	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01de7	50		 push	 eax
  01de8	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01deb	51		 push	 ecx
  01dec	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01def	52		 push	 edx
  01df0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01df5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 771  : 		return;

  01df8	e9 6a 01 00 00	 jmp	 $LN8@PCBangShop
$LN2@PCBangShop:

; 772  : 	}
; 773  : 
; 774  : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  01dfd	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01e01	50		 push	 eax
  01e02	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01e05	51		 push	 ecx
  01e06	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01e09	52		 push	 edx
  01e0a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01e0f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 775  : 
; 776  : 	if( gObjFixInventoryPointer(aIndex) == 0 )

  01e12	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01e15	50		 push	 eax
  01e16	e8 00 00 00 00	 call	 ?gObjFixInventoryPointer@@YA_NH@Z ; gObjFixInventoryPointer
  01e1b	83 c4 04	 add	 esp, 4
  01e1e	0f b6 c8	 movzx	 ecx, al
  01e21	85 c9		 test	 ecx, ecx
  01e23	75 1c		 jne	 SHORT $LN1@PCBangShop

; 777  : 	{
; 778  : 		LogAdd("[Fix Inv.Ptr] False Location - %s, %d", __FILE__, __LINE__);

  01e25	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??PCBangShopOpen@CPCBangPointSystem@@QAEXH@Z@4JA
  01e2a	83 c0 33	 add	 eax, 51			; 00000033H
  01e2d	50		 push	 eax
  01e2e	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@MJJDDFA@d?3?2projects?2exteam6?43?2source?2gam@
  01e33	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@
  01e38	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01e3e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@PCBangShop:

; 779  : 	}
; 780  : 	
; 781  : 	PMSG_SHOP_ITEM_COUNT pShopItem;
; 782  : 	BYTE SendByte[1024];
; 783  : 
; 784  : 	int lOfs = 0;

  01e41	c7 85 e0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _lOfs$[ebp], 0

; 785  : 	lpObj->TargetShopNumber = this->m_btPcBangShopNumber;

  01e4b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01e4e	66 0f b6 48 10	 movzx	 cx, BYTE PTR [eax+16]
  01e53	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01e56	66 89 8a 5a 04
	00 00		 mov	 WORD PTR [edx+1114], cx

; 786  : 	lpObj->m_IfState.use = 1;

  01e5d	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01e60	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  01e66	83 e1 fc	 and	 ecx, -4			; fffffffcH
  01e69	83 c9 01	 or	 ecx, 1
  01e6c	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01e6f	89 8a 1c 0e 00
	00		 mov	 DWORD PTR [edx+3612], ecx

; 787  : 	lpObj->m_IfState.type = 18;

  01e75	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01e78	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  01e7e	81 e1 3f 00 ff
	ff		 and	 ecx, -65473		; ffff003fH
  01e84	81 c9 80 04 00
	00		 or	 ecx, 1152		; 00000480H
  01e8a	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01e8d	89 8a 1c 0e 00
	00		 mov	 DWORD PTR [edx+3612], ecx

; 788  : 	lpObj->m_ShopTime = 0;

  01e93	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01e96	c6 80 90 03 00
	00 00		 mov	 BYTE PTR [eax+912], 0

; 789  : 	lOfs += sizeof(pShopItem);

  01e9d	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]
  01ea3	83 c0 06	 add	 eax, 6
  01ea6	89 85 e0 fb ff
	ff		 mov	 DWORD PTR _lOfs$[ebp], eax

; 790  : 
; 791  : 	int size = lOfs + ShopC[this->m_btPcBangShopNumber].SendItemDataLen;

  01eac	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01eaf	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  01eb3	69 c9 9c 6f 00
	00		 imul	 ecx, 28572		; 00006f9cH
  01eb9	8b 95 e0 fb ff
	ff		 mov	 edx, DWORD PTR _lOfs$[ebp]
  01ebf	03 91 f8 69 00
	00		 add	 edx, DWORD PTR ?ShopC@@3PAVCShop@@A[ecx+27128]
  01ec5	89 95 dc fb ff
	ff		 mov	 DWORD PTR _size$[ebp], edx

; 792  : 	PHeadSetW((LPBYTE)&pShopItem, 0x31, size);

  01ecb	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR _size$[ebp]
  01ed1	50		 push	 eax
  01ed2	6a 31		 push	 49			; 00000031H
  01ed4	8d 4d e4	 lea	 ecx, DWORD PTR _pShopItem$[ebp]
  01ed7	51		 push	 ecx
  01ed8	e8 00 00 00 00	 call	 ?PHeadSetW@@YAXPAEEH@Z	; PHeadSetW
  01edd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 793  : 	pShopItem.Type = 0;

  01ee0	c6 45 e8 00	 mov	 BYTE PTR _pShopItem$[ebp+4], 0

; 794  : 	pShopItem.count = ShopC[this->m_btPcBangShopNumber].ItemCount;

  01ee4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01ee7	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  01eeb	69 c9 9c 6f 00
	00		 imul	 ecx, 28572		; 00006f9cH
  01ef1	8a 91 7c 00 00
	00		 mov	 dl, BYTE PTR ?ShopC@@3PAVCShop@@A[ecx+124]
  01ef7	88 55 e9	 mov	 BYTE PTR _pShopItem$[ebp+5], dl

; 795  : 
; 796  : 	memcpy(SendByte, &pShopItem, sizeof(pShopItem));

  01efa	6a 06		 push	 6
  01efc	8d 45 e4	 lea	 eax, DWORD PTR _pShopItem$[ebp]
  01eff	50		 push	 eax
  01f00	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _SendByte$[ebp]
  01f06	51		 push	 ecx
  01f07	e8 00 00 00 00	 call	 _memcpy
  01f0c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 797  : 	memcpy(&SendByte[lOfs], ShopC[this->m_btPcBangShopNumber].SendItemData, ShopC[this->m_btPcBangShopNumber].SendItemDataLen);

  01f0f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01f12	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  01f16	69 c9 9c 6f 00
	00		 imul	 ecx, 28572		; 00006f9cH
  01f1c	8b 91 f8 69 00
	00		 mov	 edx, DWORD PTR ?ShopC@@3PAVCShop@@A[ecx+27128]
  01f22	52		 push	 edx
  01f23	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01f26	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  01f2a	69 c9 9c 6f 00
	00		 imul	 ecx, 28572		; 00006f9cH
  01f30	81 c1 e0 63 00
	00		 add	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+25568
  01f36	51		 push	 ecx
  01f37	8b 95 e0 fb ff
	ff		 mov	 edx, DWORD PTR _lOfs$[ebp]
  01f3d	8d 84 15 e4 fb
	ff ff		 lea	 eax, DWORD PTR _SendByte$[ebp+edx]
  01f44	50		 push	 eax
  01f45	e8 00 00 00 00	 call	 _memcpy
  01f4a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 798  : 
; 799  : 	DataSend(aIndex, SendByte, size);

  01f4d	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR _size$[ebp]
  01f53	50		 push	 eax
  01f54	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _SendByte$[ebp]
  01f5a	51		 push	 ecx
  01f5b	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01f5e	52		 push	 edx
  01f5f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01f64	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@PCBangShop:

; 800  : } 

  01f67	5f		 pop	 edi
  01f68	5e		 pop	 esi
  01f69	5b		 pop	 ebx
  01f6a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01f6d	33 cd		 xor	 ecx, ebp
  01f6f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01f74	8b e5		 mov	 esp, ebp
  01f76	5d		 pop	 ebp
  01f77	c2 04 00	 ret	 4
?PCBangShopOpen@CPCBangPointSystem@@QAEXH@Z ENDP	; CPCBangPointSystem::PCBangShopOpen
_TEXT	ENDS
PUBLIC	??_C@_0FN@OPFCOMF@?$FLPCBangPointSystem?$FN?$FLBuyItem?$FN?$FL?$CFs?$FN@ ; `string'
PUBLIC	?__LINE__Var@?1??PCBangBuyItem@CPCBangPointSystem@@QAEHHE@Z@4JA ; `CPCBangPointSystem::PCBangBuyItem'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
PUBLIC	?PCBangBuyItem@CPCBangPointSystem@@QAEHHE@Z	; CPCBangPointSystem::PCBangBuyItem
EXTRN	?gObjInventoryInsertItem@@YAEHVCItem@@@Z:PROC	; gObjInventoryInsertItem
EXTRN	?GetName@CItem@@QAEPADXZ:PROC			; CItem::GetName
EXTRN	?gObjSetItemEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjSetItemEffect
EXTRN	?ItemByteConvert@@YAXPAEVCItem@@@Z:PROC		; ItemByteConvert
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
;	COMDAT ??_C@_0FN@OPFCOMF@?$FLPCBangPointSystem?$FN?$FLBuyItem?$FN?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0FN@OPFCOMF@?$FLPCBangPointSystem?$FN?$FLBuyItem?$FN?$FL?$CFs?$FN@ DB '['
	DB	'PCBangPointSystem][BuyItem][%s][%s](%d/%d/%d) (%d) [%s][%d] L'
	DB	'EV:%d, DUR:%d, OP:[%d][%d][%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??PCBangBuyItem@CPCBangPointSystem@@QAEHHE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??PCBangBuyItem@CPCBangPointSystem@@QAEHHE@Z@4JA DD 0323H ; `CPCBangPointSystem::PCBangBuyItem'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_iEffectIndex$233818 = -60				; size = 4
_n$233804 = -56						; size = 4
_m_PCBangInfo$ = -52					; size = 4
_iPos$ = -48						; size = 4
_iItemType$ = -44					; size = 4
_bItem$ = -40						; size = 4
_iShopNumber$ = -36					; size = 4
_pMsg$ = -32						; size = 18
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_ItemPosition$ = 12					; size = 1
?PCBangBuyItem@CPCBangPointSystem@@QAEHHE@Z PROC	; CPCBangPointSystem::PCBangBuyItem
; _this$ = ecx

; 803  : {

  01f80	55		 push	 ebp
  01f81	8b ec		 mov	 ebp, esp
  01f83	83 ec 7c	 sub	 esp, 124		; 0000007cH
  01f86	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01f8b	33 c5		 xor	 eax, ebp
  01f8d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01f90	53		 push	 ebx
  01f91	56		 push	 esi
  01f92	57		 push	 edi
  01f93	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 804  : 	LPOBJ lpObj = &gObj[aIndex];

  01f96	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01f99	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01f9f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01fa5	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 805  : 	
; 806  : 	PMSG_POINT_BUY_ITEM pMsg;
; 807  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x05, sizeof(pMsg));

  01fa8	6a 12		 push	 18			; 00000012H
  01faa	6a 05		 push	 5
  01fac	68 d0 00 00 00	 push	 208			; 000000d0H
  01fb1	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01fb4	50		 push	 eax
  01fb5	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01fba	83 c4 10	 add	 esp, 16			; 00000010H

; 808  : 	pMsg.Result = 6;

  01fbd	c6 45 e4 06	 mov	 BYTE PTR _pMsg$[ebp+4], 6

; 809  : 	pMsg.ItemPos = -1;

  01fc1	c6 45 e5 ff	 mov	 BYTE PTR _pMsg$[ebp+5], 255 ; 000000ffH

; 810  : 
; 811  : 	if( lpObj->CloseType != -1 )

  01fc5	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01fc8	0f be 48 0b	 movsx	 ecx, BYTE PTR [eax+11]
  01fcc	83 f9 ff	 cmp	 ecx, -1
  01fcf	74 07		 je	 SHORT $LN31@PCBangBuyI

; 812  : 	{
; 813  : 		return 0;

  01fd1	33 c0		 xor	 eax, eax
  01fd3	e9 eb 07 00 00	 jmp	 $LN32@PCBangBuyI
$LN31@PCBangBuyI:

; 814  : 	}
; 815  : 
; 816  : 	if( this->ShopMapCheck(lpObj->MapNumber, lpObj->X, lpObj->Y) == 0 )

  01fd8	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01fdb	0f b7 88 46 01
	00 00		 movzx	 ecx, WORD PTR [eax+326]
  01fe2	51		 push	 ecx
  01fe3	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01fe6	0f b7 82 44 01
	00 00		 movzx	 eax, WORD PTR [edx+324]
  01fed	50		 push	 eax
  01fee	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01ff1	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  01ff8	52		 push	 edx
  01ff9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01ffc	e8 00 00 00 00	 call	 ?ShopMapCheck@CPCBangPointSystem@@QAEHEFF@Z ; CPCBangPointSystem::ShopMapCheck
  02001	85 c0		 test	 eax, eax
  02003	75 20		 jne	 SHORT $LN30@PCBangBuyI

; 817  : 	{
; 818  : 		pMsg.Result = 1;

  02005	c6 45 e4 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1

; 819  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  02009	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0200d	50		 push	 eax
  0200e	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  02011	51		 push	 ecx
  02012	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  02015	52		 push	 edx
  02016	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0201b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 820  : 		return 0;

  0201e	33 c0		 xor	 eax, eax
  02020	e9 9e 07 00 00	 jmp	 $LN32@PCBangBuyI
$LN30@PCBangBuyI:

; 821  : 	}
; 822  : 
; 823  : 	if( gObjFixInventoryPointer(aIndex) == 0 )

  02025	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02028	50		 push	 eax
  02029	e8 00 00 00 00	 call	 ?gObjFixInventoryPointer@@YA_NH@Z ; gObjFixInventoryPointer
  0202e	83 c4 04	 add	 esp, 4
  02031	0f b6 c8	 movzx	 ecx, al
  02034	85 c9		 test	 ecx, ecx
  02036	75 1c		 jne	 SHORT $LN29@PCBangBuyI

; 824  : 	{
; 825  : 		LogAdd("[Fix Inv.Ptr] False Location - %s, %d", __FILE__, __LINE__);

  02038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??PCBangBuyItem@CPCBangPointSystem@@QAEHHE@Z@4JA
  0203d	83 c0 16	 add	 eax, 22			; 00000016H
  02040	50		 push	 eax
  02041	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@MJJDDFA@d?3?2projects?2exteam6?43?2source?2gam@
  02046	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@
  0204b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  02051	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@PCBangBuyI:

; 826  : 	}
; 827  : 
; 828  : 	if( gObj[aIndex].m_ShopTime == 0 )

  02054	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02057	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0205d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02063	0f b6 94 01 90
	03 00 00	 movzx	 edx, BYTE PTR [ecx+eax+912]
  0206b	85 d2		 test	 edx, edx
  0206d	75 17		 jne	 SHORT $LN28@PCBangBuyI

; 829  : 	{
; 830  : 		gObj[aIndex].m_ShopTime = 1;

  0206f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02072	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0207e	c6 84 01 90 03
	00 00 01	 mov	 BYTE PTR [ecx+eax+912], 1
$LN28@PCBangBuyI:

; 831  : 	}
; 832  : 
; 833  : 	if( gObj[aIndex].m_ShopTime > 60 )

  02086	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02089	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0208f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02095	0f b6 94 01 90
	03 00 00	 movzx	 edx, BYTE PTR [ecx+eax+912]
  0209d	83 fa 3c	 cmp	 edx, 60			; 0000003cH
  020a0	7e 7f		 jle	 SHORT $LN27@PCBangBuyI

; 834  : 	{
; 835  : 		if( lpObj->m_IfState.use != 0 && lpObj->m_IfState.type == 18 )

  020a2	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  020a5	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  020ab	83 e1 03	 and	 ecx, 3
  020ae	74 51		 je	 SHORT $LN26@PCBangBuyI
  020b0	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  020b3	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  020b9	c1 e9 06	 shr	 ecx, 6
  020bc	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  020c2	83 f9 12	 cmp	 ecx, 18			; 00000012H
  020c5	75 3a		 jne	 SHORT $LN26@PCBangBuyI

; 836  : 		{
; 837  : 			lpObj->TargetShopNumber = -1;

  020c7	83 c8 ff	 or	 eax, -1
  020ca	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  020cd	66 89 81 5a 04
	00 00		 mov	 WORD PTR [ecx+1114], ax

; 838  : 			lpObj->m_IfState.use = 0;

  020d4	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  020d7	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  020dd	83 e1 fc	 and	 ecx, -4			; fffffffcH
  020e0	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  020e3	89 8a 1c 0e 00
	00		 mov	 DWORD PTR [edx+3612], ecx

; 839  : 			lpObj->m_IfState.type = 0;

  020e9	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  020ec	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  020f2	81 e1 3f 00 ff
	ff		 and	 ecx, -65473		; ffff003fH
  020f8	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  020fb	89 8a 1c 0e 00
	00		 mov	 DWORD PTR [edx+3612], ecx
$LN26@PCBangBuyI:

; 840  : 		}
; 841  : 
; 842  : 		pMsg.Result = 7;

  02101	c6 45 e4 07	 mov	 BYTE PTR _pMsg$[ebp+4], 7

; 843  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  02105	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  02109	50		 push	 eax
  0210a	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0210d	51		 push	 ecx
  0210e	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  02111	52		 push	 edx
  02112	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02117	83 c4 0c	 add	 esp, 12			; 0000000cH

; 844  : 		return 0;

  0211a	33 c0		 xor	 eax, eax
  0211c	e9 a2 06 00 00	 jmp	 $LN32@PCBangBuyI
$LN27@PCBangBuyI:

; 845  : 	}
; 846  : 
; 847  : 	if( lpObj->m_IfState.use > 0 && lpObj->m_IfState.type != 18 )

  02121	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02124	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  0212a	83 e1 03	 and	 ecx, 3
  0212d	76 37		 jbe	 SHORT $LN25@PCBangBuyI
  0212f	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02132	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  02138	c1 e9 06	 shr	 ecx, 6
  0213b	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  02141	83 f9 12	 cmp	 ecx, 18			; 00000012H
  02144	74 20		 je	 SHORT $LN25@PCBangBuyI

; 848  : 	{
; 849  : 		pMsg.Result = 5;

  02146	c6 45 e4 05	 mov	 BYTE PTR _pMsg$[ebp+4], 5

; 850  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0214a	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0214e	50		 push	 eax
  0214f	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  02152	51		 push	 ecx
  02153	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  02156	52		 push	 edx
  02157	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0215c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 851  : 		return 0;

  0215f	33 c0		 xor	 eax, eax
  02161	e9 5d 06 00 00	 jmp	 $LN32@PCBangBuyI
$LN25@PCBangBuyI:

; 852  : 	}
; 853  : 
; 854  : 	int iShopNumber = lpObj->TargetShopNumber;

  02166	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02169	0f bf 88 5a 04
	00 00		 movsx	 ecx, WORD PTR [eax+1114]
  02170	89 4d dc	 mov	 DWORD PTR _iShopNumber$[ebp], ecx

; 855  : 
; 856  : 	if( iShopNumber < 0 || iShopNumber > MAX_SHOP-1 )

  02173	83 7d dc 00	 cmp	 DWORD PTR _iShopNumber$[ebp], 0
  02177	7c 06		 jl	 SHORT $LN23@PCBangBuyI
  02179	83 7d dc 2d	 cmp	 DWORD PTR _iShopNumber$[ebp], 45 ; 0000002dH
  0217d	7e 1c		 jle	 SHORT $LN24@PCBangBuyI
$LN23@PCBangBuyI:

; 857  : 	{
; 858  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0217f	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  02183	50		 push	 eax
  02184	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  02187	51		 push	 ecx
  02188	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0218b	52		 push	 edx
  0218c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02191	83 c4 0c	 add	 esp, 12			; 0000000cH

; 859  : 		return 0;

  02194	33 c0		 xor	 eax, eax
  02196	e9 28 06 00 00	 jmp	 $LN32@PCBangBuyI
$LN24@PCBangBuyI:

; 860  : 	}
; 861  : 
; 862  : 	if( ItemPosition > MAX_ITEM_IN_SHOP-1 )

  0219b	0f b6 45 0c	 movzx	 eax, BYTE PTR _ItemPosition$[ebp]
  0219f	83 f8 77	 cmp	 eax, 119		; 00000077H
  021a2	7e 1c		 jle	 SHORT $LN22@PCBangBuyI

; 863  : 	{
; 864  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  021a4	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  021a8	50		 push	 eax
  021a9	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  021ac	51		 push	 ecx
  021ad	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  021b0	52		 push	 edx
  021b1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  021b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 865  : 		return 0;

  021b9	33 c0		 xor	 eax, eax
  021bb	e9 03 06 00 00	 jmp	 $LN32@PCBangBuyI
$LN22@PCBangBuyI:

; 866  : 	}
; 867  : 	
; 868  : 	if( ShopC[iShopNumber].m_item[ItemPosition].IsItem() == 0 )

  021c0	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  021c3	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  021c9	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  021cd	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  021d3	8d 8c 08 80 00
	00 00		 lea	 ecx, DWORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+128]
  021da	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  021df	85 c0		 test	 eax, eax
  021e1	75 20		 jne	 SHORT $LN21@PCBangBuyI

; 869  : 	{
; 870  : 		pMsg.Result = 2;

  021e3	c6 45 e4 02	 mov	 BYTE PTR _pMsg$[ebp+4], 2

; 871  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  021e7	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  021eb	50		 push	 eax
  021ec	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  021ef	51		 push	 ecx
  021f0	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  021f3	52		 push	 edx
  021f4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  021f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 872  : 		return 0;

  021fc	33 c0		 xor	 eax, eax
  021fe	e9 c0 05 00 00	 jmp	 $LN32@PCBangBuyI
$LN21@PCBangBuyI:

; 873  : 	}
; 874  : 
; 875  : 	BOOL bItem = FALSE;

  02203	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _bItem$[ebp], 0

; 876  : 	int iItemType = ShopC[iShopNumber].m_item[ItemPosition].m_Type;

  0220a	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  0220d	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  02213	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  02217	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0221d	0f bf 94 08 86
	00 00 00	 movsx	 edx, WORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+134]
  02225	89 55 d4	 mov	 DWORD PTR _iItemType$[ebp], edx

; 877  : 	int iPos = 0;

  02228	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _iPos$[ebp], 0

; 878  : 	PCBANG_LOAD_INFO* m_PCBangInfo = this->m_PcBangSystem;

  0222f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02232	83 c0 14	 add	 eax, 20			; 00000014H
  02235	89 45 cc	 mov	 DWORD PTR _m_PCBangInfo$[ebp], eax

; 879  : 
; 880  : 	for( int n = 0; n < MAX_PCBANG_ITEM_COUNT; n++ )

  02238	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _n$233804[ebp], 0
  0223f	eb 09		 jmp	 SHORT $LN20@PCBangBuyI
$LN19@PCBangBuyI:
  02241	8b 45 c8	 mov	 eax, DWORD PTR _n$233804[ebp]
  02244	83 c0 01	 add	 eax, 1
  02247	89 45 c8	 mov	 DWORD PTR _n$233804[ebp], eax
$LN20@PCBangBuyI:
  0224a	83 7d c8 06	 cmp	 DWORD PTR _n$233804[ebp], 6
  0224e	7d 21		 jge	 SHORT $LN18@PCBangBuyI

; 881  : 	{
; 882  : 		if( this->m_PcBangSystem[n].Index == iItemType )

  02250	8b 45 c8	 mov	 eax, DWORD PTR _n$233804[ebp]
  02253	6b c0 18	 imul	 eax, 24			; 00000018H
  02256	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02259	8b 54 01 14	 mov	 edx, DWORD PTR [ecx+eax+20]
  0225d	3b 55 d4	 cmp	 edx, DWORD PTR _iItemType$[ebp]
  02260	75 0d		 jne	 SHORT $LN17@PCBangBuyI

; 883  : 		{
; 884  : 			iPos = n;

  02262	8b 45 c8	 mov	 eax, DWORD PTR _n$233804[ebp]
  02265	89 45 d0	 mov	 DWORD PTR _iPos$[ebp], eax

; 885  : 			bItem = TRUE;

  02268	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _bItem$[ebp], 1
$LN17@PCBangBuyI:

; 886  : 		}
; 887  : 	}

  0226f	eb d0		 jmp	 SHORT $LN19@PCBangBuyI
$LN18@PCBangBuyI:

; 888  : 
; 889  : 	if( bItem == FALSE )

  02271	83 7d d8 00	 cmp	 DWORD PTR _bItem$[ebp], 0
  02275	75 20		 jne	 SHORT $LN16@PCBangBuyI

; 890  : 	{
; 891  : 		pMsg.Result = 8;

  02277	c6 45 e4 08	 mov	 BYTE PTR _pMsg$[ebp+4], 8

; 892  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0227b	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0227f	50		 push	 eax
  02280	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  02283	51		 push	 ecx
  02284	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  02287	52		 push	 edx
  02288	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0228d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 893  : 		return 0;

  02290	33 c0		 xor	 eax, eax
  02292	e9 2c 05 00 00	 jmp	 $LN32@PCBangBuyI
$LN16@PCBangBuyI:

; 894  : 	}
; 895  : 
; 896  : 	if( lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint < this->m_PcBangSystem[iPos].BuyPoint )

  02297	8b 45 d0	 mov	 eax, DWORD PTR _iPos$[ebp]
  0229a	6b c0 18	 imul	 eax, 24			; 00000018H
  0229d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  022a0	0f bf 54 01 18	 movsx	 edx, WORD PTR [ecx+eax+24]
  022a5	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  022a8	39 90 2c 20 00
	00		 cmp	 DWORD PTR [eax+8236], edx
  022ae	7d 20		 jge	 SHORT $LN15@PCBangBuyI

; 897  : 	{
; 898  : 		pMsg.Result = 9;

  022b0	c6 45 e4 09	 mov	 BYTE PTR _pMsg$[ebp+4], 9

; 899  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  022b4	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  022b8	50		 push	 eax
  022b9	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  022bc	51		 push	 ecx
  022bd	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  022c0	52		 push	 edx
  022c1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  022c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 900  : 		return 0;

  022c9	33 c0		 xor	 eax, eax
  022cb	e9 f3 04 00 00	 jmp	 $LN32@PCBangBuyI
$LN15@PCBangBuyI:

; 901  : 	}
; 902  : 
; 903  : 	if( lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint < this->m_PcBangSystem[iPos].Condition ) //wz bug

  022d0	8b 45 d0	 mov	 eax, DWORD PTR _iPos$[ebp]
  022d3	6b c0 18	 imul	 eax, 24			; 00000018H
  022d6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  022d9	0f bf 54 01 1a	 movsx	 edx, WORD PTR [ecx+eax+26]
  022de	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  022e1	39 90 2c 20 00
	00		 cmp	 DWORD PTR [eax+8236], edx
  022e7	7d 20		 jge	 SHORT $LN14@PCBangBuyI

; 904  : 	{
; 905  : 		pMsg.Result = 4;

  022e9	c6 45 e4 04	 mov	 BYTE PTR _pMsg$[ebp+4], 4

; 906  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  022ed	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  022f1	50		 push	 eax
  022f2	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  022f5	51		 push	 ecx
  022f6	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  022f9	52		 push	 edx
  022fa	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  022ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 907  : 		return 0;

  02302	33 c0		 xor	 eax, eax
  02304	e9 ba 04 00 00	 jmp	 $LN32@PCBangBuyI
$LN14@PCBangBuyI:

; 908  : 	}
; 909  : 
; 910  : 	if( this->m_PcBangSystem[iPos].Ability == 1 )

  02309	8b 45 d0	 mov	 eax, DWORD PTR _iPos$[ebp]
  0230c	6b c0 18	 imul	 eax, 24			; 00000018H
  0230f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02312	0f b6 54 01 1c	 movzx	 edx, BYTE PTR [ecx+eax+28]
  02317	83 fa 01	 cmp	 edx, 1
  0231a	0f 85 83 02 00
	00		 jne	 $LN13@PCBangBuyI

; 911  : 	{
; 912  : 		ItemByteConvert((LPBYTE)&pMsg.ItemInfo, ShopC[iShopNumber].m_item[ItemPosition]);

  02320	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  02323	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  02329	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  0232d	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02333	8d b4 08 80 00
	00 00		 lea	 esi, DWORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+128]
  0233a	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  02340	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  02345	8b fc		 mov	 edi, esp
  02347	f3 a5		 rep movsd
  02349	8d 55 e6	 lea	 edx, DWORD PTR _pMsg$[ebp+6]
  0234c	52		 push	 edx
  0234d	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert
  02352	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H

; 913  : 		pMsg.Result = 0;

  02358	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 914  : 		pMsg.ItemPos = -1;

  0235c	c6 45 e5 ff	 mov	 BYTE PTR _pMsg$[ebp+5], 255 ; 000000ffH

; 915  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  02360	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  02364	50		 push	 eax
  02365	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  02368	51		 push	 ecx
  02369	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0236c	52		 push	 edx
  0236d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02372	83 c4 0c	 add	 esp, 12			; 0000000cH

; 916  : 
; 917  : 		int iEffectIndex = 0;

  02375	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _iEffectIndex$233818[ebp], 0

; 918  : 
; 919  : 		if( ShopC[iShopNumber].m_item[ItemPosition].m_Type == ITEMGET(13,43) )

  0237c	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  0237f	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  02385	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  02389	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0238f	0f bf 94 08 86
	00 00 00	 movsx	 edx, WORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+134]
  02397	81 fa 2b 1a 00
	00		 cmp	 edx, 6699		; 00001a2bH
  0239d	75 0c		 jne	 SHORT $LN12@PCBangBuyI

; 920  : 		{
; 921  : 			iEffectIndex = AT_PCBANG_SEAL_OF_ASCENSION;

  0239f	c7 45 c4 1d 00
	00 00		 mov	 DWORD PTR _iEffectIndex$233818[ebp], 29 ; 0000001dH
  023a6	e9 82 00 00 00	 jmp	 $LN6@PCBangBuyI
$LN12@PCBangBuyI:

; 922  : 		}
; 923  : 		else if( ShopC[iShopNumber].m_item[ItemPosition].m_Type == ITEMGET(13,44) )

  023ab	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  023ae	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  023b4	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  023b8	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  023be	0f bf 94 08 86
	00 00 00	 movsx	 edx, WORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+134]
  023c6	81 fa 2c 1a 00
	00		 cmp	 edx, 6700		; 00001a2cH
  023cc	75 09		 jne	 SHORT $LN10@PCBangBuyI

; 924  : 		{
; 925  : 			iEffectIndex = AT_PCBANG_SEAL_OF_WEALTH;

  023ce	c7 45 c4 1e 00
	00 00		 mov	 DWORD PTR _iEffectIndex$233818[ebp], 30 ; 0000001eH
  023d5	eb 56		 jmp	 SHORT $LN6@PCBangBuyI
$LN10@PCBangBuyI:

; 926  : 		}
; 927  : 		else if( ShopC[iShopNumber].m_item[ItemPosition].m_Type == ITEMGET(13,45) )

  023d7	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  023da	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  023e0	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  023e4	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  023ea	0f bf 94 08 86
	00 00 00	 movsx	 edx, WORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+134]
  023f2	81 fa 2d 1a 00
	00		 cmp	 edx, 6701		; 00001a2dH
  023f8	75 09		 jne	 SHORT $LN8@PCBangBuyI

; 928  : 		{
; 929  : 			iEffectIndex = AT_PCBANG_SEAL_OF_SUSTENANCE;

  023fa	c7 45 c4 1f 00
	00 00		 mov	 DWORD PTR _iEffectIndex$233818[ebp], 31 ; 0000001fH
  02401	eb 2a		 jmp	 SHORT $LN6@PCBangBuyI
$LN8@PCBangBuyI:

; 930  : 		}
; 931  : 		else if( ShopC[iShopNumber].m_item[ItemPosition].m_Type == ITEMGET(13,96) )

  02403	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  02406	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  0240c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  02410	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02416	0f bf 94 08 86
	00 00 00	 movsx	 edx, WORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+134]
  0241e	81 fa 60 1a 00
	00		 cmp	 edx, 6752		; 00001a60H
  02424	75 07		 jne	 SHORT $LN6@PCBangBuyI

; 932  : 		{
; 933  : 			iEffectIndex = AT_PCBANG_SEAL_OF_BALANCE;

  02426	c7 45 c4 68 00
	00 00		 mov	 DWORD PTR _iEffectIndex$233818[ebp], 104 ; 00000068H
$LN6@PCBangBuyI:

; 934  : 		}
; 935  : 
; 936  : 		gObjSetItemEffect(lpObj, iEffectIndex);

  0242d	8b 45 c4	 mov	 eax, DWORD PTR _iEffectIndex$233818[ebp]
  02430	50		 push	 eax
  02431	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02434	51		 push	 ecx
  02435	e8 00 00 00 00	 call	 ?gObjSetItemEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSetItemEffect
  0243a	83 c4 08	 add	 esp, 8

; 937  : 
; 938  : 		lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint -= this->m_PcBangSystem[iPos].BuyPoint;

  0243d	8b 45 d0	 mov	 eax, DWORD PTR _iPos$[ebp]
  02440	6b c0 18	 imul	 eax, 24			; 00000018H
  02443	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02446	0f bf 54 01 18	 movsx	 edx, WORD PTR [ecx+eax+24]
  0244b	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0244e	8b 88 2c 20 00
	00		 mov	 ecx, DWORD PTR [eax+8236]
  02454	2b ca		 sub	 ecx, edx
  02456	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02459	89 8a 2c 20 00
	00		 mov	 DWORD PTR [edx+8236], ecx

; 939  : 
; 940  : 		if( lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint < 0 )

  0245f	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02462	83 b8 2c 20 00
	00 00		 cmp	 DWORD PTR [eax+8236], 0
  02469	7d 0d		 jge	 SHORT $LN5@PCBangBuyI

; 941  : 		{
; 942  : 			lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint = 0;

  0246b	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0246e	c7 80 2c 20 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8236], 0
$LN5@PCBangBuyI:

; 943  : 		}
; 944  : 
; 945  : 		this->EGReqUpdatePcBangResetPointInfo(aIndex); //Update Reset Time Date In Database

  02478	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0247b	50		 push	 eax
  0247c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0247f	e8 00 00 00 00	 call	 ?EGReqUpdatePcBangResetPointInfo@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::EGReqUpdatePcBangResetPointInfo

; 946  : 
; 947  : 		this->EGReqUpdatePcBangPointInfo(aIndex, this->m_PcBangSystem[iPos].BuyPoint); //Decrease Point in Database if Rank activated

  02484	8b 45 d0	 mov	 eax, DWORD PTR _iPos$[ebp]
  02487	6b c0 18	 imul	 eax, 24			; 00000018H
  0248a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0248d	0f b7 54 01 18	 movzx	 edx, WORD PTR [ecx+eax+24]
  02492	52		 push	 edx
  02493	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02496	50		 push	 eax
  02497	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0249a	e8 00 00 00 00	 call	 ?EGReqUpdatePcBangPointInfo@CPCBangPointSystem@@QAEXHF@Z ; CPCBangPointSystem::EGReqUpdatePcBangPointInfo

; 948  : 
; 949  : 		LogAddTD("[PCBangPointSystem][BuyItem][%s][%s](%d/%d/%d) (%d) [%s][%d] LEV:%d, DUR:%d, OP:[%d][%d][%d]", 
; 950  : 			lpObj->AccountID, lpObj->Name, this->m_PcBangSystem[iPos].BuyPoint, lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint, 
; 951  : 			g_sPCBangMaxPoint, iShopNumber, ShopC[iShopNumber].m_item[ItemPosition].GetName(), this->m_PcBangSystem[iPos].KeepTime, 
; 952  : 			ShopC[iShopNumber].m_item[ItemPosition].m_Level, 
; 953  : 			(int)(ShopC[iShopNumber].m_item[ItemPosition].m_Durability), 
; 954  : 			ShopC[iShopNumber].m_item[ItemPosition].m_Option1, 
; 955  : 			ShopC[iShopNumber].m_item[ItemPosition].m_Option2, 
; 956  : 			ShopC[iShopNumber].m_item[ItemPosition].m_Option3);

  0249f	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  024a2	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  024a8	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  024ac	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  024b2	0f b6 94 08 16
	01 00 00	 movzx	 edx, BYTE PTR ?ShopC@@3PAVCShop@@A[eax+ecx+278]
  024ba	52		 push	 edx
  024bb	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  024be	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  024c4	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  024c8	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  024ce	0f b6 94 08 15
	01 00 00	 movzx	 edx, BYTE PTR ?ShopC@@3PAVCShop@@A[eax+ecx+277]
  024d6	52		 push	 edx
  024d7	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  024da	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  024e0	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  024e4	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  024ea	0f b6 94 08 14
	01 00 00	 movzx	 edx, BYTE PTR ?ShopC@@3PAVCShop@@A[eax+ecx+276]
  024f2	52		 push	 edx
  024f3	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  024f6	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  024fc	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  02500	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02506	d9 84 08 a4 00
	00 00		 fld	 DWORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+164]
  0250d	e8 00 00 00 00	 call	 __ftol2_sse
  02512	50		 push	 eax
  02513	8b 55 dc	 mov	 edx, DWORD PTR _iShopNumber$[ebp]
  02516	69 d2 9c 6f 00
	00		 imul	 edx, 28572		; 00006f9cH
  0251c	0f b6 45 0c	 movzx	 eax, BYTE PTR _ItemPosition$[ebp]
  02520	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02526	0f bf 8c 02 88
	00 00 00	 movsx	 ecx, WORD PTR ?ShopC@@3PAVCShop@@A[edx+eax+136]
  0252e	51		 push	 ecx
  0252f	8b 55 d0	 mov	 edx, DWORD PTR _iPos$[ebp]
  02532	6b d2 18	 imul	 edx, 24			; 00000018H
  02535	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02538	8b 4c 10 20	 mov	 ecx, DWORD PTR [eax+edx+32]
  0253c	51		 push	 ecx
  0253d	8b 55 dc	 mov	 edx, DWORD PTR _iShopNumber$[ebp]
  02540	69 d2 9c 6f 00
	00		 imul	 edx, 28572		; 00006f9cH
  02546	0f b6 45 0c	 movzx	 eax, BYTE PTR _ItemPosition$[ebp]
  0254a	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02550	8d 8c 02 80 00
	00 00		 lea	 ecx, DWORD PTR ?ShopC@@3PAVCShop@@A[edx+eax+128]
  02557	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  0255c	50		 push	 eax
  0255d	8b 4d dc	 mov	 ecx, DWORD PTR _iShopNumber$[ebp]
  02560	51		 push	 ecx
  02561	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR ?g_sPCBangMaxPoint@@3FA ; g_sPCBangMaxPoint
  02568	52		 push	 edx
  02569	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0256c	8b 88 2c 20 00
	00		 mov	 ecx, DWORD PTR [eax+8236]
  02572	51		 push	 ecx
  02573	8b 55 d0	 mov	 edx, DWORD PTR _iPos$[ebp]
  02576	6b d2 18	 imul	 edx, 24			; 00000018H
  02579	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0257c	0f bf 4c 10 18	 movsx	 ecx, WORD PTR [eax+edx+24]
  02581	51		 push	 ecx
  02582	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02585	83 c2 77	 add	 edx, 119		; 00000077H
  02588	52		 push	 edx
  02589	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0258c	83 c0 6c	 add	 eax, 108		; 0000006cH
  0258f	50		 push	 eax
  02590	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@OPFCOMF@?$FLPCBangPointSystem?$FN?$FLBuyItem?$FN?$FL?$CFs?$FN@
  02595	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0259b	83 c4 38	 add	 esp, 56			; 00000038H

; 957  : 	}
; 958  : 	else

  0259e	e9 1b 02 00 00	 jmp	 $LN1@PCBangBuyI
$LN13@PCBangBuyI:

; 959  : 	{
; 960  : 		pMsg.ItemPos = gObjInventoryInsertItem(aIndex, ShopC[iShopNumber].m_item[ItemPosition]);

  025a3	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  025a6	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  025ac	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  025b0	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  025b6	8d b4 08 80 00
	00 00		 lea	 esi, DWORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+128]
  025bd	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  025c3	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  025c8	8b fc		 mov	 edi, esp
  025ca	f3 a5		 rep movsd
  025cc	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  025cf	52		 push	 edx
  025d0	e8 00 00 00 00	 call	 ?gObjInventoryInsertItem@@YAEHVCItem@@@Z ; gObjInventoryInsertItem
  025d5	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  025db	88 45 e5	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 961  : 
; 962  : 		if( pMsg.ItemPos != 0xFF )

  025de	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+5]
  025e2	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  025e7	0f 84 b4 01 00
	00		 je	 $LN3@PCBangBuyI

; 963  : 		{
; 964  : 			ItemByteConvert((LPBYTE)&pMsg.ItemInfo, ShopC[iShopNumber].m_item[ItemPosition]);

  025ed	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  025f0	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  025f6	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  025fa	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02600	8d b4 08 80 00
	00 00		 lea	 esi, DWORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+128]
  02607	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  0260d	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  02612	8b fc		 mov	 edi, esp
  02614	f3 a5		 rep movsd
  02616	8d 55 e6	 lea	 edx, DWORD PTR _pMsg$[ebp+6]
  02619	52		 push	 edx
  0261a	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert
  0261f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H

; 965  : 			pMsg.Result = 0;

  02625	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 966  : 			DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  02629	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0262d	50		 push	 eax
  0262e	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  02631	51		 push	 ecx
  02632	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  02635	52		 push	 edx
  02636	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0263b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 967  : 
; 968  : 			lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint -= this->m_PcBangSystem[iPos].BuyPoint;

  0263e	8b 45 d0	 mov	 eax, DWORD PTR _iPos$[ebp]
  02641	6b c0 18	 imul	 eax, 24			; 00000018H
  02644	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02647	0f bf 54 01 18	 movsx	 edx, WORD PTR [ecx+eax+24]
  0264c	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0264f	8b 88 2c 20 00
	00		 mov	 ecx, DWORD PTR [eax+8236]
  02655	2b ca		 sub	 ecx, edx
  02657	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0265a	89 8a 2c 20 00
	00		 mov	 DWORD PTR [edx+8236], ecx

; 969  : 
; 970  : 			LogAddTD("[PCBangPointSystem][BuyItem][%s][%s](%d/%d/%d) (%d) [%s][%d] LEV:%d, DUR:%d, OP:[%d][%d][%d]", 
; 971  : 				lpObj->AccountID, lpObj->Name, this->m_PcBangSystem[iPos].BuyPoint, 
; 972  : 				lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint, g_sPCBangMaxPoint, iShopNumber, 
; 973  : 				ShopC[iShopNumber].m_item[ItemPosition].GetName(), 
; 974  : 				this->m_PcBangSystem[iPos].KeepTime, 
; 975  : 				ShopC[iShopNumber].m_item[ItemPosition].m_Level, 
; 976  : 				(int)ShopC[iShopNumber].m_item[ItemPosition].m_Durability, 
; 977  : 				ShopC[iShopNumber].m_item[ItemPosition].m_Option1, 
; 978  : 				ShopC[iShopNumber].m_item[ItemPosition].m_Option2, 
; 979  : 				ShopC[iShopNumber].m_item[ItemPosition].m_Option3);

  02660	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  02663	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  02669	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  0266d	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02673	0f b6 94 08 16
	01 00 00	 movzx	 edx, BYTE PTR ?ShopC@@3PAVCShop@@A[eax+ecx+278]
  0267b	52		 push	 edx
  0267c	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  0267f	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  02685	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  02689	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0268f	0f b6 94 08 15
	01 00 00	 movzx	 edx, BYTE PTR ?ShopC@@3PAVCShop@@A[eax+ecx+277]
  02697	52		 push	 edx
  02698	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  0269b	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  026a1	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  026a5	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  026ab	0f b6 94 08 14
	01 00 00	 movzx	 edx, BYTE PTR ?ShopC@@3PAVCShop@@A[eax+ecx+276]
  026b3	52		 push	 edx
  026b4	8b 45 dc	 mov	 eax, DWORD PTR _iShopNumber$[ebp]
  026b7	69 c0 9c 6f 00
	00		 imul	 eax, 28572		; 00006f9cH
  026bd	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _ItemPosition$[ebp]
  026c1	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  026c7	d9 84 08 a4 00
	00 00		 fld	 DWORD PTR ?ShopC@@3PAVCShop@@A[eax+ecx+164]
  026ce	e8 00 00 00 00	 call	 __ftol2_sse
  026d3	50		 push	 eax
  026d4	8b 55 dc	 mov	 edx, DWORD PTR _iShopNumber$[ebp]
  026d7	69 d2 9c 6f 00
	00		 imul	 edx, 28572		; 00006f9cH
  026dd	0f b6 45 0c	 movzx	 eax, BYTE PTR _ItemPosition$[ebp]
  026e1	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  026e7	0f bf 8c 02 88
	00 00 00	 movsx	 ecx, WORD PTR ?ShopC@@3PAVCShop@@A[edx+eax+136]
  026ef	51		 push	 ecx
  026f0	8b 55 d0	 mov	 edx, DWORD PTR _iPos$[ebp]
  026f3	6b d2 18	 imul	 edx, 24			; 00000018H
  026f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026f9	8b 4c 10 20	 mov	 ecx, DWORD PTR [eax+edx+32]
  026fd	51		 push	 ecx
  026fe	8b 55 dc	 mov	 edx, DWORD PTR _iShopNumber$[ebp]
  02701	69 d2 9c 6f 00
	00		 imul	 edx, 28572		; 00006f9cH
  02707	0f b6 45 0c	 movzx	 eax, BYTE PTR _ItemPosition$[ebp]
  0270b	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02711	8d 8c 02 80 00
	00 00		 lea	 ecx, DWORD PTR ?ShopC@@3PAVCShop@@A[edx+eax+128]
  02718	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  0271d	50		 push	 eax
  0271e	8b 4d dc	 mov	 ecx, DWORD PTR _iShopNumber$[ebp]
  02721	51		 push	 ecx
  02722	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR ?g_sPCBangMaxPoint@@3FA ; g_sPCBangMaxPoint
  02729	52		 push	 edx
  0272a	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0272d	8b 88 2c 20 00
	00		 mov	 ecx, DWORD PTR [eax+8236]
  02733	51		 push	 ecx
  02734	8b 55 d0	 mov	 edx, DWORD PTR _iPos$[ebp]
  02737	6b d2 18	 imul	 edx, 24			; 00000018H
  0273a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0273d	0f bf 4c 10 18	 movsx	 ecx, WORD PTR [eax+edx+24]
  02742	51		 push	 ecx
  02743	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02746	83 c2 77	 add	 edx, 119		; 00000077H
  02749	52		 push	 edx
  0274a	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0274d	83 c0 6c	 add	 eax, 108		; 0000006cH
  02750	50		 push	 eax
  02751	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@OPFCOMF@?$FLPCBangPointSystem?$FN?$FLBuyItem?$FN?$FL?$CFs?$FN@
  02756	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0275c	83 c4 38	 add	 esp, 56			; 00000038H

; 980  : 			
; 981  : 			if( lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint < 0 )

  0275f	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02762	83 b8 2c 20 00
	00 00		 cmp	 DWORD PTR [eax+8236], 0
  02769	7d 0d		 jge	 SHORT $LN2@PCBangBuyI

; 982  : 			{
; 983  : 				lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint = 0;

  0276b	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0276e	c7 80 2c 20 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8236], 0
$LN2@PCBangBuyI:

; 984  : 			}
; 985  : 
; 986  : 			this->EGReqUpdatePcBangResetPointInfo(aIndex); //Update Reset Time Date In Database

  02778	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0277b	50		 push	 eax
  0277c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0277f	e8 00 00 00 00	 call	 ?EGReqUpdatePcBangResetPointInfo@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::EGReqUpdatePcBangResetPointInfo

; 987  : 
; 988  : 			this->EGReqUpdatePcBangPointInfo(aIndex, this->m_PcBangSystem[iPos].BuyPoint); //Decrease Point in Database if Rank activated

  02784	8b 45 d0	 mov	 eax, DWORD PTR _iPos$[ebp]
  02787	6b c0 18	 imul	 eax, 24			; 00000018H
  0278a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0278d	0f b7 54 01 18	 movzx	 edx, WORD PTR [ecx+eax+24]
  02792	52		 push	 edx
  02793	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02796	50		 push	 eax
  02797	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0279a	e8 00 00 00 00	 call	 ?EGReqUpdatePcBangPointInfo@CPCBangPointSystem@@QAEXHF@Z ; CPCBangPointSystem::EGReqUpdatePcBangPointInfo

; 989  : 		}
; 990  : 		else

  0279f	eb 1d		 jmp	 SHORT $LN1@PCBangBuyI
$LN3@PCBangBuyI:

; 991  : 		{
; 992  : 			pMsg.Result = 3;

  027a1	c6 45 e4 03	 mov	 BYTE PTR _pMsg$[ebp+4], 3

; 993  : 			DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  027a5	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  027a9	50		 push	 eax
  027aa	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  027ad	51		 push	 ecx
  027ae	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  027b1	52		 push	 edx
  027b2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  027b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 994  : 			return 0;

  027ba	33 c0		 xor	 eax, eax
  027bc	eb 05		 jmp	 SHORT $LN32@PCBangBuyI
$LN1@PCBangBuyI:

; 995  : 		}
; 996  : 	}
; 997  : 
; 998  : 	return 1;

  027be	b8 01 00 00 00	 mov	 eax, 1
$LN32@PCBangBuyI:

; 999  : }

  027c3	5f		 pop	 edi
  027c4	5e		 pop	 esi
  027c5	5b		 pop	 ebx
  027c6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  027c9	33 cd		 xor	 ecx, ebp
  027cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  027d0	8b e5		 mov	 esp, ebp
  027d2	5d		 pop	 ebp
  027d3	c2 08 00	 ret	 8
?PCBangBuyItem@CPCBangPointSystem@@QAEHHE@Z ENDP	; CPCBangPointSystem::PCBangBuyItem
_TEXT	ENDS
PUBLIC	?SetUserTimer@CPCBangPointTimer@@SAXPAV1@H@Z	; CPCBangPointTimer::SetUserTimer
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iHour$ = -20						; size = 4
_iDay$ = -16						; size = 4
_iMonth$ = -12						; size = 4
_iYear$ = -8						; size = 4
_aIndex$ = -4						; size = 2
_pthis$ = 8						; size = 4
_index$ = 12						; size = 4
?SetUserTimer@CPCBangPointTimer@@SAXPAV1@H@Z PROC	; CPCBangPointTimer::SetUserTimer

; 1002 : {

  027e0	55		 push	 ebp
  027e1	8b ec		 mov	 ebp, esp
  027e3	83 ec 54	 sub	 esp, 84			; 00000054H
  027e6	53		 push	 ebx
  027e7	56		 push	 esi
  027e8	57		 push	 edi

; 1003 : 	short aIndex = index;

  027e9	66 8b 45 0c	 mov	 ax, WORD PTR _index$[ebp]
  027ed	66 89 45 fc	 mov	 WORD PTR _aIndex$[ebp], ax

; 1004 : 
; 1005 : 	return;

  027f1	e9 98 00 00 00	 jmp	 $LN1@SetUserTim

; 1006 : 	pthis->m_iUserIndex = aIndex;

  027f6	0f bf 45 fc	 movsx	 eax, WORD PTR _aIndex$[ebp]
  027fa	8b 4d 08	 mov	 ecx, DWORD PTR _pthis$[ebp]
  027fd	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 1007 : 	pthis->SetCheckTimer(TRUE);

  02800	6a 01		 push	 1
  02802	8b 4d 08	 mov	 ecx, DWORD PTR _pthis$[ebp]
  02805	e8 00 00 00 00	 call	 ?SetCheckTimer@CPCBangPointTimer@@QAEXH@Z ; CPCBangPointTimer::SetCheckTimer

; 1008 : 
; 1009 : 	int iYear = gObj[aIndex].m_PcBangPointSystem.m_sPcBangResetYear;

  0280a	0f bf 45 fc	 movsx	 eax, WORD PTR _aIndex$[ebp]
  0280e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02814	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0281a	0f bf 94 01 38
	20 00 00	 movsx	 edx, WORD PTR [ecx+eax+8248]
  02822	89 55 f8	 mov	 DWORD PTR _iYear$[ebp], edx

; 1010 : 	int iMonth = gObj[aIndex].m_PcBangPointSystem.m_sPcBangResetMonth;

  02825	0f bf 45 fc	 movsx	 eax, WORD PTR _aIndex$[ebp]
  02829	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0282f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02835	0f bf 94 01 3a
	20 00 00	 movsx	 edx, WORD PTR [ecx+eax+8250]
  0283d	89 55 f4	 mov	 DWORD PTR _iMonth$[ebp], edx

; 1011 : 	int iDay = gObj[aIndex].m_PcBangPointSystem.m_sPcBangResetDay;

  02840	0f bf 45 fc	 movsx	 eax, WORD PTR _aIndex$[ebp]
  02844	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0284a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02850	0f bf 94 01 3c
	20 00 00	 movsx	 edx, WORD PTR [ecx+eax+8252]
  02858	89 55 f0	 mov	 DWORD PTR _iDay$[ebp], edx

; 1012 : 	int iHour = gObj[aIndex].m_PcBangPointSystem.m_sPcBangResetHour;

  0285b	0f bf 45 fc	 movsx	 eax, WORD PTR _aIndex$[ebp]
  0285f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02865	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0286b	0f bf 94 01 3e
	20 00 00	 movsx	 edx, WORD PTR [ecx+eax+8254]
  02873	89 55 ec	 mov	 DWORD PTR _iHour$[ebp], edx

; 1013 : 
; 1014 : 	pthis->ChangeTimeDate(&iYear, &iMonth, &iDay, &iHour);

  02876	8d 45 ec	 lea	 eax, DWORD PTR _iHour$[ebp]
  02879	50		 push	 eax
  0287a	8d 4d f0	 lea	 ecx, DWORD PTR _iDay$[ebp]
  0287d	51		 push	 ecx
  0287e	8d 55 f4	 lea	 edx, DWORD PTR _iMonth$[ebp]
  02881	52		 push	 edx
  02882	8d 45 f8	 lea	 eax, DWORD PTR _iYear$[ebp]
  02885	50		 push	 eax
  02886	8b 4d 08	 mov	 ecx, DWORD PTR _pthis$[ebp]
  02889	e8 00 00 00 00	 call	 ?ChangeTimeDate@CPCBangPointTimer@@QAEXPAH000@Z ; CPCBangPointTimer::ChangeTimeDate
$LN1@SetUserTim:

; 1015 : }

  0288e	5f		 pop	 edi
  0288f	5e		 pop	 esi
  02890	5b		 pop	 ebx
  02891	8b e5		 mov	 esp, ebp
  02893	5d		 pop	 ebp
  02894	c3		 ret	 0
?SetUserTimer@CPCBangPointTimer@@SAXPAV1@H@Z ENDP	; CPCBangPointTimer::SetUserTimer
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -28						; size = 18
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?EGUserConnectPcBang@CPCBangPointSystem@@QAEXH@Z PROC	; CPCBangPointSystem::EGUserConnectPcBang
; _this$ = ecx

; 1018 : {

  028a0	55		 push	 ebp
  028a1	8b ec		 mov	 ebp, esp
  028a3	83 ec 5c	 sub	 esp, 92			; 0000005cH
  028a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  028ab	33 c5		 xor	 eax, ebp
  028ad	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  028b0	53		 push	 ebx
  028b1	56		 push	 esi
  028b2	57		 push	 edi
  028b3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1019 : 	PMSG_REQ_REG_PC_POINT pMsg = {0};

  028b6	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  028ba	33 c0		 xor	 eax, eax
  028bc	89 45 e5	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  028bf	89 45 e9	 mov	 DWORD PTR _pMsg$[ebp+5], eax
  028c2	89 45 ed	 mov	 DWORD PTR _pMsg$[ebp+9], eax
  028c5	89 45 f1	 mov	 DWORD PTR _pMsg$[ebp+13], eax
  028c8	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+17], al

; 1020 : 
; 1021 : 	PHeadSetB((LPBYTE)&pMsg, 0x29, sizeof(pMsg));

  028cb	6a 12		 push	 18			; 00000012H
  028cd	6a 29		 push	 41			; 00000029H
  028cf	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  028d2	50		 push	 eax
  028d3	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  028d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1022 : 
; 1023 : 	pMsg.aIndex = aIndex;

  028db	66 8b 45 08	 mov	 ax, WORD PTR _aIndex$[ebp]
  028df	66 89 45 e8	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 1024 : 
; 1025 : 	memcpy(pMsg.AccountID, gObj[aIndex].AccountID, MAX_ACCOUNT_LEN);

  028e3	6a 0a		 push	 10			; 0000000aH
  028e5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  028e8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  028ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  028f4	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  028f8	52		 push	 edx
  028f9	8d 45 eb	 lea	 eax, DWORD PTR _pMsg$[ebp+7]
  028fc	50		 push	 eax
  028fd	e8 00 00 00 00	 call	 _memcpy
  02902	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1026 : 
; 1027 : 	pMsg.btResult = 0;

  02905	c6 45 ea 00	 mov	 BYTE PTR _pMsg$[ebp+6], 0

; 1028 : 
; 1029 : 	pMsg.AccountID[10] = '\0';

  02909	c6 45 f5 00	 mov	 BYTE PTR _pMsg$[ebp+17], 0

; 1030 : 
; 1031 : 	DataSendEventChip((char*)&pMsg, sizeof(pMsg));

  0290d	6a 12		 push	 18			; 00000012H
  0290f	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02912	50		 push	 eax
  02913	e8 00 00 00 00	 call	 ?DataSendEventChip@@YAXPADH@Z ; DataSendEventChip
  02918	83 c4 08	 add	 esp, 8

; 1032 : 
; 1033 : 	LogAdd("[PCBangPointSystem][User Connect] [%s] - %s", 
; 1034 : 		gObj[aIndex].AccountID, gObj[aIndex].Ip_addr);

  0291b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0291e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02924	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0292a	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  0292e	52		 push	 edx
  0292f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02932	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02938	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0293e	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  02942	52		 push	 edx
  02943	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BGBOIGIB@?$FLPCBangPointSystem?$FN?$FLUser?5Connect@
  02948	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0294e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1035 : }

  02951	5f		 pop	 edi
  02952	5e		 pop	 esi
  02953	5b		 pop	 ebx
  02954	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02957	33 cd		 xor	 ecx, ebp
  02959	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0295e	8b e5		 mov	 esp, ebp
  02960	5d		 pop	 ebp
  02961	c2 04 00	 ret	 4
?EGUserConnectPcBang@CPCBangPointSystem@@QAEXH@Z ENDP	; CPCBangPointSystem::EGUserConnectPcBang
_TEXT	ENDS
PUBLIC	?EGAnsUpdatePcBangResetPointInfo@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z ; CPCBangPointSystem::EGAnsUpdatePcBangResetPointInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv69 = -84						; size = 4
_lpObj$ = -16						; size = 4
_aIndex$ = -12						; size = 4
_m_PCInfo$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?EGAnsUpdatePcBangResetPointInfo@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z PROC ; CPCBangPointSystem::EGAnsUpdatePcBangResetPointInfo
; _this$ = ecx

; 1038 : {

  02970	55		 push	 ebp
  02971	8b ec		 mov	 ebp, esp
  02973	83 ec 54	 sub	 esp, 84			; 00000054H
  02976	53		 push	 ebx
  02977	56		 push	 esi
  02978	57		 push	 edi
  02979	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1039 : 	PMSG_ANS_REG_PC_POINT* m_PCInfo = aRecv;

  0297c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0297f	89 45 f8	 mov	 DWORD PTR _m_PCInfo$[ebp], eax

; 1040 : 	int aIndex = m_PCInfo->aIndex;

  02982	8b 45 f8	 mov	 eax, DWORD PTR _m_PCInfo$[ebp]
  02985	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  02989	89 4d f4	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 1041 : 
; 1042 : 	if( OBJMAX_RANGE(aIndex) == 0 )

  0298c	83 7d f4 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  02990	7d 09		 jge	 SHORT $LN5@EGAnsUpdat
  02992	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  02999	eb 0f		 jmp	 SHORT $LN6@EGAnsUpdat
$LN5@EGAnsUpdat:
  0299b	33 c0		 xor	 eax, eax
  0299d	81 7d f4 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  029a4	0f 9e c0	 setle	 al
  029a7	89 45 ac	 mov	 DWORD PTR tv69[ebp], eax
$LN6@EGAnsUpdat:
  029aa	83 7d ac 00	 cmp	 DWORD PTR tv69[ebp], 0
  029ae	75 05		 jne	 SHORT $LN2@EGAnsUpdat

; 1043 : 	{
; 1044 : 		return;

  029b0	e9 04 01 00 00	 jmp	 $LN3@EGAnsUpdat
$LN2@EGAnsUpdat:

; 1045 : 	}
; 1046 : 
; 1047 : 	LPOBJ lpObj = &gObj[aIndex];

  029b5	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$[ebp]
  029b8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  029be	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  029c4	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1048 : 
; 1049 : 	lpObj->m_PcBangPointSystem.m_bPcBangPointEnable = TRUE;

  029c7	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029ca	c7 80 20 20 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+8224], 1

; 1050 : 
; 1051 : 	lpObj->m_PcBangPointSystem.m_iPcBangAccumulatedPoint = m_PCInfo->sPoint;

  029d4	8b 45 f8	 mov	 eax, DWORD PTR _m_PCInfo$[ebp]
  029d7	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  029db	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  029de	89 8a 2c 20 00
	00		 mov	 DWORD PTR [edx+8236], ecx

; 1052 : 	lpObj->m_PcBangPointSystem.m_dwPcBangPointTick = GetTickCount();

  029e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  029ea	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  029ed	89 81 34 20 00
	00		 mov	 DWORD PTR [ecx+8244], eax

; 1053 : 
; 1054 : 	lpObj->m_PcBangPointSystem.m_sPcBangResetYear = m_PCInfo->sPcBangResetYear;

  029f3	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029f6	8b 4d f8	 mov	 ecx, DWORD PTR _m_PCInfo$[ebp]
  029f9	66 8b 51 14	 mov	 dx, WORD PTR [ecx+20]
  029fd	66 89 90 38 20
	00 00		 mov	 WORD PTR [eax+8248], dx

; 1055 : 	lpObj->m_PcBangPointSystem.m_sPcBangResetMonth = m_PCInfo->sPcBangResetMonth;

  02a04	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a07	8b 4d f8	 mov	 ecx, DWORD PTR _m_PCInfo$[ebp]
  02a0a	66 8b 51 16	 mov	 dx, WORD PTR [ecx+22]
  02a0e	66 89 90 3a 20
	00 00		 mov	 WORD PTR [eax+8250], dx

; 1056 : 	lpObj->m_PcBangPointSystem.m_sPcBangResetDay = m_PCInfo->sPcBangResetDay;

  02a15	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a18	8b 4d f8	 mov	 ecx, DWORD PTR _m_PCInfo$[ebp]
  02a1b	66 8b 51 18	 mov	 dx, WORD PTR [ecx+24]
  02a1f	66 89 90 3c 20
	00 00		 mov	 WORD PTR [eax+8252], dx

; 1057 : 	lpObj->m_PcBangPointSystem.m_sPcBangResetHour = m_PCInfo->sPcBangResetHour;

  02a26	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a29	8b 4d f8	 mov	 ecx, DWORD PTR _m_PCInfo$[ebp]
  02a2c	66 8b 51 1a	 mov	 dx, WORD PTR [ecx+26]
  02a30	66 89 90 3e 20
	00 00		 mov	 WORD PTR [eax+8254], dx

; 1058 : 
; 1059 : 	lpObj->m_PCBangPointTimer.SetResetTimeData(lpObj->m_PcBangPointSystem.m_sPcBangResetYear, lpObj->m_PcBangPointSystem.m_sPcBangResetMonth, lpObj->m_PcBangPointSystem.m_sPcBangResetDay, lpObj->m_PcBangPointSystem.m_sPcBangResetHour, g_sPCBangResetDayOfWeek, g_sPCBangResetHour, CPCBangPointTimer::SetUserTimer, aIndex);

  02a37	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02a3a	50		 push	 eax
  02a3b	68 00 00 00 00	 push	 OFFSET ?SetUserTimer@CPCBangPointTimer@@SAXPAV1@H@Z ; CPCBangPointTimer::SetUserTimer
  02a40	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?g_sPCBangResetHour@@3FA ; g_sPCBangResetHour
  02a47	51		 push	 ecx
  02a48	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR ?g_sPCBangResetDayOfWeek@@3FA ; g_sPCBangResetDayOfWeek
  02a4f	52		 push	 edx
  02a50	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a53	0f bf 88 3e 20
	00 00		 movsx	 ecx, WORD PTR [eax+8254]
  02a5a	51		 push	 ecx
  02a5b	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02a5e	0f bf 82 3c 20
	00 00		 movsx	 eax, WORD PTR [edx+8252]
  02a65	50		 push	 eax
  02a66	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a69	0f bf 91 3a 20
	00 00		 movsx	 edx, WORD PTR [ecx+8250]
  02a70	52		 push	 edx
  02a71	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a74	0f bf 88 38 20
	00 00		 movsx	 ecx, WORD PTR [eax+8248]
  02a7b	51		 push	 ecx
  02a7c	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a7f	81 c1 40 20 00
	00		 add	 ecx, 8256		; 00002040H
  02a85	e8 00 00 00 00	 call	 ?SetResetTimeData@CPCBangPointTimer@@QAEXHHHHHHP6AXPAV1@H@ZH@Z ; CPCBangPointTimer::SetResetTimeData

; 1060 : 
; 1061 : 	lpObj->m_PCBangPointTimer.SetCheckTimer(FALSE);

  02a8a	6a 00		 push	 0
  02a8c	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a8f	81 c1 40 20 00
	00		 add	 ecx, 8256		; 00002040H
  02a95	e8 00 00 00 00	 call	 ?SetCheckTimer@CPCBangPointTimer@@QAEXH@Z ; CPCBangPointTimer::SetCheckTimer

; 1062 : 
; 1063 : 	if(lpObj->m_PCBangPointTimer.CheckTime() != 2)

  02a9a	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a9d	81 c1 40 20 00
	00		 add	 ecx, 8256		; 00002040H
  02aa3	e8 00 00 00 00	 call	 ?CheckTime@CPCBangPointTimer@@QAEHXZ ; CPCBangPointTimer::CheckTime
  02aa8	83 f8 02	 cmp	 eax, 2
  02aab	74 0c		 je	 SHORT $LN3@EGAnsUpdat

; 1064 : 	{
; 1065 : 		this->GCSendPcBangUserPoint(aIndex);

  02aad	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02ab0	50		 push	 eax
  02ab1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ab4	e8 00 00 00 00	 call	 ?GCSendPcBangUserPoint@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::GCSendPcBangUserPoint
$LN3@EGAnsUpdat:

; 1066 : 	}
; 1067 : }

  02ab9	5f		 pop	 edi
  02aba	5e		 pop	 esi
  02abb	5b		 pop	 ebx
  02abc	8b e5		 mov	 esp, ebp
  02abe	5d		 pop	 ebp
  02abf	c2 04 00	 ret	 4
?EGAnsUpdatePcBangResetPointInfo@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z ENDP ; CPCBangPointSystem::EGAnsUpdatePcBangResetPointInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -36						; size = 28
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?EGReqUpdatePcBangResetPointInfo@CPCBangPointSystem@@QAEXH@Z PROC ; CPCBangPointSystem::EGReqUpdatePcBangResetPointInfo
; _this$ = ecx

; 1070 : {

  02ad0	55		 push	 ebp
  02ad1	8b ec		 mov	 ebp, esp
  02ad3	83 ec 64	 sub	 esp, 100		; 00000064H
  02ad6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  02adb	33 c5		 xor	 eax, ebp
  02add	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02ae0	53		 push	 ebx
  02ae1	56		 push	 esi
  02ae2	57		 push	 edi
  02ae3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1071 : 	PMSG_ANS_REG_PC_POINT pMsg = {0};

  02ae6	c6 45 dc 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  02aea	33 c0		 xor	 eax, eax
  02aec	89 45 dd	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  02aef	89 45 e1	 mov	 DWORD PTR _pMsg$[ebp+5], eax
  02af2	89 45 e5	 mov	 DWORD PTR _pMsg$[ebp+9], eax
  02af5	89 45 e9	 mov	 DWORD PTR _pMsg$[ebp+13], eax
  02af8	89 45 ed	 mov	 DWORD PTR _pMsg$[ebp+17], eax
  02afb	89 45 f1	 mov	 DWORD PTR _pMsg$[ebp+21], eax
  02afe	66 89 45 f5	 mov	 WORD PTR _pMsg$[ebp+25], ax
  02b02	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+27], al

; 1072 : 
; 1073 : 	PHeadSetB((LPBYTE)&pMsg, 0x30, sizeof(pMsg));

  02b05	6a 1c		 push	 28			; 0000001cH
  02b07	6a 30		 push	 48			; 00000030H
  02b09	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02b0c	50		 push	 eax
  02b0d	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  02b12	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1074 : 
; 1075 : 	pMsg.aIndex = aIndex;

  02b15	66 8b 45 08	 mov	 ax, WORD PTR _aIndex$[ebp]
  02b19	66 89 45 e0	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 1076 : 
; 1077 : 	memcpy(pMsg.AccountID, gObj[aIndex].AccountID, MAX_ACCOUNT_LEN);

  02b1d	6a 0a		 push	 10			; 0000000aH
  02b1f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b22	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b28	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b2e	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  02b32	52		 push	 edx
  02b33	8d 45 e2	 lea	 eax, DWORD PTR _pMsg$[ebp+6]
  02b36	50		 push	 eax
  02b37	e8 00 00 00 00	 call	 _memcpy
  02b3c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1078 : 
; 1079 : 	pMsg.AccountID[10] = '\0';

  02b3f	c6 45 ec 00	 mov	 BYTE PTR _pMsg$[ebp+16], 0

; 1080 : 
; 1081 : 	pMsg.btShopItemBuy = 0;

  02b43	c6 45 ed 00	 mov	 BYTE PTR _pMsg$[ebp+17], 0

; 1082 : 
; 1083 : 	pMsg.sPoint = gObj[aIndex].m_PcBangPointSystem.m_iPcBangAccumulatedPoint;

  02b47	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b4a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b50	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b56	66 8b 94 01 2c
	20 00 00	 mov	 dx, WORD PTR [ecx+eax+8236]
  02b5e	66 89 55 ee	 mov	 WORD PTR _pMsg$[ebp+18], dx

; 1084 : 
; 1085 : 	pMsg.sPcBangResetYear = gObj[aIndex].m_PcBangPointSystem.m_sPcBangResetYear;

  02b62	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b65	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b6b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b71	66 8b 94 01 38
	20 00 00	 mov	 dx, WORD PTR [ecx+eax+8248]
  02b79	66 89 55 f0	 mov	 WORD PTR _pMsg$[ebp+20], dx

; 1086 : 	pMsg.sPcBangResetMonth = gObj[aIndex].m_PcBangPointSystem.m_sPcBangResetMonth;

  02b7d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b80	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b86	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b8c	66 8b 94 01 3a
	20 00 00	 mov	 dx, WORD PTR [ecx+eax+8250]
  02b94	66 89 55 f2	 mov	 WORD PTR _pMsg$[ebp+22], dx

; 1087 : 	pMsg.sPcBangResetDay = gObj[aIndex].m_PcBangPointSystem.m_sPcBangResetDay;

  02b98	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b9b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02ba1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02ba7	66 8b 94 01 3c
	20 00 00	 mov	 dx, WORD PTR [ecx+eax+8252]
  02baf	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+24], dx

; 1088 : 	pMsg.sPcBangResetHour = gObj[aIndex].m_PcBangPointSystem.m_sPcBangResetHour;

  02bb3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02bb6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02bbc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02bc2	66 8b 94 01 3e
	20 00 00	 mov	 dx, WORD PTR [ecx+eax+8254]
  02bca	66 89 55 f6	 mov	 WORD PTR _pMsg$[ebp+26], dx

; 1089 : 
; 1090 : 	DataSendEventChip((char*)&pMsg, sizeof(pMsg));

  02bce	6a 1c		 push	 28			; 0000001cH
  02bd0	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02bd3	50		 push	 eax
  02bd4	e8 00 00 00 00	 call	 ?DataSendEventChip@@YAXPADH@Z ; DataSendEventChip
  02bd9	83 c4 08	 add	 esp, 8

; 1091 : }

  02bdc	5f		 pop	 edi
  02bdd	5e		 pop	 esi
  02bde	5b		 pop	 ebx
  02bdf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02be2	33 cd		 xor	 ecx, ebp
  02be4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02be9	8b e5		 mov	 esp, ebp
  02beb	5d		 pop	 ebp
  02bec	c2 04 00	 ret	 4
?EGReqUpdatePcBangResetPointInfo@CPCBangPointSystem@@QAEXH@Z ENDP ; CPCBangPointSystem::EGReqUpdatePcBangResetPointInfo
_TEXT	ENDS
PUBLIC	?EGAnsUserPcBangUpdatePoint@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z ; CPCBangPointSystem::EGAnsUserPcBangUpdatePoint
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv69 = -80						; size = 4
_aIndex$ = -12						; size = 4
_m_PCInfo$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?EGAnsUserPcBangUpdatePoint@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z PROC ; CPCBangPointSystem::EGAnsUserPcBangUpdatePoint
; _this$ = ecx

; 1094 : {

  02bf0	55		 push	 ebp
  02bf1	8b ec		 mov	 ebp, esp
  02bf3	83 ec 50	 sub	 esp, 80			; 00000050H
  02bf6	53		 push	 ebx
  02bf7	56		 push	 esi
  02bf8	57		 push	 edi
  02bf9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1095 : 	PMSG_ANS_REG_PC_POINT* m_PCInfo = aRecv;

  02bfc	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  02bff	89 45 f8	 mov	 DWORD PTR _m_PCInfo$[ebp], eax

; 1096 : 	int aIndex = m_PCInfo->aIndex;

  02c02	8b 45 f8	 mov	 eax, DWORD PTR _m_PCInfo$[ebp]
  02c05	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  02c09	89 4d f4	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 1097 : 
; 1098 : 	if( OBJMAX_RANGE(aIndex) == 0 )

  02c0c	83 7d f4 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  02c10	7d 09		 jge	 SHORT $LN5@EGAnsUserP
  02c12	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  02c19	eb 0f		 jmp	 SHORT $LN6@EGAnsUserP
$LN5@EGAnsUserP:
  02c1b	33 c0		 xor	 eax, eax
  02c1d	81 7d f4 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  02c24	0f 9e c0	 setle	 al
  02c27	89 45 b0	 mov	 DWORD PTR tv69[ebp], eax
$LN6@EGAnsUserP:
  02c2a	83 7d b0 00	 cmp	 DWORD PTR tv69[ebp], 0
  02c2e	75 02		 jne	 SHORT $LN2@EGAnsUserP

; 1099 : 	{
; 1100 : 		return;

  02c30	eb 18		 jmp	 SHORT $LN3@EGAnsUserP
$LN2@EGAnsUserP:

; 1101 : 	}
; 1102 : 
; 1103 : 	if(m_PCInfo->btShopItemBuy == 1)

  02c32	8b 45 f8	 mov	 eax, DWORD PTR _m_PCInfo$[ebp]
  02c35	0f b6 48 11	 movzx	 ecx, BYTE PTR [eax+17]
  02c39	83 f9 01	 cmp	 ecx, 1
  02c3c	75 0c		 jne	 SHORT $LN3@EGAnsUserP

; 1104 : 	{
; 1105 : 		this->GCSendPcBangUserPoint(aIndex);

  02c3e	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02c41	50		 push	 eax
  02c42	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c45	e8 00 00 00 00	 call	 ?GCSendPcBangUserPoint@CPCBangPointSystem@@QAEXH@Z ; CPCBangPointSystem::GCSendPcBangUserPoint
$LN3@EGAnsUserP:

; 1106 : 	}
; 1107 : }

  02c4a	5f		 pop	 edi
  02c4b	5e		 pop	 esi
  02c4c	5b		 pop	 ebx
  02c4d	8b e5		 mov	 esp, ebp
  02c4f	5d		 pop	 ebp
  02c50	c2 04 00	 ret	 4
?EGAnsUserPcBangUpdatePoint@CPCBangPointSystem@@QAEXPAUPMSG_ANS_REG_PC_POINT@@@Z ENDP ; CPCBangPointSystem::EGAnsUserPcBangUpdatePoint
_TEXT	ENDS
PUBLIC	?AddExperience@CPCBangPointSystem@@QAEHPAUOBJECTSTRUCT@@AA_J@Z ; CPCBangPointSystem::AddExperience
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iCAL_EXP$ = -12					; size = 8
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_Experience$ = 12					; size = 4
?AddExperience@CPCBangPointSystem@@QAEHPAUOBJECTSTRUCT@@AA_J@Z PROC ; CPCBangPointSystem::AddExperience
; _this$ = ecx

; 1110 : {

  02c60	55		 push	 ebp
  02c61	8b ec		 mov	 ebp, esp
  02c63	83 ec 4c	 sub	 esp, 76			; 0000004cH
  02c66	53		 push	 ebx
  02c67	56		 push	 esi
  02c68	57		 push	 edi
  02c69	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1111 : 	if(lpObj->m_iPcBangConnectionType == 0)

  02c6c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02c6f	83 b8 1c 20 00
	00 00		 cmp	 DWORD PTR [eax+8220], 0
  02c76	75 04		 jne	 SHORT $LN1@AddExperie

; 1112 : 	{
; 1113 : 		return FALSE;

  02c78	33 c0		 xor	 eax, eax
  02c7a	eb 2a		 jmp	 SHORT $LN2@AddExperie
$LN1@AddExperie:

; 1114 : 	}
; 1115 : 
; 1116 : 	__int64 iCAL_EXP = int(Experience * g_fPCBangAddExperience);

  02c7c	8b 45 0c	 mov	 eax, DWORD PTR _Experience$[ebp]
  02c7f	df 28		 fild	 QWORD PTR [eax]
  02c81	d8 0d 00 00 00
	00		 fmul	 DWORD PTR ?g_fPCBangAddExperience@@3MA ; g_fPCBangAddExperience
  02c87	e8 00 00 00 00	 call	 __ftol2_sse
  02c8c	99		 cdq
  02c8d	89 45 f4	 mov	 DWORD PTR _iCAL_EXP$[ebp], eax
  02c90	89 55 f8	 mov	 DWORD PTR _iCAL_EXP$[ebp+4], edx

; 1117 : 
; 1118 : 	Experience = iCAL_EXP;

  02c93	8b 45 0c	 mov	 eax, DWORD PTR _Experience$[ebp]
  02c96	8b 4d f4	 mov	 ecx, DWORD PTR _iCAL_EXP$[ebp]
  02c99	89 08		 mov	 DWORD PTR [eax], ecx
  02c9b	8b 55 f8	 mov	 edx, DWORD PTR _iCAL_EXP$[ebp+4]
  02c9e	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1119 : 
; 1120 : 	return TRUE;

  02ca1	b8 01 00 00 00	 mov	 eax, 1
$LN2@AddExperie:

; 1121 : }

  02ca6	5f		 pop	 edi
  02ca7	5e		 pop	 esi
  02ca8	5b		 pop	 ebx
  02ca9	8b e5		 mov	 esp, ebp
  02cab	5d		 pop	 ebp
  02cac	c2 08 00	 ret	 8
?AddExperience@CPCBangPointSystem@@QAEHPAUOBJECTSTRUCT@@AA_J@Z ENDP ; CPCBangPointSystem::AddExperience
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_PCBangPointSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_PCBangPointSystem@@YAXXZ PROC			; `dynamic initializer for 'g_PCBangPointSystem'', COMDAT

; 249  : CPCBangPointSystem g_PCBangPointSystem;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PCBangPointSystem@@3VCPCBangPointSystem@@A ; g_PCBangPointSystem
  0000e	e8 00 00 00 00	 call	 ??0CPCBangPointSystem@@QAE@XZ ; CPCBangPointSystem::CPCBangPointSystem
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_PCBangPointSystem@@YAXXZ ; `dynamic atexit destructor for 'g_PCBangPointSystem''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_PCBangPointSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_PCBangPointSystem''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_PCBangPointSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_PCBangPointSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_PCBangPointSystem'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PCBangPointSystem@@3VCPCBangPointSystem@@A ; g_PCBangPointSystem
  0000e	e8 00 00 00 00	 call	 ??1CPCBangPointSystem@@UAE@XZ ; CPCBangPointSystem::~CPCBangPointSystem
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_PCBangPointSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_PCBangPointSystem''
text$yd	ENDS
PUBLIC	?g_PCBangPointSystem@@3VCPCBangPointSystem@@A	; g_PCBangPointSystem
_BSS	SEGMENT
?g_PCBangPointSystem@@3VCPCBangPointSystem@@A DB 0a4H DUP (?) ; g_PCBangPointSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_PCBangPointSystem$initializer$ DD FLAT:??__Eg_PCBangPointSystem@@YAXXZ
CRT$XCU	ENDS
END
