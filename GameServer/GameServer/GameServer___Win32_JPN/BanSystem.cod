; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\BanSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
PUBLIC	?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::clear
PUBLIC	??0?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
PUBLIC	??0CBanSystem@@QAE@XZ				; CBanSystem::CBanSystem
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$??0CBanSystem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBanSystem@@QAE@XZ$0
__ehfuncinfo$??0CBanSystem@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBanSystem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\bansystem.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBanSystem@@QAE@XZ PROC				; CBanSystem::CBanSystem
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CBanSystem@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 04	 add	 ecx, 4
  00031	e8 00 00 00 00	 call	 ??0?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 17   : 	this->m_HddData.clear();

  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 04	 add	 ecx, 4
  00043	e8 00 00 00 00	 call	 ?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::clear

; 18   : }

  00048	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CBanSystem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
__ehhandler$??0CBanSystem@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CBanSystem@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CBanSystem@@QAE@XZ ENDP				; CBanSystem::CBanSystem
PUBLIC	??1CBanSystem@@QAE@XZ				; CBanSystem::~CBanSystem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBanSystem@@QAE@XZ PROC				; CBanSystem::~CBanSystem
; _this$ = ecx

; 21   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 44	 sub	 esp, 68			; 00000044H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 04	 add	 ecx, 4
  00082	e8 00 00 00 00	 call	 ??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??1CBanSystem@@QAE@XZ ENDP				; CBanSystem::~CBanSystem
_TEXT	ENDS
PUBLIC	?Read@CBanSystem@@QAEXPAD@Z			; CBanSystem::Read
PUBLIC	??_C@_0BG@CCIAPBKO@ExData?2BanChatHdd?4dat?$AA@	; `string'
PUBLIC	?Load@CBanSystem@@QAEXXZ			; CBanSystem::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT ??_C@_0BG@CCIAPBKO@ExData?2BanChatHdd?4dat?$AA@
CONST	SEGMENT
??_C@_0BG@CCIAPBKO@ExData?2BanChatHdd?4dat?$AA@ DB 'ExData\BanChatHdd.dat'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CBanSystem@@QAEXXZ PROC				; CBanSystem::Load
; _this$ = ecx

; 25   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 44	 sub	 esp, 68			; 00000044H
  00096	53		 push	 ebx
  00097	56		 push	 esi
  00098	57		 push	 edi
  00099	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	this->Enable = 0;

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 27   : 
; 28   : 	this->m_HddData.clear();

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	83 c1 04	 add	 ecx, 4
  000a8	e8 00 00 00 00	 call	 ?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::clear

; 29   : 
; 30   : 	if(g_ExLicense.CheckUser(eExUB::Gredy) || 
; 31   : 	   g_ExLicense.CheckUser(eExUB::GredyLocal) || 
; 32   : 	   g_ExLicense.CheckUser(eExUB::Gredy2) || 
; 33   : 	   g_ExLicense.CheckUser(eExUB::Escalate))

  000ad	6a 20		 push	 32			; 00000020H
  000af	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000b4	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	75 39		 jne	 SHORT $LN1@Load
  000c0	6a 21		 push	 33			; 00000021H
  000c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000c7	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	85 c0		 test	 eax, eax
  000d1	75 26		 jne	 SHORT $LN1@Load
  000d3	6a 22		 push	 34			; 00000022H
  000d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000da	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000df	0f b6 c0	 movzx	 eax, al
  000e2	85 c0		 test	 eax, eax
  000e4	75 13		 jne	 SHORT $LN1@Load
  000e6	6a 40		 push	 64			; 00000040H
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000ed	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000f2	0f b6 c0	 movzx	 eax, al
  000f5	85 c0		 test	 eax, eax
  000f7	74 18		 je	 SHORT $LN3@Load
$LN1@Load:

; 34   : 	{
; 35   : 		this->Read(gDirPath.GetNewPath("ExData\\BanChatHdd.dat"));

  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CCIAPBKO@ExData?2BanChatHdd?4dat?$AA@
  000fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00103	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00108	50		 push	 eax
  00109	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	e8 00 00 00 00	 call	 ?Read@CBanSystem@@QAEXPAD@Z ; CBanSystem::Read
$LN3@Load:

; 36   : 	}
; 37   : }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
?Load@CBanSystem@@QAEXXZ ENDP				; CBanSystem::Load
_TEXT	ENDS
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Read@CBanSystem@@QAEXPAD@Z PROC			; CBanSystem::Read
; _this$ = ecx

; 40   : {

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp
  00123	83 ec 44	 sub	 esp, 68			; 00000044H
  00126	53		 push	 ebx
  00127	56		 push	 esi
  00128	57		 push	 edi
  00129	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	this->Enable = GetPrivateProfileInt("ExTeam", "Enable", 1, filename);

  0012c	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0012f	50		 push	 eax
  00130	6a 01		 push	 1
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00142	85 c0		 test	 eax, eax
  00144	0f 95 c1	 setne	 cl
  00147	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014a	88 0a		 mov	 BYTE PTR [edx], cl

; 42   : }

  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 04 00	 ret	 4
?Read@CBanSystem@@QAEXPAD@Z ENDP			; CBanSystem::Read
_TEXT	ENDS
PUBLIC	??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[]
PUBLIC	?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
PUBLIC	?Chat@CBanSystem@@QAE_NH@Z			; CBanSystem::Chat
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_ritem$227761 = -12					; size = 4
_i$227757 = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?Chat@CBanSystem@@QAE_NH@Z PROC				; CBanSystem::Chat
; _this$ = ecx

; 45   : {

  00160	55		 push	 ebp
  00161	8b ec		 mov	 ebp, esp
  00163	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00166	53		 push	 ebx
  00167	56		 push	 esi
  00168	57		 push	 edi
  00169	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   : 	if(!this->Enable)

  0016c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00172	85 c9		 test	 ecx, ecx
  00174	75 04		 jne	 SHORT $LN5@Chat

; 47   : 	{
; 48   : 		return true;

  00176	b0 01		 mov	 al, 1
  00178	eb 6c		 jmp	 SHORT $LN6@Chat
$LN5@Chat:

; 49   : 	}	
; 50   : 
; 51   : 	for(int i = 0; i < this->m_HddData.size(); i++)

  0017a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227757[ebp], 0
  00181	eb 09		 jmp	 SHORT $LN4@Chat
$LN3@Chat:
  00183	8b 45 f8	 mov	 eax, DWORD PTR _i$227757[ebp]
  00186	83 c0 01	 add	 eax, 1
  00189	89 45 f8	 mov	 DWORD PTR _i$227757[ebp], eax
$LN4@Chat:
  0018c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018f	83 c1 04	 add	 ecx, 4
  00192	e8 00 00 00 00	 call	 ?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
  00197	39 45 f8	 cmp	 DWORD PTR _i$227757[ebp], eax
  0019a	73 48		 jae	 SHORT $LN2@Chat

; 52   : 	{
; 53   : 		BANHDD_DATA & ritem = this->m_HddData[i];

  0019c	8b 45 f8	 mov	 eax, DWORD PTR _i$227757[ebp]
  0019f	50		 push	 eax
  001a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	83 c1 04	 add	 ecx, 4
  001a6	e8 00 00 00 00	 call	 ??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[]
  001ab	89 45 f4	 mov	 DWORD PTR _ritem$227761[ebp], eax

; 54   : 
; 55   : 		if(ritem.Hdd == gObj[aIndex].hdd_id && ritem.Time > 0 && ritem.Type == 1)

  001ae	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001b1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  001b7	8b 4d f4	 mov	 ecx, DWORD PTR _ritem$227761[ebp]
  001ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c0	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  001c3	3b 8c 02 8c 28
	00 00		 cmp	 ecx, DWORD PTR [edx+eax+10380]
  001ca	75 16		 jne	 SHORT $LN1@Chat
  001cc	8b 45 f4	 mov	 eax, DWORD PTR _ritem$227761[ebp]
  001cf	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001d3	76 0d		 jbe	 SHORT $LN1@Chat
  001d5	8b 45 f4	 mov	 eax, DWORD PTR _ritem$227761[ebp]
  001d8	83 78 14 01	 cmp	 DWORD PTR [eax+20], 1
  001dc	75 04		 jne	 SHORT $LN1@Chat

; 56   : 		{
; 57   : 			return false;

  001de	32 c0		 xor	 al, al
  001e0	eb 04		 jmp	 SHORT $LN6@Chat
$LN1@Chat:

; 58   : 		}
; 59   : 	}

  001e2	eb 9f		 jmp	 SHORT $LN3@Chat
$LN2@Chat:

; 60   : 
; 61   : 	return true;

  001e4	b0 01		 mov	 al, 1
$LN6@Chat:

; 62   : }

  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	5b		 pop	 ebx
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c2 04 00	 ret	 4
?Chat@CBanSystem@@QAE_NH@Z ENDP				; CBanSystem::Chat
_TEXT	ENDS
PUBLIC	?Player@CBanSystem@@QAE_NH@Z			; CBanSystem::Player
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_ritem$227772 = -12					; size = 4
_i$227768 = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?Player@CBanSystem@@QAE_NH@Z PROC			; CBanSystem::Player
; _this$ = ecx

; 65   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  001f6	53		 push	 ebx
  001f7	56		 push	 esi
  001f8	57		 push	 edi
  001f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   : 	if(!this->Enable)

  001fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ff	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00202	85 c9		 test	 ecx, ecx
  00204	75 04		 jne	 SHORT $LN5@Player

; 67   : 	{
; 68   : 		return true;

  00206	b0 01		 mov	 al, 1
  00208	eb 6c		 jmp	 SHORT $LN6@Player
$LN5@Player:

; 69   : 	}	
; 70   : 
; 71   : 	for(int i = 0; i < this->m_HddData.size(); i++)

  0020a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227768[ebp], 0
  00211	eb 09		 jmp	 SHORT $LN4@Player
$LN3@Player:
  00213	8b 45 f8	 mov	 eax, DWORD PTR _i$227768[ebp]
  00216	83 c0 01	 add	 eax, 1
  00219	89 45 f8	 mov	 DWORD PTR _i$227768[ebp], eax
$LN4@Player:
  0021c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021f	83 c1 04	 add	 ecx, 4
  00222	e8 00 00 00 00	 call	 ?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
  00227	39 45 f8	 cmp	 DWORD PTR _i$227768[ebp], eax
  0022a	73 48		 jae	 SHORT $LN2@Player

; 72   : 	{
; 73   : 		BANHDD_DATA & ritem = this->m_HddData[i];

  0022c	8b 45 f8	 mov	 eax, DWORD PTR _i$227768[ebp]
  0022f	50		 push	 eax
  00230	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00233	83 c1 04	 add	 ecx, 4
  00236	e8 00 00 00 00	 call	 ??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[]
  0023b	89 45 f4	 mov	 DWORD PTR _ritem$227772[ebp], eax

; 74   : 
; 75   : 		if(ritem.Hdd == gObj[aIndex].hdd_id && ritem.Time > 0 && ritem.Type == 0)

  0023e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00241	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00247	8b 4d f4	 mov	 ecx, DWORD PTR _ritem$227772[ebp]
  0024a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00250	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00253	3b 8c 02 8c 28
	00 00		 cmp	 ecx, DWORD PTR [edx+eax+10380]
  0025a	75 16		 jne	 SHORT $LN1@Player
  0025c	8b 45 f4	 mov	 eax, DWORD PTR _ritem$227772[ebp]
  0025f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00263	76 0d		 jbe	 SHORT $LN1@Player
  00265	8b 45 f4	 mov	 eax, DWORD PTR _ritem$227772[ebp]
  00268	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0026c	75 04		 jne	 SHORT $LN1@Player

; 76   : 		{
; 77   : 			return false;

  0026e	32 c0		 xor	 al, al
  00270	eb 04		 jmp	 SHORT $LN6@Player
$LN1@Player:

; 78   : 		}
; 79   : 	}

  00272	eb 9f		 jmp	 SHORT $LN3@Player
$LN2@Player:

; 80   : 
; 81   : 	return true;

  00274	b0 01		 mov	 al, 1
$LN6@Player:

; 82   : }

  00276	5f		 pop	 edi
  00277	5e		 pop	 esi
  00278	5b		 pop	 ebx
  00279	8b e5		 mov	 esp, ebp
  0027b	5d		 pop	 ebp
  0027c	c2 04 00	 ret	 4
?Player@CBanSystem@@QAE_NH@Z ENDP			; CBanSystem::Player
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
PUBLIC	?DSReqSelect@CBanSystem@@QAEXXZ			; CBanSystem::DSReqSelect
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -12						; size = 5
_this$ = -4						; size = 4
?DSReqSelect@CBanSystem@@QAEXXZ PROC			; CBanSystem::DSReqSelect
; _this$ = ecx

; 85   : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00286	53		 push	 ebx
  00287	56		 push	 esi
  00288	57		 push	 edi
  00289	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 86   : 	if(!this->Enable)

  0028c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00292	85 c9		 test	 ecx, ecx
  00294	75 02		 jne	 SHORT $LN1@DSReqSelec

; 87   : 	{
; 88   : 		return;

  00296	eb 37		 jmp	 SHORT $LN2@DSReqSelec
$LN1@DSReqSelec:

; 89   : 	}
; 90   : 
; 91   : 	this->m_HddData.clear();

  00298	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029b	83 c1 04	 add	 ecx, 4
  0029e	e8 00 00 00 00	 call	 ?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::clear

; 92   : 
; 93   : 	PMSG_REQ_BANSYSTEM pMsg;
; 94   : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x20, sizeof(pMsg));

  002a3	6a 05		 push	 5
  002a5	6a 20		 push	 32			; 00000020H
  002a7	68 eb 00 00 00	 push	 235			; 000000ebH
  002ac	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002af	50		 push	 eax
  002b0	8d 4d f4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  002b3	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 95   : 	pMsg.Result = 1;

  002b8	c6 45 f8 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1

; 96   : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  002bc	0f b6 45 f5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002c0	50		 push	 eax
  002c1	8d 4d f4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  002c4	51		 push	 ecx
  002c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  002ca	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@DSReqSelec:

; 97   : }

  002cf	5f		 pop	 edi
  002d0	5e		 pop	 esi
  002d1	5b		 pop	 ebx
  002d2	8b e5		 mov	 esp, ebp
  002d4	5d		 pop	 ebp
  002d5	c3		 ret	 0
?DSReqSelect@CBanSystem@@QAEXXZ ENDP			; CBanSystem::DSReqSelect
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 106  : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 107  : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 108  : 		lpBuf[3] = sub;

  00024	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00027	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0002a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back
PUBLIC	__$ArrayPad$
PUBLIC	?DSAnsSelect@CBanSystem@@QAEXPAUPMSG_SELECT_BANSYSTEM@@@Z ; CBanSystem::DSAnsSelect
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\bansystem.cpp
_TEXT	SEGMENT
_list$ = -32						; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DSAnsSelect@CBanSystem@@QAEXPAUPMSG_SELECT_BANSYSTEM@@@Z PROC ; CBanSystem::DSAnsSelect
; _this$ = ecx

; 100  : {

  002e0	55		 push	 ebp
  002e1	8b ec		 mov	 ebp, esp
  002e3	83 ec 60	 sub	 esp, 96			; 00000060H
  002e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  002eb	33 c5		 xor	 eax, ebp
  002ed	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  002f0	53		 push	 ebx
  002f1	56		 push	 esi
  002f2	57		 push	 edi
  002f3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 101  : 	BANHDD_DATA list;
; 102  : 	memcpy(list.Name, lpMsg->Name, sizeof(list.Name));

  002f6	6a 0b		 push	 11			; 0000000bH
  002f8	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  002fb	83 c0 04	 add	 eax, 4
  002fe	50		 push	 eax
  002ff	8d 4d e0	 lea	 ecx, DWORD PTR _list$[ebp]
  00302	51		 push	 ecx
  00303	e8 00 00 00 00	 call	 _memcpy
  00308	83 c4 0c	 add	 esp, 12			; 0000000cH

; 103  : 	list.Hdd = lpMsg->Hdd;

  0030b	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  0030e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00311	89 4d ec	 mov	 DWORD PTR _list$[ebp+12], ecx

; 104  : 	list.Time = lpMsg->Time;

  00314	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00317	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0031a	89 4d f0	 mov	 DWORD PTR _list$[ebp+16], ecx

; 105  : 	list.Type = lpMsg->Type;

  0031d	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00320	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00323	89 4d f4	 mov	 DWORD PTR _list$[ebp+20], ecx

; 106  : 	this->m_HddData.push_back(list);

  00326	8d 45 e0	 lea	 eax, DWORD PTR _list$[ebp]
  00329	50		 push	 eax
  0032a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0032d	83 c1 04	 add	 ecx, 4
  00330	e8 00 00 00 00	 call	 ?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back

; 107  : }

  00335	5f		 pop	 edi
  00336	5e		 pop	 esi
  00337	5b		 pop	 ebx
  00338	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033b	33 cd		 xor	 ecx, ebp
  0033d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00342	8b e5		 mov	 esp, ebp
  00344	5d		 pop	 ebp
  00345	c2 04 00	 ret	 4
?DSAnsSelect@CBanSystem@@QAEXPAUPMSG_SELECT_BANSYSTEM@@@Z ENDP ; CBanSystem::DSAnsSelect
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DSReqInsert@CBanSystem@@QAEXPADKKK@Z		; CBanSystem::DSReqInsert
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -60						; size = 28
_list$ = -32						; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Name$ = 8						; size = 4
_Hdd$ = 12						; size = 4
_Time$ = 16						; size = 4
_Type$ = 20						; size = 4
?DSReqInsert@CBanSystem@@QAEXPADKKK@Z PROC		; CBanSystem::DSReqInsert
; _this$ = ecx

; 110  : {

  00350	55		 push	 ebp
  00351	8b ec		 mov	 ebp, esp
  00353	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00356	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0035b	33 c5		 xor	 eax, ebp
  0035d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00360	53		 push	 ebx
  00361	56		 push	 esi
  00362	57		 push	 edi
  00363	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 111  : 	if(!this->Enable)

  00366	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00369	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0036c	85 c9		 test	 ecx, ecx
  0036e	75 02		 jne	 SHORT $LN1@DSReqInser

; 112  : 	{
; 113  : 		return;

  00370	eb 7f		 jmp	 SHORT $LN2@DSReqInser
$LN1@DSReqInser:

; 114  : 	}
; 115  : 
; 116  : 	BANHDD_DATA list;
; 117  : 	memcpy(&list.Name, Name, sizeof(list.Name));

  00372	6a 0b		 push	 11			; 0000000bH
  00374	8b 45 08	 mov	 eax, DWORD PTR _Name$[ebp]
  00377	50		 push	 eax
  00378	8d 4d e0	 lea	 ecx, DWORD PTR _list$[ebp]
  0037b	51		 push	 ecx
  0037c	e8 00 00 00 00	 call	 _memcpy
  00381	83 c4 0c	 add	 esp, 12			; 0000000cH

; 118  : 	list.Hdd = Hdd;

  00384	8b 45 0c	 mov	 eax, DWORD PTR _Hdd$[ebp]
  00387	89 45 ec	 mov	 DWORD PTR _list$[ebp+12], eax

; 119  : 	list.Time = Time;

  0038a	8b 45 10	 mov	 eax, DWORD PTR _Time$[ebp]
  0038d	89 45 f0	 mov	 DWORD PTR _list$[ebp+16], eax

; 120  : 	list.Type = Type;

  00390	8b 45 14	 mov	 eax, DWORD PTR _Type$[ebp]
  00393	89 45 f4	 mov	 DWORD PTR _list$[ebp+20], eax

; 121  : 	this->m_HddData.push_back(list);

  00396	8d 45 e0	 lea	 eax, DWORD PTR _list$[ebp]
  00399	50		 push	 eax
  0039a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0039d	83 c1 04	 add	 ecx, 4
  003a0	e8 00 00 00 00	 call	 ?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back

; 122  : 
; 123  : 	PMSG_INSERT_BANSYSTEM pMsg;
; 124  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x21, sizeof(pMsg));

  003a5	6a 1c		 push	 28			; 0000001cH
  003a7	6a 21		 push	 33			; 00000021H
  003a9	68 eb 00 00 00	 push	 235			; 000000ebH
  003ae	8d 45 c4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  003b1	50		 push	 eax
  003b2	8d 4d c4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  003b5	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 125  : 	memcpy(&pMsg.Name, Name, sizeof(pMsg.Name));

  003ba	6a 0b		 push	 11			; 0000000bH
  003bc	8b 45 08	 mov	 eax, DWORD PTR _Name$[ebp]
  003bf	50		 push	 eax
  003c0	8d 4d c8	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  003c3	51		 push	 ecx
  003c4	e8 00 00 00 00	 call	 _memcpy
  003c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 126  : 	pMsg.Hdd = Hdd;

  003cc	8b 45 0c	 mov	 eax, DWORD PTR _Hdd$[ebp]
  003cf	89 45 d4	 mov	 DWORD PTR _pMsg$[ebp+16], eax

; 127  : 	pMsg.Time = Time;

  003d2	8b 45 10	 mov	 eax, DWORD PTR _Time$[ebp]
  003d5	89 45 d8	 mov	 DWORD PTR _pMsg$[ebp+20], eax

; 128  : 	pMsg.Type = Type;

  003d8	8b 45 14	 mov	 eax, DWORD PTR _Type$[ebp]
  003db	89 45 dc	 mov	 DWORD PTR _pMsg$[ebp+24], eax

; 129  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  003de	0f b6 45 c5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  003e2	50		 push	 eax
  003e3	8d 4d c4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  003e6	51		 push	 ecx
  003e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  003ec	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@DSReqInser:

; 130  : }

  003f1	5f		 pop	 edi
  003f2	5e		 pop	 esi
  003f3	5b		 pop	 ebx
  003f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003f7	33 cd		 xor	 ecx, ebp
  003f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003fe	8b e5		 mov	 esp, ebp
  00400	5d		 pop	 ebp
  00401	c2 10 00	 ret	 16			; 00000010H
?DSReqInsert@CBanSystem@@QAEXPADKKK@Z ENDP		; CBanSystem::DSReqInsert
_TEXT	ENDS
PUBLIC	?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+
PUBLIC	?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::begin
PUBLIC	__$ArrayPad$
PUBLIC	?DSReqDelete@CBanSystem@@QAEXPAD@Z		; CBanSystem::DSReqDelete
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
$T228851 = -112						; size = 4
$T228852 = -108						; size = 4
$T228853 = -104						; size = 4
$T228854 = -100						; size = 4
_i$227806 = -32						; size = 4
_pMsg$ = -28						; size = 20
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Name$ = 8						; size = 4
?DSReqDelete@CBanSystem@@QAEXPAD@Z PROC			; CBanSystem::DSReqDelete
; _this$ = ecx

; 133  : {

  00410	55		 push	 ebp
  00411	8b ec		 mov	 ebp, esp
  00413	83 ec 70	 sub	 esp, 112		; 00000070H
  00416	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0041b	33 c5		 xor	 eax, ebp
  0041d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00420	53		 push	 ebx
  00421	56		 push	 esi
  00422	57		 push	 edi
  00423	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 134  : 	if(!this->Enable)

  00426	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00429	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0042c	85 c9		 test	 ecx, ecx
  0042e	75 05		 jne	 SHORT $LN5@DSReqDelet

; 135  : 	{
; 136  : 		return;

  00430	e9 b6 00 00 00	 jmp	 $LN6@DSReqDelet
$LN5@DSReqDelet:

; 137  : 	}
; 138  : 
; 139  : 	PMSG_DELETE_BANSYSTEM pMsg;
; 140  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x22, sizeof(pMsg));

  00435	6a 14		 push	 20			; 00000014H
  00437	6a 22		 push	 34			; 00000022H
  00439	68 eb 00 00 00	 push	 235			; 000000ebH
  0043e	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00441	50		 push	 eax
  00442	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00445	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 141  : 	memcpy(&pMsg.Name, Name, sizeof(pMsg.Name));

  0044a	6a 0b		 push	 11			; 0000000bH
  0044c	8b 45 08	 mov	 eax, DWORD PTR _Name$[ebp]
  0044f	50		 push	 eax
  00450	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00453	51		 push	 ecx
  00454	e8 00 00 00 00	 call	 _memcpy
  00459	83 c4 0c	 add	 esp, 12			; 0000000cH

; 142  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0045c	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00460	50		 push	 eax
  00461	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00464	51		 push	 ecx
  00465	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0046a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 143  : 
; 144  : 	for(int i = 0; i < this->m_HddData.size(); i++)

  0046f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$227806[ebp], 0
  00476	eb 09		 jmp	 SHORT $LN4@DSReqDelet
$LN3@DSReqDelet:
  00478	8b 45 e0	 mov	 eax, DWORD PTR _i$227806[ebp]
  0047b	83 c0 01	 add	 eax, 1
  0047e	89 45 e0	 mov	 DWORD PTR _i$227806[ebp], eax
$LN4@DSReqDelet:
  00481	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00484	83 c1 04	 add	 ecx, 4
  00487	e8 00 00 00 00	 call	 ?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
  0048c	39 45 e0	 cmp	 DWORD PTR _i$227806[ebp], eax
  0048f	73 5a		 jae	 SHORT $LN6@DSReqDelet

; 145  : 	{
; 146  : 		if(!strcmp(this->m_HddData[i].Name, Name))

  00491	8b 45 08	 mov	 eax, DWORD PTR _Name$[ebp]
  00494	50		 push	 eax
  00495	8b 4d e0	 mov	 ecx, DWORD PTR _i$227806[ebp]
  00498	51		 push	 ecx
  00499	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0049c	83 c1 04	 add	 ecx, 4
  0049f	e8 00 00 00 00	 call	 ??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[]
  004a4	50		 push	 eax
  004a5	e8 00 00 00 00	 call	 _strcmp
  004aa	83 c4 08	 add	 esp, 8
  004ad	85 c0		 test	 eax, eax
  004af	75 38		 jne	 SHORT $LN1@DSReqDelet

; 147  : 		{
; 148  : 			this->m_HddData.erase(this->m_HddData.begin()+i);

  004b1	8b 45 e0	 mov	 eax, DWORD PTR _i$227806[ebp]
  004b4	50		 push	 eax
  004b5	8d 4d 98	 lea	 ecx, DWORD PTR $T228853[ebp]
  004b8	51		 push	 ecx
  004b9	8d 55 94	 lea	 edx, DWORD PTR $T228852[ebp]
  004bc	52		 push	 edx
  004bd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004c0	83 c1 04	 add	 ecx, 4
  004c3	e8 00 00 00 00	 call	 ?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::begin
  004c8	8b c8		 mov	 ecx, eax
  004ca	e8 00 00 00 00	 call	 ??H?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+
  004cf	8b 00		 mov	 eax, DWORD PTR [eax]
  004d1	89 45 90	 mov	 DWORD PTR $T228851[ebp], eax
  004d4	8b 4d 90	 mov	 ecx, DWORD PTR $T228851[ebp]
  004d7	51		 push	 ecx
  004d8	8d 55 9c	 lea	 edx, DWORD PTR $T228854[ebp]
  004db	52		 push	 edx
  004dc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004df	83 c1 04	 add	 ecx, 4
  004e2	e8 00 00 00 00	 call	 ?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase

; 149  : 			break;

  004e7	eb 02		 jmp	 SHORT $LN6@DSReqDelet
$LN1@DSReqDelet:

; 150  : 		}
; 151  : 	}

  004e9	eb 8d		 jmp	 SHORT $LN3@DSReqDelet
$LN6@DSReqDelet:

; 152  : 
; 153  : }

  004eb	5f		 pop	 edi
  004ec	5e		 pop	 esi
  004ed	5b		 pop	 ebx
  004ee	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004f1	33 cd		 xor	 ecx, ebp
  004f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004f8	8b e5		 mov	 esp, ebp
  004fa	5d		 pop	 ebp
  004fb	c2 04 00	 ret	 4
?DSReqDelete@CBanSystem@@QAEXPAD@Z ENDP			; CBanSystem::DSReqDelete
_TEXT	ENDS
PUBLIC	?Run@CBanSystem@@QAEXXZ				; CBanSystem::Run
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_ritem$227948 = -12					; size = 4
_i$227944 = -8						; size = 4
_this$ = -4						; size = 4
?Run@CBanSystem@@QAEXXZ PROC				; CBanSystem::Run
; _this$ = ecx

; 156  : {

  00500	55		 push	 ebp
  00501	8b ec		 mov	 ebp, esp
  00503	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00506	53		 push	 ebx
  00507	56		 push	 esi
  00508	57		 push	 edi
  00509	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 157  : 	for(int i = 0; i < this->m_HddData.size(); i++)

  0050c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227944[ebp], 0
  00513	eb 09		 jmp	 SHORT $LN6@Run
$LN5@Run:
  00515	8b 45 f8	 mov	 eax, DWORD PTR _i$227944[ebp]
  00518	83 c0 01	 add	 eax, 1
  0051b	89 45 f8	 mov	 DWORD PTR _i$227944[ebp], eax
$LN6@Run:
  0051e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00521	83 c1 04	 add	 ecx, 4
  00524	e8 00 00 00 00	 call	 ?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
  00529	39 45 f8	 cmp	 DWORD PTR _i$227944[ebp], eax
  0052c	73 4a		 jae	 SHORT $LN7@Run

; 158  : 	{
; 159  : 		BANHDD_DATA & ritem = this->m_HddData[i];

  0052e	8b 45 f8	 mov	 eax, DWORD PTR _i$227944[ebp]
  00531	50		 push	 eax
  00532	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00535	83 c1 04	 add	 ecx, 4
  00538	e8 00 00 00 00	 call	 ??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[]
  0053d	89 45 f4	 mov	 DWORD PTR _ritem$227948[ebp], eax

; 160  : 
; 161  : 		if(ritem.Time > 0)

  00540	8b 45 f4	 mov	 eax, DWORD PTR _ritem$227948[ebp]
  00543	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00547	76 2d		 jbe	 SHORT $LN3@Run

; 162  : 		{
; 163  : 			if(ritem.Hdd != NULL)

  00549	8b 45 f4	 mov	 eax, DWORD PTR _ritem$227948[ebp]
  0054c	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00550	74 24		 je	 SHORT $LN3@Run

; 164  : 			{
; 165  : 				ritem.Time--;

  00552	8b 45 f4	 mov	 eax, DWORD PTR _ritem$227948[ebp]
  00555	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00558	83 e9 01	 sub	 ecx, 1
  0055b	8b 55 f4	 mov	 edx, DWORD PTR _ritem$227948[ebp]
  0055e	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 166  : 
; 167  : 				if(ritem.Time <= 0)

  00561	8b 45 f4	 mov	 eax, DWORD PTR _ritem$227948[ebp]
  00564	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00568	77 0c		 ja	 SHORT $LN3@Run

; 168  : 				{
; 169  : 					this->DSReqDelete(ritem.Name);

  0056a	8b 45 f4	 mov	 eax, DWORD PTR _ritem$227948[ebp]
  0056d	50		 push	 eax
  0056e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00571	e8 00 00 00 00	 call	 ?DSReqDelete@CBanSystem@@QAEXPAD@Z ; CBanSystem::DSReqDelete
$LN3@Run:

; 170  : 				}
; 171  : 			}
; 172  : 		}
; 173  : 	}

  00576	eb 9d		 jmp	 SHORT $LN5@Run
$LN7@Run:

; 174  : }

  00578	5f		 pop	 edi
  00579	5e		 pop	 esi
  0057a	5b		 pop	 ebx
  0057b	8b e5		 mov	 esp, ebp
  0057d	5d		 pop	 ebp
  0057e	c3		 ret	 0
?Run@CBanSystem@@QAEXXZ ENDP				; CBanSystem::Run
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBANHDD_DATA@@@1@@Z ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
PUBLIC	??0?$allocator@UBANHDD_DATA@@@std@@QAE@XZ	; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T228857 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T228857[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UBANHDD_DATA@@@std@@QAE@XZ ; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBANHDD_DATA@@@1@@Z ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
PUBLIC	?_Tidy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
__ehhandler$??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0001d	f7 f9		 idiv	 ecx

; 880  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0000f	6b c0 18	 imul	 eax, 24			; 00000018H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA const &>
PUBLIC	??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA &>
PUBLIC	?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve
PUBLIC	?_Inside@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBE_NPBUBANHDD_DATA@@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Inside
PUBLIC	??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z ; std::addressof<BANHDD_DATA const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z
_TEXT	SEGMENT
__Idx$227979 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z ; std::addressof<BANHDD_DATA const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBE_NPBUBANHDD_DATA@@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 7d		 je	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z ; std::addressof<BANHDD_DATA const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	99		 cdq
  0003a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0003f	f7 f9		 idiv	 ecx
  00041	89 45 f8	 mov	 DWORD PTR __Idx$227979[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004d	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00050	75 0a		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00052	6a 01		 push	 1
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	51		 push	 ecx
  00063	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00066	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00069	50		 push	 eax
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00072	8b 45 f8	 mov	 eax, DWORD PTR __Idx$227979[ebp]
  00075	6b c0 18	 imul	 eax, 24			; 00000018H
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	03 01		 add	 eax, DWORD PTR [ecx]
  0007d	50		 push	 eax
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA &>
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009a	83 c1 18	 add	 ecx, 24			; 00000018H
  0009d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  000a3	eb 57		 jmp	 SHORT $LN5@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ae	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000b1	75 0a		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  000b3	6a 01		 push	 1
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c3	51		 push	 ecx
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ca	50		 push	 eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000d3	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000dd	52		 push	 edx
  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	83 c0 0c	 add	 eax, 12			; 0000000cH
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA const &>
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000ed	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f3	83 c1 18	 add	 ecx, 24			; 00000018H
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back:

; 997  : 			}
; 998  : 		}

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter
PUBLIC	?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy
PUBLIC	??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0001a	83 c0 18	 add	 eax, 24			; 00000018H
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002c	51		 push	 ecx
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00033	83 e8 18	 sub	 eax, 24			; 00000018H
  00036	50		 push	 eax
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy

; 1183 : 		--this->_Mylast;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	83 e9 18	 sub	 ecx, 24			; 00000018H
  00048	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1184 : 		return (_Make_iter(_Where));

  0004e	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00055	51		 push	 ecx
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter
  0005e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1185 : 		}

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase
PUBLIC	?end@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T228880 = -88						; size = 4
$T228881 = -84						; size = 4
$T228882 = -80						; size = 4
$T228883 = -76						; size = 4
$T228884 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T228881[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T228880[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T228883[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T228882[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T228880[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T228882[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T228884[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::clear
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=
; Function compile flags: /Odtp /ZI
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+, COMDAT
; _this$ = ecx

; 363  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		_Myiter _Tmp = *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 365  : 		return (_Tmp += _Off);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00017	50		 push	 eax
  00018	8d 4d f8	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0001b	e8 00 00 00 00	 call	 ??Y?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00025	89 0a		 mov	 DWORD PTR [edx], ecx
  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 366  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
??H?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::end
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator!=
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T228893 = -84						; size = 4
__Ptr$228059 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$228059[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$228059[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$228059[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T228893[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T228893[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBE_NPBUBANHDD_DATA@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBE_NPBUBANHDD_DATA@@@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBE_NPBUBANHDD_DATA@@@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::reserve
PUBLIC	?_Grow_to@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEII@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Grow_to
PUBLIC	?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::capacity
PUBLIC	?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Xlen
PUBLIC	?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEII@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::reserve
$LN6@Reserve:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z ; std::allocator<BANHDD_DATA>::deallocate
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 42		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0003c	99		 cdq
  0003d	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00042	f7 f9		 idiv	 ecx
  00044	50		 push	 eax
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z ; std::allocator<BANHDD_DATA>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Tidy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@UBANHDD_DATA@@@std@@QAE@ABV01@@Z	; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBANHDD_DATA@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBANHDD_DATA@@@1@@Z PROC ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UBANHDD_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBANHDD_DATA@@@1@@Z ENDP ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UBANHDD_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UBANHDD_DATA@@@std@@QAE@XZ PROC		; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UBANHDD_DATA@@@std@@QAE@XZ ENDP		; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=
; Function compile flags: /Odtp /ZI
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=, COMDAT
; _this$ = ecx

; 357  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 358  : 		*(_Mybase *)this += _Off;

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??Y?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=

; 359  : 		return (*this);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 360  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??Y?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=
_TEXT	ENDS
PUBLIC	??$_Umove@PAUBANHDD_DATA@@@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEPAUBANHDD_DATA@@PAU2@00@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Umove<BANHDD_DATA *>
PUBLIC	?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z ; std::allocator<BANHDD_DATA>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$228107 = -28					; size = 4
__Ptr$228100 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Xlen
  00044	e9 f0 00 00 00	 jmp	 $LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 df 00 00
	00		 jae	 $LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z ; std::allocator<BANHDD_DATA>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$228100[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$228100[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUBANHDD_DATA@@@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEPAUBANHDD_DATA@@PAU2@00@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Umove<BANHDD_DATA *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve
__catch$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228100[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z ; std::allocator<BANHDD_DATA>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$228107[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 3a		 je	 SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ef	2b 01		 sub	 eax, DWORD PTR [ecx]
  000f1	99		 cdq
  000f2	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000f7	f7 f9		 idiv	 ecx
  000f9	50		 push	 eax
  000fa	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 02		 mov	 eax, DWORD PTR [edx]
  000ff	50		 push	 eax
  00100	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00106	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z ; std::allocator<BANHDD_DATA>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0010b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  00113	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00116	6b c0 18	 imul	 eax, 24			; 00000018H
  00119	03 45 e8	 add	 eax, DWORD PTR __Ptr$228100[ebp]
  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  00122	8b 45 e4	 mov	 eax, DWORD PTR __Size$228107[ebp]
  00125	6b c0 18	 imul	 eax, 24			; 00000018H
  00128	03 45 e8	 add	 eax, DWORD PTR __Ptr$228100[ebp]
  0012b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  00131	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228100[ebp]
  00137	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0001d	f7 f9		 idiv	 ecx

; 778  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UBANHDD_DATA@@@std@@QBEIXZ ; std::allocator<BANHDD_DATA>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UBANHDD_DATA@@@std@@QBEIXZ ; std::allocator<BANHDD_DATA>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::max_size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UBANHDD_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UBANHDD_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UBANHDD_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z PROC ; std::allocator<BANHDD_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z ENDP ; std::allocator<BANHDD_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=, COMDAT
; _this$ = ecx

; 151  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 152  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 153  : 		if (this->_Getcont() == 0
; 154  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 155  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 156  : 			{	// report error
; 157  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 158  : 			_SCL_SECURE_OUT_OF_RANGE;
; 159  : 			}
; 160  : 
; 161  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 162  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 163  : 		_SCL_SECURE_VALIDATE_RANGE(
; 164  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 165  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 166  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 167  : 
; 168  : 		_Ptr += _Off;

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000f	6b c0 18	 imul	 eax, 24			; 00000018H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 02		 mov	 DWORD PTR [edx], eax

; 169  : 		return (*this);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 170  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Allocate@UBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@IPAU1@@Z ; std::_Allocate<BANHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z PROC ; std::allocator<BANHDD_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@IPAU1@@Z ; std::_Allocate<BANHDD_DATA>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z ENDP ; std::allocator<BANHDD_DATA>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UBANHDD_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UBANHDD_DATA@@@std@@QBEIXZ PROC	; std::allocator<BANHDD_DATA>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 aa aa
	aa 0a		 mov	 DWORD PTR __Count$[ebp], 178956970 ; 0aaaaaaaH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UBANHDD_DATA@@@std@@QBEIXZ ENDP	; std::allocator<BANHDD_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z PROC ; std::addressof<BANHDD_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z ENDP ; std::addressof<BANHDD_DATA const >
_TEXT	ENDS
PUBLIC	??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z ; std::allocator<BANHDD_DATA>::construct<BANHDD_DATA &>
PUBLIC	??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z ; std::forward<BANHDD_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z ; std::forward<BANHDD_DATA &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z ; std::allocator<BANHDD_DATA>::construct<BANHDD_DATA &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@ABU3@@Z ; std::allocator<BANHDD_DATA>::construct
PUBLIC	??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z ; std::forward<BANHDD_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z ; std::forward<BANHDD_DATA const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@ABU3@@Z ; std::allocator<BANHDD_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
PUBLIC	??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z ; std::_Ptr_cat<BANHDD_DATA,BANHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z
_TEXT	SEGMENT
$T228970 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z PROC ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z ; std::_Ptr_cat<BANHDD_DATA,BANHDD_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T228970[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T228970[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z ENDP ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@@Z
_TEXT	SEGMENT
$T228973 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<BANHDD_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z ; std::_Ptr_cat<BANHDD_DATA,BANHDD_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T228973[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T228973[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@@Z ; std::_Uninitialized_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUBANHDD_DATA@@@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEPAUBANHDD_DATA@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUBANHDD_DATA@@@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEPAUBANHDD_DATA@@PAU2@00@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Umove<BANHDD_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@@Z ; std::_Uninitialized_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUBANHDD_DATA@@@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEPAUBANHDD_DATA@@PAU2@00@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Umove<BANHDD_DATA *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@UBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T228978 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@IPAU1@@Z PROC ; std::_Allocate<BANHDD_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 aa aa
	aa 0a		 cmp	 DWORD PTR __Count$[ebp], 178956970 ; 0aaaaaaaH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	6b c0 18	 imul	 eax, 24			; 00000018H
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T228978[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T228978[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@IPAU1@@Z ENDP ; std::_Allocate<BANHDD_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z ; std::_Construct<BANHDD_DATA,BANHDD_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@ABU3@@Z PROC ; std::allocator<BANHDD_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z ; std::_Construct<BANHDD_DATA,BANHDD_DATA const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@ABU3@@Z ENDP ; std::allocator<BANHDD_DATA>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z PROC ; std::forward<BANHDD_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z ENDP ; std::forward<BANHDD_DATA &>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T228985 = -88						; size = 4
$T228986 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z PROC ; std::allocator<BANHDD_DATA>::construct<BANHDD_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 18		 push	 24			; 00000018H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T228986[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T228986[ebp], 0
  00047	74 39		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z ; std::forward<BANHDD_DATA &>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 ac	 mov	 edx, DWORD PTR $T228986[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	89 0a		 mov	 DWORD PTR [edx], ecx
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00068	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006b	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0006e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00071	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00074	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00077	89 42 14	 mov	 DWORD PTR [edx+20], eax
  0007a	8b 4d ac	 mov	 ecx, DWORD PTR $T228986[ebp]
  0007d	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00080	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00082	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  00089	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  0008c	89 55 a8	 mov	 DWORD PTR $T228985[ebp], edx
  0008f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T228986[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z ENDP ; std::allocator<BANHDD_DATA>::construct<BANHDD_DATA &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z PROC ; std::forward<BANHDD_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z ENDP ; std::forward<BANHDD_DATA const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z PROC ; std::_Ptr_cat<BANHDD_DATA,BANHDD_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z ENDP ; std::_Ptr_cat<BANHDD_DATA,BANHDD_DATA>
_TEXT	ENDS
PUBLIC	??$move@AAUBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ; std::move<BANHDD_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 18	 add	 eax, 24			; 00000018H
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 18	 add	 ecx, 24			; 00000018H
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 33		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ; std::move<BANHDD_DATA &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0003e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00041	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00044	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00047	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0004a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0004d	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  00050	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00053	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00056	eb b3		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  00058	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z ; std::_Dest_val<std::allocator<BANHDD_DATA>,BANHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<BANHDD_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 18	 add	 eax, 24			; 00000018H
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z ; std::_Dest_val<std::allocator<BANHDD_DATA>,BANHDD_DATA>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>
PUBLIC	??$_Val_type@PAUBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@PAU1@@Z ; std::_Val_type<BANHDD_DATA *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@@Z
_TEXT	SEGMENT
$T229010 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@@Z PROC ; std::_Uninitialized_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z ; std::_Ptr_cat<BANHDD_DATA,BANHDD_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229010[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229010[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@PAU1@@Z ; std::_Val_type<BANHDD_DATA *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA> >
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229013 = -88						; size = 4
$T229014 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z PROC ; std::_Construct<BANHDD_DATA,BANHDD_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 18		 push	 24			; 00000018H
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T229014[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T229014[ebp], 0
  0004a	74 39		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z ; std::forward<BANHDD_DATA const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 55 ac	 mov	 edx, DWORD PTR $T229014[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	89 0a		 mov	 DWORD PTR [edx], ecx
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00065	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00068	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0006b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006e	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00071	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00074	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00077	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0007a	89 42 14	 mov	 DWORD PTR [edx+20], eax
  0007d	8b 4d ac	 mov	 ecx, DWORD PTR $T229014[ebp]
  00080	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00083	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  00085	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  0008c	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  0008f	89 55 a8	 mov	 DWORD PTR $T229013[ebp], edx
  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229014[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z ENDP ; std::_Construct<BANHDD_DATA,BANHDD_DATA const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z PROC ; std::move<BANHDD_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ENDP ; std::move<BANHDD_DATA &>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@@Z ; std::allocator<BANHDD_DATA>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z PROC ; std::_Dest_val<std::allocator<BANHDD_DATA>,BANHDD_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@@Z ; std::allocator<BANHDD_DATA>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<BANHDD_DATA>,BANHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@PAU1@@Z PROC ; std::_Val_type<BANHDD_DATA *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@PAU1@@Z ENDP ; std::_Val_type<BANHDD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 18	 add	 eax, 24			; 00000018H
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 18	 add	 ecx, 24			; 00000018H
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 18	 add	 eax, 24			; 00000018H
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z ; std::_Dest_val<std::allocator<BANHDD_DATA>,BANHDD_DATA>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>
PUBLIC	??$_Destroy@UBANHDD_DATA@@@std@@YAXPAUBANHDD_DATA@@@Z ; std::_Destroy<BANHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@@Z PROC ; std::allocator<BANHDD_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UBANHDD_DATA@@@std@@YAXPAUBANHDD_DATA@@@Z ; std::_Destroy<BANHDD_DATA>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@@Z ENDP ; std::allocator<BANHDD_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z ; std::allocator<BANHDD_DATA>::construct
PUBLIC	??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ; std::forward<BANHDD_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ; std::forward<BANHDD_DATA>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z ; std::allocator<BANHDD_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UBANHDD_DATA@@@std@@YAXPAUBANHDD_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UBANHDD_DATA@@@std@@YAXPAUBANHDD_DATA@@@Z PROC ; std::_Destroy<BANHDD_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UBANHDD_DATA@@@std@@YAXPAUBANHDD_DATA@@@Z ENDP ; std::_Destroy<BANHDD_DATA>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229053 = -88						; size = 4
$T229054 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z PROC ; std::allocator<BANHDD_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 18		 push	 24			; 00000018H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T229054[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T229054[ebp], 0
  00047	74 39		 je	 SHORT $LN3@construct@2
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ; std::forward<BANHDD_DATA>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 ac	 mov	 edx, DWORD PTR $T229054[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	89 0a		 mov	 DWORD PTR [edx], ecx
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00068	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006b	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0006e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00071	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00074	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00077	89 42 14	 mov	 DWORD PTR [edx+20], eax
  0007a	8b 4d ac	 mov	 ecx, DWORD PTR $T229054[ebp]
  0007d	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00080	eb 07		 jmp	 SHORT $LN4@construct@2
$LN3@construct@2:
  00082	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@2:
  00089	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  0008c	89 55 a8	 mov	 DWORD PTR $T229053[ebp], edx
  0008f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229054[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z ENDP ; std::allocator<BANHDD_DATA>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z PROC ; std::forward<BANHDD_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ENDP ; std::forward<BANHDD_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\bansystem.cpp
;	COMDAT ??__Eg_BanSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_BanSystem@@YAXXZ PROC				; `dynamic initializer for 'g_BanSystem'', COMDAT

; 13   : CBanSystem g_BanSystem;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BanSystem@@3VCBanSystem@@A ; g_BanSystem
  0000e	e8 00 00 00 00	 call	 ??0CBanSystem@@QAE@XZ	; CBanSystem::CBanSystem
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_BanSystem@@YAXXZ ; `dynamic atexit destructor for 'g_BanSystem''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_BanSystem@@YAXXZ ENDP				; `dynamic initializer for 'g_BanSystem''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_BanSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_BanSystem@@YAXXZ PROC				; `dynamic atexit destructor for 'g_BanSystem'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BanSystem@@3VCBanSystem@@A ; g_BanSystem
  0000e	e8 00 00 00 00	 call	 ??1CBanSystem@@QAE@XZ	; CBanSystem::~CBanSystem
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_BanSystem@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_BanSystem''
text$yd	ENDS
PUBLIC	?g_BanSystem@@3VCBanSystem@@A			; g_BanSystem
_BSS	SEGMENT
?g_BanSystem@@3VCBanSystem@@A DB 014H DUP (?)		; g_BanSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_BanSystem$initializer$ DD FLAT:??__Eg_BanSystem@@YAXXZ
CRT$XCU	ENDS
END
