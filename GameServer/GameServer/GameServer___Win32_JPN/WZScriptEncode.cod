; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\common\WZScriptEncode.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XorTable@@3PAEA				; XorTable
_DATA	SEGMENT
?XorTable@@3PAEA DB 0a1H				; XorTable
	DB	0b2H
	DB	0aaH
	DB	012H
	DB	023H
	DB	0f1H
	DB	0f3H
	DB	0d3H
	DB	078H
	DB	02H
_DATA	ENDS
PUBLIC	??_7CWZScriptEncode@@6B@			; CWZScriptEncode::`vftable'
PUBLIC	??0CWZScriptEncode@@QAE@XZ			; CWZScriptEncode::CWZScriptEncode
PUBLIC	??_R4CWZScriptEncode@@6B@			; CWZScriptEncode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWZScriptEncode@@@8			; CWZScriptEncode `RTTI Type Descriptor'
PUBLIC	??_R3CWZScriptEncode@@8				; CWZScriptEncode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWZScriptEncode@@8				; CWZScriptEncode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWZScriptEncode@@8		; CWZScriptEncode::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECWZScriptEncode@@UAEPAXI@Z:PROC		; CWZScriptEncode::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CWZScriptEncode@@8
; File d:\projects\exteam6.3\source\gameserver\common\wzscriptencode.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CWZScriptEncode@@8 DD FLAT:??_R0?AVCWZScriptEncode@@@8 ; CWZScriptEncode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_R2CWZScriptEncode@@8
rdata$r	SEGMENT
??_R2CWZScriptEncode@@8 DD FLAT:??_R1A@?0A@EA@CWZScriptEncode@@8 ; CWZScriptEncode::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWZScriptEncode@@8
rdata$r	SEGMENT
??_R3CWZScriptEncode@@8 DD 00H				; CWZScriptEncode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWZScriptEncode@@@8
_DATA	SEGMENT
??_R0?AVCWZScriptEncode@@@8 DD FLAT:??_7type_info@@6B@	; CWZScriptEncode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWZScriptEncode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CWZScriptEncode@@6B@
rdata$r	SEGMENT
??_R4CWZScriptEncode@@6B@ DD 00H			; CWZScriptEncode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWZScriptEncode@@@8
	DD	FLAT:??_R3CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_7CWZScriptEncode@@6B@
CONST	SEGMENT
??_7CWZScriptEncode@@6B@ DD FLAT:??_R4CWZScriptEncode@@6B@ ; CWZScriptEncode::`vftable'
	DD	FLAT:??_ECWZScriptEncode@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWZScriptEncode@@QAE@XZ PROC				; CWZScriptEncode::CWZScriptEncode
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWZScriptEncode@@6B@

; 12   : 	this->m_pBuffer=0;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 13   : 	this->m_iBufferSize=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 14   : 	this->m_iBufferCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 15   : 	this->m_hFile=INVALID_HANDLE_VALUE;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1

; 16   : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0CWZScriptEncode@@QAE@XZ ENDP				; CWZScriptEncode::CWZScriptEncode
_TEXT	ENDS
PUBLIC	??1CWZScriptEncode@@UAE@XZ			; CWZScriptEncode::~CWZScriptEncode
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWZScriptEncode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWZScriptEncode@@UAEPAXI@Z PROC			; CWZScriptEncode::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWZScriptEncode@@UAE@XZ ; CWZScriptEncode::~CWZScriptEncode
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCWZScriptEncode@@UAEPAXI@Z ENDP			; CWZScriptEncode::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Close@CWZScriptEncode@@QAEXXZ			; CWZScriptEncode::Close
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWZScriptEncode@@UAE@XZ PROC				; CWZScriptEncode::~CWZScriptEncode
; _this$ = ecx

; 19   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 44	 sub	 esp, 68			; 00000044H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWZScriptEncode@@6B@

; 20   : 	this->Close();

  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?Close@CWZScriptEncode@@QAEXXZ ; CWZScriptEncode::Close

; 21   : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
??1CWZScriptEncode@@UAE@XZ ENDP				; CWZScriptEncode::~CWZScriptEncode
_TEXT	ENDS
PUBLIC	?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::SetScriptParsingBuffer
PUBLIC	?Encode@CWZScriptEncode@@QAEXPADH@Z		; CWZScriptEncode::Encode
PUBLIC	?Open@CWZScriptEncode@@QAEHPAD@Z		; CWZScriptEncode::Open
EXTRN	__imp__ReadFile@20:PROC
EXTRN	_malloc:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iReadFileSize$ = -16					; size = 4
_pBuffer$ = -12						; size = 4
_filesize$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Open@CWZScriptEncode@@QAEHPAD@Z PROC			; CWZScriptEncode::Open
; _this$ = ecx

; 25   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 50	 sub	 esp, 80			; 00000050H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi
  00089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	int filesize;
; 27   : 	char* pBuffer;
; 28   : 	int iReadFileSize;
; 29   : 
; 30   : 	if ( this->m_hFile != INVALID_HANDLE_VALUE )

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  00093	74 0d		 je	 SHORT $LN3@Open

; 31   : 	{
; 32   : 		CloseHandle( this->m_hFile );

  00095	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00098	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009b	51		 push	 ecx
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN3@Open:

; 33   : 	}
; 34   : 
; 35   : 	this->m_hFile = CreateFile(filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0x80 , NULL); // 0x80 == NORMAL

  000a2	6a 00		 push	 0
  000a4	68 80 00 00 00	 push	 128			; 00000080H
  000a9	6a 03		 push	 3
  000ab	6a 00		 push	 0
  000ad	6a 01		 push	 1
  000af	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000b4	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000b7	50		 push	 eax
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  000be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 36   : 
; 37   : 	if ( this->m_hFile == INVALID_HANDLE_VALUE )

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  000cb	75 07		 jne	 SHORT $LN2@Open

; 38   : 	{
; 39   : 		return 0;

  000cd	33 c0		 xor	 eax, eax
  000cf	e9 80 00 00 00	 jmp	 $LN4@Open
$LN2@Open:

; 40   : 	}
; 41   : 
; 42   : 	filesize = GetFileSize(this->m_hFile , NULL);

  000d4	6a 00		 push	 0
  000d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000dc	51		 push	 ecx
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  000e3	89 45 f8	 mov	 DWORD PTR _filesize$[ebp], eax

; 43   : 	pBuffer = (char*)malloc(filesize);

  000e6	8b 45 f8	 mov	 eax, DWORD PTR _filesize$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _malloc
  000ef	83 c4 04	 add	 esp, 4
  000f2	89 45 f4	 mov	 DWORD PTR _pBuffer$[ebp], eax

; 44   : 	ReadFile(this->m_hFile, (void*)pBuffer, filesize, (unsigned long*)&iReadFileSize, 0);

  000f5	6a 00		 push	 0
  000f7	8d 45 f0	 lea	 eax, DWORD PTR _iReadFileSize$[ebp]
  000fa	50		 push	 eax
  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _filesize$[ebp]
  000fe	51		 push	 ecx
  000ff	8b 55 f4	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00102	52		 push	 edx
  00103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00109	51		 push	 ecx
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 45   : 
; 46   : 	if ( iReadFileSize == 0 )

  00110	83 7d f0 00	 cmp	 DWORD PTR _iReadFileSize$[ebp], 0
  00114	75 0c		 jne	 SHORT $LN1@Open

; 47   : 	{
; 48   : 		this->Close();

  00116	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ?Close@CWZScriptEncode@@QAEXXZ ; CWZScriptEncode::Close

; 49   : 		return 0;

  0011e	33 c0		 xor	 eax, eax
  00120	eb 32		 jmp	 SHORT $LN4@Open
$LN1@Open:

; 50   : 	}
; 51   : 
; 52   : 	this->Encode(pBuffer, iReadFileSize);

  00122	8b 45 f0	 mov	 eax, DWORD PTR _iReadFileSize$[ebp]
  00125	50		 push	 eax
  00126	8b 4d f4	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00129	51		 push	 ecx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	e8 00 00 00 00	 call	 ?Encode@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::Encode

; 53   : 	this->SetScriptParsingBuffer(pBuffer, iReadFileSize);

  00132	8b 45 f0	 mov	 eax, DWORD PTR _iReadFileSize$[ebp]
  00135	50		 push	 eax
  00136	8b 4d f4	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00139	51		 push	 ecx
  0013a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	e8 00 00 00 00	 call	 ?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::SetScriptParsingBuffer

; 54   : 
; 55   : 	CloseHandle(this->m_hFile );

  00142	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00145	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00148	51		 push	 ecx
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 56   : 	return 1;

  0014f	b8 01 00 00 00	 mov	 eax, 1
$LN4@Open:

; 57   : }

  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c2 04 00	 ret	 4
?Open@CWZScriptEncode@@QAEHPAD@Z ENDP			; CWZScriptEncode::Open
_TEXT	ENDS
EXTRN	_free:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CWZScriptEncode@@QAEXXZ PROC			; CWZScriptEncode::Close
; _this$ = ecx

; 60   : {

  00160	55		 push	 ebp
  00161	8b ec		 mov	 ebp, esp
  00163	83 ec 44	 sub	 esp, 68			; 00000044H
  00166	53		 push	 ebx
  00167	56		 push	 esi
  00168	57		 push	 edi
  00169	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   : 	if ( this->m_pBuffer != 0)

  0016c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00173	74 0f		 je	 SHORT $LN2@Close

; 62   : 	{
; 63   : 		free( this->m_pBuffer );

  00175	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00178	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0017b	51		 push	 ecx
  0017c	e8 00 00 00 00	 call	 _free
  00181	83 c4 04	 add	 esp, 4
$LN2@Close:

; 64   : 	}
; 65   : }

  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
?Close@CWZScriptEncode@@QAEXXZ ENDP			; CWZScriptEncode::Close
; Function compile flags: /Odtp /ZI
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Encode@CWZScriptEncode@@QAEXPADH@Z PROC		; CWZScriptEncode::Encode
; _this$ = ecx

; 68   : {

  00190	55		 push	 ebp
  00191	8b ec		 mov	 ebp, esp
  00193	83 ec 48	 sub	 esp, 72			; 00000048H
  00196	53		 push	 ebx
  00197	56		 push	 esi
  00198	57		 push	 edi
  00199	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 69   : 	int i;
; 70   : 
; 71   : 	for (i=0;i<size; i++)

  0019c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001a3	eb 09		 jmp	 SHORT $LN3@Encode
$LN2@Encode:
  001a5	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001a8	83 c0 01	 add	 eax, 1
  001ab	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN3@Encode:
  001ae	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001b1	3b 45 0c	 cmp	 eax, DWORD PTR _size$[ebp]
  001b4	7d 27		 jge	 SHORT $LN4@Encode

; 72   : 	{
; 73   : 		buffer[i]=buffer[i]^XorTable[i%10];	

  001b6	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  001b9	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  001bc	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001bf	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001c2	99		 cdq
  001c3	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  001c8	f7 fe		 idiv	 esi
  001ca	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR ?XorTable@@3PAEA[edx]
  001d1	33 ca		 xor	 ecx, edx
  001d3	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  001d6	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  001d9	88 08		 mov	 BYTE PTR [eax], cl

; 74   : 	}

  001db	eb c8		 jmp	 SHORT $LN2@Encode
$LN4@Encode:

; 75   : }

  001dd	5f		 pop	 edi
  001de	5e		 pop	 esi
  001df	5b		 pop	 ebx
  001e0	8b e5		 mov	 esp, ebp
  001e2	5d		 pop	 ebp
  001e3	c2 08 00	 ret	 8
?Encode@CWZScriptEncode@@QAEXPADH@Z ENDP		; CWZScriptEncode::Encode
_TEXT	ENDS
PUBLIC	?GetC@CWZScriptEncode@@IAEHXZ			; CWZScriptEncode::GetC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
?GetC@CWZScriptEncode@@IAEHXZ PROC			; CWZScriptEncode::GetC
; _this$ = ecx

; 78   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	83 ec 48	 sub	 esp, 72			; 00000048H
  001f6	53		 push	 ebx
  001f7	56		 push	 esi
  001f8	57		 push	 edi
  001f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 79   : 	if ( this->m_iBufferCount >= this->m_iBufferSize )

  001fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00202	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00205	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00208	7c 07		 jl	 SHORT $LN2@GetC

; 80   : 	{
; 81   : 		return -1;

  0020a	83 c8 ff	 or	 eax, -1
  0020d	eb 27		 jmp	 SHORT $LN3@GetC

; 82   : 	}
; 83   : 	else

  0020f	eb 25		 jmp	 SHORT $LN3@GetC
$LN2@GetC:

; 84   : 	{
; 85   : 		return this->m_pBuffer [ this->m_iBufferCount++ ];

  00211	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00214	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00217	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0021a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0021d	0f be 0c 01	 movsx	 ecx, BYTE PTR [ecx+eax]
  00221	89 4d b8	 mov	 DWORD PTR tv74[ebp], ecx
  00224	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00227	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0022a	83 c0 01	 add	 eax, 1
  0022d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00230	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00233	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]
$LN3@GetC:

; 86   : 	}
; 87   : }

  00236	5f		 pop	 edi
  00237	5e		 pop	 esi
  00238	5b		 pop	 ebx
  00239	8b e5		 mov	 esp, ebp
  0023b	5d		 pop	 ebp
  0023c	c3		 ret	 0
?GetC@CWZScriptEncode@@IAEHXZ ENDP			; CWZScriptEncode::GetC
_TEXT	ENDS
PUBLIC	?UnGetC@CWZScriptEncode@@IAEXH@Z		; CWZScriptEncode::UnGetC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ch$ = 8						; size = 4
?UnGetC@CWZScriptEncode@@IAEXH@Z PROC			; CWZScriptEncode::UnGetC
; _this$ = ecx

; 90   : {

  00240	55		 push	 ebp
  00241	8b ec		 mov	 ebp, esp
  00243	83 ec 44	 sub	 esp, 68			; 00000044H
  00246	53		 push	 ebx
  00247	56		 push	 esi
  00248	57		 push	 edi
  00249	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 	if ( this->m_iBufferCount <= 0)

  0024c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00253	7f 04		 jg	 SHORT $LN2@UnGetC

; 92   : 	{
; 93   : 		return;

  00255	eb 23		 jmp	 SHORT $LN3@UnGetC

; 94   : 	}
; 95   : 	else

  00257	eb 21		 jmp	 SHORT $LN3@UnGetC
$LN2@UnGetC:

; 96   : 	{
; 97   : 		this->m_iBufferCount--;

  00259	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0025f	83 e9 01	 sub	 ecx, 1
  00262	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00265	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 98   : 
; 99   : 		this->m_pBuffer [ this->m_iBufferCount ] = ch;

  00268	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0026e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00271	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00274	8a 55 08	 mov	 dl, BYTE PTR _ch$[ebp]
  00277	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
$LN3@UnGetC:

; 100  : 	}
; 101  : }

  0027a	5f		 pop	 edi
  0027b	5e		 pop	 esi
  0027c	5b		 pop	 ebx
  0027d	8b e5		 mov	 esp, ebp
  0027f	5d		 pop	 ebp
  00280	c2 04 00	 ret	 4
?UnGetC@CWZScriptEncode@@IAEXH@Z ENDP			; CWZScriptEncode::UnGetC
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z PROC ; CWZScriptEncode::SetScriptParsingBuffer
; _this$ = ecx

; 105  : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	83 ec 44	 sub	 esp, 68			; 00000044H
  00296	53		 push	 ebx
  00297	56		 push	 esi
  00298	57		 push	 edi
  00299	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	this->m_pBuffer = buffer;

  0029c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0029f	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  002a2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 107  : 	this->m_iBufferSize = size;

  002a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a8	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  002ab	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 108  : 	this->m_iBufferCount = 0;

  002ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b1	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 109  : }

  002b8	5f		 pop	 edi
  002b9	5e		 pop	 esi
  002ba	5b		 pop	 ebx
  002bb	8b e5		 mov	 esp, ebp
  002bd	5d		 pop	 ebp
  002be	c2 08 00	 ret	 8
?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ENDP ; CWZScriptEncode::SetScriptParsingBuffer
_TEXT	ENDS
PUBLIC	?GetNumber@CWZScriptEncode@@QAEHXZ		; CWZScriptEncode::GetNumber
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumber@CWZScriptEncode@@QAEHXZ PROC			; CWZScriptEncode::GetNumber
; _this$ = ecx

; 112  : {

  002d0	55		 push	 ebp
  002d1	8b ec		 mov	 ebp, esp
  002d3	83 ec 44	 sub	 esp, 68			; 00000044H
  002d6	53		 push	 ebx
  002d7	56		 push	 esi
  002d8	57		 push	 edi
  002d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 	return (int)this->TokenNumber;

  002dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002df	d9 40 18	 fld	 DWORD PTR [eax+24]
  002e2	e8 00 00 00 00	 call	 __ftol2_sse

; 114  : }

  002e7	5f		 pop	 edi
  002e8	5e		 pop	 esi
  002e9	5b		 pop	 ebx
  002ea	8b e5		 mov	 esp, ebp
  002ec	5d		 pop	 ebp
  002ed	c3		 ret	 0
?GetNumber@CWZScriptEncode@@QAEHXZ ENDP			; CWZScriptEncode::GetNumber
_TEXT	ENDS
PUBLIC	?GetString@CWZScriptEncode@@QAEPADXZ		; CWZScriptEncode::GetString
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetString@CWZScriptEncode@@QAEPADXZ PROC		; CWZScriptEncode::GetString
; _this$ = ecx

; 117  : {

  002f0	55		 push	 ebp
  002f1	8b ec		 mov	 ebp, esp
  002f3	83 ec 44	 sub	 esp, 68			; 00000044H
  002f6	53		 push	 ebx
  002f7	56		 push	 esi
  002f8	57		 push	 edi
  002f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	return &this->TokenString[0];

  002fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ff	83 c0 1c	 add	 eax, 28			; 0000001cH

; 119  : }

  00302	5f		 pop	 edi
  00303	5e		 pop	 esi
  00304	5b		 pop	 ebx
  00305	8b e5		 mov	 esp, ebp
  00307	5d		 pop	 ebp
  00308	c3		 ret	 0
?GetString@CWZScriptEncode@@QAEPADXZ ENDP		; CWZScriptEncode::GetString
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ ; CWZScriptEncode::GetToken
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv88 = -184						; size = 4
_TempString$ = -116					; size = 100
_p$ = -16						; size = 4
_ch$ = -9						; size = 1
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ PROC	; CWZScriptEncode::GetToken
; _this$ = ecx

; 122  : {

  00310	55		 push	 ebp
  00311	8b ec		 mov	 ebp, esp
  00313	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00319	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0031e	33 c5		 xor	 eax, ebp
  00320	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00323	53		 push	 ebx
  00324	56		 push	 esi
  00325	57		 push	 edi
  00326	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 123  : 	char ch;
; 124  : 	char* p;
; 125  : 	char TempString[100];
; 126  : 
; 127  : 	this->TokenString[0]=0;	// Set String NULL

  00329	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0032c	c6 40 1c 00	 mov	 BYTE PTR [eax+28], 0
$LN30@GetToken:

; 128  : 
; 129  : 	do
; 130  : 	{
; 131  : 		if ( (ch=this->GetC ()) == (-1) )

  00330	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00333	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00338	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  0033b	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  0033f	83 f8 ff	 cmp	 eax, -1
  00342	75 0c		 jne	 SHORT $LN27@GetToken

; 132  : 		{
; 133  : 			return T_END;

  00344	b8 02 00 00 00	 mov	 eax, 2
  00349	e9 be 02 00 00	 jmp	 $LN20@GetToken

; 134  : 		}
; 135  : 		else

  0034e	eb 35		 jmp	 SHORT $LN22@GetToken
$LN27@GetToken:

; 136  : 		{	
; 137  : 			if (ch=='/')		// this is /

  00350	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  00354	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00357	75 2c		 jne	 SHORT $LN22@GetToken

; 138  : 			{
; 139  : 				if((ch=this->GetC ()) == '/')

  00359	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0035c	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00361	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00364	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  00368	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0036b	75 18		 jne	 SHORT $LN22@GetToken
$LN23@GetToken:

; 140  : 				{
; 141  : 					while ( ((ch=this->GetC()) != ('\n')) )	// End of Line (EOL)

  0036d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00370	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00375	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00378	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  0037c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0037f	74 04		 je	 SHORT $LN22@GetToken

; 142  : 					{
; 143  : 						continue;

  00381	eb ea		 jmp	 SHORT $LN23@GetToken

; 144  : 					}

  00383	eb e8		 jmp	 SHORT $LN23@GetToken
$LN22@GetToken:

; 145  : 				}
; 146  : 			}
; 147  : 		}
; 148  : 	}
; 149  : 	while (isspace(ch) != 0);

  00385	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  00389	50		 push	 eax
  0038a	e8 00 00 00 00	 call	 _isspace
  0038f	83 c4 04	 add	 esp, 4
  00392	85 c0		 test	 eax, eax
  00394	75 9a		 jne	 SHORT $LN30@GetToken

; 150  : 
; 151  : 	switch(ch)

  00396	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  0039a	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], eax
  003a0	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv88[ebp]
  003a6	83 e9 22	 sub	 ecx, 34			; 00000022H
  003a9	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], ecx
  003af	83 bd 48 ff ff
	ff 5b		 cmp	 DWORD PTR tv88[ebp], 91	; 0000005bH
  003b6	0f 87 9f 01 00
	00		 ja	 $LN6@GetToken
  003bc	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv88[ebp]
  003c2	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN33@GetToken[edx]
  003c9	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN34@GetToken[eax*4]
$LN19@GetToken:

; 152  : 	{
; 153  : 
; 154  : 	case 0x23:	// #
; 155  : 		return this->CurrentToken=T_COMMAND;

  003d0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d3	c7 80 80 00 00
	00 23 00 00 00	 mov	 DWORD PTR [eax+128], 35	; 00000023H
  003dd	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  003e2	e9 25 02 00 00	 jmp	 $LN20@GetToken

; 156  : 		break;

  003e7	e9 20 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 157  : 	
; 158  : 	case 0x3B:	// ;
; 159  : 		return this->CurrentToken=T_SEMICOLON;

  003ec	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003ef	c7 80 80 00 00
	00 3b 00 00 00	 mov	 DWORD PTR [eax+128], 59	; 0000003bH
  003f9	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  003fe	e9 09 02 00 00	 jmp	 $LN20@GetToken

; 160  : 		break;

  00403	e9 04 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 161  : 	
; 162  : 	case 0x2C:	// ,
; 163  : 
; 164  : 		return this->CurrentToken=T_COMMA;

  00408	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0040b	c7 80 80 00 00
	00 2c 00 00 00	 mov	 DWORD PTR [eax+128], 44	; 0000002cH
  00415	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  0041a	e9 ed 01 00 00	 jmp	 $LN20@GetToken

; 165  : 		break;

  0041f	e9 e8 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 166  : 	
; 167  : 	case 0x7B:	// {
; 168  : 		return this->CurrentToken = T_LP;

  00424	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00427	c7 80 80 00 00
	00 7b 00 00 00	 mov	 DWORD PTR [eax+128], 123 ; 0000007bH
  00431	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00436	e9 d1 01 00 00	 jmp	 $LN20@GetToken

; 169  : 		break;

  0043b	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 170  : 
; 171  : 	case 0x7D:	// }
; 172  : 		return this->CurrentToken = T_RP;

  00440	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00443	c7 80 80 00 00
	00 7d 00 00 00	 mov	 DWORD PTR [eax+128], 125 ; 0000007dH
  0044d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00452	e9 b5 01 00 00	 jmp	 $LN20@GetToken

; 173  : 		break;

  00457	e9 b0 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 174  : 	// Nice Index Table :)	by Deathway
; 175  : 	case 0x2D:	//-
; 176  : 	case 0x2E:	//.
; 177  : 	case 0x30:	//0
; 178  : 	case 0x31:	//1
; 179  : 	case 0x32:	//2
; 180  : 	case 0x33:	//3
; 181  : 	case 0x34:	//4		
; 182  : 	case 0x35:	//5
; 183  : 	case 0x36:	//6
; 184  : 	case 0x37:	//7
; 185  : 	case 0x38:	//8
; 186  : 	case 0x39:	//9
; 187  : 		this->UnGetC (ch);

  0045c	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  00460	50		 push	 eax
  00461	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00464	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC

; 188  : 		p = TempString;

  00469	8d 45 8c	 lea	 eax, DWORD PTR _TempString$[ebp]
  0046c	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 189  : 		
; 190  : 		while (((ch=this->GetC()) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D))) 

  0046f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00472	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00477	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  0047a	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  0047e	83 f8 ff	 cmp	 eax, -1
  00481	74 36		 je	 SHORT $LN12@GetToken
  00483	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  00487	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0048a	74 1a		 je	 SHORT $LN11@GetToken
  0048c	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  00490	50		 push	 eax
  00491	e8 00 00 00 00	 call	 _isdigit
  00496	83 c4 04	 add	 esp, 4
  00499	85 c0		 test	 eax, eax
  0049b	75 09		 jne	 SHORT $LN11@GetToken
  0049d	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  004a1	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  004a4	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 191  : 		{
; 192  : 			*p = ch;

  004a6	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  004a9	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  004ac	88 08		 mov	 BYTE PTR [eax], cl

; 193  : 			p++;

  004ae	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  004b1	83 c0 01	 add	 eax, 1
  004b4	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax

; 194  : 		}		

  004b7	eb b6		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 195  : 		*p = 0;

  004b9	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  004bc	c6 00 00	 mov	 BYTE PTR [eax], 0

; 196  : 		this->TokenNumber = atof( TempString);

  004bf	8d 45 8c	 lea	 eax, DWORD PTR _TempString$[ebp]
  004c2	50		 push	 eax
  004c3	e8 00 00 00 00	 call	 _atof
  004c8	83 c4 04	 add	 esp, 4
  004cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004ce	d9 59 18	 fstp	 DWORD PTR [ecx+24]

; 197  : 		return this->CurrentToken  = T_NUMBER ;

  004d1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004d4	c7 80 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+128], 1
  004de	b8 01 00 00 00	 mov	 eax, 1
  004e3	e9 24 01 00 00	 jmp	 $LN20@GetToken

; 198  : 		break;

  004e8	e9 1f 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 199  : 
; 200  : 	case 0x22:	// "	
; 201  : 		p=&this->TokenString[0];

  004ed	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004f0	83 c0 1c	 add	 eax, 28			; 0000001cH
  004f3	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax
$LN9@GetToken:

; 202  : 		
; 203  : 		while (((ch=this->GetC() ) != -1 ) && (ch != 0x22))	// nice

  004f6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004f9	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  004fe	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00501	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  00505	83 f8 ff	 cmp	 eax, -1
  00508	74 1c		 je	 SHORT $LN8@GetToken
  0050a	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  0050e	83 f8 22	 cmp	 eax, 34			; 00000022H
  00511	74 13		 je	 SHORT $LN8@GetToken

; 204  : 		{
; 205  : 			*p = ch;

  00513	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  00516	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  00519	88 08		 mov	 BYTE PTR [eax], cl

; 206  : 			p++;

  0051b	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  0051e	83 c0 01	 add	 eax, 1
  00521	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax

; 207  : 		}

  00524	eb d0		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 208  : 		if (ch != 0x22 )

  00526	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  0052a	83 f8 22	 cmp	 eax, 34			; 00000022H
  0052d	74 0d		 je	 SHORT $LN7@GetToken

; 209  : 		{
; 210  : 			this->UnGetC(ch);

  0052f	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  00533	50		 push	 eax
  00534	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00537	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC
$LN7@GetToken:

; 211  : 		}
; 212  : 		*p = 0;

  0053c	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  0053f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 213  : 		return this->CurrentToken = T_NAME;

  00542	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00545	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0
  0054f	33 c0		 xor	 eax, eax
  00551	e9 b6 00 00 00	 jmp	 $LN20@GetToken

; 214  : 		break;

  00556	e9 b1 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 215  : 
; 216  : 	default:	
; 217  : 		if (isalpha(ch))

  0055b	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  0055f	50		 push	 eax
  00560	e8 00 00 00 00	 call	 _isalpha
  00565	83 c4 04	 add	 esp, 4
  00568	85 c0		 test	 eax, eax
  0056a	0f 84 8a 00 00
	00		 je	 $LN5@GetToken

; 218  : 		{
; 219  : 			p=&this->TokenString[0];

  00570	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00573	83 c0 1c	 add	 eax, 28			; 0000001cH
  00576	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax

; 220  : 			*p=ch;

  00579	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  0057c	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  0057f	88 08		 mov	 BYTE PTR [eax], cl

; 221  : 			p++;

  00581	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  00584	83 c0 01	 add	 eax, 1
  00587	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 222  : 
; 223  : 			while ( ((ch=this->GetC() ) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0058a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0058d	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00592	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00595	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  00599	83 f8 ff	 cmp	 eax, -1
  0059c	74 36		 je	 SHORT $LN3@GetToken
  0059e	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  005a2	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  005a5	74 1a		 je	 SHORT $LN2@GetToken
  005a7	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  005ab	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  005ae	74 11		 je	 SHORT $LN2@GetToken
  005b0	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  005b4	50		 push	 eax
  005b5	e8 00 00 00 00	 call	 _isalnum
  005ba	83 c4 04	 add	 esp, 4
  005bd	85 c0		 test	 eax, eax
  005bf	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 224  : 			{
; 225  : 				*p=ch;

  005c1	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  005c4	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  005c7	88 08		 mov	 BYTE PTR [eax], cl

; 226  : 				p++;

  005c9	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  005cc	83 c0 01	 add	 eax, 1
  005cf	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax

; 227  : 				
; 228  : 			}

  005d2	eb b6		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 229  : 
; 230  : 			this->UnGetC(ch);

  005d4	0f be 45 f7	 movsx	 eax, BYTE PTR _ch$[ebp]
  005d8	50		 push	 eax
  005d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005dc	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC

; 231  : 			*p=0;

  005e1	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  005e4	c6 00 00	 mov	 BYTE PTR [eax], 0

; 232  : 			this->CurrentToken=T_NAME;

  005e7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005ea	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0

; 233  : 			return T_NAME;

  005f4	33 c0		 xor	 eax, eax
  005f6	eb 14		 jmp	 SHORT $LN20@GetToken

; 234  : 		}
; 235  : 		else

  005f8	eb 12		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 236  : 		{
; 237  : 			return this->CurrentToken = T_SMD_ERROR;

  005fa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005fd	c7 80 80 00 00
	00 3c 00 00 00	 mov	 DWORD PTR [eax+128], 60	; 0000003cH
  00607	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN1@GetToken:
$LN20@GetToken:

; 238  : 		}
; 239  : 		break;
; 240  : 
; 241  : 	}
; 242  : 
; 243  : }

  0060c	5f		 pop	 edi
  0060d	5e		 pop	 esi
  0060e	5b		 pop	 ebx
  0060f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00612	33 cd		 xor	 ecx, ebp
  00614	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00619	8b e5		 mov	 esp, ebp
  0061b	5d		 pop	 ebp
  0061c	c3		 ret	 0
  0061d	8d 49 00	 npad	 3
$LN34@GetToken:
  00620	00 00 00 00	 DD	 $LN10@GetToken
  00624	00 00 00 00	 DD	 $LN19@GetToken
  00628	00 00 00 00	 DD	 $LN17@GetToken
  0062c	00 00 00 00	 DD	 $LN14@GetToken
  00630	00 00 00 00	 DD	 $LN18@GetToken
  00634	00 00 00 00	 DD	 $LN16@GetToken
  00638	00 00 00 00	 DD	 $LN15@GetToken
  0063c	00 00 00 00	 DD	 $LN6@GetToken
$LN33@GetToken:
  00640	00		 DB	 0
  00641	01		 DB	 1
  00642	07		 DB	 7
  00643	07		 DB	 7
  00644	07		 DB	 7
  00645	07		 DB	 7
  00646	07		 DB	 7
  00647	07		 DB	 7
  00648	07		 DB	 7
  00649	07		 DB	 7
  0064a	02		 DB	 2
  0064b	03		 DB	 3
  0064c	03		 DB	 3
  0064d	07		 DB	 7
  0064e	03		 DB	 3
  0064f	03		 DB	 3
  00650	03		 DB	 3
  00651	03		 DB	 3
  00652	03		 DB	 3
  00653	03		 DB	 3
  00654	03		 DB	 3
  00655	03		 DB	 3
  00656	03		 DB	 3
  00657	03		 DB	 3
  00658	07		 DB	 7
  00659	04		 DB	 4
  0065a	07		 DB	 7
  0065b	07		 DB	 7
  0065c	07		 DB	 7
  0065d	07		 DB	 7
  0065e	07		 DB	 7
  0065f	07		 DB	 7
  00660	07		 DB	 7
  00661	07		 DB	 7
  00662	07		 DB	 7
  00663	07		 DB	 7
  00664	07		 DB	 7
  00665	07		 DB	 7
  00666	07		 DB	 7
  00667	07		 DB	 7
  00668	07		 DB	 7
  00669	07		 DB	 7
  0066a	07		 DB	 7
  0066b	07		 DB	 7
  0066c	07		 DB	 7
  0066d	07		 DB	 7
  0066e	07		 DB	 7
  0066f	07		 DB	 7
  00670	07		 DB	 7
  00671	07		 DB	 7
  00672	07		 DB	 7
  00673	07		 DB	 7
  00674	07		 DB	 7
  00675	07		 DB	 7
  00676	07		 DB	 7
  00677	07		 DB	 7
  00678	07		 DB	 7
  00679	07		 DB	 7
  0067a	07		 DB	 7
  0067b	07		 DB	 7
  0067c	07		 DB	 7
  0067d	07		 DB	 7
  0067e	07		 DB	 7
  0067f	07		 DB	 7
  00680	07		 DB	 7
  00681	07		 DB	 7
  00682	07		 DB	 7
  00683	07		 DB	 7
  00684	07		 DB	 7
  00685	07		 DB	 7
  00686	07		 DB	 7
  00687	07		 DB	 7
  00688	07		 DB	 7
  00689	07		 DB	 7
  0068a	07		 DB	 7
  0068b	07		 DB	 7
  0068c	07		 DB	 7
  0068d	07		 DB	 7
  0068e	07		 DB	 7
  0068f	07		 DB	 7
  00690	07		 DB	 7
  00691	07		 DB	 7
  00692	07		 DB	 7
  00693	07		 DB	 7
  00694	07		 DB	 7
  00695	07		 DB	 7
  00696	07		 DB	 7
  00697	07		 DB	 7
  00698	07		 DB	 7
  00699	05		 DB	 5
  0069a	07		 DB	 7
  0069b	06		 DB	 6
?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ ENDP	; CWZScriptEncode::GetToken
_TEXT	ENDS
END
