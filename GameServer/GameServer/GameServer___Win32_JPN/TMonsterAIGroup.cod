; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\TMonsterAIGroup.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA ; TMonsterAIGroup::s_iMonsterAIGroupMemberCount
PUBLIC	?s_bDataLoad@TMonsterAIGroup@@2HA		; TMonsterAIGroup::s_bDataLoad
_BSS	SEGMENT
?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA DD 064H DUP (?) ; TMonsterAIGroup::s_iMonsterAIGroupMemberCount
?s_bDataLoad@TMonsterAIGroup@@2HA DD 01H DUP (?)	; TMonsterAIGroup::s_bDataLoad
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?DelAllGroupInfo@TMonsterAIGroup@@SAHXZ		; TMonsterAIGroup::DelAllGroupInfo
PUBLIC	??_7TMonsterAIGroup@@6B@			; TMonsterAIGroup::`vftable'
PUBLIC	??0TMonsterAIGroup@@QAE@XZ			; TMonsterAIGroup::TMonsterAIGroup
PUBLIC	??_R4TMonsterAIGroup@@6B@			; TMonsterAIGroup::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTMonsterAIGroup@@@8			; TMonsterAIGroup `RTTI Type Descriptor'
PUBLIC	??_R3TMonsterAIGroup@@8				; TMonsterAIGroup::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TMonsterAIGroup@@8				; TMonsterAIGroup::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TMonsterAIGroup@@8		; TMonsterAIGroup::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETMonsterAIGroup@@UAEPAXI@Z:PROC		; TMonsterAIGroup::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@TMonsterAIGroup@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\tmonsteraigroup.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@TMonsterAIGroup@@8 DD FLAT:??_R0?AVTMonsterAIGroup@@@8 ; TMonsterAIGroup::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TMonsterAIGroup@@8
rdata$r	ENDS
;	COMDAT ??_R2TMonsterAIGroup@@8
rdata$r	SEGMENT
??_R2TMonsterAIGroup@@8 DD FLAT:??_R1A@?0A@EA@TMonsterAIGroup@@8 ; TMonsterAIGroup::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TMonsterAIGroup@@8
rdata$r	SEGMENT
??_R3TMonsterAIGroup@@8 DD 00H				; TMonsterAIGroup::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TMonsterAIGroup@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTMonsterAIGroup@@@8
_DATA	SEGMENT
??_R0?AVTMonsterAIGroup@@@8 DD FLAT:??_7type_info@@6B@	; TMonsterAIGroup `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTMonsterAIGroup@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TMonsterAIGroup@@6B@
rdata$r	SEGMENT
??_R4TMonsterAIGroup@@6B@ DD 00H			; TMonsterAIGroup::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTMonsterAIGroup@@@8
	DD	FLAT:??_R3TMonsterAIGroup@@8
rdata$r	ENDS
;	COMDAT ??_7TMonsterAIGroup@@6B@
CONST	SEGMENT
??_7TMonsterAIGroup@@6B@ DD FLAT:??_R4TMonsterAIGroup@@6B@ ; TMonsterAIGroup::`vftable'
	DD	FLAT:??_ETMonsterAIGroup@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TMonsterAIGroup@@QAE@XZ PROC				; TMonsterAIGroup::TMonsterAIGroup
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7TMonsterAIGroup@@6B@

; 27   : 	this->DelAllGroupInfo();

  00015	e8 00 00 00 00	 call	 ?DelAllGroupInfo@TMonsterAIGroup@@SAHXZ ; TMonsterAIGroup::DelAllGroupInfo

; 28   : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??0TMonsterAIGroup@@QAE@XZ ENDP				; TMonsterAIGroup::TMonsterAIGroup
_TEXT	ENDS
PUBLIC	??1TMonsterAIGroup@@UAE@XZ			; TMonsterAIGroup::~TMonsterAIGroup
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GTMonsterAIGroup@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTMonsterAIGroup@@UAEPAXI@Z PROC			; TMonsterAIGroup::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1TMonsterAIGroup@@UAE@XZ ; TMonsterAIGroup::~TMonsterAIGroup
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GTMonsterAIGroup@@UAEPAXI@Z ENDP			; TMonsterAIGroup::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TMonsterAIGroup@@UAE@XZ PROC				; TMonsterAIGroup::~TMonsterAIGroup
; _this$ = ecx

; 31   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7TMonsterAIGroup@@6B@

; 32   : 	return;
; 33   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??1TMonsterAIGroup@@UAE@XZ ENDP				; TMonsterAIGroup::~TMonsterAIGroup
_TEXT	ENDS
PUBLIC	??_C@_0DJ@HODFGLNJ@?$FLMonster?5AI?5Group?$FN?5?9?5Loading?5Exc@ ; `string'
PUBLIC	??_C@_0CI@CJPFLHBA@?$FLMonster?5AI?5Group?5?$FN?5?9?5?$CFs?5file?5is@ ; `string'
PUBLIC	??_C@_0DC@LFNOMCBG@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@ ; `string'
PUBLIC	??_C@_0CN@CNMPNCB@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CE@LNCDKEDF@?$FLMonster?5AI?5Group?$FN?5?9?5Can?8t?5Open?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0DH@EJJEEGKC@?$FLMonster?5AI?5Group?$FN?5?9?5File?5load?5e@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?LoadData@TMonsterAIGroup@@SAHPAD@Z		; TMonsterAIGroup::LoadData
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_strcmp:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0DJ@HODFGLNJ@?$FLMonster?5AI?5Group?$FN?5?9?5Loading?5Exc@
CONST	SEGMENT
??_C@_0DJ@HODFGLNJ@?$FLMonster?5AI?5Group?$FN?5?9?5Loading?5Exc@ DB '[Mon'
	DB	'ster AI Group] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CJPFLHBA@?$FLMonster?5AI?5Group?5?$FN?5?9?5?$CFs?5file?5is@
CONST	SEGMENT
??_C@_0CI@CJPFLHBA@?$FLMonster?5AI?5Group?5?$FN?5?9?5?$CFs?5file?5is@ DB '['
	DB	'Monster AI Group ] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LFNOMCBG@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@
CONST	SEGMENT
??_C@_0DC@LFNOMCBG@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@ DB '[Mons'
	DB	'ter AI Group] Exceed Max GroupMember %d, %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CNMPNCB@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@
CONST	SEGMENT
??_C@_0CN@CNMPNCB@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@ DB '[Monst'
	DB	'er AI Group] Exceed Max GroupNumber %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LNCDKEDF@?$FLMonster?5AI?5Group?$FN?5?9?5Can?8t?5Open?5@
CONST	SEGMENT
??_C@_0CE@LNCDKEDF@?$FLMonster?5AI?5Group?$FN?5?9?5Can?8t?5Open?5@ DB '[M'
	DB	'onster AI Group] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EJJEEGKC@?$FLMonster?5AI?5Group?$FN?5?9?5File?5load?5e@
CONST	SEGMENT
??_C@_0DH@EJJEEGKC@?$FLMonster?5AI?5Group?$FN?5?9?5File?5load?5e@ DB '[Mo'
	DB	'nster AI Group] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
xdata$x	SEGMENT
__catchsym$?LoadData@TMonsterAIGroup@@SAHPAD@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadData@TMonsterAIGroup@@SAHPAD@Z$0
__unwindtable$?LoadData@TMonsterAIGroup@@SAHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@TMonsterAIGroup@@SAHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@TMonsterAIGroup@@SAHPAD@Z$2
__ehfuncinfo$?LoadData@TMonsterAIGroup@@SAHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@TMonsterAIGroup@@SAHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@TMonsterAIGroup@@SAHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv251 = -148						; size = 4
tv250 = -148						; size = 4
tv249 = -148						; size = 4
tv248 = -148						; size = 4
tv247 = -148						; size = 4
tv246 = -148						; size = 4
tv245 = -148						; size = 4
tv244 = -148						; size = 4
tv243 = -148						; size = 4
tv242 = -148						; size = 4
tv241 = -148						; size = 4
tv240 = -148						; size = 4
tv239 = -148						; size = 4
tv238 = -148						; size = 4
tv237 = -148						; size = 4
_iRegenType$227205 = -80				; size = 4
_iStartDir$227204 = -76					; size = 4
_iStartY$227203 = -72					; size = 4
_iStartX$227202 = -68					; size = 4
_iMapNumber$227201 = -64				; size = 4
_iCreateType$227200 = -60				; size = 4
_iAI03$227199 = -56					; size = 4
_iAI02$227198 = -52					; size = 4
_iAI01$227197 = -48					; size = 4
_iStartAI$227196 = -44					; size = 4
_iRank$227195 = -40					; size = 4
_iClass$227194 = -36					; size = 4
_iGuid$227193 = -32					; size = 4
_iGroupNumber$227192 = -28				; size = 4
_iType$227166 = -24					; size = 4
_Token$227162 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@TMonsterAIGroup@@SAHPAD@Z PROC		; TMonsterAIGroup::LoadData

; 38   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	6a ff		 push	 -1
  00055	68 00 00 00 00	 push	 __ehhandler$?LoadData@TMonsterAIGroup@@SAHPAD@Z
  0005a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00060	50		 push	 eax
  00061	51		 push	 ecx
  00062	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00068	53		 push	 ebx
  00069	56		 push	 esi
  0006a	57		 push	 edi
  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00070	33 c5		 xor	 eax, ebp
  00072	50		 push	 eax
  00073	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00076	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0007c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 39   : 	TMonsterAIGroup::s_bDataLoad = FALSE;

  0007f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIGroup@@2HA, 0 ; TMonsterAIGroup::s_bDataLoad

; 40   : 
; 41   : 	if ( !lpszFileName || !strcmp(lpszFileName, ""))

  00089	83 7d 08 00	 cmp	 DWORD PTR _lpszFileName$[ebp], 0
  0008d	74 15		 je	 SHORT $LN12@LoadData
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00094	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _strcmp
  0009d	83 c4 08	 add	 esp, 8
  000a0	85 c0		 test	 eax, eax
  000a2	75 14		 jne	 SHORT $LN13@LoadData
$LN12@LoadData:

; 42   : 	{
; 43   : 		MsgBox("[Monster AI Group] - File load error : File Name Error");

  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@EJJEEGKC@?$FLMonster?5AI?5Group?$FN?5?9?5File?5load?5e@
  000a9	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000ae	83 c4 04	 add	 esp, 4

; 44   : 		return FALSE;

  000b1	33 c0		 xor	 eax, eax
  000b3	e9 02 05 00 00	 jmp	 $LN14@LoadData
$LN13@LoadData:

; 45   : 	}
; 46   : 
; 47   : 	try
; 48   : 	{

  000b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 49   : 		SMDToken Token;
; 50   : 		SMDFile = fopen(lpszFileName, "r");

  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000c4	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _fopen
  000cd	83 c4 08	 add	 esp, 8
  000d0	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 51   : 
; 52   : 		if ( SMDFile == NULL )

  000d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  000dc	75 18		 jne	 SHORT $LN10@LoadData

; 53   : 		{
; 54   : 			MsgBox("[Monster AI Group] - Can't Open %s ", lpszFileName);

  000de	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  000e1	50		 push	 eax
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LNCDKEDF@?$FLMonster?5AI?5Group?$FN?5?9?5Can?8t?5Open?5@
  000e7	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000ec	83 c4 08	 add	 esp, 8

; 55   : 			return FALSE;

  000ef	33 c0		 xor	 eax, eax
  000f1	e9 c4 04 00 00	 jmp	 $LN14@LoadData
$LN10@LoadData:

; 56   : 		}
; 57   : 
; 58   : 		int iType = -1;

  000f6	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _iType$227166[ebp], -1
$LN9@LoadData:

; 59   : 
; 60   : 		while ( true )

  000fd	b8 01 00 00 00	 mov	 eax, 1
  00102	85 c0		 test	 eax, eax
  00104	0f 84 5b 04 00
	00		 je	 $LN8@LoadData

; 61   : 		{
; 62   : 			Token = GetToken();

  0010a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0010f	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv237[ebp], eax
  00115	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv237[ebp]
  0011b	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 63   : 
; 64   : 			if ( Token == END )

  0011e	83 7d ec 02	 cmp	 DWORD PTR _Token$227162[ebp], 2
  00122	75 05		 jne	 SHORT $LN7@LoadData

; 65   : 				break;

  00124	e9 3c 04 00 00	 jmp	 $LN8@LoadData
$LN7@LoadData:

; 66   : 
; 67   : 			iType = (int)TokenNumber;

  00129	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0012f	e8 00 00 00 00	 call	 __ftol2_sse
  00134	89 45 e8	 mov	 DWORD PTR _iType$227166[ebp], eax
$LN6@LoadData:

; 68   : 
; 69   : 			while ( true )

  00137	b8 01 00 00 00	 mov	 eax, 1
  0013c	85 c0		 test	 eax, eax
  0013e	0f 84 1c 04 00
	00		 je	 $LN5@LoadData

; 70   : 			{
; 71   : 				if ( iType == 0 )

  00144	83 7d e8 00	 cmp	 DWORD PTR _iType$227166[ebp], 0
  00148	0f 85 0d 04 00
	00		 jne	 $LN4@LoadData

; 72   : 				{
; 73   : 					int iGroupNumber = -1;

  0014e	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _iGroupNumber$227192[ebp], -1

; 74   : 					int iGuid = -1;

  00155	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _iGuid$227193[ebp], -1

; 75   : 					int iClass = -1;

  0015c	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _iClass$227194[ebp], -1

; 76   : 					int iRank = -1;

  00163	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _iRank$227195[ebp], -1

; 77   : 					int iStartAI = 0;

  0016a	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _iStartAI$227196[ebp], 0

; 78   : 					int iAI01 = 0;

  00171	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _iAI01$227197[ebp], 0

; 79   : 					int iAI02 = 0;

  00178	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _iAI02$227198[ebp], 0

; 80   : 					int iAI03 = 0;

  0017f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _iAI03$227199[ebp], 0

; 81   : 					int iCreateType = -1;

  00186	c7 45 c4 ff ff
	ff ff		 mov	 DWORD PTR _iCreateType$227200[ebp], -1

; 82   : 					int iMapNumber = -1;

  0018d	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _iMapNumber$227201[ebp], -1

; 83   : 					int iStartX = -1;

  00194	c7 45 bc ff ff
	ff ff		 mov	 DWORD PTR _iStartX$227202[ebp], -1

; 84   : 					int iStartY = -1;

  0019b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR _iStartY$227203[ebp], -1

; 85   : 					int iStartDir = -1;

  001a2	c7 45 b4 ff ff
	ff ff		 mov	 DWORD PTR _iStartDir$227204[ebp], -1

; 86   : 					int iRegenType = -1;

  001a9	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _iRegenType$227205[ebp], -1

; 87   : 
; 88   : 					Token = GetToken();

  001b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001b5	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv238[ebp], eax
  001bb	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv238[ebp]
  001c1	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 89   : 
; 90   : 					if ( !strcmp("end", TokenString))

  001c4	68 00 00 00 00	 push	 OFFSET _TokenString
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001ce	e8 00 00 00 00	 call	 _strcmp
  001d3	83 c4 08	 add	 esp, 8
  001d6	85 c0		 test	 eax, eax
  001d8	75 05		 jne	 SHORT $LN3@LoadData

; 91   : 						break;

  001da	e9 81 03 00 00	 jmp	 $LN5@LoadData
$LN3@LoadData:

; 92   : 
; 93   : 					iGroupNumber = (int)TokenNumber;

  001df	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e5	e8 00 00 00 00	 call	 __ftol2_sse
  001ea	89 45 e4	 mov	 DWORD PTR _iGroupNumber$227192[ebp], eax

; 94   : 
; 95   : 					Token = GetToken();

  001ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001f2	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv239[ebp], eax
  001f8	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv239[ebp]
  001fe	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 96   : 					iGuid = (int)TokenNumber;

  00201	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00207	e8 00 00 00 00	 call	 __ftol2_sse
  0020c	89 45 e0	 mov	 DWORD PTR _iGuid$227193[ebp], eax

; 97   : 
; 98   : 					Token = GetToken();

  0020f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00214	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv240[ebp], eax
  0021a	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv240[ebp]
  00220	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 99   : 					iClass = (int)TokenNumber;

  00223	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00229	e8 00 00 00 00	 call	 __ftol2_sse
  0022e	89 45 dc	 mov	 DWORD PTR _iClass$227194[ebp], eax

; 100  : 
; 101  : 					Token = GetToken();

  00231	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00236	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv241[ebp], eax
  0023c	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv241[ebp]
  00242	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 102  : 					iRank = (int)TokenNumber;

  00245	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0024b	e8 00 00 00 00	 call	 __ftol2_sse
  00250	89 45 d8	 mov	 DWORD PTR _iRank$227195[ebp], eax

; 103  : 
; 104  : 					Token = GetToken();

  00253	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00258	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv242[ebp], eax
  0025e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv242[ebp]
  00264	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 105  : 					iStartAI = (int)TokenNumber;

  00267	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026d	e8 00 00 00 00	 call	 __ftol2_sse
  00272	89 45 d4	 mov	 DWORD PTR _iStartAI$227196[ebp], eax

; 106  : 
; 107  : 					Token = GetToken();

  00275	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0027a	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv243[ebp], eax
  00280	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv243[ebp]
  00286	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 108  : 					iAI01 = (int)TokenNumber;

  00289	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0028f	e8 00 00 00 00	 call	 __ftol2_sse
  00294	89 45 d0	 mov	 DWORD PTR _iAI01$227197[ebp], eax

; 109  : 
; 110  : 					Token = GetToken();

  00297	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0029c	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv244[ebp], eax
  002a2	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv244[ebp]
  002a8	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 111  : 					iAI02 = (int)TokenNumber;

  002ab	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b1	e8 00 00 00 00	 call	 __ftol2_sse
  002b6	89 45 cc	 mov	 DWORD PTR _iAI02$227198[ebp], eax

; 112  : 
; 113  : 					Token = GetToken();

  002b9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002be	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv245[ebp], eax
  002c4	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv245[ebp]
  002ca	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 114  : 					iAI03 = (int)TokenNumber;

  002cd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002d3	e8 00 00 00 00	 call	 __ftol2_sse
  002d8	89 45 c8	 mov	 DWORD PTR _iAI03$227199[ebp], eax

; 115  : 
; 116  : 					Token = GetToken();

  002db	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002e0	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv246[ebp], eax
  002e6	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv246[ebp]
  002ec	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 117  : 					iCreateType = (int)TokenNumber;

  002ef	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002f5	e8 00 00 00 00	 call	 __ftol2_sse
  002fa	89 45 c4	 mov	 DWORD PTR _iCreateType$227200[ebp], eax

; 118  : 
; 119  : 					Token = GetToken();

  002fd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00302	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv247[ebp], eax
  00308	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv247[ebp]
  0030e	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 120  : 					iMapNumber = (int)TokenNumber;

  00311	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00317	e8 00 00 00 00	 call	 __ftol2_sse
  0031c	89 45 c0	 mov	 DWORD PTR _iMapNumber$227201[ebp], eax

; 121  : 
; 122  : 					Token = GetToken();

  0031f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00324	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv248[ebp], eax
  0032a	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv248[ebp]
  00330	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 123  : 					iStartX = (int)TokenNumber;

  00333	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00339	e8 00 00 00 00	 call	 __ftol2_sse
  0033e	89 45 bc	 mov	 DWORD PTR _iStartX$227202[ebp], eax

; 124  : 
; 125  : 					Token = GetToken();

  00341	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00346	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv249[ebp], eax
  0034c	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv249[ebp]
  00352	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 126  : 					iStartY = (int)TokenNumber;

  00355	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0035b	e8 00 00 00 00	 call	 __ftol2_sse
  00360	89 45 b8	 mov	 DWORD PTR _iStartY$227203[ebp], eax

; 127  : 
; 128  : 					Token = GetToken();

  00363	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00368	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv250[ebp], eax
  0036e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv250[ebp]
  00374	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 129  : 					iStartDir = (int)TokenNumber;

  00377	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0037d	e8 00 00 00 00	 call	 __ftol2_sse
  00382	89 45 b4	 mov	 DWORD PTR _iStartDir$227204[ebp], eax

; 130  : 
; 131  : 					Token = GetToken();

  00385	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0038a	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv251[ebp], eax
  00390	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv251[ebp]
  00396	89 45 ec	 mov	 DWORD PTR _Token$227162[ebp], eax

; 132  : 					iRegenType = (int)TokenNumber;

  00399	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0039f	e8 00 00 00 00	 call	 __ftol2_sse
  003a4	89 45 b0	 mov	 DWORD PTR _iRegenType$227205[ebp], eax

; 133  : 
; 134  : 					if ( iGroupNumber > MAX_MONSTER_AI_GROUP )

  003a7	83 7d e4 64	 cmp	 DWORD PTR _iGroupNumber$227192[ebp], 100 ; 00000064H
  003ab	7e 16		 jle	 SHORT $LN2@LoadData

; 135  : 					{
; 136  : 						MsgBox("[Monster AI Group] Exceed Max GroupNumber %d",
; 137  : 							iGroupNumber);

  003ad	8b 45 e4	 mov	 eax, DWORD PTR _iGroupNumber$227192[ebp]
  003b0	50		 push	 eax
  003b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@CNMPNCB@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@
  003b6	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  003bb	83 c4 08	 add	 esp, 8

; 138  : 						continue;

  003be	e9 74 fd ff ff	 jmp	 $LN6@LoadData
$LN2@LoadData:

; 139  : 					}
; 140  : 
; 141  : 					if ( iGuid > MAX_MONSTER_AI_GROUP_MEMBER)

  003c3	81 7d e0 c8 00
	00 00		 cmp	 DWORD PTR _iGuid$227193[ebp], 200 ; 000000c8H
  003ca	7e 1a		 jle	 SHORT $LN1@LoadData

; 142  : 					{
; 143  : 						MsgBox("[Monster AI Group] Exceed Max GroupMember %d, %d ",
; 144  : 							iGroupNumber, iGuid);

  003cc	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  003cf	50		 push	 eax
  003d0	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  003d3	51		 push	 ecx
  003d4	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LFNOMCBG@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@
  003d9	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  003de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 145  : 						continue;

  003e1	e9 51 fd ff ff	 jmp	 $LN6@LoadData
$LN1@LoadData:

; 146  : 					}
; 147  : 
; 148  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iGroupNumber = iGroupNumber;

  003e6	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  003e9	c1 e0 06	 shl	 eax, 6
  003ec	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  003ef	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  003f5	8b 55 e4	 mov	 edx, DWORD PTR _iGroupNumber$227192[ebp]
  003f8	89 94 01 04 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+4], edx

; 149  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iGuid = iGuid;

  003ff	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  00402	c1 e0 06	 shl	 eax, 6
  00405	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  00408	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  0040e	8b 55 e0	 mov	 edx, DWORD PTR _iGuid$227193[ebp]
  00411	89 94 01 08 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+8], edx

; 150  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iClass = iClass;

  00418	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  0041b	c1 e0 06	 shl	 eax, 6
  0041e	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  00421	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  00427	8b 55 dc	 mov	 edx, DWORD PTR _iClass$227194[ebp]
  0042a	89 94 01 0c 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+12], edx

; 151  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iRank = iRank;

  00431	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  00434	c1 e0 06	 shl	 eax, 6
  00437	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  0043a	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  00440	8b 55 d8	 mov	 edx, DWORD PTR _iRank$227195[ebp]
  00443	89 94 01 10 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+16], edx

; 152  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iStartAI = iStartAI;

  0044a	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  0044d	c1 e0 06	 shl	 eax, 6
  00450	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  00453	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  00459	8b 55 d4	 mov	 edx, DWORD PTR _iStartAI$227196[ebp]
  0045c	89 94 01 14 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+20], edx

; 153  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iAI01 = iAI01;

  00463	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  00466	c1 e0 06	 shl	 eax, 6
  00469	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  0046c	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  00472	8b 55 d0	 mov	 edx, DWORD PTR _iAI01$227197[ebp]
  00475	89 94 01 18 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+24], edx

; 154  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iAI02 = iAI02;

  0047c	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  0047f	c1 e0 06	 shl	 eax, 6
  00482	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  00485	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  0048b	8b 55 cc	 mov	 edx, DWORD PTR _iAI02$227198[ebp]
  0048e	89 94 01 1c 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+28], edx

; 155  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iAI03 = iAI03;

  00495	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  00498	c1 e0 06	 shl	 eax, 6
  0049b	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  0049e	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  004a4	8b 55 c8	 mov	 edx, DWORD PTR _iAI03$227199[ebp]
  004a7	89 94 01 20 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+32], edx

; 156  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iCreateType = iCreateType;

  004ae	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  004b1	c1 e0 06	 shl	 eax, 6
  004b4	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  004b7	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  004bd	8b 55 c4	 mov	 edx, DWORD PTR _iCreateType$227200[ebp]
  004c0	89 94 01 24 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+36], edx

; 157  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iMapNumber = iMapNumber;

  004c7	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  004ca	c1 e0 06	 shl	 eax, 6
  004cd	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  004d0	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  004d6	8b 55 c0	 mov	 edx, DWORD PTR _iMapNumber$227201[ebp]
  004d9	89 94 01 28 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+40], edx

; 158  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iStartX = iStartX;

  004e0	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  004e3	c1 e0 06	 shl	 eax, 6
  004e6	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  004e9	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  004ef	8b 55 bc	 mov	 edx, DWORD PTR _iStartX$227202[ebp]
  004f2	89 94 01 2c 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+44], edx

; 159  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iStartY = iStartY;

  004f9	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  004fc	c1 e0 06	 shl	 eax, 6
  004ff	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  00502	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  00508	8b 55 b8	 mov	 edx, DWORD PTR _iStartY$227203[ebp]
  0050b	89 94 01 30 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+48], edx

; 160  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iStartDir = iStartDir;

  00512	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  00515	c1 e0 06	 shl	 eax, 6
  00518	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  0051b	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  00521	8b 55 b4	 mov	 edx, DWORD PTR _iStartDir$227204[ebp]
  00524	89 94 01 34 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+52], edx

; 161  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iRegenType = iRegenType;

  0052b	8b 45 e0	 mov	 eax, DWORD PTR _iGuid$227193[ebp]
  0052e	c1 e0 06	 shl	 eax, 6
  00531	8b 4d e4	 mov	 ecx, DWORD PTR _iGroupNumber$227192[ebp]
  00534	69 c9 00 32 00
	00		 imul	 ecx, 12800		; 00003200H
  0053a	8b 55 b0	 mov	 edx, DWORD PTR _iRegenType$227205[ebp]
  0053d	89 94 01 38 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+eax+56], edx

; 162  : 					
; 163  : 					TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber]++;

  00544	8b 45 e4	 mov	 eax, DWORD PTR _iGroupNumber$227192[ebp]
  00547	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4]
  0054e	83 c1 01	 add	 ecx, 1
  00551	8b 55 e4	 mov	 edx, DWORD PTR _iGroupNumber$227192[ebp]
  00554	89 0c 95 00 00
	00 00		 mov	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[edx*4], ecx
$LN4@LoadData:

; 164  : 				}
; 165  : 			}

  0055b	e9 d7 fb ff ff	 jmp	 $LN6@LoadData
$LN5@LoadData:

; 166  : 		}	// while ( true )

  00560	e9 98 fb ff ff	 jmp	 $LN9@LoadData
$LN8@LoadData:

; 167  : 
; 168  : 		fclose(SMDFile);

  00565	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0056a	50		 push	 eax
  0056b	e8 00 00 00 00	 call	 _fclose
  00570	83 c4 04	 add	 esp, 4

; 169  : 
; 170  : 		LogAddC(2, "[Monster AI Group ] - %s file is Loaded", lpszFileName);

  00573	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00576	50		 push	 eax
  00577	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CJPFLHBA@?$FLMonster?5AI?5Group?5?$FN?5?9?5?$CFs?5file?5is@
  0057c	6a 02		 push	 2
  0057e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00584	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 
; 172  : 		TMonsterAIGroup::s_bDataLoad = TRUE;

  00587	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIGroup@@2HA, 1 ; TMonsterAIGroup::s_bDataLoad

; 173  : 	}

  00591	eb 1e		 jmp	 SHORT $LN16@LoadData
__catch$?LoadData@TMonsterAIGroup@@SAHPAD@Z$0:

; 174  : 	catch(...)
; 175  : 	{
; 176  : 		MsgBox("[Monster AI Group] - Loading Exception Error (%s) File. ", lpszFileName);

  00593	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00596	50		 push	 eax
  00597	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@HODFGLNJ@?$FLMonster?5AI?5Group?$FN?5?9?5Loading?5Exc@
  0059c	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  005a1	83 c4 08	 add	 esp, 8

; 177  : 	}

  005a4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  005ab	b8 00 00 00 00	 mov	 eax, $LN19@LoadData
  005b0	c3		 ret	 0
$LN16@LoadData:
  005b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN19@LoadData:

; 178  : 
; 179  : 	return FALSE;

  005b8	33 c0		 xor	 eax, eax
$LN14@LoadData:

; 180  : }

  005ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  005bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005c4	59		 pop	 ecx
  005c5	5f		 pop	 edi
  005c6	5e		 pop	 esi
  005c7	5b		 pop	 ebx
  005c8	8b e5		 mov	 esp, ebp
  005ca	5d		 pop	 ebp
  005cb	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?LoadData@TMonsterAIGroup@@SAHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@TMonsterAIGroup@@SAHPAD@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@TMonsterAIGroup@@SAHPAD@Z ENDP		; TMonsterAIGroup::LoadData
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  005d0	55		 push	 ebp
  005d1	8b ec		 mov	 ebp, esp
  005d3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  005d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  005de	33 c5		 xor	 eax, ebp
  005e0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  005e3	53		 push	 ebx
  005e4	56		 push	 esi
  005e5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  005e6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  005ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005f2	50		 push	 eax
  005f3	e8 00 00 00 00	 call	 _fgetc
  005f8	83 c4 04	 add	 esp, 4
  005fb	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  005fe	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00602	83 f9 ff	 cmp	 ecx, -1
  00605	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00607	b8 02 00 00 00	 mov	 eax, 2
  0060c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00611	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00613	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00617	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0061a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0061c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00621	50		 push	 eax
  00622	e8 00 00 00 00	 call	 _fgetc
  00627	83 c4 04	 add	 esp, 4
  0062a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0062d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00631	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00634	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00636	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0063a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0063d	74 1c		 je	 SHORT $LN23@GetToken
  0063f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00643	83 f8 ff	 cmp	 eax, -1
  00646	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00648	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0064d	50		 push	 eax
  0064e	e8 00 00 00 00	 call	 _fgetc
  00653	83 c4 04	 add	 esp, 4
  00656	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00659	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0065b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0065f	83 f8 ff	 cmp	 eax, -1
  00662	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00664	b8 02 00 00 00	 mov	 eax, 2
  00669	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0066e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00672	50		 push	 eax
  00673	e8 00 00 00 00	 call	 _isspace
  00678	83 c4 04	 add	 esp, 4
  0067b	85 c0		 test	 eax, eax
  0067d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00683	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00687	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0068d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00693	83 e9 22	 sub	 ecx, 34			; 00000022H
  00696	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0069c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  006a3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  006a9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  006af	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  006b6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  006bd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  006c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006cc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  006d1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  006d6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  006e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006e5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  006ea	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  006ef	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  006f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006fe	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00703	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00708	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00717	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0071c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00721	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0072b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00730	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00735	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0073a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0073f	50		 push	 eax
  00740	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00744	51		 push	 ecx
  00745	e8 00 00 00 00	 call	 _ungetc
  0074a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0074d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00750	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00753	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00758	50		 push	 eax
  00759	e8 00 00 00 00	 call	 _getc
  0075e	83 c4 04	 add	 esp, 4
  00761	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00764	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00768	83 f9 ff	 cmp	 ecx, -1
  0076b	74 36		 je	 SHORT $LN12@GetToken
  0076d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00771	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00774	74 1a		 je	 SHORT $LN11@GetToken
  00776	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0077a	50		 push	 eax
  0077b	e8 00 00 00 00	 call	 _isdigit
  00780	83 c4 04	 add	 esp, 4
  00783	85 c0		 test	 eax, eax
  00785	75 09		 jne	 SHORT $LN11@GetToken
  00787	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0078b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0078e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00790	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00793	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00796	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00798	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0079b	83 c0 01	 add	 eax, 1
  0079e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  007a1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  007a3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  007a9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  007ac	50		 push	 eax
  007ad	e8 00 00 00 00	 call	 _atof
  007b2	83 c4 04	 add	 esp, 4
  007b5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  007bb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  007c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007ca	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  007cf	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  007d4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  007db	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007e0	50		 push	 eax
  007e1	e8 00 00 00 00	 call	 _getc
  007e6	83 c4 04	 add	 esp, 4
  007e9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  007ec	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007f0	83 f9 ff	 cmp	 ecx, -1
  007f3	74 1c		 je	 SHORT $LN8@GetToken
  007f5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007f9	83 f8 22	 cmp	 eax, 34			; 00000022H
  007fc	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  007fe	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00801	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00804	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00806	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00809	83 c0 01	 add	 eax, 1
  0080c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0080f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00811	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00815	83 f8 22	 cmp	 eax, 34			; 00000022H
  00818	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0081a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0081f	50		 push	 eax
  00820	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00824	51		 push	 ecx
  00825	e8 00 00 00 00	 call	 _ungetc
  0082a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0082d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00830	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00833	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0083d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00842	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00847	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0084c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00850	50		 push	 eax
  00851	e8 00 00 00 00	 call	 _isalpha
  00856	83 c4 04	 add	 esp, 4
  00859	85 c0		 test	 eax, eax
  0085b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00861	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00868	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0086b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0086e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00870	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00873	83 c0 01	 add	 eax, 1
  00876	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00879	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0087e	50		 push	 eax
  0087f	e8 00 00 00 00	 call	 _getc
  00884	83 c4 04	 add	 esp, 4
  00887	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0088a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0088e	83 f9 ff	 cmp	 ecx, -1
  00891	74 36		 je	 SHORT $LN3@GetToken
  00893	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00897	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0089a	74 1a		 je	 SHORT $LN2@GetToken
  0089c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008a0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  008a3	74 11		 je	 SHORT $LN2@GetToken
  008a5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008a9	50		 push	 eax
  008aa	e8 00 00 00 00	 call	 _isalnum
  008af	83 c4 04	 add	 esp, 4
  008b2	85 c0		 test	 eax, eax
  008b4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  008b6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008b9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  008bc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  008be	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008c1	83 c0 01	 add	 eax, 1
  008c4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  008c7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  008c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008ce	50		 push	 eax
  008cf	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008d3	51		 push	 ecx
  008d4	e8 00 00 00 00	 call	 _ungetc
  008d9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  008dc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008df	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  008e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  008ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008f1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  008f3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  008f5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  008ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00904	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00906	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00908	5f		 pop	 edi
  00909	5e		 pop	 esi
  0090a	5b		 pop	 ebx
  0090b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0090e	33 cd		 xor	 ecx, ebp
  00910	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00915	8b e5		 mov	 esp, ebp
  00917	5d		 pop	 ebp
  00918	c3		 ret	 0
  00919	8d 49 00	 npad	 3
$LN35@GetToken:
  0091c	00 00 00 00	 DD	 $LN10@GetToken
  00920	00 00 00 00	 DD	 $LN19@GetToken
  00924	00 00 00 00	 DD	 $LN17@GetToken
  00928	00 00 00 00	 DD	 $LN14@GetToken
  0092c	00 00 00 00	 DD	 $LN18@GetToken
  00930	00 00 00 00	 DD	 $LN16@GetToken
  00934	00 00 00 00	 DD	 $LN15@GetToken
  00938	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0093c	00		 DB	 0
  0093d	01		 DB	 1
  0093e	07		 DB	 7
  0093f	07		 DB	 7
  00940	07		 DB	 7
  00941	07		 DB	 7
  00942	07		 DB	 7
  00943	07		 DB	 7
  00944	07		 DB	 7
  00945	07		 DB	 7
  00946	02		 DB	 2
  00947	03		 DB	 3
  00948	03		 DB	 3
  00949	07		 DB	 7
  0094a	03		 DB	 3
  0094b	03		 DB	 3
  0094c	03		 DB	 3
  0094d	03		 DB	 3
  0094e	03		 DB	 3
  0094f	03		 DB	 3
  00950	03		 DB	 3
  00951	03		 DB	 3
  00952	03		 DB	 3
  00953	03		 DB	 3
  00954	07		 DB	 7
  00955	04		 DB	 4
  00956	07		 DB	 7
  00957	07		 DB	 7
  00958	07		 DB	 7
  00959	07		 DB	 7
  0095a	07		 DB	 7
  0095b	07		 DB	 7
  0095c	07		 DB	 7
  0095d	07		 DB	 7
  0095e	07		 DB	 7
  0095f	07		 DB	 7
  00960	07		 DB	 7
  00961	07		 DB	 7
  00962	07		 DB	 7
  00963	07		 DB	 7
  00964	07		 DB	 7
  00965	07		 DB	 7
  00966	07		 DB	 7
  00967	07		 DB	 7
  00968	07		 DB	 7
  00969	07		 DB	 7
  0096a	07		 DB	 7
  0096b	07		 DB	 7
  0096c	07		 DB	 7
  0096d	07		 DB	 7
  0096e	07		 DB	 7
  0096f	07		 DB	 7
  00970	07		 DB	 7
  00971	07		 DB	 7
  00972	07		 DB	 7
  00973	07		 DB	 7
  00974	07		 DB	 7
  00975	07		 DB	 7
  00976	07		 DB	 7
  00977	07		 DB	 7
  00978	07		 DB	 7
  00979	07		 DB	 7
  0097a	07		 DB	 7
  0097b	07		 DB	 7
  0097c	07		 DB	 7
  0097d	07		 DB	 7
  0097e	07		 DB	 7
  0097f	07		 DB	 7
  00980	07		 DB	 7
  00981	07		 DB	 7
  00982	07		 DB	 7
  00983	07		 DB	 7
  00984	07		 DB	 7
  00985	07		 DB	 7
  00986	07		 DB	 7
  00987	07		 DB	 7
  00988	07		 DB	 7
  00989	07		 DB	 7
  0098a	07		 DB	 7
  0098b	07		 DB	 7
  0098c	07		 DB	 7
  0098d	07		 DB	 7
  0098e	07		 DB	 7
  0098f	07		 DB	 7
  00990	07		 DB	 7
  00991	07		 DB	 7
  00992	07		 DB	 7
  00993	07		 DB	 7
  00994	07		 DB	 7
  00995	05		 DB	 5
  00996	07		 DB	 7
  00997	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0DM@BFBHLGFI@?$FLMonster?5AI?5Group?$FN?5ChangeAIOrder@ ; `string'
PUBLIC	?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z		; TMonsterAIGroup::ChangeAIOrder
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0DM@BFBHLGFI@?$FLMonster?5AI?5Group?$FN?5ChangeAIOrder@
; File d:\projects\exteam6.3\source\gameserver\gameserver\tmonsteraigroup.cpp
CONST	SEGMENT
??_C@_0DM@BFBHLGFI@?$FLMonster?5AI?5Group?$FN?5ChangeAIOrder@ DB '[Monste'
	DB	'r AI Group] ChangeAIOrder() Error - (GroupNumber=%d)', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_j$227236 = -8						; size = 4
_lpMemb$ = -4						; size = 4
_iGroupNumber$ = 8					; size = 4
_iAIOrder$ = 12						; size = 4
?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z PROC		; TMonsterAIGroup::ChangeAIOrder

; 186  : {

  009a0	55		 push	 ebp
  009a1	8b ec		 mov	 ebp, esp
  009a3	83 ec 48	 sub	 esp, 72			; 00000048H
  009a6	53		 push	 ebx
  009a7	56		 push	 esi
  009a8	57		 push	 edi

; 187  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  009a9	83 7d 08 00	 cmp	 DWORD PTR _iGroupNumber$[ebp], 0
  009ad	7c 06		 jl	 SHORT $LN12@ChangeAIOr
  009af	83 7d 08 64	 cmp	 DWORD PTR _iGroupNumber$[ebp], 100 ; 00000064H
  009b3	7c 17		 jl	 SHORT $LN13@ChangeAIOr
$LN12@ChangeAIOr:

; 188  : 	{
; 189  : 		LogAddTD("[Monster AI Group] ChangeAIOrder() Error - (GroupNumber=%d)", iGroupNumber);

  009b5	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  009b8	50		 push	 eax
  009b9	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@BFBHLGFI@?$FLMonster?5AI?5Group?$FN?5ChangeAIOrder@
  009be	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  009c4	83 c4 08	 add	 esp, 8

; 190  : 		return;

  009c7	e9 75 01 00 00	 jmp	 $LN14@ChangeAIOr
$LN13@ChangeAIOr:

; 191  : 	}
; 192  : 
; 193  : 	TMonsterAIGroupMember * lpMemb = NULL;

  009cc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _lpMemb$[ebp], 0

; 194  : 
; 195  : 	for ( int j=0;j<TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];j++)

  009d3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$227236[ebp], 0
  009da	eb 09		 jmp	 SHORT $LN11@ChangeAIOr
$LN10@ChangeAIOr:
  009dc	8b 45 f8	 mov	 eax, DWORD PTR _j$227236[ebp]
  009df	83 c0 01	 add	 eax, 1
  009e2	89 45 f8	 mov	 DWORD PTR _j$227236[ebp], eax
$LN11@ChangeAIOr:
  009e5	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  009e8	8b 4d f8	 mov	 ecx, DWORD PTR _j$227236[ebp]
  009eb	3b 0c 85 00 00
	00 00		 cmp	 ecx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4]
  009f2	0f 8d 49 01 00
	00		 jge	 $LN14@ChangeAIOr

; 196  : 	{
; 197  : 		lpMemb = &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][j];

  009f8	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  009fb	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00a01	8b 4d f8	 mov	 ecx, DWORD PTR _j$227236[ebp]
  00a04	c1 e1 06	 shl	 ecx, 6
  00a07	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx]
  00a0e	89 55 fc	 mov	 DWORD PTR _lpMemb$[ebp], edx

; 198  : 
; 199  : 		if ( lpMemb->m_iGroupNumber == iGroupNumber )

  00a11	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00a14	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00a17	3b 4d 08	 cmp	 ecx, DWORD PTR _iGroupNumber$[ebp]
  00a1a	0f 85 1c 01 00
	00		 jne	 $LN8@ChangeAIOr

; 200  : 		{
; 201  : 			if ( iAIOrder == 0 )

  00a20	83 7d 0c 00	 cmp	 DWORD PTR _iAIOrder$[ebp], 0
  00a24	75 43		 jne	 SHORT $LN7@ChangeAIOr

; 202  : 			{
; 203  : 				gObj[lpMemb->m_iObjIndex].m_iBasicAI = lpMemb->m_iStartAI;

  00a26	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00a29	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00a2c	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00a32	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00a38	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00a3b	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00a3e	89 84 0a 74 1c
	00 00		 mov	 DWORD PTR [edx+ecx+7284], eax

; 204  : 				gObj[lpMemb->m_iObjIndex].m_iCurrentAI = lpMemb->m_iStartAI;

  00a45	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00a48	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00a4b	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00a51	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00a57	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00a5a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00a5d	89 84 0a 78 1c
	00 00		 mov	 DWORD PTR [edx+ecx+7288], eax
  00a64	e9 d3 00 00 00	 jmp	 $LN8@ChangeAIOr
$LN7@ChangeAIOr:

; 205  : 			}
; 206  : 			else if (iAIOrder == 1 )

  00a69	83 7d 0c 01	 cmp	 DWORD PTR _iAIOrder$[ebp], 1
  00a6d	75 43		 jne	 SHORT $LN5@ChangeAIOr

; 207  : 			{
; 208  : 				gObj[lpMemb->m_iObjIndex].m_iBasicAI = lpMemb->m_iAI01;

  00a6f	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00a72	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00a75	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00a7b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00a81	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00a84	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00a87	89 84 0a 74 1c
	00 00		 mov	 DWORD PTR [edx+ecx+7284], eax

; 209  : 				gObj[lpMemb->m_iObjIndex].m_iCurrentAI = lpMemb->m_iAI01;

  00a8e	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00a91	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00a94	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00a9a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00aa0	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00aa3	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00aa6	89 84 0a 78 1c
	00 00		 mov	 DWORD PTR [edx+ecx+7288], eax
  00aad	e9 8a 00 00 00	 jmp	 $LN8@ChangeAIOr
$LN5@ChangeAIOr:

; 210  : 			}
; 211  : 			else if (iAIOrder == 2 )

  00ab2	83 7d 0c 02	 cmp	 DWORD PTR _iAIOrder$[ebp], 2
  00ab6	75 40		 jne	 SHORT $LN3@ChangeAIOr

; 212  : 			{
; 213  : 				gObj[lpMemb->m_iObjIndex].m_iBasicAI = lpMemb->m_iAI02;

  00ab8	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00abb	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00abe	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00ac4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00aca	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00acd	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00ad0	89 84 0a 74 1c
	00 00		 mov	 DWORD PTR [edx+ecx+7284], eax

; 214  : 				gObj[lpMemb->m_iObjIndex].m_iCurrentAI = lpMemb->m_iAI02;

  00ad7	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00ada	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00add	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00ae3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00ae9	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00aec	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00aef	89 84 0a 78 1c
	00 00		 mov	 DWORD PTR [edx+ecx+7288], eax
  00af6	eb 44		 jmp	 SHORT $LN8@ChangeAIOr
$LN3@ChangeAIOr:

; 215  : 			}
; 216  : 			else if (iAIOrder == 3 )

  00af8	83 7d 0c 03	 cmp	 DWORD PTR _iAIOrder$[ebp], 3
  00afc	75 3e		 jne	 SHORT $LN8@ChangeAIOr

; 217  : 			{
; 218  : 				gObj[lpMemb->m_iObjIndex].m_iBasicAI = lpMemb->m_iAI03;

  00afe	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00b01	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00b04	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00b0a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00b10	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00b13	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00b16	89 84 0a 74 1c
	00 00		 mov	 DWORD PTR [edx+ecx+7284], eax

; 219  : 				gObj[lpMemb->m_iObjIndex].m_iCurrentAI = lpMemb->m_iAI03;

  00b1d	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00b20	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00b23	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00b29	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00b2f	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00b32	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00b35	89 84 0a 78 1c
	00 00		 mov	 DWORD PTR [edx+ecx+7288], eax
$LN8@ChangeAIOr:

; 220  : 			}
; 221  : 		}		
; 222  : 	}

  00b3c	e9 9b fe ff ff	 jmp	 $LN10@ChangeAIOr
$LN14@ChangeAIOr:

; 223  : }

  00b41	5f		 pop	 edi
  00b42	5e		 pop	 esi
  00b43	5b		 pop	 ebx
  00b44	8b e5		 mov	 esp, ebp
  00b46	5d		 pop	 ebp
  00b47	c3		 ret	 0
?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ENDP		; TMonsterAIGroup::ChangeAIOrder
_TEXT	ENDS
PUBLIC	??_C@_0DH@OJFKHKGJ@?$FLMonster?5AI?5Group?$FN?5DelGroup?$CI?$CJ?5Er@ ; `string'
PUBLIC	?DelGroupInstance@TMonsterAIGroup@@SAHH@Z	; TMonsterAIGroup::DelGroupInstance
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
;	COMDAT ??_C@_0DH@OJFKHKGJ@?$FLMonster?5AI?5Group?$FN?5DelGroup?$CI?$CJ?5Er@
CONST	SEGMENT
??_C@_0DH@OJFKHKGJ@?$FLMonster?5AI?5Group?$FN?5DelGroup?$CI?$CJ?5Er@ DB '['
	DB	'Monster AI Group] DelGroup() Error - (GroupNumber=%d)', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_j$227255 = -8						; size = 4
_lpMemb$ = -4						; size = 4
_iGroupNumber$ = 8					; size = 4
?DelGroupInstance@TMonsterAIGroup@@SAHH@Z PROC		; TMonsterAIGroup::DelGroupInstance

; 229  : {

  00b50	55		 push	 ebp
  00b51	8b ec		 mov	 ebp, esp
  00b53	83 ec 48	 sub	 esp, 72			; 00000048H
  00b56	53		 push	 ebx
  00b57	56		 push	 esi
  00b58	57		 push	 edi

; 230  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  00b59	83 7d 08 00	 cmp	 DWORD PTR _iGroupNumber$[ebp], 0
  00b5d	7c 06		 jl	 SHORT $LN6@DelGroupIn
  00b5f	83 7d 08 64	 cmp	 DWORD PTR _iGroupNumber$[ebp], 100 ; 00000064H
  00b63	7c 16		 jl	 SHORT $LN7@DelGroupIn
$LN6@DelGroupIn:

; 231  : 	{
; 232  : 		LogAddTD("[Monster AI Group] DelGroup() Error - (GroupNumber=%d)", iGroupNumber);

  00b65	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00b68	50		 push	 eax
  00b69	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OJFKHKGJ@?$FLMonster?5AI?5Group?$FN?5DelGroup?$CI?$CJ?5Er@
  00b6e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00b74	83 c4 08	 add	 esp, 8

; 233  : 		return FALSE;

  00b77	33 c0		 xor	 eax, eax
  00b79	eb 68		 jmp	 SHORT $LN8@DelGroupIn
$LN7@DelGroupIn:

; 234  : 	}
; 235  : 
; 236  : 	TMonsterAIGroupMember * lpMemb = NULL;

  00b7b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _lpMemb$[ebp], 0

; 237  : 
; 238  : 	for ( int j=0;j<TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];j++)

  00b82	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$227255[ebp], 0
  00b89	eb 09		 jmp	 SHORT $LN5@DelGroupIn
$LN4@DelGroupIn:
  00b8b	8b 45 f8	 mov	 eax, DWORD PTR _j$227255[ebp]
  00b8e	83 c0 01	 add	 eax, 1
  00b91	89 45 f8	 mov	 DWORD PTR _j$227255[ebp], eax
$LN5@DelGroupIn:
  00b94	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00b97	8b 4d f8	 mov	 ecx, DWORD PTR _j$227255[ebp]
  00b9a	3b 0c 85 00 00
	00 00		 cmp	 ecx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4]
  00ba1	7d 3e		 jge	 SHORT $LN3@DelGroupIn

; 239  : 	{
; 240  : 		lpMemb = &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][j];

  00ba3	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00ba6	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00bac	8b 4d f8	 mov	 ecx, DWORD PTR _j$227255[ebp]
  00baf	c1 e1 06	 shl	 ecx, 6
  00bb2	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx]
  00bb9	89 55 fc	 mov	 DWORD PTR _lpMemb$[ebp], edx

; 241  : 
; 242  : 		if ( lpMemb->m_iGroupNumber == iGroupNumber )

  00bbc	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00bbf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00bc2	3b 4d 08	 cmp	 ecx, DWORD PTR _iGroupNumber$[ebp]
  00bc5	75 18		 jne	 SHORT $LN2@DelGroupIn

; 243  : 		{
; 244  : 			if ( lpMemb->m_iObjIndex != -1 )

  00bc7	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00bca	83 78 3c ff	 cmp	 DWORD PTR [eax+60], -1
  00bce	74 0f		 je	 SHORT $LN2@DelGroupIn

; 245  : 			{
; 246  : 				gObjDel(lpMemb->m_iObjIndex);

  00bd0	8b 45 fc	 mov	 eax, DWORD PTR _lpMemb$[ebp]
  00bd3	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00bd6	51		 push	 ecx
  00bd7	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00bdc	83 c4 04	 add	 esp, 4
$LN2@DelGroupIn:

; 247  : 			}
; 248  : 		}
; 249  : 	}

  00bdf	eb aa		 jmp	 SHORT $LN4@DelGroupIn
$LN3@DelGroupIn:

; 250  : 
; 251  : 	return FALSE;

  00be1	33 c0		 xor	 eax, eax
$LN8@DelGroupIn:

; 252  : }

  00be3	5f		 pop	 edi
  00be4	5e		 pop	 esi
  00be5	5b		 pop	 ebx
  00be6	8b e5		 mov	 esp, ebp
  00be8	5d		 pop	 ebp
  00be9	c3		 ret	 0
?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ENDP		; TMonsterAIGroup::DelGroupInstance
_TEXT	ENDS
EXTRN	?Reset@TMonsterAIGroupMember@@QAEXXZ:PROC	; TMonsterAIGroupMember::Reset
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_j$227267 = -8						; size = 4
_i$227263 = -4						; size = 4
?DelAllGroupInfo@TMonsterAIGroup@@SAHXZ PROC		; TMonsterAIGroup::DelAllGroupInfo

; 259  : {

  00bf0	55		 push	 ebp
  00bf1	8b ec		 mov	 ebp, esp
  00bf3	83 ec 48	 sub	 esp, 72			; 00000048H
  00bf6	53		 push	 ebx
  00bf7	56		 push	 esi
  00bf8	57		 push	 edi

; 260  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP;i++)

  00bf9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$227263[ebp], 0
  00c00	eb 09		 jmp	 SHORT $LN6@DelAllGrou
$LN5@DelAllGrou:
  00c02	8b 45 fc	 mov	 eax, DWORD PTR _i$227263[ebp]
  00c05	83 c0 01	 add	 eax, 1
  00c08	89 45 fc	 mov	 DWORD PTR _i$227263[ebp], eax
$LN6@DelAllGrou:
  00c0b	83 7d fc 64	 cmp	 DWORD PTR _i$227263[ebp], 100 ; 00000064H
  00c0f	7d 48		 jge	 SHORT $LN4@DelAllGrou

; 261  : 	{
; 262  : 		for ( int j=0;j<MAX_MONSTER_AI_GROUP_MEMBER;j++)

  00c11	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$227267[ebp], 0
  00c18	eb 09		 jmp	 SHORT $LN3@DelAllGrou
$LN2@DelAllGrou:
  00c1a	8b 45 f8	 mov	 eax, DWORD PTR _j$227267[ebp]
  00c1d	83 c0 01	 add	 eax, 1
  00c20	89 45 f8	 mov	 DWORD PTR _j$227267[ebp], eax
$LN3@DelAllGrou:
  00c23	81 7d f8 c8 00
	00 00		 cmp	 DWORD PTR _j$227267[ebp], 200 ; 000000c8H
  00c2a	7d 1d		 jge	 SHORT $LN1@DelAllGrou

; 263  : 		{
; 264  : 			TMonsterAIGroup::s_MonsterAIGroupMemberArray[i][j].Reset();

  00c2c	8b 45 fc	 mov	 eax, DWORD PTR _i$227263[ebp]
  00c2f	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00c35	8b 4d f8	 mov	 ecx, DWORD PTR _j$227267[ebp]
  00c38	c1 e1 06	 shl	 ecx, 6
  00c3b	8d 8c 08 00 00
	00 00		 lea	 ecx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx]
  00c42	e8 00 00 00 00	 call	 ?Reset@TMonsterAIGroupMember@@QAEXXZ ; TMonsterAIGroupMember::Reset

; 265  : 		}

  00c47	eb d1		 jmp	 SHORT $LN2@DelAllGrou
$LN1@DelAllGrou:

; 266  : 
; 267  : 		TMonsterAIGroup::s_iMonsterAIGroupMemberCount[i] = 0;

  00c49	8b 45 fc	 mov	 eax, DWORD PTR _i$227263[ebp]
  00c4c	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4], 0

; 268  : 	}

  00c57	eb a9		 jmp	 SHORT $LN5@DelAllGrou
$LN4@DelAllGrou:

; 269  : 
; 270  : 	TMonsterAIGroup::s_bDataLoad = FALSE;

  00c59	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIGroup@@2HA, 0 ; TMonsterAIGroup::s_bDataLoad

; 271  : 	return FALSE;

  00c63	33 c0		 xor	 eax, eax

; 272  : }

  00c65	5f		 pop	 edi
  00c66	5e		 pop	 esi
  00c67	5b		 pop	 ebx
  00c68	8b e5		 mov	 esp, ebp
  00c6a	5d		 pop	 ebp
  00c6b	c3		 ret	 0
?DelAllGroupInfo@TMonsterAIGroup@@SAHXZ ENDP		; TMonsterAIGroup::DelAllGroupInfo
_TEXT	ENDS
PUBLIC	??_C@_0DO@JGGBMAIA@?$FLMonster?5AI?5Group?$FN?5FindGroupLead@ ; `string'
PUBLIC	?FindGroupLeader@TMonsterAIGroup@@SAHH@Z	; TMonsterAIGroup::FindGroupLeader
;	COMDAT ??_C@_0DO@JGGBMAIA@?$FLMonster?5AI?5Group?$FN?5FindGroupLead@
CONST	SEGMENT
??_C@_0DO@JGGBMAIA@?$FLMonster?5AI?5Group?$FN?5FindGroupLead@ DB '[Monste'
	DB	'r AI Group] FindGroupLeader() Error - (GroupNumber=%d)', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$227277 = -4						; size = 4
_iGroupNumber$ = 8					; size = 4
?FindGroupLeader@TMonsterAIGroup@@SAHH@Z PROC		; TMonsterAIGroup::FindGroupLeader

; 276  : {

  00c70	55		 push	 ebp
  00c71	8b ec		 mov	 ebp, esp
  00c73	83 ec 44	 sub	 esp, 68			; 00000044H
  00c76	53		 push	 ebx
  00c77	56		 push	 esi
  00c78	57		 push	 edi

; 277  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  00c79	83 7d 08 00	 cmp	 DWORD PTR _iGroupNumber$[ebp], 0
  00c7d	7c 06		 jl	 SHORT $LN5@FindGroupL
  00c7f	83 7d 08 64	 cmp	 DWORD PTR _iGroupNumber$[ebp], 100 ; 00000064H
  00c83	7c 16		 jl	 SHORT $LN6@FindGroupL
$LN5@FindGroupL:

; 278  : 	{
; 279  : 		LogAddTD("[Monster AI Group] FindGroupLeader() Error - (GroupNumber=%d)", iGroupNumber);

  00c85	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00c88	50		 push	 eax
  00c89	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@JGGBMAIA@?$FLMonster?5AI?5Group?$FN?5FindGroupLead@
  00c8e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00c94	83 c4 08	 add	 esp, 8

; 280  : 		return 0;

  00c97	33 c0		 xor	 eax, eax
  00c99	eb 51		 jmp	 SHORT $LN7@FindGroupL
$LN6@FindGroupL:

; 281  : 	}
; 282  : 
; 283  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP_MEMBER;i++)

  00c9b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$227277[ebp], 0
  00ca2	eb 09		 jmp	 SHORT $LN4@FindGroupL
$LN3@FindGroupL:
  00ca4	8b 45 fc	 mov	 eax, DWORD PTR _i$227277[ebp]
  00ca7	83 c0 01	 add	 eax, 1
  00caa	89 45 fc	 mov	 DWORD PTR _i$227277[ebp], eax
$LN4@FindGroupL:
  00cad	81 7d fc c8 00
	00 00		 cmp	 DWORD PTR _i$227277[ebp], 200 ; 000000c8H
  00cb4	7d 33		 jge	 SHORT $LN2@FindGroupL

; 284  : 	{
; 285  : 		if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iRank == 0 )

  00cb6	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00cb9	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00cbf	8b 4d fc	 mov	 ecx, DWORD PTR _i$227277[ebp]
  00cc2	c1 e1 06	 shl	 ecx, 6
  00cc5	83 bc 08 10 00
	00 00 00	 cmp	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+16], 0
  00ccd	75 18		 jne	 SHORT $LN1@FindGroupL

; 286  : 		{
; 287  : 			return TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iObjIndex;

  00ccf	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00cd2	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00cd8	8b 4d fc	 mov	 ecx, DWORD PTR _i$227277[ebp]
  00cdb	c1 e1 06	 shl	 ecx, 6
  00cde	8b 84 08 3c 00
	00 00		 mov	 eax, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+60]
  00ce5	eb 05		 jmp	 SHORT $LN7@FindGroupL
$LN1@FindGroupL:

; 288  : 		}
; 289  : 	}

  00ce7	eb bb		 jmp	 SHORT $LN3@FindGroupL
$LN2@FindGroupL:

; 290  : 
; 291  : 	return -1;

  00ce9	83 c8 ff	 or	 eax, -1
$LN7@FindGroupL:

; 292  : }

  00cec	5f		 pop	 edi
  00ced	5e		 pop	 esi
  00cee	5b		 pop	 ebx
  00cef	8b e5		 mov	 esp, ebp
  00cf1	5d		 pop	 ebp
  00cf2	c3		 ret	 0
?FindGroupLeader@TMonsterAIGroup@@SAHH@Z ENDP		; TMonsterAIGroup::FindGroupLeader
_TEXT	ENDS
PUBLIC	??_C@_0FB@IIFMNKGF@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@ ; `string'
PUBLIC	?FindGroupMemberObjectIndex@TMonsterAIGroup@@SAHHH@Z ; TMonsterAIGroup::FindGroupMemberObjectIndex
;	COMDAT ??_C@_0FB@IIFMNKGF@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
CONST	SEGMENT
??_C@_0FB@IIFMNKGF@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@ DB '[Monste'
	DB	'r AI Group] FindGroupMemberObjectIndex() Error - (GroupNumber'
	DB	'=%d Guid=%d)', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$227289 = -4						; size = 4
_iGroupNumber$ = 8					; size = 4
_iGuid$ = 12						; size = 4
?FindGroupMemberObjectIndex@TMonsterAIGroup@@SAHHH@Z PROC ; TMonsterAIGroup::FindGroupMemberObjectIndex

; 298  : {

  00d00	55		 push	 ebp
  00d01	8b ec		 mov	 ebp, esp
  00d03	83 ec 44	 sub	 esp, 68			; 00000044H
  00d06	53		 push	 ebx
  00d07	56		 push	 esi
  00d08	57		 push	 edi

; 299  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  00d09	83 7d 08 00	 cmp	 DWORD PTR _iGroupNumber$[ebp], 0
  00d0d	7c 06		 jl	 SHORT $LN5@FindGroupM
  00d0f	83 7d 08 64	 cmp	 DWORD PTR _iGroupNumber$[ebp], 100 ; 00000064H
  00d13	7c 1a		 jl	 SHORT $LN6@FindGroupM
$LN5@FindGroupM:

; 300  : 	{
; 301  : 		LogAddTD("[Monster AI Group] FindGroupMemberObjectIndex() Error - (GroupNumber=%d Guid=%d)", iGroupNumber, iGuid);

  00d15	8b 45 0c	 mov	 eax, DWORD PTR _iGuid$[ebp]
  00d18	50		 push	 eax
  00d19	8b 4d 08	 mov	 ecx, DWORD PTR _iGroupNumber$[ebp]
  00d1c	51		 push	 ecx
  00d1d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IIFMNKGF@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
  00d22	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00d28	83 c4 0c	 add	 esp, 12			; 0000000cH

; 302  : 		return 0;

  00d2b	33 c0		 xor	 eax, eax
  00d2d	eb 53		 jmp	 SHORT $LN7@FindGroupM
$LN6@FindGroupM:

; 303  : 	}
; 304  : 
; 305  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP_MEMBER;i++)

  00d2f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$227289[ebp], 0
  00d36	eb 09		 jmp	 SHORT $LN4@FindGroupM
$LN3@FindGroupM:
  00d38	8b 45 fc	 mov	 eax, DWORD PTR _i$227289[ebp]
  00d3b	83 c0 01	 add	 eax, 1
  00d3e	89 45 fc	 mov	 DWORD PTR _i$227289[ebp], eax
$LN4@FindGroupM:
  00d41	81 7d fc c8 00
	00 00		 cmp	 DWORD PTR _i$227289[ebp], 200 ; 000000c8H
  00d48	7d 35		 jge	 SHORT $LN2@FindGroupM

; 306  : 	{
; 307  : 		if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iGuid == iGuid )

  00d4a	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00d4d	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00d53	8b 4d fc	 mov	 ecx, DWORD PTR _i$227289[ebp]
  00d56	c1 e1 06	 shl	 ecx, 6
  00d59	8b 94 08 08 00
	00 00		 mov	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+8]
  00d60	3b 55 0c	 cmp	 edx, DWORD PTR _iGuid$[ebp]
  00d63	75 18		 jne	 SHORT $LN1@FindGroupM

; 308  : 		{
; 309  : 			return TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iObjIndex;

  00d65	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00d68	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00d6e	8b 4d fc	 mov	 ecx, DWORD PTR _i$227289[ebp]
  00d71	c1 e1 06	 shl	 ecx, 6
  00d74	8b 84 08 3c 00
	00 00		 mov	 eax, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+60]
  00d7b	eb 05		 jmp	 SHORT $LN7@FindGroupM
$LN1@FindGroupM:

; 310  : 		}
; 311  : 	}

  00d7d	eb b9		 jmp	 SHORT $LN3@FindGroupM
$LN2@FindGroupM:

; 312  : 
; 313  : 	return -1;

  00d7f	83 c8 ff	 or	 eax, -1
$LN7@FindGroupM:

; 314  : }

  00d82	5f		 pop	 edi
  00d83	5e		 pop	 esi
  00d84	5b		 pop	 ebx
  00d85	8b e5		 mov	 esp, ebp
  00d87	5d		 pop	 ebp
  00d88	c3		 ret	 0
?FindGroupMemberObjectIndex@TMonsterAIGroup@@SAHHH@Z ENDP ; TMonsterAIGroup::FindGroupMemberObjectIndex
_TEXT	ENDS
PUBLIC	??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@ ; `string'
PUBLIC	?FindGroupMember@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HH@Z ; TMonsterAIGroup::FindGroupMember
;	COMDAT ??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
CONST	SEGMENT
??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@ DB '[Monste'
	DB	'r AI Group] FindGroupMember() Error - (GroupNumber=%d)(Guid=%'
	DB	'd) ', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iGroupNumber$ = 8					; size = 4
_iGuid$ = 12						; size = 4
?FindGroupMember@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HH@Z PROC ; TMonsterAIGroup::FindGroupMember

; 320  : {

  00d90	55		 push	 ebp
  00d91	8b ec		 mov	 ebp, esp
  00d93	83 ec 40	 sub	 esp, 64			; 00000040H
  00d96	53		 push	 ebx
  00d97	56		 push	 esi
  00d98	57		 push	 edi

; 321  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  00d99	83 7d 08 00	 cmp	 DWORD PTR _iGroupNumber$[ebp], 0
  00d9d	7c 06		 jl	 SHORT $LN2@FindGroupM@2
  00d9f	83 7d 08 64	 cmp	 DWORD PTR _iGroupNumber$[ebp], 100 ; 00000064H
  00da3	7c 1a		 jl	 SHORT $LN3@FindGroupM@2
$LN2@FindGroupM@2:

; 322  : 	{
; 323  : 		LogAddTD("[Monster AI Group] FindGroupMember() Error - (GroupNumber=%d)(Guid=%d) ", iGroupNumber, iGuid);

  00da5	8b 45 0c	 mov	 eax, DWORD PTR _iGuid$[ebp]
  00da8	50		 push	 eax
  00da9	8b 4d 08	 mov	 ecx, DWORD PTR _iGroupNumber$[ebp]
  00dac	51		 push	 ecx
  00dad	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
  00db2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00db8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 324  : 		return NULL;

  00dbb	33 c0		 xor	 eax, eax
  00dbd	eb 66		 jmp	 SHORT $LN4@FindGroupM@2
$LN3@FindGroupM@2:

; 325  : 	}
; 326  : 
; 327  : 	if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iGroupNumber == iGroupNumber &&
; 328  : 		 TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iGuid == iGuid )

  00dbf	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00dc2	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00dc8	8b 4d 0c	 mov	 ecx, DWORD PTR _iGuid$[ebp]
  00dcb	c1 e1 06	 shl	 ecx, 6
  00dce	8b 94 08 04 00
	00 00		 mov	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+4]
  00dd5	3b 55 08	 cmp	 edx, DWORD PTR _iGroupNumber$[ebp]
  00dd8	75 33		 jne	 SHORT $LN1@FindGroupM@2
  00dda	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00ddd	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00de3	8b 4d 0c	 mov	 ecx, DWORD PTR _iGuid$[ebp]
  00de6	c1 e1 06	 shl	 ecx, 6
  00de9	8b 94 08 08 00
	00 00		 mov	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+8]
  00df0	3b 55 0c	 cmp	 edx, DWORD PTR _iGuid$[ebp]
  00df3	75 18		 jne	 SHORT $LN1@FindGroupM@2

; 329  : 	{
; 330  : 		return &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid];

  00df5	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00df8	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00dfe	8b 4d 0c	 mov	 ecx, DWORD PTR _iGuid$[ebp]
  00e01	c1 e1 06	 shl	 ecx, 6
  00e04	8d 84 08 00 00
	00 00		 lea	 eax, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx]
  00e0b	eb 18		 jmp	 SHORT $LN4@FindGroupM@2
$LN1@FindGroupM@2:

; 331  : 	}
; 332  : 
; 333  : 	LogAddTD("[Monster AI Group] FindGroupMember() Error - (GroupNumber=%d)(Guid=%d) ", iGroupNumber, iGuid);

  00e0d	8b 45 0c	 mov	 eax, DWORD PTR _iGuid$[ebp]
  00e10	50		 push	 eax
  00e11	8b 4d 08	 mov	 ecx, DWORD PTR _iGroupNumber$[ebp]
  00e14	51		 push	 ecx
  00e15	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
  00e1a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00e20	83 c4 0c	 add	 esp, 12			; 0000000cH

; 334  : 
; 335  : 	return NULL;

  00e23	33 c0		 xor	 eax, eax
$LN4@FindGroupM@2:

; 336  : }

  00e25	5f		 pop	 edi
  00e26	5e		 pop	 esi
  00e27	5b		 pop	 ebx
  00e28	8b e5		 mov	 esp, ebp
  00e2a	5d		 pop	 ebp
  00e2b	c3		 ret	 0
?FindGroupMember@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HH@Z ENDP ; TMonsterAIGroup::FindGroupMember
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	?FindGroupMemberToHeal@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHHH@Z ; TMonsterAIGroup::FindGroupMemberToHeal
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iPercentHP$227322 = -28				; size = 4
_iMaxLife$227320 = -24					; size = 4
_lpTargetObj$227317 = -20				; size = 4
_i$227312 = -16						; size = 4
_iCount$ = -12						; size = 4
_iMinHP$ = -8						; size = 4
_iMinHPGuid$ = -4					; size = 4
_iObjIndex$ = 8						; size = 4
_iGroupNumber$ = 12					; size = 4
_iGuid$ = 16						; size = 4
_iDistance$ = 20					; size = 4
?FindGroupMemberToHeal@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHHH@Z PROC ; TMonsterAIGroup::FindGroupMemberToHeal

; 341  : {

  00e30	55		 push	 ebp
  00e31	8b ec		 mov	 ebp, esp
  00e33	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00e36	53		 push	 ebx
  00e37	56		 push	 esi
  00e38	57		 push	 edi

; 342  : 	if ( TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber] == 0 )

  00e39	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00e3c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4], 0
  00e44	75 07		 jne	 SHORT $LN11@FindGroupM@3

; 343  : 		return NULL;

  00e46	33 c0		 xor	 eax, eax
  00e48	e9 2b 01 00 00	 jmp	 $LN12@FindGroupM@3
$LN11@FindGroupM@3:

; 344  : 
; 345  : 	int iMinHPGuid = -1;

  00e4d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _iMinHPGuid$[ebp], -1

; 346  : 	int iMinHP = 100000000;

  00e54	c7 45 f8 00 e1
	f5 05		 mov	 DWORD PTR _iMinHP$[ebp], 100000000 ; 05f5e100H

; 347  : 	int iCount = TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];

  00e5b	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00e5e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4]
  00e65	89 4d f4	 mov	 DWORD PTR _iCount$[ebp], ecx

; 348  : 
; 349  : 	for ( int i=0;i<iCount;i++)

  00e68	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$227312[ebp], 0
  00e6f	eb 09		 jmp	 SHORT $LN10@FindGroupM@3
$LN9@FindGroupM@3:
  00e71	8b 45 f0	 mov	 eax, DWORD PTR _i$227312[ebp]
  00e74	83 c0 01	 add	 eax, 1
  00e77	89 45 f0	 mov	 DWORD PTR _i$227312[ebp], eax
$LN10@FindGroupM@3:
  00e7a	8b 45 f0	 mov	 eax, DWORD PTR _i$227312[ebp]
  00e7d	3b 45 f4	 cmp	 eax, DWORD PTR _iCount$[ebp]
  00e80	0f 8d d2 00 00
	00		 jge	 $LN8@FindGroupM@3

; 350  : 	{
; 351  : 		if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iGroupNumber == iGroupNumber )

  00e86	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00e89	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00e8f	8b 4d f0	 mov	 ecx, DWORD PTR _i$227312[ebp]
  00e92	c1 e1 06	 shl	 ecx, 6
  00e95	8b 94 08 04 00
	00 00		 mov	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+4]
  00e9c	3b 55 0c	 cmp	 edx, DWORD PTR _iGroupNumber$[ebp]
  00e9f	0f 85 ae 00 00
	00		 jne	 $LN2@FindGroupM@3

; 352  : 		{
; 353  : 			LPOBJ lpTargetObj = &gObj[TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iObjIndex];

  00ea5	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00ea8	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00eae	8b 4d f0	 mov	 ecx, DWORD PTR _i$227312[ebp]
  00eb1	c1 e1 06	 shl	 ecx, 6
  00eb4	8b 94 08 3c 00
	00 00		 mov	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+60]
  00ebb	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  00ec1	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00ec7	89 55 ec	 mov	 DWORD PTR _lpTargetObj$227317[ebp], edx

; 354  : 
; 355  : 			if ( lpTargetObj == NULL )

  00eca	75 02		 jne	 SHORT $LN6@FindGroupM@3

; 356  : 				continue;

  00ecc	eb a3		 jmp	 SHORT $LN9@FindGroupM@3
$LN6@FindGroupM@3:

; 357  : 
; 358  : 			if ( gObjCalDistance(&gObj[iObjIndex], lpTargetObj) > iDistance )

  00ece	8b 45 ec	 mov	 eax, DWORD PTR _lpTargetObj$227317[ebp]
  00ed1	50		 push	 eax
  00ed2	8b 4d 08	 mov	 ecx, DWORD PTR _iObjIndex$[ebp]
  00ed5	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00edb	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00ee1	51		 push	 ecx
  00ee2	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00ee7	83 c4 08	 add	 esp, 8
  00eea	3b 45 14	 cmp	 eax, DWORD PTR _iDistance$[ebp]
  00eed	7e 02		 jle	 SHORT $LN5@FindGroupM@3

; 359  : 				continue;

  00eef	eb 80		 jmp	 SHORT $LN9@FindGroupM@3
$LN5@FindGroupM@3:

; 360  : 
; 361  : 			int iMaxLife = (int)(lpTargetObj->MaxLife + 1.0f);

  00ef1	8b 45 ec	 mov	 eax, DWORD PTR _lpTargetObj$227317[ebp]
  00ef4	d9 80 00 01 00
	00		 fld	 DWORD PTR [eax+256]
  00efa	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000
  00f00	e8 00 00 00 00	 call	 __ftol2_sse
  00f05	89 45 e8	 mov	 DWORD PTR _iMaxLife$227320[ebp], eax

; 362  : 			int iPercentHP = (int)(lpTargetObj->Life * 100.0f / iMaxLife);

  00f08	8b 45 ec	 mov	 eax, DWORD PTR _lpTargetObj$227317[ebp]
  00f0b	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  00f11	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00f17	da 75 e8	 fidiv	 DWORD PTR _iMaxLife$227320[ebp]
  00f1a	e8 00 00 00 00	 call	 __ftol2_sse
  00f1f	89 45 e4	 mov	 DWORD PTR _iPercentHP$227322[ebp], eax

; 363  : 
; 364  : 			if ( iPercentHP < 60 )

  00f22	83 7d e4 3c	 cmp	 DWORD PTR _iPercentHP$227322[ebp], 60 ; 0000003cH
  00f26	7d 2b		 jge	 SHORT $LN2@FindGroupM@3

; 365  : 			{
; 366  : 				if ( lpTargetObj->m_Index == iObjIndex )

  00f28	8b 45 ec	 mov	 eax, DWORD PTR _lpTargetObj$227317[ebp]
  00f2b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f2d	3b 4d 08	 cmp	 ecx, DWORD PTR _iObjIndex$[ebp]
  00f30	75 07		 jne	 SHORT $LN3@FindGroupM@3

; 367  : 					iPercentHP = 1;

  00f32	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _iPercentHP$227322[ebp], 1
$LN3@FindGroupM@3:

; 368  : 
; 369  : 				if ( iPercentHP < iMinHP )

  00f39	8b 45 e4	 mov	 eax, DWORD PTR _iPercentHP$227322[ebp]
  00f3c	3b 45 f8	 cmp	 eax, DWORD PTR _iMinHP$[ebp]
  00f3f	7d 12		 jge	 SHORT $LN2@FindGroupM@3

; 370  : 				{
; 371  : 					iMinHP = iPercentHP;

  00f41	8b 45 e4	 mov	 eax, DWORD PTR _iPercentHP$227322[ebp]
  00f44	89 45 f8	 mov	 DWORD PTR _iMinHP$[ebp], eax

; 372  : 					iMinHPGuid = lpTargetObj->m_iGroupMemberGuid;

  00f47	8b 45 ec	 mov	 eax, DWORD PTR _lpTargetObj$227317[ebp]
  00f4a	8b 88 8c 1c 00
	00		 mov	 ecx, DWORD PTR [eax+7308]
  00f50	89 4d fc	 mov	 DWORD PTR _iMinHPGuid$[ebp], ecx
$LN2@FindGroupM@3:

; 373  : 				}
; 374  : 			}
; 375  : 		}
; 376  : 	}

  00f53	e9 19 ff ff ff	 jmp	 $LN9@FindGroupM@3
$LN8@FindGroupM@3:

; 377  : 
; 378  : 	if ( iMinHPGuid != -1 )

  00f58	83 7d fc ff	 cmp	 DWORD PTR _iMinHPGuid$[ebp], -1
  00f5c	74 18		 je	 SHORT $LN1@FindGroupM@3

; 379  : 		return &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iMinHPGuid];

  00f5e	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00f61	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00f67	8b 4d fc	 mov	 ecx, DWORD PTR _iMinHPGuid$[ebp]
  00f6a	c1 e1 06	 shl	 ecx, 6
  00f6d	8d 84 08 00 00
	00 00		 lea	 eax, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx]
  00f74	eb 02		 jmp	 SHORT $LN12@FindGroupM@3
$LN1@FindGroupM@3:

; 380  : 	
; 381  : 	return NULL;

  00f76	33 c0		 xor	 eax, eax
$LN12@FindGroupM@3:

; 382  : }

  00f78	5f		 pop	 edi
  00f79	5e		 pop	 esi
  00f7a	5b		 pop	 ebx
  00f7b	8b e5		 mov	 esp, ebp
  00f7d	5d		 pop	 ebp
  00f7e	c3		 ret	 0
?FindGroupMemberToHeal@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHHH@Z ENDP ; TMonsterAIGroup::FindGroupMemberToHeal
_TEXT	ENDS
PUBLIC	?FindGroupMemberToSommon@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHH@Z ; TMonsterAIGroup::FindGroupMemberToSommon
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpTargetObj$227340 = -12				; size = 4
_i$227335 = -8						; size = 4
_iCount$ = -4						; size = 4
_iObjIndex$ = 8						; size = 4
_iGroupNumber$ = 12					; size = 4
_iGuid$ = 16						; size = 4
?FindGroupMemberToSommon@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHH@Z PROC ; TMonsterAIGroup::FindGroupMemberToSommon

; 387  : {

  00f80	55		 push	 ebp
  00f81	8b ec		 mov	 ebp, esp
  00f83	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00f86	53		 push	 ebx
  00f87	56		 push	 esi
  00f88	57		 push	 edi

; 388  : 	if ( TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber] == 0 )

  00f89	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00f8c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4], 0
  00f94	75 07		 jne	 SHORT $LN9@FindGroupM@4

; 389  : 		return NULL;

  00f96	33 c0		 xor	 eax, eax
  00f98	e9 b7 00 00 00	 jmp	 $LN10@FindGroupM@4
$LN9@FindGroupM@4:

; 390  : 
; 391  : 	int iCount = TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];

  00f9d	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00fa0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4]
  00fa7	89 4d fc	 mov	 DWORD PTR _iCount$[ebp], ecx

; 392  : 
; 393  : 	for ( int i=0;i<iCount;i++)

  00faa	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227335[ebp], 0
  00fb1	eb 09		 jmp	 SHORT $LN8@FindGroupM@4
$LN7@FindGroupM@4:
  00fb3	8b 45 f8	 mov	 eax, DWORD PTR _i$227335[ebp]
  00fb6	83 c0 01	 add	 eax, 1
  00fb9	89 45 f8	 mov	 DWORD PTR _i$227335[ebp], eax
$LN8@FindGroupM@4:
  00fbc	8b 45 f8	 mov	 eax, DWORD PTR _i$227335[ebp]
  00fbf	3b 45 fc	 cmp	 eax, DWORD PTR _iCount$[ebp]
  00fc2	0f 8d 8a 00 00
	00		 jge	 $LN6@FindGroupM@4

; 394  : 	{
; 395  : 		if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iGroupNumber == iGroupNumber )

  00fc8	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00fcb	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00fd1	8b 4d f8	 mov	 ecx, DWORD PTR _i$227335[ebp]
  00fd4	c1 e1 06	 shl	 ecx, 6
  00fd7	8b 94 08 04 00
	00 00		 mov	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+4]
  00fde	3b 55 0c	 cmp	 edx, DWORD PTR _iGroupNumber$[ebp]
  00fe1	75 6a		 jne	 SHORT $LN5@FindGroupM@4

; 396  : 		{
; 397  : 			LPOBJ lpTargetObj = &gObj[TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iObjIndex];

  00fe3	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00fe6	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00fec	8b 4d f8	 mov	 ecx, DWORD PTR _i$227335[ebp]
  00fef	c1 e1 06	 shl	 ecx, 6
  00ff2	8b 94 08 3c 00
	00 00		 mov	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx+60]
  00ff9	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  00fff	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01005	89 55 f4	 mov	 DWORD PTR _lpTargetObj$227340[ebp], edx

; 398  : 
; 399  : 			if ( lpTargetObj->m_Index == iObjIndex )

  01008	8b 45 f4	 mov	 eax, DWORD PTR _lpTargetObj$227340[ebp]
  0100b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0100d	3b 4d 08	 cmp	 ecx, DWORD PTR _iObjIndex$[ebp]
  01010	75 02		 jne	 SHORT $LN4@FindGroupM@4

; 400  : 				continue;

  01012	eb 9f		 jmp	 SHORT $LN7@FindGroupM@4
$LN4@FindGroupM@4:

; 401  : 
; 402  : 			if ( lpTargetObj == NULL )

  01014	83 7d f4 00	 cmp	 DWORD PTR _lpTargetObj$227340[ebp], 0
  01018	75 02		 jne	 SHORT $LN3@FindGroupM@4

; 403  : 				continue;

  0101a	eb 97		 jmp	 SHORT $LN7@FindGroupM@4
$LN3@FindGroupM@4:

; 404  : 
; 405  : 			if ( lpTargetObj->m_iRegenType == -1 )

  0101c	8b 45 f4	 mov	 eax, DWORD PTR _lpTargetObj$227340[ebp]
  0101f	83 b8 90 1c 00
	00 ff		 cmp	 DWORD PTR [eax+7312], -1
  01026	75 02		 jne	 SHORT $LN2@FindGroupM@4

; 406  : 				continue;

  01028	eb 89		 jmp	 SHORT $LN7@FindGroupM@4
$LN2@FindGroupM@4:

; 407  : 
; 408  : 			if ( lpTargetObj->Live == FALSE )

  0102a	8b 45 f4	 mov	 eax, DWORD PTR _lpTargetObj$227340[ebp]
  0102d	0f b6 48 6a	 movzx	 ecx, BYTE PTR [eax+106]
  01031	85 c9		 test	 ecx, ecx
  01033	75 18		 jne	 SHORT $LN5@FindGroupM@4

; 409  : 			{
; 410  : 				return &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i];

  01035	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  01038	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  0103e	8b 4d f8	 mov	 ecx, DWORD PTR _i$227335[ebp]
  01041	c1 e1 06	 shl	 ecx, 6
  01044	8d 84 08 00 00
	00 00		 lea	 eax, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx]
  0104b	eb 07		 jmp	 SHORT $LN10@FindGroupM@4
$LN5@FindGroupM@4:

; 411  : 			}
; 412  : 		}
; 413  : 	}

  0104d	e9 61 ff ff ff	 jmp	 $LN7@FindGroupM@4
$LN6@FindGroupM@4:

; 414  : 
; 415  : 	return NULL;

  01052	33 c0		 xor	 eax, eax
$LN10@FindGroupM@4:

; 416  : }

  01054	5f		 pop	 edi
  01055	5e		 pop	 esi
  01056	5b		 pop	 ebx
  01057	8b e5		 mov	 esp, ebp
  01059	5d		 pop	 ebp
  0105a	c3		 ret	 0
?FindGroupMemberToSommon@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHH@Z ENDP ; TMonsterAIGroup::FindGroupMemberToSommon
_TEXT	ENDS
PUBLIC	?Init@TMonsterAIGroup@@SAXH@Z			; TMonsterAIGroup::Init
PUBLIC	?InitAll@TMonsterAIGroup@@SAXXZ			; TMonsterAIGroup::InitAll
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227347 = -4						; size = 4
?InitAll@TMonsterAIGroup@@SAXXZ PROC			; TMonsterAIGroup::InitAll

; 421  : {

  01060	55		 push	 ebp
  01061	8b ec		 mov	 ebp, esp
  01063	83 ec 44	 sub	 esp, 68			; 00000044H
  01066	53		 push	 ebx
  01067	56		 push	 esi
  01068	57		 push	 edi

; 422  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP;i++)

  01069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$227347[ebp], 0
  01070	eb 09		 jmp	 SHORT $LN4@InitAll
$LN3@InitAll:
  01072	8b 45 fc	 mov	 eax, DWORD PTR _i$227347[ebp]
  01075	83 c0 01	 add	 eax, 1
  01078	89 45 fc	 mov	 DWORD PTR _i$227347[ebp], eax
$LN4@InitAll:
  0107b	83 7d fc 64	 cmp	 DWORD PTR _i$227347[ebp], 100 ; 00000064H
  0107f	7d 1d		 jge	 SHORT $LN5@InitAll

; 423  : 	{
; 424  : 		if ( TMonsterAIGroup::s_iMonsterAIGroupMemberCount[i] == 0 )

  01081	8b 45 fc	 mov	 eax, DWORD PTR _i$227347[ebp]
  01084	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4], 0
  0108c	75 02		 jne	 SHORT $LN1@InitAll

; 425  : 			continue;

  0108e	eb e2		 jmp	 SHORT $LN3@InitAll
$LN1@InitAll:

; 426  : 
; 427  : 		TMonsterAIGroup::Init(i);

  01090	8b 45 fc	 mov	 eax, DWORD PTR _i$227347[ebp]
  01093	50		 push	 eax
  01094	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init
  01099	83 c4 04	 add	 esp, 4

; 428  : 	}

  0109c	eb d4		 jmp	 SHORT $LN3@InitAll
$LN5@InitAll:

; 429  : }

  0109e	5f		 pop	 edi
  0109f	5e		 pop	 esi
  010a0	5b		 pop	 ebx
  010a1	8b e5		 mov	 esp, ebp
  010a3	5d		 pop	 ebp
  010a4	c3		 ret	 0
?InitAll@TMonsterAIGroup@@SAXXZ ENDP			; TMonsterAIGroup::InitAll
_TEXT	ENDS
PUBLIC	??_C@_0EF@IEKKIIGH@?$FL?5KANTURU?5?$FN?$FL?5SetAIMonster?5?$FN?5?$CFs?$CII@ ; `string'
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	_rand:PROC
EXTRN	?gObjViewportClose@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjViewportClose
EXTRN	?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolDestroy
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT ??_C@_0EF@IEKKIIGH@?$FL?5KANTURU?5?$FN?$FL?5SetAIMonster?5?$FN?5?$CFs?$CII@
CONST	SEGMENT
??_C@_0EF@IEKKIIGH@?$FL?5KANTURU?5?$FN?$FL?5SetAIMonster?5?$FN?5?$CFs?$CII@ DB '['
	DB	' KANTURU ][ SetAIMonster ] %s(Index:%d ObjIndex:%d) Map:%d-[%'
	DB	'd][%d]', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_btMapAttr$227373 = -29					; size = 1
_iCount$227369 = -28					; size = 4
_bGetPosition$227368 = -24				; size = 4
_iRadius$227367 = -20					; size = 4
_cY$227365 = -14					; size = 1
_cX$227364 = -13					; size = 1
_iResult$227362 = -12					; size = 4
_Memb$227360 = -8					; size = 4
_j$227356 = -4						; size = 4
_iGroupNumber$ = 8					; size = 4
?Init@TMonsterAIGroup@@SAXH@Z PROC			; TMonsterAIGroup::Init

; 434  : {

  010b0	55		 push	 ebp
  010b1	8b ec		 mov	 ebp, esp
  010b3	83 ec 60	 sub	 esp, 96			; 00000060H
  010b6	53		 push	 ebx
  010b7	56		 push	 esi
  010b8	57		 push	 edi

; 435  : 	if ( TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber] == 0 )

  010b9	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  010bc	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4], 0
  010c4	75 05		 jne	 SHORT $LN14@Init

; 436  : 		return;

  010c6	e9 86 05 00 00	 jmp	 $LN15@Init
$LN14@Init:

; 437  : 
; 438  : 	TMonsterAIGroup::DelGroupInstance(iGroupNumber);

  010cb	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  010ce	50		 push	 eax
  010cf	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  010d4	83 c4 04	 add	 esp, 4

; 439  : 
; 440  : 	for ( int j=0;j<MAX_MONSTER_AI_GROUP_MEMBER;j++)

  010d7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _j$227356[ebp], 0
  010de	eb 09		 jmp	 SHORT $LN13@Init
$LN12@Init:
  010e0	8b 45 fc	 mov	 eax, DWORD PTR _j$227356[ebp]
  010e3	83 c0 01	 add	 eax, 1
  010e6	89 45 fc	 mov	 DWORD PTR _j$227356[ebp], eax
$LN13@Init:
  010e9	81 7d fc c8 00
	00 00		 cmp	 DWORD PTR _j$227356[ebp], 200 ; 000000c8H
  010f0	0f 8d 5b 05 00
	00		 jge	 $LN15@Init

; 441  : 	{
; 442  : 		TMonsterAIGroupMember & Memb = TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][j];

  010f6	8b 45 08	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  010f9	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  010ff	8b 4d fc	 mov	 ecx, DWORD PTR _j$227356[ebp]
  01102	c1 e1 06	 shl	 ecx, 6
  01105	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+ecx]
  0110c	89 55 f8	 mov	 DWORD PTR _Memb$227360[ebp], edx

; 443  : 
; 444  : 		if ( Memb.m_iGuid == -1 )

  0110f	8b 45 f8	 mov	 eax, DWORD PTR _Memb$227360[ebp]
  01112	83 78 08 ff	 cmp	 DWORD PTR [eax+8], -1
  01116	75 02		 jne	 SHORT $LN10@Init

; 445  : 			continue;

  01118	eb c6		 jmp	 SHORT $LN12@Init
$LN10@Init:

; 446  : 
; 447  : 		int iResult = gObjAddMonster(Memb.m_iMapNumber);

  0111a	8b 45 f8	 mov	 eax, DWORD PTR _Memb$227360[ebp]
  0111d	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  01120	51		 push	 ecx
  01121	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  01126	83 c4 04	 add	 esp, 4
  01129	0f bf d0	 movsx	 edx, ax
  0112c	89 55 f4	 mov	 DWORD PTR _iResult$227362[ebp], edx

; 448  : 
; 449  : 		if ( iResult >= 0 )

  0112f	83 7d f4 00	 cmp	 DWORD PTR _iResult$227362[ebp], 0
  01133	0f 8c 13 05 00
	00		 jl	 $LN9@Init

; 450  : 		{
; 451  : 			gObj[iResult].m_PosNum = -1;

  01139	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  0113c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01142	83 c9 ff	 or	 ecx, -1
  01145	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0114b	66 89 8c 02 b0
	03 00 00	 mov	 WORD PTR [edx+eax+944], cx

; 452  : 			gObj[iResult].MapNumber = Memb.m_iMapNumber;

  01153	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01156	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0115c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01162	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  01165	8a 52 28	 mov	 dl, BYTE PTR [edx+40]
  01168	88 94 01 49 01
	00 00		 mov	 BYTE PTR [ecx+eax+329], dl

; 453  : 			gObj[iResult].Live = TRUE;

  0116f	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01172	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01178	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0117e	c6 44 01 6a 01	 mov	 BYTE PTR [ecx+eax+106], 1

; 454  : 
; 455  : 			gObjViewportListProtocolDestroy(&gObj[iResult]);

  01183	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01186	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0118c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01192	50		 push	 eax
  01193	e8 00 00 00 00	 call	 ?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolDestroy
  01198	83 c4 04	 add	 esp, 4

; 456  : 			gObjViewportClose(&gObj[iResult]);

  0119b	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  0119e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  011a4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  011aa	50		 push	 eax
  011ab	e8 00 00 00 00	 call	 ?gObjViewportClose@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportClose
  011b0	83 c4 04	 add	 esp, 4

; 457  : 
; 458  : 			BYTE cX;
; 459  : 			BYTE cY;
; 460  : 
; 461  : 			if ( Memb.m_iCreateType == 1 )

  011b3	8b 45 f8	 mov	 eax, DWORD PTR _Memb$227360[ebp]
  011b6	83 78 24 01	 cmp	 DWORD PTR [eax+36], 1
  011ba	0f 85 3f 01 00
	00		 jne	 $LN8@Init

; 462  : 			{
; 463  : 				int iRadius = 10;

  011c0	c7 45 ec 0a 00
	00 00		 mov	 DWORD PTR _iRadius$227367[ebp], 10 ; 0000000aH

; 464  : 				BOOL bGetPosition = FALSE;

  011c7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bGetPosition$227368[ebp], 0

; 465  : 				int iCount = 100;

  011ce	c7 45 e4 64 00
	00 00		 mov	 DWORD PTR _iCount$227369[ebp], 100 ; 00000064H
$LN7@Init:

; 466  : 
; 467  : 				while ( iCount-- != 0 )

  011d5	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227369[ebp]
  011d8	8b 4d e4	 mov	 ecx, DWORD PTR _iCount$227369[ebp]
  011db	83 e9 01	 sub	 ecx, 1
  011de	89 4d e4	 mov	 DWORD PTR _iCount$227369[ebp], ecx
  011e1	85 c0		 test	 eax, eax
  011e3	0f 84 a8 00 00
	00		 je	 $LN6@Init

; 468  : 				{
; 469  : 					cX = ( rand() % (iRadius+1) ) * (((rand()%2==0)?-1:1)) + Memb.m_iStartX;

  011e9	e8 00 00 00 00	 call	 _rand
  011ee	8b 4d ec	 mov	 ecx, DWORD PTR _iRadius$227367[ebp]
  011f1	83 c1 01	 add	 ecx, 1
  011f4	99		 cdq
  011f5	f7 f9		 idiv	 ecx
  011f7	8b da		 mov	 ebx, edx
  011f9	e8 00 00 00 00	 call	 _rand
  011fe	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  01203	79 05		 jns	 SHORT $LN17@Init
  01205	48		 dec	 eax
  01206	83 c8 fe	 or	 eax, -2			; fffffffeH
  01209	40		 inc	 eax
$LN17@Init:
  0120a	f7 d8		 neg	 eax
  0120c	1b c0		 sbb	 eax, eax
  0120e	83 e0 02	 and	 eax, 2
  01211	83 c0 ff	 add	 eax, -1
  01214	0f af d8	 imul	 ebx, eax
  01217	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  0121a	03 5a 2c	 add	 ebx, DWORD PTR [edx+44]
  0121d	88 5d f3	 mov	 BYTE PTR _cX$227364[ebp], bl

; 470  : 					cY = ( rand() % (iRadius+1) ) * (((rand()%2==0)?-1:1)) + Memb.m_iStartX;

  01220	e8 00 00 00 00	 call	 _rand
  01225	8b 4d ec	 mov	 ecx, DWORD PTR _iRadius$227367[ebp]
  01228	83 c1 01	 add	 ecx, 1
  0122b	99		 cdq
  0122c	f7 f9		 idiv	 ecx
  0122e	8b da		 mov	 ebx, edx
  01230	e8 00 00 00 00	 call	 _rand
  01235	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0123a	79 05		 jns	 SHORT $LN18@Init
  0123c	48		 dec	 eax
  0123d	83 c8 fe	 or	 eax, -2			; fffffffeH
  01240	40		 inc	 eax
$LN18@Init:
  01241	f7 d8		 neg	 eax
  01243	1b c0		 sbb	 eax, eax
  01245	83 e0 02	 and	 eax, 2
  01248	83 c0 ff	 add	 eax, -1
  0124b	0f af d8	 imul	 ebx, eax
  0124e	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  01251	03 5a 2c	 add	 ebx, DWORD PTR [edx+44]
  01254	88 5d f2	 mov	 BYTE PTR _cY$227365[ebp], bl

; 471  : 
; 472  : 					BYTE btMapAttr = MapC[Memb.m_iMapNumber].GetAttr(cX, cY);

  01257	0f b6 45 f2	 movzx	 eax, BYTE PTR _cY$227365[ebp]
  0125b	50		 push	 eax
  0125c	0f b6 4d f3	 movzx	 ecx, BYTE PTR _cX$227364[ebp]
  01260	51		 push	 ecx
  01261	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  01264	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  01267	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  0126d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  01273	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  01278	88 45 e3	 mov	 BYTE PTR _btMapAttr$227373[ebp], al

; 473  : 
; 474  : 					if ( btMapAttr == 0 )

  0127b	0f b6 45 e3	 movzx	 eax, BYTE PTR _btMapAttr$227373[ebp]
  0127f	85 c0		 test	 eax, eax
  01281	75 09		 jne	 SHORT $LN5@Init

; 475  : 					{
; 476  : 						bGetPosition = TRUE;

  01283	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _bGetPosition$227368[ebp], 1

; 477  : 						break;

  0128a	eb 05		 jmp	 SHORT $LN6@Init
$LN5@Init:

; 478  : 					}
; 479  : 				}

  0128c	e9 44 ff ff ff	 jmp	 $LN7@Init
$LN6@Init:

; 480  : 
; 481  : 				if ( bGetPosition == FALSE )

  01291	83 7d e8 00	 cmp	 DWORD PTR _bGetPosition$227368[ebp], 0
  01295	75 66		 jne	 SHORT $LN4@Init

; 482  : 				{
; 483  : 					gObj[iResult].Live = FALSE;

  01297	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  0129a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  012a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012a6	c6 44 01 6a 00	 mov	 BYTE PTR [ecx+eax+106], 0

; 484  : 					gObj[iResult].m_State = 4;

  012ab	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  012ae	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  012b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012ba	c7 84 01 20 02
	00 00 04 00 00
	00		 mov	 DWORD PTR [ecx+eax+544], 4

; 485  : 					gObj[iResult].RegenTime = GetTickCount();

  012c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  012cb	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  012ce	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  012d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012da	89 84 0a a8 03
	00 00		 mov	 DWORD PTR [edx+ecx+936], eax

; 486  : 					gObj[iResult].DieRegen = 1;

  012e1	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  012e4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  012ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012f0	c6 84 01 a2 03
	00 00 01	 mov	 BYTE PTR [ecx+eax+930], 1

; 487  : 
; 488  : 					return;

  012f8	e9 54 03 00 00	 jmp	 $LN15@Init
$LN4@Init:

; 489  : 				}
; 490  : 			}

  012fd	eb 1b		 jmp	 SHORT $LN3@Init
$LN8@Init:

; 491  : 			else if ( Memb.m_iCreateType == 0 )

  012ff	8b 45 f8	 mov	 eax, DWORD PTR _Memb$227360[ebp]
  01302	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  01306	75 12		 jne	 SHORT $LN3@Init

; 492  : 			{
; 493  : 				cX = Memb.m_iStartX;

  01308	8b 45 f8	 mov	 eax, DWORD PTR _Memb$227360[ebp]
  0130b	8a 48 2c	 mov	 cl, BYTE PTR [eax+44]
  0130e	88 4d f3	 mov	 BYTE PTR _cX$227364[ebp], cl

; 494  : 				cY = Memb.m_iStartY;

  01311	8b 45 f8	 mov	 eax, DWORD PTR _Memb$227360[ebp]
  01314	8a 48 30	 mov	 cl, BYTE PTR [eax+48]
  01317	88 4d f2	 mov	 BYTE PTR _cY$227365[ebp], cl
$LN3@Init:

; 495  : 			}
; 496  : 
; 497  : 			gObj[iResult].X = cX;

  0131a	66 0f b6 45 f3	 movzx	 ax, BYTE PTR _cX$227364[ebp]
  0131f	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  01322	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0132e	66 89 84 0a 44
	01 00 00	 mov	 WORD PTR [edx+ecx+324], ax

; 498  : 			gObj[iResult].Y = cY;

  01336	66 0f b6 45 f2	 movzx	 ax, BYTE PTR _cY$227365[ebp]
  0133b	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  0133e	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01344	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0134a	66 89 84 0a 46
	01 00 00	 mov	 WORD PTR [edx+ecx+326], ax

; 499  : 			gObj[iResult].MTX = gObj[iResult].X;

  01352	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01355	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0135b	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  0135e	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01364	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0136a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01370	66 8b 84 06 44
	01 00 00	 mov	 ax, WORD PTR [esi+eax+324]
  01378	66 89 84 0a 80
	01 00 00	 mov	 WORD PTR [edx+ecx+384], ax

; 500  : 			gObj[iResult].MTY = gObj[iResult].Y;

  01380	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01383	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01389	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  0138c	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01392	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01398	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0139e	66 8b 84 06 46
	01 00 00	 mov	 ax, WORD PTR [esi+eax+326]
  013a6	66 89 84 0a 82
	01 00 00	 mov	 WORD PTR [edx+ecx+386], ax

; 501  : 			gObj[iResult].TX = gObj[iResult].X;

  013ae	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  013b1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  013b7	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  013ba	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  013c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  013c6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  013cc	66 8b 84 06 44
	01 00 00	 mov	 ax, WORD PTR [esi+eax+324]
  013d4	66 89 84 0a 7c
	01 00 00	 mov	 WORD PTR [edx+ecx+380], ax

; 502  : 			gObj[iResult].TY = gObj[iResult].Y;

  013dc	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  013df	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  013e5	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  013e8	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  013ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  013f4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  013fa	66 8b 84 06 46
	01 00 00	 mov	 ax, WORD PTR [esi+eax+326]
  01402	66 89 84 0a 7e
	01 00 00	 mov	 WORD PTR [edx+ecx+382], ax

; 503  : 			gObj[iResult].StartX = gObj[iResult].X;

  0140a	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  0140d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01413	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  01416	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0141c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01422	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01428	8a 84 06 44 01
	00 00		 mov	 al, BYTE PTR [esi+eax+324]
  0142f	88 84 0a 76 01
	00 00		 mov	 BYTE PTR [edx+ecx+374], al

; 504  : 			gObj[iResult].StartY = gObj[iResult].Y;

  01436	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01439	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0143f	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  01442	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01448	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0144e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01454	8a 84 06 46 01
	00 00		 mov	 al, BYTE PTR [esi+eax+326]
  0145b	88 84 0a 77 01
	00 00		 mov	 BYTE PTR [edx+ecx+375], al

; 505  : 
; 506  : 
; 507  : 			gObjSetMonster(iResult, Memb.m_iClass);

  01462	8b 45 f8	 mov	 eax, DWORD PTR _Memb$227360[ebp]
  01465	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01468	51		 push	 ecx
  01469	8b 55 f4	 mov	 edx, DWORD PTR _iResult$227362[ebp]
  0146c	52		 push	 edx
  0146d	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  01472	83 c4 08	 add	 esp, 8

; 508  : 
; 509  : 			gObj[iResult].m_iGroupNumber = Memb.m_iGroupNumber;

  01475	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01478	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0147e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01484	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  01487	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0148a	89 94 01 84 1c
	00 00		 mov	 DWORD PTR [ecx+eax+7300], edx

; 510  : 			gObj[iResult].m_iGroupMemberGuid = Memb.m_iGuid;

  01491	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01494	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0149a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  014a0	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  014a3	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  014a6	89 94 01 8c 1c
	00 00		 mov	 DWORD PTR [ecx+eax+7308], edx

; 511  : 			gObj[iResult].m_iCurrentAI = Memb.m_iStartAI;

  014ad	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  014b0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  014b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  014bc	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  014bf	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  014c2	89 94 01 78 1c
	00 00		 mov	 DWORD PTR [ecx+eax+7288], edx

; 512  : 			gObj[iResult].m_iBasicAI = Memb.m_iStartAI;

  014c9	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  014cc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  014d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  014d8	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  014db	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  014de	89 94 01 74 1c
	00 00		 mov	 DWORD PTR [ecx+eax+7284], edx

; 513  : 			gObj[iResult].m_iRegenType = Memb.m_iRegenType;

  014e5	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  014e8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  014ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  014f4	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  014f7	8b 52 38	 mov	 edx, DWORD PTR [edx+56]
  014fa	89 94 01 90 1c
	00 00		 mov	 DWORD PTR [ecx+eax+7312], edx

; 514  : 			gObj[iResult].Dir = Memb.m_iStartDir;

  01501	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01504	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0150a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01510	8b 55 f8	 mov	 edx, DWORD PTR _Memb$227360[ebp]
  01513	8a 52 34	 mov	 dl, BYTE PTR [edx+52]
  01516	88 94 01 48 01
	00 00		 mov	 BYTE PTR [ecx+eax+328], dl

; 515  : 			gObj[iResult].m_State = 1;

  0151d	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01520	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01526	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0152c	c7 84 01 20 02
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+544], 1

; 516  : 			gObj[iResult].DieRegen = 0;

  01537	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  0153a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01540	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01546	c6 84 01 a2 03
	00 00 00	 mov	 BYTE PTR [ecx+eax+930], 0

; 517  : 			Memb.m_iObjIndex = iResult;

  0154e	8b 45 f8	 mov	 eax, DWORD PTR _Memb$227360[ebp]
  01551	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  01554	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 518  : 
; 519  : 			if ( Memb.m_iCreateType == -1 )

  01557	8b 45 f8	 mov	 eax, DWORD PTR _Memb$227360[ebp]
  0155a	83 78 24 ff	 cmp	 DWORD PTR [eax+36], -1
  0155e	75 66		 jne	 SHORT $LN1@Init

; 520  : 			{
; 521  : 				gObj[iResult].Live = FALSE;

  01560	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01563	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01569	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0156f	c6 44 01 6a 00	 mov	 BYTE PTR [ecx+eax+106], 0

; 522  : 				gObj[iResult].m_State = 4;

  01574	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01577	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0157d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01583	c7 84 01 20 02
	00 00 04 00 00
	00		 mov	 DWORD PTR [ecx+eax+544], 4

; 523  : 				gObj[iResult].RegenTime = GetTickCount();

  0158e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01594	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  01597	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0159d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  015a3	89 84 0a a8 03
	00 00		 mov	 DWORD PTR [edx+ecx+936], eax

; 524  : 				gObj[iResult].DieRegen = 1;

  015aa	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  015ad	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  015b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  015b9	c6 84 01 a2 03
	00 00 01	 mov	 BYTE PTR [ecx+eax+930], 1

; 525  : 
; 526  : 				continue;

  015c1	e9 1a fb ff ff	 jmp	 $LN12@Init
$LN1@Init:

; 527  : 			}
; 528  : 			
; 529  : //#if(GS_CASTLE==0)
; 530  : 			LogAddTD("[ KANTURU ][ SetAIMonster ] %s(Index:%d ObjIndex:%d) Map:%d-[%d][%d]",
; 531  : 				gObj[iResult].Name, gObj[iResult].Class, iResult, gObj[iResult].MapNumber,
; 532  : 				gObj[iResult].X, gObj[iResult].Y);

  015c6	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  015c9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  015cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  015d5	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  015dd	52		 push	 edx
  015de	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  015e1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  015e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  015ed	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  015f5	52		 push	 edx
  015f6	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  015f9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  015ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01605	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0160d	52		 push	 edx
  0160e	8b 45 f4	 mov	 eax, DWORD PTR _iResult$227362[ebp]
  01611	50		 push	 eax
  01612	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  01615	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0161b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01621	0f b7 84 0a b8
	00 00 00	 movzx	 eax, WORD PTR [edx+ecx+184]
  01629	50		 push	 eax
  0162a	8b 4d f4	 mov	 ecx, DWORD PTR _iResult$227362[ebp]
  0162d	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01633	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01639	8d 44 0a 77	 lea	 eax, DWORD PTR [edx+ecx+119]
  0163d	50		 push	 eax
  0163e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@IEKKIIGH@?$FL?5KANTURU?5?$FN?$FL?5SetAIMonster?5?$FN?5?$CFs?$CII@
  01643	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01649	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN9@Init:

; 533  : //#endif
; 534  : 		}
; 535  : 	}

  0164c	e9 8f fa ff ff	 jmp	 $LN12@Init
$LN15@Init:

; 536  : }

  01651	5f		 pop	 edi
  01652	5e		 pop	 esi
  01653	5b		 pop	 ebx
  01654	8b e5		 mov	 esp, ebp
  01656	5d		 pop	 ebp
  01657	c3		 ret	 0
?Init@TMonsterAIGroup@@SAXH@Z ENDP			; TMonsterAIGroup::Init
_TEXT	ENDS
EXTRN	_atexit:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0TMonsterAIGroupMember@@QAE@XZ:PROC		; TMonsterAIGroupMember::TMonsterAIGroupMember
EXTRN	??1TMonsterAIGroupMember@@UAE@XZ:PROC		; TMonsterAIGroupMember::~TMonsterAIGroupMember
; Function compile flags: /Odtp /ZI
;	COMDAT ??__E?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ
text$yc	SEGMENT
??__E?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ PROC ; `dynamic initializer for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray'', COMDAT

; 18   : TMonsterAIGroupMember TMonsterAIGroup::s_MonsterAIGroupMemberArray[MAX_MONSTER_AI_GROUP][MAX_MONSTER_AI_GROUP_MEMBER];

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIGroupMember@@UAE@XZ ; TMonsterAIGroupMember::~TMonsterAIGroupMember
  0000e	68 00 00 00 00	 push	 OFFSET ??0TMonsterAIGroupMember@@QAE@XZ ; TMonsterAIGroupMember::TMonsterAIGroupMember
  00013	68 20 4e 00 00	 push	 20000			; 00004e20H
  00018	6a 40		 push	 64			; 00000040H
  0001a	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
  0001f	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  00024	68 00 00 00 00	 push	 OFFSET ??__F?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ ; `dynamic atexit destructor for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray''
  00029	e8 00 00 00 00	 call	 _atexit
  0002e	83 c4 04	 add	 esp, 4
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??__E?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ ENDP ; `dynamic initializer for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray''
text$yc	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??__F?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ
text$yd	SEGMENT
??__F?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIGroupMember@@UAE@XZ ; TMonsterAIGroupMember::~TMonsterAIGroupMember
  0000e	68 20 4e 00 00	 push	 20000			; 00004e20H
  00013	6a 40		 push	 64			; 00000040H
  00015	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
  0001a	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??__F?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray''
text$yd	ENDS
PUBLIC	?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
_BSS	SEGMENT
?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A DB 0138800H DUP (?) ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
_BSS	ENDS
CRT$XCU	SEGMENT
?s_MonsterAIGroupMemberArray$initializer$@TMonsterAIGroup@@2P6AXXZA DD FLAT:??__E?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ ; TMonsterAIGroup::s_MonsterAIGroupMemberArray$initializer$
CRT$XCU	ENDS
END
