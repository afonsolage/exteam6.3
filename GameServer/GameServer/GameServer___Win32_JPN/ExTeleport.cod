; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ExTeleport.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@ExTeleport@@QAEXXZ			; ExTeleport::Init
PUBLIC	??0ExTeleport@@QAE@XZ				; ExTeleport::ExTeleport
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exteleport.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ExTeleport@@QAE@XZ PROC				; ExTeleport::ExTeleport
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : 	this->Init();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Init@ExTeleport@@QAEXXZ ; ExTeleport::Init

; 19   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0ExTeleport@@QAE@XZ ENDP				; ExTeleport::ExTeleport
_TEXT	ENDS
PUBLIC	??1ExTeleport@@QAE@XZ				; ExTeleport::~ExTeleport
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ExTeleport@@QAE@XZ PROC				; ExTeleport::~ExTeleport
; _this$ = ecx

; 23   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1ExTeleport@@QAE@XZ ENDP				; ExTeleport::~ExTeleport
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@ExTeleport@@QAEXXZ PROC				; ExTeleport::Init
; _this$ = ecx

; 28   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 	ZeroMemory(this->data, sizeof(this->data));

  0004c	68 f0 00 00 00	 push	 240			; 000000f0H
  00051	6a 00		 push	 0
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	83 c0 18	 add	 eax, 24			; 00000018H
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _memset
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 30   : 	this->Enable = 0;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	c6 00 00	 mov	 BYTE PTR [eax], 0

; 31   : 	this->NPC_Class = 0;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 32   : 	this->NPC_Map = 0;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 33   : 	this->NPC_X = 0;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 34   : 	this->NPC_Y = 0;

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 35   : 	this->iLoadedCount = 0;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 36   : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?Init@ExTeleport@@QAEXXZ ENDP				; ExTeleport::Init
_TEXT	ENDS
PUBLIC	?Read@ExTeleport@@QAEXPAD@Z			; ExTeleport::Read
PUBLIC	??_C@_0BG@KNKAHJKB@ExData?2ExTeleport?4ini?$AA@	; `string'
PUBLIC	?Load@ExTeleport@@QAEXXZ			; ExTeleport::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT ??_C@_0BG@KNKAHJKB@ExData?2ExTeleport?4ini?$AA@
CONST	SEGMENT
??_C@_0BG@KNKAHJKB@ExData?2ExTeleport?4ini?$AA@ DB 'ExData\ExTeleport.ini'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@ExTeleport@@QAEXXZ PROC				; ExTeleport::Load
; _this$ = ecx

; 40   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	83 ec 44	 sub	 esp, 68			; 00000044H
  000b6	53		 push	 ebx
  000b7	56		 push	 esi
  000b8	57		 push	 edi
  000b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	this->Init();

  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	e8 00 00 00 00	 call	 ?Init@ExTeleport@@QAEXXZ ; ExTeleport::Init

; 42   : 
; 43   : 	if( THINNAKORN_MAC == 1 || 
; 44   : 		g_ExLicense.CheckUser(Artem) || 
; 45   : 		g_ExLicense.CheckUser(eExUB::Artem2) || 
; 46   : 		g_ExLicense.CheckUser(eExUB::Local) ||
; 47   : 		g_ExLicense.CheckUser(eExUB::MedoniAndrei) ||
; 48   : 		g_ExLicense.CheckUser(eExUB::GloryMU))

  000c4	33 c0		 xor	 eax, eax
  000c6	75 5f		 jne	 SHORT $LN1@Load
  000c8	6a 30		 push	 48			; 00000030H
  000ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000cf	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000d4	0f b6 c0	 movzx	 eax, al
  000d7	85 c0		 test	 eax, eax
  000d9	75 4c		 jne	 SHORT $LN1@Load
  000db	6a 31		 push	 49			; 00000031H
  000dd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000e2	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000e7	0f b6 c0	 movzx	 eax, al
  000ea	85 c0		 test	 eax, eax
  000ec	75 39		 jne	 SHORT $LN1@Load
  000ee	6a 00		 push	 0
  000f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000f5	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000fa	0f b6 c0	 movzx	 eax, al
  000fd	85 c0		 test	 eax, eax
  000ff	75 26		 jne	 SHORT $LN1@Load
  00101	6a 32		 push	 50			; 00000032H
  00103	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00108	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0010d	0f b6 c0	 movzx	 eax, al
  00110	85 c0		 test	 eax, eax
  00112	75 13		 jne	 SHORT $LN1@Load
  00114	6a 46		 push	 70			; 00000046H
  00116	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0011b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00120	0f b6 c0	 movzx	 eax, al
  00123	85 c0		 test	 eax, eax
  00125	74 18		 je	 SHORT $LN3@Load
$LN1@Load:

; 49   : 	{
; 50   : 		this->Read(gDirPath.GetNewPath("ExData\\ExTeleport.ini"));

  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KNKAHJKB@ExData?2ExTeleport?4ini?$AA@
  0012c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00131	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00136	50		 push	 eax
  00137	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013a	e8 00 00 00 00	 call	 ?Read@ExTeleport@@QAEXPAD@Z ; ExTeleport::Read
$LN3@Load:

; 51   : 	}
; 52   : }

  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
?Load@ExTeleport@@QAEXXZ ENDP				; ExTeleport::Load
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
EXTRN	_fclose:PROC
EXTRN	_strcmp:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv360 = -92						; size = 8
tv396 = -88						; size = 4
tv384 = -88						; size = 4
tv372 = -88						; size = 4
tv348 = -88						; size = 4
tv336 = -88						; size = 4
tv324 = -88						; size = 4
tv312 = -88						; size = 4
tv300 = -88						; size = 4
tv288 = -88						; size = 4
tv276 = -88						; size = 4
tv394 = -84						; size = 4
tv382 = -84						; size = 4
tv370 = -84						; size = 4
tv358 = -84						; size = 4
tv346 = -84						; size = 4
tv334 = -84						; size = 4
tv322 = -84						; size = 4
tv310 = -84						; size = 4
tv298 = -84						; size = 4
tv286 = -84						; size = 4
tv274 = -84						; size = 4
tv391 = -78						; size = 2
tv379 = -78						; size = 2
tv367 = -78						; size = 2
tv355 = -78						; size = 2
tv343 = -78						; size = 2
tv331 = -78						; size = 2
tv319 = -78						; size = 2
tv307 = -78						; size = 2
tv295 = -78						; size = 2
tv283 = -78						; size = 2
tv271 = -78						; size = 2
tv86 = -77						; size = 1
_type$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_File$ = 8						; size = 4
?Read@ExTeleport@@QAEXPAD@Z PROC			; ExTeleport::Read
; _this$ = ecx

; 56   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00156	53		 push	 ebx
  00157	56		 push	 esi
  00158	57		 push	 edi
  00159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 57   : 	SMDFile = fopen(File, "r");

  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00161	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 _fopen
  0016a	83 c4 08	 add	 esp, 8
  0016d	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 58   : 
; 59   : 	if( SMDFile == NULL )

  00172	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00179	75 22		 jne	 SHORT $LN12@Read

; 60   : 	{
; 61   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), File);

  0017b	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0017e	50		 push	 eax
  0017f	68 c6 01 00 00	 push	 454			; 000001c6H
  00184	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00189	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0018e	50		 push	 eax
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00195	83 c4 08	 add	 esp, 8

; 62   : 		return;

  00198	e9 cf 03 00 00	 jmp	 $LN13@Read
$LN12@Read:

; 63   : 	}
; 64   : 
; 65   : 	int Token;
; 66   : 	int type = -1;

  0019d	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _type$[ebp], -1
$LN11@Read:

; 67   : 
; 68   : 	while ( true )

  001a4	b8 01 00 00 00	 mov	 eax, 1
  001a9	85 c0		 test	 eax, eax
  001ab	0f 84 ad 03 00
	00		 je	 $LN10@Read

; 69   : 	{
; 70   : 	    Token = GetToken();

  001b1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001b6	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 71   : 
; 72   :         if( Token == END )

  001b9	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  001bd	75 05		 jne	 SHORT $LN9@Read

; 73   : 		{
; 74   :             break;

  001bf	e9 9a 03 00 00	 jmp	 $LN10@Read
$LN9@Read:

; 75   : 		}
; 76   : 
; 77   : 		//if(this->iLoadedCount >= MAXEXTELEPORT)
; 78   : 		//{
; 79   : 		//	break;
; 80   : 		//}
; 81   : 
; 82   : 		type = (int)TokenNumber;

  001c4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ca	e8 00 00 00 00	 call	 __ftol2_sse
  001cf	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax
$LN8@Read:

; 83   : 
; 84   : 		while ( true )

  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	85 c0		 test	 eax, eax
  001d9	0f 84 7a 03 00
	00		 je	 $LN7@Read

; 85   : 		{
; 86   : 			if ( type == 0 )

  001df	83 7d f4 00	 cmp	 DWORD PTR _type$[ebp], 0
  001e3	0f 85 af 00 00
	00		 jne	 $LN6@Read

; 87   : 			{
; 88   : 				Token = GetToken();

  001e9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001ee	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 89   : 
; 90   : 				if ( strcmp("end", TokenString) == 0 )

  001f1	68 00 00 00 00	 push	 OFFSET _TokenString
  001f6	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001fb	e8 00 00 00 00	 call	 _strcmp
  00200	83 c4 08	 add	 esp, 8
  00203	85 c0		 test	 eax, eax
  00205	75 05		 jne	 SHORT $LN5@Read

; 91   : 				{
; 92   : 					break;

  00207	e9 4d 03 00 00	 jmp	 $LN7@Read
$LN5@Read:

; 93   : 				}
; 94   : 
; 95   : 				this->Enable = TokenNumber;

  0020c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00212	d9 ee		 fldz
  00214	da e9		 fucompp
  00216	df e0		 fnstsw	 ax
  00218	f6 c4 44	 test	 ah, 68			; 00000044H
  0021b	7b 06		 jnp	 SHORT $LN15@Read
  0021d	c6 45 b3 01	 mov	 BYTE PTR tv86[ebp], 1
  00221	eb 04		 jmp	 SHORT $LN16@Read
$LN15@Read:
  00223	c6 45 b3 00	 mov	 BYTE PTR tv86[ebp], 0
$LN16@Read:
  00227	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022a	8a 4d b3	 mov	 cl, BYTE PTR tv86[ebp]
  0022d	88 08		 mov	 BYTE PTR [eax], cl

; 96   : 				Token = GetToken();

  0022f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00234	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 97   : 				this->NPC_Class = TokenNumber;

  00237	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023d	e8 00 00 00 00	 call	 __ftol2_sse
  00242	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00245	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 98   : 				Token = GetToken();

  00248	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0024d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 99   : 				this->NPC_Map = TokenNumber;

  00250	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00256	e8 00 00 00 00	 call	 __ftol2_sse
  0025b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 100  : 				Token = GetToken();

  00261	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00266	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 101  : 				this->NPC_X = TokenNumber;

  00269	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026f	e8 00 00 00 00	 call	 __ftol2_sse
  00274	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00277	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 102  : 				Token = GetToken();

  0027a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0027f	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 103  : 				this->NPC_Y = TokenNumber;

  00282	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00288	e8 00 00 00 00	 call	 __ftol2_sse
  0028d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00290	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00293	e9 bc 02 00 00	 jmp	 $LN1@Read
$LN6@Read:

; 104  : 			}
; 105  : 			else if( type == 1 )

  00298	83 7d f4 01	 cmp	 DWORD PTR _type$[ebp], 1
  0029c	0f 85 b2 02 00
	00		 jne	 $LN1@Read

; 106  : 			{
; 107  : 				Token = GetToken();

  002a2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002a7	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 108  : 
; 109  : 				if ( strcmp("end", TokenString) == 0 )

  002aa	68 00 00 00 00	 push	 OFFSET _TokenString
  002af	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  002b4	e8 00 00 00 00	 call	 _strcmp
  002b9	83 c4 08	 add	 esp, 8
  002bc	85 c0		 test	 eax, eax
  002be	75 05		 jne	 SHORT $LN2@Read

; 110  : 				{
; 111  : 					break;

  002c0	e9 94 02 00 00	 jmp	 $LN7@Read
$LN2@Read:

; 112  : 				}
; 113  : 
; 114  : 				this->data[this->iLoadedCount].map = TokenNumber;

  002c5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002cb	d9 7d b2	 fnstcw	 WORD PTR tv271[ebp]
  002ce	0f b7 45 b2	 movzx	 eax, WORD PTR tv271[ebp]
  002d2	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002d7	89 45 ac	 mov	 DWORD PTR tv274[ebp], eax
  002da	d9 6d ac	 fldcw	 WORD PTR tv274[ebp]
  002dd	db 5d a8	 fistp	 DWORD PTR tv276[ebp]
  002e0	d9 6d b2	 fldcw	 WORD PTR tv271[ebp]
  002e3	8a 45 a8	 mov	 al, BYTE PTR tv276[ebp]
  002e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002ec	6b d2 18	 imul	 edx, 24			; 00000018H
  002ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f2	88 44 11 18	 mov	 BYTE PTR [ecx+edx+24], al

; 115  : 				Token = GetToken();

  002f6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002fb	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 116  : 				this->data[this->iLoadedCount].x = TokenNumber;

  002fe	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00304	d9 7d b2	 fnstcw	 WORD PTR tv283[ebp]
  00307	0f b7 45 b2	 movzx	 eax, WORD PTR tv283[ebp]
  0030b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00310	89 45 ac	 mov	 DWORD PTR tv286[ebp], eax
  00313	d9 6d ac	 fldcw	 WORD PTR tv286[ebp]
  00316	db 5d a8	 fistp	 DWORD PTR tv288[ebp]
  00319	d9 6d b2	 fldcw	 WORD PTR tv283[ebp]
  0031c	8a 45 a8	 mov	 al, BYTE PTR tv288[ebp]
  0031f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00322	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00325	6b d2 18	 imul	 edx, 24			; 00000018H
  00328	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032b	88 44 11 19	 mov	 BYTE PTR [ecx+edx+25], al

; 117  : 				Token = GetToken();

  0032f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00334	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 118  : 				this->data[this->iLoadedCount].y = TokenNumber;

  00337	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0033d	d9 7d b2	 fnstcw	 WORD PTR tv295[ebp]
  00340	0f b7 45 b2	 movzx	 eax, WORD PTR tv295[ebp]
  00344	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00349	89 45 ac	 mov	 DWORD PTR tv298[ebp], eax
  0034c	d9 6d ac	 fldcw	 WORD PTR tv298[ebp]
  0034f	db 5d a8	 fistp	 DWORD PTR tv300[ebp]
  00352	d9 6d b2	 fldcw	 WORD PTR tv295[ebp]
  00355	8a 45 a8	 mov	 al, BYTE PTR tv300[ebp]
  00358	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0035e	6b d2 18	 imul	 edx, 24			; 00000018H
  00361	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00364	88 44 11 1a	 mov	 BYTE PTR [ecx+edx+26], al

; 119  : 				Token = GetToken();

  00368	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0036d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 120  : 				this->data[this->iLoadedCount].level = TokenNumber;

  00370	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00376	d9 7d b2	 fnstcw	 WORD PTR tv307[ebp]
  00379	0f b7 45 b2	 movzx	 eax, WORD PTR tv307[ebp]
  0037d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00382	89 45 ac	 mov	 DWORD PTR tv310[ebp], eax
  00385	d9 6d ac	 fldcw	 WORD PTR tv310[ebp]
  00388	db 5d a8	 fistp	 DWORD PTR tv312[ebp]
  0038b	d9 6d b2	 fldcw	 WORD PTR tv307[ebp]
  0038e	66 8b 45 a8	 mov	 ax, WORD PTR tv312[ebp]
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00395	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00398	6b d2 18	 imul	 edx, 24			; 00000018H
  0039b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0039e	66 89 44 11 1c	 mov	 WORD PTR [ecx+edx+28], ax

; 121  : 				Token = GetToken();

  003a3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003a8	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 122  : 				this->data[this->iLoadedCount].reset = TokenNumber;

  003ab	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003b1	d9 7d b2	 fnstcw	 WORD PTR tv319[ebp]
  003b4	0f b7 45 b2	 movzx	 eax, WORD PTR tv319[ebp]
  003b8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003bd	89 45 ac	 mov	 DWORD PTR tv322[ebp], eax
  003c0	d9 6d ac	 fldcw	 WORD PTR tv322[ebp]
  003c3	db 5d a8	 fistp	 DWORD PTR tv324[ebp]
  003c6	d9 6d b2	 fldcw	 WORD PTR tv319[ebp]
  003c9	66 8b 45 a8	 mov	 ax, WORD PTR tv324[ebp]
  003cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003d0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  003d3	6b d2 18	 imul	 edx, 24			; 00000018H
  003d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003d9	66 89 44 11 1e	 mov	 WORD PTR [ecx+edx+30], ax

; 123  : 				Token = GetToken();

  003de	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003e3	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 124  : 				this->data[this->iLoadedCount].grand = TokenNumber;

  003e6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003ec	d9 7d b2	 fnstcw	 WORD PTR tv331[ebp]
  003ef	0f b7 45 b2	 movzx	 eax, WORD PTR tv331[ebp]
  003f3	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003f8	89 45 ac	 mov	 DWORD PTR tv334[ebp], eax
  003fb	d9 6d ac	 fldcw	 WORD PTR tv334[ebp]
  003fe	db 5d a8	 fistp	 DWORD PTR tv336[ebp]
  00401	d9 6d b2	 fldcw	 WORD PTR tv331[ebp]
  00404	66 8b 45 a8	 mov	 ax, WORD PTR tv336[ebp]
  00408	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0040b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0040e	6b d2 18	 imul	 edx, 24			; 00000018H
  00411	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00414	66 89 44 11 20	 mov	 WORD PTR [ecx+edx+32], ax

; 125  : 				Token = GetToken();

  00419	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0041e	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 126  : 				this->data[this->iLoadedCount].premium = TokenNumber;

  00421	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00427	d9 7d b2	 fnstcw	 WORD PTR tv343[ebp]
  0042a	0f b7 45 b2	 movzx	 eax, WORD PTR tv343[ebp]
  0042e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00433	89 45 ac	 mov	 DWORD PTR tv346[ebp], eax
  00436	d9 6d ac	 fldcw	 WORD PTR tv346[ebp]
  00439	db 5d a8	 fistp	 DWORD PTR tv348[ebp]
  0043c	d9 6d b2	 fldcw	 WORD PTR tv343[ebp]
  0043f	8a 45 a8	 mov	 al, BYTE PTR tv348[ebp]
  00442	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00445	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00448	6b d2 18	 imul	 edx, 24			; 00000018H
  0044b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0044e	88 44 11 22	 mov	 BYTE PTR [ecx+edx+34], al

; 127  : 				Token = GetToken();

  00452	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00457	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 128  : 				this->data[this->iLoadedCount].zen = TokenNumber;

  0045a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00460	d9 7d b2	 fnstcw	 WORD PTR tv355[ebp]
  00463	0f b7 45 b2	 movzx	 eax, WORD PTR tv355[ebp]
  00467	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0046c	89 45 ac	 mov	 DWORD PTR tv358[ebp], eax
  0046f	d9 6d ac	 fldcw	 WORD PTR tv358[ebp]
  00472	df 7d a4	 fistp	 QWORD PTR tv360[ebp]
  00475	d9 6d b2	 fldcw	 WORD PTR tv355[ebp]
  00478	8b 45 a4	 mov	 eax, DWORD PTR tv360[ebp]
  0047b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0047e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00481	6b d2 18	 imul	 edx, 24			; 00000018H
  00484	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00487	89 44 11 24	 mov	 DWORD PTR [ecx+edx+36], eax

; 129  : 				Token = GetToken();

  0048b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00490	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 130  : 				this->data[this->iLoadedCount].bonus = TokenNumber;

  00493	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00499	d9 7d b2	 fnstcw	 WORD PTR tv367[ebp]
  0049c	0f b7 45 b2	 movzx	 eax, WORD PTR tv367[ebp]
  004a0	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004a5	89 45 ac	 mov	 DWORD PTR tv370[ebp], eax
  004a8	d9 6d ac	 fldcw	 WORD PTR tv370[ebp]
  004ab	db 5d a8	 fistp	 DWORD PTR tv372[ebp]
  004ae	d9 6d b2	 fldcw	 WORD PTR tv367[ebp]
  004b1	66 8b 45 a8	 mov	 ax, WORD PTR tv372[ebp]
  004b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004b8	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004bb	6b d2 18	 imul	 edx, 24			; 00000018H
  004be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004c1	66 89 44 11 28	 mov	 WORD PTR [ecx+edx+40], ax

; 131  : 				Token = GetToken();

  004c6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004cb	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 132  : 				this->data[this->iLoadedCount].credit = TokenNumber;

  004ce	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004d4	d9 7d b2	 fnstcw	 WORD PTR tv379[ebp]
  004d7	0f b7 45 b2	 movzx	 eax, WORD PTR tv379[ebp]
  004db	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004e0	89 45 ac	 mov	 DWORD PTR tv382[ebp], eax
  004e3	d9 6d ac	 fldcw	 WORD PTR tv382[ebp]
  004e6	db 5d a8	 fistp	 DWORD PTR tv384[ebp]
  004e9	d9 6d b2	 fldcw	 WORD PTR tv379[ebp]
  004ec	66 8b 45 a8	 mov	 ax, WORD PTR tv384[ebp]
  004f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004f6	6b d2 18	 imul	 edx, 24			; 00000018H
  004f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004fc	66 89 44 11 2a	 mov	 WORD PTR [ecx+edx+42], ax

; 133  : 				Token = GetToken();

  00501	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00506	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 134  : 				this->data[this->iLoadedCount].Master = TokenNumber;

  00509	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0050f	d9 7d b2	 fnstcw	 WORD PTR tv391[ebp]
  00512	0f b7 45 b2	 movzx	 eax, WORD PTR tv391[ebp]
  00516	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0051b	89 45 ac	 mov	 DWORD PTR tv394[ebp], eax
  0051e	d9 6d ac	 fldcw	 WORD PTR tv394[ebp]
  00521	db 5d a8	 fistp	 DWORD PTR tv396[ebp]
  00524	d9 6d b2	 fldcw	 WORD PTR tv391[ebp]
  00527	8a 45 a8	 mov	 al, BYTE PTR tv396[ebp]
  0052a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0052d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00530	6b d2 18	 imul	 edx, 24			; 00000018H
  00533	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00536	88 44 11 2c	 mov	 BYTE PTR [ecx+edx+44], al

; 135  : 
; 136  : 				this->iLoadedCount++;

  0053a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0053d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00540	83 c1 01	 add	 ecx, 1
  00543	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00546	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 137  : 				if(this->iLoadedCount >= MAXEXTELEPORT)

  00549	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0054c	83 78 14 0a	 cmp	 DWORD PTR [eax+20], 10	; 0000000aH
  00550	7c 02		 jl	 SHORT $LN1@Read

; 138  : 				{
; 139  : 					break;

  00552	eb 05		 jmp	 SHORT $LN7@Read
$LN1@Read:

; 140  : 				}
; 141  : 			}
; 142  : 		}

  00554	e9 79 fc ff ff	 jmp	 $LN8@Read
$LN7@Read:

; 143  :     }

  00559	e9 46 fc ff ff	 jmp	 $LN11@Read
$LN10@Read:

; 144  : 
; 145  : 	fclose(SMDFile);

  0055e	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00563	50		 push	 eax
  00564	e8 00 00 00 00	 call	 _fclose
  00569	83 c4 04	 add	 esp, 4
$LN13@Read:

; 146  : }

  0056c	5f		 pop	 edi
  0056d	5e		 pop	 esi
  0056e	5b		 pop	 ebx
  0056f	8b e5		 mov	 esp, ebp
  00571	5d		 pop	 ebp
  00572	c2 04 00	 ret	 4
?Read@ExTeleport@@QAEXPAD@Z ENDP			; ExTeleport::Read
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00580	55		 push	 ebp
  00581	8b ec		 mov	 ebp, esp
  00583	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00589	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0058e	33 c5		 xor	 eax, ebp
  00590	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00593	53		 push	 ebx
  00594	56		 push	 esi
  00595	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00596	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0059d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005a2	50		 push	 eax
  005a3	e8 00 00 00 00	 call	 _fgetc
  005a8	83 c4 04	 add	 esp, 4
  005ab	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  005ae	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005b2	83 f9 ff	 cmp	 ecx, -1
  005b5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  005b7	b8 02 00 00 00	 mov	 eax, 2
  005bc	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  005c1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  005c3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005c7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  005ca	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  005cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005d1	50		 push	 eax
  005d2	e8 00 00 00 00	 call	 _fgetc
  005d7	83 c4 04	 add	 esp, 4
  005da	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  005dd	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005e1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  005e4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  005e6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005ea	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  005ed	74 1c		 je	 SHORT $LN23@GetToken
  005ef	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005f3	83 f8 ff	 cmp	 eax, -1
  005f6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  005f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005fd	50		 push	 eax
  005fe	e8 00 00 00 00	 call	 _fgetc
  00603	83 c4 04	 add	 esp, 4
  00606	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00609	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0060b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0060f	83 f8 ff	 cmp	 eax, -1
  00612	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00614	b8 02 00 00 00	 mov	 eax, 2
  00619	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0061e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00622	50		 push	 eax
  00623	e8 00 00 00 00	 call	 _isspace
  00628	83 c4 04	 add	 esp, 4
  0062b	85 c0		 test	 eax, eax
  0062d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00633	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00637	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0063d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00643	83 e9 22	 sub	 ecx, 34			; 00000022H
  00646	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0064c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00653	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00659	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0065f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00666	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0066d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00677	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0067c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00681	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00686	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00690	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00695	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0069a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0069f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  006a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006ae	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  006b3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  006b8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  006c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006c7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  006cc	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  006d1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  006db	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006e0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  006e5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  006ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006ef	50		 push	 eax
  006f0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006f4	51		 push	 ecx
  006f5	e8 00 00 00 00	 call	 _ungetc
  006fa	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  006fd	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00700	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00703	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00708	50		 push	 eax
  00709	e8 00 00 00 00	 call	 _getc
  0070e	83 c4 04	 add	 esp, 4
  00711	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00714	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00718	83 f9 ff	 cmp	 ecx, -1
  0071b	74 36		 je	 SHORT $LN12@GetToken
  0071d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00721	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00724	74 1a		 je	 SHORT $LN11@GetToken
  00726	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0072a	50		 push	 eax
  0072b	e8 00 00 00 00	 call	 _isdigit
  00730	83 c4 04	 add	 esp, 4
  00733	85 c0		 test	 eax, eax
  00735	75 09		 jne	 SHORT $LN11@GetToken
  00737	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0073b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0073e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00740	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00743	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00746	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00748	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0074b	83 c0 01	 add	 eax, 1
  0074e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00751	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00753	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00756	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00759	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0075c	50		 push	 eax
  0075d	e8 00 00 00 00	 call	 _atof
  00762	83 c4 04	 add	 esp, 4
  00765	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0076b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00775	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0077a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0077f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00784	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0078b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00790	50		 push	 eax
  00791	e8 00 00 00 00	 call	 _getc
  00796	83 c4 04	 add	 esp, 4
  00799	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0079c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007a0	83 f9 ff	 cmp	 ecx, -1
  007a3	74 1c		 je	 SHORT $LN8@GetToken
  007a5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007a9	83 f8 22	 cmp	 eax, 34			; 00000022H
  007ac	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  007ae	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007b1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  007b4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  007b6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007b9	83 c0 01	 add	 eax, 1
  007bc	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  007bf	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  007c1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007c5	83 f8 22	 cmp	 eax, 34			; 00000022H
  007c8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  007ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007cf	50		 push	 eax
  007d0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007d4	51		 push	 ecx
  007d5	e8 00 00 00 00	 call	 _ungetc
  007da	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  007dd	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007e0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  007e3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  007ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007f2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  007f7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  007fc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00800	50		 push	 eax
  00801	e8 00 00 00 00	 call	 _isalpha
  00806	83 c4 04	 add	 esp, 4
  00809	85 c0		 test	 eax, eax
  0080b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00811	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00818	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0081b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0081e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00820	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00823	83 c0 01	 add	 eax, 1
  00826	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00829	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0082e	50		 push	 eax
  0082f	e8 00 00 00 00	 call	 _getc
  00834	83 c4 04	 add	 esp, 4
  00837	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0083a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0083e	83 f9 ff	 cmp	 ecx, -1
  00841	74 36		 je	 SHORT $LN3@GetToken
  00843	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00847	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0084a	74 1a		 je	 SHORT $LN2@GetToken
  0084c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00850	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00853	74 11		 je	 SHORT $LN2@GetToken
  00855	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00859	50		 push	 eax
  0085a	e8 00 00 00 00	 call	 _isalnum
  0085f	83 c4 04	 add	 esp, 4
  00862	85 c0		 test	 eax, eax
  00864	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00866	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00869	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0086c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0086e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00871	83 c0 01	 add	 eax, 1
  00874	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00877	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00879	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0087e	50		 push	 eax
  0087f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00883	51		 push	 ecx
  00884	e8 00 00 00 00	 call	 _ungetc
  00889	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0088c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0088f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00892	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0089c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008a1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  008a3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  008a5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  008af	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008b4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  008b6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  008b8	5f		 pop	 edi
  008b9	5e		 pop	 esi
  008ba	5b		 pop	 ebx
  008bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008be	33 cd		 xor	 ecx, ebp
  008c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008c5	8b e5		 mov	 esp, ebp
  008c7	5d		 pop	 ebp
  008c8	c3		 ret	 0
  008c9	8d 49 00	 npad	 3
$LN35@GetToken:
  008cc	00 00 00 00	 DD	 $LN10@GetToken
  008d0	00 00 00 00	 DD	 $LN19@GetToken
  008d4	00 00 00 00	 DD	 $LN17@GetToken
  008d8	00 00 00 00	 DD	 $LN14@GetToken
  008dc	00 00 00 00	 DD	 $LN18@GetToken
  008e0	00 00 00 00	 DD	 $LN16@GetToken
  008e4	00 00 00 00	 DD	 $LN15@GetToken
  008e8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  008ec	00		 DB	 0
  008ed	01		 DB	 1
  008ee	07		 DB	 7
  008ef	07		 DB	 7
  008f0	07		 DB	 7
  008f1	07		 DB	 7
  008f2	07		 DB	 7
  008f3	07		 DB	 7
  008f4	07		 DB	 7
  008f5	07		 DB	 7
  008f6	02		 DB	 2
  008f7	03		 DB	 3
  008f8	03		 DB	 3
  008f9	07		 DB	 7
  008fa	03		 DB	 3
  008fb	03		 DB	 3
  008fc	03		 DB	 3
  008fd	03		 DB	 3
  008fe	03		 DB	 3
  008ff	03		 DB	 3
  00900	03		 DB	 3
  00901	03		 DB	 3
  00902	03		 DB	 3
  00903	03		 DB	 3
  00904	07		 DB	 7
  00905	04		 DB	 4
  00906	07		 DB	 7
  00907	07		 DB	 7
  00908	07		 DB	 7
  00909	07		 DB	 7
  0090a	07		 DB	 7
  0090b	07		 DB	 7
  0090c	07		 DB	 7
  0090d	07		 DB	 7
  0090e	07		 DB	 7
  0090f	07		 DB	 7
  00910	07		 DB	 7
  00911	07		 DB	 7
  00912	07		 DB	 7
  00913	07		 DB	 7
  00914	07		 DB	 7
  00915	07		 DB	 7
  00916	07		 DB	 7
  00917	07		 DB	 7
  00918	07		 DB	 7
  00919	07		 DB	 7
  0091a	07		 DB	 7
  0091b	07		 DB	 7
  0091c	07		 DB	 7
  0091d	07		 DB	 7
  0091e	07		 DB	 7
  0091f	07		 DB	 7
  00920	07		 DB	 7
  00921	07		 DB	 7
  00922	07		 DB	 7
  00923	07		 DB	 7
  00924	07		 DB	 7
  00925	07		 DB	 7
  00926	07		 DB	 7
  00927	07		 DB	 7
  00928	07		 DB	 7
  00929	07		 DB	 7
  0092a	07		 DB	 7
  0092b	07		 DB	 7
  0092c	07		 DB	 7
  0092d	07		 DB	 7
  0092e	07		 DB	 7
  0092f	07		 DB	 7
  00930	07		 DB	 7
  00931	07		 DB	 7
  00932	07		 DB	 7
  00933	07		 DB	 7
  00934	07		 DB	 7
  00935	07		 DB	 7
  00936	07		 DB	 7
  00937	07		 DB	 7
  00938	07		 DB	 7
  00939	07		 DB	 7
  0093a	07		 DB	 7
  0093b	07		 DB	 7
  0093c	07		 DB	 7
  0093d	07		 DB	 7
  0093e	07		 DB	 7
  0093f	07		 DB	 7
  00940	07		 DB	 7
  00941	07		 DB	 7
  00942	07		 DB	 7
  00943	07		 DB	 7
  00944	07		 DB	 7
  00945	05		 DB	 5
  00946	07		 DB	 7
  00947	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?GCWindows@ExTeleport@@QAEXH@Z			; ExTeleport::GCWindows
PUBLIC	?Dialog@ExTeleport@@QAE_NHH@Z			; ExTeleport::Dialog
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnectedEx@@YA_NH@Z:PROC		; gObjIsConnectedEx
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exteleport.cpp
_TEXT	SEGMENT
_lpNpc$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aUserIndex$ = 8					; size = 4
_aNpcIndex$ = 12					; size = 4
?Dialog@ExTeleport@@QAE_NHH@Z PROC			; ExTeleport::Dialog
; _this$ = ecx

; 150  : {

  00950	55		 push	 ebp
  00951	8b ec		 mov	 ebp, esp
  00953	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00956	53		 push	 ebx
  00957	56		 push	 esi
  00958	57		 push	 edi
  00959	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 151  : 	if(!this->Enable)

  0095c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0095f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00962	85 c9		 test	 ecx, ecx
  00964	75 07		 jne	 SHORT $LN3@Dialog

; 152  : 	{
; 153  :  		return false;

  00966	32 c0		 xor	 al, al
  00968	e9 95 00 00 00	 jmp	 $LN4@Dialog
$LN3@Dialog:

; 154  : 	}
; 155  : 
; 156  : 	if(!gObjIsConnectedEx(aUserIndex))

  0096d	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00970	50		 push	 eax
  00971	e8 00 00 00 00	 call	 ?gObjIsConnectedEx@@YA_NH@Z ; gObjIsConnectedEx
  00976	83 c4 04	 add	 esp, 4
  00979	0f b6 c8	 movzx	 ecx, al
  0097c	85 c9		 test	 ecx, ecx
  0097e	75 04		 jne	 SHORT $LN2@Dialog

; 157  : 	{
; 158  : 		return false;

  00980	32 c0		 xor	 al, al
  00982	eb 7e		 jmp	 SHORT $LN4@Dialog
$LN2@Dialog:

; 159  : 	}
; 160  : 
; 161  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00984	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00987	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0098d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00993	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 162  : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  00996	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  00999	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0099f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  009a5	89 45 f4	 mov	 DWORD PTR _lpNpc$[ebp], eax

; 163  : 
; 164  : 	if(		lpNpc->Class		== this->NPC_Class 
; 165  : 		&&	lpNpc->MapNumber	== this->NPC_Map
; 166  : 		&&	lpNpc->X			== this->NPC_X
; 167  : 		&&	lpNpc->Y			== this->NPC_Y )

  009a8	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  009ab	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  009b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  009b5	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  009b8	75 46		 jne	 SHORT $LN1@Dialog
  009ba	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  009bd	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  009c4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  009c7	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  009ca	75 34		 jne	 SHORT $LN1@Dialog
  009cc	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  009cf	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  009d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  009d9	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  009dc	75 22		 jne	 SHORT $LN1@Dialog
  009de	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  009e1	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  009e8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  009eb	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
  009ee	75 10		 jne	 SHORT $LN1@Dialog

; 168  : 	{
; 169  : 		this->GCWindows(aUserIndex);

  009f0	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  009f3	50		 push	 eax
  009f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009f7	e8 00 00 00 00	 call	 ?GCWindows@ExTeleport@@QAEXH@Z ; ExTeleport::GCWindows

; 170  : 		return true;

  009fc	b0 01		 mov	 al, 1
  009fe	eb 02		 jmp	 SHORT $LN4@Dialog
$LN1@Dialog:

; 171  : 	}
; 172  : 	// ----
; 173  : 	return false;

  00a00	32 c0		 xor	 al, al
$LN4@Dialog:

; 174  : }

  00a02	5f		 pop	 edi
  00a03	5e		 pop	 esi
  00a04	5b		 pop	 ebx
  00a05	8b e5		 mov	 esp, ebp
  00a07	5d		 pop	 ebp
  00a08	c2 08 00	 ret	 8
?Dialog@ExTeleport@@QAE_NHH@Z ENDP			; ExTeleport::Dialog
_TEXT	ENDS
PUBLIC	?Timer@ExTeleport@@QAEXXZ			; ExTeleport::Timer
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Timer@ExTeleport@@QAEXXZ PROC				; ExTeleport::Timer
; _this$ = ecx

; 178  : {

  00a10	55		 push	 ebp
  00a11	8b ec		 mov	 ebp, esp
  00a13	83 ec 44	 sub	 esp, 68			; 00000044H
  00a16	53		 push	 ebx
  00a17	56		 push	 esi
  00a18	57		 push	 edi
  00a19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 179  : 	/*
; 180  : 	for (int aUserIndex = OBJ_STARTUSERINDEX; aUserIndex < OBJMAX; aUserIndex++)
; 181  : 	{
; 182  : 		if(OBJMAX_RANGE(aUserIndex) == 0)
; 183  : 		{
; 184  : 			continue;
; 185  : 		}
; 186  : 
; 187  : 		LPOBJ lpUser = &gObj[aUserIndex];
; 188  : 
; 189  : 		if(lpUser->Connected < PLAYER_PLAYING)
; 190  : 		{
; 191  : 			continue;
; 192  : 		}
; 193  : 		
; 194  : 		for(int i = 0; i < this->iLoadedCount; i++)
; 195  : 		{
; 196  : 			if(this->data[i].map == lpUser->MapNumber)
; 197  : 			{
; 198  : 				if(this->data[i].level > lpUser->Level)
; 199  : 				{
; 200  : 					gObjTeleport(aUserIndex, 0, 123, 123);
; 201  : 				}
; 202  : 				else if(this->data[i].reset > lpUser->Reset)
; 203  : 				{
; 204  : 					gObjTeleport(aUserIndex, 0, 123, 123);
; 205  : 				}
; 206  : 				else if(this->data[i].grand > lpUser->GReset)
; 207  : 				{
; 208  : 					gObjTeleport(aUserIndex, 0, 123, 123);
; 209  : 				}
; 210  : 				else if(this->data[i].Master)
; 211  : 				{
; 212  : 					if(!lpUser->ChangeUP3rd)
; 213  : 					{
; 214  : 						gObjTeleport(aUserIndex, 0, 123, 123);
; 215  : 					}
; 216  : 				}
; 217  : 			}
; 218  : 		}
; 219  : 	}
; 220  : 	*/
; 221  : }

  00a1c	5f		 pop	 edi
  00a1d	5e		 pop	 esi
  00a1e	5b		 pop	 ebx
  00a1f	8b e5		 mov	 esp, ebp
  00a21	5d		 pop	 ebp
  00a22	c3		 ret	 0
?Timer@ExTeleport@@QAEXXZ ENDP				; ExTeleport::Timer
_TEXT	ENDS
PUBLIC	?Check@ExTeleport@@QAE_NH@Z			; ExTeleport::Check
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -80						; size = 4
_i$228394 = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aUserIndex$ = 8					; size = 4
?Check@ExTeleport@@QAE_NH@Z PROC			; ExTeleport::Check
; _this$ = ecx

; 225  : {

  00a30	55		 push	 ebp
  00a31	8b ec		 mov	 ebp, esp
  00a33	83 ec 50	 sub	 esp, 80			; 00000050H
  00a36	53		 push	 ebx
  00a37	56		 push	 esi
  00a38	57		 push	 edi
  00a39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00a3c	83 7d 08 00	 cmp	 DWORD PTR _aUserIndex$[ebp], 0
  00a40	7d 09		 jge	 SHORT $LN10@Check
  00a42	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  00a49	eb 0f		 jmp	 SHORT $LN11@Check
$LN10@Check:
  00a4b	33 c0		 xor	 eax, eax
  00a4d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aUserIndex$[ebp], 14999 ; 00003a97H
  00a54	0f 9e c0	 setle	 al
  00a57	89 45 b0	 mov	 DWORD PTR tv67[ebp], eax
$LN11@Check:
  00a5a	83 7d b0 00	 cmp	 DWORD PTR tv67[ebp], 0
  00a5e	75 04		 jne	 SHORT $LN7@Check

; 227  : 	{
; 228  : 		return false;

  00a60	32 c0		 xor	 al, al
  00a62	eb 66		 jmp	 SHORT $LN8@Check
$LN7@Check:

; 229  : 	}
; 230  : 
; 231  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00a64	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00a67	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00a6d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00a73	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 232  : 
; 233  : 	if(!lpUser)

  00a76	75 04		 jne	 SHORT $LN6@Check

; 234  : 	{
; 235  : 		return false;

  00a78	32 c0		 xor	 al, al
  00a7a	eb 4e		 jmp	 SHORT $LN8@Check
$LN6@Check:

; 236  : 	}
; 237  : 
; 238  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00a7c	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00a7f	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00a83	7d 04		 jge	 SHORT $LN5@Check

; 239  : 	{
; 240  : 		return false;

  00a85	32 c0		 xor	 al, al
  00a87	eb 41		 jmp	 SHORT $LN8@Check
$LN5@Check:

; 241  : 	}
; 242  : 
; 243  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00a89	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228394[ebp], 0
  00a90	eb 09		 jmp	 SHORT $LN4@Check
$LN3@Check:
  00a92	8b 45 f4	 mov	 eax, DWORD PTR _i$228394[ebp]
  00a95	83 c0 01	 add	 eax, 1
  00a98	89 45 f4	 mov	 DWORD PTR _i$228394[ebp], eax
$LN4@Check:
  00a9b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a9e	8b 4d f4	 mov	 ecx, DWORD PTR _i$228394[ebp]
  00aa1	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00aa4	7d 22		 jge	 SHORT $LN2@Check

; 244  : 	{
; 245  : 		if(this->data[i].map == lpUser->MapNumber)

  00aa6	8b 45 f4	 mov	 eax, DWORD PTR _i$228394[ebp]
  00aa9	6b c0 18	 imul	 eax, 24			; 00000018H
  00aac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aaf	0f b6 54 01 18	 movzx	 edx, BYTE PTR [ecx+eax+24]
  00ab4	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00ab7	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00abe	3b d1		 cmp	 edx, ecx
  00ac0	75 04		 jne	 SHORT $LN1@Check

; 246  : 		{
; 247  : 			return false;

  00ac2	32 c0		 xor	 al, al
  00ac4	eb 04		 jmp	 SHORT $LN8@Check
$LN1@Check:

; 248  : 		}
; 249  : 	}

  00ac6	eb ca		 jmp	 SHORT $LN3@Check
$LN2@Check:

; 250  : 
; 251  : 	return true;

  00ac8	b0 01		 mov	 al, 1
$LN8@Check:

; 252  : }

  00aca	5f		 pop	 edi
  00acb	5e		 pop	 esi
  00acc	5b		 pop	 ebx
  00acd	8b e5		 mov	 esp, ebp
  00acf	5d		 pop	 ebp
  00ad0	c2 04 00	 ret	 4
?Check@ExTeleport@@QAE_NH@Z ENDP			; ExTeleport::Check
_TEXT	ENDS
PUBLIC	?set@PWMSG_HEAD2@@QAEXPAEEEH@Z			; PWMSG_HEAD2::set
PUBLIC	__$ArrayPad$
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv427 = -452						; size = 4
tv418 = -452						; size = 4
tv67 = -452						; size = 4
_i$228408 = -384					; size = 4
_pMsg$ = -380						; size = 368
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aUserIndex$ = 8					; size = 4
?GCWindows@ExTeleport@@QAEXH@Z PROC			; ExTeleport::GCWindows
; _this$ = ecx

; 256  : {

  00ae0	55		 push	 ebp
  00ae1	8b ec		 mov	 ebp, esp
  00ae3	81 ec c4 01 00
	00		 sub	 esp, 452		; 000001c4H
  00ae9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00aee	33 c5		 xor	 eax, ebp
  00af0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00af3	53		 push	 ebx
  00af4	56		 push	 esi
  00af5	57		 push	 edi
  00af6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 257  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00af9	83 7d 08 00	 cmp	 DWORD PTR _aUserIndex$[ebp], 0
  00afd	7d 0c		 jge	 SHORT $LN17@GCWindows
  00aff	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
  00b09	eb 12		 jmp	 SHORT $LN18@GCWindows
$LN17@GCWindows:
  00b0b	33 c0		 xor	 eax, eax
  00b0d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aUserIndex$[ebp], 14999 ; 00003a97H
  00b14	0f 9e c0	 setle	 al
  00b17	89 85 3c fe ff
	ff		 mov	 DWORD PTR tv67[ebp], eax
$LN18@GCWindows:
  00b1d	83 bd 3c fe ff
	ff 00		 cmp	 DWORD PTR tv67[ebp], 0
  00b24	75 05		 jne	 SHORT $LN14@GCWindows

; 258  : 	{
; 259  : 		return;

  00b26	e9 d1 04 00 00	 jmp	 $LN15@GCWindows
$LN14@GCWindows:

; 260  : 	}
; 261  : 
; 262  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00b2b	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00b2e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00b34	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00b3a	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 263  : 
; 264  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00b3d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00b40	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00b44	7d 05		 jge	 SHORT $LN13@GCWindows

; 265  : 	{
; 266  : 		return;

  00b46	e9 b1 04 00 00	 jmp	 $LN15@GCWindows
$LN13@GCWindows:

; 267  : 	}
; 268  : 
; 269  : 	PMSG_GC_TELEPORTWIN pMsg;
; 270  : 	ZeroMemory(&pMsg, sizeof(pMsg));

  00b4b	68 70 01 00 00	 push	 368			; 00000170H
  00b50	6a 00		 push	 0
  00b52	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00b58	50		 push	 eax
  00b59	e8 00 00 00 00	 call	 _memset
  00b5e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 271  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFA, 0x0F, sizeof(pMsg));

  00b61	68 70 01 00 00	 push	 368			; 00000170H
  00b66	6a 0f		 push	 15			; 0000000fH
  00b68	68 fa 00 00 00	 push	 250			; 000000faH
  00b6d	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00b73	50		 push	 eax
  00b74	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00b7a	e8 00 00 00 00	 call	 ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ; PWMSG_HEAD2::set

; 272  : 
; 273  : 	pMsg.count = this->iLoadedCount;

  00b7f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b82	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00b85	88 8d 89 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], cl

; 274  : 	
; 275  : 
; 276  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00b8b	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228408[ebp], 0
  00b95	eb 0f		 jmp	 SHORT $LN12@GCWindows
$LN11@GCWindows:
  00b97	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00b9d	83 c0 01	 add	 eax, 1
  00ba0	89 85 80 fe ff
	ff		 mov	 DWORD PTR _i$228408[ebp], eax
$LN12@GCWindows:
  00ba6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ba9	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00baf	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00bb2	0f 8d 2a 04 00
	00		 jge	 $LN10@GCWindows

; 277  : 	{
; 278  : 		pMsg.tdata[i].result = 1;

  00bb8	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00bbe	6b c0 24	 imul	 eax, 36			; 00000024H
  00bc1	c6 84 05 8c fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 1

; 279  : 		pMsg.tdata[i].map = this->data[i].map;

  00bc9	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00bcf	6b c0 18	 imul	 eax, 24			; 00000018H
  00bd2	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00bd8	6b c9 24	 imul	 ecx, 36			; 00000024H
  00bdb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00bde	8a 44 02 18	 mov	 al, BYTE PTR [edx+eax+24]
  00be2	88 84 0d 8d fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+9], al

; 280  : 		pMsg.tdata[i].x = this->data[i].x;

  00be9	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00bef	6b c0 18	 imul	 eax, 24			; 00000018H
  00bf2	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00bf8	6b c9 24	 imul	 ecx, 36			; 00000024H
  00bfb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00bfe	8a 44 02 19	 mov	 al, BYTE PTR [edx+eax+25]
  00c02	88 84 0d 8e fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+10], al

; 281  : 		pMsg.tdata[i].y = this->data[i].y;

  00c09	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00c0f	6b c0 18	 imul	 eax, 24			; 00000018H
  00c12	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00c18	6b c9 24	 imul	 ecx, 36			; 00000024H
  00c1b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c1e	8a 44 02 1a	 mov	 al, BYTE PTR [edx+eax+26]
  00c22	88 84 0d 8f fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+11], al

; 282  : 		pMsg.tdata[i].level = this->data[i].level;

  00c29	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00c2f	6b c0 18	 imul	 eax, 24			; 00000018H
  00c32	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00c38	6b c9 24	 imul	 ecx, 36			; 00000024H
  00c3b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c3e	66 8b 44 02 1c	 mov	 ax, WORD PTR [edx+eax+28]
  00c43	66 89 84 0d 90
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+12], ax

; 283  : 		pMsg.tdata[i].reset = this->data[i].reset;

  00c4b	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00c51	6b c0 18	 imul	 eax, 24			; 00000018H
  00c54	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00c5a	6b c9 24	 imul	 ecx, 36			; 00000024H
  00c5d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c60	66 8b 44 02 1e	 mov	 ax, WORD PTR [edx+eax+30]
  00c65	66 89 84 0d 94
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+16], ax

; 284  : 		pMsg.tdata[i].grand = this->data[i].grand;

  00c6d	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00c73	6b c0 18	 imul	 eax, 24			; 00000018H
  00c76	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00c7c	6b c9 24	 imul	 ecx, 36			; 00000024H
  00c7f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c82	66 8b 44 02 20	 mov	 ax, WORD PTR [edx+eax+32]
  00c87	66 89 84 0d 98
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+20], ax

; 285  : 		pMsg.tdata[i].premium = this->data[i].premium;

  00c8f	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00c95	6b c0 18	 imul	 eax, 24			; 00000018H
  00c98	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00c9e	6b c9 24	 imul	 ecx, 36			; 00000024H
  00ca1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ca4	8a 44 02 22	 mov	 al, BYTE PTR [edx+eax+34]
  00ca8	88 84 0d 9b fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+23], al

; 286  : 		pMsg.tdata[i].zen = this->data[i].zen;

  00caf	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00cb5	6b c0 18	 imul	 eax, 24			; 00000018H
  00cb8	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00cbe	6b c9 24	 imul	 ecx, 36			; 00000024H
  00cc1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00cc4	8b 44 02 24	 mov	 eax, DWORD PTR [edx+eax+36]
  00cc8	89 84 0d a0 fe
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+ecx+28], eax

; 287  : 		pMsg.tdata[i].bonus = this->data[i].bonus;

  00ccf	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00cd5	6b c0 18	 imul	 eax, 24			; 00000018H
  00cd8	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00cde	6b c9 24	 imul	 ecx, 36			; 00000024H
  00ce1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ce4	66 8b 44 02 28	 mov	 ax, WORD PTR [edx+eax+40]
  00ce9	66 89 84 0d a6
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+34], ax

; 288  : 		pMsg.tdata[i].credit = this->data[i].credit;

  00cf1	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00cf7	6b c0 18	 imul	 eax, 24			; 00000018H
  00cfa	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00d00	6b c9 24	 imul	 ecx, 36			; 00000024H
  00d03	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d06	66 8b 44 02 2a	 mov	 ax, WORD PTR [edx+eax+42]
  00d0b	66 89 84 0d aa
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+38], ax

; 289  : 		pMsg.tdata[i].Master = this->data[i].Master;

  00d13	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00d19	6b c0 18	 imul	 eax, 24			; 00000018H
  00d1c	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228408[ebp]
  00d22	6b c9 24	 imul	 ecx, 36			; 00000024H
  00d25	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d28	8a 44 02 2c	 mov	 al, BYTE PTR [edx+eax+44]
  00d2c	88 84 0d ad fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+41], al

; 290  : 
; 291  : 		pMsg.tdata[i].ok_level = 1;

  00d33	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00d39	6b c0 24	 imul	 eax, 36			; 00000024H
  00d3c	c6 84 05 92 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+14], 1

; 292  : 		pMsg.tdata[i].ok_reset = 1;

  00d44	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00d4a	6b c0 24	 imul	 eax, 36			; 00000024H
  00d4d	c6 84 05 96 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+18], 1

; 293  : 		pMsg.tdata[i].ok_grand = 1;

  00d55	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00d5b	6b c0 24	 imul	 eax, 36			; 00000024H
  00d5e	c6 84 05 9a fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+22], 1

; 294  : 		pMsg.tdata[i].ok_premium = 1;

  00d66	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00d6c	6b c0 24	 imul	 eax, 36			; 00000024H
  00d6f	c6 84 05 9c fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+24], 1

; 295  : 		pMsg.tdata[i].ok_zen = 1;

  00d77	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00d7d	6b c0 24	 imul	 eax, 36			; 00000024H
  00d80	c6 84 05 a4 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+32], 1

; 296  : 		pMsg.tdata[i].ok_bonus = 1;

  00d88	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00d8e	6b c0 24	 imul	 eax, 36			; 00000024H
  00d91	c6 84 05 a8 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+36], 1

; 297  : 		pMsg.tdata[i].ok_credit = 1;

  00d99	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00d9f	6b c0 24	 imul	 eax, 36			; 00000024H
  00da2	c6 84 05 ac fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+40], 1

; 298  : 		pMsg.tdata[i].ok_Master = 1;

  00daa	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00db0	6b c0 24	 imul	 eax, 36			; 00000024H
  00db3	c6 84 05 ae fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+42], 1

; 299  : 
; 300  : 		if(this->data[i].level > lpUser->Level)

  00dbb	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00dc1	6b c0 18	 imul	 eax, 24			; 00000018H
  00dc4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00dc7	0f b7 54 01 1c	 movzx	 edx, WORD PTR [ecx+eax+28]
  00dcc	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00dcf	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00dd6	3b d1		 cmp	 edx, ecx
  00dd8	7e 22		 jle	 SHORT $LN9@GCWindows

; 301  : 		{
; 302  : 			pMsg.tdata[i].result = 0;

  00dda	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00de0	6b c0 24	 imul	 eax, 36			; 00000024H
  00de3	c6 84 05 8c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 303  : 			pMsg.tdata[i].ok_level = 0;

  00deb	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00df1	6b c0 24	 imul	 eax, 36			; 00000024H
  00df4	c6 84 05 92 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+14], 0
$LN9@GCWindows:

; 304  : 		}
; 305  : 		if(this->data[i].reset > lpUser->Reset)

  00dfc	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00e02	6b c0 18	 imul	 eax, 24			; 00000018H
  00e05	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e08	0f b7 54 01 1e	 movzx	 edx, WORD PTR [ecx+eax+30]
  00e0d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e10	3b 90 90 22 00
	00		 cmp	 edx, DWORD PTR [eax+8848]
  00e16	7e 22		 jle	 SHORT $LN8@GCWindows

; 306  : 		{
; 307  : 			pMsg.tdata[i].result = 0;

  00e18	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00e1e	6b c0 24	 imul	 eax, 36			; 00000024H
  00e21	c6 84 05 8c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 308  : 			pMsg.tdata[i].ok_reset = 0;

  00e29	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00e2f	6b c0 24	 imul	 eax, 36			; 00000024H
  00e32	c6 84 05 96 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+18], 0
$LN8@GCWindows:

; 309  : 		}
; 310  : 		if(this->data[i].grand > lpUser->GReset)

  00e3a	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00e40	6b c0 18	 imul	 eax, 24			; 00000018H
  00e43	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e46	0f b7 54 01 20	 movzx	 edx, WORD PTR [ecx+eax+32]
  00e4b	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e4e	3b 90 94 22 00
	00		 cmp	 edx, DWORD PTR [eax+8852]
  00e54	7e 22		 jle	 SHORT $LN7@GCWindows

; 311  : 		{
; 312  : 			pMsg.tdata[i].result = 0;

  00e56	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00e5c	6b c0 24	 imul	 eax, 36			; 00000024H
  00e5f	c6 84 05 8c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 313  : 			pMsg.tdata[i].ok_grand = 0;

  00e67	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00e6d	6b c0 24	 imul	 eax, 36			; 00000024H
  00e70	c6 84 05 9a fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+22], 0
$LN7@GCWindows:

; 314  : 		}
; 315  : 		if(this->data[i].premium > 0 && lpUser->PremiumTime == 0)

  00e78	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00e7e	6b c0 18	 imul	 eax, 24			; 00000018H
  00e81	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e84	0f b6 54 01 22	 movzx	 edx, BYTE PTR [ecx+eax+34]
  00e89	85 d2		 test	 edx, edx
  00e8b	7e 2e		 jle	 SHORT $LN6@GCWindows
  00e8d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e90	83 b8 b8 22 00
	00 00		 cmp	 DWORD PTR [eax+8888], 0
  00e97	75 22		 jne	 SHORT $LN6@GCWindows

; 316  : 		{
; 317  : 			pMsg.tdata[i].result = 0;

  00e99	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00e9f	6b c0 24	 imul	 eax, 36			; 00000024H
  00ea2	c6 84 05 8c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 318  : 			pMsg.tdata[i].ok_premium = 0;

  00eaa	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00eb0	6b c0 24	 imul	 eax, 36			; 00000024H
  00eb3	c6 84 05 9c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+24], 0
$LN6@GCWindows:

; 319  : 		}
; 320  : #if(LICENSE_MUEVIL)
; 321  : 		if(this->data[i].premium > lpUser->PremiumTimeType)
; 322  : 		{
; 323  : 			pMsg.tdata[i].result = 0;
; 324  : 			pMsg.tdata[i].ok_premium = 0;
; 325  : 		}
; 326  : #endif
; 327  : 		if(this->data[i].zen > lpUser->Money)

  00ebb	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00ec1	6b c0 18	 imul	 eax, 24			; 00000018H
  00ec4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ec7	8b 55 f4	 mov	 edx, DWORD PTR _lpUser$[ebp]
  00eca	8b 44 01 24	 mov	 eax, DWORD PTR [ecx+eax+36]
  00ece	3b 82 f0 00 00
	00		 cmp	 eax, DWORD PTR [edx+240]
  00ed4	76 22		 jbe	 SHORT $LN5@GCWindows

; 328  : 		{
; 329  : 			pMsg.tdata[i].result = 0;

  00ed6	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00edc	6b c0 24	 imul	 eax, 36			; 00000024H
  00edf	c6 84 05 8c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 330  : 			pMsg.tdata[i].ok_zen = 0;

  00ee7	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00eed	6b c0 24	 imul	 eax, 36			; 00000024H
  00ef0	c6 84 05 a4 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+32], 0
$LN5@GCWindows:

; 331  : 		}
; 332  : 		if(this->data[i].bonus > lpUser->GameShop.WCoinC)

  00ef8	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00efe	6b c0 18	 imul	 eax, 24			; 00000018H
  00f01	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f04	0f b7 54 01 28	 movzx	 edx, WORD PTR [ecx+eax+40]
  00f09	89 95 3c fe ff
	ff		 mov	 DWORD PTR tv418[ebp], edx
  00f0f	db 85 3c fe ff
	ff		 fild	 DWORD PTR tv418[ebp]
  00f15	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00f18	dc 98 00 23 00
	00		 fcomp	 QWORD PTR [eax+8960]
  00f1e	df e0		 fnstsw	 ax
  00f20	f6 c4 41	 test	 ah, 65			; 00000041H
  00f23	75 22		 jne	 SHORT $LN4@GCWindows

; 333  : 		{
; 334  : 			pMsg.tdata[i].result = 0;

  00f25	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00f2b	6b c0 24	 imul	 eax, 36			; 00000024H
  00f2e	c6 84 05 8c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 335  : 			pMsg.tdata[i].ok_bonus = 0;

  00f36	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00f3c	6b c0 24	 imul	 eax, 36			; 00000024H
  00f3f	c6 84 05 a8 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+36], 0
$LN4@GCWindows:

; 336  : 		}
; 337  : 		if(this->data[i].credit > lpUser->ExCred)

  00f47	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00f4d	6b c0 18	 imul	 eax, 24			; 00000018H
  00f50	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f53	0f b7 54 01 2a	 movzx	 edx, WORD PTR [ecx+eax+42]
  00f58	89 95 3c fe ff
	ff		 mov	 DWORD PTR tv427[ebp], edx
  00f5e	db 85 3c fe ff
	ff		 fild	 DWORD PTR tv427[ebp]
  00f64	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00f67	d9 80 a8 22 00
	00		 fld	 DWORD PTR [eax+8872]
  00f6d	de d9		 fcompp
  00f6f	df e0		 fnstsw	 ax
  00f71	f6 c4 05	 test	 ah, 5
  00f74	7a 22		 jp	 SHORT $LN3@GCWindows

; 338  : 		{
; 339  : 			pMsg.tdata[i].result = 0;

  00f76	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00f7c	6b c0 24	 imul	 eax, 36			; 00000024H
  00f7f	c6 84 05 8c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 340  : 			pMsg.tdata[i].ok_credit = 0;

  00f87	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00f8d	6b c0 24	 imul	 eax, 36			; 00000024H
  00f90	c6 84 05 ac fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+40], 0
$LN3@GCWindows:

; 341  : 		}
; 342  : 		if(this->data[i].Master)

  00f98	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00f9e	6b c0 18	 imul	 eax, 24			; 00000018H
  00fa1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fa4	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00fa9	85 d2		 test	 edx, edx
  00fab	74 30		 je	 SHORT $LN1@GCWindows

; 343  : 		{
; 344  : 			if(!lpUser->ChangeUP3rd)

  00fad	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00fb0	0f b6 88 bc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+188]
  00fb7	85 c9		 test	 ecx, ecx
  00fb9	75 22		 jne	 SHORT $LN1@GCWindows

; 345  : 			{
; 346  : 				pMsg.tdata[i].result = 0;

  00fbb	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00fc1	6b c0 24	 imul	 eax, 36			; 00000024H
  00fc4	c6 84 05 8c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 347  : 				pMsg.tdata[i].ok_Master = 0;

  00fcc	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _i$228408[ebp]
  00fd2	6b c0 24	 imul	 eax, 36			; 00000024H
  00fd5	c6 84 05 ae fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+42], 0
$LN1@GCWindows:

; 348  : 			}
; 349  : 		}
; 350  : 	}

  00fdd	e9 b5 fb ff ff	 jmp	 $LN11@GCWindows
$LN10@GCWindows:

; 351  : 
; 352  : 	DataSend(lpUser->m_Index, (LPBYTE)&pMsg, sizeof(pMsg));

  00fe2	68 70 01 00 00	 push	 368			; 00000170H
  00fe7	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00fed	50		 push	 eax
  00fee	8b 4d f4	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00ff1	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ff3	52		 push	 edx
  00ff4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00ff9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@GCWindows:

; 353  : }

  00ffc	5f		 pop	 edi
  00ffd	5e		 pop	 esi
  00ffe	5b		 pop	 ebx
  00fff	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01002	33 cd		 xor	 ecx, ebp
  01004	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01009	8b e5		 mov	 esp, ebp
  0100b	5d		 pop	 ebp
  0100c	c2 04 00	 ret	 4
?GCWindows@ExTeleport@@QAEXH@Z ENDP			; ExTeleport::GCWindows
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z PROC			; PWMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 149  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 150  : 		lpBuf[0] = 0xC2;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H

; 151  : 		lpBuf[1] = SET_NUMBERH(size);

  00012	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00015	c1 e8 08	 shr	 eax, 8
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  0001b	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 152  : 		lpBuf[2] = SET_NUMBERL(size);

  0001e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00021	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00029	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 153  : 		lpBuf[3] = head;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0002f	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00032	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 154  : 		lpBuf[4] = sub;

  00035	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00038	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0003b	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 155  : 	}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 10 00	 ret	 16			; 00000010H
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ENDP			; PWMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?CGResult@ExTeleport@@QAEXPAUPMSG_CG_TELEPORTWINRES@@H@Z ; ExTeleport::CGResult
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?ExUserDataSend@@YAXH@Z:PROC			; ExUserDataSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exteleport.cpp
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv286 = -80						; size = 4
tv266 = -80						; size = 4
tv259 = -80						; size = 4
tv67 = -80						; size = 4
_i$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
_aUserIndex$ = 12					; size = 4
?CGResult@ExTeleport@@QAEXPAUPMSG_CG_TELEPORTWINRES@@H@Z PROC ; ExTeleport::CGResult
; _this$ = ecx

; 357  : {

  01010	55		 push	 ebp
  01011	8b ec		 mov	 ebp, esp
  01013	83 ec 50	 sub	 esp, 80			; 00000050H
  01016	53		 push	 ebx
  01017	56		 push	 esi
  01018	57		 push	 edi
  01019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 358  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  0101c	83 7d 0c 00	 cmp	 DWORD PTR _aUserIndex$[ebp], 0
  01020	7d 09		 jge	 SHORT $LN18@CGResult
  01022	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  01029	eb 0f		 jmp	 SHORT $LN19@CGResult
$LN18@CGResult:
  0102b	33 c0		 xor	 eax, eax
  0102d	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aUserIndex$[ebp], 14999 ; 00003a97H
  01034	0f 9e c0	 setle	 al
  01037	89 45 b0	 mov	 DWORD PTR tv67[ebp], eax
$LN19@CGResult:
  0103a	83 7d b0 00	 cmp	 DWORD PTR tv67[ebp], 0
  0103e	75 05		 jne	 SHORT $LN15@CGResult

; 359  : 	{
; 360  : 		return;

  01040	e9 37 02 00 00	 jmp	 $LN16@CGResult
$LN15@CGResult:

; 361  : 	}
; 362  : 
; 363  : 	LPOBJ lpUser = &gObj[aUserIndex];

  01045	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  01048	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0104e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01054	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 364  : 
; 365  : 	if(lpUser->Connected < PLAYER_PLAYING)

  01057	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0105a	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0105e	7d 05		 jge	 SHORT $LN14@CGResult

; 366  : 	{
; 367  : 		return;

  01060	e9 17 02 00 00	 jmp	 $LN16@CGResult
$LN14@CGResult:

; 368  : 	}
; 369  : 
; 370  : 	int i = aRecv->result;

  01065	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01068	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0106c	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx

; 371  : 
; 372  : 	if(i < 0 || i > this->iLoadedCount)

  0106f	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  01073	7c 0b		 jl	 SHORT $LN12@CGResult
  01075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01078	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0107b	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0107e	7e 05		 jle	 SHORT $LN13@CGResult
$LN12@CGResult:

; 373  : 	{
; 374  : 		return;

  01080	e9 f7 01 00 00	 jmp	 $LN16@CGResult
$LN13@CGResult:

; 375  : 	}
; 376  : 
; 377  : 	if(this->data[i].level > lpUser->Level)

  01085	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01088	6b c0 18	 imul	 eax, 24			; 00000018H
  0108b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0108e	0f b7 54 01 1c	 movzx	 edx, WORD PTR [ecx+eax+28]
  01093	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01096	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0109d	3b d1		 cmp	 edx, ecx
  0109f	7e 05		 jle	 SHORT $LN11@CGResult

; 378  : 	{
; 379  : 		return;

  010a1	e9 d6 01 00 00	 jmp	 $LN16@CGResult
$LN11@CGResult:

; 380  : 	}
; 381  : 	if(this->data[i].reset > lpUser->Reset)

  010a6	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  010a9	6b c0 18	 imul	 eax, 24			; 00000018H
  010ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010af	0f b7 54 01 1e	 movzx	 edx, WORD PTR [ecx+eax+30]
  010b4	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  010b7	3b 90 90 22 00
	00		 cmp	 edx, DWORD PTR [eax+8848]
  010bd	7e 05		 jle	 SHORT $LN10@CGResult

; 382  : 	{
; 383  : 		return;

  010bf	e9 b8 01 00 00	 jmp	 $LN16@CGResult
$LN10@CGResult:

; 384  : 	}
; 385  : 	if(this->data[i].grand > lpUser->GReset)

  010c4	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  010c7	6b c0 18	 imul	 eax, 24			; 00000018H
  010ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010cd	0f b7 54 01 20	 movzx	 edx, WORD PTR [ecx+eax+32]
  010d2	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  010d5	3b 90 94 22 00
	00		 cmp	 edx, DWORD PTR [eax+8852]
  010db	7e 05		 jle	 SHORT $LN9@CGResult

; 386  : 	{
; 387  : 		return;

  010dd	e9 9a 01 00 00	 jmp	 $LN16@CGResult
$LN9@CGResult:

; 388  : 	}
; 389  : 	if(this->data[i].premium > 0)

  010e2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  010e5	6b c0 18	 imul	 eax, 24			; 00000018H
  010e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010eb	0f b6 54 01 22	 movzx	 edx, BYTE PTR [ecx+eax+34]
  010f0	85 d2		 test	 edx, edx
  010f2	7e 11		 jle	 SHORT $LN7@CGResult

; 390  : 	{
; 391  : 		#if(LICENSE_MUEVIL)
; 392  : 		if(this->data[i].premium > lpUser->PremiumTimeType)
; 393  : 		{
; 394  : 			return;
; 395  : 		}
; 396  : 		#endif
; 397  : 		if(lpUser->PremiumTime <= 0)

  010f4	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  010f7	83 b8 b8 22 00
	00 00		 cmp	 DWORD PTR [eax+8888], 0
  010fe	7f 05		 jg	 SHORT $LN7@CGResult

; 398  : 		{
; 399  : 			return;

  01100	e9 77 01 00 00	 jmp	 $LN16@CGResult
$LN7@CGResult:

; 400  : 		}		
; 401  : 	}
; 402  : 	if(this->data[i].zen > lpUser->Money)

  01105	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01108	6b c0 18	 imul	 eax, 24			; 00000018H
  0110b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0110e	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01111	8b 44 01 24	 mov	 eax, DWORD PTR [ecx+eax+36]
  01115	3b 82 f0 00 00
	00		 cmp	 eax, DWORD PTR [edx+240]
  0111b	76 05		 jbe	 SHORT $LN6@CGResult

; 403  : 	{
; 404  : 		return;

  0111d	e9 5a 01 00 00	 jmp	 $LN16@CGResult
$LN6@CGResult:

; 405  : 	}
; 406  : 	if(this->data[i].bonus > lpUser->GameShop.WCoinC)

  01122	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01125	6b c0 18	 imul	 eax, 24			; 00000018H
  01128	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0112b	0f b7 54 01 28	 movzx	 edx, WORD PTR [ecx+eax+40]
  01130	89 55 b0	 mov	 DWORD PTR tv259[ebp], edx
  01133	db 45 b0	 fild	 DWORD PTR tv259[ebp]
  01136	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01139	dc 98 00 23 00
	00		 fcomp	 QWORD PTR [eax+8960]
  0113f	df e0		 fnstsw	 ax
  01141	f6 c4 41	 test	 ah, 65			; 00000041H
  01144	75 05		 jne	 SHORT $LN5@CGResult

; 407  : 	{
; 408  : 		return;

  01146	e9 31 01 00 00	 jmp	 $LN16@CGResult
$LN5@CGResult:

; 409  : 	}
; 410  : 	if(this->data[i].credit > lpUser->ExCred)

  0114b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0114e	6b c0 18	 imul	 eax, 24			; 00000018H
  01151	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01154	0f b7 54 01 2a	 movzx	 edx, WORD PTR [ecx+eax+42]
  01159	89 55 b0	 mov	 DWORD PTR tv266[ebp], edx
  0115c	db 45 b0	 fild	 DWORD PTR tv266[ebp]
  0115f	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01162	d9 80 a8 22 00
	00		 fld	 DWORD PTR [eax+8872]
  01168	de d9		 fcompp
  0116a	df e0		 fnstsw	 ax
  0116c	f6 c4 05	 test	 ah, 5
  0116f	7a 05		 jp	 SHORT $LN4@CGResult

; 411  : 	{
; 412  : 		return;

  01171	e9 06 01 00 00	 jmp	 $LN16@CGResult
$LN4@CGResult:

; 413  : 	}
; 414  : 	// ----
; 415  : 	if(this->data[i].zen > 0)

  01176	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01179	6b c0 18	 imul	 eax, 24			; 00000018H
  0117c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0117f	83 7c 01 24 00	 cmp	 DWORD PTR [ecx+eax+36], 0
  01184	76 35		 jbe	 SHORT $LN3@CGResult

; 416  : 	{
; 417  : 		lpUser->Money -= this->data[i].zen;

  01186	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01189	6b c0 18	 imul	 eax, 24			; 00000018H
  0118c	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0118f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01192	8b 89 f0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+240]
  01198	2b 4c 02 24	 sub	 ecx, DWORD PTR [edx+eax+36]
  0119c	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  0119f	89 8a f0 00 00
	00		 mov	 DWORD PTR [edx+240], ecx

; 418  : 		GCMoneySend(aUserIndex, lpUser->Money);

  011a5	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  011a8	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  011ae	51		 push	 ecx
  011af	8b 55 0c	 mov	 edx, DWORD PTR _aUserIndex$[ebp]
  011b2	52		 push	 edx
  011b3	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  011b8	83 c4 08	 add	 esp, 8
$LN3@CGResult:

; 419  : 	}
; 420  : 	if(this->data[i].bonus > 0)

  011bb	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  011be	6b c0 18	 imul	 eax, 24			; 00000018H
  011c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011c4	0f b7 54 01 28	 movzx	 edx, WORD PTR [ecx+eax+40]
  011c9	85 d2		 test	 edx, edx
  011cb	7e 32		 jle	 SHORT $LN2@CGResult

; 421  : 	{
; 422  : 		lpUser->GameShop.WCoinC -= this->data[i].bonus;

  011cd	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  011d0	6b c0 18	 imul	 eax, 24			; 00000018H
  011d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011d6	0f b7 54 01 28	 movzx	 edx, WORD PTR [ecx+eax+40]
  011db	89 55 b0	 mov	 DWORD PTR tv286[ebp], edx
  011de	db 45 b0	 fild	 DWORD PTR tv286[ebp]
  011e1	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  011e4	dc a8 00 23 00
	00		 fsubr	 QWORD PTR [eax+8960]
  011ea	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  011ed	dd 99 00 23 00
	00		 fstp	 QWORD PTR [ecx+8960]

; 423  : 		ExUserDataSend(aUserIndex);

  011f3	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  011f6	50		 push	 eax
  011f7	e8 00 00 00 00	 call	 ?ExUserDataSend@@YAXH@Z	; ExUserDataSend
  011fc	83 c4 04	 add	 esp, 4
$LN2@CGResult:

; 424  : 	}
; 425  : 	if(this->data[i].credit > 0)

  011ff	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01202	6b c0 18	 imul	 eax, 24			; 00000018H
  01205	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01208	0f b7 54 01 2a	 movzx	 edx, WORD PTR [ecx+eax+42]
  0120d	85 d2		 test	 edx, edx
  0120f	7e 32		 jle	 SHORT $LN1@CGResult

; 426  : 	{
; 427  : 		lpUser->ExCred -= this->data[i].credit;

  01211	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01214	6b c0 18	 imul	 eax, 24			; 00000018H
  01217	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0121a	0f b7 54 01 2a	 movzx	 edx, WORD PTR [ecx+eax+42]
  0121f	89 55 b0	 mov	 DWORD PTR tv295[ebp], edx
  01222	db 45 b0	 fild	 DWORD PTR tv295[ebp]
  01225	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01228	d8 a8 a8 22 00
	00		 fsubr	 DWORD PTR [eax+8872]
  0122e	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01231	d9 99 a8 22 00
	00		 fstp	 DWORD PTR [ecx+8872]

; 428  : 		ExUserDataSend(aUserIndex);

  01237	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  0123a	50		 push	 eax
  0123b	e8 00 00 00 00	 call	 ?ExUserDataSend@@YAXH@Z	; ExUserDataSend
  01240	83 c4 04	 add	 esp, 4
$LN1@CGResult:

; 429  : 	}
; 430  : 
; 431  : 	gObjTeleport(aUserIndex, this->data[i].map, this->data[i].x, this->data[i].y);

  01243	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01246	6b c0 18	 imul	 eax, 24			; 00000018H
  01249	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0124c	0f b6 54 01 1a	 movzx	 edx, BYTE PTR [ecx+eax+26]
  01251	52		 push	 edx
  01252	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01255	6b c0 18	 imul	 eax, 24			; 00000018H
  01258	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0125b	0f b6 54 01 19	 movzx	 edx, BYTE PTR [ecx+eax+25]
  01260	52		 push	 edx
  01261	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01264	6b c0 18	 imul	 eax, 24			; 00000018H
  01267	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0126a	0f b6 54 01 18	 movzx	 edx, BYTE PTR [ecx+eax+24]
  0126f	52		 push	 edx
  01270	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  01273	50		 push	 eax
  01274	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  01279	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@CGResult:

; 432  : }

  0127c	5f		 pop	 edi
  0127d	5e		 pop	 esi
  0127e	5b		 pop	 ebx
  0127f	8b e5		 mov	 esp, ebp
  01281	5d		 pop	 ebp
  01282	c2 08 00	 ret	 8
?CGResult@ExTeleport@@QAEXPAUPMSG_CG_TELEPORTWINRES@@H@Z ENDP ; ExTeleport::CGResult
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_ExTeleport@@YAXXZ
text$yc	SEGMENT
??__Eg_ExTeleport@@YAXXZ PROC				; `dynamic initializer for 'g_ExTeleport'', COMDAT

; 13   : ExTeleport g_ExTeleport;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExTeleport@@3VExTeleport@@A ; g_ExTeleport
  0000e	e8 00 00 00 00	 call	 ??0ExTeleport@@QAE@XZ	; ExTeleport::ExTeleport
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_ExTeleport@@YAXXZ ; `dynamic atexit destructor for 'g_ExTeleport''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_ExTeleport@@YAXXZ ENDP				; `dynamic initializer for 'g_ExTeleport''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_ExTeleport@@YAXXZ
text$yd	SEGMENT
??__Fg_ExTeleport@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ExTeleport'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExTeleport@@3VExTeleport@@A ; g_ExTeleport
  0000e	e8 00 00 00 00	 call	 ??1ExTeleport@@QAE@XZ	; ExTeleport::~ExTeleport
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_ExTeleport@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ExTeleport''
text$yd	ENDS
PUBLIC	?g_ExTeleport@@3VExTeleport@@A			; g_ExTeleport
_BSS	SEGMENT
?g_ExTeleport@@3VExTeleport@@A DB 0108H DUP (?)		; g_ExTeleport
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ExTeleport$initializer$ DD FLAT:??__Eg_ExTeleport@@YAXXZ
CRT$XCU	ENDS
END
