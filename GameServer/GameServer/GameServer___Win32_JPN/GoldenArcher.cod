; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\GoldenArcher.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GoldenArcher@@3VcGoldenArcher@@A		; GoldenArcher
_BSS	SEGMENT
?GoldenArcher@@3VcGoldenArcher@@A DB 0710H DUP (?)	; GoldenArcher
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Start@cGoldenArcher@@QAEXXZ			; cGoldenArcher::Start
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\goldenarcher.cpp
_TEXT	SEGMENT
_i$219735 = -8						; size = 4
_this$ = -4						; size = 4
?Start@cGoldenArcher@@QAEXXZ PROC			; cGoldenArcher::Start
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 13   : 	for (int i=0; i < 100; i++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$219735[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN3@Start
$LN2@Start:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$219735[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$219735[ebp], eax
$LN3@Start:
  0001e	83 7d f8 64	 cmp	 DWORD PTR _i$219735[ebp], 100 ; 00000064H
  00022	0f 8d 85 00 00
	00		 jge	 $LN4@Start

; 14   : 	{
; 15   : 		Items[i].Index		= 0;

  00028	8b 45 f8	 mov	 eax, DWORD PTR _i$219735[ebp]
  0002b	6b c0 12	 imul	 eax, 18			; 00000012H
  0002e	33 c9		 xor	 ecx, ecx
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	66 89 4c 02 04	 mov	 WORD PTR [edx+eax+4], cx

; 16   : 		Items[i].ItemID		= 0;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _i$219735[ebp]
  0003b	6b c0 12	 imul	 eax, 18			; 00000012H
  0003e	33 c9		 xor	 ecx, ecx
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	66 89 4c 02 06	 mov	 WORD PTR [edx+eax+6], cx

; 17   : 		Items[i].Level		= 0;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _i$219735[ebp]
  0004b	6b c0 12	 imul	 eax, 18			; 00000012H
  0004e	33 c9		 xor	 ecx, ecx
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	66 89 4c 02 08	 mov	 WORD PTR [edx+eax+8], cx

; 18   : 		Items[i].Skill		= 0;

  00058	8b 45 f8	 mov	 eax, DWORD PTR _i$219735[ebp]
  0005b	6b c0 12	 imul	 eax, 18			; 00000012H
  0005e	33 c9		 xor	 ecx, ecx
  00060	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00063	66 89 4c 02 0a	 mov	 WORD PTR [edx+eax+10], cx

; 19   : 		Items[i].Luck		= 0;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _i$219735[ebp]
  0006b	6b c0 12	 imul	 eax, 18			; 00000012H
  0006e	33 c9		 xor	 ecx, ecx
  00070	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00073	66 89 4c 02 0c	 mov	 WORD PTR [edx+eax+12], cx

; 20   : 		Items[i].Options	= 0;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _i$219735[ebp]
  0007b	6b c0 12	 imul	 eax, 18			; 00000012H
  0007e	33 c9		 xor	 ecx, ecx
  00080	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00083	66 89 4c 02 0e	 mov	 WORD PTR [edx+eax+14], cx

; 21   : 		Items[i].Exl		= 0;

  00088	8b 45 f8	 mov	 eax, DWORD PTR _i$219735[ebp]
  0008b	6b c0 12	 imul	 eax, 18			; 00000012H
  0008e	33 c9		 xor	 ecx, ecx
  00090	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00093	66 89 4c 02 10	 mov	 WORD PTR [edx+eax+16], cx

; 22   : 		Items[i].Anc		= 0;

  00098	8b 45 f8	 mov	 eax, DWORD PTR _i$219735[ebp]
  0009b	6b c0 12	 imul	 eax, 18			; 00000012H
  0009e	33 c9		 xor	 ecx, ecx
  000a0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	66 89 4c 02 12	 mov	 WORD PTR [edx+eax+18], cx

; 23   : 	}

  000a8	e9 68 ff ff ff	 jmp	 $LN2@Start
$LN4@Start:

; 24   : }

  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
?Start@cGoldenArcher@@QAEXXZ ENDP			; cGoldenArcher::Start
_TEXT	ENDS
PUBLIC	??_C@_0BL@KIOGKLLB@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0EM@OOOCAHNM@?$FLGoldenArcher?$FN?5Info?5file?5Load?5Fa@ ; `string'
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0N@OMGHBJKJ@GoldenArcher?$AA@		; `string'
PUBLIC	??_C@_09JIJFGCOH@RenaCount?$AA@			; `string'
PUBLIC	??_C@_0CH@JNBEPOLF@?4?4?2Data?2ExData?2Events?2GoldenArch@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cGoldenArcher@@QAEXXZ			; cGoldenArcher::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BL@KIOGKLLB@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BL@KIOGKLLB@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%'
	DB	'd %d %d %d %d %d %d %d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@OOOCAHNM@?$FLGoldenArcher?$FN?5Info?5file?5Load?5Fa@
CONST	SEGMENT
??_C@_0EM@OOOCAHNM@?$FLGoldenArcher?$FN?5Info?5file?5Load?5Fa@ DB '[Golde'
	DB	'nArcher] Info file Load Fail [..\Data\ExData\Events\GoldenArc'
	DB	'her.ini]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OMGHBJKJ@GoldenArcher?$AA@
CONST	SEGMENT
??_C@_0N@OMGHBJKJ@GoldenArcher?$AA@ DB 'GoldenArcher', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JIJFGCOH@RenaCount?$AA@
CONST	SEGMENT
??_C@_09JIJFGCOH@RenaCount?$AA@ DB 'RenaCount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JNBEPOLF@?4?4?2Data?2ExData?2Events?2GoldenArch@
CONST	SEGMENT
??_C@_0CH@JNBEPOLF@?4?4?2Data?2ExData?2Events?2GoldenArch@ DB '..\Data\Ex'
	DB	'Data\Events\GoldenArcher.ini', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$219757 = -308					; size = 36
_Flag$ = -272						; size = 4
_Buff$ = -268						; size = 256
_file$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Load@cGoldenArcher@@QAEXXZ PROC			; cGoldenArcher::Load
; _this$ = ecx

; 27   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp
  000c3	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000ce	33 c5		 xor	 eax, ebp
  000d0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000d3	53		 push	 ebx
  000d4	56		 push	 esi
  000d5	57		 push	 edi
  000d6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	this->Ex_RenaCount = GetPrivateProfileInt("GoldenArcher","RenaCount",1,"..\\Data\\ExData\\Events\\GoldenArcher.ini");

  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@JNBEPOLF@?4?4?2Data?2ExData?2Events?2GoldenArch@
  000de	6a 01		 push	 1
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_09JIJFGCOH@RenaCount?$AA@
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OMGHBJKJ@GoldenArcher?$AA@
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  000f0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	89 01		 mov	 DWORD PTR [ecx], eax

; 29   : 	GoldenArcher.Start();

  000f5	b9 00 00 00 00	 mov	 ecx, OFFSET ?GoldenArcher@@3VcGoldenArcher@@A ; GoldenArcher
  000fa	e8 00 00 00 00	 call	 ?Start@cGoldenArcher@@QAEXXZ ; cGoldenArcher::Start

; 30   : 
; 31   : 	FILE *file;
; 32   : 	file = fopen("..\\Data\\ExData\\Events\\GoldenArcher.ini","r");

  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@JNBEPOLF@?4?4?2Data?2ExData?2Events?2GoldenArch@
  00109	e8 00 00 00 00	 call	 _fopen
  0010e	83 c4 08	 add	 esp, 8
  00111	89 45 f4	 mov	 DWORD PTR _file$[ebp], eax

; 33   : 
; 34   : 	if (file == NULL)

  00114	83 7d f4 00	 cmp	 DWORD PTR _file$[ebp], 0
  00118	75 21		 jne	 SHORT $LN5@Load

; 35   : 	{
; 36   : 		MessageBoxA(0,"[GoldenArcher] Info file Load Fail [..\\Data\\ExData\\Events\\GoldenArcher.ini]","LOAD FILE ERROR",0);

  0011a	6a 00		 push	 0
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OOOCAHNM@?$FLGoldenArcher?$FN?5Info?5file?5Load?5Fa@
  00126	6a 00		 push	 0
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 37   : 		ExitProcess(1);

  0012e	6a 01		 push	 1
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4

; 38   : 		return;

  00136	e9 db 01 00 00	 jmp	 $LN7@Load
$LN5@Load:

; 39   : 	}
; 40   : 
; 41   : 	char Buff[256];
; 42   : 	int Flag = 0;

  0013b	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0

; 43   : 	ArcherItemsCount = 0;

  00145	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00148	c7 80 0c 07 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1804], 0
$LN4@Load:

; 44   : 
; 45   : 	while (!feof(file))

  00152	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 _feof
  0015b	83 c4 04	 add	 esp, 4
  0015e	85 c0		 test	 eax, eax
  00160	0f 85 a4 01 00
	00		 jne	 $LN3@Load

; 46   : 	{
; 47   : 		fgets(Buff,256,file);

  00166	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00169	50		 push	 eax
  0016a	68 00 01 00 00	 push	 256			; 00000100H
  0016f	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00175	51		 push	 ecx
  00176	e8 00 00 00 00	 call	 _fgets
  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   : 
; 49   : 		if(Ex_IsBadFileLine(Buff, Flag))

  0017e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  00184	50		 push	 eax
  00185	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0018b	51		 push	 ecx
  0018c	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  00191	83 c4 08	 add	 esp, 8
  00194	0f b6 d0	 movzx	 edx, al
  00197	85 d2		 test	 edx, edx
  00199	74 02		 je	 SHORT $LN2@Load

; 50   : 			continue;

  0019b	eb b5		 jmp	 SHORT $LN4@Load
$LN2@Load:

; 51   : 
; 52   : 		if (Flag == 1)

  0019d	83 bd f0 fe ff
	ff 01		 cmp	 DWORD PTR _Flag$[ebp], 1
  001a4	0f 85 5b 01 00
	00		 jne	 $LN1@Load

; 53   : 		{
; 54   : 			int n[9];
; 55   : 
; 56   : 			sscanf(Buff,"%d %d %d %d %d %d %d %d %d", &n[0], &n[1], &n[2], &n[3], &n[4], &n[5], &n[6], &n[7], &n[8]);

  001aa	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$219757[ebp+32]
  001b0	50		 push	 eax
  001b1	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219757[ebp+28]
  001b7	51		 push	 ecx
  001b8	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$219757[ebp+24]
  001be	52		 push	 edx
  001bf	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$219757[ebp+20]
  001c5	50		 push	 eax
  001c6	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _n$219757[ebp+16]
  001cc	51		 push	 ecx
  001cd	8d 95 d8 fe ff
	ff		 lea	 edx, DWORD PTR _n$219757[ebp+12]
  001d3	52		 push	 edx
  001d4	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _n$219757[ebp+8]
  001da	50		 push	 eax
  001db	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219757[ebp+4]
  001e1	51		 push	 ecx
  001e2	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR _n$219757[ebp]
  001e8	52		 push	 edx
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KIOGKLLB@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  001ee	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 _sscanf
  001fa	83 c4 2c	 add	 esp, 44			; 0000002cH

; 57   : 
; 58   : 			Items[ArcherItemsCount].Index	= n[0];

  001fd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00200	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  00206	6b c9 12	 imul	 ecx, 18			; 00000012H
  00209	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0020c	66 8b 85 cc fe
	ff ff		 mov	 ax, WORD PTR _n$219757[ebp]
  00213	66 89 44 0a 04	 mov	 WORD PTR [edx+ecx+4], ax

; 59   : 			Items[ArcherItemsCount].ItemID	= n[1];

  00218	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0021b	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  00221	6b c9 12	 imul	 ecx, 18			; 00000012H
  00224	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00227	66 8b 85 d0 fe
	ff ff		 mov	 ax, WORD PTR _n$219757[ebp+4]
  0022e	66 89 44 0a 06	 mov	 WORD PTR [edx+ecx+6], ax

; 60   : 			Items[ArcherItemsCount].Level	= n[2];

  00233	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00236	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  0023c	6b c9 12	 imul	 ecx, 18			; 00000012H
  0023f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00242	66 8b 85 d4 fe
	ff ff		 mov	 ax, WORD PTR _n$219757[ebp+8]
  00249	66 89 44 0a 08	 mov	 WORD PTR [edx+ecx+8], ax

; 61   : 			Items[ArcherItemsCount].Skill	= n[3];

  0024e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00251	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  00257	6b c9 12	 imul	 ecx, 18			; 00000012H
  0025a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0025d	66 8b 85 d8 fe
	ff ff		 mov	 ax, WORD PTR _n$219757[ebp+12]
  00264	66 89 44 0a 0a	 mov	 WORD PTR [edx+ecx+10], ax

; 62   : 			Items[ArcherItemsCount].Luck	= n[4];

  00269	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0026c	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  00272	6b c9 12	 imul	 ecx, 18			; 00000012H
  00275	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00278	66 8b 85 dc fe
	ff ff		 mov	 ax, WORD PTR _n$219757[ebp+16]
  0027f	66 89 44 0a 0c	 mov	 WORD PTR [edx+ecx+12], ax

; 63   : 			Items[ArcherItemsCount].Options	= n[5];

  00284	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00287	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  0028d	6b c9 12	 imul	 ecx, 18			; 00000012H
  00290	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00293	66 8b 85 e0 fe
	ff ff		 mov	 ax, WORD PTR _n$219757[ebp+20]
  0029a	66 89 44 0a 0e	 mov	 WORD PTR [edx+ecx+14], ax

; 64   : 			Items[ArcherItemsCount].Exl		= n[6];

  0029f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002a2	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  002a8	6b c9 12	 imul	 ecx, 18			; 00000012H
  002ab	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002ae	66 8b 85 e4 fe
	ff ff		 mov	 ax, WORD PTR _n$219757[ebp+24]
  002b5	66 89 44 0a 10	 mov	 WORD PTR [edx+ecx+16], ax

; 65   : 			Items[ArcherItemsCount].Anc		= n[7];

  002ba	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002bd	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  002c3	6b c9 12	 imul	 ecx, 18			; 00000012H
  002c6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002c9	66 8b 85 e8 fe
	ff ff		 mov	 ax, WORD PTR _n$219757[ebp+28]
  002d0	66 89 44 0a 12	 mov	 WORD PTR [edx+ecx+18], ax

; 66   : 			Items[ArcherItemsCount].Count	= n[8];

  002d5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002d8	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  002de	6b c9 12	 imul	 ecx, 18			; 00000012H
  002e1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002e4	66 8b 85 ec fe
	ff ff		 mov	 ax, WORD PTR _n$219757[ebp+32]
  002eb	66 89 44 0a 14	 mov	 WORD PTR [edx+ecx+20], ax

; 67   : 
; 68   : 			ArcherItemsCount++;

  002f0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002f3	8b 88 0c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1804]
  002f9	83 c1 01	 add	 ecx, 1
  002fc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002ff	89 8a 0c 07 00
	00		 mov	 DWORD PTR [edx+1804], ecx
$LN1@Load:

; 69   : 		}
; 70   : 	}

  00305	e9 48 fe ff ff	 jmp	 $LN4@Load
$LN3@Load:

; 71   : 
; 72   : 	fclose(file);

  0030a	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 _fclose
  00313	83 c4 04	 add	 esp, 4
$LN7@Load:

; 73   : }

  00316	5f		 pop	 edi
  00317	5e		 pop	 esi
  00318	5b		 pop	 ebx
  00319	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031c	33 cd		 xor	 ecx, ebp
  0031e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00323	8b e5		 mov	 esp, ebp
  00325	5d		 pop	 ebp
  00326	c3		 ret	 0
?Load@cGoldenArcher@@QAEXXZ ENDP			; cGoldenArcher::Load
_TEXT	ENDS
PUBLIC	??_C@_0BG@MPAKDKHC@?$FLArcher?$FN?5Need?5?$CFd?5Rens?$AA@ ; `string'
PUBLIC	?ClickArcher@cGoldenArcher@@QAEXH@Z		; cGoldenArcher::ClickArcher
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
EXTRN	_rand:PROC
EXTRN	?gObjDeleteItemsCount@@YAHHFFH@Z:PROC		; gObjDeleteItemsCount
EXTRN	?MsgNormal@@YAXHPADZZ:PROC			; MsgNormal
EXTRN	?gObjGetItemCountInInventory@@YAHHHH@Z:PROC	; gObjGetItemCountInInventory
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0BG@MPAKDKHC@?$FLArcher?$FN?5Need?5?$CFd?5Rens?$AA@
CONST	SEGMENT
??_C@_0BG@MPAKDKHC@?$FLArcher?$FN?5Need?5?$CFd?5Rens?$AA@ DB '[Archer] Ne'
	DB	'ed %d Rens', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$219773 = -28						; size = 4
_Type$ = -24						; size = 4
_Anc$ = -20						; size = 4
_Exe$ = -16						; size = 4
_num$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_PlayerID$ = 8						; size = 4
?ClickArcher@cGoldenArcher@@QAEXH@Z PROC		; cGoldenArcher::ClickArcher
; _this$ = ecx

; 75   : {

  00330	55		 push	 ebp
  00331	8b ec		 mov	 ebp, esp
  00333	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00336	53		 push	 ebx
  00337	56		 push	 esi
  00338	57		 push	 edi
  00339	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 76   : 	LPOBJ lpObj = &gObj[PlayerID];

  0033c	8b 45 08	 mov	 eax, DWORD PTR _PlayerID$[ebp]
  0033f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00345	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0034b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 77   : 
; 78   : 	if(gObjGetItemCountInInventory(PlayerID,0x01C15,0) < this->Ex_RenaCount)

  0034e	6a 00		 push	 0
  00350	68 15 1c 00 00	 push	 7189			; 00001c15H
  00355	8b 45 08	 mov	 eax, DWORD PTR _PlayerID$[ebp]
  00358	50		 push	 eax
  00359	e8 00 00 00 00	 call	 ?gObjGetItemCountInInventory@@YAHHHH@Z ; gObjGetItemCountInInventory
  0035e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00361	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00364	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00366	7d 1c		 jge	 SHORT $LN7@ClickArche

; 79   : 	{
; 80   : 		MsgNormal(PlayerID,"[Archer] Need %d Rens",this->Ex_RenaCount);

  00368	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0036b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036d	51		 push	 ecx
  0036e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MPAKDKHC@?$FLArcher?$FN?5Need?5?$CFd?5Rens?$AA@
  00373	8b 55 08	 mov	 edx, DWORD PTR _PlayerID$[ebp]
  00376	52		 push	 edx
  00377	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  0037c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 81   : 		return;

  0037f	e9 6b 01 00 00	 jmp	 $LN8@ClickArche
$LN7@ClickArche:

; 82   : 	}
; 83   : 
; 84   : 	gObjDeleteItemsCount(PlayerID,0x01C15,0,this->Ex_RenaCount);

  00384	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00387	8b 08		 mov	 ecx, DWORD PTR [eax]
  00389	51		 push	 ecx
  0038a	6a 00		 push	 0
  0038c	68 15 1c 00 00	 push	 7189			; 00001c15H
  00391	8b 55 08	 mov	 edx, DWORD PTR _PlayerID$[ebp]
  00394	52		 push	 edx
  00395	e8 00 00 00 00	 call	 ?gObjDeleteItemsCount@@YAHHFFH@Z ; gObjDeleteItemsCount
  0039a	83 c4 10	 add	 esp, 16			; 00000010H

; 85   : 
; 86   : 	int num = rand()%ArcherItemsCount;

  0039d	e8 00 00 00 00	 call	 _rand
  003a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a5	99		 cdq
  003a6	f7 b9 0c 07 00
	00		 idiv	 DWORD PTR [ecx+1804]
  003ac	89 55 f4	 mov	 DWORD PTR _num$[ebp], edx

; 87   : 	int Exe = 0;

  003af	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Exe$[ebp], 0

; 88   : 	int Anc = 0;

  003b6	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Anc$[ebp], 0

; 89   : 	int Type = ITEMGET(Items[num].Index,Items[num].ItemID);

  003bd	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  003c0	6b c0 12	 imul	 eax, 18			; 00000012H
  003c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003c6	0f bf 54 01 04	 movsx	 edx, WORD PTR [ecx+eax+4]
  003cb	c1 e2 09	 shl	 edx, 9
  003ce	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  003d1	6b c0 12	 imul	 eax, 18			; 00000012H
  003d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003d7	0f bf 44 01 06	 movsx	 eax, WORD PTR [ecx+eax+6]
  003dc	03 d0		 add	 edx, eax
  003de	89 55 e8	 mov	 DWORD PTR _Type$[ebp], edx

; 90   : 	if ( Items[num].Exl > 0 )

  003e1	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  003e4	6b c0 12	 imul	 eax, 18			; 00000012H
  003e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003ea	0f bf 54 01 10	 movsx	 edx, WORD PTR [ecx+eax+16]
  003ef	85 d2		 test	 edx, edx
  003f1	7e 1a		 jle	 SHORT $LN6@ClickArche

; 91   : 		Exe = GenExcOpt(Items[num].Exl);

  003f3	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  003f6	6b c0 12	 imul	 eax, 18			; 00000012H
  003f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fc	0f bf 54 01 10	 movsx	 edx, WORD PTR [ecx+eax+16]
  00401	52		 push	 edx
  00402	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  00407	83 c4 04	 add	 esp, 4
  0040a	89 45 f0	 mov	 DWORD PTR _Exe$[ebp], eax
$LN6@ClickArche:

; 92   : 
; 93   : 	if ( Items[num].Anc == 5 || Items[num].Anc == 10 )

  0040d	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  00410	6b c0 12	 imul	 eax, 18			; 00000012H
  00413	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00416	0f bf 54 01 12	 movsx	 edx, WORD PTR [ecx+eax+18]
  0041b	83 fa 05	 cmp	 edx, 5
  0041e	74 13		 je	 SHORT $LN4@ClickArche
  00420	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  00423	6b c0 12	 imul	 eax, 18			; 00000012H
  00426	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00429	0f bf 54 01 12	 movsx	 edx, WORD PTR [ecx+eax+18]
  0042e	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00431	75 11		 jne	 SHORT $LN5@ClickArche
$LN4@ClickArche:

; 94   : 		Anc = Items[num].Anc;

  00433	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  00436	6b c0 12	 imul	 eax, 18			; 00000012H
  00439	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0043c	0f bf 54 01 12	 movsx	 edx, WORD PTR [ecx+eax+18]
  00441	89 55 ec	 mov	 DWORD PTR _Anc$[ebp], edx
$LN5@ClickArche:

; 95   : 
; 96   : 	for(int i = 0; i < Items[num].Count; i++)

  00444	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$219773[ebp], 0
  0044b	eb 09		 jmp	 SHORT $LN3@ClickArche
$LN2@ClickArche:
  0044d	8b 45 e4	 mov	 eax, DWORD PTR _i$219773[ebp]
  00450	83 c0 01	 add	 eax, 1
  00453	89 45 e4	 mov	 DWORD PTR _i$219773[ebp], eax
$LN3@ClickArche:
  00456	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  00459	6b c0 12	 imul	 eax, 18			; 00000012H
  0045c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0045f	0f bf 54 01 14	 movsx	 edx, WORD PTR [ecx+eax+20]
  00464	39 55 e4	 cmp	 DWORD PTR _i$219773[ebp], edx
  00467	0f 8d 82 00 00
	00		 jge	 $LN8@ClickArche

; 97   : 	{
; 98   : 		ItemSerialCreateSend(PlayerID,(BYTE)lpObj->MapNumber,(BYTE)lpObj->X,(BYTE)lpObj->Y,Type,(BYTE)Items[num].Level,0,(BYTE)Items[num].Skill,(BYTE)Items[num].Luck,(BYTE)Items[num].Options,PlayerID,(BYTE)Exe,(BYTE)Anc);

  0046d	0f b6 45 ec	 movzx	 eax, BYTE PTR _Anc$[ebp]
  00471	50		 push	 eax
  00472	0f b6 4d f0	 movzx	 ecx, BYTE PTR _Exe$[ebp]
  00476	51		 push	 ecx
  00477	8b 55 08	 mov	 edx, DWORD PTR _PlayerID$[ebp]
  0047a	52		 push	 edx
  0047b	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  0047e	6b c0 12	 imul	 eax, 18			; 00000012H
  00481	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00484	0f b6 54 01 0e	 movzx	 edx, BYTE PTR [ecx+eax+14]
  00489	52		 push	 edx
  0048a	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  0048d	6b c0 12	 imul	 eax, 18			; 00000012H
  00490	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00493	0f b6 54 01 0c	 movzx	 edx, BYTE PTR [ecx+eax+12]
  00498	52		 push	 edx
  00499	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  0049c	6b c0 12	 imul	 eax, 18			; 00000012H
  0049f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004a2	0f b6 54 01 0a	 movzx	 edx, BYTE PTR [ecx+eax+10]
  004a7	52		 push	 edx
  004a8	6a 00		 push	 0
  004aa	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  004ad	6b c0 12	 imul	 eax, 18			; 00000012H
  004b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004b3	0f b6 54 01 08	 movzx	 edx, BYTE PTR [ecx+eax+8]
  004b8	52		 push	 edx
  004b9	8b 45 e8	 mov	 eax, DWORD PTR _Type$[ebp]
  004bc	50		 push	 eax
  004bd	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  004c0	0f b6 91 46 01
	00 00		 movzx	 edx, BYTE PTR [ecx+326]
  004c7	52		 push	 edx
  004c8	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004cb	0f b6 88 44 01
	00 00		 movzx	 ecx, BYTE PTR [eax+324]
  004d2	51		 push	 ecx
  004d3	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  004d6	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  004dd	50		 push	 eax
  004de	8b 4d 08	 mov	 ecx, DWORD PTR _PlayerID$[ebp]
  004e1	51		 push	 ecx
  004e2	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  004e7	83 c4 34	 add	 esp, 52			; 00000034H

; 99   : 	}

  004ea	e9 5e ff ff ff	 jmp	 $LN2@ClickArche
$LN8@ClickArche:

; 100  : }

  004ef	5f		 pop	 edi
  004f0	5e		 pop	 esi
  004f1	5b		 pop	 ebx
  004f2	8b e5		 mov	 esp, ebp
  004f4	5d		 pop	 ebp
  004f5	c2 04 00	 ret	 4
?ClickArcher@cGoldenArcher@@QAEXH@Z ENDP		; cGoldenArcher::ClickArcher
_TEXT	ENDS
END
