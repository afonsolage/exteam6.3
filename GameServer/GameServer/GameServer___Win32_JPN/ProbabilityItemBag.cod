; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ProbabilityItemBag.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CProbabilityItemBagAttrEx@@QAE@XZ		; CProbabilityItemBagAttrEx::CProbabilityItemBagAttrEx
PUBLIC	??0CItemBagDropMapInfo@@QAE@XZ			; CItemBagDropMapInfo::CItemBagDropMapInfo
PUBLIC	??_7CProbabilityItemBag@@6B@			; CProbabilityItemBag::`vftable'
PUBLIC	??0CProbabilityItemBag@@QAE@XZ			; CProbabilityItemBag::CProbabilityItemBag
PUBLIC	??_R4CProbabilityItemBag@@6B@			; CProbabilityItemBag::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCProbabilityItemBag@@@8			; CProbabilityItemBag `RTTI Type Descriptor'
PUBLIC	??_R3CProbabilityItemBag@@8			; CProbabilityItemBag::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProbabilityItemBag@@8			; CProbabilityItemBag::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CProbabilityItemBag@@8		; CProbabilityItemBag::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECProbabilityItemBag@@UAEPAXI@Z:PROC		; CProbabilityItemBag::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CProbabilityItemBag@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\probabilityitembag.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CProbabilityItemBag@@8 DD FLAT:??_R0?AVCProbabilityItemBag@@@8 ; CProbabilityItemBag::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProbabilityItemBag@@8
rdata$r	ENDS
;	COMDAT ??_R2CProbabilityItemBag@@8
rdata$r	SEGMENT
??_R2CProbabilityItemBag@@8 DD FLAT:??_R1A@?0A@EA@CProbabilityItemBag@@8 ; CProbabilityItemBag::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CProbabilityItemBag@@8
rdata$r	SEGMENT
??_R3CProbabilityItemBag@@8 DD 00H			; CProbabilityItemBag::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CProbabilityItemBag@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCProbabilityItemBag@@@8
_DATA	SEGMENT
??_R0?AVCProbabilityItemBag@@@8 DD FLAT:??_7type_info@@6B@ ; CProbabilityItemBag `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCProbabilityItemBag@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CProbabilityItemBag@@6B@
rdata$r	SEGMENT
??_R4CProbabilityItemBag@@6B@ DD 00H			; CProbabilityItemBag::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCProbabilityItemBag@@@8
	DD	FLAT:??_R3CProbabilityItemBag@@8
rdata$r	ENDS
;	COMDAT ??_7CProbabilityItemBag@@6B@
CONST	SEGMENT
??_7CProbabilityItemBag@@6B@ DD FLAT:??_R4CProbabilityItemBag@@6B@ ; CProbabilityItemBag::`vftable'
	DD	FLAT:??_ECProbabilityItemBag@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProbabilityItemBag@@QAE@XZ PROC			; CProbabilityItemBag::CProbabilityItemBag
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProbabilityItemBag@@6B@
  00015	68 00 00 00 00	 push	 OFFSET ??0CItemBagDropMapInfo@@QAE@XZ ; CItemBagDropMapInfo::CItemBagDropMapInfo
  0001a	6a 5a		 push	 90			; 0000005aH
  0001c	6a 03		 push	 3
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	05 24 01 00 00	 add	 eax, 292		; 00000124H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  0002c	68 00 00 00 00	 push	 OFFSET ??0CProbabilityItemBagAttrEx@@QAE@XZ ; CProbabilityItemBagAttrEx::CProbabilityItemBagAttrEx
  00031	68 96 00 00 00	 push	 150			; 00000096H
  00036	6a 09		 push	 9
  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	05 32 02 00 00	 add	 eax, 562		; 00000232H
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z

; 18   : 	return;
; 19   : }

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??0CProbabilityItemBag@@QAE@XZ ENDP			; CProbabilityItemBag::CProbabilityItemBag
_TEXT	ENDS
PUBLIC	?Init@CItemBagDropMapInfo@@QAEXXZ		; CItemBagDropMapInfo::Init
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\itembagex.h
;	COMDAT ??0CItemBagDropMapInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CItemBagDropMapInfo@@QAE@XZ PROC			; CItemBagDropMapInfo::CItemBagDropMapInfo, COMDAT
; _this$ = ecx

; 19   : 	CItemBagDropMapInfo()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	{
; 21   : 		this->Init();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Init@CItemBagDropMapInfo@@QAEXXZ ; CItemBagDropMapInfo::Init

; 22   : 	};

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CItemBagDropMapInfo@@QAE@XZ ENDP			; CItemBagDropMapInfo::CItemBagDropMapInfo
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?Init@CItemBagDropMapInfo@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CItemBagDropMapInfo@@QAEXXZ PROC			; CItemBagDropMapInfo::Init, COMDAT
; _this$ = ecx

; 25   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 		this->m_bIsDrop = false;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 27   : 		this->m_MinMonsterLevel = 0;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 28   : 		this->m_MaxMonsterLevel = 0;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 29   : 	};

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?Init@CItemBagDropMapInfo@@QAEXXZ ENDP			; CItemBagDropMapInfo::Init
_TEXT	ENDS
PUBLIC	??0CItemBagAttrEx@@QAE@XZ			; CItemBagAttrEx::CItemBagAttrEx
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\probabilityitembag.h
;	COMDAT ??0CProbabilityItemBagAttrEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProbabilityItemBagAttrEx@@QAE@XZ PROC		; CProbabilityItemBagAttrEx::CProbabilityItemBagAttrEx, COMDAT
; _this$ = ecx

; 22   : 	CProbabilityItemBagAttrEx() //season 4.5 changed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CItemBagAttrEx@@QAE@XZ ; CItemBagAttrEx::CItemBagAttrEx

; 23   : 	{
; 24   : 		this->m_issetitem = 0; //nice fix from 77 :)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0

; 25   : 	};

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0CProbabilityItemBagAttrEx@@QAE@XZ ENDP		; CProbabilityItemBagAttrEx::CProbabilityItemBagAttrEx
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\gamblesystem.h
_TEXT	ENDS
;	COMDAT ??0CItemBagAttrEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CItemBagAttrEx@@QAE@XZ PROC				; CItemBagAttrEx::CItemBagAttrEx, COMDAT
; _this$ = ecx

; 23   : 	CItemBagAttrEx()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	{
; 25   : 		this->m_type = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 26   : 		this->m_index = 0;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 27   : 		this->m_minLevel = 0;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 28   : 		this->m_maxLevel = 0;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0

; 29   : 		this->m_isskill = 0;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 30   : 		this->m_isluck = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0

; 31   : 		this->m_isoption = 0;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c6 40 06 00	 mov	 BYTE PTR [eax+6], 0

; 32   : 		this->m_isexitem = 0;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c6 40 07 00	 mov	 BYTE PTR [eax+7], 0

; 33   : 	}

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??0CItemBagAttrEx@@QAE@XZ ENDP				; CItemBagAttrEx::CItemBagAttrEx
_TEXT	ENDS
PUBLIC	??1CProbabilityItemBag@@UAE@XZ			; CProbabilityItemBag::~CProbabilityItemBag
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCProbabilityItemBag@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProbabilityItemBag@@UAEPAXI@Z PROC			; CProbabilityItemBag::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CProbabilityItemBag@@UAE@XZ ; CProbabilityItemBag::~CProbabilityItemBag
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCProbabilityItemBag@@UAEPAXI@Z ENDP			; CProbabilityItemBag::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\probabilityitembag.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProbabilityItemBag@@UAE@XZ PROC			; CProbabilityItemBag::~CProbabilityItemBag
; _this$ = ecx

; 22   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 44	 sub	 esp, 68			; 00000044H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProbabilityItemBag@@6B@

; 23   : 	return;
; 24   : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??1CProbabilityItemBag@@UAE@XZ ENDP			; CProbabilityItemBag::~CProbabilityItemBag
_TEXT	ENDS
PUBLIC	?LoadItem@CProbabilityItemBag@@QAEXPAD@Z	; CProbabilityItemBag::LoadItem
PUBLIC	?Init@CProbabilityItemBag@@QAEXPAD@Z		; CProbabilityItemBag::Init
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?Init@CProbabilityItemBag@@QAEXPAD@Z PROC		; CProbabilityItemBag::Init
; _this$ = ecx

; 27   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 44	 sub	 esp, 68			; 00000044H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	this->m_bLoad = FALSE;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 29   : 	this->m_sEventName[0] = 0;

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0

; 30   : 	this->m_iEventItemType = -1;

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00090	c7 80 08 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+264], -1

; 31   : 	this->m_iEventItemLevel = 0;

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	c7 80 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+268], 0

; 32   : 	this->m_iDropZen = 0;

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0

; 33   : 	this->m_iEventItemDropRate = 0;

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b7	c7 80 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+276], 0

; 34   : 	this->m_iItemDropRate = 0;

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	c7 80 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+280], 0

; 35   : 	this->m_iExItemDropRate = 0;

  000ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	c7 80 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+284], 0

; 36   : 	this->m_iBagObjectCount = 0;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000de	c7 80 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+288], 0

; 37   : 	this->m_iRateKindCount = 0;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	c7 80 18 08 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+2072], 0

; 38   : 
; 39   : 	this->LoadItem(gDirPath.GetNewPath(name));

  000f5	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000f8	50		 push	 eax
  000f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000fe	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00103	50		 push	 eax
  00104	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	e8 00 00 00 00	 call	 ?LoadItem@CProbabilityItemBag@@QAEXPAD@Z ; CProbabilityItemBag::LoadItem

; 40   : }

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 04 00	 ret	 4
?Init@CProbabilityItemBag@@QAEXPAD@Z ENDP		; CProbabilityItemBag::Init
_TEXT	ENDS
PUBLIC	??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0GL@LIMNLNHJ@?$FL?$CFs?$FN?5Eventitemnum?5?$DN?5?$CFd?0EventItem@ ; `string'
PUBLIC	??_C@_0BO@PPHECIOP@ExEvent?5ItemBag?5LoadFail?5?$FL?$CFs?$FN?$AA@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	_fclose:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__wsprintfA:PROC
EXTRN	_strcpy:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_strcmp:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ DB 'Load Script Error '
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@LIMNLNHJ@?$FL?$CFs?$FN?5Eventitemnum?5?$DN?5?$CFd?0EventItem@
CONST	SEGMENT
??_C@_0GL@LIMNLNHJ@?$FL?$CFs?$FN?5Eventitemnum?5?$DN?5?$CFd?0EventItem@ DB '['
	DB	'%s] Eventitemnum = %d,EventItemLevel = %d, EventItemDropRate '
	DB	'= %d, ItemDropRate = %d, ExItemDropRate = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PPHECIOP@ExEvent?5ItemBag?5LoadFail?5?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_0BO@PPHECIOP@ExEvent?5ItemBag?5LoadFail?5?$FL?$CFs?$FN?$AA@ DB 'ExE'
	DB	'vent ItemBag LoadFail [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv802 = -368						; size = 4
tv790 = -368						; size = 4
tv738 = -368						; size = 4
tv726 = -368						; size = 4
tv714 = -368						; size = 4
tv702 = -368						; size = 4
tv690 = -368						; size = 4
tv678 = -368						; size = 4
tv666 = -368						; size = 4
tv654 = -368						; size = 4
tv553 = -368						; size = 4
tv542 = -368						; size = 4
tv531 = -368						; size = 4
tv800 = -364						; size = 4
tv788 = -364						; size = 4
tv736 = -364						; size = 4
tv724 = -364						; size = 4
tv712 = -364						; size = 4
tv700 = -364						; size = 4
tv688 = -364						; size = 4
tv676 = -364						; size = 4
tv664 = -364						; size = 4
tv652 = -364						; size = 4
tv551 = -364						; size = 4
tv540 = -364						; size = 4
tv529 = -364						; size = 4
tv91 = -360						; size = 4
tv797 = -358						; size = 2
tv785 = -358						; size = 2
tv733 = -358						; size = 2
tv721 = -358						; size = 2
tv709 = -358						; size = 2
tv697 = -358						; size = 2
tv685 = -358						; size = 2
tv673 = -358						; size = 2
tv661 = -358						; size = 2
tv649 = -358						; size = 2
tv548 = -358						; size = 2
tv537 = -358						; size = 2
tv526 = -358						; size = 2
_szTemp$228354 = -292					; size = 256
_index$228348 = -36					; size = 4
_type$228346 = -32					; size = 4
_map$228331 = -28					; size = 4
_st$228322 = -24					; size = 4
_iProbability$ = -20					; size = 4
_n$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_script_file$ = 8					; size = 4
?LoadItem@CProbabilityItemBag@@QAEXPAD@Z PROC		; CProbabilityItemBag::LoadItem
; _this$ = ecx

; 43   : {

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp
  00123	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0012e	33 c5		 xor	 eax, ebp
  00130	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00133	53		 push	 ebx
  00134	56		 push	 esi
  00135	57		 push	 edi
  00136	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 	int Token;
; 45   : 
; 46   : 	this->m_bLoad = FALSE;

  00139	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 47   : 	SMDFile = fopen(script_file, "r");

  00143	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00148	8b 45 08	 mov	 eax, DWORD PTR _script_file$[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _fopen
  00151	83 c4 08	 add	 esp, 8
  00154	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 48   : 
; 49   : 	if ( SMDFile == NULL )

  00159	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00160	75 22		 jne	 SHORT $LN47@LoadItem

; 50   : 	{
; 51   : 		LogAdd(lMsg.Get(MSGGET(1, 197)), script_file);

  00162	8b 45 08	 mov	 eax, DWORD PTR _script_file$[ebp]
  00165	50		 push	 eax
  00166	68 c5 01 00 00	 push	 453			; 000001c5H
  0016b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00170	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00175	50		 push	 eax
  00176	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0017c	83 c4 08	 add	 esp, 8

; 52   : 		return;

  0017f	e9 63 0a 00 00	 jmp	 $LN48@LoadItem
$LN47@LoadItem:

; 53   : 	}
; 54   : 
; 55   : 	int n=0;

  00184	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 56   : 	int	iProbability=0;

  0018b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iProbability$[ebp], 0
$LN46@LoadItem:

; 57   : 
; 58   : 	while ( true )

  00192	b8 01 00 00 00	 mov	 eax, 1
  00197	85 c0		 test	 eax, eax
  00199	0f 84 13 0a 00
	00		 je	 $LN45@LoadItem

; 59   : 	{
; 60   : 		Token = GetToken();

  0019f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001a4	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 61   : 
; 62   : 		if ( Token == 2 )

  001a7	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  001ab	75 05		 jne	 SHORT $LN44@LoadItem

; 63   : 		{
; 64   : 			break;

  001ad	e9 00 0a 00 00	 jmp	 $LN45@LoadItem
$LN44@LoadItem:

; 65   : 		}
; 66   : 
; 67   : 		if ( Token == 1 )

  001b2	83 7d f4 01	 cmp	 DWORD PTR _Token$[ebp], 1
  001b6	0f 85 f1 09 00
	00		 jne	 $LN14@LoadItem

; 68   : 		{
; 69   : 			int st = (int)TokenNumber;	// script_type

  001bc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c2	e8 00 00 00 00	 call	 __ftol2_sse
  001c7	89 45 e8	 mov	 DWORD PTR _st$228322[ebp], eax

; 70   : 
; 71   : 			if ( st == 0 )

  001ca	83 7d e8 00	 cmp	 DWORD PTR _st$228322[ebp], 0
  001ce	0f 85 78 01 00
	00		 jne	 $LN42@LoadItem
$LN41@LoadItem:

; 72   : 			{
; 73   : 				while ( true )

  001d4	b8 01 00 00 00	 mov	 eax, 1
  001d9	85 c0		 test	 eax, eax
  001db	0f 84 66 01 00
	00		 je	 $LN40@LoadItem

; 74   : 				{
; 75   : 					Token = GetToken();

  001e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001e6	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 76   : 
; 77   : 					if ( Token == 0 )

  001e9	83 7d f4 00	 cmp	 DWORD PTR _Token$[ebp], 0
  001ed	75 1b		 jne	 SHORT $LN38@LoadItem

; 78   : 					{
; 79   : 						if ( strcmp("end", TokenString) == 0 )

  001ef	68 00 00 00 00	 push	 OFFSET _TokenString
  001f4	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001f9	e8 00 00 00 00	 call	 _strcmp
  001fe	83 c4 08	 add	 esp, 8
  00201	85 c0		 test	 eax, eax
  00203	75 05		 jne	 SHORT $LN38@LoadItem

; 80   : 						{
; 81   : 							break;

  00205	e9 3d 01 00 00	 jmp	 $LN40@LoadItem
$LN38@LoadItem:

; 82   : 						}
; 83   : 					}
; 84   : 
; 85   : 					int map = (int)TokenNumber;

  0020a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00210	e8 00 00 00 00	 call	 __ftol2_sse
  00215	89 45 e4	 mov	 DWORD PTR _map$228331[ebp], eax

; 86   : 
; 87   : 					if ( MAX_MAP_RANGE(map) == FALSE )

  00218	83 7d e4 00	 cmp	 DWORD PTR _map$228331[ebp], 0
  0021c	7d 0c		 jge	 SHORT $LN50@LoadItem
  0021e	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv91[ebp], 0
  00228	eb 0f		 jmp	 SHORT $LN51@LoadItem
$LN50@LoadItem:
  0022a	33 c0		 xor	 eax, eax
  0022c	83 7d e4 59	 cmp	 DWORD PTR _map$228331[ebp], 89 ; 00000059H
  00230	0f 9e c0	 setle	 al
  00233	89 85 98 fe ff
	ff		 mov	 DWORD PTR tv91[ebp], eax
$LN51@LoadItem:
  00239	83 bd 98 fe ff
	ff 00		 cmp	 DWORD PTR tv91[ebp], 0
  00240	75 16		 jne	 SHORT $LN37@LoadItem

; 88   : 					{
; 89   : 						MsgBox("ExEvent ItemBag LoadFail [%s]", script_file);

  00242	8b 45 08	 mov	 eax, DWORD PTR _script_file$[ebp]
  00245	50		 push	 eax
  00246	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PPHECIOP@ExEvent?5ItemBag?5LoadFail?5?$FL?$CFs?$FN?$AA@
  0024b	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00250	83 c4 08	 add	 esp, 8

; 90   : 						return;

  00253	e9 8f 09 00 00	 jmp	 $LN48@LoadItem
$LN37@LoadItem:

; 91   : 					}
; 92   : 
; 93   : 					Token = GetToken();

  00258	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0025d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 94   : 					this->DropMapInfo[map].m_bIsDrop = (BYTE)TokenNumber;

  00260	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00266	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv526[ebp]
  0026c	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv526[ebp]
  00273	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00278	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv529[ebp], eax
  0027e	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv529[ebp]
  00284	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv531[ebp]
  0028a	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv526[ebp]
  00290	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv531[ebp]
  00296	8b 4d e4	 mov	 ecx, DWORD PTR _map$228331[ebp]
  00299	6b c9 03	 imul	 ecx, 3
  0029c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0029f	88 84 0a 24 01
	00 00		 mov	 BYTE PTR [edx+ecx+292], al

; 95   : 
; 96   : 					Token = GetToken();

  002a6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002ab	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 97   : 					this->DropMapInfo[map].m_MinMonsterLevel = (BYTE)TokenNumber;

  002ae	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b4	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv537[ebp]
  002ba	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv537[ebp]
  002c1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002c6	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv540[ebp], eax
  002cc	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv540[ebp]
  002d2	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv542[ebp]
  002d8	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv537[ebp]
  002de	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv542[ebp]
  002e4	8b 4d e4	 mov	 ecx, DWORD PTR _map$228331[ebp]
  002e7	6b c9 03	 imul	 ecx, 3
  002ea	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002ed	88 84 0a 25 01
	00 00		 mov	 BYTE PTR [edx+ecx+293], al

; 98   : 
; 99   : 					Token = GetToken();

  002f4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002f9	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 100  : 					this->DropMapInfo[map].m_MaxMonsterLevel = (BYTE)TokenNumber;

  002fc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00302	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv548[ebp]
  00308	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv548[ebp]
  0030f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00314	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv551[ebp], eax
  0031a	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv551[ebp]
  00320	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv553[ebp]
  00326	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv548[ebp]
  0032c	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv553[ebp]
  00332	8b 4d e4	 mov	 ecx, DWORD PTR _map$228331[ebp]
  00335	6b c9 03	 imul	 ecx, 3
  00338	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0033b	88 84 0a 26 01
	00 00		 mov	 BYTE PTR [edx+ecx+294], al

; 101  : 				}

  00342	e9 8d fe ff ff	 jmp	 $LN41@LoadItem
$LN40@LoadItem:

; 102  : 			
; 103  : 			}
; 104  : 			else if ( st == 1 )

  00347	e9 61 08 00 00	 jmp	 $LN14@LoadItem
$LN42@LoadItem:
  0034c	83 7d e8 01	 cmp	 DWORD PTR _st$228322[ebp], 1
  00350	0f 85 7c 01 00
	00		 jne	 $LN35@LoadItem
$LN34@LoadItem:

; 105  : 			{
; 106  : 				while ( true )

  00356	b8 01 00 00 00	 mov	 eax, 1
  0035b	85 c0		 test	 eax, eax
  0035d	0f 84 6a 01 00
	00		 je	 $LN33@LoadItem

; 107  : 				{
; 108  : 					Token = GetToken();

  00363	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00368	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 109  : 
; 110  : 					if ( Token == 0 )

  0036b	83 7d f4 00	 cmp	 DWORD PTR _Token$[ebp], 0
  0036f	75 1b		 jne	 SHORT $LN31@LoadItem

; 111  : 					{
; 112  : 						if ( strcmp("end", TokenString) == 0 )

  00371	68 00 00 00 00	 push	 OFFSET _TokenString
  00376	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0037b	e8 00 00 00 00	 call	 _strcmp
  00380	83 c4 08	 add	 esp, 8
  00383	85 c0		 test	 eax, eax
  00385	75 05		 jne	 SHORT $LN31@LoadItem

; 113  : 						{
; 114  : 							break;

  00387	e9 41 01 00 00	 jmp	 $LN33@LoadItem
$LN31@LoadItem:

; 115  : 						}
; 116  : 					}
; 117  : 
; 118  : 					strcpy(this->m_sEventName, TokenString);

  0038c	68 00 00 00 00	 push	 OFFSET _TokenString
  00391	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00394	83 c0 08	 add	 eax, 8
  00397	50		 push	 eax
  00398	e8 00 00 00 00	 call	 _strcpy
  0039d	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 					Token = GetToken();

  003a0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003a5	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 121  : 					this->m_iDropZen = (int)TokenNumber;

  003a8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003ae	e8 00 00 00 00	 call	 __ftol2_sse
  003b3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003b6	89 81 10 01 00
	00		 mov	 DWORD PTR [ecx+272], eax

; 122  : 
; 123  : 					Token = GetToken();

  003bc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003c1	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 124  : 					int type = (int)TokenNumber;

  003c4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003ca	e8 00 00 00 00	 call	 __ftol2_sse
  003cf	89 45 e0	 mov	 DWORD PTR _type$228346[ebp], eax

; 125  : 
; 126  : 					Token = GetToken();

  003d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003d7	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 127  : 					int index = (int)TokenNumber;

  003da	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003e0	e8 00 00 00 00	 call	 __ftol2_sse
  003e5	89 45 dc	 mov	 DWORD PTR _index$228348[ebp], eax

; 128  : 
; 129  : 					this->m_iEventItemType = ITEMGET(type, index);

  003e8	8b 45 e0	 mov	 eax, DWORD PTR _type$228346[ebp]
  003eb	c1 e0 09	 shl	 eax, 9
  003ee	03 45 dc	 add	 eax, DWORD PTR _index$228348[ebp]
  003f1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003f4	89 81 08 01 00
	00		 mov	 DWORD PTR [ecx+264], eax

; 130  : 
; 131  : 					Token = GetToken();

  003fa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003ff	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 132  : 					this->m_iEventItemLevel = (int)TokenNumber;

  00402	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00408	e8 00 00 00 00	 call	 __ftol2_sse
  0040d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00410	89 81 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], eax

; 133  : 
; 134  : 					Token = GetToken();

  00416	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0041b	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 135  : 					this->m_iEventItemDropRate = (int)TokenNumber;

  0041e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00424	e8 00 00 00 00	 call	 __ftol2_sse
  00429	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0042c	89 81 14 01 00
	00		 mov	 DWORD PTR [ecx+276], eax

; 136  : 
; 137  : 					Token = GetToken();

  00432	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00437	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 138  : 					this->m_iItemDropRate = (int)TokenNumber;

  0043a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00440	e8 00 00 00 00	 call	 __ftol2_sse
  00445	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00448	89 81 18 01 00
	00		 mov	 DWORD PTR [ecx+280], eax

; 139  : 
; 140  : 					Token = GetToken();

  0044e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00453	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 141  : 					this->m_iExItemDropRate = (int)TokenNumber;

  00456	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0045c	e8 00 00 00 00	 call	 __ftol2_sse
  00461	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00464	89 81 1c 01 00
	00		 mov	 DWORD PTR [ecx+284], eax

; 142  : 
; 143  : 					char szTemp[256];
; 144  : 
; 145  : 					wsprintf(szTemp, "[%s] Eventitemnum = %d,EventItemLevel = %d, EventItemDropRate = %d, ItemDropRate = %d, ExItemDropRate = %d", this->m_sEventName, this->m_iEventItemType, this->m_iEventItemLevel, this->m_iEventItemDropRate, this->m_iItemDropRate, this->m_iExItemDropRate);

  0046a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0046d	8b 88 1c 01 00
	00		 mov	 ecx, DWORD PTR [eax+284]
  00473	51		 push	 ecx
  00474	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00477	8b 82 18 01 00
	00		 mov	 eax, DWORD PTR [edx+280]
  0047d	50		 push	 eax
  0047e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00481	8b 91 14 01 00
	00		 mov	 edx, DWORD PTR [ecx+276]
  00487	52		 push	 edx
  00488	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0048b	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  00491	51		 push	 ecx
  00492	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00495	8b 82 08 01 00
	00		 mov	 eax, DWORD PTR [edx+264]
  0049b	50		 push	 eax
  0049c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0049f	83 c1 08	 add	 ecx, 8
  004a2	51		 push	 ecx
  004a3	68 00 00 00 00	 push	 OFFSET ??_C@_0GL@LIMNLNHJ@?$FL?$CFs?$FN?5Eventitemnum?5?$DN?5?$CFd?0EventItem@
  004a8	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$228354[ebp]
  004ae	52		 push	 edx
  004af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  004b5	83 c4 20	 add	 esp, 32			; 00000020H

; 146  : 					LogAddTD(szTemp);

  004b8	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$228354[ebp]
  004be	50		 push	 eax
  004bf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  004c5	83 c4 04	 add	 esp, 4

; 147  : 				}

  004c8	e9 89 fe ff ff	 jmp	 $LN34@LoadItem
$LN33@LoadItem:

; 148  : 			}
; 149  : 			else if ( st == 2 )

  004cd	e9 db 06 00 00	 jmp	 $LN14@LoadItem
$LN35@LoadItem:
  004d2	83 7d e8 02	 cmp	 DWORD PTR _st$228322[ebp], 2
  004d6	0f 85 0f 04 00
	00		 jne	 $LN29@LoadItem

; 150  : 			{
; 151  : 				iProbability = 0; //ebp-10

  004dc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iProbability$[ebp], 0
$LN28@LoadItem:

; 152  : 
; 153  : 				while ( true )

  004e3	b8 01 00 00 00	 mov	 eax, 1
  004e8	85 c0		 test	 eax, eax
  004ea	0f 84 ea 03 00
	00		 je	 $LN27@LoadItem

; 154  : 				{
; 155  : 					Token = GetToken();

  004f0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004f5	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 156  : 
; 157  : 					if ( Token == 0 )

  004f8	83 7d f4 00	 cmp	 DWORD PTR _Token$[ebp], 0
  004fc	75 1b		 jne	 SHORT $LN25@LoadItem

; 158  : 					{
; 159  : 						if ( strcmp("end", TokenString) == 0 )

  004fe	68 00 00 00 00	 push	 OFFSET _TokenString
  00503	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00508	e8 00 00 00 00	 call	 _strcmp
  0050d	83 c4 08	 add	 esp, 8
  00510	85 c0		 test	 eax, eax
  00512	75 05		 jne	 SHORT $LN25@LoadItem

; 160  : 						{
; 161  : 							break;

  00514	e9 c1 03 00 00	 jmp	 $LN27@LoadItem
$LN25@LoadItem:

; 162  : 						}
; 163  : 					}
; 164  : 
; 165  : 					if( iProbability == 0) //good

  00519	83 7d ec 00	 cmp	 DWORD PTR _iProbability$[ebp], 0
  0051d	75 1a		 jne	 SHORT $LN24@LoadItem

; 166  : 					{
; 167  : 						this->m_iEventItemDropRateEx[iProbability] = (int)TokenNumber; //good

  0051f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00525	e8 00 00 00 00	 call	 __ftol2_sse
  0052a	8b 4d ec	 mov	 ecx, DWORD PTR _iProbability$[ebp]
  0052d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00530	89 84 8a 78 07
	00 00		 mov	 DWORD PTR [edx+ecx*4+1912], eax

; 168  : 					}
; 169  : 					else

  00537	eb 25		 jmp	 SHORT $LN23@LoadItem
$LN24@LoadItem:

; 170  : 					{
; 171  : 						this->m_iEventItemDropRateEx[iProbability] = this->m_iEventItemDropRateEx[iProbability-1] + (int)TokenNumber; //great

  00539	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0053f	e8 00 00 00 00	 call	 __ftol2_sse
  00544	8b 4d ec	 mov	 ecx, DWORD PTR _iProbability$[ebp]
  00547	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0054a	03 84 8a 74 07
	00 00		 add	 eax, DWORD PTR [edx+ecx*4+1908]
  00551	8b 4d ec	 mov	 ecx, DWORD PTR _iProbability$[ebp]
  00554	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00557	89 84 8a 78 07
	00 00		 mov	 DWORD PTR [edx+ecx*4+1912], eax
$LN23@LoadItem:

; 172  : 					}
; 173  : 
; 174  : 					n = 0;

  0055e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
$LN22@LoadItem:

; 175  : 
; 176  : 					while ( true )

  00565	b8 01 00 00 00	 mov	 eax, 1
  0056a	85 c0		 test	 eax, eax
  0056c	0f 84 4d 03 00
	00		 je	 $LN21@LoadItem

; 177  : 					{
; 178  : 						Token = GetToken();

  00572	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00577	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 179  : 
; 180  : 						if ( Token == 0 )

  0057a	83 7d f4 00	 cmp	 DWORD PTR _Token$[ebp], 0
  0057e	75 2b		 jne	 SHORT $LN19@LoadItem

; 181  : 						{
; 182  : 							if ( strcmp("end", TokenString) == 0 )

  00580	68 00 00 00 00	 push	 OFFSET _TokenString
  00585	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0058a	e8 00 00 00 00	 call	 _strcmp
  0058f	83 c4 08	 add	 esp, 8
  00592	85 c0		 test	 eax, eax
  00594	75 15		 jne	 SHORT $LN19@LoadItem

; 183  : 							{
; 184  : 								this->m_iDropRatePerItemCount[iProbability] = n;

  00596	8b 45 ec	 mov	 eax, DWORD PTR _iProbability$[ebp]
  00599	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0059c	8b 55 f0	 mov	 edx, DWORD PTR _n$[ebp]
  0059f	89 94 81 c8 07
	00 00		 mov	 DWORD PTR [ecx+eax*4+1992], edx

; 185  : 								break;

  005a6	e9 14 03 00 00	 jmp	 $LN21@LoadItem
$LN19@LoadItem:

; 186  : 							}
; 187  : 						}
; 188  : 
; 189  : 						this->BagObject[this->m_iBagObjectCount].m_type = (BYTE)TokenNumber;

  005ab	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005b1	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv649[ebp]
  005b7	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv649[ebp]
  005be	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005c3	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv652[ebp], eax
  005c9	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv652[ebp]
  005cf	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv654[ebp]
  005d5	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv649[ebp]
  005db	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv654[ebp]
  005e1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005e4	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  005ea	6b d2 09	 imul	 edx, 9
  005ed	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005f0	88 84 11 32 02
	00 00		 mov	 BYTE PTR [ecx+edx+562], al

; 190  : 
; 191  : 						Token = GetToken();

  005f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005fc	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 192  : 						this->BagObject[this->m_iBagObjectCount].m_index = (BYTE)TokenNumber;

  005ff	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00605	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv661[ebp]
  0060b	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv661[ebp]
  00612	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00617	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv664[ebp], eax
  0061d	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv664[ebp]
  00623	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv666[ebp]
  00629	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv661[ebp]
  0062f	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv666[ebp]
  00635	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00638	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  0063e	6b d2 09	 imul	 edx, 9
  00641	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00644	88 84 11 33 02
	00 00		 mov	 BYTE PTR [ecx+edx+563], al

; 193  : 
; 194  : 						Token = GetToken();

  0064b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00650	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 195  : 						this->BagObject[this->m_iBagObjectCount].m_minLevel = (BYTE)TokenNumber;

  00653	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00659	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv673[ebp]
  0065f	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv673[ebp]
  00666	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0066b	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv676[ebp], eax
  00671	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv676[ebp]
  00677	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv678[ebp]
  0067d	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv673[ebp]
  00683	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv678[ebp]
  00689	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0068c	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  00692	6b d2 09	 imul	 edx, 9
  00695	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00698	88 84 11 34 02
	00 00		 mov	 BYTE PTR [ecx+edx+564], al

; 196  : 
; 197  : 						Token = GetToken();

  0069f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006a4	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 198  : 						this->BagObject[this->m_iBagObjectCount].m_maxLevel = (BYTE)TokenNumber;

  006a7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006ad	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv685[ebp]
  006b3	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv685[ebp]
  006ba	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  006bf	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv688[ebp], eax
  006c5	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv688[ebp]
  006cb	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv690[ebp]
  006d1	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv685[ebp]
  006d7	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv690[ebp]
  006dd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006e0	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  006e6	6b d2 09	 imul	 edx, 9
  006e9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006ec	88 84 11 35 02
	00 00		 mov	 BYTE PTR [ecx+edx+565], al

; 199  : 
; 200  : 						Token = GetToken();

  006f3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006f8	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 201  : 						this->BagObject[this->m_iBagObjectCount].m_isskill = (BYTE)TokenNumber;

  006fb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00701	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv697[ebp]
  00707	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv697[ebp]
  0070e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00713	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv700[ebp], eax
  00719	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv700[ebp]
  0071f	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv702[ebp]
  00725	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv697[ebp]
  0072b	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv702[ebp]
  00731	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00734	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  0073a	6b d2 09	 imul	 edx, 9
  0073d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00740	88 84 11 36 02
	00 00		 mov	 BYTE PTR [ecx+edx+566], al

; 202  : 
; 203  : 						Token = GetToken();

  00747	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0074c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 204  : 						this->BagObject[this->m_iBagObjectCount].m_isluck = (BYTE)TokenNumber;

  0074f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00755	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv709[ebp]
  0075b	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv709[ebp]
  00762	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00767	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv712[ebp], eax
  0076d	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv712[ebp]
  00773	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv714[ebp]
  00779	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv709[ebp]
  0077f	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv714[ebp]
  00785	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00788	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  0078e	6b d2 09	 imul	 edx, 9
  00791	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00794	88 84 11 37 02
	00 00		 mov	 BYTE PTR [ecx+edx+567], al

; 205  : 
; 206  : 						Token = GetToken();

  0079b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007a0	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 207  : 						this->BagObject[this->m_iBagObjectCount].m_isoption = (BYTE)TokenNumber;

  007a3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007a9	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv721[ebp]
  007af	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv721[ebp]
  007b6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  007bb	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv724[ebp], eax
  007c1	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv724[ebp]
  007c7	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv726[ebp]
  007cd	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv721[ebp]
  007d3	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv726[ebp]
  007d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  007dc	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  007e2	6b d2 09	 imul	 edx, 9
  007e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  007e8	88 84 11 38 02
	00 00		 mov	 BYTE PTR [ecx+edx+568], al

; 208  : 
; 209  : 						Token = GetToken();

  007ef	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007f4	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 210  : 						this->BagObject[this->m_iBagObjectCount].m_isexitem = (BYTE)TokenNumber;

  007f7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007fd	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv733[ebp]
  00803	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv733[ebp]
  0080a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0080f	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv736[ebp], eax
  00815	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv736[ebp]
  0081b	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv738[ebp]
  00821	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv733[ebp]
  00827	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv738[ebp]
  0082d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00830	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  00836	6b d2 09	 imul	 edx, 9
  00839	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0083c	88 84 11 39 02
	00 00		 mov	 BYTE PTR [ecx+edx+569], al

; 211  : 
; 212  : 						if(this->BagObject[this->m_iBagObjectCount].m_minLevel > this->BagObject[this->m_iBagObjectCount].m_maxLevel)

  00843	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00846	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  0084c	6b c9 09	 imul	 ecx, 9
  0084f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00852	0f b6 84 0a 34
	02 00 00	 movzx	 eax, BYTE PTR [edx+ecx+564]
  0085a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0085d	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  00863	6b d2 09	 imul	 edx, 9
  00866	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00869	0f b6 94 11 35
	02 00 00	 movzx	 edx, BYTE PTR [ecx+edx+565]
  00871	3b c2		 cmp	 eax, edx
  00873	7e 16		 jle	 SHORT $LN18@LoadItem

; 213  : 						{
; 214  : 							MsgBox("Load Script Error %s", script_file);

  00875	8b 45 08	 mov	 eax, DWORD PTR _script_file$[ebp]
  00878	50		 push	 eax
  00879	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  0087e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00883	83 c4 08	 add	 esp, 8

; 215  : 							return;

  00886	e9 5c 03 00 00	 jmp	 $LN48@LoadItem
$LN18@LoadItem:

; 216  : 						}
; 217  : 						
; 218  : 						n++;

  0088b	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  0088e	83 c0 01	 add	 eax, 1
  00891	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 219  : 						this->m_iBagObjectCount++;

  00894	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00897	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  0089d	83 c1 01	 add	 ecx, 1
  008a0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  008a3	89 8a 20 01 00
	00		 mov	 DWORD PTR [edx+288], ecx

; 220  : 
; 221  : 						if ( this->m_iBagObjectCount > MAX_ITEMBAG_ATTR-1 )

  008a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  008ac	81 b8 20 01 00
	00 95 00 00 00	 cmp	 DWORD PTR [eax+288], 149 ; 00000095H
  008b6	7e 02		 jle	 SHORT $LN17@LoadItem

; 222  : 						{
; 223  : 							break;

  008b8	eb 05		 jmp	 SHORT $LN21@LoadItem
$LN17@LoadItem:

; 224  : 						}
; 225  : 					}

  008ba	e9 a6 fc ff ff	 jmp	 $LN22@LoadItem
$LN21@LoadItem:

; 226  : 
; 227  : 					iProbability++;

  008bf	8b 45 ec	 mov	 eax, DWORD PTR _iProbability$[ebp]
  008c2	83 c0 01	 add	 eax, 1
  008c5	89 45 ec	 mov	 DWORD PTR _iProbability$[ebp], eax

; 228  : 
; 229  : 					if(iProbability > 19)

  008c8	83 7d ec 13	 cmp	 DWORD PTR _iProbability$[ebp], 19 ; 00000013H
  008cc	7e 02		 jle	 SHORT $LN16@LoadItem

; 230  : 					{
; 231  : 						break;

  008ce	eb 0a		 jmp	 SHORT $LN27@LoadItem
$LN16@LoadItem:

; 232  : 					}
; 233  : 					continue;

  008d0	e9 0e fc ff ff	 jmp	 $LN28@LoadItem

; 234  : 				}

  008d5	e9 09 fc ff ff	 jmp	 $LN28@LoadItem
$LN27@LoadItem:

; 235  : 				this->m_iRateKindCount = iProbability;

  008da	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  008dd	8b 4d ec	 mov	 ecx, DWORD PTR _iProbability$[ebp]
  008e0	89 88 18 08 00
	00		 mov	 DWORD PTR [eax+2072], ecx
  008e6	e9 c2 02 00 00	 jmp	 $LN14@LoadItem
$LN29@LoadItem:

; 236  : 			}
; 237  : 			else if ( st == 3 )

  008eb	83 7d e8 03	 cmp	 DWORD PTR _st$228322[ebp], 3
  008ef	0f 85 b8 02 00
	00		 jne	 $LN14@LoadItem

; 238  : 			{
; 239  : 				iProbability = this->m_iRateKindCount;

  008f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  008f8	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  008fe	89 4d ec	 mov	 DWORD PTR _iProbability$[ebp], ecx
$LN13@LoadItem:

; 240  : 
; 241  : 				while ( true )

  00901	b8 01 00 00 00	 mov	 eax, 1
  00906	85 c0		 test	 eax, eax
  00908	0f 84 93 02 00
	00		 je	 $LN12@LoadItem

; 242  : 				{
; 243  : 					Token = GetToken();

  0090e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00913	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 244  : 
; 245  : 					if ( Token == 0 )

  00916	83 7d f4 00	 cmp	 DWORD PTR _Token$[ebp], 0
  0091a	75 1b		 jne	 SHORT $LN10@LoadItem

; 246  : 					{
; 247  : 						if ( strcmp("end", TokenString) == 0 )

  0091c	68 00 00 00 00	 push	 OFFSET _TokenString
  00921	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00926	e8 00 00 00 00	 call	 _strcmp
  0092b	83 c4 08	 add	 esp, 8
  0092e	85 c0		 test	 eax, eax
  00930	75 05		 jne	 SHORT $LN10@LoadItem

; 248  : 						{
; 249  : 							break;

  00932	e9 6a 02 00 00	 jmp	 $LN12@LoadItem
$LN10@LoadItem:

; 250  : 						}
; 251  : 					}
; 252  : 
; 253  : 					if( iProbability == 0) //good

  00937	83 7d ec 00	 cmp	 DWORD PTR _iProbability$[ebp], 0
  0093b	75 1a		 jne	 SHORT $LN9@LoadItem

; 254  : 					{
; 255  : 						this->m_iEventItemDropRateEx[iProbability] = (int)TokenNumber; //good

  0093d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00943	e8 00 00 00 00	 call	 __ftol2_sse
  00948	8b 4d ec	 mov	 ecx, DWORD PTR _iProbability$[ebp]
  0094b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0094e	89 84 8a 78 07
	00 00		 mov	 DWORD PTR [edx+ecx*4+1912], eax

; 256  : 					}
; 257  : 					else

  00955	eb 25		 jmp	 SHORT $LN8@LoadItem
$LN9@LoadItem:

; 258  : 					{
; 259  : 						this->m_iEventItemDropRateEx[iProbability] = this->m_iEventItemDropRateEx[iProbability-1] + (int)TokenNumber; //great

  00957	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0095d	e8 00 00 00 00	 call	 __ftol2_sse
  00962	8b 4d ec	 mov	 ecx, DWORD PTR _iProbability$[ebp]
  00965	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00968	03 84 8a 74 07
	00 00		 add	 eax, DWORD PTR [edx+ecx*4+1908]
  0096f	8b 4d ec	 mov	 ecx, DWORD PTR _iProbability$[ebp]
  00972	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00975	89 84 8a 78 07
	00 00		 mov	 DWORD PTR [edx+ecx*4+1912], eax
$LN8@LoadItem:

; 260  : 					}
; 261  : 
; 262  : 					n = 0;

  0097c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
$LN7@LoadItem:

; 263  : 
; 264  : 					while ( true )

  00983	b8 01 00 00 00	 mov	 eax, 1
  00988	85 c0		 test	 eax, eax
  0098a	0f 84 f6 01 00
	00		 je	 $LN6@LoadItem

; 265  : 					{
; 266  : 						Token = GetToken();

  00990	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00995	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 267  : 
; 268  : 						if ( Token == 0 )

  00998	83 7d f4 00	 cmp	 DWORD PTR _Token$[ebp], 0
  0099c	75 2b		 jne	 SHORT $LN4@LoadItem

; 269  : 						{
; 270  : 							if ( strcmp("end", TokenString) == 0 )

  0099e	68 00 00 00 00	 push	 OFFSET _TokenString
  009a3	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  009a8	e8 00 00 00 00	 call	 _strcmp
  009ad	83 c4 08	 add	 esp, 8
  009b0	85 c0		 test	 eax, eax
  009b2	75 15		 jne	 SHORT $LN4@LoadItem

; 271  : 							{
; 272  : 								this->m_iDropRatePerItemCount[iProbability] = n;

  009b4	8b 45 ec	 mov	 eax, DWORD PTR _iProbability$[ebp]
  009b7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009ba	8b 55 f0	 mov	 edx, DWORD PTR _n$[ebp]
  009bd	89 94 81 c8 07
	00 00		 mov	 DWORD PTR [ecx+eax*4+1992], edx

; 273  : 								break;

  009c4	e9 bd 01 00 00	 jmp	 $LN6@LoadItem
$LN4@LoadItem:

; 274  : 							}
; 275  : 						}
; 276  : 
; 277  : 						this->BagObject[this->m_iBagObjectCount].m_type = (BYTE)TokenNumber;

  009c9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  009cf	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv785[ebp]
  009d5	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv785[ebp]
  009dc	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  009e1	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv788[ebp], eax
  009e7	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv788[ebp]
  009ed	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv790[ebp]
  009f3	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv785[ebp]
  009f9	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv790[ebp]
  009ff	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a02	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  00a08	6b d2 09	 imul	 edx, 9
  00a0b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a0e	88 84 11 32 02
	00 00		 mov	 BYTE PTR [ecx+edx+562], al

; 278  : 
; 279  : 						Token = GetToken();

  00a15	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a1a	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 280  : 						this->BagObject[this->m_iBagObjectCount].m_index = (BYTE)TokenNumber;

  00a1d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a23	d9 bd 9a fe ff
	ff		 fnstcw	 WORD PTR tv797[ebp]
  00a29	0f b7 85 9a fe
	ff ff		 movzx	 eax, WORD PTR tv797[ebp]
  00a30	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00a35	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv800[ebp], eax
  00a3b	d9 ad 94 fe ff
	ff		 fldcw	 WORD PTR tv800[ebp]
  00a41	db 9d 90 fe ff
	ff		 fistp	 DWORD PTR tv802[ebp]
  00a47	d9 ad 9a fe ff
	ff		 fldcw	 WORD PTR tv797[ebp]
  00a4d	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR tv802[ebp]
  00a53	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a56	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  00a5c	6b d2 09	 imul	 edx, 9
  00a5f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a62	88 84 11 33 02
	00 00		 mov	 BYTE PTR [ecx+edx+563], al

; 281  : 
; 282  : 						this->BagObject[this->m_iBagObjectCount].m_issetitem = 1; //season 3.5 add-on

  00a69	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a6c	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00a72	6b c9 09	 imul	 ecx, 9
  00a75	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a78	c6 84 0a 3a 02
	00 00 01	 mov	 BYTE PTR [edx+ecx+570], 1

; 283  : 						this->BagObject[this->m_iBagObjectCount].m_minLevel = 0;

  00a80	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a83	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00a89	6b c9 09	 imul	 ecx, 9
  00a8c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a8f	c6 84 0a 34 02
	00 00 00	 mov	 BYTE PTR [edx+ecx+564], 0

; 284  : 						this->BagObject[this->m_iBagObjectCount].m_maxLevel = 0;

  00a97	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a9a	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00aa0	6b c9 09	 imul	 ecx, 9
  00aa3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00aa6	c6 84 0a 35 02
	00 00 00	 mov	 BYTE PTR [edx+ecx+565], 0

; 285  : 						this->BagObject[this->m_iBagObjectCount].m_isskill = 0;

  00aae	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ab1	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00ab7	6b c9 09	 imul	 ecx, 9
  00aba	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00abd	c6 84 0a 36 02
	00 00 00	 mov	 BYTE PTR [edx+ecx+566], 0

; 286  : 						this->BagObject[this->m_iBagObjectCount].m_isluck = 0;

  00ac5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ac8	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00ace	6b c9 09	 imul	 ecx, 9
  00ad1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ad4	c6 84 0a 37 02
	00 00 00	 mov	 BYTE PTR [edx+ecx+567], 0

; 287  : 						this->BagObject[this->m_iBagObjectCount].m_isoption = 0;

  00adc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00adf	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00ae5	6b c9 09	 imul	 ecx, 9
  00ae8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00aeb	c6 84 0a 38 02
	00 00 00	 mov	 BYTE PTR [edx+ecx+568], 0

; 288  : 						this->BagObject[this->m_iBagObjectCount].m_isexitem = 0;

  00af3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00af6	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00afc	6b c9 09	 imul	 ecx, 9
  00aff	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00b02	c6 84 0a 39 02
	00 00 00	 mov	 BYTE PTR [edx+ecx+569], 0

; 289  : 
; 290  : 						if(this->BagObject[this->m_iBagObjectCount].m_minLevel > this->BagObject[this->m_iBagObjectCount].m_maxLevel)

  00b0a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b0d	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00b13	6b c9 09	 imul	 ecx, 9
  00b16	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00b19	0f b6 84 0a 34
	02 00 00	 movzx	 eax, BYTE PTR [edx+ecx+564]
  00b21	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00b24	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  00b2a	6b d2 09	 imul	 edx, 9
  00b2d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00b30	0f b6 94 11 35
	02 00 00	 movzx	 edx, BYTE PTR [ecx+edx+565]
  00b38	3b c2		 cmp	 eax, edx
  00b3a	7e 16		 jle	 SHORT $LN3@LoadItem

; 291  : 						{
; 292  : 							MsgBox("Load Script Error %s", script_file);

  00b3c	8b 45 08	 mov	 eax, DWORD PTR _script_file$[ebp]
  00b3f	50		 push	 eax
  00b40	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  00b45	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00b4a	83 c4 08	 add	 esp, 8

; 293  : 							return;

  00b4d	e9 95 00 00 00	 jmp	 $LN48@LoadItem
$LN3@LoadItem:

; 294  : 						}
; 295  : 						
; 296  : 						n++;

  00b52	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00b55	83 c0 01	 add	 eax, 1
  00b58	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 297  : 						this->m_iBagObjectCount++;

  00b5b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b5e	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00b64	83 c1 01	 add	 ecx, 1
  00b67	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00b6a	89 8a 20 01 00
	00		 mov	 DWORD PTR [edx+288], ecx

; 298  : 
; 299  : 						if ( this->m_iBagObjectCount > MAX_ITEMBAG_ATTR-1 )

  00b70	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b73	81 b8 20 01 00
	00 95 00 00 00	 cmp	 DWORD PTR [eax+288], 149 ; 00000095H
  00b7d	7e 02		 jle	 SHORT $LN2@LoadItem

; 300  : 						{
; 301  : 							break;

  00b7f	eb 05		 jmp	 SHORT $LN6@LoadItem
$LN2@LoadItem:

; 302  : 						}
; 303  : 					}

  00b81	e9 fd fd ff ff	 jmp	 $LN7@LoadItem
$LN6@LoadItem:

; 304  : 
; 305  : 					iProbability++;

  00b86	8b 45 ec	 mov	 eax, DWORD PTR _iProbability$[ebp]
  00b89	83 c0 01	 add	 eax, 1
  00b8c	89 45 ec	 mov	 DWORD PTR _iProbability$[ebp], eax

; 306  : 
; 307  : 					if(iProbability > 19)

  00b8f	83 7d ec 13	 cmp	 DWORD PTR _iProbability$[ebp], 19 ; 00000013H
  00b93	7e 02		 jle	 SHORT $LN1@LoadItem

; 308  : 					{
; 309  : 						break;

  00b95	eb 0a		 jmp	 SHORT $LN12@LoadItem
$LN1@LoadItem:

; 310  : 					}
; 311  : 					continue;

  00b97	e9 65 fd ff ff	 jmp	 $LN13@LoadItem

; 312  : 				}

  00b9c	e9 60 fd ff ff	 jmp	 $LN13@LoadItem
$LN12@LoadItem:

; 313  : 				this->m_iRateKindCount = iProbability;

  00ba1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ba4	8b 4d ec	 mov	 ecx, DWORD PTR _iProbability$[ebp]
  00ba7	89 88 18 08 00
	00		 mov	 DWORD PTR [eax+2072], ecx
$LN14@LoadItem:

; 314  : 			}
; 315  : 		}
; 316  : 	}

  00bad	e9 e0 f5 ff ff	 jmp	 $LN46@LoadItem
$LN45@LoadItem:

; 317  : 
; 318  : 	fclose(SMDFile);

  00bb2	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00bb7	50		 push	 eax
  00bb8	e8 00 00 00 00	 call	 _fclose
  00bbd	83 c4 04	 add	 esp, 4

; 319  : 	LogAdd(lMsg.Get(MSGGET(1, 198)), script_file);

  00bc0	8b 45 08	 mov	 eax, DWORD PTR _script_file$[ebp]
  00bc3	50		 push	 eax
  00bc4	68 c6 01 00 00	 push	 454			; 000001c6H
  00bc9	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00bce	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00bd3	50		 push	 eax
  00bd4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00bda	83 c4 08	 add	 esp, 8

; 320  : 	this->m_bLoad = TRUE;

  00bdd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00be0	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
$LN48@LoadItem:

; 321  : }

  00be7	5f		 pop	 edi
  00be8	5e		 pop	 esi
  00be9	5b		 pop	 ebx
  00bea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bed	33 cd		 xor	 ecx, ebp
  00bef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bf4	8b e5		 mov	 esp, ebp
  00bf6	5d		 pop	 ebp
  00bf7	c2 04 00	 ret	 4
?LoadItem@CProbabilityItemBag@@QAEXPAD@Z ENDP		; CProbabilityItemBag::LoadItem
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00c00	55		 push	 ebp
  00c01	8b ec		 mov	 ebp, esp
  00c03	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00c09	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00c0e	33 c5		 xor	 eax, ebp
  00c10	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00c13	53		 push	 ebx
  00c14	56		 push	 esi
  00c15	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00c16	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00c1d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c22	50		 push	 eax
  00c23	e8 00 00 00 00	 call	 _fgetc
  00c28	83 c4 04	 add	 esp, 4
  00c2b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00c2e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c32	83 f9 ff	 cmp	 ecx, -1
  00c35	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00c37	b8 02 00 00 00	 mov	 eax, 2
  00c3c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00c41	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00c43	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c47	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00c4a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  00c4c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c51	50		 push	 eax
  00c52	e8 00 00 00 00	 call	 _fgetc
  00c57	83 c4 04	 add	 esp, 4
  00c5a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00c5d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c61	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00c64	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00c66	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c6a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00c6d	74 1c		 je	 SHORT $LN23@GetToken
  00c6f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c73	83 f8 ff	 cmp	 eax, -1
  00c76	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00c78	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c7d	50		 push	 eax
  00c7e	e8 00 00 00 00	 call	 _fgetc
  00c83	83 c4 04	 add	 esp, 4
  00c86	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00c89	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  00c8b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c8f	83 f8 ff	 cmp	 eax, -1
  00c92	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00c94	b8 02 00 00 00	 mov	 eax, 2
  00c99	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  00c9e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ca2	50		 push	 eax
  00ca3	e8 00 00 00 00	 call	 _isspace
  00ca8	83 c4 04	 add	 esp, 4
  00cab	85 c0		 test	 eax, eax
  00cad	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00cb3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00cb7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00cbd	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00cc3	83 e9 22	 sub	 ecx, 34			; 00000022H
  00cc6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  00ccc	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00cd3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00cd9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  00cdf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00ce6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  00ced	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00cf7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00cfc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00d01	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00d06	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00d10	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00d15	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  00d1a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  00d1f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00d29	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00d2e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00d33	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00d38	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00d42	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00d47	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  00d4c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00d51	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  00d5b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00d60	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00d65	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00d6a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00d6f	50		 push	 eax
  00d70	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00d74	51		 push	 ecx
  00d75	e8 00 00 00 00	 call	 _ungetc
  00d7a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  00d7d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00d80	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00d83	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00d88	50		 push	 eax
  00d89	e8 00 00 00 00	 call	 _getc
  00d8e	83 c4 04	 add	 esp, 4
  00d91	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00d94	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00d98	83 f9 ff	 cmp	 ecx, -1
  00d9b	74 36		 je	 SHORT $LN12@GetToken
  00d9d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00da1	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00da4	74 1a		 je	 SHORT $LN11@GetToken
  00da6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00daa	50		 push	 eax
  00dab	e8 00 00 00 00	 call	 _isdigit
  00db0	83 c4 04	 add	 esp, 4
  00db3	85 c0		 test	 eax, eax
  00db5	75 09		 jne	 SHORT $LN11@GetToken
  00db7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00dbb	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00dbe	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00dc0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00dc3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00dc6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00dc8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00dcb	83 c0 01	 add	 eax, 1
  00dce	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00dd1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00dd3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00dd6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00dd9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00ddc	50		 push	 eax
  00ddd	e8 00 00 00 00	 call	 _atof
  00de2	83 c4 04	 add	 esp, 4
  00de5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  00deb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00df5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00dfa	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  00dff	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00e04	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00e0b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00e10	50		 push	 eax
  00e11	e8 00 00 00 00	 call	 _getc
  00e16	83 c4 04	 add	 esp, 4
  00e19	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00e1c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00e20	83 f9 ff	 cmp	 ecx, -1
  00e23	74 1c		 je	 SHORT $LN8@GetToken
  00e25	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00e29	83 f8 22	 cmp	 eax, 34			; 00000022H
  00e2c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  00e2e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00e31	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00e34	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00e36	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00e39	83 c0 01	 add	 eax, 1
  00e3c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  00e3f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00e41	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00e45	83 f8 22	 cmp	 eax, 34			; 00000022H
  00e48	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00e4a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00e4f	50		 push	 eax
  00e50	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00e54	51		 push	 ecx
  00e55	e8 00 00 00 00	 call	 _ungetc
  00e5a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  00e5d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00e60	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00e63	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  00e6d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00e72	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00e77	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  00e7c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00e80	50		 push	 eax
  00e81	e8 00 00 00 00	 call	 _isalpha
  00e86	83 c4 04	 add	 esp, 4
  00e89	85 c0		 test	 eax, eax
  00e8b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00e91	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00e98	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00e9b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00e9e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00ea0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ea3	83 c0 01	 add	 eax, 1
  00ea6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00ea9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00eae	50		 push	 eax
  00eaf	e8 00 00 00 00	 call	 _getc
  00eb4	83 c4 04	 add	 esp, 4
  00eb7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00eba	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00ebe	83 f9 ff	 cmp	 ecx, -1
  00ec1	74 36		 je	 SHORT $LN3@GetToken
  00ec3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ec7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00eca	74 1a		 je	 SHORT $LN2@GetToken
  00ecc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ed0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00ed3	74 11		 je	 SHORT $LN2@GetToken
  00ed5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ed9	50		 push	 eax
  00eda	e8 00 00 00 00	 call	 _isalnum
  00edf	83 c4 04	 add	 esp, 4
  00ee2	85 c0		 test	 eax, eax
  00ee4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00ee6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ee9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00eec	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  00eee	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ef1	83 c0 01	 add	 eax, 1
  00ef4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00ef7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00ef9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00efe	50		 push	 eax
  00eff	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00f03	51		 push	 ecx
  00f04	e8 00 00 00 00	 call	 _ungetc
  00f09	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  00f0c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00f0f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00f12	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  00f1c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00f21	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00f23	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00f25	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  00f2f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00f34	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00f36	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00f38	5f		 pop	 edi
  00f39	5e		 pop	 esi
  00f3a	5b		 pop	 ebx
  00f3b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f3e	33 cd		 xor	 ecx, ebp
  00f40	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f45	8b e5		 mov	 esp, ebp
  00f47	5d		 pop	 ebp
  00f48	c3		 ret	 0
  00f49	8d 49 00	 npad	 3
$LN35@GetToken:
  00f4c	00 00 00 00	 DD	 $LN10@GetToken
  00f50	00 00 00 00	 DD	 $LN19@GetToken
  00f54	00 00 00 00	 DD	 $LN17@GetToken
  00f58	00 00 00 00	 DD	 $LN14@GetToken
  00f5c	00 00 00 00	 DD	 $LN18@GetToken
  00f60	00 00 00 00	 DD	 $LN16@GetToken
  00f64	00 00 00 00	 DD	 $LN15@GetToken
  00f68	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00f6c	00		 DB	 0
  00f6d	01		 DB	 1
  00f6e	07		 DB	 7
  00f6f	07		 DB	 7
  00f70	07		 DB	 7
  00f71	07		 DB	 7
  00f72	07		 DB	 7
  00f73	07		 DB	 7
  00f74	07		 DB	 7
  00f75	07		 DB	 7
  00f76	02		 DB	 2
  00f77	03		 DB	 3
  00f78	03		 DB	 3
  00f79	07		 DB	 7
  00f7a	03		 DB	 3
  00f7b	03		 DB	 3
  00f7c	03		 DB	 3
  00f7d	03		 DB	 3
  00f7e	03		 DB	 3
  00f7f	03		 DB	 3
  00f80	03		 DB	 3
  00f81	03		 DB	 3
  00f82	03		 DB	 3
  00f83	03		 DB	 3
  00f84	07		 DB	 7
  00f85	04		 DB	 4
  00f86	07		 DB	 7
  00f87	07		 DB	 7
  00f88	07		 DB	 7
  00f89	07		 DB	 7
  00f8a	07		 DB	 7
  00f8b	07		 DB	 7
  00f8c	07		 DB	 7
  00f8d	07		 DB	 7
  00f8e	07		 DB	 7
  00f8f	07		 DB	 7
  00f90	07		 DB	 7
  00f91	07		 DB	 7
  00f92	07		 DB	 7
  00f93	07		 DB	 7
  00f94	07		 DB	 7
  00f95	07		 DB	 7
  00f96	07		 DB	 7
  00f97	07		 DB	 7
  00f98	07		 DB	 7
  00f99	07		 DB	 7
  00f9a	07		 DB	 7
  00f9b	07		 DB	 7
  00f9c	07		 DB	 7
  00f9d	07		 DB	 7
  00f9e	07		 DB	 7
  00f9f	07		 DB	 7
  00fa0	07		 DB	 7
  00fa1	07		 DB	 7
  00fa2	07		 DB	 7
  00fa3	07		 DB	 7
  00fa4	07		 DB	 7
  00fa5	07		 DB	 7
  00fa6	07		 DB	 7
  00fa7	07		 DB	 7
  00fa8	07		 DB	 7
  00fa9	07		 DB	 7
  00faa	07		 DB	 7
  00fab	07		 DB	 7
  00fac	07		 DB	 7
  00fad	07		 DB	 7
  00fae	07		 DB	 7
  00faf	07		 DB	 7
  00fb0	07		 DB	 7
  00fb1	07		 DB	 7
  00fb2	07		 DB	 7
  00fb3	07		 DB	 7
  00fb4	07		 DB	 7
  00fb5	07		 DB	 7
  00fb6	07		 DB	 7
  00fb7	07		 DB	 7
  00fb8	07		 DB	 7
  00fb9	07		 DB	 7
  00fba	07		 DB	 7
  00fbb	07		 DB	 7
  00fbc	07		 DB	 7
  00fbd	07		 DB	 7
  00fbe	07		 DB	 7
  00fbf	07		 DB	 7
  00fc0	07		 DB	 7
  00fc1	07		 DB	 7
  00fc2	07		 DB	 7
  00fc3	07		 DB	 7
  00fc4	07		 DB	 7
  00fc5	05		 DB	 5
  00fc6	07		 DB	 7
  00fc7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?GetLevel@CProbabilityItemBag@@AAEEH@Z		; CProbabilityItemBag::GetLevel
EXTRN	_rand:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\probabilityitembag.cpp
_TEXT	SEGMENT
_level$ = -12						; size = 4
_sub$ = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?GetLevel@CProbabilityItemBag@@AAEEH@Z PROC		; CProbabilityItemBag::GetLevel
; _this$ = ecx

; 324  : {

  00fd0	55		 push	 ebp
  00fd1	8b ec		 mov	 ebp, esp
  00fd3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00fd6	53		 push	 ebx
  00fd7	56		 push	 esi
  00fd8	57		 push	 edi
  00fd9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  : 	if ( n <0 || n > MAX_ITEMBAG_ATTR-1 )

  00fdc	83 7d 08 00	 cmp	 DWORD PTR _n$[ebp], 0
  00fe0	7c 09		 jl	 SHORT $LN2@GetLevel
  00fe2	81 7d 08 95 00
	00 00		 cmp	 DWORD PTR _n$[ebp], 149	; 00000095H
  00fe9	7e 07		 jle	 SHORT $LN3@GetLevel
$LN2@GetLevel:

; 326  : 	{
; 327  : 		return 0;

  00feb	32 c0		 xor	 al, al
  00fed	e9 84 00 00 00	 jmp	 $LN4@GetLevel
$LN3@GetLevel:

; 328  : 	}
; 329  : 
; 330  : 	if ( this->BagObject[n].m_minLevel == this->BagObject[n].m_maxLevel )

  00ff2	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00ff5	6b c0 09	 imul	 eax, 9
  00ff8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ffb	0f b6 94 01 34
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+564]
  01003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  01006	6b c0 09	 imul	 eax, 9
  01009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0100c	0f b6 84 01 35
	02 00 00	 movzx	 eax, BYTE PTR [ecx+eax+565]
  01014	3b d0		 cmp	 edx, eax
  01016	75 12		 jne	 SHORT $LN1@GetLevel

; 331  : 	{
; 332  : 		return this->BagObject[n].m_minLevel;

  01018	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0101b	6b c0 09	 imul	 eax, 9
  0101e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01021	8a 84 01 34 02
	00 00		 mov	 al, BYTE PTR [ecx+eax+564]
  01028	eb 4c		 jmp	 SHORT $LN4@GetLevel
$LN1@GetLevel:

; 333  : 	}
; 334  : 
; 335  : 	int sub = (this->BagObject[n].m_maxLevel - this->BagObject[n].m_minLevel) + 1;

  0102a	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0102d	6b c0 09	 imul	 eax, 9
  01030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01033	0f b6 94 01 35
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+565]
  0103b	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0103e	6b c0 09	 imul	 eax, 9
  01041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01044	0f b6 84 01 34
	02 00 00	 movzx	 eax, BYTE PTR [ecx+eax+564]
  0104c	2b d0		 sub	 edx, eax
  0104e	83 c2 01	 add	 edx, 1
  01051	89 55 f8	 mov	 DWORD PTR _sub$[ebp], edx

; 336  : 	int level = this->BagObject[n].m_minLevel + (rand()%sub);

  01054	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  01057	6b c0 09	 imul	 eax, 9
  0105a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0105d	0f b6 b4 01 34
	02 00 00	 movzx	 esi, BYTE PTR [ecx+eax+564]
  01065	e8 00 00 00 00	 call	 _rand
  0106a	99		 cdq
  0106b	f7 7d f8	 idiv	 DWORD PTR _sub$[ebp]
  0106e	03 f2		 add	 esi, edx
  01070	89 75 f4	 mov	 DWORD PTR _level$[ebp], esi

; 337  : 
; 338  : 	return level;

  01073	8a 45 f4	 mov	 al, BYTE PTR _level$[ebp]
$LN4@GetLevel:

; 339  : }

  01076	5f		 pop	 edi
  01077	5e		 pop	 esi
  01078	5b		 pop	 ebx
  01079	8b e5		 mov	 esp, ebp
  0107b	5d		 pop	 ebp
  0107c	c2 04 00	 ret	 4
?GetLevel@CProbabilityItemBag@@AAEEH@Z ENDP		; CProbabilityItemBag::GetLevel
_TEXT	ENDS
PUBLIC	?IsEnableEventItemDrop@CProbabilityItemBag@@AAEHH@Z ; CProbabilityItemBag::IsEnableEventItemDrop
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iLevel$ = -12						; size = 4
_iMapNumber$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?IsEnableEventItemDrop@CProbabilityItemBag@@AAEHH@Z PROC ; CProbabilityItemBag::IsEnableEventItemDrop
; _this$ = ecx

; 343  : {

  01080	55		 push	 ebp
  01081	8b ec		 mov	 ebp, esp
  01083	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01086	53		 push	 ebx
  01087	56		 push	 esi
  01088	57		 push	 edi
  01089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  : 	int iMapNumber = gObj[aIndex].MapNumber;

  0108c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0108f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0109b	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  010a3	89 55 f8	 mov	 DWORD PTR _iMapNumber$[ebp], edx

; 345  : 
; 346  : 	if ( this->DropMapInfo[iMapNumber].m_bIsDrop == FALSE )

  010a6	8b 45 f8	 mov	 eax, DWORD PTR _iMapNumber$[ebp]
  010a9	6b c0 03	 imul	 eax, 3
  010ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010af	0f b6 94 01 24
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+292]
  010b7	85 d2		 test	 edx, edx
  010b9	75 04		 jne	 SHORT $LN3@IsEnableEv

; 347  : 	{
; 348  : 		return FALSE;

  010bb	33 c0		 xor	 eax, eax
  010bd	eb 4f		 jmp	 SHORT $LN4@IsEnableEv
$LN3@IsEnableEv:

; 349  : 	}
; 350  : 
; 351  : 	int iLevel = gObj[aIndex].Level;

  010bf	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  010c2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  010c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  010ce	0f bf 94 01 be
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax+190]
  010d6	89 55 f4	 mov	 DWORD PTR _iLevel$[ebp], edx

; 352  : 
; 353  : 	if  ( iLevel < this->DropMapInfo[iMapNumber].m_MinMonsterLevel || iLevel > this->DropMapInfo[iMapNumber].m_MaxMonsterLevel)

  010d9	8b 45 f8	 mov	 eax, DWORD PTR _iMapNumber$[ebp]
  010dc	6b c0 03	 imul	 eax, 3
  010df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010e2	0f b6 94 01 25
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+293]
  010ea	39 55 f4	 cmp	 DWORD PTR _iLevel$[ebp], edx
  010ed	7c 16		 jl	 SHORT $LN1@IsEnableEv
  010ef	8b 45 f8	 mov	 eax, DWORD PTR _iMapNumber$[ebp]
  010f2	6b c0 03	 imul	 eax, 3
  010f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010f8	0f b6 94 01 26
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+294]
  01100	39 55 f4	 cmp	 DWORD PTR _iLevel$[ebp], edx
  01103	7e 04		 jle	 SHORT $LN2@IsEnableEv
$LN1@IsEnableEv:

; 354  : 	{
; 355  : 		return FALSE;

  01105	33 c0		 xor	 eax, eax
  01107	eb 05		 jmp	 SHORT $LN4@IsEnableEv
$LN2@IsEnableEv:

; 356  : 	}
; 357  : 
; 358  : 	return TRUE;

  01109	b8 01 00 00 00	 mov	 eax, 1
$LN4@IsEnableEv:

; 359  : }

  0110e	5f		 pop	 edi
  0110f	5e		 pop	 esi
  01110	5b		 pop	 ebx
  01111	8b e5		 mov	 esp, ebp
  01113	5d		 pop	 ebp
  01114	c2 04 00	 ret	 4
?IsEnableEventItemDrop@CProbabilityItemBag@@AAEHH@Z ENDP ; CProbabilityItemBag::IsEnableEventItemDrop
_TEXT	ENDS
PUBLIC	?GetBagCount@CProbabilityItemBag@@AAEHXZ	; CProbabilityItemBag::GetBagCount
PUBLIC	?SortItem@CProbabilityItemBag@@QAEHH@Z		; CProbabilityItemBag::SortItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc4$ = -16						; size = 4
_loc3$ = -12						; size = 4
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?SortItem@CProbabilityItemBag@@QAEHH@Z PROC		; CProbabilityItemBag::SortItem
; _this$ = ecx

; 362  : {

  01120	55		 push	 ebp
  01121	8b ec		 mov	 ebp, esp
  01123	83 ec 50	 sub	 esp, 80			; 00000050H
  01126	53		 push	 ebx
  01127	56		 push	 esi
  01128	57		 push	 edi
  01129	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 363  : 	int loc2 = this->m_iRateKindCount;

  0112c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0112f	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  01135	89 4d f8	 mov	 DWORD PTR _loc2$[ebp], ecx

; 364  : 
; 365  : 	int loc3 = 0;

  01138	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 0

; 366  : 
; 367  : 	int loc4 = this->GetBagCount()-1;

  0113f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01142	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  01147	83 e8 01	 sub	 eax, 1
  0114a	89 45 f0	 mov	 DWORD PTR _loc4$[ebp], eax
$LN4@SortItem:

; 368  : 
; 369  : 	while(loc2-- != 0)

  0114d	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  01150	8b 4d f8	 mov	 ecx, DWORD PTR _loc2$[ebp]
  01153	83 e9 01	 sub	 ecx, 1
  01156	89 4d f8	 mov	 DWORD PTR _loc2$[ebp], ecx
  01159	85 c0		 test	 eax, eax
  0115b	74 7d		 je	 SHORT $LN3@SortItem

; 370  : 	{
; 371  : 		if(loc2 == 0)

  0115d	83 7d f8 00	 cmp	 DWORD PTR _loc2$[ebp], 0
  01161	75 14		 jne	 SHORT $LN2@SortItem

; 372  : 		{
; 373  : 			loc3 = rand()%this->m_iDropRatePerItemCount[0];

  01163	e8 00 00 00 00	 call	 _rand
  01168	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0116b	99		 cdq
  0116c	f7 b9 c8 07 00
	00		 idiv	 DWORD PTR [ecx+1992]
  01172	89 55 f4	 mov	 DWORD PTR _loc3$[ebp], edx

; 374  : 			break;

  01175	eb 63		 jmp	 SHORT $LN3@SortItem
$LN2@SortItem:

; 375  : 		}
; 376  : 
; 377  : 		if(n >= 10000 - this->m_iEventItemDropRateEx[loc2] && n < 10000 - this->m_iEventItemDropRateEx[loc2-1])

  01177	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  0117a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0117d	ba 10 27 00 00	 mov	 edx, 10000		; 00002710H
  01182	2b 94 81 78 07
	00 00		 sub	 edx, DWORD PTR [ecx+eax*4+1912]
  01189	39 55 08	 cmp	 DWORD PTR _n$[ebp], edx
  0118c	7c 34		 jl	 SHORT $LN1@SortItem
  0118e	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  01191	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01194	ba 10 27 00 00	 mov	 edx, 10000		; 00002710H
  01199	2b 94 81 74 07
	00 00		 sub	 edx, DWORD PTR [ecx+eax*4+1908]
  011a0	39 55 08	 cmp	 DWORD PTR _n$[ebp], edx
  011a3	7d 1d		 jge	 SHORT $LN1@SortItem

; 378  : 		{
; 379  : 			loc3 = loc4 - rand()%this->m_iDropRatePerItemCount[loc2];

  011a5	e8 00 00 00 00	 call	 _rand
  011aa	8b 4d f8	 mov	 ecx, DWORD PTR _loc2$[ebp]
  011ad	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  011b0	99		 cdq
  011b1	f7 bc 8e c8 07
	00 00		 idiv	 DWORD PTR [esi+ecx*4+1992]
  011b8	8b 45 f0	 mov	 eax, DWORD PTR _loc4$[ebp]
  011bb	2b c2		 sub	 eax, edx
  011bd	89 45 f4	 mov	 DWORD PTR _loc3$[ebp], eax

; 380  : 			break;

  011c0	eb 18		 jmp	 SHORT $LN3@SortItem
$LN1@SortItem:

; 381  : 		}
; 382  : 		loc4 = loc4 - this->m_iDropRatePerItemCount[loc2];

  011c2	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  011c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011c8	8b 55 f0	 mov	 edx, DWORD PTR _loc4$[ebp]
  011cb	2b 94 81 c8 07
	00 00		 sub	 edx, DWORD PTR [ecx+eax*4+1992]
  011d2	89 55 f0	 mov	 DWORD PTR _loc4$[ebp], edx

; 383  : 	}

  011d5	e9 73 ff ff ff	 jmp	 $LN4@SortItem
$LN3@SortItem:

; 384  : 
; 385  : 	return loc3;

  011da	8b 45 f4	 mov	 eax, DWORD PTR _loc3$[ebp]

; 386  : }

  011dd	5f		 pop	 edi
  011de	5e		 pop	 esi
  011df	5b		 pop	 ebx
  011e0	8b e5		 mov	 esp, ebp
  011e2	5d		 pop	 ebp
  011e3	c2 04 00	 ret	 4
?SortItem@CProbabilityItemBag@@QAEHH@Z ENDP		; CProbabilityItemBag::SortItem
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\probabilityitembag.h
_TEXT	ENDS
;	COMDAT ?GetBagCount@CProbabilityItemBag@@AAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBagCount@CProbabilityItemBag@@AAEHXZ PROC		; CProbabilityItemBag::GetBagCount, COMDAT
; _this$ = ecx

; 63   : 	int GetBagCount(){return this->m_iBagObjectCount;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 20 01 00
	00		 mov	 eax, DWORD PTR [eax+288]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetBagCount@CProbabilityItemBag@@AAEHXZ ENDP		; CProbabilityItemBag::GetBagCount
_TEXT	ENDS
PUBLIC	?GetEventName@CProbabilityItemBag@@AAEPADXZ	; CProbabilityItemBag::GetEventName
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\probabilityitembag.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEventName@CProbabilityItemBag@@AAEPADXZ PROC	; CProbabilityItemBag::GetEventName
; _this$ = ecx

; 389  : {

  011f0	55		 push	 ebp
  011f1	8b ec		 mov	 ebp, esp
  011f3	83 ec 44	 sub	 esp, 68			; 00000044H
  011f6	53		 push	 ebx
  011f7	56		 push	 esi
  011f8	57		 push	 edi
  011f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 390  : 	return m_sEventName;

  011fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011ff	83 c0 08	 add	 eax, 8

; 391  : }

  01202	5f		 pop	 edi
  01203	5e		 pop	 esi
  01204	5b		 pop	 ebx
  01205	8b e5		 mov	 esp, ebp
  01207	5d		 pop	 ebp
  01208	c3		 ret	 0
?GetEventName@CProbabilityItemBag@@AAEPADXZ ENDP	; CProbabilityItemBag::GetEventName
_TEXT	ENDS
PUBLIC	??_C@_0HN@GKJHCEFI@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@ ; `string'
PUBLIC	??_C@_0EG@NPFPBNJ@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@ ; `string'
PUBLIC	__real@00000000
PUBLIC	?DropNewYearLuckMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropNewYearLuckMonsterReward
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?NewOptionRand@@YAEH@Z:PROC			; NewOptionRand
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	?MoneyItemDrop@MapClass@@QAEHHHH@Z:PROC		; MapClass::MoneyItemDrop
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
;	COMDAT ??_C@_0HN@GKJHCEFI@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@
CONST	SEGMENT
??_C@_0HN@GKJHCEFI@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@ DB '[ NewYe'
	DB	'arLuckyBagMonsterEvent ] NewYearLuckyBagDrop [%s][%s] : (%d)('
	DB	'%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@NPFPBNJ@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@
CONST	SEGMENT
??_C@_0EG@NPFPBNJ@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@ DB '[ NewYea'
	DB	'rLuckyBagMonsterEvent ] NewYearLuckyBagDrop [%s][%s] [%d Zen]'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv325 = -140						; size = 4
tv323 = -136						; size = 4
tv320 = -130						; size = 2
_loc16$ = -64						; size = 4
_loc15$ = -60						; size = 4
_loc14$ = -56						; size = 4
_lpObj$ = -52						; size = 4
_loc12$ = -48						; size = 4
_ExOption$ = -44					; size = 4
_DropItemNum$ = -40					; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_level$ = -16						; size = 4
_type$ = -12						; size = 4
_dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropNewYearLuckMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropNewYearLuckMonsterReward
; _this$ = ecx

; 394  : {

  01210	55		 push	 ebp
  01211	8b ec		 mov	 ebp, esp
  01213	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  01219	53		 push	 ebx
  0121a	56		 push	 esi
  0121b	57		 push	 edi
  0121c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 395  : 	if ( this->m_bLoad == FALSE )

  0121f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01222	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  01226	75 07		 jne	 SHORT $LN16@DropNewYea

; 396  : 		return FALSE;

  01228	33 c0		 xor	 eax, eax
  0122a	e9 68 03 00 00	 jmp	 $LN17@DropNewYea
$LN16@DropNewYea:

; 397  : 
; 398  : 	float dur = 0;

  0122f	d9 ee		 fldz
  01231	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 399  : 	int type = 0; 

  01234	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0

; 400  : 	int level = 0;

  0123b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 401  : 	int x = 0;

  01242	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 402  : 	int y = 0;

  01249	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 403  : 	int Option1 = 0;

  01250	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 404  : 	int Option2 = 0;

  01257	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 405  : 	int Option3 = 0;

  0125e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 406  : 	int DropItemNum = 0;

  01265	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _DropItemNum$[ebp], 0

; 407  : 	int ExOption = 0;

  0126c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ExOption$[ebp], 0

; 408  : 	int loc12 = 0;

  01273	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 409  : 	LPOBJ lpObj = &gObj[aIndex];

  0127a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0127d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01283	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01289	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 410  : 	int loc14;
; 411  : 	int loc15;
; 412  : 	int loc16;
; 413  : 
; 414  : 	if ( this->GetBagCount() > 0 )

  0128c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0128f	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  01294	85 c0		 test	 eax, eax
  01296	0f 8e f6 02 00
	00		 jle	 $LN15@DropNewYea

; 415  : 	{
; 416  : 		loc14 = rand()%10000;

  0129c	e8 00 00 00 00	 call	 _rand
  012a1	99		 cdq
  012a2	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  012a7	f7 f9		 idiv	 ecx
  012a9	89 55 c8	 mov	 DWORD PTR _loc14$[ebp], edx

; 417  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1])

  012ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012af	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  012b6	74 1d		 je	 SHORT $LN13@DropNewYea
  012b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012bb	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  012c1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  012c4	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  012c9	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  012d0	39 45 c8	 cmp	 DWORD PTR _loc14$[ebp], eax
  012d3	7d 5f		 jge	 SHORT $LN14@DropNewYea
$LN13@DropNewYea:

; 418  : 		{
; 419  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  012d5	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  012d9	50		 push	 eax
  012da	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  012de	51		 push	 ecx
  012df	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  012e2	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  012e8	50		 push	 eax
  012e9	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  012ec	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  012f3	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  012f9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  012ff	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 420  : 			LogAddTD("[ NewYearLuckyBagMonsterEvent ] NewYearLuckyBagDrop [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  01304	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01307	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  0130d	51		 push	 ecx
  0130e	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01311	83 c2 77	 add	 edx, 119		; 00000077H
  01314	52		 push	 edx
  01315	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01318	83 c0 6c	 add	 eax, 108		; 0000006cH
  0131b	50		 push	 eax
  0131c	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@NPFPBNJ@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@
  01321	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01327	83 c4 10	 add	 esp, 16			; 00000010H

; 421  : 			return 1;

  0132a	b8 01 00 00 00	 mov	 eax, 1
  0132f	e9 63 02 00 00	 jmp	 $LN17@DropNewYea
$LN14@DropNewYea:

; 422  : 		}
; 423  : 			
; 424  : 		loc15 = this->m_iRateKindCount;

  01334	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01337	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  0133d	89 4d c4	 mov	 DWORD PTR _loc15$[ebp], ecx

; 425  : 		loc16 = this->SortItem(loc14);

  01340	8b 45 c8	 mov	 eax, DWORD PTR _loc14$[ebp]
  01343	50		 push	 eax
  01344	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01347	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem
  0134c	89 45 c0	 mov	 DWORD PTR _loc16$[ebp], eax

; 426  : 
; 427  : 		if ( cX == 0 && cY == 0 )

  0134f	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  01353	85 c0		 test	 eax, eax
  01355	75 24		 jne	 SHORT $LN12@DropNewYea
  01357	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  0135b	85 c0		 test	 eax, eax
  0135d	75 1c		 jne	 SHORT $LN12@DropNewYea

; 428  : 		{
; 429  : 			x = lpObj->X;

  0135f	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01362	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  01369	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 430  : 			y = lpObj->Y;

  0136c	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0136f	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  01376	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 431  : 		}
; 432  : 		else

  01379	eb 0e		 jmp	 SHORT $LN11@DropNewYea
$LN12@DropNewYea:

; 433  : 		{
; 434  : 			x = cX;

  0137b	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  0137f	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 435  : 			y = cY;

  01382	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  01386	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax
$LN11@DropNewYea:

; 436  : 		}
; 437  : 
; 438  : 		level = this->GetLevel(loc16);

  01389	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0138c	50		 push	 eax
  0138d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01390	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  01395	0f b6 c8	 movzx	 ecx, al
  01398	89 4d f0	 mov	 DWORD PTR _level$[ebp], ecx

; 439  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  0139b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0139e	6b c0 09	 imul	 eax, 9
  013a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013a4	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  013ac	52		 push	 edx
  013ad	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  013b0	6b c0 09	 imul	 eax, 9
  013b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013b6	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  013be	52		 push	 edx
  013bf	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  013c4	83 c4 08	 add	 esp, 8
  013c7	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax

; 440  : 
; 441  : 		if ( type == -1 )

  013ca	83 7d f4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  013ce	75 07		 jne	 SHORT $LN10@DropNewYea

; 442  : 		{
; 443  : 			return FALSE;

  013d0	33 c0		 xor	 eax, eax
  013d2	e9 c0 01 00 00	 jmp	 $LN17@DropNewYea
$LN10@DropNewYea:

; 444  : 		}
; 445  : 
; 446  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  013d7	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  013da	6b c0 09	 imul	 eax, 9
  013dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013e0	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  013e8	85 d2		 test	 edx, edx
  013ea	74 07		 je	 SHORT $LN9@DropNewYea

; 447  : 		{
; 448  : 			Option1 =1;

  013ec	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN9@DropNewYea:

; 449  : 		}
; 450  : 
; 451  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  013f3	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  013f6	6b c0 09	 imul	 eax, 9
  013f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013fc	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  01404	85 d2		 test	 edx, edx
  01406	74 23		 je	 SHORT $LN7@DropNewYea

; 452  : 		{
; 453  : 			Option2 = 0;

  01408	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 454  : 
; 455  : 			if ( (rand()%2) == 0 )

  0140f	e8 00 00 00 00	 call	 _rand
  01414	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  01419	79 05		 jns	 SHORT $LN19@DropNewYea
  0141b	48		 dec	 eax
  0141c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0141f	40		 inc	 eax
$LN19@DropNewYea:
  01420	85 c0		 test	 eax, eax
  01422	75 07		 jne	 SHORT $LN7@DropNewYea

; 456  : 			{
; 457  : 				Option2 = 1;

  01424	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN7@DropNewYea:

; 458  : 			}
; 459  : 		}
; 460  : 
; 461  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  0142b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0142e	6b c0 09	 imul	 eax, 9
  01431	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01434	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  0143c	85 d2		 test	 edx, edx
  0143e	74 2b		 je	 SHORT $LN4@DropNewYea

; 462  : 		{
; 463  : 			if ( rand()%5 < 1 )

  01440	e8 00 00 00 00	 call	 _rand
  01445	99		 cdq
  01446	b9 05 00 00 00	 mov	 ecx, 5
  0144b	f7 f9		 idiv	 ecx
  0144d	83 fa 01	 cmp	 edx, 1
  01450	7d 09		 jge	 SHORT $LN5@DropNewYea

; 464  : 			{
; 465  : 				Option3 = 3;

  01452	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 466  : 			}
; 467  : 			else

  01459	eb 10		 jmp	 SHORT $LN4@DropNewYea
$LN5@DropNewYea:

; 468  : 			{
; 469  : 				Option3 = rand()%3;

  0145b	e8 00 00 00 00	 call	 _rand
  01460	99		 cdq
  01461	b9 03 00 00 00	 mov	 ecx, 3
  01466	f7 f9		 idiv	 ecx
  01468	89 55 dc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropNewYea:

; 470  : 			}
; 471  : 		}
; 472  : 
; 473  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  0146b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0146e	6b c0 09	 imul	 eax, 9
  01471	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01474	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  0147c	85 d2		 test	 edx, edx
  0147e	74 17		 je	 SHORT $LN3@DropNewYea

; 474  : 		{
; 475  : 			loc12 = NewOptionRand(0);

  01480	6a 00		 push	 0
  01482	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  01487	83 c4 04	 add	 esp, 4
  0148a	0f b6 c0	 movzx	 eax, al
  0148d	89 45 d0	 mov	 DWORD PTR _loc12$[ebp], eax

; 476  : 			//Option2 = 0;
; 477  : 			Option1 = 1;

  01490	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN3@DropNewYea:

; 478  : 			//level = 0;
; 479  : 		}
; 480  : 
; 481  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  01497	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _type$[ebp], 6159 ; 0000180fH
  0149e	74 12		 je	 SHORT $LN1@DropNewYea
  014a0	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7181 ; 00001c0dH
  014a7	74 09		 je	 SHORT $LN1@DropNewYea
  014a9	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7182 ; 00001c0eH
  014b0	75 1c		 jne	 SHORT $LN2@DropNewYea
$LN1@DropNewYea:

; 482  : 		{
; 483  : 			Option1 = 0;

  014b2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 484  : 			Option2 = 0;

  014b9	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 485  : 			Option3 = 0;

  014c0	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 486  : 			level = 0;

  014c7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN2@DropNewYea:

; 487  : 		}
; 488  : 
; 489  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  014ce	6a 00		 push	 0
  014d0	0f b6 45 d0	 movzx	 eax, BYTE PTR _loc12$[ebp]
  014d4	50		 push	 eax
  014d5	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  014d8	8b 11		 mov	 edx, DWORD PTR [ecx]
  014da	52		 push	 edx
  014db	0f b6 45 dc	 movzx	 eax, BYTE PTR _Option3$[ebp]
  014df	50		 push	 eax
  014e0	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  014e4	51		 push	 ecx
  014e5	0f b6 55 e4	 movzx	 edx, BYTE PTR _Option1$[ebp]
  014e9	52		 push	 edx
  014ea	d9 45 f8	 fld	 DWORD PTR _dur$[ebp]
  014ed	d9 bd 7e ff ff
	ff		 fnstcw	 WORD PTR tv320[ebp]
  014f3	0f b7 85 7e ff
	ff ff		 movzx	 eax, WORD PTR tv320[ebp]
  014fa	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  014ff	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv323[ebp], eax
  01505	d9 ad 78 ff ff
	ff		 fldcw	 WORD PTR tv323[ebp]
  0150b	db 9d 74 ff ff
	ff		 fistp	 DWORD PTR tv325[ebp]
  01511	d9 ad 7e ff ff
	ff		 fldcw	 WORD PTR tv320[ebp]
  01517	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR tv325[ebp]
  0151e	50		 push	 eax
  0151f	0f b6 4d f0	 movzx	 ecx, BYTE PTR _level$[ebp]
  01523	51		 push	 ecx
  01524	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  01527	52		 push	 edx
  01528	0f b6 45 e8	 movzx	 eax, BYTE PTR _y$[ebp]
  0152c	50		 push	 eax
  0152d	0f b6 4d ec	 movzx	 ecx, BYTE PTR _x$[ebp]
  01531	51		 push	 ecx
  01532	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  01536	52		 push	 edx
  01537	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0153a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0153c	51		 push	 ecx
  0153d	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  01542	83 c4 34	 add	 esp, 52			; 00000034H

; 490  : 		LogAddTD("[ NewYearLuckyBagMonsterEvent ] NewYearLuckyBagDrop [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 491  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  01545	8b 45 d0	 mov	 eax, DWORD PTR _loc12$[ebp]
  01548	50		 push	 eax
  01549	8b 4d dc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  0154c	51		 push	 ecx
  0154d	8b 55 e0	 mov	 edx, DWORD PTR _Option2$[ebp]
  01550	52		 push	 edx
  01551	8b 45 e4	 mov	 eax, DWORD PTR _Option1$[ebp]
  01554	50		 push	 eax
  01555	8b 4d f0	 mov	 ecx, DWORD PTR _level$[ebp]
  01558	51		 push	 ecx
  01559	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  0155c	52		 push	 edx
  0155d	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  01560	6b c0 70	 imul	 eax, 112		; 00000070H
  01563	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  01568	50		 push	 eax
  01569	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  0156c	51		 push	 ecx
  0156d	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  01570	52		 push	 edx
  01571	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  01575	50		 push	 eax
  01576	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01579	83 c1 77	 add	 ecx, 119		; 00000077H
  0157c	51		 push	 ecx
  0157d	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01580	83 c2 6c	 add	 edx, 108		; 0000006cH
  01583	52		 push	 edx
  01584	68 00 00 00 00	 push	 OFFSET ??_C@_0HN@GKJHCEFI@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@
  01589	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0158f	83 c4 34	 add	 esp, 52			; 00000034H
$LN15@DropNewYea:

; 492  : 
; 493  : 	}
; 494  : 	return 1;

  01592	b8 01 00 00 00	 mov	 eax, 1
$LN17@DropNewYea:

; 495  : }

  01597	5f		 pop	 edi
  01598	5e		 pop	 esi
  01599	5b		 pop	 ebx
  0159a	8b e5		 mov	 esp, ebp
  0159c	5d		 pop	 ebp
  0159d	c2 10 00	 ret	 16			; 00000010H
?DropNewYearLuckMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropNewYearLuckMonsterReward
_TEXT	ENDS
PUBLIC	??_C@_0GP@MOLGNKBL@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@ ; `string'
PUBLIC	__real@437f0000
PUBLIC	??_C@_0DI@BKBFBIM@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@ ; `string'
PUBLIC	?DropGMPresentBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropGMPresentBoxReward
;	COMDAT ??_C@_0GP@MOLGNKBL@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@
CONST	SEGMENT
??_C@_0GP@MOLGNKBL@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@ DB '[ GMPre'
	DB	'sentBox ] GMPresentBoxItemDrop [%s][%s] : (%d)(%d/%d) Item:(%'
	DB	's)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT ??_C@_0DI@BKBFBIM@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@
CONST	SEGMENT
??_C@_0DI@BKBFBIM@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@ DB '[ GMPres'
	DB	'entBox ] GMPresentBoxItemDrop [%s][%s] [%d Zen]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv331 = -140						; size = 4
tv329 = -136						; size = 4
tv326 = -130						; size = 2
_loc16$ = -64						; size = 4
_loc15$ = -60						; size = 4
_loc14$ = -56						; size = 4
_lpObj$ = -52						; size = 4
_loc12$ = -48						; size = 4
_ExOption$ = -44					; size = 4
_DropItemNum$ = -40					; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_level$ = -16						; size = 4
_type$ = -12						; size = 4
_dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropGMPresentBoxReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropGMPresentBoxReward
; _this$ = ecx

; 498  : {

  015a0	55		 push	 ebp
  015a1	8b ec		 mov	 ebp, esp
  015a3	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  015a9	53		 push	 ebx
  015aa	56		 push	 esi
  015ab	57		 push	 edi
  015ac	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 499  : 	if ( this->m_bLoad == FALSE )

  015af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015b2	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  015b6	75 07		 jne	 SHORT $LN17@DropGMPres

; 500  : 		return FALSE;

  015b8	33 c0		 xor	 eax, eax
  015ba	e9 8d 03 00 00	 jmp	 $LN18@DropGMPres
$LN17@DropGMPres:

; 501  : 
; 502  : 	float dur = 0;

  015bf	d9 ee		 fldz
  015c1	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 503  : 	int type = 0;

  015c4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0

; 504  : 	int level = 0;

  015cb	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 505  : 	int x = 0;

  015d2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 506  : 	int y = 0;

  015d9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 507  : 	int Option1 = 0;

  015e0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 508  : 	int Option2 = 0;

  015e7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 509  : 	int Option3 = 0;

  015ee	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 510  : 	int DropItemNum = 0;

  015f5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _DropItemNum$[ebp], 0

; 511  : 	int ExOption = 0;

  015fc	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ExOption$[ebp], 0

; 512  : 	int loc12 = 0;

  01603	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 513  : 	LPOBJ lpObj = &gObj[aIndex];

  0160a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0160d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01613	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01619	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 514  : 	int loc14;
; 515  : 	int loc15;
; 516  : 	int loc16;
; 517  : 
; 518  : 	if ( this->GetBagCount() > 0 )

  0161c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0161f	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  01624	85 c0		 test	 eax, eax
  01626	0f 8e 1b 03 00
	00		 jle	 $LN16@DropGMPres

; 519  : 	{
; 520  : 		loc14 = rand()%10000;

  0162c	e8 00 00 00 00	 call	 _rand
  01631	99		 cdq
  01632	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  01637	f7 f9		 idiv	 ecx
  01639	89 55 c8	 mov	 DWORD PTR _loc14$[ebp], edx

; 521  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1])

  0163c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0163f	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  01646	74 1d		 je	 SHORT $LN14@DropGMPres
  01648	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0164b	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  01651	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01654	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  01659	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  01660	39 45 c8	 cmp	 DWORD PTR _loc14$[ebp], eax
  01663	7d 6b		 jge	 SHORT $LN15@DropGMPres
$LN14@DropGMPres:

; 522  : 		{
; 523  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, lpObj->X, lpObj->Y);

  01665	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01668	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0166f	51		 push	 ecx
  01670	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01673	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  0167a	50		 push	 eax
  0167b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0167e	8b 91 10 01 00
	00		 mov	 edx, DWORD PTR [ecx+272]
  01684	52		 push	 edx
  01685	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01688	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0168f	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  01695	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0169b	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 524  : 			LogAddTD("[ GMPresentBox ] GMPresentBoxItemDrop [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  016a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  016a3	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  016a9	51		 push	 ecx
  016aa	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  016ad	83 c2 77	 add	 edx, 119		; 00000077H
  016b0	52		 push	 edx
  016b1	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016b4	83 c0 6c	 add	 eax, 108		; 0000006cH
  016b7	50		 push	 eax
  016b8	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@BKBFBIM@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@
  016bd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  016c3	83 c4 10	 add	 esp, 16			; 00000010H

; 525  : 			return 1;

  016c6	b8 01 00 00 00	 mov	 eax, 1
  016cb	e9 7c 02 00 00	 jmp	 $LN18@DropGMPres
$LN15@DropGMPres:

; 526  : 		}
; 527  : 			
; 528  : 		loc15 = this->m_iRateKindCount;

  016d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  016d3	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  016d9	89 4d c4	 mov	 DWORD PTR _loc15$[ebp], ecx

; 529  : 		loc16 = this->SortItem(loc14);

  016dc	8b 45 c8	 mov	 eax, DWORD PTR _loc14$[ebp]
  016df	50		 push	 eax
  016e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016e3	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem
  016e8	89 45 c0	 mov	 DWORD PTR _loc16$[ebp], eax

; 530  : 
; 531  : 		if ( cX == 0 && cY == 0 )

  016eb	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  016ef	85 c0		 test	 eax, eax
  016f1	75 24		 jne	 SHORT $LN13@DropGMPres
  016f3	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  016f7	85 c0		 test	 eax, eax
  016f9	75 1c		 jne	 SHORT $LN13@DropGMPres

; 532  : 		{
; 533  : 			x = lpObj->X;

  016fb	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016fe	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  01705	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 534  : 			y = lpObj->Y;

  01708	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0170b	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  01712	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 535  : 		}
; 536  : 		else

  01715	eb 0e		 jmp	 SHORT $LN12@DropGMPres
$LN13@DropGMPres:

; 537  : 		{
; 538  : 			x = cX;

  01717	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  0171b	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 539  : 			y = cY;

  0171e	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  01722	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax
$LN12@DropGMPres:

; 540  : 		}
; 541  : 
; 542  : 		level = this->GetLevel(loc16);

  01725	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01728	50		 push	 eax
  01729	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0172c	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  01731	0f b6 c8	 movzx	 ecx, al
  01734	89 4d f0	 mov	 DWORD PTR _level$[ebp], ecx

; 543  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  01737	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0173a	6b c0 09	 imul	 eax, 9
  0173d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01740	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  01748	52		 push	 edx
  01749	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0174c	6b c0 09	 imul	 eax, 9
  0174f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01752	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  0175a	52		 push	 edx
  0175b	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  01760	83 c4 08	 add	 esp, 8
  01763	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax

; 544  : 
; 545  : 		if ( type == -1 )

  01766	83 7d f4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  0176a	75 07		 jne	 SHORT $LN11@DropGMPres

; 546  : 		{
; 547  : 			return FALSE;

  0176c	33 c0		 xor	 eax, eax
  0176e	e9 d9 01 00 00	 jmp	 $LN18@DropGMPres
$LN11@DropGMPres:

; 548  : 		}
; 549  : 
; 550  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  01773	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01776	6b c0 09	 imul	 eax, 9
  01779	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0177c	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  01784	85 d2		 test	 edx, edx
  01786	74 07		 je	 SHORT $LN10@DropGMPres

; 551  : 		{
; 552  : 			Option1 =1;

  01788	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN10@DropGMPres:

; 553  : 		}
; 554  : 
; 555  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  0178f	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01792	6b c0 09	 imul	 eax, 9
  01795	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01798	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  017a0	85 d2		 test	 edx, edx
  017a2	74 23		 je	 SHORT $LN8@DropGMPres

; 556  : 		{
; 557  : 			Option2 = 0;

  017a4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 558  : 
; 559  : 			if ( (rand()%2) == 0 )

  017ab	e8 00 00 00 00	 call	 _rand
  017b0	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  017b5	79 05		 jns	 SHORT $LN20@DropGMPres
  017b7	48		 dec	 eax
  017b8	83 c8 fe	 or	 eax, -2			; fffffffeH
  017bb	40		 inc	 eax
$LN20@DropGMPres:
  017bc	85 c0		 test	 eax, eax
  017be	75 07		 jne	 SHORT $LN8@DropGMPres

; 560  : 			{
; 561  : 				Option2 = 1;

  017c0	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN8@DropGMPres:

; 562  : 			}
; 563  : 		}
; 564  : 
; 565  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  017c7	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  017ca	6b c0 09	 imul	 eax, 9
  017cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017d0	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  017d8	85 d2		 test	 edx, edx
  017da	74 2b		 je	 SHORT $LN5@DropGMPres

; 566  : 		{
; 567  : 			if ( rand()%5 < 1 )

  017dc	e8 00 00 00 00	 call	 _rand
  017e1	99		 cdq
  017e2	b9 05 00 00 00	 mov	 ecx, 5
  017e7	f7 f9		 idiv	 ecx
  017e9	83 fa 01	 cmp	 edx, 1
  017ec	7d 09		 jge	 SHORT $LN6@DropGMPres

; 568  : 			{
; 569  : 				Option3 = 3;

  017ee	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 570  : 			}
; 571  : 			else

  017f5	eb 10		 jmp	 SHORT $LN5@DropGMPres
$LN6@DropGMPres:

; 572  : 			{
; 573  : 				Option3 = rand()%3;

  017f7	e8 00 00 00 00	 call	 _rand
  017fc	99		 cdq
  017fd	b9 03 00 00 00	 mov	 ecx, 3
  01802	f7 f9		 idiv	 ecx
  01804	89 55 dc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN5@DropGMPres:

; 574  : 			}
; 575  : 		}
; 576  : 
; 577  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  01807	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0180a	6b c0 09	 imul	 eax, 9
  0180d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01810	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  01818	85 d2		 test	 edx, edx
  0181a	74 17		 je	 SHORT $LN4@DropGMPres

; 578  : 		{
; 579  : 			loc12 = NewOptionRand(0);

  0181c	6a 00		 push	 0
  0181e	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  01823	83 c4 04	 add	 esp, 4
  01826	0f b6 c0	 movzx	 eax, al
  01829	89 45 d0	 mov	 DWORD PTR _loc12$[ebp], eax

; 580  : 			//Option2 = 0;
; 581  : 			Option1 = 1;

  0182c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN4@DropGMPres:

; 582  : 			//level = 0;
; 583  : 		}
; 584  : 
; 585  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  01833	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _type$[ebp], 6159 ; 0000180fH
  0183a	74 12		 je	 SHORT $LN2@DropGMPres
  0183c	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7181 ; 00001c0dH
  01843	74 09		 je	 SHORT $LN2@DropGMPres
  01845	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7182 ; 00001c0eH
  0184c	75 1c		 jne	 SHORT $LN3@DropGMPres
$LN2@DropGMPres:

; 586  : 		{
; 587  : 			Option1 = 0;

  0184e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 588  : 			Option2 = 0;

  01855	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 589  : 			Option3 = 0;

  0185c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 590  : 			level = 0;

  01863	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN3@DropGMPres:

; 591  : 		}
; 592  : 
; 593  : 		if ( type == ITEMGET(13,20) )

  0186a	81 7d f4 14 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6676 ; 00001a14H
  01871	75 10		 jne	 SHORT $LN1@DropGMPres

; 594  : 		{
; 595  : 			level = 0;

  01873	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 596  : 			dur = 255;

  0187a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@437f0000
  01880	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]
$LN1@DropGMPres:

; 597  : 		}
; 598  : 
; 599  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  01883	6a 00		 push	 0
  01885	0f b6 45 d0	 movzx	 eax, BYTE PTR _loc12$[ebp]
  01889	50		 push	 eax
  0188a	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0188d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0188f	52		 push	 edx
  01890	0f b6 45 dc	 movzx	 eax, BYTE PTR _Option3$[ebp]
  01894	50		 push	 eax
  01895	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  01899	51		 push	 ecx
  0189a	0f b6 55 e4	 movzx	 edx, BYTE PTR _Option1$[ebp]
  0189e	52		 push	 edx
  0189f	d9 45 f8	 fld	 DWORD PTR _dur$[ebp]
  018a2	d9 bd 7e ff ff
	ff		 fnstcw	 WORD PTR tv326[ebp]
  018a8	0f b7 85 7e ff
	ff ff		 movzx	 eax, WORD PTR tv326[ebp]
  018af	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  018b4	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  018ba	d9 ad 78 ff ff
	ff		 fldcw	 WORD PTR tv329[ebp]
  018c0	db 9d 74 ff ff
	ff		 fistp	 DWORD PTR tv331[ebp]
  018c6	d9 ad 7e ff ff
	ff		 fldcw	 WORD PTR tv326[ebp]
  018cc	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR tv331[ebp]
  018d3	50		 push	 eax
  018d4	0f b6 4d f0	 movzx	 ecx, BYTE PTR _level$[ebp]
  018d8	51		 push	 ecx
  018d9	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  018dc	52		 push	 edx
  018dd	0f b6 45 e8	 movzx	 eax, BYTE PTR _y$[ebp]
  018e1	50		 push	 eax
  018e2	0f b6 4d ec	 movzx	 ecx, BYTE PTR _x$[ebp]
  018e6	51		 push	 ecx
  018e7	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  018eb	52		 push	 edx
  018ec	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  018ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  018f1	51		 push	 ecx
  018f2	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  018f7	83 c4 34	 add	 esp, 52			; 00000034H

; 600  : 		LogAddTD("[ GMPresentBox ] GMPresentBoxItemDrop [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 601  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  018fa	8b 45 d0	 mov	 eax, DWORD PTR _loc12$[ebp]
  018fd	50		 push	 eax
  018fe	8b 4d dc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  01901	51		 push	 ecx
  01902	8b 55 e0	 mov	 edx, DWORD PTR _Option2$[ebp]
  01905	52		 push	 edx
  01906	8b 45 e4	 mov	 eax, DWORD PTR _Option1$[ebp]
  01909	50		 push	 eax
  0190a	8b 4d f0	 mov	 ecx, DWORD PTR _level$[ebp]
  0190d	51		 push	 ecx
  0190e	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  01911	52		 push	 edx
  01912	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  01915	6b c0 70	 imul	 eax, 112		; 00000070H
  01918	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0191d	50		 push	 eax
  0191e	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  01921	51		 push	 ecx
  01922	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  01925	52		 push	 edx
  01926	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  0192a	50		 push	 eax
  0192b	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0192e	83 c1 77	 add	 ecx, 119		; 00000077H
  01931	51		 push	 ecx
  01932	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01935	83 c2 6c	 add	 edx, 108		; 0000006cH
  01938	52		 push	 edx
  01939	68 00 00 00 00	 push	 OFFSET ??_C@_0GP@MOLGNKBL@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@
  0193e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01944	83 c4 34	 add	 esp, 52			; 00000034H
$LN16@DropGMPres:

; 602  : 
; 603  : 	}
; 604  : 	return 1;

  01947	b8 01 00 00 00	 mov	 eax, 1
$LN18@DropGMPres:

; 605  : }

  0194c	5f		 pop	 edi
  0194d	5e		 pop	 esi
  0194e	5b		 pop	 ebx
  0194f	8b e5		 mov	 esp, ebp
  01951	5d		 pop	 ebp
  01952	c2 10 00	 ret	 16			; 00000010H
?DropGMPresentBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropGMPresentBoxReward
_TEXT	ENDS
PUBLIC	??_C@_0HF@GABPJFOM@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@ ; `string'
PUBLIC	??_C@_0DO@GKLPNLL@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@ ; `string'
PUBLIC	?DropPCBangGreenChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropPCBangGreenChaosBoxReward
;	COMDAT ??_C@_0HF@GABPJFOM@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@
CONST	SEGMENT
??_C@_0HF@GABPJFOM@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfGreenChaosItem [%s][%s] : (%d)(%d/%d) Ite'
	DB	'm:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@GKLPNLL@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@
CONST	SEGMENT
??_C@_0DO@GKLPNLL@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@ DB '[PCBangPoi'
	DB	'ntSystem] DropBoxOfGreenChaosItem [%s][%s] [%d Zen]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv325 = -140						; size = 4
tv323 = -136						; size = 4
tv320 = -130						; size = 2
_loc16$ = -64						; size = 4
_loc15$ = -60						; size = 4
_loc14$ = -56						; size = 4
_lpObj$ = -52						; size = 4
_loc12$ = -48						; size = 4
_ExOption$ = -44					; size = 4
_DropItemNum$ = -40					; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_level$ = -16						; size = 4
_type$ = -12						; size = 4
_dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropPCBangGreenChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropPCBangGreenChaosBoxReward
; _this$ = ecx

; 608  : {

  01960	55		 push	 ebp
  01961	8b ec		 mov	 ebp, esp
  01963	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  01969	53		 push	 ebx
  0196a	56		 push	 esi
  0196b	57		 push	 edi
  0196c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 609  : 	if ( this->m_bLoad == FALSE )

  0196f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01972	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  01976	75 07		 jne	 SHORT $LN16@DropPCBang

; 610  : 		return FALSE;

  01978	33 c0		 xor	 eax, eax
  0197a	e9 68 03 00 00	 jmp	 $LN17@DropPCBang
$LN16@DropPCBang:

; 611  : 
; 612  : 	float dur = 0;

  0197f	d9 ee		 fldz
  01981	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 613  : 	int type = 0;

  01984	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0

; 614  : 	int level = 0;

  0198b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 615  : 	int x = 0;

  01992	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 616  : 	int y = 0;

  01999	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 617  : 	int Option1 = 0;

  019a0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 618  : 	int Option2 = 0;

  019a7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 619  : 	int Option3 = 0;

  019ae	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 620  : 	int DropItemNum = 0;

  019b5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _DropItemNum$[ebp], 0

; 621  : 	int ExOption = 0;

  019bc	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ExOption$[ebp], 0

; 622  : 	int loc12 = 0;

  019c3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 623  : 	LPOBJ lpObj = &gObj[aIndex];

  019ca	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  019cd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  019d3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  019d9	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 624  : 	int loc14;
; 625  : 	int loc15;
; 626  : 	int loc16;
; 627  : 
; 628  : 	if ( this->GetBagCount() > 0 )

  019dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019df	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  019e4	85 c0		 test	 eax, eax
  019e6	0f 8e f6 02 00
	00		 jle	 $LN15@DropPCBang

; 629  : 	{
; 630  : 		loc14 = rand()%10000;

  019ec	e8 00 00 00 00	 call	 _rand
  019f1	99		 cdq
  019f2	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  019f7	f7 f9		 idiv	 ecx
  019f9	89 55 c8	 mov	 DWORD PTR _loc14$[ebp], edx

; 631  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1])

  019fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  019ff	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  01a06	74 1d		 je	 SHORT $LN13@DropPCBang
  01a08	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a0b	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  01a11	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a14	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  01a19	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  01a20	39 45 c8	 cmp	 DWORD PTR _loc14$[ebp], eax
  01a23	7d 5f		 jge	 SHORT $LN14@DropPCBang
$LN13@DropPCBang:

; 632  : 		{
; 633  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  01a25	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  01a29	50		 push	 eax
  01a2a	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  01a2e	51		 push	 ecx
  01a2f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a32	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  01a38	50		 push	 eax
  01a39	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01a3c	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  01a43	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  01a49	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  01a4f	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 634  : 			LogAddTD("[PCBangPointSystem] DropBoxOfGreenChaosItem [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  01a54	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a57	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  01a5d	51		 push	 ecx
  01a5e	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01a61	83 c2 77	 add	 edx, 119		; 00000077H
  01a64	52		 push	 edx
  01a65	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a68	83 c0 6c	 add	 eax, 108		; 0000006cH
  01a6b	50		 push	 eax
  01a6c	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@GKLPNLL@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@
  01a71	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01a77	83 c4 10	 add	 esp, 16			; 00000010H

; 635  : 			return 1;

  01a7a	b8 01 00 00 00	 mov	 eax, 1
  01a7f	e9 63 02 00 00	 jmp	 $LN17@DropPCBang
$LN14@DropPCBang:

; 636  : 		}
; 637  : 			
; 638  : 		loc15 = this->m_iRateKindCount;

  01a84	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a87	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  01a8d	89 4d c4	 mov	 DWORD PTR _loc15$[ebp], ecx

; 639  : 		loc16 = this->SortItem(loc14);

  01a90	8b 45 c8	 mov	 eax, DWORD PTR _loc14$[ebp]
  01a93	50		 push	 eax
  01a94	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a97	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem
  01a9c	89 45 c0	 mov	 DWORD PTR _loc16$[ebp], eax

; 640  : 
; 641  : 		if ( cX == 0 && cY == 0 )

  01a9f	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  01aa3	85 c0		 test	 eax, eax
  01aa5	75 24		 jne	 SHORT $LN12@DropPCBang
  01aa7	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  01aab	85 c0		 test	 eax, eax
  01aad	75 1c		 jne	 SHORT $LN12@DropPCBang

; 642  : 		{
; 643  : 			x = lpObj->X;

  01aaf	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ab2	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  01ab9	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 644  : 			y = lpObj->Y;

  01abc	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01abf	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  01ac6	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 645  : 		}
; 646  : 		else

  01ac9	eb 0e		 jmp	 SHORT $LN11@DropPCBang
$LN12@DropPCBang:

; 647  : 		{
; 648  : 			x = cX;

  01acb	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  01acf	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 649  : 			y = cY;

  01ad2	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  01ad6	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax
$LN11@DropPCBang:

; 650  : 		}
; 651  : 
; 652  : 		level = this->GetLevel(loc16);

  01ad9	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01adc	50		 push	 eax
  01add	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ae0	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  01ae5	0f b6 c8	 movzx	 ecx, al
  01ae8	89 4d f0	 mov	 DWORD PTR _level$[ebp], ecx

; 653  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  01aeb	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01aee	6b c0 09	 imul	 eax, 9
  01af1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01af4	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  01afc	52		 push	 edx
  01afd	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01b00	6b c0 09	 imul	 eax, 9
  01b03	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b06	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  01b0e	52		 push	 edx
  01b0f	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  01b14	83 c4 08	 add	 esp, 8
  01b17	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax

; 654  : 
; 655  : 		if ( type == -1 )

  01b1a	83 7d f4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  01b1e	75 07		 jne	 SHORT $LN10@DropPCBang

; 656  : 		{
; 657  : 			return FALSE;

  01b20	33 c0		 xor	 eax, eax
  01b22	e9 c0 01 00 00	 jmp	 $LN17@DropPCBang
$LN10@DropPCBang:

; 658  : 		}
; 659  : 
; 660  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  01b27	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01b2a	6b c0 09	 imul	 eax, 9
  01b2d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b30	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  01b38	85 d2		 test	 edx, edx
  01b3a	74 07		 je	 SHORT $LN9@DropPCBang

; 661  : 		{
; 662  : 			Option1 =1;

  01b3c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN9@DropPCBang:

; 663  : 		}
; 664  : 
; 665  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  01b43	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01b46	6b c0 09	 imul	 eax, 9
  01b49	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b4c	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  01b54	85 d2		 test	 edx, edx
  01b56	74 23		 je	 SHORT $LN7@DropPCBang

; 666  : 		{
; 667  : 			Option2 = 0;

  01b58	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 668  : 
; 669  : 			if ( (rand()%2) == 0 )

  01b5f	e8 00 00 00 00	 call	 _rand
  01b64	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  01b69	79 05		 jns	 SHORT $LN19@DropPCBang
  01b6b	48		 dec	 eax
  01b6c	83 c8 fe	 or	 eax, -2			; fffffffeH
  01b6f	40		 inc	 eax
$LN19@DropPCBang:
  01b70	85 c0		 test	 eax, eax
  01b72	75 07		 jne	 SHORT $LN7@DropPCBang

; 670  : 			{
; 671  : 				Option2 = 1;

  01b74	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN7@DropPCBang:

; 672  : 			}
; 673  : 		}
; 674  : 
; 675  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  01b7b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01b7e	6b c0 09	 imul	 eax, 9
  01b81	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b84	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  01b8c	85 d2		 test	 edx, edx
  01b8e	74 2b		 je	 SHORT $LN4@DropPCBang

; 676  : 		{
; 677  : 			if ( rand()%5 < 1 )

  01b90	e8 00 00 00 00	 call	 _rand
  01b95	99		 cdq
  01b96	b9 05 00 00 00	 mov	 ecx, 5
  01b9b	f7 f9		 idiv	 ecx
  01b9d	83 fa 01	 cmp	 edx, 1
  01ba0	7d 09		 jge	 SHORT $LN5@DropPCBang

; 678  : 			{
; 679  : 				Option3 = 3;

  01ba2	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 680  : 			}
; 681  : 			else

  01ba9	eb 10		 jmp	 SHORT $LN4@DropPCBang
$LN5@DropPCBang:

; 682  : 			{
; 683  : 				Option3 = rand()%3;

  01bab	e8 00 00 00 00	 call	 _rand
  01bb0	99		 cdq
  01bb1	b9 03 00 00 00	 mov	 ecx, 3
  01bb6	f7 f9		 idiv	 ecx
  01bb8	89 55 dc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropPCBang:

; 684  : 			}
; 685  : 		}
; 686  : 
; 687  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  01bbb	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01bbe	6b c0 09	 imul	 eax, 9
  01bc1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bc4	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  01bcc	85 d2		 test	 edx, edx
  01bce	74 17		 je	 SHORT $LN3@DropPCBang

; 688  : 		{
; 689  : 			loc12 = NewOptionRand(0);

  01bd0	6a 00		 push	 0
  01bd2	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  01bd7	83 c4 04	 add	 esp, 4
  01bda	0f b6 c0	 movzx	 eax, al
  01bdd	89 45 d0	 mov	 DWORD PTR _loc12$[ebp], eax

; 690  : 			//Option2 = 0;
; 691  : 			Option1 = 1;

  01be0	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN3@DropPCBang:

; 692  : 			//level = 0;
; 693  : 		}
; 694  : 
; 695  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  01be7	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _type$[ebp], 6159 ; 0000180fH
  01bee	74 12		 je	 SHORT $LN1@DropPCBang
  01bf0	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7181 ; 00001c0dH
  01bf7	74 09		 je	 SHORT $LN1@DropPCBang
  01bf9	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7182 ; 00001c0eH
  01c00	75 1c		 jne	 SHORT $LN2@DropPCBang
$LN1@DropPCBang:

; 696  : 		{
; 697  : 			Option1 = 0;

  01c02	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 698  : 			Option2 = 0;

  01c09	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 699  : 			Option3 = 0;

  01c10	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 700  : 			level = 0;

  01c17	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN2@DropPCBang:

; 701  : 		}
; 702  : 
; 703  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  01c1e	6a 00		 push	 0
  01c20	0f b6 45 d0	 movzx	 eax, BYTE PTR _loc12$[ebp]
  01c24	50		 push	 eax
  01c25	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01c28	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c2a	52		 push	 edx
  01c2b	0f b6 45 dc	 movzx	 eax, BYTE PTR _Option3$[ebp]
  01c2f	50		 push	 eax
  01c30	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  01c34	51		 push	 ecx
  01c35	0f b6 55 e4	 movzx	 edx, BYTE PTR _Option1$[ebp]
  01c39	52		 push	 edx
  01c3a	d9 45 f8	 fld	 DWORD PTR _dur$[ebp]
  01c3d	d9 bd 7e ff ff
	ff		 fnstcw	 WORD PTR tv320[ebp]
  01c43	0f b7 85 7e ff
	ff ff		 movzx	 eax, WORD PTR tv320[ebp]
  01c4a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  01c4f	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv323[ebp], eax
  01c55	d9 ad 78 ff ff
	ff		 fldcw	 WORD PTR tv323[ebp]
  01c5b	db 9d 74 ff ff
	ff		 fistp	 DWORD PTR tv325[ebp]
  01c61	d9 ad 7e ff ff
	ff		 fldcw	 WORD PTR tv320[ebp]
  01c67	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR tv325[ebp]
  01c6e	50		 push	 eax
  01c6f	0f b6 4d f0	 movzx	 ecx, BYTE PTR _level$[ebp]
  01c73	51		 push	 ecx
  01c74	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  01c77	52		 push	 edx
  01c78	0f b6 45 e8	 movzx	 eax, BYTE PTR _y$[ebp]
  01c7c	50		 push	 eax
  01c7d	0f b6 4d ec	 movzx	 ecx, BYTE PTR _x$[ebp]
  01c81	51		 push	 ecx
  01c82	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  01c86	52		 push	 edx
  01c87	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c8a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c8c	51		 push	 ecx
  01c8d	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  01c92	83 c4 34	 add	 esp, 52			; 00000034H

; 704  : 		LogAddTD("[PCBangPointSystem] DropBoxOfGreenChaosItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 705  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  01c95	8b 45 d0	 mov	 eax, DWORD PTR _loc12$[ebp]
  01c98	50		 push	 eax
  01c99	8b 4d dc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  01c9c	51		 push	 ecx
  01c9d	8b 55 e0	 mov	 edx, DWORD PTR _Option2$[ebp]
  01ca0	52		 push	 edx
  01ca1	8b 45 e4	 mov	 eax, DWORD PTR _Option1$[ebp]
  01ca4	50		 push	 eax
  01ca5	8b 4d f0	 mov	 ecx, DWORD PTR _level$[ebp]
  01ca8	51		 push	 ecx
  01ca9	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  01cac	52		 push	 edx
  01cad	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  01cb0	6b c0 70	 imul	 eax, 112		; 00000070H
  01cb3	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  01cb8	50		 push	 eax
  01cb9	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  01cbc	51		 push	 ecx
  01cbd	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  01cc0	52		 push	 edx
  01cc1	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  01cc5	50		 push	 eax
  01cc6	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01cc9	83 c1 77	 add	 ecx, 119		; 00000077H
  01ccc	51		 push	 ecx
  01ccd	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01cd0	83 c2 6c	 add	 edx, 108		; 0000006cH
  01cd3	52		 push	 edx
  01cd4	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@GABPJFOM@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@
  01cd9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01cdf	83 c4 34	 add	 esp, 52			; 00000034H
$LN15@DropPCBang:

; 706  : 
; 707  : 	}
; 708  : 	return 1;

  01ce2	b8 01 00 00 00	 mov	 eax, 1
$LN17@DropPCBang:

; 709  : }

  01ce7	5f		 pop	 edi
  01ce8	5e		 pop	 esi
  01ce9	5b		 pop	 ebx
  01cea	8b e5		 mov	 esp, ebp
  01cec	5d		 pop	 ebp
  01ced	c2 10 00	 ret	 16			; 00000010H
?DropPCBangGreenChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropPCBangGreenChaosBoxReward
_TEXT	ENDS
PUBLIC	??_C@_0HD@LHFCFBDD@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@ ; `string'
PUBLIC	??_C@_0DM@JFLICMGN@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@ ; `string'
PUBLIC	?DropPCBangRedChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropPCBangRedChaosBoxReward
;	COMDAT ??_C@_0HD@LHFCFBDD@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@
CONST	SEGMENT
??_C@_0HD@LHFCFBDD@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfRedChaosItem [%s][%s] : (%d)(%d/%d) Item:'
	DB	'(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@JFLICMGN@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@
CONST	SEGMENT
??_C@_0DM@JFLICMGN@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfRedChaosItem [%s][%s] [%d Zen]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv325 = -140						; size = 4
tv323 = -136						; size = 4
tv320 = -130						; size = 2
_loc16$ = -64						; size = 4
_loc15$ = -60						; size = 4
_loc14$ = -56						; size = 4
_lpObj$ = -52						; size = 4
_loc12$ = -48						; size = 4
_ExOption$ = -44					; size = 4
_DropItemNum$ = -40					; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_level$ = -16						; size = 4
_type$ = -12						; size = 4
_dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropPCBangRedChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropPCBangRedChaosBoxReward
; _this$ = ecx

; 712  : {

  01cf0	55		 push	 ebp
  01cf1	8b ec		 mov	 ebp, esp
  01cf3	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  01cf9	53		 push	 ebx
  01cfa	56		 push	 esi
  01cfb	57		 push	 edi
  01cfc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 713  : 	if ( this->m_bLoad == FALSE )

  01cff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d02	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  01d06	75 07		 jne	 SHORT $LN16@DropPCBang@2

; 714  : 		return FALSE;

  01d08	33 c0		 xor	 eax, eax
  01d0a	e9 68 03 00 00	 jmp	 $LN17@DropPCBang@2
$LN16@DropPCBang@2:

; 715  : 
; 716  : 	float dur = 0;

  01d0f	d9 ee		 fldz
  01d11	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 717  : 	int type = 0;

  01d14	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0

; 718  : 	int level = 0;

  01d1b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 719  : 	int x = 0;

  01d22	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 720  : 	int y = 0;

  01d29	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 721  : 	int Option1 = 0;

  01d30	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 722  : 	int Option2 = 0;

  01d37	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 723  : 	int Option3 = 0;

  01d3e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 724  : 	int DropItemNum = 0;

  01d45	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _DropItemNum$[ebp], 0

; 725  : 	int ExOption = 0;

  01d4c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ExOption$[ebp], 0

; 726  : 	int loc12 = 0;

  01d53	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 727  : 	LPOBJ lpObj = &gObj[aIndex];

  01d5a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01d5d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01d63	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01d69	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 728  : 	int loc14;
; 729  : 	int loc15;
; 730  : 	int loc16;
; 731  : 
; 732  : 	if ( this->GetBagCount() > 0 )

  01d6c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d6f	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  01d74	85 c0		 test	 eax, eax
  01d76	0f 8e f6 02 00
	00		 jle	 $LN15@DropPCBang@2

; 733  : 	{
; 734  : 		loc14 = rand()%10000;

  01d7c	e8 00 00 00 00	 call	 _rand
  01d81	99		 cdq
  01d82	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  01d87	f7 f9		 idiv	 ecx
  01d89	89 55 c8	 mov	 DWORD PTR _loc14$[ebp], edx

; 735  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1])

  01d8c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d8f	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  01d96	74 1d		 je	 SHORT $LN13@DropPCBang@2
  01d98	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d9b	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  01da1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01da4	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  01da9	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  01db0	39 45 c8	 cmp	 DWORD PTR _loc14$[ebp], eax
  01db3	7d 5f		 jge	 SHORT $LN14@DropPCBang@2
$LN13@DropPCBang@2:

; 736  : 		{
; 737  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  01db5	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  01db9	50		 push	 eax
  01dba	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  01dbe	51		 push	 ecx
  01dbf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01dc2	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  01dc8	50		 push	 eax
  01dc9	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01dcc	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  01dd3	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  01dd9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  01ddf	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 738  : 			LogAddTD("[PCBangPointSystem] DropBoxOfRedChaosItem [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  01de4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01de7	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  01ded	51		 push	 ecx
  01dee	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01df1	83 c2 77	 add	 edx, 119		; 00000077H
  01df4	52		 push	 edx
  01df5	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01df8	83 c0 6c	 add	 eax, 108		; 0000006cH
  01dfb	50		 push	 eax
  01dfc	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@JFLICMGN@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@
  01e01	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01e07	83 c4 10	 add	 esp, 16			; 00000010H

; 739  : 			return 1;

  01e0a	b8 01 00 00 00	 mov	 eax, 1
  01e0f	e9 63 02 00 00	 jmp	 $LN17@DropPCBang@2
$LN14@DropPCBang@2:

; 740  : 		}
; 741  : 			
; 742  : 		loc15 = this->m_iRateKindCount;

  01e14	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01e17	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  01e1d	89 4d c4	 mov	 DWORD PTR _loc15$[ebp], ecx

; 743  : 		loc16 = this->SortItem(loc14);

  01e20	8b 45 c8	 mov	 eax, DWORD PTR _loc14$[ebp]
  01e23	50		 push	 eax
  01e24	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e27	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem
  01e2c	89 45 c0	 mov	 DWORD PTR _loc16$[ebp], eax

; 744  : 
; 745  : 		if ( cX == 0 && cY == 0 )

  01e2f	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  01e33	85 c0		 test	 eax, eax
  01e35	75 24		 jne	 SHORT $LN12@DropPCBang@2
  01e37	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  01e3b	85 c0		 test	 eax, eax
  01e3d	75 1c		 jne	 SHORT $LN12@DropPCBang@2

; 746  : 		{
; 747  : 			x = lpObj->X;

  01e3f	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01e42	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  01e49	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 748  : 			y = lpObj->Y;

  01e4c	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01e4f	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  01e56	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 749  : 		}
; 750  : 		else

  01e59	eb 0e		 jmp	 SHORT $LN11@DropPCBang@2
$LN12@DropPCBang@2:

; 751  : 		{
; 752  : 			x = cX;

  01e5b	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  01e5f	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 753  : 			y = cY;

  01e62	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  01e66	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax
$LN11@DropPCBang@2:

; 754  : 		}
; 755  : 
; 756  : 		level = this->GetLevel(loc16);

  01e69	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01e6c	50		 push	 eax
  01e6d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e70	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  01e75	0f b6 c8	 movzx	 ecx, al
  01e78	89 4d f0	 mov	 DWORD PTR _level$[ebp], ecx

; 757  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  01e7b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01e7e	6b c0 09	 imul	 eax, 9
  01e81	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e84	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  01e8c	52		 push	 edx
  01e8d	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01e90	6b c0 09	 imul	 eax, 9
  01e93	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e96	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  01e9e	52		 push	 edx
  01e9f	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  01ea4	83 c4 08	 add	 esp, 8
  01ea7	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax

; 758  : 
; 759  : 		if ( type == -1 )

  01eaa	83 7d f4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  01eae	75 07		 jne	 SHORT $LN10@DropPCBang@2

; 760  : 		{
; 761  : 			return FALSE;

  01eb0	33 c0		 xor	 eax, eax
  01eb2	e9 c0 01 00 00	 jmp	 $LN17@DropPCBang@2
$LN10@DropPCBang@2:

; 762  : 		}
; 763  : 
; 764  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  01eb7	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01eba	6b c0 09	 imul	 eax, 9
  01ebd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ec0	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  01ec8	85 d2		 test	 edx, edx
  01eca	74 07		 je	 SHORT $LN9@DropPCBang@2

; 765  : 		{
; 766  : 			Option1 =1;

  01ecc	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN9@DropPCBang@2:

; 767  : 		}
; 768  : 
; 769  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  01ed3	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01ed6	6b c0 09	 imul	 eax, 9
  01ed9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01edc	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  01ee4	85 d2		 test	 edx, edx
  01ee6	74 23		 je	 SHORT $LN7@DropPCBang@2

; 770  : 		{
; 771  : 			Option2 = 0;

  01ee8	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 772  : 
; 773  : 			if ( (rand()%2) == 0 )

  01eef	e8 00 00 00 00	 call	 _rand
  01ef4	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  01ef9	79 05		 jns	 SHORT $LN19@DropPCBang@2
  01efb	48		 dec	 eax
  01efc	83 c8 fe	 or	 eax, -2			; fffffffeH
  01eff	40		 inc	 eax
$LN19@DropPCBang@2:
  01f00	85 c0		 test	 eax, eax
  01f02	75 07		 jne	 SHORT $LN7@DropPCBang@2

; 774  : 			{
; 775  : 				Option2 = 1;

  01f04	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN7@DropPCBang@2:

; 776  : 			}
; 777  : 		}
; 778  : 
; 779  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  01f0b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01f0e	6b c0 09	 imul	 eax, 9
  01f11	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f14	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  01f1c	85 d2		 test	 edx, edx
  01f1e	74 2b		 je	 SHORT $LN4@DropPCBang@2

; 780  : 		{
; 781  : 			if ( rand()%5 < 1 )

  01f20	e8 00 00 00 00	 call	 _rand
  01f25	99		 cdq
  01f26	b9 05 00 00 00	 mov	 ecx, 5
  01f2b	f7 f9		 idiv	 ecx
  01f2d	83 fa 01	 cmp	 edx, 1
  01f30	7d 09		 jge	 SHORT $LN5@DropPCBang@2

; 782  : 			{
; 783  : 				Option3 = 3;

  01f32	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 784  : 			}
; 785  : 			else

  01f39	eb 10		 jmp	 SHORT $LN4@DropPCBang@2
$LN5@DropPCBang@2:

; 786  : 			{
; 787  : 				Option3 = rand()%3;

  01f3b	e8 00 00 00 00	 call	 _rand
  01f40	99		 cdq
  01f41	b9 03 00 00 00	 mov	 ecx, 3
  01f46	f7 f9		 idiv	 ecx
  01f48	89 55 dc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropPCBang@2:

; 788  : 			}
; 789  : 		}
; 790  : 
; 791  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  01f4b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  01f4e	6b c0 09	 imul	 eax, 9
  01f51	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f54	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  01f5c	85 d2		 test	 edx, edx
  01f5e	74 17		 je	 SHORT $LN3@DropPCBang@2

; 792  : 		{
; 793  : 			loc12 = NewOptionRand(0);

  01f60	6a 00		 push	 0
  01f62	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  01f67	83 c4 04	 add	 esp, 4
  01f6a	0f b6 c0	 movzx	 eax, al
  01f6d	89 45 d0	 mov	 DWORD PTR _loc12$[ebp], eax

; 794  : 			//Option2 = 0;
; 795  : 			Option1 = 1;

  01f70	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN3@DropPCBang@2:

; 796  : 			//level = 0;
; 797  : 		}
; 798  : 
; 799  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  01f77	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _type$[ebp], 6159 ; 0000180fH
  01f7e	74 12		 je	 SHORT $LN1@DropPCBang@2
  01f80	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7181 ; 00001c0dH
  01f87	74 09		 je	 SHORT $LN1@DropPCBang@2
  01f89	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7182 ; 00001c0eH
  01f90	75 1c		 jne	 SHORT $LN2@DropPCBang@2
$LN1@DropPCBang@2:

; 800  : 		{
; 801  : 			Option1 = 0;

  01f92	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 802  : 			Option2 = 0;

  01f99	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 803  : 			Option3 = 0;

  01fa0	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 804  : 			level = 0;

  01fa7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN2@DropPCBang@2:

; 805  : 		}
; 806  : 
; 807  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  01fae	6a 00		 push	 0
  01fb0	0f b6 45 d0	 movzx	 eax, BYTE PTR _loc12$[ebp]
  01fb4	50		 push	 eax
  01fb5	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01fb8	8b 11		 mov	 edx, DWORD PTR [ecx]
  01fba	52		 push	 edx
  01fbb	0f b6 45 dc	 movzx	 eax, BYTE PTR _Option3$[ebp]
  01fbf	50		 push	 eax
  01fc0	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  01fc4	51		 push	 ecx
  01fc5	0f b6 55 e4	 movzx	 edx, BYTE PTR _Option1$[ebp]
  01fc9	52		 push	 edx
  01fca	d9 45 f8	 fld	 DWORD PTR _dur$[ebp]
  01fcd	d9 bd 7e ff ff
	ff		 fnstcw	 WORD PTR tv320[ebp]
  01fd3	0f b7 85 7e ff
	ff ff		 movzx	 eax, WORD PTR tv320[ebp]
  01fda	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  01fdf	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv323[ebp], eax
  01fe5	d9 ad 78 ff ff
	ff		 fldcw	 WORD PTR tv323[ebp]
  01feb	db 9d 74 ff ff
	ff		 fistp	 DWORD PTR tv325[ebp]
  01ff1	d9 ad 7e ff ff
	ff		 fldcw	 WORD PTR tv320[ebp]
  01ff7	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR tv325[ebp]
  01ffe	50		 push	 eax
  01fff	0f b6 4d f0	 movzx	 ecx, BYTE PTR _level$[ebp]
  02003	51		 push	 ecx
  02004	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  02007	52		 push	 edx
  02008	0f b6 45 e8	 movzx	 eax, BYTE PTR _y$[ebp]
  0200c	50		 push	 eax
  0200d	0f b6 4d ec	 movzx	 ecx, BYTE PTR _x$[ebp]
  02011	51		 push	 ecx
  02012	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  02016	52		 push	 edx
  02017	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0201a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0201c	51		 push	 ecx
  0201d	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  02022	83 c4 34	 add	 esp, 52			; 00000034H

; 808  : 		LogAddTD("[PCBangPointSystem] DropBoxOfRedChaosItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 809  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  02025	8b 45 d0	 mov	 eax, DWORD PTR _loc12$[ebp]
  02028	50		 push	 eax
  02029	8b 4d dc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  0202c	51		 push	 ecx
  0202d	8b 55 e0	 mov	 edx, DWORD PTR _Option2$[ebp]
  02030	52		 push	 edx
  02031	8b 45 e4	 mov	 eax, DWORD PTR _Option1$[ebp]
  02034	50		 push	 eax
  02035	8b 4d f0	 mov	 ecx, DWORD PTR _level$[ebp]
  02038	51		 push	 ecx
  02039	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  0203c	52		 push	 edx
  0203d	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  02040	6b c0 70	 imul	 eax, 112		; 00000070H
  02043	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  02048	50		 push	 eax
  02049	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  0204c	51		 push	 ecx
  0204d	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  02050	52		 push	 edx
  02051	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  02055	50		 push	 eax
  02056	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02059	83 c1 77	 add	 ecx, 119		; 00000077H
  0205c	51		 push	 ecx
  0205d	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02060	83 c2 6c	 add	 edx, 108		; 0000006cH
  02063	52		 push	 edx
  02064	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@LHFCFBDD@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@
  02069	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0206f	83 c4 34	 add	 esp, 52			; 00000034H
$LN15@DropPCBang@2:

; 810  : 
; 811  : 	}
; 812  : 	return 1;

  02072	b8 01 00 00 00	 mov	 eax, 1
$LN17@DropPCBang@2:

; 813  : }

  02077	5f		 pop	 edi
  02078	5e		 pop	 esi
  02079	5b		 pop	 ebx
  0207a	8b e5		 mov	 esp, ebp
  0207c	5d		 pop	 ebp
  0207d	c2 10 00	 ret	 16			; 00000010H
?DropPCBangRedChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropPCBangRedChaosBoxReward
_TEXT	ENDS
PUBLIC	??_C@_0HG@CNGDIFNG@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@ ; `string'
PUBLIC	??_C@_0DP@JPDMGMKL@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@ ; `string'
PUBLIC	?DropPCBangPurpleChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropPCBangPurpleChaosBoxReward
;	COMDAT ??_C@_0HG@CNGDIFNG@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@
CONST	SEGMENT
??_C@_0HG@CNGDIFNG@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfPurpleChaosItem [%s][%s] : (%d)(%d/%d) It'
	DB	'em:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@JPDMGMKL@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@
CONST	SEGMENT
??_C@_0DP@JPDMGMKL@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfPurpleChaosItem [%s][%s] [%d Zen]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv325 = -140						; size = 4
tv323 = -136						; size = 4
tv320 = -130						; size = 2
_loc16$ = -64						; size = 4
_loc15$ = -60						; size = 4
_loc14$ = -56						; size = 4
_lpObj$ = -52						; size = 4
_loc12$ = -48						; size = 4
_ExOption$ = -44					; size = 4
_DropItemNum$ = -40					; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_level$ = -16						; size = 4
_type$ = -12						; size = 4
_dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropPCBangPurpleChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropPCBangPurpleChaosBoxReward
; _this$ = ecx

; 816  : {

  02080	55		 push	 ebp
  02081	8b ec		 mov	 ebp, esp
  02083	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  02089	53		 push	 ebx
  0208a	56		 push	 esi
  0208b	57		 push	 edi
  0208c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 817  : 	if ( this->m_bLoad == FALSE )

  0208f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02092	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  02096	75 07		 jne	 SHORT $LN16@DropPCBang@3

; 818  : 		return FALSE;

  02098	33 c0		 xor	 eax, eax
  0209a	e9 68 03 00 00	 jmp	 $LN17@DropPCBang@3
$LN16@DropPCBang@3:

; 819  : 
; 820  : 	float dur = 0;

  0209f	d9 ee		 fldz
  020a1	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 821  : 	int type = 0;

  020a4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0

; 822  : 	int level = 0;

  020ab	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 823  : 	int x = 0;

  020b2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 824  : 	int y = 0;

  020b9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 825  : 	int Option1 = 0;

  020c0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 826  : 	int Option2 = 0;

  020c7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 827  : 	int Option3 = 0;

  020ce	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 828  : 	int DropItemNum = 0;

  020d5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _DropItemNum$[ebp], 0

; 829  : 	int ExOption = 0;

  020dc	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ExOption$[ebp], 0

; 830  : 	int loc12 = 0;

  020e3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 831  : 	LPOBJ lpObj = &gObj[aIndex];

  020ea	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  020ed	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  020f3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  020f9	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 832  : 	int loc14;
; 833  : 	int loc15;
; 834  : 	int loc16;
; 835  : 
; 836  : 	if ( this->GetBagCount() > 0 )

  020fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020ff	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  02104	85 c0		 test	 eax, eax
  02106	0f 8e f6 02 00
	00		 jle	 $LN15@DropPCBang@3

; 837  : 	{
; 838  : 		loc14 = rand()%10000;

  0210c	e8 00 00 00 00	 call	 _rand
  02111	99		 cdq
  02112	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  02117	f7 f9		 idiv	 ecx
  02119	89 55 c8	 mov	 DWORD PTR _loc14$[ebp], edx

; 839  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1])

  0211c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0211f	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  02126	74 1d		 je	 SHORT $LN13@DropPCBang@3
  02128	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0212b	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  02131	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02134	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  02139	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  02140	39 45 c8	 cmp	 DWORD PTR _loc14$[ebp], eax
  02143	7d 5f		 jge	 SHORT $LN14@DropPCBang@3
$LN13@DropPCBang@3:

; 840  : 		{
; 841  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  02145	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  02149	50		 push	 eax
  0214a	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  0214e	51		 push	 ecx
  0214f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02152	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  02158	50		 push	 eax
  02159	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0215c	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  02163	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  02169	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0216f	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 842  : 			LogAddTD("[PCBangPointSystem] DropBoxOfPurpleChaosItem [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  02174	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02177	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  0217d	51		 push	 ecx
  0217e	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02181	83 c2 77	 add	 edx, 119		; 00000077H
  02184	52		 push	 edx
  02185	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02188	83 c0 6c	 add	 eax, 108		; 0000006cH
  0218b	50		 push	 eax
  0218c	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@JPDMGMKL@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@
  02191	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02197	83 c4 10	 add	 esp, 16			; 00000010H

; 843  : 			return 1;

  0219a	b8 01 00 00 00	 mov	 eax, 1
  0219f	e9 63 02 00 00	 jmp	 $LN17@DropPCBang@3
$LN14@DropPCBang@3:

; 844  : 		}
; 845  : 			
; 846  : 		loc15 = this->m_iRateKindCount;

  021a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021a7	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  021ad	89 4d c4	 mov	 DWORD PTR _loc15$[ebp], ecx

; 847  : 		loc16 = this->SortItem(loc14);

  021b0	8b 45 c8	 mov	 eax, DWORD PTR _loc14$[ebp]
  021b3	50		 push	 eax
  021b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021b7	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem
  021bc	89 45 c0	 mov	 DWORD PTR _loc16$[ebp], eax

; 848  : 
; 849  : 		if ( cX == 0 && cY == 0 )

  021bf	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  021c3	85 c0		 test	 eax, eax
  021c5	75 24		 jne	 SHORT $LN12@DropPCBang@3
  021c7	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  021cb	85 c0		 test	 eax, eax
  021cd	75 1c		 jne	 SHORT $LN12@DropPCBang@3

; 850  : 		{
; 851  : 			x = lpObj->X;

  021cf	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  021d2	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  021d9	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 852  : 			y = lpObj->Y;

  021dc	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  021df	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  021e6	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 853  : 		}
; 854  : 		else

  021e9	eb 0e		 jmp	 SHORT $LN11@DropPCBang@3
$LN12@DropPCBang@3:

; 855  : 		{
; 856  : 			x = cX;

  021eb	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  021ef	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 857  : 			y = cY;

  021f2	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  021f6	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax
$LN11@DropPCBang@3:

; 858  : 		}
; 859  : 
; 860  : 		level = this->GetLevel(loc16);

  021f9	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  021fc	50		 push	 eax
  021fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02200	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  02205	0f b6 c8	 movzx	 ecx, al
  02208	89 4d f0	 mov	 DWORD PTR _level$[ebp], ecx

; 861  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  0220b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0220e	6b c0 09	 imul	 eax, 9
  02211	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02214	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  0221c	52		 push	 edx
  0221d	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02220	6b c0 09	 imul	 eax, 9
  02223	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02226	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  0222e	52		 push	 edx
  0222f	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  02234	83 c4 08	 add	 esp, 8
  02237	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax

; 862  : 
; 863  : 		if ( type == -1 )

  0223a	83 7d f4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  0223e	75 07		 jne	 SHORT $LN10@DropPCBang@3

; 864  : 		{
; 865  : 			return FALSE;

  02240	33 c0		 xor	 eax, eax
  02242	e9 c0 01 00 00	 jmp	 $LN17@DropPCBang@3
$LN10@DropPCBang@3:

; 866  : 		}
; 867  : 
; 868  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  02247	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0224a	6b c0 09	 imul	 eax, 9
  0224d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02250	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  02258	85 d2		 test	 edx, edx
  0225a	74 07		 je	 SHORT $LN9@DropPCBang@3

; 869  : 		{
; 870  : 			Option1 =1;

  0225c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN9@DropPCBang@3:

; 871  : 		}
; 872  : 
; 873  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  02263	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02266	6b c0 09	 imul	 eax, 9
  02269	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0226c	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  02274	85 d2		 test	 edx, edx
  02276	74 23		 je	 SHORT $LN7@DropPCBang@3

; 874  : 		{
; 875  : 			Option2 = 0;

  02278	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 876  : 
; 877  : 			if ( (rand()%2) == 0 )

  0227f	e8 00 00 00 00	 call	 _rand
  02284	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  02289	79 05		 jns	 SHORT $LN19@DropPCBang@3
  0228b	48		 dec	 eax
  0228c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0228f	40		 inc	 eax
$LN19@DropPCBang@3:
  02290	85 c0		 test	 eax, eax
  02292	75 07		 jne	 SHORT $LN7@DropPCBang@3

; 878  : 			{
; 879  : 				Option2 = 1;

  02294	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN7@DropPCBang@3:

; 880  : 			}
; 881  : 		}
; 882  : 
; 883  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  0229b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0229e	6b c0 09	 imul	 eax, 9
  022a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  022a4	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  022ac	85 d2		 test	 edx, edx
  022ae	74 2b		 je	 SHORT $LN4@DropPCBang@3

; 884  : 		{
; 885  : 			if ( rand()%5 < 1 )

  022b0	e8 00 00 00 00	 call	 _rand
  022b5	99		 cdq
  022b6	b9 05 00 00 00	 mov	 ecx, 5
  022bb	f7 f9		 idiv	 ecx
  022bd	83 fa 01	 cmp	 edx, 1
  022c0	7d 09		 jge	 SHORT $LN5@DropPCBang@3

; 886  : 			{
; 887  : 				Option3 = 3;

  022c2	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 888  : 			}
; 889  : 			else

  022c9	eb 10		 jmp	 SHORT $LN4@DropPCBang@3
$LN5@DropPCBang@3:

; 890  : 			{
; 891  : 				Option3 = rand()%3;

  022cb	e8 00 00 00 00	 call	 _rand
  022d0	99		 cdq
  022d1	b9 03 00 00 00	 mov	 ecx, 3
  022d6	f7 f9		 idiv	 ecx
  022d8	89 55 dc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropPCBang@3:

; 892  : 			}
; 893  : 		}
; 894  : 
; 895  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  022db	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  022de	6b c0 09	 imul	 eax, 9
  022e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  022e4	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  022ec	85 d2		 test	 edx, edx
  022ee	74 17		 je	 SHORT $LN3@DropPCBang@3

; 896  : 		{
; 897  : 			loc12 = NewOptionRand(0);

  022f0	6a 00		 push	 0
  022f2	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  022f7	83 c4 04	 add	 esp, 4
  022fa	0f b6 c0	 movzx	 eax, al
  022fd	89 45 d0	 mov	 DWORD PTR _loc12$[ebp], eax

; 898  : 			//Option2 = 0;
; 899  : 			Option1 = 1;

  02300	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN3@DropPCBang@3:

; 900  : 			//level = 0;
; 901  : 		}
; 902  : 
; 903  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  02307	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _type$[ebp], 6159 ; 0000180fH
  0230e	74 12		 je	 SHORT $LN1@DropPCBang@3
  02310	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7181 ; 00001c0dH
  02317	74 09		 je	 SHORT $LN1@DropPCBang@3
  02319	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7182 ; 00001c0eH
  02320	75 1c		 jne	 SHORT $LN2@DropPCBang@3
$LN1@DropPCBang@3:

; 904  : 		{
; 905  : 			Option1 = 0;

  02322	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 906  : 			Option2 = 0;

  02329	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 907  : 			Option3 = 0;

  02330	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 908  : 			level = 0;

  02337	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN2@DropPCBang@3:

; 909  : 		}
; 910  : 
; 911  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  0233e	6a 00		 push	 0
  02340	0f b6 45 d0	 movzx	 eax, BYTE PTR _loc12$[ebp]
  02344	50		 push	 eax
  02345	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02348	8b 11		 mov	 edx, DWORD PTR [ecx]
  0234a	52		 push	 edx
  0234b	0f b6 45 dc	 movzx	 eax, BYTE PTR _Option3$[ebp]
  0234f	50		 push	 eax
  02350	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  02354	51		 push	 ecx
  02355	0f b6 55 e4	 movzx	 edx, BYTE PTR _Option1$[ebp]
  02359	52		 push	 edx
  0235a	d9 45 f8	 fld	 DWORD PTR _dur$[ebp]
  0235d	d9 bd 7e ff ff
	ff		 fnstcw	 WORD PTR tv320[ebp]
  02363	0f b7 85 7e ff
	ff ff		 movzx	 eax, WORD PTR tv320[ebp]
  0236a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0236f	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv323[ebp], eax
  02375	d9 ad 78 ff ff
	ff		 fldcw	 WORD PTR tv323[ebp]
  0237b	db 9d 74 ff ff
	ff		 fistp	 DWORD PTR tv325[ebp]
  02381	d9 ad 7e ff ff
	ff		 fldcw	 WORD PTR tv320[ebp]
  02387	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR tv325[ebp]
  0238e	50		 push	 eax
  0238f	0f b6 4d f0	 movzx	 ecx, BYTE PTR _level$[ebp]
  02393	51		 push	 ecx
  02394	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  02397	52		 push	 edx
  02398	0f b6 45 e8	 movzx	 eax, BYTE PTR _y$[ebp]
  0239c	50		 push	 eax
  0239d	0f b6 4d ec	 movzx	 ecx, BYTE PTR _x$[ebp]
  023a1	51		 push	 ecx
  023a2	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  023a6	52		 push	 edx
  023a7	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  023aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  023ac	51		 push	 ecx
  023ad	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  023b2	83 c4 34	 add	 esp, 52			; 00000034H

; 912  : 		LogAddTD("[PCBangPointSystem] DropBoxOfPurpleChaosItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 913  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  023b5	8b 45 d0	 mov	 eax, DWORD PTR _loc12$[ebp]
  023b8	50		 push	 eax
  023b9	8b 4d dc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  023bc	51		 push	 ecx
  023bd	8b 55 e0	 mov	 edx, DWORD PTR _Option2$[ebp]
  023c0	52		 push	 edx
  023c1	8b 45 e4	 mov	 eax, DWORD PTR _Option1$[ebp]
  023c4	50		 push	 eax
  023c5	8b 4d f0	 mov	 ecx, DWORD PTR _level$[ebp]
  023c8	51		 push	 ecx
  023c9	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  023cc	52		 push	 edx
  023cd	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  023d0	6b c0 70	 imul	 eax, 112		; 00000070H
  023d3	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  023d8	50		 push	 eax
  023d9	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  023dc	51		 push	 ecx
  023dd	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  023e0	52		 push	 edx
  023e1	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  023e5	50		 push	 eax
  023e6	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  023e9	83 c1 77	 add	 ecx, 119		; 00000077H
  023ec	51		 push	 ecx
  023ed	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  023f0	83 c2 6c	 add	 edx, 108		; 0000006cH
  023f3	52		 push	 edx
  023f4	68 00 00 00 00	 push	 OFFSET ??_C@_0HG@CNGDIFNG@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@
  023f9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  023ff	83 c4 34	 add	 esp, 52			; 00000034H
$LN15@DropPCBang@3:

; 914  : 
; 915  : 	}
; 916  : 	return 1;

  02402	b8 01 00 00 00	 mov	 eax, 1
$LN17@DropPCBang@3:

; 917  : }

  02407	5f		 pop	 edi
  02408	5e		 pop	 esi
  02409	5b		 pop	 ebx
  0240a	8b e5		 mov	 esp, ebp
  0240c	5d		 pop	 ebp
  0240d	c2 10 00	 ret	 16			; 00000010H
?DropPCBangPurpleChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropPCBangPurpleChaosBoxReward
_TEXT	ENDS
PUBLIC	??_C@_0HJ@HEHGEPGH@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@ ; `string'
PUBLIC	??_C@_0EC@JAKDNDHP@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@ ; `string'
PUBLIC	?DropIllusionTempleEventReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropIllusionTempleEventReward
;	COMDAT ??_C@_0HJ@HEHGEPGH@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@
CONST	SEGMENT
??_C@_0HJ@HEHGEPGH@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@ DB '[ ILLUS'
	DB	'IONTempleEvent ] ILLUSIONTempleEventDrop [%s][%s] : (%d)(%d/%'
	DB	'd) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@JAKDNDHP@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@
CONST	SEGMENT
??_C@_0EC@JAKDNDHP@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@ DB '[ ILLUS'
	DB	'IONTempleEvent ] ILLUSIONTempleEventDrop [%s][%s] [%d Zen]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv326 = -140						; size = 4
tv324 = -136						; size = 4
tv321 = -130						; size = 2
_loc16$ = -64						; size = 4
_loc15$ = -60						; size = 4
_loc14$ = -56						; size = 4
_lpObj$ = -52						; size = 4
_loc12$ = -48						; size = 4
_ExOption$ = -44					; size = 4
_DropItemNum$ = -40					; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_level$ = -16						; size = 4
_type$ = -12						; size = 4
_dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropIllusionTempleEventReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropIllusionTempleEventReward
; _this$ = ecx

; 920  : {

  02410	55		 push	 ebp
  02411	8b ec		 mov	 ebp, esp
  02413	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  02419	53		 push	 ebx
  0241a	56		 push	 esi
  0241b	57		 push	 edi
  0241c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 921  : 	if ( this->m_bLoad == FALSE )

  0241f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02422	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  02426	75 07		 jne	 SHORT $LN16@DropIllusi

; 922  : 		return FALSE;

  02428	33 c0		 xor	 eax, eax
  0242a	e9 71 03 00 00	 jmp	 $LN17@DropIllusi
$LN16@DropIllusi:

; 923  : 
; 924  : 	float dur = 0;

  0242f	d9 ee		 fldz
  02431	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 925  : 	int type = 0;

  02434	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0

; 926  : 	int level = 0;

  0243b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 927  : 	int x = 0;

  02442	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 928  : 	int y = 0;

  02449	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 929  : 	int Option1 = 0;

  02450	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 930  : 	int Option2 = 0;

  02457	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 931  : 	int Option3 = 0;

  0245e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 932  : 	int DropItemNum = 0;

  02465	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _DropItemNum$[ebp], 0

; 933  : 	int ExOption = 0;

  0246c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ExOption$[ebp], 0

; 934  : 	int loc12 = 0;

  02473	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 935  : 	LPOBJ lpObj = &gObj[aIndex];

  0247a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0247d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02483	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02489	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 936  : 	int loc14;
; 937  : 	int loc15;
; 938  : 	int loc16;
; 939  : 
; 940  : 	if ( this->GetBagCount() > 0 )

  0248c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0248f	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  02494	85 c0		 test	 eax, eax
  02496	0f 8e ff 02 00
	00		 jle	 $LN15@DropIllusi

; 941  : 	{
; 942  : 		loc14 = rand()%10000;

  0249c	e8 00 00 00 00	 call	 _rand
  024a1	99		 cdq
  024a2	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  024a7	f7 f9		 idiv	 ecx
  024a9	89 55 c8	 mov	 DWORD PTR _loc14$[ebp], edx

; 943  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1])

  024ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  024af	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  024b6	74 1d		 je	 SHORT $LN13@DropIllusi
  024b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  024bb	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  024c1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  024c4	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  024c9	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  024d0	39 45 c8	 cmp	 DWORD PTR _loc14$[ebp], eax
  024d3	7d 5f		 jge	 SHORT $LN14@DropIllusi
$LN13@DropIllusi:

; 944  : 		{
; 945  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  024d5	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  024d9	50		 push	 eax
  024da	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  024de	51		 push	 ecx
  024df	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  024e2	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  024e8	50		 push	 eax
  024e9	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  024ec	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  024f3	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  024f9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  024ff	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 946  : 			LogAddTD("[ ILLUSIONTempleEvent ] ILLUSIONTempleEventDrop [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  02504	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02507	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  0250d	51		 push	 ecx
  0250e	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02511	83 c2 77	 add	 edx, 119		; 00000077H
  02514	52		 push	 edx
  02515	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02518	83 c0 6c	 add	 eax, 108		; 0000006cH
  0251b	50		 push	 eax
  0251c	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@JAKDNDHP@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@
  02521	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02527	83 c4 10	 add	 esp, 16			; 00000010H

; 947  : 			return 1;

  0252a	b8 01 00 00 00	 mov	 eax, 1
  0252f	e9 6c 02 00 00	 jmp	 $LN17@DropIllusi
$LN14@DropIllusi:

; 948  : 		}
; 949  : 			
; 950  : 		loc15 = this->m_iRateKindCount;

  02534	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02537	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  0253d	89 4d c4	 mov	 DWORD PTR _loc15$[ebp], ecx

; 951  : 		loc16 = this->SortItem(loc14);

  02540	8b 45 c8	 mov	 eax, DWORD PTR _loc14$[ebp]
  02543	50		 push	 eax
  02544	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02547	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem
  0254c	89 45 c0	 mov	 DWORD PTR _loc16$[ebp], eax

; 952  : 
; 953  : 		if ( cX == 0 && cY == 0 )

  0254f	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  02553	85 c0		 test	 eax, eax
  02555	75 24		 jne	 SHORT $LN12@DropIllusi
  02557	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  0255b	85 c0		 test	 eax, eax
  0255d	75 1c		 jne	 SHORT $LN12@DropIllusi

; 954  : 		{
; 955  : 			x = lpObj->X;

  0255f	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02562	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  02569	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 956  : 			y = lpObj->Y;

  0256c	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0256f	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  02576	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 957  : 		}
; 958  : 		else

  02579	eb 0e		 jmp	 SHORT $LN11@DropIllusi
$LN12@DropIllusi:

; 959  : 		{
; 960  : 			x = cX;

  0257b	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  0257f	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 961  : 			y = cY;

  02582	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  02586	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax
$LN11@DropIllusi:

; 962  : 		}
; 963  : 
; 964  : 		level = this->GetLevel(loc16);

  02589	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0258c	50		 push	 eax
  0258d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02590	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  02595	0f b6 c8	 movzx	 ecx, al
  02598	89 4d f0	 mov	 DWORD PTR _level$[ebp], ecx

; 965  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  0259b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0259e	6b c0 09	 imul	 eax, 9
  025a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025a4	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  025ac	52		 push	 edx
  025ad	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  025b0	6b c0 09	 imul	 eax, 9
  025b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025b6	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  025be	52		 push	 edx
  025bf	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  025c4	83 c4 08	 add	 esp, 8
  025c7	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax

; 966  : 
; 967  : 		if ( type == -1 )

  025ca	83 7d f4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  025ce	75 07		 jne	 SHORT $LN10@DropIllusi

; 968  : 		{
; 969  : 			return FALSE;

  025d0	33 c0		 xor	 eax, eax
  025d2	e9 c9 01 00 00	 jmp	 $LN17@DropIllusi
$LN10@DropIllusi:

; 970  : 		}
; 971  : 
; 972  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  025d7	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  025da	6b c0 09	 imul	 eax, 9
  025dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025e0	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  025e8	85 d2		 test	 edx, edx
  025ea	74 07		 je	 SHORT $LN9@DropIllusi

; 973  : 		{
; 974  : 			Option1 =1;

  025ec	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN9@DropIllusi:

; 975  : 		}
; 976  : 
; 977  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  025f3	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  025f6	6b c0 09	 imul	 eax, 9
  025f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025fc	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  02604	85 d2		 test	 edx, edx
  02606	74 23		 je	 SHORT $LN7@DropIllusi

; 978  : 		{
; 979  : 			Option2 = 0;

  02608	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 980  : 
; 981  : 			if ( (rand()%2) == 0 )

  0260f	e8 00 00 00 00	 call	 _rand
  02614	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  02619	79 05		 jns	 SHORT $LN19@DropIllusi
  0261b	48		 dec	 eax
  0261c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0261f	40		 inc	 eax
$LN19@DropIllusi:
  02620	85 c0		 test	 eax, eax
  02622	75 07		 jne	 SHORT $LN7@DropIllusi

; 982  : 			{
; 983  : 				Option2 = 1;

  02624	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN7@DropIllusi:

; 984  : 			}
; 985  : 		}
; 986  : 
; 987  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  0262b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0262e	6b c0 09	 imul	 eax, 9
  02631	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02634	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  0263c	85 d2		 test	 edx, edx
  0263e	74 2b		 je	 SHORT $LN4@DropIllusi

; 988  : 		{
; 989  : 			if ( rand()%5 < 1 )

  02640	e8 00 00 00 00	 call	 _rand
  02645	99		 cdq
  02646	b9 05 00 00 00	 mov	 ecx, 5
  0264b	f7 f9		 idiv	 ecx
  0264d	83 fa 01	 cmp	 edx, 1
  02650	7d 09		 jge	 SHORT $LN5@DropIllusi

; 990  : 			{
; 991  : 				Option3 = 3;

  02652	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 992  : 			}
; 993  : 			else

  02659	eb 10		 jmp	 SHORT $LN4@DropIllusi
$LN5@DropIllusi:

; 994  : 			{
; 995  : 				Option3 = rand()%3;

  0265b	e8 00 00 00 00	 call	 _rand
  02660	99		 cdq
  02661	b9 03 00 00 00	 mov	 ecx, 3
  02666	f7 f9		 idiv	 ecx
  02668	89 55 dc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropIllusi:

; 996  : 			}
; 997  : 		}
; 998  : 
; 999  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  0266b	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0266e	6b c0 09	 imul	 eax, 9
  02671	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02674	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  0267c	85 d2		 test	 edx, edx
  0267e	74 17		 je	 SHORT $LN3@DropIllusi

; 1000 : 		{
; 1001 : 			loc12 = NewOptionRand(0);

  02680	6a 00		 push	 0
  02682	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  02687	83 c4 04	 add	 esp, 4
  0268a	0f b6 c0	 movzx	 eax, al
  0268d	89 45 d0	 mov	 DWORD PTR _loc12$[ebp], eax

; 1002 : 			//Option2 = 0;
; 1003 : 			Option1 = 1;

  02690	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN3@DropIllusi:

; 1004 : 			//level = 0;
; 1005 : 		}
; 1006 : 
; 1007 : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14) || type == ITEMGET(14,22) )	// Chaos, Bless, Soul, Creation

  02697	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _type$[ebp], 6159 ; 0000180fH
  0269e	74 1b		 je	 SHORT $LN1@DropIllusi
  026a0	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7181 ; 00001c0dH
  026a7	74 12		 je	 SHORT $LN1@DropIllusi
  026a9	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7182 ; 00001c0eH
  026b0	74 09		 je	 SHORT $LN1@DropIllusi
  026b2	81 7d f4 16 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7190 ; 00001c16H
  026b9	75 1c		 jne	 SHORT $LN2@DropIllusi
$LN1@DropIllusi:

; 1008 : 		{
; 1009 : 			Option1 = 0;

  026bb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 1010 : 			Option2 = 0;

  026c2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1011 : 			Option3 = 0;

  026c9	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 1012 : 			level = 0;

  026d0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN2@DropIllusi:

; 1013 : 		}
; 1014 : 
; 1015 : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  026d7	6a 00		 push	 0
  026d9	0f b6 45 d0	 movzx	 eax, BYTE PTR _loc12$[ebp]
  026dd	50		 push	 eax
  026de	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  026e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  026e3	52		 push	 edx
  026e4	0f b6 45 dc	 movzx	 eax, BYTE PTR _Option3$[ebp]
  026e8	50		 push	 eax
  026e9	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  026ed	51		 push	 ecx
  026ee	0f b6 55 e4	 movzx	 edx, BYTE PTR _Option1$[ebp]
  026f2	52		 push	 edx
  026f3	d9 45 f8	 fld	 DWORD PTR _dur$[ebp]
  026f6	d9 bd 7e ff ff
	ff		 fnstcw	 WORD PTR tv321[ebp]
  026fc	0f b7 85 7e ff
	ff ff		 movzx	 eax, WORD PTR tv321[ebp]
  02703	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  02708	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv324[ebp], eax
  0270e	d9 ad 78 ff ff
	ff		 fldcw	 WORD PTR tv324[ebp]
  02714	db 9d 74 ff ff
	ff		 fistp	 DWORD PTR tv326[ebp]
  0271a	d9 ad 7e ff ff
	ff		 fldcw	 WORD PTR tv321[ebp]
  02720	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR tv326[ebp]
  02727	50		 push	 eax
  02728	0f b6 4d f0	 movzx	 ecx, BYTE PTR _level$[ebp]
  0272c	51		 push	 ecx
  0272d	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  02730	52		 push	 edx
  02731	0f b6 45 e8	 movzx	 eax, BYTE PTR _y$[ebp]
  02735	50		 push	 eax
  02736	0f b6 4d ec	 movzx	 ecx, BYTE PTR _x$[ebp]
  0273a	51		 push	 ecx
  0273b	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  0273f	52		 push	 edx
  02740	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02743	8b 08		 mov	 ecx, DWORD PTR [eax]
  02745	51		 push	 ecx
  02746	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  0274b	83 c4 34	 add	 esp, 52			; 00000034H

; 1016 : 		LogAddTD("[ ILLUSIONTempleEvent ] ILLUSIONTempleEventDrop [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1017 : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  0274e	8b 45 d0	 mov	 eax, DWORD PTR _loc12$[ebp]
  02751	50		 push	 eax
  02752	8b 4d dc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  02755	51		 push	 ecx
  02756	8b 55 e0	 mov	 edx, DWORD PTR _Option2$[ebp]
  02759	52		 push	 edx
  0275a	8b 45 e4	 mov	 eax, DWORD PTR _Option1$[ebp]
  0275d	50		 push	 eax
  0275e	8b 4d f0	 mov	 ecx, DWORD PTR _level$[ebp]
  02761	51		 push	 ecx
  02762	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  02765	52		 push	 edx
  02766	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  02769	6b c0 70	 imul	 eax, 112		; 00000070H
  0276c	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  02771	50		 push	 eax
  02772	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  02775	51		 push	 ecx
  02776	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  02779	52		 push	 edx
  0277a	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  0277e	50		 push	 eax
  0277f	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02782	83 c1 77	 add	 ecx, 119		; 00000077H
  02785	51		 push	 ecx
  02786	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02789	83 c2 6c	 add	 edx, 108		; 0000006cH
  0278c	52		 push	 edx
  0278d	68 00 00 00 00	 push	 OFFSET ??_C@_0HJ@HEHGEPGH@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@
  02792	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02798	83 c4 34	 add	 esp, 52			; 00000034H
$LN15@DropIllusi:

; 1018 : 
; 1019 : 	}
; 1020 : 	return 1;

  0279b	b8 01 00 00 00	 mov	 eax, 1
$LN17@DropIllusi:

; 1021 : }

  027a0	5f		 pop	 edi
  027a1	5e		 pop	 esi
  027a2	5b		 pop	 ebx
  027a3	8b e5		 mov	 esp, ebp
  027a5	5d		 pop	 ebp
  027a6	c2 10 00	 ret	 16			; 00000010H
?DropIllusionTempleEventReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropIllusionTempleEventReward
_TEXT	ENDS
PUBLIC	??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@ ; `string'
PUBLIC	?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z	; CProbabilityItemBag::DropSetItem
PUBLIC	??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@ ; `string'
PUBLIC	?DropItem@CProbabilityItemBag@@QAEHHEEE@Z	; CProbabilityItemBag::DropItem
;	COMDAT ??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@
CONST	SEGMENT
??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@ DB '['
	DB	'%s] Drop Item [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1'
	DB	':%d op2:%d op3:%d ExOp:%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@
CONST	SEGMENT
??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@ DB '['
	DB	'%s] Drop Zen [%s][%s] [%d Zen]', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv366 = -140						; size = 4
tv364 = -136						; size = 4
tv361 = -130						; size = 2
_loc16$ = -64						; size = 4
_loc15$ = -60						; size = 4
_loc14$ = -56						; size = 4
_lpObj$ = -52						; size = 4
_loc12$ = -48						; size = 4
_ExOption$ = -44					; size = 4
_DropItemNum$ = -40					; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_level$ = -16						; size = 4
_type$ = -12						; size = 4
_dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropItem@CProbabilityItemBag@@QAEHHEEE@Z PROC		; CProbabilityItemBag::DropItem
; _this$ = ecx

; 1025 : {	

  027b0	55		 push	 ebp
  027b1	8b ec		 mov	 ebp, esp
  027b3	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  027b9	53		 push	 ebx
  027ba	56		 push	 esi
  027bb	57		 push	 edi
  027bc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1026 : 	if ( this->m_bLoad == FALSE )

  027bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  027c2	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  027c6	75 07		 jne	 SHORT $LN19@DropItem

; 1027 : 		return FALSE;

  027c8	33 c0		 xor	 eax, eax
  027ca	e9 30 04 00 00	 jmp	 $LN20@DropItem
$LN19@DropItem:

; 1028 : 
; 1029 : 	float dur = 0;

  027cf	d9 ee		 fldz
  027d1	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 1030 : 	int type = 0;

  027d4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0

; 1031 : 	int level = 0;

  027db	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 1032 : 	int x = 0;

  027e2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 1033 : 	int y = 0;

  027e9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 1034 : 	int Option1 = 0;

  027f0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 1035 : 	int Option2 = 0;

  027f7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1036 : 	int Option3 = 0;

  027fe	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 1037 : 	int DropItemNum = 0;

  02805	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _DropItemNum$[ebp], 0

; 1038 : 	int ExOption = 0;

  0280c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ExOption$[ebp], 0

; 1039 : 	int loc12 = 0;

  02813	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 1040 : 	LPOBJ lpObj = &gObj[aIndex];

  0281a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0281d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02823	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02829	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1041 : 	int loc14;
; 1042 : 	int loc15;
; 1043 : 	int loc16;
; 1044 : 
; 1045 : 	if ( this->GetBagCount() > 0 )

  0282c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0282f	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  02834	85 c0		 test	 eax, eax
  02836	0f 8e be 03 00
	00		 jle	 $LN18@DropItem

; 1046 : 	{
; 1047 : 		loc14 = rand()%10000;

  0283c	e8 00 00 00 00	 call	 _rand
  02841	99		 cdq
  02842	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  02847	f7 f9		 idiv	 ecx
  02849	89 55 c8	 mov	 DWORD PTR _loc14$[ebp], edx

; 1048 : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1])

  0284c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0284f	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  02856	74 1d		 je	 SHORT $LN16@DropItem
  02858	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0285b	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  02861	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02864	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  02869	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  02870	39 45 c8	 cmp	 DWORD PTR _loc14$[ebp], eax
  02873	7d 65		 jge	 SHORT $LN17@DropItem
$LN16@DropItem:

; 1049 : 		{
; 1050 : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  02875	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  02879	50		 push	 eax
  0287a	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  0287e	51		 push	 ecx
  0287f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02882	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  02888	50		 push	 eax
  02889	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0288c	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  02893	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  02899	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0289f	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1051 : 			LogAddTD("[%s] Drop Zen [%s][%s] [%d Zen]", this->GetEventName(), lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  028a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  028a7	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  028ad	51		 push	 ecx
  028ae	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  028b1	83 c2 77	 add	 edx, 119		; 00000077H
  028b4	52		 push	 edx
  028b5	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  028b8	83 c0 6c	 add	 eax, 108		; 0000006cH
  028bb	50		 push	 eax
  028bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  028bf	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  028c4	50		 push	 eax
  028c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@
  028ca	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  028d0	83 c4 14	 add	 esp, 20			; 00000014H

; 1052 : 			return 0;

  028d3	33 c0		 xor	 eax, eax
  028d5	e9 25 03 00 00	 jmp	 $LN20@DropItem
$LN17@DropItem:

; 1053 : 		}
; 1054 : 			
; 1055 : 		loc15 = this->m_iRateKindCount;

  028da	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  028dd	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  028e3	89 4d c4	 mov	 DWORD PTR _loc15$[ebp], ecx

; 1056 : 		loc16 = this->SortItem(loc14);

  028e6	8b 45 c8	 mov	 eax, DWORD PTR _loc14$[ebp]
  028e9	50		 push	 eax
  028ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  028ed	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem
  028f2	89 45 c0	 mov	 DWORD PTR _loc16$[ebp], eax

; 1057 : 
; 1058 : 		if ( cX == 0 && cY == 0 )

  028f5	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  028f9	85 c0		 test	 eax, eax
  028fb	75 24		 jne	 SHORT $LN15@DropItem
  028fd	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  02901	85 c0		 test	 eax, eax
  02903	75 1c		 jne	 SHORT $LN15@DropItem

; 1059 : 		{
; 1060 : 			x = lpObj->X;

  02905	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02908	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0290f	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 1061 : 			y = lpObj->Y;

  02912	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02915	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0291c	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 1062 : 		}
; 1063 : 		else

  0291f	eb 0e		 jmp	 SHORT $LN14@DropItem
$LN15@DropItem:

; 1064 : 		{
; 1065 : 			x = cX;

  02921	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  02925	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 1066 : 			y = cY;

  02928	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  0292c	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax
$LN14@DropItem:

; 1067 : 		}
; 1068 : 
; 1069 : 		level = this->GetLevel(loc16);

  0292f	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02932	50		 push	 eax
  02933	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02936	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  0293b	0f b6 c8	 movzx	 ecx, al
  0293e	89 4d f0	 mov	 DWORD PTR _level$[ebp], ecx

; 1070 : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  02941	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02944	6b c0 09	 imul	 eax, 9
  02947	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0294a	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  02952	52		 push	 edx
  02953	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02956	6b c0 09	 imul	 eax, 9
  02959	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0295c	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  02964	52		 push	 edx
  02965	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0296a	83 c4 08	 add	 esp, 8
  0296d	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax

; 1071 : 
; 1072 : 		if ( type == -1 )

  02970	83 7d f4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  02974	75 07		 jne	 SHORT $LN13@DropItem

; 1073 : 		{
; 1074 : 			return FALSE;

  02976	33 c0		 xor	 eax, eax
  02978	e9 82 02 00 00	 jmp	 $LN20@DropItem
$LN13@DropItem:

; 1075 : 		}
; 1076 : 
; 1077 : 		if ( this->BagObject[loc16].m_issetitem == 1 ) //season3 add-on

  0297d	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02980	6b c0 09	 imul	 eax, 9
  02983	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02986	0f b6 94 01 3a
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+570]
  0298e	83 fa 01	 cmp	 edx, 1
  02991	75 27		 jne	 SHORT $LN12@DropItem

; 1078 : 		{
; 1079 : 			this->DropSetItem(aIndex, type, btMapNumber, x , y);

  02993	8b 45 e8	 mov	 eax, DWORD PTR _y$[ebp]
  02996	50		 push	 eax
  02997	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  0299a	51		 push	 ecx
  0299b	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  0299f	52		 push	 edx
  029a0	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  029a3	50		 push	 eax
  029a4	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  029a7	51		 push	 ecx
  029a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  029ab	e8 00 00 00 00	 call	 ?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z ; CProbabilityItemBag::DropSetItem

; 1080 : 			return TRUE;

  029b0	b8 01 00 00 00	 mov	 eax, 1
  029b5	e9 45 02 00 00	 jmp	 $LN20@DropItem
$LN12@DropItem:

; 1081 : 		}
; 1082 : 
; 1083 : 		if ( this->BagObject[loc16].m_isskill != 0 )

  029ba	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  029bd	6b c0 09	 imul	 eax, 9
  029c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  029c3	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  029cb	85 d2		 test	 edx, edx
  029cd	74 07		 je	 SHORT $LN11@DropItem

; 1084 : 		{
; 1085 : 			Option1 =1;

  029cf	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN11@DropItem:

; 1086 : 		}
; 1087 : 
; 1088 : 		if ( this->BagObject[loc16].m_isluck != 0 )

  029d6	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  029d9	6b c0 09	 imul	 eax, 9
  029dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  029df	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  029e7	85 d2		 test	 edx, edx
  029e9	74 23		 je	 SHORT $LN9@DropItem

; 1089 : 		{
; 1090 : 			Option2 = 0;

  029eb	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1091 : 
; 1092 : 			if ( (rand()%2) == 0 )

  029f2	e8 00 00 00 00	 call	 _rand
  029f7	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  029fc	79 05		 jns	 SHORT $LN22@DropItem
  029fe	48		 dec	 eax
  029ff	83 c8 fe	 or	 eax, -2			; fffffffeH
  02a02	40		 inc	 eax
$LN22@DropItem:
  02a03	85 c0		 test	 eax, eax
  02a05	75 07		 jne	 SHORT $LN9@DropItem

; 1093 : 			{
; 1094 : 				Option2 = 1;

  02a07	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN9@DropItem:

; 1095 : 			}
; 1096 : 		}
; 1097 : 
; 1098 : 		if ( this->BagObject[loc16].m_isoption != 0 )

  02a0e	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02a11	6b c0 09	 imul	 eax, 9
  02a14	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a17	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  02a1f	85 d2		 test	 edx, edx
  02a21	74 2b		 je	 SHORT $LN6@DropItem

; 1099 : 		{
; 1100 : 			if ( rand()%5 < 1 )

  02a23	e8 00 00 00 00	 call	 _rand
  02a28	99		 cdq
  02a29	b9 05 00 00 00	 mov	 ecx, 5
  02a2e	f7 f9		 idiv	 ecx
  02a30	83 fa 01	 cmp	 edx, 1
  02a33	7d 09		 jge	 SHORT $LN7@DropItem

; 1101 : 			{
; 1102 : 				Option3 = 3;

  02a35	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 1103 : 			}
; 1104 : 			else

  02a3c	eb 10		 jmp	 SHORT $LN6@DropItem
$LN7@DropItem:

; 1105 : 			{
; 1106 : 				Option3 = rand()%3;

  02a3e	e8 00 00 00 00	 call	 _rand
  02a43	99		 cdq
  02a44	b9 03 00 00 00	 mov	 ecx, 3
  02a49	f7 f9		 idiv	 ecx
  02a4b	89 55 dc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN6@DropItem:

; 1107 : 			}
; 1108 : 		}
; 1109 : 
; 1110 : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  02a4e	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02a51	6b c0 09	 imul	 eax, 9
  02a54	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a57	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  02a5f	85 d2		 test	 edx, edx
  02a61	74 17		 je	 SHORT $LN5@DropItem

; 1111 : 		{
; 1112 : 			loc12 = NewOptionRand(0);

  02a63	6a 00		 push	 0
  02a65	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  02a6a	83 c4 04	 add	 esp, 4
  02a6d	0f b6 c0	 movzx	 eax, al
  02a70	89 45 d0	 mov	 DWORD PTR _loc12$[ebp], eax

; 1113 : 			//Option2 = 0;
; 1114 : 			Option1 = 1;

  02a73	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN5@DropItem:

; 1115 : 			//level = 0;
; 1116 : 		}
; 1117 : 
; 1118 : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14) || type == ITEMGET(14,22) )	// Chaos, Bless, Soul, Creation

  02a7a	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _type$[ebp], 6159 ; 0000180fH
  02a81	74 1b		 je	 SHORT $LN3@DropItem
  02a83	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7181 ; 00001c0dH
  02a8a	74 12		 je	 SHORT $LN3@DropItem
  02a8c	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7182 ; 00001c0eH
  02a93	74 09		 je	 SHORT $LN3@DropItem
  02a95	81 7d f4 16 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7190 ; 00001c16H
  02a9c	75 1c		 jne	 SHORT $LN4@DropItem
$LN3@DropItem:

; 1119 : 		{
; 1120 : 			Option1 = 0;

  02a9e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 1121 : 			Option2 = 0;

  02aa5	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1122 : 			Option3 = 0;

  02aac	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 1123 : 			level = 0;

  02ab3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN4@DropItem:

; 1124 : 		}
; 1125 : 
; 1126 : 		if ( type == ITEMGET(13,0) ||
; 1127 : 			 type == ITEMGET(13,1) ||
; 1128 : 			 type == ITEMGET(13,2) ||
; 1129 : 			 type == ITEMGET(13,8) ||
; 1130 : 			 type == ITEMGET(13,9) ||
; 1131 : 			 type == ITEMGET(13,12) ||
; 1132 : 			 type ==ITEMGET(13,13) ||
; 1133 : 			 type ==ITEMGET(13,38) ||
; 1134 : 			 type ==ITEMGET(13,39) ||
; 1135 : 			 type ==ITEMGET(13,40) ||
; 1136 : 			 type ==ITEMGET(13,41) )

  02aba	81 7d f4 00 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6656 ; 00001a00H
  02ac1	74 5a		 je	 SHORT $LN1@DropItem
  02ac3	81 7d f4 01 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6657 ; 00001a01H
  02aca	74 51		 je	 SHORT $LN1@DropItem
  02acc	81 7d f4 02 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6658 ; 00001a02H
  02ad3	74 48		 je	 SHORT $LN1@DropItem
  02ad5	81 7d f4 08 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6664 ; 00001a08H
  02adc	74 3f		 je	 SHORT $LN1@DropItem
  02ade	81 7d f4 09 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6665 ; 00001a09H
  02ae5	74 36		 je	 SHORT $LN1@DropItem
  02ae7	81 7d f4 0c 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6668 ; 00001a0cH
  02aee	74 2d		 je	 SHORT $LN1@DropItem
  02af0	81 7d f4 0d 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6669 ; 00001a0dH
  02af7	74 24		 je	 SHORT $LN1@DropItem
  02af9	81 7d f4 26 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6694 ; 00001a26H
  02b00	74 1b		 je	 SHORT $LN1@DropItem
  02b02	81 7d f4 27 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6695 ; 00001a27H
  02b09	74 12		 je	 SHORT $LN1@DropItem
  02b0b	81 7d f4 28 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6696 ; 00001a28H
  02b12	74 09		 je	 SHORT $LN1@DropItem
  02b14	81 7d f4 29 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6697 ; 00001a29H
  02b1b	75 10		 jne	 SHORT $LN2@DropItem
$LN1@DropItem:

; 1137 : 		{
; 1138 : 			level = 0;

  02b1d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 1139 : 			dur = 255;

  02b24	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@437f0000
  02b2a	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]
$LN2@DropItem:

; 1140 : 		}
; 1141 : 
; 1142 : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  02b2d	6a 00		 push	 0
  02b2f	0f b6 45 d0	 movzx	 eax, BYTE PTR _loc12$[ebp]
  02b33	50		 push	 eax
  02b34	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02b37	8b 11		 mov	 edx, DWORD PTR [ecx]
  02b39	52		 push	 edx
  02b3a	0f b6 45 dc	 movzx	 eax, BYTE PTR _Option3$[ebp]
  02b3e	50		 push	 eax
  02b3f	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  02b43	51		 push	 ecx
  02b44	0f b6 55 e4	 movzx	 edx, BYTE PTR _Option1$[ebp]
  02b48	52		 push	 edx
  02b49	d9 45 f8	 fld	 DWORD PTR _dur$[ebp]
  02b4c	d9 bd 7e ff ff
	ff		 fnstcw	 WORD PTR tv361[ebp]
  02b52	0f b7 85 7e ff
	ff ff		 movzx	 eax, WORD PTR tv361[ebp]
  02b59	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  02b5e	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv364[ebp], eax
  02b64	d9 ad 78 ff ff
	ff		 fldcw	 WORD PTR tv364[ebp]
  02b6a	db 9d 74 ff ff
	ff		 fistp	 DWORD PTR tv366[ebp]
  02b70	d9 ad 7e ff ff
	ff		 fldcw	 WORD PTR tv361[ebp]
  02b76	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR tv366[ebp]
  02b7d	50		 push	 eax
  02b7e	0f b6 4d f0	 movzx	 ecx, BYTE PTR _level$[ebp]
  02b82	51		 push	 ecx
  02b83	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  02b86	52		 push	 edx
  02b87	0f b6 45 e8	 movzx	 eax, BYTE PTR _y$[ebp]
  02b8b	50		 push	 eax
  02b8c	0f b6 4d ec	 movzx	 ecx, BYTE PTR _x$[ebp]
  02b90	51		 push	 ecx
  02b91	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  02b95	52		 push	 edx
  02b96	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02b99	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b9b	51		 push	 ecx
  02b9c	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  02ba1	83 c4 34	 add	 esp, 52			; 00000034H

; 1143 : 		LogAddTD("[%s] Drop Item [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1144 : 				this->GetEventName(), lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  02ba4	8b 45 d0	 mov	 eax, DWORD PTR _loc12$[ebp]
  02ba7	50		 push	 eax
  02ba8	8b 4d dc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  02bab	51		 push	 ecx
  02bac	8b 55 e0	 mov	 edx, DWORD PTR _Option2$[ebp]
  02baf	52		 push	 edx
  02bb0	8b 45 e4	 mov	 eax, DWORD PTR _Option1$[ebp]
  02bb3	50		 push	 eax
  02bb4	8b 4d f0	 mov	 ecx, DWORD PTR _level$[ebp]
  02bb7	51		 push	 ecx
  02bb8	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  02bbb	52		 push	 edx
  02bbc	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  02bbf	6b c0 70	 imul	 eax, 112		; 00000070H
  02bc2	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  02bc7	50		 push	 eax
  02bc8	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  02bcb	51		 push	 ecx
  02bcc	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  02bcf	52		 push	 edx
  02bd0	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  02bd4	50		 push	 eax
  02bd5	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02bd8	83 c1 77	 add	 ecx, 119		; 00000077H
  02bdb	51		 push	 ecx
  02bdc	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02bdf	83 c2 6c	 add	 edx, 108		; 0000006cH
  02be2	52		 push	 edx
  02be3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02be6	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  02beb	50		 push	 eax
  02bec	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@
  02bf1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02bf7	83 c4 38	 add	 esp, 56			; 00000038H
$LN18@DropItem:

; 1145 : 
; 1146 : 	}
; 1147 : 	return 1;

  02bfa	b8 01 00 00 00	 mov	 eax, 1
$LN20@DropItem:

; 1148 : }

  02bff	5f		 pop	 edi
  02c00	5e		 pop	 esi
  02c01	5b		 pop	 ebx
  02c02	8b e5		 mov	 esp, ebp
  02c04	5d		 pop	 ebp
  02c05	c2 10 00	 ret	 16			; 00000010H
?DropItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP		; CProbabilityItemBag::DropItem
_TEXT	ENDS
PUBLIC	??_C@_0HF@NBBLCEHI@?$FL?$CFs?$FN?5Drop?5Set?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CF@ ; `string'
EXTRN	?GetSetOptionName@CSetItemOption@@QAEPADHH@Z:PROC ; CSetItemOption::GetSetOptionName
EXTRN	?GenSetOption@CSetItemOption@@QAEHH@Z:PROC	; CSetItemOption::GenSetOption
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
;	COMDAT ??_C@_0HF@NBBLCEHI@?$FL?$CFs?$FN?5Drop?5Set?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CF@
CONST	SEGMENT
??_C@_0HF@NBBLCEHI@?$FL?$CFs?$FN?5Drop?5Set?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CF@ DB '['
	DB	'%s] Drop Set Item [%s][%s] : (%d)(%d/%d) Itemnum:[%d] skill:['
	DB	'%d] luck:[%d] option:[%d] SetOption:[%d], SetName:[%s]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv74 = -108						; size = 4
_loc10$ = -40						; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_optionc$ = -24						; size = 4
_option3rand$ = -20					; size = 4
_option2rand$ = -16					; size = 4
_option1rand$ = -12					; size = 4
_SetOption$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_itemnum$ = 12						; size = 4
_btMapNumber$ = 16					; size = 1
_cX$ = 20						; size = 4
_cY$ = 24						; size = 4
?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z PROC	; CProbabilityItemBag::DropSetItem
; _this$ = ecx

; 1151 : {

  02c10	55		 push	 ebp
  02c11	8b ec		 mov	 ebp, esp
  02c13	83 ec 6c	 sub	 esp, 108		; 0000006cH
  02c16	53		 push	 ebx
  02c17	56		 push	 esi
  02c18	57		 push	 edi
  02c19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1152 : 	int SetOption = gSetItemOption.GenSetOption(itemnum);

  02c1c	8b 45 0c	 mov	 eax, DWORD PTR _itemnum$[ebp]
  02c1f	50		 push	 eax
  02c20	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  02c25	e8 00 00 00 00	 call	 ?GenSetOption@CSetItemOption@@QAEHH@Z ; CSetItemOption::GenSetOption
  02c2a	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax

; 1153 : 
; 1154 : 	int option1rand;
; 1155 : 	int option2rand;
; 1156 : 	int option3rand;
; 1157 : 	int optionc;
; 1158 : 	int Option1 = 0;

  02c2d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 1159 : 	int Option2 = 0;

  02c34	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1160 : 	int Option3 = 0;

  02c3b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 1161 : 
; 1162 : 	option1rand = 6;

  02c42	c7 45 f4 06 00
	00 00		 mov	 DWORD PTR _option1rand$[ebp], 6

; 1163 : 	option2rand = 4;

  02c49	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _option2rand$[ebp], 4

; 1164 : 
; 1165 : 	option3rand = rand()%100;

  02c50	e8 00 00 00 00	 call	 _rand
  02c55	99		 cdq
  02c56	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02c5b	f7 f9		 idiv	 ecx
  02c5d	89 55 ec	 mov	 DWORD PTR _option3rand$[ebp], edx

; 1166 : 	optionc = rand()%3;

  02c60	e8 00 00 00 00	 call	 _rand
  02c65	99		 cdq
  02c66	b9 03 00 00 00	 mov	 ecx, 3
  02c6b	f7 f9		 idiv	 ecx
  02c6d	89 55 e8	 mov	 DWORD PTR _optionc$[ebp], edx

; 1167 : 
; 1168 : 	if(rand()%100 < option2rand)

  02c70	e8 00 00 00 00	 call	 _rand
  02c75	99		 cdq
  02c76	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02c7b	f7 f9		 idiv	 ecx
  02c7d	3b 55 f0	 cmp	 edx, DWORD PTR _option2rand$[ebp]
  02c80	7d 07		 jge	 SHORT $LN13@DropSetIte

; 1169 : 	{
; 1170 : 		Option2 = 1;

  02c82	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN13@DropSetIte:

; 1171 : 	}
; 1172 : 
; 1173 : 	switch(optionc)

  02c89	8b 45 e8	 mov	 eax, DWORD PTR _optionc$[ebp]
  02c8c	89 45 94	 mov	 DWORD PTR tv74[ebp], eax
  02c8f	83 7d 94 00	 cmp	 DWORD PTR tv74[ebp], 0
  02c93	74 0e		 je	 SHORT $LN10@DropSetIte
  02c95	83 7d 94 01	 cmp	 DWORD PTR tv74[ebp], 1
  02c99	74 17		 je	 SHORT $LN8@DropSetIte
  02c9b	83 7d 94 02	 cmp	 DWORD PTR tv74[ebp], 2
  02c9f	74 20		 je	 SHORT $LN6@DropSetIte
  02ca1	eb 2b		 jmp	 SHORT $LN11@DropSetIte
$LN10@DropSetIte:

; 1174 : 	{
; 1175 : 	case 0: 
; 1176 : 		if(option3rand < 4)

  02ca3	83 7d ec 04	 cmp	 DWORD PTR _option3rand$[ebp], 4
  02ca7	7d 07		 jge	 SHORT $LN9@DropSetIte

; 1177 : 		{
; 1178 : 			Option3 = 3;

  02ca9	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3
$LN9@DropSetIte:

; 1179 : 		}
; 1180 : 		break;

  02cb0	eb 1c		 jmp	 SHORT $LN11@DropSetIte
$LN8@DropSetIte:

; 1181 : 	case 1:
; 1182 : 		if(option3rand < 8)

  02cb2	83 7d ec 08	 cmp	 DWORD PTR _option3rand$[ebp], 8
  02cb6	7d 07		 jge	 SHORT $LN7@DropSetIte

; 1183 : 		{
; 1184 : 			Option3 = 2;

  02cb8	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 2
$LN7@DropSetIte:

; 1185 : 		}
; 1186 : 		break;

  02cbf	eb 0d		 jmp	 SHORT $LN11@DropSetIte
$LN6@DropSetIte:

; 1187 : 	case 2: 
; 1188 : 		if(option3rand < 12)

  02cc1	83 7d ec 0c	 cmp	 DWORD PTR _option3rand$[ebp], 12 ; 0000000cH
  02cc5	7d 07		 jge	 SHORT $LN11@DropSetIte

; 1189 : 		{
; 1190 : 			Option3 = 1;

  02cc7	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 1
$LN11@DropSetIte:

; 1191 : 		}
; 1192 : 		break;
; 1193 : 	default: break;
; 1194 : 	}
; 1195 : 
; 1196 : 	Option1 = 1;

  02cce	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1

; 1197 : 
; 1198 : 	ItemSerialCreateSend(aIndex,btMapNumber,(BYTE)cX,(BYTE)cY,itemnum,0,0,(BYTE)Option1,(BYTE)Option2,(BYTE)Option3,aIndex,0,(BYTE)SetOption);

  02cd5	0f b6 45 f8	 movzx	 eax, BYTE PTR _SetOption$[ebp]
  02cd9	50		 push	 eax
  02cda	6a 00		 push	 0
  02cdc	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  02cdf	51		 push	 ecx
  02ce0	0f b6 55 dc	 movzx	 edx, BYTE PTR _Option3$[ebp]
  02ce4	52		 push	 edx
  02ce5	0f b6 45 e0	 movzx	 eax, BYTE PTR _Option2$[ebp]
  02ce9	50		 push	 eax
  02cea	0f b6 4d e4	 movzx	 ecx, BYTE PTR _Option1$[ebp]
  02cee	51		 push	 ecx
  02cef	6a 00		 push	 0
  02cf1	6a 00		 push	 0
  02cf3	8b 55 0c	 mov	 edx, DWORD PTR _itemnum$[ebp]
  02cf6	52		 push	 edx
  02cf7	0f b6 45 18	 movzx	 eax, BYTE PTR _cY$[ebp]
  02cfb	50		 push	 eax
  02cfc	0f b6 4d 14	 movzx	 ecx, BYTE PTR _cX$[ebp]
  02d00	51		 push	 ecx
  02d01	0f b6 55 10	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  02d05	52		 push	 edx
  02d06	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02d09	50		 push	 eax
  02d0a	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  02d0f	83 c4 34	 add	 esp, 52			; 00000034H

; 1199 : 
; 1200 : 	int loc10 = 0;

  02d12	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _loc10$[ebp], 0

; 1201 : 
; 1202 : 	if((SetOption&0x01) != 0)

  02d19	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
  02d1c	83 e0 01	 and	 eax, 1
  02d1f	74 09		 je	 SHORT $LN3@DropSetIte

; 1203 : 	{
; 1204 : 		loc10 = 1;

  02d21	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _loc10$[ebp], 1
  02d28	eb 0f		 jmp	 SHORT $LN2@DropSetIte
$LN3@DropSetIte:

; 1205 : 	}
; 1206 : 	else if((SetOption&0x02) != 0)

  02d2a	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
  02d2d	83 e0 02	 and	 eax, 2
  02d30	74 07		 je	 SHORT $LN2@DropSetIte

; 1207 : 	{
; 1208 : 		loc10 = 2;

  02d32	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR _loc10$[ebp], 2
$LN2@DropSetIte:

; 1209 : 	}
; 1210 : 
; 1211 : 	LogAddTD("[%s] Drop Set Item [%s][%s] : (%d)(%d/%d) Itemnum:[%d] skill:[%d] luck:[%d] option:[%d] SetOption:[%d], SetName:[%s]",this->GetEventName(), gObj[aIndex].AccountID,gObj[aIndex].Name,
; 1212 : 		btMapNumber, cX, cY, itemnum,Option1,Option2,Option3,SetOption, gSetItemOption.GetSetOptionName(itemnum, loc10));

  02d39	8b 45 d8	 mov	 eax, DWORD PTR _loc10$[ebp]
  02d3c	50		 push	 eax
  02d3d	8b 4d 0c	 mov	 ecx, DWORD PTR _itemnum$[ebp]
  02d40	51		 push	 ecx
  02d41	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  02d46	e8 00 00 00 00	 call	 ?GetSetOptionName@CSetItemOption@@QAEPADHH@Z ; CSetItemOption::GetSetOptionName
  02d4b	50		 push	 eax
  02d4c	8b 55 f8	 mov	 edx, DWORD PTR _SetOption$[ebp]
  02d4f	52		 push	 edx
  02d50	8b 45 dc	 mov	 eax, DWORD PTR _Option3$[ebp]
  02d53	50		 push	 eax
  02d54	8b 4d e0	 mov	 ecx, DWORD PTR _Option2$[ebp]
  02d57	51		 push	 ecx
  02d58	8b 55 e4	 mov	 edx, DWORD PTR _Option1$[ebp]
  02d5b	52		 push	 edx
  02d5c	8b 45 0c	 mov	 eax, DWORD PTR _itemnum$[ebp]
  02d5f	50		 push	 eax
  02d60	8b 4d 18	 mov	 ecx, DWORD PTR _cY$[ebp]
  02d63	51		 push	 ecx
  02d64	8b 55 14	 mov	 edx, DWORD PTR _cX$[ebp]
  02d67	52		 push	 edx
  02d68	0f b6 45 10	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  02d6c	50		 push	 eax
  02d6d	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  02d70	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  02d76	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02d7c	8d 44 0a 77	 lea	 eax, DWORD PTR [edx+ecx+119]
  02d80	50		 push	 eax
  02d81	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  02d84	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  02d8a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02d90	8d 44 0a 6c	 lea	 eax, DWORD PTR [edx+ecx+108]
  02d94	50		 push	 eax
  02d95	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d98	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  02d9d	50		 push	 eax
  02d9e	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@NBBLCEHI@?$FL?$CFs?$FN?5Drop?5Set?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CF@
  02da3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02da9	83 c4 34	 add	 esp, 52			; 00000034H

; 1213 : }

  02dac	5f		 pop	 edi
  02dad	5e		 pop	 esi
  02dae	5b		 pop	 ebx
  02daf	8b e5		 mov	 esp, ebp
  02db1	5d		 pop	 ebp
  02db2	c2 14 00	 ret	 20			; 00000014H
?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z ENDP	; CProbabilityItemBag::DropSetItem
_TEXT	ENDS
PUBLIC	?DropItem@CProbabilityItemBag@@QAEHHEEEPAH@Z	; CProbabilityItemBag::DropItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv362 = -140						; size = 4
tv360 = -136						; size = 4
tv357 = -130						; size = 2
_loc16$ = -64						; size = 4
_loc15$ = -60						; size = 4
_loc14$ = -56						; size = 4
_lpObj$ = -52						; size = 4
_loc12$ = -48						; size = 4
_ExOption$ = -44					; size = 4
_DropItemNum$ = -40					; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_level$ = -16						; size = 4
_type$ = -12						; size = 4
_dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
_iDropZen$ = 24						; size = 4
?DropItem@CProbabilityItemBag@@QAEHHEEEPAH@Z PROC	; CProbabilityItemBag::DropItem
; _this$ = ecx

; 1216 : {	

  02dc0	55		 push	 ebp
  02dc1	8b ec		 mov	 ebp, esp
  02dc3	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  02dc9	53		 push	 ebx
  02dca	56		 push	 esi
  02dcb	57		 push	 edi
  02dcc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1217 : 	if ( this->m_bLoad == FALSE )

  02dcf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02dd2	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  02dd6	75 07		 jne	 SHORT $LN19@DropItem@2

; 1218 : 		return FALSE;

  02dd8	33 c0		 xor	 eax, eax
  02dda	e9 f4 03 00 00	 jmp	 $LN20@DropItem@2
$LN19@DropItem@2:

; 1219 : 
; 1220 : 	float dur = 0;

  02ddf	d9 ee		 fldz
  02de1	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 1221 : 	int type = 0;

  02de4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0

; 1222 : 	int level = 0;

  02deb	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 1223 : 	int x = 0;

  02df2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 1224 : 	int y = 0;

  02df9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 1225 : 	int Option1 = 0;

  02e00	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 1226 : 	int Option2 = 0;

  02e07	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1227 : 	int Option3 = 0;

  02e0e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 1228 : 	int DropItemNum = 0;

  02e15	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _DropItemNum$[ebp], 0

; 1229 : 	int ExOption = 0;

  02e1c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ExOption$[ebp], 0

; 1230 : 	int loc12 = 0;

  02e23	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 1231 : 	LPOBJ lpObj = &gObj[aIndex];

  02e2a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02e2d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02e33	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02e39	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1232 : 	int loc14;
; 1233 : 	int loc15;
; 1234 : 	int loc16;
; 1235 : 
; 1236 : 	if ( this->GetBagCount() > 0 )

  02e3c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e3f	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  02e44	85 c0		 test	 eax, eax
  02e46	0f 8e 82 03 00
	00		 jle	 $LN18@DropItem@2

; 1237 : 	{
; 1238 : 		loc14 = rand()%10000;

  02e4c	e8 00 00 00 00	 call	 _rand
  02e51	99		 cdq
  02e52	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  02e57	f7 f9		 idiv	 ecx
  02e59	89 55 c8	 mov	 DWORD PTR _loc14$[ebp], edx

; 1239 : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1])

  02e5c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02e5f	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  02e66	74 21		 je	 SHORT $LN16@DropItem@2
  02e68	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02e6b	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  02e71	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02e74	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  02e79	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  02e80	39 45 c8	 cmp	 DWORD PTR _loc14$[ebp], eax
  02e83	0f 8d 88 00 00
	00		 jge	 $LN17@DropItem@2
$LN16@DropItem@2:

; 1240 : 		{
; 1241 : 			if(btMapNumber == 0xFF)

  02e89	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  02e8d	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  02e92	75 15		 jne	 SHORT $LN15@DropItem@2

; 1242 : 			{
; 1243 : 				*iDropZen = this->m_iDropZen;

  02e94	8b 45 18	 mov	 eax, DWORD PTR _iDropZen$[ebp]
  02e97	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e9a	8b 91 10 01 00
	00		 mov	 edx, DWORD PTR [ecx+272]
  02ea0	89 10		 mov	 DWORD PTR [eax], edx

; 1244 : 				return FALSE;

  02ea2	33 c0		 xor	 eax, eax
  02ea4	e9 2a 03 00 00	 jmp	 $LN20@DropItem@2
$LN15@DropItem@2:

; 1245 : 			}
; 1246 : 
; 1247 : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  02ea9	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  02ead	50		 push	 eax
  02eae	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  02eb2	51		 push	 ecx
  02eb3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02eb6	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  02ebc	50		 push	 eax
  02ebd	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02ec0	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  02ec7	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  02ecd	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  02ed3	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1248 : 			LogAddTD("[%s] Drop Zen [%s][%s] [%d Zen]", this->GetEventName(), lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  02ed8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02edb	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  02ee1	51		 push	 ecx
  02ee2	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02ee5	83 c2 77	 add	 edx, 119		; 00000077H
  02ee8	52		 push	 edx
  02ee9	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02eec	83 c0 6c	 add	 eax, 108		; 0000006cH
  02eef	50		 push	 eax
  02ef0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ef3	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  02ef8	50		 push	 eax
  02ef9	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@
  02efe	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02f04	83 c4 14	 add	 esp, 20			; 00000014H

; 1249 : 			return 1;

  02f07	b8 01 00 00 00	 mov	 eax, 1
  02f0c	e9 c2 02 00 00	 jmp	 $LN20@DropItem@2
$LN17@DropItem@2:

; 1250 : 		}
; 1251 : 			
; 1252 : 		loc15 = this->m_iRateKindCount;

  02f11	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02f14	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  02f1a	89 4d c4	 mov	 DWORD PTR _loc15$[ebp], ecx

; 1253 : 		loc16 = this->SortItem(loc14);

  02f1d	8b 45 c8	 mov	 eax, DWORD PTR _loc14$[ebp]
  02f20	50		 push	 eax
  02f21	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f24	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem
  02f29	89 45 c0	 mov	 DWORD PTR _loc16$[ebp], eax

; 1254 : 
; 1255 : 		if ( cX == 0 && cY == 0 )

  02f2c	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  02f30	85 c0		 test	 eax, eax
  02f32	75 24		 jne	 SHORT $LN14@DropItem@2
  02f34	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  02f38	85 c0		 test	 eax, eax
  02f3a	75 1c		 jne	 SHORT $LN14@DropItem@2

; 1256 : 		{
; 1257 : 			x = lpObj->X;

  02f3c	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f3f	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  02f46	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 1258 : 			y = lpObj->Y;

  02f49	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f4c	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  02f53	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 1259 : 		}
; 1260 : 		else

  02f56	eb 0e		 jmp	 SHORT $LN13@DropItem@2
$LN14@DropItem@2:

; 1261 : 		{
; 1262 : 			x = cX;

  02f58	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  02f5c	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 1263 : 			y = cY;

  02f5f	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  02f63	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax
$LN13@DropItem@2:

; 1264 : 		}
; 1265 : 
; 1266 : 		if(btMapNumber == 0xFF)

  02f66	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  02f6a	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  02f6f	75 0e		 jne	 SHORT $LN12@DropItem@2

; 1267 : 		{
; 1268 : 			x = 0;

  02f71	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 1269 : 			y = 0;

  02f78	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
$LN12@DropItem@2:

; 1270 : 		}
; 1271 : 
; 1272 : 		level = this->GetLevel(loc16);

  02f7f	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02f82	50		 push	 eax
  02f83	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f86	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  02f8b	0f b6 c8	 movzx	 ecx, al
  02f8e	89 4d f0	 mov	 DWORD PTR _level$[ebp], ecx

; 1273 : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  02f91	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02f94	6b c0 09	 imul	 eax, 9
  02f97	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f9a	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  02fa2	52		 push	 edx
  02fa3	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02fa6	6b c0 09	 imul	 eax, 9
  02fa9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fac	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  02fb4	52		 push	 edx
  02fb5	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  02fba	83 c4 08	 add	 esp, 8
  02fbd	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax

; 1274 : 
; 1275 : 		if ( type == -1 )

  02fc0	83 7d f4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  02fc4	75 07		 jne	 SHORT $LN11@DropItem@2

; 1276 : 		{
; 1277 : 			return FALSE;

  02fc6	33 c0		 xor	 eax, eax
  02fc8	e9 06 02 00 00	 jmp	 $LN20@DropItem@2
$LN11@DropItem@2:

; 1278 : 		}
; 1279 : 
; 1280 : 		if ( this->BagObject[loc16].m_issetitem == 1 ) //season3 add-on

  02fcd	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  02fd0	6b c0 09	 imul	 eax, 9
  02fd3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fd6	0f b6 94 01 3a
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+570]
  02fde	83 fa 01	 cmp	 edx, 1
  02fe1	75 27		 jne	 SHORT $LN10@DropItem@2

; 1281 : 		{
; 1282 : 			this->DropSetItem(aIndex, type, btMapNumber, x , y);

  02fe3	8b 45 e8	 mov	 eax, DWORD PTR _y$[ebp]
  02fe6	50		 push	 eax
  02fe7	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  02fea	51		 push	 ecx
  02feb	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  02fef	52		 push	 edx
  02ff0	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  02ff3	50		 push	 eax
  02ff4	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  02ff7	51		 push	 ecx
  02ff8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ffb	e8 00 00 00 00	 call	 ?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z ; CProbabilityItemBag::DropSetItem

; 1283 : 			return TRUE;

  03000	b8 01 00 00 00	 mov	 eax, 1
  03005	e9 c9 01 00 00	 jmp	 $LN20@DropItem@2
$LN10@DropItem@2:

; 1284 : 		}
; 1285 : 
; 1286 : 		if ( this->BagObject[loc16].m_isskill != 0 )

  0300a	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  0300d	6b c0 09	 imul	 eax, 9
  03010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03013	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  0301b	85 d2		 test	 edx, edx
  0301d	74 07		 je	 SHORT $LN9@DropItem@2

; 1287 : 		{
; 1288 : 			Option1 =1;

  0301f	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN9@DropItem@2:

; 1289 : 		}
; 1290 : 
; 1291 : 		if ( this->BagObject[loc16].m_isluck != 0 )

  03026	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  03029	6b c0 09	 imul	 eax, 9
  0302c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0302f	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  03037	85 d2		 test	 edx, edx
  03039	74 23		 je	 SHORT $LN7@DropItem@2

; 1292 : 		{
; 1293 : 			Option2 = 0;

  0303b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1294 : 
; 1295 : 			if ( (rand()%2) == 0 )

  03042	e8 00 00 00 00	 call	 _rand
  03047	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0304c	79 05		 jns	 SHORT $LN22@DropItem@2
  0304e	48		 dec	 eax
  0304f	83 c8 fe	 or	 eax, -2			; fffffffeH
  03052	40		 inc	 eax
$LN22@DropItem@2:
  03053	85 c0		 test	 eax, eax
  03055	75 07		 jne	 SHORT $LN7@DropItem@2

; 1296 : 			{
; 1297 : 				Option2 = 1;

  03057	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN7@DropItem@2:

; 1298 : 			}
; 1299 : 		}
; 1300 : 
; 1301 : 		if ( this->BagObject[loc16].m_isoption != 0 )

  0305e	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  03061	6b c0 09	 imul	 eax, 9
  03064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03067	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  0306f	85 d2		 test	 edx, edx
  03071	74 2b		 je	 SHORT $LN4@DropItem@2

; 1302 : 		{
; 1303 : 			if ( rand()%5 < 1 )

  03073	e8 00 00 00 00	 call	 _rand
  03078	99		 cdq
  03079	b9 05 00 00 00	 mov	 ecx, 5
  0307e	f7 f9		 idiv	 ecx
  03080	83 fa 01	 cmp	 edx, 1
  03083	7d 09		 jge	 SHORT $LN5@DropItem@2

; 1304 : 			{
; 1305 : 				Option3 = 3;

  03085	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 1306 : 			}
; 1307 : 			else

  0308c	eb 10		 jmp	 SHORT $LN4@DropItem@2
$LN5@DropItem@2:

; 1308 : 			{
; 1309 : 				Option3 = rand()%3;

  0308e	e8 00 00 00 00	 call	 _rand
  03093	99		 cdq
  03094	b9 03 00 00 00	 mov	 ecx, 3
  03099	f7 f9		 idiv	 ecx
  0309b	89 55 dc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropItem@2:

; 1310 : 			}
; 1311 : 		}
; 1312 : 
; 1313 : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  0309e	8b 45 c0	 mov	 eax, DWORD PTR _loc16$[ebp]
  030a1	6b c0 09	 imul	 eax, 9
  030a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  030a7	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  030af	85 d2		 test	 edx, edx
  030b1	74 17		 je	 SHORT $LN3@DropItem@2

; 1314 : 		{
; 1315 : 			loc12 = NewOptionRand(0);

  030b3	6a 00		 push	 0
  030b5	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  030ba	83 c4 04	 add	 esp, 4
  030bd	0f b6 c0	 movzx	 eax, al
  030c0	89 45 d0	 mov	 DWORD PTR _loc12$[ebp], eax

; 1316 : 			//Option2 = 0;
; 1317 : 			Option1 = 1;

  030c3	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN3@DropItem@2:

; 1318 : 			//level = 0;
; 1319 : 		}
; 1320 : 
; 1321 : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14) )	// Chaos, Bless, Soul

  030ca	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _type$[ebp], 6159 ; 0000180fH
  030d1	74 12		 je	 SHORT $LN1@DropItem@2
  030d3	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7181 ; 00001c0dH
  030da	74 09		 je	 SHORT $LN1@DropItem@2
  030dc	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _type$[ebp], 7182 ; 00001c0eH
  030e3	75 1c		 jne	 SHORT $LN2@DropItem@2
$LN1@DropItem@2:

; 1322 : 		{
; 1323 : 			Option1 = 0;

  030e5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 1324 : 			Option2 = 0;

  030ec	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1325 : 			Option3 = 0;

  030f3	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 1326 : 			level = 0;

  030fa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN2@DropItem@2:

; 1327 : 		}
; 1328 : 
; 1329 : 		ItemSerialCreateSend(lpObj->m_Index, btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  03101	6a 00		 push	 0
  03103	0f b6 45 d0	 movzx	 eax, BYTE PTR _loc12$[ebp]
  03107	50		 push	 eax
  03108	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0310b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0310d	52		 push	 edx
  0310e	0f b6 45 dc	 movzx	 eax, BYTE PTR _Option3$[ebp]
  03112	50		 push	 eax
  03113	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  03117	51		 push	 ecx
  03118	0f b6 55 e4	 movzx	 edx, BYTE PTR _Option1$[ebp]
  0311c	52		 push	 edx
  0311d	d9 45 f8	 fld	 DWORD PTR _dur$[ebp]
  03120	d9 bd 7e ff ff
	ff		 fnstcw	 WORD PTR tv357[ebp]
  03126	0f b7 85 7e ff
	ff ff		 movzx	 eax, WORD PTR tv357[ebp]
  0312d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  03132	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv360[ebp], eax
  03138	d9 ad 78 ff ff
	ff		 fldcw	 WORD PTR tv360[ebp]
  0313e	db 9d 74 ff ff
	ff		 fistp	 DWORD PTR tv362[ebp]
  03144	d9 ad 7e ff ff
	ff		 fldcw	 WORD PTR tv357[ebp]
  0314a	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR tv362[ebp]
  03151	50		 push	 eax
  03152	0f b6 4d f0	 movzx	 ecx, BYTE PTR _level$[ebp]
  03156	51		 push	 ecx
  03157	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  0315a	52		 push	 edx
  0315b	0f b6 45 e8	 movzx	 eax, BYTE PTR _y$[ebp]
  0315f	50		 push	 eax
  03160	0f b6 4d ec	 movzx	 ecx, BYTE PTR _x$[ebp]
  03164	51		 push	 ecx
  03165	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  03169	52		 push	 edx
  0316a	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0316d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0316f	51		 push	 ecx
  03170	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  03175	83 c4 34	 add	 esp, 52			; 00000034H

; 1330 : 		LogAddTD("[%s] Drop Item [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",	this->GetEventName(), lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  03178	8b 45 d0	 mov	 eax, DWORD PTR _loc12$[ebp]
  0317b	50		 push	 eax
  0317c	8b 4d dc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  0317f	51		 push	 ecx
  03180	8b 55 e0	 mov	 edx, DWORD PTR _Option2$[ebp]
  03183	52		 push	 edx
  03184	8b 45 e4	 mov	 eax, DWORD PTR _Option1$[ebp]
  03187	50		 push	 eax
  03188	8b 4d f0	 mov	 ecx, DWORD PTR _level$[ebp]
  0318b	51		 push	 ecx
  0318c	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  0318f	52		 push	 edx
  03190	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  03193	6b c0 70	 imul	 eax, 112		; 00000070H
  03196	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0319b	50		 push	 eax
  0319c	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  0319f	51		 push	 ecx
  031a0	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  031a3	52		 push	 edx
  031a4	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  031a8	50		 push	 eax
  031a9	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  031ac	83 c1 77	 add	 ecx, 119		; 00000077H
  031af	51		 push	 ecx
  031b0	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  031b3	83 c2 6c	 add	 edx, 108		; 0000006cH
  031b6	52		 push	 edx
  031b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  031ba	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  031bf	50		 push	 eax
  031c0	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@
  031c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  031cb	83 c4 38	 add	 esp, 56			; 00000038H
$LN18@DropItem@2:

; 1331 : 	}
; 1332 : 	return 1;

  031ce	b8 01 00 00 00	 mov	 eax, 1
$LN20@DropItem@2:

; 1333 : }

  031d3	5f		 pop	 edi
  031d4	5e		 pop	 esi
  031d5	5b		 pop	 ebx
  031d6	8b e5		 mov	 esp, ebp
  031d8	5d		 pop	 ebp
  031d9	c2 14 00	 ret	 20			; 00000014H
?DropItem@CProbabilityItemBag@@QAEHHEEEPAH@Z ENDP	; CProbabilityItemBag::DropItem
_TEXT	ENDS
PUBLIC	??_C@_0HB@PANEKFLN@?$FL?5RAKLION?5?$FN?$FL?5Reward?5?$FN?5Selupan?5It@ ; `string'
PUBLIC	?DropRaklionSelupanMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropRaklionSelupanMonsterReward
;	COMDAT ??_C@_0HB@PANEKFLN@?$FL?5RAKLION?5?$FN?$FL?5Reward?5?$FN?5Selupan?5It@
CONST	SEGMENT
??_C@_0HB@PANEKFLN@?$FL?5RAKLION?5?$FN?$FL?5Reward?5?$FN?5Selupan?5It@ DB '['
	DB	' RAKLION ][ Reward ] Selupan Item Drop [%s][%s] : (%d)(%d/%d)'
	DB	' Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv277 = -128						; size = 4
tv275 = -124						; size = 4
tv272 = -118						; size = 2
_lpObj$ = -52						; size = 4
_loc12$ = -48						; size = 4
_ExOption$ = -44					; size = 4
_DropItemNum$ = -40					; size = 4
_Option3$ = -36						; size = 4
_Option2$ = -32						; size = 4
_Option1$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_level$ = -16						; size = 4
_type$ = -12						; size = 4
_dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropRaklionSelupanMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropRaklionSelupanMonsterReward
; _this$ = ecx

; 1336 : {

  031e0	55		 push	 ebp
  031e1	8b ec		 mov	 ebp, esp
  031e3	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  031e9	53		 push	 ebx
  031ea	56		 push	 esi
  031eb	57		 push	 edi
  031ec	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1337 : 	if ( this->m_bLoad == FALSE )

  031ef	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  031f2	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  031f6	75 07		 jne	 SHORT $LN12@DropRaklio

; 1338 : 		return FALSE;

  031f8	33 c0		 xor	 eax, eax
  031fa	e9 87 02 00 00	 jmp	 $LN13@DropRaklio
$LN12@DropRaklio:

; 1339 : 
; 1340 : 	float dur = 0; //2

  031ff	d9 ee		 fldz
  03201	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 1341 : 	int type = 0;//3

  03204	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0

; 1342 : 	int level = 0;//4

  0320b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 1343 : 	int x = 0;//5

  03212	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 1344 : 	int y = 0;//6

  03219	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 1345 : 	int Option1 = 0;//7

  03220	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 0

; 1346 : 	int Option2 = 0;//8

  03227	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1347 : 	int Option3 = 0;//9

  0322e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 0

; 1348 : 	int DropItemNum = 0;//10

  03235	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _DropItemNum$[ebp], 0

; 1349 : 	int ExOption = 0;//11

  0323c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ExOption$[ebp], 0

; 1350 : 	int loc12 = 0;

  03243	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 1351 : 	LPOBJ lpObj = &gObj[aIndex];

  0324a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0324d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03253	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03259	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1352 : 
; 1353 : 	if ( this->GetBagCount() > 0 )

  0325c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0325f	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  03264	85 c0		 test	 eax, eax
  03266	0f 8e 15 02 00
	00		 jle	 $LN11@DropRaklio

; 1354 : 	{
; 1355 : 		DropItemNum =  rand() % this->GetBagCount();

  0326c	e8 00 00 00 00	 call	 _rand
  03271	8b f0		 mov	 esi, eax
  03273	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03276	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  0327b	8b c8		 mov	 ecx, eax
  0327d	8b c6		 mov	 eax, esi
  0327f	99		 cdq
  03280	f7 f9		 idiv	 ecx
  03282	89 55 d8	 mov	 DWORD PTR _DropItemNum$[ebp], edx

; 1356 : 		dur = 0;

  03285	d9 ee		 fldz
  03287	d9 5d f8	 fstp	 DWORD PTR _dur$[ebp]

; 1357 : 
; 1358 : 		if ( cX == 0 && cY == 0 )

  0328a	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  0328e	85 c0		 test	 eax, eax
  03290	75 24		 jne	 SHORT $LN10@DropRaklio
  03292	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  03296	85 c0		 test	 eax, eax
  03298	75 1c		 jne	 SHORT $LN10@DropRaklio

; 1359 : 		{
; 1360 : 			x = lpObj->X;

  0329a	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0329d	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  032a4	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 1361 : 			y = lpObj->Y;

  032a7	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  032aa	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  032b1	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 1362 : 		}
; 1363 : 		else

  032b4	eb 0e		 jmp	 SHORT $LN9@DropRaklio
$LN10@DropRaklio:

; 1364 : 		{
; 1365 : 			x = cX;

  032b6	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  032ba	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 1366 : 			y = cY;

  032bd	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  032c1	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax
$LN9@DropRaklio:

; 1367 : 		}
; 1368 : 
; 1369 : 		level = this->GetLevel(DropItemNum);

  032c4	8b 45 d8	 mov	 eax, DWORD PTR _DropItemNum$[ebp]
  032c7	50		 push	 eax
  032c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  032cb	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  032d0	0f b6 c8	 movzx	 ecx, al
  032d3	89 4d f0	 mov	 DWORD PTR _level$[ebp], ecx

; 1370 : 		type = ItemGetNumberMake(this->BagObject[DropItemNum].m_type, this->BagObject[DropItemNum].m_index);

  032d6	8b 45 d8	 mov	 eax, DWORD PTR _DropItemNum$[ebp]
  032d9	6b c0 09	 imul	 eax, 9
  032dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  032df	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  032e7	52		 push	 edx
  032e8	8b 45 d8	 mov	 eax, DWORD PTR _DropItemNum$[ebp]
  032eb	6b c0 09	 imul	 eax, 9
  032ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  032f1	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  032f9	52		 push	 edx
  032fa	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  032ff	83 c4 08	 add	 esp, 8
  03302	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax

; 1371 : 
; 1372 : 		if ( type == -1 )

  03305	83 7d f4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  03309	75 07		 jne	 SHORT $LN8@DropRaklio

; 1373 : 		{
; 1374 : 			return FALSE;

  0330b	33 c0		 xor	 eax, eax
  0330d	e9 74 01 00 00	 jmp	 $LN13@DropRaklio
$LN8@DropRaklio:

; 1375 : 		}
; 1376 : 
; 1377 : 		if ( this->BagObject[DropItemNum].m_isskill != 0 )

  03312	8b 45 d8	 mov	 eax, DWORD PTR _DropItemNum$[ebp]
  03315	6b c0 09	 imul	 eax, 9
  03318	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0331b	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  03323	85 d2		 test	 edx, edx
  03325	74 07		 je	 SHORT $LN7@DropRaklio

; 1378 : 		{
; 1379 : 			Option1 =1;

  03327	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN7@DropRaklio:

; 1380 : 		}
; 1381 : 
; 1382 : 		if ( this->BagObject[DropItemNum].m_isluck != 0 )

  0332e	8b 45 d8	 mov	 eax, DWORD PTR _DropItemNum$[ebp]
  03331	6b c0 09	 imul	 eax, 9
  03334	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03337	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  0333f	85 d2		 test	 edx, edx
  03341	74 23		 je	 SHORT $LN5@DropRaklio

; 1383 : 		{
; 1384 : 			Option2 = 0;

  03343	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1385 : 
; 1386 : 			if ( (rand()%2) == 0 )

  0334a	e8 00 00 00 00	 call	 _rand
  0334f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  03354	79 05		 jns	 SHORT $LN15@DropRaklio
  03356	48		 dec	 eax
  03357	83 c8 fe	 or	 eax, -2			; fffffffeH
  0335a	40		 inc	 eax
$LN15@DropRaklio:
  0335b	85 c0		 test	 eax, eax
  0335d	75 07		 jne	 SHORT $LN5@DropRaklio

; 1387 : 			{
; 1388 : 				Option2 = 1;

  0335f	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN5@DropRaklio:

; 1389 : 			}
; 1390 : 		}
; 1391 : 
; 1392 : 		if ( this->BagObject[DropItemNum].m_isoption != 0 )

  03366	8b 45 d8	 mov	 eax, DWORD PTR _DropItemNum$[ebp]
  03369	6b c0 09	 imul	 eax, 9
  0336c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0336f	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  03377	85 d2		 test	 edx, edx
  03379	74 2b		 je	 SHORT $LN2@DropRaklio

; 1393 : 		{
; 1394 : 			if ( rand()%5 < 1 )

  0337b	e8 00 00 00 00	 call	 _rand
  03380	99		 cdq
  03381	b9 05 00 00 00	 mov	 ecx, 5
  03386	f7 f9		 idiv	 ecx
  03388	83 fa 01	 cmp	 edx, 1
  0338b	7d 09		 jge	 SHORT $LN3@DropRaklio

; 1395 : 			{
; 1396 : 				Option3 = 3;

  0338d	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 1397 : 			}
; 1398 : 			else

  03394	eb 10		 jmp	 SHORT $LN2@DropRaklio
$LN3@DropRaklio:

; 1399 : 			{
; 1400 : 				Option3 = rand()%3;

  03396	e8 00 00 00 00	 call	 _rand
  0339b	99		 cdq
  0339c	b9 03 00 00 00	 mov	 ecx, 3
  033a1	f7 f9		 idiv	 ecx
  033a3	89 55 dc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN2@DropRaklio:

; 1401 : 			}
; 1402 : 		}
; 1403 : 
; 1404 : 		if ( this->BagObject[DropItemNum].m_isexitem != 0 )

  033a6	8b 45 d8	 mov	 eax, DWORD PTR _DropItemNum$[ebp]
  033a9	6b c0 09	 imul	 eax, 9
  033ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  033af	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  033b7	85 d2		 test	 edx, edx
  033b9	74 17		 je	 SHORT $LN1@DropRaklio

; 1405 : 		{
; 1406 : 			loc12 = NewOptionRand(0);

  033bb	6a 00		 push	 0
  033bd	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  033c2	83 c4 04	 add	 esp, 4
  033c5	0f b6 c0	 movzx	 eax, al
  033c8	89 45 d0	 mov	 DWORD PTR _loc12$[ebp], eax

; 1407 : 			//Option2 = 0;
; 1408 : 			Option1 = 1;

  033cb	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN1@DropRaklio:

; 1409 : 			//level = 0;
; 1410 : 		}
; 1411 : 
; 1412 : 		ItemSerialCreateSend(lpObj->m_Index, btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  033d2	6a 00		 push	 0
  033d4	0f b6 45 d0	 movzx	 eax, BYTE PTR _loc12$[ebp]
  033d8	50		 push	 eax
  033d9	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  033dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  033de	52		 push	 edx
  033df	0f b6 45 dc	 movzx	 eax, BYTE PTR _Option3$[ebp]
  033e3	50		 push	 eax
  033e4	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  033e8	51		 push	 ecx
  033e9	0f b6 55 e4	 movzx	 edx, BYTE PTR _Option1$[ebp]
  033ed	52		 push	 edx
  033ee	d9 45 f8	 fld	 DWORD PTR _dur$[ebp]
  033f1	d9 7d 8a	 fnstcw	 WORD PTR tv272[ebp]
  033f4	0f b7 45 8a	 movzx	 eax, WORD PTR tv272[ebp]
  033f8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  033fd	89 45 84	 mov	 DWORD PTR tv275[ebp], eax
  03400	d9 6d 84	 fldcw	 WORD PTR tv275[ebp]
  03403	db 5d 80	 fistp	 DWORD PTR tv277[ebp]
  03406	d9 6d 8a	 fldcw	 WORD PTR tv272[ebp]
  03409	0f b6 45 80	 movzx	 eax, BYTE PTR tv277[ebp]
  0340d	50		 push	 eax
  0340e	0f b6 4d f0	 movzx	 ecx, BYTE PTR _level$[ebp]
  03412	51		 push	 ecx
  03413	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  03416	52		 push	 edx
  03417	0f b6 45 e8	 movzx	 eax, BYTE PTR _y$[ebp]
  0341b	50		 push	 eax
  0341c	0f b6 4d ec	 movzx	 ecx, BYTE PTR _x$[ebp]
  03420	51		 push	 ecx
  03421	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  03425	52		 push	 edx
  03426	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03429	8b 08		 mov	 ecx, DWORD PTR [eax]
  0342b	51		 push	 ecx
  0342c	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  03431	83 c4 34	 add	 esp, 52			; 00000034H

; 1413 : 		LogAddTD("[ RAKLION ][ Reward ] Selupan Item Drop [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1414 : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  03434	8b 45 d0	 mov	 eax, DWORD PTR _loc12$[ebp]
  03437	50		 push	 eax
  03438	8b 4d dc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  0343b	51		 push	 ecx
  0343c	8b 55 e0	 mov	 edx, DWORD PTR _Option2$[ebp]
  0343f	52		 push	 edx
  03440	8b 45 e4	 mov	 eax, DWORD PTR _Option1$[ebp]
  03443	50		 push	 eax
  03444	8b 4d f0	 mov	 ecx, DWORD PTR _level$[ebp]
  03447	51		 push	 ecx
  03448	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  0344b	52		 push	 edx
  0344c	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  0344f	6b c0 70	 imul	 eax, 112		; 00000070H
  03452	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  03457	50		 push	 eax
  03458	8b 4d e8	 mov	 ecx, DWORD PTR _y$[ebp]
  0345b	51		 push	 ecx
  0345c	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  0345f	52		 push	 edx
  03460	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  03464	50		 push	 eax
  03465	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03468	83 c1 77	 add	 ecx, 119		; 00000077H
  0346b	51		 push	 ecx
  0346c	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0346f	83 c2 6c	 add	 edx, 108		; 0000006cH
  03472	52		 push	 edx
  03473	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@PANEKFLN@?$FL?5RAKLION?5?$FN?$FL?5Reward?5?$FN?5Selupan?5It@
  03478	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0347e	83 c4 34	 add	 esp, 52			; 00000034H
$LN11@DropRaklio:

; 1415 : 
; 1416 : 	}
; 1417 : 	return TRUE;

  03481	b8 01 00 00 00	 mov	 eax, 1
$LN13@DropRaklio:

; 1418 : }

  03486	5f		 pop	 edi
  03487	5e		 pop	 esi
  03488	5b		 pop	 ebx
  03489	8b e5		 mov	 esp, ebp
  0348b	5d		 pop	 ebp
  0348c	c2 10 00	 ret	 16			; 00000010H
?DropRaklionSelupanMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropRaklionSelupanMonsterReward
_TEXT	ENDS
PUBLIC	??_C@_0GG@FDCABAPE@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@ ; `string'
PUBLIC	__real@41200000
PUBLIC	__real@42480000
PUBLIC	??_C@_0CP@FGAKJFJF@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@ ; `string'
PUBLIC	?DropGoldenBoxItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropGoldenBoxItem
;	COMDAT ??_C@_0GG@FDCABAPE@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0GG@FDCABAPE@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@ DB '[T'
	DB	'EMP_LOG] DropGoldenBoxItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d'
	DB	' Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT ??_C@_0CP@FGAKJFJF@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0CP@FGAKJFJF@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@ DB '[T'
	DB	'EMP_LOG] DropGoldenBoxItem [%s][%s] [%d Zen]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv337 = -136						; size = 4
tv335 = -132						; size = 4
tv332 = -126						; size = 2
_iDropItemNum$ = -60					; size = 4
_iDropItemRate$ = -56					; size = 4
_lpObj$ = -52						; size = 4
_iExOption$ = -48					; size = 4
_nRateCnt$ = -44					; size = 4
_nDropItemRate$ = -40					; size = 4
_iOption3$ = -36					; size = 4
_iOption2$ = -32					; size = 4
_iOption1$ = -28					; size = 4
_Y$ = -24						; size = 4
_X$ = -20						; size = 4
_iLevel$ = -16						; size = 4
_iType$ = -12						; size = 4
_fDur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropGoldenBoxItem@CProbabilityItemBag@@QAEHHEEE@Z PROC	; CProbabilityItemBag::DropGoldenBoxItem
; _this$ = ecx

; 1421 : { 

  03490	55		 push	 ebp
  03491	8b ec		 mov	 ebp, esp
  03493	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  03499	53		 push	 ebx
  0349a	56		 push	 esi
  0349b	57		 push	 edi
  0349c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1422 : 	if( !this->m_bLoad )

  0349f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  034a2	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  034a6	75 07		 jne	 SHORT $LN24@DropGolden

; 1423 : 	{
; 1424 : 		return false;

  034a8	33 c0		 xor	 eax, eax
  034aa	e9 b2 03 00 00	 jmp	 $LN25@DropGolden
$LN24@DropGolden:

; 1425 : 	}
; 1426 : 	// ----
; 1427 : 	float fDur			= 0;

  034af	d9 ee		 fldz
  034b1	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]

; 1428 : 	int iType			= 0;

  034b4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iType$[ebp], 0

; 1429 : 	int iLevel			= 0;

  034bb	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0

; 1430 : 	int X				= 0;

  034c2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _X$[ebp], 0

; 1431 : 	int Y				= 0;

  034c9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Y$[ebp], 0

; 1432 : 	int iOption1		= 0;

  034d0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 1433 : 	int iOption2		= 0;

  034d7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1434 : 	int iOption3		= 0;

  034de	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 1435 : 	int nDropItemRate	= 0;

  034e5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nDropItemRate$[ebp], 0

; 1436 : 	int nRateCnt		= 0;

  034ec	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _nRateCnt$[ebp], 0

; 1437 : 	int iExOption		= 0;

  034f3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _iExOption$[ebp], 0

; 1438 : 	// ----
; 1439 : 	LPOBJ lpObj		= &gObj[aIndex];

  034fa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  034fd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03503	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03509	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1440 : 	// ----
; 1441 : 	if( this->GetBagCount() <= 0 )

  0350c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0350f	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  03514	85 c0		 test	 eax, eax
  03516	7f 0a		 jg	 SHORT $LN23@DropGolden

; 1442 : 	{
; 1443 : 		return true;

  03518	b8 01 00 00 00	 mov	 eax, 1
  0351d	e9 3f 03 00 00	 jmp	 $LN25@DropGolden
$LN23@DropGolden:

; 1444 : 	}
; 1445 : 	// ----
; 1446 : 	int iDropItemRate = rand() % 10000;

  03522	e8 00 00 00 00	 call	 _rand
  03527	99		 cdq
  03528	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0352d	f7 f9		 idiv	 ecx
  0352f	89 55 c8	 mov	 DWORD PTR _iDropItemRate$[ebp], edx

; 1447 : 	// ----
; 1448 : 	if ( !this->m_iRateKindCount || iDropItemRate < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1] )

  03532	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03535	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  0353c	74 1d		 je	 SHORT $LN21@DropGolden
  0353e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03541	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  03547	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0354a	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  0354f	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  03556	39 45 c8	 cmp	 DWORD PTR _iDropItemRate$[ebp], eax
  03559	7d 5f		 jge	 SHORT $LN22@DropGolden
$LN21@DropGolden:

; 1449 : 	{
; 1450 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  0355b	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  0355f	50		 push	 eax
  03560	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  03564	51		 push	 ecx
  03565	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03568	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  0356e	50		 push	 eax
  0356f	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03572	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  03579	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  0357f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  03585	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1451 : 		LogAddTD("[TEMP_LOG] DropGoldenBoxItem [%s][%s] [%d Zen]",
; 1452 : 			lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  0358a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0358d	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  03593	51		 push	 ecx
  03594	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03597	83 c2 77	 add	 edx, 119		; 00000077H
  0359a	52		 push	 edx
  0359b	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0359e	83 c0 6c	 add	 eax, 108		; 0000006cH
  035a1	50		 push	 eax
  035a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FGAKJFJF@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@
  035a7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  035ad	83 c4 10	 add	 esp, 16			; 00000010H

; 1453 : 		// ----
; 1454 : 		return true;

  035b0	b8 01 00 00 00	 mov	 eax, 1
  035b5	e9 a7 02 00 00	 jmp	 $LN25@DropGolden
$LN22@DropGolden:

; 1455 : 	}
; 1456 : 	// ----
; 1457 : 	int iDropItemNum = rand() % this->GetBagCount();	// this->GetDropItemNumber(iDropItemRate);

  035ba	e8 00 00 00 00	 call	 _rand
  035bf	8b f0		 mov	 esi, eax
  035c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  035c4	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  035c9	8b c8		 mov	 ecx, eax
  035cb	8b c6		 mov	 eax, esi
  035cd	99		 cdq
  035ce	f7 f9		 idiv	 ecx
  035d0	89 55 c4	 mov	 DWORD PTR _iDropItemNum$[ebp], edx

; 1458 : 	// ----
; 1459 : 	if( cX || cY )

  035d3	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  035d7	85 c0		 test	 eax, eax
  035d9	75 08		 jne	 SHORT $LN19@DropGolden
  035db	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  035df	85 c0		 test	 eax, eax
  035e1	74 10		 je	 SHORT $LN20@DropGolden
$LN19@DropGolden:

; 1460 : 	{
; 1461 : 		X = cX;

  035e3	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  035e7	89 45 ec	 mov	 DWORD PTR _X$[ebp], eax

; 1462 : 		Y = cY;

  035ea	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  035ee	89 45 e8	 mov	 DWORD PTR _Y$[ebp], eax

; 1463 : 	}
; 1464 : 	else

  035f1	eb 1a		 jmp	 SHORT $LN18@DropGolden
$LN20@DropGolden:

; 1465 : 	{
; 1466 : 		X = lpObj->X;

  035f3	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  035f6	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  035fd	89 4d ec	 mov	 DWORD PTR _X$[ebp], ecx

; 1467 : 		Y = lpObj->Y;

  03600	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03603	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0360a	89 4d e8	 mov	 DWORD PTR _Y$[ebp], ecx
$LN18@DropGolden:

; 1468 : 	}
; 1469 : 	// ----
; 1470 : 	iLevel	= this->GetLevel(iDropItemNum);

  0360d	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03610	50		 push	 eax
  03611	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03614	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  03619	0f b6 c8	 movzx	 ecx, al
  0361c	89 4d f0	 mov	 DWORD PTR _iLevel$[ebp], ecx

; 1471 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  0361f	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03622	6b c0 09	 imul	 eax, 9
  03625	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03628	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  03630	52		 push	 edx
  03631	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03634	6b c0 09	 imul	 eax, 9
  03637	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0363a	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  03642	52		 push	 edx
  03643	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  03648	83 c4 08	 add	 esp, 8
  0364b	89 45 f4	 mov	 DWORD PTR _iType$[ebp], eax

; 1472 : 	// ----
; 1473 : 	if( iType == -1 )

  0364e	83 7d f4 ff	 cmp	 DWORD PTR _iType$[ebp], -1
  03652	75 07		 jne	 SHORT $LN17@DropGolden

; 1474 : 	{
; 1475 : 		return false;

  03654	33 c0		 xor	 eax, eax
  03656	e9 06 02 00 00	 jmp	 $LN25@DropGolden
$LN17@DropGolden:

; 1476 : 	}
; 1477 : 	// ----
; 1478 : 	if( this->BagObject[iDropItemNum].m_isskill )

  0365b	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  0365e	6b c0 09	 imul	 eax, 9
  03661	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03664	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  0366c	85 d2		 test	 edx, edx
  0366e	74 07		 je	 SHORT $LN16@DropGolden

; 1479 : 	{
; 1480 : 		iOption1 = true;

  03670	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN16@DropGolden:

; 1481 : 	}
; 1482 : 	// -----
; 1483 : 	if( this->BagObject[iDropItemNum].m_isluck )

  03677	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  0367a	6b c0 09	 imul	 eax, 9
  0367d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03680	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  03688	85 d2		 test	 edx, edx
  0368a	74 23		 je	 SHORT $LN14@DropGolden

; 1484 : 	{
; 1485 : 		iOption2 = 0;

  0368c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1486 : 		// ----
; 1487 : 		if( !(rand() % 2) )

  03693	e8 00 00 00 00	 call	 _rand
  03698	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0369d	79 05		 jns	 SHORT $LN27@DropGolden
  0369f	48		 dec	 eax
  036a0	83 c8 fe	 or	 eax, -2			; fffffffeH
  036a3	40		 inc	 eax
$LN27@DropGolden:
  036a4	85 c0		 test	 eax, eax
  036a6	75 07		 jne	 SHORT $LN14@DropGolden

; 1488 : 		{
; 1489 : 			iOption2 = true;

  036a8	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN14@DropGolden:

; 1490 : 		}
; 1491 : 	}
; 1492 : 	// ----
; 1493 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  036af	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  036b2	6b c0 09	 imul	 eax, 9
  036b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  036b8	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  036c0	83 fa 01	 cmp	 edx, 1
  036c3	75 2b		 jne	 SHORT $LN11@DropGolden

; 1494 : 	{
; 1495 : 		if( rand() % 5 >= 1 )

  036c5	e8 00 00 00 00	 call	 _rand
  036ca	99		 cdq
  036cb	b9 05 00 00 00	 mov	 ecx, 5
  036d0	f7 f9		 idiv	 ecx
  036d2	83 fa 01	 cmp	 edx, 1
  036d5	7c 12		 jl	 SHORT $LN12@DropGolden

; 1496 : 		{
; 1497 : 			iOption3 = rand() % 3;

  036d7	e8 00 00 00 00	 call	 _rand
  036dc	99		 cdq
  036dd	b9 03 00 00 00	 mov	 ecx, 3
  036e2	f7 f9		 idiv	 ecx
  036e4	89 55 dc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 1498 : 		}
; 1499 : 		else

  036e7	eb 07		 jmp	 SHORT $LN11@DropGolden
$LN12@DropGolden:

; 1500 : 		{
; 1501 : 			iOption3 = 3;

  036e9	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN11@DropGolden:

; 1502 : 		}
; 1503 : 	}
; 1504 : 	// ----
; 1505 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  036f0	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  036f3	6b c0 09	 imul	 eax, 9
  036f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  036f9	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  03701	85 d2		 test	 edx, edx
  03703	74 10		 je	 SHORT $LN10@DropGolden

; 1506 : 	{
; 1507 : 		iExOption	= NewOptionRand(0);

  03705	6a 00		 push	 0
  03707	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  0370c	83 c4 04	 add	 esp, 4
  0370f	0f b6 c0	 movzx	 eax, al
  03712	89 45 d0	 mov	 DWORD PTR _iExOption$[ebp], eax
$LN10@DropGolden:

; 1508 : 		//iOption2	= false;
; 1509 : 		//iOption1	= true;
; 1510 : 		//iLevel		= 0;
; 1511 : 	}
; 1512 : 	// ----
; 1513 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  03715	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _iType$[ebp], 6159 ; 0000180fH
  0371c	74 12		 je	 SHORT $LN8@DropGolden
  0371e	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7181 ; 00001c0dH
  03725	74 09		 je	 SHORT $LN8@DropGolden
  03727	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7182 ; 00001c0eH
  0372e	75 1c		 jne	 SHORT $LN9@DropGolden
$LN8@DropGolden:

; 1514 : 	{
; 1515 : 		iOption1	= false;

  03730	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 1516 : 		iOption2	= false;

  03737	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1517 : 		iOption3	= 0;

  0373e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 1518 : 		iLevel		= 0;

  03745	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0
$LN9@DropGolden:

; 1519 : 	}
; 1520 : 	// ----
; 1521 : 	if( iType == 7238 || iType == 7239 )

  0374c	81 7d f4 46 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7238 ; 00001c46H
  03753	74 09		 je	 SHORT $LN6@DropGolden
  03755	81 7d f4 47 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7239 ; 00001c47H
  0375c	75 0b		 jne	 SHORT $LN7@DropGolden
$LN6@DropGolden:

; 1522 : 	{
; 1523 : 		fDur = 50.0;

  0375e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42480000
  03764	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  03767	eb 38		 jmp	 SHORT $LN1@DropGolden
$LN7@DropGolden:

; 1524 : 	}
; 1525 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  03769	81 7d f4 55 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7253 ; 00001c55H
  03770	74 12		 je	 SHORT $LN3@DropGolden
  03772	81 7d f4 56 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7254 ; 00001c56H
  03779	74 09		 je	 SHORT $LN3@DropGolden
  0377b	81 7d f4 57 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7255 ; 00001c57H
  03782	75 0b		 jne	 SHORT $LN4@DropGolden
$LN3@DropGolden:

; 1526 : 	{
; 1527 : 		fDur = 10.0;

  03784	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  0378a	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  0378d	eb 12		 jmp	 SHORT $LN1@DropGolden
$LN4@DropGolden:

; 1528 : 	}
; 1529 : 	else if( iType == 7221 )

  0378f	81 7d f4 35 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7221 ; 00001c35H
  03796	75 09		 jne	 SHORT $LN1@DropGolden

; 1530 : 	{
; 1531 : 		fDur = 10.0;

  03798	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  0379e	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropGolden:

; 1532 : 	}
; 1533 : 	// ----
; 1534 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  037a1	6a 00		 push	 0
  037a3	0f b6 45 d0	 movzx	 eax, BYTE PTR _iExOption$[ebp]
  037a7	50		 push	 eax
  037a8	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  037ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  037ad	52		 push	 edx
  037ae	0f b6 45 dc	 movzx	 eax, BYTE PTR _iOption3$[ebp]
  037b2	50		 push	 eax
  037b3	0f b6 4d e0	 movzx	 ecx, BYTE PTR _iOption2$[ebp]
  037b7	51		 push	 ecx
  037b8	0f b6 55 e4	 movzx	 edx, BYTE PTR _iOption1$[ebp]
  037bc	52		 push	 edx
  037bd	d9 45 f8	 fld	 DWORD PTR _fDur$[ebp]
  037c0	d9 7d 82	 fnstcw	 WORD PTR tv332[ebp]
  037c3	0f b7 45 82	 movzx	 eax, WORD PTR tv332[ebp]
  037c7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  037cc	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv335[ebp], eax
  037d2	d9 ad 7c ff ff
	ff		 fldcw	 WORD PTR tv335[ebp]
  037d8	db 9d 78 ff ff
	ff		 fistp	 DWORD PTR tv337[ebp]
  037de	d9 6d 82	 fldcw	 WORD PTR tv332[ebp]
  037e1	0f b6 85 78 ff
	ff ff		 movzx	 eax, BYTE PTR tv337[ebp]
  037e8	50		 push	 eax
  037e9	0f b6 4d f0	 movzx	 ecx, BYTE PTR _iLevel$[ebp]
  037ed	51		 push	 ecx
  037ee	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  037f1	52		 push	 edx
  037f2	0f b6 45 e8	 movzx	 eax, BYTE PTR _Y$[ebp]
  037f6	50		 push	 eax
  037f7	0f b6 4d ec	 movzx	 ecx, BYTE PTR _X$[ebp]
  037fb	51		 push	 ecx
  037fc	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  03800	52		 push	 edx
  03801	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03804	8b 08		 mov	 ecx, DWORD PTR [eax]
  03806	51		 push	 ecx
  03807	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  0380c	83 c4 34	 add	 esp, 52			; 00000034H

; 1535 : 	LogAddTD("[TEMP_LOG] DropGoldenBoxItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1536 : 		lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  0380f	8b 45 d0	 mov	 eax, DWORD PTR _iExOption$[ebp]
  03812	50		 push	 eax
  03813	8b 4d dc	 mov	 ecx, DWORD PTR _iOption3$[ebp]
  03816	51		 push	 ecx
  03817	8b 55 e0	 mov	 edx, DWORD PTR _iOption2$[ebp]
  0381a	52		 push	 edx
  0381b	8b 45 e4	 mov	 eax, DWORD PTR _iOption1$[ebp]
  0381e	50		 push	 eax
  0381f	8b 4d f0	 mov	 ecx, DWORD PTR _iLevel$[ebp]
  03822	51		 push	 ecx
  03823	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  03826	52		 push	 edx
  03827	8b 45 f4	 mov	 eax, DWORD PTR _iType$[ebp]
  0382a	6b c0 70	 imul	 eax, 112		; 00000070H
  0382d	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  03832	50		 push	 eax
  03833	8b 4d e8	 mov	 ecx, DWORD PTR _Y$[ebp]
  03836	51		 push	 ecx
  03837	8b 55 ec	 mov	 edx, DWORD PTR _X$[ebp]
  0383a	52		 push	 edx
  0383b	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  0383f	50		 push	 eax
  03840	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03843	83 c1 77	 add	 ecx, 119		; 00000077H
  03846	51		 push	 ecx
  03847	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0384a	83 c2 6c	 add	 edx, 108		; 0000006cH
  0384d	52		 push	 edx
  0384e	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@FDCABAPE@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@
  03853	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  03859	83 c4 34	 add	 esp, 52			; 00000034H

; 1537 : 	// ----
; 1538 : 	return true;

  0385c	b8 01 00 00 00	 mov	 eax, 1
$LN25@DropGolden:

; 1539 : }

  03861	5f		 pop	 edi
  03862	5e		 pop	 esi
  03863	5b		 pop	 ebx
  03864	8b e5		 mov	 esp, ebp
  03866	5d		 pop	 ebp
  03867	c2 10 00	 ret	 16			; 00000010H
?DropGoldenBoxItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP	; CProbabilityItemBag::DropGoldenBoxItem
_TEXT	ENDS
PUBLIC	??_C@_0GG@OFNAEEBO@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@40a00000
PUBLIC	??_C@_0CP@KBPJLKGH@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@ ; `string'
PUBLIC	?DropSilverBoxItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropSilverBoxItem
;	COMDAT ??_C@_0GG@OFNAEEBO@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0GG@OFNAEEBO@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@ DB '[T'
	DB	'EMP_LOG] DropSilverBoxItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d'
	DB	' Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT ??_C@_0CP@KBPJLKGH@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0CP@KBPJLKGH@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@ DB '[T'
	DB	'EMP_LOG] DropSilverBoxItem [%s][%s] [%d Zen]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv337 = -136						; size = 4
tv335 = -132						; size = 4
tv332 = -126						; size = 2
_iDropItemNum$ = -60					; size = 4
_iDropItemRate$ = -56					; size = 4
_lpObj$ = -52						; size = 4
_iExOption$ = -48					; size = 4
_nRateCnt$ = -44					; size = 4
_nDropItemRate$ = -40					; size = 4
_iOption3$ = -36					; size = 4
_iOption2$ = -32					; size = 4
_iOption1$ = -28					; size = 4
_Y$ = -24						; size = 4
_X$ = -20						; size = 4
_iLevel$ = -16						; size = 4
_iType$ = -12						; size = 4
_fDur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropSilverBoxItem@CProbabilityItemBag@@QAEHHEEE@Z PROC	; CProbabilityItemBag::DropSilverBoxItem
; _this$ = ecx

; 1544 : { 

  03870	55		 push	 ebp
  03871	8b ec		 mov	 ebp, esp
  03873	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  03879	53		 push	 ebx
  0387a	56		 push	 esi
  0387b	57		 push	 edi
  0387c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1545 : 	if( !this->m_bLoad )

  0387f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03882	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  03886	75 07		 jne	 SHORT $LN24@DropSilver

; 1546 : 	{
; 1547 : 		return false;

  03888	33 c0		 xor	 eax, eax
  0388a	e9 ae 03 00 00	 jmp	 $LN25@DropSilver
$LN24@DropSilver:

; 1548 : 	}
; 1549 : 	// ----
; 1550 : 	float fDur			= 0.0;

  0388f	d9 ee		 fldz
  03891	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]

; 1551 : 	int iType			= 0;

  03894	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iType$[ebp], 0

; 1552 : 	int iLevel			= 0;

  0389b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0

; 1553 : 	int X				= 0;

  038a2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _X$[ebp], 0

; 1554 : 	int Y				= 0;

  038a9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Y$[ebp], 0

; 1555 : 	int iOption1		= 0;

  038b0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 1556 : 	int iOption2		= 0;

  038b7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1557 : 	int iOption3		= 0;

  038be	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 1558 : 	int nDropItemRate	= 0;

  038c5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nDropItemRate$[ebp], 0

; 1559 : 	int nRateCnt		= 0;

  038cc	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _nRateCnt$[ebp], 0

; 1560 : 	int iExOption		= 0;

  038d3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _iExOption$[ebp], 0

; 1561 : 	// ----
; 1562 : 	LPOBJ lpObj		= &gObj[aIndex];

  038da	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  038dd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  038e3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  038e9	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1563 : 	// ----
; 1564 : 	if( this->GetBagCount() <= 0 )

  038ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  038ef	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  038f4	85 c0		 test	 eax, eax
  038f6	7f 0a		 jg	 SHORT $LN23@DropSilver

; 1565 : 	{
; 1566 : 		return true;

  038f8	b8 01 00 00 00	 mov	 eax, 1
  038fd	e9 3b 03 00 00	 jmp	 $LN25@DropSilver
$LN23@DropSilver:

; 1567 : 	}
; 1568 : 	// ----
; 1569 : 	int iDropItemRate = rand() % 10000;

  03902	e8 00 00 00 00	 call	 _rand
  03907	99		 cdq
  03908	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0390d	f7 f9		 idiv	 ecx
  0390f	89 55 c8	 mov	 DWORD PTR _iDropItemRate$[ebp], edx

; 1570 : 	// ----
; 1571 : 	if ( !this->m_iRateKindCount || iDropItemRate < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1] )

  03912	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03915	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  0391c	74 1d		 je	 SHORT $LN21@DropSilver
  0391e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03921	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  03927	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0392a	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  0392f	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  03936	39 45 c8	 cmp	 DWORD PTR _iDropItemRate$[ebp], eax
  03939	7d 5f		 jge	 SHORT $LN22@DropSilver
$LN21@DropSilver:

; 1572 : 	{
; 1573 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  0393b	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  0393f	50		 push	 eax
  03940	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  03944	51		 push	 ecx
  03945	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03948	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  0394e	50		 push	 eax
  0394f	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03952	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  03959	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  0395f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  03965	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1574 : 		LogAddTD("[TEMP_LOG] DropSilverBoxItem [%s][%s] [%d Zen]",
; 1575 : 			lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  0396a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0396d	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  03973	51		 push	 ecx
  03974	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03977	83 c2 77	 add	 edx, 119		; 00000077H
  0397a	52		 push	 edx
  0397b	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0397e	83 c0 6c	 add	 eax, 108		; 0000006cH
  03981	50		 push	 eax
  03982	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@KBPJLKGH@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@
  03987	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0398d	83 c4 10	 add	 esp, 16			; 00000010H

; 1576 : 		// ----
; 1577 : 		return true;

  03990	b8 01 00 00 00	 mov	 eax, 1
  03995	e9 a3 02 00 00	 jmp	 $LN25@DropSilver
$LN22@DropSilver:

; 1578 : 	}
; 1579 : 	// ----
; 1580 : 	int iDropItemNum = rand() % this->GetBagCount();// this->GetDropItemNumber(iDropItemRate);

  0399a	e8 00 00 00 00	 call	 _rand
  0399f	8b f0		 mov	 esi, eax
  039a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  039a4	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  039a9	8b c8		 mov	 ecx, eax
  039ab	8b c6		 mov	 eax, esi
  039ad	99		 cdq
  039ae	f7 f9		 idiv	 ecx
  039b0	89 55 c4	 mov	 DWORD PTR _iDropItemNum$[ebp], edx

; 1581 : 	// ----
; 1582 : 	if( cX || cY )

  039b3	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  039b7	85 c0		 test	 eax, eax
  039b9	75 08		 jne	 SHORT $LN19@DropSilver
  039bb	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  039bf	85 c0		 test	 eax, eax
  039c1	74 10		 je	 SHORT $LN20@DropSilver
$LN19@DropSilver:

; 1583 : 	{
; 1584 : 		X = cX;

  039c3	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  039c7	89 45 ec	 mov	 DWORD PTR _X$[ebp], eax

; 1585 : 		Y = cY;

  039ca	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  039ce	89 45 e8	 mov	 DWORD PTR _Y$[ebp], eax

; 1586 : 	}
; 1587 : 	else

  039d1	eb 1a		 jmp	 SHORT $LN18@DropSilver
$LN20@DropSilver:

; 1588 : 	{
; 1589 : 		X = lpObj->X;

  039d3	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  039d6	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  039dd	89 4d ec	 mov	 DWORD PTR _X$[ebp], ecx

; 1590 : 		Y = lpObj->Y;

  039e0	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  039e3	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  039ea	89 4d e8	 mov	 DWORD PTR _Y$[ebp], ecx
$LN18@DropSilver:

; 1591 : 	}
; 1592 : 	// ----
; 1593 : 	iLevel	= this->GetLevel(iDropItemNum);

  039ed	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  039f0	50		 push	 eax
  039f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  039f4	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  039f9	0f b6 c8	 movzx	 ecx, al
  039fc	89 4d f0	 mov	 DWORD PTR _iLevel$[ebp], ecx

; 1594 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  039ff	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03a02	6b c0 09	 imul	 eax, 9
  03a05	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a08	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  03a10	52		 push	 edx
  03a11	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03a14	6b c0 09	 imul	 eax, 9
  03a17	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a1a	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  03a22	52		 push	 edx
  03a23	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  03a28	83 c4 08	 add	 esp, 8
  03a2b	89 45 f4	 mov	 DWORD PTR _iType$[ebp], eax

; 1595 : 	// ----
; 1596 : 	if( iType == -1 )

  03a2e	83 7d f4 ff	 cmp	 DWORD PTR _iType$[ebp], -1
  03a32	75 07		 jne	 SHORT $LN17@DropSilver

; 1597 : 	{
; 1598 : 		return false;

  03a34	33 c0		 xor	 eax, eax
  03a36	e9 02 02 00 00	 jmp	 $LN25@DropSilver
$LN17@DropSilver:

; 1599 : 	}
; 1600 : 	// ----
; 1601 : 	if( this->BagObject[iDropItemNum].m_isskill )

  03a3b	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03a3e	6b c0 09	 imul	 eax, 9
  03a41	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a44	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  03a4c	85 d2		 test	 edx, edx
  03a4e	74 07		 je	 SHORT $LN16@DropSilver

; 1602 : 	{
; 1603 : 		iOption1 = true;

  03a50	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN16@DropSilver:

; 1604 : 	}
; 1605 : 	// -----
; 1606 : 	if( this->BagObject[iDropItemNum].m_isluck )

  03a57	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03a5a	6b c0 09	 imul	 eax, 9
  03a5d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a60	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  03a68	85 d2		 test	 edx, edx
  03a6a	74 23		 je	 SHORT $LN14@DropSilver

; 1607 : 	{
; 1608 : 		iOption2 = 0;

  03a6c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1609 : 		// ----
; 1610 : 		if( !(rand() % 2) )

  03a73	e8 00 00 00 00	 call	 _rand
  03a78	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  03a7d	79 05		 jns	 SHORT $LN27@DropSilver
  03a7f	48		 dec	 eax
  03a80	83 c8 fe	 or	 eax, -2			; fffffffeH
  03a83	40		 inc	 eax
$LN27@DropSilver:
  03a84	85 c0		 test	 eax, eax
  03a86	75 07		 jne	 SHORT $LN14@DropSilver

; 1611 : 		{
; 1612 : 			iOption2 = true;

  03a88	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN14@DropSilver:

; 1613 : 		}
; 1614 : 	}
; 1615 : 	// ----
; 1616 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  03a8f	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03a92	6b c0 09	 imul	 eax, 9
  03a95	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a98	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  03aa0	83 fa 01	 cmp	 edx, 1
  03aa3	75 2b		 jne	 SHORT $LN11@DropSilver

; 1617 : 	{
; 1618 : 		if( rand() % 5 >= 1 )

  03aa5	e8 00 00 00 00	 call	 _rand
  03aaa	99		 cdq
  03aab	b9 05 00 00 00	 mov	 ecx, 5
  03ab0	f7 f9		 idiv	 ecx
  03ab2	83 fa 01	 cmp	 edx, 1
  03ab5	7c 12		 jl	 SHORT $LN12@DropSilver

; 1619 : 		{
; 1620 : 			iOption3 = rand() % 3;

  03ab7	e8 00 00 00 00	 call	 _rand
  03abc	99		 cdq
  03abd	b9 03 00 00 00	 mov	 ecx, 3
  03ac2	f7 f9		 idiv	 ecx
  03ac4	89 55 dc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 1621 : 		}
; 1622 : 		else

  03ac7	eb 07		 jmp	 SHORT $LN11@DropSilver
$LN12@DropSilver:

; 1623 : 		{
; 1624 : 			iOption3 = 3;

  03ac9	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN11@DropSilver:

; 1625 : 		}
; 1626 : 	}
; 1627 : 	// ----
; 1628 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  03ad0	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03ad3	6b c0 09	 imul	 eax, 9
  03ad6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03ad9	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  03ae1	85 d2		 test	 edx, edx
  03ae3	74 10		 je	 SHORT $LN10@DropSilver

; 1629 : 	{
; 1630 : 		iExOption	= NewOptionRand(0);

  03ae5	6a 00		 push	 0
  03ae7	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  03aec	83 c4 04	 add	 esp, 4
  03aef	0f b6 c0	 movzx	 eax, al
  03af2	89 45 d0	 mov	 DWORD PTR _iExOption$[ebp], eax
$LN10@DropSilver:

; 1631 : 		//iOption2	= false;
; 1632 : 		//iOption1	= true;
; 1633 : 		//iLevel		= 0;
; 1634 : 	}
; 1635 : 	// ----
; 1636 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  03af5	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _iType$[ebp], 6159 ; 0000180fH
  03afc	74 12		 je	 SHORT $LN8@DropSilver
  03afe	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7181 ; 00001c0dH
  03b05	74 09		 je	 SHORT $LN8@DropSilver
  03b07	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7182 ; 00001c0eH
  03b0e	75 1c		 jne	 SHORT $LN9@DropSilver
$LN8@DropSilver:

; 1637 : 	{
; 1638 : 		iOption1	= false;

  03b10	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 1639 : 		iOption2	= false;

  03b17	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1640 : 		iOption3	= 0;

  03b1e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 1641 : 		iLevel		= 0;

  03b25	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0
$LN9@DropSilver:

; 1642 : 	}
; 1643 : 	// ----
; 1644 : 	if( iType == 7238 || iType == 7239 )

  03b2c	81 7d f4 46 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7238 ; 00001c46H
  03b33	74 09		 je	 SHORT $LN6@DropSilver
  03b35	81 7d f4 47 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7239 ; 00001c47H
  03b3c	75 0b		 jne	 SHORT $LN7@DropSilver
$LN6@DropSilver:

; 1645 : 	{
; 1646 : 		fDur = 5.0;

  03b3e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40a00000
  03b44	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  03b47	eb 34		 jmp	 SHORT $LN1@DropSilver
$LN7@DropSilver:

; 1647 : 	}
; 1648 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  03b49	81 7d f4 55 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7253 ; 00001c55H
  03b50	74 12		 je	 SHORT $LN3@DropSilver
  03b52	81 7d f4 56 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7254 ; 00001c56H
  03b59	74 09		 je	 SHORT $LN3@DropSilver
  03b5b	81 7d f4 57 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7255 ; 00001c57H
  03b62	75 07		 jne	 SHORT $LN4@DropSilver
$LN3@DropSilver:

; 1649 : 	{
; 1650 : 		fDur = 1.0;

  03b64	d9 e8		 fld1
  03b66	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  03b69	eb 12		 jmp	 SHORT $LN1@DropSilver
$LN4@DropSilver:

; 1651 : 	}
; 1652 : 	else if( iType == 7221 )

  03b6b	81 7d f4 35 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7221 ; 00001c35H
  03b72	75 09		 jne	 SHORT $LN1@DropSilver

; 1653 : 	{
; 1654 : 		fDur = 10.0;

  03b74	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  03b7a	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropSilver:

; 1655 : 	}
; 1656 : 	// ----
; 1657 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  03b7d	6a 00		 push	 0
  03b7f	0f b6 45 d0	 movzx	 eax, BYTE PTR _iExOption$[ebp]
  03b83	50		 push	 eax
  03b84	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03b87	8b 11		 mov	 edx, DWORD PTR [ecx]
  03b89	52		 push	 edx
  03b8a	0f b6 45 dc	 movzx	 eax, BYTE PTR _iOption3$[ebp]
  03b8e	50		 push	 eax
  03b8f	0f b6 4d e0	 movzx	 ecx, BYTE PTR _iOption2$[ebp]
  03b93	51		 push	 ecx
  03b94	0f b6 55 e4	 movzx	 edx, BYTE PTR _iOption1$[ebp]
  03b98	52		 push	 edx
  03b99	d9 45 f8	 fld	 DWORD PTR _fDur$[ebp]
  03b9c	d9 7d 82	 fnstcw	 WORD PTR tv332[ebp]
  03b9f	0f b7 45 82	 movzx	 eax, WORD PTR tv332[ebp]
  03ba3	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  03ba8	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv335[ebp], eax
  03bae	d9 ad 7c ff ff
	ff		 fldcw	 WORD PTR tv335[ebp]
  03bb4	db 9d 78 ff ff
	ff		 fistp	 DWORD PTR tv337[ebp]
  03bba	d9 6d 82	 fldcw	 WORD PTR tv332[ebp]
  03bbd	0f b6 85 78 ff
	ff ff		 movzx	 eax, BYTE PTR tv337[ebp]
  03bc4	50		 push	 eax
  03bc5	0f b6 4d f0	 movzx	 ecx, BYTE PTR _iLevel$[ebp]
  03bc9	51		 push	 ecx
  03bca	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  03bcd	52		 push	 edx
  03bce	0f b6 45 e8	 movzx	 eax, BYTE PTR _Y$[ebp]
  03bd2	50		 push	 eax
  03bd3	0f b6 4d ec	 movzx	 ecx, BYTE PTR _X$[ebp]
  03bd7	51		 push	 ecx
  03bd8	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  03bdc	52		 push	 edx
  03bdd	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03be0	8b 08		 mov	 ecx, DWORD PTR [eax]
  03be2	51		 push	 ecx
  03be3	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  03be8	83 c4 34	 add	 esp, 52			; 00000034H

; 1658 : 	LogAddTD("[TEMP_LOG] DropSilverBoxItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1659 : 		lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  03beb	8b 45 d0	 mov	 eax, DWORD PTR _iExOption$[ebp]
  03bee	50		 push	 eax
  03bef	8b 4d dc	 mov	 ecx, DWORD PTR _iOption3$[ebp]
  03bf2	51		 push	 ecx
  03bf3	8b 55 e0	 mov	 edx, DWORD PTR _iOption2$[ebp]
  03bf6	52		 push	 edx
  03bf7	8b 45 e4	 mov	 eax, DWORD PTR _iOption1$[ebp]
  03bfa	50		 push	 eax
  03bfb	8b 4d f0	 mov	 ecx, DWORD PTR _iLevel$[ebp]
  03bfe	51		 push	 ecx
  03bff	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  03c02	52		 push	 edx
  03c03	8b 45 f4	 mov	 eax, DWORD PTR _iType$[ebp]
  03c06	6b c0 70	 imul	 eax, 112		; 00000070H
  03c09	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  03c0e	50		 push	 eax
  03c0f	8b 4d e8	 mov	 ecx, DWORD PTR _Y$[ebp]
  03c12	51		 push	 ecx
  03c13	8b 55 ec	 mov	 edx, DWORD PTR _X$[ebp]
  03c16	52		 push	 edx
  03c17	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  03c1b	50		 push	 eax
  03c1c	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03c1f	83 c1 77	 add	 ecx, 119		; 00000077H
  03c22	51		 push	 ecx
  03c23	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03c26	83 c2 6c	 add	 edx, 108		; 0000006cH
  03c29	52		 push	 edx
  03c2a	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@OFNAEEBO@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@
  03c2f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  03c35	83 c4 34	 add	 esp, 52			; 00000034H

; 1660 : 	// ----
; 1661 : 	return true;

  03c38	b8 01 00 00 00	 mov	 eax, 1
$LN25@DropSilver:

; 1662 : }

  03c3d	5f		 pop	 edi
  03c3e	5e		 pop	 esi
  03c3f	5b		 pop	 ebx
  03c40	8b e5		 mov	 esp, ebp
  03c42	5d		 pop	 ebp
  03c43	c2 10 00	 ret	 16			; 00000010H
?DropSilverBoxItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP	; CProbabilityItemBag::DropSilverBoxItem
_TEXT	ENDS
PUBLIC	??_C@_0GK@HNJFACKD@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@ ; `string'
PUBLIC	??_C@_0DD@PFOIKOLI@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@ ; `string'
PUBLIC	?DropJewelleryCaseItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropJewelleryCaseItem
;	COMDAT ??_C@_0GK@HNJFACKD@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@
CONST	SEGMENT
??_C@_0GK@HNJFACKD@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@ DB '[TEMP_LOG'
	DB	'] DropJewelleryCaseItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Le'
	DB	'vel:%d op1:%d op2:%d op3:%d ExOp:%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@PFOIKOLI@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@
CONST	SEGMENT
??_C@_0DD@PFOIKOLI@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@ DB '[TEMP_LOG'
	DB	'] DropJewelleryCaseItem [%s][%s] [%d Zen]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv337 = -136						; size = 4
tv335 = -132						; size = 4
tv332 = -126						; size = 2
_iDropItemNum$ = -60					; size = 4
_iDropItemRate$ = -56					; size = 4
_lpObj$ = -52						; size = 4
_iExOption$ = -48					; size = 4
_nRateCnt$ = -44					; size = 4
_nDropItemRate$ = -40					; size = 4
_iOption3$ = -36					; size = 4
_iOption2$ = -32					; size = 4
_iOption1$ = -28					; size = 4
_Y$ = -24						; size = 4
_X$ = -20						; size = 4
_iLevel$ = -16						; size = 4
_iType$ = -12						; size = 4
_fDur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropJewelleryCaseItem@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropJewelleryCaseItem
; _this$ = ecx

; 1667 : { 

  03c50	55		 push	 ebp
  03c51	8b ec		 mov	 ebp, esp
  03c53	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  03c59	53		 push	 ebx
  03c5a	56		 push	 esi
  03c5b	57		 push	 edi
  03c5c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 : 	if( !this->m_bLoad )

  03c5f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03c62	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  03c66	75 07		 jne	 SHORT $LN24@DropJewell

; 1669 : 	{
; 1670 : 		return false;

  03c68	33 c0		 xor	 eax, eax
  03c6a	e9 b2 03 00 00	 jmp	 $LN25@DropJewell
$LN24@DropJewell:

; 1671 : 	}
; 1672 : 	// ----
; 1673 : 	float fDur			= 0.0;

  03c6f	d9 ee		 fldz
  03c71	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]

; 1674 : 	int iType			= 0;

  03c74	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iType$[ebp], 0

; 1675 : 	int iLevel			= 0;

  03c7b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0

; 1676 : 	int X				= 0;

  03c82	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _X$[ebp], 0

; 1677 : 	int Y				= 0;

  03c89	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Y$[ebp], 0

; 1678 : 	int iOption1		= 0;

  03c90	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 1679 : 	int iOption2		= 0;

  03c97	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1680 : 	int iOption3		= 0;

  03c9e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 1681 : 	int nDropItemRate	= 0;

  03ca5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nDropItemRate$[ebp], 0

; 1682 : 	int nRateCnt		= 0;

  03cac	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _nRateCnt$[ebp], 0

; 1683 : 	int iExOption		= 0;

  03cb3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _iExOption$[ebp], 0

; 1684 : 	// ----
; 1685 : 	LPOBJ lpObj		= &gObj[aIndex];

  03cba	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03cbd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03cc3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03cc9	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1686 : 	// ----
; 1687 : 	if( this->GetBagCount() <= 0 )

  03ccc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03ccf	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  03cd4	85 c0		 test	 eax, eax
  03cd6	7f 0a		 jg	 SHORT $LN23@DropJewell

; 1688 : 	{
; 1689 : 		return true;

  03cd8	b8 01 00 00 00	 mov	 eax, 1
  03cdd	e9 3f 03 00 00	 jmp	 $LN25@DropJewell
$LN23@DropJewell:

; 1690 : 	}
; 1691 : 	// ----
; 1692 : 	int iDropItemRate = rand() % 10000;

  03ce2	e8 00 00 00 00	 call	 _rand
  03ce7	99		 cdq
  03ce8	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  03ced	f7 f9		 idiv	 ecx
  03cef	89 55 c8	 mov	 DWORD PTR _iDropItemRate$[ebp], edx

; 1693 : 	// ----
; 1694 : 	if ( !this->m_iRateKindCount || iDropItemRate < 10000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1] )

  03cf2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03cf5	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  03cfc	74 1d		 je	 SHORT $LN21@DropJewell
  03cfe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03d01	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  03d07	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03d0a	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  03d0f	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  03d16	39 45 c8	 cmp	 DWORD PTR _iDropItemRate$[ebp], eax
  03d19	7d 5f		 jge	 SHORT $LN22@DropJewell
$LN21@DropJewell:

; 1695 : 	{
; 1696 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  03d1b	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  03d1f	50		 push	 eax
  03d20	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  03d24	51		 push	 ecx
  03d25	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03d28	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  03d2e	50		 push	 eax
  03d2f	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03d32	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  03d39	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  03d3f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  03d45	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1697 : 		LogAddTD("[TEMP_LOG] DropJewelleryCaseItem [%s][%s] [%d Zen]",
; 1698 : 			lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  03d4a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03d4d	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  03d53	51		 push	 ecx
  03d54	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03d57	83 c2 77	 add	 edx, 119		; 00000077H
  03d5a	52		 push	 edx
  03d5b	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03d5e	83 c0 6c	 add	 eax, 108		; 0000006cH
  03d61	50		 push	 eax
  03d62	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PFOIKOLI@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@
  03d67	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  03d6d	83 c4 10	 add	 esp, 16			; 00000010H

; 1699 : 		// ----
; 1700 : 		return true;

  03d70	b8 01 00 00 00	 mov	 eax, 1
  03d75	e9 a7 02 00 00	 jmp	 $LN25@DropJewell
$LN22@DropJewell:

; 1701 : 	}
; 1702 : 	// ----
; 1703 : 	int iDropItemNum = rand() % this->GetBagCount();//; this->GetDropItemNumber(iDropItemRate);

  03d7a	e8 00 00 00 00	 call	 _rand
  03d7f	8b f0		 mov	 esi, eax
  03d81	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d84	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  03d89	8b c8		 mov	 ecx, eax
  03d8b	8b c6		 mov	 eax, esi
  03d8d	99		 cdq
  03d8e	f7 f9		 idiv	 ecx
  03d90	89 55 c4	 mov	 DWORD PTR _iDropItemNum$[ebp], edx

; 1704 : 	// ----
; 1705 : 	if( cX || cY )

  03d93	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  03d97	85 c0		 test	 eax, eax
  03d99	75 08		 jne	 SHORT $LN19@DropJewell
  03d9b	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  03d9f	85 c0		 test	 eax, eax
  03da1	74 10		 je	 SHORT $LN20@DropJewell
$LN19@DropJewell:

; 1706 : 	{
; 1707 : 		X = cX;

  03da3	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  03da7	89 45 ec	 mov	 DWORD PTR _X$[ebp], eax

; 1708 : 		Y = cY;

  03daa	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  03dae	89 45 e8	 mov	 DWORD PTR _Y$[ebp], eax

; 1709 : 	}
; 1710 : 	else

  03db1	eb 1a		 jmp	 SHORT $LN18@DropJewell
$LN20@DropJewell:

; 1711 : 	{
; 1712 : 		X = lpObj->X;

  03db3	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03db6	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  03dbd	89 4d ec	 mov	 DWORD PTR _X$[ebp], ecx

; 1713 : 		Y = lpObj->Y;

  03dc0	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03dc3	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  03dca	89 4d e8	 mov	 DWORD PTR _Y$[ebp], ecx
$LN18@DropJewell:

; 1714 : 	}
; 1715 : 	// ----
; 1716 : 	iLevel	= this->GetLevel(iDropItemNum);

  03dcd	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03dd0	50		 push	 eax
  03dd1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03dd4	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  03dd9	0f b6 c8	 movzx	 ecx, al
  03ddc	89 4d f0	 mov	 DWORD PTR _iLevel$[ebp], ecx

; 1717 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  03ddf	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03de2	6b c0 09	 imul	 eax, 9
  03de5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03de8	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  03df0	52		 push	 edx
  03df1	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03df4	6b c0 09	 imul	 eax, 9
  03df7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03dfa	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  03e02	52		 push	 edx
  03e03	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  03e08	83 c4 08	 add	 esp, 8
  03e0b	89 45 f4	 mov	 DWORD PTR _iType$[ebp], eax

; 1718 : 	// ----
; 1719 : 	if( iType == -1 )

  03e0e	83 7d f4 ff	 cmp	 DWORD PTR _iType$[ebp], -1
  03e12	75 07		 jne	 SHORT $LN17@DropJewell

; 1720 : 	{
; 1721 : 		return false;

  03e14	33 c0		 xor	 eax, eax
  03e16	e9 06 02 00 00	 jmp	 $LN25@DropJewell
$LN17@DropJewell:

; 1722 : 	}
; 1723 : 	// ----
; 1724 : 	if( this->BagObject[iDropItemNum].m_isskill )

  03e1b	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03e1e	6b c0 09	 imul	 eax, 9
  03e21	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e24	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  03e2c	85 d2		 test	 edx, edx
  03e2e	74 07		 je	 SHORT $LN16@DropJewell

; 1725 : 	{
; 1726 : 		iOption1 = true;

  03e30	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN16@DropJewell:

; 1727 : 	}
; 1728 : 	// -----
; 1729 : 	if( this->BagObject[iDropItemNum].m_isluck )

  03e37	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03e3a	6b c0 09	 imul	 eax, 9
  03e3d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e40	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  03e48	85 d2		 test	 edx, edx
  03e4a	74 23		 je	 SHORT $LN14@DropJewell

; 1730 : 	{
; 1731 : 		iOption2 = 0;

  03e4c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1732 : 		// ----
; 1733 : 		if( !(rand() % 2) )

  03e53	e8 00 00 00 00	 call	 _rand
  03e58	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  03e5d	79 05		 jns	 SHORT $LN27@DropJewell
  03e5f	48		 dec	 eax
  03e60	83 c8 fe	 or	 eax, -2			; fffffffeH
  03e63	40		 inc	 eax
$LN27@DropJewell:
  03e64	85 c0		 test	 eax, eax
  03e66	75 07		 jne	 SHORT $LN14@DropJewell

; 1734 : 		{
; 1735 : 			iOption2 = true;

  03e68	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN14@DropJewell:

; 1736 : 		}
; 1737 : 	}
; 1738 : 	// ----
; 1739 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  03e6f	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03e72	6b c0 09	 imul	 eax, 9
  03e75	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e78	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  03e80	83 fa 01	 cmp	 edx, 1
  03e83	75 2b		 jne	 SHORT $LN11@DropJewell

; 1740 : 	{
; 1741 : 		if( rand() % 5 >= 1 )

  03e85	e8 00 00 00 00	 call	 _rand
  03e8a	99		 cdq
  03e8b	b9 05 00 00 00	 mov	 ecx, 5
  03e90	f7 f9		 idiv	 ecx
  03e92	83 fa 01	 cmp	 edx, 1
  03e95	7c 12		 jl	 SHORT $LN12@DropJewell

; 1742 : 		{
; 1743 : 			iOption3 = rand() % 3;

  03e97	e8 00 00 00 00	 call	 _rand
  03e9c	99		 cdq
  03e9d	b9 03 00 00 00	 mov	 ecx, 3
  03ea2	f7 f9		 idiv	 ecx
  03ea4	89 55 dc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 1744 : 		}
; 1745 : 		else

  03ea7	eb 07		 jmp	 SHORT $LN11@DropJewell
$LN12@DropJewell:

; 1746 : 		{
; 1747 : 			iOption3 = 3;

  03ea9	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN11@DropJewell:

; 1748 : 		}
; 1749 : 	}
; 1750 : 	// ----
; 1751 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  03eb0	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  03eb3	6b c0 09	 imul	 eax, 9
  03eb6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03eb9	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  03ec1	85 d2		 test	 edx, edx
  03ec3	74 10		 je	 SHORT $LN10@DropJewell

; 1752 : 	{
; 1753 : 		iExOption	= NewOptionRand(0);

  03ec5	6a 00		 push	 0
  03ec7	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  03ecc	83 c4 04	 add	 esp, 4
  03ecf	0f b6 c0	 movzx	 eax, al
  03ed2	89 45 d0	 mov	 DWORD PTR _iExOption$[ebp], eax
$LN10@DropJewell:

; 1754 : 		//iOption2	= false;
; 1755 : 		//iOption1	= true;
; 1756 : 		//iLevel		= 0;
; 1757 : 	}
; 1758 : 	// ----
; 1759 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  03ed5	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _iType$[ebp], 6159 ; 0000180fH
  03edc	74 12		 je	 SHORT $LN8@DropJewell
  03ede	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7181 ; 00001c0dH
  03ee5	74 09		 je	 SHORT $LN8@DropJewell
  03ee7	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7182 ; 00001c0eH
  03eee	75 1c		 jne	 SHORT $LN9@DropJewell
$LN8@DropJewell:

; 1760 : 	{
; 1761 : 		iOption1	= false;

  03ef0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 1762 : 		iOption2	= false;

  03ef7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1763 : 		iOption3	= 0;

  03efe	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 1764 : 		iLevel		= 0;

  03f05	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0
$LN9@DropJewell:

; 1765 : 	}
; 1766 : 	// ----
; 1767 : 	if( iType == 7238 || iType == 7239 )

  03f0c	81 7d f4 46 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7238 ; 00001c46H
  03f13	74 09		 je	 SHORT $LN6@DropJewell
  03f15	81 7d f4 47 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7239 ; 00001c47H
  03f1c	75 0b		 jne	 SHORT $LN7@DropJewell
$LN6@DropJewell:

; 1768 : 	{
; 1769 : 		fDur = 50.0;

  03f1e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42480000
  03f24	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  03f27	eb 38		 jmp	 SHORT $LN1@DropJewell
$LN7@DropJewell:

; 1770 : 	}
; 1771 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  03f29	81 7d f4 55 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7253 ; 00001c55H
  03f30	74 12		 je	 SHORT $LN3@DropJewell
  03f32	81 7d f4 56 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7254 ; 00001c56H
  03f39	74 09		 je	 SHORT $LN3@DropJewell
  03f3b	81 7d f4 57 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7255 ; 00001c57H
  03f42	75 0b		 jne	 SHORT $LN4@DropJewell
$LN3@DropJewell:

; 1772 : 	{
; 1773 : 		fDur = 10.0;

  03f44	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  03f4a	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  03f4d	eb 12		 jmp	 SHORT $LN1@DropJewell
$LN4@DropJewell:

; 1774 : 	}
; 1775 : 	else if( iType == 7221 )

  03f4f	81 7d f4 35 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7221 ; 00001c35H
  03f56	75 09		 jne	 SHORT $LN1@DropJewell

; 1776 : 	{
; 1777 : 		fDur = 10.0;

  03f58	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  03f5e	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropJewell:

; 1778 : 	}
; 1779 : 	// ----
; 1780 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  03f61	6a 00		 push	 0
  03f63	0f b6 45 d0	 movzx	 eax, BYTE PTR _iExOption$[ebp]
  03f67	50		 push	 eax
  03f68	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03f6b	8b 11		 mov	 edx, DWORD PTR [ecx]
  03f6d	52		 push	 edx
  03f6e	0f b6 45 dc	 movzx	 eax, BYTE PTR _iOption3$[ebp]
  03f72	50		 push	 eax
  03f73	0f b6 4d e0	 movzx	 ecx, BYTE PTR _iOption2$[ebp]
  03f77	51		 push	 ecx
  03f78	0f b6 55 e4	 movzx	 edx, BYTE PTR _iOption1$[ebp]
  03f7c	52		 push	 edx
  03f7d	d9 45 f8	 fld	 DWORD PTR _fDur$[ebp]
  03f80	d9 7d 82	 fnstcw	 WORD PTR tv332[ebp]
  03f83	0f b7 45 82	 movzx	 eax, WORD PTR tv332[ebp]
  03f87	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  03f8c	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv335[ebp], eax
  03f92	d9 ad 7c ff ff
	ff		 fldcw	 WORD PTR tv335[ebp]
  03f98	db 9d 78 ff ff
	ff		 fistp	 DWORD PTR tv337[ebp]
  03f9e	d9 6d 82	 fldcw	 WORD PTR tv332[ebp]
  03fa1	0f b6 85 78 ff
	ff ff		 movzx	 eax, BYTE PTR tv337[ebp]
  03fa8	50		 push	 eax
  03fa9	0f b6 4d f0	 movzx	 ecx, BYTE PTR _iLevel$[ebp]
  03fad	51		 push	 ecx
  03fae	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  03fb1	52		 push	 edx
  03fb2	0f b6 45 e8	 movzx	 eax, BYTE PTR _Y$[ebp]
  03fb6	50		 push	 eax
  03fb7	0f b6 4d ec	 movzx	 ecx, BYTE PTR _X$[ebp]
  03fbb	51		 push	 ecx
  03fbc	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  03fc0	52		 push	 edx
  03fc1	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03fc4	8b 08		 mov	 ecx, DWORD PTR [eax]
  03fc6	51		 push	 ecx
  03fc7	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  03fcc	83 c4 34	 add	 esp, 52			; 00000034H

; 1781 : 	LogAddTD("[TEMP_LOG] DropJewelleryCaseItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1782 : 		lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  03fcf	8b 45 d0	 mov	 eax, DWORD PTR _iExOption$[ebp]
  03fd2	50		 push	 eax
  03fd3	8b 4d dc	 mov	 ecx, DWORD PTR _iOption3$[ebp]
  03fd6	51		 push	 ecx
  03fd7	8b 55 e0	 mov	 edx, DWORD PTR _iOption2$[ebp]
  03fda	52		 push	 edx
  03fdb	8b 45 e4	 mov	 eax, DWORD PTR _iOption1$[ebp]
  03fde	50		 push	 eax
  03fdf	8b 4d f0	 mov	 ecx, DWORD PTR _iLevel$[ebp]
  03fe2	51		 push	 ecx
  03fe3	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  03fe6	52		 push	 edx
  03fe7	8b 45 f4	 mov	 eax, DWORD PTR _iType$[ebp]
  03fea	6b c0 70	 imul	 eax, 112		; 00000070H
  03fed	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  03ff2	50		 push	 eax
  03ff3	8b 4d e8	 mov	 ecx, DWORD PTR _Y$[ebp]
  03ff6	51		 push	 ecx
  03ff7	8b 55 ec	 mov	 edx, DWORD PTR _X$[ebp]
  03ffa	52		 push	 edx
  03ffb	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  03fff	50		 push	 eax
  04000	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04003	83 c1 77	 add	 ecx, 119		; 00000077H
  04006	51		 push	 ecx
  04007	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0400a	83 c2 6c	 add	 edx, 108		; 0000006cH
  0400d	52		 push	 edx
  0400e	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@HNJFACKD@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@
  04013	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  04019	83 c4 34	 add	 esp, 52			; 00000034H

; 1783 : 	// ----
; 1784 : 	return true;

  0401c	b8 01 00 00 00	 mov	 eax, 1
$LN25@DropJewell:

; 1785 : }

  04021	5f		 pop	 edi
  04022	5e		 pop	 esi
  04023	5b		 pop	 ebx
  04024	8b e5		 mov	 esp, ebp
  04026	5d		 pop	 ebp
  04027	c2 10 00	 ret	 16			; 00000010H
?DropJewelleryCaseItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropJewelleryCaseItem
_TEXT	ENDS
PUBLIC	??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@ ; `string'
PUBLIC	??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	?DropNewMonsterItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropNewMonsterItem
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
;	COMDAT ??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@
CONST	SEGMENT
??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@ DB '['
	DB	'%s] [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d'
	DB	' op3:%d ExOp:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'%s] DropGroupMonsterItem [%s][%s] [%d Zen]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv343 = -136						; size = 4
tv341 = -132						; size = 4
tv338 = -126						; size = 2
_iDropItemNum$ = -60					; size = 4
_iDropItemRate$ = -56					; size = 4
_lpObj$ = -52						; size = 4
_iExOption$ = -48					; size = 4
_nRateCnt$ = -44					; size = 4
_nDropItemRate$ = -40					; size = 4
_iOption3$ = -36					; size = 4
_iOption2$ = -32					; size = 4
_iOption1$ = -28					; size = 4
_Y$ = -24						; size = 4
_X$ = -20						; size = 4
_iLevel$ = -16						; size = 4
_iType$ = -12						; size = 4
_fDur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropNewMonsterItem@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropNewMonsterItem
; _this$ = ecx

; 1790 : { 

  04030	55		 push	 ebp
  04031	8b ec		 mov	 ebp, esp
  04033	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  04039	53		 push	 ebx
  0403a	56		 push	 esi
  0403b	57		 push	 edi
  0403c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1791 : 	if( !this->m_bLoad )

  0403f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  04046	75 07		 jne	 SHORT $LN24@DropNewMon

; 1792 : 	{
; 1793 : 		return false;

  04048	33 c0		 xor	 eax, eax
  0404a	e9 c5 03 00 00	 jmp	 $LN25@DropNewMon
$LN24@DropNewMon:

; 1794 : 	}
; 1795 : 	// ----
; 1796 : 	float fDur			= 0.0;

  0404f	d9 ee		 fldz
  04051	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]

; 1797 : 	int iType			= 0;

  04054	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iType$[ebp], 0

; 1798 : 	int iLevel			= 0;

  0405b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0

; 1799 : 	int X				= 0;

  04062	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _X$[ebp], 0

; 1800 : 	int Y				= 0;

  04069	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Y$[ebp], 0

; 1801 : 	int iOption1		= 0;

  04070	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 1802 : 	int iOption2		= 0;

  04077	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1803 : 	int iOption3		= 0;

  0407e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 1804 : 	int nDropItemRate	= 0;

  04085	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nDropItemRate$[ebp], 0

; 1805 : 	int nRateCnt		= 0;

  0408c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _nRateCnt$[ebp], 0

; 1806 : 	int iExOption		= 0;

  04093	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _iExOption$[ebp], 0

; 1807 : 	// ----
; 1808 : 	LPOBJ lpObj		= &gObj[aIndex];

  0409a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0409d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  040a3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  040a9	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1809 : 	// ----
; 1810 : 	if( this->GetBagCount() <= 0 )

  040ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  040af	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  040b4	85 c0		 test	 eax, eax
  040b6	7f 0a		 jg	 SHORT $LN23@DropNewMon

; 1811 : 	{
; 1812 : 		return true;

  040b8	b8 01 00 00 00	 mov	 eax, 1
  040bd	e9 52 03 00 00	 jmp	 $LN25@DropNewMon
$LN23@DropNewMon:

; 1813 : 	}
; 1814 : 	// ----
; 1815 : 	int iDropItemRate = GetLargeRand() % 1000000;

  040c2	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  040c7	33 d2		 xor	 edx, edx
  040c9	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  040ce	f7 f1		 div	 ecx
  040d0	89 55 c8	 mov	 DWORD PTR _iDropItemRate$[ebp], edx

; 1816 : 	// ----
; 1817 : 	if ( !this->m_iRateKindCount || iDropItemRate < 1000000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1] )

  040d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  040d6	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  040dd	74 1d		 je	 SHORT $LN21@DropNewMon
  040df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  040e2	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  040e8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  040eb	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  040f0	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  040f7	39 45 c8	 cmp	 DWORD PTR _iDropItemRate$[ebp], eax
  040fa	7d 68		 jge	 SHORT $LN22@DropNewMon
$LN21@DropNewMon:

; 1818 : 	{
; 1819 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  040fc	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  04100	50		 push	 eax
  04101	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  04105	51		 push	 ecx
  04106	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  04109	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  0410f	50		 push	 eax
  04110	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04113	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  0411a	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  04120	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  04126	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1820 : 		LogAddTD("[%s] DropGroupMonsterItem [%s][%s] [%d Zen]",
; 1821 : 			this->GetEventName(), lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  0412b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0412e	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  04134	51		 push	 ecx
  04135	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04138	83 c2 77	 add	 edx, 119		; 00000077H
  0413b	52		 push	 edx
  0413c	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0413f	83 c0 6c	 add	 eax, 108		; 0000006cH
  04142	50		 push	 eax
  04143	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04146	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  0414b	50		 push	 eax
  0414c	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@
  04151	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  04157	83 c4 14	 add	 esp, 20			; 00000014H

; 1822 : 		// ----
; 1823 : 		return true;

  0415a	b8 01 00 00 00	 mov	 eax, 1
  0415f	e9 b0 02 00 00	 jmp	 $LN25@DropNewMon
$LN22@DropNewMon:

; 1824 : 	}
; 1825 : 	// ----
; 1826 : 	int iDropItemNum = rand() % this->GetBagCount();// this->GetDropItemNumberEx(iDropItemRate);

  04164	e8 00 00 00 00	 call	 _rand
  04169	8b f0		 mov	 esi, eax
  0416b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0416e	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  04173	8b c8		 mov	 ecx, eax
  04175	8b c6		 mov	 eax, esi
  04177	99		 cdq
  04178	f7 f9		 idiv	 ecx
  0417a	89 55 c4	 mov	 DWORD PTR _iDropItemNum$[ebp], edx

; 1827 : 	// ----
; 1828 : 	if( cX || cY )

  0417d	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  04181	85 c0		 test	 eax, eax
  04183	75 08		 jne	 SHORT $LN19@DropNewMon
  04185	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  04189	85 c0		 test	 eax, eax
  0418b	74 10		 je	 SHORT $LN20@DropNewMon
$LN19@DropNewMon:

; 1829 : 	{
; 1830 : 		X = cX;

  0418d	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  04191	89 45 ec	 mov	 DWORD PTR _X$[ebp], eax

; 1831 : 		Y = cY;

  04194	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  04198	89 45 e8	 mov	 DWORD PTR _Y$[ebp], eax

; 1832 : 	}
; 1833 : 	else

  0419b	eb 1a		 jmp	 SHORT $LN18@DropNewMon
$LN20@DropNewMon:

; 1834 : 	{
; 1835 : 		X = lpObj->X;

  0419d	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  041a0	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  041a7	89 4d ec	 mov	 DWORD PTR _X$[ebp], ecx

; 1836 : 		Y = lpObj->Y;

  041aa	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  041ad	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  041b4	89 4d e8	 mov	 DWORD PTR _Y$[ebp], ecx
$LN18@DropNewMon:

; 1837 : 	}
; 1838 : 	// ----
; 1839 : 	iLevel	= this->GetLevel(iDropItemNum);

  041b7	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  041ba	50		 push	 eax
  041bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  041be	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  041c3	0f b6 c8	 movzx	 ecx, al
  041c6	89 4d f0	 mov	 DWORD PTR _iLevel$[ebp], ecx

; 1840 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  041c9	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  041cc	6b c0 09	 imul	 eax, 9
  041cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  041d2	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  041da	52		 push	 edx
  041db	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  041de	6b c0 09	 imul	 eax, 9
  041e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  041e4	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  041ec	52		 push	 edx
  041ed	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  041f2	83 c4 08	 add	 esp, 8
  041f5	89 45 f4	 mov	 DWORD PTR _iType$[ebp], eax

; 1841 : 	// ----
; 1842 : 	if( iType == -1 )

  041f8	83 7d f4 ff	 cmp	 DWORD PTR _iType$[ebp], -1
  041fc	75 07		 jne	 SHORT $LN17@DropNewMon

; 1843 : 	{
; 1844 : 		return false;

  041fe	33 c0		 xor	 eax, eax
  04200	e9 0f 02 00 00	 jmp	 $LN25@DropNewMon
$LN17@DropNewMon:

; 1845 : 	}
; 1846 : 	// ----
; 1847 : 	//if( this->BagObject[iDropItemNum].m_isSetItem )
; 1848 : 	//{
; 1849 : 	//		this->DropEventSetItem(aIndex, iType, btMapNumber, X, Y);
; 1850 : 	//		return true;
; 1851 : 	//}
; 1852 : 	// ----
; 1853 : 	if( this->BagObject[iDropItemNum].m_isskill )

  04205	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  04208	6b c0 09	 imul	 eax, 9
  0420b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0420e	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  04216	85 d2		 test	 edx, edx
  04218	74 07		 je	 SHORT $LN16@DropNewMon

; 1854 : 	{
; 1855 : 		iOption1 = true;

  0421a	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN16@DropNewMon:

; 1856 : 	}
; 1857 : 	// -----
; 1858 : 	if( this->BagObject[iDropItemNum].m_isluck )

  04221	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  04224	6b c0 09	 imul	 eax, 9
  04227	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0422a	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  04232	85 d2		 test	 edx, edx
  04234	74 23		 je	 SHORT $LN14@DropNewMon

; 1859 : 	{
; 1860 : 		iOption2 = 0;

  04236	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1861 : 		// ----
; 1862 : 		if( !(rand() % 2) )

  0423d	e8 00 00 00 00	 call	 _rand
  04242	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  04247	79 05		 jns	 SHORT $LN27@DropNewMon
  04249	48		 dec	 eax
  0424a	83 c8 fe	 or	 eax, -2			; fffffffeH
  0424d	40		 inc	 eax
$LN27@DropNewMon:
  0424e	85 c0		 test	 eax, eax
  04250	75 07		 jne	 SHORT $LN14@DropNewMon

; 1863 : 		{
; 1864 : 			iOption2 = true;

  04252	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN14@DropNewMon:

; 1865 : 		}
; 1866 : 	}
; 1867 : 	// ----
; 1868 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  04259	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  0425c	6b c0 09	 imul	 eax, 9
  0425f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04262	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  0426a	83 fa 01	 cmp	 edx, 1
  0426d	75 2b		 jne	 SHORT $LN11@DropNewMon

; 1869 : 	{
; 1870 : 		if( rand() % 5 >= 1 )

  0426f	e8 00 00 00 00	 call	 _rand
  04274	99		 cdq
  04275	b9 05 00 00 00	 mov	 ecx, 5
  0427a	f7 f9		 idiv	 ecx
  0427c	83 fa 01	 cmp	 edx, 1
  0427f	7c 12		 jl	 SHORT $LN12@DropNewMon

; 1871 : 		{
; 1872 : 			iOption3 = rand() % 3;

  04281	e8 00 00 00 00	 call	 _rand
  04286	99		 cdq
  04287	b9 03 00 00 00	 mov	 ecx, 3
  0428c	f7 f9		 idiv	 ecx
  0428e	89 55 dc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 1873 : 		}
; 1874 : 		else

  04291	eb 07		 jmp	 SHORT $LN11@DropNewMon
$LN12@DropNewMon:

; 1875 : 		{
; 1876 : 			iOption3 = 3;

  04293	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN11@DropNewMon:

; 1877 : 		}
; 1878 : 	}
; 1879 : 	// ----
; 1880 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  0429a	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  0429d	6b c0 09	 imul	 eax, 9
  042a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  042a3	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  042ab	85 d2		 test	 edx, edx
  042ad	74 10		 je	 SHORT $LN10@DropNewMon

; 1881 : 	{
; 1882 : 		iExOption	= NewOptionRand(0);

  042af	6a 00		 push	 0
  042b1	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  042b6	83 c4 04	 add	 esp, 4
  042b9	0f b6 c0	 movzx	 eax, al
  042bc	89 45 d0	 mov	 DWORD PTR _iExOption$[ebp], eax
$LN10@DropNewMon:

; 1883 : 		//iOption2	= false;
; 1884 : 		//iOption1	= true;
; 1885 : 		//iLevel		= 0;
; 1886 : 	}
; 1887 : 	// ----
; 1888 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  042bf	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _iType$[ebp], 6159 ; 0000180fH
  042c6	74 12		 je	 SHORT $LN8@DropNewMon
  042c8	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7181 ; 00001c0dH
  042cf	74 09		 je	 SHORT $LN8@DropNewMon
  042d1	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7182 ; 00001c0eH
  042d8	75 1c		 jne	 SHORT $LN9@DropNewMon
$LN8@DropNewMon:

; 1889 : 	{
; 1890 : 		iOption1	= false;

  042da	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 1891 : 		iOption2	= false;

  042e1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1892 : 		iOption3	= 0;

  042e8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 1893 : 		iLevel		= 0;

  042ef	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0
$LN9@DropNewMon:

; 1894 : 	}
; 1895 : 	// ----
; 1896 : 	if( iType == 7238 || iType == 7239 )

  042f6	81 7d f4 46 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7238 ; 00001c46H
  042fd	74 09		 je	 SHORT $LN6@DropNewMon
  042ff	81 7d f4 47 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7239 ; 00001c47H
  04306	75 0b		 jne	 SHORT $LN7@DropNewMon
$LN6@DropNewMon:

; 1897 : 	{
; 1898 : 		fDur = 50.0;

  04308	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42480000
  0430e	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  04311	eb 38		 jmp	 SHORT $LN1@DropNewMon
$LN7@DropNewMon:

; 1899 : 	}
; 1900 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  04313	81 7d f4 55 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7253 ; 00001c55H
  0431a	74 12		 je	 SHORT $LN3@DropNewMon
  0431c	81 7d f4 56 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7254 ; 00001c56H
  04323	74 09		 je	 SHORT $LN3@DropNewMon
  04325	81 7d f4 57 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7255 ; 00001c57H
  0432c	75 0b		 jne	 SHORT $LN4@DropNewMon
$LN3@DropNewMon:

; 1901 : 	{
; 1902 : 		fDur = 10.0;

  0432e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  04334	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  04337	eb 12		 jmp	 SHORT $LN1@DropNewMon
$LN4@DropNewMon:

; 1903 : 	}
; 1904 : 	else if( iType == 7221 )

  04339	81 7d f4 35 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7221 ; 00001c35H
  04340	75 09		 jne	 SHORT $LN1@DropNewMon

; 1905 : 	{
; 1906 : 		fDur = 10.0;

  04342	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  04348	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropNewMon:

; 1907 : 	}
; 1908 : 	// ----
; 1909 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  0434b	6a 00		 push	 0
  0434d	0f b6 45 d0	 movzx	 eax, BYTE PTR _iExOption$[ebp]
  04351	50		 push	 eax
  04352	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04355	8b 11		 mov	 edx, DWORD PTR [ecx]
  04357	52		 push	 edx
  04358	0f b6 45 dc	 movzx	 eax, BYTE PTR _iOption3$[ebp]
  0435c	50		 push	 eax
  0435d	0f b6 4d e0	 movzx	 ecx, BYTE PTR _iOption2$[ebp]
  04361	51		 push	 ecx
  04362	0f b6 55 e4	 movzx	 edx, BYTE PTR _iOption1$[ebp]
  04366	52		 push	 edx
  04367	d9 45 f8	 fld	 DWORD PTR _fDur$[ebp]
  0436a	d9 7d 82	 fnstcw	 WORD PTR tv338[ebp]
  0436d	0f b7 45 82	 movzx	 eax, WORD PTR tv338[ebp]
  04371	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  04376	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv341[ebp], eax
  0437c	d9 ad 7c ff ff
	ff		 fldcw	 WORD PTR tv341[ebp]
  04382	db 9d 78 ff ff
	ff		 fistp	 DWORD PTR tv343[ebp]
  04388	d9 6d 82	 fldcw	 WORD PTR tv338[ebp]
  0438b	0f b6 85 78 ff
	ff ff		 movzx	 eax, BYTE PTR tv343[ebp]
  04392	50		 push	 eax
  04393	0f b6 4d f0	 movzx	 ecx, BYTE PTR _iLevel$[ebp]
  04397	51		 push	 ecx
  04398	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  0439b	52		 push	 edx
  0439c	0f b6 45 e8	 movzx	 eax, BYTE PTR _Y$[ebp]
  043a0	50		 push	 eax
  043a1	0f b6 4d ec	 movzx	 ecx, BYTE PTR _X$[ebp]
  043a5	51		 push	 ecx
  043a6	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  043aa	52		 push	 edx
  043ab	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  043ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  043b0	51		 push	 ecx
  043b1	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  043b6	83 c4 34	 add	 esp, 52			; 00000034H

; 1910 : 	LogAddTD("[%s] [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1911 : 		this->GetEventName(), lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  043b9	8b 45 d0	 mov	 eax, DWORD PTR _iExOption$[ebp]
  043bc	50		 push	 eax
  043bd	8b 4d dc	 mov	 ecx, DWORD PTR _iOption3$[ebp]
  043c0	51		 push	 ecx
  043c1	8b 55 e0	 mov	 edx, DWORD PTR _iOption2$[ebp]
  043c4	52		 push	 edx
  043c5	8b 45 e4	 mov	 eax, DWORD PTR _iOption1$[ebp]
  043c8	50		 push	 eax
  043c9	8b 4d f0	 mov	 ecx, DWORD PTR _iLevel$[ebp]
  043cc	51		 push	 ecx
  043cd	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  043d0	52		 push	 edx
  043d1	8b 45 f4	 mov	 eax, DWORD PTR _iType$[ebp]
  043d4	6b c0 70	 imul	 eax, 112		; 00000070H
  043d7	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  043dc	50		 push	 eax
  043dd	8b 4d e8	 mov	 ecx, DWORD PTR _Y$[ebp]
  043e0	51		 push	 ecx
  043e1	8b 55 ec	 mov	 edx, DWORD PTR _X$[ebp]
  043e4	52		 push	 edx
  043e5	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  043e9	50		 push	 eax
  043ea	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  043ed	83 c1 77	 add	 ecx, 119		; 00000077H
  043f0	51		 push	 ecx
  043f1	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  043f4	83 c2 6c	 add	 edx, 108		; 0000006cH
  043f7	52		 push	 edx
  043f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  043fb	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  04400	50		 push	 eax
  04401	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@
  04406	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0440c	83 c4 38	 add	 esp, 56			; 00000038H

; 1912 : 	// ----
; 1913 : 	return true;

  0440f	b8 01 00 00 00	 mov	 eax, 1
$LN25@DropNewMon:

; 1914 : }

  04414	5f		 pop	 edi
  04415	5e		 pop	 esi
  04416	5b		 pop	 ebx
  04417	8b e5		 mov	 esp, ebp
  04419	5d		 pop	 ebp
  0441a	c2 10 00	 ret	 16			; 00000010H
?DropNewMonsterItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropNewMonsterItem
_TEXT	ENDS
PUBLIC	?DropBoxOfGRPColorItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropBoxOfGRPColorItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv343 = -136						; size = 4
tv341 = -132						; size = 4
tv338 = -126						; size = 2
_iDropItemNum$ = -60					; size = 4
_iDropItemRate$ = -56					; size = 4
_lpObj$ = -52						; size = 4
_iExOption$ = -48					; size = 4
_nRateCnt$ = -44					; size = 4
_nDropItemRate$ = -40					; size = 4
_iOption3$ = -36					; size = 4
_iOption2$ = -32					; size = 4
_iOption1$ = -28					; size = 4
_Y$ = -24						; size = 4
_X$ = -20						; size = 4
_iLevel$ = -16						; size = 4
_iType$ = -12						; size = 4
_fDur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
?DropBoxOfGRPColorItem@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropBoxOfGRPColorItem
; _this$ = ecx

; 1919 : { 

  04420	55		 push	 ebp
  04421	8b ec		 mov	 ebp, esp
  04423	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  04429	53		 push	 ebx
  0442a	56		 push	 esi
  0442b	57		 push	 edi
  0442c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1920 : 	if( !this->m_bLoad )

  0442f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04432	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  04436	75 07		 jne	 SHORT $LN24@DropBoxOfG

; 1921 : 	{
; 1922 : 		return false;

  04438	33 c0		 xor	 eax, eax
  0443a	e9 c5 03 00 00	 jmp	 $LN25@DropBoxOfG
$LN24@DropBoxOfG:

; 1923 : 	}
; 1924 : 	// ----
; 1925 : 	float fDur			= 0.0;

  0443f	d9 ee		 fldz
  04441	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]

; 1926 : 	int iType			= 0;

  04444	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iType$[ebp], 0

; 1927 : 	int iLevel			= 0;

  0444b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0

; 1928 : 	int X				= 0;

  04452	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _X$[ebp], 0

; 1929 : 	int Y				= 0;

  04459	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Y$[ebp], 0

; 1930 : 	int iOption1		= 0;

  04460	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 1931 : 	int iOption2		= 0;

  04467	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1932 : 	int iOption3		= 0;

  0446e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 1933 : 	int nDropItemRate	= 0;

  04475	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nDropItemRate$[ebp], 0

; 1934 : 	int nRateCnt		= 0;

  0447c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _nRateCnt$[ebp], 0

; 1935 : 	int iExOption		= 0;

  04483	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _iExOption$[ebp], 0

; 1936 : 	// ----
; 1937 : 	LPOBJ lpObj		= &gObj[aIndex];

  0448a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0448d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04493	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04499	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1938 : 	// ----
; 1939 : 	if( this->GetBagCount() <= 0 )

  0449c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0449f	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  044a4	85 c0		 test	 eax, eax
  044a6	7f 0a		 jg	 SHORT $LN23@DropBoxOfG

; 1940 : 	{
; 1941 : 		return true;

  044a8	b8 01 00 00 00	 mov	 eax, 1
  044ad	e9 52 03 00 00	 jmp	 $LN25@DropBoxOfG
$LN23@DropBoxOfG:

; 1942 : 	}
; 1943 : 	// ----
; 1944 : 	int iDropItemRate = GetLargeRand() % 1000000;

  044b2	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  044b7	33 d2		 xor	 edx, edx
  044b9	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  044be	f7 f1		 div	 ecx
  044c0	89 55 c8	 mov	 DWORD PTR _iDropItemRate$[ebp], edx

; 1945 : 	// ----
; 1946 : 	if ( !this->m_iRateKindCount || iDropItemRate < 1000000 - this->m_iEventItemDropRateEx[this->m_iRateKindCount-1] )

  044c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  044c6	83 b8 18 08 00
	00 00		 cmp	 DWORD PTR [eax+2072], 0
  044cd	74 1d		 je	 SHORT $LN21@DropBoxOfG
  044cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  044d2	8b 88 18 08 00
	00		 mov	 ecx, DWORD PTR [eax+2072]
  044d8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  044db	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  044e0	2b 84 8a 74 07
	00 00		 sub	 eax, DWORD PTR [edx+ecx*4+1908]
  044e7	39 45 c8	 cmp	 DWORD PTR _iDropItemRate$[ebp], eax
  044ea	7d 68		 jge	 SHORT $LN22@DropBoxOfG
$LN21@DropBoxOfG:

; 1947 : 	{
; 1948 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  044ec	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  044f0	50		 push	 eax
  044f1	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cX$[ebp]
  044f5	51		 push	 ecx
  044f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  044f9	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  044ff	50		 push	 eax
  04500	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04503	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  0450a	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  04510	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  04516	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1949 : 		LogAddTD("[%s] DropGroupMonsterItem [%s][%s] [%d Zen]",
; 1950 : 			this->GetEventName(), lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  0451b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0451e	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  04524	51		 push	 ecx
  04525	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04528	83 c2 77	 add	 edx, 119		; 00000077H
  0452b	52		 push	 edx
  0452c	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0452f	83 c0 6c	 add	 eax, 108		; 0000006cH
  04532	50		 push	 eax
  04533	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04536	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  0453b	50		 push	 eax
  0453c	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@
  04541	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  04547	83 c4 14	 add	 esp, 20			; 00000014H

; 1951 : 		// ----
; 1952 : 		return true;

  0454a	b8 01 00 00 00	 mov	 eax, 1
  0454f	e9 b0 02 00 00	 jmp	 $LN25@DropBoxOfG
$LN22@DropBoxOfG:

; 1953 : 	}
; 1954 : 	// ----
; 1955 : 	int iDropItemNum = rand() % this->GetBagCount();// this->GetDropItemNumberEx(iDropItemRate);

  04554	e8 00 00 00 00	 call	 _rand
  04559	8b f0		 mov	 esi, eax
  0455b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0455e	e8 00 00 00 00	 call	 ?GetBagCount@CProbabilityItemBag@@AAEHXZ ; CProbabilityItemBag::GetBagCount
  04563	8b c8		 mov	 ecx, eax
  04565	8b c6		 mov	 eax, esi
  04567	99		 cdq
  04568	f7 f9		 idiv	 ecx
  0456a	89 55 c4	 mov	 DWORD PTR _iDropItemNum$[ebp], edx

; 1956 : 	// ----
; 1957 : 	if( cX || cY )

  0456d	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  04571	85 c0		 test	 eax, eax
  04573	75 08		 jne	 SHORT $LN19@DropBoxOfG
  04575	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  04579	85 c0		 test	 eax, eax
  0457b	74 10		 je	 SHORT $LN20@DropBoxOfG
$LN19@DropBoxOfG:

; 1958 : 	{
; 1959 : 		X = cX;

  0457d	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  04581	89 45 ec	 mov	 DWORD PTR _X$[ebp], eax

; 1960 : 		Y = cY;

  04584	0f b6 45 14	 movzx	 eax, BYTE PTR _cY$[ebp]
  04588	89 45 e8	 mov	 DWORD PTR _Y$[ebp], eax

; 1961 : 	}
; 1962 : 	else

  0458b	eb 1a		 jmp	 SHORT $LN18@DropBoxOfG
$LN20@DropBoxOfG:

; 1963 : 	{
; 1964 : 		X = lpObj->X;

  0458d	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04590	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  04597	89 4d ec	 mov	 DWORD PTR _X$[ebp], ecx

; 1965 : 		Y = lpObj->Y;

  0459a	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0459d	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  045a4	89 4d e8	 mov	 DWORD PTR _Y$[ebp], ecx
$LN18@DropBoxOfG:

; 1966 : 	}
; 1967 : 	// ----
; 1968 : 	iLevel	= this->GetLevel(iDropItemNum);

  045a7	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  045aa	50		 push	 eax
  045ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  045ae	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  045b3	0f b6 c8	 movzx	 ecx, al
  045b6	89 4d f0	 mov	 DWORD PTR _iLevel$[ebp], ecx

; 1969 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  045b9	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  045bc	6b c0 09	 imul	 eax, 9
  045bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  045c2	0f b6 94 01 33
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+563]
  045ca	52		 push	 edx
  045cb	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  045ce	6b c0 09	 imul	 eax, 9
  045d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  045d4	0f b6 94 01 32
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+562]
  045dc	52		 push	 edx
  045dd	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  045e2	83 c4 08	 add	 esp, 8
  045e5	89 45 f4	 mov	 DWORD PTR _iType$[ebp], eax

; 1970 : 	// ----
; 1971 : 	if( iType == -1 )

  045e8	83 7d f4 ff	 cmp	 DWORD PTR _iType$[ebp], -1
  045ec	75 07		 jne	 SHORT $LN17@DropBoxOfG

; 1972 : 	{
; 1973 : 		return false;

  045ee	33 c0		 xor	 eax, eax
  045f0	e9 0f 02 00 00	 jmp	 $LN25@DropBoxOfG
$LN17@DropBoxOfG:

; 1974 : 	}
; 1975 : 	// ----
; 1976 : 	//if( this->BagObject[iDropItemNum].m_isSetItem )
; 1977 : 	//{
; 1978 : 	//	this->DropEventSetItem(aIndex, iType, btMapNumber, X, Y);
; 1979 : 	//	return true;
; 1980 : 	//}
; 1981 : 	// ----
; 1982 : 	if( this->BagObject[iDropItemNum].m_isskill )

  045f5	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  045f8	6b c0 09	 imul	 eax, 9
  045fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  045fe	0f b6 94 01 36
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+566]
  04606	85 d2		 test	 edx, edx
  04608	74 07		 je	 SHORT $LN16@DropBoxOfG

; 1983 : 	{
; 1984 : 		iOption1 = true;

  0460a	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN16@DropBoxOfG:

; 1985 : 	}
; 1986 : 	// -----
; 1987 : 	if( this->BagObject[iDropItemNum].m_isluck )

  04611	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  04614	6b c0 09	 imul	 eax, 9
  04617	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0461a	0f b6 94 01 37
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+567]
  04622	85 d2		 test	 edx, edx
  04624	74 23		 je	 SHORT $LN14@DropBoxOfG

; 1988 : 	{
; 1989 : 		iOption2 = 0;

  04626	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1990 : 		// ----
; 1991 : 		if( !(rand() % 2) )

  0462d	e8 00 00 00 00	 call	 _rand
  04632	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  04637	79 05		 jns	 SHORT $LN27@DropBoxOfG
  04639	48		 dec	 eax
  0463a	83 c8 fe	 or	 eax, -2			; fffffffeH
  0463d	40		 inc	 eax
$LN27@DropBoxOfG:
  0463e	85 c0		 test	 eax, eax
  04640	75 07		 jne	 SHORT $LN14@DropBoxOfG

; 1992 : 		{
; 1993 : 			iOption2 = true;

  04642	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN14@DropBoxOfG:

; 1994 : 		}
; 1995 : 	}
; 1996 : 	// ----
; 1997 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  04649	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  0464c	6b c0 09	 imul	 eax, 9
  0464f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04652	0f b6 94 01 38
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+568]
  0465a	83 fa 01	 cmp	 edx, 1
  0465d	75 2b		 jne	 SHORT $LN11@DropBoxOfG

; 1998 : 	{
; 1999 : 		if( rand() % 5 >= 1 )

  0465f	e8 00 00 00 00	 call	 _rand
  04664	99		 cdq
  04665	b9 05 00 00 00	 mov	 ecx, 5
  0466a	f7 f9		 idiv	 ecx
  0466c	83 fa 01	 cmp	 edx, 1
  0466f	7c 12		 jl	 SHORT $LN12@DropBoxOfG

; 2000 : 		{
; 2001 : 			iOption3 = rand() % 3;

  04671	e8 00 00 00 00	 call	 _rand
  04676	99		 cdq
  04677	b9 03 00 00 00	 mov	 ecx, 3
  0467c	f7 f9		 idiv	 ecx
  0467e	89 55 dc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 2002 : 		}
; 2003 : 		else

  04681	eb 07		 jmp	 SHORT $LN11@DropBoxOfG
$LN12@DropBoxOfG:

; 2004 : 		{
; 2005 : 			iOption3 = 3;

  04683	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN11@DropBoxOfG:

; 2006 : 		}
; 2007 : 	}
; 2008 : 	// ----
; 2009 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  0468a	8b 45 c4	 mov	 eax, DWORD PTR _iDropItemNum$[ebp]
  0468d	6b c0 09	 imul	 eax, 9
  04690	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04693	0f b6 94 01 39
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+569]
  0469b	85 d2		 test	 edx, edx
  0469d	74 10		 je	 SHORT $LN10@DropBoxOfG

; 2010 : 	{
; 2011 : 		iExOption	= NewOptionRand(0);

  0469f	6a 00		 push	 0
  046a1	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  046a6	83 c4 04	 add	 esp, 4
  046a9	0f b6 c0	 movzx	 eax, al
  046ac	89 45 d0	 mov	 DWORD PTR _iExOption$[ebp], eax
$LN10@DropBoxOfG:

; 2012 : 		//iOption2	= false;
; 2013 : 		//iOption1	= true;
; 2014 : 		//iLevel		= 0;
; 2015 : 	}
; 2016 : 	// ----
; 2017 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  046af	81 7d f4 0f 18
	00 00		 cmp	 DWORD PTR _iType$[ebp], 6159 ; 0000180fH
  046b6	74 12		 je	 SHORT $LN8@DropBoxOfG
  046b8	81 7d f4 0d 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7181 ; 00001c0dH
  046bf	74 09		 je	 SHORT $LN8@DropBoxOfG
  046c1	81 7d f4 0e 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7182 ; 00001c0eH
  046c8	75 1c		 jne	 SHORT $LN9@DropBoxOfG
$LN8@DropBoxOfG:

; 2018 : 	{
; 2019 : 		iOption1	= false;

  046ca	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 0

; 2020 : 		iOption2	= false;

  046d1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 2021 : 		iOption3	= 0;

  046d8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 0

; 2022 : 		iLevel		= 0;

  046df	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iLevel$[ebp], 0
$LN9@DropBoxOfG:

; 2023 : 	}
; 2024 : 	// ----
; 2025 : 	if( iType == 7238 || iType == 7239 )

  046e6	81 7d f4 46 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7238 ; 00001c46H
  046ed	74 09		 je	 SHORT $LN6@DropBoxOfG
  046ef	81 7d f4 47 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7239 ; 00001c47H
  046f6	75 0b		 jne	 SHORT $LN7@DropBoxOfG
$LN6@DropBoxOfG:

; 2026 : 	{
; 2027 : 		fDur = 50.0;

  046f8	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42480000
  046fe	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  04701	eb 38		 jmp	 SHORT $LN1@DropBoxOfG
$LN7@DropBoxOfG:

; 2028 : 	}
; 2029 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  04703	81 7d f4 55 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7253 ; 00001c55H
  0470a	74 12		 je	 SHORT $LN3@DropBoxOfG
  0470c	81 7d f4 56 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7254 ; 00001c56H
  04713	74 09		 je	 SHORT $LN3@DropBoxOfG
  04715	81 7d f4 57 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7255 ; 00001c57H
  0471c	75 0b		 jne	 SHORT $LN4@DropBoxOfG
$LN3@DropBoxOfG:

; 2030 : 	{
; 2031 : 		fDur = 10.0;

  0471e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  04724	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
  04727	eb 12		 jmp	 SHORT $LN1@DropBoxOfG
$LN4@DropBoxOfG:

; 2032 : 	}
; 2033 : 	else if( iType == 7221 )

  04729	81 7d f4 35 1c
	00 00		 cmp	 DWORD PTR _iType$[ebp], 7221 ; 00001c35H
  04730	75 09		 jne	 SHORT $LN1@DropBoxOfG

; 2034 : 	{
; 2035 : 		fDur = 10.0;

  04732	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  04738	d9 5d f8	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropBoxOfG:

; 2036 : 	}
; 2037 : 	// ----
; 2038 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  0473b	6a 00		 push	 0
  0473d	0f b6 45 d0	 movzx	 eax, BYTE PTR _iExOption$[ebp]
  04741	50		 push	 eax
  04742	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04745	8b 11		 mov	 edx, DWORD PTR [ecx]
  04747	52		 push	 edx
  04748	0f b6 45 dc	 movzx	 eax, BYTE PTR _iOption3$[ebp]
  0474c	50		 push	 eax
  0474d	0f b6 4d e0	 movzx	 ecx, BYTE PTR _iOption2$[ebp]
  04751	51		 push	 ecx
  04752	0f b6 55 e4	 movzx	 edx, BYTE PTR _iOption1$[ebp]
  04756	52		 push	 edx
  04757	d9 45 f8	 fld	 DWORD PTR _fDur$[ebp]
  0475a	d9 7d 82	 fnstcw	 WORD PTR tv338[ebp]
  0475d	0f b7 45 82	 movzx	 eax, WORD PTR tv338[ebp]
  04761	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  04766	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv341[ebp], eax
  0476c	d9 ad 7c ff ff
	ff		 fldcw	 WORD PTR tv341[ebp]
  04772	db 9d 78 ff ff
	ff		 fistp	 DWORD PTR tv343[ebp]
  04778	d9 6d 82	 fldcw	 WORD PTR tv338[ebp]
  0477b	0f b6 85 78 ff
	ff ff		 movzx	 eax, BYTE PTR tv343[ebp]
  04782	50		 push	 eax
  04783	0f b6 4d f0	 movzx	 ecx, BYTE PTR _iLevel$[ebp]
  04787	51		 push	 ecx
  04788	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  0478b	52		 push	 edx
  0478c	0f b6 45 e8	 movzx	 eax, BYTE PTR _Y$[ebp]
  04790	50		 push	 eax
  04791	0f b6 4d ec	 movzx	 ecx, BYTE PTR _X$[ebp]
  04795	51		 push	 ecx
  04796	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  0479a	52		 push	 edx
  0479b	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0479e	8b 08		 mov	 ecx, DWORD PTR [eax]
  047a0	51		 push	 ecx
  047a1	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  047a6	83 c4 34	 add	 esp, 52			; 00000034H

; 2039 : 	LogAddTD("[%s] [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 2040 : 		this->GetEventName(), lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  047a9	8b 45 d0	 mov	 eax, DWORD PTR _iExOption$[ebp]
  047ac	50		 push	 eax
  047ad	8b 4d dc	 mov	 ecx, DWORD PTR _iOption3$[ebp]
  047b0	51		 push	 ecx
  047b1	8b 55 e0	 mov	 edx, DWORD PTR _iOption2$[ebp]
  047b4	52		 push	 edx
  047b5	8b 45 e4	 mov	 eax, DWORD PTR _iOption1$[ebp]
  047b8	50		 push	 eax
  047b9	8b 4d f0	 mov	 ecx, DWORD PTR _iLevel$[ebp]
  047bc	51		 push	 ecx
  047bd	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  047c0	52		 push	 edx
  047c1	8b 45 f4	 mov	 eax, DWORD PTR _iType$[ebp]
  047c4	6b c0 70	 imul	 eax, 112		; 00000070H
  047c7	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  047cc	50		 push	 eax
  047cd	8b 4d e8	 mov	 ecx, DWORD PTR _Y$[ebp]
  047d0	51		 push	 ecx
  047d1	8b 55 ec	 mov	 edx, DWORD PTR _X$[ebp]
  047d4	52		 push	 edx
  047d5	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  047d9	50		 push	 eax
  047da	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  047dd	83 c1 77	 add	 ecx, 119		; 00000077H
  047e0	51		 push	 ecx
  047e1	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  047e4	83 c2 6c	 add	 edx, 108		; 0000006cH
  047e7	52		 push	 edx
  047e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  047eb	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  047f0	50		 push	 eax
  047f1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@
  047f6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  047fc	83 c4 38	 add	 esp, 56			; 00000038H

; 2041 : 	// ----
; 2042 : 	return true;

  047ff	b8 01 00 00 00	 mov	 eax, 1
$LN25@DropBoxOfG:

; 2043 : }

  04804	5f		 pop	 edi
  04805	5e		 pop	 esi
  04806	5b		 pop	 ebx
  04807	8b e5		 mov	 esp, ebp
  04809	5d		 pop	 ebp
  0480a	c2 10 00	 ret	 16			; 00000010H
?DropBoxOfGRPColorItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropBoxOfGRPColorItem
_TEXT	ENDS
END
