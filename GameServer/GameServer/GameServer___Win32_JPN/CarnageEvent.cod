; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\CarnageEvent.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
PUBLIC	??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
PUBLIC	??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
PUBLIC	?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::clear
PUBLIC	?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::clear
PUBLIC	?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::clear
PUBLIC	??0?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
PUBLIC	??0?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
PUBLIC	??0?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
PUBLIC	??0CCarnageEvent@@QAE@XZ			; CCarnageEvent::CCarnageEvent
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$??0CCarnageEvent@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCarnageEvent@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCarnageEvent@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CCarnageEvent@@QAE@XZ$2
__ehfuncinfo$??0CCarnageEvent@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CCarnageEvent@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\carnageevent.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_i$231543 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCarnageEvent@@QAE@XZ PROC				; CCarnageEvent::CCarnageEvent
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCarnageEvent@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 60	 add	 ecx, 96			; 00000060H
  00031	e8 00 00 00 00	 call	 ??0?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 70	 add	 ecx, 112		; 00000070H
  00043	e8 00 00 00 00	 call	 ??0?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
  00048	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00055	e8 00 00 00 00	 call	 ??0?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
  0005a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 18   : 	this->m_EventStatus = 0;

  0005e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00061	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 19   : 	this->m_EventStage = 0;

  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 20   : 	this->m_TickCount = 0;

  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 21   : 	this->m_TickRemain = 0;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 22   : 	this->m_TickWait = 0;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 23   : 
; 24   : 	this->m_Enable = 0;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 25   : 	this->m_MapNumber = 0;

  00099	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 26   : 	this->m_MapX = 0;

  000a3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 27   : 	this->m_MapY = 0;

  000ad	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 28   : 	this->m_OpenTime = 0;

  000b7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 29   : 	this->m_PlayTime = 0;

  000c1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 30   : 	this->m_EndTime = 0;

  000cb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 31   : 
; 32   : 	this->m_NpcClass = 0;

  000d5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 33   : 	this->m_NpcMap = 0;

  000df	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 34   : 	this->m_NpcX = 0;

  000e9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 35   : 	this->m_NpcY = 0;

  000f3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 36   : 
; 37   : 	this->m_TicketType = 0;

  000fd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00100	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 38   : 	this->m_TicketIndex = 0;

  00107	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 39   : 	this->m_TicketLevel = 0;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00114	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0

; 40   : 
; 41   : 	this->m_RewardItemCount = 0;

  0011b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 42   : 	this->m_RewardAncentRate = 0;

  00125	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00128	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0

; 43   : 
; 44   : 	this->m_MonsterCount = 0;

  0012f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00132	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 45   : 
; 46   : 	this->m_TimeData.clear();

  00139	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013c	83 c1 60	 add	 ecx, 96			; 00000060H
  0013f	e8 00 00 00 00	 call	 ?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::clear

; 47   : 	this->m_MonsterData.clear();

  00144	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	83 c1 70	 add	 ecx, 112		; 00000070H
  0014a	e8 00 00 00 00	 call	 ?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::clear

; 48   : 	this->m_ItemData.clear();

  0014f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00152	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00158	e8 00 00 00 00	 call	 ?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::clear

; 49   : 	
; 50   : 	for(int i = 0; i < CARNAGE_MONSTER_MAX; i++)

  0015d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$231543[ebp], 0
  00164	eb 09		 jmp	 SHORT $LN3@CCarnageEv
$LN2@CCarnageEv:
  00166	8b 45 ec	 mov	 eax, DWORD PTR _i$231543[ebp]
  00169	83 c0 01	 add	 eax, 1
  0016c	89 45 ec	 mov	 DWORD PTR _i$231543[ebp], eax
$LN3@CCarnageEv:
  0016f	81 7d ec f4 01
	00 00		 cmp	 DWORD PTR _i$231543[ebp], 500 ; 000001f4H
  00176	7d 66		 jge	 SHORT $LN4@CCarnageEv

; 51   : 	{
; 52   : 		this->m_MonsterBase[i].Stage  = -1;

  00178	8b 45 ec	 mov	 eax, DWORD PTR _i$231543[ebp]
  0017b	6b c0 14	 imul	 eax, 20			; 00000014H
  0017e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00181	c7 84 01 90 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+144], -1

; 53   : 		this->m_MonsterBase[i].Type  = -1;

  0018c	8b 45 ec	 mov	 eax, DWORD PTR _i$231543[ebp]
  0018f	6b c0 14	 imul	 eax, 20			; 00000014H
  00192	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	c7 84 01 94 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+148], -1

; 54   : 		this->m_MonsterBase[i].aIndex = -1;

  001a0	8b 45 ec	 mov	 eax, DWORD PTR _i$231543[ebp]
  001a3	6b c0 14	 imul	 eax, 20			; 00000014H
  001a6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001a9	c7 84 01 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+152], -1

; 55   : 		this->m_MonsterBase[i].Pos	 = -1;

  001b4	8b 45 ec	 mov	 eax, DWORD PTR _i$231543[ebp]
  001b7	6b c0 14	 imul	 eax, 20			; 00000014H
  001ba	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001bd	c7 84 01 9c 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+156], -1

; 56   : 		this->m_MonsterBase[i].Class  = -1;

  001c8	8b 45 ec	 mov	 eax, DWORD PTR _i$231543[ebp]
  001cb	6b c0 14	 imul	 eax, 20			; 00000014H
  001ce	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001d1	c7 84 01 a0 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+160], -1

; 57   : 	}

  001dc	eb 88		 jmp	 SHORT $LN2@CCarnageEv
$LN4@CCarnageEv:

; 58   : }

  001de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f2	59		 pop	 ecx
  001f3	5f		 pop	 edi
  001f4	5e		 pop	 esi
  001f5	5b		 pop	 ebx
  001f6	8b e5		 mov	 esp, ebp
  001f8	5d		 pop	 ebp
  001f9	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CCarnageEvent@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 60	 add	 ecx, 96			; 00000060H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
__unwindfunclet$??0CCarnageEvent@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 70	 add	 ecx, 112		; 00000070H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
__unwindfunclet$??0CCarnageEvent@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  0001f	e9 00 00 00 00	 jmp	 ??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
__ehhandler$??0CCarnageEvent@@QAE@XZ:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCarnageEvent@@QAE@XZ
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCarnageEvent@@QAE@XZ ENDP				; CCarnageEvent::CCarnageEvent
PUBLIC	??1CCarnageEvent@@QAE@XZ			; CCarnageEvent::~CCarnageEvent
xdata$x	SEGMENT
__unwindtable$??1CCarnageEvent@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCarnageEvent@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCarnageEvent@@QAE@XZ$1
__ehfuncinfo$??1CCarnageEvent@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCarnageEvent@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCarnageEvent@@QAE@XZ PROC				; CCarnageEvent::~CCarnageEvent
; _this$ = ecx

; 61   : {

  00200	55		 push	 ebp
  00201	8b ec		 mov	 ebp, esp
  00203	6a ff		 push	 -1
  00205	68 00 00 00 00	 push	 __ehhandler$??1CCarnageEvent@@QAE@XZ
  0020a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00210	50		 push	 eax
  00211	83 ec 44	 sub	 esp, 68			; 00000044H
  00214	53		 push	 ebx
  00215	56		 push	 esi
  00216	57		 push	 edi
  00217	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0021c	33 c5		 xor	 eax, ebp
  0021e	50		 push	 eax
  0021f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00222	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00228	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0022b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 62   : }

  00232	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00235	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  0023b	e8 00 00 00 00	 call	 ??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
  00240	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00244	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00247	83 c1 70	 add	 ecx, 112		; 00000070H
  0024a	e8 00 00 00 00	 call	 ??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
  0024f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00256	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00259	83 c1 60	 add	 ecx, 96			; 00000060H
  0025c	e8 00 00 00 00	 call	 ??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
  00261	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00264	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0026b	59		 pop	 ecx
  0026c	5f		 pop	 edi
  0026d	5e		 pop	 esi
  0026e	5b		 pop	 ebx
  0026f	8b e5		 mov	 esp, ebp
  00271	5d		 pop	 ebp
  00272	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CCarnageEvent@@QAE@XZ$0:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 60	 add	 ecx, 96			; 00000060H
  00045	e9 00 00 00 00	 jmp	 ??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
__unwindfunclet$??1CCarnageEvent@@QAE@XZ$1:
  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	83 c1 70	 add	 ecx, 112		; 00000070H
  00050	e9 00 00 00 00	 jmp	 ??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
__ehhandler$??1CCarnageEvent@@QAE@XZ:
  00055	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00059	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005c	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CCarnageEvent@@QAE@XZ
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CCarnageEvent@@QAE@XZ ENDP				; CCarnageEvent::~CCarnageEvent
PUBLIC	?Read@CCarnageEvent@@QAEXPAD@Z			; CCarnageEvent::Read
PUBLIC	??_C@_0BP@KPEFIDFF@ExData?2Events?2CarnageEvent?4dat?$AA@ ; `string'
PUBLIC	?Load@CCarnageEvent@@QAEXXZ			; CCarnageEvent::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT ??_C@_0BP@KPEFIDFF@ExData?2Events?2CarnageEvent?4dat?$AA@
CONST	SEGMENT
??_C@_0BP@KPEFIDFF@ExData?2Events?2CarnageEvent?4dat?$AA@ DB 'ExData\Even'
	DB	'ts\CarnageEvent.dat', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CCarnageEvent@@QAEXXZ PROC			; CCarnageEvent::Load
; _this$ = ecx

; 65   : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 44	 sub	 esp, 68			; 00000044H
  00286	53		 push	 ebx
  00287	56		 push	 esi
  00288	57		 push	 edi
  00289	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   : 	if(this->m_EventStatus == eCARNAGE_STATUS_WAIT || this->m_EventStatus == eCARNAGE_STATUS_START)

  0028c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028f	83 38 01	 cmp	 DWORD PTR [eax], 1
  00292	74 08		 je	 SHORT $LN2@Load
  00294	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00297	83 38 02	 cmp	 DWORD PTR [eax], 2
  0029a	75 05		 jne	 SHORT $LN3@Load
$LN2@Load:

; 67   : 	{
; 68   : 		return;

  0029c	e9 7d 01 00 00	 jmp	 $LN4@Load
$LN3@Load:

; 69   : 	}
; 70   : 
; 71   : 	this->m_Enable = 0;

  002a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a4	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 72   : 
; 73   : 	if(!g_ExLicense.CheckUser(eExUB::Local)  &&
; 74   : 	   !g_ExLicense.CheckUser(eExUB::Gredy)  &&
; 75   : 	   !g_ExLicense.CheckUser(eExUB::Gredy2) &&
; 76   : 	   !g_ExLicense.CheckUser(eExUB::GredyLocal) &&
; 77   : 	   !g_ExLicense.CheckUser(eExUB::Artem) &&
; 78   : 	   !g_ExLicense.CheckUser(eExUB::Artem2) &&
; 79   : 	   !g_ExLicense.CheckUser(eExUB::ulasevich) &&
; 80   : 	    !g_ExLicense.CheckUser(eExUB::ulasevich2))

  002ab	6a 00		 push	 0
  002ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002b2	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  002b7	0f b6 c0	 movzx	 eax, al
  002ba	85 c0		 test	 eax, eax
  002bc	0f 85 8a 00 00
	00		 jne	 $LN1@Load
  002c2	6a 20		 push	 32			; 00000020H
  002c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002c9	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  002ce	0f b6 c0	 movzx	 eax, al
  002d1	85 c0		 test	 eax, eax
  002d3	75 77		 jne	 SHORT $LN1@Load
  002d5	6a 22		 push	 34			; 00000022H
  002d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002dc	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  002e1	0f b6 c0	 movzx	 eax, al
  002e4	85 c0		 test	 eax, eax
  002e6	75 64		 jne	 SHORT $LN1@Load
  002e8	6a 21		 push	 33			; 00000021H
  002ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002ef	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  002f4	0f b6 c0	 movzx	 eax, al
  002f7	85 c0		 test	 eax, eax
  002f9	75 51		 jne	 SHORT $LN1@Load
  002fb	6a 30		 push	 48			; 00000030H
  002fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00302	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00307	0f b6 c0	 movzx	 eax, al
  0030a	85 c0		 test	 eax, eax
  0030c	75 3e		 jne	 SHORT $LN1@Load
  0030e	6a 31		 push	 49			; 00000031H
  00310	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00315	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0031a	0f b6 c0	 movzx	 eax, al
  0031d	85 c0		 test	 eax, eax
  0031f	75 2b		 jne	 SHORT $LN1@Load
  00321	6a 17		 push	 23			; 00000017H
  00323	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00328	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0032d	0f b6 c0	 movzx	 eax, al
  00330	85 c0		 test	 eax, eax
  00332	75 18		 jne	 SHORT $LN1@Load
  00334	6a 24		 push	 36			; 00000024H
  00336	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0033b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00340	0f b6 c0	 movzx	 eax, al
  00343	85 c0		 test	 eax, eax
  00345	75 05		 jne	 SHORT $LN1@Load

; 81   : 	{
; 82   : 		return;

  00347	e9 d2 00 00 00	 jmp	 $LN4@Load
$LN1@Load:

; 83   : 	}
; 84   : 	
; 85   : 	this->m_MapNumber = 0;

  0034c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0034f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 86   : 	this->m_MapX = 0;

  00356	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00359	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 87   : 	this->m_MapY = 0;

  00360	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00363	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 88   : 	this->m_OpenTime = 0;

  0036a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0036d	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 89   : 	this->m_PlayTime = 0;

  00374	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00377	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 90   : 	this->m_EndTime = 0;

  0037e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00381	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 91   : 
; 92   : 	this->m_NpcClass = 0;

  00388	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0038b	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 93   : 	this->m_NpcMap = 0;

  00392	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00395	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 94   : 	this->m_NpcX = 0;

  0039c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0039f	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 95   : 	this->m_NpcY = 0;

  003a6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003a9	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 96   : 
; 97   : 	this->m_TicketType = 0;

  003b0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003b3	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 98   : 	this->m_TicketIndex = 0;

  003ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003bd	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 99   : 	this->m_TicketLevel = 0;

  003c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003c7	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0

; 100  : 
; 101  : 	this->m_RewardItemCount = 0;

  003ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003d1	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 102  : 	this->m_RewardAncentRate = 0;

  003d8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003db	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0

; 103  : 
; 104  : 	this->m_TimeData.clear();

  003e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e5	83 c1 60	 add	 ecx, 96			; 00000060H
  003e8	e8 00 00 00 00	 call	 ?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::clear

; 105  : 	this->m_MonsterData.clear();

  003ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003f0	83 c1 70	 add	 ecx, 112		; 00000070H
  003f3	e8 00 00 00 00	 call	 ?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::clear

; 106  : 	this->m_ItemData.clear();

  003f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fb	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00401	e8 00 00 00 00	 call	 ?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::clear

; 107  : 
; 108  : 	this->Read(gDirPath.GetNewPath("ExData\\Events\\CarnageEvent.dat"));

  00406	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KPEFIDFF@ExData?2Events?2CarnageEvent?4dat?$AA@
  0040b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00410	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00415	50		 push	 eax
  00416	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00419	e8 00 00 00 00	 call	 ?Read@CCarnageEvent@@QAEXPAD@Z ; CCarnageEvent::Read
$LN4@Load:

; 109  : }

  0041e	5f		 pop	 edi
  0041f	5e		 pop	 esi
  00420	5b		 pop	 ebx
  00421	8b e5		 mov	 esp, ebp
  00423	5d		 pop	 ebp
  00424	c3		 ret	 0
?Load@CCarnageEvent@@QAEXXZ ENDP			; CCarnageEvent::Load
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::push_back
PUBLIC	?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::push_back
PUBLIC	?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::push_back
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	_fclose:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_List$231641 = -152					; size = 96
_List$231629 = -56					; size = 32
_List$231623 = -24					; size = 8
_iType$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Read@CCarnageEvent@@QAEXPAD@Z PROC			; CCarnageEvent::Read
; _this$ = ecx

; 112  : {

  00430	55		 push	 ebp
  00431	8b ec		 mov	 ebp, esp
  00433	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00439	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0043e	33 c5		 xor	 eax, ebp
  00440	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00443	53		 push	 ebx
  00444	56		 push	 esi
  00445	57		 push	 edi
  00446	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 	SMDFile = fopen(filename, "r");

  00449	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0044e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00451	50		 push	 eax
  00452	e8 00 00 00 00	 call	 _fopen
  00457	83 c4 08	 add	 esp, 8
  0045a	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 114  : 
; 115  : 	if(SMDFile == NULL)

  0045f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00466	75 22		 jne	 SHORT $LN28@Read

; 116  : 	{
; 117  : 		LogAdd(lMsg.Get(MSGGET(1, 198)), filename);

  00468	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0046b	50		 push	 eax
  0046c	68 c6 01 00 00	 push	 454			; 000001c6H
  00471	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00476	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0047b	50		 push	 eax
  0047c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00482	83 c4 08	 add	 esp, 8

; 118  : 		return;

  00485	e9 2b 05 00 00	 jmp	 $LN29@Read
$LN28@Read:

; 119  : 	}
; 120  : 
; 121  : 	SMDToken Token;
; 122  : 
; 123  : 	int iType = -1;

  0048a	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _iType$[ebp], -1
$LN27@Read:

; 124  : 
; 125  : 	while(true)

  00491	b8 01 00 00 00	 mov	 eax, 1
  00496	85 c0		 test	 eax, eax
  00498	0f 84 f7 04 00
	00		 je	 $LN26@Read

; 126  : 	{
; 127  : 		Token = GetToken();

  0049e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004a3	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 128  : 
; 129  :         if(Token == END)

  004a6	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  004aa	75 05		 jne	 SHORT $LN25@Read

; 130  : 		{
; 131  :             break;

  004ac	e9 e4 04 00 00	 jmp	 $LN26@Read
$LN25@Read:

; 132  : 		}
; 133  : 
; 134  : 		iType = (int)TokenNumber;

  004b1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004b7	e8 00 00 00 00	 call	 __ftol2_sse
  004bc	89 45 f0	 mov	 DWORD PTR _iType$[ebp], eax

; 135  : 
; 136  : 		if(iType < 0 || iType > 6)

  004bf	83 7d f0 00	 cmp	 DWORD PTR _iType$[ebp], 0
  004c3	7c 06		 jl	 SHORT $LN23@Read
  004c5	83 7d f0 06	 cmp	 DWORD PTR _iType$[ebp], 6
  004c9	7e 05		 jle	 SHORT $LN24@Read
$LN23@Read:

; 137  : 		{
; 138  : 			break;

  004cb	e9 c5 04 00 00	 jmp	 $LN26@Read
$LN24@Read:

; 139  : 		}
; 140  : 
; 141  : 		while(true)

  004d0	b8 01 00 00 00	 mov	 eax, 1
  004d5	85 c0		 test	 eax, eax
  004d7	0f 84 b3 04 00
	00		 je	 $LN21@Read

; 142  : 		{
; 143  : 			if(iType == 0)

  004dd	83 7d f0 00	 cmp	 DWORD PTR _iType$[ebp], 0
  004e1	0f 85 cf 00 00
	00		 jne	 $LN20@Read

; 144  : 			{
; 145  : 				Token = GetToken();

  004e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004ec	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 146  : 
; 147  : 				if(!strcmp("end", TokenString))

  004ef	68 00 00 00 00	 push	 OFFSET _TokenString
  004f4	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  004f9	e8 00 00 00 00	 call	 _strcmp
  004fe	83 c4 08	 add	 esp, 8
  00501	85 c0		 test	 eax, eax
  00503	75 05		 jne	 SHORT $LN19@Read

; 148  : 				{
; 149  : 					break;

  00505	e9 86 04 00 00	 jmp	 $LN21@Read
$LN19@Read:

; 150  : 				}
; 151  : 
; 152  : 				this->m_Enable = (int)TokenNumber;

  0050a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00510	e8 00 00 00 00	 call	 __ftol2_sse
  00515	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00518	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 153  : 
; 154  : 				Token = GetToken();

  0051b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00520	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 155  : 				this->m_MapNumber = (int)TokenNumber;

  00523	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00529	e8 00 00 00 00	 call	 __ftol2_sse
  0052e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00531	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 156  : 
; 157  : 				Token = GetToken();

  00534	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00539	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 158  : 				this->m_MapX = (int)TokenNumber;

  0053c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00542	e8 00 00 00 00	 call	 __ftol2_sse
  00547	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0054a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 159  : 
; 160  : 				Token = GetToken();

  0054d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00552	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 161  : 				this->m_MapY = (int)TokenNumber;

  00555	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0055b	e8 00 00 00 00	 call	 __ftol2_sse
  00560	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00563	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 162  : 
; 163  : 				Token = GetToken();

  00566	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0056b	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 164  : 				this->m_OpenTime = (int)TokenNumber;

  0056e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00574	e8 00 00 00 00	 call	 __ftol2_sse
  00579	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0057c	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 165  : 
; 166  : 				Token = GetToken();

  0057f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00584	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 167  : 				this->m_PlayTime = (int)TokenNumber;

  00587	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0058d	e8 00 00 00 00	 call	 __ftol2_sse
  00592	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00595	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 168  : 
; 169  : 				Token = GetToken();

  00598	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0059d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 170  : 				this->m_EndTime = (int)TokenNumber;

  005a0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005a6	e8 00 00 00 00	 call	 __ftol2_sse
  005ab	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005ae	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  005b1	e9 d5 03 00 00	 jmp	 $LN2@Read
$LN20@Read:

; 171  : 			}
; 172  : 			else if(iType == 1)

  005b6	83 7d f0 01	 cmp	 DWORD PTR _iType$[ebp], 1
  005ba	0f 85 84 00 00
	00		 jne	 $LN17@Read

; 173  : 			{
; 174  : 				Token = GetToken();

  005c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005c5	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 175  : 
; 176  : 				if(!strcmp("end", TokenString))

  005c8	68 00 00 00 00	 push	 OFFSET _TokenString
  005cd	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  005d2	e8 00 00 00 00	 call	 _strcmp
  005d7	83 c4 08	 add	 esp, 8
  005da	85 c0		 test	 eax, eax
  005dc	75 05		 jne	 SHORT $LN16@Read

; 177  : 				{
; 178  : 					break;

  005de	e9 ad 03 00 00	 jmp	 $LN21@Read
$LN16@Read:

; 179  : 				}
; 180  : 
; 181  : 				this->m_NpcClass = (int)TokenNumber;

  005e3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005e9	e8 00 00 00 00	 call	 __ftol2_sse
  005ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005f1	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 182  : 
; 183  : 				Token = GetToken();

  005f4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005f9	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 184  : 				this->m_NpcMap = (int)TokenNumber;

  005fc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00602	e8 00 00 00 00	 call	 __ftol2_sse
  00607	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0060a	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 185  : 
; 186  : 				Token = GetToken();

  0060d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00612	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 187  : 				this->m_NpcX = (int)TokenNumber;

  00615	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0061b	e8 00 00 00 00	 call	 __ftol2_sse
  00620	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00623	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 188  : 
; 189  : 				Token = GetToken();

  00626	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0062b	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 190  : 				this->m_NpcY = (int)TokenNumber;

  0062e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00634	e8 00 00 00 00	 call	 __ftol2_sse
  00639	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0063c	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
  0063f	e9 47 03 00 00	 jmp	 $LN2@Read
$LN17@Read:

; 191  : 			}
; 192  : 			else if(iType == 2)

  00644	83 7d f0 02	 cmp	 DWORD PTR _iType$[ebp], 2
  00648	0f 85 84 00 00
	00		 jne	 $LN14@Read

; 193  : 			{
; 194  : 				Token = GetToken();

  0064e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00653	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 195  : 
; 196  : 				if(!strcmp("end", TokenString))

  00656	68 00 00 00 00	 push	 OFFSET _TokenString
  0065b	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00660	e8 00 00 00 00	 call	 _strcmp
  00665	83 c4 08	 add	 esp, 8
  00668	85 c0		 test	 eax, eax
  0066a	75 05		 jne	 SHORT $LN13@Read

; 197  : 				{
; 198  : 					break;

  0066c	e9 1f 03 00 00	 jmp	 $LN21@Read
$LN13@Read:

; 199  : 				}
; 200  : 
; 201  : 				this->m_TicketActive = (int)TokenNumber;

  00671	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00677	e8 00 00 00 00	 call	 __ftol2_sse
  0067c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0067f	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 202  : 
; 203  : 				Token = GetToken();

  00682	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00687	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 204  : 				this->m_TicketType = (int)TokenNumber;

  0068a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00690	e8 00 00 00 00	 call	 __ftol2_sse
  00695	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00698	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 205  : 
; 206  : 				Token = GetToken();

  0069b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006a0	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 207  : 				this->m_TicketIndex = (int)TokenNumber;

  006a3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006a9	e8 00 00 00 00	 call	 __ftol2_sse
  006ae	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006b1	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 208  : 
; 209  : 				Token = GetToken();

  006b4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006b9	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 210  : 				this->m_TicketLevel = (int)TokenNumber;

  006bc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006c2	e8 00 00 00 00	 call	 __ftol2_sse
  006c7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006ca	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
  006cd	e9 b9 02 00 00	 jmp	 $LN2@Read
$LN14@Read:

; 211  : 			}
; 212  : 			else if(iType == 3)

  006d2	83 7d f0 03	 cmp	 DWORD PTR _iType$[ebp], 3
  006d6	75 52		 jne	 SHORT $LN11@Read

; 213  : 			{
; 214  : 				Token = GetToken();

  006d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006dd	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 215  : 
; 216  : 				if(!strcmp("end", TokenString))

  006e0	68 00 00 00 00	 push	 OFFSET _TokenString
  006e5	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  006ea	e8 00 00 00 00	 call	 _strcmp
  006ef	83 c4 08	 add	 esp, 8
  006f2	85 c0		 test	 eax, eax
  006f4	75 05		 jne	 SHORT $LN10@Read

; 217  : 				{
; 218  : 					break;

  006f6	e9 95 02 00 00	 jmp	 $LN21@Read
$LN10@Read:

; 219  : 				}
; 220  : 
; 221  : 				this->m_RewardItemCount = (int)TokenNumber;

  006fb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00701	e8 00 00 00 00	 call	 __ftol2_sse
  00706	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00709	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 222  : 
; 223  : 				Token = GetToken();

  0070c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00711	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 224  : 				this->m_RewardAncentRate = (int)TokenNumber;

  00714	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0071a	e8 00 00 00 00	 call	 __ftol2_sse
  0071f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00722	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  00725	e9 61 02 00 00	 jmp	 $LN2@Read
$LN11@Read:

; 225  : 			}
; 226  : 			else if(iType == 4)

  0072a	83 7d f0 04	 cmp	 DWORD PTR _iType$[ebp], 4
  0072e	75 5b		 jne	 SHORT $LN8@Read

; 227  : 			{
; 228  : 				Token = GetToken();

  00730	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00735	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 229  : 
; 230  : 				if(!strcmp("end", TokenString))

  00738	68 00 00 00 00	 push	 OFFSET _TokenString
  0073d	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00742	e8 00 00 00 00	 call	 _strcmp
  00747	83 c4 08	 add	 esp, 8
  0074a	85 c0		 test	 eax, eax
  0074c	75 05		 jne	 SHORT $LN7@Read

; 231  : 				{
; 232  : 					break;

  0074e	e9 3d 02 00 00	 jmp	 $LN21@Read
$LN7@Read:

; 233  : 				}
; 234  : 
; 235  : 				CARNAGE_TIME List;
; 236  : 
; 237  : 				List.Hour = (int)TokenNumber;

  00753	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00759	e8 00 00 00 00	 call	 __ftol2_sse
  0075e	89 45 e8	 mov	 DWORD PTR _List$231623[ebp], eax

; 238  : 
; 239  : 				Token = GetToken();

  00761	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00766	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 240  : 				List.Min = (int)TokenNumber;

  00769	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0076f	e8 00 00 00 00	 call	 __ftol2_sse
  00774	89 45 ec	 mov	 DWORD PTR _List$231623[ebp+4], eax

; 241  : 
; 242  : 				this->m_TimeData.push_back(List);

  00777	8d 45 e8	 lea	 eax, DWORD PTR _List$231623[ebp]
  0077a	50		 push	 eax
  0077b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0077e	83 c1 60	 add	 ecx, 96			; 00000060H
  00781	e8 00 00 00 00	 call	 ?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::push_back
  00786	e9 00 02 00 00	 jmp	 $LN2@Read
$LN8@Read:

; 243  : 			}
; 244  : 			else if(iType == 5)

  0078b	83 7d f0 05	 cmp	 DWORD PTR _iType$[ebp], 5
  0078f	0f 85 e2 00 00
	00		 jne	 $LN5@Read

; 245  : 			{
; 246  : 				Token = GetToken();

  00795	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0079a	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 247  : 
; 248  : 				if(!strcmp("end", TokenString))

  0079d	68 00 00 00 00	 push	 OFFSET _TokenString
  007a2	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  007a7	e8 00 00 00 00	 call	 _strcmp
  007ac	83 c4 08	 add	 esp, 8
  007af	85 c0		 test	 eax, eax
  007b1	75 05		 jne	 SHORT $LN4@Read

; 249  : 				{
; 250  : 					break;

  007b3	e9 d8 01 00 00	 jmp	 $LN21@Read
$LN4@Read:

; 251  : 				}
; 252  : 
; 253  : 				CARNAGE_ITEM List;
; 254  : 
; 255  : 				List.Type = (int)TokenNumber;

  007b8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007be	e8 00 00 00 00	 call	 __ftol2_sse
  007c3	89 45 c8	 mov	 DWORD PTR _List$231629[ebp], eax

; 256  : 
; 257  : 				Token = GetToken();

  007c6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007cb	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 258  : 				List.Index = (int)TokenNumber;

  007ce	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007d4	e8 00 00 00 00	 call	 __ftol2_sse
  007d9	89 45 cc	 mov	 DWORD PTR _List$231629[ebp+4], eax

; 259  : 
; 260  : 				Token = GetToken();

  007dc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007e1	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 261  : 				List.MinLevel = (int)TokenNumber;

  007e4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007ea	e8 00 00 00 00	 call	 __ftol2_sse
  007ef	89 45 d0	 mov	 DWORD PTR _List$231629[ebp+8], eax

; 262  : 
; 263  : 				Token = GetToken();

  007f2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007f7	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 264  : 				List.MaxLevel = (int)TokenNumber;

  007fa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00800	e8 00 00 00 00	 call	 __ftol2_sse
  00805	89 45 d4	 mov	 DWORD PTR _List$231629[ebp+12], eax

; 265  : 
; 266  : 				Token = GetToken();

  00808	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0080d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 267  : 				List.Skill = (int)TokenNumber;

  00810	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00816	e8 00 00 00 00	 call	 __ftol2_sse
  0081b	89 45 d8	 mov	 DWORD PTR _List$231629[ebp+16], eax

; 268  : 
; 269  : 				Token = GetToken();

  0081e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00823	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 270  : 				List.Luck = (int)TokenNumber;

  00826	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0082c	e8 00 00 00 00	 call	 __ftol2_sse
  00831	89 45 dc	 mov	 DWORD PTR _List$231629[ebp+20], eax

; 271  : 
; 272  : 				Token = GetToken();

  00834	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00839	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 273  : 				List.Add = (int)TokenNumber;

  0083c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00842	e8 00 00 00 00	 call	 __ftol2_sse
  00847	89 45 e0	 mov	 DWORD PTR _List$231629[ebp+24], eax

; 274  : 
; 275  : 				Token = GetToken();

  0084a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0084f	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 276  : 				List.Exc = (int)TokenNumber;

  00852	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00858	e8 00 00 00 00	 call	 __ftol2_sse
  0085d	89 45 e4	 mov	 DWORD PTR _List$231629[ebp+28], eax

; 277  : 
; 278  : 				this->m_ItemData.push_back(List);

  00860	8d 45 c8	 lea	 eax, DWORD PTR _List$231629[ebp]
  00863	50		 push	 eax
  00864	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00867	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  0086d	e8 00 00 00 00	 call	 ?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::push_back
  00872	e9 14 01 00 00	 jmp	 $LN2@Read
$LN5@Read:

; 279  : 			}
; 280  : 			else if(iType == 6)

  00877	83 7d f0 06	 cmp	 DWORD PTR _iType$[ebp], 6
  0087b	0f 85 0a 01 00
	00		 jne	 $LN2@Read

; 281  : 			{
; 282  : 				Token = GetToken();

  00881	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00886	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 283  : 
; 284  : 				if(!strcmp("end", TokenString))

  00889	68 00 00 00 00	 push	 OFFSET _TokenString
  0088e	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00893	e8 00 00 00 00	 call	 _strcmp
  00898	83 c4 08	 add	 esp, 8
  0089b	85 c0		 test	 eax, eax
  0089d	75 05		 jne	 SHORT $LN1@Read

; 285  : 				{
; 286  : 					break;

  0089f	e9 ec 00 00 00	 jmp	 $LN21@Read
$LN1@Read:

; 287  : 				}
; 288  : 
; 289  : 				CARNAGE_MONSTER_DATA List;
; 290  : 
; 291  : 				List.MobClass = (int)TokenNumber;

  008a4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008aa	e8 00 00 00 00	 call	 __ftol2_sse
  008af	89 85 68 ff ff
	ff		 mov	 DWORD PTR _List$231641[ebp], eax

; 292  : 
; 293  : 				Token = GetToken();

  008b5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008ba	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 294  : 				List.MobX = (int)TokenNumber;

  008bd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008c3	e8 00 00 00 00	 call	 __ftol2_sse
  008c8	89 85 6c ff ff
	ff		 mov	 DWORD PTR _List$231641[ebp+4], eax

; 295  : 
; 296  : 				Token = GetToken();

  008ce	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008d3	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 297  : 				List.MobY = (int)TokenNumber;

  008d6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008dc	e8 00 00 00 00	 call	 __ftol2_sse
  008e1	89 85 70 ff ff
	ff		 mov	 DWORD PTR _List$231641[ebp+8], eax

; 298  : 
; 299  : 				Token = GetToken();

  008e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008ec	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 300  : 				List.MobCount = (int)TokenNumber;

  008ef	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008f5	e8 00 00 00 00	 call	 __ftol2_sse
  008fa	89 85 74 ff ff
	ff		 mov	 DWORD PTR _List$231641[ebp+12], eax

; 301  : 
; 302  : 				Token = GetToken();

  00900	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00905	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 303  : 				List.BossActive = (int)TokenNumber;

  00908	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0090e	e8 00 00 00 00	 call	 __ftol2_sse
  00913	89 85 78 ff ff
	ff		 mov	 DWORD PTR _List$231641[ebp+16], eax

; 304  : 
; 305  : 				Token = GetToken();

  00919	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0091e	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 306  : 				List.BossClass = (int)TokenNumber;

  00921	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00927	e8 00 00 00 00	 call	 __ftol2_sse
  0092c	89 85 7c ff ff
	ff		 mov	 DWORD PTR _List$231641[ebp+20], eax

; 307  : 
; 308  : 				Token = GetToken();

  00932	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00937	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 309  : 				List.BossX = (int)TokenNumber;

  0093a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00940	e8 00 00 00 00	 call	 __ftol2_sse
  00945	89 45 80	 mov	 DWORD PTR _List$231641[ebp+24], eax

; 310  : 
; 311  : 				Token = GetToken();

  00948	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0094d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 312  : 				List.BossY = (int)TokenNumber;

  00950	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00956	e8 00 00 00 00	 call	 __ftol2_sse
  0095b	89 45 84	 mov	 DWORD PTR _List$231641[ebp+28], eax

; 313  : 
; 314  : 				Token = GetToken();

  0095e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00963	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 315  : 				memcpy(List.BossDie, TokenString, 64-1);

  00966	6a 3f		 push	 63			; 0000003fH
  00968	68 00 00 00 00	 push	 OFFSET _TokenString
  0096d	8d 45 88	 lea	 eax, DWORD PTR _List$231641[ebp+32]
  00970	50		 push	 eax
  00971	e8 00 00 00 00	 call	 _memcpy
  00976	83 c4 0c	 add	 esp, 12			; 0000000cH

; 316  : 
; 317  : 				this->m_MonsterData.push_back(List);

  00979	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _List$231641[ebp]
  0097f	50		 push	 eax
  00980	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00983	83 c1 70	 add	 ecx, 112		; 00000070H
  00986	e8 00 00 00 00	 call	 ?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::push_back
$LN2@Read:

; 318  : 			}
; 319  : 		}

  0098b	e9 40 fb ff ff	 jmp	 $LN24@Read
$LN21@Read:

; 320  : 	}

  00990	e9 fc fa ff ff	 jmp	 $LN27@Read
$LN26@Read:

; 321  : 
; 322  : 	fclose(SMDFile);

  00995	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0099a	50		 push	 eax
  0099b	e8 00 00 00 00	 call	 _fclose
  009a0	83 c4 04	 add	 esp, 4

; 323  : 
; 324  : 	LogAdd("%s file load!", filename);

  009a3	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  009a6	50		 push	 eax
  009a7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  009ac	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  009b2	83 c4 08	 add	 esp, 8
$LN29@Read:

; 325  : }

  009b5	5f		 pop	 edi
  009b6	5e		 pop	 esi
  009b7	5b		 pop	 ebx
  009b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009bb	33 cd		 xor	 ecx, ebp
  009bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009c2	8b e5		 mov	 esp, ebp
  009c4	5d		 pop	 ebp
  009c5	c2 04 00	 ret	 4
?Read@CCarnageEvent@@QAEXPAD@Z ENDP			; CCarnageEvent::Read
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  009d0	55		 push	 ebp
  009d1	8b ec		 mov	 ebp, esp
  009d3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  009d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  009de	33 c5		 xor	 eax, ebp
  009e0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  009e3	53		 push	 ebx
  009e4	56		 push	 esi
  009e5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  009e6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  009ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009f2	50		 push	 eax
  009f3	e8 00 00 00 00	 call	 _fgetc
  009f8	83 c4 04	 add	 esp, 4
  009fb	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  009fe	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00a02	83 f9 ff	 cmp	 ecx, -1
  00a05	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00a07	b8 02 00 00 00	 mov	 eax, 2
  00a0c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00a11	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00a13	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a17	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00a1a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  00a1c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00a21	50		 push	 eax
  00a22	e8 00 00 00 00	 call	 _fgetc
  00a27	83 c4 04	 add	 esp, 4
  00a2a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00a2d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00a31	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00a34	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00a36	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a3a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00a3d	74 1c		 je	 SHORT $LN23@GetToken
  00a3f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a43	83 f8 ff	 cmp	 eax, -1
  00a46	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00a48	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00a4d	50		 push	 eax
  00a4e	e8 00 00 00 00	 call	 _fgetc
  00a53	83 c4 04	 add	 esp, 4
  00a56	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00a59	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  00a5b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a5f	83 f8 ff	 cmp	 eax, -1
  00a62	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00a64	b8 02 00 00 00	 mov	 eax, 2
  00a69	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  00a6e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a72	50		 push	 eax
  00a73	e8 00 00 00 00	 call	 _isspace
  00a78	83 c4 04	 add	 esp, 4
  00a7b	85 c0		 test	 eax, eax
  00a7d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00a83	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a87	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00a8d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00a93	83 e9 22	 sub	 ecx, 34			; 00000022H
  00a96	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  00a9c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00aa3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00aa9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  00aaf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00ab6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  00abd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00ac7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00acc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00ad1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00ad6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00ae0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ae5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  00aea	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  00aef	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00af9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00afe	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00b03	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00b08	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00b12	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00b17	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  00b1c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00b21	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  00b2b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00b30	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00b35	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00b3a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b3f	50		 push	 eax
  00b40	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00b44	51		 push	 ecx
  00b45	e8 00 00 00 00	 call	 _ungetc
  00b4a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  00b4d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00b50	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00b53	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b58	50		 push	 eax
  00b59	e8 00 00 00 00	 call	 _getc
  00b5e	83 c4 04	 add	 esp, 4
  00b61	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00b64	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00b68	83 f9 ff	 cmp	 ecx, -1
  00b6b	74 36		 je	 SHORT $LN12@GetToken
  00b6d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b71	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00b74	74 1a		 je	 SHORT $LN11@GetToken
  00b76	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b7a	50		 push	 eax
  00b7b	e8 00 00 00 00	 call	 _isdigit
  00b80	83 c4 04	 add	 esp, 4
  00b83	85 c0		 test	 eax, eax
  00b85	75 09		 jne	 SHORT $LN11@GetToken
  00b87	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b8b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00b8e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00b90	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b93	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00b96	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00b98	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b9b	83 c0 01	 add	 eax, 1
  00b9e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00ba1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00ba3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ba6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00ba9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00bac	50		 push	 eax
  00bad	e8 00 00 00 00	 call	 _atof
  00bb2	83 c4 04	 add	 esp, 4
  00bb5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  00bbb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00bc5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00bca	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  00bcf	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00bd4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00bdb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00be0	50		 push	 eax
  00be1	e8 00 00 00 00	 call	 _getc
  00be6	83 c4 04	 add	 esp, 4
  00be9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00bec	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00bf0	83 f9 ff	 cmp	 ecx, -1
  00bf3	74 1c		 je	 SHORT $LN8@GetToken
  00bf5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00bf9	83 f8 22	 cmp	 eax, 34			; 00000022H
  00bfc	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  00bfe	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c01	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00c04	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00c06	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c09	83 c0 01	 add	 eax, 1
  00c0c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  00c0f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00c11	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c15	83 f8 22	 cmp	 eax, 34			; 00000022H
  00c18	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00c1a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c1f	50		 push	 eax
  00c20	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c24	51		 push	 ecx
  00c25	e8 00 00 00 00	 call	 _ungetc
  00c2a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  00c2d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c30	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00c33	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  00c3d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00c42	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00c47	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  00c4c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c50	50		 push	 eax
  00c51	e8 00 00 00 00	 call	 _isalpha
  00c56	83 c4 04	 add	 esp, 4
  00c59	85 c0		 test	 eax, eax
  00c5b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00c61	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00c68	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c6b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00c6e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00c70	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c73	83 c0 01	 add	 eax, 1
  00c76	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00c79	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c7e	50		 push	 eax
  00c7f	e8 00 00 00 00	 call	 _getc
  00c84	83 c4 04	 add	 esp, 4
  00c87	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00c8a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c8e	83 f9 ff	 cmp	 ecx, -1
  00c91	74 36		 je	 SHORT $LN3@GetToken
  00c93	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c97	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00c9a	74 1a		 je	 SHORT $LN2@GetToken
  00c9c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ca0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00ca3	74 11		 je	 SHORT $LN2@GetToken
  00ca5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ca9	50		 push	 eax
  00caa	e8 00 00 00 00	 call	 _isalnum
  00caf	83 c4 04	 add	 esp, 4
  00cb2	85 c0		 test	 eax, eax
  00cb4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00cb6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00cb9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00cbc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  00cbe	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00cc1	83 c0 01	 add	 eax, 1
  00cc4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00cc7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00cc9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00cce	50		 push	 eax
  00ccf	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00cd3	51		 push	 ecx
  00cd4	e8 00 00 00 00	 call	 _ungetc
  00cd9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  00cdc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00cdf	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00ce2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  00cec	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00cf1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00cf3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00cf5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  00cff	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00d04	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00d06	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00d08	5f		 pop	 edi
  00d09	5e		 pop	 esi
  00d0a	5b		 pop	 ebx
  00d0b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00d0e	33 cd		 xor	 ecx, ebp
  00d10	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00d15	8b e5		 mov	 esp, ebp
  00d17	5d		 pop	 ebp
  00d18	c3		 ret	 0
  00d19	8d 49 00	 npad	 3
$LN35@GetToken:
  00d1c	00 00 00 00	 DD	 $LN10@GetToken
  00d20	00 00 00 00	 DD	 $LN19@GetToken
  00d24	00 00 00 00	 DD	 $LN17@GetToken
  00d28	00 00 00 00	 DD	 $LN14@GetToken
  00d2c	00 00 00 00	 DD	 $LN18@GetToken
  00d30	00 00 00 00	 DD	 $LN16@GetToken
  00d34	00 00 00 00	 DD	 $LN15@GetToken
  00d38	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00d3c	00		 DB	 0
  00d3d	01		 DB	 1
  00d3e	07		 DB	 7
  00d3f	07		 DB	 7
  00d40	07		 DB	 7
  00d41	07		 DB	 7
  00d42	07		 DB	 7
  00d43	07		 DB	 7
  00d44	07		 DB	 7
  00d45	07		 DB	 7
  00d46	02		 DB	 2
  00d47	03		 DB	 3
  00d48	03		 DB	 3
  00d49	07		 DB	 7
  00d4a	03		 DB	 3
  00d4b	03		 DB	 3
  00d4c	03		 DB	 3
  00d4d	03		 DB	 3
  00d4e	03		 DB	 3
  00d4f	03		 DB	 3
  00d50	03		 DB	 3
  00d51	03		 DB	 3
  00d52	03		 DB	 3
  00d53	03		 DB	 3
  00d54	07		 DB	 7
  00d55	04		 DB	 4
  00d56	07		 DB	 7
  00d57	07		 DB	 7
  00d58	07		 DB	 7
  00d59	07		 DB	 7
  00d5a	07		 DB	 7
  00d5b	07		 DB	 7
  00d5c	07		 DB	 7
  00d5d	07		 DB	 7
  00d5e	07		 DB	 7
  00d5f	07		 DB	 7
  00d60	07		 DB	 7
  00d61	07		 DB	 7
  00d62	07		 DB	 7
  00d63	07		 DB	 7
  00d64	07		 DB	 7
  00d65	07		 DB	 7
  00d66	07		 DB	 7
  00d67	07		 DB	 7
  00d68	07		 DB	 7
  00d69	07		 DB	 7
  00d6a	07		 DB	 7
  00d6b	07		 DB	 7
  00d6c	07		 DB	 7
  00d6d	07		 DB	 7
  00d6e	07		 DB	 7
  00d6f	07		 DB	 7
  00d70	07		 DB	 7
  00d71	07		 DB	 7
  00d72	07		 DB	 7
  00d73	07		 DB	 7
  00d74	07		 DB	 7
  00d75	07		 DB	 7
  00d76	07		 DB	 7
  00d77	07		 DB	 7
  00d78	07		 DB	 7
  00d79	07		 DB	 7
  00d7a	07		 DB	 7
  00d7b	07		 DB	 7
  00d7c	07		 DB	 7
  00d7d	07		 DB	 7
  00d7e	07		 DB	 7
  00d7f	07		 DB	 7
  00d80	07		 DB	 7
  00d81	07		 DB	 7
  00d82	07		 DB	 7
  00d83	07		 DB	 7
  00d84	07		 DB	 7
  00d85	07		 DB	 7
  00d86	07		 DB	 7
  00d87	07		 DB	 7
  00d88	07		 DB	 7
  00d89	07		 DB	 7
  00d8a	07		 DB	 7
  00d8b	07		 DB	 7
  00d8c	07		 DB	 7
  00d8d	07		 DB	 7
  00d8e	07		 DB	 7
  00d8f	07		 DB	 7
  00d90	07		 DB	 7
  00d91	07		 DB	 7
  00d92	07		 DB	 7
  00d93	07		 DB	 7
  00d94	07		 DB	 7
  00d95	05		 DB	 5
  00d96	07		 DB	 7
  00d97	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?ProcessStateEnd@CCarnageEvent@@QAEXXZ		; CCarnageEvent::ProcessStateEnd
PUBLIC	?ProcessStateStart@CCarnageEvent@@QAEXXZ	; CCarnageEvent::ProcessStateStart
PUBLIC	?ProcessStateWait@CCarnageEvent@@QAEXXZ		; CCarnageEvent::ProcessStateWait
PUBLIC	?ProcessStateClose@CCarnageEvent@@QAEXXZ	; CCarnageEvent::ProcessStateClose
PUBLIC	?Run@CCarnageEvent@@QAEXXZ			; CCarnageEvent::Run
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\carnageevent.cpp
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Run@CCarnageEvent@@QAEXXZ PROC				; CCarnageEvent::Run
; _this$ = ecx

; 328  : {

  00da0	55		 push	 ebp
  00da1	8b ec		 mov	 ebp, esp
  00da3	83 ec 48	 sub	 esp, 72			; 00000048H
  00da6	53		 push	 ebx
  00da7	56		 push	 esi
  00da8	57		 push	 edi
  00da9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  : 	if(!this->m_Enable)

  00dac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00daf	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00db3	75 02		 jne	 SHORT $LN7@Run

; 330  : 	{
; 331  : 		return;

  00db5	eb 3e		 jmp	 SHORT $LN8@Run
$LN7@Run:

; 332  : 	}
; 333  : 
; 334  : 	switch(this->m_EventStatus)

  00db7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00dba	8b 08		 mov	 ecx, DWORD PTR [eax]
  00dbc	89 4d b8	 mov	 DWORD PTR tv66[ebp], ecx
  00dbf	83 7d b8 03	 cmp	 DWORD PTR tv66[ebp], 3
  00dc3	77 30		 ja	 SHORT $LN8@Run
  00dc5	8b 55 b8	 mov	 edx, DWORD PTR tv66[ebp]
  00dc8	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN10@Run[edx*4]
$LN4@Run:

; 335  : 	{
; 336  : 	case eCARNAGE_STATUS_CLOSE:	
; 337  : 		this->ProcessStateClose();		

  00dcf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dd2	e8 00 00 00 00	 call	 ?ProcessStateClose@CCarnageEvent@@QAEXXZ ; CCarnageEvent::ProcessStateClose

; 338  : 		break;

  00dd7	eb 1c		 jmp	 SHORT $LN8@Run
$LN3@Run:

; 339  : 	case eCARNAGE_STATUS_WAIT:	
; 340  : 		this->ProcessStateWait();		

  00dd9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ddc	e8 00 00 00 00	 call	 ?ProcessStateWait@CCarnageEvent@@QAEXXZ ; CCarnageEvent::ProcessStateWait

; 341  : 		break;

  00de1	eb 12		 jmp	 SHORT $LN8@Run
$LN2@Run:

; 342  : 	case eCARNAGE_STATUS_START:	
; 343  : 		this->ProcessStateStart();		

  00de3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00de6	e8 00 00 00 00	 call	 ?ProcessStateStart@CCarnageEvent@@QAEXXZ ; CCarnageEvent::ProcessStateStart

; 344  : 		break;

  00deb	eb 08		 jmp	 SHORT $LN8@Run
$LN1@Run:

; 345  : 	case eCARNAGE_STATUS_END:	
; 346  : 		this->ProcessStateEnd();		

  00ded	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00df0	e8 00 00 00 00	 call	 ?ProcessStateEnd@CCarnageEvent@@QAEXXZ ; CCarnageEvent::ProcessStateEnd
$LN8@Run:

; 347  : 		break;
; 348  : 	}
; 349  : }

  00df5	5f		 pop	 edi
  00df6	5e		 pop	 esi
  00df7	5b		 pop	 ebx
  00df8	8b e5		 mov	 esp, ebp
  00dfa	5d		 pop	 ebp
  00dfb	c3		 ret	 0
$LN10@Run:
  00dfc	00 00 00 00	 DD	 $LN4@Run
  00e00	00 00 00 00	 DD	 $LN3@Run
  00e04	00 00 00 00	 DD	 $LN2@Run
  00e08	00 00 00 00	 DD	 $LN1@Run
?Run@CCarnageEvent@@QAEXXZ ENDP				; CCarnageEvent::Run
_TEXT	ENDS
PUBLIC	?SetStateWait@CCarnageEvent@@QAEXXZ		; CCarnageEvent::SetStateWait
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator->
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator!=
PUBLIC	?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::end
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
PUBLIC	?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::begin
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetLocalTime@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
$T234657 = -100						; size = 4
$T234658 = -96						; size = 4
_it$231797 = -28					; size = 4
_systime$ = -24						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcessStateClose@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::ProcessStateClose
; _this$ = ecx

; 352  : {

  00e10	55		 push	 ebp
  00e11	8b ec		 mov	 ebp, esp
  00e13	83 ec 64	 sub	 esp, 100		; 00000064H
  00e16	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00e1b	33 c5		 xor	 eax, ebp
  00e1d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00e20	53		 push	 ebx
  00e21	56		 push	 esi
  00e22	57		 push	 edi
  00e23	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 353  : 	SYSTEMTIME systime;
; 354  : 	GetLocalTime(&systime);

  00e26	8d 45 e8	 lea	 eax, DWORD PTR _systime$[ebp]
  00e29	50		 push	 eax
  00e2a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 355  : 
; 356  : 	for(std::vector<CARNAGE_TIME>::iterator it = this->m_TimeData.begin(); it != this->m_TimeData.end(); it++)

  00e30	8d 45 e4	 lea	 eax, DWORD PTR _it$231797[ebp]
  00e33	50		 push	 eax
  00e34	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e37	83 c1 60	 add	 ecx, 96			; 00000060H
  00e3a	e8 00 00 00 00	 call	 ?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::begin
  00e3f	eb 0e		 jmp	 SHORT $LN4@ProcessSta
$LN3@ProcessSta:
  00e41	6a 00		 push	 0
  00e43	8d 45 9c	 lea	 eax, DWORD PTR $T234657[ebp]
  00e46	50		 push	 eax
  00e47	8d 4d e4	 lea	 ecx, DWORD PTR _it$231797[ebp]
  00e4a	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
$LN4@ProcessSta:
  00e4f	8d 45 a0	 lea	 eax, DWORD PTR $T234658[ebp]
  00e52	50		 push	 eax
  00e53	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e56	83 c1 60	 add	 ecx, 96			; 00000060H
  00e59	e8 00 00 00 00	 call	 ?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::end
  00e5e	50		 push	 eax
  00e5f	8d 4d e4	 lea	 ecx, DWORD PTR _it$231797[ebp]
  00e62	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator!=
  00e67	0f b6 c8	 movzx	 ecx, al
  00e6a	85 c9		 test	 ecx, ecx
  00e6c	74 2d		 je	 SHORT $LN5@ProcessSta

; 357  : 	{
; 358  : 		if(it->Hour == systime.wHour && it->Min == systime.wMinute)

  00e6e	8d 4d e4	 lea	 ecx, DWORD PTR _it$231797[ebp]
  00e71	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator->
  00e76	0f b7 4d f0	 movzx	 ecx, WORD PTR _systime$[ebp+8]
  00e7a	39 08		 cmp	 DWORD PTR [eax], ecx
  00e7c	75 1b		 jne	 SHORT $LN1@ProcessSta
  00e7e	8d 4d e4	 lea	 ecx, DWORD PTR _it$231797[ebp]
  00e81	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator->
  00e86	0f b7 4d f2	 movzx	 ecx, WORD PTR _systime$[ebp+10]
  00e8a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00e8d	75 0a		 jne	 SHORT $LN1@ProcessSta

; 359  : 		{
; 360  : 			this->SetStateWait();

  00e8f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e92	e8 00 00 00 00	 call	 ?SetStateWait@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateWait

; 361  : 
; 362  : 			return;

  00e97	eb 02		 jmp	 SHORT $LN5@ProcessSta
$LN1@ProcessSta:

; 363  : 		}
; 364  : 	}

  00e99	eb a6		 jmp	 SHORT $LN3@ProcessSta
$LN5@ProcessSta:

; 365  : }

  00e9b	5f		 pop	 edi
  00e9c	5e		 pop	 esi
  00e9d	5b		 pop	 ebx
  00e9e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ea1	33 cd		 xor	 ecx, ebp
  00ea3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ea8	8b e5		 mov	 esp, ebp
  00eaa	5d		 pop	 ebp
  00eab	c3		 ret	 0
?ProcessStateClose@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::ProcessStateClose
_TEXT	ENDS
PUBLIC	?SetStateStart@CCarnageEvent@@QAEXXZ		; CCarnageEvent::SetStateStart
PUBLIC	??_C@_0CJ@ICODNMCA@?$CFd?5minute?$CIs?$CJ?5left?5before?5Carnage@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
EXTRN	_sprintf:PROC
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ??_C@_0CJ@ICODNMCA@?$CFd?5minute?$CIs?$CJ?5left?5before?5Carnage@
CONST	SEGMENT
??_C@_0CJ@ICODNMCA@?$CFd?5minute?$CIs?$CJ?5left?5before?5Carnage@ DB '%d '
	DB	'minute(s) left before Carnage starts.', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_szTemp$231829 = -144					; size = 128
_iWaitMin$231828 = -16					; size = 4
_iTickMsec$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcessStateWait@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::ProcessStateWait
; _this$ = ecx

; 368  : {

  00eb0	55		 push	 ebp
  00eb1	8b ec		 mov	 ebp, esp
  00eb3	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00eb9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00ebe	33 c5		 xor	 eax, ebp
  00ec0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00ec3	53		 push	 ebx
  00ec4	56		 push	 esi
  00ec5	57		 push	 edi
  00ec6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 369  : 	int iTickMsec = (GetTickCount() - this->m_TickCount);

  00ec9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00ecf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ed2	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  00ed5	89 45 f4	 mov	 DWORD PTR _iTickMsec$[ebp], eax

; 370  : 
; 371  : 	if(iTickMsec >= 1000)

  00ed8	81 7d f4 e8 03
	00 00		 cmp	 DWORD PTR _iTickMsec$[ebp], 1000 ; 000003e8H
  00edf	0f 8c 8a 00 00
	00		 jl	 $LN4@ProcessSta@2

; 372  : 	{
; 373  : 		this->m_TickRemain -= iTickMsec;			

  00ee5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ee8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00eeb	2b 4d f4	 sub	 ecx, DWORD PTR _iTickMsec$[ebp]
  00eee	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ef1	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 374  : 		this->m_TickCount = GetTickCount();

  00ef4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00efa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00efd	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 375  : 
; 376  : 		if(this->m_TickRemain <= (60000 * this->m_OpenTime))

  00f00	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f03	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00f06	69 c9 60 ea 00
	00		 imul	 ecx, 60000		; 0000ea60H
  00f0c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00f0f	39 4a 0c	 cmp	 DWORD PTR [edx+12], ecx
  00f12	7f 5b		 jg	 SHORT $LN4@ProcessSta@2

; 377  : 		{
; 378  : 			if((this->m_TickCount - this->m_TickWait) > 60000)

  00f14	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f17	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f1a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00f1d	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00f20	81 fa 60 ea 00
	00		 cmp	 edx, 60000		; 0000ea60H
  00f26	7e 47		 jle	 SHORT $LN4@ProcessSta@2

; 379  : 			{
; 380  : 				int iWaitMin = (this->m_TickRemain / 60000) + 1;

  00f28	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f2b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00f2e	99		 cdq
  00f2f	b9 60 ea 00 00	 mov	 ecx, 60000		; 0000ea60H
  00f34	f7 f9		 idiv	 ecx
  00f36	83 c0 01	 add	 eax, 1
  00f39	89 45 f0	 mov	 DWORD PTR _iWaitMin$231828[ebp], eax

; 381  : 				char szTemp[128];
; 382  : 				sprintf(szTemp, "%d minute(s) left before Carnage starts.", iWaitMin);

  00f3c	8b 45 f0	 mov	 eax, DWORD PTR _iWaitMin$231828[ebp]
  00f3f	50		 push	 eax
  00f40	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@ICODNMCA@?$CFd?5minute?$CIs?$CJ?5left?5before?5Carnage@
  00f45	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _szTemp$231829[ebp]
  00f4b	51		 push	 ecx
  00f4c	e8 00 00 00 00	 call	 _sprintf
  00f51	83 c4 0c	 add	 esp, 12			; 0000000cH

; 383  : 				AllSendServerMsg(szTemp);

  00f54	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _szTemp$231829[ebp]
  00f5a	50		 push	 eax
  00f5b	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  00f60	83 c4 04	 add	 esp, 4

; 384  : 				this->m_TickWait = GetTickCount();

  00f63	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00f69	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f6c	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN4@ProcessSta@2:

; 385  : 			}
; 386  : 		}
; 387  : 	}
; 388  : 
; 389  : 	if(this->m_TickRemain <= 0)

  00f6f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f72	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00f76	7f 08		 jg	 SHORT $LN5@ProcessSta@2

; 390  : 	{
; 391  : 		this->SetStateStart();

  00f78	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f7b	e8 00 00 00 00	 call	 ?SetStateStart@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateStart
$LN5@ProcessSta@2:

; 392  : 	}
; 393  : }

  00f80	5f		 pop	 edi
  00f81	5e		 pop	 esi
  00f82	5b		 pop	 ebx
  00f83	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f86	33 cd		 xor	 ecx, ebp
  00f88	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f8d	8b e5		 mov	 esp, ebp
  00f8f	5d		 pop	 ebp
  00f90	c3		 ret	 0
?ProcessStateWait@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::ProcessStateWait
_TEXT	ENDS
PUBLIC	?SetStateEnd@CCarnageEvent@@QAEXXZ		; CCarnageEvent::SetStateEnd
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iTickMsec$ = -8					; size = 4
_this$ = -4						; size = 4
?ProcessStateStart@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::ProcessStateStart
; _this$ = ecx

; 396  : {

  00fa0	55		 push	 ebp
  00fa1	8b ec		 mov	 ebp, esp
  00fa3	83 ec 48	 sub	 esp, 72			; 00000048H
  00fa6	53		 push	 ebx
  00fa7	56		 push	 esi
  00fa8	57		 push	 edi
  00fa9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 	int iTickMsec = (GetTickCount() - this->m_TickCount);

  00fac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00fb2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fb5	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  00fb8	89 45 f8	 mov	 DWORD PTR _iTickMsec$[ebp], eax

; 398  : 
; 399  : 	if(iTickMsec >= 1000)

  00fbb	81 7d f8 e8 03
	00 00		 cmp	 DWORD PTR _iTickMsec$[ebp], 1000 ; 000003e8H
  00fc2	7c 1b		 jl	 SHORT $LN2@ProcessSta@3

; 400  : 	{
; 401  : 		this->m_TickRemain -= iTickMsec;			

  00fc4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00fc7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00fca	2b 4d f8	 sub	 ecx, DWORD PTR _iTickMsec$[ebp]
  00fcd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00fd0	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 402  : 		this->m_TickCount = GetTickCount();

  00fd3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00fd9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fdc	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN2@ProcessSta@3:

; 403  : 	}
; 404  : 
; 405  : 	if(this->m_TickRemain <= 0)

  00fdf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00fe2	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00fe6	7f 08		 jg	 SHORT $LN3@ProcessSta@3

; 406  : 	{
; 407  : 		this->SetStateEnd();

  00fe8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00feb	e8 00 00 00 00	 call	 ?SetStateEnd@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateEnd
$LN3@ProcessSta@3:

; 408  : 	}
; 409  : }

  00ff0	5f		 pop	 edi
  00ff1	5e		 pop	 esi
  00ff2	5b		 pop	 ebx
  00ff3	8b e5		 mov	 esp, ebp
  00ff5	5d		 pop	 ebp
  00ff6	c3		 ret	 0
?ProcessStateStart@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::ProcessStateStart
_TEXT	ENDS
PUBLIC	?SetStateClose@CCarnageEvent@@QAEXXZ		; CCarnageEvent::SetStateClose
PUBLIC	??_C@_0CI@NPPBNCDH@?$CFd?5second?$CIs?$CJ?5left?5before?5Carnage@ ; `string'
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0CI@NPPBNCDH@?$CFd?5second?$CIs?$CJ?5left?5before?5Carnage@
CONST	SEGMENT
??_C@_0CI@NPPBNCDH@?$CFd?5second?$CIs?$CJ?5left?5before?5Carnage@ DB '%d '
	DB	'second(s) left before Carnage close.', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_aIndex$231845 = -16					; size = 4
_iEndSec$231844 = -12					; size = 4
_iTickMsec$ = -8					; size = 4
_this$ = -4						; size = 4
?ProcessStateEnd@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::ProcessStateEnd
; _this$ = ecx

; 412  : {

  01000	55		 push	 ebp
  01001	8b ec		 mov	 ebp, esp
  01003	83 ec 50	 sub	 esp, 80			; 00000050H
  01006	53		 push	 ebx
  01007	56		 push	 esi
  01008	57		 push	 edi
  01009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 413  : 	int iTickMsec = (GetTickCount() - this->m_TickCount);

  0100c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01015	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  01018	89 45 f8	 mov	 DWORD PTR _iTickMsec$[ebp], eax

; 414  : 
; 415  : 	if(iTickMsec >= 1000)

  0101b	81 7d f8 e8 03
	00 00		 cmp	 DWORD PTR _iTickMsec$[ebp], 1000 ; 000003e8H
  01022	0f 8c af 00 00
	00		 jl	 $LN7@ProcessSta@4

; 416  : 	{
; 417  : 		this->m_TickRemain -= iTickMsec;			

  01028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0102b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0102e	2b 4d f8	 sub	 ecx, DWORD PTR _iTickMsec$[ebp]
  01031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01034	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 418  : 		this->m_TickCount = GetTickCount();

  01037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0103d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 419  : 
; 420  : 		if(this->m_TickRemain >= 1000 && this->m_TickRemain < (CARNAGE_TIME_END + 1000))

  01043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01046	81 78 0c e8 03
	00 00		 cmp	 DWORD PTR [eax+12], 1000 ; 000003e8H
  0104d	0f 8c 84 00 00
	00		 jl	 $LN7@ProcessSta@4
  01053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01056	81 78 0c 70 17
	00 00		 cmp	 DWORD PTR [eax+12], 6000 ; 00001770H
  0105d	7d 78		 jge	 SHORT $LN7@ProcessSta@4

; 421  : 		{
; 422  : 			int iEndSec = (this->m_TickRemain / 1000);

  0105f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01062	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01065	99		 cdq
  01066	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0106b	f7 f9		 idiv	 ecx
  0106d	89 45 f4	 mov	 DWORD PTR _iEndSec$231844[ebp], eax

; 423  : 
; 424  : 			for(int aIndex = OBJ_STARTUSERINDEX; aIndex < OBJMAX; aIndex++)

  01070	c7 45 f0 b0 36
	00 00		 mov	 DWORD PTR _aIndex$231845[ebp], 14000 ; 000036b0H
  01077	eb 09		 jmp	 SHORT $LN5@ProcessSta@4
$LN4@ProcessSta@4:
  01079	8b 45 f0	 mov	 eax, DWORD PTR _aIndex$231845[ebp]
  0107c	83 c0 01	 add	 eax, 1
  0107f	89 45 f0	 mov	 DWORD PTR _aIndex$231845[ebp], eax
$LN5@ProcessSta@4:
  01082	81 7d f0 98 3a
	00 00		 cmp	 DWORD PTR _aIndex$231845[ebp], 15000 ; 00003a98H
  01089	7d 4c		 jge	 SHORT $LN7@ProcessSta@4

; 425  : 			{
; 426  : 				if(gObj[aIndex].Connected >= PLAYER_PLAYING && gObj[aIndex].MapNumber == this->m_MapNumber)

  0108b	8b 45 f0	 mov	 eax, DWORD PTR _aIndex$231845[ebp]
  0108e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0109a	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0109f	7c 34		 jl	 SHORT $LN2@ProcessSta@4
  010a1	8b 45 f0	 mov	 eax, DWORD PTR _aIndex$231845[ebp]
  010a4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  010aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  010b0	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  010b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010bb	3b 50 18	 cmp	 edx, DWORD PTR [eax+24]
  010be	75 15		 jne	 SHORT $LN2@ProcessSta@4

; 427  : 				{
; 428  : 					MsgOutput(aIndex, "%d second(s) left before Carnage close.", iEndSec);

  010c0	8b 45 f4	 mov	 eax, DWORD PTR _iEndSec$231844[ebp]
  010c3	50		 push	 eax
  010c4	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NPPBNCDH@?$CFd?5second?$CIs?$CJ?5left?5before?5Carnage@
  010c9	8b 4d f0	 mov	 ecx, DWORD PTR _aIndex$231845[ebp]
  010cc	51		 push	 ecx
  010cd	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  010d2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcessSta@4:

; 429  : 				}
; 430  : 			}

  010d5	eb a2		 jmp	 SHORT $LN4@ProcessSta@4
$LN7@ProcessSta@4:

; 431  : 		}
; 432  : 	}
; 433  : 
; 434  : 	if(this->m_TickRemain <= 0)

  010d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010da	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  010de	7f 08		 jg	 SHORT $LN8@ProcessSta@4

; 435  : 	{
; 436  : 		this->SetStateClose();

  010e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010e3	e8 00 00 00 00	 call	 ?SetStateClose@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateClose
$LN8@ProcessSta@4:

; 437  : 	}
; 438  : }

  010e8	5f		 pop	 edi
  010e9	5e		 pop	 esi
  010ea	5b		 pop	 ebx
  010eb	8b e5		 mov	 esp, ebp
  010ed	5d		 pop	 ebp
  010ee	c3		 ret	 0
?ProcessStateEnd@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::ProcessStateEnd
_TEXT	ENDS
PUBLIC	??_C@_0BF@HOCCICLF@Carnage?5Event?5Close?$CB?$AA@ ; `string'
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
;	COMDAT ??_C@_0BF@HOCCICLF@Carnage?5Event?5Close?$CB?$AA@
CONST	SEGMENT
??_C@_0BF@HOCCICLF@Carnage?5Event?5Close?$CB?$AA@ DB 'Carnage Event Close'
	DB	'!', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_aIndex$231855 = -8					; size = 4
_this$ = -4						; size = 4
?SetStateClose@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::SetStateClose
; _this$ = ecx

; 441  : {

  010f0	55		 push	 ebp
  010f1	8b ec		 mov	 ebp, esp
  010f3	83 ec 48	 sub	 esp, 72			; 00000048H
  010f6	53		 push	 ebx
  010f7	56		 push	 esi
  010f8	57		 push	 edi
  010f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 442  : 	this->m_TickCount = GetTickCount();

  010fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01102	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01105	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 443  : 	this->m_TickRemain = 0;

  01108	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0110b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 444  : 	this->m_EventStatus = eCARNAGE_STATUS_CLOSE;

  01112	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01115	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 445  : 
; 446  : 	for(int aIndex = OBJ_STARTUSERINDEX; aIndex < OBJMAX; aIndex++)

  0111b	c7 45 f8 b0 36
	00 00		 mov	 DWORD PTR _aIndex$231855[ebp], 14000 ; 000036b0H
  01122	eb 09		 jmp	 SHORT $LN4@SetStateCl
$LN3@SetStateCl:
  01124	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$231855[ebp]
  01127	83 c0 01	 add	 eax, 1
  0112a	89 45 f8	 mov	 DWORD PTR _aIndex$231855[ebp], eax
$LN4@SetStateCl:
  0112d	81 7d f8 98 3a
	00 00		 cmp	 DWORD PTR _aIndex$231855[ebp], 15000 ; 00003a98H
  01134	7d 45		 jge	 SHORT $LN2@SetStateCl

; 447  : 	{
; 448  : 		if(gObj[aIndex].Connected >= PLAYER_PLAYING && gObj[aIndex].MapNumber == this->m_MapNumber)

  01136	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$231855[ebp]
  01139	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0113f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01145	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0114a	7c 2d		 jl	 SHORT $LN1@SetStateCl
  0114c	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$231855[ebp]
  0114f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0115b	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01163	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01166	3b 50 18	 cmp	 edx, DWORD PTR [eax+24]
  01169	75 0e		 jne	 SHORT $LN1@SetStateCl

; 449  : 		{
; 450  : 			gObjMoveGate(aIndex, 17);

  0116b	6a 11		 push	 17			; 00000011H
  0116d	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$231855[ebp]
  01170	50		 push	 eax
  01171	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  01176	83 c4 08	 add	 esp, 8
$LN1@SetStateCl:

; 451  : 		}
; 452  : 	}

  01179	eb a9		 jmp	 SHORT $LN3@SetStateCl
$LN2@SetStateCl:

; 453  : 
; 454  : 	AllSendServerMsg("Carnage Event Close!");

  0117b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HOCCICLF@Carnage?5Event?5Close?$CB?$AA@
  01180	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  01185	83 c4 04	 add	 esp, 4

; 455  : }

  01188	5f		 pop	 edi
  01189	5e		 pop	 esi
  0118a	5b		 pop	 ebx
  0118b	8b e5		 mov	 esp, ebp
  0118d	5d		 pop	 ebp
  0118e	c3		 ret	 0
?SetStateClose@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::SetStateClose
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?SetStateWait@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::SetStateWait
; _this$ = ecx

; 458  : {

  01190	55		 push	 ebp
  01191	8b ec		 mov	 ebp, esp
  01193	83 ec 44	 sub	 esp, 68			; 00000044H
  01196	53		 push	 ebx
  01197	56		 push	 esi
  01198	57		 push	 edi
  01199	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 459  : 	this->m_TickCount = GetTickCount();

  0119c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  011a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011a5	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 460  : 	this->m_TickRemain = 60000 * this->m_OpenTime;

  011a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011ab	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  011ae	69 c9 60 ea 00
	00		 imul	 ecx, 60000		; 0000ea60H
  011b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  011b7	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 461  : 	this->m_EventStatus = eCARNAGE_STATUS_WAIT;

  011ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011bd	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 462  : }

  011c3	5f		 pop	 edi
  011c4	5e		 pop	 esi
  011c5	5b		 pop	 ebx
  011c6	8b e5		 mov	 esp, ebp
  011c8	5d		 pop	 ebp
  011c9	c3		 ret	 0
?SetStateWait@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::SetStateWait
_TEXT	ENDS
PUBLIC	?AddMonster@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::AddMonster
PUBLIC	?GCMapAttribute@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::GCMapAttribute
PUBLIC	??_C@_0BO@BPGBFDCD@Carnage?5Event?5Start?5to?5fight?$CB?$AA@ ; `string'
;	COMDAT ??_C@_0BO@BPGBFDCD@Carnage?5Event?5Start?5to?5fight?$CB?$AA@
CONST	SEGMENT
??_C@_0BO@BPGBFDCD@Carnage?5Event?5Start?5to?5fight?$CB?$AA@ DB 'Carnage '
	DB	'Event Start to fight!', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_lpUser$231872 = -12					; size = 4
_aIndex$231868 = -8					; size = 4
_this$ = -4						; size = 4
?SetStateStart@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::SetStateStart
; _this$ = ecx

; 465  : {

  011d0	55		 push	 ebp
  011d1	8b ec		 mov	 ebp, esp
  011d3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  011d6	53		 push	 ebx
  011d7	56		 push	 esi
  011d8	57		 push	 edi
  011d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 466  : 	this->m_TickCount = GetTickCount();

  011dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  011e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011e5	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 467  : 	this->m_TickRemain = 60000 * this->m_PlayTime;

  011e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011eb	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  011ee	69 c9 60 ea 00
	00		 imul	 ecx, 60000		; 0000ea60H
  011f4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  011f7	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 468  : 	this->m_EventStatus = eCARNAGE_STATUS_START;

  011fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011fd	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 469  : 	this->m_EventStage = 0;

  01203	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01206	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 470  : 
; 471  : 	AllSendServerMsg("Carnage Event Start to fight!");

  0120d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BPGBFDCD@Carnage?5Event?5Start?5to?5fight?$CB?$AA@
  01212	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  01217	83 c4 04	 add	 esp, 4

; 472  : 
; 473  : 	for(int aIndex = OBJ_STARTUSERINDEX; aIndex < OBJMAX; aIndex++)

  0121a	c7 45 f8 b0 36
	00 00		 mov	 DWORD PTR _aIndex$231868[ebp], 14000 ; 000036b0H
  01221	eb 09		 jmp	 SHORT $LN4@SetStateSt
$LN3@SetStateSt:
  01223	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$231868[ebp]
  01226	83 c0 01	 add	 eax, 1
  01229	89 45 f8	 mov	 DWORD PTR _aIndex$231868[ebp], eax
$LN4@SetStateSt:
  0122c	81 7d f8 98 3a
	00 00		 cmp	 DWORD PTR _aIndex$231868[ebp], 15000 ; 00003a98H
  01233	7d 3d		 jge	 SHORT $LN2@SetStateSt

; 474  : 	{
; 475  : 		LPOBJ lpUser = &gObj[aIndex];

  01235	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$231868[ebp]
  01238	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0123e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01244	89 45 f4	 mov	 DWORD PTR _lpUser$231872[ebp], eax

; 476  : 
; 477  : 		if(lpUser->Connected >= PLAYER_PLAYING && lpUser->MapNumber == this->m_MapNumber)

  01247	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$231872[ebp]
  0124a	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0124e	7c 20		 jl	 SHORT $LN1@SetStateSt
  01250	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$231872[ebp]
  01253	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0125a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0125d	3b 4a 18	 cmp	 ecx, DWORD PTR [edx+24]
  01260	75 0e		 jne	 SHORT $LN1@SetStateSt

; 478  : 		{
; 479  : 			this->GCMapAttribute(aIndex, 1);

  01262	6a 01		 push	 1
  01264	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$231868[ebp]
  01267	50		 push	 eax
  01268	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0126b	e8 00 00 00 00	 call	 ?GCMapAttribute@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::GCMapAttribute
$LN1@SetStateSt:

; 480  : 		}
; 481  : 	}

  01270	eb b1		 jmp	 SHORT $LN3@SetStateSt
$LN2@SetStateSt:

; 482  : 
; 483  : 	this->AddMonster(this->m_EventStage, 0);

  01272	6a 00		 push	 0
  01274	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01277	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0127a	51		 push	 ecx
  0127b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0127e	e8 00 00 00 00	 call	 ?AddMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::AddMonster

; 484  : }

  01283	5f		 pop	 edi
  01284	5e		 pop	 esi
  01285	5b		 pop	 ebx
  01286	8b e5		 mov	 esp, ebp
  01288	5d		 pop	 ebp
  01289	c3		 ret	 0
?SetStateStart@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::SetStateStart
_TEXT	ENDS
PUBLIC	??_C@_0BF@FDFKEFOB@Carnage?5Event?5Ended?$CB?$AA@ ; `string'
PUBLIC	?DelMonster@CCarnageEvent@@QAEXXZ		; CCarnageEvent::DelMonster
;	COMDAT ??_C@_0BF@FDFKEFOB@Carnage?5Event?5Ended?$CB?$AA@
CONST	SEGMENT
??_C@_0BF@FDFKEFOB@Carnage?5Event?5Ended?$CB?$AA@ DB 'Carnage Event Ended'
	DB	'!', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetStateEnd@CCarnageEvent@@QAEXXZ PROC			; CCarnageEvent::SetStateEnd
; _this$ = ecx

; 487  : {

  01290	55		 push	 ebp
  01291	8b ec		 mov	 ebp, esp
  01293	83 ec 44	 sub	 esp, 68			; 00000044H
  01296	53		 push	 ebx
  01297	56		 push	 esi
  01298	57		 push	 edi
  01299	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 488  : 	this->DelMonster();

  0129c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0129f	e8 00 00 00 00	 call	 ?DelMonster@CCarnageEvent@@QAEXXZ ; CCarnageEvent::DelMonster

; 489  : 
; 490  : 	this->m_TickCount = GetTickCount();

  012a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  012aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012ad	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 491  : 	this->m_TickRemain = this->m_PlayTime * 60000;

  012b0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012b3	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  012b6	69 c9 60 ea 00
	00		 imul	 ecx, 60000		; 0000ea60H
  012bc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  012bf	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 492  : 	this->m_EventStatus = eCARNAGE_STATUS_END;

  012c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012c5	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 493  : 
; 494  : 	AllSendServerMsg("Carnage Event Ended!");

  012cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FDFKEFOB@Carnage?5Event?5Ended?$CB?$AA@
  012d0	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  012d5	83 c4 04	 add	 esp, 4

; 495  : }

  012d8	5f		 pop	 edi
  012d9	5e		 pop	 esi
  012da	5b		 pop	 ebx
  012db	8b e5		 mov	 esp, ebp
  012dd	5d		 pop	 ebp
  012de	c3		 ret	 0
?SetStateEnd@CCarnageEvent@@QAEXXZ ENDP			; CCarnageEvent::SetStateEnd
_TEXT	ENDS
PUBLIC	??_C@_0BF@PJLKJOHK@Carnage?5Event?5Close?4?$AA@	; `string'
PUBLIC	??_C@_0CJ@JPOKFCJO@Carnage?5Event?5need?5ticket?5item?5?$CI@ ; `string'
PUBLIC	?NpcDialog@CCarnageEvent@@QAE_NHH@Z		; CCarnageEvent::NpcDialog
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?gObjDeleteItemsCount@@YAHHFFH@Z:PROC		; gObjDeleteItemsCount
EXTRN	?gObjGetItemCountInInventory@@YAHHHH@Z:PROC	; gObjGetItemCountInInventory
;	COMDAT ??_C@_0BF@PJLKJOHK@Carnage?5Event?5Close?4?$AA@
CONST	SEGMENT
??_C@_0BF@PJLKJOHK@Carnage?5Event?5Close?4?$AA@ DB 'Carnage Event Close.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JPOKFCJO@Carnage?5Event?5need?5ticket?5item?5?$CI@
CONST	SEGMENT
??_C@_0CJ@JPOKFCJO@Carnage?5Event?5need?5ticket?5item?5?$CI@ DB 'Carnage '
	DB	'Event need ticket item (%d, %d).', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv72 = -80						; size = 4
tv67 = -80						; size = 4
_lpNpc$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aNpcIndex$ = 12					; size = 4
?NpcDialog@CCarnageEvent@@QAE_NHH@Z PROC		; CCarnageEvent::NpcDialog
; _this$ = ecx

; 498  : {

  012e0	55		 push	 ebp
  012e1	8b ec		 mov	 ebp, esp
  012e3	83 ec 50	 sub	 esp, 80			; 00000050H
  012e6	53		 push	 ebx
  012e7	56		 push	 esi
  012e8	57		 push	 edi
  012e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 499  : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aNpcIndex))

  012ec	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  012f0	7d 09		 jge	 SHORT $LN11@NpcDialog
  012f2	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  012f9	eb 0f		 jmp	 SHORT $LN12@NpcDialog
$LN11@NpcDialog:
  012fb	33 c0		 xor	 eax, eax
  012fd	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  01304	0f 9e c0	 setle	 al
  01307	89 45 b0	 mov	 DWORD PTR tv67[ebp], eax
$LN12@NpcDialog:
  0130a	83 7d b0 00	 cmp	 DWORD PTR tv67[ebp], 0
  0130e	74 24		 je	 SHORT $LN7@NpcDialog
  01310	83 7d 0c 00	 cmp	 DWORD PTR _aNpcIndex$[ebp], 0
  01314	7d 09		 jge	 SHORT $LN13@NpcDialog
  01316	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  0131d	eb 0f		 jmp	 SHORT $LN14@NpcDialog
$LN13@NpcDialog:
  0131f	33 c0		 xor	 eax, eax
  01321	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aNpcIndex$[ebp], 14999 ; 00003a97H
  01328	0f 9e c0	 setle	 al
  0132b	89 45 b0	 mov	 DWORD PTR tv72[ebp], eax
$LN14@NpcDialog:
  0132e	83 7d b0 00	 cmp	 DWORD PTR tv72[ebp], 0
  01332	75 07		 jne	 SHORT $LN8@NpcDialog
$LN7@NpcDialog:

; 500  : 	{
; 501  : 		return false;

  01334	32 c0		 xor	 al, al
  01336	e9 59 01 00 00	 jmp	 $LN9@NpcDialog
$LN8@NpcDialog:

; 502  : 	}
; 503  : 
; 504  : 	LPOBJ lpUser = &gObj[aIndex];

  0133b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0133e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01344	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0134a	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 505  : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  0134d	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  01350	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01356	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0135c	89 45 f4	 mov	 DWORD PTR _lpNpc$[ebp], eax

; 506  : 
; 507  : 	if( lpNpc->Class == this->m_NpcClass && 
; 508  : 		lpNpc->MapNumber == this->m_NpcMap && 
; 509  : 		lpNpc->X == this->m_NpcX && 
; 510  : 		lpNpc->Y == this->m_NpcY )

  0135f	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  01362	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01369	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0136c	3b 4a 30	 cmp	 ecx, DWORD PTR [edx+48]
  0136f	0f 85 1d 01 00
	00		 jne	 $LN6@NpcDialog
  01375	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  01378	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0137f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01382	3b 4a 34	 cmp	 ecx, DWORD PTR [edx+52]
  01385	0f 85 07 01 00
	00		 jne	 $LN6@NpcDialog
  0138b	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  0138e	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  01395	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01398	3b 4a 38	 cmp	 ecx, DWORD PTR [edx+56]
  0139b	0f 85 f1 00 00
	00		 jne	 $LN6@NpcDialog
  013a1	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  013a4	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  013ab	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  013ae	3b 4a 3c	 cmp	 ecx, DWORD PTR [edx+60]
  013b1	0f 85 db 00 00
	00		 jne	 $LN6@NpcDialog

; 511  : 	{
; 512  : 		if(this->m_EventStatus == eCARNAGE_STATUS_WAIT)

  013b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013ba	83 38 01	 cmp	 DWORD PTR [eax], 1
  013bd	0f 85 b0 00 00
	00		 jne	 $LN5@NpcDialog

; 513  : 		{
; 514  : 			if(this->m_TicketActive)

  013c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013c6	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  013ca	0f 84 a1 00 00
	00		 je	 $LN4@NpcDialog

; 515  : 			{
; 516  : 				if(gObjGetItemCountInInventory(aIndex, ITEMGET(this->m_TicketType, this->m_TicketIndex), this->m_TicketLevel) > 0)

  013d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013d3	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  013d6	51		 push	 ecx
  013d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  013da	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  013dd	c1 e0 09	 shl	 eax, 9
  013e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013e3	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  013e6	50		 push	 eax
  013e7	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  013ea	52		 push	 edx
  013eb	e8 00 00 00 00	 call	 ?gObjGetItemCountInInventory@@YAHHHH@Z ; gObjGetItemCountInInventory
  013f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  013f3	85 c0		 test	 eax, eax
  013f5	7e 5b		 jle	 SHORT $LN3@NpcDialog

; 517  : 				{
; 518  : 					gObjDeleteItemsCount(aIndex, ITEMGET(this->m_TicketType, this->m_TicketIndex), this->m_TicketLevel, 1);

  013f7	6a 01		 push	 1
  013f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013fc	0f b7 48 4c	 movzx	 ecx, WORD PTR [eax+76]
  01400	51		 push	 ecx
  01401	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01404	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  01407	c1 e0 09	 shl	 eax, 9
  0140a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0140d	03 41 48	 add	 eax, DWORD PTR [ecx+72]
  01410	50		 push	 eax
  01411	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01414	52		 push	 edx
  01415	e8 00 00 00 00	 call	 ?gObjDeleteItemsCount@@YAHHFFH@Z ; gObjDeleteItemsCount
  0141a	83 c4 10	 add	 esp, 16			; 00000010H

; 519  : 
; 520  : 					gObjTeleport(aIndex, this->m_MapNumber, this->m_MapX, this->m_MapY);	

  0141d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01420	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  01423	51		 push	 ecx
  01424	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01427	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0142a	50		 push	 eax
  0142b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0142e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01431	52		 push	 edx
  01432	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01435	50		 push	 eax
  01436	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  0143b	83 c4 10	 add	 esp, 16			; 00000010H

; 521  : 
; 522  : 					this->GCMapAttribute(aIndex, 0);

  0143e	6a 00		 push	 0
  01440	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01443	50		 push	 eax
  01444	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01447	e8 00 00 00 00	 call	 ?GCMapAttribute@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::GCMapAttribute

; 523  : 
; 524  : 					return true;

  0144c	b0 01		 mov	 al, 1
  0144e	eb 44		 jmp	 SHORT $LN9@NpcDialog

; 525  : 				}
; 526  : 				else

  01450	eb 1f		 jmp	 SHORT $LN4@NpcDialog
$LN3@NpcDialog:

; 527  : 				{
; 528  : 					MsgOutput(aIndex, "Carnage Event need ticket item (%d, %d).", this->m_TicketType, this->m_TicketIndex);

  01452	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01455	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  01458	51		 push	 ecx
  01459	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0145c	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0145f	50		 push	 eax
  01460	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JPOKFCJO@Carnage?5Event?5need?5ticket?5item?5?$CI@
  01465	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01468	51		 push	 ecx
  01469	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0146e	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@NpcDialog:

; 529  : 				}
; 530  : 			}
; 531  : 		}
; 532  : 		else

  01471	eb 1f		 jmp	 SHORT $LN6@NpcDialog
$LN5@NpcDialog:

; 533  : 		{
; 534  : 			MsgOutput(aIndex, "Carnage Event Close.", this->m_TicketType, this->m_TicketIndex);

  01473	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01476	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  01479	51		 push	 ecx
  0147a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0147d	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  01480	50		 push	 eax
  01481	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJLKJOHK@Carnage?5Event?5Close?4?$AA@
  01486	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01489	51		 push	 ecx
  0148a	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0148f	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@NpcDialog:

; 535  : 		}	
; 536  : 	}
; 537  : 
; 538  : 	return false;

  01492	32 c0		 xor	 al, al
$LN9@NpcDialog:

; 539  : }

  01494	5f		 pop	 edi
  01495	5e		 pop	 esi
  01496	5b		 pop	 ebx
  01497	8b e5		 mov	 esp, ebp
  01499	5d		 pop	 ebp
  0149a	c2 08 00	 ret	 8
?NpcDialog@CCarnageEvent@@QAE_NHH@Z ENDP		; CCarnageEvent::NpcDialog
_TEXT	ENDS
PUBLIC	??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@ ; `string'
PUBLIC	??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ ; `string'
PUBLIC	??_C@_0EE@MGLMIPHJ@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z@4JA ; `CCarnageEvent::GetMonsterPos'::`2'::__LINE__Var
PUBLIC	?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z	; CCarnageEvent::GetMonsterPos
EXTRN	_rand:PROC
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?CheckMapCanMove@CMapServerManager@@QAEHH@Z:PROC ; CMapServerManager::CheckMapCanMove
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
;	COMDAT ??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@
CONST	SEGMENT
??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@ DB '[Atta'
	DB	'ckerAdd] No need to load monster for map %d [%d,%d,%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
CONST	SEGMENT
??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ DB 'Monst'
	DB	'er attribute max over %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@MGLMIPHJ@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0EE@MGLMIPHJ@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\carnageevent.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z@4JA DD 021eH ; `CCarnageEvent::GetMonsterPos'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Type$ = 8						; size = 2
_Map$ = 12						; size = 1
_X$ = 16						; size = 1
_Y$ = 20						; size = 1
?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z PROC		; CCarnageEvent::GetMonsterPos
; _this$ = ecx

; 542  : {

  014a0	55		 push	 ebp
  014a1	8b ec		 mov	 ebp, esp
  014a3	83 ec 44	 sub	 esp, 68			; 00000044H
  014a6	53		 push	 ebx
  014a7	56		 push	 esi
  014a8	57		 push	 edi
  014a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 543  : 	if(gMSetBase.m_Count >= OBJ_MAXMONSTER-1)

  014ac	81 3d 84 2c 03
	00 c7 32 00 00	 cmp	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004, 12999 ; 000032c7H
  014b6	7c 23		 jl	 SHORT $LN2@GetMonster

; 544  : 	{
; 545  : 		MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  014b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z@4JA
  014bd	83 c0 03	 add	 eax, 3
  014c0	50		 push	 eax
  014c1	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MGLMIPHJ@d?3?2projects?2exteam6?43?2source?2gam@
  014c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  014cb	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  014d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 546  : 		return -1;

  014d3	83 c8 ff	 or	 eax, -1
  014d6	e9 f7 00 00 00	 jmp	 $LN3@GetMonster
$LN2@GetMonster:

; 547  : 	}
; 548  : 
; 549  : 	if(g_MapServerManager.CheckMapCanMove(Map) == FALSE)

  014db	0f b6 45 0c	 movzx	 eax, BYTE PTR _Map$[ebp]
  014df	50		 push	 eax
  014e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  014e5	e8 00 00 00 00	 call	 ?CheckMapCanMove@CMapServerManager@@QAEHH@Z ; CMapServerManager::CheckMapCanMove
  014ea	85 c0		 test	 eax, eax
  014ec	75 2c		 jne	 SHORT $LN1@GetMonster

; 550  : 	{
; 551  : 		LogAddC(3,"[AttackerAdd] No need to load monster for map %d [%d,%d,%d]",Map,Type,X,Y);

  014ee	0f b6 45 14	 movzx	 eax, BYTE PTR _Y$[ebp]
  014f2	50		 push	 eax
  014f3	0f b6 4d 10	 movzx	 ecx, BYTE PTR _X$[ebp]
  014f7	51		 push	 ecx
  014f8	0f b7 55 08	 movzx	 edx, WORD PTR _Type$[ebp]
  014fc	52		 push	 edx
  014fd	0f b6 45 0c	 movzx	 eax, BYTE PTR _Map$[ebp]
  01501	50		 push	 eax
  01502	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@
  01507	6a 03		 push	 3
  01509	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0150f	83 c4 18	 add	 esp, 24			; 00000018H

; 552  : 		return -1;

  01512	83 c8 ff	 or	 eax, -1
  01515	e9 b8 00 00 00	 jmp	 $LN3@GetMonster
$LN1@GetMonster:

; 553  : 	}
; 554  : 
; 555  : 	gMSetBase.m_Count++;

  0151a	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0151f	83 c0 01	 add	 eax, 1
  01522	a3 84 2c 03 00	 mov	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004, eax

; 556  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Dis			= 6;

  01527	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0152c	c1 e0 04	 shl	 eax, 4
  0152f	c6 80 09 00 00
	00 06		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+9], 6

; 557  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Type		= Type;

  01536	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0153b	c1 e0 04	 shl	 eax, 4
  0153e	66 8b 4d 08	 mov	 cx, WORD PTR _Type$[ebp]
  01542	66 89 88 06 00
	00 00		 mov	 WORD PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+6], cx

; 558  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_MapNumber	= Map;

  01549	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0154e	c1 e0 04	 shl	 eax, 4
  01551	8a 4d 0c	 mov	 cl, BYTE PTR _Map$[ebp]
  01554	88 88 08 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+8], cl

; 559  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_W			= X;

  0155a	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0155f	c1 e0 04	 shl	 eax, 4
  01562	8a 4d 10	 mov	 cl, BYTE PTR _X$[ebp]
  01565	88 88 0d 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+13], cl

; 560  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_H			= Y;

  0156b	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  01570	c1 e0 04	 shl	 eax, 4
  01573	8a 4d 14	 mov	 cl, BYTE PTR _Y$[ebp]
  01576	88 88 0e 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+14], cl

; 561  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_X			= X;

  0157c	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  01581	c1 e0 04	 shl	 eax, 4
  01584	8a 4d 10	 mov	 cl, BYTE PTR _X$[ebp]
  01587	88 88 0a 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+10], cl

; 562  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Y			= Y;

  0158d	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  01592	c1 e0 04	 shl	 eax, 4
  01595	8a 4d 14	 mov	 cl, BYTE PTR _Y$[ebp]
  01598	88 88 0b 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+11], cl

; 563  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_ArrangeType = 0;

  0159e	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  015a3	c1 e0 04	 shl	 eax, 4
  015a6	c6 80 04 00 00
	00 00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+4], 0

; 564  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Dir			= rand() % 8;

  015ad	e8 00 00 00 00	 call	 _rand
  015b2	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  015b7	79 05		 jns	 SHORT $LN5@GetMonster
  015b9	48		 dec	 eax
  015ba	83 c8 f8	 or	 eax, -8			; fffffff8H
  015bd	40		 inc	 eax
$LN5@GetMonster:
  015be	8b 0d 84 2c 03
	00		 mov	 ecx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  015c4	c1 e1 04	 shl	 ecx, 4
  015c7	88 81 0c 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[ecx+12], al

; 565  : 
; 566  : 	return gMSetBase.m_Count;

  015cd	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
$LN3@GetMonster:

; 567  : }

  015d2	5f		 pop	 edi
  015d3	5e		 pop	 esi
  015d4	5b		 pop	 ebx
  015d5	8b e5		 mov	 esp, ebp
  015d7	5d		 pop	 ebp
  015d8	c2 10 00	 ret	 16			; 00000010H
?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z ENDP		; CCarnageEvent::GetMonsterPos
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GDLLADGH@Carnage?5max?5load?5monster?$AA@ ; `string'
PUBLIC	??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
PUBLIC	?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size
PUBLIC	?LoadMonster@CCarnageEvent@@QAEXXZ		; CCarnageEvent::LoadMonster
;	COMDAT ??_C@_0BJ@GDLLADGH@Carnage?5max?5load?5monster?$AA@
CONST	SEGMENT
??_C@_0BJ@GDLLADGH@Carnage?5max?5load?5monster?$AA@ DB 'Carnage max load '
	DB	'monster', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iBossPos$231937 = -52					; size = 4
_iBossY$231936 = -48					; size = 4
_iBossX$231935 = -44					; size = 4
_iBossClass$231934 = -40				; size = 4
_iMobPos$231929 = -36					; size = 4
_n$231925 = -32						; size = 4
_iMobCount$231924 = -28					; size = 4
_iMobY$231923 = -24					; size = 4
_iMobX$231922 = -20					; size = 4
_iMobClass$231921 = -16					; size = 4
_i$231917 = -12						; size = 4
_i$231913 = -8						; size = 4
_this$ = -4						; size = 4
?LoadMonster@CCarnageEvent@@QAEXXZ PROC			; CCarnageEvent::LoadMonster
; _this$ = ecx

; 570  : {

  015e0	55		 push	 ebp
  015e1	8b ec		 mov	 ebp, esp
  015e3	83 ec 74	 sub	 esp, 116		; 00000074H
  015e6	53		 push	 ebx
  015e7	56		 push	 esi
  015e8	57		 push	 edi
  015e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 571  : 	if(this->m_EventStatus == eCARNAGE_STATUS_WAIT || this->m_EventStatus == eCARNAGE_STATUS_START)

  015ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015ef	83 38 01	 cmp	 DWORD PTR [eax], 1
  015f2	74 08		 je	 SHORT $LN15@LoadMonste
  015f4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015f7	83 38 02	 cmp	 DWORD PTR [eax], 2
  015fa	75 05		 jne	 SHORT $LN16@LoadMonste
$LN15@LoadMonste:

; 572  : 	{
; 573  : 		return;

  015fc	e9 f7 02 00 00	 jmp	 $LN17@LoadMonste
$LN16@LoadMonste:

; 574  : 	}
; 575  : 
; 576  : 	this->m_MonsterCount = 0;

  01601	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01604	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 577  : 
; 578  : 	for(int i = 0; i < CARNAGE_MONSTER_MAX; i++)

  0160b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$231913[ebp], 0
  01612	eb 09		 jmp	 SHORT $LN14@LoadMonste
$LN13@LoadMonste:
  01614	8b 45 f8	 mov	 eax, DWORD PTR _i$231913[ebp]
  01617	83 c0 01	 add	 eax, 1
  0161a	89 45 f8	 mov	 DWORD PTR _i$231913[ebp], eax
$LN14@LoadMonste:
  0161d	81 7d f8 f4 01
	00 00		 cmp	 DWORD PTR _i$231913[ebp], 500 ; 000001f4H
  01624	7d 52		 jge	 SHORT $LN12@LoadMonste

; 579  : 	{
; 580  : 		this->m_MonsterBase[i].Stage  = -1;

  01626	8b 45 f8	 mov	 eax, DWORD PTR _i$231913[ebp]
  01629	6b c0 14	 imul	 eax, 20			; 00000014H
  0162c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0162f	c7 84 01 90 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+144], -1

; 581  : 		this->m_MonsterBase[i].aIndex = -1;

  0163a	8b 45 f8	 mov	 eax, DWORD PTR _i$231913[ebp]
  0163d	6b c0 14	 imul	 eax, 20			; 00000014H
  01640	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01643	c7 84 01 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+152], -1

; 582  : 		this->m_MonsterBase[i].Pos	 = -1;

  0164e	8b 45 f8	 mov	 eax, DWORD PTR _i$231913[ebp]
  01651	6b c0 14	 imul	 eax, 20			; 00000014H
  01654	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01657	c7 84 01 9c 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+156], -1

; 583  : 		this->m_MonsterBase[i].Class  = -1;

  01662	8b 45 f8	 mov	 eax, DWORD PTR _i$231913[ebp]
  01665	6b c0 14	 imul	 eax, 20			; 00000014H
  01668	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0166b	c7 84 01 a0 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+160], -1

; 584  : 	}

  01676	eb 9c		 jmp	 SHORT $LN13@LoadMonste
$LN12@LoadMonste:

; 585  : 
; 586  : 	for(int i = 0; i < this->m_MonsterData.size(); i++)

  01678	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$231917[ebp], 0
  0167f	eb 09		 jmp	 SHORT $LN11@LoadMonste
$LN10@LoadMonste:
  01681	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  01684	83 c0 01	 add	 eax, 1
  01687	89 45 f4	 mov	 DWORD PTR _i$231917[ebp], eax
$LN11@LoadMonste:
  0168a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0168d	83 c1 70	 add	 ecx, 112		; 00000070H
  01690	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size
  01695	39 45 f4	 cmp	 DWORD PTR _i$231917[ebp], eax
  01698	0f 83 5a 02 00
	00		 jae	 $LN17@LoadMonste

; 587  : 	{
; 588  : 		int iMobClass = this->m_MonsterData[i].MobClass;

  0169e	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  016a1	50		 push	 eax
  016a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016a5	83 c1 70	 add	 ecx, 112		; 00000070H
  016a8	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  016ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  016af	89 4d f0	 mov	 DWORD PTR _iMobClass$231921[ebp], ecx

; 589  : 		int iMobX = this->m_MonsterData[i].MobX;

  016b2	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  016b5	50		 push	 eax
  016b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016b9	83 c1 70	 add	 ecx, 112		; 00000070H
  016bc	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  016c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  016c4	89 4d ec	 mov	 DWORD PTR _iMobX$231922[ebp], ecx

; 590  : 		int iMobY = this->m_MonsterData[i].MobY;

  016c7	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  016ca	50		 push	 eax
  016cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016ce	83 c1 70	 add	 ecx, 112		; 00000070H
  016d1	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  016d6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  016d9	89 4d e8	 mov	 DWORD PTR _iMobY$231923[ebp], ecx

; 591  : 		int iMobCount = this->m_MonsterData[i].MobCount;

  016dc	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  016df	50		 push	 eax
  016e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016e3	83 c1 70	 add	 ecx, 112		; 00000070H
  016e6	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  016eb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  016ee	89 4d e4	 mov	 DWORD PTR _iMobCount$231924[ebp], ecx

; 592  : 
; 593  : 		for(int n = 0; n < iMobCount; n++)

  016f1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _n$231925[ebp], 0
  016f8	eb 09		 jmp	 SHORT $LN8@LoadMonste
$LN7@LoadMonste:
  016fa	8b 45 e0	 mov	 eax, DWORD PTR _n$231925[ebp]
  016fd	83 c0 01	 add	 eax, 1
  01700	89 45 e0	 mov	 DWORD PTR _n$231925[ebp], eax
$LN8@LoadMonste:
  01703	8b 45 e0	 mov	 eax, DWORD PTR _n$231925[ebp]
  01706	3b 45 e4	 cmp	 eax, DWORD PTR _iMobCount$231924[ebp]
  01709	0f 8d ca 00 00
	00		 jge	 $LN6@LoadMonste

; 594  : 		{
; 595  : 			int iMobPos = this->GetMonsterPos(iMobClass, this->m_MapNumber, iMobX, iMobY);

  0170f	0f b6 45 e8	 movzx	 eax, BYTE PTR _iMobY$231923[ebp]
  01713	50		 push	 eax
  01714	0f b6 4d ec	 movzx	 ecx, BYTE PTR _iMobX$231922[ebp]
  01718	51		 push	 ecx
  01719	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0171c	0f b6 42 18	 movzx	 eax, BYTE PTR [edx+24]
  01720	50		 push	 eax
  01721	0f b7 4d f0	 movzx	 ecx, WORD PTR _iMobClass$231921[ebp]
  01725	51		 push	 ecx
  01726	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01729	e8 00 00 00 00	 call	 ?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z ; CCarnageEvent::GetMonsterPos
  0172e	89 45 dc	 mov	 DWORD PTR _iMobPos$231929[ebp], eax

; 596  : 
; 597  : 			if(iMobPos >= 0)

  01731	83 7d dc 00	 cmp	 DWORD PTR _iMobPos$231929[ebp], 0
  01735	7c 7f		 jl	 SHORT $LN5@LoadMonste

; 598  : 			{
; 599  : 				this->m_MonsterBase[this->m_MonsterCount].Type = 0;

  01737	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0173a	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0173d	6b c9 14	 imul	 ecx, 20			; 00000014H
  01740	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01743	c7 84 0a 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+ecx+148], 0

; 600  : 				this->m_MonsterBase[this->m_MonsterCount].Stage = i;

  0174e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01751	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  01754	6b c9 14	 imul	 ecx, 20			; 00000014H
  01757	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0175a	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  0175d	89 84 0a 90 00
	00 00		 mov	 DWORD PTR [edx+ecx+144], eax

; 601  : 				this->m_MonsterBase[this->m_MonsterCount].aIndex = -1;

  01764	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01767	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0176a	6b c9 14	 imul	 ecx, 20			; 00000014H
  0176d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01770	c7 84 0a 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [edx+ecx+152], -1

; 602  : 				this->m_MonsterBase[this->m_MonsterCount].Pos = iMobPos;

  0177b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0177e	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  01781	6b c9 14	 imul	 ecx, 20			; 00000014H
  01784	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01787	8b 45 dc	 mov	 eax, DWORD PTR _iMobPos$231929[ebp]
  0178a	89 84 0a 9c 00
	00 00		 mov	 DWORD PTR [edx+ecx+156], eax

; 603  : 				this->m_MonsterBase[this->m_MonsterCount].Class = iMobClass;

  01791	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01794	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  01797	6b c9 14	 imul	 ecx, 20			; 00000014H
  0179a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0179d	8b 45 f0	 mov	 eax, DWORD PTR _iMobClass$231921[ebp]
  017a0	89 84 0a a0 00
	00 00		 mov	 DWORD PTR [edx+ecx+160], eax

; 604  : 				this->m_MonsterCount++;

  017a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  017aa	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  017ad	83 c1 01	 add	 ecx, 1
  017b0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  017b3	89 4a 58	 mov	 DWORD PTR [edx+88], ecx
$LN5@LoadMonste:

; 605  : 			}	
; 606  : 
; 607  : 			if(this->m_MonsterCount >= CARNAGE_MONSTER_MAX)

  017b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  017b9	81 78 58 f4 01
	00 00		 cmp	 DWORD PTR [eax+88], 500	; 000001f4H
  017c0	7c 12		 jl	 SHORT $LN4@LoadMonste

; 608  : 			{
; 609  : 				MsgBox("Carnage max load monster");

  017c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GDLLADGH@Carnage?5max?5load?5monster?$AA@
  017c7	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  017cc	83 c4 04	 add	 esp, 4

; 610  : 				return;

  017cf	e9 24 01 00 00	 jmp	 $LN17@LoadMonste
$LN4@LoadMonste:

; 611  : 			}
; 612  : 		}

  017d4	e9 21 ff ff ff	 jmp	 $LN7@LoadMonste
$LN6@LoadMonste:

; 613  : 
; 614  : 		if(this->m_MonsterData[i].BossActive)

  017d9	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  017dc	50		 push	 eax
  017dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017e0	83 c1 70	 add	 ecx, 112		; 00000070H
  017e3	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  017e8	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  017ec	0f 84 01 01 00
	00		 je	 $LN3@LoadMonste

; 615  : 		{
; 616  : 			int iBossClass = this->m_MonsterData[i].BossClass;

  017f2	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  017f5	50		 push	 eax
  017f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017f9	83 c1 70	 add	 ecx, 112		; 00000070H
  017fc	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  01801	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01804	89 4d d8	 mov	 DWORD PTR _iBossClass$231934[ebp], ecx

; 617  : 			int iBossX = this->m_MonsterData[i].BossX;

  01807	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  0180a	50		 push	 eax
  0180b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0180e	83 c1 70	 add	 ecx, 112		; 00000070H
  01811	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  01816	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01819	89 4d d4	 mov	 DWORD PTR _iBossX$231935[ebp], ecx

; 618  : 			int iBossY = this->m_MonsterData[i].BossY;

  0181c	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  0181f	50		 push	 eax
  01820	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01823	83 c1 70	 add	 ecx, 112		; 00000070H
  01826	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  0182b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0182e	89 4d d0	 mov	 DWORD PTR _iBossY$231936[ebp], ecx

; 619  : 
; 620  : 			int iBossPos = this->GetMonsterPos(iBossClass, this->m_MapNumber, iBossX, iBossY);

  01831	0f b6 45 d0	 movzx	 eax, BYTE PTR _iBossY$231936[ebp]
  01835	50		 push	 eax
  01836	0f b6 4d d4	 movzx	 ecx, BYTE PTR _iBossX$231935[ebp]
  0183a	51		 push	 ecx
  0183b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0183e	0f b6 42 18	 movzx	 eax, BYTE PTR [edx+24]
  01842	50		 push	 eax
  01843	0f b7 4d d8	 movzx	 ecx, WORD PTR _iBossClass$231934[ebp]
  01847	51		 push	 ecx
  01848	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0184b	e8 00 00 00 00	 call	 ?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z ; CCarnageEvent::GetMonsterPos
  01850	89 45 cc	 mov	 DWORD PTR _iBossPos$231937[ebp], eax

; 621  : 
; 622  : 			if(iBossPos >= 0)

  01853	83 7d cc 00	 cmp	 DWORD PTR _iBossPos$231937[ebp], 0
  01857	7c 7f		 jl	 SHORT $LN2@LoadMonste

; 623  : 			{
; 624  : 				this->m_MonsterBase[this->m_MonsterCount].Type = 1;

  01859	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0185c	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0185f	6b c9 14	 imul	 ecx, 20			; 00000014H
  01862	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01865	c7 84 0a 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR [edx+ecx+148], 1

; 625  : 				this->m_MonsterBase[this->m_MonsterCount].Stage = i;

  01870	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01873	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  01876	6b c9 14	 imul	 ecx, 20			; 00000014H
  01879	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0187c	8b 45 f4	 mov	 eax, DWORD PTR _i$231917[ebp]
  0187f	89 84 0a 90 00
	00 00		 mov	 DWORD PTR [edx+ecx+144], eax

; 626  : 				this->m_MonsterBase[this->m_MonsterCount].aIndex = -1;

  01886	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01889	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0188c	6b c9 14	 imul	 ecx, 20			; 00000014H
  0188f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01892	c7 84 0a 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [edx+ecx+152], -1

; 627  : 				this->m_MonsterBase[this->m_MonsterCount].Pos = iBossPos;

  0189d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  018a0	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  018a3	6b c9 14	 imul	 ecx, 20			; 00000014H
  018a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  018a9	8b 45 cc	 mov	 eax, DWORD PTR _iBossPos$231937[ebp]
  018ac	89 84 0a 9c 00
	00 00		 mov	 DWORD PTR [edx+ecx+156], eax

; 628  : 				this->m_MonsterBase[this->m_MonsterCount].Class = iBossClass;

  018b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  018b6	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  018b9	6b c9 14	 imul	 ecx, 20			; 00000014H
  018bc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  018bf	8b 45 d8	 mov	 eax, DWORD PTR _iBossClass$231934[ebp]
  018c2	89 84 0a a0 00
	00 00		 mov	 DWORD PTR [edx+ecx+160], eax

; 629  : 				this->m_MonsterCount++;

  018c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  018cc	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  018cf	83 c1 01	 add	 ecx, 1
  018d2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  018d5	89 4a 58	 mov	 DWORD PTR [edx+88], ecx
$LN2@LoadMonste:

; 630  : 			}
; 631  : 
; 632  : 			if(this->m_MonsterCount >= CARNAGE_MONSTER_MAX)

  018d8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  018db	81 78 58 f4 01
	00 00		 cmp	 DWORD PTR [eax+88], 500	; 000001f4H
  018e2	7c 0f		 jl	 SHORT $LN3@LoadMonste

; 633  : 			{
; 634  : 				MsgBox("Carnage max load monster");

  018e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GDLLADGH@Carnage?5max?5load?5monster?$AA@
  018e9	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  018ee	83 c4 04	 add	 esp, 4

; 635  : 				return;

  018f1	eb 05		 jmp	 SHORT $LN17@LoadMonste
$LN3@LoadMonste:

; 636  : 			}
; 637  : 		}
; 638  : 	}

  018f3	e9 89 fd ff ff	 jmp	 $LN10@LoadMonste
$LN17@LoadMonste:

; 639  : }

  018f8	5f		 pop	 edi
  018f9	5e		 pop	 esi
  018fa	5b		 pop	 ebx
  018fb	8b e5		 mov	 esp, ebp
  018fd	5d		 pop	 ebp
  018fe	c3		 ret	 0
?LoadMonster@CCarnageEvent@@QAEXXZ ENDP			; CCarnageEvent::LoadMonster
_TEXT	ENDS
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iMobIndex$231951 = -12					; size = 4
_i$231946 = -8						; size = 4
_this$ = -4						; size = 4
_Stage$ = 8						; size = 4
_Type$ = 12						; size = 4
?AddMonster@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::AddMonster
; _this$ = ecx

; 642  : {	

  01900	55		 push	 ebp
  01901	8b ec		 mov	 ebp, esp
  01903	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01906	53		 push	 ebx
  01907	56		 push	 esi
  01908	57		 push	 edi
  01909	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 643  : 	if(this->m_EventStatus != eCARNAGE_STATUS_START)

  0190c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0190f	83 38 02	 cmp	 DWORD PTR [eax], 2
  01912	74 05		 je	 SHORT $LN7@AddMonster

; 644  : 	{
; 645  : 		return;

  01914	e9 eb 00 00 00	 jmp	 $LN8@AddMonster
$LN7@AddMonster:

; 646  : 	}
; 647  : 
; 648  : 	for(int i = 0; i < this->m_MonsterCount; i++)

  01919	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$231946[ebp], 0
  01920	eb 09		 jmp	 SHORT $LN6@AddMonster
$LN5@AddMonster:
  01922	8b 45 f8	 mov	 eax, DWORD PTR _i$231946[ebp]
  01925	83 c0 01	 add	 eax, 1
  01928	89 45 f8	 mov	 DWORD PTR _i$231946[ebp], eax
$LN6@AddMonster:
  0192b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0192e	8b 4d f8	 mov	 ecx, DWORD PTR _i$231946[ebp]
  01931	3b 48 58	 cmp	 ecx, DWORD PTR [eax+88]
  01934	0f 8d ca 00 00
	00		 jge	 $LN8@AddMonster

; 649  : 	{
; 650  : 		if(this->m_MonsterBase[i].Stage == Stage && this->m_MonsterBase[i].Type == Type)

  0193a	8b 45 f8	 mov	 eax, DWORD PTR _i$231946[ebp]
  0193d	6b c0 14	 imul	 eax, 20			; 00000014H
  01940	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01943	8b 94 01 90 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+144]
  0194a	3b 55 08	 cmp	 edx, DWORD PTR _Stage$[ebp]
  0194d	0f 85 ac 00 00
	00		 jne	 $LN3@AddMonster
  01953	8b 45 f8	 mov	 eax, DWORD PTR _i$231946[ebp]
  01956	6b c0 14	 imul	 eax, 20			; 00000014H
  01959	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0195c	8b 94 01 94 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+148]
  01963	3b 55 0c	 cmp	 edx, DWORD PTR _Type$[ebp]
  01966	0f 85 93 00 00
	00		 jne	 $LN3@AddMonster

; 651  : 		{
; 652  : 			int iMobIndex = gObjAddMonster(this->m_MapNumber);

  0196c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0196f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01972	51		 push	 ecx
  01973	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  01978	83 c4 04	 add	 esp, 4
  0197b	0f bf d0	 movsx	 edx, ax
  0197e	89 55 f4	 mov	 DWORD PTR _iMobIndex$231951[ebp], edx

; 653  : 
; 654  : 			if(iMobIndex >= 0 && iMobIndex < OBJ_MAXMONSTER)

  01981	83 7d f4 00	 cmp	 DWORD PTR _iMobIndex$231951[ebp], 0
  01985	7c 78		 jl	 SHORT $LN3@AddMonster
  01987	81 7d f4 c8 32
	00 00		 cmp	 DWORD PTR _iMobIndex$231951[ebp], 13000 ; 000032c8H
  0198e	7d 6f		 jge	 SHORT $LN3@AddMonster

; 655  : 			{
; 656  : 				this->m_MonsterBase[i].aIndex = iMobIndex; 

  01990	8b 45 f8	 mov	 eax, DWORD PTR _i$231946[ebp]
  01993	6b c0 14	 imul	 eax, 20			; 00000014H
  01996	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01999	8b 55 f4	 mov	 edx, DWORD PTR _iMobIndex$231951[ebp]
  0199c	89 94 01 98 00
	00 00		 mov	 DWORD PTR [ecx+eax+152], edx

; 657  : 
; 658  : 				gObjSetPosMonster(iMobIndex, this->m_MonsterBase[i].Pos);

  019a3	8b 45 f8	 mov	 eax, DWORD PTR _i$231946[ebp]
  019a6	6b c0 14	 imul	 eax, 20			; 00000014H
  019a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019ac	8b 94 01 9c 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+156]
  019b3	52		 push	 edx
  019b4	8b 45 f4	 mov	 eax, DWORD PTR _iMobIndex$231951[ebp]
  019b7	50		 push	 eax
  019b8	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster
  019bd	83 c4 08	 add	 esp, 8

; 659  : 				gObjSetMonster(iMobIndex, this->m_MonsterBase[i].Class);

  019c0	8b 45 f8	 mov	 eax, DWORD PTR _i$231946[ebp]
  019c3	6b c0 14	 imul	 eax, 20			; 00000014H
  019c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019c9	8b 94 01 a0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+160]
  019d0	52		 push	 edx
  019d1	8b 45 f4	 mov	 eax, DWORD PTR _iMobIndex$231951[ebp]
  019d4	50		 push	 eax
  019d5	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  019da	83 c4 08	 add	 esp, 8

; 660  : 
; 661  : 				if(this->m_MonsterBase[i].Type == 0)

  019dd	8b 45 f8	 mov	 eax, DWORD PTR _i$231946[ebp]
  019e0	6b c0 14	 imul	 eax, 20			; 00000014H
  019e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019e6	83 bc 01 94 00
	00 00 00	 cmp	 DWORD PTR [ecx+eax+148], 0
  019ee	75 0f		 jne	 SHORT $LN3@AddMonster

; 662  : 				{
; 663  : 					this->m_StageMonsterCount++;

  019f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  019f3	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  019f6	83 c1 01	 add	 ecx, 1
  019f9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  019fc	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
$LN3@AddMonster:

; 664  : 				}
; 665  : 			}
; 666  : 		}
; 667  : 	}

  019ff	e9 1e ff ff ff	 jmp	 $LN5@AddMonster
$LN8@AddMonster:

; 668  : }

  01a04	5f		 pop	 edi
  01a05	5e		 pop	 esi
  01a06	5b		 pop	 ebx
  01a07	8b e5		 mov	 esp, ebp
  01a09	5d		 pop	 ebp
  01a0a	c2 08 00	 ret	 8
?AddMonster@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::AddMonster
_TEXT	ENDS
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iMobClass$231965 = -20					; size = 4
_iMobPos$231964 = -16					; size = 4
_iMobIndex$231962 = -12					; size = 4
_i$231958 = -8						; size = 4
_this$ = -4						; size = 4
?DelMonster@CCarnageEvent@@QAEXXZ PROC			; CCarnageEvent::DelMonster
; _this$ = ecx

; 671  : {

  01a10	55		 push	 ebp
  01a11	8b ec		 mov	 ebp, esp
  01a13	83 ec 54	 sub	 esp, 84			; 00000054H
  01a16	53		 push	 ebx
  01a17	56		 push	 esi
  01a18	57		 push	 edi
  01a19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 672  : 	if(this->m_EventStatus != eCARNAGE_STATUS_START)

  01a1c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a1f	83 38 02	 cmp	 DWORD PTR [eax], 2
  01a22	74 05		 je	 SHORT $LN6@DelMonster

; 673  : 	{
; 674  : 		return;

  01a24	e9 d9 00 00 00	 jmp	 $LN7@DelMonster
$LN6@DelMonster:

; 675  : 	}
; 676  : 
; 677  : 	for(int i = 0; i < this->m_MonsterCount; i++)

  01a29	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$231958[ebp], 0
  01a30	eb 09		 jmp	 SHORT $LN5@DelMonster
$LN4@DelMonster:
  01a32	8b 45 f8	 mov	 eax, DWORD PTR _i$231958[ebp]
  01a35	83 c0 01	 add	 eax, 1
  01a38	89 45 f8	 mov	 DWORD PTR _i$231958[ebp], eax
$LN5@DelMonster:
  01a3b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a3e	8b 4d f8	 mov	 ecx, DWORD PTR _i$231958[ebp]
  01a41	3b 48 58	 cmp	 ecx, DWORD PTR [eax+88]
  01a44	0f 8d b8 00 00
	00		 jge	 $LN7@DelMonster

; 678  : 	{
; 679  : 		int iMobIndex = this->m_MonsterBase[i].aIndex;

  01a4a	8b 45 f8	 mov	 eax, DWORD PTR _i$231958[ebp]
  01a4d	6b c0 14	 imul	 eax, 20			; 00000014H
  01a50	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a53	8b 94 01 98 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+152]
  01a5a	89 55 f4	 mov	 DWORD PTR _iMobIndex$231962[ebp], edx

; 680  : 
; 681  : 		if(iMobIndex >= 0 && iMobIndex < OBJ_MAXMONSTER)

  01a5d	83 7d f4 00	 cmp	 DWORD PTR _iMobIndex$231962[ebp], 0
  01a61	0f 8c 96 00 00
	00		 jl	 $LN2@DelMonster
  01a67	81 7d f4 c8 32
	00 00		 cmp	 DWORD PTR _iMobIndex$231962[ebp], 13000 ; 000032c8H
  01a6e	0f 8d 89 00 00
	00		 jge	 $LN2@DelMonster

; 682  : 		{
; 683  : 			int iMobPos = this->m_MonsterBase[i].Pos;

  01a74	8b 45 f8	 mov	 eax, DWORD PTR _i$231958[ebp]
  01a77	6b c0 14	 imul	 eax, 20			; 00000014H
  01a7a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a7d	8b 94 01 9c 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+156]
  01a84	89 55 f0	 mov	 DWORD PTR _iMobPos$231964[ebp], edx

; 684  : 			int iMobClass = this->m_MonsterBase[i].Class;

  01a87	8b 45 f8	 mov	 eax, DWORD PTR _i$231958[ebp]
  01a8a	6b c0 14	 imul	 eax, 20			; 00000014H
  01a8d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a90	8b 94 01 a0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+160]
  01a97	89 55 ec	 mov	 DWORD PTR _iMobClass$231965[ebp], edx

; 685  : 
; 686  : 			if(iMobClass == gObj[iMobIndex].Class && gMSetBase.m_Mp[iMobPos].m_MapNumber == gObj[iMobIndex].MapNumber)

  01a9a	8b 45 f4	 mov	 eax, DWORD PTR _iMobIndex$231962[ebp]
  01a9d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01aa3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01aa9	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  01ab1	39 55 ec	 cmp	 DWORD PTR _iMobClass$231965[ebp], edx
  01ab4	75 47		 jne	 SHORT $LN2@DelMonster
  01ab6	8b 45 f0	 mov	 eax, DWORD PTR _iMobPos$231964[ebp]
  01ab9	c1 e0 04	 shl	 eax, 4
  01abc	0f b6 88 08 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+8]
  01ac3	8b 55 f4	 mov	 edx, DWORD PTR _iMobIndex$231962[ebp]
  01ac6	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  01acc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01ad1	0f b6 94 10 49
	01 00 00	 movzx	 edx, BYTE PTR [eax+edx+329]
  01ad9	3b ca		 cmp	 ecx, edx
  01adb	75 20		 jne	 SHORT $LN2@DelMonster

; 687  : 			{
; 688  : 				gObjDel(iMobIndex);

  01add	8b 45 f4	 mov	 eax, DWORD PTR _iMobIndex$231962[ebp]
  01ae0	50		 push	 eax
  01ae1	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  01ae6	83 c4 04	 add	 esp, 4

; 689  : 
; 690  : 				this->m_MonsterBase[i].aIndex = -1; 

  01ae9	8b 45 f8	 mov	 eax, DWORD PTR _i$231958[ebp]
  01aec	6b c0 14	 imul	 eax, 20			; 00000014H
  01aef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01af2	c7 84 01 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+152], -1
$LN2@DelMonster:

; 691  : 			}
; 692  : 		}
; 693  : 	}

  01afd	e9 30 ff ff ff	 jmp	 $LN4@DelMonster
$LN7@DelMonster:

; 694  : }

  01b02	5f		 pop	 edi
  01b03	5e		 pop	 esi
  01b04	5b		 pop	 ebx
  01b05	8b e5		 mov	 esp, ebp
  01b07	5d		 pop	 ebp
  01b08	c3		 ret	 0
?DelMonster@CCarnageEvent@@QAEXXZ ENDP			; CCarnageEvent::DelMonster
_TEXT	ENDS
PUBLIC	?StageMonster@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::StageMonster
PUBLIC	?RewardMonster@CCarnageEvent@@QAEXHHH@Z		; CCarnageEvent::RewardMonster
PUBLIC	?MessageMonster@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::MessageMonster
PUBLIC	?DieMonster@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::DieMonster
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv84 = -80						; size = 4
_iMonsterType$231979 = -12				; size = 4
_i$231973 = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aMonsterIndex$ = 12					; size = 4
?DieMonster@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::DieMonster
; _this$ = ecx

; 697  : {

  01b10	55		 push	 ebp
  01b11	8b ec		 mov	 ebp, esp
  01b13	83 ec 50	 sub	 esp, 80			; 00000050H
  01b16	53		 push	 ebx
  01b17	56		 push	 esi
  01b18	57		 push	 edi
  01b19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 698  : 	if(this->m_EventStatus != eCARNAGE_STATUS_START)

  01b1c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b1f	83 38 02	 cmp	 DWORD PTR [eax], 2
  01b22	74 05		 je	 SHORT $LN6@DieMonster

; 699  : 	{
; 700  : 		return;

  01b24	e9 f3 00 00 00	 jmp	 $LN7@DieMonster
$LN6@DieMonster:

; 701  : 	}
; 702  : 
; 703  : 	for(int i = 0; i < this->m_MonsterCount; i++)

  01b29	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$231973[ebp], 0
  01b30	eb 09		 jmp	 SHORT $LN5@DieMonster
$LN4@DieMonster:
  01b32	8b 45 f8	 mov	 eax, DWORD PTR _i$231973[ebp]
  01b35	83 c0 01	 add	 eax, 1
  01b38	89 45 f8	 mov	 DWORD PTR _i$231973[ebp], eax
$LN5@DieMonster:
  01b3b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b3e	8b 4d f8	 mov	 ecx, DWORD PTR _i$231973[ebp]
  01b41	3b 48 58	 cmp	 ecx, DWORD PTR [eax+88]
  01b44	0f 8d d2 00 00
	00		 jge	 $LN7@DieMonster

; 704  : 	{
; 705  : 		if(this->m_MonsterBase[i].aIndex == aMonsterIndex)

  01b4a	8b 45 f8	 mov	 eax, DWORD PTR _i$231973[ebp]
  01b4d	6b c0 14	 imul	 eax, 20			; 00000014H
  01b50	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b53	8b 94 01 98 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+152]
  01b5a	3b 55 0c	 cmp	 edx, DWORD PTR _aMonsterIndex$[ebp]
  01b5d	0f 85 b4 00 00
	00		 jne	 $LN2@DieMonster

; 706  : 		{
; 707  : 			if(OBJMAX_RANGE(this->m_MonsterBase[i].aIndex))

  01b63	8b 45 f8	 mov	 eax, DWORD PTR _i$231973[ebp]
  01b66	6b c0 14	 imul	 eax, 20			; 00000014H
  01b69	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b6c	83 bc 01 98 00
	00 00 00	 cmp	 DWORD PTR [ecx+eax+152], 0
  01b74	7d 09		 jge	 SHORT $LN9@DieMonster
  01b76	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
  01b7d	eb 1c		 jmp	 SHORT $LN10@DieMonster
$LN9@DieMonster:
  01b7f	8b 55 f8	 mov	 edx, DWORD PTR _i$231973[ebp]
  01b82	6b d2 14	 imul	 edx, 20			; 00000014H
  01b85	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b88	33 c9		 xor	 ecx, ecx
  01b8a	81 bc 10 98 00
	00 00 97 3a 00
	00		 cmp	 DWORD PTR [eax+edx+152], 14999 ; 00003a97H
  01b95	0f 9e c1	 setle	 cl
  01b98	89 4d b0	 mov	 DWORD PTR tv84[ebp], ecx
$LN10@DieMonster:
  01b9b	83 7d b0 00	 cmp	 DWORD PTR tv84[ebp], 0
  01b9f	74 76		 je	 SHORT $LN2@DieMonster

; 708  : 			{
; 709  : 				int iMonsterType = this->m_MonsterBase[i].Type;

  01ba1	8b 45 f8	 mov	 eax, DWORD PTR _i$231973[ebp]
  01ba4	6b c0 14	 imul	 eax, 20			; 00000014H
  01ba7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01baa	8b 94 01 94 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+148]
  01bb1	89 55 f4	 mov	 DWORD PTR _iMonsterType$231979[ebp], edx

; 710  : 
; 711  : 				this->MessageMonster(aMonsterIndex, iMonsterType);

  01bb4	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterType$231979[ebp]
  01bb7	50		 push	 eax
  01bb8	8b 4d 0c	 mov	 ecx, DWORD PTR _aMonsterIndex$[ebp]
  01bbb	51		 push	 ecx
  01bbc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bbf	e8 00 00 00 00	 call	 ?MessageMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::MessageMonster

; 712  : 
; 713  : 				this->RewardMonster(aIndex, aMonsterIndex, iMonsterType);

  01bc4	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterType$231979[ebp]
  01bc7	50		 push	 eax
  01bc8	8b 4d 0c	 mov	 ecx, DWORD PTR _aMonsterIndex$[ebp]
  01bcb	51		 push	 ecx
  01bcc	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01bcf	52		 push	 edx
  01bd0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bd3	e8 00 00 00 00	 call	 ?RewardMonster@CCarnageEvent@@QAEXHHH@Z ; CCarnageEvent::RewardMonster

; 714  : 
; 715  : 				gObjDel(this->m_MonsterBase[i].aIndex);

  01bd8	8b 45 f8	 mov	 eax, DWORD PTR _i$231973[ebp]
  01bdb	6b c0 14	 imul	 eax, 20			; 00000014H
  01bde	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01be1	8b 94 01 98 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+152]
  01be8	52		 push	 edx
  01be9	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  01bee	83 c4 04	 add	 esp, 4

; 716  : 				this->m_MonsterBase[i].aIndex = -1;

  01bf1	8b 45 f8	 mov	 eax, DWORD PTR _i$231973[ebp]
  01bf4	6b c0 14	 imul	 eax, 20			; 00000014H
  01bf7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bfa	c7 84 01 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+152], -1

; 717  : 
; 718  : 				this->StageMonster(aMonsterIndex, iMonsterType);

  01c05	8b 45 f4	 mov	 eax, DWORD PTR _iMonsterType$231979[ebp]
  01c08	50		 push	 eax
  01c09	8b 4d 0c	 mov	 ecx, DWORD PTR _aMonsterIndex$[ebp]
  01c0c	51		 push	 ecx
  01c0d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c10	e8 00 00 00 00	 call	 ?StageMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::StageMonster

; 719  : 
; 720  : 				return;

  01c15	eb 05		 jmp	 SHORT $LN7@DieMonster
$LN2@DieMonster:

; 721  : 			}
; 722  : 		}
; 723  : 	}

  01c17	e9 16 ff ff ff	 jmp	 $LN4@DieMonster
$LN7@DieMonster:

; 724  : }

  01c1c	5f		 pop	 edi
  01c1d	5e		 pop	 esi
  01c1e	5b		 pop	 ebx
  01c1f	8b e5		 mov	 esp, ebp
  01c21	5d		 pop	 ebp
  01c22	c2 08 00	 ret	 8
?DieMonster@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::DieMonster
_TEXT	ENDS
PUBLIC	??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
PUBLIC	?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::size
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
EXTRN	?MakeRewardSetItem@@YAXHEEHH@Z:PROC		; MakeRewardSetItem
EXTRN	?gObjGetRandomItemDropLocation@@YAHHAAE0HHH@Z:PROC ; gObjGetRandomItemDropLocation
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv72 = -116						; size = 4
tv67 = -116						; size = 4
_iExl$232008 = -48					; size = 4
_iAdd$232007 = -44					; size = 4
_iLuck$232006 = -40					; size = 4
_iSkill$232005 = -36					; size = 4
_iLevel$232004 = -32					; size = 4
_iItem$232003 = -28					; size = 4
_iRand$232002 = -24					; size = 4
_i$231997 = -20						; size = 4
_cDropY$ = -14						; size = 1
_cDropX$ = -13						; size = 1
_lpMonster$ = -12					; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aMonsterIndex$ = 12					; size = 4
_MonsterType$ = 16					; size = 4
?RewardMonster@CCarnageEvent@@QAEXHHH@Z PROC		; CCarnageEvent::RewardMonster
; _this$ = ecx

; 727  : {

  01c30	55		 push	 ebp
  01c31	8b ec		 mov	 ebp, esp
  01c33	83 ec 74	 sub	 esp, 116		; 00000074H
  01c36	53		 push	 ebx
  01c37	56		 push	 esi
  01c38	57		 push	 edi
  01c39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 728  : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aMonsterIndex))

  01c3c	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  01c40	7d 09		 jge	 SHORT $LN15@RewardMons
  01c42	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  01c49	eb 0f		 jmp	 SHORT $LN16@RewardMons
$LN15@RewardMons:
  01c4b	33 c0		 xor	 eax, eax
  01c4d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  01c54	0f 9e c0	 setle	 al
  01c57	89 45 8c	 mov	 DWORD PTR tv67[ebp], eax
$LN16@RewardMons:
  01c5a	83 7d 8c 00	 cmp	 DWORD PTR tv67[ebp], 0
  01c5e	74 24		 je	 SHORT $LN11@RewardMons
  01c60	83 7d 0c 00	 cmp	 DWORD PTR _aMonsterIndex$[ebp], 0
  01c64	7d 09		 jge	 SHORT $LN17@RewardMons
  01c66	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  01c6d	eb 0f		 jmp	 SHORT $LN18@RewardMons
$LN17@RewardMons:
  01c6f	33 c0		 xor	 eax, eax
  01c71	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aMonsterIndex$[ebp], 14999 ; 00003a97H
  01c78	0f 9e c0	 setle	 al
  01c7b	89 45 8c	 mov	 DWORD PTR tv72[ebp], eax
$LN18@RewardMons:
  01c7e	83 7d 8c 00	 cmp	 DWORD PTR tv72[ebp], 0
  01c82	75 05		 jne	 SHORT $LN12@RewardMons
$LN11@RewardMons:

; 729  : 	{
; 730  : 		return;

  01c84	e9 c2 02 00 00	 jmp	 $LN13@RewardMons
$LN12@RewardMons:

; 731  : 	}
; 732  : 
; 733  : 	LPOBJ lpUser = &gObj[aIndex];

  01c89	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01c8c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01c92	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01c98	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 734  : 	LPOBJ lpMonster = &gObj[aMonsterIndex];

  01c9b	8b 45 0c	 mov	 eax, DWORD PTR _aMonsterIndex$[ebp]
  01c9e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01ca4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01caa	89 45 f4	 mov	 DWORD PTR _lpMonster$[ebp], eax

; 735  : 
; 736  : 	BYTE cDropX = lpMonster->X;

  01cad	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  01cb0	8a 88 44 01 00
	00		 mov	 cl, BYTE PTR [eax+324]
  01cb6	88 4d f3	 mov	 BYTE PTR _cDropX$[ebp], cl

; 737  : 	BYTE cDropY = lpMonster->Y;

  01cb9	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  01cbc	8a 88 46 01 00
	00		 mov	 cl, BYTE PTR [eax+326]
  01cc2	88 4d f2	 mov	 BYTE PTR _cDropY$[ebp], cl

; 738  : 
; 739  : 	if(MonsterType == 0)

  01cc5	83 7d 10 00	 cmp	 DWORD PTR _MonsterType$[ebp], 0
  01cc9	75 7a		 jne	 SHORT $LN10@RewardMons

; 740  : 	{
; 741  : 		if(!gObjGetRandomItemDropLocation(lpUser->MapNumber, cDropX, cDropY, 4, 4, 10))

  01ccb	6a 0a		 push	 10			; 0000000aH
  01ccd	6a 04		 push	 4
  01ccf	6a 04		 push	 4
  01cd1	8d 45 f2	 lea	 eax, DWORD PTR _cDropY$[ebp]
  01cd4	50		 push	 eax
  01cd5	8d 4d f3	 lea	 ecx, DWORD PTR _cDropX$[ebp]
  01cd8	51		 push	 ecx
  01cd9	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01cdc	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  01ce3	50		 push	 eax
  01ce4	e8 00 00 00 00	 call	 ?gObjGetRandomItemDropLocation@@YAHHAAE0HHH@Z ; gObjGetRandomItemDropLocation
  01ce9	83 c4 18	 add	 esp, 24			; 00000018H
  01cec	85 c0		 test	 eax, eax
  01cee	75 18		 jne	 SHORT $LN9@RewardMons

; 742  : 		{
; 743  : 			cDropX = lpMonster->X;

  01cf0	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  01cf3	8a 88 44 01 00
	00		 mov	 cl, BYTE PTR [eax+324]
  01cf9	88 4d f3	 mov	 BYTE PTR _cDropX$[ebp], cl

; 744  : 			cDropY = lpMonster->Y;

  01cfc	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  01cff	8a 88 46 01 00
	00		 mov	 cl, BYTE PTR [eax+326]
  01d05	88 4d f2	 mov	 BYTE PTR _cDropY$[ebp], cl
$LN9@RewardMons:

; 745  : 		}
; 746  : 
; 747  : 		if(this->m_RewardAncentRate > (rand()%10000))

  01d08	e8 00 00 00 00	 call	 _rand
  01d0d	99		 cdq
  01d0e	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  01d13	f7 f9		 idiv	 ecx
  01d15	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d18	39 50 54	 cmp	 DWORD PTR [eax+84], edx
  01d1b	7e 23		 jle	 SHORT $LN8@RewardMons

; 748  : 		{
; 749  : 			MakeRewardSetItem(aIndex, cDropX, cDropY, 0, lpMonster->MapNumber);

  01d1d	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  01d20	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  01d27	51		 push	 ecx
  01d28	6a 00		 push	 0
  01d2a	0f b6 55 f2	 movzx	 edx, BYTE PTR _cDropY$[ebp]
  01d2e	52		 push	 edx
  01d2f	0f b6 45 f3	 movzx	 eax, BYTE PTR _cDropX$[ebp]
  01d33	50		 push	 eax
  01d34	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01d37	51		 push	 ecx
  01d38	e8 00 00 00 00	 call	 ?MakeRewardSetItem@@YAXHEEHH@Z ; MakeRewardSetItem
  01d3d	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@RewardMons:

; 750  : 		}
; 751  : 	}

  01d40	e9 06 02 00 00	 jmp	 $LN13@RewardMons
$LN10@RewardMons:

; 752  : 	else if(MonsterType == 1)

  01d45	83 7d 10 01	 cmp	 DWORD PTR _MonsterType$[ebp], 1
  01d49	0f 85 fc 01 00
	00		 jne	 $LN13@RewardMons

; 753  : 	{
; 754  : 		for(int i = 0; i < this->m_RewardItemCount; i++)

  01d4f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$231997[ebp], 0
  01d56	eb 09		 jmp	 SHORT $LN5@RewardMons
$LN4@RewardMons:
  01d58	8b 45 ec	 mov	 eax, DWORD PTR _i$231997[ebp]
  01d5b	83 c0 01	 add	 eax, 1
  01d5e	89 45 ec	 mov	 DWORD PTR _i$231997[ebp], eax
$LN5@RewardMons:
  01d61	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d64	8b 4d ec	 mov	 ecx, DWORD PTR _i$231997[ebp]
  01d67	3b 48 50	 cmp	 ecx, DWORD PTR [eax+80]
  01d6a	0f 8d db 01 00
	00		 jge	 $LN13@RewardMons

; 755  : 		{
; 756  : 			if(!gObjGetRandomItemDropLocation(lpMonster->MapNumber, cDropX, cDropY, 4, 4, 10))

  01d70	6a 0a		 push	 10			; 0000000aH
  01d72	6a 04		 push	 4
  01d74	6a 04		 push	 4
  01d76	8d 45 f2	 lea	 eax, DWORD PTR _cDropY$[ebp]
  01d79	50		 push	 eax
  01d7a	8d 4d f3	 lea	 ecx, DWORD PTR _cDropX$[ebp]
  01d7d	51		 push	 ecx
  01d7e	8b 55 f4	 mov	 edx, DWORD PTR _lpMonster$[ebp]
  01d81	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  01d88	50		 push	 eax
  01d89	e8 00 00 00 00	 call	 ?gObjGetRandomItemDropLocation@@YAHHAAE0HHH@Z ; gObjGetRandomItemDropLocation
  01d8e	83 c4 18	 add	 esp, 24			; 00000018H
  01d91	85 c0		 test	 eax, eax
  01d93	75 18		 jne	 SHORT $LN2@RewardMons

; 757  : 			{
; 758  : 				cDropX = lpMonster->X;

  01d95	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  01d98	8a 88 44 01 00
	00		 mov	 cl, BYTE PTR [eax+324]
  01d9e	88 4d f3	 mov	 BYTE PTR _cDropX$[ebp], cl

; 759  : 				cDropY = lpMonster->Y;

  01da1	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  01da4	8a 88 46 01 00
	00		 mov	 cl, BYTE PTR [eax+326]
  01daa	88 4d f2	 mov	 BYTE PTR _cDropY$[ebp], cl
$LN2@RewardMons:

; 760  : 			}
; 761  : 
; 762  : 			int iRand = rand() % this->m_ItemData.size();

  01dad	e8 00 00 00 00	 call	 _rand
  01db2	8b f0		 mov	 esi, eax
  01db4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01db7	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01dbd	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::size
  01dc2	8b c8		 mov	 ecx, eax
  01dc4	8b c6		 mov	 eax, esi
  01dc6	33 d2		 xor	 edx, edx
  01dc8	f7 f1		 div	 ecx
  01dca	89 55 e8	 mov	 DWORD PTR _iRand$232002[ebp], edx

; 763  : 
; 764  : 			int iItem = ITEMGET(this->m_ItemData[iRand].Type, this->m_ItemData[iRand].Index);

  01dcd	8b 45 e8	 mov	 eax, DWORD PTR _iRand$232002[ebp]
  01dd0	50		 push	 eax
  01dd1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dd4	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01dda	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01ddf	8b 30		 mov	 esi, DWORD PTR [eax]
  01de1	c1 e6 09	 shl	 esi, 9
  01de4	8b 4d e8	 mov	 ecx, DWORD PTR _iRand$232002[ebp]
  01de7	51		 push	 ecx
  01de8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01deb	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01df1	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01df6	03 70 04	 add	 esi, DWORD PTR [eax+4]
  01df9	89 75 e4	 mov	 DWORD PTR _iItem$232003[ebp], esi

; 765  : 			int iLevel = this->m_ItemData[iRand].MinLevel;

  01dfc	8b 45 e8	 mov	 eax, DWORD PTR _iRand$232002[ebp]
  01dff	50		 push	 eax
  01e00	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e03	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01e09	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01e0e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01e11	89 4d e0	 mov	 DWORD PTR _iLevel$232004[ebp], ecx

; 766  : 			int iSkill =  this->m_ItemData[iRand].Skill;

  01e14	8b 45 e8	 mov	 eax, DWORD PTR _iRand$232002[ebp]
  01e17	50		 push	 eax
  01e18	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e1b	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01e21	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01e26	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01e29	89 4d dc	 mov	 DWORD PTR _iSkill$232005[ebp], ecx

; 767  : 			int iLuck =  this->m_ItemData[iRand].Luck;

  01e2c	8b 45 e8	 mov	 eax, DWORD PTR _iRand$232002[ebp]
  01e2f	50		 push	 eax
  01e30	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e33	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01e39	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01e3e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01e41	89 4d d8	 mov	 DWORD PTR _iLuck$232006[ebp], ecx

; 768  : 			int iAdd =  this->m_ItemData[iRand].Add;

  01e44	8b 45 e8	 mov	 eax, DWORD PTR _iRand$232002[ebp]
  01e47	50		 push	 eax
  01e48	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e4b	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01e51	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01e56	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01e59	89 4d d4	 mov	 DWORD PTR _iAdd$232007[ebp], ecx

; 769  : 			int iExl =  GenExcOpt(this->m_ItemData[iRand].Exc);

  01e5c	8b 45 e8	 mov	 eax, DWORD PTR _iRand$232002[ebp]
  01e5f	50		 push	 eax
  01e60	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e63	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01e69	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01e6e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01e71	51		 push	 ecx
  01e72	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  01e77	83 c4 04	 add	 esp, 4
  01e7a	89 45 d0	 mov	 DWORD PTR _iExl$232008[ebp], eax

; 770  : 
; 771  : 			if(this->m_ItemData[i].MaxLevel > this->m_ItemData[i].MinLevel)

  01e7d	8b 45 ec	 mov	 eax, DWORD PTR _i$231997[ebp]
  01e80	50		 push	 eax
  01e81	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e84	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01e8a	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01e8f	8b f0		 mov	 esi, eax
  01e91	8b 4d ec	 mov	 ecx, DWORD PTR _i$231997[ebp]
  01e94	51		 push	 ecx
  01e95	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e98	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01e9e	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01ea3	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  01ea6	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  01ea9	7e 55		 jle	 SHORT $LN1@RewardMons

; 772  : 			{
; 773  : 				iLevel = this->m_ItemData[i].MinLevel + (rand() % (this->m_ItemData[i].MaxLevel - this->m_ItemData[i].MinLevel + 1));

  01eab	8b 45 ec	 mov	 eax, DWORD PTR _i$231997[ebp]
  01eae	50		 push	 eax
  01eaf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01eb2	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01eb8	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01ebd	8b f0		 mov	 esi, eax
  01ebf	e8 00 00 00 00	 call	 _rand
  01ec4	8b f8		 mov	 edi, eax
  01ec6	8b 4d ec	 mov	 ecx, DWORD PTR _i$231997[ebp]
  01ec9	51		 push	 ecx
  01eca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ecd	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01ed3	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01ed8	8b d8		 mov	 ebx, eax
  01eda	8b 55 ec	 mov	 edx, DWORD PTR _i$231997[ebp]
  01edd	52		 push	 edx
  01ede	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ee1	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01ee7	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
  01eec	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  01eef	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  01ef2	83 c1 01	 add	 ecx, 1
  01ef5	8b c7		 mov	 eax, edi
  01ef7	99		 cdq
  01ef8	f7 f9		 idiv	 ecx
  01efa	03 56 08	 add	 edx, DWORD PTR [esi+8]
  01efd	89 55 e0	 mov	 DWORD PTR _iLevel$232004[ebp], edx
$LN1@RewardMons:

; 774  : 			}	
; 775  : 
; 776  : 			ItemSerialCreateSend(aIndex, lpUser->MapNumber, cDropX, cDropY, iItem, iLevel, 0, iSkill, iLuck, iAdd, aIndex, iExl, 0);

  01f00	6a 00		 push	 0
  01f02	0f b6 45 d0	 movzx	 eax, BYTE PTR _iExl$232008[ebp]
  01f06	50		 push	 eax
  01f07	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01f0a	51		 push	 ecx
  01f0b	0f b6 55 d4	 movzx	 edx, BYTE PTR _iAdd$232007[ebp]
  01f0f	52		 push	 edx
  01f10	0f b6 45 d8	 movzx	 eax, BYTE PTR _iLuck$232006[ebp]
  01f14	50		 push	 eax
  01f15	0f b6 4d dc	 movzx	 ecx, BYTE PTR _iSkill$232005[ebp]
  01f19	51		 push	 ecx
  01f1a	6a 00		 push	 0
  01f1c	0f b6 55 e0	 movzx	 edx, BYTE PTR _iLevel$232004[ebp]
  01f20	52		 push	 edx
  01f21	8b 45 e4	 mov	 eax, DWORD PTR _iItem$232003[ebp]
  01f24	50		 push	 eax
  01f25	0f b6 4d f2	 movzx	 ecx, BYTE PTR _cDropY$[ebp]
  01f29	51		 push	 ecx
  01f2a	0f b6 55 f3	 movzx	 edx, BYTE PTR _cDropX$[ebp]
  01f2e	52		 push	 edx
  01f2f	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01f32	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  01f39	51		 push	 ecx
  01f3a	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01f3d	52		 push	 edx
  01f3e	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  01f43	83 c4 34	 add	 esp, 52			; 00000034H

; 777  : 		}

  01f46	e9 0d fe ff ff	 jmp	 $LN4@RewardMons
$LN13@RewardMons:

; 778  : 	}
; 779  : }

  01f4b	5f		 pop	 edi
  01f4c	5e		 pop	 esi
  01f4d	5b		 pop	 ebx
  01f4e	8b e5		 mov	 esp, ebp
  01f50	5d		 pop	 ebp
  01f51	c2 0c 00	 ret	 12			; 0000000cH
?RewardMonster@CCarnageEvent@@QAEXHHH@Z ENDP		; CCarnageEvent::RewardMonster
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?ChatSend@@YAXPAUOBJECTSTRUCT@@PAD@Z:PROC	; ChatSend
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv68 = -148						; size = 4
_szBossMessage$ = -80					; size = 64
_lpMonster$ = -16					; size = 4
_iStage$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aMonsterIndex$ = 8					; size = 4
_MonsterType$ = 12					; size = 4
?MessageMonster@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::MessageMonster
; _this$ = ecx

; 782  : {

  01f60	55		 push	 ebp
  01f61	8b ec		 mov	 ebp, esp
  01f63	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  01f69	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01f6e	33 c5		 xor	 eax, ebp
  01f70	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01f73	53		 push	 ebx
  01f74	56		 push	 esi
  01f75	57		 push	 edi
  01f76	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 783  : 	if(MonsterType != 1)

  01f79	83 7d 0c 01	 cmp	 DWORD PTR _MonsterType$[ebp], 1
  01f7d	74 05		 je	 SHORT $LN4@MessageMon

; 784  : 	{
; 785  : 		return;

  01f7f	e9 b6 00 00 00	 jmp	 $LN5@MessageMon
$LN4@MessageMon:

; 786  : 	}
; 787  : 
; 788  : 	if(!OBJMAX_RANGE(aMonsterIndex))

  01f84	83 7d 08 00	 cmp	 DWORD PTR _aMonsterIndex$[ebp], 0
  01f88	7d 0c		 jge	 SHORT $LN7@MessageMon
  01f8a	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
  01f94	eb 12		 jmp	 SHORT $LN8@MessageMon
$LN7@MessageMon:
  01f96	33 c0		 xor	 eax, eax
  01f98	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aMonsterIndex$[ebp], 14999 ; 00003a97H
  01f9f	0f 9e c0	 setle	 al
  01fa2	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
$LN8@MessageMon:
  01fa8	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR tv68[ebp], 0
  01faf	75 05		 jne	 SHORT $LN3@MessageMon

; 789  : 	{
; 790  : 		return;

  01fb1	e9 84 00 00 00	 jmp	 $LN5@MessageMon
$LN3@MessageMon:

; 791  : 	}
; 792  : 
; 793  : 	int iStage = this->m_EventStage;

  01fb6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01fb9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01fbc	89 4d f4	 mov	 DWORD PTR _iStage$[ebp], ecx

; 794  : 
; 795  : 	if(this->m_EventStage >= this->m_MonsterData.size())

  01fbf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fc2	83 c1 70	 add	 ecx, 112		; 00000070H
  01fc5	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size
  01fca	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fcd	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  01fd0	72 02		 jb	 SHORT $LN2@MessageMon

; 796  : 	{
; 797  : 		return;

  01fd2	eb 66		 jmp	 SHORT $LN5@MessageMon
$LN2@MessageMon:

; 798  : 	}
; 799  : 
; 800  : 	if(strlen(this->m_MonsterData[iStage].BossDie) < 1)

  01fd4	8b 45 f4	 mov	 eax, DWORD PTR _iStage$[ebp]
  01fd7	50		 push	 eax
  01fd8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fdb	83 c1 70	 add	 ecx, 112		; 00000070H
  01fde	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  01fe3	83 c0 20	 add	 eax, 32			; 00000020H
  01fe6	50		 push	 eax
  01fe7	e8 00 00 00 00	 call	 _strlen
  01fec	83 c4 04	 add	 esp, 4
  01fef	83 f8 01	 cmp	 eax, 1
  01ff2	73 02		 jae	 SHORT $LN1@MessageMon

; 801  : 	{
; 802  : 		return;

  01ff4	eb 44		 jmp	 SHORT $LN5@MessageMon
$LN1@MessageMon:

; 803  : 	}
; 804  : 
; 805  : 	LPOBJ lpMonster = &gObj[aMonsterIndex];

  01ff6	8b 45 08	 mov	 eax, DWORD PTR _aMonsterIndex$[ebp]
  01ff9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01fff	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02005	89 45 f0	 mov	 DWORD PTR _lpMonster$[ebp], eax

; 806  : 
; 807  : 	char szBossMessage[64];
; 808  : 	sprintf(szBossMessage, this->m_MonsterData[this->m_EventStage].BossDie);

  02008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0200b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0200e	51		 push	 ecx
  0200f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02012	83 c1 70	 add	 ecx, 112		; 00000070H
  02015	e8 00 00 00 00	 call	 ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
  0201a	83 c0 20	 add	 eax, 32			; 00000020H
  0201d	50		 push	 eax
  0201e	8d 55 b0	 lea	 edx, DWORD PTR _szBossMessage$[ebp]
  02021	52		 push	 edx
  02022	e8 00 00 00 00	 call	 _sprintf
  02027	83 c4 08	 add	 esp, 8

; 809  : 
; 810  : 	ChatSend(lpMonster, szBossMessage);

  0202a	8d 45 b0	 lea	 eax, DWORD PTR _szBossMessage$[ebp]
  0202d	50		 push	 eax
  0202e	8b 4d f0	 mov	 ecx, DWORD PTR _lpMonster$[ebp]
  02031	51		 push	 ecx
  02032	e8 00 00 00 00	 call	 ?ChatSend@@YAXPAUOBJECTSTRUCT@@PAD@Z ; ChatSend
  02037	83 c4 08	 add	 esp, 8
$LN5@MessageMon:

; 811  : }

  0203a	5f		 pop	 edi
  0203b	5e		 pop	 esi
  0203c	5b		 pop	 ebx
  0203d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02040	33 cd		 xor	 ecx, ebp
  02042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02047	8b e5		 mov	 esp, ebp
  02049	5d		 pop	 ebp
  0204a	c2 08 00	 ret	 8
?MessageMonster@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::MessageMonster
; Function compile flags: /Odtp /ZI
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_aMonsterIndex$ = 8					; size = 4
_MonsterType$ = 12					; size = 4
?StageMonster@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::StageMonster
; _this$ = ecx

; 814  : {

  02050	55		 push	 ebp
  02051	8b ec		 mov	 ebp, esp
  02053	83 ec 48	 sub	 esp, 72			; 00000048H
  02056	53		 push	 ebx
  02057	56		 push	 esi
  02058	57		 push	 edi
  02059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 815  : 	if(!OBJMAX_RANGE(aMonsterIndex))

  0205c	83 7d 08 00	 cmp	 DWORD PTR _aMonsterIndex$[ebp], 0
  02060	7d 09		 jge	 SHORT $LN9@StageMonst
  02062	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  02069	eb 0f		 jmp	 SHORT $LN10@StageMonst
$LN9@StageMonst:
  0206b	33 c0		 xor	 eax, eax
  0206d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aMonsterIndex$[ebp], 14999 ; 00003a97H
  02074	0f 9e c0	 setle	 al
  02077	89 45 b8	 mov	 DWORD PTR tv67[ebp], eax
$LN10@StageMonst:
  0207a	83 7d b8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0207e	75 02		 jne	 SHORT $LN6@StageMonst

; 816  : 	{
; 817  : 		return;

  02080	eb 74		 jmp	 SHORT $LN7@StageMonst
$LN6@StageMonst:

; 818  : 	}
; 819  : 
; 820  : 	if(MonsterType == 0)

  02082	83 7d 0c 00	 cmp	 DWORD PTR _MonsterType$[ebp], 0
  02086	75 2b		 jne	 SHORT $LN5@StageMonst

; 821  : 	{
; 822  : 		this->m_StageMonsterCount--;

  02088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0208b	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0208e	83 e9 01	 sub	 ecx, 1
  02091	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02094	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 823  : 
; 824  : 		if(this->m_StageMonsterCount <= 0)

  02097	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0209a	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  0209e	7f 11		 jg	 SHORT $LN4@StageMonst

; 825  : 		{
; 826  : 			this->AddMonster(this->m_EventStage, 1);

  020a0	6a 01		 push	 1
  020a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  020a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  020a8	51		 push	 ecx
  020a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020ac	e8 00 00 00 00	 call	 ?AddMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::AddMonster
$LN4@StageMonst:

; 827  : 		}
; 828  : 	}

  020b1	eb 43		 jmp	 SHORT $LN7@StageMonst
$LN5@StageMonst:

; 829  : 	else if(MonsterType == 1)

  020b3	83 7d 0c 01	 cmp	 DWORD PTR _MonsterType$[ebp], 1
  020b7	75 3d		 jne	 SHORT $LN7@StageMonst

; 830  : 	{
; 831  : 		this->m_EventStage++;

  020b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  020bc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  020bf	83 c1 01	 add	 ecx, 1
  020c2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  020c5	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 832  : 
; 833  : 		if(this->m_EventStage >= this->m_MonsterData.size())

  020c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020cb	83 c1 70	 add	 ecx, 112		; 00000070H
  020ce	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size
  020d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020d6	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  020d9	72 0a		 jb	 SHORT $LN1@StageMonst

; 834  : 		{
; 835  : 			this->SetStateEnd();

  020db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020de	e8 00 00 00 00	 call	 ?SetStateEnd@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateEnd

; 836  : 			return;

  020e3	eb 11		 jmp	 SHORT $LN7@StageMonst
$LN1@StageMonst:

; 837  : 		}
; 838  : 
; 839  : 		this->AddMonster(this->m_EventStage, 0);

  020e5	6a 00		 push	 0
  020e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  020ea	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  020ed	51		 push	 ecx
  020ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020f1	e8 00 00 00 00	 call	 ?AddMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::AddMonster
$LN7@StageMonst:

; 840  : 	}
; 841  : }

  020f6	5f		 pop	 edi
  020f7	5e		 pop	 esi
  020f8	5b		 pop	 ebx
  020f9	8b e5		 mov	 esp, ebp
  020fb	5d		 pop	 ebp
  020fc	c2 08 00	 ret	 8
?StageMonster@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::StageMonster
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -348						; size = 4
_pBodyMsg$ = -280					; size = 2
_pMsg$ = -276						; size = 7
_btPacket$ = -268					; size = 256
_iSizePacket$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_maptype$ = 12						; size = 4
?GCMapAttribute@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::GCMapAttribute
; _this$ = ecx

; 844  : {

  02100	55		 push	 ebp
  02101	8b ec		 mov	 ebp, esp
  02103	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  02109	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0210e	33 c5		 xor	 eax, ebp
  02110	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02113	53		 push	 ebx
  02114	56		 push	 esi
  02115	57		 push	 edi
  02116	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 845  : 	if(!OBJMAX_RANGE(aIndex))

  02119	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  0211d	7d 0c		 jge	 SHORT $LN4@GCMapAttri
  0211f	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
  02129	eb 12		 jmp	 SHORT $LN5@GCMapAttri
$LN4@GCMapAttri:
  0212b	33 c0		 xor	 eax, eax
  0212d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  02134	0f 9e c0	 setle	 al
  02137	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv67[ebp], eax
$LN5@GCMapAttri:
  0213d	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR tv67[ebp], 0
  02144	75 05		 jne	 SHORT $LN1@GCMapAttri

; 846  : 	{
; 847  : 		return;

  02146	e9 da 00 00 00	 jmp	 $LN2@GCMapAttri
$LN1@GCMapAttri:

; 848  : 	}
; 849  : 
; 850  : 	int iSizePacket = 0;

  0214b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iSizePacket$[ebp], 0

; 851  : 	unsigned char btPacket[256];
; 852  : 	
; 853  : 	PMSG_SETMAPATTR_COUNT pMsg;
; 854  : 	PMSG_SETMAPATTR pBodyMsg;
; 855  : 
; 856  : 	iSizePacket += sizeof(pMsg);

  02152	8b 45 f4	 mov	 eax, DWORD PTR _iSizePacket$[ebp]
  02155	83 c0 07	 add	 eax, 7
  02158	89 45 f4	 mov	 DWORD PTR _iSizePacket$[ebp], eax

; 857  : 
; 858  : 	pMsg.btType = 0;

  0215b	c6 85 ef fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 859  : 	pMsg.btMapAttr = 1;

  02162	c6 85 f0 fe ff
	ff 01		 mov	 BYTE PTR _pMsg$[ebp+4], 1

; 860  : 	pMsg.btMapSetType = maptype;

  02169	8a 45 0c	 mov	 al, BYTE PTR _maptype$[ebp]
  0216c	88 85 f1 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], al

; 861  : 	pMsg.btCount = 1;

  02172	c6 85 f2 fe ff
	ff 01		 mov	 BYTE PTR _pMsg$[ebp+6], 1

; 862  : 
; 863  : 	pBodyMsg.btX = 0;

  02179	c6 85 e8 fe ff
	ff 00		 mov	 BYTE PTR _pBodyMsg$[ebp], 0

; 864  : 	pBodyMsg.btY = 0;

  02180	c6 85 e9 fe ff
	ff 00		 mov	 BYTE PTR _pBodyMsg$[ebp+1], 0

; 865  : 	memcpy(&btPacket[iSizePacket], &pBodyMsg, sizeof(pBodyMsg));

  02187	6a 02		 push	 2
  02189	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pBodyMsg$[ebp]
  0218f	50		 push	 eax
  02190	8b 4d f4	 mov	 ecx, DWORD PTR _iSizePacket$[ebp]
  02193	8d 94 0d f4 fe
	ff ff		 lea	 edx, DWORD PTR _btPacket$[ebp+ecx]
  0219a	52		 push	 edx
  0219b	e8 00 00 00 00	 call	 _memcpy
  021a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 866  : 	iSizePacket += sizeof(pBodyMsg);

  021a3	8b 45 f4	 mov	 eax, DWORD PTR _iSizePacket$[ebp]
  021a6	83 c0 02	 add	 eax, 2
  021a9	89 45 f4	 mov	 DWORD PTR _iSizePacket$[ebp], eax

; 867  : 	pBodyMsg.btX   = 255;

  021ac	c6 85 e8 fe ff
	ff ff		 mov	 BYTE PTR _pBodyMsg$[ebp], 255 ; 000000ffH

; 868  : 	pBodyMsg.btY   = 255;

  021b3	c6 85 e9 fe ff
	ff ff		 mov	 BYTE PTR _pBodyMsg$[ebp+1], 255 ; 000000ffH

; 869  : 	memcpy(&btPacket[iSizePacket], &pBodyMsg, sizeof(pBodyMsg));

  021ba	6a 02		 push	 2
  021bc	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pBodyMsg$[ebp]
  021c2	50		 push	 eax
  021c3	8b 4d f4	 mov	 ecx, DWORD PTR _iSizePacket$[ebp]
  021c6	8d 94 0d f4 fe
	ff ff		 lea	 edx, DWORD PTR _btPacket$[ebp+ecx]
  021cd	52		 push	 edx
  021ce	e8 00 00 00 00	 call	 _memcpy
  021d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 870  : 	iSizePacket += sizeof(pBodyMsg);

  021d6	8b 45 f4	 mov	 eax, DWORD PTR _iSizePacket$[ebp]
  021d9	83 c0 02	 add	 eax, 2
  021dc	89 45 f4	 mov	 DWORD PTR _iSizePacket$[ebp], eax

; 871  : 
; 872  : 	pMsg.h.c = 0xC1;

  021df	c6 85 ec fe ff
	ff c1		 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 873  : 	pMsg.h.size = iSizePacket;

  021e6	8a 45 f4	 mov	 al, BYTE PTR _iSizePacket$[ebp]
  021e9	88 85 ed fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+1], al

; 874  : 	pMsg.h.headcode = 0x46;

  021ef	c6 85 ee fe ff
	ff 46		 mov	 BYTE PTR _pMsg$[ebp+2], 70 ; 00000046H

; 875  : 	memcpy(&btPacket, &pMsg, sizeof(pMsg));

  021f6	6a 07		 push	 7
  021f8	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  021fe	50		 push	 eax
  021ff	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _btPacket$[ebp]
  02205	51		 push	 ecx
  02206	e8 00 00 00 00	 call	 _memcpy
  0220b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 876  : 	
; 877  : 	DataSend(aIndex, (LPBYTE)&btPacket, iSizePacket);

  0220e	8b 45 f4	 mov	 eax, DWORD PTR _iSizePacket$[ebp]
  02211	50		 push	 eax
  02212	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _btPacket$[ebp]
  02218	51		 push	 ecx
  02219	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0221c	52		 push	 edx
  0221d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02222	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@GCMapAttri:

; 878  : }

  02225	5f		 pop	 edi
  02226	5e		 pop	 esi
  02227	5b		 pop	 ebx
  02228	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0222b	33 cd		 xor	 ecx, ebp
  0222d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02232	8b e5		 mov	 esp, ebp
  02234	5d		 pop	 ebp
  02235	c2 08 00	 ret	 8
?GCMapAttribute@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::GCMapAttribute
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@V?$allocator@UCARNAGE_TIME@@@1@@Z ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
PUBLIC	??0?$allocator@UCARNAGE_TIME@@@std@@QAE@XZ	; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T234697 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T234697[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UCARNAGE_TIME@@@std@@QAE@XZ ; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@V?$allocator@UCARNAGE_TIME@@@1@@Z ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
PUBLIC	?_Tidy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
__ehhandler$??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::end
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME const &>
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME &>
PUBLIC	?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve
PUBLIC	?_Inside@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBE_NPBUCARNAGE_TIME@@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Inside
PUBLIC	??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z ; std::addressof<CARNAGE_TIME const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
__Idx$232071 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z ; std::addressof<CARNAGE_TIME const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBE_NPBUCARNAGE_TIME@@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 78		 je	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z ; std::addressof<CARNAGE_TIME const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	c1 f8 03	 sar	 eax, 3
  0003c	89 45 f8	 mov	 DWORD PTR __Idx$232071[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00048	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004b	75 0a		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	51		 push	 ecx
  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00064	50		 push	 eax
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 f8	 mov	 edx, DWORD PTR __Idx$232071[ebp]
  00075	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00078	50		 push	 eax
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007f	52		 push	 edx
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 0c	 add	 eax, 12			; 0000000cH
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME &>
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00095	83 c1 08	 add	 ecx, 8
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  0009e	eb 57		 jmp	 SHORT $LN5@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a9	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000ac	75 0a		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  000ae	6a 01		 push	 1
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	51		 push	 ecx
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c5	50		 push	 eax
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000ce	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d8	52		 push	 edx
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	83 c0 0c	 add	 eax, 12			; 0000000cH
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME const &>
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	83 c1 08	 add	 ecx, 8
  000f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f4	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back:

; 997  : 			}
; 998  : 		}

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::erase
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T234716 = -88						; size = 4
$T234717 = -84						; size = 4
$T234718 = -80						; size = 4
$T234719 = -76						; size = 4
$T234720 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T234717[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T234716[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T234719[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T234718[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T234716[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T234718[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T234720[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UCARNAGE_MONSTER_DATA@@@1@@Z ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
PUBLIC	??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@XZ ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T234723 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T234723[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@XZ ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UCARNAGE_MONSTER_DATA@@@1@@Z ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
PUBLIC	?_Tidy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
__ehhandler$??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0001d	f7 f9		 idiv	 ecx

; 880  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0000f	6b c0 60	 imul	 eax, 96			; 00000060H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA &>
PUBLIC	?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve
PUBLIC	?_Inside@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBE_NPBUCARNAGE_MONSTER_DATA@@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Inside
PUBLIC	??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::addressof<CARNAGE_MONSTER_DATA const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
__Idx$232121 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::addressof<CARNAGE_MONSTER_DATA const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBE_NPBUCARNAGE_MONSTER_DATA@@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 7d		 je	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::addressof<CARNAGE_MONSTER_DATA const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	99		 cdq
  0003a	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0003f	f7 f9		 idiv	 ecx
  00041	89 45 f8	 mov	 DWORD PTR __Idx$232121[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004d	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00050	75 0a		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  00052	6a 01		 push	 1
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	51		 push	 ecx
  00063	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00066	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00069	50		 push	 eax
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00072	8b 45 f8	 mov	 eax, DWORD PTR __Idx$232121[ebp]
  00075	6b c0 60	 imul	 eax, 96			; 00000060H
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	03 01		 add	 eax, DWORD PTR [ecx]
  0007d	50		 push	 eax
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA &>
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009a	83 c1 60	 add	 ecx, 96			; 00000060H
  0009d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  000a3	eb 57		 jmp	 SHORT $LN5@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ae	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000b1	75 0a		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  000b3	6a 01		 push	 1
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c3	51		 push	 ecx
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ca	50		 push	 eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000d3	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000dd	52		 push	 edx
  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	83 c0 0c	 add	 eax, 12			; 0000000cH
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000ed	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f3	83 c1 60	 add	 ecx, 96			; 00000060H
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back@2:

; 997  : 			}
; 998  : 		}

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::erase
PUBLIC	?begin@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::begin
PUBLIC	?end@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T234742 = -88						; size = 4
$T234743 = -84						; size = 4
$T234744 = -80						; size = 4
$T234745 = -76						; size = 4
$T234746 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T234743[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T234742[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T234745[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T234744[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T234742[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T234744[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T234746[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@V?$allocator@UCARNAGE_ITEM@@@1@@Z ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
PUBLIC	??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@XZ	; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T234749 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T234749[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@XZ ; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@V?$allocator@UCARNAGE_ITEM@@@1@@Z ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
PUBLIC	?_Tidy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
__ehhandler$??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 05	 sar	 eax, 5

; 880  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0000f	c1 e0 05	 shl	 eax, 5
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM const &>
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM &>
PUBLIC	?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve
PUBLIC	?_Inside@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBE_NPBUCARNAGE_ITEM@@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Inside
PUBLIC	??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z ; std::addressof<CARNAGE_ITEM const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
__Idx$232297 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z ; std::addressof<CARNAGE_ITEM const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBE_NPBUCARNAGE_ITEM@@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 78		 je	 SHORT $LN4@push_back@3

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z ; std::addressof<CARNAGE_ITEM const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	c1 f8 05	 sar	 eax, 5
  0003c	89 45 f8	 mov	 DWORD PTR __Idx$232297[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00048	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004b	75 0a		 jne	 SHORT $LN3@push_back@3

; 981  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve
$LN3@push_back@3:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	51		 push	 ecx
  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00064	50		 push	 eax
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0006d	8b 45 f8	 mov	 eax, DWORD PTR __Idx$232297[ebp]
  00070	c1 e0 05	 shl	 eax, 5
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	03 01		 add	 eax, DWORD PTR [ecx]
  00078	50		 push	 eax
  00079	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007f	50		 push	 eax
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM &>
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00095	83 c1 20	 add	 ecx, 32			; 00000020H
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  0009e	eb 57		 jmp	 SHORT $LN5@push_back@3
$LN4@push_back@3:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a9	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000ac	75 0a		 jne	 SHORT $LN1@push_back@3

; 991  : 				_Reserve(1);

  000ae	6a 01		 push	 1
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve
$LN1@push_back@3:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	51		 push	 ecx
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c5	50		 push	 eax
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000ce	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d8	52		 push	 edx
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	83 c0 0c	 add	 eax, 12			; 0000000cH
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM const &>
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	83 c1 20	 add	 ecx, 32			; 00000020H
  000f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f4	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back@3:

; 997  : 			}
; 998  : 		}

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::erase
PUBLIC	?begin@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::begin
PUBLIC	?end@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T234768 = -88						; size = 4
$T234769 = -84						; size = 4
$T234770 = -80						; size = 4
$T234771 = -76						; size = 4
$T234772 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T234769[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T234768[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T234771[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T234770[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T234768[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T234770[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T234772[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::clear
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEAAUCARNAGE_TIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*
; Function compile flags: /Odtp /ZI
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator->, COMDAT
; _this$ = ecx

; 326  : 		{	// return pointer to class object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 327  : 		return (&**this);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEAAUCARNAGE_TIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*

; 328  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator->
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
; Function compile flags: /Odtp /ZI
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 338  : 		_Myiter _Tmp = *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 339  : 		++*this;

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++

; 340  : 		return (_Tmp);

  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Tmp$[ebp]
  00022	89 08		 mov	 DWORD PTR [eax], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 341  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Destroy
PUBLIC	??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00@Z ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
PUBLIC	?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T234781 = -84						; size = 4
__Ptr$232488 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@0@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00@Z ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$232488[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$232488[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$232488[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T234781[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T234781[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@0@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBE_NPBUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBE_NPBUCARNAGE_TIME@@@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBE_NPBUCARNAGE_TIME@@@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::reserve
PUBLIC	?_Grow_to@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEII@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Grow_to
PUBLIC	?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::capacity
PUBLIC	?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Xlen
PUBLIC	?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::max_size
PUBLIC	?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEII@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::reserve
$LN6@Reserve:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z ; std::allocator<CARNAGE_TIME>::deallocate
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 03	 sar	 edx, 3
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z ; std::allocator<CARNAGE_TIME>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@UCARNAGE_TIME@@@std@@QAE@ABV01@@Z ; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@V?$allocator@UCARNAGE_TIME@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@V?$allocator@UCARNAGE_TIME@@@1@@Z PROC ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UCARNAGE_TIME@@@std@@QAE@ABV01@@Z ; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@V?$allocator@UCARNAGE_TIME@@@1@@Z ENDP ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCARNAGE_TIME@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCARNAGE_TIME@@@std@@QAE@XZ PROC		; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UCARNAGE_TIME@@@std@@QAE@XZ ENDP		; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Destroy
PUBLIC	??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00@Z ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T234804 = -84						; size = 4
__Ptr$232550 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00@Z ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$232550[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$232550[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$232550[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T234804[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T234804[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBE_NPBUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBE_NPBUCARNAGE_MONSTER_DATA@@@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside@2
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside@2
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside@2:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBE_NPBUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::reserve
PUBLIC	?_Grow_to@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEII@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Grow_to
PUBLIC	?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::capacity
PUBLIC	?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Xlen
PUBLIC	?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve@2
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve@2

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve@2
$LN2@Reserve@2:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEII@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::reserve
$LN6@Reserve@2:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z ; std::allocator<CARNAGE_MONSTER_DATA>::deallocate
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 42		 je	 SHORT $LN1@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0003c	99		 cdq
  0003d	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00042	f7 f9		 idiv	 ecx
  00044	50		 push	 eax
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z ; std::allocator<CARNAGE_MONSTER_DATA>::deallocate
$LN1@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Tidy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UCARNAGE_MONSTER_DATA@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UCARNAGE_MONSTER_DATA@@@1@@Z PROC ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UCARNAGE_MONSTER_DATA@@@1@@Z ENDP ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@XZ PROC	; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@XZ ENDP	; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Destroy
PUBLIC	??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00@Z ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T234827 = -84						; size = 4
__Ptr$232612 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@0@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase@3

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00@Z ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$232612[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$232612[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$232612[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase@3:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T234827[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T234827[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@0@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBE_NPBUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBE_NPBUCARNAGE_ITEM@@@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside@3
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside@3
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside@3
$LN3@Inside@3:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside@3:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBE_NPBUCARNAGE_ITEM@@@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::reserve
PUBLIC	?_Grow_to@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEII@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Grow_to
PUBLIC	?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::capacity
PUBLIC	?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Xlen
PUBLIC	?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve@3

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve@3
$LN4@Reserve@3:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve@3

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve@3
$LN2@Reserve@3:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEII@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::reserve
$LN6@Reserve@3:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z ; std::allocator<CARNAGE_ITEM>::deallocate
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 05	 sar	 edx, 5
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z ; std::allocator<CARNAGE_ITEM>::deallocate
$LN1@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@ABV01@@Z ; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@V?$allocator@UCARNAGE_ITEM@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@V?$allocator@UCARNAGE_ITEM@@@1@@Z PROC ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@ABV01@@Z ; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@V?$allocator@UCARNAGE_ITEM@@@1@@Z ENDP ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@XZ PROC		; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@XZ ENDP		; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEABUCARNAGE_TIME@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*
; Function compile flags: /Odtp /ZI
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEAAUCARNAGE_TIME@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEAAUCARNAGE_TIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 321  : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEABUCARNAGE_TIME@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*

; 323  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEAAUCARNAGE_TIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
; Function compile flags: /Odtp /ZI
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 		++*(_Mybase *)this;

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??E?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++

; 333  : 		return (*this);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 334  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCARNAGE_TIME@@@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEPAUCARNAGE_TIME@@PAU2@00@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Umove<CARNAGE_TIME *>
PUBLIC	?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z ; std::allocator<CARNAGE_TIME>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$232665 = -28					; size = 4
__Ptr$232658 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Xlen
  00044	e9 eb 00 00 00	 jmp	 $LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 da 00 00
	00		 jae	 $LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z ; std::allocator<CARNAGE_TIME>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$232658[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$232658[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUCARNAGE_TIME@@@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEPAUCARNAGE_TIME@@PAU2@00@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Umove<CARNAGE_TIME *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve
__catch$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$232658[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z ; std::allocator<CARNAGE_TIME>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$232665[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 35		 je	 SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ef	2b 11		 sub	 edx, DWORD PTR [ecx]
  000f1	c1 fa 03	 sar	 edx, 3
  000f4	52		 push	 edx
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	51		 push	 ecx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00101	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z ; std::allocator<CARNAGE_TIME>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00111	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$232658[ebp]
  00114	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00117	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR __Size$232665[ebp]
  00120	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$232658[ebp]
  00123	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00126	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00129	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  0012c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$232658[ebp]
  00132	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Make_iter
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCARNAGE_TIME@@@std@@QBEIXZ ; std::allocator<CARNAGE_TIME>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UCARNAGE_TIME@@@std@@QBEIXZ ; std::allocator<CARNAGE_TIME>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEII@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEII@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCARNAGE_TIME@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCARNAGE_TIME@@@std@@QAE@ABV01@@Z PROC	; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UCARNAGE_TIME@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z PROC ; std::allocator<CARNAGE_TIME>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z ENDP ; std::allocator<CARNAGE_TIME>::deallocate
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCARNAGE_MONSTER_DATA@@@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEPAUCARNAGE_MONSTER_DATA@@PAU2@00@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Umove<CARNAGE_MONSTER_DATA *>
PUBLIC	?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z ; std::allocator<CARNAGE_MONSTER_DATA>::allocate
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$232708 = -28					; size = 4
__Ptr$232701 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Xlen
  00044	e9 f0 00 00 00	 jmp	 $LN7@reserve@2
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 df 00 00
	00		 jae	 $LN7@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z ; std::allocator<CARNAGE_MONSTER_DATA>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$232701[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$232701[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUCARNAGE_MONSTER_DATA@@@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEPAUCARNAGE_MONSTER_DATA@@PAU2@00@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Umove<CARNAGE_MONSTER_DATA *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve@2
__catch$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$232701[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z ; std::allocator<CARNAGE_MONSTER_DATA>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve@2:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$232708[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 3a		 je	 SHORT $LN1@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ef	2b 01		 sub	 eax, DWORD PTR [ecx]
  000f1	99		 cdq
  000f2	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  000f7	f7 f9		 idiv	 ecx
  000f9	50		 push	 eax
  000fa	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 02		 mov	 eax, DWORD PTR [edx]
  000ff	50		 push	 eax
  00100	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00106	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z ; std::allocator<CARNAGE_MONSTER_DATA>::deallocate
$LN1@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0010b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  00113	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00116	6b c0 60	 imul	 eax, 96			; 00000060H
  00119	03 45 e8	 add	 eax, DWORD PTR __Ptr$232701[ebp]
  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  00122	8b 45 e4	 mov	 eax, DWORD PTR __Size$232708[ebp]
  00125	6b c0 60	 imul	 eax, 96			; 00000060H
  00128	03 45 e8	 add	 eax, DWORD PTR __Ptr$232701[ebp]
  0012b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  00131	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$232701[ebp]
  00137	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve@2:

; 772  : 			}
; 773  : 		}

  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0001d	f7 f9		 idiv	 ecx

; 778  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QBEIXZ ; std::allocator<CARNAGE_MONSTER_DATA>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QBEIXZ ; std::allocator<CARNAGE_MONSTER_DATA>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to@2
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to@2:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to@2:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Grow_to
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen@2:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::deallocate
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCARNAGE_ITEM@@@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEPAUCARNAGE_ITEM@@PAU2@00@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Umove<CARNAGE_ITEM *>
PUBLIC	?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z ; std::allocator<CARNAGE_ITEM>::allocate
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$232748 = -28					; size = 4
__Ptr$232741 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve@3

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Xlen
  00044	e9 eb 00 00 00	 jmp	 $LN7@reserve@3
$LN5@reserve@3:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 da 00 00
	00		 jae	 $LN7@reserve@3

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z ; std::allocator<CARNAGE_ITEM>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$232741[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$232741[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUCARNAGE_ITEM@@@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEPAUCARNAGE_ITEM@@PAU2@00@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Umove<CARNAGE_ITEM *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve@3
__catch$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$232741[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z ; std::allocator<CARNAGE_ITEM>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve@3:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$232748[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 35		 je	 SHORT $LN1@reserve@3

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ef	2b 11		 sub	 edx, DWORD PTR [ecx]
  000f1	c1 fa 05	 sar	 edx, 5
  000f4	52		 push	 edx
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	51		 push	 ecx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00101	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z ; std::allocator<CARNAGE_ITEM>::deallocate
$LN1@reserve@3:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00111	c1 e0 05	 shl	 eax, 5
  00114	03 45 e8	 add	 eax, DWORD PTR __Ptr$232741[ebp]
  00117	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR __Size$232748[ebp]
  00120	c1 e0 05	 shl	 eax, 5
  00123	03 45 e8	 add	 eax, DWORD PTR __Ptr$232741[ebp]
  00126	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  0012c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$232741[ebp]
  00132	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve@3:

; 772  : 			}
; 773  : 		}

  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 05	 sar	 eax, 5

; 778  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCARNAGE_ITEM@@@std@@QBEIXZ ; std::allocator<CARNAGE_ITEM>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UCARNAGE_ITEM@@@std@@QBEIXZ ; std::allocator<CARNAGE_ITEM>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEII@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to@3
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to@3
$LN4@Grow_to@3:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to@3:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to@3

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to@3:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEII@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Grow_to
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen@3:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@ABV01@@Z PROC	; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z PROC ; std::allocator<CARNAGE_ITEM>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z ENDP ; std::allocator<CARNAGE_ITEM>::deallocate
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEABUCARNAGE_TIME@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEABUCARNAGE_TIME@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 63   : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@operator:

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);

  0000c	33 c0		 xor	 eax, eax
  0000e	75 fc		 jne	 SHORT $LN2@operator

; 83   : 
; 84   : 		return (*this->_Ptr);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]

; 85   : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEABUCARNAGE_TIME@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	83 c1 08	 add	 ecx, 8
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx

; 111  : 		return (*this);

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 112  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Compat
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Allocate@UCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@IPAU1@@Z ; std::_Allocate<CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z PROC ; std::allocator<CARNAGE_TIME>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@IPAU1@@Z ; std::_Allocate<CARNAGE_TIME>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z ENDP ; std::allocator<CARNAGE_TIME>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCARNAGE_TIME@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UCARNAGE_TIME@@@std@@QBEIXZ PROC	; std::allocator<CARNAGE_TIME>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UCARNAGE_TIME@@@std@@QBEIXZ ENDP	; std::allocator<CARNAGE_TIME>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@UCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@IPAU1@@Z ; std::_Allocate<CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@IPAU1@@Z ; std::_Allocate<CARNAGE_MONSTER_DATA>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QBEIXZ PROC ; std::allocator<CARNAGE_MONSTER_DATA>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 aa aa
	aa 02		 mov	 DWORD PTR __Count$[ebp], 44739242 ; 02aaaaaaH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size@2
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size@2
$LN3@max_size@2:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QBEIXZ ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@UCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@IPAU1@@Z ; std::_Allocate<CARNAGE_ITEM>
; Function compile flags: /Odtp /ZI
;	COMDAT ?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z PROC ; std::allocator<CARNAGE_ITEM>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@IPAU1@@Z ; std::_Allocate<CARNAGE_ITEM>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z ENDP ; std::allocator<CARNAGE_ITEM>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCARNAGE_ITEM@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UCARNAGE_ITEM@@@std@@QBEIXZ PROC	; std::allocator<CARNAGE_ITEM>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 07		 mov	 DWORD PTR __Count$[ebp], 134217727 ; 07ffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size@3
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size@3
$LN3@max_size@3:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UCARNAGE_ITEM@@@std@@QBEIXZ ENDP	; std::allocator<CARNAGE_ITEM>::max_size
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Compat
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z PROC ; std::addressof<CARNAGE_TIME const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z ENDP ; std::addressof<CARNAGE_TIME const >
_TEXT	ENDS
PUBLIC	??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z ; std::allocator<CARNAGE_TIME>::construct<CARNAGE_TIME &>
PUBLIC	??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z ; std::forward<CARNAGE_TIME &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z ; std::forward<CARNAGE_TIME &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z ; std::allocator<CARNAGE_TIME>::construct<CARNAGE_TIME &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@ABU3@@Z ; std::allocator<CARNAGE_TIME>::construct
PUBLIC	??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z ; std::forward<CARNAGE_TIME const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z ; std::forward<CARNAGE_TIME const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@ABU3@@Z ; std::allocator<CARNAGE_TIME>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME const &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z PROC ; std::addressof<CARNAGE_MONSTER_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z ENDP ; std::addressof<CARNAGE_MONSTER_DATA const >
_TEXT	ENDS
PUBLIC	??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::construct<CARNAGE_MONSTER_DATA &>
PUBLIC	??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::forward<CARNAGE_MONSTER_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::forward<CARNAGE_MONSTER_DATA &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::construct<CARNAGE_MONSTER_DATA &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@ABU3@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::construct
PUBLIC	??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::forward<CARNAGE_MONSTER_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::forward<CARNAGE_MONSTER_DATA const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@ABU3@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z PROC ; std::addressof<CARNAGE_ITEM const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z ENDP ; std::addressof<CARNAGE_ITEM const >
_TEXT	ENDS
PUBLIC	??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z ; std::allocator<CARNAGE_ITEM>::construct<CARNAGE_ITEM &>
PUBLIC	??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z ; std::forward<CARNAGE_ITEM &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z ; std::forward<CARNAGE_ITEM &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z ; std::allocator<CARNAGE_ITEM>::construct<CARNAGE_ITEM &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@ABU3@@Z ; std::allocator<CARNAGE_ITEM>::construct
PUBLIC	??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z ; std::forward<CARNAGE_ITEM const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z ; std::forward<CARNAGE_ITEM const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@ABU3@@Z ; std::allocator<CARNAGE_ITEM>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
PUBLIC	??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z ; std::_Ptr_cat<CARNAGE_TIME,CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00@Z
_TEXT	SEGMENT
$T235020 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00@Z PROC ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z ; std::_Ptr_cat<CARNAGE_TIME,CARNAGE_TIME>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T235020[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T235020[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00@Z ENDP ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
PUBLIC	??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z ; std::_Ptr_cat<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00@Z
_TEXT	SEGMENT
$T235023 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00@Z PROC ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z ; std::_Ptr_cat<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T235023[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T235023[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00@Z ENDP ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
PUBLIC	??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z ; std::_Ptr_cat<CARNAGE_ITEM,CARNAGE_ITEM>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00@Z
_TEXT	SEGMENT
$T235026 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00@Z PROC ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z ; std::_Ptr_cat<CARNAGE_ITEM,CARNAGE_ITEM>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T235026[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T235026[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00@Z ENDP ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@@Z ; std::_Uninitialized_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCARNAGE_TIME@@@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEPAUCARNAGE_TIME@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCARNAGE_TIME@@@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEPAUCARNAGE_TIME@@PAU2@00@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Umove<CARNAGE_TIME *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@@Z ; std::_Uninitialized_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCARNAGE_TIME@@@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEPAUCARNAGE_TIME@@PAU2@00@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Umove<CARNAGE_TIME *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@@Z
_TEXT	SEGMENT
$T235031 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z ; std::_Ptr_cat<CARNAGE_TIME,CARNAGE_TIME>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T235031[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T235031[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ; std::_Uninitialized_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCARNAGE_MONSTER_DATA@@@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEPAUCARNAGE_MONSTER_DATA@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCARNAGE_MONSTER_DATA@@@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEPAUCARNAGE_MONSTER_DATA@@PAU2@00@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Umove<CARNAGE_MONSTER_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ; std::_Uninitialized_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCARNAGE_MONSTER_DATA@@@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEPAUCARNAGE_MONSTER_DATA@@PAU2@00@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Umove<CARNAGE_MONSTER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z
_TEXT	SEGMENT
$T235036 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z ; std::_Ptr_cat<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T235036[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T235036[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ; std::_Uninitialized_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCARNAGE_ITEM@@@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEPAUCARNAGE_ITEM@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCARNAGE_ITEM@@@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEPAUCARNAGE_ITEM@@PAU2@00@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Umove<CARNAGE_ITEM *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ; std::_Uninitialized_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCARNAGE_ITEM@@@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEPAUCARNAGE_ITEM@@PAU2@00@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Umove<CARNAGE_ITEM *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@@Z
_TEXT	SEGMENT
$T235041 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z ; std::_Ptr_cat<CARNAGE_ITEM,CARNAGE_ITEM>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T235041[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T235041[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@UCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@IPAU1@@Z
_TEXT	SEGMENT
$T235044 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@IPAU1@@Z PROC ; std::_Allocate<CARNAGE_TIME>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	c1 e0 03	 shl	 eax, 3
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T235044[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T235044[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@IPAU1@@Z ENDP ; std::_Allocate<CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@UCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T235047 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@IPAU1@@Z PROC ; std::_Allocate<CARNAGE_MONSTER_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate@2

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate@2
$LN4@Allocate@2:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 aa aa
	aa 02		 cmp	 DWORD PTR __Count$[ebp], 44739242 ; 02aaaaaaH
  00026	77 18		 ja	 SHORT $LN1@Allocate@2
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	6b c0 60	 imul	 eax, 96			; 00000060H
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T235047[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T235047[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate@2:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@2:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@IPAU1@@Z ENDP ; std::_Allocate<CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@UCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@IPAU1@@Z
_TEXT	SEGMENT
$T235050 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@IPAU1@@Z PROC ; std::_Allocate<CARNAGE_ITEM>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate@3

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate@3
$LN4@Allocate@3:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 ff ff
	ff 07		 cmp	 DWORD PTR __Count$[ebp], 134217727 ; 07ffffffH
  00026	77 18		 ja	 SHORT $LN1@Allocate@3
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	c1 e0 05	 shl	 eax, 5
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T235050[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T235050[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate@3:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@3:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@IPAU1@@Z ENDP ; std::_Allocate<CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z ; std::_Construct<CARNAGE_TIME,CARNAGE_TIME const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@ABU3@@Z PROC ; std::allocator<CARNAGE_TIME>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z ; std::_Construct<CARNAGE_TIME,CARNAGE_TIME const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@ABU3@@Z ENDP ; std::allocator<CARNAGE_TIME>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::_Construct<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@ABU3@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::_Construct<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@ABU3@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z ; std::_Construct<CARNAGE_ITEM,CARNAGE_ITEM const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@ABU3@@Z PROC ; std::allocator<CARNAGE_ITEM>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z ; std::_Construct<CARNAGE_ITEM,CARNAGE_ITEM const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@ABU3@@Z ENDP ; std::allocator<CARNAGE_ITEM>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z PROC ; std::forward<CARNAGE_TIME &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z ENDP ; std::forward<CARNAGE_TIME &>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T235061 = -88						; size = 4
$T235062 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z PROC ; std::allocator<CARNAGE_TIME>::construct<CARNAGE_TIME &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 08		 push	 8
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T235062[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T235062[ebp], 0
  00047	74 21		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z ; std::forward<CARNAGE_TIME &>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005a	8b 4d ac	 mov	 ecx, DWORD PTR $T235062[ebp]
  0005d	89 11		 mov	 DWORD PTR [ecx], edx
  0005f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00062	8b 55 ac	 mov	 edx, DWORD PTR $T235062[ebp]
  00065	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00068	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0006a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  00071	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00074	89 45 a8	 mov	 DWORD PTR $T235061[ebp], eax
  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T235062[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z ENDP ; std::allocator<CARNAGE_TIME>::construct<CARNAGE_TIME &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z PROC ; std::forward<CARNAGE_TIME const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z ENDP ; std::forward<CARNAGE_TIME const &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z PROC ; std::forward<CARNAGE_MONSTER_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z ENDP ; std::forward<CARNAGE_MONSTER_DATA &>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T235082 = -88						; size = 4
$T235083 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::construct<CARNAGE_MONSTER_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 60		 push	 96			; 00000060H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T235083[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T235083[ebp], 0
  00047	74 20		 je	 SHORT $LN3@construct@2
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::forward<CARNAGE_MONSTER_DATA &>
  00052	83 c4 04	 add	 esp, 4
  00055	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0005a	8b f0		 mov	 esi, eax
  0005c	8b 7d ac	 mov	 edi, DWORD PTR $T235083[ebp]
  0005f	f3 a5		 rep movsd
  00061	8b 55 ac	 mov	 edx, DWORD PTR $T235083[ebp]
  00064	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00067	eb 07		 jmp	 SHORT $LN4@construct@2
$LN3@construct@2:
  00069	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@2:
  00070	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00073	89 45 a8	 mov	 DWORD PTR $T235082[ebp], eax
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T235083[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::construct<CARNAGE_MONSTER_DATA &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z PROC ; std::forward<CARNAGE_MONSTER_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z ENDP ; std::forward<CARNAGE_MONSTER_DATA const &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z PROC ; std::forward<CARNAGE_ITEM &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z ENDP ; std::forward<CARNAGE_ITEM &>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T235099 = -88						; size = 4
$T235100 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z PROC ; std::allocator<CARNAGE_ITEM>::construct<CARNAGE_ITEM &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 20		 push	 32			; 00000020H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T235100[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T235100[ebp], 0
  00047	74 20		 je	 SHORT $LN3@construct@3
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z ; std::forward<CARNAGE_ITEM &>
  00052	83 c4 04	 add	 esp, 4
  00055	b9 08 00 00 00	 mov	 ecx, 8
  0005a	8b f0		 mov	 esi, eax
  0005c	8b 7d ac	 mov	 edi, DWORD PTR $T235100[ebp]
  0005f	f3 a5		 rep movsd
  00061	8b 55 ac	 mov	 edx, DWORD PTR $T235100[ebp]
  00064	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00067	eb 07		 jmp	 SHORT $LN4@construct@3
$LN3@construct@3:
  00069	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@3:
  00070	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00073	89 45 a8	 mov	 DWORD PTR $T235099[ebp], eax
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T235100[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z ENDP ; std::allocator<CARNAGE_ITEM>::construct<CARNAGE_ITEM &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z PROC ; std::forward<CARNAGE_ITEM const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z ENDP ; std::forward<CARNAGE_ITEM const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z PROC ; std::_Ptr_cat<CARNAGE_TIME,CARNAGE_TIME>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z ENDP ; std::_Ptr_cat<CARNAGE_TIME,CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	??$move@AAUCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ; std::move<CARNAGE_TIME &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 08	 add	 eax, 8
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 08	 add	 ecx, 8
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 1b		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ; std::move<CARNAGE_TIME &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00036	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00039	89 08		 mov	 DWORD PTR [eax], ecx
  0003b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003e	eb cb		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  00040	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z PROC ; std::_Ptr_cat<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z ENDP ; std::_Ptr_cat<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$move@AAUCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::move<CARNAGE_MONSTER_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move@2
$LN2@Move@2:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 60	 add	 eax, 96			; 00000060H
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 60	 add	 ecx, 96			; 00000060H
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move@2:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 1a		 je	 SHORT $LN1@Move@2

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::move<CARNAGE_MONSTER_DATA &>
  0002e	83 c4 04	 add	 esp, 4
  00031	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00036	8b f0		 mov	 esi, eax
  00038	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0003b	f3 a5		 rep movsd
  0003d	eb cc		 jmp	 SHORT $LN2@Move@2
$LN1@Move@2:

; 2515 : 	return (_Dest);

  0003f	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z PROC ; std::_Ptr_cat<CARNAGE_ITEM,CARNAGE_ITEM>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z ENDP ; std::_Ptr_cat<CARNAGE_ITEM,CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	??$move@AAUCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ; std::move<CARNAGE_ITEM &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move@3
$LN2@Move@3:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 20	 add	 eax, 32			; 00000020H
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 20	 add	 ecx, 32			; 00000020H
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move@3:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 1a		 je	 SHORT $LN1@Move@3

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ; std::move<CARNAGE_ITEM &>
  0002e	83 c4 04	 add	 esp, 4
  00031	b9 08 00 00 00	 mov	 ecx, 8
  00036	8b f0		 mov	 esi, eax
  00038	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0003b	f3 a5		 rep movsd
  0003d	eb cc		 jmp	 SHORT $LN2@Move@3
$LN1@Move@3:

; 2515 : 	return (_Dest);

  0003f	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
PUBLIC	??$_Val_type@PAUCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@PAU1@@Z ; std::_Val_type<CARNAGE_TIME *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@@Z
_TEXT	SEGMENT
$T235126 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@@Z PROC ; std::_Uninitialized_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z ; std::_Ptr_cat<CARNAGE_TIME,CARNAGE_TIME>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T235126[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T235126[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@PAU1@@Z ; std::_Val_type<CARNAGE_TIME *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@@Z ENDP ; std::_Uninitialized_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z ; std::_Dest_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 08	 add	 eax, 8
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z ; std::_Dest_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
PUBLIC	??$_Val_type@PAUCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@@Z ; std::_Val_type<CARNAGE_MONSTER_DATA *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z
_TEXT	SEGMENT
$T235131 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z PROC ; std::_Uninitialized_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z ; std::_Ptr_cat<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T235131[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T235131[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@@Z ; std::_Val_type<CARNAGE_MONSTER_DATA *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z ; std::_Dest_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 60	 add	 eax, 96			; 00000060H
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra@2

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z ; std::_Dest_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
PUBLIC	??$_Val_type@PAUCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@PAU1@@Z ; std::_Val_type<CARNAGE_ITEM *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@@Z
_TEXT	SEGMENT
$T235136 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@@Z PROC ; std::_Uninitialized_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z ; std::_Ptr_cat<CARNAGE_ITEM,CARNAGE_ITEM>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T235136[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T235136[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@PAU1@@Z ; std::_Val_type<CARNAGE_ITEM *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ENDP ; std::_Uninitialized_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z ; std::_Dest_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra@3
$LN2@Destroy_ra@3:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 20	 add	 eax, 32			; 00000020H
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@3:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra@3

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z ; std::_Dest_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra@3
$LN4@Destroy_ra@3:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T235141 = -88						; size = 4
$T235142 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z PROC ; std::_Construct<CARNAGE_TIME,CARNAGE_TIME const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 08		 push	 8
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T235142[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T235142[ebp], 0
  0004a	74 21		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z ; std::forward<CARNAGE_TIME const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005d	8b 4d ac	 mov	 ecx, DWORD PTR $T235142[ebp]
  00060	89 11		 mov	 DWORD PTR [ecx], edx
  00062	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00065	8b 55 ac	 mov	 edx, DWORD PTR $T235142[ebp]
  00068	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  0006b	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  0006d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  00074	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00077	89 45 a8	 mov	 DWORD PTR $T235141[ebp], eax
  0007a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T235142[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z ENDP ; std::_Construct<CARNAGE_TIME,CARNAGE_TIME const &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T235154 = -88						; size = 4
$T235155 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z PROC ; std::_Construct<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 60		 push	 96			; 00000060H
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T235155[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T235155[ebp], 0
  0004a	74 20		 je	 SHORT $LN3@Construct@2
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::forward<CARNAGE_MONSTER_DATA const &>
  00055	83 c4 04	 add	 esp, 4
  00058	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0005d	8b f0		 mov	 esi, eax
  0005f	8b 7d ac	 mov	 edi, DWORD PTR $T235155[ebp]
  00062	f3 a5		 rep movsd
  00064	8b 55 ac	 mov	 edx, DWORD PTR $T235155[ebp]
  00067	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  0006a	eb 07		 jmp	 SHORT $LN4@Construct@2
$LN3@Construct@2:
  0006c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct@2:
  00073	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00076	89 45 a8	 mov	 DWORD PTR $T235154[ebp], eax
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T235155[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z ENDP ; std::_Construct<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T235167 = -88						; size = 4
$T235168 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z PROC ; std::_Construct<CARNAGE_ITEM,CARNAGE_ITEM const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 20		 push	 32			; 00000020H
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T235168[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T235168[ebp], 0
  0004a	74 20		 je	 SHORT $LN3@Construct@3
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z ; std::forward<CARNAGE_ITEM const &>
  00055	83 c4 04	 add	 esp, 4
  00058	b9 08 00 00 00	 mov	 ecx, 8
  0005d	8b f0		 mov	 esi, eax
  0005f	8b 7d ac	 mov	 edi, DWORD PTR $T235168[ebp]
  00062	f3 a5		 rep movsd
  00064	8b 55 ac	 mov	 edx, DWORD PTR $T235168[ebp]
  00067	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  0006a	eb 07		 jmp	 SHORT $LN4@Construct@3
$LN3@Construct@3:
  0006c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct@3:
  00073	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00076	89 45 a8	 mov	 DWORD PTR $T235167[ebp], eax
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T235168[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z ENDP ; std::_Construct<CARNAGE_ITEM,CARNAGE_ITEM const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z PROC ; std::move<CARNAGE_TIME &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ENDP ; std::move<CARNAGE_TIME &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$move@AAUCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z PROC ; std::move<CARNAGE_MONSTER_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ENDP ; std::move<CARNAGE_MONSTER_DATA &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$move@AAUCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z PROC ; std::move<CARNAGE_ITEM &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ENDP ; std::move<CARNAGE_ITEM &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@PAU1@@Z PROC ; std::_Val_type<CARNAGE_TIME *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@PAU1@@Z ENDP ; std::_Val_type<CARNAGE_TIME *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 08	 add	 eax, 8
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 08	 add	 ecx, 8
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 08	 add	 eax, 8
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z ; std::_Dest_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
PUBLIC	?destroy@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@@Z ; std::allocator<CARNAGE_TIME>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z PROC ; std::_Dest_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@@Z ; std::allocator<CARNAGE_TIME>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z ENDP ; std::_Dest_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@@Z PROC ; std::_Val_type<CARNAGE_MONSTER_DATA *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@@Z ENDP ; std::_Val_type<CARNAGE_MONSTER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov@2
$LN5@Uninit_mov@2:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 60	 add	 eax, 96			; 00000060H
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 60	 add	 ecx, 96			; 00000060H
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov@2:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov@2

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov@2
$LN4@Uninit_mov@2:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov@2
__catch$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov@2
$LN2@Uninit_mov@2:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 60	 add	 eax, 96			; 00000060H
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov@2:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov@2

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z ; std::_Dest_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov@2
$LN1@Uninit_mov@2:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov@2:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov@2:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
PUBLIC	?destroy@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z PROC ; std::_Dest_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@PAU1@@Z PROC ; std::_Val_type<CARNAGE_ITEM *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@PAU1@@Z ENDP ; std::_Val_type<CARNAGE_ITEM *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov@3
$LN5@Uninit_mov@3:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 20	 add	 eax, 32			; 00000020H
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 20	 add	 ecx, 32			; 00000020H
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov@3:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov@3

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov@3
$LN4@Uninit_mov@3:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov@3
__catch$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov@3
$LN2@Uninit_mov@3:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 20	 add	 eax, 32			; 00000020H
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov@3:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov@3

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z ; std::_Dest_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov@3
$LN1@Uninit_mov@3:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov@3:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov@3:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
PUBLIC	?destroy@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@@Z ; std::allocator<CARNAGE_ITEM>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z PROC ; std::_Dest_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@@Z ; std::allocator<CARNAGE_ITEM>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z ENDP ; std::_Dest_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	??$_Destroy@UCARNAGE_TIME@@@std@@YAXPAUCARNAGE_TIME@@@Z ; std::_Destroy<CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@@Z PROC ; std::allocator<CARNAGE_TIME>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UCARNAGE_TIME@@@std@@YAXPAUCARNAGE_TIME@@@Z ; std::_Destroy<CARNAGE_TIME>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@@Z ENDP ; std::allocator<CARNAGE_TIME>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UCARNAGE_MONSTER_DATA@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@@Z ; std::_Destroy<CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UCARNAGE_MONSTER_DATA@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@@Z ; std::_Destroy<CARNAGE_MONSTER_DATA>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UCARNAGE_ITEM@@@std@@YAXPAUCARNAGE_ITEM@@@Z ; std::_Destroy<CARNAGE_ITEM>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@@Z PROC ; std::allocator<CARNAGE_ITEM>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UCARNAGE_ITEM@@@std@@YAXPAUCARNAGE_ITEM@@@Z ; std::_Destroy<CARNAGE_ITEM>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@@Z ENDP ; std::allocator<CARNAGE_ITEM>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z ; std::allocator<CARNAGE_TIME>::construct
PUBLIC	??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ; std::forward<CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ; std::forward<CARNAGE_TIME>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z ; std::allocator<CARNAGE_TIME>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::construct
PUBLIC	??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::forward<CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::forward<CARNAGE_MONSTER_DATA>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z ; std::allocator<CARNAGE_ITEM>::construct
PUBLIC	??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ; std::forward<CARNAGE_ITEM>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ; std::forward<CARNAGE_ITEM>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z ; std::allocator<CARNAGE_ITEM>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UCARNAGE_TIME@@@std@@YAXPAUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCARNAGE_TIME@@@std@@YAXPAUCARNAGE_TIME@@@Z PROC ; std::_Destroy<CARNAGE_TIME>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UCARNAGE_TIME@@@std@@YAXPAUCARNAGE_TIME@@@Z ENDP ; std::_Destroy<CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UCARNAGE_MONSTER_DATA@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCARNAGE_MONSTER_DATA@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@@Z PROC ; std::_Destroy<CARNAGE_MONSTER_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UCARNAGE_MONSTER_DATA@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::_Destroy<CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UCARNAGE_ITEM@@@std@@YAXPAUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCARNAGE_ITEM@@@std@@YAXPAUCARNAGE_ITEM@@@Z PROC ; std::_Destroy<CARNAGE_ITEM>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UCARNAGE_ITEM@@@std@@YAXPAUCARNAGE_ITEM@@@Z ENDP ; std::_Destroy<CARNAGE_ITEM>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T235261 = -88						; size = 4
$T235262 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z PROC ; std::allocator<CARNAGE_TIME>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 08		 push	 8
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T235262[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T235262[ebp], 0
  00047	74 21		 je	 SHORT $LN3@construct@4
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ; std::forward<CARNAGE_TIME>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005a	8b 4d ac	 mov	 ecx, DWORD PTR $T235262[ebp]
  0005d	89 11		 mov	 DWORD PTR [ecx], edx
  0005f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00062	8b 55 ac	 mov	 edx, DWORD PTR $T235262[ebp]
  00065	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00068	eb 07		 jmp	 SHORT $LN4@construct@4
$LN3@construct@4:
  0006a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@4:
  00071	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00074	89 45 a8	 mov	 DWORD PTR $T235261[ebp], eax
  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T235262[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z ENDP ; std::allocator<CARNAGE_TIME>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T235274 = -88						; size = 4
$T235275 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 60		 push	 96			; 00000060H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T235275[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T235275[ebp], 0
  00047	74 20		 je	 SHORT $LN3@construct@5
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::forward<CARNAGE_MONSTER_DATA>
  00052	83 c4 04	 add	 esp, 4
  00055	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0005a	8b f0		 mov	 esi, eax
  0005c	8b 7d ac	 mov	 edi, DWORD PTR $T235275[ebp]
  0005f	f3 a5		 rep movsd
  00061	8b 55 ac	 mov	 edx, DWORD PTR $T235275[ebp]
  00064	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00067	eb 07		 jmp	 SHORT $LN4@construct@5
$LN3@construct@5:
  00069	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@5:
  00070	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00073	89 45 a8	 mov	 DWORD PTR $T235274[ebp], eax
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T235275[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T235287 = -88						; size = 4
$T235288 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z PROC ; std::allocator<CARNAGE_ITEM>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 20		 push	 32			; 00000020H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T235288[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T235288[ebp], 0
  00047	74 20		 je	 SHORT $LN3@construct@6
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ; std::forward<CARNAGE_ITEM>
  00052	83 c4 04	 add	 esp, 4
  00055	b9 08 00 00 00	 mov	 ecx, 8
  0005a	8b f0		 mov	 esi, eax
  0005c	8b 7d ac	 mov	 edi, DWORD PTR $T235288[ebp]
  0005f	f3 a5		 rep movsd
  00061	8b 55 ac	 mov	 edx, DWORD PTR $T235288[ebp]
  00064	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00067	eb 07		 jmp	 SHORT $LN4@construct@6
$LN3@construct@6:
  00069	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@6:
  00070	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00073	89 45 a8	 mov	 DWORD PTR $T235287[ebp], eax
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T235288[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z ENDP ; std::allocator<CARNAGE_ITEM>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z PROC ; std::forward<CARNAGE_TIME>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ENDP ; std::forward<CARNAGE_TIME>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z PROC ; std::forward<CARNAGE_MONSTER_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ENDP ; std::forward<CARNAGE_MONSTER_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z PROC ; std::forward<CARNAGE_ITEM>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ENDP ; std::forward<CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\carnageevent.cpp
;	COMDAT ??__Eg_CarnageEvent@@YAXXZ
text$yc	SEGMENT
??__Eg_CarnageEvent@@YAXXZ PROC				; `dynamic initializer for 'g_CarnageEvent'', COMDAT

; 14   : CCarnageEvent g_CarnageEvent;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CarnageEvent@@3VCCarnageEvent@@A ; g_CarnageEvent
  0000e	e8 00 00 00 00	 call	 ??0CCarnageEvent@@QAE@XZ ; CCarnageEvent::CCarnageEvent
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_CarnageEvent@@YAXXZ ; `dynamic atexit destructor for 'g_CarnageEvent''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_CarnageEvent@@YAXXZ ENDP				; `dynamic initializer for 'g_CarnageEvent''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_CarnageEvent@@YAXXZ
text$yd	SEGMENT
??__Fg_CarnageEvent@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CarnageEvent'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CarnageEvent@@3VCCarnageEvent@@A ; g_CarnageEvent
  0000e	e8 00 00 00 00	 call	 ??1CCarnageEvent@@QAE@XZ ; CCarnageEvent::~CCarnageEvent
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_CarnageEvent@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CarnageEvent''
text$yd	ENDS
PUBLIC	?g_CarnageEvent@@3VCCarnageEvent@@A		; g_CarnageEvent
_BSS	SEGMENT
?g_CarnageEvent@@3VCCarnageEvent@@A DB 027a0H DUP (?)	; g_CarnageEvent
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CarnageEvent$initializer$ DD FLAT:??__Eg_CarnageEvent@@YAXXZ
CRT$XCU	ENDS
END
