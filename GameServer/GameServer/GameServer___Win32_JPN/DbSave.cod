; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\DbSave.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Initialize@CDbSave@@QAEHXZ			; CDbSave::Initialize
PUBLIC	??_7CDbSave@@6B@				; CDbSave::`vftable'
PUBLIC	??0CDbSave@@QAE@XZ				; CDbSave::CDbSave
PUBLIC	??_R4CDbSave@@6B@				; CDbSave::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDbSave@@@8				; CDbSave `RTTI Type Descriptor'
PUBLIC	??_R3CDbSave@@8					; CDbSave::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDbSave@@8					; CDbSave::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDbSave@@8			; CDbSave::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECDbSave@@UAEPAXI@Z:PROC			; CDbSave::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CDbSave@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\dbsave.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CDbSave@@8 DD FLAT:??_R0?AVCDbSave@@@8	; CDbSave::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDbSave@@8
rdata$r	ENDS
;	COMDAT ??_R2CDbSave@@8
rdata$r	SEGMENT
??_R2CDbSave@@8 DD FLAT:??_R1A@?0A@EA@CDbSave@@8	; CDbSave::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDbSave@@8
rdata$r	SEGMENT
??_R3CDbSave@@8 DD 00H					; CDbSave::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDbSave@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDbSave@@@8
_DATA	SEGMENT
??_R0?AVCDbSave@@@8 DD FLAT:??_7type_info@@6B@		; CDbSave `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDbSave@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDbSave@@6B@
rdata$r	SEGMENT
??_R4CDbSave@@6B@ DD 00H				; CDbSave::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDbSave@@@8
	DD	FLAT:??_R3CDbSave@@8
rdata$r	ENDS
;	COMDAT ??_7CDbSave@@6B@
CONST	SEGMENT
??_7CDbSave@@6B@ DD FLAT:??_R4CDbSave@@6B@		; CDbSave::`vftable'
	DD	FLAT:??_ECDbSave@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDbSave@@QAE@XZ PROC					; CDbSave::CDbSave
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDbSave@@6B@

; 12   : 	this->m_lpWzQueue=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 13   : 	this->m_bIsRunning=FALSE;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 14   : 	this->Initialize();

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?Initialize@CDbSave@@QAEHXZ ; CDbSave::Initialize

; 15   : }

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??0CDbSave@@QAE@XZ ENDP					; CDbSave::CDbSave
_TEXT	ENDS
PUBLIC	??1CDbSave@@UAE@XZ				; CDbSave::~CDbSave
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCDbSave@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDbSave@@UAEPAXI@Z PROC				; CDbSave::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CDbSave@@UAE@XZ	; CDbSave::~CDbSave
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCDbSave@@UAEPAXI@Z ENDP				; CDbSave::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Feee@CDbSave@@QAEHXZ				; CDbSave::Feee
PUBLIC	?End@CDbSave@@QAEXXZ				; CDbSave::End
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDbSave@@UAE@XZ PROC					; CDbSave::~CDbSave
; _this$ = ecx

; 18   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDbSave@@6B@

; 19   : 	this->End();

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?End@CDbSave@@QAEXXZ	; CDbSave::End

; 20   : 	this->Feee();

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?Feee@CDbSave@@QAEHXZ	; CDbSave::Feee

; 21   : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??1CDbSave@@UAE@XZ ENDP					; CDbSave::~CDbSave
_TEXT	ENDS
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	??0WZQueue@@QAE@I@Z:PROC			; WZQueue::WZQueue
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?Initialize@CDbSave@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CDbSave@@QAEHXZ$0
__ehfuncinfo$?Initialize@CDbSave@@QAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Initialize@CDbSave@@QAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv73 = -92						; size = 4
$T227178 = -88						; size = 4
$T227179 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Initialize@CDbSave@@QAEHXZ PROC			; CDbSave::Initialize
; _this$ = ecx

; 24   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	6a ff		 push	 -1
  00075	68 00 00 00 00	 push	 __ehhandler$?Initialize@CDbSave@@QAEHXZ
  0007a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00080	50		 push	 eax
  00081	83 ec 50	 sub	 esp, 80			; 00000050H
  00084	53		 push	 ebx
  00085	56		 push	 esi
  00086	57		 push	 edi
  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0008c	33 c5		 xor	 eax, ebp
  0008e	50		 push	 eax
  0008f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00092	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00098	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 	
; 26   : 	this->m_lpWzQueue  = new WZQueue(1280);

  0009b	6a 2c		 push	 44			; 0000002cH
  0009d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a2	83 c4 04	 add	 esp, 4
  000a5	89 45 ac	 mov	 DWORD PTR $T227179[ebp], eax
  000a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000af	83 7d ac 00	 cmp	 DWORD PTR $T227179[ebp], 0
  000b3	74 12		 je	 SHORT $LN4@Initialize
  000b5	68 00 05 00 00	 push	 1280			; 00000500H
  000ba	8b 4d ac	 mov	 ecx, DWORD PTR $T227179[ebp]
  000bd	e8 00 00 00 00	 call	 ??0WZQueue@@QAE@I@Z	; WZQueue::WZQueue
  000c2	89 45 a4	 mov	 DWORD PTR tv73[ebp], eax
  000c5	eb 07		 jmp	 SHORT $LN5@Initialize
$LN4@Initialize:
  000c7	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN5@Initialize:
  000ce	8b 45 a4	 mov	 eax, DWORD PTR tv73[ebp]
  000d1	89 45 a8	 mov	 DWORD PTR $T227178[ebp], eax
  000d4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000db	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	8b 55 a8	 mov	 edx, DWORD PTR $T227178[ebp]
  000e1	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 27   : 
; 28   : 	if ( this->m_lpWzQueue == 0)

  000e4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000eb	75 04		 jne	 SHORT $LN1@Initialize

; 29   : 	{
; 30   : 		return FALSE;

  000ed	33 c0		 xor	 eax, eax
  000ef	eb 12		 jmp	 SHORT $LN2@Initialize
$LN1@Initialize:

; 31   : 	}
; 32   : 	
; 33   : 	InitializeCriticalSection(&this->criti );

  000f1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	83 c0 14	 add	 eax, 20			; 00000014H
  000f7	50		 push	 eax
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 34   : 	return TRUE;

  000fe	b8 01 00 00 00	 mov	 eax, 1
$LN2@Initialize:

; 35   : }

  00103	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00106	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010d	59		 pop	 ecx
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Initialize@CDbSave@@QAEHXZ$0:
  00000	8b 45 ac	 mov	 eax, DWORD PTR $T227179[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Initialize@CDbSave@@QAEHXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Initialize@CDbSave@@QAEHXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Initialize@CDbSave@@QAEHXZ ENDP			; CDbSave::Initialize
PUBLIC	??_GWZQueue@@QAEPAXI@Z				; WZQueue::`scalar deleting destructor'
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv71 = -80						; size = 4
$T227193 = -76						; size = 4
$T227194 = -72						; size = 4
_this$ = -4						; size = 4
?Feee@CDbSave@@QAEHXZ PROC				; CDbSave::Feee
; _this$ = ecx

; 38   : {

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp
  00123	83 ec 50	 sub	 esp, 80			; 00000050H
  00126	53		 push	 ebx
  00127	56		 push	 esi
  00128	57		 push	 edi
  00129	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 	if ( this->m_lpWzQueue != 0 )

  0012c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00133	74 35		 je	 SHORT $LN1@Feee

; 40   : 	{
; 41   : 		delete this->m_lpWzQueue;

  00135	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00138	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0013b	89 4d b8	 mov	 DWORD PTR $T227194[ebp], ecx
  0013e	8b 55 b8	 mov	 edx, DWORD PTR $T227194[ebp]
  00141	89 55 b4	 mov	 DWORD PTR $T227193[ebp], edx
  00144	83 7d b4 00	 cmp	 DWORD PTR $T227193[ebp], 0
  00148	74 0f		 je	 SHORT $LN4@Feee
  0014a	6a 01		 push	 1
  0014c	8b 4d b4	 mov	 ecx, DWORD PTR $T227193[ebp]
  0014f	e8 00 00 00 00	 call	 ??_GWZQueue@@QAEPAXI@Z
  00154	89 45 b0	 mov	 DWORD PTR tv71[ebp], eax
  00157	eb 07		 jmp	 SHORT $LN5@Feee
$LN4@Feee:
  00159	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN5@Feee:

; 42   : 		this->m_lpWzQueue = 0;

  00160	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00163	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN1@Feee:

; 43   : 	}
; 44   : 
; 45   : 	DeleteCriticalSection(&this->criti );

  0016a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016d	83 c0 14	 add	 eax, 20			; 00000014H
  00170	50		 push	 eax
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 46   : 	return TRUE;

  00177	b8 01 00 00 00	 mov	 eax, 1

; 47   : }

  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
?Feee@CDbSave@@QAEHXZ ENDP				; CDbSave::Feee
_TEXT	ENDS
EXTRN	??1WZQueue@@QAE@XZ:PROC				; WZQueue::~WZQueue
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GWZQueue@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWZQueue@@QAEPAXI@Z PROC				; WZQueue::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1WZQueue@@QAE@XZ	; WZQueue::~WZQueue
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GWZQueue@@QAEPAXI@Z ENDP				; WZQueue::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Add@CDbSave@@QAEHPAEHEH@Z			; CDbSave::Add
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	?AddToQueue@WZQueue@@QAEHQAEIEH@Z:PROC		; WZQueue::AddToQueue
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_bRet$ = -8						; size = 4
_this$ = -4						; size = 4
_pObject$ = 8						; size = 4
_nSize$ = 12						; size = 4
_headcode$ = 16						; size = 1
_index$ = 20						; size = 4
?Add@CDbSave@@QAEHPAEHEH@Z PROC				; CDbSave::Add
; _this$ = ecx

; 51   : {

  00190	55		 push	 ebp
  00191	8b ec		 mov	 ebp, esp
  00193	83 ec 48	 sub	 esp, 72			; 00000048H
  00196	53		 push	 ebx
  00197	56		 push	 esi
  00198	57		 push	 edi
  00199	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 	EnterCriticalSection(&this->criti);

  0019c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019f	83 c0 14	 add	 eax, 20			; 00000014H
  001a2	50		 push	 eax
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 53   : 
; 54   : 	BOOL bRet=this->m_lpWzQueue->AddToQueue(pObject, nSize, headcode, index);

  001a9	8b 45 14	 mov	 eax, DWORD PTR _index$[ebp]
  001ac	50		 push	 eax
  001ad	0f b6 4d 10	 movzx	 ecx, BYTE PTR _headcode$[ebp]
  001b1	51		 push	 ecx
  001b2	8b 55 0c	 mov	 edx, DWORD PTR _nSize$[ebp]
  001b5	52		 push	 edx
  001b6	8b 45 08	 mov	 eax, DWORD PTR _pObject$[ebp]
  001b9	50		 push	 eax
  001ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bd	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  001c0	e8 00 00 00 00	 call	 ?AddToQueue@WZQueue@@QAEHQAEIEH@Z ; WZQueue::AddToQueue
  001c5	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 55   : 
; 56   : 	LeaveCriticalSection(&this->criti);

  001c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001cb	83 c0 14	 add	 eax, 20			; 00000014H
  001ce	50		 push	 eax
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 57   : 	return bRet;

  001d5	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 58   : }

  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx
  001db	8b e5		 mov	 esp, ebp
  001dd	5d		 pop	 ebp
  001de	c2 10 00	 ret	 16			; 00000010H
?Add@CDbSave@@QAEHPAEHEH@Z ENDP				; CDbSave::Add
_TEXT	ENDS
PUBLIC	??_C@_0DO@GGFMOCNF@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??Begin@CDbSave@@QAEHXZ@4JA	; `CDbSave::Begin'::`2'::__LINE__Var
PUBLIC	?Begin@CDbSave@@QAEHXZ				; CDbSave::Begin
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	__imp__CreateThread@24:PROC
;	COMDAT ??_C@_0DO@GGFMOCNF@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0DO@GGFMOCNF@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\dbsave.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Begin@CDbSave@@QAEHXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Begin@CDbSave@@QAEHXZ@4JA DD 03dH	; `CDbSave::Begin'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Begin@CDbSave@@QAEHXZ PROC				; CDbSave::Begin
; _this$ = ecx

; 61   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	83 ec 44	 sub	 esp, 68			; 00000044H
  001f6	53		 push	 ebx
  001f7	56		 push	 esi
  001f8	57		 push	 edi
  001f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	if ( this->m_ThreadHandle != 0 )

  001fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ff	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00203	74 08		 je	 SHORT $LN2@Begin

; 63   : 	{
; 64   : 		this->End();

  00205	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00208	e8 00 00 00 00	 call	 ?End@CDbSave@@QAEXXZ	; CDbSave::End
$LN2@Begin:

; 65   : 	}
; 66   : 
; 67   : 	this->m_bIsRunning=TRUE;

  0020d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00210	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 68   : 
; 69   : 	this->m_ThreadHandle=CreateThread( NULL, 0, (LPTHREAD_START_ROUTINE)cSaveThreadProc, this, 0, &this->m_dwThreadID  );

  00217	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0021a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0021d	50		 push	 eax
  0021e	6a 00		 push	 0
  00220	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00223	51		 push	 ecx
  00224	68 00 00 00 00	 push	 OFFSET ?cSaveThreadProc@@YGJPAVCDbSave@@@Z ; cSaveThreadProc
  00229	6a 00		 push	 0
  0022b	6a 00		 push	 0
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24
  00233	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00236	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 70   : 
; 71   : 	if ( this->m_ThreadHandle == 0 )

  00239	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0023c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00240	75 27		 jne	 SHORT $LN1@Begin

; 72   : 	{
; 73   : 		MsgBox(lMsg.Get(MSGGET(0, 113)), __FILE__, __LINE__);

  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Begin@CDbSave@@QAEHXZ@4JA
  00247	83 c0 0c	 add	 eax, 12			; 0000000cH
  0024a	50		 push	 eax
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@GGFMOCNF@d?3?2projects?2exteam6?43?2source?2gam@
  00250	6a 71		 push	 113			; 00000071H
  00252	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00257	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0025c	50		 push	 eax
  0025d	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00262	83 c4 0c	 add	 esp, 12			; 0000000cH

; 74   : 		return FALSE;

  00265	33 c0		 xor	 eax, eax
  00267	eb 05		 jmp	 SHORT $LN3@Begin
$LN1@Begin:

; 75   : 	}
; 76   : 
; 77   : 	return TRUE;

  00269	b8 01 00 00 00	 mov	 eax, 1
$LN3@Begin:

; 78   : }

  0026e	5f		 pop	 edi
  0026f	5e		 pop	 esi
  00270	5b		 pop	 ebx
  00271	8b e5		 mov	 esp, ebp
  00273	5d		 pop	 ebp
  00274	c3		 ret	 0
?Begin@CDbSave@@QAEHXZ ENDP				; CDbSave::Begin
_TEXT	ENDS
PUBLIC	?ThreadProc@CDbSave@@QAEKXZ			; CDbSave::ThreadProc
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pThis$ = 8						; size = 4
?cSaveThreadProc@@YGJPAVCDbSave@@@Z PROC		; cSaveThreadProc

; 81   : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 40	 sub	 esp, 64			; 00000040H
  00286	53		 push	 ebx
  00287	56		 push	 esi
  00288	57		 push	 edi

; 82   : 	return pThis->ThreadProc();

  00289	8b 4d 08	 mov	 ecx, DWORD PTR _pThis$[ebp]
  0028c	e8 00 00 00 00	 call	 ?ThreadProc@CDbSave@@QAEKXZ ; CDbSave::ThreadProc

; 83   : 
; 84   : }

  00291	5f		 pop	 edi
  00292	5e		 pop	 esi
  00293	5b		 pop	 ebx
  00294	8b e5		 mov	 esp, ebp
  00296	5d		 pop	 ebp
  00297	c2 04 00	 ret	 4
?cSaveThreadProc@@YGJPAVCDbSave@@@Z ENDP		; cSaveThreadProc
_TEXT	ENDS
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?End@CDbSave@@QAEXXZ PROC				; CDbSave::End
; _this$ = ecx

; 87   : {

  002a0	55		 push	 ebp
  002a1	8b ec		 mov	 ebp, esp
  002a3	83 ec 44	 sub	 esp, 68			; 00000044H
  002a6	53		 push	 ebx
  002a7	56		 push	 esi
  002a8	57		 push	 edi
  002a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 88   : 	if ( this->m_ThreadHandle != 0 )

  002ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002af	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  002b3	74 30		 je	 SHORT $LN2@End

; 89   : 	{
; 90   : 		this->m_bIsRunning = FALSE;

  002b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b8	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 91   : 		WaitForSingleObject(this->m_ThreadHandle , INFINITE);

  002bf	6a ff		 push	 -1
  002c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002c7	51		 push	 ecx
  002c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 92   : 		CloseHandle(this->m_ThreadHandle );

  002ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002d4	51		 push	 ecx
  002d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 93   : 		this->m_ThreadHandle=0;

  002db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002de	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN2@End:

; 94   : 	}
; 95   : }

  002e5	5f		 pop	 edi
  002e6	5e		 pop	 esi
  002e7	5b		 pop	 ebx
  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c3		 ret	 0
?End@CDbSave@@QAEXXZ ENDP				; CDbSave::End
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?wsDataCli@@3VwsJoinServerCli@@A:BYTE		; wsDataCli
EXTRN	?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z:PROC	; WZQueue::GetFromQueue
EXTRN	?GetCount@WZQueue@@QAEIXZ:PROC			; WZQueue::GetCount
EXTRN	__chkstk:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_uindex$ = -5024					; size = 4
_headcode$ = -5020					; size = 4
_nSize$ = -5016						; size = 4
_RecvData$ = -5012					; size = 5000
_count$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ThreadProc@CDbSave@@QAEKXZ PROC			; CDbSave::ThreadProc
; _this$ = ecx

; 98   : {

  002f0	55		 push	 ebp
  002f1	8b ec		 mov	 ebp, esp
  002f3	b8 e0 13 00 00	 mov	 eax, 5088		; 000013e0H
  002f8	e8 00 00 00 00	 call	 __chkstk
  002fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00302	33 c5		 xor	 eax, ebp
  00304	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00307	53		 push	 ebx
  00308	56		 push	 esi
  00309	57		 push	 edi
  0030a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN7@ThreadProc:

; 99   : 	int count;
; 100  : 	BYTE RecvData[5000];
; 101  : 	unsigned int nSize;
; 102  : 	int headcode;
; 103  : 	int uindex;
; 104  : 
; 105  : 	while ( true )

  0030d	b8 01 00 00 00	 mov	 eax, 1
  00312	85 c0		 test	 eax, eax
  00314	0f 84 ec 00 00
	00		 je	 $LN6@ThreadProc

; 106  : 	{
; 107  : 		EnterCriticalSection(&this->criti);

  0031a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0031d	83 c0 14	 add	 eax, 20			; 00000014H
  00320	50		 push	 eax
  00321	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 108  : 		count=this->m_lpWzQueue->GetCount();

  00327	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0032a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0032d	e8 00 00 00 00	 call	 ?GetCount@WZQueue@@QAEIXZ ; WZQueue::GetCount
  00332	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax

; 109  : 
; 110  : 		if ( count != 0 )

  00335	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  00339	0f 84 92 00 00
	00		 je	 $LN5@ThreadProc

; 111  : 		{
; 112  : 			if (this->m_lpWzQueue->GetFromQueue((LPBYTE)RecvData, &nSize, (UCHAR*)&headcode, &uindex) == 1 )

  0033f	8d 85 60 ec ff
	ff		 lea	 eax, DWORD PTR _uindex$[ebp]
  00345	50		 push	 eax
  00346	8d 8d 64 ec ff
	ff		 lea	 ecx, DWORD PTR _headcode$[ebp]
  0034c	51		 push	 ecx
  0034d	8d 95 68 ec ff
	ff		 lea	 edx, DWORD PTR _nSize$[ebp]
  00353	52		 push	 edx
  00354	8d 85 6c ec ff
	ff		 lea	 eax, DWORD PTR _RecvData$[ebp]
  0035a	50		 push	 eax
  0035b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0035e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00361	e8 00 00 00 00	 call	 ?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z ; WZQueue::GetFromQueue
  00366	83 f8 01	 cmp	 eax, 1
  00369	75 66		 jne	 SHORT $LN5@ThreadProc

; 113  : 			{
; 114  : 				if (wsDataCli.DataSend((char*)RecvData, nSize) == 0 )

  0036b	8b 85 68 ec ff
	ff		 mov	 eax, DWORD PTR _nSize$[ebp]
  00371	50		 push	 eax
  00372	8d 8d 6c ec ff
	ff		 lea	 ecx, DWORD PTR _RecvData$[ebp]
  00378	51		 push	 ecx
  00379	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsDataCli@@3VwsJoinServerCli@@A ; wsDataCli
  0037e	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
  00383	85 c0		 test	 eax, eax
  00385	75 26		 jne	 SHORT $LN3@ThreadProc

; 115  : 				{
; 116  : 					LogAdd(lMsg.Get(MSGGET(1, 189)), count, uindex);

  00387	8b 85 60 ec ff
	ff		 mov	 eax, DWORD PTR _uindex$[ebp]
  0038d	50		 push	 eax
  0038e	8b 4d f4	 mov	 ecx, DWORD PTR _count$[ebp]
  00391	51		 push	 ecx
  00392	68 bd 01 00 00	 push	 445			; 000001bdH
  00397	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0039c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  003a1	50		 push	 eax
  003a2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  003a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 117  : 				}
; 118  : 				else

  003ab	eb 24		 jmp	 SHORT $LN5@ThreadProc
$LN3@ThreadProc:

; 119  : 				{
; 120  : 					LogAdd(lMsg.Get(MSGGET(1, 190)), count, uindex);

  003ad	8b 85 60 ec ff
	ff		 mov	 eax, DWORD PTR _uindex$[ebp]
  003b3	50		 push	 eax
  003b4	8b 4d f4	 mov	 ecx, DWORD PTR _count$[ebp]
  003b7	51		 push	 ecx
  003b8	68 be 01 00 00	 push	 446			; 000001beH
  003bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  003c2	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  003c7	50		 push	 eax
  003c8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  003ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@ThreadProc:

; 121  : 				}
; 122  : 			}
; 123  : 		}
; 124  : 
; 125  : 		if ( this->m_bIsRunning == FALSE && count == 0)

  003d1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d4	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003d8	75 08		 jne	 SHORT $LN1@ThreadProc
  003da	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  003de	75 02		 jne	 SHORT $LN1@ThreadProc

; 126  : 		{
; 127  : 			break;

  003e0	eb 24		 jmp	 SHORT $LN6@ThreadProc
$LN1@ThreadProc:

; 128  : 		}
; 129  : 
; 130  : 		LeaveCriticalSection(&this->criti);

  003e2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003e5	83 c0 14	 add	 eax, 20			; 00000014H
  003e8	50		 push	 eax
  003e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 131  : 		WaitForSingleObject(this->m_ThreadHandle , 300);

  003ef	68 2c 01 00 00	 push	 300			; 0000012cH
  003f4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003f7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003fa	51		 push	 ecx
  003fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 132  : 	}

  00401	e9 07 ff ff ff	 jmp	 $LN7@ThreadProc
$LN6@ThreadProc:

; 133  : 	return FALSE;

  00406	33 c0		 xor	 eax, eax

; 134  : }

  00408	5f		 pop	 edi
  00409	5e		 pop	 esi
  0040a	5b		 pop	 ebx
  0040b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0040e	33 cd		 xor	 ecx, ebp
  00410	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00415	8b e5		 mov	 esp, ebp
  00417	5d		 pop	 ebp
  00418	c3		 ret	 0
?ThreadProc@CDbSave@@QAEKXZ ENDP			; CDbSave::ThreadProc
_TEXT	ENDS
END
