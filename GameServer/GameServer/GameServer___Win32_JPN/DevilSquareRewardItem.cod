; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\DevilSquareRewardItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gDevilSquareRewardItem@@3VcDevilSquareRewardItem@@A ; gDevilSquareRewardItem
_BSS	SEGMENT
?gDevilSquareRewardItem@@3VcDevilSquareRewardItem@@A DB 0c828H DUP (?) ; gDevilSquareRewardItem
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0BA@CDGAONCL@RewardItemCount?$AA@		; `string'
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CJ@PDHNMBLF@?4?4?2Data?2ExData?2DevilSquareReward@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cDevilSquareRewardItem@@QAEXXZ		; cDevilSquareRewardItem::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\devilsquarerewarditem.cpp
CONST	SEGMENT
??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB ' '
	DB	'%d %d %d %d %d %d %d %d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CDGAONCL@RewardItemCount?$AA@
CONST	SEGMENT
??_C@_0BA@CDGAONCL@RewardItemCount?$AA@ DB 'RewardItemCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PDHNMBLF@?4?4?2Data?2ExData?2DevilSquareReward@
CONST	SEGMENT
??_C@_0CJ@PDHNMBLF@?4?4?2Data?2ExData?2DevilSquareReward@ DB '..\Data\ExD'
	DB	'ata\DevilSquareRewardItem.ini', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$219786 = -320					; size = 32
_j$219781 = -288					; size = 4
_j$219773 = -284					; size = 4
_Flag$ = -280						; size = 4
_Buff$ = -276						; size = 256
_file$ = -20						; size = 4
_i$219764 = -16						; size = 4
_j$219760 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Load@cDevilSquareRewardItem@@QAEXXZ PROC		; cDevilSquareRewardItem::Load
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 
; 23   : 	this->Enable = GetPrivateProfileInt("ExTeam","Enable",0,DS_REWARD_ITEM_DIR);

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PDHNMBLF@?4?4?2Data?2ExData?2DevilSquareReward@
  0001e	6a 00		 push	 0
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 01		 mov	 DWORD PTR [ecx], eax

; 24   : 	this->m_iRewardItemCount = GetPrivateProfileInt("ExTeam","RewardItemCount",0,DS_REWARD_ITEM_DIR);

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PDHNMBLF@?4?4?2Data?2ExData?2DevilSquareReward@
  0003a	6a 00		 push	 0
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDGAONCL@RewardItemCount?$AA@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 81 24 c8 00
	00		 mov	 DWORD PTR [ecx+51236], eax

; 25   : 	for (int j = 1; j < 8; j++)

  00055	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _j$219760[ebp], 1
  0005c	eb 09		 jmp	 SHORT $LN18@Load
$LN17@Load:
  0005e	8b 45 f4	 mov	 eax, DWORD PTR _j$219760[ebp]
  00061	83 c0 01	 add	 eax, 1
  00064	89 45 f4	 mov	 DWORD PTR _j$219760[ebp], eax
$LN18@Load:
  00067	83 7d f4 08	 cmp	 DWORD PTR _j$219760[ebp], 8
  0006b	0f 8d 00 01 00
	00		 jge	 $LN16@Load

; 26   : 	{
; 27   : 		for(int i=0;i<MAX_DS_REWARD_ITEM;i++)

  00071	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$219764[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN15@Load
$LN14@Load:
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _i$219764[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 f0	 mov	 DWORD PTR _i$219764[ebp], eax
$LN15@Load:
  00083	81 7d f0 c8 00
	00 00		 cmp	 DWORD PTR _i$219764[ebp], 200 ; 000000c8H
  0008a	0f 8d dc 00 00
	00		 jge	 $LN13@Load

; 28   : 		{
; 29   : 			this->Reward[i][j].Type	= 0;

  00090	8b 45 f0	 mov	 eax, DWORD PTR _i$219764[ebp]
  00093	c1 e0 08	 shl	 eax, 8
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0009d	8b 45 f4	 mov	 eax, DWORD PTR _j$219760[ebp]
  000a0	c1 e0 05	 shl	 eax, 5
  000a3	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], 0

; 30   : 			this->Reward[i][j].Index	= 0;

  000aa	8b 45 f0	 mov	 eax, DWORD PTR _i$219764[ebp]
  000ad	c1 e0 08	 shl	 eax, 8
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000b7	8b 45 f4	 mov	 eax, DWORD PTR _j$219760[ebp]
  000ba	c1 e0 05	 shl	 eax, 5
  000bd	c7 44 02 04 00
	00 00 00	 mov	 DWORD PTR [edx+eax+4], 0

; 31   : 			this->Reward[i][j].Level	= 0;

  000c5	8b 45 f0	 mov	 eax, DWORD PTR _i$219764[ebp]
  000c8	c1 e0 08	 shl	 eax, 8
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000d2	8b 45 f4	 mov	 eax, DWORD PTR _j$219760[ebp]
  000d5	c1 e0 05	 shl	 eax, 5
  000d8	c7 44 02 08 00
	00 00 00	 mov	 DWORD PTR [edx+eax+8], 0

; 32   : 			this->Reward[i][j].Skill	= 0;

  000e0	8b 45 f0	 mov	 eax, DWORD PTR _i$219764[ebp]
  000e3	c1 e0 08	 shl	 eax, 8
  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000ed	8b 45 f4	 mov	 eax, DWORD PTR _j$219760[ebp]
  000f0	c1 e0 05	 shl	 eax, 5
  000f3	c7 44 02 0c 00
	00 00 00	 mov	 DWORD PTR [edx+eax+12], 0

; 33   : 			this->Reward[i][j].Luck	= 0;

  000fb	8b 45 f0	 mov	 eax, DWORD PTR _i$219764[ebp]
  000fe	c1 e0 08	 shl	 eax, 8
  00101	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00108	8b 45 f4	 mov	 eax, DWORD PTR _j$219760[ebp]
  0010b	c1 e0 05	 shl	 eax, 5
  0010e	c7 44 02 10 00
	00 00 00	 mov	 DWORD PTR [edx+eax+16], 0

; 34   : 			this->Reward[i][j].Opt		= 0;

  00116	8b 45 f0	 mov	 eax, DWORD PTR _i$219764[ebp]
  00119	c1 e0 08	 shl	 eax, 8
  0011c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00123	8b 45 f4	 mov	 eax, DWORD PTR _j$219760[ebp]
  00126	c1 e0 05	 shl	 eax, 5
  00129	c7 44 02 14 00
	00 00 00	 mov	 DWORD PTR [edx+eax+20], 0

; 35   : 			this->Reward[i][j].Exl		= 0;

  00131	8b 45 f0	 mov	 eax, DWORD PTR _i$219764[ebp]
  00134	c1 e0 08	 shl	 eax, 8
  00137	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013a	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0013e	8b 45 f4	 mov	 eax, DWORD PTR _j$219760[ebp]
  00141	c1 e0 05	 shl	 eax, 5
  00144	c7 44 02 18 00
	00 00 00	 mov	 DWORD PTR [edx+eax+24], 0

; 36   : 			this->Reward[i][j].Anc		= 0;

  0014c	8b 45 f0	 mov	 eax, DWORD PTR _i$219764[ebp]
  0014f	c1 e0 08	 shl	 eax, 8
  00152	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00155	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00159	8b 45 f4	 mov	 eax, DWORD PTR _j$219760[ebp]
  0015c	c1 e0 05	 shl	 eax, 5
  0015f	c7 44 02 1c 00
	00 00 00	 mov	 DWORD PTR [edx+eax+28], 0

; 37   : 		}

  00167	e9 0e ff ff ff	 jmp	 $LN14@Load
$LN13@Load:

; 38   : 	}

  0016c	e9 ed fe ff ff	 jmp	 $LN17@Load
$LN16@Load:

; 39   : 
; 40   : 	//CheckFile(DS_REWARD_ITEM_DIR);
; 41   : 
; 42   : 	FILE *file = fopen(DS_REWARD_ITEM_DIR,"r");

  00171	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PDHNMBLF@?4?4?2Data?2ExData?2DevilSquareReward@
  0017b	e8 00 00 00 00	 call	 _fopen
  00180	83 c4 08	 add	 esp, 8
  00183	89 45 ec	 mov	 DWORD PTR _file$[ebp], eax

; 43   : 
; 44   : 	if(file == NULL)

  00186	83 7d ec 00	 cmp	 DWORD PTR _file$[ebp], 0
  0018a	75 0e		 jne	 SHORT $LN12@Load

; 45   : 	{
; 46   : 		this->Enable = 0;

  0018c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 47   : 		return;

  00195	e9 cd 02 00 00	 jmp	 $LN19@Load
$LN12@Load:

; 48   : 	}
; 49   : 
; 50   : 	char Buff[256];
; 51   : 	int Flag = 0;

  0019a	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0

; 52   : 	for (int j = 1; j < 8; j++)

  001a4	c7 85 e4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _j$219773[ebp], 1
  001ae	eb 0f		 jmp	 SHORT $LN11@Load
$LN10@Load:
  001b0	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _j$219773[ebp]
  001b6	83 c0 01	 add	 eax, 1
  001b9	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _j$219773[ebp], eax
$LN11@Load:
  001bf	83 bd e4 fe ff
	ff 08		 cmp	 DWORD PTR _j$219773[ebp], 8
  001c6	7d 16		 jge	 SHORT $LN8@Load

; 53   : 	{
; 54   : 		this->Count[j] = 0;

  001c8	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _j$219773[ebp]
  001ce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d1	c7 84 81 04 c8
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+51204], 0

; 55   : 	}

  001dc	eb d2		 jmp	 SHORT $LN10@Load
$LN8@Load:

; 56   : 	
; 57   : 	while(!feof(file))

  001de	8b 45 ec	 mov	 eax, DWORD PTR _file$[ebp]
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 _feof
  001e7	83 c4 04	 add	 esp, 4
  001ea	85 c0		 test	 eax, eax
  001ec	0f 85 69 02 00
	00		 jne	 $LN7@Load

; 58   : 	{
; 59   : 		fgets(Buff,256,file);	

  001f2	8b 45 ec	 mov	 eax, DWORD PTR _file$[ebp]
  001f5	50		 push	 eax
  001f6	68 00 01 00 00	 push	 256			; 00000100H
  001fb	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00201	51		 push	 ecx
  00202	e8 00 00 00 00	 call	 _fgets
  00207	83 c4 0c	 add	 esp, 12			; 0000000cH

; 60   : 		if(Ex_IsBadFileLine(Buff, Flag))	

  0020a	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  00210	50		 push	 eax
  00211	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00217	51		 push	 ecx
  00218	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  0021d	83 c4 08	 add	 esp, 8
  00220	0f b6 d0	 movzx	 edx, al
  00223	85 d2		 test	 edx, edx
  00225	74 02		 je	 SHORT $LN6@Load

; 61   : 			continue;

  00227	eb b5		 jmp	 SHORT $LN8@Load
$LN6@Load:

; 62   : 		for (int j = 1; j < 8; j++)

  00229	c7 85 e0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _j$219781[ebp], 1
  00233	eb 0f		 jmp	 SHORT $LN5@Load
$LN4@Load:
  00235	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  0023b	83 c0 01	 add	 eax, 1
  0023e	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _j$219781[ebp], eax
$LN5@Load:
  00244	83 bd e0 fe ff
	ff 08		 cmp	 DWORD PTR _j$219781[ebp], 8
  0024b	0f 8d 05 02 00
	00		 jge	 $LN3@Load

; 63   : 		{
; 64   : 			if(Flag == j)

  00251	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _Flag$[ebp]
  00257	3b 85 e0 fe ff
	ff		 cmp	 eax, DWORD PTR _j$219781[ebp]
  0025d	0f 85 ee 01 00
	00		 jne	 $LN2@Load

; 65   : 			{
; 66   : 				int n[8];
; 67   : 
; 68   : 				sscanf(Buff," %d %d %d %d %d %d %d %d %d",&n[0],&n[1],&n[2],&n[3],&n[4],&n[5],&n[6],&n[7]);

  00263	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _n$219786[ebp+28]
  00269	50		 push	 eax
  0026a	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219786[ebp+24]
  00270	51		 push	 ecx
  00271	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _n$219786[ebp+20]
  00277	52		 push	 edx
  00278	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _n$219786[ebp+16]
  0027e	50		 push	 eax
  0027f	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _n$219786[ebp+12]
  00285	51		 push	 ecx
  00286	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _n$219786[ebp+8]
  0028c	52		 push	 edx
  0028d	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _n$219786[ebp+4]
  00293	50		 push	 eax
  00294	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219786[ebp]
  0029a	51		 push	 ecx
  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  002a0	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  002a6	52		 push	 edx
  002a7	e8 00 00 00 00	 call	 _sscanf
  002ac	83 c4 28	 add	 esp, 40			; 00000028H

; 69   : 
; 70   : 				this->Reward[this->Count[j]][j].Type		= n[0];

  002af	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  002b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b8	8b 94 81 04 c8
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+51204]
  002bf	c1 e2 08	 shl	 edx, 8
  002c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002c5	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  002c9	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219781[ebp]
  002cf	c1 e2 05	 shl	 edx, 5
  002d2	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _n$219786[ebp]
  002d8	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 71   : 				this->Reward[this->Count[j]][j].Index		= n[1];

  002db	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  002e1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e4	8b 94 81 04 c8
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+51204]
  002eb	c1 e2 08	 shl	 edx, 8
  002ee	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002f1	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  002f5	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219781[ebp]
  002fb	c1 e2 05	 shl	 edx, 5
  002fe	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _n$219786[ebp+4]
  00304	89 44 11 04	 mov	 DWORD PTR [ecx+edx+4], eax

; 72   : 				this->Reward[this->Count[j]][j].Level		= n[2];

  00308	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  0030e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00311	8b 94 81 04 c8
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+51204]
  00318	c1 e2 08	 shl	 edx, 8
  0031b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0031e	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00322	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219781[ebp]
  00328	c1 e2 05	 shl	 edx, 5
  0032b	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _n$219786[ebp+8]
  00331	89 44 11 08	 mov	 DWORD PTR [ecx+edx+8], eax

; 73   : 				this->Reward[this->Count[j]][j].Skill		= n[3];

  00335	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  0033b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	8b 94 81 04 c8
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+51204]
  00345	c1 e2 08	 shl	 edx, 8
  00348	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0034b	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0034f	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219781[ebp]
  00355	c1 e2 05	 shl	 edx, 5
  00358	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _n$219786[ebp+12]
  0035e	89 44 11 0c	 mov	 DWORD PTR [ecx+edx+12], eax

; 74   : 				this->Reward[this->Count[j]][j].Luck		= n[4];

  00362	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  00368	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0036b	8b 94 81 04 c8
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+51204]
  00372	c1 e2 08	 shl	 edx, 8
  00375	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00378	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0037c	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219781[ebp]
  00382	c1 e2 05	 shl	 edx, 5
  00385	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _n$219786[ebp+16]
  0038b	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 75   : 				this->Reward[this->Count[j]][j].Opt		= n[5];

  0038f	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  00395	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00398	8b 94 81 04 c8
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+51204]
  0039f	c1 e2 08	 shl	 edx, 8
  003a2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003a5	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  003a9	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219781[ebp]
  003af	c1 e2 05	 shl	 edx, 5
  003b2	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _n$219786[ebp+20]
  003b8	89 44 11 14	 mov	 DWORD PTR [ecx+edx+20], eax

; 76   : 				this->Reward[this->Count[j]][j].Exl		= n[6];

  003bc	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  003c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003c5	8b 94 81 04 c8
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+51204]
  003cc	c1 e2 08	 shl	 edx, 8
  003cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d2	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  003d6	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219781[ebp]
  003dc	c1 e2 05	 shl	 edx, 5
  003df	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _n$219786[ebp+24]
  003e5	89 44 11 18	 mov	 DWORD PTR [ecx+edx+24], eax

; 77   : 				this->Reward[this->Count[j]][j].Anc		= n[7];

  003e9	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  003ef	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003f2	8b 94 81 04 c8
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+51204]
  003f9	c1 e2 08	 shl	 edx, 8
  003fc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003ff	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00403	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219781[ebp]
  00409	c1 e2 05	 shl	 edx, 5
  0040c	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _n$219786[ebp+28]
  00412	89 44 11 1c	 mov	 DWORD PTR [ecx+edx+28], eax

; 78   : 
; 79   : 				this->Count[j]++;

  00416	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  0041c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0041f	8b 94 81 04 c8
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+51204]
  00426	83 c2 01	 add	 edx, 1
  00429	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  0042f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00432	89 94 81 04 c8
	00 00		 mov	 DWORD PTR [ecx+eax*4+51204], edx

; 80   : 
; 81   : 				if (this->Count[j]>=MAX_DS_REWARD_ITEM)

  00439	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219781[ebp]
  0043f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00442	81 bc 81 04 c8
	00 00 c8 00 00
	00		 cmp	 DWORD PTR [ecx+eax*4+51204], 200 ; 000000c8H
  0044d	7c 02		 jl	 SHORT $LN2@Load

; 82   : 				{
; 83   : 					break;

  0044f	eb 05		 jmp	 SHORT $LN3@Load
$LN2@Load:

; 84   : 				}
; 85   : 			}
; 86   : 		
; 87   : 		}

  00451	e9 df fd ff ff	 jmp	 $LN4@Load
$LN3@Load:

; 88   : 	}

  00456	e9 83 fd ff ff	 jmp	 $LN8@Load
$LN7@Load:

; 89   : 	fclose(file);

  0045b	8b 45 ec	 mov	 eax, DWORD PTR _file$[ebp]
  0045e	50		 push	 eax
  0045f	e8 00 00 00 00	 call	 _fclose
  00464	83 c4 04	 add	 esp, 4
$LN19@Load:

; 90   : }

  00467	5f		 pop	 edi
  00468	5e		 pop	 esi
  00469	5b		 pop	 ebx
  0046a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0046d	33 cd		 xor	 ecx, ebp
  0046f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00474	8b e5		 mov	 esp, ebp
  00476	5d		 pop	 ebp
  00477	c3		 ret	 0
?Load@cDevilSquareRewardItem@@QAEXXZ ENDP		; cDevilSquareRewardItem::Load
_TEXT	ENDS
PUBLIC	?Main@cDevilSquareRewardItem@@QAEXH@Z		; cDevilSquareRewardItem::Main
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	_rand:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_itemId$219808 = -24					; size = 4
_itemId$219806 = -20					; size = 4
_i$219802 = -16						; size = 4
_j$219795 = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?Main@cDevilSquareRewardItem@@QAEXH@Z PROC		; cDevilSquareRewardItem::Main
; _this$ = ecx

; 93   : {

  00480	55		 push	 ebp
  00481	8b ec		 mov	 ebp, esp
  00483	83 ec 58	 sub	 esp, 88			; 00000058H
  00486	53		 push	 ebx
  00487	56		 push	 esi
  00488	57		 push	 edi
  00489	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 	
; 95   : 	if(!this->Enable) return;

  0048c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0048f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00492	75 05		 jne	 SHORT $LN11@Main
  00494	e9 b3 02 00 00	 jmp	 $LN12@Main
$LN11@Main:

; 96   : 	LPOBJ lpObj = &gObj[aIndex];

  00499	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0049c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  004a2	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004a8	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 97   : 	
; 98   : 	for (int j = 1; j < 8; j++)

  004ab	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _j$219795[ebp], 1
  004b2	eb 09		 jmp	 SHORT $LN10@Main
$LN9@Main:
  004b4	8b 45 f4	 mov	 eax, DWORD PTR _j$219795[ebp]
  004b7	83 c0 01	 add	 eax, 1
  004ba	89 45 f4	 mov	 DWORD PTR _j$219795[ebp], eax
$LN10@Main:
  004bd	83 7d f4 08	 cmp	 DWORD PTR _j$219795[ebp], 8
  004c1	0f 8d 85 02 00
	00		 jge	 $LN12@Main

; 99   : 	{
; 100  : 		if (lpObj->m_bDevilSquareIndex == j)

  004c7	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004ca	0f b6 88 9c 0e
	00 00		 movzx	 ecx, BYTE PTR [eax+3740]
  004d1	3b 4d f4	 cmp	 ecx, DWORD PTR _j$219795[ebp]
  004d4	0f 85 6d 02 00
	00		 jne	 $LN7@Main

; 101  : 		{
; 102  : 			//srand(time(NULL));
; 103  : 			if (this->Count[j] == 0)

  004da	8b 45 f4	 mov	 eax, DWORD PTR _j$219795[ebp]
  004dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004e0	83 bc 81 04 c8
	00 00 00	 cmp	 DWORD PTR [ecx+eax*4+51204], 0
  004e8	75 05		 jne	 SHORT $LN6@Main

; 104  : 			{
; 105  : 				return;

  004ea	e9 5d 02 00 00	 jmp	 $LN12@Main
$LN6@Main:

; 106  : 			}
; 107  : 
; 108  : 			if(THINNAKORN_MAC)

  004ef	33 c0		 xor	 eax, eax
  004f1	0f 84 3e 01 00
	00		 je	 $LN5@Main

; 109  : 			{
; 110  : 				for(int i = 0; i < this->m_iRewardItemCount; i++)

  004f7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$219802[ebp], 0
  004fe	eb 09		 jmp	 SHORT $LN4@Main
$LN3@Main:
  00500	8b 45 f0	 mov	 eax, DWORD PTR _i$219802[ebp]
  00503	83 c0 01	 add	 eax, 1
  00506	89 45 f0	 mov	 DWORD PTR _i$219802[ebp], eax
$LN4@Main:
  00509	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0050c	8b 4d f0	 mov	 ecx, DWORD PTR _i$219802[ebp]
  0050f	3b 88 24 c8 00
	00		 cmp	 ecx, DWORD PTR [eax+51236]
  00515	0f 8d 15 01 00
	00		 jge	 $LN2@Main

; 111  : 				{
; 112  : 					int itemId = rand()%this->Count[j];

  0051b	e8 00 00 00 00	 call	 _rand
  00520	8b 4d f4	 mov	 ecx, DWORD PTR _j$219795[ebp]
  00523	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00526	99		 cdq
  00527	f7 bc 8e 04 c8
	00 00		 idiv	 DWORD PTR [esi+ecx*4+51204]
  0052e	89 55 ec	 mov	 DWORD PTR _itemId$219806[ebp], edx

; 113  : 					ItemSerialCreateSend(aIndex,lpObj->MapNumber,lpObj->X,lpObj->Y,ITEMGET(this->Reward[itemId][j].Type,this->Reward[itemId][j].Index),this->Reward[itemId][j].Level,0,this->Reward[itemId][j].Skill,this->Reward[itemId][j].Luck,this->Reward[itemId][j].Opt,aIndex,this->Reward[itemId][j].Exl,this->Reward[itemId][j].Anc);

  00531	8b 45 ec	 mov	 eax, DWORD PTR _itemId$219806[ebp]
  00534	c1 e0 08	 shl	 eax, 8
  00537	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0053a	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0053e	8b 45 f4	 mov	 eax, DWORD PTR _j$219795[ebp]
  00541	c1 e0 05	 shl	 eax, 5
  00544	0f b6 4c 02 1c	 movzx	 ecx, BYTE PTR [edx+eax+28]
  00549	51		 push	 ecx
  0054a	8b 55 ec	 mov	 edx, DWORD PTR _itemId$219806[ebp]
  0054d	c1 e2 08	 shl	 edx, 8
  00550	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00553	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00557	8b 55 f4	 mov	 edx, DWORD PTR _j$219795[ebp]
  0055a	c1 e2 05	 shl	 edx, 5
  0055d	0f b6 44 11 18	 movzx	 eax, BYTE PTR [ecx+edx+24]
  00562	50		 push	 eax
  00563	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00566	51		 push	 ecx
  00567	8b 55 ec	 mov	 edx, DWORD PTR _itemId$219806[ebp]
  0056a	c1 e2 08	 shl	 edx, 8
  0056d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00570	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00574	8b 55 f4	 mov	 edx, DWORD PTR _j$219795[ebp]
  00577	c1 e2 05	 shl	 edx, 5
  0057a	0f b6 44 11 14	 movzx	 eax, BYTE PTR [ecx+edx+20]
  0057f	50		 push	 eax
  00580	8b 4d ec	 mov	 ecx, DWORD PTR _itemId$219806[ebp]
  00583	c1 e1 08	 shl	 ecx, 8
  00586	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00589	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  0058d	8b 4d f4	 mov	 ecx, DWORD PTR _j$219795[ebp]
  00590	c1 e1 05	 shl	 ecx, 5
  00593	0f b6 54 08 10	 movzx	 edx, BYTE PTR [eax+ecx+16]
  00598	52		 push	 edx
  00599	8b 45 ec	 mov	 eax, DWORD PTR _itemId$219806[ebp]
  0059c	c1 e0 08	 shl	 eax, 8
  0059f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005a2	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  005a6	8b 45 f4	 mov	 eax, DWORD PTR _j$219795[ebp]
  005a9	c1 e0 05	 shl	 eax, 5
  005ac	0f b6 4c 02 0c	 movzx	 ecx, BYTE PTR [edx+eax+12]
  005b1	51		 push	 ecx
  005b2	6a 00		 push	 0
  005b4	8b 55 ec	 mov	 edx, DWORD PTR _itemId$219806[ebp]
  005b7	c1 e2 08	 shl	 edx, 8
  005ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005bd	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  005c1	8b 55 f4	 mov	 edx, DWORD PTR _j$219795[ebp]
  005c4	c1 e2 05	 shl	 edx, 5
  005c7	0f b6 44 11 08	 movzx	 eax, BYTE PTR [ecx+edx+8]
  005cc	50		 push	 eax
  005cd	8b 4d ec	 mov	 ecx, DWORD PTR _itemId$219806[ebp]
  005d0	c1 e1 08	 shl	 ecx, 8
  005d3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005d6	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  005da	8b 4d f4	 mov	 ecx, DWORD PTR _j$219795[ebp]
  005dd	c1 e1 05	 shl	 ecx, 5
  005e0	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  005e3	c1 e2 09	 shl	 edx, 9
  005e6	8b 45 ec	 mov	 eax, DWORD PTR _itemId$219806[ebp]
  005e9	c1 e0 08	 shl	 eax, 8
  005ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005ef	8d 44 01 04	 lea	 eax, DWORD PTR [ecx+eax+4]
  005f3	8b 4d f4	 mov	 ecx, DWORD PTR _j$219795[ebp]
  005f6	c1 e1 05	 shl	 ecx, 5
  005f9	03 54 08 04	 add	 edx, DWORD PTR [eax+ecx+4]
  005fd	52		 push	 edx
  005fe	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00601	0f b6 82 46 01
	00 00		 movzx	 eax, BYTE PTR [edx+326]
  00608	50		 push	 eax
  00609	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0060c	0f b6 91 44 01
	00 00		 movzx	 edx, BYTE PTR [ecx+324]
  00613	52		 push	 edx
  00614	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00617	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0061e	51		 push	 ecx
  0061f	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00622	52		 push	 edx
  00623	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00628	83 c4 34	 add	 esp, 52			; 00000034H

; 114  : 				}

  0062b	e9 d0 fe ff ff	 jmp	 $LN3@Main
$LN2@Main:

; 115  : 			}
; 116  : 			else

  00630	e9 10 01 00 00	 jmp	 $LN1@Main
$LN5@Main:

; 117  : 			{
; 118  : 				int itemId = rand()%this->Count[j];

  00635	e8 00 00 00 00	 call	 _rand
  0063a	8b 4d f4	 mov	 ecx, DWORD PTR _j$219795[ebp]
  0063d	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00640	99		 cdq
  00641	f7 bc 8e 04 c8
	00 00		 idiv	 DWORD PTR [esi+ecx*4+51204]
  00648	89 55 e8	 mov	 DWORD PTR _itemId$219808[ebp], edx

; 119  : 				ItemSerialCreateSend(aIndex,lpObj->MapNumber,lpObj->X,lpObj->Y,ITEMGET(this->Reward[itemId][j].Type,this->Reward[itemId][j].Index),this->Reward[itemId][j].Level,0,this->Reward[itemId][j].Skill,this->Reward[itemId][j].Luck,this->Reward[itemId][j].Opt,aIndex,this->Reward[itemId][j].Exl,this->Reward[itemId][j].Anc);

  0064b	8b 45 e8	 mov	 eax, DWORD PTR _itemId$219808[ebp]
  0064e	c1 e0 08	 shl	 eax, 8
  00651	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00654	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00658	8b 45 f4	 mov	 eax, DWORD PTR _j$219795[ebp]
  0065b	c1 e0 05	 shl	 eax, 5
  0065e	0f b6 4c 02 1c	 movzx	 ecx, BYTE PTR [edx+eax+28]
  00663	51		 push	 ecx
  00664	8b 55 e8	 mov	 edx, DWORD PTR _itemId$219808[ebp]
  00667	c1 e2 08	 shl	 edx, 8
  0066a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0066d	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00671	8b 55 f4	 mov	 edx, DWORD PTR _j$219795[ebp]
  00674	c1 e2 05	 shl	 edx, 5
  00677	0f b6 44 11 18	 movzx	 eax, BYTE PTR [ecx+edx+24]
  0067c	50		 push	 eax
  0067d	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00680	51		 push	 ecx
  00681	8b 55 e8	 mov	 edx, DWORD PTR _itemId$219808[ebp]
  00684	c1 e2 08	 shl	 edx, 8
  00687	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0068a	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0068e	8b 55 f4	 mov	 edx, DWORD PTR _j$219795[ebp]
  00691	c1 e2 05	 shl	 edx, 5
  00694	0f b6 44 11 14	 movzx	 eax, BYTE PTR [ecx+edx+20]
  00699	50		 push	 eax
  0069a	8b 4d e8	 mov	 ecx, DWORD PTR _itemId$219808[ebp]
  0069d	c1 e1 08	 shl	 ecx, 8
  006a0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006a3	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  006a7	8b 4d f4	 mov	 ecx, DWORD PTR _j$219795[ebp]
  006aa	c1 e1 05	 shl	 ecx, 5
  006ad	0f b6 54 08 10	 movzx	 edx, BYTE PTR [eax+ecx+16]
  006b2	52		 push	 edx
  006b3	8b 45 e8	 mov	 eax, DWORD PTR _itemId$219808[ebp]
  006b6	c1 e0 08	 shl	 eax, 8
  006b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006bc	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  006c0	8b 45 f4	 mov	 eax, DWORD PTR _j$219795[ebp]
  006c3	c1 e0 05	 shl	 eax, 5
  006c6	0f b6 4c 02 0c	 movzx	 ecx, BYTE PTR [edx+eax+12]
  006cb	51		 push	 ecx
  006cc	6a 00		 push	 0
  006ce	8b 55 e8	 mov	 edx, DWORD PTR _itemId$219808[ebp]
  006d1	c1 e2 08	 shl	 edx, 8
  006d4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006d7	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  006db	8b 55 f4	 mov	 edx, DWORD PTR _j$219795[ebp]
  006de	c1 e2 05	 shl	 edx, 5
  006e1	0f b6 44 11 08	 movzx	 eax, BYTE PTR [ecx+edx+8]
  006e6	50		 push	 eax
  006e7	8b 4d e8	 mov	 ecx, DWORD PTR _itemId$219808[ebp]
  006ea	c1 e1 08	 shl	 ecx, 8
  006ed	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006f0	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  006f4	8b 4d f4	 mov	 ecx, DWORD PTR _j$219795[ebp]
  006f7	c1 e1 05	 shl	 ecx, 5
  006fa	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  006fd	c1 e2 09	 shl	 edx, 9
  00700	8b 45 e8	 mov	 eax, DWORD PTR _itemId$219808[ebp]
  00703	c1 e0 08	 shl	 eax, 8
  00706	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00709	8d 44 01 04	 lea	 eax, DWORD PTR [ecx+eax+4]
  0070d	8b 4d f4	 mov	 ecx, DWORD PTR _j$219795[ebp]
  00710	c1 e1 05	 shl	 ecx, 5
  00713	03 54 08 04	 add	 edx, DWORD PTR [eax+ecx+4]
  00717	52		 push	 edx
  00718	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0071b	0f b6 82 46 01
	00 00		 movzx	 eax, BYTE PTR [edx+326]
  00722	50		 push	 eax
  00723	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00726	0f b6 91 44 01
	00 00		 movzx	 edx, BYTE PTR [ecx+324]
  0072d	52		 push	 edx
  0072e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00731	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00738	51		 push	 ecx
  00739	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0073c	52		 push	 edx
  0073d	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00742	83 c4 34	 add	 esp, 52			; 00000034H
$LN1@Main:

; 120  : 			}
; 121  : 			return;	

  00745	eb 05		 jmp	 SHORT $LN12@Main
$LN7@Main:

; 122  : 		}
; 123  : 	}

  00747	e9 68 fd ff ff	 jmp	 $LN9@Main
$LN12@Main:

; 124  : }

  0074c	5f		 pop	 edi
  0074d	5e		 pop	 esi
  0074e	5b		 pop	 ebx
  0074f	8b e5		 mov	 esp, ebp
  00751	5d		 pop	 ebp
  00752	c2 04 00	 ret	 4
?Main@cDevilSquareRewardItem@@QAEXH@Z ENDP		; cDevilSquareRewardItem::Main
_TEXT	ENDS
END
