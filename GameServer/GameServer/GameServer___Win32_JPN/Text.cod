; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\Text.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@CText@@QAEXXZ				; CText::Init
PUBLIC	??0CText@@QAE@XZ				; CText::CText
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\text.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CText@@QAE@XZ PROC					; CText::CText
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : 	this->Init();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Init@CText@@QAEXXZ	; CText::Init

; 13   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CText@@QAE@XZ ENDP					; CText::CText
_TEXT	ENDS
PUBLIC	??1CText@@QAE@XZ				; CText::~CText
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CText@@QAE@XZ PROC					; CText::~CText
; _this$ = ecx

; 16   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CText@@QAE@XZ ENDP					; CText::~CText
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?Init@CText@@QAEXXZ PROC				; CText::Init
; _this$ = ecx

; 20   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	this->m_Count = 0;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 22   : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?Init@CText@@QAEXXZ ENDP				; CText::Init
_TEXT	ENDS
PUBLIC	?Read@CText@@QAEXPAD@Z				; CText::Read
PUBLIC	??_C@_0BG@FDLFBFAK@ExData?2TextChange?4dat?$AA@	; `string'
PUBLIC	?Load@CText@@QAEXXZ				; CText::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BG@FDLFBFAK@ExData?2TextChange?4dat?$AA@
CONST	SEGMENT
??_C@_0BG@FDLFBFAK@ExData?2TextChange?4dat?$AA@ DB 'ExData\TextChange.dat'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CText@@QAEXXZ PROC				; CText::Load
; _this$ = ecx

; 25   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	83 ec 44	 sub	 esp, 68			; 00000044H
  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	this->Init();

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?Init@CText@@QAEXXZ	; CText::Init

; 27   : 	this->Read(gDirPath.GetNewPath("ExData\\TextChange.dat"));

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FDLFBFAK@ExData?2TextChange?4dat?$AA@
  00079	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0007e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00083	50		 push	 eax
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?Read@CText@@QAEXPAD@Z	; CText::Read

; 28   : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?Load@CText@@QAEXXZ ENDP				; CText::Load
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
EXTRN	_fclose:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_fopen:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Read@CText@@QAEXPAD@Z PROC				; CText::Read
; _this$ = ecx

; 31   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  000a6	53		 push	 ebx
  000a7	56		 push	 esi
  000a8	57		 push	 edi
  000a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	SMDToken Token;
; 33   : 
; 34   : 	SMDFile = fopen(filename, "r");

  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000b1	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _fopen
  000ba	83 c4 08	 add	 esp, 8
  000bd	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 35   : 
; 36   : 	if(!SMDFile)

  000c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  000c9	75 05		 jne	 SHORT $LN5@Read

; 37   : 	{
; 38   : 		return;

  000cb	e9 99 00 00 00	 jmp	 $LN6@Read
$LN5@Read:

; 39   : 	}
; 40   : 
; 41   : 	int n = 0;

  000d0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
$LN4@Read:

; 42   : 
; 43   : 	while(true)

  000d7	b8 01 00 00 00	 mov	 eax, 1
  000dc	85 c0		 test	 eax, eax
  000de	74 73		 je	 SHORT $LN3@Read

; 44   : 	{
; 45   : 		Token = GetToken();

  000e0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000e5	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 46   : 
; 47   : 		if(Token == END || !strcmp("end", TokenString))

  000e8	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  000ec	74 16		 je	 SHORT $LN1@Read
  000ee	68 00 00 00 00	 push	 OFFSET _TokenString
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000f8	e8 00 00 00 00	 call	 _strcmp
  000fd	83 c4 08	 add	 esp, 8
  00100	85 c0		 test	 eax, eax
  00102	75 02		 jne	 SHORT $LN2@Read
$LN1@Read:

; 48   : 		{
; 49   : 			break;

  00104	eb 4d		 jmp	 SHORT $LN3@Read
$LN2@Read:

; 50   : 		}
; 51   : 
; 52   : 		memcpy(this->m_change[n].Text, TokenString, sizeof(this->m_change[n].Text));

  00106	6a 40		 push	 64			; 00000040H
  00108	68 00 00 00 00	 push	 OFFSET _TokenString
  0010d	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00110	c1 e0 07	 shl	 eax, 7
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 _memcpy
  00120	83 c4 0c	 add	 esp, 12			; 0000000cH

; 53   : 
; 54   : 		Token = GetToken();

  00123	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00128	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 55   : 		memcpy(this->m_change[n].Text2, TokenString, sizeof(this->m_change[n].Text2));

  0012b	6a 40		 push	 64			; 00000040H
  0012d	68 00 00 00 00	 push	 OFFSET _TokenString
  00132	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00135	c1 e0 07	 shl	 eax, 7
  00138	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	8d 54 01 44	 lea	 edx, DWORD PTR [ecx+eax+68]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 _memcpy
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH

; 56   : 
; 57   : 		n++;

  00148	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0014b	83 c0 01	 add	 eax, 1
  0014e	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 58   : 	} 

  00151	eb 84		 jmp	 SHORT $LN4@Read
$LN3@Read:

; 59   : 
; 60   : 	this->m_Count = n;

  00153	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00156	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00159	89 08		 mov	 DWORD PTR [eax], ecx

; 61   : 
; 62   : 	fclose(SMDFile);	

  0015b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _fclose
  00166	83 c4 04	 add	 esp, 4
$LN6@Read:

; 63   : }

  00169	5f		 pop	 edi
  0016a	5e		 pop	 esi
  0016b	5b		 pop	 ebx
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 04 00	 ret	 4
?Read@CText@@QAEXPAD@Z ENDP				; CText::Read
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_TokenNumber DD	01H DUP (?)
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0018e	33 c5		 xor	 eax, ebp
  00190	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00193	53		 push	 ebx
  00194	56		 push	 esi
  00195	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00196	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _fgetc
  001a8	83 c4 04	 add	 esp, 4
  001ab	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  001ae	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  001b2	83 f9 ff	 cmp	 ecx, -1
  001b5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  001b7	b8 02 00 00 00	 mov	 eax, 2
  001bc	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  001c1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  001c3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  001c7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  001ca	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 _fgetc
  001d7	83 c4 04	 add	 esp, 4
  001da	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  001dd	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  001e1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  001e4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  001e6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  001ea	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  001ed	74 1c		 je	 SHORT $LN23@GetToken
  001ef	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  001f3	83 f8 ff	 cmp	 eax, -1
  001f6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 _fgetc
  00203	83 c4 04	 add	 esp, 4
  00206	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00209	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0020b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0020f	83 f8 ff	 cmp	 eax, -1
  00212	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00214	b8 02 00 00 00	 mov	 eax, 2
  00219	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0021e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 _isspace
  00228	83 c4 04	 add	 esp, 4
  0022b	85 c0		 test	 eax, eax
  0022d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00233	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00237	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0023d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00243	83 e9 22	 sub	 ecx, 34			; 00000022H
  00246	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0024c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00253	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00259	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0025f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00266	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0026d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00277	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0027c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00281	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00286	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00290	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00295	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0029a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0029f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  002a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  002ae	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  002b3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  002b8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  002c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  002c7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  002cc	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  002d1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  002db	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  002e0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  002e5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  002ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  002ef	50		 push	 eax
  002f0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  002f4	51		 push	 ecx
  002f5	e8 00 00 00 00	 call	 _ungetc
  002fa	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  002fd	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00300	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00303	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00308	50		 push	 eax
  00309	e8 00 00 00 00	 call	 _getc
  0030e	83 c4 04	 add	 esp, 4
  00311	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00314	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00318	83 f9 ff	 cmp	 ecx, -1
  0031b	74 36		 je	 SHORT $LN12@GetToken
  0031d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00321	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00324	74 1a		 je	 SHORT $LN11@GetToken
  00326	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 _isdigit
  00330	83 c4 04	 add	 esp, 4
  00333	85 c0		 test	 eax, eax
  00335	75 09		 jne	 SHORT $LN11@GetToken
  00337	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0033b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0033e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00340	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00343	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00346	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00348	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0034b	83 c0 01	 add	 eax, 1
  0034e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00351	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00353	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00356	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00359	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0035c	50		 push	 eax
  0035d	e8 00 00 00 00	 call	 _atof
  00362	83 c4 04	 add	 esp, 4
  00365	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0036b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00375	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0037a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0037f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00384	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0038b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00390	50		 push	 eax
  00391	e8 00 00 00 00	 call	 _getc
  00396	83 c4 04	 add	 esp, 4
  00399	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0039c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  003a0	83 f9 ff	 cmp	 ecx, -1
  003a3	74 1c		 je	 SHORT $LN8@GetToken
  003a5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003a9	83 f8 22	 cmp	 eax, 34			; 00000022H
  003ac	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  003ae	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003b1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  003b4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  003b6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003b9	83 c0 01	 add	 eax, 1
  003bc	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  003bf	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  003c1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003c5	83 f8 22	 cmp	 eax, 34			; 00000022H
  003c8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  003ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  003cf	50		 push	 eax
  003d0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  003d4	51		 push	 ecx
  003d5	e8 00 00 00 00	 call	 _ungetc
  003da	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  003dd	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003e0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  003e3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  003ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  003f2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  003f7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  003fc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00400	50		 push	 eax
  00401	e8 00 00 00 00	 call	 _isalpha
  00406	83 c4 04	 add	 esp, 4
  00409	85 c0		 test	 eax, eax
  0040b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00411	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00418	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0041b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0041e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00420	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00423	83 c0 01	 add	 eax, 1
  00426	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00429	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0042e	50		 push	 eax
  0042f	e8 00 00 00 00	 call	 _getc
  00434	83 c4 04	 add	 esp, 4
  00437	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0043a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0043e	83 f9 ff	 cmp	 ecx, -1
  00441	74 36		 je	 SHORT $LN3@GetToken
  00443	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00447	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0044a	74 1a		 je	 SHORT $LN2@GetToken
  0044c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00450	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00453	74 11		 je	 SHORT $LN2@GetToken
  00455	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00459	50		 push	 eax
  0045a	e8 00 00 00 00	 call	 _isalnum
  0045f	83 c4 04	 add	 esp, 4
  00462	85 c0		 test	 eax, eax
  00464	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00466	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00469	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0046c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0046e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00471	83 c0 01	 add	 eax, 1
  00474	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00477	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00479	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0047e	50		 push	 eax
  0047f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00483	51		 push	 ecx
  00484	e8 00 00 00 00	 call	 _ungetc
  00489	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0048c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0048f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00492	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0049c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004a1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  004a3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  004a5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  004af	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004b4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  004b6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  004b8	5f		 pop	 edi
  004b9	5e		 pop	 esi
  004ba	5b		 pop	 ebx
  004bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004be	33 cd		 xor	 ecx, ebp
  004c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c5	8b e5		 mov	 esp, ebp
  004c7	5d		 pop	 ebp
  004c8	c3		 ret	 0
  004c9	8d 49 00	 npad	 3
$LN35@GetToken:
  004cc	00 00 00 00	 DD	 $LN10@GetToken
  004d0	00 00 00 00	 DD	 $LN19@GetToken
  004d4	00 00 00 00	 DD	 $LN17@GetToken
  004d8	00 00 00 00	 DD	 $LN14@GetToken
  004dc	00 00 00 00	 DD	 $LN18@GetToken
  004e0	00 00 00 00	 DD	 $LN16@GetToken
  004e4	00 00 00 00	 DD	 $LN15@GetToken
  004e8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  004ec	00		 DB	 0
  004ed	01		 DB	 1
  004ee	07		 DB	 7
  004ef	07		 DB	 7
  004f0	07		 DB	 7
  004f1	07		 DB	 7
  004f2	07		 DB	 7
  004f3	07		 DB	 7
  004f4	07		 DB	 7
  004f5	07		 DB	 7
  004f6	02		 DB	 2
  004f7	03		 DB	 3
  004f8	03		 DB	 3
  004f9	07		 DB	 7
  004fa	03		 DB	 3
  004fb	03		 DB	 3
  004fc	03		 DB	 3
  004fd	03		 DB	 3
  004fe	03		 DB	 3
  004ff	03		 DB	 3
  00500	03		 DB	 3
  00501	03		 DB	 3
  00502	03		 DB	 3
  00503	03		 DB	 3
  00504	07		 DB	 7
  00505	04		 DB	 4
  00506	07		 DB	 7
  00507	07		 DB	 7
  00508	07		 DB	 7
  00509	07		 DB	 7
  0050a	07		 DB	 7
  0050b	07		 DB	 7
  0050c	07		 DB	 7
  0050d	07		 DB	 7
  0050e	07		 DB	 7
  0050f	07		 DB	 7
  00510	07		 DB	 7
  00511	07		 DB	 7
  00512	07		 DB	 7
  00513	07		 DB	 7
  00514	07		 DB	 7
  00515	07		 DB	 7
  00516	07		 DB	 7
  00517	07		 DB	 7
  00518	07		 DB	 7
  00519	07		 DB	 7
  0051a	07		 DB	 7
  0051b	07		 DB	 7
  0051c	07		 DB	 7
  0051d	07		 DB	 7
  0051e	07		 DB	 7
  0051f	07		 DB	 7
  00520	07		 DB	 7
  00521	07		 DB	 7
  00522	07		 DB	 7
  00523	07		 DB	 7
  00524	07		 DB	 7
  00525	07		 DB	 7
  00526	07		 DB	 7
  00527	07		 DB	 7
  00528	07		 DB	 7
  00529	07		 DB	 7
  0052a	07		 DB	 7
  0052b	07		 DB	 7
  0052c	07		 DB	 7
  0052d	07		 DB	 7
  0052e	07		 DB	 7
  0052f	07		 DB	 7
  00530	07		 DB	 7
  00531	07		 DB	 7
  00532	07		 DB	 7
  00533	07		 DB	 7
  00534	07		 DB	 7
  00535	07		 DB	 7
  00536	07		 DB	 7
  00537	07		 DB	 7
  00538	07		 DB	 7
  00539	07		 DB	 7
  0053a	07		 DB	 7
  0053b	07		 DB	 7
  0053c	07		 DB	 7
  0053d	07		 DB	 7
  0053e	07		 DB	 7
  0053f	07		 DB	 7
  00540	07		 DB	 7
  00541	07		 DB	 7
  00542	07		 DB	 7
  00543	07		 DB	 7
  00544	07		 DB	 7
  00545	05		 DB	 5
  00546	07		 DB	 7
  00547	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?Change@CText@@QAEPADPAD@Z			; CText::Change
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\text.cpp
_TEXT	SEGMENT
_i$227151 = -8						; size = 4
_this$ = -4						; size = 4
_Text$ = 8						; size = 4
?Change@CText@@QAEPADPAD@Z PROC				; CText::Change
; _this$ = ecx

; 67   : {

  00550	55		 push	 ebp
  00551	8b ec		 mov	 ebp, esp
  00553	83 ec 48	 sub	 esp, 72			; 00000048H
  00556	53		 push	 ebx
  00557	56		 push	 esi
  00558	57		 push	 edi
  00559	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 	for(int i = 0; i < this->m_Count; i++)

  0055c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227151[ebp], 0
  00563	eb 09		 jmp	 SHORT $LN4@Change
$LN3@Change:
  00565	8b 45 f8	 mov	 eax, DWORD PTR _i$227151[ebp]
  00568	83 c0 01	 add	 eax, 1
  0056b	89 45 f8	 mov	 DWORD PTR _i$227151[ebp], eax
$LN4@Change:
  0056e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00571	8b 4d f8	 mov	 ecx, DWORD PTR _i$227151[ebp]
  00574	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00576	7d 2f		 jge	 SHORT $LN2@Change

; 69   : 	{
; 70   : 		if(!strcmp(this->m_change[i].Text, Text))

  00578	8b 45 08	 mov	 eax, DWORD PTR _Text$[ebp]
  0057b	50		 push	 eax
  0057c	8b 4d f8	 mov	 ecx, DWORD PTR _i$227151[ebp]
  0057f	c1 e1 07	 shl	 ecx, 7
  00582	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00585	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00589	50		 push	 eax
  0058a	e8 00 00 00 00	 call	 _strcmp
  0058f	83 c4 08	 add	 esp, 8
  00592	85 c0		 test	 eax, eax
  00594	75 0f		 jne	 SHORT $LN1@Change

; 71   : 		{
; 72   : 			return this->m_change[i].Text2;

  00596	8b 45 f8	 mov	 eax, DWORD PTR _i$227151[ebp]
  00599	c1 e0 07	 shl	 eax, 7
  0059c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0059f	8d 44 01 44	 lea	 eax, DWORD PTR [ecx+eax+68]
  005a3	eb 05		 jmp	 SHORT $LN5@Change
$LN1@Change:

; 73   : 		}
; 74   : 	}

  005a5	eb be		 jmp	 SHORT $LN3@Change
$LN2@Change:

; 75   : 
; 76   : 	return Text;

  005a7	8b 45 08	 mov	 eax, DWORD PTR _Text$[ebp]
$LN5@Change:

; 77   : }

  005aa	5f		 pop	 edi
  005ab	5e		 pop	 esi
  005ac	5b		 pop	 ebx
  005ad	8b e5		 mov	 esp, ebp
  005af	5d		 pop	 ebp
  005b0	c2 04 00	 ret	 4
?Change@CText@@QAEPADPAD@Z ENDP				; CText::Change
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_Text@@YAXXZ
text$yc	SEGMENT
??__Eg_Text@@YAXXZ PROC					; `dynamic initializer for 'g_Text'', COMDAT

; 8    : CText g_Text;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Text@@3VCText@@A ; g_Text
  0000e	e8 00 00 00 00	 call	 ??0CText@@QAE@XZ	; CText::CText
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_Text@@YAXXZ ; `dynamic atexit destructor for 'g_Text''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_Text@@YAXXZ ENDP					; `dynamic initializer for 'g_Text''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_Text@@YAXXZ
text$yd	SEGMENT
??__Fg_Text@@YAXXZ PROC					; `dynamic atexit destructor for 'g_Text'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Text@@3VCText@@A ; g_Text
  0000e	e8 00 00 00 00	 call	 ??1CText@@QAE@XZ	; CText::~CText
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_Text@@YAXXZ ENDP					; `dynamic atexit destructor for 'g_Text''
text$yd	ENDS
PUBLIC	?g_Text@@3VCText@@A				; g_Text
_BSS	SEGMENT
?g_Text@@3VCText@@A DB 01f404H DUP (?)			; g_Text
_BSS	ENDS
CRT$XCU	SEGMENT
_g_Text$initializer$ DD FLAT:??__Eg_Text@@YAXXZ
CRT$XCU	ENDS
END
