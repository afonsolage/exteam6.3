; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\WzQueue.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0WZQueue@@QAE@I@Z				; WZQueue::WZQueue
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__InitializeCriticalSectionAndSpinCount@8:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\wzqueue.cpp
_TEXT	SEGMENT
_bSuccess$ = -8						; size = 4
_this$ = -4						; size = 4
_nMaxNode$ = 8						; size = 4
??0WZQueue@@QAE@I@Z PROC				; WZQueue::WZQueue
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6    : 	this->m_Max_Node = nMaxNode;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _nMaxNode$[ebp]
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 7    : 	this->m_pTail = 0;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 8    : 	this->m_pHead = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 9    : 	this->m_Count = 0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 10   : 	BOOL bSuccess;
; 11   : 	bSuccess=InitializeCriticalSectionAndSpinCount(&this->m_CriticalSection , 4000);

  00032	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 c0 14	 add	 eax, 20			; 00000014H
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionAndSpinCount@8
  00044	89 45 f8	 mov	 DWORD PTR _bSuccess$[ebp], eax

; 12   : 	if (bSuccess == 0 )

  00047	83 7d f8 00	 cmp	 DWORD PTR _bSuccess$[ebp], 0
  0004b	75 1a		 jne	 SHORT $LN3@WZQueue

; 13   : 	{
; 14   : 		if ( GetLastError() == STATUS_NO_MEMORY )	

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00053	3d 17 00 00 c0	 cmp	 eax, -1073741801	; c0000017H
  00058	75 0d		 jne	 SHORT $LN3@WZQueue

; 15   : 		{
; 16   : 			InitializeCriticalSection(&this->m_CriticalSection );

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 c0 14	 add	 eax, 20			; 00000014H
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
$LN3@WZQueue:

; 17   : 		}
; 18   : 	}
; 19   : }

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
??0WZQueue@@QAE@I@Z ENDP				; WZQueue::WZQueue
_TEXT	ENDS
PUBLIC	?Init@WZQueue@@QAEXXZ				; WZQueue::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@WZQueue@@QAEXXZ PROC				; WZQueue::Init
; _this$ = ecx

; 22   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 44	 sub	 esp, 68			; 00000044H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi
  00089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	return;	// Empty
; 24   : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?Init@WZQueue@@QAEXXZ ENDP				; WZQueue::Init
_TEXT	ENDS
PUBLIC	?Free@WZQueue@@QAEXXZ				; WZQueue::Free
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@WZQueue@@QAEXXZ PROC				; WZQueue::Free
; _this$ = ecx

; 27   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 44	 sub	 esp, 68			; 00000044H
  000a6	53		 push	 ebx
  000a7	56		 push	 esi
  000a8	57		 push	 edi
  000a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	return;	// Empty
; 29   : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
?Free@WZQueue@@QAEXXZ ENDP				; WZQueue::Free
_TEXT	ENDS
PUBLIC	?DeleteAllNodes@WZQueue@@AAEXXZ			; WZQueue::DeleteAllNodes
PUBLIC	??1WZQueue@@QAE@XZ				; WZQueue::~WZQueue
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WZQueue@@QAE@XZ PROC					; WZQueue::~WZQueue
; _this$ = ecx

; 32   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp
  000c3	83 ec 44	 sub	 esp, 68			; 00000044H
  000c6	53		 push	 ebx
  000c7	56		 push	 esi
  000c8	57		 push	 edi
  000c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 	this->DeleteAllNodes();

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?DeleteAllNodes@WZQueue@@AAEXXZ ; WZQueue::DeleteAllNodes

; 34   : 	DeleteCriticalSection(&this->m_CriticalSection );

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	83 c0 14	 add	 eax, 20			; 00000014H
  000da	50		 push	 eax
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 35   : }

  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
??1WZQueue@@QAE@XZ ENDP					; WZQueue::~WZQueue
_TEXT	ENDS
PUBLIC	?GetCount@WZQueue@@QAEIXZ			; WZQueue::GetCount
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_nNum$ = -8						; size = 4
_this$ = -4						; size = 4
?GetCount@WZQueue@@QAEIXZ PROC				; WZQueue::GetCount
; _this$ = ecx

; 38   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	83 ec 48	 sub	 esp, 72			; 00000048H
  000f6	53		 push	 ebx
  000f7	56		 push	 esi
  000f8	57		 push	 edi
  000f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 	int nNum;
; 40   : 	EnterCriticalSection(&this->m_CriticalSection);

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	83 c0 14	 add	 eax, 20			; 00000014H
  00102	50		 push	 eax
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 41   : 	nNum=this->m_Count;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010e	89 4d f8	 mov	 DWORD PTR _nNum$[ebp], ecx

; 42   : 	LeaveCriticalSection(&this->m_CriticalSection);

  00111	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00114	83 c0 14	 add	 eax, 20			; 00000014H
  00117	50		 push	 eax
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 43   : 	return nNum;

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _nNum$[ebp]

; 44   : }

  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
?GetCount@WZQueue@@QAEIXZ ENDP				; WZQueue::GetCount
_TEXT	ENDS
PUBLIC	?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z		; WZQueue::AddTail
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_bRet$ = -8						; size = 4
_this$ = -4						; size = 4
_pNewNode$ = 8						; size = 4
?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z PROC		; WZQueue::AddTail
; _this$ = ecx

; 47   : {

  00130	55		 push	 ebp
  00131	8b ec		 mov	 ebp, esp
  00133	83 ec 48	 sub	 esp, 72			; 00000048H
  00136	53		 push	 ebx
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 	BOOL bRet;
; 49   : 	EnterCriticalSection(&this->m_CriticalSection);

  0013c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	83 c0 14	 add	 eax, 20			; 00000014H
  00142	50		 push	 eax
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 50   : 	bRet=1;

  00149	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1

; 51   : 
; 52   : 	if( this->m_Count < 1280 )

  00150	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00153	81 38 00 05 00
	00		 cmp	 DWORD PTR [eax], 1280	; 00000500H
  00159	73 4d		 jae	 SHORT $LN4@AddTail

; 53   : 	{
; 54   : 		pNewNode->lpNodePre  = this->m_pTail  ;

  0015b	8b 45 08	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00164	89 10		 mov	 DWORD PTR [eax], edx

; 55   : 		pNewNode->lpNodeNext = 0;

  00166	8b 45 08	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00169	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 56   : 
; 57   : 		if ( this->m_pHead  ==0 )

  00170	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00173	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00177	75 0b		 jne	 SHORT $LN3@AddTail

; 58   : 		{
; 59   : 			this->m_pHead = pNewNode;

  00179	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017c	8b 4d 08	 mov	 ecx, DWORD PTR _pNewNode$[ebp]
  0017f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 60   : 		}
; 61   : 		else

  00182	eb 0c		 jmp	 SHORT $LN2@AddTail
$LN3@AddTail:

; 62   : 		{
; 63   : 			this->m_pTail->lpNodeNext = pNewNode;

  00184	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00187	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0018a	8b 55 08	 mov	 edx, DWORD PTR _pNewNode$[ebp]
  0018d	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN2@AddTail:

; 64   : 		}
; 65   : 
; 66   : 		this->m_pTail = pNewNode;

  00190	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00193	8b 4d 08	 mov	 ecx, DWORD PTR _pNewNode$[ebp]
  00196	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 67   : 		this->m_Count++;

  00199	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019e	83 c1 01	 add	 ecx, 1
  001a1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a4	89 0a		 mov	 DWORD PTR [edx], ecx

; 68   : 	}
; 69   : 	else

  001a6	eb 07		 jmp	 SHORT $LN1@AddTail
$LN4@AddTail:

; 70   : 	{
; 71   : 		bRet=0;

  001a8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0
$LN1@AddTail:

; 72   : 	}
; 73   : 
; 74   : 	LeaveCriticalSection(&this->m_CriticalSection);

  001af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	83 c0 14	 add	 eax, 20			; 00000014H
  001b5	50		 push	 eax
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 75   : 	return bRet;

  001bc	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 76   : }

  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi
  001c1	5b		 pop	 ebx
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c2 04 00	 ret	 4
?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z ENDP		; WZQueue::AddTail
_TEXT	ENDS
PUBLIC	?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ	; WZQueue::GetHeadNode
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ PROC		; WZQueue::GetHeadNode
; _this$ = ecx

; 80   : {

  001d0	55		 push	 ebp
  001d1	8b ec		 mov	 ebp, esp
  001d3	83 ec 48	 sub	 esp, 72			; 00000048H
  001d6	53		 push	 ebx
  001d7	56		 push	 esi
  001d8	57		 push	 edi
  001d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 	LPLISTNODE pNode;
; 82   : 	EnterCriticalSection(&this->m_CriticalSection);

  001dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001df	83 c0 14	 add	 eax, 20			; 00000014H
  001e2	50		 push	 eax
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 83   : 
; 84   : 	pNode=0;

  001e9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pNode$[ebp], 0

; 85   : 
; 86   : 	if (this->m_pHead != 0)

  001f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f3	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  001f7	74 56		 je	 SHORT $LN3@GetHeadNod

; 87   : 	{
; 88   : 		pNode=this->m_pHead;

  001f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001fc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001ff	89 4d f8	 mov	 DWORD PTR _pNode$[ebp], ecx

; 89   : 
; 90   : 		if ( this->m_pHead->lpNodeNext   != 0)

  00202	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00205	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00208	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0020c	74 20		 je	 SHORT $LN2@GetHeadNod

; 91   : 		{
; 92   : 			this->m_pHead->lpNodeNext->lpNodePre   = 0; 

  0020e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00211	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00214	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00217	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 93   : 			this->m_pHead = this->m_pHead->lpNodeNext ;

  0021d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00220	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00223	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00226	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00229	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 94   : 		}
; 95   : 		else

  0022c	eb 14		 jmp	 SHORT $LN1@GetHeadNod
$LN2@GetHeadNod:

; 96   : 		{
; 97   : 			this->m_pTail = 0;

  0022e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00231	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 98   : 			this->m_pHead = 0;

  00238	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0023b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN1@GetHeadNod:

; 99   : 		}
; 100  : 
; 101  : 		this->m_Count --;

  00242	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00245	8b 08		 mov	 ecx, DWORD PTR [eax]
  00247	83 e9 01	 sub	 ecx, 1
  0024a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0024d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@GetHeadNod:

; 102  : 		
; 103  : 	}
; 104  : 
; 105  : 	LeaveCriticalSection(&this->m_CriticalSection );

  0024f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00252	83 c0 14	 add	 eax, 20			; 00000014H
  00255	50		 push	 eax
  00256	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 106  : 	
; 107  : 	return pNode; 

  0025c	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]

; 108  : }

  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi
  00261	5b		 pop	 ebx
  00262	8b e5		 mov	 esp, ebp
  00264	5d		 pop	 ebp
  00265	c3		 ret	 0
?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ENDP		; WZQueue::GetHeadNode
_TEXT	ENDS
PUBLIC	?AddToQueue@WZQueue@@QAEHQAEIEH@Z		; WZQueue::AddToQueue
EXTRN	__imp__HeapFree@12:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__GetProcessHeap@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_p$204519 = -16						; size = 4
_pNewNode$ = -12					; size = 4
_bRet$ = -8						; size = 4
_this$ = -4						; size = 4
_pObject$ = 8						; size = 4
_nSize$ = 12						; size = 4
_headcode$ = 16						; size = 1
_uindex$ = 20						; size = 4
?AddToQueue@WZQueue@@QAEHQAEIEH@Z PROC			; WZQueue::AddToQueue
; _this$ = ecx

; 112  : {

  00270	55		 push	 ebp
  00271	8b ec		 mov	 ebp, esp
  00273	83 ec 50	 sub	 esp, 80			; 00000050H
  00276	53		 push	 ebx
  00277	56		 push	 esi
  00278	57		 push	 edi
  00279	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 	BOOL bRet=0;

  0027c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 114  : 	LPLISTNODE pNewNode;
; 115  : 
; 116  : 	EnterCriticalSection(&this->m_CriticalSection );

  00283	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00286	83 c0 14	 add	 eax, 20			; 00000014H
  00289	50		 push	 eax
  0028a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 117  : 
; 118  : 	if (nSize < 1 || nSize > 65536 )

  00290	83 7d 0c 01	 cmp	 DWORD PTR _nSize$[ebp], 1
  00294	72 09		 jb	 SHORT $LN6@AddToQueue
  00296	81 7d 0c 00 00
	01 00		 cmp	 DWORD PTR _nSize$[ebp], 65536 ; 00010000H
  0029d	76 07		 jbe	 SHORT $LN7@AddToQueue
$LN6@AddToQueue:

; 119  : 	{
; 120  : 		return FALSE;

  0029f	33 c0		 xor	 eax, eax
  002a1	e9 ea 00 00 00	 jmp	 $LN8@AddToQueue
$LN7@AddToQueue:

; 121  : 	}
; 122  : 
; 123  : 	pNewNode=(LPLISTNODE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(LISTNODE));

  002a6	6a 20		 push	 32			; 00000020H
  002a8	6a 08		 push	 8
  002aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  002b0	50		 push	 eax
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  002b7	89 45 f4	 mov	 DWORD PTR _pNewNode$[ebp], eax

; 124  : 
; 125  : 	if (pNewNode != 0)

  002ba	83 7d f4 00	 cmp	 DWORD PTR _pNewNode$[ebp], 0
  002be	0f 84 a9 00 00
	00		 je	 $LN5@AddToQueue

; 126  : 	{
; 127  : 		char* p;
; 128  : 		p=(char*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, nSize);

  002c4	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  002c7	50		 push	 eax
  002c8	6a 08		 push	 8
  002ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  002d0	50		 push	 eax
  002d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  002d7	89 45 f0	 mov	 DWORD PTR _p$204519[ebp], eax

; 129  : 
; 130  : 		if (p != 0)

  002da	83 7d f0 00	 cmp	 DWORD PTR _p$204519[ebp], 0
  002de	74 65		 je	 SHORT $LN4@AddToQueue

; 131  : 		{
; 132  : 			memcpy(p, pObject, nSize);

  002e0	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  002e3	50		 push	 eax
  002e4	8b 4d 08	 mov	 ecx, DWORD PTR _pObject$[ebp]
  002e7	51		 push	 ecx
  002e8	8b 55 f0	 mov	 edx, DWORD PTR _p$204519[ebp]
  002eb	52		 push	 edx
  002ec	e8 00 00 00 00	 call	 _memcpy
  002f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 133  : 
; 134  : 			pNewNode->pHeapMemory = p;

  002f4	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  002f7	8b 4d f0	 mov	 ecx, DWORD PTR _p$204519[ebp]
  002fa	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 135  : 			pNewNode->nSize = nSize;

  002fd	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00300	8b 4d 0c	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00303	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 136  : 			pNewNode->Headcode = headcode;

  00306	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00309	8a 4d 10	 mov	 cl, BYTE PTR _headcode$[ebp]
  0030c	88 48 18	 mov	 BYTE PTR [eax+24], cl

; 137  : 			pNewNode->uIndex = uindex;

  0030f	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00312	8b 4d 14	 mov	 ecx, DWORD PTR _uindex$[ebp]
  00315	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 138  : 			pNewNode->bIsDataSending = 0;

  00318	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0031b	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 139  : 			pNewNode->iBytesSended  = 0;

  00322	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00325	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 140  : 
; 141  : 			if (this->AddTail(pNewNode) != 0)

  0032c	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0032f	50		 push	 eax
  00330	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00333	e8 00 00 00 00	 call	 ?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z ; WZQueue::AddTail
  00338	85 c0		 test	 eax, eax
  0033a	74 07		 je	 SHORT $LN3@AddToQueue

; 142  : 			{
; 143  : 				bRet=1;

  0033c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN3@AddToQueue:

; 144  : 			}
; 145  : 		}
; 146  : 		else

  00343	eb 26		 jmp	 SHORT $LN2@AddToQueue
$LN4@AddToQueue:

; 147  : 		{
; 148  : 			HeapFree(GetProcessHeap(), 0, p);

  00345	8b 45 f0	 mov	 eax, DWORD PTR _p$204519[ebp]
  00348	50		 push	 eax
  00349	6a 00		 push	 0
  0034b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00351	50		 push	 eax
  00352	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 149  : 			HeapFree(GetProcessHeap(), 0, pNewNode);

  00358	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0035b	50		 push	 eax
  0035c	6a 00		 push	 0
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00364	50		 push	 eax
  00365	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN2@AddToQueue:

; 150  : 		}
; 151  : 	}
; 152  : 	else

  0036b	eb 13		 jmp	 SHORT $LN1@AddToQueue
$LN5@AddToQueue:

; 153  : 	{
; 154  : 		HeapFree(GetProcessHeap(), 0, pNewNode);

  0036d	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00370	50		 push	 eax
  00371	6a 00		 push	 0
  00373	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00379	50		 push	 eax
  0037a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN1@AddToQueue:

; 155  : 	}
; 156  : 
; 157  : 	LeaveCriticalSection(&this->m_CriticalSection);

  00380	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00383	83 c0 14	 add	 eax, 20			; 00000014H
  00386	50		 push	 eax
  00387	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 158  : 	return bRet;

  0038d	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]
$LN8@AddToQueue:

; 159  : }

  00390	5f		 pop	 edi
  00391	5e		 pop	 esi
  00392	5b		 pop	 ebx
  00393	8b e5		 mov	 esp, ebp
  00395	5d		 pop	 ebp
  00396	c2 10 00	 ret	 16			; 00000010H
?AddToQueue@WZQueue@@QAEHQAEIEH@Z ENDP			; WZQueue::AddToQueue
_TEXT	ENDS
PUBLIC	?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PAEIEH@Z ; WZQueue::AddToQueueList
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_p$204539 = -16						; size = 4
_pNewNode$ = -12					; size = 4
_bRet$ = -8						; size = 4
_this$ = -4						; size = 4
_pObject$ = 8						; size = 4
_nSize$ = 12						; size = 4
_headcode$ = 16						; size = 1
_uindex$ = 20						; size = 4
?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PAEIEH@Z PROC	; WZQueue::AddToQueueList
; _this$ = ecx

; 163  : {

  003a0	55		 push	 ebp
  003a1	8b ec		 mov	 ebp, esp
  003a3	83 ec 50	 sub	 esp, 80			; 00000050H
  003a6	53		 push	 ebx
  003a7	56		 push	 esi
  003a8	57		 push	 edi
  003a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 	BOOL bRet=0;

  003ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 165  : 	LPLISTNODE pNewNode;
; 166  : 
; 167  : 	if (nSize < 1 || nSize > 65536 )

  003b3	83 7d 0c 01	 cmp	 DWORD PTR _nSize$[ebp], 1
  003b7	72 09		 jb	 SHORT $LN6@AddToQueue@2
  003b9	81 7d 0c 00 00
	01 00		 cmp	 DWORD PTR _nSize$[ebp], 65536 ; 00010000H
  003c0	76 07		 jbe	 SHORT $LN7@AddToQueue@2
$LN6@AddToQueue@2:

; 168  : 	{
; 169  : 		return FALSE;

  003c2	33 c0		 xor	 eax, eax
  003c4	e9 f7 00 00 00	 jmp	 $LN8@AddToQueue@2
$LN7@AddToQueue@2:

; 170  : 	}
; 171  : 
; 172  : 	EnterCriticalSection(&this->m_CriticalSection );

  003c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003cc	83 c0 14	 add	 eax, 20			; 00000014H
  003cf	50		 push	 eax
  003d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 173  : 
; 174  : 	pNewNode=(LPLISTNODE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(LISTNODE));

  003d6	6a 20		 push	 32			; 00000020H
  003d8	6a 08		 push	 8
  003da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  003e0	50		 push	 eax
  003e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  003e7	89 45 f4	 mov	 DWORD PTR _pNewNode$[ebp], eax

; 175  : 
; 176  : 	if (pNewNode != 0)

  003ea	83 7d f4 00	 cmp	 DWORD PTR _pNewNode$[ebp], 0
  003ee	0f 84 a9 00 00
	00		 je	 $LN5@AddToQueue@2

; 177  : 	{
; 178  : 		char* p;
; 179  : 		p=(char*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, nSize);

  003f4	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  003f7	50		 push	 eax
  003f8	6a 08		 push	 8
  003fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00400	50		 push	 eax
  00401	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00407	89 45 f0	 mov	 DWORD PTR _p$204539[ebp], eax

; 180  : 
; 181  : 		if (p != 0)

  0040a	83 7d f0 00	 cmp	 DWORD PTR _p$204539[ebp], 0
  0040e	74 65		 je	 SHORT $LN4@AddToQueue@2

; 182  : 		{
; 183  : 			memcpy(p, pObject, nSize);

  00410	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  00413	50		 push	 eax
  00414	8b 4d 08	 mov	 ecx, DWORD PTR _pObject$[ebp]
  00417	51		 push	 ecx
  00418	8b 55 f0	 mov	 edx, DWORD PTR _p$204539[ebp]
  0041b	52		 push	 edx
  0041c	e8 00 00 00 00	 call	 _memcpy
  00421	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  : 
; 185  : 			pNewNode->pHeapMemory = p;

  00424	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00427	8b 4d f0	 mov	 ecx, DWORD PTR _p$204539[ebp]
  0042a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 186  : 			pNewNode->nSize = nSize;

  0042d	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00430	8b 4d 0c	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00433	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 187  : 			pNewNode->Headcode = headcode;

  00436	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00439	8a 4d 10	 mov	 cl, BYTE PTR _headcode$[ebp]
  0043c	88 48 18	 mov	 BYTE PTR [eax+24], cl

; 188  : 			pNewNode->uIndex = uindex;

  0043f	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00442	8b 4d 14	 mov	 ecx, DWORD PTR _uindex$[ebp]
  00445	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 189  : 			pNewNode->bIsDataSending = 0;

  00448	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0044b	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 190  : 			pNewNode->iBytesSended  = 0;

  00452	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00455	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 191  : 
; 192  : 			if (this->AddTail(pNewNode) != 0)

  0045c	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0045f	50		 push	 eax
  00460	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00463	e8 00 00 00 00	 call	 ?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z ; WZQueue::AddTail
  00468	85 c0		 test	 eax, eax
  0046a	74 07		 je	 SHORT $LN3@AddToQueue@2

; 193  : 			{
; 194  : 				bRet=1;

  0046c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN3@AddToQueue@2:

; 195  : 			}
; 196  : 		}
; 197  : 		else

  00473	eb 26		 jmp	 SHORT $LN2@AddToQueue@2
$LN4@AddToQueue@2:

; 198  : 		{
; 199  : 			HeapFree(GetProcessHeap(), 0, p);

  00475	8b 45 f0	 mov	 eax, DWORD PTR _p$204539[ebp]
  00478	50		 push	 eax
  00479	6a 00		 push	 0
  0047b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00481	50		 push	 eax
  00482	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 200  : 			HeapFree(GetProcessHeap(), 0, pNewNode);

  00488	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0048b	50		 push	 eax
  0048c	6a 00		 push	 0
  0048e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00494	50		 push	 eax
  00495	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN2@AddToQueue@2:

; 201  : 		}
; 202  : 	}
; 203  : 	else

  0049b	eb 13		 jmp	 SHORT $LN1@AddToQueue@2
$LN5@AddToQueue@2:

; 204  : 	{
; 205  : 		HeapFree(GetProcessHeap(), 0, pNewNode);

  0049d	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  004a0	50		 push	 eax
  004a1	6a 00		 push	 0
  004a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  004a9	50		 push	 eax
  004aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN1@AddToQueue@2:

; 206  : 	}
; 207  : 
; 208  : 	LeaveCriticalSection(&this->m_CriticalSection);

  004b0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004b3	83 c0 14	 add	 eax, 20			; 00000014H
  004b6	50		 push	 eax
  004b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 209  : 	return pNewNode;

  004bd	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
$LN8@AddToQueue@2:

; 210  : }

  004c0	5f		 pop	 edi
  004c1	5e		 pop	 esi
  004c2	5b		 pop	 ebx
  004c3	8b e5		 mov	 esp, ebp
  004c5	5d		 pop	 ebp
  004c6	c2 10 00	 ret	 16			; 00000010H
?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PAEIEH@Z ENDP	; WZQueue::AddToQueueList
_TEXT	ENDS
PUBLIC	?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z		; WZQueue::GetFromQueue
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
_pObject$ = 8						; size = 4
_pSize$ = 12						; size = 4
_headcode$ = 16						; size = 4
_uindex$ = 20						; size = 4
?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z PROC		; WZQueue::GetFromQueue
; _this$ = ecx

; 214  : {

  004d0	55		 push	 ebp
  004d1	8b ec		 mov	 ebp, esp
  004d3	83 ec 48	 sub	 esp, 72			; 00000048H
  004d6	53		 push	 ebx
  004d7	56		 push	 esi
  004d8	57		 push	 edi
  004d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 215  : 	LPLISTNODE pNode=0;

  004dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pNode$[ebp], 0

; 216  : 
; 217  : 	pNode = this->GetHeadNode();

  004e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004e6	e8 00 00 00 00	 call	 ?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ; WZQueue::GetHeadNode
  004eb	89 45 f8	 mov	 DWORD PTR _pNode$[ebp], eax

; 218  : 
; 219  : 	if ( pNode != 0 )

  004ee	83 7d f8 00	 cmp	 DWORD PTR _pNode$[ebp], 0
  004f2	0f 84 85 00 00
	00		 je	 $LN1@GetFromQue

; 220  : 	{
; 221  : 		EnterCriticalSection(&this->m_CriticalSection);

  004f8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004fb	83 c0 14	 add	 eax, 20			; 00000014H
  004fe	50		 push	 eax
  004ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 222  : 
; 223  : 		memcpy(pObject, pNode->pHeapMemory , pNode->nSize);

  00505	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00508	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0050b	51		 push	 ecx
  0050c	8b 55 f8	 mov	 edx, DWORD PTR _pNode$[ebp]
  0050f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00512	50		 push	 eax
  00513	8b 4d 08	 mov	 ecx, DWORD PTR _pObject$[ebp]
  00516	51		 push	 ecx
  00517	e8 00 00 00 00	 call	 _memcpy
  0051c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 224  : 
; 225  : 		*pSize = pNode->nSize;

  0051f	8b 45 0c	 mov	 eax, DWORD PTR _pSize$[ebp]
  00522	8b 4d f8	 mov	 ecx, DWORD PTR _pNode$[ebp]
  00525	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00528	89 10		 mov	 DWORD PTR [eax], edx

; 226  : 		*headcode = pNode->Headcode;

  0052a	8b 45 10	 mov	 eax, DWORD PTR _headcode$[ebp]
  0052d	8b 4d f8	 mov	 ecx, DWORD PTR _pNode$[ebp]
  00530	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  00533	88 10		 mov	 BYTE PTR [eax], dl

; 227  : 		*uindex = pNode->uIndex;

  00535	8b 45 14	 mov	 eax, DWORD PTR _uindex$[ebp]
  00538	8b 4d f8	 mov	 ecx, DWORD PTR _pNode$[ebp]
  0053b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0053e	89 10		 mov	 DWORD PTR [eax], edx

; 228  : 
; 229  : 		HeapFree(GetProcessHeap(), 0, pNode->pHeapMemory);

  00540	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00543	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00546	51		 push	 ecx
  00547	6a 00		 push	 0
  00549	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0054f	50		 push	 eax
  00550	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 230  : 		HeapFree(GetProcessHeap(), 0, pNode);

  00556	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00559	50		 push	 eax
  0055a	6a 00		 push	 0
  0055c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00562	50		 push	 eax
  00563	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 231  : 
; 232  : 		LeaveCriticalSection(&this->m_CriticalSection);

  00569	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0056c	83 c0 14	 add	 eax, 20			; 00000014H
  0056f	50		 push	 eax
  00570	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 233  : 		return TRUE;

  00576	b8 01 00 00 00	 mov	 eax, 1
  0057b	eb 02		 jmp	 SHORT $LN2@GetFromQue
$LN1@GetFromQue:

; 234  : 	}
; 235  : 	return FALSE;

  0057d	33 c0		 xor	 eax, eax
$LN2@GetFromQue:

; 236  : }

  0057f	5f		 pop	 edi
  00580	5e		 pop	 esi
  00581	5b		 pop	 ebx
  00582	8b e5		 mov	 esp, ebp
  00584	5d		 pop	 ebp
  00585	c2 10 00	 ret	 16			; 00000010H
?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z ENDP		; WZQueue::GetFromQueue
; Function compile flags: /Odtp /ZI
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
?DeleteAllNodes@WZQueue@@AAEXXZ PROC			; WZQueue::DeleteAllNodes
; _this$ = ecx

; 240  : {

  00590	55		 push	 ebp
  00591	8b ec		 mov	 ebp, esp
  00593	83 ec 48	 sub	 esp, 72			; 00000048H
  00596	53		 push	 ebx
  00597	56		 push	 esi
  00598	57		 push	 edi
  00599	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  : 	LPLISTNODE pNode=0;

  0059c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pNode$[ebp], 0

; 242  : 
; 243  : 	EnterCriticalSection(&this->m_CriticalSection);

  005a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005a6	83 c0 14	 add	 eax, 20			; 00000014H
  005a9	50		 push	 eax
  005aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
$LN2@DeleteAllN:

; 244  : 
; 245  : 	while ( (pNode=this->GetHeadNode() ) != 0 )

  005b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005b3	e8 00 00 00 00	 call	 ?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ; WZQueue::GetHeadNode
  005b8	89 45 f8	 mov	 DWORD PTR _pNode$[ebp], eax
  005bb	83 7d f8 00	 cmp	 DWORD PTR _pNode$[ebp], 0
  005bf	74 15		 je	 SHORT $LN1@DeleteAllN

; 246  : 	{
; 247  : 		HeapFree(GetProcessHeap(), 0, pNode);

  005c1	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  005c4	50		 push	 eax
  005c5	6a 00		 push	 0
  005c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  005cd	50		 push	 eax
  005ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 248  : 	}

  005d4	eb da		 jmp	 SHORT $LN2@DeleteAllN
$LN1@DeleteAllN:

; 249  : 
; 250  : 	LeaveCriticalSection(&this->m_CriticalSection);

  005d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005d9	83 c0 14	 add	 eax, 20			; 00000014H
  005dc	50		 push	 eax
  005dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 251  : }

  005e3	5f		 pop	 edi
  005e4	5e		 pop	 esi
  005e5	5b		 pop	 ebx
  005e6	8b e5		 mov	 esp, ebp
  005e8	5d		 pop	 ebp
  005e9	c3		 ret	 0
?DeleteAllNodes@WZQueue@@AAEXXZ ENDP			; WZQueue::DeleteAllNodes
_TEXT	ENDS
PUBLIC	?StartQ@WZQueue@@QAEHXZ				; WZQueue::StartQ
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartQ@WZQueue@@QAEHXZ PROC				; WZQueue::StartQ
; _this$ = ecx

; 255  : {

  005f0	55		 push	 ebp
  005f1	8b ec		 mov	 ebp, esp
  005f3	83 ec 44	 sub	 esp, 68			; 00000044H
  005f6	53		 push	 ebx
  005f7	56		 push	 esi
  005f8	57		 push	 edi
  005f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 256  : 	if ( this->m_pHead != 0 )

  005fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005ff	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00603	74 2d		 je	 SHORT $LN1@StartQ

; 257  : 	{
; 258  : 		EnterCriticalSection(&this->m_CriticalSection); 

  00605	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00608	83 c0 14	 add	 eax, 20			; 00000014H
  0060b	50		 push	 eax
  0060c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 259  : 		this->m_pCur = this->m_pHead;

  00612	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00615	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00618	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0061b	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 260  : 		LeaveCriticalSection(&this->m_CriticalSection);

  0061e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00621	83 c0 14	 add	 eax, 20			; 00000014H
  00624	50		 push	 eax
  00625	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 261  : 		return TRUE;

  0062b	b8 01 00 00 00	 mov	 eax, 1
  00630	eb 02		 jmp	 SHORT $LN2@StartQ
$LN1@StartQ:

; 262  : 	}
; 263  : 	return FALSE;

  00632	33 c0		 xor	 eax, eax
$LN2@StartQ:

; 264  : }

  00634	5f		 pop	 edi
  00635	5e		 pop	 esi
  00636	5b		 pop	 ebx
  00637	8b e5		 mov	 esp, ebp
  00639	5d		 pop	 ebp
  0063a	c3		 ret	 0
?StartQ@WZQueue@@QAEHXZ ENDP				; WZQueue::StartQ
_TEXT	ENDS
PUBLIC	?NextQ@WZQueue@@QAEHXZ				; WZQueue::NextQ
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NextQ@WZQueue@@QAEHXZ PROC				; WZQueue::NextQ
; _this$ = ecx

; 267  : {

  00640	55		 push	 ebp
  00641	8b ec		 mov	 ebp, esp
  00643	83 ec 44	 sub	 esp, 68			; 00000044H
  00646	53		 push	 ebx
  00647	56		 push	 esi
  00648	57		 push	 edi
  00649	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 268  : 	if ( this->m_pCur  != 0 )

  0064c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0064f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00653	74 3c		 je	 SHORT $LN2@NextQ

; 269  : 	{
; 270  : 		if ( this->m_pCur->lpNodeNext  != 0 )

  00655	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00658	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0065b	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0065f	74 30		 je	 SHORT $LN2@NextQ

; 271  : 		{
; 272  : 			EnterCriticalSection(&this->m_CriticalSection); 

  00661	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00664	83 c0 14	 add	 eax, 20			; 00000014H
  00667	50		 push	 eax
  00668	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 273  : 			this->m_pCur = this->m_pCur->lpNodeNext ;

  0066e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00671	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00674	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00677	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0067a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 274  : 			LeaveCriticalSection(&this->m_CriticalSection);

  0067d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00680	83 c0 14	 add	 eax, 20			; 00000014H
  00683	50		 push	 eax
  00684	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 275  : 			return TRUE;

  0068a	b8 01 00 00 00	 mov	 eax, 1
  0068f	eb 02		 jmp	 SHORT $LN3@NextQ
$LN2@NextQ:

; 276  : 		}
; 277  : 	}
; 278  : 	return FALSE;

  00691	33 c0		 xor	 eax, eax
$LN3@NextQ:

; 279  : }

  00693	5f		 pop	 edi
  00694	5e		 pop	 esi
  00695	5b		 pop	 ebx
  00696	8b e5		 mov	 esp, ebp
  00698	5d		 pop	 ebp
  00699	c3		 ret	 0
?NextQ@WZQueue@@QAEHXZ ENDP				; WZQueue::NextQ
_TEXT	ENDS
PUBLIC	?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z ; WZQueue::GetCurData
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObject$ = 8						; size = 4
_pSize$ = 12						; size = 4
_headcode$ = 16						; size = 4
_uindex$ = 20						; size = 4
?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z PROC	; WZQueue::GetCurData
; _this$ = ecx

; 282  : {

  006a0	55		 push	 ebp
  006a1	8b ec		 mov	 ebp, esp
  006a3	83 ec 44	 sub	 esp, 68			; 00000044H
  006a6	53		 push	 ebx
  006a7	56		 push	 esi
  006a8	57		 push	 edi
  006a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 283  : 	if ( this->m_pCur != 0 )

  006ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006af	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  006b3	74 62		 je	 SHORT $LN2@GetCurData

; 284  : 	{
; 285  : 		if ( this->m_pCur->bIsDataSending == 1 )

  006b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006b8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  006bb	83 79 10 01	 cmp	 DWORD PTR [ecx+16], 1
  006bf	75 04		 jne	 SHORT $LN1@GetCurData

; 286  : 		{
; 287  : 			return NULL;

  006c1	33 c0		 xor	 eax, eax
  006c3	eb 54		 jmp	 SHORT $LN3@GetCurData
$LN1@GetCurData:

; 288  : 		}
; 289  : 
; 290  : 		memcpy(pObject, this->m_pCur->pHeapMemory , this->m_pCur->nSize); 

  006c5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006c8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  006cb	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  006ce	52		 push	 edx
  006cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006d2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  006d5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  006d8	52		 push	 edx
  006d9	8b 45 08	 mov	 eax, DWORD PTR _pObject$[ebp]
  006dc	50		 push	 eax
  006dd	e8 00 00 00 00	 call	 _memcpy
  006e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 291  : 
; 292  : 		*pSize = this->m_pCur->nSize;

  006e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006e8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  006eb	8b 55 0c	 mov	 edx, DWORD PTR _pSize$[ebp]
  006ee	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  006f1	89 02		 mov	 DWORD PTR [edx], eax

; 293  : 		*headcode = this->m_pCur->Headcode;

  006f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006f6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  006f9	8b 55 10	 mov	 edx, DWORD PTR _headcode$[ebp]
  006fc	8a 41 18	 mov	 al, BYTE PTR [ecx+24]
  006ff	88 02		 mov	 BYTE PTR [edx], al

; 294  : 		*uindex = this->m_pCur->uIndex;

  00701	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00704	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00707	8b 55 14	 mov	 edx, DWORD PTR _uindex$[ebp]
  0070a	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0070d	89 02		 mov	 DWORD PTR [edx], eax

; 295  : 
; 296  : 		return this->m_pCur;

  0070f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00712	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00715	eb 02		 jmp	 SHORT $LN3@GetCurData
$LN2@GetCurData:

; 297  : 	}
; 298  : 
; 299  : 	return NULL;

  00717	33 c0		 xor	 eax, eax
$LN3@GetCurData:

; 300  : }

  00719	5f		 pop	 edi
  0071a	5e		 pop	 esi
  0071b	5b		 pop	 ebx
  0071c	8b e5		 mov	 esp, ebp
  0071e	5d		 pop	 ebp
  0071f	c2 10 00	 ret	 16			; 00000010H
?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z ENDP	; WZQueue::GetCurData
_TEXT	ENDS
PUBLIC	?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z	; WZQueue::Pop
EXTRN	___security_cookie:DWORD
EXTRN	__except_handler4:PROC
xdata$x	SEGMENT
__sehtable$?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff90H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN7@Pop
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_bRet$ = -32						; size = 4
_this$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_pCur$ = 8						; size = 4
_pObject$ = 12						; size = 4
_nOfs$ = 16						; size = 4
_nSize$ = 20						; size = 4
_sendbytes$ = 24					; size = 4
?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z PROC		; WZQueue::Pop
; _this$ = ecx

; 303  : {

  00730	55		 push	 ebp
  00731	8b ec		 mov	 ebp, esp
  00733	6a fe		 push	 -2			; fffffffeH
  00735	68 00 00 00 00	 push	 OFFSET __sehtable$?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z
  0073a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0073f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00745	50		 push	 eax
  00746	83 c4 b0	 add	 esp, -80		; ffffffb0H
  00749	53		 push	 ebx
  0074a	56		 push	 esi
  0074b	57		 push	 edi
  0074c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00751	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00754	33 c5		 xor	 eax, ebp
  00756	50		 push	 eax
  00757	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0075a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00760	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 304  : 	BOOL bRet=FALSE;

  00763	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 305  : 
; 306  : 	if ( pCur != 0 )

  0076a	83 7d 08 00	 cmp	 DWORD PTR _pCur$[ebp], 0
  0076e	0f 84 93 00 00
	00		 je	 $LN10@Pop

; 307  : 	{
; 308  : 		__try

  00774	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 309  : 		{
; 310  : 			EnterCriticalSection(&this->m_CriticalSection);

  0077b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0077e	83 c0 14	 add	 eax, 20			; 00000014H
  00781	50		 push	 eax
  00782	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 311  : 			pCur->iBytesSended  = pCur->iBytesSended  + nOfs;

  00788	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  0078b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0078e	03 4d 10	 add	 ecx, DWORD PTR _nOfs$[ebp]
  00791	8b 55 08	 mov	 edx, DWORD PTR _pCur$[ebp]
  00794	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 312  : 
; 313  : 			if ( (pCur->nSize-nOfs) != 0 )

  00797	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  0079a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0079d	2b 4d 10	 sub	 ecx, DWORD PTR _nOfs$[ebp]
  007a0	74 49		 je	 SHORT $LN2@Pop

; 314  : 			{
; 315  : 				memcpy(pObject, &pCur->pHeapMemory[pCur->iBytesSended ], pCur->nSize - pCur->iBytesSended );

  007a2	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  007a5	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  007a8	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  007ab	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  007ae	52		 push	 edx
  007af	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  007b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  007b5	8b 55 08	 mov	 edx, DWORD PTR _pCur$[ebp]
  007b8	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  007bb	51		 push	 ecx
  007bc	8b 45 0c	 mov	 eax, DWORD PTR _pObject$[ebp]
  007bf	50		 push	 eax
  007c0	e8 00 00 00 00	 call	 _memcpy
  007c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 316  : 				*nSize = pCur->nSize - pCur->iBytesSended ;

  007c8	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  007cb	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  007ce	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  007d1	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  007d4	8b 45 14	 mov	 eax, DWORD PTR _nSize$[ebp]
  007d7	89 10		 mov	 DWORD PTR [eax], edx

; 317  : 				*sendbytes = pCur->iBytesSended ;

  007d9	8b 45 18	 mov	 eax, DWORD PTR _sendbytes$[ebp]
  007dc	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  007df	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  007e2	89 10		 mov	 DWORD PTR [eax], edx

; 318  : 				bRet=TRUE;

  007e4	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN2@Pop:

; 319  : 			}
; 320  : 		}
; 321  : 
; 322  : 		__finally

  007eb	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  007f2	e8 02 00 00 00	 call	 $LN9@Pop
  007f7	eb 0e		 jmp	 SHORT $LN10@Pop
$LN7@Pop:
$LN12@Pop:
$LN9@Pop:

; 323  : 		{
; 324  : 			LeaveCriticalSection(&this->m_CriticalSection);

  007f9	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  007fc	83 c0 14	 add	 eax, 20			; 00000014H
  007ff	50		 push	 eax
  00800	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN8@Pop:
$LN11@Pop:
  00806	c3		 ret	 0
$LN10@Pop:

; 325  : 		}
; 326  : 	}
; 327  : 
; 328  : 	return bRet;

  00807	8b 45 e0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 329  : }

  0080a	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0080d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00814	59		 pop	 ecx
  00815	5f		 pop	 edi
  00816	5e		 pop	 esi
  00817	5b		 pop	 ebx
  00818	8b e5		 mov	 esp, ebp
  0081a	5d		 pop	 ebp
  0081b	c2 14 00	 ret	 20			; 00000014H
?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z ENDP		; WZQueue::Pop
_TEXT	ENDS
PUBLIC	?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z ; WZQueue::SetCurDataSending
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pNode$ = 8						; size = 4
?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z PROC	; WZQueue::SetCurDataSending
; _this$ = ecx

; 333  : {

  00820	55		 push	 ebp
  00821	8b ec		 mov	 ebp, esp
  00823	83 ec 44	 sub	 esp, 68			; 00000044H
  00826	53		 push	 ebx
  00827	56		 push	 esi
  00828	57		 push	 edi
  00829	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  : 	if ( pNode != NULL )

  0082c	83 7d 08 00	 cmp	 DWORD PTR _pNode$[ebp], 0
  00830	74 24		 je	 SHORT $LN2@SetCurData

; 335  : 	{
; 336  : 		EnterCriticalSection(&this->m_CriticalSection);

  00832	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00835	83 c0 14	 add	 eax, 20			; 00000014H
  00838	50		 push	 eax
  00839	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 337  : 		pNode->bIsDataSending = TRUE;

  0083f	8b 45 08	 mov	 eax, DWORD PTR _pNode$[ebp]
  00842	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 338  : 		LeaveCriticalSection(&this->m_CriticalSection);

  00849	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0084c	83 c0 14	 add	 eax, 20			; 00000014H
  0084f	50		 push	 eax
  00850	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN2@SetCurData:

; 339  : 	}
; 340  : }

  00856	5f		 pop	 edi
  00857	5e		 pop	 esi
  00858	5b		 pop	 ebx
  00859	8b e5		 mov	 esp, ebp
  0085b	5d		 pop	 ebp
  0085c	c2 04 00	 ret	 4
?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z ENDP	; WZQueue::SetCurDataSending
_TEXT	ENDS
PUBLIC	?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z	; WZQueue::DeleteNode
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pNext$ = -16						; size = 4
_pPre$ = -12						; size = 4
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
_pCur$ = 8						; size = 4
?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z PROC		; WZQueue::DeleteNode
; _this$ = ecx

; 343  : {

  00860	55		 push	 ebp
  00861	8b ec		 mov	 ebp, esp
  00863	83 ec 50	 sub	 esp, 80			; 00000050H
  00866	53		 push	 ebx
  00867	56		 push	 esi
  00868	57		 push	 edi
  00869	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  : 	LPLISTNODE pNode=0;

  0086c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pNode$[ebp], 0

; 345  : 	LPLISTNODE pPre=0;

  00873	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pPre$[ebp], 0

; 346  : 	LPLISTNODE pNext=0;

  0087a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pNext$[ebp], 0

; 347  : 
; 348  : 	EnterCriticalSection(&this->m_CriticalSection);

  00881	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00884	83 c0 14	 add	 eax, 20			; 00000014H
  00887	50		 push	 eax
  00888	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 349  : 
; 350  : 	if ( pCur != NULL )

  0088e	83 7d 08 00	 cmp	 DWORD PTR _pCur$[ebp], 0
  00892	0f 84 73 01 00
	00		 je	 $LN13@DeleteNode

; 351  : 	{
; 352  : 		pNode = pCur;

  00898	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  0089b	89 45 f8	 mov	 DWORD PTR _pNode$[ebp], eax

; 353  : 		pPre = pCur->lpNodePre;

  0089e	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  008a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  008a3	89 4d f4	 mov	 DWORD PTR _pPre$[ebp], ecx

; 354  : 		pNext= pCur->lpNodeNext;

  008a6	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  008a9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  008ac	89 4d f0	 mov	 DWORD PTR _pNext$[ebp], ecx

; 355  : 
; 356  : 		if ( pPre == 0 && pNext == 0 )

  008af	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  008b3	75 14		 jne	 SHORT $LN12@DeleteNode
  008b5	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  008b9	75 0e		 jne	 SHORT $LN12@DeleteNode

; 357  : 		{
; 358  : 			this->m_pHead = pCur;

  008bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008be	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  008c1	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  008c4	e9 e5 00 00 00	 jmp	 $LN11@DeleteNode
$LN12@DeleteNode:

; 359  : 		}
; 360  : 		else if ( pPre == 0 && pNext != 0 )

  008c9	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  008cd	75 42		 jne	 SHORT $LN10@DeleteNode
  008cf	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  008d3	74 3c		 je	 SHORT $LN10@DeleteNode

; 361  : 		{
; 362  : 			pNext->lpNodePre = 0;

  008d5	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  008d8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 363  : 			pCur = pNext;

  008de	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  008e1	89 45 08	 mov	 DWORD PTR _pCur$[ebp], eax

; 364  : 			this->m_pHead=pCur;

  008e4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008e7	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  008ea	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 365  : 
; 366  : 			if ( pNext->lpNodeNext == 0 )

  008ed	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  008f0	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  008f4	75 16		 jne	 SHORT $LN9@DeleteNode

; 367  : 			{
; 368  : 				this->m_pTail=pNext;

  008f6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008f9	8b 4d f0	 mov	 ecx, DWORD PTR _pNext$[ebp]
  008fc	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 369  : 				this->m_pTail->lpNodeNext =0;

  008ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00902	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00905	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN9@DeleteNode:

; 370  : 			}
; 371  : 		}

  0090c	e9 9d 00 00 00	 jmp	 $LN11@DeleteNode
$LN10@DeleteNode:

; 372  : 		else if ( pPre != 0 && pNext == 0 )

  00911	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  00915	74 3e		 je	 SHORT $LN7@DeleteNode
  00917	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  0091b	75 38		 jne	 SHORT $LN7@DeleteNode

; 373  : 		{
; 374  : 			pPre->lpNodeNext = 0;

  0091d	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  00920	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 375  : 			pCur = pPre;

  00927	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  0092a	89 45 08	 mov	 DWORD PTR _pCur$[ebp], eax

; 376  : 			this->m_pTail = pCur;

  0092d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00930	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  00933	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 377  : 
; 378  : 			if ( pPre->lpNodePre == 0 )

  00936	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  00939	83 38 00	 cmp	 DWORD PTR [eax], 0
  0093c	75 15		 jne	 SHORT $LN6@DeleteNode

; 379  : 			{
; 380  : 				this->m_pHead = pPre;

  0093e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00941	8b 4d f4	 mov	 ecx, DWORD PTR _pPre$[ebp]
  00944	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 381  : 				this->m_pHead->lpNodePre = 0;

  00947	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0094a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0094d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN6@DeleteNode:

; 382  : 			}
; 383  : 		}

  00953	eb 59		 jmp	 SHORT $LN11@DeleteNode
$LN7@DeleteNode:

; 384  : 		else if ( pPre != 0 && pNext != 0 )

  00955	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  00959	74 53		 je	 SHORT $LN11@DeleteNode
  0095b	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  0095f	74 4d		 je	 SHORT $LN11@DeleteNode

; 385  : 		{
; 386  : 			pPre->lpNodeNext = pNext;

  00961	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  00964	8b 4d f0	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00967	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 387  : 			pNext->lpNodePre = pPre;

  0096a	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  0096d	8b 4d f4	 mov	 ecx, DWORD PTR _pPre$[ebp]
  00970	89 08		 mov	 DWORD PTR [eax], ecx

; 388  : 
; 389  : 			if ( pPre->lpNodePre == 0 )

  00972	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  00975	83 38 00	 cmp	 DWORD PTR [eax], 0
  00978	75 15		 jne	 SHORT $LN3@DeleteNode

; 390  : 			{
; 391  : 				this->m_pHead = pPre;

  0097a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0097d	8b 4d f4	 mov	 ecx, DWORD PTR _pPre$[ebp]
  00980	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 392  : 				this->m_pHead->lpNodePre = NULL;

  00983	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00986	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00989	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN3@DeleteNode:

; 393  : 			}
; 394  : 
; 395  : 			if ( pNext->lpNodeNext == NULL )

  0098f	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  00992	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00996	75 16		 jne	 SHORT $LN11@DeleteNode

; 396  : 			{
; 397  : 				this->m_pTail = pNext;

  00998	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0099b	8b 4d f0	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0099e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 398  : 				this->m_pTail->lpNodeNext = NULL;

  009a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009a4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  009a7	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN11@DeleteNode:

; 399  : 			}
; 400  : 		}
; 401  : 
; 402  : 		HeapFree( GetProcessHeap(), 0, pNode->pHeapMemory  );

  009ae	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  009b1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  009b4	51		 push	 ecx
  009b5	6a 00		 push	 0
  009b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  009bd	50		 push	 eax
  009be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 403  : 		HeapFree( GetProcessHeap(), 0, pNode);

  009c4	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  009c7	50		 push	 eax
  009c8	6a 00		 push	 0
  009ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  009d0	50		 push	 eax
  009d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 404  : 
; 405  : 		if ( pPre == NULL && pNext == NULL )

  009d7	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  009db	75 21		 jne	 SHORT $LN1@DeleteNode
  009dd	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  009e1	75 1b		 jne	 SHORT $LN1@DeleteNode

; 406  : 		{
; 407  : 			this->m_pHead = NULL;

  009e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009e6	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 408  : 			pCur = NULL;

  009ed	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pCur$[ebp], 0

; 409  : 			this->m_pTail = NULL;

  009f4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009f7	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$LN1@DeleteNode:

; 410  : 		}
; 411  : 		
; 412  : 		this->m_Count --;

  009fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a01	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a03	83 e9 01	 sub	 ecx, 1
  00a06	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a09	89 0a		 mov	 DWORD PTR [edx], ecx
$LN13@DeleteNode:

; 413  : 		
; 414  : 	}
; 415  : 
; 416  : 	LeaveCriticalSection(&this->m_CriticalSection);

  00a0b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a0e	83 c0 14	 add	 eax, 20			; 00000014H
  00a11	50		 push	 eax
  00a12	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 417  : }

  00a18	5f		 pop	 edi
  00a19	5e		 pop	 esi
  00a1a	5b		 pop	 ebx
  00a1b	8b e5		 mov	 esp, ebp
  00a1d	5d		 pop	 ebp
  00a1e	c2 04 00	 ret	 4
?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z ENDP		; WZQueue::DeleteNode
_TEXT	ENDS
END
