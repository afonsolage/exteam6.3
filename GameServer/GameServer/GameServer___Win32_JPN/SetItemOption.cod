; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\common\SetItemOption.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CSetItemOption@@6B@				; CSetItemOption::`vftable'
PUBLIC	??0CSetItemOption@@QAE@XZ			; CSetItemOption::CSetItemOption
PUBLIC	??_R4CSetItemOption@@6B@			; CSetItemOption::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSetItemOption@@@8			; CSetItemOption `RTTI Type Descriptor'
PUBLIC	??_R3CSetItemOption@@8				; CSetItemOption::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSetItemOption@@8				; CSetItemOption::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSetItemOption@@8			; CSetItemOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECSetItemOption@@UAEPAXI@Z:PROC		; CSetItemOption::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CSetItemOption@@8
; File d:\projects\exteam6.3\source\gameserver\common\setitemoption.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CSetItemOption@@8 DD FLAT:??_R0?AVCSetItemOption@@@8 ; CSetItemOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSetItemOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CSetItemOption@@8
rdata$r	SEGMENT
??_R2CSetItemOption@@8 DD FLAT:??_R1A@?0A@EA@CSetItemOption@@8 ; CSetItemOption::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSetItemOption@@8
rdata$r	SEGMENT
??_R3CSetItemOption@@8 DD 00H				; CSetItemOption::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSetItemOption@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSetItemOption@@@8
_DATA	SEGMENT
??_R0?AVCSetItemOption@@@8 DD FLAT:??_7type_info@@6B@	; CSetItemOption `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSetItemOption@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSetItemOption@@6B@
rdata$r	SEGMENT
??_R4CSetItemOption@@6B@ DD 00H				; CSetItemOption::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSetItemOption@@@8
	DD	FLAT:??_R3CSetItemOption@@8
rdata$r	ENDS
;	COMDAT ??_7CSetItemOption@@6B@
CONST	SEGMENT
??_7CSetItemOption@@6B@ DD FLAT:??_R4CSetItemOption@@6B@ ; CSetItemOption::`vftable'
	DD	FLAT:??_ECSetItemOption@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSetItemOption@@QAE@XZ PROC				; CSetItemOption::CSetItemOption
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSetItemOption@@6B@

; 18   : 	return;
; 19   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CSetItemOption@@QAE@XZ ENDP				; CSetItemOption::CSetItemOption
_TEXT	ENDS
PUBLIC	??1CSetItemOption@@UAE@XZ			; CSetItemOption::~CSetItemOption
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCSetItemOption@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSetItemOption@@UAEPAXI@Z PROC			; CSetItemOption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CSetItemOption@@UAE@XZ ; CSetItemOption::~CSetItemOption
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCSetItemOption@@UAEPAXI@Z ENDP			; CSetItemOption::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSetItemOption@@UAE@XZ PROC				; CSetItemOption::~CSetItemOption
; _this$ = ecx

; 22   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSetItemOption@@6B@

; 23   : 	return;
; 24   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CSetItemOption@@UAE@XZ ENDP				; CSetItemOption::~CSetItemOption
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z		; CSetItemOption::LoadTypeInfo
EXTRN	_strcmp:PROC
EXTRN	_memset:PROC
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pointer$220282 = -24					; size = 4
_number2$220281 = -20					; size = 4
_number$220274 = -16					; size = 4
_Token$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z PROC		; CSetItemOption::LoadTypeInfo
; _this$ = ecx

; 27   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 58	 sub	 esp, 88			; 00000058H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	int i;
; 29   : 	int Token;
; 30   : 
; 31   : 	SMDFile=fopen(filename,"r");

  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00051	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _fopen
  0005a	83 c4 08	 add	 esp, 8
  0005d	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 32   : 	if (SMDFile == NULL )

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00069	75 07		 jne	 SHORT $LN12@LoadTypeIn

; 33   : 	{
; 34   : 		return 0;

  0006b	33 c0		 xor	 eax, eax
  0006d	e9 57 01 00 00	 jmp	 $LN13@LoadTypeIn
$LN12@LoadTypeIn:

; 35   : 	}
; 36   : 	memset(this->m_SetItemTypeInfo , -1, sizeof(this->m_SetItemTypeInfo) );

  00072	68 00 80 02 00	 push	 163840			; 00028000H
  00077	6a ff		 push	 -1
  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	83 c0 04	 add	 eax, 4
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _memset
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 37   : 	
; 38   : 	for ( i=0; i<MAX_ITEMS; i++)

  00088	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0008f	eb 09		 jmp	 SHORT $LN11@LoadTypeIn
$LN10@LoadTypeIn:
  00091	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00094	83 c0 01	 add	 eax, 1
  00097	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN11@LoadTypeIn:
  0009a	81 7d f8 00 20
	00 00		 cmp	 DWORD PTR _i$[ebp], 8192 ; 00002000H
  000a1	7d 13		 jge	 SHORT $LN9@LoadTypeIn

; 39   : 	{
; 40   : 		this->m_SetItemTypeInfo[i].IsLoad = FALSE;

  000a3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a6	6b c0 14	 imul	 eax, 20			; 00000014H
  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 41   : 	}

  000b4	eb db		 jmp	 SHORT $LN10@LoadTypeIn
$LN9@LoadTypeIn:

; 42   : 	
; 43   : 	while ( true )

  000b6	b8 01 00 00 00	 mov	 eax, 1
  000bb	85 c0		 test	 eax, eax
  000bd	0f 84 01 01 00
	00		 je	 $LN7@LoadTypeIn

; 44   : 	{
; 45   : 		int number;
; 46   : 		
; 47   : 		Token=GetToken();

  000c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000c8	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 48   : 		if (Token == END)

  000cb	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  000cf	75 05		 jne	 SHORT $LN6@LoadTypeIn

; 49   : 		{
; 50   : 			break;

  000d1	e9 ee 00 00 00	 jmp	 $LN7@LoadTypeIn
$LN6@LoadTypeIn:

; 51   : 		}
; 52   : 
; 53   : 		if (Token == NUMBER)

  000d6	83 7d f4 01	 cmp	 DWORD PTR _Token$[ebp], 1
  000da	0f 85 df 00 00
	00		 jne	 $LN3@LoadTypeIn

; 54   : 		{
; 55   : 			number = (int)TokenNumber;

  000e0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e6	e8 00 00 00 00	 call	 __ftol2_sse
  000eb	89 45 f0	 mov	 DWORD PTR _number$220274[ebp], eax
$LN4@LoadTypeIn:

; 56   : 			
; 57   : 			while ( true )

  000ee	b8 01 00 00 00	 mov	 eax, 1
  000f3	85 c0		 test	 eax, eax
  000f5	0f 84 c4 00 00
	00		 je	 $LN3@LoadTypeIn

; 58   : 			{
; 59   : 				int number2;
; 60   : 				LPSETITEM_TYPEINFO pointer;
; 61   : 
; 62   : 				Token = GetToken();

  000fb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00100	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 63   : 				number2=(int)TokenNumber;

  00103	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00109	e8 00 00 00 00	 call	 __ftol2_sse
  0010e	89 45 ec	 mov	 DWORD PTR _number2$220281[ebp], eax

; 64   : 				if ( ( Token== 0) && (strcmp("end", &TokenString[0]) == 0))

  00111	83 7d f4 00	 cmp	 DWORD PTR _Token$[ebp], 0
  00115	75 20		 jne	 SHORT $LN2@LoadTypeIn
  00117	68 00 00 00 00	 push	 OFFSET _TokenString
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00121	e8 00 00 00 00	 call	 _strcmp
  00126	83 c4 08	 add	 esp, 8
  00129	85 c0		 test	 eax, eax
  0012b	75 0a		 jne	 SHORT $LN2@LoadTypeIn

; 65   : 				{
; 66   : 					break;

  0012d	e9 8d 00 00 00	 jmp	 $LN3@LoadTypeIn

; 67   : 				}
; 68   : 				else

  00132	e9 83 00 00 00	 jmp	 $LN1@LoadTypeIn
$LN2@LoadTypeIn:

; 69   : 				{
; 70   : 					pointer = &this->m_SetItemTypeInfo[number*MAX_SUBTYPE_ITEMS+number2];

  00137	8b 45 f0	 mov	 eax, DWORD PTR _number$220274[ebp]
  0013a	c1 e0 09	 shl	 eax, 9
  0013d	03 45 ec	 add	 eax, DWORD PTR _number2$220281[ebp]
  00140	6b c0 14	 imul	 eax, 20			; 00000014H
  00143	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0014a	89 55 e8	 mov	 DWORD PTR _pointer$220282[ebp], edx

; 71   : 
; 72   : 					Token=GetToken();

  0014d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00152	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 73   : 					pointer->OptionIndex[0]=(int)TokenNumber;

  00155	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0015b	e8 00 00 00 00	 call	 __ftol2_sse
  00160	8b 4d e8	 mov	 ecx, DWORD PTR _pointer$220282[ebp]
  00163	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 74   : 					Token=GetToken();

  00166	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0016b	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 75   : 					pointer->OptionIndex[1]=(int)TokenNumber;

  0016e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00174	e8 00 00 00 00	 call	 __ftol2_sse
  00179	8b 4d e8	 mov	 ecx, DWORD PTR _pointer$220282[ebp]
  0017c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 76   : 					Token=GetToken();

  0017f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00184	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 77   : 					pointer->ChaosMixLevel[0]=(int)TokenNumber;

  00187	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018d	e8 00 00 00 00	 call	 __ftol2_sse
  00192	8b 4d e8	 mov	 ecx, DWORD PTR _pointer$220282[ebp]
  00195	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 78   : 					Token=GetToken();

  00198	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0019d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 79   : 					pointer->ChaosMixLevel[1]=(int)TokenNumber;

  001a0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a6	e8 00 00 00 00	 call	 __ftol2_sse
  001ab	8b 4d e8	 mov	 ecx, DWORD PTR _pointer$220282[ebp]
  001ae	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 80   : 
; 81   : 					pointer->IsLoad=TRUE;

  001b1	8b 45 e8	 mov	 eax, DWORD PTR _pointer$220282[ebp]
  001b4	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN1@LoadTypeIn:

; 82   : 				}
; 83   : 			}

  001ba	e9 2f ff ff ff	 jmp	 $LN4@LoadTypeIn
$LN3@LoadTypeIn:

; 84   : 		}
; 85   : 
; 86   : 	}

  001bf	e9 f2 fe ff ff	 jmp	 $LN9@LoadTypeIn
$LN7@LoadTypeIn:

; 87   : 
; 88   : 	return TRUE;

  001c4	b8 01 00 00 00	 mov	 eax, 1
$LN13@LoadTypeIn:

; 89   : }

  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 04 00	 ret	 4
?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z ENDP		; CSetItemOption::LoadTypeInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  001e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001ee	33 c5		 xor	 eax, ebp
  001f0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  001f3	53		 push	 ebx
  001f4	56		 push	 esi
  001f5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  001f6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  001fd	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00202	50		 push	 eax
  00203	e8 00 00 00 00	 call	 _fgetc
  00208	83 c4 04	 add	 esp, 4
  0020b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0020e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00212	83 f9 ff	 cmp	 ecx, -1
  00215	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00217	b8 02 00 00 00	 mov	 eax, 2
  0021c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00221	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00223	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00227	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0022a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0022c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00231	50		 push	 eax
  00232	e8 00 00 00 00	 call	 _fgetc
  00237	83 c4 04	 add	 esp, 4
  0023a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0023d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00241	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00244	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00246	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0024a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0024d	74 1c		 je	 SHORT $LN23@GetToken
  0024f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00253	83 f8 ff	 cmp	 eax, -1
  00256	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0025d	50		 push	 eax
  0025e	e8 00 00 00 00	 call	 _fgetc
  00263	83 c4 04	 add	 esp, 4
  00266	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00269	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0026b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0026f	83 f8 ff	 cmp	 eax, -1
  00272	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00274	b8 02 00 00 00	 mov	 eax, 2
  00279	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0027e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00282	50		 push	 eax
  00283	e8 00 00 00 00	 call	 _isspace
  00288	83 c4 04	 add	 esp, 4
  0028b	85 c0		 test	 eax, eax
  0028d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00293	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00297	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0029d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  002a3	83 e9 22	 sub	 ecx, 34			; 00000022H
  002a6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  002ac	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  002b3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  002b9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  002bf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  002c6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  002cd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  002d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  002dc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  002e1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  002e6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  002f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  002f5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  002fa	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  002ff	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00309	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0030e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00313	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00318	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00322	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00327	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0032c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00331	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0033b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00340	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00345	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0034f	50		 push	 eax
  00350	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00354	51		 push	 ecx
  00355	e8 00 00 00 00	 call	 _ungetc
  0035a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0035d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00360	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00363	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00368	50		 push	 eax
  00369	e8 00 00 00 00	 call	 _getc
  0036e	83 c4 04	 add	 esp, 4
  00371	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00374	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00378	83 f9 ff	 cmp	 ecx, -1
  0037b	74 36		 je	 SHORT $LN12@GetToken
  0037d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00381	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00384	74 1a		 je	 SHORT $LN11@GetToken
  00386	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0038a	50		 push	 eax
  0038b	e8 00 00 00 00	 call	 _isdigit
  00390	83 c4 04	 add	 esp, 4
  00393	85 c0		 test	 eax, eax
  00395	75 09		 jne	 SHORT $LN11@GetToken
  00397	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0039b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0039e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  003a0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003a3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  003a6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  003a8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003ab	83 c0 01	 add	 eax, 1
  003ae	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  003b1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  003b3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003b6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  003b9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 _atof
  003c2	83 c4 04	 add	 esp, 4
  003c5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  003cb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  003d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  003da	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  003df	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  003e4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  003f0	50		 push	 eax
  003f1	e8 00 00 00 00	 call	 _getc
  003f6	83 c4 04	 add	 esp, 4
  003f9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  003fc	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00400	83 f9 ff	 cmp	 ecx, -1
  00403	74 1c		 je	 SHORT $LN8@GetToken
  00405	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00409	83 f8 22	 cmp	 eax, 34			; 00000022H
  0040c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0040e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00411	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00414	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00416	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00419	83 c0 01	 add	 eax, 1
  0041c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0041f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00421	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00425	83 f8 22	 cmp	 eax, 34			; 00000022H
  00428	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0042a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0042f	50		 push	 eax
  00430	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00434	51		 push	 ecx
  00435	e8 00 00 00 00	 call	 _ungetc
  0043a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0043d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00440	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00443	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0044d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00452	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00457	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0045c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 _isalpha
  00466	83 c4 04	 add	 esp, 4
  00469	85 c0		 test	 eax, eax
  0046b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00471	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00478	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0047b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0047e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00480	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00483	83 c0 01	 add	 eax, 1
  00486	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00489	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 _getc
  00494	83 c4 04	 add	 esp, 4
  00497	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0049a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0049e	83 f9 ff	 cmp	 ecx, -1
  004a1	74 36		 je	 SHORT $LN3@GetToken
  004a3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004a7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  004aa	74 1a		 je	 SHORT $LN2@GetToken
  004ac	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004b0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  004b3	74 11		 je	 SHORT $LN2@GetToken
  004b5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004b9	50		 push	 eax
  004ba	e8 00 00 00 00	 call	 _isalnum
  004bf	83 c4 04	 add	 esp, 4
  004c2	85 c0		 test	 eax, eax
  004c4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  004c6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004c9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  004cc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  004ce	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004d1	83 c0 01	 add	 eax, 1
  004d4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  004d7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  004d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004de	50		 push	 eax
  004df	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  004e3	51		 push	 ecx
  004e4	e8 00 00 00 00	 call	 _ungetc
  004e9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  004ec	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004ef	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  004f2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  004fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00501	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00503	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00505	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0050f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00514	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00516	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00518	5f		 pop	 edi
  00519	5e		 pop	 esi
  0051a	5b		 pop	 ebx
  0051b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0051e	33 cd		 xor	 ecx, ebp
  00520	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00525	8b e5		 mov	 esp, ebp
  00527	5d		 pop	 ebp
  00528	c3		 ret	 0
  00529	8d 49 00	 npad	 3
$LN35@GetToken:
  0052c	00 00 00 00	 DD	 $LN10@GetToken
  00530	00 00 00 00	 DD	 $LN19@GetToken
  00534	00 00 00 00	 DD	 $LN17@GetToken
  00538	00 00 00 00	 DD	 $LN14@GetToken
  0053c	00 00 00 00	 DD	 $LN18@GetToken
  00540	00 00 00 00	 DD	 $LN16@GetToken
  00544	00 00 00 00	 DD	 $LN15@GetToken
  00548	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0054c	00		 DB	 0
  0054d	01		 DB	 1
  0054e	07		 DB	 7
  0054f	07		 DB	 7
  00550	07		 DB	 7
  00551	07		 DB	 7
  00552	07		 DB	 7
  00553	07		 DB	 7
  00554	07		 DB	 7
  00555	07		 DB	 7
  00556	02		 DB	 2
  00557	03		 DB	 3
  00558	03		 DB	 3
  00559	07		 DB	 7
  0055a	03		 DB	 3
  0055b	03		 DB	 3
  0055c	03		 DB	 3
  0055d	03		 DB	 3
  0055e	03		 DB	 3
  0055f	03		 DB	 3
  00560	03		 DB	 3
  00561	03		 DB	 3
  00562	03		 DB	 3
  00563	03		 DB	 3
  00564	07		 DB	 7
  00565	04		 DB	 4
  00566	07		 DB	 7
  00567	07		 DB	 7
  00568	07		 DB	 7
  00569	07		 DB	 7
  0056a	07		 DB	 7
  0056b	07		 DB	 7
  0056c	07		 DB	 7
  0056d	07		 DB	 7
  0056e	07		 DB	 7
  0056f	07		 DB	 7
  00570	07		 DB	 7
  00571	07		 DB	 7
  00572	07		 DB	 7
  00573	07		 DB	 7
  00574	07		 DB	 7
  00575	07		 DB	 7
  00576	07		 DB	 7
  00577	07		 DB	 7
  00578	07		 DB	 7
  00579	07		 DB	 7
  0057a	07		 DB	 7
  0057b	07		 DB	 7
  0057c	07		 DB	 7
  0057d	07		 DB	 7
  0057e	07		 DB	 7
  0057f	07		 DB	 7
  00580	07		 DB	 7
  00581	07		 DB	 7
  00582	07		 DB	 7
  00583	07		 DB	 7
  00584	07		 DB	 7
  00585	07		 DB	 7
  00586	07		 DB	 7
  00587	07		 DB	 7
  00588	07		 DB	 7
  00589	07		 DB	 7
  0058a	07		 DB	 7
  0058b	07		 DB	 7
  0058c	07		 DB	 7
  0058d	07		 DB	 7
  0058e	07		 DB	 7
  0058f	07		 DB	 7
  00590	07		 DB	 7
  00591	07		 DB	 7
  00592	07		 DB	 7
  00593	07		 DB	 7
  00594	07		 DB	 7
  00595	07		 DB	 7
  00596	07		 DB	 7
  00597	07		 DB	 7
  00598	07		 DB	 7
  00599	07		 DB	 7
  0059a	07		 DB	 7
  0059b	07		 DB	 7
  0059c	07		 DB	 7
  0059d	07		 DB	 7
  0059e	07		 DB	 7
  0059f	07		 DB	 7
  005a0	07		 DB	 7
  005a1	07		 DB	 7
  005a2	07		 DB	 7
  005a3	07		 DB	 7
  005a4	07		 DB	 7
  005a5	05		 DB	 5
  005a6	07		 DB	 7
  005a7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z	; CSetItemOption::LoadOptionInfo
EXTRN	_strcpy:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\setitemoption.cpp
_TEXT	SEGMENT
tv516 = -96						; size = 4
tv506 = -96						; size = 4
tv496 = -96						; size = 4
tv486 = -96						; size = 4
tv476 = -96						; size = 4
tv466 = -96						; size = 4
tv456 = -96						; size = 4
tv514 = -92						; size = 4
tv504 = -92						; size = 4
tv494 = -92						; size = 4
tv484 = -92						; size = 4
tv474 = -92						; size = 4
tv464 = -92						; size = 4
tv454 = -92						; size = 4
tv511 = -86						; size = 2
tv501 = -86						; size = 2
tv491 = -86						; size = 2
tv481 = -86						; size = 2
tv471 = -86						; size = 2
tv461 = -86						; size = 2
tv451 = -86						; size = 2
_p$220308 = -20						; size = 4
_number$220304 = -16					; size = 4
_Token$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z PROC		; CSetItemOption::LoadOptionInfo
; _this$ = ecx

; 93   : {

  005b0	55		 push	 ebp
  005b1	8b ec		 mov	 ebp, esp
  005b3	83 ec 60	 sub	 esp, 96			; 00000060H
  005b6	53		 push	 ebx
  005b7	56		 push	 esi
  005b8	57		 push	 edi
  005b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 	int i;
; 95   : 	int Token;
; 96   : 	
; 97   : 	SMDFile=fopen(filename, "r");

  005bc	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  005c1	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  005c4	50		 push	 eax
  005c5	e8 00 00 00 00	 call	 _fopen
  005ca	83 c4 08	 add	 esp, 8
  005cd	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 98   : 	if (SMDFile == NULL )

  005d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  005d9	75 07		 jne	 SHORT $LN15@LoadOption

; 99   : 	{
; 100  : 		return 0;

  005db	33 c0		 xor	 eax, eax
  005dd	e9 1e 05 00 00	 jmp	 $LN16@LoadOption
$LN15@LoadOption:

; 101  : 	}
; 102  : 	memset(&this->m_SetItemOptionInfo, 0, sizeof(this->m_SetItemOptionInfo));

  005e2	68 80 84 00 00	 push	 33920			; 00008480H
  005e7	6a 00		 push	 0
  005e9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005ec	05 04 80 02 00	 add	 eax, 163844		; 00028004H
  005f1	50		 push	 eax
  005f2	e8 00 00 00 00	 call	 _memset
  005f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 103  : 
; 104  : 	for ( i=0;i<MAX_SETITEM_OPTION;i++)

  005fa	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00601	eb 09		 jmp	 SHORT $LN14@LoadOption
$LN13@LoadOption:
  00603	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00606	83 c0 01	 add	 eax, 1
  00609	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN14@LoadOption:
  0060c	83 7d f8 50	 cmp	 DWORD PTR _i$[ebp], 80	; 00000050H
  00610	7d 62		 jge	 SHORT $LN12@LoadOption

; 105  : 	{
; 106  : 		memset(&this->m_SetItemOptionInfo[i].SetOptionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetOptionTable) );

  00612	6a 30		 push	 48			; 00000030H
  00614	6a ff		 push	 -1
  00616	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00619	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0061f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00622	8d 94 01 0c 81
	02 00		 lea	 edx, DWORD PTR [ecx+eax+164108]
  00629	52		 push	 edx
  0062a	e8 00 00 00 00	 call	 _memset
  0062f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 107  : 		memset(&this->m_SetItemOptionInfo[i].SetExPOptionTable, -1, sizeof(this->m_SetItemOptionInfo[0].SetExPOptionTable) );

  00632	6a 08		 push	 8
  00634	6a ff		 push	 -1
  00636	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00639	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0063f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00642	8d 94 01 6c 81
	02 00		 lea	 edx, DWORD PTR [ecx+eax+164204]
  00649	52		 push	 edx
  0064a	e8 00 00 00 00	 call	 _memset
  0064f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 108  : 		memset(&this->m_SetItemOptionInfo[i].SetFullOtionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetFullOtionTable) );

  00652	6a 14		 push	 20			; 00000014H
  00654	6a ff		 push	 -1
  00656	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00659	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0065f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00662	8d 94 01 7c 81
	02 00		 lea	 edx, DWORD PTR [ecx+eax+164220]
  00669	52		 push	 edx
  0066a	e8 00 00 00 00	 call	 _memset
  0066f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  : 	}

  00672	eb 8f		 jmp	 SHORT $LN13@LoadOption
$LN12@LoadOption:

; 110  : 
; 111  : 	while ( true )

  00674	b8 01 00 00 00	 mov	 eax, 1
  00679	85 c0		 test	 eax, eax
  0067b	0f 84 7a 04 00
	00		 je	 $LN10@LoadOption

; 112  : 	{
; 113  : 		Token=GetToken();

  00681	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00686	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 114  : 		int number=(int)TokenNumber;

  00689	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0068f	e8 00 00 00 00	 call	 __ftol2_sse
  00694	89 45 f0	 mov	 DWORD PTR _number$220304[ebp], eax

; 115  : 		
; 116  : 		if (Token==0 && strcmp("end", &TokenString[0]) == 0)

  00697	83 7d f4 00	 cmp	 DWORD PTR _Token$[ebp], 0
  0069b	75 20		 jne	 SHORT $LN9@LoadOption
  0069d	68 00 00 00 00	 push	 OFFSET _TokenString
  006a2	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  006a7	e8 00 00 00 00	 call	 _strcmp
  006ac	83 c4 08	 add	 esp, 8
  006af	85 c0		 test	 eax, eax
  006b1	75 0a		 jne	 SHORT $LN9@LoadOption

; 117  : 		{
; 118  : 			break;

  006b3	e9 43 04 00 00	 jmp	 $LN10@LoadOption

; 119  : 		}
; 120  : 		else

  006b8	e9 39 04 00 00	 jmp	 $LN8@LoadOption
$LN9@LoadOption:

; 121  : 		{
; 122  : 			LPSETITEM_OPTIONINFO p;
; 123  : 			p=&this->m_SetItemOptionInfo[number];

  006bd	8b 45 f0	 mov	 eax, DWORD PTR _number$220304[ebp]
  006c0	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  006c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006c9	8d 94 01 04 80
	02 00		 lea	 edx, DWORD PTR [ecx+eax+163844]
  006d0	89 55 ec	 mov	 DWORD PTR _p$220308[ebp], edx

; 124  : 
; 125  : 			Token=GetToken();

  006d3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006d8	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 126  : 			strcpy(&p->Name[0], &TokenString[0]);

  006db	68 00 00 00 00	 push	 OFFSET _TokenString
  006e0	8b 45 ec	 mov	 eax, DWORD PTR _p$220308[ebp]
  006e3	83 c0 04	 add	 eax, 4
  006e6	50		 push	 eax
  006e7	e8 00 00 00 00	 call	 _strcpy
  006ec	83 c4 08	 add	 esp, 8

; 127  : 
; 128  : 			for (i=0;i<OPTION_TABLE_SIZE;i++)

  006ef	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  006f6	eb 09		 jmp	 SHORT $LN7@LoadOption
$LN6@LoadOption:
  006f8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  006fb	83 c0 01	 add	 eax, 1
  006fe	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@LoadOption:
  00701	83 7d f8 06	 cmp	 DWORD PTR _i$[ebp], 6
  00705	0f 8d ba 00 00
	00		 jge	 $LN5@LoadOption

; 129  : 			{
; 130  : 				Token=GetToken();

  0070b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00710	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 131  : 				p->SetOptionTable[i][0] = (int)TokenNumber;

  00713	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00719	e8 00 00 00 00	 call	 __ftol2_sse
  0071e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00721	8b 55 ec	 mov	 edx, DWORD PTR _p$220308[ebp]
  00724	89 84 ca 08 01
	00 00		 mov	 DWORD PTR [edx+ecx*8+264], eax

; 132  : 				Token=GetToken();

  0072b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00730	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 133  : 				p->SetOptionTableValue[i][0] =(int)TokenNumber;

  00733	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00739	e8 00 00 00 00	 call	 __ftol2_sse
  0073e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00741	8b 55 ec	 mov	 edx, DWORD PTR _p$220308[ebp]
  00744	89 84 ca 38 01
	00 00		 mov	 DWORD PTR [edx+ecx*8+312], eax

; 134  : 
; 135  : 				Token=GetToken();

  0074b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00750	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 136  : 				p->SetOptionTable[i][1] = (int)TokenNumber;

  00753	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00759	e8 00 00 00 00	 call	 __ftol2_sse
  0075e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00761	8b 55 ec	 mov	 edx, DWORD PTR _p$220308[ebp]
  00764	89 84 ca 0c 01
	00 00		 mov	 DWORD PTR [edx+ecx*8+268], eax

; 137  : 				Token=GetToken();

  0076b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00770	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 138  : 				p->SetOptionTableValue[i][1] =(int)TokenNumber;

  00773	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00779	e8 00 00 00 00	 call	 __ftol2_sse
  0077e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00781	8b 55 ec	 mov	 edx, DWORD PTR _p$220308[ebp]
  00784	89 84 ca 3c 01
	00 00		 mov	 DWORD PTR [edx+ecx*8+316], eax

; 139  : 
; 140  : 				if ( (p->SetOptionTable[i][0] != -1) || (p->SetOptionTable[i][1] != -1) )

  0078b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0078e	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00791	83 bc c1 08 01
	00 00 ff	 cmp	 DWORD PTR [ecx+eax*8+264], -1
  00799	75 10		 jne	 SHORT $LN3@LoadOption
  0079b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0079e	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  007a1	83 bc c1 0c 01
	00 00 ff	 cmp	 DWORD PTR [ecx+eax*8+268], -1
  007a9	74 15		 je	 SHORT $LN4@LoadOption
$LN3@LoadOption:

; 141  : 				{
; 142  : 					p->SetOptionCount++;

  007ab	8b 45 ec	 mov	 eax, DWORD PTR _p$220308[ebp]
  007ae	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  007b4	83 c1 01	 add	 ecx, 1
  007b7	8b 55 ec	 mov	 edx, DWORD PTR _p$220308[ebp]
  007ba	89 8a 04 01 00
	00		 mov	 DWORD PTR [edx+260], ecx
$LN4@LoadOption:

; 143  : 				}
; 144  : 			}

  007c0	e9 33 ff ff ff	 jmp	 $LN6@LoadOption
$LN5@LoadOption:

; 145  : 			
; 146  : 			// Special Set Item Options
; 147  : 			Token=GetToken();

  007c5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007ca	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 148  : 			p->SetExPOptionTable[0]  = (int)TokenNumber;

  007cd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007d3	e8 00 00 00 00	 call	 __ftol2_sse
  007d8	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  007db	89 81 68 01 00
	00		 mov	 DWORD PTR [ecx+360], eax

; 149  : 			Token=GetToken();

  007e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007e6	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 150  : 			p->SetExPOptionTableValue[0] = (int)TokenNumber;

  007e9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007ef	e8 00 00 00 00	 call	 __ftol2_sse
  007f4	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  007f7	89 81 70 01 00
	00		 mov	 DWORD PTR [ecx+368], eax

; 151  : 
; 152  : 			if ( p->SetExPOptionTable[0] != -1)

  007fd	8b 45 ec	 mov	 eax, DWORD PTR _p$220308[ebp]
  00800	83 b8 68 01 00
	00 ff		 cmp	 DWORD PTR [eax+360], -1
  00807	74 15		 je	 SHORT $LN2@LoadOption

; 153  : 			{
; 154  : 				p->SetOptionCount ++;

  00809	8b 45 ec	 mov	 eax, DWORD PTR _p$220308[ebp]
  0080c	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  00812	83 c1 01	 add	 ecx, 1
  00815	8b 55 ec	 mov	 edx, DWORD PTR _p$220308[ebp]
  00818	89 8a 04 01 00
	00		 mov	 DWORD PTR [edx+260], ecx
$LN2@LoadOption:

; 155  : 			}
; 156  : 
; 157  : 			Token=GetToken();

  0081e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00823	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 158  : 			p->SetExPOptionTable[1]  = (int)TokenNumber;

  00826	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0082c	e8 00 00 00 00	 call	 __ftol2_sse
  00831	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00834	89 81 6c 01 00
	00		 mov	 DWORD PTR [ecx+364], eax

; 159  : 			Token=GetToken();

  0083a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0083f	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 160  : 			p->SetExPOptionTableValue[1] = (int)TokenNumber;

  00842	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00848	e8 00 00 00 00	 call	 __ftol2_sse
  0084d	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00850	89 81 74 01 00
	00		 mov	 DWORD PTR [ecx+372], eax

; 161  : 
; 162  : 			if ( p->SetExPOptionTable[1] != -1)

  00856	8b 45 ec	 mov	 eax, DWORD PTR _p$220308[ebp]
  00859	83 b8 6c 01 00
	00 ff		 cmp	 DWORD PTR [eax+364], -1
  00860	74 15		 je	 SHORT $LN1@LoadOption

; 163  : 			{
; 164  : 				p->SetOptionCount ++;

  00862	8b 45 ec	 mov	 eax, DWORD PTR _p$220308[ebp]
  00865	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  0086b	83 c1 01	 add	 ecx, 1
  0086e	8b 55 ec	 mov	 edx, DWORD PTR _p$220308[ebp]
  00871	89 8a 04 01 00
	00		 mov	 DWORD PTR [edx+260], ecx
$LN1@LoadOption:

; 165  : 			}
; 166  : 			
; 167  : 			// Full Type Set Item
; 168  : 			Token=GetToken();

  00877	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0087c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 169  : 			p->SetFullOtionTable[0]=(int)TokenNumber;

  0087f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00885	e8 00 00 00 00	 call	 __ftol2_sse
  0088a	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  0088d	89 81 78 01 00
	00		 mov	 DWORD PTR [ecx+376], eax

; 170  : 			Token=GetToken();

  00893	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00898	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 171  : 			p->SetFullOtionTableValue[0]=(int)TokenNumber;

  0089b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008a1	e8 00 00 00 00	 call	 __ftol2_sse
  008a6	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  008a9	89 81 8c 01 00
	00		 mov	 DWORD PTR [ecx+396], eax

; 172  : 
; 173  : 			Token=GetToken();

  008af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008b4	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 174  : 			p->SetFullOtionTable[1]=(int)TokenNumber;

  008b7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008bd	e8 00 00 00 00	 call	 __ftol2_sse
  008c2	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  008c5	89 81 7c 01 00
	00		 mov	 DWORD PTR [ecx+380], eax

; 175  : 			Token=GetToken();

  008cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008d0	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 176  : 			p->SetFullOtionTableValue[1]=(int)TokenNumber;

  008d3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008d9	e8 00 00 00 00	 call	 __ftol2_sse
  008de	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  008e1	89 81 90 01 00
	00		 mov	 DWORD PTR [ecx+400], eax

; 177  : 
; 178  : 			Token=GetToken();

  008e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008ec	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 179  : 			p->SetFullOtionTable[2]=(int)TokenNumber;

  008ef	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008f5	e8 00 00 00 00	 call	 __ftol2_sse
  008fa	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  008fd	89 81 80 01 00
	00		 mov	 DWORD PTR [ecx+384], eax

; 180  : 			Token=GetToken();

  00903	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00908	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 181  : 			p->SetFullOtionTableValue[2]=(int)TokenNumber;

  0090b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00911	e8 00 00 00 00	 call	 __ftol2_sse
  00916	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00919	89 81 94 01 00
	00		 mov	 DWORD PTR [ecx+404], eax

; 182  : 
; 183  : 			Token=GetToken();

  0091f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00924	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 184  : 			p->SetFullOtionTable[3]=(int)TokenNumber;

  00927	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0092d	e8 00 00 00 00	 call	 __ftol2_sse
  00932	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00935	89 81 84 01 00
	00		 mov	 DWORD PTR [ecx+388], eax

; 185  : 			Token=GetToken();

  0093b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00940	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 186  : 			p->SetFullOtionTableValue[3]=(int)TokenNumber;

  00943	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00949	e8 00 00 00 00	 call	 __ftol2_sse
  0094e	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00951	89 81 98 01 00
	00		 mov	 DWORD PTR [ecx+408], eax

; 187  : 
; 188  : 			Token=GetToken();

  00957	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0095c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 189  : 			p->SetFullOtionTable[4]=(int)TokenNumber;

  0095f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00965	e8 00 00 00 00	 call	 __ftol2_sse
  0096a	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  0096d	89 81 88 01 00
	00		 mov	 DWORD PTR [ecx+392], eax

; 190  : 			Token=GetToken();

  00973	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00978	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 191  : 			p->SetFullOtionTableValue[4]=(int)TokenNumber;

  0097b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00981	e8 00 00 00 00	 call	 __ftol2_sse
  00986	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00989	89 81 9c 01 00
	00		 mov	 DWORD PTR [ecx+412], eax

; 192  : 
; 193  : 			// Save Character Class Disponibility
; 194  : 			Token=GetToken();

  0098f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00994	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 195  : 			p->RequireClass[CLASS_WIZARD]= (BYTE)TokenNumber;

  00997	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0099d	d9 7d aa	 fnstcw	 WORD PTR tv451[ebp]
  009a0	0f b7 45 aa	 movzx	 eax, WORD PTR tv451[ebp]
  009a4	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  009a9	89 45 a4	 mov	 DWORD PTR tv454[ebp], eax
  009ac	d9 6d a4	 fldcw	 WORD PTR tv454[ebp]
  009af	db 5d a0	 fistp	 DWORD PTR tv456[ebp]
  009b2	d9 6d aa	 fldcw	 WORD PTR tv451[ebp]
  009b5	8a 45 a0	 mov	 al, BYTE PTR tv456[ebp]
  009b8	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  009bb	88 81 a0 01 00
	00		 mov	 BYTE PTR [ecx+416], al

; 196  : 
; 197  : 			Token=GetToken();

  009c1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  009c6	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 198  : 			p->RequireClass[CLASS_KNIGHT]=(BYTE)TokenNumber;

  009c9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  009cf	d9 7d aa	 fnstcw	 WORD PTR tv461[ebp]
  009d2	0f b7 45 aa	 movzx	 eax, WORD PTR tv461[ebp]
  009d6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  009db	89 45 a4	 mov	 DWORD PTR tv464[ebp], eax
  009de	d9 6d a4	 fldcw	 WORD PTR tv464[ebp]
  009e1	db 5d a0	 fistp	 DWORD PTR tv466[ebp]
  009e4	d9 6d aa	 fldcw	 WORD PTR tv461[ebp]
  009e7	8a 45 a0	 mov	 al, BYTE PTR tv466[ebp]
  009ea	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  009ed	88 81 a1 01 00
	00		 mov	 BYTE PTR [ecx+417], al

; 199  : 
; 200  : 			Token=GetToken();

  009f3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  009f8	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 201  : 			p->RequireClass[CLASS_ELF]=(BYTE)TokenNumber;

  009fb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a01	d9 7d aa	 fnstcw	 WORD PTR tv471[ebp]
  00a04	0f b7 45 aa	 movzx	 eax, WORD PTR tv471[ebp]
  00a08	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00a0d	89 45 a4	 mov	 DWORD PTR tv474[ebp], eax
  00a10	d9 6d a4	 fldcw	 WORD PTR tv474[ebp]
  00a13	db 5d a0	 fistp	 DWORD PTR tv476[ebp]
  00a16	d9 6d aa	 fldcw	 WORD PTR tv471[ebp]
  00a19	8a 45 a0	 mov	 al, BYTE PTR tv476[ebp]
  00a1c	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00a1f	88 81 a2 01 00
	00		 mov	 BYTE PTR [ecx+418], al

; 202  : 
; 203  : 			Token=GetToken();

  00a25	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a2a	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 204  : 			p->RequireClass[CLASS_MAGUMSA]=(BYTE)TokenNumber;

  00a2d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a33	d9 7d aa	 fnstcw	 WORD PTR tv481[ebp]
  00a36	0f b7 45 aa	 movzx	 eax, WORD PTR tv481[ebp]
  00a3a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00a3f	89 45 a4	 mov	 DWORD PTR tv484[ebp], eax
  00a42	d9 6d a4	 fldcw	 WORD PTR tv484[ebp]
  00a45	db 5d a0	 fistp	 DWORD PTR tv486[ebp]
  00a48	d9 6d aa	 fldcw	 WORD PTR tv481[ebp]
  00a4b	8a 45 a0	 mov	 al, BYTE PTR tv486[ebp]
  00a4e	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00a51	88 81 a3 01 00
	00		 mov	 BYTE PTR [ecx+419], al

; 205  : 
; 206  : 			Token=GetToken();

  00a57	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a5c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 207  : 			p->RequireClass[CLASS_DARKLORD]=(BYTE)TokenNumber;

  00a5f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a65	d9 7d aa	 fnstcw	 WORD PTR tv491[ebp]
  00a68	0f b7 45 aa	 movzx	 eax, WORD PTR tv491[ebp]
  00a6c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00a71	89 45 a4	 mov	 DWORD PTR tv494[ebp], eax
  00a74	d9 6d a4	 fldcw	 WORD PTR tv494[ebp]
  00a77	db 5d a0	 fistp	 DWORD PTR tv496[ebp]
  00a7a	d9 6d aa	 fldcw	 WORD PTR tv491[ebp]
  00a7d	8a 45 a0	 mov	 al, BYTE PTR tv496[ebp]
  00a80	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00a83	88 81 a4 01 00
	00		 mov	 BYTE PTR [ecx+420], al

; 208  : 
; 209  : 			Token=GetToken();

  00a89	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a8e	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 210  : 			p->RequireClass[CLASS_SUMMONER]=(BYTE)TokenNumber;

  00a91	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a97	d9 7d aa	 fnstcw	 WORD PTR tv501[ebp]
  00a9a	0f b7 45 aa	 movzx	 eax, WORD PTR tv501[ebp]
  00a9e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00aa3	89 45 a4	 mov	 DWORD PTR tv504[ebp], eax
  00aa6	d9 6d a4	 fldcw	 WORD PTR tv504[ebp]
  00aa9	db 5d a0	 fistp	 DWORD PTR tv506[ebp]
  00aac	d9 6d aa	 fldcw	 WORD PTR tv501[ebp]
  00aaf	8a 45 a0	 mov	 al, BYTE PTR tv506[ebp]
  00ab2	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00ab5	88 81 a5 01 00
	00		 mov	 BYTE PTR [ecx+421], al

; 211  : 
; 212  : 			Token = GetToken();

  00abb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00ac0	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 213  : 			p->RequireClass[CLASS_MONK]		= TokenNumber;	

  00ac3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00ac9	d9 7d aa	 fnstcw	 WORD PTR tv511[ebp]
  00acc	0f b7 45 aa	 movzx	 eax, WORD PTR tv511[ebp]
  00ad0	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00ad5	89 45 a4	 mov	 DWORD PTR tv514[ebp], eax
  00ad8	d9 6d a4	 fldcw	 WORD PTR tv514[ebp]
  00adb	db 5d a0	 fistp	 DWORD PTR tv516[ebp]
  00ade	d9 6d aa	 fldcw	 WORD PTR tv511[ebp]
  00ae1	8a 45 a0	 mov	 al, BYTE PTR tv516[ebp]
  00ae4	8b 4d ec	 mov	 ecx, DWORD PTR _p$220308[ebp]
  00ae7	88 81 a6 01 00
	00		 mov	 BYTE PTR [ecx+422], al

; 214  : 
; 215  : 			// Active SetItem
; 216  : 			p->IsLoad=TRUE;			

  00aed	8b 45 ec	 mov	 eax, DWORD PTR _p$220308[ebp]
  00af0	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN8@LoadOption:

; 217  : 		}
; 218  : 	}

  00af6	e9 79 fb ff ff	 jmp	 $LN12@LoadOption
$LN10@LoadOption:

; 219  : 
; 220  : 	return 1;

  00afb	b8 01 00 00 00	 mov	 eax, 1
$LN16@LoadOption:

; 221  : }

  00b00	5f		 pop	 edi
  00b01	5e		 pop	 esi
  00b02	5b		 pop	 ebx
  00b03	8b e5		 mov	 esp, ebp
  00b05	5d		 pop	 ebp
  00b06	c2 04 00	 ret	 4
?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z ENDP		; CSetItemOption::LoadOptionInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z	; CSetItemOption::LoadTypeInfo
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?GetString@CWzMemScript@@QAEPADXZ:PROC		; CWzMemScript::GetString
EXTRN	?GetNumber@CWzMemScript@@QAEHXZ:PROC		; CWzMemScript::GetNumber
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	___CxxFrameHandler3:PROC
xdata$x	SEGMENT
__unwindtable$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z$0
__ehfuncinfo$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T220678 = -240						; size = 4
_pointer$220361 = -172					; size = 4
_number2$220360 = -168					; size = 4
_number$220354 = -164					; size = 4
_Token$ = -160						; size = 4
_i$ = -156						; size = 4
_WzMemScript$ = -152					; size = 132
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z PROC		; CSetItemOption::LoadTypeInfo
; _this$ = ecx

; 225  : {

  00b10	55		 push	 ebp
  00b11	8b ec		 mov	 ebp, esp
  00b13	6a ff		 push	 -1
  00b15	68 00 00 00 00	 push	 __ehhandler$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z
  00b1a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00b20	50		 push	 eax
  00b21	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00b27	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00b2c	33 c5		 xor	 eax, ebp
  00b2e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00b31	53		 push	 ebx
  00b32	56		 push	 esi
  00b33	57		 push	 edi
  00b34	50		 push	 eax
  00b35	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00b38	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00b3e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 226  : 	CWzMemScript WzMemScript;

  00b41	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00b47	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript
  00b4c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 227  : 	int i;
; 228  : 	int Token;
; 229  : 
; 230  : 	WzMemScript.SetBuffer(Buffer, iSize);

  00b53	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00b56	50		 push	 eax
  00b57	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  00b5a	51		 push	 ecx
  00b5b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00b61	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 231  : 
; 232  : 	memset(this->m_SetItemTypeInfo , -1, sizeof(this->m_SetItemTypeInfo) );

  00b66	68 00 80 02 00	 push	 163840			; 00028000H
  00b6b	6a ff		 push	 -1
  00b6d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00b70	83 c0 04	 add	 eax, 4
  00b73	50		 push	 eax
  00b74	e8 00 00 00 00	 call	 _memset
  00b79	83 c4 0c	 add	 esp, 12			; 0000000cH

; 233  : 
; 234  : 	for ( i=0; i<MAX_ITEMS; i++)

  00b7c	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00b86	eb 0f		 jmp	 SHORT $LN11@LoadTypeIn@2
$LN10@LoadTypeIn@2:
  00b88	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00b8e	83 c0 01	 add	 eax, 1
  00b91	89 85 64 ff ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN11@LoadTypeIn@2:
  00b97	81 bd 64 ff ff
	ff 00 20 00 00	 cmp	 DWORD PTR _i$[ebp], 8192 ; 00002000H
  00ba1	7d 16		 jge	 SHORT $LN8@LoadTypeIn@2

; 235  : 	{
; 236  : 		this->m_SetItemTypeInfo[i].IsLoad =FALSE;

  00ba3	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00ba9	6b c0 14	 imul	 eax, 20			; 00000014H
  00bac	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00baf	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 237  : 	}

  00bb7	eb cf		 jmp	 SHORT $LN10@LoadTypeIn@2
$LN8@LoadTypeIn@2:

; 238  : 	
; 239  : 	while ( true )

  00bb9	b8 01 00 00 00	 mov	 eax, 1
  00bbe	85 c0		 test	 eax, eax
  00bc0	0f 84 65 01 00
	00		 je	 $LN7@LoadTypeIn@2

; 240  : 	{
; 241  : 		int number;
; 242  : 		
; 243  : 		Token=WzMemScript.GetToken();

  00bc6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00bcc	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00bd1	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 244  : 		if (Token == 2)

  00bd7	83 bd 60 ff ff
	ff 02		 cmp	 DWORD PTR _Token$[ebp], 2
  00bde	75 05		 jne	 SHORT $LN6@LoadTypeIn@2

; 245  : 		{
; 246  : 			break;

  00be0	e9 46 01 00 00	 jmp	 $LN7@LoadTypeIn@2
$LN6@LoadTypeIn@2:

; 247  : 		}
; 248  : 
; 249  : 		if (Token == 1)

  00be5	83 bd 60 ff ff
	ff 01		 cmp	 DWORD PTR _Token$[ebp], 1
  00bec	0f 85 34 01 00
	00		 jne	 $LN5@LoadTypeIn@2

; 250  : 		{
; 251  : 			number = WzMemScript.GetNumber();

  00bf2	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00bf8	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00bfd	89 85 5c ff ff
	ff		 mov	 DWORD PTR _number$220354[ebp], eax
$LN4@LoadTypeIn@2:

; 252  : 			
; 253  : 			while ( true )

  00c03	b8 01 00 00 00	 mov	 eax, 1
  00c08	85 c0		 test	 eax, eax
  00c0a	0f 84 16 01 00
	00		 je	 $LN5@LoadTypeIn@2

; 254  : 			{
; 255  : 				int number2;
; 256  : 				LPSETITEM_TYPEINFO pointer;
; 257  : 
; 258  : 				Token = WzMemScript.GetToken();

  00c10	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c16	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00c1b	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 259  : 				number2=WzMemScript.GetNumber();

  00c21	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c27	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00c2c	89 85 58 ff ff
	ff		 mov	 DWORD PTR _number2$220360[ebp], eax

; 260  : 				if ( ( Token== 0) && (strcmp("end", WzMemScript.GetString() )== 0))

  00c32	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _Token$[ebp], 0
  00c39	75 27		 jne	 SHORT $LN2@LoadTypeIn@2
  00c3b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c41	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  00c46	50		 push	 eax
  00c47	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00c4c	e8 00 00 00 00	 call	 _strcmp
  00c51	83 c4 08	 add	 esp, 8
  00c54	85 c0		 test	 eax, eax
  00c56	75 0a		 jne	 SHORT $LN2@LoadTypeIn@2

; 261  : 				{
; 262  : 					break;

  00c58	e9 c9 00 00 00	 jmp	 $LN5@LoadTypeIn@2

; 263  : 				}
; 264  : 				else

  00c5d	e9 bf 00 00 00	 jmp	 $LN1@LoadTypeIn@2
$LN2@LoadTypeIn@2:

; 265  : 				{
; 266  : 					pointer = &this->m_SetItemTypeInfo[number*MAX_SUBTYPE_ITEMS+number2];

  00c62	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _number$220354[ebp]
  00c68	c1 e0 09	 shl	 eax, 9
  00c6b	03 85 58 ff ff
	ff		 add	 eax, DWORD PTR _number2$220360[ebp]
  00c71	6b c0 14	 imul	 eax, 20			; 00000014H
  00c74	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00c77	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00c7b	89 95 54 ff ff
	ff		 mov	 DWORD PTR _pointer$220361[ebp], edx

; 267  : 
; 268  : 					Token=WzMemScript.GetToken();

  00c81	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c87	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00c8c	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 269  : 					pointer->OptionIndex[0]=WzMemScript.GetNumber();

  00c92	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c98	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00c9d	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _pointer$220361[ebp]
  00ca3	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 270  : 					Token=WzMemScript.GetToken();

  00ca6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00cac	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00cb1	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 271  : 					pointer->OptionIndex[1]=WzMemScript.GetNumber();

  00cb7	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00cbd	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00cc2	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _pointer$220361[ebp]
  00cc8	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 272  : 					Token=WzMemScript.GetToken();

  00ccb	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00cd1	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00cd6	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 273  : 					pointer->ChaosMixLevel[0]=WzMemScript.GetNumber();

  00cdc	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ce2	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00ce7	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _pointer$220361[ebp]
  00ced	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 274  : 					Token=WzMemScript.GetToken();

  00cf0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00cf6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00cfb	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 275  : 					pointer->ChaosMixLevel[1]=WzMemScript.GetNumber();

  00d01	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d07	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00d0c	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _pointer$220361[ebp]
  00d12	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 276  : 
; 277  : 					pointer->IsLoad=TRUE;

  00d15	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _pointer$220361[ebp]
  00d1b	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN1@LoadTypeIn@2:

; 278  : 				}
; 279  : 			}

  00d21	e9 dd fe ff ff	 jmp	 $LN4@LoadTypeIn@2
$LN5@LoadTypeIn@2:

; 280  : 		}
; 281  : 		
; 282  : 	}

  00d26	e9 8e fe ff ff	 jmp	 $LN8@LoadTypeIn@2
$LN7@LoadTypeIn@2:

; 283  : 
; 284  : 	return 1;

  00d2b	c7 85 10 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T220678[ebp], 1
  00d35	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00d3c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d42	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  00d47	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR $T220678[ebp]

; 285  : }

  00d4d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00d50	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00d57	59		 pop	 ecx
  00d58	5f		 pop	 edi
  00d59	5e		 pop	 esi
  00d5a	5b		 pop	 ebx
  00d5b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00d5e	33 cd		 xor	 ecx, ebp
  00d60	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00d65	8b e5		 mov	 esp, ebp
  00d67	5d		 pop	 ebp
  00d68	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z$0:
  00000	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 0c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-244]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z ENDP		; CSetItemOption::LoadTypeInfo
PUBLIC	__$ArrayPad$
PUBLIC	?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z	; CSetItemOption::LoadOptionInfo
xdata$x	SEGMENT
__unwindtable$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z$0
__ehfuncinfo$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T220689 = -236						; size = 4
_p$220382 = -168					; size = 4
_number$220379 = -164					; size = 4
_Token$ = -160						; size = 4
_i$ = -156						; size = 4
_WzMemScript$ = -152					; size = 132
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z PROC		; CSetItemOption::LoadOptionInfo
; _this$ = ecx

; 289  : {

  00d70	55		 push	 ebp
  00d71	8b ec		 mov	 ebp, esp
  00d73	6a ff		 push	 -1
  00d75	68 00 00 00 00	 push	 __ehhandler$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z
  00d7a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00d80	50		 push	 eax
  00d81	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00d87	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00d8c	33 c5		 xor	 eax, ebp
  00d8e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00d91	53		 push	 ebx
  00d92	56		 push	 esi
  00d93	57		 push	 edi
  00d94	50		 push	 eax
  00d95	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00d98	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00d9e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 290  : 	CWzMemScript WzMemScript;

  00da1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00da7	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript
  00dac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  : 	int i;
; 292  : 	int Token;
; 293  : 	
; 294  : 	WzMemScript.SetBuffer(Buffer, iSize);

  00db3	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00db6	50		 push	 eax
  00db7	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  00dba	51		 push	 ecx
  00dbb	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00dc1	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 295  : 
; 296  : 	memset(&this->m_SetItemOptionInfo, 0, sizeof(this->m_SetItemOptionInfo));

  00dc6	68 80 84 00 00	 push	 33920			; 00008480H
  00dcb	6a 00		 push	 0
  00dcd	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00dd0	05 04 80 02 00	 add	 eax, 163844		; 00028004H
  00dd5	50		 push	 eax
  00dd6	e8 00 00 00 00	 call	 _memset
  00ddb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 297  : 
; 298  : 	for ( i=0;i<MAX_SETITEM_OPTION;i++)

  00dde	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00de8	eb 0f		 jmp	 SHORT $LN14@LoadOption@2
$LN13@LoadOption@2:
  00dea	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00df0	83 c0 01	 add	 eax, 1
  00df3	89 85 64 ff ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN14@LoadOption@2:
  00df9	83 bd 64 ff ff
	ff 50		 cmp	 DWORD PTR _i$[ebp], 80	; 00000050H
  00e00	7d 6e		 jge	 SHORT $LN11@LoadOption@2

; 299  : 	{
; 300  : 		memset(&this->m_SetItemOptionInfo[i].SetOptionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetOptionTable) );

  00e02	6a 30		 push	 48			; 00000030H
  00e04	6a ff		 push	 -1
  00e06	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00e0c	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  00e12	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00e15	8d 94 01 0c 81
	02 00		 lea	 edx, DWORD PTR [ecx+eax+164108]
  00e1c	52		 push	 edx
  00e1d	e8 00 00 00 00	 call	 _memset
  00e22	83 c4 0c	 add	 esp, 12			; 0000000cH

; 301  : 		memset(&this->m_SetItemOptionInfo[i].SetExPOptionTable, -1, sizeof(this->m_SetItemOptionInfo[0].SetExPOptionTable) );

  00e25	6a 08		 push	 8
  00e27	6a ff		 push	 -1
  00e29	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00e2f	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  00e35	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00e38	8d 94 01 6c 81
	02 00		 lea	 edx, DWORD PTR [ecx+eax+164204]
  00e3f	52		 push	 edx
  00e40	e8 00 00 00 00	 call	 _memset
  00e45	83 c4 0c	 add	 esp, 12			; 0000000cH

; 302  : 		memset(&this->m_SetItemOptionInfo[i].SetFullOtionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetFullOtionTable) );

  00e48	6a 14		 push	 20			; 00000014H
  00e4a	6a ff		 push	 -1
  00e4c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00e52	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  00e58	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00e5b	8d 94 01 7c 81
	02 00		 lea	 edx, DWORD PTR [ecx+eax+164220]
  00e62	52		 push	 edx
  00e63	e8 00 00 00 00	 call	 _memset
  00e68	83 c4 0c	 add	 esp, 12			; 0000000cH

; 303  : 	}

  00e6b	e9 7a ff ff ff	 jmp	 $LN13@LoadOption@2
$LN11@LoadOption@2:

; 304  : 
; 305  : 	while ( true )

  00e70	b8 01 00 00 00	 mov	 eax, 1
  00e75	85 c0		 test	 eax, eax
  00e77	0f 84 7a 05 00
	00		 je	 $LN10@LoadOption@2

; 306  : 	{
; 307  : 		Token=WzMemScript.GetToken();

  00e7d	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e83	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e88	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 308  : 		int number=WzMemScript.GetNumber();

  00e8e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e94	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00e99	89 85 5c ff ff
	ff		 mov	 DWORD PTR _number$220379[ebp], eax

; 309  : 		
; 310  : 		if (Token==0 && strcmp("end", WzMemScript.GetString()) == 0)

  00e9f	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _Token$[ebp], 0
  00ea6	75 27		 jne	 SHORT $LN9@LoadOption@2
  00ea8	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00eae	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  00eb3	50		 push	 eax
  00eb4	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00eb9	e8 00 00 00 00	 call	 _strcmp
  00ebe	83 c4 08	 add	 esp, 8
  00ec1	85 c0		 test	 eax, eax
  00ec3	75 0a		 jne	 SHORT $LN9@LoadOption@2

; 311  : 		{
; 312  : 			break;

  00ec5	e9 2d 05 00 00	 jmp	 $LN10@LoadOption@2

; 313  : 		}
; 314  : 		else

  00eca	e9 23 05 00 00	 jmp	 $LN8@LoadOption@2
$LN9@LoadOption@2:

; 315  : 		{
; 316  : 			LPSETITEM_OPTIONINFO p;
; 317  : 			p=&this->m_SetItemOptionInfo[number];

  00ecf	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _number$220379[ebp]
  00ed5	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  00edb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00ede	8d 94 01 04 80
	02 00		 lea	 edx, DWORD PTR [ecx+eax+163844]
  00ee5	89 95 58 ff ff
	ff		 mov	 DWORD PTR _p$220382[ebp], edx

; 318  : 
; 319  : 			Token=WzMemScript.GetToken();

  00eeb	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ef1	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00ef6	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 320  : 			strcpy(&p->Name[0], WzMemScript.GetString());

  00efc	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f02	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  00f07	50		 push	 eax
  00f08	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p$220382[ebp]
  00f0e	83 c0 04	 add	 eax, 4
  00f11	50		 push	 eax
  00f12	e8 00 00 00 00	 call	 _strcpy
  00f17	83 c4 08	 add	 esp, 8

; 321  : 
; 322  : 			for (i=0;i<OPTION_TABLE_SIZE;i++)

  00f1a	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00f24	eb 0f		 jmp	 SHORT $LN7@LoadOption@2
$LN6@LoadOption@2:
  00f26	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00f2c	83 c0 01	 add	 eax, 1
  00f2f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN7@LoadOption@2:
  00f35	83 bd 64 ff ff
	ff 06		 cmp	 DWORD PTR _i$[ebp], 6
  00f3c	0f 8d 08 01 00
	00		 jge	 $LN5@LoadOption@2

; 323  : 			{
; 324  : 				Token=WzMemScript.GetToken();

  00f42	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f48	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f4d	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 325  : 				p->SetOptionTable[i][0] = WzMemScript.GetNumber();

  00f53	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f59	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f5e	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00f64	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _p$220382[ebp]
  00f6a	89 84 ca 08 01
	00 00		 mov	 DWORD PTR [edx+ecx*8+264], eax

; 326  : 				Token=WzMemScript.GetToken();

  00f71	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f77	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f7c	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 327  : 				p->SetOptionTableValue[i][0] =WzMemScript.GetNumber();

  00f82	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f88	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f8d	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00f93	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _p$220382[ebp]
  00f99	89 84 ca 38 01
	00 00		 mov	 DWORD PTR [edx+ecx*8+312], eax

; 328  : 
; 329  : 				Token=WzMemScript.GetToken();

  00fa0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fa6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00fab	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 330  : 				p->SetOptionTable[i][1] = WzMemScript.GetNumber();

  00fb1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fb7	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00fbc	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00fc2	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _p$220382[ebp]
  00fc8	89 84 ca 0c 01
	00 00		 mov	 DWORD PTR [edx+ecx*8+268], eax

; 331  : 				Token=WzMemScript.GetToken();

  00fcf	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fd5	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00fda	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 332  : 				p->SetOptionTableValue[i][1] =WzMemScript.GetNumber();

  00fe0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fe6	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00feb	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00ff1	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _p$220382[ebp]
  00ff7	89 84 ca 3c 01
	00 00		 mov	 DWORD PTR [edx+ecx*8+316], eax

; 333  : 
; 334  : 				if ( (p->SetOptionTable[i][0] != -1) || (p->SetOptionTable[i][1] != -1) )

  00ffe	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  01004	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  0100a	83 bc c1 08 01
	00 00 ff	 cmp	 DWORD PTR [ecx+eax*8+264], -1
  01012	75 16		 jne	 SHORT $LN3@LoadOption@2
  01014	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0101a	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01020	83 bc c1 0c 01
	00 00 ff	 cmp	 DWORD PTR [ecx+eax*8+268], -1
  01028	74 1b		 je	 SHORT $LN4@LoadOption@2
$LN3@LoadOption@2:

; 335  : 				{
; 336  : 					p->SetOptionCount++;

  0102a	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p$220382[ebp]
  01030	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  01036	83 c1 01	 add	 ecx, 1
  01039	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _p$220382[ebp]
  0103f	89 8a 04 01 00
	00		 mov	 DWORD PTR [edx+260], ecx
$LN4@LoadOption@2:

; 337  : 				}
; 338  : 			}

  01045	e9 dc fe ff ff	 jmp	 $LN6@LoadOption@2
$LN5@LoadOption@2:

; 339  : 			
; 340  : 			// Special Set Item Options
; 341  : 			Token=WzMemScript.GetToken();

  0104a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01050	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01055	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 342  : 			p->SetExPOptionTable[0]  = WzMemScript.GetNumber();

  0105b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01061	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01066	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  0106c	89 81 68 01 00
	00		 mov	 DWORD PTR [ecx+360], eax

; 343  : 			Token=WzMemScript.GetToken();

  01072	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01078	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0107d	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 344  : 			p->SetExPOptionTableValue[0] = WzMemScript.GetNumber();

  01083	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01089	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0108e	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01094	89 81 70 01 00
	00		 mov	 DWORD PTR [ecx+368], eax

; 345  : 
; 346  : 			if ( p->SetExPOptionTable[0] != -1)

  0109a	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p$220382[ebp]
  010a0	83 b8 68 01 00
	00 ff		 cmp	 DWORD PTR [eax+360], -1
  010a7	74 1b		 je	 SHORT $LN2@LoadOption@2

; 347  : 			{
; 348  : 				p->SetOptionCount ++;

  010a9	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p$220382[ebp]
  010af	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  010b5	83 c1 01	 add	 ecx, 1
  010b8	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _p$220382[ebp]
  010be	89 8a 04 01 00
	00		 mov	 DWORD PTR [edx+260], ecx
$LN2@LoadOption@2:

; 349  : 			}
; 350  : 
; 351  : 			Token=WzMemScript.GetToken();

  010c4	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010ca	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  010cf	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 352  : 			p->SetExPOptionTable[1]  = WzMemScript.GetNumber();

  010d5	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010db	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  010e0	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  010e6	89 81 6c 01 00
	00		 mov	 DWORD PTR [ecx+364], eax

; 353  : 			Token=WzMemScript.GetToken();

  010ec	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010f2	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  010f7	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 354  : 			p->SetExPOptionTableValue[1] = WzMemScript.GetNumber();

  010fd	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01103	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01108	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  0110e	89 81 74 01 00
	00		 mov	 DWORD PTR [ecx+372], eax

; 355  : 
; 356  : 			if ( p->SetExPOptionTable[1] != -1)

  01114	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p$220382[ebp]
  0111a	83 b8 6c 01 00
	00 ff		 cmp	 DWORD PTR [eax+364], -1
  01121	74 1b		 je	 SHORT $LN1@LoadOption@2

; 357  : 			{
; 358  : 				p->SetOptionCount ++;

  01123	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p$220382[ebp]
  01129	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  0112f	83 c1 01	 add	 ecx, 1
  01132	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _p$220382[ebp]
  01138	89 8a 04 01 00
	00		 mov	 DWORD PTR [edx+260], ecx
$LN1@LoadOption@2:

; 359  : 			}
; 360  : 			
; 361  : 			// Full Type Set Item
; 362  : 			Token=WzMemScript.GetToken();

  0113e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01144	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01149	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 363  : 			p->SetFullOtionTable[0]=WzMemScript.GetNumber();

  0114f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01155	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0115a	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01160	89 81 78 01 00
	00		 mov	 DWORD PTR [ecx+376], eax

; 364  : 			Token=WzMemScript.GetToken();

  01166	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0116c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01171	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 365  : 			p->SetFullOtionTableValue[0]=WzMemScript.GetNumber();

  01177	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0117d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01182	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01188	89 81 8c 01 00
	00		 mov	 DWORD PTR [ecx+396], eax

; 366  : 
; 367  : 			Token=WzMemScript.GetToken();

  0118e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01194	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01199	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 368  : 			p->SetFullOtionTable[1]=WzMemScript.GetNumber();

  0119f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  011a5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  011aa	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  011b0	89 81 7c 01 00
	00		 mov	 DWORD PTR [ecx+380], eax

; 369  : 			Token=WzMemScript.GetToken();

  011b6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  011bc	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  011c1	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 370  : 			p->SetFullOtionTableValue[1]=WzMemScript.GetNumber();

  011c7	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  011cd	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  011d2	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  011d8	89 81 90 01 00
	00		 mov	 DWORD PTR [ecx+400], eax

; 371  : 
; 372  : 			Token=WzMemScript.GetToken();

  011de	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  011e4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  011e9	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 373  : 			p->SetFullOtionTable[2]=WzMemScript.GetNumber();

  011ef	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  011f5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  011fa	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01200	89 81 80 01 00
	00		 mov	 DWORD PTR [ecx+384], eax

; 374  : 			Token=WzMemScript.GetToken();

  01206	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0120c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01211	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 375  : 			p->SetFullOtionTableValue[2]=WzMemScript.GetNumber();

  01217	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0121d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01222	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01228	89 81 94 01 00
	00		 mov	 DWORD PTR [ecx+404], eax

; 376  : 
; 377  : 			Token=WzMemScript.GetToken();

  0122e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01234	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01239	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 378  : 			p->SetFullOtionTable[3]=WzMemScript.GetNumber();

  0123f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01245	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0124a	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01250	89 81 84 01 00
	00		 mov	 DWORD PTR [ecx+388], eax

; 379  : 			Token=WzMemScript.GetToken();

  01256	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0125c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01261	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 380  : 			p->SetFullOtionTableValue[3]=WzMemScript.GetNumber();

  01267	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0126d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01272	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01278	89 81 98 01 00
	00		 mov	 DWORD PTR [ecx+408], eax

; 381  : 
; 382  : 			Token=WzMemScript.GetToken();

  0127e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01284	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01289	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 383  : 			p->SetFullOtionTable[4]=WzMemScript.GetNumber();

  0128f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01295	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0129a	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  012a0	89 81 88 01 00
	00		 mov	 DWORD PTR [ecx+392], eax

; 384  : 			Token=WzMemScript.GetToken();

  012a6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  012ac	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  012b1	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 385  : 			p->SetFullOtionTableValue[4]=WzMemScript.GetNumber();

  012b7	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  012bd	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  012c2	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  012c8	89 81 9c 01 00
	00		 mov	 DWORD PTR [ecx+412], eax

; 386  : 
; 387  : 			// Save Character Class Disponibility
; 388  : 			Token=WzMemScript.GetToken();

  012ce	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  012d4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  012d9	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 389  : 			p->RequireClass[CLASS_WIZARD]=WzMemScript.GetNumber();

  012df	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  012e5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  012ea	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  012f0	88 81 a0 01 00
	00		 mov	 BYTE PTR [ecx+416], al

; 390  : 
; 391  : 			Token=WzMemScript.GetToken();

  012f6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  012fc	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01301	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 392  : 			p->RequireClass[CLASS_KNIGHT]=WzMemScript.GetNumber();

  01307	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0130d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01312	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01318	88 81 a1 01 00
	00		 mov	 BYTE PTR [ecx+417], al

; 393  : 
; 394  : 			Token=WzMemScript.GetToken();

  0131e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01324	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01329	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 395  : 			p->RequireClass[CLASS_ELF]=WzMemScript.GetNumber();

  0132f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01335	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0133a	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01340	88 81 a2 01 00
	00		 mov	 BYTE PTR [ecx+418], al

; 396  : 
; 397  : 			Token=WzMemScript.GetToken();

  01346	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0134c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01351	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 398  : 			p->RequireClass[CLASS_MAGUMSA]=WzMemScript.GetNumber();

  01357	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0135d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01362	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01368	88 81 a3 01 00
	00		 mov	 BYTE PTR [ecx+419], al

; 399  : 
; 400  : 			Token=WzMemScript.GetToken();

  0136e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01374	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01379	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 401  : 			p->RequireClass[CLASS_DARKLORD]=WzMemScript.GetNumber();

  0137f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01385	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0138a	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  01390	88 81 a4 01 00
	00		 mov	 BYTE PTR [ecx+420], al

; 402  : 
; 403  : 			Token=WzMemScript.GetToken();

  01396	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0139c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  013a1	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 404  : 			p->RequireClass[CLASS_SUMMONER]=WzMemScript.GetNumber();

  013a7	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  013ad	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  013b2	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  013b8	88 81 a5 01 00
	00		 mov	 BYTE PTR [ecx+421], al

; 405  : 
; 406  : 			Token=WzMemScript.GetToken();

  013be	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  013c4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  013c9	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 407  : 			p->RequireClass[CLASS_MONK]=WzMemScript.GetNumber();

  013cf	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  013d5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  013da	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p$220382[ebp]
  013e0	88 81 a6 01 00
	00		 mov	 BYTE PTR [ecx+422], al

; 408  : 
; 409  : 			// Active SetItem
; 410  : 			p->IsLoad=TRUE;			

  013e6	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _p$220382[ebp]
  013ec	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN8@LoadOption@2:

; 411  : 		}
; 412  : 	}

  013f2	e9 79 fa ff ff	 jmp	 $LN11@LoadOption@2
$LN10@LoadOption@2:

; 413  : 
; 414  : 	return 1;

  013f7	c7 85 14 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T220689[ebp], 1
  01401	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01408	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0140e	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  01413	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T220689[ebp]

; 415  : }

  01419	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0141c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01423	59		 pop	 ecx
  01424	5f		 pop	 edi
  01425	5e		 pop	 esi
  01426	5b		 pop	 ebx
  01427	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0142a	33 cd		 xor	 ecx, ebp
  0142c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01431	8b e5		 mov	 esp, ebp
  01433	5d		 pop	 ebp
  01434	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z$0:
  00033	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00039	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z:
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 8a 10 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-240]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z ENDP		; CSetItemOption::LoadOptionInfo
PUBLIC	??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@ ; `string'
PUBLIC	?IsSetItem@CSetItemOption@@QAEHH@Z		; CSetItemOption::IsSetItem
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
;	COMDAT ??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@
CONST	SEGMENT
??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@ DB 'IsSetIte'
	DB	'm Check error: (itemnum:%d)', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_itemnum$ = 8						; size = 4
?IsSetItem@CSetItemOption@@QAEHH@Z PROC			; CSetItemOption::IsSetItem
; _this$ = ecx

; 418  : {

  01440	55		 push	 ebp
  01441	8b ec		 mov	 ebp, esp
  01443	83 ec 44	 sub	 esp, 68			; 00000044H
  01446	53		 push	 ebx
  01447	56		 push	 esi
  01448	57		 push	 edi
  01449	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 419  : 	if (itemnum<0 || itemnum > MAX_ITEMS-1)

  0144c	83 7d 08 00	 cmp	 DWORD PTR _itemnum$[ebp], 0
  01450	7c 09		 jl	 SHORT $LN1@IsSetItem
  01452	81 7d 08 ff 1f
	00 00		 cmp	 DWORD PTR _itemnum$[ebp], 8191 ; 00001fffH
  01459	7e 16		 jle	 SHORT $LN2@IsSetItem
$LN1@IsSetItem:

; 420  : 	{
; 421  : 		LogAdd("IsSetItem Check error: (itemnum:%d)", itemnum);

  0145b	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  0145e	50		 push	 eax
  0145f	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@
  01464	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0146a	83 c4 08	 add	 esp, 8

; 422  : 		return 0;

  0146d	33 c0		 xor	 eax, eax
  0146f	eb 0d		 jmp	 SHORT $LN3@IsSetItem
$LN2@IsSetItem:

; 423  : 	}
; 424  : 	return this->m_SetItemTypeInfo[itemnum].IsLoad ;

  01471	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01474	6b c0 14	 imul	 eax, 20			; 00000014H
  01477	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0147a	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
$LN3@IsSetItem:

; 425  : }

  0147e	5f		 pop	 edi
  0147f	5e		 pop	 esi
  01480	5b		 pop	 ebx
  01481	8b e5		 mov	 esp, ebp
  01483	5d		 pop	 ebp
  01484	c2 04 00	 ret	 4
?IsSetItem@CSetItemOption@@QAEHH@Z ENDP			; CSetItemOption::IsSetItem
_TEXT	ENDS
PUBLIC	??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@ ; `string'
PUBLIC	??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@ ; `string'
PUBLIC	?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z	; CSetItemOption::GetOptionTableIndex
;	COMDAT ??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@
CONST	SEGMENT
??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@ DB 'GetOptionTable'
	DB	'Index setoption Check error: (itemnum:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@
CONST	SEGMENT
??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@ DB 'GetOptionTabl'
	DB	'eIndex Check error: (itemnum:%d)', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_itemnum$ = 8						; size = 4
_setoption$ = 12					; size = 4
?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z PROC	; CSetItemOption::GetOptionTableIndex
; _this$ = ecx

; 430  : {

  01490	55		 push	 ebp
  01491	8b ec		 mov	 ebp, esp
  01493	83 ec 44	 sub	 esp, 68			; 00000044H
  01496	53		 push	 ebx
  01497	56		 push	 esi
  01498	57		 push	 edi
  01499	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 431  : 	if (itemnum<0 || itemnum > MAX_ITEMS-1)

  0149c	83 7d 08 00	 cmp	 DWORD PTR _itemnum$[ebp], 0
  014a0	7c 09		 jl	 SHORT $LN3@GetOptionT
  014a2	81 7d 08 ff 1f
	00 00		 cmp	 DWORD PTR _itemnum$[ebp], 8191 ; 00001fffH
  014a9	7e 17		 jle	 SHORT $LN4@GetOptionT
$LN3@GetOptionT:

; 432  : 	{
; 433  : 		LogAdd("GetOptionTableIndex Check error: (itemnum:%d)", itemnum);

  014ab	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  014ae	50		 push	 eax
  014af	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@
  014b4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  014ba	83 c4 08	 add	 esp, 8

; 434  : 		return -1;

  014bd	83 c8 ff	 or	 eax, -1
  014c0	eb 4b		 jmp	 SHORT $LN5@GetOptionT
$LN4@GetOptionT:

; 435  : 	}
; 436  : 
; 437  : 	if (setoption != 1 && setoption != 2)

  014c2	83 7d 0c 01	 cmp	 DWORD PTR _setoption$[ebp], 1
  014c6	74 1d		 je	 SHORT $LN2@GetOptionT
  014c8	83 7d 0c 02	 cmp	 DWORD PTR _setoption$[ebp], 2
  014cc	74 17		 je	 SHORT $LN2@GetOptionT

; 438  : 	{
; 439  : 		LogAdd("GetOptionTableIndex setoption Check error: (itemnum:%d)", itemnum);

  014ce	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  014d1	50		 push	 eax
  014d2	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@
  014d7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  014dd	83 c4 08	 add	 esp, 8

; 440  : 		return -1;

  014e0	83 c8 ff	 or	 eax, -1
  014e3	eb 28		 jmp	 SHORT $LN5@GetOptionT
$LN2@GetOptionT:

; 441  : 	}
; 442  : 
; 443  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE)

  014e5	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  014e8	6b c0 14	 imul	 eax, 20			; 00000014H
  014eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014ee	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  014f3	75 05		 jne	 SHORT $LN1@GetOptionT

; 444  : 	{
; 445  : 		return -1;

  014f5	83 c8 ff	 or	 eax, -1
  014f8	eb 13		 jmp	 SHORT $LN5@GetOptionT
$LN1@GetOptionT:

; 446  : 	}
; 447  : 
; 448  : 	return this->m_SetItemTypeInfo[itemnum].OptionIndex[setoption-1];

  014fa	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  014fd	6b c0 14	 imul	 eax, 20			; 00000014H
  01500	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01503	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  01507	8b 45 0c	 mov	 eax, DWORD PTR _setoption$[ebp]
  0150a	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
$LN5@GetOptionT:

; 449  : }

  0150d	5f		 pop	 edi
  0150e	5e		 pop	 esi
  0150f	5b		 pop	 ebx
  01510	8b e5		 mov	 esp, ebp
  01512	5d		 pop	 ebp
  01513	c2 08 00	 ret	 8
?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z ENDP	; CSetItemOption::GetOptionTableIndex
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@ ; `string'
PUBLIC	?GetSetOptionName@CSetItemOption@@QAEPADH@Z	; CSetItemOption::GetSetOptionName
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
CONST	SEGMENT
??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@ DB 'GetSetOpt'
	DB	'ionName Check error: (itemnum:%d)', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_optionindex$ = 8					; size = 4
?GetSetOptionName@CSetItemOption@@QAEPADH@Z PROC	; CSetItemOption::GetSetOptionName
; _this$ = ecx

; 454  : {

  01520	55		 push	 ebp
  01521	8b ec		 mov	 ebp, esp
  01523	83 ec 44	 sub	 esp, 68			; 00000044H
  01526	53		 push	 ebx
  01527	56		 push	 esi
  01528	57		 push	 edi
  01529	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 455  : 	if ( optionindex < 0 || optionindex > MAX_SETITEM_OPTION-1)

  0152c	83 7d 08 00	 cmp	 DWORD PTR _optionindex$[ebp], 0
  01530	7c 06		 jl	 SHORT $LN2@GetSetOpti
  01532	83 7d 08 4f	 cmp	 DWORD PTR _optionindex$[ebp], 79 ; 0000004fH
  01536	7e 19		 jle	 SHORT $LN3@GetSetOpti
$LN2@GetSetOpti:

; 456  : 	{
; 457  : 		LogAdd("GetSetOptionName Check error: (itemnum:%d)", optionindex);

  01538	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  0153b	50		 push	 eax
  0153c	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
  01541	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01547	83 c4 08	 add	 esp, 8

; 458  : 		return "";

  0154a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0154f	eb 30		 jmp	 SHORT $LN4@GetSetOpti
$LN3@GetSetOpti:

; 459  : 	}
; 460  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad   ==0)

  01551	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01554	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0155a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0155d	83 bc 01 04 80
	02 00 00	 cmp	 DWORD PTR [ecx+eax+163844], 0
  01565	75 07		 jne	 SHORT $LN1@GetSetOpti

; 461  : 	{
; 462  : 		return "";

  01567	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0156c	eb 13		 jmp	 SHORT $LN4@GetSetOpti
$LN1@GetSetOpti:

; 463  : 	}
; 464  : 	return &this->m_SetItemOptionInfo[optionindex].Name[0];

  0156e	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01571	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01577	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0157a	8d 84 01 08 80
	02 00		 lea	 eax, DWORD PTR [ecx+eax+163848]
$LN4@GetSetOpti:

; 465  : }

  01581	5f		 pop	 edi
  01582	5e		 pop	 esi
  01583	5b		 pop	 ebx
  01584	8b e5		 mov	 esp, ebp
  01586	5d		 pop	 ebp
  01587	c2 04 00	 ret	 4
?GetSetOptionName@CSetItemOption@@QAEPADH@Z ENDP	; CSetItemOption::GetSetOptionName
_TEXT	ENDS
PUBLIC	?GetSetOptionName@CSetItemOption@@QAEPADHH@Z	; CSetItemOption::GetSetOptionName
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_optionindex$ = -8					; size = 4
_this$ = -4						; size = 4
_itemnum$ = 8						; size = 4
_settype$ = 12						; size = 4
?GetSetOptionName@CSetItemOption@@QAEPADHH@Z PROC	; CSetItemOption::GetSetOptionName
; _this$ = ecx

; 473  : {

  01590	55		 push	 ebp
  01591	8b ec		 mov	 ebp, esp
  01593	83 ec 48	 sub	 esp, 72			; 00000048H
  01596	53		 push	 ebx
  01597	56		 push	 esi
  01598	57		 push	 edi
  01599	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 474  : 	int optionindex;
; 475  : 
; 476  : 	if (itemnum<0 || itemnum > MAX_ITEMS-1)

  0159c	83 7d 08 00	 cmp	 DWORD PTR _itemnum$[ebp], 0
  015a0	7c 09		 jl	 SHORT $LN5@GetSetOpti@2
  015a2	81 7d 08 ff 1f
	00 00		 cmp	 DWORD PTR _itemnum$[ebp], 8191 ; 00001fffH
  015a9	7e 1c		 jle	 SHORT $LN6@GetSetOpti@2
$LN5@GetSetOpti@2:

; 477  : 	{
; 478  : 		LogAdd("GetSetOptionName Check error: (itemnum:%d)", itemnum);

  015ab	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  015ae	50		 push	 eax
  015af	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
  015b4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  015ba	83 c4 08	 add	 esp, 8

; 479  : 		return "";

  015bd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  015c2	e9 82 00 00 00	 jmp	 $LN7@GetSetOpti@2
$LN6@GetSetOpti@2:

; 480  : 	}
; 481  : 
; 482  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE)

  015c7	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  015ca	6b c0 14	 imul	 eax, 20			; 00000014H
  015cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015d0	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  015d5	75 07		 jne	 SHORT $LN4@GetSetOpti@2

; 483  : 	{
; 484  : 		return "";

  015d7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  015dc	eb 6b		 jmp	 SHORT $LN7@GetSetOpti@2
$LN4@GetSetOpti@2:

; 485  : 	}
; 486  : 	
; 487  : 	optionindex= this->m_SetItemTypeInfo[itemnum].OptionIndex[settype-1];

  015de	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  015e1	6b c0 14	 imul	 eax, 20			; 00000014H
  015e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015e7	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  015eb	8b 45 0c	 mov	 eax, DWORD PTR _settype$[ebp]
  015ee	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  015f1	89 4d f8	 mov	 DWORD PTR _optionindex$[ebp], ecx

; 488  : 	
; 489  : 	if (optionindex<0 || optionindex > MAX_SETITEM_OPTION-1)

  015f4	83 7d f8 00	 cmp	 DWORD PTR _optionindex$[ebp], 0
  015f8	7c 06		 jl	 SHORT $LN2@GetSetOpti@2
  015fa	83 7d f8 4f	 cmp	 DWORD PTR _optionindex$[ebp], 79 ; 0000004fH
  015fe	7e 19		 jle	 SHORT $LN3@GetSetOpti@2
$LN2@GetSetOpti@2:

; 490  : 	{	
; 491  : 		LogAdd("GetSetOptionName Check error: (itemnum:%d)", optionindex);

  01600	8b 45 f8	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01603	50		 push	 eax
  01604	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
  01609	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0160f	83 c4 08	 add	 esp, 8

; 492  : 		return "";

  01612	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  01617	eb 30		 jmp	 SHORT $LN7@GetSetOpti@2
$LN3@GetSetOpti@2:

; 493  : 	}
; 494  : 
; 495  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad  == 0)

  01619	8b 45 f8	 mov	 eax, DWORD PTR _optionindex$[ebp]
  0161c	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01622	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01625	83 bc 01 04 80
	02 00 00	 cmp	 DWORD PTR [ecx+eax+163844], 0
  0162d	75 07		 jne	 SHORT $LN1@GetSetOpti@2

; 496  : 	{
; 497  : 		return "";

  0162f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  01634	eb 13		 jmp	 SHORT $LN7@GetSetOpti@2
$LN1@GetSetOpti@2:

; 498  : 	}
; 499  : 
; 500  : 	return &this->m_SetItemOptionInfo[optionindex].Name[0];

  01636	8b 45 f8	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01639	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0163f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01642	8d 84 01 08 80
	02 00		 lea	 eax, DWORD PTR [ecx+eax+163848]
$LN7@GetSetOpti@2:

; 501  : }

  01649	5f		 pop	 edi
  0164a	5e		 pop	 esi
  0164b	5b		 pop	 ebx
  0164c	8b e5		 mov	 esp, ebp
  0164e	5d		 pop	 ebp
  0164f	c2 08 00	 ret	 8
?GetSetOptionName@CSetItemOption@@QAEPADHH@Z ENDP	; CSetItemOption::GetSetOptionName
_TEXT	ENDS
PUBLIC	?IsRequireClass@CSetItemOption@@QAEHHHH@Z	; CSetItemOption::IsRequireClass
PUBLIC	??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@ ; `string'
PUBLIC	?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z	; CSetItemOption::GetSetOption
;	COMDAT ??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@
CONST	SEGMENT
??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@ DB 'GetSetOpti'
	DB	'on Check error: (itemnum:%d)', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_isRequireClass$ = -8					; size = 4
_this$ = -4						; size = 4
_optionindex$ = 8					; size = 4
_optablenum$ = 12					; size = 4
_op1$ = 16						; size = 4
_op2$ = 20						; size = 4
_opvalue1$ = 24						; size = 4
_opvalue2$ = 28						; size = 4
_Class$ = 32						; size = 4
_ChangeUp$ = 36						; size = 4
?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z PROC	; CSetItemOption::GetSetOption
; _this$ = ecx

; 505  : {

  01660	55		 push	 ebp
  01661	8b ec		 mov	 ebp, esp
  01663	83 ec 48	 sub	 esp, 72			; 00000048H
  01666	53		 push	 ebx
  01667	56		 push	 esi
  01668	57		 push	 edi
  01669	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 506  : 	opvalue1=0;

  0166c	8b 45 18	 mov	 eax, DWORD PTR _opvalue1$[ebp]
  0166f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 507  : 	opvalue2=0;

  01675	8b 45 1c	 mov	 eax, DWORD PTR _opvalue2$[ebp]
  01678	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 508  : 
; 509  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  0167e	83 7d 08 00	 cmp	 DWORD PTR _optionindex$[ebp], 0
  01682	7c 06		 jl	 SHORT $LN14@GetSetOpti@3
  01684	83 7d 08 4f	 cmp	 DWORD PTR _optionindex$[ebp], 79 ; 0000004fH
  01688	7e 19		 jle	 SHORT $LN15@GetSetOpti@3
$LN14@GetSetOpti@3:

; 510  : 	{
; 511  : 		LogAdd("GetSetOption Check error: (itemnum:%d)", optionindex);

  0168a	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  0168d	50		 push	 eax
  0168e	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@
  01693	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01699	83 c4 08	 add	 esp, 8

; 512  : 		return 0;

  0169c	33 c0		 xor	 eax, eax
  0169e	e9 cf 01 00 00	 jmp	 $LN16@GetSetOpti@3
$LN15@GetSetOpti@3:

; 513  : 	}
; 514  : 
; 515  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad==0)

  016a3	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  016a6	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  016ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016af	83 bc 01 04 80
	02 00 00	 cmp	 DWORD PTR [ecx+eax+163844], 0
  016b7	75 07		 jne	 SHORT $LN13@GetSetOpti@3

; 516  : 	{
; 517  : 		return 0;

  016b9	33 c0		 xor	 eax, eax
  016bb	e9 b2 01 00 00	 jmp	 $LN16@GetSetOpti@3
$LN13@GetSetOpti@3:

; 518  : 	}
; 519  : 
; 520  : 	if (optablenum >= this->m_SetItemOptionInfo[optionindex].SetOptionCount)

  016c0	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  016c3	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  016c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016cc	8b 55 0c	 mov	 edx, DWORD PTR _optablenum$[ebp]
  016cf	3b 94 01 08 81
	02 00		 cmp	 edx, DWORD PTR [ecx+eax+164104]
  016d6	7c 07		 jl	 SHORT $LN12@GetSetOpti@3

; 521  : 	{
; 522  : 		return 0;

  016d8	33 c0		 xor	 eax, eax
  016da	e9 93 01 00 00	 jmp	 $LN16@GetSetOpti@3
$LN12@GetSetOpti@3:

; 523  : 	}
; 524  : 	int isRequireClass;
; 525  : 
; 526  : 	isRequireClass=this->IsRequireClass(optionindex, Class, ChangeUp);

  016df	8b 45 24	 mov	 eax, DWORD PTR _ChangeUp$[ebp]
  016e2	50		 push	 eax
  016e3	8b 4d 20	 mov	 ecx, DWORD PTR _Class$[ebp]
  016e6	51		 push	 ecx
  016e7	8b 55 08	 mov	 edx, DWORD PTR _optionindex$[ebp]
  016ea	52		 push	 edx
  016eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016ee	e8 00 00 00 00	 call	 ?IsRequireClass@CSetItemOption@@QAEHHHH@Z ; CSetItemOption::IsRequireClass
  016f3	89 45 f8	 mov	 DWORD PTR _isRequireClass$[ebp], eax

; 527  : 
; 528  : 	if (optablenum <OPTION_TABLE_SIZE)

  016f6	83 7d 0c 06	 cmp	 DWORD PTR _optablenum$[ebp], 6
  016fa	0f 8d ee 00 00
	00		 jge	 $LN11@GetSetOpti@3

; 529  : 	{
; 530  : 		op1=this->m_SetItemOptionInfo[optionindex].SetOptionTable[optablenum][0];

  01700	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01703	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01709	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0170c	8d 94 01 04 80
	02 00		 lea	 edx, DWORD PTR [ecx+eax+163844]
  01713	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  01716	8b 4d 0c	 mov	 ecx, DWORD PTR _optablenum$[ebp]
  01719	8b 94 ca 08 01
	00 00		 mov	 edx, DWORD PTR [edx+ecx*8+264]
  01720	89 10		 mov	 DWORD PTR [eax], edx

; 531  : 		opvalue1=this->m_SetItemOptionInfo[optionindex].SetOptionTableValue[optablenum][0];

  01722	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01725	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0172b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0172e	8d 94 01 04 80
	02 00		 lea	 edx, DWORD PTR [ecx+eax+163844]
  01735	8b 45 18	 mov	 eax, DWORD PTR _opvalue1$[ebp]
  01738	8b 4d 0c	 mov	 ecx, DWORD PTR _optablenum$[ebp]
  0173b	8b 94 ca 38 01
	00 00		 mov	 edx, DWORD PTR [edx+ecx*8+312]
  01742	89 10		 mov	 DWORD PTR [eax], edx

; 532  : 
; 533  : 		if ( op1 > 183 )

  01744	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  01747	81 38 b7 00 00
	00		 cmp	 DWORD PTR [eax], 183	; 000000b7H
  0174d	7e 0f		 jle	 SHORT $LN10@GetSetOpti@3

; 534  : 		{
; 535  : 			if ( isRequireClass == 0 )

  0174f	83 7d f8 00	 cmp	 DWORD PTR _isRequireClass$[ebp], 0
  01753	75 09		 jne	 SHORT $LN10@GetSetOpti@3

; 536  : 			{
; 537  : 				op1 = -1;

  01755	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  01758	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN10@GetSetOpti@3:

; 538  : 			}
; 539  : 		}
; 540  : 
; 541  : 		if ( op1 != -1 )

  0175e	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  01761	83 38 ff	 cmp	 DWORD PTR [eax], -1
  01764	74 10		 je	 SHORT $LN8@GetSetOpti@3

; 542  : 		{
; 543  : 			op1 += 0xA0;

  01766	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  01769	8b 08		 mov	 ecx, DWORD PTR [eax]
  0176b	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  01771	8b 55 10	 mov	 edx, DWORD PTR _op1$[ebp]
  01774	89 0a		 mov	 DWORD PTR [edx], ecx
$LN8@GetSetOpti@3:

; 544  : 		}
; 545  : 
; 546  : 		op2=this->m_SetItemOptionInfo[optionindex].SetOptionTable[optablenum][1];

  01776	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01779	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0177f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01782	8d 94 01 04 80
	02 00		 lea	 edx, DWORD PTR [ecx+eax+163844]
  01789	8b 45 14	 mov	 eax, DWORD PTR _op2$[ebp]
  0178c	8b 4d 0c	 mov	 ecx, DWORD PTR _optablenum$[ebp]
  0178f	8b 94 ca 0c 01
	00 00		 mov	 edx, DWORD PTR [edx+ecx*8+268]
  01796	89 10		 mov	 DWORD PTR [eax], edx

; 547  : 		opvalue2=this->m_SetItemOptionInfo[optionindex].SetOptionTableValue[optablenum][1];

  01798	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  0179b	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  017a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017a4	8d 94 01 04 80
	02 00		 lea	 edx, DWORD PTR [ecx+eax+163844]
  017ab	8b 45 1c	 mov	 eax, DWORD PTR _opvalue2$[ebp]
  017ae	8b 4d 0c	 mov	 ecx, DWORD PTR _optablenum$[ebp]
  017b1	8b 94 ca 3c 01
	00 00		 mov	 edx, DWORD PTR [edx+ecx*8+316]
  017b8	89 10		 mov	 DWORD PTR [eax], edx

; 548  : 
; 549  : 		if ( op2 > 183 )

  017ba	8b 45 14	 mov	 eax, DWORD PTR _op2$[ebp]
  017bd	81 38 b7 00 00
	00		 cmp	 DWORD PTR [eax], 183	; 000000b7H
  017c3	7e 0f		 jle	 SHORT $LN7@GetSetOpti@3

; 550  : 		{
; 551  : 			if ( isRequireClass == 0 )

  017c5	83 7d f8 00	 cmp	 DWORD PTR _isRequireClass$[ebp], 0
  017c9	75 09		 jne	 SHORT $LN7@GetSetOpti@3

; 552  : 			{
; 553  : 				op2 = -1;

  017cb	8b 45 14	 mov	 eax, DWORD PTR _op2$[ebp]
  017ce	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN7@GetSetOpti@3:

; 554  : 			}
; 555  : 		}
; 556  : 
; 557  : 		if ( op2 != -1 )

  017d4	8b 45 14	 mov	 eax, DWORD PTR _op2$[ebp]
  017d7	83 38 ff	 cmp	 DWORD PTR [eax], -1
  017da	74 10		 je	 SHORT $LN5@GetSetOpti@3

; 558  : 		{
; 559  : 			op2 += 0xA0;

  017dc	8b 45 14	 mov	 eax, DWORD PTR _op2$[ebp]
  017df	8b 08		 mov	 ecx, DWORD PTR [eax]
  017e1	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  017e7	8b 55 14	 mov	 edx, DWORD PTR _op2$[ebp]
  017ea	89 0a		 mov	 DWORD PTR [edx], ecx
$LN5@GetSetOpti@3:

; 560  : 		}
; 561  : 	}
; 562  : 	else

  017ec	eb 7f		 jmp	 SHORT $LN4@GetSetOpti@3
$LN11@GetSetOpti@3:

; 563  : 	{
; 564  : 		op1=this->m_SetItemOptionInfo[optionindex].SetExPOptionTable[optablenum-OPTION_TABLE_SIZE];

  017ee	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  017f1	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  017f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017fa	8d 94 01 04 80
	02 00		 lea	 edx, DWORD PTR [ecx+eax+163844]
  01801	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  01804	8b 4d 0c	 mov	 ecx, DWORD PTR _optablenum$[ebp]
  01807	8b 94 8a 50 01
	00 00		 mov	 edx, DWORD PTR [edx+ecx*4+336]
  0180e	89 10		 mov	 DWORD PTR [eax], edx

; 565  : 		opvalue1=this->m_SetItemOptionInfo[optionindex].SetExPOptionTableValue[optablenum-OPTION_TABLE_SIZE];

  01810	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01813	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01819	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0181c	8d 94 01 04 80
	02 00		 lea	 edx, DWORD PTR [ecx+eax+163844]
  01823	8b 45 18	 mov	 eax, DWORD PTR _opvalue1$[ebp]
  01826	8b 4d 0c	 mov	 ecx, DWORD PTR _optablenum$[ebp]
  01829	8b 94 8a 58 01
	00 00		 mov	 edx, DWORD PTR [edx+ecx*4+344]
  01830	89 10		 mov	 DWORD PTR [eax], edx

; 566  : 
; 567  : 		if ( op1 > 183 )

  01832	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  01835	81 38 b7 00 00
	00		 cmp	 DWORD PTR [eax], 183	; 000000b7H
  0183b	7e 0f		 jle	 SHORT $LN3@GetSetOpti@3

; 568  : 		{
; 569  : 			if ( isRequireClass == 0 )

  0183d	83 7d f8 00	 cmp	 DWORD PTR _isRequireClass$[ebp], 0
  01841	75 09		 jne	 SHORT $LN3@GetSetOpti@3

; 570  : 			{
; 571  : 				op1 = -1;

  01843	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  01846	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN3@GetSetOpti@3:

; 572  : 			}
; 573  : 		}
; 574  : 
; 575  : 		if ( op1 != -1 )

  0184c	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  0184f	83 38 ff	 cmp	 DWORD PTR [eax], -1
  01852	74 10		 je	 SHORT $LN1@GetSetOpti@3

; 576  : 		{
; 577  : 			op1 += 0xA0;

  01854	8b 45 10	 mov	 eax, DWORD PTR _op1$[ebp]
  01857	8b 08		 mov	 ecx, DWORD PTR [eax]
  01859	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  0185f	8b 55 10	 mov	 edx, DWORD PTR _op1$[ebp]
  01862	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@GetSetOpti@3:

; 578  : 		}
; 579  : 
; 580  : 		op2 = -1;

  01864	8b 45 14	 mov	 eax, DWORD PTR _op2$[ebp]
  01867	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN4@GetSetOpti@3:

; 581  : 	}
; 582  : 
; 583  : 	return 1;

  0186d	b8 01 00 00 00	 mov	 eax, 1
$LN16@GetSetOpti@3:

; 584  : }

  01872	5f		 pop	 edi
  01873	5e		 pop	 esi
  01874	5b		 pop	 ebx
  01875	8b e5		 mov	 esp, ebp
  01877	5d		 pop	 ebp
  01878	c2 20 00	 ret	 32			; 00000020H
?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z ENDP	; CSetItemOption::GetSetOption
_TEXT	ENDS
PUBLIC	??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@ ; `string'
PUBLIC	?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z	; CSetItemOption::GetMaxSetOptionCount
;	COMDAT ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
CONST	SEGMENT
??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@ DB 'GetMaxOpti'
	DB	'onCount Check error: (itemnum:%d)', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_optionindex$ = 8					; size = 4
?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z PROC	; CSetItemOption::GetMaxSetOptionCount
; _this$ = ecx

; 588  : {

  01880	55		 push	 ebp
  01881	8b ec		 mov	 ebp, esp
  01883	83 ec 44	 sub	 esp, 68			; 00000044H
  01886	53		 push	 ebx
  01887	56		 push	 esi
  01888	57		 push	 edi
  01889	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 589  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  0188c	83 7d 08 00	 cmp	 DWORD PTR _optionindex$[ebp], 0
  01890	7c 06		 jl	 SHORT $LN2@GetMaxSetO
  01892	83 7d 08 4f	 cmp	 DWORD PTR _optionindex$[ebp], 79 ; 0000004fH
  01896	7e 17		 jle	 SHORT $LN3@GetMaxSetO
$LN2@GetMaxSetO:

; 590  : 	{
; 591  : 		LogAdd("GetMaxOptionCount Check error: (itemnum:%d)", optionindex);

  01898	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  0189b	50		 push	 eax
  0189c	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
  018a1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  018a7	83 c4 08	 add	 esp, 8

; 592  : 		return -1;

  018aa	83 c8 ff	 or	 eax, -1
  018ad	eb 2e		 jmp	 SHORT $LN4@GetMaxSetO
$LN3@GetMaxSetO:

; 593  : 	}
; 594  : 
; 595  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad == 0)

  018af	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  018b2	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  018b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018bb	83 bc 01 04 80
	02 00 00	 cmp	 DWORD PTR [ecx+eax+163844], 0
  018c3	75 05		 jne	 SHORT $LN1@GetMaxSetO

; 596  : 	{
; 597  : 		return -1;

  018c5	83 c8 ff	 or	 eax, -1
  018c8	eb 13		 jmp	 SHORT $LN4@GetMaxSetO
$LN1@GetMaxSetO:

; 598  : 	}
; 599  : 
; 600  : 	return this->m_SetItemOptionInfo[optionindex].SetOptionCount;

  018ca	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  018cd	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  018d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018d6	8b 84 01 08 81
	02 00		 mov	 eax, DWORD PTR [ecx+eax+164104]
$LN4@GetMaxSetO:

; 601  : }

  018dd	5f		 pop	 edi
  018de	5e		 pop	 esi
  018df	5b		 pop	 ebx
  018e0	8b e5		 mov	 esp, ebp
  018e2	5d		 pop	 ebp
  018e3	c2 04 00	 ret	 4
?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z ENDP	; CSetItemOption::GetMaxSetOptionCount
_TEXT	ENDS
PUBLIC	?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z ; CSetItemOption::GetGetFullSetOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_isRequireClass$ = -8					; size = 4
_this$ = -4						; size = 4
_optionindex$ = 8					; size = 4
_op1$ = 12						; size = 4
_op2$ = 16						; size = 4
_op3$ = 20						; size = 4
_op4$ = 24						; size = 4
_op5$ = 28						; size = 4
_opvalue1$ = 32						; size = 4
_opvalue2$ = 36						; size = 4
_opvalue3$ = 40						; size = 4
_opvalue4$ = 44						; size = 4
_opvalue5$ = 48						; size = 4
_Class$ = 52						; size = 4
_ChangeUp$ = 56						; size = 4
?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z PROC ; CSetItemOption::GetGetFullSetOption
; _this$ = ecx

; 604  : {

  018f0	55		 push	 ebp
  018f1	8b ec		 mov	 ebp, esp
  018f3	83 ec 48	 sub	 esp, 72			; 00000048H
  018f6	53		 push	 ebx
  018f7	56		 push	 esi
  018f8	57		 push	 edi
  018f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 605  : 	opvalue1 = 0;

  018fc	8b 45 20	 mov	 eax, DWORD PTR _opvalue1$[ebp]
  018ff	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 606  : 	opvalue2 = 0;

  01905	8b 45 24	 mov	 eax, DWORD PTR _opvalue2$[ebp]
  01908	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 607  : 	opvalue3 = 0;

  0190e	8b 45 28	 mov	 eax, DWORD PTR _opvalue3$[ebp]
  01911	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 608  : 	opvalue4 = 0;

  01917	8b 45 2c	 mov	 eax, DWORD PTR _opvalue4$[ebp]
  0191a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 609  : 	opvalue5 = 0;

  01920	8b 45 30	 mov	 eax, DWORD PTR _opvalue5$[ebp]
  01923	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 610  : 
; 611  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  01929	83 7d 08 00	 cmp	 DWORD PTR _optionindex$[ebp], 0
  0192d	7c 06		 jl	 SHORT $LN17@GetGetFull
  0192f	83 7d 08 4f	 cmp	 DWORD PTR _optionindex$[ebp], 79 ; 0000004fH
  01933	7e 19		 jle	 SHORT $LN18@GetGetFull
$LN17@GetGetFull:

; 612  : 	{
; 613  : 		LogAdd("GetMaxOptionCount Check error: (itemnum:%d)", optionindex);

  01935	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01938	50		 push	 eax
  01939	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
  0193e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01944	83 c4 08	 add	 esp, 8

; 614  : 		return 0;

  01947	33 c0		 xor	 eax, eax
  01949	e9 23 02 00 00	 jmp	 $LN19@GetGetFull
$LN18@GetGetFull:

; 615  : 	}
; 616  : 
; 617  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad == 0)

  0194e	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01951	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01957	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0195a	83 bc 01 04 80
	02 00 00	 cmp	 DWORD PTR [ecx+eax+163844], 0
  01962	75 07		 jne	 SHORT $LN16@GetGetFull

; 618  : 	{
; 619  : 		return 0;

  01964	33 c0		 xor	 eax, eax
  01966	e9 06 02 00 00	 jmp	 $LN19@GetGetFull
$LN16@GetGetFull:

; 620  : 	}
; 621  : 
; 622  : 	BOOL isRequireClass=this->IsRequireClass(optionindex, Class, ChangeUp);

  0196b	8b 45 38	 mov	 eax, DWORD PTR _ChangeUp$[ebp]
  0196e	50		 push	 eax
  0196f	8b 4d 34	 mov	 ecx, DWORD PTR _Class$[ebp]
  01972	51		 push	 ecx
  01973	8b 55 08	 mov	 edx, DWORD PTR _optionindex$[ebp]
  01976	52		 push	 edx
  01977	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0197a	e8 00 00 00 00	 call	 ?IsRequireClass@CSetItemOption@@QAEHHHH@Z ; CSetItemOption::IsRequireClass
  0197f	89 45 f8	 mov	 DWORD PTR _isRequireClass$[ebp], eax

; 623  : 	op1 = this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[0];

  01982	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01985	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0198b	8b 4d 0c	 mov	 ecx, DWORD PTR _op1$[ebp]
  0198e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01991	8b 84 02 7c 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164220]
  01998	89 01		 mov	 DWORD PTR [ecx], eax

; 624  : 	opvalue1 = this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[0];

  0199a	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  0199d	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  019a3	8b 4d 20	 mov	 ecx, DWORD PTR _opvalue1$[ebp]
  019a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  019a9	8b 84 02 90 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164240]
  019b0	89 01		 mov	 DWORD PTR [ecx], eax

; 625  : 
; 626  : 	if ( op1 > 183 )

  019b2	8b 45 0c	 mov	 eax, DWORD PTR _op1$[ebp]
  019b5	81 38 b7 00 00
	00		 cmp	 DWORD PTR [eax], 183	; 000000b7H
  019bb	7e 0f		 jle	 SHORT $LN15@GetGetFull

; 627  : 	{
; 628  : 		if ( isRequireClass == 0 )

  019bd	83 7d f8 00	 cmp	 DWORD PTR _isRequireClass$[ebp], 0
  019c1	75 09		 jne	 SHORT $LN15@GetGetFull

; 629  : 		{
; 630  : 			op1 = -1;

  019c3	8b 45 0c	 mov	 eax, DWORD PTR _op1$[ebp]
  019c6	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN15@GetGetFull:

; 631  : 		}
; 632  : 	}
; 633  : 
; 634  : 	if ( op1 != -1 )

  019cc	8b 45 0c	 mov	 eax, DWORD PTR _op1$[ebp]
  019cf	83 38 ff	 cmp	 DWORD PTR [eax], -1
  019d2	74 10		 je	 SHORT $LN13@GetGetFull

; 635  : 	{
; 636  : 		op1 += 0xA0;

  019d4	8b 45 0c	 mov	 eax, DWORD PTR _op1$[ebp]
  019d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  019d9	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  019df	8b 55 0c	 mov	 edx, DWORD PTR _op1$[ebp]
  019e2	89 0a		 mov	 DWORD PTR [edx], ecx
$LN13@GetGetFull:

; 637  : 	}
; 638  : 
; 639  : 	op2=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[1];

  019e4	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  019e7	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  019ed	8b 4d 10	 mov	 ecx, DWORD PTR _op2$[ebp]
  019f0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  019f3	8b 84 02 80 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164224]
  019fa	89 01		 mov	 DWORD PTR [ecx], eax

; 640  : 	opvalue2=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[1];

  019fc	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  019ff	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01a05	8b 4d 24	 mov	 ecx, DWORD PTR _opvalue2$[ebp]
  01a08	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a0b	8b 84 02 94 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164244]
  01a12	89 01		 mov	 DWORD PTR [ecx], eax

; 641  : 
; 642  : 	if ( op2 > 183 )

  01a14	8b 45 10	 mov	 eax, DWORD PTR _op2$[ebp]
  01a17	81 38 b7 00 00
	00		 cmp	 DWORD PTR [eax], 183	; 000000b7H
  01a1d	7e 0f		 jle	 SHORT $LN12@GetGetFull

; 643  : 	{
; 644  : 		if ( isRequireClass == 0 )

  01a1f	83 7d f8 00	 cmp	 DWORD PTR _isRequireClass$[ebp], 0
  01a23	75 09		 jne	 SHORT $LN12@GetGetFull

; 645  : 		{
; 646  : 			op2 = -1;

  01a25	8b 45 10	 mov	 eax, DWORD PTR _op2$[ebp]
  01a28	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN12@GetGetFull:

; 647  : 		}
; 648  : 	}
; 649  : 
; 650  : 	if ( op2 != -1 )

  01a2e	8b 45 10	 mov	 eax, DWORD PTR _op2$[ebp]
  01a31	83 38 ff	 cmp	 DWORD PTR [eax], -1
  01a34	74 10		 je	 SHORT $LN10@GetGetFull

; 651  : 	{
; 652  : 		op2 += 0xA0;

  01a36	8b 45 10	 mov	 eax, DWORD PTR _op2$[ebp]
  01a39	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a3b	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  01a41	8b 55 10	 mov	 edx, DWORD PTR _op2$[ebp]
  01a44	89 0a		 mov	 DWORD PTR [edx], ecx
$LN10@GetGetFull:

; 653  : 	}
; 654  : 
; 655  : 	op3=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[2];

  01a46	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01a49	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01a4f	8b 4d 14	 mov	 ecx, DWORD PTR _op3$[ebp]
  01a52	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a55	8b 84 02 84 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164228]
  01a5c	89 01		 mov	 DWORD PTR [ecx], eax

; 656  : 	opvalue3=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[2];

  01a5e	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01a61	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01a67	8b 4d 28	 mov	 ecx, DWORD PTR _opvalue3$[ebp]
  01a6a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a6d	8b 84 02 98 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164248]
  01a74	89 01		 mov	 DWORD PTR [ecx], eax

; 657  : 
; 658  : 	if ( op3 > 183 )

  01a76	8b 45 14	 mov	 eax, DWORD PTR _op3$[ebp]
  01a79	81 38 b7 00 00
	00		 cmp	 DWORD PTR [eax], 183	; 000000b7H
  01a7f	7e 0f		 jle	 SHORT $LN9@GetGetFull

; 659  : 	{
; 660  : 		if ( isRequireClass == 0 )

  01a81	83 7d f8 00	 cmp	 DWORD PTR _isRequireClass$[ebp], 0
  01a85	75 09		 jne	 SHORT $LN9@GetGetFull

; 661  : 		{
; 662  : 			op3 = -1;

  01a87	8b 45 14	 mov	 eax, DWORD PTR _op3$[ebp]
  01a8a	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN9@GetGetFull:

; 663  : 		}
; 664  : 	}
; 665  : 
; 666  : 	if ( op3 != -1 )

  01a90	8b 45 14	 mov	 eax, DWORD PTR _op3$[ebp]
  01a93	83 38 ff	 cmp	 DWORD PTR [eax], -1
  01a96	74 10		 je	 SHORT $LN7@GetGetFull

; 667  : 	{
; 668  : 		op3 += 0xA0;

  01a98	8b 45 14	 mov	 eax, DWORD PTR _op3$[ebp]
  01a9b	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a9d	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  01aa3	8b 55 14	 mov	 edx, DWORD PTR _op3$[ebp]
  01aa6	89 0a		 mov	 DWORD PTR [edx], ecx
$LN7@GetGetFull:

; 669  : 	}
; 670  : 
; 671  : 	op4=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[3];

  01aa8	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01aab	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01ab1	8b 4d 18	 mov	 ecx, DWORD PTR _op4$[ebp]
  01ab4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01ab7	8b 84 02 88 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164232]
  01abe	89 01		 mov	 DWORD PTR [ecx], eax

; 672  : 	opvalue4=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[3];

  01ac0	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01ac3	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01ac9	8b 4d 2c	 mov	 ecx, DWORD PTR _opvalue4$[ebp]
  01acc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01acf	8b 84 02 9c 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164252]
  01ad6	89 01		 mov	 DWORD PTR [ecx], eax

; 673  : 
; 674  : 	if ( op4 > 183 )

  01ad8	8b 45 18	 mov	 eax, DWORD PTR _op4$[ebp]
  01adb	81 38 b7 00 00
	00		 cmp	 DWORD PTR [eax], 183	; 000000b7H
  01ae1	7e 0f		 jle	 SHORT $LN6@GetGetFull

; 675  : 	{
; 676  : 		if ( isRequireClass == 0 )

  01ae3	83 7d f8 00	 cmp	 DWORD PTR _isRequireClass$[ebp], 0
  01ae7	75 09		 jne	 SHORT $LN6@GetGetFull

; 677  : 		{
; 678  : 			op4 = -1;

  01ae9	8b 45 18	 mov	 eax, DWORD PTR _op4$[ebp]
  01aec	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN6@GetGetFull:

; 679  : 		}
; 680  : 	}
; 681  : 
; 682  : 	if ( op4 != -1 )

  01af2	8b 45 18	 mov	 eax, DWORD PTR _op4$[ebp]
  01af5	83 38 ff	 cmp	 DWORD PTR [eax], -1
  01af8	74 10		 je	 SHORT $LN4@GetGetFull

; 683  : 	{
; 684  : 		op4 += 0xA0;

  01afa	8b 45 18	 mov	 eax, DWORD PTR _op4$[ebp]
  01afd	8b 08		 mov	 ecx, DWORD PTR [eax]
  01aff	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  01b05	8b 55 18	 mov	 edx, DWORD PTR _op4$[ebp]
  01b08	89 0a		 mov	 DWORD PTR [edx], ecx
$LN4@GetGetFull:

; 685  : 	}
; 686  : 
; 687  : 	op5=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[4];

  01b0a	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01b0d	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01b13	8b 4d 1c	 mov	 ecx, DWORD PTR _op5$[ebp]
  01b16	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b19	8b 84 02 8c 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164236]
  01b20	89 01		 mov	 DWORD PTR [ecx], eax

; 688  : 	opvalue5=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[4];

  01b22	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01b25	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01b2b	8b 4d 30	 mov	 ecx, DWORD PTR _opvalue5$[ebp]
  01b2e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b31	8b 84 02 a0 81
	02 00		 mov	 eax, DWORD PTR [edx+eax+164256]
  01b38	89 01		 mov	 DWORD PTR [ecx], eax

; 689  : 
; 690  : 	if ( op5 > 183 )

  01b3a	8b 45 1c	 mov	 eax, DWORD PTR _op5$[ebp]
  01b3d	81 38 b7 00 00
	00		 cmp	 DWORD PTR [eax], 183	; 000000b7H
  01b43	7e 0f		 jle	 SHORT $LN3@GetGetFull

; 691  : 	{
; 692  : 		if ( isRequireClass == 0 )

  01b45	83 7d f8 00	 cmp	 DWORD PTR _isRequireClass$[ebp], 0
  01b49	75 09		 jne	 SHORT $LN3@GetGetFull

; 693  : 		{
; 694  : 			op5 = -1;

  01b4b	8b 45 1c	 mov	 eax, DWORD PTR _op5$[ebp]
  01b4e	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN3@GetGetFull:

; 695  : 		}
; 696  : 	}
; 697  : 
; 698  : 	if ( op5 != -1 )

  01b54	8b 45 1c	 mov	 eax, DWORD PTR _op5$[ebp]
  01b57	83 38 ff	 cmp	 DWORD PTR [eax], -1
  01b5a	74 10		 je	 SHORT $LN1@GetGetFull

; 699  : 	{
; 700  : 		op5 += 0xA0;

  01b5c	8b 45 1c	 mov	 eax, DWORD PTR _op5$[ebp]
  01b5f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b61	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  01b67	8b 55 1c	 mov	 edx, DWORD PTR _op5$[ebp]
  01b6a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@GetGetFull:

; 701  : 	}
; 702  : 
; 703  : 	return 1;

  01b6c	b8 01 00 00 00	 mov	 eax, 1
$LN19@GetGetFull:

; 704  : }

  01b71	5f		 pop	 edi
  01b72	5e		 pop	 esi
  01b73	5b		 pop	 ebx
  01b74	8b e5		 mov	 esp, ebp
  01b76	5d		 pop	 ebp
  01b77	c2 34 00	 ret	 52			; 00000034H
?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z ENDP ; CSetItemOption::GetGetFullSetOption
; Function compile flags: /Odtp /ZI
_requireclass$ = -8					; size = 4
_this$ = -4						; size = 4
_optionindex$ = 8					; size = 4
_Class$ = 12						; size = 4
_ChangeUP$ = 16						; size = 4
?IsRequireClass@CSetItemOption@@QAEHHHH@Z PROC		; CSetItemOption::IsRequireClass
; _this$ = ecx

; 707  : {

  01b80	55		 push	 ebp
  01b81	8b ec		 mov	 ebp, esp
  01b83	83 ec 48	 sub	 esp, 72			; 00000048H
  01b86	53		 push	 ebx
  01b87	56		 push	 esi
  01b88	57		 push	 edi
  01b89	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 708  : 	int requireclass;
; 709  : 	
; 710  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  01b8c	83 7d 08 00	 cmp	 DWORD PTR _optionindex$[ebp], 0
  01b90	7c 06		 jl	 SHORT $LN7@IsRequireC
  01b92	83 7d 08 4f	 cmp	 DWORD PTR _optionindex$[ebp], 79 ; 0000004fH
  01b96	7e 16		 jle	 SHORT $LN8@IsRequireC
$LN7@IsRequireC:

; 711  : 	{
; 712  : 		LogAdd("GetMaxOptionCount Check error: (itemnum:%d)", optionindex);

  01b98	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01b9b	50		 push	 eax
  01b9c	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
  01ba1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01ba7	83 c4 08	 add	 esp, 8

; 713  : 		return 0;

  01baa	33 c0		 xor	 eax, eax
  01bac	eb 68		 jmp	 SHORT $LN9@IsRequireC
$LN8@IsRequireC:

; 714  : 	}
; 715  : 
; 716  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad == 0)

  01bae	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01bb1	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01bb7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bba	83 bc 01 04 80
	02 00 00	 cmp	 DWORD PTR [ecx+eax+163844], 0
  01bc2	75 04		 jne	 SHORT $LN6@IsRequireC

; 717  : 	{
; 718  : 		return 0;

  01bc4	33 c0		 xor	 eax, eax
  01bc6	eb 4e		 jmp	 SHORT $LN9@IsRequireC
$LN6@IsRequireC:

; 719  : 	}
; 720  : 
; 721  : 	if ( Class <0 || Class > MAX_TYPE_PLAYER-1)

  01bc8	83 7d 0c 00	 cmp	 DWORD PTR _Class$[ebp], 0
  01bcc	7c 06		 jl	 SHORT $LN4@IsRequireC
  01bce	83 7d 0c 06	 cmp	 DWORD PTR _Class$[ebp], 6
  01bd2	7e 04		 jle	 SHORT $LN5@IsRequireC
$LN4@IsRequireC:

; 722  : 	{
; 723  : 		return 0;

  01bd4	33 c0		 xor	 eax, eax
  01bd6	eb 3e		 jmp	 SHORT $LN9@IsRequireC
$LN5@IsRequireC:

; 724  : 	}
; 725  : 
; 726  : 	requireclass= this->m_SetItemOptionInfo[optionindex].RequireClass[Class];

  01bd8	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  01bdb	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  01be1	03 45 0c	 add	 eax, DWORD PTR _Class$[ebp]
  01be4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01be7	0f b6 94 01 a4
	81 02 00	 movzx	 edx, BYTE PTR [ecx+eax+164260]
  01bef	89 55 f8	 mov	 DWORD PTR _requireclass$[ebp], edx

; 727  : 
; 728  : 	if (requireclass == 0)

  01bf2	83 7d f8 00	 cmp	 DWORD PTR _requireclass$[ebp], 0
  01bf6	75 04		 jne	 SHORT $LN3@IsRequireC

; 729  : 	{
; 730  : 		return 0;

  01bf8	33 c0		 xor	 eax, eax
  01bfa	eb 1a		 jmp	 SHORT $LN9@IsRequireC
$LN3@IsRequireC:

; 731  : 	}
; 732  : 
; 733  : 	if (requireclass > 1)

  01bfc	83 7d f8 01	 cmp	 DWORD PTR _requireclass$[ebp], 1
  01c00	7e 0f		 jle	 SHORT $LN2@IsRequireC

; 734  : 	{
; 735  : 		if (requireclass != ChangeUP+1)

  01c02	8b 45 10	 mov	 eax, DWORD PTR _ChangeUP$[ebp]
  01c05	83 c0 01	 add	 eax, 1
  01c08	39 45 f8	 cmp	 DWORD PTR _requireclass$[ebp], eax
  01c0b	74 04		 je	 SHORT $LN2@IsRequireC

; 736  : 		{
; 737  : 			return 0;

  01c0d	33 c0		 xor	 eax, eax
  01c0f	eb 05		 jmp	 SHORT $LN9@IsRequireC
$LN2@IsRequireC:

; 738  : 		}
; 739  : 	}
; 740  : 	return 1;

  01c11	b8 01 00 00 00	 mov	 eax, 1
$LN9@IsRequireC:

; 741  : }

  01c16	5f		 pop	 edi
  01c17	5e		 pop	 esi
  01c18	5b		 pop	 ebx
  01c19	8b e5		 mov	 esp, ebp
  01c1b	5d		 pop	 ebp
  01c1c	c2 0c 00	 ret	 12			; 0000000cH
?IsRequireClass@CSetItemOption@@QAEHHHH@Z ENDP		; CSetItemOption::IsRequireClass
_TEXT	ENDS
PUBLIC	??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@ ; `string'
PUBLIC	?CheckMixContition@CSetItemOption@@QAEHHH@Z	; CSetItemOption::CheckMixContition
;	COMDAT ??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@
CONST	SEGMENT
??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@ DB 'MakeSetOp'
	DB	'tion Check error: (itemnum:%d)', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_itemnum$ = 8						; size = 4
_mixitemlevel$ = 12					; size = 4
?CheckMixContition@CSetItemOption@@QAEHHH@Z PROC	; CSetItemOption::CheckMixContition
; _this$ = ecx

; 746  : {

  01c20	55		 push	 ebp
  01c21	8b ec		 mov	 ebp, esp
  01c23	83 ec 44	 sub	 esp, 68			; 00000044H
  01c26	53		 push	 ebx
  01c27	56		 push	 esi
  01c28	57		 push	 edi
  01c29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 	if (mixitemlevel == -1)

  01c2c	83 7d 0c ff	 cmp	 DWORD PTR _mixitemlevel$[ebp], -1
  01c30	75 04		 jne	 SHORT $LN6@CheckMixCo

; 748  : 	{
; 749  : 		return 0;

  01c32	33 c0		 xor	 eax, eax
  01c34	eb 66		 jmp	 SHORT $LN7@CheckMixCo
$LN6@CheckMixCo:

; 750  : 	}
; 751  : 
; 752  : 	if ( itemnum <0 || itemnum > MAX_ITEMS-1)

  01c36	83 7d 08 00	 cmp	 DWORD PTR _itemnum$[ebp], 0
  01c3a	7c 09		 jl	 SHORT $LN4@CheckMixCo
  01c3c	81 7d 08 ff 1f
	00 00		 cmp	 DWORD PTR _itemnum$[ebp], 8191 ; 00001fffH
  01c43	7e 16		 jle	 SHORT $LN5@CheckMixCo
$LN4@CheckMixCo:

; 753  : 	{
; 754  : 		LogAdd("MakeSetOption Check error: (itemnum:%d)", itemnum);

  01c45	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01c48	50		 push	 eax
  01c49	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@
  01c4e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01c54	83 c4 08	 add	 esp, 8

; 755  : 		return 0;

  01c57	33 c0		 xor	 eax, eax
  01c59	eb 41		 jmp	 SHORT $LN7@CheckMixCo
$LN5@CheckMixCo:

; 756  : 	}
; 757  : 
; 758  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == 0)

  01c5b	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01c5e	6b c0 14	 imul	 eax, 20			; 00000014H
  01c61	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c64	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  01c69	75 04		 jne	 SHORT $LN3@CheckMixCo

; 759  : 	{
; 760  : 		return 0;

  01c6b	33 c0		 xor	 eax, eax
  01c6d	eb 2d		 jmp	 SHORT $LN7@CheckMixCo
$LN3@CheckMixCo:

; 761  : 	}
; 762  : 
; 763  : 	if (this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[0] == mixitemlevel || this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[1] == mixitemlevel)

  01c6f	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01c72	6b c0 14	 imul	 eax, 20			; 00000014H
  01c75	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c78	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  01c7c	3b 55 0c	 cmp	 edx, DWORD PTR _mixitemlevel$[ebp]
  01c7f	74 12		 je	 SHORT $LN1@CheckMixCo
  01c81	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01c84	6b c0 14	 imul	 eax, 20			; 00000014H
  01c87	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c8a	8b 54 01 14	 mov	 edx, DWORD PTR [ecx+eax+20]
  01c8e	3b 55 0c	 cmp	 edx, DWORD PTR _mixitemlevel$[ebp]
  01c91	75 07		 jne	 SHORT $LN2@CheckMixCo
$LN1@CheckMixCo:

; 764  : 	{
; 765  : 		return 1;

  01c93	b8 01 00 00 00	 mov	 eax, 1
  01c98	eb 02		 jmp	 SHORT $LN7@CheckMixCo
$LN2@CheckMixCo:

; 766  : 	}
; 767  : 
; 768  : 	return 0;

  01c9a	33 c0		 xor	 eax, eax
$LN7@CheckMixCo:

; 769  : }

  01c9c	5f		 pop	 edi
  01c9d	5e		 pop	 esi
  01c9e	5b		 pop	 ebx
  01c9f	8b e5		 mov	 esp, ebp
  01ca1	5d		 pop	 ebp
  01ca2	c2 08 00	 ret	 8
?CheckMixContition@CSetItemOption@@QAEHHH@Z ENDP	; CSetItemOption::CheckMixContition
_TEXT	ENDS
PUBLIC	?MakeSetOption@CSetItemOption@@QAEHHH@Z		; CSetItemOption::MakeSetOption
EXTRN	_rand:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_itemnum$ = 8						; size = 4
_mixitemlevel$ = 12					; size = 4
?MakeSetOption@CSetItemOption@@QAEHHH@Z PROC		; CSetItemOption::MakeSetOption
; _this$ = ecx

; 772  : {

  01cb0	55		 push	 ebp
  01cb1	8b ec		 mov	 ebp, esp
  01cb3	83 ec 44	 sub	 esp, 68			; 00000044H
  01cb6	53		 push	 ebx
  01cb7	56		 push	 esi
  01cb8	57		 push	 edi
  01cb9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 773  : 	if ( itemnum <0 || itemnum > MAX_ITEMS-1)

  01cbc	83 7d 08 00	 cmp	 DWORD PTR _itemnum$[ebp], 0
  01cc0	7c 09		 jl	 SHORT $LN7@MakeSetOpt
  01cc2	81 7d 08 ff 1f
	00 00		 cmp	 DWORD PTR _itemnum$[ebp], 8191 ; 00001fffH
  01cc9	7e 16		 jle	 SHORT $LN8@MakeSetOpt
$LN7@MakeSetOpt:

; 774  : 	{
; 775  : 		LogAdd("MakeSetOption Check error: (itemnum:%d)", itemnum);

  01ccb	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01cce	50		 push	 eax
  01ccf	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@
  01cd4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01cda	83 c4 08	 add	 esp, 8

; 776  : 		return 0;

  01cdd	33 c0		 xor	 eax, eax
  01cdf	eb 7e		 jmp	 SHORT $LN9@MakeSetOpt
$LN8@MakeSetOpt:

; 777  : 	}
; 778  : 
; 779  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE)

  01ce1	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01ce4	6b c0 14	 imul	 eax, 20			; 00000014H
  01ce7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01cea	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  01cef	75 04		 jne	 SHORT $LN6@MakeSetOpt

; 780  : 	{
; 781  : 		return 0;

  01cf1	33 c0		 xor	 eax, eax
  01cf3	eb 6a		 jmp	 SHORT $LN9@MakeSetOpt
$LN6@MakeSetOpt:

; 782  : 	}
; 783  : 
; 784  : 	if (this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[0] == this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[1])

  01cf5	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01cf8	6b c0 14	 imul	 eax, 20			; 00000014H
  01cfb	8b 4d 08	 mov	 ecx, DWORD PTR _itemnum$[ebp]
  01cfe	6b c9 14	 imul	 ecx, 20			; 00000014H
  01d01	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01d04	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01d07	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  01d0b	3b 44 0e 14	 cmp	 eax, DWORD PTR [esi+ecx+20]
  01d0f	75 18		 jne	 SHORT $LN5@MakeSetOpt

; 785  : 	{
; 786  : 		return (rand() % 2) +1;

  01d11	e8 00 00 00 00	 call	 _rand
  01d16	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  01d1b	79 05		 jns	 SHORT $LN11@MakeSetOpt
  01d1d	48		 dec	 eax
  01d1e	83 c8 fe	 or	 eax, -2			; fffffffeH
  01d21	40		 inc	 eax
$LN11@MakeSetOpt:
  01d22	83 c0 01	 add	 eax, 1
  01d25	eb 38		 jmp	 SHORT $LN9@MakeSetOpt
  01d27	eb 34		 jmp	 SHORT $LN4@MakeSetOpt
$LN5@MakeSetOpt:

; 787  : 	}
; 788  : 	else if ( this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[0] == mixitemlevel )

  01d29	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01d2c	6b c0 14	 imul	 eax, 20			; 00000014H
  01d2f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d32	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  01d36	3b 55 0c	 cmp	 edx, DWORD PTR _mixitemlevel$[ebp]
  01d39	75 09		 jne	 SHORT $LN3@MakeSetOpt

; 789  : 	{
; 790  : 		return 1;

  01d3b	b8 01 00 00 00	 mov	 eax, 1
  01d40	eb 1d		 jmp	 SHORT $LN9@MakeSetOpt
  01d42	eb 19		 jmp	 SHORT $LN4@MakeSetOpt
$LN3@MakeSetOpt:

; 791  : 	}
; 792  : 	else if ( this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[1] == mixitemlevel )

  01d44	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01d47	6b c0 14	 imul	 eax, 20			; 00000014H
  01d4a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d4d	8b 54 01 14	 mov	 edx, DWORD PTR [ecx+eax+20]
  01d51	3b 55 0c	 cmp	 edx, DWORD PTR _mixitemlevel$[ebp]
  01d54	75 07		 jne	 SHORT $LN4@MakeSetOpt

; 793  : 	{
; 794  : 		return 2;

  01d56	b8 02 00 00 00	 mov	 eax, 2
  01d5b	eb 02		 jmp	 SHORT $LN9@MakeSetOpt
$LN4@MakeSetOpt:

; 795  : 	}
; 796  : 
; 797  : 	return 0;

  01d5d	33 c0		 xor	 eax, eax
$LN9@MakeSetOpt:

; 798  : }

  01d5f	5f		 pop	 edi
  01d60	5e		 pop	 esi
  01d61	5b		 pop	 ebx
  01d62	8b e5		 mov	 esp, ebp
  01d64	5d		 pop	 ebp
  01d65	c2 08 00	 ret	 8
?MakeSetOption@CSetItemOption@@QAEHHH@Z ENDP		; CSetItemOption::MakeSetOption
_TEXT	ENDS
PUBLIC	?GenRandomItemNum@CSetItemOption@@QAEHXZ	; CSetItemOption::GenRandomItemNum
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z:PROC ; LuckyItemManager::IsLuckyItemEquipment
EXTRN	?g_LuckyItemManager@@3ULuckyItemManager@@A:BYTE	; g_LuckyItemManager
EXTRN	?g_MaxItemIndexOfEachItemType@@3PAHA:BYTE	; g_MaxItemIndexOfEachItemType
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv71 = -88						; size = 4
_index$220549 = -20					; size = 4
_maxindex$220548 = -16					; size = 4
_type$220547 = -12					; size = 4
_iItemIndex$ = -8					; size = 4
_this$ = -4						; size = 4
?GenRandomItemNum@CSetItemOption@@QAEHXZ PROC		; CSetItemOption::GenRandomItemNum
; _this$ = ecx

; 801  : {

  01d70	55		 push	 ebp
  01d71	8b ec		 mov	 ebp, esp
  01d73	83 ec 58	 sub	 esp, 88			; 00000058H
  01d76	53		 push	 ebx
  01d77	56		 push	 esi
  01d78	57		 push	 edi
  01d79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN13@GenRandomI:

; 802  : 	int iItemIndex;
; 803  : 	do
; 804  : 	{
; 805  : 		int type = (rand()%MAX_TYPE_ITEMS);

  01d7c	e8 00 00 00 00	 call	 _rand
  01d81	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  01d86	79 05		 jns	 SHORT $LN18@GenRandomI
  01d88	48		 dec	 eax
  01d89	83 c8 f0	 or	 eax, -16		; fffffff0H
  01d8c	40		 inc	 eax
$LN18@GenRandomI:
  01d8d	89 45 f4	 mov	 DWORD PTR _type$220547[ebp], eax

; 806  : 		int maxindex = ( g_MaxItemIndexOfEachItemType[type] <= 0 ) ?  MAX_SUBTYPE_ITEMS : g_MaxItemIndexOfEachItemType[type];

  01d90	8b 45 f4	 mov	 eax, DWORD PTR _type$220547[ebp]
  01d93	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[eax*4], 0
  01d9b	7f 09		 jg	 SHORT $LN16@GenRandomI
  01d9d	c7 45 a8 00 02
	00 00		 mov	 DWORD PTR tv71[ebp], 512 ; 00000200H
  01da4	eb 0d		 jmp	 SHORT $LN17@GenRandomI
$LN16@GenRandomI:
  01da6	8b 4d f4	 mov	 ecx, DWORD PTR _type$220547[ebp]
  01da9	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[ecx*4]
  01db0	89 55 a8	 mov	 DWORD PTR tv71[ebp], edx
$LN17@GenRandomI:
  01db3	8b 45 a8	 mov	 eax, DWORD PTR tv71[ebp]
  01db6	89 45 f0	 mov	 DWORD PTR _maxindex$220548[ebp], eax

; 807  : 		int index = rand() % maxindex;

  01db9	e8 00 00 00 00	 call	 _rand
  01dbe	99		 cdq
  01dbf	f7 7d f0	 idiv	 DWORD PTR _maxindex$220548[ebp]
  01dc2	89 55 ec	 mov	 DWORD PTR _index$220549[ebp], edx

; 808  : 		iItemIndex = ITEMGET(type, index);

  01dc5	8b 45 f4	 mov	 eax, DWORD PTR _type$220547[ebp]
  01dc8	c1 e0 09	 shl	 eax, 9
  01dcb	03 45 ec	 add	 eax, DWORD PTR _index$220549[ebp]
  01dce	89 45 f8	 mov	 DWORD PTR _iItemIndex$[ebp], eax

; 809  : #ifdef LUCKYITEM
; 810  : 		if( g_LuckyItemManager.IsLuckyItemEquipment(iItemIndex) == true )

  01dd1	8b 45 f8	 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  01dd4	50		 push	 eax
  01dd5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  01dda	e8 00 00 00 00	 call	 ?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z ; LuckyItemManager::IsLuckyItemEquipment
  01ddf	83 f8 01	 cmp	 eax, 1
  01de2	75 05		 jne	 SHORT $LN10@GenRandomI

; 811  : 		{	
; 812  : 			continue;

  01de4	e9 dc 00 00 00	 jmp	 $LN12@GenRandomI
$LN10@GenRandomI:

; 813  : 		}
; 814  : 	
; 815  : #endif
; 816  : #ifdef GRAND_HERO_DEV	
; 817  : 	if(g_ExLicense.user.GrandHero)

  01de9	0f b6 05 ce 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+206
  01df0	85 c0		 test	 eax, eax
  01df2	0f 84 b8 00 00
	00		 je	 $LN9@GenRandomI

; 818  : 	{
; 819  : 			if( iItemIndex >= ITEMGET(7,84) && iItemIndex <= ITEMGET(7,90) ||
; 820  : 			iItemIndex >= ITEMGET(8,84) && iItemIndex <= ITEMGET(8,90) ||
; 821  : 			iItemIndex >= ITEMGET(9,84) && iItemIndex <= ITEMGET(9,90) ||
; 822  : 			iItemIndex >= ITEMGET(10,84) && iItemIndex <= ITEMGET(10,90) ||
; 823  : 			iItemIndex >= ITEMGET(11,84) && iItemIndex <= ITEMGET(11,90) ||
; 824  : 			iItemIndex == ITEMGET(0,41) || iItemIndex == ITEMGET(0,42) || iItemIndex == ITEMGET(2,20) || 
; 825  : 			iItemIndex == ITEMGET(4,30) || iItemIndex == ITEMGET(5,41) || iItemIndex == ITEMGET(5,42) ||
; 826  : 			iItemIndex == ITEMGET(6,30) || iItemIndex == ITEMGET(6,31) || iItemIndex == ITEMGET(6,32) || iItemIndex == ITEMGET(6,33)
; 827  : 			)

  01df8	81 7d f8 54 0e
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 3668 ; 00000e54H
  01dff	7c 0d		 jl	 SHORT $LN6@GenRandomI
  01e01	81 7d f8 5a 0e
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 3674 ; 00000e5aH
  01e08	0f 8e a0 00 00
	00		 jle	 $LN7@GenRandomI
$LN6@GenRandomI:
  01e0e	81 7d f8 54 10
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 4180 ; 00001054H
  01e15	7c 0d		 jl	 SHORT $LN5@GenRandomI
  01e17	81 7d f8 5a 10
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 4186 ; 0000105aH
  01e1e	0f 8e 8a 00 00
	00		 jle	 $LN7@GenRandomI
$LN5@GenRandomI:
  01e24	81 7d f8 54 12
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 4692 ; 00001254H
  01e2b	7c 09		 jl	 SHORT $LN4@GenRandomI
  01e2d	81 7d f8 5a 12
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 4698 ; 0000125aH
  01e34	7e 78		 jle	 SHORT $LN7@GenRandomI
$LN4@GenRandomI:
  01e36	81 7d f8 54 14
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 5204 ; 00001454H
  01e3d	7c 09		 jl	 SHORT $LN3@GenRandomI
  01e3f	81 7d f8 5a 14
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 5210 ; 0000145aH
  01e46	7e 66		 jle	 SHORT $LN7@GenRandomI
$LN3@GenRandomI:
  01e48	81 7d f8 54 16
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 5716 ; 00001654H
  01e4f	7c 09		 jl	 SHORT $LN2@GenRandomI
  01e51	81 7d f8 5a 16
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 5722 ; 0000165aH
  01e58	7e 54		 jle	 SHORT $LN7@GenRandomI
$LN2@GenRandomI:
  01e5a	83 7d f8 29	 cmp	 DWORD PTR _iItemIndex$[ebp], 41 ; 00000029H
  01e5e	74 4e		 je	 SHORT $LN7@GenRandomI
  01e60	83 7d f8 2a	 cmp	 DWORD PTR _iItemIndex$[ebp], 42 ; 0000002aH
  01e64	74 48		 je	 SHORT $LN7@GenRandomI
  01e66	81 7d f8 14 04
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 1044 ; 00000414H
  01e6d	74 3f		 je	 SHORT $LN7@GenRandomI
  01e6f	81 7d f8 1e 08
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 2078 ; 0000081eH
  01e76	74 36		 je	 SHORT $LN7@GenRandomI
  01e78	81 7d f8 29 0a
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 2601 ; 00000a29H
  01e7f	74 2d		 je	 SHORT $LN7@GenRandomI
  01e81	81 7d f8 2a 0a
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 2602 ; 00000a2aH
  01e88	74 24		 je	 SHORT $LN7@GenRandomI
  01e8a	81 7d f8 1e 0c
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 3102 ; 00000c1eH
  01e91	74 1b		 je	 SHORT $LN7@GenRandomI
  01e93	81 7d f8 1f 0c
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 3103 ; 00000c1fH
  01e9a	74 12		 je	 SHORT $LN7@GenRandomI
  01e9c	81 7d f8 20 0c
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 3104 ; 00000c20H
  01ea3	74 09		 je	 SHORT $LN7@GenRandomI
  01ea5	81 7d f8 21 0c
	00 00		 cmp	 DWORD PTR _iItemIndex$[ebp], 3105 ; 00000c21H
  01eac	75 02		 jne	 SHORT $LN9@GenRandomI
$LN7@GenRandomI:

; 828  : 		{
; 829  : 			continue;

  01eae	eb 15		 jmp	 SHORT $LN12@GenRandomI
$LN9@GenRandomI:

; 830  : 		}
; 831  : 	}
; 832  : #endif
; 833  : 		if ( this->IsSetItem(iItemIndex) != FALSE )

  01eb0	8b 45 f8	 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  01eb3	50		 push	 eax
  01eb4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01eb7	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem
  01ebc	85 c0		 test	 eax, eax
  01ebe	74 05		 je	 SHORT $LN12@GenRandomI

; 834  : 			return iItemIndex;

  01ec0	8b 45 f8	 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  01ec3	eb 0f		 jmp	 SHORT $LN14@GenRandomI
$LN12@GenRandomI:

; 835  : 	}
; 836  : 	while ( true );

  01ec5	b8 01 00 00 00	 mov	 eax, 1
  01eca	85 c0		 test	 eax, eax
  01ecc	0f 85 aa fe ff
	ff		 jne	 $LN13@GenRandomI

; 837  : 
; 838  : 	return ITEMGET(0,0);

  01ed2	33 c0		 xor	 eax, eax
$LN14@GenRandomI:

; 839  : }

  01ed4	5f		 pop	 edi
  01ed5	5e		 pop	 esi
  01ed6	5b		 pop	 ebx
  01ed7	8b e5		 mov	 esp, ebp
  01ed9	5d		 pop	 ebp
  01eda	c3		 ret	 0
?GenRandomItemNum@CSetItemOption@@QAEHXZ ENDP		; CSetItemOption::GenRandomItemNum
_TEXT	ENDS
PUBLIC	??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@ ; `string'
PUBLIC	?GenSetOption@CSetItemOption@@QAEHH@Z		; CSetItemOption::GenSetOption
;	COMDAT ??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@
CONST	SEGMENT
??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@ DB 'GenSetType'
	DB	' Check error: (itemnum:%d)', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_SetOption$ = -8					; size = 4
_this$ = -4						; size = 4
_itemnum$ = 8						; size = 4
?GenSetOption@CSetItemOption@@QAEHH@Z PROC		; CSetItemOption::GenSetOption
; _this$ = ecx

; 842  : {

  01ee0	55		 push	 ebp
  01ee1	8b ec		 mov	 ebp, esp
  01ee3	83 ec 48	 sub	 esp, 72			; 00000048H
  01ee6	53		 push	 ebx
  01ee7	56		 push	 esi
  01ee8	57		 push	 edi
  01ee9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 843  : 	if ( itemnum < 0 || itemnum > MAX_ITEMS-1)

  01eec	83 7d 08 00	 cmp	 DWORD PTR _itemnum$[ebp], 0
  01ef0	7c 09		 jl	 SHORT $LN8@GenSetOpti
  01ef2	81 7d 08 ff 1f
	00 00		 cmp	 DWORD PTR _itemnum$[ebp], 8191 ; 00001fffH
  01ef9	7e 19		 jle	 SHORT $LN9@GenSetOpti
$LN8@GenSetOpti:

; 844  : 	{
; 845  : 		LogAdd("GenSetType Check error: (itemnum:%d)", itemnum);

  01efb	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01efe	50		 push	 eax
  01eff	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@
  01f04	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01f0a	83 c4 08	 add	 esp, 8

; 846  : 		return FALSE;

  01f0d	33 c0		 xor	 eax, eax
  01f0f	e9 99 00 00 00	 jmp	 $LN10@GenSetOpti
$LN9@GenSetOpti:

; 847  : 	}
; 848  : 
; 849  : 	if ( this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE )

  01f14	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01f17	6b c0 14	 imul	 eax, 20			; 00000014H
  01f1a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f1d	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  01f22	75 07		 jne	 SHORT $LN7@GenSetOpti

; 850  : 		return FALSE;

  01f24	33 c0		 xor	 eax, eax
  01f26	e9 82 00 00 00	 jmp	 $LN10@GenSetOpti
$LN7@GenSetOpti:

; 851  : 
; 852  : 	int SetOption;
; 853  : 
; 854  : 	if ( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] &&
; 855  : 		 this->m_SetItemTypeInfo[itemnum].OptionIndex[1] )

  01f2b	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01f2e	6b c0 14	 imul	 eax, 20			; 00000014H
  01f31	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f34	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  01f39	74 29		 je	 SHORT $LN6@GenSetOpti
  01f3b	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01f3e	6b c0 14	 imul	 eax, 20			; 00000014H
  01f41	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f44	83 7c 01 0c 00	 cmp	 DWORD PTR [ecx+eax+12], 0
  01f49	74 19		 je	 SHORT $LN6@GenSetOpti

; 856  : 	{
; 857  : 		SetOption = rand() % 2 + 1;

  01f4b	e8 00 00 00 00	 call	 _rand
  01f50	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  01f55	79 05		 jns	 SHORT $LN12@GenSetOpti
  01f57	48		 dec	 eax
  01f58	83 c8 fe	 or	 eax, -2			; fffffffeH
  01f5b	40		 inc	 eax
$LN12@GenSetOpti:
  01f5c	83 c0 01	 add	 eax, 1
  01f5f	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax
  01f62	eb 20		 jmp	 SHORT $LN5@GenSetOpti
$LN6@GenSetOpti:

; 858  : 	}
; 859  : 	else if ( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] )

  01f64	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01f67	6b c0 14	 imul	 eax, 20			; 00000014H
  01f6a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f6d	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  01f72	74 09		 je	 SHORT $LN4@GenSetOpti

; 860  : 	{
; 861  : 		SetOption = 1;

  01f74	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _SetOption$[ebp], 1

; 862  : 	}
; 863  : 	else

  01f7b	eb 07		 jmp	 SHORT $LN5@GenSetOpti
$LN4@GenSetOpti:

; 864  : 	{
; 865  : 		SetOption = 2;

  01f7d	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _SetOption$[ebp], 2
$LN5@GenSetOpti:

; 866  : 	}
; 867  : 
; 868  : 	if ( (rand()%100) < 80 )

  01f84	e8 00 00 00 00	 call	 _rand
  01f89	99		 cdq
  01f8a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01f8f	f7 f9		 idiv	 ecx
  01f91	83 fa 50	 cmp	 edx, 80			; 00000050H
  01f94	7d 0b		 jge	 SHORT $LN2@GenSetOpti

; 869  : 	{
; 870  : 		SetOption |= 4;

  01f96	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
  01f99	83 c8 04	 or	 eax, 4
  01f9c	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax

; 871  : 	}
; 872  : 	else

  01f9f	eb 09		 jmp	 SHORT $LN1@GenSetOpti
$LN2@GenSetOpti:

; 873  : 	{
; 874  : 		SetOption |= 8;

  01fa1	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
  01fa4	83 c8 08	 or	 eax, 8
  01fa7	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax
$LN1@GenSetOpti:

; 875  : 	}
; 876  : 
; 877  : 	return SetOption;

  01faa	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
$LN10@GenSetOpti:

; 878  : }

  01fad	5f		 pop	 edi
  01fae	5e		 pop	 esi
  01faf	5b		 pop	 ebx
  01fb0	8b e5		 mov	 esp, ebp
  01fb2	5d		 pop	 ebp
  01fb3	c2 04 00	 ret	 4
?GenSetOption@CSetItemOption@@QAEHH@Z ENDP		; CSetItemOption::GenSetOption
_TEXT	ENDS
PUBLIC	?LuckyItemGenSetOption@CSetItemOption@@QAEHHPAH@Z ; CSetItemOption::LuckyItemGenSetOption
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_dwRand$ = -12						; size = 4
_SetOption$ = -8					; size = 4
_this$ = -4						; size = 4
_itemnum$ = 8						; size = 4
_piAddSetOptRate$ = 12					; size = 4
?LuckyItemGenSetOption@CSetItemOption@@QAEHHPAH@Z PROC	; CSetItemOption::LuckyItemGenSetOption
; _this$ = ecx

; 881  : {

  01fc0	55		 push	 ebp
  01fc1	8b ec		 mov	 ebp, esp
  01fc3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01fc6	53		 push	 ebx
  01fc7	56		 push	 esi
  01fc8	57		 push	 edi
  01fc9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 882  : 	if( itemnum < 0 || itemnum > MAX_ITEMS - 1 )

  01fcc	83 7d 08 00	 cmp	 DWORD PTR _itemnum$[ebp], 0
  01fd0	7c 09		 jl	 SHORT $LN13@LuckyItemG
  01fd2	81 7d 08 ff 1f
	00 00		 cmp	 DWORD PTR _itemnum$[ebp], 8191 ; 00001fffH
  01fd9	7e 19		 jle	 SHORT $LN14@LuckyItemG
$LN13@LuckyItemG:

; 883  : 	{
; 884  : 		LogAdd("GenSetType Check error: (itemnum:%d)", itemnum);

  01fdb	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01fde	50		 push	 eax
  01fdf	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@
  01fe4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01fea	83 c4 08	 add	 esp, 8

; 885  : 		return false;

  01fed	33 c0		 xor	 eax, eax
  01fef	e9 d4 00 00 00	 jmp	 $LN15@LuckyItemG
$LN14@LuckyItemG:

; 886  : 	}
; 887  : 	// ----
; 888  : 	if( !this->m_SetItemTypeInfo[itemnum].IsLoad )

  01ff4	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  01ff7	6b c0 14	 imul	 eax, 20			; 00000014H
  01ffa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ffd	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  02002	75 07		 jne	 SHORT $LN12@LuckyItemG

; 889  : 	{
; 890  : 		return false;

  02004	33 c0		 xor	 eax, eax
  02006	e9 bd 00 00 00	 jmp	 $LN15@LuckyItemG
$LN12@LuckyItemG:

; 891  : 	}
; 892  : 	// ----
; 893  : 	int SetOption;
; 894  : 	// ----
; 895  : 	if( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] && this->m_SetItemTypeInfo[itemnum].OptionIndex[1] )

  0200b	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  0200e	6b c0 14	 imul	 eax, 20			; 00000014H
  02011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02014	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  02019	74 29		 je	 SHORT $LN11@LuckyItemG
  0201b	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  0201e	6b c0 14	 imul	 eax, 20			; 00000014H
  02021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02024	83 7c 01 0c 00	 cmp	 DWORD PTR [ecx+eax+12], 0
  02029	74 19		 je	 SHORT $LN11@LuckyItemG

; 896  : 	{
; 897  : 		SetOption = rand() % 2 + 1;

  0202b	e8 00 00 00 00	 call	 _rand
  02030	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  02035	79 05		 jns	 SHORT $LN17@LuckyItemG
  02037	48		 dec	 eax
  02038	83 c8 fe	 or	 eax, -2			; fffffffeH
  0203b	40		 inc	 eax
$LN17@LuckyItemG:
  0203c	83 c0 01	 add	 eax, 1
  0203f	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax
  02042	eb 20		 jmp	 SHORT $LN10@LuckyItemG
$LN11@LuckyItemG:

; 898  : 	}
; 899  : 	else if( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] )

  02044	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  02047	6b c0 14	 imul	 eax, 20			; 00000014H
  0204a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0204d	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  02052	74 09		 je	 SHORT $LN9@LuckyItemG

; 900  : 	{
; 901  : 		SetOption = 1;

  02054	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _SetOption$[ebp], 1

; 902  : 	}
; 903  : 	else

  0205b	eb 07		 jmp	 SHORT $LN10@LuckyItemG
$LN9@LuckyItemG:

; 904  : 	{
; 905  : 		SetOption = 2;

  0205d	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _SetOption$[ebp], 2
$LN10@LuckyItemG:

; 906  : 	}
; 907  : 	// ----
; 908  : 	DWORD dwRand = GetLargeRand() % 1000000;

  02064	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  02069	33 d2		 xor	 edx, edx
  0206b	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  02070	f7 f1		 div	 ecx
  02072	89 55 f4	 mov	 DWORD PTR _dwRand$[ebp], edx

; 909  : 	// ----
; 910  : 	if( dwRand <= piAddSetOptRate[0] )

  02075	8b 45 0c	 mov	 eax, DWORD PTR _piAddSetOptRate$[ebp]
  02078	8b 4d f4	 mov	 ecx, DWORD PTR _dwRand$[ebp]
  0207b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0207d	77 0b		 ja	 SHORT $LN7@LuckyItemG

; 911  : 	{
; 912  : 		SetOption += 4;

  0207f	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
  02082	83 c0 04	 add	 eax, 4
  02085	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax
  02088	eb 3b		 jmp	 SHORT $LN6@LuckyItemG
$LN7@LuckyItemG:

; 913  : 		//SetOption |= 4;
; 914  : 		//return SetOption;
; 915  : 	}
; 916  : 	else if( dwRand <= piAddSetOptRate[0] + piAddSetOptRate[1] )

  0208a	8b 45 0c	 mov	 eax, DWORD PTR _piAddSetOptRate$[ebp]
  0208d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0208f	8b 55 0c	 mov	 edx, DWORD PTR _piAddSetOptRate$[ebp]
  02092	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  02095	39 4d f4	 cmp	 DWORD PTR _dwRand$[ebp], ecx
  02098	77 0b		 ja	 SHORT $LN5@LuckyItemG

; 917  : 	{
; 918  : 		SetOption += 8;

  0209a	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
  0209d	83 c0 08	 add	 eax, 8
  020a0	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax

; 919  : 		//SetOption |= 8;
; 920  : 		//return SetOption;
; 921  : 	}
; 922  : 	else

  020a3	eb 20		 jmp	 SHORT $LN6@LuckyItemG
$LN5@LuckyItemG:

; 923  : 	{
; 924  : 		if(SetOption == 1)

  020a5	83 7d f8 01	 cmp	 DWORD PTR _SetOption$[ebp], 1
  020a9	75 0b		 jne	 SHORT $LN3@LuckyItemG

; 925  : 		{
; 926  : 			SetOption += 4;

  020ab	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
  020ae	83 c0 04	 add	 eax, 4
  020b1	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax
  020b4	eb 0f		 jmp	 SHORT $LN6@LuckyItemG
$LN3@LuckyItemG:

; 927  : 		}
; 928  : 		else if(SetOption == 2)

  020b6	83 7d f8 02	 cmp	 DWORD PTR _SetOption$[ebp], 2
  020ba	75 09		 jne	 SHORT $LN6@LuckyItemG

; 929  : 		{
; 930  : 			SetOption += 8;

  020bc	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
  020bf	83 c0 08	 add	 eax, 8
  020c2	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax
$LN6@LuckyItemG:

; 931  : 		}
; 932  : 	}
; 933  : 	// ----
; 934  : 	return SetOption;

  020c5	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
$LN15@LuckyItemG:

; 935  : }

  020c8	5f		 pop	 edi
  020c9	5e		 pop	 esi
  020ca	5b		 pop	 ebx
  020cb	8b e5		 mov	 esp, ebp
  020cd	5d		 pop	 ebp
  020ce	c2 08 00	 ret	 8
?LuckyItemGenSetOption@CSetItemOption@@QAEHHPAH@Z ENDP	; CSetItemOption::LuckyItemGenSetOption
_TEXT	ENDS
PUBLIC	?ExGenSetOption@CSetItemOption@@QAEHH@Z		; CSetItemOption::ExGenSetOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_SetOption$ = -8					; size = 4
_this$ = -4						; size = 4
_itemnum$ = 8						; size = 4
?ExGenSetOption@CSetItemOption@@QAEHH@Z PROC		; CSetItemOption::ExGenSetOption
; _this$ = ecx

; 938  : {

  020e0	55		 push	 ebp
  020e1	8b ec		 mov	 ebp, esp
  020e3	83 ec 48	 sub	 esp, 72			; 00000048H
  020e6	53		 push	 ebx
  020e7	56		 push	 esi
  020e8	57		 push	 edi
  020e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 939  : 	if ( itemnum < 0 || itemnum > MAX_ITEMS-1)

  020ec	83 7d 08 00	 cmp	 DWORD PTR _itemnum$[ebp], 0
  020f0	7c 09		 jl	 SHORT $LN8@ExGenSetOp
  020f2	81 7d 08 ff 1f
	00 00		 cmp	 DWORD PTR _itemnum$[ebp], 8191 ; 00001fffH
  020f9	7e 19		 jle	 SHORT $LN9@ExGenSetOp
$LN8@ExGenSetOp:

; 940  : 	{
; 941  : 		LogAdd("GenSetType Check error: (itemnum:%d)", itemnum);

  020fb	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  020fe	50		 push	 eax
  020ff	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@
  02104	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0210a	83 c4 08	 add	 esp, 8

; 942  : 		return FALSE;

  0210d	33 c0		 xor	 eax, eax
  0210f	e9 83 00 00 00	 jmp	 $LN10@ExGenSetOp
$LN9@ExGenSetOp:

; 943  : 	}
; 944  : 
; 945  : 	if ( this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE )

  02114	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  02117	6b c0 14	 imul	 eax, 20			; 00000014H
  0211a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0211d	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  02122	75 04		 jne	 SHORT $LN7@ExGenSetOp

; 946  : 		return FALSE;

  02124	33 c0		 xor	 eax, eax
  02126	eb 6f		 jmp	 SHORT $LN10@ExGenSetOp
$LN7@ExGenSetOp:

; 947  : 
; 948  : 	int SetOption;
; 949  : 
; 950  : 	if ( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] && this->m_SetItemTypeInfo[itemnum].OptionIndex[1] )

  02128	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  0212b	6b c0 14	 imul	 eax, 20			; 00000014H
  0212e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02131	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  02136	74 3c		 je	 SHORT $LN6@ExGenSetOp
  02138	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  0213b	6b c0 14	 imul	 eax, 20			; 00000014H
  0213e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02141	83 7c 01 0c 00	 cmp	 DWORD PTR [ecx+eax+12], 0
  02146	74 2c		 je	 SHORT $LN6@ExGenSetOp

; 951  : 	{
; 952  : 		SetOption = rand() % 2;

  02148	e8 00 00 00 00	 call	 _rand
  0214d	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  02152	79 05		 jns	 SHORT $LN12@ExGenSetOp
  02154	48		 dec	 eax
  02155	83 c8 fe	 or	 eax, -2			; fffffffeH
  02158	40		 inc	 eax
$LN12@ExGenSetOp:
  02159	89 45 f8	 mov	 DWORD PTR _SetOption$[ebp], eax

; 953  : 
; 954  : 		if (SetOption == 1)

  0215c	83 7d f8 01	 cmp	 DWORD PTR _SetOption$[ebp], 1
  02160	75 09		 jne	 SHORT $LN5@ExGenSetOp

; 955  : 		{
; 956  : 			SetOption = 5;

  02162	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _SetOption$[ebp], 5

; 957  : 		}
; 958  : 		else

  02169	eb 07		 jmp	 SHORT $LN4@ExGenSetOp
$LN5@ExGenSetOp:

; 959  : 		{
; 960  : 			SetOption = 10;

  0216b	c7 45 f8 0a 00
	00 00		 mov	 DWORD PTR _SetOption$[ebp], 10 ; 0000000aH
$LN4@ExGenSetOp:

; 961  : 		}

  02172	eb 20		 jmp	 SHORT $LN3@ExGenSetOp
$LN6@ExGenSetOp:

; 962  : 	}
; 963  : 	else if ( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] )

  02174	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  02177	6b c0 14	 imul	 eax, 20			; 00000014H
  0217a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0217d	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  02182	74 09		 je	 SHORT $LN2@ExGenSetOp

; 964  : 	{
; 965  : 		SetOption = 5;

  02184	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _SetOption$[ebp], 5

; 966  : 	}
; 967  : 	else

  0218b	eb 07		 jmp	 SHORT $LN3@ExGenSetOp
$LN2@ExGenSetOp:

; 968  : 	{
; 969  : 		SetOption = 10;

  0218d	c7 45 f8 0a 00
	00 00		 mov	 DWORD PTR _SetOption$[ebp], 10 ; 0000000aH
$LN3@ExGenSetOp:

; 970  : 	}
; 971  : 
; 972  : 	return SetOption;

  02194	8b 45 f8	 mov	 eax, DWORD PTR _SetOption$[ebp]
$LN10@ExGenSetOp:

; 973  : }

  02197	5f		 pop	 edi
  02198	5e		 pop	 esi
  02199	5b		 pop	 ebx
  0219a	8b e5		 mov	 esp, ebp
  0219c	5d		 pop	 ebp
  0219d	c2 04 00	 ret	 4
?ExGenSetOption@CSetItemOption@@QAEHH@Z ENDP		; CSetItemOption::ExGenSetOption
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__EgSetItemOption@@YAXXZ
text$yc	SEGMENT
??__EgSetItemOption@@YAXXZ PROC				; `dynamic initializer for 'gSetItemOption'', COMDAT

; 12   : CSetItemOption gSetItemOption;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  0000e	e8 00 00 00 00	 call	 ??0CSetItemOption@@QAE@XZ ; CSetItemOption::CSetItemOption
  00013	68 00 00 00 00	 push	 OFFSET ??__FgSetItemOption@@YAXXZ ; `dynamic atexit destructor for 'gSetItemOption''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgSetItemOption@@YAXXZ ENDP				; `dynamic initializer for 'gSetItemOption''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FgSetItemOption@@YAXXZ
text$yd	SEGMENT
??__FgSetItemOption@@YAXXZ PROC				; `dynamic atexit destructor for 'gSetItemOption'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  0000e	e8 00 00 00 00	 call	 ??1CSetItemOption@@UAE@XZ ; CSetItemOption::~CSetItemOption
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgSetItemOption@@YAXXZ ENDP				; `dynamic atexit destructor for 'gSetItemOption''
text$yd	ENDS
PUBLIC	?gSetItemOption@@3VCSetItemOption@@A		; gSetItemOption
_BSS	SEGMENT
?gSetItemOption@@3VCSetItemOption@@A DB 030484H DUP (?)	; gSetItemOption
_BSS	ENDS
CRT$XCU	SEGMENT
_gSetItemOption$initializer$ DD FLAT:??__EgSetItemOption@@YAXXZ
CRT$XCU	ENDS
END
