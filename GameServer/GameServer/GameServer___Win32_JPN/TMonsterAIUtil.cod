; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\TMonsterAIUtil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7TMonsterAIUtil@@6B@				; TMonsterAIUtil::`vftable'
PUBLIC	??0TMonsterAIUtil@@QAE@XZ			; TMonsterAIUtil::TMonsterAIUtil
PUBLIC	??_R4TMonsterAIUtil@@6B@			; TMonsterAIUtil::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTMonsterAIUtil@@@8			; TMonsterAIUtil `RTTI Type Descriptor'
PUBLIC	??_R3TMonsterAIUtil@@8				; TMonsterAIUtil::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TMonsterAIUtil@@8				; TMonsterAIUtil::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TMonsterAIUtil@@8			; TMonsterAIUtil::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETMonsterAIUtil@@UAEPAXI@Z:PROC		; TMonsterAIUtil::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@TMonsterAIUtil@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\tmonsteraiutil.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@TMonsterAIUtil@@8 DD FLAT:??_R0?AVTMonsterAIUtil@@@8 ; TMonsterAIUtil::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TMonsterAIUtil@@8
rdata$r	ENDS
;	COMDAT ??_R2TMonsterAIUtil@@8
rdata$r	SEGMENT
??_R2TMonsterAIUtil@@8 DD FLAT:??_R1A@?0A@EA@TMonsterAIUtil@@8 ; TMonsterAIUtil::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TMonsterAIUtil@@8
rdata$r	SEGMENT
??_R3TMonsterAIUtil@@8 DD 00H				; TMonsterAIUtil::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TMonsterAIUtil@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTMonsterAIUtil@@@8
_DATA	SEGMENT
??_R0?AVTMonsterAIUtil@@@8 DD FLAT:??_7type_info@@6B@	; TMonsterAIUtil `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTMonsterAIUtil@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TMonsterAIUtil@@6B@
rdata$r	SEGMENT
??_R4TMonsterAIUtil@@6B@ DD 00H				; TMonsterAIUtil::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTMonsterAIUtil@@@8
	DD	FLAT:??_R3TMonsterAIUtil@@8
rdata$r	ENDS
;	COMDAT ??_7TMonsterAIUtil@@6B@
CONST	SEGMENT
??_7TMonsterAIUtil@@6B@ DD FLAT:??_R4TMonsterAIUtil@@6B@ ; TMonsterAIUtil::`vftable'
	DD	FLAT:??_ETMonsterAIUtil@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TMonsterAIUtil@@QAE@XZ PROC				; TMonsterAIUtil::TMonsterAIUtil
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7TMonsterAIUtil@@6B@

; 19   : 	return;
; 20   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0TMonsterAIUtil@@QAE@XZ ENDP				; TMonsterAIUtil::TMonsterAIUtil
_TEXT	ENDS
PUBLIC	??1TMonsterAIUtil@@UAE@XZ			; TMonsterAIUtil::~TMonsterAIUtil
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GTMonsterAIUtil@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTMonsterAIUtil@@UAEPAXI@Z PROC			; TMonsterAIUtil::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1TMonsterAIUtil@@UAE@XZ ; TMonsterAIUtil::~TMonsterAIUtil
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GTMonsterAIUtil@@UAEPAXI@Z ENDP			; TMonsterAIUtil::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TMonsterAIUtil@@UAE@XZ PROC				; TMonsterAIUtil::~TMonsterAIUtil
; _this$ = ecx

; 23   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7TMonsterAIUtil@@6B@

; 24   : 	return;
; 25   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1TMonsterAIUtil@@UAE@XZ ENDP				; TMonsterAIUtil::~TMonsterAIUtil
_TEXT	ENDS
PUBLIC	?FindMonViewportObj@TMonsterAIUtil@@QAEHHH@Z	; TMonsterAIUtil::FindMonViewportObj
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv72 = -76						; size = 4
tv67 = -76						; size = 4
_i$227568 = -8						; size = 4
_this$ = -4						; size = 4
_iObjIndex$ = 8						; size = 4
_iTargetObjIndex$ = 12					; size = 4
?FindMonViewportObj@TMonsterAIUtil@@QAEHHH@Z PROC	; TMonsterAIUtil::FindMonViewportObj
; _this$ = ecx

; 29   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	if ( OBJMON_RANGE(iObjIndex) ==  FALSE || OBJMAX_RANGE(iTargetObjIndex) == FALSE )

  0004c	83 7d 08 00	 cmp	 DWORD PTR _iObjIndex$[ebp], 0
  00050	7d 09		 jge	 SHORT $LN10@FindMonVie
  00052	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  00059	eb 0f		 jmp	 SHORT $LN11@FindMonVie
$LN10@FindMonVie:
  0005b	33 c0		 xor	 eax, eax
  0005d	81 7d 08 c7 32
	00 00		 cmp	 DWORD PTR _iObjIndex$[ebp], 12999 ; 000032c7H
  00064	0f 9e c0	 setle	 al
  00067	89 45 b4	 mov	 DWORD PTR tv67[ebp], eax
$LN11@FindMonVie:
  0006a	83 7d b4 00	 cmp	 DWORD PTR tv67[ebp], 0
  0006e	74 24		 je	 SHORT $LN6@FindMonVie
  00070	83 7d 0c 00	 cmp	 DWORD PTR _iTargetObjIndex$[ebp], 0
  00074	7d 09		 jge	 SHORT $LN12@FindMonVie
  00076	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  0007d	eb 0f		 jmp	 SHORT $LN13@FindMonVie
$LN12@FindMonVie:
  0007f	33 c0		 xor	 eax, eax
  00081	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _iTargetObjIndex$[ebp], 14999 ; 00003a97H
  00088	0f 9e c0	 setle	 al
  0008b	89 45 b4	 mov	 DWORD PTR tv72[ebp], eax
$LN13@FindMonVie:
  0008e	83 7d b4 00	 cmp	 DWORD PTR tv72[ebp], 0
  00092	75 04		 jne	 SHORT $LN7@FindMonVie
$LN6@FindMonVie:

; 31   : 		return FALSE;

  00094	33 c0		 xor	 eax, eax
  00096	eb 66		 jmp	 SHORT $LN8@FindMonVie
$LN7@FindMonVie:

; 32   : 
; 33   : 	for ( int i=0;i<MAX_VIEWPORT_MONSTER;i++)

  00098	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227568[ebp], 0
  0009f	eb 09		 jmp	 SHORT $LN5@FindMonVie
$LN4@FindMonVie:
  000a1	8b 45 f8	 mov	 eax, DWORD PTR _i$227568[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 f8	 mov	 DWORD PTR _i$227568[ebp], eax
$LN5@FindMonVie:
  000aa	83 7d f8 4b	 cmp	 DWORD PTR _i$227568[ebp], 75 ; 0000004bH
  000ae	7d 4c		 jge	 SHORT $LN3@FindMonVie

; 34   : 	{
; 35   : 		if ( gObj[iObjIndex].VpPlayer[i].state != FALSE )

  000b0	8b 45 08	 mov	 eax, DWORD PTR _iObjIndex$[ebp]
  000b3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  000b9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bf	8b 4d f8	 mov	 ecx, DWORD PTR _i$227568[ebp]
  000c2	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  000c5	0f be 94 08 28
	05 00 00	 movsx	 edx, BYTE PTR [eax+ecx+1320]
  000cd	85 d2		 test	 edx, edx
  000cf	74 29		 je	 SHORT $LN2@FindMonVie

; 36   : 		{
; 37   : 			if ( iTargetObjIndex == gObj[iObjIndex].VpPlayer[i].number )

  000d1	8b 45 08	 mov	 eax, DWORD PTR _iObjIndex$[ebp]
  000d4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  000da	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e0	8b 4d f8	 mov	 ecx, DWORD PTR _i$227568[ebp]
  000e3	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  000e6	0f bf 94 08 2a
	05 00 00	 movsx	 edx, WORD PTR [eax+ecx+1322]
  000ee	39 55 0c	 cmp	 DWORD PTR _iTargetObjIndex$[ebp], edx
  000f1	75 07		 jne	 SHORT $LN2@FindMonVie

; 38   : 			{
; 39   : 				return TRUE;

  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	eb 04		 jmp	 SHORT $LN8@FindMonVie
$LN2@FindMonVie:

; 40   : 			}
; 41   : 		}
; 42   : 	}

  000fa	eb a5		 jmp	 SHORT $LN4@FindMonVie
$LN3@FindMonVie:

; 43   : 
; 44   : 	return FALSE;

  000fc	33 c0		 xor	 eax, eax
$LN8@FindMonVie:

; 45   : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 08 00	 ret	 8
?FindMonViewportObj@TMonsterAIUtil@@QAEHHH@Z ENDP	; TMonsterAIUtil::FindMonViewportObj
_TEXT	ENDS
PUBLIC	?FindMonViewportObj2@TMonsterAIUtil@@QAEHHH@Z	; TMonsterAIUtil::FindMonViewportObj2
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv72 = -76						; size = 4
tv67 = -76						; size = 4
_i$227581 = -8						; size = 4
_this$ = -4						; size = 4
_iObjIndex$ = 8						; size = 4
_iTargetObjIndex$ = 12					; size = 4
?FindMonViewportObj2@TMonsterAIUtil@@QAEHHH@Z PROC	; TMonsterAIUtil::FindMonViewportObj2
; _this$ = ecx

; 48   : {

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00116	53		 push	 ebx
  00117	56		 push	 esi
  00118	57		 push	 edi
  00119	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 	if ( OBJMON_RANGE(iObjIndex) ==  FALSE || OBJMAX_RANGE(iTargetObjIndex) == FALSE )

  0011c	83 7d 08 00	 cmp	 DWORD PTR _iObjIndex$[ebp], 0
  00120	7d 09		 jge	 SHORT $LN10@FindMonVie@2
  00122	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  00129	eb 0f		 jmp	 SHORT $LN11@FindMonVie@2
$LN10@FindMonVie@2:
  0012b	33 c0		 xor	 eax, eax
  0012d	81 7d 08 c7 32
	00 00		 cmp	 DWORD PTR _iObjIndex$[ebp], 12999 ; 000032c7H
  00134	0f 9e c0	 setle	 al
  00137	89 45 b4	 mov	 DWORD PTR tv67[ebp], eax
$LN11@FindMonVie@2:
  0013a	83 7d b4 00	 cmp	 DWORD PTR tv67[ebp], 0
  0013e	74 24		 je	 SHORT $LN6@FindMonVie@2
  00140	83 7d 0c 00	 cmp	 DWORD PTR _iTargetObjIndex$[ebp], 0
  00144	7d 09		 jge	 SHORT $LN12@FindMonVie@2
  00146	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  0014d	eb 0f		 jmp	 SHORT $LN13@FindMonVie@2
$LN12@FindMonVie@2:
  0014f	33 c0		 xor	 eax, eax
  00151	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _iTargetObjIndex$[ebp], 14999 ; 00003a97H
  00158	0f 9e c0	 setle	 al
  0015b	89 45 b4	 mov	 DWORD PTR tv72[ebp], eax
$LN13@FindMonVie@2:
  0015e	83 7d b4 00	 cmp	 DWORD PTR tv72[ebp], 0
  00162	75 04		 jne	 SHORT $LN7@FindMonVie@2
$LN6@FindMonVie@2:

; 50   : 		return FALSE;

  00164	33 c0		 xor	 eax, eax
  00166	eb 66		 jmp	 SHORT $LN8@FindMonVie@2
$LN7@FindMonVie@2:

; 51   : 
; 52   : 	for ( int i=0;i<MAX_VIEWPORT_MONSTER;i++)

  00168	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227581[ebp], 0
  0016f	eb 09		 jmp	 SHORT $LN5@FindMonVie@2
$LN4@FindMonVie@2:
  00171	8b 45 f8	 mov	 eax, DWORD PTR _i$227581[ebp]
  00174	83 c0 01	 add	 eax, 1
  00177	89 45 f8	 mov	 DWORD PTR _i$227581[ebp], eax
$LN5@FindMonVie@2:
  0017a	83 7d f8 4b	 cmp	 DWORD PTR _i$227581[ebp], 75 ; 0000004bH
  0017e	7d 4c		 jge	 SHORT $LN3@FindMonVie@2

; 53   : 	{
; 54   : 		if ( gObj[iObjIndex].VpPlayer2[i].state != FALSE )

  00180	8b 45 08	 mov	 eax, DWORD PTR _iObjIndex$[ebp]
  00183	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00189	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018f	8b 4d f8	 mov	 ecx, DWORD PTR _i$227581[ebp]
  00192	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00195	0f be 94 08 ac
	08 00 00	 movsx	 edx, BYTE PTR [eax+ecx+2220]
  0019d	85 d2		 test	 edx, edx
  0019f	74 29		 je	 SHORT $LN2@FindMonVie@2

; 55   : 		{
; 56   : 			if ( iTargetObjIndex == gObj[iObjIndex].VpPlayer2[i].number )

  001a1	8b 45 08	 mov	 eax, DWORD PTR _iObjIndex$[ebp]
  001a4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  001aa	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b0	8b 4d f8	 mov	 ecx, DWORD PTR _i$227581[ebp]
  001b3	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  001b6	0f bf 94 08 ae
	08 00 00	 movsx	 edx, WORD PTR [eax+ecx+2222]
  001be	39 55 0c	 cmp	 DWORD PTR _iTargetObjIndex$[ebp], edx
  001c1	75 07		 jne	 SHORT $LN2@FindMonVie@2

; 57   : 			{
; 58   : 				return TRUE;

  001c3	b8 01 00 00 00	 mov	 eax, 1
  001c8	eb 04		 jmp	 SHORT $LN8@FindMonVie@2
$LN2@FindMonVie@2:

; 59   : 			}
; 60   : 		}
; 61   : 	}

  001ca	eb a5		 jmp	 SHORT $LN4@FindMonVie@2
$LN3@FindMonVie@2:

; 62   : 
; 63   : 	return FALSE;

  001cc	33 c0		 xor	 eax, eax
$LN8@FindMonVie@2:

; 64   : }

  001ce	5f		 pop	 edi
  001cf	5e		 pop	 esi
  001d0	5b		 pop	 ebx
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c2 08 00	 ret	 8
?FindMonViewportObj2@TMonsterAIUtil@@QAEHHH@Z ENDP	; TMonsterAIUtil::FindMonViewportObj2
_TEXT	ENDS
PUBLIC	?SendMonsterV2Msg@TMonsterAIUtil@@QAEXPAUOBJECTSTRUCT@@PAEH@Z ; TMonsterAIUtil::SendMonsterV2Msg
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227593 = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMsg$ = 12						; size = 4
_size$ = 16						; size = 4
?SendMonsterV2Msg@TMonsterAIUtil@@QAEXPAUOBJECTSTRUCT@@PAEH@Z PROC ; TMonsterAIUtil::SendMonsterV2Msg
; _this$ = ecx

; 70   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	83 ec 48	 sub	 esp, 72			; 00000048H
  001e6	53		 push	 ebx
  001e7	56		 push	 esi
  001e8	57		 push	 edi
  001e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 71   : 	for ( int i=0;i<MAX_VIEWPORT_MONSTER;i++)

  001ec	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227593[ebp], 0
  001f3	eb 09		 jmp	 SHORT $LN7@SendMonste
$LN6@SendMonste:
  001f5	8b 45 f8	 mov	 eax, DWORD PTR _i$227593[ebp]
  001f8	83 c0 01	 add	 eax, 1
  001fb	89 45 f8	 mov	 DWORD PTR _i$227593[ebp], eax
$LN7@SendMonste:
  001fe	83 7d f8 4b	 cmp	 DWORD PTR _i$227593[ebp], 75 ; 0000004bH
  00202	0f 8d a6 00 00
	00		 jge	 $LN8@SendMonste

; 72   : 	{
; 73   : 		if ( lpObj->VpPlayer2[i].type == OBJ_USER )

  00208	8b 45 f8	 mov	 eax, DWORD PTR _i$227593[ebp]
  0020b	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0020e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00211	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  00219	83 fa 01	 cmp	 edx, 1
  0021c	0f 85 87 00 00
	00		 jne	 $LN4@SendMonste

; 74   : 		{
; 75   : 			if ( lpObj->VpPlayer2[i].state != FALSE )

  00222	8b 45 f8	 mov	 eax, DWORD PTR _i$227593[ebp]
  00225	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00228	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0022b	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  00233	85 d2		 test	 edx, edx
  00235	74 72		 je	 SHORT $LN4@SendMonste

; 76   : 			{
; 77   : 				if ( lpObj->Connected > PLAYER_CONNECTED && lpObj->Live != FALSE)

  00237	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0023a	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0023e	7e 2f		 jle	 SHORT $LN2@SendMonste
  00240	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00243	0f b6 48 6a	 movzx	 ecx, BYTE PTR [eax+106]
  00247	85 c9		 test	 ecx, ecx
  00249	74 24		 je	 SHORT $LN2@SendMonste

; 78   : 				{
; 79   : 					DataSend(lpObj->VpPlayer2[i].number, lpMsg, size);

  0024b	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  0024e	50		 push	 eax
  0024f	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  00252	51		 push	 ecx
  00253	8b 55 f8	 mov	 edx, DWORD PTR _i$227593[ebp]
  00256	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00259	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0025c	0f bf 8c 10 ae
	08 00 00	 movsx	 ecx, WORD PTR [eax+edx+2222]
  00264	51		 push	 ecx
  00265	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0026a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 80   : 				}
; 81   : 				else

  0026d	eb 3a		 jmp	 SHORT $LN4@SendMonste
$LN2@SendMonste:

; 82   : 				{
; 83   : 					lpObj->VpPlayer2[i].number = -1;

  0026f	8b 45 f8	 mov	 eax, DWORD PTR _i$227593[ebp]
  00272	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00275	83 c9 ff	 or	 ecx, -1
  00278	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0027b	66 89 8c 02 ae
	08 00 00	 mov	 WORD PTR [edx+eax+2222], cx

; 84   : 					lpObj->VpPlayer2[i].state = FALSE;

  00283	8b 45 f8	 mov	 eax, DWORD PTR _i$227593[ebp]
  00286	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00289	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0028c	c6 84 01 ac 08
	00 00 00	 mov	 BYTE PTR [ecx+eax+2220], 0

; 85   : 					lpObj->VPCount2--;

  00294	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00297	8b 88 34 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3124]
  0029d	83 e9 01	 sub	 ecx, 1
  002a0	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  002a3	89 8a 34 0c 00
	00		 mov	 DWORD PTR [edx+3124], ecx
$LN4@SendMonste:

; 86   : 				}
; 87   : 			}
; 88   : 		}
; 89   : 	}

  002a9	e9 47 ff ff ff	 jmp	 $LN6@SendMonste
$LN8@SendMonste:

; 90   : }

  002ae	5f		 pop	 edi
  002af	5e		 pop	 esi
  002b0	5b		 pop	 ebx
  002b1	8b e5		 mov	 esp, ebp
  002b3	5d		 pop	 ebp
  002b4	c2 0c 00	 ret	 12			; 0000000cH
?SendMonsterV2Msg@TMonsterAIUtil@@QAEXPAUOBJECTSTRUCT@@PAEH@Z ENDP ; TMonsterAIUtil::SendMonsterV2Msg
_TEXT	ENDS
PUBLIC	?SendMonsterMoveMsg@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ; TMonsterAIUtil::SendMonsterMoveMsg
PUBLIC	?CheckMovingCondition@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ; TMonsterAIUtil::CheckMovingCondition
PUBLIC	__$ArrayPad$
PUBLIC	?FindPathToMoveMonster@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@HHHH@Z ; TMonsterAIUtil::FindPathToMoveMonster
EXTRN	?SetStandAttr@MapClass@@QAEXHH@Z:PROC		; MapClass::SetStandAttr
EXTRN	?ClearStandAttr@MapClass@@QAEXHH@Z:PROC		; MapClass::ClearStandAttr
EXTRN	?RoadPathTable@@3PAFA:BYTE			; RoadPathTable
EXTRN	?GetPathPacketDirPos@@YAEHH@Z:PROC		; GetPathPacketDirPos
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?PathFinding4@MapClass@@QAE_NHHHHPAUPATH_t@@@Z:PROC ; MapClass::PathFinding4
EXTRN	?PathFinding3@MapClass@@QAE_NHHHHPAUPATH_t@@@Z:PROC ; MapClass::PathFinding3
EXTRN	?PathFinding2@MapClass@@QAE_NHHHHPAUPATH_t@@@Z:PROC ; MapClass::PathFinding2
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$227625 = -172					; size = 4
_btTargetDir$227623 = -165				; size = 1
_iResultY$227622 = -164					; size = 4
_iResultX$227621 = -160					; size = 4
_iStartY$227620 = -156					; size = 4
_iStartX$227619 = -152					; size = 4
_iTargetY$227618 = -148					; size = 4
_iTargetX$227617 = -144					; size = 4
_bPathFound$ = -140					; size = 4
_Path$ = -136						; size = 128
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iTargetX$ = 12						; size = 4
_iTargetY$ = 16						; size = 4
_iMaxPathCount$ = 20					; size = 4
_bPreventOverMoving$ = 24				; size = 4
?FindPathToMoveMonster@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@HHHH@Z PROC ; TMonsterAIUtil::FindPathToMoveMonster
; _this$ = ecx

; 95   : {

  002c0	55		 push	 ebp
  002c1	8b ec		 mov	 ebp, esp
  002c3	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  002c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  002ce	33 c5		 xor	 eax, ebp
  002d0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  002d3	53		 push	 ebx
  002d4	56		 push	 esi
  002d5	57		 push	 edi
  002d6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 96   : 	if ( TMonsterAIUtil::CheckMovingCondition(lpObj)==FALSE)

  002d9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002dc	50		 push	 eax
  002dd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e0	e8 00 00 00 00	 call	 ?CheckMovingCondition@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ; TMonsterAIUtil::CheckMovingCondition
  002e5	85 c0		 test	 eax, eax
  002e7	75 07		 jne	 SHORT $LN11@FindPathTo

; 97   : 		return FALSE;

  002e9	33 c0		 xor	 eax, eax
  002eb	e9 ad 03 00 00	 jmp	 $LN12@FindPathTo
$LN11@FindPathTo:

; 98   : 
; 99   : 	PATH_t Path;
; 100  : 	BOOL bPathFound = FALSE;

  002f0	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _bPathFound$[ebp], 0

; 101  : 
; 102  : 	if ( bPreventOverMoving == 1 )

  002fa	83 7d 18 01	 cmp	 DWORD PTR _bPreventOverMoving$[ebp], 1
  002fe	75 4e		 jne	 SHORT $LN10@FindPathTo

; 103  : 		bPathFound = MapC[lpObj->MapNumber].PathFinding2(lpObj->X, lpObj->Y, iTargetX, iTargetY, &Path);

  00300	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _Path$[ebp]
  00306	50		 push	 eax
  00307	8b 4d 10	 mov	 ecx, DWORD PTR _iTargetY$[ebp]
  0030a	51		 push	 ecx
  0030b	8b 55 0c	 mov	 edx, DWORD PTR _iTargetX$[ebp]
  0030e	52		 push	 edx
  0030f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00312	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00319	51		 push	 ecx
  0031a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0031d	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  00324	50		 push	 eax
  00325	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00328	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  0032f	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00335	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0033b	e8 00 00 00 00	 call	 ?PathFinding2@MapClass@@QAE_NHHHHPAUPATH_t@@@Z ; MapClass::PathFinding2
  00340	0f b6 d0	 movzx	 edx, al
  00343	89 95 74 ff ff
	ff		 mov	 DWORD PTR _bPathFound$[ebp], edx
  00349	e9 9a 00 00 00	 jmp	 $LN9@FindPathTo
$LN10@FindPathTo:

; 104  : 	else if ( bPreventOverMoving == 2 )

  0034e	83 7d 18 02	 cmp	 DWORD PTR _bPreventOverMoving$[ebp], 2
  00352	75 4b		 jne	 SHORT $LN8@FindPathTo

; 105  : 		bPathFound = MapC[lpObj->MapNumber].PathFinding3(lpObj->X, lpObj->Y, iTargetX, iTargetY, &Path);

  00354	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _Path$[ebp]
  0035a	50		 push	 eax
  0035b	8b 4d 10	 mov	 ecx, DWORD PTR _iTargetY$[ebp]
  0035e	51		 push	 ecx
  0035f	8b 55 0c	 mov	 edx, DWORD PTR _iTargetX$[ebp]
  00362	52		 push	 edx
  00363	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00366	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0036d	51		 push	 ecx
  0036e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00371	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  00378	50		 push	 eax
  00379	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0037c	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  00383	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00389	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0038f	e8 00 00 00 00	 call	 ?PathFinding3@MapClass@@QAE_NHHHHPAUPATH_t@@@Z ; MapClass::PathFinding3
  00394	0f b6 d0	 movzx	 edx, al
  00397	89 95 74 ff ff
	ff		 mov	 DWORD PTR _bPathFound$[ebp], edx

; 106  : 	else

  0039d	eb 49		 jmp	 SHORT $LN9@FindPathTo
$LN8@FindPathTo:

; 107  : 		bPathFound = MapC[lpObj->MapNumber].PathFinding4(lpObj->X, lpObj->Y, iTargetX, iTargetY, &Path);

  0039f	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _Path$[ebp]
  003a5	50		 push	 eax
  003a6	8b 4d 10	 mov	 ecx, DWORD PTR _iTargetY$[ebp]
  003a9	51		 push	 ecx
  003aa	8b 55 0c	 mov	 edx, DWORD PTR _iTargetX$[ebp]
  003ad	52		 push	 edx
  003ae	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  003b1	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  003b8	51		 push	 ecx
  003b9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  003bc	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  003c3	50		 push	 eax
  003c4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  003c7	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  003ce	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  003d4	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  003da	e8 00 00 00 00	 call	 ?PathFinding4@MapClass@@QAE_NHHHHPAUPATH_t@@@Z ; MapClass::PathFinding4
  003df	0f b6 d0	 movzx	 edx, al
  003e2	89 95 74 ff ff
	ff		 mov	 DWORD PTR _bPathFound$[ebp], edx
$LN9@FindPathTo:

; 108  : 
; 109  : 	if (bPathFound )

  003e8	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _bPathFound$[ebp], 0
  003ef	0f 84 a6 02 00
	00		 je	 $LN6@FindPathTo

; 110  : 	{
; 111  : 		lpObj->m_LastMoveTime = GetTickCount();

  003f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  003fb	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  003fe	89 81 68 03 00
	00		 mov	 DWORD PTR [ecx+872], eax

; 112  : 
; 113  : 		int iTargetX;
; 114  : 		int iTargetY;
; 115  : 		int iStartX;
; 116  : 		int iStartY;
; 117  : 		int iResultX;
; 118  : 		int iResultY;
; 119  : 		BYTE btTargetDir = 0;

  00404	c6 85 5b ff ff
	ff 00		 mov	 BYTE PTR _btTargetDir$227623[ebp], 0

; 120  : 
; 121  : 		iStartX = lpObj->X;

  0040b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0040e	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00415	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _iStartX$227619[ebp], ecx

; 122  : 		iStartY = lpObj->Y;

  0041b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0041e	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00425	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _iStartY$227620[ebp], ecx

; 123  : 		iResultX = lpObj->X;

  0042b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0042e	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00435	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _iResultX$227621[ebp], ecx

; 124  : 		iResultY = lpObj->Y;

  0043b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0043e	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00445	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _iResultY$227622[ebp], ecx

; 125  : 		lpObj->PathCount = Path.PathNum;

  0044b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0044e	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _Path$[ebp]
  00454	89 88 84 01 00
	00		 mov	 DWORD PTR [eax+388], ecx

; 126  : 		lpObj->PathCur = 1;

  0045a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0045d	c7 80 88 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+392], 1

; 127  : 		lpObj->PathStartEnd = 1;

  00467	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0046a	c6 80 8c 01 00
	00 01		 mov	 BYTE PTR [eax+396], 1

; 128  : 
; 129  : 		if ( lpObj->PathCount > iMaxPathCount )

  00471	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00474	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  0047a	3b 4d 14	 cmp	 ecx, DWORD PTR _iMaxPathCount$[ebp]
  0047d	7e 0c		 jle	 SHORT $LN5@FindPathTo

; 130  : 			lpObj->PathCount = iMaxPathCount;

  0047f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00482	8b 4d 14	 mov	 ecx, DWORD PTR _iMaxPathCount$[ebp]
  00485	89 88 84 01 00
	00		 mov	 DWORD PTR [eax+388], ecx
$LN5@FindPathTo:

; 131  : 
; 132  : 		lpObj->PathX[0] = lpObj->X;

  0048b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0048e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00491	66 8b 91 44 01
	00 00		 mov	 dx, WORD PTR [ecx+324]
  00498	66 89 90 ac 01
	00 00		 mov	 WORD PTR [eax+428], dx

; 133  : 		lpObj->PathY[0] = lpObj->Y;

  0049f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004a2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  004a5	66 8b 91 46 01
	00 00		 mov	 dx, WORD PTR [ecx+326]
  004ac	66 89 90 ca 01
	00 00		 mov	 WORD PTR [eax+458], dx

; 134  : 		lpObj->PathDir[0] = lpObj->Dir;

  004b3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004b6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  004b9	8a 91 48 01 00
	00		 mov	 dl, BYTE PTR [ecx+328]
  004bf	88 90 e8 01 00
	00		 mov	 BYTE PTR [eax+488], dl

; 135  : 
; 136  : 		for(int n=1;n<lpObj->PathCount;n++)

  004c5	c7 85 54 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _n$227625[ebp], 1
  004cf	eb 0f		 jmp	 SHORT $LN4@FindPathTo
$LN3@FindPathTo:
  004d1	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _n$227625[ebp]
  004d7	83 c0 01	 add	 eax, 1
  004da	89 85 54 ff ff
	ff		 mov	 DWORD PTR _n$227625[ebp], eax
$LN4@FindPathTo:
  004e0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004e3	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _n$227625[ebp]
  004e9	3b 88 84 01 00
	00		 cmp	 ecx, DWORD PTR [eax+388]
  004ef	0f 8d cf 00 00
	00		 jge	 $LN2@FindPathTo

; 137  : 		{
; 138  : 			iTargetX = Path.PathX[n];

  004f5	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _n$227625[ebp]
  004fb	8b 8c 85 7c ff
	ff ff		 mov	 ecx, DWORD PTR _Path$[ebp+eax*4+4]
  00502	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _iTargetX$227617[ebp], ecx

; 139  : 			iTargetY = Path.PathY[n];

  00508	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _n$227625[ebp]
  0050e	8b 4c 85 b8	 mov	 ecx, DWORD PTR _Path$[ebp+eax*4+64]
  00512	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _iTargetY$227618[ebp], ecx

; 140  : 			btTargetDir = GetPathPacketDirPos(iTargetX-iStartX, iTargetY-iStartY);

  00518	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _iTargetY$227618[ebp]
  0051e	2b 85 64 ff ff
	ff		 sub	 eax, DWORD PTR _iStartY$227620[ebp]
  00524	50		 push	 eax
  00525	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _iTargetX$227617[ebp]
  0052b	2b 8d 68 ff ff
	ff		 sub	 ecx, DWORD PTR _iStartX$227619[ebp]
  00531	51		 push	 ecx
  00532	e8 00 00 00 00	 call	 ?GetPathPacketDirPos@@YAEHH@Z ; GetPathPacketDirPos
  00537	83 c4 08	 add	 esp, 8
  0053a	88 85 5b ff ff
	ff		 mov	 BYTE PTR _btTargetDir$227623[ebp], al

; 141  : 			lpObj->PathX[n] = iTargetX;

  00540	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _n$227625[ebp]
  00546	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00549	66 8b 95 70 ff
	ff ff		 mov	 dx, WORD PTR _iTargetX$227617[ebp]
  00550	66 89 94 41 ac
	01 00 00	 mov	 WORD PTR [ecx+eax*2+428], dx

; 142  : 			lpObj->PathY[n] = iTargetY;

  00558	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _n$227625[ebp]
  0055e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00561	66 8b 95 6c ff
	ff ff		 mov	 dx, WORD PTR _iTargetY$227618[ebp]
  00568	66 89 94 41 ca
	01 00 00	 mov	 WORD PTR [ecx+eax*2+458], dx

; 143  : 			lpObj->PathDir[n] = btTargetDir;

  00570	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00573	03 85 54 ff ff
	ff		 add	 eax, DWORD PTR _n$227625[ebp]
  00579	8a 8d 5b ff ff
	ff		 mov	 cl, BYTE PTR _btTargetDir$227623[ebp]
  0057f	88 88 e8 01 00
	00		 mov	 BYTE PTR [eax+488], cl

; 144  : 			iResultX += RoadPathTable[btTargetDir*2];

  00585	0f b6 85 5b ff
	ff ff		 movzx	 eax, BYTE PTR _btTargetDir$227623[ebp]
  0058c	d1 e0		 shl	 eax, 1
  0058e	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR ?RoadPathTable@@3PAFA[eax*2]
  00596	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _iResultX$227621[ebp]
  0059c	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _iResultX$227621[ebp], ecx

; 145  : 			iResultY += RoadPathTable[btTargetDir*2+1];

  005a2	0f b6 85 5b ff
	ff ff		 movzx	 eax, BYTE PTR _btTargetDir$227623[ebp]
  005a9	d1 e0		 shl	 eax, 1
  005ab	0f bf 0c 45 02
	00 00 00	 movsx	 ecx, WORD PTR ?RoadPathTable@@3PAFA[eax*2+2]
  005b3	03 8d 5c ff ff
	ff		 add	 ecx, DWORD PTR _iResultY$227622[ebp]
  005b9	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _iResultY$227622[ebp], ecx

; 146  : 		}

  005bf	e9 0d ff ff ff	 jmp	 $LN3@FindPathTo
$LN2@FindPathTo:

; 147  : 
; 148  : 		lpObj->MTX = iResultX;

  005c4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005c7	66 8b 8d 60 ff
	ff ff		 mov	 cx, WORD PTR _iResultX$227621[ebp]
  005ce	66 89 88 80 01
	00 00		 mov	 WORD PTR [eax+384], cx

; 149  : 		lpObj->MTY = iResultY;

  005d5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005d8	66 8b 8d 5c ff
	ff ff		 mov	 cx, WORD PTR _iResultY$227622[ebp]
  005df	66 89 88 82 01
	00 00		 mov	 WORD PTR [eax+386], cx

; 150  : 		lpObj->TX = iResultX;

  005e6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005e9	66 8b 8d 60 ff
	ff ff		 mov	 cx, WORD PTR _iResultX$227621[ebp]
  005f0	66 89 88 7c 01
	00 00		 mov	 WORD PTR [eax+380], cx

; 151  : 		lpObj->TY = iResultY;

  005f7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005fa	66 8b 8d 5c ff
	ff ff		 mov	 cx, WORD PTR _iResultY$227622[ebp]
  00601	66 89 88 7e 01
	00 00		 mov	 WORD PTR [eax+382], cx

; 152  : 
; 153  : 		if ( lpObj->PathCount > 0 )

  00608	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0060b	83 b8 84 01 00
	00 00		 cmp	 DWORD PTR [eax+388], 0
  00612	7e 74		 jle	 SHORT $LN1@FindPathTo

; 154  : 		{
; 155  : 			MapC[lpObj->MapNumber].ClearStandAttr(iStartX, iStartY);

  00614	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _iStartY$227620[ebp]
  0061a	50		 push	 eax
  0061b	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _iStartX$227619[ebp]
  00621	51		 push	 ecx
  00622	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00625	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  0062c	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00632	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00638	e8 00 00 00 00	 call	 ?ClearStandAttr@MapClass@@QAEXHH@Z ; MapClass::ClearStandAttr

; 156  : 			MapC[lpObj->MapNumber].SetStandAttr(iResultX, iResultY);

  0063d	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _iResultY$227622[ebp]
  00643	50		 push	 eax
  00644	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _iResultX$227621[ebp]
  0064a	51		 push	 ecx
  0064b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0064e	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  00655	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  0065b	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00661	e8 00 00 00 00	 call	 ?SetStandAttr@MapClass@@QAEXHH@Z ; MapClass::SetStandAttr

; 157  : 			lpObj->m_OldX = iStartX;

  00666	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00669	66 8b 8d 68 ff
	ff ff		 mov	 cx, WORD PTR _iStartX$227619[ebp]
  00670	66 89 88 78 01
	00 00		 mov	 WORD PTR [eax+376], cx

; 158  : 			lpObj->m_OldY = iStartY;

  00677	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0067a	66 8b 8d 64 ff
	ff ff		 mov	 cx, WORD PTR _iStartY$227620[ebp]
  00681	66 89 88 7a 01
	00 00		 mov	 WORD PTR [eax+378], cx
$LN1@FindPathTo:

; 159  : 		}
; 160  : 
; 161  : 		this->SendMonsterMoveMsg(lpObj);

  00688	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0068b	50		 push	 eax
  0068c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0068f	e8 00 00 00 00	 call	 ?SendMonsterMoveMsg@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ; TMonsterAIUtil::SendMonsterMoveMsg

; 162  : 		return TRUE;

  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	eb 02		 jmp	 SHORT $LN12@FindPathTo
$LN6@FindPathTo:

; 163  : 	}
; 164  : 
; 165  : 	return FALSE;

  0069b	33 c0		 xor	 eax, eax
$LN12@FindPathTo:

; 166  : }

  0069d	5f		 pop	 edi
  0069e	5e		 pop	 esi
  0069f	5b		 pop	 ebx
  006a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006a3	33 cd		 xor	 ecx, ebp
  006a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006aa	8b e5		 mov	 esp, ebp
  006ac	5d		 pop	 ebp
  006ad	c2 14 00	 ret	 20			; 00000014H
?FindPathToMoveMonster@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@HHHH@Z ENDP ; TMonsterAIUtil::FindPathToMoveMonster
_TEXT	ENDS
EXTRN	?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjSearchActiveEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?CheckMovingCondition@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; TMonsterAIUtil::CheckMovingCondition
; _this$ = ecx

; 172  : {

  006b0	55		 push	 ebp
  006b1	8b ec		 mov	 ebp, esp
  006b3	83 ec 44	 sub	 esp, 68			; 00000044H
  006b6	53		 push	 ebx
  006b7	56		 push	 esi
  006b8	57		 push	 edi
  006b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 173  : 	if ( !lpObj->Live )

  006bc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006bf	0f b6 48 6a	 movzx	 ecx, BYTE PTR [eax+106]
  006c3	85 c9		 test	 ecx, ecx
  006c5	75 07		 jne	 SHORT $LN7@CheckMovin

; 174  : 		return FALSE;

  006c7	33 c0		 xor	 eax, eax
  006c9	e9 83 00 00 00	 jmp	 $LN8@CheckMovin
$LN7@CheckMovin:

; 175  : 
; 176  : 	if ( lpObj->RegenOk > 0 )

  006ce	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006d1	0f be 88 a3 03
	00 00		 movsx	 ecx, BYTE PTR [eax+931]
  006d8	85 c9		 test	 ecx, ecx
  006da	7e 04		 jle	 SHORT $LN6@CheckMovin

; 177  : 		return FALSE;

  006dc	33 c0		 xor	 eax, eax
  006de	eb 71		 jmp	 SHORT $LN8@CheckMovin
$LN6@CheckMovin:

; 178  : 
; 179  : 	if ( lpObj->Teleport )

  006e0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006e3	0f be 88 a0 03
	00 00		 movsx	 ecx, BYTE PTR [eax+928]
  006ea	85 c9		 test	 ecx, ecx
  006ec	74 04		 je	 SHORT $LN5@CheckMovin

; 180  : 		return FALSE;

  006ee	33 c0		 xor	 eax, eax
  006f0	eb 5f		 jmp	 SHORT $LN8@CheckMovin
$LN5@CheckMovin:

; 181  : 
; 182  : 	if ( lpObj->m_State != 2 )

  006f2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006f5	83 b8 20 02 00
	00 02		 cmp	 DWORD PTR [eax+544], 2
  006fc	74 04		 je	 SHORT $LN4@CheckMovin

; 183  : 		return FALSE;

  006fe	33 c0		 xor	 eax, eax
  00700	eb 4f		 jmp	 SHORT $LN8@CheckMovin
$LN4@CheckMovin:

; 184  : 
; 185  : 	if(gObjSearchActiveEffect(lpObj, AT_ICE_ARROW) == 1 || gObjSearchActiveEffect(lpObj, AT_STUN) == 1)

  00702	6a 39		 push	 57			; 00000039H
  00704	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00707	50		 push	 eax
  00708	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0070d	83 c4 08	 add	 esp, 8
  00710	0f b6 c8	 movzx	 ecx, al
  00713	83 f9 01	 cmp	 ecx, 1
  00716	74 16		 je	 SHORT $LN2@CheckMovin
  00718	6a 3d		 push	 61			; 0000003dH
  0071a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0071d	50		 push	 eax
  0071e	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00723	83 c4 08	 add	 esp, 8
  00726	0f b6 c8	 movzx	 ecx, al
  00729	83 f9 01	 cmp	 ecx, 1
  0072c	75 04		 jne	 SHORT $LN3@CheckMovin
$LN2@CheckMovin:

; 186  : 	{
; 187  : 		return FALSE;

  0072e	33 c0		 xor	 eax, eax
  00730	eb 1f		 jmp	 SHORT $LN8@CheckMovin
$LN3@CheckMovin:

; 188  : 	}
; 189  : 
; 190  : 	if(gObjSearchActiveEffect(lpObj, AT_SLEEP) == 1)

  00732	6a 48		 push	 72			; 00000048H
  00734	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00737	50		 push	 eax
  00738	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0073d	83 c4 08	 add	 esp, 8
  00740	0f b6 c8	 movzx	 ecx, al
  00743	83 f9 01	 cmp	 ecx, 1
  00746	75 04		 jne	 SHORT $LN1@CheckMovin

; 191  : 	{
; 192  : 		return FALSE;

  00748	33 c0		 xor	 eax, eax
  0074a	eb 05		 jmp	 SHORT $LN8@CheckMovin
$LN1@CheckMovin:

; 193  : 	}
; 194  : 
; 195  : 	return TRUE;

  0074c	b8 01 00 00 00	 mov	 eax, 1
$LN8@CheckMovin:

; 196  : }

  00751	5f		 pop	 edi
  00752	5e		 pop	 esi
  00753	5b		 pop	 ebx
  00754	8b e5		 mov	 esp, ebp
  00756	5d		 pop	 ebp
  00757	c2 04 00	 ret	 4
?CheckMovingCondition@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; TMonsterAIUtil::CheckMovingCondition
_TEXT	ENDS
PUBLIC	?CheckMoveRange@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@HH@Z ; TMonsterAIUtil::CheckMoveRange
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iTargetX$ = 12						; size = 4
_iTargetY$ = 16						; size = 4
?CheckMoveRange@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; TMonsterAIUtil::CheckMoveRange
; _this$ = ecx

; 200  : {

  00760	55		 push	 ebp
  00761	8b ec		 mov	 ebp, esp
  00763	83 ec 44	 sub	 esp, 68			; 00000044H
  00766	53		 push	 ebx
  00767	56		 push	 esi
  00768	57		 push	 edi
  00769	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 201  : 	return FALSE;

  0076c	33 c0		 xor	 eax, eax

; 202  : }

  0076e	5f		 pop	 edi
  0076f	5e		 pop	 esi
  00770	5b		 pop	 ebx
  00771	8b e5		 mov	 esp, ebp
  00773	5d		 pop	 ebp
  00774	c2 0c 00	 ret	 12			; 0000000cH
?CheckMoveRange@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; TMonsterAIUtil::CheckMoveRange
_TEXT	ENDS
PUBLIC	?GetXYToPatrol@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ; TMonsterAIUtil::GetXYToPatrol
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	_rand:PROC
EXTRN	__except_handler4:PROC
xdata$x	SEGMENT
__sehtable$?GetXYToPatrol@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff88H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@GetXYToPat
	DD	FLAT:$LN9@GetXYToPat
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_attr$227659 = -39					; size = 1
_tpy$ = -38						; size = 1
_tpx$ = -37						; size = 1
_searchc$ = -36						; size = 4
_maxmoverange$ = -32					; size = 4
_this$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
?GetXYToPatrol@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; TMonsterAIUtil::GetXYToPatrol
; _this$ = ecx

; 207  : {

  00780	55		 push	 ebp
  00781	8b ec		 mov	 ebp, esp
  00783	6a fe		 push	 -2			; fffffffeH
  00785	68 00 00 00 00	 push	 OFFSET __sehtable$?GetXYToPatrol@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z
  0078a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0078f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00795	50		 push	 eax
  00796	83 c4 a8	 add	 esp, -88		; ffffffa8H
  00799	53		 push	 ebx
  0079a	56		 push	 esi
  0079b	57		 push	 edi
  0079c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  007a1	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  007a4	33 c5		 xor	 eax, ebp
  007a6	50		 push	 eax
  007a7	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  007aa	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  007b0	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  007b3	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 	int maxmoverange = lpObj->m_MoveRange*2+1;

  007b6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007b9	0f bf 88 ae 04
	00 00		 movsx	 ecx, WORD PTR [eax+1198]
  007c0	8d 54 09 01	 lea	 edx, DWORD PTR [ecx+ecx+1]
  007c4	89 55 e0	 mov	 DWORD PTR _maxmoverange$[ebp], edx

; 209  : 	int searchc=10;

  007c7	c7 45 dc 0a 00
	00 00		 mov	 DWORD PTR _searchc$[ebp], 10 ; 0000000aH

; 210  : 	lpObj->NextActionTime = 1000;

  007ce	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007d1	c7 80 bc 03 00
	00 e8 03 00 00	 mov	 DWORD PTR [eax+956], 1000 ; 000003e8H
$LN4@GetXYToPat:

; 211  : 	BYTE tpx;
; 212  : 	BYTE tpy;
; 213  : 
; 214  : 	while ( searchc-- != 0 )

  007db	8b 45 dc	 mov	 eax, DWORD PTR _searchc$[ebp]
  007de	8b 4d dc	 mov	 ecx, DWORD PTR _searchc$[ebp]
  007e1	83 e9 01	 sub	 ecx, 1
  007e4	89 4d dc	 mov	 DWORD PTR _searchc$[ebp], ecx
  007e7	85 c0		 test	 eax, eax
  007e9	0f 84 e9 00 00
	00		 je	 $LN3@GetXYToPat

; 215  : 	{
; 216  : 		__try

  007ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 217  : 		{
; 218  : 			tpx = (lpObj->X - lpObj->m_MoveRange) + (rand()%maxmoverange);

  007f6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007f9	0f bf 98 44 01
	00 00		 movsx	 ebx, WORD PTR [eax+324]
  00800	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00803	0f bf 91 ae 04
	00 00		 movsx	 edx, WORD PTR [ecx+1198]
  0080a	2b da		 sub	 ebx, edx
  0080c	e8 00 00 00 00	 call	 _rand
  00811	8b 4d e0	 mov	 ecx, DWORD PTR _maxmoverange$[ebp]
  00814	99		 cdq
  00815	f7 f9		 idiv	 ecx
  00817	03 da		 add	 ebx, edx
  00819	88 5d db	 mov	 BYTE PTR _tpx$[ebp], bl

; 219  : 			tpy = (lpObj->Y - lpObj->m_MoveRange) + (rand()%maxmoverange);

  0081c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0081f	0f bf 98 46 01
	00 00		 movsx	 ebx, WORD PTR [eax+326]
  00826	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00829	0f bf 91 ae 04
	00 00		 movsx	 edx, WORD PTR [ecx+1198]
  00830	2b da		 sub	 ebx, edx
  00832	e8 00 00 00 00	 call	 _rand
  00837	8b 4d e0	 mov	 ecx, DWORD PTR _maxmoverange$[ebp]
  0083a	99		 cdq
  0083b	f7 f9		 idiv	 ecx
  0083d	03 da		 add	 ebx, edx
  0083f	88 5d da	 mov	 BYTE PTR _tpy$[ebp], bl

; 220  : 		}

  00842	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00849	eb 17		 jmp	 SHORT $LN11@GetXYToPat
$LN8@GetXYToPat:
$LN13@GetXYToPat:

; 221  : 		__except(maxmoverange=1, 1)

  0084b	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _maxmoverange$[ebp], 1
  00852	b8 01 00 00 00	 mov	 eax, 1
$LN10@GetXYToPat:
$LN12@GetXYToPat:
  00857	c3		 ret	 0
$LN9@GetXYToPat:
  00858	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 222  : 		{
; 223  : 
; 224  : 		}

  0085b	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN11@GetXYToPat:

; 225  : 
; 226  : 		BYTE attr = MapC[lpObj->MapNumber].GetAttr(tpx, tpy);

  00862	0f b6 45 da	 movzx	 eax, BYTE PTR _tpy$[ebp]
  00866	50		 push	 eax
  00867	0f b6 4d db	 movzx	 ecx, BYTE PTR _tpx$[ebp]
  0086b	51		 push	 ecx
  0086c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0086f	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  00876	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  0087c	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00882	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00887	88 45 d9	 mov	 BYTE PTR _attr$227659[ebp], al

; 227  : 
; 228  : 		if ( (attr&1)!=1 && (attr&2)!=2 && (attr&4)!=4 && (attr&8)!= 8 )

  0088a	0f b6 45 d9	 movzx	 eax, BYTE PTR _attr$227659[ebp]
  0088e	83 e0 01	 and	 eax, 1
  00891	75 40		 jne	 SHORT $LN1@GetXYToPat
  00893	0f b6 45 d9	 movzx	 eax, BYTE PTR _attr$227659[ebp]
  00897	83 e0 02	 and	 eax, 2
  0089a	75 37		 jne	 SHORT $LN1@GetXYToPat
  0089c	0f b6 45 d9	 movzx	 eax, BYTE PTR _attr$227659[ebp]
  008a0	83 e0 04	 and	 eax, 4
  008a3	75 2e		 jne	 SHORT $LN1@GetXYToPat
  008a5	0f b6 45 d9	 movzx	 eax, BYTE PTR _attr$227659[ebp]
  008a9	83 e0 08	 and	 eax, 8
  008ac	75 25		 jne	 SHORT $LN1@GetXYToPat

; 229  : 		{
; 230  : 			lpObj->MTX = tpx;

  008ae	66 0f b6 45 db	 movzx	 ax, BYTE PTR _tpx$[ebp]
  008b3	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  008b6	66 89 81 80 01
	00 00		 mov	 WORD PTR [ecx+384], ax

; 231  : 			lpObj->MTY = tpy;

  008bd	66 0f b6 45 da	 movzx	 ax, BYTE PTR _tpy$[ebp]
  008c2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  008c5	66 89 81 82 01
	00 00		 mov	 WORD PTR [ecx+386], ax

; 232  : 			return TRUE;

  008cc	b8 01 00 00 00	 mov	 eax, 1
  008d1	eb 07		 jmp	 SHORT $LN7@GetXYToPat
$LN1@GetXYToPat:

; 233  : 		}
; 234  : 	}

  008d3	e9 03 ff ff ff	 jmp	 $LN4@GetXYToPat
$LN3@GetXYToPat:

; 235  : 
; 236  : 	return FALSE;

  008d8	33 c0		 xor	 eax, eax
$LN7@GetXYToPat:

; 237  : }

  008da	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  008dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  008e4	59		 pop	 ecx
  008e5	5f		 pop	 edi
  008e6	5e		 pop	 esi
  008e7	5b		 pop	 ebx
  008e8	8b e5		 mov	 esp, ebp
  008ea	5d		 pop	 ebp
  008eb	c2 04 00	 ret	 4
?GetXYToPatrol@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; TMonsterAIUtil::GetXYToPatrol
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	?GetXYToEascape@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ; TMonsterAIUtil::GetXYToEascape
EXTRN	?GetStandAttr@MapClass@@QAEHHH@Z:PROC		; MapClass::GetStandAttr
EXTRN	_sqrt:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv286 = -132						; size = 8
tv235 = -124						; size = 4
tv71 = -124						; size = 4
_dis$ = -56						; size = 4
_lpTargetObj$ = -52					; size = 4
_result$ = -48						; size = 4
_attr$ = -41						; size = 1
_searchcount$ = -40					; size = 4
_sn$ = -36						; size = 4
_searchp$ = -32						; size = 4
_ty$ = -28						; size = 4
_tx$ = -24						; size = 4
_mty$ = -20						; size = 4
_mtx$ = -16						; size = 4
_tpy$ = -12						; size = 4
_tpx$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?GetXYToEascape@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; TMonsterAIUtil::GetXYToEascape
; _this$ = ecx

; 241  : {

  008f0	55		 push	 ebp
  008f1	8b ec		 mov	 ebp, esp
  008f3	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  008f9	53		 push	 ebx
  008fa	56		 push	 esi
  008fb	57		 push	 edi
  008fc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 242  : 	int tpx;	// Target Player X
; 243  : 	int tpy;
; 244  : 	int mtx;	// Monster Target X
; 245  : 	int mty;
; 246  : 	int tx;
; 247  : 	int ty;
; 248  : 	int searchp = 0;

  008ff	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _searchp$[ebp], 0

; 249  : 	int sn = 0;

  00906	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _sn$[ebp], 0

; 250  : 	int searchcount = MAX_ROAD_PATH_TABLE/2-1;

  0090d	c7 45 d8 07 00
	00 00		 mov	 DWORD PTR _searchcount$[ebp], 7

; 251  : 	BYTE attr;
; 252  : 	BOOL result = 0;

  00914	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 253  : 	LPOBJ lpTargetObj;
; 254  : 
; 255  : 	if ( OBJMAX_RANGE(lpObj->TargetNumber) == FALSE )

  0091b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0091e	0f bf 88 58 04
	00 00		 movsx	 ecx, WORD PTR [eax+1112]
  00925	85 c9		 test	 ecx, ecx
  00927	7d 09		 jge	 SHORT $LN14@GetXYToEas
  00929	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  00930	eb 17		 jmp	 SHORT $LN15@GetXYToEas
$LN14@GetXYToEas:
  00932	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00935	0f bf 82 58 04
	00 00		 movsx	 eax, WORD PTR [edx+1112]
  0093c	33 c9		 xor	 ecx, ecx
  0093e	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00943	0f 9e c1	 setle	 cl
  00946	89 4d 84	 mov	 DWORD PTR tv71[ebp], ecx
$LN15@GetXYToEas:
  00949	83 7d 84 00	 cmp	 DWORD PTR tv71[ebp], 0
  0094d	75 07		 jne	 SHORT $LN11@GetXYToEas

; 256  : 	{
; 257  : 		return FALSE;

  0094f	33 c0		 xor	 eax, eax
  00951	e9 8e 02 00 00	 jmp	 $LN12@GetXYToEas
$LN11@GetXYToEas:

; 258  : 	}
; 259  : 
; 260  : 	lpTargetObj = &gObj[lpObj->TargetNumber];

  00956	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00959	0f bf 88 58 04
	00 00		 movsx	 ecx, WORD PTR [eax+1112]
  00960	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00966	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0096c	89 4d cc	 mov	 DWORD PTR _lpTargetObj$[ebp], ecx

; 261  : 	tpx = lpTargetObj->X;

  0096f	8b 45 cc	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00972	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00979	89 4d f8	 mov	 DWORD PTR _tpx$[ebp], ecx

; 262  : 	mtx = tpx;

  0097c	8b 45 f8	 mov	 eax, DWORD PTR _tpx$[ebp]
  0097f	89 45 f0	 mov	 DWORD PTR _mtx$[ebp], eax

; 263  : 	tpy = lpTargetObj->Y;

  00982	8b 45 cc	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00985	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0098c	89 4d f4	 mov	 DWORD PTR _tpy$[ebp], ecx

; 264  : 	mty = tpy;

  0098f	8b 45 f4	 mov	 eax, DWORD PTR _tpy$[ebp]
  00992	89 45 ec	 mov	 DWORD PTR _mty$[ebp], eax

; 265  : 	tx = lpObj->X;

  00995	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00998	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0099f	89 4d e8	 mov	 DWORD PTR _tx$[ebp], ecx

; 266  : 	ty = lpObj->Y;

  009a2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009a5	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  009ac	89 4d e4	 mov	 DWORD PTR _ty$[ebp], ecx

; 267  : 	int dis = (int)(lpObj->m_AttackRange / sqrt(2.0));

  009af	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009b2	0f bf 88 b0 04
	00 00		 movsx	 ecx, WORD PTR [eax+1200]
  009b9	89 4d 84	 mov	 DWORD PTR tv235[ebp], ecx
  009bc	db 45 84	 fild	 DWORD PTR tv235[ebp]
  009bf	83 ec 08	 sub	 esp, 8
  009c2	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4000000000000000
  009c8	dd 1c 24	 fstp	 QWORD PTR [esp]
  009cb	dd 9d 7c ff ff
	ff		 fstp	 QWORD PTR tv286[ebp]
  009d1	e8 00 00 00 00	 call	 _sqrt
  009d6	83 c4 08	 add	 esp, 8
  009d9	dc bd 7c ff ff
	ff		 fdivr	 QWORD PTR tv286[ebp]
  009df	e8 00 00 00 00	 call	 __ftol2_sse
  009e4	89 45 c8	 mov	 DWORD PTR _dis$[ebp], eax

; 268  : 
; 269  : 	if ( lpObj->X < mtx )

  009e7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009ea	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  009f1	3b 4d f0	 cmp	 ecx, DWORD PTR _mtx$[ebp]
  009f4	7d 09		 jge	 SHORT $LN10@GetXYToEas

; 270  : 	{
; 271  : 		tx -= dis;

  009f6	8b 45 e8	 mov	 eax, DWORD PTR _tx$[ebp]
  009f9	2b 45 c8	 sub	 eax, DWORD PTR _dis$[ebp]
  009fc	89 45 e8	 mov	 DWORD PTR _tx$[ebp], eax
$LN10@GetXYToEas:

; 272  : 	}
; 273  : 
; 274  : 	if ( lpObj->X > mtx )

  009ff	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a02	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00a09	3b 4d f0	 cmp	 ecx, DWORD PTR _mtx$[ebp]
  00a0c	7e 09		 jle	 SHORT $LN9@GetXYToEas

; 275  : 	{
; 276  : 		tx += dis;

  00a0e	8b 45 e8	 mov	 eax, DWORD PTR _tx$[ebp]
  00a11	03 45 c8	 add	 eax, DWORD PTR _dis$[ebp]
  00a14	89 45 e8	 mov	 DWORD PTR _tx$[ebp], eax
$LN9@GetXYToEas:

; 277  : 	}
; 278  : 
; 279  : 	if ( lpObj->Y < mty )

  00a17	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a1a	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00a21	3b 4d ec	 cmp	 ecx, DWORD PTR _mty$[ebp]
  00a24	7d 09		 jge	 SHORT $LN8@GetXYToEas

; 280  : 	{
; 281  : 		ty -= dis;

  00a26	8b 45 e4	 mov	 eax, DWORD PTR _ty$[ebp]
  00a29	2b 45 c8	 sub	 eax, DWORD PTR _dis$[ebp]
  00a2c	89 45 e4	 mov	 DWORD PTR _ty$[ebp], eax
$LN8@GetXYToEas:

; 282  : 	}
; 283  : 
; 284  : 	if ( lpObj->Y > mty )

  00a2f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a32	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00a39	3b 4d ec	 cmp	 ecx, DWORD PTR _mty$[ebp]
  00a3c	7e 09		 jle	 SHORT $LN7@GetXYToEas

; 285  : 	{
; 286  : 		ty += dis;

  00a3e	8b 45 e4	 mov	 eax, DWORD PTR _ty$[ebp]
  00a41	03 45 c8	 add	 eax, DWORD PTR _dis$[ebp]
  00a44	89 45 e4	 mov	 DWORD PTR _ty$[ebp], eax
$LN7@GetXYToEas:

; 287  : 	}
; 288  : 
; 289  : 	searchp = GetPathPacketDirPos( (lpObj->X - tx), (lpObj->Y - tx) ) * 2;

  00a47	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a4a	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00a51	2b 4d e8	 sub	 ecx, DWORD PTR _tx$[ebp]
  00a54	51		 push	 ecx
  00a55	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00a58	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  00a5f	2b 45 e8	 sub	 eax, DWORD PTR _tx$[ebp]
  00a62	50		 push	 eax
  00a63	e8 00 00 00 00	 call	 ?GetPathPacketDirPos@@YAEHH@Z ; GetPathPacketDirPos
  00a68	83 c4 08	 add	 esp, 8
  00a6b	0f b6 c8	 movzx	 ecx, al
  00a6e	d1 e1		 shl	 ecx, 1
  00a70	89 4d e0	 mov	 DWORD PTR _searchp$[ebp], ecx

; 290  : 
; 291  : 	if ( MapC[lpObj->MapNumber].GetStandAttr(tx, ty) == 0 )

  00a73	8b 45 e4	 mov	 eax, DWORD PTR _ty$[ebp]
  00a76	50		 push	 eax
  00a77	8b 4d e8	 mov	 ecx, DWORD PTR _tx$[ebp]
  00a7a	51		 push	 ecx
  00a7b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00a7e	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  00a85	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00a8b	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00a91	e8 00 00 00 00	 call	 ?GetStandAttr@MapClass@@QAEHHH@Z ; MapClass::GetStandAttr
  00a96	85 c0		 test	 eax, eax
  00a98	0f 85 d7 00 00
	00		 jne	 $LN6@GetXYToEas
$LN5@GetXYToEas:

; 292  : 	{
; 293  : 		while ( searchcount-- )

  00a9e	8b 45 d8	 mov	 eax, DWORD PTR _searchcount$[ebp]
  00aa1	8b 4d d8	 mov	 ecx, DWORD PTR _searchcount$[ebp]
  00aa4	83 e9 01	 sub	 ecx, 1
  00aa7	89 4d d8	 mov	 DWORD PTR _searchcount$[ebp], ecx
  00aaa	85 c0		 test	 eax, eax
  00aac	0f 84 bf 00 00
	00		 je	 $LN4@GetXYToEas

; 294  : 		{
; 295  : 			mtx = lpObj->X + RoadPathTable[searchp];

  00ab2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ab5	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00abc	8b 55 e0	 mov	 edx, DWORD PTR _searchp$[ebp]
  00abf	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR ?RoadPathTable@@3PAFA[edx*2]
  00ac7	03 c8		 add	 ecx, eax
  00ac9	89 4d f0	 mov	 DWORD PTR _mtx$[ebp], ecx

; 296  : 			mty = lpObj->Y + RoadPathTable[1+searchp];

  00acc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00acf	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00ad6	8b 55 e0	 mov	 edx, DWORD PTR _searchp$[ebp]
  00ad9	0f bf 04 55 02
	00 00 00	 movsx	 eax, WORD PTR ?RoadPathTable@@3PAFA[edx*2+2]
  00ae1	03 c8		 add	 ecx, eax
  00ae3	89 4d ec	 mov	 DWORD PTR _mty$[ebp], ecx

; 297  : 			attr = MapC[lpObj->MapNumber].GetAttr(mtx, mty);

  00ae6	8b 45 ec	 mov	 eax, DWORD PTR _mty$[ebp]
  00ae9	50		 push	 eax
  00aea	8b 4d f0	 mov	 ecx, DWORD PTR _mtx$[ebp]
  00aed	51		 push	 ecx
  00aee	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00af1	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  00af8	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00afe	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00b04	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00b09	88 45 d7	 mov	 BYTE PTR _attr$[ebp], al

; 298  : 			
; 299  : 			if ( (attr&1) != 1 && (attr&2) != 2 && (attr&4) != 4 && (attr&8) != 8  )

  00b0c	0f b6 45 d7	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b10	83 e0 01	 and	 eax, 1
  00b13	75 41		 jne	 SHORT $LN3@GetXYToEas
  00b15	0f b6 45 d7	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b19	83 e0 02	 and	 eax, 2
  00b1c	75 38		 jne	 SHORT $LN3@GetXYToEas
  00b1e	0f b6 45 d7	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b22	83 e0 04	 and	 eax, 4
  00b25	75 2f		 jne	 SHORT $LN3@GetXYToEas
  00b27	0f b6 45 d7	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b2b	83 e0 08	 and	 eax, 8
  00b2e	75 26		 jne	 SHORT $LN3@GetXYToEas

; 300  : 			{
; 301  : 				lpObj->MTX = mtx;

  00b30	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b33	66 8b 4d f0	 mov	 cx, WORD PTR _mtx$[ebp]
  00b37	66 89 88 80 01
	00 00		 mov	 WORD PTR [eax+384], cx

; 302  : 				lpObj->MTY = mty;

  00b3e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b41	66 8b 4d ec	 mov	 cx, WORD PTR _mty$[ebp]
  00b45	66 89 88 82 01
	00 00		 mov	 WORD PTR [eax+386], cx

; 303  : 				return TRUE;

  00b4c	b8 01 00 00 00	 mov	 eax, 1
  00b51	e9 8e 00 00 00	 jmp	 $LN12@GetXYToEas
$LN3@GetXYToEas:

; 304  : 			}
; 305  : 
; 306  : 			searchp += 2;

  00b56	8b 45 e0	 mov	 eax, DWORD PTR _searchp$[ebp]
  00b59	83 c0 02	 add	 eax, 2
  00b5c	89 45 e0	 mov	 DWORD PTR _searchp$[ebp], eax

; 307  : 
; 308  : 			if ( searchp > MAX_ROAD_PATH_TABLE-1 )

  00b5f	83 7d e0 0f	 cmp	 DWORD PTR _searchp$[ebp], 15 ; 0000000fH
  00b63	7e 07		 jle	 SHORT $LN2@GetXYToEas

; 309  : 			{
; 310  : 				searchp = 0;

  00b65	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _searchp$[ebp], 0
$LN2@GetXYToEas:

; 311  : 			}
; 312  : 		}

  00b6c	e9 2d ff ff ff	 jmp	 $LN5@GetXYToEas
$LN4@GetXYToEas:

; 313  : 
; 314  : 		return FALSE;

  00b71	33 c0		 xor	 eax, eax
  00b73	eb 6f		 jmp	 SHORT $LN12@GetXYToEas
$LN6@GetXYToEas:

; 315  : 	}
; 316  : 
; 317  : 	attr = MapC[lpObj->MapNumber].GetAttr(tx, ty);

  00b75	8b 45 e4	 mov	 eax, DWORD PTR _ty$[ebp]
  00b78	50		 push	 eax
  00b79	8b 4d e8	 mov	 ecx, DWORD PTR _tx$[ebp]
  00b7c	51		 push	 ecx
  00b7d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00b80	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  00b87	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00b8d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00b93	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00b98	88 45 d7	 mov	 BYTE PTR _attr$[ebp], al

; 318  : 
; 319  : 	if ( (attr&1) != 1 && (attr&2) != 2 && (attr&4) != 4 && (attr&8) != 8  )

  00b9b	0f b6 45 d7	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b9f	83 e0 01	 and	 eax, 1
  00ba2	75 3e		 jne	 SHORT $LN1@GetXYToEas
  00ba4	0f b6 45 d7	 movzx	 eax, BYTE PTR _attr$[ebp]
  00ba8	83 e0 02	 and	 eax, 2
  00bab	75 35		 jne	 SHORT $LN1@GetXYToEas
  00bad	0f b6 45 d7	 movzx	 eax, BYTE PTR _attr$[ebp]
  00bb1	83 e0 04	 and	 eax, 4
  00bb4	75 2c		 jne	 SHORT $LN1@GetXYToEas
  00bb6	0f b6 45 d7	 movzx	 eax, BYTE PTR _attr$[ebp]
  00bba	83 e0 08	 and	 eax, 8
  00bbd	75 23		 jne	 SHORT $LN1@GetXYToEas

; 320  : 	{
; 321  : 		lpObj->MTX = tx;

  00bbf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bc2	66 8b 4d e8	 mov	 cx, WORD PTR _tx$[ebp]
  00bc6	66 89 88 80 01
	00 00		 mov	 WORD PTR [eax+384], cx

; 322  : 		lpObj->MTY = ty;

  00bcd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bd0	66 8b 4d e4	 mov	 cx, WORD PTR _ty$[ebp]
  00bd4	66 89 88 82 01
	00 00		 mov	 WORD PTR [eax+386], cx

; 323  : 		return TRUE;

  00bdb	b8 01 00 00 00	 mov	 eax, 1
  00be0	eb 02		 jmp	 SHORT $LN12@GetXYToEas
$LN1@GetXYToEas:

; 324  : 	}
; 325  : 
; 326  : 	return FALSE;

  00be2	33 c0		 xor	 eax, eax
$LN12@GetXYToEas:

; 327  : }

  00be4	5f		 pop	 edi
  00be5	5e		 pop	 esi
  00be6	5b		 pop	 ebx
  00be7	8b e5		 mov	 esp, ebp
  00be9	5d		 pop	 ebp
  00bea	c2 04 00	 ret	 4
?GetXYToEascape@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; TMonsterAIUtil::GetXYToEascape
_TEXT	ENDS
PUBLIC	?GetXYToChase@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ; TMonsterAIUtil::GetXYToChase
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv280 = -124						; size = 8
tv229 = -116						; size = 4
tv71 = -116						; size = 4
_dis$ = -48						; size = 4
_lpTargetObj$ = -44					; size = 4
_result$ = -40						; size = 4
_attr$ = -33						; size = 1
_searchcount$ = -32					; size = 4
_sn$ = -28						; size = 4
_searchp$ = -24						; size = 4
_mty$ = -20						; size = 4
_mtx$ = -16						; size = 4
_tpy$ = -12						; size = 4
_tpx$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?GetXYToChase@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; TMonsterAIUtil::GetXYToChase
; _this$ = ecx

; 333  : {

  00bf0	55		 push	 ebp
  00bf1	8b ec		 mov	 ebp, esp
  00bf3	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00bf6	53		 push	 ebx
  00bf7	56		 push	 esi
  00bf8	57		 push	 edi
  00bf9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  : 	int tpx;	// Target Player X
; 335  : 	int tpy;
; 336  : 	int mtx;	// Monster Target X
; 337  : 	int mty;
; 338  : 	int searchp = 0;

  00bfc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _searchp$[ebp], 0

; 339  : 	int sn = 0;

  00c03	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _sn$[ebp], 0

; 340  : 	int searchcount = MAX_ROAD_PATH_TABLE/2-1;

  00c0a	c7 45 e0 07 00
	00 00		 mov	 DWORD PTR _searchcount$[ebp], 7

; 341  : 	BYTE attr;
; 342  : 	BOOL result = 0;

  00c11	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 343  : 	LPOBJ lpTargetObj;
; 344  : 
; 345  : 	if ( OBJMAX_RANGE(lpObj->TargetNumber) == FALSE )

  00c18	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c1b	0f bf 88 58 04
	00 00		 movsx	 ecx, WORD PTR [eax+1112]
  00c22	85 c9		 test	 ecx, ecx
  00c24	7d 09		 jge	 SHORT $LN14@GetXYToCha
  00c26	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  00c2d	eb 17		 jmp	 SHORT $LN15@GetXYToCha
$LN14@GetXYToCha:
  00c2f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c32	0f bf 82 58 04
	00 00		 movsx	 eax, WORD PTR [edx+1112]
  00c39	33 c9		 xor	 ecx, ecx
  00c3b	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00c40	0f 9e c1	 setle	 cl
  00c43	89 4d 8c	 mov	 DWORD PTR tv71[ebp], ecx
$LN15@GetXYToCha:
  00c46	83 7d 8c 00	 cmp	 DWORD PTR tv71[ebp], 0
  00c4a	75 07		 jne	 SHORT $LN11@GetXYToCha

; 346  : 	{
; 347  : 		return FALSE;

  00c4c	33 c0		 xor	 eax, eax
  00c4e	e9 6e 02 00 00	 jmp	 $LN12@GetXYToCha
$LN11@GetXYToCha:

; 348  : 	}
; 349  : 
; 350  : 	lpTargetObj = &gObj[lpObj->TargetNumber];

  00c53	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c56	0f bf 88 58 04
	00 00		 movsx	 ecx, WORD PTR [eax+1112]
  00c5d	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00c63	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c69	89 4d d4	 mov	 DWORD PTR _lpTargetObj$[ebp], ecx

; 351  : 	tpx = lpTargetObj->X;

  00c6c	8b 45 d4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00c6f	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00c76	89 4d f8	 mov	 DWORD PTR _tpx$[ebp], ecx

; 352  : 	mtx = tpx;

  00c79	8b 45 f8	 mov	 eax, DWORD PTR _tpx$[ebp]
  00c7c	89 45 f0	 mov	 DWORD PTR _mtx$[ebp], eax

; 353  : 	tpy = lpTargetObj->Y;

  00c7f	8b 45 d4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00c82	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00c89	89 4d f4	 mov	 DWORD PTR _tpy$[ebp], ecx

; 354  : 	mty = tpy;

  00c8c	8b 45 f4	 mov	 eax, DWORD PTR _tpy$[ebp]
  00c8f	89 45 ec	 mov	 DWORD PTR _mty$[ebp], eax

; 355  : 	int dis = (int)(lpObj->m_AttackRange / sqrt(2.0));

  00c92	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c95	0f bf 88 b0 04
	00 00		 movsx	 ecx, WORD PTR [eax+1200]
  00c9c	89 4d 8c	 mov	 DWORD PTR tv229[ebp], ecx
  00c9f	db 45 8c	 fild	 DWORD PTR tv229[ebp]
  00ca2	83 ec 08	 sub	 esp, 8
  00ca5	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4000000000000000
  00cab	dd 1c 24	 fstp	 QWORD PTR [esp]
  00cae	dd 5d 84	 fstp	 QWORD PTR tv280[ebp]
  00cb1	e8 00 00 00 00	 call	 _sqrt
  00cb6	83 c4 08	 add	 esp, 8
  00cb9	dc 7d 84	 fdivr	 QWORD PTR tv280[ebp]
  00cbc	e8 00 00 00 00	 call	 __ftol2_sse
  00cc1	89 45 d0	 mov	 DWORD PTR _dis$[ebp], eax

; 356  : 
; 357  : 	if ( lpObj->X < mtx )

  00cc4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cc7	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00cce	3b 4d f0	 cmp	 ecx, DWORD PTR _mtx$[ebp]
  00cd1	7d 09		 jge	 SHORT $LN10@GetXYToCha

; 358  : 	{
; 359  : 		tpx -= dis;

  00cd3	8b 45 f8	 mov	 eax, DWORD PTR _tpx$[ebp]
  00cd6	2b 45 d0	 sub	 eax, DWORD PTR _dis$[ebp]
  00cd9	89 45 f8	 mov	 DWORD PTR _tpx$[ebp], eax
$LN10@GetXYToCha:

; 360  : 	}
; 361  : 
; 362  : 	if ( lpObj->X > mtx )

  00cdc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cdf	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00ce6	3b 4d f0	 cmp	 ecx, DWORD PTR _mtx$[ebp]
  00ce9	7e 09		 jle	 SHORT $LN9@GetXYToCha

; 363  : 	{
; 364  : 		tpx += dis;

  00ceb	8b 45 f8	 mov	 eax, DWORD PTR _tpx$[ebp]
  00cee	03 45 d0	 add	 eax, DWORD PTR _dis$[ebp]
  00cf1	89 45 f8	 mov	 DWORD PTR _tpx$[ebp], eax
$LN9@GetXYToCha:

; 365  : 	}
; 366  : 
; 367  : 	if ( lpObj->Y < mty )

  00cf4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cf7	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00cfe	3b 4d ec	 cmp	 ecx, DWORD PTR _mty$[ebp]
  00d01	7d 09		 jge	 SHORT $LN8@GetXYToCha

; 368  : 	{
; 369  : 		tpy -= dis;

  00d03	8b 45 f4	 mov	 eax, DWORD PTR _tpy$[ebp]
  00d06	2b 45 d0	 sub	 eax, DWORD PTR _dis$[ebp]
  00d09	89 45 f4	 mov	 DWORD PTR _tpy$[ebp], eax
$LN8@GetXYToCha:

; 370  : 	}
; 371  : 
; 372  : 	if ( lpObj->Y > mty )

  00d0c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d0f	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00d16	3b 4d ec	 cmp	 ecx, DWORD PTR _mty$[ebp]
  00d19	7e 09		 jle	 SHORT $LN7@GetXYToCha

; 373  : 	{
; 374  : 		tpy += dis;

  00d1b	8b 45 f4	 mov	 eax, DWORD PTR _tpy$[ebp]
  00d1e	03 45 d0	 add	 eax, DWORD PTR _dis$[ebp]
  00d21	89 45 f4	 mov	 DWORD PTR _tpy$[ebp], eax
$LN7@GetXYToCha:

; 375  : 	}
; 376  : 
; 377  : 	searchp = GetPathPacketDirPos( (lpTargetObj->X - tpx), (lpTargetObj->Y - tpy) ) * 2;

  00d24	8b 45 d4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00d27	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00d2e	2b 4d f4	 sub	 ecx, DWORD PTR _tpy$[ebp]
  00d31	51		 push	 ecx
  00d32	8b 55 d4	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00d35	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  00d3c	2b 45 f8	 sub	 eax, DWORD PTR _tpx$[ebp]
  00d3f	50		 push	 eax
  00d40	e8 00 00 00 00	 call	 ?GetPathPacketDirPos@@YAEHH@Z ; GetPathPacketDirPos
  00d45	83 c4 08	 add	 esp, 8
  00d48	0f b6 c8	 movzx	 ecx, al
  00d4b	d1 e1		 shl	 ecx, 1
  00d4d	89 4d e8	 mov	 DWORD PTR _searchp$[ebp], ecx

; 378  : 
; 379  : 	if ( MapC[lpObj->MapNumber].GetStandAttr(tpx, tpy) == 0 )

  00d50	8b 45 f4	 mov	 eax, DWORD PTR _tpy$[ebp]
  00d53	50		 push	 eax
  00d54	8b 4d f8	 mov	 ecx, DWORD PTR _tpx$[ebp]
  00d57	51		 push	 ecx
  00d58	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00d5b	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  00d62	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00d68	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00d6e	e8 00 00 00 00	 call	 ?GetStandAttr@MapClass@@QAEHHH@Z ; MapClass::GetStandAttr
  00d73	85 c0		 test	 eax, eax
  00d75	0f 85 d7 00 00
	00		 jne	 $LN6@GetXYToCha
$LN5@GetXYToCha:

; 380  : 	{
; 381  : 		while ( searchcount-- )

  00d7b	8b 45 e0	 mov	 eax, DWORD PTR _searchcount$[ebp]
  00d7e	8b 4d e0	 mov	 ecx, DWORD PTR _searchcount$[ebp]
  00d81	83 e9 01	 sub	 ecx, 1
  00d84	89 4d e0	 mov	 DWORD PTR _searchcount$[ebp], ecx
  00d87	85 c0		 test	 eax, eax
  00d89	0f 84 bf 00 00
	00		 je	 $LN4@GetXYToCha

; 382  : 		{
; 383  : 			mtx = lpTargetObj->X + RoadPathTable[searchp];

  00d8f	8b 45 d4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00d92	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00d99	8b 55 e8	 mov	 edx, DWORD PTR _searchp$[ebp]
  00d9c	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR ?RoadPathTable@@3PAFA[edx*2]
  00da4	03 c8		 add	 ecx, eax
  00da6	89 4d f0	 mov	 DWORD PTR _mtx$[ebp], ecx

; 384  : 			mty = lpTargetObj->Y + RoadPathTable[1+searchp];

  00da9	8b 45 d4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00dac	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00db3	8b 55 e8	 mov	 edx, DWORD PTR _searchp$[ebp]
  00db6	0f bf 04 55 02
	00 00 00	 movsx	 eax, WORD PTR ?RoadPathTable@@3PAFA[edx*2+2]
  00dbe	03 c8		 add	 ecx, eax
  00dc0	89 4d ec	 mov	 DWORD PTR _mty$[ebp], ecx

; 385  : 			attr = MapC[lpObj->MapNumber].GetAttr(mtx, mty);

  00dc3	8b 45 ec	 mov	 eax, DWORD PTR _mty$[ebp]
  00dc6	50		 push	 eax
  00dc7	8b 4d f0	 mov	 ecx, DWORD PTR _mtx$[ebp]
  00dca	51		 push	 ecx
  00dcb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00dce	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  00dd5	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00ddb	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00de1	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00de6	88 45 df	 mov	 BYTE PTR _attr$[ebp], al

; 386  : 			
; 387  : 			if ( (attr&1) != 1 && (attr&2) != 2 && (attr&4) != 4 && (attr&8) != 8  )

  00de9	0f b6 45 df	 movzx	 eax, BYTE PTR _attr$[ebp]
  00ded	83 e0 01	 and	 eax, 1
  00df0	75 41		 jne	 SHORT $LN3@GetXYToCha
  00df2	0f b6 45 df	 movzx	 eax, BYTE PTR _attr$[ebp]
  00df6	83 e0 02	 and	 eax, 2
  00df9	75 38		 jne	 SHORT $LN3@GetXYToCha
  00dfb	0f b6 45 df	 movzx	 eax, BYTE PTR _attr$[ebp]
  00dff	83 e0 04	 and	 eax, 4
  00e02	75 2f		 jne	 SHORT $LN3@GetXYToCha
  00e04	0f b6 45 df	 movzx	 eax, BYTE PTR _attr$[ebp]
  00e08	83 e0 08	 and	 eax, 8
  00e0b	75 26		 jne	 SHORT $LN3@GetXYToCha

; 388  : 			{
; 389  : 				lpObj->MTX = mtx;

  00e0d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e10	66 8b 4d f0	 mov	 cx, WORD PTR _mtx$[ebp]
  00e14	66 89 88 80 01
	00 00		 mov	 WORD PTR [eax+384], cx

; 390  : 				lpObj->MTY = mty;

  00e1b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e1e	66 8b 4d ec	 mov	 cx, WORD PTR _mty$[ebp]
  00e22	66 89 88 82 01
	00 00		 mov	 WORD PTR [eax+386], cx

; 391  : 				return TRUE;

  00e29	b8 01 00 00 00	 mov	 eax, 1
  00e2e	e9 8e 00 00 00	 jmp	 $LN12@GetXYToCha
$LN3@GetXYToCha:

; 392  : 			}
; 393  : 
; 394  : 			searchp += 2;

  00e33	8b 45 e8	 mov	 eax, DWORD PTR _searchp$[ebp]
  00e36	83 c0 02	 add	 eax, 2
  00e39	89 45 e8	 mov	 DWORD PTR _searchp$[ebp], eax

; 395  : 
; 396  : 			if ( searchp > MAX_ROAD_PATH_TABLE-1 )

  00e3c	83 7d e8 0f	 cmp	 DWORD PTR _searchp$[ebp], 15 ; 0000000fH
  00e40	7e 07		 jle	 SHORT $LN2@GetXYToCha

; 397  : 			{
; 398  : 				searchp = 0;

  00e42	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _searchp$[ebp], 0
$LN2@GetXYToCha:

; 399  : 			}
; 400  : 		}

  00e49	e9 2d ff ff ff	 jmp	 $LN5@GetXYToCha
$LN4@GetXYToCha:

; 401  : 
; 402  : 		return FALSE;

  00e4e	33 c0		 xor	 eax, eax
  00e50	eb 6f		 jmp	 SHORT $LN12@GetXYToCha
$LN6@GetXYToCha:

; 403  : 	}
; 404  : 
; 405  : 	attr = MapC[lpObj->MapNumber].GetAttr(tpx, tpy);

  00e52	8b 45 f4	 mov	 eax, DWORD PTR _tpy$[ebp]
  00e55	50		 push	 eax
  00e56	8b 4d f8	 mov	 ecx, DWORD PTR _tpx$[ebp]
  00e59	51		 push	 ecx
  00e5a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00e5d	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  00e64	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00e6a	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00e70	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00e75	88 45 df	 mov	 BYTE PTR _attr$[ebp], al

; 406  : 
; 407  : 	if ( (attr&1) != 1 && (attr&2) != 2 && (attr&4) != 4 && (attr&8) != 8  )

  00e78	0f b6 45 df	 movzx	 eax, BYTE PTR _attr$[ebp]
  00e7c	83 e0 01	 and	 eax, 1
  00e7f	75 3e		 jne	 SHORT $LN1@GetXYToCha
  00e81	0f b6 45 df	 movzx	 eax, BYTE PTR _attr$[ebp]
  00e85	83 e0 02	 and	 eax, 2
  00e88	75 35		 jne	 SHORT $LN1@GetXYToCha
  00e8a	0f b6 45 df	 movzx	 eax, BYTE PTR _attr$[ebp]
  00e8e	83 e0 04	 and	 eax, 4
  00e91	75 2c		 jne	 SHORT $LN1@GetXYToCha
  00e93	0f b6 45 df	 movzx	 eax, BYTE PTR _attr$[ebp]
  00e97	83 e0 08	 and	 eax, 8
  00e9a	75 23		 jne	 SHORT $LN1@GetXYToCha

; 408  : 	{
; 409  : 		lpObj->MTX = tpx;

  00e9c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e9f	66 8b 4d f8	 mov	 cx, WORD PTR _tpx$[ebp]
  00ea3	66 89 88 80 01
	00 00		 mov	 WORD PTR [eax+384], cx

; 410  : 		lpObj->MTY = tpy;

  00eaa	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ead	66 8b 4d f4	 mov	 cx, WORD PTR _tpy$[ebp]
  00eb1	66 89 88 82 01
	00 00		 mov	 WORD PTR [eax+386], cx

; 411  : 		return TRUE;

  00eb8	b8 01 00 00 00	 mov	 eax, 1
  00ebd	eb 02		 jmp	 SHORT $LN12@GetXYToCha
$LN1@GetXYToCha:

; 412  : 	}
; 413  : 
; 414  : 	return FALSE;

  00ebf	33 c0		 xor	 eax, eax
$LN12@GetXYToCha:

; 415  : }

  00ec1	5f		 pop	 edi
  00ec2	5e		 pop	 esi
  00ec3	5b		 pop	 ebx
  00ec4	8b e5		 mov	 esp, ebp
  00ec6	5d		 pop	 ebp
  00ec7	c2 04 00	 ret	 4
?GetXYToChase@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; TMonsterAIUtil::GetXYToChase
_TEXT	ENDS
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMove$ = -12						; size = 8
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?SendMonsterMoveMsg@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; TMonsterAIUtil::SendMonsterMoveMsg
; _this$ = ecx

; 421  : {

  00ed0	55		 push	 ebp
  00ed1	8b ec		 mov	 ebp, esp
  00ed3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00ed6	53		 push	 ebx
  00ed7	56		 push	 esi
  00ed8	57		 push	 edi
  00ed9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 422  : 	PMSG_RECVMOVE pMove;
; 423  : 
; 424  : 	PHeadSetB((LPBYTE)&pMove, PROTOCOL_MOVE, sizeof(pMove));

  00edc	6a 08		 push	 8
  00ede	68 d4 00 00 00	 push	 212			; 000000d4H
  00ee3	8d 45 f4	 lea	 eax, DWORD PTR _pMove$[ebp]
  00ee6	50		 push	 eax
  00ee7	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00eec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 425  : 	pMove.NumberH = SET_NUMBERH(lpObj->m_Index);

  00eef	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ef2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ef4	c1 e9 08	 shr	 ecx, 8
  00ef7	88 4d f7	 mov	 BYTE PTR _pMove$[ebp+3], cl

; 426  : 	pMove.NumberL = SET_NUMBERL(lpObj->m_Index);

  00efa	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00efd	8b 08		 mov	 ecx, DWORD PTR [eax]
  00eff	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00f05	88 4d f8	 mov	 BYTE PTR _pMove$[ebp+4], cl

; 427  : 	pMove.X = lpObj->MTX;

  00f08	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f0b	8a 88 80 01 00
	00		 mov	 cl, BYTE PTR [eax+384]
  00f11	88 4d f9	 mov	 BYTE PTR _pMove$[ebp+5], cl

; 428  : 	pMove.Y = lpObj->MTY;

  00f14	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f17	8a 88 82 01 00
	00		 mov	 cl, BYTE PTR [eax+386]
  00f1d	88 4d fa	 mov	 BYTE PTR _pMove$[ebp+6], cl

; 429  : 	pMove.Path = lpObj->Dir << 4;

  00f20	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f23	0f b6 88 48 01
	00 00		 movzx	 ecx, BYTE PTR [eax+328]
  00f2a	c1 e1 04	 shl	 ecx, 4
  00f2d	88 4d fb	 mov	 BYTE PTR _pMove$[ebp+7], cl

; 430  : 
; 431  : 	this->SendMonsterV2Msg(lpObj, (LPBYTE)&pMove, pMove.h.size);

  00f30	0f b6 45 f5	 movzx	 eax, BYTE PTR _pMove$[ebp+1]
  00f34	50		 push	 eax
  00f35	8d 4d f4	 lea	 ecx, DWORD PTR _pMove$[ebp]
  00f38	51		 push	 ecx
  00f39	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00f3c	52		 push	 edx
  00f3d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f40	e8 00 00 00 00	 call	 ?SendMonsterV2Msg@TMonsterAIUtil@@QAEXPAUOBJECTSTRUCT@@PAEH@Z ; TMonsterAIUtil::SendMonsterV2Msg

; 432  : 	return TRUE;

  00f45	b8 01 00 00 00	 mov	 eax, 1

; 433  : }

  00f4a	5f		 pop	 edi
  00f4b	5e		 pop	 esi
  00f4c	5b		 pop	 ebx
  00f4d	8b e5		 mov	 esp, ebp
  00f4f	5d		 pop	 ebp
  00f50	c2 04 00	 ret	 4
?SendMonsterMoveMsg@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; TMonsterAIUtil::SendMonsterMoveMsg
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SendChattingMsg@TMonsterAIUtil@@QAAXHPADZZ	; TMonsterAIUtil::SendChattingMsg
EXTRN	?ChatTargetSend@@YAXPAUOBJECTSTRUCT@@PADH@Z:PROC ; ChatTargetSend
EXTRN	_memcpy:PROC
EXTRN	_vsprintf:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv137 = -660						; size = 4
tv68 = -660						; size = 4
_tObjNum$227753 = -592					; size = 4
_i$227748 = -588					; size = 4
_szChat$ = -584						; size = 60
_pArguments$ = -524					; size = 4
_szBuffer$ = -520					; size = 512
_lpObj$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_iObjIndex$ = 12					; size = 4
_lpszMsg$ = 16						; size = 4
?SendChattingMsg@TMonsterAIUtil@@QAAXHPADZZ PROC	; TMonsterAIUtil::SendChattingMsg

; 438  : {

  00f60	55		 push	 ebp
  00f61	8b ec		 mov	 ebp, esp
  00f63	81 ec 94 02 00
	00		 sub	 esp, 660		; 00000294H
  00f69	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00f6e	33 c5		 xor	 eax, ebp
  00f70	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00f73	53		 push	 ebx
  00f74	56		 push	 esi
  00f75	57		 push	 edi

; 439  : 	if ( !lpszMsg )

  00f76	83 7d 10 00	 cmp	 DWORD PTR _lpszMsg$[ebp], 0
  00f7a	75 05		 jne	 SHORT $LN7@SendChatti

; 440  : 		return;

  00f7c	e9 70 01 00 00	 jmp	 $LN8@SendChatti
$LN7@SendChatti:

; 441  : 
; 442  : 	if ( !OBJMAX_RANGE(iObjIndex))

  00f81	83 7d 0c 00	 cmp	 DWORD PTR _iObjIndex$[ebp], 0
  00f85	7d 0c		 jge	 SHORT $LN10@SendChatti
  00f87	c7 85 6c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
  00f91	eb 12		 jmp	 SHORT $LN11@SendChatti
$LN10@SendChatti:
  00f93	33 c0		 xor	 eax, eax
  00f95	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _iObjIndex$[ebp], 14999 ; 00003a97H
  00f9c	0f 9e c0	 setle	 al
  00f9f	89 85 6c fd ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
$LN11@SendChatti:
  00fa5	83 bd 6c fd ff
	ff 00		 cmp	 DWORD PTR tv68[ebp], 0
  00fac	75 05		 jne	 SHORT $LN6@SendChatti

; 443  : 		return;

  00fae	e9 3e 01 00 00	 jmp	 $LN8@SendChatti
$LN6@SendChatti:

; 444  : 
; 445  : 	LPOBJ lpObj = &gObj[iObjIndex];

  00fb3	8b 45 0c	 mov	 eax, DWORD PTR _iObjIndex$[ebp]
  00fb6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00fbc	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00fc2	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 446  : 	char szBuffer[512] = "";

  00fc5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00fca	88 85 f8 fd ff
	ff		 mov	 BYTE PTR _szBuffer$[ebp], al
  00fd0	68 ff 01 00 00	 push	 511			; 000001ffH
  00fd5	6a 00		 push	 0
  00fd7	8d 85 f9 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp+1]
  00fdd	50		 push	 eax
  00fde	e8 00 00 00 00	 call	 _memset
  00fe3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 447  : 	va_list pArguments;
; 448  : 
; 449  : 	va_start(pArguments, lpszMsg);

  00fe6	8d 45 14	 lea	 eax, DWORD PTR _lpszMsg$[ebp+4]
  00fe9	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _pArguments$[ebp], eax

; 450  : 	vsprintf(szBuffer, lpszMsg, pArguments);

  00fef	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _pArguments$[ebp]
  00ff5	50		 push	 eax
  00ff6	8b 4d 10	 mov	 ecx, DWORD PTR _lpszMsg$[ebp]
  00ff9	51		 push	 ecx
  00ffa	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR _szBuffer$[ebp]
  01000	52		 push	 edx
  01001	e8 00 00 00 00	 call	 _vsprintf
  01006	83 c4 0c	 add	 esp, 12			; 0000000cH

; 451  : 	va_end(pArguments);

  01009	c7 85 f4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$[ebp], 0

; 452  : 
; 453  : 	char szChat[60] = {0};

  01013	c6 85 b8 fd ff
	ff 00		 mov	 BYTE PTR _szChat$[ebp], 0
  0101a	6a 3b		 push	 59			; 0000003bH
  0101c	6a 00		 push	 0
  0101e	8d 85 b9 fd ff
	ff		 lea	 eax, DWORD PTR _szChat$[ebp+1]
  01024	50		 push	 eax
  01025	e8 00 00 00 00	 call	 _memset
  0102a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 454  : 	memcpy(szChat, szBuffer, sizeof(szChat)-1);

  0102d	6a 3b		 push	 59			; 0000003bH
  0102f	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  01035	50		 push	 eax
  01036	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _szChat$[ebp]
  0103c	51		 push	 ecx
  0103d	e8 00 00 00 00	 call	 _memcpy
  01042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 455  : 
; 456  : 	for(int i=0;i<MAX_VIEWPORT_MONSTER;i++)

  01045	c7 85 b4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$227748[ebp], 0
  0104f	eb 0f		 jmp	 SHORT $LN5@SendChatti
$LN4@SendChatti:
  01051	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _i$227748[ebp]
  01057	83 c0 01	 add	 eax, 1
  0105a	89 85 b4 fd ff
	ff		 mov	 DWORD PTR _i$227748[ebp], eax
$LN5@SendChatti:
  01060	83 bd b4 fd ff
	ff 4b		 cmp	 DWORD PTR _i$227748[ebp], 75 ; 0000004bH
  01067	0f 8d 84 00 00
	00		 jge	 $LN8@SendChatti

; 457  : 	{
; 458  : 		if ( lpObj->VpPlayer2[i].state )

  0106d	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _i$227748[ebp]
  01073	6b c0 0c	 imul	 eax, 12			; 0000000cH
  01076	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01079	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  01081	85 d2		 test	 edx, edx
  01083	74 67		 je	 SHORT $LN2@SendChatti

; 459  : 		{
; 460  : 			int tObjNum = lpObj->VpPlayer2[i].number;

  01085	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _i$227748[ebp]
  0108b	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0108e	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01091	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  01099	89 95 b0 fd ff
	ff		 mov	 DWORD PTR _tObjNum$227753[ebp], edx

; 461  : 
; 462  : 			if ( OBJMAX_RANGE(tObjNum) )

  0109f	83 bd b0 fd ff
	ff 00		 cmp	 DWORD PTR _tObjNum$227753[ebp], 0
  010a6	7d 0c		 jge	 SHORT $LN12@SendChatti
  010a8	c7 85 6c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
  010b2	eb 15		 jmp	 SHORT $LN13@SendChatti
$LN12@SendChatti:
  010b4	33 c0		 xor	 eax, eax
  010b6	81 bd b0 fd ff
	ff 97 3a 00 00	 cmp	 DWORD PTR _tObjNum$227753[ebp], 14999 ; 00003a97H
  010c0	0f 9e c0	 setle	 al
  010c3	89 85 6c fd ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
$LN13@SendChatti:
  010c9	83 bd 6c fd ff
	ff 00		 cmp	 DWORD PTR tv137[ebp], 0
  010d0	74 1a		 je	 SHORT $LN2@SendChatti

; 463  : 			{
; 464  : 				ChatTargetSend(lpObj, szChat, tObjNum);

  010d2	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _tObjNum$227753[ebp]
  010d8	50		 push	 eax
  010d9	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _szChat$[ebp]
  010df	51		 push	 ecx
  010e0	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  010e3	52		 push	 edx
  010e4	e8 00 00 00 00	 call	 ?ChatTargetSend@@YAXPAUOBJECTSTRUCT@@PADH@Z ; ChatTargetSend
  010e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendChatti:

; 465  : 			}
; 466  : 		}
; 467  : 	}

  010ec	e9 60 ff ff ff	 jmp	 $LN4@SendChatti
$LN8@SendChatti:

; 468  : }

  010f1	5f		 pop	 edi
  010f2	5e		 pop	 esi
  010f3	5b		 pop	 ebx
  010f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  010f7	33 cd		 xor	 ecx, ebp
  010f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  010fe	8b e5		 mov	 esp, ebp
  01100	5d		 pop	 ebp
  01101	c3		 ret	 0
?SendChattingMsg@TMonsterAIUtil@@QAAXHPADZZ ENDP	; TMonsterAIUtil::SendChattingMsg
_TEXT	ENDS
END
