; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\NewJewels.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gNewJewels@@3VcNewJewels@@A			; gNewJewels
_BSS	SEGMENT
?gNewJewels@@3VcNewJewels@@A DB 0d0H DUP (?)		; gNewJewels
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetNewWingExlOpt@@YAEE@Z			; GetNewWingExlOpt
EXTRN	_rand:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\newjewels.cpp
_TEXT	SEGMENT
_iRand$ = -32						; size = 4
_arrOption$ = -28					; size = 16
_iCount$ = -12						; size = 4
_iEmptyCount$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_NOption$ = 8						; size = 1
?GetNewWingExlOpt@@YAEE@Z PROC				; GetNewWingExlOpt

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 48   : 	int iEmptyCount = 0;

  00013	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iEmptyCount$[ebp], 0

; 49   : 	int iCount = 0;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0

; 50   : 	int arrOption[4] = { 0, 0, 0, 0 };

  00021	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _arrOption$[ebp], 0
  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _arrOption$[ebp+4], 0
  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _arrOption$[ebp+8], 0
  00036	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _arrOption$[ebp+12], 0

; 51   : 	// ----
; 52   : 	if((NOption&1) == 1)

  0003d	0f b6 45 08	 movzx	 eax, BYTE PTR _NOption$[ebp]
  00041	83 e0 01	 and	 eax, 1
  00044	74 0b		 je	 SHORT $LN9@GetNewWing

; 53   : 	{
; 54   : 		iCount++;

  00046	8b 45 f4	 mov	 eax, DWORD PTR _iCount$[ebp]
  00049	83 c0 01	 add	 eax, 1
  0004c	89 45 f4	 mov	 DWORD PTR _iCount$[ebp], eax

; 55   : 	}
; 56   : 	else

  0004f	eb 14		 jmp	 SHORT $LN8@GetNewWing
$LN9@GetNewWing:

; 57   : 	{
; 58   : 		arrOption[iEmptyCount] = 1;

  00051	8b 45 f8	 mov	 eax, DWORD PTR _iEmptyCount$[ebp]
  00054	c7 44 85 e4 01
	00 00 00	 mov	 DWORD PTR _arrOption$[ebp+eax*4], 1

; 59   : 		iEmptyCount++;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _iEmptyCount$[ebp]
  0005f	83 c0 01	 add	 eax, 1
  00062	89 45 f8	 mov	 DWORD PTR _iEmptyCount$[ebp], eax
$LN8@GetNewWing:

; 60   : 	}
; 61   : 	// ----
; 62   : 	if((NOption&2) == 2)

  00065	0f b6 45 08	 movzx	 eax, BYTE PTR _NOption$[ebp]
  00069	83 e0 02	 and	 eax, 2
  0006c	74 0b		 je	 SHORT $LN7@GetNewWing

; 63   : 	{
; 64   : 		iCount++;

  0006e	8b 45 f4	 mov	 eax, DWORD PTR _iCount$[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 f4	 mov	 DWORD PTR _iCount$[ebp], eax

; 65   : 	}
; 66   : 	else

  00077	eb 14		 jmp	 SHORT $LN6@GetNewWing
$LN7@GetNewWing:

; 67   : 	{
; 68   : 		arrOption[iEmptyCount] = 2;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _iEmptyCount$[ebp]
  0007c	c7 44 85 e4 02
	00 00 00	 mov	 DWORD PTR _arrOption$[ebp+eax*4], 2

; 69   : 		iEmptyCount++;

  00084	8b 45 f8	 mov	 eax, DWORD PTR _iEmptyCount$[ebp]
  00087	83 c0 01	 add	 eax, 1
  0008a	89 45 f8	 mov	 DWORD PTR _iEmptyCount$[ebp], eax
$LN6@GetNewWing:

; 70   : 	}
; 71   : 	// ----
; 72   : 	if((NOption&4) == 4)

  0008d	0f b6 45 08	 movzx	 eax, BYTE PTR _NOption$[ebp]
  00091	83 e0 04	 and	 eax, 4
  00094	74 0b		 je	 SHORT $LN5@GetNewWing

; 73   : 	{
; 74   : 		iCount++;

  00096	8b 45 f4	 mov	 eax, DWORD PTR _iCount$[ebp]
  00099	83 c0 01	 add	 eax, 1
  0009c	89 45 f4	 mov	 DWORD PTR _iCount$[ebp], eax

; 75   : 	}
; 76   : 	else

  0009f	eb 14		 jmp	 SHORT $LN4@GetNewWing
$LN5@GetNewWing:

; 77   : 	{
; 78   : 		arrOption[iEmptyCount] = 4;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _iEmptyCount$[ebp]
  000a4	c7 44 85 e4 04
	00 00 00	 mov	 DWORD PTR _arrOption$[ebp+eax*4], 4

; 79   : 		iEmptyCount++;

  000ac	8b 45 f8	 mov	 eax, DWORD PTR _iEmptyCount$[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 f8	 mov	 DWORD PTR _iEmptyCount$[ebp], eax
$LN4@GetNewWing:

; 80   : 	}
; 81   : 	// ----
; 82   : 	if((NOption&8) == 8)

  000b5	0f b6 45 08	 movzx	 eax, BYTE PTR _NOption$[ebp]
  000b9	83 e0 08	 and	 eax, 8
  000bc	74 0b		 je	 SHORT $LN3@GetNewWing

; 83   : 	{
; 84   : 		iCount++;

  000be	8b 45 f4	 mov	 eax, DWORD PTR _iCount$[ebp]
  000c1	83 c0 01	 add	 eax, 1
  000c4	89 45 f4	 mov	 DWORD PTR _iCount$[ebp], eax

; 85   : 	}
; 86   : 	else

  000c7	eb 14		 jmp	 SHORT $LN2@GetNewWing
$LN3@GetNewWing:

; 87   : 	{
; 88   : 		arrOption[iEmptyCount] = 8;

  000c9	8b 45 f8	 mov	 eax, DWORD PTR _iEmptyCount$[ebp]
  000cc	c7 44 85 e4 08
	00 00 00	 mov	 DWORD PTR _arrOption$[ebp+eax*4], 8

; 89   : 		iEmptyCount++;

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _iEmptyCount$[ebp]
  000d7	83 c0 01	 add	 eax, 1
  000da	89 45 f8	 mov	 DWORD PTR _iEmptyCount$[ebp], eax
$LN2@GetNewWing:

; 90   : 	}
; 91   : 	// ----
; 92   : 	if(iEmptyCount == 0)

  000dd	83 7d f8 00	 cmp	 DWORD PTR _iEmptyCount$[ebp], 0
  000e1	75 04		 jne	 SHORT $LN1@GetNewWing

; 93   : 	{
; 94   : 		return 0;

  000e3	32 c0		 xor	 al, al
  000e5	eb 13		 jmp	 SHORT $LN10@GetNewWing
$LN1@GetNewWing:

; 95   : 	}
; 96   : 	// ----
; 97   : 	int iRand = rand()%iEmptyCount;

  000e7	e8 00 00 00 00	 call	 _rand
  000ec	99		 cdq
  000ed	f7 7d f8	 idiv	 DWORD PTR _iEmptyCount$[ebp]
  000f0	89 55 e0	 mov	 DWORD PTR _iRand$[ebp], edx

; 98   : 	// ----
; 99   : 	return arrOption[iRand];

  000f3	8b 45 e0	 mov	 eax, DWORD PTR _iRand$[ebp]
  000f6	8a 44 85 e4	 mov	 al, BYTE PTR _arrOption$[ebp+eax*4]
$LN10@GetNewWing:

; 100  : }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00100	33 cd		 xor	 ecx, ebp
  00102	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?GetNewWingExlOpt@@YAEE@Z ENDP				; GetNewWingExlOpt
_TEXT	ENDS
PUBLIC	?NumOfExcOptions@@YAEH@Z			; NumOfExcOptions
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Cnt$ = -4						; size = 4
_NOption$ = 8						; size = 4
?NumOfExcOptions@@YAEH@Z PROC				; NumOfExcOptions

; 104  : {

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	83 ec 44	 sub	 esp, 68			; 00000044H
  00116	53		 push	 ebx
  00117	56		 push	 esi
  00118	57		 push	 edi

; 105  : 	if(NOption == 0)

  00119	83 7d 08 00	 cmp	 DWORD PTR _NOption$[ebp], 0
  0011d	75 04		 jne	 SHORT $LN7@NumOfExcOp

; 106  : 		return 0;

  0011f	32 c0		 xor	 al, al
  00121	eb 70		 jmp	 SHORT $LN8@NumOfExcOp
$LN7@NumOfExcOp:

; 107  : 
; 108  : 	int Cnt = 0;

  00123	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Cnt$[ebp], 0

; 109  : 
; 110  : 	if ( (NOption & 1) == 1 )

  0012a	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  0012d	83 e0 01	 and	 eax, 1
  00130	74 09		 je	 SHORT $LN6@NumOfExcOp

; 111  : 		Cnt++;

  00132	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  00135	83 c0 01	 add	 eax, 1
  00138	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN6@NumOfExcOp:

; 112  : 	if ( (NOption & 2) == 2 )

  0013b	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  0013e	83 e0 02	 and	 eax, 2
  00141	74 09		 je	 SHORT $LN5@NumOfExcOp

; 113  : 		Cnt++;

  00143	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  00146	83 c0 01	 add	 eax, 1
  00149	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN5@NumOfExcOp:

; 114  : 	if ( (NOption & 4) == 4 )

  0014c	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  0014f	83 e0 04	 and	 eax, 4
  00152	74 09		 je	 SHORT $LN4@NumOfExcOp

; 115  : 		Cnt++;

  00154	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  00157	83 c0 01	 add	 eax, 1
  0015a	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN4@NumOfExcOp:

; 116  : 	if ( (NOption & 8) == 8 )

  0015d	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  00160	83 e0 08	 and	 eax, 8
  00163	74 09		 je	 SHORT $LN3@NumOfExcOp

; 117  : 		Cnt++;

  00165	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  00168	83 c0 01	 add	 eax, 1
  0016b	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN3@NumOfExcOp:

; 118  : 	if ( (NOption & 16) == 16 )

  0016e	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  00171	83 e0 10	 and	 eax, 16			; 00000010H
  00174	74 09		 je	 SHORT $LN2@NumOfExcOp

; 119  : 		Cnt++;

  00176	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  00179	83 c0 01	 add	 eax, 1
  0017c	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN2@NumOfExcOp:

; 120  : 	if ( (NOption & 32) == 32 )

  0017f	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  00182	83 e0 20	 and	 eax, 32			; 00000020H
  00185	74 09		 je	 SHORT $LN1@NumOfExcOp

; 121  : 		Cnt++;

  00187	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  0018a	83 c0 01	 add	 eax, 1
  0018d	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN1@NumOfExcOp:

; 122  : 
; 123  : 	return Cnt;

  00190	8a 45 fc	 mov	 al, BYTE PTR _Cnt$[ebp]
$LN8@NumOfExcOp:

; 124  : }

  00193	5f		 pop	 edi
  00194	5e		 pop	 esi
  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c3		 ret	 0
?NumOfExcOptions@@YAEH@Z ENDP				; NumOfExcOptions
_TEXT	ENDS
PUBLIC	?NumOfWingExcOptions@@YAEH@Z			; NumOfWingExcOptions
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Cnt$ = -4						; size = 4
_NOption$ = 8						; size = 4
?NumOfWingExcOptions@@YAEH@Z PROC			; NumOfWingExcOptions

; 127  : {

  001a0	55		 push	 ebp
  001a1	8b ec		 mov	 ebp, esp
  001a3	83 ec 44	 sub	 esp, 68			; 00000044H
  001a6	53		 push	 ebx
  001a7	56		 push	 esi
  001a8	57		 push	 edi

; 128  : 	if(NOption == 0)

  001a9	83 7d 08 00	 cmp	 DWORD PTR _NOption$[ebp], 0
  001ad	75 04		 jne	 SHORT $LN5@NumOfWingE

; 129  : 		return 0;

  001af	32 c0		 xor	 al, al
  001b1	eb 4e		 jmp	 SHORT $LN6@NumOfWingE
$LN5@NumOfWingE:

; 130  : 
; 131  : 	int Cnt = 0;

  001b3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Cnt$[ebp], 0

; 132  : 
; 133  : 	if ( (NOption & 1) == 1 )

  001ba	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  001bd	83 e0 01	 and	 eax, 1
  001c0	74 09		 je	 SHORT $LN4@NumOfWingE

; 134  : 		Cnt++;

  001c2	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  001c5	83 c0 01	 add	 eax, 1
  001c8	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN4@NumOfWingE:

; 135  : 	if ( (NOption & 2) == 2 )

  001cb	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  001ce	83 e0 02	 and	 eax, 2
  001d1	74 09		 je	 SHORT $LN3@NumOfWingE

; 136  : 		Cnt++;

  001d3	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  001d6	83 c0 01	 add	 eax, 1
  001d9	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN3@NumOfWingE:

; 137  : 	if ( (NOption & 4) == 4 )

  001dc	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  001df	83 e0 04	 and	 eax, 4
  001e2	74 09		 je	 SHORT $LN2@NumOfWingE

; 138  : 		Cnt++;

  001e4	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  001e7	83 c0 01	 add	 eax, 1
  001ea	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN2@NumOfWingE:

; 139  : 	if ( (NOption & 8) == 8 )

  001ed	8b 45 08	 mov	 eax, DWORD PTR _NOption$[ebp]
  001f0	83 e0 08	 and	 eax, 8
  001f3	74 09		 je	 SHORT $LN1@NumOfWingE

; 140  : 		Cnt++;

  001f5	8b 45 fc	 mov	 eax, DWORD PTR _Cnt$[ebp]
  001f8	83 c0 01	 add	 eax, 1
  001fb	89 45 fc	 mov	 DWORD PTR _Cnt$[ebp], eax
$LN1@NumOfWingE:

; 141  : 
; 142  : 	return Cnt;

  001fe	8a 45 fc	 mov	 al, BYTE PTR _Cnt$[ebp]
$LN6@NumOfWingE:

; 143  : }

  00201	5f		 pop	 edi
  00202	5e		 pop	 esi
  00203	5b		 pop	 ebx
  00204	8b e5		 mov	 esp, ebp
  00206	5d		 pop	 ebp
  00207	c3		 ret	 0
?NumOfWingExcOptions@@YAEH@Z ENDP			; NumOfWingExcOptions
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetExcWingOption@@YAEE@Z			; GetExcWingOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$221510 = -52						; size = 4
_i$221503 = -48						; size = 4
_randomopt$ = -44					; size = 4
_iRand$ = -40						; size = 4
_i$221495 = -36						; size = 4
_added$ = -32						; size = 4
_amountopt$ = -28					; size = 4
_num$ = -24						; size = 4
_arrayopt$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_ExcellentOption$ = 8					; size = 1
?GetExcWingOption@@YAEE@Z PROC				; GetExcWingOption

; 146  : {

  00210	55		 push	 ebp
  00211	8b ec		 mov	 ebp, esp
  00213	83 ec 74	 sub	 esp, 116		; 00000074H
  00216	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0021b	33 c5		 xor	 eax, ebp
  0021d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00220	53		 push	 ebx
  00221	56		 push	 esi
  00222	57		 push	 edi

; 147  : 	int arrayopt[4]	= { 0, 0, 0, 0 };

  00223	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp], 0
  0022a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp+4], 0
  00231	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp+8], 0
  00238	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp+12], 0

; 148  : 	int num			= 8;

  0023f	c7 45 e8 08 00
	00 00		 mov	 DWORD PTR _num$[ebp], 8

; 149  : 	int amountopt	= 0;

  00246	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _amountopt$[ebp], 0

; 150  : 	int added		= 0;

  0024d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _added$[ebp], 0

; 151  : 	// ----
; 152  : 	for( int i = 3; i >= 0; i-- )

  00254	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _i$221495[ebp], 3
  0025b	eb 09		 jmp	 SHORT $LN15@GetExcWing
$LN14@GetExcWing:
  0025d	8b 45 dc	 mov	 eax, DWORD PTR _i$221495[ebp]
  00260	83 e8 01	 sub	 eax, 1
  00263	89 45 dc	 mov	 DWORD PTR _i$221495[ebp], eax
$LN15@GetExcWing:
  00266	83 7d dc 00	 cmp	 DWORD PTR _i$221495[ebp], 0
  0026a	7c 34		 jl	 SHORT $LN13@GetExcWing

; 153  : 	{
; 154  : 		if( ExcellentOption >= num )

  0026c	0f b6 45 08	 movzx	 eax, BYTE PTR _ExcellentOption$[ebp]
  00270	3b 45 e8	 cmp	 eax, DWORD PTR _num$[ebp]
  00273	7c 1e		 jl	 SHORT $LN12@GetExcWing

; 155  : 		{
; 156  : 			arrayopt[i] = 1;

  00275	8b 45 dc	 mov	 eax, DWORD PTR _i$221495[ebp]
  00278	c7 44 85 ec 01
	00 00 00	 mov	 DWORD PTR _arrayopt$[ebp+eax*4], 1

; 157  : 			amountopt++;

  00280	8b 45 e4	 mov	 eax, DWORD PTR _amountopt$[ebp]
  00283	83 c0 01	 add	 eax, 1
  00286	89 45 e4	 mov	 DWORD PTR _amountopt$[ebp], eax

; 158  : 			ExcellentOption -= num;

  00289	0f b6 45 08	 movzx	 eax, BYTE PTR _ExcellentOption$[ebp]
  0028d	2b 45 e8	 sub	 eax, DWORD PTR _num$[ebp]
  00290	88 45 08	 mov	 BYTE PTR _ExcellentOption$[ebp], al
$LN12@GetExcWing:

; 159  : 		}
; 160  : 		num = num / 2;

  00293	8b 45 e8	 mov	 eax, DWORD PTR _num$[ebp]
  00296	99		 cdq
  00297	2b c2		 sub	 eax, edx
  00299	d1 f8		 sar	 eax, 1
  0029b	89 45 e8	 mov	 DWORD PTR _num$[ebp], eax

; 161  : 	}

  0029e	eb bd		 jmp	 SHORT $LN14@GetExcWing
$LN13@GetExcWing:

; 162  : 	// ----
; 163  : 
; 164  : 	int iRand = (4-amountopt)+1;

  002a0	b8 04 00 00 00	 mov	 eax, 4
  002a5	2b 45 e4	 sub	 eax, DWORD PTR _amountopt$[ebp]
  002a8	83 c0 01	 add	 eax, 1
  002ab	89 45 d8	 mov	 DWORD PTR _iRand$[ebp], eax

; 165  : 
; 166  : 	if(iRand == 0)

  002ae	75 07		 jne	 SHORT $LN11@GetExcWing

; 167  : 	{
; 168  : 		return 0;

  002b0	32 c0		 xor	 al, al
  002b2	e9 9d 00 00 00	 jmp	 $LN16@GetExcWing
$LN11@GetExcWing:

; 169  : 	}
; 170  : 
; 171  : 	int randomopt = rand()%iRand;

  002b7	e8 00 00 00 00	 call	 _rand
  002bc	99		 cdq
  002bd	f7 7d d8	 idiv	 DWORD PTR _iRand$[ebp]
  002c0	89 55 d4	 mov	 DWORD PTR _randomopt$[ebp], edx

; 172  : 
; 173  : 	amountopt = 0;

  002c3	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _amountopt$[ebp], 0

; 174  : 
; 175  : 	for(int i=0; i<4; i++)

  002ca	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$221503[ebp], 0
  002d1	eb 09		 jmp	 SHORT $LN10@GetExcWing
$LN9@GetExcWing:
  002d3	8b 45 d0	 mov	 eax, DWORD PTR _i$221503[ebp]
  002d6	83 c0 01	 add	 eax, 1
  002d9	89 45 d0	 mov	 DWORD PTR _i$221503[ebp], eax
$LN10@GetExcWing:
  002dc	83 7d d0 04	 cmp	 DWORD PTR _i$221503[ebp], 4
  002e0	7d 2e		 jge	 SHORT $LN8@GetExcWing

; 176  : 	{
; 177  : 		if(!arrayopt[i])

  002e2	8b 45 d0	 mov	 eax, DWORD PTR _i$221503[ebp]
  002e5	83 7c 85 ec 00	 cmp	 DWORD PTR _arrayopt$[ebp+eax*4], 0
  002ea	75 20		 jne	 SHORT $LN7@GetExcWing

; 178  : 		{ 
; 179  : 			amountopt++;

  002ec	8b 45 e4	 mov	 eax, DWORD PTR _amountopt$[ebp]
  002ef	83 c0 01	 add	 eax, 1
  002f2	89 45 e4	 mov	 DWORD PTR _amountopt$[ebp], eax

; 180  : 			if( amountopt == randomopt )

  002f5	8b 45 e4	 mov	 eax, DWORD PTR _amountopt$[ebp]
  002f8	3b 45 d4	 cmp	 eax, DWORD PTR _randomopt$[ebp]
  002fb	75 0d		 jne	 SHORT $LN6@GetExcWing

; 181  : 			{
; 182  : 				arrayopt[i] = 1;

  002fd	8b 45 d0	 mov	 eax, DWORD PTR _i$221503[ebp]
  00300	c7 44 85 ec 01
	00 00 00	 mov	 DWORD PTR _arrayopt$[ebp+eax*4], 1

; 183  : 				break;

  00308	eb 06		 jmp	 SHORT $LN8@GetExcWing
$LN6@GetExcWing:

; 184  : 			}
; 185  : 		}
; 186  : 		else

  0030a	eb 02		 jmp	 SHORT $LN5@GetExcWing
$LN7@GetExcWing:

; 187  : 		{
; 188  : 			continue;

  0030c	eb c5		 jmp	 SHORT $LN9@GetExcWing
$LN5@GetExcWing:

; 189  : 		}
; 190  : 	}

  0030e	eb c3		 jmp	 SHORT $LN9@GetExcWing
$LN8@GetExcWing:

; 191  : 
; 192  : 	num = 1; 

  00310	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _num$[ebp], 1

; 193  : 	ExcellentOption = 0;

  00317	c6 45 08 00	 mov	 BYTE PTR _ExcellentOption$[ebp], 0

; 194  : 
; 195  : 	for (int i=0 ; i<4; i++)

  0031b	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _i$221510[ebp], 0
  00322	eb 09		 jmp	 SHORT $LN4@GetExcWing
$LN3@GetExcWing:
  00324	8b 45 cc	 mov	 eax, DWORD PTR _i$221510[ebp]
  00327	83 c0 01	 add	 eax, 1
  0032a	89 45 cc	 mov	 DWORD PTR _i$221510[ebp], eax
$LN4@GetExcWing:
  0032d	83 7d cc 04	 cmp	 DWORD PTR _i$221510[ebp], 4
  00331	7d 1e		 jge	 SHORT $LN2@GetExcWing

; 196  : 	{
; 197  : 		if (arrayopt[i])

  00333	8b 45 cc	 mov	 eax, DWORD PTR _i$221510[ebp]
  00336	83 7c 85 ec 00	 cmp	 DWORD PTR _arrayopt$[ebp+eax*4], 0
  0033b	74 0a		 je	 SHORT $LN1@GetExcWing

; 198  : 		{
; 199  : 			ExcellentOption += num;

  0033d	0f b6 45 08	 movzx	 eax, BYTE PTR _ExcellentOption$[ebp]
  00341	03 45 e8	 add	 eax, DWORD PTR _num$[ebp]
  00344	88 45 08	 mov	 BYTE PTR _ExcellentOption$[ebp], al
$LN1@GetExcWing:

; 200  : 		}
; 201  : 		num = num * 2;

  00347	8b 45 e8	 mov	 eax, DWORD PTR _num$[ebp]
  0034a	d1 e0		 shl	 eax, 1
  0034c	89 45 e8	 mov	 DWORD PTR _num$[ebp], eax

; 202  : 	}

  0034f	eb d3		 jmp	 SHORT $LN3@GetExcWing
$LN2@GetExcWing:

; 203  : 
; 204  : 	return ExcellentOption;

  00351	8a 45 08	 mov	 al, BYTE PTR _ExcellentOption$[ebp]
$LN16@GetExcWing:

; 205  : }

  00354	5f		 pop	 edi
  00355	5e		 pop	 esi
  00356	5b		 pop	 ebx
  00357	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0035a	33 cd		 xor	 ecx, ebp
  0035c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00361	8b e5		 mov	 esp, ebp
  00363	5d		 pop	 ebp
  00364	c3		 ret	 0
?GetExcWingOption@@YAEE@Z ENDP				; GetExcWingOption
_TEXT	ENDS
PUBLIC	??_C@_0BC@NOMAPGKB@JewelOfWingMaxOpt?$AA@	; `string'
PUBLIC	??_C@_0BA@NILAHJN@JewelOfWingRate?$AA@		; `string'
PUBLIC	??_C@_0BC@GFDEPBAH@JewelOfWingEnable?$AA@	; `string'
PUBLIC	??_C@_0BB@NCANKFBG@JewelOfWingIndex?$AA@	; `string'
PUBLIC	??_C@_0BA@BAGPCFJB@JewelOfWingType?$AA@		; `string'
PUBLIC	??_C@_0BE@NPJJHHDK@JewelOfSocketMaxOpt?$AA@	; `string'
PUBLIC	??_C@_0BC@PFOCIHML@JewelOfSocketRate?$AA@	; `string'
PUBLIC	??_C@_0BE@GEGNHAJM@JewelOfSocketEnable?$AA@	; `string'
PUBLIC	??_C@_0BD@FAPNDIFH@JewelOfSocketIndex?$AA@	; `string'
PUBLIC	??_C@_0BC@OIAGKFMH@JewelOfSocketType?$AA@	; `string'
PUBLIC	??_C@_0P@HDEAKOBA@JewelOfPVPRate?$AA@		; `string'
PUBLIC	??_C@_0BB@EEBDHCIG@JewelOfPVPEnable?$AA@	; `string'
PUBLIC	??_C@_0BC@LBCFNNE@JewelOfOptionRate?$AA@	; `string'
PUBLIC	??_C@_0BE@MPDBLLDI@JewelOfOptionEnable?$AA@	; `string'
PUBLIC	??_C@_0BD@NNALMFHI@JewelOfOptionIndex?$AA@	; `string'
PUBLIC	??_C@_0BC@BGPGHPNI@JewelOfOptionType?$AA@	; `string'
PUBLIC	??_C@_0BC@PLDHNHDH@JewelOfAncentRate?$AA@	; `string'
PUBLIC	??_C@_0BE@LHAPIBAM@JewelOfAncentEnable?$AA@	; `string'
PUBLIC	??_C@_0BD@OEPIFDDA@JewelOfAncentIndex?$AA@	; `string'
PUBLIC	??_C@_0BC@OGNDPFDL@JewelOfAncentType?$AA@	; `string'
PUBLIC	??_C@_0BF@BJEMJLIF@JewelOfEvalutionRate?$AA@	; `string'
PUBLIC	??_C@_0BH@BOJGKCPG@JewelOfEvalutionEnable?$AA@	; `string'
PUBLIC	??_C@_0BG@MBHFPKNM@JewelOfEvalutionIndex?$AA@	; `string'
PUBLIC	??_C@_0BF@EKILJIJ@JewelOfEvalutionType?$AA@	; `string'
PUBLIC	??_C@_0BB@DFFAIDMB@JewelOfLevelRate?$AA@	; `string'
PUBLIC	??_C@_0BA@GOLHECFF@JewelOfLevelMin?$AA@		; `string'
PUBLIC	??_C@_0BA@HMDMKGDK@JewelOfLevelMax?$AA@		; `string'
PUBLIC	??_C@_0BD@JJOPJMLN@JewelOfLevelEnable?$AA@	; `string'
PUBLIC	??_C@_0BC@LAOIGDEN@JewelOfLevelIndex?$AA@	; `string'
PUBLIC	??_C@_0BB@CILEKBMN@JewelOfLevelType?$AA@	; `string'
PUBLIC	??_C@_0BB@BLDEOEGC@JewelOfSkillRate?$AA@	; `string'
PUBLIC	??_C@_0BD@MPBDKJAI@JewelOfSkillEnable?$AA@	; `string'
PUBLIC	??_C@_0BC@PPBJPFHI@JewelOfSkillIndex?$AA@	; `string'
PUBLIC	??_C@_0BB@GNAMGGO@JewelOfSkillType?$AA@		; `string'
PUBLIC	??_C@_0BA@BOBPFOOO@JewelOfLuckRate?$AA@		; `string'
PUBLIC	??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@	; `string'
PUBLIC	??_C@_0BB@BLBCBBMJ@JewelOfLuckIndex?$AA@	; `string'
PUBLIC	??_C@_0BA@DPLHMOC@JewelOfLuckType?$AA@		; `string'
PUBLIC	??_C@_0BC@NEFECBOA@JewelOfMisticRate?$AA@	; `string'
PUBLIC	??_C@_0BE@BIMAGHC@JewelOfMisticMinLvl?$AA@	; `string'
PUBLIC	??_C@_0BE@CHPOGDN@JewelOfMisticMaxLvl?$AA@	; `string'
PUBLIC	??_C@_0BE@CNKIKKJO@JewelOfMisticEnable?$AA@	; `string'
PUBLIC	??_C@_0BD@PMGAHHLB@JewelOfMisticIndex?$AA@	; `string'
PUBLIC	??_C@_0BC@MJLAADOM@JewelOfMisticType?$AA@	; `string'
PUBLIC	??_C@_0BG@KJFBFFDG@JewelOfExellentMaxOpt?$AA@	; `string'
PUBLIC	??_C@_0BE@JHCCIINH@JewelOfExellentRate?$AA@	; `string'
PUBLIC	??_C@_0BG@BCKFFCJA@JewelOfExellentEnable?$AA@	; `string'
PUBLIC	??_C@_0BF@EEJOKEBH@JewelOfExellentIndex?$AA@	; `string'
PUBLIC	??_C@_0BE@IKMGKKNL@JewelOfExellentType?$AA@	; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@ ; `string'
PUBLIC	?Load@cNewJewels@@QAEXXZ			; cNewJewels::Load
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_0BC@NOMAPGKB@JewelOfWingMaxOpt?$AA@
CONST	SEGMENT
??_C@_0BC@NOMAPGKB@JewelOfWingMaxOpt?$AA@ DB 'JewelOfWingMaxOpt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NILAHJN@JewelOfWingRate?$AA@
CONST	SEGMENT
??_C@_0BA@NILAHJN@JewelOfWingRate?$AA@ DB 'JewelOfWingRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GFDEPBAH@JewelOfWingEnable?$AA@
CONST	SEGMENT
??_C@_0BC@GFDEPBAH@JewelOfWingEnable?$AA@ DB 'JewelOfWingEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NCANKFBG@JewelOfWingIndex?$AA@
CONST	SEGMENT
??_C@_0BB@NCANKFBG@JewelOfWingIndex?$AA@ DB 'JewelOfWingIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BAGPCFJB@JewelOfWingType?$AA@
CONST	SEGMENT
??_C@_0BA@BAGPCFJB@JewelOfWingType?$AA@ DB 'JewelOfWingType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NPJJHHDK@JewelOfSocketMaxOpt?$AA@
CONST	SEGMENT
??_C@_0BE@NPJJHHDK@JewelOfSocketMaxOpt?$AA@ DB 'JewelOfSocketMaxOpt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFOCIHML@JewelOfSocketRate?$AA@
CONST	SEGMENT
??_C@_0BC@PFOCIHML@JewelOfSocketRate?$AA@ DB 'JewelOfSocketRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GEGNHAJM@JewelOfSocketEnable?$AA@
CONST	SEGMENT
??_C@_0BE@GEGNHAJM@JewelOfSocketEnable?$AA@ DB 'JewelOfSocketEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FAPNDIFH@JewelOfSocketIndex?$AA@
CONST	SEGMENT
??_C@_0BD@FAPNDIFH@JewelOfSocketIndex?$AA@ DB 'JewelOfSocketIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OIAGKFMH@JewelOfSocketType?$AA@
CONST	SEGMENT
??_C@_0BC@OIAGKFMH@JewelOfSocketType?$AA@ DB 'JewelOfSocketType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HDEAKOBA@JewelOfPVPRate?$AA@
CONST	SEGMENT
??_C@_0P@HDEAKOBA@JewelOfPVPRate?$AA@ DB 'JewelOfPVPRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EEBDHCIG@JewelOfPVPEnable?$AA@
CONST	SEGMENT
??_C@_0BB@EEBDHCIG@JewelOfPVPEnable?$AA@ DB 'JewelOfPVPEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LBCFNNE@JewelOfOptionRate?$AA@
CONST	SEGMENT
??_C@_0BC@LBCFNNE@JewelOfOptionRate?$AA@ DB 'JewelOfOptionRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MPDBLLDI@JewelOfOptionEnable?$AA@
CONST	SEGMENT
??_C@_0BE@MPDBLLDI@JewelOfOptionEnable?$AA@ DB 'JewelOfOptionEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NNALMFHI@JewelOfOptionIndex?$AA@
CONST	SEGMENT
??_C@_0BD@NNALMFHI@JewelOfOptionIndex?$AA@ DB 'JewelOfOptionIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BGPGHPNI@JewelOfOptionType?$AA@
CONST	SEGMENT
??_C@_0BC@BGPGHPNI@JewelOfOptionType?$AA@ DB 'JewelOfOptionType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PLDHNHDH@JewelOfAncentRate?$AA@
CONST	SEGMENT
??_C@_0BC@PLDHNHDH@JewelOfAncentRate?$AA@ DB 'JewelOfAncentRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LHAPIBAM@JewelOfAncentEnable?$AA@
CONST	SEGMENT
??_C@_0BE@LHAPIBAM@JewelOfAncentEnable?$AA@ DB 'JewelOfAncentEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OEPIFDDA@JewelOfAncentIndex?$AA@
CONST	SEGMENT
??_C@_0BD@OEPIFDDA@JewelOfAncentIndex?$AA@ DB 'JewelOfAncentIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OGNDPFDL@JewelOfAncentType?$AA@
CONST	SEGMENT
??_C@_0BC@OGNDPFDL@JewelOfAncentType?$AA@ DB 'JewelOfAncentType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJEMJLIF@JewelOfEvalutionRate?$AA@
CONST	SEGMENT
??_C@_0BF@BJEMJLIF@JewelOfEvalutionRate?$AA@ DB 'JewelOfEvalutionRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BOJGKCPG@JewelOfEvalutionEnable?$AA@
CONST	SEGMENT
??_C@_0BH@BOJGKCPG@JewelOfEvalutionEnable?$AA@ DB 'JewelOfEvalutionEnable'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MBHFPKNM@JewelOfEvalutionIndex?$AA@
CONST	SEGMENT
??_C@_0BG@MBHFPKNM@JewelOfEvalutionIndex?$AA@ DB 'JewelOfEvalutionIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKILJIJ@JewelOfEvalutionType?$AA@
CONST	SEGMENT
??_C@_0BF@EKILJIJ@JewelOfEvalutionType?$AA@ DB 'JewelOfEvalutionType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DFFAIDMB@JewelOfLevelRate?$AA@
CONST	SEGMENT
??_C@_0BB@DFFAIDMB@JewelOfLevelRate?$AA@ DB 'JewelOfLevelRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GOLHECFF@JewelOfLevelMin?$AA@
CONST	SEGMENT
??_C@_0BA@GOLHECFF@JewelOfLevelMin?$AA@ DB 'JewelOfLevelMin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMDMKGDK@JewelOfLevelMax?$AA@
CONST	SEGMENT
??_C@_0BA@HMDMKGDK@JewelOfLevelMax?$AA@ DB 'JewelOfLevelMax', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JJOPJMLN@JewelOfLevelEnable?$AA@
CONST	SEGMENT
??_C@_0BD@JJOPJMLN@JewelOfLevelEnable?$AA@ DB 'JewelOfLevelEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAOIGDEN@JewelOfLevelIndex?$AA@
CONST	SEGMENT
??_C@_0BC@LAOIGDEN@JewelOfLevelIndex?$AA@ DB 'JewelOfLevelIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CILEKBMN@JewelOfLevelType?$AA@
CONST	SEGMENT
??_C@_0BB@CILEKBMN@JewelOfLevelType?$AA@ DB 'JewelOfLevelType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BLDEOEGC@JewelOfSkillRate?$AA@
CONST	SEGMENT
??_C@_0BB@BLDEOEGC@JewelOfSkillRate?$AA@ DB 'JewelOfSkillRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPBDKJAI@JewelOfSkillEnable?$AA@
CONST	SEGMENT
??_C@_0BD@MPBDKJAI@JewelOfSkillEnable?$AA@ DB 'JewelOfSkillEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PPBJPFHI@JewelOfSkillIndex?$AA@
CONST	SEGMENT
??_C@_0BC@PPBJPFHI@JewelOfSkillIndex?$AA@ DB 'JewelOfSkillIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GNAMGGO@JewelOfSkillType?$AA@
CONST	SEGMENT
??_C@_0BB@GNAMGGO@JewelOfSkillType?$AA@ DB 'JewelOfSkillType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BOBPFOOO@JewelOfLuckRate?$AA@
CONST	SEGMENT
??_C@_0BA@BOBPFOOO@JewelOfLuckRate?$AA@ DB 'JewelOfLuckRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@
CONST	SEGMENT
??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@ DB 'JewelOfLuckEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BLBCBBMJ@JewelOfLuckIndex?$AA@
CONST	SEGMENT
??_C@_0BB@BLBCBBMJ@JewelOfLuckIndex?$AA@ DB 'JewelOfLuckIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DPLHMOC@JewelOfLuckType?$AA@
CONST	SEGMENT
??_C@_0BA@DPLHMOC@JewelOfLuckType?$AA@ DB 'JewelOfLuckType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NEFECBOA@JewelOfMisticRate?$AA@
CONST	SEGMENT
??_C@_0BC@NEFECBOA@JewelOfMisticRate?$AA@ DB 'JewelOfMisticRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BIMAGHC@JewelOfMisticMinLvl?$AA@
CONST	SEGMENT
??_C@_0BE@BIMAGHC@JewelOfMisticMinLvl?$AA@ DB 'JewelOfMisticMinLvl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHPOGDN@JewelOfMisticMaxLvl?$AA@
CONST	SEGMENT
??_C@_0BE@CHPOGDN@JewelOfMisticMaxLvl?$AA@ DB 'JewelOfMisticMaxLvl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CNKIKKJO@JewelOfMisticEnable?$AA@
CONST	SEGMENT
??_C@_0BE@CNKIKKJO@JewelOfMisticEnable?$AA@ DB 'JewelOfMisticEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PMGAHHLB@JewelOfMisticIndex?$AA@
CONST	SEGMENT
??_C@_0BD@PMGAHHLB@JewelOfMisticIndex?$AA@ DB 'JewelOfMisticIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MJLAADOM@JewelOfMisticType?$AA@
CONST	SEGMENT
??_C@_0BC@MJLAADOM@JewelOfMisticType?$AA@ DB 'JewelOfMisticType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KJFBFFDG@JewelOfExellentMaxOpt?$AA@
CONST	SEGMENT
??_C@_0BG@KJFBFFDG@JewelOfExellentMaxOpt?$AA@ DB 'JewelOfExellentMaxOpt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JHCCIINH@JewelOfExellentRate?$AA@
CONST	SEGMENT
??_C@_0BE@JHCCIINH@JewelOfExellentRate?$AA@ DB 'JewelOfExellentRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BCKFFCJA@JewelOfExellentEnable?$AA@
CONST	SEGMENT
??_C@_0BG@BCKFFCJA@JewelOfExellentEnable?$AA@ DB 'JewelOfExellentEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EEJOKEBH@JewelOfExellentIndex?$AA@
CONST	SEGMENT
??_C@_0BF@EEJOKEBH@JewelOfExellentIndex?$AA@ DB 'JewelOfExellentIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IKMGKKNL@JewelOfExellentType?$AA@
CONST	SEGMENT
??_C@_0BE@IKMGKKNL@JewelOfExellentType?$AA@ DB 'JewelOfExellentType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
CONST	SEGMENT
??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@ DB '..\Data\Ex'
	DB	'Data\NewJewels.ini', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@cNewJewels@@QAEXXZ PROC				; cNewJewels::Load
; _this$ = ecx

; 208  : {

  00370	55		 push	 ebp
  00371	8b ec		 mov	 ebp, esp
  00373	83 ec 44	 sub	 esp, 68			; 00000044H
  00376	53		 push	 ebx
  00377	56		 push	 esi
  00378	57		 push	 edi
  00379	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 209  : 	//CheckFile(NewJewels_DIR);
; 210  : 	this->Enable  = GetPrivateProfileInt("Common","Enable",0,NewJewels_DIR);

  0037c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00381	6a 00		 push	 0
  00383	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00388	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0038d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00393	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00396	89 01		 mov	 DWORD PTR [ecx], eax

; 211  : 
; 212  : 	this->JewelOfExellentType = GetPrivateProfileInt("Common","JewelOfExellentType",0,NewJewels_DIR);

  00398	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0039d	6a 00		 push	 0
  0039f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IKMGKKNL@JewelOfExellentType?$AA@
  003a4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  003a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  003af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b2	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 213  : 	this->JewelOfExellentIndex = GetPrivateProfileInt("Common","JewelOfExellentIndex",0,NewJewels_DIR);

  003b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  003ba	6a 00		 push	 0
  003bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EEJOKEBH@JewelOfExellentIndex?$AA@
  003c1	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  003c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  003cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003cf	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 214  : 	this->JewelOfExellentEnable = GetPrivateProfileInt("Common","JewelOfExellentEnable",0,NewJewels_DIR);

  003d2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  003d7	6a 00		 push	 0
  003d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BCKFFCJA@JewelOfExellentEnable?$AA@
  003de	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  003e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  003e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003ec	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 215  : 	this->JewelOfExellentRate = GetPrivateProfileInt("Common","JewelOfExellentRate",0,NewJewels_DIR);

  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  003f4	6a 00		 push	 0
  003f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JHCCIINH@JewelOfExellentRate?$AA@
  003fb	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00400	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00406	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00409	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 216  : 	this->JewelOfExellentMaxOpt = GetPrivateProfileInt("Common","JewelOfExellentMaxOpt",0,NewJewels_DIR);

  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00411	6a 00		 push	 0
  00413	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KJFBFFDG@JewelOfExellentMaxOpt?$AA@
  00418	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0041d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00423	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00426	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 217  : 
; 218  : 	this->JewelOfMisticType = GetPrivateProfileInt("Common","JewelOfMisticType",0,NewJewels_DIR);

  00429	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0042e	6a 00		 push	 0
  00430	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MJLAADOM@JewelOfMisticType?$AA@
  00435	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0043a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00440	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00443	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 219  : 	this->JewelOfMisticIndex = GetPrivateProfileInt("Common","JewelOfMisticIndex",0,NewJewels_DIR);

  00446	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0044b	6a 00		 push	 0
  0044d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PMGAHHLB@JewelOfMisticIndex?$AA@
  00452	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00457	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0045d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00460	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 220  : 	this->JewelOfMisticEnable = GetPrivateProfileInt("Common","JewelOfMisticEnable",0,NewJewels_DIR);

  00463	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00468	6a 00		 push	 0
  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CNKIKKJO@JewelOfMisticEnable?$AA@
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00474	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0047a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0047d	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 221  : 	this->JewelOfMisticMaxLvl = GetPrivateProfileInt("Common","JewelOfMisticMaxLvl",0,NewJewels_DIR);

  00480	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00485	6a 00		 push	 0
  00487	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHPOGDN@JewelOfMisticMaxLvl?$AA@
  0048c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00491	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00497	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0049a	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 222  : 	this->JewelOfMisticMinLvl = GetPrivateProfileInt("Common","JewelOfMisticMinLvl",0,NewJewels_DIR);

  0049d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  004a2	6a 00		 push	 0
  004a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BIMAGHC@JewelOfMisticMinLvl?$AA@
  004a9	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  004b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004b7	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 223  : 	this->JewelOfMisticRate = GetPrivateProfileInt("Common","JewelOfMisticRate",0,NewJewels_DIR);

  004ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  004bf	6a 00		 push	 0
  004c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NEFECBOA@JewelOfMisticRate?$AA@
  004c6	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  004d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004d4	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 224  : 
; 225  : 	this->JewelOfLuckType = GetPrivateProfileInt("Common","JewelOfLuckType",0,NewJewels_DIR);

  004d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  004dc	6a 00		 push	 0
  004de	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DPLHMOC@JewelOfLuckType?$AA@
  004e3	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  004ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f1	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 226  : 	this->JewelOfLuckIndex = GetPrivateProfileInt("Common","JewelOfLuckIndex",0,NewJewels_DIR);

  004f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  004f9	6a 00		 push	 0
  004fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BLBCBBMJ@JewelOfLuckIndex?$AA@
  00500	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00505	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0050b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0050e	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 227  : 	this->JewelOfLuckEnable = GetPrivateProfileInt("Common","JewelOfLuckEnable",0,NewJewels_DIR);

  00511	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00516	6a 00		 push	 0
  00518	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@
  0051d	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00522	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00528	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0052b	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 228  : 	this->JewelOfLuckEnable = GetPrivateProfileInt("Common","JewelOfLuckEnable",0,NewJewels_DIR);

  0052e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00533	6a 00		 push	 0
  00535	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@
  0053a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0053f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00545	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00548	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 229  : 	this->JewelOfLuckRate = GetPrivateProfileInt("Common","JewelOfLuckRate",0,NewJewels_DIR);

  0054b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00550	6a 00		 push	 0
  00552	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BOBPFOOO@JewelOfLuckRate?$AA@
  00557	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0055c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00562	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00565	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 230  : 
; 231  : 	this->JewelOfSkillType = GetPrivateProfileInt("Common","JewelOfSkillType",0,NewJewels_DIR);

  00568	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0056d	6a 00		 push	 0
  0056f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GNAMGGO@JewelOfSkillType?$AA@
  00574	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00579	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0057f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00582	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 232  : 	this->JewelOfSkillIndex = GetPrivateProfileInt("Common","JewelOfSkillIndex",0,NewJewels_DIR);

  00585	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0058a	6a 00		 push	 0
  0058c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PPBJPFHI@JewelOfSkillIndex?$AA@
  00591	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00596	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0059c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0059f	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 233  : 	this->JewelOfSkillEnable = GetPrivateProfileInt("Common","JewelOfSkillEnable",0,NewJewels_DIR);

  005a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  005a7	6a 00		 push	 0
  005a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MPBDKJAI@JewelOfSkillEnable?$AA@
  005ae	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  005b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  005b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005bc	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 234  : 	this->JewelOfSkillRate = GetPrivateProfileInt("Common","JewelOfSkillRate",0,NewJewels_DIR);

  005bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  005c4	6a 00		 push	 0
  005c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BLDEOEGC@JewelOfSkillRate?$AA@
  005cb	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  005d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  005d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005d9	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 235  : 
; 236  : 	this->JewelOfLevelType = GetPrivateProfileInt("Common","JewelOfLevelType",0,NewJewels_DIR);

  005dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  005e1	6a 00		 push	 0
  005e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CILEKBMN@JewelOfLevelType?$AA@
  005e8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  005ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  005f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005f6	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 237  : 	this->JewelOfLevelIndex = GetPrivateProfileInt("Common","JewelOfLevelIndex",0,NewJewels_DIR);

  005f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  005fe	6a 00		 push	 0
  00600	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LAOIGDEN@JewelOfLevelIndex?$AA@
  00605	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0060a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00610	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00613	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 238  : 	this->JewelOfLevelEnable = GetPrivateProfileInt("Common","JewelOfLevelEnable",0,NewJewels_DIR);

  00616	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0061b	6a 00		 push	 0
  0061d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JJOPJMLN@JewelOfLevelEnable?$AA@
  00622	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00627	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0062d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00630	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 239  : 	this->JewelOfLevelMax = GetPrivateProfileInt("Common","JewelOfLevelMax",0,NewJewels_DIR);

  00633	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00638	6a 00		 push	 0
  0063a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HMDMKGDK@JewelOfLevelMax?$AA@
  0063f	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00644	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0064a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0064d	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 240  : 	this->JewelOfLevelMin = GetPrivateProfileInt("Common","JewelOfLevelMin",0,NewJewels_DIR);

  00650	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00655	6a 00		 push	 0
  00657	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GOLHECFF@JewelOfLevelMin?$AA@
  0065c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00661	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00667	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0066a	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 241  : 	this->JewelOfLevelRate = GetPrivateProfileInt("Common","JewelOfLevelRate",0,NewJewels_DIR);

  0066d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00672	6a 00		 push	 0
  00674	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DFFAIDMB@JewelOfLevelRate?$AA@
  00679	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0067e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00684	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00687	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 242  : 
; 243  : 	this->JewelOfEvalutionType = GetPrivateProfileInt("Common","JewelOfEvalutionType",0,NewJewels_DIR); 

  0068a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0068f	6a 00		 push	 0
  00691	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EKILJIJ@JewelOfEvalutionType?$AA@
  00696	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0069b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006a4	89 41 68	 mov	 DWORD PTR [ecx+104], eax

; 244  : 	this->JewelOfEvalutionIndex = GetPrivateProfileInt("Common","JewelOfEvalutionIndex",0,NewJewels_DIR); 

  006a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  006ac	6a 00		 push	 0
  006ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MBHFPKNM@JewelOfEvalutionIndex?$AA@
  006b3	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  006b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006c1	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 245  : 	this->JewelOfEvalutionEnable = GetPrivateProfileInt("Common","JewelOfEvalutionEnable",0,NewJewels_DIR); 

  006c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  006c9	6a 00		 push	 0
  006cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BOJGKCPG@JewelOfEvalutionEnable?$AA@
  006d0	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  006d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006de	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 246  : 	this->JewelOfEvalutionRate = GetPrivateProfileInt("Common","JewelOfEvalutionRate",0,NewJewels_DIR);

  006e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  006e6	6a 00		 push	 0
  006e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BJEMJLIF@JewelOfEvalutionRate?$AA@
  006ed	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  006f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006fb	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 247  : 
; 248  : 	this->JewelOfAncentType = GetPrivateProfileInt("Common","JewelOfAncentType",0,NewJewels_DIR); 

  006fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00703	6a 00		 push	 0
  00705	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OGNDPFDL@JewelOfAncentType?$AA@
  0070a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0070f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00715	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00718	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 249  : 	this->JewelOfAncentIndex = GetPrivateProfileInt("Common","JewelOfAncentIndex",0,NewJewels_DIR); 

  0071b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00720	6a 00		 push	 0
  00722	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OEPIFDDA@JewelOfAncentIndex?$AA@
  00727	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0072c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00732	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00735	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 250  : 	this->JewelOfAncentEnable = GetPrivateProfileInt("Common","JewelOfAncentEnable",0,NewJewels_DIR); 

  00738	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0073d	6a 00		 push	 0
  0073f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LHAPIBAM@JewelOfAncentEnable?$AA@
  00744	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00749	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0074f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00752	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 251  : 	this->JewelOfAncentRate = GetPrivateProfileInt("Common","JewelOfAncentRate",0,NewJewels_DIR); 

  00758	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0075d	6a 00		 push	 0
  0075f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PLDHNHDH@JewelOfAncentRate?$AA@
  00764	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00769	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0076f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00772	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 252  : 
; 253  : 	this->JewelOfOptionType = GetPrivateProfileInt("Common","JewelOfOptionType",0,NewJewels_DIR); 

  00778	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0077d	6a 00		 push	 0
  0077f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BGPGHPNI@JewelOfOptionType?$AA@
  00784	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00789	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0078f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00792	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 254  : 	this->JewelOfOptionIndex = GetPrivateProfileInt("Common","JewelOfOptionIndex",0,NewJewels_DIR); 

  00798	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  0079d	6a 00		 push	 0
  0079f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NNALMFHI@JewelOfOptionIndex?$AA@
  007a4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  007a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  007af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007b2	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 255  : 	this->JewelOfOptionEnable = GetPrivateProfileInt("Common","JewelOfOptionEnable",0,NewJewels_DIR); 

  007b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  007bd	6a 00		 push	 0
  007bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MPDBLLDI@JewelOfOptionEnable?$AA@
  007c4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  007c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  007cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007d2	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 256  : 	this->JewelOfOptionRate = GetPrivateProfileInt("Common","JewelOfOptionRate",0,NewJewels_DIR); 

  007d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  007dd	6a 00		 push	 0
  007df	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LBCFNNE@JewelOfOptionRate?$AA@
  007e4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  007e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  007ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007f2	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 257  : 
; 258  : 	this->JewelOfPVPEnable = 0; 

  007f8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007fb	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+160], 0

; 259  : 	this->JewelOfPVPRate = 0; 

  00805	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00808	c7 80 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+164], 0

; 260  : 
; 261  : 	if( g_ExLicense.CheckUser(eExUB::Local)			|| 
; 262  : 		g_ExLicense.CheckUser(eExUB::Gredy)			|| 
; 263  : 		g_ExLicense.CheckUser(eExUB::GredyLocal)	|| 
; 264  : 		g_ExLicense.CheckUser(eExUB::Gredy2)		|| 
; 265  : 		g_ExLicense.CheckUser(eExUB::ulasevich)		|| 
; 266  : 		g_ExLicense.CheckUser(eExUB::ulasevich2)	||
; 267  : 		g_ExLicense.CheckUser(eExUB::EpicMU)		||
; 268  : 		g_ExLicense.CheckUser(eExUB::Artem)			||
; 269  : 		g_ExLicense.CheckUser(eExUB::Artem2))

  00812	6a 00		 push	 0
  00814	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00819	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0081e	0f b6 c0	 movzx	 eax, al
  00821	85 c0		 test	 eax, eax
  00823	0f 85 9c 00 00
	00		 jne	 $LN4@Load
  00829	6a 20		 push	 32			; 00000020H
  0082b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00830	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00835	0f b6 c0	 movzx	 eax, al
  00838	85 c0		 test	 eax, eax
  0083a	0f 85 85 00 00
	00		 jne	 $LN4@Load
  00840	6a 21		 push	 33			; 00000021H
  00842	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00847	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0084c	0f b6 c0	 movzx	 eax, al
  0084f	85 c0		 test	 eax, eax
  00851	75 72		 jne	 SHORT $LN4@Load
  00853	6a 22		 push	 34			; 00000022H
  00855	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0085a	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0085f	0f b6 c0	 movzx	 eax, al
  00862	85 c0		 test	 eax, eax
  00864	75 5f		 jne	 SHORT $LN4@Load
  00866	6a 17		 push	 23			; 00000017H
  00868	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0086d	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00872	0f b6 c0	 movzx	 eax, al
  00875	85 c0		 test	 eax, eax
  00877	75 4c		 jne	 SHORT $LN4@Load
  00879	6a 24		 push	 36			; 00000024H
  0087b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00880	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00885	0f b6 c0	 movzx	 eax, al
  00888	85 c0		 test	 eax, eax
  0088a	75 39		 jne	 SHORT $LN4@Load
  0088c	6a 3b		 push	 59			; 0000003bH
  0088e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00893	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00898	0f b6 c0	 movzx	 eax, al
  0089b	85 c0		 test	 eax, eax
  0089d	75 26		 jne	 SHORT $LN4@Load
  0089f	6a 30		 push	 48			; 00000030H
  008a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  008a6	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  008ab	0f b6 c0	 movzx	 eax, al
  008ae	85 c0		 test	 eax, eax
  008b0	75 13		 jne	 SHORT $LN4@Load
  008b2	6a 31		 push	 49			; 00000031H
  008b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  008b9	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  008be	0f b6 c0	 movzx	 eax, al
  008c1	85 c0		 test	 eax, eax
  008c3	74 5a		 je	 SHORT $LN5@Load
$LN4@Load:

; 270  : 	{
; 271  : 		this->JewelOfPVPType = 14;

  008c5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008c8	c7 80 98 00 00
	00 0e 00 00 00	 mov	 DWORD PTR [eax+152], 14	; 0000000eH

; 272  : 		this->JewelOfPVPIndex = 188;

  008d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008d5	c7 80 9c 00 00
	00 bc 00 00 00	 mov	 DWORD PTR [eax+156], 188 ; 000000bcH

; 273  : 		this->JewelOfPVPEnable = GetPrivateProfileInt("Common","JewelOfPVPEnable",0,NewJewels_DIR); 

  008df	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  008e4	6a 00		 push	 0
  008e6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EEBDHCIG@JewelOfPVPEnable?$AA@
  008eb	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  008f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  008f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008f9	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 274  : 		this->JewelOfPVPRate = GetPrivateProfileInt("Common","JewelOfPVPRate",0,NewJewels_DIR); 

  008ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00904	6a 00		 push	 0
  00906	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HDEAKOBA@JewelOfPVPRate?$AA@
  0090b	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00910	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00916	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00919	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax
$LN5@Load:

; 275  : 	}
; 276  : 
; 277  : 	this->JewelOfSocketType = GetPrivateProfileInt("Common","JewelOfSocketType",0,NewJewels_DIR);

  0091f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00924	6a 00		 push	 0
  00926	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OIAGKFMH@JewelOfSocketType?$AA@
  0092b	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00930	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00936	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00939	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax

; 278  : 	this->JewelOfSocketIndex = GetPrivateProfileInt("Common","JewelOfSocketIndex",0,NewJewels_DIR); 

  0093f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00944	6a 00		 push	 0
  00946	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FAPNDIFH@JewelOfSocketIndex?$AA@
  0094b	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00950	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00956	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00959	89 81 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], eax

; 279  : 	this->JewelOfSocketEnable = GetPrivateProfileInt("Common","JewelOfSocketEnable",0,NewJewels_DIR); 

  0095f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00964	6a 00		 push	 0
  00966	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GEGNHAJM@JewelOfSocketEnable?$AA@
  0096b	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00970	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00976	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00979	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 280  : 	this->JewelOfSocketRate = GetPrivateProfileInt("Common","JewelOfSocketRate",0,NewJewels_DIR); 

  0097f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00984	6a 00		 push	 0
  00986	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PFOCIHML@JewelOfSocketRate?$AA@
  0098b	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00990	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00996	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00999	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 281  : 	this->JewelOfSocketMaxOpt = GetPrivateProfileInt("Common","JewelOfSocketMaxOpt",0,NewJewels_DIR); 

  0099f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  009a4	6a 00		 push	 0
  009a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NPJJHHDK@JewelOfSocketMaxOpt?$AA@
  009ab	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  009b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  009b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009b9	89 81 b8 00 00
	00		 mov	 DWORD PTR [ecx+184], eax

; 282  : 	if(this->JewelOfSocketMaxOpt > 5)

  009bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009c2	83 b8 b8 00 00
	00 05		 cmp	 DWORD PTR [eax+184], 5
  009c9	7e 0d		 jle	 SHORT $LN3@Load

; 283  : 	{
; 284  : 		this->JewelOfSocketMaxOpt = 5;

  009cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009ce	c7 80 b8 00 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+184], 5
$LN3@Load:

; 285  : 	}
; 286  : 
; 287  : 	this->JewelOfWingEnable = false;

  009d8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009db	c7 80 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+196], 0

; 288  : 
; 289  : 	if(g_ExLicense.CheckUser(eExUB::Local) || THINNAKORN_MAC || 
; 290  : 		g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::Gredy2) || g_ExLicense.CheckUser(eExUB::GredyLocal) ||
; 291  : 		g_ExLicense.CheckUser(eExUB::EpicMU))

  009e5	6a 00		 push	 0
  009e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  009ec	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  009f1	0f b6 c0	 movzx	 eax, al
  009f4	85 c0		 test	 eax, eax
  009f6	75 54		 jne	 SHORT $LN1@Load
  009f8	33 c0		 xor	 eax, eax
  009fa	75 50		 jne	 SHORT $LN1@Load
  009fc	6a 20		 push	 32			; 00000020H
  009fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00a03	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00a08	0f b6 c0	 movzx	 eax, al
  00a0b	85 c0		 test	 eax, eax
  00a0d	75 3d		 jne	 SHORT $LN1@Load
  00a0f	6a 22		 push	 34			; 00000022H
  00a11	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00a16	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00a1b	0f b6 c0	 movzx	 eax, al
  00a1e	85 c0		 test	 eax, eax
  00a20	75 2a		 jne	 SHORT $LN1@Load
  00a22	6a 21		 push	 33			; 00000021H
  00a24	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00a29	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00a2e	0f b6 c0	 movzx	 eax, al
  00a31	85 c0		 test	 eax, eax
  00a33	75 17		 jne	 SHORT $LN1@Load
  00a35	6a 3b		 push	 59			; 0000003bH
  00a37	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00a3c	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00a41	0f b6 c0	 movzx	 eax, al
  00a44	85 c0		 test	 eax, eax
  00a46	0f 84 a0 00 00
	00		 je	 $LN6@Load
$LN1@Load:

; 292  : 	{
; 293  : 		this->JewelOfWingType = GetPrivateProfileInt("Common","JewelOfWingType",0,NewJewels_DIR);

  00a4c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00a51	6a 00		 push	 0
  00a53	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BAGPCFJB@JewelOfWingType?$AA@
  00a58	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00a5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00a63	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a66	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax

; 294  : 		this->JewelOfWingIndex = GetPrivateProfileInt("Common","JewelOfWingIndex",0,NewJewels_DIR);

  00a6c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00a71	6a 00		 push	 0
  00a73	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NCANKFBG@JewelOfWingIndex?$AA@
  00a78	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00a7d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00a83	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a86	89 81 c0 00 00
	00		 mov	 DWORD PTR [ecx+192], eax

; 295  : 		this->JewelOfWingEnable = GetPrivateProfileInt("Common","JewelOfWingEnable",0,NewJewels_DIR);

  00a8c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00a91	6a 00		 push	 0
  00a93	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GFDEPBAH@JewelOfWingEnable?$AA@
  00a98	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00a9d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00aa3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aa6	89 81 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], eax

; 296  : 		this->JewelOfWingRate = GetPrivateProfileInt("Common","JewelOfWingRate",0,NewJewels_DIR);

  00aac	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00ab1	6a 00		 push	 0
  00ab3	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NILAHJN@JewelOfWingRate?$AA@
  00ab8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00abd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00ac3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ac6	89 81 c8 00 00
	00		 mov	 DWORD PTR [ecx+200], eax

; 297  : 		this->JewelOfWingMaxOpt = GetPrivateProfileInt("Common","JewelOfWingMaxOpt",0,NewJewels_DIR);

  00acc	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONPGLCPF@?4?4?2Data?2ExData?2NewJewels?4ini?$AA@
  00ad1	6a 00		 push	 0
  00ad3	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NOMAPGKB@JewelOfWingMaxOpt?$AA@
  00ad8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00add	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00ae3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ae6	89 81 cc 00 00
	00		 mov	 DWORD PTR [ecx+204], eax
$LN6@Load:

; 298  : 	}
; 299  : }

  00aec	5f		 pop	 edi
  00aed	5e		 pop	 esi
  00aee	5b		 pop	 ebx
  00aef	8b e5		 mov	 esp, ebp
  00af1	5d		 pop	 ebp
  00af2	c3		 ret	 0
?Load@cNewJewels@@QAEXXZ ENDP				; cNewJewels::Load
_TEXT	ENDS
PUBLIC	?IsAccessory@cNewJewels@@QAE_NH@Z		; cNewJewels::IsAccessory
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ItemID$ = 8						; size = 4
?IsAccessory@cNewJewels@@QAE_NH@Z PROC			; cNewJewels::IsAccessory
; _this$ = ecx

; 302  : {

  00b00	55		 push	 ebp
  00b01	8b ec		 mov	 ebp, esp
  00b03	83 ec 44	 sub	 esp, 68			; 00000044H
  00b06	53		 push	 ebx
  00b07	56		 push	 esi
  00b08	57		 push	 edi
  00b09	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 303  : 	if(		ItemID >= ITEMGET(13, 21) && ItemID <= ITEMGET(13, 29)
; 304  : 		||	ItemID == ITEMGET(13, 8)
; 305  : 		||	ItemID == ITEMGET(13, 9)
; 306  : 		||	ItemID == ITEMGET(13, 12)
; 307  : 		||	ItemID == ITEMGET(13, 13) )

  00b0c	81 7d 08 15 1a
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6677 ; 00001a15H
  00b13	7c 09		 jl	 SHORT $LN1@IsAccessor
  00b15	81 7d 08 1d 1a
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6685 ; 00001a1dH
  00b1c	7e 24		 jle	 SHORT $LN2@IsAccessor
$LN1@IsAccessor:
  00b1e	81 7d 08 08 1a
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6664 ; 00001a08H
  00b25	74 1b		 je	 SHORT $LN2@IsAccessor
  00b27	81 7d 08 09 1a
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6665 ; 00001a09H
  00b2e	74 12		 je	 SHORT $LN2@IsAccessor
  00b30	81 7d 08 0c 1a
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6668 ; 00001a0cH
  00b37	74 09		 je	 SHORT $LN2@IsAccessor
  00b39	81 7d 08 0d 1a
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6669 ; 00001a0dH
  00b40	75 04		 jne	 SHORT $LN3@IsAccessor
$LN2@IsAccessor:

; 308  : 	{
; 309  : 		return true;

  00b42	b0 01		 mov	 al, 1
  00b44	eb 02		 jmp	 SHORT $LN4@IsAccessor
$LN3@IsAccessor:

; 310  : 	}
; 311  : 	// ----
; 312  : 	return false;

  00b46	32 c0		 xor	 al, al
$LN4@IsAccessor:

; 313  : 
; 314  : }

  00b48	5f		 pop	 edi
  00b49	5e		 pop	 esi
  00b4a	5b		 pop	 ebx
  00b4b	8b e5		 mov	 esp, ebp
  00b4d	5d		 pop	 ebp
  00b4e	c2 04 00	 ret	 4
?IsAccessory@cNewJewels@@QAE_NH@Z ENDP			; cNewJewels::IsAccessory
_TEXT	ENDS
PUBLIC	?IsWings@cNewJewels@@QAE_NH@Z			; cNewJewels::IsWings
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv90 = -72						; size = 4
tv85 = -72						; size = 4
tv80 = -72						; size = 4
tv75 = -72						; size = 4
_this$ = -4						; size = 4
_ItemID$ = 8						; size = 4
?IsWings@cNewJewels@@QAE_NH@Z PROC			; cNewJewels::IsWings
; _this$ = ecx

; 317  : {

  00b60	55		 push	 ebp
  00b61	8b ec		 mov	 ebp, esp
  00b63	83 ec 48	 sub	 esp, 72			; 00000048H
  00b66	53		 push	 ebx
  00b67	56		 push	 esi
  00b68	57		 push	 edi
  00b69	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 318  : 	if((ItemID < ITEMGET(12,0) || ItemID > ITEMGET(12,6)) &&
; 319  : 		ItemID != ITEMGET(13,30) &&
; 320  : 		ItemID != ITEMGET(12,41) &&
; 321  : 		ItemID != ITEMGET(12,42) &&
; 322  : 		ItemID != ITEMGET(12,43) &&
; 323  : 		ItemID != ITEMGET(12, 49) &&//Season 6 addon
; 324  : 		ItemID != ITEMGET(12, 50) &&//Season 6 addon
; 325  : #ifdef NEWWINGS_2_5
; 326  : 		!IS_NEWWINGS_2_5(ItemID) &&
; 327  : #endif
; 328  : #ifdef NEWWINGS_4
; 329  : 		!IS_NEWWINGS_4(ItemID) &&
; 330  : #endif
; 331  : #ifdef NEWWINGS_5
; 332  : 		!IS_NEWWINGS_5(ItemID) &&
; 333  : #endif
; 334  : #ifdef NEWWINGS_6
; 335  : 		!IS_NEWWINGS_6(ItemID) &&
; 336  : #endif
; 337  : 		//Season 2.5 add-on
; 338  : 		(ItemID < ITEMGET(12,36) || ItemID > ITEMGET(12,40))) 

  00b6c	81 7d 08 00 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6144 ; 00001800H
  00b73	7c 0d		 jl	 SHORT $LN2@IsWings
  00b75	81 7d 08 06 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6150 ; 00001806H
  00b7c	0f 8e 04 01 00
	00		 jle	 $LN3@IsWings
$LN2@IsWings:
  00b82	81 7d 08 1e 1a
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6686 ; 00001a1eH
  00b89	0f 84 f7 00 00
	00		 je	 $LN3@IsWings
  00b8f	81 7d 08 29 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6185 ; 00001829H
  00b96	0f 84 ea 00 00
	00		 je	 $LN3@IsWings
  00b9c	81 7d 08 2a 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6186 ; 0000182aH
  00ba3	0f 84 dd 00 00
	00		 je	 $LN3@IsWings
  00ba9	81 7d 08 2b 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6187 ; 0000182bH
  00bb0	0f 84 d0 00 00
	00		 je	 $LN3@IsWings
  00bb6	81 7d 08 31 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6193 ; 00001831H
  00bbd	0f 84 c3 00 00
	00		 je	 $LN3@IsWings
  00bc3	81 7d 08 32 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6194 ; 00001832H
  00bca	0f 84 b6 00 00
	00		 je	 $LN3@IsWings
  00bd0	81 7d 08 ba 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6330 ; 000018baH
  00bd7	7d 09		 jge	 SHORT $LN6@IsWings
  00bd9	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
  00be0	eb 0f		 jmp	 SHORT $LN7@IsWings
$LN6@IsWings:
  00be2	33 c0		 xor	 eax, eax
  00be4	81 7d 08 bc 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6332 ; 000018bcH
  00beb	0f 9e c0	 setle	 al
  00bee	89 45 b8	 mov	 DWORD PTR tv75[ebp], eax
$LN7@IsWings:
  00bf1	83 7d b8 00	 cmp	 DWORD PTR tv75[ebp], 0
  00bf5	0f 85 8b 00 00
	00		 jne	 $LN3@IsWings
  00bfb	81 7d 08 b4 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6324 ; 000018b4H
  00c02	7d 09		 jge	 SHORT $LN8@IsWings
  00c04	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
  00c0b	eb 0f		 jmp	 SHORT $LN9@IsWings
$LN8@IsWings:
  00c0d	33 c0		 xor	 eax, eax
  00c0f	81 7d 08 b9 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6329 ; 000018b9H
  00c16	0f 9e c0	 setle	 al
  00c19	89 45 b8	 mov	 DWORD PTR tv80[ebp], eax
$LN9@IsWings:
  00c1c	83 7d b8 00	 cmp	 DWORD PTR tv80[ebp], 0
  00c20	75 64		 jne	 SHORT $LN3@IsWings
  00c22	81 7d 08 bd 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6333 ; 000018bdH
  00c29	7d 09		 jge	 SHORT $LN10@IsWings
  00c2b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
  00c32	eb 0f		 jmp	 SHORT $LN11@IsWings
$LN10@IsWings:
  00c34	33 c0		 xor	 eax, eax
  00c36	81 7d 08 c2 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6338 ; 000018c2H
  00c3d	0f 9e c0	 setle	 al
  00c40	89 45 b8	 mov	 DWORD PTR tv85[ebp], eax
$LN11@IsWings:
  00c43	83 7d b8 00	 cmp	 DWORD PTR tv85[ebp], 0
  00c47	75 3d		 jne	 SHORT $LN3@IsWings
  00c49	81 7d 08 c3 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6339 ; 000018c3H
  00c50	7d 09		 jge	 SHORT $LN12@IsWings
  00c52	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
  00c59	eb 0f		 jmp	 SHORT $LN13@IsWings
$LN12@IsWings:
  00c5b	33 c0		 xor	 eax, eax
  00c5d	81 7d 08 dc 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6364 ; 000018dcH
  00c64	0f 9e c0	 setle	 al
  00c67	89 45 b8	 mov	 DWORD PTR tv90[ebp], eax
$LN13@IsWings:
  00c6a	83 7d b8 00	 cmp	 DWORD PTR tv90[ebp], 0
  00c6e	75 16		 jne	 SHORT $LN3@IsWings
  00c70	81 7d 08 24 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6180 ; 00001824H
  00c77	7c 09		 jl	 SHORT $LN1@IsWings
  00c79	81 7d 08 28 18
	00 00		 cmp	 DWORD PTR _ItemID$[ebp], 6184 ; 00001828H
  00c80	7e 04		 jle	 SHORT $LN3@IsWings
$LN1@IsWings:

; 339  : 	{
; 340  : 		return false;

  00c82	32 c0		 xor	 al, al
  00c84	eb 02		 jmp	 SHORT $LN4@IsWings
$LN3@IsWings:

; 341  : 	}
; 342  : 
; 343  : 	return true;

  00c86	b0 01		 mov	 al, 1
$LN4@IsWings:

; 344  : }

  00c88	5f		 pop	 edi
  00c89	5e		 pop	 esi
  00c8a	5b		 pop	 ebx
  00c8b	8b e5		 mov	 esp, ebp
  00c8d	5d		 pop	 ebp
  00c8e	c2 04 00	 ret	 4
?IsWings@cNewJewels@@QAE_NH@Z ENDP			; cNewJewels::IsWings
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetExcUnusedOption@cNewJewels@@QAEEE@Z		; cNewJewels::GetExcUnusedOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$221612 = -64						; size = 4
_i$221605 = -60						; size = 4
_randomopt$ = -56					; size = 4
_iRate$ = -52						; size = 4
_i$221597 = -48						; size = 4
_added$ = -44						; size = 4
_amountopt$ = -40					; size = 4
_num$ = -36						; size = 4
_arrayopt$ = -32					; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ExcellentOption$ = 8					; size = 1
?GetExcUnusedOption@cNewJewels@@QAEEE@Z PROC		; cNewJewels::GetExcUnusedOption
; _this$ = ecx

; 347  : {

  00ca0	55		 push	 ebp
  00ca1	8b ec		 mov	 ebp, esp
  00ca3	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00ca9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00cae	33 c5		 xor	 eax, ebp
  00cb0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00cb3	53		 push	 ebx
  00cb4	56		 push	 esi
  00cb5	57		 push	 edi
  00cb6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 348  : 	int arrayopt[6]	= { 0, 0, 0, 0, 0, 0};

  00cb9	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp], 0
  00cc0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp+4], 0
  00cc7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp+8], 0
  00cce	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp+12], 0
  00cd5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp+16], 0
  00cdc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _arrayopt$[ebp+20], 0

; 349  : 	int num			= 32;

  00ce3	c7 45 dc 20 00
	00 00		 mov	 DWORD PTR _num$[ebp], 32 ; 00000020H

; 350  : 	int amountopt	= 0;

  00cea	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _amountopt$[ebp], 0

; 351  : 	int added		= 0;

  00cf1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _added$[ebp], 0

; 352  : 	// ----
; 353  : 	for( int i = 5; i >= 0; i-- )

  00cf8	c7 45 d0 05 00
	00 00		 mov	 DWORD PTR _i$221597[ebp], 5
  00cff	eb 09		 jmp	 SHORT $LN15@GetExcUnus
$LN14@GetExcUnus:
  00d01	8b 45 d0	 mov	 eax, DWORD PTR _i$221597[ebp]
  00d04	83 e8 01	 sub	 eax, 1
  00d07	89 45 d0	 mov	 DWORD PTR _i$221597[ebp], eax
$LN15@GetExcUnus:
  00d0a	83 7d d0 00	 cmp	 DWORD PTR _i$221597[ebp], 0
  00d0e	7c 34		 jl	 SHORT $LN13@GetExcUnus

; 354  : 	{
; 355  : 		if( ExcellentOption >= num )

  00d10	0f b6 45 08	 movzx	 eax, BYTE PTR _ExcellentOption$[ebp]
  00d14	3b 45 dc	 cmp	 eax, DWORD PTR _num$[ebp]
  00d17	7c 1e		 jl	 SHORT $LN12@GetExcUnus

; 356  : 		{
; 357  : 			arrayopt[i] = 1;

  00d19	8b 45 d0	 mov	 eax, DWORD PTR _i$221597[ebp]
  00d1c	c7 44 85 e0 01
	00 00 00	 mov	 DWORD PTR _arrayopt$[ebp+eax*4], 1

; 358  : 			amountopt++;

  00d24	8b 45 d8	 mov	 eax, DWORD PTR _amountopt$[ebp]
  00d27	83 c0 01	 add	 eax, 1
  00d2a	89 45 d8	 mov	 DWORD PTR _amountopt$[ebp], eax

; 359  : 			ExcellentOption -= num;

  00d2d	0f b6 45 08	 movzx	 eax, BYTE PTR _ExcellentOption$[ebp]
  00d31	2b 45 dc	 sub	 eax, DWORD PTR _num$[ebp]
  00d34	88 45 08	 mov	 BYTE PTR _ExcellentOption$[ebp], al
$LN12@GetExcUnus:

; 360  : 		}
; 361  : 		num = num / 2;

  00d37	8b 45 dc	 mov	 eax, DWORD PTR _num$[ebp]
  00d3a	99		 cdq
  00d3b	2b c2		 sub	 eax, edx
  00d3d	d1 f8		 sar	 eax, 1
  00d3f	89 45 dc	 mov	 DWORD PTR _num$[ebp], eax

; 362  : 	}

  00d42	eb bd		 jmp	 SHORT $LN14@GetExcUnus
$LN13@GetExcUnus:

; 363  : 	// ----
; 364  : 	int iRate = (6-amountopt)+1;

  00d44	b8 06 00 00 00	 mov	 eax, 6
  00d49	2b 45 d8	 sub	 eax, DWORD PTR _amountopt$[ebp]
  00d4c	83 c0 01	 add	 eax, 1
  00d4f	89 45 cc	 mov	 DWORD PTR _iRate$[ebp], eax

; 365  : 	if(iRate == 0)

  00d52	75 07		 jne	 SHORT $LN11@GetExcUnus

; 366  : 	{
; 367  : 		return 0;

  00d54	32 c0		 xor	 al, al
  00d56	e9 9d 00 00 00	 jmp	 $LN16@GetExcUnus
$LN11@GetExcUnus:

; 368  : 	}
; 369  : 	int randomopt = rand()%iRate;

  00d5b	e8 00 00 00 00	 call	 _rand
  00d60	99		 cdq
  00d61	f7 7d cc	 idiv	 DWORD PTR _iRate$[ebp]
  00d64	89 55 c8	 mov	 DWORD PTR _randomopt$[ebp], edx

; 370  : 	amountopt = 0;

  00d67	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _amountopt$[ebp], 0

; 371  : 
; 372  : 	for(int i=0; i<6; i++)

  00d6e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$221605[ebp], 0
  00d75	eb 09		 jmp	 SHORT $LN10@GetExcUnus
$LN9@GetExcUnus:
  00d77	8b 45 c4	 mov	 eax, DWORD PTR _i$221605[ebp]
  00d7a	83 c0 01	 add	 eax, 1
  00d7d	89 45 c4	 mov	 DWORD PTR _i$221605[ebp], eax
$LN10@GetExcUnus:
  00d80	83 7d c4 06	 cmp	 DWORD PTR _i$221605[ebp], 6
  00d84	7d 2e		 jge	 SHORT $LN8@GetExcUnus

; 373  : 	{
; 374  : 		if(!arrayopt[i])

  00d86	8b 45 c4	 mov	 eax, DWORD PTR _i$221605[ebp]
  00d89	83 7c 85 e0 00	 cmp	 DWORD PTR _arrayopt$[ebp+eax*4], 0
  00d8e	75 20		 jne	 SHORT $LN7@GetExcUnus

; 375  : 		{ 
; 376  : 			amountopt++;

  00d90	8b 45 d8	 mov	 eax, DWORD PTR _amountopt$[ebp]
  00d93	83 c0 01	 add	 eax, 1
  00d96	89 45 d8	 mov	 DWORD PTR _amountopt$[ebp], eax

; 377  : 			if( amountopt == randomopt )

  00d99	8b 45 d8	 mov	 eax, DWORD PTR _amountopt$[ebp]
  00d9c	3b 45 c8	 cmp	 eax, DWORD PTR _randomopt$[ebp]
  00d9f	75 0d		 jne	 SHORT $LN6@GetExcUnus

; 378  : 			{
; 379  : 				arrayopt[i] = 1;

  00da1	8b 45 c4	 mov	 eax, DWORD PTR _i$221605[ebp]
  00da4	c7 44 85 e0 01
	00 00 00	 mov	 DWORD PTR _arrayopt$[ebp+eax*4], 1

; 380  : 				break;

  00dac	eb 06		 jmp	 SHORT $LN8@GetExcUnus
$LN6@GetExcUnus:

; 381  : 			}
; 382  : 		}
; 383  : 		else

  00dae	eb 02		 jmp	 SHORT $LN5@GetExcUnus
$LN7@GetExcUnus:

; 384  : 		{
; 385  : 			continue;

  00db0	eb c5		 jmp	 SHORT $LN9@GetExcUnus
$LN5@GetExcUnus:

; 386  : 		}
; 387  : 	}

  00db2	eb c3		 jmp	 SHORT $LN9@GetExcUnus
$LN8@GetExcUnus:

; 388  : 
; 389  : 	num = 1; 

  00db4	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _num$[ebp], 1

; 390  : 	ExcellentOption = 0;

  00dbb	c6 45 08 00	 mov	 BYTE PTR _ExcellentOption$[ebp], 0

; 391  : 
; 392  : 	for (int i=0 ; i<6; i++)

  00dbf	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _i$221612[ebp], 0
  00dc6	eb 09		 jmp	 SHORT $LN4@GetExcUnus
$LN3@GetExcUnus:
  00dc8	8b 45 c0	 mov	 eax, DWORD PTR _i$221612[ebp]
  00dcb	83 c0 01	 add	 eax, 1
  00dce	89 45 c0	 mov	 DWORD PTR _i$221612[ebp], eax
$LN4@GetExcUnus:
  00dd1	83 7d c0 06	 cmp	 DWORD PTR _i$221612[ebp], 6
  00dd5	7d 1e		 jge	 SHORT $LN2@GetExcUnus

; 393  : 	{
; 394  : 		if (arrayopt[i])

  00dd7	8b 45 c0	 mov	 eax, DWORD PTR _i$221612[ebp]
  00dda	83 7c 85 e0 00	 cmp	 DWORD PTR _arrayopt$[ebp+eax*4], 0
  00ddf	74 0a		 je	 SHORT $LN1@GetExcUnus

; 395  : 		{
; 396  : 			ExcellentOption += num;

  00de1	0f b6 45 08	 movzx	 eax, BYTE PTR _ExcellentOption$[ebp]
  00de5	03 45 dc	 add	 eax, DWORD PTR _num$[ebp]
  00de8	88 45 08	 mov	 BYTE PTR _ExcellentOption$[ebp], al
$LN1@GetExcUnus:

; 397  : 		}
; 398  : 		num = num * 2;

  00deb	8b 45 dc	 mov	 eax, DWORD PTR _num$[ebp]
  00dee	d1 e0		 shl	 eax, 1
  00df0	89 45 dc	 mov	 DWORD PTR _num$[ebp], eax

; 399  : 	}

  00df3	eb d3		 jmp	 SHORT $LN3@GetExcUnus
$LN2@GetExcUnus:

; 400  : 
; 401  : 	return ExcellentOption;

  00df5	8a 45 08	 mov	 al, BYTE PTR _ExcellentOption$[ebp]
$LN16@GetExcUnus:

; 402  : }

  00df8	5f		 pop	 edi
  00df9	5e		 pop	 esi
  00dfa	5b		 pop	 ebx
  00dfb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00dfe	33 cd		 xor	 ecx, ebp
  00e00	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e05	8b e5		 mov	 esp, ebp
  00e07	5d		 pop	 ebp
  00e08	c2 04 00	 ret	 4
?GetExcUnusedOption@cNewJewels@@QAEEE@Z ENDP		; cNewJewels::GetExcUnusedOption
_TEXT	ENDS
PUBLIC	?CheckJewel@cNewJewels@@QAE_NH@Z		; cNewJewels::CheckJewel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iType$ = 8						; size = 4
?CheckJewel@cNewJewels@@QAE_NH@Z PROC			; cNewJewels::CheckJewel
; _this$ = ecx

; 405  : {

  00e10	55		 push	 ebp
  00e11	8b ec		 mov	 ebp, esp
  00e13	83 ec 44	 sub	 esp, 68			; 00000044H
  00e16	53		 push	 ebx
  00e17	56		 push	 esi
  00e18	57		 push	 edi
  00e19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 406  : 	if(iType == ITEMGET(this->JewelOfExellentType,this->JewelOfExellentIndex) && this->JewelOfExellentEnable) return true;

  00e1c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e1f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e22	c1 e1 09	 shl	 ecx, 9
  00e25	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e28	03 4a 08	 add	 ecx, DWORD PTR [edx+8]
  00e2b	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  00e2e	75 15		 jne	 SHORT $LN23@CheckJewel
  00e30	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e33	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00e37	74 0c		 je	 SHORT $LN23@CheckJewel
  00e39	b0 01		 mov	 al, 1
  00e3b	e9 bf 02 00 00	 jmp	 $LN24@CheckJewel
  00e40	e9 1d 01 00 00	 jmp	 $LN22@CheckJewel
$LN23@CheckJewel:

; 407  : 	else if(iType == ITEMGET(this->JewelOfMisticType,this->JewelOfMisticIndex) && this->JewelOfMisticEnable) return true;

  00e45	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e48	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00e4b	c1 e1 09	 shl	 ecx, 9
  00e4e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e51	03 4a 1c	 add	 ecx, DWORD PTR [edx+28]
  00e54	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  00e57	75 15		 jne	 SHORT $LN21@CheckJewel
  00e59	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e5c	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00e60	74 0c		 je	 SHORT $LN21@CheckJewel
  00e62	b0 01		 mov	 al, 1
  00e64	e9 96 02 00 00	 jmp	 $LN24@CheckJewel
  00e69	e9 f4 00 00 00	 jmp	 $LN22@CheckJewel
$LN21@CheckJewel:

; 408  : 	else if(iType == ITEMGET(this->JewelOfLuckType,this->JewelOfLuckIndex) && this->JewelOfLuckEnable) return true;

  00e6e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e71	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00e74	c1 e1 09	 shl	 ecx, 9
  00e77	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e7a	03 4a 34	 add	 ecx, DWORD PTR [edx+52]
  00e7d	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  00e80	75 15		 jne	 SHORT $LN19@CheckJewel
  00e82	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e85	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00e89	74 0c		 je	 SHORT $LN19@CheckJewel
  00e8b	b0 01		 mov	 al, 1
  00e8d	e9 6d 02 00 00	 jmp	 $LN24@CheckJewel
  00e92	e9 cb 00 00 00	 jmp	 $LN22@CheckJewel
$LN19@CheckJewel:

; 409  : 	else if(iType == ITEMGET(this->JewelOfSkillType,this->JewelOfSkillIndex) && this->JewelOfSkillEnable) return true;

  00e97	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e9a	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00e9d	c1 e1 09	 shl	 ecx, 9
  00ea0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ea3	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00ea6	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  00ea9	75 15		 jne	 SHORT $LN17@CheckJewel
  00eab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00eae	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00eb2	74 0c		 je	 SHORT $LN17@CheckJewel
  00eb4	b0 01		 mov	 al, 1
  00eb6	e9 44 02 00 00	 jmp	 $LN24@CheckJewel
  00ebb	e9 a2 00 00 00	 jmp	 $LN22@CheckJewel
$LN17@CheckJewel:

; 410  : 	else if(iType == ITEMGET(this->JewelOfLevelType,this->JewelOfLevelIndex) && this->JewelOfLevelEnable) return true;

  00ec0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ec3	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00ec6	c1 e1 09	 shl	 ecx, 9
  00ec9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ecc	03 4a 54	 add	 ecx, DWORD PTR [edx+84]
  00ecf	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  00ed2	75 12		 jne	 SHORT $LN15@CheckJewel
  00ed4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ed7	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00edb	74 09		 je	 SHORT $LN15@CheckJewel
  00edd	b0 01		 mov	 al, 1
  00edf	e9 1b 02 00 00	 jmp	 $LN24@CheckJewel
  00ee4	eb 7c		 jmp	 SHORT $LN22@CheckJewel
$LN15@CheckJewel:

; 411  : 	else if(iType == ITEMGET(this->JewelOfEvalutionType,this->JewelOfEvalutionIndex) && this->JewelOfEvalutionEnable) return true;

  00ee6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ee9	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  00eec	c1 e1 09	 shl	 ecx, 9
  00eef	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ef2	03 4a 6c	 add	 ecx, DWORD PTR [edx+108]
  00ef5	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  00ef8	75 12		 jne	 SHORT $LN13@CheckJewel
  00efa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00efd	83 78 70 00	 cmp	 DWORD PTR [eax+112], 0
  00f01	74 09		 je	 SHORT $LN13@CheckJewel
  00f03	b0 01		 mov	 al, 1
  00f05	e9 f5 01 00 00	 jmp	 $LN24@CheckJewel
  00f0a	eb 56		 jmp	 SHORT $LN22@CheckJewel
$LN13@CheckJewel:

; 412  : 	else if(iType == ITEMGET(this->JewelOfAncentType,this->JewelOfAncentIndex) && this->JewelOfAncentEnable) return true;

  00f0c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f0f	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00f12	c1 e1 09	 shl	 ecx, 9
  00f15	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f18	03 4a 7c	 add	 ecx, DWORD PTR [edx+124]
  00f1b	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  00f1e	75 15		 jne	 SHORT $LN11@CheckJewel
  00f20	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f23	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [eax+128], 0
  00f2a	74 09		 je	 SHORT $LN11@CheckJewel
  00f2c	b0 01		 mov	 al, 1
  00f2e	e9 cc 01 00 00	 jmp	 $LN24@CheckJewel
  00f33	eb 2d		 jmp	 SHORT $LN22@CheckJewel
$LN11@CheckJewel:

; 413  : 	else if(iType == ITEMGET(this->JewelOfOptionType,this->JewelOfOptionIndex) && this->JewelOfOptionEnable) return true;

  00f35	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f38	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00f3e	c1 e1 09	 shl	 ecx, 9
  00f41	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f44	03 8a 8c 00 00
	00		 add	 ecx, DWORD PTR [edx+140]
  00f4a	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  00f4d	75 13		 jne	 SHORT $LN22@CheckJewel
  00f4f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f52	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00f59	74 07		 je	 SHORT $LN22@CheckJewel
  00f5b	b0 01		 mov	 al, 1
  00f5d	e9 9d 01 00 00	 jmp	 $LN24@CheckJewel
$LN22@CheckJewel:

; 414  : 
; 415  : 	if( g_ExLicense.CheckUser(eExUB::Local)			|| 
; 416  : 		g_ExLicense.CheckUser(eExUB::Gredy)			|| 
; 417  : 		g_ExLicense.CheckUser(eExUB::GredyLocal)	|| 
; 418  : 		g_ExLicense.CheckUser(eExUB::Gredy2)		|| 
; 419  : 		g_ExLicense.CheckUser(eExUB::ulasevich)		|| 
; 420  : 		g_ExLicense.CheckUser(eExUB::ulasevich2)	||
; 421  : 		g_ExLicense.CheckUser(eExUB::EpicMU)		||
; 422  : 		g_ExLicense.CheckUser(eExUB::Artem)			||
; 423  : 		g_ExLicense.CheckUser(eExUB::Artem2))

  00f62	6a 00		 push	 0
  00f64	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00f69	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00f6e	0f b6 c0	 movzx	 eax, al
  00f71	85 c0		 test	 eax, eax
  00f73	0f 85 9c 00 00
	00		 jne	 $LN7@CheckJewel
  00f79	6a 20		 push	 32			; 00000020H
  00f7b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00f80	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00f85	0f b6 c0	 movzx	 eax, al
  00f88	85 c0		 test	 eax, eax
  00f8a	0f 85 85 00 00
	00		 jne	 $LN7@CheckJewel
  00f90	6a 21		 push	 33			; 00000021H
  00f92	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00f97	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00f9c	0f b6 c0	 movzx	 eax, al
  00f9f	85 c0		 test	 eax, eax
  00fa1	75 72		 jne	 SHORT $LN7@CheckJewel
  00fa3	6a 22		 push	 34			; 00000022H
  00fa5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00faa	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00faf	0f b6 c0	 movzx	 eax, al
  00fb2	85 c0		 test	 eax, eax
  00fb4	75 5f		 jne	 SHORT $LN7@CheckJewel
  00fb6	6a 17		 push	 23			; 00000017H
  00fb8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00fbd	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00fc2	0f b6 c0	 movzx	 eax, al
  00fc5	85 c0		 test	 eax, eax
  00fc7	75 4c		 jne	 SHORT $LN7@CheckJewel
  00fc9	6a 24		 push	 36			; 00000024H
  00fcb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00fd0	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00fd5	0f b6 c0	 movzx	 eax, al
  00fd8	85 c0		 test	 eax, eax
  00fda	75 39		 jne	 SHORT $LN7@CheckJewel
  00fdc	6a 3b		 push	 59			; 0000003bH
  00fde	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00fe3	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00fe8	0f b6 c0	 movzx	 eax, al
  00feb	85 c0		 test	 eax, eax
  00fed	75 26		 jne	 SHORT $LN7@CheckJewel
  00fef	6a 30		 push	 48			; 00000030H
  00ff1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00ff6	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00ffb	0f b6 c0	 movzx	 eax, al
  00ffe	85 c0		 test	 eax, eax
  01000	75 13		 jne	 SHORT $LN7@CheckJewel
  01002	6a 31		 push	 49			; 00000031H
  01004	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01009	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0100e	0f b6 c0	 movzx	 eax, al
  01011	85 c0		 test	 eax, eax
  01013	74 44		 je	 SHORT $LN8@CheckJewel
$LN7@CheckJewel:

; 424  : 	{
; 425  : 		if(iType == ITEMGET(this->JewelOfPVPType,this->JewelOfPVPIndex) || iType == ITEMGET(this->JewelOfPVPType,189) && this->JewelOfPVPEnable) return true;

  01015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01018	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0101e	c1 e1 09	 shl	 ecx, 9
  01021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01024	03 8a 9c 00 00
	00		 add	 ecx, DWORD PTR [edx+156]
  0102a	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  0102d	74 23		 je	 SHORT $LN5@CheckJewel
  0102f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01032	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01038	c1 e1 09	 shl	 ecx, 9
  0103b	81 c1 bd 00 00
	00		 add	 ecx, 189		; 000000bdH
  01041	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  01044	75 13		 jne	 SHORT $LN8@CheckJewel
  01046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01049	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  01050	74 07		 je	 SHORT $LN8@CheckJewel
$LN5@CheckJewel:
  01052	b0 01		 mov	 al, 1
  01054	e9 a6 00 00 00	 jmp	 $LN24@CheckJewel
$LN8@CheckJewel:

; 426  : 	}
; 427  : 
; 428  : 	if(iType == ITEMGET(this->JewelOfSocketType,this->JewelOfSocketIndex) && this->JewelOfSocketEnable) return true;

  01059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0105c	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  01062	c1 e1 09	 shl	 ecx, 9
  01065	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01068	03 8a ac 00 00
	00		 add	 ecx, DWORD PTR [edx+172]
  0106e	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  01071	75 10		 jne	 SHORT $LN4@CheckJewel
  01073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01076	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0107d	74 04		 je	 SHORT $LN4@CheckJewel
  0107f	b0 01		 mov	 al, 1
  01081	eb 7c		 jmp	 SHORT $LN24@CheckJewel
$LN4@CheckJewel:

; 429  : 
; 430  : 	if(g_ExLicense.CheckUser(eExUB::Local) || THINNAKORN_MAC ||
; 431  : 	   g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::Gredy2) || g_ExLicense.CheckUser(eExUB::GredyLocal))

  01083	6a 00		 push	 0
  01085	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0108a	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0108f	0f b6 c0	 movzx	 eax, al
  01092	85 c0		 test	 eax, eax
  01094	75 3d		 jne	 SHORT $LN2@CheckJewel
  01096	33 c0		 xor	 eax, eax
  01098	75 39		 jne	 SHORT $LN2@CheckJewel
  0109a	6a 20		 push	 32			; 00000020H
  0109c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  010a1	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  010a6	0f b6 c0	 movzx	 eax, al
  010a9	85 c0		 test	 eax, eax
  010ab	75 26		 jne	 SHORT $LN2@CheckJewel
  010ad	6a 22		 push	 34			; 00000022H
  010af	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  010b4	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  010b9	0f b6 c0	 movzx	 eax, al
  010bc	85 c0		 test	 eax, eax
  010be	75 13		 jne	 SHORT $LN2@CheckJewel
  010c0	6a 21		 push	 33			; 00000021H
  010c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  010c7	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  010cc	0f b6 c0	 movzx	 eax, al
  010cf	85 c0		 test	 eax, eax
  010d1	74 2a		 je	 SHORT $LN3@CheckJewel
$LN2@CheckJewel:

; 432  : 	{
; 433  : 		if(iType == ITEMGET(this->JewelOfWingType,this->JewelOfWingIndex) && this->JewelOfWingEnable) 

  010d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010d6	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  010dc	c1 e1 09	 shl	 ecx, 9
  010df	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  010e2	03 8a c0 00 00
	00		 add	 ecx, DWORD PTR [edx+192]
  010e8	39 4d 08	 cmp	 DWORD PTR _iType$[ebp], ecx
  010eb	75 10		 jne	 SHORT $LN3@CheckJewel
  010ed	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010f0	83 b8 c4 00 00
	00 00		 cmp	 DWORD PTR [eax+196], 0
  010f7	74 04		 je	 SHORT $LN3@CheckJewel

; 434  : 		{
; 435  : 			return true;

  010f9	b0 01		 mov	 al, 1
  010fb	eb 02		 jmp	 SHORT $LN24@CheckJewel
$LN3@CheckJewel:

; 436  : 		}
; 437  : 	}
; 438  : 
; 439  : 	return false;

  010fd	32 c0		 xor	 al, al
$LN24@CheckJewel:

; 440  : }

  010ff	5f		 pop	 edi
  01100	5e		 pop	 esi
  01101	5b		 pop	 ebx
  01102	8b e5		 mov	 esp, ebp
  01104	5d		 pop	 ebp
  01105	c2 04 00	 ret	 4
?CheckJewel@cNewJewels@@QAE_NH@Z ENDP			; cNewJewels::CheckJewel
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?JewelMain@cNewJewels@@QAEXPAUOBJECTSTRUCT@@HH@Z ; cNewJewels::JewelMain
EXTRN	?CheckItemType@CSocketOption@@QAEEH@Z:PROC	; CSocketOption::CheckItemType
EXTRN	?g_SocketOption@@3VCSocketOption@@A:BYTE	; g_SocketOption
EXTRN	?_SetOption@CItemSystemFor380@@QAEHPAVCItem@@H@Z:PROC ; CItemSystemFor380::_SetOption
EXTRN	?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z:PROC ; CItemSystemFor380::Is380Item
EXTRN	?Is380OptionItem@CItemSystemFor380@@QAEHPBVCItem@@@Z:PROC ; CItemSystemFor380::Is380OptionItem
EXTRN	?g_kItemSystemFor380@@3VCItemSystemFor380@@A:BYTE ; g_kItemSystemFor380
EXTRN	?ExGenSetOption@CSetItemOption@@QAEHH@Z:PROC	; CSetItemOption::ExGenSetOption
EXTRN	?IsSetItem@CSetItemOption@@QAEHH@Z:PROC		; CSetItemOption::IsSetItem
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
EXTRN	_srand:PROC
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?GetText@CExText@@QAEPADH@Z:PROC		; CExText::GetText
EXTRN	?g_ExText@@3VCExText@@A:BYTE			; g_ExText
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?GCInventoryItemOneSend@@YAXHH@Z:PROC		; GCInventoryItemOneSend
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
EXTRN	?gObjInventoryItemSet@@YAXHHE@Z:PROC		; gObjInventoryItemSet
EXTRN	?GetExcOptionCount@@YAEE@Z:PROC			; GetExcOptionCount
EXTRN	?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z:PROC ; LuckyItemManager::IsLuckyItemEquipment
EXTRN	?g_LuckyItemManager@@3ULuckyItemManager@@A:BYTE	; g_LuckyItemManager
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv1016 = -152						; size = 4
tv1001 = -152						; size = 4
tv701 = -152						; size = 4
tv686 = -152						; size = 4
tv473 = -152						; size = 4
tv458 = -152						; size = 4
_NewOption$221784 = -81					; size = 1
_ExcellentOpt$221779 = -80				; size = 16
_i$221768 = -64						; size = 4
_i$221762 = -60						; size = 4
_iCount$221761 = -56					; size = 4
_ExcellentOpt$221725 = -52				; size = 24
_NewOption$221673 = -27					; size = 1
_NewOption$221670 = -26					; size = 1
_JewelAdded$ = -25					; size = 1
_iRate$ = -24						; size = 4
_TargetLevel$ = -20					; size = 4
_TargetIndex$ = -16					; size = 4
_JewelIndex$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_source$ = 12						; size = 4
_target$ = 16						; size = 4
?JewelMain@cNewJewels@@QAEXPAUOBJECTSTRUCT@@HH@Z PROC	; cNewJewels::JewelMain
; _this$ = ecx

; 443  : {

  01110	55		 push	 ebp
  01111	8b ec		 mov	 ebp, esp
  01113	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  01119	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0111e	33 c5		 xor	 eax, ebp
  01120	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01123	53		 push	 ebx
  01124	56		 push	 esi
  01125	57		 push	 edi
  01126	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 444  : 	if( source < 0 || source > MAIN_INVENTORY_SIZE - 1 )

  01129	83 7d 0c 00	 cmp	 DWORD PTR _source$[ebp], 0
  0112d	7c 09		 jl	 SHORT $LN124@JewelMain
  0112f	81 7d 0c cb 00
	00 00		 cmp	 DWORD PTR _source$[ebp], 203 ; 000000cbH
  01136	7e 33		 jle	 SHORT $LN125@JewelMain
$LN124@JewelMain:

; 445  : 	{
; 446  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  01138	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0113b	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  01141	51		 push	 ecx
  01142	6a 01		 push	 1
  01144	68 fd 00 00 00	 push	 253			; 000000fdH
  01149	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0114c	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  01152	e8 00 00 00 00	 call	 __ftol2_sse
  01157	50		 push	 eax
  01158	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0115b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0115d	51		 push	 ecx
  0115e	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  01163	83 c4 14	 add	 esp, 20			; 00000014H

; 447  : 		return;

  01166	e9 e6 1d 00 00	 jmp	 $LN126@JewelMain
$LN125@JewelMain:

; 448  : 	}
; 449  : 	// ----
; 450  : 	if( target < 0 || target > MAIN_INVENTORY_SIZE - 1 )

  0116b	83 7d 10 00	 cmp	 DWORD PTR _target$[ebp], 0
  0116f	7c 09		 jl	 SHORT $LN122@JewelMain
  01171	81 7d 10 cb 00
	00 00		 cmp	 DWORD PTR _target$[ebp], 203 ; 000000cbH
  01178	7e 33		 jle	 SHORT $LN123@JewelMain
$LN122@JewelMain:

; 451  : 	{
; 452  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  0117a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0117d	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  01183	51		 push	 ecx
  01184	6a 01		 push	 1
  01186	68 fd 00 00 00	 push	 253			; 000000fdH
  0118b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0118e	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  01194	e8 00 00 00 00	 call	 __ftol2_sse
  01199	50		 push	 eax
  0119a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0119d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0119f	51		 push	 ecx
  011a0	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  011a5	83 c4 14	 add	 esp, 20			; 00000014H

; 453  : 		return;

  011a8	e9 a4 1d 00 00	 jmp	 $LN126@JewelMain
$LN123@JewelMain:

; 454  : 	}
; 455  : 	// ----
; 456  : 	if( !lpObj->pInventory[source].IsItem() || !lpObj->pInventory[target].IsItem() )

  011ad	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  011b0	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  011b6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011b9	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  011bf	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  011c4	85 c0		 test	 eax, eax
  011c6	74 1b		 je	 SHORT $LN120@JewelMain
  011c8	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  011cb	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  011d1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011d4	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  011da	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  011df	85 c0		 test	 eax, eax
  011e1	75 33		 jne	 SHORT $LN121@JewelMain
$LN120@JewelMain:

; 457  : 	{
; 458  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  011e3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011e6	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  011ec	51		 push	 ecx
  011ed	6a 01		 push	 1
  011ef	68 fd 00 00 00	 push	 253			; 000000fdH
  011f4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  011f7	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  011fd	e8 00 00 00 00	 call	 __ftol2_sse
  01202	50		 push	 eax
  01203	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01206	8b 08		 mov	 ecx, DWORD PTR [eax]
  01208	51		 push	 ecx
  01209	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0120e	83 c4 14	 add	 esp, 20			; 00000014H

; 459  : 		return;

  01211	e9 3b 1d 00 00	 jmp	 $LN126@JewelMain
$LN121@JewelMain:

; 460  : 	}
; 461  : #ifdef LUCKYITEM
; 462  : 	if(g_LuckyItemManager.IsLuckyItemEquipment(lpObj->pInventory[target].m_Type))

  01216	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01219	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0121f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01222	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01228	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  0122d	50		 push	 eax
  0122e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  01233	e8 00 00 00 00	 call	 ?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z ; LuckyItemManager::IsLuckyItemEquipment
  01238	85 c0		 test	 eax, eax
  0123a	74 05		 je	 SHORT $LN119@JewelMain

; 463  : 	{
; 464  : 		return;

  0123c	e9 10 1d 00 00	 jmp	 $LN126@JewelMain
$LN119@JewelMain:

; 465  : 	}
; 466  : #endif
; 467  : 
; 468  : 	int JewelIndex = lpObj->pInventory[source].m_Type;

  01241	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  01244	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0124a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0124d	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01253	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01258	89 45 f4	 mov	 DWORD PTR _JewelIndex$[ebp], eax

; 469  : 	int TargetIndex = lpObj->pInventory[target].m_Type;

  0125b	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0125e	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01264	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01267	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0126d	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01272	89 45 f0	 mov	 DWORD PTR _TargetIndex$[ebp], eax

; 470  : 	int TargetLevel = lpObj->pInventory[target].m_Level;

  01275	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01278	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0127e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01281	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01287	0f bf 44 02 08	 movsx	 eax, WORD PTR [edx+eax+8]
  0128c	89 45 ec	 mov	 DWORD PTR _TargetLevel$[ebp], eax

; 471  : 
; 472  : 	if(TargetLevel > 15)

  0128f	83 7d ec 0f	 cmp	 DWORD PTR _TargetLevel$[ebp], 15 ; 0000000fH
  01293	7e 33		 jle	 SHORT $LN118@JewelMain

; 473  : 	{
; 474  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  01295	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01298	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  0129e	51		 push	 ecx
  0129f	6a 01		 push	 1
  012a1	68 fd 00 00 00	 push	 253			; 000000fdH
  012a6	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  012a9	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  012af	e8 00 00 00 00	 call	 __ftol2_sse
  012b4	50		 push	 eax
  012b5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  012b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  012ba	51		 push	 ecx
  012bb	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  012c0	83 c4 14	 add	 esp, 20			; 00000014H

; 475  : 		return;

  012c3	e9 89 1c 00 00	 jmp	 $LN126@JewelMain
$LN118@JewelMain:

; 476  : 	}
; 477  : 
; 478  : 	//srand(time(NULL));
; 479  : 
; 480  : 	int iRate = rand()%100;

  012c8	e8 00 00 00 00	 call	 _rand
  012cd	99		 cdq
  012ce	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  012d3	f7 f9		 idiv	 ecx
  012d5	89 55 e8	 mov	 DWORD PTR _iRate$[ebp], edx

; 481  : 
; 482  : 	bool JewelAdded = false;

  012d8	c6 45 e7 00	 mov	 BYTE PTR _JewelAdded$[ebp], 0

; 483  : //*************************************
; 484  : //	Jewel Of Exellent
; 485  : //*************************************
; 486  : 	if( JewelIndex == ITEMGET(this->JewelOfExellentType,this->JewelOfExellentIndex) )

  012dc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  012df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  012e2	c1 e1 09	 shl	 ecx, 9
  012e5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  012e8	03 4a 08	 add	 ecx, DWORD PTR [edx+8]
  012eb	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  012ee	0f 85 db 02 00
	00		 jne	 $LN117@JewelMain

; 487  : 	{
; 488  : 		if( this->JewelOfExellentRate > iRate )

  012f4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  012f7	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  012fa	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  012fd	0f 8e 84 02 00
	00		 jle	 $LN116@JewelMain

; 489  : 		{
; 490  : 			if( lpObj->pInventory[target].m_Type < ITEMGET(12,0) || this->IsAccessory(lpObj->pInventory[target].m_Type) == true )

  01303	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01306	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0130c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0130f	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01315	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  0131a	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  0131f	7c 2c		 jl	 SHORT $LN114@JewelMain
  01321	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01324	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0132a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0132d	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01333	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01338	50		 push	 eax
  01339	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0133c	e8 00 00 00 00	 call	 ?IsAccessory@cNewJewels@@QAE_NH@Z ; cNewJewels::IsAccessory
  01341	0f b6 c8	 movzx	 ecx, al
  01344	83 f9 01	 cmp	 ecx, 1
  01347	0f 85 0a 02 00
	00		 jne	 $LN107@JewelMain
$LN114@JewelMain:

; 491  : 			{
; 492  : 				if( lpObj->pInventory[target].m_NewOption > 0)

  0134d	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01350	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01356	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01359	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0135f	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  01367	85 c0		 test	 eax, eax
  01369	0f 8e cd 01 00
	00		 jle	 $LN113@JewelMain

; 493  : 				{
; 494  : 					if( GetExcOptionCount(lpObj->pInventory[target].m_NewOption) < this->JewelOfExellentMaxOpt )

  0136f	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01372	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01378	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0137b	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01381	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  01389	50		 push	 eax
  0138a	e8 00 00 00 00	 call	 ?GetExcOptionCount@@YAEE@Z ; GetExcOptionCount
  0138f	83 c4 04	 add	 esp, 4
  01392	0f b6 c8	 movzx	 ecx, al
  01395	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01398	3b 4a 14	 cmp	 ecx, DWORD PTR [edx+20]
  0139b	0f 8d 99 01 00
	00		 jge	 $LN108@JewelMain

; 495  : 					{
; 496  : 						if(5 > GetExcOptionCount(lpObj->pInventory[target].m_NewOption) )

  013a1	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  013a4	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  013aa	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  013ad	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  013b3	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  013bb	50		 push	 eax
  013bc	e8 00 00 00 00	 call	 ?GetExcOptionCount@@YAEE@Z ; GetExcOptionCount
  013c1	83 c4 04	 add	 esp, 4
  013c4	0f b6 c8	 movzx	 ecx, al
  013c7	83 f9 05	 cmp	 ecx, 5
  013ca	0f 8d a1 00 00
	00		 jge	 $LN111@JewelMain

; 497  : 						{
; 498  : 							BYTE NewOption = this->GetExcUnusedOption(lpObj->pInventory[target].m_NewOption);

  013d0	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  013d3	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  013d9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  013dc	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  013e2	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  013ea	50		 push	 eax
  013eb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013ee	e8 00 00 00 00	 call	 ?GetExcUnusedOption@cNewJewels@@QAEEE@Z ; cNewJewels::GetExcUnusedOption
  013f3	88 45 e6	 mov	 BYTE PTR _NewOption$221670[ebp], al

; 499  : 						
; 500  : 							lpObj->pInventory[target].m_NewOption = NewOption;

  013f6	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  013f9	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  013ff	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01402	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01408	8a 4d e6	 mov	 cl, BYTE PTR _NewOption$221670[ebp]
  0140b	88 8c 02 97 00
	00 00		 mov	 BYTE PTR [edx+eax+151], cl

; 501  : 							gObjInventoryItemSet(lpObj->m_Index, source, -1);

  01412	68 ff 00 00 00	 push	 255			; 000000ffH
  01417	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  0141a	50		 push	 eax
  0141b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0141e	8b 11		 mov	 edx, DWORD PTR [ecx]
  01420	52		 push	 edx
  01421	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  01426	83 c4 0c	 add	 esp, 12			; 0000000cH

; 502  : 							lpObj->pInventory[source].Clear();

  01429	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  0142c	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01432	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01435	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  0143b	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 503  : 							GCInventoryItemOneSend(lpObj->m_Index, target);

  01440	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01443	50		 push	 eax
  01444	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01447	8b 11		 mov	 edx, DWORD PTR [ecx]
  01449	52		 push	 edx
  0144a	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  0144f	83 c4 08	 add	 esp, 8

; 504  : 							GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  01452	6a 01		 push	 1
  01454	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  01458	50		 push	 eax
  01459	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0145c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0145e	52		 push	 edx
  0145f	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  01464	83 c4 0c	 add	 esp, 12			; 0000000cH

; 505  : 
; 506  : 							return;

  01467	e9 e5 1a 00 00	 jmp	 $LN126@JewelMain
  0146c	e9 c9 00 00 00	 jmp	 $LN108@JewelMain
$LN111@JewelMain:

; 507  : 						}
; 508  : 						else if(5 == GetExcOptionCount(lpObj->pInventory[target].m_NewOption) )

  01471	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01474	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0147a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0147d	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01483	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  0148b	50		 push	 eax
  0148c	e8 00 00 00 00	 call	 ?GetExcOptionCount@@YAEE@Z ; GetExcOptionCount
  01491	83 c4 04	 add	 esp, 4
  01494	0f b6 c8	 movzx	 ecx, al
  01497	83 f9 05	 cmp	 ecx, 5
  0149a	75 7c		 jne	 SHORT $LN109@JewelMain

; 509  : 						{
; 510  : 							BYTE NewOption = 63;

  0149c	c6 45 e5 3f	 mov	 BYTE PTR _NewOption$221673[ebp], 63 ; 0000003fH

; 511  : 						
; 512  : 							lpObj->pInventory[target].m_NewOption = NewOption;

  014a0	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  014a3	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  014a9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  014ac	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  014b2	8a 4d e5	 mov	 cl, BYTE PTR _NewOption$221673[ebp]
  014b5	88 8c 02 97 00
	00 00		 mov	 BYTE PTR [edx+eax+151], cl

; 513  : 							gObjInventoryItemSet(lpObj->m_Index, source, -1);

  014bc	68 ff 00 00 00	 push	 255			; 000000ffH
  014c1	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  014c4	50		 push	 eax
  014c5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  014c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  014ca	52		 push	 edx
  014cb	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  014d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 514  : 							lpObj->pInventory[source].Clear();

  014d3	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  014d6	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  014dc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014df	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  014e5	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 515  : 							GCInventoryItemOneSend(lpObj->m_Index, target);

  014ea	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  014ed	50		 push	 eax
  014ee	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  014f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  014f3	52		 push	 edx
  014f4	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  014f9	83 c4 08	 add	 esp, 8

; 516  : 							GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  014fc	6a 01		 push	 1
  014fe	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  01502	50		 push	 eax
  01503	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01506	8b 11		 mov	 edx, DWORD PTR [ecx]
  01508	52		 push	 edx
  01509	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  0150e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 517  : 
; 518  : 							return;

  01511	e9 3b 1a 00 00	 jmp	 $LN126@JewelMain

; 519  : 						}
; 520  : 						else

  01516	eb 22		 jmp	 SHORT $LN108@JewelMain
$LN109@JewelMain:

; 521  : 						{
; 522  : 							MsgOutput(lpObj->m_Index, g_ExText.GetText(19), this->JewelOfExellentMaxOpt);

  01518	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0151b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0151e	51		 push	 ecx
  0151f	6a 13		 push	 19			; 00000013H
  01521	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  01526	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0152b	50		 push	 eax
  0152c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0152f	8b 02		 mov	 eax, DWORD PTR [edx]
  01531	50		 push	 eax
  01532	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  01537	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN108@JewelMain:

; 523  : 						}
; 524  : 					}
; 525  : 				}
; 526  : 				else

  0153a	eb 1b		 jmp	 SHORT $LN107@JewelMain
$LN113@JewelMain:

; 527  : 				{
; 528  : 					MsgOutput(lpObj->m_Index, g_ExText.GetText(20));

  0153c	6a 14		 push	 20			; 00000014H
  0153e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  01543	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  01548	50		 push	 eax
  01549	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0154c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0154e	51		 push	 ecx
  0154f	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  01554	83 c4 08	 add	 esp, 8
$LN107@JewelMain:

; 529  : 				}
; 530  : 			}
; 531  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  01557	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0155a	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  01560	51		 push	 ecx
  01561	6a 01		 push	 1
  01563	68 fd 00 00 00	 push	 253			; 000000fdH
  01568	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0156b	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  01571	e8 00 00 00 00	 call	 __ftol2_sse
  01576	50		 push	 eax
  01577	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0157a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0157c	51		 push	 ecx
  0157d	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  01582	83 c4 14	 add	 esp, 20			; 00000014H

; 532  : 		}
; 533  : 		else

  01585	eb 43		 jmp	 SHORT $LN106@JewelMain
$LN116@JewelMain:

; 534  : 		{
; 535  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  01587	68 ff 00 00 00	 push	 255			; 000000ffH
  0158c	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  0158f	50		 push	 eax
  01590	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01593	8b 11		 mov	 edx, DWORD PTR [ecx]
  01595	52		 push	 edx
  01596	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  0159b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 536  : 			lpObj->pInventory[source].Clear();

  0159e	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  015a1	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  015a7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015aa	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  015b0	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 537  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  015b5	6a 01		 push	 1
  015b7	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  015bb	50		 push	 eax
  015bc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  015bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  015c1	52		 push	 edx
  015c2	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  015c7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN106@JewelMain:

; 538  : 		}

  015ca	e9 3b 16 00 00	 jmp	 $LN12@JewelMain
$LN117@JewelMain:

; 539  : 	}
; 540  : //*************************************
; 541  : //	Jewel Of Mistic
; 542  : //*************************************
; 543  : 	else if( JewelIndex == ITEMGET(this->JewelOfMisticType,this->JewelOfMisticIndex) ) //

  015cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  015d2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  015d5	c1 e1 09	 shl	 ecx, 9
  015d8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  015db	03 4a 1c	 add	 ecx, DWORD PTR [edx+28]
  015de	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  015e1	0f 85 ae 01 00
	00		 jne	 $LN104@JewelMain

; 544  : 	{
; 545  : 		if( this->JewelOfMisticRate > iRate )

  015e7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  015ea	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  015ed	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  015f0	0f 8e 57 01 00
	00		 jle	 $LN103@JewelMain

; 546  : 		{
; 547  : 			if(this->IsAccessory(TargetIndex) == true )

  015f6	8b 45 f0	 mov	 eax, DWORD PTR _TargetIndex$[ebp]
  015f9	50		 push	 eax
  015fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  015fd	e8 00 00 00 00	 call	 ?IsAccessory@cNewJewels@@QAE_NH@Z ; cNewJewels::IsAccessory
  01602	0f b6 c8	 movzx	 ecx, al
  01605	83 f9 01	 cmp	 ecx, 1
  01608	0f 85 f4 00 00
	00		 jne	 $LN102@JewelMain

; 548  : 			{
; 549  : 				if(TargetLevel >= this->JewelOfMisticMinLvl ) 

  0160e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01611	8b 4d ec	 mov	 ecx, DWORD PTR _TargetLevel$[ebp]
  01614	3b 48 28	 cmp	 ecx, DWORD PTR [eax+40]
  01617	0f 8c c1 00 00
	00		 jl	 $LN101@JewelMain

; 550  : 				{
; 551  : 					if(TargetLevel <= this->JewelOfMisticMaxLvl)

  0161d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01620	8b 4d ec	 mov	 ecx, DWORD PTR _TargetLevel$[ebp]
  01623	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  01626	0f 8f 8e 00 00
	00		 jg	 $LN100@JewelMain

; 552  : 					{
; 553  : 						lpObj->pInventory[target].m_Level++;

  0162c	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0162f	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01635	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01638	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0163e	66 8b 44 02 08	 mov	 ax, WORD PTR [edx+eax+8]
  01643	66 83 c0 01	 add	 ax, 1
  01647	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  0164a	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01650	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01653	8b 92 24 0e 00
	00		 mov	 edx, DWORD PTR [edx+3620]
  01659	66 89 44 0a 08	 mov	 WORD PTR [edx+ecx+8], ax

; 554  : 						gObjInventoryItemSet(lpObj->m_Index, source, -1);

  0165e	68 ff 00 00 00	 push	 255			; 000000ffH
  01663	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  01666	50		 push	 eax
  01667	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0166a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0166c	52		 push	 edx
  0166d	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  01672	83 c4 0c	 add	 esp, 12			; 0000000cH

; 555  : 						lpObj->pInventory[source].Clear();

  01675	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  01678	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0167e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01681	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  01687	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 556  : 						GCInventoryItemOneSend(lpObj->m_Index, target);

  0168c	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0168f	50		 push	 eax
  01690	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01693	8b 11		 mov	 edx, DWORD PTR [ecx]
  01695	52		 push	 edx
  01696	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  0169b	83 c4 08	 add	 esp, 8

; 557  : 						GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  0169e	6a 01		 push	 1
  016a0	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  016a4	50		 push	 eax
  016a5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  016aa	52		 push	 edx
  016ab	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  016b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 558  : 						return;

  016b3	e9 99 18 00 00	 jmp	 $LN126@JewelMain

; 559  : 					}
; 560  : 					else

  016b8	eb 22		 jmp	 SHORT $LN99@JewelMain
$LN100@JewelMain:

; 561  : 					{
; 562  : 						MsgOutput(lpObj->m_Index, g_ExText.GetText(21),this->JewelOfMisticMaxLvl);

  016ba	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  016bd	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  016c0	51		 push	 ecx
  016c1	6a 15		 push	 21			; 00000015H
  016c3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  016c8	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  016cd	50		 push	 eax
  016ce	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  016d1	8b 02		 mov	 eax, DWORD PTR [edx]
  016d3	50		 push	 eax
  016d4	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  016d9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN99@JewelMain:

; 563  : 					}
; 564  : 				}
; 565  : 				else

  016dc	eb 22		 jmp	 SHORT $LN98@JewelMain
$LN101@JewelMain:

; 566  : 				{
; 567  : 					MsgOutput(lpObj->m_Index, g_ExText.GetText(22),this->JewelOfMisticMinLvl);

  016de	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  016e1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  016e4	51		 push	 ecx
  016e5	6a 16		 push	 22			; 00000016H
  016e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  016ec	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  016f1	50		 push	 eax
  016f2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  016f5	8b 02		 mov	 eax, DWORD PTR [edx]
  016f7	50		 push	 eax
  016f8	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  016fd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN98@JewelMain:

; 568  : 				}
; 569  : 			}
; 570  : 			else

  01700	eb 1b		 jmp	 SHORT $LN97@JewelMain
$LN102@JewelMain:

; 571  : 			{
; 572  : 				MsgOutput(lpObj->m_Index, g_ExText.GetText(23));

  01702	6a 17		 push	 23			; 00000017H
  01704	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  01709	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0170e	50		 push	 eax
  0170f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01712	8b 08		 mov	 ecx, DWORD PTR [eax]
  01714	51		 push	 ecx
  01715	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0171a	83 c4 08	 add	 esp, 8
$LN97@JewelMain:

; 573  : 			}
; 574  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  0171d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01720	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  01726	51		 push	 ecx
  01727	6a 01		 push	 1
  01729	68 fd 00 00 00	 push	 253			; 000000fdH
  0172e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01731	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  01737	e8 00 00 00 00	 call	 __ftol2_sse
  0173c	50		 push	 eax
  0173d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01740	8b 08		 mov	 ecx, DWORD PTR [eax]
  01742	51		 push	 ecx
  01743	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  01748	83 c4 14	 add	 esp, 20			; 00000014H

; 575  : 		}
; 576  : 		else

  0174b	eb 43		 jmp	 SHORT $LN96@JewelMain
$LN103@JewelMain:

; 577  : 		{
; 578  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  0174d	68 ff 00 00 00	 push	 255			; 000000ffH
  01752	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  01755	50		 push	 eax
  01756	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01759	8b 11		 mov	 edx, DWORD PTR [ecx]
  0175b	52		 push	 edx
  0175c	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  01761	83 c4 0c	 add	 esp, 12			; 0000000cH

; 579  : 			lpObj->pInventory[source].Clear();

  01764	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  01767	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0176d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01770	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  01776	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 580  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  0177b	6a 01		 push	 1
  0177d	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  01781	50		 push	 eax
  01782	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01785	8b 11		 mov	 edx, DWORD PTR [ecx]
  01787	52		 push	 edx
  01788	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  0178d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN96@JewelMain:

; 581  : 		}

  01790	e9 75 14 00 00	 jmp	 $LN12@JewelMain
$LN104@JewelMain:

; 582  : 	}
; 583  : //*************************************
; 584  : //	Jewel Of Luck
; 585  : //*************************************
; 586  : 	else if( JewelIndex == ITEMGET(this->JewelOfLuckType,this->JewelOfLuckIndex) ) 

  01795	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01798	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0179b	c1 e1 09	 shl	 ecx, 9
  0179e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  017a1	03 4a 34	 add	 ecx, DWORD PTR [edx+52]
  017a4	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  017a7	0f 85 99 03 00
	00		 jne	 $LN94@JewelMain

; 587  : 	{
; 588  : 		if( this->JewelOfLuckRate > iRate )

  017ad	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  017b0	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  017b3	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  017b6	0f 8e 42 03 00
	00		 jle	 $LN93@JewelMain

; 589  : 		{
; 590  : 			if(lpObj->pInventory[target].m_Type < ITEMGET(12,0)
; 591  : #ifdef NEW_JEWEL_FROM_WINGS
; 592  : 				|| (lpObj->pInventory[target].m_Type >= ITEMGET(12,0) && lpObj->pInventory[target].m_Type <= ITEMGET(12,6)) || lpObj->pInventory[target].m_Type <= ITEMGET(13,30) || 
; 593  : 				 (lpObj->pInventory[target].m_Type >= ITEMGET(12,36) && lpObj->pInventory[target].m_Type <= ITEMGET(12,40)) || //Season 2.5 Third Wing add-on
; 594  : 				 lpObj->pInventory[target].m_Type == ITEMGET(12,41) || lpObj->pInventory[target].m_Type == ITEMGET(12,42) || lpObj->pInventory[target].m_Type == ITEMGET(12,43)
; 595  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 49)
; 596  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 50)
; 597  : 				|| IS_NEWWINGS(lpObj->pInventory[target].m_Type)
; 598  : 				|| IS_NEWWINGS_6(lpObj->pInventory[target].m_Type)
; 599  : #endif // NEW_JEWEL_FROM_WINGS
; 600  : 				)

  017bc	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  017bf	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  017c5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  017c8	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  017ce	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  017d3	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  017d8	0f 8c 06 02 00
	00		 jl	 $LN91@JewelMain
  017de	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  017e1	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  017e7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  017ea	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  017f0	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  017f5	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  017fa	7c 22		 jl	 SHORT $LN90@JewelMain
  017fc	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  017ff	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01805	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01808	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0180e	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01813	3d 06 18 00 00	 cmp	 eax, 6150		; 00001806H
  01818	0f 8e c6 01 00
	00		 jle	 $LN91@JewelMain
$LN90@JewelMain:
  0181e	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01821	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01827	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0182a	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01830	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01835	3d 1e 1a 00 00	 cmp	 eax, 6686		; 00001a1eH
  0183a	0f 8e a4 01 00
	00		 jle	 $LN91@JewelMain
  01840	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01843	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01849	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0184c	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01852	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01857	3d 24 18 00 00	 cmp	 eax, 6180		; 00001824H
  0185c	7c 22		 jl	 SHORT $LN89@JewelMain
  0185e	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01861	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01867	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0186a	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01870	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01875	3d 28 18 00 00	 cmp	 eax, 6184		; 00001828H
  0187a	0f 8e 64 01 00
	00		 jle	 $LN91@JewelMain
$LN89@JewelMain:
  01880	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01883	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01889	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0188c	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01892	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01897	3d 29 18 00 00	 cmp	 eax, 6185		; 00001829H
  0189c	0f 84 42 01 00
	00		 je	 $LN91@JewelMain
  018a2	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  018a5	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  018ab	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  018ae	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  018b4	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  018b9	3d 2a 18 00 00	 cmp	 eax, 6186		; 0000182aH
  018be	0f 84 20 01 00
	00		 je	 $LN91@JewelMain
  018c4	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  018c7	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  018cd	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  018d0	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  018d6	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  018db	3d 2b 18 00 00	 cmp	 eax, 6187		; 0000182bH
  018e0	0f 84 fe 00 00
	00		 je	 $LN91@JewelMain
  018e6	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  018e9	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  018ef	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  018f2	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  018f8	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  018fd	3d 31 18 00 00	 cmp	 eax, 6193		; 00001831H
  01902	0f 84 dc 00 00
	00		 je	 $LN91@JewelMain
  01908	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0190b	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01911	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01914	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0191a	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  0191f	3d 32 18 00 00	 cmp	 eax, 6194		; 00001832H
  01924	0f 84 ba 00 00
	00		 je	 $LN91@JewelMain
  0192a	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0192d	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01933	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01936	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0193c	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01941	3d b4 18 00 00	 cmp	 eax, 6324		; 000018b4H
  01946	7d 0c		 jge	 SHORT $LN128@JewelMain
  01948	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv458[ebp], 0
  01952	eb 28		 jmp	 SHORT $LN129@JewelMain
$LN128@JewelMain:
  01954	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  01957	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0195d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01960	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  01966	0f bf 4c 08 06	 movsx	 ecx, WORD PTR [eax+ecx+6]
  0196b	33 d2		 xor	 edx, edx
  0196d	81 f9 c2 18 00
	00		 cmp	 ecx, 6338		; 000018c2H
  01973	0f 9e c2	 setle	 dl
  01976	89 95 68 ff ff
	ff		 mov	 DWORD PTR tv458[ebp], edx
$LN129@JewelMain:
  0197c	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR tv458[ebp], 0
  01983	75 5f		 jne	 SHORT $LN91@JewelMain
  01985	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01988	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0198e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01991	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01997	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  0199c	3d c3 18 00 00	 cmp	 eax, 6339		; 000018c3H
  019a1	7d 0c		 jge	 SHORT $LN130@JewelMain
  019a3	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv473[ebp], 0
  019ad	eb 28		 jmp	 SHORT $LN131@JewelMain
$LN130@JewelMain:
  019af	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  019b2	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  019b8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  019bb	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  019c1	0f bf 4c 08 06	 movsx	 ecx, WORD PTR [eax+ecx+6]
  019c6	33 d2		 xor	 edx, edx
  019c8	81 f9 dc 18 00
	00		 cmp	 ecx, 6364		; 000018dcH
  019ce	0f 9e c2	 setle	 dl
  019d1	89 95 68 ff ff
	ff		 mov	 DWORD PTR tv473[ebp], edx
$LN131@JewelMain:
  019d7	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR tv473[ebp], 0
  019de	0f 84 cf 00 00
	00		 je	 $LN92@JewelMain
$LN91@JewelMain:

; 601  : 			{
; 602  : 				if(lpObj->pInventory[target].m_Option2 == 0)

  019e4	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  019e7	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  019ed	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  019f0	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  019f6	0f b6 84 02 95
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+149]
  019fe	85 c0		 test	 eax, eax
  01a00	0f 85 90 00 00
	00		 jne	 $LN88@JewelMain

; 603  : 				{
; 604  : 					lpObj->pInventory[target].m_Option2++;

  01a06	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01a09	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01a0f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01a12	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01a18	8a 84 02 95 00
	00 00		 mov	 al, BYTE PTR [edx+eax+149]
  01a1f	04 01		 add	 al, 1
  01a21	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  01a24	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01a2a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01a2d	8b 92 24 0e 00
	00		 mov	 edx, DWORD PTR [edx+3620]
  01a33	88 84 0a 95 00
	00 00		 mov	 BYTE PTR [edx+ecx+149], al

; 605  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);

  01a3a	68 ff 00 00 00	 push	 255			; 000000ffH
  01a3f	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  01a42	50		 push	 eax
  01a43	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01a46	8b 11		 mov	 edx, DWORD PTR [ecx]
  01a48	52		 push	 edx
  01a49	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  01a4e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 606  : 					lpObj->pInventory[source].Clear();

  01a51	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  01a54	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01a5a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a5d	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  01a63	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 607  : 					GCInventoryItemOneSend(lpObj->m_Index, target);

  01a68	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01a6b	50		 push	 eax
  01a6c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01a6f	8b 11		 mov	 edx, DWORD PTR [ecx]
  01a71	52		 push	 edx
  01a72	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  01a77	83 c4 08	 add	 esp, 8

; 608  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  01a7a	6a 01		 push	 1
  01a7c	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  01a80	50		 push	 eax
  01a81	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01a84	8b 11		 mov	 edx, DWORD PTR [ecx]
  01a86	52		 push	 edx
  01a87	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  01a8c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 609  : 					return;

  01a8f	e9 bd 14 00 00	 jmp	 $LN126@JewelMain

; 610  : 				}
; 611  : 				else

  01a94	eb 1b		 jmp	 SHORT $LN87@JewelMain
$LN88@JewelMain:

; 612  : 				{
; 613  : 					MsgOutput(lpObj->m_Index, g_ExText.GetText(24));

  01a96	6a 18		 push	 24			; 00000018H
  01a98	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  01a9d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  01aa2	50		 push	 eax
  01aa3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01aa6	8b 08		 mov	 ecx, DWORD PTR [eax]
  01aa8	51		 push	 ecx
  01aa9	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  01aae	83 c4 08	 add	 esp, 8
$LN87@JewelMain:

; 614  : 				}
; 615  : 			}
; 616  : 			else

  01ab1	eb 1b		 jmp	 SHORT $LN86@JewelMain
$LN92@JewelMain:

; 617  : 			{
; 618  : 				MsgOutput(lpObj->m_Index, g_ExText.GetText(25));

  01ab3	6a 19		 push	 25			; 00000019H
  01ab5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  01aba	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  01abf	50		 push	 eax
  01ac0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ac3	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ac5	51		 push	 ecx
  01ac6	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  01acb	83 c4 08	 add	 esp, 8
$LN86@JewelMain:

; 619  : 			}
; 620  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  01ace	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ad1	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  01ad7	51		 push	 ecx
  01ad8	6a 01		 push	 1
  01ada	68 fd 00 00 00	 push	 253			; 000000fdH
  01adf	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01ae2	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  01ae8	e8 00 00 00 00	 call	 __ftol2_sse
  01aed	50		 push	 eax
  01aee	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01af1	8b 08		 mov	 ecx, DWORD PTR [eax]
  01af3	51		 push	 ecx
  01af4	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  01af9	83 c4 14	 add	 esp, 20			; 00000014H

; 621  : 		}
; 622  : 		else

  01afc	eb 43		 jmp	 SHORT $LN85@JewelMain
$LN93@JewelMain:

; 623  : 		{
; 624  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  01afe	68 ff 00 00 00	 push	 255			; 000000ffH
  01b03	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  01b06	50		 push	 eax
  01b07	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01b0a	8b 11		 mov	 edx, DWORD PTR [ecx]
  01b0c	52		 push	 edx
  01b0d	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  01b12	83 c4 0c	 add	 esp, 12			; 0000000cH

; 625  : 			lpObj->pInventory[source].Clear();

  01b15	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  01b18	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01b1e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b21	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  01b27	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 626  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  01b2c	6a 01		 push	 1
  01b2e	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  01b32	50		 push	 eax
  01b33	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01b36	8b 11		 mov	 edx, DWORD PTR [ecx]
  01b38	52		 push	 edx
  01b39	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  01b3e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN85@JewelMain:

; 627  : 		}

  01b41	e9 c4 10 00 00	 jmp	 $LN12@JewelMain
$LN94@JewelMain:

; 628  : 	}
; 629  : //*************************************
; 630  : //	Jewel Of Skill
; 631  : //*************************************
; 632  : 	else if( JewelIndex == ITEMGET(this->JewelOfSkillType,this->JewelOfSkillIndex) )

  01b46	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01b49	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  01b4c	c1 e1 09	 shl	 ecx, 9
  01b4f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01b52	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  01b55	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  01b58	0f 85 7a 01 00
	00		 jne	 $LN83@JewelMain

; 633  : 	{
; 634  : 		if( this->JewelOfSkillRate > iRate )

  01b5e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01b61	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  01b64	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  01b67	0f 8e 23 01 00
	00		 jle	 $LN82@JewelMain

; 635  : 		{
; 636  : 			if(ItemAttribute[lpObj->pInventory[target].m_Type].SkillType != 0)

  01b6d	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01b70	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01b76	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01b79	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01b7f	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01b84	6b c0 70	 imul	 eax, 112		; 00000070H
  01b87	83 b8 68 00 00
	00 00		 cmp	 DWORD PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+104], 0
  01b8e	0f 84 b1 00 00
	00		 je	 $LN81@JewelMain

; 637  : 			{
; 638  : 				if(lpObj->pInventory[target].m_Option1 == 0)

  01b94	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01b97	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01b9d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01ba0	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01ba6	0f b6 84 02 94
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+148]
  01bae	85 c0		 test	 eax, eax
  01bb0	75 76		 jne	 SHORT $LN80@JewelMain

; 639  : 				{
; 640  : 					lpObj->pInventory[target].m_Option1 = TRUE;

  01bb2	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01bb5	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01bbb	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01bbe	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01bc4	c6 84 02 94 00
	00 00 01	 mov	 BYTE PTR [edx+eax+148], 1

; 641  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);

  01bcc	68 ff 00 00 00	 push	 255			; 000000ffH
  01bd1	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  01bd4	50		 push	 eax
  01bd5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01bd8	8b 11		 mov	 edx, DWORD PTR [ecx]
  01bda	52		 push	 edx
  01bdb	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  01be0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 642  : 					lpObj->pInventory[source].Clear();

  01be3	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  01be6	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01bec	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01bef	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  01bf5	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 643  : 					GCInventoryItemOneSend(lpObj->m_Index, target);

  01bfa	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01bfd	50		 push	 eax
  01bfe	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01c01	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c03	52		 push	 edx
  01c04	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  01c09	83 c4 08	 add	 esp, 8

; 644  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  01c0c	6a 01		 push	 1
  01c0e	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  01c12	50		 push	 eax
  01c13	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01c16	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c18	52		 push	 edx
  01c19	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  01c1e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 645  : 
; 646  : 					//GCMagicListMultiSend(lpObj, 0);//
; 647  : 	//GCMagicListMultiSend(lpObj, 0);
; 648  : 	//gObjUseSkill.SkillChangeUse(lpObj->m_Index);
; 649  : 
; 650  : 					return;

  01c21	e9 2b 13 00 00	 jmp	 $LN126@JewelMain

; 651  : 				}
; 652  : 				else

  01c26	eb 1b		 jmp	 SHORT $LN79@JewelMain
$LN80@JewelMain:

; 653  : 				{
; 654  : 					MsgOutput(lpObj->m_Index, g_ExText.GetText(26));

  01c28	6a 1a		 push	 26			; 0000001aH
  01c2a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  01c2f	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  01c34	50		 push	 eax
  01c35	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c38	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c3a	51		 push	 ecx
  01c3b	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  01c40	83 c4 08	 add	 esp, 8
$LN79@JewelMain:

; 655  : 				}
; 656  : 			}
; 657  : 			else

  01c43	eb 1b		 jmp	 SHORT $LN78@JewelMain
$LN81@JewelMain:

; 658  : 			{
; 659  : 				MsgOutput(lpObj->m_Index, g_ExText.GetText(27));

  01c45	6a 1b		 push	 27			; 0000001bH
  01c47	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  01c4c	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  01c51	50		 push	 eax
  01c52	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c55	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c57	51		 push	 ecx
  01c58	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  01c5d	83 c4 08	 add	 esp, 8
$LN78@JewelMain:

; 660  : 			}
; 661  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  01c60	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c63	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  01c69	51		 push	 ecx
  01c6a	6a 01		 push	 1
  01c6c	68 fd 00 00 00	 push	 253			; 000000fdH
  01c71	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01c74	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  01c7a	e8 00 00 00 00	 call	 __ftol2_sse
  01c7f	50		 push	 eax
  01c80	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c83	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c85	51		 push	 ecx
  01c86	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  01c8b	83 c4 14	 add	 esp, 20			; 00000014H

; 662  : 		}
; 663  : 		else

  01c8e	eb 43		 jmp	 SHORT $LN77@JewelMain
$LN82@JewelMain:

; 664  : 		{
; 665  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  01c90	68 ff 00 00 00	 push	 255			; 000000ffH
  01c95	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  01c98	50		 push	 eax
  01c99	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01c9c	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c9e	52		 push	 edx
  01c9f	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  01ca4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 666  : 			lpObj->pInventory[source].Clear();

  01ca7	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  01caa	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01cb0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01cb3	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  01cb9	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 667  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  01cbe	6a 01		 push	 1
  01cc0	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  01cc4	50		 push	 eax
  01cc5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01cc8	8b 11		 mov	 edx, DWORD PTR [ecx]
  01cca	52		 push	 edx
  01ccb	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  01cd0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN77@JewelMain:

; 668  : 		}

  01cd3	e9 32 0f 00 00	 jmp	 $LN12@JewelMain
$LN83@JewelMain:

; 669  : 	}
; 670  : //*************************************
; 671  : //	Jewel Of Level
; 672  : //*************************************
; 673  : 	else if( JewelIndex == ITEMGET(this->JewelOfLevelType,this->JewelOfLevelIndex) ) 

  01cd8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01cdb	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01cde	c1 e1 09	 shl	 ecx, 9
  01ce1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01ce4	03 4a 54	 add	 ecx, DWORD PTR [edx+84]
  01ce7	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  01cea	0f 85 be 03 00
	00		 jne	 $LN75@JewelMain

; 674  : 	{
; 675  : 		if( this->JewelOfLevelRate > iRate )

  01cf0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01cf3	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  01cf6	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  01cf9	0f 8e 67 03 00
	00		 jle	 $LN74@JewelMain

; 676  : 		{
; 677  : 			if(lpObj->pInventory[target].m_Type < ITEMGET(12,0)
; 678  : #ifdef NEW_JEWEL_FROM_WINGS
; 679  : 				|| (lpObj->pInventory[target].m_Type >= ITEMGET(12,0) && lpObj->pInventory[target].m_Type <= ITEMGET(12,6)) || lpObj->pInventory[target].m_Type <= ITEMGET(13,30) || 
; 680  : 				 (lpObj->pInventory[target].m_Type >= ITEMGET(12,36) && lpObj->pInventory[target].m_Type <= ITEMGET(12,40)) || //Season 2.5 Third Wing add-on
; 681  : 				 lpObj->pInventory[target].m_Type == ITEMGET(12,41) || lpObj->pInventory[target].m_Type == ITEMGET(12,42) || lpObj->pInventory[target].m_Type == ITEMGET(12,43)
; 682  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 49)
; 683  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 50)
; 684  : 				|| IS_NEWWINGS(lpObj->pInventory[target].m_Type)
; 685  : 				|| IS_NEWWINGS_6(lpObj->pInventory[target].m_Type)
; 686  : #endif // NEW_JEWEL_FROM_WINGS
; 687  : 				)

  01cff	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01d02	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01d08	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01d0b	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01d11	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01d16	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  01d1b	0f 8c 06 02 00
	00		 jl	 $LN72@JewelMain
  01d21	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01d24	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01d2a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01d2d	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01d33	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01d38	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  01d3d	7c 22		 jl	 SHORT $LN71@JewelMain
  01d3f	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01d42	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01d48	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01d4b	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01d51	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01d56	3d 06 18 00 00	 cmp	 eax, 6150		; 00001806H
  01d5b	0f 8e c6 01 00
	00		 jle	 $LN72@JewelMain
$LN71@JewelMain:
  01d61	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01d64	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01d6a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01d6d	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01d73	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01d78	3d 1e 1a 00 00	 cmp	 eax, 6686		; 00001a1eH
  01d7d	0f 8e a4 01 00
	00		 jle	 $LN72@JewelMain
  01d83	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01d86	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01d8c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01d8f	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01d95	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01d9a	3d 24 18 00 00	 cmp	 eax, 6180		; 00001824H
  01d9f	7c 22		 jl	 SHORT $LN70@JewelMain
  01da1	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01da4	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01daa	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01dad	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01db3	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01db8	3d 28 18 00 00	 cmp	 eax, 6184		; 00001828H
  01dbd	0f 8e 64 01 00
	00		 jle	 $LN72@JewelMain
$LN70@JewelMain:
  01dc3	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01dc6	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01dcc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01dcf	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01dd5	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01dda	3d 29 18 00 00	 cmp	 eax, 6185		; 00001829H
  01ddf	0f 84 42 01 00
	00		 je	 $LN72@JewelMain
  01de5	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01de8	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01dee	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01df1	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01df7	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01dfc	3d 2a 18 00 00	 cmp	 eax, 6186		; 0000182aH
  01e01	0f 84 20 01 00
	00		 je	 $LN72@JewelMain
  01e07	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01e0a	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01e10	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e13	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01e19	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01e1e	3d 2b 18 00 00	 cmp	 eax, 6187		; 0000182bH
  01e23	0f 84 fe 00 00
	00		 je	 $LN72@JewelMain
  01e29	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01e2c	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01e32	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e35	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01e3b	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01e40	3d 31 18 00 00	 cmp	 eax, 6193		; 00001831H
  01e45	0f 84 dc 00 00
	00		 je	 $LN72@JewelMain
  01e4b	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01e4e	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01e54	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e57	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01e5d	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01e62	3d 32 18 00 00	 cmp	 eax, 6194		; 00001832H
  01e67	0f 84 ba 00 00
	00		 je	 $LN72@JewelMain
  01e6d	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01e70	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01e76	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e79	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01e7f	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01e84	3d b4 18 00 00	 cmp	 eax, 6324		; 000018b4H
  01e89	7d 0c		 jge	 SHORT $LN132@JewelMain
  01e8b	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv686[ebp], 0
  01e95	eb 28		 jmp	 SHORT $LN133@JewelMain
$LN132@JewelMain:
  01e97	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  01e9a	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01ea0	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01ea3	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  01ea9	0f bf 4c 08 06	 movsx	 ecx, WORD PTR [eax+ecx+6]
  01eae	33 d2		 xor	 edx, edx
  01eb0	81 f9 c2 18 00
	00		 cmp	 ecx, 6338		; 000018c2H
  01eb6	0f 9e c2	 setle	 dl
  01eb9	89 95 68 ff ff
	ff		 mov	 DWORD PTR tv686[ebp], edx
$LN133@JewelMain:
  01ebf	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR tv686[ebp], 0
  01ec6	75 5f		 jne	 SHORT $LN72@JewelMain
  01ec8	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01ecb	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01ed1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01ed4	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01eda	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01edf	3d c3 18 00 00	 cmp	 eax, 6339		; 000018c3H
  01ee4	7d 0c		 jge	 SHORT $LN134@JewelMain
  01ee6	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv701[ebp], 0
  01ef0	eb 28		 jmp	 SHORT $LN135@JewelMain
$LN134@JewelMain:
  01ef2	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  01ef5	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01efb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01efe	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  01f04	0f bf 4c 08 06	 movsx	 ecx, WORD PTR [eax+ecx+6]
  01f09	33 d2		 xor	 edx, edx
  01f0b	81 f9 dc 18 00
	00		 cmp	 ecx, 6364		; 000018dcH
  01f11	0f 9e c2	 setle	 dl
  01f14	89 95 68 ff ff
	ff		 mov	 DWORD PTR tv701[ebp], edx
$LN135@JewelMain:
  01f1a	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR tv701[ebp], 0
  01f21	0f 84 f4 00 00
	00		 je	 $LN73@JewelMain
$LN72@JewelMain:

; 688  : 			{
; 689  : 				if(TargetLevel >= this->JewelOfLevelMin)

  01f27	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01f2a	8b 4d ec	 mov	 ecx, DWORD PTR _TargetLevel$[ebp]
  01f2d	3b 48 60	 cmp	 ecx, DWORD PTR [eax+96]
  01f30	0f 8c c1 00 00
	00		 jl	 $LN69@JewelMain

; 690  : 				{
; 691  : 					if(TargetLevel < this->JewelOfLevelMax)

  01f36	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01f39	8b 4d ec	 mov	 ecx, DWORD PTR _TargetLevel$[ebp]
  01f3c	3b 48 5c	 cmp	 ecx, DWORD PTR [eax+92]
  01f3f	0f 8d 8e 00 00
	00		 jge	 $LN68@JewelMain

; 692  : 					{
; 693  : 						lpObj->pInventory[target].m_Level++;

  01f45	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01f48	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01f4e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01f51	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01f57	66 8b 44 02 08	 mov	 ax, WORD PTR [edx+eax+8]
  01f5c	66 83 c0 01	 add	 ax, 1
  01f60	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  01f63	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01f69	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01f6c	8b 92 24 0e 00
	00		 mov	 edx, DWORD PTR [edx+3620]
  01f72	66 89 44 0a 08	 mov	 WORD PTR [edx+ecx+8], ax

; 694  : 						gObjInventoryItemSet(lpObj->m_Index, source, -1);

  01f77	68 ff 00 00 00	 push	 255			; 000000ffH
  01f7c	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  01f7f	50		 push	 eax
  01f80	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01f83	8b 11		 mov	 edx, DWORD PTR [ecx]
  01f85	52		 push	 edx
  01f86	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  01f8b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 695  : 						lpObj->pInventory[source].Clear();

  01f8e	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  01f91	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01f97	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01f9a	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  01fa0	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 696  : 						GCInventoryItemOneSend(lpObj->m_Index, target);

  01fa5	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  01fa8	50		 push	 eax
  01fa9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01fac	8b 11		 mov	 edx, DWORD PTR [ecx]
  01fae	52		 push	 edx
  01faf	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  01fb4	83 c4 08	 add	 esp, 8

; 697  : 						GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  01fb7	6a 01		 push	 1
  01fb9	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  01fbd	50		 push	 eax
  01fbe	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01fc1	8b 11		 mov	 edx, DWORD PTR [ecx]
  01fc3	52		 push	 edx
  01fc4	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  01fc9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 698  : 						return;

  01fcc	e9 80 0f 00 00	 jmp	 $LN126@JewelMain

; 699  : 					}
; 700  : 					else

  01fd1	eb 22		 jmp	 SHORT $LN67@JewelMain
$LN68@JewelMain:

; 701  : 					{
; 702  : 						MsgOutput(lpObj->m_Index,g_ExText.GetText(28),this->JewelOfLevelMax);

  01fd3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01fd6	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  01fd9	51		 push	 ecx
  01fda	6a 1c		 push	 28			; 0000001cH
  01fdc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  01fe1	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  01fe6	50		 push	 eax
  01fe7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01fea	8b 02		 mov	 eax, DWORD PTR [edx]
  01fec	50		 push	 eax
  01fed	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  01ff2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN67@JewelMain:

; 703  : 					}
; 704  : 				}
; 705  : 				else

  01ff5	eb 22		 jmp	 SHORT $LN66@JewelMain
$LN69@JewelMain:

; 706  : 				{
; 707  : 					MsgOutput(lpObj->m_Index,g_ExText.GetText(29),this->JewelOfLevelMin);

  01ff7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01ffa	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01ffd	51		 push	 ecx
  01ffe	6a 1d		 push	 29			; 0000001dH
  02000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  02005	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0200a	50		 push	 eax
  0200b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0200e	8b 02		 mov	 eax, DWORD PTR [edx]
  02010	50		 push	 eax
  02011	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02016	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN66@JewelMain:

; 708  : 				}
; 709  : 			}
; 710  : 			else

  02019	eb 1b		 jmp	 SHORT $LN65@JewelMain
$LN73@JewelMain:

; 711  : 			{
; 712  : 				MsgOutput(lpObj->m_Index,g_ExText.GetText(30));

  0201b	6a 1e		 push	 30			; 0000001eH
  0201d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  02022	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  02027	50		 push	 eax
  02028	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0202b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0202d	51		 push	 ecx
  0202e	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02033	83 c4 08	 add	 esp, 8
$LN65@JewelMain:

; 713  : 			}
; 714  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  02036	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02039	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  0203f	51		 push	 ecx
  02040	6a 01		 push	 1
  02042	68 fd 00 00 00	 push	 253			; 000000fdH
  02047	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0204a	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  02050	e8 00 00 00 00	 call	 __ftol2_sse
  02055	50		 push	 eax
  02056	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0205b	51		 push	 ecx
  0205c	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  02061	83 c4 14	 add	 esp, 20			; 00000014H

; 715  : 		}
; 716  : 		else

  02064	eb 43		 jmp	 SHORT $LN64@JewelMain
$LN74@JewelMain:

; 717  : 		{
; 718  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  02066	68 ff 00 00 00	 push	 255			; 000000ffH
  0206b	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  0206e	50		 push	 eax
  0206f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02072	8b 11		 mov	 edx, DWORD PTR [ecx]
  02074	52		 push	 edx
  02075	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  0207a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 719  : 			lpObj->pInventory[source].Clear();

  0207d	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  02080	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02086	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02089	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  0208f	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 720  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  02094	6a 01		 push	 1
  02096	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  0209a	50		 push	 eax
  0209b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0209e	8b 11		 mov	 edx, DWORD PTR [ecx]
  020a0	52		 push	 edx
  020a1	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  020a6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN64@JewelMain:

; 721  : 		}

  020a9	e9 5c 0b 00 00	 jmp	 $LN12@JewelMain
$LN75@JewelMain:

; 722  : 	}		
; 723  : //*************************************
; 724  : //	Jewel Of Evalution
; 725  : //*************************************
; 726  : 	else if( JewelIndex == ITEMGET(this->JewelOfEvalutionType,this->JewelOfEvalutionIndex) )

  020ae	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  020b1	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  020b4	c1 e1 09	 shl	 ecx, 9
  020b7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  020ba	03 4a 6c	 add	 ecx, DWORD PTR [edx+108]
  020bd	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  020c0	0f 85 ee 01 00
	00		 jne	 $LN62@JewelMain

; 727  : 	{
; 728  : 		if( this->JewelOfEvalutionRate > iRate )

  020c6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  020c9	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  020cc	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  020cf	0f 8e 97 01 00
	00		 jle	 $LN61@JewelMain

; 729  : 		{
; 730  : 			if(lpObj->pInventory[target].m_Type < ITEMGET(12,0) || this->IsAccessory(lpObj->pInventory[target].m_Type) == true)

  020d5	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  020d8	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  020de	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  020e1	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  020e7	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  020ec	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  020f1	7c 2c		 jl	 SHORT $LN59@JewelMain
  020f3	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  020f6	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  020fc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  020ff	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02105	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  0210a	50		 push	 eax
  0210b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0210e	e8 00 00 00 00	 call	 ?IsAccessory@cNewJewels@@QAE_NH@Z ; cNewJewels::IsAccessory
  02113	0f b6 c8	 movzx	 ecx, al
  02116	83 f9 01	 cmp	 ecx, 1
  02119	0f 85 02 01 00
	00		 jne	 $LN60@JewelMain
$LN59@JewelMain:

; 731  : 			{
; 732  : 				if(lpObj->pInventory[target].m_NewOption == 0)

  0211f	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02122	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02128	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0212b	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02131	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  02139	85 c0		 test	 eax, eax
  0213b	0f 85 c3 00 00
	00		 jne	 $LN58@JewelMain

; 733  : 				{
; 734  : 						int ExcellentOpt[6] = { 1, 2, 4, 8, 16, 32 };

  02141	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221725[ebp], 1
  02148	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221725[ebp+4], 2
  0214f	c7 45 d4 04 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221725[ebp+8], 4
  02156	c7 45 d8 08 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221725[ebp+12], 8
  0215d	c7 45 dc 10 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221725[ebp+16], 16 ; 00000010H
  02164	c7 45 e0 20 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221725[ebp+20], 32 ; 00000020H

; 735  : 						srand(time(NULL));

  0216b	6a 00		 push	 0
  0216d	e8 00 00 00 00	 call	 _time
  02172	83 c4 04	 add	 esp, 4
  02175	50		 push	 eax
  02176	e8 00 00 00 00	 call	 _srand
  0217b	83 c4 04	 add	 esp, 4

; 736  : 						lpObj->pInventory[target].m_NewOption = ExcellentOpt[rand()%6];

  0217e	e8 00 00 00 00	 call	 _rand
  02183	99		 cdq
  02184	b9 06 00 00 00	 mov	 ecx, 6
  02189	f7 f9		 idiv	 ecx
  0218b	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0218e	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02194	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02197	8b 89 24 0e 00
	00		 mov	 ecx, DWORD PTR [ecx+3620]
  0219d	8a 54 95 cc	 mov	 dl, BYTE PTR _ExcellentOpt$221725[ebp+edx*4]
  021a1	88 94 01 97 00
	00 00		 mov	 BYTE PTR [ecx+eax+151], dl

; 737  : 						gObjInventoryItemSet(lpObj->m_Index, source, -1);

  021a8	68 ff 00 00 00	 push	 255			; 000000ffH
  021ad	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  021b0	50		 push	 eax
  021b1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  021b4	8b 11		 mov	 edx, DWORD PTR [ecx]
  021b6	52		 push	 edx
  021b7	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  021bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 738  : 						lpObj->pInventory[source].Clear();

  021bf	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  021c2	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  021c8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  021cb	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  021d1	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 739  : 						GCInventoryItemOneSend(lpObj->m_Index, target);

  021d6	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  021d9	50		 push	 eax
  021da	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  021dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  021df	52		 push	 edx
  021e0	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  021e5	83 c4 08	 add	 esp, 8

; 740  : 						GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  021e8	6a 01		 push	 1
  021ea	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  021ee	50		 push	 eax
  021ef	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  021f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  021f4	52		 push	 edx
  021f5	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  021fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 741  : 						return;

  021fd	e9 4f 0d 00 00	 jmp	 $LN126@JewelMain

; 742  : 				}
; 743  : 				else

  02202	eb 1b		 jmp	 SHORT $LN57@JewelMain
$LN58@JewelMain:

; 744  : 				{
; 745  : 					MsgOutput(lpObj->m_Index,g_ExText.GetText(31));

  02204	6a 1f		 push	 31			; 0000001fH
  02206	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0220b	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  02210	50		 push	 eax
  02211	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02214	8b 08		 mov	 ecx, DWORD PTR [eax]
  02216	51		 push	 ecx
  02217	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0221c	83 c4 08	 add	 esp, 8
$LN57@JewelMain:

; 746  : 				}
; 747  : 			}
; 748  : 			else

  0221f	eb 1b		 jmp	 SHORT $LN56@JewelMain
$LN60@JewelMain:

; 749  : 			{
; 750  : 				MsgOutput(lpObj->m_Index,g_ExText.GetText(32));

  02221	6a 20		 push	 32			; 00000020H
  02223	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  02228	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0222d	50		 push	 eax
  0222e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02231	8b 08		 mov	 ecx, DWORD PTR [eax]
  02233	51		 push	 ecx
  02234	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02239	83 c4 08	 add	 esp, 8
$LN56@JewelMain:

; 751  : 			}
; 752  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  0223c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0223f	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  02245	51		 push	 ecx
  02246	6a 01		 push	 1
  02248	68 fd 00 00 00	 push	 253			; 000000fdH
  0224d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02250	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  02256	e8 00 00 00 00	 call	 __ftol2_sse
  0225b	50		 push	 eax
  0225c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0225f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02261	51		 push	 ecx
  02262	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  02267	83 c4 14	 add	 esp, 20			; 00000014H

; 753  : 		}
; 754  : 		else

  0226a	eb 43		 jmp	 SHORT $LN55@JewelMain
$LN61@JewelMain:

; 755  : 		{
; 756  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  0226c	68 ff 00 00 00	 push	 255			; 000000ffH
  02271	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  02274	50		 push	 eax
  02275	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02278	8b 11		 mov	 edx, DWORD PTR [ecx]
  0227a	52		 push	 edx
  0227b	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  02280	83 c4 0c	 add	 esp, 12			; 0000000cH

; 757  : 			lpObj->pInventory[source].Clear();

  02283	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  02286	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0228c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0228f	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  02295	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 758  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  0229a	6a 01		 push	 1
  0229c	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  022a0	50		 push	 eax
  022a1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  022a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  022a6	52		 push	 edx
  022a7	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  022ac	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN55@JewelMain:

; 759  : 		}

  022af	e9 56 09 00 00	 jmp	 $LN12@JewelMain
$LN62@JewelMain:

; 760  : 	}
; 761  : //*************************************
; 762  : //	Jewel Of Ancent
; 763  : //*************************************
; 764  : 	else if( JewelIndex == ITEMGET(this->JewelOfAncentType,this->JewelOfAncentIndex) )

  022b4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  022b7	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  022ba	c1 e1 09	 shl	 ecx, 9
  022bd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  022c0	03 4a 7c	 add	 ecx, DWORD PTR [edx+124]
  022c3	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  022c6	0f 85 7d 01 00
	00		 jne	 $LN53@JewelMain

; 765  : 	{
; 766  : 		if( this->JewelOfAncentRate > iRate )

  022cc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  022cf	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  022d5	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  022d8	0f 8e 23 01 00
	00		 jle	 $LN52@JewelMain

; 767  : 		{
; 768  : 			if(lpObj->pInventory[target].m_SetOption == 0)

  022de	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  022e1	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  022e7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  022ea	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  022f0	0f b6 84 02 ae
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+174]
  022f8	85 c0		 test	 eax, eax
  022fa	0f 85 b6 00 00
	00		 jne	 $LN51@JewelMain

; 769  : 			{
; 770  : 				if(gSetItemOption.IsSetItem(TargetIndex) != FALSE)

  02300	8b 45 f0	 mov	 eax, DWORD PTR _TargetIndex$[ebp]
  02303	50		 push	 eax
  02304	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  02309	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem
  0230e	85 c0		 test	 eax, eax
  02310	0f 84 83 00 00
	00		 je	 $LN50@JewelMain

; 771  : 				{
; 772  : 					lpObj->pInventory[target].m_SetOption = gSetItemOption.ExGenSetOption(TargetIndex);

  02316	8b 45 f0	 mov	 eax, DWORD PTR _TargetIndex$[ebp]
  02319	50		 push	 eax
  0231a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  0231f	e8 00 00 00 00	 call	 ?ExGenSetOption@CSetItemOption@@QAEHH@Z ; CSetItemOption::ExGenSetOption
  02324	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  02327	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0232d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02330	8b 92 24 0e 00
	00		 mov	 edx, DWORD PTR [edx+3620]
  02336	88 84 0a ae 00
	00 00		 mov	 BYTE PTR [edx+ecx+174], al

; 773  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);

  0233d	68 ff 00 00 00	 push	 255			; 000000ffH
  02342	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  02345	50		 push	 eax
  02346	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02349	8b 11		 mov	 edx, DWORD PTR [ecx]
  0234b	52		 push	 edx
  0234c	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  02351	83 c4 0c	 add	 esp, 12			; 0000000cH

; 774  : 					lpObj->pInventory[source].Clear();

  02354	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  02357	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0235d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02360	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  02366	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 775  : 					GCInventoryItemOneSend(lpObj->m_Index, target);

  0236b	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0236e	50		 push	 eax
  0236f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02372	8b 11		 mov	 edx, DWORD PTR [ecx]
  02374	52		 push	 edx
  02375	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  0237a	83 c4 08	 add	 esp, 8

; 776  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  0237d	6a 01		 push	 1
  0237f	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  02383	50		 push	 eax
  02384	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02387	8b 11		 mov	 edx, DWORD PTR [ecx]
  02389	52		 push	 edx
  0238a	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  0238f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 777  : 					return;

  02392	e9 ba 0b 00 00	 jmp	 $LN126@JewelMain

; 778  : 				}
; 779  : 				else

  02397	eb 1b		 jmp	 SHORT $LN49@JewelMain
$LN50@JewelMain:

; 780  : 				{
; 781  : 					MsgOutput(lpObj->m_Index,g_ExText.GetText(33));

  02399	6a 21		 push	 33			; 00000021H
  0239b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  023a0	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  023a5	50		 push	 eax
  023a6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  023a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  023ab	51		 push	 ecx
  023ac	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  023b1	83 c4 08	 add	 esp, 8
$LN49@JewelMain:

; 782  : 				}
; 783  : 			}
; 784  : 			else

  023b4	eb 1b		 jmp	 SHORT $LN48@JewelMain
$LN51@JewelMain:

; 785  : 			{
; 786  : 				MsgOutput(lpObj->m_Index,g_ExText.GetText(34));

  023b6	6a 22		 push	 34			; 00000022H
  023b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  023bd	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  023c2	50		 push	 eax
  023c3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  023c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  023c8	51		 push	 ecx
  023c9	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  023ce	83 c4 08	 add	 esp, 8
$LN48@JewelMain:

; 787  : 			}
; 788  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  023d1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  023d4	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  023da	51		 push	 ecx
  023db	6a 01		 push	 1
  023dd	68 fd 00 00 00	 push	 253			; 000000fdH
  023e2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  023e5	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  023eb	e8 00 00 00 00	 call	 __ftol2_sse
  023f0	50		 push	 eax
  023f1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  023f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  023f6	51		 push	 ecx
  023f7	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  023fc	83 c4 14	 add	 esp, 20			; 00000014H

; 789  : 		}
; 790  : 		else

  023ff	eb 43		 jmp	 SHORT $LN47@JewelMain
$LN52@JewelMain:

; 791  : 		{
; 792  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  02401	68 ff 00 00 00	 push	 255			; 000000ffH
  02406	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  02409	50		 push	 eax
  0240a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0240d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0240f	52		 push	 edx
  02410	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  02415	83 c4 0c	 add	 esp, 12			; 0000000cH

; 793  : 			lpObj->pInventory[source].Clear();

  02418	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  0241b	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02421	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02424	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  0242a	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 794  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  0242f	6a 01		 push	 1
  02431	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  02435	50		 push	 eax
  02436	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02439	8b 11		 mov	 edx, DWORD PTR [ecx]
  0243b	52		 push	 edx
  0243c	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  02441	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@JewelMain:

; 795  : 		}

  02444	e9 c1 07 00 00	 jmp	 $LN12@JewelMain
$LN53@JewelMain:

; 796  : 	}
; 797  : //*************************************
; 798  : //	Jewel Of Option
; 799  : //*************************************
; 800  : 	else if( JewelIndex == ITEMGET(this->JewelOfOptionType,this->JewelOfOptionIndex) ) //JewelOfOption

  02449	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0244c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  02452	c1 e1 09	 shl	 ecx, 9
  02455	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02458	03 8a 8c 00 00
	00		 add	 ecx, DWORD PTR [edx+140]
  0245e	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  02461	0f 85 7f 03 00
	00		 jne	 $LN45@JewelMain

; 801  : 	{
; 802  : 		if( this->JewelOfOptionRate > iRate )

  02467	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0246a	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  02470	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  02473	0f 8e 25 03 00
	00		 jle	 $LN44@JewelMain

; 803  : 		{
; 804  : 			if(lpObj->pInventory[target].m_Type < ITEMGET(12,0)
; 805  : #ifdef NEW_JEWEL_FROM_WINGS
; 806  : 				|| (lpObj->pInventory[target].m_Type >= ITEMGET(12,0) && lpObj->pInventory[target].m_Type <= ITEMGET(12,6)) || lpObj->pInventory[target].m_Type <= ITEMGET(13,30) || 
; 807  : 				 (lpObj->pInventory[target].m_Type >= ITEMGET(12,36) && lpObj->pInventory[target].m_Type <= ITEMGET(12,40)) || //Season 2.5 Third Wing add-on
; 808  : 				 lpObj->pInventory[target].m_Type == ITEMGET(12,41) || lpObj->pInventory[target].m_Type == ITEMGET(12,42) || lpObj->pInventory[target].m_Type == ITEMGET(12,43)
; 809  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 49)
; 810  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 50)
; 811  : 				|| IS_NEWWINGS(lpObj->pInventory[target].m_Type)
; 812  : 				|| IS_NEWWINGS_6(lpObj->pInventory[target].m_Type)
; 813  : #endif // NEW_JEWEL_FROM_WINGS
; 814  : 				)

  02479	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0247c	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02482	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02485	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0248b	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  02490	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  02495	0f 8c 06 02 00
	00		 jl	 $LN42@JewelMain
  0249b	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0249e	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  024a4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  024a7	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  024ad	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  024b2	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  024b7	7c 22		 jl	 SHORT $LN41@JewelMain
  024b9	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  024bc	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  024c2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  024c5	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  024cb	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  024d0	3d 06 18 00 00	 cmp	 eax, 6150		; 00001806H
  024d5	0f 8e c6 01 00
	00		 jle	 $LN42@JewelMain
$LN41@JewelMain:
  024db	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  024de	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  024e4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  024e7	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  024ed	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  024f2	3d 1e 1a 00 00	 cmp	 eax, 6686		; 00001a1eH
  024f7	0f 8e a4 01 00
	00		 jle	 $LN42@JewelMain
  024fd	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02500	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02506	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02509	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0250f	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  02514	3d 24 18 00 00	 cmp	 eax, 6180		; 00001824H
  02519	7c 22		 jl	 SHORT $LN40@JewelMain
  0251b	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0251e	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02524	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02527	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0252d	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  02532	3d 28 18 00 00	 cmp	 eax, 6184		; 00001828H
  02537	0f 8e 64 01 00
	00		 jle	 $LN42@JewelMain
$LN40@JewelMain:
  0253d	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02540	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02546	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02549	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0254f	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  02554	3d 29 18 00 00	 cmp	 eax, 6185		; 00001829H
  02559	0f 84 42 01 00
	00		 je	 $LN42@JewelMain
  0255f	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02562	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02568	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0256b	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02571	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  02576	3d 2a 18 00 00	 cmp	 eax, 6186		; 0000182aH
  0257b	0f 84 20 01 00
	00		 je	 $LN42@JewelMain
  02581	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02584	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0258a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0258d	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02593	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  02598	3d 2b 18 00 00	 cmp	 eax, 6187		; 0000182bH
  0259d	0f 84 fe 00 00
	00		 je	 $LN42@JewelMain
  025a3	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  025a6	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  025ac	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  025af	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  025b5	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  025ba	3d 31 18 00 00	 cmp	 eax, 6193		; 00001831H
  025bf	0f 84 dc 00 00
	00		 je	 $LN42@JewelMain
  025c5	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  025c8	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  025ce	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  025d1	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  025d7	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  025dc	3d 32 18 00 00	 cmp	 eax, 6194		; 00001832H
  025e1	0f 84 ba 00 00
	00		 je	 $LN42@JewelMain
  025e7	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  025ea	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  025f0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  025f3	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  025f9	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  025fe	3d b4 18 00 00	 cmp	 eax, 6324		; 000018b4H
  02603	7d 0c		 jge	 SHORT $LN136@JewelMain
  02605	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1001[ebp], 0
  0260f	eb 28		 jmp	 SHORT $LN137@JewelMain
$LN136@JewelMain:
  02611	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  02614	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0261a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0261d	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  02623	0f bf 4c 08 06	 movsx	 ecx, WORD PTR [eax+ecx+6]
  02628	33 d2		 xor	 edx, edx
  0262a	81 f9 c2 18 00
	00		 cmp	 ecx, 6338		; 000018c2H
  02630	0f 9e c2	 setle	 dl
  02633	89 95 68 ff ff
	ff		 mov	 DWORD PTR tv1001[ebp], edx
$LN137@JewelMain:
  02639	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR tv1001[ebp], 0
  02640	75 5f		 jne	 SHORT $LN42@JewelMain
  02642	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02645	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0264b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0264e	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02654	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  02659	3d c3 18 00 00	 cmp	 eax, 6339		; 000018c3H
  0265e	7d 0c		 jge	 SHORT $LN138@JewelMain
  02660	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1016[ebp], 0
  0266a	eb 28		 jmp	 SHORT $LN139@JewelMain
$LN138@JewelMain:
  0266c	8b 4d 10	 mov	 ecx, DWORD PTR _target$[ebp]
  0266f	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02675	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02678	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  0267e	0f bf 4c 08 06	 movsx	 ecx, WORD PTR [eax+ecx+6]
  02683	33 d2		 xor	 edx, edx
  02685	81 f9 dc 18 00
	00		 cmp	 ecx, 6364		; 000018dcH
  0268b	0f 9e c2	 setle	 dl
  0268e	89 95 68 ff ff
	ff		 mov	 DWORD PTR tv1016[ebp], edx
$LN139@JewelMain:
  02694	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR tv1016[ebp], 0
  0269b	0f 84 b2 00 00
	00		 je	 $LN43@JewelMain
$LN42@JewelMain:

; 815  : 			{
; 816  : 				if(lpObj->pInventory[target].m_Option3 != 7)

  026a1	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  026a4	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  026aa	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  026ad	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  026b3	0f b6 84 02 96
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+150]
  026bb	83 f8 07	 cmp	 eax, 7
  026be	74 76		 je	 SHORT $LN39@JewelMain

; 817  : 				{
; 818  : 					lpObj->pInventory[target].m_Option3 = 7;

  026c0	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  026c3	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  026c9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  026cc	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  026d2	c6 84 02 96 00
	00 00 07	 mov	 BYTE PTR [edx+eax+150], 7

; 819  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);

  026da	68 ff 00 00 00	 push	 255			; 000000ffH
  026df	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  026e2	50		 push	 eax
  026e3	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  026e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  026e8	52		 push	 edx
  026e9	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  026ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 820  : 					lpObj->pInventory[source].Clear();

  026f1	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  026f4	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  026fa	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  026fd	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  02703	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 821  : 					GCInventoryItemOneSend(lpObj->m_Index, target);

  02708	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0270b	50		 push	 eax
  0270c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0270f	8b 11		 mov	 edx, DWORD PTR [ecx]
  02711	52		 push	 edx
  02712	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  02717	83 c4 08	 add	 esp, 8

; 822  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  0271a	6a 01		 push	 1
  0271c	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  02720	50		 push	 eax
  02721	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02724	8b 11		 mov	 edx, DWORD PTR [ecx]
  02726	52		 push	 edx
  02727	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  0272c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 823  : 					return;

  0272f	e9 1d 08 00 00	 jmp	 $LN126@JewelMain

; 824  : 				}
; 825  : 				else

  02734	eb 1b		 jmp	 SHORT $LN38@JewelMain
$LN39@JewelMain:

; 826  : 				{
; 827  : 					MsgOutput(lpObj->m_Index,g_ExText.GetText(35));

  02736	6a 23		 push	 35			; 00000023H
  02738	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0273d	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  02742	50		 push	 eax
  02743	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02746	8b 08		 mov	 ecx, DWORD PTR [eax]
  02748	51		 push	 ecx
  02749	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0274e	83 c4 08	 add	 esp, 8
$LN38@JewelMain:

; 828  : 				}
; 829  : 			}
; 830  : 			else

  02751	eb 1b		 jmp	 SHORT $LN37@JewelMain
$LN43@JewelMain:

; 831  : 			{
; 832  : 				MsgOutput(lpObj->m_Index,g_ExText.GetText(32));

  02753	6a 20		 push	 32			; 00000020H
  02755	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0275a	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  0275f	50		 push	 eax
  02760	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02763	8b 08		 mov	 ecx, DWORD PTR [eax]
  02765	51		 push	 ecx
  02766	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0276b	83 c4 08	 add	 esp, 8
$LN37@JewelMain:

; 833  : 			}
; 834  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  0276e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02771	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  02777	51		 push	 ecx
  02778	6a 01		 push	 1
  0277a	68 fd 00 00 00	 push	 253			; 000000fdH
  0277f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02782	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  02788	e8 00 00 00 00	 call	 __ftol2_sse
  0278d	50		 push	 eax
  0278e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02791	8b 08		 mov	 ecx, DWORD PTR [eax]
  02793	51		 push	 ecx
  02794	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  02799	83 c4 14	 add	 esp, 20			; 00000014H

; 835  : 		}
; 836  : 		else

  0279c	eb 43		 jmp	 SHORT $LN36@JewelMain
$LN44@JewelMain:

; 837  : 		{
; 838  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  0279e	68 ff 00 00 00	 push	 255			; 000000ffH
  027a3	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  027a6	50		 push	 eax
  027a7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  027aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  027ac	52		 push	 edx
  027ad	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  027b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 839  : 			lpObj->pInventory[source].Clear();

  027b5	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  027b8	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  027be	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  027c1	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  027c7	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 840  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  027cc	6a 01		 push	 1
  027ce	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  027d2	50		 push	 eax
  027d3	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  027d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  027d8	52		 push	 edx
  027d9	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  027de	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN36@JewelMain:

; 841  : 		}

  027e1	e9 24 04 00 00	 jmp	 $LN12@JewelMain
$LN45@JewelMain:

; 842  : 	}	
; 843  : //*************************************
; 844  : //	Jewel Of PVP
; 845  : //*************************************
; 846  : 	else if( JewelIndex == ITEMGET(this->JewelOfPVPType,this->JewelOfPVPIndex) || JewelIndex == ITEMGET(this->JewelOfOptionType,189))

  027e6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  027e9	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  027ef	c1 e1 09	 shl	 ecx, 9
  027f2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  027f5	03 8a 9c 00 00
	00		 add	 ecx, DWORD PTR [edx+156]
  027fb	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  027fe	74 1b		 je	 SHORT $LN33@JewelMain
  02800	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02803	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  02809	c1 e1 09	 shl	 ecx, 9
  0280c	81 c1 bd 00 00
	00		 add	 ecx, 189		; 000000bdH
  02812	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  02815	0f 85 90 01 00
	00		 jne	 $LN34@JewelMain
$LN33@JewelMain:

; 847  : 	{
; 848  : 		if( this->JewelOfPVPRate > iRate )

  0281b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0281e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02824	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  02827	0f 8e 36 01 00
	00		 jle	 $LN32@JewelMain

; 849  : 		{
; 850  : 			if( g_kItemSystemFor380.m_bSystemFor380ItemOption == TRUE &&
; 851  : 				g_kItemSystemFor380.Is380OptionItem(&lpObj->pInventory[target]) == FALSE)

  0282d	83 3d 04 00 02
	00 01		 cmp	 DWORD PTR ?g_kItemSystemFor380@@3VCItemSystemFor380@@A+131076, 1
  02834	0f 85 de 00 00
	00		 jne	 $LN31@JewelMain
  0283a	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  0283d	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02843	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02846	03 81 24 0e 00
	00		 add	 eax, DWORD PTR [ecx+3620]
  0284c	50		 push	 eax
  0284d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  02852	e8 00 00 00 00	 call	 ?Is380OptionItem@CItemSystemFor380@@QAEHPBVCItem@@@Z ; CItemSystemFor380::Is380OptionItem
  02857	85 c0		 test	 eax, eax
  02859	0f 85 b9 00 00
	00		 jne	 $LN31@JewelMain

; 852  : 			{
; 853  : 				if(g_kItemSystemFor380.Is380Item(&lpObj->pInventory[target]) != FALSE)

  0285f	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02862	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02868	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0286b	03 81 24 0e 00
	00		 add	 eax, DWORD PTR [ecx+3620]
  02871	50		 push	 eax
  02872	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  02877	e8 00 00 00 00	 call	 ?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z ; CItemSystemFor380::Is380Item
  0287c	85 c0		 test	 eax, eax
  0287e	74 7b		 je	 SHORT $LN30@JewelMain

; 854  : 				{
; 855  : 					g_kItemSystemFor380._SetOption(&lpObj->pInventory[target], TRUE);

  02880	6a 01		 push	 1
  02882	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02885	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0288b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0288e	03 81 24 0e 00
	00		 add	 eax, DWORD PTR [ecx+3620]
  02894	50		 push	 eax
  02895	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  0289a	e8 00 00 00 00	 call	 ?_SetOption@CItemSystemFor380@@QAEHPAVCItem@@H@Z ; CItemSystemFor380::_SetOption

; 856  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);

  0289f	68 ff 00 00 00	 push	 255			; 000000ffH
  028a4	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  028a7	50		 push	 eax
  028a8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  028ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  028ad	52		 push	 edx
  028ae	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  028b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 857  : 					lpObj->pInventory[source].Clear();

  028b6	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  028b9	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  028bf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  028c2	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  028c8	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 858  : 					GCInventoryItemOneSend(lpObj->m_Index, target);

  028cd	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  028d0	50		 push	 eax
  028d1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  028d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  028d6	52		 push	 edx
  028d7	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  028dc	83 c4 08	 add	 esp, 8

; 859  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  028df	6a 01		 push	 1
  028e1	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  028e5	50		 push	 eax
  028e6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  028e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  028eb	52		 push	 edx
  028ec	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  028f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 860  : 					return;

  028f4	e9 58 06 00 00	 jmp	 $LN126@JewelMain

; 861  : 				}
; 862  : 				else

  028f9	eb 1b		 jmp	 SHORT $LN29@JewelMain
$LN30@JewelMain:

; 863  : 				{
; 864  : 					MsgOutput(lpObj->m_Index,g_ExText.GetText(36));

  028fb	6a 24		 push	 36			; 00000024H
  028fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  02902	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  02907	50		 push	 eax
  02908	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0290b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0290d	51		 push	 ecx
  0290e	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02913	83 c4 08	 add	 esp, 8
$LN29@JewelMain:

; 865  : 				}
; 866  : 			}
; 867  : 			else

  02916	eb 1b		 jmp	 SHORT $LN28@JewelMain
$LN31@JewelMain:

; 868  : 			{
; 869  : 				MsgOutput(lpObj->m_Index,g_ExText.GetText(37));

  02918	6a 25		 push	 37			; 00000025H
  0291a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  0291f	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  02924	50		 push	 eax
  02925	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02928	8b 08		 mov	 ecx, DWORD PTR [eax]
  0292a	51		 push	 ecx
  0292b	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02930	83 c4 08	 add	 esp, 8
$LN28@JewelMain:

; 870  : 			}
; 871  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  02933	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02936	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  0293c	51		 push	 ecx
  0293d	6a 01		 push	 1
  0293f	68 fd 00 00 00	 push	 253			; 000000fdH
  02944	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02947	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  0294d	e8 00 00 00 00	 call	 __ftol2_sse
  02952	50		 push	 eax
  02953	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02956	8b 08		 mov	 ecx, DWORD PTR [eax]
  02958	51		 push	 ecx
  02959	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0295e	83 c4 14	 add	 esp, 20			; 00000014H

; 872  : 		}
; 873  : 		else

  02961	eb 43		 jmp	 SHORT $LN27@JewelMain
$LN32@JewelMain:

; 874  : 		{
; 875  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  02963	68 ff 00 00 00	 push	 255			; 000000ffH
  02968	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  0296b	50		 push	 eax
  0296c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0296f	8b 11		 mov	 edx, DWORD PTR [ecx]
  02971	52		 push	 edx
  02972	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  02977	83 c4 0c	 add	 esp, 12			; 0000000cH

; 876  : 			lpObj->pInventory[source].Clear();

  0297a	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  0297d	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02983	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02986	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  0298c	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 877  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  02991	6a 01		 push	 1
  02993	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  02997	50		 push	 eax
  02998	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0299b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0299d	52		 push	 edx
  0299e	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  029a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@JewelMain:

; 878  : 		}

  029a6	e9 5f 02 00 00	 jmp	 $LN12@JewelMain
$LN34@JewelMain:

; 879  : 	}
; 880  : //*************************************
; 881  : //	Jewel Of Socket
; 882  : //*************************************
; 883  : 	else if( JewelIndex == ITEMGET(this->JewelOfSocketType,this->JewelOfSocketIndex) )

  029ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  029ae	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  029b4	c1 e1 09	 shl	 ecx, 9
  029b7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  029ba	03 8a ac 00 00
	00		 add	 ecx, DWORD PTR [edx+172]
  029c0	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  029c3	0f 85 41 02 00
	00		 jne	 $LN12@JewelMain

; 884  : 	{
; 885  : 		if( this->JewelOfSocketRate > iRate )

  029c9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  029cc	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  029d2	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  029d5	0f 8e ec 01 00
	00		 jle	 $LN24@JewelMain

; 886  : 		{
; 887  : 			if( g_SocketOption.CheckItemType(lpObj->pInventory[target].m_Type) == true)

  029db	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  029de	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  029e4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  029e7	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  029ed	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  029f2	50		 push	 eax
  029f3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  029f8	e8 00 00 00 00	 call	 ?CheckItemType@CSocketOption@@QAEEH@Z ; CSocketOption::CheckItemType
  029fd	0f b6 c8	 movzx	 ecx, al
  02a00	83 f9 01	 cmp	 ecx, 1
  02a03	0f 85 73 01 00
	00		 jne	 $LN23@JewelMain

; 888  : 			{
; 889  : 				int iCount = 0;

  02a09	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _iCount$221761[ebp], 0

; 890  : 				for(int i = 0; i < 5; i++)

  02a10	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$221762[ebp], 0
  02a17	eb 09		 jmp	 SHORT $LN22@JewelMain
$LN21@JewelMain:
  02a19	8b 45 c4	 mov	 eax, DWORD PTR _i$221762[ebp]
  02a1c	83 c0 01	 add	 eax, 1
  02a1f	89 45 c4	 mov	 DWORD PTR _i$221762[ebp], eax
$LN22@JewelMain:
  02a22	83 7d c4 05	 cmp	 DWORD PTR _i$221762[ebp], 5
  02a26	7d 32		 jge	 SHORT $LN20@JewelMain

; 891  : 				{
; 892  : 					//0xFF - no option
; 893  : 					//0xFE - empty option
; 894  : 
; 895  : 					if(lpObj->pInventory[target].m_SocketOption[i] != 0xFF)

  02a28	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02a2b	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02a31	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a34	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02a3a	03 d0		 add	 edx, eax
  02a3c	8b 45 c4	 mov	 eax, DWORD PTR _i$221762[ebp]
  02a3f	0f b6 8c 02 cc
	00 00 00	 movzx	 ecx, BYTE PTR [edx+eax+204]
  02a47	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  02a4d	74 09		 je	 SHORT $LN19@JewelMain

; 896  : 					{
; 897  : 						iCount++;

  02a4f	8b 45 c8	 mov	 eax, DWORD PTR _iCount$221761[ebp]
  02a52	83 c0 01	 add	 eax, 1
  02a55	89 45 c8	 mov	 DWORD PTR _iCount$221761[ebp], eax
$LN19@JewelMain:

; 898  : 					}
; 899  : 				}

  02a58	eb bf		 jmp	 SHORT $LN21@JewelMain
$LN20@JewelMain:

; 900  : 
; 901  : 				if(iCount >= this->JewelOfSocketMaxOpt)

  02a5a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02a5d	8b 4d c8	 mov	 ecx, DWORD PTR _iCount$221761[ebp]
  02a60	3b 88 b8 00 00
	00		 cmp	 ecx, DWORD PTR [eax+184]
  02a66	7c 58		 jl	 SHORT $LN18@JewelMain

; 902  : 				{
; 903  : 					MsgOutput(lpObj->m_Index,g_ExText.GetText(38), this->JewelOfSocketMaxOpt);

  02a68	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02a6b	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  02a71	51		 push	 ecx
  02a72	6a 26		 push	 38			; 00000026H
  02a74	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  02a79	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  02a7e	50		 push	 eax
  02a7f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02a82	8b 02		 mov	 eax, DWORD PTR [edx]
  02a84	50		 push	 eax
  02a85	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02a8a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 904  : 					GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  02a8d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a90	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  02a96	51		 push	 ecx
  02a97	6a 01		 push	 1
  02a99	68 fd 00 00 00	 push	 253			; 000000fdH
  02a9e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02aa1	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  02aa7	e8 00 00 00 00	 call	 __ftol2_sse
  02aac	50		 push	 eax
  02aad	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ab0	8b 08		 mov	 ecx, DWORD PTR [eax]
  02ab2	51		 push	 ecx
  02ab3	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  02ab8	83 c4 14	 add	 esp, 20			; 00000014H

; 905  : 					return;

  02abb	e9 91 04 00 00	 jmp	 $LN126@JewelMain
$LN18@JewelMain:

; 906  : 				}
; 907  : 
; 908  : 				for(int i = 0; i < 5; i++)

  02ac0	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _i$221768[ebp], 0
  02ac7	eb 09		 jmp	 SHORT $LN17@JewelMain
$LN16@JewelMain:
  02ac9	8b 45 c0	 mov	 eax, DWORD PTR _i$221768[ebp]
  02acc	83 c0 01	 add	 eax, 1
  02acf	89 45 c0	 mov	 DWORD PTR _i$221768[ebp], eax
$LN17@JewelMain:
  02ad2	83 7d c0 05	 cmp	 DWORD PTR _i$221768[ebp], 5
  02ad6	7d 48		 jge	 SHORT $LN15@JewelMain

; 909  : 				{
; 910  : 					if(lpObj->pInventory[target].m_SocketOption[i] == 0xFF)

  02ad8	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02adb	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02ae1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02ae4	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02aea	03 d0		 add	 edx, eax
  02aec	8b 45 c0	 mov	 eax, DWORD PTR _i$221768[ebp]
  02aef	0f b6 8c 02 cc
	00 00 00	 movzx	 ecx, BYTE PTR [edx+eax+204]
  02af7	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  02afd	75 1f		 jne	 SHORT $LN14@JewelMain

; 911  : 					{
; 912  : 						lpObj->pInventory[target].m_SocketOption[i] = 0xFE;

  02aff	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02b02	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02b08	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02b0b	03 81 24 0e 00
	00		 add	 eax, DWORD PTR [ecx+3620]
  02b11	8b 55 c0	 mov	 edx, DWORD PTR _i$221768[ebp]
  02b14	c6 84 10 cc 00
	00 00 fe	 mov	 BYTE PTR [eax+edx+204], 254 ; 000000feH

; 913  : 						break;

  02b1c	eb 02		 jmp	 SHORT $LN15@JewelMain
$LN14@JewelMain:

; 914  : 					}
; 915  : 				}		

  02b1e	eb a9		 jmp	 SHORT $LN16@JewelMain
$LN15@JewelMain:

; 916  : 				
; 917  : 				gObjInventoryItemSet(lpObj->m_Index, source, -1);

  02b20	68 ff 00 00 00	 push	 255			; 000000ffH
  02b25	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  02b28	50		 push	 eax
  02b29	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02b2c	8b 11		 mov	 edx, DWORD PTR [ecx]
  02b2e	52		 push	 edx
  02b2f	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  02b34	83 c4 0c	 add	 esp, 12			; 0000000cH

; 918  : 				lpObj->pInventory[source].Clear();

  02b37	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  02b3a	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02b40	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02b43	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  02b49	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 919  : 				GCInventoryItemOneSend(lpObj->m_Index, target);

  02b4e	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02b51	50		 push	 eax
  02b52	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02b55	8b 11		 mov	 edx, DWORD PTR [ecx]
  02b57	52		 push	 edx
  02b58	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  02b5d	83 c4 08	 add	 esp, 8

; 920  : 				GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  02b60	6a 01		 push	 1
  02b62	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  02b66	50		 push	 eax
  02b67	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02b6a	8b 11		 mov	 edx, DWORD PTR [ecx]
  02b6c	52		 push	 edx
  02b6d	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  02b72	83 c4 0c	 add	 esp, 12			; 0000000cH

; 921  : 				return;

  02b75	e9 d7 03 00 00	 jmp	 $LN126@JewelMain

; 922  : 			}
; 923  : 			else

  02b7a	eb 1b		 jmp	 SHORT $LN13@JewelMain
$LN23@JewelMain:

; 924  : 			{
; 925  : 				MsgOutput(lpObj->m_Index,g_ExText.GetText(39));

  02b7c	6a 27		 push	 39			; 00000027H
  02b7e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  02b83	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  02b88	50		 push	 eax
  02b89	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02b8c	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b8e	51		 push	 ecx
  02b8f	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02b94	83 c4 08	 add	 esp, 8
$LN13@JewelMain:

; 926  : 			}
; 927  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  02b97	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02b9a	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  02ba0	51		 push	 ecx
  02ba1	6a 01		 push	 1
  02ba3	68 fd 00 00 00	 push	 253			; 000000fdH
  02ba8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02bab	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  02bb1	e8 00 00 00 00	 call	 __ftol2_sse
  02bb6	50		 push	 eax
  02bb7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02bba	8b 08		 mov	 ecx, DWORD PTR [eax]
  02bbc	51		 push	 ecx
  02bbd	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  02bc2	83 c4 14	 add	 esp, 20			; 00000014H

; 928  : 		}
; 929  : 		else

  02bc5	eb 43		 jmp	 SHORT $LN12@JewelMain
$LN24@JewelMain:

; 930  : 		{
; 931  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  02bc7	68 ff 00 00 00	 push	 255			; 000000ffH
  02bcc	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  02bcf	50		 push	 eax
  02bd0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02bd3	8b 11		 mov	 edx, DWORD PTR [ecx]
  02bd5	52		 push	 edx
  02bd6	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  02bdb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 932  : 			lpObj->pInventory[source].Clear();

  02bde	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  02be1	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02be7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02bea	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  02bf0	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 933  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  02bf5	6a 01		 push	 1
  02bf7	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  02bfb	50		 push	 eax
  02bfc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02bff	8b 11		 mov	 edx, DWORD PTR [ecx]
  02c01	52		 push	 edx
  02c02	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  02c07	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@JewelMain:

; 934  : 		}
; 935  : 	}
; 936  : //*************************************
; 937  : //	Jewel Of Wings Exellent
; 938  : //*************************************
; 939  : 	if(JewelIndex == ITEMGET(this->JewelOfWingType,this->JewelOfWingIndex))

  02c0a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02c0d	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  02c13	c1 e1 09	 shl	 ecx, 9
  02c16	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02c19	03 8a c0 00 00
	00		 add	 ecx, DWORD PTR [edx+192]
  02c1f	39 4d f4	 cmp	 DWORD PTR _JewelIndex$[ebp], ecx
  02c22	0f 85 29 03 00
	00		 jne	 $LN1@JewelMain

; 940  : 	{
; 941  : 		if(this->JewelOfWingRate > iRate)

  02c28	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02c2b	8b 88 c8 00 00
	00		 mov	 ecx, DWORD PTR [eax+200]
  02c31	3b 4d e8	 cmp	 ecx, DWORD PTR _iRate$[ebp]
  02c34	0f 8e d4 02 00
	00		 jle	 $LN10@JewelMain

; 942  : 		{
; 943  : 			if(this->IsWings(lpObj->pInventory[target].m_Type) == true)

  02c3a	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02c3d	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02c43	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02c46	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02c4c	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  02c51	50		 push	 eax
  02c52	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c55	e8 00 00 00 00	 call	 ?IsWings@cNewJewels@@QAE_NH@Z ; cNewJewels::IsWings
  02c5a	0f b6 c8	 movzx	 ecx, al
  02c5d	83 f9 01	 cmp	 ecx, 1
  02c60	0f 85 78 02 00
	00		 jne	 $LN2@JewelMain

; 944  : 			{
; 945  : 				if(lpObj->pInventory[target].m_NewOption == 0)

  02c66	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02c69	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02c6f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02c72	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02c78	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  02c80	85 c0		 test	 eax, eax
  02c82	0f 85 d6 00 00
	00		 jne	 $LN8@JewelMain

; 946  : 				{
; 947  : 						int ExcellentOpt[4] = { 1, 2, 4, 8 };

  02c88	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221779[ebp], 1
  02c8f	c7 45 b4 02 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221779[ebp+4], 2
  02c96	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221779[ebp+8], 4
  02c9d	c7 45 bc 08 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$221779[ebp+12], 8

; 948  : 						srand(time(NULL));

  02ca4	6a 00		 push	 0
  02ca6	e8 00 00 00 00	 call	 _time
  02cab	83 c4 04	 add	 esp, 4
  02cae	50		 push	 eax
  02caf	e8 00 00 00 00	 call	 _srand
  02cb4	83 c4 04	 add	 esp, 4

; 949  : 						
; 950  : 						//lpObj->pInventory[target].m_NewOption |= 32;
; 951  : 						//lpObj->pInventory[target].m_NewOption |= 16;
; 952  : 						lpObj->pInventory[target].m_NewOption |= ExcellentOpt[rand()%4];

  02cb7	8b 75 10	 mov	 esi, DWORD PTR _target$[ebp]
  02cba	69 f6 d4 00 00
	00		 imul	 esi, 212		; 000000d4H
  02cc0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02cc3	8b b8 24 0e 00
	00		 mov	 edi, DWORD PTR [eax+3620]
  02cc9	e8 00 00 00 00	 call	 _rand
  02cce	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  02cd3	79 05		 jns	 SHORT $LN140@JewelMain
  02cd5	48		 dec	 eax
  02cd6	83 c8 fc	 or	 eax, -4			; fffffffcH
  02cd9	40		 inc	 eax
$LN140@JewelMain:
  02cda	0f b6 8c 37 97
	00 00 00	 movzx	 ecx, BYTE PTR [edi+esi+151]
  02ce2	0b 4c 85 b0	 or	 ecx, DWORD PTR _ExcellentOpt$221779[ebp+eax*4]
  02ce6	8b 55 10	 mov	 edx, DWORD PTR _target$[ebp]
  02ce9	69 d2 d4 00 00
	00		 imul	 edx, 212		; 000000d4H
  02cef	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02cf2	8b 80 24 0e 00
	00		 mov	 eax, DWORD PTR [eax+3620]
  02cf8	88 8c 10 97 00
	00 00		 mov	 BYTE PTR [eax+edx+151], cl

; 953  : 
; 954  : 						
; 955  : 
; 956  : 						gObjInventoryItemSet(lpObj->m_Index, source, -1);

  02cff	68 ff 00 00 00	 push	 255			; 000000ffH
  02d04	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  02d07	50		 push	 eax
  02d08	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d0b	8b 11		 mov	 edx, DWORD PTR [ecx]
  02d0d	52		 push	 edx
  02d0e	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  02d13	83 c4 0c	 add	 esp, 12			; 0000000cH

; 957  : 						lpObj->pInventory[source].Clear();

  02d16	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  02d19	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02d1f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02d22	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  02d28	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 958  : 						GCInventoryItemOneSend(lpObj->m_Index, target);

  02d2d	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02d30	50		 push	 eax
  02d31	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d34	8b 11		 mov	 edx, DWORD PTR [ecx]
  02d36	52		 push	 edx
  02d37	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  02d3c	83 c4 08	 add	 esp, 8

; 959  : 						GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  02d3f	6a 01		 push	 1
  02d41	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  02d45	50		 push	 eax
  02d46	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d49	8b 11		 mov	 edx, DWORD PTR [ecx]
  02d4b	52		 push	 edx
  02d4c	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  02d51	83 c4 0c	 add	 esp, 12			; 0000000cH

; 960  : 						return;

  02d54	e9 f8 01 00 00	 jmp	 $LN126@JewelMain
  02d59	e9 80 01 00 00	 jmp	 $LN2@JewelMain
$LN8@JewelMain:

; 961  : 				}
; 962  : 				else if(lpObj->pInventory[target].m_NewOption > 0)

  02d5e	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02d61	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02d67	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d6a	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02d70	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  02d78	85 c0		 test	 eax, eax
  02d7a	0f 8e 43 01 00
	00		 jle	 $LN6@JewelMain

; 963  : 				{
; 964  : 					if(NumOfWingExcOptions(lpObj->pInventory[target].m_NewOption) < this->JewelOfWingMaxOpt)

  02d80	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02d83	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02d89	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d8c	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02d92	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  02d9a	50		 push	 eax
  02d9b	e8 00 00 00 00	 call	 ?NumOfWingExcOptions@@YAEH@Z ; NumOfWingExcOptions
  02da0	83 c4 04	 add	 esp, 4
  02da3	0f b6 c8	 movzx	 ecx, al
  02da6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02da9	3b 8a cc 00 00
	00		 cmp	 ecx, DWORD PTR [edx+204]
  02daf	0f 8d 0c 01 00
	00		 jge	 $LN3@JewelMain

; 965  : 					{
; 966  : 						if(5 > NumOfWingExcOptions(lpObj->pInventory[target].m_NewOption))

  02db5	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02db8	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02dbe	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02dc1	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02dc7	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  02dcf	50		 push	 eax
  02dd0	e8 00 00 00 00	 call	 ?NumOfWingExcOptions@@YAEH@Z ; NumOfWingExcOptions
  02dd5	83 c4 04	 add	 esp, 4
  02dd8	0f b6 c8	 movzx	 ecx, al
  02ddb	83 f9 05	 cmp	 ecx, 5
  02dde	0f 8d bb 00 00
	00		 jge	 $LN4@JewelMain

; 967  : 						{
; 968  : 							//BYTE NewOption = GetExcWingOption(lpObj->pInventory[target].m_NewOption);
; 969  : 							//BYTE NewOption = this->GetExcUnusedOption(lpObj->pInventory[target].m_NewOption);
; 970  : 							//lpObj->pInventory[target].m_NewOption = NewOption;
; 971  : 
; 972  : 							BYTE NewOption = GetNewWingExlOpt(lpObj->pInventory[target].m_NewOption);

  02de4	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02de7	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02ded	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02df0	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02df6	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  02dfe	50		 push	 eax
  02dff	e8 00 00 00 00	 call	 ?GetNewWingExlOpt@@YAEE@Z ; GetNewWingExlOpt
  02e04	83 c4 04	 add	 esp, 4
  02e07	88 45 af	 mov	 BYTE PTR _NewOption$221784[ebp], al

; 973  : 							lpObj->pInventory[target].m_NewOption |= NewOption;

  02e0a	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02e0d	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02e13	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02e16	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  02e1c	0f b6 4d af	 movzx	 ecx, BYTE PTR _NewOption$221784[ebp]
  02e20	0f b6 94 02 97
	00 00 00	 movzx	 edx, BYTE PTR [edx+eax+151]
  02e28	0b d1		 or	 edx, ecx
  02e2a	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02e2d	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02e33	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02e36	8b 89 24 0e 00
	00		 mov	 ecx, DWORD PTR [ecx+3620]
  02e3c	88 94 01 97 00
	00 00		 mov	 BYTE PTR [ecx+eax+151], dl

; 974  : 
; 975  : 							gObjInventoryItemSet(lpObj->m_Index, source, -1);

  02e43	68 ff 00 00 00	 push	 255			; 000000ffH
  02e48	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  02e4b	50		 push	 eax
  02e4c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02e4f	8b 11		 mov	 edx, DWORD PTR [ecx]
  02e51	52		 push	 edx
  02e52	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  02e57	83 c4 0c	 add	 esp, 12			; 0000000cH

; 976  : 							lpObj->pInventory[source].Clear();

  02e5a	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  02e5d	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02e63	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e66	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  02e6c	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 977  : 							GCInventoryItemOneSend(lpObj->m_Index, target);

  02e71	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  02e74	50		 push	 eax
  02e75	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02e78	8b 11		 mov	 edx, DWORD PTR [ecx]
  02e7a	52		 push	 edx
  02e7b	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  02e80	83 c4 08	 add	 esp, 8

; 978  : 							GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  02e83	6a 01		 push	 1
  02e85	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  02e89	50		 push	 eax
  02e8a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02e8d	8b 11		 mov	 edx, DWORD PTR [ecx]
  02e8f	52		 push	 edx
  02e90	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  02e95	83 c4 0c	 add	 esp, 12			; 0000000cH

; 979  : 
; 980  : 							return;

  02e98	e9 b4 00 00 00	 jmp	 $LN126@JewelMain

; 981  : 						}
; 982  : 						/*else if(5 == NumOfExcOptions(lpObj->pInventory[target].m_NewOption))
; 983  : 						{
; 984  : 							BYTE NewOption = 63;
; 985  : 						
; 986  : 							lpObj->pInventory[target].m_NewOption = NewOption;
; 987  : 							gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 988  : 							lpObj->pInventory[source].Clear();
; 989  : 							GCInventoryItemOneSend(lpObj->m_Index, target);
; 990  : 							GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 991  : 
; 992  : 							return;
; 993  : 						}*/
; 994  : 						else

  02e9d	eb 22		 jmp	 SHORT $LN3@JewelMain
$LN4@JewelMain:

; 995  : 						{
; 996  : 							MsgOutput(lpObj->m_Index,g_ExText.GetText(40),this->JewelOfExellentMaxOpt);

  02e9f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02ea2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  02ea5	51		 push	 ecx
  02ea6	6a 28		 push	 40			; 00000028H
  02ea8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  02ead	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  02eb2	50		 push	 eax
  02eb3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02eb6	8b 02		 mov	 eax, DWORD PTR [edx]
  02eb8	50		 push	 eax
  02eb9	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02ebe	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@JewelMain:

; 997  : 						}
; 998  : 					}
; 999  : 				}
; 1000 : 				else

  02ec1	eb 1b		 jmp	 SHORT $LN2@JewelMain
$LN6@JewelMain:

; 1001 : 				{
; 1002 : 					MsgOutput(lpObj->m_Index,g_ExText.GetText(41));

  02ec3	6a 29		 push	 41			; 00000029H
  02ec5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExText@@3VCExText@@A ; g_ExText
  02eca	e8 00 00 00 00	 call	 ?GetText@CExText@@QAEPADH@Z ; CExText::GetText
  02ecf	50		 push	 eax
  02ed0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ed3	8b 08		 mov	 ecx, DWORD PTR [eax]
  02ed5	51		 push	 ecx
  02ed6	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02edb	83 c4 08	 add	 esp, 8
$LN2@JewelMain:

; 1003 : 				}
; 1004 : 			}
; 1005 : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  02ede	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ee1	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  02ee7	51		 push	 ecx
  02ee8	6a 01		 push	 1
  02eea	68 fd 00 00 00	 push	 253			; 000000fdH
  02eef	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02ef2	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  02ef8	e8 00 00 00 00	 call	 __ftol2_sse
  02efd	50		 push	 eax
  02efe	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f01	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f03	51		 push	 ecx
  02f04	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  02f09	83 c4 14	 add	 esp, 20			; 00000014H

; 1006 : 		}
; 1007 : 		else

  02f0c	eb 43		 jmp	 SHORT $LN1@JewelMain
$LN10@JewelMain:

; 1008 : 		{
; 1009 : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  02f0e	68 ff 00 00 00	 push	 255			; 000000ffH
  02f13	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  02f16	50		 push	 eax
  02f17	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02f1a	8b 11		 mov	 edx, DWORD PTR [ecx]
  02f1c	52		 push	 edx
  02f1d	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet
  02f22	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1010 : 			lpObj->pInventory[source].Clear();

  02f25	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  02f28	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  02f2e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f31	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  02f37	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 1011 : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  02f3c	6a 01		 push	 1
  02f3e	0f b6 45 0c	 movzx	 eax, BYTE PTR _source$[ebp]
  02f42	50		 push	 eax
  02f43	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02f46	8b 11		 mov	 edx, DWORD PTR [ecx]
  02f48	52		 push	 edx
  02f49	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  02f4e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@JewelMain:
$LN126@JewelMain:

; 1012 : 		}
; 1013 : 	}
; 1014 : }

  02f51	5f		 pop	 edi
  02f52	5e		 pop	 esi
  02f53	5b		 pop	 ebx
  02f54	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02f57	33 cd		 xor	 ecx, ebp
  02f59	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02f5e	8b e5		 mov	 esp, ebp
  02f60	5d		 pop	 ebp
  02f61	c2 0c 00	 ret	 12			; 0000000cH
?JewelMain@cNewJewels@@QAEXPAUOBJECTSTRUCT@@HH@Z ENDP	; cNewJewels::JewelMain
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 132  : {

  02f70	55		 push	 ebp
  02f71	8b ec		 mov	 ebp, esp
  02f73	83 ec 40	 sub	 esp, 64			; 00000040H
  02f76	53		 push	 ebx
  02f77	56		 push	 esi
  02f78	57		 push	 edi

; 133  :     return _time64(_Time);

  02f79	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  02f7c	50		 push	 eax
  02f7d	e8 00 00 00 00	 call	 __time64
  02f82	83 c4 04	 add	 esp, 4

; 134  : }

  02f85	5f		 pop	 edi
  02f86	5e		 pop	 esi
  02f87	5b		 pop	 ebx
  02f88	8b e5		 mov	 esp, ebp
  02f8a	5d		 pop	 ebp
  02f8b	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
END
