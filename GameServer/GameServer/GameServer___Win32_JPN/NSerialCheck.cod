; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\NSerialCheck.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?init@NSerialCheck@@QAEXXZ			; NSerialCheck::init
PUBLIC	??_7NSerialCheck@@6B@				; NSerialCheck::`vftable'
PUBLIC	??0NSerialCheck@@QAE@XZ				; NSerialCheck::NSerialCheck
PUBLIC	??_R4NSerialCheck@@6B@				; NSerialCheck::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNSerialCheck@@@8			; NSerialCheck `RTTI Type Descriptor'
PUBLIC	??_R3NSerialCheck@@8				; NSerialCheck::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NSerialCheck@@8				; NSerialCheck::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NSerialCheck@@8			; NSerialCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ENSerialCheck@@UAEPAXI@Z:PROC		; NSerialCheck::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@NSerialCheck@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\nserialcheck.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@NSerialCheck@@8 DD FLAT:??_R0?AVNSerialCheck@@@8 ; NSerialCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NSerialCheck@@8
rdata$r	ENDS
;	COMDAT ??_R2NSerialCheck@@8
rdata$r	SEGMENT
??_R2NSerialCheck@@8 DD FLAT:??_R1A@?0A@EA@NSerialCheck@@8 ; NSerialCheck::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NSerialCheck@@8
rdata$r	SEGMENT
??_R3NSerialCheck@@8 DD 00H				; NSerialCheck::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NSerialCheck@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNSerialCheck@@@8
_DATA	SEGMENT
??_R0?AVNSerialCheck@@@8 DD FLAT:??_7type_info@@6B@	; NSerialCheck `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNSerialCheck@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NSerialCheck@@6B@
rdata$r	SEGMENT
??_R4NSerialCheck@@6B@ DD 00H				; NSerialCheck::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNSerialCheck@@@8
	DD	FLAT:??_R3NSerialCheck@@8
rdata$r	ENDS
;	COMDAT ??_7NSerialCheck@@6B@
CONST	SEGMENT
??_7NSerialCheck@@6B@ DD FLAT:??_R4NSerialCheck@@6B@	; NSerialCheck::`vftable'
	DD	FLAT:??_ENSerialCheck@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NSerialCheck@@QAE@XZ PROC				; NSerialCheck::NSerialCheck
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NSerialCheck@@6B@

; 7    : 	this->init();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?init@NSerialCheck@@QAEXXZ ; NSerialCheck::init

; 8    : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0NSerialCheck@@QAE@XZ ENDP				; NSerialCheck::NSerialCheck
_TEXT	ENDS
PUBLIC	??1NSerialCheck@@UAE@XZ				; NSerialCheck::~NSerialCheck
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GNSerialCheck@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GNSerialCheck@@UAEPAXI@Z PROC			; NSerialCheck::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1NSerialCheck@@UAE@XZ	; NSerialCheck::~NSerialCheck
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GNSerialCheck@@UAEPAXI@Z ENDP			; NSerialCheck::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1NSerialCheck@@UAE@XZ PROC				; NSerialCheck::~NSerialCheck
; _this$ = ecx

; 11   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NSerialCheck@@6B@

; 12   : 	return;
; 13   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??1NSerialCheck@@UAE@XZ ENDP				; NSerialCheck::~NSerialCheck
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?init@NSerialCheck@@QAEXXZ PROC				; NSerialCheck::init
; _this$ = ecx

; 16   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 44	 sub	 esp, 68			; 00000044H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : 	this->m_serial=-1;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c6 40 04 ff	 mov	 BYTE PTR [eax+4], 255	; 000000ffH

; 18   : 	this->m_SendSeiral=0;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0

; 19   : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?init@NSerialCheck@@QAEXXZ ENDP				; NSerialCheck::init
_TEXT	ENDS
PUBLIC	?InCheck@NSerialCheck@@QAEHE@Z			; NSerialCheck::InCheck
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_m_s$ = -5						; size = 1
_this$ = -4						; size = 4
_serial$ = 8						; size = 1
?InCheck@NSerialCheck@@QAEHE@Z PROC			; NSerialCheck::InCheck
; _this$ = ecx

; 22   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 48	 sub	 esp, 72			; 00000048H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi
  00089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	BYTE m_s=this->m_serial;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00092	88 4d fb	 mov	 BYTE PTR _m_s$[ebp], cl

; 24   : 	m_s++;

  00095	8a 45 fb	 mov	 al, BYTE PTR _m_s$[ebp]
  00098	04 01		 add	 al, 1
  0009a	88 45 fb	 mov	 BYTE PTR _m_s$[ebp], al

; 25   : 
; 26   : 	if ( m_s  == serial )

  0009d	0f b6 45 fb	 movzx	 eax, BYTE PTR _m_s$[ebp]
  000a1	0f b6 4d 08	 movzx	 ecx, BYTE PTR _serial$[ebp]
  000a5	3b c1		 cmp	 eax, ecx
  000a7	75 10		 jne	 SHORT $LN1@InCheck

; 27   : 	{
; 28   : 		this->m_serial = serial;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8a 4d 08	 mov	 cl, BYTE PTR _serial$[ebp]
  000af	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 29   : 		return TRUE;

  000b2	b8 01 00 00 00	 mov	 eax, 1
  000b7	eb 02		 jmp	 SHORT $LN2@InCheck
$LN1@InCheck:

; 30   : 	}
; 31   : 
; 32   : 	return FALSE;

  000b9	33 c0		 xor	 eax, eax
$LN2@InCheck:

; 33   : }

  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 04 00	 ret	 4
?InCheck@NSerialCheck@@QAEHE@Z ENDP			; NSerialCheck::InCheck
_TEXT	ENDS
PUBLIC	?GetSerial@NSerialCheck@@QAEHXZ			; NSerialCheck::GetSerial
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSerial@NSerialCheck@@QAEHXZ PROC			; NSerialCheck::GetSerial
; _this$ = ecx

; 36   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	83 ec 44	 sub	 esp, 68			; 00000044H
  000d6	53		 push	 ebx
  000d7	56		 push	 esi
  000d8	57		 push	 edi
  000d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 	return this->m_serial;

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]

; 38   : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
?GetSerial@NSerialCheck@@QAEHXZ ENDP			; NSerialCheck::GetSerial
_TEXT	ENDS
PUBLIC	?GetSendSerial@NSerialCheck@@QAEEXZ		; NSerialCheck::GetSendSerial
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv68 = -69						; size = 1
_this$ = -4						; size = 4
?GetSendSerial@NSerialCheck@@QAEEXZ PROC		; NSerialCheck::GetSendSerial
; _this$ = ecx

; 41   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	83 ec 48	 sub	 esp, 72			; 00000048H
  000f6	53		 push	 ebx
  000f7	56		 push	 esi
  000f8	57		 push	 edi
  000f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	return this->m_SendSeiral++;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00102	88 4d bb	 mov	 BYTE PTR tv68[ebp], cl
  00105	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00108	8a 42 05	 mov	 al, BYTE PTR [edx+5]
  0010b	04 01		 add	 al, 1
  0010d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	88 41 05	 mov	 BYTE PTR [ecx+5], al
  00113	8a 45 bb	 mov	 al, BYTE PTR tv68[ebp]

; 43   : }

  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
?GetSendSerial@NSerialCheck@@QAEEXZ ENDP		; NSerialCheck::GetSendSerial
_TEXT	ENDS
END
