; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\SetItemMacro.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CSetItemMacro@@QAE@XZ			; CSetItemMacro::CSetItemMacro
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\setitemmacro.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSetItemMacro@@QAE@XZ PROC				; CSetItemMacro::CSetItemMacro
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 
; 23   : }

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSetItemMacro@@QAE@XZ ENDP				; CSetItemMacro::CSetItemMacro
_TEXT	ENDS
PUBLIC	??1CSetItemMacro@@QAE@XZ			; CSetItemMacro::~CSetItemMacro
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSetItemMacro@@QAE@XZ PROC				; CSetItemMacro::~CSetItemMacro
; _this$ = ecx

; 26   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 
; 28   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CSetItemMacro@@QAE@XZ ENDP				; CSetItemMacro::~CSetItemMacro
_TEXT	ENDS
PUBLIC	??_C@_0EB@LJEKOAMO@?$FL?$CFd?$FN?5?$CFs?5level?3?$CFd?5skill?3?$CFd?5luck?3?$CF@ ; `string'
PUBLIC	??_C@_08LMLODAD@?$CFd?5?9?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_0DB@PKKGPJJC@?$KB?Z?5For?5BroadCasting?5Server?5Set?5I@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@CSetItemMacro@@QAEHPAD@Z			; CSetItemMacro::Load
EXTRN	_fclose:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	_sprintf:PROC
EXTRN	_strcpy:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenNumber DD	01H DUP (?)
_TokenString DB	064H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0EB@LJEKOAMO@?$FL?$CFd?$FN?5?$CFs?5level?3?$CFd?5skill?3?$CFd?5luck?3?$CF@
CONST	SEGMENT
??_C@_0EB@LJEKOAMO@?$FL?$CFd?$FN?5?$CFs?5level?3?$CFd?5skill?3?$CFd?5luck?3?$CF@ DB '['
	DB	'%d] %s level:%d skill:%d luck:%d option:%d [%d,%d,%d,%d,%d,%d'
	DB	']', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08LMLODAD@?$CFd?5?9?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_08LMLODAD@?$CFd?5?9?5?$CFs?6?$AA@ DB '%d - %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@PKKGPJJC@?$KB?Z?5For?5BroadCasting?5Server?5Set?5I@
CONST	SEGMENT
??_C@_0DB@PKKGPJJC@?$KB?Z?5For?5BroadCasting?5Server?5Set?5I@ DB 0a1H, 0daH
	DB	' For BroadCasting Server Set Item Macro Load!!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iName$ = -588						; size = 4
_i$ = -584						; size = 4
_iExOption6$ = -580					; size = 4
_iExOption5$ = -576					; size = 4
_iExOption4$ = -572					; size = 4
_iExOption3$ = -568					; size = 4
_iExOption2$ = -564					; size = 4
_iExOption1$ = -560					; size = 4
_iOption$ = -556					; size = 4
_iLuck$ = -552						; size = 4
_iSkill$ = -548						; size = 4
_iLevel$ = -544						; size = 4
_iIndex$ = -540						; size = 4
_iType$ = -536						; size = 4
_iSetIndex$ = -532					; size = 4
_szLog$ = -528						; size = 255
_szName$ = -272						; size = 255
_n$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
?Load@CSetItemMacro@@QAEHPAD@Z PROC			; CSetItemMacro::Load
; _this$ = ecx

; 32   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	81 ec 8c 02 00
	00		 sub	 esp, 652		; 0000028cH
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0004e	33 c5		 xor	 eax, ebp
  00050	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00053	53		 push	 ebx
  00054	56		 push	 esi
  00055	57		 push	 edi
  00056	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 	SMDFile = fopen(szFileName, "r");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0005e	8b 45 08	 mov	 eax, DWORD PTR _szFileName$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _fopen
  00067	83 c4 08	 add	 esp, 8
  0006a	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 34   : 	if ( SMDFile == NULL )

  0006f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00076	75 15		 jne	 SHORT $LN10@Load

; 35   : 	{
; 36   : 		LogAdd("¡Ú For BroadCasting Server Set Item Macro Load!!");

  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@PKKGPJJC@?$KB?Z?5For?5BroadCasting?5Server?5Set?5I@
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00083	83 c4 04	 add	 esp, 4

; 37   : 		return FALSE;

  00086	33 c0		 xor	 eax, eax
  00088	e9 a0 04 00 00	 jmp	 $LN11@Load
$LN10@Load:

; 38   : 	}
; 39   : 
; 40   : 	SMDToken Token;
; 41   : 	int n = 0;

  0008d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 42   : 	char szName[255];
; 43   : 	char szLog[255];
; 44   : 	int iSetIndex;
; 45   : 	int iType;
; 46   : 	int iIndex;
; 47   : 	int iLevel;
; 48   : 	int iSkill;
; 49   : 	int iLuck;
; 50   : 	int iOption;
; 51   : 	int iExOption1;
; 52   : 	int iExOption2;
; 53   : 	int iExOption3;
; 54   : 	int iExOption4;
; 55   : 	int iExOption5;
; 56   : 	int iExOption6;
; 57   : 	int i = 0;

  00094	c7 85 b8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0

; 58   : 	int iName = 0;

  0009e	c7 85 b4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _iName$[ebp], 0

; 59   : 
; 60   : 	Token = GetToken();

  000a8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000ad	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
$LN9@Load:

; 61   : 
; 62   : 	while ( true )

  000b0	b8 01 00 00 00	 mov	 eax, 1
  000b5	85 c0		 test	 eax, eax
  000b7	0f 84 5d 04 00
	00		 je	 $LN8@Load

; 63   : 	{
; 64   : 		if ( Token == END )

  000bd	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  000c1	75 05		 jne	 SHORT $LN7@Load

; 65   : 			break;

  000c3	e9 52 04 00 00	 jmp	 $LN8@Load
$LN7@Load:

; 66   : 
; 67   : 		if ( Token == NAME )

  000c8	83 7d f4 00	 cmp	 DWORD PTR _Token$[ebp], 0
  000cc	0f 85 31 04 00
	00		 jne	 $LN6@Load

; 68   : 		{
; 69   : 			strcpy(szName, TokenString);

  000d2	68 00 00 00 00	 push	 OFFSET _TokenString
  000d7	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szName$[ebp]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _strcpy
  000e3	83 c4 08	 add	 esp, 8

; 70   : 
; 71   : 			sprintf(szLog, "%d - %s\n", iName, szName);

  000e6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szName$[ebp]
  000ec	50		 push	 eax
  000ed	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _iName$[ebp]
  000f3	51		 push	 ecx
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_08LMLODAD@?$CFd?5?9?5?$CFs?6?$AA@
  000f9	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR _szLog$[ebp]
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 _sprintf
  00105	83 c4 10	 add	 esp, 16			; 00000010H

; 72   : 
; 73   : 			this->bLoadItemName[iName] = TRUE;

  00108	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  0010e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00111	c7 84 81 a0 8c
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+36000], 1

; 74   : 
; 75   : 			strcpy(this->sMakeItemName[iName], szName);

  0011c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szName$[ebp]
  00122	50		 push	 eax
  00123	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _iName$[ebp]
  00129	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  0012f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00132	8d 84 0a 68 8d
	00 00		 lea	 eax, DWORD PTR [edx+ecx+36200]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _strcpy
  0013f	83 c4 08	 add	 esp, 8

; 76   : 
; 77   : 			OutputDebugString(szLog);

  00142	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _szLog$[ebp]
  00148	50		 push	 eax
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4

; 78   : 
; 79   : 			Token = GetToken();

  0014f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00154	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 80   : 			i = 0;

  00157	c7 85 b8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0

; 81   : 
; 82   : 			if ( Token == END )

  00161	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00165	75 05		 jne	 SHORT $LN5@Load

; 83   : 				break;

  00167	e9 ae 03 00 00	 jmp	 $LN8@Load
$LN5@Load:

; 84   : 
; 85   : 			do
; 86   : 			{
; 87   : 				iSetIndex = (int)TokenNumber;

  0016c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00172	e8 00 00 00 00	 call	 __ftol2_sse
  00177	89 85 ec fd ff
	ff		 mov	 DWORD PTR _iSetIndex$[ebp], eax

; 88   : 
; 89   : 				Token = GetToken();

  0017d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00182	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 90   : 				iType = (int)TokenNumber;

  00185	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018b	e8 00 00 00 00	 call	 __ftol2_sse
  00190	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _iType$[ebp], eax

; 91   : 
; 92   : 				Token = GetToken();

  00196	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0019b	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 93   : 				iIndex = (int)TokenNumber;

  0019e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a4	e8 00 00 00 00	 call	 __ftol2_sse
  001a9	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _iIndex$[ebp], eax

; 94   : 
; 95   : 				Token = GetToken();

  001af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001b4	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 96   : 				iLevel = (int)TokenNumber;

  001b7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001bd	e8 00 00 00 00	 call	 __ftol2_sse
  001c2	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _iLevel$[ebp], eax

; 97   : 
; 98   : 				Token = GetToken();

  001c8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001cd	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 99   : 				iSkill = (int)TokenNumber;

  001d0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001d6	e8 00 00 00 00	 call	 __ftol2_sse
  001db	89 85 dc fd ff
	ff		 mov	 DWORD PTR _iSkill$[ebp], eax

; 100  : 
; 101  : 				Token = GetToken();

  001e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001e6	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 102  : 				iLuck = (int)TokenNumber;

  001e9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ef	e8 00 00 00 00	 call	 __ftol2_sse
  001f4	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _iLuck$[ebp], eax

; 103  : 
; 104  : 				Token = GetToken();

  001fa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001ff	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 105  : 				iOption = (int)TokenNumber;

  00202	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00208	e8 00 00 00 00	 call	 __ftol2_sse
  0020d	89 85 d4 fd ff
	ff		 mov	 DWORD PTR _iOption$[ebp], eax

; 106  : 
; 107  : 				Token = GetToken();

  00213	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00218	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 108  : 				iExOption1 = (int)TokenNumber;

  0021b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00221	e8 00 00 00 00	 call	 __ftol2_sse
  00226	89 85 d0 fd ff
	ff		 mov	 DWORD PTR _iExOption1$[ebp], eax

; 109  : 
; 110  : 				Token = GetToken();

  0022c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00231	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 111  : 				iExOption2 = (int)TokenNumber;

  00234	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023a	e8 00 00 00 00	 call	 __ftol2_sse
  0023f	89 85 cc fd ff
	ff		 mov	 DWORD PTR _iExOption2$[ebp], eax

; 112  : 
; 113  : 				Token = GetToken();

  00245	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0024a	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 114  : 				iExOption3 = (int)TokenNumber;

  0024d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00253	e8 00 00 00 00	 call	 __ftol2_sse
  00258	89 85 c8 fd ff
	ff		 mov	 DWORD PTR _iExOption3$[ebp], eax

; 115  : 
; 116  : 				Token = GetToken();

  0025e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00263	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 117  : 				iExOption4 = (int)TokenNumber;

  00266	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026c	e8 00 00 00 00	 call	 __ftol2_sse
  00271	89 85 c4 fd ff
	ff		 mov	 DWORD PTR _iExOption4$[ebp], eax

; 118  : 
; 119  : 				Token = GetToken();

  00277	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0027c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 120  : 				iExOption5 = (int)TokenNumber;

  0027f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00285	e8 00 00 00 00	 call	 __ftol2_sse
  0028a	89 85 c0 fd ff
	ff		 mov	 DWORD PTR _iExOption5$[ebp], eax

; 121  : 
; 122  : 				Token = GetToken();

  00290	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00295	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 123  : 				iExOption6 = (int)TokenNumber;

  00298	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029e	e8 00 00 00 00	 call	 __ftol2_sse
  002a3	89 85 bc fd ff
	ff		 mov	 DWORD PTR _iExOption6$[ebp], eax

; 124  : 		
; 125  : 				this->SubItemList[iName][i].SetIndex = iSetIndex;

  002a9	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  002af	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  002b5	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  002b8	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  002be	6b c9 30	 imul	 ecx, 48			; 00000030H
  002c1	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _iSetIndex$[ebp]
  002c7	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 126  : 				this->SubItemList[iName][i].ItemIndex = ITEMGET(iType,iIndex);

  002ca	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _iType$[ebp]
  002d0	c1 e0 09	 shl	 eax, 9
  002d3	03 85 e4 fd ff
	ff		 add	 eax, DWORD PTR _iIndex$[ebp]
  002d9	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _iName$[ebp]
  002df	69 c9 d0 02 00
	00		 imul	 ecx, 720		; 000002d0H
  002e5	03 4d f8	 add	 ecx, DWORD PTR _this$[ebp]
  002e8	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  002ee	6b d2 30	 imul	 edx, 48			; 00000030H
  002f1	89 44 11 04	 mov	 DWORD PTR [ecx+edx+4], eax

; 127  : 				this->SubItemList[iName][i].Level = iLevel;

  002f5	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  002fb	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00301	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  00304	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0030a	6b c9 30	 imul	 ecx, 48			; 00000030H
  0030d	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR _iLevel$[ebp]
  00313	89 54 08 08	 mov	 DWORD PTR [eax+ecx+8], edx

; 128  : 				this->SubItemList[iName][i].Skill = iSkill;

  00317	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  0031d	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00323	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  00326	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0032c	6b c9 30	 imul	 ecx, 48			; 00000030H
  0032f	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _iSkill$[ebp]
  00335	89 54 08 0c	 mov	 DWORD PTR [eax+ecx+12], edx

; 129  : 				this->SubItemList[iName][i].Luck = iLuck;

  00339	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  0033f	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00345	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  00348	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0034e	6b c9 30	 imul	 ecx, 48			; 00000030H
  00351	8b 95 d8 fd ff
	ff		 mov	 edx, DWORD PTR _iLuck$[ebp]
  00357	89 54 08 10	 mov	 DWORD PTR [eax+ecx+16], edx

; 130  : 				this->SubItemList[iName][i].Option = iOption;

  0035b	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  00361	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00367	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  0036a	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00370	6b c9 30	 imul	 ecx, 48			; 00000030H
  00373	8b 95 d4 fd ff
	ff		 mov	 edx, DWORD PTR _iOption$[ebp]
  00379	89 54 08 14	 mov	 DWORD PTR [eax+ecx+20], edx

; 131  : 
; 132  : 				this->SubItemList[iName][i].Ex1 = iExOption1;

  0037d	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  00383	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00389	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  0038c	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00392	6b c9 30	 imul	 ecx, 48			; 00000030H
  00395	8b 95 d0 fd ff
	ff		 mov	 edx, DWORD PTR _iExOption1$[ebp]
  0039b	89 54 08 18	 mov	 DWORD PTR [eax+ecx+24], edx

; 133  : 				this->SubItemList[iName][i].Ex2 = iExOption2;

  0039f	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  003a5	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  003ab	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  003ae	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  003b4	6b c9 30	 imul	 ecx, 48			; 00000030H
  003b7	8b 95 cc fd ff
	ff		 mov	 edx, DWORD PTR _iExOption2$[ebp]
  003bd	89 54 08 1c	 mov	 DWORD PTR [eax+ecx+28], edx

; 134  : 				this->SubItemList[iName][i].Ex3 = iExOption3;

  003c1	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  003c7	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  003cd	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  003d0	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  003d6	6b c9 30	 imul	 ecx, 48			; 00000030H
  003d9	8b 95 c8 fd ff
	ff		 mov	 edx, DWORD PTR _iExOption3$[ebp]
  003df	89 54 08 20	 mov	 DWORD PTR [eax+ecx+32], edx

; 135  : 				this->SubItemList[iName][i].Ex4 = iExOption4;

  003e3	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  003e9	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  003ef	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  003f2	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  003f8	6b c9 30	 imul	 ecx, 48			; 00000030H
  003fb	8b 95 c4 fd ff
	ff		 mov	 edx, DWORD PTR _iExOption4$[ebp]
  00401	89 54 08 24	 mov	 DWORD PTR [eax+ecx+36], edx

; 136  : 				this->SubItemList[iName][i].Ex5 = iExOption5;

  00405	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  0040b	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00411	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  00414	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0041a	6b c9 30	 imul	 ecx, 48			; 00000030H
  0041d	8b 95 c0 fd ff
	ff		 mov	 edx, DWORD PTR _iExOption5$[ebp]
  00423	89 54 08 28	 mov	 DWORD PTR [eax+ecx+40], edx

; 137  : 				this->SubItemList[iName][i].Ex6 = iExOption6;

  00427	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  0042d	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00433	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  00436	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0043c	6b c9 30	 imul	 ecx, 48			; 00000030H
  0043f	8b 95 bc fd ff
	ff		 mov	 edx, DWORD PTR _iExOption6$[ebp]
  00445	89 54 08 2c	 mov	 DWORD PTR [eax+ecx+44], edx

; 138  : 
; 139  : 				wsprintf(szLog, "[%d] %s level:%d skill:%d luck:%d option:%d [%d,%d,%d,%d,%d,%d]\n",
; 140  : 					i, ItemAttribute[ITEMGET(iType,iIndex)].Name, iLevel,iSkill,iLuck,iOption,
; 141  : 					iExOption1,iExOption2,iExOption3,iExOption4,iExOption5,iExOption6);

  00449	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _iExOption6$[ebp]
  0044f	50		 push	 eax
  00450	8b 8d c0 fd ff
	ff		 mov	 ecx, DWORD PTR _iExOption5$[ebp]
  00456	51		 push	 ecx
  00457	8b 95 c4 fd ff
	ff		 mov	 edx, DWORD PTR _iExOption4$[ebp]
  0045d	52		 push	 edx
  0045e	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _iExOption3$[ebp]
  00464	50		 push	 eax
  00465	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _iExOption2$[ebp]
  0046b	51		 push	 ecx
  0046c	8b 95 d0 fd ff
	ff		 mov	 edx, DWORD PTR _iExOption1$[ebp]
  00472	52		 push	 edx
  00473	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _iOption$[ebp]
  00479	50		 push	 eax
  0047a	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _iLuck$[ebp]
  00480	51		 push	 ecx
  00481	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _iSkill$[ebp]
  00487	52		 push	 edx
  00488	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _iLevel$[ebp]
  0048e	50		 push	 eax
  0048f	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _iType$[ebp]
  00495	c1 e1 09	 shl	 ecx, 9
  00498	03 8d e4 fd ff
	ff		 add	 ecx, DWORD PTR _iIndex$[ebp]
  0049e	6b c9 70	 imul	 ecx, 112		; 00000070H
  004a1	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  004a7	51		 push	 ecx
  004a8	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  004ae	52		 push	 edx
  004af	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@LJEKOAMO@?$FL?$CFd?$FN?5?$CFs?5level?3?$CFd?5skill?3?$CFd?5luck?3?$CF@
  004b4	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _szLog$[ebp]
  004ba	50		 push	 eax
  004bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  004c1	83 c4 38	 add	 esp, 56			; 00000038H

; 142  : 
; 143  : 				OutputDebugString(szLog);

  004c4	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _szLog$[ebp]
  004ca	50		 push	 eax
  004cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4

; 144  : 				i++;

  004d1	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  004d7	83 c0 01	 add	 eax, 1
  004da	89 85 b8 fd ff
	ff		 mov	 DWORD PTR _i$[ebp], eax

; 145  : 
; 146  : 				Token = GetToken();

  004e0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004e5	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 147  : 			}
; 148  : 			while ( Token == NUMBER );

  004e8	83 7d f4 01	 cmp	 DWORD PTR _Token$[ebp], 1
  004ec	0f 84 7a fc ff
	ff		 je	 $LN5@Load

; 149  : 	
; 150  : 			iName++;

  004f2	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _iName$[ebp]
  004f8	83 c0 01	 add	 eax, 1
  004fb	89 85 b4 fd ff
	ff		 mov	 DWORD PTR _iName$[ebp], eax

; 151  : 		}
; 152  : 		else

  00501	eb 12		 jmp	 SHORT $LN1@Load
$LN6@Load:

; 153  : 		{
; 154  : 			LogAdd("¡Ú For BroadCasting Server Set Item Macro Load!!");

  00503	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@PKKGPJJC@?$KB?Z?5For?5BroadCasting?5Server?5Set?5I@
  00508	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0050e	83 c4 04	 add	 esp, 4

; 155  : 			return FALSE;

  00511	33 c0		 xor	 eax, eax
  00513	eb 18		 jmp	 SHORT $LN11@Load
$LN1@Load:

; 156  : 		}
; 157  : 	}

  00515	e9 96 fb ff ff	 jmp	 $LN9@Load
$LN8@Load:

; 158  : 	fclose(SMDFile);

  0051a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0051f	50		 push	 eax
  00520	e8 00 00 00 00	 call	 _fclose
  00525	83 c4 04	 add	 esp, 4

; 159  : 	return TRUE;

  00528	b8 01 00 00 00	 mov	 eax, 1
$LN11@Load:

; 160  : }

  0052d	5f		 pop	 edi
  0052e	5e		 pop	 esi
  0052f	5b		 pop	 ebx
  00530	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00533	33 cd		 xor	 ecx, ebp
  00535	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0053a	8b e5		 mov	 esp, ebp
  0053c	5d		 pop	 ebp
  0053d	c2 04 00	 ret	 4
?Load@CSetItemMacro@@QAEHPAD@Z ENDP			; CSetItemMacro::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00540	55		 push	 ebp
  00541	8b ec		 mov	 ebp, esp
  00543	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00549	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0054e	33 c5		 xor	 eax, ebp
  00550	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00553	53		 push	 ebx
  00554	56		 push	 esi
  00555	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00556	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0055d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00562	50		 push	 eax
  00563	e8 00 00 00 00	 call	 _fgetc
  00568	83 c4 04	 add	 esp, 4
  0056b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0056e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00572	83 f9 ff	 cmp	 ecx, -1
  00575	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00577	b8 02 00 00 00	 mov	 eax, 2
  0057c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00581	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00583	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00587	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0058a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0058c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00591	50		 push	 eax
  00592	e8 00 00 00 00	 call	 _fgetc
  00597	83 c4 04	 add	 esp, 4
  0059a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0059d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005a1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  005a4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  005a6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005aa	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  005ad	74 1c		 je	 SHORT $LN23@GetToken
  005af	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005b3	83 f8 ff	 cmp	 eax, -1
  005b6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  005b8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005bd	50		 push	 eax
  005be	e8 00 00 00 00	 call	 _fgetc
  005c3	83 c4 04	 add	 esp, 4
  005c6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  005c9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  005cb	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005cf	83 f8 ff	 cmp	 eax, -1
  005d2	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  005d4	b8 02 00 00 00	 mov	 eax, 2
  005d9	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  005de	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005e2	50		 push	 eax
  005e3	e8 00 00 00 00	 call	 _isspace
  005e8	83 c4 04	 add	 esp, 4
  005eb	85 c0		 test	 eax, eax
  005ed	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  005f3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005f7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  005fd	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00603	83 e9 22	 sub	 ecx, 34			; 00000022H
  00606	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0060c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00613	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00619	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0061f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00626	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0062d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00637	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0063c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00641	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00646	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00650	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00655	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0065a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0065f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00669	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0066e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00673	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00678	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00682	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00687	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0068c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00691	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0069b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006a0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  006a5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  006aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006af	50		 push	 eax
  006b0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006b4	51		 push	 ecx
  006b5	e8 00 00 00 00	 call	 _ungetc
  006ba	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  006bd	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  006c0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  006c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006c8	50		 push	 eax
  006c9	e8 00 00 00 00	 call	 _getc
  006ce	83 c4 04	 add	 esp, 4
  006d1	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  006d4	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006d8	83 f9 ff	 cmp	 ecx, -1
  006db	74 36		 je	 SHORT $LN12@GetToken
  006dd	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006e1	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  006e4	74 1a		 je	 SHORT $LN11@GetToken
  006e6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006ea	50		 push	 eax
  006eb	e8 00 00 00 00	 call	 _isdigit
  006f0	83 c4 04	 add	 esp, 4
  006f3	85 c0		 test	 eax, eax
  006f5	75 09		 jne	 SHORT $LN11@GetToken
  006f7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006fb	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  006fe	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00700	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00703	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00706	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00708	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0070b	83 c0 01	 add	 eax, 1
  0070e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00711	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00713	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00716	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00719	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0071c	50		 push	 eax
  0071d	e8 00 00 00 00	 call	 _atof
  00722	83 c4 04	 add	 esp, 4
  00725	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0072b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00735	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0073a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0073f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00744	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0074b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00750	50		 push	 eax
  00751	e8 00 00 00 00	 call	 _getc
  00756	83 c4 04	 add	 esp, 4
  00759	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0075c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00760	83 f9 ff	 cmp	 ecx, -1
  00763	74 1c		 je	 SHORT $LN8@GetToken
  00765	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00769	83 f8 22	 cmp	 eax, 34			; 00000022H
  0076c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0076e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00771	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00774	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00776	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00779	83 c0 01	 add	 eax, 1
  0077c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0077f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00781	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00785	83 f8 22	 cmp	 eax, 34			; 00000022H
  00788	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0078a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0078f	50		 push	 eax
  00790	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00794	51		 push	 ecx
  00795	e8 00 00 00 00	 call	 _ungetc
  0079a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0079d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007a0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  007a3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  007ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007b2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  007b7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  007bc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007c0	50		 push	 eax
  007c1	e8 00 00 00 00	 call	 _isalpha
  007c6	83 c4 04	 add	 esp, 4
  007c9	85 c0		 test	 eax, eax
  007cb	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  007d1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  007d8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007db	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  007de	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  007e0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007e3	83 c0 01	 add	 eax, 1
  007e6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  007e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007ee	50		 push	 eax
  007ef	e8 00 00 00 00	 call	 _getc
  007f4	83 c4 04	 add	 esp, 4
  007f7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  007fa	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007fe	83 f9 ff	 cmp	 ecx, -1
  00801	74 36		 je	 SHORT $LN3@GetToken
  00803	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00807	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0080a	74 1a		 je	 SHORT $LN2@GetToken
  0080c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00810	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00813	74 11		 je	 SHORT $LN2@GetToken
  00815	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00819	50		 push	 eax
  0081a	e8 00 00 00 00	 call	 _isalnum
  0081f	83 c4 04	 add	 esp, 4
  00822	85 c0		 test	 eax, eax
  00824	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00826	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00829	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0082c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0082e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00831	83 c0 01	 add	 eax, 1
  00834	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00837	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00839	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0083e	50		 push	 eax
  0083f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00843	51		 push	 ecx
  00844	e8 00 00 00 00	 call	 _ungetc
  00849	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0084c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0084f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00852	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0085c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00861	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00863	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00865	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0086f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00874	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00876	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00878	5f		 pop	 edi
  00879	5e		 pop	 esi
  0087a	5b		 pop	 ebx
  0087b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0087e	33 cd		 xor	 ecx, ebp
  00880	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00885	8b e5		 mov	 esp, ebp
  00887	5d		 pop	 ebp
  00888	c3		 ret	 0
  00889	8d 49 00	 npad	 3
$LN35@GetToken:
  0088c	00 00 00 00	 DD	 $LN10@GetToken
  00890	00 00 00 00	 DD	 $LN19@GetToken
  00894	00 00 00 00	 DD	 $LN17@GetToken
  00898	00 00 00 00	 DD	 $LN14@GetToken
  0089c	00 00 00 00	 DD	 $LN18@GetToken
  008a0	00 00 00 00	 DD	 $LN16@GetToken
  008a4	00 00 00 00	 DD	 $LN15@GetToken
  008a8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  008ac	00		 DB	 0
  008ad	01		 DB	 1
  008ae	07		 DB	 7
  008af	07		 DB	 7
  008b0	07		 DB	 7
  008b1	07		 DB	 7
  008b2	07		 DB	 7
  008b3	07		 DB	 7
  008b4	07		 DB	 7
  008b5	07		 DB	 7
  008b6	02		 DB	 2
  008b7	03		 DB	 3
  008b8	03		 DB	 3
  008b9	07		 DB	 7
  008ba	03		 DB	 3
  008bb	03		 DB	 3
  008bc	03		 DB	 3
  008bd	03		 DB	 3
  008be	03		 DB	 3
  008bf	03		 DB	 3
  008c0	03		 DB	 3
  008c1	03		 DB	 3
  008c2	03		 DB	 3
  008c3	03		 DB	 3
  008c4	07		 DB	 7
  008c5	04		 DB	 4
  008c6	07		 DB	 7
  008c7	07		 DB	 7
  008c8	07		 DB	 7
  008c9	07		 DB	 7
  008ca	07		 DB	 7
  008cb	07		 DB	 7
  008cc	07		 DB	 7
  008cd	07		 DB	 7
  008ce	07		 DB	 7
  008cf	07		 DB	 7
  008d0	07		 DB	 7
  008d1	07		 DB	 7
  008d2	07		 DB	 7
  008d3	07		 DB	 7
  008d4	07		 DB	 7
  008d5	07		 DB	 7
  008d6	07		 DB	 7
  008d7	07		 DB	 7
  008d8	07		 DB	 7
  008d9	07		 DB	 7
  008da	07		 DB	 7
  008db	07		 DB	 7
  008dc	07		 DB	 7
  008dd	07		 DB	 7
  008de	07		 DB	 7
  008df	07		 DB	 7
  008e0	07		 DB	 7
  008e1	07		 DB	 7
  008e2	07		 DB	 7
  008e3	07		 DB	 7
  008e4	07		 DB	 7
  008e5	07		 DB	 7
  008e6	07		 DB	 7
  008e7	07		 DB	 7
  008e8	07		 DB	 7
  008e9	07		 DB	 7
  008ea	07		 DB	 7
  008eb	07		 DB	 7
  008ec	07		 DB	 7
  008ed	07		 DB	 7
  008ee	07		 DB	 7
  008ef	07		 DB	 7
  008f0	07		 DB	 7
  008f1	07		 DB	 7
  008f2	07		 DB	 7
  008f3	07		 DB	 7
  008f4	07		 DB	 7
  008f5	07		 DB	 7
  008f6	07		 DB	 7
  008f7	07		 DB	 7
  008f8	07		 DB	 7
  008f9	07		 DB	 7
  008fa	07		 DB	 7
  008fb	07		 DB	 7
  008fc	07		 DB	 7
  008fd	07		 DB	 7
  008fe	07		 DB	 7
  008ff	07		 DB	 7
  00900	07		 DB	 7
  00901	07		 DB	 7
  00902	07		 DB	 7
  00903	07		 DB	 7
  00904	07		 DB	 7
  00905	05		 DB	 5
  00906	07		 DB	 7
  00907	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?MakeItem@CSetItemMacro@@QAEHHPAD@Z		; CSetItemMacro::MakeItem
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	_rand:PROC
EXTRN	?GetSetOptionName@CSetItemOption@@QAEPADH@Z:PROC ; CSetItemOption::GetSetOptionName
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\setitemmacro.cpp
_TEXT	SEGMENT
_iSetOption$220086 = -48				; size = 4
_iAddStat$220085 = -44					; size = 4
_iDur$220084 = -40					; size = 4
_btNewOption$220083 = -33				; size = 1
_iOption$220082 = -32					; size = 4
_iLuck$220081 = -28					; size = 4
_iSkill$220080 = -24					; size = 4
_iLevel$220079 = -20					; size = 4
_j$220074 = -16						; size = 4
_i$220068 = -12						; size = 4
_bFindItem$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_szSetName$ = 12					; size = 4
?MakeItem@CSetItemMacro@@QAEHHPAD@Z PROC		; CSetItemMacro::MakeItem
; _this$ = ecx

; 165  : {

  00910	55		 push	 ebp
  00911	8b ec		 mov	 ebp, esp
  00913	83 ec 70	 sub	 esp, 112		; 00000070H
  00916	53		 push	 ebx
  00917	56		 push	 esi
  00918	57		 push	 edi
  00919	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 	BOOL bFindItem = FALSE;

  0091c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bFindItem$[ebp], 0

; 167  : 
; 168  : 	for(int i = 0; i < MAX_SET_ITEM_MACRO; i++ )

  00923	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$220068[ebp], 0
  0092a	eb 09		 jmp	 SHORT $LN13@MakeItem
$LN12@MakeItem:
  0092c	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  0092f	83 c0 01	 add	 eax, 1
  00932	89 45 f4	 mov	 DWORD PTR _i$220068[ebp], eax
$LN13@MakeItem:
  00935	83 7d f4 32	 cmp	 DWORD PTR _i$220068[ebp], 50 ; 00000032H
  00939	0f 8d af 04 00
	00		 jge	 $LN11@MakeItem

; 169  : 	{
; 170  : 		if( this->bLoadItemName[i] != FALSE )

  0093f	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00942	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00945	83 bc 81 a0 8c
	00 00 00	 cmp	 DWORD PTR [ecx+eax*4+36000], 0
  0094d	0f 84 96 04 00
	00		 je	 $LN10@MakeItem

; 171  : 		{
; 172  : 			if( strcmp(this->sMakeItemName[i],szSetName) == NULL )

  00953	8b 45 0c	 mov	 eax, DWORD PTR _szSetName$[ebp]
  00956	50		 push	 eax
  00957	8b 4d f4	 mov	 ecx, DWORD PTR _i$220068[ebp]
  0095a	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  00960	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00963	8d 84 0a 68 8d
	00 00		 lea	 eax, DWORD PTR [edx+ecx+36200]
  0096a	50		 push	 eax
  0096b	e8 00 00 00 00	 call	 _strcmp
  00970	83 c4 08	 add	 esp, 8
  00973	85 c0		 test	 eax, eax
  00975	0f 85 6e 04 00
	00		 jne	 $LN10@MakeItem

; 173  : 			{
; 174  : 				bFindItem = TRUE;

  0097b	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bFindItem$[ebp], 1

; 175  : 
; 176  : 				for( int j = 0; j < 15; j++ )

  00982	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$220074[ebp], 0
  00989	eb 09		 jmp	 SHORT $LN8@MakeItem
$LN7@MakeItem:
  0098b	8b 45 f0	 mov	 eax, DWORD PTR _j$220074[ebp]
  0098e	83 c0 01	 add	 eax, 1
  00991	89 45 f0	 mov	 DWORD PTR _j$220074[ebp], eax
$LN8@MakeItem:
  00994	83 7d f0 0f	 cmp	 DWORD PTR _j$220074[ebp], 15 ; 0000000fH
  00998	0f 8d 4b 04 00
	00		 jge	 $LN10@MakeItem

; 177  : 				{
; 178  : 					if( this->SubItemList[i][j].ItemIndex != NULL )

  0099e	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  009a1	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  009a7	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  009aa	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  009ad	6b c9 30	 imul	 ecx, 48			; 00000030H
  009b0	83 7c 08 04 00	 cmp	 DWORD PTR [eax+ecx+4], 0
  009b5	0f 84 29 04 00
	00		 je	 $LN5@MakeItem

; 179  : 					{
; 180  : 						int iLevel = 0;//14

  009bb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iLevel$220079[ebp], 0

; 181  : 						int iSkill = 0;//18

  009c2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iSkill$220080[ebp], 0

; 182  : 						int iLuck = 0;//1c

  009c9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iLuck$220081[ebp], 0

; 183  : 						int iOption = 0;//20

  009d0	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOption$220082[ebp], 0

; 184  : 						BYTE btNewOption = 0;//24

  009d7	c6 45 df 00	 mov	 BYTE PTR _btNewOption$220083[ebp], 0

; 185  : 						int iDur = 0;//28

  009db	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _iDur$220084[ebp], 0

; 186  : 						int iAddStat = 0;//2c

  009e2	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _iAddStat$220085[ebp], 0

; 187  : 						int iSetOption = 0;//30

  009e9	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _iSetOption$220086[ebp], 0

; 188  : 
; 189  : 						if( this->SubItemList[i][j].SetIndex != -1 )

  009f0	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  009f3	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  009f9	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  009fc	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  009ff	6b c9 30	 imul	 ecx, 48			; 00000030H
  00a02	83 3c 08 ff	 cmp	 DWORD PTR [eax+ecx], -1
  00a06	0f 84 15 02 00
	00		 je	 $LN4@MakeItem

; 190  : 						{
; 191  : 							iSkill = this->SubItemList[i][j].Skill;

  00a0c	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00a0f	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00a15	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00a18	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00a1b	6b c9 30	 imul	 ecx, 48			; 00000030H
  00a1e	8b 54 08 0c	 mov	 edx, DWORD PTR [eax+ecx+12]
  00a22	89 55 e8	 mov	 DWORD PTR _iSkill$220080[ebp], edx

; 192  : 							iLuck = this->SubItemList[i][j].Luck;

  00a25	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00a28	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00a2e	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00a31	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00a34	6b c9 30	 imul	 ecx, 48			; 00000030H
  00a37	8b 54 08 10	 mov	 edx, DWORD PTR [eax+ecx+16]
  00a3b	89 55 e4	 mov	 DWORD PTR _iLuck$220081[ebp], edx

; 193  : 							iOption = this->SubItemList[i][j].Option;

  00a3e	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00a41	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00a47	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00a4a	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00a4d	6b c9 30	 imul	 ecx, 48			; 00000030H
  00a50	8b 54 08 14	 mov	 edx, DWORD PTR [eax+ecx+20]
  00a54	89 55 e0	 mov	 DWORD PTR _iOption$220082[ebp], edx

; 194  : 							iLevel = this->SubItemList[i][j].Level;

  00a57	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00a5a	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00a60	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00a63	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00a66	6b c9 30	 imul	 ecx, 48			; 00000030H
  00a69	8b 54 08 08	 mov	 edx, DWORD PTR [eax+ecx+8]
  00a6d	89 55 ec	 mov	 DWORD PTR _iLevel$220079[ebp], edx

; 195  : 
; 196  : 							btNewOption =	(BYTE)(this->SubItemList[i][j].Ex1<<5);

  00a70	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00a73	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00a79	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00a7c	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00a7f	6b c9 30	 imul	 ecx, 48			; 00000030H
  00a82	8b 54 08 18	 mov	 edx, DWORD PTR [eax+ecx+24]
  00a86	c1 e2 05	 shl	 edx, 5
  00a89	88 55 df	 mov	 BYTE PTR _btNewOption$220083[ebp], dl

; 197  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex2<<4);

  00a8c	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00a8f	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00a95	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00a98	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00a9b	6b c9 30	 imul	 ecx, 48			; 00000030H
  00a9e	8b 54 08 1c	 mov	 edx, DWORD PTR [eax+ecx+28]
  00aa2	c1 e2 04	 shl	 edx, 4
  00aa5	0f b6 c2	 movzx	 eax, dl
  00aa8	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00aac	0b c8		 or	 ecx, eax
  00aae	88 4d df	 mov	 BYTE PTR _btNewOption$220083[ebp], cl

; 198  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex3<<3);

  00ab1	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00ab4	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00aba	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00abd	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00ac0	6b c9 30	 imul	 ecx, 48			; 00000030H
  00ac3	8b 54 08 20	 mov	 edx, DWORD PTR [eax+ecx+32]
  00ac7	c1 e2 03	 shl	 edx, 3
  00aca	0f b6 c2	 movzx	 eax, dl
  00acd	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00ad1	0b c8		 or	 ecx, eax
  00ad3	88 4d df	 mov	 BYTE PTR _btNewOption$220083[ebp], cl

; 199  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex4<<2);

  00ad6	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00ad9	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00adf	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00ae2	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00ae5	6b c9 30	 imul	 ecx, 48			; 00000030H
  00ae8	8b 54 08 24	 mov	 edx, DWORD PTR [eax+ecx+36]
  00aec	c1 e2 02	 shl	 edx, 2
  00aef	0f b6 c2	 movzx	 eax, dl
  00af2	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00af6	0b c8		 or	 ecx, eax
  00af8	88 4d df	 mov	 BYTE PTR _btNewOption$220083[ebp], cl

; 200  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex5<<1);

  00afb	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00afe	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00b04	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00b07	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00b0a	6b c9 30	 imul	 ecx, 48			; 00000030H
  00b0d	8b 54 08 28	 mov	 edx, DWORD PTR [eax+ecx+40]
  00b11	d1 e2		 shl	 edx, 1
  00b13	0f b6 c2	 movzx	 eax, dl
  00b16	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00b1a	0b c8		 or	 ecx, eax
  00b1c	88 4d df	 mov	 BYTE PTR _btNewOption$220083[ebp], cl

; 201  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex6);

  00b1f	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00b22	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00b28	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00b2b	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00b2e	6b c9 30	 imul	 ecx, 48			; 00000030H
  00b31	0f b6 54 08 2c	 movzx	 edx, BYTE PTR [eax+ecx+44]
  00b36	0f b6 45 df	 movzx	 eax, BYTE PTR _btNewOption$220083[ebp]
  00b3a	0b c2		 or	 eax, edx
  00b3c	88 45 df	 mov	 BYTE PTR _btNewOption$220083[ebp], al

; 202  : 
; 203  : 							gSetItemOption.GetSetOptionName(this->SubItemList[i][j].SetIndex);

  00b3f	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00b42	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00b48	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00b4b	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00b4e	6b c9 30	 imul	 ecx, 48			; 00000030H
  00b51	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00b54	52		 push	 edx
  00b55	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00b5a	e8 00 00 00 00	 call	 ?GetSetOptionName@CSetItemOption@@QAEPADH@Z ; CSetItemOption::GetSetOptionName

; 204  : 							iSetOption = 1;

  00b5f	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _iSetOption$220086[ebp], 1

; 205  : 							
; 206  : 							if( rand()%100 < 80 ) 

  00b66	e8 00 00 00 00	 call	 _rand
  00b6b	99		 cdq
  00b6c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00b71	f7 f9		 idiv	 ecx
  00b73	83 fa 50	 cmp	 edx, 80			; 00000050H
  00b76	7d 0b		 jge	 SHORT $LN3@MakeItem

; 207  : 								iSetOption |= 4;

  00b78	8b 45 d0	 mov	 eax, DWORD PTR _iSetOption$220086[ebp]
  00b7b	83 c8 04	 or	 eax, 4
  00b7e	89 45 d0	 mov	 DWORD PTR _iSetOption$220086[ebp], eax

; 208  : 							else 

  00b81	eb 09		 jmp	 SHORT $LN2@MakeItem
$LN3@MakeItem:

; 209  : 								iSetOption |= 8;

  00b83	8b 45 d0	 mov	 eax, DWORD PTR _iSetOption$220086[ebp]
  00b86	83 c8 08	 or	 eax, 8
  00b89	89 45 d0	 mov	 DWORD PTR _iSetOption$220086[ebp], eax
$LN2@MakeItem:

; 210  : 
; 211  : 							ItemSerialCreateSend(aIndex,gObj[aIndex].MapNumber,(BYTE)gObj[aIndex].X,(BYTE)gObj[aIndex].Y,
; 212  : 								this->SubItemList[i][j].ItemIndex,(BYTE)iLevel,(BYTE)iDur,(BYTE)iSkill,(BYTE)iLuck,(BYTE)iOption,-1,(BYTE)btNewOption,(BYTE)iSetOption);

  00b8c	0f b6 45 d0	 movzx	 eax, BYTE PTR _iSetOption$220086[ebp]
  00b90	50		 push	 eax
  00b91	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00b95	51		 push	 ecx
  00b96	6a ff		 push	 -1
  00b98	0f b6 55 e0	 movzx	 edx, BYTE PTR _iOption$220082[ebp]
  00b9c	52		 push	 edx
  00b9d	0f b6 45 e4	 movzx	 eax, BYTE PTR _iLuck$220081[ebp]
  00ba1	50		 push	 eax
  00ba2	0f b6 4d e8	 movzx	 ecx, BYTE PTR _iSkill$220080[ebp]
  00ba6	51		 push	 ecx
  00ba7	0f b6 55 d8	 movzx	 edx, BYTE PTR _iDur$220084[ebp]
  00bab	52		 push	 edx
  00bac	0f b6 45 ec	 movzx	 eax, BYTE PTR _iLevel$220079[ebp]
  00bb0	50		 push	 eax
  00bb1	8b 4d f4	 mov	 ecx, DWORD PTR _i$220068[ebp]
  00bb4	69 c9 d0 02 00
	00		 imul	 ecx, 720		; 000002d0H
  00bba	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  00bbd	8b 55 f0	 mov	 edx, DWORD PTR _j$220074[ebp]
  00bc0	6b d2 30	 imul	 edx, 48			; 00000030H
  00bc3	8b 44 11 04	 mov	 eax, DWORD PTR [ecx+edx+4]
  00bc7	50		 push	 eax
  00bc8	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00bcb	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00bd1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00bd7	0f b6 84 0a 46
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+326]
  00bdf	50		 push	 eax
  00be0	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00be3	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00be9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00bef	0f b6 84 0a 44
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+324]
  00bf7	50		 push	 eax
  00bf8	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00bfb	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00c01	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c07	0f b6 84 0a 49
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+329]
  00c0f	50		 push	 eax
  00c10	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00c13	51		 push	 ecx
  00c14	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00c19	83 c4 34	 add	 esp, 52			; 00000034H

; 213  : 						}
; 214  : 						else

  00c1c	e9 c3 01 00 00	 jmp	 $LN5@MakeItem
$LN4@MakeItem:

; 215  : 						{
; 216  : 							iSkill = this->SubItemList[i][j].Skill;

  00c21	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00c24	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00c2a	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00c2d	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00c30	6b c9 30	 imul	 ecx, 48			; 00000030H
  00c33	8b 54 08 0c	 mov	 edx, DWORD PTR [eax+ecx+12]
  00c37	89 55 e8	 mov	 DWORD PTR _iSkill$220080[ebp], edx

; 217  : 							iLuck = this->SubItemList[i][j].Luck;

  00c3a	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00c3d	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00c43	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00c46	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00c49	6b c9 30	 imul	 ecx, 48			; 00000030H
  00c4c	8b 54 08 10	 mov	 edx, DWORD PTR [eax+ecx+16]
  00c50	89 55 e4	 mov	 DWORD PTR _iLuck$220081[ebp], edx

; 218  : 							iOption = this->SubItemList[i][j].Option;

  00c53	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00c56	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00c5c	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00c5f	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00c62	6b c9 30	 imul	 ecx, 48			; 00000030H
  00c65	8b 54 08 14	 mov	 edx, DWORD PTR [eax+ecx+20]
  00c69	89 55 e0	 mov	 DWORD PTR _iOption$220082[ebp], edx

; 219  : 							iLevel = this->SubItemList[i][j].Level;

  00c6c	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00c6f	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00c75	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00c78	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00c7b	6b c9 30	 imul	 ecx, 48			; 00000030H
  00c7e	8b 54 08 08	 mov	 edx, DWORD PTR [eax+ecx+8]
  00c82	89 55 ec	 mov	 DWORD PTR _iLevel$220079[ebp], edx

; 220  : 
; 221  : 							btNewOption =	(BYTE)(this->SubItemList[i][j].Ex1<<5);

  00c85	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00c88	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00c8e	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00c91	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00c94	6b c9 30	 imul	 ecx, 48			; 00000030H
  00c97	8b 54 08 18	 mov	 edx, DWORD PTR [eax+ecx+24]
  00c9b	c1 e2 05	 shl	 edx, 5
  00c9e	88 55 df	 mov	 BYTE PTR _btNewOption$220083[ebp], dl

; 222  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex2<<4);

  00ca1	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00ca4	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00caa	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00cad	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00cb0	6b c9 30	 imul	 ecx, 48			; 00000030H
  00cb3	8b 54 08 1c	 mov	 edx, DWORD PTR [eax+ecx+28]
  00cb7	c1 e2 04	 shl	 edx, 4
  00cba	0f b6 c2	 movzx	 eax, dl
  00cbd	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00cc1	0b c8		 or	 ecx, eax
  00cc3	88 4d df	 mov	 BYTE PTR _btNewOption$220083[ebp], cl

; 223  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex3<<3);

  00cc6	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00cc9	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00ccf	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00cd2	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00cd5	6b c9 30	 imul	 ecx, 48			; 00000030H
  00cd8	8b 54 08 20	 mov	 edx, DWORD PTR [eax+ecx+32]
  00cdc	c1 e2 03	 shl	 edx, 3
  00cdf	0f b6 c2	 movzx	 eax, dl
  00ce2	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00ce6	0b c8		 or	 ecx, eax
  00ce8	88 4d df	 mov	 BYTE PTR _btNewOption$220083[ebp], cl

; 224  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex4<<2);

  00ceb	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00cee	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00cf4	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00cf7	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00cfa	6b c9 30	 imul	 ecx, 48			; 00000030H
  00cfd	8b 54 08 24	 mov	 edx, DWORD PTR [eax+ecx+36]
  00d01	c1 e2 02	 shl	 edx, 2
  00d04	0f b6 c2	 movzx	 eax, dl
  00d07	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00d0b	0b c8		 or	 ecx, eax
  00d0d	88 4d df	 mov	 BYTE PTR _btNewOption$220083[ebp], cl

; 225  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex5<<1);

  00d10	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00d13	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00d19	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00d1c	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00d1f	6b c9 30	 imul	 ecx, 48			; 00000030H
  00d22	8b 54 08 28	 mov	 edx, DWORD PTR [eax+ecx+40]
  00d26	d1 e2		 shl	 edx, 1
  00d28	0f b6 c2	 movzx	 eax, dl
  00d2b	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00d2f	0b c8		 or	 ecx, eax
  00d31	88 4d df	 mov	 BYTE PTR _btNewOption$220083[ebp], cl

; 226  : 							btNewOption |=	(BYTE)(this->SubItemList[i][j].Ex6);

  00d34	8b 45 f4	 mov	 eax, DWORD PTR _i$220068[ebp]
  00d37	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  00d3d	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00d40	8b 4d f0	 mov	 ecx, DWORD PTR _j$220074[ebp]
  00d43	6b c9 30	 imul	 ecx, 48			; 00000030H
  00d46	0f b6 54 08 2c	 movzx	 edx, BYTE PTR [eax+ecx+44]
  00d4b	0f b6 45 df	 movzx	 eax, BYTE PTR _btNewOption$220083[ebp]
  00d4f	0b c2		 or	 eax, edx
  00d51	88 45 df	 mov	 BYTE PTR _btNewOption$220083[ebp], al

; 227  : 							
; 228  : 							ItemSerialCreateSend(aIndex,gObj[aIndex].MapNumber,(BYTE)gObj[aIndex].X,(BYTE)gObj[aIndex].Y,
; 229  : 								this->SubItemList[i][j].ItemIndex,(BYTE)iLevel,(BYTE)iDur,(BYTE)iSkill,(BYTE)iLuck,(BYTE)iOption,-1,btNewOption,iSetOption);

  00d54	0f b6 45 d0	 movzx	 eax, BYTE PTR _iSetOption$220086[ebp]
  00d58	50		 push	 eax
  00d59	0f b6 4d df	 movzx	 ecx, BYTE PTR _btNewOption$220083[ebp]
  00d5d	51		 push	 ecx
  00d5e	6a ff		 push	 -1
  00d60	0f b6 55 e0	 movzx	 edx, BYTE PTR _iOption$220082[ebp]
  00d64	52		 push	 edx
  00d65	0f b6 45 e4	 movzx	 eax, BYTE PTR _iLuck$220081[ebp]
  00d69	50		 push	 eax
  00d6a	0f b6 4d e8	 movzx	 ecx, BYTE PTR _iSkill$220080[ebp]
  00d6e	51		 push	 ecx
  00d6f	0f b6 55 d8	 movzx	 edx, BYTE PTR _iDur$220084[ebp]
  00d73	52		 push	 edx
  00d74	0f b6 45 ec	 movzx	 eax, BYTE PTR _iLevel$220079[ebp]
  00d78	50		 push	 eax
  00d79	8b 4d f4	 mov	 ecx, DWORD PTR _i$220068[ebp]
  00d7c	69 c9 d0 02 00
	00		 imul	 ecx, 720		; 000002d0H
  00d82	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  00d85	8b 55 f0	 mov	 edx, DWORD PTR _j$220074[ebp]
  00d88	6b d2 30	 imul	 edx, 48			; 00000030H
  00d8b	8b 44 11 04	 mov	 eax, DWORD PTR [ecx+edx+4]
  00d8f	50		 push	 eax
  00d90	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00d93	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00d99	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00d9f	0f b6 84 0a 46
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+326]
  00da7	50		 push	 eax
  00da8	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00dab	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00db1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00db7	0f b6 84 0a 44
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+324]
  00dbf	50		 push	 eax
  00dc0	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00dc3	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00dc9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00dcf	0f b6 84 0a 49
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+329]
  00dd7	50		 push	 eax
  00dd8	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00ddb	51		 push	 ecx
  00ddc	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00de1	83 c4 34	 add	 esp, 52			; 00000034H
$LN5@MakeItem:

; 230  : 						}
; 231  : 					}
; 232  : 				}

  00de4	e9 a2 fb ff ff	 jmp	 $LN7@MakeItem
$LN10@MakeItem:

; 233  : 			}
; 234  : 		}
; 235  : 	}

  00de9	e9 3e fb ff ff	 jmp	 $LN12@MakeItem
$LN11@MakeItem:

; 236  : 
; 237  : 	return bFindItem;

  00dee	8b 45 f8	 mov	 eax, DWORD PTR _bFindItem$[ebp]

; 238  : }

  00df1	5f		 pop	 edi
  00df2	5e		 pop	 esi
  00df3	5b		 pop	 ebx
  00df4	8b e5		 mov	 esp, ebp
  00df6	5d		 pop	 ebp
  00df7	c2 08 00	 ret	 8
?MakeItem@CSetItemMacro@@QAEHHPAD@Z ENDP		; CSetItemMacro::MakeItem
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_SetItemMacro@@YAXXZ
text$yc	SEGMENT
??__Eg_SetItemMacro@@YAXXZ PROC				; `dynamic initializer for 'g_SetItemMacro'', COMDAT

; 18   : CSetItemMacro g_SetItemMacro;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SetItemMacro@@3VCSetItemMacro@@A ; g_SetItemMacro
  0000e	e8 00 00 00 00	 call	 ??0CSetItemMacro@@QAE@XZ ; CSetItemMacro::CSetItemMacro
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_SetItemMacro@@YAXXZ ; `dynamic atexit destructor for 'g_SetItemMacro''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_SetItemMacro@@YAXXZ ENDP				; `dynamic initializer for 'g_SetItemMacro''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_SetItemMacro@@YAXXZ
text$yd	SEGMENT
??__Fg_SetItemMacro@@YAXXZ PROC				; `dynamic atexit destructor for 'g_SetItemMacro'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SetItemMacro@@3VCSetItemMacro@@A ; g_SetItemMacro
  0000e	e8 00 00 00 00	 call	 ??1CSetItemMacro@@QAE@XZ ; CSetItemMacro::~CSetItemMacro
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_SetItemMacro@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_SetItemMacro''
text$yd	ENDS
PUBLIC	?g_SetItemMacro@@3VCSetItemMacro@@A		; g_SetItemMacro
_BSS	SEGMENT
?g_SetItemMacro@@3VCSetItemMacro@@A DB 0bf38H DUP (?)	; g_SetItemMacro
_BSS	ENDS
CRT$XCU	SEGMENT
_g_SetItemMacro$initializer$ DD FLAT:??__Eg_SetItemMacro@@YAXXZ
CRT$XCU	ENDS
END
