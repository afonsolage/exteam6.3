; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ViewportSkillState.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CViewportSkillState@@6B@			; CViewportSkillState::`vftable'
PUBLIC	??0CViewportSkillState@@QAE@XZ			; CViewportSkillState::CViewportSkillState
PUBLIC	??_R4CViewportSkillState@@6B@			; CViewportSkillState::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCViewportSkillState@@@8			; CViewportSkillState `RTTI Type Descriptor'
PUBLIC	??_R3CViewportSkillState@@8			; CViewportSkillState::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CViewportSkillState@@8			; CViewportSkillState::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CViewportSkillState@@8		; CViewportSkillState::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECViewportSkillState@@UAEPAXI@Z:PROC		; CViewportSkillState::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CViewportSkillState@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\viewportskillstate.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CViewportSkillState@@8 DD FLAT:??_R0?AVCViewportSkillState@@@8 ; CViewportSkillState::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CViewportSkillState@@8
rdata$r	ENDS
;	COMDAT ??_R2CViewportSkillState@@8
rdata$r	SEGMENT
??_R2CViewportSkillState@@8 DD FLAT:??_R1A@?0A@EA@CViewportSkillState@@8 ; CViewportSkillState::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CViewportSkillState@@8
rdata$r	SEGMENT
??_R3CViewportSkillState@@8 DD 00H			; CViewportSkillState::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CViewportSkillState@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCViewportSkillState@@@8
_DATA	SEGMENT
??_R0?AVCViewportSkillState@@@8 DD FLAT:??_7type_info@@6B@ ; CViewportSkillState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCViewportSkillState@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CViewportSkillState@@6B@
rdata$r	SEGMENT
??_R4CViewportSkillState@@6B@ DD 00H			; CViewportSkillState::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCViewportSkillState@@@8
	DD	FLAT:??_R3CViewportSkillState@@8
rdata$r	ENDS
;	COMDAT ??_7CViewportSkillState@@6B@
CONST	SEGMENT
??_7CViewportSkillState@@6B@ DD FLAT:??_R4CViewportSkillState@@6B@ ; CViewportSkillState::`vftable'
	DD	FLAT:??_ECViewportSkillState@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CViewportSkillState@@QAE@XZ PROC			; CViewportSkillState::CViewportSkillState
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CViewportSkillState@@6B@

; 17   : 
; 18   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CViewportSkillState@@QAE@XZ ENDP			; CViewportSkillState::CViewportSkillState
_TEXT	ENDS
PUBLIC	??1CViewportSkillState@@UAE@XZ			; CViewportSkillState::~CViewportSkillState
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCViewportSkillState@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCViewportSkillState@@UAEPAXI@Z PROC			; CViewportSkillState::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CViewportSkillState@@UAE@XZ ; CViewportSkillState::~CViewportSkillState
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCViewportSkillState@@UAEPAXI@Z ENDP			; CViewportSkillState::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CViewportSkillState@@UAE@XZ PROC			; CViewportSkillState::~CViewportSkillState
; _this$ = ecx

; 21   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CViewportSkillState@@6B@

; 22   : 
; 23   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CViewportSkillState@@UAE@XZ ENDP			; CViewportSkillState::~CViewportSkillState
_TEXT	ENDS
PUBLIC	__real@3dcccccd
PUBLIC	__real@3fb99999a0000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@00000000
PUBLIC	__real@4059000000000000
PUBLIC	?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3fb99999a0000000
CONST	SEGMENT
__real@3fb99999a0000000 DQ 03fb99999a0000000r	; 0.1
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv293 = -84						; size = 8
tv257 = -80						; size = 4
tv70 = -80						; size = 4
_fPer$219155 = -12					; size = 4
_fAddLife$219154 = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_iValue$ = 16						; size = 4
?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z PROC ; CViewportSkillState::AddBuffEffect
; _this$ = ecx

; 26   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 54	 sub	 esp, 84			; 00000054H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	if(lpObj == NULL || btEffectType < 0)

  0004c	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  00050	74 08		 je	 SHORT $LN35@AddBuffEff
  00052	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00056	85 c0		 test	 eax, eax
  00058	7d 05		 jge	 SHORT $LN36@AddBuffEff
$LN35@AddBuffEff:

; 28   : 	{
; 29   : 		return;

  0005a	e9 48 08 00 00	 jmp	 $LN37@AddBuffEff
$LN36@AddBuffEff:

; 30   : 	}
; 31   : 
; 32   : 	if(lpObj->Connected < PLAYER_PLAYING)

  0005f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00062	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00066	7d 05		 jge	 SHORT $LN34@AddBuffEff

; 33   : 	{
; 34   : 		return;

  00068	e9 3a 08 00 00	 jmp	 $LN37@AddBuffEff
$LN34@AddBuffEff:

; 35   : 	}
; 36   : 
; 37   : //	switch(btEffectType)
; 38   : //	{
; 39   : //	case 1:
; 40   : //		{
; 41   : //			lpObj->m_AttackSpeed += iValue;
; 42   : //			lpObj->m_MagicSpeed += iValue;
; 43   : //		}
; 44   : //		break;
; 45   : //	case 3:
; 46   : //		{
; 47   : //			lpObj->m_Defense += iValue;
; 48   : //			lpObj->m_MagicDefense += iValue;
; 49   : //		}
; 50   : //		break;
; 51   : //	case 4:
; 52   : //		{
; 53   : //			lpObj->AddLife += iValue;
; 54   : //			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield));
; 55   : //			GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield);
; 56   : //		}
; 57   : //		break;
; 58   : //	case 5:
; 59   : //		{
; 60   : //			lpObj->AddMana += iValue;
; 61   : //			GCManaSend(lpObj->m_Index, (lpObj->MaxMana + lpObj->AddMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));
; 62   : //			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 63   : //		}
; 64   : //		break;
; 65   : //	case 21:
; 66   : //		{
; 67   : //			lpObj->m_iSoulBarrierDefense = iValue;
; 68   : //		}
; 69   : //		break;
; 70   : //	case 22:
; 71   : //		{
; 72   : //			lpObj->m_MagicDefense += iValue;
; 73   : //		}
; 74   : //		break;
; 75   : //	case 24:
; 76   : //		{
; 77   : //			lpObj->DamageReflect += iValue;
; 78   : //		}
; 79   : //		break;
; 80   : //	case 26:
; 81   : //		{
; 82   : //			lpObj->m_AttackRating -= iValue;
; 83   : //		}
; 84   : //		break;
; 85   : //	case 28:
; 86   : //		{
; 87   : //			lpObj->m_sSoulBarrierDuration = iValue;
; 88   : //		}
; 89   : //		break;
; 90   : //		//Season 4 add-on
; 91   : //	case 31: //good
; 92   : //		{
; 93   : //			lpObj->AddMana += (int)( (((float)(iValue) * (float)(lpObj->MaxMana))) / 100.0f);
; 94   : //#ifdef DEBUG_CODE
; 95   : //			LogAddC(2,"lpObj->AddMana: %d | lpObj->Mana: %d",lpObj->AddMana,lpObj->Mana);
; 96   : //#endif
; 97   : //			GCManaSend(lpObj->m_Index, (lpObj->MaxMana + lpObj->AddMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));
; 98   : //			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 99   : //		}
; 100  : //		break;
; 101  : //	case 32: //good :)
; 102  : //		{
; 103  : //			float loc2 = 0; //loc2
; 104  : //
; 105  : //			float loc3 = (((float)(40.0f) - (float)(iValue))/100.0f); //good
; 106  : //
; 107  : //			loc3 = (loc3 > 0.1f)?loc3:0.1f; //good
; 108  : //			
; 109  : //			loc2 = loc3 * lpObj->MaxLife; //good
; 110  : //
; 111  : //			lpObj->AddLife -= (int)((float)(loc2)); //good
; 112  : //
; 113  : //			lpObj->Life = ( (float)(lpObj->Life) < ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) )?( (float)(lpObj->Life) ):( ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) ); //good
; 114  : //
; 115  : //			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield)); //good
; 116  : //			GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield); //good
; 117  : //		}
; 118  : //		break;
; 119  : //	case 33: //Wizardry Expansion ??
; 120  : //		{
; 121  : //			lpObj->m_MagicDamageMin += iValue;
; 122  : //			lpObj->m_MagicDamageMax += iValue;
; 123  : //		}
; 124  : //		break;
; 125  : //	case 57: //XMas Attack ??
; 126  : //		{
; 127  : //			lpObj->m_AttackDamageMaxLeft += iValue;
; 128  : //			lpObj->m_AttackDamageMinLeft += iValue;
; 129  : //			lpObj->m_AttackDamageMaxRight += iValue;
; 130  : //			lpObj->m_AttackDamageMinRight += iValue;
; 131  : //
; 132  : //			lpObj->m_MagicDamageMin += iValue;
; 133  : //			lpObj->m_MagicDamageMax += iValue;
; 134  : //
; 135  : //			lpObj->m_iSummonerBookSpellDamageMin += iValue;
; 136  : //			lpObj->m_iSummonerBookSpellDamageMax += iValue;
; 137  : //		}
; 138  : //		break;
; 139  : //	case 58: //XMas Defense??
; 140  : //		{
; 141  : //			lpObj->m_Defense += iValue;
; 142  : //		}
; 143  : //		break;
; 144  : //	case ADD_OPTION_LEVEL_BP:
; 145  : //		lpObj->AddBP += iValue * (lpObj->MLevel + lpObj->Level);
; 146  : //		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);
; 147  : //        GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 148  : //		break;
; 149  : //	case ADD_OPTION_LEVEL_SD:
; 150  : //		lpObj->iAddShield += iValue * (lpObj->MLevel + lpObj->Level);
; 151  : //		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);
; 152  : //        GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 153  : //		break;
; 154  : //	case ADD_OPTION_BP:
; 155  : //		lpObj->AddBP += iValue;
; 156  : //		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);
; 157  : //        GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 158  : //		break;
; 159  : //	case ADD_OPTION_SD:
; 160  : //		lpObj->iAddShield += iValue;
; 161  : //		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);
; 162  : //        GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 163  : //		break;
; 164  : //	case ADD_OPTION_IGNOREDEFENSE:
; 165  : //		lpObj->SetOpIgnoreDefense += iValue;
; 166  : //		break;
; 167  : //	case ADD_OPTION_SUCCESSFULBLOCKING:
; 168  : //		lpObj->m_SuccessfulBlocking += iValue;
; 169  : //		break;
; 170  : //	case SUB_OPTION_SUCCESSFULBLOCKING:
; 171  : //        lpObj->m_SuccessfulBlocking -= iValue;
; 172  : //        if ( lpObj->m_SuccessfulBlocking < 0 )
; 173  : //          lpObj->m_SuccessfulBlocking = 0;
; 174  : //        break;
; 175  : //	default:
; 176  : //		return;
; 177  : //	}
; 178  : 	switch( btEffectType )

  0006d	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00071	89 45 b0	 mov	 DWORD PTR tv70[ebp], eax
  00074	8b 4d b0	 mov	 ecx, DWORD PTR tv70[ebp]
  00077	83 e9 01	 sub	 ecx, 1
  0007a	89 4d b0	 mov	 DWORD PTR tv70[ebp], ecx
  0007d	83 7d b0 4a	 cmp	 DWORD PTR tv70[ebp], 74	; 0000004aH
  00081	0f 87 20 08 00
	00		 ja	 $LN1@AddBuffEff
  00087	8b 55 b0	 mov	 edx, DWORD PTR tv70[ebp]
  0008a	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN43@AddBuffEff[edx]
  00091	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN44@AddBuffEff[eax*4]
$LN31@AddBuffEff:

; 179  : 	{
; 180  : 	case ADD_OPTION_SPEED:
; 181  : 		lpObj->m_AttackSpeed += iValue;

  00098	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0009b	8b 88 8c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1164]
  000a1	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  000a4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000a7	89 8a 8c 04 00
	00		 mov	 DWORD PTR [edx+1164], ecx

; 182  : 		lpObj->m_MagicSpeed += iValue;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000b0	8b 88 90 04 00
	00		 mov	 ecx, DWORD PTR [eax+1168]
  000b6	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  000b9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000bc	89 8a 90 04 00
	00		 mov	 DWORD PTR [edx+1168], ecx

; 183  : 		break;

  000c2	e9 e0 07 00 00	 jmp	 $LN32@AddBuffEff
$LN30@AddBuffEff:

; 184  : 	case ADD_OPTION_DEFENSE:
; 185  : 		lpObj->m_Defense += iValue;

  000c7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000ca	8b 88 94 04 00
	00		 mov	 ecx, DWORD PTR [eax+1172]
  000d0	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  000d3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000d6	89 8a 94 04 00
	00		 mov	 DWORD PTR [edx+1172], ecx

; 186  : 		lpObj->m_MagicDefense += iValue;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000df	8b 88 98 04 00
	00		 mov	 ecx, DWORD PTR [eax+1176]
  000e5	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  000e8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000eb	89 8a 98 04 00
	00		 mov	 DWORD PTR [edx+1176], ecx

; 187  : 		break;

  000f1	e9 b1 07 00 00	 jmp	 $LN32@AddBuffEff
$LN29@AddBuffEff:

; 188  : 	case ADD_OPTION_LIFE:
; 189  : 		lpObj->AddLife += iValue;

  000f6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000f9	8b 88 4c 01 00
	00		 mov	 ecx, DWORD PTR [eax+332]
  000ff	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00102	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00105	89 8a 4c 01 00
	00		 mov	 DWORD PTR [edx+332], ecx

; 190  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  0010b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0010e	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  00114	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00117	03 8a 58 01 00
	00		 add	 ecx, DWORD PTR [edx+344]
  0011d	51		 push	 ecx
  0011e	6a 00		 push	 0
  00120	68 fe 00 00 00	 push	 254			; 000000feH
  00125	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00128	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  0012e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00131	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  00137	e8 00 00 00 00	 call	 __ftol2_sse
  0013c	50		 push	 eax
  0013d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00140	8b 02		 mov	 eax, DWORD PTR [edx]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00148	83 c4 14	 add	 esp, 20			; 00000014H

; 191  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFF, 0, lpObj->iShield);

  0014b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0014e	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00154	51		 push	 ecx
  00155	6a 00		 push	 0
  00157	68 ff 00 00 00	 push	 255			; 000000ffH
  0015c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0015f	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  00165	e8 00 00 00 00	 call	 __ftol2_sse
  0016a	50		 push	 eax
  0016b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0016e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00170	51		 push	 ecx
  00171	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00176	83 c4 14	 add	 esp, 20			; 00000014H

; 192  : 		break;

  00179	e9 29 07 00 00	 jmp	 $LN32@AddBuffEff
$LN28@AddBuffEff:

; 193  : 	case ADD_OPTION_MANA:
; 194  : 		lpObj->AddMana += iValue;

  0017e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00181	8b 88 50 01 00
	00		 mov	 ecx, DWORD PTR [eax+336]
  00187	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  0018a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0018d	89 8a 50 01 00
	00		 mov	 DWORD PTR [edx+336], ecx

; 195  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00193	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00196	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  0019c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0019f	03 8a 2c 01 00
	00		 add	 ecx, DWORD PTR [edx+300]
  001a5	51		 push	 ecx
  001a6	6a 00		 push	 0
  001a8	68 fe 00 00 00	 push	 254			; 000000feH
  001ad	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001b0	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  001b9	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  001bf	e8 00 00 00 00	 call	 __ftol2_sse
  001c4	50		 push	 eax
  001c5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  001c8	8b 02		 mov	 eax, DWORD PTR [edx]
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  001d0	83 c4 14	 add	 esp, 20			; 00000014H

; 196  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFF, 0, lpObj->BP);

  001d3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001d6	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  001dc	51		 push	 ecx
  001dd	6a 00		 push	 0
  001df	68 ff 00 00 00	 push	 255			; 000000ffH
  001e4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  001e7	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  001ed	e8 00 00 00 00	 call	 __ftol2_sse
  001f2	50		 push	 eax
  001f3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f8	51		 push	 ecx
  001f9	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  001fe	83 c4 14	 add	 esp, 20			; 00000014H

; 197  : 		break;

  00201	e9 a1 06 00 00	 jmp	 $LN32@AddBuffEff
$LN27@AddBuffEff:

; 198  : 	case ADD_OPTION_STRENGTH:
; 199  : 		lpObj->AddStrength += iValue;

  00206	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00209	0f bf 88 20 01
	00 00		 movsx	 ecx, WORD PTR [eax+288]
  00210	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00213	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00216	66 89 8a 20 01
	00 00		 mov	 WORD PTR [edx+288], cx

; 200  : 		break;

  0021d	e9 85 06 00 00	 jmp	 $LN32@AddBuffEff
$LN26@AddBuffEff:

; 201  : 	case ADD_OPTION_DEXTERITY:
; 202  : 		lpObj->AddDexterity += iValue;

  00222	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00225	0f bf 88 22 01
	00 00		 movsx	 ecx, WORD PTR [eax+290]
  0022c	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  0022f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00232	66 89 8a 22 01
	00 00		 mov	 WORD PTR [edx+290], cx

; 203  : 		break;

  00239	e9 69 06 00 00	 jmp	 $LN32@AddBuffEff
$LN25@AddBuffEff:

; 204  : 	case ADD_OPTION_VITALITY:
; 205  : 		lpObj->AddVitality += iValue;

  0023e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00241	0f bf 88 24 01
	00 00		 movsx	 ecx, WORD PTR [eax+292]
  00248	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  0024b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0024e	66 89 8a 24 01
	00 00		 mov	 WORD PTR [edx+292], cx

; 206  : 		break;

  00255	e9 4d 06 00 00	 jmp	 $LN32@AddBuffEff
$LN24@AddBuffEff:

; 207  : 	case ADD_OPTION_ENERGY:
; 208  : 		lpObj->AddEnergy += iValue;

  0025a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0025d	0f bf 88 26 01
	00 00		 movsx	 ecx, WORD PTR [eax+294]
  00264	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00267	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0026a	66 89 8a 26 01
	00 00		 mov	 WORD PTR [edx+294], cx

; 209  : 		break;

  00271	e9 31 06 00 00	 jmp	 $LN32@AddBuffEff
$LN23@AddBuffEff:

; 210  : 	case ADD_OPTION_LEADERSHIP:
; 211  : 		lpObj->AddLeadership += iValue;

  00276	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00279	0f b7 88 1a 01
	00 00		 movzx	 ecx, WORD PTR [eax+282]
  00280	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00283	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00286	66 89 8a 1a 01
	00 00		 mov	 WORD PTR [edx+282], cx

; 212  : 		break;

  0028d	e9 15 06 00 00	 jmp	 $LN32@AddBuffEff
$LN22@AddBuffEff:

; 213  : 	case ADD_OPTION_WIZARD_DEFENSE:
; 214  :         lpObj->m_iSoulBarrierDefense = iValue;

  00292	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00295	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  00298	89 88 e0 04 00
	00		 mov	 DWORD PTR [eax+1248], ecx

; 215  :         break;

  0029e	e9 04 06 00 00	 jmp	 $LN32@AddBuffEff
$LN21@AddBuffEff:

; 216  : 	case ADD_OPTION_MAGIC_DEFENSE:
; 217  : 		lpObj->m_MagicDefense += iValue;

  002a3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002a6	8b 88 98 04 00
	00		 mov	 ecx, DWORD PTR [eax+1176]
  002ac	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  002af	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  002b2	89 8a 98 04 00
	00		 mov	 DWORD PTR [edx+1176], ecx

; 218  : 		break;

  002b8	e9 ea 05 00 00	 jmp	 $LN32@AddBuffEff
$LN20@AddBuffEff:

; 219  : 	case ADD_OPTION_REFLECT:
; 220  : 		lpObj->DamageReflect += iValue;

  002bd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002c0	0f b6 88 71 01
	00 00		 movzx	 ecx, BYTE PTR [eax+369]
  002c7	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  002ca	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  002cd	88 8a 71 01 00
	00		 mov	 BYTE PTR [edx+369], cl

; 221  : 		break;

  002d3	e9 cf 05 00 00	 jmp	 $LN32@AddBuffEff
$LN19@AddBuffEff:

; 222  : 	case ADD_OPTION_ATTACK_RATE:
; 223  : 		lpObj->m_AttackRating -= iValue;

  002d8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002db	8b 88 88 04 00
	00		 mov	 ecx, DWORD PTR [eax+1160]
  002e1	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  002e4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  002e7	89 8a 88 04 00
	00		 mov	 DWORD PTR [edx+1160], ecx

; 224  : 		break;

  002ed	e9 b5 05 00 00	 jmp	 $LN32@AddBuffEff
$LN18@AddBuffEff:

; 225  : 	case ADD_OPTION_WIZARD_DEFENSE_DURATION:
; 226  : 		lpObj->m_sSoulBarrierDuration = iValue;

  002f2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002f5	66 8b 4d 10	 mov	 cx, WORD PTR _iValue$[ebp]
  002f9	66 89 88 e4 04
	00 00		 mov	 WORD PTR [eax+1252], cx

; 227  : 		break;

  00300	e9 a2 05 00 00	 jmp	 $LN32@AddBuffEff
$LN17@AddBuffEff:

; 228  : 	case ADD_OPTION_CRITICAL_DAMAGE:
; 229  : 		lpObj->m_CriticalDamage += iValue;

  00305	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00308	8b 88 bc 04 00
	00		 mov	 ecx, DWORD PTR [eax+1212]
  0030e	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00311	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00314	89 8a bc 04 00
	00		 mov	 DWORD PTR [edx+1212], ecx

; 230  : 		break;

  0031a	e9 88 05 00 00	 jmp	 $LN32@AddBuffEff
$LN16@AddBuffEff:

; 231  : 	case ADD_OPTION_EXCELLENT_DAMAGE:
; 232  : 		lpObj->m_ExcelentDamage += iValue;

  0031f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00322	8b 88 c0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1216]
  00328	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  0032b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0032e	89 8a c0 04 00
	00		 mov	 DWORD PTR [edx+1216], ecx

; 233  : 		break;

  00334	e9 6e 05 00 00	 jmp	 $LN32@AddBuffEff
$LN15@AddBuffEff:

; 234  : 	case ADD_OPTION_BERSERKMANA:
; 235  :         lpObj->AddMana += (int)(iValue * lpObj->MaxMana / 100.0);

  00339	db 45 10	 fild	 DWORD PTR _iValue$[ebp]
  0033c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0033f	d8 88 14 01 00
	00		 fmul	 DWORD PTR [eax+276]
  00345	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0034b	e8 00 00 00 00	 call	 __ftol2_sse
  00350	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00353	03 81 50 01 00
	00		 add	 eax, DWORD PTR [ecx+336]
  00359	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0035c	89 82 50 01 00
	00		 mov	 DWORD PTR [edx+336], eax

; 236  :         GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00362	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00365	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  0036b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0036e	03 8a 2c 01 00
	00		 add	 ecx, DWORD PTR [edx+300]
  00374	51		 push	 ecx
  00375	6a 00		 push	 0
  00377	68 fe 00 00 00	 push	 254			; 000000feH
  0037c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0037f	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  00385	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00388	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  0038e	e8 00 00 00 00	 call	 __ftol2_sse
  00393	50		 push	 eax
  00394	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00397	8b 02		 mov	 eax, DWORD PTR [edx]
  00399	50		 push	 eax
  0039a	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0039f	83 c4 14	 add	 esp, 20			; 00000014H

; 237  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  003a2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  003a5	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  003ab	51		 push	 ecx
  003ac	6a 00		 push	 0
  003ae	68 ff 00 00 00	 push	 255			; 000000ffH
  003b3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  003b6	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  003bc	e8 00 00 00 00	 call	 __ftol2_sse
  003c1	50		 push	 eax
  003c2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  003c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c7	51		 push	 ecx
  003c8	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  003cd	83 c4 14	 add	 esp, 20			; 00000014H

; 238  :         break;

  003d0	e9 d2 04 00 00	 jmp	 $LN32@AddBuffEff
$LN14@AddBuffEff:

; 239  : 	case ADD_OPTION_BERSERKLIFE:
; 240  : 		{
; 241  : 			float fAddLife = 0;

  003d5	d9 ee		 fldz
  003d7	d9 5d f8	 fstp	 DWORD PTR _fAddLife$219154[ebp]

; 242  : 			float fPer = (((float)(40.0f) - (float)(iValue))/100.0f);

  003da	db 45 10	 fild	 DWORD PTR _iValue$[ebp]
  003dd	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4044000000000000
  003e3	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  003e9	d9 5d f4	 fstp	 DWORD PTR _fPer$219155[ebp]

; 243  : 
; 244  : 			fPer = (fPer > 0.1f)?fPer:0.1f;

  003ec	d9 45 f4	 fld	 DWORD PTR _fPer$219155[ebp]
  003ef	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3fb99999a0000000
  003f5	df e0		 fnstsw	 ax
  003f7	f6 c4 41	 test	 ah, 65			; 00000041H
  003fa	75 08		 jne	 SHORT $LN39@AddBuffEff
  003fc	d9 45 f4	 fld	 DWORD PTR _fPer$219155[ebp]
  003ff	d9 5d b0	 fstp	 DWORD PTR tv257[ebp]
  00402	eb 09		 jmp	 SHORT $LN40@AddBuffEff
$LN39@AddBuffEff:
  00404	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3dcccccd
  0040a	d9 5d b0	 fstp	 DWORD PTR tv257[ebp]
$LN40@AddBuffEff:
  0040d	d9 45 b0	 fld	 DWORD PTR tv257[ebp]
  00410	d9 5d f4	 fstp	 DWORD PTR _fPer$219155[ebp]

; 245  : 			fAddLife = fPer * lpObj->MaxLife;

  00413	d9 45 f4	 fld	 DWORD PTR _fPer$219155[ebp]
  00416	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00419	d8 88 00 01 00
	00		 fmul	 DWORD PTR [eax+256]
  0041f	d9 5d f8	 fstp	 DWORD PTR _fAddLife$219154[ebp]

; 246  : 
; 247  : 			lpObj->AddLife -= (int)((float)(fAddLife));

  00422	d9 45 f8	 fld	 DWORD PTR _fAddLife$219154[ebp]
  00425	e8 00 00 00 00	 call	 __ftol2_sse
  0042a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0042d	8b 91 4c 01 00
	00		 mov	 edx, DWORD PTR [ecx+332]
  00433	2b d0		 sub	 edx, eax
  00435	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00438	89 90 4c 01 00
	00		 mov	 DWORD PTR [eax+332], edx

; 248  : 			lpObj->Life = ( (float)(lpObj->Life) < ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) )?( (float)(lpObj->Life) ):( ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) );

  0043e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00441	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  00447	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0044a	db 81 4c 01 00
	00		 fild	 DWORD PTR [ecx+332]
  00450	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00453	d8 82 00 01 00
	00		 fadd	 DWORD PTR [edx+256]
  00459	de d9		 fcompp
  0045b	df e0		 fnstsw	 ax
  0045d	f6 c4 41	 test	 ah, 65			; 00000041H
  00460	75 0e		 jne	 SHORT $LN41@AddBuffEff
  00462	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00465	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  0046b	dd 5d ac	 fstp	 QWORD PTR tv293[ebp]
  0046e	eb 15		 jmp	 SHORT $LN42@AddBuffEff
$LN41@AddBuffEff:
  00470	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00473	db 81 4c 01 00
	00		 fild	 DWORD PTR [ecx+332]
  00479	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0047c	d8 82 00 01 00
	00		 fadd	 DWORD PTR [edx+256]
  00482	dd 5d ac	 fstp	 QWORD PTR tv293[ebp]
$LN42@AddBuffEff:
  00485	dd 45 ac	 fld	 QWORD PTR tv293[ebp]
  00488	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0048b	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]

; 249  : 
; 250  : 			GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00491	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00494	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  0049a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0049d	03 8a 58 01 00
	00		 add	 ecx, DWORD PTR [edx+344]
  004a3	51		 push	 ecx
  004a4	6a 00		 push	 0
  004a6	68 fe 00 00 00	 push	 254			; 000000feH
  004ab	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004ae	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  004b4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  004b7	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  004bd	e8 00 00 00 00	 call	 __ftol2_sse
  004c2	50		 push	 eax
  004c3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  004c6	8b 02		 mov	 eax, DWORD PTR [edx]
  004c8	50		 push	 eax
  004c9	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  004ce	83 c4 14	 add	 esp, 20			; 00000014H

; 251  : 			GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  004d1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004d4	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  004da	51		 push	 ecx
  004db	6a 00		 push	 0
  004dd	68 ff 00 00 00	 push	 255			; 000000ffH
  004e2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  004e5	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  004eb	e8 00 00 00 00	 call	 __ftol2_sse
  004f0	50		 push	 eax
  004f1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004f6	51		 push	 ecx
  004f7	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  004fc	83 c4 14	 add	 esp, 20			; 00000014H

; 252  : 		}
; 253  : 		break;

  004ff	e9 a3 03 00 00	 jmp	 $LN32@AddBuffEff
$LN13@AddBuffEff:

; 254  : 	case ADD_OPTION_MAGICDAMAGEMIN:
; 255  : 		lpObj->m_MagicDamageMin += iValue;

  00504	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00507	8b 88 68 04 00
	00		 mov	 ecx, DWORD PTR [eax+1128]
  0050d	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00510	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00513	89 8a 68 04 00
	00		 mov	 DWORD PTR [edx+1128], ecx

; 256  : 		break;

  00519	e9 89 03 00 00	 jmp	 $LN32@AddBuffEff
$LN12@AddBuffEff:

; 257  : 	case ADD_OPTION_MAGICDAMAGEMAX:
; 258  : 		lpObj->m_MagicDamageMax += iValue;

  0051e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00521	8b 88 6c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1132]
  00527	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  0052a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0052d	89 8a 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], ecx

; 259  : 		break;

  00533	e9 6f 03 00 00	 jmp	 $LN32@AddBuffEff
$LN11@AddBuffEff:

; 260  : 	case ADD_OPTION_XMASATTACK:
; 261  : 		lpObj->m_AttackDamageMaxLeft += iValue;

  00538	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0053b	8b 88 78 04 00
	00		 mov	 ecx, DWORD PTR [eax+1144]
  00541	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00544	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00547	89 8a 78 04 00
	00		 mov	 DWORD PTR [edx+1144], ecx

; 262  : 		lpObj->m_AttackDamageMinLeft += iValue;

  0054d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00550	8b 88 7c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1148]
  00556	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00559	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0055c	89 8a 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], ecx

; 263  : 		lpObj->m_AttackDamageMaxRight += iValue;

  00562	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00565	8b 88 80 04 00
	00		 mov	 ecx, DWORD PTR [eax+1152]
  0056b	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  0056e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00571	89 8a 80 04 00
	00		 mov	 DWORD PTR [edx+1152], ecx

; 264  : 		lpObj->m_AttackDamageMinRight += iValue;

  00577	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0057a	8b 88 84 04 00
	00		 mov	 ecx, DWORD PTR [eax+1156]
  00580	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00583	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00586	89 8a 84 04 00
	00		 mov	 DWORD PTR [edx+1156], ecx

; 265  : 		lpObj->m_MagicDamageMin += iValue;

  0058c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0058f	8b 88 68 04 00
	00		 mov	 ecx, DWORD PTR [eax+1128]
  00595	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00598	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0059b	89 8a 68 04 00
	00		 mov	 DWORD PTR [edx+1128], ecx

; 266  : 		lpObj->m_MagicDamageMax += iValue;

  005a1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005a4	8b 88 6c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1132]
  005aa	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  005ad	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  005b0	89 8a 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], ecx

; 267  : 		lpObj->m_iSummonerBookSpellDamageMin += iValue;

  005b6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005b9	8b 88 a4 04 00
	00		 mov	 ecx, DWORD PTR [eax+1188]
  005bf	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  005c2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  005c5	89 8a a4 04 00
	00		 mov	 DWORD PTR [edx+1188], ecx

; 268  : 		lpObj->m_iSummonerBookSpellDamageMax += iValue;

  005cb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005ce	8b 88 a8 04 00
	00		 mov	 ecx, DWORD PTR [eax+1192]
  005d4	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  005d7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  005da	89 8a a8 04 00
	00		 mov	 DWORD PTR [edx+1192], ecx

; 269  : 		break;

  005e0	e9 c2 02 00 00	 jmp	 $LN32@AddBuffEff
$LN10@AddBuffEff:

; 270  : 	case ADD_OPTION_XMASDEFENSE:
; 271  : 		lpObj->m_Defense += iValue;

  005e5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005e8	8b 88 94 04 00
	00		 mov	 ecx, DWORD PTR [eax+1172]
  005ee	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  005f1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  005f4	89 8a 94 04 00
	00		 mov	 DWORD PTR [edx+1172], ecx

; 272  : 		break;

  005fa	e9 a8 02 00 00	 jmp	 $LN32@AddBuffEff
$LN9@AddBuffEff:

; 273  : 	case ADD_OPTION_LEVEL_BP:
; 274  : 		lpObj->AddBP += iValue * (lpObj->MLevel + lpObj->Level);

  005ff	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00602	0f bf 88 d0 00
	00 00		 movsx	 ecx, WORD PTR [eax+208]
  00609	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0060c	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  00613	03 c8		 add	 ecx, eax
  00615	0f af 4d 10	 imul	 ecx, DWORD PTR _iValue$[ebp]
  00619	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0061c	03 8a 30 01 00
	00		 add	 ecx, DWORD PTR [edx+304]
  00622	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00625	89 88 30 01 00
	00		 mov	 DWORD PTR [eax+304], ecx

; 275  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  0062b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0062e	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  00634	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00637	03 8a 2c 01 00
	00		 add	 ecx, DWORD PTR [edx+300]
  0063d	51		 push	 ecx
  0063e	6a 00		 push	 0
  00640	68 fe 00 00 00	 push	 254			; 000000feH
  00645	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00648	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  0064e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00651	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  00657	e8 00 00 00 00	 call	 __ftol2_sse
  0065c	50		 push	 eax
  0065d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00660	8b 02		 mov	 eax, DWORD PTR [edx]
  00662	50		 push	 eax
  00663	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00668	83 c4 14	 add	 esp, 20			; 00000014H

; 276  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  0066b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0066e	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  00674	51		 push	 ecx
  00675	6a 00		 push	 0
  00677	68 ff 00 00 00	 push	 255			; 000000ffH
  0067c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0067f	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  00685	e8 00 00 00 00	 call	 __ftol2_sse
  0068a	50		 push	 eax
  0068b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0068e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00690	51		 push	 ecx
  00691	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00696	83 c4 14	 add	 esp, 20			; 00000014H

; 277  : 		break;

  00699	e9 09 02 00 00	 jmp	 $LN32@AddBuffEff
$LN8@AddBuffEff:

; 278  : 	case ADD_OPTION_LEVEL_SD:
; 279  : 		lpObj->iAddShield += iValue * (lpObj->MLevel + lpObj->Level);

  0069e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006a1	0f bf 88 d0 00
	00 00		 movsx	 ecx, WORD PTR [eax+208]
  006a8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  006ab	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  006b2	03 c8		 add	 ecx, eax
  006b4	0f af 4d 10	 imul	 ecx, DWORD PTR _iValue$[ebp]
  006b8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  006bb	03 8a 5c 01 00
	00		 add	 ecx, DWORD PTR [edx+348]
  006c1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006c4	89 88 5c 01 00
	00		 mov	 DWORD PTR [eax+348], ecx

; 280  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  006ca	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006cd	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  006d3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  006d6	03 8a 58 01 00
	00		 add	 ecx, DWORD PTR [edx+344]
  006dc	51		 push	 ecx
  006dd	6a 00		 push	 0
  006df	68 fe 00 00 00	 push	 254			; 000000feH
  006e4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006e7	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  006ed	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  006f0	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  006f6	e8 00 00 00 00	 call	 __ftol2_sse
  006fb	50		 push	 eax
  006fc	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  006ff	8b 02		 mov	 eax, DWORD PTR [edx]
  00701	50		 push	 eax
  00702	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00707	83 c4 14	 add	 esp, 20			; 00000014H

; 281  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  0070a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0070d	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00713	51		 push	 ecx
  00714	6a 00		 push	 0
  00716	68 ff 00 00 00	 push	 255			; 000000ffH
  0071b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0071e	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  00724	e8 00 00 00 00	 call	 __ftol2_sse
  00729	50		 push	 eax
  0072a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0072d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0072f	51		 push	 ecx
  00730	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00735	83 c4 14	 add	 esp, 20			; 00000014H

; 282  : 		break;

  00738	e9 6a 01 00 00	 jmp	 $LN32@AddBuffEff
$LN7@AddBuffEff:

; 283  : 	case ADD_OPTION_BP:
; 284  : 		lpObj->AddBP += iValue;

  0073d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00740	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  00746	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00749	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0074c	89 8a 30 01 00
	00		 mov	 DWORD PTR [edx+304], ecx

; 285  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00752	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00755	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  0075b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0075e	03 8a 2c 01 00
	00		 add	 ecx, DWORD PTR [edx+300]
  00764	51		 push	 ecx
  00765	6a 00		 push	 0
  00767	68 fe 00 00 00	 push	 254			; 000000feH
  0076c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0076f	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  00775	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00778	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  0077e	e8 00 00 00 00	 call	 __ftol2_sse
  00783	50		 push	 eax
  00784	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00787	8b 02		 mov	 eax, DWORD PTR [edx]
  00789	50		 push	 eax
  0078a	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0078f	83 c4 14	 add	 esp, 20			; 00000014H

; 286  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  00792	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00795	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  0079b	51		 push	 ecx
  0079c	6a 00		 push	 0
  0079e	68 ff 00 00 00	 push	 255			; 000000ffH
  007a3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  007a6	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  007ac	e8 00 00 00 00	 call	 __ftol2_sse
  007b1	50		 push	 eax
  007b2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  007b7	51		 push	 ecx
  007b8	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  007bd	83 c4 14	 add	 esp, 20			; 00000014H

; 287  : 		break;

  007c0	e9 e2 00 00 00	 jmp	 $LN32@AddBuffEff
$LN6@AddBuffEff:

; 288  : 	case ADD_OPTION_SD:
; 289  : 		lpObj->iAddShield += iValue;

  007c5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007c8	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  007ce	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  007d1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  007d4	89 8a 5c 01 00
	00		 mov	 DWORD PTR [edx+348], ecx

; 290  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  007da	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007dd	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  007e3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  007e6	03 8a 58 01 00
	00		 add	 ecx, DWORD PTR [edx+344]
  007ec	51		 push	 ecx
  007ed	6a 00		 push	 0
  007ef	68 fe 00 00 00	 push	 254			; 000000feH
  007f4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007f7	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  007fd	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00800	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  00806	e8 00 00 00 00	 call	 __ftol2_sse
  0080b	50		 push	 eax
  0080c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0080f	8b 02		 mov	 eax, DWORD PTR [edx]
  00811	50		 push	 eax
  00812	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00817	83 c4 14	 add	 esp, 20			; 00000014H

; 291  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  0081a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0081d	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00823	51		 push	 ecx
  00824	6a 00		 push	 0
  00826	68 ff 00 00 00	 push	 255			; 000000ffH
  0082b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0082e	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  00834	e8 00 00 00 00	 call	 __ftol2_sse
  00839	50		 push	 eax
  0083a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0083d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0083f	51		 push	 ecx
  00840	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00845	83 c4 14	 add	 esp, 20			; 00000014H

; 292  : 		break;

  00848	eb 5d		 jmp	 SHORT $LN32@AddBuffEff
$LN5@AddBuffEff:

; 293  : 	case ADD_OPTION_IGNOREDEFENSE:
; 294  : 		lpObj->SetOpIgnoreDefense += iValue;

  0084a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0084d	0f b6 88 3e 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4414]
  00854	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00857	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0085a	88 8a 3e 11 00
	00		 mov	 BYTE PTR [edx+4414], cl

; 295  : 		break;

  00860	eb 45		 jmp	 SHORT $LN32@AddBuffEff
$LN4@AddBuffEff:

; 296  : 	case ADD_OPTION_SUCCESSFULBLOCKING:
; 297  : 		lpObj->m_SuccessfulBlocking += iValue;

  00862	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00865	8b 88 9c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1180]
  0086b	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  0086e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00871	89 8a 9c 04 00
	00		 mov	 DWORD PTR [edx+1180], ecx

; 298  : 		break;

  00877	eb 2e		 jmp	 SHORT $LN32@AddBuffEff
$LN3@AddBuffEff:

; 299  : 	case SUB_OPTION_SUCCESSFULBLOCKING:
; 300  :         lpObj->m_SuccessfulBlocking -= iValue;

  00879	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0087c	8b 88 9c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1180]
  00882	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00885	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00888	89 8a 9c 04 00
	00		 mov	 DWORD PTR [edx+1180], ecx

; 301  :         if ( lpObj->m_SuccessfulBlocking < 0 )

  0088e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00891	83 b8 9c 04 00
	00 00		 cmp	 DWORD PTR [eax+1180], 0
  00898	7d 0d		 jge	 SHORT $LN2@AddBuffEff

; 302  :           lpObj->m_SuccessfulBlocking = 0;

  0089a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0089d	c7 80 9c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1180], 0
$LN2@AddBuffEff:
$LN1@AddBuffEff:
$LN32@AddBuffEff:
$LN37@AddBuffEff:

; 303  :         break;
; 304  : 	default:
; 305  : 		return;
; 306  : 	}
; 307  : }

  008a7	5f		 pop	 edi
  008a8	5e		 pop	 esi
  008a9	5b		 pop	 ebx
  008aa	8b e5		 mov	 esp, ebp
  008ac	5d		 pop	 ebp
  008ad	c2 0c 00	 ret	 12			; 0000000cH
$LN44@AddBuffEff:
  008b0	00 00 00 00	 DD	 $LN31@AddBuffEff
  008b4	00 00 00 00	 DD	 $LN30@AddBuffEff
  008b8	00 00 00 00	 DD	 $LN29@AddBuffEff
  008bc	00 00 00 00	 DD	 $LN28@AddBuffEff
  008c0	00 00 00 00	 DD	 $LN27@AddBuffEff
  008c4	00 00 00 00	 DD	 $LN26@AddBuffEff
  008c8	00 00 00 00	 DD	 $LN25@AddBuffEff
  008cc	00 00 00 00	 DD	 $LN24@AddBuffEff
  008d0	00 00 00 00	 DD	 $LN23@AddBuffEff
  008d4	00 00 00 00	 DD	 $LN22@AddBuffEff
  008d8	00 00 00 00	 DD	 $LN21@AddBuffEff
  008dc	00 00 00 00	 DD	 $LN20@AddBuffEff
  008e0	00 00 00 00	 DD	 $LN19@AddBuffEff
  008e4	00 00 00 00	 DD	 $LN18@AddBuffEff
  008e8	00 00 00 00	 DD	 $LN15@AddBuffEff
  008ec	00 00 00 00	 DD	 $LN14@AddBuffEff
  008f0	00 00 00 00	 DD	 $LN13@AddBuffEff
  008f4	00 00 00 00	 DD	 $LN12@AddBuffEff
  008f8	00 00 00 00	 DD	 $LN17@AddBuffEff
  008fc	00 00 00 00	 DD	 $LN16@AddBuffEff
  00900	00 00 00 00	 DD	 $LN11@AddBuffEff
  00904	00 00 00 00	 DD	 $LN10@AddBuffEff
  00908	00 00 00 00	 DD	 $LN9@AddBuffEff
  0090c	00 00 00 00	 DD	 $LN8@AddBuffEff
  00910	00 00 00 00	 DD	 $LN6@AddBuffEff
  00914	00 00 00 00	 DD	 $LN7@AddBuffEff
  00918	00 00 00 00	 DD	 $LN5@AddBuffEff
  0091c	00 00 00 00	 DD	 $LN4@AddBuffEff
  00920	00 00 00 00	 DD	 $LN3@AddBuffEff
  00924	00 00 00 00	 DD	 $LN1@AddBuffEff
$LN43@AddBuffEff:
  00928	00		 DB	 0
  00929	1d		 DB	 29			; 0000001dH
  0092a	01		 DB	 1
  0092b	02		 DB	 2
  0092c	03		 DB	 3
  0092d	1d		 DB	 29			; 0000001dH
  0092e	1d		 DB	 29			; 0000001dH
  0092f	1d		 DB	 29			; 0000001dH
  00930	04		 DB	 4
  00931	05		 DB	 5
  00932	06		 DB	 6
  00933	07		 DB	 7
  00934	08		 DB	 8
  00935	1d		 DB	 29			; 0000001dH
  00936	1d		 DB	 29			; 0000001dH
  00937	1d		 DB	 29			; 0000001dH
  00938	1d		 DB	 29			; 0000001dH
  00939	1d		 DB	 29			; 0000001dH
  0093a	1d		 DB	 29			; 0000001dH
  0093b	1d		 DB	 29			; 0000001dH
  0093c	09		 DB	 9
  0093d	0a		 DB	 10			; 0000000aH
  0093e	1d		 DB	 29			; 0000001dH
  0093f	0b		 DB	 11			; 0000000bH
  00940	1d		 DB	 29			; 0000001dH
  00941	0c		 DB	 12			; 0000000cH
  00942	1d		 DB	 29			; 0000001dH
  00943	0d		 DB	 13			; 0000000dH
  00944	1d		 DB	 29			; 0000001dH
  00945	1d		 DB	 29			; 0000001dH
  00946	0e		 DB	 14			; 0000000eH
  00947	0f		 DB	 15			; 0000000fH
  00948	10		 DB	 16			; 00000010H
  00949	11		 DB	 17			; 00000011H
  0094a	1d		 DB	 29			; 0000001dH
  0094b	1d		 DB	 29			; 0000001dH
  0094c	1d		 DB	 29			; 0000001dH
  0094d	1d		 DB	 29			; 0000001dH
  0094e	1d		 DB	 29			; 0000001dH
  0094f	1d		 DB	 29			; 0000001dH
  00950	1d		 DB	 29			; 0000001dH
  00951	1d		 DB	 29			; 0000001dH
  00952	1d		 DB	 29			; 0000001dH
  00953	1d		 DB	 29			; 0000001dH
  00954	1d		 DB	 29			; 0000001dH
  00955	1d		 DB	 29			; 0000001dH
  00956	1d		 DB	 29			; 0000001dH
  00957	1d		 DB	 29			; 0000001dH
  00958	1d		 DB	 29			; 0000001dH
  00959	1d		 DB	 29			; 0000001dH
  0095a	1d		 DB	 29			; 0000001dH
  0095b	1d		 DB	 29			; 0000001dH
  0095c	1d		 DB	 29			; 0000001dH
  0095d	1d		 DB	 29			; 0000001dH
  0095e	12		 DB	 18			; 00000012H
  0095f	13		 DB	 19			; 00000013H
  00960	14		 DB	 20			; 00000014H
  00961	15		 DB	 21			; 00000015H
  00962	1d		 DB	 29			; 0000001dH
  00963	1d		 DB	 29			; 0000001dH
  00964	1d		 DB	 29			; 0000001dH
  00965	1d		 DB	 29			; 0000001dH
  00966	1d		 DB	 29			; 0000001dH
  00967	1d		 DB	 29			; 0000001dH
  00968	1d		 DB	 29			; 0000001dH
  00969	16		 DB	 22			; 00000016H
  0096a	17		 DB	 23			; 00000017H
  0096b	1d		 DB	 29			; 0000001dH
  0096c	1d		 DB	 29			; 0000001dH
  0096d	18		 DB	 24			; 00000018H
  0096e	19		 DB	 25			; 00000019H
  0096f	1a		 DB	 26			; 0000001aH
  00970	1d		 DB	 29			; 0000001dH
  00971	1b		 DB	 27			; 0000001bH
  00972	1c		 DB	 28			; 0000001cH
?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ENDP ; CViewportSkillState::AddBuffEffect
_TEXT	ENDS
PUBLIC	?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::RemoveBuffEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv319 = -84						; size = 8
tv248 = -84						; size = 8
tv283 = -80						; size = 4
tv70 = -80						; size = 4
_fPer$219230 = -12					; size = 4
_fAddLife$219229 = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_iValue$ = 16						; size = 4
?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z PROC ; CViewportSkillState::RemoveBuffEffect
; _this$ = ecx

; 310  : {

  00980	55		 push	 ebp
  00981	8b ec		 mov	 ebp, esp
  00983	83 ec 54	 sub	 esp, 84			; 00000054H
  00986	53		 push	 ebx
  00987	56		 push	 esi
  00988	57		 push	 edi
  00989	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 311  : 	if(lpObj == NULL || btEffectType < 0)

  0098c	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  00990	74 08		 je	 SHORT $LN36@RemoveBuff
  00992	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00996	85 c0		 test	 eax, eax
  00998	7d 05		 jge	 SHORT $LN37@RemoveBuff
$LN36@RemoveBuff:

; 312  : 	{
; 313  : 		return;

  0099a	e9 9d 08 00 00	 jmp	 $LN38@RemoveBuff
$LN37@RemoveBuff:

; 314  : 	}
; 315  : 
; 316  : 	if(lpObj->Connected < PLAYER_PLAYING)

  0099f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009a2	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  009a6	7d 05		 jge	 SHORT $LN35@RemoveBuff

; 317  : 	{
; 318  : 		return;

  009a8	e9 8f 08 00 00	 jmp	 $LN38@RemoveBuff
$LN35@RemoveBuff:

; 319  : 	}
; 320  : 
; 321  : //	switch(btEffectType)
; 322  : //	{
; 323  : //	case 1:
; 324  : //		{
; 325  : //			lpObj->m_AttackSpeed -= iValue;
; 326  : //			lpObj->m_MagicSpeed -= iValue;
; 327  : //		}
; 328  : //		break;
; 329  : //	case 3:
; 330  : //		{
; 331  : //			lpObj->m_Defense -= iValue;
; 332  : //			lpObj->m_MagicDefense -= iValue;
; 333  : //		}
; 334  : //		break;
; 335  : //	case 4:
; 336  : //		{
; 337  : //			lpObj->AddLife -= iValue;
; 338  : //			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield));
; 339  : //			GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield);
; 340  : //		}
; 341  : //		break;
; 342  : //	case 5:
; 343  : //		{
; 344  : //			lpObj->AddMana -= iValue;
; 345  : //			GCManaSend(lpObj->m_Index, (lpObj->MaxMana + lpObj->AddMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));
; 346  : //			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 347  : //		}
; 348  : //		break;
; 349  : //	case 21:
; 350  : //		{
; 351  : //			lpObj->m_iSoulBarrierDefense -= iValue;
; 352  : //		}
; 353  : //		break;
; 354  : //	case 22:
; 355  : //		{
; 356  : //			lpObj->m_MagicDefense -= iValue;
; 357  : //		}
; 358  : //		break;
; 359  : //	case 24:
; 360  : //		{
; 361  : //			lpObj->DamageReflect -= iValue;
; 362  : //		}
; 363  : //		break;
; 364  : //	case 26:
; 365  : //		{
; 366  : //			lpObj->m_AttackRating += iValue;
; 367  : //		}
; 368  : //		break;
; 369  : //	case 28:
; 370  : //		{
; 371  : //			lpObj->m_sSoulBarrierDuration = 0;
; 372  : //		}
; 373  : //		break;
; 374  : //		//Season 4 add-on
; 375  : //	case 31: //good
; 376  : //		{
; 377  : //			lpObj->AddMana -= (int)( (((iValue) * (lpObj->MaxMana))) / 100.0f);
; 378  : //			lpObj->Mana = ( (lpObj->Mana) < ( (lpObj->AddMana) + (lpObj->MaxMana) ) )?( (lpObj->Mana) ):( ( (lpObj->AddMana) + (lpObj->MaxMana) ) ); //good
; 379  : //#ifdef DEBUG_CODE
; 380  : //			LogAddC(2,"lpObj->AddMana: %d | lpObj->Mana: %d",lpObj->AddMana,lpObj->Mana);
; 381  : //#endif
; 382  : //			GCManaSend(lpObj->m_Index, (lpObj->MaxMana + lpObj->AddMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));
; 383  : //			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 384  : //		}
; 385  : //		break;
; 386  : //	case 32: //good :)
; 387  : //		{
; 388  : //			float loc2 = 0; //loc2
; 389  : //
; 390  : //			float loc3 = (((float)(40.0f) - (float)(iValue))/100.0f); //good
; 391  : //
; 392  : //			loc3 = (loc3 > 0.1f)?loc3:0.1f; //good
; 393  : //			
; 394  : //			loc2 = loc3 * lpObj->MaxLife; //good
; 395  : //
; 396  : //			lpObj->AddLife += (int)(loc2); //good
; 397  : //
; 398  : //			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield)); //good
; 399  : //			GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield); //good
; 400  : //		}
; 401  : //		break;
; 402  : //	case 33: //Wizardry Expansion ??
; 403  : //		{
; 404  : //			lpObj->m_MagicDamageMin -= iValue;
; 405  : //			lpObj->m_MagicDamageMax -= iValue;
; 406  : //		}
; 407  : //		break;
; 408  : //	case 57: //XMas Attack ??
; 409  : //		{
; 410  : //			lpObj->m_AttackDamageMaxLeft -= iValue;
; 411  : //			lpObj->m_AttackDamageMinLeft -= iValue;
; 412  : //			lpObj->m_AttackDamageMaxRight -= iValue;
; 413  : //			lpObj->m_AttackDamageMinRight -= iValue;
; 414  : //
; 415  : //			lpObj->m_MagicDamageMin -= iValue;
; 416  : //			lpObj->m_MagicDamageMax -= iValue;
; 417  : //
; 418  : //			lpObj->m_iSummonerBookSpellDamageMin -= iValue;
; 419  : //			lpObj->m_iSummonerBookSpellDamageMax -= iValue;
; 420  : //		}
; 421  : //		break;
; 422  : //	case 58: //XMas Defense??
; 423  : //		{
; 424  : //			lpObj->m_Defense -= iValue;
; 425  : //		}
; 426  : //		break;
; 427  : //	case ADD_OPTION_LEVEL_BP:
; 428  : //		lpObj->AddBP -= iValue * (lpObj->MLevel + lpObj->Level);
; 429  : //		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);
; 430  : //        GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 431  : //		break;
; 432  : //	case ADD_OPTION_LEVEL_SD:
; 433  : //		lpObj->iAddShield -= iValue * (lpObj->MLevel + lpObj->Level);
; 434  : //		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);
; 435  : //        GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 436  : //		break;
; 437  : //	case ADD_OPTION_BP:
; 438  : //		lpObj->AddBP -= iValue;
; 439  : //		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);
; 440  : //        GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 441  : //		break;
; 442  : //	case ADD_OPTION_SD:
; 443  : //		lpObj->iAddShield -= iValue;
; 444  : //		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);
; 445  : //        GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 446  : //		break;
; 447  : //	case ADD_OPTION_IGNOREDEFENSE:
; 448  : //		lpObj->SetOpIgnoreDefense -= iValue;
; 449  : //		break;
; 450  : //	case ADD_OPTION_SUCCESSFULBLOCKING:
; 451  : //		lpObj->m_SuccessfulBlocking -= iValue;
; 452  : //		break;
; 453  : //	case SUB_OPTION_SUCCESSFULBLOCKING:
; 454  : //        lpObj->m_SuccessfulBlocking += iValue;
; 455  : //        break;
; 456  : //	default:
; 457  : //		return;
; 458  : //	}
; 459  : 	switch( btEffectType )

  009ad	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  009b1	89 45 b0	 mov	 DWORD PTR tv70[ebp], eax
  009b4	8b 4d b0	 mov	 ecx, DWORD PTR tv70[ebp]
  009b7	83 e9 01	 sub	 ecx, 1
  009ba	89 4d b0	 mov	 DWORD PTR tv70[ebp], ecx
  009bd	83 7d b0 4a	 cmp	 DWORD PTR tv70[ebp], 74	; 0000004aH
  009c1	0f 87 75 08 00
	00		 ja	 $LN1@RemoveBuff
  009c7	8b 55 b0	 mov	 edx, DWORD PTR tv70[ebp]
  009ca	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN46@RemoveBuff[edx]
  009d1	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN47@RemoveBuff[eax*4]
$LN32@RemoveBuff:

; 460  : 	{
; 461  : 	case ADD_OPTION_SPEED:
; 462  : 		lpObj->m_AttackSpeed -= iValue;

  009d8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009db	8b 88 8c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1164]
  009e1	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  009e4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  009e7	89 8a 8c 04 00
	00		 mov	 DWORD PTR [edx+1164], ecx

; 463  : 		lpObj->m_MagicSpeed -= iValue;

  009ed	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009f0	8b 88 90 04 00
	00		 mov	 ecx, DWORD PTR [eax+1168]
  009f6	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  009f9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  009fc	89 8a 90 04 00
	00		 mov	 DWORD PTR [edx+1168], ecx

; 464  : 		break;

  00a02	e9 35 08 00 00	 jmp	 $LN33@RemoveBuff
$LN31@RemoveBuff:

; 465  : 	case ADD_OPTION_DEFENSE:
; 466  : 		lpObj->m_Defense -= iValue;

  00a07	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a0a	8b 88 94 04 00
	00		 mov	 ecx, DWORD PTR [eax+1172]
  00a10	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00a13	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00a16	89 8a 94 04 00
	00		 mov	 DWORD PTR [edx+1172], ecx

; 467  : 		lpObj->m_MagicDefense -= iValue;

  00a1c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a1f	8b 88 98 04 00
	00		 mov	 ecx, DWORD PTR [eax+1176]
  00a25	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00a28	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00a2b	89 8a 98 04 00
	00		 mov	 DWORD PTR [edx+1176], ecx

; 468  : 		break;

  00a31	e9 06 08 00 00	 jmp	 $LN33@RemoveBuff
$LN30@RemoveBuff:

; 469  : 	case ADD_OPTION_LIFE:
; 470  : #ifdef FIX_DEATH_HP_BAF
; 471  : 		if (lpObj->AddLife < iValue)

  00a36	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a39	8b 88 4c 01 00
	00		 mov	 ecx, DWORD PTR [eax+332]
  00a3f	3b 4d 10	 cmp	 ecx, DWORD PTR _iValue$[ebp]
  00a42	7d 02		 jge	 SHORT $LN29@RemoveBuff

; 472  : 		{
; 473  : 
; 474  : 		}
; 475  : 		else

  00a44	eb 15		 jmp	 SHORT $LN28@RemoveBuff
$LN29@RemoveBuff:

; 476  : 		{
; 477  : 			lpObj->AddLife -= iValue;

  00a46	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a49	8b 88 4c 01 00
	00		 mov	 ecx, DWORD PTR [eax+332]
  00a4f	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00a52	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00a55	89 8a 4c 01 00
	00		 mov	 DWORD PTR [edx+332], ecx
$LN28@RemoveBuff:

; 478  : 		}
; 479  : 
; 480  : #else
; 481  : 		lpObj->AddLife -= iValue;
; 482  : #endif
; 483  : 
; 484  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00a5b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a5e	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  00a64	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00a67	03 8a 58 01 00
	00		 add	 ecx, DWORD PTR [edx+344]
  00a6d	51		 push	 ecx
  00a6e	6a 00		 push	 0
  00a70	68 fe 00 00 00	 push	 254			; 000000feH
  00a75	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a78	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  00a7e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00a81	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  00a87	e8 00 00 00 00	 call	 __ftol2_sse
  00a8c	50		 push	 eax
  00a8d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00a90	8b 02		 mov	 eax, DWORD PTR [edx]
  00a92	50		 push	 eax
  00a93	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00a98	83 c4 14	 add	 esp, 20			; 00000014H

; 485  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  00a9b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a9e	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00aa4	51		 push	 ecx
  00aa5	6a 00		 push	 0
  00aa7	68 ff 00 00 00	 push	 255			; 000000ffH
  00aac	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00aaf	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  00ab5	e8 00 00 00 00	 call	 __ftol2_sse
  00aba	50		 push	 eax
  00abb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00abe	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ac0	51		 push	 ecx
  00ac1	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00ac6	83 c4 14	 add	 esp, 20			; 00000014H

; 486  : 		break;

  00ac9	e9 6e 07 00 00	 jmp	 $LN33@RemoveBuff
$LN27@RemoveBuff:

; 487  : 	case ADD_OPTION_MANA:
; 488  : 		lpObj->AddMana -= iValue;

  00ace	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ad1	8b 88 50 01 00
	00		 mov	 ecx, DWORD PTR [eax+336]
  00ad7	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00ada	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00add	89 8a 50 01 00
	00		 mov	 DWORD PTR [edx+336], ecx

; 489  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00ae3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ae6	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  00aec	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00aef	03 8a 2c 01 00
	00		 add	 ecx, DWORD PTR [edx+300]
  00af5	51		 push	 ecx
  00af6	6a 00		 push	 0
  00af8	68 fe 00 00 00	 push	 254			; 000000feH
  00afd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b00	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  00b06	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00b09	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  00b0f	e8 00 00 00 00	 call	 __ftol2_sse
  00b14	50		 push	 eax
  00b15	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00b18	8b 02		 mov	 eax, DWORD PTR [edx]
  00b1a	50		 push	 eax
  00b1b	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00b20	83 c4 14	 add	 esp, 20			; 00000014H

; 490  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  00b23	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b26	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  00b2c	51		 push	 ecx
  00b2d	6a 00		 push	 0
  00b2f	68 ff 00 00 00	 push	 255			; 000000ffH
  00b34	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00b37	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  00b3d	e8 00 00 00 00	 call	 __ftol2_sse
  00b42	50		 push	 eax
  00b43	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b46	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b48	51		 push	 ecx
  00b49	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00b4e	83 c4 14	 add	 esp, 20			; 00000014H

; 491  : 		break;

  00b51	e9 e6 06 00 00	 jmp	 $LN33@RemoveBuff
$LN26@RemoveBuff:

; 492  : 	case ADD_OPTION_STRENGTH:
; 493  : 		lpObj->AddStrength -= iValue;

  00b56	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b59	0f bf 88 20 01
	00 00		 movsx	 ecx, WORD PTR [eax+288]
  00b60	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00b63	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00b66	66 89 8a 20 01
	00 00		 mov	 WORD PTR [edx+288], cx

; 494  : 		break;

  00b6d	e9 ca 06 00 00	 jmp	 $LN33@RemoveBuff
$LN25@RemoveBuff:

; 495  : 	case ADD_OPTION_DEXTERITY:
; 496  : 		lpObj->AddDexterity -= iValue;

  00b72	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b75	0f bf 88 22 01
	00 00		 movsx	 ecx, WORD PTR [eax+290]
  00b7c	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00b7f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00b82	66 89 8a 22 01
	00 00		 mov	 WORD PTR [edx+290], cx

; 497  : 		break;

  00b89	e9 ae 06 00 00	 jmp	 $LN33@RemoveBuff
$LN24@RemoveBuff:

; 498  : 	case ADD_OPTION_VITALITY:
; 499  : 		lpObj->AddVitality -= iValue;

  00b8e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b91	0f bf 88 24 01
	00 00		 movsx	 ecx, WORD PTR [eax+292]
  00b98	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00b9b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00b9e	66 89 8a 24 01
	00 00		 mov	 WORD PTR [edx+292], cx

; 500  : 		break;

  00ba5	e9 92 06 00 00	 jmp	 $LN33@RemoveBuff
$LN23@RemoveBuff:

; 501  : 	case ADD_OPTION_ENERGY:
; 502  : 		lpObj->AddEnergy -= iValue;

  00baa	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bad	0f bf 88 26 01
	00 00		 movsx	 ecx, WORD PTR [eax+294]
  00bb4	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00bb7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00bba	66 89 8a 26 01
	00 00		 mov	 WORD PTR [edx+294], cx

; 503  : 		break;

  00bc1	e9 76 06 00 00	 jmp	 $LN33@RemoveBuff
$LN22@RemoveBuff:

; 504  : 	case ADD_OPTION_LEADERSHIP:
; 505  : 		lpObj->AddLeadership -= iValue;

  00bc6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bc9	0f b7 88 1a 01
	00 00		 movzx	 ecx, WORD PTR [eax+282]
  00bd0	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00bd3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00bd6	66 89 8a 1a 01
	00 00		 mov	 WORD PTR [edx+282], cx

; 506  : 		break;

  00bdd	e9 5a 06 00 00	 jmp	 $LN33@RemoveBuff
$LN21@RemoveBuff:

; 507  : 	case ADD_OPTION_WIZARD_DEFENSE:
; 508  :         lpObj->m_iSoulBarrierDefense -= iValue;

  00be2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00be5	8b 88 e0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1248]
  00beb	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00bee	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00bf1	89 8a e0 04 00
	00		 mov	 DWORD PTR [edx+1248], ecx

; 509  :         break;

  00bf7	e9 40 06 00 00	 jmp	 $LN33@RemoveBuff
$LN20@RemoveBuff:

; 510  : 	case ADD_OPTION_MAGIC_DEFENSE:
; 511  : 		lpObj->m_MagicDefense -= iValue;

  00bfc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bff	8b 88 98 04 00
	00		 mov	 ecx, DWORD PTR [eax+1176]
  00c05	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00c08	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c0b	89 8a 98 04 00
	00		 mov	 DWORD PTR [edx+1176], ecx

; 512  : 		break;

  00c11	e9 26 06 00 00	 jmp	 $LN33@RemoveBuff
$LN19@RemoveBuff:

; 513  : 	case ADD_OPTION_REFLECT:
; 514  : 		lpObj->DamageReflect -= iValue;

  00c16	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c19	0f b6 88 71 01
	00 00		 movzx	 ecx, BYTE PTR [eax+369]
  00c20	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00c23	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c26	88 8a 71 01 00
	00		 mov	 BYTE PTR [edx+369], cl

; 515  : 		break;

  00c2c	e9 0b 06 00 00	 jmp	 $LN33@RemoveBuff
$LN18@RemoveBuff:

; 516  : 	case ADD_OPTION_ATTACK_RATE:
; 517  : 		lpObj->m_AttackRating += iValue;

  00c31	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c34	8b 88 88 04 00
	00		 mov	 ecx, DWORD PTR [eax+1160]
  00c3a	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  00c3d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c40	89 8a 88 04 00
	00		 mov	 DWORD PTR [edx+1160], ecx

; 518  : 		break;

  00c46	e9 f1 05 00 00	 jmp	 $LN33@RemoveBuff
$LN17@RemoveBuff:

; 519  : 	case ADD_OPTION_WIZARD_DEFENSE_DURATION:
; 520  : 		lpObj->m_sSoulBarrierDuration = 0;

  00c4b	33 c0		 xor	 eax, eax
  00c4d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00c50	66 89 81 e4 04
	00 00		 mov	 WORD PTR [ecx+1252], ax

; 521  : 		break;

  00c57	e9 e0 05 00 00	 jmp	 $LN33@RemoveBuff
$LN16@RemoveBuff:

; 522  : 	case ADD_OPTION_CRITICAL_DAMAGE:
; 523  : 		lpObj->m_CriticalDamage -= iValue;

  00c5c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c5f	8b 88 bc 04 00
	00		 mov	 ecx, DWORD PTR [eax+1212]
  00c65	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00c68	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c6b	89 8a bc 04 00
	00		 mov	 DWORD PTR [edx+1212], ecx

; 524  : 		break;

  00c71	e9 c6 05 00 00	 jmp	 $LN33@RemoveBuff
$LN15@RemoveBuff:

; 525  : 	case ADD_OPTION_EXCELLENT_DAMAGE:
; 526  : 		lpObj->m_ExcelentDamage -= iValue;

  00c76	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c79	8b 88 c0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1216]
  00c7f	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00c82	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c85	89 8a c0 04 00
	00		 mov	 DWORD PTR [edx+1216], ecx

; 527  : 		break;

  00c8b	e9 ac 05 00 00	 jmp	 $LN33@RemoveBuff
$LN14@RemoveBuff:

; 528  : 	case ADD_OPTION_BERSERKMANA:
; 529  :         lpObj->AddMana -= (int)(iValue * lpObj->MaxMana / 100.0);

  00c90	db 45 10	 fild	 DWORD PTR _iValue$[ebp]
  00c93	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c96	d8 88 14 01 00
	00		 fmul	 DWORD PTR [eax+276]
  00c9c	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00ca2	e8 00 00 00 00	 call	 __ftol2_sse
  00ca7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00caa	8b 91 50 01 00
	00		 mov	 edx, DWORD PTR [ecx+336]
  00cb0	2b d0		 sub	 edx, eax
  00cb2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cb5	89 90 50 01 00
	00		 mov	 DWORD PTR [eax+336], edx

; 530  : 		lpObj->Mana = ((lpObj->AddMana + lpObj->MaxMana) <= lpObj->Mana) ? lpObj->Mana : (lpObj->AddMana + lpObj->MaxMana);

  00cbb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cbe	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  00cc4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00cc7	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  00ccd	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00cd0	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  00cd6	de d9		 fcompp
  00cd8	df e0		 fnstsw	 ax
  00cda	f6 c4 01	 test	 ah, 1
  00cdd	75 0e		 jne	 SHORT $LN40@RemoveBuff
  00cdf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ce2	d9 80 10 01 00
	00		 fld	 DWORD PTR [eax+272]
  00ce8	dd 5d ac	 fstp	 QWORD PTR tv248[ebp]
  00ceb	eb 15		 jmp	 SHORT $LN41@RemoveBuff
$LN40@RemoveBuff:
  00ced	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00cf0	db 81 50 01 00
	00		 fild	 DWORD PTR [ecx+336]
  00cf6	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00cf9	d8 82 14 01 00
	00		 fadd	 DWORD PTR [edx+276]
  00cff	dd 5d ac	 fstp	 QWORD PTR tv248[ebp]
$LN41@RemoveBuff:
  00d02	dd 45 ac	 fld	 QWORD PTR tv248[ebp]
  00d05	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d08	d9 98 10 01 00
	00		 fstp	 DWORD PTR [eax+272]

; 531  : 
; 532  :         GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00d0e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d11	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  00d17	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00d1a	03 8a 2c 01 00
	00		 add	 ecx, DWORD PTR [edx+300]
  00d20	51		 push	 ecx
  00d21	6a 00		 push	 0
  00d23	68 fe 00 00 00	 push	 254			; 000000feH
  00d28	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d2b	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  00d31	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00d34	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  00d3a	e8 00 00 00 00	 call	 __ftol2_sse
  00d3f	50		 push	 eax
  00d40	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00d43	8b 02		 mov	 eax, DWORD PTR [edx]
  00d45	50		 push	 eax
  00d46	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00d4b	83 c4 14	 add	 esp, 20			; 00000014H

; 533  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  00d4e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d51	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  00d57	51		 push	 ecx
  00d58	6a 00		 push	 0
  00d5a	68 ff 00 00 00	 push	 255			; 000000ffH
  00d5f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00d62	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  00d68	e8 00 00 00 00	 call	 __ftol2_sse
  00d6d	50		 push	 eax
  00d6e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d71	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d73	51		 push	 ecx
  00d74	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00d79	83 c4 14	 add	 esp, 20			; 00000014H

; 534  :         break;

  00d7c	e9 bb 04 00 00	 jmp	 $LN33@RemoveBuff
$LN13@RemoveBuff:

; 535  : 	case ADD_OPTION_BERSERKLIFE:
; 536  : 		{
; 537  : 			float fAddLife = 0;

  00d81	d9 ee		 fldz
  00d83	d9 5d f8	 fstp	 DWORD PTR _fAddLife$219229[ebp]

; 538  : 			float fPer = (((float)(40.0f) - (float)(iValue))/100.0f);

  00d86	db 45 10	 fild	 DWORD PTR _iValue$[ebp]
  00d89	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4044000000000000
  00d8f	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00d95	d9 5d f4	 fstp	 DWORD PTR _fPer$219230[ebp]

; 539  : 
; 540  : 			fPer = (fPer > 0.1f)?fPer:0.1f;

  00d98	d9 45 f4	 fld	 DWORD PTR _fPer$219230[ebp]
  00d9b	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3fb99999a0000000
  00da1	df e0		 fnstsw	 ax
  00da3	f6 c4 41	 test	 ah, 65			; 00000041H
  00da6	75 08		 jne	 SHORT $LN42@RemoveBuff
  00da8	d9 45 f4	 fld	 DWORD PTR _fPer$219230[ebp]
  00dab	d9 5d b0	 fstp	 DWORD PTR tv283[ebp]
  00dae	eb 09		 jmp	 SHORT $LN43@RemoveBuff
$LN42@RemoveBuff:
  00db0	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3dcccccd
  00db6	d9 5d b0	 fstp	 DWORD PTR tv283[ebp]
$LN43@RemoveBuff:
  00db9	d9 45 b0	 fld	 DWORD PTR tv283[ebp]
  00dbc	d9 5d f4	 fstp	 DWORD PTR _fPer$219230[ebp]

; 541  : 			fAddLife = fPer * lpObj->MaxLife;

  00dbf	d9 45 f4	 fld	 DWORD PTR _fPer$219230[ebp]
  00dc2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00dc5	d8 88 00 01 00
	00		 fmul	 DWORD PTR [eax+256]
  00dcb	d9 5d f8	 fstp	 DWORD PTR _fAddLife$219229[ebp]

; 542  : 
; 543  : 			lpObj->AddLife += (int)((float)(fAddLife));

  00dce	d9 45 f8	 fld	 DWORD PTR _fAddLife$219229[ebp]
  00dd1	e8 00 00 00 00	 call	 __ftol2_sse
  00dd6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00dd9	03 81 4c 01 00
	00		 add	 eax, DWORD PTR [ecx+332]
  00ddf	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00de2	89 82 4c 01 00
	00		 mov	 DWORD PTR [edx+332], eax

; 544  : 			lpObj->Life = ( (float)(lpObj->Life) < ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) )?( (float)(lpObj->Life) ):( ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) );

  00de8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00deb	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  00df1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00df4	db 81 4c 01 00
	00		 fild	 DWORD PTR [ecx+332]
  00dfa	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00dfd	d8 82 00 01 00
	00		 fadd	 DWORD PTR [edx+256]
  00e03	de d9		 fcompp
  00e05	df e0		 fnstsw	 ax
  00e07	f6 c4 41	 test	 ah, 65			; 00000041H
  00e0a	75 0e		 jne	 SHORT $LN44@RemoveBuff
  00e0c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e0f	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  00e15	dd 5d ac	 fstp	 QWORD PTR tv319[ebp]
  00e18	eb 15		 jmp	 SHORT $LN45@RemoveBuff
$LN44@RemoveBuff:
  00e1a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00e1d	db 81 4c 01 00
	00		 fild	 DWORD PTR [ecx+332]
  00e23	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00e26	d8 82 00 01 00
	00		 fadd	 DWORD PTR [edx+256]
  00e2c	dd 5d ac	 fstp	 QWORD PTR tv319[ebp]
$LN45@RemoveBuff:
  00e2f	dd 45 ac	 fld	 QWORD PTR tv319[ebp]
  00e32	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e35	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]

; 545  : 
; 546  : 			GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00e3b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e3e	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  00e44	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00e47	03 8a 58 01 00
	00		 add	 ecx, DWORD PTR [edx+344]
  00e4d	51		 push	 ecx
  00e4e	6a 00		 push	 0
  00e50	68 fe 00 00 00	 push	 254			; 000000feH
  00e55	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e58	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  00e5e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00e61	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  00e67	e8 00 00 00 00	 call	 __ftol2_sse
  00e6c	50		 push	 eax
  00e6d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00e70	8b 02		 mov	 eax, DWORD PTR [edx]
  00e72	50		 push	 eax
  00e73	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00e78	83 c4 14	 add	 esp, 20			; 00000014H

; 547  : 			GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  00e7b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e7e	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00e84	51		 push	 ecx
  00e85	6a 00		 push	 0
  00e87	68 ff 00 00 00	 push	 255			; 000000ffH
  00e8c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00e8f	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  00e95	e8 00 00 00 00	 call	 __ftol2_sse
  00e9a	50		 push	 eax
  00e9b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e9e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ea0	51		 push	 ecx
  00ea1	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00ea6	83 c4 14	 add	 esp, 20			; 00000014H

; 548  : 		}
; 549  : 		break;

  00ea9	e9 8e 03 00 00	 jmp	 $LN33@RemoveBuff
$LN12@RemoveBuff:

; 550  : 	case ADD_OPTION_MAGICDAMAGEMIN:
; 551  : 		lpObj->m_MagicDamageMin -= iValue;

  00eae	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00eb1	8b 88 68 04 00
	00		 mov	 ecx, DWORD PTR [eax+1128]
  00eb7	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00eba	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00ebd	89 8a 68 04 00
	00		 mov	 DWORD PTR [edx+1128], ecx

; 552  : 		break;

  00ec3	e9 74 03 00 00	 jmp	 $LN33@RemoveBuff
$LN11@RemoveBuff:

; 553  : 	case ADD_OPTION_MAGICDAMAGEMAX:
; 554  : 		lpObj->m_MagicDamageMax -= iValue;

  00ec8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ecb	8b 88 6c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1132]
  00ed1	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00ed4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00ed7	89 8a 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], ecx

; 555  : 		//lpObj->m_MPSkillOpt.Ukn[43] = 0; --  need to update this when ML structs done
; 556  : 		break;

  00edd	e9 5a 03 00 00	 jmp	 $LN33@RemoveBuff
$LN10@RemoveBuff:

; 557  : 	case ADD_OPTION_XMASATTACK:
; 558  : 		lpObj->m_AttackDamageMaxLeft -= iValue;

  00ee2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ee5	8b 88 78 04 00
	00		 mov	 ecx, DWORD PTR [eax+1144]
  00eeb	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00eee	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00ef1	89 8a 78 04 00
	00		 mov	 DWORD PTR [edx+1144], ecx

; 559  : 		lpObj->m_AttackDamageMinLeft -= iValue;

  00ef7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00efa	8b 88 7c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1148]
  00f00	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00f03	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00f06	89 8a 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], ecx

; 560  : 		lpObj->m_AttackDamageMaxRight -= iValue;

  00f0c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f0f	8b 88 80 04 00
	00		 mov	 ecx, DWORD PTR [eax+1152]
  00f15	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00f18	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00f1b	89 8a 80 04 00
	00		 mov	 DWORD PTR [edx+1152], ecx

; 561  : 		lpObj->m_AttackDamageMinRight -= iValue;

  00f21	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f24	8b 88 84 04 00
	00		 mov	 ecx, DWORD PTR [eax+1156]
  00f2a	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00f2d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00f30	89 8a 84 04 00
	00		 mov	 DWORD PTR [edx+1156], ecx

; 562  : 		lpObj->m_MagicDamageMin -= iValue;

  00f36	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f39	8b 88 68 04 00
	00		 mov	 ecx, DWORD PTR [eax+1128]
  00f3f	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00f42	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00f45	89 8a 68 04 00
	00		 mov	 DWORD PTR [edx+1128], ecx

; 563  : 		lpObj->m_MagicDamageMax -= iValue;

  00f4b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f4e	8b 88 6c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1132]
  00f54	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00f57	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00f5a	89 8a 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], ecx

; 564  : 		lpObj->m_iSummonerBookSpellDamageMin -= iValue;

  00f60	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f63	8b 88 a4 04 00
	00		 mov	 ecx, DWORD PTR [eax+1188]
  00f69	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00f6c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00f6f	89 8a a4 04 00
	00		 mov	 DWORD PTR [edx+1188], ecx

; 565  : 		lpObj->m_iSummonerBookSpellDamageMax -= iValue;

  00f75	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f78	8b 88 a8 04 00
	00		 mov	 ecx, DWORD PTR [eax+1192]
  00f7e	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00f81	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00f84	89 8a a8 04 00
	00		 mov	 DWORD PTR [edx+1192], ecx

; 566  : 		break;

  00f8a	e9 ad 02 00 00	 jmp	 $LN33@RemoveBuff
$LN9@RemoveBuff:

; 567  : 	case ADD_OPTION_XMASDEFENSE:
; 568  : 		lpObj->m_Defense -= iValue;

  00f8f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f92	8b 88 94 04 00
	00		 mov	 ecx, DWORD PTR [eax+1172]
  00f98	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  00f9b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00f9e	89 8a 94 04 00
	00		 mov	 DWORD PTR [edx+1172], ecx

; 569  : 		break;

  00fa4	e9 93 02 00 00	 jmp	 $LN33@RemoveBuff
$LN8@RemoveBuff:

; 570  : 	case ADD_OPTION_LEVEL_BP:
; 571  : 		lpObj->AddBP -= iValue * (lpObj->MLevel + lpObj->Level);

  00fa9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00fac	0f bf 88 d0 00
	00 00		 movsx	 ecx, WORD PTR [eax+208]
  00fb3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00fb6	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  00fbd	03 c8		 add	 ecx, eax
  00fbf	0f af 4d 10	 imul	 ecx, DWORD PTR _iValue$[ebp]
  00fc3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00fc6	8b 82 30 01 00
	00		 mov	 eax, DWORD PTR [edx+304]
  00fcc	2b c1		 sub	 eax, ecx
  00fce	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00fd1	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax

; 572  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00fd7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00fda	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  00fe0	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00fe3	03 8a 2c 01 00
	00		 add	 ecx, DWORD PTR [edx+300]
  00fe9	51		 push	 ecx
  00fea	6a 00		 push	 0
  00fec	68 fe 00 00 00	 push	 254			; 000000feH
  00ff1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ff4	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  00ffa	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00ffd	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  01003	e8 00 00 00 00	 call	 __ftol2_sse
  01008	50		 push	 eax
  01009	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0100c	8b 02		 mov	 eax, DWORD PTR [edx]
  0100e	50		 push	 eax
  0100f	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  01014	83 c4 14	 add	 esp, 20			; 00000014H

; 573  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  01017	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0101a	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  01020	51		 push	 ecx
  01021	6a 00		 push	 0
  01023	68 ff 00 00 00	 push	 255			; 000000ffH
  01028	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0102b	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  01031	e8 00 00 00 00	 call	 __ftol2_sse
  01036	50		 push	 eax
  01037	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0103a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0103c	51		 push	 ecx
  0103d	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  01042	83 c4 14	 add	 esp, 20			; 00000014H

; 574  : 		break;

  01045	e9 f2 01 00 00	 jmp	 $LN33@RemoveBuff
$LN7@RemoveBuff:

; 575  : 	case ADD_OPTION_LEVEL_SD:
; 576  : 		lpObj->iAddShield -= iValue * (lpObj->MLevel + lpObj->Level);

  0104a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0104d	0f bf 88 d0 00
	00 00		 movsx	 ecx, WORD PTR [eax+208]
  01054	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01057	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  0105e	03 c8		 add	 ecx, eax
  01060	0f af 4d 10	 imul	 ecx, DWORD PTR _iValue$[ebp]
  01064	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01067	8b 82 5c 01 00
	00		 mov	 eax, DWORD PTR [edx+348]
  0106d	2b c1		 sub	 eax, ecx
  0106f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01072	89 81 5c 01 00
	00		 mov	 DWORD PTR [ecx+348], eax

; 577  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  01078	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0107b	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  01081	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01084	03 8a 58 01 00
	00		 add	 ecx, DWORD PTR [edx+344]
  0108a	51		 push	 ecx
  0108b	6a 00		 push	 0
  0108d	68 fe 00 00 00	 push	 254			; 000000feH
  01092	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01095	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  0109b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0109e	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  010a4	e8 00 00 00 00	 call	 __ftol2_sse
  010a9	50		 push	 eax
  010aa	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  010ad	8b 02		 mov	 eax, DWORD PTR [edx]
  010af	50		 push	 eax
  010b0	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  010b5	83 c4 14	 add	 esp, 20			; 00000014H

; 578  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  010b8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010bb	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  010c1	51		 push	 ecx
  010c2	6a 00		 push	 0
  010c4	68 ff 00 00 00	 push	 255			; 000000ffH
  010c9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  010cc	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  010d2	e8 00 00 00 00	 call	 __ftol2_sse
  010d7	50		 push	 eax
  010d8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010db	8b 08		 mov	 ecx, DWORD PTR [eax]
  010dd	51		 push	 ecx
  010de	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  010e3	83 c4 14	 add	 esp, 20			; 00000014H

; 579  : 		break;

  010e6	e9 51 01 00 00	 jmp	 $LN33@RemoveBuff
$LN6@RemoveBuff:

; 580  : 	case ADD_OPTION_BP:
; 581  : 		lpObj->AddBP -= iValue;

  010eb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010ee	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  010f4	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  010f7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  010fa	89 8a 30 01 00
	00		 mov	 DWORD PTR [edx+304], ecx

; 582  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  01100	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01103	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  01109	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0110c	03 8a 2c 01 00
	00		 add	 ecx, DWORD PTR [edx+300]
  01112	51		 push	 ecx
  01113	6a 00		 push	 0
  01115	68 fe 00 00 00	 push	 254			; 000000feH
  0111a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0111d	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  01123	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01126	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  0112c	e8 00 00 00 00	 call	 __ftol2_sse
  01131	50		 push	 eax
  01132	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01135	8b 02		 mov	 eax, DWORD PTR [edx]
  01137	50		 push	 eax
  01138	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0113d	83 c4 14	 add	 esp, 20			; 00000014H

; 583  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  01140	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01143	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  01149	51		 push	 ecx
  0114a	6a 00		 push	 0
  0114c	68 ff 00 00 00	 push	 255			; 000000ffH
  01151	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01154	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  0115a	e8 00 00 00 00	 call	 __ftol2_sse
  0115f	50		 push	 eax
  01160	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01163	8b 08		 mov	 ecx, DWORD PTR [eax]
  01165	51		 push	 ecx
  01166	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0116b	83 c4 14	 add	 esp, 20			; 00000014H

; 584  : 		break;

  0116e	e9 c9 00 00 00	 jmp	 $LN33@RemoveBuff
$LN5@RemoveBuff:

; 585  : 	case ADD_OPTION_SD:
; 586  : 		lpObj->iAddShield -= iValue;

  01173	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01176	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  0117c	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  0117f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01182	89 8a 5c 01 00
	00		 mov	 DWORD PTR [edx+348], ecx

; 587  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  01188	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0118b	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  01191	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01194	03 8a 58 01 00
	00		 add	 ecx, DWORD PTR [edx+344]
  0119a	51		 push	 ecx
  0119b	6a 00		 push	 0
  0119d	68 fe 00 00 00	 push	 254			; 000000feH
  011a2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011a5	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  011ab	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  011ae	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  011b4	e8 00 00 00 00	 call	 __ftol2_sse
  011b9	50		 push	 eax
  011ba	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  011bd	8b 02		 mov	 eax, DWORD PTR [edx]
  011bf	50		 push	 eax
  011c0	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  011c5	83 c4 14	 add	 esp, 20			; 00000014H

; 588  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  011c8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011cb	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  011d1	51		 push	 ecx
  011d2	6a 00		 push	 0
  011d4	68 ff 00 00 00	 push	 255			; 000000ffH
  011d9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  011dc	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  011e2	e8 00 00 00 00	 call	 __ftol2_sse
  011e7	50		 push	 eax
  011e8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  011ed	51		 push	 ecx
  011ee	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  011f3	83 c4 14	 add	 esp, 20			; 00000014H

; 589  : 		break;

  011f6	eb 44		 jmp	 SHORT $LN33@RemoveBuff
$LN4@RemoveBuff:

; 590  : 	case ADD_OPTION_IGNOREDEFENSE:
; 591  : 		lpObj->SetOpIgnoreDefense -= iValue;

  011f8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011fb	0f b6 88 3e 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4414]
  01202	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  01205	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01208	88 8a 3e 11 00
	00		 mov	 BYTE PTR [edx+4414], cl

; 592  : 		break;

  0120e	eb 2c		 jmp	 SHORT $LN33@RemoveBuff
$LN3@RemoveBuff:

; 593  : 	case ADD_OPTION_SUCCESSFULBLOCKING:
; 594  : 		lpObj->m_SuccessfulBlocking -= iValue;

  01210	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01213	8b 88 9c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1180]
  01219	2b 4d 10	 sub	 ecx, DWORD PTR _iValue$[ebp]
  0121c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0121f	89 8a 9c 04 00
	00		 mov	 DWORD PTR [edx+1180], ecx

; 595  : 		break;

  01225	eb 15		 jmp	 SHORT $LN33@RemoveBuff
$LN2@RemoveBuff:

; 596  : 	case SUB_OPTION_SUCCESSFULBLOCKING:
; 597  :         lpObj->m_SuccessfulBlocking += iValue;

  01227	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0122a	8b 88 9c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1180]
  01230	03 4d 10	 add	 ecx, DWORD PTR _iValue$[ebp]
  01233	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01236	89 8a 9c 04 00
	00		 mov	 DWORD PTR [edx+1180], ecx
$LN1@RemoveBuff:
$LN33@RemoveBuff:
$LN38@RemoveBuff:

; 598  :         break;
; 599  : 	default:
; 600  : 		return;
; 601  : 	}
; 602  : }

  0123c	5f		 pop	 edi
  0123d	5e		 pop	 esi
  0123e	5b		 pop	 ebx
  0123f	8b e5		 mov	 esp, ebp
  01241	5d		 pop	 ebp
  01242	c2 0c 00	 ret	 12			; 0000000cH
  01245	8d 49 00	 npad	 3
$LN47@RemoveBuff:
  01248	00 00 00 00	 DD	 $LN32@RemoveBuff
  0124c	00 00 00 00	 DD	 $LN31@RemoveBuff
  01250	00 00 00 00	 DD	 $LN30@RemoveBuff
  01254	00 00 00 00	 DD	 $LN27@RemoveBuff
  01258	00 00 00 00	 DD	 $LN26@RemoveBuff
  0125c	00 00 00 00	 DD	 $LN25@RemoveBuff
  01260	00 00 00 00	 DD	 $LN24@RemoveBuff
  01264	00 00 00 00	 DD	 $LN23@RemoveBuff
  01268	00 00 00 00	 DD	 $LN22@RemoveBuff
  0126c	00 00 00 00	 DD	 $LN21@RemoveBuff
  01270	00 00 00 00	 DD	 $LN20@RemoveBuff
  01274	00 00 00 00	 DD	 $LN19@RemoveBuff
  01278	00 00 00 00	 DD	 $LN18@RemoveBuff
  0127c	00 00 00 00	 DD	 $LN17@RemoveBuff
  01280	00 00 00 00	 DD	 $LN14@RemoveBuff
  01284	00 00 00 00	 DD	 $LN13@RemoveBuff
  01288	00 00 00 00	 DD	 $LN12@RemoveBuff
  0128c	00 00 00 00	 DD	 $LN11@RemoveBuff
  01290	00 00 00 00	 DD	 $LN16@RemoveBuff
  01294	00 00 00 00	 DD	 $LN15@RemoveBuff
  01298	00 00 00 00	 DD	 $LN10@RemoveBuff
  0129c	00 00 00 00	 DD	 $LN9@RemoveBuff
  012a0	00 00 00 00	 DD	 $LN8@RemoveBuff
  012a4	00 00 00 00	 DD	 $LN7@RemoveBuff
  012a8	00 00 00 00	 DD	 $LN5@RemoveBuff
  012ac	00 00 00 00	 DD	 $LN6@RemoveBuff
  012b0	00 00 00 00	 DD	 $LN4@RemoveBuff
  012b4	00 00 00 00	 DD	 $LN3@RemoveBuff
  012b8	00 00 00 00	 DD	 $LN2@RemoveBuff
  012bc	00 00 00 00	 DD	 $LN1@RemoveBuff
$LN46@RemoveBuff:
  012c0	00		 DB	 0
  012c1	1d		 DB	 29			; 0000001dH
  012c2	01		 DB	 1
  012c3	02		 DB	 2
  012c4	03		 DB	 3
  012c5	1d		 DB	 29			; 0000001dH
  012c6	1d		 DB	 29			; 0000001dH
  012c7	1d		 DB	 29			; 0000001dH
  012c8	04		 DB	 4
  012c9	05		 DB	 5
  012ca	06		 DB	 6
  012cb	07		 DB	 7
  012cc	08		 DB	 8
  012cd	1d		 DB	 29			; 0000001dH
  012ce	1d		 DB	 29			; 0000001dH
  012cf	1d		 DB	 29			; 0000001dH
  012d0	1d		 DB	 29			; 0000001dH
  012d1	1d		 DB	 29			; 0000001dH
  012d2	1d		 DB	 29			; 0000001dH
  012d3	1d		 DB	 29			; 0000001dH
  012d4	09		 DB	 9
  012d5	0a		 DB	 10			; 0000000aH
  012d6	1d		 DB	 29			; 0000001dH
  012d7	0b		 DB	 11			; 0000000bH
  012d8	1d		 DB	 29			; 0000001dH
  012d9	0c		 DB	 12			; 0000000cH
  012da	1d		 DB	 29			; 0000001dH
  012db	0d		 DB	 13			; 0000000dH
  012dc	1d		 DB	 29			; 0000001dH
  012dd	1d		 DB	 29			; 0000001dH
  012de	0e		 DB	 14			; 0000000eH
  012df	0f		 DB	 15			; 0000000fH
  012e0	10		 DB	 16			; 00000010H
  012e1	11		 DB	 17			; 00000011H
  012e2	1d		 DB	 29			; 0000001dH
  012e3	1d		 DB	 29			; 0000001dH
  012e4	1d		 DB	 29			; 0000001dH
  012e5	1d		 DB	 29			; 0000001dH
  012e6	1d		 DB	 29			; 0000001dH
  012e7	1d		 DB	 29			; 0000001dH
  012e8	1d		 DB	 29			; 0000001dH
  012e9	1d		 DB	 29			; 0000001dH
  012ea	1d		 DB	 29			; 0000001dH
  012eb	1d		 DB	 29			; 0000001dH
  012ec	1d		 DB	 29			; 0000001dH
  012ed	1d		 DB	 29			; 0000001dH
  012ee	1d		 DB	 29			; 0000001dH
  012ef	1d		 DB	 29			; 0000001dH
  012f0	1d		 DB	 29			; 0000001dH
  012f1	1d		 DB	 29			; 0000001dH
  012f2	1d		 DB	 29			; 0000001dH
  012f3	1d		 DB	 29			; 0000001dH
  012f4	1d		 DB	 29			; 0000001dH
  012f5	1d		 DB	 29			; 0000001dH
  012f6	12		 DB	 18			; 00000012H
  012f7	13		 DB	 19			; 00000013H
  012f8	14		 DB	 20			; 00000014H
  012f9	15		 DB	 21			; 00000015H
  012fa	1d		 DB	 29			; 0000001dH
  012fb	1d		 DB	 29			; 0000001dH
  012fc	1d		 DB	 29			; 0000001dH
  012fd	1d		 DB	 29			; 0000001dH
  012fe	1d		 DB	 29			; 0000001dH
  012ff	1d		 DB	 29			; 0000001dH
  01300	1d		 DB	 29			; 0000001dH
  01301	16		 DB	 22			; 00000016H
  01302	17		 DB	 23			; 00000017H
  01303	1d		 DB	 29			; 0000001dH
  01304	1d		 DB	 29			; 0000001dH
  01305	18		 DB	 24			; 00000018H
  01306	19		 DB	 25			; 00000019H
  01307	1a		 DB	 26			; 0000001aH
  01308	1d		 DB	 29			; 0000001dH
  01309	1b		 DB	 27			; 0000001bH
  0130a	1c		 DB	 28			; 0000001cH
?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ENDP ; CViewportSkillState::RemoveBuffEffect
_TEXT	ENDS
PUBLIC	?PoisonDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@E@Z ; CViewportSkillState::PoisonDamage
PUBLIC	?ReflectDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@H@Z ; CViewportSkillState::ReflectDamage
PUBLIC	?SetDamageType@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::SetDamageType
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_DamageType$ = 12					; size = 1
_iDamageValue$ = 16					; size = 4
?SetDamageType@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z PROC ; CViewportSkillState::SetDamageType
; _this$ = ecx

; 605  : {

  01310	55		 push	 ebp
  01311	8b ec		 mov	 ebp, esp
  01313	83 ec 48	 sub	 esp, 72			; 00000048H
  01316	53		 push	 ebx
  01317	56		 push	 esi
  01318	57		 push	 edi
  01319	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 606  : 	if(DamageType <= 0)

  0131c	0f b6 45 0c	 movzx	 eax, BYTE PTR _DamageType$[ebp]
  01320	85 c0		 test	 eax, eax
  01322	7f 02		 jg	 SHORT $LN5@SetDamageT

; 607  : 	{
; 608  : 		return;

  01324	eb 37		 jmp	 SHORT $LN6@SetDamageT
$LN5@SetDamageT:

; 609  : 	}
; 610  : 
; 611  : 	switch(DamageType)

  01326	8a 45 0c	 mov	 al, BYTE PTR _DamageType$[ebp]
  01329	88 45 b8	 mov	 BYTE PTR tv67[ebp], al
  0132c	80 7d b8 12	 cmp	 BYTE PTR tv67[ebp], 18	; 00000012H
  01330	74 08		 je	 SHORT $LN2@SetDamageT
  01332	80 7d b8 13	 cmp	 BYTE PTR tv67[ebp], 19	; 00000013H
  01336	74 14		 je	 SHORT $LN1@SetDamageT
  01338	eb 23		 jmp	 SHORT $LN6@SetDamageT
$LN2@SetDamageT:

; 612  : 	{
; 613  : 	case 18: //Reflect?
; 614  : 		this->ReflectDamage(lpObj, iDamageValue);

  0133a	8b 45 10	 mov	 eax, DWORD PTR _iDamageValue$[ebp]
  0133d	50		 push	 eax
  0133e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01341	51		 push	 ecx
  01342	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01345	e8 00 00 00 00	 call	 ?ReflectDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@H@Z ; CViewportSkillState::ReflectDamage

; 615  : 		break;

  0134a	eb 11		 jmp	 SHORT $LN6@SetDamageT
$LN1@SetDamageT:

; 616  : 	case 19: //Poison?
; 617  : 		this->PoisonDamage(lpObj, iDamageValue);

  0134c	0f b6 45 10	 movzx	 eax, BYTE PTR _iDamageValue$[ebp]
  01350	50		 push	 eax
  01351	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01354	51		 push	 ecx
  01355	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01358	e8 00 00 00 00	 call	 ?PoisonDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@E@Z ; CViewportSkillState::PoisonDamage
$LN6@SetDamageT:

; 618  : 		break;
; 619  : 	}
; 620  : }

  0135d	5f		 pop	 edi
  0135e	5e		 pop	 esi
  0135f	5b		 pop	 ebx
  01360	8b e5		 mov	 esp, ebp
  01362	5d		 pop	 ebp
  01363	c2 0c 00	 ret	 12			; 0000000cH
?SetDamageType@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ENDP ; CViewportSkillState::SetDamageType
_TEXT	ENDS
PUBLIC	__real@0000000000000000
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iShieldDamage$ = -12					; size = 4
_iDamage$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iDamageValue$ = 12					; size = 4
?ReflectDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CViewportSkillState::ReflectDamage
; _this$ = ecx

; 623  : {

  01370	55		 push	 ebp
  01371	8b ec		 mov	 ebp, esp
  01373	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01376	53		 push	 ebx
  01377	56		 push	 esi
  01378	57		 push	 edi
  01379	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 624  : 	int iDamage = 0;

  0137c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iDamage$[ebp], 0

; 625  : 	int iShieldDamage = 0;

  01383	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iShieldDamage$[ebp], 0

; 626  : 
; 627  : 	iDamage = iDamageValue;

  0138a	8b 45 0c	 mov	 eax, DWORD PTR _iDamageValue$[ebp]
  0138d	89 45 f8	 mov	 DWORD PTR _iDamage$[ebp], eax

; 628  : 	iShieldDamage = iDamage;

  01390	8b 45 f8	 mov	 eax, DWORD PTR _iDamage$[ebp]
  01393	89 45 f4	 mov	 DWORD PTR _iShieldDamage$[ebp], eax

; 629  : 
; 630  : 	if(lpObj->Live == false)

  01396	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01399	0f b6 48 6a	 movzx	 ecx, BYTE PTR [eax+106]
  0139d	85 c9		 test	 ecx, ecx
  0139f	75 05		 jne	 SHORT $LN7@ReflectDam

; 631  : 	{
; 632  : 		return;

  013a1	e9 3d 01 00 00	 jmp	 $LN8@ReflectDam
$LN7@ReflectDam:

; 633  : 	}
; 634  : 
; 635  : 	if(lpObj->lpAttackObj != 0 && lpObj->Type == OBJ_USER && lpObj->lpAttackObj->Type == OBJ_USER)

  013a6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013a9	83 b8 d4 03 00
	00 00		 cmp	 DWORD PTR [eax+980], 0
  013b0	0f 84 be 00 00
	00		 je	 $LN6@ReflectDam
  013b6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013b9	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  013bd	83 f9 01	 cmp	 ecx, 1
  013c0	0f 85 ae 00 00
	00		 jne	 $LN6@ReflectDam
  013c6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013c9	8b 88 d4 03 00
	00		 mov	 ecx, DWORD PTR [eax+980]
  013cf	0f b7 51 68	 movzx	 edx, WORD PTR [ecx+104]
  013d3	83 fa 01	 cmp	 edx, 1
  013d6	0f 85 98 00 00
	00		 jne	 $LN6@ReflectDam

; 636  : 	{
; 637  : 		iShieldDamage = 90 * iDamage / 100;

  013dc	8b 45 f8	 mov	 eax, DWORD PTR _iDamage$[ebp]
  013df	6b c0 5a	 imul	 eax, 90			; 0000005aH
  013e2	99		 cdq
  013e3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  013e8	f7 f9		 idiv	 ecx
  013ea	89 45 f4	 mov	 DWORD PTR _iShieldDamage$[ebp], eax

; 638  : 		iDamage -= iShieldDamage;

  013ed	8b 45 f8	 mov	 eax, DWORD PTR _iDamage$[ebp]
  013f0	2b 45 f4	 sub	 eax, DWORD PTR _iShieldDamage$[ebp]
  013f3	89 45 f8	 mov	 DWORD PTR _iDamage$[ebp], eax

; 639  : 
; 640  : 		if(lpObj->iShield-iShieldDamage > 0) //Shield Damage

  013f6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013f9	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  013ff	2b 4d f4	 sub	 ecx, DWORD PTR _iShieldDamage$[ebp]
  01402	85 c9		 test	 ecx, ecx
  01404	7e 2c		 jle	 SHORT $LN5@ReflectDam

; 641  : 		{
; 642  : 			lpObj->iShield -= iShieldDamage;

  01406	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01409	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  0140f	2b 4d f4	 sub	 ecx, DWORD PTR _iShieldDamage$[ebp]
  01412	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01415	89 8a 54 01 00
	00		 mov	 DWORD PTR [edx+340], ecx

; 643  : 			lpObj->Life -= iDamage;

  0141b	db 45 f8	 fild	 DWORD PTR _iDamage$[ebp]
  0141e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01421	d8 a8 fc 00 00
	00		 fsubr	 DWORD PTR [eax+252]
  01427	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0142a	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 644  : 		}
; 645  : 		else

  01430	eb 40		 jmp	 SHORT $LN4@ReflectDam
$LN5@ReflectDam:

; 646  : 		{
; 647  : 			iDamage += iShieldDamage - lpObj->iShield;

  01432	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01435	8b 4d f4	 mov	 ecx, DWORD PTR _iShieldDamage$[ebp]
  01438	2b 88 54 01 00
	00		 sub	 ecx, DWORD PTR [eax+340]
  0143e	03 4d f8	 add	 ecx, DWORD PTR _iDamage$[ebp]
  01441	89 4d f8	 mov	 DWORD PTR _iDamage$[ebp], ecx

; 648  : 			iShieldDamage = lpObj->iShield;

  01444	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01447	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  0144d	89 4d f4	 mov	 DWORD PTR _iShieldDamage$[ebp], ecx

; 649  : 			lpObj->Life -= iDamage;

  01450	db 45 f8	 fild	 DWORD PTR _iDamage$[ebp]
  01453	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01456	d8 a8 fc 00 00
	00		 fsubr	 DWORD PTR [eax+252]
  0145c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0145f	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 650  : 			lpObj->iShield = 0;

  01465	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01468	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+340], 0
$LN4@ReflectDam:

; 651  : 		}
; 652  : 	}
; 653  : 	else

  01472	eb 1c		 jmp	 SHORT $LN3@ReflectDam
$LN6@ReflectDam:

; 654  : 	{
; 655  : 		iShieldDamage = 0;

  01474	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iShieldDamage$[ebp], 0

; 656  : 		lpObj->Life -= iDamage;

  0147b	db 45 f8	 fild	 DWORD PTR _iDamage$[ebp]
  0147e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01481	d8 a8 fc 00 00
	00		 fsubr	 DWORD PTR [eax+252]
  01487	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0148a	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]
$LN3@ReflectDam:

; 657  : 	}
; 658  : 
; 659  : 	if(lpObj->Life < 0.0f)

  01490	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01493	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  01499	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0149f	df e0		 fnstsw	 ax
  014a1	f6 c4 05	 test	 ah, 5
  014a4	7a 0b		 jp	 SHORT $LN2@ReflectDam

; 660  : 	{
; 661  : 		lpObj->Life = 0.0f;

  014a6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014a9	d9 ee		 fldz
  014ab	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]
$LN2@ReflectDam:

; 662  : 	}
; 663  : 
; 664  : 	if(lpObj->lpAttackObj != 0)

  014b1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014b4	83 b8 d4 03 00
	00 00		 cmp	 DWORD PTR [eax+980], 0
  014bb	74 26		 je	 SHORT $LN1@ReflectDam

; 665  : 	{
; 666  : 		gObjLifeCheck(lpObj, lpObj->lpAttackObj, iDamage, 3, 0, 0, 0, iShieldDamage);

  014bd	8b 45 f4	 mov	 eax, DWORD PTR _iShieldDamage$[ebp]
  014c0	50		 push	 eax
  014c1	6a 00		 push	 0
  014c3	6a 00		 push	 0
  014c5	6a 00		 push	 0
  014c7	6a 03		 push	 3
  014c9	8b 4d f8	 mov	 ecx, DWORD PTR _iDamage$[ebp]
  014cc	51		 push	 ecx
  014cd	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  014d0	8b 82 d4 03 00
	00		 mov	 eax, DWORD PTR [edx+980]
  014d6	50		 push	 eax
  014d7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  014da	51		 push	 ecx
  014db	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  014e0	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@ReflectDam:
$LN8@ReflectDam:

; 667  : 	}
; 668  : }

  014e3	5f		 pop	 edi
  014e4	5e		 pop	 esi
  014e5	5b		 pop	 ebx
  014e6	8b e5		 mov	 esp, ebp
  014e8	5d		 pop	 ebp
  014e9	c2 08 00	 ret	 8
?ReflectDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CViewportSkillState::ReflectDamage
; Function compile flags: /Odtp /ZI
_loc4$ = -16						; size = 4
_iShieldDamage$ = -12					; size = 4
_iDamage$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btDamageValue$ = 12					; size = 1
?PoisonDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CViewportSkillState::PoisonDamage
; _this$ = ecx

; 671  : {

  014f0	55		 push	 ebp
  014f1	8b ec		 mov	 ebp, esp
  014f3	83 ec 50	 sub	 esp, 80			; 00000050H
  014f6	53		 push	 ebx
  014f7	56		 push	 esi
  014f8	57		 push	 edi
  014f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 672  : 	int iDamage = 0;

  014fc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iDamage$[ebp], 0

; 673  : 	int iShieldDamage = 0;

  01503	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iShieldDamage$[ebp], 0

; 674  : 
; 675  : 	int loc4 = btDamageValue; //useless

  0150a	0f b6 45 0c	 movzx	 eax, BYTE PTR _btDamageValue$[ebp]
  0150e	89 45 f0	 mov	 DWORD PTR _loc4$[ebp], eax

; 676  : 
; 677  : 	iDamage = (int)(loc4 * lpObj->Life / 100);

  01511	db 45 f0	 fild	 DWORD PTR _loc4$[ebp]
  01514	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01517	d8 88 fc 00 00
	00		 fmul	 DWORD PTR [eax+252]
  0151d	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01523	e8 00 00 00 00	 call	 __ftol2_sse
  01528	89 45 f8	 mov	 DWORD PTR _iDamage$[ebp], eax

; 678  : 
; 679  : 	iShieldDamage = iDamage;

  0152b	8b 45 f8	 mov	 eax, DWORD PTR _iDamage$[ebp]
  0152e	89 45 f4	 mov	 DWORD PTR _iShieldDamage$[ebp], eax

; 680  : 
; 681  : 	if(lpObj->lpAttackObj != 0 && lpObj->Type == OBJ_USER && lpObj->lpAttackObj->Type == OBJ_USER)

  01531	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01534	83 b8 d4 03 00
	00 00		 cmp	 DWORD PTR [eax+980], 0
  0153b	0f 84 8b 00 00
	00		 je	 $LN6@PoisonDama
  01541	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01544	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01548	83 f9 01	 cmp	 ecx, 1
  0154b	75 7f		 jne	 SHORT $LN6@PoisonDama
  0154d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01550	8b 88 d4 03 00
	00		 mov	 ecx, DWORD PTR [eax+980]
  01556	0f b7 51 68	 movzx	 edx, WORD PTR [ecx+104]
  0155a	83 fa 01	 cmp	 edx, 1
  0155d	75 6d		 jne	 SHORT $LN6@PoisonDama

; 682  : 	{
; 683  : 		if(lpObj->iShield-iShieldDamage > 0) //Shield Damage

  0155f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01562	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  01568	2b 4d f4	 sub	 ecx, DWORD PTR _iShieldDamage$[ebp]
  0156b	85 c9		 test	 ecx, ecx
  0156d	7e 1e		 jle	 SHORT $LN5@PoisonDama

; 684  : 		{
; 685  : 			lpObj->iShield -= iShieldDamage;

  0156f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01572	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  01578	2b 4d f4	 sub	 ecx, DWORD PTR _iShieldDamage$[ebp]
  0157b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0157e	89 8a 54 01 00
	00		 mov	 DWORD PTR [edx+340], ecx

; 686  : 			iDamage = 0;

  01584	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iDamage$[ebp], 0

; 687  : 		}
; 688  : 		else

  0158b	eb 3d		 jmp	 SHORT $LN4@PoisonDama
$LN5@PoisonDama:

; 689  : 		{
; 690  : 			iDamage = iShieldDamage - lpObj->iShield;

  0158d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01590	8b 4d f4	 mov	 ecx, DWORD PTR _iShieldDamage$[ebp]
  01593	2b 88 54 01 00
	00		 sub	 ecx, DWORD PTR [eax+340]
  01599	89 4d f8	 mov	 DWORD PTR _iDamage$[ebp], ecx

; 691  : 			iShieldDamage = lpObj->iShield;

  0159c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0159f	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  015a5	89 4d f4	 mov	 DWORD PTR _iShieldDamage$[ebp], ecx

; 692  : 			lpObj->Life -= iDamage;

  015a8	db 45 f8	 fild	 DWORD PTR _iDamage$[ebp]
  015ab	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015ae	d8 a8 fc 00 00
	00		 fsubr	 DWORD PTR [eax+252]
  015b4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  015b7	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 693  : 			lpObj->iShield = 0;

  015bd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015c0	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+340], 0
$LN4@PoisonDama:

; 694  : 		}
; 695  : 	}
; 696  : 	else

  015ca	eb 1c		 jmp	 SHORT $LN3@PoisonDama
$LN6@PoisonDama:

; 697  : 	{
; 698  : 		lpObj->Life -= iDamage;

  015cc	db 45 f8	 fild	 DWORD PTR _iDamage$[ebp]
  015cf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015d2	d8 a8 fc 00 00
	00		 fsubr	 DWORD PTR [eax+252]
  015d8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  015db	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 699  : 		iShieldDamage = 0;

  015e1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iShieldDamage$[ebp], 0
$LN3@PoisonDama:

; 700  : 	}
; 701  : 	
; 702  : 	if(lpObj->Life < 0.0f)

  015e8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015eb	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  015f1	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  015f7	df e0		 fnstsw	 ax
  015f9	f6 c4 05	 test	 ah, 5
  015fc	7a 0b		 jp	 SHORT $LN2@PoisonDama

; 703  : 	{
; 704  : 		lpObj->Life = 0.0f;

  015fe	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01601	d9 ee		 fldz
  01603	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]
$LN2@PoisonDama:

; 705  : 	}
; 706  : 
; 707  : 	if(lpObj->lpAttackObj != 0)

  01609	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0160c	83 b8 d4 03 00
	00 00		 cmp	 DWORD PTR [eax+980], 0
  01613	74 26		 je	 SHORT $LN1@PoisonDama

; 708  : 	{
; 709  : 		gObjLifeCheck(lpObj, lpObj->lpAttackObj, iDamage, 2, 0, 0, 1, iShieldDamage);

  01615	8b 45 f4	 mov	 eax, DWORD PTR _iShieldDamage$[ebp]
  01618	50		 push	 eax
  01619	6a 01		 push	 1
  0161b	6a 00		 push	 0
  0161d	6a 00		 push	 0
  0161f	6a 02		 push	 2
  01621	8b 4d f8	 mov	 ecx, DWORD PTR _iDamage$[ebp]
  01624	51		 push	 ecx
  01625	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01628	8b 82 d4 03 00
	00		 mov	 eax, DWORD PTR [edx+980]
  0162e	50		 push	 eax
  0162f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01632	51		 push	 ecx
  01633	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  01638	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@PoisonDama:

; 710  : 	}
; 711  : }

  0163b	5f		 pop	 edi
  0163c	5e		 pop	 esi
  0163d	5b		 pop	 ebx
  0163e	8b e5		 mov	 esp, ebp
  01640	5d		 pop	 ebp
  01641	c2 08 00	 ret	 8
?PoisonDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CViewportSkillState::PoisonDamage
_TEXT	ENDS
PUBLIC	?PrevBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ; CViewportSkillState::PrevBuffLastEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv130 = -80						; size = 4
tv77 = -80						; size = 4
_States$219311 = -12					; size = 4
_BuffCount$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?PrevBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CViewportSkillState::PrevBuffLastEffect
; _this$ = ecx

; 714  : {

  01650	55		 push	 ebp
  01651	8b ec		 mov	 ebp, esp
  01653	83 ec 50	 sub	 esp, 80			; 00000050H
  01656	53		 push	 ebx
  01657	56		 push	 esi
  01658	57		 push	 edi
  01659	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 715  : 	if(lpObj == 0)

  0165c	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  01660	75 05		 jne	 SHORT $LN13@PrevBuffLa

; 716  : 	{
; 717  : 		return;

  01662	e9 17 01 00 00	 jmp	 $LN14@PrevBuffLa
$LN13@PrevBuffLa:

; 718  : 	}
; 719  : 
; 720  : 	int BuffCount = 0;

  01667	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _BuffCount$[ebp], 0

; 721  : 
; 722  : 	for(int States = 0; States < MAX_STATE_COUNT; States++)

  0166e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _States$219311[ebp], 0
  01675	eb 09		 jmp	 SHORT $LN12@PrevBuffLa
$LN11@PrevBuffLa:
  01677	8b 45 f4	 mov	 eax, DWORD PTR _States$219311[ebp]
  0167a	83 c0 01	 add	 eax, 1
  0167d	89 45 f4	 mov	 DWORD PTR _States$219311[ebp], eax
$LN12@PrevBuffLa:
  01680	83 7d f4 10	 cmp	 DWORD PTR _States$219311[ebp], 16 ; 00000010H
  01684	0f 8d f4 00 00
	00		 jge	 $LN14@PrevBuffLa

; 723  : 	{
; 724  : 		if(lpObj->m_BuffEffectState[States].btBuffIndex == NULL)

  0168a	8b 45 f4	 mov	 eax, DWORD PTR _States$219311[ebp]
  0168d	6b c0 14	 imul	 eax, 20			; 00000014H
  01690	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01693	0f b6 94 01 28
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+552]
  0169b	85 d2		 test	 edx, edx
  0169d	75 02		 jne	 SHORT $LN9@PrevBuffLa

; 725  : 		{
; 726  : 			continue;

  0169f	eb d6		 jmp	 SHORT $LN11@PrevBuffLa
$LN9@PrevBuffLa:

; 727  : 		}
; 728  : 
; 729  : 		switch(lpObj->m_BuffEffectState[States].btEffectType1)

  016a1	8b 45 f4	 mov	 eax, DWORD PTR _States$219311[ebp]
  016a4	6b c0 14	 imul	 eax, 20			; 00000014H
  016a7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016aa	0f b6 94 01 2a
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+554]
  016b2	89 55 b0	 mov	 DWORD PTR tv77[ebp], edx
  016b5	8b 45 b0	 mov	 eax, DWORD PTR tv77[ebp]
  016b8	83 e8 04	 sub	 eax, 4
  016bb	89 45 b0	 mov	 DWORD PTR tv77[ebp], eax
  016be	83 7d b0 14	 cmp	 DWORD PTR tv77[ebp], 20	; 00000014H
  016c2	77 49		 ja	 SHORT $LN7@PrevBuffLa
  016c4	8b 4d b0	 mov	 ecx, DWORD PTR tv77[ebp]
  016c7	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN16@PrevBuffLa[ecx]
  016ce	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN18@PrevBuffLa[edx*4]
$LN6@PrevBuffLa:

; 730  : 		{
; 731  : 		case ADD_OPTION_LIFE:
; 732  : 		case ADD_OPTION_MANA:
; 733  : 		case ADD_OPTION_STRENGTH:
; 734  : 		case ADD_OPTION_DEXTERITY:
; 735  : 		case ADD_OPTION_VITALITY:
; 736  : 		case ADD_OPTION_ENERGY:
; 737  : 		case ADD_OPTION_LEADERSHIP:
; 738  : 		case ADD_OPTION_REFLECT:
; 739  : 			BuffCount++;

  016d5	8b 45 f8	 mov	 eax, DWORD PTR _BuffCount$[ebp]
  016d8	83 c0 01	 add	 eax, 1
  016db	89 45 f8	 mov	 DWORD PTR _BuffCount$[ebp], eax

; 740  : 			this->AddBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType1, lpObj->m_BuffEffectState[States].iValue1);

  016de	8b 45 f4	 mov	 eax, DWORD PTR _States$219311[ebp]
  016e1	6b c0 14	 imul	 eax, 20			; 00000014H
  016e4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016e7	8b 94 01 2c 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax+556]
  016ee	52		 push	 edx
  016ef	8b 45 f4	 mov	 eax, DWORD PTR _States$219311[ebp]
  016f2	6b c0 14	 imul	 eax, 20			; 00000014H
  016f5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016f8	0f b6 94 01 2a
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+554]
  01700	52		 push	 edx
  01701	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01704	50		 push	 eax
  01705	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01708	e8 00 00 00 00	 call	 ?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
$LN7@PrevBuffLa:

; 741  : 			break;
; 742  : 		default:
; 743  : 			break;
; 744  : 		}
; 745  : 
; 746  : 		switch(lpObj->m_BuffEffectState[States].btEffectType2)

  0170d	8b 45 f4	 mov	 eax, DWORD PTR _States$219311[ebp]
  01710	6b c0 14	 imul	 eax, 20			; 00000014H
  01713	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01716	0f b6 94 01 2b
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+555]
  0171e	89 55 b0	 mov	 DWORD PTR tv130[ebp], edx
  01721	8b 45 b0	 mov	 eax, DWORD PTR tv130[ebp]
  01724	83 e8 04	 sub	 eax, 4
  01727	89 45 b0	 mov	 DWORD PTR tv130[ebp], eax
  0172a	83 7d b0 14	 cmp	 DWORD PTR tv130[ebp], 20 ; 00000014H
  0172e	77 49		 ja	 SHORT $LN3@PrevBuffLa
  01730	8b 4d b0	 mov	 ecx, DWORD PTR tv130[ebp]
  01733	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN17@PrevBuffLa[ecx]
  0173a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN19@PrevBuffLa[edx*4]
$LN2@PrevBuffLa:

; 747  : 		{
; 748  : 		case ADD_OPTION_LIFE:
; 749  : 		case ADD_OPTION_MANA:
; 750  : 		case ADD_OPTION_STRENGTH:
; 751  : 		case ADD_OPTION_DEXTERITY:
; 752  : 		case ADD_OPTION_VITALITY:
; 753  : 		case ADD_OPTION_ENERGY:
; 754  : 		case ADD_OPTION_LEADERSHIP:
; 755  : 		case ADD_OPTION_REFLECT:
; 756  : 			BuffCount++;

  01741	8b 45 f8	 mov	 eax, DWORD PTR _BuffCount$[ebp]
  01744	83 c0 01	 add	 eax, 1
  01747	89 45 f8	 mov	 DWORD PTR _BuffCount$[ebp], eax

; 757  : 			this->AddBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType2, lpObj->m_BuffEffectState[States].iValue2);

  0174a	8b 45 f4	 mov	 eax, DWORD PTR _States$219311[ebp]
  0174d	6b c0 14	 imul	 eax, 20			; 00000014H
  01750	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01753	8b 94 01 30 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax+560]
  0175a	52		 push	 edx
  0175b	8b 45 f4	 mov	 eax, DWORD PTR _States$219311[ebp]
  0175e	6b c0 14	 imul	 eax, 20			; 00000014H
  01761	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01764	0f b6 94 01 2b
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+555]
  0176c	52		 push	 edx
  0176d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01770	50		 push	 eax
  01771	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01774	e8 00 00 00 00	 call	 ?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
$LN3@PrevBuffLa:

; 758  : 			break;
; 759  : 		default:
; 760  : 			break;
; 761  : 		}
; 762  : 	}

  01779	e9 f9 fe ff ff	 jmp	 $LN11@PrevBuffLa
$LN14@PrevBuffLa:

; 763  : }

  0177e	5f		 pop	 edi
  0177f	5e		 pop	 esi
  01780	5b		 pop	 ebx
  01781	8b e5		 mov	 esp, ebp
  01783	5d		 pop	 ebp
  01784	c2 04 00	 ret	 4
  01787	90		 npad	 1
$LN18@PrevBuffLa:
  01788	00 00 00 00	 DD	 $LN6@PrevBuffLa
  0178c	00 00 00 00	 DD	 $LN7@PrevBuffLa
$LN16@PrevBuffLa:
  01790	00		 DB	 0
  01791	00		 DB	 0
  01792	01		 DB	 1
  01793	01		 DB	 1
  01794	01		 DB	 1
  01795	00		 DB	 0
  01796	00		 DB	 0
  01797	00		 DB	 0
  01798	00		 DB	 0
  01799	00		 DB	 0
  0179a	01		 DB	 1
  0179b	01		 DB	 1
  0179c	01		 DB	 1
  0179d	01		 DB	 1
  0179e	01		 DB	 1
  0179f	01		 DB	 1
  017a0	01		 DB	 1
  017a1	01		 DB	 1
  017a2	01		 DB	 1
  017a3	01		 DB	 1
  017a4	00		 DB	 0
  017a5	8d 49 00	 npad	 3
$LN19@PrevBuffLa:
  017a8	00 00 00 00	 DD	 $LN2@PrevBuffLa
  017ac	00 00 00 00	 DD	 $LN3@PrevBuffLa
$LN17@PrevBuffLa:
  017b0	00		 DB	 0
  017b1	00		 DB	 0
  017b2	01		 DB	 1
  017b3	01		 DB	 1
  017b4	01		 DB	 1
  017b5	00		 DB	 0
  017b6	00		 DB	 0
  017b7	00		 DB	 0
  017b8	00		 DB	 0
  017b9	00		 DB	 0
  017ba	01		 DB	 1
  017bb	01		 DB	 1
  017bc	01		 DB	 1
  017bd	01		 DB	 1
  017be	01		 DB	 1
  017bf	01		 DB	 1
  017c0	01		 DB	 1
  017c1	01		 DB	 1
  017c2	01		 DB	 1
  017c3	01		 DB	 1
  017c4	00		 DB	 0
?PrevBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CViewportSkillState::PrevBuffLastEffect
_TEXT	ENDS
PUBLIC	?NextSetBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ; CViewportSkillState::NextSetBuffLastEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv130 = -80						; size = 4
tv77 = -80						; size = 4
_States$219334 = -12					; size = 4
_BuffCount$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?NextSetBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CViewportSkillState::NextSetBuffLastEffect
; _this$ = ecx

; 766  : {

  017d0	55		 push	 ebp
  017d1	8b ec		 mov	 ebp, esp
  017d3	83 ec 50	 sub	 esp, 80			; 00000050H
  017d6	53		 push	 ebx
  017d7	56		 push	 esi
  017d8	57		 push	 edi
  017d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 767  : 	if(lpObj == 0)

  017dc	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  017e0	75 05		 jne	 SHORT $LN13@NextSetBuf

; 768  : 	{
; 769  : 		return;

  017e2	e9 1b 01 00 00	 jmp	 $LN14@NextSetBuf
$LN13@NextSetBuf:

; 770  : 	}
; 771  : 
; 772  : 	int BuffCount = 0;

  017e7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _BuffCount$[ebp], 0

; 773  : 
; 774  : 	for(int States = 0; States < MAX_STATE_COUNT; States++)

  017ee	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _States$219334[ebp], 0
  017f5	eb 09		 jmp	 SHORT $LN12@NextSetBuf
$LN11@NextSetBuf:
  017f7	8b 45 f4	 mov	 eax, DWORD PTR _States$219334[ebp]
  017fa	83 c0 01	 add	 eax, 1
  017fd	89 45 f4	 mov	 DWORD PTR _States$219334[ebp], eax
$LN12@NextSetBuf:
  01800	83 7d f4 10	 cmp	 DWORD PTR _States$219334[ebp], 16 ; 00000010H
  01804	0f 8d f8 00 00
	00		 jge	 $LN14@NextSetBuf

; 775  : 	{
; 776  : 		if(lpObj->m_BuffEffectState[States].btBuffIndex == NULL)

  0180a	8b 45 f4	 mov	 eax, DWORD PTR _States$219334[ebp]
  0180d	6b c0 14	 imul	 eax, 20			; 00000014H
  01810	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01813	0f b6 94 01 28
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+552]
  0181b	85 d2		 test	 edx, edx
  0181d	75 02		 jne	 SHORT $LN9@NextSetBuf

; 777  : 		{
; 778  : 			continue;

  0181f	eb d6		 jmp	 SHORT $LN11@NextSetBuf
$LN9@NextSetBuf:

; 779  : 		}
; 780  : 
; 781  : 		switch(lpObj->m_BuffEffectState[States].btEffectType1)

  01821	8b 45 f4	 mov	 eax, DWORD PTR _States$219334[ebp]
  01824	6b c0 14	 imul	 eax, 20			; 00000014H
  01827	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0182a	0f b6 94 01 2a
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+554]
  01832	89 55 b0	 mov	 DWORD PTR tv77[ebp], edx
  01835	8b 45 b0	 mov	 eax, DWORD PTR tv77[ebp]
  01838	83 e8 04	 sub	 eax, 4
  0183b	89 45 b0	 mov	 DWORD PTR tv77[ebp], eax
  0183e	83 7d b0 14	 cmp	 DWORD PTR tv77[ebp], 20	; 00000014H
  01842	77 13		 ja	 SHORT $LN5@NextSetBuf
  01844	8b 4d b0	 mov	 ecx, DWORD PTR tv77[ebp]
  01847	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN16@NextSetBuf[ecx]
  0184e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN18@NextSetBuf[edx*4]
$LN6@NextSetBuf:

; 782  : 		{
; 783  : 		case ADD_OPTION_LIFE:
; 784  : 		case ADD_OPTION_MANA:
; 785  : 		case ADD_OPTION_STRENGTH:
; 786  : 		case ADD_OPTION_DEXTERITY:
; 787  : 		case ADD_OPTION_VITALITY:
; 788  : 		case ADD_OPTION_ENERGY:
; 789  : 		case ADD_OPTION_LEADERSHIP:
; 790  : 		case ADD_OPTION_REFLECT:
; 791  : 			break;

  01855	eb 38		 jmp	 SHORT $LN7@NextSetBuf
$LN5@NextSetBuf:

; 792  : 		default:
; 793  : 			BuffCount++;

  01857	8b 45 f8	 mov	 eax, DWORD PTR _BuffCount$[ebp]
  0185a	83 c0 01	 add	 eax, 1
  0185d	89 45 f8	 mov	 DWORD PTR _BuffCount$[ebp], eax

; 794  : 			this->AddBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType1, lpObj->m_BuffEffectState[States].iValue1);

  01860	8b 45 f4	 mov	 eax, DWORD PTR _States$219334[ebp]
  01863	6b c0 14	 imul	 eax, 20			; 00000014H
  01866	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01869	8b 94 01 2c 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax+556]
  01870	52		 push	 edx
  01871	8b 45 f4	 mov	 eax, DWORD PTR _States$219334[ebp]
  01874	6b c0 14	 imul	 eax, 20			; 00000014H
  01877	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0187a	0f b6 94 01 2a
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+554]
  01882	52		 push	 edx
  01883	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01886	50		 push	 eax
  01887	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0188a	e8 00 00 00 00	 call	 ?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
$LN7@NextSetBuf:

; 795  : 			break;
; 796  : 		}
; 797  : 
; 798  : 		switch(lpObj->m_BuffEffectState[States].btEffectType2)

  0188f	8b 45 f4	 mov	 eax, DWORD PTR _States$219334[ebp]
  01892	6b c0 14	 imul	 eax, 20			; 00000014H
  01895	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01898	0f b6 94 01 2b
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+555]
  018a0	89 55 b0	 mov	 DWORD PTR tv130[ebp], edx
  018a3	8b 45 b0	 mov	 eax, DWORD PTR tv130[ebp]
  018a6	83 e8 04	 sub	 eax, 4
  018a9	89 45 b0	 mov	 DWORD PTR tv130[ebp], eax
  018ac	83 7d b0 14	 cmp	 DWORD PTR tv130[ebp], 20 ; 00000014H
  018b0	77 13		 ja	 SHORT $LN1@NextSetBuf
  018b2	8b 4d b0	 mov	 ecx, DWORD PTR tv130[ebp]
  018b5	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN17@NextSetBuf[ecx]
  018bc	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN19@NextSetBuf[edx*4]
$LN2@NextSetBuf:

; 799  : 		{
; 800  : 		case ADD_OPTION_LIFE:
; 801  : 		case ADD_OPTION_MANA:
; 802  : 		case ADD_OPTION_STRENGTH:
; 803  : 		case ADD_OPTION_DEXTERITY:
; 804  : 		case ADD_OPTION_VITALITY:
; 805  : 		case ADD_OPTION_ENERGY:
; 806  : 		case ADD_OPTION_LEADERSHIP:
; 807  : 		case ADD_OPTION_REFLECT:
; 808  : 			break;

  018c3	eb 38		 jmp	 SHORT $LN3@NextSetBuf
$LN1@NextSetBuf:

; 809  : 		default:
; 810  : 			BuffCount++;

  018c5	8b 45 f8	 mov	 eax, DWORD PTR _BuffCount$[ebp]
  018c8	83 c0 01	 add	 eax, 1
  018cb	89 45 f8	 mov	 DWORD PTR _BuffCount$[ebp], eax

; 811  : 			this->AddBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType2, lpObj->m_BuffEffectState[States].iValue2);

  018ce	8b 45 f4	 mov	 eax, DWORD PTR _States$219334[ebp]
  018d1	6b c0 14	 imul	 eax, 20			; 00000014H
  018d4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  018d7	8b 94 01 30 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax+560]
  018de	52		 push	 edx
  018df	8b 45 f4	 mov	 eax, DWORD PTR _States$219334[ebp]
  018e2	6b c0 14	 imul	 eax, 20			; 00000014H
  018e5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  018e8	0f b6 94 01 2b
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+555]
  018f0	52		 push	 edx
  018f1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  018f4	50		 push	 eax
  018f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018f8	e8 00 00 00 00	 call	 ?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
$LN3@NextSetBuf:

; 812  : 			break;
; 813  : 		}
; 814  : 	}

  018fd	e9 f5 fe ff ff	 jmp	 $LN11@NextSetBuf
$LN14@NextSetBuf:

; 815  : }

  01902	5f		 pop	 edi
  01903	5e		 pop	 esi
  01904	5b		 pop	 ebx
  01905	8b e5		 mov	 esp, ebp
  01907	5d		 pop	 ebp
  01908	c2 04 00	 ret	 4
  0190b	90		 npad	 1
$LN18@NextSetBuf:
  0190c	00 00 00 00	 DD	 $LN6@NextSetBuf
  01910	00 00 00 00	 DD	 $LN5@NextSetBuf
$LN16@NextSetBuf:
  01914	00		 DB	 0
  01915	00		 DB	 0
  01916	01		 DB	 1
  01917	01		 DB	 1
  01918	01		 DB	 1
  01919	00		 DB	 0
  0191a	00		 DB	 0
  0191b	00		 DB	 0
  0191c	00		 DB	 0
  0191d	00		 DB	 0
  0191e	01		 DB	 1
  0191f	01		 DB	 1
  01920	01		 DB	 1
  01921	01		 DB	 1
  01922	01		 DB	 1
  01923	01		 DB	 1
  01924	01		 DB	 1
  01925	01		 DB	 1
  01926	01		 DB	 1
  01927	01		 DB	 1
  01928	00		 DB	 0
  01929	8d 49 00	 npad	 3
$LN19@NextSetBuf:
  0192c	00 00 00 00	 DD	 $LN2@NextSetBuf
  01930	00 00 00 00	 DD	 $LN1@NextSetBuf
$LN17@NextSetBuf:
  01934	00		 DB	 0
  01935	00		 DB	 0
  01936	01		 DB	 1
  01937	01		 DB	 1
  01938	01		 DB	 1
  01939	00		 DB	 0
  0193a	00		 DB	 0
  0193b	00		 DB	 0
  0193c	00		 DB	 0
  0193d	00		 DB	 0
  0193e	01		 DB	 1
  0193f	01		 DB	 1
  01940	01		 DB	 1
  01941	01		 DB	 1
  01942	01		 DB	 1
  01943	01		 DB	 1
  01944	01		 DB	 1
  01945	01		 DB	 1
  01946	01		 DB	 1
  01947	01		 DB	 1
  01948	00		 DB	 0
?NextSetBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CViewportSkillState::NextSetBuffLastEffect
_TEXT	ENDS
PUBLIC	?CalCharacterRemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ; CViewportSkillState::CalCharacterRemoveBuffEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_States$219355 = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?CalCharacterRemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CViewportSkillState::CalCharacterRemoveBuffEffect
; _this$ = ecx

; 818  : {

  01950	55		 push	 ebp
  01951	8b ec		 mov	 ebp, esp
  01953	83 ec 48	 sub	 esp, 72			; 00000048H
  01956	53		 push	 ebx
  01957	56		 push	 esi
  01958	57		 push	 edi
  01959	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 819  : 	for(int States = 0; States < MAX_STATE_COUNT; States++)

  0195c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _States$219355[ebp], 0
  01963	eb 09		 jmp	 SHORT $LN4@CalCharact
$LN3@CalCharact:
  01965	8b 45 f8	 mov	 eax, DWORD PTR _States$219355[ebp]
  01968	83 c0 01	 add	 eax, 1
  0196b	89 45 f8	 mov	 DWORD PTR _States$219355[ebp], eax
$LN4@CalCharact:
  0196e	83 7d f8 10	 cmp	 DWORD PTR _States$219355[ebp], 16 ; 00000010H
  01972	7d 7a		 jge	 SHORT $LN5@CalCharact

; 820  : 	{
; 821  : 		if(lpObj->m_BuffEffectState[States].btBuffIndex == NULL)

  01974	8b 45 f8	 mov	 eax, DWORD PTR _States$219355[ebp]
  01977	6b c0 14	 imul	 eax, 20			; 00000014H
  0197a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0197d	0f b6 94 01 28
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+552]
  01985	85 d2		 test	 edx, edx
  01987	75 02		 jne	 SHORT $LN1@CalCharact

; 822  : 		{
; 823  : 			continue;

  01989	eb da		 jmp	 SHORT $LN3@CalCharact
$LN1@CalCharact:

; 824  : 		}
; 825  : 
; 826  : 		this->RemoveBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType1, lpObj->m_BuffEffectState[States].iValue1);

  0198b	8b 45 f8	 mov	 eax, DWORD PTR _States$219355[ebp]
  0198e	6b c0 14	 imul	 eax, 20			; 00000014H
  01991	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01994	8b 94 01 2c 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax+556]
  0199b	52		 push	 edx
  0199c	8b 45 f8	 mov	 eax, DWORD PTR _States$219355[ebp]
  0199f	6b c0 14	 imul	 eax, 20			; 00000014H
  019a2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  019a5	0f b6 94 01 2a
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+554]
  019ad	52		 push	 edx
  019ae	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  019b1	50		 push	 eax
  019b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019b5	e8 00 00 00 00	 call	 ?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::RemoveBuffEffect

; 827  : 		this->RemoveBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType2, lpObj->m_BuffEffectState[States].iValue2);

  019ba	8b 45 f8	 mov	 eax, DWORD PTR _States$219355[ebp]
  019bd	6b c0 14	 imul	 eax, 20			; 00000014H
  019c0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  019c3	8b 94 01 30 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax+560]
  019ca	52		 push	 edx
  019cb	8b 45 f8	 mov	 eax, DWORD PTR _States$219355[ebp]
  019ce	6b c0 14	 imul	 eax, 20			; 00000014H
  019d1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  019d4	0f b6 94 01 2b
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax+555]
  019dc	52		 push	 edx
  019dd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  019e0	50		 push	 eax
  019e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019e4	e8 00 00 00 00	 call	 ?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::RemoveBuffEffect

; 828  : 	}

  019e9	e9 77 ff ff ff	 jmp	 $LN3@CalCharact
$LN5@CalCharact:

; 829  : }

  019ee	5f		 pop	 edi
  019ef	5e		 pop	 esi
  019f0	5b		 pop	 ebx
  019f1	8b e5		 mov	 esp, ebp
  019f3	5d		 pop	 ebp
  019f4	c2 04 00	 ret	 4
?CalCharacterRemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CViewportSkillState::CalCharacterRemoveBuffEffect
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_ViewportSkillState@@YAXXZ
text$yc	SEGMENT
??__Eg_ViewportSkillState@@YAXXZ PROC			; `dynamic initializer for 'g_ViewportSkillState'', COMDAT

; 13   : CViewportSkillState g_ViewportSkillState;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ViewportSkillState@@3VCViewportSkillState@@A ; g_ViewportSkillState
  0000e	e8 00 00 00 00	 call	 ??0CViewportSkillState@@QAE@XZ ; CViewportSkillState::CViewportSkillState
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_ViewportSkillState@@YAXXZ ; `dynamic atexit destructor for 'g_ViewportSkillState''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_ViewportSkillState@@YAXXZ ENDP			; `dynamic initializer for 'g_ViewportSkillState''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_ViewportSkillState@@YAXXZ
text$yd	SEGMENT
??__Fg_ViewportSkillState@@YAXXZ PROC			; `dynamic atexit destructor for 'g_ViewportSkillState'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ViewportSkillState@@3VCViewportSkillState@@A ; g_ViewportSkillState
  0000e	e8 00 00 00 00	 call	 ??1CViewportSkillState@@UAE@XZ ; CViewportSkillState::~CViewportSkillState
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_ViewportSkillState@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_ViewportSkillState''
text$yd	ENDS
PUBLIC	?g_ViewportSkillState@@3VCViewportSkillState@@A	; g_ViewportSkillState
_BSS	SEGMENT
?g_ViewportSkillState@@3VCViewportSkillState@@A DD 01H DUP (?) ; g_ViewportSkillState
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ViewportSkillState$initializer$ DD FLAT:??__Eg_ViewportSkillState@@YAXXZ
CRT$XCU	ENDS
END
