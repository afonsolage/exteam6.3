; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\PickUpItemInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CPickUpItemInfo@@QAE@XZ			; CPickUpItemInfo::CPickUpItemInfo
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\pickupiteminfo.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPickUpItemInfo@@QAE@XZ PROC				; CPickUpItemInfo::CPickUpItemInfo
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 13   : }

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CPickUpItemInfo@@QAE@XZ ENDP				; CPickUpItemInfo::CPickUpItemInfo
_TEXT	ENDS
PUBLIC	??1CPickUpItemInfo@@QAE@XZ			; CPickUpItemInfo::~CPickUpItemInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPickUpItemInfo@@QAE@XZ PROC				; CPickUpItemInfo::~CPickUpItemInfo
; _this$ = ecx

; 16   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CPickUpItemInfo@@QAE@XZ ENDP				; CPickUpItemInfo::~CPickUpItemInfo
_TEXT	ENDS
PUBLIC	?Init@CPickUpItemInfo@@QAEXXZ			; CPickUpItemInfo::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CPickUpItemInfo@@QAEXXZ PROC			; CPickUpItemInfo::Init
; _this$ = ecx

; 20   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?Init@CPickUpItemInfo@@QAEXXZ ENDP			; CPickUpItemInfo::Init
_TEXT	ENDS
PUBLIC	?Load@CPickUpItemInfo@@QAEXXZ			; CPickUpItemInfo::Load
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CPickUpItemInfo@@QAEXXZ PROC			; CPickUpItemInfo::Load
; _this$ = ecx

; 24   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	83 ec 44	 sub	 esp, 68			; 00000044H
  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 	this->Init();

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?Init@CPickUpItemInfo@@QAEXXZ ; CPickUpItemInfo::Init

; 26   : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?Load@CPickUpItemInfo@@QAEXXZ ENDP			; CPickUpItemInfo::Load
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
PUBLIC	__$ArrayPad$
PUBLIC	?InfoRecv@CPickUpItemInfo@@QAEXPAUPMSG_REQ_PICKUP_INFO@@H@Z ; CPickUpItemInfo::InfoRecv
EXTRN	?ItemByteConvert@@YAXPAEHEEEEEEEEEQAEEE@Z:PROC	; ItemByteConvert
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv255 = -120						; size = 4
tv253 = -116						; size = 4
tv93 = -112						; size = 4
tv80 = -112						; size = 4
tv69 = -112						; size = 4
tv250 = -110						; size = 2
_lpItem$ = -44						; size = 4
_map_num$ = -40						; size = 4
_item_num$ = -36					; size = 4
_pMsg$ = -32						; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?InfoRecv@CPickUpItemInfo@@QAEXPAUPMSG_REQ_PICKUP_INFO@@H@Z PROC ; CPickUpItemInfo::InfoRecv
; _this$ = ecx

; 29   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 78	 sub	 esp, 120		; 00000078H
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0008b	33 c5		 xor	 eax, ebp
  0008d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00090	53		 push	 ebx
  00091	56		 push	 esi
  00092	57		 push	 edi
  00093	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	if(!g_ExLicense.user.PickUpItemInfo)

  00096	0f b6 05 ed 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+237
  0009d	85 c0		 test	 eax, eax
  0009f	75 05		 jne	 SHORT $LN4@InfoRecv

; 31   : 	{
; 32   : 		return;

  000a1	e9 d1 01 00 00	 jmp	 $LN5@InfoRecv
$LN4@InfoRecv:

; 33   : 	}
; 34   : 
; 35   : 	if(!OBJMAX_RANGE(aIndex))

  000a6	83 7d 0c 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  000aa	7d 09		 jge	 SHORT $LN7@InfoRecv
  000ac	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  000b3	eb 0f		 jmp	 SHORT $LN8@InfoRecv
$LN7@InfoRecv:
  000b5	33 c0		 xor	 eax, eax
  000b7	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  000be	0f 9e c0	 setle	 al
  000c1	89 45 90	 mov	 DWORD PTR tv69[ebp], eax
$LN8@InfoRecv:
  000c4	83 7d 90 00	 cmp	 DWORD PTR tv69[ebp], 0
  000c8	75 05		 jne	 SHORT $LN3@InfoRecv

; 36   : 	{
; 37   : 		return;

  000ca	e9 a8 01 00 00	 jmp	 $LN5@InfoRecv
$LN3@InfoRecv:

; 38   : 	}
; 39   : 
; 40   : 	PMSG_ANS_PICKUP_INFO pMsg;
; 41   : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xBF, sizeof(pMsg));

  000cf	6a 18		 push	 24			; 00000018H
  000d1	68 bf 00 00 00	 push	 191			; 000000bfH
  000d6	68 fb 00 00 00	 push	 251			; 000000fbH
  000db	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000de	50		 push	 eax
  000df	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000e2	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 42   : 
; 43   : 	int item_num = lpMsg->ItemNum;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  000ea	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ed	89 4d dc	 mov	 DWORD PTR _item_num$[ebp], ecx

; 44   : 
; 45   : 	if ( MAX_ITEM_TYPE_RANGE(item_num) == FALSE )

  000f0	83 7d dc 00	 cmp	 DWORD PTR _item_num$[ebp], 0
  000f4	7d 09		 jge	 SHORT $LN9@InfoRecv
  000f6	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
  000fd	eb 0f		 jmp	 SHORT $LN10@InfoRecv
$LN9@InfoRecv:
  000ff	33 c0		 xor	 eax, eax
  00101	81 7d dc 2b 01
	00 00		 cmp	 DWORD PTR _item_num$[ebp], 299 ; 0000012bH
  00108	0f 9e c0	 setle	 al
  0010b	89 45 90	 mov	 DWORD PTR tv80[ebp], eax
$LN10@InfoRecv:
  0010e	83 7d 90 00	 cmp	 DWORD PTR tv80[ebp], 0
  00112	75 1e		 jne	 SHORT $LN2@InfoRecv

; 46   : 	{
; 47   : 		pMsg.result = 0;

  00114	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 48   : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00118	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0011c	50		 push	 eax
  0011d	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00120	51		 push	 ecx
  00121	8b 55 0c	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00124	52		 push	 edx
  00125	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 49   : 		return;

  0012d	e9 45 01 00 00	 jmp	 $LN5@InfoRecv
$LN2@InfoRecv:

; 50   : 	}
; 51   : 
; 52   : 	int map_num = gObj[aIndex].MapNumber;

  00132	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00135	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0013b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00141	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  00149	89 55 d8	 mov	 DWORD PTR _map_num$[ebp], edx

; 53   : 
; 54   : 	if ( MAX_MAP_RANGE(map_num) == FALSE )

  0014c	83 7d d8 00	 cmp	 DWORD PTR _map_num$[ebp], 0
  00150	7d 09		 jge	 SHORT $LN11@InfoRecv
  00152	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
  00159	eb 0c		 jmp	 SHORT $LN12@InfoRecv
$LN11@InfoRecv:
  0015b	33 c0		 xor	 eax, eax
  0015d	83 7d d8 59	 cmp	 DWORD PTR _map_num$[ebp], 89 ; 00000059H
  00161	0f 9e c0	 setle	 al
  00164	89 45 90	 mov	 DWORD PTR tv93[ebp], eax
$LN12@InfoRecv:
  00167	83 7d 90 00	 cmp	 DWORD PTR tv93[ebp], 0
  0016b	75 1e		 jne	 SHORT $LN1@InfoRecv

; 55   : 	{
; 56   : 		pMsg.result = 0;

  0016d	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 57   : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00171	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00175	50		 push	 eax
  00176	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00179	51		 push	 ecx
  0017a	8b 55 0c	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0017d	52		 push	 edx
  0017e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00183	83 c4 0c	 add	 esp, 12			; 0000000cH

; 58   : 		return;

  00186	e9 ec 00 00 00	 jmp	 $LN5@InfoRecv
$LN1@InfoRecv:

; 59   : 	}
; 60   : 
; 61   : 	CMapItem * lpItem = &MapC[map_num].m_cItem[item_num];

  0018b	8b 45 d8	 mov	 eax, DWORD PTR _map_num$[ebp]
  0018e	69 c0 b8 3d 05
	00		 imul	 eax, 343480		; 00053db8H
  00194	8b 4d dc	 mov	 ecx, DWORD PTR _item_num$[ebp]
  00197	69 c9 74 04 00
	00		 imul	 ecx, 1140		; 00000474H
  0019d	8d 94 08 20 00
	00 00		 lea	 edx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax+ecx+32]
  001a4	89 55 d4	 mov	 DWORD PTR _lpItem$[ebp], edx

; 62   : 
; 63   : 	pMsg.result = 1;

  001a7	c6 45 e4 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1

; 64   : 
; 65   : 	pMsg.Type = lpItem->m_Type;

  001ab	8b 45 d4	 mov	 eax, DWORD PTR _lpItem$[ebp]
  001ae	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  001b2	66 89 4d e6	 mov	 WORD PTR _pMsg$[ebp+6], cx

; 66   : 	pMsg.Durability = lpItem->m_Durability;

  001b6	8b 45 d4	 mov	 eax, DWORD PTR _lpItem$[ebp]
  001b9	d9 40 28	 fld	 DWORD PTR [eax+40]
  001bc	d9 5d e8	 fstp	 DWORD PTR _pMsg$[ebp+8]

; 67   : 
; 68   : 	ItemByteConvert((LPBYTE)&pMsg.Data[0], 
; 69   : 		lpItem->m_Type, 
; 70   : 		lpItem->m_Option1, 
; 71   : 		lpItem->m_Option2,	
; 72   : 		lpItem->m_Option3, 
; 73   : 		(BYTE)lpItem->m_Level, 
; 74   : 		(BYTE)lpItem->m_Durability, 
; 75   : 		lpItem->m_NewOption, 
; 76   : 		lpItem->m_SetOption, 
; 77   : 		lpItem->m_JewelOfHarmonyOption, 
; 78   : 		lpItem->m_ItemOptionEx, 
; 79   : 		lpItem->m_SocketOption, 
; 80   : 		(BYTE)lpItem->m_SocketOptionIndex, 0);

  001bf	6a 00		 push	 0
  001c1	8b 45 d4	 mov	 eax, DWORD PTR _lpItem$[ebp]
  001c4	0f b6 88 cf 00
	00 00		 movzx	 ecx, BYTE PTR [eax+207]
  001cb	51		 push	 ecx
  001cc	8b 55 d4	 mov	 edx, DWORD PTR _lpItem$[ebp]
  001cf	81 c2 d0 00 00
	00		 add	 edx, 208		; 000000d0H
  001d5	52		 push	 edx
  001d6	8b 45 d4	 mov	 eax, DWORD PTR _lpItem$[ebp]
  001d9	0f b6 88 ce 00
	00 00		 movzx	 ecx, BYTE PTR [eax+206]
  001e0	51		 push	 ecx
  001e1	8b 55 d4	 mov	 edx, DWORD PTR _lpItem$[ebp]
  001e4	0f b6 82 c8 00
	00 00		 movzx	 eax, BYTE PTR [edx+200]
  001eb	50		 push	 eax
  001ec	8b 4d d4	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  001ef	0f b6 91 b2 00
	00 00		 movzx	 edx, BYTE PTR [ecx+178]
  001f6	52		 push	 edx
  001f7	8b 45 d4	 mov	 eax, DWORD PTR _lpItem$[ebp]
  001fa	0f b6 88 9b 00
	00 00		 movzx	 ecx, BYTE PTR [eax+155]
  00201	51		 push	 ecx
  00202	8b 55 d4	 mov	 edx, DWORD PTR _lpItem$[ebp]
  00205	d9 42 28	 fld	 DWORD PTR [edx+40]
  00208	d9 7d 92	 fnstcw	 WORD PTR tv250[ebp]
  0020b	0f b7 45 92	 movzx	 eax, WORD PTR tv250[ebp]
  0020f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00214	89 45 8c	 mov	 DWORD PTR tv253[ebp], eax
  00217	d9 6d 8c	 fldcw	 WORD PTR tv253[ebp]
  0021a	db 5d 88	 fistp	 DWORD PTR tv255[ebp]
  0021d	d9 6d 92	 fldcw	 WORD PTR tv250[ebp]
  00220	0f b6 45 88	 movzx	 eax, BYTE PTR tv255[ebp]
  00224	50		 push	 eax
  00225	8b 4d d4	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  00228	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  0022c	52		 push	 edx
  0022d	8b 45 d4	 mov	 eax, DWORD PTR _lpItem$[ebp]
  00230	0f b6 88 9a 00
	00 00		 movzx	 ecx, BYTE PTR [eax+154]
  00237	51		 push	 ecx
  00238	8b 55 d4	 mov	 edx, DWORD PTR _lpItem$[ebp]
  0023b	0f b6 82 99 00
	00 00		 movzx	 eax, BYTE PTR [edx+153]
  00242	50		 push	 eax
  00243	8b 4d d4	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  00246	0f b6 91 98 00
	00 00		 movzx	 edx, BYTE PTR [ecx+152]
  0024d	52		 push	 edx
  0024e	8b 45 d4	 mov	 eax, DWORD PTR _lpItem$[ebp]
  00251	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00255	51		 push	 ecx
  00256	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp+12]
  00259	52		 push	 edx
  0025a	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEHEEEEEEEEEQAEEE@Z ; ItemByteConvert
  0025f	83 c4 38	 add	 esp, 56			; 00000038H

; 81   : 
; 82   : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00262	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00266	50		 push	 eax
  00267	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0026a	51		 push	 ecx
  0026b	8b 55 0c	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0026e	52		 push	 edx
  0026f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00274	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@InfoRecv:

; 83   : }

  00277	5f		 pop	 edi
  00278	5e		 pop	 esi
  00279	5b		 pop	 ebx
  0027a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027d	33 cd		 xor	 ecx, ebp
  0027f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c2 08 00	 ret	 8
?InfoRecv@CPickUpItemInfo@@QAEXPAUPMSG_REQ_PICKUP_INFO@@H@Z ENDP ; CPickUpItemInfo::InfoRecv
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 106  : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 107  : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 108  : 		lpBuf[3] = sub;

  00024	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00027	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0002a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\pickupiteminfo.cpp
;	COMDAT ??__Eg_PickUpItemInfo@@YAXXZ
text$yc	SEGMENT
??__Eg_PickUpItemInfo@@YAXXZ PROC			; `dynamic initializer for 'g_PickUpItemInfo'', COMDAT

; 9    : CPickUpItemInfo g_PickUpItemInfo;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PickUpItemInfo@@3VCPickUpItemInfo@@A ; g_PickUpItemInfo
  0000e	e8 00 00 00 00	 call	 ??0CPickUpItemInfo@@QAE@XZ ; CPickUpItemInfo::CPickUpItemInfo
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_PickUpItemInfo@@YAXXZ ; `dynamic atexit destructor for 'g_PickUpItemInfo''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_PickUpItemInfo@@YAXXZ ENDP			; `dynamic initializer for 'g_PickUpItemInfo''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_PickUpItemInfo@@YAXXZ
text$yd	SEGMENT
??__Fg_PickUpItemInfo@@YAXXZ PROC			; `dynamic atexit destructor for 'g_PickUpItemInfo'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PickUpItemInfo@@3VCPickUpItemInfo@@A ; g_PickUpItemInfo
  0000e	e8 00 00 00 00	 call	 ??1CPickUpItemInfo@@QAE@XZ ; CPickUpItemInfo::~CPickUpItemInfo
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_PickUpItemInfo@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_PickUpItemInfo''
text$yd	ENDS
PUBLIC	?g_PickUpItemInfo@@3VCPickUpItemInfo@@A		; g_PickUpItemInfo
_BSS	SEGMENT
?g_PickUpItemInfo@@3VCPickUpItemInfo@@A DB 01H DUP (?)	; g_PickUpItemInfo
_BSS	ENDS
CRT$XCU	SEGMENT
_g_PickUpItemInfo$initializer$ DD FLAT:??__Eg_PickUpItemInfo@@YAXXZ
CRT$XCU	ENDS
END
