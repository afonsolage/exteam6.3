; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\MonsterItemMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMonsterItemMng@@6B@			; CMonsterItemMng::`vftable'
PUBLIC	??0CMonsterItemMng@@QAE@XZ			; CMonsterItemMng::CMonsterItemMng
PUBLIC	??_R4CMonsterItemMng@@6B@			; CMonsterItemMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMonsterItemMng@@@8			; CMonsterItemMng `RTTI Type Descriptor'
PUBLIC	??_R3CMonsterItemMng@@8				; CMonsterItemMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMonsterItemMng@@8				; CMonsterItemMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMonsterItemMng@@8		; CMonsterItemMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMonsterItemMng@@UAEPAXI@Z:PROC		; CMonsterItemMng::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMonsterItemMng@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\monsteritemmng.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMonsterItemMng@@8 DD FLAT:??_R0?AVCMonsterItemMng@@@8 ; CMonsterItemMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_R2CMonsterItemMng@@8
rdata$r	SEGMENT
??_R2CMonsterItemMng@@8 DD FLAT:??_R1A@?0A@EA@CMonsterItemMng@@8 ; CMonsterItemMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMonsterItemMng@@8
rdata$r	SEGMENT
??_R3CMonsterItemMng@@8 DD 00H				; CMonsterItemMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMonsterItemMng@@@8
_DATA	SEGMENT
??_R0?AVCMonsterItemMng@@@8 DD FLAT:??_7type_info@@6B@	; CMonsterItemMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMonsterItemMng@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMonsterItemMng@@6B@
rdata$r	SEGMENT
??_R4CMonsterItemMng@@6B@ DD 00H			; CMonsterItemMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMonsterItemMng@@@8
	DD	FLAT:??_R3CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_7CMonsterItemMng@@6B@
CONST	SEGMENT
??_7CMonsterItemMng@@6B@ DD FLAT:??_R4CMonsterItemMng@@6B@ ; CMonsterItemMng::`vftable'
	DD	FLAT:??_ECMonsterItemMng@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMonsterItemMng@@QAE@XZ PROC				; CMonsterItemMng::CMonsterItemMng
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMonsterItemMng@@6B@

; 15   : 	return;
; 16   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CMonsterItemMng@@QAE@XZ ENDP				; CMonsterItemMng::CMonsterItemMng
_TEXT	ENDS
PUBLIC	??1CMonsterItemMng@@UAE@XZ			; CMonsterItemMng::~CMonsterItemMng
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMonsterItemMng@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMonsterItemMng@@UAEPAXI@Z PROC			; CMonsterItemMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMonsterItemMng@@UAE@XZ ; CMonsterItemMng::~CMonsterItemMng
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCMonsterItemMng@@UAEPAXI@Z ENDP			; CMonsterItemMng::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Clear@CMonsterItemMng@@QAEXXZ			; CMonsterItemMng::Clear
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMonsterItemMng@@UAE@XZ PROC				; CMonsterItemMng::~CMonsterItemMng
; _this$ = ecx

; 20   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMonsterItemMng@@6B@

; 21   : 	this->Clear();

  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?Clear@CMonsterItemMng@@QAEXXZ ; CMonsterItemMng::Clear

; 22   : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??1CMonsterItemMng@@UAE@XZ ENDP				; CMonsterItemMng::~CMonsterItemMng
_TEXT	ENDS
PUBLIC	?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z	; CMonsterItemMng::gObjGiveItemSearch
PUBLIC	?Init@CMonsterItemMng@@QAEXXZ			; CMonsterItemMng::Init
EXTRN	_strcpy:PROC
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?Init@CMonsterItemMng@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CMonsterItemMng@@QAEXXZ$0
__ehfuncinfo$?Init@CMonsterItemMng@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Init@CMonsterItemMng@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv90 = -108						; size = 4
$T228122 = -104						; size = 4
$T228123 = -100						; size = 4
$T228124 = -96						; size = 4
_i$227850 = -28						; size = 4
_lpm$ = -24						; size = 4
_i$227838 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Init@CMonsterItemMng@@QAEXXZ PROC			; CMonsterItemMng::Init
; _this$ = ecx

; 26   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	6a ff		 push	 -1
  00055	68 00 00 00 00	 push	 __ehhandler$?Init@CMonsterItemMng@@QAEXXZ
  0005a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00060	50		 push	 eax
  00061	83 ec 60	 sub	 esp, 96			; 00000060H
  00064	53		 push	 ebx
  00065	56		 push	 esi
  00066	57		 push	 edi
  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0006c	33 c5		 xor	 eax, ebp
  0006e	50		 push	 eax
  0006f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00072	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00078	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  0007b	68 20 03 00 00	 push	 800			; 00000320H
  00080	6a 00		 push	 0
  00082	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00085	05 24 03 00 00	 add	 eax, 804		; 00000324H
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _memset
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 28   : 
; 29   : 	for ( int i=0 ; i< MAX_LEVEL_MONSTER ; i++ )

  00093	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$227838[ebp], 0
  0009a	eb 09		 jmp	 SHORT $LN9@Init
$LN8@Init:
  0009c	8b 45 ec	 mov	 eax, DWORD PTR _i$227838[ebp]
  0009f	83 c0 01	 add	 eax, 1
  000a2	89 45 ec	 mov	 DWORD PTR _i$227838[ebp], eax
$LN9@Init:
  000a5	81 7d ec c8 00
	00 00		 cmp	 DWORD PTR _i$227838[ebp], 200 ; 000000c8H
  000ac	0f 8d 89 00 00
	00		 jge	 $LN7@Init

; 30   : 	{
; 31   : #if(FIX_MEMLEAK)
; 32   : 		if( this->m_MonsterInvenItems[i] != NULL )

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _i$227838[ebp]
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  000bd	74 19		 je	 SHORT $LN6@Init

; 33   : 		{
; 34   : 			delete[] this->m_MonsterInvenItems[i];

  000bf	8b 45 ec	 mov	 eax, DWORD PTR _i$227838[ebp]
  000c2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  000c9	89 55 98	 mov	 DWORD PTR $T228122[ebp], edx
  000cc	8b 45 98	 mov	 eax, DWORD PTR $T228122[ebp]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000d5	83 c4 04	 add	 esp, 4
$LN6@Init:

; 35   : 		}
; 36   : #endif
; 37   : 
; 38   : 		this->m_MonsterInvenItems[i] = new CItem[MAX_ITEM_IN_MONSTER];

  000d8	68 20 3c 03 00	 push	 212000			; 00033c20H
  000dd	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000e2	83 c4 04	 add	 esp, 4
  000e5	89 45 a0	 mov	 DWORD PTR $T228124[ebp], eax
  000e8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ef	83 7d a0 00	 cmp	 DWORD PTR $T228124[ebp], 0
  000f3	74 20		 je	 SHORT $LN12@Init
  000f5	68 00 00 00 00	 push	 OFFSET ??0CItem@@QAE@XZ	; CItem::CItem
  000fa	68 e8 03 00 00	 push	 1000			; 000003e8H
  000ff	68 d4 00 00 00	 push	 212			; 000000d4H
  00104	8b 45 a0	 mov	 eax, DWORD PTR $T228124[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  0010d	8b 4d a0	 mov	 ecx, DWORD PTR $T228124[ebp]
  00110	89 4d 94	 mov	 DWORD PTR tv90[ebp], ecx
  00113	eb 07		 jmp	 SHORT $LN13@Init
$LN12@Init:
  00115	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN13@Init:
  0011c	8b 55 94	 mov	 edx, DWORD PTR tv90[ebp]
  0011f	89 55 9c	 mov	 DWORD PTR $T228123[ebp], edx
  00122	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00129	8b 45 ec	 mov	 eax, DWORD PTR _i$227838[ebp]
  0012c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	8b 55 9c	 mov	 edx, DWORD PTR $T228123[ebp]
  00132	89 54 81 04	 mov	 DWORD PTR [ecx+eax*4+4], edx

; 39   : 	}

  00136	e9 61 ff ff ff	 jmp	 $LN8@Init
$LN7@Init:

; 40   : 
; 41   : 	LPMONSTER_ATTRIBUTE lpm;
; 42   : 
; 43   : 	for (int i = 0; i< MAX_MONSTER_TYPE ; i++ )

  0013b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$227850[ebp], 0
  00142	eb 09		 jmp	 SHORT $LN5@Init
$LN4@Init:
  00144	8b 45 e4	 mov	 eax, DWORD PTR _i$227850[ebp]
  00147	83 c0 01	 add	 eax, 1
  0014a	89 45 e4	 mov	 DWORD PTR _i$227850[ebp], eax
$LN5@Init:
  0014d	81 7d e4 00 04
	00 00		 cmp	 DWORD PTR _i$227850[ebp], 1024 ; 00000400H
  00154	7d 51		 jge	 SHORT $LN10@Init

; 44   : 	{
; 45   : 		lpm = gMAttr.GetAttr(i);

  00156	8b 45 e4	 mov	 eax, DWORD PTR _i$227850[ebp]
  00159	50		 push	 eax
  0015a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  0015f	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr
  00164	89 45 e8	 mov	 DWORD PTR _lpm$[ebp], eax

; 46   : 
; 47   : 		if ( lpm != NULL )

  00167	83 7d e8 00	 cmp	 DWORD PTR _lpm$[ebp], 0
  0016b	74 38		 je	 SHORT $LN2@Init

; 48   : 		{
; 49   : 			strcpy( this->MonsterName, lpm->m_Name);

  0016d	8b 45 e8	 mov	 eax, DWORD PTR _lpm$[ebp]
  00170	83 c0 08	 add	 eax, 8
  00173	50		 push	 eax
  00174	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	81 c1 44 06 00
	00		 add	 ecx, 1604		; 00000644H
  0017d	51		 push	 ecx
  0017e	e8 00 00 00 00	 call	 _strcpy
  00183	83 c4 08	 add	 esp, 8

; 50   : 
; 51   : 			if ( lpm->m_Level != 0 )

  00186	8b 45 e8	 mov	 eax, DWORD PTR _lpm$[ebp]
  00189	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0018d	74 16		 je	 SHORT $LN2@Init

; 52   : 			{
; 53   : 				this->gObjGiveItemSearch(lpm->m_Level, lpm->m_MaxItemLevel);

  0018f	8b 45 e8	 mov	 eax, DWORD PTR _lpm$[ebp]
  00192	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00195	51		 push	 ecx
  00196	8b 55 e8	 mov	 edx, DWORD PTR _lpm$[ebp]
  00199	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0019c	50		 push	 eax
  0019d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001a0	e8 00 00 00 00	 call	 ?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z ; CMonsterItemMng::gObjGiveItemSearch
$LN2@Init:

; 54   : 			}
; 55   : 		}
; 56   : 	}

  001a5	eb 9d		 jmp	 SHORT $LN4@Init
$LN10@Init:

; 57   : }

  001a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b1	59		 pop	 ecx
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Init@CMonsterItemMng@@QAEXXZ$0:
  00000	8b 45 a0	 mov	 eax, DWORD PTR $T228124[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Init@CMonsterItemMng@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CMonsterItemMng@@QAEXXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CMonsterItemMng@@QAEXXZ ENDP			; CMonsterItemMng::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
$T228138 = -76						; size = 4
_i$227859 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@CMonsterItemMng@@QAEXXZ PROC			; CMonsterItemMng::Clear
; _this$ = ecx

; 61   : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  001c6	53		 push	 ebx
  001c7	56		 push	 esi
  001c8	57		 push	 edi
  001c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  001cc	68 20 03 00 00	 push	 800			; 00000320H
  001d1	6a 00		 push	 0
  001d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d6	05 24 03 00 00	 add	 eax, 804		; 00000324H
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 _memset
  001e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   : 
; 64   : 	for ( int i =0 ; i< MAX_LEVEL_MONSTER ; i++ )

  001e4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227859[ebp], 0
  001eb	eb 09		 jmp	 SHORT $LN4@Clear
$LN3@Clear:
  001ed	8b 45 f8	 mov	 eax, DWORD PTR _i$227859[ebp]
  001f0	83 c0 01	 add	 eax, 1
  001f3	89 45 f8	 mov	 DWORD PTR _i$227859[ebp], eax
$LN4@Clear:
  001f6	81 7d f8 c8 00
	00 00		 cmp	 DWORD PTR _i$227859[ebp], 200 ; 000000c8H
  001fd	7d 28		 jge	 SHORT $LN5@Clear

; 65   : 	{
; 66   : #if(FIX_MEMLEAK)
; 67   : 		if( this->m_MonsterInvenItems[i] != NULL ) //Memleak 2

  001ff	8b 45 f8	 mov	 eax, DWORD PTR _i$227859[ebp]
  00202	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00205	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  0020a	74 19		 je	 SHORT $LN1@Clear

; 68   : 		{
; 69   : 			delete[] this->m_MonsterInvenItems[i];

  0020c	8b 45 f8	 mov	 eax, DWORD PTR _i$227859[ebp]
  0020f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00212	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  00216	89 55 b4	 mov	 DWORD PTR $T228138[ebp], edx
  00219	8b 45 b4	 mov	 eax, DWORD PTR $T228138[ebp]
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00222	83 c4 04	 add	 esp, 4
$LN1@Clear:

; 70   : 		}
; 71   : #else
; 72   : 		delete this->m_MonsterInvenItems[i];
; 73   : #endif
; 74   : 	}

  00225	eb c6		 jmp	 SHORT $LN3@Clear
$LN5@Clear:

; 75   : }

  00227	5f		 pop	 edi
  00228	5e		 pop	 esi
  00229	5b		 pop	 ebx
  0022a	8b e5		 mov	 esp, ebp
  0022c	5d		 pop	 ebp
  0022d	c3		 ret	 0
?Clear@CMonsterItemMng@@QAEXXZ ENDP			; CMonsterItemMng::Clear
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z	; CMonsterItemMng::InsertItem
EXTRN	_rand:PROC
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z:PROC	; CItem::Convert
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_rd$227882 = -20					; size = 4
_item_type$ = -16					; size = 4
_item$ = -12						; size = 4
_itemcount$ = -8					; size = 4
_this$ = -4						; size = 4
_monsterlevel$ = 8					; size = 4
_type$ = 12						; size = 4
_index$ = 16						; size = 4
_itemlevel$ = 20					; size = 4
_op1$ = 24						; size = 4
_op2$ = 28						; size = 4
_op3$ = 32						; size = 4
?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z PROC		; CMonsterItemMng::InsertItem
; _this$ = ecx

; 78   : {

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	83 ec 54	 sub	 esp, 84			; 00000054H
  00236	53		 push	 ebx
  00237	56		 push	 esi
  00238	57		 push	 edi
  00239	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 79   : 	if ( monsterlevel > MAX_LEVEL_MONSTER-1 || monsterlevel < 0 )

  0023c	81 7d 08 c7 00
	00 00		 cmp	 DWORD PTR _monsterlevel$[ebp], 199 ; 000000c7H
  00243	7f 06		 jg	 SHORT $LN4@InsertItem
  00245	83 7d 08 00	 cmp	 DWORD PTR _monsterlevel$[ebp], 0
  00249	7d 07		 jge	 SHORT $LN5@InsertItem
$LN4@InsertItem:

; 80   : 	{
; 81   : 		return -1;

  0024b	0c ff		 or	 al, 255			; 000000ffH
  0024d	e9 cd 00 00 00	 jmp	 $LN6@InsertItem
$LN5@InsertItem:

; 82   : 	}
; 83   : 
; 84   : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00252	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00255	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00258	8b 94 81 24 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+804]
  0025f	89 55 f8	 mov	 DWORD PTR _itemcount$[ebp], edx

; 85   : 
; 86   : 	if ( itemcount >= MAX_ITEM_IN_MONSTER )

  00262	81 7d f8 e8 03
	00 00		 cmp	 DWORD PTR _itemcount$[ebp], 1000 ; 000003e8H
  00269	7c 07		 jl	 SHORT $LN3@InsertItem

; 87   : 	{
; 88   : 		return -1;

  0026b	0c ff		 or	 al, 255			; 000000ffH
  0026d	e9 ad 00 00 00	 jmp	 $LN6@InsertItem
$LN3@InsertItem:

; 89   : 	}
; 90   : 
; 91   : 	CItem * item = &this->m_MonsterInvenItems[monsterlevel][itemcount];

  00272	8b 45 f8	 mov	 eax, DWORD PTR _itemcount$[ebp]
  00275	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0027b	8b 4d 08	 mov	 ecx, DWORD PTR _monsterlevel$[ebp]
  0027e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00281	03 44 8a 04	 add	 eax, DWORD PTR [edx+ecx*4+4]
  00285	89 45 f4	 mov	 DWORD PTR _item$[ebp], eax

; 92   : 	int item_type = (type * MAX_SUBTYPE_ITEMS) + index;

  00288	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0028b	c1 e0 09	 shl	 eax, 9
  0028e	03 45 10	 add	 eax, DWORD PTR _index$[ebp]
  00291	89 45 f0	 mov	 DWORD PTR _item_type$[ebp], eax

; 93   : 	item->m_Level = itemlevel;

  00294	8b 45 f4	 mov	 eax, DWORD PTR _item$[ebp]
  00297	66 8b 4d 14	 mov	 cx, WORD PTR _itemlevel$[ebp]
  0029b	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 94   : 	item->Convert(item_type, op1, op2, op3, 0, 0,0, NULL, 0xFF, 0, CURRENT_DB_VERSION);

  0029f	6a 03		 push	 3
  002a1	6a 00		 push	 0
  002a3	68 ff 00 00 00	 push	 255			; 000000ffH
  002a8	6a 00		 push	 0
  002aa	6a 00		 push	 0
  002ac	6a 00		 push	 0
  002ae	6a 00		 push	 0
  002b0	0f b6 45 20	 movzx	 eax, BYTE PTR _op3$[ebp]
  002b4	50		 push	 eax
  002b5	0f b6 4d 1c	 movzx	 ecx, BYTE PTR _op2$[ebp]
  002b9	51		 push	 ecx
  002ba	0f b6 55 18	 movzx	 edx, BYTE PTR _op1$[ebp]
  002be	52		 push	 edx
  002bf	8b 45 f0	 mov	 eax, DWORD PTR _item_type$[ebp]
  002c2	50		 push	 eax
  002c3	8b 4d f4	 mov	 ecx, DWORD PTR _item$[ebp]
  002c6	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 95   : 
; 96   : 	if ( type == 13 && index == 10 )

  002cb	83 7d 0c 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  002cf	75 27		 jne	 SHORT $LN2@InsertItem
  002d1	83 7d 10 0a	 cmp	 DWORD PTR _index$[ebp], 10 ; 0000000aH
  002d5	75 21		 jne	 SHORT $LN2@InsertItem

; 97   : 	{
; 98   : 		int rd = rand() % 100;

  002d7	e8 00 00 00 00	 call	 _rand
  002dc	99		 cdq
  002dd	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  002e2	f7 f9		 idiv	 ecx
  002e4	89 55 ec	 mov	 DWORD PTR _rd$227882[ebp], edx

; 99   : 		item->m_Durability = rd + 100.0f;

  002e7	db 45 ec	 fild	 DWORD PTR _rd$227882[ebp]
  002ea	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4059000000000000
  002f0	8b 45 f4	 mov	 eax, DWORD PTR _item$[ebp]
  002f3	d9 58 24	 fstp	 DWORD PTR [eax+36]

; 100  : 	}
; 101  : 	else

  002f6	eb 0c		 jmp	 SHORT $LN1@InsertItem
$LN2@InsertItem:

; 102  : 	{
; 103  : 		item->m_Durability = item->m_BaseDurability;

  002f8	8b 45 f4	 mov	 eax, DWORD PTR _item$[ebp]
  002fb	8b 4d f4	 mov	 ecx, DWORD PTR _item$[ebp]
  002fe	d9 41 2c	 fld	 DWORD PTR [ecx+44]
  00301	d9 58 24	 fstp	 DWORD PTR [eax+36]
$LN1@InsertItem:

; 104  : 	}
; 105  : 
; 106  : 	itemcount ++;

  00304	8b 45 f8	 mov	 eax, DWORD PTR _itemcount$[ebp]
  00307	83 c0 01	 add	 eax, 1
  0030a	89 45 f8	 mov	 DWORD PTR _itemcount$[ebp], eax

; 107  : 	this->m_iMonsterInvenItemCount[monsterlevel] = itemcount;

  0030d	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00310	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00313	8b 55 f8	 mov	 edx, DWORD PTR _itemcount$[ebp]
  00316	89 94 81 24 03
	00 00		 mov	 DWORD PTR [ecx+eax*4+804], edx

; 108  : 	return 0;

  0031d	32 c0		 xor	 al, al
$LN6@InsertItem:

; 109  : }

  0031f	5f		 pop	 edi
  00320	5e		 pop	 esi
  00321	5b		 pop	 ebx
  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 1c 00	 ret	 28			; 0000001cH
?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ENDP		; CMonsterItemMng::InsertItem
_TEXT	ENDS
PUBLIC	?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z	; CMonsterItemMng::GetItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_itemindex$ = -12					; size = 4
_itemcount$ = -8					; size = 4
_this$ = -4						; size = 4
_monsterlevel$ = 8					; size = 4
?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z PROC		; CMonsterItemMng::GetItem
; _this$ = ecx

; 113  : {

  00330	55		 push	 ebp
  00331	8b ec		 mov	 ebp, esp
  00333	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00336	53		 push	 ebx
  00337	56		 push	 esi
  00338	57		 push	 edi
  00339	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 	if ( monsterlevel > MAX_LEVEL_MONSTER-1 || monsterlevel < 0 )

  0033c	81 7d 08 c7 00
	00 00		 cmp	 DWORD PTR _monsterlevel$[ebp], 199 ; 000000c7H
  00343	7f 06		 jg	 SHORT $LN2@GetItem
  00345	83 7d 08 00	 cmp	 DWORD PTR _monsterlevel$[ebp], 0
  00349	7d 04		 jge	 SHORT $LN3@GetItem
$LN2@GetItem:

; 115  : 	{
; 116  : 		return NULL;

  0034b	33 c0		 xor	 eax, eax
  0034d	eb 39		 jmp	 SHORT $LN4@GetItem
$LN3@GetItem:

; 117  : 	}
; 118  : 
; 119  : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  0034f	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00352	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00355	8b 94 81 24 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+804]
  0035c	89 55 f8	 mov	 DWORD PTR _itemcount$[ebp], edx

; 120  : 
; 121  : 	if ( itemcount <= 0 )

  0035f	83 7d f8 00	 cmp	 DWORD PTR _itemcount$[ebp], 0
  00363	7f 04		 jg	 SHORT $LN1@GetItem

; 122  : 	{
; 123  : 		return NULL;

  00365	33 c0		 xor	 eax, eax
  00367	eb 1f		 jmp	 SHORT $LN4@GetItem
$LN1@GetItem:

; 124  : 	}
; 125  : 
; 126  : 	int itemindex = rand() % itemcount;

  00369	e8 00 00 00 00	 call	 _rand
  0036e	99		 cdq
  0036f	f7 7d f8	 idiv	 DWORD PTR _itemcount$[ebp]
  00372	89 55 f4	 mov	 DWORD PTR _itemindex$[ebp], edx

; 127  : 	return &this->m_MonsterInvenItems[monsterlevel][itemindex];

  00375	8b 45 f4	 mov	 eax, DWORD PTR _itemindex$[ebp]
  00378	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0037e	8b 4d 08	 mov	 ecx, DWORD PTR _monsterlevel$[ebp]
  00381	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00384	03 44 8a 04	 add	 eax, DWORD PTR [edx+ecx*4+4]
$LN4@GetItem:

; 128  : }

  00388	5f		 pop	 edi
  00389	5e		 pop	 esi
  0038a	5b		 pop	 ebx
  0038b	8b e5		 mov	 esp, ebp
  0038d	5d		 pop	 ebp
  0038e	c2 04 00	 ret	 4
?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z ENDP		; CMonsterItemMng::GetItem
_TEXT	ENDS
PUBLIC	??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@ ; `string'
PUBLIC	??_C@_0EG@FKLFBLDK@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z@4JA ; `CMonsterItemMng::gObjGiveItemSearch'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	?GetLevelItem@@YAHHHH@Z:PROC			; GetLevelItem
EXTRN	?zzzItemLevel@@YAHHHH@Z:PROC			; zzzItemLevel
EXTRN	?gKeyOfDevilSquareDropRate@@3HA:DWORD		; gKeyOfDevilSquareDropRate
EXTRN	?gDevilSquareEvent@@3HA:DWORD			; gDevilSquareEvent
EXTRN	?gEyesOfDevilSquareDropRate@@3HA:DWORD		; gEyesOfDevilSquareDropRate
EXTRN	?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z:PROC ; LuckyItemManager::IsLuckyItemEquipment
EXTRN	?IsLuckyItemTicket@LuckyItemManager@@QAEHH@Z:PROC ; LuckyItemManager::IsLuckyItemTicket
EXTRN	?g_LuckyItemManager@@3ULuckyItemManager@@A:BYTE	; g_LuckyItemManager
EXTRN	?g_MaxItemIndexOfEachItemType@@3PAHA:BYTE	; g_MaxItemIndexOfEachItemType
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
;	COMDAT ??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@
CONST	SEGMENT
??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@ DB 'error-L3 :'
	DB	' Monster Level Overflow~ %s %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@FKLFBLDK@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0EG@FKLFBLDK@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\monsteritemmng.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z@4JA DD 083H ; `CMonsterItemMng::gObjGiveItemSearch'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_devilitemlevel$227967 = -128				; size = 4
_bCheckDevil$227955 = -124				; size = 4
_perc$227954 = -120					; size = 4
_iMaxItemIndex$227914 = -116				; size = 4
_BallTable$ = -112					; size = 88
_index$ = -24						; size = 4
_type$ = -20						; size = 4
_incount$ = -16						; size = 4
_result$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_monsterlevel$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z PROC	; CMonsterItemMng::gObjGiveItemSearch
; _this$ = ecx

; 131  : {

  003a0	55		 push	 ebp
  003a1	8b ec		 mov	 ebp, esp
  003a3	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  003a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  003ae	33 c5		 xor	 eax, ebp
  003b0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  003b3	53		 push	 ebx
  003b4	56		 push	 esi
  003b5	57		 push	 edi
  003b6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 132  : 	int result;
; 133  : 	int incount = 0;

  003b9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _incount$[ebp], 0

; 134  : 	int type;
; 135  : 	int index;
; 136  : 
; 137  : 	if ( monsterlevel > MAX_LEVEL_MONSTER-1 )

  003c0	81 7d 08 c7 00
	00 00		 cmp	 DWORD PTR _monsterlevel$[ebp], 199 ; 000000c7H
  003c7	7e 21		 jle	 SHORT $LN97@gObjGiveIt

; 138  : 	{
; 139  : 		LogAdd("error-L3 : Monster Level Overflow~ %s %d", __FILE__, __LINE__ );

  003c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z@4JA
  003ce	83 c0 08	 add	 eax, 8
  003d1	50		 push	 eax
  003d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@FKLFBLDK@d?3?2projects?2exteam6?43?2source?2gam@
  003d7	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@
  003dc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  003e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 140  : 		return;

  003e5	e9 84 06 00 00	 jmp	 $LN98@gObjGiveIt
$LN97@gObjGiveIt:

; 141  : 	}
; 142  : 
; 143  : 	int BallTable[22]; //season 4.5 changed
; 144  : 
; 145  : 	BallTable[0] = 7;

  003ea	c7 45 90 07 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp], 7

; 146  : 	BallTable[1] = 8;

  003f1	c7 45 94 08 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+4], 8

; 147  : 	BallTable[2] = 9;

  003f8	c7 45 98 09 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+8], 9

; 148  : 	BallTable[3] = 10;

  003ff	c7 45 9c 0a 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+12], 10 ; 0000000aH

; 149  : 	BallTable[4] = 11;

  00406	c7 45 a0 0b 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+16], 11 ; 0000000bH

; 150  : 	BallTable[5] = 12;

  0040d	c7 45 a4 0c 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+20], 12 ; 0000000cH

; 151  : 	BallTable[6] = 13;

  00414	c7 45 a8 0d 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+24], 13 ; 0000000dH

; 152  : 	BallTable[7] = 14;

  0041b	c7 45 ac 0e 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+28], 14 ; 0000000eH

; 153  : 	BallTable[8] = 16;

  00422	c7 45 b0 10 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+32], 16 ; 00000010H

; 154  : 	BallTable[9] = 17;

  00429	c7 45 b4 11 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+36], 17 ; 00000011H

; 155  : 	BallTable[10] = 18;

  00430	c7 45 b8 12 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+40], 18 ; 00000012H

; 156  : 	BallTable[11] = 19;

  00437	c7 45 bc 13 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+44], 19 ; 00000013H

; 157  : 	BallTable[12] = 21;

  0043e	c7 45 c0 15 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+48], 21 ; 00000015H

; 158  : 	BallTable[13] = 22;

  00445	c7 45 c4 16 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+52], 22 ; 00000016H

; 159  : 	BallTable[14] = 23;

  0044c	c7 45 c8 17 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+56], 23 ; 00000017H

; 160  : 	BallTable[15] = 24;

  00453	c7 45 cc 18 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+60], 24 ; 00000018H

; 161  : 	BallTable[16] = 35;

  0045a	c7 45 d0 23 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+64], 35 ; 00000023H

; 162  : 	BallTable[17] = 44;//Season 4.5 addon

  00461	c7 45 d4 2c 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+68], 44 ; 0000002cH

; 163  :     BallTable[18] = 45;//Season 4.5 addon

  00468	c7 45 d8 2d 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+72], 45 ; 0000002dH

; 164  :     BallTable[19] = 46;//Season 4.5 addon

  0046f	c7 45 dc 2e 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+76], 46 ; 0000002eH

; 165  :     BallTable[20] = 47;//Season 4.5 addon

  00476	c7 45 e0 2f 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+80], 47 ; 0000002fH

; 166  :     BallTable[21] = 48;//Season 4.5 addon

  0047d	c7 45 e4 30 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+84], 48 ; 00000030H
$LN96@gObjGiveIt:

; 167  : 
; 168  : 	while ( true )

  00484	b8 01 00 00 00	 mov	 eax, 1
  00489	85 c0		 test	 eax, eax
  0048b	0f 84 dd 05 00
	00		 je	 $LN98@gObjGiveIt

; 169  : 	{
; 170  : 		if ( (rand() % 20) ==  0 ) 

  00491	e8 00 00 00 00	 call	 _rand
  00496	99		 cdq
  00497	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0049c	f7 f9		 idiv	 ecx
  0049e	85 d2		 test	 edx, edx
  004a0	75 53		 jne	 SHORT $LN94@gObjGiveIt

; 171  : 		{
; 172  : 			if ( (rand() % 2)	!= 0 )

  004a2	e8 00 00 00 00	 call	 _rand
  004a7	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  004ac	79 05		 jns	 SHORT $LN109@gObjGiveIt
  004ae	48		 dec	 eax
  004af	83 c8 fe	 or	 eax, -2			; fffffffeH
  004b2	40		 inc	 eax
$LN109@gObjGiveIt:
  004b3	85 c0		 test	 eax, eax
  004b5	74 21		 je	 SHORT $LN93@gObjGiveIt

; 173  : 			{
; 174  : 				type = MAX_TYPE_ITEMS-1;

  004b7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _type$[ebp], 15 ; 0000000fH

; 175  : 				index = rand() % (g_MaxItemIndexOfEachItemType[type]+1);

  004be	e8 00 00 00 00	 call	 _rand
  004c3	8b 4d ec	 mov	 ecx, DWORD PTR _type$[ebp]
  004c6	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[ecx*4]
  004cd	83 c1 01	 add	 ecx, 1
  004d0	99		 cdq
  004d1	f7 f9		 idiv	 ecx
  004d3	89 55 e8	 mov	 DWORD PTR _index$[ebp], edx

; 176  : 			}
; 177  : 			else

  004d6	eb 1b		 jmp	 SHORT $LN92@gObjGiveIt
$LN93@gObjGiveIt:

; 178  : 			{
; 179  : 				type = 12;

  004d8	c7 45 ec 0c 00
	00 00		 mov	 DWORD PTR _type$[ebp], 12 ; 0000000cH

; 180  : 				index = BallTable[rand() % 17];

  004df	e8 00 00 00 00	 call	 _rand
  004e4	99		 cdq
  004e5	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  004ea	f7 f9		 idiv	 ecx
  004ec	8b 54 95 90	 mov	 edx, DWORD PTR _BallTable$[ebp+edx*4]
  004f0	89 55 e8	 mov	 DWORD PTR _index$[ebp], edx
$LN92@gObjGiveIt:

; 181  : 			}
; 182  : 		}
; 183  : 		else

  004f3	eb 47		 jmp	 SHORT $LN91@gObjGiveIt
$LN94@gObjGiveIt:

; 184  : 		{
; 185  : 			type = rand() % MAX_TYPE_ITEMS;

  004f5	e8 00 00 00 00	 call	 _rand
  004fa	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  004ff	79 05		 jns	 SHORT $LN110@gObjGiveIt
  00501	48		 dec	 eax
  00502	83 c8 f0	 or	 eax, -16		; fffffff0H
  00505	40		 inc	 eax
$LN110@gObjGiveIt:
  00506	89 45 ec	 mov	 DWORD PTR _type$[ebp], eax

; 186  : 			int iMaxItemIndex = g_MaxItemIndexOfEachItemType[type]+1;

  00509	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  0050c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[eax*4]
  00513	83 c1 01	 add	 ecx, 1
  00516	89 4d 8c	 mov	 DWORD PTR _iMaxItemIndex$227914[ebp], ecx

; 187  : 			index = rand() % iMaxItemIndex;

  00519	e8 00 00 00 00	 call	 _rand
  0051e	99		 cdq
  0051f	f7 7d 8c	 idiv	 DWORD PTR _iMaxItemIndex$227914[ebp]
  00522	89 55 e8	 mov	 DWORD PTR _index$[ebp], edx

; 188  : 
; 189  : 			if ( type == 15 || (type == 12 && index != 15 ) )

  00525	83 7d ec 0f	 cmp	 DWORD PTR _type$[ebp], 15 ; 0000000fH
  00529	74 0c		 je	 SHORT $LN89@gObjGiveIt
  0052b	83 7d ec 0c	 cmp	 DWORD PTR _type$[ebp], 12 ; 0000000cH
  0052f	75 0b		 jne	 SHORT $LN91@gObjGiveIt
  00531	83 7d e8 0f	 cmp	 DWORD PTR _index$[ebp], 15 ; 0000000fH
  00535	74 05		 je	 SHORT $LN91@gObjGiveIt
$LN89@gObjGiveIt:

; 190  : 			{
; 191  : 				continue;

  00537	e9 48 ff ff ff	 jmp	 $LN96@gObjGiveIt
$LN91@gObjGiveIt:

; 192  : 			}
; 193  : 		}
; 194  : 
; 195  : 		if ( type == 13 && index == 3 )

  0053c	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  00540	75 0b		 jne	 SHORT $LN88@gObjGiveIt
  00542	83 7d e8 03	 cmp	 DWORD PTR _index$[ebp], 3
  00546	75 05		 jne	 SHORT $LN88@gObjGiveIt

; 196  : 		{
; 197  : 			continue;

  00548	e9 37 ff ff ff	 jmp	 $LN96@gObjGiveIt
$LN88@gObjGiveIt:

; 198  : 		}
; 199  : 
; 200  : 		if ( (type == 13 && index == 32)
; 201  :           || (type == 13 && index == 33)
; 202  :           || (type == 13 && index == 34)
; 203  :           || (type == 13 && index == 35)
; 204  :           || (type == 13 && index == 36)
; 205  :           || (type == 13 && index == 37) )

  0054d	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  00551	75 06		 jne	 SHORT $LN85@gObjGiveIt
  00553	83 7d e8 20	 cmp	 DWORD PTR _index$[ebp], 32 ; 00000020H
  00557	74 3c		 je	 SHORT $LN86@gObjGiveIt
$LN85@gObjGiveIt:
  00559	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  0055d	75 06		 jne	 SHORT $LN84@gObjGiveIt
  0055f	83 7d e8 21	 cmp	 DWORD PTR _index$[ebp], 33 ; 00000021H
  00563	74 30		 je	 SHORT $LN86@gObjGiveIt
$LN84@gObjGiveIt:
  00565	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  00569	75 06		 jne	 SHORT $LN83@gObjGiveIt
  0056b	83 7d e8 22	 cmp	 DWORD PTR _index$[ebp], 34 ; 00000022H
  0056f	74 24		 je	 SHORT $LN86@gObjGiveIt
$LN83@gObjGiveIt:
  00571	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  00575	75 06		 jne	 SHORT $LN82@gObjGiveIt
  00577	83 7d e8 23	 cmp	 DWORD PTR _index$[ebp], 35 ; 00000023H
  0057b	74 18		 je	 SHORT $LN86@gObjGiveIt
$LN82@gObjGiveIt:
  0057d	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  00581	75 06		 jne	 SHORT $LN81@gObjGiveIt
  00583	83 7d e8 24	 cmp	 DWORD PTR _index$[ebp], 36 ; 00000024H
  00587	74 0c		 je	 SHORT $LN86@gObjGiveIt
$LN81@gObjGiveIt:
  00589	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  0058d	75 0b		 jne	 SHORT $LN87@gObjGiveIt
  0058f	83 7d e8 25	 cmp	 DWORD PTR _index$[ebp], 37 ; 00000025H
  00593	75 05		 jne	 SHORT $LN87@gObjGiveIt
$LN86@gObjGiveIt:

; 206  : 		{
; 207  : 			continue;

  00595	e9 ea fe ff ff	 jmp	 $LN96@gObjGiveIt
$LN87@gObjGiveIt:

; 208  : 		}
; 209  : 
; 210  :         if ( (type == 14 && index == 35)
; 211  :           || (type == 14 && index == 36)
; 212  :           || (type == 14 && index == 37)
; 213  :           || (type == 14 && index == 38)
; 214  :           || (type == 14 && index == 39)
; 215  :           || (type == 14 && index == 40) )

  0059a	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  0059e	75 06		 jne	 SHORT $LN78@gObjGiveIt
  005a0	83 7d e8 23	 cmp	 DWORD PTR _index$[ebp], 35 ; 00000023H
  005a4	74 3c		 je	 SHORT $LN79@gObjGiveIt
$LN78@gObjGiveIt:
  005a6	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  005aa	75 06		 jne	 SHORT $LN77@gObjGiveIt
  005ac	83 7d e8 24	 cmp	 DWORD PTR _index$[ebp], 36 ; 00000024H
  005b0	74 30		 je	 SHORT $LN79@gObjGiveIt
$LN77@gObjGiveIt:
  005b2	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  005b6	75 06		 jne	 SHORT $LN76@gObjGiveIt
  005b8	83 7d e8 25	 cmp	 DWORD PTR _index$[ebp], 37 ; 00000025H
  005bc	74 24		 je	 SHORT $LN79@gObjGiveIt
$LN76@gObjGiveIt:
  005be	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  005c2	75 06		 jne	 SHORT $LN75@gObjGiveIt
  005c4	83 7d e8 26	 cmp	 DWORD PTR _index$[ebp], 38 ; 00000026H
  005c8	74 18		 je	 SHORT $LN79@gObjGiveIt
$LN75@gObjGiveIt:
  005ca	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  005ce	75 06		 jne	 SHORT $LN74@gObjGiveIt
  005d0	83 7d e8 27	 cmp	 DWORD PTR _index$[ebp], 39 ; 00000027H
  005d4	74 0c		 je	 SHORT $LN79@gObjGiveIt
$LN74@gObjGiveIt:
  005d6	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  005da	75 0b		 jne	 SHORT $LN80@gObjGiveIt
  005dc	83 7d e8 28	 cmp	 DWORD PTR _index$[ebp], 40 ; 00000028H
  005e0	75 05		 jne	 SHORT $LN80@gObjGiveIt
$LN79@gObjGiveIt:

; 216  : 		{
; 217  : 			continue;

  005e2	e9 9d fe ff ff	 jmp	 $LN96@gObjGiveIt
$LN80@gObjGiveIt:

; 218  : 		}
; 219  : #ifdef OLDCASHSHOP
; 220  :         if ( IsCashItem(ITEMGET(type, index)) == TRUE )
; 221  : 		{
; 222  : 			continue;
; 223  : 		}
; 224  : 
; 225  : 		if ( CanItemTouchCash(ITEMGET(type, index)) == TRUE )
; 226  : 		{
; 227  : 			continue;
; 228  : 		}
; 229  : #endif
; 230  : #ifdef LUCKYITEM
; 231  : 		if( g_LuckyItemManager.IsLuckyItemTicket(ITEMGET(type, index)) == true )

  005e7	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  005ea	c1 e0 09	 shl	 eax, 9
  005ed	03 45 e8	 add	 eax, DWORD PTR _index$[ebp]
  005f0	50		 push	 eax
  005f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  005f6	e8 00 00 00 00	 call	 ?IsLuckyItemTicket@LuckyItemManager@@QAEHH@Z ; LuckyItemManager::IsLuckyItemTicket
  005fb	83 f8 01	 cmp	 eax, 1
  005fe	75 05		 jne	 SHORT $LN73@gObjGiveIt

; 232  : 		{
; 233  : 			continue;

  00600	e9 7f fe ff ff	 jmp	 $LN96@gObjGiveIt
$LN73@gObjGiveIt:

; 234  : 		}
; 235  : 		// ----
; 236  : 		if( g_LuckyItemManager.IsLuckyItemEquipment(ITEMGET(type, index)) == true )

  00605	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00608	c1 e0 09	 shl	 eax, 9
  0060b	03 45 e8	 add	 eax, DWORD PTR _index$[ebp]
  0060e	50		 push	 eax
  0060f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  00614	e8 00 00 00 00	 call	 ?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z ; LuckyItemManager::IsLuckyItemEquipment
  00619	83 f8 01	 cmp	 eax, 1
  0061c	75 05		 jne	 SHORT $LN72@gObjGiveIt

; 237  : 		{
; 238  : 			continue;

  0061e	e9 61 fe ff ff	 jmp	 $LN96@gObjGiveIt
$LN72@gObjGiveIt:

; 239  : 		}
; 240  : #endif
; 241  : 
; 242  : 		if(		(type == 14 && index == 162)
; 243  : 			||	(type == 14 && index == 163)
; 244  : 			||	(type == 14 && index == 164)
; 245  : 			||	(type == 14 && index == 165)
; 246  : 			||	(type == 14 && index == 166) )

  00623	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  00627	75 09		 jne	 SHORT $LN69@gObjGiveIt
  00629	81 7d e8 a2 00
	00 00		 cmp	 DWORD PTR _index$[ebp], 162 ; 000000a2H
  00630	74 3c		 je	 SHORT $LN70@gObjGiveIt
$LN69@gObjGiveIt:
  00632	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  00636	75 09		 jne	 SHORT $LN68@gObjGiveIt
  00638	81 7d e8 a3 00
	00 00		 cmp	 DWORD PTR _index$[ebp], 163 ; 000000a3H
  0063f	74 2d		 je	 SHORT $LN70@gObjGiveIt
$LN68@gObjGiveIt:
  00641	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  00645	75 09		 jne	 SHORT $LN67@gObjGiveIt
  00647	81 7d e8 a4 00
	00 00		 cmp	 DWORD PTR _index$[ebp], 164 ; 000000a4H
  0064e	74 1e		 je	 SHORT $LN70@gObjGiveIt
$LN67@gObjGiveIt:
  00650	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  00654	75 09		 jne	 SHORT $LN66@gObjGiveIt
  00656	81 7d e8 a5 00
	00 00		 cmp	 DWORD PTR _index$[ebp], 165 ; 000000a5H
  0065d	74 0f		 je	 SHORT $LN70@gObjGiveIt
$LN66@gObjGiveIt:
  0065f	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  00663	75 0e		 jne	 SHORT $LN71@gObjGiveIt
  00665	81 7d e8 a6 00
	00 00		 cmp	 DWORD PTR _index$[ebp], 166 ; 000000a6H
  0066c	75 05		 jne	 SHORT $LN71@gObjGiveIt
$LN70@gObjGiveIt:

; 247  : 		{
; 248  : 			continue;

  0066e	e9 11 fe ff ff	 jmp	 $LN96@gObjGiveIt
$LN71@gObjGiveIt:

; 249  : 		}
; 250  :         
; 251  : 		//season 3.0 add-on
; 252  : 		if( (type == 14 && index == 45) ||
; 253  : 			(type == 14 && index == 46) ||
; 254  : 			(type == 14 && index == 47) ||
; 255  : 			(type == 14 && index == 48) ||
; 256  : 			(type == 14 && index == 49) ||
; 257  : 			(type == 14 && index == 50) ) 

  00673	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  00677	75 06		 jne	 SHORT $LN63@gObjGiveIt
  00679	83 7d e8 2d	 cmp	 DWORD PTR _index$[ebp], 45 ; 0000002dH
  0067d	74 3c		 je	 SHORT $LN64@gObjGiveIt
$LN63@gObjGiveIt:
  0067f	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  00683	75 06		 jne	 SHORT $LN62@gObjGiveIt
  00685	83 7d e8 2e	 cmp	 DWORD PTR _index$[ebp], 46 ; 0000002eH
  00689	74 30		 je	 SHORT $LN64@gObjGiveIt
$LN62@gObjGiveIt:
  0068b	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  0068f	75 06		 jne	 SHORT $LN61@gObjGiveIt
  00691	83 7d e8 2f	 cmp	 DWORD PTR _index$[ebp], 47 ; 0000002fH
  00695	74 24		 je	 SHORT $LN64@gObjGiveIt
$LN61@gObjGiveIt:
  00697	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  0069b	75 06		 jne	 SHORT $LN60@gObjGiveIt
  0069d	83 7d e8 30	 cmp	 DWORD PTR _index$[ebp], 48 ; 00000030H
  006a1	74 18		 je	 SHORT $LN64@gObjGiveIt
$LN60@gObjGiveIt:
  006a3	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  006a7	75 06		 jne	 SHORT $LN59@gObjGiveIt
  006a9	83 7d e8 31	 cmp	 DWORD PTR _index$[ebp], 49 ; 00000031H
  006ad	74 0c		 je	 SHORT $LN64@gObjGiveIt
$LN59@gObjGiveIt:
  006af	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  006b3	75 0b		 jne	 SHORT $LN65@gObjGiveIt
  006b5	83 7d e8 32	 cmp	 DWORD PTR _index$[ebp], 50 ; 00000032H
  006b9	75 05		 jne	 SHORT $LN65@gObjGiveIt
$LN64@gObjGiveIt:

; 258  : 		{
; 259  : 			continue;

  006bb	e9 c4 fd ff ff	 jmp	 $LN96@gObjGiveIt
$LN65@gObjGiveIt:

; 260  : 		}
; 261  : 
; 262  : 		//season 2.5 add-on
; 263  : 		if( (type == 13 && index == 41) ) 

  006c0	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  006c4	75 0b		 jne	 SHORT $LN58@gObjGiveIt
  006c6	83 7d e8 29	 cmp	 DWORD PTR _index$[ebp], 41 ; 00000029H
  006ca	75 05		 jne	 SHORT $LN58@gObjGiveIt

; 264  : 		{
; 265  : 			continue;

  006cc	e9 b3 fd ff ff	 jmp	 $LN96@gObjGiveIt
$LN58@gObjGiveIt:

; 266  : 		}
; 267  : 
; 268  : 		if ( (type == 13 && index < 8) || 
; 269  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 270  : 			(type == 12 && index == 15) || 
; 271  : 			(type == 13 && index == 14) || 
; 272  : 			(type == 14 && index == 31 ) )

  006d1	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  006d5	75 06		 jne	 SHORT $LN55@gObjGiveIt
  006d7	83 7d e8 08	 cmp	 DWORD PTR _index$[ebp], 8
  006db	7c 62		 jl	 SHORT $LN56@gObjGiveIt
$LN55@gObjGiveIt:
  006dd	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  006e1	75 30		 jne	 SHORT $LN54@gObjGiveIt
  006e3	83 7d e8 09	 cmp	 DWORD PTR _index$[ebp], 9
  006e7	74 56		 je	 SHORT $LN56@gObjGiveIt
  006e9	83 7d e8 0a	 cmp	 DWORD PTR _index$[ebp], 10 ; 0000000aH
  006ed	74 50		 je	 SHORT $LN56@gObjGiveIt
  006ef	83 7d e8 0d	 cmp	 DWORD PTR _index$[ebp], 13 ; 0000000dH
  006f3	74 4a		 je	 SHORT $LN56@gObjGiveIt
  006f5	83 7d e8 0e	 cmp	 DWORD PTR _index$[ebp], 14 ; 0000000eH
  006f9	74 44		 je	 SHORT $LN56@gObjGiveIt
  006fb	83 7d e8 10	 cmp	 DWORD PTR _index$[ebp], 16 ; 00000010H
  006ff	74 3e		 je	 SHORT $LN56@gObjGiveIt
  00701	83 7d e8 11	 cmp	 DWORD PTR _index$[ebp], 17 ; 00000011H
  00705	74 38		 je	 SHORT $LN56@gObjGiveIt
  00707	83 7d e8 12	 cmp	 DWORD PTR _index$[ebp], 18 ; 00000012H
  0070b	74 32		 je	 SHORT $LN56@gObjGiveIt
  0070d	83 7d e8 16	 cmp	 DWORD PTR _index$[ebp], 22 ; 00000016H
  00711	74 2c		 je	 SHORT $LN56@gObjGiveIt
$LN54@gObjGiveIt:
  00713	83 7d ec 0c	 cmp	 DWORD PTR _type$[ebp], 12 ; 0000000cH
  00717	75 06		 jne	 SHORT $LN53@gObjGiveIt
  00719	83 7d e8 0f	 cmp	 DWORD PTR _index$[ebp], 15 ; 0000000fH
  0071d	74 20		 je	 SHORT $LN56@gObjGiveIt
$LN53@gObjGiveIt:
  0071f	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  00723	75 06		 jne	 SHORT $LN52@gObjGiveIt
  00725	83 7d e8 0e	 cmp	 DWORD PTR _index$[ebp], 14 ; 0000000eH
  00729	74 14		 je	 SHORT $LN56@gObjGiveIt
$LN52@gObjGiveIt:
  0072b	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  0072f	0f 85 0a 02 00
	00		 jne	 $LN57@gObjGiveIt
  00735	83 7d e8 1f	 cmp	 DWORD PTR _index$[ebp], 31 ; 0000001fH
  00739	0f 85 00 02 00
	00		 jne	 $LN57@gObjGiveIt
$LN56@gObjGiveIt:

; 273  : 		{
; 274  : 			int perc = rand() % 11;

  0073f	e8 00 00 00 00	 call	 _rand
  00744	99		 cdq
  00745	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0074a	f7 f9		 idiv	 ecx
  0074c	89 55 88	 mov	 DWORD PTR _perc$227954[ebp], edx

; 275  : 			BOOL bCheckDevil = FALSE;

  0074f	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _bCheckDevil$227955[ebp], 0

; 276  : 
; 277  : 			if ( type == 12 && index == 15 )

  00756	83 7d ec 0c	 cmp	 DWORD PTR _type$[ebp], 12 ; 0000000cH
  0075a	75 38		 jne	 SHORT $LN51@gObjGiveIt
  0075c	83 7d e8 0f	 cmp	 DWORD PTR _index$[ebp], 15 ; 0000000fH
  00760	75 32		 jne	 SHORT $LN51@gObjGiveIt

; 278  : 			{
; 279  : 				if ( monsterlevel >= 13 && monsterlevel <= 66 )

  00762	83 7d 08 0d	 cmp	 DWORD PTR _monsterlevel$[ebp], 13 ; 0000000dH
  00766	7c 25		 jl	 SHORT $LN50@gObjGiveIt
  00768	83 7d 08 42	 cmp	 DWORD PTR _monsterlevel$[ebp], 66 ; 00000042H
  0076c	7f 1f		 jg	 SHORT $LN50@gObjGiveIt

; 280  : 				{
; 281  : 					perc = rand() % 7 ;

  0076e	e8 00 00 00 00	 call	 _rand
  00773	99		 cdq
  00774	b9 07 00 00 00	 mov	 ecx, 7
  00779	f7 f9		 idiv	 ecx
  0077b	89 55 88	 mov	 DWORD PTR _perc$227954[ebp], edx

; 282  : 					
; 283  : 					if ( perc < 3 )

  0077e	83 7d 88 03	 cmp	 DWORD PTR _perc$227954[ebp], 3
  00782	7d 07		 jge	 SHORT $LN49@gObjGiveIt

; 284  : 					{
; 285  : 						perc = 0;

  00784	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _perc$227954[ebp], 0
$LN49@gObjGiveIt:

; 286  : 					}
; 287  : 				}
; 288  : 				else

  0078b	eb 07		 jmp	 SHORT $LN51@gObjGiveIt
$LN50@gObjGiveIt:

; 289  : 				{
; 290  : 					perc = 1;

  0078d	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _perc$227954[ebp], 1
$LN51@gObjGiveIt:

; 291  : 				}
; 292  : 			}
; 293  : 
; 294  : 			if ( type == 14 && index == 17 )

  00794	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  00798	75 3f		 jne	 SHORT $LN47@gObjGiveIt
  0079a	83 7d e8 11	 cmp	 DWORD PTR _index$[ebp], 17 ; 00000011H
  0079e	75 39		 jne	 SHORT $LN47@gObjGiveIt

; 295  : 			{
; 296  : 				if ( gEyesOfDevilSquareDropRate <= 0 )

  007a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA, 0 ; gEyesOfDevilSquareDropRate
  007a7	7f 0a		 jg	 SHORT $LN46@gObjGiveIt

; 297  : 				{
; 298  : 					gEyesOfDevilSquareDropRate = 1;

  007a9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA, 1 ; gEyesOfDevilSquareDropRate
$LN46@gObjGiveIt:

; 299  : 				}
; 300  : 
; 301  : 				perc = rand() % gEyesOfDevilSquareDropRate;

  007b3	e8 00 00 00 00	 call	 _rand
  007b8	99		 cdq
  007b9	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA ; gEyesOfDevilSquareDropRate
  007bf	89 55 88	 mov	 DWORD PTR _perc$227954[ebp], edx

; 302  : 				bCheckDevil = 1;

  007c2	c7 45 84 01 00
	00 00		 mov	 DWORD PTR _bCheckDevil$227955[ebp], 1

; 303  : 
; 304  : 				if ( gDevilSquareEvent == 0 )

  007c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  007d0	75 07		 jne	 SHORT $LN47@gObjGiveIt

; 305  : 				{
; 306  : 					perc = 1;

  007d2	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _perc$227954[ebp], 1
$LN47@gObjGiveIt:

; 307  : 				}
; 308  : 			}
; 309  : 
; 310  : 			if ( type == 14 && index == 18 )

  007d9	83 7d ec 0e	 cmp	 DWORD PTR _type$[ebp], 14 ; 0000000eH
  007dd	75 2c		 jne	 SHORT $LN44@gObjGiveIt
  007df	83 7d e8 12	 cmp	 DWORD PTR _index$[ebp], 18 ; 00000012H
  007e3	75 26		 jne	 SHORT $LN44@gObjGiveIt

; 311  : 			{
; 312  : 				perc = rand() % gKeyOfDevilSquareDropRate;

  007e5	e8 00 00 00 00	 call	 _rand
  007ea	99		 cdq
  007eb	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gKeyOfDevilSquareDropRate@@3HA ; gKeyOfDevilSquareDropRate
  007f1	89 55 88	 mov	 DWORD PTR _perc$227954[ebp], edx

; 313  : 				bCheckDevil = 1;

  007f4	c7 45 84 01 00
	00 00		 mov	 DWORD PTR _bCheckDevil$227955[ebp], 1

; 314  : 
; 315  : 				if ( gDevilSquareEvent == 0 )

  007fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00802	75 07		 jne	 SHORT $LN44@gObjGiveIt

; 316  : 				{
; 317  : 					perc = 1;

  00804	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _perc$227954[ebp], 1
$LN44@gObjGiveIt:

; 318  : 				}
; 319  : 
; 320  : 			}
; 321  : 
; 322  : 			if ( perc == 0 )

  0080b	83 7d 88 00	 cmp	 DWORD PTR _perc$227954[ebp], 0
  0080f	0f 85 25 01 00
	00		 jne	 $LN42@gObjGiveIt

; 323  : 			{
; 324  : 				if ( bCheckDevil == 1 )

  00815	83 7d 84 01	 cmp	 DWORD PTR _bCheckDevil$227955[ebp], 1
  00819	0f 85 c5 00 00
	00		 jne	 $LN41@gObjGiveIt

; 325  : 				{
; 326  : 					int devilitemlevel = 0;

  0081f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _devilitemlevel$227967[ebp], 0

; 327  : 
; 328  : 					if ( (rand() % 5) != 0 )

  00826	e8 00 00 00 00	 call	 _rand
  0082b	99		 cdq
  0082c	b9 05 00 00 00	 mov	 ecx, 5
  00831	f7 f9		 idiv	 ecx
  00833	85 d2		 test	 edx, edx
  00835	0f 84 a7 00 00
	00		 je	 $LN40@gObjGiveIt

; 329  : 					{
; 330  : 						if ( monsterlevel < 3 )

  0083b	83 7d 08 03	 cmp	 DWORD PTR _monsterlevel$[ebp], 3
  0083f	7d 09		 jge	 SHORT $LN39@gObjGiveIt

; 331  : 						{
; 332  : 							devilitemlevel = 0;

  00841	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _devilitemlevel$227967[ebp], 0
  00848	eb 52		 jmp	 SHORT $LN38@gObjGiveIt
$LN39@gObjGiveIt:

; 333  : 						}
; 334  : 						else if ( monsterlevel < 36 ) 

  0084a	83 7d 08 24	 cmp	 DWORD PTR _monsterlevel$[ebp], 36 ; 00000024H
  0084e	7d 09		 jge	 SHORT $LN37@gObjGiveIt

; 335  : 						{
; 336  : 							devilitemlevel = 1;

  00850	c7 45 80 01 00
	00 00		 mov	 DWORD PTR _devilitemlevel$227967[ebp], 1
  00857	eb 43		 jmp	 SHORT $LN38@gObjGiveIt
$LN37@gObjGiveIt:

; 337  : 						}
; 338  : 						else if ( monsterlevel < 47 )

  00859	83 7d 08 2f	 cmp	 DWORD PTR _monsterlevel$[ebp], 47 ; 0000002fH
  0085d	7d 09		 jge	 SHORT $LN35@gObjGiveIt

; 339  : 						{
; 340  : 							devilitemlevel = 2;

  0085f	c7 45 80 02 00
	00 00		 mov	 DWORD PTR _devilitemlevel$227967[ebp], 2
  00866	eb 34		 jmp	 SHORT $LN38@gObjGiveIt
$LN35@gObjGiveIt:

; 341  : 						}
; 342  : 						else if ( monsterlevel < 60 )

  00868	83 7d 08 3c	 cmp	 DWORD PTR _monsterlevel$[ebp], 60 ; 0000003cH
  0086c	7d 09		 jge	 SHORT $LN33@gObjGiveIt

; 343  : 						{
; 344  : 							devilitemlevel = 3;

  0086e	c7 45 80 03 00
	00 00		 mov	 DWORD PTR _devilitemlevel$227967[ebp], 3
  00875	eb 25		 jmp	 SHORT $LN38@gObjGiveIt
$LN33@gObjGiveIt:

; 345  : 						}
; 346  : 						else if ( monsterlevel < 70 )

  00877	83 7d 08 46	 cmp	 DWORD PTR _monsterlevel$[ebp], 70 ; 00000046H
  0087b	7d 09		 jge	 SHORT $LN31@gObjGiveIt

; 347  : 						{
; 348  : 							devilitemlevel = 4;

  0087d	c7 45 80 04 00
	00 00		 mov	 DWORD PTR _devilitemlevel$227967[ebp], 4
  00884	eb 16		 jmp	 SHORT $LN38@gObjGiveIt
$LN31@gObjGiveIt:

; 349  : 						}
; 350  : 						else if ( monsterlevel < 80 )

  00886	83 7d 08 50	 cmp	 DWORD PTR _monsterlevel$[ebp], 80 ; 00000050H
  0088a	7d 09		 jge	 SHORT $LN29@gObjGiveIt

; 351  : 						{
; 352  : 							devilitemlevel = 5;

  0088c	c7 45 80 05 00
	00 00		 mov	 DWORD PTR _devilitemlevel$227967[ebp], 5

; 353  : 						}
; 354  : 						else 

  00893	eb 07		 jmp	 SHORT $LN38@gObjGiveIt
$LN29@gObjGiveIt:

; 355  : 						{
; 356  : 							devilitemlevel = 6;

  00895	c7 45 80 06 00
	00 00		 mov	 DWORD PTR _devilitemlevel$227967[ebp], 6
$LN38@gObjGiveIt:

; 357  : 						}
; 358  : 
; 359  : 						if ( devilitemlevel != 0 )

  0089c	83 7d 80 00	 cmp	 DWORD PTR _devilitemlevel$227967[ebp], 0
  008a0	74 40		 je	 SHORT $LN40@gObjGiveIt

; 360  : 						{
; 361  : 							if ( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )

  008a2	6a 00		 push	 0
  008a4	6a 00		 push	 0
  008a6	6a 00		 push	 0
  008a8	8b 45 80	 mov	 eax, DWORD PTR _devilitemlevel$227967[ebp]
  008ab	50		 push	 eax
  008ac	8b 4d e8	 mov	 ecx, DWORD PTR _index$[ebp]
  008af	51		 push	 ecx
  008b0	8b 55 ec	 mov	 edx, DWORD PTR _type$[ebp]
  008b3	52		 push	 edx
  008b4	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  008b7	50		 push	 eax
  008b8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  008bb	e8 00 00 00 00	 call	 ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ; CMonsterItemMng::InsertItem
  008c0	0f b6 c8	 movzx	 ecx, al
  008c3	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  008c9	74 17		 je	 SHORT $LN40@gObjGiveIt

; 362  : 							{
; 363  : 								incount++;

  008cb	8b 45 f0	 mov	 eax, DWORD PTR _incount$[ebp]
  008ce	83 c0 01	 add	 eax, 1
  008d1	89 45 f0	 mov	 DWORD PTR _incount$[ebp], eax

; 364  : 
; 365  : 								if ( incount > MAX_ITEM_IN_MONSTER -1 )

  008d4	81 7d f0 e7 03
	00 00		 cmp	 DWORD PTR _incount$[ebp], 999 ; 000003e7H
  008db	7e 05		 jle	 SHORT $LN40@gObjGiveIt

; 366  : 								{
; 367  : 									return;

  008dd	e9 8c 01 00 00	 jmp	 $LN98@gObjGiveIt
$LN40@gObjGiveIt:

; 368  : 								}
; 369  : 							}
; 370  : 						}
; 371  : 					}
; 372  : 				}

  008e2	eb 56		 jmp	 SHORT $LN42@gObjGiveIt
$LN41@gObjGiveIt:

; 373  : 				else if ( zzzItemLevel(type, index, monsterlevel ) == TRUE )

  008e4	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  008e7	50		 push	 eax
  008e8	8b 4d e8	 mov	 ecx, DWORD PTR _index$[ebp]
  008eb	51		 push	 ecx
  008ec	8b 55 ec	 mov	 edx, DWORD PTR _type$[ebp]
  008ef	52		 push	 edx
  008f0	e8 00 00 00 00	 call	 ?zzzItemLevel@@YAHHHH@Z	; zzzItemLevel
  008f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  008f8	83 f8 01	 cmp	 eax, 1
  008fb	75 3d		 jne	 SHORT $LN42@gObjGiveIt

; 374  : 				{
; 375  : 					if ( this->InsertItem(monsterlevel, type, index, 0, 0, 0, 0) != (BYTE)-1 )

  008fd	6a 00		 push	 0
  008ff	6a 00		 push	 0
  00901	6a 00		 push	 0
  00903	6a 00		 push	 0
  00905	8b 45 e8	 mov	 eax, DWORD PTR _index$[ebp]
  00908	50		 push	 eax
  00909	8b 4d ec	 mov	 ecx, DWORD PTR _type$[ebp]
  0090c	51		 push	 ecx
  0090d	8b 55 08	 mov	 edx, DWORD PTR _monsterlevel$[ebp]
  00910	52		 push	 edx
  00911	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00914	e8 00 00 00 00	 call	 ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ; CMonsterItemMng::InsertItem
  00919	0f b6 c0	 movzx	 eax, al
  0091c	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00921	74 17		 je	 SHORT $LN42@gObjGiveIt

; 376  : 					{
; 377  : 						incount++;

  00923	8b 45 f0	 mov	 eax, DWORD PTR _incount$[ebp]
  00926	83 c0 01	 add	 eax, 1
  00929	89 45 f0	 mov	 DWORD PTR _incount$[ebp], eax

; 378  : 
; 379  : 						if ( incount > MAX_ITEM_IN_MONSTER -1 )

  0092c	81 7d f0 e7 03
	00 00		 cmp	 DWORD PTR _incount$[ebp], 999 ; 000003e7H
  00933	7e 05		 jle	 SHORT $LN42@gObjGiveIt

; 380  : 						{
; 381  : 							return;

  00935	e9 34 01 00 00	 jmp	 $LN98@gObjGiveIt
$LN42@gObjGiveIt:

; 382  : 						}
; 383  : 					}
; 384  : 				}
; 385  : 			}
; 386  : 		}
; 387  : 		else

  0093a	e9 15 01 00 00	 jmp	 $LN20@gObjGiveIt
$LN57@gObjGiveIt:

; 388  : 		{
; 389  : 			result = GetLevelItem(type, index, monsterlevel);

  0093f	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00942	50		 push	 eax
  00943	8b 4d e8	 mov	 ecx, DWORD PTR _index$[ebp]
  00946	51		 push	 ecx
  00947	8b 55 ec	 mov	 edx, DWORD PTR _type$[ebp]
  0094a	52		 push	 edx
  0094b	e8 00 00 00 00	 call	 ?GetLevelItem@@YAHHHH@Z	; GetLevelItem
  00950	83 c4 0c	 add	 esp, 12			; 0000000cH
  00953	89 45 f4	 mov	 DWORD PTR _result$[ebp], eax

; 390  : 
; 391  : 			if ( result >= 0 )

  00956	83 7d f4 00	 cmp	 DWORD PTR _result$[ebp], 0
  0095a	0f 8c f4 00 00
	00		 jl	 $LN20@gObjGiveIt

; 392  : 			{
; 393  : 				if ( (type == 13 && index == 10) || (type == 12 && index == 11 ) )

  00960	83 7d ec 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  00964	75 06		 jne	 SHORT $LN16@gObjGiveIt
  00966	83 7d e8 0a	 cmp	 DWORD PTR _index$[ebp], 10 ; 0000000aH
  0096a	74 0c		 je	 SHORT $LN17@gObjGiveIt
$LN16@gObjGiveIt:
  0096c	83 7d ec 0c	 cmp	 DWORD PTR _type$[ebp], 12 ; 0000000cH
  00970	75 4b		 jne	 SHORT $LN18@gObjGiveIt
  00972	83 7d e8 0b	 cmp	 DWORD PTR _index$[ebp], 11 ; 0000000bH
  00976	75 45		 jne	 SHORT $LN18@gObjGiveIt
$LN17@gObjGiveIt:

; 394  : 				{
; 395  : 					if ( this->InsertItem(monsterlevel, type, index, result, 0,0,0) != 0xFF )

  00978	6a 00		 push	 0
  0097a	6a 00		 push	 0
  0097c	6a 00		 push	 0
  0097e	8b 45 f4	 mov	 eax, DWORD PTR _result$[ebp]
  00981	50		 push	 eax
  00982	8b 4d e8	 mov	 ecx, DWORD PTR _index$[ebp]
  00985	51		 push	 ecx
  00986	8b 55 ec	 mov	 edx, DWORD PTR _type$[ebp]
  00989	52		 push	 edx
  0098a	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  0098d	50		 push	 eax
  0098e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00991	e8 00 00 00 00	 call	 ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ; CMonsterItemMng::InsertItem
  00996	0f b6 c8	 movzx	 ecx, al
  00999	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0099f	74 17		 je	 SHORT $LN15@gObjGiveIt

; 396  : 					{
; 397  : 						incount++;

  009a1	8b 45 f0	 mov	 eax, DWORD PTR _incount$[ebp]
  009a4	83 c0 01	 add	 eax, 1
  009a7	89 45 f0	 mov	 DWORD PTR _incount$[ebp], eax

; 398  : 
; 399  : 						if ( incount > MAX_ITEM_IN_MONSTER -1 )

  009aa	81 7d f0 e7 03
	00 00		 cmp	 DWORD PTR _incount$[ebp], 999 ; 000003e7H
  009b1	7e 05		 jle	 SHORT $LN15@gObjGiveIt

; 400  : 						{
; 401  : 							return;

  009b3	e9 b6 00 00 00	 jmp	 $LN98@gObjGiveIt
$LN15@gObjGiveIt:

; 402  : 						}
; 403  : 					}
; 404  : 				}

  009b8	e9 97 00 00 00	 jmp	 $LN20@gObjGiveIt
$LN18@gObjGiveIt:

; 405  : 				else if ( result <= maxlevel )

  009bd	8b 45 f4	 mov	 eax, DWORD PTR _result$[ebp]
  009c0	3b 45 0c	 cmp	 eax, DWORD PTR _maxlevel$[ebp]
  009c3	0f 8f 8b 00 00
	00		 jg	 $LN20@gObjGiveIt

; 406  : 				{
; 407  : 					if ( type == 12 )

  009c9	83 7d ec 0c	 cmp	 DWORD PTR _type$[ebp], 12 ; 0000000cH
  009cd	75 0d		 jne	 SHORT $LN11@gObjGiveIt

; 408  : 					{
; 409  : 						if ( index != 11 )

  009cf	83 7d e8 0b	 cmp	 DWORD PTR _index$[ebp], 11 ; 0000000bH
  009d3	74 07		 je	 SHORT $LN11@gObjGiveIt

; 410  : 						{
; 411  : 							result = 0;

  009d5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN11@gObjGiveIt:

; 412  : 						}
; 413  : 					}
; 414  : 
; 415  : 					if ( type == 12 && index == 11 )

  009dc	83 7d ec 0c	 cmp	 DWORD PTR _type$[ebp], 12 ; 0000000cH
  009e0	75 08		 jne	 SHORT $LN9@gObjGiveIt
  009e2	83 7d e8 0b	 cmp	 DWORD PTR _index$[ebp], 11 ; 0000000bH
  009e6	75 02		 jne	 SHORT $LN9@gObjGiveIt

; 416  : 					{
; 417  : 
; 418  : 					}
; 419  : 					else

  009e8	eb 0e		 jmp	 SHORT $LN8@gObjGiveIt
$LN9@gObjGiveIt:

; 420  : 					{
; 421  : 						if ( result > maxlevel )

  009ea	8b 45 f4	 mov	 eax, DWORD PTR _result$[ebp]
  009ed	3b 45 0c	 cmp	 eax, DWORD PTR _maxlevel$[ebp]
  009f0	7e 06		 jle	 SHORT $LN8@gObjGiveIt

; 422  : 						{
; 423  : 							result = maxlevel;

  009f2	8b 45 0c	 mov	 eax, DWORD PTR _maxlevel$[ebp]
  009f5	89 45 f4	 mov	 DWORD PTR _result$[ebp], eax
$LN8@gObjGiveIt:

; 424  : 						}
; 425  : 					}
; 426  : 
; 427  : 					if ( (type == 4 && index == 7) || (type == 4 && index == 15) )

  009f8	83 7d ec 04	 cmp	 DWORD PTR _type$[ebp], 4
  009fc	75 06		 jne	 SHORT $LN4@gObjGiveIt
  009fe	83 7d e8 07	 cmp	 DWORD PTR _index$[ebp], 7
  00a02	74 0c		 je	 SHORT $LN5@gObjGiveIt
$LN4@gObjGiveIt:
  00a04	83 7d ec 04	 cmp	 DWORD PTR _type$[ebp], 4
  00a08	75 0d		 jne	 SHORT $LN6@gObjGiveIt
  00a0a	83 7d e8 0f	 cmp	 DWORD PTR _index$[ebp], 15 ; 0000000fH
  00a0e	75 07		 jne	 SHORT $LN6@gObjGiveIt
$LN5@gObjGiveIt:

; 428  : 					{
; 429  : 						result = 0;

  00a10	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN6@gObjGiveIt:

; 430  : 					}
; 431  : 				
; 432  : 
; 433  : 					if ( this->InsertItem(monsterlevel, type, index,result, 0,0,0) != (BYTE)-1 )

  00a17	6a 00		 push	 0
  00a19	6a 00		 push	 0
  00a1b	6a 00		 push	 0
  00a1d	8b 45 f4	 mov	 eax, DWORD PTR _result$[ebp]
  00a20	50		 push	 eax
  00a21	8b 4d e8	 mov	 ecx, DWORD PTR _index$[ebp]
  00a24	51		 push	 ecx
  00a25	8b 55 ec	 mov	 edx, DWORD PTR _type$[ebp]
  00a28	52		 push	 edx
  00a29	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00a2c	50		 push	 eax
  00a2d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a30	e8 00 00 00 00	 call	 ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ; CMonsterItemMng::InsertItem
  00a35	0f b6 c8	 movzx	 ecx, al
  00a38	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00a3e	74 14		 je	 SHORT $LN20@gObjGiveIt

; 434  : 					{
; 435  : 						incount++;

  00a40	8b 45 f0	 mov	 eax, DWORD PTR _incount$[ebp]
  00a43	83 c0 01	 add	 eax, 1
  00a46	89 45 f0	 mov	 DWORD PTR _incount$[ebp], eax

; 436  : 
; 437  : 						if ( incount > MAX_ITEM_IN_MONSTER-1 )

  00a49	81 7d f0 e7 03
	00 00		 cmp	 DWORD PTR _incount$[ebp], 999 ; 000003e7H
  00a50	7e 02		 jle	 SHORT $LN20@gObjGiveIt

; 438  : 						{
; 439  : 							return;

  00a52	eb 1a		 jmp	 SHORT $LN98@gObjGiveIt
$LN20@gObjGiveIt:

; 440  : 						}
; 441  : 					}
; 442  : 				}
; 443  : 			}
; 444  : 		}
; 445  : 		
; 446  : 		if ( this->m_iMonsterInvenItemCount[monsterlevel] >= MAX_ITEM_IN_MONSTER )

  00a54	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00a57	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a5a	81 bc 81 24 03
	00 00 e8 03 00
	00		 cmp	 DWORD PTR [ecx+eax*4+804], 1000 ; 000003e8H
  00a65	7c 02		 jl	 SHORT $LN1@gObjGiveIt

; 447  : 		{
; 448  : 			return;

  00a67	eb 05		 jmp	 SHORT $LN98@gObjGiveIt
$LN1@gObjGiveIt:

; 449  : 		}
; 450  : 		
; 451  : 	}

  00a69	e9 16 fa ff ff	 jmp	 $LN96@gObjGiveIt
$LN98@gObjGiveIt:

; 452  : }

  00a6e	5f		 pop	 edi
  00a6f	5e		 pop	 esi
  00a70	5b		 pop	 ebx
  00a71	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a74	33 cd		 xor	 ecx, ebp
  00a76	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a7b	8b e5		 mov	 esp, ebp
  00a7d	5d		 pop	 ebp
  00a7e	c2 08 00	 ret	 8
?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z ENDP	; CMonsterItemMng::gObjGiveItemSearch
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_MonsterItemMng@@YAXXZ
text$yc	SEGMENT
??__Eg_MonsterItemMng@@YAXXZ PROC			; `dynamic initializer for 'g_MonsterItemMng'', COMDAT

; 10   : CMonsterItemMng g_MonsterItemMng;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMng@@3VCMonsterItemMng@@A ; g_MonsterItemMng
  0000e	e8 00 00 00 00	 call	 ??0CMonsterItemMng@@QAE@XZ ; CMonsterItemMng::CMonsterItemMng
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_MonsterItemMng@@YAXXZ ; `dynamic atexit destructor for 'g_MonsterItemMng''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_MonsterItemMng@@YAXXZ ENDP			; `dynamic initializer for 'g_MonsterItemMng''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_MonsterItemMng@@YAXXZ
text$yd	SEGMENT
??__Fg_MonsterItemMng@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MonsterItemMng'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMng@@3VCMonsterItemMng@@A ; g_MonsterItemMng
  0000e	e8 00 00 00 00	 call	 ??1CMonsterItemMng@@UAE@XZ ; CMonsterItemMng::~CMonsterItemMng
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_MonsterItemMng@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MonsterItemMng''
text$yd	ENDS
PUBLIC	?g_MonsterItemMng@@3VCMonsterItemMng@@A		; g_MonsterItemMng
_BSS	SEGMENT
?g_MonsterItemMng@@3VCMonsterItemMng@@A DB 0744H DUP (?) ; g_MonsterItemMng
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MonsterItemMng$initializer$ DD FLAT:??__Eg_MonsterItemMng@@YAXXZ
CRT$XCU	ENDS
END
