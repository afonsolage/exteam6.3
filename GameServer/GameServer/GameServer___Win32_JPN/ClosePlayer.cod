; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ClosePlayer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7Ccloseplayer@@6B@				; Ccloseplayer::`vftable'
PUBLIC	??0Ccloseplayer@@QAE@XZ				; Ccloseplayer::Ccloseplayer
PUBLIC	??_R4Ccloseplayer@@6B@				; Ccloseplayer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCcloseplayer@@@8			; Ccloseplayer `RTTI Type Descriptor'
PUBLIC	??_R3Ccloseplayer@@8				; Ccloseplayer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Ccloseplayer@@8				; Ccloseplayer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Ccloseplayer@@8			; Ccloseplayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECcloseplayer@@UAEPAXI@Z:PROC		; Ccloseplayer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Ccloseplayer@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\closeplayer.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@Ccloseplayer@@8 DD FLAT:??_R0?AVCcloseplayer@@@8 ; Ccloseplayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Ccloseplayer@@8
rdata$r	ENDS
;	COMDAT ??_R2Ccloseplayer@@8
rdata$r	SEGMENT
??_R2Ccloseplayer@@8 DD FLAT:??_R1A@?0A@EA@Ccloseplayer@@8 ; Ccloseplayer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Ccloseplayer@@8
rdata$r	SEGMENT
??_R3Ccloseplayer@@8 DD 00H				; Ccloseplayer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Ccloseplayer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCcloseplayer@@@8
_DATA	SEGMENT
??_R0?AVCcloseplayer@@@8 DD FLAT:??_7type_info@@6B@	; Ccloseplayer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCcloseplayer@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Ccloseplayer@@6B@
rdata$r	SEGMENT
??_R4Ccloseplayer@@6B@ DD 00H				; Ccloseplayer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCcloseplayer@@@8
	DD	FLAT:??_R3Ccloseplayer@@8
rdata$r	ENDS
;	COMDAT ??_7Ccloseplayer@@6B@
CONST	SEGMENT
??_7Ccloseplayer@@6B@ DD FLAT:??_R4Ccloseplayer@@6B@	; Ccloseplayer::`vftable'
	DD	FLAT:??_ECcloseplayer@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Ccloseplayer@@QAE@XZ PROC				; Ccloseplayer::Ccloseplayer
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Ccloseplayer@@6B@

; 12   : 	return;	
; 13   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0Ccloseplayer@@QAE@XZ ENDP				; Ccloseplayer::Ccloseplayer
_TEXT	ENDS
PUBLIC	??1Ccloseplayer@@UAE@XZ				; Ccloseplayer::~Ccloseplayer
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCcloseplayer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCcloseplayer@@UAEPAXI@Z PROC			; Ccloseplayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1Ccloseplayer@@UAE@XZ	; Ccloseplayer::~Ccloseplayer
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCcloseplayer@@UAEPAXI@Z ENDP			; Ccloseplayer::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Ccloseplayer@@UAE@XZ PROC				; Ccloseplayer::~Ccloseplayer
; _this$ = ecx

; 16   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Ccloseplayer@@6B@

; 17   : 	return;
; 18   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1Ccloseplayer@@UAE@XZ ENDP				; Ccloseplayer::~Ccloseplayer
_TEXT	ENDS
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@Ccloseplayer@@QAEXPAD@Z			; Ccloseplayer::Load
EXTRN	_fclose:PROC
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	?gObjGetIndex@@YAHPAD@Z:PROC			; gObjGetIndex
EXTRN	_strlen:PROC
EXTRN	_strcpy:PROC
EXTRN	_memset:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_closeplayerid$ = -68					; size = 50
_aIndex$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Load@Ccloseplayer@@QAEXPAD@Z PROC			; Ccloseplayer::Load
; _this$ = ecx

; 21   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0004e	33 c5		 xor	 eax, ebp
  00050	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00053	53		 push	 ebx
  00054	56		 push	 esi
  00055	57		 push	 edi
  00056	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 	int Token; 
; 23   : 	int aIndex;
; 24   : 	char closeplayerid[50];
; 25   : 	SMDFile=fopen(filename, "r");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0005e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _fopen
  00067	83 c4 08	 add	 esp, 8
  0006a	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 26   : 
; 27   : 	if (SMDFile == 0)

  0006f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00076	75 22		 jne	 SHORT $LN7@Load

; 28   : 	{
; 29   : 		LogAdd(lMsg.Get(MSGGET(1, 213)), filename);

  00078	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0007b	50		 push	 eax
  0007c	68 d5 01 00 00	 push	 469			; 000001d5H
  00081	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00086	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00092	83 c4 08	 add	 esp, 8

; 30   : 	}
; 31   : 	else

  00095	e9 a6 00 00 00	 jmp	 $LN8@Load
$LN7@Load:

; 32   : 	{
; 33   : 		aIndex=0;

  0009a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _aIndex$[ebp], 0
$LN5@Load:

; 34   : 		while ( true )

  000a1	b8 01 00 00 00	 mov	 eax, 1
  000a6	85 c0		 test	 eax, eax
  000a8	0f 84 84 00 00
	00		 je	 $LN4@Load

; 35   : 		{
; 36   : 			Token=GetToken();

  000ae	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000b3	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 37   : 			if (Token == 2)

  000b6	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  000ba	75 02		 jne	 SHORT $LN3@Load

; 38   : 			{
; 39   : 				break;

  000bc	eb 74		 jmp	 SHORT $LN4@Load
$LN3@Load:

; 40   : 			}
; 41   : 			memset(closeplayerid, 0, sizeof(closeplayerid) );

  000be	6a 32		 push	 50			; 00000032H
  000c0	6a 00		 push	 0
  000c2	8d 45 bc	 lea	 eax, DWORD PTR _closeplayerid$[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _memset
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : 			strcpy(&closeplayerid[0], TokenString);

  000ce	68 00 00 00 00	 push	 OFFSET _TokenString
  000d3	8d 45 bc	 lea	 eax, DWORD PTR _closeplayerid$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _strcpy
  000dc	83 c4 08	 add	 esp, 8

; 43   : 
; 44   : 			if ( strlen(closeplayerid) > 0 )

  000df	8d 45 bc	 lea	 eax, DWORD PTR _closeplayerid$[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _strlen
  000e8	83 c4 04	 add	 esp, 4
  000eb	85 c0		 test	 eax, eax
  000ed	76 3e		 jbe	 SHORT $LN2@Load

; 45   : 			{
; 46   : 				aIndex=gObjGetIndex(closeplayerid);	

  000ef	8d 45 bc	 lea	 eax, DWORD PTR _closeplayerid$[ebp]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ?gObjGetIndex@@YAHPAD@Z	; gObjGetIndex
  000f8	83 c4 04	 add	 esp, 4
  000fb	89 45 f0	 mov	 DWORD PTR _aIndex$[ebp], eax

; 47   : 				if ( aIndex >= 0 )

  000fe	83 7d f0 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00102	7c 29		 jl	 SHORT $LN2@Load

; 48   : 				{
; 49   : 					LogAdd(lMsg.Get(MSGGET(1, 191)), closeplayerid);

  00104	8d 45 bc	 lea	 eax, DWORD PTR _closeplayerid$[ebp]
  00107	50		 push	 eax
  00108	68 bf 01 00 00	 push	 447			; 000001bfH
  0010d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00112	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00117	50		 push	 eax
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0011e	83 c4 08	 add	 esp, 8

; 50   : 					CloseClient(aIndex);

  00121	8b 45 f0	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  0012a	83 c4 04	 add	 esp, 4
$LN2@Load:

; 51   : 				}
; 52   : 			}
; 53   : 		}

  0012d	e9 6f ff ff ff	 jmp	 $LN5@Load
$LN4@Load:

; 54   : 		fclose(SMDFile);

  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 _fclose
  0013d	83 c4 04	 add	 esp, 4
$LN8@Load:

; 55   : 	}
; 56   : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	33 cd		 xor	 ecx, ebp
  00148	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c2 04 00	 ret	 4
?Load@Ccloseplayer@@QAEXPAD@Z ENDP			; Ccloseplayer::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_TokenNumber DD	01H DUP (?)
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00160	55		 push	 ebp
  00161	8b ec		 mov	 ebp, esp
  00163	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0016e	33 c5		 xor	 eax, ebp
  00170	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00173	53		 push	 ebx
  00174	56		 push	 esi
  00175	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00176	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 _fgetc
  00188	83 c4 04	 add	 esp, 4
  0018b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0018e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00192	83 f9 ff	 cmp	 ecx, -1
  00195	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00197	b8 02 00 00 00	 mov	 eax, 2
  0019c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  001a1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  001a3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  001a7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  001aa	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  001ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 _fgetc
  001b7	83 c4 04	 add	 esp, 4
  001ba	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  001bd	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  001c1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  001c4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  001c6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  001ca	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  001cd	74 1c		 je	 SHORT $LN23@GetToken
  001cf	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  001d3	83 f8 ff	 cmp	 eax, -1
  001d6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  001d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 _fgetc
  001e3	83 c4 04	 add	 esp, 4
  001e6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  001e9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  001eb	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  001ef	83 f8 ff	 cmp	 eax, -1
  001f2	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  001f4	b8 02 00 00 00	 mov	 eax, 2
  001f9	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  001fe	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00202	50		 push	 eax
  00203	e8 00 00 00 00	 call	 _isspace
  00208	83 c4 04	 add	 esp, 4
  0020b	85 c0		 test	 eax, eax
  0020d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00213	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00217	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0021d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00223	83 e9 22	 sub	 ecx, 34			; 00000022H
  00226	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0022c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00233	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00239	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0023f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00246	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0024d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00257	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0025c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00261	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00266	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00275	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0027a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0027f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00289	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0028e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00293	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00298	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  002a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  002a7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  002ac	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  002b1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  002bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  002c0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  002c5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  002ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  002cf	50		 push	 eax
  002d0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  002d4	51		 push	 ecx
  002d5	e8 00 00 00 00	 call	 _ungetc
  002da	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  002dd	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  002e0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  002e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  002e8	50		 push	 eax
  002e9	e8 00 00 00 00	 call	 _getc
  002ee	83 c4 04	 add	 esp, 4
  002f1	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  002f4	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  002f8	83 f9 ff	 cmp	 ecx, -1
  002fb	74 36		 je	 SHORT $LN12@GetToken
  002fd	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00301	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00304	74 1a		 je	 SHORT $LN11@GetToken
  00306	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0030a	50		 push	 eax
  0030b	e8 00 00 00 00	 call	 _isdigit
  00310	83 c4 04	 add	 esp, 4
  00313	85 c0		 test	 eax, eax
  00315	75 09		 jne	 SHORT $LN11@GetToken
  00317	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0031b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0031e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00320	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00323	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00326	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00328	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0032b	83 c0 01	 add	 eax, 1
  0032e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00331	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00333	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00336	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00339	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 _atof
  00342	83 c4 04	 add	 esp, 4
  00345	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0034b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00355	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0035a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0035f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00364	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0036b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00370	50		 push	 eax
  00371	e8 00 00 00 00	 call	 _getc
  00376	83 c4 04	 add	 esp, 4
  00379	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0037c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00380	83 f9 ff	 cmp	 ecx, -1
  00383	74 1c		 je	 SHORT $LN8@GetToken
  00385	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00389	83 f8 22	 cmp	 eax, 34			; 00000022H
  0038c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0038e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00391	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00394	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00396	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00399	83 c0 01	 add	 eax, 1
  0039c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0039f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  003a1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003a5	83 f8 22	 cmp	 eax, 34			; 00000022H
  003a8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  003aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  003af	50		 push	 eax
  003b0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  003b4	51		 push	 ecx
  003b5	e8 00 00 00 00	 call	 _ungetc
  003ba	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  003bd	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003c0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  003c3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  003cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  003d2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  003d7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  003dc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003e0	50		 push	 eax
  003e1	e8 00 00 00 00	 call	 _isalpha
  003e6	83 c4 04	 add	 esp, 4
  003e9	85 c0		 test	 eax, eax
  003eb	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  003f1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  003f8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003fb	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  003fe	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00400	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00403	83 c0 01	 add	 eax, 1
  00406	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0040e	50		 push	 eax
  0040f	e8 00 00 00 00	 call	 _getc
  00414	83 c4 04	 add	 esp, 4
  00417	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0041a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0041e	83 f9 ff	 cmp	 ecx, -1
  00421	74 36		 je	 SHORT $LN3@GetToken
  00423	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00427	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0042a	74 1a		 je	 SHORT $LN2@GetToken
  0042c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00430	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00433	74 11		 je	 SHORT $LN2@GetToken
  00435	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00439	50		 push	 eax
  0043a	e8 00 00 00 00	 call	 _isalnum
  0043f	83 c4 04	 add	 esp, 4
  00442	85 c0		 test	 eax, eax
  00444	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00446	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00449	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0044c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0044e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00451	83 c0 01	 add	 eax, 1
  00454	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00457	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00459	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0045e	50		 push	 eax
  0045f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00463	51		 push	 ecx
  00464	e8 00 00 00 00	 call	 _ungetc
  00469	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0046c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0046f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00472	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0047c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00481	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00483	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00485	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0048f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00494	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00496	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00498	5f		 pop	 edi
  00499	5e		 pop	 esi
  0049a	5b		 pop	 ebx
  0049b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0049e	33 cd		 xor	 ecx, ebp
  004a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004a5	8b e5		 mov	 esp, ebp
  004a7	5d		 pop	 ebp
  004a8	c3		 ret	 0
  004a9	8d 49 00	 npad	 3
$LN35@GetToken:
  004ac	00 00 00 00	 DD	 $LN10@GetToken
  004b0	00 00 00 00	 DD	 $LN19@GetToken
  004b4	00 00 00 00	 DD	 $LN17@GetToken
  004b8	00 00 00 00	 DD	 $LN14@GetToken
  004bc	00 00 00 00	 DD	 $LN18@GetToken
  004c0	00 00 00 00	 DD	 $LN16@GetToken
  004c4	00 00 00 00	 DD	 $LN15@GetToken
  004c8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  004cc	00		 DB	 0
  004cd	01		 DB	 1
  004ce	07		 DB	 7
  004cf	07		 DB	 7
  004d0	07		 DB	 7
  004d1	07		 DB	 7
  004d2	07		 DB	 7
  004d3	07		 DB	 7
  004d4	07		 DB	 7
  004d5	07		 DB	 7
  004d6	02		 DB	 2
  004d7	03		 DB	 3
  004d8	03		 DB	 3
  004d9	07		 DB	 7
  004da	03		 DB	 3
  004db	03		 DB	 3
  004dc	03		 DB	 3
  004dd	03		 DB	 3
  004de	03		 DB	 3
  004df	03		 DB	 3
  004e0	03		 DB	 3
  004e1	03		 DB	 3
  004e2	03		 DB	 3
  004e3	03		 DB	 3
  004e4	07		 DB	 7
  004e5	04		 DB	 4
  004e6	07		 DB	 7
  004e7	07		 DB	 7
  004e8	07		 DB	 7
  004e9	07		 DB	 7
  004ea	07		 DB	 7
  004eb	07		 DB	 7
  004ec	07		 DB	 7
  004ed	07		 DB	 7
  004ee	07		 DB	 7
  004ef	07		 DB	 7
  004f0	07		 DB	 7
  004f1	07		 DB	 7
  004f2	07		 DB	 7
  004f3	07		 DB	 7
  004f4	07		 DB	 7
  004f5	07		 DB	 7
  004f6	07		 DB	 7
  004f7	07		 DB	 7
  004f8	07		 DB	 7
  004f9	07		 DB	 7
  004fa	07		 DB	 7
  004fb	07		 DB	 7
  004fc	07		 DB	 7
  004fd	07		 DB	 7
  004fe	07		 DB	 7
  004ff	07		 DB	 7
  00500	07		 DB	 7
  00501	07		 DB	 7
  00502	07		 DB	 7
  00503	07		 DB	 7
  00504	07		 DB	 7
  00505	07		 DB	 7
  00506	07		 DB	 7
  00507	07		 DB	 7
  00508	07		 DB	 7
  00509	07		 DB	 7
  0050a	07		 DB	 7
  0050b	07		 DB	 7
  0050c	07		 DB	 7
  0050d	07		 DB	 7
  0050e	07		 DB	 7
  0050f	07		 DB	 7
  00510	07		 DB	 7
  00511	07		 DB	 7
  00512	07		 DB	 7
  00513	07		 DB	 7
  00514	07		 DB	 7
  00515	07		 DB	 7
  00516	07		 DB	 7
  00517	07		 DB	 7
  00518	07		 DB	 7
  00519	07		 DB	 7
  0051a	07		 DB	 7
  0051b	07		 DB	 7
  0051c	07		 DB	 7
  0051d	07		 DB	 7
  0051e	07		 DB	 7
  0051f	07		 DB	 7
  00520	07		 DB	 7
  00521	07		 DB	 7
  00522	07		 DB	 7
  00523	07		 DB	 7
  00524	07		 DB	 7
  00525	05		 DB	 5
  00526	07		 DB	 7
  00527	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
END
