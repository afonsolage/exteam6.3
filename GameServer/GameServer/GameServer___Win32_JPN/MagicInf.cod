; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\MagicInf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Clear@CMagicInf@@QAEXXZ			; CMagicInf::Clear
PUBLIC	??_7CMagicInf@@6B@				; CMagicInf::`vftable'
PUBLIC	??0CMagicInf@@QAE@XZ				; CMagicInf::CMagicInf
PUBLIC	??_R4CMagicInf@@6B@				; CMagicInf::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMagicInf@@@8				; CMagicInf `RTTI Type Descriptor'
PUBLIC	??_R3CMagicInf@@8				; CMagicInf::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMagicInf@@8				; CMagicInf::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMagicInf@@8			; CMagicInf::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMagicInf@@UAEPAXI@Z:PROC			; CMagicInf::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMagicInf@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\magicinf.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMagicInf@@8 DD FLAT:??_R0?AVCMagicInf@@@8 ; CMagicInf::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_R2CMagicInf@@8
rdata$r	SEGMENT
??_R2CMagicInf@@8 DD FLAT:??_R1A@?0A@EA@CMagicInf@@8	; CMagicInf::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMagicInf@@8
rdata$r	SEGMENT
??_R3CMagicInf@@8 DD 00H				; CMagicInf::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMagicInf@@@8
_DATA	SEGMENT
??_R0?AVCMagicInf@@@8 DD FLAT:??_7type_info@@6B@	; CMagicInf `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMagicInf@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMagicInf@@6B@
rdata$r	SEGMENT
??_R4CMagicInf@@6B@ DD 00H				; CMagicInf::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMagicInf@@@8
	DD	FLAT:??_R3CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_7CMagicInf@@6B@
CONST	SEGMENT
??_7CMagicInf@@6B@ DD FLAT:??_R4CMagicInf@@6B@		; CMagicInf::`vftable'
	DD	FLAT:??_ECMagicInf@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMagicInf@@QAE@XZ PROC				; CMagicInf::CMagicInf
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMagicInf@@6B@

; 15   : 	this->Clear();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Clear@CMagicInf@@QAEXXZ ; CMagicInf::Clear

; 16   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CMagicInf@@QAE@XZ ENDP				; CMagicInf::CMagicInf
_TEXT	ENDS
PUBLIC	??1CMagicInf@@UAE@XZ				; CMagicInf::~CMagicInf
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMagicInf@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMagicInf@@UAEPAXI@Z PROC				; CMagicInf::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMagicInf@@UAE@XZ	; CMagicInf::~CMagicInf
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCMagicInf@@UAEPAXI@Z ENDP				; CMagicInf::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMagicInf@@UAE@XZ PROC				; CMagicInf::~CMagicInf
; _this$ = ecx

; 19   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMagicInf@@6B@

; 20   : 	this->m_DamageMin  = 0;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 21   : 	this->m_DamageMax  = 0;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 22   : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
??1CMagicInf@@UAE@XZ ENDP				; CMagicInf::~CMagicInf
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?Clear@CMagicInf@@QAEXXZ PROC				; CMagicInf::Clear
; _this$ = ecx

; 25   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	83 ec 44	 sub	 esp, 68			; 00000044H
  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	this->m_Skill  = 0xFF;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	c7 40 08 ff 00
	00 00		 mov	 DWORD PTR [eax+8], 255	; 000000ffH

; 27   : 	this->m_Level  = 0;

  00076	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00079	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 28   : 	this->m_bPass	= 0;

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0

; 29   : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?Clear@CMagicInf@@QAEXXZ ENDP				; CMagicInf::Clear
_TEXT	ENDS
PUBLIC	?IsMagic@CMagicInf@@QAEHXZ			; CMagicInf::IsMagic
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMagic@CMagicInf@@QAEHXZ PROC				; CMagicInf::IsMagic
; _this$ = ecx

; 32   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 44	 sub	 esp, 68			; 00000044H
  00096	53		 push	 ebx
  00097	56		 push	 esi
  00098	57		 push	 edi
  00099	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 	if ( this->m_Skill == 0xFF )

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	81 78 08 ff 00
	00 00		 cmp	 DWORD PTR [eax+8], 255	; 000000ffH
  000a6	75 04		 jne	 SHORT $LN1@IsMagic

; 34   : 	{
; 35   : 		return false;

  000a8	33 c0		 xor	 eax, eax
  000aa	eb 05		 jmp	 SHORT $LN2@IsMagic
$LN1@IsMagic:

; 36   : 	}
; 37   : 	return true;

  000ac	b8 01 00 00 00	 mov	 eax, 1
$LN2@IsMagic:

; 38   : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?IsMagic@CMagicInf@@QAEHXZ ENDP				; CMagicInf::IsMagic
_TEXT	ENDS
PUBLIC	?GetSkillNumberInex@@YAHHHH@Z			; GetSkillNumberInex
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv90 = -72						; size = 4
_skillnumber$ = -4					; size = 4
_type$ = 8						; size = 4
_Index$ = 12						; size = 4
_level$ = 16						; size = 4
?GetSkillNumberInex@@YAHHHH@Z PROC			; GetSkillNumberInex

; 41   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp
  000c3	83 ec 48	 sub	 esp, 72			; 00000048H
  000c6	53		 push	 ebx
  000c7	56		 push	 esi
  000c8	57		 push	 edi

; 42   : 	int skillnumber = -1;

  000c9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _skillnumber$[ebp], -1

; 43   : 
; 44   : 	if ( type == 15 )

  000d0	83 7d 08 0f	 cmp	 DWORD PTR _type$[ebp], 15 ; 0000000fH
  000d4	0f 85 7c 01 00
	00		 jne	 $LN70@GetSkillNu

; 45   : 	{
; 46   : 		if ( Index >= 0 && Index < 16 )

  000da	83 7d 0c 00	 cmp	 DWORD PTR _Index$[ebp], 0
  000de	7c 14		 jl	 SHORT $LN69@GetSkillNu
  000e0	83 7d 0c 10	 cmp	 DWORD PTR _Index$[ebp], 16 ; 00000010H
  000e4	7d 0e		 jge	 SHORT $LN69@GetSkillNu

; 47   : 		{
; 48   : 			skillnumber = Index + 1;

  000e6	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]
  000e9	83 c0 01	 add	 eax, 1
  000ec	89 45 fc	 mov	 DWORD PTR _skillnumber$[ebp], eax
  000ef	e9 5d 01 00 00	 jmp	 $LN68@GetSkillNu
$LN69@GetSkillNu:

; 49   : 		}
; 50   : 		else if ( Index == 16 )

  000f4	83 7d 0c 10	 cmp	 DWORD PTR _Index$[ebp], 16 ; 00000010H
  000f8	75 0c		 jne	 SHORT $LN67@GetSkillNu

; 51   : 		{
; 52   : 			skillnumber = 38;

  000fa	c7 45 fc 26 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 38 ; 00000026H
  00101	e9 4b 01 00 00	 jmp	 $LN68@GetSkillNu
$LN67@GetSkillNu:

; 53   : 		}
; 54   : 		else if ( Index == 17 )

  00106	83 7d 0c 11	 cmp	 DWORD PTR _Index$[ebp], 17 ; 00000011H
  0010a	75 0c		 jne	 SHORT $LN65@GetSkillNu

; 55   : 		{
; 56   : 			skillnumber = 39;

  0010c	c7 45 fc 27 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 39 ; 00000027H
  00113	e9 39 01 00 00	 jmp	 $LN68@GetSkillNu
$LN65@GetSkillNu:

; 57   : 		}
; 58   : 		else if ( Index == 18 )

  00118	83 7d 0c 12	 cmp	 DWORD PTR _Index$[ebp], 18 ; 00000012H
  0011c	75 0c		 jne	 SHORT $LN63@GetSkillNu

; 59   : 		{
; 60   : 			skillnumber = 40;

  0011e	c7 45 fc 28 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 40 ; 00000028H
  00125	e9 27 01 00 00	 jmp	 $LN68@GetSkillNu
$LN63@GetSkillNu:

; 61   : 		}
; 62   : 		else if ( Index == 19 )

  0012a	83 7d 0c 13	 cmp	 DWORD PTR _Index$[ebp], 19 ; 00000013H
  0012e	75 0c		 jne	 SHORT $LN61@GetSkillNu

; 63   : 		{
; 64   : 			skillnumber = 215;

  00130	c7 45 fc d7 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 215 ; 000000d7H
  00137	e9 15 01 00 00	 jmp	 $LN68@GetSkillNu
$LN61@GetSkillNu:

; 65   : 		}
; 66   : 		else if ( Index == 20 )

  0013c	83 7d 0c 14	 cmp	 DWORD PTR _Index$[ebp], 20 ; 00000014H
  00140	75 0c		 jne	 SHORT $LN59@GetSkillNu

; 67   : 		{
; 68   : 			skillnumber = 214;

  00142	c7 45 fc d6 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 214 ; 000000d6H
  00149	e9 03 01 00 00	 jmp	 $LN68@GetSkillNu
$LN59@GetSkillNu:

; 69   : 		}
; 70   : 		else if ( Index == 21 )

  0014e	83 7d 0c 15	 cmp	 DWORD PTR _Index$[ebp], 21 ; 00000015H
  00152	75 0c		 jne	 SHORT $LN57@GetSkillNu

; 71   : 		{
; 72   : 			skillnumber = 230; //lightning shock

  00154	c7 45 fc e6 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 230 ; 000000e6H
  0015b	e9 f1 00 00 00	 jmp	 $LN68@GetSkillNu
$LN57@GetSkillNu:

; 73   : 		}
; 74   : 		else if ( Index == 22 )

  00160	83 7d 0c 16	 cmp	 DWORD PTR _Index$[ebp], 22 ; 00000016H
  00164	75 0c		 jne	 SHORT $LN55@GetSkillNu

; 75   : 		{
; 76   : 			skillnumber = 217;

  00166	c7 45 fc d9 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 217 ; 000000d9H
  0016d	e9 df 00 00 00	 jmp	 $LN68@GetSkillNu
$LN55@GetSkillNu:

; 77   : 		}
; 78   : 		else if ( Index == 23 )

  00172	83 7d 0c 17	 cmp	 DWORD PTR _Index$[ebp], 23 ; 00000017H
  00176	75 0c		 jne	 SHORT $LN53@GetSkillNu

; 79   : 		{
; 80   : 			skillnumber = 218; //berserker

  00178	c7 45 fc da 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 218 ; 000000daH
  0017f	e9 cd 00 00 00	 jmp	 $LN68@GetSkillNu
$LN53@GetSkillNu:

; 81   : 		}
; 82   : 		else if ( Index == 24 )

  00184	83 7d 0c 18	 cmp	 DWORD PTR _Index$[ebp], 24 ; 00000018H
  00188	75 0c		 jne	 SHORT $LN51@GetSkillNu

; 83   : 		{
; 84   : 			skillnumber = 219;

  0018a	c7 45 fc db 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 219 ; 000000dbH
  00191	e9 bb 00 00 00	 jmp	 $LN68@GetSkillNu
$LN51@GetSkillNu:

; 85   : 		}
; 86   : 		else if ( Index == 25 )

  00196	83 7d 0c 19	 cmp	 DWORD PTR _Index$[ebp], 25 ; 00000019H
  0019a	75 0c		 jne	 SHORT $LN49@GetSkillNu

; 87   : 		{
; 88   : 			skillnumber = 220;

  0019c	c7 45 fc dc 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 220 ; 000000dcH
  001a3	e9 a9 00 00 00	 jmp	 $LN68@GetSkillNu
$LN49@GetSkillNu:

; 89   : 		}
; 90   : 		else if ( Index == 26 )

  001a8	83 7d 0c 1a	 cmp	 DWORD PTR _Index$[ebp], 26 ; 0000001aH
  001ac	75 0c		 jne	 SHORT $LN47@GetSkillNu

; 91   : 		{
; 92   : 			skillnumber = 221;

  001ae	c7 45 fc dd 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 221 ; 000000ddH
  001b5	e9 97 00 00 00	 jmp	 $LN68@GetSkillNu
$LN47@GetSkillNu:

; 93   : 		}
; 94   : 		else if ( Index == 27 )

  001ba	83 7d 0c 1b	 cmp	 DWORD PTR _Index$[ebp], 27 ; 0000001bH
  001be	75 0c		 jne	 SHORT $LN45@GetSkillNu

; 95   : 		{
; 96   : 			skillnumber = 222;

  001c0	c7 45 fc de 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 222 ; 000000deH
  001c7	e9 85 00 00 00	 jmp	 $LN68@GetSkillNu
$LN45@GetSkillNu:

; 97   : 		}
; 98   : 		//s4
; 99   : 		else if ( Index == 28 )

  001cc	83 7d 0c 1c	 cmp	 DWORD PTR _Index$[ebp], 28 ; 0000001cH
  001d0	75 09		 jne	 SHORT $LN43@GetSkillNu

; 100  : 		{
; 101  : 			skillnumber = 233;

  001d2	c7 45 fc e9 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 233 ; 000000e9H
  001d9	eb 76		 jmp	 SHORT $LN68@GetSkillNu
$LN43@GetSkillNu:

; 102  : 		}
; 103  : 		else if ( Index == 29 )

  001db	83 7d 0c 1d	 cmp	 DWORD PTR _Index$[ebp], 29 ; 0000001dH
  001df	75 09		 jne	 SHORT $LN41@GetSkillNu

; 104  : 		{
; 105  : 			skillnumber = 237;

  001e1	c7 45 fc ed 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 237 ; 000000edH
  001e8	eb 67		 jmp	 SHORT $LN68@GetSkillNu
$LN41@GetSkillNu:

; 106  : 		}
; 107  : 		else if( Index == 30 )

  001ea	83 7d 0c 1e	 cmp	 DWORD PTR _Index$[ebp], 30 ; 0000001eH
  001ee	75 09		 jne	 SHORT $LN39@GetSkillNu

; 108  : 		{
; 109  : 			skillnumber = 262;

  001f0	c7 45 fc 06 01
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 262 ; 00000106H
  001f7	eb 58		 jmp	 SHORT $LN68@GetSkillNu
$LN39@GetSkillNu:

; 110  : 		}
; 111  : 		else if( Index == 31 )

  001f9	83 7d 0c 1f	 cmp	 DWORD PTR _Index$[ebp], 31 ; 0000001fH
  001fd	75 09		 jne	 SHORT $LN37@GetSkillNu

; 112  : 		{
; 113  : 			skillnumber = 263;

  001ff	c7 45 fc 07 01
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 263 ; 00000107H
  00206	eb 49		 jmp	 SHORT $LN68@GetSkillNu
$LN37@GetSkillNu:

; 114  : 		}
; 115  : 		else if( Index == 32 )

  00208	83 7d 0c 20	 cmp	 DWORD PTR _Index$[ebp], 32 ; 00000020H
  0020c	75 09		 jne	 SHORT $LN35@GetSkillNu

; 116  : 		{
; 117  : 			skillnumber = 264;

  0020e	c7 45 fc 08 01
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 264 ; 00000108H
  00215	eb 3a		 jmp	 SHORT $LN68@GetSkillNu
$LN35@GetSkillNu:

; 118  : 		}
; 119  : 		else if( Index == 33 )

  00217	83 7d 0c 21	 cmp	 DWORD PTR _Index$[ebp], 33 ; 00000021H
  0021b	75 09		 jne	 SHORT $LN33@GetSkillNu

; 120  : 		{
; 121  : 			skillnumber = 265;

  0021d	c7 45 fc 09 01
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 265 ; 00000109H
  00224	eb 2b		 jmp	 SHORT $LN68@GetSkillNu
$LN33@GetSkillNu:

; 122  : 		}
; 123  : 		else if( Index == 34 )

  00226	83 7d 0c 22	 cmp	 DWORD PTR _Index$[ebp], 34 ; 00000022H
  0022a	75 09		 jne	 SHORT $LN31@GetSkillNu

; 124  : 		{
; 125  : 			skillnumber = 266;

  0022c	c7 45 fc 0a 01
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 266 ; 0000010aH
  00233	eb 1c		 jmp	 SHORT $LN68@GetSkillNu
$LN31@GetSkillNu:

; 126  : 		}
; 127  : 		else if( Index == 35 )

  00235	83 7d 0c 23	 cmp	 DWORD PTR _Index$[ebp], 35 ; 00000023H
  00239	75 09		 jne	 SHORT $LN29@GetSkillNu

; 128  : 		{
; 129  : 			skillnumber = 267;

  0023b	c7 45 fc 0b 01
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 267 ; 0000010bH
  00242	eb 0d		 jmp	 SHORT $LN68@GetSkillNu
$LN29@GetSkillNu:

; 130  : 		}
; 131  : 		else if( Index == 36 )

  00244	83 7d 0c 24	 cmp	 DWORD PTR _Index$[ebp], 36 ; 00000024H
  00248	75 07		 jne	 SHORT $LN68@GetSkillNu

; 132  : 		{
; 133  : 			skillnumber = 268;

  0024a	c7 45 fc 0c 01
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 268 ; 0000010cH
$LN68@GetSkillNu:

; 134  : 		}
; 135  : 	}

  00251	e9 0f 01 00 00	 jmp	 $LN26@GetSkillNu
$LN70@GetSkillNu:

; 136  : 	else if ( type == 12 )

  00256	83 7d 08 0c	 cmp	 DWORD PTR _type$[ebp], 12 ; 0000000cH
  0025a	0f 85 05 01 00
	00		 jne	 $LN26@GetSkillNu

; 137  : 	{
; 138  : 		switch ( Index )

  00260	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]
  00263	89 45 b8	 mov	 DWORD PTR tv90[ebp], eax
  00266	8b 4d b8	 mov	 ecx, DWORD PTR tv90[ebp]
  00269	83 e9 07	 sub	 ecx, 7
  0026c	89 4d b8	 mov	 DWORD PTR tv90[ebp], ecx
  0026f	83 7d b8 29	 cmp	 DWORD PTR tv90[ebp], 41	; 00000029H
  00273	0f 87 ec 00 00
	00		 ja	 $LN26@GetSkillNu
  00279	8b 55 b8	 mov	 edx, DWORD PTR tv90[ebp]
  0027c	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN73@GetSkillNu[edx]
  00283	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN74@GetSkillNu[eax*4]
$LN22@GetSkillNu:

; 139  : 		{
; 140  : 			case 7:		skillnumber = 41;	break;

  0028a	c7 45 fc 29 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 41 ; 00000029H
  00291	e9 cf 00 00 00	 jmp	 $LN26@GetSkillNu
$LN21@GetSkillNu:

; 141  : 			case 8:		skillnumber = 26;	break;

  00296	c7 45 fc 1a 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 26 ; 0000001aH
  0029d	e9 c3 00 00 00	 jmp	 $LN26@GetSkillNu
$LN20@GetSkillNu:

; 142  : 			case 9:		skillnumber = 27;	break;

  002a2	c7 45 fc 1b 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 27 ; 0000001bH
  002a9	e9 b7 00 00 00	 jmp	 $LN26@GetSkillNu
$LN19@GetSkillNu:

; 143  : 			case 10:	skillnumber = 28;	break;

  002ae	c7 45 fc 1c 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 28 ; 0000001cH
  002b5	e9 ab 00 00 00	 jmp	 $LN26@GetSkillNu
$LN18@GetSkillNu:

; 144  : 			case 12:	skillnumber = 42;	break;

  002ba	c7 45 fc 2a 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 42 ; 0000002aH
  002c1	e9 9f 00 00 00	 jmp	 $LN26@GetSkillNu
$LN17@GetSkillNu:

; 145  : 			case 13:	skillnumber = 47;	break;

  002c6	c7 45 fc 2f 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 47 ; 0000002fH
  002cd	e9 93 00 00 00	 jmp	 $LN26@GetSkillNu
$LN16@GetSkillNu:

; 146  : 			case 14:	skillnumber = 48;	break;

  002d2	c7 45 fc 30 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 48 ; 00000030H
  002d9	e9 87 00 00 00	 jmp	 $LN26@GetSkillNu
$LN15@GetSkillNu:

; 147  : 			case 19:	skillnumber = 43;	break;

  002de	c7 45 fc 2b 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 43 ; 0000002bH
  002e5	eb 7e		 jmp	 SHORT $LN26@GetSkillNu
$LN14@GetSkillNu:

; 148  : 			case 17:	skillnumber = 52;	break;

  002e7	c7 45 fc 34 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 52 ; 00000034H
  002ee	eb 75		 jmp	 SHORT $LN26@GetSkillNu
$LN13@GetSkillNu:

; 149  : 			case 18:	skillnumber = 51;	break;

  002f0	c7 45 fc 33 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 51 ; 00000033H
  002f7	eb 6c		 jmp	 SHORT $LN26@GetSkillNu
$LN12@GetSkillNu:

; 150  : 			case 16:	skillnumber = 55;	break;

  002f9	c7 45 fc 37 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 55 ; 00000037H
  00300	eb 63		 jmp	 SHORT $LN26@GetSkillNu
$LN11@GetSkillNu:

; 151  : 			case 21:	skillnumber = 61;	break;

  00302	c7 45 fc 3d 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 61 ; 0000003dH
  00309	eb 5a		 jmp	 SHORT $LN26@GetSkillNu
$LN10@GetSkillNu:

; 152  : 			case 22:	skillnumber = 63;	break;

  0030b	c7 45 fc 3f 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 63 ; 0000003fH
  00312	eb 51		 jmp	 SHORT $LN26@GetSkillNu
$LN9@GetSkillNu:

; 153  : 			case 23:	skillnumber = 64;	break;

  00314	c7 45 fc 40 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 64 ; 00000040H
  0031b	eb 48		 jmp	 SHORT $LN26@GetSkillNu
$LN8@GetSkillNu:

; 154  : 			case 24:	skillnumber = 65;	break;

  0031d	c7 45 fc 41 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 65 ; 00000041H
  00324	eb 3f		 jmp	 SHORT $LN26@GetSkillNu
$LN7@GetSkillNu:

; 155  : 			case 11:	skillnumber = level + 30;	break;

  00326	8b 45 10	 mov	 eax, DWORD PTR _level$[ebp]
  00329	83 c0 1e	 add	 eax, 30			; 0000001eH
  0032c	89 45 fc	 mov	 DWORD PTR _skillnumber$[ebp], eax
  0032f	eb 34		 jmp	 SHORT $LN26@GetSkillNu
$LN6@GetSkillNu:

; 156  : 			case 35:	skillnumber = 78;	break;

  00331	c7 45 fc 4e 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 78 ; 0000004eH
  00338	eb 2b		 jmp	 SHORT $LN26@GetSkillNu
$LN5@GetSkillNu:

; 157  : 			//
; 158  : 			case 44: skillnumber = 232; break;

  0033a	c7 45 fc e8 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 232 ; 000000e8H
  00341	eb 22		 jmp	 SHORT $LN26@GetSkillNu
$LN4@GetSkillNu:

; 159  : 			case 45: skillnumber = 235; break;

  00343	c7 45 fc eb 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 235 ; 000000ebH
  0034a	eb 19		 jmp	 SHORT $LN26@GetSkillNu
$LN3@GetSkillNu:

; 160  : 			case 46: skillnumber = 234; break;

  0034c	c7 45 fc ea 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 234 ; 000000eaH
  00353	eb 10		 jmp	 SHORT $LN26@GetSkillNu
$LN2@GetSkillNu:

; 161  : 			case 47: skillnumber = 236; break;

  00355	c7 45 fc ec 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 236 ; 000000ecH
  0035c	eb 07		 jmp	 SHORT $LN26@GetSkillNu
$LN1@GetSkillNu:

; 162  : 			case 48: skillnumber = 238; break;

  0035e	c7 45 fc ee 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 238 ; 000000eeH
$LN26@GetSkillNu:

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;

  00365	8b 45 fc	 mov	 eax, DWORD PTR _skillnumber$[ebp]

; 167  : }

  00368	5f		 pop	 edi
  00369	5e		 pop	 esi
  0036a	5b		 pop	 ebx
  0036b	8b e5		 mov	 esp, ebp
  0036d	5d		 pop	 ebp
  0036e	c3		 ret	 0
  0036f	90		 npad	 1
$LN74@GetSkillNu:
  00370	00 00 00 00	 DD	 $LN22@GetSkillNu
  00374	00 00 00 00	 DD	 $LN21@GetSkillNu
  00378	00 00 00 00	 DD	 $LN20@GetSkillNu
  0037c	00 00 00 00	 DD	 $LN19@GetSkillNu
  00380	00 00 00 00	 DD	 $LN7@GetSkillNu
  00384	00 00 00 00	 DD	 $LN18@GetSkillNu
  00388	00 00 00 00	 DD	 $LN17@GetSkillNu
  0038c	00 00 00 00	 DD	 $LN16@GetSkillNu
  00390	00 00 00 00	 DD	 $LN12@GetSkillNu
  00394	00 00 00 00	 DD	 $LN14@GetSkillNu
  00398	00 00 00 00	 DD	 $LN13@GetSkillNu
  0039c	00 00 00 00	 DD	 $LN15@GetSkillNu
  003a0	00 00 00 00	 DD	 $LN11@GetSkillNu
  003a4	00 00 00 00	 DD	 $LN10@GetSkillNu
  003a8	00 00 00 00	 DD	 $LN9@GetSkillNu
  003ac	00 00 00 00	 DD	 $LN8@GetSkillNu
  003b0	00 00 00 00	 DD	 $LN6@GetSkillNu
  003b4	00 00 00 00	 DD	 $LN5@GetSkillNu
  003b8	00 00 00 00	 DD	 $LN4@GetSkillNu
  003bc	00 00 00 00	 DD	 $LN3@GetSkillNu
  003c0	00 00 00 00	 DD	 $LN2@GetSkillNu
  003c4	00 00 00 00	 DD	 $LN1@GetSkillNu
  003c8	00 00 00 00	 DD	 $LN26@GetSkillNu
$LN73@GetSkillNu:
  003cc	00		 DB	 0
  003cd	01		 DB	 1
  003ce	02		 DB	 2
  003cf	03		 DB	 3
  003d0	04		 DB	 4
  003d1	05		 DB	 5
  003d2	06		 DB	 6
  003d3	07		 DB	 7
  003d4	16		 DB	 22			; 00000016H
  003d5	08		 DB	 8
  003d6	09		 DB	 9
  003d7	0a		 DB	 10			; 0000000aH
  003d8	0b		 DB	 11			; 0000000bH
  003d9	16		 DB	 22			; 00000016H
  003da	0c		 DB	 12			; 0000000cH
  003db	0d		 DB	 13			; 0000000dH
  003dc	0e		 DB	 14			; 0000000eH
  003dd	0f		 DB	 15			; 0000000fH
  003de	16		 DB	 22			; 00000016H
  003df	16		 DB	 22			; 00000016H
  003e0	16		 DB	 22			; 00000016H
  003e1	16		 DB	 22			; 00000016H
  003e2	16		 DB	 22			; 00000016H
  003e3	16		 DB	 22			; 00000016H
  003e4	16		 DB	 22			; 00000016H
  003e5	16		 DB	 22			; 00000016H
  003e6	16		 DB	 22			; 00000016H
  003e7	16		 DB	 22			; 00000016H
  003e8	10		 DB	 16			; 00000010H
  003e9	16		 DB	 22			; 00000016H
  003ea	16		 DB	 22			; 00000016H
  003eb	16		 DB	 22			; 00000016H
  003ec	16		 DB	 22			; 00000016H
  003ed	16		 DB	 22			; 00000016H
  003ee	16		 DB	 22			; 00000016H
  003ef	16		 DB	 22			; 00000016H
  003f0	16		 DB	 22			; 00000016H
  003f1	11		 DB	 17			; 00000011H
  003f2	12		 DB	 18			; 00000012H
  003f3	13		 DB	 19			; 00000013H
  003f4	14		 DB	 20			; 00000014H
  003f5	15		 DB	 21			; 00000015H
?GetSkillNumberInex@@YAHHHH@Z ENDP			; GetSkillNumberInex
_TEXT	ENDS
PUBLIC	??_C@_0EA@FEMHJFDB@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??Set@CMagicInf@@QAEHEEE@Z@4JA	; `CMagicInf::Set'::`2'::__LINE__Var
PUBLIC	?Set@CMagicInf@@QAEHEEE@Z			; CMagicInf::Set
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_0EA@FEMHJFDB@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0EA@FEMHJFDB@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\magicinf.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Set@CMagicInf@@QAEHEEE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Set@CMagicInf@@QAEHEEE@Z@4JA DD 0aaH	; `CMagicInf::Set'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_damage$ = -8						; size = 4
_this$ = -4						; size = 4
_aType$ = 8						; size = 1
_aIndex$ = 12						; size = 1
_aLevel$ = 16						; size = 1
?Set@CMagicInf@@QAEHEEE@Z PROC				; CMagicInf::Set
; _this$ = ecx

; 170  : {

  00400	55		 push	 ebp
  00401	8b ec		 mov	 ebp, esp
  00403	83 ec 48	 sub	 esp, 72			; 00000048H
  00406	53		 push	 ebx
  00407	56		 push	 esi
  00408	57		 push	 edi
  00409	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 	if ( this->m_Skill != 0xFF )

  0040c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0040f	81 78 08 ff 00
	00 00		 cmp	 DWORD PTR [eax+8], 255	; 000000ffH
  00416	74 2c		 je	 SHORT $LN2@Set

; 172  : 	{
; 173  : 		LogAdd(lMsg.Get(MSGGET(1, 203)), __FILE__, __LINE__);

  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Set@CMagicInf@@QAEHEEE@Z@4JA
  0041d	83 c0 03	 add	 eax, 3
  00420	50		 push	 eax
  00421	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FEMHJFDB@d?3?2projects?2exteam6?43?2source?2gam@
  00426	68 cb 01 00 00	 push	 459			; 000001cbH
  0042b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00430	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00435	50		 push	 eax
  00436	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0043c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 174  : 		return -1;

  0043f	83 c8 ff	 or	 eax, -1
  00442	eb 6d		 jmp	 SHORT $LN3@Set
$LN2@Set:

; 175  : 	}
; 176  : 
; 177  : 	this->m_Level = aLevel;

  00444	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00447	8a 4d 10	 mov	 cl, BYTE PTR _aLevel$[ebp]
  0044a	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 178  : 	this->m_Skill = GetSkillNumberInex(aType, aIndex, aLevel);

  0044d	0f b6 45 10	 movzx	 eax, BYTE PTR _aLevel$[ebp]
  00451	50		 push	 eax
  00452	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _aIndex$[ebp]
  00456	51		 push	 ecx
  00457	0f b6 55 08	 movzx	 edx, BYTE PTR _aType$[ebp]
  0045b	52		 push	 edx
  0045c	e8 00 00 00 00	 call	 ?GetSkillNumberInex@@YAHHHH@Z ; GetSkillNumberInex
  00461	83 c4 0c	 add	 esp, 12			; 0000000cH
  00464	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00467	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 179  : 	
; 180  : 	if ( this->m_Skill < 0 )

  0046a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0046d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00471	7d 0a		 jge	 SHORT $LN1@Set

; 181  : 	{
; 182  : 		this->m_Skill = 1;

  00473	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00476	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1
$LN1@Set:

; 183  : 	}
; 184  : 
; 185  : 	int damage = MagicDamageC.SkillGet(this->m_Skill);

  0047d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00480	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00483	51		 push	 ecx
  00484	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00489	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0048e	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax

; 186  : 	this->m_DamageMin = damage;

  00491	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00494	8b 4d f8	 mov	 ecx, DWORD PTR _damage$[ebp]
  00497	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 187  : 	this->m_DamageMax = damage + damage/2;

  0049a	8b 45 f8	 mov	 eax, DWORD PTR _damage$[ebp]
  0049d	99		 cdq
  0049e	2b c2		 sub	 eax, edx
  004a0	d1 f8		 sar	 eax, 1
  004a2	03 45 f8	 add	 eax, DWORD PTR _damage$[ebp]
  004a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004a8	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 188  : 
; 189  : 	return this->m_Skill;

  004ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004ae	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN3@Set:

; 190  : }

  004b1	5f		 pop	 edi
  004b2	5e		 pop	 esi
  004b3	5b		 pop	 ebx
  004b4	8b e5		 mov	 esp, ebp
  004b6	5d		 pop	 ebp
  004b7	c2 0c 00	 ret	 12			; 0000000cH
?Set@CMagicInf@@QAEHEEE@Z ENDP				; CMagicInf::Set
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetDamage@CMagicInf@@QAEHXZ@4JA ; `CMagicInf::GetDamage'::`2'::__LINE__Var
PUBLIC	?GetDamage@CMagicInf@@QAEHXZ			; CMagicInf::GetDamage
EXTRN	_rand:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__except_handler4:PROC
;	COMDAT ?__LINE__Var@?1??GetDamage@CMagicInf@@QAEHXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetDamage@CMagicInf@@QAEHXZ@4JA DD 0c1H ; `CMagicInf::GetDamage'::`2'::__LINE__Var
_DATA	ENDS
xdata$x	SEGMENT
__sehtable$?GetDamage@CMagicInf@@QAEHXZ DD 0fffffffeH
	DD	00H
	DD	0ffffff8cH
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN6@GetDamage
	DD	FLAT:$LN7@GetDamage
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_subd$ = -36						; size = 4
_damage$ = -32						; size = 4
_this$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?GetDamage@CMagicInf@@QAEHXZ PROC			; CMagicInf::GetDamage
; _this$ = ecx

; 193  : {

  004c0	55		 push	 ebp
  004c1	8b ec		 mov	 ebp, esp
  004c3	6a fe		 push	 -2			; fffffffeH
  004c5	68 00 00 00 00	 push	 OFFSET __sehtable$?GetDamage@CMagicInf@@QAEHXZ
  004ca	68 00 00 00 00	 push	 OFFSET __except_handler4
  004cf	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  004d5	50		 push	 eax
  004d6	83 c4 ac	 add	 esp, -84		; ffffffacH
  004d9	53		 push	 ebx
  004da	56		 push	 esi
  004db	57		 push	 edi
  004dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  004e1	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  004e4	33 c5		 xor	 eax, ebp
  004e6	50		 push	 eax
  004e7	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  004ea	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  004f0	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  004f3	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 194  : 	int damage = 0;

  004f6	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 0

; 195  : 
; 196  : 	if ( this->m_Skill == 0xFF )

  004fd	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00500	81 78 08 ff 00
	00 00		 cmp	 DWORD PTR [eax+8], 255	; 000000ffH
  00507	75 2b		 jne	 SHORT $LN2@GetDamage

; 197  : 	{
; 198  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00509	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetDamage@CMagicInf@@QAEHXZ@4JA
  0050e	83 c0 05	 add	 eax, 5
  00511	50		 push	 eax
  00512	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FEMHJFDB@d?3?2projects?2exteam6?43?2source?2gam@
  00517	68 ca 01 00 00	 push	 458			; 000001caH
  0051c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00521	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00526	50		 push	 eax
  00527	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0052d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 199  : 		return 0;

  00530	33 c0		 xor	 eax, eax
  00532	eb 77		 jmp	 SHORT $LN5@GetDamage
$LN2@GetDamage:

; 200  : 	}
; 201  : 
; 202  : 	int subd = this->m_DamageMax - this->m_DamageMin;

  00534	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00537	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0053a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0053d	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00540	89 55 dc	 mov	 DWORD PTR _subd$[ebp], edx

; 203  : 
; 204  : 	__try

  00543	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 205  : 	{
; 206  : 		damage = this->m_DamageMin + (rand() % 1);

  0054a	e8 00 00 00 00	 call	 _rand
  0054f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00554	79 05		 jns	 SHORT $LN10@GetDamage
  00556	48		 dec	 eax
  00557	83 c8 ff	 or	 eax, -1
  0055a	40		 inc	 eax
$LN10@GetDamage:
  0055b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0055e	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  00561	89 45 e0	 mov	 DWORD PTR _damage$[ebp], eax

; 207  : 	}

  00564	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0056b	eb 3b		 jmp	 SHORT $LN9@GetDamage
$LN6@GetDamage:
$LN12@GetDamage:

; 208  : 	__except(subd=1,1)

  0056d	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _subd$[ebp], 1
  00574	b8 01 00 00 00	 mov	 eax, 1
$LN8@GetDamage:
$LN11@GetDamage:
  00579	c3		 ret	 0
$LN7@GetDamage:
  0057a	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 209  : 	{
; 210  : 		LogAdd(lMsg.Get(MSGGET(0, 111)), __FILE__, __LINE__);

  0057d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetDamage@CMagicInf@@QAEHXZ@4JA
  00582	83 c0 11	 add	 eax, 17			; 00000011H
  00585	50		 push	 eax
  00586	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FEMHJFDB@d?3?2projects?2exteam6?43?2source?2gam@
  0058b	6a 6f		 push	 111			; 0000006fH
  0058d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00592	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00597	50		 push	 eax
  00598	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0059e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 211  : 	}

  005a1	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN9@GetDamage:

; 212  : 
; 213  : 	return damage;

  005a8	8b 45 e0	 mov	 eax, DWORD PTR _damage$[ebp]
$LN5@GetDamage:

; 214  : }

  005ab	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  005ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005b5	59		 pop	 ecx
  005b6	5f		 pop	 edi
  005b7	5e		 pop	 esi
  005b8	5b		 pop	 ebx
  005b9	8b e5		 mov	 esp, ebp
  005bb	5d		 pop	 ebp
  005bc	c3		 ret	 0
?GetDamage@CMagicInf@@QAEHXZ ENDP			; CMagicInf::GetDamage
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	?Set@CMagicInf@@QAEHHE@Z			; CMagicInf::Set
EXTRN	?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
EXTRN	?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z:PROC ; CMagicDamage::GetSkillReqBrandOfSkill
EXTRN	?GetSkillUseType@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillUseType
EXTRN	?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::CheckRequireStatus
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	__fltused:DWORD
EXTRN	__ftol2:PROC
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_fValue$228407 = -20					; size = 4
_fValue$228402 = -16					; size = 4
_nBrandSkill$228399 = -12				; size = 4
_damage$ = -8						; size = 4
_this$ = -4						; size = 4
_aSkill$ = 8						; size = 4
_aLevel$ = 12						; size = 1
?Set@CMagicInf@@QAEHHE@Z PROC				; CMagicInf::Set
; _this$ = ecx

; 218  : {

  005c0	55		 push	 ebp
  005c1	8b ec		 mov	 ebp, esp
  005c3	83 ec 54	 sub	 esp, 84			; 00000054H
  005c6	53		 push	 ebx
  005c7	56		 push	 esi
  005c8	57		 push	 edi
  005c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 219  : 	int damage = 1;

  005cc	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 1

; 220  : 	// ----
; 221  : 	if( this->m_Skill != 0xFF )

  005d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005d6	81 78 08 ff 00
	00 00		 cmp	 DWORD PTR [eax+8], 255	; 000000ffH
  005dd	74 08		 je	 SHORT $LN11@Set@2

; 222  : 	{
; 223  : 		return -1;

  005df	83 c8 ff	 or	 eax, -1
  005e2	e9 37 01 00 00	 jmp	 $LN12@Set@2
$LN11@Set@2:

; 224  : 	}
; 225  : 	// ----
; 226  : 	this->m_Skill = aSkill;

  005e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005ea	8b 4d 08	 mov	 ecx, DWORD PTR _aSkill$[ebp]
  005ed	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 227  : 	this->m_Level = aLevel;

  005f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005f3	8a 4d 0c	 mov	 cl, BYTE PTR _aLevel$[ebp]
  005f6	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 228  : 	// ----
; 229  : 	if( g_MasterSkillSystem.CheckRequireStatus(aSkill) )

  005f9	8b 45 08	 mov	 eax, DWORD PTR _aSkill$[ebp]
  005fc	50		 push	 eax
  005fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00602	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  00607	85 c0		 test	 eax, eax
  00609	0f 84 db 00 00
	00		 je	 $LN10@Set@2

; 230  : 	{
; 231  : 		if( MagicDamageC.GetSkillUseType(aSkill) == 4 )

  0060f	8b 45 08	 mov	 eax, DWORD PTR _aSkill$[ebp]
  00612	50		 push	 eax
  00613	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00618	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  0061d	83 f8 04	 cmp	 eax, 4
  00620	75 7d		 jne	 SHORT $LN9@Set@2

; 232  : 		{
; 233  : 			int nBrandSkill = MagicDamageC.GetSkillReqBrandOfSkill(aSkill);

  00622	8b 45 08	 mov	 eax, DWORD PTR _aSkill$[ebp]
  00625	50		 push	 eax
  00626	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0062b	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  00630	89 45 f4	 mov	 DWORD PTR _nBrandSkill$228399[ebp], eax

; 234  : 			// ----
; 235  : 			if( nBrandSkill > 0 && nBrandSkill != aSkill )

  00633	83 7d f4 00	 cmp	 DWORD PTR _nBrandSkill$228399[ebp], 0
  00637	7e 1b		 jle	 SHORT $LN8@Set@2
  00639	8b 45 f4	 mov	 eax, DWORD PTR _nBrandSkill$228399[ebp]
  0063c	3b 45 08	 cmp	 eax, DWORD PTR _aSkill$[ebp]
  0063f	74 13		 je	 SHORT $LN8@Set@2

; 236  : 			{
; 237  : 				damage = MagicDamageC.SkillGet(nBrandSkill);

  00641	8b 45 f4	 mov	 eax, DWORD PTR _nBrandSkill$228399[ebp]
  00644	50		 push	 eax
  00645	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0064a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0064f	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax

; 238  : 			}
; 239  : 			else

  00652	eb 49		 jmp	 SHORT $LN5@Set@2
$LN8@Set@2:

; 240  : 			{
; 241  : 				float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill), this->m_Level);

  00654	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00657	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0065b	51		 push	 ecx
  0065c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0065f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00662	50		 push	 eax
  00663	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00668	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0066d	50		 push	 eax
  0066e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00673	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00678	d9 5d f0	 fstp	 DWORD PTR _fValue$228402[ebp]

; 242  : 				// ----
; 243  : 				if( fValue == 0.0f )

  0067b	d9 45 f0	 fld	 DWORD PTR _fValue$228402[ebp]
  0067e	d9 ee		 fldz
  00680	da e9		 fucompp
  00682	df e0		 fnstsw	 ax
  00684	f6 c4 44	 test	 ah, 68			; 00000044H
  00687	7a 09		 jp	 SHORT $LN6@Set@2

; 244  : 				{
; 245  : 					damage = 1;

  00689	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 1

; 246  : 				}
; 247  : 				else

  00690	eb 0b		 jmp	 SHORT $LN5@Set@2
$LN6@Set@2:

; 248  : 				{
; 249  : 					damage = (INT64)fValue;

  00692	d9 45 f0	 fld	 DWORD PTR _fValue$228402[ebp]
  00695	e8 00 00 00 00	 call	 __ftol2
  0069a	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax
$LN5@Set@2:

; 250  : 				}
; 251  : 			}
; 252  : 		}
; 253  : 		else

  0069d	eb 49		 jmp	 SHORT $LN2@Set@2
$LN9@Set@2:

; 254  : 		{
; 255  : 			float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill), this->m_Level);

  0069f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006a2	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  006a6	51		 push	 ecx
  006a7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006aa	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  006ad	50		 push	 eax
  006ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  006b3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  006b8	50		 push	 eax
  006b9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  006be	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  006c3	d9 5d ec	 fstp	 DWORD PTR _fValue$228407[ebp]

; 256  : 			// ----
; 257  : 			if( fValue == 0.0f )

  006c6	d9 45 ec	 fld	 DWORD PTR _fValue$228407[ebp]
  006c9	d9 ee		 fldz
  006cb	da e9		 fucompp
  006cd	df e0		 fnstsw	 ax
  006cf	f6 c4 44	 test	 ah, 68			; 00000044H
  006d2	7a 09		 jp	 SHORT $LN3@Set@2

; 258  : 			{
; 259  : 				damage = 1;

  006d4	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 1

; 260  : 			}
; 261  : 			else

  006db	eb 0b		 jmp	 SHORT $LN2@Set@2
$LN3@Set@2:

; 262  : 			{
; 263  : 				damage = (INT64)fValue;

  006dd	d9 45 ec	 fld	 DWORD PTR _fValue$228407[ebp]
  006e0	e8 00 00 00 00	 call	 __ftol2
  006e5	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax
$LN2@Set@2:

; 264  : 			}
; 265  : 		}
; 266  : 	}
; 267  : 	else

  006e8	eb 14		 jmp	 SHORT $LN1@Set@2
$LN10@Set@2:

; 268  : 	{
; 269  : 		damage = MagicDamageC.SkillGet(this->m_Skill);

  006ea	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006ed	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  006f0	51		 push	 ecx
  006f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  006f6	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  006fb	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax
$LN1@Set@2:

; 270  : 	}
; 271  : 	// ----
; 272  : 	this->m_DamageMin = damage;

  006fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00701	8b 4d f8	 mov	 ecx, DWORD PTR _damage$[ebp]
  00704	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 273  : 	this->m_DamageMax = damage + damage / 2;

  00707	8b 45 f8	 mov	 eax, DWORD PTR _damage$[ebp]
  0070a	99		 cdq
  0070b	2b c2		 sub	 eax, edx
  0070d	d1 f8		 sar	 eax, 1
  0070f	03 45 f8	 add	 eax, DWORD PTR _damage$[ebp]
  00712	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00715	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 274  : 	// ----
; 275  : 	return this->m_Skill;

  00718	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0071b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN12@Set@2:

; 276  : }

  0071e	5f		 pop	 edi
  0071f	5e		 pop	 esi
  00720	5b		 pop	 ebx
  00721	8b e5		 mov	 esp, ebp
  00723	5d		 pop	 ebp
  00724	c2 08 00	 ret	 8
?Set@CMagicInf@@QAEHHE@Z ENDP				; CMagicInf::Set
_TEXT	ENDS
PUBLIC	??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@ ; `string'
PUBLIC	?UpdateML@CMagicInf@@QAEHKE@Z			; CMagicInf::UpdateML
;	COMDAT ??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@
CONST	SEGMENT
??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@ DB '['
	DB	'MasterSkill] [ERROR!!] Fail - Update Master Skill:%d, Level:%'
	DB	'd', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_fValue$228428 = -20					; size = 4
_fValue$228423 = -16					; size = 4
_nBrandSkill$228420 = -12				; size = 4
_damage$ = -8						; size = 4
_this$ = -4						; size = 4
_aSkill$ = 8						; size = 4
_aLevel$ = 12						; size = 1
?UpdateML@CMagicInf@@QAEHKE@Z PROC			; CMagicInf::UpdateML
; _this$ = ecx

; 280  : {

  00730	55		 push	 ebp
  00731	8b ec		 mov	 ebp, esp
  00733	83 ec 54	 sub	 esp, 84			; 00000054H
  00736	53		 push	 ebx
  00737	56		 push	 esi
  00738	57		 push	 edi
  00739	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  : 	int damage = 1;

  0073c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 1

; 282  : 	// ----
; 283  : 	if( this->m_Skill != 0xFF )

  00743	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00746	81 78 08 ff 00
	00 00		 cmp	 DWORD PTR [eax+8], 255	; 000000ffH
  0074d	0f 84 1a 01 00
	00		 je	 $LN9@UpdateML

; 284  : 	{
; 285  : 		this->m_Skill = aSkill;

  00753	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00756	8b 4d 08	 mov	 ecx, DWORD PTR _aSkill$[ebp]
  00759	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 286  : 		this->m_Level = aLevel;

  0075c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0075f	8a 4d 0c	 mov	 cl, BYTE PTR _aLevel$[ebp]
  00762	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 287  : 		// ----
; 288  : 		if( MagicDamageC.GetSkillUseType(this->m_Skill) == 4 )

  00765	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00768	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0076b	51		 push	 ecx
  0076c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00771	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  00776	83 f8 04	 cmp	 eax, 4
  00779	0f 85 83 00 00
	00		 jne	 $LN8@UpdateML

; 289  : 		{
; 290  : 			int nBrandSkill = MagicDamageC.GetSkillReqBrandOfSkill(this->m_Skill);

  0077f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00782	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00785	51		 push	 ecx
  00786	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0078b	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  00790	89 45 f4	 mov	 DWORD PTR _nBrandSkill$228420[ebp], eax

; 291  : 			// ----
; 292  : 			if( nBrandSkill > 0 && nBrandSkill != this->m_Skill )

  00793	83 7d f4 00	 cmp	 DWORD PTR _nBrandSkill$228420[ebp], 0
  00797	7e 1e		 jle	 SHORT $LN7@UpdateML
  00799	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0079c	8b 4d f4	 mov	 ecx, DWORD PTR _nBrandSkill$228420[ebp]
  0079f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  007a2	74 13		 je	 SHORT $LN7@UpdateML

; 293  : 			{
; 294  : 				damage = MagicDamageC.SkillGet(nBrandSkill);

  007a4	8b 45 f4	 mov	 eax, DWORD PTR _nBrandSkill$228420[ebp]
  007a7	50		 push	 eax
  007a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  007ad	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  007b2	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax

; 295  : 			}
; 296  : 			else

  007b5	eb 49		 jmp	 SHORT $LN4@UpdateML
$LN7@UpdateML:

; 297  : 			{
; 298  : 				float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill), this->m_Level);

  007b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007ba	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  007be	51		 push	 ecx
  007bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007c2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  007c5	50		 push	 eax
  007c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  007cb	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  007d0	50		 push	 eax
  007d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  007d6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  007db	d9 5d f0	 fstp	 DWORD PTR _fValue$228423[ebp]

; 299  : 				// ----
; 300  : 				if( fValue == 0.0f )

  007de	d9 45 f0	 fld	 DWORD PTR _fValue$228423[ebp]
  007e1	d9 ee		 fldz
  007e3	da e9		 fucompp
  007e5	df e0		 fnstsw	 ax
  007e7	f6 c4 44	 test	 ah, 68			; 00000044H
  007ea	7a 09		 jp	 SHORT $LN5@UpdateML

; 301  : 				{
; 302  : 					damage = 1;

  007ec	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 1

; 303  : 				}
; 304  : 				else

  007f3	eb 0b		 jmp	 SHORT $LN4@UpdateML
$LN5@UpdateML:

; 305  : 				{
; 306  : 					damage = (INT64)fValue;

  007f5	d9 45 f0	 fld	 DWORD PTR _fValue$228423[ebp]
  007f8	e8 00 00 00 00	 call	 __ftol2
  007fd	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax
$LN4@UpdateML:

; 307  : 				}
; 308  : 			}
; 309  : 		}
; 310  : 		else

  00800	eb 49		 jmp	 SHORT $LN1@UpdateML
$LN8@UpdateML:

; 311  : 		{
; 312  : 			float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill), this->m_Level);

  00802	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00805	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00809	51		 push	 ecx
  0080a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0080d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00810	50		 push	 eax
  00811	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00816	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0081b	50		 push	 eax
  0081c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00821	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00826	d9 5d ec	 fstp	 DWORD PTR _fValue$228428[ebp]

; 313  : 			// ----
; 314  : 			if( fValue == 0.0f )

  00829	d9 45 ec	 fld	 DWORD PTR _fValue$228428[ebp]
  0082c	d9 ee		 fldz
  0082e	da e9		 fucompp
  00830	df e0		 fnstsw	 ax
  00832	f6 c4 44	 test	 ah, 68			; 00000044H
  00835	7a 09		 jp	 SHORT $LN2@UpdateML

; 315  : 			{
; 316  : 				damage = 1;

  00837	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 1

; 317  : 			}
; 318  : 			else

  0083e	eb 0b		 jmp	 SHORT $LN1@UpdateML
$LN2@UpdateML:

; 319  : 			{
; 320  : 				damage = (INT64)fValue;

  00840	d9 45 ec	 fld	 DWORD PTR _fValue$228428[ebp]
  00843	e8 00 00 00 00	 call	 __ftol2
  00848	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax
$LN1@UpdateML:

; 321  : 			}
; 322  : 		}
; 323  : 		// ----
; 324  : 		this->m_DamageMin = damage;

  0084b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0084e	8b 4d f8	 mov	 ecx, DWORD PTR _damage$[ebp]
  00851	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 325  : 		this->m_DamageMax = damage + damage / 2;

  00854	8b 45 f8	 mov	 eax, DWORD PTR _damage$[ebp]
  00857	99		 cdq
  00858	2b c2		 sub	 eax, edx
  0085a	d1 f8		 sar	 eax, 1
  0085c	03 45 f8	 add	 eax, DWORD PTR _damage$[ebp]
  0085f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00862	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 326  : 		// ----
; 327  : 		return this->m_Skill;

  00865	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00868	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0086b	eb 1a		 jmp	 SHORT $LN10@UpdateML
$LN9@UpdateML:

; 328  : 	}
; 329  : 	// ----
; 330  : 	LogAdd("[MasterSkill] [ERROR!!] Fail - Update Master Skill:%d, Level:%d", aSkill, aLevel);

  0086d	0f b6 45 0c	 movzx	 eax, BYTE PTR _aLevel$[ebp]
  00871	50		 push	 eax
  00872	8b 4d 08	 mov	 ecx, DWORD PTR _aSkill$[ebp]
  00875	51		 push	 ecx
  00876	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@
  0087b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00881	83 c4 0c	 add	 esp, 12			; 0000000cH

; 331  : 	return -1;

  00884	83 c8 ff	 or	 eax, -1
$LN10@UpdateML:

; 332  : }

  00887	5f		 pop	 edi
  00888	5e		 pop	 esi
  00889	5b		 pop	 ebx
  0088a	8b e5		 mov	 esp, ebp
  0088c	5d		 pop	 ebp
  0088d	c2 08 00	 ret	 8
?UpdateML@CMagicInf@@QAEHKE@Z ENDP			; CMagicInf::UpdateML
_TEXT	ENDS
PUBLIC	?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z	; MagicByteConvert
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_index$228442 = -20					; size = 4
_loc4$ = -16						; size = 4
_loc3$ = -12						; size = 4
_loc2$ = -8						; size = 4
_n$ = -4						; size = 4
_buf$ = 8						; size = 4
_Magici$ = 12						; size = 4
_maxmagic$ = 16						; size = 4
?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z PROC		; MagicByteConvert

; 336  : {

  00890	55		 push	 ebp
  00891	8b ec		 mov	 ebp, esp
  00893	83 ec 54	 sub	 esp, 84			; 00000054H
  00896	53		 push	 ebx
  00897	56		 push	 esi
  00898	57		 push	 edi

; 337  : 	int n=0; //loc1

  00899	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 338  : 
; 339  : 	int loc2;
; 340  : 	int loc3;
; 341  : 	int loc4;
; 342  : 
; 343  : 	for (int index = 0;index < maxmagic;index++)

  008a0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _index$228442[ebp], 0
  008a7	eb 09		 jmp	 SHORT $LN8@MagicByteC
$LN7@MagicByteC:
  008a9	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  008ac	83 c0 01	 add	 eax, 1
  008af	89 45 ec	 mov	 DWORD PTR _index$228442[ebp], eax
$LN8@MagicByteC:
  008b2	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  008b5	3b 45 10	 cmp	 eax, DWORD PTR _maxmagic$[ebp]
  008b8	0f 8d 2f 01 00
	00		 jge	 $LN9@MagicByteC

; 344  : 	{
; 345  : 		loc3 = Magici[index].m_Skill;

  008be	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  008c1	6b c0 18	 imul	 eax, 24			; 00000018H
  008c4	8b 4d 0c	 mov	 ecx, DWORD PTR _Magici$[ebp]
  008c7	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  008cb	89 55 f4	 mov	 DWORD PTR _loc3$[ebp], edx

; 346  : 		loc2 = 0;

  008ce	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 0

; 347  : 		loc4 = 0;

  008d5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _loc4$[ebp], 0

; 348  : 
; 349  : 		if((int)Magici[index].m_Skill > 765)

  008dc	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  008df	6b c0 18	 imul	 eax, 24			; 00000018H
  008e2	8b 4d 0c	 mov	 ecx, DWORD PTR _Magici$[ebp]
  008e5	81 7c 01 08 fd
	02 00 00	 cmp	 DWORD PTR [ecx+eax+8], 765 ; 000002fdH
  008ed	7e 28		 jle	 SHORT $LN5@MagicByteC

; 350  : 		{
; 351  : 			loc3 = 0xFF;

  008ef	c7 45 f4 ff 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 255 ; 000000ffH

; 352  : 			loc2 = 3;

  008f6	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 3

; 353  : 			loc4 = Magici[index].m_Skill - (loc3 * 3);

  008fd	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  00900	6b c0 18	 imul	 eax, 24			; 00000018H
  00903	8b 4d f4	 mov	 ecx, DWORD PTR _loc3$[ebp]
  00906	6b c9 03	 imul	 ecx, 3
  00909	8b 55 0c	 mov	 edx, DWORD PTR _Magici$[ebp]
  0090c	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00910	2b c1		 sub	 eax, ecx
  00912	89 45 f0	 mov	 DWORD PTR _loc4$[ebp], eax
  00915	eb 6e		 jmp	 SHORT $LN4@MagicByteC
$LN5@MagicByteC:

; 354  : 		}
; 355  : 		else if((int)Magici[index].m_Skill > 510)

  00917	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  0091a	6b c0 18	 imul	 eax, 24			; 00000018H
  0091d	8b 4d 0c	 mov	 ecx, DWORD PTR _Magici$[ebp]
  00920	81 7c 01 08 fe
	01 00 00	 cmp	 DWORD PTR [ecx+eax+8], 510 ; 000001feH
  00928	7e 27		 jle	 SHORT $LN3@MagicByteC

; 356  : 		{
; 357  : 			loc3 = 0xFF;

  0092a	c7 45 f4 ff 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 255 ; 000000ffH

; 358  : 			loc2 = 2;

  00931	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 2

; 359  : 			loc4 = Magici[index].m_Skill - (loc3 << 1);

  00938	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  0093b	6b c0 18	 imul	 eax, 24			; 00000018H
  0093e	8b 4d f4	 mov	 ecx, DWORD PTR _loc3$[ebp]
  00941	d1 e1		 shl	 ecx, 1
  00943	8b 55 0c	 mov	 edx, DWORD PTR _Magici$[ebp]
  00946	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  0094a	2b c1		 sub	 eax, ecx
  0094c	89 45 f0	 mov	 DWORD PTR _loc4$[ebp], eax
  0094f	eb 34		 jmp	 SHORT $LN4@MagicByteC
$LN3@MagicByteC:

; 360  : 		}
; 361  : 		else if((int)Magici[index].m_Skill > 255)

  00951	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  00954	6b c0 18	 imul	 eax, 24			; 00000018H
  00957	8b 4d 0c	 mov	 ecx, DWORD PTR _Magici$[ebp]
  0095a	81 7c 01 08 ff
	00 00 00	 cmp	 DWORD PTR [ecx+eax+8], 255 ; 000000ffH
  00962	7e 21		 jle	 SHORT $LN4@MagicByteC

; 362  : 		{
; 363  : 			loc3 = 0xFF;

  00964	c7 45 f4 ff 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 255 ; 000000ffH

; 364  : 			loc2 = 1;

  0096b	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 1

; 365  : 			loc4 = Magici[index].m_Skill - loc3;

  00972	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  00975	6b c0 18	 imul	 eax, 24			; 00000018H
  00978	8b 4d 0c	 mov	 ecx, DWORD PTR _Magici$[ebp]
  0097b	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  0097f	2b 55 f4	 sub	 edx, DWORD PTR _loc3$[ebp]
  00982	89 55 f0	 mov	 DWORD PTR _loc4$[ebp], edx
$LN4@MagicByteC:

; 366  : 		}
; 367  : 
; 368  : 		buf[n] = loc3; //Skill

  00985	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00988	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  0098b	8a 4d f4	 mov	 cl, BYTE PTR _loc3$[ebp]
  0098e	88 08		 mov	 BYTE PTR [eax], cl

; 369  : 		n++;

  00990	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00993	83 c0 01	 add	 eax, 1
  00996	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 370  : 
; 371  : 		buf[n] = Magici[index].m_Level << 3;

  00999	8b 45 ec	 mov	 eax, DWORD PTR _index$228442[ebp]
  0099c	6b c0 18	 imul	 eax, 24			; 00000018H
  0099f	8b 4d 0c	 mov	 ecx, DWORD PTR _Magici$[ebp]
  009a2	0f b6 54 01 04	 movzx	 edx, BYTE PTR [ecx+eax+4]
  009a7	c1 e2 03	 shl	 edx, 3
  009aa	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  009ad	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  009b0	88 10		 mov	 BYTE PTR [eax], dl

; 372  : 		buf[n] |= loc2 & 0x07; //Season3 add-on

  009b2	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  009b5	83 e0 07	 and	 eax, 7
  009b8	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  009bb	03 4d fc	 add	 ecx, DWORD PTR _n$[ebp]
  009be	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  009c1	0b d0		 or	 edx, eax
  009c3	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  009c6	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  009c9	88 10		 mov	 BYTE PTR [eax], dl

; 373  : 		n++;

  009cb	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  009ce	83 c0 01	 add	 eax, 1
  009d1	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 374  : 
; 375  : 		buf[n] = loc4; //Skill :|

  009d4	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  009d7	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  009da	8a 4d f0	 mov	 cl, BYTE PTR _loc4$[ebp]
  009dd	88 08		 mov	 BYTE PTR [eax], cl

; 376  : 		n++;

  009df	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  009e2	83 c0 01	 add	 eax, 1
  009e5	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 377  : 	}

  009e8	e9 bc fe ff ff	 jmp	 $LN7@MagicByteC
$LN9@MagicByteC:

; 378  : }

  009ed	5f		 pop	 edi
  009ee	5e		 pop	 esi
  009ef	5b		 pop	 ebx
  009f0	8b e5		 mov	 esp, ebp
  009f2	5d		 pop	 ebp
  009f3	c3		 ret	 0
?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z ENDP		; MagicByteConvert
_TEXT	ENDS
EXTRN	_atexit:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??__EDefMagicInf@@YAXXZ
text$yc	SEGMENT
??__EDefMagicInf@@YAXXZ PROC				; `dynamic initializer for 'DefMagicInf'', COMDAT

; 11   : CMagicInf	DefMagicInf[MAX_MAGICINF];

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??1CMagicInf@@UAE@XZ ; CMagicInf::~CMagicInf
  0000e	68 00 00 00 00	 push	 OFFSET ??0CMagicInf@@QAE@XZ ; CMagicInf::CMagicInf
  00013	68 ff 00 00 00	 push	 255			; 000000ffH
  00018	6a 18		 push	 24			; 00000018H
  0001a	68 00 00 00 00	 push	 OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  0001f	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  00024	68 00 00 00 00	 push	 OFFSET ??__FDefMagicInf@@YAXXZ ; `dynamic atexit destructor for 'DefMagicInf''
  00029	e8 00 00 00 00	 call	 _atexit
  0002e	83 c4 04	 add	 esp, 4
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??__EDefMagicInf@@YAXXZ ENDP				; `dynamic initializer for 'DefMagicInf''
text$yc	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FDefMagicInf@@YAXXZ
text$yd	SEGMENT
??__FDefMagicInf@@YAXXZ PROC				; `dynamic atexit destructor for 'DefMagicInf'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??1CMagicInf@@UAE@XZ ; CMagicInf::~CMagicInf
  0000e	68 ff 00 00 00	 push	 255			; 000000ffH
  00013	6a 18		 push	 24			; 00000018H
  00015	68 00 00 00 00	 push	 OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  0001a	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??__FDefMagicInf@@YAXXZ ENDP				; `dynamic atexit destructor for 'DefMagicInf''
text$yd	ENDS
PUBLIC	?DefMagicInf@@3PAVCMagicInf@@A			; DefMagicInf
_BSS	SEGMENT
?DefMagicInf@@3PAVCMagicInf@@A DB 017e8H DUP (?)	; DefMagicInf
_BSS	ENDS
CRT$XCU	SEGMENT
_DefMagicInf$initializer$ DD FLAT:??__EDefMagicInf@@YAXXZ
CRT$XCU	ENDS
END
