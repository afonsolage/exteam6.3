; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\MultiCheckSum.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@CMultiCheckSum@@QAEXXZ			; CMultiCheckSum::Init
PUBLIC	??_7CMultiCheckSum@@6B@				; CMultiCheckSum::`vftable'
PUBLIC	??0CMultiCheckSum@@QAE@XZ			; CMultiCheckSum::CMultiCheckSum
PUBLIC	??_R4CMultiCheckSum@@6B@			; CMultiCheckSum::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMultiCheckSum@@@8			; CMultiCheckSum `RTTI Type Descriptor'
PUBLIC	??_R3CMultiCheckSum@@8				; CMultiCheckSum::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMultiCheckSum@@8				; CMultiCheckSum::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMultiCheckSum@@8			; CMultiCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMultiCheckSum@@UAEPAXI@Z:PROC		; CMultiCheckSum::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMultiCheckSum@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\multichecksum.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMultiCheckSum@@8 DD FLAT:??_R0?AVCMultiCheckSum@@@8 ; CMultiCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMultiCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R2CMultiCheckSum@@8
rdata$r	SEGMENT
??_R2CMultiCheckSum@@8 DD FLAT:??_R1A@?0A@EA@CMultiCheckSum@@8 ; CMultiCheckSum::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMultiCheckSum@@8
rdata$r	SEGMENT
??_R3CMultiCheckSum@@8 DD 00H				; CMultiCheckSum::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMultiCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMultiCheckSum@@@8
_DATA	SEGMENT
??_R0?AVCMultiCheckSum@@@8 DD FLAT:??_7type_info@@6B@	; CMultiCheckSum `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMultiCheckSum@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMultiCheckSum@@6B@
rdata$r	SEGMENT
??_R4CMultiCheckSum@@6B@ DD 00H				; CMultiCheckSum::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMultiCheckSum@@@8
	DD	FLAT:??_R3CMultiCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_7CMultiCheckSum@@6B@
CONST	SEGMENT
??_7CMultiCheckSum@@6B@ DD FLAT:??_R4CMultiCheckSum@@6B@ ; CMultiCheckSum::`vftable'
	DD	FLAT:??_ECMultiCheckSum@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMultiCheckSum@@QAE@XZ PROC				; CMultiCheckSum::CMultiCheckSum
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMultiCheckSum@@6B@

; 12   : 	this->Init();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Init@CMultiCheckSum@@QAEXXZ ; CMultiCheckSum::Init

; 13   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CMultiCheckSum@@QAE@XZ ENDP				; CMultiCheckSum::CMultiCheckSum
_TEXT	ENDS
PUBLIC	??1CMultiCheckSum@@UAE@XZ			; CMultiCheckSum::~CMultiCheckSum
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMultiCheckSum@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMultiCheckSum@@UAEPAXI@Z PROC			; CMultiCheckSum::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMultiCheckSum@@UAE@XZ ; CMultiCheckSum::~CMultiCheckSum
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCMultiCheckSum@@UAEPAXI@Z ENDP			; CMultiCheckSum::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMultiCheckSum@@UAE@XZ PROC				; CMultiCheckSum::~CMultiCheckSum
; _this$ = ecx

; 17   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMultiCheckSum@@6B@

; 18   : 	return;
; 19   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??1CMultiCheckSum@@UAE@XZ ENDP				; CMultiCheckSum::~CMultiCheckSum
; Function compile flags: /Odtp /ZI
_i$218965 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CMultiCheckSum@@QAEXXZ PROC			; CMultiCheckSum::Init
; _this$ = ecx

; 23   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 48	 sub	 esp, 72			; 00000048H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	for (int i=0; i < MAX_MULTICHECKSUM; i++)

  0005c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$218965[ebp], 0
  00063	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  00065	8b 45 f8	 mov	 eax, DWORD PTR _i$218965[ebp]
  00068	83 c0 01	 add	 eax, 1
  0006b	89 45 f8	 mov	 DWORD PTR _i$218965[ebp], eax
$LN3@Init:
  0006e	83 7d f8 0a	 cmp	 DWORD PTR _i$218965[ebp], 10 ; 0000000aH
  00072	7d 10		 jge	 SHORT $LN1@Init

; 25   : 	{
; 26   : 		this->m_dwLoaded[i]=0;

  00074	8b 45 f8	 mov	 eax, DWORD PTR _i$218965[ebp]
  00077	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	c7 44 81 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+4], 0

; 27   : 	}

  00082	eb e1		 jmp	 SHORT $LN2@Init
$LN1@Init:

; 28   : 	this->m_sFilePath[0]=0;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	c6 80 2c a0 00
	00 00		 mov	 BYTE PTR [eax+41004], 0

; 29   : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
?Init@CMultiCheckSum@@QAEXXZ ENDP			; CMultiCheckSum::Init
_TEXT	ENDS
PUBLIC	?SetFilePath@CMultiCheckSum@@QAEXPAD@Z		; CMultiCheckSum::SetFilePath
EXTRN	_strcpy:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filepath$ = 8						; size = 4
?SetFilePath@CMultiCheckSum@@QAEXPAD@Z PROC		; CMultiCheckSum::SetFilePath
; _this$ = ecx

; 33   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 44	 sub	 esp, 68			; 00000044H
  000a6	53		 push	 ebx
  000a7	56		 push	 esi
  000a8	57		 push	 edi
  000a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 34   : 	strcpy(this->m_sFilePath, filepath);

  000ac	8b 45 08	 mov	 eax, DWORD PTR _filepath$[ebp]
  000af	50		 push	 eax
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	81 c1 2c a0 00
	00		 add	 ecx, 41004		; 0000a02cH
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _strcpy
  000bf	83 c4 08	 add	 esp, 8

; 35   : }

  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 04 00	 ret	 4
?SetFilePath@CMultiCheckSum@@QAEXPAD@Z ENDP		; CMultiCheckSum::SetFilePath
_TEXT	ENDS
PUBLIC	??_C@_0BI@JOADKNJG@Load?5Checksum?5file?5?3?5?$CFs?$AA@ ; `string'
PUBLIC	?LoadFile@CMultiCheckSum@@AAEHPADH@Z		; CMultiCheckSum::LoadFile
PUBLIC	??_C@_0BC@EHAAJIPE@?$CFs?2CheckSum?$CFd?4dat?$AA@ ; `string'
PUBLIC	??_C@_0BA@JGOBHOLO@?$CFs?2CheckSum?4dat?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadFile@CMultiCheckSum@@QAEHXZ		; CMultiCheckSum::LoadFile
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__wsprintfA:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BI@JOADKNJG@Load?5Checksum?5file?5?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BI@JOADKNJG@Load?5Checksum?5file?5?3?5?$CFs?$AA@ DB 'Load Checksum'
	DB	' file : %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EHAAJIPE@?$CFs?2CheckSum?$CFd?4dat?$AA@
CONST	SEGMENT
??_C@_0BC@EHAAJIPE@?$CFs?2CheckSum?$CFd?4dat?$AA@ DB '%s\CheckSum%d.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JGOBHOLO@?$CFs?2CheckSum?4dat?$AA@
CONST	SEGMENT
??_C@_0BA@JGOBHOLO@?$CFs?2CheckSum?4dat?$AA@ DB '%s\CheckSum.dat', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$ = -268						; size = 4
_filenames$ = -264					; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?LoadFile@CMultiCheckSum@@QAEHXZ PROC			; CMultiCheckSum::LoadFile
; _this$ = ecx

; 38   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000de	33 c5		 xor	 eax, ebp
  000e0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000e3	53		 push	 ebx
  000e4	56		 push	 esi
  000e5	57		 push	 edi
  000e6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 	char filenames[256];
; 40   : 	int i;
; 41   : 
; 42   : 	for (i=0; i<MAX_MULTICHECKSUM; i++)

  000e9	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  000f3	eb 0f		 jmp	 SHORT $LN6@LoadFile
$LN5@LoadFile:
  000f5	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000fb	83 c0 01	 add	 eax, 1
  000fe	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN6@LoadFile:
  00104	83 bd f4 fe ff
	ff 0a		 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0010b	0f 8d 94 00 00
	00		 jge	 $LN4@LoadFile

; 43   : 	{
; 44   : 		if (i == 0)

  00111	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _i$[ebp], 0
  00118	75 20		 jne	 SHORT $LN3@LoadFile

; 45   : 		{
; 46   : 			wsprintf(filenames, "%s\\CheckSum.dat", this->m_sFilePath);

  0011a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	05 2c a0 00 00	 add	 eax, 41004		; 0000a02cH
  00122	50		 push	 eax
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JGOBHOLO@?$CFs?2CheckSum?4dat?$AA@
  00128	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _filenames$[ebp]
  0012e	51		 push	 ecx
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00135	83 c4 0c	 add	 esp, 12			; 0000000cH

; 47   : 		}
; 48   : 		else

  00138	eb 26		 jmp	 SHORT $LN2@LoadFile
$LN3@LoadFile:

; 49   : 		{
; 50   : 			wsprintf(filenames, "%s\\CheckSum%d.dat", this->m_sFilePath, i);

  0013a	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00140	50		 push	 eax
  00141	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00144	81 c1 2c a0 00
	00		 add	 ecx, 41004		; 0000a02cH
  0014a	51		 push	 ecx
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EHAAJIPE@?$CFs?2CheckSum?$CFd?4dat?$AA@
  00150	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _filenames$[ebp]
  00156	52		 push	 edx
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0015d	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@LoadFile:

; 51   : 		}
; 52   : 		if (this->LoadFile(filenames, i)  != 0)

  00160	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00166	50		 push	 eax
  00167	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _filenames$[ebp]
  0016d	51		 push	 ecx
  0016e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00171	e8 00 00 00 00	 call	 ?LoadFile@CMultiCheckSum@@AAEHPADH@Z ; CMultiCheckSum::LoadFile
  00176	85 c0		 test	 eax, eax
  00178	74 26		 je	 SHORT $LN1@LoadFile

; 53   : 		{
; 54   : 			this->m_dwLoaded[i]=1;

  0017a	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00180	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00183	c7 44 81 04 01
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+4], 1

; 55   : 			LogAddTD("Load Checksum file : %s", filenames);

  0018b	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _filenames$[ebp]
  00191	50		 push	 eax
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JOADKNJG@Load?5Checksum?5file?5?3?5?$CFs?$AA@
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0019d	83 c4 08	 add	 esp, 8
$LN1@LoadFile:

; 56   : 		}
; 57   : 	}

  001a0	e9 50 ff ff ff	 jmp	 $LN5@LoadFile
$LN4@LoadFile:

; 58   : 	return 1;

  001a5	b8 01 00 00 00	 mov	 eax, 1

; 59   : }

  001aa	5f		 pop	 edi
  001ab	5e		 pop	 esi
  001ac	5b		 pop	 ebx
  001ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b0	33 cd		 xor	 ecx, ebp
  001b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	c3		 ret	 0
?LoadFile@CMultiCheckSum@@QAEHXZ ENDP			; CMultiCheckSum::LoadFile
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
EXTRN	_fclose:PROC
EXTRN	_fread:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_fp$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
_index$ = 12						; size = 4
?LoadFile@CMultiCheckSum@@AAEHPADH@Z PROC		; CMultiCheckSum::LoadFile
; _this$ = ecx

; 63   : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	83 ec 48	 sub	 esp, 72			; 00000048H
  001c6	53		 push	 ebx
  001c7	56		 push	 esi
  001c8	57		 push	 edi
  001c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 	FILE* fp;
; 65   : 	
; 66   : 	fp=fopen(filename, "rb");

  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  001d1	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  001d4	50		 push	 eax
  001d5	e8 00 00 00 00	 call	 _fopen
  001da	83 c4 08	 add	 esp, 8
  001dd	89 45 f8	 mov	 DWORD PTR _fp$[ebp], eax

; 67   : 
; 68   : 	if (fp == 0)

  001e0	83 7d f8 00	 cmp	 DWORD PTR _fp$[ebp], 0
  001e4	75 04		 jne	 SHORT $LN1@LoadFile@2

; 69   : 	{
; 70   : 		return 0;

  001e6	33 c0		 xor	 eax, eax
  001e8	eb 32		 jmp	 SHORT $LN2@LoadFile@2
$LN1@LoadFile@2:

; 71   : 	}
; 72   : 
; 73   : 	fread(this->m_dwgCheckSum[index], sizeof(m_dwgCheckSum[index]), 1, fp);

  001ea	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  001ed	50		 push	 eax
  001ee	6a 01		 push	 1
  001f0	68 00 10 00 00	 push	 4096			; 00001000H
  001f5	8b 4d 0c	 mov	 ecx, DWORD PTR _index$[ebp]
  001f8	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  001fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001fe	8d 44 0a 2c	 lea	 eax, DWORD PTR [edx+ecx+44]
  00202	50		 push	 eax
  00203	e8 00 00 00 00	 call	 _fread
  00208	83 c4 10	 add	 esp, 16			; 00000010H

; 74   : 	fclose(fp);

  0020b	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 _fclose
  00214	83 c4 04	 add	 esp, 4

; 75   : 	return TRUE;

  00217	b8 01 00 00 00	 mov	 eax, 1
$LN2@LoadFile@2:

; 76   : }

  0021c	5f		 pop	 edi
  0021d	5e		 pop	 esi
  0021e	5b		 pop	 ebx
  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c2 08 00	 ret	 8
?LoadFile@CMultiCheckSum@@AAEHPADH@Z ENDP		; CMultiCheckSum::LoadFile
_TEXT	ENDS
PUBLIC	??_C@_0CN@LBDBJDCL@CheckSum?$CFd?9Exe?5Compare?5Fail?5?$CFd?5?$CF@ ; `string'
PUBLIC	??_C@_0CE@DHLAACA@CheckSum?$CFd?9Exe?5Compare?5Success?5?$FL@ ; `string'
PUBLIC	?CompareCheckSum@CMultiCheckSum@@QAEHHKK@Z	; CMultiCheckSum::CompareCheckSum
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0CN@LBDBJDCL@CheckSum?$CFd?9Exe?5Compare?5Fail?5?$CFd?5?$CF@
CONST	SEGMENT
??_C@_0CN@LBDBJDCL@CheckSum?$CFd?9Exe?5Compare?5Fail?5?$CFd?5?$CF@ DB 'Ch'
	DB	'eckSum%d-Exe Compare Fail %d %d %d %d [%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DHLAACA@CheckSum?$CFd?9Exe?5Compare?5Success?5?$FL@
CONST	SEGMENT
??_C@_0CE@DHLAACA@CheckSum?$CFd?9Exe?5Compare?5Success?5?$FL@ DB 'CheckSu'
	DB	'm%d-Exe Compare Success [%s]', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_TableNum$ = 12						; size = 4
_Key$ = 16						; size = 4
?CompareCheckSum@CMultiCheckSum@@QAEHHKK@Z PROC		; CMultiCheckSum::CompareCheckSum
; _this$ = ecx

; 79   : {

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	83 ec 48	 sub	 esp, 72			; 00000048H
  00236	53		 push	 ebx
  00237	56		 push	 esi
  00238	57		 push	 edi
  00239	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 	int i;
; 81   : 
; 82   : 	for ( i=0;i<MAX_MULTICHECKSUM;i++)

  0023c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00243	eb 09		 jmp	 SHORT $LN6@CompareChe
$LN5@CompareChe:
  00245	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00248	83 c0 01	 add	 eax, 1
  0024b	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN6@CompareChe:
  0024e	83 7d f8 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00252	0f 8d 9f 00 00
	00		 jge	 $LN4@CompareChe

; 83   : 	{
; 84   : 		if(this->m_dwLoaded[i] != 0 )

  00258	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0025b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025e	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  00263	0f 84 89 00 00
	00		 je	 $LN3@CompareChe

; 85   : 		{
; 86   : 			if ( ( this->m_dwgCheckSum[i][TableNum] ) == Key)	

  00269	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0026c	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  0026f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00272	8d 54 01 2c	 lea	 edx, DWORD PTR [ecx+eax+44]
  00276	8b 45 0c	 mov	 eax, DWORD PTR _TableNum$[ebp]
  00279	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0027c	3b 4d 10	 cmp	 ecx, DWORD PTR _Key$[ebp]
  0027f	75 2f		 jne	 SHORT $LN2@CompareChe

; 87   : 			{
; 88   : 				LogAddTD("CheckSum%d-Exe Compare Success [%s]", i, gObj[aIndex].AccountID );

  00281	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00284	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0028a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00290	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  00294	52		 push	 edx
  00295	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00298	50		 push	 eax
  00299	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DHLAACA@CheckSum?$CFd?9Exe?5Compare?5Success?5?$FL@
  0029e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 89   : 				return 1;

  002a7	b8 01 00 00 00	 mov	 eax, 1
  002ac	eb 4b		 jmp	 SHORT $LN7@CompareChe

; 90   : 			}
; 91   : 			else

  002ae	eb 42		 jmp	 SHORT $LN3@CompareChe
$LN2@CompareChe:

; 92   : 			{
; 93   : 				LogAddTD("CheckSum%d-Exe Compare Fail %d %d %d %d [%s]", i, this->m_dwgCheckSum[i][TableNum] ,Key, TableNum, gObj[aIndex].AccountID );

  002b0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002b3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  002b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002bf	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  002c3	52		 push	 edx
  002c4	8b 45 0c	 mov	 eax, DWORD PTR _TableNum$[ebp]
  002c7	50		 push	 eax
  002c8	8b 4d 10	 mov	 ecx, DWORD PTR _Key$[ebp]
  002cb	51		 push	 ecx
  002cc	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002cf	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  002d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d5	8d 4c 10 2c	 lea	 ecx, DWORD PTR [eax+edx+44]
  002d9	8b 55 0c	 mov	 edx, DWORD PTR _TableNum$[ebp]
  002dc	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  002df	50		 push	 eax
  002e0	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  002e3	51		 push	 ecx
  002e4	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@LBDBJDCL@CheckSum?$CFd?9Exe?5Compare?5Fail?5?$CFd?5?$CF@
  002e9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002ef	83 c4 18	 add	 esp, 24			; 00000018H
$LN3@CompareChe:

; 94   : 			}
; 95   : 		}
; 96   : 	}

  002f2	e9 4e ff ff ff	 jmp	 $LN5@CompareChe
$LN4@CompareChe:

; 97   : 	return 0;

  002f7	33 c0		 xor	 eax, eax
$LN7@CompareChe:

; 98   : }

  002f9	5f		 pop	 edi
  002fa	5e		 pop	 esi
  002fb	5b		 pop	 ebx
  002fc	8b e5		 mov	 esp, ebp
  002fe	5d		 pop	 ebp
  002ff	c2 0c 00	 ret	 12			; 0000000cH
?CompareCheckSum@CMultiCheckSum@@QAEHHKK@Z ENDP		; CMultiCheckSum::CompareCheckSum
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_MultiChecksum@@YAXXZ
text$yc	SEGMENT
??__Eg_MultiChecksum@@YAXXZ PROC			; `dynamic initializer for 'g_MultiChecksum'', COMDAT

; 7    : CMultiCheckSum g_MultiChecksum;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MultiChecksum@@3VCMultiCheckSum@@A ; g_MultiChecksum
  0000e	e8 00 00 00 00	 call	 ??0CMultiCheckSum@@QAE@XZ ; CMultiCheckSum::CMultiCheckSum
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_MultiChecksum@@YAXXZ ; `dynamic atexit destructor for 'g_MultiChecksum''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_MultiChecksum@@YAXXZ ENDP			; `dynamic initializer for 'g_MultiChecksum''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_MultiChecksum@@YAXXZ
text$yd	SEGMENT
??__Fg_MultiChecksum@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MultiChecksum'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MultiChecksum@@3VCMultiCheckSum@@A ; g_MultiChecksum
  0000e	e8 00 00 00 00	 call	 ??1CMultiCheckSum@@UAE@XZ ; CMultiCheckSum::~CMultiCheckSum
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_MultiChecksum@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MultiChecksum''
text$yd	ENDS
PUBLIC	?g_MultiChecksum@@3VCMultiCheckSum@@A		; g_MultiChecksum
_BSS	SEGMENT
?g_MultiChecksum@@3VCMultiCheckSum@@A DB 0a12cH DUP (?)	; g_MultiChecksum
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MultiChecksum$initializer$ DD FLAT:??__Eg_MultiChecksum@@YAXXZ
CRT$XCU	ENDS
END
