; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\IpCache.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Init@CIpCache@@QAEXXZ				; CIpCache::Init
PUBLIC	??_7CIpCache@@6B@				; CIpCache::`vftable'
PUBLIC	??0CIpCache@@QAE@XZ				; CIpCache::CIpCache
PUBLIC	??_R4CIpCache@@6B@				; CIpCache::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCIpCache@@@8				; CIpCache `RTTI Type Descriptor'
PUBLIC	??_R3CIpCache@@8				; CIpCache::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CIpCache@@8				; CIpCache::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CIpCache@@8			; CIpCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECIpCache@@UAEPAXI@Z:PROC			; CIpCache::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CIpCache@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\ipcache.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CIpCache@@8 DD FLAT:??_R0?AVCIpCache@@@8	; CIpCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CIpCache@@8
rdata$r	ENDS
;	COMDAT ??_R2CIpCache@@8
rdata$r	SEGMENT
??_R2CIpCache@@8 DD FLAT:??_R1A@?0A@EA@CIpCache@@8	; CIpCache::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CIpCache@@8
rdata$r	SEGMENT
??_R3CIpCache@@8 DD 00H					; CIpCache::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CIpCache@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCIpCache@@@8
_DATA	SEGMENT
??_R0?AVCIpCache@@@8 DD FLAT:??_7type_info@@6B@		; CIpCache `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCIpCache@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CIpCache@@6B@
rdata$r	SEGMENT
??_R4CIpCache@@6B@ DD 00H				; CIpCache::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCIpCache@@@8
	DD	FLAT:??_R3CIpCache@@8
rdata$r	ENDS
;	COMDAT ??_7CIpCache@@6B@
CONST	SEGMENT
??_7CIpCache@@6B@ DD FLAT:??_R4CIpCache@@6B@		; CIpCache::`vftable'
	DD	FLAT:??_ECIpCache@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CIpCache@@QAE@XZ PROC				; CIpCache::CIpCache
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CIpCache@@6B@

; 9    : 	this->Init();	

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Init@CIpCache@@QAEXXZ	; CIpCache::Init

; 10   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CIpCache@@QAE@XZ ENDP				; CIpCache::CIpCache
_TEXT	ENDS
PUBLIC	??1CIpCache@@UAE@XZ				; CIpCache::~CIpCache
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCIpCache@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCIpCache@@UAEPAXI@Z PROC				; CIpCache::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CIpCache@@UAE@XZ	; CIpCache::~CIpCache
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCIpCache@@UAEPAXI@Z ENDP				; CIpCache::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CIpCache@@UAE@XZ PROC				; CIpCache::~CIpCache
; _this$ = ecx

; 14   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CIpCache@@6B@

; 15   : 
; 16   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??1CIpCache@@UAE@XZ ENDP				; CIpCache::~CIpCache
; Function compile flags: /Odtp /ZI
_n$204446 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CIpCache@@QAEXXZ PROC				; CIpCache::Init
; _this$ = ecx

; 19   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 48	 sub	 esp, 72			; 00000048H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	for (int n=0;n<MAX_IP_CACHE; n++)

  0005c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$204446[ebp], 0
  00063	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  00065	8b 45 f8	 mov	 eax, DWORD PTR _n$204446[ebp]
  00068	83 c0 01	 add	 eax, 1
  0006b	89 45 f8	 mov	 DWORD PTR _n$204446[ebp], eax
$LN3@Init:
  0006e	81 7d f8 d0 07
	00 00		 cmp	 DWORD PTR _n$204446[ebp], 2000 ; 000007d0H
  00075	7d 13		 jge	 SHORT $LN4@Init

; 21   : 	{
; 22   : 		this->m_IpInfo[n].IpUsed = FALSE;

  00077	8b 45 f8	 mov	 eax, DWORD PTR _n$204446[ebp]
  0007a	6b c0 18	 imul	 eax, 24			; 00000018H
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 23   : 	}

  00088	eb db		 jmp	 SHORT $LN2@Init
$LN4@Init:

; 24   : }

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?Init@CIpCache@@QAEXXZ ENDP				; CIpCache::Init
_TEXT	ENDS
PUBLIC	?AddIp@CIpCache@@QAEHPAD@Z			; CIpCache::AddIp
EXTRN	_strcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_blank$ = -12						; size = 4
_n$ = -8						; size = 4
_this$ = -4						; size = 4
_ip$ = 8						; size = 4
?AddIp@CIpCache@@QAEHPAD@Z PROC				; CIpCache::AddIp
; _this$ = ecx

; 27   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  000a6	53		 push	 ebx
  000a7	56		 push	 esi
  000a8	57		 push	 edi
  000a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	int n;
; 29   : 	int blank=-1;

  000ac	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _blank$[ebp], -1

; 30   : 	
; 31   : 	for (n=0;n<MAX_IP_CACHE;n++)

  000b3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  000ba	eb 09		 jmp	 SHORT $LN14@AddIp
$LN13@AddIp:
  000bc	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000bf	83 c0 01	 add	 eax, 1
  000c2	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN14@AddIp:
  000c5	81 7d f8 d0 07
	00 00		 cmp	 DWORD PTR _n$[ebp], 2000 ; 000007d0H
  000cc	0f 8d ae 00 00
	00		 jge	 $LN12@AddIp

; 32   : 	{
; 33   : 		if (this->m_IpInfo[n].IpUsed != FALSE)

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000d5	6b c0 18	 imul	 eax, 24			; 00000018H
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	83 7c 01 14 00	 cmp	 DWORD PTR [ecx+eax+20], 0
  000e0	0f 84 89 00 00
	00		 je	 $LN11@AddIp

; 34   : 		{
; 35   : 			if (GetTickCount()>this->m_IpInfo[n].Time )

  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000ec	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  000ef	6b c9 18	 imul	 ecx, 24			; 00000018H
  000f2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f5	3b 44 0a 18	 cmp	 eax, DWORD PTR [edx+ecx+24]
  000f9	76 1f		 jbe	 SHORT $LN10@AddIp

; 36   : 			{
; 37   : 				this->m_IpInfo[n].IpUsed = FALSE;

  000fb	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000fe	6b c0 18	 imul	 eax, 24			; 00000018H
  00101	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 38   : 
; 39   : 				if(blank < 0)

  0010c	83 7d f4 00	 cmp	 DWORD PTR _blank$[ebp], 0
  00110	7d 06		 jge	 SHORT $LN9@AddIp

; 40   : 				{
; 41   : 					blank = n;

  00112	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00115	89 45 f4	 mov	 DWORD PTR _blank$[ebp], eax
$LN9@AddIp:

; 42   : 				}
; 43   : 			}

  00118	eb 53		 jmp	 SHORT $LN8@AddIp
$LN10@AddIp:

; 44   : 			else if (this->m_IpInfo[n].IpAddress[0]==ip[0])

  0011a	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0011d	6b c0 18	 imul	 eax, 24			; 00000018H
  00120	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	0f be 54 01 04	 movsx	 edx, BYTE PTR [ecx+eax+4]
  00128	8b 45 08	 mov	 eax, DWORD PTR _ip$[ebp]
  0012b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0012e	3b d1		 cmp	 edx, ecx
  00130	75 3b		 jne	 SHORT $LN8@AddIp

; 45   : 			{
; 46   : 				if (this->m_IpInfo[n].IpAddress[4]==ip[4])

  00132	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00135	6b c0 18	 imul	 eax, 24			; 00000018H
  00138	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	0f be 54 01 08	 movsx	 edx, BYTE PTR [ecx+eax+8]
  00140	8b 45 08	 mov	 eax, DWORD PTR _ip$[ebp]
  00143	0f be 48 04	 movsx	 ecx, BYTE PTR [eax+4]
  00147	3b d1		 cmp	 edx, ecx
  00149	75 22		 jne	 SHORT $LN8@AddIp

; 47   : 				{
; 48   : 					if (!strcmp(this->m_IpInfo[n].IpAddress, ip))

  0014b	8b 45 08	 mov	 eax, DWORD PTR _ip$[ebp]
  0014e	50		 push	 eax
  0014f	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  00152	6b c9 18	 imul	 ecx, 24			; 00000018H
  00155	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00158	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _strcmp
  00162	83 c4 08	 add	 esp, 8
  00165	85 c0		 test	 eax, eax
  00167	75 04		 jne	 SHORT $LN8@AddIp

; 49   : 					{
; 50   : 						return 0;

  00169	33 c0		 xor	 eax, eax
  0016b	eb 67		 jmp	 SHORT $LN15@AddIp
$LN8@AddIp:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 		else

  0016d	eb 0c		 jmp	 SHORT $LN4@AddIp
$LN11@AddIp:

; 56   : 		{
; 57   : 			if (blank < 0)

  0016f	83 7d f4 00	 cmp	 DWORD PTR _blank$[ebp], 0
  00173	7d 06		 jge	 SHORT $LN4@AddIp

; 58   : 			{
; 59   : 				blank = n;

  00175	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00178	89 45 f4	 mov	 DWORD PTR _blank$[ebp], eax
$LN4@AddIp:

; 60   : 			}
; 61   : 		}
; 62   : 	}

  0017b	e9 3c ff ff ff	 jmp	 $LN13@AddIp
$LN12@AddIp:

; 63   : 
; 64   : 	if (blank >= 0 )

  00180	83 7d f4 00	 cmp	 DWORD PTR _blank$[ebp], 0
  00184	7c 4c		 jl	 SHORT $LN2@AddIp

; 65   : 	{
; 66   : 		strcpy(this->m_IpInfo[blank].IpAddress, ip);

  00186	8b 45 08	 mov	 eax, DWORD PTR _ip$[ebp]
  00189	50		 push	 eax
  0018a	8b 4d f4	 mov	 ecx, DWORD PTR _blank$[ebp]
  0018d	6b c9 18	 imul	 ecx, 24			; 00000018H
  00190	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00193	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 _strcpy
  0019d	83 c4 08	 add	 esp, 8

; 67   : 
; 68   : 		this->m_IpInfo[blank].IpUsed = TRUE;

  001a0	8b 45 f4	 mov	 eax, DWORD PTR _blank$[ebp]
  001a3	6b c0 18	 imul	 eax, 24			; 00000018H
  001a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a9	c7 44 01 14 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 1

; 69   : 		
; 70   : 		this->m_IpInfo[blank].Time = GetTickCount()+ 30000;		

  001b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001b7	05 30 75 00 00	 add	 eax, 30000		; 00007530H
  001bc	8b 4d f4	 mov	 ecx, DWORD PTR _blank$[ebp]
  001bf	6b c9 18	 imul	 ecx, 24			; 00000018H
  001c2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001c5	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax

; 71   : 		return TRUE;

  001c9	b8 01 00 00 00	 mov	 eax, 1
  001ce	eb 04		 jmp	 SHORT $LN15@AddIp

; 72   : 	}
; 73   : 	else

  001d0	eb 02		 jmp	 SHORT $LN15@AddIp
$LN2@AddIp:

; 74   : 	{
; 75   : 		return FALSE;

  001d2	33 c0		 xor	 eax, eax
$LN15@AddIp:

; 76   : 	}
; 77   : 
; 78   : }

  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 04 00	 ret	 4
?AddIp@CIpCache@@QAEHPAD@Z ENDP				; CIpCache::AddIp
_TEXT	ENDS
PUBLIC	?DelIp@CIpCache@@QAEXPAD@Z			; CIpCache::DelIp
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$204474 = -8						; size = 4
_this$ = -4						; size = 4
_ip$ = 8						; size = 4
?DelIp@CIpCache@@QAEXPAD@Z PROC				; CIpCache::DelIp
; _this$ = ecx

; 81   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	83 ec 48	 sub	 esp, 72			; 00000048H
  001e6	53		 push	 ebx
  001e7	56		 push	 esi
  001e8	57		 push	 edi
  001e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	for (int n=0; n<MAX_IP_CACHE;n++)

  001ec	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$204474[ebp], 0
  001f3	eb 09		 jmp	 SHORT $LN7@DelIp
$LN6@DelIp:
  001f5	8b 45 f8	 mov	 eax, DWORD PTR _n$204474[ebp]
  001f8	83 c0 01	 add	 eax, 1
  001fb	89 45 f8	 mov	 DWORD PTR _n$204474[ebp], eax
$LN7@DelIp:
  001fe	81 7d f8 d0 07
	00 00		 cmp	 DWORD PTR _n$204474[ebp], 2000 ; 000007d0H
  00205	7d 75		 jge	 SHORT $LN8@DelIp

; 83   : 	{
; 84   : 		if (this->m_IpInfo[n].IpUsed != FALSE )

  00207	8b 45 f8	 mov	 eax, DWORD PTR _n$204474[ebp]
  0020a	6b c0 18	 imul	 eax, 24			; 00000018H
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00210	83 7c 01 14 00	 cmp	 DWORD PTR [ecx+eax+20], 0
  00215	74 60		 je	 SHORT $LN4@DelIp

; 85   : 		{
; 86   : 			if (this->m_IpInfo[n].IpAddress[0] == ip[0])

  00217	8b 45 f8	 mov	 eax, DWORD PTR _n$204474[ebp]
  0021a	6b c0 18	 imul	 eax, 24			; 00000018H
  0021d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00220	0f be 54 01 04	 movsx	 edx, BYTE PTR [ecx+eax+4]
  00225	8b 45 08	 mov	 eax, DWORD PTR _ip$[ebp]
  00228	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0022b	3b d1		 cmp	 edx, ecx
  0022d	75 48		 jne	 SHORT $LN4@DelIp

; 87   : 			{
; 88   : 				if (this->m_IpInfo[n].IpAddress[4] == ip[4])

  0022f	8b 45 f8	 mov	 eax, DWORD PTR _n$204474[ebp]
  00232	6b c0 18	 imul	 eax, 24			; 00000018H
  00235	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00238	0f be 54 01 08	 movsx	 edx, BYTE PTR [ecx+eax+8]
  0023d	8b 45 08	 mov	 eax, DWORD PTR _ip$[ebp]
  00240	0f be 48 04	 movsx	 ecx, BYTE PTR [eax+4]
  00244	3b d1		 cmp	 edx, ecx
  00246	75 2f		 jne	 SHORT $LN4@DelIp

; 89   : 				{
; 90   : 					if (!strcmp(this->m_IpInfo[n].IpAddress , ip))

  00248	8b 45 08	 mov	 eax, DWORD PTR _ip$[ebp]
  0024b	50		 push	 eax
  0024c	8b 4d f8	 mov	 ecx, DWORD PTR _n$204474[ebp]
  0024f	6b c9 18	 imul	 ecx, 24			; 00000018H
  00252	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00255	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 _strcmp
  0025f	83 c4 08	 add	 esp, 8
  00262	85 c0		 test	 eax, eax
  00264	75 11		 jne	 SHORT $LN4@DelIp

; 91   : 					{
; 92   : 						this->m_IpInfo[n].IpUsed = FALSE;

  00266	8b 45 f8	 mov	 eax, DWORD PTR _n$204474[ebp]
  00269	6b c0 18	 imul	 eax, 24			; 00000018H
  0026c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0026f	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0
$LN4@DelIp:

; 93   : 					}
; 94   : 				}
; 95   : 			}
; 96   : 		}
; 97   : 	}

  00277	e9 79 ff ff ff	 jmp	 $LN6@DelIp
$LN8@DelIp:

; 98   : }

  0027c	5f		 pop	 edi
  0027d	5e		 pop	 esi
  0027e	5b		 pop	 ebx
  0027f	8b e5		 mov	 esp, ebp
  00281	5d		 pop	 ebp
  00282	c2 04 00	 ret	 4
?DelIp@CIpCache@@QAEXPAD@Z ENDP				; CIpCache::DelIp
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__EIpCache@@YAXXZ
text$yc	SEGMENT
??__EIpCache@@YAXXZ PROC				; `dynamic initializer for 'IpCache'', COMDAT

; 4    : CIpCache IpCache;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?IpCache@@3VCIpCache@@A ; IpCache
  0000e	e8 00 00 00 00	 call	 ??0CIpCache@@QAE@XZ	; CIpCache::CIpCache
  00013	68 00 00 00 00	 push	 OFFSET ??__FIpCache@@YAXXZ ; `dynamic atexit destructor for 'IpCache''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EIpCache@@YAXXZ ENDP				; `dynamic initializer for 'IpCache''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FIpCache@@YAXXZ
text$yd	SEGMENT
??__FIpCache@@YAXXZ PROC				; `dynamic atexit destructor for 'IpCache'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?IpCache@@3VCIpCache@@A ; IpCache
  0000e	e8 00 00 00 00	 call	 ??1CIpCache@@UAE@XZ	; CIpCache::~CIpCache
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FIpCache@@YAXXZ ENDP				; `dynamic atexit destructor for 'IpCache''
text$yd	ENDS
PUBLIC	?IpCache@@3VCIpCache@@A				; IpCache
_BSS	SEGMENT
?IpCache@@3VCIpCache@@A DB 0bb84H DUP (?)		; IpCache
_BSS	ENDS
CRT$XCU	SEGMENT
_IpCache$initializer$ DD FLAT:??__EIpCache@@YAXXZ
CRT$XCU	ENDS
END
