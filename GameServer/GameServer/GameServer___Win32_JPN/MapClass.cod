; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\MapClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?init@MapClass@@QAEXXZ				; MapClass::init
PUBLIC	??_7MapClass@@6B@				; MapClass::`vftable'
PUBLIC	??0MapClass@@QAE@XZ				; MapClass::MapClass
PUBLIC	??_R4MapClass@@6B@				; MapClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMapClass@@@8				; MapClass `RTTI Type Descriptor'
PUBLIC	??_R3MapClass@@8				; MapClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MapClass@@8				; MapClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MapClass@@8			; MapClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__imp__SetRect@20:PROC
EXTRN	_rand:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0CMapItem@@QAE@XZ:PROC			; CMapItem::CMapItem
EXTRN	??1CMapItem@@UAE@XZ:PROC			; CMapItem::~CMapItem
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EMapClass@@UAEPAXI@Z:PROC			; MapClass::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@MapClass@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapclass.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@MapClass@@8 DD FLAT:??_R0?AVMapClass@@@8	; MapClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MapClass@@8
rdata$r	ENDS
;	COMDAT ??_R2MapClass@@8
rdata$r	SEGMENT
??_R2MapClass@@8 DD FLAT:??_R1A@?0A@EA@MapClass@@8	; MapClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MapClass@@8
rdata$r	SEGMENT
??_R3MapClass@@8 DD 00H					; MapClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MapClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMapClass@@@8
_DATA	SEGMENT
??_R0?AVMapClass@@@8 DD FLAT:??_7type_info@@6B@		; MapClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMapClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MapClass@@6B@
rdata$r	SEGMENT
??_R4MapClass@@6B@ DD 00H				; MapClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMapClass@@@8
	DD	FLAT:??_R3MapClass@@8
rdata$r	ENDS
;	COMDAT ??_7MapClass@@6B@
CONST	SEGMENT
??_7MapClass@@6B@ DD FLAT:??_R4MapClass@@6B@		; MapClass::`vftable'
	DD	FLAT:??_EMapClass@@UAEPAXI@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0MapClass@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MapClass@@QAE@XZ$0
__ehfuncinfo$??0MapClass@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MapClass@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0MapClass@@QAE@XZ PROC				; MapClass::MapClass
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0MapClass@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7MapClass@@6B@
  00034	68 00 00 00 00	 push	 OFFSET ??1CMapItem@@UAE@XZ ; CMapItem::~CMapItem
  00039	68 00 00 00 00	 push	 OFFSET ??0CMapItem@@QAE@XZ ; CMapItem::CMapItem
  0003e	68 2c 01 00 00	 push	 300			; 0000012cH
  00043	68 74 04 00 00	 push	 1140			; 00000474H
  00048	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	83 c0 20	 add	 eax, 32			; 00000020H
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 14   : 	this->m_Weather =0;

  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 15   : 	this->m_WeatherTimer=GetTickCount();

  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 16   : 	this->m_NextWeatherTimer=(rand()%10000)+10000;

  0006e	e8 00 00 00 00	 call	 _rand
  00073	99		 cdq
  00074	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00079	f7 f9		 idiv	 ecx
  0007b	81 c2 10 27 00
	00		 add	 edx, 10000		; 00002710H
  00081	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00084	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 17   : 	this->init();

  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?init@MapClass@@QAEXXZ	; MapClass::init

; 18   : 	
; 19   : 	SetRect(&this->gRegenRect[0], 130, 116, 151, 137);

  0008f	68 89 00 00 00	 push	 137			; 00000089H
  00094	68 97 00 00 00	 push	 151			; 00000097H
  00099	6a 74		 push	 116			; 00000074H
  0009b	68 82 00 00 00	 push	 130			; 00000082H
  000a0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	05 14 38 05 00	 add	 eax, 342036		; 00053814H
  000a8	50		 push	 eax
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 20   : 	SetRect(&this->gRegenRect[1], 106, 236, 112, 243);

  000af	68 f3 00 00 00	 push	 243			; 000000f3H
  000b4	6a 70		 push	 112			; 00000070H
  000b6	68 ec 00 00 00	 push	 236			; 000000ecH
  000bb	6a 6a		 push	 106			; 0000006aH
  000bd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	05 24 38 05 00	 add	 eax, 342052		; 00053824H
  000c5	50		 push	 eax
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 21   : 	SetRect(&this->gRegenRect[2], 197, 35, 218, 50);

  000cc	6a 32		 push	 50			; 00000032H
  000ce	68 da 00 00 00	 push	 218			; 000000daH
  000d3	6a 23		 push	 35			; 00000023H
  000d5	68 c5 00 00 00	 push	 197			; 000000c5H
  000da	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000dd	05 34 38 05 00	 add	 eax, 342068		; 00053834H
  000e2	50		 push	 eax
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 22   : 	SetRect(&this->gRegenRect[3], 174, 101, 187, 125);

  000e9	6a 7d		 push	 125			; 0000007dH
  000eb	68 bb 00 00 00	 push	 187			; 000000bbH
  000f0	6a 65		 push	 101			; 00000065H
  000f2	68 ae 00 00 00	 push	 174			; 000000aeH
  000f7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000fa	05 44 38 05 00	 add	 eax, 342084		; 00053844H
  000ff	50		 push	 eax
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 23   : 	SetRect(&this->gRegenRect[4], 201, 70, 213, 81);

  00106	6a 51		 push	 81			; 00000051H
  00108	68 d5 00 00 00	 push	 213			; 000000d5H
  0010d	6a 46		 push	 70			; 00000046H
  0010f	68 c9 00 00 00	 push	 201			; 000000c9H
  00114	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00117	05 54 38 05 00	 add	 eax, 342100		; 00053854H
  0011c	50		 push	 eax
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 24   : 	SetRect(&this->gRegenRect[5], 89, 135, 90, 136);

  00123	68 88 00 00 00	 push	 136			; 00000088H
  00128	6a 5a		 push	 90			; 0000005aH
  0012a	68 87 00 00 00	 push	 135			; 00000087H
  0012f	6a 59		 push	 89			; 00000059H
  00131	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00134	05 64 38 05 00	 add	 eax, 342116		; 00053864H
  00139	50		 push	 eax
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 25   : 	SetRect(&this->gRegenRect[6], 89, 135, 90, 136);

  00140	68 88 00 00 00	 push	 136			; 00000088H
  00145	6a 5a		 push	 90			; 0000005aH
  00147	68 87 00 00 00	 push	 135			; 00000087H
  0014c	6a 59		 push	 89			; 00000059H
  0014e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00151	05 74 38 05 00	 add	 eax, 342132		; 00053874H
  00156	50		 push	 eax
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 26   : 	SetRect(&this->gRegenRect[7], 14, 11, 27, 23);

  0015d	6a 17		 push	 23			; 00000017H
  0015f	6a 1b		 push	 27			; 0000001bH
  00161	6a 0b		 push	 11			; 0000000bH
  00163	6a 0e		 push	 14			; 0000000eH
  00165	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00168	05 84 38 05 00	 add	 eax, 342148		; 00053884H
  0016d	50		 push	 eax
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 27   : 	SetRect(&this->gRegenRect[8], 187, 54, 203, 69);

  00174	6a 45		 push	 69			; 00000045H
  00176	68 cb 00 00 00	 push	 203			; 000000cbH
  0017b	6a 36		 push	 54			; 00000036H
  0017d	68 bb 00 00 00	 push	 187			; 000000bbH
  00182	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00185	05 94 38 05 00	 add	 eax, 342164		; 00053894H
  0018a	50		 push	 eax
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 28   : 	SetRect(&this->gRegenRect[33], 82, 8, 87, 14);

  00191	6a 0e		 push	 14			; 0000000eH
  00193	6a 57		 push	 87			; 00000057H
  00195	6a 08		 push	 8
  00197	6a 52		 push	 82			; 00000052H
  00199	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0019c	05 24 3a 05 00	 add	 eax, 342564		; 00053a24H
  001a1	50		 push	 eax
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 29   : 	SetRect(&this->gRegenRect[34], 133, 41, 140, 44);

  001a8	6a 2c		 push	 44			; 0000002cH
  001aa	68 8c 00 00 00	 push	 140			; 0000008cH
  001af	6a 29		 push	 41			; 00000029H
  001b1	68 85 00 00 00	 push	 133			; 00000085H
  001b6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001b9	05 34 3a 05 00	 add	 eax, 342580		; 00053a34H
  001be	50		 push	 eax
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 30   : 	SetRect(&this->gRegenRect[51], 40, 214, 43, 224); //Elbeland??

  001c5	68 e0 00 00 00	 push	 224			; 000000e0H
  001ca	6a 2b		 push	 43			; 0000002bH
  001cc	68 d6 00 00 00	 push	 214			; 000000d6H
  001d1	6a 28		 push	 40			; 00000028H
  001d3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001d6	05 44 3b 05 00	 add	 eax, 342852		; 00053b44H
  001db	50		 push	 eax
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 31   : 	this->m_ItemCount=0;

  001e2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001e5	c7 80 10 38 05
	00 00 00 00 00	 mov	 DWORD PTR [eax+342032], 0

; 32   : }

  001ef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001f6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00203	59		 pop	 ecx
  00204	5f		 pop	 edi
  00205	5e		 pop	 esi
  00206	5b		 pop	 ebx
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0MapClass@@QAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CMapItem@@UAE@XZ ; CMapItem::~CMapItem
  00005	68 2c 01 00 00	 push	 300			; 0000012cH
  0000a	68 74 04 00 00	 push	 1140			; 00000474H
  0000f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 c0 20	 add	 eax, 32			; 00000020H
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001b	c3		 ret	 0
__ehhandler$??0MapClass@@QAE@XZ:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0MapClass@@QAE@XZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0MapClass@@QAE@XZ ENDP				; MapClass::MapClass
PUBLIC	??0PATH@@QAE@XZ					; PATH::PATH
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapclass.h
xdata$x	SEGMENT
__unwindtable$?init@MapClass@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@MapClass@@QAEXXZ$0
__ehfuncinfo$?init@MapClass@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?init@MapClass@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?init@MapClass@@QAEXXZ
_TEXT	SEGMENT
tv73 = -92						; size = 4
$T230391 = -88						; size = 4
$T230392 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?init@MapClass@@QAEXXZ PROC				; MapClass::init, COMDAT
; _this$ = ecx

; 58   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?init@MapClass@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 		this->m_attrbuf = 0;

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 60   : 		this->path = new PATH;

  00035	68 54 04 00 00	 push	 1108			; 00000454H
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	83 c4 04	 add	 esp, 4
  00042	89 45 ac	 mov	 DWORD PTR $T230392[ebp], eax
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	83 7d ac 00	 cmp	 DWORD PTR $T230392[ebp], 0
  00050	74 0d		 je	 SHORT $LN3@init
  00052	8b 4d ac	 mov	 ecx, DWORD PTR $T230392[ebp]
  00055	e8 00 00 00 00	 call	 ??0PATH@@QAE@XZ		; PATH::PATH
  0005a	89 45 a4	 mov	 DWORD PTR tv73[ebp], eax
  0005d	eb 07		 jmp	 SHORT $LN4@init
$LN3@init:
  0005f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@init:
  00066	8b 45 a4	 mov	 eax, DWORD PTR tv73[ebp]
  00069	89 45 a8	 mov	 DWORD PTR $T230391[ebp], eax
  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 55 a8	 mov	 edx, DWORD PTR $T230391[ebp]
  00079	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 61   : 		this->m_width = 0;

  0007c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 62   : 		this->m_height = 0;

  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 63   : 	}

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@MapClass@@QAEXXZ$0:
  00000	8b 45 ac	 mov	 eax, DWORD PTR $T230392[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?init@MapClass@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?init@MapClass@@QAEXXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?init@MapClass@@QAEXXZ ENDP				; MapClass::init
PUBLIC	__$ArrayPad$
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\zzzpath.h
;	COMDAT ??0PATH@@QAE@XZ
_TEXT	SEGMENT
_dir$ = -72						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0PATH@@QAE@XZ PROC					; PATH::PATH, COMDAT
; _this$ = ecx

; 522  : 	PATH() // line : 250

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 523  : 	{
; 524  : 		 int dir[16] = {-1, -1,

  00019	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR _dir$[ebp], -1
  00020	c7 45 bc ff ff
	ff ff		 mov	 DWORD PTR _dir$[ebp+4], -1

; 525  : 						0, -1,

  00027	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp+8], 0
  0002e	c7 45 c4 ff ff
	ff ff		 mov	 DWORD PTR _dir$[ebp+12], -1

; 526  : 						1, -1,

  00035	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _dir$[ebp+16], 1
  0003c	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _dir$[ebp+20], -1

; 527  : 						1, 0,

  00043	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _dir$[ebp+24], 1
  0004a	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp+28], 0

; 528  : 						1, 1,

  00051	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _dir$[ebp+32], 1
  00058	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _dir$[ebp+36], 1

; 529  : 						0, 1,

  0005f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp+40], 0
  00066	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _dir$[ebp+44], 1

; 530  : 						-1, 1,

  0006d	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _dir$[ebp+48], -1
  00074	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _dir$[ebp+52], 1

; 531  : 						-1, 0} ;

  0007b	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _dir$[ebp+56], -1
  00082	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp+60], 0

; 532  : 
; 533  : 		memcpy(this->Dir, dir, sizeof(dir));

  00089	6a 40		 push	 64			; 00000040H
  0008b	8d 45 b8	 lea	 eax, DWORD PTR _dir$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _memcpy
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 534  : 	};	// line : 252

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000aa	33 cd		 xor	 ecx, ebp
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
??0PATH@@QAE@XZ ENDP					; PATH::PATH
_TEXT	ENDS
PUBLIC	??1MapClass@@UAE@XZ				; MapClass::~MapClass
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GMapClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMapClass@@UAEPAXI@Z PROC				; MapClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1MapClass@@UAE@XZ	; MapClass::~MapClass
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GMapClass@@UAEPAXI@Z ENDP				; MapClass::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?free@MapClass@@QAEXXZ				; MapClass::free
xdata$x	SEGMENT
__unwindtable$??1MapClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MapClass@@UAE@XZ$0
__ehfuncinfo$??1MapClass@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1MapClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapclass.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1MapClass@@UAE@XZ PROC				; MapClass::~MapClass
; _this$ = ecx

; 35   : {

  00210	55		 push	 ebp
  00211	8b ec		 mov	 ebp, esp
  00213	6a ff		 push	 -1
  00215	68 00 00 00 00	 push	 __ehhandler$??1MapClass@@UAE@XZ
  0021a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00220	50		 push	 eax
  00221	83 ec 44	 sub	 esp, 68			; 00000044H
  00224	53		 push	 ebx
  00225	56		 push	 esi
  00226	57		 push	 edi
  00227	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0022c	33 c5		 xor	 eax, ebp
  0022e	50		 push	 eax
  0022f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00232	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00238	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0023b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0023e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7MapClass@@6B@
  00244	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 36   : 	this->free();

  0024b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0024e	e8 00 00 00 00	 call	 ?free@MapClass@@QAEXXZ	; MapClass::free

; 37   : }

  00253	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0025a	68 00 00 00 00	 push	 OFFSET ??1CMapItem@@UAE@XZ ; CMapItem::~CMapItem
  0025f	68 2c 01 00 00	 push	 300			; 0000012cH
  00264	68 74 04 00 00	 push	 1140			; 00000474H
  00269	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0026c	83 c0 20	 add	 eax, 32			; 00000020H
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00275	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00278	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0027f	59		 pop	 ecx
  00280	5f		 pop	 edi
  00281	5e		 pop	 esi
  00282	5b		 pop	 ebx
  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1MapClass@@UAE@XZ$0:
  00037	68 00 00 00 00	 push	 OFFSET ??1CMapItem@@UAE@XZ ; CMapItem::~CMapItem
  0003c	68 2c 01 00 00	 push	 300			; 0000012cH
  00041	68 74 04 00 00	 push	 1140			; 00000474H
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 c0 20	 add	 eax, 32			; 00000020H
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00052	c3		 ret	 0
__ehhandler$??1MapClass@@UAE@XZ:
  00053	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00057	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005a	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0005d	33 c8		 xor	 ecx, eax
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1MapClass@@UAE@XZ
  00069	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1MapClass@@UAE@XZ ENDP				; MapClass::~MapClass
PUBLIC	??_GPATH@@QAEPAXI@Z				; PATH::`scalar deleting destructor'
EXTRN	__imp__GlobalFree@4:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapclass.h
;	COMDAT ?free@MapClass@@QAEXXZ
_TEXT	SEGMENT
tv76 = -80						; size = 4
$T230415 = -76						; size = 4
$T230416 = -72						; size = 4
_this$ = -4						; size = 4
?free@MapClass@@QAEXXZ PROC				; MapClass::free, COMDAT
; _this$ = ecx

; 66   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 		if ( this->m_attrbuf != 0 )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	74 17		 je	 SHORT $LN2@free

; 68   : 		{
; 69   : 			GlobalFree(this->m_attrbuf);

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001b	51		 push	 ecx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalFree@4

; 70   : 			this->m_attrbuf=0;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN2@free:

; 71   : 		}
; 72   : 
; 73   : 		if ( this->path != 0 )

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00033	74 35		 je	 SHORT $LN3@free

; 74   : 		{
; 75   : 			delete this->path;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0003b	89 4d b8	 mov	 DWORD PTR $T230416[ebp], ecx
  0003e	8b 55 b8	 mov	 edx, DWORD PTR $T230416[ebp]
  00041	89 55 b4	 mov	 DWORD PTR $T230415[ebp], edx
  00044	83 7d b4 00	 cmp	 DWORD PTR $T230415[ebp], 0
  00048	74 0f		 je	 SHORT $LN5@free
  0004a	6a 01		 push	 1
  0004c	8b 4d b4	 mov	 ecx, DWORD PTR $T230415[ebp]
  0004f	e8 00 00 00 00	 call	 ??_GPATH@@QAEPAXI@Z
  00054	89 45 b0	 mov	 DWORD PTR tv76[ebp], eax
  00057	eb 07		 jmp	 SHORT $LN6@free
$LN5@free:
  00059	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN6@free:

; 76   : 			this->path = 0;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
$LN3@free:

; 77   : 		}
; 78   : 	}

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?free@MapClass@@QAEXXZ ENDP				; MapClass::free
_TEXT	ENDS
PUBLIC	??1PATH@@QAE@XZ					; PATH::~PATH
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPATH@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPATH@@QAEPAXI@Z PROC				; PATH::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1PATH@@QAE@XZ		; PATH::~PATH
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GPATH@@QAEPAXI@Z ENDP				; PATH::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\zzzpath.h
_TEXT	ENDS
;	COMDAT ??1PATH@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PATH@@QAE@XZ PROC					; PATH::~PATH, COMDAT
; _this$ = ecx

; 537  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 538  : 		return;
; 539  : 	};	// line : 255

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1PATH@@QAE@XZ ENDP					; PATH::~PATH
_TEXT	ENDS
PUBLIC	?MapNumberCheck@@YAHH@Z				; MapNumberCheck
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapclass.cpp
_TEXT	SEGMENT
_map$ = 8						; size = 4
?MapNumberCheck@@YAHH@Z PROC				; MapNumberCheck

; 40   : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	83 ec 40	 sub	 esp, 64			; 00000040H
  00296	53		 push	 ebx
  00297	56		 push	 esi
  00298	57		 push	 edi

; 41   : 	if ( map < 0 || map > MAX_NUMBER_MAP-1 )

  00299	83 7d 08 00	 cmp	 DWORD PTR _map$[ebp], 0
  0029d	7c 06		 jl	 SHORT $LN1@MapNumberC
  0029f	83 7d 08 59	 cmp	 DWORD PTR _map$[ebp], 89 ; 00000059H
  002a3	7e 04		 jle	 SHORT $LN2@MapNumberC
$LN1@MapNumberC:

; 42   : 	{
; 43   : 		return FALSE;

  002a5	33 c0		 xor	 eax, eax
  002a7	eb 05		 jmp	 SHORT $LN3@MapNumberC
$LN2@MapNumberC:

; 44   : 	}
; 45   : 	return TRUE;

  002a9	b8 01 00 00 00	 mov	 eax, 1
$LN3@MapNumberC:

; 46   : }

  002ae	5f		 pop	 edi
  002af	5e		 pop	 esi
  002b0	5b		 pop	 ebx
  002b1	8b e5		 mov	 esp, ebp
  002b3	5d		 pop	 ebp
  002b4	c3		 ret	 0
?MapNumberCheck@@YAHH@Z ENDP				; MapNumberCheck
_TEXT	ENDS
PUBLIC	??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??GetLevelPos@MapClass@@QAEXFAAF0@Z@4JA ; `MapClass::GetLevelPos'::`2'::__LINE__Var
PUBLIC	?GetAttr@MapClass@@QAEEHH@Z			; MapClass::GetAttr
PUBLIC	?GetLevelPos@MapClass@@QAEXFAAF0@Z		; MapClass::GetLevelPos
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	__except_handler4:PROC
;	COMDAT ??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\mapclass.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetLevelPos@MapClass@@QAEXFAAF0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetLevelPos@MapClass@@QAEXFAAF0@Z@4JA DD 031H ; `MapClass::GetLevelPos'::`2'::__LINE__Var
_DATA	ENDS
xdata$x	SEGMENT
__sehtable$?GetLevelPos@MapClass@@QAEXFAAF0@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff78H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@GetLevelPo
	DD	FLAT:$LN9@GetLevelPo
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_h$ = -56						; size = 4
_w$ = -52						; size = 4
_attr$ = -45						; size = 1
_loopcount$ = -44					; size = 4
_levelpos$ = -40					; size = 4
_y$ = -36						; size = 4
_x$ = -32						; size = 4
_this$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_level$ = 8						; size = 2
_ox$ = 12						; size = 4
_oy$ = 16						; size = 4
?GetLevelPos@MapClass@@QAEXFAAF0@Z PROC			; MapClass::GetLevelPos
; _this$ = ecx

; 49   : {

  002c0	55		 push	 ebp
  002c1	8b ec		 mov	 ebp, esp
  002c3	6a fe		 push	 -2			; fffffffeH
  002c5	68 00 00 00 00	 push	 OFFSET __sehtable$?GetLevelPos@MapClass@@QAEXFAAF0@Z
  002ca	68 00 00 00 00	 push	 OFFSET __except_handler4
  002cf	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  002d5	50		 push	 eax
  002d6	83 c4 98	 add	 esp, -104		; ffffff98H
  002d9	53		 push	 ebx
  002da	56		 push	 esi
  002db	57		 push	 edi
  002dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  002e1	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  002e4	33 c5		 xor	 eax, ebp
  002e6	50		 push	 eax
  002e7	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  002ea	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  002f0	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  002f3	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 
; 51   : 	int x;
; 52   : 	int y;
; 53   : 	int levelpos = 0;

  002f6	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _levelpos$[ebp], 0

; 54   : 	int loopcount = 50;

  002fd	c7 45 d4 32 00
	00 00		 mov	 DWORD PTR _loopcount$[ebp], 50 ; 00000032H
$LN4@GetLevelPo:

; 55   : 	BYTE attr;
; 56   : 	int w;
; 57   : 	int h;
; 58   : 
; 59   : 	while ( loopcount-- != 0 )

  00304	8b 45 d4	 mov	 eax, DWORD PTR _loopcount$[ebp]
  00307	8b 4d d4	 mov	 ecx, DWORD PTR _loopcount$[ebp]
  0030a	83 e9 01	 sub	 ecx, 1
  0030d	89 4d d4	 mov	 DWORD PTR _loopcount$[ebp], ecx
  00310	85 c0		 test	 eax, eax
  00312	0f 84 fa 00 00
	00		 je	 $LN3@GetLevelPo

; 60   : 	{
; 61   : 		w = this->gRegenRect[levelpos].right - this->gRegenRect[levelpos].left;

  00318	8b 45 d8	 mov	 eax, DWORD PTR _levelpos$[ebp]
  0031b	c1 e0 04	 shl	 eax, 4
  0031e	8b 4d d8	 mov	 ecx, DWORD PTR _levelpos$[ebp]
  00321	c1 e1 04	 shl	 ecx, 4
  00324	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00327	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  0032a	8b 84 02 1c 38
	05 00		 mov	 eax, DWORD PTR [edx+eax+342044]
  00331	2b 84 0e 14 38
	05 00		 sub	 eax, DWORD PTR [esi+ecx+342036]
  00338	89 45 cc	 mov	 DWORD PTR _w$[ebp], eax

; 62   : 		h = this->gRegenRect[levelpos].bottom - this->gRegenRect[levelpos].top;

  0033b	8b 45 d8	 mov	 eax, DWORD PTR _levelpos$[ebp]
  0033e	c1 e0 04	 shl	 eax, 4
  00341	8b 4d d8	 mov	 ecx, DWORD PTR _levelpos$[ebp]
  00344	c1 e1 04	 shl	 ecx, 4
  00347	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0034a	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  0034d	8b 84 02 20 38
	05 00		 mov	 eax, DWORD PTR [edx+eax+342048]
  00354	2b 84 0e 18 38
	05 00		 sub	 eax, DWORD PTR [esi+ecx+342040]
  0035b	89 45 c8	 mov	 DWORD PTR _h$[ebp], eax

; 63   : 
; 64   : 		__try

  0035e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 65   : 		{
; 66   : 			x = (short)(this->gRegenRect[levelpos].left + (rand()%w));

  00365	8b 75 d8	 mov	 esi, DWORD PTR _levelpos$[ebp]
  00368	c1 e6 04	 shl	 esi, 4
  0036b	e8 00 00 00 00	 call	 _rand
  00370	8b 4d cc	 mov	 ecx, DWORD PTR _w$[ebp]
  00373	99		 cdq
  00374	f7 f9		 idiv	 ecx
  00376	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00379	8b 8c 30 14 38
	05 00		 mov	 ecx, DWORD PTR [eax+esi+342036]
  00380	03 ca		 add	 ecx, edx
  00382	0f bf d1	 movsx	 edx, cx
  00385	89 55 e0	 mov	 DWORD PTR _x$[ebp], edx

; 67   : 			y = (short)(this->gRegenRect[levelpos].top  + (rand()%h));

  00388	8b 75 d8	 mov	 esi, DWORD PTR _levelpos$[ebp]
  0038b	c1 e6 04	 shl	 esi, 4
  0038e	e8 00 00 00 00	 call	 _rand
  00393	8b 4d c8	 mov	 ecx, DWORD PTR _h$[ebp]
  00396	99		 cdq
  00397	f7 f9		 idiv	 ecx
  00399	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0039c	8b 8c 30 18 38
	05 00		 mov	 ecx, DWORD PTR [eax+esi+342040]
  003a3	03 ca		 add	 ecx, edx
  003a5	0f bf d1	 movsx	 edx, cx
  003a8	89 55 dc	 mov	 DWORD PTR _y$[ebp], edx

; 68   : 		}

  003ab	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  003b2	eb 1e		 jmp	 SHORT $LN11@GetLevelPo
$LN8@GetLevelPo:
$LN13@GetLevelPo:

; 69   : 		__except(w=1, h=1,1)

  003b4	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _w$[ebp], 1
  003bb	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _h$[ebp], 1
  003c2	b8 01 00 00 00	 mov	 eax, 1
$LN10@GetLevelPo:
$LN12@GetLevelPo:
  003c7	c3		 ret	 0
$LN9@GetLevelPo:
  003c8	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 70   : 		{
; 71   : 		}

  003cb	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN11@GetLevelPo:

; 72   : 
; 73   : 		attr = this->GetAttr(x, y);

  003d2	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  003d5	50		 push	 eax
  003d6	8b 4d e0	 mov	 ecx, DWORD PTR _x$[ebp]
  003d9	51		 push	 ecx
  003da	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  003dd	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  003e2	88 45 d3	 mov	 BYTE PTR _attr$[ebp], al

; 74   : 
; 75   : 		if ( (attr & 4) != 4  && (attr & 8) != 8 ) 

  003e5	0f b6 45 d3	 movzx	 eax, BYTE PTR _attr$[ebp]
  003e9	83 e0 04	 and	 eax, 4
  003ec	75 1f		 jne	 SHORT $LN1@GetLevelPo
  003ee	0f b6 45 d3	 movzx	 eax, BYTE PTR _attr$[ebp]
  003f2	83 e0 08	 and	 eax, 8
  003f5	75 16		 jne	 SHORT $LN1@GetLevelPo

; 76   : 		{
; 77   : 			ox = x;

  003f7	8b 45 0c	 mov	 eax, DWORD PTR _ox$[ebp]
  003fa	66 8b 4d e0	 mov	 cx, WORD PTR _x$[ebp]
  003fe	66 89 08	 mov	 WORD PTR [eax], cx

; 78   : 			oy = y;

  00401	8b 45 10	 mov	 eax, DWORD PTR _oy$[ebp]
  00404	66 8b 4d dc	 mov	 cx, WORD PTR _y$[ebp]
  00408	66 89 08	 mov	 WORD PTR [eax], cx

; 79   : 			return;

  0040b	eb 52		 jmp	 SHORT $LN7@GetLevelPo
$LN1@GetLevelPo:

; 80   : 		}
; 81   : 	}

  0040d	e9 f2 fe ff ff	 jmp	 $LN4@GetLevelPo
$LN3@GetLevelPo:

; 82   : 	
; 83   : 	LogAdd( lMsg.Get( MSGGET(1, 204 )) , __FILE__, __LINE__);

  00412	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetLevelPos@MapClass@@QAEXFAAF0@Z@4JA
  00417	83 c0 22	 add	 eax, 34			; 00000022H
  0041a	50		 push	 eax
  0041b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  00420	68 cc 01 00 00	 push	 460			; 000001ccH
  00425	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0042a	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0042f	50		 push	 eax
  00430	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00436	83 c4 0c	 add	 esp, 12			; 0000000cH

; 84   : 	x = this->gRegenRect[levelpos].left;

  00439	8b 45 d8	 mov	 eax, DWORD PTR _levelpos$[ebp]
  0043c	c1 e0 04	 shl	 eax, 4
  0043f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00442	8b 94 01 14 38
	05 00		 mov	 edx, DWORD PTR [ecx+eax+342036]
  00449	89 55 e0	 mov	 DWORD PTR _x$[ebp], edx

; 85   : 	y = this->gRegenRect[levelpos].top;

  0044c	8b 45 d8	 mov	 eax, DWORD PTR _levelpos$[ebp]
  0044f	c1 e0 04	 shl	 eax, 4
  00452	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00455	8b 94 01 18 38
	05 00		 mov	 edx, DWORD PTR [ecx+eax+342040]
  0045c	89 55 dc	 mov	 DWORD PTR _y$[ebp], edx
$LN7@GetLevelPo:

; 86   : }

  0045f	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00462	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00469	59		 pop	 ecx
  0046a	5f		 pop	 edi
  0046b	5e		 pop	 esi
  0046c	5b		 pop	 ebx
  0046d	8b e5		 mov	 esp, ebp
  0046f	5d		 pop	 ebp
  00470	c2 0c 00	 ret	 12			; 0000000cH
?GetLevelPos@MapClass@@QAEXFAAF0@Z ENDP			; MapClass::GetLevelPos
_TEXT	ENDS
PUBLIC	?GetRandomLengthPos@MapClass@@QAEXAAF0H@Z	; MapClass::GetRandomLengthPos
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_maxlen$ = -24						; size = 4
_attr$ = -17						; size = 1
_py$ = -16						; size = 4
_px$ = -12						; size = 4
_lc$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_length$ = 16						; size = 4
?GetRandomLengthPos@MapClass@@QAEXAAF0H@Z PROC		; MapClass::GetRandomLengthPos
; _this$ = ecx

; 89   : {

  00480	55		 push	 ebp
  00481	8b ec		 mov	 ebp, esp
  00483	83 ec 58	 sub	 esp, 88			; 00000058H
  00486	53		 push	 ebx
  00487	56		 push	 esi
  00488	57		 push	 edi
  00489	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 	int lc = 10;

  0048c	c7 45 f8 0a 00
	00 00		 mov	 DWORD PTR _lc$[ebp], 10	; 0000000aH

; 91   : 	int px;
; 92   : 	int py;
; 93   : 	BYTE attr;
; 94   : 	int maxlen;
; 95   : 
; 96   : 	if ( length < 1 )

  00493	83 7d 10 01	 cmp	 DWORD PTR _length$[ebp], 1
  00497	7d 07		 jge	 SHORT $LN4@GetRandomL

; 97   : 	{
; 98   : 		length = 1;

  00499	c7 45 10 01 00
	00 00		 mov	 DWORD PTR _length$[ebp], 1
$LN4@GetRandomL:

; 99   : 	}
; 100  : 
; 101  : 	maxlen = length*2;

  004a0	8b 45 10	 mov	 eax, DWORD PTR _length$[ebp]
  004a3	d1 e0		 shl	 eax, 1
  004a5	89 45 e8	 mov	 DWORD PTR _maxlen$[ebp], eax
$LN3@GetRandomL:

; 102  : 
; 103  : 	while ( lc-- != 0 )

  004a8	8b 45 f8	 mov	 eax, DWORD PTR _lc$[ebp]
  004ab	8b 4d f8	 mov	 ecx, DWORD PTR _lc$[ebp]
  004ae	83 e9 01	 sub	 ecx, 1
  004b1	89 4d f8	 mov	 DWORD PTR _lc$[ebp], ecx
  004b4	85 c0		 test	 eax, eax
  004b6	74 6b		 je	 SHORT $LN5@GetRandomL

; 104  : 	{
; 105  : 		px = (x-length)+(rand()%maxlen);

  004b8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  004bb	0f bf 30	 movsx	 esi, WORD PTR [eax]
  004be	2b 75 10	 sub	 esi, DWORD PTR _length$[ebp]
  004c1	e8 00 00 00 00	 call	 _rand
  004c6	99		 cdq
  004c7	f7 7d e8	 idiv	 DWORD PTR _maxlen$[ebp]
  004ca	03 f2		 add	 esi, edx
  004cc	89 75 f4	 mov	 DWORD PTR _px$[ebp], esi

; 106  : 		py = (y-length)+(rand()%maxlen);

  004cf	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  004d2	0f bf 30	 movsx	 esi, WORD PTR [eax]
  004d5	2b 75 10	 sub	 esi, DWORD PTR _length$[ebp]
  004d8	e8 00 00 00 00	 call	 _rand
  004dd	99		 cdq
  004de	f7 7d e8	 idiv	 DWORD PTR _maxlen$[ebp]
  004e1	03 f2		 add	 esi, edx
  004e3	89 75 f0	 mov	 DWORD PTR _py$[ebp], esi

; 107  : 
; 108  : 		attr = this->GetAttr(px, py);

  004e6	8b 45 f0	 mov	 eax, DWORD PTR _py$[ebp]
  004e9	50		 push	 eax
  004ea	8b 4d f4	 mov	 ecx, DWORD PTR _px$[ebp]
  004ed	51		 push	 ecx
  004ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f1	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  004f6	88 45 ef	 mov	 BYTE PTR _attr$[ebp], al

; 109  : 
; 110  : 		if ( (attr & 4) != 4  && (attr & 8) != 8 )

  004f9	0f b6 45 ef	 movzx	 eax, BYTE PTR _attr$[ebp]
  004fd	83 e0 04	 and	 eax, 4
  00500	75 1f		 jne	 SHORT $LN1@GetRandomL
  00502	0f b6 45 ef	 movzx	 eax, BYTE PTR _attr$[ebp]
  00506	83 e0 08	 and	 eax, 8
  00509	75 16		 jne	 SHORT $LN1@GetRandomL

; 111  : 		{
; 112  : 			x = px;

  0050b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0050e	66 8b 4d f4	 mov	 cx, WORD PTR _px$[ebp]
  00512	66 89 08	 mov	 WORD PTR [eax], cx

; 113  : 			y = py;

  00515	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00518	66 8b 4d f0	 mov	 cx, WORD PTR _py$[ebp]
  0051c	66 89 08	 mov	 WORD PTR [eax], cx

; 114  : 			return;

  0051f	eb 02		 jmp	 SHORT $LN5@GetRandomL
$LN1@GetRandomL:

; 115  : 		}
; 116  : 	}

  00521	eb 85		 jmp	 SHORT $LN3@GetRandomL
$LN5@GetRandomL:

; 117  : }

  00523	5f		 pop	 edi
  00524	5e		 pop	 esi
  00525	5b		 pop	 ebx
  00526	8b e5		 mov	 esp, ebp
  00528	5d		 pop	 ebp
  00529	c2 0c 00	 ret	 12			; 0000000cH
?GetRandomLengthPos@MapClass@@QAEXAAF0H@Z ENDP		; MapClass::GetRandomLengthPos
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetMapPos@MapClass@@QAEXFAAF0@Z@4JA ; `MapClass::GetMapPos'::`2'::__LINE__Var
PUBLIC	?GetMapPos@MapClass@@QAEXFAAF0@Z		; MapClass::GetMapPos
;	COMDAT ?__LINE__Var@?1??GetMapPos@MapClass@@QAEXFAAF0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetMapPos@MapClass@@QAEXFAAF0@Z@4JA DD 078H ; `MapClass::GetMapPos'::`2'::__LINE__Var
_DATA	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?GetMapPos@MapClass@@QAEXFAAF0@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff78H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN16@GetMapPos
	DD	FLAT:$LN17@GetMapPos
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_h$ = -56						; size = 4
_w$ = -52						; size = 4
_attr$ = -45						; size = 1
_loopcount$ = -44					; size = 4
_levelpos$ = -40					; size = 4
_y$ = -36						; size = 4
_x$ = -32						; size = 4
_this$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_Map$ = 8						; size = 2
_ox$ = 12						; size = 4
_oy$ = 16						; size = 4
?GetMapPos@MapClass@@QAEXFAAF0@Z PROC			; MapClass::GetMapPos
; _this$ = ecx

; 120  : {

  00530	55		 push	 ebp
  00531	8b ec		 mov	 ebp, esp
  00533	6a fe		 push	 -2			; fffffffeH
  00535	68 00 00 00 00	 push	 OFFSET __sehtable$?GetMapPos@MapClass@@QAEXFAAF0@Z
  0053a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0053f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00545	50		 push	 eax
  00546	83 c4 98	 add	 esp, -104		; ffffff98H
  00549	53		 push	 ebx
  0054a	56		 push	 esi
  0054b	57		 push	 edi
  0054c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00551	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00554	33 c5		 xor	 eax, ebp
  00556	50		 push	 eax
  00557	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0055a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00560	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00563	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 	if ( Map != 8 )

  00566	0f bf 45 08	 movsx	 eax, WORD PTR _Map$[ebp]
  0056a	83 f8 08	 cmp	 eax, 8
  0056d	74 54		 je	 SHORT $LN12@GetMapPos

; 122  : 	{
; 123  : 		if ( Map == 33 )

  0056f	0f bf 45 08	 movsx	 eax, WORD PTR _Map$[ebp]
  00573	83 f8 21	 cmp	 eax, 33			; 00000021H
  00576	75 0b		 jne	 SHORT $LN11@GetMapPos

; 124  : 		{
; 125  : 			Map = 33;

  00578	b8 21 00 00 00	 mov	 eax, 33			; 00000021H
  0057d	66 89 45 08	 mov	 WORD PTR _Map$[ebp], ax
  00581	eb 40		 jmp	 SHORT $LN12@GetMapPos
$LN11@GetMapPos:

; 126  : 		}
; 127  : 		else if ( Map == 34 )

  00583	0f bf 45 08	 movsx	 eax, WORD PTR _Map$[ebp]
  00587	83 f8 22	 cmp	 eax, 34			; 00000022H
  0058a	75 0b		 jne	 SHORT $LN9@GetMapPos

; 128  : 		{
; 129  : 			Map = 34;

  0058c	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
  00591	66 89 45 08	 mov	 WORD PTR _Map$[ebp], ax
  00595	eb 2c		 jmp	 SHORT $LN12@GetMapPos
$LN9@GetMapPos:

; 130  : 		}
; 131  : 		else if ( Map == 51 )

  00597	0f bf 45 08	 movsx	 eax, WORD PTR _Map$[ebp]
  0059b	83 f8 33	 cmp	 eax, 51			; 00000033H
  0059e	75 0b		 jne	 SHORT $LN7@GetMapPos

; 132  : 		{
; 133  : 			Map = 51;

  005a0	b8 33 00 00 00	 mov	 eax, 51			; 00000033H
  005a5	66 89 45 08	 mov	 WORD PTR _Map$[ebp], ax
  005a9	eb 18		 jmp	 SHORT $LN12@GetMapPos
$LN7@GetMapPos:

; 134  : 		}
; 135  : 		else if ( Map > 4 && Map != 7 )

  005ab	0f bf 45 08	 movsx	 eax, WORD PTR _Map$[ebp]
  005af	83 f8 04	 cmp	 eax, 4
  005b2	7e 0f		 jle	 SHORT $LN12@GetMapPos
  005b4	0f bf 45 08	 movsx	 eax, WORD PTR _Map$[ebp]
  005b8	83 f8 07	 cmp	 eax, 7
  005bb	74 06		 je	 SHORT $LN12@GetMapPos

; 136  : 		{
; 137  : 			Map = 0;

  005bd	33 c0		 xor	 eax, eax
  005bf	66 89 45 08	 mov	 WORD PTR _Map$[ebp], ax
$LN12@GetMapPos:

; 138  : 		}
; 139  : 	}
; 140  : 
; 141  : 	int x;
; 142  : 	int y;
; 143  : 	int levelpos = Map;

  005c3	0f bf 45 08	 movsx	 eax, WORD PTR _Map$[ebp]
  005c7	89 45 d8	 mov	 DWORD PTR _levelpos$[ebp], eax

; 144  : 	int loopcount=50;

  005ca	c7 45 d4 32 00
	00 00		 mov	 DWORD PTR _loopcount$[ebp], 50 ; 00000032H
$LN4@GetMapPos:

; 145  : 	BYTE attr;
; 146  : 	int w;
; 147  : 	int h;
; 148  : 
; 149  : 	while ( loopcount-- != 0 )

  005d1	8b 45 d4	 mov	 eax, DWORD PTR _loopcount$[ebp]
  005d4	8b 4d d4	 mov	 ecx, DWORD PTR _loopcount$[ebp]
  005d7	83 e9 01	 sub	 ecx, 1
  005da	89 4d d4	 mov	 DWORD PTR _loopcount$[ebp], ecx
  005dd	85 c0		 test	 eax, eax
  005df	0f 84 fa 00 00
	00		 je	 $LN3@GetMapPos

; 150  : 	{
; 151  : 		w = this->gRegenRect[levelpos].right - this->gRegenRect[levelpos].left;

  005e5	8b 45 d8	 mov	 eax, DWORD PTR _levelpos$[ebp]
  005e8	c1 e0 04	 shl	 eax, 4
  005eb	8b 4d d8	 mov	 ecx, DWORD PTR _levelpos$[ebp]
  005ee	c1 e1 04	 shl	 ecx, 4
  005f1	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  005f4	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  005f7	8b 84 02 1c 38
	05 00		 mov	 eax, DWORD PTR [edx+eax+342044]
  005fe	2b 84 0e 14 38
	05 00		 sub	 eax, DWORD PTR [esi+ecx+342036]
  00605	89 45 cc	 mov	 DWORD PTR _w$[ebp], eax

; 152  : 		h = this->gRegenRect[levelpos].bottom - this->gRegenRect[levelpos].top;

  00608	8b 45 d8	 mov	 eax, DWORD PTR _levelpos$[ebp]
  0060b	c1 e0 04	 shl	 eax, 4
  0060e	8b 4d d8	 mov	 ecx, DWORD PTR _levelpos$[ebp]
  00611	c1 e1 04	 shl	 ecx, 4
  00614	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00617	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  0061a	8b 84 02 20 38
	05 00		 mov	 eax, DWORD PTR [edx+eax+342048]
  00621	2b 84 0e 18 38
	05 00		 sub	 eax, DWORD PTR [esi+ecx+342040]
  00628	89 45 c8	 mov	 DWORD PTR _h$[ebp], eax

; 153  : 
; 154  : 		__try

  0062b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 155  : 		{
; 156  : 			x = (short)(this->gRegenRect[levelpos].left + (rand()%w));

  00632	8b 75 d8	 mov	 esi, DWORD PTR _levelpos$[ebp]
  00635	c1 e6 04	 shl	 esi, 4
  00638	e8 00 00 00 00	 call	 _rand
  0063d	8b 4d cc	 mov	 ecx, DWORD PTR _w$[ebp]
  00640	99		 cdq
  00641	f7 f9		 idiv	 ecx
  00643	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00646	8b 8c 30 14 38
	05 00		 mov	 ecx, DWORD PTR [eax+esi+342036]
  0064d	03 ca		 add	 ecx, edx
  0064f	0f bf d1	 movsx	 edx, cx
  00652	89 55 e0	 mov	 DWORD PTR _x$[ebp], edx

; 157  : 			y = (short)(this->gRegenRect[levelpos].top  + (rand()%h));

  00655	8b 75 d8	 mov	 esi, DWORD PTR _levelpos$[ebp]
  00658	c1 e6 04	 shl	 esi, 4
  0065b	e8 00 00 00 00	 call	 _rand
  00660	8b 4d c8	 mov	 ecx, DWORD PTR _h$[ebp]
  00663	99		 cdq
  00664	f7 f9		 idiv	 ecx
  00666	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00669	8b 8c 30 18 38
	05 00		 mov	 ecx, DWORD PTR [eax+esi+342040]
  00670	03 ca		 add	 ecx, edx
  00672	0f bf d1	 movsx	 edx, cx
  00675	89 55 dc	 mov	 DWORD PTR _y$[ebp], edx

; 158  : 		}

  00678	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0067f	eb 1e		 jmp	 SHORT $LN19@GetMapPos
$LN16@GetMapPos:
$LN21@GetMapPos:

; 159  : 		__except(w=1,h=1,1)

  00681	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _w$[ebp], 1
  00688	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _h$[ebp], 1
  0068f	b8 01 00 00 00	 mov	 eax, 1
$LN18@GetMapPos:
$LN20@GetMapPos:
  00694	c3		 ret	 0
$LN17@GetMapPos:
  00695	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 160  : 		{
; 161  : 		}

  00698	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN19@GetMapPos:

; 162  : 		attr = this->GetAttr(x, y);

  0069f	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  006a2	50		 push	 eax
  006a3	8b 4d e0	 mov	 ecx, DWORD PTR _x$[ebp]
  006a6	51		 push	 ecx
  006a7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  006aa	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  006af	88 45 d3	 mov	 BYTE PTR _attr$[ebp], al

; 163  : 
; 164  : 		if ( (attr & 4) != 4  && (attr & 8) != 8 )

  006b2	0f b6 45 d3	 movzx	 eax, BYTE PTR _attr$[ebp]
  006b6	83 e0 04	 and	 eax, 4
  006b9	75 1f		 jne	 SHORT $LN1@GetMapPos
  006bb	0f b6 45 d3	 movzx	 eax, BYTE PTR _attr$[ebp]
  006bf	83 e0 08	 and	 eax, 8
  006c2	75 16		 jne	 SHORT $LN1@GetMapPos

; 165  : 		{
; 166  : 			ox = x;

  006c4	8b 45 0c	 mov	 eax, DWORD PTR _ox$[ebp]
  006c7	66 8b 4d e0	 mov	 cx, WORD PTR _x$[ebp]
  006cb	66 89 08	 mov	 WORD PTR [eax], cx

; 167  : 			oy = y;

  006ce	8b 45 10	 mov	 eax, DWORD PTR _oy$[ebp]
  006d1	66 8b 4d dc	 mov	 cx, WORD PTR _y$[ebp]
  006d5	66 89 08	 mov	 WORD PTR [eax], cx

; 168  : 			return;

  006d8	eb 52		 jmp	 SHORT $LN15@GetMapPos
$LN1@GetMapPos:

; 169  : 		}
; 170  : 	}

  006da	e9 f2 fe ff ff	 jmp	 $LN4@GetMapPos
$LN3@GetMapPos:

; 171  : 				
; 172  : 	LogAdd( lMsg.Get( MSGGET(1, 204 )) , __FILE__, __LINE__);

  006df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetMapPos@MapClass@@QAEXFAAF0@Z@4JA
  006e4	83 c0 34	 add	 eax, 52			; 00000034H
  006e7	50		 push	 eax
  006e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  006ed	68 cc 01 00 00	 push	 460			; 000001ccH
  006f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  006f7	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  006fc	50		 push	 eax
  006fd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00703	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  : 	x = this->gRegenRect[levelpos].left;

  00706	8b 45 d8	 mov	 eax, DWORD PTR _levelpos$[ebp]
  00709	c1 e0 04	 shl	 eax, 4
  0070c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0070f	8b 94 01 14 38
	05 00		 mov	 edx, DWORD PTR [ecx+eax+342036]
  00716	89 55 e0	 mov	 DWORD PTR _x$[ebp], edx

; 174  : 	y = this->gRegenRect[levelpos].top;

  00719	8b 45 d8	 mov	 eax, DWORD PTR _levelpos$[ebp]
  0071c	c1 e0 04	 shl	 eax, 4
  0071f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00722	8b 94 01 18 38
	05 00		 mov	 edx, DWORD PTR [ecx+eax+342040]
  00729	89 55 dc	 mov	 DWORD PTR _y$[ebp], edx
$LN15@GetMapPos:

; 175  : }

  0072c	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0072f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00736	59		 pop	 ecx
  00737	5f		 pop	 edi
  00738	5e		 pop	 esi
  00739	5b		 pop	 ebx
  0073a	8b e5		 mov	 esp, ebp
  0073c	5d		 pop	 ebp
  0073d	c2 0c 00	 ret	 12			; 0000000cH
?GetMapPos@MapClass@@QAEXFAAF0@Z ENDP			; MapClass::GetMapPos
_TEXT	ENDS
PUBLIC	?AttrLoad@MapClass@@QAEHPAD@Z			; MapClass::AttrLoad
PUBLIC	?LoadMapAttr@MapClass@@QAEXPADH@Z		; MapClass::LoadMapAttr
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
_MapNumber$ = 12					; size = 4
?LoadMapAttr@MapClass@@QAEXPADH@Z PROC			; MapClass::LoadMapAttr
; _this$ = ecx

; 178  : {

  00740	55		 push	 ebp
  00741	8b ec		 mov	 ebp, esp
  00743	83 ec 44	 sub	 esp, 68			; 00000044H
  00746	53		 push	 ebx
  00747	56		 push	 esi
  00748	57		 push	 edi
  00749	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 179  : 	if (this->AttrLoad(filename) == FALSE )

  0074c	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0074f	50		 push	 eax
  00750	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00753	e8 00 00 00 00	 call	 ?AttrLoad@MapClass@@QAEHPAD@Z ; MapClass::AttrLoad
  00758	85 c0		 test	 eax, eax
  0075a	75 18		 jne	 SHORT $LN1@LoadMapAtt

; 180  : 	{
; 181  : 		MsgBox( lMsg.Get( MSGGET ( 2, 52 )));

  0075c	68 34 02 00 00	 push	 564			; 00000234H
  00761	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00766	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0076b	50		 push	 eax
  0076c	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00771	83 c4 04	 add	 esp, 4
$LN1@LoadMapAtt:

; 182  : 	}
; 183  : 
; 184  : 	this->thisMapNumber = MapNumber;

  00774	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00777	8b 4d 0c	 mov	 ecx, DWORD PTR _MapNumber$[ebp]
  0077a	89 88 b4 3d 05
	00		 mov	 DWORD PTR [eax+343476], ecx

; 185  : }

  00780	5f		 pop	 edi
  00781	5e		 pop	 esi
  00782	5b		 pop	 ebx
  00783	8b e5		 mov	 esp, ebp
  00785	5d		 pop	 ebp
  00786	c2 08 00	 ret	 8
?LoadMapAttr@MapClass@@QAEXPADH@Z ENDP			; MapClass::LoadMapAttr
_TEXT	ENDS
PUBLIC	?GetWeather@MapClass@@QAEEXZ			; MapClass::GetWeather
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_weather$ = -5						; size = 1
_this$ = -4						; size = 4
?GetWeather@MapClass@@QAEEXZ PROC			; MapClass::GetWeather
; _this$ = ecx

; 188  : {

  00790	55		 push	 ebp
  00791	8b ec		 mov	 ebp, esp
  00793	83 ec 48	 sub	 esp, 72			; 00000048H
  00796	53		 push	 ebx
  00797	56		 push	 esi
  00798	57		 push	 edi
  00799	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 189  : 	BYTE weather = this->m_Weather<<4;

  0079c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0079f	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  007a3	c1 e1 04	 shl	 ecx, 4
  007a6	88 4d fb	 mov	 BYTE PTR _weather$[ebp], cl

; 190  : 	weather |= this->m_WeatherVariation ;

  007a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007ac	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  007b0	0f b6 55 fb	 movzx	 edx, BYTE PTR _weather$[ebp]
  007b4	0b d1		 or	 edx, ecx
  007b6	88 55 fb	 mov	 BYTE PTR _weather$[ebp], dl

; 191  : 	return weather;

  007b9	8a 45 fb	 mov	 al, BYTE PTR _weather$[ebp]

; 192  : }

  007bc	5f		 pop	 edi
  007bd	5e		 pop	 esi
  007be	5b		 pop	 ebx
  007bf	8b e5		 mov	 esp, ebp
  007c1	5d		 pop	 ebp
  007c2	c3		 ret	 0
?GetWeather@MapClass@@QAEEXZ ENDP			; MapClass::GetWeather
_TEXT	ENDS
PUBLIC	?SetWeather@MapClass@@QAEXEE@Z			; MapClass::SetWeather
EXTRN	?CGWeatherSend@@YAXHE@Z:PROC			; CGWeatherSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$ = -16						; size = 4
_weather$ = -9						; size = 1
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_a_weather$ = 8						; size = 1
_a_variation$ = 12					; size = 1
?SetWeather@MapClass@@QAEXEE@Z PROC			; MapClass::SetWeather
; _this$ = ecx

; 195  : {

  007d0	55		 push	 ebp
  007d1	8b ec		 mov	 ebp, esp
  007d3	83 ec 50	 sub	 esp, 80			; 00000050H
  007d6	53		 push	 ebx
  007d7	56		 push	 esi
  007d8	57		 push	 edi
  007d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 196  : 	LPOBJ lpObj;
; 197  : 	BYTE weather;
; 198  : 	int n;
; 199  : 
; 200  : 	this->m_Weather = a_weather;

  007dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007df	8a 4d 08	 mov	 cl, BYTE PTR _a_weather$[ebp]
  007e2	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 201  : 	this->m_WeatherVariation = a_variation;

  007e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007e8	8a 4d 0c	 mov	 cl, BYTE PTR _a_variation$[ebp]
  007eb	88 48 05	 mov	 BYTE PTR [eax+5], cl

; 202  : 	weather = this->m_Weather<<4;

  007ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007f1	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  007f5	c1 e1 04	 shl	 ecx, 4
  007f8	88 4d f7	 mov	 BYTE PTR _weather$[ebp], cl

; 203  : 	weather |= this->m_WeatherVariation;

  007fb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007fe	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00802	0f b6 55 f7	 movzx	 edx, BYTE PTR _weather$[ebp]
  00806	0b d1		 or	 edx, ecx
  00808	88 55 f7	 mov	 BYTE PTR _weather$[ebp], dl

; 204  : 	
; 205  : 	for ( n=OBJ_STARTUSERINDEX ; n<OBJMAX ; n++ )

  0080b	c7 45 f0 b0 36
	00 00		 mov	 DWORD PTR _n$[ebp], 14000 ; 000036b0H
  00812	eb 09		 jmp	 SHORT $LN4@SetWeather
$LN3@SetWeather:
  00814	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00817	83 c0 01	 add	 eax, 1
  0081a	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax
$LN4@SetWeather:
  0081d	81 7d f0 98 3a
	00 00		 cmp	 DWORD PTR _n$[ebp], 15000 ; 00003a98H
  00824	7d 4e		 jge	 SHORT $LN5@SetWeather

; 206  : 	{
; 207  : 		lpObj = &gObj[n];

  00826	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00829	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0082f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00835	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 208  : 
; 209  : 		if ( lpObj->Connected > PLAYER_CONNECTED && lpObj->Live != 0 && lpObj->MapNumber == this->thisMapNumber )

  00838	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0083b	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0083f	7e 31		 jle	 SHORT $LN1@SetWeather
  00841	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00844	0f b6 48 6a	 movzx	 ecx, BYTE PTR [eax+106]
  00848	85 c9		 test	 ecx, ecx
  0084a	74 26		 je	 SHORT $LN1@SetWeather
  0084c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0084f	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00856	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00859	3b 8a b4 3d 05
	00		 cmp	 ecx, DWORD PTR [edx+343476]
  0085f	75 11		 jne	 SHORT $LN1@SetWeather

; 210  : 		{
; 211  : 			CGWeatherSend(n, weather);

  00861	0f b6 45 f7	 movzx	 eax, BYTE PTR _weather$[ebp]
  00865	50		 push	 eax
  00866	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  00869	51		 push	 ecx
  0086a	e8 00 00 00 00	 call	 ?CGWeatherSend@@YAXHE@Z	; CGWeatherSend
  0086f	83 c4 08	 add	 esp, 8
$LN1@SetWeather:

; 212  : 		}
; 213  : 	}

  00872	eb a0		 jmp	 SHORT $LN3@SetWeather
$LN5@SetWeather:

; 214  : }

  00874	5f		 pop	 edi
  00875	5e		 pop	 esi
  00876	5b		 pop	 ebx
  00877	8b e5		 mov	 esp, ebp
  00879	5d		 pop	 ebp
  0087a	c2 08 00	 ret	 8
?SetWeather@MapClass@@QAEXEE@Z ENDP			; MapClass::SetWeather
_TEXT	ENDS
PUBLIC	?WeatherVariationProcess@MapClass@@QAEXXZ	; MapClass::WeatherVariationProcess
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$229868 = -16						; size = 4
_weather$ = -9						; size = 1
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
?WeatherVariationProcess@MapClass@@QAEXXZ PROC		; MapClass::WeatherVariationProcess
; _this$ = ecx

; 217  : {

  00880	55		 push	 ebp
  00881	8b ec		 mov	 ebp, esp
  00883	83 ec 50	 sub	 esp, 80			; 00000050H
  00886	53		 push	 ebx
  00887	56		 push	 esi
  00888	57		 push	 edi
  00889	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 	LPOBJ lpObj;
; 219  : 	BYTE weather;
; 220  : 
; 221  : 	if ( (GetTickCount() - this->m_WeatherTimer) > this->m_NextWeatherTimer)

  0088c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00892	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00895	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  00898	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0089b	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  0089e	0f 86 d1 00 00
	00		 jbe	 $LN6@WeatherVar

; 222  : 	{
; 223  : 		this->m_WeatherTimer = GetTickCount();

  008a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  008aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008ad	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 224  : 		this->m_NextWeatherTimer = (rand()%10000) + 10000;

  008b0	e8 00 00 00 00	 call	 _rand
  008b5	99		 cdq
  008b6	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  008bb	f7 f9		 idiv	 ecx
  008bd	81 c2 10 27 00
	00		 add	 edx, 10000		; 00002710H
  008c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008c6	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 225  : 		this->m_WeatherVariation = rand()%10;

  008c9	e8 00 00 00 00	 call	 _rand
  008ce	99		 cdq
  008cf	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  008d4	f7 f9		 idiv	 ecx
  008d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008d9	88 50 05	 mov	 BYTE PTR [eax+5], dl

; 226  : 		this->m_Weather = rand()%3;

  008dc	e8 00 00 00 00	 call	 _rand
  008e1	99		 cdq
  008e2	b9 03 00 00 00	 mov	 ecx, 3
  008e7	f7 f9		 idiv	 ecx
  008e9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008ec	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 227  : 
; 228  : 		weather = this->m_Weather<<4;

  008ef	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008f2	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  008f6	c1 e1 04	 shl	 ecx, 4
  008f9	88 4d f7	 mov	 BYTE PTR _weather$[ebp], cl

; 229  : 		weather |= this->m_WeatherVariation;

  008fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008ff	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00903	0f b6 55 f7	 movzx	 edx, BYTE PTR _weather$[ebp]
  00907	0b d1		 or	 edx, ecx
  00909	88 55 f7	 mov	 BYTE PTR _weather$[ebp], dl

; 230  : 
; 231  : 		for (int n=OBJ_STARTUSERINDEX ; n<OBJMAX ; n++ )

  0090c	c7 45 f0 b0 36
	00 00		 mov	 DWORD PTR _n$229868[ebp], 14000 ; 000036b0H
  00913	eb 09		 jmp	 SHORT $LN4@WeatherVar
$LN3@WeatherVar:
  00915	8b 45 f0	 mov	 eax, DWORD PTR _n$229868[ebp]
  00918	83 c0 01	 add	 eax, 1
  0091b	89 45 f0	 mov	 DWORD PTR _n$229868[ebp], eax
$LN4@WeatherVar:
  0091e	81 7d f0 98 3a
	00 00		 cmp	 DWORD PTR _n$229868[ebp], 15000 ; 00003a98H
  00925	7d 4e		 jge	 SHORT $LN6@WeatherVar

; 232  : 		{
; 233  : 			lpObj = &gObj[n];

  00927	8b 45 f0	 mov	 eax, DWORD PTR _n$229868[ebp]
  0092a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00930	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00936	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 234  : 
; 235  : 			if ( lpObj->Connected > PLAYER_CONNECTED && lpObj->Live != 0 && lpObj->MapNumber == this->thisMapNumber )

  00939	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0093c	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00940	7e 31		 jle	 SHORT $LN1@WeatherVar
  00942	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00945	0f b6 48 6a	 movzx	 ecx, BYTE PTR [eax+106]
  00949	85 c9		 test	 ecx, ecx
  0094b	74 26		 je	 SHORT $LN1@WeatherVar
  0094d	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00950	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00957	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0095a	3b 8a b4 3d 05
	00		 cmp	 ecx, DWORD PTR [edx+343476]
  00960	75 11		 jne	 SHORT $LN1@WeatherVar

; 236  : 			{
; 237  : 				CGWeatherSend(n, weather);

  00962	0f b6 45 f7	 movzx	 eax, BYTE PTR _weather$[ebp]
  00966	50		 push	 eax
  00967	8b 4d f0	 mov	 ecx, DWORD PTR _n$229868[ebp]
  0096a	51		 push	 ecx
  0096b	e8 00 00 00 00	 call	 ?CGWeatherSend@@YAXHE@Z	; CGWeatherSend
  00970	83 c4 08	 add	 esp, 8
$LN1@WeatherVar:

; 238  : 			}
; 239  : 		}

  00973	eb a0		 jmp	 SHORT $LN3@WeatherVar
$LN6@WeatherVar:

; 240  : 	}
; 241  : }

  00975	5f		 pop	 edi
  00976	5e		 pop	 esi
  00977	5b		 pop	 ebx
  00978	8b e5		 mov	 esp, ebp
  0097a	5d		 pop	 ebp
  0097b	c3		 ret	 0
?WeatherVariationProcess@MapClass@@QAEXXZ ENDP		; MapClass::WeatherVariationProcess
_TEXT	ENDS
PUBLIC	?SaveItemInfo@MapClass@@QAEXXZ			; MapClass::SaveItemInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveItemInfo@MapClass@@QAEXXZ PROC			; MapClass::SaveItemInfo
; _this$ = ecx

; 244  : {

  00980	55		 push	 ebp
  00981	8b ec		 mov	 ebp, esp
  00983	83 ec 44	 sub	 esp, 68			; 00000044H
  00986	53		 push	 ebx
  00987	56		 push	 esi
  00988	57		 push	 edi
  00989	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 245  : 
; 246  : }

  0098c	5f		 pop	 edi
  0098d	5e		 pop	 esi
  0098e	5b		 pop	 ebx
  0098f	8b e5		 mov	 esp, ebp
  00991	5d		 pop	 ebp
  00992	c3		 ret	 0
?SaveItemInfo@MapClass@@QAEXXZ ENDP			; MapClass::SaveItemInfo
_TEXT	ENDS
PUBLIC	?ItemInit@MapClass@@QAEXXZ			; MapClass::ItemInit
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ItemInit@MapClass@@QAEXXZ PROC				; MapClass::ItemInit
; _this$ = ecx

; 249  : {

  009a0	55		 push	 ebp
  009a1	8b ec		 mov	 ebp, esp
  009a3	83 ec 44	 sub	 esp, 68			; 00000044H
  009a6	53		 push	 ebx
  009a7	56		 push	 esi
  009a8	57		 push	 edi
  009a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 250  : 
; 251  : }

  009ac	5f		 pop	 edi
  009ad	5e		 pop	 esi
  009ae	5b		 pop	 ebx
  009af	8b e5		 mov	 esp, ebp
  009b1	5d		 pop	 ebp
  009b2	c3		 ret	 0
?ItemInit@MapClass@@QAEXXZ ENDP				; MapClass::ItemInit
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKEQAEE@Z@4JA ; `MapClass::MonsterItemDrop'::`2'::__LINE__Var
PUBLIC	?MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKEQAEE@Z ; MapClass::MonsterItemDrop
EXTRN	?CreateItem@CMapItem@@QAEXHHHHMEEEEEKEQAEE@Z:PROC ; CMapItem::CreateItem
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	__fltused:DWORD
;	COMDAT ?__LINE__Var@?1??MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKEQAEE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKEQAEE@Z@4JA DD 0feH ; `MapClass::MonsterItemDrop'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_attr$ = -13						; size = 1
_counttot$ = -12					; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
_type$ = 8						; size = 4
_level$ = 12						; size = 4
_dur$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_Option1$ = 28						; size = 1
_Option2$ = 32						; size = 1
_Option3$ = 36						; size = 1
_NOption$ = 40						; size = 1
_SOption$ = 44						; size = 1
_aIndex$ = 48						; size = 4
_number$ = 52						; size = 4
_ItemEffectEx$ = 56					; size = 1
_SocketOption$ = 60					; size = 4
_SocketIndex$ = 64					; size = 1
?MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKEQAEE@Z PROC	; MapClass::MonsterItemDrop
; _this$ = ecx

; 254  : {

  009c0	55		 push	 ebp
  009c1	8b ec		 mov	 ebp, esp
  009c3	83 ec 50	 sub	 esp, 80			; 00000050H
  009c6	53		 push	 ebx
  009c7	56		 push	 esi
  009c8	57		 push	 edi
  009c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 255  : 	int count;
; 256  : 	int counttot=0;

  009cc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _counttot$[ebp], 0

; 257  : 	BYTE attr = this->GetAttr(x, y);

  009d3	8b 45 18	 mov	 eax, DWORD PTR _y$[ebp]
  009d6	50		 push	 eax
  009d7	8b 4d 14	 mov	 ecx, DWORD PTR _x$[ebp]
  009da	51		 push	 ecx
  009db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009de	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  009e3	88 45 f3	 mov	 BYTE PTR _attr$[ebp], al

; 258  : 
; 259  : 	if ( (attr & 4) == 4  || (attr & 8) == 8 )

  009e6	0f b6 45 f3	 movzx	 eax, BYTE PTR _attr$[ebp]
  009ea	83 e0 04	 and	 eax, 4
  009ed	75 09		 jne	 SHORT $LN7@MonsterIte
  009ef	0f b6 45 f3	 movzx	 eax, BYTE PTR _attr$[ebp]
  009f3	83 e0 08	 and	 eax, 8
  009f6	74 08		 je	 SHORT $LN8@MonsterIte
$LN7@MonsterIte:

; 260  : 	{
; 261  : 		return -1;

  009f8	83 c8 ff	 or	 eax, -1
  009fb	e9 35 01 00 00	 jmp	 $LN9@MonsterIte
$LN8@MonsterIte:

; 262  : 	}
; 263  : 	count = this->m_ItemCount;

  00a00	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a03	8b 88 10 38 05
	00		 mov	 ecx, DWORD PTR [eax+342032]
  00a09	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$LN6@MonsterIte:

; 264  : 
; 265  : 	while ( true )

  00a0c	b8 01 00 00 00	 mov	 eax, 1
  00a11	85 c0		 test	 eax, eax
  00a13	0f 84 f2 00 00
	00		 je	 $LN5@MonsterIte

; 266  : 	{
; 267  : 		if ( this->m_cItem[count].IsItem() == FALSE )

  00a19	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00a1c	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00a22	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a25	8d 4c 01 24	 lea	 ecx, DWORD PTR [ecx+eax+36]
  00a29	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00a2e	85 c0		 test	 eax, eax
  00a30	0f 85 a3 00 00
	00		 jne	 $LN4@MonsterIte

; 268  : 		{
; 269  : 			this->m_cItem[count].CreateItem(type, level, x, y, dur, Option1, Option2, Option3, NOption, SOption, number, ItemEffectEx,SocketOption,SocketIndex);

  00a36	0f b6 45 40	 movzx	 eax, BYTE PTR _SocketIndex$[ebp]
  00a3a	50		 push	 eax
  00a3b	8b 4d 3c	 mov	 ecx, DWORD PTR _SocketOption$[ebp]
  00a3e	51		 push	 ecx
  00a3f	0f b6 55 38	 movzx	 edx, BYTE PTR _ItemEffectEx$[ebp]
  00a43	52		 push	 edx
  00a44	8b 45 34	 mov	 eax, DWORD PTR _number$[ebp]
  00a47	50		 push	 eax
  00a48	0f b6 4d 2c	 movzx	 ecx, BYTE PTR _SOption$[ebp]
  00a4c	51		 push	 ecx
  00a4d	0f b6 55 28	 movzx	 edx, BYTE PTR _NOption$[ebp]
  00a51	52		 push	 edx
  00a52	0f b6 45 24	 movzx	 eax, BYTE PTR _Option3$[ebp]
  00a56	50		 push	 eax
  00a57	0f b6 4d 20	 movzx	 ecx, BYTE PTR _Option2$[ebp]
  00a5b	51		 push	 ecx
  00a5c	0f b6 55 1c	 movzx	 edx, BYTE PTR _Option1$[ebp]
  00a60	52		 push	 edx
  00a61	51		 push	 ecx
  00a62	d9 45 10	 fld	 DWORD PTR _dur$[ebp]
  00a65	d9 1c 24	 fstp	 DWORD PTR [esp]
  00a68	8b 45 18	 mov	 eax, DWORD PTR _y$[ebp]
  00a6b	50		 push	 eax
  00a6c	8b 4d 14	 mov	 ecx, DWORD PTR _x$[ebp]
  00a6f	51		 push	 ecx
  00a70	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00a73	52		 push	 edx
  00a74	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00a77	50		 push	 eax
  00a78	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00a7b	69 c9 74 04 00
	00		 imul	 ecx, 1140		; 00000474H
  00a81	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a84	8d 4c 0a 20	 lea	 ecx, DWORD PTR [edx+ecx+32]
  00a88	e8 00 00 00 00	 call	 ?CreateItem@CMapItem@@QAEXHHHHMEEEEEKEQAEE@Z ; CMapItem::CreateItem

; 270  : 			this->m_cItem[count].m_UserIndex = aIndex;

  00a8d	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00a90	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00a96	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a99	8b 55 30	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00a9c	89 94 01 04 01
	00 00		 mov	 DWORD PTR [ecx+eax+260], edx

; 271  : 			this->m_ItemCount++;

  00aa3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00aa6	8b 88 10 38 05
	00		 mov	 ecx, DWORD PTR [eax+342032]
  00aac	83 c1 01	 add	 ecx, 1
  00aaf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ab2	89 8a 10 38 05
	00		 mov	 DWORD PTR [edx+342032], ecx

; 272  : 
; 273  : 			if ( this->m_ItemCount > MAX_MAPITEM-1 )

  00ab8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00abb	81 b8 10 38 05
	00 2b 01 00 00	 cmp	 DWORD PTR [eax+342032], 299 ; 0000012bH
  00ac5	7e 0d		 jle	 SHORT $LN3@MonsterIte

; 274  : 			{
; 275  : 				this->m_ItemCount = 0;

  00ac7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00aca	c7 80 10 38 05
	00 00 00 00 00	 mov	 DWORD PTR [eax+342032], 0
$LN3@MonsterIte:

; 276  : 			}
; 277  : 
; 278  : 			return count;

  00ad4	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00ad7	eb 5c		 jmp	 SHORT $LN9@MonsterIte
$LN4@MonsterIte:

; 279  : 
; 280  : 		}
; 281  : 
; 282  : 		count++;

  00ad9	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00adc	83 c0 01	 add	 eax, 1
  00adf	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax

; 283  : 
; 284  : 		if ( count > MAX_MAPITEM-1 )

  00ae2	81 7d f8 2b 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 299 ; 0000012bH
  00ae9	7e 07		 jle	 SHORT $LN2@MonsterIte

; 285  : 		{
; 286  : 			count = 0;

  00aeb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@MonsterIte:

; 287  : 		}
; 288  : 
; 289  : 		counttot++;

  00af2	8b 45 f4	 mov	 eax, DWORD PTR _counttot$[ebp]
  00af5	83 c0 01	 add	 eax, 1
  00af8	89 45 f4	 mov	 DWORD PTR _counttot$[ebp], eax

; 290  : 
; 291  : 		if ( counttot > MAX_MAPITEM-1 )

  00afb	81 7d f4 2b 01
	00 00		 cmp	 DWORD PTR _counttot$[ebp], 299 ; 0000012bH
  00b02	7e 02		 jle	 SHORT $LN1@MonsterIte

; 292  : 		{
; 293  : 			break;

  00b04	eb 05		 jmp	 SHORT $LN5@MonsterIte
$LN1@MonsterIte:

; 294  : 		}
; 295  : 	}

  00b06	e9 01 ff ff ff	 jmp	 $LN6@MonsterIte
$LN5@MonsterIte:

; 296  : 
; 297  : 	LogAdd(lMsg.Get(MSGGET(1, 205)), __FILE__, __LINE__ );

  00b0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKEQAEE@Z@4JA
  00b10	83 c0 2b	 add	 eax, 43			; 0000002bH
  00b13	50		 push	 eax
  00b14	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  00b19	68 cd 01 00 00	 push	 461			; 000001cdH
  00b1e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00b23	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00b28	50		 push	 eax
  00b29	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00b2f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 298  : 
; 299  : 	return -1;

  00b32	83 c8 ff	 or	 eax, -1
$LN9@MonsterIte:

; 300  : }

  00b35	5f		 pop	 edi
  00b36	5e		 pop	 esi
  00b37	5b		 pop	 ebx
  00b38	8b e5		 mov	 esp, ebp
  00b3a	5d		 pop	 ebp
  00b3b	c2 3c 00	 ret	 60			; 0000003cH
?MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKEQAEE@Z ENDP	; MapClass::MonsterItemDrop
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHEQAEE@Z@4JA ; `MapClass::ItemDrop'::`2'::__LINE__Var
PUBLIC	??_C@_0EL@BKCBEOOI@?$FLBlood?5Castle?$FN?5?$CI?$CFd?$CJ?5?$CIAccount?3?$CFs?0@ ; `string'
PUBLIC	?ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHEQAEE@Z	; MapClass::ItemDrop
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?GetBridgeIndex@CBloodCastle@@QAEHH@Z:PROC	; CBloodCastle::GetBridgeIndex
EXTRN	?g_BloodCastle@@3VCBloodCastle@@A:BYTE		; g_BloodCastle
EXTRN	?DropCreateItem@CMapItem@@QAEXHHHHMEEEEEKHHEQAEE@Z:PROC ; CMapItem::DropCreateItem
;	COMDAT ?__LINE__Var@?1??ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHEQAEE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHEQAEE@Z@4JA DD 012fH ; `MapClass::ItemDrop'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EL@BKCBEOOI@?$FLBlood?5Castle?$FN?5?$CI?$CFd?$CJ?5?$CIAccount?3?$CFs?0@
CONST	SEGMENT
??_C@_0EL@BKCBEOOI@?$FLBlood?5Castle?$FN?5?$CI?$CFd?$CJ?5?$CIAccount?3?$CFs?0@ DB '['
	DB	'Blood Castle] (%d) (Account:%s, Name:%s) Dropped Angel King'''
	DB	's Weapon (%d)', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv156 = -92						; size = 4
tv163 = -88						; size = 4
tv157 = -88						; size = 4
_iBridgeIndex$229943 = -20				; size = 4
_attr$ = -13						; size = 1
_counttot$ = -12					; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
_type$ = 8						; size = 4
_level$ = 12						; size = 4
_dur$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_Option1$ = 28						; size = 1
_Option2$ = 32						; size = 1
_Option3$ = 36						; size = 1
_NOption$ = 40						; size = 1
_SOption$ = 44						; size = 1
_number$ = 48						; size = 4
_aIndex$ = 52						; size = 4
_PetLevel$ = 56						; size = 4
_PetExp$ = 60						; size = 4
_ItemEffectEx$ = 64					; size = 1
_SocketOption$ = 68					; size = 4
_SocketIndex$ = 72					; size = 1
?ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHEQAEE@Z PROC	; MapClass::ItemDrop
; _this$ = ecx

; 303  : {

  00b40	55		 push	 ebp
  00b41	8b ec		 mov	 ebp, esp
  00b43	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00b46	53		 push	 ebx
  00b47	56		 push	 esi
  00b48	57		 push	 edi
  00b49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 304  : 	int count;
; 305  : 	int counttot = 0;

  00b4c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _counttot$[ebp], 0

; 306  : 	BYTE attr = this->GetAttr(x, y);

  00b53	8b 45 18	 mov	 eax, DWORD PTR _y$[ebp]
  00b56	50		 push	 eax
  00b57	8b 4d 14	 mov	 ecx, DWORD PTR _x$[ebp]
  00b5a	51		 push	 ecx
  00b5b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b5e	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00b63	88 45 f3	 mov	 BYTE PTR _attr$[ebp], al

; 307  : 
; 308  : 	if ( (attr&4) == 4 || (attr&8) == 8 )

  00b66	0f b6 45 f3	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b6a	83 e0 04	 and	 eax, 4
  00b6d	75 09		 jne	 SHORT $LN13@ItemDrop
  00b6f	0f b6 45 f3	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b73	83 e0 08	 and	 eax, 8
  00b76	74 07		 je	 SHORT $LN14@ItemDrop
$LN13@ItemDrop:

; 309  : 	{
; 310  : 		return FALSE;

  00b78	33 c0		 xor	 eax, eax
  00b7a	e9 a2 02 00 00	 jmp	 $LN15@ItemDrop
$LN14@ItemDrop:

; 311  : 	}
; 312  : 
; 313  : 	count = this->m_ItemCount;

  00b7f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b82	8b 88 10 38 05
	00		 mov	 ecx, DWORD PTR [eax+342032]
  00b88	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$LN12@ItemDrop:

; 314  : 
; 315  : 	while ( true )

  00b8b	b8 01 00 00 00	 mov	 eax, 1
  00b90	85 c0		 test	 eax, eax
  00b92	0f 84 60 02 00
	00		 je	 $LN11@ItemDrop

; 316  : 	{
; 317  : 		if ( this->m_cItem[count].IsItem() == FALSE )

  00b98	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00b9b	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00ba1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ba4	8d 4c 01 24	 lea	 ecx, DWORD PTR [ecx+eax+36]
  00ba8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00bad	85 c0		 test	 eax, eax
  00baf	0f 85 0f 02 00
	00		 jne	 $LN10@ItemDrop

; 318  : 		{
; 319  : 			this->m_cItem[count].DropCreateItem(type, level, x, y, dur, Option1, Option2, Option3, NOption, SOption, number, PetLevel, PetExp, ItemEffectEx, SocketOption, SocketIndex);

  00bb5	0f b6 45 48	 movzx	 eax, BYTE PTR _SocketIndex$[ebp]
  00bb9	50		 push	 eax
  00bba	8b 4d 44	 mov	 ecx, DWORD PTR _SocketOption$[ebp]
  00bbd	51		 push	 ecx
  00bbe	0f b6 55 40	 movzx	 edx, BYTE PTR _ItemEffectEx$[ebp]
  00bc2	52		 push	 edx
  00bc3	8b 45 3c	 mov	 eax, DWORD PTR _PetExp$[ebp]
  00bc6	50		 push	 eax
  00bc7	8b 4d 38	 mov	 ecx, DWORD PTR _PetLevel$[ebp]
  00bca	51		 push	 ecx
  00bcb	8b 55 30	 mov	 edx, DWORD PTR _number$[ebp]
  00bce	52		 push	 edx
  00bcf	0f b6 45 2c	 movzx	 eax, BYTE PTR _SOption$[ebp]
  00bd3	50		 push	 eax
  00bd4	0f b6 4d 28	 movzx	 ecx, BYTE PTR _NOption$[ebp]
  00bd8	51		 push	 ecx
  00bd9	0f b6 55 24	 movzx	 edx, BYTE PTR _Option3$[ebp]
  00bdd	52		 push	 edx
  00bde	0f b6 45 20	 movzx	 eax, BYTE PTR _Option2$[ebp]
  00be2	50		 push	 eax
  00be3	0f b6 4d 1c	 movzx	 ecx, BYTE PTR _Option1$[ebp]
  00be7	51		 push	 ecx
  00be8	51		 push	 ecx
  00be9	d9 45 10	 fld	 DWORD PTR _dur$[ebp]
  00bec	d9 1c 24	 fstp	 DWORD PTR [esp]
  00bef	8b 55 18	 mov	 edx, DWORD PTR _y$[ebp]
  00bf2	52		 push	 edx
  00bf3	8b 45 14	 mov	 eax, DWORD PTR _x$[ebp]
  00bf6	50		 push	 eax
  00bf7	8b 4d 0c	 mov	 ecx, DWORD PTR _level$[ebp]
  00bfa	51		 push	 ecx
  00bfb	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  00bfe	52		 push	 edx
  00bff	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00c02	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00c08	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c0b	8d 4c 01 20	 lea	 ecx, DWORD PTR [ecx+eax+32]
  00c0f	e8 00 00 00 00	 call	 ?DropCreateItem@CMapItem@@QAEXHHHHMEEEEEKHHEQAEE@Z ; CMapItem::DropCreateItem

; 320  : 			this->m_cItem[count].m_UserIndex = aIndex;

  00c14	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00c17	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00c1d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c20	8b 55 34	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00c23	89 94 01 04 01
	00 00		 mov	 DWORD PTR [ecx+eax+260], edx

; 321  : 			this->m_ItemCount++;

  00c2a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c2d	8b 88 10 38 05
	00		 mov	 ecx, DWORD PTR [eax+342032]
  00c33	83 c1 01	 add	 ecx, 1
  00c36	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00c39	89 8a 10 38 05
	00		 mov	 DWORD PTR [edx+342032], ecx

; 322  : 
; 323  : 			if ( this->m_ItemCount > MAX_MAPITEM-1 )

  00c3f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c42	81 b8 10 38 05
	00 2b 01 00 00	 cmp	 DWORD PTR [eax+342032], 299 ; 0000012bH
  00c4c	7e 0d		 jle	 SHORT $LN9@ItemDrop

; 324  : 			{
; 325  : 				this->m_ItemCount = 0;

  00c4e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c51	c7 80 10 38 05
	00 00 00 00 00	 mov	 DWORD PTR [eax+342032], 0
$LN9@ItemDrop:

; 326  : 			}
; 327  : 
; 328  : 			if ( BC_MAP_RANGE(this->thisMapNumber) != FALSE )

  00c5b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c5e	83 b8 b4 3d 05
	00 34		 cmp	 DWORD PTR [eax+343476], 52 ; 00000034H
  00c65	75 09		 jne	 SHORT $LN19@ItemDrop
  00c67	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv157[ebp], 1
  00c6e	eb 2d		 jmp	 SHORT $LN20@ItemDrop
$LN19@ItemDrop:
  00c70	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c73	83 b9 b4 3d 05
	00 0b		 cmp	 DWORD PTR [ecx+343476], 11 ; 0000000bH
  00c7a	7d 09		 jge	 SHORT $LN17@ItemDrop
  00c7c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv156[ebp], 0
  00c83	eb 12		 jmp	 SHORT $LN18@ItemDrop
$LN17@ItemDrop:
  00c85	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00c88	33 c0		 xor	 eax, eax
  00c8a	83 ba b4 3d 05
	00 11		 cmp	 DWORD PTR [edx+343476], 17 ; 00000011H
  00c91	0f 9e c0	 setle	 al
  00c94	89 45 a4	 mov	 DWORD PTR tv156[ebp], eax
$LN18@ItemDrop:
  00c97	8b 4d a4	 mov	 ecx, DWORD PTR tv156[ebp]
  00c9a	89 4d a8	 mov	 DWORD PTR tv157[ebp], ecx
$LN20@ItemDrop:
  00c9d	83 7d a8 00	 cmp	 DWORD PTR tv157[ebp], 0
  00ca1	0f 84 16 01 00
	00		 je	 $LN3@ItemDrop

; 329  : 			{
; 330  : 				if ( type == ITEMGET(13,19) )

  00ca7	81 7d 08 13 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6675 ; 00001a13H
  00cae	0f 85 09 01 00
	00		 jne	 $LN3@ItemDrop

; 331  : 				{
; 332  : 					if ( ((level<0)?FALSE:(level>2)?FALSE:TRUE) != FALSE ) //checklimit type not same :)

  00cb4	83 7d 0c 00	 cmp	 DWORD PTR _level$[ebp], 0
  00cb8	7d 09		 jge	 SHORT $LN21@ItemDrop
  00cba	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv163[ebp], 0
  00cc1	eb 0c		 jmp	 SHORT $LN22@ItemDrop
$LN21@ItemDrop:
  00cc3	33 c0		 xor	 eax, eax
  00cc5	83 7d 0c 02	 cmp	 DWORD PTR _level$[ebp], 2
  00cc9	0f 9e c0	 setle	 al
  00ccc	89 45 a8	 mov	 DWORD PTR tv163[ebp], eax
$LN22@ItemDrop:
  00ccf	83 7d a8 00	 cmp	 DWORD PTR tv163[ebp], 0
  00cd3	0f 84 e4 00 00
	00		 je	 $LN3@ItemDrop

; 333  : 					{
; 334  : 						int iBridgeIndex = g_BloodCastle.GetBridgeIndex(this->thisMapNumber);

  00cd9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00cdc	8b 88 b4 3d 05
	00		 mov	 ecx, DWORD PTR [eax+343476]
  00ce2	51		 push	 ecx
  00ce3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  00ce8	e8 00 00 00 00	 call	 ?GetBridgeIndex@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetBridgeIndex
  00ced	89 45 ec	 mov	 DWORD PTR _iBridgeIndex$229943[ebp], eax

; 335  : 
; 336  : 						if ( g_BloodCastle.m_BridgeData[iBridgeIndex].m_nBC_QUESTITEM_SERIAL != -1 )

  00cf0	8b 45 ec	 mov	 eax, DWORD PTR _iBridgeIndex$229943[ebp]
  00cf3	69 c0 60 04 00
	00		 imul	 eax, 1120		; 00000460H
  00cf9	83 b8 e8 03 00
	00 ff		 cmp	 DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[eax+1000], -1
  00d00	0f 84 b7 00 00
	00		 je	 $LN3@ItemDrop

; 337  : 						{
; 338  : 							if ( number == g_BloodCastle.m_BridgeData[iBridgeIndex].m_nBC_QUESTITEM_SERIAL )

  00d06	8b 45 ec	 mov	 eax, DWORD PTR _iBridgeIndex$229943[ebp]
  00d09	69 c0 60 04 00
	00		 imul	 eax, 1120		; 00000460H
  00d0f	8b 4d 30	 mov	 ecx, DWORD PTR _number$[ebp]
  00d12	3b 88 e8 03 00
	00		 cmp	 ecx, DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[eax+1000]
  00d18	0f 85 9f 00 00
	00		 jne	 $LN3@ItemDrop

; 339  : 							{
; 340  : 								if ( g_BloodCastle.m_BridgeData[iBridgeIndex].m_iBC_QUEST_ITEM_USER_INDEX != -1 )

  00d1e	8b 45 ec	 mov	 eax, DWORD PTR _iBridgeIndex$229943[ebp]
  00d21	69 c0 60 04 00
	00		 imul	 eax, 1120		; 00000460H
  00d27	83 b8 ec 03 00
	00 ff		 cmp	 DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[eax+1004], -1
  00d2e	0f 84 89 00 00
	00		 je	 $LN3@ItemDrop

; 341  : 								{
; 342  : 									LogAddTD("[Blood Castle] (%d) (Account:%s, Name:%s) Dropped Angel King's Weapon (%d)", 
; 343  : 										iBridgeIndex+1, 
; 344  : 										gObj[g_BloodCastle.m_BridgeData[iBridgeIndex].m_iBC_QUEST_ITEM_USER_INDEX ].AccountID, 
; 345  : 										gObj[g_BloodCastle.m_BridgeData[iBridgeIndex].m_iBC_QUEST_ITEM_USER_INDEX].Name, 
; 346  : 										g_BloodCastle.m_BridgeData[iBridgeIndex].m_btBC_QUEST_ITEM_NUMBER);

  00d34	8b 45 ec	 mov	 eax, DWORD PTR _iBridgeIndex$229943[ebp]
  00d37	69 c0 60 04 00
	00		 imul	 eax, 1120		; 00000460H
  00d3d	0f b6 88 f0 03
	00 00		 movzx	 ecx, BYTE PTR ?g_BloodCastle@@3VCBloodCastle@@A[eax+1008]
  00d44	51		 push	 ecx
  00d45	8b 55 ec	 mov	 edx, DWORD PTR _iBridgeIndex$229943[ebp]
  00d48	69 d2 60 04 00
	00		 imul	 edx, 1120		; 00000460H
  00d4e	8b 82 ec 03 00
	00		 mov	 eax, DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[edx+1004]
  00d54	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00d5a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00d60	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  00d64	52		 push	 edx
  00d65	8b 45 ec	 mov	 eax, DWORD PTR _iBridgeIndex$229943[ebp]
  00d68	69 c0 60 04 00
	00		 imul	 eax, 1120		; 00000460H
  00d6e	8b 88 ec 03 00
	00		 mov	 ecx, DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[eax+1004]
  00d74	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00d7a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00d80	8d 44 0a 6c	 lea	 eax, DWORD PTR [edx+ecx+108]
  00d84	50		 push	 eax
  00d85	8b 4d ec	 mov	 ecx, DWORD PTR _iBridgeIndex$229943[ebp]
  00d88	83 c1 01	 add	 ecx, 1
  00d8b	51		 push	 ecx
  00d8c	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@BKCBEOOI@?$FLBlood?5Castle?$FN?5?$CI?$CFd?$CJ?5?$CIAccount?3?$CFs?0@
  00d91	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00d97	83 c4 14	 add	 esp, 20			; 00000014H

; 347  : 
; 348  : 									g_BloodCastle.m_BridgeData[iBridgeIndex].m_iBC_QUEST_ITEM_USER_INDEX = -1;

  00d9a	8b 45 ec	 mov	 eax, DWORD PTR _iBridgeIndex$229943[ebp]
  00d9d	69 c0 60 04 00
	00		 imul	 eax, 1120		; 00000460H
  00da3	c7 80 ec 03 00
	00 ff ff ff ff	 mov	 DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[eax+1004], -1

; 349  : 									g_BloodCastle.m_BridgeData[iBridgeIndex].m_btBC_QUEST_ITEM_NUMBER = 0;									

  00dad	8b 45 ec	 mov	 eax, DWORD PTR _iBridgeIndex$229943[ebp]
  00db0	69 c0 60 04 00
	00		 imul	 eax, 1120		; 00000460H
  00db6	c6 80 f0 03 00
	00 00		 mov	 BYTE PTR ?g_BloodCastle@@3VCBloodCastle@@A[eax+1008], 0
$LN3@ItemDrop:

; 350  : 								}
; 351  : 							}
; 352  : 						}
; 353  : 					}
; 354  : 				}
; 355  : 			}
; 356  : 
; 357  : 			return TRUE;

  00dbd	b8 01 00 00 00	 mov	 eax, 1
  00dc2	eb 5d		 jmp	 SHORT $LN15@ItemDrop
$LN10@ItemDrop:

; 358  : 		}
; 359  : 
; 360  : 		count++;

  00dc4	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00dc7	83 c0 01	 add	 eax, 1
  00dca	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax

; 361  : 
; 362  : 		if ( count > MAX_MAPITEM-1 )

  00dcd	81 7d f8 2b 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 299 ; 0000012bH
  00dd4	7e 07		 jle	 SHORT $LN2@ItemDrop

; 363  : 		{
; 364  : 			count = 0;

  00dd6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@ItemDrop:

; 365  : 		}
; 366  : 
; 367  : 		counttot++;

  00ddd	8b 45 f4	 mov	 eax, DWORD PTR _counttot$[ebp]
  00de0	83 c0 01	 add	 eax, 1
  00de3	89 45 f4	 mov	 DWORD PTR _counttot$[ebp], eax

; 368  : 
; 369  : 		if ( counttot > MAX_MAPITEM-1 )

  00de6	81 7d f4 2b 01
	00 00		 cmp	 DWORD PTR _counttot$[ebp], 299 ; 0000012bH
  00ded	7e 04		 jle	 SHORT $LN1@ItemDrop

; 370  : 		{
; 371  : 			return FALSE;

  00def	33 c0		 xor	 eax, eax
  00df1	eb 2e		 jmp	 SHORT $LN15@ItemDrop
$LN1@ItemDrop:

; 372  : 		}
; 373  : 	}

  00df3	e9 93 fd ff ff	 jmp	 $LN12@ItemDrop
$LN11@ItemDrop:

; 374  : 
; 375  : 	LogAdd(lMsg.Get(MSGGET(1, 205)), __FILE__, __LINE__ );

  00df8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHEQAEE@Z@4JA
  00dfd	83 c0 48	 add	 eax, 72			; 00000048H
  00e00	50		 push	 eax
  00e01	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  00e06	68 cd 01 00 00	 push	 461			; 000001cdH
  00e0b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00e10	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00e15	50		 push	 eax
  00e16	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00e1c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 376  : 
; 377  : 	return FALSE;

  00e1f	33 c0		 xor	 eax, eax
$LN15@ItemDrop:

; 378  : }

  00e21	5f		 pop	 edi
  00e22	5e		 pop	 esi
  00e23	5b		 pop	 ebx
  00e24	8b e5		 mov	 esp, ebp
  00e26	5d		 pop	 ebp
  00e27	c2 44 00	 ret	 68			; 00000044H
?ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHEQAEE@Z ENDP	; MapClass::ItemDrop
_TEXT	ENDS
PUBLIC	?MoneyItemDrop@MapClass@@QAEHHHH@Z		; MapClass::MoneyItemDrop
EXTRN	?gZenDurationTime@@3HA:DWORD			; gZenDurationTime
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_attr$ = -13						; size = 1
_counttot$ = -12					; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
_money$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?MoneyItemDrop@MapClass@@QAEHHHH@Z PROC			; MapClass::MoneyItemDrop
; _this$ = ecx

; 381  : {

  00e30	55		 push	 ebp
  00e31	8b ec		 mov	 ebp, esp
  00e33	83 ec 50	 sub	 esp, 80			; 00000050H
  00e36	53		 push	 ebx
  00e37	56		 push	 esi
  00e38	57		 push	 edi
  00e39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 	int count;
; 383  : 	int counttot = 0;

  00e3c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _counttot$[ebp], 0

; 384  : 
; 385  : 	BYTE attr = this->GetAttr(x, y);

  00e43	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00e46	50		 push	 eax
  00e47	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00e4a	51		 push	 ecx
  00e4b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e4e	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00e53	88 45 f3	 mov	 BYTE PTR _attr$[ebp], al

; 386  : 
; 387  : 	if ( (attr&4) == 4 || (attr&8) == 8 )

  00e56	0f b6 45 f3	 movzx	 eax, BYTE PTR _attr$[ebp]
  00e5a	83 e0 04	 and	 eax, 4
  00e5d	75 09		 jne	 SHORT $LN7@MoneyItemD
  00e5f	0f b6 45 f3	 movzx	 eax, BYTE PTR _attr$[ebp]
  00e63	83 e0 08	 and	 eax, 8
  00e66	74 07		 je	 SHORT $LN8@MoneyItemD
$LN7@MoneyItemD:

; 388  : 	{
; 389  : 		return FALSE;

  00e68	33 c0		 xor	 eax, eax
  00e6a	e9 8f 01 00 00	 jmp	 $LN9@MoneyItemD
$LN8@MoneyItemD:

; 390  : 	}
; 391  : 
; 392  : 	count = this->m_ItemCount;

  00e6f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e72	8b 88 10 38 05
	00		 mov	 ecx, DWORD PTR [eax+342032]
  00e78	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$LN6@MoneyItemD:

; 393  : 
; 394  : 	while ( true )

  00e7b	b8 01 00 00 00	 mov	 eax, 1
  00e80	85 c0		 test	 eax, eax
  00e82	0f 84 74 01 00
	00		 je	 $LN5@MoneyItemD

; 395  : 	{
; 396  : 		if ( this->m_cItem[count].IsItem() == FALSE )

  00e88	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00e8b	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00e91	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e94	8d 4c 01 24	 lea	 ecx, DWORD PTR [ecx+eax+36]
  00e98	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00e9d	85 c0		 test	 eax, eax
  00e9f	0f 85 23 01 00
	00		 jne	 $LN4@MoneyItemD

; 397  : 		{
; 398  : 			this->m_cItem[count].m_Type = ITEMGET(14,15);

  00ea5	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00ea8	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00eae	b9 0f 1c 00 00	 mov	 ecx, 7183		; 00001c0fH
  00eb3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00eb6	66 89 4c 02 2a	 mov	 WORD PTR [edx+eax+42], cx

; 399  : 			this->m_cItem[count].m_SellMoney = money;

  00ebb	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00ebe	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00ec4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ec7	8b 55 08	 mov	 edx, DWORD PTR _money$[ebp]
  00eca	89 94 01 90 00
	00 00		 mov	 DWORD PTR [ecx+eax+144], edx

; 400  : 			this->m_cItem[count].m_BuyMoney = money;

  00ed1	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00ed4	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00eda	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00edd	8b 55 08	 mov	 edx, DWORD PTR _money$[ebp]
  00ee0	89 94 01 94 00
	00 00		 mov	 DWORD PTR [ecx+eax+148], edx

; 401  : 			this->m_cItem[count].px = x;

  00ee7	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00eea	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00ef0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ef3	8a 55 0c	 mov	 dl, BYTE PTR _x$[ebp]
  00ef6	88 94 01 f8 00
	00 00		 mov	 BYTE PTR [ecx+eax+248], dl

; 402  : 			this->m_cItem[count].py = y;

  00efd	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00f00	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00f06	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f09	8a 55 10	 mov	 dl, BYTE PTR _y$[ebp]
  00f0c	88 94 01 f9 00
	00 00		 mov	 BYTE PTR [ecx+eax+249], dl

; 403  : 			this->m_cItem[count].live = 1;

  00f13	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00f16	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00f1c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f1f	c6 84 01 fa 00
	00 00 01	 mov	 BYTE PTR [ecx+eax+250], 1

; 404  : 			this->m_cItem[count].Give = 0;

  00f27	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00f2a	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00f30	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f33	c6 84 01 fb 00
	00 00 00	 mov	 BYTE PTR [ecx+eax+251], 0

; 405  : 			this->m_cItem[count].m_State = 1;

  00f3b	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00f3e	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00f44	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f47	c7 84 01 fc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+252], 1

; 406  : 			this->m_cItem[count].m_Time = GetTickCount() + ::gZenDurationTime * 1000;

  00f52	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00f58	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gZenDurationTime@@3HA ; gZenDurationTime
  00f5e	69 c9 e8 03 00
	00		 imul	 ecx, 1000		; 000003e8H
  00f64	03 c1		 add	 eax, ecx
  00f66	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  00f69	69 d2 74 04 00
	00		 imul	 edx, 1140		; 00000474H
  00f6f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f72	89 84 11 00 01
	00 00		 mov	 DWORD PTR [ecx+edx+256], eax

; 407  : 			this->m_cItem[count].m_LootTime = 0;

  00f79	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00f7c	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00f82	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f85	c7 84 01 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+264], 0

; 408  : 			this->m_ItemCount++;

  00f90	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f93	8b 88 10 38 05
	00		 mov	 ecx, DWORD PTR [eax+342032]
  00f99	83 c1 01	 add	 ecx, 1
  00f9c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f9f	89 8a 10 38 05
	00		 mov	 DWORD PTR [edx+342032], ecx

; 409  : 
; 410  : 			if ( this->m_ItemCount > MAX_MAPITEM-1 )

  00fa5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00fa8	81 b8 10 38 05
	00 2b 01 00 00	 cmp	 DWORD PTR [eax+342032], 299 ; 0000012bH
  00fb2	7e 0d		 jle	 SHORT $LN3@MoneyItemD

; 411  : 			{
; 412  : 				this->m_ItemCount = 0;

  00fb4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00fb7	c7 80 10 38 05
	00 00 00 00 00	 mov	 DWORD PTR [eax+342032], 0
$LN3@MoneyItemD:

; 413  : 			}
; 414  : 
; 415  : 			return TRUE;

  00fc1	b8 01 00 00 00	 mov	 eax, 1
  00fc6	eb 36		 jmp	 SHORT $LN9@MoneyItemD
$LN4@MoneyItemD:

; 416  : 		}
; 417  : 
; 418  : 		count++;

  00fc8	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00fcb	83 c0 01	 add	 eax, 1
  00fce	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax

; 419  : 
; 420  : 		if ( count > MAX_MAPITEM-1 )

  00fd1	81 7d f8 2b 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 299 ; 0000012bH
  00fd8	7e 07		 jle	 SHORT $LN2@MoneyItemD

; 421  : 		{
; 422  : 			count = 0;

  00fda	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@MoneyItemD:

; 423  : 		}
; 424  : 
; 425  : 		counttot++;

  00fe1	8b 45 f4	 mov	 eax, DWORD PTR _counttot$[ebp]
  00fe4	83 c0 01	 add	 eax, 1
  00fe7	89 45 f4	 mov	 DWORD PTR _counttot$[ebp], eax

; 426  : 
; 427  : 		if ( counttot > MAX_MAPITEM-1 )

  00fea	81 7d f4 2b 01
	00 00		 cmp	 DWORD PTR _counttot$[ebp], 299 ; 0000012bH
  00ff1	7e 04		 jle	 SHORT $LN1@MoneyItemD

; 428  : 		{
; 429  : 			return FALSE;

  00ff3	33 c0		 xor	 eax, eax
  00ff5	eb 07		 jmp	 SHORT $LN9@MoneyItemD
$LN1@MoneyItemD:

; 430  : 		}
; 431  : 	}

  00ff7	e9 7f fe ff ff	 jmp	 $LN6@MoneyItemD
$LN5@MoneyItemD:

; 432  : 
; 433  : 	return FALSE;

  00ffc	33 c0		 xor	 eax, eax
$LN9@MoneyItemD:

; 434  : }

  00ffe	5f		 pop	 edi
  00fff	5e		 pop	 esi
  01000	5b		 pop	 ebx
  01001	8b e5		 mov	 esp, ebp
  01003	5d		 pop	 ebp
  01004	c2 0c 00	 ret	 12			; 0000000cH
?MoneyItemDrop@MapClass@@QAEHHHH@Z ENDP			; MapClass::MoneyItemDrop
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??ItemGive@MapClass@@QAEHHH_N@Z@4JA ; `MapClass::ItemGive'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
PUBLIC	?ItemGive@MapClass@@QAEHHH_N@Z			; MapClass::ItemGive
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	__imp__wsprintfA:PROC
EXTRN	?PartyLootTime@@3HA:DWORD			; PartyLootTime
EXTRN	?gLootingTime@@3HA:DWORD			; gLootingTime
;	COMDAT ?__LINE__Var@?1??ItemGive@MapClass@@QAEHHH_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ItemGive@MapClass@@QAEHHH_N@Z@4JA DD 01b6H ; `MapClass::ItemGive'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
tv246 = -356						; size = 4
tv303 = -352						; size = 4
tv290 = -352						; size = 4
tv247 = -352						; size = 4
tv67 = -352						; size = 4
_szTemp$230024 = -284					; size = 256
_lootTimeLeft$229994 = -28				; size = 4
_shouldLoot$229992 = -21				; size = 1
_lootresult$ = -20					; size = 4
_disy$ = -16						; size = 4
_disx$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_item_num$ = 12						; size = 4
_bFailNotSend$ = 16					; size = 1
?ItemGive@MapClass@@QAEHHH_N@Z PROC			; MapClass::ItemGive
; _this$ = ecx

; 438  : {

  01010	55		 push	 ebp
  01011	8b ec		 mov	 ebp, esp
  01013	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  01019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0101e	33 c5		 xor	 eax, ebp
  01020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01023	53		 push	 ebx
  01024	56		 push	 esi
  01025	57		 push	 edi
  01026	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 439  : 	if ( ((item_num<0)?FALSE:(item_num>MAX_MAPITEM-1)?FALSE:TRUE) == FALSE ) 

  01029	83 7d 0c 00	 cmp	 DWORD PTR _item_num$[ebp], 0
  0102d	7d 0c		 jge	 SHORT $LN31@ItemGive
  0102f	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
  01039	eb 12		 jmp	 SHORT $LN32@ItemGive
$LN31@ItemGive:
  0103b	33 c0		 xor	 eax, eax
  0103d	81 7d 0c 2b 01
	00 00		 cmp	 DWORD PTR _item_num$[ebp], 299 ; 0000012bH
  01044	0f 9e c0	 setle	 al
  01047	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv67[ebp], eax
$LN32@ItemGive:
  0104d	83 bd a0 fe ff
	ff 00		 cmp	 DWORD PTR tv67[ebp], 0
  01054	75 2e		 jne	 SHORT $LN28@ItemGive

; 440  : 	{
; 441  : 		LogAdd(lMsg.Get(MSGGET(1, 206)), __FILE__, __LINE__);

  01056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ItemGive@MapClass@@QAEHHH_N@Z@4JA
  0105b	83 c0 03	 add	 eax, 3
  0105e	50		 push	 eax
  0105f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  01064	68 ce 01 00 00	 push	 462			; 000001ceH
  01069	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0106e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01073	50		 push	 eax
  01074	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0107a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 442  : 		return FALSE;

  0107d	33 c0		 xor	 eax, eax
  0107f	e9 f5 04 00 00	 jmp	 $LN29@ItemGive
$LN28@ItemGive:

; 443  : 	}
; 444  : 
; 445  : 	if ( gObj[aIndex].MapNumber != this->thisMapNumber )

  01084	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01087	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0108d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01093	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0109b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0109e	3b 90 b4 3d 05
	00		 cmp	 edx, DWORD PTR [eax+343476]
  010a4	74 5a		 je	 SHORT $LN27@ItemGive

; 446  : 	{
; 447  : 		LogAdd(lMsg.Get(MSGGET(1, 207)), __FILE__, __LINE__, gObj[aIndex].MapNumber, gObj[aIndex].Name);

  010a6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  010a9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  010af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  010b5	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  010b9	52		 push	 edx
  010ba	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  010bd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  010c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  010c9	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  010d1	52		 push	 edx
  010d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ItemGive@MapClass@@QAEHHH_N@Z@4JA
  010d7	83 c0 09	 add	 eax, 9
  010da	50		 push	 eax
  010db	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  010e0	68 cf 01 00 00	 push	 463			; 000001cfH
  010e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  010ea	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  010ef	50		 push	 eax
  010f0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  010f6	83 c4 14	 add	 esp, 20			; 00000014H

; 448  : 		return FALSE;

  010f9	33 c0		 xor	 eax, eax
  010fb	e9 79 04 00 00	 jmp	 $LN29@ItemGive
$LN27@ItemGive:

; 449  : 	}
; 450  : 
; 451  : 	if ( this->m_cItem[item_num].IsItem() == FALSE )

  01100	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  01103	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01109	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0110c	8d 4c 01 24	 lea	 ecx, DWORD PTR [ecx+eax+36]
  01110	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  01115	85 c0		 test	 eax, eax
  01117	75 42		 jne	 SHORT $LN26@ItemGive

; 452  : 	{
; 453  : 		LogAdd(lMsg.Get(MSGGET(1, 208)), __FILE__, __LINE__,gObj[aIndex].Name);

  01119	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0111c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01128	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  0112c	52		 push	 edx
  0112d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ItemGive@MapClass@@QAEHHH_N@Z@4JA
  01132	83 c0 0f	 add	 eax, 15			; 0000000fH
  01135	50		 push	 eax
  01136	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JNGGGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  0113b	68 d0 01 00 00	 push	 464			; 000001d0H
  01140	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01145	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0114a	50		 push	 eax
  0114b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01151	83 c4 10	 add	 esp, 16			; 00000010H

; 454  : 		return FALSE;

  01154	33 c0		 xor	 eax, eax
  01156	e9 1e 04 00 00	 jmp	 $LN29@ItemGive
$LN26@ItemGive:

; 455  : 	}
; 456  : 
; 457  : 	if ( this->m_cItem[item_num].Give == true )

  0115b	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  0115e	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01164	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01167	0f b6 94 01 fb
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+251]
  0116f	83 fa 01	 cmp	 edx, 1
  01172	75 07		 jne	 SHORT $LN25@ItemGive

; 458  : 	{
; 459  : 		return FALSE;

  01174	33 c0		 xor	 eax, eax
  01176	e9 fe 03 00 00	 jmp	 $LN29@ItemGive
$LN25@ItemGive:

; 460  : 	}
; 461  : 
; 462  : 	if ( this->m_cItem[item_num].live == false )

  0117b	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  0117e	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01184	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01187	0f b6 94 01 fa
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+250]
  0118f	85 d2		 test	 edx, edx
  01191	75 07		 jne	 SHORT $LN24@ItemGive

; 463  : 	{
; 464  : 		return FALSE;

  01193	33 c0		 xor	 eax, eax
  01195	e9 df 03 00 00	 jmp	 $LN29@ItemGive
$LN24@ItemGive:

; 465  : 	}
; 466  : 
; 467  : 	int disx = this->m_cItem[item_num].px - gObj[aIndex].X;

  0119a	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  0119d	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  011a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011a6	0f b6 94 01 f8
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+248]
  011ae	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  011b1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  011b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  011bd	0f bf 84 01 44
	01 00 00	 movsx	 eax, WORD PTR [ecx+eax+324]
  011c5	2b d0		 sub	 edx, eax
  011c7	89 55 f4	 mov	 DWORD PTR _disx$[ebp], edx

; 468  : 	int disy = this->m_cItem[item_num].py - gObj[aIndex].Y;

  011ca	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  011cd	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  011d3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011d6	0f b6 94 01 f9
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+249]
  011de	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  011e1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  011e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  011ed	0f bf 84 01 46
	01 00 00	 movsx	 eax, WORD PTR [ecx+eax+326]
  011f5	2b d0		 sub	 edx, eax
  011f7	89 55 f0	 mov	 DWORD PTR _disy$[ebp], edx

; 469  : 
; 470  : 	if ( disx > 2 || disx < -2 )

  011fa	83 7d f4 02	 cmp	 DWORD PTR _disx$[ebp], 2
  011fe	7f 06		 jg	 SHORT $LN22@ItemGive
  01200	83 7d f4 fe	 cmp	 DWORD PTR _disx$[ebp], -2 ; fffffffeH
  01204	7d 07		 jge	 SHORT $LN23@ItemGive
$LN22@ItemGive:

; 471  : 	{
; 472  : 		return FALSE;

  01206	33 c0		 xor	 eax, eax
  01208	e9 6c 03 00 00	 jmp	 $LN29@ItemGive
$LN23@ItemGive:

; 473  : 	}
; 474  : 
; 475  : 	if ( disy > 2 || disy < -2 )

  0120d	83 7d f0 02	 cmp	 DWORD PTR _disy$[ebp], 2
  01211	7f 06		 jg	 SHORT $LN20@ItemGive
  01213	83 7d f0 fe	 cmp	 DWORD PTR _disy$[ebp], -2 ; fffffffeH
  01217	7d 07		 jge	 SHORT $LN21@ItemGive
$LN20@ItemGive:

; 476  : 	{
; 477  : 		return FALSE;

  01219	33 c0		 xor	 eax, eax
  0121b	e9 59 03 00 00	 jmp	 $LN29@ItemGive
$LN21@ItemGive:

; 478  : 	}
; 479  : 
; 480  : 	int lootresult = 1;

  01220	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _lootresult$[ebp], 1

; 481  : 
; 482  : 	if ( gLootingTime > 0 )

  01227	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLootingTime@@3HA, 0 ; gLootingTime
  0122e	0f 8e a4 02 00
	00		 jle	 $LN19@ItemGive

; 483  : 	{
; 484  : 		if ( this->m_cItem[item_num].m_UserIndex != -1 )

  01234	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  01237	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  0123d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01240	83 bc 01 04 01
	00 00 ff	 cmp	 DWORD PTR [ecx+eax+260], -1
  01248	0f 84 8a 02 00
	00		 je	 $LN19@ItemGive

; 485  : 		{
; 486  : 			if ( GetTickCount() < this->m_cItem[item_num].m_LootTime )

  0124e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01254	8b 4d 0c	 mov	 ecx, DWORD PTR _item_num$[ebp]
  01257	69 c9 74 04 00
	00		 imul	 ecx, 1140		; 00000474H
  0125d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01260	3b 84 0a 08 01
	00 00		 cmp	 eax, DWORD PTR [edx+ecx+264]
  01267	0f 83 6b 02 00
	00		 jae	 $LN19@ItemGive

; 487  : 			{
; 488  : 				if ( aIndex != this->m_cItem[item_num].m_UserIndex )

  0126d	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  01270	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01276	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01279	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0127c	3b 94 01 04 01
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+260]
  01283	0f 84 4f 02 00
	00		 je	 $LN19@ItemGive

; 489  : 				{
; 490  : 					lootresult = 0;

  01289	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _lootresult$[ebp], 0

; 491  : 					bool shouldLoot = true;

  01290	c6 45 eb 01	 mov	 BYTE PTR _shouldLoot$229992[ebp], 1

; 492  : 
; 493  : 					if (PartyLootTime > 0)

  01294	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PartyLootTime@@3HA, 0 ; PartyLootTime
  0129b	7e 38		 jle	 SHORT $LN15@ItemGive

; 494  : 					{
; 495  : 						int lootTimeLeft = (this->m_cItem[item_num].m_LootTime - GetTickCount()) / 1000;

  0129d	8b 75 0c	 mov	 esi, DWORD PTR _item_num$[ebp]
  012a0	69 f6 74 04 00
	00		 imul	 esi, 1140		; 00000474H
  012a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  012ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012af	8b 94 31 08 01
	00 00		 mov	 edx, DWORD PTR [ecx+esi+264]
  012b6	2b d0		 sub	 edx, eax
  012b8	8b c2		 mov	 eax, edx
  012ba	33 d2		 xor	 edx, edx
  012bc	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  012c1	f7 f1		 div	 ecx
  012c3	89 45 e4	 mov	 DWORD PTR _lootTimeLeft$229994[ebp], eax

; 496  : 
; 497  : 						if (lootTimeLeft > PartyLootTime)

  012c6	8b 45 e4	 mov	 eax, DWORD PTR _lootTimeLeft$229994[ebp]
  012c9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?PartyLootTime@@3HA ; PartyLootTime
  012cf	7e 04		 jle	 SHORT $LN15@ItemGive

; 498  : 						{
; 499  : 							shouldLoot = false;

  012d1	c6 45 eb 00	 mov	 BYTE PTR _shouldLoot$229992[ebp], 0
$LN15@ItemGive:

; 500  : 						}
; 501  : 					}
; 502  : 
; 503  : 					if (shouldLoot)//if ( this->m_cItem[item_num].m_QuestItem == false )

  012d5	0f b6 45 eb	 movzx	 eax, BYTE PTR _shouldLoot$229992[ebp]
  012d9	85 c0		 test	 eax, eax
  012db	0f 84 f7 01 00
	00		 je	 $LN19@ItemGive

; 504  : 					{
; 505  : 						if ( gObj[aIndex].PartyNumber >= 0 )

  012e1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  012e4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  012ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012f0	83 bc 01 2c 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1068], 0
  012f8	0f 8c da 01 00
	00		 jl	 $LN19@ItemGive

; 506  : 						{
; 507  : 							if ( gObj[aIndex].PartyNumber == gObj[this->m_cItem[item_num].m_UserIndex].PartyNumber )

  012fe	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01301	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01307	8b 4d 0c	 mov	 ecx, DWORD PTR _item_num$[ebp]
  0130a	69 c9 74 04 00
	00		 imul	 ecx, 1140		; 00000474H
  01310	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01313	8b 8c 0a 04 01
	00 00		 mov	 ecx, DWORD PTR [edx+ecx+260]
  0131a	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01320	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01326	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0132c	8b 84 02 2c 04
	00 00		 mov	 eax, DWORD PTR [edx+eax+1068]
  01333	3b 84 0e 2c 04
	00 00		 cmp	 eax, DWORD PTR [esi+ecx+1068]
  0133a	0f 85 98 01 00
	00		 jne	 $LN19@ItemGive

; 508  : 							{
; 509  : 								if ( BC_MAP_RANGE(gObj[aIndex].MapNumber) != FALSE )

  01340	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01343	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01349	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0134f	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01357	83 fa 34	 cmp	 edx, 52			; 00000034H
  0135a	75 0c		 jne	 SHORT $LN35@ItemGive
  0135c	c7 85 a0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv247[ebp], 1
  01366	eb 59		 jmp	 SHORT $LN36@ItemGive
$LN35@ItemGive:
  01368	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0136b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01371	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01377	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0137f	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  01382	7d 0c		 jge	 SHORT $LN33@ItemGive
  01384	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv246[ebp], 0
  0138e	eb 25		 jmp	 SHORT $LN34@ItemGive
$LN33@ItemGive:
  01390	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01393	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01399	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0139f	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  013a7	33 c0		 xor	 eax, eax
  013a9	83 fa 11	 cmp	 edx, 17			; 00000011H
  013ac	0f 9e c0	 setle	 al
  013af	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv246[ebp], eax
$LN34@ItemGive:
  013b5	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv246[ebp]
  013bb	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv247[ebp], ecx
$LN36@ItemGive:
  013c1	83 bd a0 fe ff
	ff 00		 cmp	 DWORD PTR tv247[ebp], 0
  013c8	0f 84 8d 00 00
	00		 je	 $LN10@ItemGive

; 510  : 								{
; 511  : 									if ( this->m_cItem[item_num].m_Type == ITEMGET(12,15) ||( this->m_cItem[item_num].m_Type == ITEMGET(13,19) && ((this->m_cItem[item_num].m_Level < 0)?FALSE:(this->m_cItem[item_num].m_Level > 2)?FALSE:TRUE) != FALSE ) )

  013ce	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  013d1	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  013d7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013da	0f bf 54 01 2a	 movsx	 edx, WORD PTR [ecx+eax+42]
  013df	81 fa 0f 18 00
	00		 cmp	 edx, 6159		; 0000180fH
  013e5	74 62		 je	 SHORT $LN8@ItemGive
  013e7	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  013ea	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  013f0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013f3	0f bf 54 01 2a	 movsx	 edx, WORD PTR [ecx+eax+42]
  013f8	81 fa 13 1a 00
	00		 cmp	 edx, 6675		; 00001a13H
  013fe	75 52		 jne	 SHORT $LN9@ItemGive
  01400	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  01403	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01409	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0140c	0f bf 54 01 2c	 movsx	 edx, WORD PTR [ecx+eax+44]
  01411	85 d2		 test	 edx, edx
  01413	7d 0c		 jge	 SHORT $LN37@ItemGive
  01415	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv290[ebp], 0
  0141f	eb 1f		 jmp	 SHORT $LN38@ItemGive
$LN37@ItemGive:
  01421	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  01424	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  0142a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0142d	0f bf 54 01 2c	 movsx	 edx, WORD PTR [ecx+eax+44]
  01432	33 c0		 xor	 eax, eax
  01434	83 fa 02	 cmp	 edx, 2
  01437	0f 9e c0	 setle	 al
  0143a	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
$LN38@ItemGive:
  01440	83 bd a0 fe ff
	ff 00		 cmp	 DWORD PTR tv290[ebp], 0
  01447	74 09		 je	 SHORT $LN9@ItemGive
$LN8@ItemGive:

; 512  : 									{
; 513  : 										lootresult = 0;

  01449	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _lootresult$[ebp], 0

; 514  : 									}
; 515  : 									else

  01450	eb 07		 jmp	 SHORT $LN7@ItemGive
$LN9@ItemGive:

; 516  : 									{
; 517  : 										lootresult = 1;

  01452	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _lootresult$[ebp], 1
$LN7@ItemGive:

; 518  : 									}
; 519  : 								}
; 520  : 								else

  01459	eb 07		 jmp	 SHORT $LN6@ItemGive
$LN10@ItemGive:

; 521  : 								{
; 522  : 									lootresult = 1;

  0145b	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _lootresult$[ebp], 1
$LN6@ItemGive:

; 523  : 								}
; 524  : 
; 525  : 								if( IT_MAP_RANGE(gObj[aIndex].MapNumber) ) //season 2.5 add-on

  01462	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01465	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0146b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01471	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01479	83 fa 2d	 cmp	 edx, 45			; 0000002dH
  0147c	7d 0c		 jge	 SHORT $LN39@ItemGive
  0147e	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv303[ebp], 0
  01488	eb 25		 jmp	 SHORT $LN40@ItemGive
$LN39@ItemGive:
  0148a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0148d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01493	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01499	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  014a1	33 c0		 xor	 eax, eax
  014a3	83 fa 32	 cmp	 edx, 50			; 00000032H
  014a6	0f 9e c0	 setle	 al
  014a9	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv303[ebp], eax
$LN40@ItemGive:
  014af	83 bd a0 fe ff
	ff 00		 cmp	 DWORD PTR tv303[ebp], 0
  014b6	74 20		 je	 SHORT $LN19@ItemGive

; 526  : 								{
; 527  : 									if(this->m_cItem[item_num].m_Type == ITEMGET(12,15))

  014b8	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  014bb	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  014c1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  014c4	0f bf 54 01 2a	 movsx	 edx, WORD PTR [ecx+eax+42]
  014c9	81 fa 0f 18 00
	00		 cmp	 edx, 6159		; 0000180fH
  014cf	75 07		 jne	 SHORT $LN19@ItemGive

; 528  : 									{
; 529  : 										lootresult = 0;

  014d1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _lootresult$[ebp], 0
$LN19@ItemGive:

; 530  : 									}
; 531  : 								}
; 532  : 							}
; 533  : 						}
; 534  : 					}
; 535  : 				}
; 536  : 			}
; 537  : 		}
; 538  : 	}
; 539  : 
; 540  : 	if ( lootresult == 0 )

  014d8	83 7d ec 00	 cmp	 DWORD PTR _lootresult$[ebp], 0
  014dc	75 57		 jne	 SHORT $LN3@ItemGive

; 541  : 	{
; 542  : 		if ( bFailNotSend == false )

  014de	0f b6 45 10	 movzx	 eax, BYTE PTR _bFailNotSend$[ebp]
  014e2	85 c0		 test	 eax, eax
  014e4	75 49		 jne	 SHORT $LN2@ItemGive

; 543  : 		{
; 544  : 			char szTemp[256];
; 545  : 
; 546  : 			wsprintf(szTemp, lMsg.Get(MSGGET(4, 128)), gObj[aIndex].Name );

  014e6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014e9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  014ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  014f5	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  014f9	52		 push	 edx
  014fa	68 80 04 00 00	 push	 1152			; 00000480H
  014ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01504	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01509	50		 push	 eax
  0150a	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$230024[ebp]
  01510	50		 push	 eax
  01511	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  01517	83 c4 0c	 add	 esp, 12			; 0000000cH

; 547  : 			::GCServerMsgStringSend(szTemp, aIndex, 1);

  0151a	6a 01		 push	 1
  0151c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0151f	50		 push	 eax
  01520	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$230024[ebp]
  01526	51		 push	 ecx
  01527	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0152c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ItemGive:

; 548  : 			
; 549  : 		}
; 550  : 
; 551  : 		return FALSE;

  0152f	33 c0		 xor	 eax, eax
  01531	eb 46		 jmp	 SHORT $LN29@ItemGive

; 552  : 	}
; 553  : 	else

  01533	eb 44		 jmp	 SHORT $LN29@ItemGive
$LN3@ItemGive:

; 554  : 	{
; 555  : 		this->m_cItem[item_num].m_State = 8;

  01535	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  01538	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  0153e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01541	c7 84 01 fc 00
	00 00 08 00 00
	00		 mov	 DWORD PTR [ecx+eax+252], 8

; 556  : 		this->m_cItem[item_num].Give = true;

  0154c	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  0154f	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01555	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01558	c6 84 01 fb 00
	00 00 01	 mov	 BYTE PTR [ecx+eax+251], 1

; 557  : 		this->m_cItem[item_num].live = false;

  01560	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  01563	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01569	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0156c	c6 84 01 fa 00
	00 00 00	 mov	 BYTE PTR [ecx+eax+250], 0

; 558  : 
; 559  : 		return TRUE;

  01574	b8 01 00 00 00	 mov	 eax, 1
$LN29@ItemGive:

; 560  : 	}
; 561  : }

  01579	5f		 pop	 edi
  0157a	5e		 pop	 esi
  0157b	5b		 pop	 ebx
  0157c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0157f	33 cd		 xor	 ecx, ebp
  01581	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01586	8b e5		 mov	 esp, ebp
  01588	5d		 pop	 ebp
  01589	c2 0c 00	 ret	 12			; 0000000cH
?ItemGive@MapClass@@QAEHHH_N@Z ENDP			; MapClass::ItemGive
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?GetVisibleItemCount@MapClass@@QAEHPAUOBJECTSTRUCT@@H@Z ; MapClass::GetVisibleItemCount
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv154 = -96						; size = 4
_dis$230042 = -28					; size = 4
_ty$230041 = -24					; size = 4
_tx$230040 = -20					; size = 4
_lpMapItem$230036 = -16					; size = 4
_i$230032 = -12						; size = 4
_itemcount$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_distance$ = 12						; size = 4
?GetVisibleItemCount@MapClass@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; MapClass::GetVisibleItemCount
; _this$ = ecx

; 565  : {

  01590	55		 push	 ebp
  01591	8b ec		 mov	 ebp, esp
  01593	83 ec 60	 sub	 esp, 96			; 00000060H
  01596	53		 push	 ebx
  01597	56		 push	 esi
  01598	57		 push	 edi
  01599	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 566  : 	int itemcount = 0;

  0159c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _itemcount$[ebp], 0

; 567  : 
; 568  : 	for(int i = 0; i < this->m_ItemCount; i++)

  015a3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$230032[ebp], 0
  015aa	eb 09		 jmp	 SHORT $LN7@GetVisible
$LN6@GetVisible:
  015ac	8b 45 f4	 mov	 eax, DWORD PTR _i$230032[ebp]
  015af	83 c0 01	 add	 eax, 1
  015b2	89 45 f4	 mov	 DWORD PTR _i$230032[ebp], eax
$LN7@GetVisible:
  015b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015b8	8b 4d f4	 mov	 ecx, DWORD PTR _i$230032[ebp]
  015bb	3b 88 10 38 05
	00		 cmp	 ecx, DWORD PTR [eax+342032]
  015c1	0f 8d ea 00 00
	00		 jge	 $LN5@GetVisible

; 569  : 	{
; 570  : 		CMapItem * lpMapItem = &this->m_cItem[i];

  015c7	8b 45 f4	 mov	 eax, DWORD PTR _i$230032[ebp]
  015ca	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  015d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015d3	8d 54 01 20	 lea	 edx, DWORD PTR [ecx+eax+32]
  015d7	89 55 f0	 mov	 DWORD PTR _lpMapItem$230036[ebp], edx

; 571  : 
; 572  : 		if ( lpMapItem->IsItem() != FALSE )

  015da	8b 4d f0	 mov	 ecx, DWORD PTR _lpMapItem$230036[ebp]
  015dd	83 c1 04	 add	 ecx, 4
  015e0	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  015e5	85 c0		 test	 eax, eax
  015e7	0f 84 bf 00 00
	00		 je	 $LN1@GetVisible

; 573  : 		{
; 574  : 			if ( lpMapItem->Give == 0 && lpMapItem->live != 0)

  015ed	8b 45 f0	 mov	 eax, DWORD PTR _lpMapItem$230036[ebp]
  015f0	0f b6 88 db 00
	00 00		 movzx	 ecx, BYTE PTR [eax+219]
  015f7	85 c9		 test	 ecx, ecx
  015f9	0f 85 ad 00 00
	00		 jne	 $LN1@GetVisible
  015ff	8b 45 f0	 mov	 eax, DWORD PTR _lpMapItem$230036[ebp]
  01602	0f b6 88 da 00
	00 00		 movzx	 ecx, BYTE PTR [eax+218]
  01609	85 c9		 test	 ecx, ecx
  0160b	0f 84 9b 00 00
	00		 je	 $LN1@GetVisible

; 575  : 			{
; 576  : 				if(gLootingTime > 0)

  01611	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLootingTime@@3HA, 0 ; gLootingTime
  01618	0f 8e 8e 00 00
	00		 jle	 $LN1@GetVisible

; 577  : 				{
; 578  : 					int tx = lpObj->X - lpMapItem->px;

  0161e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01621	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  01628	8b 55 f0	 mov	 edx, DWORD PTR _lpMapItem$230036[ebp]
  0162b	0f b6 82 d8 00
	00 00		 movzx	 eax, BYTE PTR [edx+216]
  01632	2b c8		 sub	 ecx, eax
  01634	89 4d ec	 mov	 DWORD PTR _tx$230040[ebp], ecx

; 579  : 					int ty = lpObj->Y - lpMapItem->py;

  01637	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0163a	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  01641	8b 55 f0	 mov	 edx, DWORD PTR _lpMapItem$230036[ebp]
  01644	0f b6 82 d9 00
	00 00		 movzx	 eax, BYTE PTR [edx+217]
  0164b	2b c8		 sub	 ecx, eax
  0164d	89 4d e8	 mov	 DWORD PTR _ty$230041[ebp], ecx

; 580  : 					
; 581  : 					int dis = (int)(sqrt((float) (tx*tx+ty*ty)));

  01650	8b 45 ec	 mov	 eax, DWORD PTR _tx$230040[ebp]
  01653	0f af 45 ec	 imul	 eax, DWORD PTR _tx$230040[ebp]
  01657	8b 4d e8	 mov	 ecx, DWORD PTR _ty$230041[ebp]
  0165a	0f af 4d e8	 imul	 ecx, DWORD PTR _ty$230041[ebp]
  0165e	03 c1		 add	 eax, ecx
  01660	89 45 a0	 mov	 DWORD PTR tv154[ebp], eax
  01663	db 45 a0	 fild	 DWORD PTR tv154[ebp]
  01666	51		 push	 ecx
  01667	d9 1c 24	 fstp	 DWORD PTR [esp]
  0166a	e8 00 00 00 00	 call	 ?sqrt@@YAMM@Z		; sqrt
  0166f	83 c4 04	 add	 esp, 4
  01672	e8 00 00 00 00	 call	 __ftol2_sse
  01677	89 45 e4	 mov	 DWORD PTR _dis$230042[ebp], eax

; 582  : 
; 583  : 					if( dis <= distance)

  0167a	8b 45 e4	 mov	 eax, DWORD PTR _dis$230042[ebp]
  0167d	3b 45 0c	 cmp	 eax, DWORD PTR _distance$[ebp]
  01680	7f 2a		 jg	 SHORT $LN1@GetVisible

; 584  : 					{
; 585  : 						lpMapItem->m_State = 8;

  01682	8b 45 f0	 mov	 eax, DWORD PTR _lpMapItem$230036[ebp]
  01685	c7 80 dc 00 00
	00 08 00 00 00	 mov	 DWORD PTR [eax+220], 8

; 586  : 						lpMapItem->Give = true;

  0168f	8b 45 f0	 mov	 eax, DWORD PTR _lpMapItem$230036[ebp]
  01692	c6 80 db 00 00
	00 01		 mov	 BYTE PTR [eax+219], 1

; 587  : 						lpMapItem->live = false;

  01699	8b 45 f0	 mov	 eax, DWORD PTR _lpMapItem$230036[ebp]
  0169c	c6 80 da 00 00
	00 00		 mov	 BYTE PTR [eax+218], 0

; 588  : 
; 589  : 						itemcount++;

  016a3	8b 45 f8	 mov	 eax, DWORD PTR _itemcount$[ebp]
  016a6	83 c0 01	 add	 eax, 1
  016a9	89 45 f8	 mov	 DWORD PTR _itemcount$[ebp], eax
$LN1@GetVisible:

; 590  : 					}
; 591  : 				}	
; 592  : 			}
; 593  : 		}
; 594  : 	}

  016ac	e9 fb fe ff ff	 jmp	 $LN6@GetVisible
$LN5@GetVisible:

; 595  : 
; 596  : 	return itemcount;

  016b1	8b 45 f8	 mov	 eax, DWORD PTR _itemcount$[ebp]

; 597  : }

  016b4	5f		 pop	 edi
  016b5	5e		 pop	 esi
  016b6	5b		 pop	 ebx
  016b7	8b e5		 mov	 esp, ebp
  016b9	5d		 pop	 ebp
  016ba	c2 08 00	 ret	 8
?GetVisibleItemCount@MapClass@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; MapClass::GetVisibleItemCount
_TEXT	ENDS
PUBLIC	?StateSetDestroy@MapClass@@QAEXXZ		; MapClass::StateSetDestroy
EXTRN	?SetNpcStatueRegen@CIllusionTempleEvent@@QAEXE@Z:PROC ; CIllusionTempleEvent::SetNpcStatueRegen
EXTRN	?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A:BYTE ; g_IllusionTempleEvent
EXTRN	?GetName@CItem@@QAEPADXZ:PROC			; CItem::GetName
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$230050 = -12						; size = 4
_CurTime$ = -8						; size = 4
_this$ = -4						; size = 4
?StateSetDestroy@MapClass@@QAEXXZ PROC			; MapClass::StateSetDestroy
; _this$ = ecx

; 600  : {

  016c0	55		 push	 ebp
  016c1	8b ec		 mov	 ebp, esp
  016c3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  016c6	53		 push	 ebx
  016c7	56		 push	 esi
  016c8	57		 push	 edi
  016c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 601  : 	int CurTime = GetTickCount();

  016cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  016d2	89 45 f8	 mov	 DWORD PTR _CurTime$[ebp], eax

; 602  : 
; 603  : 	for (int n=0;n<MAX_MAPITEM;n++)

  016d5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$230050[ebp], 0
  016dc	eb 09		 jmp	 SHORT $LN11@StateSetDe
$LN10@StateSetDe:
  016de	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  016e1	83 c0 01	 add	 eax, 1
  016e4	89 45 f4	 mov	 DWORD PTR _n$230050[ebp], eax
$LN11@StateSetDe:
  016e7	81 7d f4 2c 01
	00 00		 cmp	 DWORD PTR _n$230050[ebp], 300 ; 0000012cH
  016ee	0f 8d b2 01 00
	00		 jge	 $LN12@StateSetDe

; 604  : 	{
; 605  : 		if ( this->m_cItem[n].IsItem() != FALSE )

  016f4	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  016f7	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  016fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01700	8d 4c 01 24	 lea	 ecx, DWORD PTR [ecx+eax+36]
  01704	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  01709	85 c0		 test	 eax, eax
  0170b	0f 84 82 00 00
	00		 je	 $LN8@StateSetDe

; 606  : 		{
; 607  : 			if ( this->m_cItem[n].m_State == 1 )

  01711	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  01714	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  0171a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0171d	83 bc 01 fc 00
	00 00 01	 cmp	 DWORD PTR [ecx+eax+252], 1
  01725	75 19		 jne	 SHORT $LN7@StateSetDe

; 608  : 			{
; 609  : 				this->m_cItem[n].m_State = 2;

  01727	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  0172a	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01730	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01733	c7 84 01 fc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR [ecx+eax+252], 2
  0173e	eb 53		 jmp	 SHORT $LN8@StateSetDe
$LN7@StateSetDe:

; 610  : 			}
; 611  : 			else if ( this->m_cItem[n].m_State == 8 )

  01740	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  01743	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01749	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0174c	83 bc 01 fc 00
	00 00 08	 cmp	 DWORD PTR [ecx+eax+252], 8
  01754	75 3d		 jne	 SHORT $LN8@StateSetDe

; 612  : 			{
; 613  : 				this->m_cItem[n].Clear();

  01756	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  01759	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  0175f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01762	8d 4c 01 24	 lea	 ecx, DWORD PTR [ecx+eax+36]
  01766	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 614  : 				this->m_cItem[n].live = 0;

  0176b	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  0176e	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01774	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01777	c6 84 01 fa 00
	00 00 00	 mov	 BYTE PTR [ecx+eax+250], 0

; 615  : 				this->m_cItem[n].Give = 1;

  0177f	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  01782	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01788	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0178b	c6 84 01 fb 00
	00 00 01	 mov	 BYTE PTR [ecx+eax+251], 1
$LN8@StateSetDe:

; 616  : 			}
; 617  : 		}
; 618  : 
; 619  : 		if ( this->m_cItem[n].IsItem() != FALSE )

  01793	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  01796	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  0179c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0179f	8d 4c 01 24	 lea	 ecx, DWORD PTR [ecx+eax+36]
  017a3	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  017a8	85 c0		 test	 eax, eax
  017aa	0f 84 f1 00 00
	00		 je	 $LN4@StateSetDe

; 620  : 		{
; 621  : 			if ( this->m_cItem[n].m_State != 8 )

  017b0	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  017b3	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  017b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017bc	83 bc 01 fc 00
	00 00 08	 cmp	 DWORD PTR [ecx+eax+252], 8
  017c4	0f 84 d7 00 00
	00		 je	 $LN4@StateSetDe

; 622  : 			{
; 623  : 				if ( CurTime > this->m_cItem[n].m_Time )

  017ca	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  017cd	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  017d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017d6	8b 55 f8	 mov	 edx, DWORD PTR _CurTime$[ebp]
  017d9	3b 94 01 00 01
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+256]
  017e0	0f 86 bb 00 00
	00		 jbe	 $LN4@StateSetDe

; 624  : 				{
; 625  : 					LogAddTD(lMsg.Get(MSGGET(4, 76)), this->m_cItem[n].GetName(), this->m_cItem[n].m_Type, this->m_cItem[n].m_Level, this->m_cItem[n].m_Special[0] , this->m_cItem[n].m_Number);

  017e6	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  017e9	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  017ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017f2	8b 54 01 24	 mov	 edx, DWORD PTR [ecx+eax+36]
  017f6	52		 push	 edx
  017f7	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  017fa	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01800	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01803	0f b7 54 01 56	 movzx	 edx, WORD PTR [ecx+eax+86]
  01808	52		 push	 edx
  01809	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  0180c	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01812	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01815	0f bf 54 01 2c	 movsx	 edx, WORD PTR [ecx+eax+44]
  0181a	52		 push	 edx
  0181b	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  0181e	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01824	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01827	0f bf 54 01 2a	 movsx	 edx, WORD PTR [ecx+eax+42]
  0182c	52		 push	 edx
  0182d	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  01830	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01836	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01839	8d 4c 01 24	 lea	 ecx, DWORD PTR [ecx+eax+36]
  0183d	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  01842	50		 push	 eax
  01843	68 4c 04 00 00	 push	 1100			; 0000044cH
  01848	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0184d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01852	50		 push	 eax
  01853	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01859	83 c4 18	 add	 esp, 24			; 00000018H

; 626  : 					this->m_cItem[n].m_State = 8;

  0185c	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  0185f	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  01865	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01868	c7 84 01 fc 00
	00 00 08 00 00
	00		 mov	 DWORD PTR [ecx+eax+252], 8

; 627  : 
; 628  : 					if(this->m_cItem[n].m_Type == ITEMGET(14,64)) //season 2.5 add-on

  01873	8b 45 f4	 mov	 eax, DWORD PTR _n$230050[ebp]
  01876	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  0187c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0187f	0f bf 54 01 2a	 movsx	 edx, WORD PTR [ecx+eax+42]
  01884	81 fa 40 1c 00
	00		 cmp	 edx, 7232		; 00001c40H
  0188a	75 15		 jne	 SHORT $LN4@StateSetDe

; 629  : 					{
; 630  : 						g_IllusionTempleEvent.SetNpcStatueRegen(this->thisMapNumber);

  0188c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0188f	0f b6 88 b4 3d
	05 00		 movzx	 ecx, BYTE PTR [eax+343476]
  01896	51		 push	 ecx
  01897	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  0189c	e8 00 00 00 00	 call	 ?SetNpcStatueRegen@CIllusionTempleEvent@@QAEXE@Z ; CIllusionTempleEvent::SetNpcStatueRegen
$LN4@StateSetDe:

; 631  : 					}
; 632  : 				}
; 633  : 			}
; 634  : 		}
; 635  : 	}

  018a1	e9 38 fe ff ff	 jmp	 $LN10@StateSetDe
$LN12@StateSetDe:

; 636  : }

  018a6	5f		 pop	 edi
  018a7	5e		 pop	 esi
  018a8	5b		 pop	 ebx
  018a9	8b e5		 mov	 esp, ebp
  018ab	5d		 pop	 ebp
  018ac	c3		 ret	 0
?StateSetDestroy@MapClass@@QAEXXZ ENDP			; MapClass::StateSetDestroy
_TEXT	ENDS
PUBLIC	?SetMapDimensions@PATH@@QAEXHHPAE@Z		; PATH::SetMapDimensions
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
EXTRN	__imp__GlobalAlloc@8:PROC
EXTRN	_fclose:PROC
EXTRN	_fread:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_head$ = -9						; size = 1
_fp$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?AttrLoad@MapClass@@QAEHPAD@Z PROC			; MapClass::AttrLoad
; _this$ = ecx

; 639  : {

  018b0	55		 push	 ebp
  018b1	8b ec		 mov	 ebp, esp
  018b3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  018b6	53		 push	 ebx
  018b7	56		 push	 esi
  018b8	57		 push	 edi
  018b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 640  : 	FILE * fp;
; 641  : 	BYTE head;
; 642  : 
; 643  : 	fp = fopen(filename,"rb");

  018bc	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  018c1	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  018c4	50		 push	 eax
  018c5	e8 00 00 00 00	 call	 _fopen
  018ca	83 c4 08	 add	 esp, 8
  018cd	89 45 f8	 mov	 DWORD PTR _fp$[ebp], eax

; 644  : 
; 645  : 	if ( fp == NULL )

  018d0	83 7d f8 00	 cmp	 DWORD PTR _fp$[ebp], 0
  018d4	75 07		 jne	 SHORT $LN4@AttrLoad

; 646  : 	{
; 647  : 		return false;

  018d6	33 c0		 xor	 eax, eax
  018d8	e9 ff 00 00 00	 jmp	 $LN5@AttrLoad
$LN4@AttrLoad:

; 648  : 	}
; 649  : 	
; 650  : 	fread(&head, sizeof(head), 1, fp);

  018dd	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  018e0	50		 push	 eax
  018e1	6a 01		 push	 1
  018e3	6a 01		 push	 1
  018e5	8d 4d f7	 lea	 ecx, DWORD PTR _head$[ebp]
  018e8	51		 push	 ecx
  018e9	e8 00 00 00 00	 call	 _fread
  018ee	83 c4 10	 add	 esp, 16			; 00000010H

; 651  : 	fread(&this->m_width, sizeof(char), 1, fp);

  018f1	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  018f4	50		 push	 eax
  018f5	6a 01		 push	 1
  018f7	6a 01		 push	 1
  018f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018fc	83 c1 14	 add	 ecx, 20			; 00000014H
  018ff	51		 push	 ecx
  01900	e8 00 00 00 00	 call	 _fread
  01905	83 c4 10	 add	 esp, 16			; 00000010H

; 652  : 	fread(&this->m_height, sizeof(char), 1, fp);

  01908	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  0190b	50		 push	 eax
  0190c	6a 01		 push	 1
  0190e	6a 01		 push	 1
  01910	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01913	83 c1 18	 add	 ecx, 24			; 00000018H
  01916	51		 push	 ecx
  01917	e8 00 00 00 00	 call	 _fread
  0191c	83 c4 10	 add	 esp, 16			; 00000010H

; 653  : 
; 654  : 	if ( this->m_width > 255 || this->m_height > 255 )

  0191f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01922	81 78 14 ff 00
	00 00		 cmp	 DWORD PTR [eax+20], 255	; 000000ffH
  01929	7f 0c		 jg	 SHORT $LN2@AttrLoad
  0192b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0192e	81 78 18 ff 00
	00 00		 cmp	 DWORD PTR [eax+24], 255	; 000000ffH
  01935	7e 28		 jle	 SHORT $LN3@AttrLoad
$LN2@AttrLoad:

; 655  : 	{
; 656  : 		MsgBox(lMsg.Get( MSGGET(2, 51)));

  01937	68 33 02 00 00	 push	 563			; 00000233H
  0193c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01941	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01946	50		 push	 eax
  01947	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0194c	83 c4 04	 add	 esp, 4

; 657  : 		fclose(fp);

  0194f	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  01952	50		 push	 eax
  01953	e8 00 00 00 00	 call	 _fclose
  01958	83 c4 04	 add	 esp, 4

; 658  : 		return false;

  0195b	33 c0		 xor	 eax, eax
  0195d	eb 7d		 jmp	 SHORT $LN5@AttrLoad
$LN3@AttrLoad:

; 659  : 	}
; 660  : 
; 661  : 	if ( this->m_attrbuf != NULL )

  0195f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01962	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  01966	74 17		 je	 SHORT $LN1@AttrLoad

; 662  : 	{
; 663  : 		GlobalFree(this->m_attrbuf);

  01968	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0196b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0196e	51		 push	 ecx
  0196f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalFree@4

; 664  : 		this->m_attrbuf = NULL;

  01975	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01978	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@AttrLoad:

; 665  : 	}
; 666  : 
; 667  : 	this->m_attrbuf = (LPBYTE)GlobalAlloc(GPTR, 65536);

  0197f	68 00 00 01 00	 push	 65536			; 00010000H
  01984	6a 40		 push	 64			; 00000040H
  01986	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalAlloc@8
  0198c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0198f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 668  : 	fread(this->m_attrbuf, 256, 256, fp);

  01992	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  01995	50		 push	 eax
  01996	68 00 01 00 00	 push	 256			; 00000100H
  0199b	68 00 01 00 00	 push	 256			; 00000100H
  019a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019a3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  019a6	52		 push	 edx
  019a7	e8 00 00 00 00	 call	 _fread
  019ac	83 c4 10	 add	 esp, 16			; 00000010H

; 669  : 	fclose(fp);

  019af	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  019b2	50		 push	 eax
  019b3	e8 00 00 00 00	 call	 _fclose
  019b8	83 c4 04	 add	 esp, 4

; 670  : 	this->path->SetMapDimensions( 256, 256, (LPBYTE)this->m_attrbuf);

  019bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  019be	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  019c1	51		 push	 ecx
  019c2	68 00 01 00 00	 push	 256			; 00000100H
  019c7	68 00 01 00 00	 push	 256			; 00000100H
  019cc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  019cf	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  019d2	e8 00 00 00 00	 call	 ?SetMapDimensions@PATH@@QAEXHHPAE@Z ; PATH::SetMapDimensions

; 671  : 	return true;

  019d7	b8 01 00 00 00	 mov	 eax, 1
$LN5@AttrLoad:

; 672  : }

  019dc	5f		 pop	 edi
  019dd	5e		 pop	 esi
  019de	5b		 pop	 ebx
  019df	8b e5		 mov	 esp, ebp
  019e1	5d		 pop	 ebp
  019e2	c2 04 00	 ret	 4
?AttrLoad@MapClass@@QAEHPAD@Z ENDP			; MapClass::AttrLoad
_TEXT	ENDS
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\zzzpath.h
;	COMDAT ?SetMapDimensions@PATH@@QAEXHHPAE@Z
_TEXT	SEGMENT
$T230480 = -72						; size = 4
_this$ = -4						; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
_map$ = 16						; size = 4
?SetMapDimensions@PATH@@QAEXHHPAE@Z PROC		; PATH::SetMapDimensions, COMDAT
; _this$ = ecx

; 747  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 748  : 		this->Width = w;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _w$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 749  : 		this->Height = h;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _h$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 750  : 		this->Map = (LPBYTE)map;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 10	 mov	 ecx, DWORD PTR _map$[ebp]
  00023	89 88 3c 04 00
	00		 mov	 DWORD PTR [eax+1084], ecx

; 751  : 		this->HitMap = new BYTE [this->Width * this->Height];

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 10		 mov	 edx, DWORD PTR [eax]
  00031	0f af 51 04	 imul	 edx, DWORD PTR [ecx+4]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 b8	 mov	 DWORD PTR $T230480[ebp], eax
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 4d b8	 mov	 ecx, DWORD PTR $T230480[ebp]
  00047	89 88 40 04 00
	00		 mov	 DWORD PTR [eax+1088], ecx

; 752  : 	};

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?SetMapDimensions@PATH@@QAEXHHPAE@Z ENDP		; PATH::SetMapDimensions
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapclass.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetAttr@MapClass@@QAEEHH@Z PROC			; MapClass::GetAttr
; _this$ = ecx

; 675  : {

  019f0	55		 push	 ebp
  019f1	8b ec		 mov	 ebp, esp
  019f3	83 ec 44	 sub	 esp, 68			; 00000044H
  019f6	53		 push	 ebx
  019f7	56		 push	 esi
  019f8	57		 push	 edi
  019f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 676  : 	if ( x < 0 )

  019fc	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  01a00	7d 04		 jge	 SHORT $LN4@GetAttr

; 677  : 	{
; 678  : 		return 4;

  01a02	b0 04		 mov	 al, 4
  01a04	eb 40		 jmp	 SHORT $LN5@GetAttr
$LN4@GetAttr:

; 679  : 	}
; 680  : 
; 681  : 	if ( y < 0 )

  01a06	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  01a0a	7d 04		 jge	 SHORT $LN3@GetAttr

; 682  : 	{
; 683  : 		return 4;

  01a0c	b0 04		 mov	 al, 4
  01a0e	eb 36		 jmp	 SHORT $LN5@GetAttr
$LN3@GetAttr:

; 684  : 	}
; 685  : 
; 686  : 	if ( x > this->m_width -1 )

  01a10	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a13	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01a16	83 e9 01	 sub	 ecx, 1
  01a19	39 4d 08	 cmp	 DWORD PTR _x$[ebp], ecx
  01a1c	7e 04		 jle	 SHORT $LN2@GetAttr

; 687  : 	{
; 688  : 		return 4;

  01a1e	b0 04		 mov	 al, 4
  01a20	eb 24		 jmp	 SHORT $LN5@GetAttr
$LN2@GetAttr:

; 689  : 	}
; 690  : 
; 691  : 	if ( y > this->m_height -1 )

  01a22	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a25	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a28	83 e9 01	 sub	 ecx, 1
  01a2b	39 4d 0c	 cmp	 DWORD PTR _y$[ebp], ecx
  01a2e	7e 04		 jle	 SHORT $LN1@GetAttr

; 692  : 	{
; 693  : 		return 4;

  01a30	b0 04		 mov	 al, 4
  01a32	eb 12		 jmp	 SHORT $LN5@GetAttr
$LN1@GetAttr:

; 694  : 	}
; 695  : 
; 696  : 	return this->m_attrbuf[y*256 + x];

  01a34	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  01a37	c1 e0 08	 shl	 eax, 8
  01a3a	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  01a3d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a40	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01a43	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
$LN5@GetAttr:

; 697  : 
; 698  : }

  01a46	5f		 pop	 edi
  01a47	5e		 pop	 esi
  01a48	5b		 pop	 ebx
  01a49	8b e5		 mov	 esp, ebp
  01a4b	5d		 pop	 ebp
  01a4c	c2 08 00	 ret	 8
?GetAttr@MapClass@@QAEEHH@Z ENDP			; MapClass::GetAttr
_TEXT	ENDS
PUBLIC	?GetStandAttr@MapClass@@QAEHHH@Z		; MapClass::GetStandAttr
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_attr$ = -5						; size = 1
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetStandAttr@MapClass@@QAEHHH@Z PROC			; MapClass::GetStandAttr
; _this$ = ecx

; 701  : {

  01a50	55		 push	 ebp
  01a51	8b ec		 mov	 ebp, esp
  01a53	83 ec 48	 sub	 esp, 72			; 00000048H
  01a56	53		 push	 ebx
  01a57	56		 push	 esi
  01a58	57		 push	 edi
  01a59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 702  : 	if ( x > (this->m_width-1) )

  01a5c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a5f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01a62	83 e9 01	 sub	 ecx, 1
  01a65	39 4d 08	 cmp	 DWORD PTR _x$[ebp], ecx
  01a68	7e 04		 jle	 SHORT $LN5@GetStandAt

; 703  : 	{
; 704  : 		return FALSE;

  01a6a	33 c0		 xor	 eax, eax
  01a6c	eb 53		 jmp	 SHORT $LN6@GetStandAt
$LN5@GetStandAt:

; 705  : 	}
; 706  : 
; 707  : 	if ( y > (this->m_height-1) )

  01a6e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a71	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a74	83 e9 01	 sub	 ecx, 1
  01a77	39 4d 0c	 cmp	 DWORD PTR _y$[ebp], ecx
  01a7a	7e 04		 jle	 SHORT $LN4@GetStandAt

; 708  : 	{
; 709  : 		return FALSE;

  01a7c	33 c0		 xor	 eax, eax
  01a7e	eb 41		 jmp	 SHORT $LN6@GetStandAt
$LN4@GetStandAt:

; 710  : 	}
; 711  : 
; 712  : 	BYTE attr = this->m_attrbuf[(y * 256 + x)];

  01a80	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  01a83	c1 e0 08	 shl	 eax, 8
  01a86	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  01a89	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a8c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01a8f	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  01a92	88 45 fb	 mov	 BYTE PTR _attr$[ebp], al

; 713  : 
; 714  : 	if ( (attr&2) == 2 )

  01a95	0f b6 45 fb	 movzx	 eax, BYTE PTR _attr$[ebp]
  01a99	83 e0 02	 and	 eax, 2
  01a9c	74 04		 je	 SHORT $LN3@GetStandAt

; 715  : 	{
; 716  : 		return FALSE;

  01a9e	33 c0		 xor	 eax, eax
  01aa0	eb 1f		 jmp	 SHORT $LN6@GetStandAt
$LN3@GetStandAt:

; 717  : 	}
; 718  : 
; 719  : 	if ( (attr&4) == 4 )

  01aa2	0f b6 45 fb	 movzx	 eax, BYTE PTR _attr$[ebp]
  01aa6	83 e0 04	 and	 eax, 4
  01aa9	74 04		 je	 SHORT $LN2@GetStandAt

; 720  : 	{
; 721  : 		return FALSE;

  01aab	33 c0		 xor	 eax, eax
  01aad	eb 12		 jmp	 SHORT $LN6@GetStandAt
$LN2@GetStandAt:

; 722  : 	}
; 723  : 
; 724  : 	if ( (attr&8) == 8 )

  01aaf	0f b6 45 fb	 movzx	 eax, BYTE PTR _attr$[ebp]
  01ab3	83 e0 08	 and	 eax, 8
  01ab6	74 04		 je	 SHORT $LN1@GetStandAt

; 725  : 	{
; 726  : 		return FALSE;

  01ab8	33 c0		 xor	 eax, eax
  01aba	eb 05		 jmp	 SHORT $LN6@GetStandAt
$LN1@GetStandAt:

; 727  : 	}
; 728  : 
; 729  : 	return TRUE;

  01abc	b8 01 00 00 00	 mov	 eax, 1
$LN6@GetStandAt:

; 730  : }

  01ac1	5f		 pop	 edi
  01ac2	5e		 pop	 esi
  01ac3	5b		 pop	 ebx
  01ac4	8b e5		 mov	 esp, ebp
  01ac6	5d		 pop	 ebp
  01ac7	c2 08 00	 ret	 8
?GetStandAttr@MapClass@@QAEHHH@Z ENDP			; MapClass::GetStandAttr
_TEXT	ENDS
PUBLIC	?SearchStandAttr@MapClass@@QAEXAAF0@Z		; MapClass::SearchStandAttr
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_subx$ = -24						; size = 4
_tindex$ = -20						; size = 4
_ty$ = -16						; size = 4
_tx$ = -12						; size = 4
_scount$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SearchStandAttr@MapClass@@QAEXAAF0@Z PROC		; MapClass::SearchStandAttr
; _this$ = ecx

; 733  : {

  01ad0	55		 push	 ebp
  01ad1	8b ec		 mov	 ebp, esp
  01ad3	83 ec 58	 sub	 esp, 88			; 00000058H
  01ad6	53		 push	 ebx
  01ad7	56		 push	 esi
  01ad8	57		 push	 edi
  01ad9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 734  : 	int scount = 10;

  01adc	c7 45 f8 0a 00
	00 00		 mov	 DWORD PTR _scount$[ebp], 10 ; 0000000aH

; 735  : 	int tx;
; 736  : 	int ty;
; 737  : 	int tindex;
; 738  : 	int subx = 1;

  01ae3	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _subx$[ebp], 1

; 739  : 
; 740  : 	tx = x;

  01aea	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01aed	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  01af0	89 4d f4	 mov	 DWORD PTR _tx$[ebp], ecx

; 741  : 	ty = y;

  01af3	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  01af6	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  01af9	89 4d f0	 mov	 DWORD PTR _ty$[ebp], ecx

; 742  : 	tindex = y * 256;

  01afc	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  01aff	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  01b02	c1 e1 08	 shl	 ecx, 8
  01b05	89 4d ec	 mov	 DWORD PTR _tindex$[ebp], ecx

; 743  : 
; 744  : 	if ( (tx-10) < 0 )

  01b08	8b 45 f4	 mov	 eax, DWORD PTR _tx$[ebp]
  01b0b	83 e8 0a	 sub	 eax, 10			; 0000000aH
  01b0e	79 07		 jns	 SHORT $LN5@SearchStan

; 745  : 	{
; 746  : 		subx = 1;

  01b10	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _subx$[ebp], 1
$LN5@SearchStan:

; 747  : 	}
; 748  : 
; 749  : 	if ( (tx+10) > 255 )

  01b17	8b 45 f4	 mov	 eax, DWORD PTR _tx$[ebp]
  01b1a	83 c0 0a	 add	 eax, 10			; 0000000aH
  01b1d	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  01b22	7e 07		 jle	 SHORT $LN3@SearchStan

; 750  : 	{
; 751  : 		subx = -1;

  01b24	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _subx$[ebp], -1
$LN3@SearchStan:

; 752  : 	}
; 753  : 
; 754  : 	while ( scount-- != 0 )

  01b2b	8b 45 f8	 mov	 eax, DWORD PTR _scount$[ebp]
  01b2e	8b 4d f8	 mov	 ecx, DWORD PTR _scount$[ebp]
  01b31	83 e9 01	 sub	 ecx, 1
  01b34	89 4d f8	 mov	 DWORD PTR _scount$[ebp], ecx
  01b37	85 c0		 test	 eax, eax
  01b39	74 60		 je	 SHORT $LN6@SearchStan

; 755  : 	{
; 756  : 		if ( ((this->m_attrbuf[tindex + tx]&4)!= 4) && ((this->m_attrbuf[tindex + tx]&2)!= 2) && ((this->m_attrbuf[tindex + tx]&8)!= 8) )

  01b3b	8b 45 ec	 mov	 eax, DWORD PTR _tindex$[ebp]
  01b3e	03 45 f4	 add	 eax, DWORD PTR _tx$[ebp]
  01b41	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b44	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01b47	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  01b4b	83 e0 04	 and	 eax, 4
  01b4e	75 40		 jne	 SHORT $LN1@SearchStan
  01b50	8b 45 ec	 mov	 eax, DWORD PTR _tindex$[ebp]
  01b53	03 45 f4	 add	 eax, DWORD PTR _tx$[ebp]
  01b56	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b59	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01b5c	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  01b60	83 e0 02	 and	 eax, 2
  01b63	75 2b		 jne	 SHORT $LN1@SearchStan
  01b65	8b 45 ec	 mov	 eax, DWORD PTR _tindex$[ebp]
  01b68	03 45 f4	 add	 eax, DWORD PTR _tx$[ebp]
  01b6b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b6e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01b71	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  01b75	83 e0 08	 and	 eax, 8
  01b78	75 16		 jne	 SHORT $LN1@SearchStan

; 757  : 		{
; 758  : 			x = tx;

  01b7a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01b7d	66 8b 4d f4	 mov	 cx, WORD PTR _tx$[ebp]
  01b81	66 89 08	 mov	 WORD PTR [eax], cx

; 759  : 			y = ty;

  01b84	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  01b87	66 8b 4d f0	 mov	 cx, WORD PTR _ty$[ebp]
  01b8b	66 89 08	 mov	 WORD PTR [eax], cx

; 760  : 			break;

  01b8e	eb 0b		 jmp	 SHORT $LN6@SearchStan
$LN1@SearchStan:

; 761  : 		}
; 762  : 
; 763  : 		tx += subx;

  01b90	8b 45 f4	 mov	 eax, DWORD PTR _tx$[ebp]
  01b93	03 45 e8	 add	 eax, DWORD PTR _subx$[ebp]
  01b96	89 45 f4	 mov	 DWORD PTR _tx$[ebp], eax

; 764  : 	}

  01b99	eb 90		 jmp	 SHORT $LN3@SearchStan
$LN6@SearchStan:

; 765  : }

  01b9b	5f		 pop	 edi
  01b9c	5e		 pop	 esi
  01b9d	5b		 pop	 ebx
  01b9e	8b e5		 mov	 esp, ebp
  01ba0	5d		 pop	 ebp
  01ba1	c2 08 00	 ret	 8
?SearchStandAttr@MapClass@@QAEXAAF0@Z ENDP		; MapClass::SearchStandAttr
_TEXT	ENDS
PUBLIC	?SetStandAttr@MapClass@@QAEXHH@Z		; MapClass::SetStandAttr
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetStandAttr@MapClass@@QAEXHH@Z PROC			; MapClass::SetStandAttr
; _this$ = ecx

; 768  : {

  01bb0	55		 push	 ebp
  01bb1	8b ec		 mov	 ebp, esp
  01bb3	83 ec 44	 sub	 esp, 68			; 00000044H
  01bb6	53		 push	 ebx
  01bb7	56		 push	 esi
  01bb8	57		 push	 edi
  01bb9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 769  : 	if ( x > this->m_width-1 )

  01bbc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01bbf	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01bc2	83 e9 01	 sub	 ecx, 1
  01bc5	39 4d 08	 cmp	 DWORD PTR _x$[ebp], ecx
  01bc8	7e 02		 jle	 SHORT $LN2@SetStandAt

; 770  : 	{
; 771  : 		return;

  01bca	eb 38		 jmp	 SHORT $LN3@SetStandAt
$LN2@SetStandAt:

; 772  : 	}
; 773  : 
; 774  : 	if ( y > this->m_height-1 )

  01bcc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01bcf	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01bd2	83 e9 01	 sub	 ecx, 1
  01bd5	39 4d 0c	 cmp	 DWORD PTR _y$[ebp], ecx
  01bd8	7e 02		 jle	 SHORT $LN1@SetStandAt

; 775  : 	{
; 776  : 		return;

  01bda	eb 28		 jmp	 SHORT $LN3@SetStandAt
$LN1@SetStandAt:

; 777  : 	}
; 778  : 
; 779  : 	this->m_attrbuf[y*256+x] |= 2;

  01bdc	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  01bdf	c1 e0 08	 shl	 eax, 8
  01be2	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  01be5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01be8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01beb	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  01bef	83 c8 02	 or	 eax, 2
  01bf2	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  01bf5	c1 e1 08	 shl	 ecx, 8
  01bf8	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  01bfb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01bfe	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  01c01	88 04 11	 mov	 BYTE PTR [ecx+edx], al
$LN3@SetStandAt:

; 780  : }

  01c04	5f		 pop	 edi
  01c05	5e		 pop	 esi
  01c06	5b		 pop	 ebx
  01c07	8b e5		 mov	 esp, ebp
  01c09	5d		 pop	 ebp
  01c0a	c2 08 00	 ret	 8
?SetStandAttr@MapClass@@QAEXHH@Z ENDP			; MapClass::SetStandAttr
_TEXT	ENDS
PUBLIC	?ClearStandAttr@MapClass@@QAEXHH@Z		; MapClass::ClearStandAttr
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?ClearStandAttr@MapClass@@QAEXHH@Z PROC			; MapClass::ClearStandAttr
; _this$ = ecx

; 783  : {

  01c10	55		 push	 ebp
  01c11	8b ec		 mov	 ebp, esp
  01c13	83 ec 48	 sub	 esp, 72			; 00000048H
  01c16	53		 push	 ebx
  01c17	56		 push	 esi
  01c18	57		 push	 edi
  01c19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 784  : 	if ( ((x<0)?FALSE:(x>(this->m_width-1))?FALSE:TRUE) == FALSE )

  01c1c	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  01c20	7d 09		 jge	 SHORT $LN6@ClearStand
  01c22	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  01c29	eb 14		 jmp	 SHORT $LN7@ClearStand
$LN6@ClearStand:
  01c2b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c2e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01c31	83 e9 01	 sub	 ecx, 1
  01c34	33 d2		 xor	 edx, edx
  01c36	39 4d 08	 cmp	 DWORD PTR _x$[ebp], ecx
  01c39	0f 9e c2	 setle	 dl
  01c3c	89 55 b8	 mov	 DWORD PTR tv69[ebp], edx
$LN7@ClearStand:
  01c3f	83 7d b8 00	 cmp	 DWORD PTR tv69[ebp], 0
  01c43	75 02		 jne	 SHORT $LN3@ClearStand

; 785  : 	{
; 786  : 		return;

  01c45	eb 6d		 jmp	 SHORT $LN4@ClearStand
$LN3@ClearStand:

; 787  : 	}
; 788  : 
; 789  : 	if ( ((y<0)?FALSE:(y>(this->m_height-1))?FALSE:TRUE) == FALSE )

  01c47	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  01c4b	7d 09		 jge	 SHORT $LN8@ClearStand
  01c4d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
  01c54	eb 14		 jmp	 SHORT $LN9@ClearStand
$LN8@ClearStand:
  01c56	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c59	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01c5c	83 e9 01	 sub	 ecx, 1
  01c5f	33 d2		 xor	 edx, edx
  01c61	39 4d 0c	 cmp	 DWORD PTR _y$[ebp], ecx
  01c64	0f 9e c2	 setle	 dl
  01c67	89 55 b8	 mov	 DWORD PTR tv76[ebp], edx
$LN9@ClearStand:
  01c6a	83 7d b8 00	 cmp	 DWORD PTR tv76[ebp], 0
  01c6e	75 02		 jne	 SHORT $LN2@ClearStand

; 790  : 	{
; 791  : 		return;

  01c70	eb 42		 jmp	 SHORT $LN4@ClearStand
$LN2@ClearStand:

; 792  : 	}
; 793  : 
; 794  : 	if ( (this->m_attrbuf[y*256+x]&2)==2 )

  01c72	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  01c75	c1 e0 08	 shl	 eax, 8
  01c78	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  01c7b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c7e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01c81	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  01c85	83 e0 02	 and	 eax, 2
  01c88	74 2a		 je	 SHORT $LN4@ClearStand

; 795  : 	{
; 796  : 		this->m_attrbuf[y*256+x] &= 0xFD;

  01c8a	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  01c8d	c1 e0 08	 shl	 eax, 8
  01c90	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  01c93	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c96	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01c99	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  01c9d	25 fd 00 00 00	 and	 eax, 253		; 000000fdH
  01ca2	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  01ca5	c1 e1 08	 shl	 ecx, 8
  01ca8	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  01cab	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01cae	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  01cb1	88 04 11	 mov	 BYTE PTR [ecx+edx], al
$LN4@ClearStand:

; 797  : 	}
; 798  : }

  01cb4	5f		 pop	 edi
  01cb5	5e		 pop	 esi
  01cb6	5b		 pop	 ebx
  01cb7	8b e5		 mov	 esp, ebp
  01cb9	5d		 pop	 ebp
  01cba	c2 08 00	 ret	 8
?ClearStandAttr@MapClass@@QAEXHH@Z ENDP			; MapClass::ClearStandAttr
_TEXT	ENDS
PUBLIC	?GetPathY@PATH@@QAEPAEXZ			; PATH::GetPathY
PUBLIC	?GetPathX@PATH@@QAEPAEXZ			; PATH::GetPathX
PUBLIC	?GetPath@PATH@@QAEHXZ				; PATH::GetPath
PUBLIC	?FindPath@PATH@@QAE_NHHHH_N@Z			; PATH::FindPath
PUBLIC	?PathFinding2@MapClass@@QAE_NHHHHPAUPATH_t@@@Z	; MapClass::PathFinding2
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$230143 = -24						; size = 4
_py$230142 = -20					; size = 4
_px$230141 = -16					; size = 4
_path$230139 = -12					; size = 4
_Success$ = -5						; size = 1
_this$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
_a$ = 24						; size = 4
?PathFinding2@MapClass@@QAE_NHHHHPAUPATH_t@@@Z PROC	; MapClass::PathFinding2
; _this$ = ecx

; 801  : {

  01cc0	55		 push	 ebp
  01cc1	8b ec		 mov	 ebp, esp
  01cc3	83 ec 58	 sub	 esp, 88			; 00000058H
  01cc6	53		 push	 ebx
  01cc7	56		 push	 esi
  01cc8	57		 push	 edi
  01cc9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 	bool Success = this->path->FindPath(sx, sy, tx, ty, true);

  01ccc	6a 01		 push	 1
  01cce	8b 45 14	 mov	 eax, DWORD PTR _ty$[ebp]
  01cd1	50		 push	 eax
  01cd2	8b 4d 10	 mov	 ecx, DWORD PTR _tx$[ebp]
  01cd5	51		 push	 ecx
  01cd6	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  01cd9	52		 push	 edx
  01cda	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  01cdd	50		 push	 eax
  01cde	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ce1	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  01ce4	e8 00 00 00 00	 call	 ?FindPath@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath
  01ce9	88 45 fb	 mov	 BYTE PTR _Success$[ebp], al

; 803  : 
; 804  : 	if ( Success == false )

  01cec	0f b6 45 fb	 movzx	 eax, BYTE PTR _Success$[ebp]
  01cf0	85 c0		 test	 eax, eax
  01cf2	75 20		 jne	 SHORT $LN6@PathFindin

; 805  : 	{
; 806  : 		Success = this->path->FindPath(sx, sy, tx, ty, false);

  01cf4	6a 00		 push	 0
  01cf6	8b 45 14	 mov	 eax, DWORD PTR _ty$[ebp]
  01cf9	50		 push	 eax
  01cfa	8b 4d 10	 mov	 ecx, DWORD PTR _tx$[ebp]
  01cfd	51		 push	 ecx
  01cfe	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  01d01	52		 push	 edx
  01d02	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  01d05	50		 push	 eax
  01d06	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d09	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  01d0c	e8 00 00 00 00	 call	 ?FindPath@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath
  01d11	88 45 fb	 mov	 BYTE PTR _Success$[ebp], al
$LN6@PathFindin:

; 807  : 	}
; 808  : 
; 809  : 	if ( Success != false )

  01d14	0f b6 45 fb	 movzx	 eax, BYTE PTR _Success$[ebp]
  01d18	85 c0		 test	 eax, eax
  01d1a	0f 84 8a 00 00
	00		 je	 $LN5@PathFindin

; 810  : 	{
; 811  : 		int path = this->path->GetPath();

  01d20	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d23	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01d26	e8 00 00 00 00	 call	 ?GetPath@PATH@@QAEHXZ	; PATH::GetPath
  01d2b	89 45 f4	 mov	 DWORD PTR _path$230139[ebp], eax

; 812  : 
; 813  : 		if ( path > 1 )

  01d2e	83 7d f4 01	 cmp	 DWORD PTR _path$230139[ebp], 1
  01d32	7e 76		 jle	 SHORT $LN5@PathFindin

; 814  : 		{
; 815  : 			a->PathNum = path;

  01d34	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01d37	8b 4d f4	 mov	 ecx, DWORD PTR _path$230139[ebp]
  01d3a	89 08		 mov	 DWORD PTR [eax], ecx

; 816  : 			BYTE * px = this->path->GetPathX();

  01d3c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d3f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01d42	e8 00 00 00 00	 call	 ?GetPathX@PATH@@QAEPAEXZ ; PATH::GetPathX
  01d47	89 45 f0	 mov	 DWORD PTR _px$230141[ebp], eax

; 817  : 			BYTE * py = this->path->GetPathY();

  01d4a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d4d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01d50	e8 00 00 00 00	 call	 ?GetPathY@PATH@@QAEPAEXZ ; PATH::GetPathY
  01d55	89 45 ec	 mov	 DWORD PTR _py$230142[ebp], eax

; 818  : 
; 819  : 			for (int n=0;n<a->PathNum;n++)

  01d58	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _n$230143[ebp], 0
  01d5f	eb 09		 jmp	 SHORT $LN3@PathFindin
$LN2@PathFindin:
  01d61	8b 45 e8	 mov	 eax, DWORD PTR _n$230143[ebp]
  01d64	83 c0 01	 add	 eax, 1
  01d67	89 45 e8	 mov	 DWORD PTR _n$230143[ebp], eax
$LN3@PathFindin:
  01d6a	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01d6d	8b 4d e8	 mov	 ecx, DWORD PTR _n$230143[ebp]
  01d70	3b 08		 cmp	 ecx, DWORD PTR [eax]
  01d72	7d 28		 jge	 SHORT $LN1@PathFindin

; 820  : 			{
; 821  : 				a->PathX[n] = px[n];

  01d74	8b 45 f0	 mov	 eax, DWORD PTR _px$230141[ebp]
  01d77	03 45 e8	 add	 eax, DWORD PTR _n$230143[ebp]
  01d7a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01d7d	8b 55 e8	 mov	 edx, DWORD PTR _n$230143[ebp]
  01d80	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01d83	89 4c 90 04	 mov	 DWORD PTR [eax+edx*4+4], ecx

; 822  : 				a->PathY[n] = py[n];

  01d87	8b 45 ec	 mov	 eax, DWORD PTR _py$230142[ebp]
  01d8a	03 45 e8	 add	 eax, DWORD PTR _n$230143[ebp]
  01d8d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01d90	8b 55 e8	 mov	 edx, DWORD PTR _n$230143[ebp]
  01d93	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01d96	89 4c 90 40	 mov	 DWORD PTR [eax+edx*4+64], ecx

; 823  : 			}

  01d9a	eb c5		 jmp	 SHORT $LN2@PathFindin
$LN1@PathFindin:

; 824  : 
; 825  : 			a->CurrentPath = 0;

  01d9c	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01d9f	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0

; 826  : 			return 1;

  01da6	b0 01		 mov	 al, 1
  01da8	eb 02		 jmp	 SHORT $LN7@PathFindin
$LN5@PathFindin:

; 827  : 		}
; 828  : 
; 829  : 	}
; 830  : 
; 831  : 	return false;

  01daa	32 c0		 xor	 al, al
$LN7@PathFindin:

; 832  : }

  01dac	5f		 pop	 edi
  01dad	5e		 pop	 esi
  01dae	5b		 pop	 ebx
  01daf	8b e5		 mov	 esp, ebp
  01db1	5d		 pop	 ebp
  01db2	c2 14 00	 ret	 20			; 00000014H
?PathFinding2@MapClass@@QAE_NHHHHPAUPATH_t@@@Z ENDP	; MapClass::PathFinding2
_TEXT	ENDS
PUBLIC	?FindNextDir@PATH@@AAEHHHHHH_N0@Z		; PATH::FindNextDir
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\zzzpath.h
;	COMDAT ?FindPath@PATH@@QAE_NHHHH_N@Z
_TEXT	SEGMENT
_First$ = -13						; size = 1
_NumFails$ = -12					; size = 4
_WhichDir$ = -8						; size = 4
_this$ = -4						; size = 4
_startx$ = 8						; size = 4
_starty$ = 12						; size = 4
_endx$ = 16						; size = 4
_endy$ = 20						; size = 4
_ErrorCheck$ = 24					; size = 1
?FindPath@PATH@@QAE_NHHHH_N@Z PROC			; PATH::FindPath, COMDAT
; _this$ = ecx

; 542  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 543  : 		this->NumPath = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 544  : 
; 545  : 		int WhichDir = 0;

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _WhichDir$[ebp], 0

; 546  : 		int NumFails = 0;

  0001d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _NumFails$[ebp], 0

; 547  : 		bool First;
; 548  : 
; 549  : 		
; 550  : 		memset(this->HitMap, 0, this->Width * this->Height);

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	0f af 51 04	 imul	 edx, DWORD PTR [ecx+4]
  00030	52		 push	 edx
  00031	6a 00		 push	 0
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 551  : 		First = true;

  00045	c6 45 f3 01	 mov	 BYTE PTR _First$[ebp], 1
$LN11@FindPath:

; 552  : 
; 553  : 		while ( (startx != endx) || (starty != endy) )

  00049	8b 45 08	 mov	 eax, DWORD PTR _startx$[ebp]
  0004c	3b 45 10	 cmp	 eax, DWORD PTR _endx$[ebp]
  0004f	75 0c		 jne	 SHORT $LN9@FindPath
  00051	8b 45 0c	 mov	 eax, DWORD PTR _starty$[ebp]
  00054	3b 45 14	 cmp	 eax, DWORD PTR _endy$[ebp]
  00057	0f 84 09 01 00
	00		 je	 $LN10@FindPath
$LN9@FindPath:

; 554  : 		{
; 555  : 			WhichDir = this->FindNextDir( startx, starty, endx, endy, WhichDir, First, ErrorCheck);

  0005d	0f b6 45 18	 movzx	 eax, BYTE PTR _ErrorCheck$[ebp]
  00061	50		 push	 eax
  00062	0f b6 4d f3	 movzx	 ecx, BYTE PTR _First$[ebp]
  00066	51		 push	 ecx
  00067	8b 55 f8	 mov	 edx, DWORD PTR _WhichDir$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 14	 mov	 eax, DWORD PTR _endy$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _endx$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  00076	52		 push	 edx
  00077	8b 45 08	 mov	 eax, DWORD PTR _startx$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?FindNextDir@PATH@@AAEHHHHHH_N0@Z ; PATH::FindNextDir
  00083	89 45 f8	 mov	 DWORD PTR _WhichDir$[ebp], eax

; 556  : 			First = 0;

  00086	c6 45 f3 00	 mov	 BYTE PTR _First$[ebp], 0

; 557  : 			
; 558  : 			if ( WhichDir >= 0 )

  0008a	83 7d f8 00	 cmp	 DWORD PTR _WhichDir$[ebp], 0
  0008e	7c 6e		 jl	 SHORT $LN8@FindPath

; 559  : 			{
; 560  : 				this->PathX[this->NumPath] = startx;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00096	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00099	8a 45 08	 mov	 al, BYTE PTR _startx$[ebp]
  0009c	88 44 0a 0c	 mov	 BYTE PTR [edx+ecx+12], al

; 561  : 				this->PathY[this->NumPath] = starty;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	8a 45 0c	 mov	 al, BYTE PTR _starty$[ebp]
  000ac	88 84 0a 00 02
	00 00		 mov	 BYTE PTR [edx+ecx+512], al

; 562  : 				startx += this->Dir[WhichDir*2];

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  000b6	d1 e0		 shl	 eax, 1
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	8b 55 08	 mov	 edx, DWORD PTR _startx$[ebp]
  000be	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  000c5	89 55 08	 mov	 DWORD PTR _startx$[ebp], edx

; 563  : 				starty += this->Dir[WhichDir*2+1];

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  000cb	d1 e0		 shl	 eax, 1
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  000d3	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  000da	89 55 0c	 mov	 DWORD PTR _starty$[ebp], edx

; 564  : 				this->NumPath++;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e3	83 c1 01	 add	 ecx, 1
  000e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 565  : 
; 566  : 				if ( this->NumPath >= 15 )

  000ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	83 78 08 0f	 cmp	 DWORD PTR [eax+8], 15	; 0000000fH
  000f3	7c 07		 jl	 SHORT $LN7@FindPath

; 567  : 				{
; 568  : 					return false;

  000f5	32 c0		 xor	 al, al
  000f7	e9 ab 00 00 00	 jmp	 $LN12@FindPath
$LN7@FindPath:

; 569  : 				}
; 570  : 			}

  000fc	eb 63		 jmp	 SHORT $LN6@FindPath
$LN8@FindPath:

; 571  : 			else if ( ErrorCheck != false )

  000fe	0f b6 45 18	 movzx	 eax, BYTE PTR _ErrorCheck$[ebp]
  00102	85 c0		 test	 eax, eax
  00104	74 59		 je	 SHORT $LN5@FindPath

; 572  : 			{
; 573  : 				this->NumPath--;

  00106	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010c	83 e9 01	 sub	 ecx, 1
  0010f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00112	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 574  : 
; 575  : 				if ( this->NumPath < 0 )

  00115	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00118	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0011c	7d 07		 jge	 SHORT $LN4@FindPath

; 576  : 				{
; 577  : 					return false;

  0011e	32 c0		 xor	 al, al
  00120	e9 82 00 00 00	 jmp	 $LN12@FindPath
$LN4@FindPath:

; 578  : 				}
; 579  : 
; 580  : 				startx = this->PathX[this->NumPath];

  00125	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00128	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0012b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0012e	0f b6 44 0a 0c	 movzx	 eax, BYTE PTR [edx+ecx+12]
  00133	89 45 08	 mov	 DWORD PTR _startx$[ebp], eax

; 581  : 				starty = this->PathY[this->NumPath];

  00136	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00139	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0013c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013f	0f b6 84 0a 00
	02 00 00	 movzx	 eax, BYTE PTR [edx+ecx+512]
  00147	89 45 0c	 mov	 DWORD PTR _starty$[ebp], eax

; 582  : 				NumFails++;

  0014a	8b 45 f4	 mov	 eax, DWORD PTR _NumFails$[ebp]
  0014d	83 c0 01	 add	 eax, 1
  00150	89 45 f4	 mov	 DWORD PTR _NumFails$[ebp], eax

; 583  : 
; 584  : 				if ( NumFails >= 10 )

  00153	83 7d f4 0a	 cmp	 DWORD PTR _NumFails$[ebp], 10 ; 0000000aH
  00157	7c 04		 jl	 SHORT $LN3@FindPath

; 585  : 				{
; 586  : 					return false;

  00159	32 c0		 xor	 al, al
  0015b	eb 4a		 jmp	 SHORT $LN12@FindPath
$LN3@FindPath:

; 587  : 				}
; 588  : 			}
; 589  : 			else

  0015d	eb 02		 jmp	 SHORT $LN6@FindPath
$LN5@FindPath:

; 590  : 			{
; 591  : 				break;

  0015f	eb 05		 jmp	 SHORT $LN10@FindPath
$LN6@FindPath:

; 592  : 			}
; 593  : 			
; 594  : 		}

  00161	e9 e3 fe ff ff	 jmp	 $LN11@FindPath
$LN10@FindPath:

; 595  : 
; 596  : 		this->PathX[this->NumPath] = startx;

  00166	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00169	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0016c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0016f	8a 45 08	 mov	 al, BYTE PTR _startx$[ebp]
  00172	88 44 0a 0c	 mov	 BYTE PTR [edx+ecx+12], al

; 597  : 		this->PathY[this->NumPath] = starty;

  00176	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00179	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0017c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0017f	8a 45 0c	 mov	 al, BYTE PTR _starty$[ebp]
  00182	88 84 0a 00 02
	00 00		 mov	 BYTE PTR [edx+ecx+512], al

; 598  : 		this->NumPath++;

  00189	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0018f	83 c1 01	 add	 ecx, 1
  00192	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00195	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 599  : 
; 600  : 		if ( this->NumPath >= 15 )

  00198	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019b	83 78 08 0f	 cmp	 DWORD PTR [eax+8], 15	; 0000000fH
  0019f	7c 04		 jl	 SHORT $LN1@FindPath

; 601  : 		{
; 602  : 			return false;

  001a1	32 c0		 xor	 al, al
  001a3	eb 02		 jmp	 SHORT $LN12@FindPath
$LN1@FindPath:

; 603  : 		}
; 604  : 
; 605  : 		return true;

  001a5	b0 01		 mov	 al, 1
$LN12@FindPath:

; 606  : 	};	// line : 302

  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi
  001a9	5b		 pop	 ebx
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 14 00	 ret	 20			; 00000014H
?FindPath@PATH@@QAE_NHHHH_N@Z ENDP			; PATH::FindPath
_TEXT	ENDS
PUBLIC	?VerifyThatOnPath@PATH@@AAEHHH@Z		; PATH::VerifyThatOnPath
PUBLIC	?CanWeMoveForward@PATH@@AAEHHH@Z		; PATH::CanWeMoveForward
PUBLIC	?IsThisSpotOK@PATH@@AAEHHH@Z			; PATH::IsThisSpotOK
PUBLIC	?GetDist@PATH@@AAEHHHHH@Z			; PATH::GetDist
; Function compile flags: /Odtp /ZI
;	COMDAT ?FindNextDir@PATH@@AAEHHHHHH_N0@Z
_TEXT	SEGMENT
_path$205228 = -80					; size = 4
_dir2$205226 = -76					; size = 4
_path$205224 = -72					; size = 4
_dir$205222 = -68					; size = 4
_path$205219 = -64					; size = 4
_LastDist$ = -60					; size = 4
_dist$205212 = -56					; size = 4
_endy$205211 = -52					; size = 4
_endx$205210 = -48					; size = 4
_dist$205203 = -44					; size = 4
_endy$205202 = -40					; size = 4
_endx$205201 = -36					; size = 4
_dist$205194 = -32					; size = 4
_endy$205193 = -28					; size = 4
_endx$205192 = -24					; size = 4
_i$ = -20						; size = 4
_WhichDir$ = -16					; size = 4
_ldir$ = -12						; size = 4
_MinDist$ = -8						; size = 4
_this$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_dirstart$ = 24						; size = 4
_First$ = 28						; size = 1
_ErrorCheck$ = 32					; size = 1
?FindNextDir@PATH@@AAEHHHHHH_N0@Z PROC			; PATH::FindNextDir, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 137  : 		int MinDist = 10000000;

  0000f	c7 45 f8 80 96
	98 00		 mov	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H

; 138  : 		long ldir;
; 139  : 		int WhichDir = 0;

  00016	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _WhichDir$[ebp], 0

; 140  : 		int i;
; 141  : 
; 142  : 		if ( First != 0 )

  0001d	0f b6 45 1c	 movzx	 eax, BYTE PTR _First$[ebp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 a5 00 00
	00		 je	 $LN27@FindNextDi

; 143  : 		{
; 144  : 			for ( i = 0 ; i<8 ; i++ )

  00029	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00030	eb 09		 jmp	 SHORT $LN26@FindNextDi
$LN25@FindNextDi:
  00032	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00035	83 c0 01	 add	 eax, 1
  00038	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN26@FindNextDi:
  0003b	83 7d ec 08	 cmp	 DWORD PTR _i$[ebp], 8
  0003f	0f 8d 84 00 00
	00		 jge	 $LN24@FindNextDi

; 145  : 			{
; 146  : 				ldir = i % 8;

  00045	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00048	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0004d	79 05		 jns	 SHORT $LN30@FindNextDi
  0004f	48		 dec	 eax
  00050	83 c8 f8	 or	 eax, -8			; fffffff8H
  00053	40		 inc	 eax
$LN30@FindNextDi:
  00054	89 45 f4	 mov	 DWORD PTR _ldir$[ebp], eax

; 147  : 				int endx = sx + this->Dir[ldir*2];

  00057	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0005a	d1 e0		 shl	 eax, 1
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  00062	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00069	89 55 e8	 mov	 DWORD PTR _endx$205192[ebp], edx

; 148  : 				int endy = sy + this->Dir[ldir*2+1];

  0006c	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0006f	d1 e0		 shl	 eax, 1
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00077	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  0007e	89 55 e4	 mov	 DWORD PTR _endy$205193[ebp], edx

; 149  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00081	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  00084	50		 push	 eax
  00085	8b 4d 10	 mov	 ecx, DWORD PTR _dx$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 e4	 mov	 edx, DWORD PTR _endy$205193[ebp]
  0008c	52		 push	 edx
  0008d	8b 45 e8	 mov	 eax, DWORD PTR _endx$205192[ebp]
  00090	50		 push	 eax
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  00099	89 45 e0	 mov	 DWORD PTR _dist$205194[ebp], eax

; 150  : 
; 151  : 				if ( MinDist > dist )

  0009c	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  0009f	3b 45 e0	 cmp	 eax, DWORD PTR _dist$205194[ebp]
  000a2	7e 20		 jle	 SHORT $LN23@FindNextDi

; 152  : 				{
; 153  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  000a4	8b 45 e4	 mov	 eax, DWORD PTR _endy$205193[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d e8	 mov	 ecx, DWORD PTR _endx$205192[ebp]
  000ab	51		 push	 ecx
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?IsThisSpotOK@PATH@@AAEHHH@Z ; PATH::IsThisSpotOK
  000b4	85 c0		 test	 eax, eax
  000b6	74 0c		 je	 SHORT $LN23@FindNextDi

; 154  : 					{
; 155  : 						MinDist = dist;

  000b8	8b 45 e0	 mov	 eax, DWORD PTR _dist$205194[ebp]
  000bb	89 45 f8	 mov	 DWORD PTR _MinDist$[ebp], eax

; 156  : 						WhichDir = ldir;

  000be	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  000c1	89 45 f0	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN23@FindNextDi:

; 157  : 					}
; 158  : 				}
; 159  : 			}

  000c4	e9 69 ff ff ff	 jmp	 $LN25@FindNextDi
$LN24@FindNextDi:

; 160  : 		}
; 161  : 		else

  000c9	e9 5b 01 00 00	 jmp	 $LN21@FindNextDi
$LN27@FindNextDi:

; 162  : 		{
; 163  : 			for ( i = dirstart+7 ; i <= dirstart+9 ; i++ )

  000ce	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  000d1	83 c0 07	 add	 eax, 7
  000d4	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  000d7	eb 09		 jmp	 SHORT $LN20@FindNextDi
$LN19@FindNextDi:
  000d9	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  000dc	83 c0 01	 add	 eax, 1
  000df	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN20@FindNextDi:
  000e2	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  000e5	83 c0 09	 add	 eax, 9
  000e8	39 45 ec	 cmp	 DWORD PTR _i$[ebp], eax
  000eb	0f 8f 84 00 00
	00		 jg	 $LN18@FindNextDi

; 164  : 			{
; 165  : 				ldir = i % 8;

  000f1	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  000f4	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  000f9	79 05		 jns	 SHORT $LN31@FindNextDi
  000fb	48		 dec	 eax
  000fc	83 c8 f8	 or	 eax, -8			; fffffff8H
  000ff	40		 inc	 eax
$LN31@FindNextDi:
  00100	89 45 f4	 mov	 DWORD PTR _ldir$[ebp], eax

; 166  : 				int endx = sx + this->Dir[ldir*2];

  00103	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  00106	d1 e0		 shl	 eax, 1
  00108	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  0010e	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00115	89 55 dc	 mov	 DWORD PTR _endx$205201[ebp], edx

; 167  : 				int endy = sy + this->Dir[ldir*2+1];

  00118	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0011b	d1 e0		 shl	 eax, 1
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00123	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  0012a	89 55 d8	 mov	 DWORD PTR _endy$205202[ebp], edx

; 168  : 				int dist = this->GetDist(endx, endy, dx, dy);

  0012d	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  00130	50		 push	 eax
  00131	8b 4d 10	 mov	 ecx, DWORD PTR _dx$[ebp]
  00134	51		 push	 ecx
  00135	8b 55 d8	 mov	 edx, DWORD PTR _endy$205202[ebp]
  00138	52		 push	 edx
  00139	8b 45 dc	 mov	 eax, DWORD PTR _endx$205201[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  00145	89 45 d4	 mov	 DWORD PTR _dist$205203[ebp], eax

; 169  : 
; 170  : 				if ( MinDist > dist )

  00148	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  0014b	3b 45 d4	 cmp	 eax, DWORD PTR _dist$205203[ebp]
  0014e	7e 20		 jle	 SHORT $LN17@FindNextDi

; 171  : 				{
; 172  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00150	8b 45 d8	 mov	 eax, DWORD PTR _endy$205202[ebp]
  00153	50		 push	 eax
  00154	8b 4d dc	 mov	 ecx, DWORD PTR _endx$205201[ebp]
  00157	51		 push	 ecx
  00158	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015b	e8 00 00 00 00	 call	 ?IsThisSpotOK@PATH@@AAEHHH@Z ; PATH::IsThisSpotOK
  00160	85 c0		 test	 eax, eax
  00162	74 0c		 je	 SHORT $LN17@FindNextDi

; 173  : 					{
; 174  : 						MinDist = dist;

  00164	8b 45 d4	 mov	 eax, DWORD PTR _dist$205203[ebp]
  00167	89 45 f8	 mov	 DWORD PTR _MinDist$[ebp], eax

; 175  : 						WhichDir = ldir;

  0016a	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0016d	89 45 f0	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN17@FindNextDi:

; 176  : 					}
; 177  : 				}
; 178  : 			}

  00170	e9 64 ff ff ff	 jmp	 $LN19@FindNextDi
$LN18@FindNextDi:

; 179  : 
; 180  : 			if ( MinDist == 10000000 )

  00175	81 7d f8 80 96
	98 00		 cmp	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H
  0017c	0f 85 a7 00 00
	00		 jne	 $LN21@FindNextDi

; 181  : 			{
; 182  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  00182	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  00185	83 c0 02	 add	 eax, 2
  00188	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  0018b	eb 09		 jmp	 SHORT $LN14@FindNextDi
$LN13@FindNextDi:
  0018d	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00190	83 c0 01	 add	 eax, 1
  00193	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN14@FindNextDi:
  00196	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  00199	83 c0 06	 add	 eax, 6
  0019c	39 45 ec	 cmp	 DWORD PTR _i$[ebp], eax
  0019f	0f 8f 84 00 00
	00		 jg	 $LN21@FindNextDi

; 183  : 				{
; 184  : 					ldir = i % 8;

  001a5	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  001a8	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  001ad	79 05		 jns	 SHORT $LN32@FindNextDi
  001af	48		 dec	 eax
  001b0	83 c8 f8	 or	 eax, -8			; fffffff8H
  001b3	40		 inc	 eax
$LN32@FindNextDi:
  001b4	89 45 f4	 mov	 DWORD PTR _ldir$[ebp], eax

; 185  : 					int endx = sx + this->Dir[ldir*2];

  001b7	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  001ba	d1 e0		 shl	 eax, 1
  001bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bf	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  001c2	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  001c9	89 55 d0	 mov	 DWORD PTR _endx$205210[ebp], edx

; 186  : 					int endy = sy + this->Dir[ldir*2+1];

  001cc	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  001cf	d1 e0		 shl	 eax, 1
  001d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  001d7	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  001de	89 55 cc	 mov	 DWORD PTR _endy$205211[ebp], edx

; 187  : 					int dist = this->GetDist(endx, endy, dx, dy);

  001e1	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  001e4	50		 push	 eax
  001e5	8b 4d 10	 mov	 ecx, DWORD PTR _dx$[ebp]
  001e8	51		 push	 ecx
  001e9	8b 55 cc	 mov	 edx, DWORD PTR _endy$205211[ebp]
  001ec	52		 push	 edx
  001ed	8b 45 d0	 mov	 eax, DWORD PTR _endx$205210[ebp]
  001f0	50		 push	 eax
  001f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f4	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  001f9	89 45 c8	 mov	 DWORD PTR _dist$205212[ebp], eax

; 188  : 
; 189  : 					if ( MinDist > dist )

  001fc	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  001ff	3b 45 c8	 cmp	 eax, DWORD PTR _dist$205212[ebp]
  00202	7e 20		 jle	 SHORT $LN11@FindNextDi

; 190  : 					{
; 191  : 						if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00204	8b 45 cc	 mov	 eax, DWORD PTR _endy$205211[ebp]
  00207	50		 push	 eax
  00208	8b 4d d0	 mov	 ecx, DWORD PTR _endx$205210[ebp]
  0020b	51		 push	 ecx
  0020c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020f	e8 00 00 00 00	 call	 ?IsThisSpotOK@PATH@@AAEHHH@Z ; PATH::IsThisSpotOK
  00214	85 c0		 test	 eax, eax
  00216	74 0c		 je	 SHORT $LN11@FindNextDi

; 192  : 						{
; 193  : 							MinDist = dist;

  00218	8b 45 c8	 mov	 eax, DWORD PTR _dist$205212[ebp]
  0021b	89 45 f8	 mov	 DWORD PTR _MinDist$[ebp], eax

; 194  : 							WhichDir = ldir;

  0021e	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  00221	89 45 f0	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN11@FindNextDi:

; 195  : 						}
; 196  : 					}
; 197  : 				}

  00224	e9 64 ff ff ff	 jmp	 $LN13@FindNextDi
$LN21@FindNextDi:

; 198  : 			}
; 199  : 		}
; 200  : 		int LastDist;
; 201  : 
; 202  : 		this->LastDir = dirstart;

  00229	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022c	8b 4d 18	 mov	 ecx, DWORD PTR _dirstart$[ebp]
  0022f	89 88 34 04 00
	00		 mov	 DWORD PTR [eax+1076], ecx

; 203  : 		LastDist = this->GetDist(sx, sy, sx + this->Dir[this->LastDir*2], sy + this->Dir[this->LastDir*2+1]);

  00235	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00238	8b 88 34 04 00
	00		 mov	 ecx, DWORD PTR [eax+1076]
  0023e	d1 e1		 shl	 ecx, 1
  00240	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00243	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00246	03 84 8a f8 03
	00 00		 add	 eax, DWORD PTR [edx+ecx*4+1016]
  0024d	50		 push	 eax
  0024e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00251	8b 91 34 04 00
	00		 mov	 edx, DWORD PTR [ecx+1076]
  00257	d1 e2		 shl	 edx, 1
  00259	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025c	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  0025f	03 8c 90 f4 03
	00 00		 add	 ecx, DWORD PTR [eax+edx*4+1012]
  00266	51		 push	 ecx
  00267	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  0026a	52		 push	 edx
  0026b	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  0026e	50		 push	 eax
  0026f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00272	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  00277	89 45 c4	 mov	 DWORD PTR _LastDist$[ebp], eax

; 204  : 
; 205  : 		if ( ( LastDist > MinDist - 6 ) && ( LastDist < MinDist + 6 ) && ( MinDist >= 25 ) )

  0027a	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  0027d	83 e8 06	 sub	 eax, 6
  00280	39 45 c4	 cmp	 DWORD PTR _LastDist$[ebp], eax
  00283	7e 1d		 jle	 SHORT $LN9@FindNextDi
  00285	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  00288	83 c0 06	 add	 eax, 6
  0028b	39 45 c4	 cmp	 DWORD PTR _LastDist$[ebp], eax
  0028e	7d 12		 jge	 SHORT $LN9@FindNextDi
  00290	83 7d f8 19	 cmp	 DWORD PTR _MinDist$[ebp], 25 ; 00000019H
  00294	7c 0c		 jl	 SHORT $LN9@FindNextDi

; 206  : 		{
; 207  : 			WhichDir = this->LastDir;

  00296	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00299	8b 88 34 04 00
	00		 mov	 ecx, DWORD PTR [eax+1076]
  0029f	89 4d f0	 mov	 DWORD PTR _WhichDir$[ebp], ecx
$LN9@FindNextDi:

; 208  : 		}
; 209  : 
; 210  : 		if ( MinDist == 10000000 )

  002a2	81 7d f8 80 96
	98 00		 cmp	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H
  002a9	75 08		 jne	 SHORT $LN8@FindNextDi

; 211  : 		{
; 212  : 			return -1;

  002ab	83 c8 ff	 or	 eax, -1
  002ae	e9 ba 01 00 00	 jmp	 $LN28@FindNextDi
$LN8@FindNextDi:

; 213  : 		}
; 214  : 		
; 215  : 		if ( this->CanWeMoveForward(sx+this->Dir[((WhichDir*2))], sy+this->Dir[((WhichDir*2))+1]) != FALSE )

  002b3	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  002b6	d1 e0		 shl	 eax, 1
  002b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002bb	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  002be	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  002c5	52		 push	 edx
  002c6	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  002c9	d1 e0		 shl	 eax, 1
  002cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ce	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  002d1	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  002d8	52		 push	 edx
  002d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002dc	e8 00 00 00 00	 call	 ?CanWeMoveForward@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward
  002e1	85 c0		 test	 eax, eax
  002e3	74 43		 je	 SHORT $LN7@FindNextDi

; 216  : 		{
; 217  : 			int path = this->VerifyThatOnPath(sx, sy);

  002e5	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  002e8	50		 push	 eax
  002e9	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  002ec	51		 push	 ecx
  002ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f0	e8 00 00 00 00	 call	 ?VerifyThatOnPath@PATH@@AAEHHH@Z ; PATH::VerifyThatOnPath
  002f5	89 45 c0	 mov	 DWORD PTR _path$205219[ebp], eax

; 218  : 
; 219  : 			if ( path != -1 )

  002f8	83 7d c0 ff	 cmp	 DWORD PTR _path$205219[ebp], -1
  002fc	74 22		 je	 SHORT $LN6@FindNextDi

; 220  : 			{
; 221  : 				this->HitMap[sx + sy * this->Width ] = 1;

  002fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00301	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  00304	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00307	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  0030a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0030d	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  00313	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 222  : 				this->NumPath = path;

  00317	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0031a	8b 4d c0	 mov	 ecx, DWORD PTR _path$205219[ebp]
  0031d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN6@FindNextDi:

; 223  : 			}
; 224  : 
; 225  : 			return WhichDir;

  00320	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00323	e9 45 01 00 00	 jmp	 $LN28@FindNextDi
$LN7@FindNextDi:

; 226  : 		}
; 227  : 
; 228  : 		if ( ErrorCheck != 0 )

  00328	0f b6 45 20	 movzx	 eax, BYTE PTR _ErrorCheck$[ebp]
  0032c	85 c0		 test	 eax, eax
  0032e	0f 84 1d 01 00
	00		 je	 $LN5@FindNextDi

; 229  : 		{
; 230  : 			int dir = WhichDir+7;

  00334	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00337	83 c0 07	 add	 eax, 7
  0033a	89 45 bc	 mov	 DWORD PTR _dir$205222[ebp], eax

; 231  : 
; 232  : 			dir %= 8;

  0033d	8b 45 bc	 mov	 eax, DWORD PTR _dir$205222[ebp]
  00340	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00345	79 05		 jns	 SHORT $LN33@FindNextDi
  00347	48		 dec	 eax
  00348	83 c8 f8	 or	 eax, -8			; fffffff8H
  0034b	40		 inc	 eax
$LN33@FindNextDi:
  0034c	89 45 bc	 mov	 DWORD PTR _dir$205222[ebp], eax

; 233  : 
; 234  : 			if (this->CanWeMoveForward(sx + this->Dir[dir*2], sy + this->Dir[dir*2+1]) != FALSE )

  0034f	8b 45 bc	 mov	 eax, DWORD PTR _dir$205222[ebp]
  00352	d1 e0		 shl	 eax, 1
  00354	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00357	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  0035a	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  00361	52		 push	 edx
  00362	8b 45 bc	 mov	 eax, DWORD PTR _dir$205222[ebp]
  00365	d1 e0		 shl	 eax, 1
  00367	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0036a	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  0036d	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00374	52		 push	 edx
  00375	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00378	e8 00 00 00 00	 call	 ?CanWeMoveForward@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward
  0037d	85 c0		 test	 eax, eax
  0037f	74 43		 je	 SHORT $LN4@FindNextDi

; 235  : 			{
; 236  : 				int path = this->VerifyThatOnPath(sx, sy);

  00381	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00384	50		 push	 eax
  00385	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  00388	51		 push	 ecx
  00389	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0038c	e8 00 00 00 00	 call	 ?VerifyThatOnPath@PATH@@AAEHHH@Z ; PATH::VerifyThatOnPath
  00391	89 45 b8	 mov	 DWORD PTR _path$205224[ebp], eax

; 237  : 
; 238  : 				if ( path != -1 )

  00394	83 7d b8 ff	 cmp	 DWORD PTR _path$205224[ebp], -1
  00398	74 22		 je	 SHORT $LN3@FindNextDi

; 239  : 				{
; 240  : 					this->HitMap[sx  + sy * this->Width] = 1;

  0039a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0039d	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  003a0	0f af 08	 imul	 ecx, DWORD PTR [eax]
  003a3	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  003a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003a9	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  003af	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 241  : 					this->NumPath = path;

  003b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003b6	8b 4d b8	 mov	 ecx, DWORD PTR _path$205224[ebp]
  003b9	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN3@FindNextDi:

; 242  : 				}
; 243  : 				return dir;

  003bc	8b 45 bc	 mov	 eax, DWORD PTR _dir$205222[ebp]
  003bf	e9 a9 00 00 00	 jmp	 $LN28@FindNextDi
$LN4@FindNextDi:

; 244  : 			}
; 245  : 
; 246  : 			int dir2 = WhichDir+9;

  003c4	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  003c7	83 c0 09	 add	 eax, 9
  003ca	89 45 b4	 mov	 DWORD PTR _dir2$205226[ebp], eax

; 247  : 			dir2 %= 8;

  003cd	8b 45 b4	 mov	 eax, DWORD PTR _dir2$205226[ebp]
  003d0	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  003d5	79 05		 jns	 SHORT $LN34@FindNextDi
  003d7	48		 dec	 eax
  003d8	83 c8 f8	 or	 eax, -8			; fffffff8H
  003db	40		 inc	 eax
$LN34@FindNextDi:
  003dc	89 45 b4	 mov	 DWORD PTR _dir2$205226[ebp], eax

; 248  : 			if (CanWeMoveForward(sx+this->Dir[dir2*2], sy+this->Dir[dir2*2+1]) != FALSE )

  003df	8b 45 b4	 mov	 eax, DWORD PTR _dir2$205226[ebp]
  003e2	d1 e0		 shl	 eax, 1
  003e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e7	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  003ea	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  003f1	52		 push	 edx
  003f2	8b 45 b4	 mov	 eax, DWORD PTR _dir2$205226[ebp]
  003f5	d1 e0		 shl	 eax, 1
  003f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fa	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  003fd	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00404	52		 push	 edx
  00405	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00408	e8 00 00 00 00	 call	 ?CanWeMoveForward@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward
  0040d	85 c0		 test	 eax, eax
  0040f	74 40		 je	 SHORT $LN5@FindNextDi

; 249  : 			{
; 250  : 				int path = this->VerifyThatOnPath(sx, sy);

  00411	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00414	50		 push	 eax
  00415	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  00418	51		 push	 ecx
  00419	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0041c	e8 00 00 00 00	 call	 ?VerifyThatOnPath@PATH@@AAEHHH@Z ; PATH::VerifyThatOnPath
  00421	89 45 b0	 mov	 DWORD PTR _path$205228[ebp], eax

; 251  : 
; 252  : 				if ( path != -1 )

  00424	83 7d b0 ff	 cmp	 DWORD PTR _path$205228[ebp], -1
  00428	74 22		 je	 SHORT $LN1@FindNextDi

; 253  : 				{
; 254  : 					this->HitMap[sx + sy * this->Width] = 1;

  0042a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0042d	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  00430	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00433	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  00436	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00439	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  0043f	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 255  : 					this->NumPath = path;

  00443	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00446	8b 4d b0	 mov	 ecx, DWORD PTR _path$205228[ebp]
  00449	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@FindNextDi:

; 256  : 				}
; 257  : 				return dir2;

  0044c	8b 45 b4	 mov	 eax, DWORD PTR _dir2$205226[ebp]
  0044f	eb 1c		 jmp	 SHORT $LN28@FindNextDi
$LN5@FindNextDi:

; 258  : 			}
; 259  : 		}
; 260  : 		
; 261  : 		this->HitMap[sx + sy*this->Width]=1;

  00451	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00454	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  00457	0f af 08	 imul	 ecx, DWORD PTR [eax]
  0045a	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  0045d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00460	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  00466	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 262  : 		return -1;

  0046a	83 c8 ff	 or	 eax, -1
$LN28@FindNextDi:

; 263  : 	};	// line : 155

  0046d	5f		 pop	 edi
  0046e	5e		 pop	 esi
  0046f	5b		 pop	 ebx
  00470	8b e5		 mov	 esp, ebp
  00472	5d		 pop	 ebp
  00473	c2 1c 00	 ret	 28			; 0000001cH
?FindNextDir@PATH@@AAEHHHHHH_N0@Z ENDP			; PATH::FindNextDir
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetDist@PATH@@AAEHHHHH@Z
_TEXT	SEGMENT
_disty$ = -12						; size = 4
_distx$ = -8						; size = 4
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?GetDist@PATH@@AAEHHHHH@Z PROC				; PATH::GetDist, COMDAT
; _this$ = ecx

; 44   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 		int distx = x2 - x1;

  0000c	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  0000f	2b 45 08	 sub	 eax, DWORD PTR _x1$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR _distx$[ebp], eax

; 46   : 		int disty = y2 - y1;

  00015	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00018	2b 45 0c	 sub	 eax, DWORD PTR _y1$[ebp]
  0001b	89 45 f4	 mov	 DWORD PTR _disty$[ebp], eax

; 47   : 		return (distx * distx) + (disty * disty);

  0001e	8b 45 f8	 mov	 eax, DWORD PTR _distx$[ebp]
  00021	0f af 45 f8	 imul	 eax, DWORD PTR _distx$[ebp]
  00025	8b 4d f4	 mov	 ecx, DWORD PTR _disty$[ebp]
  00028	0f af 4d f4	 imul	 ecx, DWORD PTR _disty$[ebp]
  0002c	03 c1		 add	 eax, ecx

; 48   : 	}	// line : 23

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
?GetDist@PATH@@AAEHHHHH@Z ENDP				; PATH::GetDist
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?VerifyThatOnPath@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_i$205150 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?VerifyThatOnPath@PATH@@AAEHHH@Z PROC			; PATH::VerifyThatOnPath, COMDAT
; _this$ = ecx

; 51   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 		for ( int i = 0 ; i < this->NumPath ; i++ )

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$205150[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@VerifyThat
$LN3@VerifyThat:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$205150[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$205150[ebp], eax
$LN4@VerifyThat:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _i$205150[ebp]
  00024	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00027	7d 28		 jge	 SHORT $LN2@VerifyThat

; 53   : 		{
; 54   : 			if ( x ==  this->PathX[i] && y == this->PathY[i] )

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	03 45 f8	 add	 eax, DWORD PTR _i$205150[ebp]
  0002f	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00033	39 4d 08	 cmp	 DWORD PTR _x$[ebp], ecx
  00036	75 17		 jne	 SHORT $LN1@VerifyThat
  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	03 45 f8	 add	 eax, DWORD PTR _i$205150[ebp]
  0003e	0f b6 88 00 02
	00 00		 movzx	 ecx, BYTE PTR [eax+512]
  00045	39 4d 0c	 cmp	 DWORD PTR _y$[ebp], ecx
  00048	75 05		 jne	 SHORT $LN1@VerifyThat

; 55   : 			{
; 56   : 				return i;

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _i$205150[ebp]
  0004d	eb 05		 jmp	 SHORT $LN5@VerifyThat
$LN1@VerifyThat:

; 57   : 			}
; 58   : 		}

  0004f	eb c4		 jmp	 SHORT $LN3@VerifyThat
$LN2@VerifyThat:

; 59   : 		return -1;

  00051	83 c8 ff	 or	 eax, -1
$LN5@VerifyThat:

; 60   : 	}

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?VerifyThatOnPath@PATH@@AAEHHH@Z ENDP			; PATH::VerifyThatOnPath
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?CanWeMoveForward@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_which$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?CanWeMoveForward@PATH@@AAEHHH@Z PROC			; PATH::CanWeMoveForward, COMDAT
; _this$ = ecx

; 63   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 		int which = x+ y * this->Width  ;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00012	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00015	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  00018	89 4d f8	 mov	 DWORD PTR _which$[ebp], ecx

; 65   : 		
; 66   : 		if ( x >= this->Width || x < 0 || y >= this->Height || y < 0 )

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00021	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00023	7d 17		 jge	 SHORT $LN3@CanWeMoveF
  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	7c 11		 jl	 SHORT $LN3@CanWeMoveF
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00031	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00034	7d 06		 jge	 SHORT $LN3@CanWeMoveF
  00036	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  0003a	7d 04		 jge	 SHORT $LN4@CanWeMoveF
$LN3@CanWeMoveF:

; 67   : 		{
; 68   : 			return false;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 42		 jmp	 SHORT $LN5@CanWeMoveF
$LN4@CanWeMoveF:

; 69   : 		}
; 70   : 
; 71   : 		if ( this->Map[which] > 1 || this->HitMap[which] != 0 )

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00049	8b 55 f8	 mov	 edx, DWORD PTR _which$[ebp]
  0004c	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  00050	83 f8 01	 cmp	 eax, 1
  00053	7f 14		 jg	 SHORT $LN1@CanWeMoveF
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _which$[ebp]
  00061	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  00065	85 c0		 test	 eax, eax
  00067	74 14		 je	 SHORT $LN2@CanWeMoveF
$LN1@CanWeMoveF:

; 72   : 		{
; 73   : 			this->HitMap[which] = 1;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  00072	8b 55 f8	 mov	 edx, DWORD PTR _which$[ebp]
  00075	c6 04 11 01	 mov	 BYTE PTR [ecx+edx], 1

; 74   : 			return false;

  00079	33 c0		 xor	 eax, eax
  0007b	eb 05		 jmp	 SHORT $LN5@CanWeMoveF
$LN2@CanWeMoveF:

; 75   : 		}
; 76   : 		return TRUE;

  0007d	b8 01 00 00 00	 mov	 eax, 1
$LN5@CanWeMoveF:

; 77   : 	};	// line : 43

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
?CanWeMoveForward@PATH@@AAEHHH@Z ENDP			; PATH::CanWeMoveForward
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsThisSpotOK@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?IsThisSpotOK@PATH@@AAEHHH@Z PROC			; PATH::IsThisSpotOK, COMDAT
; _this$ = ecx

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		int pos;
; 119  : 
; 120  : 		pos = x+ y * this->Width ;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00012	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00015	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  00018	89 4d f8	 mov	 DWORD PTR _pos$[ebp], ecx

; 121  : 
; 122  : 		if ( x < 0 || x >= this->Width || y < 0 || y >= this->Width )

  0001b	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0001f	7c 1a		 jl	 SHORT $LN2@IsThisSpot
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00027	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00029	7d 10		 jge	 SHORT $LN2@IsThisSpot
  0002b	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  0002f	7c 0a		 jl	 SHORT $LN2@IsThisSpot
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00037	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00039	7c 04		 jl	 SHORT $LN3@IsThisSpot
$LN2@IsThisSpot:

; 123  : 		{
; 124  : 			return false;

  0003b	33 c0		 xor	 eax, eax
  0003d	eb 1d		 jmp	 SHORT $LN4@IsThisSpot
$LN3@IsThisSpot:

; 125  : 		}
; 126  : 		if ( this->HitMap[pos] != 0 )

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  00048	8b 55 f8	 mov	 edx, DWORD PTR _pos$[ebp]
  0004b	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  0004f	85 c0		 test	 eax, eax
  00051	74 04		 je	 SHORT $LN1@IsThisSpot

; 127  : 		{
; 128  : 			return false;

  00053	33 c0		 xor	 eax, eax
  00055	eb 05		 jmp	 SHORT $LN4@IsThisSpot
$LN1@IsThisSpot:

; 129  : 		}
; 130  : 		return true;

  00057	b8 01 00 00 00	 mov	 eax, 1
$LN4@IsThisSpot:

; 131  : 	};	// line : 68

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
?IsThisSpotOK@PATH@@AAEHHH@Z ENDP			; PATH::IsThisSpotOK
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetPath@PATH@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPath@PATH@@QAEHXZ PROC				; PATH::GetPath, COMDAT
; _this$ = ecx

; 755  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 756  : 		return this->NumPath;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 757  : 	};

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetPath@PATH@@QAEHXZ ENDP				; PATH::GetPath
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetPathX@PATH@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPathX@PATH@@QAEPAEXZ PROC				; PATH::GetPathX, COMDAT
; _this$ = ecx

; 760  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 761  : 		return this->PathX;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH

; 762  : 	};

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetPathX@PATH@@QAEPAEXZ ENDP				; PATH::GetPathX
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetPathY@PATH@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPathY@PATH@@QAEPAEXZ PROC				; PATH::GetPathY, COMDAT
; _this$ = ecx

; 765  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 766  : 		return this->PathY;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	05 00 02 00 00	 add	 eax, 512		; 00000200H

; 767  : 	};

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetPathY@PATH@@QAEPAEXZ ENDP				; PATH::GetPathY
_TEXT	ENDS
PUBLIC	?TERRAIN_INDEX_REPEAT@@YAHHH@Z			; TERRAIN_INDEX_REPEAT
PUBLIC	?CheckWall@MapClass@@QAEHHHHH@Z			; MapClass::CheckWall
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapclass.cpp
_TEXT	SEGMENT
_Shadow$ = -52						; size = 4
_count$ = -48						; size = 4
_error$ = -44						; size = 4
_py1$ = -40						; size = 4
_px1$ = -36						; size = 4
_len2$ = -32						; size = 4
_len1$ = -28						; size = 4
_d2$ = -24						; size = 4
_d1$ = -20						; size = 4
_ny1$ = -16						; size = 4
_nx1$ = -12						; size = 4
_Index$ = -8						; size = 4
_this$ = -4						; size = 4
_sx1$ = 8						; size = 4
_sy1$ = 12						; size = 4
_sx2$ = 16						; size = 4
_sy2$ = 20						; size = 4
?CheckWall@MapClass@@QAEHHHHH@Z PROC			; MapClass::CheckWall
; _this$ = ecx

; 837  : {

  01dc0	55		 push	 ebp
  01dc1	8b ec		 mov	 ebp, esp
  01dc3	83 ec 74	 sub	 esp, 116		; 00000074H
  01dc6	53		 push	 ebx
  01dc7	56		 push	 esi
  01dc8	57		 push	 edi
  01dc9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 838  : 	int Index = TERRAIN_INDEX_REPEAT(sx1,sy1);

  01dcc	8b 45 0c	 mov	 eax, DWORD PTR _sy1$[ebp]
  01dcf	50		 push	 eax
  01dd0	8b 4d 08	 mov	 ecx, DWORD PTR _sx1$[ebp]
  01dd3	51		 push	 ecx
  01dd4	e8 00 00 00 00	 call	 ?TERRAIN_INDEX_REPEAT@@YAHHH@Z ; TERRAIN_INDEX_REPEAT
  01dd9	83 c4 08	 add	 esp, 8
  01ddc	89 45 f8	 mov	 DWORD PTR _Index$[ebp], eax

; 839  : 	int nx1;
; 840  : 	int ny1;
; 841  : 	int d1;
; 842  : 	int d2;
; 843  : 	int len1;
; 844  : 	int len2;
; 845  : 	int px1 = sx2 - sx1;

  01ddf	8b 45 10	 mov	 eax, DWORD PTR _sx2$[ebp]
  01de2	2b 45 08	 sub	 eax, DWORD PTR _sx1$[ebp]
  01de5	89 45 dc	 mov	 DWORD PTR _px1$[ebp], eax

; 846  : 	int py1 = sy2 - sy1;

  01de8	8b 45 14	 mov	 eax, DWORD PTR _sy2$[ebp]
  01deb	2b 45 0c	 sub	 eax, DWORD PTR _sy1$[ebp]
  01dee	89 45 d8	 mov	 DWORD PTR _py1$[ebp], eax

; 847  : 
; 848  : 	if ( px1 < 0 )

  01df1	83 7d dc 00	 cmp	 DWORD PTR _px1$[ebp], 0
  01df5	7d 11		 jge	 SHORT $LN11@CheckWall

; 849  : 	{
; 850  : 		px1 = -px1;

  01df7	8b 45 dc	 mov	 eax, DWORD PTR _px1$[ebp]
  01dfa	f7 d8		 neg	 eax
  01dfc	89 45 dc	 mov	 DWORD PTR _px1$[ebp], eax

; 851  : 		nx1 = -1;

  01dff	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _nx1$[ebp], -1

; 852  : 	}
; 853  : 	else

  01e06	eb 07		 jmp	 SHORT $LN10@CheckWall
$LN11@CheckWall:

; 854  : 	{
; 855  : 		nx1 = 1;

  01e08	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _nx1$[ebp], 1
$LN10@CheckWall:

; 856  : 	}
; 857  : 
; 858  : 	if ( py1 < 0 )

  01e0f	83 7d d8 00	 cmp	 DWORD PTR _py1$[ebp], 0
  01e13	7d 11		 jge	 SHORT $LN9@CheckWall

; 859  : 	{
; 860  : 		py1 = -py1;

  01e15	8b 45 d8	 mov	 eax, DWORD PTR _py1$[ebp]
  01e18	f7 d8		 neg	 eax
  01e1a	89 45 d8	 mov	 DWORD PTR _py1$[ebp], eax

; 861  : 		ny1 = -256;

  01e1d	c7 45 f0 00 ff
	ff ff		 mov	 DWORD PTR _ny1$[ebp], -256 ; ffffff00H

; 862  : 	}
; 863  : 	else

  01e24	eb 07		 jmp	 SHORT $LN8@CheckWall
$LN9@CheckWall:

; 864  : 	{
; 865  : 		ny1 = 256;

  01e26	c7 45 f0 00 01
	00 00		 mov	 DWORD PTR _ny1$[ebp], 256 ; 00000100H
$LN8@CheckWall:

; 866  : 	}
; 867  : 
; 868  : 	if ( px1 > py1 )

  01e2d	8b 45 dc	 mov	 eax, DWORD PTR _px1$[ebp]
  01e30	3b 45 d8	 cmp	 eax, DWORD PTR _py1$[ebp]
  01e33	7e 1a		 jle	 SHORT $LN7@CheckWall

; 869  : 	{
; 870  : 		len1 = px1;

  01e35	8b 45 dc	 mov	 eax, DWORD PTR _px1$[ebp]
  01e38	89 45 e4	 mov	 DWORD PTR _len1$[ebp], eax

; 871  : 		len2= py1;

  01e3b	8b 45 d8	 mov	 eax, DWORD PTR _py1$[ebp]
  01e3e	89 45 e0	 mov	 DWORD PTR _len2$[ebp], eax

; 872  : 		d1 = ny1;

  01e41	8b 45 f0	 mov	 eax, DWORD PTR _ny1$[ebp]
  01e44	89 45 ec	 mov	 DWORD PTR _d1$[ebp], eax

; 873  : 		d2 = nx1;

  01e47	8b 45 f4	 mov	 eax, DWORD PTR _nx1$[ebp]
  01e4a	89 45 e8	 mov	 DWORD PTR _d2$[ebp], eax

; 874  : 	}
; 875  : 	else

  01e4d	eb 18		 jmp	 SHORT $LN6@CheckWall
$LN7@CheckWall:

; 876  : 	{
; 877  : 		len1 = py1;

  01e4f	8b 45 d8	 mov	 eax, DWORD PTR _py1$[ebp]
  01e52	89 45 e4	 mov	 DWORD PTR _len1$[ebp], eax

; 878  : 		len2 = px1;

  01e55	8b 45 dc	 mov	 eax, DWORD PTR _px1$[ebp]
  01e58	89 45 e0	 mov	 DWORD PTR _len2$[ebp], eax

; 879  : 		d1 = nx1;

  01e5b	8b 45 f4	 mov	 eax, DWORD PTR _nx1$[ebp]
  01e5e	89 45 ec	 mov	 DWORD PTR _d1$[ebp], eax

; 880  : 		d2 = ny1;

  01e61	8b 45 f0	 mov	 eax, DWORD PTR _ny1$[ebp]
  01e64	89 45 e8	 mov	 DWORD PTR _d2$[ebp], eax
$LN6@CheckWall:

; 881  : 	}
; 882  : 
; 883  : 	int error = 0;

  01e67	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _error$[ebp], 0

; 884  : 	int count = 0;

  01e6e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 885  : 	int Shadow = 0;

  01e75	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _Shadow$[ebp], 0
$LN5@CheckWall:

; 886  : 
; 887  : 	do
; 888  : 	{
; 889  : 		if ( (this->m_attrbuf[Index]&4) == 4 )

  01e7c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01e7f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01e82	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  01e85	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  01e89	83 e0 04	 and	 eax, 4
  01e8c	74 04		 je	 SHORT $LN2@CheckWall

; 890  : 		{
; 891  : 			return FALSE;

  01e8e	33 c0		 xor	 eax, eax
  01e90	eb 47		 jmp	 SHORT $LN12@CheckWall
$LN2@CheckWall:

; 892  : 		}
; 893  : 
; 894  : 		error += len2;

  01e92	8b 45 d4	 mov	 eax, DWORD PTR _error$[ebp]
  01e95	03 45 e0	 add	 eax, DWORD PTR _len2$[ebp]
  01e98	89 45 d4	 mov	 DWORD PTR _error$[ebp], eax

; 895  : 
; 896  : 		if ( error > len1/2 )

  01e9b	8b 45 e4	 mov	 eax, DWORD PTR _len1$[ebp]
  01e9e	99		 cdq
  01e9f	2b c2		 sub	 eax, edx
  01ea1	d1 f8		 sar	 eax, 1
  01ea3	39 45 d4	 cmp	 DWORD PTR _error$[ebp], eax
  01ea6	7e 12		 jle	 SHORT $LN1@CheckWall

; 897  : 		{
; 898  : 			Index += d1;

  01ea8	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  01eab	03 45 ec	 add	 eax, DWORD PTR _d1$[ebp]
  01eae	89 45 f8	 mov	 DWORD PTR _Index$[ebp], eax

; 899  : 			error -= len1;

  01eb1	8b 45 d4	 mov	 eax, DWORD PTR _error$[ebp]
  01eb4	2b 45 e4	 sub	 eax, DWORD PTR _len1$[ebp]
  01eb7	89 45 d4	 mov	 DWORD PTR _error$[ebp], eax
$LN1@CheckWall:

; 900  : 		}
; 901  : 		
; 902  : 		Index += d2;

  01eba	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  01ebd	03 45 e8	 add	 eax, DWORD PTR _d2$[ebp]
  01ec0	89 45 f8	 mov	 DWORD PTR _Index$[ebp], eax

; 903  : 		count++;	

  01ec3	8b 45 d0	 mov	 eax, DWORD PTR _count$[ebp]
  01ec6	83 c0 01	 add	 eax, 1
  01ec9	89 45 d0	 mov	 DWORD PTR _count$[ebp], eax

; 904  : 	}
; 905  : 	while ( count <= len1 );

  01ecc	8b 45 d0	 mov	 eax, DWORD PTR _count$[ebp]
  01ecf	3b 45 e4	 cmp	 eax, DWORD PTR _len1$[ebp]
  01ed2	7e a8		 jle	 SHORT $LN5@CheckWall

; 906  : 
; 907  : 	return TRUE;

  01ed4	b8 01 00 00 00	 mov	 eax, 1
$LN12@CheckWall:

; 908  : }

  01ed9	5f		 pop	 edi
  01eda	5e		 pop	 esi
  01edb	5b		 pop	 ebx
  01edc	8b e5		 mov	 esp, ebp
  01ede	5d		 pop	 ebp
  01edf	c2 10 00	 ret	 16			; 00000010H
?CheckWall@MapClass@@QAEHHHHH@Z ENDP			; MapClass::CheckWall
; Function compile flags: /Odtp /ZI
_x$ = 8						; size = 4
_y$ = 12						; size = 4
?TERRAIN_INDEX_REPEAT@@YAHHH@Z PROC			; TERRAIN_INDEX_REPEAT

; 911  : {

  01ef0	55		 push	 ebp
  01ef1	8b ec		 mov	 ebp, esp
  01ef3	83 ec 40	 sub	 esp, 64			; 00000040H
  01ef6	53		 push	 ebx
  01ef7	56		 push	 esi
  01ef8	57		 push	 edi

; 912  : 	return (BYTE)y * 256 + (BYTE)x;

  01ef9	0f b6 45 0c	 movzx	 eax, BYTE PTR _y$[ebp]
  01efd	c1 e0 08	 shl	 eax, 8
  01f00	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x$[ebp]
  01f04	03 c1		 add	 eax, ecx

; 913  : }

  01f06	5f		 pop	 edi
  01f07	5e		 pop	 esi
  01f08	5b		 pop	 ebx
  01f09	8b e5		 mov	 esp, ebp
  01f0b	5d		 pop	 ebp
  01f0c	c3		 ret	 0
?TERRAIN_INDEX_REPEAT@@YAHHH@Z ENDP			; TERRAIN_INDEX_REPEAT
_TEXT	ENDS
PUBLIC	?FindPath2@PATH@@QAE_NHHHH_N@Z			; PATH::FindPath2
PUBLIC	?PathFinding3@MapClass@@QAE_NHHHHPAUPATH_t@@@Z	; MapClass::PathFinding3
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$230201 = -24						; size = 4
_py$230200 = -20					; size = 4
_px$230199 = -16					; size = 4
_lc3$230197 = -12					; size = 4
_Success$ = -5						; size = 1
_this$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
_a$ = 24						; size = 4
?PathFinding3@MapClass@@QAE_NHHHHPAUPATH_t@@@Z PROC	; MapClass::PathFinding3
; _this$ = ecx

; 916  : {

  01f10	55		 push	 ebp
  01f11	8b ec		 mov	 ebp, esp
  01f13	83 ec 58	 sub	 esp, 88			; 00000058H
  01f16	53		 push	 ebx
  01f17	56		 push	 esi
  01f18	57		 push	 edi
  01f19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 917  : 	bool Success = this->path->FindPath2(sx, sy, tx, ty, TRUE);

  01f1c	6a 01		 push	 1
  01f1e	8b 45 14	 mov	 eax, DWORD PTR _ty$[ebp]
  01f21	50		 push	 eax
  01f22	8b 4d 10	 mov	 ecx, DWORD PTR _tx$[ebp]
  01f25	51		 push	 ecx
  01f26	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  01f29	52		 push	 edx
  01f2a	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  01f2d	50		 push	 eax
  01f2e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f31	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  01f34	e8 00 00 00 00	 call	 ?FindPath2@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath2
  01f39	88 45 fb	 mov	 BYTE PTR _Success$[ebp], al

; 918  : 
; 919  : 	if ( Success == false )

  01f3c	0f b6 45 fb	 movzx	 eax, BYTE PTR _Success$[ebp]
  01f40	85 c0		 test	 eax, eax
  01f42	75 20		 jne	 SHORT $LN6@PathFindin@2

; 920  : 	{
; 921  : 		Success = this->path->FindPath2(sx, sy, tx, ty, FALSE);

  01f44	6a 00		 push	 0
  01f46	8b 45 14	 mov	 eax, DWORD PTR _ty$[ebp]
  01f49	50		 push	 eax
  01f4a	8b 4d 10	 mov	 ecx, DWORD PTR _tx$[ebp]
  01f4d	51		 push	 ecx
  01f4e	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  01f51	52		 push	 edx
  01f52	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  01f55	50		 push	 eax
  01f56	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f59	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  01f5c	e8 00 00 00 00	 call	 ?FindPath2@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath2
  01f61	88 45 fb	 mov	 BYTE PTR _Success$[ebp], al
$LN6@PathFindin@2:

; 922  : 	}
; 923  : 
; 924  : 	if ( Success != false )

  01f64	0f b6 45 fb	 movzx	 eax, BYTE PTR _Success$[ebp]
  01f68	85 c0		 test	 eax, eax
  01f6a	0f 84 8a 00 00
	00		 je	 $LN5@PathFindin@2

; 925  : 	{
; 926  : 		int lc3 = this->path->GetPath();

  01f70	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01f73	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01f76	e8 00 00 00 00	 call	 ?GetPath@PATH@@QAEHXZ	; PATH::GetPath
  01f7b	89 45 f4	 mov	 DWORD PTR _lc3$230197[ebp], eax

; 927  : 
; 928  : 		if ( lc3 > 1 )

  01f7e	83 7d f4 01	 cmp	 DWORD PTR _lc3$230197[ebp], 1
  01f82	7e 76		 jle	 SHORT $LN5@PathFindin@2

; 929  : 		{
; 930  : 			a->PathNum = lc3;

  01f84	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01f87	8b 4d f4	 mov	 ecx, DWORD PTR _lc3$230197[ebp]
  01f8a	89 08		 mov	 DWORD PTR [eax], ecx

; 931  : 			BYTE * px = this->path->GetPathX();

  01f8c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01f8f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01f92	e8 00 00 00 00	 call	 ?GetPathX@PATH@@QAEPAEXZ ; PATH::GetPathX
  01f97	89 45 f0	 mov	 DWORD PTR _px$230199[ebp], eax

; 932  : 			BYTE * py = this->path->GetPathY();

  01f9a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01f9d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01fa0	e8 00 00 00 00	 call	 ?GetPathY@PATH@@QAEPAEXZ ; PATH::GetPathY
  01fa5	89 45 ec	 mov	 DWORD PTR _py$230200[ebp], eax

; 933  : 
; 934  : 			for (int n=0;n<a->PathNum;n++)

  01fa8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _n$230201[ebp], 0
  01faf	eb 09		 jmp	 SHORT $LN3@PathFindin@2
$LN2@PathFindin@2:
  01fb1	8b 45 e8	 mov	 eax, DWORD PTR _n$230201[ebp]
  01fb4	83 c0 01	 add	 eax, 1
  01fb7	89 45 e8	 mov	 DWORD PTR _n$230201[ebp], eax
$LN3@PathFindin@2:
  01fba	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01fbd	8b 4d e8	 mov	 ecx, DWORD PTR _n$230201[ebp]
  01fc0	3b 08		 cmp	 ecx, DWORD PTR [eax]
  01fc2	7d 28		 jge	 SHORT $LN1@PathFindin@2

; 935  : 			{
; 936  : 				a->PathX[n] = px[n];

  01fc4	8b 45 f0	 mov	 eax, DWORD PTR _px$230199[ebp]
  01fc7	03 45 e8	 add	 eax, DWORD PTR _n$230201[ebp]
  01fca	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01fcd	8b 55 e8	 mov	 edx, DWORD PTR _n$230201[ebp]
  01fd0	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01fd3	89 4c 90 04	 mov	 DWORD PTR [eax+edx*4+4], ecx

; 937  : 				a->PathY[n] = py[n];

  01fd7	8b 45 ec	 mov	 eax, DWORD PTR _py$230200[ebp]
  01fda	03 45 e8	 add	 eax, DWORD PTR _n$230201[ebp]
  01fdd	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01fe0	8b 55 e8	 mov	 edx, DWORD PTR _n$230201[ebp]
  01fe3	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01fe6	89 4c 90 40	 mov	 DWORD PTR [eax+edx*4+64], ecx

; 938  : 			}

  01fea	eb c5		 jmp	 SHORT $LN2@PathFindin@2
$LN1@PathFindin@2:

; 939  : 
; 940  : 			a->CurrentPath = 0;

  01fec	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  01fef	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0

; 941  : 			return 1;

  01ff6	b0 01		 mov	 al, 1
  01ff8	eb 02		 jmp	 SHORT $LN7@PathFindin@2
$LN5@PathFindin@2:

; 942  : 		}
; 943  : 
; 944  : 	}
; 945  : 
; 946  : 	return false;

  01ffa	32 c0		 xor	 al, al
$LN7@PathFindin@2:

; 947  : }

  01ffc	5f		 pop	 edi
  01ffd	5e		 pop	 esi
  01ffe	5b		 pop	 ebx
  01fff	8b e5		 mov	 esp, ebp
  02001	5d		 pop	 ebp
  02002	c2 14 00	 ret	 20			; 00000014H
?PathFinding3@MapClass@@QAE_NHHHHPAUPATH_t@@@Z ENDP	; MapClass::PathFinding3
_TEXT	ENDS
PUBLIC	?FindNextDir2@PATH@@AAEHHHHHH_N0@Z		; PATH::FindNextDir2
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\zzzpath.h
;	COMDAT ?FindPath2@PATH@@QAE_NHHHH_N@Z
_TEXT	SEGMENT
_First$ = -13						; size = 1
_NumFails$ = -12					; size = 4
_WhichDir$ = -8						; size = 4
_this$ = -4						; size = 4
_startx$ = 8						; size = 4
_starty$ = 12						; size = 4
_endx$ = 16						; size = 4
_endy$ = 20						; size = 4
_ErrorCheck$ = 24					; size = 1
?FindPath2@PATH@@QAE_NHHHH_N@Z PROC			; PATH::FindPath2, COMDAT
; _this$ = ecx

; 609  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 610  : 		this->NumPath = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 611  : 
; 612  : 		int WhichDir=0;

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _WhichDir$[ebp], 0

; 613  : 		int NumFails=0;

  0001d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _NumFails$[ebp], 0

; 614  : 		bool First;
; 615  : 
; 616  : 		
; 617  : 		memset(this->HitMap, 0, this->Width * this->Height);

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	0f af 51 04	 imul	 edx, DWORD PTR [ecx+4]
  00030	52		 push	 edx
  00031	6a 00		 push	 0
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 618  : 		First = true;

  00045	c6 45 f3 01	 mov	 BYTE PTR _First$[ebp], 1
$LN11@FindPath2:

; 619  : 
; 620  : 		while ( (startx != endx) || (starty != endy) )

  00049	8b 45 08	 mov	 eax, DWORD PTR _startx$[ebp]
  0004c	3b 45 10	 cmp	 eax, DWORD PTR _endx$[ebp]
  0004f	75 0c		 jne	 SHORT $LN9@FindPath2
  00051	8b 45 0c	 mov	 eax, DWORD PTR _starty$[ebp]
  00054	3b 45 14	 cmp	 eax, DWORD PTR _endy$[ebp]
  00057	0f 84 13 01 00
	00		 je	 $LN10@FindPath2
$LN9@FindPath2:

; 621  : 		{
; 622  : 			WhichDir = this->FindNextDir2(startx, starty, endx, endy, WhichDir, First, ErrorCheck);

  0005d	0f b6 45 18	 movzx	 eax, BYTE PTR _ErrorCheck$[ebp]
  00061	50		 push	 eax
  00062	0f b6 4d f3	 movzx	 ecx, BYTE PTR _First$[ebp]
  00066	51		 push	 ecx
  00067	8b 55 f8	 mov	 edx, DWORD PTR _WhichDir$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 14	 mov	 eax, DWORD PTR _endy$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _endx$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  00076	52		 push	 edx
  00077	8b 45 08	 mov	 eax, DWORD PTR _startx$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?FindNextDir2@PATH@@AAEHHHHHH_N0@Z ; PATH::FindNextDir2
  00083	89 45 f8	 mov	 DWORD PTR _WhichDir$[ebp], eax

; 623  : 			First = 0;

  00086	c6 45 f3 00	 mov	 BYTE PTR _First$[ebp], 0

; 624  : 			
; 625  : 			if ( WhichDir >= 0 )

  0008a	83 7d f8 00	 cmp	 DWORD PTR _WhichDir$[ebp], 0
  0008e	7c 78		 jl	 SHORT $LN8@FindPath2

; 626  : 			{
; 627  : 				this->PathX[this->NumPath] = startx;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00096	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00099	8a 45 08	 mov	 al, BYTE PTR _startx$[ebp]
  0009c	88 44 0a 0c	 mov	 BYTE PTR [edx+ecx+12], al

; 628  : 				this->PathY[this->NumPath] = starty;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	8a 45 0c	 mov	 al, BYTE PTR _starty$[ebp]
  000ac	88 84 0a 00 02
	00 00		 mov	 BYTE PTR [edx+ecx+512], al

; 629  : 				startx += this->Dir[WhichDir*2];

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  000b6	d1 e0		 shl	 eax, 1
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	8b 55 08	 mov	 edx, DWORD PTR _startx$[ebp]
  000be	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  000c5	89 55 08	 mov	 DWORD PTR _startx$[ebp], edx

; 630  : 				starty += this->Dir[WhichDir*2+1];

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  000cb	d1 e0		 shl	 eax, 1
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  000d3	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  000da	89 55 0c	 mov	 DWORD PTR _starty$[ebp], edx

; 631  : 				this->NumPath++;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e3	83 c1 01	 add	 ecx, 1
  000e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 632  : 
; 633  : 				if ( this->NumPath >= 14 )

  000ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	83 78 08 0e	 cmp	 DWORD PTR [eax+8], 14	; 0000000eH
  000f3	7c 11		 jl	 SHORT $LN7@FindPath2

; 634  : 				{
; 635  : 					this->NumPath--;

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000fb	83 e9 01	 sub	 ecx, 1
  000fe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00101	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 636  : 					break;

  00104	eb 6a		 jmp	 SHORT $LN10@FindPath2
$LN7@FindPath2:

; 637  : 				}
; 638  : 			}

  00106	eb 63		 jmp	 SHORT $LN6@FindPath2
$LN8@FindPath2:

; 639  : 			else if ( ErrorCheck != FALSE )

  00108	0f b6 45 18	 movzx	 eax, BYTE PTR _ErrorCheck$[ebp]
  0010c	85 c0		 test	 eax, eax
  0010e	74 59		 je	 SHORT $LN5@FindPath2

; 640  : 			{
; 641  : 				this->NumPath--;

  00110	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00113	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00116	83 e9 01	 sub	 ecx, 1
  00119	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011c	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 642  : 
; 643  : 				if ( this->NumPath < 0 )

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00122	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00126	7d 07		 jge	 SHORT $LN4@FindPath2

; 644  : 				{
; 645  : 					return false;

  00128	32 c0		 xor	 al, al
  0012a	e9 82 00 00 00	 jmp	 $LN12@FindPath2
$LN4@FindPath2:

; 646  : 				}
; 647  : 
; 648  : 				startx = this->PathX[this->NumPath];

  0012f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00132	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00135	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00138	0f b6 44 0a 0c	 movzx	 eax, BYTE PTR [edx+ecx+12]
  0013d	89 45 08	 mov	 DWORD PTR _startx$[ebp], eax

; 649  : 				starty = this->PathY[this->NumPath];

  00140	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00143	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00146	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00149	0f b6 84 0a 00
	02 00 00	 movzx	 eax, BYTE PTR [edx+ecx+512]
  00151	89 45 0c	 mov	 DWORD PTR _starty$[ebp], eax

; 650  : 				NumFails++;

  00154	8b 45 f4	 mov	 eax, DWORD PTR _NumFails$[ebp]
  00157	83 c0 01	 add	 eax, 1
  0015a	89 45 f4	 mov	 DWORD PTR _NumFails$[ebp], eax

; 651  : 
; 652  : 				if ( NumFails >= 10 )

  0015d	83 7d f4 0a	 cmp	 DWORD PTR _NumFails$[ebp], 10 ; 0000000aH
  00161	7c 04		 jl	 SHORT $LN3@FindPath2

; 653  : 				{
; 654  : 					return false;

  00163	32 c0		 xor	 al, al
  00165	eb 4a		 jmp	 SHORT $LN12@FindPath2
$LN3@FindPath2:

; 655  : 				}
; 656  : 			}
; 657  : 			else

  00167	eb 02		 jmp	 SHORT $LN6@FindPath2
$LN5@FindPath2:

; 658  : 			{
; 659  : 				break;

  00169	eb 05		 jmp	 SHORT $LN10@FindPath2
$LN6@FindPath2:

; 660  : 			}
; 661  : 			
; 662  : 		}

  0016b	e9 d9 fe ff ff	 jmp	 $LN11@FindPath2
$LN10@FindPath2:

; 663  : 
; 664  : 		this->PathX[this->NumPath] = startx;

  00170	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00173	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00176	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00179	8a 45 08	 mov	 al, BYTE PTR _startx$[ebp]
  0017c	88 44 0a 0c	 mov	 BYTE PTR [edx+ecx+12], al

; 665  : 		this->PathY[this->NumPath] = starty;

  00180	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00183	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00186	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00189	8a 45 0c	 mov	 al, BYTE PTR _starty$[ebp]
  0018c	88 84 0a 00 02
	00 00		 mov	 BYTE PTR [edx+ecx+512], al

; 666  : 		this->NumPath++;

  00193	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00196	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00199	83 c1 01	 add	 ecx, 1
  0019c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0019f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 667  : 
; 668  : 		if ( this->NumPath >= 15 )

  001a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	83 78 08 0f	 cmp	 DWORD PTR [eax+8], 15	; 0000000fH
  001a9	7c 04		 jl	 SHORT $LN1@FindPath2

; 669  : 		{
; 670  : 			return false;

  001ab	32 c0		 xor	 al, al
  001ad	eb 02		 jmp	 SHORT $LN12@FindPath2
$LN1@FindPath2:

; 671  : 		}
; 672  : 
; 673  : 		return true;

  001af	b0 01		 mov	 al, 1
$LN12@FindPath2:

; 674  : 	};	// line : 351

  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	5b		 pop	 ebx
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c2 14 00	 ret	 20			; 00000014H
?FindPath2@PATH@@QAE_NHHHH_N@Z ENDP			; PATH::FindPath2
_TEXT	ENDS
PUBLIC	?CanWeMoveForward2@PATH@@AAEHHH@Z		; PATH::CanWeMoveForward2
; Function compile flags: /Odtp /ZI
;	COMDAT ?FindNextDir2@PATH@@AAEHHHHHH_N0@Z
_TEXT	SEGMENT
_path$205276 = -80					; size = 4
_dir2$205274 = -76					; size = 4
_path$205272 = -72					; size = 4
_dir$205270 = -68					; size = 4
_path$205267 = -64					; size = 4
_LastDist$ = -60					; size = 4
_dist$205260 = -56					; size = 4
_endy$205259 = -52					; size = 4
_endx$205258 = -48					; size = 4
_dist$205251 = -44					; size = 4
_endy$205250 = -40					; size = 4
_endx$205249 = -36					; size = 4
_dist$205242 = -32					; size = 4
_endy$205241 = -28					; size = 4
_endx$205240 = -24					; size = 4
_i$ = -20						; size = 4
_WhichDir$ = -16					; size = 4
_ldir$ = -12						; size = 4
_MinDist$ = -8						; size = 4
_this$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_dirstart$ = 24						; size = 4
_First$ = 28						; size = 1
_ErrorCheck$ = 32					; size = 1
?FindNextDir2@PATH@@AAEHHHHHH_N0@Z PROC			; PATH::FindNextDir2, COMDAT
; _this$ = ecx

; 266  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 267  : 		int MinDist = 10000000;

  0000f	c7 45 f8 80 96
	98 00		 mov	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H

; 268  : 		long ldir;
; 269  : 		int WhichDir = 0;

  00016	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _WhichDir$[ebp], 0

; 270  : 		int i;
; 271  : 
; 272  : 		if ( First != 0 )

  0001d	0f b6 45 1c	 movzx	 eax, BYTE PTR _First$[ebp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 a5 00 00
	00		 je	 $LN27@FindNextDi@2

; 273  : 		{
; 274  : 			for ( i = 0 ; i<8 ; i++ )

  00029	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00030	eb 09		 jmp	 SHORT $LN26@FindNextDi@2
$LN25@FindNextDi@2:
  00032	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00035	83 c0 01	 add	 eax, 1
  00038	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN26@FindNextDi@2:
  0003b	83 7d ec 08	 cmp	 DWORD PTR _i$[ebp], 8
  0003f	0f 8d 84 00 00
	00		 jge	 $LN24@FindNextDi@2

; 275  : 			{
; 276  : 				ldir = i % 8 ;

  00045	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00048	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0004d	79 05		 jns	 SHORT $LN30@FindNextDi@2
  0004f	48		 dec	 eax
  00050	83 c8 f8	 or	 eax, -8			; fffffff8H
  00053	40		 inc	 eax
$LN30@FindNextDi@2:
  00054	89 45 f4	 mov	 DWORD PTR _ldir$[ebp], eax

; 277  : 				int endx = sx + this->Dir[ldir*2];

  00057	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0005a	d1 e0		 shl	 eax, 1
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  00062	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00069	89 55 e8	 mov	 DWORD PTR _endx$205240[ebp], edx

; 278  : 				int endy = sy + this->Dir[ldir*2+1];

  0006c	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0006f	d1 e0		 shl	 eax, 1
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00077	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  0007e	89 55 e4	 mov	 DWORD PTR _endy$205241[ebp], edx

; 279  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00081	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  00084	50		 push	 eax
  00085	8b 4d 10	 mov	 ecx, DWORD PTR _dx$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 e4	 mov	 edx, DWORD PTR _endy$205241[ebp]
  0008c	52		 push	 edx
  0008d	8b 45 e8	 mov	 eax, DWORD PTR _endx$205240[ebp]
  00090	50		 push	 eax
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  00099	89 45 e0	 mov	 DWORD PTR _dist$205242[ebp], eax

; 280  : 
; 281  : 				if ( MinDist > dist )

  0009c	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  0009f	3b 45 e0	 cmp	 eax, DWORD PTR _dist$205242[ebp]
  000a2	7e 20		 jle	 SHORT $LN23@FindNextDi@2

; 282  : 				{
; 283  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  000a4	8b 45 e4	 mov	 eax, DWORD PTR _endy$205241[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d e8	 mov	 ecx, DWORD PTR _endx$205240[ebp]
  000ab	51		 push	 ecx
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?IsThisSpotOK@PATH@@AAEHHH@Z ; PATH::IsThisSpotOK
  000b4	85 c0		 test	 eax, eax
  000b6	74 0c		 je	 SHORT $LN23@FindNextDi@2

; 284  : 					{
; 285  : 						MinDist = dist;

  000b8	8b 45 e0	 mov	 eax, DWORD PTR _dist$205242[ebp]
  000bb	89 45 f8	 mov	 DWORD PTR _MinDist$[ebp], eax

; 286  : 						WhichDir = ldir;

  000be	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  000c1	89 45 f0	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN23@FindNextDi@2:

; 287  : 					}
; 288  : 				}
; 289  : 			}

  000c4	e9 69 ff ff ff	 jmp	 $LN25@FindNextDi@2
$LN24@FindNextDi@2:

; 290  : 		}
; 291  : 		else

  000c9	e9 5b 01 00 00	 jmp	 $LN21@FindNextDi@2
$LN27@FindNextDi@2:

; 292  : 		{
; 293  : 			for ( i = dirstart+7 ; i <= dirstart+9 ; i++ )

  000ce	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  000d1	83 c0 07	 add	 eax, 7
  000d4	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  000d7	eb 09		 jmp	 SHORT $LN20@FindNextDi@2
$LN19@FindNextDi@2:
  000d9	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  000dc	83 c0 01	 add	 eax, 1
  000df	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN20@FindNextDi@2:
  000e2	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  000e5	83 c0 09	 add	 eax, 9
  000e8	39 45 ec	 cmp	 DWORD PTR _i$[ebp], eax
  000eb	0f 8f 84 00 00
	00		 jg	 $LN18@FindNextDi@2

; 294  : 			{
; 295  : 				ldir = i % 8;

  000f1	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  000f4	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  000f9	79 05		 jns	 SHORT $LN31@FindNextDi@2
  000fb	48		 dec	 eax
  000fc	83 c8 f8	 or	 eax, -8			; fffffff8H
  000ff	40		 inc	 eax
$LN31@FindNextDi@2:
  00100	89 45 f4	 mov	 DWORD PTR _ldir$[ebp], eax

; 296  : 				int endx = sx + this->Dir[ldir*2];

  00103	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  00106	d1 e0		 shl	 eax, 1
  00108	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  0010e	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00115	89 55 dc	 mov	 DWORD PTR _endx$205249[ebp], edx

; 297  : 				int endy = sy + this->Dir[ldir*2+1];

  00118	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0011b	d1 e0		 shl	 eax, 1
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00123	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  0012a	89 55 d8	 mov	 DWORD PTR _endy$205250[ebp], edx

; 298  : 				int dist = this->GetDist(endx, endy, dx, dy);

  0012d	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  00130	50		 push	 eax
  00131	8b 4d 10	 mov	 ecx, DWORD PTR _dx$[ebp]
  00134	51		 push	 ecx
  00135	8b 55 d8	 mov	 edx, DWORD PTR _endy$205250[ebp]
  00138	52		 push	 edx
  00139	8b 45 dc	 mov	 eax, DWORD PTR _endx$205249[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  00145	89 45 d4	 mov	 DWORD PTR _dist$205251[ebp], eax

; 299  : 
; 300  : 				if ( MinDist > dist )

  00148	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  0014b	3b 45 d4	 cmp	 eax, DWORD PTR _dist$205251[ebp]
  0014e	7e 20		 jle	 SHORT $LN17@FindNextDi@2

; 301  : 				{
; 302  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00150	8b 45 d8	 mov	 eax, DWORD PTR _endy$205250[ebp]
  00153	50		 push	 eax
  00154	8b 4d dc	 mov	 ecx, DWORD PTR _endx$205249[ebp]
  00157	51		 push	 ecx
  00158	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015b	e8 00 00 00 00	 call	 ?IsThisSpotOK@PATH@@AAEHHH@Z ; PATH::IsThisSpotOK
  00160	85 c0		 test	 eax, eax
  00162	74 0c		 je	 SHORT $LN17@FindNextDi@2

; 303  : 					{
; 304  : 						MinDist = dist;

  00164	8b 45 d4	 mov	 eax, DWORD PTR _dist$205251[ebp]
  00167	89 45 f8	 mov	 DWORD PTR _MinDist$[ebp], eax

; 305  : 						WhichDir = ldir;

  0016a	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0016d	89 45 f0	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN17@FindNextDi@2:

; 306  : 					}
; 307  : 				}
; 308  : 			}

  00170	e9 64 ff ff ff	 jmp	 $LN19@FindNextDi@2
$LN18@FindNextDi@2:

; 309  : 
; 310  : 			if ( MinDist == 10000000 )

  00175	81 7d f8 80 96
	98 00		 cmp	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H
  0017c	0f 85 a7 00 00
	00		 jne	 $LN21@FindNextDi@2

; 311  : 			{
; 312  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  00182	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  00185	83 c0 02	 add	 eax, 2
  00188	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  0018b	eb 09		 jmp	 SHORT $LN14@FindNextDi@2
$LN13@FindNextDi@2:
  0018d	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00190	83 c0 01	 add	 eax, 1
  00193	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN14@FindNextDi@2:
  00196	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  00199	83 c0 06	 add	 eax, 6
  0019c	39 45 ec	 cmp	 DWORD PTR _i$[ebp], eax
  0019f	0f 8f 84 00 00
	00		 jg	 $LN21@FindNextDi@2

; 313  : 				{
; 314  : 					ldir = i % 8;

  001a5	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  001a8	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  001ad	79 05		 jns	 SHORT $LN32@FindNextDi@2
  001af	48		 dec	 eax
  001b0	83 c8 f8	 or	 eax, -8			; fffffff8H
  001b3	40		 inc	 eax
$LN32@FindNextDi@2:
  001b4	89 45 f4	 mov	 DWORD PTR _ldir$[ebp], eax

; 315  : 					int endx = sx + this->Dir[ldir*2];

  001b7	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  001ba	d1 e0		 shl	 eax, 1
  001bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bf	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  001c2	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  001c9	89 55 d0	 mov	 DWORD PTR _endx$205258[ebp], edx

; 316  : 					int endy = sy + this->Dir[ldir*2+1];

  001cc	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  001cf	d1 e0		 shl	 eax, 1
  001d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  001d7	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  001de	89 55 cc	 mov	 DWORD PTR _endy$205259[ebp], edx

; 317  : 					int dist = this->GetDist(endx, endy, dx, dy);

  001e1	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  001e4	50		 push	 eax
  001e5	8b 4d 10	 mov	 ecx, DWORD PTR _dx$[ebp]
  001e8	51		 push	 ecx
  001e9	8b 55 cc	 mov	 edx, DWORD PTR _endy$205259[ebp]
  001ec	52		 push	 edx
  001ed	8b 45 d0	 mov	 eax, DWORD PTR _endx$205258[ebp]
  001f0	50		 push	 eax
  001f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f4	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  001f9	89 45 c8	 mov	 DWORD PTR _dist$205260[ebp], eax

; 318  : 
; 319  : 					if ( MinDist > dist )

  001fc	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  001ff	3b 45 c8	 cmp	 eax, DWORD PTR _dist$205260[ebp]
  00202	7e 20		 jle	 SHORT $LN11@FindNextDi@2

; 320  : 					{
; 321  : 						if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00204	8b 45 cc	 mov	 eax, DWORD PTR _endy$205259[ebp]
  00207	50		 push	 eax
  00208	8b 4d d0	 mov	 ecx, DWORD PTR _endx$205258[ebp]
  0020b	51		 push	 ecx
  0020c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020f	e8 00 00 00 00	 call	 ?IsThisSpotOK@PATH@@AAEHHH@Z ; PATH::IsThisSpotOK
  00214	85 c0		 test	 eax, eax
  00216	74 0c		 je	 SHORT $LN11@FindNextDi@2

; 322  : 						{
; 323  : 							MinDist = dist;

  00218	8b 45 c8	 mov	 eax, DWORD PTR _dist$205260[ebp]
  0021b	89 45 f8	 mov	 DWORD PTR _MinDist$[ebp], eax

; 324  : 							WhichDir = ldir;

  0021e	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  00221	89 45 f0	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN11@FindNextDi@2:

; 325  : 						}
; 326  : 					}
; 327  : 				}

  00224	e9 64 ff ff ff	 jmp	 $LN13@FindNextDi@2
$LN21@FindNextDi@2:

; 328  : 			}
; 329  : 		}
; 330  : 		int LastDist;
; 331  : 
; 332  : 		this->LastDir = dirstart;

  00229	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022c	8b 4d 18	 mov	 ecx, DWORD PTR _dirstart$[ebp]
  0022f	89 88 34 04 00
	00		 mov	 DWORD PTR [eax+1076], ecx

; 333  : 		LastDist = this->GetDist(sx, sy, sx + this->Dir[this->LastDir*2], sy + this->Dir[this->LastDir*2+1]);

  00235	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00238	8b 88 34 04 00
	00		 mov	 ecx, DWORD PTR [eax+1076]
  0023e	d1 e1		 shl	 ecx, 1
  00240	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00243	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00246	03 84 8a f8 03
	00 00		 add	 eax, DWORD PTR [edx+ecx*4+1016]
  0024d	50		 push	 eax
  0024e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00251	8b 91 34 04 00
	00		 mov	 edx, DWORD PTR [ecx+1076]
  00257	d1 e2		 shl	 edx, 1
  00259	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025c	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  0025f	03 8c 90 f4 03
	00 00		 add	 ecx, DWORD PTR [eax+edx*4+1012]
  00266	51		 push	 ecx
  00267	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  0026a	52		 push	 edx
  0026b	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  0026e	50		 push	 eax
  0026f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00272	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  00277	89 45 c4	 mov	 DWORD PTR _LastDist$[ebp], eax

; 334  : 
; 335  : 		if ( ( LastDist > MinDist - 6 ) && ( LastDist < MinDist + 6 ) && ( MinDist >= 25 ) )

  0027a	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  0027d	83 e8 06	 sub	 eax, 6
  00280	39 45 c4	 cmp	 DWORD PTR _LastDist$[ebp], eax
  00283	7e 1d		 jle	 SHORT $LN9@FindNextDi@2
  00285	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  00288	83 c0 06	 add	 eax, 6
  0028b	39 45 c4	 cmp	 DWORD PTR _LastDist$[ebp], eax
  0028e	7d 12		 jge	 SHORT $LN9@FindNextDi@2
  00290	83 7d f8 19	 cmp	 DWORD PTR _MinDist$[ebp], 25 ; 00000019H
  00294	7c 0c		 jl	 SHORT $LN9@FindNextDi@2

; 336  : 		{
; 337  : 			WhichDir = this->LastDir;

  00296	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00299	8b 88 34 04 00
	00		 mov	 ecx, DWORD PTR [eax+1076]
  0029f	89 4d f0	 mov	 DWORD PTR _WhichDir$[ebp], ecx
$LN9@FindNextDi@2:

; 338  : 		}
; 339  : 
; 340  : 		if ( MinDist == 10000000 )

  002a2	81 7d f8 80 96
	98 00		 cmp	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H
  002a9	75 08		 jne	 SHORT $LN8@FindNextDi@2

; 341  : 		{
; 342  : 			return -1;

  002ab	83 c8 ff	 or	 eax, -1
  002ae	e9 ba 01 00 00	 jmp	 $LN28@FindNextDi@2
$LN8@FindNextDi@2:

; 343  : 		}
; 344  : 		
; 345  : 		if ( this->CanWeMoveForward2(sx+this->Dir[WhichDir*2],sy+ this->Dir[WhichDir*2+1]) != FALSE )

  002b3	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  002b6	d1 e0		 shl	 eax, 1
  002b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002bb	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  002be	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  002c5	52		 push	 edx
  002c6	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  002c9	d1 e0		 shl	 eax, 1
  002cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ce	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  002d1	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  002d8	52		 push	 edx
  002d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002dc	e8 00 00 00 00	 call	 ?CanWeMoveForward2@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward2
  002e1	85 c0		 test	 eax, eax
  002e3	74 43		 je	 SHORT $LN7@FindNextDi@2

; 346  : 		{
; 347  : 			int path = this->VerifyThatOnPath(sx, sy);

  002e5	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  002e8	50		 push	 eax
  002e9	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  002ec	51		 push	 ecx
  002ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f0	e8 00 00 00 00	 call	 ?VerifyThatOnPath@PATH@@AAEHHH@Z ; PATH::VerifyThatOnPath
  002f5	89 45 c0	 mov	 DWORD PTR _path$205267[ebp], eax

; 348  : 
; 349  : 			if ( path != -1 )

  002f8	83 7d c0 ff	 cmp	 DWORD PTR _path$205267[ebp], -1
  002fc	74 22		 je	 SHORT $LN6@FindNextDi@2

; 350  : 			{
; 351  : 				this->HitMap[sx+ sy * this->Width ] = 1;

  002fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00301	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  00304	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00307	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  0030a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0030d	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  00313	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 352  : 				this->NumPath = path;

  00317	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0031a	8b 4d c0	 mov	 ecx, DWORD PTR _path$205267[ebp]
  0031d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN6@FindNextDi@2:

; 353  : 			}
; 354  : 
; 355  : 			return WhichDir;

  00320	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00323	e9 45 01 00 00	 jmp	 $LN28@FindNextDi@2
$LN7@FindNextDi@2:

; 356  : 		}
; 357  : 
; 358  : 		if ( ErrorCheck != 0 )

  00328	0f b6 45 20	 movzx	 eax, BYTE PTR _ErrorCheck$[ebp]
  0032c	85 c0		 test	 eax, eax
  0032e	0f 84 1d 01 00
	00		 je	 $LN5@FindNextDi@2

; 359  : 		{
; 360  : 			int dir = WhichDir+7;

  00334	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00337	83 c0 07	 add	 eax, 7
  0033a	89 45 bc	 mov	 DWORD PTR _dir$205270[ebp], eax

; 361  : 
; 362  : 			dir %= 8;

  0033d	8b 45 bc	 mov	 eax, DWORD PTR _dir$205270[ebp]
  00340	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00345	79 05		 jns	 SHORT $LN33@FindNextDi@2
  00347	48		 dec	 eax
  00348	83 c8 f8	 or	 eax, -8			; fffffff8H
  0034b	40		 inc	 eax
$LN33@FindNextDi@2:
  0034c	89 45 bc	 mov	 DWORD PTR _dir$205270[ebp], eax

; 363  : 
; 364  : 			if (this->CanWeMoveForward2(sx + this->Dir[dir*2], sy + this->Dir[dir*2+1]) != FALSE )

  0034f	8b 45 bc	 mov	 eax, DWORD PTR _dir$205270[ebp]
  00352	d1 e0		 shl	 eax, 1
  00354	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00357	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  0035a	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  00361	52		 push	 edx
  00362	8b 45 bc	 mov	 eax, DWORD PTR _dir$205270[ebp]
  00365	d1 e0		 shl	 eax, 1
  00367	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0036a	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  0036d	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00374	52		 push	 edx
  00375	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00378	e8 00 00 00 00	 call	 ?CanWeMoveForward2@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward2
  0037d	85 c0		 test	 eax, eax
  0037f	74 43		 je	 SHORT $LN4@FindNextDi@2

; 365  : 			{
; 366  : 				int path = this->VerifyThatOnPath(sx, sy);

  00381	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00384	50		 push	 eax
  00385	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  00388	51		 push	 ecx
  00389	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0038c	e8 00 00 00 00	 call	 ?VerifyThatOnPath@PATH@@AAEHHH@Z ; PATH::VerifyThatOnPath
  00391	89 45 b8	 mov	 DWORD PTR _path$205272[ebp], eax

; 367  : 
; 368  : 				if ( path != -1 )

  00394	83 7d b8 ff	 cmp	 DWORD PTR _path$205272[ebp], -1
  00398	74 22		 je	 SHORT $LN3@FindNextDi@2

; 369  : 				{
; 370  : 					this->HitMap[sx+ sy * this->Width] = 1;

  0039a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0039d	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  003a0	0f af 08	 imul	 ecx, DWORD PTR [eax]
  003a3	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  003a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003a9	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  003af	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 371  : 					this->NumPath = path;

  003b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003b6	8b 4d b8	 mov	 ecx, DWORD PTR _path$205272[ebp]
  003b9	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN3@FindNextDi@2:

; 372  : 				}
; 373  : 				return dir;

  003bc	8b 45 bc	 mov	 eax, DWORD PTR _dir$205270[ebp]
  003bf	e9 a9 00 00 00	 jmp	 $LN28@FindNextDi@2
$LN4@FindNextDi@2:

; 374  : 			}
; 375  : 
; 376  : 			int dir2 = WhichDir+9;

  003c4	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  003c7	83 c0 09	 add	 eax, 9
  003ca	89 45 b4	 mov	 DWORD PTR _dir2$205274[ebp], eax

; 377  : 			dir2 %= 8;

  003cd	8b 45 b4	 mov	 eax, DWORD PTR _dir2$205274[ebp]
  003d0	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  003d5	79 05		 jns	 SHORT $LN34@FindNextDi@2
  003d7	48		 dec	 eax
  003d8	83 c8 f8	 or	 eax, -8			; fffffff8H
  003db	40		 inc	 eax
$LN34@FindNextDi@2:
  003dc	89 45 b4	 mov	 DWORD PTR _dir2$205274[ebp], eax

; 378  : 
; 379  : 			if (CanWeMoveForward2(sx+this->Dir[dir2*2], sy+this->Dir[dir2*2+1]) != FALSE )

  003df	8b 45 b4	 mov	 eax, DWORD PTR _dir2$205274[ebp]
  003e2	d1 e0		 shl	 eax, 1
  003e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e7	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  003ea	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  003f1	52		 push	 edx
  003f2	8b 45 b4	 mov	 eax, DWORD PTR _dir2$205274[ebp]
  003f5	d1 e0		 shl	 eax, 1
  003f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fa	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  003fd	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00404	52		 push	 edx
  00405	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00408	e8 00 00 00 00	 call	 ?CanWeMoveForward2@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward2
  0040d	85 c0		 test	 eax, eax
  0040f	74 40		 je	 SHORT $LN5@FindNextDi@2

; 380  : 			{
; 381  : 				int path = this->VerifyThatOnPath(sx, sy);

  00411	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00414	50		 push	 eax
  00415	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  00418	51		 push	 ecx
  00419	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0041c	e8 00 00 00 00	 call	 ?VerifyThatOnPath@PATH@@AAEHHH@Z ; PATH::VerifyThatOnPath
  00421	89 45 b0	 mov	 DWORD PTR _path$205276[ebp], eax

; 382  : 
; 383  : 				if ( path != -1 )

  00424	83 7d b0 ff	 cmp	 DWORD PTR _path$205276[ebp], -1
  00428	74 22		 je	 SHORT $LN1@FindNextDi@2

; 384  : 				{
; 385  : 					this->HitMap[sx + sy * this->Width] = 1;

  0042a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0042d	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  00430	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00433	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  00436	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00439	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  0043f	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 386  : 					this->NumPath = path;

  00443	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00446	8b 4d b0	 mov	 ecx, DWORD PTR _path$205276[ebp]
  00449	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@FindNextDi@2:

; 387  : 				}
; 388  : 				return dir2;

  0044c	8b 45 b4	 mov	 eax, DWORD PTR _dir2$205274[ebp]
  0044f	eb 1c		 jmp	 SHORT $LN28@FindNextDi@2
$LN5@FindNextDi@2:

; 389  : 			}
; 390  : 		}
; 391  : 		
; 392  : 		this->HitMap[sx + sy*this->Width]=1;

  00451	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00454	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  00457	0f af 08	 imul	 ecx, DWORD PTR [eax]
  0045a	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  0045d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00460	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  00466	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 393  : 		return -1;

  0046a	83 c8 ff	 or	 eax, -1
$LN28@FindNextDi@2:

; 394  : 	};

  0046d	5f		 pop	 edi
  0046e	5e		 pop	 esi
  0046f	5b		 pop	 ebx
  00470	8b e5		 mov	 esp, ebp
  00472	5d		 pop	 ebp
  00473	c2 1c 00	 ret	 28			; 0000001cH
?FindNextDir2@PATH@@AAEHHHHHH_N0@Z ENDP			; PATH::FindNextDir2
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?CanWeMoveForward2@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_which$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?CanWeMoveForward2@PATH@@AAEHHH@Z PROC			; PATH::CanWeMoveForward2, COMDAT
; _this$ = ecx

; 80   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 		int which = x +  y* this->Width ;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00012	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00015	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  00018	89 4d f8	 mov	 DWORD PTR _which$[ebp], ecx

; 82   : 		
; 83   : 		if ( x >= this->Width || x < 0 || y >= this->Height || y < 0 )

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00021	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00023	7d 17		 jge	 SHORT $LN3@CanWeMoveF@2
  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	7c 11		 jl	 SHORT $LN3@CanWeMoveF@2
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00031	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00034	7d 06		 jge	 SHORT $LN3@CanWeMoveF@2
  00036	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  0003a	7d 04		 jge	 SHORT $LN4@CanWeMoveF@2
$LN3@CanWeMoveF@2:

; 84   : 		{
; 85   : 			return false;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 42		 jmp	 SHORT $LN5@CanWeMoveF@2
$LN4@CanWeMoveF@2:

; 86   : 		}
; 87   : 
; 88   : 		if ( this->Map[which] >= 1 || this->HitMap[which] != 0 )

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00049	8b 55 f8	 mov	 edx, DWORD PTR _which$[ebp]
  0004c	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  00050	83 f8 01	 cmp	 eax, 1
  00053	7d 14		 jge	 SHORT $LN1@CanWeMoveF@2
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _which$[ebp]
  00061	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  00065	85 c0		 test	 eax, eax
  00067	74 14		 je	 SHORT $LN2@CanWeMoveF@2
$LN1@CanWeMoveF@2:

; 89   : 		{
; 90   : 			this->HitMap[which] = 1;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  00072	8b 55 f8	 mov	 edx, DWORD PTR _which$[ebp]
  00075	c6 04 11 01	 mov	 BYTE PTR [ecx+edx], 1

; 91   : 			return false;

  00079	33 c0		 xor	 eax, eax
  0007b	eb 05		 jmp	 SHORT $LN5@CanWeMoveF@2
$LN2@CanWeMoveF@2:

; 92   : 		}
; 93   : 		return TRUE;

  0007d	b8 01 00 00 00	 mov	 eax, 1
$LN5@CanWeMoveF@2:

; 94   : 	};

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
?CanWeMoveForward2@PATH@@AAEHHH@Z ENDP			; PATH::CanWeMoveForward2
_TEXT	ENDS
PUBLIC	?FindPath3@PATH@@QAE_NHHHH_N@Z			; PATH::FindPath3
PUBLIC	?PathFinding4@MapClass@@QAE_NHHHHPAUPATH_t@@@Z	; MapClass::PathFinding4
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapclass.cpp
_TEXT	SEGMENT
_n$230220 = -24						; size = 4
_py$230219 = -20					; size = 4
_px$230218 = -16					; size = 4
_lc3$230216 = -12					; size = 4
_Success$ = -5						; size = 1
_this$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
_a$ = 24						; size = 4
?PathFinding4@MapClass@@QAE_NHHHHPAUPATH_t@@@Z PROC	; MapClass::PathFinding4
; _this$ = ecx

; 950  : {

  02010	55		 push	 ebp
  02011	8b ec		 mov	 ebp, esp
  02013	83 ec 58	 sub	 esp, 88			; 00000058H
  02016	53		 push	 ebx
  02017	56		 push	 esi
  02018	57		 push	 edi
  02019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 951  : 	bool Success = this->path->FindPath3(sx, sy, tx, ty, true);

  0201c	6a 01		 push	 1
  0201e	8b 45 14	 mov	 eax, DWORD PTR _ty$[ebp]
  02021	50		 push	 eax
  02022	8b 4d 10	 mov	 ecx, DWORD PTR _tx$[ebp]
  02025	51		 push	 ecx
  02026	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  02029	52		 push	 edx
  0202a	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  0202d	50		 push	 eax
  0202e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02031	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  02034	e8 00 00 00 00	 call	 ?FindPath3@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath3
  02039	88 45 fb	 mov	 BYTE PTR _Success$[ebp], al

; 952  : 
; 953  : 	if ( Success == false )

  0203c	0f b6 45 fb	 movzx	 eax, BYTE PTR _Success$[ebp]
  02040	85 c0		 test	 eax, eax
  02042	75 20		 jne	 SHORT $LN6@PathFindin@3

; 954  : 	{
; 955  : 		Success = this->path->FindPath3(sx, sy, tx, ty, false);

  02044	6a 00		 push	 0
  02046	8b 45 14	 mov	 eax, DWORD PTR _ty$[ebp]
  02049	50		 push	 eax
  0204a	8b 4d 10	 mov	 ecx, DWORD PTR _tx$[ebp]
  0204d	51		 push	 ecx
  0204e	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  02051	52		 push	 edx
  02052	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  02055	50		 push	 eax
  02056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02059	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0205c	e8 00 00 00 00	 call	 ?FindPath3@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath3
  02061	88 45 fb	 mov	 BYTE PTR _Success$[ebp], al
$LN6@PathFindin@3:

; 956  : 	}
; 957  : 
; 958  : 	if ( Success != false )

  02064	0f b6 45 fb	 movzx	 eax, BYTE PTR _Success$[ebp]
  02068	85 c0		 test	 eax, eax
  0206a	0f 84 8a 00 00
	00		 je	 $LN5@PathFindin@3

; 959  : 	{
; 960  : 		int lc3 = this->path->GetPath();

  02070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02073	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  02076	e8 00 00 00 00	 call	 ?GetPath@PATH@@QAEHXZ	; PATH::GetPath
  0207b	89 45 f4	 mov	 DWORD PTR _lc3$230216[ebp], eax

; 961  : 
; 962  : 		if ( lc3 > 1 )

  0207e	83 7d f4 01	 cmp	 DWORD PTR _lc3$230216[ebp], 1
  02082	7e 76		 jle	 SHORT $LN5@PathFindin@3

; 963  : 		{
; 964  : 			a->PathNum = lc3;

  02084	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  02087	8b 4d f4	 mov	 ecx, DWORD PTR _lc3$230216[ebp]
  0208a	89 08		 mov	 DWORD PTR [eax], ecx

; 965  : 			BYTE * px = this->path->GetPathX();

  0208c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0208f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  02092	e8 00 00 00 00	 call	 ?GetPathX@PATH@@QAEPAEXZ ; PATH::GetPathX
  02097	89 45 f0	 mov	 DWORD PTR _px$230218[ebp], eax

; 966  : 			BYTE * py = this->path->GetPathY();

  0209a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0209d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  020a0	e8 00 00 00 00	 call	 ?GetPathY@PATH@@QAEPAEXZ ; PATH::GetPathY
  020a5	89 45 ec	 mov	 DWORD PTR _py$230219[ebp], eax

; 967  : 
; 968  : 			for (int n=0;n<a->PathNum;n++)

  020a8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _n$230220[ebp], 0
  020af	eb 09		 jmp	 SHORT $LN3@PathFindin@3
$LN2@PathFindin@3:
  020b1	8b 45 e8	 mov	 eax, DWORD PTR _n$230220[ebp]
  020b4	83 c0 01	 add	 eax, 1
  020b7	89 45 e8	 mov	 DWORD PTR _n$230220[ebp], eax
$LN3@PathFindin@3:
  020ba	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  020bd	8b 4d e8	 mov	 ecx, DWORD PTR _n$230220[ebp]
  020c0	3b 08		 cmp	 ecx, DWORD PTR [eax]
  020c2	7d 28		 jge	 SHORT $LN1@PathFindin@3

; 969  : 			{
; 970  : 				a->PathX[n] = px[n];

  020c4	8b 45 f0	 mov	 eax, DWORD PTR _px$230218[ebp]
  020c7	03 45 e8	 add	 eax, DWORD PTR _n$230220[ebp]
  020ca	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  020cd	8b 55 e8	 mov	 edx, DWORD PTR _n$230220[ebp]
  020d0	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  020d3	89 4c 90 04	 mov	 DWORD PTR [eax+edx*4+4], ecx

; 971  : 				a->PathY[n] = py[n];

  020d7	8b 45 ec	 mov	 eax, DWORD PTR _py$230219[ebp]
  020da	03 45 e8	 add	 eax, DWORD PTR _n$230220[ebp]
  020dd	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  020e0	8b 55 e8	 mov	 edx, DWORD PTR _n$230220[ebp]
  020e3	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  020e6	89 4c 90 40	 mov	 DWORD PTR [eax+edx*4+64], ecx

; 972  : 			}

  020ea	eb c5		 jmp	 SHORT $LN2@PathFindin@3
$LN1@PathFindin@3:

; 973  : 
; 974  : 			a->CurrentPath = 0;

  020ec	8b 45 18	 mov	 eax, DWORD PTR _a$[ebp]
  020ef	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0

; 975  : 			return 1;

  020f6	b0 01		 mov	 al, 1
  020f8	eb 02		 jmp	 SHORT $LN7@PathFindin@3
$LN5@PathFindin@3:

; 976  : 		}
; 977  : 
; 978  : 	}
; 979  : 
; 980  : 	return false;

  020fa	32 c0		 xor	 al, al
$LN7@PathFindin@3:

; 981  : }

  020fc	5f		 pop	 edi
  020fd	5e		 pop	 esi
  020fe	5b		 pop	 ebx
  020ff	8b e5		 mov	 esp, ebp
  02101	5d		 pop	 ebp
  02102	c2 14 00	 ret	 20			; 00000014H
?PathFinding4@MapClass@@QAE_NHHHHPAUPATH_t@@@Z ENDP	; MapClass::PathFinding4
_TEXT	ENDS
PUBLIC	?FindNextDir3@PATH@@AAEHHHHHH_N0@Z		; PATH::FindNextDir3
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\zzzpath.h
;	COMDAT ?FindPath3@PATH@@QAE_NHHHH_N@Z
_TEXT	SEGMENT
_First$ = -13						; size = 1
_NumFails$ = -12					; size = 4
_WhichDir$ = -8						; size = 4
_this$ = -4						; size = 4
_startx$ = 8						; size = 4
_starty$ = 12						; size = 4
_endx$ = 16						; size = 4
_endy$ = 20						; size = 4
_ErrorCheck$ = 24					; size = 1
?FindPath3@PATH@@QAE_NHHHH_N@Z PROC			; PATH::FindPath3, COMDAT
; _this$ = ecx

; 678  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 679  : 		this->NumPath = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 680  : 
; 681  : 		int WhichDir=0;

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _WhichDir$[ebp], 0

; 682  : 		int NumFails=0;

  0001d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _NumFails$[ebp], 0

; 683  : 		bool First;
; 684  : 
; 685  : 		
; 686  : 		memset(this->HitMap, 0, this->Width * this->Height);

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	0f af 51 04	 imul	 edx, DWORD PTR [ecx+4]
  00030	52		 push	 edx
  00031	6a 00		 push	 0
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 687  : 		First = true;

  00045	c6 45 f3 01	 mov	 BYTE PTR _First$[ebp], 1
$LN11@FindPath3:

; 688  : 
; 689  : 		while ( (startx != endx) || (starty != endy) )

  00049	8b 45 08	 mov	 eax, DWORD PTR _startx$[ebp]
  0004c	3b 45 10	 cmp	 eax, DWORD PTR _endx$[ebp]
  0004f	75 0c		 jne	 SHORT $LN9@FindPath3
  00051	8b 45 0c	 mov	 eax, DWORD PTR _starty$[ebp]
  00054	3b 45 14	 cmp	 eax, DWORD PTR _endy$[ebp]
  00057	0f 84 13 01 00
	00		 je	 $LN10@FindPath3
$LN9@FindPath3:

; 690  : 		{
; 691  : 			WhichDir = this->FindNextDir3(startx, starty, endx, endy, WhichDir, First, ErrorCheck);

  0005d	0f b6 45 18	 movzx	 eax, BYTE PTR _ErrorCheck$[ebp]
  00061	50		 push	 eax
  00062	0f b6 4d f3	 movzx	 ecx, BYTE PTR _First$[ebp]
  00066	51		 push	 ecx
  00067	8b 55 f8	 mov	 edx, DWORD PTR _WhichDir$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 14	 mov	 eax, DWORD PTR _endy$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _endx$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  00076	52		 push	 edx
  00077	8b 45 08	 mov	 eax, DWORD PTR _startx$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?FindNextDir3@PATH@@AAEHHHHHH_N0@Z ; PATH::FindNextDir3
  00083	89 45 f8	 mov	 DWORD PTR _WhichDir$[ebp], eax

; 692  : 			First = 0;

  00086	c6 45 f3 00	 mov	 BYTE PTR _First$[ebp], 0

; 693  : 			
; 694  : 			if ( WhichDir >= 0 )

  0008a	83 7d f8 00	 cmp	 DWORD PTR _WhichDir$[ebp], 0
  0008e	7c 78		 jl	 SHORT $LN8@FindPath3

; 695  : 			{
; 696  : 				this->PathX[this->NumPath] = startx;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00096	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00099	8a 45 08	 mov	 al, BYTE PTR _startx$[ebp]
  0009c	88 44 0a 0c	 mov	 BYTE PTR [edx+ecx+12], al

; 697  : 				this->PathY[this->NumPath] = starty;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	8a 45 0c	 mov	 al, BYTE PTR _starty$[ebp]
  000ac	88 84 0a 00 02
	00 00		 mov	 BYTE PTR [edx+ecx+512], al

; 698  : 				startx += this->Dir[WhichDir*2];

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  000b6	d1 e0		 shl	 eax, 1
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	8b 55 08	 mov	 edx, DWORD PTR _startx$[ebp]
  000be	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  000c5	89 55 08	 mov	 DWORD PTR _startx$[ebp], edx

; 699  : 				starty += this->Dir[WhichDir*2+1];

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  000cb	d1 e0		 shl	 eax, 1
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  000d3	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  000da	89 55 0c	 mov	 DWORD PTR _starty$[ebp], edx

; 700  : 				this->NumPath++;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e3	83 c1 01	 add	 ecx, 1
  000e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 701  : 
; 702  : 				if ( this->NumPath >= 14 )

  000ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	83 78 08 0e	 cmp	 DWORD PTR [eax+8], 14	; 0000000eH
  000f3	7c 11		 jl	 SHORT $LN7@FindPath3

; 703  : 				{
; 704  : 					this->NumPath--;

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000fb	83 e9 01	 sub	 ecx, 1
  000fe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00101	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 705  : 					break;

  00104	eb 6a		 jmp	 SHORT $LN10@FindPath3
$LN7@FindPath3:

; 706  : 				}
; 707  : 			}

  00106	eb 63		 jmp	 SHORT $LN6@FindPath3
$LN8@FindPath3:

; 708  : 			else if ( ErrorCheck != FALSE )

  00108	0f b6 45 18	 movzx	 eax, BYTE PTR _ErrorCheck$[ebp]
  0010c	85 c0		 test	 eax, eax
  0010e	74 59		 je	 SHORT $LN5@FindPath3

; 709  : 			{
; 710  : 				this->NumPath--;

  00110	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00113	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00116	83 e9 01	 sub	 ecx, 1
  00119	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011c	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 711  : 
; 712  : 				if ( this->NumPath < 0 )

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00122	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00126	7d 07		 jge	 SHORT $LN4@FindPath3

; 713  : 				{
; 714  : 					return false;

  00128	32 c0		 xor	 al, al
  0012a	e9 82 00 00 00	 jmp	 $LN12@FindPath3
$LN4@FindPath3:

; 715  : 				}
; 716  : 
; 717  : 				startx = this->PathX[this->NumPath];

  0012f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00132	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00135	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00138	0f b6 44 0a 0c	 movzx	 eax, BYTE PTR [edx+ecx+12]
  0013d	89 45 08	 mov	 DWORD PTR _startx$[ebp], eax

; 718  : 				starty = this->PathY[this->NumPath];

  00140	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00143	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00146	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00149	0f b6 84 0a 00
	02 00 00	 movzx	 eax, BYTE PTR [edx+ecx+512]
  00151	89 45 0c	 mov	 DWORD PTR _starty$[ebp], eax

; 719  : 				NumFails++;

  00154	8b 45 f4	 mov	 eax, DWORD PTR _NumFails$[ebp]
  00157	83 c0 01	 add	 eax, 1
  0015a	89 45 f4	 mov	 DWORD PTR _NumFails$[ebp], eax

; 720  : 
; 721  : 				if ( NumFails >= 10 )

  0015d	83 7d f4 0a	 cmp	 DWORD PTR _NumFails$[ebp], 10 ; 0000000aH
  00161	7c 04		 jl	 SHORT $LN3@FindPath3

; 722  : 				{
; 723  : 					return false;

  00163	32 c0		 xor	 al, al
  00165	eb 4a		 jmp	 SHORT $LN12@FindPath3
$LN3@FindPath3:

; 724  : 				}
; 725  : 			}
; 726  : 			else

  00167	eb 02		 jmp	 SHORT $LN6@FindPath3
$LN5@FindPath3:

; 727  : 			{
; 728  : 				break;

  00169	eb 05		 jmp	 SHORT $LN10@FindPath3
$LN6@FindPath3:

; 729  : 			}
; 730  : 			
; 731  : 		}

  0016b	e9 d9 fe ff ff	 jmp	 $LN11@FindPath3
$LN10@FindPath3:

; 732  : 
; 733  : 		this->PathX[this->NumPath] = startx;

  00170	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00173	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00176	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00179	8a 45 08	 mov	 al, BYTE PTR _startx$[ebp]
  0017c	88 44 0a 0c	 mov	 BYTE PTR [edx+ecx+12], al

; 734  : 		this->PathY[this->NumPath] = starty;

  00180	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00183	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00186	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00189	8a 45 0c	 mov	 al, BYTE PTR _starty$[ebp]
  0018c	88 84 0a 00 02
	00 00		 mov	 BYTE PTR [edx+ecx+512], al

; 735  : 		this->NumPath++;

  00193	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00196	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00199	83 c1 01	 add	 ecx, 1
  0019c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0019f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 736  : 
; 737  : 		if ( this->NumPath >= 15 )

  001a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	83 78 08 0f	 cmp	 DWORD PTR [eax+8], 15	; 0000000fH
  001a9	7c 04		 jl	 SHORT $LN1@FindPath3

; 738  : 		{
; 739  : 			return false;

  001ab	32 c0		 xor	 al, al
  001ad	eb 02		 jmp	 SHORT $LN12@FindPath3
$LN1@FindPath3:

; 740  : 		}
; 741  : 
; 742  : 		return true;

  001af	b0 01		 mov	 al, 1
$LN12@FindPath3:

; 743  : 	};

  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	5b		 pop	 ebx
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c2 14 00	 ret	 20			; 00000014H
?FindPath3@PATH@@QAE_NHHHH_N@Z ENDP			; PATH::FindPath3
_TEXT	ENDS
PUBLIC	?CanWeMoveForward3@PATH@@AAEHHH@Z		; PATH::CanWeMoveForward3
; Function compile flags: /Odtp /ZI
;	COMDAT ?FindNextDir3@PATH@@AAEHHHHHH_N0@Z
_TEXT	SEGMENT
_path$205322 = -76					; size = 4
_dir2$205320 = -72					; size = 4
_path$205318 = -68					; size = 4
_dir$205316 = -64					; size = 4
_path$205313 = -60					; size = 4
_dist$205308 = -56					; size = 4
_endy$205307 = -52					; size = 4
_endx$205306 = -48					; size = 4
_dist$205299 = -44					; size = 4
_endy$205298 = -40					; size = 4
_endx$205297 = -36					; size = 4
_dist$205290 = -32					; size = 4
_endy$205289 = -28					; size = 4
_endx$205288 = -24					; size = 4
_i$ = -20						; size = 4
_WhichDir$ = -16					; size = 4
_ldir$ = -12						; size = 4
_MinDist$ = -8						; size = 4
_this$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_dirstart$ = 24						; size = 4
_First$ = 28						; size = 1
_ErrorCheck$ = 32					; size = 1
?FindNextDir3@PATH@@AAEHHHHHH_N0@Z PROC			; PATH::FindNextDir3, COMDAT
; _this$ = ecx

; 397  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 398  : 		int MinDist = 10000000;

  0000f	c7 45 f8 80 96
	98 00		 mov	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H

; 399  : 		long ldir;
; 400  : 		int WhichDir = 0;

  00016	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _WhichDir$[ebp], 0

; 401  : 		int i;
; 402  : 
; 403  : 		if ( First != 0 )

  0001d	0f b6 45 1c	 movzx	 eax, BYTE PTR _First$[ebp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 b9 00 00
	00		 je	 $LN26@FindNextDi@3

; 404  : 		{
; 405  : 			for ( i = 0 ; i<8 ; i++ )

  00029	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00030	eb 09		 jmp	 SHORT $LN25@FindNextDi@3
$LN24@FindNextDi@3:
  00032	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00035	83 c0 01	 add	 eax, 1
  00038	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN25@FindNextDi@3:
  0003b	83 7d ec 08	 cmp	 DWORD PTR _i$[ebp], 8
  0003f	0f 8d 98 00 00
	00		 jge	 $LN23@FindNextDi@3

; 406  : 			{
; 407  : 				ldir = i % 8 ;

  00045	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00048	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0004d	79 05		 jns	 SHORT $LN29@FindNextDi@3
  0004f	48		 dec	 eax
  00050	83 c8 f8	 or	 eax, -8			; fffffff8H
  00053	40		 inc	 eax
$LN29@FindNextDi@3:
  00054	89 45 f4	 mov	 DWORD PTR _ldir$[ebp], eax

; 408  : 				int endx = sx + this->Dir[ldir*2];

  00057	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0005a	d1 e0		 shl	 eax, 1
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  00062	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00069	89 55 e8	 mov	 DWORD PTR _endx$205288[ebp], edx

; 409  : 				int endy = sy + this->Dir[ldir*2+1];

  0006c	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0006f	d1 e0		 shl	 eax, 1
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00077	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  0007e	89 55 e4	 mov	 DWORD PTR _endy$205289[ebp], edx

; 410  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00081	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  00084	50		 push	 eax
  00085	8b 4d 10	 mov	 ecx, DWORD PTR _dx$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 e4	 mov	 edx, DWORD PTR _endy$205289[ebp]
  0008c	52		 push	 edx
  0008d	8b 45 e8	 mov	 eax, DWORD PTR _endx$205288[ebp]
  00090	50		 push	 eax
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  00099	89 45 e0	 mov	 DWORD PTR _dist$205290[ebp], eax

; 411  : 
; 412  : 				if ( MinDist > dist )

  0009c	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  0009f	3b 45 e0	 cmp	 eax, DWORD PTR _dist$205290[ebp]
  000a2	7e 34		 jle	 SHORT $LN22@FindNextDi@3

; 413  : 				{
; 414  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE && this->CanWeMoveForward3(endx, endy) != FALSE)

  000a4	8b 45 e4	 mov	 eax, DWORD PTR _endy$205289[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d e8	 mov	 ecx, DWORD PTR _endx$205288[ebp]
  000ab	51		 push	 ecx
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?IsThisSpotOK@PATH@@AAEHHH@Z ; PATH::IsThisSpotOK
  000b4	85 c0		 test	 eax, eax
  000b6	74 20		 je	 SHORT $LN22@FindNextDi@3
  000b8	8b 45 e4	 mov	 eax, DWORD PTR _endy$205289[ebp]
  000bb	50		 push	 eax
  000bc	8b 4d e8	 mov	 ecx, DWORD PTR _endx$205288[ebp]
  000bf	51		 push	 ecx
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?CanWeMoveForward3@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward3
  000c8	85 c0		 test	 eax, eax
  000ca	74 0c		 je	 SHORT $LN22@FindNextDi@3

; 415  : 					{
; 416  : 						MinDist = dist;

  000cc	8b 45 e0	 mov	 eax, DWORD PTR _dist$205290[ebp]
  000cf	89 45 f8	 mov	 DWORD PTR _MinDist$[ebp], eax

; 417  : 						WhichDir = ldir;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  000d5	89 45 f0	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN22@FindNextDi@3:

; 418  : 					}
; 419  : 				}
; 420  : 			}

  000d8	e9 55 ff ff ff	 jmp	 $LN24@FindNextDi@3
$LN23@FindNextDi@3:

; 421  : 		}
; 422  : 		else

  000dd	e9 83 01 00 00	 jmp	 $LN20@FindNextDi@3
$LN26@FindNextDi@3:

; 423  : 		{
; 424  : 			for ( i = dirstart+7 ; i <= dirstart+9 ; i++ )

  000e2	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  000e5	83 c0 07	 add	 eax, 7
  000e8	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  000eb	eb 09		 jmp	 SHORT $LN19@FindNextDi@3
$LN18@FindNextDi@3:
  000ed	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  000f0	83 c0 01	 add	 eax, 1
  000f3	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN19@FindNextDi@3:
  000f6	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  000f9	83 c0 09	 add	 eax, 9
  000fc	39 45 ec	 cmp	 DWORD PTR _i$[ebp], eax
  000ff	0f 8f 98 00 00
	00		 jg	 $LN17@FindNextDi@3

; 425  : 			{
; 426  : 				ldir = i % 8;

  00105	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00108	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0010d	79 05		 jns	 SHORT $LN30@FindNextDi@3
  0010f	48		 dec	 eax
  00110	83 c8 f8	 or	 eax, -8			; fffffff8H
  00113	40		 inc	 eax
$LN30@FindNextDi@3:
  00114	89 45 f4	 mov	 DWORD PTR _ldir$[ebp], eax

; 427  : 				int endx = sx + this->Dir[ldir*2];

  00117	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0011a	d1 e0		 shl	 eax, 1
  0011c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  00122	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00129	89 55 dc	 mov	 DWORD PTR _endx$205297[ebp], edx

; 428  : 				int endy = sy + this->Dir[ldir*2+1];

  0012c	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0012f	d1 e0		 shl	 eax, 1
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00137	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  0013e	89 55 d8	 mov	 DWORD PTR _endy$205298[ebp], edx

; 429  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00141	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  00144	50		 push	 eax
  00145	8b 4d 10	 mov	 ecx, DWORD PTR _dx$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 d8	 mov	 edx, DWORD PTR _endy$205298[ebp]
  0014c	52		 push	 edx
  0014d	8b 45 dc	 mov	 eax, DWORD PTR _endx$205297[ebp]
  00150	50		 push	 eax
  00151	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00154	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  00159	89 45 d4	 mov	 DWORD PTR _dist$205299[ebp], eax

; 430  : 
; 431  : 				if ( MinDist > dist )

  0015c	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  0015f	3b 45 d4	 cmp	 eax, DWORD PTR _dist$205299[ebp]
  00162	7e 34		 jle	 SHORT $LN16@FindNextDi@3

; 432  : 				{
; 433  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE && this->CanWeMoveForward3(endx, endy) != FALSE)

  00164	8b 45 d8	 mov	 eax, DWORD PTR _endy$205298[ebp]
  00167	50		 push	 eax
  00168	8b 4d dc	 mov	 ecx, DWORD PTR _endx$205297[ebp]
  0016b	51		 push	 ecx
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	e8 00 00 00 00	 call	 ?IsThisSpotOK@PATH@@AAEHHH@Z ; PATH::IsThisSpotOK
  00174	85 c0		 test	 eax, eax
  00176	74 20		 je	 SHORT $LN16@FindNextDi@3
  00178	8b 45 d8	 mov	 eax, DWORD PTR _endy$205298[ebp]
  0017b	50		 push	 eax
  0017c	8b 4d dc	 mov	 ecx, DWORD PTR _endx$205297[ebp]
  0017f	51		 push	 ecx
  00180	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00183	e8 00 00 00 00	 call	 ?CanWeMoveForward3@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward3
  00188	85 c0		 test	 eax, eax
  0018a	74 0c		 je	 SHORT $LN16@FindNextDi@3

; 434  : 					{
; 435  : 						MinDist = dist;

  0018c	8b 45 d4	 mov	 eax, DWORD PTR _dist$205299[ebp]
  0018f	89 45 f8	 mov	 DWORD PTR _MinDist$[ebp], eax

; 436  : 						WhichDir = ldir;

  00192	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  00195	89 45 f0	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN16@FindNextDi@3:

; 437  : 					}
; 438  : 				}
; 439  : 			}

  00198	e9 50 ff ff ff	 jmp	 $LN18@FindNextDi@3
$LN17@FindNextDi@3:

; 440  : 
; 441  : 			if ( MinDist == 10000000 )

  0019d	81 7d f8 80 96
	98 00		 cmp	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H
  001a4	0f 85 bb 00 00
	00		 jne	 $LN20@FindNextDi@3

; 442  : 			{
; 443  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  001aa	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  001ad	83 c0 02	 add	 eax, 2
  001b0	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  001b3	eb 09		 jmp	 SHORT $LN13@FindNextDi@3
$LN12@FindNextDi@3:
  001b5	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  001b8	83 c0 01	 add	 eax, 1
  001bb	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN13@FindNextDi@3:
  001be	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  001c1	83 c0 06	 add	 eax, 6
  001c4	39 45 ec	 cmp	 DWORD PTR _i$[ebp], eax
  001c7	0f 8f 98 00 00
	00		 jg	 $LN20@FindNextDi@3

; 444  : 				{
; 445  : 					ldir = i % 8;

  001cd	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  001d0	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  001d5	79 05		 jns	 SHORT $LN31@FindNextDi@3
  001d7	48		 dec	 eax
  001d8	83 c8 f8	 or	 eax, -8			; fffffff8H
  001db	40		 inc	 eax
$LN31@FindNextDi@3:
  001dc	89 45 f4	 mov	 DWORD PTR _ldir$[ebp], eax

; 446  : 					int endx = sx + this->Dir[ldir*2];

  001df	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  001e2	d1 e0		 shl	 eax, 1
  001e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e7	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  001ea	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  001f1	89 55 d0	 mov	 DWORD PTR _endx$205306[ebp], edx

; 447  : 					int endy = sy + this->Dir[ldir*2+1];

  001f4	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  001f7	d1 e0		 shl	 eax, 1
  001f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fc	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  001ff	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  00206	89 55 cc	 mov	 DWORD PTR _endy$205307[ebp], edx

; 448  : 					int dist = this->GetDist(endx, endy, dx, dy);

  00209	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  0020c	50		 push	 eax
  0020d	8b 4d 10	 mov	 ecx, DWORD PTR _dx$[ebp]
  00210	51		 push	 ecx
  00211	8b 55 cc	 mov	 edx, DWORD PTR _endy$205307[ebp]
  00214	52		 push	 edx
  00215	8b 45 d0	 mov	 eax, DWORD PTR _endx$205306[ebp]
  00218	50		 push	 eax
  00219	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021c	e8 00 00 00 00	 call	 ?GetDist@PATH@@AAEHHHHH@Z ; PATH::GetDist
  00221	89 45 c8	 mov	 DWORD PTR _dist$205308[ebp], eax

; 449  : 
; 450  : 					if ( MinDist > dist )

  00224	8b 45 f8	 mov	 eax, DWORD PTR _MinDist$[ebp]
  00227	3b 45 c8	 cmp	 eax, DWORD PTR _dist$205308[ebp]
  0022a	7e 34		 jle	 SHORT $LN10@FindNextDi@3

; 451  : 					{
; 452  : 						if ( this->IsThisSpotOK(endx, endy) != FALSE && this->CanWeMoveForward3(endx, endy) != FALSE)

  0022c	8b 45 cc	 mov	 eax, DWORD PTR _endy$205307[ebp]
  0022f	50		 push	 eax
  00230	8b 4d d0	 mov	 ecx, DWORD PTR _endx$205306[ebp]
  00233	51		 push	 ecx
  00234	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00237	e8 00 00 00 00	 call	 ?IsThisSpotOK@PATH@@AAEHHH@Z ; PATH::IsThisSpotOK
  0023c	85 c0		 test	 eax, eax
  0023e	74 20		 je	 SHORT $LN10@FindNextDi@3
  00240	8b 45 cc	 mov	 eax, DWORD PTR _endy$205307[ebp]
  00243	50		 push	 eax
  00244	8b 4d d0	 mov	 ecx, DWORD PTR _endx$205306[ebp]
  00247	51		 push	 ecx
  00248	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024b	e8 00 00 00 00	 call	 ?CanWeMoveForward3@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward3
  00250	85 c0		 test	 eax, eax
  00252	74 0c		 je	 SHORT $LN10@FindNextDi@3

; 453  : 						{
; 454  : 							MinDist = dist;

  00254	8b 45 c8	 mov	 eax, DWORD PTR _dist$205308[ebp]
  00257	89 45 f8	 mov	 DWORD PTR _MinDist$[ebp], eax

; 455  : 							WhichDir = ldir;

  0025a	8b 45 f4	 mov	 eax, DWORD PTR _ldir$[ebp]
  0025d	89 45 f0	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN10@FindNextDi@3:

; 456  : 						}
; 457  : 					}
; 458  : 				}

  00260	e9 50 ff ff ff	 jmp	 $LN12@FindNextDi@3
$LN20@FindNextDi@3:

; 459  : 			}
; 460  : 		}
; 461  : 		
; 462  : 		if ( MinDist == 10000000 )

  00265	81 7d f8 80 96
	98 00		 cmp	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H
  0026c	75 08		 jne	 SHORT $LN8@FindNextDi@3

; 463  : 		{
; 464  : 			return -1;

  0026e	83 c8 ff	 or	 eax, -1
  00271	e9 ba 01 00 00	 jmp	 $LN27@FindNextDi@3
$LN8@FindNextDi@3:

; 465  : 		}
; 466  : 		
; 467  : 		if ( this->CanWeMoveForward3(sx+this->Dir[WhichDir*2],sy+ this->Dir[WhichDir*2+1]) != FALSE )

  00276	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00279	d1 e0		 shl	 eax, 1
  0027b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0027e	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00281	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  00288	52		 push	 edx
  00289	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  0028c	d1 e0		 shl	 eax, 1
  0028e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00291	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  00294	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  0029b	52		 push	 edx
  0029c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029f	e8 00 00 00 00	 call	 ?CanWeMoveForward3@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward3
  002a4	85 c0		 test	 eax, eax
  002a6	74 43		 je	 SHORT $LN7@FindNextDi@3

; 468  : 		{
; 469  : 			int path = this->VerifyThatOnPath(sx, sy);

  002a8	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  002ab	50		 push	 eax
  002ac	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  002af	51		 push	 ecx
  002b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b3	e8 00 00 00 00	 call	 ?VerifyThatOnPath@PATH@@AAEHHH@Z ; PATH::VerifyThatOnPath
  002b8	89 45 c4	 mov	 DWORD PTR _path$205313[ebp], eax

; 470  : 
; 471  : 			if ( path != -1 )

  002bb	83 7d c4 ff	 cmp	 DWORD PTR _path$205313[ebp], -1
  002bf	74 22		 je	 SHORT $LN6@FindNextDi@3

; 472  : 			{
; 473  : 				this->HitMap[sx+ sy * this->Width ] = 1;

  002c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c4	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  002c7	0f af 08	 imul	 ecx, DWORD PTR [eax]
  002ca	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  002cd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002d0	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  002d6	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 474  : 				this->NumPath = path;

  002da	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002dd	8b 4d c4	 mov	 ecx, DWORD PTR _path$205313[ebp]
  002e0	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN6@FindNextDi@3:

; 475  : 			}
; 476  : 
; 477  : 			return WhichDir;

  002e3	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  002e6	e9 45 01 00 00	 jmp	 $LN27@FindNextDi@3
$LN7@FindNextDi@3:

; 478  : 		}
; 479  : 
; 480  : 		if ( ErrorCheck != 0 )

  002eb	0f b6 45 20	 movzx	 eax, BYTE PTR _ErrorCheck$[ebp]
  002ef	85 c0		 test	 eax, eax
  002f1	0f 84 1d 01 00
	00		 je	 $LN5@FindNextDi@3

; 481  : 		{
; 482  : 			int dir = WhichDir+7;

  002f7	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  002fa	83 c0 07	 add	 eax, 7
  002fd	89 45 c0	 mov	 DWORD PTR _dir$205316[ebp], eax

; 483  : 
; 484  : 			dir %= 8;

  00300	8b 45 c0	 mov	 eax, DWORD PTR _dir$205316[ebp]
  00303	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00308	79 05		 jns	 SHORT $LN32@FindNextDi@3
  0030a	48		 dec	 eax
  0030b	83 c8 f8	 or	 eax, -8			; fffffff8H
  0030e	40		 inc	 eax
$LN32@FindNextDi@3:
  0030f	89 45 c0	 mov	 DWORD PTR _dir$205316[ebp], eax

; 485  : 
; 486  : 			if (this->CanWeMoveForward3(sx + this->Dir[dir*2], sy + this->Dir[dir*2+1]) != FALSE )

  00312	8b 45 c0	 mov	 eax, DWORD PTR _dir$205316[ebp]
  00315	d1 e0		 shl	 eax, 1
  00317	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0031a	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  0031d	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  00324	52		 push	 edx
  00325	8b 45 c0	 mov	 eax, DWORD PTR _dir$205316[ebp]
  00328	d1 e0		 shl	 eax, 1
  0032a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032d	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  00330	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  00337	52		 push	 edx
  00338	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033b	e8 00 00 00 00	 call	 ?CanWeMoveForward3@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward3
  00340	85 c0		 test	 eax, eax
  00342	74 43		 je	 SHORT $LN4@FindNextDi@3

; 487  : 			{
; 488  : 				int path = this->VerifyThatOnPath(sx, sy);

  00344	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00347	50		 push	 eax
  00348	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  0034b	51		 push	 ecx
  0034c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0034f	e8 00 00 00 00	 call	 ?VerifyThatOnPath@PATH@@AAEHHH@Z ; PATH::VerifyThatOnPath
  00354	89 45 bc	 mov	 DWORD PTR _path$205318[ebp], eax

; 489  : 
; 490  : 				if ( path != -1 )

  00357	83 7d bc ff	 cmp	 DWORD PTR _path$205318[ebp], -1
  0035b	74 22		 je	 SHORT $LN3@FindNextDi@3

; 491  : 				{
; 492  : 					this->HitMap[sx+ sy * this->Width] = 1;

  0035d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00360	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  00363	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00366	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  00369	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0036c	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  00372	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 493  : 					this->NumPath = path;

  00376	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00379	8b 4d bc	 mov	 ecx, DWORD PTR _path$205318[ebp]
  0037c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN3@FindNextDi@3:

; 494  : 				}
; 495  : 				return dir;

  0037f	8b 45 c0	 mov	 eax, DWORD PTR _dir$205316[ebp]
  00382	e9 a9 00 00 00	 jmp	 $LN27@FindNextDi@3
$LN4@FindNextDi@3:

; 496  : 			}
; 497  : 
; 498  : 			int dir2 = WhichDir+9;

  00387	8b 45 f0	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  0038a	83 c0 09	 add	 eax, 9
  0038d	89 45 b8	 mov	 DWORD PTR _dir2$205320[ebp], eax

; 499  : 			dir2 %= 8;

  00390	8b 45 b8	 mov	 eax, DWORD PTR _dir2$205320[ebp]
  00393	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00398	79 05		 jns	 SHORT $LN33@FindNextDi@3
  0039a	48		 dec	 eax
  0039b	83 c8 f8	 or	 eax, -8			; fffffff8H
  0039e	40		 inc	 eax
$LN33@FindNextDi@3:
  0039f	89 45 b8	 mov	 DWORD PTR _dir2$205320[ebp], eax

; 500  : 
; 501  : 			if (CanWeMoveForward3(sx+this->Dir[dir2*2], sy+this->Dir[dir2*2+1]) != FALSE )

  003a2	8b 45 b8	 mov	 eax, DWORD PTR _dir2$205320[ebp]
  003a5	d1 e0		 shl	 eax, 1
  003a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003aa	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  003ad	03 94 81 f8 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1016]
  003b4	52		 push	 edx
  003b5	8b 45 b8	 mov	 eax, DWORD PTR _dir2$205320[ebp]
  003b8	d1 e0		 shl	 eax, 1
  003ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003bd	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  003c0	03 94 81 f4 03
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+1012]
  003c7	52		 push	 edx
  003c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003cb	e8 00 00 00 00	 call	 ?CanWeMoveForward3@PATH@@AAEHHH@Z ; PATH::CanWeMoveForward3
  003d0	85 c0		 test	 eax, eax
  003d2	74 40		 je	 SHORT $LN5@FindNextDi@3

; 502  : 			{
; 503  : 				int path = this->VerifyThatOnPath(sx, sy);

  003d4	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  003d7	50		 push	 eax
  003d8	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  003db	51		 push	 ecx
  003dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003df	e8 00 00 00 00	 call	 ?VerifyThatOnPath@PATH@@AAEHHH@Z ; PATH::VerifyThatOnPath
  003e4	89 45 b4	 mov	 DWORD PTR _path$205322[ebp], eax

; 504  : 
; 505  : 				if ( path != -1 )

  003e7	83 7d b4 ff	 cmp	 DWORD PTR _path$205322[ebp], -1
  003eb	74 22		 je	 SHORT $LN1@FindNextDi@3

; 506  : 				{
; 507  : 					this->HitMap[sx + sy * this->Width] = 1;

  003ed	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f0	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  003f3	0f af 08	 imul	 ecx, DWORD PTR [eax]
  003f6	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  003f9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003fc	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  00402	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 508  : 					this->NumPath = path;

  00406	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00409	8b 4d b4	 mov	 ecx, DWORD PTR _path$205322[ebp]
  0040c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@FindNextDi@3:

; 509  : 				}
; 510  : 				return dir2;

  0040f	8b 45 b8	 mov	 eax, DWORD PTR _dir2$205320[ebp]
  00412	eb 1c		 jmp	 SHORT $LN27@FindNextDi@3
$LN5@FindNextDi@3:

; 511  : 			}
; 512  : 		}
; 513  : 		
; 514  : 		this->HitMap[sx + sy*this->Width]=1;

  00414	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00417	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  0041a	0f af 08	 imul	 ecx, DWORD PTR [eax]
  0041d	03 4d 08	 add	 ecx, DWORD PTR _sx$[ebp]
  00420	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00423	8b 82 40 04 00
	00		 mov	 eax, DWORD PTR [edx+1088]
  00429	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 515  : 		return -1;

  0042d	83 c8 ff	 or	 eax, -1
$LN27@FindNextDi@3:

; 516  : 	};

  00430	5f		 pop	 edi
  00431	5e		 pop	 esi
  00432	5b		 pop	 ebx
  00433	8b e5		 mov	 esp, ebp
  00435	5d		 pop	 ebp
  00436	c2 1c 00	 ret	 28			; 0000001cH
?FindNextDir3@PATH@@AAEHHHHHH_N0@Z ENDP			; PATH::FindNextDir3
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?CanWeMoveForward3@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_which$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?CanWeMoveForward3@PATH@@AAEHHH@Z PROC			; PATH::CanWeMoveForward3, COMDAT
; _this$ = ecx

; 97   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 		int which = x +  y* this->Width ;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00012	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00015	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  00018	89 4d f8	 mov	 DWORD PTR _which$[ebp], ecx

; 99   : 		
; 100  : 		if ( x >= this->Width || x < 0 || y >= this->Height || y < 0 )

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00021	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00023	7d 17		 jge	 SHORT $LN3@CanWeMoveF@3
  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	7c 11		 jl	 SHORT $LN3@CanWeMoveF@3
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00031	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00034	7d 06		 jge	 SHORT $LN3@CanWeMoveF@3
  00036	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  0003a	7d 04		 jge	 SHORT $LN4@CanWeMoveF@3
$LN3@CanWeMoveF@3:

; 101  : 		{
; 102  : 			return false;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 42		 jmp	 SHORT $LN5@CanWeMoveF@3
$LN4@CanWeMoveF@3:

; 103  : 		}
; 104  : 
; 105  : 		if ( this->Map[which] >= 1 || this->HitMap[which] != 0 )

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00049	8b 55 f8	 mov	 edx, DWORD PTR _which$[ebp]
  0004c	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  00050	83 f8 01	 cmp	 eax, 1
  00053	7d 14		 jge	 SHORT $LN1@CanWeMoveF@3
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _which$[ebp]
  00061	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  00065	85 c0		 test	 eax, eax
  00067	74 14		 je	 SHORT $LN2@CanWeMoveF@3
$LN1@CanWeMoveF@3:

; 106  : 		{
; 107  : 			this->HitMap[which] = 1;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 88 40 04 00
	00		 mov	 ecx, DWORD PTR [eax+1088]
  00072	8b 55 f8	 mov	 edx, DWORD PTR _which$[ebp]
  00075	c6 04 11 01	 mov	 BYTE PTR [ecx+edx], 1

; 108  : 			return false;

  00079	33 c0		 xor	 eax, eax
  0007b	eb 05		 jmp	 SHORT $LN5@CanWeMoveF@3
$LN2@CanWeMoveF@3:

; 109  : 		}
; 110  : 		return TRUE;

  0007d	b8 01 00 00 00	 mov	 eax, 1
$LN5@CanWeMoveF@3:

; 111  : 	};

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
?CanWeMoveForward3@PATH@@AAEHHH@Z ENDP			; PATH::CanWeMoveForward3
_TEXT	ENDS
PUBLIC	?CheckWall2@MapClass@@QAEEHHHH@Z		; MapClass::CheckWall2
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapclass.cpp
_TEXT	SEGMENT
_Shadow$ = -56						; size = 4
_count$ = -52						; size = 4
_error$ = -48						; size = 4
_start$ = -44						; size = 4
_py1$ = -40						; size = 4
_px1$ = -36						; size = 4
_len2$ = -32						; size = 4
_len1$ = -28						; size = 4
_d2$ = -24						; size = 4
_d1$ = -20						; size = 4
_ny1$ = -16						; size = 4
_nx1$ = -12						; size = 4
_Index$ = -8						; size = 4
_this$ = -4						; size = 4
_sx1$ = 8						; size = 4
_sy1$ = 12						; size = 4
_sx2$ = 16						; size = 4
_sy2$ = 20						; size = 4
?CheckWall2@MapClass@@QAEEHHHH@Z PROC			; MapClass::CheckWall2
; _this$ = ecx

; 984  : {

  02110	55		 push	 ebp
  02111	8b ec		 mov	 ebp, esp
  02113	83 ec 78	 sub	 esp, 120		; 00000078H
  02116	53		 push	 ebx
  02117	56		 push	 esi
  02118	57		 push	 edi
  02119	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 985  : 	int Index = TERRAIN_INDEX_REPEAT(sx1,sy1);

  0211c	8b 45 0c	 mov	 eax, DWORD PTR _sy1$[ebp]
  0211f	50		 push	 eax
  02120	8b 4d 08	 mov	 ecx, DWORD PTR _sx1$[ebp]
  02123	51		 push	 ecx
  02124	e8 00 00 00 00	 call	 ?TERRAIN_INDEX_REPEAT@@YAHHH@Z ; TERRAIN_INDEX_REPEAT
  02129	83 c4 08	 add	 esp, 8
  0212c	89 45 f8	 mov	 DWORD PTR _Index$[ebp], eax

; 986  : 	int nx1;
; 987  : 	int ny1;
; 988  : 	int d1;
; 989  : 	int d2;
; 990  : 	int len1;
; 991  : 	int len2;
; 992  : 	int px1 = sx2 - sx1;

  0212f	8b 45 10	 mov	 eax, DWORD PTR _sx2$[ebp]
  02132	2b 45 08	 sub	 eax, DWORD PTR _sx1$[ebp]
  02135	89 45 dc	 mov	 DWORD PTR _px1$[ebp], eax

; 993  : 	int py1 = sy2 - sy1;

  02138	8b 45 14	 mov	 eax, DWORD PTR _sy2$[ebp]
  0213b	2b 45 0c	 sub	 eax, DWORD PTR _sy1$[ebp]
  0213e	89 45 d8	 mov	 DWORD PTR _py1$[ebp], eax

; 994  : 
; 995  : 	if ( px1 < 0 )

  02141	83 7d dc 00	 cmp	 DWORD PTR _px1$[ebp], 0
  02145	7d 11		 jge	 SHORT $LN14@CheckWall2

; 996  : 	{
; 997  : 		px1 = -px1;

  02147	8b 45 dc	 mov	 eax, DWORD PTR _px1$[ebp]
  0214a	f7 d8		 neg	 eax
  0214c	89 45 dc	 mov	 DWORD PTR _px1$[ebp], eax

; 998  : 		nx1 = -1;

  0214f	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _nx1$[ebp], -1

; 999  : 	}
; 1000 : 	else

  02156	eb 07		 jmp	 SHORT $LN13@CheckWall2
$LN14@CheckWall2:

; 1001 : 	{
; 1002 : 		nx1 = 1;

  02158	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _nx1$[ebp], 1
$LN13@CheckWall2:

; 1003 : 	}
; 1004 : 
; 1005 : 	if ( py1 < 0 )

  0215f	83 7d d8 00	 cmp	 DWORD PTR _py1$[ebp], 0
  02163	7d 11		 jge	 SHORT $LN12@CheckWall2

; 1006 : 	{
; 1007 : 		py1 = -py1;

  02165	8b 45 d8	 mov	 eax, DWORD PTR _py1$[ebp]
  02168	f7 d8		 neg	 eax
  0216a	89 45 d8	 mov	 DWORD PTR _py1$[ebp], eax

; 1008 : 		ny1 = -256;

  0216d	c7 45 f0 00 ff
	ff ff		 mov	 DWORD PTR _ny1$[ebp], -256 ; ffffff00H

; 1009 : 	}
; 1010 : 	else

  02174	eb 07		 jmp	 SHORT $LN11@CheckWall2
$LN12@CheckWall2:

; 1011 : 	{
; 1012 : 		ny1 = 256;

  02176	c7 45 f0 00 01
	00 00		 mov	 DWORD PTR _ny1$[ebp], 256 ; 00000100H
$LN11@CheckWall2:

; 1013 : 	}
; 1014 : 
; 1015 : 	if ( px1 > py1 )

  0217d	8b 45 dc	 mov	 eax, DWORD PTR _px1$[ebp]
  02180	3b 45 d8	 cmp	 eax, DWORD PTR _py1$[ebp]
  02183	7e 1a		 jle	 SHORT $LN10@CheckWall2

; 1016 : 	{
; 1017 : 		len1 = px1;

  02185	8b 45 dc	 mov	 eax, DWORD PTR _px1$[ebp]
  02188	89 45 e4	 mov	 DWORD PTR _len1$[ebp], eax

; 1018 : 		len2= py1;

  0218b	8b 45 d8	 mov	 eax, DWORD PTR _py1$[ebp]
  0218e	89 45 e0	 mov	 DWORD PTR _len2$[ebp], eax

; 1019 : 		d1 = ny1;

  02191	8b 45 f0	 mov	 eax, DWORD PTR _ny1$[ebp]
  02194	89 45 ec	 mov	 DWORD PTR _d1$[ebp], eax

; 1020 : 		d2 = nx1;

  02197	8b 45 f4	 mov	 eax, DWORD PTR _nx1$[ebp]
  0219a	89 45 e8	 mov	 DWORD PTR _d2$[ebp], eax

; 1021 : 	}
; 1022 : 	else

  0219d	eb 18		 jmp	 SHORT $LN9@CheckWall2
$LN10@CheckWall2:

; 1023 : 	{
; 1024 : 		len1 = py1;

  0219f	8b 45 d8	 mov	 eax, DWORD PTR _py1$[ebp]
  021a2	89 45 e4	 mov	 DWORD PTR _len1$[ebp], eax

; 1025 : 		len2 = px1;

  021a5	8b 45 dc	 mov	 eax, DWORD PTR _px1$[ebp]
  021a8	89 45 e0	 mov	 DWORD PTR _len2$[ebp], eax

; 1026 : 		d1 = nx1;

  021ab	8b 45 f4	 mov	 eax, DWORD PTR _nx1$[ebp]
  021ae	89 45 ec	 mov	 DWORD PTR _d1$[ebp], eax

; 1027 : 		d2 = ny1;

  021b1	8b 45 f0	 mov	 eax, DWORD PTR _ny1$[ebp]
  021b4	89 45 e8	 mov	 DWORD PTR _d2$[ebp], eax
$LN9@CheckWall2:

; 1028 : 	}
; 1029 : 
; 1030 : 	int start = 0;

  021b7	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _start$[ebp], 0

; 1031 : 	BOOL error = FALSE;

  021be	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _error$[ebp], 0

; 1032 : 	int count = 0;

  021c5	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 1033 : 	int Shadow = 0;

  021cc	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _Shadow$[ebp], 0
$LN8@CheckWall2:

; 1034 : 
; 1035 : 	do
; 1036 : 	{
; 1037 : 		if ( start == 0 )

  021d3	83 7d d4 00	 cmp	 DWORD PTR _start$[ebp], 0
  021d7	75 18		 jne	 SHORT $LN5@CheckWall2

; 1038 : 		{
; 1039 : 			if ( (this->m_attrbuf[Index]&2) == 2 )

  021d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021dc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  021df	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  021e2	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  021e6	83 e0 02	 and	 eax, 2
  021e9	74 04		 je	 SHORT $LN4@CheckWall2

; 1040 : 			{
; 1041 : 				return 2;

  021eb	b0 02		 mov	 al, 2
  021ed	eb 63		 jmp	 SHORT $LN15@CheckWall2
$LN4@CheckWall2:

; 1042 : 			}
; 1043 : 		}
; 1044 : 		else

  021ef	eb 07		 jmp	 SHORT $LN3@CheckWall2
$LN5@CheckWall2:

; 1045 : 		{
; 1046 : 			start = 1;

  021f1	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _start$[ebp], 1
$LN3@CheckWall2:

; 1047 : 		}
; 1048 : 
; 1049 : 		if ( (this->m_attrbuf[Index]&4) == 4 )

  021f8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021fb	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  021fe	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  02201	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  02205	83 e0 04	 and	 eax, 4
  02208	74 04		 je	 SHORT $LN2@CheckWall2

; 1050 : 		{
; 1051 : 			return 4;

  0220a	b0 04		 mov	 al, 4
  0220c	eb 44		 jmp	 SHORT $LN15@CheckWall2
$LN2@CheckWall2:

; 1052 : 		}
; 1053 : 
; 1054 : 		error +=len2;

  0220e	8b 45 d0	 mov	 eax, DWORD PTR _error$[ebp]
  02211	03 45 e0	 add	 eax, DWORD PTR _len2$[ebp]
  02214	89 45 d0	 mov	 DWORD PTR _error$[ebp], eax

; 1055 : 
; 1056 : 		if ( error > (len1/2) )

  02217	8b 45 e4	 mov	 eax, DWORD PTR _len1$[ebp]
  0221a	99		 cdq
  0221b	2b c2		 sub	 eax, edx
  0221d	d1 f8		 sar	 eax, 1
  0221f	39 45 d0	 cmp	 DWORD PTR _error$[ebp], eax
  02222	7e 12		 jle	 SHORT $LN1@CheckWall2

; 1057 : 		{
; 1058 : 			Index += d1;

  02224	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  02227	03 45 ec	 add	 eax, DWORD PTR _d1$[ebp]
  0222a	89 45 f8	 mov	 DWORD PTR _Index$[ebp], eax

; 1059 : 			error -= len1;

  0222d	8b 45 d0	 mov	 eax, DWORD PTR _error$[ebp]
  02230	2b 45 e4	 sub	 eax, DWORD PTR _len1$[ebp]
  02233	89 45 d0	 mov	 DWORD PTR _error$[ebp], eax
$LN1@CheckWall2:

; 1060 : 		}
; 1061 : 
; 1062 : 		Index += d2;

  02236	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  02239	03 45 e8	 add	 eax, DWORD PTR _d2$[ebp]
  0223c	89 45 f8	 mov	 DWORD PTR _Index$[ebp], eax

; 1063 : 		count++;

  0223f	8b 45 cc	 mov	 eax, DWORD PTR _count$[ebp]
  02242	83 c0 01	 add	 eax, 1
  02245	89 45 cc	 mov	 DWORD PTR _count$[ebp], eax

; 1064 : 	}
; 1065 : 	while ( count <= len1 );

  02248	8b 45 cc	 mov	 eax, DWORD PTR _count$[ebp]
  0224b	3b 45 e4	 cmp	 eax, DWORD PTR _len1$[ebp]
  0224e	7e 83		 jle	 SHORT $LN8@CheckWall2

; 1066 : 	
; 1067 : 	return 1;

  02250	b0 01		 mov	 al, 1
$LN15@CheckWall2:

; 1068 : }

  02252	5f		 pop	 edi
  02253	5e		 pop	 esi
  02254	5b		 pop	 ebx
  02255	8b e5		 mov	 esp, ebp
  02257	5d		 pop	 ebp
  02258	c2 10 00	 ret	 16			; 00000010H
?CheckWall2@MapClass@@QAEEHHHH@Z ENDP			; MapClass::CheckWall2
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	51		 push	 ecx
  0000a	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00010	e8 00 00 00 00	 call	 _sqrtf
  00015	83 c4 04	 add	 esp, 4
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00012	e8 00 00 00 00	 call	 _sqrt
  00017	83 c4 08	 add	 esp, 8
  0001a	d9 5d bc	 fstp	 DWORD PTR tv73[ebp]
  0001d	d9 45 bc	 fld	 DWORD PTR tv73[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
