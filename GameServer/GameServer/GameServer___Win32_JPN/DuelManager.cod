; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\DuelManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_g_DuelGates DD	0127H
	DD	0128H
	DD	012fH
	DD	0129H
	DD	012aH
	DD	0130H
	DD	012bH
	DD	012cH
	DD	0131H
	DD	012dH
	DD	012eH
	DD	0132H
CONST	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
	DD	0190H
	DD	0257H
	DD	0190H
	DD	0257H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	070H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
	DD	010eH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CDuelManager@@QAE@XZ				; CDuelManager::CDuelManager
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\duelmanager.cpp
_TEXT	SEGMENT
_i$234341 = -8						; size = 4
_this$ = -4						; size = 4
??0CDuelManager@@QAE@XZ PROC				; CDuelManager::CDuelManager
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 
; 40   :   ZeroMemory(&this->m_Rooms, sizeof(this->m_Rooms));

  0000c	68 30 01 00 00	 push	 304			; 00000130H
  00011	6a 00		 push	 0
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	83 c0 10	 add	 eax, 16			; 00000010H
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _memset
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   : 
; 42   :   for(int i = 0; i < MAX_DUEL_ROOMS; i++) 

  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$234341[ebp], 0
  00029	eb 09		 jmp	 SHORT $LN3@CDuelManag
$LN2@CDuelManag:
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _i$234341[ebp]
  0002e	83 c0 01	 add	 eax, 1
  00031	89 45 f8	 mov	 DWORD PTR _i$234341[ebp], eax
$LN3@CDuelManag:
  00034	83 7d f8 04	 cmp	 DWORD PTR _i$234341[ebp], 4
  00038	7d 35		 jge	 SHORT $LN4@CDuelManag

; 43   :   {
; 44   :     this->m_Rooms[i].bFree = true;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _i$234341[ebp]
  0003d	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 45   :     this->m_Rooms[i].bWaiting = false;

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _i$234341[ebp]
  0004e	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 46   :     this->m_Rooms[i].bHasWinner = false;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$234341[ebp]
  0005f	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	c7 44 01 58 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+88], 0

; 47   :   }

  0006d	eb bc		 jmp	 SHORT $LN2@CDuelManag
$LN4@CDuelManag:

; 48   : 
; 49   : }

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
??0CDuelManager@@QAE@XZ ENDP				; CDuelManager::CDuelManager
_TEXT	ENDS
PUBLIC	??1CDuelManager@@QAE@XZ				; CDuelManager::~CDuelManager
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDuelManager@@QAE@XZ PROC				; CDuelManager::~CDuelManager
; _this$ = ecx

; 52   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 44	 sub	 esp, 68			; 00000044H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi
  00089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
??1CDuelManager@@QAE@XZ ENDP				; CDuelManager::~CDuelManager
_TEXT	ENDS
PUBLIC	?GetUserDuelRoom@CDuelManager@@QAEHPAUOBJECTSTRUCT@@@Z ; CDuelManager::GetUserDuelRoom
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$234353 = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?GetUserDuelRoom@CDuelManager@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CDuelManager::GetUserDuelRoom
; _this$ = ecx

; 56   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 48	 sub	 esp, 72			; 00000048H
  000a6	53		 push	 ebx
  000a7	56		 push	 esi
  000a8	57		 push	 edi
  000a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 57   :   for(int i = 0; i < MAX_DUEL_ROOMS; i++)

  000ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$234353[ebp], 0
  000b3	eb 09		 jmp	 SHORT $LN5@GetUserDue
$LN4@GetUserDue:
  000b5	8b 45 f8	 mov	 eax, DWORD PTR _i$234353[ebp]
  000b8	83 c0 01	 add	 eax, 1
  000bb	89 45 f8	 mov	 DWORD PTR _i$234353[ebp], eax
$LN5@GetUserDue:
  000be	83 7d f8 04	 cmp	 DWORD PTR _i$234353[ebp], 4
  000c2	7d 2b		 jge	 SHORT $LN3@GetUserDue

; 58   :   {
; 59   :     if(this->m_Rooms[i].lpObj01 == lpObj ||
; 60   :       this->m_Rooms[i].lpObj02 == lpObj) 

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _i$234353[ebp]
  000c7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  000d1	3b 55 08	 cmp	 edx, DWORD PTR _lpObj$[ebp]
  000d4	74 12		 je	 SHORT $LN1@GetUserDue
  000d6	8b 45 f8	 mov	 eax, DWORD PTR _i$234353[ebp]
  000d9	6b c0 4c	 imul	 eax, 76			; 0000004cH
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  000e3	3b 55 08	 cmp	 edx, DWORD PTR _lpObj$[ebp]
  000e6	75 05		 jne	 SHORT $LN2@GetUserDue
$LN1@GetUserDue:

; 61   :     {
; 62   :       return i;

  000e8	8b 45 f8	 mov	 eax, DWORD PTR _i$234353[ebp]
  000eb	eb 05		 jmp	 SHORT $LN6@GetUserDue
$LN2@GetUserDue:

; 63   :     }
; 64   :   }

  000ed	eb c6		 jmp	 SHORT $LN4@GetUserDue
$LN3@GetUserDue:

; 65   :   return -1;

  000ef	83 c8 ff	 or	 eax, -1
$LN6@GetUserDue:

; 66   : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
?GetUserDuelRoom@CDuelManager@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CDuelManager::GetUserDuelRoom
_TEXT	ENDS
PUBLIC	?SendDuelStatus@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendDuelStatus
PUBLIC	??_C@_0CA@IOIFMHLG@?$FLDuel?5Manager?$FN?5Room?5?$CFd?5cleaned?4?$AA@ ; `string'
PUBLIC	?SendLifebarStatus@CDuelManager@@QAEXH@Z	; CDuelManager::SendLifebarStatus
PUBLIC	?RoomReset@CDuelManager@@QAEXH_N0@Z		; CDuelManager::RoomReset
PUBLIC	?SendSpectatorList@CDuelManager@@QAEXH@Z	; CDuelManager::SendSpectatorList
PUBLIC	??_C@_0CN@FHAOCOHB@?$FLDuel?5Manager?$FN?5Some?5spectator?5le@ ; `string'
PUBLIC	?SendSpectatorRemove@CDuelManager@@QAEXHH@Z	; CDuelManager::SendSpectatorRemove
PUBLIC	??_C@_0CN@KOMGNNFM@?$FLDuel?5Manager?$FN?5Spectator?5?$CI?$CFs?$CJ?5le@ ; `string'
PUBLIC	?SetBuff@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z	; CDuelManager::SetBuff
PUBLIC	?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendEndDuel
PUBLIC	?Run@CDuelManager@@QAEXXZ			; CDuelManager::Run
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ??_C@_0CA@IOIFMHLG@?$FLDuel?5Manager?$FN?5Room?5?$CFd?5cleaned?4?$AA@
CONST	SEGMENT
??_C@_0CA@IOIFMHLG@?$FLDuel?5Manager?$FN?5Room?5?$CFd?5cleaned?4?$AA@ DB '['
	DB	'Duel Manager] Room %d cleaned.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@FHAOCOHB@?$FLDuel?5Manager?$FN?5Some?5spectator?5le@
CONST	SEGMENT
??_C@_0CN@FHAOCOHB@?$FLDuel?5Manager?$FN?5Some?5spectator?5le@ DB '[Duel '
	DB	'Manager] Some spectator leaves room %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KOMGNNFM@?$FLDuel?5Manager?$FN?5Spectator?5?$CI?$CFs?$CJ?5le@
CONST	SEGMENT
??_C@_0CN@KOMGNNFM@?$FLDuel?5Manager?$FN?5Spectator?5?$CI?$CFs?$CJ?5le@ DB '['
	DB	'Duel Manager] Spectator (%s) leaves room %d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$234409 = -16						; size = 4
_u$234368 = -12						; size = 4
_i$234362 = -8						; size = 4
_this$ = -4						; size = 4
?Run@CDuelManager@@QAEXXZ PROC				; CDuelManager::Run
; _this$ = ecx

; 69   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	83 ec 50	 sub	 esp, 80			; 00000050H
  00106	53		 push	 ebx
  00107	56		 push	 esi
  00108	57		 push	 edi
  00109	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 70   :   for(int i = 0; i < MAX_DUEL_ROOMS; i++)

  0010c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$234362[ebp], 0
  00113	eb 09		 jmp	 SHORT $LN30@Run
$LN29@Run:
  00115	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00118	83 c0 01	 add	 eax, 1
  0011b	89 45 f8	 mov	 DWORD PTR _i$234362[ebp], eax
$LN30@Run:
  0011e	83 7d f8 04	 cmp	 DWORD PTR _i$234362[ebp], 4
  00122	0f 8d 38 03 00
	00		 jge	 $LN28@Run

; 71   :   {
; 72   :     if(this->m_Rooms[i].bFree == FALSE)

  00128	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  0012b	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0012e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  00136	0f 85 1f 03 00
	00		 jne	 $LN27@Run

; 73   :     {
; 74   : 
; 75   :       if(GetTickCount() - this->m_Rooms[i].dwStartTime < 5000) continue;

  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00142	8b 4d f8	 mov	 ecx, DWORD PTR _i$234362[ebp]
  00145	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00148	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014b	2b 44 0a 54	 sub	 eax, DWORD PTR [edx+ecx+84]
  0014f	3d 88 13 00 00	 cmp	 eax, 5000		; 00001388H
  00154	73 02		 jae	 SHORT $LN26@Run
  00156	eb bd		 jmp	 SHORT $LN29@Run
$LN26@Run:

; 76   : 
; 77   :       for(int u = 0; u < MAX_DUEL_LEARNERS; u++)

  00158	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _u$234368[ebp], 0
  0015f	eb 09		 jmp	 SHORT $LN25@Run
$LN24@Run:
  00161	8b 45 f4	 mov	 eax, DWORD PTR _u$234368[ebp]
  00164	83 c0 01	 add	 eax, 1
  00167	89 45 f4	 mov	 DWORD PTR _u$234368[ebp], eax
$LN25@Run:
  0016a	83 7d f4 0a	 cmp	 DWORD PTR _u$234368[ebp], 10 ; 0000000aH
  0016e	0f 8d 4d 01 00
	00		 jge	 $LN23@Run

; 78   :       {
; 79   :         if(this->m_Rooms[i].lpLearners[u] == NULL) continue;

  00174	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00177	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0017a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00181	8b 45 f4	 mov	 eax, DWORD PTR _u$234368[ebp]
  00184	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  00189	75 02		 jne	 SHORT $LN22@Run
  0018b	eb d4		 jmp	 SHORT $LN24@Run
$LN22@Run:

; 80   :         if(gObjIsConnected(this->m_Rooms[i].lpLearners[u]->m_Index))

  0018d	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00190	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00193	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00196	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0019a	8b 45 f4	 mov	 eax, DWORD PTR _u$234368[ebp]
  0019d	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  001a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a3	52		 push	 edx
  001a4	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  001a9	83 c4 04	 add	 esp, 4
  001ac	85 c0		 test	 eax, eax
  001ae	0f 84 b7 00 00
	00		 je	 $LN21@Run

; 81   :         {
; 82   :           if(this->m_Rooms[i].lpLearners[u]->MapNumber != MAP_INDEX_VULCANROOM)

  001b4	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  001b7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  001ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bd	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  001c1	8b 45 f4	 mov	 eax, DWORD PTR _u$234368[ebp]
  001c4	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  001c8	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  001cf	83 fa 40	 cmp	 edx, 64			; 00000040H
  001d2	0f 84 91 00 00
	00		 je	 $LN20@Run

; 83   :           {
; 84   :             this->SendEndDuel(this->m_Rooms[i].lpLearners[u]);

  001d8	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  001db	6b c0 4c	 imul	 eax, 76			; 0000004cH
  001de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e1	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  001e5	8b 45 f4	 mov	 eax, DWORD PTR _u$234368[ebp]
  001e8	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  001ec	51		 push	 ecx
  001ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f0	e8 00 00 00 00	 call	 ?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendEndDuel

; 85   :            // GCStateInfoSend(this->m_Rooms[i].lpLearners[u], 0, eVS_INVISIBLE);
; 86   :            // GCStateInfoSend(this->m_Rooms[i].lpLearners[u], 0, eVS_TRANSPARENCY);
; 87   :            // GCStateInfoSend(this->m_Rooms[i].lpLearners[u], 0, eVS_DUEL_INTERFACE);
; 88   : 			this->SetBuff(this->m_Rooms[i].lpLearners[u], FALSE);

  001f5	6a 00		 push	 0
  001f7	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  001fa	6b c0 4c	 imul	 eax, 76			; 0000004cH
  001fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00200	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00204	8b 45 f4	 mov	 eax, DWORD PTR _u$234368[ebp]
  00207	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  0020b	51		 push	 ecx
  0020c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020f	e8 00 00 00 00	 call	 ?SetBuff@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SetBuff

; 89   :             LogAddTD("[Duel Manager] Spectator (%s) leaves room %d", this->m_Rooms[i].lpLearners[u]->Name, i + 1);

  00214	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00217	83 c0 01	 add	 eax, 1
  0021a	50		 push	 eax
  0021b	8b 4d f8	 mov	 ecx, DWORD PTR _i$234362[ebp]
  0021e	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00221	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00224	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00228	8b 4d f4	 mov	 ecx, DWORD PTR _u$234368[ebp]
  0022b	8b 54 88 18	 mov	 edx, DWORD PTR [eax+ecx*4+24]
  0022f	83 c2 77	 add	 edx, 119		; 00000077H
  00232	52		 push	 edx
  00233	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@KOMGNNFM@?$FLDuel?5Manager?$FN?5Spectator?5?$CI?$CFs?$CJ?5le@
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0023e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   :             this->SendSpectatorRemove(u, i);

  00241	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00244	50		 push	 eax
  00245	8b 4d f4	 mov	 ecx, DWORD PTR _u$234368[ebp]
  00248	51		 push	 ecx
  00249	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024c	e8 00 00 00 00	 call	 ?SendSpectatorRemove@CDuelManager@@QAEXHH@Z ; CDuelManager::SendSpectatorRemove

; 91   :             this->m_Rooms[i].lpLearners[u] = NULL;

  00251	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00254	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00257	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025a	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0025e	8b 45 f4	 mov	 eax, DWORD PTR _u$234368[ebp]
  00261	c7 44 82 18 00
	00 00 00	 mov	 DWORD PTR [edx+eax*4+24], 0
$LN20@Run:

; 92   :           }
; 93   :         }
; 94   :         else

  00269	eb 51		 jmp	 SHORT $LN19@Run
$LN21@Run:

; 95   :         {
; 96   :           LogAddTD("[Duel Manager] Some spectator leaves room %d", this->m_Rooms[i].lpLearners[u]->Name, i + 1);

  0026b	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  0026e	83 c0 01	 add	 eax, 1
  00271	50		 push	 eax
  00272	8b 4d f8	 mov	 ecx, DWORD PTR _i$234362[ebp]
  00275	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00278	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0027b	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  0027f	8b 4d f4	 mov	 ecx, DWORD PTR _u$234368[ebp]
  00282	8b 54 88 18	 mov	 edx, DWORD PTR [eax+ecx*4+24]
  00286	83 c2 77	 add	 edx, 119		; 00000077H
  00289	52		 push	 edx
  0028a	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@FHAOCOHB@?$FLDuel?5Manager?$FN?5Some?5spectator?5le@
  0028f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00295	83 c4 0c	 add	 esp, 12			; 0000000cH

; 97   :           this->m_Rooms[i].lpLearners[u] = NULL;

  00298	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  0029b	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0029e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a1	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  002a5	8b 45 f4	 mov	 eax, DWORD PTR _u$234368[ebp]
  002a8	c7 44 82 18 00
	00 00 00	 mov	 DWORD PTR [edx+eax*4+24], 0

; 98   :           this->SendSpectatorList(i);

  002b0	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  002b3	50		 push	 eax
  002b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b7	e8 00 00 00 00	 call	 ?SendSpectatorList@CDuelManager@@QAEXH@Z ; CDuelManager::SendSpectatorList
$LN19@Run:

; 99   :         }
; 100  :       }

  002bc	e9 a0 fe ff ff	 jmp	 $LN24@Run
$LN23@Run:

; 101  : 
; 102  :       if(this->m_Rooms[i].lpObj01 != NULL && this->m_Rooms[i].lpObj02 != NULL)

  002c1	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  002c4	6b c0 4c	 imul	 eax, 76			; 0000004cH
  002c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ca	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  002cf	0f 84 fc 00 00
	00		 je	 $LN18@Run
  002d5	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  002d8	6b c0 4c	 imul	 eax, 76			; 0000004cH
  002db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002de	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  002e3	0f 84 e8 00 00
	00		 je	 $LN18@Run

; 103  :       {
; 104  :         if(gObjIsConnected(this->m_Rooms[i].lpObj01->m_Index) == FALSE ||
; 105  :           gObjIsConnected(this->m_Rooms[i].lpObj02->m_Index) == FALSE)

  002e9	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  002ec	6b c0 4c	 imul	 eax, 76			; 0000004cH
  002ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f2	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  002f6	8b 02		 mov	 eax, DWORD PTR [edx]
  002f8	50		 push	 eax
  002f9	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  002fe	83 c4 04	 add	 esp, 4
  00301	85 c0		 test	 eax, eax
  00303	74 1c		 je	 SHORT $LN16@Run
  00305	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00308	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0030b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0030e	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  00312	8b 02		 mov	 eax, DWORD PTR [edx]
  00314	50		 push	 eax
  00315	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0031a	83 c4 04	 add	 esp, 4
  0031d	85 c0		 test	 eax, eax
  0031f	75 1a		 jne	 SHORT $LN17@Run
$LN16@Run:

; 106  :         {
; 107  :           this->RoomReset(i);

  00321	6a 00		 push	 0
  00323	6a 00		 push	 0
  00325	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00328	50		 push	 eax
  00329	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032c	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 108  :           continue;

  00331	e9 df fd ff ff	 jmp	 $LN29@Run

; 109  :         }
; 110  :         else if ((this->m_Rooms[i].lpObj01->MapNumber != MAP_INDEX_VULCANROOM ||

  00336	e9 94 00 00 00	 jmp	 $LN15@Run
$LN17@Run:

; 111  :           this->m_Rooms[i].lpObj02->MapNumber != MAP_INDEX_VULCANROOM) && 
; 112  :           this->m_Rooms[i].bHasWinner == FALSE)

  0033b	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  0033e	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00341	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00344	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  00348	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0034f	83 f8 40	 cmp	 eax, 64			; 00000040H
  00352	75 19		 jne	 SHORT $LN13@Run
  00354	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00357	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0035a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035d	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  00361	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00368	83 f8 40	 cmp	 eax, 64			; 00000040H
  0036b	74 27		 je	 SHORT $LN14@Run
$LN13@Run:
  0036d	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00370	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00373	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00376	83 7c 01 58 00	 cmp	 DWORD PTR [ecx+eax+88], 0
  0037b	75 17		 jne	 SHORT $LN14@Run

; 113  :         {
; 114  :           this->RoomReset(i);

  0037d	6a 00		 push	 0
  0037f	6a 00		 push	 0
  00381	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00384	50		 push	 eax
  00385	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00388	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 115  :           continue;

  0038d	e9 83 fd ff ff	 jmp	 $LN29@Run

; 116  :         }
; 117  :         else if (this->m_Rooms[i].lpObj01->Connected < PLAYER_PLAYING ||

  00392	eb 3b		 jmp	 SHORT $LN15@Run
$LN14@Run:

; 118  :           this->m_Rooms[i].lpObj02->Connected < PLAYER_PLAYING)

  00394	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00397	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0039a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0039d	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  003a1	83 7a 04 03	 cmp	 DWORD PTR [edx+4], 3
  003a5	7c 13		 jl	 SHORT $LN10@Run
  003a7	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  003aa	6b c0 4c	 imul	 eax, 76			; 0000004cH
  003ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b0	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  003b4	83 7a 04 03	 cmp	 DWORD PTR [edx+4], 3
  003b8	7d 15		 jge	 SHORT $LN15@Run
$LN10@Run:

; 119  :         {
; 120  :           this->RoomReset(i);

  003ba	6a 00		 push	 0
  003bc	6a 00		 push	 0
  003be	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  003c1	50		 push	 eax
  003c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003c5	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 121  :           continue;

  003ca	e9 46 fd ff ff	 jmp	 $LN29@Run
$LN15@Run:

; 122  :         }
; 123  :       }
; 124  :       else

  003cf	eb 15		 jmp	 SHORT $LN9@Run
$LN18@Run:

; 125  :       {
; 126  :         this->RoomReset(i);

  003d1	6a 00		 push	 0
  003d3	6a 00		 push	 0
  003d5	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  003d8	50		 push	 eax
  003d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003dc	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 127  :         continue;

  003e1	e9 2f fd ff ff	 jmp	 $LN29@Run
$LN9@Run:

; 128  :       }
; 129  : 
; 130  :       if(this->m_UpdateLifebarTime < GetTickCount())

  003e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  003ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003ef	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  003f2	73 1d		 jae	 SHORT $LN8@Run

; 131  :       {
; 132  :         this->SendLifebarStatus(i);

  003f4	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  003f7	50		 push	 eax
  003f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fb	e8 00 00 00 00	 call	 ?SendLifebarStatus@CDuelManager@@QAEXH@Z ; CDuelManager::SendLifebarStatus

; 133  :         this->m_UpdateLifebarTime = GetTickCount() + 2000;

  00400	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00406	05 d0 07 00 00	 add	 eax, 2000		; 000007d0H
  0040b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0040e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN8@Run:

; 134  :       }
; 135  : 
; 136  :       if(this->m_Rooms[i].dwTickCount != 0)

  00411	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00414	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00417	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0041a	83 7c 01 50 00	 cmp	 DWORD PTR [ecx+eax+80], 0
  0041f	74 3a		 je	 SHORT $LN27@Run

; 137  :       {
; 138  :         if(this->m_Rooms[i].dwTickCount < GetTickCount())

  00421	8b 75 f8	 mov	 esi, DWORD PTR _i$234362[ebp]
  00424	6b f6 4c	 imul	 esi, 76			; 0000004cH
  00427	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0042d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00430	39 44 31 50	 cmp	 DWORD PTR [ecx+esi+80], eax
  00434	73 25		 jae	 SHORT $LN27@Run

; 139  :         {
; 140  :           this->RoomReset(i);

  00436	6a 00		 push	 0
  00438	6a 00		 push	 0
  0043a	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  0043d	50		 push	 eax
  0043e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00441	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 141  :           LogAddTD("[Duel Manager] Room %d cleaned.", i+1);

  00446	8b 45 f8	 mov	 eax, DWORD PTR _i$234362[ebp]
  00449	83 c0 01	 add	 eax, 1
  0044c	50		 push	 eax
  0044d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IOIFMHLG@?$FLDuel?5Manager?$FN?5Room?5?$CFd?5cleaned?4?$AA@
  00452	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00458	83 c4 08	 add	 esp, 8
$LN27@Run:

; 142  :         }
; 143  :       }
; 144  :     }
; 145  :   }

  0045b	e9 b5 fc ff ff	 jmp	 $LN29@Run
$LN28@Run:

; 146  : 
; 147  :   if(this->m_UpdateTickCount < GetTickCount())

  00460	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00466	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00469	39 01		 cmp	 DWORD PTR [ecx], eax
  0046b	0f 83 84 00 00
	00		 jae	 $LN31@Run

; 148  :   {
; 149  :     for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00471	c7 45 f0 b0 36
	00 00		 mov	 DWORD PTR _i$234409[ebp], 14000 ; 000036b0H
  00478	eb 09		 jmp	 SHORT $LN4@Run
$LN3@Run:
  0047a	8b 45 f0	 mov	 eax, DWORD PTR _i$234409[ebp]
  0047d	83 c0 01	 add	 eax, 1
  00480	89 45 f0	 mov	 DWORD PTR _i$234409[ebp], eax
$LN4@Run:
  00483	81 7d f0 98 3a
	00 00		 cmp	 DWORD PTR _i$234409[ebp], 15000 ; 00003a98H
  0048a	7d 59		 jge	 SHORT $LN2@Run

; 150  :     {
; 151  :       if((gObj[i].m_IfState.use) && gObj[i].m_IfState.type == 20)

  0048c	8b 45 f0	 mov	 eax, DWORD PTR _i$234409[ebp]
  0048f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00495	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0049b	8b 94 01 1c 0e
	00 00		 mov	 edx, DWORD PTR [ecx+eax+3612]
  004a2	83 e2 03	 and	 edx, 3
  004a5	74 3c		 je	 SHORT $LN1@Run
  004a7	8b 45 f0	 mov	 eax, DWORD PTR _i$234409[ebp]
  004aa	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  004b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004b6	8b 94 01 1c 0e
	00 00		 mov	 edx, DWORD PTR [ecx+eax+3612]
  004bd	c1 ea 06	 shr	 edx, 6
  004c0	81 e2 ff 03 00
	00		 and	 edx, 1023		; 000003ffH
  004c6	83 fa 14	 cmp	 edx, 20			; 00000014H
  004c9	75 18		 jne	 SHORT $LN1@Run

; 152  :       {
; 153  :         this->SendDuelStatus(&gObj[i]);

  004cb	8b 45 f0	 mov	 eax, DWORD PTR _i$234409[ebp]
  004ce	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  004d4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004da	50		 push	 eax
  004db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004de	e8 00 00 00 00	 call	 ?SendDuelStatus@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendDuelStatus
$LN1@Run:

; 154  :       }
; 155  :     }

  004e3	eb 95		 jmp	 SHORT $LN3@Run
$LN2@Run:

; 156  :     this->m_UpdateTickCount = GetTickCount() + 6000;

  004e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  004eb	05 70 17 00 00	 add	 eax, 6000		; 00001770H
  004f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f3	89 01		 mov	 DWORD PTR [ecx], eax
$LN31@Run:

; 157  :   }
; 158  : 
; 159  :   return;
; 160  : }

  004f5	5f		 pop	 edi
  004f6	5e		 pop	 esi
  004f7	5b		 pop	 ebx
  004f8	8b e5		 mov	 esp, ebp
  004fa	5d		 pop	 ebp
  004fb	c3		 ret	 0
?Run@CDuelManager@@QAEXXZ ENDP				; CDuelManager::Run
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateDuelScore@CDuelManager@@QAEXH@Z		; CDuelManager::UpdateDuelScore
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv94 = -100						; size = 4
tv89 = -100						; size = 4
_i$234445 = -32						; size = 4
_pMsg$ = -28						; size = 10
_aIndex2$ = -16						; size = 4
_aIndex1$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iRoom$ = 8						; size = 4
?UpdateDuelScore@CDuelManager@@QAEXH@Z PROC		; CDuelManager::UpdateDuelScore
; _this$ = ecx

; 163  : { 

  00500	55		 push	 ebp
  00501	8b ec		 mov	 ebp, esp
  00503	83 ec 64	 sub	 esp, 100		; 00000064H
  00506	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0050b	33 c5		 xor	 eax, ebp
  0050d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00510	53		 push	 ebx
  00511	56		 push	 esi
  00512	57		 push	 edi
  00513	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 
; 165  :   if(iRoom < 0 || iRoom > MAX_DUEL_ROOMS - 1)

  00516	83 7d 08 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  0051a	7c 06		 jl	 SHORT $LN15@UpdateDuel
  0051c	83 7d 08 03	 cmp	 DWORD PTR _iRoom$[ebp], 3
  00520	7e 05		 jle	 SHORT $LN16@UpdateDuel
$LN15@UpdateDuel:

; 166  :     return;

  00522	e9 04 02 00 00	 jmp	 $LN17@UpdateDuel
$LN16@UpdateDuel:

; 167  : 
; 168  :   if(this->m_Rooms[iRoom].lpObj01 == NULL || this->m_Rooms[iRoom].lpObj02 == NULL) return;

  00527	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0052a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0052d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00530	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  00535	74 10		 je	 SHORT $LN13@UpdateDuel
  00537	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0053a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0053d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00540	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  00545	75 05		 jne	 SHORT $LN14@UpdateDuel
$LN13@UpdateDuel:
  00547	e9 df 01 00 00	 jmp	 $LN17@UpdateDuel
$LN14@UpdateDuel:

; 169  : 
; 170  :   int aIndex1 = this->m_Rooms[iRoom].lpObj01->m_Index;

  0054c	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0054f	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00552	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00555	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  00559	8b 02		 mov	 eax, DWORD PTR [edx]
  0055b	89 45 f4	 mov	 DWORD PTR _aIndex1$[ebp], eax

; 171  :   int aIndex2 = this->m_Rooms[iRoom].lpObj02->m_Index;

  0055e	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00561	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00564	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00567	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  0056b	8b 02		 mov	 eax, DWORD PTR [edx]
  0056d	89 45 f0	 mov	 DWORD PTR _aIndex2$[ebp], eax

; 172  : 
; 173  :   if ( !OBJMAX_RANGE(aIndex1) || !OBJMAX_RANGE(aIndex2))

  00570	83 7d f4 00	 cmp	 DWORD PTR _aIndex1$[ebp], 0
  00574	7d 09		 jge	 SHORT $LN19@UpdateDuel
  00576	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
  0057d	eb 0f		 jmp	 SHORT $LN20@UpdateDuel
$LN19@UpdateDuel:
  0057f	33 c0		 xor	 eax, eax
  00581	81 7d f4 97 3a
	00 00		 cmp	 DWORD PTR _aIndex1$[ebp], 14999 ; 00003a97H
  00588	0f 9e c0	 setle	 al
  0058b	89 45 9c	 mov	 DWORD PTR tv89[ebp], eax
$LN20@UpdateDuel:
  0058e	83 7d 9c 00	 cmp	 DWORD PTR tv89[ebp], 0
  00592	74 24		 je	 SHORT $LN11@UpdateDuel
  00594	83 7d f0 00	 cmp	 DWORD PTR _aIndex2$[ebp], 0
  00598	7d 09		 jge	 SHORT $LN21@UpdateDuel
  0059a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
  005a1	eb 0f		 jmp	 SHORT $LN22@UpdateDuel
$LN21@UpdateDuel:
  005a3	33 c0		 xor	 eax, eax
  005a5	81 7d f0 97 3a
	00 00		 cmp	 DWORD PTR _aIndex2$[ebp], 14999 ; 00003a97H
  005ac	0f 9e c0	 setle	 al
  005af	89 45 9c	 mov	 DWORD PTR tv94[ebp], eax
$LN22@UpdateDuel:
  005b2	83 7d 9c 00	 cmp	 DWORD PTR tv94[ebp], 0
  005b6	75 05		 jne	 SHORT $LN12@UpdateDuel
$LN11@UpdateDuel:

; 174  :     return;

  005b8	e9 6e 01 00 00	 jmp	 $LN17@UpdateDuel
$LN12@UpdateDuel:

; 175  : 
; 176  :   if ( !gObjIsConnected(aIndex1) || !gObjIsConnected(aIndex2) )

  005bd	8b 45 f4	 mov	 eax, DWORD PTR _aIndex1$[ebp]
  005c0	50		 push	 eax
  005c1	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  005c6	83 c4 04	 add	 esp, 4
  005c9	85 c0		 test	 eax, eax
  005cb	74 10		 je	 SHORT $LN9@UpdateDuel
  005cd	8b 45 f0	 mov	 eax, DWORD PTR _aIndex2$[ebp]
  005d0	50		 push	 eax
  005d1	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  005d6	83 c4 04	 add	 esp, 4
  005d9	85 c0		 test	 eax, eax
  005db	75 05		 jne	 SHORT $LN10@UpdateDuel
$LN9@UpdateDuel:

; 177  :     return;

  005dd	e9 49 01 00 00	 jmp	 $LN17@UpdateDuel
$LN10@UpdateDuel:

; 178  : 
; 179  :   if ( gObj[aIndex1].Type == OBJ_MONSTER || gObj[aIndex2].Type == OBJ_MONSTER )

  005e2	8b 45 f4	 mov	 eax, DWORD PTR _aIndex1$[ebp]
  005e5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  005eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005f1	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  005f6	83 fa 02	 cmp	 edx, 2
  005f9	74 19		 je	 SHORT $LN7@UpdateDuel
  005fb	8b 45 f0	 mov	 eax, DWORD PTR _aIndex2$[ebp]
  005fe	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00604	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0060a	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0060f	83 fa 02	 cmp	 edx, 2
  00612	75 05		 jne	 SHORT $LN8@UpdateDuel
$LN7@UpdateDuel:

; 180  :     return;

  00614	e9 12 01 00 00	 jmp	 $LN17@UpdateDuel
$LN8@UpdateDuel:

; 181  :   
; 182  :   if ( gObj[aIndex1].CloseCount >= 0 || gObj[aIndex2].CloseCount >= 0 )

  00619	8b 45 f4	 mov	 eax, DWORD PTR _aIndex1$[ebp]
  0061c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00622	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00628	0f be 54 01 0a	 movsx	 edx, BYTE PTR [ecx+eax+10]
  0062d	85 d2		 test	 edx, edx
  0062f	7d 18		 jge	 SHORT $LN5@UpdateDuel
  00631	8b 45 f0	 mov	 eax, DWORD PTR _aIndex2$[ebp]
  00634	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0063a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00640	0f be 54 01 0a	 movsx	 edx, BYTE PTR [ecx+eax+10]
  00645	85 d2		 test	 edx, edx
  00647	7c 05		 jl	 SHORT $LN6@UpdateDuel
$LN5@UpdateDuel:

; 183  :     return;

  00649	e9 dd 00 00 00	 jmp	 $LN17@UpdateDuel
$LN6@UpdateDuel:

; 184  : 
; 185  :   PMSG_DUEL_SCORE pMsg;
; 186  : 
; 187  :   pMsg.h.c = 0xC1;

  0064e	c6 45 e4 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 188  :   pMsg.h.size = sizeof(pMsg);

  00652	c6 45 e5 0a	 mov	 BYTE PTR _pMsg$[ebp+1], 10 ; 0000000aH

; 189  :   pMsg.h.headcode = 0xAA;

  00656	c6 45 e6 aa	 mov	 BYTE PTR _pMsg$[ebp+2], 170 ; 000000aaH

; 190  :   pMsg.h.subcode = 0x04;

  0065a	c6 45 e7 04	 mov	 BYTE PTR _pMsg$[ebp+3], 4

; 191  :   pMsg.NumberH1 = SET_NUMBERH(aIndex1);

  0065e	8b 45 f4	 mov	 eax, DWORD PTR _aIndex1$[ebp]
  00661	c1 e8 08	 shr	 eax, 8
  00664	88 45 e8	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 192  :   pMsg.NumberL1 = SET_NUMBERL(aIndex1);

  00667	8b 45 f4	 mov	 eax, DWORD PTR _aIndex1$[ebp]
  0066a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0066f	88 45 e9	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 193  :   pMsg.NumberH2 = SET_NUMBERH(aIndex2);

  00672	8b 45 f0	 mov	 eax, DWORD PTR _aIndex2$[ebp]
  00675	c1 e8 08	 shr	 eax, 8
  00678	88 45 ea	 mov	 BYTE PTR _pMsg$[ebp+6], al

; 194  :   pMsg.NumberL2 = SET_NUMBERL(aIndex2);

  0067b	8b 45 f0	 mov	 eax, DWORD PTR _aIndex2$[ebp]
  0067e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00683	88 45 eb	 mov	 BYTE PTR _pMsg$[ebp+7], al

; 195  :   pMsg.btDuelScore1 = this->m_Rooms[iRoom].btPoints01;

  00686	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00689	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0068c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0068f	8a 54 01 1c	 mov	 dl, BYTE PTR [ecx+eax+28]
  00693	88 55 ec	 mov	 BYTE PTR _pMsg$[ebp+8], dl

; 196  :   pMsg.btDuelScore2 = this->m_Rooms[iRoom].btPoints02;

  00696	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00699	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0069c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0069f	8a 54 01 24	 mov	 dl, BYTE PTR [ecx+eax+36]
  006a3	88 55 ed	 mov	 BYTE PTR _pMsg$[ebp+9], dl

; 197  : 
; 198  :   DataSend(aIndex1, (LPBYTE)&pMsg, pMsg.h.size);

  006a6	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  006aa	50		 push	 eax
  006ab	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  006ae	51		 push	 ecx
  006af	8b 55 f4	 mov	 edx, DWORD PTR _aIndex1$[ebp]
  006b2	52		 push	 edx
  006b3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  006b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 199  :   DataSend(aIndex2, (LPBYTE)&pMsg, pMsg.h.size);

  006bb	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  006bf	50		 push	 eax
  006c0	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  006c3	51		 push	 ecx
  006c4	8b 55 f0	 mov	 edx, DWORD PTR _aIndex2$[ebp]
  006c7	52		 push	 edx
  006c8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  006cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 
; 201  :   for(int i = 0; i < MAX_DUEL_LEARNERS; i++)

  006d0	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$234445[ebp], 0
  006d7	eb 09		 jmp	 SHORT $LN4@UpdateDuel
$LN3@UpdateDuel:
  006d9	8b 45 e0	 mov	 eax, DWORD PTR _i$234445[ebp]
  006dc	83 c0 01	 add	 eax, 1
  006df	89 45 e0	 mov	 DWORD PTR _i$234445[ebp], eax
$LN4@UpdateDuel:
  006e2	83 7d e0 0a	 cmp	 DWORD PTR _i$234445[ebp], 10 ; 0000000aH
  006e6	7d 43		 jge	 SHORT $LN17@UpdateDuel

; 202  :   {
; 203  :     if(this->m_Rooms[iRoom].lpLearners[i] == NULL) 

  006e8	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  006eb	6b c0 4c	 imul	 eax, 76			; 0000004cH
  006ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006f1	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  006f5	8b 45 e0	 mov	 eax, DWORD PTR _i$234445[ebp]
  006f8	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  006fd	75 02		 jne	 SHORT $LN1@UpdateDuel

; 204  :     {
; 205  :       continue;

  006ff	eb d8		 jmp	 SHORT $LN3@UpdateDuel
$LN1@UpdateDuel:

; 206  :     }
; 207  :     DataSend(this->m_Rooms[iRoom].lpLearners[i]->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00701	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00705	50		 push	 eax
  00706	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00709	51		 push	 ecx
  0070a	8b 55 08	 mov	 edx, DWORD PTR _iRoom$[ebp]
  0070d	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00710	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00713	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  00717	8b 55 e0	 mov	 edx, DWORD PTR _i$234445[ebp]
  0071a	8b 44 91 18	 mov	 eax, DWORD PTR [ecx+edx*4+24]
  0071e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00720	51		 push	 ecx
  00721	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00726	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  :   }

  00729	eb ae		 jmp	 SHORT $LN3@UpdateDuel
$LN17@UpdateDuel:

; 209  : 
; 210  : }

  0072b	5f		 pop	 edi
  0072c	5e		 pop	 esi
  0072d	5b		 pop	 ebx
  0072e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00731	33 cd		 xor	 ecx, ebp
  00733	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00738	8b e5		 mov	 esp, ebp
  0073a	5d		 pop	 ebp
  0073b	c2 04 00	 ret	 4
?UpdateDuelScore@CDuelManager@@QAEXH@Z ENDP		; CDuelManager::UpdateDuelScore
_TEXT	ENDS
PUBLIC	?PlayerScore@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::PlayerScore
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iRoom$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?PlayerScore@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CDuelManager::PlayerScore
; _this$ = ecx

; 213  : {

  00740	55		 push	 ebp
  00741	8b ec		 mov	 ebp, esp
  00743	83 ec 48	 sub	 esp, 72			; 00000048H
  00746	53		 push	 ebx
  00747	56		 push	 esi
  00748	57		 push	 edi
  00749	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 214  :   int iRoom = this->GetUserDuelRoom(lpObj);

  0074c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0074f	50		 push	 eax
  00750	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00753	e8 00 00 00 00	 call	 ?GetUserDuelRoom@CDuelManager@@QAEHPAUOBJECTSTRUCT@@@Z ; CDuelManager::GetUserDuelRoom
  00758	89 45 f8	 mov	 DWORD PTR _iRoom$[ebp], eax

; 215  :   if(iRoom >= 0 && iRoom < MAX_DUEL_ROOMS)

  0075b	83 7d f8 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  0075f	7c 7e		 jl	 SHORT $LN5@PlayerScor
  00761	83 7d f8 04	 cmp	 DWORD PTR _iRoom$[ebp], 4
  00765	7d 78		 jge	 SHORT $LN5@PlayerScor

; 216  :   {
; 217  :     if(this->m_Rooms[iRoom].lpObj01 == lpObj)

  00767	8b 45 f8	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0076a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0076d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00770	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  00774	3b 55 08	 cmp	 edx, DWORD PTR _lpObj$[ebp]
  00777	75 2b		 jne	 SHORT $LN3@PlayerScor

; 218  :     {
; 219  :       this->m_Rooms[iRoom].btPoints01++;

  00779	8b 45 f8	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0077c	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0077f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00782	8a 54 01 1c	 mov	 dl, BYTE PTR [ecx+eax+28]
  00786	80 c2 01	 add	 dl, 1
  00789	8b 45 f8	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0078c	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0078f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00792	88 54 01 1c	 mov	 BYTE PTR [ecx+eax+28], dl

; 220  :       this->UpdateDuelScore(iRoom);

  00796	8b 45 f8	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00799	50		 push	 eax
  0079a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0079d	e8 00 00 00 00	 call	 ?UpdateDuelScore@CDuelManager@@QAEXH@Z ; CDuelManager::UpdateDuelScore
  007a2	eb 3b		 jmp	 SHORT $LN5@PlayerScor
$LN3@PlayerScor:

; 221  :     }
; 222  :     else if(this->m_Rooms[iRoom].lpObj02 == lpObj)

  007a4	8b 45 f8	 mov	 eax, DWORD PTR _iRoom$[ebp]
  007a7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  007aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007ad	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  007b1	3b 55 08	 cmp	 edx, DWORD PTR _lpObj$[ebp]
  007b4	75 29		 jne	 SHORT $LN5@PlayerScor

; 223  :     {
; 224  :       this->m_Rooms[iRoom].btPoints02++;

  007b6	8b 45 f8	 mov	 eax, DWORD PTR _iRoom$[ebp]
  007b9	6b c0 4c	 imul	 eax, 76			; 0000004cH
  007bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007bf	8a 54 01 24	 mov	 dl, BYTE PTR [ecx+eax+36]
  007c3	80 c2 01	 add	 dl, 1
  007c6	8b 45 f8	 mov	 eax, DWORD PTR _iRoom$[ebp]
  007c9	6b c0 4c	 imul	 eax, 76			; 0000004cH
  007cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007cf	88 54 01 24	 mov	 BYTE PTR [ecx+eax+36], dl

; 225  :       this->UpdateDuelScore(iRoom);

  007d3	8b 45 f8	 mov	 eax, DWORD PTR _iRoom$[ebp]
  007d6	50		 push	 eax
  007d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007da	e8 00 00 00 00	 call	 ?UpdateDuelScore@CDuelManager@@QAEXH@Z ; CDuelManager::UpdateDuelScore
$LN5@PlayerScor:

; 226  :     }
; 227  :   }
; 228  : }

  007df	5f		 pop	 edi
  007e0	5e		 pop	 esi
  007e1	5b		 pop	 ebx
  007e2	8b e5		 mov	 esp, ebp
  007e4	5d		 pop	 ebp
  007e5	c2 04 00	 ret	 4
?PlayerScore@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CDuelManager::PlayerScore
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpMsgClose$ = -16					; size = 5
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CDuelManager::SendEndDuel
; _this$ = ecx

; 231  : { 

  007f0	55		 push	 ebp
  007f1	8b ec		 mov	 ebp, esp
  007f3	83 ec 50	 sub	 esp, 80			; 00000050H
  007f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  007fb	33 c5		 xor	 eax, ebp
  007fd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00800	53		 push	 ebx
  00801	56		 push	 esi
  00802	57		 push	 edi
  00803	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 232  : 
; 233  :   if(lpObj == NULL) return;

  00806	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  0080a	75 02		 jne	 SHORT $LN2@SendEndDue
  0080c	eb 3f		 jmp	 SHORT $LN3@SendEndDue
$LN2@SendEndDue:

; 234  :   if(gObjIsConnected(lpObj->m_Index) == FALSE) return;

  0080e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00811	8b 08		 mov	 ecx, DWORD PTR [eax]
  00813	51		 push	 ecx
  00814	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00819	83 c4 04	 add	 esp, 4
  0081c	85 c0		 test	 eax, eax
  0081e	75 02		 jne	 SHORT $LN1@SendEndDue
  00820	eb 2b		 jmp	 SHORT $LN3@SendEndDue
$LN1@SendEndDue:

; 235  : 
; 236  :   BYTE lpMsgClose[5] = { 0xC1, 0x05, 0xAA, 0x03, 0x00 } ;

  00822	c6 45 f0 c1	 mov	 BYTE PTR _lpMsgClose$[ebp], 193 ; 000000c1H
  00826	c6 45 f1 05	 mov	 BYTE PTR _lpMsgClose$[ebp+1], 5
  0082a	c6 45 f2 aa	 mov	 BYTE PTR _lpMsgClose$[ebp+2], 170 ; 000000aaH
  0082e	c6 45 f3 03	 mov	 BYTE PTR _lpMsgClose$[ebp+3], 3
  00832	c6 45 f4 00	 mov	 BYTE PTR _lpMsgClose$[ebp+4], 0

; 237  : 
; 238  :   DataSend(lpObj->m_Index, &lpMsgClose[0], lpMsgClose[1]);

  00836	0f b6 45 f1	 movzx	 eax, BYTE PTR _lpMsgClose$[ebp+1]
  0083a	50		 push	 eax
  0083b	8d 4d f0	 lea	 ecx, DWORD PTR _lpMsgClose$[ebp]
  0083e	51		 push	 ecx
  0083f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00842	8b 02		 mov	 eax, DWORD PTR [edx]
  00844	50		 push	 eax
  00845	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0084a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendEndDue:

; 239  : 
; 240  : }

  0084d	5f		 pop	 edi
  0084e	5e		 pop	 esi
  0084f	5b		 pop	 ebx
  00850	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00853	33 cd		 xor	 ecx, ebp
  00855	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0085a	8b e5		 mov	 esp, ebp
  0085c	5d		 pop	 ebp
  0085d	c2 04 00	 ret	 4
?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CDuelManager::SendEndDuel
_TEXT	ENDS
PUBLIC	?GetSpectatorCount@CDuelManager@@QAEHH@Z	; CDuelManager::GetSpectatorCount
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$234474 = -12						; size = 4
_iCount$ = -8						; size = 4
_this$ = -4						; size = 4
_iRoom$ = 8						; size = 4
?GetSpectatorCount@CDuelManager@@QAEHH@Z PROC		; CDuelManager::GetSpectatorCount
; _this$ = ecx

; 243  : {

  00860	55		 push	 ebp
  00861	8b ec		 mov	 ebp, esp
  00863	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00866	53		 push	 ebx
  00867	56		 push	 esi
  00868	57		 push	 edi
  00869	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 244  : 
; 245  :   if(iRoom < 0 || iRoom >= MAX_DUEL_ROOMS) 

  0086c	83 7d 08 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  00870	7c 06		 jl	 SHORT $LN5@GetSpectat
  00872	83 7d 08 04	 cmp	 DWORD PTR _iRoom$[ebp], 4
  00876	7c 05		 jl	 SHORT $LN6@GetSpectat
$LN5@GetSpectat:

; 246  :   {
; 247  :     return -1;

  00878	83 c8 ff	 or	 eax, -1
  0087b	eb 44		 jmp	 SHORT $LN7@GetSpectat
$LN6@GetSpectat:

; 248  :   }
; 249  : 
; 250  :   int iCount = 0;

  0087d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0

; 251  :   for(int i = 0; i < MAX_DUEL_LEARNERS; i++)

  00884	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$234474[ebp], 0
  0088b	eb 09		 jmp	 SHORT $LN4@GetSpectat
$LN3@GetSpectat:
  0088d	8b 45 f4	 mov	 eax, DWORD PTR _i$234474[ebp]
  00890	83 c0 01	 add	 eax, 1
  00893	89 45 f4	 mov	 DWORD PTR _i$234474[ebp], eax
$LN4@GetSpectat:
  00896	83 7d f4 0a	 cmp	 DWORD PTR _i$234474[ebp], 10 ; 0000000aH
  0089a	7d 22		 jge	 SHORT $LN2@GetSpectat

; 252  :   {
; 253  :     if(this->m_Rooms[iRoom].lpLearners[i] != NULL) 

  0089c	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0089f	6b c0 4c	 imul	 eax, 76			; 0000004cH
  008a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008a5	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  008a9	8b 45 f4	 mov	 eax, DWORD PTR _i$234474[ebp]
  008ac	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  008b1	74 09		 je	 SHORT $LN1@GetSpectat

; 254  :     {
; 255  :       iCount++;

  008b3	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  008b6	83 c0 01	 add	 eax, 1
  008b9	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN1@GetSpectat:

; 256  :     }
; 257  :   }

  008bc	eb cf		 jmp	 SHORT $LN3@GetSpectat
$LN2@GetSpectat:

; 258  : 
; 259  :   return iCount;

  008be	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
$LN7@GetSpectat:

; 260  : 
; 261  : }

  008c1	5f		 pop	 edi
  008c2	5e		 pop	 esi
  008c3	5b		 pop	 ebx
  008c4	8b e5		 mov	 esp, ebp
  008c6	5d		 pop	 ebp
  008c7	c2 04 00	 ret	 4
?GetSpectatorCount@CDuelManager@@QAEHH@Z ENDP		; CDuelManager::GetSpectatorCount
_TEXT	ENDS
PUBLIC	?RemoveUser@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::RemoveUser
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?RemoveUser@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CDuelManager::RemoveUser
; _this$ = ecx

; 264  : { 

  008d0	55		 push	 ebp
  008d1	8b ec		 mov	 ebp, esp
  008d3	83 ec 44	 sub	 esp, 68			; 00000044H
  008d6	53		 push	 ebx
  008d7	56		 push	 esi
  008d8	57		 push	 edi
  008d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 265  : 
; 266  :   //verificar se faz parte do duel
; 267  :   //verificar se eh da batalha...
; 268  :   // -> se for, finalizar a sala
; 269  :   //resetar informações do duel
; 270  :   //se for um watcher remover interface
; 271  :   //mover para gate 294
; 272  : 
; 273  : }

  008dc	5f		 pop	 edi
  008dd	5e		 pop	 esi
  008de	5b		 pop	 ebx
  008df	8b e5		 mov	 esp, ebp
  008e1	5d		 pop	 ebp
  008e2	c2 04 00	 ret	 4
?RemoveUser@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CDuelManager::RemoveUser
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iSpecCount$234495 = -108				; size = 4
_i$234488 = -104					; size = 4
_pMsg$ = -100						; size = 92
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SendDuelStatus@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDuelManager::SendDuelStatus
; _this$ = ecx

; 276  : {

  008f0	55		 push	 ebp
  008f1	8b ec		 mov	 ebp, esp
  008f3	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  008f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  008fe	33 c5		 xor	 eax, ebp
  00900	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00903	53		 push	 ebx
  00904	56		 push	 esi
  00905	57		 push	 edi
  00906	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 
; 278  :   PMSG_DUEL_STATUS pMsg;
; 279  : 
; 280  :   pMsg.h.c = 0xC1;

  00909	c6 45 9c c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 281  :   pMsg.h.size = sizeof(pMsg);

  0090d	c6 45 9d 5c	 mov	 BYTE PTR _pMsg$[ebp+1], 92 ; 0000005cH

; 282  :   pMsg.h.headcode = 0xAA;

  00911	c6 45 9e aa	 mov	 BYTE PTR _pMsg$[ebp+2], 170 ; 000000aaH

; 283  :   pMsg.h.subcode = 0x06;

  00915	c6 45 9f 06	 mov	 BYTE PTR _pMsg$[ebp+3], 6

; 284  : 
; 285  :   ZeroMemory(&pMsg.pRoomStatus, sizeof(pMsg.pRoomStatus));

  00919	6a 58		 push	 88			; 00000058H
  0091b	6a 00		 push	 0
  0091d	8d 45 a0	 lea	 eax, DWORD PTR _pMsg$[ebp+4]
  00920	50		 push	 eax
  00921	e8 00 00 00 00	 call	 _memset
  00926	83 c4 0c	 add	 esp, 12			; 0000000cH

; 286  :   
; 287  :   for(int i = 0; i < MAX_DUEL_ROOMS; i++)

  00929	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _i$234488[ebp], 0
  00930	eb 09		 jmp	 SHORT $LN9@SendDuelSt
$LN8@SendDuelSt:
  00932	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  00935	83 c0 01	 add	 eax, 1
  00938	89 45 98	 mov	 DWORD PTR _i$234488[ebp], eax
$LN9@SendDuelSt:
  0093b	83 7d 98 04	 cmp	 DWORD PTR _i$234488[ebp], 4
  0093f	0f 8d c5 00 00
	00		 jge	 $LN7@SendDuelSt

; 288  :   {
; 289  : 
; 290  :     if(this->m_Rooms[i].bFree == FALSE)

  00945	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  00948	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0094b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0094e	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  00953	0f 85 ac 00 00
	00		 jne	 $LN6@SendDuelSt

; 291  :     {
; 292  : 
; 293  :       if(this->m_Rooms[i].lpObj01 == NULL || this->m_Rooms[i].lpObj02 == NULL)

  00959	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  0095c	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0095f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00962	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  00967	74 10		 je	 SHORT $LN4@SendDuelSt
  00969	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  0096c	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0096f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00972	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  00977	75 02		 jne	 SHORT $LN5@SendDuelSt
$LN4@SendDuelSt:

; 294  :       {
; 295  :         continue;

  00979	eb b7		 jmp	 SHORT $LN8@SendDuelSt
$LN5@SendDuelSt:

; 296  :       }
; 297  : 
; 298  :       pMsg.pRoomStatus[i].btDuelRunning = TRUE;

  0097b	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  0097e	6b c0 16	 imul	 eax, 22			; 00000016H
  00981	c6 44 05 b4 01	 mov	 BYTE PTR _pMsg$[ebp+eax+24], 1

; 299  : 
; 300  :       int iSpecCount = this->GetSpectatorCount(i);

  00986	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  00989	50		 push	 eax
  0098a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0098d	e8 00 00 00 00	 call	 ?GetSpectatorCount@CDuelManager@@QAEHH@Z ; CDuelManager::GetSpectatorCount
  00992	89 45 94	 mov	 DWORD PTR _iSpecCount$234495[ebp], eax

; 301  :       if(iSpecCount < 0 || iSpecCount >= 10)

  00995	83 7d 94 00	 cmp	 DWORD PTR _iSpecCount$234495[ebp], 0
  00999	7c 06		 jl	 SHORT $LN2@SendDuelSt
  0099b	83 7d 94 0a	 cmp	 DWORD PTR _iSpecCount$234495[ebp], 10 ; 0000000aH
  0099f	7c 0d		 jl	 SHORT $LN3@SendDuelSt
$LN2@SendDuelSt:

; 302  :       {
; 303  :         pMsg.pRoomStatus[i].btDuelOpen = FALSE;

  009a1	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  009a4	6b c0 16	 imul	 eax, 22			; 00000016H
  009a7	c6 44 05 b5 00	 mov	 BYTE PTR _pMsg$[ebp+eax+25], 0

; 304  :       }
; 305  :       else

  009ac	eb 0b		 jmp	 SHORT $LN1@SendDuelSt
$LN3@SendDuelSt:

; 306  :       {
; 307  :         pMsg.pRoomStatus[i].btDuelOpen = TRUE;

  009ae	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  009b1	6b c0 16	 imul	 eax, 22			; 00000016H
  009b4	c6 44 05 b5 01	 mov	 BYTE PTR _pMsg$[ebp+eax+25], 1
$LN1@SendDuelSt:

; 308  :       }
; 309  : 
; 310  :       memcpy(&pMsg.pRoomStatus[i].szName1[0], &this->m_Rooms[i].lpObj01->Name[0], 10);

  009b9	6a 0a		 push	 10			; 0000000aH
  009bb	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  009be	6b c0 4c	 imul	 eax, 76			; 0000004cH
  009c1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009c4	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  009c8	83 c2 77	 add	 edx, 119		; 00000077H
  009cb	52		 push	 edx
  009cc	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  009cf	6b c0 16	 imul	 eax, 22			; 00000016H
  009d2	8d 4c 05 a0	 lea	 ecx, DWORD PTR _pMsg$[ebp+eax+4]
  009d6	51		 push	 ecx
  009d7	e8 00 00 00 00	 call	 _memcpy
  009dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 311  :       memcpy(&pMsg.pRoomStatus[i].szName2[0], &this->m_Rooms[i].lpObj02->Name[0], 10);

  009df	6a 0a		 push	 10			; 0000000aH
  009e1	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  009e4	6b c0 4c	 imul	 eax, 76			; 0000004cH
  009e7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009ea	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  009ee	83 c2 77	 add	 edx, 119		; 00000077H
  009f1	52		 push	 edx
  009f2	8b 45 98	 mov	 eax, DWORD PTR _i$234488[ebp]
  009f5	6b c0 16	 imul	 eax, 22			; 00000016H
  009f8	8d 4c 05 aa	 lea	 ecx, DWORD PTR _pMsg$[ebp+eax+14]
  009fc	51		 push	 ecx
  009fd	e8 00 00 00 00	 call	 _memcpy
  00a02	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@SendDuelSt:

; 312  : 
; 313  :     }
; 314  : 
; 315  :   }

  00a05	e9 28 ff ff ff	 jmp	 $LN8@SendDuelSt
$LN7@SendDuelSt:

; 316  : 
; 317  :   DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  00a0a	0f b6 45 9d	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00a0e	50		 push	 eax
  00a0f	8d 4d 9c	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00a12	51		 push	 ecx
  00a13	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00a16	8b 02		 mov	 eax, DWORD PTR [edx]
  00a18	50		 push	 eax
  00a19	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00a1e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 318  : 
; 319  : }

  00a21	5f		 pop	 edi
  00a22	5e		 pop	 esi
  00a23	5b		 pop	 ebx
  00a24	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a27	33 cd		 xor	 ecx, ebp
  00a29	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a2e	8b e5		 mov	 esp, ebp
  00a30	5d		 pop	 ebp
  00a31	c2 04 00	 ret	 4
?SendDuelStatus@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDuelManager::SendDuelStatus
_TEXT	ENDS
PUBLIC	?GetFreeRoomIndex@CDuelManager@@QAEHXZ		; CDuelManager::GetFreeRoomIndex
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$234503 = -8						; size = 4
_this$ = -4						; size = 4
?GetFreeRoomIndex@CDuelManager@@QAEHXZ PROC		; CDuelManager::GetFreeRoomIndex
; _this$ = ecx

; 322  : {

  00a40	55		 push	 ebp
  00a41	8b ec		 mov	 ebp, esp
  00a43	83 ec 48	 sub	 esp, 72			; 00000048H
  00a46	53		 push	 ebx
  00a47	56		 push	 esi
  00a48	57		 push	 edi
  00a49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 323  :   for(int i = 0; i < MAX_DUEL_ROOMS; i++)

  00a4c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$234503[ebp], 0
  00a53	eb 09		 jmp	 SHORT $LN5@GetFreeRoo
$LN4@GetFreeRoo:
  00a55	8b 45 f8	 mov	 eax, DWORD PTR _i$234503[ebp]
  00a58	83 c0 01	 add	 eax, 1
  00a5b	89 45 f8	 mov	 DWORD PTR _i$234503[ebp], eax
$LN5@GetFreeRoo:
  00a5e	83 7d f8 04	 cmp	 DWORD PTR _i$234503[ebp], 4
  00a62	7d 27		 jge	 SHORT $LN3@GetFreeRoo

; 324  :   {
; 325  :     if(this->m_Rooms[i].bFree == TRUE)

  00a64	8b 45 f8	 mov	 eax, DWORD PTR _i$234503[ebp]
  00a67	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00a6a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a6d	83 7c 01 10 01	 cmp	 DWORD PTR [ecx+eax+16], 1
  00a72	75 15		 jne	 SHORT $LN2@GetFreeRoo

; 326  :     {
; 327  :       if(this->m_Rooms[i].bWaiting == FALSE)

  00a74	8b 45 f8	 mov	 eax, DWORD PTR _i$234503[ebp]
  00a77	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00a7a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a7d	83 7c 01 14 00	 cmp	 DWORD PTR [ecx+eax+20], 0
  00a82	75 05		 jne	 SHORT $LN2@GetFreeRoo

; 328  :       {
; 329  :         return i;  

  00a84	8b 45 f8	 mov	 eax, DWORD PTR _i$234503[ebp]
  00a87	eb 05		 jmp	 SHORT $LN6@GetFreeRoo
$LN2@GetFreeRoo:

; 330  :       }
; 331  :     }
; 332  :   }

  00a89	eb ca		 jmp	 SHORT $LN4@GetFreeRoo
$LN3@GetFreeRoo:

; 333  :   return -1;

  00a8b	83 c8 ff	 or	 eax, -1
$LN6@GetFreeRoo:

; 334  : }

  00a8e	5f		 pop	 edi
  00a8f	5e		 pop	 esi
  00a90	5b		 pop	 ebx
  00a91	8b e5		 mov	 esp, ebp
  00a93	5d		 pop	 ebp
  00a94	c3		 ret	 0
?GetFreeRoomIndex@CDuelManager@@QAEHXZ ENDP		; CDuelManager::GetFreeRoomIndex
_TEXT	ENDS
PUBLIC	?UserDuelInfoReset@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::UserDuelInfoReset
EXTRN	?ReSetTarget@CDarkSpirit@@QAEXH@Z:PROC		; CDarkSpirit::ReSetTarget
EXTRN	?gDarkSpirit@@3PAVCDarkSpirit@@A:BYTE		; gDarkSpirit
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?UserDuelInfoReset@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDuelManager::UserDuelInfoReset
; _this$ = ecx

; 337  : { 

  00aa0	55		 push	 ebp
  00aa1	8b ec		 mov	 ebp, esp
  00aa3	83 ec 44	 sub	 esp, 68			; 00000044H
  00aa6	53		 push	 ebx
  00aa7	56		 push	 esi
  00aa8	57		 push	 edi
  00aa9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 338  :   if(lpObj == NULL) 

  00aac	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  00ab0	75 02		 jne	 SHORT $LN1@UserDuelIn

; 339  :   {  
; 340  :     return;

  00ab2	eb 57		 jmp	 SHORT $LN2@UserDuelIn
$LN1@UserDuelIn:

; 341  :   }
; 342  :   lpObj->m_iDuelRoom = -1;

  00ab4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ab7	c7 80 b4 21 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+8628], -1

; 343  :   lpObj->m_iDuelUser = -1;

  00ac1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ac4	c7 80 b8 0e 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3768], -1

; 344  :   lpObj->m_iDuelUserRequested = -1;

  00ace	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ad1	c7 80 b4 0e 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3764], -1

; 345  :   lpObj->m_iDuelUserReserved = -1;

  00adb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ade	c7 80 b0 0e 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3760], -1

; 346  :   lpObj->m_btDuelScore = 0;

  00ae8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00aeb	c6 80 bc 0e 00
	00 00		 mov	 BYTE PTR [eax+3772], 0

; 347  :   gDarkSpirit[lpObj->m_Index].ReSetTarget(lpObj->m_Index);

  00af2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00af5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00af7	51		 push	 ecx
  00af8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00afb	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00afd	6b c9 28	 imul	 ecx, 40			; 00000028H
  00b00	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gDarkSpirit@@3PAVCDarkSpirit@@A ; gDarkSpirit
  00b06	e8 00 00 00 00	 call	 ?ReSetTarget@CDarkSpirit@@QAEXH@Z ; CDarkSpirit::ReSetTarget
$LN2@UserDuelIn:

; 348  : }

  00b0b	5f		 pop	 edi
  00b0c	5e		 pop	 esi
  00b0d	5b		 pop	 ebx
  00b0e	8b e5		 mov	 esp, ebp
  00b10	5d		 pop	 ebp
  00b11	c2 04 00	 ret	 4
?UserDuelInfoReset@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDuelManager::UserDuelInfoReset
_TEXT	ENDS
PUBLIC	??_C@_0CH@OPDCOOJL@?$FLDuel?5Manager?$FN?5Room?5Reset?5?9?5Numb@ ; `string'
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?ExConfig@@3VcExConfigs@@A:BYTE			; ExConfig
;	COMDAT ??_C@_0CH@OPDCOOJL@?$FLDuel?5Manager?$FN?5Room?5Reset?5?9?5Numb@
CONST	SEGMENT
??_C@_0CH@OPDCOOJL@?$FLDuel?5Manager?$FN?5Room?5Reset?5?9?5Numb@ DB '[Due'
	DB	'l Manager] Room Reset - Number: %d', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$234530 = -8						; size = 4
_this$ = -4						; size = 4
_iRoom$ = 8						; size = 4
_dontMove$ = 12						; size = 1
_dontSendEnd$ = 16					; size = 1
?RoomReset@CDuelManager@@QAEXH_N0@Z PROC		; CDuelManager::RoomReset
; _this$ = ecx

; 351  : {

  00b20	55		 push	 ebp
  00b21	8b ec		 mov	 ebp, esp
  00b23	83 ec 48	 sub	 esp, 72			; 00000048H
  00b26	53		 push	 ebx
  00b27	56		 push	 esi
  00b28	57		 push	 edi
  00b29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 
; 353  :   if(this->m_Rooms[iRoom].lpObj01 != NULL)

  00b2c	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00b2f	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00b32	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b35	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  00b3a	0f 84 8f 00 00
	00		 je	 $LN14@RoomReset

; 354  :   {
; 355  :     if(gObjIsConnected(this->m_Rooms[iRoom].lpObj01->m_Index))

  00b40	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00b43	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00b46	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b49	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  00b4d	8b 02		 mov	 eax, DWORD PTR [edx]
  00b4f	50		 push	 eax
  00b50	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00b55	83 c4 04	 add	 esp, 4
  00b58	85 c0		 test	 eax, eax
  00b5a	74 5d		 je	 SHORT $LN13@RoomReset

; 356  :     {
; 357  :       if(dontSendEnd == false)

  00b5c	0f b6 45 10	 movzx	 eax, BYTE PTR _dontSendEnd$[ebp]
  00b60	85 c0		 test	 eax, eax
  00b62	75 16		 jne	 SHORT $LN12@RoomReset

; 358  :         this->SendEndDuel(this->m_Rooms[iRoom].lpObj01);

  00b64	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00b67	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00b6a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b6d	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  00b71	52		 push	 edx
  00b72	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b75	e8 00 00 00 00	 call	 ?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendEndDuel
$LN12@RoomReset:

; 359  :       if(this->m_Rooms[iRoom].lpObj01->MapNumber == MAP_INDEX_VULCANROOM)

  00b7a	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00b7d	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00b80	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b83	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  00b87	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00b8e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00b91	75 26		 jne	 SHORT $LN13@RoomReset

; 360  :       {
; 361  :         if(dontMove == false)

  00b93	0f b6 45 0c	 movzx	 eax, BYTE PTR _dontMove$[ebp]
  00b97	85 c0		 test	 eax, eax
  00b99	75 1e		 jne	 SHORT $LN13@RoomReset

; 362  :           gObjMoveGate(this->m_Rooms[iRoom].lpObj01->m_Index, ExConfig.PvP.DuelGate);

  00b9b	a1 dc 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2268
  00ba0	50		 push	 eax
  00ba1	8b 4d 08	 mov	 ecx, DWORD PTR _iRoom$[ebp]
  00ba4	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00ba7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00baa	8b 44 0a 18	 mov	 eax, DWORD PTR [edx+ecx+24]
  00bae	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bb0	51		 push	 ecx
  00bb1	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00bb6	83 c4 08	 add	 esp, 8
$LN13@RoomReset:

; 363  :       }
; 364  :     }
; 365  :     this->UserDuelInfoReset(this->m_Rooms[iRoom].lpObj01);

  00bb9	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00bbc	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00bbf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bc2	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  00bc6	52		 push	 edx
  00bc7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bca	e8 00 00 00 00	 call	 ?UserDuelInfoReset@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::UserDuelInfoReset
$LN14@RoomReset:

; 366  :   }
; 367  : 
; 368  :   if(this->m_Rooms[iRoom].lpObj02 != NULL)

  00bcf	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00bd2	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00bd5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bd8	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  00bdd	0f 84 8f 00 00
	00		 je	 $LN9@RoomReset

; 369  :   {
; 370  :     if(gObjIsConnected(this->m_Rooms[iRoom].lpObj02->m_Index))

  00be3	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00be6	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00be9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bec	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  00bf0	8b 02		 mov	 eax, DWORD PTR [edx]
  00bf2	50		 push	 eax
  00bf3	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00bf8	83 c4 04	 add	 esp, 4
  00bfb	85 c0		 test	 eax, eax
  00bfd	74 5d		 je	 SHORT $LN8@RoomReset

; 371  :     {
; 372  :       if(dontSendEnd == false)

  00bff	0f b6 45 10	 movzx	 eax, BYTE PTR _dontSendEnd$[ebp]
  00c03	85 c0		 test	 eax, eax
  00c05	75 16		 jne	 SHORT $LN7@RoomReset

; 373  :         this->SendEndDuel(this->m_Rooms[iRoom].lpObj02);

  00c07	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00c0a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00c0d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c10	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  00c14	52		 push	 edx
  00c15	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c18	e8 00 00 00 00	 call	 ?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendEndDuel
$LN7@RoomReset:

; 374  :       if(this->m_Rooms[iRoom].lpObj02->MapNumber == MAP_INDEX_VULCANROOM)

  00c1d	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00c20	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00c23	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c26	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  00c2a	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00c31	83 f8 40	 cmp	 eax, 64			; 00000040H
  00c34	75 26		 jne	 SHORT $LN8@RoomReset

; 375  :       {
; 376  :         if(dontMove == false)

  00c36	0f b6 45 0c	 movzx	 eax, BYTE PTR _dontMove$[ebp]
  00c3a	85 c0		 test	 eax, eax
  00c3c	75 1e		 jne	 SHORT $LN8@RoomReset

; 377  :           gObjMoveGate(this->m_Rooms[iRoom].lpObj02->m_Index, ExConfig.PvP.DuelGate);

  00c3e	a1 dc 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2268
  00c43	50		 push	 eax
  00c44	8b 4d 08	 mov	 ecx, DWORD PTR _iRoom$[ebp]
  00c47	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00c4a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00c4d	8b 44 0a 20	 mov	 eax, DWORD PTR [edx+ecx+32]
  00c51	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c53	51		 push	 ecx
  00c54	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00c59	83 c4 08	 add	 esp, 8
$LN8@RoomReset:

; 378  :       }
; 379  :     }
; 380  :     this->UserDuelInfoReset(this->m_Rooms[iRoom].lpObj02);

  00c5c	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00c5f	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00c62	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c65	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  00c69	52		 push	 edx
  00c6a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c6d	e8 00 00 00 00	 call	 ?UserDuelInfoReset@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::UserDuelInfoReset
$LN9@RoomReset:

; 381  :   }
; 382  : 
; 383  :   for(int i = 0; i < MAX_DUEL_LEARNERS; i++)

  00c72	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$234530[ebp], 0
  00c79	eb 09		 jmp	 SHORT $LN4@RoomReset
$LN3@RoomReset:
  00c7b	8b 45 f8	 mov	 eax, DWORD PTR _i$234530[ebp]
  00c7e	83 c0 01	 add	 eax, 1
  00c81	89 45 f8	 mov	 DWORD PTR _i$234530[ebp], eax
$LN4@RoomReset:
  00c84	83 7d f8 0a	 cmp	 DWORD PTR _i$234530[ebp], 10 ; 0000000aH
  00c88	0f 8d 95 00 00
	00		 jge	 $LN2@RoomReset

; 384  :   {
; 385  :     if(this->m_Rooms[iRoom].lpLearners[i] != NULL)

  00c8e	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00c91	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00c94	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c97	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00c9b	8b 45 f8	 mov	 eax, DWORD PTR _i$234530[ebp]
  00c9e	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  00ca3	74 61		 je	 SHORT $LN1@RoomReset

; 386  :     {
; 387  :       this->SendEndDuel(this->m_Rooms[iRoom].lpLearners[i]);

  00ca5	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00ca8	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00cab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cae	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00cb2	8b 45 f8	 mov	 eax, DWORD PTR _i$234530[ebp]
  00cb5	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  00cb9	51		 push	 ecx
  00cba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cbd	e8 00 00 00 00	 call	 ?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendEndDuel

; 388  :      // GCStateInfoSend(this->m_Rooms[iRoom].lpLearners[i], 0, eVS_INVISIBLE);
; 389  :      // GCStateInfoSend(this->m_Rooms[iRoom].lpLearners[i], 0, eVS_TRANSPARENCY);
; 390  :      // GCStateInfoSend(this->m_Rooms[iRoom].lpLearners[i], 0, eVS_DUEL_INTERFACE);
; 391  : 	  this->SetBuff(this->m_Rooms[iRoom].lpLearners[i], FALSE);

  00cc2	6a 00		 push	 0
  00cc4	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00cc7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00cca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ccd	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00cd1	8b 45 f8	 mov	 eax, DWORD PTR _i$234530[ebp]
  00cd4	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  00cd8	51		 push	 ecx
  00cd9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cdc	e8 00 00 00 00	 call	 ?SetBuff@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SetBuff

; 392  :       gObjMoveGate(this->m_Rooms[iRoom].lpLearners[i]->m_Index, ExConfig.PvP.DuelGate);

  00ce1	a1 dc 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2268
  00ce6	50		 push	 eax
  00ce7	8b 4d 08	 mov	 ecx, DWORD PTR _iRoom$[ebp]
  00cea	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00ced	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00cf0	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00cf4	8b 4d f8	 mov	 ecx, DWORD PTR _i$234530[ebp]
  00cf7	8b 54 88 18	 mov	 edx, DWORD PTR [eax+ecx*4+24]
  00cfb	8b 02		 mov	 eax, DWORD PTR [edx]
  00cfd	50		 push	 eax
  00cfe	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00d03	83 c4 08	 add	 esp, 8
$LN1@RoomReset:

; 393  :     }
; 394  :     this->m_Rooms[iRoom].lpLearners[i] = NULL;

  00d06	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00d09	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00d0c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d0f	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00d13	8b 45 f8	 mov	 eax, DWORD PTR _i$234530[ebp]
  00d16	c7 44 82 18 00
	00 00 00	 mov	 DWORD PTR [edx+eax*4+24], 0

; 395  :   }

  00d1e	e9 58 ff ff ff	 jmp	 $LN3@RoomReset
$LN2@RoomReset:

; 396  : 
; 397  :   this->m_Rooms[iRoom].lpObj01 = NULL;

  00d23	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00d26	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00d29	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d2c	c7 44 01 18 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+24], 0

; 398  :   this->m_Rooms[iRoom].btPoints01 = 0;

  00d34	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00d37	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00d3a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d3d	c6 44 01 1c 00	 mov	 BYTE PTR [ecx+eax+28], 0

; 399  : 
; 400  :   this->m_Rooms[iRoom].lpObj02 = NULL;

  00d42	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00d45	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00d48	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d4b	c7 44 01 20 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+32], 0

; 401  :   this->m_Rooms[iRoom].btPoints02 = 0;

  00d53	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00d56	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00d59	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d5c	c6 44 01 24 00	 mov	 BYTE PTR [ecx+eax+36], 0

; 402  : 
; 403  :   this->m_Rooms[iRoom].bFree = TRUE;

  00d61	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00d64	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00d67	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d6a	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 404  :   this->m_Rooms[iRoom].bWaiting = FALSE;

  00d72	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00d75	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00d78	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d7b	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 405  :   this->m_Rooms[iRoom].bHasWinner = FALSE;

  00d83	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00d86	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00d89	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d8c	c7 44 01 58 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+88], 0

; 406  : 
; 407  :   this->m_Rooms[iRoom].dwTickCount = 0;

  00d94	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00d97	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00d9a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d9d	c7 44 01 50 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+80], 0

; 408  :   this->m_Rooms[iRoom].dwStartTime = 0;

  00da5	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00da8	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00dab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dae	c7 44 01 54 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+84], 0

; 409  : 
; 410  :   LogAddTD("[Duel Manager] Room Reset - Number: %d", iRoom + 1);

  00db6	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00db9	83 c0 01	 add	 eax, 1
  00dbc	50		 push	 eax
  00dbd	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OPDCOOJL@?$FLDuel?5Manager?$FN?5Room?5Reset?5?9?5Numb@
  00dc2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00dc8	83 c4 08	 add	 esp, 8

; 411  : 
; 412  : }

  00dcb	5f		 pop	 edi
  00dcc	5e		 pop	 esi
  00dcd	5b		 pop	 ebx
  00dce	8b e5		 mov	 esp, ebp
  00dd0	5d		 pop	 ebp
  00dd1	c2 0c 00	 ret	 12			; 0000000cH
?RoomReset@CDuelManager@@QAEXH_N0@Z ENDP		; CDuelManager::RoomReset
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendEndDuelNotification@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAD1@Z ; CDuelManager::SendEndDuelNotification
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_Winner$ = 12						; size = 4
_Looser$ = 16						; size = 4
?SendEndDuelNotification@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAD1@Z PROC ; CDuelManager::SendEndDuelNotification
; _this$ = ecx

; 415  : {

  00de0	55		 push	 ebp
  00de1	8b ec		 mov	 ebp, esp
  00de3	83 ec 60	 sub	 esp, 96			; 00000060H
  00de6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00deb	33 c5		 xor	 eax, ebp
  00ded	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00df0	53		 push	 ebx
  00df1	56		 push	 esi
  00df2	57		 push	 edi
  00df3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 416  : 
; 417  :   PMSG_DUEL_FINISH pMsg;
; 418  :   pMsg.h.c = 0xC1;

  00df6	c6 45 e0 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 419  :   pMsg.h.size = sizeof(pMsg);

  00dfa	c6 45 e1 18	 mov	 BYTE PTR _pMsg$[ebp+1], 24 ; 00000018H

; 420  :   pMsg.h.headcode = 0xAA;

  00dfe	c6 45 e2 aa	 mov	 BYTE PTR _pMsg$[ebp+2], 170 ; 000000aaH

; 421  :   pMsg.h.subcode = 0x0C;

  00e02	c6 45 e3 0c	 mov	 BYTE PTR _pMsg$[ebp+3], 12 ; 0000000cH

; 422  :   memcpy(pMsg.szWinner, Winner, 10);

  00e06	6a 0a		 push	 10			; 0000000aH
  00e08	8b 45 0c	 mov	 eax, DWORD PTR _Winner$[ebp]
  00e0b	50		 push	 eax
  00e0c	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00e0f	51		 push	 ecx
  00e10	e8 00 00 00 00	 call	 _memcpy
  00e15	83 c4 0c	 add	 esp, 12			; 0000000cH

; 423  :   memcpy(pMsg.szLooser, Looser, 10);

  00e18	6a 0a		 push	 10			; 0000000aH
  00e1a	8b 45 10	 mov	 eax, DWORD PTR _Looser$[ebp]
  00e1d	50		 push	 eax
  00e1e	8d 4d ee	 lea	 ecx, DWORD PTR _pMsg$[ebp+14]
  00e21	51		 push	 ecx
  00e22	e8 00 00 00 00	 call	 _memcpy
  00e27	83 c4 0c	 add	 esp, 12			; 0000000cH

; 424  : 
; 425  :   DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  00e2a	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00e2e	50		 push	 eax
  00e2f	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00e32	51		 push	 ecx
  00e33	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00e36	8b 02		 mov	 eax, DWORD PTR [edx]
  00e38	50		 push	 eax
  00e39	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00e3e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 426  : 
; 427  : }

  00e41	5f		 pop	 edi
  00e42	5e		 pop	 esi
  00e43	5b		 pop	 ebx
  00e44	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e47	33 cd		 xor	 ecx, ebp
  00e49	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e4e	8b e5		 mov	 esp, ebp
  00e50	5d		 pop	 ebp
  00e51	c2 0c 00	 ret	 12			; 0000000cH
?SendEndDuelNotification@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAD1@Z ENDP ; CDuelManager::SendEndDuelNotification
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendSpectatorAdd@CDuelManager@@QAEXHH@Z	; CDuelManager::SendSpectatorAdd
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$234557 = -28						; size = 4
_pMsg$ = -24						; size = 14
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iSpecIndex$ = 8					; size = 4
_iRoom$ = 12						; size = 4
?SendSpectatorAdd@CDuelManager@@QAEXHH@Z PROC		; CDuelManager::SendSpectatorAdd
; _this$ = ecx

; 430  : {

  00e60	55		 push	 ebp
  00e61	8b ec		 mov	 ebp, esp
  00e63	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00e66	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00e6b	33 c5		 xor	 eax, ebp
  00e6d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00e70	53		 push	 ebx
  00e71	56		 push	 esi
  00e72	57		 push	 edi
  00e73	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 431  : 
; 432  :   if(iRoom < 0 || iRoom >= MAX_DUEL_ROOMS)

  00e76	83 7d 0c 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  00e7a	7c 06		 jl	 SHORT $LN11@SendSpecta
  00e7c	83 7d 0c 04	 cmp	 DWORD PTR _iRoom$[ebp], 4
  00e80	7c 05		 jl	 SHORT $LN12@SendSpecta
$LN11@SendSpecta:

; 433  :   {
; 434  :     return;

  00e82	e9 eb 00 00 00	 jmp	 $LN13@SendSpecta
$LN12@SendSpecta:

; 435  :   }
; 436  : 
; 437  :   if(iSpecIndex < 0 || iSpecIndex >= MAX_DUEL_LEARNERS)

  00e87	83 7d 08 00	 cmp	 DWORD PTR _iSpecIndex$[ebp], 0
  00e8b	7c 06		 jl	 SHORT $LN9@SendSpecta
  00e8d	83 7d 08 0a	 cmp	 DWORD PTR _iSpecIndex$[ebp], 10 ; 0000000aH
  00e91	7c 05		 jl	 SHORT $LN10@SendSpecta
$LN9@SendSpecta:

; 438  :   {
; 439  :     return;

  00e93	e9 da 00 00 00	 jmp	 $LN13@SendSpecta
$LN10@SendSpecta:

; 440  :   }
; 441  : 
; 442  :   if(this->m_Rooms[iRoom].lpLearners[iSpecIndex] == NULL) return;

  00e98	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00e9b	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00e9e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ea1	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00ea5	8b 45 08	 mov	 eax, DWORD PTR _iSpecIndex$[ebp]
  00ea8	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  00ead	75 05		 jne	 SHORT $LN8@SendSpecta
  00eaf	e9 be 00 00 00	 jmp	 $LN13@SendSpecta
$LN8@SendSpecta:

; 443  : 
; 444  :   if(this->m_Rooms[iRoom].lpObj01 == NULL || 
; 445  :     this->m_Rooms[iRoom].lpObj02 == NULL)

  00eb4	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00eb7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00eba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ebd	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  00ec2	74 10		 je	 SHORT $LN6@SendSpecta
  00ec4	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00ec7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00eca	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ecd	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  00ed2	75 05		 jne	 SHORT $LN7@SendSpecta
$LN6@SendSpecta:

; 446  :   {
; 447  :     return;

  00ed4	e9 99 00 00 00	 jmp	 $LN13@SendSpecta
$LN7@SendSpecta:

; 448  :   }
; 449  : 
; 450  :   PMSG_DUEL_SPEC_ADD pMsg;
; 451  :   pMsg.h.c = 0xC1;

  00ed9	c6 45 e8 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 452  :   pMsg.h.size = sizeof(pMsg);

  00edd	c6 45 e9 0e	 mov	 BYTE PTR _pMsg$[ebp+1], 14 ; 0000000eH

; 453  :   pMsg.h.headcode = 0xAA;

  00ee1	c6 45 ea aa	 mov	 BYTE PTR _pMsg$[ebp+2], 170 ; 000000aaH

; 454  :   pMsg.h.subcode = 0x08;

  00ee5	c6 45 eb 08	 mov	 BYTE PTR _pMsg$[ebp+3], 8

; 455  :   memcpy(pMsg.szName, this->m_Rooms[iRoom].lpLearners[iSpecIndex]->Name, 10);

  00ee9	6a 0a		 push	 10			; 0000000aH
  00eeb	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00eee	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00ef1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ef4	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00ef8	8b 45 08	 mov	 eax, DWORD PTR _iSpecIndex$[ebp]
  00efb	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  00eff	83 c1 77	 add	 ecx, 119		; 00000077H
  00f02	51		 push	 ecx
  00f03	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00f06	52		 push	 edx
  00f07	e8 00 00 00 00	 call	 _memcpy
  00f0c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 456  : 
; 457  :   for(int i = 0; i < MAX_DUEL_LEARNERS; i++)

  00f0f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$234557[ebp], 0
  00f16	eb 09		 jmp	 SHORT $LN5@SendSpecta
$LN4@SendSpecta:
  00f18	8b 45 e4	 mov	 eax, DWORD PTR _i$234557[ebp]
  00f1b	83 c0 01	 add	 eax, 1
  00f1e	89 45 e4	 mov	 DWORD PTR _i$234557[ebp], eax
$LN5@SendSpecta:
  00f21	83 7d e4 0a	 cmp	 DWORD PTR _i$234557[ebp], 10 ; 0000000aH
  00f25	7d 4b		 jge	 SHORT $LN13@SendSpecta

; 458  :   {
; 459  :     if(i == iSpecIndex) continue;

  00f27	8b 45 e4	 mov	 eax, DWORD PTR _i$234557[ebp]
  00f2a	3b 45 08	 cmp	 eax, DWORD PTR _iSpecIndex$[ebp]
  00f2d	75 02		 jne	 SHORT $LN2@SendSpecta
  00f2f	eb e7		 jmp	 SHORT $LN4@SendSpecta
$LN2@SendSpecta:

; 460  :     if(this->m_Rooms[iRoom].lpLearners[i] != NULL)

  00f31	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00f34	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00f37	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f3a	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00f3e	8b 45 e4	 mov	 eax, DWORD PTR _i$234557[ebp]
  00f41	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  00f46	74 28		 je	 SHORT $LN1@SendSpecta

; 461  :     {
; 462  :       DataSend(this->m_Rooms[iRoom].lpLearners[i]->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  00f48	0f b6 45 e9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00f4c	50		 push	 eax
  00f4d	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00f50	51		 push	 ecx
  00f51	8b 55 0c	 mov	 edx, DWORD PTR _iRoom$[ebp]
  00f54	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00f57	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f5a	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  00f5e	8b 55 e4	 mov	 edx, DWORD PTR _i$234557[ebp]
  00f61	8b 44 91 18	 mov	 eax, DWORD PTR [ecx+edx*4+24]
  00f65	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f67	51		 push	 ecx
  00f68	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00f6d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SendSpecta:

; 463  :     }
; 464  :   }

  00f70	eb a6		 jmp	 SHORT $LN4@SendSpecta
$LN13@SendSpecta:

; 465  : 
; 466  : }

  00f72	5f		 pop	 edi
  00f73	5e		 pop	 esi
  00f74	5b		 pop	 ebx
  00f75	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f78	33 cd		 xor	 ecx, ebp
  00f7a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f7f	8b e5		 mov	 esp, ebp
  00f81	5d		 pop	 ebp
  00f82	c2 08 00	 ret	 8
?SendSpectatorAdd@CDuelManager@@QAEXHH@Z ENDP		; CDuelManager::SendSpectatorAdd
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$234577 = -28						; size = 4
_pMsg$ = -24						; size = 14
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iSpecIndex$ = 8					; size = 4
_iRoom$ = 12						; size = 4
?SendSpectatorRemove@CDuelManager@@QAEXHH@Z PROC	; CDuelManager::SendSpectatorRemove
; _this$ = ecx

; 469  : {

  00f90	55		 push	 ebp
  00f91	8b ec		 mov	 ebp, esp
  00f93	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00f96	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00f9b	33 c5		 xor	 eax, ebp
  00f9d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00fa0	53		 push	 ebx
  00fa1	56		 push	 esi
  00fa2	57		 push	 edi
  00fa3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 470  : 
; 471  :   if(iRoom < 0 || iRoom >= MAX_DUEL_ROOMS)

  00fa6	83 7d 0c 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  00faa	7c 06		 jl	 SHORT $LN11@SendSpecta@2
  00fac	83 7d 0c 04	 cmp	 DWORD PTR _iRoom$[ebp], 4
  00fb0	7c 05		 jl	 SHORT $LN12@SendSpecta@2
$LN11@SendSpecta@2:

; 472  :   {
; 473  :     return;

  00fb2	e9 eb 00 00 00	 jmp	 $LN13@SendSpecta@2
$LN12@SendSpecta@2:

; 474  :   }
; 475  : 
; 476  :   if(iSpecIndex < 0 || iSpecIndex >= MAX_DUEL_LEARNERS)

  00fb7	83 7d 08 00	 cmp	 DWORD PTR _iSpecIndex$[ebp], 0
  00fbb	7c 06		 jl	 SHORT $LN9@SendSpecta@2
  00fbd	83 7d 08 0a	 cmp	 DWORD PTR _iSpecIndex$[ebp], 10 ; 0000000aH
  00fc1	7c 05		 jl	 SHORT $LN10@SendSpecta@2
$LN9@SendSpecta@2:

; 477  :   {
; 478  :     return;

  00fc3	e9 da 00 00 00	 jmp	 $LN13@SendSpecta@2
$LN10@SendSpecta@2:

; 479  :   }
; 480  : 
; 481  :   if(this->m_Rooms[iRoom].lpLearners[iSpecIndex] == NULL) return;

  00fc8	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00fcb	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00fce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fd1	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00fd5	8b 45 08	 mov	 eax, DWORD PTR _iSpecIndex$[ebp]
  00fd8	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  00fdd	75 05		 jne	 SHORT $LN8@SendSpecta@2
  00fdf	e9 be 00 00 00	 jmp	 $LN13@SendSpecta@2
$LN8@SendSpecta@2:

; 482  : 
; 483  :   if(this->m_Rooms[iRoom].lpObj01 == NULL || 
; 484  :     this->m_Rooms[iRoom].lpObj02 == NULL)

  00fe4	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00fe7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00fea	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fed	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  00ff2	74 10		 je	 SHORT $LN6@SendSpecta@2
  00ff4	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  00ff7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00ffa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ffd	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  01002	75 05		 jne	 SHORT $LN7@SendSpecta@2
$LN6@SendSpecta@2:

; 485  :   {
; 486  :     return;

  01004	e9 99 00 00 00	 jmp	 $LN13@SendSpecta@2
$LN7@SendSpecta@2:

; 487  :   }
; 488  : 
; 489  :   PMSG_DUEL_SPEC_ADD pMsg;
; 490  :   pMsg.h.c = 0xC1;

  01009	c6 45 e8 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 491  :   pMsg.h.size = sizeof(pMsg);

  0100d	c6 45 e9 0e	 mov	 BYTE PTR _pMsg$[ebp+1], 14 ; 0000000eH

; 492  :   pMsg.h.headcode = 0xAA;

  01011	c6 45 ea aa	 mov	 BYTE PTR _pMsg$[ebp+2], 170 ; 000000aaH

; 493  :   pMsg.h.subcode = 0x0A;

  01015	c6 45 eb 0a	 mov	 BYTE PTR _pMsg$[ebp+3], 10 ; 0000000aH

; 494  :   memcpy(pMsg.szName, this->m_Rooms[iRoom].lpLearners[iSpecIndex]->Name, 10);

  01019	6a 0a		 push	 10			; 0000000aH
  0101b	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0101e	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01024	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  01028	8b 45 08	 mov	 eax, DWORD PTR _iSpecIndex$[ebp]
  0102b	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  0102f	83 c1 77	 add	 ecx, 119		; 00000077H
  01032	51		 push	 ecx
  01033	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  01036	52		 push	 edx
  01037	e8 00 00 00 00	 call	 _memcpy
  0103c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 495  : 
; 496  :   for(int i = 0; i < MAX_DUEL_LEARNERS; i++)

  0103f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$234577[ebp], 0
  01046	eb 09		 jmp	 SHORT $LN5@SendSpecta@2
$LN4@SendSpecta@2:
  01048	8b 45 e4	 mov	 eax, DWORD PTR _i$234577[ebp]
  0104b	83 c0 01	 add	 eax, 1
  0104e	89 45 e4	 mov	 DWORD PTR _i$234577[ebp], eax
$LN5@SendSpecta@2:
  01051	83 7d e4 0a	 cmp	 DWORD PTR _i$234577[ebp], 10 ; 0000000aH
  01055	7d 4b		 jge	 SHORT $LN13@SendSpecta@2

; 497  :   {
; 498  :     if(i == iSpecIndex) continue;

  01057	8b 45 e4	 mov	 eax, DWORD PTR _i$234577[ebp]
  0105a	3b 45 08	 cmp	 eax, DWORD PTR _iSpecIndex$[ebp]
  0105d	75 02		 jne	 SHORT $LN2@SendSpecta@2
  0105f	eb e7		 jmp	 SHORT $LN4@SendSpecta@2
$LN2@SendSpecta@2:

; 499  :     if(this->m_Rooms[iRoom].lpLearners[i] != NULL)

  01061	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  01064	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01067	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0106a	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0106e	8b 45 e4	 mov	 eax, DWORD PTR _i$234577[ebp]
  01071	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  01076	74 28		 je	 SHORT $LN1@SendSpecta@2

; 500  :     {
; 501  :       DataSend(this->m_Rooms[iRoom].lpLearners[i]->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  01078	0f b6 45 e9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0107c	50		 push	 eax
  0107d	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01080	51		 push	 ecx
  01081	8b 55 0c	 mov	 edx, DWORD PTR _iRoom$[ebp]
  01084	6b d2 4c	 imul	 edx, 76			; 0000004cH
  01087	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0108a	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  0108e	8b 55 e4	 mov	 edx, DWORD PTR _i$234577[ebp]
  01091	8b 44 91 18	 mov	 eax, DWORD PTR [ecx+edx*4+24]
  01095	8b 08		 mov	 ecx, DWORD PTR [eax]
  01097	51		 push	 ecx
  01098	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0109d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SendSpecta@2:

; 502  :     }
; 503  :   }

  010a0	eb a6		 jmp	 SHORT $LN4@SendSpecta@2
$LN13@SendSpecta@2:

; 504  : 
; 505  : }

  010a2	5f		 pop	 edi
  010a3	5e		 pop	 esi
  010a4	5b		 pop	 ebx
  010a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  010a8	33 cd		 xor	 ecx, ebp
  010aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  010af	8b e5		 mov	 esp, ebp
  010b1	5d		 pop	 ebp
  010b2	c2 08 00	 ret	 8
?SendSpectatorRemove@CDuelManager@@QAEXHH@Z ENDP	; CDuelManager::SendSpectatorRemove
_TEXT	ENDS
PUBLIC	?SendSpectatorList@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SendSpectatorList
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_u$234591 = -8						; size = 4
_this$ = -4						; size = 4
_iRoom$ = 8						; size = 4
?SendSpectatorList@CDuelManager@@QAEXH@Z PROC		; CDuelManager::SendSpectatorList
; _this$ = ecx

; 508  : {

  010c0	55		 push	 ebp
  010c1	8b ec		 mov	 ebp, esp
  010c3	83 ec 48	 sub	 esp, 72			; 00000048H
  010c6	53		 push	 ebx
  010c7	56		 push	 esi
  010c8	57		 push	 edi
  010c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 509  : 
; 510  :   if(iRoom < 0 || iRoom >= MAX_DUEL_ROOMS)

  010cc	83 7d 08 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  010d0	7c 06		 jl	 SHORT $LN6@SendSpecta@3
  010d2	83 7d 08 04	 cmp	 DWORD PTR _iRoom$[ebp], 4
  010d6	7c 02		 jl	 SHORT $LN7@SendSpecta@3
$LN6@SendSpecta@3:

; 511  :   {
; 512  :     return;

  010d8	eb 62		 jmp	 SHORT $LN8@SendSpecta@3
$LN7@SendSpecta@3:

; 513  :   }
; 514  : 
; 515  :   if(this->m_Rooms[iRoom].bFree == FALSE)

  010da	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  010dd	6b c0 4c	 imul	 eax, 76			; 0000004cH
  010e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010e3	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  010e8	75 52		 jne	 SHORT $LN8@SendSpecta@3

; 516  :   {
; 517  :     for(int u = 0; u < MAX_DUEL_LEARNERS; u++)

  010ea	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _u$234591[ebp], 0
  010f1	eb 09		 jmp	 SHORT $LN4@SendSpecta@3
$LN3@SendSpecta@3:
  010f3	8b 45 f8	 mov	 eax, DWORD PTR _u$234591[ebp]
  010f6	83 c0 01	 add	 eax, 1
  010f9	89 45 f8	 mov	 DWORD PTR _u$234591[ebp], eax
$LN4@SendSpecta@3:
  010fc	83 7d f8 0a	 cmp	 DWORD PTR _u$234591[ebp], 10 ; 0000000aH
  01100	7d 3a		 jge	 SHORT $LN8@SendSpecta@3

; 518  :     {
; 519  :       if(this->m_Rooms[iRoom].lpLearners[u] != NULL)

  01102	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  01105	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01108	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0110b	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0110f	8b 45 f8	 mov	 eax, DWORD PTR _u$234591[ebp]
  01112	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  01117	74 21		 je	 SHORT $LN1@SendSpecta@3

; 520  :       {
; 521  :         this->SendSpectatorList(this->m_Rooms[iRoom].lpLearners[u], iRoom);

  01119	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0111c	50		 push	 eax
  0111d	8b 4d 08	 mov	 ecx, DWORD PTR _iRoom$[ebp]
  01120	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  01123	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01126	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  0112a	8b 4d f8	 mov	 ecx, DWORD PTR _u$234591[ebp]
  0112d	8b 54 88 18	 mov	 edx, DWORD PTR [eax+ecx*4+24]
  01131	52		 push	 edx
  01132	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01135	e8 00 00 00 00	 call	 ?SendSpectatorList@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SendSpectatorList
$LN1@SendSpecta@3:

; 522  :       }
; 523  :     }

  0113a	eb b7		 jmp	 SHORT $LN3@SendSpecta@3
$LN8@SendSpecta@3:

; 524  :   }
; 525  : 
; 526  : }

  0113c	5f		 pop	 edi
  0113d	5e		 pop	 esi
  0113e	5b		 pop	 ebx
  0113f	8b e5		 mov	 esp, ebp
  01141	5d		 pop	 ebp
  01142	c2 04 00	 ret	 4
?SendSpectatorList@CDuelManager@@QAEXH@Z ENDP		; CDuelManager::SendSpectatorList
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv135 = -188						; size = 4
_u$234607 = -120					; size = 4
_pMsg$ = -116						; size = 105
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iRoom$ = 12						; size = 4
?SendSpectatorList@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CDuelManager::SendSpectatorList
; _this$ = ecx

; 529  : {

  01150	55		 push	 ebp
  01151	8b ec		 mov	 ebp, esp
  01153	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  01159	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0115e	33 c5		 xor	 eax, ebp
  01160	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01163	53		 push	 ebx
  01164	56		 push	 esi
  01165	57		 push	 edi
  01166	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 530  : 
; 531  :   if(iRoom < 0 || iRoom >= MAX_DUEL_ROOMS)

  01169	83 7d 0c 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  0116d	7c 06		 jl	 SHORT $LN8@SendSpecta@4
  0116f	83 7d 0c 04	 cmp	 DWORD PTR _iRoom$[ebp], 4
  01173	7c 05		 jl	 SHORT $LN9@SendSpecta@4
$LN8@SendSpecta@4:

; 532  :   {
; 533  :     return;

  01175	e9 dd 00 00 00	 jmp	 $LN10@SendSpecta@4
$LN9@SendSpecta@4:

; 534  :   }
; 535  : 
; 536  :   if(this->m_Rooms[iRoom].lpObj01 == NULL || 
; 537  :     this->m_Rooms[iRoom].lpObj02 == NULL)

  0117a	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0117d	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01180	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01183	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  01188	74 10		 je	 SHORT $LN6@SendSpecta@4
  0118a	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0118d	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01190	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01193	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  01198	75 05		 jne	 SHORT $LN7@SendSpecta@4
$LN6@SendSpecta@4:

; 538  :   {
; 539  :     return;

  0119a	e9 b8 00 00 00	 jmp	 $LN10@SendSpecta@4
$LN7@SendSpecta@4:

; 540  :   }
; 541  : 
; 542  :   PMSG_DUEL_SPEC_LIST pMsg;
; 543  :   pMsg.h.c = 0xC1;

  0119f	c6 45 8c c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 544  :   pMsg.h.headcode = 0xAA;

  011a3	c6 45 8e aa	 mov	 BYTE PTR _pMsg$[ebp+2], 170 ; 000000aaH

; 545  :   pMsg.h.subcode = 0x0B;

  011a7	c6 45 8f 0b	 mov	 BYTE PTR _pMsg$[ebp+3], 11 ; 0000000bH

; 546  :   pMsg.btCount = 0;

  011ab	c6 45 90 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 547  : 
; 548  :   if(this->m_Rooms[iRoom].bFree == FALSE)

  011af	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  011b2	6b c0 4c	 imul	 eax, 76			; 0000004cH
  011b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011b8	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  011bd	75 74		 jne	 SHORT $LN5@SendSpecta@4

; 549  :   {
; 550  :     for(int u = 0; u < MAX_DUEL_LEARNERS; u++)

  011bf	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _u$234607[ebp], 0
  011c6	eb 09		 jmp	 SHORT $LN4@SendSpecta@4
$LN3@SendSpecta@4:
  011c8	8b 45 88	 mov	 eax, DWORD PTR _u$234607[ebp]
  011cb	83 c0 01	 add	 eax, 1
  011ce	89 45 88	 mov	 DWORD PTR _u$234607[ebp], eax
$LN4@SendSpecta@4:
  011d1	83 7d 88 0a	 cmp	 DWORD PTR _u$234607[ebp], 10 ; 0000000aH
  011d5	7d 5c		 jge	 SHORT $LN5@SendSpecta@4

; 551  :     {
; 552  :       if(this->m_Rooms[iRoom].lpLearners[u] != NULL)

  011d7	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  011da	6b c0 4c	 imul	 eax, 76			; 0000004cH
  011dd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011e0	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  011e4	8b 45 88	 mov	 eax, DWORD PTR _u$234607[ebp]
  011e7	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  011ec	74 43		 je	 SHORT $LN1@SendSpecta@4

; 553  :       {
; 554  :         memcpy(&pMsg.szName[pMsg.btCount++][0], this->m_Rooms[iRoom].lpLearners[u]->Name, 10);

  011ee	0f b6 45 90	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  011f2	6b c0 0a	 imul	 eax, 10			; 0000000aH
  011f5	8d 4c 05 91	 lea	 ecx, DWORD PTR _pMsg$[ebp+eax+5]
  011f9	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv135[ebp], ecx
  011ff	6a 0a		 push	 10			; 0000000aH
  01201	8b 55 0c	 mov	 edx, DWORD PTR _iRoom$[ebp]
  01204	6b d2 4c	 imul	 edx, 76			; 0000004cH
  01207	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0120a	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  0120e	8b 55 88	 mov	 edx, DWORD PTR _u$234607[ebp]
  01211	8b 44 91 18	 mov	 eax, DWORD PTR [ecx+edx*4+24]
  01215	83 c0 77	 add	 eax, 119		; 00000077H
  01218	50		 push	 eax
  01219	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  0121f	51		 push	 ecx
  01220	e8 00 00 00 00	 call	 _memcpy
  01225	83 c4 0c	 add	 esp, 12			; 0000000cH
  01228	8a 55 90	 mov	 dl, BYTE PTR _pMsg$[ebp+4]
  0122b	80 c2 01	 add	 dl, 1
  0122e	88 55 90	 mov	 BYTE PTR _pMsg$[ebp+4], dl
$LN1@SendSpecta@4:

; 555  :       }
; 556  :     }

  01231	eb 95		 jmp	 SHORT $LN3@SendSpecta@4
$LN5@SendSpecta@4:

; 557  :   }
; 558  : 
; 559  :   pMsg.h.size = 5 + (pMsg.btCount * 10);

  01233	0f b6 45 90	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  01237	6b c0 0a	 imul	 eax, 10			; 0000000aH
  0123a	83 c0 05	 add	 eax, 5
  0123d	88 45 8d	 mov	 BYTE PTR _pMsg$[ebp+1], al

; 560  : 
; 561  :   DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  01240	0f b6 45 8d	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01244	50		 push	 eax
  01245	8d 4d 8c	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01248	51		 push	 ecx
  01249	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0124c	8b 02		 mov	 eax, DWORD PTR [edx]
  0124e	50		 push	 eax
  0124f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01254	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SendSpecta@4:

; 562  : 
; 563  : }

  01257	5f		 pop	 edi
  01258	5e		 pop	 esi
  01259	5b		 pop	 ebx
  0125a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0125d	33 cd		 xor	 ecx, ebp
  0125f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01264	8b e5		 mov	 esp, ebp
  01266	5d		 pop	 ebp
  01267	c2 08 00	 ret	 8
?SendSpectatorList@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CDuelManager::SendSpectatorList
_TEXT	ENDS
PUBLIC	?SendLifebarStatus@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SendLifebarStatus
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_u$234622 = -8						; size = 4
_this$ = -4						; size = 4
_iRoom$ = 8						; size = 4
?SendLifebarStatus@CDuelManager@@QAEXH@Z PROC		; CDuelManager::SendLifebarStatus
; _this$ = ecx

; 566  : {

  01270	55		 push	 ebp
  01271	8b ec		 mov	 ebp, esp
  01273	83 ec 48	 sub	 esp, 72			; 00000048H
  01276	53		 push	 ebx
  01277	56		 push	 esi
  01278	57		 push	 edi
  01279	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 567  : 
; 568  :   if(iRoom < 0 || iRoom >= MAX_DUEL_ROOMS)

  0127c	83 7d 08 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  01280	7c 06		 jl	 SHORT $LN8@SendLifeba
  01282	83 7d 08 04	 cmp	 DWORD PTR _iRoom$[ebp], 4
  01286	7c 05		 jl	 SHORT $LN9@SendLifeba
$LN8@SendLifeba:

; 569  :   {
; 570  :     return;

  01288	e9 84 00 00 00	 jmp	 $LN10@SendLifeba
$LN9@SendLifeba:

; 571  :   }
; 572  : 
; 573  :   if(this->m_Rooms[iRoom].lpObj01 == NULL || 
; 574  :     this->m_Rooms[iRoom].lpObj02 == NULL)

  0128d	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  01290	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01293	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01296	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  0129b	74 10		 je	 SHORT $LN6@SendLifeba
  0129d	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  012a0	6b c0 4c	 imul	 eax, 76			; 0000004cH
  012a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012a6	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  012ab	75 02		 jne	 SHORT $LN7@SendLifeba
$LN6@SendLifeba:

; 575  :   {
; 576  :     return;

  012ad	eb 62		 jmp	 SHORT $LN10@SendLifeba
$LN7@SendLifeba:

; 577  :   }
; 578  : 
; 579  :   if(this->m_Rooms[iRoom].bFree == FALSE)

  012af	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  012b2	6b c0 4c	 imul	 eax, 76			; 0000004cH
  012b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012b8	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  012bd	75 52		 jne	 SHORT $LN10@SendLifeba

; 580  :   {
; 581  :     for(int u = 0; u < MAX_DUEL_LEARNERS; u++)

  012bf	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _u$234622[ebp], 0
  012c6	eb 09		 jmp	 SHORT $LN4@SendLifeba
$LN3@SendLifeba:
  012c8	8b 45 f8	 mov	 eax, DWORD PTR _u$234622[ebp]
  012cb	83 c0 01	 add	 eax, 1
  012ce	89 45 f8	 mov	 DWORD PTR _u$234622[ebp], eax
$LN4@SendLifeba:
  012d1	83 7d f8 0a	 cmp	 DWORD PTR _u$234622[ebp], 10 ; 0000000aH
  012d5	7d 3a		 jge	 SHORT $LN10@SendLifeba

; 582  :     {
; 583  :       if(this->m_Rooms[iRoom].lpLearners[u] != NULL)

  012d7	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  012da	6b c0 4c	 imul	 eax, 76			; 0000004cH
  012dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012e0	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  012e4	8b 45 f8	 mov	 eax, DWORD PTR _u$234622[ebp]
  012e7	83 7c 82 18 00	 cmp	 DWORD PTR [edx+eax*4+24], 0
  012ec	74 21		 je	 SHORT $LN1@SendLifeba

; 584  :       {
; 585  :         this->SendLifebarStatus(this->m_Rooms[iRoom].lpLearners[u], iRoom);

  012ee	8b 45 08	 mov	 eax, DWORD PTR _iRoom$[ebp]
  012f1	50		 push	 eax
  012f2	8b 4d 08	 mov	 ecx, DWORD PTR _iRoom$[ebp]
  012f5	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  012f8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  012fb	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  012ff	8b 4d f8	 mov	 ecx, DWORD PTR _u$234622[ebp]
  01302	8b 54 88 18	 mov	 edx, DWORD PTR [eax+ecx*4+24]
  01306	52		 push	 edx
  01307	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0130a	e8 00 00 00 00	 call	 ?SendLifebarStatus@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SendLifebarStatus
$LN1@SendLifeba:

; 586  :       }
; 587  :     }

  0130f	eb b7		 jmp	 SHORT $LN3@SendLifeba
$LN10@SendLifeba:

; 588  :   }
; 589  : 
; 590  : }

  01311	5f		 pop	 edi
  01312	5e		 pop	 esi
  01313	5b		 pop	 ebx
  01314	8b e5		 mov	 esp, ebp
  01316	5d		 pop	 ebp
  01317	c2 04 00	 ret	 4
?SendLifebarStatus@CDuelManager@@QAEXH@Z ENDP		; CDuelManager::SendLifebarStatus
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	__$ArrayPad$
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv294 = -96						; size = 4
tv278 = -96						; size = 4
tv292 = -92						; size = 4
tv276 = -92						; size = 4
tv289 = -86						; size = 2
tv273 = -86						; size = 2
_pMsg$ = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iRoom$ = 12						; size = 4
?SendLifebarStatus@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CDuelManager::SendLifebarStatus
; _this$ = ecx

; 593  : {

  01320	55		 push	 ebp
  01321	8b ec		 mov	 ebp, esp
  01323	83 ec 60	 sub	 esp, 96			; 00000060H
  01326	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0132b	33 c5		 xor	 eax, ebp
  0132d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01330	53		 push	 ebx
  01331	56		 push	 esi
  01332	57		 push	 edi
  01333	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 594  : 
; 595  :   if(iRoom < 0 || iRoom >= MAX_DUEL_ROOMS)

  01336	83 7d 0c 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  0133a	7c 06		 jl	 SHORT $LN3@SendLifeba@2
  0133c	83 7d 0c 04	 cmp	 DWORD PTR _iRoom$[ebp], 4
  01340	7c 05		 jl	 SHORT $LN4@SendLifeba@2
$LN3@SendLifeba@2:

; 596  :   {
; 597  :     return;

  01342	e9 fe 01 00 00	 jmp	 $LN5@SendLifeba@2
$LN4@SendLifeba@2:

; 598  :   }
; 599  : 
; 600  :   if(this->m_Rooms[iRoom].lpObj01 == NULL || 
; 601  :     this->m_Rooms[iRoom].lpObj02 == NULL)

  01347	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0134a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0134d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01350	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  01355	74 10		 je	 SHORT $LN1@SendLifeba@2
  01357	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0135a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0135d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01360	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  01365	75 05		 jne	 SHORT $LN2@SendLifeba@2
$LN1@SendLifeba@2:

; 602  :   {
; 603  :     return;

  01367	e9 d9 01 00 00	 jmp	 $LN5@SendLifeba@2
$LN2@SendLifeba@2:

; 604  :   }
; 605  : 
; 606  :   PMSG_DUEL_LIFEBAR_REFILL pMsg;
; 607  :   pMsg.h.c = 0xC1;

  0136c	c6 45 ec c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 608  :   pMsg.h.size = sizeof(pMsg);

  01370	c6 45 ed 0c	 mov	 BYTE PTR _pMsg$[ebp+1], 12 ; 0000000cH

; 609  :   pMsg.h.headcode = 0xAA;

  01374	c6 45 ee aa	 mov	 BYTE PTR _pMsg$[ebp+2], 170 ; 000000aaH

; 610  :   pMsg.h.subcode = 0x05;

  01378	c6 45 ef 05	 mov	 BYTE PTR _pMsg$[ebp+3], 5

; 611  : 
; 612  :   pMsg.btObjId01H = HIBYTE(this->m_Rooms[iRoom].lpObj01->m_Index);

  0137c	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0137f	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01382	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01385	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  01389	8b 02		 mov	 eax, DWORD PTR [edx]
  0138b	c1 e8 08	 shr	 eax, 8
  0138e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01393	88 45 f0	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 613  :   pMsg.btObjId01L = LOBYTE(this->m_Rooms[iRoom].lpObj01->m_Index);

  01396	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  01399	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0139c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0139f	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  013a3	8b 02		 mov	 eax, DWORD PTR [edx]
  013a5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  013aa	88 45 f1	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 614  : 
; 615  :   pMsg.btObjId02H = HIBYTE(this->m_Rooms[iRoom].lpObj02->m_Index);

  013ad	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  013b0	6b c0 4c	 imul	 eax, 76			; 0000004cH
  013b3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013b6	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  013ba	8b 02		 mov	 eax, DWORD PTR [edx]
  013bc	c1 e8 08	 shr	 eax, 8
  013bf	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  013c4	88 45 f2	 mov	 BYTE PTR _pMsg$[ebp+6], al

; 616  :   pMsg.btObjId02L = LOBYTE(this->m_Rooms[iRoom].lpObj02->m_Index);

  013c7	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  013ca	6b c0 4c	 imul	 eax, 76			; 0000004cH
  013cd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013d0	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  013d4	8b 02		 mov	 eax, DWORD PTR [edx]
  013d6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  013db	88 45 f3	 mov	 BYTE PTR _pMsg$[ebp+7], al

; 617  : 
; 618  :   pMsg.btLife01 = (BYTE)(this->m_Rooms[iRoom].lpObj01->Life / ((this->m_Rooms[iRoom].lpObj01->MaxLife + this->m_Rooms[iRoom].lpObj01->AddLife) / 100));

  013de	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  013e1	6b c0 4c	 imul	 eax, 76			; 0000004cH
  013e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013e7	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  013eb	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  013ee	6b c0 4c	 imul	 eax, 76			; 0000004cH
  013f1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013f4	8b 44 01 18	 mov	 eax, DWORD PTR [ecx+eax+24]
  013f8	8b 4d 0c	 mov	 ecx, DWORD PTR _iRoom$[ebp]
  013fb	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  013fe	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  01401	8b 4c 0e 18	 mov	 ecx, DWORD PTR [esi+ecx+24]
  01405	db 81 4c 01 00
	00		 fild	 DWORD PTR [ecx+332]
  0140b	d8 80 00 01 00
	00		 fadd	 DWORD PTR [eax+256]
  01411	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01417	d8 ba fc 00 00
	00		 fdivr	 DWORD PTR [edx+252]
  0141d	d9 7d aa	 fnstcw	 WORD PTR tv273[ebp]
  01420	0f b7 45 aa	 movzx	 eax, WORD PTR tv273[ebp]
  01424	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  01429	89 45 a4	 mov	 DWORD PTR tv276[ebp], eax
  0142c	d9 6d a4	 fldcw	 WORD PTR tv276[ebp]
  0142f	db 5d a0	 fistp	 DWORD PTR tv278[ebp]
  01432	d9 6d aa	 fldcw	 WORD PTR tv273[ebp]
  01435	8a 55 a0	 mov	 dl, BYTE PTR tv278[ebp]
  01438	88 55 f4	 mov	 BYTE PTR _pMsg$[ebp+8], dl

; 619  :   pMsg.btLife02 = (BYTE)(this->m_Rooms[iRoom].lpObj02->Life / ((this->m_Rooms[iRoom].lpObj02->MaxLife + this->m_Rooms[iRoom].lpObj02->AddLife) / 100));

  0143b	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0143e	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01441	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01444	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  01448	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0144b	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0144e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01451	8b 44 01 20	 mov	 eax, DWORD PTR [ecx+eax+32]
  01455	8b 4d 0c	 mov	 ecx, DWORD PTR _iRoom$[ebp]
  01458	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0145b	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  0145e	8b 4c 0e 20	 mov	 ecx, DWORD PTR [esi+ecx+32]
  01462	db 81 4c 01 00
	00		 fild	 DWORD PTR [ecx+332]
  01468	d8 80 00 01 00
	00		 fadd	 DWORD PTR [eax+256]
  0146e	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01474	d8 ba fc 00 00
	00		 fdivr	 DWORD PTR [edx+252]
  0147a	d9 7d aa	 fnstcw	 WORD PTR tv289[ebp]
  0147d	0f b7 45 aa	 movzx	 eax, WORD PTR tv289[ebp]
  01481	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  01486	89 45 a4	 mov	 DWORD PTR tv292[ebp], eax
  01489	d9 6d a4	 fldcw	 WORD PTR tv292[ebp]
  0148c	db 5d a0	 fistp	 DWORD PTR tv294[ebp]
  0148f	d9 6d aa	 fldcw	 WORD PTR tv289[ebp]
  01492	8a 55 a0	 mov	 dl, BYTE PTR tv294[ebp]
  01495	88 55 f5	 mov	 BYTE PTR _pMsg$[ebp+9], dl

; 620  : 
; 621  :   pMsg.btShield01 = this->m_Rooms[iRoom].lpObj01->iShield / ((this->m_Rooms[iRoom].lpObj01->iMaxShield + this->m_Rooms[iRoom].lpObj01->iAddShield) / 100);

  01498	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0149b	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0149e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  014a1	8b 4c 01 18	 mov	 ecx, DWORD PTR [ecx+eax+24]
  014a5	8b 55 0c	 mov	 edx, DWORD PTR _iRoom$[ebp]
  014a8	6b d2 4c	 imul	 edx, 76			; 0000004cH
  014ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  014ae	8b 54 10 18	 mov	 edx, DWORD PTR [eax+edx+24]
  014b2	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  014b5	6b c0 4c	 imul	 eax, 76			; 0000004cH
  014b8	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  014bb	8b 44 06 18	 mov	 eax, DWORD PTR [esi+eax+24]
  014bf	8b 92 58 01 00
	00		 mov	 edx, DWORD PTR [edx+344]
  014c5	03 90 5c 01 00
	00		 add	 edx, DWORD PTR [eax+348]
  014cb	8b c2		 mov	 eax, edx
  014cd	99		 cdq
  014ce	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  014d3	f7 fe		 idiv	 esi
  014d5	8b f0		 mov	 esi, eax
  014d7	8b 81 54 01 00
	00		 mov	 eax, DWORD PTR [ecx+340]
  014dd	99		 cdq
  014de	f7 fe		 idiv	 esi
  014e0	88 45 f6	 mov	 BYTE PTR _pMsg$[ebp+10], al

; 622  :   pMsg.btShield02 = this->m_Rooms[iRoom].lpObj02->iShield / ((this->m_Rooms[iRoom].lpObj02->iMaxShield + this->m_Rooms[iRoom].lpObj02->iAddShield) / 100);

  014e3	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  014e6	6b c0 4c	 imul	 eax, 76			; 0000004cH
  014e9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  014ec	8b 4c 01 20	 mov	 ecx, DWORD PTR [ecx+eax+32]
  014f0	8b 55 0c	 mov	 edx, DWORD PTR _iRoom$[ebp]
  014f3	6b d2 4c	 imul	 edx, 76			; 0000004cH
  014f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  014f9	8b 54 10 20	 mov	 edx, DWORD PTR [eax+edx+32]
  014fd	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  01500	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01503	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  01506	8b 44 06 20	 mov	 eax, DWORD PTR [esi+eax+32]
  0150a	8b 92 58 01 00
	00		 mov	 edx, DWORD PTR [edx+344]
  01510	03 90 5c 01 00
	00		 add	 edx, DWORD PTR [eax+348]
  01516	8b c2		 mov	 eax, edx
  01518	99		 cdq
  01519	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  0151e	f7 fe		 idiv	 esi
  01520	8b f0		 mov	 esi, eax
  01522	8b 81 54 01 00
	00		 mov	 eax, DWORD PTR [ecx+340]
  01528	99		 cdq
  01529	f7 fe		 idiv	 esi
  0152b	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+11], al

; 623  : 
; 624  :   DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  0152e	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01532	50		 push	 eax
  01533	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01536	51		 push	 ecx
  01537	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0153a	8b 02		 mov	 eax, DWORD PTR [edx]
  0153c	50		 push	 eax
  0153d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01542	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@SendLifeba@2:

; 625  : 
; 626  : }

  01545	5f		 pop	 edi
  01546	5e		 pop	 esi
  01547	5b		 pop	 ebx
  01548	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0154b	33 cd		 xor	 ecx, ebp
  0154d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01552	8b e5		 mov	 esp, ebp
  01554	5d		 pop	 ebp
  01555	c2 08 00	 ret	 8
?SendLifebarStatus@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CDuelManager::SendLifebarStatus
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendLifebarInit@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SendLifebarInit
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -48						; size = 5
_pMsg2$ = -40						; size = 30
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iRoom$ = 12						; size = 4
?SendLifebarInit@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CDuelManager::SendLifebarInit
; _this$ = ecx

; 629  : {

  01560	55		 push	 ebp
  01561	8b ec		 mov	 ebp, esp
  01563	83 ec 70	 sub	 esp, 112		; 00000070H
  01566	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0156b	33 c5		 xor	 eax, ebp
  0156d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01570	53		 push	 ebx
  01571	56		 push	 esi
  01572	57		 push	 edi
  01573	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 
; 631  :   if(iRoom < 0 || iRoom >= MAX_DUEL_ROOMS)

  01576	83 7d 0c 00	 cmp	 DWORD PTR _iRoom$[ebp], 0
  0157a	7c 06		 jl	 SHORT $LN3@SendLifeba@3
  0157c	83 7d 0c 04	 cmp	 DWORD PTR _iRoom$[ebp], 4
  01580	7c 05		 jl	 SHORT $LN4@SendLifeba@3
$LN3@SendLifeba@3:

; 632  :   {
; 633  :     return;

  01582	e9 19 01 00 00	 jmp	 $LN5@SendLifeba@3
$LN4@SendLifeba@3:

; 634  :   }
; 635  : 
; 636  :   if(this->m_Rooms[iRoom].lpObj01 == NULL || 
; 637  :     this->m_Rooms[iRoom].lpObj02 == NULL)

  01587	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0158a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0158d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01590	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  01595	74 10		 je	 SHORT $LN1@SendLifeba@3
  01597	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0159a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0159d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  015a0	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  015a5	75 05		 jne	 SHORT $LN2@SendLifeba@3
$LN1@SendLifeba@3:

; 638  :   {
; 639  :     return;

  015a7	e9 f4 00 00 00	 jmp	 $LN5@SendLifeba@3
$LN2@SendLifeba@3:

; 640  :   }
; 641  : 
; 642  :   PMSG_DUEL_LIFEBAR_NAME pMsg2;
; 643  :   pMsg2.h.c = 0xC1;

  015ac	c6 45 d8 c1	 mov	 BYTE PTR _pMsg2$[ebp], 193 ; 000000c1H

; 644  :   pMsg2.h.size = sizeof(pMsg2);

  015b0	c6 45 d9 1e	 mov	 BYTE PTR _pMsg2$[ebp+1], 30 ; 0000001eH

; 645  :   pMsg2.h.headcode = 0xAA;

  015b4	c6 45 da aa	 mov	 BYTE PTR _pMsg2$[ebp+2], 170 ; 000000aaH

; 646  :   pMsg2.h.subcode = 0x07;

  015b8	c6 45 db 07	 mov	 BYTE PTR _pMsg2$[ebp+3], 7

; 647  :   pMsg2.Type = 0x00;

  015bc	33 c0		 xor	 eax, eax
  015be	66 89 45 dc	 mov	 WORD PTR _pMsg2$[ebp+4], ax

; 648  :   
; 649  :   memcpy(pMsg2.szName1, this->m_Rooms[iRoom].lpObj01->Name, 10);

  015c2	6a 0a		 push	 10			; 0000000aH
  015c4	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  015c7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  015ca	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  015cd	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  015d1	83 c2 77	 add	 edx, 119		; 00000077H
  015d4	52		 push	 edx
  015d5	8d 45 de	 lea	 eax, DWORD PTR _pMsg2$[ebp+6]
  015d8	50		 push	 eax
  015d9	e8 00 00 00 00	 call	 _memcpy
  015de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 650  :   memcpy(pMsg2.szName2, this->m_Rooms[iRoom].lpObj02->Name, 10);

  015e1	6a 0a		 push	 10			; 0000000aH
  015e3	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  015e6	6b c0 4c	 imul	 eax, 76			; 0000004cH
  015e9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  015ec	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  015f0	83 c2 77	 add	 edx, 119		; 00000077H
  015f3	52		 push	 edx
  015f4	8d 45 e8	 lea	 eax, DWORD PTR _pMsg2$[ebp+16]
  015f7	50		 push	 eax
  015f8	e8 00 00 00 00	 call	 _memcpy
  015fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 651  : 
; 652  :   pMsg2.btObjId1H = HIBYTE(this->m_Rooms[iRoom].lpObj01->m_Index);

  01600	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  01603	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01606	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01609	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  0160d	8b 02		 mov	 eax, DWORD PTR [edx]
  0160f	c1 e8 08	 shr	 eax, 8
  01612	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01617	88 45 f2	 mov	 BYTE PTR _pMsg2$[ebp+26], al

; 653  :   pMsg2.btObjId1L = LOBYTE(this->m_Rooms[iRoom].lpObj01->m_Index);

  0161a	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0161d	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01620	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01623	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  01627	8b 02		 mov	 eax, DWORD PTR [edx]
  01629	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0162e	88 45 f3	 mov	 BYTE PTR _pMsg2$[ebp+27], al

; 654  : 
; 655  :   pMsg2.btObjId2H = HIBYTE(this->m_Rooms[iRoom].lpObj02->m_Index);

  01631	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  01634	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01637	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0163a	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  0163e	8b 02		 mov	 eax, DWORD PTR [edx]
  01640	c1 e8 08	 shr	 eax, 8
  01643	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01648	88 45 f4	 mov	 BYTE PTR _pMsg2$[ebp+28], al

; 656  :   pMsg2.btObjId2L = LOBYTE(this->m_Rooms[iRoom].lpObj02->m_Index);

  0164b	8b 45 0c	 mov	 eax, DWORD PTR _iRoom$[ebp]
  0164e	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01651	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01654	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  01658	8b 02		 mov	 eax, DWORD PTR [edx]
  0165a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0165f	88 45 f5	 mov	 BYTE PTR _pMsg2$[ebp+29], al

; 657  : 
; 658  :   DataSend(lpObj->m_Index, (BYTE*)&pMsg2, pMsg2.h.size);

  01662	0f b6 45 d9	 movzx	 eax, BYTE PTR _pMsg2$[ebp+1]
  01666	50		 push	 eax
  01667	8d 4d d8	 lea	 ecx, DWORD PTR _pMsg2$[ebp]
  0166a	51		 push	 ecx
  0166b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0166e	8b 02		 mov	 eax, DWORD PTR [edx]
  01670	50		 push	 eax
  01671	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01676	83 c4 0c	 add	 esp, 12			; 0000000cH

; 659  : 
; 660  :   PMSG_DUEL_LIFEBAR_INIT pMsg;
; 661  :   pMsg.h.c = 0xC1;

  01679	c6 45 d0 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 662  :   pMsg.h.size = sizeof(pMsg);

  0167d	c6 45 d1 05	 mov	 BYTE PTR _pMsg$[ebp+1], 5

; 663  :   pMsg.h.headcode = 0xAA;

  01681	c6 45 d2 aa	 mov	 BYTE PTR _pMsg$[ebp+2], 170 ; 000000aaH

; 664  :   pMsg.h.subcode = 0x0D;

  01685	c6 45 d3 0d	 mov	 BYTE PTR _pMsg$[ebp+3], 13 ; 0000000dH

; 665  : 
; 666  :   DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  01689	0f b6 45 d1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0168d	50		 push	 eax
  0168e	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01691	51		 push	 ecx
  01692	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01695	8b 02		 mov	 eax, DWORD PTR [edx]
  01697	50		 push	 eax
  01698	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0169d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@SendLifeba@3:

; 667  : 
; 668  : }

  016a0	5f		 pop	 edi
  016a1	5e		 pop	 esi
  016a2	5b		 pop	 ebx
  016a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  016a6	33 cd		 xor	 ecx, ebp
  016a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  016ad	8b e5		 mov	 esp, ebp
  016af	5d		 pop	 ebp
  016b0	c2 08 00	 ret	 8
?SendLifebarInit@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CDuelManager::SendLifebarInit
_TEXT	ENDS
PUBLIC	??_C@_0CJ@KJGJCOOM@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win?5Duel?0?5Loser?5@ ; `string'
PUBLIC	?DuelCheck@CDuelManager@@QAE_NPAUOBJECTSTRUCT@@0@Z ; CDuelManager::DuelCheck
PUBLIC	__$ArrayPad$
PUBLIC	?KillUserProc@CDuelManager@@QAEXPAUOBJECTSTRUCT@@0@Z ; CDuelManager::KillUserProc
EXTRN	?DuelWin@CAchievements@@QAEXH@Z:PROC		; CAchievements::DuelWin
EXTRN	?g_Achievements@@3VCAchievements@@A:BYTE	; g_Achievements
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z:PROC	; MsgSendV2
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	__imp__wsprintfA:PROC
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_0CJ@KJGJCOOM@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win?5Duel?0?5Loser?5@
CONST	SEGMENT
??_C@_0CJ@KJGJCOOM@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win?5Duel?0?5Loser?5@ DB '['
	DB	'Duel] [%s][%s] Win Duel, Loser [%s][%s]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv88 = -345						; size = 1
_ServerCmd$234680 = -280				; size = 7
_szMsg$234679 = -272					; size = 256
_Points$ = -16						; size = 4
_iDuelRoom$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpTarget$ = 12						; size = 4
?KillUserProc@CDuelManager@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; CDuelManager::KillUserProc
; _this$ = ecx

; 671  : { 

  016c0	55		 push	 ebp
  016c1	8b ec		 mov	 ebp, esp
  016c3	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  016c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  016ce	33 c5		 xor	 eax, ebp
  016d0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  016d3	53		 push	 ebx
  016d4	56		 push	 esi
  016d5	57		 push	 edi
  016d6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 672  :     
; 673  :   if(!this->DuelCheck(lpObj, lpTarget)) return;

  016d9	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  016dc	50		 push	 eax
  016dd	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016e0	51		 push	 ecx
  016e1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  016e4	e8 00 00 00 00	 call	 ?DuelCheck@CDuelManager@@QAE_NPAUOBJECTSTRUCT@@0@Z ; CDuelManager::DuelCheck
  016e9	0f b6 d0	 movzx	 edx, al
  016ec	85 d2		 test	 edx, edx
  016ee	75 05		 jne	 SHORT $LN3@KillUserPr
  016f0	e9 38 02 00 00	 jmp	 $LN4@KillUserPr
$LN3@KillUserPr:

; 674  :   
; 675  :   int iDuelRoom = this->GetUserDuelRoom(lpObj);

  016f5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016f8	50		 push	 eax
  016f9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  016fc	e8 00 00 00 00	 call	 ?GetUserDuelRoom@CDuelManager@@QAEHPAUOBJECTSTRUCT@@@Z ; CDuelManager::GetUserDuelRoom
  01701	89 45 f4	 mov	 DWORD PTR _iDuelRoom$[ebp], eax

; 676  :   if(iDuelRoom == -1)

  01704	83 7d f4 ff	 cmp	 DWORD PTR _iDuelRoom$[ebp], -1
  01708	75 05		 jne	 SHORT $LN2@KillUserPr

; 677  :   {
; 678  :     return;

  0170a	e9 1e 02 00 00	 jmp	 $LN4@KillUserPr
$LN2@KillUserPr:

; 679  :   }
; 680  : 
; 681  :   lpTarget->KillerType = 3;

  0170f	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01712	c6 80 a1 03 00
	00 03		 mov	 BYTE PTR [eax+929], 3

; 682  : 
; 683  :   int Points = ((lpObj == this->m_Rooms[iDuelRoom].lpObj01) ? this->m_Rooms[iDuelRoom].btPoints01 : this->m_Rooms[iDuelRoom].btPoints02);

  01719	8b 45 f4	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  0171c	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0171f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01722	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01725	3b 54 01 18	 cmp	 edx, DWORD PTR [ecx+eax+24]
  01729	75 15		 jne	 SHORT $LN6@KillUserPr
  0172b	8b 45 f4	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  0172e	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01731	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01734	8a 54 01 1c	 mov	 dl, BYTE PTR [ecx+eax+28]
  01738	88 95 a7 fe ff
	ff		 mov	 BYTE PTR tv88[ebp], dl
  0173e	eb 13		 jmp	 SHORT $LN7@KillUserPr
$LN6@KillUserPr:
  01740	8b 45 f4	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  01743	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01746	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01749	8a 54 01 24	 mov	 dl, BYTE PTR [ecx+eax+36]
  0174d	88 95 a7 fe ff
	ff		 mov	 BYTE PTR tv88[ebp], dl
$LN7@KillUserPr:
  01753	0f b6 85 a7 fe
	ff ff		 movzx	 eax, BYTE PTR tv88[ebp]
  0175a	89 45 f0	 mov	 DWORD PTR _Points$[ebp], eax

; 684  :   if(Points >= DUEL_WIN_POINT_COUNT)

  0175d	83 7d f0 0a	 cmp	 DWORD PTR _Points$[ebp], 10 ; 0000000aH
  01761	0f 8c c6 01 00
	00		 jl	 $LN4@KillUserPr

; 685  :   {
; 686  : 
; 687  :     this->m_Rooms[iDuelRoom].bHasWinner = TRUE;

  01767	8b 45 f4	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  0176a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0176d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01770	c7 44 01 58 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+88], 1

; 688  : 
; 689  :     this->SendEndDuel(lpTarget);

  01778	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  0177b	50		 push	 eax
  0177c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0177f	e8 00 00 00 00	 call	 ?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendEndDuel

; 690  :     this->SendEndDuel(lpObj);

  01784	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01787	50		 push	 eax
  01788	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0178b	e8 00 00 00 00	 call	 ?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendEndDuel

; 691  : 
; 692  :     this->SendEndDuelNotification(lpTarget, lpObj->Name, lpTarget->Name);

  01790	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01793	83 c0 77	 add	 eax, 119		; 00000077H
  01796	50		 push	 eax
  01797	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0179a	83 c1 77	 add	 ecx, 119		; 00000077H
  0179d	51		 push	 ecx
  0179e	8b 55 0c	 mov	 edx, DWORD PTR _lpTarget$[ebp]
  017a1	52		 push	 edx
  017a2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  017a5	e8 00 00 00 00	 call	 ?SendEndDuelNotification@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAD1@Z ; CDuelManager::SendEndDuelNotification

; 693  :     this->SendEndDuelNotification(lpObj, lpObj->Name, lpTarget->Name);

  017aa	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  017ad	83 c0 77	 add	 eax, 119		; 00000077H
  017b0	50		 push	 eax
  017b1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  017b4	83 c1 77	 add	 ecx, 119		; 00000077H
  017b7	51		 push	 ecx
  017b8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  017bb	52		 push	 edx
  017bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  017bf	e8 00 00 00 00	 call	 ?SendEndDuelNotification@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAD1@Z ; CDuelManager::SendEndDuelNotification

; 694  : 
; 695  :     gDarkSpirit[lpObj->m_Index].ReSetTarget(lpTarget->m_Index);

  017c4	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  017c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  017c9	51		 push	 ecx
  017ca	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  017cd	8b 0a		 mov	 ecx, DWORD PTR [edx]
  017cf	6b c9 28	 imul	 ecx, 40			; 00000028H
  017d2	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gDarkSpirit@@3PAVCDarkSpirit@@A ; gDarkSpirit
  017d8	e8 00 00 00 00	 call	 ?ReSetTarget@CDarkSpirit@@QAEXH@Z ; CDarkSpirit::ReSetTarget

; 696  :     gDarkSpirit[lpTarget->m_Index].ReSetTarget(lpObj->m_Index);

  017dd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  017e2	51		 push	 ecx
  017e3	8b 55 0c	 mov	 edx, DWORD PTR _lpTarget$[ebp]
  017e6	8b 0a		 mov	 ecx, DWORD PTR [edx]
  017e8	6b c9 28	 imul	 ecx, 40			; 00000028H
  017eb	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gDarkSpirit@@3PAVCDarkSpirit@@A ; gDarkSpirit
  017f1	e8 00 00 00 00	 call	 ?ReSetTarget@CDarkSpirit@@QAEXH@Z ; CDarkSpirit::ReSetTarget

; 697  : 
; 698  :     char szMsg[256];
; 699  : 
; 700  :     wsprintf(szMsg,lMsg.Get(1216),lpTarget->Name);

  017f6	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  017f9	83 c0 77	 add	 eax, 119		; 00000077H
  017fc	50		 push	 eax
  017fd	68 c0 04 00 00	 push	 1216			; 000004c0H
  01802	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01807	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0180c	50		 push	 eax
  0180d	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _szMsg$234679[ebp]
  01813	51		 push	 ecx
  01814	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0181a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  :     GCServerMsgStringSend(szMsg,lpObj->m_Index,1);

  0181d	6a 01		 push	 1
  0181f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01822	8b 08		 mov	 ecx, DWORD PTR [eax]
  01824	51		 push	 ecx
  01825	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _szMsg$234679[ebp]
  0182b	52		 push	 edx
  0182c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01831	83 c4 0c	 add	 esp, 12			; 0000000cH

; 702  : 
; 703  :     wsprintf(szMsg,lMsg.Get(1217),lpObj->Name);

  01834	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01837	83 c0 77	 add	 eax, 119		; 00000077H
  0183a	50		 push	 eax
  0183b	68 c1 04 00 00	 push	 1217			; 000004c1H
  01840	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01845	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0184a	50		 push	 eax
  0184b	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _szMsg$234679[ebp]
  01851	51		 push	 ecx
  01852	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  01858	83 c4 0c	 add	 esp, 12			; 0000000cH

; 704  :     GCServerMsgStringSend(szMsg,lpTarget->m_Index,1);

  0185b	6a 01		 push	 1
  0185d	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01860	8b 08		 mov	 ecx, DWORD PTR [eax]
  01862	51		 push	 ecx
  01863	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _szMsg$234679[ebp]
  01869	52		 push	 edx
  0186a	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0186f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 705  : 
; 706  :     PMSG_SERVERCMD ServerCmd;
; 707  : 
; 708  :     PHeadSubSetB((LPBYTE)&ServerCmd, 0xF3, 0x40, sizeof(ServerCmd));

  01872	6a 07		 push	 7
  01874	6a 40		 push	 64			; 00000040H
  01876	68 f3 00 00 00	 push	 243			; 000000f3H
  0187b	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _ServerCmd$234680[ebp]
  01881	50		 push	 eax
  01882	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01887	83 c4 10	 add	 esp, 16			; 00000010H

; 709  :     ServerCmd.CmdType = 0;

  0188a	c6 85 ec fe ff
	ff 00		 mov	 BYTE PTR _ServerCmd$234680[ebp+4], 0

; 710  :     ServerCmd.X = lpObj->X;

  01891	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01894	8a 88 44 01 00
	00		 mov	 cl, BYTE PTR [eax+324]
  0189a	88 8d ed fe ff
	ff		 mov	 BYTE PTR _ServerCmd$234680[ebp+5], cl

; 711  :     ServerCmd.Y = lpObj->Y;

  018a0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  018a3	8a 88 46 01 00
	00		 mov	 cl, BYTE PTR [eax+326]
  018a9	88 8d ee fe ff
	ff		 mov	 BYTE PTR _ServerCmd$234680[ebp+6], cl

; 712  : 
; 713  :     MsgSendV2(lpObj,(unsigned char *)&ServerCmd,sizeof(ServerCmd));

  018af	6a 07		 push	 7
  018b1	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _ServerCmd$234680[ebp]
  018b7	50		 push	 eax
  018b8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  018bb	51		 push	 ecx
  018bc	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2
  018c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 714  : 	
; 715  :     DataSend(lpObj->m_Index,(unsigned char *)&ServerCmd,sizeof(ServerCmd));

  018c4	6a 07		 push	 7
  018c6	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _ServerCmd$234680[ebp]
  018cc	50		 push	 eax
  018cd	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  018d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  018d2	52		 push	 edx
  018d3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  018d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 716  : 
; 717  :    // gObjUseSkill.AddOrRemoveBuff(eVS_DUEL_MEDAL, lpObj->m_Index, TRUE);
; 718  : 
; 719  :     this->m_Rooms[iDuelRoom].dwTickCount = GetTickCount() + 10000;

  018db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  018e1	05 10 27 00 00	 add	 eax, 10000		; 00002710H
  018e6	8b 4d f4	 mov	 ecx, DWORD PTR _iDuelRoom$[ebp]
  018e9	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  018ec	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  018ef	89 44 0a 50	 mov	 DWORD PTR [edx+ecx+80], eax

; 720  : 
; 721  :     LogAdd("[Duel] [%s][%s] Win Duel, Loser [%s][%s]",lpObj->AccountID,lpObj->Name,lpTarget->AccountID,lpTarget->Name);

  018f3	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  018f6	83 c0 77	 add	 eax, 119		; 00000077H
  018f9	50		 push	 eax
  018fa	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTarget$[ebp]
  018fd	83 c1 6c	 add	 ecx, 108		; 0000006cH
  01900	51		 push	 ecx
  01901	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01904	83 c2 77	 add	 edx, 119		; 00000077H
  01907	52		 push	 edx
  01908	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0190b	83 c0 6c	 add	 eax, 108		; 0000006cH
  0190e	50		 push	 eax
  0190f	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@KJGJCOOM@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win?5Duel?0?5Loser?5@
  01914	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0191a	83 c4 14	 add	 esp, 20			; 00000014H

; 722  : 
; 723  : #if(SYSTEM_ACHIEVEMENTS)
; 724  : 	g_Achievements.DuelWin(lpObj->m_Index);

  0191d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01920	8b 08		 mov	 ecx, DWORD PTR [eax]
  01922	51		 push	 ecx
  01923	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Achievements@@3VCAchievements@@A ; g_Achievements
  01928	e8 00 00 00 00	 call	 ?DuelWin@CAchievements@@QAEXH@Z ; CAchievements::DuelWin
$LN4@KillUserPr:

; 725  : #endif
; 726  : 
; 727  :   }
; 728  : 
; 729  : }

  0192d	5f		 pop	 edi
  0192e	5e		 pop	 esi
  0192f	5b		 pop	 ebx
  01930	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01933	33 cd		 xor	 ecx, ebp
  01935	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0193a	8b e5		 mov	 esp, ebp
  0193c	5d		 pop	 ebp
  0193d	c2 08 00	 ret	 8
?KillUserProc@CDuelManager@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; CDuelManager::KillUserProc
_TEXT	ENDS
PUBLIC	?IsOnDuel@CDuelManager@@QAE_NHH@Z		; CDuelManager::IsOnDuel
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\duelmanager.h
;	COMDAT ?DuelCheck@CDuelManager@@QAE_NPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpObj2$ = 12						; size = 4
?DuelCheck@CDuelManager@@QAE_NPAUOBJECTSTRUCT@@0@Z PROC	; CDuelManager::DuelCheck, COMDAT
; _this$ = ecx

; 232  :   bool DuelCheck(LPOBJ lpObj, LPOBJ lpObj2) { return this->IsOnDuel(lpObj->m_Index, lpObj2->m_Index); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _lpObj2$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?IsOnDuel@CDuelManager@@QAE_NHH@Z ; CDuelManager::IsOnDuel
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?DuelCheck@CDuelManager@@QAE_NPAUOBJECTSTRUCT@@0@Z ENDP	; CDuelManager::DuelCheck
_TEXT	ENDS
PUBLIC	?RecvWatchRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_WATCH@@@Z ; CDuelManager::RecvWatchRequest
PUBLIC	?RecvDuelAnswer@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_ANSWER_START@@@Z ; CDuelManager::RecvDuelAnswer
PUBLIC	?RecvDuelRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_START@@@Z ; CDuelManager::RecvDuelRequest
PUBLIC	?ProtocolCore@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAE@Z ; CDuelManager::ProtocolCore
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\duelmanager.cpp
_TEXT	SEGMENT
tv66 = -76						; size = 4
_pMsg$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpPacket$ = 12						; size = 4
?ProtocolCore@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAE@Z PROC ; CDuelManager::ProtocolCore
; _this$ = ecx

; 732  : {

  01940	55		 push	 ebp
  01941	8b ec		 mov	 ebp, esp
  01943	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01946	53		 push	 ebx
  01947	56		 push	 esi
  01948	57		 push	 edi
  01949	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 733  :   PMSG_DEFAULT2* pMsg = (PMSG_DEFAULT2*)lpPacket;

  0194c	8b 45 0c	 mov	 eax, DWORD PTR _lpPacket$[ebp]
  0194f	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp], eax

; 734  :   switch(pMsg->subcode)

  01952	8b 45 f8	 mov	 eax, DWORD PTR _pMsg$[ebp]
  01955	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  01959	89 4d b4	 mov	 DWORD PTR tv66[ebp], ecx
  0195c	8b 55 b4	 mov	 edx, DWORD PTR tv66[ebp]
  0195f	83 ea 01	 sub	 edx, 1
  01962	89 55 b4	 mov	 DWORD PTR tv66[ebp], edx
  01965	83 7d b4 08	 cmp	 DWORD PTR tv66[ebp], 8
  01969	77 63		 ja	 SHORT $LN8@ProtocolCo
  0196b	8b 45 b4	 mov	 eax, DWORD PTR tv66[ebp]
  0196e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@ProtocolCo[eax*4]
$LN5@ProtocolCo:

; 735  :   {
; 736  :   case 0x01:
; 737  :     this->RecvDuelRequest(lpObj, (PMSG_DUEL_REQUEST_START*)lpPacket);

  01975	8b 45 0c	 mov	 eax, DWORD PTR _lpPacket$[ebp]
  01978	50		 push	 eax
  01979	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0197c	51		 push	 ecx
  0197d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01980	e8 00 00 00 00	 call	 ?RecvDuelRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_START@@@Z ; CDuelManager::RecvDuelRequest

; 738  :     break;

  01985	eb 47		 jmp	 SHORT $LN8@ProtocolCo
$LN4@ProtocolCo:

; 739  :   case 0x02:
; 740  :     this->RecvDuelAnswer(lpObj, (PMSG_DUEL_ANSWER_START*)lpPacket);

  01987	8b 45 0c	 mov	 eax, DWORD PTR _lpPacket$[ebp]
  0198a	50		 push	 eax
  0198b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0198e	51		 push	 ecx
  0198f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01992	e8 00 00 00 00	 call	 ?RecvDuelAnswer@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_ANSWER_START@@@Z ; CDuelManager::RecvDuelAnswer

; 741  :     break;

  01997	eb 35		 jmp	 SHORT $LN8@ProtocolCo
$LN3@ProtocolCo:

; 742  :   case 0x07:
; 743  :     this->RecvWatchRequest(lpObj, (PMSG_DUEL_REQUEST_WATCH*)lpPacket);

  01999	8b 45 0c	 mov	 eax, DWORD PTR _lpPacket$[ebp]
  0199c	50		 push	 eax
  0199d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  019a0	51		 push	 ecx
  019a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019a4	e8 00 00 00 00	 call	 ?RecvWatchRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_WATCH@@@Z ; CDuelManager::RecvWatchRequest

; 744  :     break;

  019a9	eb 23		 jmp	 SHORT $LN8@ProtocolCo
$LN2@ProtocolCo:

; 745  :   case 0x09:
; 746  :     if(lpObj->MapNumber == MAP_INDEX_VULCANROOM)

  019ab	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  019ae	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  019b5	83 f9 40	 cmp	 ecx, 64			; 00000040H
  019b8	75 14		 jne	 SHORT $LN8@ProtocolCo

; 747  :     {
; 748  :       gObjMoveGate(lpObj->m_Index, ExConfig.PvP.DuelGate); // vai pro vulcan map

  019ba	a1 dc 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2268
  019bf	50		 push	 eax
  019c0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  019c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  019c5	52		 push	 edx
  019c6	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  019cb	83 c4 08	 add	 esp, 8
$LN8@ProtocolCo:

; 749  :     }
; 750  :     break;
; 751  :   }
; 752  : }

  019ce	5f		 pop	 edi
  019cf	5e		 pop	 esi
  019d0	5b		 pop	 ebx
  019d1	8b e5		 mov	 esp, ebp
  019d3	5d		 pop	 ebp
  019d4	c2 08 00	 ret	 8
  019d7	90		 npad	 1
$LN10@ProtocolCo:
  019d8	00 00 00 00	 DD	 $LN5@ProtocolCo
  019dc	00 00 00 00	 DD	 $LN4@ProtocolCo
  019e0	00 00 00 00	 DD	 $LN8@ProtocolCo
  019e4	00 00 00 00	 DD	 $LN8@ProtocolCo
  019e8	00 00 00 00	 DD	 $LN8@ProtocolCo
  019ec	00 00 00 00	 DD	 $LN8@ProtocolCo
  019f0	00 00 00 00	 DD	 $LN3@ProtocolCo
  019f4	00 00 00 00	 DD	 $LN8@ProtocolCo
  019f8	00 00 00 00	 DD	 $LN2@ProtocolCo
?ProtocolCore@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAE@Z ENDP ; CDuelManager::ProtocolCore
_TEXT	ENDS
PUBLIC	??_C@_0CP@JDCEHNOG@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Wrong?5ro@ ; `string'
PUBLIC	??_C@_0EA@FFLNNFDL@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Watch?5re@ ; `string'
PUBLIC	??_C@_0DH@ELLBEPOK@The?5duel?5that?5you?5are?5trying?5to?5@ ; `string'
PUBLIC	??_C@_0BE@HOCMEGF@Unable?5to?5move?5you?4?$AA@	; `string'
PUBLIC	??_C@_0BK@NJJAOGJG@You?5are?5now?5in?5room?5duel?4?$AA@ ; `string'
PUBLIC	??_C@_0EE@FAHDMNGE@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Watch?5re@ ; `string'
PUBLIC	??_C@_0DK@EPBGNKJN@There?5is?5no?5one?5in?5the?5duel?5that@ ; `string'
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
;	COMDAT ??_C@_0CP@JDCEHNOG@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Wrong?5ro@
CONST	SEGMENT
??_C@_0CP@JDCEHNOG@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Wrong?5ro@ DB '['
	DB	'Duel Manager] (%s)(%s) Wrong room index! (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@FFLNNFDL@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Watch?5re@
CONST	SEGMENT
??_C@_0EA@FFLNNFDL@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Watch?5re@ DB '['
	DB	'Duel Manager] (%s)(%s) Watch request error: room is full! (%d'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@ELLBEPOK@The?5duel?5that?5you?5are?5trying?5to?5@
CONST	SEGMENT
??_C@_0DH@ELLBEPOK@The?5duel?5that?5you?5are?5trying?5to?5@ DB 'The duel '
	DB	'that you are trying to watch is already full.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HOCMEGF@Unable?5to?5move?5you?4?$AA@
CONST	SEGMENT
??_C@_0BE@HOCMEGF@Unable?5to?5move?5you?4?$AA@ DB 'Unable to move you.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NJJAOGJG@You?5are?5now?5in?5room?5duel?4?$AA@
CONST	SEGMENT
??_C@_0BK@NJJAOGJG@You?5are?5now?5in?5room?5duel?4?$AA@ DB 'You are now i'
	DB	'n room duel.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@FAHDMNGE@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Watch?5re@
CONST	SEGMENT
??_C@_0EE@FAHDMNGE@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Watch?5re@ DB '['
	DB	'Duel Manager] (%s)(%s) Watch request error: wrong duel state!'
	DB	' (%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EPBGNKJN@There?5is?5no?5one?5in?5the?5duel?5that@
CONST	SEGMENT
??_C@_0DK@EPBGNKJN@There?5is?5no?5one?5in?5the?5duel?5that@ DB 'There is '
	DB	'no one in the duel that you are trying to watch.', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$234715 = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMsg$ = 12						; size = 4
?RecvWatchRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_WATCH@@@Z PROC ; CDuelManager::RecvWatchRequest
; _this$ = ecx

; 755  : {

  01a00	55		 push	 ebp
  01a01	8b ec		 mov	 ebp, esp
  01a03	83 ec 48	 sub	 esp, 72			; 00000048H
  01a06	53		 push	 ebx
  01a07	56		 push	 esi
  01a08	57		 push	 edi
  01a09	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 756  : 
; 757  :   if(lpObj->m_IfState.use == 0 || lpObj->m_IfState.type != 20) 

  01a0c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a0f	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  01a15	83 e1 03	 and	 ecx, 3
  01a18	74 17		 je	 SHORT $LN8@RecvWatchR
  01a1a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a1d	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  01a23	c1 e9 06	 shr	 ecx, 6
  01a26	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  01a2c	83 f9 14	 cmp	 ecx, 20			; 00000014H
  01a2f	74 05		 je	 SHORT $LN9@RecvWatchR
$LN8@RecvWatchR:

; 758  :   {
; 759  :     return;

  01a31	e9 21 02 00 00	 jmp	 $LN10@RecvWatchR
$LN9@RecvWatchR:

; 760  :   }
; 761  : 
; 762  :   lpObj->m_IfState.use = 0;

  01a36	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a39	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  01a3f	83 e1 fc	 and	 ecx, -4			; fffffffcH
  01a42	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01a45	89 8a 1c 0e 00
	00		 mov	 DWORD PTR [edx+3612], ecx

; 763  :   lpObj->m_IfState.type = 0;

  01a4b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a4e	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  01a54	81 e1 3f 00 ff
	ff		 and	 ecx, -65473		; ffff003fH
  01a5a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01a5d	89 8a 1c 0e 00
	00		 mov	 DWORD PTR [edx+3612], ecx

; 764  : 
; 765  :   if(lpMsg->btRoomIndex >= 0 && lpMsg->btRoomIndex < MAX_DUEL_ROOMS)

  01a63	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01a66	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01a6a	85 c9		 test	 ecx, ecx
  01a6c	0f 8c bf 01 00
	00		 jl	 $LN7@RecvWatchR
  01a72	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01a75	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01a79	83 f9 04	 cmp	 ecx, 4
  01a7c	0f 8d af 01 00
	00		 jge	 $LN7@RecvWatchR

; 766  :   {
; 767  : 
; 768  :     if(this->m_Rooms[lpMsg->btRoomIndex].bFree == TRUE) 

  01a82	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01a85	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01a89	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  01a8c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a8f	83 7c 0a 10 01	 cmp	 DWORD PTR [edx+ecx+16], 1
  01a94	75 40		 jne	 SHORT $LN6@RecvWatchR

; 769  :     {
; 770  :       GCServerMsgStringSend("There is no one in the duel that you are trying to watch.", lpObj->m_Index, 1);

  01a96	6a 01		 push	 1
  01a98	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a9b	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a9d	51		 push	 ecx
  01a9e	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@EPBGNKJN@There?5is?5no?5one?5in?5the?5duel?5that@
  01aa3	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01aa8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 771  :       LogAddC(2, "[Duel Manager] (%s)(%s) Watch request error: wrong duel state! (%d)", lpObj->AccountID, lpObj->Name, lpMsg->btRoomIndex);

  01aab	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01aae	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01ab2	51		 push	 ecx
  01ab3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01ab6	83 c2 77	 add	 edx, 119		; 00000077H
  01ab9	52		 push	 edx
  01aba	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01abd	83 c0 6c	 add	 eax, 108		; 0000006cH
  01ac0	50		 push	 eax
  01ac1	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@FAHDMNGE@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Watch?5re@
  01ac6	6a 02		 push	 2
  01ac8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01ace	83 c4 14	 add	 esp, 20			; 00000014H

; 772  :       return;

  01ad1	e9 81 01 00 00	 jmp	 $LN10@RecvWatchR
$LN6@RecvWatchR:

; 773  :     }
; 774  : 
; 775  :     for(int i = 0; i < MAX_DUEL_LEARNERS; i++)

  01ad6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$234715[ebp], 0
  01add	eb 09		 jmp	 SHORT $LN5@RecvWatchR
$LN4@RecvWatchR:
  01adf	8b 45 f8	 mov	 eax, DWORD PTR _i$234715[ebp]
  01ae2	83 c0 01	 add	 eax, 1
  01ae5	89 45 f8	 mov	 DWORD PTR _i$234715[ebp], eax
$LN5@RecvWatchR:
  01ae8	83 7d f8 0a	 cmp	 DWORD PTR _i$234715[ebp], 10 ; 0000000aH
  01aec	0f 8d 02 01 00
	00		 jge	 $LN3@RecvWatchR

; 776  :     {
; 777  :       if(this->m_Rooms[lpMsg->btRoomIndex].lpLearners[i] == NULL)

  01af2	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01af5	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01af9	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  01afc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01aff	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  01b03	8b 4d f8	 mov	 ecx, DWORD PTR _i$234715[ebp]
  01b06	83 7c 88 18 00	 cmp	 DWORD PTR [eax+ecx*4+24], 0
  01b0b	0f 85 de 00 00
	00		 jne	 $LN2@RecvWatchR

; 778  :       {
; 779  : #if(DEBUG_FIX_DUEL)
; 780  : 		  gObjTeleport(lpObj->m_Index, MAP_INDEX_VULCANROOM, g_DuelRespawns[i].
; 781  : #else
; 782  :         if(gObjMoveGate(lpObj->m_Index, g_DuelGates[lpMsg->btRoomIndex].LearnerGate))

  01b11	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01b14	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01b18	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  01b1b	8b 91 08 00 00
	00		 mov	 edx, DWORD PTR _g_DuelGates[ecx+8]
  01b21	52		 push	 edx
  01b22	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b25	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b27	51		 push	 ecx
  01b28	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  01b2d	83 c4 08	 add	 esp, 8
  01b30	85 c0		 test	 eax, eax
  01b32	0f 84 a0 00 00
	00		 je	 $LN1@RecvWatchR

; 783  : #endif
; 784  :         {
; 785  :           this->m_Rooms[lpMsg->btRoomIndex].lpLearners[i] = lpObj;

  01b38	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01b3b	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01b3f	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  01b42	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b45	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  01b49	8b 4d f8	 mov	 ecx, DWORD PTR _i$234715[ebp]
  01b4c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01b4f	89 54 88 18	 mov	 DWORD PTR [eax+ecx*4+24], edx

; 786  :           this->SendSpectatorList(lpObj, lpMsg->btRoomIndex);

  01b53	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01b56	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01b5a	51		 push	 ecx
  01b5b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01b5e	52		 push	 edx
  01b5f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b62	e8 00 00 00 00	 call	 ?SendSpectatorList@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SendSpectatorList

; 787  :           this->SendSpectatorAdd(i, lpMsg->btRoomIndex);

  01b67	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01b6a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01b6e	51		 push	 ecx
  01b6f	8b 55 f8	 mov	 edx, DWORD PTR _i$234715[ebp]
  01b72	52		 push	 edx
  01b73	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b76	e8 00 00 00 00	 call	 ?SendSpectatorAdd@CDuelManager@@QAEXHH@Z ; CDuelManager::SendSpectatorAdd

; 788  :           GCServerMsgStringSend("You are now in room duel.", lpObj->m_Index, 1);

  01b7b	6a 01		 push	 1
  01b7d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b80	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b82	51		 push	 ecx
  01b83	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NJJAOGJG@You?5are?5now?5in?5room?5duel?4?$AA@
  01b88	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01b8d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 789  :          // GCStateInfoSend(lpObj, 1, eVS_DUEL_INTERFACE);
; 790  :          // GCStateInfoSend(lpObj, 1, eVS_TRANSPARENCY);
; 791  :           //GCStateInfoSend(lpObj, 1, eVS_INVISIBLE, TRUE, TRUE);
; 792  : 		  this->SetBuff(lpObj, TRUE);

  01b90	6a 01		 push	 1
  01b92	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b95	50		 push	 eax
  01b96	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b99	e8 00 00 00 00	 call	 ?SetBuff@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SetBuff

; 793  : 
; 794  :           this->SendLifebarInit(lpObj, lpMsg->btRoomIndex);

  01b9e	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01ba1	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01ba5	51		 push	 ecx
  01ba6	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01ba9	52		 push	 edx
  01baa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bad	e8 00 00 00 00	 call	 ?SendLifebarInit@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SendLifebarInit

; 795  :           this->SendLifebarStatus(lpObj, lpMsg->btRoomIndex);

  01bb2	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01bb5	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01bb9	51		 push	 ecx
  01bba	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01bbd	52		 push	 edx
  01bbe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bc1	e8 00 00 00 00	 call	 ?SendLifebarStatus@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ; CDuelManager::SendLifebarStatus

; 796  :           this->UpdateDuelScore(lpMsg->btRoomIndex);

  01bc6	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01bc9	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01bcd	51		 push	 ecx
  01bce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bd1	e8 00 00 00 00	 call	 ?UpdateDuelScore@CDuelManager@@QAEXH@Z ; CDuelManager::UpdateDuelScore

; 797  :           return;

  01bd6	eb 7f		 jmp	 SHORT $LN10@RecvWatchR
$LN1@RecvWatchR:

; 798  :         }      
; 799  :         GCServerMsgStringSend("Unable to move you.", lpObj->m_Index, 1);

  01bd8	6a 01		 push	 1
  01bda	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01bdd	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bdf	51		 push	 ecx
  01be0	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HOCMEGF@Unable?5to?5move?5you?4?$AA@
  01be5	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01bea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 800  :         return;

  01bed	eb 68		 jmp	 SHORT $LN10@RecvWatchR
$LN2@RecvWatchR:

; 801  :       }
; 802  :     }

  01bef	e9 eb fe ff ff	 jmp	 $LN4@RecvWatchR
$LN3@RecvWatchR:

; 803  : 
; 804  :     GCServerMsgStringSend("The duel that you are trying to watch is already full.", lpObj->m_Index, 1);

  01bf4	6a 01		 push	 1
  01bf6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01bf9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bfb	51		 push	 ecx
  01bfc	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@ELLBEPOK@The?5duel?5that?5you?5are?5trying?5to?5@
  01c01	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01c06	83 c4 0c	 add	 esp, 12			; 0000000cH

; 805  :     LogAddC(2, "[Duel Manager] (%s)(%s) Watch request error: room is full! (%d)", lpObj->AccountID, lpObj->Name, lpMsg->btRoomIndex);

  01c09	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01c0c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01c10	51		 push	 ecx
  01c11	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01c14	83 c2 77	 add	 edx, 119		; 00000077H
  01c17	52		 push	 edx
  01c18	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c1b	83 c0 6c	 add	 eax, 108		; 0000006cH
  01c1e	50		 push	 eax
  01c1f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FFLNNFDL@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Watch?5re@
  01c24	6a 02		 push	 2
  01c26	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01c2c	83 c4 14	 add	 esp, 20			; 00000014H

; 806  : 
; 807  :     return;

  01c2f	eb 26		 jmp	 SHORT $LN10@RecvWatchR
$LN7@RecvWatchR:

; 808  : 
; 809  :   }
; 810  : 
; 811  :   LogAddC(2, "[Duel Manager] (%s)(%s) Wrong room index! (%d)", lpObj->AccountID, lpObj->Name, lpMsg->btRoomIndex);

  01c31	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01c34	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01c38	51		 push	 ecx
  01c39	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01c3c	83 c2 77	 add	 edx, 119		; 00000077H
  01c3f	52		 push	 edx
  01c40	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c43	83 c0 6c	 add	 eax, 108		; 0000006cH
  01c46	50		 push	 eax
  01c47	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@JDCEHNOG@?$FLDuel?5Manager?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Wrong?5ro@
  01c4c	6a 02		 push	 2
  01c4e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01c54	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@RecvWatchR:

; 812  : 
; 813  : }

  01c57	5f		 pop	 edi
  01c58	5e		 pop	 esi
  01c59	5b		 pop	 ebx
  01c5a	8b e5		 mov	 esp, ebp
  01c5c	5d		 pop	 ebp
  01c5d	c2 08 00	 ret	 8
?RecvWatchRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_WATCH@@@Z ENDP ; CDuelManager::RecvWatchRequest
_TEXT	ENDS
PUBLIC	??_C@_0DD@GLFLBGPF@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Duel?5Started?5?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0BB@JJKLKLEC@Duel?5User?5Switch?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	_strcmp:PROC
;	COMDAT ??_C@_0DD@GLFLBGPF@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Duel?5Started?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0DD@GLFLBGPF@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Duel?5Started?5?$FL?$CFs@ DB '['
	DB	'Duel] [%s][%s] Duel Started [%s][%s] on Room [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JJKLKLEC@Duel?5User?5Switch?$AA@
CONST	SEGMENT
??_C@_0BB@JJKLKLEC@Duel?5User?5Switch?$AA@ DB 'Duel User Switch', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv182 = -132						; size = 4
tv163 = -132						; size = 4
tv265 = -128						; size = 4
tv234 = -128						; size = 4
tv209 = -128						; size = 4
tv196 = -128						; size = 4
tv183 = -128						; size = 4
tv164 = -128						; size = 4
tv89 = -128						; size = 4
_szDuelName2$234756 = -60				; size = 11
_szDuelName$234755 = -48				; size = 11
_pMsgSend$ = -36					; size = 17
_iDuelRoom$ = -16					; size = 4
_iDuelIndex$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMsg$ = 12						; size = 4
?RecvDuelAnswer@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_ANSWER_START@@@Z PROC ; CDuelManager::RecvDuelAnswer
; _this$ = ecx

; 816  : {

  01c60	55		 push	 ebp
  01c61	8b ec		 mov	 ebp, esp
  01c63	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  01c69	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01c6e	33 c5		 xor	 eax, ebp
  01c70	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01c73	53		 push	 ebx
  01c74	56		 push	 esi
  01c75	57		 push	 edi
  01c76	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 817  : 
; 818  :   int iDuelIndex = -1;

  01c79	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _iDuelIndex$[ebp], -1

; 819  :   int iDuelRoom = lpObj->m_iDuelRoom;

  01c80	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c83	8b 88 b4 21 00
	00		 mov	 ecx, DWORD PTR [eax+8628]
  01c89	89 4d f0	 mov	 DWORD PTR _iDuelRoom$[ebp], ecx

; 820  :   
; 821  :   PMSG_DUEL_START pMsgSend;
; 822  :   
; 823  :   pMsgSend.h.c = 0xC1;

  01c8c	c6 45 dc c1	 mov	 BYTE PTR _pMsgSend$[ebp], 193 ; 000000c1H

; 824  :   pMsgSend.h.headcode = 0xAA;

  01c90	c6 45 de aa	 mov	 BYTE PTR _pMsgSend$[ebp+2], 170 ; 000000aaH

; 825  :   pMsgSend.h.subcode = 0x01;

  01c94	c6 45 df 01	 mov	 BYTE PTR _pMsgSend$[ebp+3], 1

; 826  :   pMsgSend.bDuelStart = 0;

  01c98	c6 45 e0 00	 mov	 BYTE PTR _pMsgSend$[ebp+4], 0

; 827  :   pMsgSend.h.size = sizeof(pMsgSend);

  01c9c	c6 45 dd 11	 mov	 BYTE PTR _pMsgSend$[ebp+1], 17 ; 00000011H

; 828  : 
; 829  :   if(iDuelRoom < 0 || iDuelRoom > MAX_DUEL_ROOMS - 1) 

  01ca0	83 7d f0 00	 cmp	 DWORD PTR _iDuelRoom$[ebp], 0
  01ca4	7c 06		 jl	 SHORT $LN23@RecvDuelAn
  01ca6	83 7d f0 03	 cmp	 DWORD PTR _iDuelRoom$[ebp], 3
  01caa	7e 05		 jle	 SHORT $LN24@RecvDuelAn
$LN23@RecvDuelAn:

; 830  :   {
; 831  :     return;

  01cac	e9 e3 08 00 00	 jmp	 $LN25@RecvDuelAn
$LN24@RecvDuelAn:

; 832  :   }
; 833  : 
; 834  :   if ( gObj[lpObj->m_Index].CloseType != -1 ) 

  01cb1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01cb4	8b 08		 mov	 ecx, DWORD PTR [eax]
  01cb6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01cbc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01cc2	0f be 44 0a 0b	 movsx	 eax, BYTE PTR [edx+ecx+11]
  01cc7	83 f8 ff	 cmp	 eax, -1
  01cca	74 05		 je	 SHORT $LN22@RecvDuelAn

; 835  :     return;

  01ccc	e9 c3 08 00 00	 jmp	 $LN25@RecvDuelAn
$LN22@RecvDuelAn:

; 836  :   
; 837  :   iDuelIndex = MAKE_NUMBERW(lpMsg->NumberH, lpMsg->NumberL);

  01cd1	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01cd4	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  01cd8	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01cde	0f b6 d1	 movzx	 edx, cl
  01ce1	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01ce4	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  01ce8	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01cee	0f b6 c1	 movzx	 eax, cl
  01cf1	c1 e0 08	 shl	 eax, 8
  01cf4	0b d0		 or	 edx, eax
  01cf6	0f b7 ca	 movzx	 ecx, dx
  01cf9	89 4d f4	 mov	 DWORD PTR _iDuelIndex$[ebp], ecx

; 838  : 
; 839  :   if ( OBJMAX_RANGE(iDuelIndex) )

  01cfc	83 7d f4 00	 cmp	 DWORD PTR _iDuelIndex$[ebp], 0
  01d00	7d 09		 jge	 SHORT $LN27@RecvDuelAn
  01d02	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
  01d09	eb 0f		 jmp	 SHORT $LN28@RecvDuelAn
$LN27@RecvDuelAn:
  01d0b	33 c0		 xor	 eax, eax
  01d0d	81 7d f4 97 3a
	00 00		 cmp	 DWORD PTR _iDuelIndex$[ebp], 14999 ; 00003a97H
  01d14	0f 9e c0	 setle	 al
  01d17	89 45 80	 mov	 DWORD PTR tv89[ebp], eax
$LN28@RecvDuelAn:
  01d1a	83 7d 80 00	 cmp	 DWORD PTR tv89[ebp], 0
  01d1e	0f 84 70 08 00
	00		 je	 $LN25@RecvDuelAn

; 840  :   {
; 841  :     if ( !gObjIsConnected(iDuelIndex) )

  01d24	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01d27	50		 push	 eax
  01d28	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  01d2d	83 c4 04	 add	 esp, 4
  01d30	85 c0		 test	 eax, eax
  01d32	75 05		 jne	 SHORT $LN20@RecvDuelAn

; 842  : 	{
; 843  : 		return;

  01d34	e9 5b 08 00 00	 jmp	 $LN25@RecvDuelAn
$LN20@RecvDuelAn:

; 844  : 	}
; 845  : 
; 846  :     if ( gObj[iDuelIndex].Type == OBJ_MONSTER )

  01d39	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01d3c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01d42	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01d48	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  01d4d	83 fa 02	 cmp	 edx, 2
  01d50	75 05		 jne	 SHORT $LN19@RecvDuelAn

; 847  :       return;

  01d52	e9 3d 08 00 00	 jmp	 $LN25@RecvDuelAn
$LN19@RecvDuelAn:

; 848  : 
; 849  :     if ( gObj[iDuelIndex].CloseCount >= 0 )

  01d57	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01d5a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01d60	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01d66	0f be 54 01 0a	 movsx	 edx, BYTE PTR [ecx+eax+10]
  01d6b	85 d2		 test	 edx, edx
  01d6d	7c 05		 jl	 SHORT $LN18@RecvDuelAn

; 850  :       return;

  01d6f	e9 20 08 00 00	 jmp	 $LN25@RecvDuelAn
$LN18@RecvDuelAn:

; 851  : 
; 852  : 	if(gObj[iDuelIndex].m_DuelChar == false)

  01d74	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01d77	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01d7d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01d83	0f b6 94 01 b8
	21 00 00	 movzx	 edx, BYTE PTR [ecx+eax+8632]
  01d8b	85 d2		 test	 edx, edx
  01d8d	75 1a		 jne	 SHORT $LN17@RecvDuelAn

; 853  : 	{
; 854  : 		GCServerMsgStringSend("Duel User Switch", lpObj->m_Index, 1);

  01d8f	6a 01		 push	 1
  01d91	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01d94	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d96	51		 push	 ecx
  01d97	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JJKLKLEC@Duel?5User?5Switch?$AA@
  01d9c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01da1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 855  : 		return;

  01da4	e9 eb 07 00 00	 jmp	 $LN25@RecvDuelAn
$LN17@RecvDuelAn:

; 856  : 	}
; 857  : 
; 858  :     if ( lpMsg->bDuelOK )

  01da9	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01dac	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01db0	85 c9		 test	 ecx, ecx
  01db2	0f 84 03 02 00
	00		 je	 $LN16@RecvDuelAn

; 859  :     {
; 860  :       if ( BC_MAP_RANGE(gObj[iDuelIndex].MapNumber) ||
; 861  :          CC_MAP_RANGE(gObj[iDuelIndex].MapNumber) ||
; 862  :          DS_MAP_RANGE(gObj[iDuelIndex].MapNumber) || 
; 863  : 		 IT_MAP_RANGE(gObj[iDuelIndex].MapNumber) )

  01db8	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01dbb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01dc1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01dc7	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01dcf	83 fa 34	 cmp	 edx, 52			; 00000034H
  01dd2	75 09		 jne	 SHORT $LN31@RecvDuelAn
  01dd4	c7 45 80 01 00
	00 00		 mov	 DWORD PTR tv164[ebp], 1
  01ddb	eb 56		 jmp	 SHORT $LN32@RecvDuelAn
$LN31@RecvDuelAn:
  01ddd	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01de0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01de6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01dec	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01df4	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  01df7	7d 0c		 jge	 SHORT $LN29@RecvDuelAn
  01df9	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv163[ebp], 0
  01e03	eb 25		 jmp	 SHORT $LN30@RecvDuelAn
$LN29@RecvDuelAn:
  01e05	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01e08	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01e0e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01e14	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01e1c	33 c0		 xor	 eax, eax
  01e1e	83 fa 11	 cmp	 edx, 17			; 00000011H
  01e21	0f 9e c0	 setle	 al
  01e24	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv163[ebp], eax
$LN30@RecvDuelAn:
  01e2a	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv163[ebp]
  01e30	89 4d 80	 mov	 DWORD PTR tv164[ebp], ecx
$LN32@RecvDuelAn:
  01e33	83 7d 80 00	 cmp	 DWORD PTR tv164[ebp], 0
  01e37	0f 85 1f 01 00
	00		 jne	 $LN14@RecvDuelAn
  01e3d	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01e40	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01e46	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01e4c	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01e54	83 fa 35	 cmp	 edx, 53			; 00000035H
  01e57	75 09		 jne	 SHORT $LN35@RecvDuelAn
  01e59	c7 45 80 01 00
	00 00		 mov	 DWORD PTR tv183[ebp], 1
  01e60	eb 56		 jmp	 SHORT $LN36@RecvDuelAn
$LN35@RecvDuelAn:
  01e62	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01e65	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01e6b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01e71	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01e79	83 fa 12	 cmp	 edx, 18			; 00000012H
  01e7c	7d 0c		 jge	 SHORT $LN33@RecvDuelAn
  01e7e	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv182[ebp], 0
  01e88	eb 25		 jmp	 SHORT $LN34@RecvDuelAn
$LN33@RecvDuelAn:
  01e8a	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01e8d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01e93	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01e99	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01ea1	33 c0		 xor	 eax, eax
  01ea3	83 fa 17	 cmp	 edx, 23			; 00000017H
  01ea6	0f 9e c0	 setle	 al
  01ea9	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv182[ebp], eax
$LN34@RecvDuelAn:
  01eaf	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv182[ebp]
  01eb5	89 4d 80	 mov	 DWORD PTR tv183[ebp], ecx
$LN36@RecvDuelAn:
  01eb8	83 7d 80 00	 cmp	 DWORD PTR tv183[ebp], 0
  01ebc	0f 85 9a 00 00
	00		 jne	 $LN14@RecvDuelAn
  01ec2	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01ec5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01ecb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01ed1	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01ed9	83 fa 09	 cmp	 edx, 9
  01edc	75 09		 jne	 SHORT $LN37@RecvDuelAn
  01ede	c7 45 80 01 00
	00 00		 mov	 DWORD PTR tv196[ebp], 1
  01ee5	eb 22		 jmp	 SHORT $LN38@RecvDuelAn
$LN37@RecvDuelAn:
  01ee7	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01eea	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01ef0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01ef6	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01efe	33 c0		 xor	 eax, eax
  01f00	83 fa 20	 cmp	 edx, 32			; 00000020H
  01f03	0f 94 c0	 sete	 al
  01f06	89 45 80	 mov	 DWORD PTR tv196[ebp], eax
$LN38@RecvDuelAn:
  01f09	83 7d 80 00	 cmp	 DWORD PTR tv196[ebp], 0
  01f0d	75 4d		 jne	 SHORT $LN14@RecvDuelAn
  01f0f	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01f12	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01f18	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01f1e	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01f26	83 fa 2d	 cmp	 edx, 45			; 0000002dH
  01f29	7d 09		 jge	 SHORT $LN39@RecvDuelAn
  01f2b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv209[ebp], 0
  01f32	eb 22		 jmp	 SHORT $LN40@RecvDuelAn
$LN39@RecvDuelAn:
  01f34	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  01f37	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01f3d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01f43	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01f4b	33 c0		 xor	 eax, eax
  01f4d	83 fa 32	 cmp	 edx, 50			; 00000032H
  01f50	0f 9e c0	 setle	 al
  01f53	89 45 80	 mov	 DWORD PTR tv209[ebp], eax
$LN40@RecvDuelAn:
  01f56	83 7d 80 00	 cmp	 DWORD PTR tv209[ebp], 0
  01f5a	74 5f		 je	 SHORT $LN16@RecvDuelAn
$LN14@RecvDuelAn:

; 864  :       {
; 865  : 
; 866  :         GCServerMsgStringSend(lMsg.Get(MSGGET(4, 207)), lpObj->m_Index, 1);

  01f5c	6a 01		 push	 1
  01f5e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01f61	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f63	51		 push	 ecx
  01f64	68 cf 04 00 00	 push	 1231			; 000004cfH
  01f69	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01f6e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01f73	50		 push	 eax
  01f74	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01f79	83 c4 0c	 add	 esp, 12			; 0000000cH

; 867  : 
; 868  :         this->RoomReset(iDuelRoom, true, true);

  01f7c	6a 01		 push	 1
  01f7e	6a 01		 push	 1
  01f80	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  01f83	50		 push	 eax
  01f84	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f87	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 869  : 
; 870  :         memcpy(pMsgSend.szName, lpObj->Name, sizeof(pMsgSend.szName));

  01f8c	6a 0a		 push	 10			; 0000000aH
  01f8e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01f91	83 c0 77	 add	 eax, 119		; 00000077H
  01f94	50		 push	 eax
  01f95	8d 4d e3	 lea	 ecx, DWORD PTR _pMsgSend$[ebp+7]
  01f98	51		 push	 ecx
  01f99	e8 00 00 00 00	 call	 _memcpy
  01f9e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 871  :         DataSend(iDuelIndex, (LPBYTE)&pMsgSend, pMsgSend.h.size);

  01fa1	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  01fa5	50		 push	 eax
  01fa6	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  01fa9	51		 push	 ecx
  01faa	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  01fad	52		 push	 edx
  01fae	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01fb3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 872  :         return;

  01fb6	e9 d9 05 00 00	 jmp	 $LN25@RecvDuelAn
$LN16@RecvDuelAn:

; 873  :       }
; 874  :     }
; 875  : 
; 876  :     if ( OBJMAX_RANGE(lpObj->m_iDuelUser ) )

  01fbb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01fbe	83 b8 b8 0e 00
	00 00		 cmp	 DWORD PTR [eax+3768], 0
  01fc5	7d 09		 jge	 SHORT $LN41@RecvDuelAn
  01fc7	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv234[ebp], 0
  01fce	eb 15		 jmp	 SHORT $LN42@RecvDuelAn
$LN41@RecvDuelAn:
  01fd0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01fd3	33 d2		 xor	 edx, edx
  01fd5	81 b9 b8 0e 00
	00 97 3a 00 00	 cmp	 DWORD PTR [ecx+3768], 14999 ; 00003a97H
  01fdf	0f 9e c2	 setle	 dl
  01fe2	89 55 80	 mov	 DWORD PTR tv234[ebp], edx
$LN42@RecvDuelAn:
  01fe5	83 7d 80 00	 cmp	 DWORD PTR tv234[ebp], 0
  01fe9	74 7f		 je	 SHORT $LN13@RecvDuelAn

; 877  :     {
; 878  :       GCServerMsgStringSend(lMsg.Get(MSGGET(4, 160)), lpObj->m_Index, 1);

  01feb	6a 01		 push	 1
  01fed	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ff0	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ff2	51		 push	 ecx
  01ff3	68 a0 04 00 00	 push	 1184			; 000004a0H
  01ff8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01ffd	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02002	50		 push	 eax
  02003	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02008	83 c4 0c	 add	 esp, 12			; 0000000cH

; 879  :       GCServerMsgStringSend(lMsg.Get(MSGGET(4, 161)), lpObj->m_Index, 1);

  0200b	6a 01		 push	 1
  0200d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02010	8b 08		 mov	 ecx, DWORD PTR [eax]
  02012	51		 push	 ecx
  02013	68 a1 04 00 00	 push	 1185			; 000004a1H
  02018	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0201d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02022	50		 push	 eax
  02023	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 880  :       
; 881  :       this->RoomReset(iDuelRoom, true, true);

  0202b	6a 01		 push	 1
  0202d	6a 01		 push	 1
  0202f	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  02032	50		 push	 eax
  02033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02036	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 882  : 
; 883  :       memcpy(pMsgSend.szName, lpObj->Name, sizeof(pMsgSend.szName));

  0203b	6a 0a		 push	 10			; 0000000aH
  0203d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02040	83 c0 77	 add	 eax, 119		; 00000077H
  02043	50		 push	 eax
  02044	8d 4d e3	 lea	 ecx, DWORD PTR _pMsgSend$[ebp+7]
  02047	51		 push	 ecx
  02048	e8 00 00 00 00	 call	 _memcpy
  0204d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 884  :       DataSend(iDuelIndex, (LPBYTE)&pMsgSend, pMsgSend.h.size);

  02050	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  02054	50		 push	 eax
  02055	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  02058	51		 push	 ecx
  02059	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  0205c	52		 push	 edx
  0205d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 885  :       return;

  02065	e9 2a 05 00 00	 jmp	 $LN25@RecvDuelAn
$LN13@RecvDuelAn:

; 886  :     }
; 887  : 
; 888  :     if ( OBJMAX_RANGE(lpObj->m_iDuelUserReserved) )

  0206a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0206d	83 b8 b0 0e 00
	00 00		 cmp	 DWORD PTR [eax+3760], 0
  02074	7d 09		 jge	 SHORT $LN43@RecvDuelAn
  02076	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv265[ebp], 0
  0207d	eb 15		 jmp	 SHORT $LN44@RecvDuelAn
$LN43@RecvDuelAn:
  0207f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02082	33 d2		 xor	 edx, edx
  02084	81 b9 b0 0e 00
	00 97 3a 00 00	 cmp	 DWORD PTR [ecx+3760], 14999 ; 00003a97H
  0208e	0f 9e c2	 setle	 dl
  02091	89 55 80	 mov	 DWORD PTR tv265[ebp], edx
$LN44@RecvDuelAn:
  02094	83 7d 80 00	 cmp	 DWORD PTR tv265[ebp], 0
  02098	74 5f		 je	 SHORT $LN12@RecvDuelAn

; 889  :     {
; 890  :       GCServerMsgStringSend(lMsg.Get(MSGGET(4, 173)), lpObj->m_Index, 1);

  0209a	6a 01		 push	 1
  0209c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0209f	8b 08		 mov	 ecx, DWORD PTR [eax]
  020a1	51		 push	 ecx
  020a2	68 ad 04 00 00	 push	 1197			; 000004adH
  020a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  020ac	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  020b1	50		 push	 eax
  020b2	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  020b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 891  : 
; 892  :       this->RoomReset(iDuelRoom, true, true);

  020ba	6a 01		 push	 1
  020bc	6a 01		 push	 1
  020be	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  020c1	50		 push	 eax
  020c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  020c5	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 893  : 
; 894  :       memcpy(pMsgSend.szName, lpObj->Name, sizeof(pMsgSend.szName));

  020ca	6a 0a		 push	 10			; 0000000aH
  020cc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  020cf	83 c0 77	 add	 eax, 119		; 00000077H
  020d2	50		 push	 eax
  020d3	8d 4d e3	 lea	 ecx, DWORD PTR _pMsgSend$[ebp+7]
  020d6	51		 push	 ecx
  020d7	e8 00 00 00 00	 call	 _memcpy
  020dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 895  :       DataSend(iDuelIndex, (LPBYTE)&pMsgSend, pMsgSend.h.size);

  020df	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  020e3	50		 push	 eax
  020e4	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  020e7	51		 push	 ecx
  020e8	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  020eb	52		 push	 edx
  020ec	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  020f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 896  :       return;

  020f4	e9 9b 04 00 00	 jmp	 $LN25@RecvDuelAn
$LN12@RecvDuelAn:

; 897  :     }
; 898  : 
; 899  :     if ( gObj[iDuelIndex].m_iDuelUserReserved == lpObj->m_Index )

  020f9	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  020fc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02108	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0210b	8b 84 01 b0 0e
	00 00		 mov	 eax, DWORD PTR [ecx+eax+3760]
  02112	3b 02		 cmp	 eax, DWORD PTR [edx]
  02114	0f 85 55 04 00
	00		 jne	 $LN11@RecvDuelAn

; 900  :     {
; 901  : 
; 902  :       char szDuelName[MAX_ACCOUNT_LEN+1]={0};

  0211a	c6 45 d0 00	 mov	 BYTE PTR _szDuelName$234755[ebp], 0
  0211e	33 c0		 xor	 eax, eax
  02120	89 45 d1	 mov	 DWORD PTR _szDuelName$234755[ebp+1], eax
  02123	89 45 d5	 mov	 DWORD PTR _szDuelName$234755[ebp+5], eax
  02126	66 89 45 d9	 mov	 WORD PTR _szDuelName$234755[ebp+9], ax

; 903  :       char szDuelName2[MAX_ACCOUNT_LEN+1]={0};

  0212a	c6 45 c4 00	 mov	 BYTE PTR _szDuelName2$234756[ebp], 0
  0212e	33 c0		 xor	 eax, eax
  02130	89 45 c5	 mov	 DWORD PTR _szDuelName2$234756[ebp+1], eax
  02133	89 45 c9	 mov	 DWORD PTR _szDuelName2$234756[ebp+5], eax
  02136	66 89 45 cd	 mov	 WORD PTR _szDuelName2$234756[ebp+9], ax

; 904  : 
; 905  :       memcpy(szDuelName, gObj[iDuelIndex].Name, MAX_ACCOUNT_LEN);

  0213a	6a 0a		 push	 10			; 0000000aH
  0213c	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  0213f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02145	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0214b	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  0214f	52		 push	 edx
  02150	8d 45 d0	 lea	 eax, DWORD PTR _szDuelName$234755[ebp]
  02153	50		 push	 eax
  02154	e8 00 00 00 00	 call	 _memcpy
  02159	83 c4 0c	 add	 esp, 12			; 0000000cH

; 906  :       szDuelName[MAX_ACCOUNT_LEN] = 0;

  0215c	c6 45 da 00	 mov	 BYTE PTR _szDuelName$234755[ebp+10], 0

; 907  : 
; 908  :       memcpy(szDuelName2, lpMsg->szName, MAX_ACCOUNT_LEN);

  02160	6a 0a		 push	 10			; 0000000aH
  02162	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  02165	83 c0 07	 add	 eax, 7
  02168	50		 push	 eax
  02169	8d 4d c4	 lea	 ecx, DWORD PTR _szDuelName2$234756[ebp]
  0216c	51		 push	 ecx
  0216d	e8 00 00 00 00	 call	 _memcpy
  02172	83 c4 0c	 add	 esp, 12			; 0000000cH

; 909  :       szDuelName2[MAX_ACCOUNT_LEN] = 0;

  02175	c6 45 ce 00	 mov	 BYTE PTR _szDuelName2$234756[ebp+10], 0

; 910  : 
; 911  :       if ( !strcmp(szDuelName, szDuelName2))

  02179	8d 45 c4	 lea	 eax, DWORD PTR _szDuelName2$234756[ebp]
  0217c	50		 push	 eax
  0217d	8d 4d d0	 lea	 ecx, DWORD PTR _szDuelName$234755[ebp]
  02180	51		 push	 ecx
  02181	e8 00 00 00 00	 call	 _strcmp
  02186	83 c4 08	 add	 esp, 8
  02189	85 c0		 test	 eax, eax
  0218b	0f 85 b5 03 00
	00		 jne	 $LN10@RecvDuelAn

; 912  :       {
; 913  :         if ( lpMsg->bDuelOK == false)

  02191	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  02194	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  02198	85 c9		 test	 ecx, ecx
  0219a	75 43		 jne	 SHORT $LN9@RecvDuelAn

; 914  :         {
; 915  :           this->RoomReset(iDuelRoom, true, true);

  0219c	6a 01		 push	 1
  0219e	6a 01		 push	 1
  021a0	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  021a3	50		 push	 eax
  021a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  021a7	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 916  :           pMsgSend.bDuelStart = 0x0F;

  021ac	c6 45 e0 0f	 mov	 BYTE PTR _pMsgSend$[ebp+4], 15 ; 0000000fH

; 917  :           memcpy(pMsgSend.szName, lpObj->Name, sizeof(pMsgSend.szName));

  021b0	6a 0a		 push	 10			; 0000000aH
  021b2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  021b5	83 c0 77	 add	 eax, 119		; 00000077H
  021b8	50		 push	 eax
  021b9	8d 4d e3	 lea	 ecx, DWORD PTR _pMsgSend$[ebp+7]
  021bc	51		 push	 ecx
  021bd	e8 00 00 00 00	 call	 _memcpy
  021c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 918  :           DataSend(iDuelIndex, (LPBYTE)&pMsgSend, pMsgSend.h.size);

  021c5	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  021c9	50		 push	 eax
  021ca	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  021cd	51		 push	 ecx
  021ce	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  021d1	52		 push	 edx
  021d2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  021d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  021da	e9 65 03 00 00	 jmp	 $LN8@RecvDuelAn
$LN9@RecvDuelAn:

; 919  :         }
; 920  :         else if ( lpMsg->bDuelOK == true )

  021df	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  021e2	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  021e6	83 f9 01	 cmp	 ecx, 1
  021e9	0f 85 55 03 00
	00		 jne	 $LN8@RecvDuelAn

; 921  :         {
; 922  : 
; 923  :           if ( lpObj->Money < 30000 )

  021ef	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  021f2	81 b8 f0 00 00
	00 30 75 00 00	 cmp	 DWORD PTR [eax+240], 30000 ; 00007530H
  021fc	7d 4c		 jge	 SHORT $LN6@RecvDuelAn

; 924  :           {
; 925  :             this->SendEndDuel(&gObj[iDuelIndex]);

  021fe	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02201	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02207	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0220d	50		 push	 eax
  0220e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02211	e8 00 00 00 00	 call	 ?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendEndDuel

; 926  :             this->RoomReset(iDuelRoom, true);

  02216	6a 00		 push	 0
  02218	6a 01		 push	 1
  0221a	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  0221d	50		 push	 eax
  0221e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02221	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 927  :             pMsgSend.bDuelStart = 0x0e;

  02226	c6 45 e0 0e	 mov	 BYTE PTR _pMsgSend$[ebp+4], 14 ; 0000000eH

; 928  :             pMsgSend.h.size = sizeof(pMsgSend);

  0222a	c6 45 dd 11	 mov	 BYTE PTR _pMsgSend$[ebp+1], 17 ; 00000011H

; 929  :             DataSend(lpObj->m_Index, (BYTE*)&pMsgSend, pMsgSend.h.size);

  0222e	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  02232	50		 push	 eax
  02233	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  02236	51		 push	 ecx
  02237	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0223a	8b 02		 mov	 eax, DWORD PTR [edx]
  0223c	50		 push	 eax
  0223d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02242	83 c4 0c	 add	 esp, 12			; 0000000cH

; 930  :             return;

  02245	e9 4a 03 00 00	 jmp	 $LN25@RecvDuelAn
$LN6@RecvDuelAn:

; 931  :           }
; 932  :           if(gObj[iDuelIndex].Money < 30000)

  0224a	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  0224d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02253	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02259	81 bc 01 f0 00
	00 00 30 75 00
	00		 cmp	 DWORD PTR [ecx+eax+240], 30000 ; 00007530H
  02264	7d 3e		 jge	 SHORT $LN5@RecvDuelAn

; 933  :           {
; 934  :             this->SendEndDuel(lpObj);

  02266	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02269	50		 push	 eax
  0226a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0226d	e8 00 00 00 00	 call	 ?SendEndDuel@CDuelManager@@QAEXPAUOBJECTSTRUCT@@@Z ; CDuelManager::SendEndDuel

; 935  :             this->RoomReset(iDuelRoom, true);

  02272	6a 00		 push	 0
  02274	6a 01		 push	 1
  02276	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  02279	50		 push	 eax
  0227a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0227d	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 936  :             pMsgSend.bDuelStart = 0x0e;

  02282	c6 45 e0 0e	 mov	 BYTE PTR _pMsgSend$[ebp+4], 14 ; 0000000eH

; 937  :             pMsgSend.h.size = sizeof(pMsgSend);

  02286	c6 45 dd 11	 mov	 BYTE PTR _pMsgSend$[ebp+1], 17 ; 00000011H

; 938  :             DataSend(iDuelIndex, (BYTE*)&pMsgSend, pMsgSend.h.size);

  0228a	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  0228e	50		 push	 eax
  0228f	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  02292	51		 push	 ecx
  02293	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  02296	52		 push	 edx
  02297	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0229c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 939  :             return;

  0229f	e9 f0 02 00 00	 jmp	 $LN25@RecvDuelAn
$LN5@RecvDuelAn:

; 940  :           }
; 941  : 
; 942  :           if(gObjMoveGate(lpObj->m_Index, g_DuelGates[iDuelRoom].UserGate01) == false)

  022a4	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  022a7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  022aa	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _g_DuelGates[eax]
  022b0	51		 push	 ecx
  022b1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  022b4	8b 02		 mov	 eax, DWORD PTR [edx]
  022b6	50		 push	 eax
  022b7	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  022bc	83 c4 08	 add	 esp, 8
  022bf	85 c0		 test	 eax, eax
  022c1	75 15		 jne	 SHORT $LN4@RecvDuelAn

; 943  :           {
; 944  :             this->RoomReset(iDuelRoom, true, true);

  022c3	6a 01		 push	 1
  022c5	6a 01		 push	 1
  022c7	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  022ca	50		 push	 eax
  022cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  022ce	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 945  :             return;

  022d3	e9 bc 02 00 00	 jmp	 $LN25@RecvDuelAn
$LN4@RecvDuelAn:

; 946  :           }
; 947  :           if(gObjMoveGate(iDuelIndex, g_DuelGates[iDuelRoom].UserGate02) == false)

  022d8	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  022db	6b c0 0c	 imul	 eax, 12			; 0000000cH
  022de	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR _g_DuelGates[eax+4]
  022e4	51		 push	 ecx
  022e5	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  022e8	52		 push	 edx
  022e9	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  022ee	83 c4 08	 add	 esp, 8
  022f1	85 c0		 test	 eax, eax
  022f3	75 15		 jne	 SHORT $LN3@RecvDuelAn

; 948  :           {
; 949  :             this->RoomReset(iDuelRoom, true, true);

  022f5	6a 01		 push	 1
  022f7	6a 01		 push	 1
  022f9	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  022fc	50		 push	 eax
  022fd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02300	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 950  :             return;

  02305	e9 8a 02 00 00	 jmp	 $LN25@RecvDuelAn
$LN3@RecvDuelAn:

; 951  :           }
; 952  : 
; 953  :           lpObj->Money -= 30000;

  0230a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0230d	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  02313	81 e9 30 75 00
	00		 sub	 ecx, 30000		; 00007530H
  02319	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0231c	89 8a f0 00 00
	00		 mov	 DWORD PTR [edx+240], ecx

; 954  :           GCMoneySend(lpObj->m_Index, lpObj->Money);

  02322	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02325	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  0232b	51		 push	 ecx
  0232c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0232f	8b 02		 mov	 eax, DWORD PTR [edx]
  02331	50		 push	 eax
  02332	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  02337	83 c4 08	 add	 esp, 8

; 955  : 
; 956  :           gObj[iDuelIndex].Money -= 30000;

  0233a	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  0233d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02343	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02349	8b 94 01 f0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+240]
  02350	81 ea 30 75 00
	00		 sub	 edx, 30000		; 00007530H
  02356	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02359	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0235f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02365	89 94 01 f0 00
	00 00		 mov	 DWORD PTR [ecx+eax+240], edx

; 957  :           GCMoneySend(iDuelIndex, gObj[iDuelIndex].Money);

  0236c	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  0236f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02375	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0237b	8b 94 01 f0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+240]
  02382	52		 push	 edx
  02383	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02386	50		 push	 eax
  02387	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0238c	83 c4 08	 add	 esp, 8

; 958  : 
; 959  : 
; 960  : 		  gObj[iDuelIndex].m_iDuelUserReserved = -1;

  0238f	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02392	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02398	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0239e	c7 84 01 b0 0e
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+3760], -1

; 961  :           gObj[iDuelIndex].m_btDuelScore = 0;

  023a9	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  023ac	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  023b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  023b8	c6 84 01 bc 0e
	00 00 00	 mov	 BYTE PTR [ecx+eax+3772], 0

; 962  :           gObj[iDuelIndex].m_iDuelUser = lpObj->m_Index;

  023c0	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  023c3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  023c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  023cf	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  023d2	8b 12		 mov	 edx, DWORD PTR [edx]
  023d4	89 94 01 b8 0e
	00 00		 mov	 DWORD PTR [ecx+eax+3768], edx

; 963  : 
; 964  :           this->m_Rooms[iDuelRoom].dwStartTime = GetTickCount();

  023db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  023e1	8b 4d f0	 mov	 ecx, DWORD PTR _iDuelRoom$[ebp]
  023e4	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  023e7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  023ea	89 44 0a 54	 mov	 DWORD PTR [edx+ecx+84], eax

; 965  :           this->m_Rooms[iDuelRoom].dwTickCount = GetTickCount() + (DUEL_TIME * 60000);

  023ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  023f4	05 40 77 1b 00	 add	 eax, 1800000		; 001b7740H
  023f9	8b 4d f0	 mov	 ecx, DWORD PTR _iDuelRoom$[ebp]
  023fc	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  023ff	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02402	89 44 0a 50	 mov	 DWORD PTR [edx+ecx+80], eax

; 966  : 
; 967  :           lpObj->m_iDuelUserRequested = -1;

  02406	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02409	c7 80 b4 0e 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3764], -1

; 968  :           lpObj->m_iDuelUserReserved = -1;

  02413	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02416	c7 80 b0 0e 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3760], -1

; 969  : 
; 970  :           lpObj->m_btDuelScore = 0;

  02420	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02423	c6 80 bc 0e 00
	00 00		 mov	 BYTE PTR [eax+3772], 0

; 971  :           lpObj->m_iDuelUser = iDuelIndex;

  0242a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0242d	8b 4d f4	 mov	 ecx, DWORD PTR _iDuelIndex$[ebp]
  02430	89 88 b8 0e 00
	00		 mov	 DWORD PTR [eax+3768], ecx

; 972  : 
; 973  :           this->m_Rooms[iDuelRoom].bFree = FALSE;

  02436	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  02439	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0243c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0243f	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 0

; 974  :           this->m_Rooms[iDuelRoom].bWaiting = FALSE;

  02447	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  0244a	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0244d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02450	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 975  :           this->m_Rooms[iDuelRoom].bHasWinner = FALSE;

  02458	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  0245b	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0245e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02461	c7 44 01 58 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+88], 0

; 976  : 
; 977  :           pMsgSend.bDuelStart = 0;

  02469	c6 45 e0 00	 mov	 BYTE PTR _pMsgSend$[ebp+4], 0

; 978  : 
; 979  :           pMsgSend.NumberH = SET_NUMBERH(iDuelIndex);

  0246d	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02470	c1 e8 08	 shr	 eax, 8
  02473	88 45 e1	 mov	 BYTE PTR _pMsgSend$[ebp+5], al

; 980  :           pMsgSend.NumberL = SET_NUMBERL(iDuelIndex);

  02476	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02479	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0247e	88 45 e2	 mov	 BYTE PTR _pMsgSend$[ebp+6], al

; 981  : 
; 982  :           memcpy(pMsgSend.szName, szDuelName, sizeof(pMsgSend.szName));

  02481	6a 0a		 push	 10			; 0000000aH
  02483	8d 45 d0	 lea	 eax, DWORD PTR _szDuelName$234755[ebp]
  02486	50		 push	 eax
  02487	8d 4d e3	 lea	 ecx, DWORD PTR _pMsgSend$[ebp+7]
  0248a	51		 push	 ecx
  0248b	e8 00 00 00 00	 call	 _memcpy
  02490	83 c4 0c	 add	 esp, 12			; 0000000cH

; 983  : 
; 984  :           DataSend(lpObj->m_Index, (LPBYTE)&pMsgSend, pMsgSend.h.size);

  02493	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  02497	50		 push	 eax
  02498	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  0249b	51		 push	 ecx
  0249c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0249f	8b 02		 mov	 eax, DWORD PTR [edx]
  024a1	50		 push	 eax
  024a2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  024a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 985  : 
; 986  :           pMsgSend.NumberH = SET_NUMBERH(lpObj->m_Index);

  024aa	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  024ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  024af	c1 e9 08	 shr	 ecx, 8
  024b2	88 4d e1	 mov	 BYTE PTR _pMsgSend$[ebp+5], cl

; 987  :           pMsgSend.NumberL = SET_NUMBERL(lpObj->m_Index);

  024b5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  024b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  024ba	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  024c0	88 4d e2	 mov	 BYTE PTR _pMsgSend$[ebp+6], cl

; 988  : 
; 989  :           memcpy(pMsgSend.szName, lpObj->Name, sizeof(pMsgSend.szName));

  024c3	6a 0a		 push	 10			; 0000000aH
  024c5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  024c8	83 c0 77	 add	 eax, 119		; 00000077H
  024cb	50		 push	 eax
  024cc	8d 4d e3	 lea	 ecx, DWORD PTR _pMsgSend$[ebp+7]
  024cf	51		 push	 ecx
  024d0	e8 00 00 00 00	 call	 _memcpy
  024d5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 990  : 
; 991  :           DataSend(iDuelIndex, (LPBYTE)&pMsgSend, pMsgSend.h.size);

  024d8	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  024dc	50		 push	 eax
  024dd	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  024e0	51		 push	 ecx
  024e1	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  024e4	52		 push	 edx
  024e5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  024ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 992  : 
; 993  :           this->UpdateDuelScore(iDuelRoom);

  024ed	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  024f0	50		 push	 eax
  024f1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  024f4	e8 00 00 00 00	 call	 ?UpdateDuelScore@CDuelManager@@QAEXH@Z ; CDuelManager::UpdateDuelScore

; 994  : 
; 995  :           LogAddTD("[Duel] [%s][%s] Duel Started [%s][%s] on Room [%d]", lpObj->AccountID, lpObj->Name,
; 996  :             gObj[iDuelIndex].AccountID, gObj[iDuelIndex].Name, iDuelRoom + 1);

  024f9	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  024fc	83 c0 01	 add	 eax, 1
  024ff	50		 push	 eax
  02500	8b 4d f4	 mov	 ecx, DWORD PTR _iDuelIndex$[ebp]
  02503	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  02509	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0250f	8d 44 0a 77	 lea	 eax, DWORD PTR [edx+ecx+119]
  02513	50		 push	 eax
  02514	8b 4d f4	 mov	 ecx, DWORD PTR _iDuelIndex$[ebp]
  02517	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0251d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02523	8d 44 0a 6c	 lea	 eax, DWORD PTR [edx+ecx+108]
  02527	50		 push	 eax
  02528	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0252b	83 c1 77	 add	 ecx, 119		; 00000077H
  0252e	51		 push	 ecx
  0252f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02532	83 c2 6c	 add	 edx, 108		; 0000006cH
  02535	52		 push	 edx
  02536	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@GLFLBGPF@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Duel?5Started?5?$FL?$CFs@
  0253b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02541	83 c4 18	 add	 esp, 24			; 00000018H
$LN8@RecvDuelAn:

; 997  :         }
; 998  :       }
; 999  :       else

  02544	eb 27		 jmp	 SHORT $LN2@RecvDuelAn
$LN10@RecvDuelAn:

; 1000 :       {
; 1001 :         this->RoomReset(iDuelRoom);

  02546	6a 00		 push	 0
  02548	6a 00		 push	 0
  0254a	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  0254d	50		 push	 eax
  0254e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02551	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 1002 :         DataSend(iDuelIndex, (LPBYTE)&pMsgSend, pMsgSend.h.size);

  02556	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  0255a	50		 push	 eax
  0255b	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  0255e	51		 push	 ecx
  0255f	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  02562	52		 push	 edx
  02563	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02568	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1003 :         return;

  0256b	eb 27		 jmp	 SHORT $LN25@RecvDuelAn
$LN2@RecvDuelAn:

; 1004 :       }
; 1005 :     }
; 1006 :     else

  0256d	eb 25		 jmp	 SHORT $LN25@RecvDuelAn
$LN11@RecvDuelAn:

; 1007 :     {
; 1008 :       this->RoomReset(iDuelRoom);

  0256f	6a 00		 push	 0
  02571	6a 00		 push	 0
  02573	8b 45 f0	 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  02576	50		 push	 eax
  02577	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0257a	e8 00 00 00 00	 call	 ?RoomReset@CDuelManager@@QAEXH_N0@Z ; CDuelManager::RoomReset

; 1009 :       DataSend(iDuelIndex, (LPBYTE)&pMsgSend, pMsgSend.h.size);

  0257f	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsgSend$[ebp+1]
  02583	50		 push	 eax
  02584	8d 4d dc	 lea	 ecx, DWORD PTR _pMsgSend$[ebp]
  02587	51		 push	 ecx
  02588	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  0258b	52		 push	 edx
  0258c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02591	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@RecvDuelAn:

; 1010 :       return;
; 1011 :     }
; 1012 :   }
; 1013 : }

  02594	5f		 pop	 edi
  02595	5e		 pop	 esi
  02596	5b		 pop	 ebx
  02597	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0259a	33 cd		 xor	 ecx, ebp
  0259c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  025a1	8b e5		 mov	 esp, ebp
  025a3	5d		 pop	 ebp
  025a4	c2 08 00	 ret	 8
?RecvDuelAnswer@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_ANSWER_START@@@Z ENDP ; CDuelManager::RecvDuelAnswer
_TEXT	ENDS
PUBLIC	??_C@_0EJ@MOPGDAOH@?$FLDuel?5Manager?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Requeste@ ; `string'
PUBLIC	?IsDuelEnable@CDuelManager@@QAE_NH@Z		; CDuelManager::IsDuelEnable
PUBLIC	??_C@_0CK@MLMIACIE@Duels?5are?5not?5allowed?5in?5Illusio@ ; `string'
PUBLIC	??_C@_0BD@DBIFHAEB@error?5?3?5?$CFs?5?$CFd?5?$CI?$CFd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0ED@DJJMAPHH@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??RecvDuelRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_START@@@Z@4JA ; `CDuelManager::RecvDuelRequest'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	?gPkLimitFree@@3HA:DWORD			; gPkLimitFree
EXTRN	?gNonPK@@3HA:DWORD				; gNonPK
;	COMDAT ??_C@_0EJ@MOPGDAOH@?$FLDuel?5Manager?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Requeste@
CONST	SEGMENT
??_C@_0EJ@MOPGDAOH@?$FLDuel?5Manager?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Requeste@ DB '['
	DB	'Duel Manager] [%s][%s] Requested to Start Duel to [%s][%s] on'
	DB	' Room [%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MLMIACIE@Duels?5are?5not?5allowed?5in?5Illusio@
CONST	SEGMENT
??_C@_0CK@MLMIACIE@Duels?5are?5not?5allowed?5in?5Illusio@ DB 'Duels are n'
	DB	'ot allowed in Illusion Temple.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBIFHAEB@error?5?3?5?$CFs?5?$CFd?5?$CI?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@DBIFHAEB@error?5?3?5?$CFs?5?$CFd?5?$CI?$CFd?$CJ?$AA@ DB 'error '
	DB	': %s %d (%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@DJJMAPHH@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0ED@DJJMAPHH@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\duelmanager.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??RecvDuelRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_START@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??RecvDuelRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_START@@@Z@4JA DD 03f8H ; `CDuelManager::RecvDuelRequest'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
tv238 = -448						; size = 4
tv219 = -448						; size = 4
tv507 = -444						; size = 4
tv484 = -444						; size = 4
tv461 = -444						; size = 4
tv254 = -444						; size = 4
tv239 = -444						; size = 4
tv220 = -444						; size = 4
tv201 = -444						; size = 4
tv176 = -444						; size = 4
tv157 = -444						; size = 4
tv81 = -444						; size = 4
_pMsg$ = -376						; size = 16
_n$234834 = -360					; size = 4
_szDuelName2$ = -356					; size = 11
_szDuelName$ = -344					; size = 11
_pMsgSend$234822 = -332					; size = 17
_iDuelRoom$ = -312					; size = 4
_pMsgSend$234818 = -308					; size = 17
_pMsgSend$234814 = -288					; size = 17
_szTempText$ = -268					; size = 256
_iDuelIndex$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMsg$ = 12						; size = 4
?RecvDuelRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_START@@@Z PROC ; CDuelManager::RecvDuelRequest
; _this$ = ecx

; 1016 : {

  025b0	55		 push	 ebp
  025b1	8b ec		 mov	 ebp, esp
  025b3	81 ec c0 01 00
	00		 sub	 esp, 448		; 000001c0H
  025b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  025be	33 c5		 xor	 eax, ebp
  025c0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  025c3	53		 push	 ebx
  025c4	56		 push	 esi
  025c5	57		 push	 edi
  025c6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1017 : 	/*
; 1018 :   if(g_DuelSystemState != TRUE)
; 1019 :   {
; 1020 :     GCServerMsgStringSend("O duel foi desativado neste servidor!", lpObj->m_Index, 1);
; 1021 :     return;
; 1022 :   }
; 1023 :   */
; 1024 :   int iDuelIndex = MAKE_NUMBERW(lpMsg->NumberH, lpMsg->NumberL);

  025c9	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  025cc	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  025d0	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  025d6	0f b6 d1	 movzx	 edx, cl
  025d9	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  025dc	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  025e0	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  025e6	0f b6 c1	 movzx	 eax, cl
  025e9	c1 e0 08	 shl	 eax, 8
  025ec	0b d0		 or	 edx, eax
  025ee	0f b7 ca	 movzx	 ecx, dx
  025f1	89 4d f4	 mov	 DWORD PTR _iDuelIndex$[ebp], ecx

; 1025 : 
; 1026 :   if ( !OBJMAX_RANGE(iDuelIndex) )

  025f4	83 7d f4 00	 cmp	 DWORD PTR _iDuelIndex$[ebp], 0
  025f8	7d 0c		 jge	 SHORT $LN39@RecvDuelRe
  025fa	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
  02604	eb 12		 jmp	 SHORT $LN40@RecvDuelRe
$LN39@RecvDuelRe:
  02606	33 c0		 xor	 eax, eax
  02608	81 7d f4 97 3a
	00 00		 cmp	 DWORD PTR _iDuelIndex$[ebp], 14999 ; 00003a97H
  0260f	0f 9e c0	 setle	 al
  02612	89 85 44 fe ff
	ff		 mov	 DWORD PTR tv81[ebp], eax
$LN40@RecvDuelRe:
  02618	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv81[ebp], 0
  0261f	75 26		 jne	 SHORT $LN36@RecvDuelRe

; 1027 :   {
; 1028 :     LogAdd("error : %s %d (%d)", __FILE__, __LINE__, iDuelIndex);

  02621	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02624	50		 push	 eax
  02625	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?1??RecvDuelRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_START@@@Z@4JA
  0262b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0262e	51		 push	 ecx
  0262f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@DJJMAPHH@d?3?2projects?2exteam6?43?2source?2gam@
  02634	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DBIFHAEB@error?5?3?5?$CFs?5?$CFd?5?$CI?$CFd?$CJ?$AA@
  02639	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0263f	83 c4 10	 add	 esp, 16			; 00000010H

; 1029 :     return;

  02642	e9 b6 0b 00 00	 jmp	 $LN37@RecvDuelRe
$LN36@RecvDuelRe:

; 1030 :   }
; 1031 : 
; 1032 :   if ( iDuelIndex == lpObj->m_Index )

  02647	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0264a	8b 4d f4	 mov	 ecx, DWORD PTR _iDuelIndex$[ebp]
  0264d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0264f	75 05		 jne	 SHORT $LN35@RecvDuelRe

; 1033 :     return;

  02651	e9 a7 0b 00 00	 jmp	 $LN37@RecvDuelRe
$LN35@RecvDuelRe:

; 1034 : 
; 1035 :   char szTempText[256];
; 1036 : 
; 1037 :   if ( lpObj->CloseType != -1 )

  02656	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02659	0f be 48 0b	 movsx	 ecx, BYTE PTR [eax+11]
  0265d	83 f9 ff	 cmp	 ecx, -1
  02660	74 05		 je	 SHORT $LN34@RecvDuelRe

; 1038 :     return;

  02662	e9 96 0b 00 00	 jmp	 $LN37@RecvDuelRe
$LN34@RecvDuelRe:

; 1039 :   
; 1040 :   if ( gNonPK ) 

  02667	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gNonPK@@3HA, 0 ; gNonPK
  0266e	74 25		 je	 SHORT $LN33@RecvDuelRe

; 1041 :   {
; 1042 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 174)), lpObj->m_Index, 1);

  02670	6a 01		 push	 1
  02672	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02675	8b 08		 mov	 ecx, DWORD PTR [eax]
  02677	51		 push	 ecx
  02678	68 ae 04 00 00	 push	 1198			; 000004aeH
  0267d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02682	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02687	50		 push	 eax
  02688	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0268d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1043 :     return;

  02690	e9 68 0b 00 00	 jmp	 $LN37@RecvDuelRe
$LN33@RecvDuelRe:

; 1044 :   }
; 1045 : 
; 1046 :   if ( !gPkLimitFree ) 

  02695	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  0269c	75 75		 jne	 SHORT $LN32@RecvDuelRe

; 1047 :   {
; 1048 :     if ( lpObj->m_PK_Level >= 6 )

  0269e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  026a1	0f be 88 3d 01
	00 00		 movsx	 ecx, BYTE PTR [eax+317]
  026a8	83 f9 06	 cmp	 ecx, 6
  026ab	7c 25		 jl	 SHORT $LN31@RecvDuelRe

; 1049 :     {
; 1050 :       GCServerMsgStringSend(lMsg.Get(MSGGET(4, 175)), lpObj->m_Index, 1);

  026ad	6a 01		 push	 1
  026af	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  026b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  026b4	51		 push	 ecx
  026b5	68 af 04 00 00	 push	 1199			; 000004afH
  026ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  026bf	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  026c4	50		 push	 eax
  026c5	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  026ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1051 :       return;

  026cd	e9 2b 0b 00 00	 jmp	 $LN37@RecvDuelRe
$LN31@RecvDuelRe:

; 1052 :     }
; 1053 :     if ( gObj[iDuelIndex].m_PK_Level >= 6 )

  026d2	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  026d5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  026db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  026e1	0f be 94 01 3d
	01 00 00	 movsx	 edx, BYTE PTR [ecx+eax+317]
  026e9	83 fa 06	 cmp	 edx, 6
  026ec	7c 25		 jl	 SHORT $LN32@RecvDuelRe

; 1054 :     {
; 1055 :       GCServerMsgStringSend(lMsg.Get(MSGGET(4, 176)), lpObj->m_Index, 1);

  026ee	6a 01		 push	 1
  026f0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  026f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  026f5	51		 push	 ecx
  026f6	68 b0 04 00 00	 push	 1200			; 000004b0H
  026fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02700	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02705	50		 push	 eax
  02706	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0270b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 :       return;

  0270e	e9 ea 0a 00 00	 jmp	 $LN37@RecvDuelRe
$LN32@RecvDuelRe:

; 1057 :     }
; 1058 :   }
; 1059 : 
; 1060 :   if ( OBJMAX_RANGE(lpObj->m_iDuelUserReserved) )

  02713	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02716	83 b8 b0 0e 00
	00 00		 cmp	 DWORD PTR [eax+3760], 0
  0271d	7d 0c		 jge	 SHORT $LN41@RecvDuelRe
  0271f	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv157[ebp], 0
  02729	eb 18		 jmp	 SHORT $LN42@RecvDuelRe
$LN41@RecvDuelRe:
  0272b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0272e	33 d2		 xor	 edx, edx
  02730	81 b9 b0 0e 00
	00 97 3a 00 00	 cmp	 DWORD PTR [ecx+3760], 14999 ; 00003a97H
  0273a	0f 9e c2	 setle	 dl
  0273d	89 95 44 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], edx
$LN42@RecvDuelRe:
  02743	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv157[ebp], 0
  0274a	74 45		 je	 SHORT $LN29@RecvDuelRe

; 1061 :   {
; 1062 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 159)), lpObj->m_Index, 1);

  0274c	6a 01		 push	 1
  0274e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02751	8b 08		 mov	 ecx, DWORD PTR [eax]
  02753	51		 push	 ecx
  02754	68 9f 04 00 00	 push	 1183			; 0000049fH
  02759	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0275e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02763	50		 push	 eax
  02764	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02769	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1063 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 161)), lpObj->m_Index, 1);

  0276c	6a 01		 push	 1
  0276e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02771	8b 08		 mov	 ecx, DWORD PTR [eax]
  02773	51		 push	 ecx
  02774	68 a1 04 00 00	 push	 1185			; 000004a1H
  02779	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0277e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02783	50		 push	 eax
  02784	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02789	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1064 :     return;

  0278c	e9 6c 0a 00 00	 jmp	 $LN37@RecvDuelRe
$LN29@RecvDuelRe:

; 1065 :   }
; 1066 : 
; 1067 :   if ( OBJMAX_RANGE( lpObj->m_iDuelUser ) )

  02791	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02794	83 b8 b8 0e 00
	00 00		 cmp	 DWORD PTR [eax+3768], 0
  0279b	7d 0c		 jge	 SHORT $LN43@RecvDuelRe
  0279d	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv176[ebp], 0
  027a7	eb 18		 jmp	 SHORT $LN44@RecvDuelRe
$LN43@RecvDuelRe:
  027a9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  027ac	33 d2		 xor	 edx, edx
  027ae	81 b9 b8 0e 00
	00 97 3a 00 00	 cmp	 DWORD PTR [ecx+3768], 14999 ; 00003a97H
  027b8	0f 9e c2	 setle	 dl
  027bb	89 95 44 fe ff
	ff		 mov	 DWORD PTR tv176[ebp], edx
$LN44@RecvDuelRe:
  027c1	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv176[ebp], 0
  027c8	74 45		 je	 SHORT $LN28@RecvDuelRe

; 1068 :   {
; 1069 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 160)), lpObj->m_Index, 1);

  027ca	6a 01		 push	 1
  027cc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  027cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  027d1	51		 push	 ecx
  027d2	68 a0 04 00 00	 push	 1184			; 000004a0H
  027d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  027dc	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  027e1	50		 push	 eax
  027e2	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  027e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1070 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 161)), lpObj->m_Index, 1);

  027ea	6a 01		 push	 1
  027ec	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  027ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  027f1	51		 push	 ecx
  027f2	68 a1 04 00 00	 push	 1185			; 000004a1H
  027f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  027fc	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02801	50		 push	 eax
  02802	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02807	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1071 :     return;

  0280a	e9 ee 09 00 00	 jmp	 $LN37@RecvDuelRe
$LN28@RecvDuelRe:

; 1072 :   }
; 1073 : 
; 1074 :   if ( DS_MAP_RANGE(gObj[iDuelIndex].MapNumber ) )

  0280f	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02812	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02818	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0281e	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02826	83 fa 09	 cmp	 edx, 9
  02829	75 0c		 jne	 SHORT $LN45@RecvDuelRe
  0282b	c7 85 44 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv201[ebp], 1
  02835	eb 25		 jmp	 SHORT $LN46@RecvDuelRe
$LN45@RecvDuelRe:
  02837	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  0283a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02840	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02846	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0284e	33 c0		 xor	 eax, eax
  02850	83 fa 20	 cmp	 edx, 32			; 00000020H
  02853	0f 94 c0	 sete	 al
  02856	89 85 44 fe ff
	ff		 mov	 DWORD PTR tv201[ebp], eax
$LN46@RecvDuelRe:
  0285c	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv201[ebp], 0
  02863	74 25		 je	 SHORT $LN27@RecvDuelRe

; 1075 :   {
; 1076 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 180)), lpObj->m_Index, 1);

  02865	6a 01		 push	 1
  02867	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0286a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0286c	51		 push	 ecx
  0286d	68 b4 04 00 00	 push	 1204			; 000004b4H
  02872	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02877	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0287c	50		 push	 eax
  0287d	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02882	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1077 :     return;

  02885	e9 73 09 00 00	 jmp	 $LN37@RecvDuelRe
$LN27@RecvDuelRe:

; 1078 :   }
; 1079 : 
; 1080 :   if ( BC_MAP_RANGE(lpObj->MapNumber) )

  0288a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0288d	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  02894	83 f9 34	 cmp	 ecx, 52			; 00000034H
  02897	75 0c		 jne	 SHORT $LN49@RecvDuelRe
  02899	c7 85 44 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv220[ebp], 1
  028a3	eb 3f		 jmp	 SHORT $LN50@RecvDuelRe
$LN49@RecvDuelRe:
  028a5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  028a8	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  028af	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  028b2	7d 0c		 jge	 SHORT $LN47@RecvDuelRe
  028b4	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv219[ebp], 0
  028be	eb 18		 jmp	 SHORT $LN48@RecvDuelRe
$LN47@RecvDuelRe:
  028c0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  028c3	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  028ca	33 c0		 xor	 eax, eax
  028cc	83 fa 11	 cmp	 edx, 17			; 00000011H
  028cf	0f 9e c0	 setle	 al
  028d2	89 85 40 fe ff
	ff		 mov	 DWORD PTR tv219[ebp], eax
$LN48@RecvDuelRe:
  028d8	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv219[ebp]
  028de	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv220[ebp], ecx
$LN50@RecvDuelRe:
  028e4	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv220[ebp], 0
  028eb	74 25		 je	 SHORT $LN26@RecvDuelRe

; 1081 :   {
; 1082 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 166)), lpObj->m_Index, 1);

  028ed	6a 01		 push	 1
  028ef	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  028f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  028f4	51		 push	 ecx
  028f5	68 a6 04 00 00	 push	 1190			; 000004a6H
  028fa	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  028ff	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02904	50		 push	 eax
  02905	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0290a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1083 :     return;

  0290d	e9 eb 08 00 00	 jmp	 $LN37@RecvDuelRe
$LN26@RecvDuelRe:

; 1084 :   }
; 1085 : 
; 1086 :   if ( CC_MAP_RANGE(lpObj->MapNumber) )

  02912	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02915	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0291c	83 f9 35	 cmp	 ecx, 53			; 00000035H
  0291f	75 0c		 jne	 SHORT $LN53@RecvDuelRe
  02921	c7 85 44 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv239[ebp], 1
  0292b	eb 3f		 jmp	 SHORT $LN54@RecvDuelRe
$LN53@RecvDuelRe:
  0292d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02930	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  02937	83 f8 12	 cmp	 eax, 18			; 00000012H
  0293a	7d 0c		 jge	 SHORT $LN51@RecvDuelRe
  0293c	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv238[ebp], 0
  02946	eb 18		 jmp	 SHORT $LN52@RecvDuelRe
$LN51@RecvDuelRe:
  02948	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0294b	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  02952	33 c0		 xor	 eax, eax
  02954	83 fa 17	 cmp	 edx, 23			; 00000017H
  02957	0f 9e c0	 setle	 al
  0295a	89 85 40 fe ff
	ff		 mov	 DWORD PTR tv238[ebp], eax
$LN52@RecvDuelRe:
  02960	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv238[ebp]
  02966	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv239[ebp], ecx
$LN54@RecvDuelRe:
  0296c	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv239[ebp], 0
  02973	74 25		 je	 SHORT $LN25@RecvDuelRe

; 1087 :   {
; 1088 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 207)), lpObj->m_Index, 1);

  02975	6a 01		 push	 1
  02977	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0297a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0297c	51		 push	 ecx
  0297d	68 cf 04 00 00	 push	 1231			; 000004cfH
  02982	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02987	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0298c	50		 push	 eax
  0298d	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02992	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1089 :     return;

  02995	e9 63 08 00 00	 jmp	 $LN37@RecvDuelRe
$LN25@RecvDuelRe:

; 1090 :   }
; 1091 : 
; 1092 :   if ( IT_MAP_RANGE(lpObj->MapNumber) != FALSE )

  0299a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0299d	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  029a4	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  029a7	7d 0c		 jge	 SHORT $LN55@RecvDuelRe
  029a9	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv254[ebp], 0
  029b3	eb 18		 jmp	 SHORT $LN56@RecvDuelRe
$LN55@RecvDuelRe:
  029b5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  029b8	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  029bf	33 c9		 xor	 ecx, ecx
  029c1	83 f8 32	 cmp	 eax, 50			; 00000032H
  029c4	0f 9e c1	 setle	 cl
  029c7	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv254[ebp], ecx
$LN56@RecvDuelRe:
  029cd	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv254[ebp], 0
  029d4	74 1a		 je	 SHORT $LN24@RecvDuelRe

; 1093 :   {
; 1094 :     ::GCServerMsgStringSend("Duels are not allowed in Illusion Temple.", lpObj->m_Index, 1);

  029d6	6a 01		 push	 1
  029d8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029db	8b 08		 mov	 ecx, DWORD PTR [eax]
  029dd	51		 push	 ecx
  029de	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@MLMIACIE@Duels?5are?5not?5allowed?5in?5Illusio@
  029e3	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  029e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1095 :     return;

  029eb	e9 0d 08 00 00	 jmp	 $LN37@RecvDuelRe
$LN24@RecvDuelRe:

; 1096 :   }
; 1097 : 
; 1098 :   if ( lpObj->Level < 30 || gObj[iDuelIndex].Level < 30)

  029f0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029f3	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  029fa	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  029fd	7c 1c		 jl	 SHORT $LN22@RecvDuelRe
  029ff	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02a02	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02a08	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02a0e	0f bf 94 01 be
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax+190]
  02a16	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  02a19	7d 45		 jge	 SHORT $LN23@RecvDuelRe
$LN22@RecvDuelRe:

; 1099 :   {
; 1100 :     PMSG_DUEL_START pMsgSend;
; 1101 :     pMsgSend.h.c = 0xC1;

  02a1b	c6 85 e0 fe ff
	ff c1		 mov	 BYTE PTR _pMsgSend$234814[ebp], 193 ; 000000c1H

; 1102 :     pMsgSend.h.headcode = 0xAA;

  02a22	c6 85 e2 fe ff
	ff aa		 mov	 BYTE PTR _pMsgSend$234814[ebp+2], 170 ; 000000aaH

; 1103 :     pMsgSend.h.subcode = 0x01;

  02a29	c6 85 e3 fe ff
	ff 01		 mov	 BYTE PTR _pMsgSend$234814[ebp+3], 1

; 1104 :     pMsgSend.bDuelStart = 0x0C;

  02a30	c6 85 e4 fe ff
	ff 0c		 mov	 BYTE PTR _pMsgSend$234814[ebp+4], 12 ; 0000000cH

; 1105 :     pMsgSend.h.size = sizeof(pMsgSend);

  02a37	c6 85 e1 fe ff
	ff 11		 mov	 BYTE PTR _pMsgSend$234814[ebp+1], 17 ; 00000011H

; 1106 :     DataSend(lpObj->m_Index, (BYTE*)&pMsgSend, pMsgSend.h.size);

  02a3e	0f b6 85 e1 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsgSend$234814[ebp+1]
  02a45	50		 push	 eax
  02a46	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsgSend$234814[ebp]
  02a4c	51		 push	 ecx
  02a4d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02a50	8b 02		 mov	 eax, DWORD PTR [edx]
  02a52	50		 push	 eax
  02a53	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02a58	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1107 :     return;

  02a5b	e9 9d 07 00 00	 jmp	 $LN37@RecvDuelRe
$LN23@RecvDuelRe:

; 1108 :   }
; 1109 : 
; 1110 :   if ( lpObj->Money < 30000 || gObj[iDuelIndex].Money < 30000 )

  02a60	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a63	81 b8 f0 00 00
	00 30 75 00 00	 cmp	 DWORD PTR [eax+240], 30000 ; 00007530H
  02a6d	7c 1c		 jl	 SHORT $LN20@RecvDuelRe
  02a6f	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02a72	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02a78	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02a7e	81 bc 01 f0 00
	00 00 30 75 00
	00		 cmp	 DWORD PTR [ecx+eax+240], 30000 ; 00007530H
  02a89	7d 45		 jge	 SHORT $LN21@RecvDuelRe
$LN20@RecvDuelRe:

; 1111 :   {
; 1112 :     PMSG_DUEL_START pMsgSend;
; 1113 :     pMsgSend.h.c = 0xC1;

  02a8b	c6 85 cc fe ff
	ff c1		 mov	 BYTE PTR _pMsgSend$234818[ebp], 193 ; 000000c1H

; 1114 :     pMsgSend.h.headcode = 0xAA;

  02a92	c6 85 ce fe ff
	ff aa		 mov	 BYTE PTR _pMsgSend$234818[ebp+2], 170 ; 000000aaH

; 1115 :     pMsgSend.h.subcode = 0x01;

  02a99	c6 85 cf fe ff
	ff 01		 mov	 BYTE PTR _pMsgSend$234818[ebp+3], 1

; 1116 :     pMsgSend.bDuelStart = 0x1e;

  02aa0	c6 85 d0 fe ff
	ff 1e		 mov	 BYTE PTR _pMsgSend$234818[ebp+4], 30 ; 0000001eH

; 1117 :     pMsgSend.h.size = sizeof(pMsgSend);

  02aa7	c6 85 cd fe ff
	ff 11		 mov	 BYTE PTR _pMsgSend$234818[ebp+1], 17 ; 00000011H

; 1118 :     DataSend(lpObj->m_Index, (BYTE*)&pMsgSend, pMsgSend.h.size);

  02aae	0f b6 85 cd fe
	ff ff		 movzx	 eax, BYTE PTR _pMsgSend$234818[ebp+1]
  02ab5	50		 push	 eax
  02ab6	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _pMsgSend$234818[ebp]
  02abc	51		 push	 ecx
  02abd	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02ac0	8b 02		 mov	 eax, DWORD PTR [edx]
  02ac2	50		 push	 eax
  02ac3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02ac8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1119 :     return;

  02acb	e9 2d 07 00 00	 jmp	 $LN37@RecvDuelRe
$LN21@RecvDuelRe:

; 1120 :   }
; 1121 : 
; 1122 :   int iDuelRoom = this->GetFreeRoomIndex();

  02ad0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02ad3	e8 00 00 00 00	 call	 ?GetFreeRoomIndex@CDuelManager@@QAEHXZ ; CDuelManager::GetFreeRoomIndex
  02ad8	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _iDuelRoom$[ebp], eax

; 1123 :   if ( iDuelRoom == -1 )

  02ade	83 bd c8 fe ff
	ff ff		 cmp	 DWORD PTR _iDuelRoom$[ebp], -1
  02ae5	75 45		 jne	 SHORT $LN19@RecvDuelRe

; 1124 :   {
; 1125 :     PMSG_DUEL_START pMsgSend;
; 1126 :     pMsgSend.h.c = 0xC1;

  02ae7	c6 85 b4 fe ff
	ff c1		 mov	 BYTE PTR _pMsgSend$234822[ebp], 193 ; 000000c1H

; 1127 :     pMsgSend.h.headcode = 0xAA;

  02aee	c6 85 b6 fe ff
	ff aa		 mov	 BYTE PTR _pMsgSend$234822[ebp+2], 170 ; 000000aaH

; 1128 :     pMsgSend.h.subcode = 0x01;

  02af5	c6 85 b7 fe ff
	ff 01		 mov	 BYTE PTR _pMsgSend$234822[ebp+3], 1

; 1129 :     pMsgSend.bDuelStart = 0x10;

  02afc	c6 85 b8 fe ff
	ff 10		 mov	 BYTE PTR _pMsgSend$234822[ebp+4], 16 ; 00000010H

; 1130 :     pMsgSend.h.size = sizeof(pMsgSend);

  02b03	c6 85 b5 fe ff
	ff 11		 mov	 BYTE PTR _pMsgSend$234822[ebp+1], 17 ; 00000011H

; 1131 :     DataSend(lpObj->m_Index, (BYTE*)&pMsgSend, pMsgSend.h.size);

  02b0a	0f b6 85 b5 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsgSend$234822[ebp+1]
  02b11	50		 push	 eax
  02b12	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsgSend$234822[ebp]
  02b18	51		 push	 ecx
  02b19	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02b1c	8b 02		 mov	 eax, DWORD PTR [edx]
  02b1e	50		 push	 eax
  02b1f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02b24	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1132 :     return;

  02b27	e9 d1 06 00 00	 jmp	 $LN37@RecvDuelRe
$LN19@RecvDuelRe:

; 1133 :   }
; 1134 : 
; 1135 :   if ( ( GetTickCount() - lpObj->m_PacketCheckTime ) < 300 )

  02b2c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02b32	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02b35	2b 81 8c 03 00
	00		 sub	 eax, DWORD PTR [ecx+908]
  02b3b	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  02b40	73 05		 jae	 SHORT $LN18@RecvDuelRe

; 1136 :   {
; 1137 :     return;

  02b42	e9 b6 06 00 00	 jmp	 $LN37@RecvDuelRe
$LN18@RecvDuelRe:

; 1138 :   }
; 1139 :   lpObj->m_PacketCheckTime = GetTickCount();

  02b47	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02b4d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02b50	89 81 8c 03 00
	00		 mov	 DWORD PTR [ecx+908], eax

; 1140 : 
; 1141 :   char szDuelName[MAX_ACCOUNT_LEN+1] = {0};

  02b56	c6 85 a8 fe ff
	ff 00		 mov	 BYTE PTR _szDuelName$[ebp], 0
  02b5d	33 c0		 xor	 eax, eax
  02b5f	89 85 a9 fe ff
	ff		 mov	 DWORD PTR _szDuelName$[ebp+1], eax
  02b65	89 85 ad fe ff
	ff		 mov	 DWORD PTR _szDuelName$[ebp+5], eax
  02b6b	66 89 85 b1 fe
	ff ff		 mov	 WORD PTR _szDuelName$[ebp+9], ax

; 1142 :   char szDuelName2[MAX_ACCOUNT_LEN+1] = {0};

  02b72	c6 85 9c fe ff
	ff 00		 mov	 BYTE PTR _szDuelName2$[ebp], 0
  02b79	33 c0		 xor	 eax, eax
  02b7b	89 85 9d fe ff
	ff		 mov	 DWORD PTR _szDuelName2$[ebp+1], eax
  02b81	89 85 a1 fe ff
	ff		 mov	 DWORD PTR _szDuelName2$[ebp+5], eax
  02b87	66 89 85 a5 fe
	ff ff		 mov	 WORD PTR _szDuelName2$[ebp+9], ax

; 1143 : 
; 1144 :   memcpy(szDuelName, gObj[iDuelIndex].Name, MAX_ACCOUNT_LEN);

  02b8e	6a 0a		 push	 10			; 0000000aH
  02b90	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02b93	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b99	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b9f	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  02ba3	52		 push	 edx
  02ba4	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _szDuelName$[ebp]
  02baa	50		 push	 eax
  02bab	e8 00 00 00 00	 call	 _memcpy
  02bb0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1145 :   szDuelName[MAX_ACCOUNT_LEN] = 0;

  02bb3	c6 85 b2 fe ff
	ff 00		 mov	 BYTE PTR _szDuelName$[ebp+10], 0

; 1146 : 
; 1147 :   memcpy(szDuelName2, lpMsg->szName, MAX_ACCOUNT_LEN);

  02bba	6a 0a		 push	 10			; 0000000aH
  02bbc	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  02bbf	83 c0 06	 add	 eax, 6
  02bc2	50		 push	 eax
  02bc3	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _szDuelName2$[ebp]
  02bc9	51		 push	 ecx
  02bca	e8 00 00 00 00	 call	 _memcpy
  02bcf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1148 :   szDuelName2[MAX_ACCOUNT_LEN] = 0;

  02bd2	c6 85 a6 fe ff
	ff 00		 mov	 BYTE PTR _szDuelName2$[ebp+10], 0

; 1149 : 
; 1150 :   if ( strcmp(szDuelName, szDuelName2) )

  02bd9	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szDuelName2$[ebp]
  02bdf	50		 push	 eax
  02be0	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _szDuelName$[ebp]
  02be6	51		 push	 ecx
  02be7	e8 00 00 00 00	 call	 _strcmp
  02bec	83 c4 08	 add	 esp, 8
  02bef	85 c0		 test	 eax, eax
  02bf1	74 25		 je	 SHORT $LN17@RecvDuelRe

; 1151 :   {
; 1152 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 162)), lpObj->m_Index, 1);

  02bf3	6a 01		 push	 1
  02bf5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02bf8	8b 08		 mov	 ecx, DWORD PTR [eax]
  02bfa	51		 push	 ecx
  02bfb	68 a2 04 00 00	 push	 1186			; 000004a2H
  02c00	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02c05	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02c0a	50		 push	 eax
  02c0b	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02c10	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1153 :     return;

  02c13	e9 e5 05 00 00	 jmp	 $LN37@RecvDuelRe
$LN17@RecvDuelRe:

; 1154 :   }
; 1155 : 
; 1156 :   if ( this->IsDuelEnable(iDuelIndex) == FALSE )

  02c18	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02c1b	50		 push	 eax
  02c1c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c1f	e8 00 00 00 00	 call	 ?IsDuelEnable@CDuelManager@@QAE_NH@Z ; CDuelManager::IsDuelEnable
  02c24	0f b6 c8	 movzx	 ecx, al
  02c27	85 c9		 test	 ecx, ecx
  02c29	75 25		 jne	 SHORT $LN16@RecvDuelRe

; 1157 :   {
; 1158 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 163)), lpObj->m_Index, 1);

  02c2b	6a 01		 push	 1
  02c2d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02c30	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c32	51		 push	 ecx
  02c33	68 a3 04 00 00	 push	 1187			; 000004a3H
  02c38	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02c3d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02c42	50		 push	 eax
  02c43	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02c48	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1159 :     return;

  02c4b	e9 ad 05 00 00	 jmp	 $LN37@RecvDuelRe
$LN16@RecvDuelRe:

; 1160 :   }
; 1161 : 
; 1162 :   if ( lpObj->lpGuild && lpObj->lpGuild->WarState == 1 )

  02c50	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02c53	83 b8 38 04 00
	00 00		 cmp	 DWORD PTR [eax+1080], 0
  02c5a	74 3a		 je	 SHORT $LN15@RecvDuelRe
  02c5c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02c5f	8b 88 38 04 00
	00		 mov	 ecx, DWORD PTR [eax+1080]
  02c65	0f b6 91 91 05
	00 00		 movzx	 edx, BYTE PTR [ecx+1425]
  02c6c	83 fa 01	 cmp	 edx, 1
  02c6f	75 25		 jne	 SHORT $LN15@RecvDuelRe

; 1163 :   {
; 1164 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 164)), lpObj->m_Index, 1);

  02c71	6a 01		 push	 1
  02c73	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02c76	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c78	51		 push	 ecx
  02c79	68 a4 04 00 00	 push	 1188			; 000004a4H
  02c7e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02c83	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02c88	50		 push	 eax
  02c89	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02c8e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1165 :     return;

  02c91	e9 67 05 00 00	 jmp	 $LN37@RecvDuelRe
$LN15@RecvDuelRe:

; 1166 :   }
; 1167 : 
; 1168 :   if ( gObj[iDuelIndex].lpGuild && gObj[iDuelIndex].lpGuild->WarState == 1 )

  02c96	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02c99	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02c9f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02ca5	83 bc 01 38 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1080], 0
  02cad	74 47		 je	 SHORT $LN14@RecvDuelRe
  02caf	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02cb2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02cb8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02cbe	8b 94 01 38 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1080]
  02cc5	0f b6 82 91 05
	00 00		 movzx	 eax, BYTE PTR [edx+1425]
  02ccc	83 f8 01	 cmp	 eax, 1
  02ccf	75 25		 jne	 SHORT $LN14@RecvDuelRe

; 1169 :   {
; 1170 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 165)), lpObj->m_Index, 1);

  02cd1	6a 01		 push	 1
  02cd3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02cd6	8b 08		 mov	 ecx, DWORD PTR [eax]
  02cd8	51		 push	 ecx
  02cd9	68 a5 04 00 00	 push	 1189			; 000004a5H
  02cde	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02ce3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02ce8	50		 push	 eax
  02ce9	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02cee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1171 :     return;

  02cf1	e9 07 05 00 00	 jmp	 $LN37@RecvDuelRe
$LN14@RecvDuelRe:

; 1172 :   }
; 1173 : 
; 1174 :   if ( gObjIsConnected(iDuelIndex) == FALSE )

  02cf6	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02cf9	50		 push	 eax
  02cfa	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  02cff	83 c4 04	 add	 esp, 4
  02d02	85 c0		 test	 eax, eax
  02d04	75 05		 jne	 SHORT $LN13@RecvDuelRe

; 1175 :     return;

  02d06	e9 f2 04 00 00	 jmp	 $LN37@RecvDuelRe
$LN13@RecvDuelRe:

; 1176 : 
; 1177 :   if ( gObj[iDuelIndex].Type == OBJ_MONSTER )

  02d0b	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02d0e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02d14	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02d1a	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  02d1f	83 fa 02	 cmp	 edx, 2
  02d22	75 05		 jne	 SHORT $LN12@RecvDuelRe

; 1178 :     return;

  02d24	e9 d4 04 00 00	 jmp	 $LN37@RecvDuelRe
$LN12@RecvDuelRe:

; 1179 : 
; 1180 :   if ( gObj[iDuelIndex].CloseCount >= 0 )

  02d29	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02d2c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02d32	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02d38	0f be 54 01 0a	 movsx	 edx, BYTE PTR [ecx+eax+10]
  02d3d	85 d2		 test	 edx, edx
  02d3f	7c 05		 jl	 SHORT $LN11@RecvDuelRe

; 1181 :     return;

  02d41	e9 b7 04 00 00	 jmp	 $LN37@RecvDuelRe
$LN11@RecvDuelRe:

; 1182 : 
; 1183 :   for (int n=0;n<MAX_SELF_DEFENSE;n++)

  02d46	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$234834[ebp], 0
  02d50	eb 0f		 jmp	 SHORT $LN10@RecvDuelRe
$LN9@RecvDuelRe:
  02d52	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _n$234834[ebp]
  02d58	83 c0 01	 add	 eax, 1
  02d5b	89 85 98 fe ff
	ff		 mov	 DWORD PTR _n$234834[ebp], eax
$LN10@RecvDuelRe:
  02d61	83 bd 98 fe ff
	ff 07		 cmp	 DWORD PTR _n$234834[ebp], 7
  02d68	7d 59		 jge	 SHORT $LN8@RecvDuelRe

; 1184 :   {
; 1185 :     if ( lpObj->SelfDefense[n] >= 0 || gObj[iDuelIndex].SelfDefense[n] >= 0 )

  02d6a	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _n$234834[ebp]
  02d70	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d73	83 bc 81 e4 03
	00 00 00	 cmp	 DWORD PTR [ecx+eax*4+996], 0
  02d7b	7d 1f		 jge	 SHORT $LN6@RecvDuelRe
  02d7d	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02d80	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02d86	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02d8c	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _n$234834[ebp]
  02d92	83 bc 88 e4 03
	00 00 00	 cmp	 DWORD PTR [eax+ecx*4+996], 0
  02d9a	7c 25		 jl	 SHORT $LN7@RecvDuelRe
$LN6@RecvDuelRe:

; 1186 :     {
; 1187 :       GCServerMsgStringSend(lMsg.Get(MSGGET(4, 189)), lpObj->m_Index, 1);

  02d9c	6a 01		 push	 1
  02d9e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02da1	8b 08		 mov	 ecx, DWORD PTR [eax]
  02da3	51		 push	 ecx
  02da4	68 bd 04 00 00	 push	 1213			; 000004bdH
  02da9	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02dae	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02db3	50		 push	 eax
  02db4	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02db9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1188 :       return;

  02dbc	e9 3c 04 00 00	 jmp	 $LN37@RecvDuelRe
$LN7@RecvDuelRe:

; 1189 :     }
; 1190 :   }

  02dc1	eb 8f		 jmp	 SHORT $LN9@RecvDuelRe
$LN8@RecvDuelRe:

; 1191 : 
; 1192 :   if ( lpObj->m_IfState.use > 0 )

  02dc3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02dc6	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  02dcc	83 e1 03	 and	 ecx, 3
  02dcf	76 25		 jbe	 SHORT $LN5@RecvDuelRe

; 1193 :   {
; 1194 :     GCServerMsgStringSend(lMsg.Get(MSGGET(4, 167)), lpObj->m_Index, 1);

  02dd1	6a 01		 push	 1
  02dd3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02dd6	8b 08		 mov	 ecx, DWORD PTR [eax]
  02dd8	51		 push	 ecx
  02dd9	68 a7 04 00 00	 push	 1191			; 000004a7H
  02dde	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02de3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02de8	50		 push	 eax
  02de9	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02dee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1195 :     return;

  02df1	e9 07 04 00 00	 jmp	 $LN37@RecvDuelRe
$LN5@RecvDuelRe:

; 1196 :   }
; 1197 : 
; 1198 :   if ( gObj[iDuelIndex].m_IfState.use > 0 )

  02df6	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02df9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02dff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02e05	8b 94 01 1c 0e
	00 00		 mov	 edx, DWORD PTR [ecx+eax+3612]
  02e0c	83 e2 03	 and	 edx, 3
  02e0f	76 50		 jbe	 SHORT $LN4@RecvDuelRe

; 1199 :   {
; 1200 :     wsprintf(szTempText, lMsg.Get(MSGGET(4, 168)), gObj[iDuelIndex].Name);

  02e11	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02e14	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02e1a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02e20	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  02e24	52		 push	 edx
  02e25	68 a8 04 00 00	 push	 1192			; 000004a8H
  02e2a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02e2f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02e34	50		 push	 eax
  02e35	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempText$[ebp]
  02e3b	50		 push	 eax
  02e3c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  02e42	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1201 :     GCServerMsgStringSend(szTempText, lpObj->m_Index, 1);

  02e45	6a 01		 push	 1
  02e47	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e4a	8b 08		 mov	 ecx, DWORD PTR [eax]
  02e4c	51		 push	 ecx
  02e4d	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _szTempText$[ebp]
  02e53	52		 push	 edx
  02e54	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02e59	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1202 :     return;

  02e5c	e9 9c 03 00 00	 jmp	 $LN37@RecvDuelRe
$LN4@RecvDuelRe:

; 1203 :   }
; 1204 : 
; 1205 :   if ( OBJMAX_RANGE(gObj[iDuelIndex].m_iDuelUserRequested) )

  02e61	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02e64	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02e6a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02e70	83 bc 01 b4 0e
	00 00 00	 cmp	 DWORD PTR [ecx+eax+3764], 0
  02e78	7d 0c		 jge	 SHORT $LN57@RecvDuelRe
  02e7a	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv461[ebp], 0
  02e84	eb 24		 jmp	 SHORT $LN58@RecvDuelRe
$LN57@RecvDuelRe:
  02e86	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  02e89	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  02e8f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02e94	33 c9		 xor	 ecx, ecx
  02e96	81 bc 10 b4 0e
	00 00 97 3a 00
	00		 cmp	 DWORD PTR [eax+edx+3764], 14999 ; 00003a97H
  02ea1	0f 9e c1	 setle	 cl
  02ea4	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv461[ebp], ecx
$LN58@RecvDuelRe:
  02eaa	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv461[ebp], 0
  02eb1	74 50		 je	 SHORT $LN3@RecvDuelRe

; 1206 :   {
; 1207 :     wsprintf(szTempText, lMsg.Get(MSGGET(4, 169)), gObj[iDuelIndex].Name);

  02eb3	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02eb6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02ebc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02ec2	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  02ec6	52		 push	 edx
  02ec7	68 a9 04 00 00	 push	 1193			; 000004a9H
  02ecc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02ed1	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02ed6	50		 push	 eax
  02ed7	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempText$[ebp]
  02edd	50		 push	 eax
  02ede	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  02ee4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1208 :     GCServerMsgStringSend(szTempText, lpObj->m_Index, 1);

  02ee7	6a 01		 push	 1
  02ee9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02eec	8b 08		 mov	 ecx, DWORD PTR [eax]
  02eee	51		 push	 ecx
  02eef	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _szTempText$[ebp]
  02ef5	52		 push	 edx
  02ef6	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02efb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1209 :     return;

  02efe	e9 fa 02 00 00	 jmp	 $LN37@RecvDuelRe
$LN3@RecvDuelRe:

; 1210 :   }
; 1211 : 
; 1212 :   if ( OBJMAX_RANGE(gObj[iDuelIndex].m_iDuelUserReserved) )

  02f03	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02f06	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02f0c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02f12	83 bc 01 b0 0e
	00 00 00	 cmp	 DWORD PTR [ecx+eax+3760], 0
  02f1a	7d 0c		 jge	 SHORT $LN59@RecvDuelRe
  02f1c	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv484[ebp], 0
  02f26	eb 24		 jmp	 SHORT $LN60@RecvDuelRe
$LN59@RecvDuelRe:
  02f28	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  02f2b	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  02f31	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02f36	33 c9		 xor	 ecx, ecx
  02f38	81 bc 10 b0 0e
	00 00 97 3a 00
	00		 cmp	 DWORD PTR [eax+edx+3760], 14999 ; 00003a97H
  02f43	0f 9e c1	 setle	 cl
  02f46	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv484[ebp], ecx
$LN60@RecvDuelRe:
  02f4c	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv484[ebp], 0
  02f53	74 50		 je	 SHORT $LN2@RecvDuelRe

; 1213 :   {
; 1214 :     wsprintf(szTempText, lMsg.Get(MSGGET(4, 170)), gObj[iDuelIndex].Name);

  02f55	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02f58	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02f5e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02f64	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  02f68	52		 push	 edx
  02f69	68 aa 04 00 00	 push	 1194			; 000004aaH
  02f6e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02f73	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02f78	50		 push	 eax
  02f79	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempText$[ebp]
  02f7f	50		 push	 eax
  02f80	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  02f86	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1215 :     GCServerMsgStringSend(szTempText, lpObj->m_Index, 1);

  02f89	6a 01		 push	 1
  02f8b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f8e	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f90	51		 push	 ecx
  02f91	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _szTempText$[ebp]
  02f97	52		 push	 edx
  02f98	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02f9d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1216 :     return;

  02fa0	e9 58 02 00 00	 jmp	 $LN37@RecvDuelRe
$LN2@RecvDuelRe:

; 1217 :   }
; 1218 : 
; 1219 :   if ( OBJMAX_RANGE(gObj[iDuelIndex].m_iDuelUser) )

  02fa5	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02fa8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02fae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02fb4	83 bc 01 b8 0e
	00 00 00	 cmp	 DWORD PTR [ecx+eax+3768], 0
  02fbc	7d 0c		 jge	 SHORT $LN61@RecvDuelRe
  02fbe	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv507[ebp], 0
  02fc8	eb 24		 jmp	 SHORT $LN62@RecvDuelRe
$LN61@RecvDuelRe:
  02fca	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  02fcd	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  02fd3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02fd8	33 c9		 xor	 ecx, ecx
  02fda	81 bc 10 b8 0e
	00 00 97 3a 00
	00		 cmp	 DWORD PTR [eax+edx+3768], 14999 ; 00003a97H
  02fe5	0f 9e c1	 setle	 cl
  02fe8	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv507[ebp], ecx
$LN62@RecvDuelRe:
  02fee	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv507[ebp], 0
  02ff5	74 50		 je	 SHORT $LN1@RecvDuelRe

; 1220 :   {
; 1221 :     wsprintf(szTempText, lMsg.Get(MSGGET(4, 171)), gObj[iDuelIndex].Name);

  02ff7	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  02ffa	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03006	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  0300a	52		 push	 edx
  0300b	68 ab 04 00 00	 push	 1195			; 000004abH
  03010	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  03015	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0301a	50		 push	 eax
  0301b	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempText$[ebp]
  03021	50		 push	 eax
  03022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  03028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1222 :     GCServerMsgStringSend(szTempText, lpObj->m_Index, 1);

  0302b	6a 01		 push	 1
  0302d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03030	8b 08		 mov	 ecx, DWORD PTR [eax]
  03032	51		 push	 ecx
  03033	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _szTempText$[ebp]
  03039	52		 push	 edx
  0303a	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0303f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1223 :     return;

  03042	e9 b6 01 00 00	 jmp	 $LN37@RecvDuelRe
$LN1@RecvDuelRe:

; 1224 :   }
; 1225 : 
; 1226 :   lpObj->m_iDuelUser = -1;

  03047	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0304a	c7 80 b8 0e 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3768], -1

; 1227 :   lpObj->m_iDuelUserReserved = iDuelIndex;

  03054	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03057	8b 4d f4	 mov	 ecx, DWORD PTR _iDuelIndex$[ebp]
  0305a	89 88 b0 0e 00
	00		 mov	 DWORD PTR [eax+3760], ecx

; 1228 :   gObj[iDuelIndex].m_iDuelUserRequested = lpObj->m_Index;

  03060	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  03063	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0306f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03072	8b 12		 mov	 edx, DWORD PTR [edx]
  03074	89 94 01 b4 0e
	00 00		 mov	 DWORD PTR [ecx+eax+3764], edx

; 1229 :   lpObj->m_iDuelRoom = iDuelRoom;

  0307b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0307e	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _iDuelRoom$[ebp]
  03084	89 88 b4 21 00
	00		 mov	 DWORD PTR [eax+8628], ecx

; 1230 :   gObj[iDuelIndex].m_iDuelRoom = iDuelRoom;

  0308a	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  0308d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03093	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03099	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _iDuelRoom$[ebp]
  0309f	89 94 01 b4 21
	00 00		 mov	 DWORD PTR [ecx+eax+8628], edx

; 1231 : 
; 1232 :   lpObj->m_DuelChar = true;

  030a6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  030a9	c6 80 b8 21 00
	00 01		 mov	 BYTE PTR [eax+8632], 1

; 1233 : 
; 1234 :   this->m_Rooms[iDuelRoom].lpObj01 = lpObj;

  030b0	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  030b6	6b c0 4c	 imul	 eax, 76			; 0000004cH
  030b9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  030bc	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  030bf	89 54 01 18	 mov	 DWORD PTR [ecx+eax+24], edx

; 1235 :   this->m_Rooms[iDuelRoom].lpObj02 = &gObj[iDuelIndex];

  030c3	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  030c6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  030cc	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  030d2	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _iDuelRoom$[ebp]
  030d8	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  030db	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  030de	89 44 0a 20	 mov	 DWORD PTR [edx+ecx+32], eax

; 1236 :   this->m_Rooms[iDuelRoom].bWaiting = TRUE;

  030e2	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  030e8	6b c0 4c	 imul	 eax, 76			; 0000004cH
  030eb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  030ee	c7 44 01 14 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 1

; 1237 : 
; 1238 :   PMSG_DUEL_QUESTION_START pMsg;
; 1239 : 
; 1240 :   pMsg.h.c = 0xC1;

  030f6	c6 85 88 fe ff
	ff c1		 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 1241 :   pMsg.h.headcode = 0xAA;

  030fd	c6 85 8a fe ff
	ff aa		 mov	 BYTE PTR _pMsg$[ebp+2], 170 ; 000000aaH

; 1242 :   pMsg.h.subcode = 0x02;

  03104	c6 85 8b fe ff
	ff 02		 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 1243 :   pMsg.h.size = sizeof(pMsg);

  0310b	c6 85 89 fe ff
	ff 10		 mov	 BYTE PTR _pMsg$[ebp+1], 16 ; 00000010H

; 1244 :   pMsg.NumberH = SET_NUMBERH(lpObj->m_Index);

  03112	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03115	8b 08		 mov	 ecx, DWORD PTR [eax]
  03117	c1 e9 08	 shr	 ecx, 8
  0311a	88 8d 8c fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+4], cl

; 1245 :   pMsg.NumberL = SET_NUMBERL(lpObj->m_Index);

  03120	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03123	8b 08		 mov	 ecx, DWORD PTR [eax]
  03125	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0312b	88 8d 8d fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], cl

; 1246 :   memcpy(pMsg.szName, lpObj->Name, sizeof(pMsg.szName));

  03131	6a 0a		 push	 10			; 0000000aH
  03133	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03136	83 c0 77	 add	 eax, 119		; 00000077H
  03139	50		 push	 eax
  0313a	8d 8d 8e fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+6]
  03140	51		 push	 ecx
  03141	e8 00 00 00 00	 call	 _memcpy
  03146	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1247 : 
; 1248 :   DataSend(iDuelIndex, (LPBYTE)&pMsg, pMsg.h.size);

  03149	0f b6 85 89 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  03150	50		 push	 eax
  03151	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  03157	51		 push	 ecx
  03158	8b 55 f4	 mov	 edx, DWORD PTR _iDuelIndex$[ebp]
  0315b	52		 push	 edx
  0315c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  03161	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1249 : 
; 1250 :   wsprintf(szTempText, lMsg.Get(MSGGET(4, 172)), gObj[iDuelIndex].Name);

  03164	8b 45 f4	 mov	 eax, DWORD PTR _iDuelIndex$[ebp]
  03167	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0316d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03173	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  03177	52		 push	 edx
  03178	68 ac 04 00 00	 push	 1196			; 000004acH
  0317d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  03182	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  03187	50		 push	 eax
  03188	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempText$[ebp]
  0318e	50		 push	 eax
  0318f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  03195	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1251 :   GCServerMsgStringSend(szTempText, lpObj->m_Index, 1);

  03198	6a 01		 push	 1
  0319a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0319d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0319f	51		 push	 ecx
  031a0	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _szTempText$[ebp]
  031a6	52		 push	 edx
  031a7	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  031ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1252 : 
; 1253 :   LogAddTD("[Duel Manager] [%s][%s] Requested to Start Duel to [%s][%s] on Room [%d]", lpObj->AccountID, lpObj->Name, gObj[iDuelIndex].AccountID, gObj[iDuelIndex].Name, iDuelRoom+1);

  031af	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _iDuelRoom$[ebp]
  031b5	83 c0 01	 add	 eax, 1
  031b8	50		 push	 eax
  031b9	8b 4d f4	 mov	 ecx, DWORD PTR _iDuelIndex$[ebp]
  031bc	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  031c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  031c8	8d 44 0a 77	 lea	 eax, DWORD PTR [edx+ecx+119]
  031cc	50		 push	 eax
  031cd	8b 4d f4	 mov	 ecx, DWORD PTR _iDuelIndex$[ebp]
  031d0	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  031d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  031dc	8d 44 0a 6c	 lea	 eax, DWORD PTR [edx+ecx+108]
  031e0	50		 push	 eax
  031e1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  031e4	83 c1 77	 add	 ecx, 119		; 00000077H
  031e7	51		 push	 ecx
  031e8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  031eb	83 c2 6c	 add	 edx, 108		; 0000006cH
  031ee	52		 push	 edx
  031ef	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@MOPGDAOH@?$FLDuel?5Manager?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Requeste@
  031f4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  031fa	83 c4 18	 add	 esp, 24			; 00000018H
$LN37@RecvDuelRe:

; 1254 : 
; 1255 : }

  031fd	5f		 pop	 edi
  031fe	5e		 pop	 esi
  031ff	5b		 pop	 ebx
  03200	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03203	33 cd		 xor	 ecx, ebp
  03205	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0320a	8b e5		 mov	 esp, ebp
  0320c	5d		 pop	 ebp
  0320d	c2 08 00	 ret	 8
?RecvDuelRequest@CDuelManager@@QAEXPAUOBJECTSTRUCT@@PAUPMSG_DUEL_REQUEST_START@@@Z ENDP ; CDuelManager::RecvDuelRequest
; Function compile flags: /Odtp /ZI
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?IsDuelEnable@CDuelManager@@QAE_NH@Z PROC		; CDuelManager::IsDuelEnable
; _this$ = ecx

; 1258 : {

  03210	55		 push	 ebp
  03211	8b ec		 mov	 ebp, esp
  03213	83 ec 48	 sub	 esp, 72			; 00000048H
  03216	53		 push	 ebx
  03217	56		 push	 esi
  03218	57		 push	 edi
  03219	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1259 : 
; 1260 :   if ( OBJMAX_RANGE(aIndex ) == FALSE)

  0321c	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  03220	7d 09		 jge	 SHORT $LN6@IsDuelEnab
  03222	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  03229	eb 0f		 jmp	 SHORT $LN7@IsDuelEnab
$LN6@IsDuelEnab:
  0322b	33 c0		 xor	 eax, eax
  0322d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  03234	0f 9e c0	 setle	 al
  03237	89 45 b8	 mov	 DWORD PTR tv67[ebp], eax
$LN7@IsDuelEnab:
  0323a	83 7d b8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0323e	75 04		 jne	 SHORT $LN3@IsDuelEnab

; 1261 :   {
; 1262 :     return false;

  03240	32 c0		 xor	 al, al
  03242	eb 32		 jmp	 SHORT $LN4@IsDuelEnab
$LN3@IsDuelEnab:

; 1263 :   }
; 1264 : 
; 1265 :   if ( gObjIsConnected(aIndex) == TRUE )

  03244	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03247	50		 push	 eax
  03248	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0324d	83 c4 04	 add	 esp, 4
  03250	83 f8 01	 cmp	 eax, 1
  03253	75 1f		 jne	 SHORT $LN2@IsDuelEnab

; 1266 :   {
; 1267 :     if ( ( gObj[aIndex].m_Option & 2 ) == 2 )

  03255	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03258	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0325e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03264	8b 94 01 8c 0e
	00 00		 mov	 edx, DWORD PTR [ecx+eax+3724]
  0326b	83 e2 02	 and	 edx, 2
  0326e	74 04		 je	 SHORT $LN2@IsDuelEnab

; 1268 :     {
; 1269 :       return true;

  03270	b0 01		 mov	 al, 1
  03272	eb 02		 jmp	 SHORT $LN4@IsDuelEnab
$LN2@IsDuelEnab:

; 1270 :     }
; 1271 :   }
; 1272 : 
; 1273 :   return false;

  03274	32 c0		 xor	 al, al
$LN4@IsDuelEnab:

; 1274 : 
; 1275 : }

  03276	5f		 pop	 edi
  03277	5e		 pop	 esi
  03278	5b		 pop	 ebx
  03279	8b e5		 mov	 esp, ebp
  0327b	5d		 pop	 ebp
  0327c	c2 04 00	 ret	 4
?IsDuelEnable@CDuelManager@@QAE_NH@Z ENDP		; CDuelManager::IsDuelEnable
_TEXT	ENDS
PUBLIC	?SetDuelOption@CDuelManager@@QAEXHH@Z		; CDuelManager::SetDuelOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_bState$ = 12						; size = 4
?SetDuelOption@CDuelManager@@QAEXHH@Z PROC		; CDuelManager::SetDuelOption
; _this$ = ecx

; 1278 : {

  03280	55		 push	 ebp
  03281	8b ec		 mov	 ebp, esp
  03283	83 ec 44	 sub	 esp, 68			; 00000044H
  03286	53		 push	 ebx
  03287	56		 push	 esi
  03288	57		 push	 edi
  03289	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1279 :   if ( gObjIsConnected(lpObj) == TRUE )

  0328c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0328f	50		 push	 eax
  03290	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03295	83 c4 04	 add	 esp, 4
  03298	83 f8 01	 cmp	 eax, 1
  0329b	75 51		 jne	 SHORT $LN4@SetDuelOpt

; 1280 :   {
; 1281 :     if ( bState == 0 )

  0329d	83 7d 0c 00	 cmp	 DWORD PTR _bState$[ebp], 0
  032a1	75 1c		 jne	 SHORT $LN2@SetDuelOpt

; 1282 :     {
; 1283 :       gObj[lpObj].m_Option = 0;

  032a3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  032a6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  032ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  032b2	c7 84 01 8c 0e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+3724], 0

; 1284 :     }
; 1285 :     else

  032bd	eb 2f		 jmp	 SHORT $LN4@SetDuelOpt
$LN2@SetDuelOpt:

; 1286 :     {
; 1287 :       gObj[lpObj].m_Option |= 2;

  032bf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  032c2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  032c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  032ce	8b 94 01 8c 0e
	00 00		 mov	 edx, DWORD PTR [ecx+eax+3724]
  032d5	83 ca 02	 or	 edx, 2
  032d8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  032db	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  032e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  032e7	89 94 01 8c 0e
	00 00		 mov	 DWORD PTR [ecx+eax+3724], edx
$LN4@SetDuelOpt:

; 1288 :     }
; 1289 :   }
; 1290 : }

  032ee	5f		 pop	 edi
  032ef	5e		 pop	 esi
  032f0	5b		 pop	 ebx
  032f1	8b e5		 mov	 esp, ebp
  032f3	5d		 pop	 ebp
  032f4	c2 08 00	 ret	 8
?SetDuelOption@CDuelManager@@QAEXHH@Z ENDP		; CDuelManager::SetDuelOption
_TEXT	ENDS
PUBLIC	?IsOnDuel@CDuelManager@@QAE_NH@Z		; CDuelManager::IsOnDuel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$234872 = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?IsOnDuel@CDuelManager@@QAE_NH@Z PROC			; CDuelManager::IsOnDuel
; _this$ = ecx

; 1293 : { 

  03300	55		 push	 ebp
  03301	8b ec		 mov	 ebp, esp
  03303	83 ec 48	 sub	 esp, 72			; 00000048H
  03306	53		 push	 ebx
  03307	56		 push	 esi
  03308	57		 push	 edi
  03309	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1294 : 
; 1295 :   for(int i = 0; i < MAX_DUEL_ROOMS; i++)

  0330c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$234872[ebp], 0
  03313	eb 09		 jmp	 SHORT $LN5@IsOnDuel
$LN4@IsOnDuel:
  03315	8b 45 f8	 mov	 eax, DWORD PTR _i$234872[ebp]
  03318	83 c0 01	 add	 eax, 1
  0331b	89 45 f8	 mov	 DWORD PTR _i$234872[ebp], eax
$LN5@IsOnDuel:
  0331e	83 7d f8 04	 cmp	 DWORD PTR _i$234872[ebp], 4
  03322	7d 46		 jge	 SHORT $LN3@IsOnDuel

; 1296 :   {
; 1297 :     if(this->m_Rooms[i].lpObj01 == &gObj[lpObj])

  03324	8b 45 f8	 mov	 eax, DWORD PTR _i$234872[ebp]
  03327	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0332a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0332d	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  03333	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03339	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0333c	39 4c 02 18	 cmp	 DWORD PTR [edx+eax+24], ecx
  03340	75 04		 jne	 SHORT $LN2@IsOnDuel

; 1298 :     {
; 1299 :       return true;

  03342	b0 01		 mov	 al, 1
  03344	eb 26		 jmp	 SHORT $LN6@IsOnDuel
$LN2@IsOnDuel:

; 1300 :     }
; 1301 :     if(this->m_Rooms[i].lpObj02 == &gObj[lpObj]) 

  03346	8b 45 f8	 mov	 eax, DWORD PTR _i$234872[ebp]
  03349	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0334c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0334f	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  03355	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0335b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0335e	39 4c 02 20	 cmp	 DWORD PTR [edx+eax+32], ecx
  03362	75 04		 jne	 SHORT $LN1@IsOnDuel

; 1302 :     {
; 1303 :       return true;

  03364	b0 01		 mov	 al, 1
  03366	eb 04		 jmp	 SHORT $LN6@IsOnDuel
$LN1@IsOnDuel:

; 1304 :     }
; 1305 :   }

  03368	eb ab		 jmp	 SHORT $LN4@IsOnDuel
$LN3@IsOnDuel:

; 1306 : 
; 1307 :   return false;

  0336a	32 c0		 xor	 al, al
$LN6@IsOnDuel:

; 1308 : 
; 1309 : }

  0336c	5f		 pop	 edi
  0336d	5e		 pop	 esi
  0336e	5b		 pop	 ebx
  0336f	8b e5		 mov	 esp, ebp
  03371	5d		 pop	 ebp
  03372	c2 04 00	 ret	 4
?IsOnDuel@CDuelManager@@QAE_NH@Z ENDP			; CDuelManager::IsOnDuel
; Function compile flags: /Odtp /ZI
_i$234883 = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpObj2$ = 12						; size = 4
?IsOnDuel@CDuelManager@@QAE_NHH@Z PROC			; CDuelManager::IsOnDuel
; _this$ = ecx

; 1312 : {

  03380	55		 push	 ebp
  03381	8b ec		 mov	 ebp, esp
  03383	83 ec 48	 sub	 esp, 72			; 00000048H
  03386	53		 push	 ebx
  03387	56		 push	 esi
  03388	57		 push	 edi
  03389	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1313 : 
; 1314 :   for(int i = 0; i < MAX_DUEL_ROOMS; i++)

  0338c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$234883[ebp], 0
  03393	eb 09		 jmp	 SHORT $LN6@IsOnDuel@2
$LN5@IsOnDuel@2:
  03395	8b 45 f8	 mov	 eax, DWORD PTR _i$234883[ebp]
  03398	83 c0 01	 add	 eax, 1
  0339b	89 45 f8	 mov	 DWORD PTR _i$234883[ebp], eax
$LN6@IsOnDuel@2:
  0339e	83 7d f8 04	 cmp	 DWORD PTR _i$234883[ebp], 4
  033a2	0f 8d 99 00 00
	00		 jge	 $LN4@IsOnDuel@2

; 1315 :   {
; 1316 : 
; 1317 :     if(this->m_Rooms[i].bFree == FALSE)

  033a8	8b 45 f8	 mov	 eax, DWORD PTR _i$234883[ebp]
  033ab	6b c0 4c	 imul	 eax, 76			; 0000004cH
  033ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  033b1	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  033b6	0f 85 80 00 00
	00		 jne	 $LN3@IsOnDuel@2

; 1318 :     {
; 1319 : 
; 1320 :       if(this->m_Rooms[i].lpObj01 == &gObj[lpObj] && 
; 1321 :         this->m_Rooms[i].lpObj02 == &gObj[lpObj2]) 

  033bc	8b 45 f8	 mov	 eax, DWORD PTR _i$234883[ebp]
  033bf	6b c0 4c	 imul	 eax, 76			; 0000004cH
  033c2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  033c5	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  033cb	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  033d1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  033d4	39 4c 02 18	 cmp	 DWORD PTR [edx+eax+24], ecx
  033d8	75 22		 jne	 SHORT $LN2@IsOnDuel@2
  033da	8b 45 f8	 mov	 eax, DWORD PTR _i$234883[ebp]
  033dd	6b c0 4c	 imul	 eax, 76			; 0000004cH
  033e0	8b 4d 0c	 mov	 ecx, DWORD PTR _lpObj2$[ebp]
  033e3	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  033e9	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  033ef	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  033f2	39 4c 02 20	 cmp	 DWORD PTR [edx+eax+32], ecx
  033f6	75 04		 jne	 SHORT $LN2@IsOnDuel@2

; 1322 :       {
; 1323 :         return true;

  033f8	b0 01		 mov	 al, 1
  033fa	eb 47		 jmp	 SHORT $LN7@IsOnDuel@2
$LN2@IsOnDuel@2:

; 1324 :       }
; 1325 : 
; 1326 :       if(this->m_Rooms[i].lpObj01 == &gObj[lpObj2] && 
; 1327 :         this->m_Rooms[i].lpObj02 == &gObj[lpObj]) 

  033fc	8b 45 f8	 mov	 eax, DWORD PTR _i$234883[ebp]
  033ff	6b c0 4c	 imul	 eax, 76			; 0000004cH
  03402	8b 4d 0c	 mov	 ecx, DWORD PTR _lpObj2$[ebp]
  03405	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0340b	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03411	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03414	39 4c 02 18	 cmp	 DWORD PTR [edx+eax+24], ecx
  03418	75 22		 jne	 SHORT $LN3@IsOnDuel@2
  0341a	8b 45 f8	 mov	 eax, DWORD PTR _i$234883[ebp]
  0341d	6b c0 4c	 imul	 eax, 76			; 0000004cH
  03420	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03423	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  03429	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0342f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03432	39 4c 02 20	 cmp	 DWORD PTR [edx+eax+32], ecx
  03436	75 04		 jne	 SHORT $LN3@IsOnDuel@2

; 1328 :       {
; 1329 :         return true;

  03438	b0 01		 mov	 al, 1
  0343a	eb 07		 jmp	 SHORT $LN7@IsOnDuel@2
$LN3@IsOnDuel@2:

; 1330 :       }
; 1331 : 
; 1332 :     }
; 1333 : 
; 1334 :   }

  0343c	e9 54 ff ff ff	 jmp	 $LN5@IsOnDuel@2
$LN4@IsOnDuel@2:

; 1335 : 
; 1336 :   return false;

  03441	32 c0		 xor	 al, al
$LN7@IsOnDuel@2:

; 1337 : 
; 1338 : }

  03443	5f		 pop	 edi
  03444	5e		 pop	 esi
  03445	5b		 pop	 ebx
  03446	8b e5		 mov	 esp, ebp
  03448	5d		 pop	 ebp
  03449	c2 08 00	 ret	 8
?IsOnDuel@CDuelManager@@QAE_NHH@Z ENDP			; CDuelManager::IsOnDuel
_TEXT	ENDS
EXTRN	?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolCreate
EXTRN	?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolDestroy
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpUser$ = 8						; size = 4
_bUse$ = 12						; size = 4
?SetBuff@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z PROC	; CDuelManager::SetBuff
; _this$ = ecx

; 1341 : {

  03450	55		 push	 ebp
  03451	8b ec		 mov	 ebp, esp
  03453	83 ec 44	 sub	 esp, 68			; 00000044H
  03456	53		 push	 ebx
  03457	56		 push	 esi
  03458	57		 push	 edi
  03459	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1342 : 	if( bUse )

  0345c	83 7d 0c 00	 cmp	 DWORD PTR _bUse$[ebp], 0
  03460	74 3e		 je	 SHORT $LN1@SetBuff

; 1343 : 	{
; 1344 : 		gObjApplyBuffEffectDuration(lpUser, 18, 0, 0, 0, 0, -10);

  03462	6a f6		 push	 -10			; fffffff6H
  03464	6a 00		 push	 0
  03466	6a 00		 push	 0
  03468	6a 00		 push	 0
  0346a	6a 00		 push	 0
  0346c	6a 12		 push	 18			; 00000012H
  0346e	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  03471	50		 push	 eax
  03472	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  03477	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1345 : 		gObjApplyBuffEffectDuration(lpUser, 98, 0, 0, 0, 0, -10);

  0347a	6a f6		 push	 -10			; fffffff6H
  0347c	6a 00		 push	 0
  0347e	6a 00		 push	 0
  03480	6a 00		 push	 0
  03482	6a 00		 push	 0
  03484	6a 62		 push	 98			; 00000062H
  03486	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  03489	50		 push	 eax
  0348a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0348f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1346 : 		gObjViewportListProtocolDestroy(lpUser);

  03492	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  03495	50		 push	 eax
  03496	e8 00 00 00 00	 call	 ?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolDestroy
  0349b	83 c4 04	 add	 esp, 4

; 1347 : 		return;

  0349e	eb 28		 jmp	 SHORT $LN2@SetBuff
$LN1@SetBuff:

; 1348 : 	}
; 1349 : 
; 1350 : 	gObjRemoveBuffEffect(lpUser, 18);

  034a0	6a 12		 push	 18			; 00000012H
  034a2	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  034a5	50		 push	 eax
  034a6	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  034ab	83 c4 08	 add	 esp, 8

; 1351 : 	gObjRemoveBuffEffect(lpUser, 98);

  034ae	6a 62		 push	 98			; 00000062H
  034b0	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  034b3	50		 push	 eax
  034b4	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  034b9	83 c4 08	 add	 esp, 8

; 1352 : 	gObjViewportListProtocolCreate(lpUser);

  034bc	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  034bf	50		 push	 eax
  034c0	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate
  034c5	83 c4 04	 add	 esp, 4
$LN2@SetBuff:

; 1353 : }

  034c8	5f		 pop	 edi
  034c9	5e		 pop	 esi
  034ca	5b		 pop	 ebx
  034cb	8b e5		 mov	 esp, ebp
  034cd	5d		 pop	 ebp
  034ce	c2 08 00	 ret	 8
?SetBuff@CDuelManager@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP	; CDuelManager::SetBuff
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_DuelManager@@YAXXZ
text$yc	SEGMENT
??__Eg_DuelManager@@YAXXZ PROC				; `dynamic initializer for 'g_DuelManager'', COMDAT

; 35   : CDuelManager  g_DuelManager;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DuelManager@@3VCDuelManager@@A ; g_DuelManager
  0000e	e8 00 00 00 00	 call	 ??0CDuelManager@@QAE@XZ	; CDuelManager::CDuelManager
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_DuelManager@@YAXXZ ; `dynamic atexit destructor for 'g_DuelManager''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_DuelManager@@YAXXZ ENDP				; `dynamic initializer for 'g_DuelManager''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_DuelManager@@YAXXZ
text$yd	SEGMENT
??__Fg_DuelManager@@YAXXZ PROC				; `dynamic atexit destructor for 'g_DuelManager'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DuelManager@@3VCDuelManager@@A ; g_DuelManager
  0000e	e8 00 00 00 00	 call	 ??1CDuelManager@@QAE@XZ	; CDuelManager::~CDuelManager
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_DuelManager@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_DuelManager''
text$yd	ENDS
PUBLIC	?g_DuelManager@@3VCDuelManager@@A		; g_DuelManager
_BSS	SEGMENT
?g_DuelManager@@3VCDuelManager@@A DB 0140H DUP (?)	; g_DuelManager
_BSS	ENDS
CRT$XCU	SEGMENT
_g_DuelManager$initializer$ DD FLAT:??__Eg_DuelManager@@YAXXZ
CRT$XCU	ENDS
END
