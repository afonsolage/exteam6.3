; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\LargeRand.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?randomMT@CLargeRand@@QAEKXZ			; CLargeRand::randomMT
PUBLIC	?GetLargeRand@@YAKXZ				; GetLargeRand
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\largerand.cpp
_TEXT	SEGMENT
?GetLargeRand@@YAKXZ PROC				; GetLargeRand

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9    : 	return g_LargLand.randomMT();

  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LargLand@@3VCLargeRand@@A ; g_LargLand
  0000e	e8 00 00 00 00	 call	 ?randomMT@CLargeRand@@QAEKXZ ; CLargeRand::randomMT

; 10   : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetLargeRand@@YAKXZ ENDP				; GetLargeRand
_TEXT	ENDS
PUBLIC	?reloadMT@CLargeRand@@QAEKXZ			; CLargeRand::reloadMT
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\largerand.h
;	COMDAT ?randomMT@CLargeRand@@QAEKXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_this$ = -4						; size = 4
?randomMT@CLargeRand@@QAEKXZ PROC			; CLargeRand::randomMT, COMDAT
; _this$ = ecx

; 21   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 		this->left--;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 cc 09 00
	00		 mov	 ecx, DWORD PTR [eax+2508]
  00015	83 e9 01	 sub	 ecx, 1
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	89 8a cc 09 00
	00		 mov	 DWORD PTR [edx+2508], ecx

; 23   : 
; 24   : 		if ( this->left< 0 )

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 b8 cc 09 00
	00 00		 cmp	 DWORD PTR [eax+2508], 0
  0002b	7d 0a		 jge	 SHORT $LN1@randomMT

; 25   : 		{
; 26   : 			return this->reloadMT();

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?reloadMT@CLargeRand@@QAEKXZ ; CLargeRand::reloadMT
  00035	eb 5a		 jmp	 SHORT $LN2@randomMT
$LN1@randomMT:

; 27   : 		}
; 28   : 
; 29   : 		DWORD y = *next;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 88 c8 09 00
	00		 mov	 ecx, DWORD PTR [eax+2504]
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	89 55 f8	 mov	 DWORD PTR _y$[ebp], edx

; 30   : 		next++;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 88 c8 09 00
	00		 mov	 ecx, DWORD PTR [eax+2504]
  0004e	83 c1 04	 add	 ecx, 4
  00051	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00054	89 8a c8 09 00
	00		 mov	 DWORD PTR [edx+2504], ecx

; 31   : 		y ^= ( (DWORD)y >> (DWORD)11 );

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0005d	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00060	33 45 f8	 xor	 eax, DWORD PTR _y$[ebp]
  00063	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 32   : 		y ^= ( y << 7 ) & 2636928640;

  00066	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00069	c1 e0 07	 shl	 eax, 7
  0006c	25 80 56 2c 9d	 and	 eax, -1658038656	; 9d2c5680H
  00071	33 45 f8	 xor	 eax, DWORD PTR _y$[ebp]
  00074	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 33   : 		y ^= ( y << 15 ) & 4022730752;

  00077	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0007a	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  0007d	25 00 00 c6 ef	 and	 eax, -272236544		; efc60000H
  00082	33 45 f8	 xor	 eax, DWORD PTR _y$[ebp]
  00085	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 34   : 
; 35   : 		return y ^ ( y >> 18 );

  00088	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0008b	c1 e8 12	 shr	 eax, 18			; 00000012H
  0008e	33 45 f8	 xor	 eax, DWORD PTR _y$[ebp]
$LN2@randomMT:

; 36   : 	};

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?randomMT@CLargeRand@@QAEKXZ ENDP			; CLargeRand::randomMT
_TEXT	ENDS
PUBLIC	??_7CLargeRand@@6B@				; CLargeRand::`vftable'
PUBLIC	??0CLargeRand@@QAE@XZ				; CLargeRand::CLargeRand
PUBLIC	??_R4CLargeRand@@6B@				; CLargeRand::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLargeRand@@@8				; CLargeRand `RTTI Type Descriptor'
PUBLIC	??_R3CLargeRand@@8				; CLargeRand::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLargeRand@@8				; CLargeRand::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLargeRand@@8			; CLargeRand::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECLargeRand@@UAEPAXI@Z:PROC			; CLargeRand::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CLargeRand@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\largerand.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CLargeRand@@8 DD FLAT:??_R0?AVCLargeRand@@@8 ; CLargeRand::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLargeRand@@8
rdata$r	ENDS
;	COMDAT ??_R2CLargeRand@@8
rdata$r	SEGMENT
??_R2CLargeRand@@8 DD FLAT:??_R1A@?0A@EA@CLargeRand@@8	; CLargeRand::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CLargeRand@@8
rdata$r	SEGMENT
??_R3CLargeRand@@8 DD 00H				; CLargeRand::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CLargeRand@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLargeRand@@@8
_DATA	SEGMENT
??_R0?AVCLargeRand@@@8 DD FLAT:??_7type_info@@6B@	; CLargeRand `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLargeRand@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLargeRand@@6B@
rdata$r	SEGMENT
??_R4CLargeRand@@6B@ DD 00H				; CLargeRand::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLargeRand@@@8
	DD	FLAT:??_R3CLargeRand@@8
rdata$r	ENDS
;	COMDAT ??_7CLargeRand@@6B@
CONST	SEGMENT
??_7CLargeRand@@6B@ DD FLAT:??_R4CLargeRand@@6B@	; CLargeRand::`vftable'
	DD	FLAT:??_ECLargeRand@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLargeRand@@QAE@XZ PROC				; CLargeRand::CLargeRand
; _this$ = ecx

; 13   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CLargeRand@@6B@

; 14   : 	this->left = -1;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 80 cc 09 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+2508], -1

; 15   : }

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??0CLargeRand@@QAE@XZ ENDP				; CLargeRand::CLargeRand
_TEXT	ENDS
PUBLIC	??1CLargeRand@@UAE@XZ				; CLargeRand::~CLargeRand
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCLargeRand@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLargeRand@@UAEPAXI@Z PROC				; CLargeRand::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CLargeRand@@UAE@XZ	; CLargeRand::~CLargeRand
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCLargeRand@@UAEPAXI@Z ENDP				; CLargeRand::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLargeRand@@UAE@XZ PROC				; CLargeRand::~CLargeRand
; _this$ = ecx

; 18   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 44	 sub	 esp, 68			; 00000044H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CLargeRand@@6B@

; 19   : 	return;
; 20   : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??1CLargeRand@@UAE@XZ ENDP				; CLargeRand::~CLargeRand
_TEXT	ENDS
PUBLIC	?seedMT@CLargeRand@@QAEXK@Z			; CLargeRand::seedMT
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_j$204449 = -16						; size = 4
_s$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
_seed$ = 8						; size = 4
?seedMT@CLargeRand@@QAEXK@Z PROC			; CLargeRand::seedMT
; _this$ = ecx

; 23   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 50	 sub	 esp, 80			; 00000050H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	DWORD x = seed | 1;

  0007c	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]
  0007f	83 c8 01	 or	 eax, 1
  00082	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax

; 25   : 	DWORD * s = this->state;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	83 c0 04	 add	 eax, 4
  0008b	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 26   : 	this->left = 0;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00091	c7 80 cc 09 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+2508], 0

; 27   : 	*s = x;

  0009b	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  0009e	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  000a1	89 08		 mov	 DWORD PTR [eax], ecx

; 28   : 	s++;

  000a3	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  000a6	83 c0 04	 add	 eax, 4
  000a9	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 29   : 
; 30   : 	for ( int j = MAX_LARGE_RAND_STATE-1 ; --j != 0 ;  x *= 69069, *s = x, s++);

  000ac	c7 45 f0 70 02
	00 00		 mov	 DWORD PTR _j$204449[ebp], 624 ; 00000270H
  000b3	eb 1d		 jmp	 SHORT $LN3@seedMT
$LN2@seedMT:
  000b5	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  000b8	69 c0 cd 0d 01
	00		 imul	 eax, 69069		; 00010dcdH
  000be	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  000c1	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  000c4	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  000c7	89 11		 mov	 DWORD PTR [ecx], edx
  000c9	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  000cc	83 c0 04	 add	 eax, 4
  000cf	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax
$LN3@seedMT:
  000d2	8b 45 f0	 mov	 eax, DWORD PTR _j$204449[ebp]
  000d5	83 e8 01	 sub	 eax, 1
  000d8	89 45 f0	 mov	 DWORD PTR _j$204449[ebp], eax
  000db	74 02		 je	 SHORT $LN4@seedMT
  000dd	eb d6		 jmp	 SHORT $LN2@seedMT
$LN4@seedMT:

; 31   : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 04 00	 ret	 4
?seedMT@CLargeRand@@QAEXK@Z ENDP			; CLargeRand::seedMT
; Function compile flags: /Odtp /ZI
_j$204466 = -32					; size = 4
_j$204462 = -28						; size = 4
_s1$ = -24						; size = 4
_s0$ = -20						; size = 4
_pM$ = -16						; size = 4
_p2$ = -12						; size = 4
_p0$ = -8						; size = 4
_this$ = -4						; size = 4
?reloadMT@CLargeRand@@QAEKXZ PROC			; CLargeRand::reloadMT
; _this$ = ecx

; 34   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	83 ec 60	 sub	 esp, 96			; 00000060H
  000f6	53		 push	 ebx
  000f7	56		 push	 esi
  000f8	57		 push	 edi
  000f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	DWORD * p0 = this->state;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	83 c0 04	 add	 eax, 4
  00102	89 45 f8	 mov	 DWORD PTR _p0$[ebp], eax

; 36   : 	DWORD * p2 = &this->state[2];

  00105	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00108	83 c0 0c	 add	 eax, 12			; 0000000cH
  0010b	89 45 f4	 mov	 DWORD PTR _p2$[ebp], eax

; 37   : 	DWORD * pM = &this->state[397];

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00111	05 38 06 00 00	 add	 eax, 1592		; 00000638H
  00116	89 45 f0	 mov	 DWORD PTR _pM$[ebp], eax

; 38   : 
; 39   : 	if ( this->left < -1 )

  00119	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011c	83 b8 cc 09 00
	00 ff		 cmp	 DWORD PTR [eax+2508], -1
  00123	7d 0d		 jge	 SHORT $LN7@reloadMT

; 40   : 		this->seedMT(0x1105);

  00125	68 05 11 00 00	 push	 4357			; 00001105H
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	e8 00 00 00 00	 call	 ?seedMT@CLargeRand@@QAEXK@Z ; CLargeRand::seedMT
$LN7@reloadMT:

; 41   : 
; 42   : 	this->left = MAX_LARGE_RAND_STATE-2;

  00132	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00135	c7 80 cc 09 00
	00 6f 02 00 00	 mov	 DWORD PTR [eax+2508], 623 ; 0000026fH

; 43   : 	this->next = &this->state[1];

  0013f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00142	83 c0 08	 add	 eax, 8
  00145	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	89 81 c8 09 00
	00		 mov	 DWORD PTR [ecx+2504], eax

; 44   : 	DWORD s0 = this->state[0];	

  0014e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00151	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00154	89 4d ec	 mov	 DWORD PTR _s0$[ebp], ecx

; 45   : 	DWORD s1 = this->state[1];

  00157	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0015d	89 4d e8	 mov	 DWORD PTR _s1$[ebp], ecx

; 46   : 
; 47   : 	for ( int j= 228; --j != 0 ; s0 = s1, s1 = *p2, p2++)

  00160	c7 45 e4 e4 00
	00 00		 mov	 DWORD PTR _j$204462[ebp], 228 ; 000000e4H
  00167	eb 17		 jmp	 SHORT $LN6@reloadMT
$LN5@reloadMT:
  00169	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  0016c	89 45 ec	 mov	 DWORD PTR _s0$[ebp], eax
  0016f	8b 4d f4	 mov	 ecx, DWORD PTR _p2$[ebp]
  00172	8b 11		 mov	 edx, DWORD PTR [ecx]
  00174	89 55 e8	 mov	 DWORD PTR _s1$[ebp], edx
  00177	8b 45 f4	 mov	 eax, DWORD PTR _p2$[ebp]
  0017a	83 c0 04	 add	 eax, 4
  0017d	89 45 f4	 mov	 DWORD PTR _p2$[ebp], eax
$LN6@reloadMT:
  00180	8b 45 e4	 mov	 eax, DWORD PTR _j$204462[ebp]
  00183	83 e8 01	 sub	 eax, 1
  00186	89 45 e4	 mov	 DWORD PTR _j$204462[ebp], eax
  00189	74 45		 je	 SHORT $LN4@reloadMT

; 48   : 	{
; 49   : 		*p0++ = (*pM++ ^ (((s0 & 0x80000000) | (s1 & 0x7FFFFFFF)) >> 1)) ^ (((s1&1!=0)?-1:0)&0x9908B0DF);

  0018b	8b 45 ec	 mov	 eax, DWORD PTR _s0$[ebp]
  0018e	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00193	8b 4d e8	 mov	 ecx, DWORD PTR _s1$[ebp]
  00196	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0019c	0b c1		 or	 eax, ecx
  0019e	d1 e8		 shr	 eax, 1
  001a0	8b 55 f0	 mov	 edx, DWORD PTR _pM$[ebp]
  001a3	33 02		 xor	 eax, DWORD PTR [edx]
  001a5	8b 4d e8	 mov	 ecx, DWORD PTR _s1$[ebp]
  001a8	83 e1 01	 and	 ecx, 1
  001ab	f7 d9		 neg	 ecx
  001ad	1b c9		 sbb	 ecx, ecx
  001af	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  001b5	33 c1		 xor	 eax, ecx
  001b7	8b 55 f8	 mov	 edx, DWORD PTR _p0$[ebp]
  001ba	89 02		 mov	 DWORD PTR [edx], eax
  001bc	8b 45 f8	 mov	 eax, DWORD PTR _p0$[ebp]
  001bf	83 c0 04	 add	 eax, 4
  001c2	89 45 f8	 mov	 DWORD PTR _p0$[ebp], eax
  001c5	8b 4d f0	 mov	 ecx, DWORD PTR _pM$[ebp]
  001c8	83 c1 04	 add	 ecx, 4
  001cb	89 4d f0	 mov	 DWORD PTR _pM$[ebp], ecx

; 50   : 	}

  001ce	eb 99		 jmp	 SHORT $LN5@reloadMT
$LN4@reloadMT:

; 51   : 
; 52   : 	pM = this->state;

  001d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d3	83 c0 04	 add	 eax, 4
  001d6	89 45 f0	 mov	 DWORD PTR _pM$[ebp], eax

; 53   : 
; 54   : 	for(int j=0x18D ; --j != 0 ; s0=s1 , s1 = *p2 , p2++ )

  001d9	c7 45 e0 8d 01
	00 00		 mov	 DWORD PTR _j$204466[ebp], 397 ; 0000018dH
  001e0	eb 17		 jmp	 SHORT $LN3@reloadMT
$LN2@reloadMT:
  001e2	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  001e5	89 45 ec	 mov	 DWORD PTR _s0$[ebp], eax
  001e8	8b 4d f4	 mov	 ecx, DWORD PTR _p2$[ebp]
  001eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ed	89 55 e8	 mov	 DWORD PTR _s1$[ebp], edx
  001f0	8b 45 f4	 mov	 eax, DWORD PTR _p2$[ebp]
  001f3	83 c0 04	 add	 eax, 4
  001f6	89 45 f4	 mov	 DWORD PTR _p2$[ebp], eax
$LN3@reloadMT:
  001f9	8b 45 e0	 mov	 eax, DWORD PTR _j$204466[ebp]
  001fc	83 e8 01	 sub	 eax, 1
  001ff	89 45 e0	 mov	 DWORD PTR _j$204466[ebp], eax
  00202	74 45		 je	 SHORT $LN1@reloadMT

; 55   : 	{
; 56   : 		*p0++ = (*pM++ ^ (((s0 & 0x80000000) | (s1 & 0x7FFFFFFF)) >> 1)) ^ (((s1&1!=0)?-1:0)&0x9908B0DF);

  00204	8b 45 ec	 mov	 eax, DWORD PTR _s0$[ebp]
  00207	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0020c	8b 4d e8	 mov	 ecx, DWORD PTR _s1$[ebp]
  0020f	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00215	0b c1		 or	 eax, ecx
  00217	d1 e8		 shr	 eax, 1
  00219	8b 55 f0	 mov	 edx, DWORD PTR _pM$[ebp]
  0021c	33 02		 xor	 eax, DWORD PTR [edx]
  0021e	8b 4d e8	 mov	 ecx, DWORD PTR _s1$[ebp]
  00221	83 e1 01	 and	 ecx, 1
  00224	f7 d9		 neg	 ecx
  00226	1b c9		 sbb	 ecx, ecx
  00228	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  0022e	33 c1		 xor	 eax, ecx
  00230	8b 55 f8	 mov	 edx, DWORD PTR _p0$[ebp]
  00233	89 02		 mov	 DWORD PTR [edx], eax
  00235	8b 45 f8	 mov	 eax, DWORD PTR _p0$[ebp]
  00238	83 c0 04	 add	 eax, 4
  0023b	89 45 f8	 mov	 DWORD PTR _p0$[ebp], eax
  0023e	8b 4d f0	 mov	 ecx, DWORD PTR _pM$[ebp]
  00241	83 c1 04	 add	 ecx, 4
  00244	89 4d f0	 mov	 DWORD PTR _pM$[ebp], ecx

; 57   : 	}

  00247	eb 99		 jmp	 SHORT $LN2@reloadMT
$LN1@reloadMT:

; 58   : 
; 59   : 	s1 = this->state[0];

  00249	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0024f	89 4d e8	 mov	 DWORD PTR _s1$[ebp], ecx

; 60   : 	*p0 = (*pM ^ (((s0 & 0x80000000) | (s1 & 0x7FFFFFFF)) >> 1)) ^ (((s1&1!=0)?-1:0)&0x9908B0DF);

  00252	8b 45 ec	 mov	 eax, DWORD PTR _s0$[ebp]
  00255	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0025a	8b 4d e8	 mov	 ecx, DWORD PTR _s1$[ebp]
  0025d	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00263	0b c1		 or	 eax, ecx
  00265	d1 e8		 shr	 eax, 1
  00267	8b 55 f0	 mov	 edx, DWORD PTR _pM$[ebp]
  0026a	33 02		 xor	 eax, DWORD PTR [edx]
  0026c	8b 4d e8	 mov	 ecx, DWORD PTR _s1$[ebp]
  0026f	83 e1 01	 and	 ecx, 1
  00272	f7 d9		 neg	 ecx
  00274	1b c9		 sbb	 ecx, ecx
  00276	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  0027c	33 c1		 xor	 eax, ecx
  0027e	8b 55 f8	 mov	 edx, DWORD PTR _p0$[ebp]
  00281	89 02		 mov	 DWORD PTR [edx], eax

; 61   : 	s1 ^= s1 >> 11;

  00283	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  00286	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00289	33 45 e8	 xor	 eax, DWORD PTR _s1$[ebp]
  0028c	89 45 e8	 mov	 DWORD PTR _s1$[ebp], eax

; 62   : 	s1 ^= (s1 << 7) & 0x9D2C5680;

  0028f	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  00292	c1 e0 07	 shl	 eax, 7
  00295	25 80 56 2c 9d	 and	 eax, -1658038656	; 9d2c5680H
  0029a	33 45 e8	 xor	 eax, DWORD PTR _s1$[ebp]
  0029d	89 45 e8	 mov	 DWORD PTR _s1$[ebp], eax

; 63   : 	s1 ^= (s1 << 15) & 0xEFC60000;

  002a0	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  002a3	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  002a6	25 00 00 c6 ef	 and	 eax, -272236544		; efc60000H
  002ab	33 45 e8	 xor	 eax, DWORD PTR _s1$[ebp]
  002ae	89 45 e8	 mov	 DWORD PTR _s1$[ebp], eax

; 64   : 
; 65   : 	return s1 ^ ( s1 >> 18 );

  002b1	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  002b4	c1 e8 12	 shr	 eax, 18			; 00000012H
  002b7	33 45 e8	 xor	 eax, DWORD PTR _s1$[ebp]

; 66   : }

  002ba	5f		 pop	 edi
  002bb	5e		 pop	 esi
  002bc	5b		 pop	 ebx
  002bd	8b e5		 mov	 esp, ebp
  002bf	5d		 pop	 ebp
  002c0	c3		 ret	 0
?reloadMT@CLargeRand@@QAEKXZ ENDP			; CLargeRand::reloadMT
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_LargLand@@YAXXZ
text$yc	SEGMENT
??__Eg_LargLand@@YAXXZ PROC				; `dynamic initializer for 'g_LargLand'', COMDAT

; 5    : CLargeRand g_LargLand;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LargLand@@3VCLargeRand@@A ; g_LargLand
  0000e	e8 00 00 00 00	 call	 ??0CLargeRand@@QAE@XZ	; CLargeRand::CLargeRand
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_LargLand@@YAXXZ ; `dynamic atexit destructor for 'g_LargLand''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_LargLand@@YAXXZ ENDP				; `dynamic initializer for 'g_LargLand''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_LargLand@@YAXXZ
text$yd	SEGMENT
??__Fg_LargLand@@YAXXZ PROC				; `dynamic atexit destructor for 'g_LargLand'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LargLand@@3VCLargeRand@@A ; g_LargLand
  0000e	e8 00 00 00 00	 call	 ??1CLargeRand@@UAE@XZ	; CLargeRand::~CLargeRand
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_LargLand@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_LargLand''
text$yd	ENDS
PUBLIC	?g_LargLand@@3VCLargeRand@@A			; g_LargLand
_BSS	SEGMENT
?g_LargLand@@3VCLargeRand@@A DB 09d0H DUP (?)		; g_LargLand
_BSS	ENDS
CRT$XCU	SEGMENT
_g_LargLand$initializer$ DD FLAT:??__Eg_LargLand@@YAXXZ
CRT$XCU	ENDS
END
