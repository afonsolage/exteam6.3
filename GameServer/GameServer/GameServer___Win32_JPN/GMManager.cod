; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\GMManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@GMManager@@QAEXXZ				; GMManager::Init
PUBLIC	??0GMManager@@QAE@XZ				; GMManager::GMManager
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\gmmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GMManager@@QAE@XZ PROC				; GMManager::GMManager
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : 	this->Init();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Init@GMManager@@QAEXXZ	; GMManager::Init

; 18   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0GMManager@@QAE@XZ ENDP				; GMManager::GMManager
_TEXT	ENDS
PUBLIC	??1GMManager@@QAE@XZ				; GMManager::~GMManager
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GMManager@@QAE@XZ PROC				; GMManager::~GMManager
; _this$ = ecx

; 22   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	// ----
; 24   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1GMManager@@QAE@XZ ENDP				; GMManager::~GMManager
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@GMManager@@QAEXXZ PROC				; GMManager::Init
; _this$ = ecx

; 28   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 	this->Enable = false;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 30   : 	this->GMCount = 0;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 80 74 17 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+6004], 0

; 31   : 	ZeroMemory(&this->gm_data,sizeof(this->gm_data));

  0005f	68 70 17 00 00	 push	 6000			; 00001770H
  00064	6a 00		 push	 0
  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	83 c0 04	 add	 eax, 4
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _memset
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?Init@GMManager@@QAEXXZ ENDP				; GMManager::Init
_TEXT	ENDS
PUBLIC	?Read@GMManager@@QAEXPAD@Z			; GMManager::Read
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0BF@JMLGNBAJ@ExData?2GMManager?4ini?$AA@	; `string'
PUBLIC	?Load@GMManager@@QAEXXZ				; GMManager::Load
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?CheckFile@@YA_NPAD@Z:PROC			; CheckFile
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JMLGNBAJ@ExData?2GMManager?4ini?$AA@
CONST	SEGMENT
??_C@_0BF@JMLGNBAJ@ExData?2GMManager?4ini?$AA@ DB 'ExData\GMManager.ini', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@GMManager@@QAEXXZ PROC				; GMManager::Load
; _this$ = ecx

; 36   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 44	 sub	 esp, 68			; 00000044H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi
  00089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 	this->Init();

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?Init@GMManager@@QAEXXZ	; GMManager::Init

; 38   : 	// ----
; 39   : 	if(g_ExLicense.user.GM_Manager == false)

  00094	0f b6 05 d3 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+211
  0009b	85 c0		 test	 eax, eax
  0009d	75 02		 jne	 SHORT $LN2@Load

; 40   : 	{
; 41   : 		return;

  0009f	eb 65		 jmp	 SHORT $LN3@Load
$LN2@Load:

; 42   : 	}
; 43   : 	// ----
; 44   : 	if(!CheckFile(gDirPath.GetNewPath(GM_MANAGER_DIR)))

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JMLGNBAJ@ExData?2GMManager?4ini?$AA@
  000a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000ab	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ?CheckFile@@YA_NPAD@Z	; CheckFile
  000b6	83 c4 04	 add	 esp, 4
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	75 02		 jne	 SHORT $LN1@Load

; 45   : 	{
; 46   : 		return;

  000c0	eb 44		 jmp	 SHORT $LN3@Load
$LN1@Load:

; 47   : 	}
; 48   : 	// ----
; 49   : 	this->Enable = GetPrivateProfileInt("ExTeam", "Enable", 0, gDirPath.GetNewPath(GM_MANAGER_DIR));

  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JMLGNBAJ@ExData?2GMManager?4ini?$AA@
  000c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000cc	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000d1	50		 push	 eax
  000d2	6a 00		 push	 0
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  000e4	85 c0		 test	 eax, eax
  000e6	0f 95 c0	 setne	 al
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	88 01		 mov	 BYTE PTR [ecx], al

; 50   : 	this->Read(gDirPath.GetNewPath(GM_MANAGER_DIR));

  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JMLGNBAJ@ExData?2GMManager?4ini?$AA@
  000f3	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000f8	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000fd	50		 push	 eax
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	e8 00 00 00 00	 call	 ?Read@GMManager@@QAEXPAD@Z ; GMManager::Read
$LN3@Load:

; 51   : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
?Load@GMManager@@QAEXXZ ENDP				; GMManager::Load
_TEXT	ENDS
PUBLIC	??_C@_0CN@NKMHLAGH@?$FLGMManager?$FN?5Load?5successfully?4?5T@ ; `string'
PUBLIC	??_C@_0CJ@GKMDOKEN@?$CFd?5?$CF10s?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	_strncpy:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CN@NKMHLAGH@?$FLGMManager?$FN?5Load?5successfully?4?5T@
CONST	SEGMENT
??_C@_0CN@NKMHLAGH@?$FLGMManager?$FN?5Load?5successfully?4?5T@ DB '[GMMan'
	DB	'ager] Load successfully. Total GMs: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GKMDOKEN@?$CFd?5?$CF10s?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@
CONST	SEGMENT
??_C@_0CJ@GKMDOKEN@?$CFd?5?$CF10s?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@ DB '%'
	DB	'd %10s %d %d %d %d %d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_isAdmin$227422 = -332					; size = 4
_GetGMName$227421 = -328				; size = 11
_n$227420 = -316					; size = 44
_Flag$ = -272						; size = 4
_Buff$ = -268						; size = 256
_file$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_File$ = 8						; size = 4
?Read@GMManager@@QAEXPAD@Z PROC				; GMManager::Read
; _this$ = ecx

; 55   : {

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0011e	33 c5		 xor	 eax, ebp
  00120	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00123	53		 push	 ebx
  00124	56		 push	 esi
  00125	57		 push	 edi
  00126	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 56   :     FILE *file = fopen(File,"r");

  00129	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0012e	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 _fopen
  00137	83 c4 08	 add	 esp, 8
  0013a	89 45 f4	 mov	 DWORD PTR _file$[ebp], eax

; 57   : 	// ----
; 58   :     if (file == NULL)

  0013d	83 7d f4 00	 cmp	 DWORD PTR _file$[ebp], 0
  00141	75 05		 jne	 SHORT $LN5@Read

; 59   :     {
; 60   :         return;

  00143	e9 6d 02 00 00	 jmp	 $LN6@Read
$LN5@Read:

; 61   :     }
; 62   : 	// ----
; 63   : 	this->GMCount = 0;

  00148	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0014b	c7 80 74 17 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+6004], 0

; 64   :     char Buff[256];
; 65   :     int Flag = 0;

  00155	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0
$LN4@Read:

; 66   : 	// ----
; 67   :     while (!feof(file))

  0015f	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 _feof
  00168	83 c4 04	 add	 esp, 4
  0016b	85 c0		 test	 eax, eax
  0016d	0f 85 1e 02 00
	00		 jne	 $LN3@Read

; 68   :     {
; 69   :         fgets(Buff,256,file);

  00173	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00176	50		 push	 eax
  00177	68 00 01 00 00	 push	 256			; 00000100H
  0017c	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00182	51		 push	 ecx
  00183	e8 00 00 00 00	 call	 _fgets
  00188	83 c4 0c	 add	 esp, 12			; 0000000cH

; 70   : 		// ----
; 71   :         if(Ex_IsBadFileLine(Buff, Flag))

  0018b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  00191	50		 push	 eax
  00192	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00198	51		 push	 ecx
  00199	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  0019e	83 c4 08	 add	 esp, 8
  001a1	0f b6 d0	 movzx	 edx, al
  001a4	85 d2		 test	 edx, edx
  001a6	74 02		 je	 SHORT $LN2@Read

; 72   : 		{
; 73   :             continue;

  001a8	eb b5		 jmp	 SHORT $LN4@Read
$LN2@Read:

; 74   : 		}
; 75   : 		// ----
; 76   :         if (Flag == 1)

  001aa	83 bd f0 fe ff
	ff 01		 cmp	 DWORD PTR _Flag$[ebp], 1
  001b1	0f 85 d5 01 00
	00		 jne	 $LN1@Read

; 77   :         {
; 78   : 			int n[11];
; 79   :             char GetGMName[11];
; 80   :             int isAdmin;
; 81   : 			// --
; 82   :             sscanf(Buff, "%d %10s %d %d %d %d %d %d %d %d %d %d %d",&isAdmin, &GetGMName, &n[0], &n[1], &n[2], &n[3], &n[4], &n[5],  &n[6], &n[7], &n[8], &n[9], &n[10]);

  001b7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$227420[ebp+40]
  001bd	50		 push	 eax
  001be	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$227420[ebp+36]
  001c4	51		 push	 ecx
  001c5	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$227420[ebp+32]
  001cb	52		 push	 edx
  001cc	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$227420[ebp+28]
  001d2	50		 push	 eax
  001d3	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _n$227420[ebp+24]
  001d9	51		 push	 ecx
  001da	8d 95 d8 fe ff
	ff		 lea	 edx, DWORD PTR _n$227420[ebp+20]
  001e0	52		 push	 edx
  001e1	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _n$227420[ebp+16]
  001e7	50		 push	 eax
  001e8	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$227420[ebp+12]
  001ee	51		 push	 ecx
  001ef	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR _n$227420[ebp+8]
  001f5	52		 push	 edx
  001f6	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _n$227420[ebp+4]
  001fc	50		 push	 eax
  001fd	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$227420[ebp]
  00203	51		 push	 ecx
  00204	8d 95 b8 fe ff
	ff		 lea	 edx, DWORD PTR _GetGMName$227421[ebp]
  0020a	52		 push	 edx
  0020b	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _isAdmin$227422[ebp]
  00211	50		 push	 eax
  00212	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GKMDOKEN@?$CFd?5?$CF10s?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@
  00217	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0021d	51		 push	 ecx
  0021e	e8 00 00 00 00	 call	 _sscanf
  00223	83 c4 3c	 add	 esp, 60			; 0000003cH

; 83   : 			// --
; 84   : 			this->gm_data[this->GMCount].Type				= isAdmin;

  00226	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00229	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  0022f	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00232	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00235	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _isAdmin$227422[ebp]
  0023b	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 85   : 			strncpy(this->gm_data[this->GMCount].Name, GetGMName, 10);

  0023f	6a 0a		 push	 10			; 0000000aH
  00241	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _GetGMName$227421[ebp]
  00247	50		 push	 eax
  00248	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0024b	8b 91 74 17 00
	00		 mov	 edx, DWORD PTR [ecx+6004]
  00251	6b d2 3c	 imul	 edx, 60			; 0000003cH
  00254	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00257	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  0025b	51		 push	 ecx
  0025c	e8 00 00 00 00	 call	 _strncpy
  00261	83 c4 0c	 add	 esp, 12			; 0000000cH

; 86   :             this->gm_data[this->GMCount].cmd_gg				= n[0];

  00264	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00267	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  0026d	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00270	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00273	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp]
  00279	89 44 0a 14	 mov	 DWORD PTR [edx+ecx+20], eax

; 87   :             this->gm_data[this->GMCount].cmd_sellpremium	= n[1];

  0027d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00280	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  00286	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00289	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0028c	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+4]
  00292	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax

; 88   :             this->gm_data[this->GMCount].cmd_sellcredit		= n[2];

  00296	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00299	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  0029f	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  002a2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002a5	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+8]
  002ab	89 44 0a 1c	 mov	 DWORD PTR [edx+ecx+28], eax

; 89   :             this->gm_data[this->GMCount].cmd_gmove			= n[3];

  002af	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002b2	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  002b8	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  002bb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002be	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+12]
  002c4	89 44 0a 20	 mov	 DWORD PTR [edx+ecx+32], eax

; 90   :             this->gm_data[this->GMCount].cmd_banchar		= n[4];

  002c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002cb	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  002d1	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  002d4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002d7	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+16]
  002dd	89 44 0a 24	 mov	 DWORD PTR [edx+ecx+36], eax

; 91   :             this->gm_data[this->GMCount].cmd_exreload		= n[5];

  002e1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002e4	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  002ea	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  002ed	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002f0	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+20]
  002f6	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 92   :             this->gm_data[this->GMCount].cmd_banchat		= n[6];

  002fa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002fd	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  00303	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00306	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00309	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+24]
  0030f	89 44 0a 2c	 mov	 DWORD PTR [edx+ecx+44], eax

; 93   :             this->gm_data[this->GMCount].cmd_disconnect		= n[7];

  00313	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00316	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  0031c	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  0031f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00322	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+28]
  00328	89 44 0a 30	 mov	 DWORD PTR [edx+ecx+48], eax

; 94   :             this->gm_data[this->GMCount].cmd_trace			= n[8];

  0032c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0032f	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  00335	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00338	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0033b	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+32]
  00341	89 44 0a 34	 mov	 DWORD PTR [edx+ecx+52], eax

; 95   : 			this->gm_data[this->GMCount].cmd_sendwcoin		= n[9];

  00345	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00348	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  0034e	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00351	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00354	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+36]
  0035a	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 96   : 			this->gm_data[this->GMCount].cmd_item			= n[10];

  0035e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00361	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  00367	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  0036a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0036d	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _n$227420[ebp+40]
  00373	89 44 0a 3c	 mov	 DWORD PTR [edx+ecx+60], eax

; 97   : 
; 98   :             this->GMCount++;

  00377	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0037a	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  00380	83 c1 01	 add	 ecx, 1
  00383	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00386	89 8a 74 17 00
	00		 mov	 DWORD PTR [edx+6004], ecx
$LN1@Read:

; 99   :         }
; 100  :     }

  0038c	e9 ce fd ff ff	 jmp	 $LN4@Read
$LN3@Read:

; 101  : 	// ----
; 102  :     fclose(file);

  00391	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00394	50		 push	 eax
  00395	e8 00 00 00 00	 call	 _fclose
  0039a	83 c4 04	 add	 esp, 4

; 103  :     LogAdd("[GMManager] Load successfully. Total GMs: %d", this->GMCount);

  0039d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003a0	8b 88 74 17 00
	00		 mov	 ecx, DWORD PTR [eax+6004]
  003a6	51		 push	 ecx
  003a7	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@NKMHLAGH@?$FLGMManager?$FN?5Load?5successfully?4?5T@
  003ac	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  003b2	83 c4 08	 add	 esp, 8
$LN6@Read:

; 104  : }

  003b5	5f		 pop	 edi
  003b6	5e		 pop	 esi
  003b7	5b		 pop	 ebx
  003b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003bb	33 cd		 xor	 ecx, ebp
  003bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c2	8b e5		 mov	 esp, ebp
  003c4	5d		 pop	 ebp
  003c5	c2 04 00	 ret	 4
?Read@GMManager@@QAEXPAD@Z ENDP				; GMManager::Read
_TEXT	ENDS
PUBLIC	?CheckCommand@GMManager@@QAE_NHH@Z		; GMManager::CheckCommand
EXTRN	_strcmp:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnectedEx@@YA_NH@Z:PROC		; gObjIsConnectedEx
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv136 = -80						; size = 4
_i$227434 = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_cmd_type$ = 12						; size = 4
?CheckCommand@GMManager@@QAE_NHH@Z PROC			; GMManager::CheckCommand
; _this$ = ecx

; 108  : {

  003d0	55		 push	 ebp
  003d1	8b ec		 mov	 ebp, esp
  003d3	83 ec 50	 sub	 esp, 80			; 00000050H
  003d6	53		 push	 ebx
  003d7	56		 push	 esi
  003d8	57		 push	 edi
  003d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 	if(g_ExLicense.user.GM_Manager == false)

  003dc	0f b6 05 d3 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+211
  003e3	85 c0		 test	 eax, eax
  003e5	75 07		 jne	 SHORT $LN35@CheckComma

; 110  : 	{
; 111  : 		return true;

  003e7	b0 01		 mov	 al, 1
  003e9	e9 03 02 00 00	 jmp	 $LN36@CheckComma
$LN35@CheckComma:

; 112  : 	}
; 113  : 	// ----
; 114  : 	if(!this->Enable)

  003ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f1	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  003f4	85 c9		 test	 ecx, ecx
  003f6	75 07		 jne	 SHORT $LN34@CheckComma

; 115  : 	{
; 116  : 		return false;

  003f8	32 c0		 xor	 al, al
  003fa	e9 f2 01 00 00	 jmp	 $LN36@CheckComma
$LN34@CheckComma:

; 117  : 	}
; 118  : 	// ----
; 119  : 	if(!gObjIsConnectedEx(aIndex))

  003ff	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 ?gObjIsConnectedEx@@YA_NH@Z ; gObjIsConnectedEx
  00408	83 c4 04	 add	 esp, 4
  0040b	0f b6 c8	 movzx	 ecx, al
  0040e	85 c9		 test	 ecx, ecx
  00410	75 07		 jne	 SHORT $LN33@CheckComma

; 120  : 	{
; 121  : 		return false;

  00412	32 c0		 xor	 al, al
  00414	e9 d8 01 00 00	 jmp	 $LN36@CheckComma
$LN33@CheckComma:

; 122  : 	}
; 123  : 	// ----
; 124  : 	LPOBJ lpUser = &gObj[aIndex];

  00419	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0041c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00422	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00428	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 125  : 	// ----
; 126  : 	for(int i = 0; i < this->GMCount; i++)

  0042b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$227434[ebp], 0
  00432	eb 09		 jmp	 SHORT $LN32@CheckComma
$LN31@CheckComma:
  00434	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  00437	83 c0 01	 add	 eax, 1
  0043a	89 45 f4	 mov	 DWORD PTR _i$227434[ebp], eax
$LN32@CheckComma:
  0043d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00440	8b 4d f4	 mov	 ecx, DWORD PTR _i$227434[ebp]
  00443	3b 88 74 17 00
	00		 cmp	 ecx, DWORD PTR [eax+6004]
  00449	0f 8d a0 01 00
	00		 jge	 $LN30@CheckComma

; 127  : 	{
; 128  : 		if( this->gm_data[i].Type > 0 )

  0044f	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  00452	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00455	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00458	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  0045d	0f 8e 87 01 00
	00		 jle	 $LN29@CheckComma

; 129  : 		{
; 130  : 			if( lpUser->Name[0] == this->gm_data[i].Name[0] )

  00463	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00466	0f be 48 77	 movsx	 ecx, BYTE PTR [eax+119]
  0046a	8b 55 f4	 mov	 edx, DWORD PTR _i$227434[ebp]
  0046d	6b d2 3c	 imul	 edx, 60			; 0000003cH
  00470	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00473	0f be 54 10 08	 movsx	 edx, BYTE PTR [eax+edx+8]
  00478	3b ca		 cmp	 ecx, edx
  0047a	0f 85 6a 01 00
	00		 jne	 $LN29@CheckComma

; 131  : 			{
; 132  : 				if( !strcmp(lpUser->Name, this->gm_data[i].Name) )

  00480	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  00483	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00486	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00489	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  0048d	52		 push	 edx
  0048e	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00491	83 c0 77	 add	 eax, 119		; 00000077H
  00494	50		 push	 eax
  00495	e8 00 00 00 00	 call	 _strcmp
  0049a	83 c4 08	 add	 esp, 8
  0049d	85 c0		 test	 eax, eax
  0049f	0f 85 45 01 00
	00		 jne	 $LN29@CheckComma

; 133  : 				{
; 134  : 					// ----
; 135  : 					if(this->gm_data[i].Type == 0)

  004a5	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  004a8	6b c0 3c	 imul	 eax, 60			; 0000003cH
  004ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ae	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  004b3	75 07		 jne	 SHORT $LN26@CheckComma

; 136  : 					{
; 137  : 						return false;

  004b5	32 c0		 xor	 al, al
  004b7	e9 35 01 00 00	 jmp	 $LN36@CheckComma
$LN26@CheckComma:

; 138  : 					}
; 139  : 					// ----
; 140  : 					switch(cmd_type)

  004bc	8b 45 0c	 mov	 eax, DWORD PTR _cmd_type$[ebp]
  004bf	89 45 b0	 mov	 DWORD PTR tv136[ebp], eax
  004c2	83 7d b0 0a	 cmp	 DWORD PTR tv136[ebp], 10 ; 0000000aH
  004c6	0f 87 1a 01 00
	00		 ja	 $LN1@CheckComma
  004cc	8b 4d b0	 mov	 ecx, DWORD PTR tv136[ebp]
  004cf	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN38@CheckComma[ecx*4]
$LN23@CheckComma:

; 141  : 					{
; 142  : 					case egm_cmd_gg:
; 143  : 						{
; 144  : 							if(this->gm_data[i].cmd_gg)

  004d6	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  004d9	6b c0 3c	 imul	 eax, 60			; 0000003cH
  004dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004df	83 7c 01 14 00	 cmp	 DWORD PTR [ecx+eax+20], 0
  004e4	74 07		 je	 SHORT $LN22@CheckComma

; 145  : 							{
; 146  : 								return true;

  004e6	b0 01		 mov	 al, 1
  004e8	e9 04 01 00 00	 jmp	 $LN36@CheckComma
$LN22@CheckComma:

; 147  : 							}
; 148  : 						}
; 149  : 						break;

  004ed	e9 f8 00 00 00	 jmp	 $LN29@CheckComma
$LN21@CheckComma:

; 150  : 					case egm_cmd_sellpremium:
; 151  : 						{
; 152  : 							if(this->gm_data[i].cmd_sellpremium)

  004f2	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  004f5	6b c0 3c	 imul	 eax, 60			; 0000003cH
  004f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004fb	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  00500	74 07		 je	 SHORT $LN20@CheckComma

; 153  : 							{
; 154  : 								return true;

  00502	b0 01		 mov	 al, 1
  00504	e9 e8 00 00 00	 jmp	 $LN36@CheckComma
$LN20@CheckComma:

; 155  : 							}
; 156  : 						}
; 157  : 						break;

  00509	e9 dc 00 00 00	 jmp	 $LN29@CheckComma
$LN19@CheckComma:

; 158  : 					case egm_cmd_sellcredit:
; 159  : 						{
; 160  : 							if(this->gm_data[i].cmd_sellcredit)

  0050e	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  00511	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00514	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00517	83 7c 01 1c 00	 cmp	 DWORD PTR [ecx+eax+28], 0
  0051c	74 07		 je	 SHORT $LN18@CheckComma

; 161  : 							{
; 162  : 								return true;

  0051e	b0 01		 mov	 al, 1
  00520	e9 cc 00 00 00	 jmp	 $LN36@CheckComma
$LN18@CheckComma:

; 163  : 							}
; 164  : 						}
; 165  : 						break;

  00525	e9 c0 00 00 00	 jmp	 $LN29@CheckComma
$LN17@CheckComma:

; 166  : 					case egm_cmd_gmove:
; 167  : 						{
; 168  : 							if(this->gm_data[i].cmd_gmove)

  0052a	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  0052d	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00530	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00533	83 7c 01 20 00	 cmp	 DWORD PTR [ecx+eax+32], 0
  00538	74 07		 je	 SHORT $LN16@CheckComma

; 169  : 							{
; 170  : 								return true;

  0053a	b0 01		 mov	 al, 1
  0053c	e9 b0 00 00 00	 jmp	 $LN36@CheckComma
$LN16@CheckComma:

; 171  : 							}
; 172  : 						}
; 173  : 						break;

  00541	e9 a4 00 00 00	 jmp	 $LN29@CheckComma
$LN15@CheckComma:

; 174  : 					case egm_cmd_banchar:
; 175  : 						{
; 176  : 							if(this->gm_data[i].cmd_banchar)

  00546	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  00549	6b c0 3c	 imul	 eax, 60			; 0000003cH
  0054c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0054f	83 7c 01 24 00	 cmp	 DWORD PTR [ecx+eax+36], 0
  00554	74 07		 je	 SHORT $LN14@CheckComma

; 177  : 							{
; 178  : 								return true;

  00556	b0 01		 mov	 al, 1
  00558	e9 94 00 00 00	 jmp	 $LN36@CheckComma
$LN14@CheckComma:

; 179  : 							}
; 180  : 						}
; 181  : 						break;

  0055d	e9 88 00 00 00	 jmp	 $LN29@CheckComma
$LN13@CheckComma:

; 182  : 					case egm_cmd_exreload:
; 183  : 						{
; 184  : 							if(this->gm_data[i].cmd_exreload)

  00562	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  00565	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00568	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0056b	83 7c 01 28 00	 cmp	 DWORD PTR [ecx+eax+40], 0
  00570	74 04		 je	 SHORT $LN12@CheckComma

; 185  : 							{
; 186  : 								return true;

  00572	b0 01		 mov	 al, 1
  00574	eb 7b		 jmp	 SHORT $LN36@CheckComma
$LN12@CheckComma:

; 187  : 							}
; 188  : 						}
; 189  : 						break;

  00576	eb 72		 jmp	 SHORT $LN29@CheckComma
$LN11@CheckComma:

; 190  : 					case egm_cmd_banchat:
; 191  : 						{
; 192  : 							if(this->gm_data[i].cmd_banchat)

  00578	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  0057b	6b c0 3c	 imul	 eax, 60			; 0000003cH
  0057e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00581	83 7c 01 2c 00	 cmp	 DWORD PTR [ecx+eax+44], 0
  00586	74 04		 je	 SHORT $LN10@CheckComma

; 193  : 							{
; 194  : 								return true;

  00588	b0 01		 mov	 al, 1
  0058a	eb 65		 jmp	 SHORT $LN36@CheckComma
$LN10@CheckComma:

; 195  : 							}
; 196  : 						}
; 197  : 						break;

  0058c	eb 5c		 jmp	 SHORT $LN29@CheckComma
$LN9@CheckComma:

; 198  : 					case egm_cmd_disconnect:
; 199  : 						{
; 200  : 							if(this->gm_data[i].cmd_disconnect)

  0058e	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  00591	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00594	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00597	83 7c 01 30 00	 cmp	 DWORD PTR [ecx+eax+48], 0
  0059c	74 04		 je	 SHORT $LN8@CheckComma

; 201  : 							{
; 202  : 								return true;

  0059e	b0 01		 mov	 al, 1
  005a0	eb 4f		 jmp	 SHORT $LN36@CheckComma
$LN8@CheckComma:

; 203  : 							}
; 204  : 						}
; 205  : 						break;

  005a2	eb 46		 jmp	 SHORT $LN29@CheckComma
$LN7@CheckComma:

; 206  : 					case egm_cmd_trace:
; 207  : 						{
; 208  : 							if(this->gm_data[i].cmd_trace)

  005a4	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  005a7	6b c0 3c	 imul	 eax, 60			; 0000003cH
  005aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005ad	83 7c 01 34 00	 cmp	 DWORD PTR [ecx+eax+52], 0
  005b2	74 04		 je	 SHORT $LN6@CheckComma

; 209  : 							{
; 210  : 								return true;

  005b4	b0 01		 mov	 al, 1
  005b6	eb 39		 jmp	 SHORT $LN36@CheckComma
$LN6@CheckComma:

; 211  : 							}
; 212  : 						}
; 213  : 						break;

  005b8	eb 30		 jmp	 SHORT $LN29@CheckComma
$LN5@CheckComma:

; 214  : 					case egm_cmd_sendwcoin:
; 215  : 						{
; 216  : 							if(this->gm_data[i].cmd_sendwcoin)

  005ba	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  005bd	6b c0 3c	 imul	 eax, 60			; 0000003cH
  005c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c3	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  005c8	74 04		 je	 SHORT $LN4@CheckComma

; 217  : 							{
; 218  : 								return true;

  005ca	b0 01		 mov	 al, 1
  005cc	eb 23		 jmp	 SHORT $LN36@CheckComma
$LN4@CheckComma:

; 219  : 							}
; 220  : 						}
; 221  : 						break;

  005ce	eb 1a		 jmp	 SHORT $LN29@CheckComma
$LN3@CheckComma:

; 222  : 					case egm_cmd_item:
; 223  : 						{
; 224  : 							if(this->gm_data[i].cmd_item)

  005d0	8b 45 f4	 mov	 eax, DWORD PTR _i$227434[ebp]
  005d3	6b c0 3c	 imul	 eax, 60			; 0000003cH
  005d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005d9	83 7c 01 3c 00	 cmp	 DWORD PTR [ecx+eax+60], 0
  005de	74 04		 je	 SHORT $LN2@CheckComma

; 225  : 							{
; 226  : 								return true;

  005e0	b0 01		 mov	 al, 1
  005e2	eb 0d		 jmp	 SHORT $LN36@CheckComma
$LN2@CheckComma:

; 227  : 							}
; 228  : 						}
; 229  : 						break;

  005e4	eb 04		 jmp	 SHORT $LN29@CheckComma
$LN1@CheckComma:

; 230  : 					default:
; 231  : 						{
; 232  : 							return false;

  005e6	32 c0		 xor	 al, al
  005e8	eb 07		 jmp	 SHORT $LN36@CheckComma
$LN29@CheckComma:

; 233  : 						}
; 234  : 					}
; 235  : 				}
; 236  : 			}
; 237  : 		}
; 238  : 	}

  005ea	e9 45 fe ff ff	 jmp	 $LN31@CheckComma
$LN30@CheckComma:

; 239  : 	// ----
; 240  : 	return false;

  005ef	32 c0		 xor	 al, al
$LN36@CheckComma:

; 241  : }

  005f1	5f		 pop	 edi
  005f2	5e		 pop	 esi
  005f3	5b		 pop	 ebx
  005f4	8b e5		 mov	 esp, ebp
  005f6	5d		 pop	 ebp
  005f7	c2 08 00	 ret	 8
  005fa	8b ff		 npad	 2
$LN38@CheckComma:
  005fc	00 00 00 00	 DD	 $LN23@CheckComma
  00600	00 00 00 00	 DD	 $LN21@CheckComma
  00604	00 00 00 00	 DD	 $LN19@CheckComma
  00608	00 00 00 00	 DD	 $LN17@CheckComma
  0060c	00 00 00 00	 DD	 $LN15@CheckComma
  00610	00 00 00 00	 DD	 $LN13@CheckComma
  00614	00 00 00 00	 DD	 $LN11@CheckComma
  00618	00 00 00 00	 DD	 $LN9@CheckComma
  0061c	00 00 00 00	 DD	 $LN7@CheckComma
  00620	00 00 00 00	 DD	 $LN5@CheckComma
  00624	00 00 00 00	 DD	 $LN3@CheckComma
?CheckCommand@GMManager@@QAE_NHH@Z ENDP			; GMManager::CheckCommand
_TEXT	ENDS
PUBLIC	??_C@_0BL@PNMGPPHN@?$FLGame?5Master?$FN?5?$CFs?5Connected?$AA@ ; `string'
PUBLIC	??_C@_0BN@BEHDNBEF@?$FLAdministrator?$FN?5?$CFs?5Connected?$AA@ ; `string'
PUBLIC	?ConnectAdmin@GMManager@@QAEXH@Z		; GMManager::ConnectAdmin
EXTRN	?MessaageAllGlobal@@YAXPADZZ:PROC		; MessaageAllGlobal
;	COMDAT ??_C@_0BL@PNMGPPHN@?$FLGame?5Master?$FN?5?$CFs?5Connected?$AA@
CONST	SEGMENT
??_C@_0BL@PNMGPPHN@?$FLGame?5Master?$FN?5?$CFs?5Connected?$AA@ DB '[Game '
	DB	'Master] %s Connected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BEHDNBEF@?$FLAdministrator?$FN?5?$CFs?5Connected?$AA@
CONST	SEGMENT
??_C@_0BN@BEHDNBEF@?$FLAdministrator?$FN?5?$CFs?5Connected?$AA@ DB '[Admi'
	DB	'nistrator] %s Connected', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$227478 = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?ConnectAdmin@GMManager@@QAEXH@Z PROC			; GMManager::ConnectAdmin
; _this$ = ecx

; 245  : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp
  00633	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00636	53		 push	 ebx
  00637	56		 push	 esi
  00638	57		 push	 edi
  00639	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 246  : 	if(g_ExLicense.user.GM_Manager == false)

  0063c	0f b6 05 d3 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+211
  00643	85 c0		 test	 eax, eax
  00645	75 05		 jne	 SHORT $LN12@ConnectAdm

; 247  : 	{
; 248  : 		return;

  00647	e9 f4 00 00 00	 jmp	 $LN13@ConnectAdm
$LN12@ConnectAdm:

; 249  : 	}
; 250  : 	// ----
; 251  : 	if(!this->Enable)

  0064c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0064f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00652	85 c9		 test	 ecx, ecx
  00654	75 05		 jne	 SHORT $LN11@ConnectAdm

; 252  : 	{
; 253  : 		return;

  00656	e9 e5 00 00 00	 jmp	 $LN13@ConnectAdm
$LN11@ConnectAdm:

; 254  : 	}
; 255  : 	// ----
; 256  : 	if ( aIndex < 0 || aIndex > OBJMAX-1)

  0065b	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  0065f	7c 09		 jl	 SHORT $LN9@ConnectAdm
  00661	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00668	7e 05		 jle	 SHORT $LN10@ConnectAdm
$LN9@ConnectAdm:

; 257  : 	{
; 258  : 		return;

  0066a	e9 d1 00 00 00	 jmp	 $LN13@ConnectAdm
$LN10@ConnectAdm:

; 259  : 	}
; 260  : 	// ----
; 261  : 	LPOBJ lpUser = &gObj[aIndex];

  0066f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00672	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00678	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0067e	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 262  : 	// ----
; 263  : 	for(int i = 0; i < this->GMCount; i++)

  00681	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$227478[ebp], 0
  00688	eb 09		 jmp	 SHORT $LN8@ConnectAdm
$LN7@ConnectAdm:
  0068a	8b 45 f4	 mov	 eax, DWORD PTR _i$227478[ebp]
  0068d	83 c0 01	 add	 eax, 1
  00690	89 45 f4	 mov	 DWORD PTR _i$227478[ebp], eax
$LN8@ConnectAdm:
  00693	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00696	8b 4d f4	 mov	 ecx, DWORD PTR _i$227478[ebp]
  00699	3b 88 74 17 00
	00		 cmp	 ecx, DWORD PTR [eax+6004]
  0069f	0f 8d 9b 00 00
	00		 jge	 $LN13@ConnectAdm

; 264  : 	{
; 265  : 		if( this->gm_data[i].Type > 0 )

  006a5	8b 45 f4	 mov	 eax, DWORD PTR _i$227478[ebp]
  006a8	6b c0 3c	 imul	 eax, 60			; 0000003cH
  006ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ae	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  006b3	0f 8e 82 00 00
	00		 jle	 $LN5@ConnectAdm

; 266  : 		{
; 267  : 			if( lpUser->Name[0] == this->gm_data[i].Name[0] )

  006b9	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  006bc	0f be 48 77	 movsx	 ecx, BYTE PTR [eax+119]
  006c0	8b 55 f4	 mov	 edx, DWORD PTR _i$227478[ebp]
  006c3	6b d2 3c	 imul	 edx, 60			; 0000003cH
  006c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006c9	0f be 54 10 08	 movsx	 edx, BYTE PTR [eax+edx+8]
  006ce	3b ca		 cmp	 ecx, edx
  006d0	75 69		 jne	 SHORT $LN5@ConnectAdm

; 268  : 			{
; 269  : 				if( !strcmp(lpUser->Name, this->gm_data[i].Name) )

  006d2	8b 45 f4	 mov	 eax, DWORD PTR _i$227478[ebp]
  006d5	6b c0 3c	 imul	 eax, 60			; 0000003cH
  006d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006db	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  006df	52		 push	 edx
  006e0	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  006e3	83 c0 77	 add	 eax, 119		; 00000077H
  006e6	50		 push	 eax
  006e7	e8 00 00 00 00	 call	 _strcmp
  006ec	83 c4 08	 add	 esp, 8
  006ef	85 c0		 test	 eax, eax
  006f1	75 48		 jne	 SHORT $LN5@ConnectAdm

; 270  : 				{
; 271  : 					if(this->gm_data[i].Type == 1)

  006f3	8b 45 f4	 mov	 eax, DWORD PTR _i$227478[ebp]
  006f6	6b c0 3c	 imul	 eax, 60			; 0000003cH
  006f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006fc	83 7c 01 04 01	 cmp	 DWORD PTR [ecx+eax+4], 1
  00701	75 14		 jne	 SHORT $LN2@ConnectAdm

; 272  : 					{
; 273  : 						MessaageAllGlobal("[Administrator] %s Connected", lpUser->Name);

  00703	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00706	83 c0 77	 add	 eax, 119		; 00000077H
  00709	50		 push	 eax
  0070a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BEHDNBEF@?$FLAdministrator?$FN?5?$CFs?5Connected?$AA@
  0070f	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00714	83 c4 08	 add	 esp, 8
$LN2@ConnectAdm:

; 274  : 					}
; 275  : 					if(this->gm_data[i].Type == 2)

  00717	8b 45 f4	 mov	 eax, DWORD PTR _i$227478[ebp]
  0071a	6b c0 3c	 imul	 eax, 60			; 0000003cH
  0071d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00720	83 7c 01 04 02	 cmp	 DWORD PTR [ecx+eax+4], 2
  00725	75 14		 jne	 SHORT $LN5@ConnectAdm

; 276  : 					{
; 277  : 						MessaageAllGlobal("[Game Master] %s Connected", lpUser->Name);

  00727	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0072a	83 c0 77	 add	 eax, 119		; 00000077H
  0072d	50		 push	 eax
  0072e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PNMGPPHN@?$FLGame?5Master?$FN?5?$CFs?5Connected?$AA@
  00733	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00738	83 c4 08	 add	 esp, 8
$LN5@ConnectAdm:

; 278  : 					}
; 279  : 				}
; 280  : 			}
; 281  : 		}
; 282  : 	}

  0073b	e9 4a ff ff ff	 jmp	 $LN7@ConnectAdm
$LN13@ConnectAdm:

; 283  : }

  00740	5f		 pop	 edi
  00741	5e		 pop	 esi
  00742	5b		 pop	 ebx
  00743	8b e5		 mov	 esp, ebp
  00745	5d		 pop	 ebp
  00746	c2 04 00	 ret	 4
?ConnectAdmin@GMManager@@QAEXH@Z ENDP			; GMManager::ConnectAdmin
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_GMManager@@YAXXZ
text$yc	SEGMENT
??__Eg_GMManager@@YAXXZ PROC				; `dynamic initializer for 'g_GMManager'', COMDAT

; 12   : GMManager g_GMManager;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GMManager@@3VGMManager@@A ; g_GMManager
  0000e	e8 00 00 00 00	 call	 ??0GMManager@@QAE@XZ	; GMManager::GMManager
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_GMManager@@YAXXZ ; `dynamic atexit destructor for 'g_GMManager''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_GMManager@@YAXXZ ENDP				; `dynamic initializer for 'g_GMManager''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_GMManager@@YAXXZ
text$yd	SEGMENT
??__Fg_GMManager@@YAXXZ PROC				; `dynamic atexit destructor for 'g_GMManager'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GMManager@@3VGMManager@@A ; g_GMManager
  0000e	e8 00 00 00 00	 call	 ??1GMManager@@QAE@XZ	; GMManager::~GMManager
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_GMManager@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_GMManager''
text$yd	ENDS
PUBLIC	?g_GMManager@@3VGMManager@@A			; g_GMManager
_BSS	SEGMENT
?g_GMManager@@3VGMManager@@A DB 01778H DUP (?)		; g_GMManager
_BSS	ENDS
CRT$XCU	SEGMENT
_g_GMManager$initializer$ DD FLAT:??__Eg_GMManager@@YAXXZ
CRT$XCU	ENDS
END
