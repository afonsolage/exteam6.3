; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\StatMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@CStatMng@@QAEXXZ				; CStatMng::Init
PUBLIC	??_7CStatMng@@6B@				; CStatMng::`vftable'
PUBLIC	??0CStatMng@@QAE@XZ				; CStatMng::CStatMng
PUBLIC	??_R4CStatMng@@6B@				; CStatMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStatMng@@@8				; CStatMng `RTTI Type Descriptor'
PUBLIC	??_R3CStatMng@@8				; CStatMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStatMng@@8				; CStatMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStatMng@@8			; CStatMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECStatMng@@UAEPAXI@Z:PROC			; CStatMng::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CStatMng@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\statmng.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CStatMng@@8 DD FLAT:??_R0?AVCStatMng@@@8	; CStatMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStatMng@@8
rdata$r	ENDS
;	COMDAT ??_R2CStatMng@@8
rdata$r	SEGMENT
??_R2CStatMng@@8 DD FLAT:??_R1A@?0A@EA@CStatMng@@8	; CStatMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CStatMng@@8
rdata$r	SEGMENT
??_R3CStatMng@@8 DD 00H					; CStatMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CStatMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStatMng@@@8
_DATA	SEGMENT
??_R0?AVCStatMng@@@8 DD FLAT:??_7type_info@@6B@		; CStatMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStatMng@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CStatMng@@6B@
rdata$r	SEGMENT
??_R4CStatMng@@6B@ DD 00H				; CStatMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStatMng@@@8
	DD	FLAT:??_R3CStatMng@@8
rdata$r	ENDS
;	COMDAT ??_7CStatMng@@6B@
CONST	SEGMENT
??_7CStatMng@@6B@ DD FLAT:??_R4CStatMng@@6B@		; CStatMng::`vftable'
	DD	FLAT:??_ECStatMng@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStatMng@@QAE@XZ PROC				; CStatMng::CStatMng
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CStatMng@@6B@

; 11   : 	this->Init();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Init@CStatMng@@QAEXXZ	; CStatMng::Init

; 12   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CStatMng@@QAE@XZ ENDP				; CStatMng::CStatMng
_TEXT	ENDS
PUBLIC	??1CStatMng@@UAE@XZ				; CStatMng::~CStatMng
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCStatMng@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStatMng@@UAEPAXI@Z PROC				; CStatMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CStatMng@@UAE@XZ	; CStatMng::~CStatMng
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCStatMng@@UAEPAXI@Z ENDP				; CStatMng::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CStatMng@@UAE@XZ PROC				; CStatMng::~CStatMng
; _this$ = ecx

; 15   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CStatMng@@6B@

; 16   : 	return;
; 17   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??1CStatMng@@UAE@XZ ENDP				; CStatMng::~CStatMng
; Function compile flags: /Odtp /ZI
_i$218909 = -24					; size = 4
_i$218904 = -20						; size = 4
_iDarkLordFirstState$ = -16				; size = 4
_MagunfirstState$ = -12					; size = 4
_firstState$ = -8					; size = 4
_this$ = -4						; size = 4
?Init@CStatMng@@QAEXXZ PROC				; CStatMng::Init
; _this$ = ecx

; 20   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 58	 sub	 esp, 88			; 00000058H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	int firstState = 2;

  0005c	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _firstState$[ebp], 2

; 22   : 	int MagunfirstState = 2;

  00063	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _MagunfirstState$[ebp], 2

; 23   : 	int iDarkLordFirstState = 2;

  0006a	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _iDarkLordFirstState$[ebp], 2

; 24   : 
; 25   : 	for (int i=0;i<STAT_TABLE_SIZE;i++)

  00071	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$218904[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN8@Init
$LN7@Init:
  0007a	8b 45 ec	 mov	 eax, DWORD PTR _i$218904[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 ec	 mov	 DWORD PTR _i$218904[ebp], eax
$LN8@Init:
  00083	81 7d ec f4 01
	00 00		 cmp	 DWORD PTR _i$218904[ebp], 500 ; 000001f4H
  0008a	0f 8d 95 00 00
	00		 jge	 $LN6@Init

; 26   : 	{
; 27   : 		if ( ( (i+1) % 10) == 0)

  00090	8b 45 ec	 mov	 eax, DWORD PTR _i$218904[ebp]
  00093	83 c0 01	 add	 eax, 1
  00096	99		 cdq
  00097	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0009c	f7 f9		 idiv	 ecx
  0009e	85 d2		 test	 edx, edx
  000a0	75 51		 jne	 SHORT $LN5@Init

; 28   : 		{
; 29   : 			firstState +=  3 * ( i + 11 ) / 400 + 2;//Season 4.5 changed

  000a2	8b 45 ec	 mov	 eax, DWORD PTR _i$218904[ebp]
  000a5	83 c0 0b	 add	 eax, 11			; 0000000bH
  000a8	6b c0 03	 imul	 eax, 3
  000ab	99		 cdq
  000ac	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  000b1	f7 f9		 idiv	 ecx
  000b3	8b 55 f8	 mov	 edx, DWORD PTR _firstState$[ebp]
  000b6	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  000ba	89 45 f8	 mov	 DWORD PTR _firstState$[ebp], eax

; 30   : 			MagunfirstState += 3 * ( i + 11 ) / 700 + 2;//Season 4.5 changed

  000bd	8b 45 ec	 mov	 eax, DWORD PTR _i$218904[ebp]
  000c0	83 c0 0b	 add	 eax, 11			; 0000000bH
  000c3	6b c0 03	 imul	 eax, 3
  000c6	99		 cdq
  000c7	b9 bc 02 00 00	 mov	 ecx, 700		; 000002bcH
  000cc	f7 f9		 idiv	 ecx
  000ce	8b 55 f4	 mov	 edx, DWORD PTR _MagunfirstState$[ebp]
  000d1	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  000d5	89 45 f4	 mov	 DWORD PTR _MagunfirstState$[ebp], eax

; 31   : 			iDarkLordFirstState += 3 * ( i + 11 ) / 500 + 2;//Season 4.5 changed

  000d8	8b 45 ec	 mov	 eax, DWORD PTR _i$218904[ebp]
  000db	83 c0 0b	 add	 eax, 11			; 0000000bH
  000de	6b c0 03	 imul	 eax, 3
  000e1	99		 cdq
  000e2	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  000e7	f7 f9		 idiv	 ecx
  000e9	8b 55 f0	 mov	 edx, DWORD PTR _iDarkLordFirstState$[ebp]
  000ec	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  000f0	89 45 f0	 mov	 DWORD PTR _iDarkLordFirstState$[ebp], eax
$LN5@Init:

; 32   : 		}
; 33   : 
; 34   : 		this->gObjNormalAddStatTable[i] = firstState;

  000f3	8b 45 ec	 mov	 eax, DWORD PTR _i$218904[ebp]
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	8b 55 f8	 mov	 edx, DWORD PTR _firstState$[ebp]
  000fc	89 54 81 04	 mov	 DWORD PTR [ecx+eax*4+4], edx

; 35   : 		this->gObjMagumAddStatTable[i] = MagunfirstState;

  00100	8b 45 ec	 mov	 eax, DWORD PTR _i$218904[ebp]
  00103	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	8b 55 f4	 mov	 edx, DWORD PTR _MagunfirstState$[ebp]
  00109	89 94 81 d4 07
	00 00		 mov	 DWORD PTR [ecx+eax*4+2004], edx

; 36   : 		this->gObjDarkLordAddStatTable[i] = iDarkLordFirstState;

  00110	8b 45 ec	 mov	 eax, DWORD PTR _i$218904[ebp]
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	8b 55 f0	 mov	 edx, DWORD PTR _iDarkLordFirstState$[ebp]
  00119	89 94 81 a4 0f
	00 00		 mov	 DWORD PTR [ecx+eax*4+4004], edx

; 37   : 	}

  00120	e9 55 ff ff ff	 jmp	 $LN7@Init
$LN6@Init:

; 38   : 
; 39   : 	firstState = 2;

  00125	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _firstState$[ebp], 2

; 40   : 	MagunfirstState = 2;

  0012c	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _MagunfirstState$[ebp], 2

; 41   : 	iDarkLordFirstState = 2;

  00133	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _iDarkLordFirstState$[ebp], 2

; 42   : 
; 43   : 	for (int i=0;i<STAT_TABLE_SIZE;i++)

  0013a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$218909[ebp], 0
  00141	eb 09		 jmp	 SHORT $LN4@Init
$LN3@Init:
  00143	8b 45 e8	 mov	 eax, DWORD PTR _i$218909[ebp]
  00146	83 c0 01	 add	 eax, 1
  00149	89 45 e8	 mov	 DWORD PTR _i$218909[ebp], eax
$LN4@Init:
  0014c	81 7d e8 f4 01
	00 00		 cmp	 DWORD PTR _i$218909[ebp], 500 ; 000001f4H
  00153	0f 8d 98 00 00
	00		 jge	 $LN9@Init

; 44   : 	{
; 45   : 		if ( ( (i+1) % 10) == 0)

  00159	8b 45 e8	 mov	 eax, DWORD PTR _i$218909[ebp]
  0015c	83 c0 01	 add	 eax, 1
  0015f	99		 cdq
  00160	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00165	f7 f9		 idiv	 ecx
  00167	85 d2		 test	 edx, edx
  00169	75 51		 jne	 SHORT $LN1@Init

; 46   : 		{
; 47   : 			firstState += 3 * ( i + 11 ) / 400 + 2;//Season 4.5 changed

  0016b	8b 45 e8	 mov	 eax, DWORD PTR _i$218909[ebp]
  0016e	83 c0 0b	 add	 eax, 11			; 0000000bH
  00171	6b c0 03	 imul	 eax, 3
  00174	99		 cdq
  00175	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  0017a	f7 f9		 idiv	 ecx
  0017c	8b 55 f8	 mov	 edx, DWORD PTR _firstState$[ebp]
  0017f	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  00183	89 45 f8	 mov	 DWORD PTR _firstState$[ebp], eax

; 48   : 			MagunfirstState += 3 * ( i + 11) / 700 + 2;//Season 4.5 changed

  00186	8b 45 e8	 mov	 eax, DWORD PTR _i$218909[ebp]
  00189	83 c0 0b	 add	 eax, 11			; 0000000bH
  0018c	6b c0 03	 imul	 eax, 3
  0018f	99		 cdq
  00190	b9 bc 02 00 00	 mov	 ecx, 700		; 000002bcH
  00195	f7 f9		 idiv	 ecx
  00197	8b 55 f4	 mov	 edx, DWORD PTR _MagunfirstState$[ebp]
  0019a	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  0019e	89 45 f4	 mov	 DWORD PTR _MagunfirstState$[ebp], eax

; 49   : 			iDarkLordFirstState += 3 * ( i + 11 ) / 500 + 2;//Season 4.5 changed

  001a1	8b 45 e8	 mov	 eax, DWORD PTR _i$218909[ebp]
  001a4	83 c0 0b	 add	 eax, 11			; 0000000bH
  001a7	6b c0 03	 imul	 eax, 3
  001aa	99		 cdq
  001ab	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  001b0	f7 f9		 idiv	 ecx
  001b2	8b 55 f0	 mov	 edx, DWORD PTR _iDarkLordFirstState$[ebp]
  001b5	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  001b9	89 45 f0	 mov	 DWORD PTR _iDarkLordFirstState$[ebp], eax
$LN1@Init:

; 50   : 		}
; 51   : 
; 52   : 		this->gObjNormalMinusStatTable[i] = firstState;

  001bc	8b 45 e8	 mov	 eax, DWORD PTR _i$218909[ebp]
  001bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c2	8b 55 f8	 mov	 edx, DWORD PTR _firstState$[ebp]
  001c5	89 94 81 74 17
	00 00		 mov	 DWORD PTR [ecx+eax*4+6004], edx

; 53   : 		this->gObjMagumMinusStatTable[i] = MagunfirstState;

  001cc	8b 45 e8	 mov	 eax, DWORD PTR _i$218909[ebp]
  001cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d2	8b 55 f4	 mov	 edx, DWORD PTR _MagunfirstState$[ebp]
  001d5	89 94 81 44 1f
	00 00		 mov	 DWORD PTR [ecx+eax*4+8004], edx

; 54   : 		this->gObjDarkLordMinusStatTable[i] = iDarkLordFirstState;

  001dc	8b 45 e8	 mov	 eax, DWORD PTR _i$218909[ebp]
  001df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e2	8b 55 f0	 mov	 edx, DWORD PTR _iDarkLordFirstState$[ebp]
  001e5	89 94 81 14 27
	00 00		 mov	 DWORD PTR [ecx+eax*4+10004], edx

; 55   : 	}

  001ec	e9 52 ff ff ff	 jmp	 $LN3@Init
$LN9@Init:

; 56   : }

  001f1	5f		 pop	 edi
  001f2	5e		 pop	 esi
  001f3	5b		 pop	 ebx
  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c3		 ret	 0
?Init@CStatMng@@QAEXXZ ENDP				; CStatMng::Init
_TEXT	ENDS
PUBLIC	?GetMaxStat@CStatMng@@QAEHHH@Z			; CStatMng::GetMaxStat
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_level$ = 8						; size = 4
_Class$ = 12						; size = 4
?GetMaxStat@CStatMng@@QAEHHH@Z PROC			; CStatMng::GetMaxStat
; _this$ = ecx

; 60   : {

  00200	55		 push	 ebp
  00201	8b ec		 mov	 ebp, esp
  00203	83 ec 44	 sub	 esp, 68			; 00000044H
  00206	53		 push	 ebx
  00207	56		 push	 esi
  00208	57		 push	 edi
  00209	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   : 	if ( (level < 1) || (level> MAX_CHAR_LEVEL) )

  0020c	83 7d 08 01	 cmp	 DWORD PTR _level$[ebp], 1
  00210	7c 09		 jl	 SHORT $LN3@GetMaxStat
  00212	81 7d 08 90 01
	00 00		 cmp	 DWORD PTR _level$[ebp], 400 ; 00000190H
  00219	7e 04		 jle	 SHORT $LN4@GetMaxStat
$LN3@GetMaxStat:

; 62   : 	{
; 63   : 		return 0;

  0021b	33 c0		 xor	 eax, eax
  0021d	eb 33		 jmp	 SHORT $LN5@GetMaxStat
$LN4@GetMaxStat:

; 64   : 	}
; 65   : 
; 66   : 	if (Class == CLASS_MAGUMSA)

  0021f	83 7d 0c 03	 cmp	 DWORD PTR _Class$[ebp], 3
  00223	75 0f		 jne	 SHORT $LN2@GetMaxStat

; 67   : 	{
; 68   : 		return this->gObjMagumAddStatTable[level-1];

  00225	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  00228	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022b	8b 84 81 d0 07
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+2000]
  00232	eb 1e		 jmp	 SHORT $LN5@GetMaxStat
$LN2@GetMaxStat:

; 69   : 	}
; 70   : 	
; 71   : 	if ( Class == CLASS_DARKLORD )

  00234	83 7d 0c 04	 cmp	 DWORD PTR _Class$[ebp], 4
  00238	75 0f		 jne	 SHORT $LN1@GetMaxStat

; 72   : 	{
; 73   : 		return this->gObjDarkLordAddStatTable[level-1];

  0023a	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  0023d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00240	8b 84 81 a0 0f
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+4000]
  00247	eb 09		 jmp	 SHORT $LN5@GetMaxStat
$LN1@GetMaxStat:

; 74   : 	}
; 75   : 	
; 76   : 	return this->gObjNormalAddStatTable[level-1];

  00249	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  0024c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024f	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
$LN5@GetMaxStat:

; 77   : }

  00252	5f		 pop	 edi
  00253	5e		 pop	 esi
  00254	5b		 pop	 ebx
  00255	8b e5		 mov	 esp, ebp
  00257	5d		 pop	 ebp
  00258	c2 08 00	 ret	 8
?GetMaxStat@CStatMng@@QAEHHH@Z ENDP			; CStatMng::GetMaxStat
_TEXT	ENDS
PUBLIC	?GetMaxMinusStat@CStatMng@@QAEHHH@Z		; CStatMng::GetMaxMinusStat
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iLevel$ = 8						; size = 4
_iClass$ = 12						; size = 4
?GetMaxMinusStat@CStatMng@@QAEHHH@Z PROC		; CStatMng::GetMaxMinusStat
; _this$ = ecx

; 81   : {

  00260	55		 push	 ebp
  00261	8b ec		 mov	 ebp, esp
  00263	83 ec 44	 sub	 esp, 68			; 00000044H
  00266	53		 push	 ebx
  00267	56		 push	 esi
  00268	57		 push	 edi
  00269	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	if ( (iLevel < 1) || (iLevel> MAX_CHAR_LEVEL) )

  0026c	83 7d 08 01	 cmp	 DWORD PTR _iLevel$[ebp], 1
  00270	7c 09		 jl	 SHORT $LN3@GetMaxMinu
  00272	81 7d 08 90 01
	00 00		 cmp	 DWORD PTR _iLevel$[ebp], 400 ; 00000190H
  00279	7e 04		 jle	 SHORT $LN4@GetMaxMinu
$LN3@GetMaxMinu:

; 83   : 	{
; 84   : 		return 0;

  0027b	33 c0		 xor	 eax, eax
  0027d	eb 37		 jmp	 SHORT $LN5@GetMaxMinu
$LN4@GetMaxMinu:

; 85   : 	}
; 86   : 
; 87   : 	if ( iClass == CLASS_MAGUMSA)

  0027f	83 7d 0c 03	 cmp	 DWORD PTR _iClass$[ebp], 3
  00283	75 0f		 jne	 SHORT $LN2@GetMaxMinu

; 88   : 	{
; 89   : 		return this->gObjMagumMinusStatTable[iLevel-1];

  00285	8b 45 08	 mov	 eax, DWORD PTR _iLevel$[ebp]
  00288	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0028b	8b 84 81 40 1f
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+8000]
  00292	eb 22		 jmp	 SHORT $LN5@GetMaxMinu
$LN2@GetMaxMinu:

; 90   : 	}
; 91   : 	
; 92   : 	if ( iClass == CLASS_DARKLORD )

  00294	83 7d 0c 04	 cmp	 DWORD PTR _iClass$[ebp], 4
  00298	75 0f		 jne	 SHORT $LN1@GetMaxMinu

; 93   : 	{
; 94   : 		return this->gObjDarkLordMinusStatTable[iLevel-1];

  0029a	8b 45 08	 mov	 eax, DWORD PTR _iLevel$[ebp]
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a0	8b 84 81 10 27
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+10000]
  002a7	eb 0d		 jmp	 SHORT $LN5@GetMaxMinu
$LN1@GetMaxMinu:

; 95   : 	}
; 96   : 	
; 97   : 	return this->gObjNormalMinusStatTable[iLevel-1];

  002a9	8b 45 08	 mov	 eax, DWORD PTR _iLevel$[ebp]
  002ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002af	8b 84 81 70 17
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+6000]
$LN5@GetMaxMinu:

; 98   : }

  002b6	5f		 pop	 edi
  002b7	5e		 pop	 esi
  002b8	5b		 pop	 ebx
  002b9	8b e5		 mov	 esp, ebp
  002bb	5d		 pop	 ebp
  002bc	c2 08 00	 ret	 8
?GetMaxMinusStat@CStatMng@@QAEHHH@Z ENDP		; CStatMng::GetMaxMinusStat
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__EgStatMng@@YAXXZ
text$yc	SEGMENT
??__EgStatMng@@YAXXZ PROC				; `dynamic initializer for 'gStatMng'', COMDAT

; 7    : CStatMng gStatMng;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gStatMng@@3VCStatMng@@A ; gStatMng
  0000e	e8 00 00 00 00	 call	 ??0CStatMng@@QAE@XZ	; CStatMng::CStatMng
  00013	68 00 00 00 00	 push	 OFFSET ??__FgStatMng@@YAXXZ ; `dynamic atexit destructor for 'gStatMng''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgStatMng@@YAXXZ ENDP				; `dynamic initializer for 'gStatMng''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FgStatMng@@YAXXZ
text$yd	SEGMENT
??__FgStatMng@@YAXXZ PROC				; `dynamic atexit destructor for 'gStatMng'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gStatMng@@3VCStatMng@@A ; gStatMng
  0000e	e8 00 00 00 00	 call	 ??1CStatMng@@UAE@XZ	; CStatMng::~CStatMng
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgStatMng@@YAXXZ ENDP				; `dynamic atexit destructor for 'gStatMng''
text$yd	ENDS
PUBLIC	?gStatMng@@3VCStatMng@@A			; gStatMng
_BSS	SEGMENT
?gStatMng@@3VCStatMng@@A DB 02ee4H DUP (?)		; gStatMng
_BSS	ENDS
CRT$XCU	SEGMENT
_gStatMng$initializer$ DD FLAT:??__EgStatMng@@YAXXZ
CRT$XCU	ENDS
END
