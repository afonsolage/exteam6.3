; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\GambleSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CItemBagAttrEx@@QAE@XZ			; CItemBagAttrEx::CItemBagAttrEx
PUBLIC	??0ST_GAMBLE_INFO@@QAE@XZ			; ST_GAMBLE_INFO::ST_GAMBLE_INFO
PUBLIC	??_7CGambleSystem@@6B@				; CGambleSystem::`vftable'
PUBLIC	??0CGambleSystem@@QAE@XZ			; CGambleSystem::CGambleSystem
PUBLIC	??_R4CGambleSystem@@6B@				; CGambleSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGambleSystem@@@8			; CGambleSystem `RTTI Type Descriptor'
PUBLIC	??_R3CGambleSystem@@8				; CGambleSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGambleSystem@@8				; CGambleSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGambleSystem@@8			; CGambleSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECGambleSystem@@UAEPAXI@Z:PROC		; CGambleSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CGambleSystem@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\gamblesystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CGambleSystem@@8 DD FLAT:??_R0?AVCGambleSystem@@@8 ; CGambleSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGambleSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CGambleSystem@@8
rdata$r	SEGMENT
??_R2CGambleSystem@@8 DD FLAT:??_R1A@?0A@EA@CGambleSystem@@8 ; CGambleSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGambleSystem@@8
rdata$r	SEGMENT
??_R3CGambleSystem@@8 DD 00H				; CGambleSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGambleSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGambleSystem@@@8
_DATA	SEGMENT
??_R0?AVCGambleSystem@@@8 DD FLAT:??_7type_info@@6B@	; CGambleSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGambleSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CGambleSystem@@6B@
rdata$r	SEGMENT
??_R4CGambleSystem@@6B@ DD 00H				; CGambleSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGambleSystem@@@8
	DD	FLAT:??_R3CGambleSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CGambleSystem@@6B@
CONST	SEGMENT
??_7CGambleSystem@@6B@ DD FLAT:??_R4CGambleSystem@@6B@	; CGambleSystem::`vftable'
	DD	FLAT:??_ECGambleSystem@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGambleSystem@@QAE@XZ PROC				; CGambleSystem::CGambleSystem
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGambleSystem@@6B@
  00015	68 00 00 00 00	 push	 OFFSET ??0ST_GAMBLE_INFO@@QAE@XZ ; ST_GAMBLE_INFO::ST_GAMBLE_INFO
  0001a	6a 19		 push	 25			; 00000019H
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  0002a	68 00 00 00 00	 push	 OFFSET ??0CItemBagAttrEx@@QAE@XZ ; CItemBagAttrEx::CItemBagAttrEx
  0002f	68 96 00 00 00	 push	 150			; 00000096H
  00034	6a 08		 push	 8
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	05 cc 02 00 00	 add	 eax, 716		; 000002ccH
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z

; 21   : 	//this->Init(gDirPath.GetNewPath("GamblingItemBag.txt")); //Set Gamble System Initialization
; 22   : }

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??0CGambleSystem@@QAE@XZ ENDP				; CGambleSystem::CGambleSystem
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\gamblesystem.h
_TEXT	ENDS
;	COMDAT ??0CItemBagAttrEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CItemBagAttrEx@@QAE@XZ PROC				; CItemBagAttrEx::CItemBagAttrEx, COMDAT
; _this$ = ecx

; 23   : 	CItemBagAttrEx()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	{
; 25   : 		this->m_type = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 26   : 		this->m_index = 0;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 27   : 		this->m_minLevel = 0;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 28   : 		this->m_maxLevel = 0;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0

; 29   : 		this->m_isskill = 0;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 30   : 		this->m_isluck = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0

; 31   : 		this->m_isoption = 0;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c6 40 06 00	 mov	 BYTE PTR [eax+6], 0

; 32   : 		this->m_isexitem = 0;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c6 40 07 00	 mov	 BYTE PTR [eax+7], 0

; 33   : 	}

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??0CItemBagAttrEx@@QAE@XZ ENDP				; CItemBagAttrEx::CItemBagAttrEx
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0ST_GAMBLE_INFO@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ST_GAMBLE_INFO@@QAE@XZ PROC				; ST_GAMBLE_INFO::ST_GAMBLE_INFO, COMDAT
; _this$ = ecx

; 56   : 	ST_GAMBLE_INFO()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 57   : 	{
; 58   : 		m_iSkillRate = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 59   : 		m_iLuckRate = 0;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 60   : 		m_iOptionRate = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 61   : 		m_iExcRate = 0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 62   : 		m_iSortItemRate = 0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 63   : 	};

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0ST_GAMBLE_INFO@@QAE@XZ ENDP				; ST_GAMBLE_INFO::ST_GAMBLE_INFO
_TEXT	ENDS
PUBLIC	??1CGambleSystem@@UAE@XZ			; CGambleSystem::~CGambleSystem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCGambleSystem@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGambleSystem@@UAEPAXI@Z PROC			; CGambleSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CGambleSystem@@UAE@XZ ; CGambleSystem::~CGambleSystem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCGambleSystem@@UAEPAXI@Z ENDP			; CGambleSystem::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\gamblesystem.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CGambleSystem@@UAE@XZ PROC				; CGambleSystem::~CGambleSystem
; _this$ = ecx

; 25   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 44	 sub	 esp, 68			; 00000044H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGambleSystem@@6B@

; 26   : 	//No destructor needed
; 27   : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??1CGambleSystem@@UAE@XZ ENDP				; CGambleSystem::~CGambleSystem
_TEXT	ENDS
PUBLIC	?Load@CGambleSystem@@QAEXPAD@Z			; CGambleSystem::Load
PUBLIC	?Init@CGambleSystem@@QAEXPAD@Z			; CGambleSystem::Init
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Init@CGambleSystem@@QAEXPAD@Z PROC			; CGambleSystem::Init
; _this$ = ecx

; 30   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 48	 sub	 esp, 72			; 00000048H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	this->bLoad = FALSE; //0x4

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 32   : 	this->m_iGambleBagCount = 0; //0x260

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	c7 80 60 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+608], 0

; 33   : 	this->m_iRateKindCount = 0; //0x2C8

  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	c7 80 c8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+712], 0

; 34   : 
; 35   : 	int i;
; 36   : 
; 37   : 	for(i = 0; i < GAMBLE_MAX_SECRET_ITEM_CLASS; i++)

  000a0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a7	eb 09		 jmp	 SHORT $LN15@Init
$LN14@Init:
  000a9	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ac	83 c0 01	 add	 eax, 1
  000af	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN15@Init:
  000b2	83 7d f8 04	 cmp	 DWORD PTR _i$[ebp], 4
  000b6	7d 13		 jge	 SHORT $LN13@Init

; 38   : 	{
; 39   : 		this->m_iBagItemOptionRate[i] = 0;

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	c7 84 81 fc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+508], 0

; 40   : 	}

  000c9	eb de		 jmp	 SHORT $LN14@Init
$LN13@Init:

; 41   : 
; 42   : 	for(i = 0; i < GAMBLE_MAX_NORMAL_ITEM; i++)

  000cb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d2	eb 09		 jmp	 SHORT $LN12@Init
$LN11@Init:
  000d4	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000d7	83 c0 01	 add	 eax, 1
  000da	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN12@Init:
  000dd	83 7d f8 05	 cmp	 DWORD PTR _i$[ebp], 5
  000e1	7d 13		 jge	 SHORT $LN10@Init

; 43   : 	{
; 44   : 		this->m_dwSpecialItemRate[i] = NULL;

  000e3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	c7 84 81 0c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+524], 0

; 45   : 	}

  000f4	eb de		 jmp	 SHORT $LN11@Init
$LN10@Init:

; 46   : 
; 47   : 	for(i = 0; i < GAMBLE_MAX_SECRET_ITEM_CLASS; i++)

  000f6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000fd	eb 09		 jmp	 SHORT $LN9@Init
$LN8@Init:
  000ff	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00102	83 c0 01	 add	 eax, 1
  00105	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN9@Init:
  00108	83 7d f8 04	 cmp	 DWORD PTR _i$[ebp], 4
  0010c	7d 02		 jge	 SHORT $LN7@Init

; 48   : 	{
; 49   : 		//empty (maybe debug log?)
; 50   : 	}

  0010e	eb ef		 jmp	 SHORT $LN8@Init
$LN7@Init:

; 51   : 
; 52   : 	for(i = 0; i < GAMBLE_MAX_SECRET_ITEM_TYPE; i++)

  00110	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00117	eb 09		 jmp	 SHORT $LN6@Init
$LN5@Init:
  00119	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0011c	83 c0 01	 add	 eax, 1
  0011f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN6@Init:
  00122	83 7d f8 06	 cmp	 DWORD PTR _i$[ebp], 6
  00126	7d 02		 jge	 SHORT $LN4@Init

; 53   : 	{
; 54   : 		//empty (maybe debug log?)
; 55   : 	}

  00128	eb ef		 jmp	 SHORT $LN5@Init
$LN4@Init:

; 56   : 
; 57   : 	for(i = 0; i < GAMBLE_MAX_ITEM_INFO; i++)

  0012a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00131	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  00133	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00136	83 c0 01	 add	 eax, 1
  00139	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN3@Init:
  0013c	83 7d f8 19	 cmp	 DWORD PTR _i$[ebp], 25	; 00000019H
  00140	7d 13		 jge	 SHORT $LN1@Init

; 58   : 	{
; 59   : 		this->m_iDropRatePerItemCount[i] = 0;

  00142	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00145	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	c7 84 81 64 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+612], 0

; 60   : 	}

  00153	eb de		 jmp	 SHORT $LN2@Init
$LN1@Init:

; 61   : 
; 62   : 	this->Load(gDirPath.GetNewPath(filename));

  00155	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00158	50		 push	 eax
  00159	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0015e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00163	50		 push	 eax
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	e8 00 00 00 00	 call	 ?Load@CGambleSystem@@QAEXPAD@Z ; CGambleSystem::Load

; 63   : }

  0016c	5f		 pop	 edi
  0016d	5e		 pop	 esi
  0016e	5b		 pop	 ebx
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 04 00	 ret	 4
?Init@CGambleSystem@@QAEXPAD@Z ENDP			; CGambleSystem::Init
_TEXT	ENDS
PUBLIC	??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_strcmp:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ DB 'Load Script Error '
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv408 = -104						; size = 8
tv534 = -100						; size = 4
tv523 = -100						; size = 4
tv512 = -100						; size = 4
tv501 = -100						; size = 4
tv490 = -100						; size = 4
tv479 = -100						; size = 4
tv468 = -100						; size = 4
tv457 = -100						; size = 4
tv532 = -96						; size = 4
tv521 = -96						; size = 4
tv510 = -96						; size = 4
tv499 = -96						; size = 4
tv488 = -96						; size = 4
tv477 = -96						; size = 4
tv466 = -96						; size = 4
tv455 = -96						; size = 4
tv406 = -96						; size = 4
tv529 = -90						; size = 2
tv518 = -90						; size = 2
tv507 = -90						; size = 2
tv496 = -90						; size = 2
tv485 = -90						; size = 2
tv474 = -90						; size = 2
tv463 = -90						; size = 2
tv452 = -90						; size = 2
tv403 = -90						; size = 2
_Type$227917 = -24					; size = 4
_Count$ = -20						; size = 4
_iProbability$ = -16					; size = 4
_n$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Load@CGambleSystem@@QAEXPAD@Z PROC			; CGambleSystem::Load
; _this$ = ecx

; 66   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	83 ec 68	 sub	 esp, 104		; 00000068H
  00186	53		 push	 ebx
  00187	56		 push	 esi
  00188	57		 push	 edi
  00189	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 	this->bLoad = FALSE;

  0018c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 68   : 	this->m_iGambleBagCount = 0;

  00196	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00199	c7 80 60 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+608], 0

; 69   : 
; 70   : 	SMDFile = fopen(filename, "r");

  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  001a8	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 _fopen
  001b1	83 c4 08	 add	 esp, 8
  001b4	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 71   : 
; 72   : 	if ( SMDFile == NULL )

  001b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  001c0	75 22		 jne	 SHORT $LN48@Load

; 73   : 	{
; 74   : 		LogAdd(lMsg.Get(453), filename);

  001c2	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  001c5	50		 push	 eax
  001c6	68 c5 01 00 00	 push	 453			; 000001c5H
  001cb	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001d0	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001d5	50		 push	 eax
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001dc	83 c4 08	 add	 esp, 8

; 75   : 		return;

  001df	e9 93 06 00 00	 jmp	 $LN49@Load
$LN48@Load:

; 76   : 	}
; 77   : 	SMDToken Token;
; 78   : 
; 79   : 	int n = 0;

  001e4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 80   : 	int iProbability = 0;

  001eb	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iProbability$[ebp], 0

; 81   : 	int Count = 0;

  001f2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Count$[ebp], 0
$LN47@Load:

; 82   : 
; 83   : 	while(true)

  001f9	b8 01 00 00 00	 mov	 eax, 1
  001fe	85 c0		 test	 eax, eax
  00200	0f 84 3c 06 00
	00		 je	 $LN46@Load

; 84   : 	{
; 85   : 		Token = GetToken();

  00206	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0020b	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 86   : 
; 87   : 		if ( Token == END )

  0020e	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00212	75 05		 jne	 SHORT $LN45@Load

; 88   : 		{
; 89   : 			break;

  00214	e9 29 06 00 00	 jmp	 $LN46@Load
$LN45@Load:

; 90   : 		}
; 91   : 
; 92   : 		if ( Token == 1 )

  00219	83 7d f8 01	 cmp	 DWORD PTR _Token$[ebp], 1
  0021d	0f 85 1a 06 00
	00		 jne	 $LN8@Load

; 93   : 		{
; 94   : 			int Type = (int)TokenNumber;

  00223	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00229	e8 00 00 00 00	 call	 __ftol2_sse
  0022e	89 45 e8	 mov	 DWORD PTR _Type$227917[ebp], eax

; 95   : 
; 96   : 			if (Type == 0)

  00231	83 7d e8 00	 cmp	 DWORD PTR _Type$227917[ebp], 0
  00235	0f 85 04 01 00
	00		 jne	 $LN43@Load

; 97   : 			{
; 98   : 				Count = 0;

  0023b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Count$[ebp], 0
$LN42@Load:

; 99   : 
; 100  : 				while(true)

  00242	b8 01 00 00 00	 mov	 eax, 1
  00247	85 c0		 test	 eax, eax
  00249	0f 84 eb 00 00
	00		 je	 $LN41@Load

; 101  : 				{
; 102  : 					Token = GetToken();

  0024f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00254	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 103  : 
; 104  : 					if( Token == 0 )

  00257	83 7d f8 00	 cmp	 DWORD PTR _Token$[ebp], 0
  0025b	75 1b		 jne	 SHORT $LN39@Load

; 105  : 					{
; 106  : 						if (strcmp("end",TokenString) == 0)

  0025d	68 00 00 00 00	 push	 OFFSET _TokenString
  00262	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00267	e8 00 00 00 00	 call	 _strcmp
  0026c	83 c4 08	 add	 esp, 8
  0026f	85 c0		 test	 eax, eax
  00271	75 05		 jne	 SHORT $LN39@Load

; 107  : 						{
; 108  : 							break;

  00273	e9 c2 00 00 00	 jmp	 $LN41@Load
$LN39@Load:

; 109  : 						}
; 110  : 					}
; 111  : 
; 112  : 					if ( Count > GAMBLE_MAX_ITEM_INFO )

  00278	83 7d ec 19	 cmp	 DWORD PTR _Count$[ebp], 25 ; 00000019H
  0027c	7e 16		 jle	 SHORT $LN38@Load

; 113  : 					{
; 114  : 						MsgBox("Load Script Error %s",filename);

  0027e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00281	50		 push	 eax
  00282	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  00287	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0028c	83 c4 08	 add	 esp, 8

; 115  : 						break;

  0028f	e9 a6 00 00 00	 jmp	 $LN41@Load
$LN38@Load:

; 116  : 					}
; 117  : 
; 118  : 					m_GamblingInfo[Count].m_iSkillRate = (int)TokenNumber;

  00294	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029a	e8 00 00 00 00	 call	 __ftol2_sse
  0029f	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  002a2	6b c9 14	 imul	 ecx, 20			; 00000014H
  002a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002a8	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 119  : 
; 120  : 					Token = GetToken();

  002ac	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002b1	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 121  : 					m_GamblingInfo[Count].m_iLuckRate = (int)TokenNumber;

  002b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ba	e8 00 00 00 00	 call	 __ftol2_sse
  002bf	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  002c2	6b c9 14	 imul	 ecx, 20			; 00000014H
  002c5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002c8	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 122  : 
; 123  : 					Token = GetToken();

  002cc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002d1	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 124  : 					m_GamblingInfo[Count].m_iOptionRate = (int)TokenNumber;

  002d4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002da	e8 00 00 00 00	 call	 __ftol2_sse
  002df	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  002e2	6b c9 14	 imul	 ecx, 20			; 00000014H
  002e5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002e8	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 125  : 
; 126  : 					Token = GetToken();

  002ec	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002f1	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 127  : 					m_GamblingInfo[Count].m_iExcRate = (int)TokenNumber;

  002f4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002fa	e8 00 00 00 00	 call	 __ftol2_sse
  002ff	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  00302	6b c9 14	 imul	 ecx, 20			; 00000014H
  00305	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00308	89 44 0a 14	 mov	 DWORD PTR [edx+ecx+20], eax

; 128  : 
; 129  : 					Token = GetToken();

  0030c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00311	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 130  : 					m_GamblingInfo[Count].m_iSortItemRate = (int)TokenNumber;

  00314	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0031a	e8 00 00 00 00	 call	 __ftol2_sse
  0031f	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  00322	6b c9 14	 imul	 ecx, 20			; 00000014H
  00325	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00328	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax

; 131  : 					
; 132  : 					Count++;

  0032c	8b 45 ec	 mov	 eax, DWORD PTR _Count$[ebp]
  0032f	83 c0 01	 add	 eax, 1
  00332	89 45 ec	 mov	 DWORD PTR _Count$[ebp], eax

; 133  : 				}

  00335	e9 08 ff ff ff	 jmp	 $LN42@Load
$LN41@Load:

; 134  : 			}
; 135  : 			else if (Type == 1)

  0033a	e9 fe 04 00 00	 jmp	 $LN8@Load
$LN43@Load:
  0033f	83 7d e8 01	 cmp	 DWORD PTR _Type$227917[ebp], 1
  00343	75 77		 jne	 SHORT $LN36@Load

; 136  : 			{
; 137  : 				Count = 0;

  00345	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Count$[ebp], 0
$LN35@Load:

; 138  : 
; 139  : 				while(true)

  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	85 c0		 test	 eax, eax
  00353	74 62		 je	 SHORT $LN34@Load

; 140  : 				{
; 141  : 					Token = GetToken();

  00355	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0035a	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 142  : 
; 143  : 					if( Token == 0 )

  0035d	83 7d f8 00	 cmp	 DWORD PTR _Token$[ebp], 0
  00361	75 18		 jne	 SHORT $LN32@Load

; 144  : 					{
; 145  : 						if (strcmp("end",TokenString) == 0)

  00363	68 00 00 00 00	 push	 OFFSET _TokenString
  00368	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0036d	e8 00 00 00 00	 call	 _strcmp
  00372	83 c4 08	 add	 esp, 8
  00375	85 c0		 test	 eax, eax
  00377	75 02		 jne	 SHORT $LN32@Load

; 146  : 						{
; 147  : 							break;

  00379	eb 3c		 jmp	 SHORT $LN34@Load
$LN32@Load:

; 148  : 						}
; 149  : 					}
; 150  : 					if ( Count > GAMBLE_MAX_SECRET_ITEM_CLASS )

  0037b	83 7d ec 04	 cmp	 DWORD PTR _Count$[ebp], 4
  0037f	7e 13		 jle	 SHORT $LN31@Load

; 151  : 					{
; 152  : 						MsgBox("Load Script Error %s",filename);

  00381	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00384	50		 push	 eax
  00385	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  0038a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0038f	83 c4 08	 add	 esp, 8

; 153  : 						break;

  00392	eb 23		 jmp	 SHORT $LN34@Load
$LN31@Load:

; 154  : 					}
; 155  : 
; 156  : 					this->m_iBagItemOptionRate[Count] = (int)TokenNumber;

  00394	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0039a	e8 00 00 00 00	 call	 __ftol2_sse
  0039f	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  003a2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003a5	89 84 8a fc 01
	00 00		 mov	 DWORD PTR [edx+ecx*4+508], eax

; 157  : 
; 158  : 					Count++;

  003ac	8b 45 ec	 mov	 eax, DWORD PTR _Count$[ebp]
  003af	83 c0 01	 add	 eax, 1
  003b2	89 45 ec	 mov	 DWORD PTR _Count$[ebp], eax

; 159  : 				}

  003b5	eb 95		 jmp	 SHORT $LN35@Load
$LN34@Load:

; 160  : 			}
; 161  : 			else if (Type == 2)

  003b7	e9 81 04 00 00	 jmp	 $LN8@Load
$LN36@Load:
  003bc	83 7d e8 02	 cmp	 DWORD PTR _Type$227917[ebp], 2
  003c0	0f 85 90 00 00
	00		 jne	 $LN29@Load

; 162  : 			{
; 163  : 				Count = 0;

  003c6	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Count$[ebp], 0
$LN28@Load:

; 164  : 
; 165  : 				while(true)

  003cd	b8 01 00 00 00	 mov	 eax, 1
  003d2	85 c0		 test	 eax, eax
  003d4	74 7b		 je	 SHORT $LN27@Load

; 166  : 				{
; 167  : 					Token = GetToken();

  003d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003db	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 168  : 
; 169  : 					if( Token == 0 )

  003de	83 7d f8 00	 cmp	 DWORD PTR _Token$[ebp], 0
  003e2	75 18		 jne	 SHORT $LN25@Load

; 170  : 					{
; 171  : 						if (strcmp("end",TokenString) == 0)

  003e4	68 00 00 00 00	 push	 OFFSET _TokenString
  003e9	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  003ee	e8 00 00 00 00	 call	 _strcmp
  003f3	83 c4 08	 add	 esp, 8
  003f6	85 c0		 test	 eax, eax
  003f8	75 02		 jne	 SHORT $LN25@Load

; 172  : 						{
; 173  : 							break;

  003fa	eb 55		 jmp	 SHORT $LN27@Load
$LN25@Load:

; 174  : 						}
; 175  : 					}
; 176  : 
; 177  : 					if ( Count > GAMBLE_MAX_NORMAL_ITEM )

  003fc	83 7d ec 05	 cmp	 DWORD PTR _Count$[ebp], 5
  00400	7e 13		 jle	 SHORT $LN24@Load

; 178  : 					{
; 179  : 						MsgBox("Load Script Error %s",filename);

  00402	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00405	50		 push	 eax
  00406	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  0040b	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00410	83 c4 08	 add	 esp, 8

; 180  : 						break;

  00413	eb 3c		 jmp	 SHORT $LN27@Load
$LN24@Load:

; 181  : 					}
; 182  : 
; 183  : 					this->m_dwSpecialItemRate[Count] = (DWORD)TokenNumber;

  00415	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0041b	d9 7d a6	 fnstcw	 WORD PTR tv403[ebp]
  0041e	0f b7 45 a6	 movzx	 eax, WORD PTR tv403[ebp]
  00422	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00427	89 45 a0	 mov	 DWORD PTR tv406[ebp], eax
  0042a	d9 6d a0	 fldcw	 WORD PTR tv406[ebp]
  0042d	df 7d 98	 fistp	 QWORD PTR tv408[ebp]
  00430	d9 6d a6	 fldcw	 WORD PTR tv403[ebp]
  00433	8b 45 98	 mov	 eax, DWORD PTR tv408[ebp]
  00436	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  00439	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0043c	89 84 8a 0c 02
	00 00		 mov	 DWORD PTR [edx+ecx*4+524], eax

; 184  : 
; 185  : 					Count++;

  00443	8b 45 ec	 mov	 eax, DWORD PTR _Count$[ebp]
  00446	83 c0 01	 add	 eax, 1
  00449	89 45 ec	 mov	 DWORD PTR _Count$[ebp], eax

; 186  : 				}

  0044c	e9 7c ff ff ff	 jmp	 $LN28@Load
$LN27@Load:

; 187  : 			}
; 188  : 			else if (Type == 3)

  00451	e9 e7 03 00 00	 jmp	 $LN8@Load
$LN29@Load:
  00456	83 7d e8 03	 cmp	 DWORD PTR _Type$227917[ebp], 3
  0045a	75 77		 jne	 SHORT $LN22@Load

; 189  : 			{
; 190  : 				Count = 0;

  0045c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Count$[ebp], 0
$LN21@Load:

; 191  : 
; 192  : 				while(true)

  00463	b8 01 00 00 00	 mov	 eax, 1
  00468	85 c0		 test	 eax, eax
  0046a	74 62		 je	 SHORT $LN20@Load

; 193  : 				{
; 194  : 					Token = GetToken();

  0046c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00471	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 195  : 
; 196  : 					if( Token == 0 )

  00474	83 7d f8 00	 cmp	 DWORD PTR _Token$[ebp], 0
  00478	75 18		 jne	 SHORT $LN18@Load

; 197  : 					{
; 198  : 						if (strcmp("end",TokenString) == 0)

  0047a	68 00 00 00 00	 push	 OFFSET _TokenString
  0047f	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00484	e8 00 00 00 00	 call	 _strcmp
  00489	83 c4 08	 add	 esp, 8
  0048c	85 c0		 test	 eax, eax
  0048e	75 02		 jne	 SHORT $LN18@Load

; 199  : 						{
; 200  : 							break;

  00490	eb 3c		 jmp	 SHORT $LN20@Load
$LN18@Load:

; 201  : 						}
; 202  : 					}
; 203  : 					if ( Count > GAMBLE_MAX_SECRET_ITEM_CLASS )

  00492	83 7d ec 04	 cmp	 DWORD PTR _Count$[ebp], 4
  00496	7e 13		 jle	 SHORT $LN17@Load

; 204  : 					{
; 205  : 						MsgBox("Load Script Error %s",filename);

  00498	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0049b	50		 push	 eax
  0049c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  004a1	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  004a6	83 c4 08	 add	 esp, 8

; 206  : 						break;

  004a9	eb 23		 jmp	 SHORT $LN20@Load
$LN17@Load:

; 207  : 					}
; 208  : 
; 209  : 					this->m_iBagItemExcRate[Count] = (int)TokenNumber;

  004ab	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004b1	e8 00 00 00 00	 call	 __ftol2_sse
  004b6	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  004b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004bc	89 84 8a 20 02
	00 00		 mov	 DWORD PTR [edx+ecx*4+544], eax

; 210  : 
; 211  : 					Count++;

  004c3	8b 45 ec	 mov	 eax, DWORD PTR _Count$[ebp]
  004c6	83 c0 01	 add	 eax, 1
  004c9	89 45 ec	 mov	 DWORD PTR _Count$[ebp], eax

; 212  : 				}

  004cc	eb 95		 jmp	 SHORT $LN21@Load
$LN20@Load:

; 213  : 			}
; 214  : 			else if (Type == 4)

  004ce	e9 6a 03 00 00	 jmp	 $LN8@Load
$LN22@Load:
  004d3	83 7d e8 04	 cmp	 DWORD PTR _Type$227917[ebp], 4
  004d7	0f 85 9e 00 00
	00		 jne	 $LN15@Load

; 215  : 			{
; 216  : 				Count = 0;

  004dd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Count$[ebp], 0
$LN14@Load:

; 217  : 
; 218  : 				while(true)

  004e4	b8 01 00 00 00	 mov	 eax, 1
  004e9	85 c0		 test	 eax, eax
  004eb	0f 84 85 00 00
	00		 je	 $LN13@Load

; 219  : 				{
; 220  : 					Token = GetToken();

  004f1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004f6	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 221  : 
; 222  : 					if( Token == 0 )

  004f9	83 7d f8 00	 cmp	 DWORD PTR _Token$[ebp], 0
  004fd	75 18		 jne	 SHORT $LN11@Load

; 223  : 					{
; 224  : 						if (strcmp("end",TokenString) == 0)

  004ff	68 00 00 00 00	 push	 OFFSET _TokenString
  00504	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00509	e8 00 00 00 00	 call	 _strcmp
  0050e	83 c4 08	 add	 esp, 8
  00511	85 c0		 test	 eax, eax
  00513	75 02		 jne	 SHORT $LN11@Load

; 225  : 						{
; 226  : 							break;

  00515	eb 5f		 jmp	 SHORT $LN13@Load
$LN11@Load:

; 227  : 						}
; 228  : 					}
; 229  : 
; 230  : 					if ( Count > GAMBLE_MAX_SECRET_ITEM_TYPE )

  00517	83 7d ec 06	 cmp	 DWORD PTR _Count$[ebp], 6
  0051b	7e 13		 jle	 SHORT $LN10@Load

; 231  : 					{
; 232  : 						MsgBox("Load Script Error %s",filename);

  0051d	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00520	50		 push	 eax
  00521	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  00526	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0052b	83 c4 08	 add	 esp, 8

; 233  : 						break;

  0052e	eb 46		 jmp	 SHORT $LN13@Load
$LN10@Load:

; 234  : 					}
; 235  : 
; 236  : 					this->m_iExcRatePerItemKind[Count] = (int)TokenNumber;

  00530	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00536	e8 00 00 00 00	 call	 __ftol2_sse
  0053b	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  0053e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00541	89 84 8a 30 02
	00 00		 mov	 DWORD PTR [edx+ecx*4+560], eax

; 237  : 
; 238  : 					Token = GetToken();

  00548	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0054d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 239  : 					this->m_iGeneralExcRate[Count] = (int)TokenNumber;

  00550	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00556	e8 00 00 00 00	 call	 __ftol2_sse
  0055b	8b 4d ec	 mov	 ecx, DWORD PTR _Count$[ebp]
  0055e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00561	89 84 8a 48 02
	00 00		 mov	 DWORD PTR [edx+ecx*4+584], eax

; 240  : 
; 241  : 					Count++;

  00568	8b 45 ec	 mov	 eax, DWORD PTR _Count$[ebp]
  0056b	83 c0 01	 add	 eax, 1
  0056e	89 45 ec	 mov	 DWORD PTR _Count$[ebp], eax

; 242  : 				}

  00571	e9 6e ff ff ff	 jmp	 $LN14@Load
$LN13@Load:

; 243  : 			}
; 244  : 			else if (Type >= 5)

  00576	e9 c2 02 00 00	 jmp	 $LN8@Load
$LN15@Load:
  0057b	83 7d e8 05	 cmp	 DWORD PTR _Type$227917[ebp], 5
  0057f	0f 8c b8 02 00
	00		 jl	 $LN8@Load

; 245  : 			{
; 246  : 				n = 0;

  00585	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
$LN7@Load:

; 247  : 
; 248  : 				while(true)

  0058c	b8 01 00 00 00	 mov	 eax, 1
  00591	85 c0		 test	 eax, eax
  00593	0f 84 87 02 00
	00		 je	 $LN6@Load

; 249  : 				{
; 250  : 					Token = GetToken();

  00599	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0059e	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 251  : 
; 252  : 					if( Token == 0 )

  005a1	83 7d f8 00	 cmp	 DWORD PTR _Token$[ebp], 0
  005a5	75 2b		 jne	 SHORT $LN4@Load

; 253  : 					{
; 254  : 						if (strcmp("end",TokenString) == 0)

  005a7	68 00 00 00 00	 push	 OFFSET _TokenString
  005ac	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  005b1	e8 00 00 00 00	 call	 _strcmp
  005b6	83 c4 08	 add	 esp, 8
  005b9	85 c0		 test	 eax, eax
  005bb	75 15		 jne	 SHORT $LN4@Load

; 255  : 						{
; 256  : 							this->m_iDropRatePerItemCount[iProbability] = n;

  005bd	8b 45 f0	 mov	 eax, DWORD PTR _iProbability$[ebp]
  005c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c3	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  005c6	89 94 81 64 02
	00 00		 mov	 DWORD PTR [ecx+eax*4+612], edx

; 257  : 							break;

  005cd	e9 4e 02 00 00	 jmp	 $LN6@Load
$LN4@Load:

; 258  : 						}
; 259  : 					}
; 260  : 					
; 261  : 					this->BagObject[m_iGambleBagCount].m_type = (BYTE)TokenNumber;

  005d2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005d8	d9 7d a6	 fnstcw	 WORD PTR tv452[ebp]
  005db	0f b7 45 a6	 movzx	 eax, WORD PTR tv452[ebp]
  005df	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005e4	89 45 a0	 mov	 DWORD PTR tv455[ebp], eax
  005e7	d9 6d a0	 fldcw	 WORD PTR tv455[ebp]
  005ea	db 5d 9c	 fistp	 DWORD PTR tv457[ebp]
  005ed	d9 6d a6	 fldcw	 WORD PTR tv452[ebp]
  005f0	8a 45 9c	 mov	 al, BYTE PTR tv457[ebp]
  005f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005f6	8b 91 60 02 00
	00		 mov	 edx, DWORD PTR [ecx+608]
  005fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005ff	88 84 d1 cc 02
	00 00		 mov	 BYTE PTR [ecx+edx*8+716], al

; 262  : 						
; 263  : 					Token = GetToken();

  00606	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0060b	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 264  : 					this->BagObject[m_iGambleBagCount].m_index = (BYTE)TokenNumber;

  0060e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00614	d9 7d a6	 fnstcw	 WORD PTR tv463[ebp]
  00617	0f b7 45 a6	 movzx	 eax, WORD PTR tv463[ebp]
  0061b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00620	89 45 a0	 mov	 DWORD PTR tv466[ebp], eax
  00623	d9 6d a0	 fldcw	 WORD PTR tv466[ebp]
  00626	db 5d 9c	 fistp	 DWORD PTR tv468[ebp]
  00629	d9 6d a6	 fldcw	 WORD PTR tv463[ebp]
  0062c	8a 45 9c	 mov	 al, BYTE PTR tv468[ebp]
  0062f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00632	8b 91 60 02 00
	00		 mov	 edx, DWORD PTR [ecx+608]
  00638	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0063b	88 84 d1 cd 02
	00 00		 mov	 BYTE PTR [ecx+edx*8+717], al

; 265  : 
; 266  : 					Token = GetToken();

  00642	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00647	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 267  : 					this->BagObject[m_iGambleBagCount].m_minLevel = (BYTE)TokenNumber;

  0064a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00650	d9 7d a6	 fnstcw	 WORD PTR tv474[ebp]
  00653	0f b7 45 a6	 movzx	 eax, WORD PTR tv474[ebp]
  00657	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0065c	89 45 a0	 mov	 DWORD PTR tv477[ebp], eax
  0065f	d9 6d a0	 fldcw	 WORD PTR tv477[ebp]
  00662	db 5d 9c	 fistp	 DWORD PTR tv479[ebp]
  00665	d9 6d a6	 fldcw	 WORD PTR tv474[ebp]
  00668	8a 45 9c	 mov	 al, BYTE PTR tv479[ebp]
  0066b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0066e	8b 91 60 02 00
	00		 mov	 edx, DWORD PTR [ecx+608]
  00674	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00677	88 84 d1 ce 02
	00 00		 mov	 BYTE PTR [ecx+edx*8+718], al

; 268  : 
; 269  : 					Token = GetToken();

  0067e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00683	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 270  : 					this->BagObject[m_iGambleBagCount].m_maxLevel = (BYTE)TokenNumber;

  00686	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0068c	d9 7d a6	 fnstcw	 WORD PTR tv485[ebp]
  0068f	0f b7 45 a6	 movzx	 eax, WORD PTR tv485[ebp]
  00693	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00698	89 45 a0	 mov	 DWORD PTR tv488[ebp], eax
  0069b	d9 6d a0	 fldcw	 WORD PTR tv488[ebp]
  0069e	db 5d 9c	 fistp	 DWORD PTR tv490[ebp]
  006a1	d9 6d a6	 fldcw	 WORD PTR tv485[ebp]
  006a4	8a 45 9c	 mov	 al, BYTE PTR tv490[ebp]
  006a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006aa	8b 91 60 02 00
	00		 mov	 edx, DWORD PTR [ecx+608]
  006b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006b3	88 84 d1 cf 02
	00 00		 mov	 BYTE PTR [ecx+edx*8+719], al

; 271  : 
; 272  : 					Token = GetToken();

  006ba	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006bf	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 273  : 					this->BagObject[m_iGambleBagCount].m_isskill = (BYTE)TokenNumber;

  006c2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006c8	d9 7d a6	 fnstcw	 WORD PTR tv496[ebp]
  006cb	0f b7 45 a6	 movzx	 eax, WORD PTR tv496[ebp]
  006cf	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  006d4	89 45 a0	 mov	 DWORD PTR tv499[ebp], eax
  006d7	d9 6d a0	 fldcw	 WORD PTR tv499[ebp]
  006da	db 5d 9c	 fistp	 DWORD PTR tv501[ebp]
  006dd	d9 6d a6	 fldcw	 WORD PTR tv496[ebp]
  006e0	8a 45 9c	 mov	 al, BYTE PTR tv501[ebp]
  006e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e6	8b 91 60 02 00
	00		 mov	 edx, DWORD PTR [ecx+608]
  006ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ef	88 84 d1 d0 02
	00 00		 mov	 BYTE PTR [ecx+edx*8+720], al

; 274  : 
; 275  : 					Token = GetToken();

  006f6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006fb	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 276  : 					this->BagObject[m_iGambleBagCount].m_isluck = (BYTE)TokenNumber;

  006fe	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00704	d9 7d a6	 fnstcw	 WORD PTR tv507[ebp]
  00707	0f b7 45 a6	 movzx	 eax, WORD PTR tv507[ebp]
  0070b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00710	89 45 a0	 mov	 DWORD PTR tv510[ebp], eax
  00713	d9 6d a0	 fldcw	 WORD PTR tv510[ebp]
  00716	db 5d 9c	 fistp	 DWORD PTR tv512[ebp]
  00719	d9 6d a6	 fldcw	 WORD PTR tv507[ebp]
  0071c	8a 45 9c	 mov	 al, BYTE PTR tv512[ebp]
  0071f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00722	8b 91 60 02 00
	00		 mov	 edx, DWORD PTR [ecx+608]
  00728	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0072b	88 84 d1 d1 02
	00 00		 mov	 BYTE PTR [ecx+edx*8+721], al

; 277  : 
; 278  : 					Token = GetToken();

  00732	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00737	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 279  : 					this->BagObject[m_iGambleBagCount].m_isoption = (BYTE)TokenNumber;

  0073a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00740	d9 7d a6	 fnstcw	 WORD PTR tv518[ebp]
  00743	0f b7 45 a6	 movzx	 eax, WORD PTR tv518[ebp]
  00747	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0074c	89 45 a0	 mov	 DWORD PTR tv521[ebp], eax
  0074f	d9 6d a0	 fldcw	 WORD PTR tv521[ebp]
  00752	db 5d 9c	 fistp	 DWORD PTR tv523[ebp]
  00755	d9 6d a6	 fldcw	 WORD PTR tv518[ebp]
  00758	8a 45 9c	 mov	 al, BYTE PTR tv523[ebp]
  0075b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0075e	8b 91 60 02 00
	00		 mov	 edx, DWORD PTR [ecx+608]
  00764	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00767	88 84 d1 d2 02
	00 00		 mov	 BYTE PTR [ecx+edx*8+722], al

; 280  : 
; 281  : 					Token = GetToken();

  0076e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00773	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 282  : 					this->BagObject[m_iGambleBagCount].m_isexitem = (BYTE)TokenNumber;

  00776	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0077c	d9 7d a6	 fnstcw	 WORD PTR tv529[ebp]
  0077f	0f b7 45 a6	 movzx	 eax, WORD PTR tv529[ebp]
  00783	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00788	89 45 a0	 mov	 DWORD PTR tv532[ebp], eax
  0078b	d9 6d a0	 fldcw	 WORD PTR tv532[ebp]
  0078e	db 5d 9c	 fistp	 DWORD PTR tv534[ebp]
  00791	d9 6d a6	 fldcw	 WORD PTR tv529[ebp]
  00794	8a 45 9c	 mov	 al, BYTE PTR tv534[ebp]
  00797	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0079a	8b 91 60 02 00
	00		 mov	 edx, DWORD PTR [ecx+608]
  007a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a3	88 84 d1 d3 02
	00 00		 mov	 BYTE PTR [ecx+edx*8+723], al

; 283  : 
; 284  : 					if(this->BagObject[m_iGambleBagCount].m_minLevel > this->BagObject[m_iGambleBagCount].m_maxLevel )

  007aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007ad	8b 88 60 02 00
	00		 mov	 ecx, DWORD PTR [eax+608]
  007b3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007b6	0f b6 84 ca ce
	02 00 00	 movzx	 eax, BYTE PTR [edx+ecx*8+718]
  007be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007c1	8b 91 60 02 00
	00		 mov	 edx, DWORD PTR [ecx+608]
  007c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007ca	0f b6 94 d1 cf
	02 00 00	 movzx	 edx, BYTE PTR [ecx+edx*8+719]
  007d2	3b c2		 cmp	 eax, edx
  007d4	7e 16		 jle	 SHORT $LN3@Load

; 285  : 					{
; 286  : 						MsgBox("Load Script Error %s",filename);

  007d6	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  007d9	50		 push	 eax
  007da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  007df	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  007e4	83 c4 08	 add	 esp, 8

; 287  : 						return;

  007e7	e9 8b 00 00 00	 jmp	 $LN49@Load
$LN3@Load:

; 288  : 					}
; 289  : 					
; 290  : 					n++;

  007ec	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  007ef	83 c0 01	 add	 eax, 1
  007f2	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 291  : 					this->m_iGambleBagCount++;

  007f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007f8	8b 88 60 02 00
	00		 mov	 ecx, DWORD PTR [eax+608]
  007fe	83 c1 01	 add	 ecx, 1
  00801	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00804	89 8a 60 02 00
	00		 mov	 DWORD PTR [edx+608], ecx

; 292  : 
; 293  : 					if (this->m_iGambleBagCount > GAMBLE_MAX_ITEM-1 )

  0080a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0080d	81 b8 60 02 00
	00 95 00 00 00	 cmp	 DWORD PTR [eax+608], 149 ; 00000095H
  00817	7e 02		 jle	 SHORT $LN2@Load

; 294  : 					{
; 295  : 						break;

  00819	eb 05		 jmp	 SHORT $LN6@Load
$LN2@Load:

; 296  : 					}
; 297  : 
; 298  : 				}

  0081b	e9 6c fd ff ff	 jmp	 $LN7@Load
$LN6@Load:

; 299  : 
; 300  : 				iProbability++;

  00820	8b 45 f0	 mov	 eax, DWORD PTR _iProbability$[ebp]
  00823	83 c0 01	 add	 eax, 1
  00826	89 45 f0	 mov	 DWORD PTR _iProbability$[ebp], eax

; 301  : 
; 302  : 				if(iProbability > GAMBLE_MAX_ITEM_INFO-1)

  00829	83 7d f0 18	 cmp	 DWORD PTR _iProbability$[ebp], 24 ; 00000018H
  0082d	7e 02		 jle	 SHORT $LN1@Load

; 303  : 				{
; 304  : 					break;

  0082f	eb 11		 jmp	 SHORT $LN46@Load
$LN1@Load:

; 305  : 				}
; 306  : 
; 307  : 				this->m_iRateKindCount = iProbability;

  00831	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00834	8b 4d f0	 mov	 ecx, DWORD PTR _iProbability$[ebp]
  00837	89 88 c8 02 00
	00		 mov	 DWORD PTR [eax+712], ecx
$LN8@Load:

; 308  : 			}
; 309  : 		}
; 310  : 	}

  0083d	e9 b7 f9 ff ff	 jmp	 $LN47@Load
$LN46@Load:

; 311  : 
; 312  : 	fclose(SMDFile);

  00842	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00847	50		 push	 eax
  00848	e8 00 00 00 00	 call	 _fclose
  0084d	83 c4 04	 add	 esp, 4

; 313  : 	LogAdd(lMsg.Get(454), filename);

  00850	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00853	50		 push	 eax
  00854	68 c6 01 00 00	 push	 454			; 000001c6H
  00859	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0085e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00863	50		 push	 eax
  00864	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0086a	83 c4 08	 add	 esp, 8

; 314  : 	this->bLoad = TRUE;

  0086d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00870	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
$LN49@Load:

; 315  : }

  00877	5f		 pop	 edi
  00878	5e		 pop	 esi
  00879	5b		 pop	 ebx
  0087a	8b e5		 mov	 esp, ebp
  0087c	5d		 pop	 ebp
  0087d	c2 04 00	 ret	 4
?Load@CGambleSystem@@QAEXPAD@Z ENDP			; CGambleSystem::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00880	55		 push	 ebp
  00881	8b ec		 mov	 ebp, esp
  00883	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00889	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0088e	33 c5		 xor	 eax, ebp
  00890	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00893	53		 push	 ebx
  00894	56		 push	 esi
  00895	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00896	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0089d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008a2	50		 push	 eax
  008a3	e8 00 00 00 00	 call	 _fgetc
  008a8	83 c4 04	 add	 esp, 4
  008ab	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  008ae	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008b2	83 f9 ff	 cmp	 ecx, -1
  008b5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  008b7	b8 02 00 00 00	 mov	 eax, 2
  008bc	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  008c1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  008c3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008c7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  008ca	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  008cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008d1	50		 push	 eax
  008d2	e8 00 00 00 00	 call	 _fgetc
  008d7	83 c4 04	 add	 esp, 4
  008da	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  008dd	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008e1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  008e4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  008e6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008ea	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  008ed	74 1c		 je	 SHORT $LN23@GetToken
  008ef	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008f3	83 f8 ff	 cmp	 eax, -1
  008f6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  008f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008fd	50		 push	 eax
  008fe	e8 00 00 00 00	 call	 _fgetc
  00903	83 c4 04	 add	 esp, 4
  00906	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00909	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0090b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0090f	83 f8 ff	 cmp	 eax, -1
  00912	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00914	b8 02 00 00 00	 mov	 eax, 2
  00919	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0091e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00922	50		 push	 eax
  00923	e8 00 00 00 00	 call	 _isspace
  00928	83 c4 04	 add	 esp, 4
  0092b	85 c0		 test	 eax, eax
  0092d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00933	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00937	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0093d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00943	83 e9 22	 sub	 ecx, 34			; 00000022H
  00946	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0094c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00953	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00959	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0095f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00966	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0096d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00977	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0097c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00981	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00986	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00990	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00995	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0099a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0099f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  009a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  009ae	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  009b3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  009b8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  009c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  009c7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  009cc	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  009d1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  009db	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  009e0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  009e5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  009ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009ef	50		 push	 eax
  009f0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  009f4	51		 push	 ecx
  009f5	e8 00 00 00 00	 call	 _ungetc
  009fa	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  009fd	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00a00	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00a03	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00a08	50		 push	 eax
  00a09	e8 00 00 00 00	 call	 _getc
  00a0e	83 c4 04	 add	 esp, 4
  00a11	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00a14	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00a18	83 f9 ff	 cmp	 ecx, -1
  00a1b	74 36		 je	 SHORT $LN12@GetToken
  00a1d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a21	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00a24	74 1a		 je	 SHORT $LN11@GetToken
  00a26	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a2a	50		 push	 eax
  00a2b	e8 00 00 00 00	 call	 _isdigit
  00a30	83 c4 04	 add	 esp, 4
  00a33	85 c0		 test	 eax, eax
  00a35	75 09		 jne	 SHORT $LN11@GetToken
  00a37	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a3b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00a3e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00a40	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00a43	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00a46	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00a48	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00a4b	83 c0 01	 add	 eax, 1
  00a4e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00a51	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00a53	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00a56	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00a59	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00a5c	50		 push	 eax
  00a5d	e8 00 00 00 00	 call	 _atof
  00a62	83 c4 04	 add	 esp, 4
  00a65	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  00a6b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00a75	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a7a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  00a7f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00a84	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00a8b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00a90	50		 push	 eax
  00a91	e8 00 00 00 00	 call	 _getc
  00a96	83 c4 04	 add	 esp, 4
  00a99	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00a9c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00aa0	83 f9 ff	 cmp	 ecx, -1
  00aa3	74 1c		 je	 SHORT $LN8@GetToken
  00aa5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00aa9	83 f8 22	 cmp	 eax, 34			; 00000022H
  00aac	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  00aae	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ab1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00ab4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00ab6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ab9	83 c0 01	 add	 eax, 1
  00abc	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  00abf	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00ac1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ac5	83 f8 22	 cmp	 eax, 34			; 00000022H
  00ac8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00aca	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00acf	50		 push	 eax
  00ad0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00ad4	51		 push	 ecx
  00ad5	e8 00 00 00 00	 call	 _ungetc
  00ada	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  00add	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ae0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00ae3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  00aed	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00af2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00af7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  00afc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b00	50		 push	 eax
  00b01	e8 00 00 00 00	 call	 _isalpha
  00b06	83 c4 04	 add	 esp, 4
  00b09	85 c0		 test	 eax, eax
  00b0b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00b11	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00b18	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b1b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00b1e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00b20	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b23	83 c0 01	 add	 eax, 1
  00b26	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00b29	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b2e	50		 push	 eax
  00b2f	e8 00 00 00 00	 call	 _getc
  00b34	83 c4 04	 add	 esp, 4
  00b37	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00b3a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00b3e	83 f9 ff	 cmp	 ecx, -1
  00b41	74 36		 je	 SHORT $LN3@GetToken
  00b43	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b47	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00b4a	74 1a		 je	 SHORT $LN2@GetToken
  00b4c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b50	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00b53	74 11		 je	 SHORT $LN2@GetToken
  00b55	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b59	50		 push	 eax
  00b5a	e8 00 00 00 00	 call	 _isalnum
  00b5f	83 c4 04	 add	 esp, 4
  00b62	85 c0		 test	 eax, eax
  00b64	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00b66	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b69	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00b6c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  00b6e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b71	83 c0 01	 add	 eax, 1
  00b74	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00b77	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00b79	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b7e	50		 push	 eax
  00b7f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00b83	51		 push	 ecx
  00b84	e8 00 00 00 00	 call	 _ungetc
  00b89	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  00b8c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b8f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00b92	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  00b9c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ba1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00ba3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00ba5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  00baf	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00bb4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00bb6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00bb8	5f		 pop	 edi
  00bb9	5e		 pop	 esi
  00bba	5b		 pop	 ebx
  00bbb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bbe	33 cd		 xor	 ecx, ebp
  00bc0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bc5	8b e5		 mov	 esp, ebp
  00bc7	5d		 pop	 ebp
  00bc8	c3		 ret	 0
  00bc9	8d 49 00	 npad	 3
$LN35@GetToken:
  00bcc	00 00 00 00	 DD	 $LN10@GetToken
  00bd0	00 00 00 00	 DD	 $LN19@GetToken
  00bd4	00 00 00 00	 DD	 $LN17@GetToken
  00bd8	00 00 00 00	 DD	 $LN14@GetToken
  00bdc	00 00 00 00	 DD	 $LN18@GetToken
  00be0	00 00 00 00	 DD	 $LN16@GetToken
  00be4	00 00 00 00	 DD	 $LN15@GetToken
  00be8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00bec	00		 DB	 0
  00bed	01		 DB	 1
  00bee	07		 DB	 7
  00bef	07		 DB	 7
  00bf0	07		 DB	 7
  00bf1	07		 DB	 7
  00bf2	07		 DB	 7
  00bf3	07		 DB	 7
  00bf4	07		 DB	 7
  00bf5	07		 DB	 7
  00bf6	02		 DB	 2
  00bf7	03		 DB	 3
  00bf8	03		 DB	 3
  00bf9	07		 DB	 7
  00bfa	03		 DB	 3
  00bfb	03		 DB	 3
  00bfc	03		 DB	 3
  00bfd	03		 DB	 3
  00bfe	03		 DB	 3
  00bff	03		 DB	 3
  00c00	03		 DB	 3
  00c01	03		 DB	 3
  00c02	03		 DB	 3
  00c03	03		 DB	 3
  00c04	07		 DB	 7
  00c05	04		 DB	 4
  00c06	07		 DB	 7
  00c07	07		 DB	 7
  00c08	07		 DB	 7
  00c09	07		 DB	 7
  00c0a	07		 DB	 7
  00c0b	07		 DB	 7
  00c0c	07		 DB	 7
  00c0d	07		 DB	 7
  00c0e	07		 DB	 7
  00c0f	07		 DB	 7
  00c10	07		 DB	 7
  00c11	07		 DB	 7
  00c12	07		 DB	 7
  00c13	07		 DB	 7
  00c14	07		 DB	 7
  00c15	07		 DB	 7
  00c16	07		 DB	 7
  00c17	07		 DB	 7
  00c18	07		 DB	 7
  00c19	07		 DB	 7
  00c1a	07		 DB	 7
  00c1b	07		 DB	 7
  00c1c	07		 DB	 7
  00c1d	07		 DB	 7
  00c1e	07		 DB	 7
  00c1f	07		 DB	 7
  00c20	07		 DB	 7
  00c21	07		 DB	 7
  00c22	07		 DB	 7
  00c23	07		 DB	 7
  00c24	07		 DB	 7
  00c25	07		 DB	 7
  00c26	07		 DB	 7
  00c27	07		 DB	 7
  00c28	07		 DB	 7
  00c29	07		 DB	 7
  00c2a	07		 DB	 7
  00c2b	07		 DB	 7
  00c2c	07		 DB	 7
  00c2d	07		 DB	 7
  00c2e	07		 DB	 7
  00c2f	07		 DB	 7
  00c30	07		 DB	 7
  00c31	07		 DB	 7
  00c32	07		 DB	 7
  00c33	07		 DB	 7
  00c34	07		 DB	 7
  00c35	07		 DB	 7
  00c36	07		 DB	 7
  00c37	07		 DB	 7
  00c38	07		 DB	 7
  00c39	07		 DB	 7
  00c3a	07		 DB	 7
  00c3b	07		 DB	 7
  00c3c	07		 DB	 7
  00c3d	07		 DB	 7
  00c3e	07		 DB	 7
  00c3f	07		 DB	 7
  00c40	07		 DB	 7
  00c41	07		 DB	 7
  00c42	07		 DB	 7
  00c43	07		 DB	 7
  00c44	07		 DB	 7
  00c45	05		 DB	 5
  00c46	07		 DB	 7
  00c47	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?GetLevel@CGambleSystem@@QAEEH@Z		; CGambleSystem::GetLevel
EXTRN	_rand:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\gamblesystem.cpp
_TEXT	SEGMENT
_level$ = -12						; size = 4
_sub$ = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?GetLevel@CGambleSystem@@QAEEH@Z PROC			; CGambleSystem::GetLevel
; _this$ = ecx

; 318  : {

  00c50	55		 push	 ebp
  00c51	8b ec		 mov	 ebp, esp
  00c53	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00c56	53		 push	 ebx
  00c57	56		 push	 esi
  00c58	57		 push	 edi
  00c59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  : 	if ( n <0 || n > MAX_ITEMBAG_ATTR-1 )

  00c5c	83 7d 08 00	 cmp	 DWORD PTR _n$[ebp], 0
  00c60	7c 09		 jl	 SHORT $LN2@GetLevel
  00c62	81 7d 08 95 00
	00 00		 cmp	 DWORD PTR _n$[ebp], 149	; 00000095H
  00c69	7e 04		 jle	 SHORT $LN3@GetLevel
$LN2@GetLevel:

; 320  : 	{
; 321  : 		return 0;

  00c6b	32 c0		 xor	 al, al
  00c6d	eb 72		 jmp	 SHORT $LN4@GetLevel
$LN3@GetLevel:

; 322  : 	}
; 323  : 
; 324  : 	if ( this->BagObject[n].m_minLevel == this->BagObject[n].m_maxLevel )

  00c6f	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00c72	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c75	0f b6 94 c1 ce
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax*8+718]
  00c7d	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00c80	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c83	0f b6 84 c1 cf
	02 00 00	 movzx	 eax, BYTE PTR [ecx+eax*8+719]
  00c8b	3b d0		 cmp	 edx, eax
  00c8d	75 0f		 jne	 SHORT $LN1@GetLevel

; 325  : 	{
; 326  : 		return this->BagObject[n].m_minLevel;

  00c8f	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00c92	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c95	8a 84 c1 ce 02
	00 00		 mov	 al, BYTE PTR [ecx+eax*8+718]
  00c9c	eb 43		 jmp	 SHORT $LN4@GetLevel
$LN1@GetLevel:

; 327  : 	}
; 328  : 
; 329  : 	int sub = (this->BagObject[n].m_maxLevel - this->BagObject[n].m_minLevel) + 1;

  00c9e	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00ca1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ca4	0f b6 94 c1 cf
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax*8+719]
  00cac	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00caf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cb2	0f b6 84 c1 ce
	02 00 00	 movzx	 eax, BYTE PTR [ecx+eax*8+718]
  00cba	2b d0		 sub	 edx, eax
  00cbc	83 c2 01	 add	 edx, 1
  00cbf	89 55 f8	 mov	 DWORD PTR _sub$[ebp], edx

; 330  : 	int level = this->BagObject[n].m_minLevel + (rand()%sub);

  00cc2	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00cc5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cc8	0f b6 b4 c1 ce
	02 00 00	 movzx	 esi, BYTE PTR [ecx+eax*8+718]
  00cd0	e8 00 00 00 00	 call	 _rand
  00cd5	99		 cdq
  00cd6	f7 7d f8	 idiv	 DWORD PTR _sub$[ebp]
  00cd9	03 f2		 add	 esi, edx
  00cdb	89 75 f4	 mov	 DWORD PTR _level$[ebp], esi

; 331  : 
; 332  : 	return level;

  00cde	8a 45 f4	 mov	 al, BYTE PTR _level$[ebp]
$LN4@GetLevel:

; 333  : }

  00ce1	5f		 pop	 edi
  00ce2	5e		 pop	 esi
  00ce3	5b		 pop	 ebx
  00ce4	8b e5		 mov	 esp, ebp
  00ce6	5d		 pop	 ebp
  00ce7	c2 04 00	 ret	 4
?GetLevel@CGambleSystem@@QAEEH@Z ENDP			; CGambleSystem::GetLevel
_TEXT	ENDS
PUBLIC	??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@ ; `string'
PUBLIC	?SortExcOption@CGambleSystem@@QAEEXZ		; CGambleSystem::SortExcOption
PUBLIC	?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z	; CGambleSystem::SortExcNumberPerKind
PUBLIC	?GetBagItemCount@CGambleSystem@@QAEHXZ		; CGambleSystem::GetBagItemCount
PUBLIC	__real@00000000
PUBLIC	?TryGamble@CGambleSystem@@QAEEHEHHE@Z		; CGambleSystem::TryGamble
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@
CONST	SEGMENT
??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@ DB '['
	DB	' GAMBLING ][ TryGambling ] %s(%s) Try Item : [%s]%d Level:%d '
	DB	'op1:%d op2:%d op3:%d ExOp:%d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv580 = -168						; size = 4
tv578 = -164						; size = 4
tv209 = -160						; size = 4
tv191 = -160						; size = 4
tv575 = -158						; size = 2
_iOpt3Rand$228077 = -92					; size = 4
_i$228061 = -88						; size = 4
_iSortItemRate$228060 = -84				; size = 4
_dwSortItemRand$228059 = -80				; size = 4
_iBagNumber$228049 = -76				; size = 4
_iRandB$228048 = -72					; size = 4
_iRandA$228047 = -68					; size = 4
_iBagNumberCount$228046 = -64				; size = 4
_dwNewOptionRate$228028 = -60				; size = 4
_dwOptionRate$228020 = -56				; size = 4
_lpObj$ = -52						; size = 4
_NewOp$ = -48						; size = 4
_loc_11$ = -44						; size = 4
_n$ = -40						; size = 4
_Op3$ = -36						; size = 4
_Op2$ = -32						; size = 4
_Op1$ = -28						; size = 4
_MapPosY$ = -24						; size = 4
_MapPosX$ = -20						; size = 4
_Level$ = -16						; size = 4
_ItemType$ = -12					; size = 4
_Dur$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_MapNumber$ = 12					; size = 1
_cX$ = 16						; size = 4
_cY$ = 20						; size = 4
_btRareItemNum$ = 24					; size = 1
?TryGamble@CGambleSystem@@QAEEHEHHE@Z PROC		; CGambleSystem::TryGamble
; _this$ = ecx

; 336  : {

  00cf0	55		 push	 ebp
  00cf1	8b ec		 mov	 ebp, esp
  00cf3	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00cf9	53		 push	 ebx
  00cfa	56		 push	 esi
  00cfb	57		 push	 edi
  00cfc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 337  : 	if (this->bLoad == FALSE)

  00cff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d02	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00d06	75 07		 jne	 SHORT $LN55@TryGamble

; 338  : 	{
; 339  : 		return 0;

  00d08	32 c0		 xor	 al, al
  00d0a	e9 4d 06 00 00	 jmp	 $LN56@TryGamble
$LN55@TryGamble:

; 340  : 	}
; 341  : 
; 342  : 	float Dur = 0;

  00d0f	d9 ee		 fldz
  00d11	d9 5d f8	 fstp	 DWORD PTR _Dur$[ebp]

; 343  : 	int ItemType = 0;

  00d14	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ItemType$[ebp], 0

; 344  : 	int Level = 0;

  00d1b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Level$[ebp], 0

; 345  : 	int MapPosX = 0;

  00d22	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _MapPosX$[ebp], 0

; 346  : 	int MapPosY = 0;

  00d29	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _MapPosY$[ebp], 0

; 347  : 	int Op1 = 0;

  00d30	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Op1$[ebp], 0

; 348  : 	int Op2 = 0;

  00d37	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Op2$[ebp], 0

; 349  : 	int Op3 = 0;

  00d3e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 0

; 350  : 	DWORD n = 0; //loc10

  00d45	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 351  : 	int loc_11 = 0;

  00d4c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _loc_11$[ebp], 0

; 352  : 	int NewOp = 0;

  00d53	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _NewOp$[ebp], 0

; 353  : 
; 354  : 	LPOBJ lpObj = &gObj[aIndex]; //loc_13

  00d5a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d5d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00d63	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00d69	89 45 cc	 mov	 DWORD PTR _lpObj$[ebp], eax

; 355  : 	 
; 356  : 	if(this->GetBagItemCount() > 0)

  00d6c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d6f	e8 00 00 00 00	 call	 ?GetBagItemCount@CGambleSystem@@QAEHXZ ; CGambleSystem::GetBagItemCount
  00d74	85 c0		 test	 eax, eax
  00d76	0f 8e de 05 00
	00		 jle	 $LN54@TryGamble

; 357  : 	{
; 358  : 		if (this->m_dwSpecialItemRate[btRareItemNum] >= GetLargeRand() % 1000000)

  00d7c	0f b6 75 18	 movzx	 esi, BYTE PTR _btRareItemNum$[ebp]
  00d80	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00d85	33 d2		 xor	 edx, edx
  00d87	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00d8c	f7 f1		 div	 ecx
  00d8e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d91	39 94 b0 0c 02
	00 00		 cmp	 DWORD PTR [eax+esi*4+524], edx
  00d98	0f 82 fb 01 00
	00		 jb	 $LN53@TryGamble

; 359  : 		{
; 360  : 			Level = 0;

  00d9e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Level$[ebp], 0

; 361  : 			Dur = 0;

  00da5	d9 ee		 fldz
  00da7	d9 5d f8	 fstp	 DWORD PTR _Dur$[ebp]

; 362  : 			Op1 = 1;

  00daa	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Op1$[ebp], 1

; 363  : 			Op2 = 0;

  00db1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Op2$[ebp], 0

; 364  : 
; 365  : 			DWORD dwOptionRate = GetLargeRand() % 1000000;

  00db8	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00dbd	33 d2		 xor	 edx, edx
  00dbf	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00dc4	f7 f1		 div	 ecx
  00dc6	89 55 c8	 mov	 DWORD PTR _dwOptionRate$228020[ebp], edx

; 366  : 
; 367  : 			if ( dwOptionRate <= this->m_iBagItemOptionRate[0])

  00dc9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00dcc	8b 4d c8	 mov	 ecx, DWORD PTR _dwOptionRate$228020[ebp]
  00dcf	3b 88 fc 01 00
	00		 cmp	 ecx, DWORD PTR [eax+508]
  00dd5	77 09		 ja	 SHORT $LN52@TryGamble

; 368  : 			{
; 369  : 				Op3 = 1;

  00dd7	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 1
  00dde	eb 79		 jmp	 SHORT $LN46@TryGamble
$LN52@TryGamble:

; 370  : 			}
; 371  : 			else if ( dwOptionRate <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1])

  00de0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00de3	8b 88 fc 01 00
	00		 mov	 ecx, DWORD PTR [eax+508]
  00de9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00dec	03 8a 00 02 00
	00		 add	 ecx, DWORD PTR [edx+512]
  00df2	39 4d c8	 cmp	 DWORD PTR _dwOptionRate$228020[ebp], ecx
  00df5	77 09		 ja	 SHORT $LN50@TryGamble

; 372  : 			{
; 373  : 				Op3 = 2;

  00df7	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 2
  00dfe	eb 59		 jmp	 SHORT $LN46@TryGamble
$LN50@TryGamble:

; 374  : 			}
; 375  : 			else if ( dwOptionRate <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1] + this->m_iBagItemOptionRate[2])

  00e00	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e03	8b 88 fc 01 00
	00		 mov	 ecx, DWORD PTR [eax+508]
  00e09	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e0c	03 8a 00 02 00
	00		 add	 ecx, DWORD PTR [edx+512]
  00e12	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e15	03 88 04 02 00
	00		 add	 ecx, DWORD PTR [eax+516]
  00e1b	39 4d c8	 cmp	 DWORD PTR _dwOptionRate$228020[ebp], ecx
  00e1e	77 09		 ja	 SHORT $LN48@TryGamble

; 376  : 			{
; 377  : 				Op3 = 3;

  00e20	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 3
  00e27	eb 30		 jmp	 SHORT $LN46@TryGamble
$LN48@TryGamble:

; 378  : 			}
; 379  : 			else if ( dwOptionRate <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1] + this->m_iBagItemOptionRate[2] + this->m_iBagItemOptionRate[3])

  00e29	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e2c	8b 88 fc 01 00
	00		 mov	 ecx, DWORD PTR [eax+508]
  00e32	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e35	03 8a 00 02 00
	00		 add	 ecx, DWORD PTR [edx+512]
  00e3b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e3e	03 88 04 02 00
	00		 add	 ecx, DWORD PTR [eax+516]
  00e44	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e47	03 8a 08 02 00
	00		 add	 ecx, DWORD PTR [edx+520]
  00e4d	39 4d c8	 cmp	 DWORD PTR _dwOptionRate$228020[ebp], ecx
  00e50	77 07		 ja	 SHORT $LN46@TryGamble

; 380  : 			{
; 381  : 				Op3 = 4;

  00e52	c7 45 dc 04 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 4
$LN46@TryGamble:

; 382  : 			}
; 383  : 
; 384  : 			DWORD dwNewOptionRate = GetLargeRand() % 1000000;

  00e59	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00e5e	33 d2		 xor	 edx, edx
  00e60	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00e65	f7 f1		 div	 ecx
  00e67	89 55 c4	 mov	 DWORD PTR _dwNewOptionRate$228028[ebp], edx

; 385  : 
; 386  : 			if ( dwNewOptionRate <= this->m_iBagItemExcRate[0])

  00e6a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e6d	8b 4d c4	 mov	 ecx, DWORD PTR _dwNewOptionRate$228028[ebp]
  00e70	3b 88 20 02 00
	00		 cmp	 ecx, DWORD PTR [eax+544]
  00e76	77 15		 ja	 SHORT $LN45@TryGamble

; 387  : 			{
; 388  : 				NewOp = this->SortExcNumberPerKind(1);

  00e78	6a 01		 push	 1
  00e7a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e7d	e8 00 00 00 00	 call	 ?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z ; CGambleSystem::SortExcNumberPerKind
  00e82	0f b6 c0	 movzx	 eax, al
  00e85	89 45 d0	 mov	 DWORD PTR _NewOp$[ebp], eax
  00e88	e9 94 00 00 00	 jmp	 $LN39@TryGamble
$LN45@TryGamble:

; 389  : 			}
; 390  : 			else if ( dwNewOptionRate <= this->m_iBagItemExcRate[0] + this->m_iBagItemExcRate[1])

  00e8d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e90	8b 88 20 02 00
	00		 mov	 ecx, DWORD PTR [eax+544]
  00e96	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e99	03 8a 24 02 00
	00		 add	 ecx, DWORD PTR [edx+548]
  00e9f	39 4d c4	 cmp	 DWORD PTR _dwNewOptionRate$228028[ebp], ecx
  00ea2	77 12		 ja	 SHORT $LN43@TryGamble

; 391  : 			{
; 392  : 				NewOp = this->SortExcNumberPerKind(2);

  00ea4	6a 02		 push	 2
  00ea6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ea9	e8 00 00 00 00	 call	 ?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z ; CGambleSystem::SortExcNumberPerKind
  00eae	0f b6 c0	 movzx	 eax, al
  00eb1	89 45 d0	 mov	 DWORD PTR _NewOp$[ebp], eax
  00eb4	eb 6b		 jmp	 SHORT $LN39@TryGamble
$LN43@TryGamble:

; 393  : 			}
; 394  : 			else if ( dwNewOptionRate <= this->m_iBagItemExcRate[0] + this->m_iBagItemExcRate[1] + this->m_iBagItemExcRate[2])

  00eb6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00eb9	8b 88 20 02 00
	00		 mov	 ecx, DWORD PTR [eax+544]
  00ebf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ec2	03 8a 24 02 00
	00		 add	 ecx, DWORD PTR [edx+548]
  00ec8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ecb	03 88 28 02 00
	00		 add	 ecx, DWORD PTR [eax+552]
  00ed1	39 4d c4	 cmp	 DWORD PTR _dwNewOptionRate$228028[ebp], ecx
  00ed4	77 12		 ja	 SHORT $LN41@TryGamble

; 395  : 			{
; 396  : 				NewOp = this->SortExcNumberPerKind(3);

  00ed6	6a 03		 push	 3
  00ed8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00edb	e8 00 00 00 00	 call	 ?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z ; CGambleSystem::SortExcNumberPerKind
  00ee0	0f b6 c0	 movzx	 eax, al
  00ee3	89 45 d0	 mov	 DWORD PTR _NewOp$[ebp], eax
  00ee6	eb 39		 jmp	 SHORT $LN39@TryGamble
$LN41@TryGamble:

; 397  : 			}
; 398  : 			else if ( dwNewOptionRate <= this->m_iBagItemExcRate[0] + this->m_iBagItemExcRate[1] + this->m_iBagItemExcRate[2] + this->m_iBagItemExcRate[3])

  00ee8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00eeb	8b 88 20 02 00
	00		 mov	 ecx, DWORD PTR [eax+544]
  00ef1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ef4	03 8a 24 02 00
	00		 add	 ecx, DWORD PTR [edx+548]
  00efa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00efd	03 88 28 02 00
	00		 add	 ecx, DWORD PTR [eax+552]
  00f03	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f06	03 8a 2c 02 00
	00		 add	 ecx, DWORD PTR [edx+556]
  00f0c	39 4d c4	 cmp	 DWORD PTR _dwNewOptionRate$228028[ebp], ecx
  00f0f	77 10		 ja	 SHORT $LN39@TryGamble

; 399  : 			{
; 400  : 				NewOp = this->SortExcNumberPerKind(4);

  00f11	6a 04		 push	 4
  00f13	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f16	e8 00 00 00 00	 call	 ?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z ; CGambleSystem::SortExcNumberPerKind
  00f1b	0f b6 c0	 movzx	 eax, al
  00f1e	89 45 d0	 mov	 DWORD PTR _NewOp$[ebp], eax
$LN39@TryGamble:

; 401  : 			}
; 402  : 
; 403  : 			switch ( btRareItemNum ) //5 Types of Special Item

  00f21	0f b6 45 18	 movzx	 eax, BYTE PTR _btRareItemNum$[ebp]
  00f25	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv191[ebp], eax
  00f2b	83 bd 60 ff ff
	ff 04		 cmp	 DWORD PTR tv191[ebp], 4
  00f32	77 60		 ja	 SHORT $LN37@TryGamble
  00f34	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR tv191[ebp]
  00f3a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN58@TryGamble[ecx*4]
$LN36@TryGamble:

; 404  : 			{
; 405  : 				case 0:
; 406  : 					ItemType = ItemGetNumberMake(3, 11);

  00f41	6a 0b		 push	 11			; 0000000bH
  00f43	6a 03		 push	 3
  00f45	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00f4a	83 c4 08	 add	 esp, 8
  00f4d	89 45 f4	 mov	 DWORD PTR _ItemType$[ebp], eax

; 407  : 				break;

  00f50	eb 42		 jmp	 SHORT $LN37@TryGamble
$LN35@TryGamble:

; 408  : 				case 1:
; 409  : 					ItemType = ItemGetNumberMake(5, 33);

  00f52	6a 21		 push	 33			; 00000021H
  00f54	6a 05		 push	 5
  00f56	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00f5b	83 c4 08	 add	 esp, 8
  00f5e	89 45 f4	 mov	 DWORD PTR _ItemType$[ebp], eax

; 410  : 				break;

  00f61	eb 31		 jmp	 SHORT $LN37@TryGamble
$LN34@TryGamble:

; 411  : 				case 2:
; 412  : 					ItemType = ItemGetNumberMake(4, 24);

  00f63	6a 18		 push	 24			; 00000018H
  00f65	6a 04		 push	 4
  00f67	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00f6c	83 c4 08	 add	 esp, 8
  00f6f	89 45 f4	 mov	 DWORD PTR _ItemType$[ebp], eax

; 413  : 				break;

  00f72	eb 20		 jmp	 SHORT $LN37@TryGamble
$LN33@TryGamble:

; 414  : 				case 3:
; 415  : 					ItemType = ItemGetNumberMake(2, 18);

  00f74	6a 12		 push	 18			; 00000012H
  00f76	6a 02		 push	 2
  00f78	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00f7d	83 c4 08	 add	 esp, 8
  00f80	89 45 f4	 mov	 DWORD PTR _ItemType$[ebp], eax

; 416  : 				break;

  00f83	eb 0f		 jmp	 SHORT $LN37@TryGamble
$LN32@TryGamble:

; 417  : 				case 4:
; 418  : 					ItemType = ItemGetNumberMake(5, 34);

  00f85	6a 22		 push	 34			; 00000022H
  00f87	6a 05		 push	 5
  00f89	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00f8e	83 c4 08	 add	 esp, 8
  00f91	89 45 f4	 mov	 DWORD PTR _ItemType$[ebp], eax
$LN37@TryGamble:

; 419  : 				break;
; 420  : 			}
; 421  : 		}
; 422  : 		else //else for common items like a bag

  00f94	e9 0a 03 00 00	 jmp	 $LN1@TryGamble
$LN53@TryGamble:

; 423  : 		{
; 424  : 			int iBagNumberCount = 0;

  00f99	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _iBagNumberCount$228046[ebp], 0

; 425  : 			int iRandA = 0;

  00fa0	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _iRandA$228047[ebp], 0

; 426  : 			int iRandB = 0;

  00fa7	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _iRandB$228048[ebp], 0

; 427  : 			int iBagNumber = 0;

  00fae	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _iBagNumber$228049[ebp], 0

; 428  : 
; 429  : 			switch( btRareItemNum )

  00fb5	0f b6 45 18	 movzx	 eax, BYTE PTR _btRareItemNum$[ebp]
  00fb9	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv209[ebp], eax
  00fbf	83 bd 60 ff ff
	ff 04		 cmp	 DWORD PTR tv209[ebp], 4
  00fc6	77 38		 ja	 SHORT $LN29@TryGamble
  00fc8	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR tv209[ebp]
  00fce	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN59@TryGamble[ecx*4]
$LN28@TryGamble:

; 430  : 			{
; 431  : 				case 0:
; 432  : 					iBagNumber = 0;

  00fd5	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _iBagNumber$228049[ebp], 0

; 433  : 					break;

  00fdc	eb 22		 jmp	 SHORT $LN29@TryGamble
$LN27@TryGamble:

; 434  : 				case 1:
; 435  : 					iBagNumber = 5;

  00fde	c7 45 b4 05 00
	00 00		 mov	 DWORD PTR _iBagNumber$228049[ebp], 5

; 436  : 					break;

  00fe5	eb 19		 jmp	 SHORT $LN29@TryGamble
$LN26@TryGamble:

; 437  : 				case 2:
; 438  : 					iBagNumber = 10;

  00fe7	c7 45 b4 0a 00
	00 00		 mov	 DWORD PTR _iBagNumber$228049[ebp], 10 ; 0000000aH

; 439  : 					break;

  00fee	eb 10		 jmp	 SHORT $LN29@TryGamble
$LN25@TryGamble:

; 440  : 				case 3:
; 441  : 					iBagNumber = 15;

  00ff0	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR _iBagNumber$228049[ebp], 15 ; 0000000fH

; 442  : 					break;

  00ff7	eb 07		 jmp	 SHORT $LN29@TryGamble
$LN24@TryGamble:

; 443  : 				case 4:
; 444  : 					iBagNumber = 20;

  00ff9	c7 45 b4 14 00
	00 00		 mov	 DWORD PTR _iBagNumber$228049[ebp], 20 ; 00000014H
$LN29@TryGamble:

; 445  : 					break;
; 446  : 			}
; 447  : 
; 448  : 			DWORD dwSortItemRand = GetLargeRand() % 1000000;

  01000	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  01005	33 d2		 xor	 edx, edx
  01007	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0100c	f7 f1		 div	 ecx
  0100e	89 55 b0	 mov	 DWORD PTR _dwSortItemRand$228059[ebp], edx

; 449  : 			
; 450  : 			int iSortItemRate = 0;

  01011	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _iSortItemRate$228060[ebp], 0

; 451  : 
; 452  : 			for ( int i = iBagNumber; i < iBagNumber + GAMBLE_MAX_NORMAL_ITEM; i++)

  01018	8b 45 b4	 mov	 eax, DWORD PTR _iBagNumber$228049[ebp]
  0101b	89 45 a8	 mov	 DWORD PTR _i$228061[ebp], eax
  0101e	eb 09		 jmp	 SHORT $LN23@TryGamble
$LN22@TryGamble:
  01020	8b 45 a8	 mov	 eax, DWORD PTR _i$228061[ebp]
  01023	83 c0 01	 add	 eax, 1
  01026	89 45 a8	 mov	 DWORD PTR _i$228061[ebp], eax
$LN23@TryGamble:
  01029	8b 45 b4	 mov	 eax, DWORD PTR _iBagNumber$228049[ebp]
  0102c	83 c0 05	 add	 eax, 5
  0102f	39 45 a8	 cmp	 DWORD PTR _i$228061[ebp], eax
  01032	7d 25		 jge	 SHORT $LN21@TryGamble

; 453  : 			{
; 454  : 				iSortItemRate += this->m_GamblingInfo[i].m_iSortItemRate;

  01034	8b 45 a8	 mov	 eax, DWORD PTR _i$228061[ebp]
  01037	6b c0 14	 imul	 eax, 20			; 00000014H
  0103a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0103d	8b 55 ac	 mov	 edx, DWORD PTR _iSortItemRate$228060[ebp]
  01040	03 54 01 18	 add	 edx, DWORD PTR [ecx+eax+24]
  01044	89 55 ac	 mov	 DWORD PTR _iSortItemRate$228060[ebp], edx

; 455  : 
; 456  : 				if(dwSortItemRand <= iSortItemRate)

  01047	8b 45 b0	 mov	 eax, DWORD PTR _dwSortItemRand$228059[ebp]
  0104a	3b 45 ac	 cmp	 eax, DWORD PTR _iSortItemRate$228060[ebp]
  0104d	77 08		 ja	 SHORT $LN20@TryGamble

; 457  : 				{
; 458  : 					iBagNumber = i;

  0104f	8b 45 a8	 mov	 eax, DWORD PTR _i$228061[ebp]
  01052	89 45 b4	 mov	 DWORD PTR _iBagNumber$228049[ebp], eax

; 459  : 					break;

  01055	eb 02		 jmp	 SHORT $LN21@TryGamble
$LN20@TryGamble:

; 460  : 				}
; 461  : 			}

  01057	eb c7		 jmp	 SHORT $LN22@TryGamble
$LN21@TryGamble:

; 462  : 			
; 463  : 			while(true) //Max 25

  01059	b8 01 00 00 00	 mov	 eax, 1
  0105e	85 c0		 test	 eax, eax
  01060	74 3b		 je	 SHORT $LN18@TryGamble

; 464  : 			{
; 465  : 				iRandB += this->m_iDropRatePerItemCount[iBagNumberCount];

  01062	8b 45 c0	 mov	 eax, DWORD PTR _iBagNumberCount$228046[ebp]
  01065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01068	8b 55 b8	 mov	 edx, DWORD PTR _iRandB$228048[ebp]
  0106b	03 94 81 64 02
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+612]
  01072	89 55 b8	 mov	 DWORD PTR _iRandB$228048[ebp], edx

; 466  : 	
; 467  : 				if (iBagNumber <= iBagNumberCount)

  01075	8b 45 b4	 mov	 eax, DWORD PTR _iBagNumber$228049[ebp]
  01078	3b 45 c0	 cmp	 eax, DWORD PTR _iBagNumberCount$228046[ebp]
  0107b	7f 02		 jg	 SHORT $LN17@TryGamble

; 468  : 				{
; 469  : 					break;

  0107d	eb 1e		 jmp	 SHORT $LN18@TryGamble
$LN17@TryGamble:

; 470  : 				}
; 471  : 
; 472  : 				iRandA += this->m_iDropRatePerItemCount[iBagNumberCount];

  0107f	8b 45 c0	 mov	 eax, DWORD PTR _iBagNumberCount$228046[ebp]
  01082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01085	8b 55 bc	 mov	 edx, DWORD PTR _iRandA$228047[ebp]
  01088	03 94 81 64 02
	00 00		 add	 edx, DWORD PTR [ecx+eax*4+612]
  0108f	89 55 bc	 mov	 DWORD PTR _iRandA$228047[ebp], edx

; 473  : 				iBagNumberCount++;

  01092	8b 45 c0	 mov	 eax, DWORD PTR _iBagNumberCount$228046[ebp]
  01095	83 c0 01	 add	 eax, 1
  01098	89 45 c0	 mov	 DWORD PTR _iBagNumberCount$228046[ebp], eax

; 474  : 			}

  0109b	eb bc		 jmp	 SHORT $LN21@TryGamble
$LN18@TryGamble:

; 475  : 
; 476  : 			n = (GetLargeRand() % (iRandB - iRandA)) + iRandA;

  0109d	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  010a2	8b 4d b8	 mov	 ecx, DWORD PTR _iRandB$228048[ebp]
  010a5	2b 4d bc	 sub	 ecx, DWORD PTR _iRandA$228047[ebp]
  010a8	33 d2		 xor	 edx, edx
  010aa	f7 f1		 div	 ecx
  010ac	03 55 bc	 add	 edx, DWORD PTR _iRandA$228047[ebp]
  010af	89 55 d8	 mov	 DWORD PTR _n$[ebp], edx

; 477  : 		
; 478  : 			Dur = 0;

  010b2	d9 ee		 fldz
  010b4	d9 5d f8	 fstp	 DWORD PTR _Dur$[ebp]

; 479  : 			MapPosX = 0;

  010b7	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _MapPosX$[ebp], 0

; 480  : 			MapPosY = 0;

  010be	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _MapPosY$[ebp], 0

; 481  : 
; 482  : 			Level = this->GetLevel(n);

  010c5	8b 45 d8	 mov	 eax, DWORD PTR _n$[ebp]
  010c8	50		 push	 eax
  010c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010cc	e8 00 00 00 00	 call	 ?GetLevel@CGambleSystem@@QAEEH@Z ; CGambleSystem::GetLevel
  010d1	0f b6 c8	 movzx	 ecx, al
  010d4	89 4d f0	 mov	 DWORD PTR _Level$[ebp], ecx

; 483  : 
; 484  : 			ItemType = ItemGetNumberMake(this->BagObject[n].m_type,this->BagObject[n].m_index);

  010d7	8b 45 d8	 mov	 eax, DWORD PTR _n$[ebp]
  010da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010dd	0f b6 94 c1 cd
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax*8+717]
  010e5	52		 push	 edx
  010e6	8b 45 d8	 mov	 eax, DWORD PTR _n$[ebp]
  010e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010ec	0f b6 94 c1 cc
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax*8+716]
  010f4	52		 push	 edx
  010f5	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  010fa	83 c4 08	 add	 esp, 8
  010fd	89 45 f4	 mov	 DWORD PTR _ItemType$[ebp], eax

; 485  : 
; 486  : 			if (ItemType == -1)

  01100	83 7d f4 ff	 cmp	 DWORD PTR _ItemType$[ebp], -1
  01104	75 07		 jne	 SHORT $LN16@TryGamble

; 487  : 			{
; 488  : 				return 0;

  01106	32 c0		 xor	 al, al
  01108	e9 4f 02 00 00	 jmp	 $LN56@TryGamble
$LN16@TryGamble:

; 489  : 			}
; 490  : 
; 491  : 			if( this->BagObject[n].m_isskill != 0)

  0110d	8b 45 d8	 mov	 eax, DWORD PTR _n$[ebp]
  01110	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01113	0f b6 94 c1 d0
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax*8+720]
  0111b	85 d2		 test	 edx, edx
  0111d	74 24		 je	 SHORT $LN14@TryGamble

; 492  : 			{
; 493  : 				if (this->m_GamblingInfo[iBagNumber].m_iSkillRate >= GetLargeRand()%1000000)

  0111f	8b 75 b4	 mov	 esi, DWORD PTR _iBagNumber$228049[ebp]
  01122	6b f6 14	 imul	 esi, 20			; 00000014H
  01125	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0112a	33 d2		 xor	 edx, edx
  0112c	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  01131	f7 f1		 div	 ecx
  01133	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01136	39 54 30 08	 cmp	 DWORD PTR [eax+esi+8], edx
  0113a	72 07		 jb	 SHORT $LN14@TryGamble

; 494  : 				{
; 495  : 					Op1 = 1;

  0113c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Op1$[ebp], 1
$LN14@TryGamble:

; 496  : 				}
; 497  : 			}
; 498  : 
; 499  : 			if(this->BagObject[n].m_isluck != 0)

  01143	8b 45 d8	 mov	 eax, DWORD PTR _n$[ebp]
  01146	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01149	0f b6 94 c1 d1
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax*8+721]
  01151	85 d2		 test	 edx, edx
  01153	74 24		 je	 SHORT $LN12@TryGamble

; 500  : 			{
; 501  : 				if (this->m_GamblingInfo[iBagNumber].m_iLuckRate >= GetLargeRand()%1000000)

  01155	8b 75 b4	 mov	 esi, DWORD PTR _iBagNumber$228049[ebp]
  01158	6b f6 14	 imul	 esi, 20			; 00000014H
  0115b	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  01160	33 d2		 xor	 edx, edx
  01162	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  01167	f7 f1		 div	 ecx
  01169	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0116c	39 54 30 0c	 cmp	 DWORD PTR [eax+esi+12], edx
  01170	72 07		 jb	 SHORT $LN12@TryGamble

; 502  : 				{
; 503  : 					Op2 = 1;

  01172	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Op2$[ebp], 1
$LN12@TryGamble:

; 504  : 				}
; 505  : 			}
; 506  : 
; 507  : 			if(this->BagObject[n].m_isoption != 0)

  01179	8b 45 d8	 mov	 eax, DWORD PTR _n$[ebp]
  0117c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0117f	0f b6 94 c1 d2
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax*8+722]
  01187	85 d2		 test	 edx, edx
  01189	0f 84 c2 00 00
	00		 je	 $LN3@TryGamble

; 508  : 			{
; 509  : 				if (this->m_GamblingInfo[iBagNumber].m_iOptionRate >= GetLargeRand()%1000000)

  0118f	8b 75 b4	 mov	 esi, DWORD PTR _iBagNumber$228049[ebp]
  01192	6b f6 14	 imul	 esi, 20			; 00000014H
  01195	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0119a	33 d2		 xor	 edx, edx
  0119c	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  011a1	f7 f1		 div	 ecx
  011a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011a6	39 54 30 10	 cmp	 DWORD PTR [eax+esi+16], edx
  011aa	0f 82 a1 00 00
	00		 jb	 $LN3@TryGamble

; 510  : 				{
; 511  : 					int iOpt3Rand = GetLargeRand() % 1000000;

  011b0	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  011b5	33 d2		 xor	 edx, edx
  011b7	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  011bc	f7 f1		 div	 ecx
  011be	89 55 a4	 mov	 DWORD PTR _iOpt3Rand$228077[ebp], edx

; 512  : 
; 513  : 					if ( iOpt3Rand <= this->m_iBagItemOptionRate[0])

  011c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011c4	8b 4d a4	 mov	 ecx, DWORD PTR _iOpt3Rand$228077[ebp]
  011c7	3b 88 fc 01 00
	00		 cmp	 ecx, DWORD PTR [eax+508]
  011cd	7f 09		 jg	 SHORT $LN9@TryGamble

; 514  : 					{
; 515  : 						Op3 = 1;

  011cf	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 1
  011d6	eb 79		 jmp	 SHORT $LN3@TryGamble
$LN9@TryGamble:

; 516  : 					}
; 517  : 					else if ( iOpt3Rand <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1])

  011d8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011db	8b 88 fc 01 00
	00		 mov	 ecx, DWORD PTR [eax+508]
  011e1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  011e4	03 8a 00 02 00
	00		 add	 ecx, DWORD PTR [edx+512]
  011ea	39 4d a4	 cmp	 DWORD PTR _iOpt3Rand$228077[ebp], ecx
  011ed	7f 09		 jg	 SHORT $LN7@TryGamble

; 518  : 					{
; 519  : 						Op3 = 2;

  011ef	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 2
  011f6	eb 59		 jmp	 SHORT $LN3@TryGamble
$LN7@TryGamble:

; 520  : 					}
; 521  : 					else if ( iOpt3Rand <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1] + this->m_iBagItemOptionRate[2])

  011f8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011fb	8b 88 fc 01 00
	00		 mov	 ecx, DWORD PTR [eax+508]
  01201	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01204	03 8a 00 02 00
	00		 add	 ecx, DWORD PTR [edx+512]
  0120a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0120d	03 88 04 02 00
	00		 add	 ecx, DWORD PTR [eax+516]
  01213	39 4d a4	 cmp	 DWORD PTR _iOpt3Rand$228077[ebp], ecx
  01216	7f 09		 jg	 SHORT $LN5@TryGamble

; 522  : 					{
; 523  : 						Op3 = 3;

  01218	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 3
  0121f	eb 30		 jmp	 SHORT $LN3@TryGamble
$LN5@TryGamble:

; 524  : 					}
; 525  : 					else if ( iOpt3Rand <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1] + this->m_iBagItemOptionRate[2] + this->m_iBagItemOptionRate[3])

  01221	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01224	8b 88 fc 01 00
	00		 mov	 ecx, DWORD PTR [eax+508]
  0122a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0122d	03 8a 00 02 00
	00		 add	 ecx, DWORD PTR [edx+512]
  01233	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01236	03 88 04 02 00
	00		 add	 ecx, DWORD PTR [eax+516]
  0123c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0123f	03 8a 08 02 00
	00		 add	 ecx, DWORD PTR [edx+520]
  01245	39 4d a4	 cmp	 DWORD PTR _iOpt3Rand$228077[ebp], ecx
  01248	7f 07		 jg	 SHORT $LN3@TryGamble

; 526  : 					{
; 527  : 						Op3 = 4;

  0124a	c7 45 dc 04 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 4
$LN3@TryGamble:

; 528  : 					}
; 529  : 				}
; 530  : 			}
; 531  : 			
; 532  : 			if(this->BagObject[n].m_isexitem != 0)

  01251	8b 45 d8	 mov	 eax, DWORD PTR _n$[ebp]
  01254	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01257	0f b6 94 c1 d3
	02 00 00	 movzx	 edx, BYTE PTR [ecx+eax*8+723]
  0125f	85 d2		 test	 edx, edx
  01261	74 40		 je	 SHORT $LN1@TryGamble

; 533  : 			{
; 534  : 				if (this->m_GamblingInfo[iBagNumber].m_iExcRate >= GetLargeRand()%1000000)

  01263	8b 75 b4	 mov	 esi, DWORD PTR _iBagNumber$228049[ebp]
  01266	6b f6 14	 imul	 esi, 20			; 00000014H
  01269	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0126e	33 d2		 xor	 edx, edx
  01270	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  01275	f7 f1		 div	 ecx
  01277	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0127a	39 54 30 14	 cmp	 DWORD PTR [eax+esi+20], edx
  0127e	72 23		 jb	 SHORT $LN1@TryGamble

; 535  : 				{
; 536  : 					NewOp = this->SortExcOption();

  01280	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01283	e8 00 00 00 00	 call	 ?SortExcOption@CGambleSystem@@QAEEXZ ; CGambleSystem::SortExcOption
  01288	0f b6 c0	 movzx	 eax, al
  0128b	89 45 d0	 mov	 DWORD PTR _NewOp$[ebp], eax

; 537  : 					
; 538  : 					Op2 = 0;

  0128e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Op2$[ebp], 0

; 539  : 					Op1 = 1;

  01295	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Op1$[ebp], 1

; 540  : 					Level = 0;	

  0129c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Level$[ebp], 0
$LN1@TryGamble:

; 541  : 				}
; 542  : 			}
; 543  : 		}
; 544  : 
; 545  : 		ItemSerialCreateSend(lpObj->m_Index,(BYTE)MapNumber,(BYTE)MapPosX,(BYTE)MapPosY,ItemType,(BYTE)Level,(BYTE)Dur,(BYTE)Op1,(BYTE)Op2,(BYTE)Op3,lpObj->m_Index,(BYTE)NewOp,0);

  012a3	6a 00		 push	 0
  012a5	0f b6 45 d0	 movzx	 eax, BYTE PTR _NewOp$[ebp]
  012a9	50		 push	 eax
  012aa	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  012ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  012af	52		 push	 edx
  012b0	0f b6 45 dc	 movzx	 eax, BYTE PTR _Op3$[ebp]
  012b4	50		 push	 eax
  012b5	0f b6 4d e0	 movzx	 ecx, BYTE PTR _Op2$[ebp]
  012b9	51		 push	 ecx
  012ba	0f b6 55 e4	 movzx	 edx, BYTE PTR _Op1$[ebp]
  012be	52		 push	 edx
  012bf	d9 45 f8	 fld	 DWORD PTR _Dur$[ebp]
  012c2	d9 bd 62 ff ff
	ff		 fnstcw	 WORD PTR tv575[ebp]
  012c8	0f b7 85 62 ff
	ff ff		 movzx	 eax, WORD PTR tv575[ebp]
  012cf	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  012d4	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv578[ebp], eax
  012da	d9 ad 5c ff ff
	ff		 fldcw	 WORD PTR tv578[ebp]
  012e0	db 9d 58 ff ff
	ff		 fistp	 DWORD PTR tv580[ebp]
  012e6	d9 ad 62 ff ff
	ff		 fldcw	 WORD PTR tv575[ebp]
  012ec	0f b6 85 58 ff
	ff ff		 movzx	 eax, BYTE PTR tv580[ebp]
  012f3	50		 push	 eax
  012f4	0f b6 4d f0	 movzx	 ecx, BYTE PTR _Level$[ebp]
  012f8	51		 push	 ecx
  012f9	8b 55 f4	 mov	 edx, DWORD PTR _ItemType$[ebp]
  012fc	52		 push	 edx
  012fd	0f b6 45 e8	 movzx	 eax, BYTE PTR _MapPosY$[ebp]
  01301	50		 push	 eax
  01302	0f b6 4d ec	 movzx	 ecx, BYTE PTR _MapPosX$[ebp]
  01306	51		 push	 ecx
  01307	0f b6 55 0c	 movzx	 edx, BYTE PTR _MapNumber$[ebp]
  0130b	52		 push	 edx
  0130c	8b 45 cc	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0130f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01311	51		 push	 ecx
  01312	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  01317	83 c4 34	 add	 esp, 52			; 00000034H

; 546  : 		LogAddTD("[ GAMBLING ][ TryGambling ] %s(%s) Try Item : [%s]%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",lpObj->AccountID,lpObj->Name,ItemAttribute[ItemType].Name,ItemType,Level,Op1,Op2, Op3,NewOp);

  0131a	8b 45 d0	 mov	 eax, DWORD PTR _NewOp$[ebp]
  0131d	50		 push	 eax
  0131e	8b 4d dc	 mov	 ecx, DWORD PTR _Op3$[ebp]
  01321	51		 push	 ecx
  01322	8b 55 e0	 mov	 edx, DWORD PTR _Op2$[ebp]
  01325	52		 push	 edx
  01326	8b 45 e4	 mov	 eax, DWORD PTR _Op1$[ebp]
  01329	50		 push	 eax
  0132a	8b 4d f0	 mov	 ecx, DWORD PTR _Level$[ebp]
  0132d	51		 push	 ecx
  0132e	8b 55 f4	 mov	 edx, DWORD PTR _ItemType$[ebp]
  01331	52		 push	 edx
  01332	8b 45 f4	 mov	 eax, DWORD PTR _ItemType$[ebp]
  01335	6b c0 70	 imul	 eax, 112		; 00000070H
  01338	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0133d	50		 push	 eax
  0133e	8b 4d cc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01341	83 c1 77	 add	 ecx, 119		; 00000077H
  01344	51		 push	 ecx
  01345	8b 55 cc	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01348	83 c2 6c	 add	 edx, 108		; 0000006cH
  0134b	52		 push	 edx
  0134c	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@
  01351	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01357	83 c4 28	 add	 esp, 40			; 00000028H
$LN54@TryGamble:

; 547  : 	}
; 548  : 	return 1;

  0135a	b0 01		 mov	 al, 1
$LN56@TryGamble:

; 549  : }

  0135c	5f		 pop	 edi
  0135d	5e		 pop	 esi
  0135e	5b		 pop	 ebx
  0135f	8b e5		 mov	 esp, ebp
  01361	5d		 pop	 ebp
  01362	c2 14 00	 ret	 20			; 00000014H
  01365	8d 49 00	 npad	 3
$LN58@TryGamble:
  01368	00 00 00 00	 DD	 $LN36@TryGamble
  0136c	00 00 00 00	 DD	 $LN35@TryGamble
  01370	00 00 00 00	 DD	 $LN34@TryGamble
  01374	00 00 00 00	 DD	 $LN33@TryGamble
  01378	00 00 00 00	 DD	 $LN32@TryGamble
$LN59@TryGamble:
  0137c	00 00 00 00	 DD	 $LN28@TryGamble
  01380	00 00 00 00	 DD	 $LN27@TryGamble
  01384	00 00 00 00	 DD	 $LN26@TryGamble
  01388	00 00 00 00	 DD	 $LN25@TryGamble
  0138c	00 00 00 00	 DD	 $LN24@TryGamble
?TryGamble@CGambleSystem@@QAEEHEHHE@Z ENDP		; CGambleSystem::TryGamble
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?GetBagItemCount@CGambleSystem@@QAEHXZ PROC		; CGambleSystem::GetBagItemCount
; _this$ = ecx

; 552  : {

  01390	55		 push	 ebp
  01391	8b ec		 mov	 ebp, esp
  01393	83 ec 44	 sub	 esp, 68			; 00000044H
  01396	53		 push	 ebx
  01397	56		 push	 esi
  01398	57		 push	 edi
  01399	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 553  : 	return m_iGambleBagCount;

  0139c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0139f	8b 80 60 02 00
	00		 mov	 eax, DWORD PTR [eax+608]

; 554  : }

  013a5	5f		 pop	 edi
  013a6	5e		 pop	 esi
  013a7	5b		 pop	 ebx
  013a8	8b e5		 mov	 esp, ebp
  013aa	5d		 pop	 ebp
  013ab	c3		 ret	 0
?GetBagItemCount@CGambleSystem@@QAEHXZ ENDP		; CGambleSystem::GetBagItemCount
; Function compile flags: /Odtp /ZI
_iItemIndex$ = -16					; size = 4
_iFullOptRate$ = -12					; size = 4
_btExOption$ = -5					; size = 1
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z PROC	; CGambleSystem::SortExcNumberPerKind
; _this$ = ecx

; 557  : {

  013b0	55		 push	 ebp
  013b1	8b ec		 mov	 ebp, esp
  013b3	83 ec 50	 sub	 esp, 80			; 00000050H
  013b6	53		 push	 ebx
  013b7	56		 push	 esi
  013b8	57		 push	 edi
  013b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 558  : 	BYTE btExOption = 0;

  013bc	c6 45 fb 00	 mov	 BYTE PTR _btExOption$[ebp], 0

; 559  : 	int iFullOptRate = 0;

  013c0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iFullOptRate$[ebp], 0

; 560  : 	int iItemIndex = 0;

  013c7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iItemIndex$[ebp], 0
$LN8@SortExcNum:

; 561  : 
; 562  : 	while(true)

  013ce	b8 01 00 00 00	 mov	 eax, 1
  013d3	85 c0		 test	 eax, eax
  013d5	0f 84 87 00 00
	00		 je	 $LN7@SortExcNum

; 563  : 	{
; 564  : 		if (this->m_iExcRatePerItemKind[iItemIndex] >= GetLargeRand() % 1000000)

  013db	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  013e0	33 d2		 xor	 edx, edx
  013e2	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  013e7	f7 f1		 div	 ecx
  013e9	8b 45 f0	 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  013ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013ef	39 94 81 30 02
	00 00		 cmp	 DWORD PTR [ecx+eax*4+560], edx
  013f6	72 15		 jb	 SHORT $LN6@SortExcNum

; 565  : 		{
; 566  : 			btExOption |= 1 << iItemIndex;

  013f8	b8 01 00 00 00	 mov	 eax, 1
  013fd	8b 4d f0	 mov	 ecx, DWORD PTR _iItemIndex$[ebp]
  01400	d3 e0		 shl	 eax, cl
  01402	0f b6 4d fb	 movzx	 ecx, BYTE PTR _btExOption$[ebp]
  01406	0b c8		 or	 ecx, eax
  01408	88 4d fb	 mov	 BYTE PTR _btExOption$[ebp], cl

; 567  : 		}
; 568  : 		else

  0140b	eb 09		 jmp	 SHORT $LN5@SortExcNum
$LN6@SortExcNum:

; 569  : 		{
; 570  : 			iFullOptRate++;

  0140d	8b 45 f4	 mov	 eax, DWORD PTR _iFullOptRate$[ebp]
  01410	83 c0 01	 add	 eax, 1
  01413	89 45 f4	 mov	 DWORD PTR _iFullOptRate$[ebp], eax
$LN5@SortExcNum:

; 571  : 		}
; 572  : 
; 573  : 		if(iFullOptRate >= 6-n)

  01416	b8 06 00 00 00	 mov	 eax, 6
  0141b	2b 45 08	 sub	 eax, DWORD PTR _n$[ebp]
  0141e	39 45 f4	 cmp	 DWORD PTR _iFullOptRate$[ebp], eax
  01421	7c 31		 jl	 SHORT $LN4@SortExcNum
$LN3@SortExcNum:

; 574  : 		{
; 575  : 			while(true)

  01423	b8 01 00 00 00	 mov	 eax, 1
  01428	85 c0		 test	 eax, eax
  0142a	74 26		 je	 SHORT $LN2@SortExcNum

; 576  : 			{
; 577  : 				iItemIndex++;

  0142c	8b 45 f0	 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  0142f	83 c0 01	 add	 eax, 1
  01432	89 45 f0	 mov	 DWORD PTR _iItemIndex$[ebp], eax

; 578  : 
; 579  : 				if(iItemIndex >= GAMBLE_MAX_SECRET_ITEM_TYPE)

  01435	83 7d f0 06	 cmp	 DWORD PTR _iItemIndex$[ebp], 6
  01439	7c 02		 jl	 SHORT $LN1@SortExcNum

; 580  : 				{
; 581  : 					break;

  0143b	eb 15		 jmp	 SHORT $LN2@SortExcNum
$LN1@SortExcNum:

; 582  : 				}
; 583  : 
; 584  : 				btExOption |= 1 << iItemIndex;

  0143d	b8 01 00 00 00	 mov	 eax, 1
  01442	8b 4d f0	 mov	 ecx, DWORD PTR _iItemIndex$[ebp]
  01445	d3 e0		 shl	 eax, cl
  01447	0f b6 4d fb	 movzx	 ecx, BYTE PTR _btExOption$[ebp]
  0144b	0b c8		 or	 ecx, eax
  0144d	88 4d fb	 mov	 BYTE PTR _btExOption$[ebp], cl

; 585  : 			}

  01450	eb d1		 jmp	 SHORT $LN3@SortExcNum
$LN2@SortExcNum:

; 586  : 			break;

  01452	eb 0e		 jmp	 SHORT $LN7@SortExcNum
$LN4@SortExcNum:

; 587  : 		}
; 588  : 		iItemIndex++;

  01454	8b 45 f0	 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  01457	83 c0 01	 add	 eax, 1
  0145a	89 45 f0	 mov	 DWORD PTR _iItemIndex$[ebp], eax

; 589  : 	}

  0145d	e9 6c ff ff ff	 jmp	 $LN8@SortExcNum
$LN7@SortExcNum:

; 590  : 
; 591  : 	return btExOption;

  01462	8a 45 fb	 mov	 al, BYTE PTR _btExOption$[ebp]

; 592  : }

  01465	5f		 pop	 edi
  01466	5e		 pop	 esi
  01467	5b		 pop	 ebx
  01468	8b e5		 mov	 esp, ebp
  0146a	5d		 pop	 ebp
  0146b	c2 04 00	 ret	 4
?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z ENDP	; CGambleSystem::SortExcNumberPerKind
; Function compile flags: /Odtp /ZI
_count$ = -16						; size = 4
_iItemIndex$ = -12					; size = 4
_btExOption$ = -5					; size = 1
_this$ = -4						; size = 4
?SortExcOption@CGambleSystem@@QAEEXZ PROC		; CGambleSystem::SortExcOption
; _this$ = ecx

; 595  : {

  01470	55		 push	 ebp
  01471	8b ec		 mov	 ebp, esp
  01473	83 ec 50	 sub	 esp, 80			; 00000050H
  01476	53		 push	 ebx
  01477	56		 push	 esi
  01478	57		 push	 edi
  01479	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 596  : 	BYTE btExOption = 0;

  0147c	c6 45 fb 00	 mov	 BYTE PTR _btExOption$[ebp], 0

; 597  : 	int iItemIndex = 0;

  01480	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iItemIndex$[ebp], 0

; 598  : 	int count = 0;

  01487	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN10@SortExcOpt:

; 599  : 
; 600  : 	while(true)

  0148e	b8 01 00 00 00	 mov	 eax, 1
  01493	85 c0		 test	 eax, eax
  01495	74 71		 je	 SHORT $LN9@SortExcOpt

; 601  : 	{
; 602  : 		if (this->m_iGeneralExcRate[iItemIndex] >= GetLargeRand() % 1000000)

  01497	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0149c	33 d2		 xor	 edx, edx
  0149e	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  014a3	f7 f1		 div	 ecx
  014a5	8b 45 f4	 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  014a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014ab	39 94 81 48 02
	00 00		 cmp	 DWORD PTR [ecx+eax*4+584], edx
  014b2	72 1c		 jb	 SHORT $LN8@SortExcOpt

; 603  : 		{
; 604  : 			btExOption |= 1 << iItemIndex;

  014b4	b8 01 00 00 00	 mov	 eax, 1
  014b9	8b 4d f4	 mov	 ecx, DWORD PTR _iItemIndex$[ebp]
  014bc	d3 e0		 shl	 eax, cl
  014be	0f b6 4d fb	 movzx	 ecx, BYTE PTR _btExOption$[ebp]
  014c2	0b c8		 or	 ecx, eax
  014c4	88 4d fb	 mov	 BYTE PTR _btExOption$[ebp], cl

; 605  : 			count++;

  014c7	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  014ca	83 c0 01	 add	 eax, 1
  014cd	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN8@SortExcOpt:

; 606  : 		}
; 607  : 
; 608  : 		iItemIndex++;

  014d0	8b 45 f4	 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  014d3	83 c0 01	 add	 eax, 1
  014d6	89 45 f4	 mov	 DWORD PTR _iItemIndex$[ebp], eax

; 609  : 
; 610  : 		if(count == 0)

  014d9	83 7d f0 00	 cmp	 DWORD PTR _count$[ebp], 0
  014dd	75 0f		 jne	 SHORT $LN7@SortExcOpt

; 611  : 		{
; 612  : 			if(iItemIndex >= GAMBLE_MAX_SECRET_ITEM_TYPE)

  014df	83 7d f4 06	 cmp	 DWORD PTR _iItemIndex$[ebp], 6
  014e3	7c 07		 jl	 SHORT $LN6@SortExcOpt

; 613  : 			{
; 614  : 				iItemIndex = 0;

  014e5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iItemIndex$[ebp], 0
$LN6@SortExcOpt:

; 615  : 			}
; 616  : 		}

  014ec	eb 18		 jmp	 SHORT $LN5@SortExcOpt
$LN7@SortExcOpt:

; 617  : 		else if(count == 1)

  014ee	83 7d f0 01	 cmp	 DWORD PTR _count$[ebp], 1
  014f2	75 0a		 jne	 SHORT $LN4@SortExcOpt

; 618  : 		{
; 619  : 			if(iItemIndex >= GAMBLE_MAX_SECRET_ITEM_TYPE)

  014f4	83 7d f4 06	 cmp	 DWORD PTR _iItemIndex$[ebp], 6
  014f8	7c 02		 jl	 SHORT $LN3@SortExcOpt

; 620  : 			{
; 621  : 				break;

  014fa	eb 0c		 jmp	 SHORT $LN9@SortExcOpt
$LN3@SortExcOpt:

; 622  : 			}
; 623  : 		}

  014fc	eb 08		 jmp	 SHORT $LN5@SortExcOpt
$LN4@SortExcOpt:

; 624  : 		else if(count >= 2)

  014fe	83 7d f0 02	 cmp	 DWORD PTR _count$[ebp], 2
  01502	7c 02		 jl	 SHORT $LN5@SortExcOpt

; 625  : 		{
; 626  : 			break;

  01504	eb 02		 jmp	 SHORT $LN9@SortExcOpt
$LN5@SortExcOpt:

; 627  : 		}
; 628  : 	}

  01506	eb 86		 jmp	 SHORT $LN10@SortExcOpt
$LN9@SortExcOpt:

; 629  : 
; 630  : 	return btExOption;

  01508	8a 45 fb	 mov	 al, BYTE PTR _btExOption$[ebp]

; 631  : }

  0150b	5f		 pop	 edi
  0150c	5e		 pop	 esi
  0150d	5b		 pop	 ebx
  0150e	8b e5		 mov	 esp, ebp
  01510	5d		 pop	 ebp
  01511	c3		 ret	 0
?SortExcOption@CGambleSystem@@QAEEXZ ENDP		; CGambleSystem::SortExcOption
_TEXT	ENDS
END
