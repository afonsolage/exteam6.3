; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\BlockMoveItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gBlockMoveIteml@@3VcBlockMoveItem@@A		; gBlockMoveIteml
_BSS	SEGMENT
?gBlockMoveIteml@@3VcBlockMoveItem@@A DB 01f50H DUP (?)	; gBlockMoveIteml
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_09DCMJNHKM@MaxExlOpt?$AA@			; `string'
PUBLIC	??_C@_08BFKFNBGC@MaxLevel?$AA@			; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CB@PBDPLLJ@?4?4?2Data?2ExData?2BlockMoveItem?4ini@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cBlockMoveItem@@QAEXXZ			; cBlockMoveItem::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\blockmoveitem.cpp
CONST	SEGMENT
??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@ DB '%d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09DCMJNHKM@MaxExlOpt?$AA@
CONST	SEGMENT
??_C@_09DCMJNHKM@MaxExlOpt?$AA@ DB 'MaxExlOpt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BFKFNBGC@MaxLevel?$AA@
CONST	SEGMENT
??_C@_08BFKFNBGC@MaxLevel?$AA@ DB 'MaxLevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PBDPLLJ@?4?4?2Data?2ExData?2BlockMoveItem?4ini@
CONST	SEGMENT
??_C@_0CB@PBDPLLJ@?4?4?2Data?2ExData?2BlockMoveItem?4ini@ DB '..\Data\ExD'
	DB	'ata\BlockMoveItem.ini', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$219021 = -284					; size = 8
_Flag$ = -276						; size = 4
_Buff$ = -272						; size = 256
_file$ = -16						; size = 4
_i$219005 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Load@cBlockMoveItem@@QAEXXZ PROC			; cBlockMoveItem::Load
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 11   : 	this->Enable = GetPrivateProfileInt("Common","Enable",0,BLOCK_MOVE_ITEM_DIR);

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PBDPLLJ@?4?4?2Data?2ExData?2BlockMoveItem?4ini@
  0001e	6a 00		 push	 0
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 01		 mov	 DWORD PTR [ecx], eax

; 12   : 	this->MaxLevel = GetPrivateProfileInt("Common","MaxLevel",0,BLOCK_MOVE_ITEM_DIR);

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PBDPLLJ@?4?4?2Data?2ExData?2BlockMoveItem?4ini@
  0003a	6a 00		 push	 0
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_08BFKFNBGC@MaxLevel?$AA@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 13   : 	this->MaxExlOpt = GetPrivateProfileInt("Common","MaxExlOpt",0,BLOCK_MOVE_ITEM_DIR);

  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PBDPLLJ@?4?4?2Data?2ExData?2BlockMoveItem?4ini@
  00057	6a 00		 push	 0
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_09DCMJNHKM@MaxExlOpt?$AA@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 14   : 	for(int i(0);i<BMI_MAX_ITEM;i++)

  0006f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$219005[ebp], 0
  00076	eb 09		 jmp	 SHORT $LN9@Load
$LN8@Load:
  00078	8b 45 f4	 mov	 eax, DWORD PTR _i$219005[ebp]
  0007b	83 c0 01	 add	 eax, 1
  0007e	89 45 f4	 mov	 DWORD PTR _i$219005[ebp], eax
$LN9@Load:
  00081	81 7d f4 e8 03
	00 00		 cmp	 DWORD PTR _i$219005[ebp], 1000 ; 000003e8H
  00088	7d 1e		 jge	 SHORT $LN7@Load

; 15   : 	{
; 16   : 		this->bmi[i].Type = 0;

  0008a	8b 45 f4	 mov	 eax, DWORD PTR _i$219005[ebp]
  0008d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	c7 44 c1 0c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+12], 0

; 17   : 		this->bmi[i].Index = 0;

  00098	8b 45 f4	 mov	 eax, DWORD PTR _i$219005[ebp]
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	c7 44 c1 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+16], 0

; 18   : 	}

  000a6	eb d0		 jmp	 SHORT $LN8@Load
$LN7@Load:

; 19   : 	FILE * file = fopen(BLOCK_MOVE_ITEM_DIR,"r");

  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PBDPLLJ@?4?4?2Data?2ExData?2BlockMoveItem?4ini@
  000b2	e8 00 00 00 00	 call	 _fopen
  000b7	83 c4 08	 add	 esp, 8
  000ba	89 45 f0	 mov	 DWORD PTR _file$[ebp], eax

; 20   : 	if(file == NULL)

  000bd	83 7d f0 00	 cmp	 DWORD PTR _file$[ebp], 0
  000c1	75 1d		 jne	 SHORT $LN6@Load

; 21   : 	{
; 22   : 		MessageBoxA(0,BLOCK_MOVE_ITEM_DIR,"LOAD FILE ERROR",0);

  000c3	6a 00		 push	 0
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PBDPLLJ@?4?4?2Data?2ExData?2BlockMoveItem?4ini@
  000cf	6a 00		 push	 0
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 23   : 		this->Enable = false;

  000d7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000da	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN6@Load:

; 24   : 	}
; 25   : 	if(!this->Enable)return;

  000e0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e6	75 05		 jne	 SHORT $LN5@Load
  000e8	e9 df 00 00 00	 jmp	 $LN10@Load
$LN5@Load:

; 26   : 
; 27   : 	char Buff[256];
; 28   : 	int Flag = 0;

  000ed	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0

; 29   : 	this->Count = 0;

  000f7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000fa	c7 80 4c 1f 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8012], 0
$LN4@Load:

; 30   : 
; 31   : 	while(!feof(file)) // Проверяем есть ли строка в документе

  00104	8b 45 f0	 mov	 eax, DWORD PTR _file$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 _feof
  0010d	83 c4 04	 add	 esp, 4
  00110	85 c0		 test	 eax, eax
  00112	0f 85 a8 00 00
	00		 jne	 $LN3@Load

; 32   : 	{
; 33   : 		fgets(Buff,256,file);//Функция читает текущую строку

  00118	8b 45 f0	 mov	 eax, DWORD PTR _file$[ebp]
  0011b	50		 push	 eax
  0011c	68 00 01 00 00	 push	 256			; 00000100H
  00121	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00127	51		 push	 ecx
  00128	e8 00 00 00 00	 call	 _fgets
  0012d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 34   : 		if(Ex_IsBadFileLine(Buff, Flag)) //Вспомогательная функция

  00130	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  00136	50		 push	 eax
  00137	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  00143	83 c4 08	 add	 esp, 8
  00146	0f b6 d0	 movzx	 edx, al
  00149	85 d2		 test	 edx, edx
  0014b	74 02		 je	 SHORT $LN2@Load

; 35   : 			continue;

  0014d	eb b5		 jmp	 SHORT $LN4@Load
$LN2@Load:

; 36   : 		if(Flag == 1)

  0014f	83 bd ec fe ff
	ff 01		 cmp	 DWORD PTR _Flag$[ebp], 1
  00156	75 63		 jne	 SHORT $LN1@Load

; 37   : 		{
; 38   : 			int n[2];
; 39   : 			sscanf(Buff, "%d %d", &n[0], &n[1]);

  00158	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _n$219021[ebp+4]
  0015e	50		 push	 eax
  0015f	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219021[ebp]
  00165	51		 push	 ecx
  00166	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  0016b	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  00171	52		 push	 edx
  00172	e8 00 00 00 00	 call	 _sscanf
  00177	83 c4 10	 add	 esp, 16			; 00000010H

; 40   : 			this->bmi[this->Count].Type = n[0];

  0017a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0017d	8b 88 4c 1f 00
	00		 mov	 ecx, DWORD PTR [eax+8012]
  00183	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00186	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _n$219021[ebp]
  0018c	89 44 ca 0c	 mov	 DWORD PTR [edx+ecx*8+12], eax

; 41   : 			this->bmi[this->Count].Index = n[1];

  00190	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00193	8b 88 4c 1f 00
	00		 mov	 ecx, DWORD PTR [eax+8012]
  00199	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0019c	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _n$219021[ebp+4]
  001a2	89 44 ca 10	 mov	 DWORD PTR [edx+ecx*8+16], eax

; 42   : 			this->Count++;

  001a6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a9	8b 88 4c 1f 00
	00		 mov	 ecx, DWORD PTR [eax+8012]
  001af	83 c1 01	 add	 ecx, 1
  001b2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001b5	89 8a 4c 1f 00
	00		 mov	 DWORD PTR [edx+8012], ecx
$LN1@Load:

; 43   : 		}
; 44   : 	}

  001bb	e9 44 ff ff ff	 jmp	 $LN4@Load
$LN3@Load:

; 45   : 	fclose(file);

  001c0	8b 45 f0	 mov	 eax, DWORD PTR _file$[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _fclose
  001c9	83 c4 04	 add	 esp, 4
$LN10@Load:

; 46   : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d2	33 cd		 xor	 ecx, ebp
  001d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c3		 ret	 0
?Load@cBlockMoveItem@@QAEXXZ ENDP			; cBlockMoveItem::Load
_TEXT	ENDS
PUBLIC	?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z	; cBlockMoveItem::ItemMoveBlockExlOpt
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv66 = -76						; size = 4
_ExlOptCount$ = -8					; size = 4
_this$ = -4						; size = 4
_exlopt_num$ = 8					; size = 4
?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z PROC	; cBlockMoveItem::ItemMoveBlockExlOpt
; _this$ = ecx

; 49   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  001e6	53		 push	 ebx
  001e7	56		 push	 esi
  001e8	57		 push	 edi
  001e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : //#ifdef DEBUG_CODE
; 51   : 	//LogAddC(2,"EXL MOVE %d",exlopt_num);
; 52   : //#endif
; 53   : 	if(this->MaxExlOpt == 0) return true;

  001ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  001f3	75 07		 jne	 SHORT $LN69@ItemMoveBl
  001f5	b0 01		 mov	 al, 1
  001f7	e9 05 03 00 00	 jmp	 $LN70@ItemMoveBl
$LN69@ItemMoveBl:

; 54   : 	int ExlOptCount = 0;

  001fc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 0

; 55   : 	switch (exlopt_num)

  00203	8b 45 08	 mov	 eax, DWORD PTR _exlopt_num$[ebp]
  00206	89 45 b4	 mov	 DWORD PTR tv66[ebp], eax
  00209	83 7d b4 3f	 cmp	 DWORD PTR tv66[ebp], 63	; 0000003fH
  0020d	0f 87 db 02 00
	00		 ja	 $LN67@ItemMoveBl
  00213	8b 4d b4	 mov	 ecx, DWORD PTR tv66[ebp]
  00216	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN72@ItemMoveBl[ecx*4]
$LN66@ItemMoveBl:

; 56   : 	{
; 57   : 		case 0: ExlOptCount = 0; break; case 1: ExlOptCount = 1; break; case 2: ExlOptCount = 1; break; case 3: ExlOptCount = 2; break; case 4: ExlOptCount = 1; break;

  0021d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 0
  00224	e9 c5 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN65@ItemMoveBl:
  00229	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 1
  00230	e9 b9 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN64@ItemMoveBl:
  00235	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 1
  0023c	e9 ad 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN63@ItemMoveBl:
  00241	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  00248	e9 a1 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN62@ItemMoveBl:
  0024d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 1
  00254	e9 95 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN61@ItemMoveBl:

; 58   : 		case 5: ExlOptCount = 2; break; case 6: ExlOptCount = 2; break; case 7: ExlOptCount = 3; break; case 8: ExlOptCount = 1; break; case 9: ExlOptCount = 2; break;

  00259	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  00260	e9 89 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN60@ItemMoveBl:
  00265	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  0026c	e9 7d 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN59@ItemMoveBl:
  00271	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  00278	e9 71 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN58@ItemMoveBl:
  0027d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 1
  00284	e9 65 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN57@ItemMoveBl:
  00289	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  00290	e9 59 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN56@ItemMoveBl:

; 59   : 		case 10:ExlOptCount = 2; break; case 11:ExlOptCount = 3; break; case 12:ExlOptCount = 2; break; case 13:ExlOptCount = 3; break; case 14:ExlOptCount = 3; break;

  00295	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  0029c	e9 4d 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN55@ItemMoveBl:
  002a1	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  002a8	e9 41 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN54@ItemMoveBl:
  002ad	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  002b4	e9 35 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN53@ItemMoveBl:
  002b9	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  002c0	e9 29 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN52@ItemMoveBl:
  002c5	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  002cc	e9 1d 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN51@ItemMoveBl:

; 60   : 		case 15:ExlOptCount = 4; break; case 16:ExlOptCount = 1; break; case 17:ExlOptCount = 2; break; case 18:ExlOptCount = 2; break; case 19:ExlOptCount = 3; break;

  002d1	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  002d8	e9 11 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN50@ItemMoveBl:
  002dd	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 1
  002e4	e9 05 02 00 00	 jmp	 $LN67@ItemMoveBl
$LN49@ItemMoveBl:
  002e9	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  002f0	e9 f9 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN48@ItemMoveBl:
  002f5	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  002fc	e9 ed 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN47@ItemMoveBl:
  00301	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  00308	e9 e1 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN46@ItemMoveBl:

; 61   : 		case 20:ExlOptCount = 2; break; case 21:ExlOptCount = 3; break; case 22:ExlOptCount = 3; break; case 23:ExlOptCount = 4; break; case 24:ExlOptCount = 2; break;

  0030d	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  00314	e9 d5 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN45@ItemMoveBl:
  00319	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  00320	e9 c9 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN44@ItemMoveBl:
  00325	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  0032c	e9 bd 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN43@ItemMoveBl:
  00331	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  00338	e9 b1 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN42@ItemMoveBl:
  0033d	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  00344	e9 a5 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN41@ItemMoveBl:

; 62   : 		case 25:ExlOptCount = 3; break; case 26:ExlOptCount = 3; break; case 27:ExlOptCount = 4; break; case 28:ExlOptCount = 3; break; case 29:ExlOptCount = 4; break;

  00349	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  00350	e9 99 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN40@ItemMoveBl:
  00355	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  0035c	e9 8d 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN39@ItemMoveBl:
  00361	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  00368	e9 81 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN38@ItemMoveBl:
  0036d	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  00374	e9 75 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN37@ItemMoveBl:
  00379	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  00380	e9 69 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN36@ItemMoveBl:

; 63   : 		case 30:ExlOptCount = 4; break; case 31:ExlOptCount = 5; break; case 32:ExlOptCount = 1; break; case 33:ExlOptCount = 2; break; case 34:ExlOptCount = 2; break;

  00385	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  0038c	e9 5d 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN35@ItemMoveBl:
  00391	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 5
  00398	e9 51 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN34@ItemMoveBl:
  0039d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 1
  003a4	e9 45 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN33@ItemMoveBl:
  003a9	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  003b0	e9 39 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN32@ItemMoveBl:
  003b5	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  003bc	e9 2d 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN31@ItemMoveBl:

; 64   : 		case 35:ExlOptCount = 3; break; case 36:ExlOptCount = 2; break; case 37:ExlOptCount = 3; break; case 38:ExlOptCount = 3; break; case 39:ExlOptCount = 4; break;

  003c1	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  003c8	e9 21 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN30@ItemMoveBl:
  003cd	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  003d4	e9 15 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN29@ItemMoveBl:
  003d9	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  003e0	e9 09 01 00 00	 jmp	 $LN67@ItemMoveBl
$LN28@ItemMoveBl:
  003e5	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  003ec	e9 fd 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN27@ItemMoveBl:
  003f1	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  003f8	e9 f1 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN26@ItemMoveBl:

; 65   : 		case 40:ExlOptCount = 2; break; case 41:ExlOptCount = 3; break; case 42:ExlOptCount = 3; break; case 43:ExlOptCount = 4; break; case 44:ExlOptCount = 3; break;

  003fd	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  00404	e9 e5 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN25@ItemMoveBl:
  00409	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  00410	e9 d9 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN24@ItemMoveBl:
  00415	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  0041c	e9 cd 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN23@ItemMoveBl:
  00421	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  00428	e9 c1 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN22@ItemMoveBl:
  0042d	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  00434	e9 b5 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN21@ItemMoveBl:

; 66   : 		case 45:ExlOptCount = 4; break; case 46:ExlOptCount = 4; break; case 47:ExlOptCount = 5; break; case 48:ExlOptCount = 2; break; case 49:ExlOptCount = 3; break;

  00439	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  00440	e9 a9 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN20@ItemMoveBl:
  00445	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  0044c	e9 9d 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN19@ItemMoveBl:
  00451	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 5
  00458	e9 91 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN18@ItemMoveBl:
  0045d	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 2
  00464	e9 85 00 00 00	 jmp	 $LN67@ItemMoveBl
$LN17@ItemMoveBl:
  00469	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  00470	eb 7c		 jmp	 SHORT $LN67@ItemMoveBl
$LN16@ItemMoveBl:

; 67   : 		case 50:ExlOptCount = 3; break; case 51:ExlOptCount = 4; break; case 52:ExlOptCount = 3; break; case 53:ExlOptCount = 4; break; case 54:ExlOptCount = 4; break;

  00472	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  00479	eb 73		 jmp	 SHORT $LN67@ItemMoveBl
$LN15@ItemMoveBl:
  0047b	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  00482	eb 6a		 jmp	 SHORT $LN67@ItemMoveBl
$LN14@ItemMoveBl:
  00484	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  0048b	eb 61		 jmp	 SHORT $LN67@ItemMoveBl
$LN13@ItemMoveBl:
  0048d	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  00494	eb 58		 jmp	 SHORT $LN67@ItemMoveBl
$LN12@ItemMoveBl:
  00496	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  0049d	eb 4f		 jmp	 SHORT $LN67@ItemMoveBl
$LN11@ItemMoveBl:

; 68   : 		case 55:ExlOptCount = 5; break; case 56:ExlOptCount = 3; break; case 57:ExlOptCount = 4; break; case 58:ExlOptCount = 4; break; case 59:ExlOptCount = 5; break;

  0049f	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 5
  004a6	eb 46		 jmp	 SHORT $LN67@ItemMoveBl
$LN10@ItemMoveBl:
  004a8	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 3
  004af	eb 3d		 jmp	 SHORT $LN67@ItemMoveBl
$LN9@ItemMoveBl:
  004b1	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  004b8	eb 34		 jmp	 SHORT $LN67@ItemMoveBl
$LN8@ItemMoveBl:
  004ba	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  004c1	eb 2b		 jmp	 SHORT $LN67@ItemMoveBl
$LN7@ItemMoveBl:
  004c3	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 5
  004ca	eb 22		 jmp	 SHORT $LN67@ItemMoveBl
$LN6@ItemMoveBl:

; 69   : 		case 60:ExlOptCount = 4; break; case 61:ExlOptCount = 5; break; case 62:ExlOptCount = 5; break; case 63:ExlOptCount = 6; break; 

  004cc	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 4
  004d3	eb 19		 jmp	 SHORT $LN67@ItemMoveBl
$LN5@ItemMoveBl:
  004d5	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 5
  004dc	eb 10		 jmp	 SHORT $LN67@ItemMoveBl
$LN4@ItemMoveBl:
  004de	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 5
  004e5	eb 07		 jmp	 SHORT $LN67@ItemMoveBl
$LN3@ItemMoveBl:
  004e7	c7 45 f8 06 00
	00 00		 mov	 DWORD PTR _ExlOptCount$[ebp], 6
$LN67@ItemMoveBl:

; 70   : 	}
; 71   : 	//LogAddC(2,"EXL MOVE %d",ExlOptCount);
; 72   : 	if(ExlOptCount > this->MaxExlOpt) return false;

  004ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004f1	8b 4d f8	 mov	 ecx, DWORD PTR _ExlOptCount$[ebp]
  004f4	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  004f7	7e 06		 jle	 SHORT $LN2@ItemMoveBl
  004f9	32 c0		 xor	 al, al
  004fb	eb 04		 jmp	 SHORT $LN70@ItemMoveBl
  004fd	eb 02		 jmp	 SHORT $LN70@ItemMoveBl
$LN2@ItemMoveBl:

; 73   : 	else return true;

  004ff	b0 01		 mov	 al, 1
$LN70@ItemMoveBl:

; 74   : }

  00501	5f		 pop	 edi
  00502	5e		 pop	 esi
  00503	5b		 pop	 ebx
  00504	8b e5		 mov	 esp, ebp
  00506	5d		 pop	 ebp
  00507	c2 04 00	 ret	 4
  0050a	8b ff		 npad	 2
$LN72@ItemMoveBl:
  0050c	00 00 00 00	 DD	 $LN66@ItemMoveBl
  00510	00 00 00 00	 DD	 $LN65@ItemMoveBl
  00514	00 00 00 00	 DD	 $LN64@ItemMoveBl
  00518	00 00 00 00	 DD	 $LN63@ItemMoveBl
  0051c	00 00 00 00	 DD	 $LN62@ItemMoveBl
  00520	00 00 00 00	 DD	 $LN61@ItemMoveBl
  00524	00 00 00 00	 DD	 $LN60@ItemMoveBl
  00528	00 00 00 00	 DD	 $LN59@ItemMoveBl
  0052c	00 00 00 00	 DD	 $LN58@ItemMoveBl
  00530	00 00 00 00	 DD	 $LN57@ItemMoveBl
  00534	00 00 00 00	 DD	 $LN56@ItemMoveBl
  00538	00 00 00 00	 DD	 $LN55@ItemMoveBl
  0053c	00 00 00 00	 DD	 $LN54@ItemMoveBl
  00540	00 00 00 00	 DD	 $LN53@ItemMoveBl
  00544	00 00 00 00	 DD	 $LN52@ItemMoveBl
  00548	00 00 00 00	 DD	 $LN51@ItemMoveBl
  0054c	00 00 00 00	 DD	 $LN50@ItemMoveBl
  00550	00 00 00 00	 DD	 $LN49@ItemMoveBl
  00554	00 00 00 00	 DD	 $LN48@ItemMoveBl
  00558	00 00 00 00	 DD	 $LN47@ItemMoveBl
  0055c	00 00 00 00	 DD	 $LN46@ItemMoveBl
  00560	00 00 00 00	 DD	 $LN45@ItemMoveBl
  00564	00 00 00 00	 DD	 $LN44@ItemMoveBl
  00568	00 00 00 00	 DD	 $LN43@ItemMoveBl
  0056c	00 00 00 00	 DD	 $LN42@ItemMoveBl
  00570	00 00 00 00	 DD	 $LN41@ItemMoveBl
  00574	00 00 00 00	 DD	 $LN40@ItemMoveBl
  00578	00 00 00 00	 DD	 $LN39@ItemMoveBl
  0057c	00 00 00 00	 DD	 $LN38@ItemMoveBl
  00580	00 00 00 00	 DD	 $LN37@ItemMoveBl
  00584	00 00 00 00	 DD	 $LN36@ItemMoveBl
  00588	00 00 00 00	 DD	 $LN35@ItemMoveBl
  0058c	00 00 00 00	 DD	 $LN34@ItemMoveBl
  00590	00 00 00 00	 DD	 $LN33@ItemMoveBl
  00594	00 00 00 00	 DD	 $LN32@ItemMoveBl
  00598	00 00 00 00	 DD	 $LN31@ItemMoveBl
  0059c	00 00 00 00	 DD	 $LN30@ItemMoveBl
  005a0	00 00 00 00	 DD	 $LN29@ItemMoveBl
  005a4	00 00 00 00	 DD	 $LN28@ItemMoveBl
  005a8	00 00 00 00	 DD	 $LN27@ItemMoveBl
  005ac	00 00 00 00	 DD	 $LN26@ItemMoveBl
  005b0	00 00 00 00	 DD	 $LN25@ItemMoveBl
  005b4	00 00 00 00	 DD	 $LN24@ItemMoveBl
  005b8	00 00 00 00	 DD	 $LN23@ItemMoveBl
  005bc	00 00 00 00	 DD	 $LN22@ItemMoveBl
  005c0	00 00 00 00	 DD	 $LN21@ItemMoveBl
  005c4	00 00 00 00	 DD	 $LN20@ItemMoveBl
  005c8	00 00 00 00	 DD	 $LN19@ItemMoveBl
  005cc	00 00 00 00	 DD	 $LN18@ItemMoveBl
  005d0	00 00 00 00	 DD	 $LN17@ItemMoveBl
  005d4	00 00 00 00	 DD	 $LN16@ItemMoveBl
  005d8	00 00 00 00	 DD	 $LN15@ItemMoveBl
  005dc	00 00 00 00	 DD	 $LN14@ItemMoveBl
  005e0	00 00 00 00	 DD	 $LN13@ItemMoveBl
  005e4	00 00 00 00	 DD	 $LN12@ItemMoveBl
  005e8	00 00 00 00	 DD	 $LN11@ItemMoveBl
  005ec	00 00 00 00	 DD	 $LN10@ItemMoveBl
  005f0	00 00 00 00	 DD	 $LN9@ItemMoveBl
  005f4	00 00 00 00	 DD	 $LN8@ItemMoveBl
  005f8	00 00 00 00	 DD	 $LN7@ItemMoveBl
  005fc	00 00 00 00	 DD	 $LN6@ItemMoveBl
  00600	00 00 00 00	 DD	 $LN5@ItemMoveBl
  00604	00 00 00 00	 DD	 $LN4@ItemMoveBl
  00608	00 00 00 00	 DD	 $LN3@ItemMoveBl
?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z ENDP	; cBlockMoveItem::ItemMoveBlockExlOpt
_TEXT	ENDS
PUBLIC	?Move@cBlockMoveItem@@QAE_NHH@Z			; cBlockMoveItem::Move
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$219108 = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_Pos$ = 12						; size = 4
?Move@cBlockMoveItem@@QAE_NHH@Z PROC			; cBlockMoveItem::Move
; _this$ = ecx

; 77   : {

  00610	55		 push	 ebp
  00611	8b ec		 mov	 ebp, esp
  00613	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00616	53		 push	 ebx
  00617	56		 push	 esi
  00618	57		 push	 edi
  00619	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 	if(!this->Enable)return true;

  0061c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0061f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00622	75 07		 jne	 SHORT $LN7@Move
  00624	b0 01		 mov	 al, 1
  00626	e9 c0 00 00 00	 jmp	 $LN8@Move
$LN7@Move:

; 79   : 
; 80   : 	LPOBJ lpObj = &gObj[aIndex];

  0062b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0062e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00634	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0063a	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 81   : 
; 82   : 	if(lpObj->pInventory[Pos].m_Level > this->MaxLevel)

  0063d	8b 45 0c	 mov	 eax, DWORD PTR _Pos$[ebp]
  00640	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  00646	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00649	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0064f	0f bf 44 02 08	 movsx	 eax, WORD PTR [edx+eax+8]
  00654	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00657	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0065a	7e 07		 jle	 SHORT $LN6@Move

; 83   : 	{
; 84   : 		return false;

  0065c	32 c0		 xor	 al, al
  0065e	e9 88 00 00 00	 jmp	 $LN8@Move
$LN6@Move:

; 85   : 	}
; 86   : 
; 87   : 	if(this->ItemMoveBlockExlOpt(lpObj->pInventory[Pos].m_NewOption) == false)

  00663	8b 45 0c	 mov	 eax, DWORD PTR _Pos$[ebp]
  00666	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0066c	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0066f	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  00675	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  0067d	50		 push	 eax
  0067e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00681	e8 00 00 00 00	 call	 ?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z ; cBlockMoveItem::ItemMoveBlockExlOpt
  00686	0f b6 c8	 movzx	 ecx, al
  00689	85 c9		 test	 ecx, ecx
  0068b	75 04		 jne	 SHORT $LN5@Move

; 88   : 	{
; 89   : 		return false;

  0068d	32 c0		 xor	 al, al
  0068f	eb 5a		 jmp	 SHORT $LN8@Move
$LN5@Move:

; 90   : 	}
; 91   : 
; 92   : 	for(int i=0;i<this->Count;i++)

  00691	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$219108[ebp], 0
  00698	eb 09		 jmp	 SHORT $LN4@Move
$LN3@Move:
  0069a	8b 45 f4	 mov	 eax, DWORD PTR _i$219108[ebp]
  0069d	83 c0 01	 add	 eax, 1
  006a0	89 45 f4	 mov	 DWORD PTR _i$219108[ebp], eax
$LN4@Move:
  006a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006a6	8b 4d f4	 mov	 ecx, DWORD PTR _i$219108[ebp]
  006a9	3b 88 4c 1f 00
	00		 cmp	 ecx, DWORD PTR [eax+8012]
  006af	7d 38		 jge	 SHORT $LN2@Move

; 93   : 	{
; 94   : 		if(lpObj->pInventory[Pos].m_Type == ITEMGET(this->bmi[i].Type,this->bmi[i].Index))

  006b1	8b 45 0c	 mov	 eax, DWORD PTR _Pos$[ebp]
  006b4	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  006ba	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  006bd	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  006c3	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  006c8	8b 4d f4	 mov	 ecx, DWORD PTR _i$219108[ebp]
  006cb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006ce	8b 4c ca 0c	 mov	 ecx, DWORD PTR [edx+ecx*8+12]
  006d2	c1 e1 09	 shl	 ecx, 9
  006d5	8b 55 f4	 mov	 edx, DWORD PTR _i$219108[ebp]
  006d8	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  006db	03 4c d6 10	 add	 ecx, DWORD PTR [esi+edx*8+16]
  006df	3b c1		 cmp	 eax, ecx
  006e1	75 04		 jne	 SHORT $LN1@Move

; 95   : 		{
; 96   : 			return false;

  006e3	32 c0		 xor	 al, al
  006e5	eb 04		 jmp	 SHORT $LN8@Move
$LN1@Move:

; 97   : 		}
; 98   : 	}

  006e7	eb b1		 jmp	 SHORT $LN3@Move
$LN2@Move:

; 99   : 
; 100  : 	return true;

  006e9	b0 01		 mov	 al, 1
$LN8@Move:

; 101  : }

  006eb	5f		 pop	 edi
  006ec	5e		 pop	 esi
  006ed	5b		 pop	 ebx
  006ee	8b e5		 mov	 esp, ebp
  006f0	5d		 pop	 ebp
  006f1	c2 08 00	 ret	 8
?Move@cBlockMoveItem@@QAE_NHH@Z ENDP			; cBlockMoveItem::Move
_TEXT	ENDS
PUBLIC	?Sell@cBlockMoveItem@@QAE_NHH@Z			; cBlockMoveItem::Sell
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$219124 = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_Pos$ = 12						; size = 4
?Sell@cBlockMoveItem@@QAE_NHH@Z PROC			; cBlockMoveItem::Sell
; _this$ = ecx

; 104  : {

  00700	55		 push	 ebp
  00701	8b ec		 mov	 ebp, esp
  00703	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00706	53		 push	 ebx
  00707	56		 push	 esi
  00708	57		 push	 edi
  00709	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 	if(!this->Enable)return true;

  0070c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0070f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00712	75 07		 jne	 SHORT $LN9@Sell
  00714	b0 01		 mov	 al, 1
  00716	e9 f7 00 00 00	 jmp	 $LN10@Sell
$LN9@Sell:

; 106  : 
; 107  : 	LPOBJ lpObj = &gObj[aIndex];

  0071b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0071e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00724	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0072a	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 108  : 
; 109  : 	if(lpObj->pInventory[Pos].m_Number == 1 || lpObj->pInventory[Pos].m_Number == 2 ) return true;

  0072d	8b 45 0c	 mov	 eax, DWORD PTR _Pos$[ebp]
  00730	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  00736	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00739	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0073f	83 3c 10 01	 cmp	 DWORD PTR [eax+edx], 1
  00743	74 18		 je	 SHORT $LN7@Sell
  00745	8b 45 0c	 mov	 eax, DWORD PTR _Pos$[ebp]
  00748	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0074e	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00751	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  00757	83 3c 10 02	 cmp	 DWORD PTR [eax+edx], 2
  0075b	75 07		 jne	 SHORT $LN8@Sell
$LN7@Sell:
  0075d	b0 01		 mov	 al, 1
  0075f	e9 ae 00 00 00	 jmp	 $LN10@Sell
$LN8@Sell:

; 110  : 
; 111  : 	if(lpObj->pInventory[Pos].m_Level > this->MaxLevel)

  00764	8b 45 0c	 mov	 eax, DWORD PTR _Pos$[ebp]
  00767	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0076d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00770	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  00776	0f bf 44 02 08	 movsx	 eax, WORD PTR [edx+eax+8]
  0077b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0077e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00781	7e 07		 jle	 SHORT $LN6@Sell

; 112  : 	{
; 113  : 		return false;

  00783	32 c0		 xor	 al, al
  00785	e9 88 00 00 00	 jmp	 $LN10@Sell
$LN6@Sell:

; 114  : 	}
; 115  : 
; 116  : 	if(this->ItemMoveBlockExlOpt(lpObj->pInventory[Pos].m_NewOption) == false)

  0078a	8b 45 0c	 mov	 eax, DWORD PTR _Pos$[ebp]
  0078d	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  00793	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00796	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  0079c	0f b6 84 02 97
	00 00 00	 movzx	 eax, BYTE PTR [edx+eax+151]
  007a4	50		 push	 eax
  007a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a8	e8 00 00 00 00	 call	 ?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z ; cBlockMoveItem::ItemMoveBlockExlOpt
  007ad	0f b6 c8	 movzx	 ecx, al
  007b0	85 c9		 test	 ecx, ecx
  007b2	75 04		 jne	 SHORT $LN5@Sell

; 117  : 	{
; 118  : 		return false;

  007b4	32 c0		 xor	 al, al
  007b6	eb 5a		 jmp	 SHORT $LN10@Sell
$LN5@Sell:

; 119  : 	}
; 120  : 
; 121  : 	for(int i=0;i<this->Count;i++)

  007b8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$219124[ebp], 0
  007bf	eb 09		 jmp	 SHORT $LN4@Sell
$LN3@Sell:
  007c1	8b 45 f4	 mov	 eax, DWORD PTR _i$219124[ebp]
  007c4	83 c0 01	 add	 eax, 1
  007c7	89 45 f4	 mov	 DWORD PTR _i$219124[ebp], eax
$LN4@Sell:
  007ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007cd	8b 4d f4	 mov	 ecx, DWORD PTR _i$219124[ebp]
  007d0	3b 88 4c 1f 00
	00		 cmp	 ecx, DWORD PTR [eax+8012]
  007d6	7d 38		 jge	 SHORT $LN2@Sell

; 122  : 	{
; 123  : 		if(lpObj->pInventory[Pos].m_Type == ITEMGET(this->bmi[i].Type,this->bmi[i].Index))

  007d8	8b 45 0c	 mov	 eax, DWORD PTR _Pos$[ebp]
  007db	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  007e1	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  007e4	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  007ea	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  007ef	8b 4d f4	 mov	 ecx, DWORD PTR _i$219124[ebp]
  007f2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007f5	8b 4c ca 0c	 mov	 ecx, DWORD PTR [edx+ecx*8+12]
  007f9	c1 e1 09	 shl	 ecx, 9
  007fc	8b 55 f4	 mov	 edx, DWORD PTR _i$219124[ebp]
  007ff	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00802	03 4c d6 10	 add	 ecx, DWORD PTR [esi+edx*8+16]
  00806	3b c1		 cmp	 eax, ecx
  00808	75 04		 jne	 SHORT $LN1@Sell

; 124  : 		{
; 125  : 			return false;

  0080a	32 c0		 xor	 al, al
  0080c	eb 04		 jmp	 SHORT $LN10@Sell
$LN1@Sell:

; 126  : 		}
; 127  : 	}

  0080e	eb b1		 jmp	 SHORT $LN3@Sell
$LN2@Sell:

; 128  : 
; 129  : 	return true;

  00810	b0 01		 mov	 al, 1
$LN10@Sell:

; 130  : }

  00812	5f		 pop	 edi
  00813	5e		 pop	 esi
  00814	5b		 pop	 ebx
  00815	8b e5		 mov	 esp, ebp
  00817	5d		 pop	 ebp
  00818	c2 08 00	 ret	 8
?Sell@cBlockMoveItem@@QAE_NHH@Z ENDP			; cBlockMoveItem::Sell
_TEXT	ENDS
END
