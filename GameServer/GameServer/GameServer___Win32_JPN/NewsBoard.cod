; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\NewsBoard.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@NewsBoard@@QAEXXZ				; NewsBoard::Init
PUBLIC	??0NewsBoard@@QAE@XZ				; NewsBoard::NewsBoard
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\newsboard.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NewsBoard@@QAE@XZ PROC				; NewsBoard::NewsBoard
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : 	this->Init();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Init@NewsBoard@@QAEXXZ	; NewsBoard::Init

; 18   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0NewsBoard@@QAE@XZ ENDP				; NewsBoard::NewsBoard
_TEXT	ENDS
PUBLIC	??1NewsBoard@@QAE@XZ				; NewsBoard::~NewsBoard
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1NewsBoard@@QAE@XZ PROC				; NewsBoard::~NewsBoard
; _this$ = ecx

; 22   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	// ----
; 24   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1NewsBoard@@QAE@XZ ENDP				; NewsBoard::~NewsBoard
; Function compile flags: /Odtp /ZI
_i$227218 = -8						; size = 4
_this$ = -4						; size = 4
?Init@NewsBoard@@QAEXXZ PROC				; NewsBoard::Init
; _this$ = ecx

; 28   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 48	 sub	 esp, 72			; 00000048H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 	this->m_LoadedCount = 0;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 30   : 	this->m_ShowOnLogin	= false;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 31   : 	// ----
; 32   : 	for( int i = 0; i < MAX_NEWS_LIST; i++ )

  0005d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227218[ebp], 0
  00064	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  00066	8b 45 f8	 mov	 eax, DWORD PTR _i$227218[ebp]
  00069	83 c0 01	 add	 eax, 1
  0006c	89 45 f8	 mov	 DWORD PTR _i$227218[ebp], eax
$LN3@Init:
  0006f	83 7d f8 0c	 cmp	 DWORD PTR _i$227218[ebp], 12 ; 0000000cH
  00073	7d 46		 jge	 SHORT $LN4@Init

; 33   : 	{
; 34   : 		this->m_Data[i].Title.Date[0]	= 0;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _i$227218[ebp]
  00078	69 c0 59 04 00
	00		 imul	 eax, 1113		; 00000459H
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	c6 44 01 18 00	 mov	 BYTE PTR [ecx+eax+24], 0

; 35   : 		this->m_Data[i].Title.Time[0]	= 0;

  00086	8b 45 f8	 mov	 eax, DWORD PTR _i$227218[ebp]
  00089	69 c0 59 04 00
	00		 imul	 eax, 1113		; 00000459H
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	c6 44 01 24 00	 mov	 BYTE PTR [ecx+eax+36], 0

; 36   : 		this->m_Data[i].Title.Text[0]	= 0;

  00097	8b 45 f8	 mov	 eax, DWORD PTR _i$227218[ebp]
  0009a	69 c0 59 04 00
	00		 imul	 eax, 1113		; 00000459H
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	c6 44 01 2b 00	 mov	 BYTE PTR [ecx+eax+43], 0

; 37   : 		this->m_Data[i].Text[0]			= 0;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _i$227218[ebp]
  000ab	69 c0 59 04 00
	00		 imul	 eax, 1113		; 00000459H
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	c6 44 01 71 00	 mov	 BYTE PTR [ecx+eax+113], 0

; 38   : 	}

  000b9	eb ab		 jmp	 SHORT $LN2@Init
$LN4@Init:

; 39   : }

  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
?Init@NewsBoard@@QAEXXZ ENDP				; NewsBoard::Init
_TEXT	ENDS
PUBLIC	??_C@_0CH@HAEKFCOF@?$FLNewsBoard?$FN?5?$FL?$CFd?$FN?5Item?5loaded?5fro@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadListData@NewsBoard@@QAEXPAD@Z		; NewsBoard::ReadListData
EXTRN	_fclose:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
_BSS	SEGMENT
_TokenString DB	06a4H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CH@HAEKFCOF@?$FLNewsBoard?$FN?5?$FL?$CFd?$FN?5Item?5loaded?5fro@
CONST	SEGMENT
??_C@_0CH@HAEKFCOF@?$FLNewsBoard?$FN?5?$FL?$CFd?$FN?5Item?5loaded?5fro@ DB '['
	DB	'NewsBoard] [%d] Item loaded from list', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_File$ = 8						; size = 4
?ReadListData@NewsBoard@@QAEXPAD@Z PROC			; NewsBoard::ReadListData
; _this$ = ecx

; 43   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	83 ec 48	 sub	 esp, 72			; 00000048H
  000d6	53		 push	 ebx
  000d7	56		 push	 esi
  000d8	57		 push	 edi
  000d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 	int Token;
; 45   : 	// ----
; 46   : 	SMDFile = fopen(File, "r");

  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000e1	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _fopen
  000ea	83 c4 08	 add	 esp, 8
  000ed	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 47   : 	// ----
; 48   : 	if( SMDFile == 0 )

  000f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  000f9	75 1e		 jne	 SHORT $LN5@ReadListDa

; 49   : 	{
; 50   : 		MsgBox(lMsg.Get(MSGGET(0, 112)), File);

  000fb	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  000fe	50		 push	 eax
  000ff	6a 70		 push	 112			; 00000070H
  00101	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00106	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00111	83 c4 08	 add	 esp, 8

; 51   : 		return;

  00114	e9 22 01 00 00	 jmp	 $LN7@ReadListDa
$LN5@ReadListDa:

; 52   : 	}
; 53   : 	// ----
; 54   : 	while(true) 

  00119	b8 01 00 00 00	 mov	 eax, 1
  0011e	85 c0		 test	 eax, eax
  00120	0f 84 f2 00 00
	00		 je	 $LN4@ReadListDa

; 55   : 	{
; 56   : 		Token = GetToken();

  00126	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0012b	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 57   : 		// ----
; 58   : 		if( Token == END || !strcmp(TokenString, "end") || this->m_LoadedCount >= MAX_NEWS_LIST)

  0012e	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00132	74 1f		 je	 SHORT $LN2@ReadListDa
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00139	68 00 00 00 00	 push	 OFFSET _TokenString
  0013e	e8 00 00 00 00	 call	 _strcmp
  00143	83 c4 08	 add	 esp, 8
  00146	85 c0		 test	 eax, eax
  00148	74 09		 je	 SHORT $LN2@ReadListDa
  0014a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014d	83 78 14 0c	 cmp	 DWORD PTR [eax+20], 12	; 0000000cH
  00151	7c 0a		 jl	 SHORT $LN3@ReadListDa
$LN2@ReadListDa:

; 59   : 		{
; 60   : 			break;

  00153	e9 c0 00 00 00	 jmp	 $LN4@ReadListDa

; 61   : 		}
; 62   : 		else

  00158	e9 b6 00 00 00	 jmp	 $LN1@ReadListDa
$LN3@ReadListDa:

; 63   : 		{
; 64   : 			memcpy(this->m_Data[this->m_LoadedCount].Title.Date, TokenString, 11);

  0015d	6a 0b		 push	 11			; 0000000bH
  0015f	68 00 00 00 00	 push	 OFFSET _TokenString
  00164	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00167	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0016a	69 c9 59 04 00
	00		 imul	 ecx, 1113		; 00000459H
  00170	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00173	8d 44 0a 18	 lea	 eax, DWORD PTR [edx+ecx+24]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 _memcpy
  0017d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : 			Token = GetToken();

  00180	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00185	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 66   : 			memcpy(this->m_Data[this->m_LoadedCount].Title.Time, TokenString, 6);

  00188	6a 06		 push	 6
  0018a	68 00 00 00 00	 push	 OFFSET _TokenString
  0018f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00192	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00195	69 c9 59 04 00
	00		 imul	 ecx, 1113		; 00000459H
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0019e	8d 44 0a 24	 lea	 eax, DWORD PTR [edx+ecx+36]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _memcpy
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 67   : 			Token = GetToken();

  001ab	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001b0	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 68   : 			memcpy(this->m_Data[this->m_LoadedCount].Title.Text, TokenString, 69);

  001b3	6a 45		 push	 69			; 00000045H
  001b5	68 00 00 00 00	 push	 OFFSET _TokenString
  001ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001bd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001c0	69 c9 59 04 00
	00		 imul	 ecx, 1113		; 00000459H
  001c6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001c9	8d 44 0a 2b	 lea	 eax, DWORD PTR [edx+ecx+43]
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 _memcpy
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 69   : 			Token = GetToken();

  001d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001db	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 70   : 			memcpy(this->m_Data[this->m_LoadedCount].Text, TokenString, 1024-1);

  001de	68 ff 03 00 00	 push	 1023			; 000003ffH
  001e3	68 00 00 00 00	 push	 OFFSET _TokenString
  001e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001eb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001ee	69 c9 59 04 00
	00		 imul	 ecx, 1113		; 00000459H
  001f4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001f7	8d 44 0a 71	 lea	 eax, DWORD PTR [edx+ecx+113]
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 _memcpy
  00201	83 c4 0c	 add	 esp, 12			; 0000000cH

; 71   : 			// ----
; 72   : 			this->m_LoadedCount++;

  00204	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00207	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0020a	83 c1 01	 add	 ecx, 1
  0020d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00210	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN1@ReadListDa:

; 73   : 		}
; 74   : 	}

  00213	e9 01 ff ff ff	 jmp	 $LN5@ReadListDa
$LN4@ReadListDa:

; 75   : 	// ----
; 76   : 	LogAddTD("[NewsBoard] [%d] Item loaded from list", this->m_LoadedCount);

  00218	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0021b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0021e	51		 push	 ecx
  0021f	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@HAEKFCOF@?$FLNewsBoard?$FN?5?$FL?$CFd?$FN?5Item?5loaded?5fro@
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0022a	83 c4 08	 add	 esp, 8

; 77   : 	fclose(SMDFile);	

  0022d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 _fclose
  00238	83 c4 04	 add	 esp, 4
$LN7@ReadListDa:

; 78   : }

  0023b	5f		 pop	 edi
  0023c	5e		 pop	 esi
  0023d	5b		 pop	 ebx
  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c2 04 00	 ret	 4
?ReadListData@NewsBoard@@QAEXPAD@Z ENDP			; NewsBoard::ReadListData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atol:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_dwTokenNumber DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript_ex.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -1780						; size = 4
_TempString$ = -1712					; size = 1700
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 27   : {

  00250	55		 push	 ebp
  00251	8b ec		 mov	 ebp, esp
  00253	81 ec f4 06 00
	00		 sub	 esp, 1780		; 000006f4H
  00259	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0025e	33 c5		 xor	 eax, ebp
  00260	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00263	53		 push	 ebx
  00264	56		 push	 esi
  00265	57		 push	 edi

; 28   : 	char ch;
; 29   : 	char* p;
; 30   : 	char TempString[1700];
; 31   : 
; 32   : 	TokenString[0]=0;

  00266	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 33   : 
; 34   : 	do
; 35   : 	{
; 36   : 		if ((ch=fgetc(SMDFile)) == -1)

  0026d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00272	50		 push	 eax
  00273	e8 00 00 00 00	 call	 _fgetc
  00278	83 c4 04	 add	 esp, 4
  0027b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0027e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00282	83 f9 ff	 cmp	 ecx, -1
  00285	75 0c		 jne	 SHORT $LN28@GetToken

; 37   : 		{
; 38   : 			return END;	// End of FILE (EOF)

  00287	b8 02 00 00 00	 mov	 eax, 2
  0028c	e9 11 03 00 00	 jmp	 $LN32@GetToken

; 39   : 		}
; 40   : 		else

  00291	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 41   : 		{	
; 42   : 			if (ch=='/')		// this is /

  00293	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00297	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0029a	75 52		 jne	 SHORT $LN22@GetToken

; 43   : 			{
; 44   : 				if((ch=fgetc(SMDFile)) == '/')

  0029c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  002a1	50		 push	 eax
  002a2	e8 00 00 00 00	 call	 _fgetc
  002a7	83 c4 04	 add	 esp, 4
  002aa	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  002ad	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  002b1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  002b4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 45   : 				{
; 46   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  002b6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  002ba	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002bd	74 1c		 je	 SHORT $LN23@GetToken
  002bf	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  002c3	83 f8 ff	 cmp	 eax, -1
  002c6	74 13		 je	 SHORT $LN23@GetToken

; 47   : 					{
; 48   : 						ch=fgetc(SMDFile);

  002c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  002cd	50		 push	 eax
  002ce	e8 00 00 00 00	 call	 _fgetc
  002d3	83 c4 04	 add	 esp, 4
  002d6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 49   : 					}

  002d9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 50   : 	
; 51   : 					if (ch == -1)

  002db	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  002df	83 f8 ff	 cmp	 eax, -1
  002e2	75 0a		 jne	 SHORT $LN22@GetToken

; 52   : 					{
; 53   : 						return END;	// End of FILE

  002e4	b8 02 00 00 00	 mov	 eax, 2
  002e9	e9 b4 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 54   : 					}
; 55   : 				}
; 56   : 			}
; 57   : 		}
; 58   : 	}
; 59   : 	while (isspace(ch) != 0);

  002ee	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  002f2	50		 push	 eax
  002f3	e8 00 00 00 00	 call	 _isspace
  002f8	83 c4 04	 add	 esp, 4
  002fb	85 c0		 test	 eax, eax
  002fd	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 60   : 
; 61   : 	
; 62   : 	switch(ch)

  00303	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00307	89 85 0c f9 ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0030d	8b 8d 0c f9 ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00313	83 e9 22	 sub	 ecx, 34			; 00000022H
  00316	89 8d 0c f9 ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0031c	83 bd 0c f9 ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00323	0f 87 bd 01 00
	00		 ja	 $LN6@GetToken
  00329	8b 95 0c f9 ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0032f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00336	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 63   : 	{
; 64   : 
; 65   : 	case 0x23:	// #
; 66   : 		return CurrentToken=COMMAND;

  0033d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00347	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0034c	e9 51 02 00 00	 jmp	 $LN32@GetToken

; 67   : 		break;

  00351	e9 4a 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 68   : 	
; 69   : 	case 0x3B:	// ;
; 70   : 		return CurrentToken=SEMICOLON;

  00356	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00360	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00365	e9 38 02 00 00	 jmp	 $LN32@GetToken

; 71   : 		break;

  0036a	e9 31 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 72   : 	
; 73   : 	case 0x2C:	// ,
; 74   : 
; 75   : 		return CurrentToken=COMMA;

  0036f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00379	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0037e	e9 1f 02 00 00	 jmp	 $LN32@GetToken

; 76   : 		break;

  00383	e9 18 02 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 77   : 	
; 78   : 	case 0x7B:	// {
; 79   : 		return CurrentToken = LP;

  00388	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00392	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00397	e9 06 02 00 00	 jmp	 $LN32@GetToken

; 80   : 		break;

  0039c	e9 ff 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 81   : 
; 82   : 	case 0x7D:	// }
; 83   : 		return CurrentToken = RP;

  003a1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  003ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  003b0	e9 ed 01 00 00	 jmp	 $LN32@GetToken

; 84   : 		break;

  003b5	e9 e6 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 85   : 	// Nice Index Table :)	by Deathway
; 86   : 	// Numbers Case
; 87   : 	case 0x2D:	//-
; 88   : 	case 0x2E:	//.
; 89   : 	case '0':	//0
; 90   : 	case '1':	//1
; 91   : 	case '2':	//2
; 92   : 	case '3':	//3
; 93   : 	case '4':	//4		
; 94   : 	case '5':	//5
; 95   : 	case '6':	//6
; 96   : 	case '7':	//7
; 97   : 	case '8':	//8
; 98   : 	case '9':	//9
; 99   : 		ungetc(ch, SMDFile);

  003ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  003bf	50		 push	 eax
  003c0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  003c4	51		 push	 ecx
  003c5	e8 00 00 00 00	 call	 _ungetc
  003ca	83 c4 08	 add	 esp, 8

; 100  : 		p = TempString;

  003cd	8d 85 50 f9 ff
	ff		 lea	 eax, DWORD PTR _TempString$[ebp]
  003d3	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 101  : 		
; 102  : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  003d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  003db	50		 push	 eax
  003dc	e8 00 00 00 00	 call	 _getc
  003e1	83 c4 04	 add	 esp, 4
  003e4	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  003e7	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  003eb	83 f9 ff	 cmp	 ecx, -1
  003ee	74 36		 je	 SHORT $LN12@GetToken
  003f0	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003f4	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  003f7	74 1a		 je	 SHORT $LN11@GetToken
  003f9	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003fd	50		 push	 eax
  003fe	e8 00 00 00 00	 call	 _isdigit
  00403	83 c4 04	 add	 esp, 4
  00406	85 c0		 test	 eax, eax
  00408	75 09		 jne	 SHORT $LN11@GetToken
  0040a	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0040e	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00411	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 103  : 		{
; 104  : 			*p = ch;	// Construct a String

  00413	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00416	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00419	88 08		 mov	 BYTE PTR [eax], cl

; 105  : 			p++;

  0041b	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0041e	83 c0 01	 add	 eax, 1
  00421	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 106  : 		}		

  00424	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 107  : 		*p = 0;

  00426	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00429	c6 00 00	 mov	 BYTE PTR [eax], 0

; 108  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  0042c	8d 85 50 f9 ff
	ff		 lea	 eax, DWORD PTR _TempString$[ebp]
  00432	50		 push	 eax
  00433	e8 00 00 00 00	 call	 _atof
  00438	83 c4 04	 add	 esp, 4
  0043b	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 109  : 		dwTokenNumber = (DWORD)atol(TempString);

  00441	8d 85 50 f9 ff
	ff		 lea	 eax, DWORD PTR _TempString$[ebp]
  00447	50		 push	 eax
  00448	e8 00 00 00 00	 call	 _atol
  0044d	83 c4 04	 add	 esp, 4
  00450	a3 00 00 00 00	 mov	 DWORD PTR _dwTokenNumber, eax

; 110  : 		return CurrentToken  = NUMBER ;

  00455	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  0045f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00464	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 111  : 		break;

  00469	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 112  : 
; 113  : 	case '\"':	// "	String Case
; 114  : 		p=&TokenString[0];

  0046e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 115  : 
; 116  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00475	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0047a	50		 push	 eax
  0047b	e8 00 00 00 00	 call	 _getc
  00480	83 c4 04	 add	 esp, 4
  00483	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00486	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0048a	83 f9 ff	 cmp	 ecx, -1
  0048d	74 1c		 je	 SHORT $LN8@GetToken
  0048f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00493	83 f8 22	 cmp	 eax, 34			; 00000022H
  00496	74 13		 je	 SHORT $LN8@GetToken

; 117  : 		{
; 118  : 			*p = ch;

  00498	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0049b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0049e	88 08		 mov	 BYTE PTR [eax], cl

; 119  : 			p++;

  004a0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004a3	83 c0 01	 add	 eax, 1
  004a6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 120  : 		}

  004a9	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 121  : 		if (ch != 0x22 )

  004ab	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004af	83 f8 22	 cmp	 eax, 34			; 00000022H
  004b2	74 13		 je	 SHORT $LN7@GetToken

; 122  : 		{
; 123  : 			ungetc(ch, SMDFile);

  004b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004b9	50		 push	 eax
  004ba	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  004be	51		 push	 ecx
  004bf	e8 00 00 00 00	 call	 _ungetc
  004c4	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 124  : 		}
; 125  : 		*p = 0;

  004c7	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004ca	c6 00 00	 mov	 BYTE PTR [eax], 0

; 126  : 		return CurrentToken = NAME;

  004cd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  004d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004dc	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 127  : 		break;

  004e1	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 128  : 
; 129  : 	default:	// Others
; 130  : 		if (isalpha(ch))

  004e6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 _isalpha
  004f0	83 c4 04	 add	 esp, 4
  004f3	85 c0		 test	 eax, eax
  004f5	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 131  : 		{
; 132  : 			p=&TokenString[0];

  004fb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 133  : 			*p=ch;

  00502	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00505	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00508	88 08		 mov	 BYTE PTR [eax], cl

; 134  : 			p++;

  0050a	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0050d	83 c0 01	 add	 eax, 1
  00510	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 135  : 
; 136  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00513	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 _getc
  0051e	83 c4 04	 add	 esp, 4
  00521	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00524	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00528	83 f9 ff	 cmp	 ecx, -1
  0052b	74 36		 je	 SHORT $LN3@GetToken
  0052d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00531	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00534	74 1a		 je	 SHORT $LN2@GetToken
  00536	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0053a	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  0053d	74 11		 je	 SHORT $LN2@GetToken
  0053f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00543	50		 push	 eax
  00544	e8 00 00 00 00	 call	 _isalnum
  00549	83 c4 04	 add	 esp, 4
  0054c	85 c0		 test	 eax, eax
  0054e	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 137  : 			{
; 138  : 				*p=ch;

  00550	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00553	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00556	88 08		 mov	 BYTE PTR [eax], cl

; 139  : 				p++;

  00558	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0055b	83 c0 01	 add	 eax, 1
  0055e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 140  : 			}

  00561	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 141  : 
; 142  : 			ungetc(ch, SMDFile);

  00563	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00568	50		 push	 eax
  00569	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0056d	51		 push	 ecx
  0056e	e8 00 00 00 00	 call	 _ungetc
  00573	83 c4 08	 add	 esp, 8

; 143  : 			*p=0;

  00576	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00579	c6 00 00	 mov	 BYTE PTR [eax], 0

; 144  : 			CurrentToken=NAME;

  0057c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 145  : 			return CurrentToken;

  00586	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0058b	eb 15		 jmp	 SHORT $LN32@GetToken

; 146  : 		}
; 147  : 		else

  0058d	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 148  : 		{
; 149  : 			return CurrentToken = SMD_ERROR; // '<'

  0058f	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  00599	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0059e	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 150  : 		}
; 151  : 		break;
; 152  : 
; 153  : 	}
; 154  : 
; 155  : 	return NAME;

  005a0	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 156  : }

  005a2	5f		 pop	 edi
  005a3	5e		 pop	 esi
  005a4	5b		 pop	 ebx
  005a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005a8	33 cd		 xor	 ecx, ebp
  005aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005af	8b e5		 mov	 esp, ebp
  005b1	5d		 pop	 ebp
  005b2	c3		 ret	 0
  005b3	90		 npad	 1
$LN35@GetToken:
  005b4	00 00 00 00	 DD	 $LN10@GetToken
  005b8	00 00 00 00	 DD	 $LN19@GetToken
  005bc	00 00 00 00	 DD	 $LN17@GetToken
  005c0	00 00 00 00	 DD	 $LN14@GetToken
  005c4	00 00 00 00	 DD	 $LN18@GetToken
  005c8	00 00 00 00	 DD	 $LN16@GetToken
  005cc	00 00 00 00	 DD	 $LN15@GetToken
  005d0	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  005d4	00		 DB	 0
  005d5	01		 DB	 1
  005d6	07		 DB	 7
  005d7	07		 DB	 7
  005d8	07		 DB	 7
  005d9	07		 DB	 7
  005da	07		 DB	 7
  005db	07		 DB	 7
  005dc	07		 DB	 7
  005dd	07		 DB	 7
  005de	02		 DB	 2
  005df	03		 DB	 3
  005e0	03		 DB	 3
  005e1	07		 DB	 7
  005e2	03		 DB	 3
  005e3	03		 DB	 3
  005e4	03		 DB	 3
  005e5	03		 DB	 3
  005e6	03		 DB	 3
  005e7	03		 DB	 3
  005e8	03		 DB	 3
  005e9	03		 DB	 3
  005ea	03		 DB	 3
  005eb	03		 DB	 3
  005ec	07		 DB	 7
  005ed	04		 DB	 4
  005ee	07		 DB	 7
  005ef	07		 DB	 7
  005f0	07		 DB	 7
  005f1	07		 DB	 7
  005f2	07		 DB	 7
  005f3	07		 DB	 7
  005f4	07		 DB	 7
  005f5	07		 DB	 7
  005f6	07		 DB	 7
  005f7	07		 DB	 7
  005f8	07		 DB	 7
  005f9	07		 DB	 7
  005fa	07		 DB	 7
  005fb	07		 DB	 7
  005fc	07		 DB	 7
  005fd	07		 DB	 7
  005fe	07		 DB	 7
  005ff	07		 DB	 7
  00600	07		 DB	 7
  00601	07		 DB	 7
  00602	07		 DB	 7
  00603	07		 DB	 7
  00604	07		 DB	 7
  00605	07		 DB	 7
  00606	07		 DB	 7
  00607	07		 DB	 7
  00608	07		 DB	 7
  00609	07		 DB	 7
  0060a	07		 DB	 7
  0060b	07		 DB	 7
  0060c	07		 DB	 7
  0060d	07		 DB	 7
  0060e	07		 DB	 7
  0060f	07		 DB	 7
  00610	07		 DB	 7
  00611	07		 DB	 7
  00612	07		 DB	 7
  00613	07		 DB	 7
  00614	07		 DB	 7
  00615	07		 DB	 7
  00616	07		 DB	 7
  00617	07		 DB	 7
  00618	07		 DB	 7
  00619	07		 DB	 7
  0061a	07		 DB	 7
  0061b	07		 DB	 7
  0061c	07		 DB	 7
  0061d	07		 DB	 7
  0061e	07		 DB	 7
  0061f	07		 DB	 7
  00620	07		 DB	 7
  00621	07		 DB	 7
  00622	07		 DB	 7
  00623	07		 DB	 7
  00624	07		 DB	 7
  00625	07		 DB	 7
  00626	07		 DB	 7
  00627	07		 DB	 7
  00628	07		 DB	 7
  00629	07		 DB	 7
  0062a	07		 DB	 7
  0062b	07		 DB	 7
  0062c	07		 DB	 7
  0062d	05		 DB	 5
  0062e	07		 DB	 7
  0062f	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0M@MDLDIDLO@ShowOnLogin?$AA@		; `string'
PUBLIC	??_C@_05MGEEICMI@NPC_Y?$AA@			; `string'
PUBLIC	??_C@_05NPFPLDIJ@NPC_X?$AA@			; `string'
PUBLIC	??_C@_07LJMEGBCH@NPC_Map?$AA@			; `string'
PUBLIC	??_C@_09JIOKDDGI@NPC_Class?$AA@			; `string'
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	?ReadMainData@NewsBoard@@QAEXPAD@Z		; NewsBoard::ReadMainData
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_0M@MDLDIDLO@ShowOnLogin?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\newsboard.cpp
CONST	SEGMENT
??_C@_0M@MDLDIDLO@ShowOnLogin?$AA@ DB 'ShowOnLogin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MGEEICMI@NPC_Y?$AA@
CONST	SEGMENT
??_C@_05MGEEICMI@NPC_Y?$AA@ DB 'NPC_Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NPFPLDIJ@NPC_X?$AA@
CONST	SEGMENT
??_C@_05NPFPLDIJ@NPC_X?$AA@ DB 'NPC_X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LJMEGBCH@NPC_Map?$AA@
CONST	SEGMENT
??_C@_07LJMEGBCH@NPC_Map?$AA@ DB 'NPC_Map', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JIOKDDGI@NPC_Class?$AA@
CONST	SEGMENT
??_C@_09JIOKDDGI@NPC_Class?$AA@ DB 'NPC_Class', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_File$ = 8						; size = 4
?ReadMainData@NewsBoard@@QAEXPAD@Z PROC			; NewsBoard::ReadMainData
; _this$ = ecx

; 82   : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp
  00633	83 ec 44	 sub	 esp, 68			; 00000044H
  00636	53		 push	 ebx
  00637	56		 push	 esi
  00638	57		 push	 edi
  00639	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	this->Enable = GetPrivateProfileInt("ExTeam", "Enable", 1, File);

  0063c	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0063f	50		 push	 eax
  00640	6a 01		 push	 1
  00642	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00647	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0064c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00652	85 c0		 test	 eax, eax
  00654	0f 95 c1	 setne	 cl
  00657	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0065a	88 0a		 mov	 BYTE PTR [edx], cl

; 84   : 	this->NPC_Class = GetPrivateProfileInt("ExTeam", "NPC_Class", 0, File);

  0065c	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0065f	50		 push	 eax
  00660	6a 00		 push	 0
  00662	68 00 00 00 00	 push	 OFFSET ??_C@_09JIOKDDGI@NPC_Class?$AA@
  00667	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0066c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00672	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00675	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 85   : 	this->NPC_Map = GetPrivateProfileInt("ExTeam", "NPC_Map", 0, File);

  00678	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0067b	50		 push	 eax
  0067c	6a 00		 push	 0
  0067e	68 00 00 00 00	 push	 OFFSET ??_C@_07LJMEGBCH@NPC_Map?$AA@
  00683	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00688	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0068e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00691	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 86   : 	this->NPC_X = GetPrivateProfileInt("ExTeam", "NPC_X", 0, File);

  00694	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00697	50		 push	 eax
  00698	6a 00		 push	 0
  0069a	68 00 00 00 00	 push	 OFFSET ??_C@_05NPFPLDIJ@NPC_X?$AA@
  0069f	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  006a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ad	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 87   : 	this->NPC_Y = GetPrivateProfileInt("ExTeam", "NPC_Y", 0, File);

  006b0	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  006b3	50		 push	 eax
  006b4	6a 00		 push	 0
  006b6	68 00 00 00 00	 push	 OFFSET ??_C@_05MGEEICMI@NPC_Y?$AA@
  006bb	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  006c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006c9	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 88   : 	this->m_ShowOnLogin	= GetPrivateProfileIntA("ExTeam", "ShowOnLogin", 0, File);

  006cc	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  006cf	50		 push	 eax
  006d0	6a 00		 push	 0
  006d2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MDLDIDLO@ShowOnLogin?$AA@
  006d7	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  006dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006e2	85 c0		 test	 eax, eax
  006e4	0f 95 c1	 setne	 cl
  006e7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006ea	88 4a 01	 mov	 BYTE PTR [edx+1], cl

; 89   : }

  006ed	5f		 pop	 edi
  006ee	5e		 pop	 esi
  006ef	5b		 pop	 ebx
  006f0	8b e5		 mov	 esp, ebp
  006f2	5d		 pop	 ebp
  006f3	c2 04 00	 ret	 4
?ReadMainData@NewsBoard@@QAEXPAD@Z ENDP			; NewsBoard::ReadMainData
_TEXT	ENDS
PUBLIC	??_C@_0BE@MLCFGLGP@ExData?2NewsMain?4ini?$AA@	; `string'
PUBLIC	??_C@_0BE@CLOMLKHI@ExData?2NewsList?4txt?$AA@	; `string'
PUBLIC	?Load@NewsBoard@@QAEXXZ				; NewsBoard::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BE@MLCFGLGP@ExData?2NewsMain?4ini?$AA@
CONST	SEGMENT
??_C@_0BE@MLCFGLGP@ExData?2NewsMain?4ini?$AA@ DB 'ExData\NewsMain.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLOMLKHI@ExData?2NewsList?4txt?$AA@
CONST	SEGMENT
??_C@_0BE@CLOMLKHI@ExData?2NewsList?4txt?$AA@ DB 'ExData\NewsList.txt', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@NewsBoard@@QAEXXZ PROC				; NewsBoard::Load
; _this$ = ecx

; 93   : {

  00700	55		 push	 ebp
  00701	8b ec		 mov	 ebp, esp
  00703	83 ec 44	 sub	 esp, 68			; 00000044H
  00706	53		 push	 ebx
  00707	56		 push	 esi
  00708	57		 push	 edi
  00709	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 	this->Init();

  0070c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0070f	e8 00 00 00 00	 call	 ?Init@NewsBoard@@QAEXXZ	; NewsBoard::Init

; 95   : 	this->ReadListData(gDirPath.GetNewPath("ExData\\NewsList.txt"));

  00714	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CLOMLKHI@ExData?2NewsList?4txt?$AA@
  00719	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0071e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00723	50		 push	 eax
  00724	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00727	e8 00 00 00 00	 call	 ?ReadListData@NewsBoard@@QAEXPAD@Z ; NewsBoard::ReadListData

; 96   : 	this->ReadMainData(gDirPath.GetNewPath("ExData\\NewsMain.ini"));

  0072c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MLCFGLGP@ExData?2NewsMain?4ini?$AA@
  00731	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00736	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0073b	50		 push	 eax
  0073c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0073f	e8 00 00 00 00	 call	 ?ReadMainData@NewsBoard@@QAEXPAD@Z ; NewsBoard::ReadMainData

; 97   : }

  00744	5f		 pop	 edi
  00745	5e		 pop	 esi
  00746	5b		 pop	 ebx
  00747	8b e5		 mov	 esp, ebp
  00749	5d		 pop	 ebp
  0074a	c3		 ret	 0
?Load@NewsBoard@@QAEXXZ ENDP				; NewsBoard::Load
_TEXT	ENDS
PUBLIC	?OpenMain@NewsBoard@@QAEXPAUOBJECTSTRUCT@@@Z	; NewsBoard::OpenMain
PUBLIC	?Dialog@NewsBoard@@QAE_NHH@Z			; NewsBoard::Dialog
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnectedEx@@YA_NH@Z:PROC		; gObjIsConnectedEx
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpNpc$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aNpcIndex$ = 12					; size = 4
?Dialog@NewsBoard@@QAE_NHH@Z PROC			; NewsBoard::Dialog
; _this$ = ecx

; 101  : {

  00750	55		 push	 ebp
  00751	8b ec		 mov	 ebp, esp
  00753	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00756	53		 push	 ebx
  00757	56		 push	 esi
  00758	57		 push	 edi
  00759	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 	if(!this->Enable)

  0075c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0075f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00762	85 c9		 test	 ecx, ecx
  00764	75 07		 jne	 SHORT $LN3@Dialog

; 103  : 	{
; 104  :  		return false;

  00766	32 c0		 xor	 al, al
  00768	e9 95 00 00 00	 jmp	 $LN4@Dialog
$LN3@Dialog:

; 105  : 	}
; 106  : 
; 107  : 	if(!gObjIsConnectedEx(aIndex))

  0076d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00770	50		 push	 eax
  00771	e8 00 00 00 00	 call	 ?gObjIsConnectedEx@@YA_NH@Z ; gObjIsConnectedEx
  00776	83 c4 04	 add	 esp, 4
  00779	0f b6 c8	 movzx	 ecx, al
  0077c	85 c9		 test	 ecx, ecx
  0077e	75 04		 jne	 SHORT $LN2@Dialog

; 108  : 	{
; 109  : 		return false;

  00780	32 c0		 xor	 al, al
  00782	eb 7e		 jmp	 SHORT $LN4@Dialog
$LN2@Dialog:

; 110  : 	}
; 111  : 
; 112  : 	LPOBJ lpUser = &gObj[aIndex];

  00784	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00787	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0078d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00793	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 113  : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  00796	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  00799	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0079f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  007a5	89 45 f4	 mov	 DWORD PTR _lpNpc$[ebp], eax

; 114  : 
; 115  : 	if(		lpNpc->Class		== this->NPC_Class 
; 116  : 		&&	lpNpc->MapNumber	== this->NPC_Map
; 117  : 		&&	lpNpc->X			== this->NPC_X
; 118  : 		&&	lpNpc->Y			== this->NPC_Y )

  007a8	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  007ab	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  007b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007b5	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  007b8	75 46		 jne	 SHORT $LN1@Dialog
  007ba	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  007bd	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  007c4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007c7	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  007ca	75 34		 jne	 SHORT $LN1@Dialog
  007cc	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  007cf	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  007d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007d9	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  007dc	75 22		 jne	 SHORT $LN1@Dialog
  007de	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  007e1	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  007e8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007eb	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
  007ee	75 10		 jne	 SHORT $LN1@Dialog

; 119  : 	{
; 120  : 		this->OpenMain(lpUser);

  007f0	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  007f3	50		 push	 eax
  007f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007f7	e8 00 00 00 00	 call	 ?OpenMain@NewsBoard@@QAEXPAUOBJECTSTRUCT@@@Z ; NewsBoard::OpenMain

; 121  : 		return true;

  007fc	b0 01		 mov	 al, 1
  007fe	eb 02		 jmp	 SHORT $LN4@Dialog
$LN1@Dialog:

; 122  : 	}
; 123  : 	// ----
; 124  : 	return false;

  00800	32 c0		 xor	 al, al
$LN4@Dialog:

; 125  : }

  00802	5f		 pop	 edi
  00803	5e		 pop	 esi
  00804	5b		 pop	 ebx
  00805	8b e5		 mov	 esp, ebp
  00807	5d		 pop	 ebp
  00808	c2 08 00	 ret	 8
?Dialog@NewsBoard@@QAE_NHH@Z ENDP			; NewsBoard::Dialog
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	_strcpy:PROC
EXTRN	?PHeadSetW@@YAXPAEEH@Z:PROC			; PHeadSetW
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227272 = -1088					; size = 4
_pAnswer$ = -1084					; size = 1073
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
?OpenMain@NewsBoard@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; NewsBoard::OpenMain
; _this$ = ecx

; 129  : {

  00810	55		 push	 ebp
  00811	8b ec		 mov	 ebp, esp
  00813	81 ec 80 04 00
	00		 sub	 esp, 1152		; 00000480H
  00819	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0081e	33 c5		 xor	 eax, ebp
  00820	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00823	53		 push	 ebx
  00824	56		 push	 esi
  00825	57		 push	 edi
  00826	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 130  : 	if(!this->Enable)

  00829	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0082c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0082f	85 c9		 test	 ecx, ecx
  00831	75 05		 jne	 SHORT $LN5@OpenMain

; 131  : 	{
; 132  :  		return;

  00833	e9 23 01 00 00	 jmp	 $LN6@OpenMain
$LN5@OpenMain:

; 133  : 	}
; 134  : 
; 135  : 	if( lpUser->Connected != PLAYER_PLAYING )

  00838	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0083b	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0083f	74 05		 je	 SHORT $LN4@OpenMain

; 136  : 	{
; 137  : 		return;

  00841	e9 15 01 00 00	 jmp	 $LN6@OpenMain
$LN4@OpenMain:

; 138  : 	}
; 139  : 	// ----
; 140  : 	NEWS_ANS_TITLES pAnswer = { 0 };

  00846	c6 85 c4 fb ff
	ff 00		 mov	 BYTE PTR _pAnswer$[ebp], 0
  0084d	68 30 04 00 00	 push	 1072			; 00000430H
  00852	6a 00		 push	 0
  00854	8d 85 c5 fb ff
	ff		 lea	 eax, DWORD PTR _pAnswer$[ebp+1]
  0085a	50		 push	 eax
  0085b	e8 00 00 00 00	 call	 _memset
  00860	83 c4 0c	 add	 esp, 12			; 0000000cH

; 141  : 	PHeadSetW((LPBYTE)&pAnswer, 0xFD, sizeof(NEWS_ANS_TITLES));

  00863	68 31 04 00 00	 push	 1073			; 00000431H
  00868	68 fd 00 00 00	 push	 253			; 000000fdH
  0086d	8d 85 c4 fb ff
	ff		 lea	 eax, DWORD PTR _pAnswer$[ebp]
  00873	50		 push	 eax
  00874	e8 00 00 00 00	 call	 ?PHeadSetW@@YAXPAEEH@Z	; PHeadSetW
  00879	83 c4 0c	 add	 esp, 12			; 0000000cH

; 142  : 	// ----
; 143  : 	pAnswer.RealCount = this->m_LoadedCount;

  0087c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0087f	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00882	88 8d c8 fb ff
	ff		 mov	 BYTE PTR _pAnswer$[ebp+4], cl

; 144  : 	// ----
; 145  : 	for( int i = 0; i < this->m_LoadedCount; i++ )

  00888	c7 85 c0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$227272[ebp], 0
  00892	eb 0f		 jmp	 SHORT $LN3@OpenMain
$LN2@OpenMain:
  00894	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _i$227272[ebp]
  0089a	83 c0 01	 add	 eax, 1
  0089d	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _i$227272[ebp], eax
$LN3@OpenMain:
  008a3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  008a6	8b 8d c0 fb ff
	ff		 mov	 ecx, DWORD PTR _i$227272[ebp]
  008ac	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  008af	0f 8d 8c 00 00
	00		 jge	 $LN1@OpenMain

; 146  : 	{
; 147  : 		strcpy(pAnswer.Titles[i].Date, this->m_Data[i].Title.Date);

  008b5	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _i$227272[ebp]
  008bb	69 c0 59 04 00
	00		 imul	 eax, 1113		; 00000459H
  008c1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  008c4	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  008c8	52		 push	 edx
  008c9	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _i$227272[ebp]
  008cf	6b c0 59	 imul	 eax, 89			; 00000059H
  008d2	8d 8c 05 c9 fb
	ff ff		 lea	 ecx, DWORD PTR _pAnswer$[ebp+eax+5]
  008d9	51		 push	 ecx
  008da	e8 00 00 00 00	 call	 _strcpy
  008df	83 c4 08	 add	 esp, 8

; 148  : 		strcpy(pAnswer.Titles[i].Time, this->m_Data[i].Title.Time);

  008e2	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _i$227272[ebp]
  008e8	69 c0 59 04 00
	00		 imul	 eax, 1113		; 00000459H
  008ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  008f1	8d 54 01 24	 lea	 edx, DWORD PTR [ecx+eax+36]
  008f5	52		 push	 edx
  008f6	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _i$227272[ebp]
  008fc	6b c0 59	 imul	 eax, 89			; 00000059H
  008ff	8d 8c 05 d5 fb
	ff ff		 lea	 ecx, DWORD PTR _pAnswer$[ebp+eax+17]
  00906	51		 push	 ecx
  00907	e8 00 00 00 00	 call	 _strcpy
  0090c	83 c4 08	 add	 esp, 8

; 149  : 		strcpy(pAnswer.Titles[i].Text, this->m_Data[i].Title.Text);

  0090f	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _i$227272[ebp]
  00915	69 c0 59 04 00
	00		 imul	 eax, 1113		; 00000459H
  0091b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0091e	8d 54 01 2b	 lea	 edx, DWORD PTR [ecx+eax+43]
  00922	52		 push	 edx
  00923	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _i$227272[ebp]
  00929	6b c0 59	 imul	 eax, 89			; 00000059H
  0092c	8d 8c 05 dc fb
	ff ff		 lea	 ecx, DWORD PTR _pAnswer$[ebp+eax+24]
  00933	51		 push	 ecx
  00934	e8 00 00 00 00	 call	 _strcpy
  00939	83 c4 08	 add	 esp, 8

; 150  : 	}

  0093c	e9 53 ff ff ff	 jmp	 $LN2@OpenMain
$LN1@OpenMain:

; 151  : 	// ----
; 152  : 	DataSend(lpUser->m_Index, (LPBYTE)&pAnswer, sizeof(NEWS_ANS_TITLES));

  00941	68 31 04 00 00	 push	 1073			; 00000431H
  00946	8d 85 c4 fb ff
	ff		 lea	 eax, DWORD PTR _pAnswer$[ebp]
  0094c	50		 push	 eax
  0094d	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00950	8b 11		 mov	 edx, DWORD PTR [ecx]
  00952	52		 push	 edx
  00953	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00958	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@OpenMain:

; 153  : }

  0095b	5f		 pop	 edi
  0095c	5e		 pop	 esi
  0095d	5b		 pop	 ebx
  0095e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00961	33 cd		 xor	 ecx, ebp
  00963	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00968	8b e5		 mov	 esp, ebp
  0096a	5d		 pop	 ebp
  0096b	c2 04 00	 ret	 4
?OpenMain@NewsBoard@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; NewsBoard::OpenMain
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?OpenItem@NewsBoard@@QAEXPAUOBJECTSTRUCT@@PAUNEWS_REQ_NEWS@@@Z ; NewsBoard::OpenItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pAnswer$ = -1128					; size = 1118
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
_Request$ = 12						; size = 4
?OpenItem@NewsBoard@@QAEXPAUOBJECTSTRUCT@@PAUNEWS_REQ_NEWS@@@Z PROC ; NewsBoard::OpenItem
; _this$ = ecx

; 157  : {

  00970	55		 push	 ebp
  00971	8b ec		 mov	 ebp, esp
  00973	81 ec a8 04 00
	00		 sub	 esp, 1192		; 000004a8H
  00979	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0097e	33 c5		 xor	 eax, ebp
  00980	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00983	53		 push	 ebx
  00984	56		 push	 esi
  00985	57		 push	 edi
  00986	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 158  : 	if(!this->Enable)

  00989	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0098c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0098f	85 c9		 test	 ecx, ecx
  00991	75 05		 jne	 SHORT $LN4@OpenItem

; 159  : 	{
; 160  :  		return;

  00993	e9 16 01 00 00	 jmp	 $LN5@OpenItem
$LN4@OpenItem:

; 161  : 	}
; 162  : 
; 163  : 	if( lpUser->Connected != PLAYER_PLAYING )

  00998	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0099b	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0099f	74 05		 je	 SHORT $LN3@OpenItem

; 164  : 	{
; 165  : 		return;

  009a1	e9 08 01 00 00	 jmp	 $LN5@OpenItem
$LN3@OpenItem:

; 166  : 	}
; 167  : 	// ----
; 168  : 	if( Request->ID < 0 || Request->ID >= MAX_NEWS_LIST )

  009a6	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  009a9	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  009ad	85 c9		 test	 ecx, ecx
  009af	7c 0c		 jl	 SHORT $LN1@OpenItem
  009b1	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  009b4	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  009b8	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  009bb	7c 05		 jl	 SHORT $LN2@OpenItem
$LN1@OpenItem:

; 169  : 	{
; 170  : 		return;

  009bd	e9 ec 00 00 00	 jmp	 $LN5@OpenItem
$LN2@OpenItem:

; 171  : 	}
; 172  : 	// ----
; 173  : 	NEWS_ANS_NEWS pAnswer = { 0 };

  009c2	c6 85 98 fb ff
	ff 00		 mov	 BYTE PTR _pAnswer$[ebp], 0
  009c9	68 5d 04 00 00	 push	 1117			; 0000045dH
  009ce	6a 00		 push	 0
  009d0	8d 85 99 fb ff
	ff		 lea	 eax, DWORD PTR _pAnswer$[ebp+1]
  009d6	50		 push	 eax
  009d7	e8 00 00 00 00	 call	 _memset
  009dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 174  : 	PHeadSetW((LPBYTE)&pAnswer, 0xFE, sizeof(NEWS_ANS_NEWS));

  009df	68 5e 04 00 00	 push	 1118			; 0000045eH
  009e4	68 fe 00 00 00	 push	 254			; 000000feH
  009e9	8d 85 98 fb ff
	ff		 lea	 eax, DWORD PTR _pAnswer$[ebp]
  009ef	50		 push	 eax
  009f0	e8 00 00 00 00	 call	 ?PHeadSetW@@YAXPAEEH@Z	; PHeadSetW
  009f5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 175  : 	// ----
; 176  : 	pAnswer.ID = Request->ID;

  009f8	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  009fb	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  009fe	88 8d 9c fb ff
	ff		 mov	 BYTE PTR _pAnswer$[ebp+4], cl

; 177  : 	// ----
; 178  : 	strcpy(pAnswer.News.Title.Date, this->m_Data[Request->ID].Title.Date);

  00a04	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  00a07	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00a0b	69 c9 59 04 00
	00		 imul	 ecx, 1113		; 00000459H
  00a11	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a14	8d 44 0a 18	 lea	 eax, DWORD PTR [edx+ecx+24]
  00a18	50		 push	 eax
  00a19	8d 8d 9d fb ff
	ff		 lea	 ecx, DWORD PTR _pAnswer$[ebp+5]
  00a1f	51		 push	 ecx
  00a20	e8 00 00 00 00	 call	 _strcpy
  00a25	83 c4 08	 add	 esp, 8

; 179  : 	strcpy(pAnswer.News.Title.Time, this->m_Data[Request->ID].Title.Time);

  00a28	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  00a2b	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00a2f	69 c9 59 04 00
	00		 imul	 ecx, 1113		; 00000459H
  00a35	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a38	8d 44 0a 24	 lea	 eax, DWORD PTR [edx+ecx+36]
  00a3c	50		 push	 eax
  00a3d	8d 8d a9 fb ff
	ff		 lea	 ecx, DWORD PTR _pAnswer$[ebp+17]
  00a43	51		 push	 ecx
  00a44	e8 00 00 00 00	 call	 _strcpy
  00a49	83 c4 08	 add	 esp, 8

; 180  : 	strcpy(pAnswer.News.Title.Text, this->m_Data[Request->ID].Title.Text);

  00a4c	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  00a4f	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00a53	69 c9 59 04 00
	00		 imul	 ecx, 1113		; 00000459H
  00a59	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a5c	8d 44 0a 2b	 lea	 eax, DWORD PTR [edx+ecx+43]
  00a60	50		 push	 eax
  00a61	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR _pAnswer$[ebp+24]
  00a67	51		 push	 ecx
  00a68	e8 00 00 00 00	 call	 _strcpy
  00a6d	83 c4 08	 add	 esp, 8

; 181  : 	strcpy(pAnswer.News.Text, this->m_Data[Request->ID].Text);

  00a70	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  00a73	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00a77	69 c9 59 04 00
	00		 imul	 ecx, 1113		; 00000459H
  00a7d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a80	8d 44 0a 71	 lea	 eax, DWORD PTR [edx+ecx+113]
  00a84	50		 push	 eax
  00a85	8d 8d f6 fb ff
	ff		 lea	 ecx, DWORD PTR _pAnswer$[ebp+94]
  00a8b	51		 push	 ecx
  00a8c	e8 00 00 00 00	 call	 _strcpy
  00a91	83 c4 08	 add	 esp, 8

; 182  : 	// ----
; 183  : 	DataSend(lpUser->m_Index, (LPBYTE)&pAnswer, sizeof(NEWS_ANS_NEWS));

  00a94	68 5e 04 00 00	 push	 1118			; 0000045eH
  00a99	8d 85 98 fb ff
	ff		 lea	 eax, DWORD PTR _pAnswer$[ebp]
  00a9f	50		 push	 eax
  00aa0	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00aa3	8b 11		 mov	 edx, DWORD PTR [ecx]
  00aa5	52		 push	 edx
  00aa6	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00aab	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@OpenItem:

; 184  : }

  00aae	5f		 pop	 edi
  00aaf	5e		 pop	 esi
  00ab0	5b		 pop	 ebx
  00ab1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ab4	33 cd		 xor	 ecx, ebp
  00ab6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00abb	8b e5		 mov	 esp, ebp
  00abd	5d		 pop	 ebp
  00abe	c2 08 00	 ret	 8
?OpenItem@NewsBoard@@QAEXPAUOBJECTSTRUCT@@PAUNEWS_REQ_NEWS@@@Z ENDP ; NewsBoard::OpenItem
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_NewsBoard@@YAXXZ
text$yc	SEGMENT
??__Eg_NewsBoard@@YAXXZ PROC				; `dynamic initializer for 'g_NewsBoard'', COMDAT

; 12   : NewsBoard g_NewsBoard;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewsBoard@@3VNewsBoard@@A ; g_NewsBoard
  0000e	e8 00 00 00 00	 call	 ??0NewsBoard@@QAE@XZ	; NewsBoard::NewsBoard
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_NewsBoard@@YAXXZ ; `dynamic atexit destructor for 'g_NewsBoard''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_NewsBoard@@YAXXZ ENDP				; `dynamic initializer for 'g_NewsBoard''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_NewsBoard@@YAXXZ
text$yd	SEGMENT
??__Fg_NewsBoard@@YAXXZ PROC				; `dynamic atexit destructor for 'g_NewsBoard'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewsBoard@@3VNewsBoard@@A ; g_NewsBoard
  0000e	e8 00 00 00 00	 call	 ??1NewsBoard@@QAE@XZ	; NewsBoard::~NewsBoard
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_NewsBoard@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_NewsBoard''
text$yd	ENDS
PUBLIC	?g_NewsBoard@@3VNewsBoard@@A			; g_NewsBoard
_BSS	SEGMENT
?g_NewsBoard@@3VNewsBoard@@A DB 03444H DUP (?)		; g_NewsBoard
_BSS	ENDS
CRT$XCU	SEGMENT
_g_NewsBoard$initializer$ DD FLAT:??__Eg_NewsBoard@@YAXXZ
CRT$XCU	ENDS
END
