; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\SocketOption.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_iSeedExtractMoney@@3HA			; g_iSeedExtractMoney
PUBLIC	?g_iSeedSphereCompositeMoney@@3HA		; g_iSeedSphereCompositeMoney
PUBLIC	?g_iSeedSphereSetMoney@@3HA			; g_iSeedSphereSetMoney
PUBLIC	?g_iSeedSphereRemoveMoney@@3HA			; g_iSeedSphereRemoveMoney
PUBLIC	?g_iShopBuySocketItemSlotCount@@3HA		; g_iShopBuySocketItemSlotCount
_BSS	SEGMENT
?g_iSeedExtractMoney@@3HA DD 01H DUP (?)		; g_iSeedExtractMoney
?g_iSeedSphereCompositeMoney@@3HA DD 01H DUP (?)	; g_iSeedSphereCompositeMoney
?g_iSeedSphereSetMoney@@3HA DD 01H DUP (?)		; g_iSeedSphereSetMoney
?g_iSeedSphereRemoveMoney@@3HA DD 01H DUP (?)		; g_iSeedSphereRemoveMoney
?g_iShopBuySocketItemSlotCount@@3HA DD 01H DUP (?)	; g_iShopBuySocketItemSlotCount
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CSocketOption@@6B@				; CSocketOption::`vftable'
PUBLIC	??0CSocketOption@@QAE@XZ			; CSocketOption::CSocketOption
PUBLIC	??_R4CSocketOption@@6B@				; CSocketOption::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSocketOption@@@8			; CSocketOption `RTTI Type Descriptor'
PUBLIC	??_R3CSocketOption@@8				; CSocketOption::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSocketOption@@8				; CSocketOption::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSocketOption@@8			; CSocketOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1TRandomPoolMgr@@UAE@XZ:PROC			; TRandomPoolMgr::~TRandomPoolMgr
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??0TRandomPoolMgr@@QAE@XZ:PROC			; TRandomPoolMgr::TRandomPoolMgr
EXTRN	??0CSphere@@QAE@XZ:PROC				; CSphere::CSphere
EXTRN	??1CSphere@@QAE@XZ:PROC				; CSphere::~CSphere
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0CSeed@@QAE@XZ:PROC				; CSeed::CSeed
EXTRN	??1CSeed@@QAE@XZ:PROC				; CSeed::~CSeed
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECSocketOption@@UAEPAXI@Z:PROC		; CSocketOption::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CSocketOption@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\socketoption.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CSocketOption@@8 DD FLAT:??_R0?AVCSocketOption@@@8 ; CSocketOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSocketOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CSocketOption@@8
rdata$r	SEGMENT
??_R2CSocketOption@@8 DD FLAT:??_R1A@?0A@EA@CSocketOption@@8 ; CSocketOption::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSocketOption@@8
rdata$r	SEGMENT
??_R3CSocketOption@@8 DD 00H				; CSocketOption::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSocketOption@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSocketOption@@@8
_DATA	SEGMENT
??_R0?AVCSocketOption@@@8 DD FLAT:??_7type_info@@6B@	; CSocketOption `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSocketOption@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSocketOption@@6B@
rdata$r	SEGMENT
??_R4CSocketOption@@6B@ DD 00H				; CSocketOption::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSocketOption@@@8
	DD	FLAT:??_R3CSocketOption@@8
rdata$r	ENDS
;	COMDAT ??_7CSocketOption@@6B@
CONST	SEGMENT
??_7CSocketOption@@6B@ DD FLAT:??_R4CSocketOption@@6B@	; CSocketOption::`vftable'
	DD	FLAT:??_ECSocketOption@@UAEPAXI@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CSocketOption@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSocketOption@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSocketOption@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CSocketOption@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CSocketOption@@QAE@XZ$3
__ehfuncinfo$??0CSocketOption@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CSocketOption@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSocketOption@@QAE@XZ PROC				; CSocketOption::CSocketOption
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSocketOption@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSocketOption@@6B@
  00034	68 00 00 00 00	 push	 OFFSET ??1CSeed@@QAE@XZ	; CSeed::~CSeed
  00039	68 00 00 00 00	 push	 OFFSET ??0CSeed@@QAE@XZ	; CSeed::CSeed
  0003e	6a 32		 push	 50			; 00000032H
  00040	6a 14		 push	 20			; 00000014H
  00042	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 c0 04	 add	 eax, 4
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	68 00 00 00 00	 push	 OFFSET ??1CSphere@@QAE@XZ ; CSphere::~CSphere
  0005a	68 00 00 00 00	 push	 OFFSET ??0CSphere@@QAE@XZ ; CSphere::CSphere
  0005f	6a 05		 push	 5
  00061	6a 0c		 push	 12			; 0000000cH
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	05 ec 03 00 00	 add	 eax, 1004		; 000003ecH
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  00071	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00075	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  0007e	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00083	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  00090	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00095	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00099	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  000a2	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr

; 30   : 
; 31   : }

  000a7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CSocketOption@@QAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CSeed@@QAE@XZ	; CSeed::~CSeed
  00005	6a 32		 push	 50			; 00000032H
  00007	6a 14		 push	 20			; 00000014H
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00015	c3		 ret	 0
__unwindfunclet$??0CSocketOption@@QAE@XZ$1:
  00016	68 00 00 00 00	 push	 OFFSET ??1CSphere@@QAE@XZ ; CSphere::~CSphere
  0001b	6a 05		 push	 5
  0001d	6a 0c		 push	 12			; 0000000cH
  0001f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00022	05 ec 03 00 00	 add	 eax, 1004		; 000003ecH
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0002d	c3		 ret	 0
__unwindfunclet$??0CSocketOption@@QAE@XZ$2:
  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  00037	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??0CSocketOption@@QAE@XZ$3:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  00045	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??0CSocketOption@@QAE@XZ:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSocketOption@@QAE@XZ
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSocketOption@@QAE@XZ ENDP				; CSocketOption::CSocketOption
PUBLIC	??1CSocketOption@@UAE@XZ			; CSocketOption::~CSocketOption
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCSocketOption@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSocketOption@@UAEPAXI@Z PROC			; CSocketOption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CSocketOption@@UAE@XZ ; CSocketOption::~CSocketOption
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCSocketOption@@UAEPAXI@Z ENDP			; CSocketOption::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$??1CSocketOption@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSocketOption@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CSocketOption@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CSocketOption@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CSocketOption@@UAE@XZ$3
__ehfuncinfo$??1CSocketOption@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CSocketOption@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSocketOption@@UAE@XZ PROC				; CSocketOption::~CSocketOption
; _this$ = ecx

; 34   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	6a ff		 push	 -1
  000d5	68 00 00 00 00	 push	 __ehhandler$??1CSocketOption@@UAE@XZ
  000da	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  000e0	50		 push	 eax
  000e1	83 ec 44	 sub	 esp, 68			; 00000044H
  000e4	53		 push	 ebx
  000e5	56		 push	 esi
  000e6	57		 push	 edi
  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000ec	33 c5		 xor	 eax, ebp
  000ee	50		 push	 eax
  000ef	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  000f2	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  000f8	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  000fb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000fe	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSocketOption@@6B@
  00104	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 35   : 
; 36   : }

  0010b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  00114	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  00119	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0011d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  00126	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  0012b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0012f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  00138	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  0013d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00141	68 00 00 00 00	 push	 OFFSET ??1CSphere@@QAE@XZ ; CSphere::~CSphere
  00146	6a 05		 push	 5
  00148	6a 0c		 push	 12			; 0000000cH
  0014a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0014d	05 ec 03 00 00	 add	 eax, 1004		; 000003ecH
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00158	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015f	68 00 00 00 00	 push	 OFFSET ??1CSeed@@QAE@XZ	; CSeed::~CSeed
  00164	6a 32		 push	 50			; 00000032H
  00166	6a 14		 push	 20			; 00000014H
  00168	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016b	83 c1 04	 add	 ecx, 4
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00174	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00177	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017e	59		 pop	 ecx
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	5b		 pop	 ebx
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CSocketOption@@UAE@XZ$0:
  00065	68 00 00 00 00	 push	 OFFSET ??1CSeed@@QAE@XZ	; CSeed::~CSeed
  0006a	6a 32		 push	 50			; 00000032H
  0006c	6a 14		 push	 20			; 00000014H
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	83 c0 04	 add	 eax, 4
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0007a	c3		 ret	 0
__unwindfunclet$??1CSocketOption@@UAE@XZ$1:
  0007b	68 00 00 00 00	 push	 OFFSET ??1CSphere@@QAE@XZ ; CSphere::~CSphere
  00080	6a 05		 push	 5
  00082	6a 0c		 push	 12			; 0000000cH
  00084	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00087	05 ec 03 00 00	 add	 eax, 1004		; 000003ecH
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00092	c3		 ret	 0
__unwindfunclet$??1CSocketOption@@UAE@XZ$2:
  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  0009c	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??1CSocketOption@@UAE@XZ$3:
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  000aa	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??1CSocketOption@@UAE@XZ:
  000af	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000b3	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000b6	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  000b9	33 c8		 xor	 ecx, eax
  000bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c0	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSocketOption@@UAE@XZ
  000c5	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSocketOption@@UAE@XZ ENDP				; CSocketOption::~CSocketOption
PUBLIC	?Init@CSocketOption@@QAEXXZ			; CSocketOption::Init
EXTRN	?InitPool@TRandomPoolMgr@@QAEXXZ:PROC		; TRandomPoolMgr::InitPool
EXTRN	?ClearData@CSocketSphere@@QAEXXZ:PROC		; CSocketSphere::ClearData
EXTRN	?ClearData@CSphere@@QAEXXZ:PROC			; CSphere::ClearData
EXTRN	?ClearData@CSeed@@QAEXXZ:PROC			; CSeed::ClearData
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Init@CSocketOption@@QAEXXZ PROC			; CSocketOption::Init
; _this$ = ecx

; 39   : {

  00190	55		 push	 ebp
  00191	8b ec		 mov	 ebp, esp
  00193	83 ec 48	 sub	 esp, 72			; 00000048H
  00196	53		 push	 ebx
  00197	56		 push	 esi
  00198	57		 push	 edi
  00199	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 	int i = 0;

  0019c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 41   : 
; 42   : 	for(i = 0; i < 50;i++)

  001a3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001aa	eb 09		 jmp	 SHORT $LN15@Init
$LN14@Init:
  001ac	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001af	83 c0 01	 add	 eax, 1
  001b2	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN15@Init:
  001b5	83 7d f8 32	 cmp	 DWORD PTR _i$[ebp], 50	; 00000032H
  001b9	7d 14		 jge	 SHORT $LN13@Init

; 43   : 	{
; 44   : 		this->SocketSeed[i].ClearData();

  001bb	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001be	6b c0 14	 imul	 eax, 20			; 00000014H
  001c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c4	8d 4c 01 04	 lea	 ecx, DWORD PTR [ecx+eax+4]
  001c8	e8 00 00 00 00	 call	 ?ClearData@CSeed@@QAEXXZ ; CSeed::ClearData

; 45   : 	}

  001cd	eb dd		 jmp	 SHORT $LN14@Init
$LN13@Init:

; 46   : 
; 47   : 	for(i = 0;i < MAX_SOCKET_OPTION;i++)

  001cf	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001d6	eb 09		 jmp	 SHORT $LN12@Init
$LN11@Init:
  001d8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001db	83 c0 01	 add	 eax, 1
  001de	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN12@Init:
  001e1	83 7d f8 05	 cmp	 DWORD PTR _i$[ebp], 5
  001e5	7d 17		 jge	 SHORT $LN10@Init

; 48   : 	{	
; 49   : 		this->SocketSphere[i].ClearData();

  001e7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001ea	6b c0 0c	 imul	 eax, 12			; 0000000cH
  001ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f0	8d 8c 01 ec 03
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+1004]
  001f7	e8 00 00 00 00	 call	 ?ClearData@CSphere@@QAEXXZ ; CSphere::ClearData

; 50   : 	}

  001fc	eb da		 jmp	 SHORT $LN11@Init
$LN10@Init:

; 51   : 
; 52   : 	for(i = 0;i < 6;i++) //sphere element

  001fe	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00205	eb 09		 jmp	 SHORT $LN9@Init
$LN8@Init:
  00207	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0020a	83 c0 01	 add	 eax, 1
  0020d	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN9@Init:
  00210	83 7d f8 06	 cmp	 DWORD PTR _i$[ebp], 6
  00214	7d 17		 jge	 SHORT $LN7@Init

; 53   : 	{
; 54   : 		this->SocketSpear[i].ClearData();

  00216	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00219	6b c0 14	 imul	 eax, 20			; 00000014H
  0021c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021f	8d 8c 01 28 04
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+1064]
  00226	e8 00 00 00 00	 call	 ?ClearData@CSocketSphere@@QAEXXZ ; CSocketSphere::ClearData

; 55   : 	}

  0022b	eb da		 jmp	 SHORT $LN8@Init
$LN7@Init:

; 56   : 
; 57   : 	this->SocketSlotRandomPool.InitPool();

  0022d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00230	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  00236	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 58   : 	this->SocketRandomPool.InitPool();

  0023b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0023e	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  00244	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 59   : 
; 60   : 	for(i = 0;i < MAX_SOCKET_OPTION;i++)

  00249	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00250	eb 09		 jmp	 SHORT $LN6@Init
$LN5@Init:
  00252	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00255	83 c0 01	 add	 eax, 1
  00258	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN6@Init:
  0025b	83 7d f8 05	 cmp	 DWORD PTR _i$[ebp], 5
  0025f	7d 24		 jge	 SHORT $LN4@Init

; 61   : 	{
; 62   : 		this->iSphereDropRate[i] = 0;

  00261	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00264	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00267	c7 84 81 34 05
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+1332], 0

; 63   : 		this->iSphereDropLevel[i] = 0;

  00272	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00275	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00278	c7 84 81 48 05
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+1352], 0

; 64   : 	}

  00283	eb cd		 jmp	 SHORT $LN5@Init
$LN4@Init:

; 65   : 
; 66   : 	for( i = 0; i < MAX_SOCKET_ITEM; i++ )

  00285	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0028c	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  0028e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00291	83 c0 01	 add	 eax, 1
  00294	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN3@Init:
  00297	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 150	; 00000096H
  0029e	7d 24		 jge	 SHORT $LN1@Init

; 67   : 	{
; 68   : 		this->m_SocketItemList[i].ItemID		= -1;

  002a0	83 c8 ff	 or	 eax, -1
  002a3	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  002a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002a9	66 89 84 8a 5c
	05 00 00	 mov	 WORD PTR [edx+ecx*4+1372], ax

; 69   : 		this->m_SocketItemList[i].ItemIndex	= -1;

  002b1	83 c8 ff	 or	 eax, -1
  002b4	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  002b7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002ba	66 89 84 8a 5e
	05 00 00	 mov	 WORD PTR [edx+ecx*4+1374], ax

; 70   : 	}

  002c2	eb ca		 jmp	 SHORT $LN2@Init
$LN1@Init:

; 71   : 	// ----
; 72   : 	this->m_SocketItemCount = 0;

  002c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c7	c7 80 b4 07 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1972], 0

; 73   : }

  002d1	5f		 pop	 edi
  002d2	5e		 pop	 esi
  002d3	5b		 pop	 ebx
  002d4	8b e5		 mov	 esp, ebp
  002d6	5d		 pop	 ebp
  002d7	c3		 ret	 0
?Init@CSocketOption@@QAEXXZ ENDP			; CSocketOption::Init
_TEXT	ENDS
PUBLIC	?_InitOption@CSocketOption@@QAEXXZ		; CSocketOption::_InitOption
PUBLIC	??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadScript@CSocketOption@@QAEEPAD@Z		; CSocketOption::LoadScript
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?SetInfo@CSeed@@QAEXEEEEQAEH@Z:PROC		; CSeed::SetInfo
EXTRN	?AddValue@TRandomPoolMgr@@QAE_NHH@Z:PROC	; TRandomPoolMgr::AddValue
EXTRN	_strcmp:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenNumber DD	01H DUP (?)
_TokenString DB	064H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@
CONST	SEGMENT
??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@ DB '[ERROR'
	DB	'] MAX SeedSphere Option Data Overflow! [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@
CONST	SEGMENT
??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@ DB '[SocketO'
	DB	'ption] SocketOption Script file Load failed. (%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv694 = -172						; size = 4
tv685 = -172						; size = 4
tv676 = -172						; size = 4
tv667 = -172						; size = 4
tv658 = -172						; size = 4
tv649 = -172						; size = 4
tv634 = -172						; size = 4
tv625 = -172						; size = 4
tv615 = -172						; size = 4
tv588 = -172						; size = 4
tv579 = -172						; size = 4
tv570 = -172						; size = 4
tv561 = -172						; size = 4
tv552 = -172						; size = 4
tv537 = -172						; size = 4
tv528 = -172						; size = 4
tv518 = -172						; size = 4
tv509 = -172						; size = 4
tv500 = -172						; size = 4
tv467 = -172						; size = 4
tv458 = -172						; size = 4
tv449 = -172						; size = 4
tv440 = -172						; size = 4
tv431 = -172						; size = 4
tv422 = -172						; size = 4
tv412 = -172						; size = 4
tv403 = -172						; size = 4
tv394 = -172						; size = 4
tv692 = -168						; size = 4
tv683 = -168						; size = 4
tv674 = -168						; size = 4
tv665 = -168						; size = 4
tv656 = -168						; size = 4
tv647 = -168						; size = 4
tv632 = -168						; size = 4
tv623 = -168						; size = 4
tv613 = -168						; size = 4
tv586 = -168						; size = 4
tv577 = -168						; size = 4
tv568 = -168						; size = 4
tv559 = -168						; size = 4
tv550 = -168						; size = 4
tv535 = -168						; size = 4
tv526 = -168						; size = 4
tv516 = -168						; size = 4
tv507 = -168						; size = 4
tv498 = -168						; size = 4
tv465 = -168						; size = 4
tv456 = -168						; size = 4
tv447 = -168						; size = 4
tv438 = -168						; size = 4
tv429 = -168						; size = 4
tv420 = -168						; size = 4
tv410 = -168						; size = 4
tv401 = -168						; size = 4
tv392 = -168						; size = 4
tv334 = -164						; size = 4
tv239 = -164						; size = 4
tv689 = -162						; size = 2
tv680 = -162						; size = 2
tv671 = -162						; size = 2
tv662 = -162						; size = 2
tv653 = -162						; size = 2
tv644 = -162						; size = 2
tv629 = -162						; size = 2
tv620 = -162						; size = 2
tv610 = -162						; size = 2
tv583 = -162						; size = 2
tv574 = -162						; size = 2
tv565 = -162						; size = 2
tv556 = -162						; size = 2
tv547 = -162						; size = 2
tv532 = -162						; size = 2
tv523 = -162						; size = 2
tv513 = -162						; size = 2
tv504 = -162						; size = 2
tv495 = -162						; size = 2
tv462 = -162						; size = 2
tv453 = -162						; size = 2
tv444 = -162						; size = 2
tv435 = -162						; size = 2
tv426 = -162						; size = 2
tv417 = -162						; size = 2
tv407 = -162						; size = 2
tv398 = -162						; size = 2
tv389 = -162						; size = 2
_m_70$227650 = -96					; size = 6
_m_68$227649 = -88					; size = 4
_m_64$227648 = -83					; size = 1
_m_60$227647 = -82					; size = 1
_m_5C$227646 = -81					; size = 1
_m_58$227645 = -80					; size = 4
_n$227628 = -76						; size = 4
_temp$227616 = -72					; size = 20
_m_3C$227599 = -52					; size = 4
_m_38$227598 = -48					; size = 4
_bt_34$227597 = -44					; size = 5
_bt_2C$227596 = -36					; size = 1
_bt_28$227595 = -35					; size = 1
_bt_24$227594 = -34					; size = 1
_bt_20$227593 = -33					; size = 1
_m_1C$ = -32						; size = 4
_m_18$ = -28						; size = 4
_m_14$ = -24						; size = 4
_m_10$ = -20						; size = 4
_m_0C$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpszFileName$ = 8					; size = 4
?LoadScript@CSocketOption@@QAEEPAD@Z PROC		; CSocketOption::LoadScript
; _this$ = ecx

; 76   : {

  002e0	55		 push	 ebp
  002e1	8b ec		 mov	 ebp, esp
  002e3	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  002e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  002ee	33 c5		 xor	 eax, ebp
  002f0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  002f3	53		 push	 ebx
  002f4	56		 push	 esi
  002f5	57		 push	 edi
  002f6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 77   : 	this->Init();

  002f9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002fc	e8 00 00 00 00	 call	 ?Init@CSocketOption@@QAEXXZ ; CSocketOption::Init

; 78   : 
; 79   : 	SMDFile = fopen(lpszFileName, "r");

  00301	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00306	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 _fopen
  0030f	83 c4 08	 add	 esp, 8
  00312	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 80   : 
; 81   : 	if(SMDFile == NULL)

  00317	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  0031e	75 18		 jne	 SHORT $LN36@LoadScript

; 82   : 	{
; 83   : 		MsgBox("[SocketOption] SocketOption Script file Load failed. (%s)",lpszFileName);

  00320	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00323	50		 push	 eax
  00324	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@
  00329	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0032e	83 c4 08	 add	 esp, 8

; 84   : 		return 0;

  00331	32 c0		 xor	 al, al
  00333	e9 89 0b 00 00	 jmp	 $LN37@LoadScript
$LN36@LoadScript:

; 85   : 	}
; 86   : 
; 87   : 	SMDToken Token;
; 88   : 
; 89   : 	int m_0C = 0;

  00338	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _m_0C$[ebp], 0

; 90   : 	int m_10 = 0;

  0033f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _m_10$[ebp], 0

; 91   : 	int m_14 = 0;

  00346	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _m_14$[ebp], 0

; 92   : 	int m_18 = 0;

  0034d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _m_18$[ebp], 0

; 93   : 	int m_1C = 0;

  00354	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _m_1C$[ebp], 0
$LN35@LoadScript:

; 94   : 
; 95   : 	while(TRUE)

  0035b	b8 01 00 00 00	 mov	 eax, 1
  00360	85 c0		 test	 eax, eax
  00362	0f 84 4f 0b 00
	00		 je	 $LN34@LoadScript

; 96   : 	{
; 97   : 		Token = GetToken();

  00368	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0036d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 98   : 
; 99   : 		if ( Token == END )

  00370	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00374	75 05		 jne	 SHORT $LN33@LoadScript

; 100  : 			break;

  00376	e9 3c 0b 00 00	 jmp	 $LN34@LoadScript
$LN33@LoadScript:

; 101  : 			
; 102  : 		if(!strcmp("end",TokenString))

  0037b	68 00 00 00 00	 push	 OFFSET _TokenString
  00380	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00385	e8 00 00 00 00	 call	 _strcmp
  0038a	83 c4 08	 add	 esp, 8
  0038d	85 c0		 test	 eax, eax
  0038f	75 05		 jne	 SHORT $LN32@LoadScript

; 103  : 			break;

  00391	e9 21 0b 00 00	 jmp	 $LN34@LoadScript
$LN32@LoadScript:

; 104  : 
; 105  : 		if( Token == NUMBER )

  00396	83 7d f4 01	 cmp	 DWORD PTR _Token$[ebp], 1
  0039a	0f 85 12 0b 00
	00		 jne	 $LN29@LoadScript

; 106  : 		{
; 107  : 			m_0C = (int)TokenNumber;

  003a0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003a6	e8 00 00 00 00	 call	 __ftol2_sse
  003ab	89 45 f0	 mov	 DWORD PTR _m_0C$[ebp], eax
$LN30@LoadScript:

; 108  : 
; 109  : 			while(true)

  003ae	b8 01 00 00 00	 mov	 eax, 1
  003b3	85 c0		 test	 eax, eax
  003b5	0f 84 f7 0a 00
	00		 je	 $LN29@LoadScript

; 110  : 			{
; 111  : 				if(m_0C == 0)// m_0c == 0 - identical

  003bb	83 7d f0 00	 cmp	 DWORD PTR _m_0C$[ebp], 0
  003bf	0f 85 18 03 00
	00		 jne	 $LN28@LoadScript

; 112  : 				{
; 113  : 					BYTE bt_20 = 0;

  003c5	c6 45 df 00	 mov	 BYTE PTR _bt_20$227593[ebp], 0

; 114  : 					BYTE bt_24 = 0;

  003c9	c6 45 de 00	 mov	 BYTE PTR _bt_24$227594[ebp], 0

; 115  : 					BYTE bt_28 = 0;

  003cd	c6 45 dd 00	 mov	 BYTE PTR _bt_28$227595[ebp], 0

; 116  : 					BYTE bt_2C = 0;

  003d1	c6 45 dc 00	 mov	 BYTE PTR _bt_2C$227596[ebp], 0

; 117  : 					BYTE bt_34[MAX_SOCKET_OPTION] = {0};

  003d5	c6 45 d4 00	 mov	 BYTE PTR _bt_34$227597[ebp], 0
  003d9	33 c0		 xor	 eax, eax
  003db	89 45 d5	 mov	 DWORD PTR _bt_34$227597[ebp+1], eax

; 118  : 
; 119  : 					int m_38 = 0;

  003de	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _m_38$227598[ebp], 0

; 120  : 					int m_3C = 0;

  003e5	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _m_3C$227599[ebp], 0

; 121  : 
; 122  : 					Token = GetToken();

  003ec	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003f1	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 123  : 
; 124  : 					if(!strcmp("end",TokenString))

  003f4	68 00 00 00 00	 push	 OFFSET _TokenString
  003f9	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  003fe	e8 00 00 00 00	 call	 _strcmp
  00403	83 c4 08	 add	 esp, 8
  00406	85 c0		 test	 eax, eax
  00408	75 05		 jne	 SHORT $LN27@LoadScript

; 125  : 						break;

  0040a	e9 a3 0a 00 00	 jmp	 $LN29@LoadScript
$LN27@LoadScript:

; 126  : 
; 127  : 					bt_20 = (BYTE)TokenNumber;

  0040f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00415	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv389[ebp]
  0041b	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv389[ebp]
  00422	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00427	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv392[ebp], eax
  0042d	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv392[ebp]
  00433	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv394[ebp]
  00439	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv389[ebp]
  0043f	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv394[ebp]
  00445	88 45 df	 mov	 BYTE PTR _bt_20$227593[ebp], al

; 128  : 					
; 129  : 					Token = GetToken();		bt_24		= (BYTE)TokenNumber;	

  00448	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0044d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00450	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00456	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv398[ebp]
  0045c	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv398[ebp]
  00463	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00468	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv401[ebp], eax
  0046e	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv401[ebp]
  00474	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv403[ebp]
  0047a	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv398[ebp]
  00480	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv403[ebp]
  00486	88 45 de	 mov	 BYTE PTR _bt_24$227594[ebp], al

; 130  : 					Token = GetToken();		bt_28		= (BYTE)TokenNumber;		

  00489	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0048e	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00491	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00497	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv407[ebp]
  0049d	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv407[ebp]
  004a4	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004a9	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv410[ebp], eax
  004af	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv410[ebp]
  004b5	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv412[ebp]
  004bb	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv407[ebp]
  004c1	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv412[ebp]
  004c7	88 45 dd	 mov	 BYTE PTR _bt_28$227595[ebp], al

; 131  : 					Token = GetToken();		// Reserved for Name

  004ca	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004cf	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 132  : 					Token = GetToken();		bt_2C		= (BYTE)TokenNumber;		

  004d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004d7	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  004da	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004e0	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv417[ebp]
  004e6	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv417[ebp]
  004ed	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004f2	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv420[ebp], eax
  004f8	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv420[ebp]
  004fe	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv422[ebp]
  00504	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv417[ebp]
  0050a	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv422[ebp]
  00510	88 45 dc	 mov	 BYTE PTR _bt_2C$227596[ebp], al

; 133  : 					Token = GetToken();		bt_34[0]	= (BYTE)TokenNumber;	

  00513	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00518	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  0051b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00521	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv426[ebp]
  00527	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv426[ebp]
  0052e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00533	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv429[ebp], eax
  00539	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv429[ebp]
  0053f	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv431[ebp]
  00545	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv426[ebp]
  0054b	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv431[ebp]
  00551	88 45 d4	 mov	 BYTE PTR _bt_34$227597[ebp], al

; 134  : 					Token = GetToken();		bt_34[1]	= (BYTE)TokenNumber;	

  00554	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00559	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  0055c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00562	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv435[ebp]
  00568	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv435[ebp]
  0056f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00574	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv438[ebp], eax
  0057a	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv438[ebp]
  00580	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv440[ebp]
  00586	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv435[ebp]
  0058c	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv440[ebp]
  00592	88 45 d5	 mov	 BYTE PTR _bt_34$227597[ebp+1], al

; 135  : 					Token = GetToken();		bt_34[2]	= (BYTE)TokenNumber;		

  00595	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0059a	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  0059d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005a3	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv444[ebp]
  005a9	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv444[ebp]
  005b0	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005b5	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv447[ebp], eax
  005bb	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv447[ebp]
  005c1	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv449[ebp]
  005c7	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv444[ebp]
  005cd	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv449[ebp]
  005d3	88 45 d6	 mov	 BYTE PTR _bt_34$227597[ebp+2], al

; 136  : 					Token = GetToken();		bt_34[3]	= (BYTE)TokenNumber;	

  005d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005db	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  005de	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005e4	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv453[ebp]
  005ea	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv453[ebp]
  005f1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005f6	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv456[ebp], eax
  005fc	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv456[ebp]
  00602	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv458[ebp]
  00608	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv453[ebp]
  0060e	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv458[ebp]
  00614	88 45 d7	 mov	 BYTE PTR _bt_34$227597[ebp+3], al

; 137  : 					Token = GetToken();		bt_34[4]	= (BYTE)TokenNumber;	

  00617	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0061c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  0061f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00625	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv462[ebp]
  0062b	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv462[ebp]
  00632	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00637	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv465[ebp], eax
  0063d	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv465[ebp]
  00643	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv467[ebp]
  00649	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv462[ebp]
  0064f	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv467[ebp]
  00655	88 45 d8	 mov	 BYTE PTR _bt_34$227597[ebp+4], al

; 138  : 					Token = GetToken();		m_38		= (int)TokenNumber;

  00658	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0065d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00660	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00666	e8 00 00 00 00	 call	 __ftol2_sse
  0066b	89 45 d0	 mov	 DWORD PTR _m_38$227598[ebp], eax

; 139  : 
; 140  : 
; 141  : 					this->SocketRandomPool.AddValue(bt_20,m_38);

  0066e	8b 45 d0	 mov	 eax, DWORD PTR _m_38$227598[ebp]
  00671	50		 push	 eax
  00672	0f b6 4d df	 movzx	 ecx, BYTE PTR _bt_20$227593[ebp]
  00676	51		 push	 ecx
  00677	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0067a	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  00680	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 142  : 
; 143  : 					this->SocketSeed[m_10].SetInfo(bt_20,bt_24,bt_28,bt_2C,bt_34,m_38);

  00685	8b 45 d0	 mov	 eax, DWORD PTR _m_38$227598[ebp]
  00688	50		 push	 eax
  00689	8d 4d d4	 lea	 ecx, DWORD PTR _bt_34$227597[ebp]
  0068c	51		 push	 ecx
  0068d	0f b6 55 dc	 movzx	 edx, BYTE PTR _bt_2C$227596[ebp]
  00691	52		 push	 edx
  00692	0f b6 45 dd	 movzx	 eax, BYTE PTR _bt_28$227595[ebp]
  00696	50		 push	 eax
  00697	0f b6 4d de	 movzx	 ecx, BYTE PTR _bt_24$227594[ebp]
  0069b	51		 push	 ecx
  0069c	0f b6 55 df	 movzx	 edx, BYTE PTR _bt_20$227593[ebp]
  006a0	52		 push	 edx
  006a1	8b 45 ec	 mov	 eax, DWORD PTR _m_10$[ebp]
  006a4	6b c0 14	 imul	 eax, 20			; 00000014H
  006a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006aa	8d 4c 01 04	 lea	 ecx, DWORD PTR [ecx+eax+4]
  006ae	e8 00 00 00 00	 call	 ?SetInfo@CSeed@@QAEXEEEEQAEH@Z ; CSeed::SetInfo

; 144  : 
; 145  : 					m_10++;

  006b3	8b 45 ec	 mov	 eax, DWORD PTR _m_10$[ebp]
  006b6	83 c0 01	 add	 eax, 1
  006b9	89 45 ec	 mov	 DWORD PTR _m_10$[ebp], eax

; 146  : 
; 147  : 					if(m_10 > MAX_SEED_OPTION)

  006bc	83 7d ec 32	 cmp	 DWORD PTR _m_10$[ebp], 50 ; 00000032H
  006c0	7e 16		 jle	 SHORT $LN26@LoadScript

; 148  : 					{
; 149  : 						MsgBox("[ERROR] MAX SeedSphere Option Data Overflow! [%d]",m_10);

  006c2	8b 45 ec	 mov	 eax, DWORD PTR _m_10$[ebp]
  006c5	50		 push	 eax
  006c6	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@
  006cb	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  006d0	83 c4 08	 add	 esp, 8

; 150  : 						break;

  006d3	e9 da 07 00 00	 jmp	 $LN29@LoadScript
$LN26@LoadScript:

; 151  : 					}
; 152  : 				}

  006d8	e9 d0 07 00 00	 jmp	 $LN2@LoadScript
$LN28@LoadScript:

; 153  : 
; 154  : 				else if(m_0C == 1)//m0C == 1 - identical

  006dd	83 7d f0 01	 cmp	 DWORD PTR _m_0C$[ebp], 1
  006e1	0f 85 70 03 00
	00		 jne	 $LN24@LoadScript

; 155  : 				{
; 156  : 					Token = GetToken();

  006e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006ec	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 157  : 
; 158  : 					if(!strcmp("end",TokenString))

  006ef	68 00 00 00 00	 push	 OFFSET _TokenString
  006f4	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  006f9	e8 00 00 00 00	 call	 _strcmp
  006fe	83 c4 08	 add	 esp, 8
  00701	85 c0		 test	 eax, eax
  00703	75 05		 jne	 SHORT $LN23@LoadScript

; 159  : 						break;

  00705	e9 a8 07 00 00	 jmp	 $LN29@LoadScript
$LN23@LoadScript:

; 160  : 
; 161  : 					CSocketSphere temp;
; 162  : 
; 163  : 					memset(&temp,0,sizeof(temp));

  0070a	6a 14		 push	 20			; 00000014H
  0070c	6a 00		 push	 0
  0070e	8d 45 b8	 lea	 eax, DWORD PTR _temp$227616[ebp]
  00711	50		 push	 eax
  00712	e8 00 00 00 00	 call	 _memset
  00717	83 c4 0c	 add	 esp, 12			; 0000000cH

; 164  : 
; 165  : 					temp.m_btOptionIndex = (BYTE)TokenNumber;

  0071a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00720	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv495[ebp]
  00726	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv495[ebp]
  0072d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00732	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv498[ebp], eax
  00738	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv498[ebp]
  0073e	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv500[ebp]
  00744	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv495[ebp]
  0074a	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv500[ebp]
  00750	88 45 b8	 mov	 BYTE PTR _temp$227616[ebp], al

; 166  : 
; 167  : 
; 168  : 					Token = GetToken();		temp.m_btElementIndex	= (BYTE)TokenNumber;

  00753	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00758	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  0075b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00761	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv504[ebp]
  00767	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv504[ebp]
  0076e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00773	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv507[ebp], eax
  00779	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv507[ebp]
  0077f	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv509[ebp]
  00785	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv504[ebp]
  0078b	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv509[ebp]
  00791	88 45 ba	 mov	 BYTE PTR _temp$227616[ebp+2], al

; 169  : 					Token = GetToken();		temp.m_btElementType	= (BYTE)TokenNumber;

  00794	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00799	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  0079c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007a2	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv513[ebp]
  007a8	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv513[ebp]
  007af	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  007b4	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv516[ebp], eax
  007ba	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv516[ebp]
  007c0	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv518[ebp]
  007c6	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv513[ebp]
  007cc	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv518[ebp]
  007d2	88 45 bb	 mov	 BYTE PTR _temp$227616[ebp+3], al

; 170  : 					Token = GetToken();		// Reserved for Name

  007d5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007da	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 171  : 					Token = GetToken();		temp.m_btOptionType	= (BYTE)TokenNumber;

  007dd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007e2	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  007e5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007eb	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv523[ebp]
  007f1	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv523[ebp]
  007f8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  007fd	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv526[ebp], eax
  00803	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv526[ebp]
  00809	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv528[ebp]
  0080f	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv523[ebp]
  00815	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv528[ebp]
  0081b	88 45 bc	 mov	 BYTE PTR _temp$227616[ebp+4], al

; 172  : 					Token = GetToken();		temp.m_btOptionValue	= (BYTE)TokenNumber;

  0081e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00823	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00826	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0082c	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv532[ebp]
  00832	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv532[ebp]
  00839	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0083e	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv535[ebp], eax
  00844	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv535[ebp]
  0084a	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv537[ebp]
  00850	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv532[ebp]
  00856	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv537[ebp]
  0085c	88 45 bd	 mov	 BYTE PTR _temp$227616[ebp+5], al

; 173  : 					Token = GetToken();		temp.m_iOptionRate	= (int)TokenNumber;

  0085f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00864	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00867	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0086d	e8 00 00 00 00	 call	 __ftol2_sse
  00872	89 45 c0	 mov	 DWORD PTR _temp$227616[ebp+8], eax

; 174  : 					Token = GetToken();		temp.m_btSocketSlot[0]= (BYTE)TokenNumber;

  00875	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0087a	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  0087d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00883	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv547[ebp]
  00889	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv547[ebp]
  00890	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00895	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv550[ebp], eax
  0089b	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv550[ebp]
  008a1	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv552[ebp]
  008a7	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv547[ebp]
  008ad	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv552[ebp]
  008b3	88 45 c4	 mov	 BYTE PTR _temp$227616[ebp+12], al

; 175  : 					Token = GetToken();		temp.m_btSocketSlot[1]= (BYTE)TokenNumber;

  008b6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008bb	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  008be	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008c4	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv556[ebp]
  008ca	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv556[ebp]
  008d1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  008d6	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv559[ebp], eax
  008dc	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv559[ebp]
  008e2	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv561[ebp]
  008e8	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv556[ebp]
  008ee	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv561[ebp]
  008f4	88 45 c5	 mov	 BYTE PTR _temp$227616[ebp+13], al

; 176  : 					Token = GetToken();		temp.m_btSocketSlot[2]= (BYTE)TokenNumber;

  008f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008fc	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  008ff	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00905	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv565[ebp]
  0090b	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv565[ebp]
  00912	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00917	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv568[ebp], eax
  0091d	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv568[ebp]
  00923	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv570[ebp]
  00929	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv565[ebp]
  0092f	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv570[ebp]
  00935	88 45 c6	 mov	 BYTE PTR _temp$227616[ebp+14], al

; 177  : 					Token = GetToken();		temp.m_btSocketSlot[3]= (BYTE)TokenNumber;

  00938	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0093d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00940	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00946	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv574[ebp]
  0094c	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv574[ebp]
  00953	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00958	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv577[ebp], eax
  0095e	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv577[ebp]
  00964	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv579[ebp]
  0096a	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv574[ebp]
  00970	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv579[ebp]
  00976	88 45 c7	 mov	 BYTE PTR _temp$227616[ebp+15], al

; 178  : 					Token = GetToken();		temp.m_btSocketSlot[4]= (BYTE)TokenNumber;

  00979	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0097e	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00981	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00987	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv583[ebp]
  0098d	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv583[ebp]
  00994	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00999	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv586[ebp], eax
  0099f	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv586[ebp]
  009a5	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv588[ebp]
  009ab	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv583[ebp]
  009b1	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv588[ebp]
  009b7	88 45 c8	 mov	 BYTE PTR _temp$227616[ebp+16], al

; 179  : 
; 180  : 					for(int n = 0;n < MAX_SOCKET_OPTION;n++)

  009ba	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _n$227628[ebp], 0
  009c1	eb 09		 jmp	 SHORT $LN22@LoadScript
$LN21@LoadScript:
  009c3	8b 45 b4	 mov	 eax, DWORD PTR _n$227628[ebp]
  009c6	83 c0 01	 add	 eax, 1
  009c9	89 45 b4	 mov	 DWORD PTR _n$227628[ebp], eax
$LN22@LoadScript:
  009cc	83 7d b4 05	 cmp	 DWORD PTR _n$227628[ebp], 5
  009d0	7d 16		 jge	 SHORT $LN20@LoadScript

; 181  : 					{
; 182  : 						if(temp.m_btSocketSlot[n] != NULL)

  009d2	8b 45 b4	 mov	 eax, DWORD PTR _n$227628[ebp]
  009d5	0f b6 4c 05 c4	 movzx	 ecx, BYTE PTR _temp$227616[ebp+eax+12]
  009da	85 c9		 test	 ecx, ecx
  009dc	74 08		 je	 SHORT $LN19@LoadScript

; 183  : 						{
; 184  : 							temp.m_btSocketSlotCount++;

  009de	8a 45 c9	 mov	 al, BYTE PTR _temp$227616[ebp+17]
  009e1	04 01		 add	 al, 1
  009e3	88 45 c9	 mov	 BYTE PTR _temp$227616[ebp+17], al
$LN19@LoadScript:

; 185  : 						}
; 186  : 					}

  009e6	eb db		 jmp	 SHORT $LN21@LoadScript
$LN20@LoadScript:

; 187  : 
; 188  : 					switch(temp.m_btOptionIndex)

  009e8	0f b6 45 b8	 movzx	 eax, BYTE PTR _temp$227616[ebp]
  009ec	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv239[ebp], eax
  009f2	83 bd 5c ff ff
	ff 05		 cmp	 DWORD PTR tv239[ebp], 5
  009f9	77 2f		 ja	 SHORT $LN17@LoadScript
  009fb	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv239[ebp]
  00a01	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN39@LoadScript[ecx*4]
$LN16@LoadScript:

; 189  : 					{
; 190  : 						case 0:	temp.m_btEffectType = 0;	break;

  00a08	c6 45 b9 00	 mov	 BYTE PTR _temp$227616[ebp+1], 0
  00a0c	eb 1c		 jmp	 SHORT $LN17@LoadScript
$LN15@LoadScript:

; 191  : 						case 1:	temp.m_btEffectType = 18;	break;

  00a0e	c6 45 b9 12	 mov	 BYTE PTR _temp$227616[ebp+1], 18 ; 00000012H
  00a12	eb 16		 jmp	 SHORT $LN17@LoadScript
$LN14@LoadScript:

; 192  : 						case 2:	temp.m_btEffectType = 0;	break;

  00a14	c6 45 b9 00	 mov	 BYTE PTR _temp$227616[ebp+1], 0
  00a18	eb 10		 jmp	 SHORT $LN17@LoadScript
$LN13@LoadScript:

; 193  : 						case 3:	temp.m_btEffectType = 18;	break;

  00a1a	c6 45 b9 12	 mov	 BYTE PTR _temp$227616[ebp+1], 18 ; 00000012H
  00a1e	eb 0a		 jmp	 SHORT $LN17@LoadScript
$LN12@LoadScript:

; 194  : 						case 4:	temp.m_btEffectType = 11;	break;

  00a20	c6 45 b9 0b	 mov	 BYTE PTR _temp$227616[ebp+1], 11 ; 0000000bH
  00a24	eb 04		 jmp	 SHORT $LN17@LoadScript
$LN11@LoadScript:

; 195  : 						case 5:	temp.m_btEffectType = 22;	break;

  00a26	c6 45 b9 16	 mov	 BYTE PTR _temp$227616[ebp+1], 22 ; 00000016H
$LN17@LoadScript:

; 196  : 					}
; 197  : 
; 198  : 					memcpy(&this->SocketSpear[m_18],&temp,sizeof(temp));

  00a2a	6a 14		 push	 20			; 00000014H
  00a2c	8d 45 b8	 lea	 eax, DWORD PTR _temp$227616[ebp]
  00a2f	50		 push	 eax
  00a30	8b 4d e4	 mov	 ecx, DWORD PTR _m_18$[ebp]
  00a33	6b c9 14	 imul	 ecx, 20			; 00000014H
  00a36	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a39	8d 84 0a 28 04
	00 00		 lea	 eax, DWORD PTR [edx+ecx+1064]
  00a40	50		 push	 eax
  00a41	e8 00 00 00 00	 call	 _memcpy
  00a46	83 c4 0c	 add	 esp, 12			; 0000000cH

; 199  : 					m_18++;

  00a49	8b 45 e4	 mov	 eax, DWORD PTR _m_18$[ebp]
  00a4c	83 c0 01	 add	 eax, 1
  00a4f	89 45 e4	 mov	 DWORD PTR _m_18$[ebp], eax
  00a52	e9 56 04 00 00	 jmp	 $LN2@LoadScript
$LN24@LoadScript:

; 200  : 				
; 201  : 				}
; 202  : 				else if(m_0C == 2)//m_0C == 2  - Identical

  00a57	83 7d f0 02	 cmp	 DWORD PTR _m_0C$[ebp], 2
  00a5b	0f 85 cb 03 00
	00		 jne	 $LN9@LoadScript

; 203  : 				{
; 204  : 					int m_58 = 0;

  00a61	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _m_58$227645[ebp], 0

; 205  : 					BYTE m_5C = 0;

  00a68	c6 45 af 00	 mov	 BYTE PTR _m_5C$227646[ebp], 0

; 206  : 					BYTE m_60 = 0;

  00a6c	c6 45 ae 00	 mov	 BYTE PTR _m_60$227647[ebp], 0

; 207  : 					BYTE m_64 = 0;

  00a70	c6 45 ad 00	 mov	 BYTE PTR _m_64$227648[ebp], 0

; 208  : 					int m_68 = 0;

  00a74	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _m_68$227649[ebp], 0

; 209  : 					BYTE m_70[MAX_SPHERE_OPTION] = { 0 };

  00a7b	c6 45 a0 00	 mov	 BYTE PTR _m_70$227650[ebp], 0
  00a7f	33 c0		 xor	 eax, eax
  00a81	89 45 a1	 mov	 DWORD PTR _m_70$227650[ebp+1], eax
  00a84	88 45 a5	 mov	 BYTE PTR _m_70$227650[ebp+5], al

; 210  : 
; 211  : 					Token = GetToken();

  00a87	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a8c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 212  : 
; 213  : 					if(!strcmp("end",TokenString))

  00a8f	68 00 00 00 00	 push	 OFFSET _TokenString
  00a94	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00a99	e8 00 00 00 00	 call	 _strcmp
  00a9e	83 c4 08	 add	 esp, 8
  00aa1	85 c0		 test	 eax, eax
  00aa3	75 05		 jne	 SHORT $LN8@LoadScript

; 214  : 						break;

  00aa5	e9 08 04 00 00	 jmp	 $LN29@LoadScript
$LN8@LoadScript:

; 215  : 
; 216  : 					m_58 = (int)TokenNumber;

  00aaa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00ab0	e8 00 00 00 00	 call	 __ftol2_sse
  00ab5	89 45 b0	 mov	 DWORD PTR _m_58$227645[ebp], eax

; 217  : 
; 218  : 					Token = GetToken();		m_5C = (BYTE)TokenNumber;

  00ab8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00abd	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00ac0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00ac6	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv610[ebp]
  00acc	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv610[ebp]
  00ad3	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00ad8	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv613[ebp], eax
  00ade	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv613[ebp]
  00ae4	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv615[ebp]
  00aea	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv610[ebp]
  00af0	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv615[ebp]
  00af6	88 45 af	 mov	 BYTE PTR _m_5C$227646[ebp], al

; 219  : 					Token = GetToken();		// Reserved for Name

  00af9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00afe	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 220  : 					Token = GetToken();		m_60 = (BYTE)TokenNumber;

  00b01	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00b06	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00b09	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00b0f	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv620[ebp]
  00b15	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv620[ebp]
  00b1c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00b21	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv623[ebp], eax
  00b27	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv623[ebp]
  00b2d	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv625[ebp]
  00b33	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv620[ebp]
  00b39	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv625[ebp]
  00b3f	88 45 ae	 mov	 BYTE PTR _m_60$227647[ebp], al

; 221  : 					Token = GetToken();		m_64 = (BYTE)TokenNumber;

  00b42	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00b47	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00b4a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00b50	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv629[ebp]
  00b56	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv629[ebp]
  00b5d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00b62	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv632[ebp], eax
  00b68	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv632[ebp]
  00b6e	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv634[ebp]
  00b74	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv629[ebp]
  00b7a	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv634[ebp]
  00b80	88 45 ad	 mov	 BYTE PTR _m_64$227648[ebp], al

; 222  : 					Token = GetToken();		m_68 = (int)TokenNumber;

  00b83	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00b88	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00b8b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00b91	e8 00 00 00 00	 call	 __ftol2_sse
  00b96	89 45 a8	 mov	 DWORD PTR _m_68$227649[ebp], eax

; 223  : 					Token = GetToken();		m_70[0] = (BYTE)TokenNumber;

  00b99	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00b9e	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00ba1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00ba7	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv644[ebp]
  00bad	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv644[ebp]
  00bb4	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00bb9	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv647[ebp], eax
  00bbf	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv647[ebp]
  00bc5	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv649[ebp]
  00bcb	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv644[ebp]
  00bd1	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv649[ebp]
  00bd7	88 45 a0	 mov	 BYTE PTR _m_70$227650[ebp], al

; 224  : 					Token = GetToken();		m_70[1] = (BYTE)TokenNumber;

  00bda	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00bdf	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00be2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00be8	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv653[ebp]
  00bee	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv653[ebp]
  00bf5	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00bfa	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv656[ebp], eax
  00c00	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv656[ebp]
  00c06	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv658[ebp]
  00c0c	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv653[ebp]
  00c12	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv658[ebp]
  00c18	88 45 a1	 mov	 BYTE PTR _m_70$227650[ebp+1], al

; 225  : 					Token = GetToken();		m_70[2] = (BYTE)TokenNumber;

  00c1b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00c20	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00c23	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00c29	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv662[ebp]
  00c2f	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv662[ebp]
  00c36	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00c3b	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv665[ebp], eax
  00c41	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv665[ebp]
  00c47	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv667[ebp]
  00c4d	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv662[ebp]
  00c53	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv667[ebp]
  00c59	88 45 a2	 mov	 BYTE PTR _m_70$227650[ebp+2], al

; 226  : 					Token = GetToken();		m_70[3] = (BYTE)TokenNumber;

  00c5c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00c61	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00c64	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00c6a	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv671[ebp]
  00c70	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv671[ebp]
  00c77	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00c7c	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv674[ebp], eax
  00c82	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv674[ebp]
  00c88	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv676[ebp]
  00c8e	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv671[ebp]
  00c94	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv676[ebp]
  00c9a	88 45 a3	 mov	 BYTE PTR _m_70$227650[ebp+3], al

; 227  : 					Token = GetToken();		m_70[4] = (BYTE)TokenNumber;

  00c9d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00ca2	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00ca5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00cab	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv680[ebp]
  00cb1	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv680[ebp]
  00cb8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00cbd	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv683[ebp], eax
  00cc3	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv683[ebp]
  00cc9	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv685[ebp]
  00ccf	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv680[ebp]
  00cd5	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv685[ebp]
  00cdb	88 45 a4	 mov	 BYTE PTR _m_70$227650[ebp+4], al

; 228  : 					Token = GetToken();		m_70[5] = (BYTE)TokenNumber;

  00cde	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00ce3	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
  00ce6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00cec	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv689[ebp]
  00cf2	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv689[ebp]
  00cf9	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00cfe	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv692[ebp], eax
  00d04	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv692[ebp]
  00d0a	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv694[ebp]
  00d10	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv689[ebp]
  00d16	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv694[ebp]
  00d1c	88 45 a5	 mov	 BYTE PTR _m_70$227650[ebp+5], al

; 229  : 
; 230  : 					this->SocketBonusOption[m_1C].btNumber		= m_1C;

  00d1f	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00d22	c1 e0 04	 shl	 eax, 4
  00d25	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d28	8a 55 e0	 mov	 dl, BYTE PTR _m_1C$[ebp]
  00d2b	88 94 01 a0 04
	00 00		 mov	 BYTE PTR [ecx+eax+1184], dl

; 231  : 					this->SocketBonusOption[m_1C].btType		= m_60;

  00d32	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00d35	c1 e0 04	 shl	 eax, 4
  00d38	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d3b	8a 55 ae	 mov	 dl, BYTE PTR _m_60$227647[ebp]
  00d3e	88 94 01 a1 04
	00 00		 mov	 BYTE PTR [ecx+eax+1185], dl

; 232  : 					this->SocketBonusOption[m_1C].btIncrease	= m_64;

  00d45	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00d48	c1 e0 04	 shl	 eax, 4
  00d4b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d4e	8a 55 ad	 mov	 dl, BYTE PTR _m_64$227648[ebp]
  00d51	88 94 01 a2 04
	00 00		 mov	 BYTE PTR [ecx+eax+1186], dl

; 233  : 					this->SocketBonusOption[m_1C].iProbability	= m_68;

  00d58	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00d5b	c1 e0 04	 shl	 eax, 4
  00d5e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d61	8b 55 a8	 mov	 edx, DWORD PTR _m_68$227649[ebp]
  00d64	89 94 01 a4 04
	00 00		 mov	 DWORD PTR [ecx+eax+1188], edx

; 234  : 					this->SocketBonusOption[m_1C].btElements[0]	= m_70[0];

  00d6b	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00d6e	c1 e0 04	 shl	 eax, 4
  00d71	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d74	8a 55 a0	 mov	 dl, BYTE PTR _m_70$227650[ebp]
  00d77	88 94 01 a8 04
	00 00		 mov	 BYTE PTR [ecx+eax+1192], dl

; 235  : 					this->SocketBonusOption[m_1C].btElements[1]	= m_70[1];

  00d7e	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00d81	c1 e0 04	 shl	 eax, 4
  00d84	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d87	8a 55 a1	 mov	 dl, BYTE PTR _m_70$227650[ebp+1]
  00d8a	88 94 01 a9 04
	00 00		 mov	 BYTE PTR [ecx+eax+1193], dl

; 236  : 					this->SocketBonusOption[m_1C].btElements[2]	= m_70[2];

  00d91	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00d94	c1 e0 04	 shl	 eax, 4
  00d97	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d9a	8a 55 a2	 mov	 dl, BYTE PTR _m_70$227650[ebp+2]
  00d9d	88 94 01 aa 04
	00 00		 mov	 BYTE PTR [ecx+eax+1194], dl

; 237  : 					this->SocketBonusOption[m_1C].btElements[3]	= m_70[3];

  00da4	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00da7	c1 e0 04	 shl	 eax, 4
  00daa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00dad	8a 55 a3	 mov	 dl, BYTE PTR _m_70$227650[ebp+3]
  00db0	88 94 01 ab 04
	00 00		 mov	 BYTE PTR [ecx+eax+1195], dl

; 238  : 					this->SocketBonusOption[m_1C].btElements[4]	= m_70[4];

  00db7	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00dba	c1 e0 04	 shl	 eax, 4
  00dbd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00dc0	8a 55 a4	 mov	 dl, BYTE PTR _m_70$227650[ebp+4]
  00dc3	88 94 01 ac 04
	00 00		 mov	 BYTE PTR [ecx+eax+1196], dl

; 239  : 					this->SocketBonusOption[m_1C].btElements[5]	= m_70[5];

  00dca	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00dcd	c1 e0 04	 shl	 eax, 4
  00dd0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00dd3	8a 55 a5	 mov	 dl, BYTE PTR _m_70$227650[ebp+5]
  00dd6	88 94 01 ad 04
	00 00		 mov	 BYTE PTR [ecx+eax+1197], dl

; 240  : 
; 241  : 					switch(m_58)

  00ddd	8b 45 b0	 mov	 eax, DWORD PTR _m_58$227645[ebp]
  00de0	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv334[ebp], eax
  00de6	83 bd 5c ff ff
	ff 00		 cmp	 DWORD PTR tv334[ebp], 0
  00ded	74 0b		 je	 SHORT $LN5@LoadScript
  00def	83 bd 5c ff ff
	ff 01		 cmp	 DWORD PTR tv334[ebp], 1
  00df6	74 15		 je	 SHORT $LN4@LoadScript
  00df8	eb 24		 jmp	 SHORT $LN6@LoadScript
$LN5@LoadScript:

; 242  : 					{
; 243  : 					case 0:	this->SocketBonusOption[m_1C].btOption = 44;	break;

  00dfa	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00dfd	c1 e0 04	 shl	 eax, 4
  00e00	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e03	c6 84 01 a3 04
	00 00 2c	 mov	 BYTE PTR [ecx+eax+1187], 44 ; 0000002cH
  00e0b	eb 11		 jmp	 SHORT $LN6@LoadScript
$LN4@LoadScript:

; 244  : 					case 1:	this->SocketBonusOption[m_1C].btOption = 45;	break;

  00e0d	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00e10	c1 e0 04	 shl	 eax, 4
  00e13	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e16	c6 84 01 a3 04
	00 00 2d	 mov	 BYTE PTR [ecx+eax+1187], 45 ; 0000002dH
$LN6@LoadScript:

; 245  : 					}
; 246  : 					
; 247  : 					m_1C++;

  00e1e	8b 45 e0	 mov	 eax, DWORD PTR _m_1C$[ebp]
  00e21	83 c0 01	 add	 eax, 1
  00e24	89 45 e0	 mov	 DWORD PTR _m_1C$[ebp], eax
  00e27	e9 81 00 00 00	 jmp	 $LN2@LoadScript
$LN9@LoadScript:

; 248  : 				}
; 249  : 				else if( m_0C == 3 )

  00e2c	83 7d f0 03	 cmp	 DWORD PTR _m_0C$[ebp], 3
  00e30	75 7b		 jne	 SHORT $LN2@LoadScript

; 250  : 				{
; 251  : 					Token = GetToken();

  00e32	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00e37	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 252  : 					// ----
; 253  : 					if( !strcmp("end", TokenString) )

  00e3a	68 00 00 00 00	 push	 OFFSET _TokenString
  00e3f	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00e44	e8 00 00 00 00	 call	 _strcmp
  00e49	83 c4 08	 add	 esp, 8
  00e4c	85 c0		 test	 eax, eax
  00e4e	75 02		 jne	 SHORT $LN1@LoadScript

; 254  : 					{
; 255  : 						break;

  00e50	eb 60		 jmp	 SHORT $LN29@LoadScript
$LN1@LoadScript:

; 256  : 					}
; 257  : 					// ----
; 258  : 					this->m_SocketItemList[this->m_SocketItemCount].ItemID		= TokenNumber;

  00e52	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00e58	e8 00 00 00 00	 call	 __ftol2_sse
  00e5d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e60	8b 91 b4 07 00
	00		 mov	 edx, DWORD PTR [ecx+1972]
  00e66	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e69	66 89 84 91 5c
	05 00 00	 mov	 WORD PTR [ecx+edx*4+1372], ax

; 259  : 					Token = GetToken();		

  00e71	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00e76	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 260  : 					this->m_SocketItemList[this->m_SocketItemCount].ItemIndex	= TokenNumber;

  00e79	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00e7f	e8 00 00 00 00	 call	 __ftol2_sse
  00e84	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e87	8b 91 b4 07 00
	00		 mov	 edx, DWORD PTR [ecx+1972]
  00e8d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e90	66 89 84 91 5e
	05 00 00	 mov	 WORD PTR [ecx+edx*4+1374], ax

; 261  : 					this->m_SocketItemCount++;

  00e98	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e9b	8b 88 b4 07 00
	00		 mov	 ecx, DWORD PTR [eax+1972]
  00ea1	83 c1 01	 add	 ecx, 1
  00ea4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ea7	89 8a b4 07 00
	00		 mov	 DWORD PTR [edx+1972], ecx
$LN2@LoadScript:

; 262  : 				}
; 263  : 			}

  00ead	e9 fc f4 ff ff	 jmp	 $LN30@LoadScript
$LN29@LoadScript:

; 264  : 		}
; 265  : 	}

  00eb2	e9 a4 f4 ff ff	 jmp	 $LN35@LoadScript
$LN34@LoadScript:

; 266  : 
; 267  : 	this->_InitOption(); 

  00eb7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00eba	e8 00 00 00 00	 call	 ?_InitOption@CSocketOption@@QAEXXZ ; CSocketOption::_InitOption

; 268  : 
; 269  : 	return 1;

  00ebf	b0 01		 mov	 al, 1
$LN37@LoadScript:

; 270  : }

  00ec1	5f		 pop	 edi
  00ec2	5e		 pop	 esi
  00ec3	5b		 pop	 ebx
  00ec4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ec7	33 cd		 xor	 ecx, ebp
  00ec9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ece	8b e5		 mov	 esp, ebp
  00ed0	5d		 pop	 ebp
  00ed1	c2 04 00	 ret	 4
$LN39@LoadScript:
  00ed4	00 00 00 00	 DD	 $LN16@LoadScript
  00ed8	00 00 00 00	 DD	 $LN15@LoadScript
  00edc	00 00 00 00	 DD	 $LN14@LoadScript
  00ee0	00 00 00 00	 DD	 $LN13@LoadScript
  00ee4	00 00 00 00	 DD	 $LN12@LoadScript
  00ee8	00 00 00 00	 DD	 $LN11@LoadScript
?LoadScript@CSocketOption@@QAEEPAD@Z ENDP		; CSocketOption::LoadScript
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00ef0	55		 push	 ebp
  00ef1	8b ec		 mov	 ebp, esp
  00ef3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00ef9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00efe	33 c5		 xor	 eax, ebp
  00f00	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00f03	53		 push	 ebx
  00f04	56		 push	 esi
  00f05	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00f06	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00f0d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f12	50		 push	 eax
  00f13	e8 00 00 00 00	 call	 _fgetc
  00f18	83 c4 04	 add	 esp, 4
  00f1b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00f1e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00f22	83 f9 ff	 cmp	 ecx, -1
  00f25	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00f27	b8 02 00 00 00	 mov	 eax, 2
  00f2c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00f31	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00f33	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f37	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00f3a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  00f3c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f41	50		 push	 eax
  00f42	e8 00 00 00 00	 call	 _fgetc
  00f47	83 c4 04	 add	 esp, 4
  00f4a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00f4d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00f51	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00f54	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00f56	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f5a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00f5d	74 1c		 je	 SHORT $LN23@GetToken
  00f5f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f63	83 f8 ff	 cmp	 eax, -1
  00f66	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00f68	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f6d	50		 push	 eax
  00f6e	e8 00 00 00 00	 call	 _fgetc
  00f73	83 c4 04	 add	 esp, 4
  00f76	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00f79	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  00f7b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f7f	83 f8 ff	 cmp	 eax, -1
  00f82	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00f84	b8 02 00 00 00	 mov	 eax, 2
  00f89	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  00f8e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f92	50		 push	 eax
  00f93	e8 00 00 00 00	 call	 _isspace
  00f98	83 c4 04	 add	 esp, 4
  00f9b	85 c0		 test	 eax, eax
  00f9d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00fa3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00fa7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00fad	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00fb3	83 e9 22	 sub	 ecx, 34			; 00000022H
  00fb6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  00fbc	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00fc3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00fc9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  00fcf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00fd6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  00fdd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00fe7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00fec	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00ff1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00ff6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  01000	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01005	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0100a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0100f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  01019	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0101e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  01023	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  01028	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  01032	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01037	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0103c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  01041	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0104b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01050	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  01055	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0105a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0105f	50		 push	 eax
  01060	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01064	51		 push	 ecx
  01065	e8 00 00 00 00	 call	 _ungetc
  0106a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0106d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  01070	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  01073	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  01078	50		 push	 eax
  01079	e8 00 00 00 00	 call	 _getc
  0107e	83 c4 04	 add	 esp, 4
  01081	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  01084	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01088	83 f9 ff	 cmp	 ecx, -1
  0108b	74 36		 je	 SHORT $LN12@GetToken
  0108d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01091	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  01094	74 1a		 je	 SHORT $LN11@GetToken
  01096	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0109a	50		 push	 eax
  0109b	e8 00 00 00 00	 call	 _isdigit
  010a0	83 c4 04	 add	 esp, 4
  010a3	85 c0		 test	 eax, eax
  010a5	75 09		 jne	 SHORT $LN11@GetToken
  010a7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  010ab	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  010ae	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  010b0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010b3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  010b6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  010b8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010bb	83 c0 01	 add	 eax, 1
  010be	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  010c1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  010c3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010c6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  010c9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  010cc	50		 push	 eax
  010cd	e8 00 00 00 00	 call	 _atof
  010d2	83 c4 04	 add	 esp, 4
  010d5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  010db	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  010e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  010ea	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  010ef	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  010f4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  010fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  01100	50		 push	 eax
  01101	e8 00 00 00 00	 call	 _getc
  01106	83 c4 04	 add	 esp, 4
  01109	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0110c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01110	83 f9 ff	 cmp	 ecx, -1
  01113	74 1c		 je	 SHORT $LN8@GetToken
  01115	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01119	83 f8 22	 cmp	 eax, 34			; 00000022H
  0111c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0111e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01121	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  01124	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  01126	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01129	83 c0 01	 add	 eax, 1
  0112c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0112f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  01131	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01135	83 f8 22	 cmp	 eax, 34			; 00000022H
  01138	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0113a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0113f	50		 push	 eax
  01140	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01144	51		 push	 ecx
  01145	e8 00 00 00 00	 call	 _ungetc
  0114a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0114d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01150	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  01153	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0115d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01162	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  01167	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0116c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01170	50		 push	 eax
  01171	e8 00 00 00 00	 call	 _isalpha
  01176	83 c4 04	 add	 esp, 4
  01179	85 c0		 test	 eax, eax
  0117b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  01181	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  01188	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0118b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0118e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  01190	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01193	83 c0 01	 add	 eax, 1
  01196	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  01199	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0119e	50		 push	 eax
  0119f	e8 00 00 00 00	 call	 _getc
  011a4	83 c4 04	 add	 esp, 4
  011a7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  011aa	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  011ae	83 f9 ff	 cmp	 ecx, -1
  011b1	74 36		 je	 SHORT $LN3@GetToken
  011b3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011b7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  011ba	74 1a		 je	 SHORT $LN2@GetToken
  011bc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011c0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  011c3	74 11		 je	 SHORT $LN2@GetToken
  011c5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011c9	50		 push	 eax
  011ca	e8 00 00 00 00	 call	 _isalnum
  011cf	83 c4 04	 add	 esp, 4
  011d2	85 c0		 test	 eax, eax
  011d4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  011d6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011d9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  011dc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  011de	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011e1	83 c0 01	 add	 eax, 1
  011e4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  011e7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  011e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  011ee	50		 push	 eax
  011ef	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  011f3	51		 push	 ecx
  011f4	e8 00 00 00 00	 call	 _ungetc
  011f9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  011fc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011ff	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  01202	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0120c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01211	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  01213	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  01215	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0121f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01224	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  01226	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  01228	5f		 pop	 edi
  01229	5e		 pop	 esi
  0122a	5b		 pop	 ebx
  0122b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0122e	33 cd		 xor	 ecx, ebp
  01230	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01235	8b e5		 mov	 esp, ebp
  01237	5d		 pop	 ebp
  01238	c3		 ret	 0
  01239	8d 49 00	 npad	 3
$LN35@GetToken:
  0123c	00 00 00 00	 DD	 $LN10@GetToken
  01240	00 00 00 00	 DD	 $LN19@GetToken
  01244	00 00 00 00	 DD	 $LN17@GetToken
  01248	00 00 00 00	 DD	 $LN14@GetToken
  0124c	00 00 00 00	 DD	 $LN18@GetToken
  01250	00 00 00 00	 DD	 $LN16@GetToken
  01254	00 00 00 00	 DD	 $LN15@GetToken
  01258	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0125c	00		 DB	 0
  0125d	01		 DB	 1
  0125e	07		 DB	 7
  0125f	07		 DB	 7
  01260	07		 DB	 7
  01261	07		 DB	 7
  01262	07		 DB	 7
  01263	07		 DB	 7
  01264	07		 DB	 7
  01265	07		 DB	 7
  01266	02		 DB	 2
  01267	03		 DB	 3
  01268	03		 DB	 3
  01269	07		 DB	 7
  0126a	03		 DB	 3
  0126b	03		 DB	 3
  0126c	03		 DB	 3
  0126d	03		 DB	 3
  0126e	03		 DB	 3
  0126f	03		 DB	 3
  01270	03		 DB	 3
  01271	03		 DB	 3
  01272	03		 DB	 3
  01273	03		 DB	 3
  01274	07		 DB	 7
  01275	04		 DB	 4
  01276	07		 DB	 7
  01277	07		 DB	 7
  01278	07		 DB	 7
  01279	07		 DB	 7
  0127a	07		 DB	 7
  0127b	07		 DB	 7
  0127c	07		 DB	 7
  0127d	07		 DB	 7
  0127e	07		 DB	 7
  0127f	07		 DB	 7
  01280	07		 DB	 7
  01281	07		 DB	 7
  01282	07		 DB	 7
  01283	07		 DB	 7
  01284	07		 DB	 7
  01285	07		 DB	 7
  01286	07		 DB	 7
  01287	07		 DB	 7
  01288	07		 DB	 7
  01289	07		 DB	 7
  0128a	07		 DB	 7
  0128b	07		 DB	 7
  0128c	07		 DB	 7
  0128d	07		 DB	 7
  0128e	07		 DB	 7
  0128f	07		 DB	 7
  01290	07		 DB	 7
  01291	07		 DB	 7
  01292	07		 DB	 7
  01293	07		 DB	 7
  01294	07		 DB	 7
  01295	07		 DB	 7
  01296	07		 DB	 7
  01297	07		 DB	 7
  01298	07		 DB	 7
  01299	07		 DB	 7
  0129a	07		 DB	 7
  0129b	07		 DB	 7
  0129c	07		 DB	 7
  0129d	07		 DB	 7
  0129e	07		 DB	 7
  0129f	07		 DB	 7
  012a0	07		 DB	 7
  012a1	07		 DB	 7
  012a2	07		 DB	 7
  012a3	07		 DB	 7
  012a4	07		 DB	 7
  012a5	07		 DB	 7
  012a6	07		 DB	 7
  012a7	07		 DB	 7
  012a8	07		 DB	 7
  012a9	07		 DB	 7
  012aa	07		 DB	 7
  012ab	07		 DB	 7
  012ac	07		 DB	 7
  012ad	07		 DB	 7
  012ae	07		 DB	 7
  012af	07		 DB	 7
  012b0	07		 DB	 7
  012b1	07		 DB	 7
  012b2	07		 DB	 7
  012b3	07		 DB	 7
  012b4	07		 DB	 7
  012b5	05		 DB	 5
  012b6	07		 DB	 7
  012b7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@	; `string'
PUBLIC	??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@	; `string'
PUBLIC	??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@	; `string'
PUBLIC	??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@	; `string'
PUBLIC	??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@	; `string'
PUBLIC	??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@	; `string'
PUBLIC	??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@	; `string'
PUBLIC	??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@	; `string'
PUBLIC	??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@	; `string'
PUBLIC	??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@	; `string'
PUBLIC	??_C@_0N@PNENKPIH@SphereDropOn?$AA@		; `string'
PUBLIC	??_C@_0BL@PGIPDLFD@ShopBuySocketItemSlotCount?$AA@ ; `string'
PUBLIC	??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@	; `string'
PUBLIC	??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@	; `string'
PUBLIC	??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@ ; `string'
PUBLIC	??_C@_0BB@HIAJNHAP@SeedExtractMoney?$AA@	; `string'
PUBLIC	??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@	; `string'
PUBLIC	??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@	; `string'
PUBLIC	??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@	; `string'
PUBLIC	??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@	; `string'
PUBLIC	??_C@_0P@EMJDPFDH@GameServerInfo?$AA@		; `string'
PUBLIC	??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@	; `string'
PUBLIC	??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@	; `string'
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\socketoption.cpp
CONST	SEGMENT
??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@ DB 'SphereDropLevel_Lv5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@
CONST	SEGMENT
??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@ DB 'SphereDropLevel_Lv4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@
CONST	SEGMENT
??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@ DB 'SphereDropLevel_Lv3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@
CONST	SEGMENT
??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@ DB 'SphereDropLevel_Lv2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@
CONST	SEGMENT
??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@ DB 'SphereDropLevel_Lv1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@
CONST	SEGMENT
??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@ DB 'SphereDropRate_Lv5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@
CONST	SEGMENT
??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@ DB 'SphereDropRate_Lv4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@
CONST	SEGMENT
??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@ DB 'SphereDropRate_Lv3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@
CONST	SEGMENT
??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@ DB 'SphereDropRate_Lv2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@
CONST	SEGMENT
??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@ DB 'SphereDropRate_Lv1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PNENKPIH@SphereDropOn?$AA@
CONST	SEGMENT
??_C@_0N@PNENKPIH@SphereDropOn?$AA@ DB 'SphereDropOn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PGIPDLFD@ShopBuySocketItemSlotCount?$AA@
CONST	SEGMENT
??_C@_0BL@PGIPDLFD@ShopBuySocketItemSlotCount?$AA@ DB 'ShopBuySocketItemS'
	DB	'lotCount', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@
CONST	SEGMENT
??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@ DB 'SeedSphereRemoveMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@
CONST	SEGMENT
??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@ DB 'SeedSphereSetMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@
CONST	SEGMENT
??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@ DB 'SeedSphereCompositeM'
	DB	'oney', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HIAJNHAP@SeedExtractMoney?$AA@
CONST	SEGMENT
??_C@_0BB@HIAJNHAP@SeedExtractMoney?$AA@ DB 'SeedExtractMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSocke'
	DB	'tSlotCountRate3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@
CONST	SEGMENT
??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@ DB 'SocketSlotCountRate5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@
CONST	SEGMENT
??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@ DB 'SocketSlotCountRate4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@
CONST	SEGMENT
??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@ DB 'SocketSlotCountRate3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@
CONST	SEGMENT
??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@ DB 'SocketSlotCountRate2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
CONST	SEGMENT
??_C@_0P@EMJDPFDH@GameServerInfo?$AA@ DB 'GameServerInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@
CONST	SEGMENT
??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@ DB 'SocketSlotCountRate1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
CONST	SEGMENT
??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@ DB 'commonserver.cfg', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_InitOption@CSocketOption@@QAEXXZ PROC			; CSocketOption::_InitOption
; _this$ = ecx

; 273  : {

  012c0	55		 push	 ebp
  012c1	8b ec		 mov	 ebp, esp
  012c3	83 ec 44	 sub	 esp, 68			; 00000044H
  012c6	53		 push	 ebx
  012c7	56		 push	 esi
  012c8	57		 push	 edi
  012c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 274  : 	this->SocketSlotRandomPool.InitPool();

  012cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012cf	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  012d5	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 275  : 	this->TwoHandWeaponSocketSlotRandomPool.InitPool();

  012da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012dd	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  012e3	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 276  : 
; 277  : 	this->iSocketSlotCountRate[SOCKET_SLOT_1]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate1",0,gDirPath.GetNewPath("commonserver.cfg"));

  012e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  012ed	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  012f2	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  012f7	50		 push	 eax
  012f8	6a 00		 push	 0
  012fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@
  012ff	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01304	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0130a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0130d	89 81 08 05 00
	00		 mov	 DWORD PTR [ecx+1288], eax

; 278  : 	this->iSocketSlotCountRate[SOCKET_SLOT_2]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate2",0,gDirPath.GetNewPath("commonserver.cfg"));

  01313	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01318	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0131d	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  01322	50		 push	 eax
  01323	6a 00		 push	 0
  01325	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@
  0132a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0132f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  01335	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01338	89 81 0c 05 00
	00		 mov	 DWORD PTR [ecx+1292], eax

; 279  : 	this->iSocketSlotCountRate[SOCKET_SLOT_3]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate3",0,gDirPath.GetNewPath("commonserver.cfg"));

  0133e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01343	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  01348	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0134d	50		 push	 eax
  0134e	6a 00		 push	 0
  01350	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@
  01355	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0135a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  01360	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01363	89 81 10 05 00
	00		 mov	 DWORD PTR [ecx+1296], eax

; 280  : 	this->iSocketSlotCountRate[SOCKET_SLOT_4]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate4",0,gDirPath.GetNewPath("commonserver.cfg"));

  01369	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0136e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  01373	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  01378	50		 push	 eax
  01379	6a 00		 push	 0
  0137b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@
  01380	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01385	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0138b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0138e	89 81 14 05 00
	00		 mov	 DWORD PTR [ecx+1300], eax

; 281  : 	this->iSocketSlotCountRate[SOCKET_SLOT_5]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate5",0,gDirPath.GetNewPath("commonserver.cfg"));

  01394	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01399	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0139e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  013a3	50		 push	 eax
  013a4	6a 00		 push	 0
  013a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@
  013ab	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  013b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  013b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013b9	89 81 18 05 00
	00		 mov	 DWORD PTR [ecx+1304], eax

; 282  : 
; 283  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_1]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate1",0,gDirPath.GetNewPath("commonserver.cfg"));

  013bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  013c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  013c9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  013ce	50		 push	 eax
  013cf	6a 00		 push	 0
  013d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@
  013d6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  013db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  013e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013e4	89 81 1c 05 00
	00		 mov	 DWORD PTR [ecx+1308], eax

; 284  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_2]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate2",0,gDirPath.GetNewPath("commonserver.cfg"));

  013ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  013ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  013f4	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  013f9	50		 push	 eax
  013fa	6a 00		 push	 0
  013fc	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@
  01401	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01406	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0140c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0140f	89 81 20 05 00
	00		 mov	 DWORD PTR [ecx+1312], eax

; 285  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_3]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate3",0,gDirPath.GetNewPath("commonserver.cfg"));

  01415	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0141a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0141f	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  01424	50		 push	 eax
  01425	6a 00		 push	 0
  01427	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@
  0142c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01431	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  01437	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0143a	89 81 24 05 00
	00		 mov	 DWORD PTR [ecx+1316], eax

; 286  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_4]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate4",0,gDirPath.GetNewPath("commonserver.cfg"));

  01440	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01445	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0144a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0144f	50		 push	 eax
  01450	6a 00		 push	 0
  01452	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@
  01457	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0145c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  01462	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01465	89 81 28 05 00
	00		 mov	 DWORD PTR [ecx+1320], eax

; 287  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_5]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate5",0,gDirPath.GetNewPath("commonserver.cfg"));

  0146b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01470	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  01475	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0147a	50		 push	 eax
  0147b	6a 00		 push	 0
  0147d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@
  01482	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01487	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0148d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01490	89 81 2c 05 00
	00		 mov	 DWORD PTR [ecx+1324], eax

; 288  : 
; 289  : 	g_iSeedExtractMoney				= GetPrivateProfileInt("GameServerInfo","SeedExtractMoney",1000000,gDirPath.GetNewPath("commonserver.cfg"));

  01496	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0149b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  014a0	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  014a5	50		 push	 eax
  014a6	68 40 42 0f 00	 push	 1000000			; 000f4240H
  014ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HIAJNHAP@SeedExtractMoney?$AA@
  014b0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  014b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  014bb	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSeedExtractMoney@@3HA, eax ; g_iSeedExtractMoney

; 290  : 	g_iSeedSphereCompositeMoney		= GetPrivateProfileInt("GameServerInfo","SeedSphereCompositeMoney",1000000,gDirPath.GetNewPath("commonserver.cfg"));

  014c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  014c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  014ca	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  014cf	50		 push	 eax
  014d0	68 40 42 0f 00	 push	 1000000			; 000f4240H
  014d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@
  014da	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  014df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  014e5	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSeedSphereCompositeMoney@@3HA, eax ; g_iSeedSphereCompositeMoney

; 291  : 	g_iSeedSphereSetMoney			= GetPrivateProfileInt("GameServerInfo","SeedSphereSetMoney",1000000,gDirPath.GetNewPath("commonserver.cfg"));

  014ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  014ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  014f4	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  014f9	50		 push	 eax
  014fa	68 40 42 0f 00	 push	 1000000			; 000f4240H
  014ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@
  01504	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01509	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0150f	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSeedSphereSetMoney@@3HA, eax ; g_iSeedSphereSetMoney

; 292  : 	g_iSeedSphereRemoveMoney		= GetPrivateProfileInt("GameServerInfo","SeedSphereRemoveMoney",1000000,gDirPath.GetNewPath("commonserver.cfg"));

  01514	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01519	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0151e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  01523	50		 push	 eax
  01524	68 40 42 0f 00	 push	 1000000			; 000f4240H
  01529	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@
  0152e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01533	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  01539	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSeedSphereRemoveMoney@@3HA, eax ; g_iSeedSphereRemoveMoney

; 293  : 
; 294  : 	this->SocketSlotRandomPool.AddValue(1,this->iSocketSlotCountRate[SOCKET_SLOT_1]);

  0153e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01541	8b 88 08 05 00
	00		 mov	 ecx, DWORD PTR [eax+1288]
  01547	51		 push	 ecx
  01548	6a 01		 push	 1
  0154a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0154d	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  01553	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 295  : 	this->SocketSlotRandomPool.AddValue(2,this->iSocketSlotCountRate[SOCKET_SLOT_2]);

  01558	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0155b	8b 88 0c 05 00
	00		 mov	 ecx, DWORD PTR [eax+1292]
  01561	51		 push	 ecx
  01562	6a 02		 push	 2
  01564	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01567	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  0156d	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 296  : 	this->SocketSlotRandomPool.AddValue(3,this->iSocketSlotCountRate[SOCKET_SLOT_3]);

  01572	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01575	8b 88 10 05 00
	00		 mov	 ecx, DWORD PTR [eax+1296]
  0157b	51		 push	 ecx
  0157c	6a 03		 push	 3
  0157e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01581	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  01587	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 297  : 	this->SocketSlotRandomPool.AddValue(4,this->iSocketSlotCountRate[SOCKET_SLOT_4]);

  0158c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0158f	8b 88 14 05 00
	00		 mov	 ecx, DWORD PTR [eax+1300]
  01595	51		 push	 ecx
  01596	6a 04		 push	 4
  01598	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0159b	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  015a1	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 298  : 	this->SocketSlotRandomPool.AddValue(5,this->iSocketSlotCountRate[SOCKET_SLOT_5]);

  015a6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015a9	8b 88 18 05 00
	00		 mov	 ecx, DWORD PTR [eax+1304]
  015af	51		 push	 ecx
  015b0	6a 05		 push	 5
  015b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015b5	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  015bb	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 299  : 
; 300  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(1,this->iTwoHandSlotCountRate[SOCKET_SLOT_1]);

  015c0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015c3	8b 88 1c 05 00
	00		 mov	 ecx, DWORD PTR [eax+1308]
  015c9	51		 push	 ecx
  015ca	6a 01		 push	 1
  015cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015cf	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  015d5	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 301  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(2,this->iTwoHandSlotCountRate[SOCKET_SLOT_2]);

  015da	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015dd	8b 88 20 05 00
	00		 mov	 ecx, DWORD PTR [eax+1312]
  015e3	51		 push	 ecx
  015e4	6a 02		 push	 2
  015e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015e9	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  015ef	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 302  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(3,this->iTwoHandSlotCountRate[SOCKET_SLOT_3]);

  015f4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015f7	8b 88 24 05 00
	00		 mov	 ecx, DWORD PTR [eax+1316]
  015fd	51		 push	 ecx
  015fe	6a 03		 push	 3
  01600	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01603	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  01609	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 303  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(4,this->iTwoHandSlotCountRate[SOCKET_SLOT_4]);

  0160e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01611	8b 88 28 05 00
	00		 mov	 ecx, DWORD PTR [eax+1320]
  01617	51		 push	 ecx
  01618	6a 04		 push	 4
  0161a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0161d	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  01623	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 304  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(5,this->iTwoHandSlotCountRate[SOCKET_SLOT_5]);

  01628	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0162b	8b 88 2c 05 00
	00		 mov	 ecx, DWORD PTR [eax+1324]
  01631	51		 push	 ecx
  01632	6a 05		 push	 5
  01634	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01637	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  0163d	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 305  : 
; 306  : 	g_iShopBuySocketItemSlotCount	= GetPrivateProfileInt("GameServerInfo","ShopBuySocketItemSlotCount",3,gDirPath.GetNewPath("commonserver.cfg"));

  01642	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01647	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0164c	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  01651	50		 push	 eax
  01652	6a 03		 push	 3
  01654	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PGIPDLFD@ShopBuySocketItemSlotCount?$AA@
  01659	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0165e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  01664	a3 00 00 00 00	 mov	 DWORD PTR ?g_iShopBuySocketItemSlotCount@@3HA, eax ; g_iShopBuySocketItemSlotCount

; 307  : 
; 308  : 	this->bSphereDrop				= GetPrivateProfileInt("GameServerInfo","SphereDropOn",0,gDirPath.GetNewPath("commonserver.cfg"));

  01669	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0166e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  01673	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  01678	50		 push	 eax
  01679	6a 00		 push	 0
  0167b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PNENKPIH@SphereDropOn?$AA@
  01680	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01685	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0168b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0168e	89 81 30 05 00
	00		 mov	 DWORD PTR [ecx+1328], eax

; 309  : 
; 310  : 	this->iSphereDropRate[SOCKET_SLOT_1]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv1",0,gDirPath.GetNewPath("commonserver.cfg"));

  01694	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01699	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0169e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  016a3	50		 push	 eax
  016a4	6a 00		 push	 0
  016a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@
  016ab	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  016b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  016b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016b9	89 81 34 05 00
	00		 mov	 DWORD PTR [ecx+1332], eax

; 311  : 	this->iSphereDropRate[SOCKET_SLOT_2]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv2",0,gDirPath.GetNewPath("commonserver.cfg"));

  016bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  016c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  016c9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  016ce	50		 push	 eax
  016cf	6a 00		 push	 0
  016d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@
  016d6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  016db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  016e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016e4	89 81 38 05 00
	00		 mov	 DWORD PTR [ecx+1336], eax

; 312  : 	this->iSphereDropRate[SOCKET_SLOT_3]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv3",0,gDirPath.GetNewPath("commonserver.cfg"));

  016ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  016ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  016f4	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  016f9	50		 push	 eax
  016fa	6a 00		 push	 0
  016fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@
  01701	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01706	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0170c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0170f	89 81 3c 05 00
	00		 mov	 DWORD PTR [ecx+1340], eax

; 313  : 	this->iSphereDropRate[SOCKET_SLOT_4]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv4",0,gDirPath.GetNewPath("commonserver.cfg"));

  01715	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0171a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0171f	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  01724	50		 push	 eax
  01725	6a 00		 push	 0
  01727	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@
  0172c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01731	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  01737	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0173a	89 81 40 05 00
	00		 mov	 DWORD PTR [ecx+1344], eax

; 314  : 	this->iSphereDropRate[SOCKET_SLOT_5]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv5",0,gDirPath.GetNewPath("commonserver.cfg"));

  01740	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01745	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0174a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0174f	50		 push	 eax
  01750	6a 00		 push	 0
  01752	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@
  01757	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0175c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  01762	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01765	89 81 44 05 00
	00		 mov	 DWORD PTR [ecx+1348], eax

; 315  : 
; 316  : 	this->iSphereDropLevel[SOCKET_SLOT_1]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv1",0,gDirPath.GetNewPath("commonserver.cfg"));

  0176b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  01770	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  01775	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0177a	50		 push	 eax
  0177b	6a 00		 push	 0
  0177d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@
  01782	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01787	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0178d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01790	89 81 48 05 00
	00		 mov	 DWORD PTR [ecx+1352], eax

; 317  : 	this->iSphereDropLevel[SOCKET_SLOT_2]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv2",0,gDirPath.GetNewPath("commonserver.cfg"));

  01796	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0179b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  017a0	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  017a5	50		 push	 eax
  017a6	6a 00		 push	 0
  017a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@
  017ad	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  017b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  017b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017bb	89 81 4c 05 00
	00		 mov	 DWORD PTR [ecx+1356], eax

; 318  : 	this->iSphereDropLevel[SOCKET_SLOT_3]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv3",0,gDirPath.GetNewPath("commonserver.cfg"));

  017c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  017c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  017cb	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  017d0	50		 push	 eax
  017d1	6a 00		 push	 0
  017d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@
  017d8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  017dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  017e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017e6	89 81 50 05 00
	00		 mov	 DWORD PTR [ecx+1360], eax

; 319  : 	this->iSphereDropLevel[SOCKET_SLOT_4]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv4",0,gDirPath.GetNewPath("commonserver.cfg"));

  017ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  017f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  017f6	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  017fb	50		 push	 eax
  017fc	6a 00		 push	 0
  017fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@
  01803	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01808	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0180e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01811	89 81 54 05 00
	00		 mov	 DWORD PTR [ecx+1364], eax

; 320  : 	this->iSphereDropLevel[SOCKET_SLOT_5]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv5",0,gDirPath.GetNewPath("commonserver.cfg"));

  01817	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0181c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  01821	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  01826	50		 push	 eax
  01827	6a 00		 push	 0
  01829	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@
  0182e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  01833	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  01839	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0183c	89 81 58 05 00
	00		 mov	 DWORD PTR [ecx+1368], eax

; 321  : }

  01842	5f		 pop	 edi
  01843	5e		 pop	 esi
  01844	5b		 pop	 ebx
  01845	8b e5		 mov	 esp, ebp
  01847	5d		 pop	 ebp
  01848	c3		 ret	 0
?_InitOption@CSocketOption@@QAEXXZ ENDP			; CSocketOption::_InitOption
_TEXT	ENDS
PUBLIC	?CheckItemType@CSocketOption@@QAEEH@Z		; CSocketOption::CheckItemType
PUBLIC	?IsActive@CSocketOption@@QAEEPAVCItem@@@Z	; CSocketOption::IsActive
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pItem$ = 8						; size = 4
?IsActive@CSocketOption@@QAEEPAVCItem@@@Z PROC		; CSocketOption::IsActive
; _this$ = ecx

; 324  : {

  01850	55		 push	 ebp
  01851	8b ec		 mov	 ebp, esp
  01853	83 ec 44	 sub	 esp, 68			; 00000044H
  01856	53		 push	 ebx
  01857	56		 push	 esi
  01858	57		 push	 edi
  01859	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  : 	if(pItem == NULL)

  0185c	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  01860	75 04		 jne	 SHORT $LN2@IsActive

; 326  : 	{
; 327  : 		return FALSE;

  01862	32 c0		 xor	 al, al
  01864	eb 20		 jmp	 SHORT $LN3@IsActive
$LN2@IsActive:

; 328  : 	}
; 329  : 
; 330  : 	if(pItem->IsItem() == FALSE)

  01866	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  01869	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0186e	85 c0		 test	 eax, eax
  01870	75 04		 jne	 SHORT $LN1@IsActive

; 331  : 	{
; 332  : 		return FALSE;

  01872	32 c0		 xor	 al, al
  01874	eb 10		 jmp	 SHORT $LN3@IsActive
$LN1@IsActive:

; 333  : 	}
; 334  : 
; 335  : 	return this->CheckItemType(pItem->m_Type);

  01876	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  01879	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0187d	51		 push	 ecx
  0187e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01881	e8 00 00 00 00	 call	 ?CheckItemType@CSocketOption@@QAEEH@Z ; CSocketOption::CheckItemType
$LN3@IsActive:

; 336  : }

  01886	5f		 pop	 edi
  01887	5e		 pop	 esi
  01888	5b		 pop	 ebx
  01889	8b e5		 mov	 esp, ebp
  0188b	5d		 pop	 ebp
  0188c	c2 04 00	 ret	 4
?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ENDP		; CSocketOption::IsActive
_TEXT	ENDS
EXTRN	?SockeetItem@cGrandHero@@QAE_NH@Z:PROC		; cGrandHero::SockeetItem
EXTRN	?GrandHero@@3VcGrandHero@@A:BYTE		; GrandHero
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Category$227720 = -12					; size = 4
_i$227713 = -8						; size = 4
_this$ = -4						; size = 4
_iItemNumber$ = 8					; size = 4
?CheckItemType@CSocketOption@@QAEEH@Z PROC		; CSocketOption::CheckItemType
; _this$ = ecx

; 339  : {

  01890	55		 push	 ebp
  01891	8b ec		 mov	 ebp, esp
  01893	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01896	53		 push	 ebx
  01897	56		 push	 esi
  01898	57		 push	 edi
  01899	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 340  : 	for( int i = 0; i < this->m_SocketItemCount; i++ )

  0189c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227713[ebp], 0
  018a3	eb 09		 jmp	 SHORT $LN11@CheckItemT
$LN10@CheckItemT:
  018a5	8b 45 f8	 mov	 eax, DWORD PTR _i$227713[ebp]
  018a8	83 c0 01	 add	 eax, 1
  018ab	89 45 f8	 mov	 DWORD PTR _i$227713[ebp], eax
$LN11@CheckItemT:
  018ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  018b1	8b 4d f8	 mov	 ecx, DWORD PTR _i$227713[ebp]
  018b4	3b 88 b4 07 00
	00		 cmp	 ecx, DWORD PTR [eax+1972]
  018ba	0f 8d 93 00 00
	00		 jge	 $LN9@CheckItemT

; 341  : 	{
; 342  : 		if( iItemNumber == ITEMGET(this->m_SocketItemList[i].ItemID, this->m_SocketItemList[i].ItemIndex) )

  018c0	8b 45 f8	 mov	 eax, DWORD PTR _i$227713[ebp]
  018c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018c6	0f bf 94 81 5c
	05 00 00	 movsx	 edx, WORD PTR [ecx+eax*4+1372]
  018ce	c1 e2 09	 shl	 edx, 9
  018d1	8b 45 f8	 mov	 eax, DWORD PTR _i$227713[ebp]
  018d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018d7	0f bf 84 81 5e
	05 00 00	 movsx	 eax, WORD PTR [ecx+eax*4+1374]
  018df	03 d0		 add	 edx, eax
  018e1	39 55 08	 cmp	 DWORD PTR _iItemNumber$[ebp], edx
  018e4	75 09		 jne	 SHORT $LN8@CheckItemT

; 343  : 		{
; 344  : 			return true;

  018e6	b0 01		 mov	 al, 1
  018e8	e9 81 00 00 00	 jmp	 $LN12@CheckItemT
  018ed	eb 5f		 jmp	 SHORT $LN7@CheckItemT
$LN8@CheckItemT:

; 345  : 		}
; 346  : 		else if( this->m_SocketItemList[i].ItemID == -1 && this->m_SocketItemList[i].ItemIndex != -1 )

  018ef	8b 45 f8	 mov	 eax, DWORD PTR _i$227713[ebp]
  018f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018f5	0f bf 94 81 5c
	05 00 00	 movsx	 edx, WORD PTR [ecx+eax*4+1372]
  018fd	83 fa ff	 cmp	 edx, -1
  01900	75 4c		 jne	 SHORT $LN7@CheckItemT
  01902	8b 45 f8	 mov	 eax, DWORD PTR _i$227713[ebp]
  01905	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01908	0f bf 94 81 5e
	05 00 00	 movsx	 edx, WORD PTR [ecx+eax*4+1374]
  01910	83 fa ff	 cmp	 edx, -1
  01913	74 39		 je	 SHORT $LN7@CheckItemT

; 347  : 		{
; 348  : 			for( int Category = 7; Category < 12; Category++ )

  01915	c7 45 f4 07 00
	00 00		 mov	 DWORD PTR _Category$227720[ebp], 7
  0191c	eb 09		 jmp	 SHORT $LN5@CheckItemT
$LN4@CheckItemT:
  0191e	8b 45 f4	 mov	 eax, DWORD PTR _Category$227720[ebp]
  01921	83 c0 01	 add	 eax, 1
  01924	89 45 f4	 mov	 DWORD PTR _Category$227720[ebp], eax
$LN5@CheckItemT:
  01927	83 7d f4 0c	 cmp	 DWORD PTR _Category$227720[ebp], 12 ; 0000000cH
  0192b	7d 21		 jge	 SHORT $LN7@CheckItemT

; 349  : 			{
; 350  : 				if( iItemNumber == ITEMGET(Category, this->m_SocketItemList[i].ItemIndex) )

  0192d	8b 45 f4	 mov	 eax, DWORD PTR _Category$227720[ebp]
  01930	c1 e0 09	 shl	 eax, 9
  01933	8b 4d f8	 mov	 ecx, DWORD PTR _i$227713[ebp]
  01936	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01939	0f bf 8c 8a 5e
	05 00 00	 movsx	 ecx, WORD PTR [edx+ecx*4+1374]
  01941	03 c1		 add	 eax, ecx
  01943	39 45 08	 cmp	 DWORD PTR _iItemNumber$[ebp], eax
  01946	75 04		 jne	 SHORT $LN2@CheckItemT

; 351  : 				{
; 352  : 					return true;

  01948	b0 01		 mov	 al, 1
  0194a	eb 22		 jmp	 SHORT $LN12@CheckItemT
$LN2@CheckItemT:

; 353  : 				}
; 354  : 			}

  0194c	eb d0		 jmp	 SHORT $LN4@CheckItemT
$LN7@CheckItemT:

; 355  : 		}
; 356  : 	}

  0194e	e9 52 ff ff ff	 jmp	 $LN10@CheckItemT
$LN9@CheckItemT:

; 357  : 	
; 358  : #ifdef GRAND_HERO_DEV
; 359  : 	if(GrandHero.SockeetItem(iItemNumber))

  01953	8b 45 08	 mov	 eax, DWORD PTR _iItemNumber$[ebp]
  01956	50		 push	 eax
  01957	b9 00 00 00 00	 mov	 ecx, OFFSET ?GrandHero@@3VcGrandHero@@A ; GrandHero
  0195c	e8 00 00 00 00	 call	 ?SockeetItem@cGrandHero@@QAE_NH@Z ; cGrandHero::SockeetItem
  01961	0f b6 c8	 movzx	 ecx, al
  01964	85 c9		 test	 ecx, ecx
  01966	74 04		 je	 SHORT $LN1@CheckItemT

; 360  : 		return true;

  01968	b0 01		 mov	 al, 1
  0196a	eb 02		 jmp	 SHORT $LN12@CheckItemT
$LN1@CheckItemT:

; 361  : #endif
; 362  : 	// ----
; 363  : 	return false;

  0196c	32 c0		 xor	 al, al
$LN12@CheckItemT:

; 364  : 	/*
; 365  : 	switch(iItemNumber)
; 366  : 	{
; 367  : 	case ITEMGET(0,26)://
; 368  : 	case ITEMGET(0,27)://
; 369  : 	case ITEMGET(0,28)://
; 370  : 	case ITEMGET(2,16)://
; 371  : 	case ITEMGET(2,17)://
; 372  : 	case ITEMGET(4,23)://
; 373  : 	case ITEMGET(5,30):
; 374  : 	case ITEMGET(5,31):
; 375  : 	case ITEMGET(5,32):
; 376  : 	case ITEMGET(6,17):
; 377  : 	case ITEMGET(6,18):
; 378  : 	case ITEMGET(6,19):
; 379  : 	case ITEMGET(6,20):
; 380  : 	case ITEMGET(7,45):
; 381  : 	case ITEMGET(7,46):
; 382  : 	case ITEMGET(7,49):
; 383  : 	case ITEMGET(7,50):
; 384  : 	case ITEMGET(7,51):
; 385  : 	case ITEMGET(7,52):
; 386  : 	case ITEMGET(7,53):
; 387  : 	case ITEMGET(8,45):
; 388  : 	case ITEMGET(8,46):
; 389  : 	case ITEMGET(8,47):
; 390  : 	case ITEMGET(8,48):
; 391  : 	case ITEMGET(8,49):
; 392  : 	case ITEMGET(8,50):
; 393  : 	case ITEMGET(8,51):
; 394  : 	case ITEMGET(8,52):
; 395  : 	case ITEMGET(8,53):
; 396  : 	case ITEMGET(9,45):
; 397  : 	case ITEMGET(9,46):
; 398  : 	case ITEMGET(9,47):
; 399  : 	case ITEMGET(9,48):
; 400  : 	case ITEMGET(9,49):
; 401  : 	case ITEMGET(9,50):
; 402  : 	case ITEMGET(9,51):
; 403  : 	case ITEMGET(9,52):
; 404  : 	case ITEMGET(9,53):
; 405  : 	case ITEMGET(10,45):
; 406  : 	case ITEMGET(10,46):
; 407  : 	case ITEMGET(10,47):
; 408  : 	case ITEMGET(10,48):
; 409  : 	case ITEMGET(10,49):
; 410  : 	case ITEMGET(10,50):
; 411  : 	case ITEMGET(10,51):
; 412  : 	case ITEMGET(10,52):
; 413  : 	case ITEMGET(10,53):
; 414  : 	case ITEMGET(11,45):
; 415  : 	case ITEMGET(11,46):
; 416  : 	case ITEMGET(11,47):
; 417  : 	case ITEMGET(11,48):
; 418  : 	case ITEMGET(11,49):
; 419  : 	case ITEMGET(11,50):
; 420  : 	case ITEMGET(11,51):
; 421  : 	case ITEMGET(11,52):
; 422  : 	case ITEMGET(11,53):
; 423  : 		return TRUE;
; 424  : 	}
; 425  : 
; 426  : #ifdef _GRAND_ITEM_
; 427  : 	switch(iItemNumber)
; 428  : 	{
; 429  : 		case ITEMGET(0,40):
; 430  : 		case ITEMGET(0,41):
; 431  : 		case ITEMGET(2,20):
; 432  : 		case ITEMGET(4,30):
; 433  : 		case ITEMGET(5,40):
; 434  : 		case ITEMGET(5,41):
; 435  : 		case ITEMGET(6,30):
; 436  : 		case ITEMGET(6,31):
; 437  : 		case ITEMGET(6,32):
; 438  : 		case ITEMGET(6,33):
; 439  : 			return true;
; 440  : 	}
; 441  : 
; 442  : 	if( iItemNumber >= ITEMGET(7,60) && iItemNumber <= ITEMGET(7,65) ||
; 443  : 		iItemNumber >= ITEMGET(8,60) && iItemNumber <= ITEMGET(8,65) ||
; 444  : 		iItemNumber >= ITEMGET(9,60) && iItemNumber <= ITEMGET(9,65) ||
; 445  : 		iItemNumber >= ITEMGET(10,60) && iItemNumber <= ITEMGET(10,65) ||
; 446  : 		iItemNumber >= ITEMGET(11,60) && iItemNumber <= ITEMGET(11,65) )
; 447  : 	{
; 448  : 		return true;
; 449  : 	}
; 450  : #endif
; 451  : 
; 452  : 
; 453  : 	return FALSE;
; 454  : 	*/
; 455  : }

  0196e	5f		 pop	 edi
  0196f	5e		 pop	 esi
  01970	5b		 pop	 ebx
  01971	8b e5		 mov	 esp, ebp
  01973	5d		 pop	 ebp
  01974	c2 04 00	 ret	 4
?CheckItemType@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::CheckItemType
_TEXT	ENDS
PUBLIC	?GetActiveSocketSlots@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::GetActiveSocketSlots
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227731 = -12						; size = 4
_btCount$ = -5						; size = 1
_this$ = -4						; size = 4
_pItem$ = 8						; size = 4
?GetActiveSocketSlots@CSocketOption@@QAEEPAVCItem@@@Z PROC ; CSocketOption::GetActiveSocketSlots
; _this$ = ecx

; 459  : {

  01980	55		 push	 ebp
  01981	8b ec		 mov	 ebp, esp
  01983	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01986	53		 push	 ebx
  01987	56		 push	 esi
  01988	57		 push	 edi
  01989	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 460  : 	BYTE btCount = 0;

  0198c	c6 45 fb 00	 mov	 BYTE PTR _btCount$[ebp], 0

; 461  : 
; 462  : 	for(int i = 0;i < MAX_SOCKET_OPTION; i++)

  01990	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$227731[ebp], 0
  01997	eb 09		 jmp	 SHORT $LN4@GetActiveS
$LN3@GetActiveS:
  01999	8b 45 f4	 mov	 eax, DWORD PTR _i$227731[ebp]
  0199c	83 c0 01	 add	 eax, 1
  0199f	89 45 f4	 mov	 DWORD PTR _i$227731[ebp], eax
$LN4@GetActiveS:
  019a2	83 7d f4 05	 cmp	 DWORD PTR _i$227731[ebp], 5
  019a6	7d 1f		 jge	 SHORT $LN2@GetActiveS

; 463  : 	{
; 464  : 		if(pItem->m_SocketOption[i] == 0xFE)

  019a8	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  019ab	03 45 f4	 add	 eax, DWORD PTR _i$227731[ebp]
  019ae	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  019b5	81 f9 fe 00 00
	00		 cmp	 ecx, 254		; 000000feH
  019bb	75 08		 jne	 SHORT $LN1@GetActiveS

; 465  : 		{
; 466  : 			btCount++;

  019bd	8a 45 fb	 mov	 al, BYTE PTR _btCount$[ebp]
  019c0	04 01		 add	 al, 1
  019c2	88 45 fb	 mov	 BYTE PTR _btCount$[ebp], al
$LN1@GetActiveS:

; 467  : 		}
; 468  : 	}

  019c5	eb d2		 jmp	 SHORT $LN3@GetActiveS
$LN2@GetActiveS:

; 469  : 
; 470  : 	return btCount;

  019c7	8a 45 fb	 mov	 al, BYTE PTR _btCount$[ebp]

; 471  : }

  019ca	5f		 pop	 edi
  019cb	5e		 pop	 esi
  019cc	5b		 pop	 ebx
  019cd	8b e5		 mov	 esp, ebp
  019cf	5d		 pop	 ebp
  019d0	c2 04 00	 ret	 4
?GetActiveSocketSlots@CSocketOption@@QAEEPAVCItem@@@Z ENDP ; CSocketOption::GetActiveSocketSlots
_TEXT	ENDS
PUBLIC	?GetSphereData@CSocketOption@@QAEPAVCSphere@@E@Z ; CSocketOption::GetSphereData
PUBLIC	?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z	; CSocketOption::GetSeedData
PUBLIC	?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z ; CSocketOption::ModifySeedSphereData
EXTRN	?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z:PROC	; CSeedSphere::SetInfo
EXTRN	??1CSeedSphere@@QAE@XZ:PROC			; CSeedSphere::~CSeedSphere
EXTRN	??0CSeedSphere@@QAE@XZ:PROC			; CSeedSphere::CSeedSphere
xdata$x	SEGMENT
__unwindtable$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z$0
__ehfuncinfo$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T228565 = -110						; size = 1
$T228566 = -109						; size = 1
_SeedSphere$ = -44					; size = 16
_lpSphere$ = -28					; size = 4
_lpSeed$ = -24						; size = 4
_loc6$ = -18						; size = 1
_loc5$ = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_SeedSphereIndex$ = 8					; size = 1
_OptionIndex$ = 12					; size = 4
_OptionType$ = 16					; size = 4
_SocketSlot$ = 20					; size = 4
?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z PROC	; CSocketOption::ModifySeedSphereData
; _this$ = ecx

; 475  : {

  019e0	55		 push	 ebp
  019e1	8b ec		 mov	 ebp, esp
  019e3	6a ff		 push	 -1
  019e5	68 00 00 00 00	 push	 __ehhandler$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z
  019ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  019f0	50		 push	 eax
  019f1	83 ec 64	 sub	 esp, 100		; 00000064H
  019f4	53		 push	 ebx
  019f5	56		 push	 esi
  019f6	57		 push	 edi
  019f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  019fc	33 c5		 xor	 eax, ebp
  019fe	50		 push	 eax
  019ff	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  01a02	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  01a08	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 	BYTE loc5 = 0;

  01a0b	c6 45 ef 00	 mov	 BYTE PTR _loc5$[ebp], 0

; 477  : 	BYTE loc6 = 0;

  01a0f	c6 45 ee 00	 mov	 BYTE PTR _loc6$[ebp], 0

; 478  : 
; 479  : 	CSeed * lpSeed = NULL;//loc7

  01a13	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _lpSeed$[ebp], 0

; 480  : 	CSphere * lpSphere = NULL;//loc8

  01a1a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _lpSphere$[ebp], 0

; 481  : 	CSeedSphere  SeedSphere;

  01a21	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  01a24	e8 00 00 00 00	 call	 ??0CSeedSphere@@QAE@XZ	; CSeedSphere::CSeedSphere
  01a29	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 482  : 
; 483  : 	loc5 = SeedSphereIndex % 50;

  01a30	0f b6 45 08	 movzx	 eax, BYTE PTR _SeedSphereIndex$[ebp]
  01a34	99		 cdq
  01a35	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  01a3a	f7 f9		 idiv	 ecx
  01a3c	88 55 ef	 mov	 BYTE PTR _loc5$[ebp], dl

; 484  : 	loc6 = (SeedSphereIndex - loc5) / 50 + 1;

  01a3f	0f b6 45 08	 movzx	 eax, BYTE PTR _SeedSphereIndex$[ebp]
  01a43	0f b6 4d ef	 movzx	 ecx, BYTE PTR _loc5$[ebp]
  01a47	2b c1		 sub	 eax, ecx
  01a49	99		 cdq
  01a4a	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  01a4f	f7 f9		 idiv	 ecx
  01a51	83 c0 01	 add	 eax, 1
  01a54	88 45 ee	 mov	 BYTE PTR _loc6$[ebp], al

; 485  : 
; 486  : 	lpSeed = this->GetSeedData(loc5);

  01a57	0f b6 45 ef	 movzx	 eax, BYTE PTR _loc5$[ebp]
  01a5b	50		 push	 eax
  01a5c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a5f	e8 00 00 00 00	 call	 ?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ; CSocketOption::GetSeedData
  01a64	89 45 e8	 mov	 DWORD PTR _lpSeed$[ebp], eax

; 487  : 	lpSphere = this->GetSphereData(loc6);

  01a67	0f b6 45 ee	 movzx	 eax, BYTE PTR _loc6$[ebp]
  01a6b	50		 push	 eax
  01a6c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a6f	e8 00 00 00 00	 call	 ?GetSphereData@CSocketOption@@QAEPAVCSphere@@E@Z ; CSocketOption::GetSphereData
  01a74	89 45 e4	 mov	 DWORD PTR _lpSphere$[ebp], eax

; 488  : 
; 489  : 	if(lpSeed == NULL)

  01a77	83 7d e8 00	 cmp	 DWORD PTR _lpSeed$[ebp], 0
  01a7b	75 18		 jne	 SHORT $LN1@ModifySeed

; 490  : 	{
; 491  : 		return (BYTE)0;

  01a7d	c6 45 92 00	 mov	 BYTE PTR $T228565[ebp], 0
  01a81	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01a88	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  01a8b	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  01a90	8a 45 92	 mov	 al, BYTE PTR $T228565[ebp]
  01a93	eb 3f		 jmp	 SHORT $LN2@ModifySeed
$LN1@ModifySeed:

; 492  : 	}
; 493  : 
; 494  : 	SeedSphere.SetInfo(lpSeed,loc6); //

  01a95	0f b6 45 ee	 movzx	 eax, BYTE PTR _loc6$[ebp]
  01a99	50		 push	 eax
  01a9a	8b 4d e8	 mov	 ecx, DWORD PTR _lpSeed$[ebp]
  01a9d	51		 push	 ecx
  01a9e	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  01aa1	e8 00 00 00 00	 call	 ?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z ; CSeedSphere::SetInfo

; 495  : 
; 496  : 	OptionIndex = SeedSphere.m_btOptionIndex;

  01aa6	8b 45 0c	 mov	 eax, DWORD PTR _OptionIndex$[ebp]
  01aa9	8a 4d d5	 mov	 cl, BYTE PTR _SeedSphere$[ebp+1]
  01aac	88 08		 mov	 BYTE PTR [eax], cl

; 497  : 	OptionType = SeedSphere.m_btOptionType;

  01aae	8b 45 10	 mov	 eax, DWORD PTR _OptionType$[ebp]
  01ab1	8a 4d dd	 mov	 cl, BYTE PTR _SeedSphere$[ebp+9]
  01ab4	88 08		 mov	 BYTE PTR [eax], cl

; 498  : 	SocketSlot = SeedSphere.m_wSocketSlot;

  01ab6	8b 45 14	 mov	 eax, DWORD PTR _SocketSlot$[ebp]
  01ab9	8a 4d de	 mov	 cl, BYTE PTR _SeedSphere$[ebp+10]
  01abc	88 08		 mov	 BYTE PTR [eax], cl

; 499  : 	
; 500  : 	return (BYTE)1;

  01abe	c6 45 93 01	 mov	 BYTE PTR $T228566[ebp], 1
  01ac2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01ac9	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  01acc	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  01ad1	8a 45 93	 mov	 al, BYTE PTR $T228566[ebp]
$LN2@ModifySeed:

; 501  : }

  01ad4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01ad7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01ade	59		 pop	 ecx
  01adf	5f		 pop	 edi
  01ae0	5e		 pop	 esi
  01ae1	5b		 pop	 ebx
  01ae2	8b e5		 mov	 esp, ebp
  01ae4	5d		 pop	 ebp
  01ae5	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z$0:
  000ca	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  000cd	e9 00 00 00 00	 jmp	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
__ehhandler$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z:
  000d2	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000d6	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000d9	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  000dc	33 c8		 xor	 ecx, eax
  000de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e3	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z
  000e8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z ENDP	; CSocketOption::ModifySeedSphereData
PUBLIC	?GetActiveSocketOption@CSocketOption@@QAEXPAVCItem@@PAEAAE@Z ; CSocketOption::GetActiveSocketOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227762 = -8						; size = 4
_this$ = -4						; size = 4
_pItem$ = 8						; size = 4
_SocketOption$ = 12					; size = 4
_SocketIndex$ = 16					; size = 4
?GetActiveSocketOption@CSocketOption@@QAEXPAVCItem@@PAEAAE@Z PROC ; CSocketOption::GetActiveSocketOption
; _this$ = ecx

; 505  : {

  01af0	55		 push	 ebp
  01af1	8b ec		 mov	 ebp, esp
  01af3	83 ec 48	 sub	 esp, 72			; 00000048H
  01af6	53		 push	 ebx
  01af7	56		 push	 esi
  01af8	57		 push	 edi
  01af9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 506  : 	if(pItem == NULL)

  01afc	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  01b00	75 02		 jne	 SHORT $LN6@GetActiveS@2

; 507  : 	{
; 508  : 		return;

  01b02	eb 5d		 jmp	 SHORT $LN7@GetActiveS@2
$LN6@GetActiveS@2:

; 509  : 	}
; 510  : 
; 511  : 	if(pItem->IsItem() == FALSE || this->IsActive(pItem) == FALSE)

  01b04	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  01b07	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  01b0c	85 c0		 test	 eax, eax
  01b0e	74 13		 je	 SHORT $LN4@GetActiveS@2
  01b10	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  01b13	50		 push	 eax
  01b14	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b17	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  01b1c	0f b6 c8	 movzx	 ecx, al
  01b1f	85 c9		 test	 ecx, ecx
  01b21	75 02		 jne	 SHORT $LN5@GetActiveS@2
$LN4@GetActiveS@2:

; 512  : 	{
; 513  : 		return;	

  01b23	eb 3c		 jmp	 SHORT $LN7@GetActiveS@2
$LN5@GetActiveS@2:

; 514  : 	}
; 515  : 
; 516  : 	for( int i = 0; i < MAX_SOCKET_OPTION; i++)

  01b25	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227762[ebp], 0
  01b2c	eb 09		 jmp	 SHORT $LN3@GetActiveS@2
$LN2@GetActiveS@2:
  01b2e	8b 45 f8	 mov	 eax, DWORD PTR _i$227762[ebp]
  01b31	83 c0 01	 add	 eax, 1
  01b34	89 45 f8	 mov	 DWORD PTR _i$227762[ebp], eax
$LN3@GetActiveS@2:
  01b37	83 7d f8 05	 cmp	 DWORD PTR _i$227762[ebp], 5
  01b3b	7d 16		 jge	 SHORT $LN1@GetActiveS@2

; 517  : 	{
; 518  : 		SocketOption[i] = pItem->m_SocketOption[i];

  01b3d	8b 45 0c	 mov	 eax, DWORD PTR _SocketOption$[ebp]
  01b40	03 45 f8	 add	 eax, DWORD PTR _i$227762[ebp]
  01b43	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  01b46	03 4d f8	 add	 ecx, DWORD PTR _i$227762[ebp]
  01b49	8a 91 cc 00 00
	00		 mov	 dl, BYTE PTR [ecx+204]
  01b4f	88 10		 mov	 BYTE PTR [eax], dl

; 519  : 	}

  01b51	eb db		 jmp	 SHORT $LN2@GetActiveS@2
$LN1@GetActiveS@2:

; 520  : 
; 521  : 	SocketIndex =  pItem->m_SocketOptionIndex;

  01b53	8b 45 10	 mov	 eax, DWORD PTR _SocketIndex$[ebp]
  01b56	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  01b59	8a 91 cb 00 00
	00		 mov	 dl, BYTE PTR [ecx+203]
  01b5f	88 10		 mov	 BYTE PTR [eax], dl
$LN7@GetActiveS@2:

; 522  : }

  01b61	5f		 pop	 edi
  01b62	5e		 pop	 esi
  01b63	5b		 pop	 ebx
  01b64	8b e5		 mov	 esp, ebp
  01b66	5d		 pop	 ebp
  01b67	c2 0c 00	 ret	 12			; 0000000cH
?GetActiveSocketOption@CSocketOption@@QAEXPAVCItem@@PAEAAE@Z ENDP ; CSocketOption::GetActiveSocketOption
_TEXT	ENDS
PUBLIC	?IsSocketOption@CSocketOption@@QAEEPAVCItem@@@Z	; CSocketOption::IsSocketOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227773 = -8						; size = 4
_this$ = -4						; size = 4
_pItem$ = 8						; size = 4
?IsSocketOption@CSocketOption@@QAEEPAVCItem@@@Z PROC	; CSocketOption::IsSocketOption
; _this$ = ecx

; 526  : {

  01b70	55		 push	 ebp
  01b71	8b ec		 mov	 ebp, esp
  01b73	83 ec 48	 sub	 esp, 72			; 00000048H
  01b76	53		 push	 ebx
  01b77	56		 push	 esi
  01b78	57		 push	 edi
  01b79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 527  : 	if(pItem == NULL)

  01b7c	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  01b80	75 04		 jne	 SHORT $LN7@IsSocketOp

; 528  : 	{
; 529  : 		return FALSE;

  01b82	32 c0		 xor	 al, al
  01b84	eb 5c		 jmp	 SHORT $LN8@IsSocketOp
$LN7@IsSocketOp:

; 530  : 	}
; 531  : 
; 532  : 	if(pItem->IsItem() == FALSE)

  01b86	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  01b89	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  01b8e	85 c0		 test	 eax, eax
  01b90	75 04		 jne	 SHORT $LN6@IsSocketOp

; 533  : 	{
; 534  : 		return FALSE;

  01b92	32 c0		 xor	 al, al
  01b94	eb 4c		 jmp	 SHORT $LN8@IsSocketOp
$LN6@IsSocketOp:

; 535  : 	}
; 536  : 
; 537  : 	if(this->IsActive(pItem) == FALSE)

  01b96	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  01b99	50		 push	 eax
  01b9a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b9d	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  01ba2	0f b6 c8	 movzx	 ecx, al
  01ba5	85 c9		 test	 ecx, ecx
  01ba7	75 04		 jne	 SHORT $LN5@IsSocketOp

; 538  : 	{
; 539  : 		return FALSE;

  01ba9	32 c0		 xor	 al, al
  01bab	eb 35		 jmp	 SHORT $LN8@IsSocketOp
$LN5@IsSocketOp:

; 540  : 	}
; 541  : 		
; 542  : 	for (int i = 0; i < MAX_SOCKET_OPTION; i++ )

  01bad	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227773[ebp], 0
  01bb4	eb 09		 jmp	 SHORT $LN4@IsSocketOp
$LN3@IsSocketOp:
  01bb6	8b 45 f8	 mov	 eax, DWORD PTR _i$227773[ebp]
  01bb9	83 c0 01	 add	 eax, 1
  01bbc	89 45 f8	 mov	 DWORD PTR _i$227773[ebp], eax
$LN4@IsSocketOp:
  01bbf	83 7d f8 05	 cmp	 DWORD PTR _i$227773[ebp], 5
  01bc3	7d 1b		 jge	 SHORT $LN2@IsSocketOp

; 543  : 	{
; 544  : 		if ( pItem->m_SocketOption[i] != 0xFF )

  01bc5	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  01bc8	03 45 f8	 add	 eax, DWORD PTR _i$227773[ebp]
  01bcb	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  01bd2	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  01bd8	74 04		 je	 SHORT $LN1@IsSocketOp

; 545  : 		{
; 546  : 			return TRUE;

  01bda	b0 01		 mov	 al, 1
  01bdc	eb 04		 jmp	 SHORT $LN8@IsSocketOp
$LN1@IsSocketOp:

; 547  : 		}
; 548  : 	}

  01bde	eb d6		 jmp	 SHORT $LN3@IsSocketOp
$LN2@IsSocketOp:

; 549  : 	
; 550  : 	return FALSE;

  01be0	32 c0		 xor	 al, al
$LN8@IsSocketOp:

; 551  : }

  01be2	5f		 pop	 edi
  01be3	5e		 pop	 esi
  01be4	5b		 pop	 ebx
  01be5	8b e5		 mov	 esp, ebp
  01be7	5d		 pop	 ebp
  01be8	c2 04 00	 ret	 4
?IsSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ENDP	; CSocketOption::IsSocketOption
_TEXT	ENDS
PUBLIC	?IsSeedSphereItem@CSocketOption@@QAEEH@Z	; CSocketOption::IsSeedSphereItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_m_Type$ = 8						; size = 4
?IsSeedSphereItem@CSocketOption@@QAEEH@Z PROC		; CSocketOption::IsSeedSphereItem
; _this$ = ecx

; 555  : {

  01bf0	55		 push	 ebp
  01bf1	8b ec		 mov	 ebp, esp
  01bf3	83 ec 48	 sub	 esp, 72			; 00000048H
  01bf6	53		 push	 ebx
  01bf7	56		 push	 esi
  01bf8	57		 push	 edi
  01bf9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 556  : 	switch(m_Type)

  01bfc	8b 45 08	 mov	 eax, DWORD PTR _m_Type$[ebp]
  01bff	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  01c02	81 7d b8 3c 18
	00 00		 cmp	 DWORD PTR tv64[ebp], 6204 ; 0000183cH
  01c09	7c 0f		 jl	 SHORT $LN2@IsSeedSphe
  01c0b	81 7d b8 41 18
	00 00		 cmp	 DWORD PTR tv64[ebp], 6209 ; 00001841H
  01c12	7e 02		 jle	 SHORT $LN1@IsSeedSphe
  01c14	eb 04		 jmp	 SHORT $LN2@IsSeedSphe
$LN1@IsSeedSphe:

; 557  : 	{
; 558  : 	case ITEMGET(12,60):
; 559  : 	case ITEMGET(12,61):
; 560  : 	case ITEMGET(12,62):
; 561  : 	case ITEMGET(12,63):
; 562  : 	case ITEMGET(12,64):
; 563  : 	case ITEMGET(12,65):
; 564  : 		return TRUE;

  01c16	b0 01		 mov	 al, 1
  01c18	eb 02		 jmp	 SHORT $LN4@IsSeedSphe
$LN2@IsSeedSphe:

; 565  : 	}
; 566  : 
; 567  : 	return FALSE;

  01c1a	32 c0		 xor	 al, al
$LN4@IsSeedSphe:

; 568  : }

  01c1c	5f		 pop	 edi
  01c1d	5e		 pop	 esi
  01c1e	5b		 pop	 ebx
  01c1f	8b e5		 mov	 esp, ebp
  01c21	5d		 pop	 ebp
  01c22	c2 04 00	 ret	 4
?IsSeedSphereItem@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::IsSeedSphereItem
_TEXT	ENDS
PUBLIC	?IsSeedItem@CSocketOption@@QAEEH@Z		; CSocketOption::IsSeedItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_m_Type$ = 8						; size = 4
?IsSeedItem@CSocketOption@@QAEEH@Z PROC			; CSocketOption::IsSeedItem
; _this$ = ecx

; 572  : {

  01c30	55		 push	 ebp
  01c31	8b ec		 mov	 ebp, esp
  01c33	83 ec 48	 sub	 esp, 72			; 00000048H
  01c36	53		 push	 ebx
  01c37	56		 push	 esi
  01c38	57		 push	 edi
  01c39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 573  : 	switch(m_Type)

  01c3c	8b 45 08	 mov	 eax, DWORD PTR _m_Type$[ebp]
  01c3f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  01c42	81 7d b8 46 18
	00 00		 cmp	 DWORD PTR tv64[ebp], 6214 ; 00001846H
  01c49	7c 0f		 jl	 SHORT $LN2@IsSeedItem
  01c4b	81 7d b8 4a 18
	00 00		 cmp	 DWORD PTR tv64[ebp], 6218 ; 0000184aH
  01c52	7e 02		 jle	 SHORT $LN1@IsSeedItem
  01c54	eb 04		 jmp	 SHORT $LN2@IsSeedItem
$LN1@IsSeedItem:

; 574  : 	{
; 575  : 	case ITEMGET(12,70):
; 576  : 	case ITEMGET(12,71):
; 577  : 	case ITEMGET(12,72):
; 578  : 	case ITEMGET(12,73):
; 579  : 	case ITEMGET(12,74):
; 580  : 	
; 581  : 		return TRUE;

  01c56	b0 01		 mov	 al, 1
  01c58	eb 02		 jmp	 SHORT $LN4@IsSeedItem
$LN2@IsSeedItem:

; 582  : 	}
; 583  : 
; 584  : 	return FALSE;

  01c5a	32 c0		 xor	 al, al
$LN4@IsSeedItem:

; 585  : }

  01c5c	5f		 pop	 edi
  01c5d	5e		 pop	 esi
  01c5e	5b		 pop	 ebx
  01c5f	8b e5		 mov	 esp, ebp
  01c61	5d		 pop	 ebp
  01c62	c2 04 00	 ret	 4
?IsSeedItem@CSocketOption@@QAEEH@Z ENDP			; CSocketOption::IsSeedItem
_TEXT	ENDS
PUBLIC	?IsSeedSpearItem@CSocketOption@@QAEEH@Z		; CSocketOption::IsSeedSpearItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc3$ = -6						; size = 1
_loc2$ = -5						; size = 1
_this$ = -4						; size = 4
_m_Type$ = 8						; size = 4
?IsSeedSpearItem@CSocketOption@@QAEEH@Z PROC		; CSocketOption::IsSeedSpearItem
; _this$ = ecx

; 589  : {

  01c70	55		 push	 ebp
  01c71	8b ec		 mov	 ebp, esp
  01c73	83 ec 48	 sub	 esp, 72			; 00000048H
  01c76	53		 push	 ebx
  01c77	56		 push	 esi
  01c78	57		 push	 edi
  01c79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  : 	BYTE loc2 = 0;

  01c7c	c6 45 fb 00	 mov	 BYTE PTR _loc2$[ebp], 0

; 591  : 	BYTE loc3 = 0;

  01c80	c6 45 fa 00	 mov	 BYTE PTR _loc3$[ebp], 0

; 592  : 
; 593  : 	loc3 = m_Type % 512;

  01c84	8b 45 08	 mov	 eax, DWORD PTR _m_Type$[ebp]
  01c87	25 ff 01 00 80	 and	 eax, -2147483137	; 800001ffH
  01c8c	79 07		 jns	 SHORT $LN5@IsSeedSpea
  01c8e	48		 dec	 eax
  01c8f	0d 00 fe ff ff	 or	 eax, -512		; fffffe00H
  01c94	40		 inc	 eax
$LN5@IsSeedSpea:
  01c95	88 45 fa	 mov	 BYTE PTR _loc3$[ebp], al

; 594  : 
; 595  : 	loc2 = (m_Type - loc3) / 512 ;

  01c98	0f b6 45 fa	 movzx	 eax, BYTE PTR _loc3$[ebp]
  01c9c	8b 4d 08	 mov	 ecx, DWORD PTR _m_Type$[ebp]
  01c9f	2b c8		 sub	 ecx, eax
  01ca1	8b c1		 mov	 eax, ecx
  01ca3	99		 cdq
  01ca4	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  01caa	03 c2		 add	 eax, edx
  01cac	c1 f8 09	 sar	 eax, 9
  01caf	88 45 fb	 mov	 BYTE PTR _loc2$[ebp], al

; 596  : 
; 597  : 	if(loc2 == 12)

  01cb2	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  01cb6	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  01cb9	75 18		 jne	 SHORT $LN2@IsSeedSpea

; 598  : 	{
; 599  : 		if(loc3 >= 100 && loc3 <= 129)

  01cbb	0f b6 45 fa	 movzx	 eax, BYTE PTR _loc3$[ebp]
  01cbf	83 f8 64	 cmp	 eax, 100		; 00000064H
  01cc2	7c 0f		 jl	 SHORT $LN2@IsSeedSpea
  01cc4	0f b6 45 fa	 movzx	 eax, BYTE PTR _loc3$[ebp]
  01cc8	3d 81 00 00 00	 cmp	 eax, 129		; 00000081H
  01ccd	7f 04		 jg	 SHORT $LN2@IsSeedSpea

; 600  : 		{
; 601  : 			return TRUE;

  01ccf	b0 01		 mov	 al, 1
  01cd1	eb 02		 jmp	 SHORT $LN3@IsSeedSpea
$LN2@IsSeedSpea:

; 602  : 		}
; 603  : 	}
; 604  : 
; 605  : 	return FALSE;

  01cd3	32 c0		 xor	 al, al
$LN3@IsSeedSpea:

; 606  : }

  01cd5	5f		 pop	 edi
  01cd6	5e		 pop	 esi
  01cd7	5b		 pop	 ebx
  01cd8	8b e5		 mov	 esp, ebp
  01cda	5d		 pop	 ebp
  01cdb	c2 04 00	 ret	 4
?IsSeedSpearItem@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::IsSeedSpearItem
_TEXT	ENDS
PUBLIC	?GetSeedOptionIndex@CSocketOption@@QAEEHE@Z	; CSocketOption::GetSeedOptionIndex
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227809 = -8						; size = 4
_this$ = -4						; size = 4
_m_Type$ = 8						; size = 4
_m_Level$ = 12						; size = 1
?GetSeedOptionIndex@CSocketOption@@QAEEHE@Z PROC	; CSocketOption::GetSeedOptionIndex
; _this$ = ecx

; 611  : {

  01ce0	55		 push	 ebp
  01ce1	8b ec		 mov	 ebp, esp
  01ce3	83 ec 48	 sub	 esp, 72			; 00000048H
  01ce6	53		 push	 ebx
  01ce7	56		 push	 esi
  01ce8	57		 push	 edi
  01ce9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 612  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  01cec	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227809[ebp], 0
  01cf3	eb 09		 jmp	 SHORT $LN4@GetSeedOpt
$LN3@GetSeedOpt:
  01cf5	8b 45 f8	 mov	 eax, DWORD PTR _i$227809[ebp]
  01cf8	83 c0 01	 add	 eax, 1
  01cfb	89 45 f8	 mov	 DWORD PTR _i$227809[ebp], eax
$LN4@GetSeedOpt:
  01cfe	83 7d f8 32	 cmp	 DWORD PTR _i$227809[ebp], 50 ; 00000032H
  01d02	7d 39		 jge	 SHORT $LN2@GetSeedOpt

; 613  : 	{
; 614  : 		if(this->SocketSeed[i].m_iItemIndex == m_Type && this->SocketSeed[i].m_btItemLevel == m_Level)

  01d04	8b 45 f8	 mov	 eax, DWORD PTR _i$227809[ebp]
  01d07	6b c0 14	 imul	 eax, 20			; 00000014H
  01d0a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d0d	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  01d11	3b 55 08	 cmp	 edx, DWORD PTR _m_Type$[ebp]
  01d14	75 25		 jne	 SHORT $LN1@GetSeedOpt
  01d16	8b 45 f8	 mov	 eax, DWORD PTR _i$227809[ebp]
  01d19	6b c0 14	 imul	 eax, 20			; 00000014H
  01d1c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d1f	0f b6 54 01 06	 movzx	 edx, BYTE PTR [ecx+eax+6]
  01d24	0f b6 45 0c	 movzx	 eax, BYTE PTR _m_Level$[ebp]
  01d28	3b d0		 cmp	 edx, eax
  01d2a	75 0f		 jne	 SHORT $LN1@GetSeedOpt

; 615  : 		{
; 616  : 			return this->SocketSeed[i].m_btOptionIndex;

  01d2c	8b 45 f8	 mov	 eax, DWORD PTR _i$227809[ebp]
  01d2f	6b c0 14	 imul	 eax, 20			; 00000014H
  01d32	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d35	8a 44 01 04	 mov	 al, BYTE PTR [ecx+eax+4]
  01d39	eb 04		 jmp	 SHORT $LN5@GetSeedOpt
$LN1@GetSeedOpt:

; 617  : 		}
; 618  : 	}

  01d3b	eb b8		 jmp	 SHORT $LN3@GetSeedOpt
$LN2@GetSeedOpt:

; 619  : 
; 620  : 	return -1;

  01d3d	0c ff		 or	 al, 255			; 000000ffH
$LN5@GetSeedOpt:

; 621  : }

  01d3f	5f		 pop	 edi
  01d40	5e		 pop	 esi
  01d41	5b		 pop	 ebx
  01d42	8b e5		 mov	 esp, ebp
  01d44	5d		 pop	 ebp
  01d45	c2 08 00	 ret	 8
?GetSeedOptionIndex@CSocketOption@@QAEEHE@Z ENDP	; CSocketOption::GetSeedOptionIndex
_TEXT	ENDS
PUBLIC	?GetSphereLevel@CSocketOption@@QAEEH@Z		; CSocketOption::GetSphereLevel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_m_Type$ = 8						; size = 4
?GetSphereLevel@CSocketOption@@QAEEH@Z PROC		; CSocketOption::GetSphereLevel
; _this$ = ecx

; 625  : {

  01d50	55		 push	 ebp
  01d51	8b ec		 mov	 ebp, esp
  01d53	83 ec 48	 sub	 esp, 72			; 00000048H
  01d56	53		 push	 ebx
  01d57	56		 push	 esi
  01d58	57		 push	 edi
  01d59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 626  : 	switch ( m_Type )

  01d5c	8b 45 08	 mov	 eax, DWORD PTR _m_Type$[ebp]
  01d5f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  01d62	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  01d65	81 e9 46 18 00
	00		 sub	 ecx, 6214		; 00001846H
  01d6b	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  01d6e	83 7d b8 04	 cmp	 DWORD PTR tv64[ebp], 4
  01d72	77 26		 ja	 SHORT $LN6@GetSphereL
  01d74	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  01d77	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN10@GetSphereL[edx*4]
$LN5@GetSphereL:

; 627  : 	{
; 628  : 	case ITEMGET(12,70):	return 1;	break;

  01d7e	b0 01		 mov	 al, 1
  01d80	eb 1a		 jmp	 SHORT $LN8@GetSphereL
  01d82	eb 16		 jmp	 SHORT $LN6@GetSphereL
$LN4@GetSphereL:

; 629  : 	case ITEMGET(12,71):	return 2;	break;

  01d84	b0 02		 mov	 al, 2
  01d86	eb 14		 jmp	 SHORT $LN8@GetSphereL
  01d88	eb 10		 jmp	 SHORT $LN6@GetSphereL
$LN3@GetSphereL:

; 630  : 	case ITEMGET(12,72):	return 3;   break;

  01d8a	b0 03		 mov	 al, 3
  01d8c	eb 0e		 jmp	 SHORT $LN8@GetSphereL
  01d8e	eb 0a		 jmp	 SHORT $LN6@GetSphereL
$LN2@GetSphereL:

; 631  : 	case ITEMGET(12,73):	return 4;	break;

  01d90	b0 04		 mov	 al, 4
  01d92	eb 08		 jmp	 SHORT $LN8@GetSphereL
  01d94	eb 04		 jmp	 SHORT $LN6@GetSphereL
$LN1@GetSphereL:

; 632  : 	case ITEMGET(12,74):	return 5;   break;

  01d96	b0 05		 mov	 al, 5
  01d98	eb 02		 jmp	 SHORT $LN8@GetSphereL
$LN6@GetSphereL:

; 633  : 	}
; 634  : 
; 635  : 	return 0;

  01d9a	32 c0		 xor	 al, al
$LN8@GetSphereL:

; 636  : }

  01d9c	5f		 pop	 edi
  01d9d	5e		 pop	 esi
  01d9e	5b		 pop	 ebx
  01d9f	8b e5		 mov	 esp, ebp
  01da1	5d		 pop	 ebp
  01da2	c2 04 00	 ret	 4
  01da5	8d 49 00	 npad	 3
$LN10@GetSphereL:
  01da8	00 00 00 00	 DD	 $LN5@GetSphereL
  01dac	00 00 00 00	 DD	 $LN4@GetSphereL
  01db0	00 00 00 00	 DD	 $LN3@GetSphereL
  01db4	00 00 00 00	 DD	 $LN2@GetSphereL
  01db8	00 00 00 00	 DD	 $LN1@GetSphereL
?GetSphereLevel@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::GetSphereLevel
_TEXT	ENDS
PUBLIC	?GetItemSocketByteOption@CSocketOption@@QAEEGE@Z ; CSocketOption::GetItemSocketByteOption
PUBLIC	?CheckEmptySlot@CSocketOption@@QAEEPAVCItem@@GE@Z ; CSocketOption::CheckEmptySlot
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227836 = -12						; size = 4
_loc3$ = -6						; size = 1
_loc2$ = -5						; size = 1
_this$ = -4						; size = 4
_pItem$ = 8						; size = 4
_m_Type$ = 12						; size = 2
_m_Level$ = 16						; size = 1
?CheckEmptySlot@CSocketOption@@QAEEPAVCItem@@GE@Z PROC	; CSocketOption::CheckEmptySlot
; _this$ = ecx

; 640  : {

  01dc0	55		 push	 ebp
  01dc1	8b ec		 mov	 ebp, esp
  01dc3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01dc6	53		 push	 ebx
  01dc7	56		 push	 esi
  01dc8	57		 push	 edi
  01dc9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 641  : 	BYTE loc2 = 0;

  01dcc	c6 45 fb 00	 mov	 BYTE PTR _loc2$[ebp], 0

; 642  : 	BYTE loc3 = 0;

  01dd0	c6 45 fa 00	 mov	 BYTE PTR _loc3$[ebp], 0

; 643  : 
; 644  : 	if(this->IsActive(pItem) == 0)

  01dd4	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  01dd7	50		 push	 eax
  01dd8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ddb	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  01de0	0f b6 c8	 movzx	 ecx, al
  01de3	85 c9		 test	 ecx, ecx
  01de5	75 07		 jne	 SHORT $LN7@CheckEmpty

; 645  : 	{
; 646  : 		return 0;

  01de7	32 c0		 xor	 al, al
  01de9	e9 8d 00 00 00	 jmp	 $LN8@CheckEmpty
$LN7@CheckEmpty:

; 647  : 	}
; 648  : 	
; 649  : 	loc3 = this->GetItemSocketByteOption(m_Type,m_Level);

  01dee	0f b6 45 10	 movzx	 eax, BYTE PTR _m_Level$[ebp]
  01df2	50		 push	 eax
  01df3	0f b7 4d 0c	 movzx	 ecx, WORD PTR _m_Type$[ebp]
  01df7	51		 push	 ecx
  01df8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dfb	e8 00 00 00 00	 call	 ?GetItemSocketByteOption@CSocketOption@@QAEEGE@Z ; CSocketOption::GetItemSocketByteOption
  01e00	88 45 fa	 mov	 BYTE PTR _loc3$[ebp], al

; 650  : 	loc2 = loc3 % 50;

  01e03	0f b6 45 fa	 movzx	 eax, BYTE PTR _loc3$[ebp]
  01e07	99		 cdq
  01e08	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  01e0d	f7 f9		 idiv	 ecx
  01e0f	88 55 fb	 mov	 BYTE PTR _loc2$[ebp], dl

; 651  : 
; 652  : 	for (int i = 0; i < MAX_SOCKET_OPTION; i++ )

  01e12	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$227836[ebp], 0
  01e19	eb 09		 jmp	 SHORT $LN6@CheckEmpty
$LN5@CheckEmpty:
  01e1b	8b 45 f4	 mov	 eax, DWORD PTR _i$227836[ebp]
  01e1e	83 c0 01	 add	 eax, 1
  01e21	89 45 f4	 mov	 DWORD PTR _i$227836[ebp], eax
$LN6@CheckEmpty:
  01e24	83 7d f4 05	 cmp	 DWORD PTR _i$227836[ebp], 5
  01e28	7d 4f		 jge	 SHORT $LN4@CheckEmpty

; 653  : 	{
; 654  : 		if (pItem->m_SocketOption[i] == 0xFF || pItem->m_SocketOption[i] == 0xFE )

  01e2a	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  01e2d	03 45 f4	 add	 eax, DWORD PTR _i$227836[ebp]
  01e30	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  01e37	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  01e3d	74 15		 je	 SHORT $LN2@CheckEmpty
  01e3f	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  01e42	03 45 f4	 add	 eax, DWORD PTR _i$227836[ebp]
  01e45	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  01e4c	81 f9 fe 00 00
	00		 cmp	 ecx, 254		; 000000feH
  01e52	75 02		 jne	 SHORT $LN3@CheckEmpty
$LN2@CheckEmpty:

; 655  : 		{
; 656  : 			continue;

  01e54	eb c5		 jmp	 SHORT $LN5@CheckEmpty
$LN3@CheckEmpty:

; 657  : 		}
; 658  : 
; 659  : 		if(	pItem->m_SocketOption[i] % 50 == loc2 )

  01e56	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  01e59	03 45 f4	 add	 eax, DWORD PTR _i$227836[ebp]
  01e5c	0f b6 80 cc 00
	00 00		 movzx	 eax, BYTE PTR [eax+204]
  01e63	99		 cdq
  01e64	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  01e69	f7 f9		 idiv	 ecx
  01e6b	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  01e6f	3b d0		 cmp	 edx, eax
  01e71	75 04		 jne	 SHORT $LN1@CheckEmpty

; 660  : 		{
; 661  : 			return 0;

  01e73	32 c0		 xor	 al, al
  01e75	eb 04		 jmp	 SHORT $LN8@CheckEmpty
$LN1@CheckEmpty:

; 662  : 		}
; 663  : 
; 664  : 	}

  01e77	eb a2		 jmp	 SHORT $LN5@CheckEmpty
$LN4@CheckEmpty:

; 665  : 	
; 666  : 	return 1;

  01e79	b0 01		 mov	 al, 1
$LN8@CheckEmpty:

; 667  : }

  01e7b	5f		 pop	 edi
  01e7c	5e		 pop	 esi
  01e7d	5b		 pop	 ebx
  01e7e	8b e5		 mov	 esp, ebp
  01e80	5d		 pop	 ebp
  01e81	c2 0c 00	 ret	 12			; 0000000cH
?CheckEmptySlot@CSocketOption@@QAEEPAVCItem@@GE@Z ENDP	; CSocketOption::CheckEmptySlot
; Function compile flags: /Odtp /ZI
_i$227851 = -12					; size = 4
_loc4$ = -7						; size = 1
_loc3$ = -6						; size = 1
_loc2$ = -5						; size = 1
_this$ = -4						; size = 4
_m_Type$ = 8						; size = 2
_m_Level$ = 12						; size = 1
?GetItemSocketByteOption@CSocketOption@@QAEEGE@Z PROC	; CSocketOption::GetItemSocketByteOption
; _this$ = ecx

; 672  : {

  01e90	55		 push	 ebp
  01e91	8b ec		 mov	 ebp, esp
  01e93	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01e96	53		 push	 ebx
  01e97	56		 push	 esi
  01e98	57		 push	 edi
  01e99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 673  : 	BYTE loc2 = 0;

  01e9c	c6 45 fb 00	 mov	 BYTE PTR _loc2$[ebp], 0

; 674  : 	BYTE loc3 = 0;

  01ea0	c6 45 fa 00	 mov	 BYTE PTR _loc3$[ebp], 0

; 675  : 	BYTE loc4 = 0;

  01ea4	c6 45 f9 00	 mov	 BYTE PTR _loc4$[ebp], 0

; 676  : 
; 677  : 			//lol
; 678  : 	loc3 = (m_Type % 512 - 100) / 6;

  01ea8	0f b7 45 08	 movzx	 eax, WORD PTR _m_Type$[ebp]
  01eac	25 ff 01 00 80	 and	 eax, -2147483137	; 800001ffH
  01eb1	79 07		 jns	 SHORT $LN7@GetItemSoc
  01eb3	48		 dec	 eax
  01eb4	0d 00 fe ff ff	 or	 eax, -512		; fffffe00H
  01eb9	40		 inc	 eax
$LN7@GetItemSoc:
  01eba	83 e8 64	 sub	 eax, 100		; 00000064H
  01ebd	99		 cdq
  01ebe	b9 06 00 00 00	 mov	 ecx, 6
  01ec3	f7 f9		 idiv	 ecx
  01ec5	88 45 fa	 mov	 BYTE PTR _loc3$[ebp], al

; 679  : 	loc2 = (m_Type % 512 - 100) % 6 + 1;

  01ec8	0f b7 45 08	 movzx	 eax, WORD PTR _m_Type$[ebp]
  01ecc	25 ff 01 00 80	 and	 eax, -2147483137	; 800001ffH
  01ed1	79 07		 jns	 SHORT $LN8@GetItemSoc
  01ed3	48		 dec	 eax
  01ed4	0d 00 fe ff ff	 or	 eax, -512		; fffffe00H
  01ed9	40		 inc	 eax
$LN8@GetItemSoc:
  01eda	83 e8 64	 sub	 eax, 100		; 00000064H
  01edd	99		 cdq
  01ede	b9 06 00 00 00	 mov	 ecx, 6
  01ee3	f7 f9		 idiv	 ecx
  01ee5	83 c2 01	 add	 edx, 1
  01ee8	88 55 fb	 mov	 BYTE PTR _loc2$[ebp], dl

; 680  : 	
; 681  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  01eeb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$227851[ebp], 0
  01ef2	eb 09		 jmp	 SHORT $LN4@GetItemSoc
$LN3@GetItemSoc:
  01ef4	8b 45 f4	 mov	 eax, DWORD PTR _i$227851[ebp]
  01ef7	83 c0 01	 add	 eax, 1
  01efa	89 45 f4	 mov	 DWORD PTR _i$227851[ebp], eax
$LN4@GetItemSoc:
  01efd	83 7d f4 32	 cmp	 DWORD PTR _i$227851[ebp], 50 ; 00000032H
  01f01	7d 4d		 jge	 SHORT $LN2@GetItemSoc

; 682  : 	{
; 683  : 		if(	this->SocketSeed[i].m_btElementIndex == loc2 && this->SocketSeed[i].m_btItemLevel == m_Level)

  01f03	8b 45 f4	 mov	 eax, DWORD PTR _i$227851[ebp]
  01f06	6b c0 14	 imul	 eax, 20			; 00000014H
  01f09	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f0c	0f b6 54 01 05	 movzx	 edx, BYTE PTR [ecx+eax+5]
  01f11	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  01f15	3b d0		 cmp	 edx, eax
  01f17	75 35		 jne	 SHORT $LN1@GetItemSoc
  01f19	8b 45 f4	 mov	 eax, DWORD PTR _i$227851[ebp]
  01f1c	6b c0 14	 imul	 eax, 20			; 00000014H
  01f1f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f22	0f b6 54 01 06	 movzx	 edx, BYTE PTR [ecx+eax+6]
  01f27	0f b6 45 0c	 movzx	 eax, BYTE PTR _m_Level$[ebp]
  01f2b	3b d0		 cmp	 edx, eax
  01f2d	75 1f		 jne	 SHORT $LN1@GetItemSoc

; 684  : 		{
; 685  : 			loc4 = loc3 * 50 + this->SocketSeed[i].m_btOptionIndex; //SOCKET BYTE ON ITEM BINARY

  01f2f	0f b6 45 fa	 movzx	 eax, BYTE PTR _loc3$[ebp]
  01f33	6b c0 32	 imul	 eax, 50			; 00000032H
  01f36	8b 4d f4	 mov	 ecx, DWORD PTR _i$227851[ebp]
  01f39	6b c9 14	 imul	 ecx, 20			; 00000014H
  01f3c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01f3f	0f b6 4c 0a 04	 movzx	 ecx, BYTE PTR [edx+ecx+4]
  01f44	03 c1		 add	 eax, ecx
  01f46	88 45 f9	 mov	 BYTE PTR _loc4$[ebp], al

; 686  : 
; 687  : 			return loc4;

  01f49	8a 45 f9	 mov	 al, BYTE PTR _loc4$[ebp]
  01f4c	eb 04		 jmp	 SHORT $LN5@GetItemSoc
$LN1@GetItemSoc:

; 688  : 		}
; 689  : 	}

  01f4e	eb a4		 jmp	 SHORT $LN3@GetItemSoc
$LN2@GetItemSoc:

; 690  : 	return -1;

  01f50	0c ff		 or	 al, 255			; 000000ffH
$LN5@GetItemSoc:

; 691  : }

  01f52	5f		 pop	 edi
  01f53	5e		 pop	 esi
  01f54	5b		 pop	 ebx
  01f55	8b e5		 mov	 esp, ebp
  01f57	5d		 pop	 ebp
  01f58	c2 08 00	 ret	 8
?GetItemSocketByteOption@CSocketOption@@QAEEGE@Z ENDP	; CSocketOption::GetItemSocketByteOption
_TEXT	ENDS
PUBLIC	?GetValue@CSocketOption@@QAEHE@Z		; CSocketOption::GetValue
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?GetItemIndex@CSeedSphere@@QAEHXZ:PROC		; CSeedSphere::GetItemIndex
xdata$x	SEGMENT
__unwindtable$?GetValue@CSocketOption@@QAEHE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetValue@CSocketOption@@QAEHE@Z$0
__ehfuncinfo$?GetValue@CSocketOption@@QAEHE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetValue@CSocketOption@@QAEHE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T228586 = -120						; size = 4
$T228587 = -116						; size = 4
_loc13$ = -48						; size = 4
_SeedSphere$ = -44					; size = 16
_lpSphere$ = -28					; size = 4
_lpSeed$ = -24						; size = 4
_loc6$ = -18						; size = 1
_loc5$ = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 1
?GetValue@CSocketOption@@QAEHE@Z PROC			; CSocketOption::GetValue
; _this$ = ecx

; 696  : {

  01f60	55		 push	 ebp
  01f61	8b ec		 mov	 ebp, esp
  01f63	6a ff		 push	 -1
  01f65	68 00 00 00 00	 push	 __ehhandler$?GetValue@CSocketOption@@QAEHE@Z
  01f6a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  01f70	50		 push	 eax
  01f71	83 ec 6c	 sub	 esp, 108		; 0000006cH
  01f74	53		 push	 ebx
  01f75	56		 push	 esi
  01f76	57		 push	 edi
  01f77	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01f7c	33 c5		 xor	 eax, ebp
  01f7e	50		 push	 eax
  01f7f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  01f82	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  01f88	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 697  : 	BYTE loc5 = 0;

  01f8b	c6 45 ef 00	 mov	 BYTE PTR _loc5$[ebp], 0

; 698  : 	BYTE loc6 = 0;

  01f8f	c6 45 ee 00	 mov	 BYTE PTR _loc6$[ebp], 0

; 699  : 	
; 700  : 	CSeed * lpSeed = NULL;//loc7

  01f93	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _lpSeed$[ebp], 0

; 701  : 	CSphere * lpSphere = NULL;

  01f9a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _lpSphere$[ebp], 0

; 702  : 
; 703  : 	CSeedSphere SeedSphere;//loc1

  01fa1	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  01fa4	e8 00 00 00 00	 call	 ??0CSeedSphere@@QAE@XZ	; CSeedSphere::CSeedSphere
  01fa9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 704  : 
; 705  : 	int loc13 = 0;

  01fb0	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _loc13$[ebp], 0

; 706  : 
; 707  : 	loc5 = index % 50;

  01fb7	0f b6 45 08	 movzx	 eax, BYTE PTR _index$[ebp]
  01fbb	99		 cdq
  01fbc	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  01fc1	f7 f9		 idiv	 ecx
  01fc3	88 55 ef	 mov	 BYTE PTR _loc5$[ebp], dl

; 708  : 	loc6 = (index - loc5) / 50 + 1;

  01fc6	0f b6 45 08	 movzx	 eax, BYTE PTR _index$[ebp]
  01fca	0f b6 4d ef	 movzx	 ecx, BYTE PTR _loc5$[ebp]
  01fce	2b c1		 sub	 eax, ecx
  01fd0	99		 cdq
  01fd1	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  01fd6	f7 f9		 idiv	 ecx
  01fd8	83 c0 01	 add	 eax, 1
  01fdb	88 45 ee	 mov	 BYTE PTR _loc6$[ebp], al

; 709  : 	
; 710  : 	lpSeed = this->GetSeedData(loc5);

  01fde	0f b6 45 ef	 movzx	 eax, BYTE PTR _loc5$[ebp]
  01fe2	50		 push	 eax
  01fe3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01fe6	e8 00 00 00 00	 call	 ?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ; CSocketOption::GetSeedData
  01feb	89 45 e8	 mov	 DWORD PTR _lpSeed$[ebp], eax

; 711  : 
; 712  : 	if( lpSeed == NULL)

  01fee	83 7d e8 00	 cmp	 DWORD PTR _lpSeed$[ebp], 0
  01ff2	75 1b		 jne	 SHORT $LN1@GetValue

; 713  : 	{
; 714  : 		return NULL;

  01ff4	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T228586[ebp], 0
  01ffb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02002	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  02005	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  0200a	8b 45 88	 mov	 eax, DWORD PTR $T228586[ebp]
  0200d	eb 3d		 jmp	 SHORT $LN2@GetValue
$LN1@GetValue:

; 715  : 	}
; 716  : 	
; 717  : 	SeedSphere.SetInfo(lpSeed, loc6);

  0200f	0f b6 45 ee	 movzx	 eax, BYTE PTR _loc6$[ebp]
  02013	50		 push	 eax
  02014	8b 4d e8	 mov	 ecx, DWORD PTR _lpSeed$[ebp]
  02017	51		 push	 ecx
  02018	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  0201b	e8 00 00 00 00	 call	 ?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z ; CSeedSphere::SetInfo

; 718  : 	
; 719  : 	loc13 = ItemAttribute[SeedSphere.GetItemIndex()].BuyMoney;

  02020	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  02023	e8 00 00 00 00	 call	 ?GetItemIndex@CSeedSphere@@QAEHXZ ; CSeedSphere::GetItemIndex
  02028	6b c0 70	 imul	 eax, 112		; 00000070H
  0202b	8b 80 50 00 00
	00		 mov	 eax, DWORD PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+80]
  02031	89 45 d0	 mov	 DWORD PTR _loc13$[ebp], eax

; 720  : 		
; 721  : 	return loc13;

  02034	8b 45 d0	 mov	 eax, DWORD PTR _loc13$[ebp]
  02037	89 45 8c	 mov	 DWORD PTR $T228587[ebp], eax
  0203a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02041	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  02044	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  02049	8b 45 8c	 mov	 eax, DWORD PTR $T228587[ebp]
$LN2@GetValue:

; 722  : }

  0204c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0204f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  02056	59		 pop	 ecx
  02057	5f		 pop	 edi
  02058	5e		 pop	 esi
  02059	5b		 pop	 ebx
  0205a	8b e5		 mov	 esp, ebp
  0205c	5d		 pop	 ebp
  0205d	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetValue@CSocketOption@@QAEHE@Z$0:
  000ed	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  000f0	e9 00 00 00 00	 jmp	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
__ehhandler$?GetValue@CSocketOption@@QAEHE@Z:
  000f5	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000f9	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000fc	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  000ff	33 c8		 xor	 ecx, eax
  00101	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00106	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetValue@CSocketOption@@QAEHE@Z
  0010b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetValue@CSocketOption@@QAEHE@Z ENDP			; CSocketOption::GetValue
PUBLIC	?GetElementIndex@CSocketOption@@QAEEE@Z		; CSocketOption::GetElementIndex
PUBLIC	?CheckItemElementInfo@CSocketOption@@QAEEPAVCItem@@E@Z ; CSocketOption::CheckItemElementInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv130 = -76						; size = 4
tv87 = -76						; size = 4
_loc4$ = -7						; size = 1
_loc3$ = -6						; size = 1
_loc2$ = -5						; size = 1
_this$ = -4						; size = 4
_pItem$ = 8						; size = 4
_index$ = 12						; size = 1
?CheckItemElementInfo@CSocketOption@@QAEEPAVCItem@@E@Z PROC ; CSocketOption::CheckItemElementInfo
; _this$ = ecx

; 726  : {

  02060	55		 push	 ebp
  02061	8b ec		 mov	 ebp, esp
  02063	83 ec 4c	 sub	 esp, 76			; 0000004cH
  02066	53		 push	 ebx
  02067	56		 push	 esi
  02068	57		 push	 edi
  02069	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 727  : 	if(this->IsActive(pItem) == 0)

  0206c	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0206f	50		 push	 eax
  02070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02073	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  02078	0f b6 c8	 movzx	 ecx, al
  0207b	85 c9		 test	 ecx, ecx
  0207d	75 07		 jne	 SHORT $LN11@CheckItemE

; 728  : 	{
; 729  : 		return 0;

  0207f	32 c0		 xor	 al, al
  02081	e9 bb 00 00 00	 jmp	 $LN12@CheckItemE
$LN11@CheckItemE:

; 730  : 	}
; 731  : 
; 732  : 	BYTE loc2 = 0;

  02086	c6 45 fb 00	 mov	 BYTE PTR _loc2$[ebp], 0

; 733  : 	BYTE loc3 = 0;

  0208a	c6 45 fa 00	 mov	 BYTE PTR _loc3$[ebp], 0

; 734  : 	BYTE loc4 = 0;

  0208e	c6 45 f9 00	 mov	 BYTE PTR _loc4$[ebp], 0

; 735  : 
; 736  : 	loc3 = pItem->m_Type % 512;//

  02092	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  02095	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  02099	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  0209f	79 08		 jns	 SHORT $LN14@CheckItemE
  020a1	49		 dec	 ecx
  020a2	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  020a8	41		 inc	 ecx
$LN14@CheckItemE:
  020a9	88 4d fa	 mov	 BYTE PTR _loc3$[ebp], cl

; 737  : 	loc2 = (pItem->m_Type - loc3) / 512;

  020ac	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  020af	0f bf 40 06	 movsx	 eax, WORD PTR [eax+6]
  020b3	0f b6 4d fa	 movzx	 ecx, BYTE PTR _loc3$[ebp]
  020b7	2b c1		 sub	 eax, ecx
  020b9	99		 cdq
  020ba	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  020c0	03 c2		 add	 eax, edx
  020c2	c1 f8 09	 sar	 eax, 9
  020c5	88 45 fb	 mov	 BYTE PTR _loc2$[ebp], al

; 738  : 	loc4 = this->GetElementIndex(index);

  020c8	0f b6 45 0c	 movzx	 eax, BYTE PTR _index$[ebp]
  020cc	50		 push	 eax
  020cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020d0	e8 00 00 00 00	 call	 ?GetElementIndex@CSocketOption@@QAEEE@Z ; CSocketOption::GetElementIndex
  020d5	88 45 f9	 mov	 BYTE PTR _loc4$[ebp], al

; 739  : 
; 740  : 	if(loc2 >= 0 && loc2 <= 5)

  020d8	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  020dc	85 c0		 test	 eax, eax
  020de	7c 29		 jl	 SHORT $LN10@CheckItemE
  020e0	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  020e4	83 f8 05	 cmp	 eax, 5
  020e7	7f 20		 jg	 SHORT $LN10@CheckItemE

; 741  : 	{
; 742  : 		switch(loc4)

  020e9	8a 45 f9	 mov	 al, BYTE PTR _loc4$[ebp]
  020ec	88 45 b4	 mov	 BYTE PTR tv87[ebp], al
  020ef	80 7d b4 01	 cmp	 BYTE PTR tv87[ebp], 1
  020f3	74 0e		 je	 SHORT $LN7@CheckItemE
  020f5	80 7d b4 03	 cmp	 BYTE PTR tv87[ebp], 3
  020f9	74 08		 je	 SHORT $LN7@CheckItemE
  020fb	80 7d b4 05	 cmp	 BYTE PTR tv87[ebp], 5
  020ff	74 02		 je	 SHORT $LN7@CheckItemE
  02101	eb 04		 jmp	 SHORT $LN8@CheckItemE
$LN7@CheckItemE:

; 743  : 		{
; 744  : 		case 1:
; 745  : 		case 3:
; 746  : 		case 5:
; 747  : 			return 1;

  02103	b0 01		 mov	 al, 1
  02105	eb 3a		 jmp	 SHORT $LN12@CheckItemE
$LN8@CheckItemE:

; 748  : 		}
; 749  : 	}
; 750  : 	else if(loc2 >= 6 && loc2 <= 11)

  02107	eb 36		 jmp	 SHORT $LN6@CheckItemE
$LN10@CheckItemE:
  02109	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  0210d	83 f8 06	 cmp	 eax, 6
  02110	7c 29		 jl	 SHORT $LN5@CheckItemE
  02112	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  02116	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  02119	7f 20		 jg	 SHORT $LN5@CheckItemE

; 751  : 	{
; 752  : 		switch(loc4)

  0211b	8a 45 f9	 mov	 al, BYTE PTR _loc4$[ebp]
  0211e	88 45 b4	 mov	 BYTE PTR tv130[ebp], al
  02121	80 7d b4 02	 cmp	 BYTE PTR tv130[ebp], 2
  02125	74 0e		 je	 SHORT $LN2@CheckItemE
  02127	80 7d b4 04	 cmp	 BYTE PTR tv130[ebp], 4
  0212b	74 08		 je	 SHORT $LN2@CheckItemE
  0212d	80 7d b4 06	 cmp	 BYTE PTR tv130[ebp], 6
  02131	74 02		 je	 SHORT $LN2@CheckItemE
  02133	eb 04		 jmp	 SHORT $LN3@CheckItemE
$LN2@CheckItemE:

; 753  : 		{
; 754  : 		case 2:
; 755  : 		case 4:
; 756  : 		case 6:
; 757  : 			return 1;

  02135	b0 01		 mov	 al, 1
  02137	eb 08		 jmp	 SHORT $LN12@CheckItemE
$LN3@CheckItemE:

; 758  : 		}
; 759  : 
; 760  : 	}
; 761  : 	else

  02139	eb 04		 jmp	 SHORT $LN6@CheckItemE
$LN5@CheckItemE:

; 762  : 	{
; 763  : 		return 0;

  0213b	32 c0		 xor	 al, al
  0213d	eb 02		 jmp	 SHORT $LN12@CheckItemE
$LN6@CheckItemE:

; 764  : 	}
; 765  : 
; 766  : 	return 0;

  0213f	32 c0		 xor	 al, al
$LN12@CheckItemE:

; 767  : }

  02141	5f		 pop	 edi
  02142	5e		 pop	 esi
  02143	5b		 pop	 ebx
  02144	8b e5		 mov	 esp, ebp
  02146	5d		 pop	 ebp
  02147	c2 08 00	 ret	 8
?CheckItemElementInfo@CSocketOption@@QAEEPAVCItem@@E@Z ENDP ; CSocketOption::CheckItemElementInfo
_TEXT	ENDS
PUBLIC	?CheckMapNumber@CSocketOption@@QAEEH@Z		; CSocketOption::CheckMapNumber
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_MapNumber$ = 8						; size = 4
?CheckMapNumber@CSocketOption@@QAEEH@Z PROC		; CSocketOption::CheckMapNumber
; _this$ = ecx

; 771  : {

  02150	55		 push	 ebp
  02151	8b ec		 mov	 ebp, esp
  02153	83 ec 48	 sub	 esp, 72			; 00000048H
  02156	53		 push	 ebx
  02157	56		 push	 esi
  02158	57		 push	 edi
  02159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 772  : 	switch(MapNumber)

  0215c	8b 45 08	 mov	 eax, DWORD PTR _MapNumber$[ebp]
  0215f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  02162	83 7d b8 39	 cmp	 DWORD PTR tv64[ebp], 57	; 00000039H
  02166	7c 0c		 jl	 SHORT $LN2@CheckMapNu
  02168	83 7d b8 3a	 cmp	 DWORD PTR tv64[ebp], 58	; 0000003aH
  0216c	7e 02		 jle	 SHORT $LN1@CheckMapNu
  0216e	eb 04		 jmp	 SHORT $LN2@CheckMapNu
$LN1@CheckMapNu:

; 773  : 	{
; 774  : 	case MAP_INDEX_RAKLION:
; 775  : 	case MAP_INDEX_RAKLION_BOSS:
; 776  : 		return 1;

  02170	b0 01		 mov	 al, 1
  02172	eb 02		 jmp	 SHORT $LN4@CheckMapNu
$LN2@CheckMapNu:

; 777  : 	}
; 778  : 
; 779  : 	return 0;

  02174	32 c0		 xor	 al, al
$LN4@CheckMapNu:

; 780  : }

  02176	5f		 pop	 edi
  02177	5e		 pop	 esi
  02178	5b		 pop	 ebx
  02179	8b e5		 mov	 esp, ebp
  0217b	5d		 pop	 ebp
  0217c	c2 04 00	 ret	 4
?CheckMapNumber@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::CheckMapNumber
_TEXT	ENDS
PUBLIC	?GetSphereItemIndex@CSocketOption@@QAEHH@Z	; CSocketOption::GetSphereItemIndex
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227918 = -16						; size = 4
_loc3$ = -12						; size = 4
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
_Level$ = 8						; size = 4
?GetSphereItemIndex@CSocketOption@@QAEHH@Z PROC		; CSocketOption::GetSphereItemIndex
; _this$ = ecx

; 784  : {

  02180	55		 push	 ebp
  02181	8b ec		 mov	 ebp, esp
  02183	83 ec 50	 sub	 esp, 80			; 00000050H
  02186	53		 push	 ebx
  02187	56		 push	 esi
  02188	57		 push	 edi
  02189	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 785  : 	int loc2 = -1;

  0218c	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _loc2$[ebp], -1

; 786  : 	int loc3 = 0;

  02193	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 0

; 787  : 
; 788  : 	if(this->bSphereDrop != TRUE)

  0219a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0219d	83 b8 30 05 00
	00 01		 cmp	 DWORD PTR [eax+1328], 1
  021a4	74 08		 je	 SHORT $LN15@GetSphereI

; 789  : 	{
; 790  : 		return loc2;

  021a6	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  021a9	e9 fe 00 00 00	 jmp	 $LN16@GetSphereI
$LN15@GetSphereI:

; 791  : 	}
; 792  : 	
; 793  : 	if(this->iSphereDropLevel[SOCKET_SLOT_5] != 0 && this->iSphereDropLevel[SOCKET_SLOT_5] <= Level)

  021ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021b1	83 b8 58 05 00
	00 00		 cmp	 DWORD PTR [eax+1368], 0
  021b8	74 1a		 je	 SHORT $LN14@GetSphereI
  021ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021bd	8b 88 58 05 00
	00		 mov	 ecx, DWORD PTR [eax+1368]
  021c3	3b 4d 08	 cmp	 ecx, DWORD PTR _Level$[ebp]
  021c6	7f 0c		 jg	 SHORT $LN14@GetSphereI

; 794  : 	{
; 795  : 		loc3 = 5;

  021c8	c7 45 f4 05 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 5
  021cf	e9 91 00 00 00	 jmp	 $LN13@GetSphereI
$LN14@GetSphereI:

; 796  : 	}
; 797  : 	else if(this->iSphereDropLevel[SOCKET_SLOT_4] != 0 && this->iSphereDropLevel[SOCKET_SLOT_4] <= Level)

  021d4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021d7	83 b8 54 05 00
	00 00		 cmp	 DWORD PTR [eax+1364], 0
  021de	74 17		 je	 SHORT $LN12@GetSphereI
  021e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021e3	8b 88 54 05 00
	00		 mov	 ecx, DWORD PTR [eax+1364]
  021e9	3b 4d 08	 cmp	 ecx, DWORD PTR _Level$[ebp]
  021ec	7f 09		 jg	 SHORT $LN12@GetSphereI

; 798  : 	{
; 799  : 		loc3 = 4;

  021ee	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 4
  021f5	eb 6e		 jmp	 SHORT $LN13@GetSphereI
$LN12@GetSphereI:

; 800  : 	}
; 801  : 	else if(this->iSphereDropLevel[SOCKET_SLOT_3] != 0 && this->iSphereDropLevel[SOCKET_SLOT_3] <= Level)

  021f7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021fa	83 b8 50 05 00
	00 00		 cmp	 DWORD PTR [eax+1360], 0
  02201	74 17		 je	 SHORT $LN10@GetSphereI
  02203	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02206	8b 88 50 05 00
	00		 mov	 ecx, DWORD PTR [eax+1360]
  0220c	3b 4d 08	 cmp	 ecx, DWORD PTR _Level$[ebp]
  0220f	7f 09		 jg	 SHORT $LN10@GetSphereI

; 802  : 	{
; 803  : 		loc3 = 3;

  02211	c7 45 f4 03 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 3
  02218	eb 4b		 jmp	 SHORT $LN13@GetSphereI
$LN10@GetSphereI:

; 804  : 	}
; 805  : 	else if(this->iSphereDropLevel[SOCKET_SLOT_2] != 0 && this->iSphereDropLevel[SOCKET_SLOT_2] <= Level)

  0221a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0221d	83 b8 4c 05 00
	00 00		 cmp	 DWORD PTR [eax+1356], 0
  02224	74 17		 je	 SHORT $LN8@GetSphereI
  02226	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02229	8b 88 4c 05 00
	00		 mov	 ecx, DWORD PTR [eax+1356]
  0222f	3b 4d 08	 cmp	 ecx, DWORD PTR _Level$[ebp]
  02232	7f 09		 jg	 SHORT $LN8@GetSphereI

; 806  : 	{
; 807  : 		loc3 = 2;

  02234	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 2
  0223b	eb 28		 jmp	 SHORT $LN13@GetSphereI
$LN8@GetSphereI:

; 808  : 	}
; 809  : 	else if(this->iSphereDropLevel[SOCKET_SLOT_1] != 0 && this->iSphereDropLevel[SOCKET_SLOT_1] <= Level)

  0223d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02240	83 b8 48 05 00
	00 00		 cmp	 DWORD PTR [eax+1352], 0
  02247	74 17		 je	 SHORT $LN6@GetSphereI
  02249	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0224c	8b 88 48 05 00
	00		 mov	 ecx, DWORD PTR [eax+1352]
  02252	3b 4d 08	 cmp	 ecx, DWORD PTR _Level$[ebp]
  02255	7f 09		 jg	 SHORT $LN6@GetSphereI

; 810  : 	{
; 811  : 		loc3 = 1;

  02257	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 1

; 812  : 	}
; 813  : 	else

  0225e	eb 05		 jmp	 SHORT $LN13@GetSphereI
$LN6@GetSphereI:

; 814  : 	{
; 815  : 		return loc2;

  02260	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  02263	eb 47		 jmp	 SHORT $LN16@GetSphereI
$LN13@GetSphereI:

; 816  : 	}
; 817  : 
; 818  : 	for(int i = 0;i < loc3;i++)

  02265	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$227918[ebp], 0
  0226c	eb 09		 jmp	 SHORT $LN4@GetSphereI
$LN3@GetSphereI:
  0226e	8b 45 f0	 mov	 eax, DWORD PTR _i$227918[ebp]
  02271	83 c0 01	 add	 eax, 1
  02274	89 45 f0	 mov	 DWORD PTR _i$227918[ebp], eax
$LN4@GetSphereI:
  02277	8b 45 f0	 mov	 eax, DWORD PTR _i$227918[ebp]
  0227a	3b 45 f4	 cmp	 eax, DWORD PTR _loc3$[ebp]
  0227d	7d 2a		 jge	 SHORT $LN2@GetSphereI

; 819  : 	{
; 820  : 		if(this->iSphereDropRate[i] >= GetLargeRand()%10000)

  0227f	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  02284	33 d2		 xor	 edx, edx
  02286	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0228b	f7 f1		 div	 ecx
  0228d	8b 45 f0	 mov	 eax, DWORD PTR _i$227918[ebp]
  02290	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02293	39 94 81 34 05
	00 00		 cmp	 DWORD PTR [ecx+eax*4+1332], edx
  0229a	72 0b		 jb	 SHORT $LN1@GetSphereI

; 821  : 		{
; 822  : 			loc2 = i + ITEMGET(12,70);

  0229c	8b 45 f0	 mov	 eax, DWORD PTR _i$227918[ebp]
  0229f	05 46 18 00 00	 add	 eax, 6214		; 00001846H
  022a4	89 45 f8	 mov	 DWORD PTR _loc2$[ebp], eax
$LN1@GetSphereI:

; 823  : 		}
; 824  : 	}

  022a7	eb c5		 jmp	 SHORT $LN3@GetSphereI
$LN2@GetSphereI:

; 825  : 
; 826  : 	return loc2;

  022a9	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
$LN16@GetSphereI:

; 827  : }

  022ac	5f		 pop	 edi
  022ad	5e		 pop	 esi
  022ae	5b		 pop	 ebx
  022af	8b e5		 mov	 esp, ebp
  022b1	5d		 pop	 ebp
  022b2	c2 04 00	 ret	 4
?GetSphereItemIndex@CSocketOption@@QAEHH@Z ENDP		; CSocketOption::GetSphereItemIndex
_TEXT	ENDS
PUBLIC	?GetSocketByteOption@CSocketOption@@QAEHEE@Z	; CSocketOption::GetSocketByteOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_OptionIndex$ = 8					; size = 1
_SocketSlotCount$ = 12					; size = 1
?GetSocketByteOption@CSocketOption@@QAEHEE@Z PROC	; CSocketOption::GetSocketByteOption
; _this$ = ecx

; 831  : {

  022c0	55		 push	 ebp
  022c1	8b ec		 mov	 ebp, esp
  022c3	83 ec 44	 sub	 esp, 68			; 00000044H
  022c6	53		 push	 ebx
  022c7	56		 push	 esi
  022c8	57		 push	 edi
  022c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 832  : 	return SocketSlotCount * 50 + OptionIndex; //SOCKET BYTE ON ITEM BINARY

  022cc	0f b6 45 0c	 movzx	 eax, BYTE PTR _SocketSlotCount$[ebp]
  022d0	6b c0 32	 imul	 eax, 50			; 00000032H
  022d3	0f b6 4d 08	 movzx	 ecx, BYTE PTR _OptionIndex$[ebp]
  022d7	03 c1		 add	 eax, ecx

; 833  : }

  022d9	5f		 pop	 edi
  022da	5e		 pop	 esi
  022db	5b		 pop	 ebx
  022dc	8b e5		 mov	 esp, ebp
  022de	5d		 pop	 ebp
  022df	c2 08 00	 ret	 8
?GetSocketByteOption@CSocketOption@@QAEHEE@Z ENDP	; CSocketOption::GetSocketByteOption
_TEXT	ENDS
PUBLIC	?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z ; CSocketOption::SetSeedSphereData
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc3$ = -12						; size = 4
_lpSeed$ = -8						; size = 4
_this$ = -4						; size = 4
_lpSeedSphere$ = 8					; size = 4
_OptionIndex$ = 12					; size = 1
_SocketSlotCount$ = 16					; size = 1
?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z PROC ; CSocketOption::SetSeedSphereData
; _this$ = ecx

; 837  : {

  022f0	55		 push	 ebp
  022f1	8b ec		 mov	 ebp, esp
  022f3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  022f6	53		 push	 ebx
  022f7	56		 push	 esi
  022f8	57		 push	 edi
  022f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 838  : 	CSeed * lpSeed = NULL;

  022fc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lpSeed$[ebp], 0

; 839  : 	int loc3 = NULL;

  02303	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _loc3$[ebp], 0

; 840  : 
; 841  : 	lpSeed = this->GetSeedData(OptionIndex);

  0230a	0f b6 45 0c	 movzx	 eax, BYTE PTR _OptionIndex$[ebp]
  0230e	50		 push	 eax
  0230f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02312	e8 00 00 00 00	 call	 ?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ; CSocketOption::GetSeedData
  02317	89 45 f8	 mov	 DWORD PTR _lpSeed$[ebp], eax

; 842  : 
; 843  : 	if(lpSeed == NULL)

  0231a	83 7d f8 00	 cmp	 DWORD PTR _lpSeed$[ebp], 0
  0231e	75 04		 jne	 SHORT $LN2@SetSeedSph

; 844  : 	{
; 845  : 		return 0;

  02320	32 c0		 xor	 al, al
  02322	eb 1e		 jmp	 SHORT $LN3@SetSeedSph
$LN2@SetSeedSph:

; 846  : 	}
; 847  : 
; 848  : 	if(lpSeedSphere->SetInfo(lpSeed,SocketSlotCount) == 0)

  02324	0f b6 45 10	 movzx	 eax, BYTE PTR _SocketSlotCount$[ebp]
  02328	50		 push	 eax
  02329	8b 4d f8	 mov	 ecx, DWORD PTR _lpSeed$[ebp]
  0232c	51		 push	 ecx
  0232d	8b 4d 08	 mov	 ecx, DWORD PTR _lpSeedSphere$[ebp]
  02330	e8 00 00 00 00	 call	 ?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z ; CSeedSphere::SetInfo
  02335	0f b6 d0	 movzx	 edx, al
  02338	85 d2		 test	 edx, edx
  0233a	75 04		 jne	 SHORT $LN1@SetSeedSph

; 849  : 	{
; 850  : 		return 0;

  0233c	32 c0		 xor	 al, al
  0233e	eb 02		 jmp	 SHORT $LN3@SetSeedSph
$LN1@SetSeedSph:

; 851  : 	}
; 852  : 
; 853  : 	return 1;

  02340	b0 01		 mov	 al, 1
$LN3@SetSeedSph:

; 854  : }

  02342	5f		 pop	 edi
  02343	5e		 pop	 esi
  02344	5b		 pop	 ebx
  02345	8b e5		 mov	 esp, ebp
  02347	5d		 pop	 ebp
  02348	c2 0c 00	 ret	 12			; 0000000cH
?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z ENDP ; CSocketOption::SetSeedSphereData
; Function compile flags: /Odtp /ZI
_i$227942 = -8						; size = 4
_this$ = -4						; size = 4
_OptionIndex$ = 8					; size = 1
?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z PROC	; CSocketOption::GetSeedData
; _this$ = ecx

; 858  : {

  02350	55		 push	 ebp
  02351	8b ec		 mov	 ebp, esp
  02353	83 ec 48	 sub	 esp, 72			; 00000048H
  02356	53		 push	 ebx
  02357	56		 push	 esi
  02358	57		 push	 edi
  02359	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 859  : 	for (int i = 0; i < MAX_SEED_OPTION; i++ )

  0235c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227942[ebp], 0
  02363	eb 09		 jmp	 SHORT $LN4@GetSeedDat
$LN3@GetSeedDat:
  02365	8b 45 f8	 mov	 eax, DWORD PTR _i$227942[ebp]
  02368	83 c0 01	 add	 eax, 1
  0236b	89 45 f8	 mov	 DWORD PTR _i$227942[ebp], eax
$LN4@GetSeedDat:
  0236e	83 7d f8 32	 cmp	 DWORD PTR _i$227942[ebp], 50 ; 00000032H
  02372	7d 27		 jge	 SHORT $LN2@GetSeedDat

; 860  : 	{
; 861  : 		if ( this->SocketSeed[i].m_btOptionIndex == OptionIndex )

  02374	8b 45 f8	 mov	 eax, DWORD PTR _i$227942[ebp]
  02377	6b c0 14	 imul	 eax, 20			; 00000014H
  0237a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0237d	0f b6 54 01 04	 movzx	 edx, BYTE PTR [ecx+eax+4]
  02382	0f b6 45 08	 movzx	 eax, BYTE PTR _OptionIndex$[ebp]
  02386	3b d0		 cmp	 edx, eax
  02388	75 0f		 jne	 SHORT $LN1@GetSeedDat

; 862  : 		{
; 863  : 			return &this->SocketSeed[i];

  0238a	8b 45 f8	 mov	 eax, DWORD PTR _i$227942[ebp]
  0238d	6b c0 14	 imul	 eax, 20			; 00000014H
  02390	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02393	8d 44 01 04	 lea	 eax, DWORD PTR [ecx+eax+4]
  02397	eb 04		 jmp	 SHORT $LN5@GetSeedDat
$LN1@GetSeedDat:

; 864  : 		}
; 865  : 	}

  02399	eb ca		 jmp	 SHORT $LN3@GetSeedDat
$LN2@GetSeedDat:

; 866  : 	
; 867  : 	return 0;

  0239b	33 c0		 xor	 eax, eax
$LN5@GetSeedDat:

; 868  : }

  0239d	5f		 pop	 edi
  0239e	5e		 pop	 esi
  0239f	5b		 pop	 ebx
  023a0	8b e5		 mov	 esp, ebp
  023a2	5d		 pop	 ebp
  023a3	c2 04 00	 ret	 4
?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ENDP	; CSocketOption::GetSeedData
; Function compile flags: /Odtp /ZI
_i$227951 = -8						; size = 4
_this$ = -4						; size = 4
_level$ = 8						; size = 1
?GetSphereData@CSocketOption@@QAEPAVCSphere@@E@Z PROC	; CSocketOption::GetSphereData
; _this$ = ecx

; 872  : {

  023b0	55		 push	 ebp
  023b1	8b ec		 mov	 ebp, esp
  023b3	83 ec 48	 sub	 esp, 72			; 00000048H
  023b6	53		 push	 ebx
  023b7	56		 push	 esi
  023b8	57		 push	 edi
  023b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 873  : 	for(int i = 0; i < MAX_SOCKET_OPTION; i ++ )

  023bc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227951[ebp], 0
  023c3	eb 09		 jmp	 SHORT $LN4@GetSphereD
$LN3@GetSphereD:
  023c5	8b 45 f8	 mov	 eax, DWORD PTR _i$227951[ebp]
  023c8	83 c0 01	 add	 eax, 1
  023cb	89 45 f8	 mov	 DWORD PTR _i$227951[ebp], eax
$LN4@GetSphereD:
  023ce	83 7d f8 05	 cmp	 DWORD PTR _i$227951[ebp], 5
  023d2	7d 2d		 jge	 SHORT $LN2@GetSphereD

; 874  : 	{
; 875  : 		if(this->SocketSphere[i].m_btItemLevel == level)

  023d4	8b 45 f8	 mov	 eax, DWORD PTR _i$227951[ebp]
  023d7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  023da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  023dd	0f b6 94 01 ec
	03 00 00	 movzx	 edx, BYTE PTR [ecx+eax+1004]
  023e5	0f b6 45 08	 movzx	 eax, BYTE PTR _level$[ebp]
  023e9	3b d0		 cmp	 edx, eax
  023eb	75 12		 jne	 SHORT $LN1@GetSphereD

; 876  : 		{
; 877  : 			return &this->SocketSphere[i];

  023ed	8b 45 f8	 mov	 eax, DWORD PTR _i$227951[ebp]
  023f0	6b c0 0c	 imul	 eax, 12			; 0000000cH
  023f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  023f6	8d 84 01 ec 03
	00 00		 lea	 eax, DWORD PTR [ecx+eax+1004]
  023fd	eb 04		 jmp	 SHORT $LN5@GetSphereD
$LN1@GetSphereD:

; 878  : 		}
; 879  : 	}

  023ff	eb c4		 jmp	 SHORT $LN3@GetSphereD
$LN2@GetSphereD:

; 880  : 
; 881  : 	return 0;

  02401	33 c0		 xor	 eax, eax
$LN5@GetSphereD:

; 882  : }

  02403	5f		 pop	 edi
  02404	5e		 pop	 esi
  02405	5b		 pop	 ebx
  02406	8b e5		 mov	 esp, ebp
  02408	5d		 pop	 ebp
  02409	c2 04 00	 ret	 4
?GetSphereData@CSocketOption@@QAEPAVCSphere@@E@Z ENDP	; CSocketOption::GetSphereData
_TEXT	ENDS
PUBLIC	?SortOptionIndex@CSocketOption@@QAEEXZ		; CSocketOption::SortOptionIndex
EXTRN	?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z:PROC ; TRandomPoolMgr::GetRandomValue
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
?SortOptionIndex@CSocketOption@@QAEEXZ PROC		; CSocketOption::SortOptionIndex
; _this$ = ecx

; 886  : {

  02410	55		 push	 ebp
  02411	8b ec		 mov	 ebp, esp
  02413	83 ec 48	 sub	 esp, 72			; 00000048H
  02416	53		 push	 ebx
  02417	56		 push	 esi
  02418	57		 push	 edi
  02419	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 887  : 	int loc2 = 0;

  0241c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 0

; 888  : 
; 889  : 	loc2 = this->SocketRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  02423	6a 01		 push	 1
  02425	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02428	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  0242e	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  02433	89 45 f8	 mov	 DWORD PTR _loc2$[ebp], eax

; 890  : 
; 891  : 	return loc2;

  02436	8a 45 f8	 mov	 al, BYTE PTR _loc2$[ebp]

; 892  : }

  02439	5f		 pop	 edi
  0243a	5e		 pop	 esi
  0243b	5b		 pop	 ebx
  0243c	8b e5		 mov	 esp, ebp
  0243e	5d		 pop	 ebp
  0243f	c3		 ret	 0
?SortOptionIndex@CSocketOption@@QAEEXZ ENDP		; CSocketOption::SortOptionIndex
; Function compile flags: /Odtp /ZI
_lpSeed$ = -12						; size = 4
_loc2$ = -5						; size = 1
_this$ = -4						; size = 4
_index$ = 8						; size = 1
?GetElementIndex@CSocketOption@@QAEEE@Z PROC		; CSocketOption::GetElementIndex
; _this$ = ecx

; 896  : {

  02440	55		 push	 ebp
  02441	8b ec		 mov	 ebp, esp
  02443	83 ec 4c	 sub	 esp, 76			; 0000004cH
  02446	53		 push	 ebx
  02447	56		 push	 esi
  02448	57		 push	 edi
  02449	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 897  : 	BYTE loc2 = 0;

  0244c	c6 45 fb 00	 mov	 BYTE PTR _loc2$[ebp], 0

; 898  : 	CSeed * lpSeed = NULL;

  02450	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _lpSeed$[ebp], 0

; 899  : 
; 900  : 	loc2 = index % 50;

  02457	0f b6 45 08	 movzx	 eax, BYTE PTR _index$[ebp]
  0245b	99		 cdq
  0245c	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  02461	f7 f9		 idiv	 ecx
  02463	88 55 fb	 mov	 BYTE PTR _loc2$[ebp], dl

; 901  : 
; 902  : 	lpSeed = this->GetSeedData(loc2);

  02466	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  0246a	50		 push	 eax
  0246b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0246e	e8 00 00 00 00	 call	 ?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ; CSocketOption::GetSeedData
  02473	89 45 f4	 mov	 DWORD PTR _lpSeed$[ebp], eax

; 903  : 
; 904  : 	if(lpSeed == NULL)

  02476	83 7d f4 00	 cmp	 DWORD PTR _lpSeed$[ebp], 0
  0247a	75 04		 jne	 SHORT $LN1@GetElement

; 905  : 	{
; 906  : 		return 0;

  0247c	32 c0		 xor	 al, al
  0247e	eb 06		 jmp	 SHORT $LN2@GetElement
$LN1@GetElement:

; 907  : 	}
; 908  : 
; 909  : 	return lpSeed->m_btElementIndex;

  02480	8b 45 f4	 mov	 eax, DWORD PTR _lpSeed$[ebp]
  02483	8a 40 01	 mov	 al, BYTE PTR [eax+1]
$LN2@GetElement:

; 910  : }

  02486	5f		 pop	 edi
  02487	5e		 pop	 esi
  02488	5b		 pop	 ebx
  02489	8b e5		 mov	 esp, ebp
  0248b	5d		 pop	 ebp
  0248c	c2 04 00	 ret	 4
?GetElementIndex@CSocketOption@@QAEEE@Z ENDP		; CSocketOption::GetElementIndex
_TEXT	ENDS
PUBLIC	?GetSeedSpear@CSocketOption@@QAEPAVCSocketSphere@@E@Z ; CSocketOption::GetSeedSpear
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$227971 = -8						; size = 4
_this$ = -4						; size = 4
_OptionIndex$ = 8					; size = 1
?GetSeedSpear@CSocketOption@@QAEPAVCSocketSphere@@E@Z PROC ; CSocketOption::GetSeedSpear
; _this$ = ecx

; 914  : {

  02490	55		 push	 ebp
  02491	8b ec		 mov	 ebp, esp
  02493	83 ec 48	 sub	 esp, 72			; 00000048H
  02496	53		 push	 ebx
  02497	56		 push	 esi
  02498	57		 push	 edi
  02499	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 915  : 	for(int i = 0 ; i < MAX_SPHERE_OPTION; i ++ )

  0249c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$227971[ebp], 0
  024a3	eb 09		 jmp	 SHORT $LN4@GetSeedSpe
$LN3@GetSeedSpe:
  024a5	8b 45 f8	 mov	 eax, DWORD PTR _i$227971[ebp]
  024a8	83 c0 01	 add	 eax, 1
  024ab	89 45 f8	 mov	 DWORD PTR _i$227971[ebp], eax
$LN4@GetSeedSpe:
  024ae	83 7d f8 06	 cmp	 DWORD PTR _i$227971[ebp], 6
  024b2	7d 2d		 jge	 SHORT $LN2@GetSeedSpe

; 916  : 	{
; 917  : 		if(this->SocketSpear[i].m_btOptionIndex == OptionIndex)

  024b4	8b 45 f8	 mov	 eax, DWORD PTR _i$227971[ebp]
  024b7	6b c0 14	 imul	 eax, 20			; 00000014H
  024ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  024bd	0f b6 94 01 28
	04 00 00	 movzx	 edx, BYTE PTR [ecx+eax+1064]
  024c5	0f b6 45 08	 movzx	 eax, BYTE PTR _OptionIndex$[ebp]
  024c9	3b d0		 cmp	 edx, eax
  024cb	75 12		 jne	 SHORT $LN1@GetSeedSpe

; 918  : 		{
; 919  : 			return &this->SocketSpear[i];

  024cd	8b 45 f8	 mov	 eax, DWORD PTR _i$227971[ebp]
  024d0	6b c0 14	 imul	 eax, 20			; 00000014H
  024d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  024d6	8d 84 01 28 04
	00 00		 lea	 eax, DWORD PTR [ecx+eax+1064]
  024dd	eb 04		 jmp	 SHORT $LN5@GetSeedSpe
$LN1@GetSeedSpe:

; 920  : 		}
; 921  : 	}

  024df	eb c4		 jmp	 SHORT $LN3@GetSeedSpe
$LN2@GetSeedSpe:

; 922  : 
; 923  : 	return 0;

  024e1	33 c0		 xor	 eax, eax
$LN5@GetSeedSpe:

; 924  : }

  024e3	5f		 pop	 edi
  024e4	5e		 pop	 esi
  024e5	5b		 pop	 ebx
  024e6	8b e5		 mov	 esp, ebp
  024e8	5d		 pop	 ebp
  024e9	c2 04 00	 ret	 4
?GetSeedSpear@CSocketOption@@QAEPAVCSocketSphere@@E@Z ENDP ; CSocketOption::GetSeedSpear
_TEXT	ENDS
PUBLIC	?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketOption::ApplySocketEffect
PUBLIC	?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z ; CSocketOption::CalcEquipmentSocketOption
xdata$x	SEGMENT
__unwindtable$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z$0
__ehfuncinfo$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T228605 = -116						; size = 4
_n$227990 = -48						; size = 4
_i$227985 = -44						; size = 4
_SeedSphere$ = -40					; size = 16
_loc8$ = -23						; size = 1
_loc7$ = -22						; size = 1
_loc6$ = -21						; size = 1
_loc5$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpObj$ = 8						; size = 4
?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::CalcEquipmentSocketOption
; _this$ = ecx

; 928  : {

  024f0	55		 push	 ebp
  024f1	8b ec		 mov	 ebp, esp
  024f3	6a ff		 push	 -1
  024f5	68 00 00 00 00	 push	 __ehhandler$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z
  024fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  02500	50		 push	 eax
  02501	83 ec 68	 sub	 esp, 104		; 00000068H
  02504	53		 push	 ebx
  02505	56		 push	 esi
  02506	57		 push	 edi
  02507	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0250c	33 c5		 xor	 eax, ebp
  0250e	50		 push	 eax
  0250f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  02512	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  02518	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 929  : 	int loc5 = 0;

  0251b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _loc5$[ebp], 0

; 930  : 	BYTE loc6 = 0;

  02522	c6 45 eb 00	 mov	 BYTE PTR _loc6$[ebp], 0

; 931  : 	BYTE loc7 = 0;

  02526	c6 45 ea 00	 mov	 BYTE PTR _loc7$[ebp], 0

; 932  : 	BYTE loc8 = 0;

  0252a	c6 45 e9 00	 mov	 BYTE PTR _loc8$[ebp], 0

; 933  : 
; 934  : 	CSeedSphere SeedSphere;

  0252e	8d 4d d8	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  02531	e8 00 00 00 00	 call	 ??0CSeedSphere@@QAE@XZ	; CSeedSphere::CSeedSphere
  02536	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 935  : 
; 936  : 	for(int i = 0; i < INVETORY_WEAR_SIZE; i++)

  0253d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$227985[ebp], 0
  02544	eb 09		 jmp	 SHORT $LN10@CalcEquipm
$LN9@CalcEquipm:
  02546	8b 45 d4	 mov	 eax, DWORD PTR _i$227985[ebp]
  02549	83 c0 01	 add	 eax, 1
  0254c	89 45 d4	 mov	 DWORD PTR _i$227985[ebp], eax
$LN10@CalcEquipm:
  0254f	83 7d d4 0c	 cmp	 DWORD PTR _i$227985[ebp], 12 ; 0000000cH
  02553	0f 8d f0 00 00
	00		 jge	 $LN8@CalcEquipm

; 937  : 	{
; 938  : 		if(this->IsActive(&lpObj->pInventory[i]) == 0)

  02559	8b 45 d4	 mov	 eax, DWORD PTR _i$227985[ebp]
  0255c	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  02562	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02565	03 81 24 0e 00
	00		 add	 eax, DWORD PTR [ecx+3620]
  0256b	50		 push	 eax
  0256c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0256f	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  02574	0f b6 d0	 movzx	 edx, al
  02577	85 d2		 test	 edx, edx
  02579	75 02		 jne	 SHORT $LN7@CalcEquipm

; 939  : 		{
; 940  : 			continue;

  0257b	eb c9		 jmp	 SHORT $LN9@CalcEquipm
$LN7@CalcEquipm:

; 941  : 		}
; 942  : 		
; 943  : 		for(int n = 0; n < MAX_SOCKET_OPTION; n++)

  0257d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _n$227990[ebp], 0
  02584	eb 09		 jmp	 SHORT $LN6@CalcEquipm
$LN5@CalcEquipm:
  02586	8b 45 d0	 mov	 eax, DWORD PTR _n$227990[ebp]
  02589	83 c0 01	 add	 eax, 1
  0258c	89 45 d0	 mov	 DWORD PTR _n$227990[ebp], eax
$LN6@CalcEquipm:
  0258f	83 7d d0 05	 cmp	 DWORD PTR _n$227990[ebp], 5
  02593	0f 8d ab 00 00
	00		 jge	 $LN4@CalcEquipm

; 944  : 		{
; 945  : 			loc6 = lpObj->pInventory[i].m_SocketOption[n];

  02599	8b 45 d4	 mov	 eax, DWORD PTR _i$227985[ebp]
  0259c	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  025a2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  025a5	03 81 24 0e 00
	00		 add	 eax, DWORD PTR [ecx+3620]
  025ab	8b 55 d0	 mov	 edx, DWORD PTR _n$227990[ebp]
  025ae	8a 84 10 cc 00
	00 00		 mov	 al, BYTE PTR [eax+edx+204]
  025b5	88 45 eb	 mov	 BYTE PTR _loc6$[ebp], al

; 946  : 
; 947  : 			if(loc6 == 0xFF || loc6 == 0xFE)

  025b8	0f b6 45 eb	 movzx	 eax, BYTE PTR _loc6$[ebp]
  025bc	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  025c1	74 0b		 je	 SHORT $LN2@CalcEquipm
  025c3	0f b6 45 eb	 movzx	 eax, BYTE PTR _loc6$[ebp]
  025c7	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  025cc	75 02		 jne	 SHORT $LN3@CalcEquipm
$LN2@CalcEquipm:

; 948  : 			{
; 949  : 				continue;

  025ce	eb b6		 jmp	 SHORT $LN5@CalcEquipm
$LN3@CalcEquipm:

; 950  : 			}
; 951  : 
; 952  : 			loc7 = loc6 % 50;

  025d0	0f b6 45 eb	 movzx	 eax, BYTE PTR _loc6$[ebp]
  025d4	99		 cdq
  025d5	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  025da	f7 f9		 idiv	 ecx
  025dc	88 55 ea	 mov	 BYTE PTR _loc7$[ebp], dl

; 953  : 			loc8 = (loc6 - loc7 ) / 50 + 1;

  025df	0f b6 45 eb	 movzx	 eax, BYTE PTR _loc6$[ebp]
  025e3	0f b6 4d ea	 movzx	 ecx, BYTE PTR _loc7$[ebp]
  025e7	2b c1		 sub	 eax, ecx
  025e9	99		 cdq
  025ea	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  025ef	f7 f9		 idiv	 ecx
  025f1	83 c0 01	 add	 eax, 1
  025f4	88 45 e9	 mov	 BYTE PTR _loc8$[ebp], al

; 954  : 
; 955  : 			if(this->SetSeedSphereData(&SeedSphere,loc7,loc8) == 0)

  025f7	0f b6 45 e9	 movzx	 eax, BYTE PTR _loc8$[ebp]
  025fb	50		 push	 eax
  025fc	0f b6 4d ea	 movzx	 ecx, BYTE PTR _loc7$[ebp]
  02600	51		 push	 ecx
  02601	8d 55 d8	 lea	 edx, DWORD PTR _SeedSphere$[ebp]
  02604	52		 push	 edx
  02605	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02608	e8 00 00 00 00	 call	 ?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z ; CSocketOption::SetSeedSphereData
  0260d	0f b6 c0	 movzx	 eax, al
  02610	85 c0		 test	 eax, eax
  02612	75 05		 jne	 SHORT $LN1@CalcEquipm

; 956  : 			{
; 957  : 				continue;

  02614	e9 6d ff ff ff	 jmp	 $LN5@CalcEquipm
$LN1@CalcEquipm:

; 958  : 			}
; 959  : 			
; 960  : 			this->ApplySocketEffect(lpObj,1,loc7,SeedSphere.m_btOptionType,SeedSphere.m_wSocketSlot);

  02619	0f b7 45 e2	 movzx	 eax, WORD PTR _SeedSphere$[ebp+10]
  0261d	50		 push	 eax
  0261e	0f b6 4d e1	 movzx	 ecx, BYTE PTR _SeedSphere$[ebp+9]
  02622	51		 push	 ecx
  02623	0f b6 55 ea	 movzx	 edx, BYTE PTR _loc7$[ebp]
  02627	52		 push	 edx
  02628	6a 01		 push	 1
  0262a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0262d	50		 push	 eax
  0262e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02631	e8 00 00 00 00	 call	 ?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketOption::ApplySocketEffect

; 961  : 
; 962  : 			loc5++;

  02636	8b 45 ec	 mov	 eax, DWORD PTR _loc5$[ebp]
  02639	83 c0 01	 add	 eax, 1
  0263c	89 45 ec	 mov	 DWORD PTR _loc5$[ebp], eax

; 963  : 		}

  0263f	e9 42 ff ff ff	 jmp	 $LN5@CalcEquipm
$LN4@CalcEquipm:

; 964  : 
; 965  : 	}

  02644	e9 fd fe ff ff	 jmp	 $LN9@CalcEquipm
$LN8@CalcEquipm:

; 966  : 
; 967  : 	return loc5;

  02649	8b 45 ec	 mov	 eax, DWORD PTR _loc5$[ebp]
  0264c	89 45 8c	 mov	 DWORD PTR $T228605[ebp], eax
  0264f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02656	8d 4d d8	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  02659	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  0265e	8b 45 8c	 mov	 eax, DWORD PTR $T228605[ebp]

; 968  : }

  02661	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02664	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0266b	59		 pop	 ecx
  0266c	5f		 pop	 edi
  0266d	5e		 pop	 esi
  0266e	5b		 pop	 ebx
  0266f	8b e5		 mov	 esp, ebp
  02671	5d		 pop	 ebp
  02672	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z$0:
  00110	8d 4d d8	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  00113	e9 00 00 00 00	 jmp	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
__ehhandler$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z:
  00118	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0011c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0011f	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00122	33 c8		 xor	 ecx, eax
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z
  0012e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::CalcEquipmentSocketOption
PUBLIC	??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@ ; `string'
PUBLIC	?SetBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::SetBonusSocketOption
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@
CONST	SEGMENT
??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@ DB '['
	DB	'SocketItem] [%s][%s] Set Bonus Socket Option - OptionIndex : '
	DB	'%d, EffectType : %d, OptionType : %d, OptionValue : %d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$228004 = -16						; size = 4
_lpSeedSpear$ = -12					; size = 4
_loc2$ = -5						; size = 1
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?SetBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::SetBonusSocketOption
; _this$ = ecx

; 973  : {

  02680	55		 push	 ebp
  02681	8b ec		 mov	 ebp, esp
  02683	83 ec 50	 sub	 esp, 80			; 00000050H
  02686	53		 push	 ebx
  02687	56		 push	 esi
  02688	57		 push	 edi
  02689	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 974  : 	BYTE loc2 = 0;

  0268c	c6 45 fb 00	 mov	 BYTE PTR _loc2$[ebp], 0

; 975  : 	CSocketSphere * lpSeedSpear = NULL;

  02690	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _lpSeedSpear$[ebp], 0

; 976  : 
; 977  : 	for(int i = 0;i < INVETORY_WEAR_SIZE; i ++)

  02697	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$228004[ebp], 0
  0269e	eb 09		 jmp	 SHORT $LN7@SetBonusSo
$LN6@SetBonusSo:
  026a0	8b 45 f0	 mov	 eax, DWORD PTR _i$228004[ebp]
  026a3	83 c0 01	 add	 eax, 1
  026a6	89 45 f0	 mov	 DWORD PTR _i$228004[ebp], eax
$LN7@SetBonusSo:
  026a9	83 7d f0 0c	 cmp	 DWORD PTR _i$228004[ebp], 12 ; 0000000cH
  026ad	0f 8d dd 00 00
	00		 jge	 $LN8@SetBonusSo

; 978  : 	{
; 979  : 		if(this->IsActive(&lpObj->pInventory[i]) == 0)

  026b3	8b 45 f0	 mov	 eax, DWORD PTR _i$228004[ebp]
  026b6	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  026bc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  026bf	03 81 24 0e 00
	00		 add	 eax, DWORD PTR [ecx+3620]
  026c5	50		 push	 eax
  026c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  026c9	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  026ce	0f b6 d0	 movzx	 edx, al
  026d1	85 d2		 test	 edx, edx
  026d3	75 02		 jne	 SHORT $LN4@SetBonusSo

; 980  : 		{
; 981  : 			continue;

  026d5	eb c9		 jmp	 SHORT $LN6@SetBonusSo
$LN4@SetBonusSo:

; 982  : 		}
; 983  : 
; 984  : 		loc2 = lpObj->pInventory[i].m_SocketOptionIndex;

  026d7	8b 45 f0	 mov	 eax, DWORD PTR _i$228004[ebp]
  026da	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  026e0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  026e3	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  026e9	8a 84 02 cb 00
	00 00		 mov	 al, BYTE PTR [edx+eax+203]
  026f0	88 45 fb	 mov	 BYTE PTR _loc2$[ebp], al

; 985  : 
; 986  : 		if(loc2 == 0xFF || loc2 == 0xFE)

  026f3	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  026f7	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  026fc	74 0b		 je	 SHORT $LN2@SetBonusSo
  026fe	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  02702	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  02707	75 02		 jne	 SHORT $LN3@SetBonusSo
$LN2@SetBonusSo:

; 987  : 		{
; 988  : 			continue;

  02709	eb 95		 jmp	 SHORT $LN6@SetBonusSo
$LN3@SetBonusSo:

; 989  : 		}
; 990  : 
; 991  : 		lpSeedSpear = this->GetSeedSpear(loc2);

  0270b	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  0270f	50		 push	 eax
  02710	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02713	e8 00 00 00 00	 call	 ?GetSeedSpear@CSocketOption@@QAEPAVCSocketSphere@@E@Z ; CSocketOption::GetSeedSpear
  02718	89 45 f4	 mov	 DWORD PTR _lpSeedSpear$[ebp], eax

; 992  : 
; 993  : 		if(lpSeedSpear == NULL)

  0271b	83 7d f4 00	 cmp	 DWORD PTR _lpSeedSpear$[ebp], 0
  0271f	75 05		 jne	 SHORT $LN1@SetBonusSo

; 994  : 		{
; 995  : 			continue;

  02721	e9 7a ff ff ff	 jmp	 $LN6@SetBonusSo
$LN1@SetBonusSo:

; 996  : 		}
; 997  : 
; 998  : 		LogAddTD("[SocketItem] [%s][%s] Set Bonus Socket Option - OptionIndex : %d, EffectType : %d, OptionType : %d, OptionValue : %d",lpObj->AccountID,lpObj->Name,lpSeedSpear->m_btOptionIndex,lpSeedSpear->m_btEffectType,lpSeedSpear->m_btOptionType,lpSeedSpear->m_btOptionValue);

  02726	8b 45 f4	 mov	 eax, DWORD PTR _lpSeedSpear$[ebp]
  02729	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  0272d	51		 push	 ecx
  0272e	8b 55 f4	 mov	 edx, DWORD PTR _lpSeedSpear$[ebp]
  02731	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  02735	50		 push	 eax
  02736	8b 4d f4	 mov	 ecx, DWORD PTR _lpSeedSpear$[ebp]
  02739	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  0273d	52		 push	 edx
  0273e	8b 45 f4	 mov	 eax, DWORD PTR _lpSeedSpear$[ebp]
  02741	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  02744	51		 push	 ecx
  02745	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02748	83 c2 77	 add	 edx, 119		; 00000077H
  0274b	52		 push	 edx
  0274c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0274f	83 c0 6c	 add	 eax, 108		; 0000006cH
  02752	50		 push	 eax
  02753	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@
  02758	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0275e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 999  : 
; 1000 : 		//							EffectType : %d, OptionType : %d, OptionValue : %d
; 1001 : 		this->ApplySocketEffect(lpObj,2,lpSeedSpear->m_btEffectType,lpSeedSpear->m_btOptionType,lpSeedSpear->m_btOptionValue);

  02761	8b 45 f4	 mov	 eax, DWORD PTR _lpSeedSpear$[ebp]
  02764	66 0f b6 48 05	 movzx	 cx, BYTE PTR [eax+5]
  02769	0f b7 d1	 movzx	 edx, cx
  0276c	52		 push	 edx
  0276d	8b 45 f4	 mov	 eax, DWORD PTR _lpSeedSpear$[ebp]
  02770	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  02774	51		 push	 ecx
  02775	8b 55 f4	 mov	 edx, DWORD PTR _lpSeedSpear$[ebp]
  02778	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0277c	50		 push	 eax
  0277d	6a 02		 push	 2
  0277f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02782	51		 push	 ecx
  02783	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02786	e8 00 00 00 00	 call	 ?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketOption::ApplySocketEffect

; 1002 : 	}

  0278b	e9 10 ff ff ff	 jmp	 $LN6@SetBonusSo
$LN8@SetBonusSo:

; 1003 : }

  02790	5f		 pop	 edi
  02791	5e		 pop	 esi
  02792	5b		 pop	 ebx
  02793	8b e5		 mov	 esp, ebp
  02795	5d		 pop	 ebp
  02796	c2 04 00	 ret	 4
?SetBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::SetBonusSocketOption
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetFullBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::SetFullBonusSocketOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_j$228029 = -32						; size = 4
_n$228025 = -28						; size = 4
_i$228020 = -24						; size = 4
_loc5$ = -18						; size = 1
_loc4$ = -17						; size = 1
_loc3$ = -16						; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SetFullBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::SetFullBonusSocketOption
; _this$ = ecx

; 1006 : {

  027a0	55		 push	 ebp
  027a1	8b ec		 mov	 ebp, esp
  027a3	83 ec 60	 sub	 esp, 96			; 00000060H
  027a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  027ab	33 c5		 xor	 eax, ebp
  027ad	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  027b0	53		 push	 ebx
  027b1	56		 push	 esi
  027b2	57		 push	 edi
  027b3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1007 : 	BYTE loc3[8];
; 1008 : 	BYTE loc4 = 0;

  027b6	c6 45 ef 00	 mov	 BYTE PTR _loc4$[ebp], 0

; 1009 : 	BYTE loc5 = 0;

  027ba	c6 45 ee 00	 mov	 BYTE PTR _loc5$[ebp], 0

; 1010 : 
; 1011 : 	memset(&loc3, NULL, sizeof(loc3));

  027be	6a 08		 push	 8
  027c0	6a 00		 push	 0
  027c2	8d 45 f0	 lea	 eax, DWORD PTR _loc3$[ebp]
  027c5	50		 push	 eax
  027c6	e8 00 00 00 00	 call	 _memset
  027cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1012 : 
; 1013 : 	for(int i = 0;i< 35; i++) //loc6

  027ce	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$228020[ebp], 0
  027d5	eb 09		 jmp	 SHORT $LN12@SetFullBon
$LN11@SetFullBon:
  027d7	8b 45 e8	 mov	 eax, DWORD PTR _i$228020[ebp]
  027da	83 c0 01	 add	 eax, 1
  027dd	89 45 e8	 mov	 DWORD PTR _i$228020[ebp], eax
$LN12@SetFullBon:
  027e0	83 7d e8 23	 cmp	 DWORD PTR _i$228020[ebp], 35 ; 00000023H
  027e4	7d 4d		 jge	 SHORT $LN10@SetFullBon

; 1014 : 	{
; 1015 : 		loc4 = this->GetElementIndex(lpObj->m_SocketSet[i].m_btEffectType);

  027e6	8b 45 e8	 mov	 eax, DWORD PTR _i$228020[ebp]
  027e9	6b c0 06	 imul	 eax, 6
  027ec	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  027ef	0f b6 94 01 86
	20 00 00	 movzx	 edx, BYTE PTR [ecx+eax+8326]
  027f7	52		 push	 edx
  027f8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  027fb	e8 00 00 00 00	 call	 ?GetElementIndex@CSocketOption@@QAEEE@Z ; CSocketOption::GetElementIndex
  02800	88 45 ef	 mov	 BYTE PTR _loc4$[ebp], al

; 1016 : 
; 1017 : 		if(loc4 == 0)

  02803	0f b6 45 ef	 movzx	 eax, BYTE PTR _loc4$[ebp]
  02807	85 c0		 test	 eax, eax
  02809	75 02		 jne	 SHORT $LN9@SetFullBon

; 1018 : 		{
; 1019 : 			break;

  0280b	eb 26		 jmp	 SHORT $LN10@SetFullBon
$LN9@SetFullBon:

; 1020 : 		}
; 1021 : 
; 1022 : 		loc3[loc4-1] += lpObj->m_SocketSet[i].m_btOptionCount;

  0280d	0f b6 45 ef	 movzx	 eax, BYTE PTR _loc4$[ebp]
  02811	8b 4d e8	 mov	 ecx, DWORD PTR _i$228020[ebp]
  02814	6b c9 06	 imul	 ecx, 6
  02817	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0281a	0f b6 8c 0a 8a
	20 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+8330]
  02822	0f b6 54 05 ef	 movzx	 edx, BYTE PTR _loc3$[ebp+eax-1]
  02827	03 d1		 add	 edx, ecx
  02829	0f b6 45 ef	 movzx	 eax, BYTE PTR _loc4$[ebp]
  0282d	88 54 05 ef	 mov	 BYTE PTR _loc3$[ebp+eax-1], dl

; 1023 : 	}

  02831	eb a4		 jmp	 SHORT $LN11@SetFullBon
$LN10@SetFullBon:

; 1024 : 
; 1025 : 	for(int n = 0;n< 2; n++) //loc7

  02833	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$228025[ebp], 0
  0283a	eb 09		 jmp	 SHORT $LN8@SetFullBon
$LN7@SetFullBon:
  0283c	8b 45 e4	 mov	 eax, DWORD PTR _n$228025[ebp]
  0283f	83 c0 01	 add	 eax, 1
  02842	89 45 e4	 mov	 DWORD PTR _n$228025[ebp], eax
$LN8@SetFullBon:
  02845	83 7d e4 02	 cmp	 DWORD PTR _n$228025[ebp], 2
  02849	0f 8d 9c 00 00
	00		 jge	 $LN13@SetFullBon

; 1026 : 	{
; 1027 : 		for(int j = 0;j< 6; j++) //loc8

  0284f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _j$228029[ebp], 0
  02856	eb 09		 jmp	 SHORT $LN5@SetFullBon
$LN4@SetFullBon:
  02858	8b 45 e0	 mov	 eax, DWORD PTR _j$228029[ebp]
  0285b	83 c0 01	 add	 eax, 1
  0285e	89 45 e0	 mov	 DWORD PTR _j$228029[ebp], eax
$LN5@SetFullBon:
  02861	83 7d e0 06	 cmp	 DWORD PTR _j$228029[ebp], 6
  02865	7d 2a		 jge	 SHORT $LN3@SetFullBon

; 1028 : 		{
; 1029 : 			if(this->SocketBonusOption[n].btElements[j] <= loc3[j])

  02867	8b 45 e4	 mov	 eax, DWORD PTR _n$228025[ebp]
  0286a	c1 e0 04	 shl	 eax, 4
  0286d	03 45 e0	 add	 eax, DWORD PTR _j$228029[ebp]
  02870	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02873	0f b6 94 01 a8
	04 00 00	 movzx	 edx, BYTE PTR [ecx+eax+1192]
  0287b	8b 45 e0	 mov	 eax, DWORD PTR _j$228029[ebp]
  0287e	0f b6 4c 05 f0	 movzx	 ecx, BYTE PTR _loc3$[ebp+eax]
  02883	3b d1		 cmp	 edx, ecx
  02885	7f 08		 jg	 SHORT $LN2@SetFullBon

; 1030 : 			{
; 1031 : 				loc5++;

  02887	8a 45 ee	 mov	 al, BYTE PTR _loc5$[ebp]
  0288a	04 01		 add	 al, 1
  0288c	88 45 ee	 mov	 BYTE PTR _loc5$[ebp], al
$LN2@SetFullBon:

; 1032 : 			}
; 1033 : 		}

  0288f	eb c7		 jmp	 SHORT $LN4@SetFullBon
$LN3@SetFullBon:

; 1034 : 
; 1035 : 		if(loc5 == 6)

  02891	0f b6 45 ee	 movzx	 eax, BYTE PTR _loc5$[ebp]
  02895	83 f8 06	 cmp	 eax, 6
  02898	75 48		 jne	 SHORT $LN1@SetFullBon

; 1036 : 		{
; 1037 : 			this->ApplySocketEffect(lpObj, 3, this->SocketBonusOption[n].btOption, this->SocketBonusOption[n].btType, this->SocketBonusOption[n].btIncrease);

  0289a	8b 45 e4	 mov	 eax, DWORD PTR _n$228025[ebp]
  0289d	c1 e0 04	 shl	 eax, 4
  028a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  028a3	66 0f b6 94 01
	a2 04 00 00	 movzx	 dx, BYTE PTR [ecx+eax+1186]
  028ac	0f b7 c2	 movzx	 eax, dx
  028af	50		 push	 eax
  028b0	8b 4d e4	 mov	 ecx, DWORD PTR _n$228025[ebp]
  028b3	c1 e1 04	 shl	 ecx, 4
  028b6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  028b9	0f b6 84 0a a1
	04 00 00	 movzx	 eax, BYTE PTR [edx+ecx+1185]
  028c1	50		 push	 eax
  028c2	8b 4d e4	 mov	 ecx, DWORD PTR _n$228025[ebp]
  028c5	c1 e1 04	 shl	 ecx, 4
  028c8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  028cb	0f b6 84 0a a3
	04 00 00	 movzx	 eax, BYTE PTR [edx+ecx+1187]
  028d3	50		 push	 eax
  028d4	6a 03		 push	 3
  028d6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  028d9	51		 push	 ecx
  028da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  028dd	e8 00 00 00 00	 call	 ?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketOption::ApplySocketEffect
$LN1@SetFullBon:

; 1038 : 		}
; 1039 : 		loc5 = 0;

  028e2	c6 45 ee 00	 mov	 BYTE PTR _loc5$[ebp], 0

; 1040 : 	}

  028e6	e9 51 ff ff ff	 jmp	 $LN7@SetFullBon
$LN13@SetFullBon:

; 1041 : }

  028eb	5f		 pop	 edi
  028ec	5e		 pop	 esi
  028ed	5b		 pop	 ebx
  028ee	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  028f1	33 cd		 xor	 ecx, ebp
  028f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  028f8	8b e5		 mov	 esp, ebp
  028fa	5d		 pop	 ebp
  028fb	c2 04 00	 ret	 4
?SetFullBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::SetFullBonusSocketOption
_TEXT	ENDS
PUBLIC	?ClearEquipmentSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::ClearEquipmentSocketOption
PUBLIC	?CalCharacterSocketOption@CSocketOption@@QAEEPAUOBJECTSTRUCT@@@Z ; CSocketOption::CalCharacterSocketOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?CalCharacterSocketOption@CSocketOption@@QAEEPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::CalCharacterSocketOption
; _this$ = ecx

; 1045 : {

  02900	55		 push	 ebp
  02901	8b ec		 mov	 ebp, esp
  02903	83 ec 48	 sub	 esp, 72			; 00000048H
  02906	53		 push	 ebx
  02907	56		 push	 esi
  02908	57		 push	 edi
  02909	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1046 : 	int loc2 = 0;

  0290c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 0

; 1047 : 
; 1048 : 	if(lpObj == NULL)

  02913	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  02917	75 04		 jne	 SHORT $LN4@CalCharact

; 1049 : 	{
; 1050 : 		return 0;

  02919	32 c0		 xor	 al, al
  0291b	eb 58		 jmp	 SHORT $LN5@CalCharact
$LN4@CalCharact:

; 1051 : 	}
; 1052 : 	
; 1053 : 	if(lpObj->Type != 1 || lpObj->Connected < 3)

  0291d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02920	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  02924	83 f9 01	 cmp	 ecx, 1
  02927	75 09		 jne	 SHORT $LN2@CalCharact
  02929	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0292c	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  02930	7d 04		 jge	 SHORT $LN3@CalCharact
$LN2@CalCharact:

; 1054 : 	{
; 1055 : 		return 0;

  02932	32 c0		 xor	 al, al
  02934	eb 3f		 jmp	 SHORT $LN5@CalCharact
$LN3@CalCharact:

; 1056 : 	}
; 1057 : 
; 1058 : 	this->ClearEquipmentSocketOption(lpObj);

  02936	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02939	50		 push	 eax
  0293a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0293d	e8 00 00 00 00	 call	 ?ClearEquipmentSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::ClearEquipmentSocketOption

; 1059 : 
; 1060 : 	loc2 = this->CalcEquipmentSocketOption(lpObj);

  02942	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02945	50		 push	 eax
  02946	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02949	e8 00 00 00 00	 call	 ?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z ; CSocketOption::CalcEquipmentSocketOption
  0294e	89 45 f8	 mov	 DWORD PTR _loc2$[ebp], eax

; 1061 : 
; 1062 : 	if(loc2 <= 0)

  02951	83 7d f8 00	 cmp	 DWORD PTR _loc2$[ebp], 0
  02955	7f 04		 jg	 SHORT $LN1@CalCharact

; 1063 : 	{
; 1064 : 		return 0;

  02957	32 c0		 xor	 al, al
  02959	eb 1a		 jmp	 SHORT $LN5@CalCharact
$LN1@CalCharact:

; 1065 : 	}
; 1066 : 	
; 1067 : 	this->SetBonusSocketOption(lpObj);

  0295b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0295e	50		 push	 eax
  0295f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02962	e8 00 00 00 00	 call	 ?SetBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::SetBonusSocketOption

; 1068 : 	this->SetFullBonusSocketOption(lpObj);

  02967	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0296a	50		 push	 eax
  0296b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0296e	e8 00 00 00 00	 call	 ?SetFullBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::SetFullBonusSocketOption

; 1069 : 
; 1070 : 	return 1;

  02973	b0 01		 mov	 al, 1
$LN5@CalCharact:

; 1071 : }

  02975	5f		 pop	 edi
  02976	5e		 pop	 esi
  02977	5b		 pop	 ebx
  02978	8b e5		 mov	 esp, ebp
  0297a	5d		 pop	 ebp
  0297b	c2 04 00	 ret	 4
?CalCharacterSocketOption@CSocketOption@@QAEEPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::CalCharacterSocketOption
_TEXT	ENDS
PUBLIC	?RESET@SOCKET_ITEM@@QAEXXZ			; SOCKET_ITEM::RESET
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?ClearEquipmentSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::ClearEquipmentSocketOption
; _this$ = ecx

; 1076 : {

  02980	55		 push	 ebp
  02981	8b ec		 mov	 ebp, esp
  02983	83 ec 48	 sub	 esp, 72			; 00000048H
  02986	53		 push	 ebx
  02987	56		 push	 esi
  02988	57		 push	 edi
  02989	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1077 : 	if(lpObj == NULL)

  0298c	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  02990	75 05		 jne	 SHORT $LN15@ClearEquip

; 1078 : 	{
; 1079 : 		return;

  02992	e9 39 01 00 00	 jmp	 $LN16@ClearEquip
$LN15@ClearEquip:

; 1080 : 	}
; 1081 : 
; 1082 : 	if(lpObj->Type != 1 || lpObj->Connected < 3)

  02997	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0299a	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0299e	83 f9 01	 cmp	 ecx, 1
  029a1	75 09		 jne	 SHORT $LN13@ClearEquip
  029a3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029a6	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  029aa	7d 05		 jge	 SHORT $LN14@ClearEquip
$LN13@ClearEquip:

; 1083 : 	{
; 1084 : 		return;

  029ac	e9 1f 01 00 00	 jmp	 $LN16@ClearEquip
$LN14@ClearEquip:

; 1085 : 	}
; 1086 : 
; 1087 : 	int i = 0;

  029b1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 1088 : 
; 1089 : 	for(i = 0;i < 35; i++)

  029b8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  029bf	eb 09		 jmp	 SHORT $LN12@ClearEquip
$LN11@ClearEquip:
  029c1	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  029c4	83 c0 01	 add	 eax, 1
  029c7	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN12@ClearEquip:
  029ca	83 7d f8 23	 cmp	 DWORD PTR _i$[ebp], 35	; 00000023H
  029ce	7d 32		 jge	 SHORT $LN10@ClearEquip

; 1090 : 	{
; 1091 : 		if(lpObj->m_SocketSet[i].m_btEffectType == 0xFF) 

  029d0	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  029d3	6b c0 06	 imul	 eax, 6
  029d6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  029d9	0f b6 94 01 86
	20 00 00	 movzx	 edx, BYTE PTR [ecx+eax+8326]
  029e1	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  029e7	75 02		 jne	 SHORT $LN9@ClearEquip

; 1092 : 			break;

  029e9	eb 17		 jmp	 SHORT $LN10@ClearEquip
$LN9@ClearEquip:

; 1093 : 
; 1094 : 		lpObj->m_SocketSet[i].RESET();

  029eb	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  029ee	6b c0 06	 imul	 eax, 6
  029f1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  029f4	8d 8c 01 86 20
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+8326]
  029fb	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET

; 1095 : 	}

  02a00	eb bf		 jmp	 SHORT $LN11@ClearEquip
$LN10@ClearEquip:

; 1096 : 
; 1097 : 	for(i = 0;i < 7; i++)

  02a02	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  02a09	eb 09		 jmp	 SHORT $LN8@ClearEquip
$LN7@ClearEquip:
  02a0b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  02a0e	83 c0 01	 add	 eax, 1
  02a11	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN8@ClearEquip:
  02a14	83 7d f8 07	 cmp	 DWORD PTR _i$[ebp], 7
  02a18	7d 32		 jge	 SHORT $LN6@ClearEquip

; 1098 : 	{
; 1099 : 		if(lpObj->m_SocketWeapon[i].m_btEffectType == 0xFF) 

  02a1a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  02a1d	6b c0 06	 imul	 eax, 6
  02a20	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a23	0f b6 94 01 58
	21 00 00	 movzx	 edx, BYTE PTR [ecx+eax+8536]
  02a2b	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  02a31	75 02		 jne	 SHORT $LN5@ClearEquip

; 1100 : 			break;

  02a33	eb 17		 jmp	 SHORT $LN6@ClearEquip
$LN5@ClearEquip:

; 1101 : 		lpObj->m_SocketWeapon[i].RESET();

  02a35	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  02a38	6b c0 06	 imul	 eax, 6
  02a3b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a3e	8d 8c 01 58 21
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+8536]
  02a45	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET

; 1102 : 	}

  02a4a	eb bf		 jmp	 SHORT $LN7@ClearEquip
$LN6@ClearEquip:

; 1103 : 
; 1104 : 	for(i = 0;i < 2; i++)

  02a4c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  02a53	eb 09		 jmp	 SHORT $LN4@ClearEquip
$LN3@ClearEquip:
  02a55	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  02a58	83 c0 01	 add	 eax, 1
  02a5b	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@ClearEquip:
  02a5e	83 7d f8 02	 cmp	 DWORD PTR _i$[ebp], 2
  02a62	7d 32		 jge	 SHORT $LN2@ClearEquip

; 1105 : 	{
; 1106 : 		if(lpObj->m_SocketBonus[i].m_btEffectType == 0xFF) 

  02a64	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  02a67	6b c0 06	 imul	 eax, 6
  02a6a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a6d	0f b6 94 01 82
	21 00 00	 movzx	 edx, BYTE PTR [ecx+eax+8578]
  02a75	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  02a7b	75 02		 jne	 SHORT $LN1@ClearEquip

; 1107 : 			break;

  02a7d	eb 17		 jmp	 SHORT $LN2@ClearEquip
$LN1@ClearEquip:

; 1108 : 
; 1109 : 		lpObj->m_SocketBonus[i].RESET();

  02a7f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  02a82	6b c0 06	 imul	 eax, 6
  02a85	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a88	8d 8c 01 82 21
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+8578]
  02a8f	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET

; 1110 : 	}

  02a94	eb bf		 jmp	 SHORT $LN3@ClearEquip
$LN2@ClearEquip:

; 1111 : 
; 1112 : 	lpObj->m_wSocketOpIncLifePower = 0;

  02a96	33 c0		 xor	 eax, eax
  02a98	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a9b	66 89 81 8e 21
	00 00		 mov	 WORD PTR [ecx+8590], ax

; 1113 : 	lpObj->m_wSocketOpIncMaxMana = 0;

  02aa2	33 c0		 xor	 eax, eax
  02aa4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02aa7	66 89 81 90 21
	00 00		 mov	 WORD PTR [ecx+8592], ax

; 1114 : 	lpObj->m_wSocketOpAddLife =0;

  02aae	33 c0		 xor	 eax, eax
  02ab0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02ab3	66 89 81 92 21
	00 00		 mov	 WORD PTR [ecx+8594], ax

; 1115 : 	lpObj->m_wSocketOpAddMana =0;

  02aba	33 c0		 xor	 eax, eax
  02abc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02abf	66 89 81 94 21
	00 00		 mov	 WORD PTR [ecx+8596], ax

; 1116 : 	lpObj->m_btSocketOpDecreaseAG =0;

  02ac6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ac9	c6 80 96 21 00
	00 00		 mov	 BYTE PTR [eax+8598], 0
$LN16@ClearEquip:

; 1117 : 
; 1118 : 
; 1119 : }

  02ad0	5f		 pop	 edi
  02ad1	5e		 pop	 esi
  02ad2	5b		 pop	 ebx
  02ad3	8b e5		 mov	 esp, ebp
  02ad5	5d		 pop	 ebp
  02ad6	c2 04 00	 ret	 4
?ClearEquipmentSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::ClearEquipmentSocketOption
_TEXT	ENDS
PUBLIC	?ApplySocketBonusEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketBonusEffect
PUBLIC	?ApplySocketReservedEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketReservedEffect
PUBLIC	?ApplySocketEarthEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketEarthEffect
PUBLIC	?ApplySocketLightningEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketLightningEffect
PUBLIC	?ApplySocketWindEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketWindEffect
PUBLIC	?ApplySocketIceEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketIceEffect
PUBLIC	?ApplySocketWaterEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketWaterEffect
PUBLIC	?ApplySocketFireEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketFireEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$228087 = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_arg2$ = 12						; size = 4
_btEffectType$ = 16					; size = 1
_btOptionType$ = 20					; size = 1
_wOptionValue$ = 24					; size = 2
?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z PROC ; CSocketOption::ApplySocketEffect
; _this$ = ecx

; 1123 : {

  02ae0	55		 push	 ebp
  02ae1	8b ec		 mov	 ebp, esp
  02ae3	83 ec 48	 sub	 esp, 72			; 00000048H
  02ae6	53		 push	 ebx
  02ae7	56		 push	 esi
  02ae8	57		 push	 edi
  02ae9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1124 : 	if(btEffectType >= 0 && btEffectType <= 9)

  02aec	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02af0	85 c0		 test	 eax, eax
  02af2	7c 29		 jl	 SHORT $LN20@ApplySocke
  02af4	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02af8	83 f8 09	 cmp	 eax, 9
  02afb	7f 20		 jg	 SHORT $LN20@ApplySocke

; 1125 : 	{
; 1126 : 		this->ApplySocketFireEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  02afd	0f b7 45 18	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  02b01	50		 push	 eax
  02b02	0f b6 4d 14	 movzx	 ecx, BYTE PTR _btOptionType$[ebp]
  02b06	51		 push	 ecx
  02b07	0f b6 55 10	 movzx	 edx, BYTE PTR _btEffectType$[ebp]
  02b0b	52		 push	 edx
  02b0c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02b0f	50		 push	 eax
  02b10	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02b13	e8 00 00 00 00	 call	 ?ApplySocketFireEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketFireEffect
  02b18	e9 53 01 00 00	 jmp	 $LN19@ApplySocke
$LN20@ApplySocke:

; 1127 : 	}
; 1128 : 	else if(btEffectType >= 10 && btEffectType <= 15)

  02b1d	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02b21	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  02b24	7c 29		 jl	 SHORT $LN18@ApplySocke
  02b26	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02b2a	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  02b2d	7f 20		 jg	 SHORT $LN18@ApplySocke

; 1129 : 	{
; 1130 : 		this->ApplySocketWaterEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  02b2f	0f b7 45 18	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  02b33	50		 push	 eax
  02b34	0f b6 4d 14	 movzx	 ecx, BYTE PTR _btOptionType$[ebp]
  02b38	51		 push	 ecx
  02b39	0f b6 55 10	 movzx	 edx, BYTE PTR _btEffectType$[ebp]
  02b3d	52		 push	 edx
  02b3e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02b41	50		 push	 eax
  02b42	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02b45	e8 00 00 00 00	 call	 ?ApplySocketWaterEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketWaterEffect
  02b4a	e9 21 01 00 00	 jmp	 $LN19@ApplySocke
$LN18@ApplySocke:

; 1131 : 	}
; 1132 : 	else if(btEffectType >= 16 && btEffectType <= 20)

  02b4f	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02b53	83 f8 10	 cmp	 eax, 16			; 00000010H
  02b56	7c 29		 jl	 SHORT $LN16@ApplySocke
  02b58	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02b5c	83 f8 14	 cmp	 eax, 20			; 00000014H
  02b5f	7f 20		 jg	 SHORT $LN16@ApplySocke

; 1133 : 	{
; 1134 : 		this->ApplySocketIceEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  02b61	0f b7 45 18	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  02b65	50		 push	 eax
  02b66	0f b6 4d 14	 movzx	 ecx, BYTE PTR _btOptionType$[ebp]
  02b6a	51		 push	 ecx
  02b6b	0f b6 55 10	 movzx	 edx, BYTE PTR _btEffectType$[ebp]
  02b6f	52		 push	 edx
  02b70	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02b73	50		 push	 eax
  02b74	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02b77	e8 00 00 00 00	 call	 ?ApplySocketIceEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketIceEffect
  02b7c	e9 ef 00 00 00	 jmp	 $LN19@ApplySocke
$LN16@ApplySocke:

; 1135 : 	}
; 1136 : 	else if(btEffectType >= 21 && btEffectType <= 28)

  02b81	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02b85	83 f8 15	 cmp	 eax, 21			; 00000015H
  02b88	7c 29		 jl	 SHORT $LN14@ApplySocke
  02b8a	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02b8e	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  02b91	7f 20		 jg	 SHORT $LN14@ApplySocke

; 1137 : 	{
; 1138 : 		this->ApplySocketWindEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  02b93	0f b7 45 18	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  02b97	50		 push	 eax
  02b98	0f b6 4d 14	 movzx	 ecx, BYTE PTR _btOptionType$[ebp]
  02b9c	51		 push	 ecx
  02b9d	0f b6 55 10	 movzx	 edx, BYTE PTR _btEffectType$[ebp]
  02ba1	52		 push	 edx
  02ba2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ba5	50		 push	 eax
  02ba6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ba9	e8 00 00 00 00	 call	 ?ApplySocketWindEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketWindEffect
  02bae	e9 bd 00 00 00	 jmp	 $LN19@ApplySocke
$LN14@ApplySocke:

; 1139 : 	}
; 1140 : 	else if(btEffectType >= 29 && btEffectType <= 33)

  02bb3	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02bb7	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  02bba	7c 29		 jl	 SHORT $LN12@ApplySocke
  02bbc	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02bc0	83 f8 21	 cmp	 eax, 33			; 00000021H
  02bc3	7f 20		 jg	 SHORT $LN12@ApplySocke

; 1141 : 	{
; 1142 : 		this->ApplySocketLightningEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  02bc5	0f b7 45 18	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  02bc9	50		 push	 eax
  02bca	0f b6 4d 14	 movzx	 ecx, BYTE PTR _btOptionType$[ebp]
  02bce	51		 push	 ecx
  02bcf	0f b6 55 10	 movzx	 edx, BYTE PTR _btEffectType$[ebp]
  02bd3	52		 push	 edx
  02bd4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02bd7	50		 push	 eax
  02bd8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02bdb	e8 00 00 00 00	 call	 ?ApplySocketLightningEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketLightningEffect
  02be0	e9 8b 00 00 00	 jmp	 $LN19@ApplySocke
$LN12@ApplySocke:

; 1143 : 	}
; 1144 : 	else if(btEffectType >= 34 && btEffectType <= 40)

  02be5	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02be9	83 f8 22	 cmp	 eax, 34			; 00000022H
  02bec	7c 26		 jl	 SHORT $LN10@ApplySocke
  02bee	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02bf2	83 f8 28	 cmp	 eax, 40			; 00000028H
  02bf5	7f 1d		 jg	 SHORT $LN10@ApplySocke

; 1145 : 	{
; 1146 : 		this->ApplySocketEarthEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  02bf7	0f b7 45 18	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  02bfb	50		 push	 eax
  02bfc	0f b6 4d 14	 movzx	 ecx, BYTE PTR _btOptionType$[ebp]
  02c00	51		 push	 ecx
  02c01	0f b6 55 10	 movzx	 edx, BYTE PTR _btEffectType$[ebp]
  02c05	52		 push	 edx
  02c06	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02c09	50		 push	 eax
  02c0a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c0d	e8 00 00 00 00	 call	 ?ApplySocketEarthEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketEarthEffect
  02c12	eb 5c		 jmp	 SHORT $LN19@ApplySocke
$LN10@ApplySocke:

; 1147 : 	}
; 1148 : 	else if(btEffectType >= 41 && btEffectType <= 43)

  02c14	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02c18	83 f8 29	 cmp	 eax, 41			; 00000029H
  02c1b	7c 26		 jl	 SHORT $LN8@ApplySocke
  02c1d	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02c21	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  02c24	7f 1d		 jg	 SHORT $LN8@ApplySocke

; 1149 : 	{
; 1150 : 		this->ApplySocketReservedEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  02c26	0f b7 45 18	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  02c2a	50		 push	 eax
  02c2b	0f b6 4d 14	 movzx	 ecx, BYTE PTR _btOptionType$[ebp]
  02c2f	51		 push	 ecx
  02c30	0f b6 55 10	 movzx	 edx, BYTE PTR _btEffectType$[ebp]
  02c34	52		 push	 edx
  02c35	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02c38	50		 push	 eax
  02c39	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c3c	e8 00 00 00 00	 call	 ?ApplySocketReservedEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketReservedEffect
  02c41	eb 2d		 jmp	 SHORT $LN19@ApplySocke
$LN8@ApplySocke:

; 1151 : 	}
; 1152 : 	else if(btEffectType >= 44 && btEffectType <= 45)

  02c43	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02c47	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  02c4a	7c 24		 jl	 SHORT $LN19@ApplySocke
  02c4c	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02c50	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  02c53	7f 1b		 jg	 SHORT $LN19@ApplySocke

; 1153 : 	{
; 1154 : 		this->ApplySocketBonusEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  02c55	0f b7 45 18	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  02c59	50		 push	 eax
  02c5a	0f b6 4d 14	 movzx	 ecx, BYTE PTR _btOptionType$[ebp]
  02c5e	51		 push	 ecx
  02c5f	0f b6 55 10	 movzx	 edx, BYTE PTR _btEffectType$[ebp]
  02c63	52		 push	 edx
  02c64	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02c67	50		 push	 eax
  02c68	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c6b	e8 00 00 00 00	 call	 ?ApplySocketBonusEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketBonusEffect
$LN19@ApplySocke:

; 1155 : 	}
; 1156 : 
; 1157 : 	for(int i = 0;i < 43; i++)

  02c70	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$228087[ebp], 0
  02c77	eb 09		 jmp	 SHORT $LN5@ApplySocke
$LN4@ApplySocke:
  02c79	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02c7c	83 c0 01	 add	 eax, 1
  02c7f	89 45 f8	 mov	 DWORD PTR _i$228087[ebp], eax
$LN5@ApplySocke:
  02c82	83 7d f8 2b	 cmp	 DWORD PTR _i$228087[ebp], 43 ; 0000002bH
  02c86	0f 8d eb 00 00
	00		 jge	 $LN21@ApplySocke

; 1158 : 	{
; 1159 : 		if(lpObj->m_SocketSet[i].m_btEffectType == btEffectType &&  lpObj->m_SocketSet[i].m_btOptionType == btOptionType)

  02c8c	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02c8f	6b c0 06	 imul	 eax, 6
  02c92	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02c95	0f b6 94 01 86
	20 00 00	 movzx	 edx, BYTE PTR [ecx+eax+8326]
  02c9d	0f b6 45 10	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02ca1	3b d0		 cmp	 edx, eax
  02ca3	75 66		 jne	 SHORT $LN2@ApplySocke
  02ca5	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02ca8	6b c0 06	 imul	 eax, 6
  02cab	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02cae	0f b6 94 01 87
	20 00 00	 movzx	 edx, BYTE PTR [ecx+eax+8327]
  02cb6	0f b6 45 14	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02cba	3b d0		 cmp	 edx, eax
  02cbc	75 4d		 jne	 SHORT $LN2@ApplySocke

; 1160 : 		{
; 1161 : 			lpObj->m_SocketSet[i].m_wOptionValue += wOptionValue;

  02cbe	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02cc1	6b c0 06	 imul	 eax, 6
  02cc4	0f b7 4d 18	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02cc8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02ccb	0f b7 84 02 88
	20 00 00	 movzx	 eax, WORD PTR [edx+eax+8328]
  02cd3	03 c1		 add	 eax, ecx
  02cd5	8b 4d f8	 mov	 ecx, DWORD PTR _i$228087[ebp]
  02cd8	6b c9 06	 imul	 ecx, 6
  02cdb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02cde	66 89 84 0a 88
	20 00 00	 mov	 WORD PTR [edx+ecx+8328], ax

; 1162 : 			lpObj->m_SocketSet[i].m_btOptionCount ++;

  02ce6	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02ce9	6b c0 06	 imul	 eax, 6
  02cec	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02cef	8a 94 01 8a 20
	00 00		 mov	 dl, BYTE PTR [ecx+eax+8330]
  02cf6	80 c2 01	 add	 dl, 1
  02cf9	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02cfc	6b c0 06	 imul	 eax, 6
  02cff	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d02	88 94 01 8a 20
	00 00		 mov	 BYTE PTR [ecx+eax+8330], dl

; 1163 : 			break;

  02d09	eb 6c		 jmp	 SHORT $LN21@ApplySocke
$LN2@ApplySocke:

; 1164 : 		}
; 1165 : 		
; 1166 : 		if(lpObj->m_SocketSet[i].m_btEffectType == 0xFF)

  02d0b	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02d0e	6b c0 06	 imul	 eax, 6
  02d11	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d14	0f b6 94 01 86
	20 00 00	 movzx	 edx, BYTE PTR [ecx+eax+8326]
  02d1c	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  02d22	75 4e		 jne	 SHORT $LN1@ApplySocke

; 1167 : 		{
; 1168 : 			lpObj->m_SocketSet[i].m_btEffectType = btEffectType;

  02d24	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02d27	6b c0 06	 imul	 eax, 6
  02d2a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d2d	8a 55 10	 mov	 dl, BYTE PTR _btEffectType$[ebp]
  02d30	88 94 01 86 20
	00 00		 mov	 BYTE PTR [ecx+eax+8326], dl

; 1169 : 			lpObj->m_SocketSet[i].m_btOptionType = btOptionType;

  02d37	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02d3a	6b c0 06	 imul	 eax, 6
  02d3d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d40	8a 55 14	 mov	 dl, BYTE PTR _btOptionType$[ebp]
  02d43	88 94 01 87 20
	00 00		 mov	 BYTE PTR [ecx+eax+8327], dl

; 1170 : 			lpObj->m_SocketSet[i].m_wOptionValue = wOptionValue;

  02d4a	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02d4d	6b c0 06	 imul	 eax, 6
  02d50	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d53	66 8b 55 18	 mov	 dx, WORD PTR _wOptionValue$[ebp]
  02d57	66 89 94 01 88
	20 00 00	 mov	 WORD PTR [ecx+eax+8328], dx

; 1171 : 			lpObj->m_SocketSet[i].m_btOptionCount = 1;

  02d5f	8b 45 f8	 mov	 eax, DWORD PTR _i$228087[ebp]
  02d62	6b c0 06	 imul	 eax, 6
  02d65	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02d68	c6 84 01 8a 20
	00 00 01	 mov	 BYTE PTR [ecx+eax+8330], 1

; 1172 : 			break;

  02d70	eb 05		 jmp	 SHORT $LN21@ApplySocke
$LN1@ApplySocke:

; 1173 : 		}
; 1174 : 	}

  02d72	e9 02 ff ff ff	 jmp	 $LN4@ApplySocke
$LN21@ApplySocke:

; 1175 : }

  02d77	5f		 pop	 edi
  02d78	5e		 pop	 esi
  02d79	5b		 pop	 ebx
  02d7a	8b e5		 mov	 esp, ebp
  02d7c	5d		 pop	 ebp
  02d7d	c2 14 00	 ret	 20			; 00000014H
?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ENDP ; CSocketOption::ApplySocketEffect
_TEXT	ENDS
PUBLIC	?ApplyTESTSocketEffect@CSocketOption@@QAEXXZ	; CSocketOption::ApplyTESTSocketEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ApplyTESTSocketEffect@CSocketOption@@QAEXXZ PROC	; CSocketOption::ApplyTESTSocketEffect
; _this$ = ecx

; 1179 : {

  02d80	55		 push	 ebp
  02d81	8b ec		 mov	 ebp, esp
  02d83	83 ec 44	 sub	 esp, 68			; 00000044H
  02d86	53		 push	 ebx
  02d87	56		 push	 esi
  02d88	57		 push	 edi
  02d89	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1180 : 
; 1181 : }

  02d8c	5f		 pop	 edi
  02d8d	5e		 pop	 esi
  02d8e	5b		 pop	 ebx
  02d8f	8b e5		 mov	 esp, ebp
  02d91	5d		 pop	 ebp
  02d92	c3		 ret	 0
?ApplyTESTSocketEffect@CSocketOption@@QAEXXZ ENDP	; CSocketOption::ApplyTESTSocketEffect
_TEXT	ENDS
PUBLIC	?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z	; CSocketOption::_CalcIncreaseValue
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv65 = -76						; size = 4
_iIncValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketFireEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketFireEffect
; _this$ = ecx

; 1185 : {

  02da0	55		 push	 ebp
  02da1	8b ec		 mov	 ebp, esp
  02da3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  02da6	53		 push	 ebx
  02da7	56		 push	 esi
  02da8	57		 push	 edi
  02da9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1186 : 	int iIncValue = 0;

  02dac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIncValue$[ebp], 0

; 1187 : 
; 1188 : 	switch(btEffectType)

  02db3	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  02db7	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  02dba	83 7d b4 05	 cmp	 DWORD PTR tv65[ebp], 5
  02dbe	0f 87 62 04 00
	00		 ja	 $LN10@ApplySocke@2
  02dc4	8b 4d b4	 mov	 ecx, DWORD PTR tv65[ebp]
  02dc7	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN12@ApplySocke@2[ecx*4]
$LN7@ApplySocke@2:

; 1189 : 	{
; 1190 : 	case SOCKET_EFFECT_OPADDATTACKPOWER:
; 1191 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxLeft,wOptionValue,btOptionType);

  02dce	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02dd2	50		 push	 eax
  02dd3	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02dd7	51		 push	 ecx
  02dd8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02ddb	8b 82 78 04 00
	00		 mov	 eax, DWORD PTR [edx+1144]
  02de1	50		 push	 eax
  02de2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02de5	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02dea	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1192 : 		lpObj->m_AttackDamageMaxLeft += iIncValue;

  02ded	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02df0	8b 88 78 04 00
	00		 mov	 ecx, DWORD PTR [eax+1144]
  02df6	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02df9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02dfc	89 8a 78 04 00
	00		 mov	 DWORD PTR [edx+1144], ecx

; 1193 : 
; 1194 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinLeft,wOptionValue,btOptionType);

  02e02	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02e06	50		 push	 eax
  02e07	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02e0b	51		 push	 ecx
  02e0c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e0f	8b 82 7c 04 00
	00		 mov	 eax, DWORD PTR [edx+1148]
  02e15	50		 push	 eax
  02e16	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e19	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02e1e	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1195 : 		lpObj->m_AttackDamageMinLeft += iIncValue;

  02e21	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e24	8b 88 7c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1148]
  02e2a	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02e2d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e30	89 8a 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], ecx

; 1196 : 
; 1197 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxRight,wOptionValue,btOptionType);

  02e36	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02e3a	50		 push	 eax
  02e3b	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02e3f	51		 push	 ecx
  02e40	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e43	8b 82 80 04 00
	00		 mov	 eax, DWORD PTR [edx+1152]
  02e49	50		 push	 eax
  02e4a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e4d	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02e52	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1198 : 		lpObj->m_AttackDamageMaxRight += iIncValue;

  02e55	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e58	8b 88 80 04 00
	00		 mov	 ecx, DWORD PTR [eax+1152]
  02e5e	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02e61	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e64	89 8a 80 04 00
	00		 mov	 DWORD PTR [edx+1152], ecx

; 1199 : 
; 1200 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinRight,wOptionValue,btOptionType);

  02e6a	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02e6e	50		 push	 eax
  02e6f	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02e73	51		 push	 ecx
  02e74	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e77	8b 82 84 04 00
	00		 mov	 eax, DWORD PTR [edx+1156]
  02e7d	50		 push	 eax
  02e7e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e81	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02e86	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1201 : 		lpObj->m_AttackDamageMinRight += iIncValue;

  02e89	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e8c	8b 88 84 04 00
	00		 mov	 ecx, DWORD PTR [eax+1156]
  02e92	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02e95	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e98	89 8a 84 04 00
	00		 mov	 DWORD PTR [edx+1156], ecx

; 1202 : 		
; 1203 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMin,wOptionValue,btOptionType);

  02e9e	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02ea2	50		 push	 eax
  02ea3	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02ea7	51		 push	 ecx
  02ea8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02eab	8b 82 68 04 00
	00		 mov	 eax, DWORD PTR [edx+1128]
  02eb1	50		 push	 eax
  02eb2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02eb5	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02eba	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1204 : 		lpObj->m_MagicDamageMin += iIncValue;

  02ebd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ec0	8b 88 68 04 00
	00		 mov	 ecx, DWORD PTR [eax+1128]
  02ec6	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02ec9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02ecc	89 8a 68 04 00
	00		 mov	 DWORD PTR [edx+1128], ecx

; 1205 : 
; 1206 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMax,wOptionValue,btOptionType);

  02ed2	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02ed6	50		 push	 eax
  02ed7	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02edb	51		 push	 ecx
  02edc	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02edf	8b 82 6c 04 00
	00		 mov	 eax, DWORD PTR [edx+1132]
  02ee5	50		 push	 eax
  02ee6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ee9	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02eee	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1207 : 		lpObj->m_MagicDamageMax += iIncValue;

  02ef1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ef4	8b 88 6c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1132]
  02efa	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02efd	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f00	89 8a 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], ecx

; 1208 : 
; 1209 : 		break;

  02f06	e9 1b 03 00 00	 jmp	 $LN10@ApplySocke@2
$LN6@ApplySocke@2:

; 1210 : 	case SOCKET_EFFECT_OPADDSPEEDPOWER:
; 1211 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackSpeed,wOptionValue,btOptionType);

  02f0b	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02f0f	50		 push	 eax
  02f10	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02f14	51		 push	 ecx
  02f15	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f18	8b 82 8c 04 00
	00		 mov	 eax, DWORD PTR [edx+1164]
  02f1e	50		 push	 eax
  02f1f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f22	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02f27	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1212 : 		lpObj->m_AttackSpeed += iIncValue;

  02f2a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f2d	8b 88 8c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1164]
  02f33	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02f36	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f39	89 8a 8c 04 00
	00		 mov	 DWORD PTR [edx+1164], ecx

; 1213 : 		
; 1214 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicSpeed,wOptionValue,btOptionType);

  02f3f	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02f43	50		 push	 eax
  02f44	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02f48	51		 push	 ecx
  02f49	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f4c	8b 82 90 04 00
	00		 mov	 eax, DWORD PTR [edx+1168]
  02f52	50		 push	 eax
  02f53	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f56	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02f5b	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1215 : 		lpObj->m_MagicSpeed += iIncValue;

  02f5e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f61	8b 88 90 04 00
	00		 mov	 ecx, DWORD PTR [eax+1168]
  02f67	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02f6a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f6d	89 8a 90 04 00
	00		 mov	 DWORD PTR [edx+1168], ecx

; 1216 : 		break;

  02f73	e9 ae 02 00 00	 jmp	 $LN10@ApplySocke@2
$LN5@ApplySocke@2:

; 1217 : 	case SOCKET_EFFECT_OPADDMAXDMGWEAPONS:
; 1218 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxLeft,wOptionValue,btOptionType);

  02f78	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02f7c	50		 push	 eax
  02f7d	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02f81	51		 push	 ecx
  02f82	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f85	8b 82 78 04 00
	00		 mov	 eax, DWORD PTR [edx+1144]
  02f8b	50		 push	 eax
  02f8c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f8f	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02f94	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1219 : 		lpObj->m_AttackDamageMaxLeft += iIncValue;

  02f97	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f9a	8b 88 78 04 00
	00		 mov	 ecx, DWORD PTR [eax+1144]
  02fa0	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02fa3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02fa6	89 8a 78 04 00
	00		 mov	 DWORD PTR [edx+1144], ecx

; 1220 : 		
; 1221 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxRight,wOptionValue,btOptionType);

  02fac	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02fb0	50		 push	 eax
  02fb1	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02fb5	51		 push	 ecx
  02fb6	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02fb9	8b 82 80 04 00
	00		 mov	 eax, DWORD PTR [edx+1152]
  02fbf	50		 push	 eax
  02fc0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fc3	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02fc8	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1222 : 		lpObj->m_AttackDamageMaxRight += iIncValue;

  02fcb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02fce	8b 88 80 04 00
	00		 mov	 ecx, DWORD PTR [eax+1152]
  02fd4	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  02fd7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02fda	89 8a 80 04 00
	00		 mov	 DWORD PTR [edx+1152], ecx

; 1223 : 
; 1224 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMax,wOptionValue,btOptionType);

  02fe0	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  02fe4	50		 push	 eax
  02fe5	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  02fe9	51		 push	 ecx
  02fea	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02fed	8b 82 6c 04 00
	00		 mov	 eax, DWORD PTR [edx+1132]
  02ff3	50		 push	 eax
  02ff4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ff7	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  02ffc	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1225 : 		lpObj->m_MagicDamageMax += iIncValue;

  02fff	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03002	8b 88 6c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1132]
  03008	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  0300b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0300e	89 8a 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], ecx

; 1226 : 		break;

  03014	e9 0d 02 00 00	 jmp	 $LN10@ApplySocke@2
$LN4@ApplySocke@2:

; 1227 : 	case SOCKET_EFFECT_OPADDMINDMGWEAPONS:
; 1228 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinLeft,wOptionValue,btOptionType);

  03019	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  0301d	50		 push	 eax
  0301e	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03022	51		 push	 ecx
  03023	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03026	8b 82 7c 04 00
	00		 mov	 eax, DWORD PTR [edx+1148]
  0302c	50		 push	 eax
  0302d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03030	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03035	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1229 : 		lpObj->m_AttackDamageMinLeft += iIncValue;

  03038	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0303b	8b 88 7c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1148]
  03041	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03044	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03047	89 8a 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], ecx

; 1230 : 		
; 1231 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinRight,wOptionValue,btOptionType);

  0304d	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03051	50		 push	 eax
  03052	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03056	51		 push	 ecx
  03057	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0305a	8b 82 84 04 00
	00		 mov	 eax, DWORD PTR [edx+1156]
  03060	50		 push	 eax
  03061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03064	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03069	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1232 : 		lpObj->m_AttackDamageMinRight += iIncValue;

  0306c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0306f	8b 88 84 04 00
	00		 mov	 ecx, DWORD PTR [eax+1156]
  03075	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03078	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0307b	89 8a 84 04 00
	00		 mov	 DWORD PTR [edx+1156], ecx

; 1233 : 
; 1234 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMin,wOptionValue,btOptionType);

  03081	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03085	50		 push	 eax
  03086	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  0308a	51		 push	 ecx
  0308b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0308e	8b 82 68 04 00
	00		 mov	 eax, DWORD PTR [edx+1128]
  03094	50		 push	 eax
  03095	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03098	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  0309d	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1235 : 		lpObj->m_MagicDamageMin += iIncValue;

  030a0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  030a3	8b 88 68 04 00
	00		 mov	 ecx, DWORD PTR [eax+1128]
  030a9	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  030ac	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  030af	89 8a 68 04 00
	00		 mov	 DWORD PTR [edx+1128], ecx

; 1236 : 		break;

  030b5	e9 6c 01 00 00	 jmp	 $LN10@ApplySocke@2
$LN3@ApplySocke@2:

; 1237 : 	case SOCKET_EFFECT_OPADDALLDMGWEAPONS:
; 1238 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxLeft,wOptionValue,btOptionType);

  030ba	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  030be	50		 push	 eax
  030bf	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  030c3	51		 push	 ecx
  030c4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  030c7	8b 82 78 04 00
	00		 mov	 eax, DWORD PTR [edx+1144]
  030cd	50		 push	 eax
  030ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  030d1	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  030d6	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1239 : 		lpObj->m_AttackDamageMaxLeft += iIncValue;

  030d9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  030dc	8b 88 78 04 00
	00		 mov	 ecx, DWORD PTR [eax+1144]
  030e2	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  030e5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  030e8	89 8a 78 04 00
	00		 mov	 DWORD PTR [edx+1144], ecx

; 1240 : 		
; 1241 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinLeft,wOptionValue,btOptionType);

  030ee	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  030f2	50		 push	 eax
  030f3	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  030f7	51		 push	 ecx
  030f8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  030fb	8b 82 7c 04 00
	00		 mov	 eax, DWORD PTR [edx+1148]
  03101	50		 push	 eax
  03102	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03105	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  0310a	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1242 : 		lpObj->m_AttackDamageMinLeft += iIncValue;

  0310d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03110	8b 88 7c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1148]
  03116	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03119	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0311c	89 8a 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], ecx

; 1243 : 
; 1244 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxRight,wOptionValue,btOptionType);

  03122	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03126	50		 push	 eax
  03127	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  0312b	51		 push	 ecx
  0312c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0312f	8b 82 80 04 00
	00		 mov	 eax, DWORD PTR [edx+1152]
  03135	50		 push	 eax
  03136	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03139	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  0313e	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1245 : 		lpObj->m_AttackDamageMaxRight += iIncValue;

  03141	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03144	8b 88 80 04 00
	00		 mov	 ecx, DWORD PTR [eax+1152]
  0314a	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  0314d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03150	89 8a 80 04 00
	00		 mov	 DWORD PTR [edx+1152], ecx

; 1246 : 
; 1247 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinRight,wOptionValue,btOptionType);

  03156	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  0315a	50		 push	 eax
  0315b	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  0315f	51		 push	 ecx
  03160	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03163	8b 82 84 04 00
	00		 mov	 eax, DWORD PTR [edx+1156]
  03169	50		 push	 eax
  0316a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0316d	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03172	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1248 : 		lpObj->m_AttackDamageMinRight += iIncValue;

  03175	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03178	8b 88 84 04 00
	00		 mov	 ecx, DWORD PTR [eax+1156]
  0317e	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03181	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03184	89 8a 84 04 00
	00		 mov	 DWORD PTR [edx+1156], ecx

; 1249 : 		
; 1250 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMin,wOptionValue,btOptionType);

  0318a	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  0318e	50		 push	 eax
  0318f	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03193	51		 push	 ecx
  03194	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03197	8b 82 68 04 00
	00		 mov	 eax, DWORD PTR [edx+1128]
  0319d	50		 push	 eax
  0319e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  031a1	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  031a6	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1251 : 		lpObj->m_MagicDamageMin += iIncValue;

  031a9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  031ac	8b 88 68 04 00
	00		 mov	 ecx, DWORD PTR [eax+1128]
  031b2	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  031b5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  031b8	89 8a 68 04 00
	00		 mov	 DWORD PTR [edx+1128], ecx

; 1252 : 
; 1253 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMax,wOptionValue,btOptionType);

  031be	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  031c2	50		 push	 eax
  031c3	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  031c7	51		 push	 ecx
  031c8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  031cb	8b 82 6c 04 00
	00		 mov	 eax, DWORD PTR [edx+1132]
  031d1	50		 push	 eax
  031d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  031d5	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  031da	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1254 : 		lpObj->m_MagicDamageMax += iIncValue;

  031dd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  031e0	8b 88 6c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1132]
  031e6	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  031e9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  031ec	89 8a 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], ecx

; 1255 : 		break;

  031f2	eb 32		 jmp	 SHORT $LN10@ApplySocke@2
$LN2@ApplySocke@2:

; 1256 : 	case SOCKET_EFFECT_OPADDUNK:
; 1257 : 		lpObj->m_btSocketOpDecreaseAG += wOptionValue;

  031f4	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  031f8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  031fb	0f b6 91 96 21
	00 00		 movzx	 edx, BYTE PTR [ecx+8598]
  03202	03 d0		 add	 edx, eax
  03204	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03207	88 90 96 21 00
	00		 mov	 BYTE PTR [eax+8598], dl

; 1258 : 
; 1259 : 		if(lpObj->m_btSocketOpDecreaseAG > 100)

  0320d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03210	0f b6 88 96 21
	00 00		 movzx	 ecx, BYTE PTR [eax+8598]
  03217	83 f9 64	 cmp	 ecx, 100		; 00000064H
  0321a	7e 0a		 jle	 SHORT $LN10@ApplySocke@2

; 1260 : 		{
; 1261 : 			lpObj->m_btSocketOpDecreaseAG = 100;

  0321c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0321f	c6 80 96 21 00
	00 64		 mov	 BYTE PTR [eax+8598], 100 ; 00000064H
$LN10@ApplySocke@2:

; 1262 : 		}
; 1263 : 		break;
; 1264 : 	}
; 1265 : 
; 1266 : }

  03226	5f		 pop	 edi
  03227	5e		 pop	 esi
  03228	5b		 pop	 ebx
  03229	8b e5		 mov	 esp, ebp
  0322b	5d		 pop	 ebp
  0322c	c2 10 00	 ret	 16			; 00000010H
  0322f	90		 npad	 1
$LN12@ApplySocke@2:
  03230	00 00 00 00	 DD	 $LN7@ApplySocke@2
  03234	00 00 00 00	 DD	 $LN6@ApplySocke@2
  03238	00 00 00 00	 DD	 $LN5@ApplySocke@2
  0323c	00 00 00 00	 DD	 $LN4@ApplySocke@2
  03240	00 00 00 00	 DD	 $LN3@ApplySocke@2
  03244	00 00 00 00	 DD	 $LN2@ApplySocke@2
?ApplySocketFireEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketFireEffect
; Function compile flags: /Odtp /ZI
tv65 = -76						; size = 4
_iIncValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketWaterEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketWaterEffect
; _this$ = ecx

; 1270 : {

  03250	55		 push	 ebp
  03251	8b ec		 mov	 ebp, esp
  03253	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03256	53		 push	 ebx
  03257	56		 push	 esi
  03258	57		 push	 edi
  03259	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1271 : 	int iIncValue = 0;

  0325c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIncValue$[ebp], 0

; 1272 : 
; 1273 : 	switch(btEffectType)

  03263	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  03267	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0326a	8b 4d b4	 mov	 ecx, DWORD PTR tv65[ebp]
  0326d	83 e9 0a	 sub	 ecx, 10			; 0000000aH
  03270	89 4d b4	 mov	 DWORD PTR tv65[ebp], ecx
  03273	83 7d b4 04	 cmp	 DWORD PTR tv65[ebp], 4
  03277	0f 87 fc 00 00
	00		 ja	 $LN8@ApplySocke@3
  0327d	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  03280	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN10@ApplySocke@3[edx*4]
$LN5@ApplySocke@3:

; 1274 : 	{
; 1275 : 	case 10:
; 1276 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_SuccessfulBlocking,wOptionValue,btOptionType);

  03287	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  0328b	50		 push	 eax
  0328c	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03290	51		 push	 ecx
  03291	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03294	8b 82 9c 04 00
	00		 mov	 eax, DWORD PTR [edx+1180]
  0329a	50		 push	 eax
  0329b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0329e	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  032a3	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1277 : 		lpObj->m_SuccessfulBlocking += iIncValue;

  032a6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  032a9	8b 88 9c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1180]
  032af	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  032b2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  032b5	89 8a 9c 04 00
	00		 mov	 DWORD PTR [edx+1180], ecx

; 1278 : 		break;

  032bb	e9 b9 00 00 00	 jmp	 $LN8@ApplySocke@3
$LN4@ApplySocke@3:

; 1279 : 	case 11:
; 1280 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_Defense,wOptionValue,btOptionType);

  032c0	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  032c4	50		 push	 eax
  032c5	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  032c9	51		 push	 ecx
  032ca	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  032cd	8b 82 94 04 00
	00		 mov	 eax, DWORD PTR [edx+1172]
  032d3	50		 push	 eax
  032d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  032d7	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  032dc	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1281 : 		lpObj->m_Defense += iIncValue;

  032df	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  032e2	8b 88 94 04 00
	00		 mov	 ecx, DWORD PTR [eax+1172]
  032e8	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  032eb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  032ee	89 8a 94 04 00
	00		 mov	 DWORD PTR [edx+1172], ecx

; 1282 : 		
; 1283 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDefense,wOptionValue,btOptionType);

  032f4	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  032f8	50		 push	 eax
  032f9	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  032fd	51		 push	 ecx
  032fe	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03301	8b 82 98 04 00
	00		 mov	 eax, DWORD PTR [edx+1176]
  03307	50		 push	 eax
  03308	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0330b	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03310	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1284 : 		lpObj->m_MagicDefense += iIncValue;

  03313	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03316	8b 88 98 04 00
	00		 mov	 ecx, DWORD PTR [eax+1176]
  0331c	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  0331f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03322	89 8a 98 04 00
	00		 mov	 DWORD PTR [edx+1176], ecx

; 1285 : 		break;

  03328	eb 4f		 jmp	 SHORT $LN8@ApplySocke@3
$LN3@ApplySocke@3:

; 1286 : 	case 12:
; 1287 : 		lpObj->SetOpImproveSheldDefence += wOptionValue;

  0332a	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  0332e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03331	0f b6 91 43 11
	00 00		 movzx	 edx, BYTE PTR [ecx+4419]
  03338	03 d0		 add	 edx, eax
  0333a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0333d	88 90 43 11 00
	00		 mov	 BYTE PTR [eax+4419], dl

; 1288 : 		break;

  03343	eb 34		 jmp	 SHORT $LN8@ApplySocke@3
$LN2@ApplySocke@3:

; 1289 : 	case 13:
; 1290 : 		lpObj->DamageMinus += wOptionValue;

  03345	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  03349	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0334c	0f b6 91 70 01
	00 00		 movzx	 edx, BYTE PTR [ecx+368]
  03353	03 d0		 add	 edx, eax
  03355	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03358	88 90 70 01 00
	00		 mov	 BYTE PTR [eax+368], dl

; 1291 : 		break;

  0335e	eb 19		 jmp	 SHORT $LN8@ApplySocke@3
$LN1@ApplySocke@3:

; 1292 : 	case 14:
; 1293 : 		lpObj->DamageReflect += wOptionValue;

  03360	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  03364	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03367	0f b6 91 71 01
	00 00		 movzx	 edx, BYTE PTR [ecx+369]
  0336e	03 d0		 add	 edx, eax
  03370	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03373	88 90 71 01 00
	00		 mov	 BYTE PTR [eax+369], dl
$LN8@ApplySocke@3:

; 1294 : 		break;
; 1295 : 
; 1296 : 	}
; 1297 : }

  03379	5f		 pop	 edi
  0337a	5e		 pop	 esi
  0337b	5b		 pop	 ebx
  0337c	8b e5		 mov	 esp, ebp
  0337e	5d		 pop	 ebp
  0337f	c2 10 00	 ret	 16			; 00000010H
  03382	8b ff		 npad	 2
$LN10@ApplySocke@3:
  03384	00 00 00 00	 DD	 $LN5@ApplySocke@3
  03388	00 00 00 00	 DD	 $LN4@ApplySocke@3
  0338c	00 00 00 00	 DD	 $LN3@ApplySocke@3
  03390	00 00 00 00	 DD	 $LN2@ApplySocke@3
  03394	00 00 00 00	 DD	 $LN1@ApplySocke@3
?ApplySocketWaterEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketWaterEffect
; Function compile flags: /Odtp /ZI
tv65 = -76						; size = 4
_iIncValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketIceEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketIceEffect
; _this$ = ecx

; 1301 : {

  033a0	55		 push	 ebp
  033a1	8b ec		 mov	 ebp, esp
  033a3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  033a6	53		 push	 ebx
  033a7	56		 push	 esi
  033a8	57		 push	 edi
  033a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 	int iIncValue = 0;

  033ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIncValue$[ebp], 0

; 1303 : 
; 1304 : 	switch(btEffectType)

  033b3	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  033b7	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  033ba	8b 4d b4	 mov	 ecx, DWORD PTR tv65[ebp]
  033bd	83 e9 10	 sub	 ecx, 16			; 00000010H
  033c0	89 4d b4	 mov	 DWORD PTR tv65[ebp], ecx
  033c3	83 7d b4 03	 cmp	 DWORD PTR tv65[ebp], 3
  033c7	0f 87 ee 00 00
	00		 ja	 $LN5@ApplySocke@4
  033cd	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  033d0	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN9@ApplySocke@4[edx*4]
$LN4@ApplySocke@4:

; 1305 : 	{
; 1306 : 	case 16:
; 1307 : 		iIncValue += this->_CalcIncreaseValue((int)lpObj->AddLife + (int)lpObj->MaxLife,wOptionValue,btOptionType);

  033d7	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  033db	50		 push	 eax
  033dc	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  033e0	51		 push	 ecx
  033e1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  033e4	d9 82 00 01 00
	00		 fld	 DWORD PTR [edx+256]
  033ea	e8 00 00 00 00	 call	 __ftol2_sse
  033ef	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  033f2	03 81 4c 01 00
	00		 add	 eax, DWORD PTR [ecx+332]
  033f8	50		 push	 eax
  033f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  033fc	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03401	03 45 f8	 add	 eax, DWORD PTR _iIncValue$[ebp]
  03404	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1308 : 		lpObj->m_wSocketOpAddLife += iIncValue;

  03407	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0340a	0f b7 88 92 21
	00 00		 movzx	 ecx, WORD PTR [eax+8594]
  03411	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03414	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03417	66 89 8a 92 21
	00 00		 mov	 WORD PTR [edx+8594], cx

; 1309 : 		break;

  0341e	e9 98 00 00 00	 jmp	 $LN5@ApplySocke@4
$LN3@ApplySocke@4:

; 1310 : 	case 17:
; 1311 : 		iIncValue += this->_CalcIncreaseValue((int)lpObj->AddMana + (int)lpObj->MaxMana,wOptionValue,btOptionType);

  03423	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03427	50		 push	 eax
  03428	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  0342c	51		 push	 ecx
  0342d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03430	d9 82 14 01 00
	00		 fld	 DWORD PTR [edx+276]
  03436	e8 00 00 00 00	 call	 __ftol2_sse
  0343b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0343e	03 81 50 01 00
	00		 add	 eax, DWORD PTR [ecx+336]
  03444	50		 push	 eax
  03445	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03448	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  0344d	03 45 f8	 add	 eax, DWORD PTR _iIncValue$[ebp]
  03450	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1312 : 		lpObj->m_wSocketOpAddMana += iIncValue;

  03453	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03456	0f b7 88 94 21
	00 00		 movzx	 ecx, WORD PTR [eax+8596]
  0345d	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03460	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03463	66 89 8a 94 21
	00 00		 mov	 WORD PTR [edx+8596], cx

; 1313 : 		break;

  0346a	eb 4f		 jmp	 SHORT $LN5@ApplySocke@4
$LN2@ApplySocke@4:

; 1314 : 	case 18:
; 1315 : 		iIncValue = this->_CalcIncreaseValue(lpObj->SetOpAddSkillAttack,wOptionValue,btOptionType);

  0346c	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03470	50		 push	 eax
  03471	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03475	51		 push	 ecx
  03476	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03479	0f bf 82 24 11
	00 00		 movsx	 eax, WORD PTR [edx+4388]
  03480	50		 push	 eax
  03481	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03484	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03489	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1316 : 		lpObj->SetOpAddSkillAttack += iIncValue;

  0348c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0348f	0f bf 88 24 11
	00 00		 movsx	 ecx, WORD PTR [eax+4388]
  03496	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03499	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0349c	66 89 8a 24 11
	00 00		 mov	 WORD PTR [edx+4388], cx

; 1317 : 		break;

  034a3	eb 16		 jmp	 SHORT $LN5@ApplySocke@4
$LN1@ApplySocke@4:

; 1318 : 	case 19:
; 1319 : 		lpObj->m_AttackRating += wOptionValue;

  034a5	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  034a9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  034ac	03 81 88 04 00
	00		 add	 eax, DWORD PTR [ecx+1160]
  034b2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  034b5	89 82 88 04 00
	00		 mov	 DWORD PTR [edx+1160], eax
$LN5@ApplySocke@4:

; 1320 : 		break;
; 1321 : 	}
; 1322 : }

  034bb	5f		 pop	 edi
  034bc	5e		 pop	 esi
  034bd	5b		 pop	 ebx
  034be	8b e5		 mov	 esp, ebp
  034c0	5d		 pop	 ebp
  034c1	c2 10 00	 ret	 16			; 00000010H
$LN9@ApplySocke@4:
  034c4	00 00 00 00	 DD	 $LN4@ApplySocke@4
  034c8	00 00 00 00	 DD	 $LN3@ApplySocke@4
  034cc	00 00 00 00	 DD	 $LN2@ApplySocke@4
  034d0	00 00 00 00	 DD	 $LN1@ApplySocke@4
?ApplySocketIceEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketIceEffect
_TEXT	ENDS
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv65 = -76						; size = 4
_iIncValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketWindEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketWindEffect
; _this$ = ecx

; 1326 : {

  034e0	55		 push	 ebp
  034e1	8b ec		 mov	 ebp, esp
  034e3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  034e6	53		 push	 ebx
  034e7	56		 push	 esi
  034e8	57		 push	 edi
  034e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1327 : 	int iIncValue = 0;

  034ec	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIncValue$[ebp], 0

; 1328 : 
; 1329 : 	switch(btEffectType)

  034f3	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  034f7	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  034fa	8b 4d b4	 mov	 ecx, DWORD PTR tv65[ebp]
  034fd	83 e9 15	 sub	 ecx, 21			; 00000015H
  03500	89 4d b4	 mov	 DWORD PTR tv65[ebp], ecx
  03503	83 7d b4 06	 cmp	 DWORD PTR tv65[ebp], 6
  03507	0f 87 06 03 00
	00		 ja	 $LN8@ApplySocke@5
  0350d	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  03510	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN12@ApplySocke@5[edx*4]
$LN7@ApplySocke@5:

; 1330 : 	{
; 1331 : 	case 21:
; 1332 : 		iIncValue = this->_CalcIncreaseValue((int)lpObj->AddLife+(int)lpObj->MaxLife,wOptionValue,btOptionType);

  03517	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  0351b	50		 push	 eax
  0351c	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03520	51		 push	 ecx
  03521	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03524	d9 82 00 01 00
	00		 fld	 DWORD PTR [edx+256]
  0352a	e8 00 00 00 00	 call	 __ftol2_sse
  0352f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03532	03 81 4c 01 00
	00		 add	 eax, DWORD PTR [ecx+332]
  03538	50		 push	 eax
  03539	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0353c	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03541	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1333 : 		lpObj->m_wSocketOpIncLifePower += iIncValue;

  03544	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03547	0f b7 88 8e 21
	00 00		 movzx	 ecx, WORD PTR [eax+8590]
  0354e	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03551	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03554	66 89 8a 8e 21
	00 00		 mov	 WORD PTR [edx+8590], cx

; 1334 : 		break;

  0355b	e9 b3 02 00 00	 jmp	 $LN8@ApplySocke@5
$LN6@ApplySocke@5:

; 1335 : 	case 22:
; 1336 : 		iIncValue = this->_CalcIncreaseValue((int)lpObj->AddLife+(int)lpObj->MaxLife,wOptionValue,btOptionType);

  03560	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03564	50		 push	 eax
  03565	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03569	51		 push	 ecx
  0356a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0356d	d9 82 00 01 00
	00		 fld	 DWORD PTR [edx+256]
  03573	e8 00 00 00 00	 call	 __ftol2_sse
  03578	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0357b	03 81 4c 01 00
	00		 add	 eax, DWORD PTR [ecx+332]
  03581	50		 push	 eax
  03582	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03585	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  0358a	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1337 : 		lpObj->AddLife += iIncValue;

  0358d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03590	8b 88 4c 01 00
	00		 mov	 ecx, DWORD PTR [eax+332]
  03596	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03599	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0359c	89 8a 4c 01 00
	00		 mov	 DWORD PTR [edx+332], ecx

; 1338 : 		GCReFillSend(lpObj->m_Index,(lpObj->AddLife+lpObj->MaxLife),0xFE,0, (lpObj->iMaxShield+lpObj->iAddShield));

  035a2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  035a5	8b 88 58 01 00
	00		 mov	 ecx, DWORD PTR [eax+344]
  035ab	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  035ae	03 8a 5c 01 00
	00		 add	 ecx, DWORD PTR [edx+348]
  035b4	51		 push	 ecx
  035b5	6a 00		 push	 0
  035b7	68 fe 00 00 00	 push	 254			; 000000feH
  035bc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  035bf	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  035c5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  035c8	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  035ce	e8 00 00 00 00	 call	 __ftol2_sse
  035d3	50		 push	 eax
  035d4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  035d7	8b 02		 mov	 eax, DWORD PTR [edx]
  035d9	50		 push	 eax
  035da	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  035df	83 c4 14	 add	 esp, 20			; 00000014H

; 1339 : 		GCReFillSend(lpObj->m_Index,lpObj->Life,0xFF,0,lpObj->iShield);

  035e2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  035e5	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  035eb	51		 push	 ecx
  035ec	6a 00		 push	 0
  035ee	68 ff 00 00 00	 push	 255			; 000000ffH
  035f3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  035f6	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  035fc	e8 00 00 00 00	 call	 __ftol2_sse
  03601	50		 push	 eax
  03602	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03605	8b 08		 mov	 ecx, DWORD PTR [eax]
  03607	51		 push	 ecx
  03608	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0360d	83 c4 14	 add	 esp, 20			; 00000014H

; 1340 : 		break;

  03610	e9 fe 01 00 00	 jmp	 $LN8@ApplySocke@5
$LN5@ApplySocke@5:

; 1341 : 	case 23:
; 1342 : 		iIncValue = this->_CalcIncreaseValue((int)lpObj->AddMana+(int)lpObj->MaxMana,wOptionValue,btOptionType);

  03615	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03619	50		 push	 eax
  0361a	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  0361e	51		 push	 ecx
  0361f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03622	d9 82 14 01 00
	00		 fld	 DWORD PTR [edx+276]
  03628	e8 00 00 00 00	 call	 __ftol2_sse
  0362d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03630	03 81 50 01 00
	00		 add	 eax, DWORD PTR [ecx+336]
  03636	50		 push	 eax
  03637	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0363a	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  0363f	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1343 : 		lpObj->AddMana += iIncValue;

  03642	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03645	8b 88 50 01 00
	00		 mov	 ecx, DWORD PTR [eax+336]
  0364b	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  0364e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03651	89 8a 50 01 00
	00		 mov	 DWORD PTR [edx+336], ecx

; 1344 : 		GCManaSend(lpObj->m_Index,(lpObj->AddMana+lpObj->MaxMana),0xFE,0,(lpObj->MaxBP+lpObj->AddBP));

  03657	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0365a	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  03660	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03663	03 8a 30 01 00
	00		 add	 ecx, DWORD PTR [edx+304]
  03669	51		 push	 ecx
  0366a	6a 00		 push	 0
  0366c	68 fe 00 00 00	 push	 254			; 000000feH
  03671	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03674	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  0367a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0367d	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  03683	e8 00 00 00 00	 call	 __ftol2_sse
  03688	50		 push	 eax
  03689	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0368c	8b 02		 mov	 eax, DWORD PTR [edx]
  0368e	50		 push	 eax
  0368f	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  03694	83 c4 14	 add	 esp, 20			; 00000014H

; 1345 : 		GCManaSend(lpObj->m_Index,lpObj->Mana,0xFF,0,lpObj->BP);

  03697	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0369a	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  036a0	51		 push	 ecx
  036a1	6a 00		 push	 0
  036a3	68 ff 00 00 00	 push	 255			; 000000ffH
  036a8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  036ab	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  036b1	e8 00 00 00 00	 call	 __ftol2_sse
  036b6	50		 push	 eax
  036b7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  036ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  036bc	51		 push	 ecx
  036bd	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  036c2	83 c4 14	 add	 esp, 20			; 00000014H

; 1346 : 		break;

  036c5	e9 49 01 00 00	 jmp	 $LN8@ApplySocke@5
$LN4@ApplySocke@5:

; 1347 : 	case 24:
; 1348 : 		iIncValue = this->_CalcIncreaseValue((int)lpObj->AddMana+(int)lpObj->MaxMana,wOptionValue,btOptionType);

  036ca	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  036ce	50		 push	 eax
  036cf	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  036d3	51		 push	 ecx
  036d4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  036d7	d9 82 14 01 00
	00		 fld	 DWORD PTR [edx+276]
  036dd	e8 00 00 00 00	 call	 __ftol2_sse
  036e2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  036e5	03 81 50 01 00
	00		 add	 eax, DWORD PTR [ecx+336]
  036eb	50		 push	 eax
  036ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  036ef	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  036f4	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1349 : 		lpObj->m_wSocketOpIncMaxMana += iIncValue;

  036f7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  036fa	0f b7 88 90 21
	00 00		 movzx	 ecx, WORD PTR [eax+8592]
  03701	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03704	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03707	66 89 8a 90 21
	00 00		 mov	 WORD PTR [edx+8592], cx

; 1350 : 		break;

  0370e	e9 00 01 00 00	 jmp	 $LN8@ApplySocke@5
$LN3@ApplySocke@5:

; 1351 : 	case 25:
; 1352 : 		iIncValue = this->_CalcIncreaseValue(lpObj->MaxBP+lpObj->AddBP,wOptionValue,btOptionType);

  03713	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03717	50		 push	 eax
  03718	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  0371c	51		 push	 ecx
  0371d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03720	8b 82 2c 01 00
	00		 mov	 eax, DWORD PTR [edx+300]
  03726	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03729	03 81 30 01 00
	00		 add	 eax, DWORD PTR [ecx+304]
  0372f	50		 push	 eax
  03730	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03733	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03738	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1353 : 		lpObj->AddBP += iIncValue;

  0373b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0373e	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  03744	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03747	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0374a	89 8a 30 01 00
	00		 mov	 DWORD PTR [edx+304], ecx

; 1354 : 		GCManaSend(lpObj->m_Index,(lpObj->AddMana+lpObj->MaxMana),0xFE,0,(lpObj->MaxBP+lpObj->AddBP));

  03750	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03753	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  03759	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0375c	03 8a 30 01 00
	00		 add	 ecx, DWORD PTR [edx+304]
  03762	51		 push	 ecx
  03763	6a 00		 push	 0
  03765	68 fe 00 00 00	 push	 254			; 000000feH
  0376a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0376d	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  03773	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03776	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  0377c	e8 00 00 00 00	 call	 __ftol2_sse
  03781	50		 push	 eax
  03782	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03785	8b 02		 mov	 eax, DWORD PTR [edx]
  03787	50		 push	 eax
  03788	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0378d	83 c4 14	 add	 esp, 20			; 00000014H

; 1355 : 		GCManaSend(lpObj->m_Index,lpObj->Mana,0xFF,0,lpObj->BP);

  03790	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03793	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  03799	51		 push	 ecx
  0379a	6a 00		 push	 0
  0379c	68 ff 00 00 00	 push	 255			; 000000ffH
  037a1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  037a4	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  037aa	e8 00 00 00 00	 call	 __ftol2_sse
  037af	50		 push	 eax
  037b0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  037b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  037b5	51		 push	 ecx
  037b6	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  037bb	83 c4 14	 add	 esp, 20			; 00000014H

; 1356 : 		break;

  037be	eb 53		 jmp	 SHORT $LN8@ApplySocke@5
$LN2@ApplySocke@5:

; 1357 : 	case 26:
; 1358 : 		iIncValue = this->_CalcIncreaseValue(lpObj->SetOpIncAGValue,wOptionValue,btOptionType);

  037c0	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  037c4	50		 push	 eax
  037c5	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  037c9	51		 push	 ecx
  037ca	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  037cd	0f bf 82 2e 11
	00 00		 movsx	 eax, WORD PTR [edx+4398]
  037d4	50		 push	 eax
  037d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  037d8	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  037dd	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1359 : 		lpObj->SetOpIncAGValue += iIncValue;

  037e0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  037e3	0f bf 88 2e 11
	00 00		 movsx	 ecx, WORD PTR [eax+4398]
  037ea	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  037ed	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  037f0	66 89 8a 2e 11
	00 00		 mov	 WORD PTR [edx+4398], cx

; 1360 : 		break;

  037f7	eb 1a		 jmp	 SHORT $LN8@ApplySocke@5
$LN1@ApplySocke@5:

; 1361 : 	case 27:
; 1362 : 		lpObj->MonsterDieGetMoney += wOptionValue;

  037f9	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  037fd	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03800	0f bf 91 72 01
	00 00		 movsx	 edx, WORD PTR [ecx+370]
  03807	03 d0		 add	 edx, eax
  03809	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0380c	66 89 90 72 01
	00 00		 mov	 WORD PTR [eax+370], dx
$LN8@ApplySocke@5:

; 1363 : 		break;
; 1364 : 	}
; 1365 : }

  03813	5f		 pop	 edi
  03814	5e		 pop	 esi
  03815	5b		 pop	 ebx
  03816	8b e5		 mov	 esp, ebp
  03818	5d		 pop	 ebp
  03819	c2 10 00	 ret	 16			; 00000010H
$LN12@ApplySocke@5:
  0381c	00 00 00 00	 DD	 $LN7@ApplySocke@5
  03820	00 00 00 00	 DD	 $LN6@ApplySocke@5
  03824	00 00 00 00	 DD	 $LN5@ApplySocke@5
  03828	00 00 00 00	 DD	 $LN4@ApplySocke@5
  0382c	00 00 00 00	 DD	 $LN3@ApplySocke@5
  03830	00 00 00 00	 DD	 $LN2@ApplySocke@5
  03834	00 00 00 00	 DD	 $LN1@ApplySocke@5
?ApplySocketWindEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketWindEffect
; Function compile flags: /Odtp /ZI
tv65 = -76						; size = 4
_iIncValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketLightningEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketLightningEffect
; _this$ = ecx

; 1369 : {

  03840	55		 push	 ebp
  03841	8b ec		 mov	 ebp, esp
  03843	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03846	53		 push	 ebx
  03847	56		 push	 esi
  03848	57		 push	 edi
  03849	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1370 : 	int iIncValue = 0;

  0384c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIncValue$[ebp], 0

; 1371 : 
; 1372 : 	switch(btEffectType)

  03853	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  03857	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0385a	8b 4d b4	 mov	 ecx, DWORD PTR tv65[ebp]
  0385d	83 e9 1d	 sub	 ecx, 29			; 0000001dH
  03860	89 4d b4	 mov	 DWORD PTR tv65[ebp], ecx
  03863	83 7d b4 03	 cmp	 DWORD PTR tv65[ebp], 3
  03867	0f 87 aa 00 00
	00		 ja	 $LN7@ApplySocke@6
  0386d	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  03870	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN9@ApplySocke@6[edx*4]
$LN4@ApplySocke@6:

; 1373 : 	{
; 1374 : 	case 29:
; 1375 : 		iIncValue = this->_CalcIncreaseValue(lpObj->SetOpAddExDamage,wOptionValue,btOptionType);

  03877	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  0387b	50		 push	 eax
  0387c	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03880	51		 push	 ecx
  03881	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03884	0f bf 82 26 11
	00 00		 movsx	 eax, WORD PTR [edx+4390]
  0388b	50		 push	 eax
  0388c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0388f	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03894	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1376 : 		lpObj->SetOpAddExDamage += iIncValue;

  03897	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0389a	0f bf 88 26 11
	00 00		 movsx	 ecx, WORD PTR [eax+4390]
  038a1	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  038a4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  038a7	66 89 8a 26 11
	00 00		 mov	 WORD PTR [edx+4390], cx

; 1377 : 		break;

  038ae	eb 67		 jmp	 SHORT $LN7@ApplySocke@6
$LN3@ApplySocke@6:

; 1378 : 	case 30:
; 1379 : 		lpObj->m_ExcelentDamage += wOptionValue;

  038b0	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  038b4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  038b7	03 81 c0 04 00
	00		 add	 eax, DWORD PTR [ecx+1216]
  038bd	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  038c0	89 82 c0 04 00
	00		 mov	 DWORD PTR [edx+1216], eax

; 1380 : 		break;

  038c6	eb 4f		 jmp	 SHORT $LN7@ApplySocke@6
$LN2@ApplySocke@6:

; 1381 : 	case 31:
; 1382 : 		iIncValue = this->_CalcIncreaseValue(lpObj->SetOpAddCriticalDamage,wOptionValue,btOptionType);

  038c8	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  038cc	50		 push	 eax
  038cd	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  038d1	51		 push	 ecx
  038d2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  038d5	0f bf 82 2a 11
	00 00		 movsx	 eax, WORD PTR [edx+4394]
  038dc	50		 push	 eax
  038dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  038e0	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  038e5	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1383 : 		lpObj->SetOpAddCriticalDamage += iIncValue;

  038e8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  038eb	0f bf 88 2a 11
	00 00		 movsx	 ecx, WORD PTR [eax+4394]
  038f2	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  038f5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  038f8	66 89 8a 2a 11
	00 00		 mov	 WORD PTR [edx+4394], cx

; 1384 : 		break;

  038ff	eb 16		 jmp	 SHORT $LN7@ApplySocke@6
$LN1@ApplySocke@6:

; 1385 : 	case 32:
; 1386 : 		lpObj->m_CriticalDamage += wOptionValue;

  03901	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  03905	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03908	03 81 bc 04 00
	00		 add	 eax, DWORD PTR [ecx+1212]
  0390e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03911	89 82 bc 04 00
	00		 mov	 DWORD PTR [edx+1212], eax
$LN7@ApplySocke@6:

; 1387 : 		break;
; 1388 : 	}
; 1389 : }

  03917	5f		 pop	 edi
  03918	5e		 pop	 esi
  03919	5b		 pop	 ebx
  0391a	8b e5		 mov	 esp, ebp
  0391c	5d		 pop	 ebp
  0391d	c2 10 00	 ret	 16			; 00000010H
$LN9@ApplySocke@6:
  03920	00 00 00 00	 DD	 $LN4@ApplySocke@6
  03924	00 00 00 00	 DD	 $LN3@ApplySocke@6
  03928	00 00 00 00	 DD	 $LN2@ApplySocke@6
  0392c	00 00 00 00	 DD	 $LN1@ApplySocke@6
?ApplySocketLightningEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketLightningEffect
; Function compile flags: /Odtp /ZI
tv65 = -76						; size = 4
_iIncValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketEarthEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketEarthEffect
; _this$ = ecx

; 1393 : {

  03930	55		 push	 ebp
  03931	8b ec		 mov	 ebp, esp
  03933	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03936	53		 push	 ebx
  03937	56		 push	 esi
  03938	57		 push	 edi
  03939	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1394 : 	int iIncValue = 0;

  0393c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIncValue$[ebp], 0

; 1395 : 	
; 1396 : 	switch(btEffectType)

  03943	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  03947	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0394a	8b 4d b4	 mov	 ecx, DWORD PTR tv65[ebp]
  0394d	83 e9 22	 sub	 ecx, 34			; 00000022H
  03950	89 4d b4	 mov	 DWORD PTR tv65[ebp], ecx
  03953	83 7d b4 03	 cmp	 DWORD PTR tv65[ebp], 3
  03957	0f 87 22 01 00
	00		 ja	 $LN7@ApplySocke@7
  0395d	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  03960	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN9@ApplySocke@7[edx*4]
$LN4@ApplySocke@7:

; 1397 : 	{
; 1398 : 	case 34:
; 1399 : 		iIncValue = this->_CalcIncreaseValue(lpObj->Strength+lpObj->AddStrength,wOptionValue,btOptionType);

  03967	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  0396b	50		 push	 eax
  0396c	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03970	51		 push	 ecx
  03971	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03974	0f b7 82 f4 00
	00 00		 movzx	 eax, WORD PTR [edx+244]
  0397b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0397e	0f bf 91 20 01
	00 00		 movsx	 edx, WORD PTR [ecx+288]
  03985	03 c2		 add	 eax, edx
  03987	50		 push	 eax
  03988	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0398b	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03990	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1400 : 		lpObj->AddStrength += iIncValue;

  03993	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03996	0f bf 88 20 01
	00 00		 movsx	 ecx, WORD PTR [eax+288]
  0399d	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  039a0	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  039a3	66 89 8a 20 01
	00 00		 mov	 WORD PTR [edx+288], cx

; 1401 : 		break;

  039aa	e9 d0 00 00 00	 jmp	 $LN7@ApplySocke@7
$LN3@ApplySocke@7:

; 1402 : 	case 35:
; 1403 : 		iIncValue = this->_CalcIncreaseValue(lpObj->Dexterity+lpObj->AddDexterity,wOptionValue,btOptionType);

  039af	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  039b3	50		 push	 eax
  039b4	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  039b8	51		 push	 ecx
  039b9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  039bc	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  039c3	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  039c6	0f bf 91 22 01
	00 00		 movsx	 edx, WORD PTR [ecx+290]
  039cd	03 c2		 add	 eax, edx
  039cf	50		 push	 eax
  039d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  039d3	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  039d8	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1404 : 		lpObj->AddDexterity += iIncValue;

  039db	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  039de	0f bf 88 22 01
	00 00		 movsx	 ecx, WORD PTR [eax+290]
  039e5	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  039e8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  039eb	66 89 8a 22 01
	00 00		 mov	 WORD PTR [edx+290], cx

; 1405 : 		break;

  039f2	e9 88 00 00 00	 jmp	 $LN7@ApplySocke@7
$LN2@ApplySocke@7:

; 1406 : 	case 36:
; 1407 : 		iIncValue = this->_CalcIncreaseValue(lpObj->Vitality+lpObj->AddVitality,wOptionValue,btOptionType);

  039f7	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  039fb	50		 push	 eax
  039fc	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03a00	51		 push	 ecx
  03a01	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03a04	0f b7 82 f8 00
	00 00		 movzx	 eax, WORD PTR [edx+248]
  03a0b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03a0e	0f bf 91 24 01
	00 00		 movsx	 edx, WORD PTR [ecx+292]
  03a15	03 c2		 add	 eax, edx
  03a17	50		 push	 eax
  03a18	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a1b	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03a20	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1408 : 		lpObj->AddVitality += iIncValue;

  03a23	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03a26	0f bf 88 24 01
	00 00		 movsx	 ecx, WORD PTR [eax+292]
  03a2d	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03a30	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03a33	66 89 8a 24 01
	00 00		 mov	 WORD PTR [edx+292], cx

; 1409 : 		break;

  03a3a	eb 43		 jmp	 SHORT $LN7@ApplySocke@7
$LN1@ApplySocke@7:

; 1410 : 	case 37:
; 1411 : 		iIncValue = this->_CalcIncreaseValue(lpObj->Energy+lpObj->AddEnergy,wOptionValue,btOptionType);

  03a3c	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03a40	50		 push	 eax
  03a41	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03a45	51		 push	 ecx
  03a46	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03a49	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  03a50	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03a53	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  03a5a	03 c2		 add	 eax, edx
  03a5c	50		 push	 eax
  03a5d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a60	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03a65	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1412 : 		lpObj->AddEnergy += iIncValue;

  03a68	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03a6b	0f bf 88 26 01
	00 00		 movsx	 ecx, WORD PTR [eax+294]
  03a72	03 4d f8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03a75	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03a78	66 89 8a 26 01
	00 00		 mov	 WORD PTR [edx+294], cx
$LN7@ApplySocke@7:

; 1413 : 		break;
; 1414 : 	}
; 1415 : }

  03a7f	5f		 pop	 edi
  03a80	5e		 pop	 esi
  03a81	5b		 pop	 ebx
  03a82	8b e5		 mov	 esp, ebp
  03a84	5d		 pop	 ebp
  03a85	c2 10 00	 ret	 16			; 00000010H
$LN9@ApplySocke@7:
  03a88	00 00 00 00	 DD	 $LN4@ApplySocke@7
  03a8c	00 00 00 00	 DD	 $LN3@ApplySocke@7
  03a90	00 00 00 00	 DD	 $LN2@ApplySocke@7
  03a94	00 00 00 00	 DD	 $LN1@ApplySocke@7
?ApplySocketEarthEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketEarthEffect
; Function compile flags: /Odtp /ZI
_iIncValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketReservedEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketReservedEffect
; _this$ = ecx

; 1419 : {

  03aa0	55		 push	 ebp
  03aa1	8b ec		 mov	 ebp, esp
  03aa3	83 ec 48	 sub	 esp, 72			; 00000048H
  03aa6	53		 push	 ebx
  03aa7	56		 push	 esi
  03aa8	57		 push	 edi
  03aa9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1420 : 	int iIncValue = btEffectType;

  03aac	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  03ab0	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1421 : }

  03ab3	5f		 pop	 edi
  03ab4	5e		 pop	 esi
  03ab5	5b		 pop	 ebx
  03ab6	8b e5		 mov	 esp, ebp
  03ab8	5d		 pop	 ebp
  03ab9	c2 10 00	 ret	 16			; 00000010H
?ApplySocketReservedEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketReservedEffect
; Function compile flags: /Odtp /ZI
tv65 = -76						; size = 4
_iIncValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketBonusEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketBonusEffect
; _this$ = ecx

; 1425 : {

  03ac0	55		 push	 ebp
  03ac1	8b ec		 mov	 ebp, esp
  03ac3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03ac6	53		 push	 ebx
  03ac7	56		 push	 esi
  03ac8	57		 push	 edi
  03ac9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1426 : 	int iIncValue = 0;

  03acc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIncValue$[ebp], 0

; 1427 : 	
; 1428 : 	switch(btEffectType)

  03ad3	8a 45 0c	 mov	 al, BYTE PTR _btEffectType$[ebp]
  03ad6	88 45 b4	 mov	 BYTE PTR tv65[ebp], al
  03ad9	80 7d b4 2c	 cmp	 BYTE PTR tv65[ebp], 44	; 0000002cH
  03add	74 08		 je	 SHORT $LN2@ApplySocke@8
  03adf	80 7d b4 2d	 cmp	 BYTE PTR tv65[ebp], 45	; 0000002dH
  03ae3	74 1d		 je	 SHORT $LN1@ApplySocke@8
  03ae5	eb 34		 jmp	 SHORT $LN5@ApplySocke@8
$LN2@ApplySocke@8:

; 1429 : 	{
; 1430 : 	case 44:
; 1431 : 		lpObj->SetOpDoubleDamage += wOptionValue;

  03ae7	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  03aeb	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03aee	0f b6 91 3f 11
	00 00		 movzx	 edx, BYTE PTR [ecx+4415]
  03af5	03 d0		 add	 edx, eax
  03af7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03afa	88 90 3f 11 00
	00		 mov	 BYTE PTR [eax+4415], dl

; 1432 : 		break;

  03b00	eb 19		 jmp	 SHORT $LN5@ApplySocke@8
$LN1@ApplySocke@8:

; 1433 : 	case 45:
; 1434 : 		lpObj->SetOpIgnoreDefense += wOptionValue;

  03b02	0f b7 45 14	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  03b06	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03b09	0f b6 91 3e 11
	00 00		 movzx	 edx, BYTE PTR [ecx+4414]
  03b10	03 d0		 add	 edx, eax
  03b12	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03b15	88 90 3e 11 00
	00		 mov	 BYTE PTR [eax+4414], dl
$LN5@ApplySocke@8:

; 1435 : 		break;
; 1436 : 	}
; 1437 : }

  03b1b	5f		 pop	 edi
  03b1c	5e		 pop	 esi
  03b1d	5b		 pop	 ebx
  03b1e	8b e5		 mov	 esp, ebp
  03b20	5d		 pop	 ebp
  03b21	c2 10 00	 ret	 16			; 00000010H
?ApplySocketBonusEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketBonusEffect
; Function compile flags: /Odtp /ZI
tv67 = -76						; size = 4
_iIncValue$ = -8					; size = 4
_this$ = -4						; size = 4
_iValue$ = 8						; size = 4
_wOptionValue$ = 12					; size = 2
_btOptionType$ = 16					; size = 1
?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z PROC	; CSocketOption::_CalcIncreaseValue
; _this$ = ecx

; 1441 : {

  03b30	55		 push	 ebp
  03b31	8b ec		 mov	 ebp, esp
  03b33	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03b36	53		 push	 ebx
  03b37	56		 push	 esi
  03b38	57		 push	 edi
  03b39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 : 	int iIncValue = 0;

  03b3c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIncValue$[ebp], 0

; 1443 : 
; 1444 : 	if(wOptionValue == 0)

  03b43	0f b7 45 0c	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  03b47	85 c0		 test	 eax, eax
  03b49	75 04		 jne	 SHORT $LN9@CalcIncrea

; 1445 : 	{
; 1446 : 		return 0;

  03b4b	33 c0		 xor	 eax, eax
  03b4d	eb 73		 jmp	 SHORT $LN10@CalcIncrea
$LN9@CalcIncrea:

; 1447 : 	}
; 1448 : 	
; 1449 : 	switch(btOptionType)

  03b4f	0f b6 45 10	 movzx	 eax, BYTE PTR _btOptionType$[ebp]
  03b53	89 45 b4	 mov	 DWORD PTR tv67[ebp], eax
  03b56	8b 4d b4	 mov	 ecx, DWORD PTR tv67[ebp]
  03b59	83 e9 01	 sub	 ecx, 1
  03b5c	89 4d b4	 mov	 DWORD PTR tv67[ebp], ecx
  03b5f	83 7d b4 04	 cmp	 DWORD PTR tv67[ebp], 4
  03b63	77 55		 ja	 SHORT $LN1@CalcIncrea
  03b65	8b 55 b4	 mov	 edx, DWORD PTR tv67[ebp]
  03b68	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN12@CalcIncrea[edx*4]
$LN6@CalcIncrea:

; 1450 : 	{
; 1451 : 	case 1:iIncValue = wOptionValue;					break;

  03b6f	0f b7 45 0c	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  03b73	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax
  03b76	eb 47		 jmp	 SHORT $LN7@CalcIncrea
$LN5@CalcIncrea:

; 1452 : 	case 2:iIncValue = iValue * wOptionValue / 100;		break;

  03b78	0f b7 45 0c	 movzx	 eax, WORD PTR _wOptionValue$[ebp]
  03b7c	0f af 45 08	 imul	 eax, DWORD PTR _iValue$[ebp]
  03b80	99		 cdq
  03b81	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03b86	f7 f9		 idiv	 ecx
  03b88	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax
  03b8b	eb 32		 jmp	 SHORT $LN7@CalcIncrea
$LN4@CalcIncrea:

; 1453 : 	case 3:iIncValue = iValue / wOptionValue;			break;

  03b8d	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03b91	8b 45 08	 mov	 eax, DWORD PTR _iValue$[ebp]
  03b94	99		 cdq
  03b95	f7 f9		 idiv	 ecx
  03b97	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax
  03b9a	eb 23		 jmp	 SHORT $LN7@CalcIncrea
$LN3@CalcIncrea:

; 1454 : 	case 4:iIncValue = iValue / wOptionValue;			break;

  03b9c	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03ba0	8b 45 08	 mov	 eax, DWORD PTR _iValue$[ebp]
  03ba3	99		 cdq
  03ba4	f7 f9		 idiv	 ecx
  03ba6	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax
  03ba9	eb 14		 jmp	 SHORT $LN7@CalcIncrea
$LN2@CalcIncrea:

; 1455 : 	case 5:iIncValue = iValue / wOptionValue;			break;

  03bab	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  03baf	8b 45 08	 mov	 eax, DWORD PTR _iValue$[ebp]
  03bb2	99		 cdq
  03bb3	f7 f9		 idiv	 ecx
  03bb5	89 45 f8	 mov	 DWORD PTR _iIncValue$[ebp], eax
  03bb8	eb 05		 jmp	 SHORT $LN7@CalcIncrea
$LN1@CalcIncrea:

; 1456 : 	default: return -1;									break;

  03bba	83 c8 ff	 or	 eax, -1
  03bbd	eb 03		 jmp	 SHORT $LN10@CalcIncrea
$LN7@CalcIncrea:

; 1457 : 	
; 1458 : 	}
; 1459 : 
; 1460 : 	return iIncValue;

  03bbf	8b 45 f8	 mov	 eax, DWORD PTR _iIncValue$[ebp]
$LN10@CalcIncrea:

; 1461 : }

  03bc2	5f		 pop	 edi
  03bc3	5e		 pop	 esi
  03bc4	5b		 pop	 ebx
  03bc5	8b e5		 mov	 esp, ebp
  03bc7	5d		 pop	 ebp
  03bc8	c2 0c 00	 ret	 12			; 0000000cH
  03bcb	90		 npad	 1
$LN12@CalcIncrea:
  03bcc	00 00 00 00	 DD	 $LN6@CalcIncrea
  03bd0	00 00 00 00	 DD	 $LN5@CalcIncrea
  03bd4	00 00 00 00	 DD	 $LN4@CalcIncrea
  03bd8	00 00 00 00	 DD	 $LN3@CalcIncrea
  03bdc	00 00 00 00	 DD	 $LN2@CalcIncrea
?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ENDP	; CSocketOption::_CalcIncreaseValue
_TEXT	ENDS
PUBLIC	?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z ; CSocketOption::ApplySocketEffectforWeapons
xdata$x	SEGMENT
__unwindtable$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z$0
__ehfuncinfo$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_i$228263 = -44						; size = 4
_iIncValue$ = -40					; size = 4
_SeedSphere$ = -36					; size = 16
_loc7$ = -19						; size = 1
_loc6$ = -18						; size = 1
_loc5$ = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpItem$ = 8						; size = 4
?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z PROC ; CSocketOption::ApplySocketEffectforWeapons
; _this$ = ecx

; 1466 : {

  03be0	55		 push	 ebp
  03be1	8b ec		 mov	 ebp, esp
  03be3	6a ff		 push	 -1
  03be5	68 00 00 00 00	 push	 __ehhandler$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z
  03bea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  03bf0	50		 push	 eax
  03bf1	83 ec 60	 sub	 esp, 96			; 00000060H
  03bf4	53		 push	 ebx
  03bf5	56		 push	 esi
  03bf6	57		 push	 edi
  03bf7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  03bfc	33 c5		 xor	 eax, ebp
  03bfe	50		 push	 eax
  03bff	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  03c02	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  03c08	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1467 : 	if(lpItem == NULL)

  03c0b	83 7d 08 00	 cmp	 DWORD PTR _lpItem$[ebp], 0
  03c0f	75 05		 jne	 SHORT $LN14@ApplySocke@9

; 1468 : 	{
; 1469 : 		return;

  03c11	e9 a0 01 00 00	 jmp	 $LN15@ApplySocke@9
$LN14@ApplySocke@9:

; 1470 : 	}
; 1471 : 
; 1472 : 	if(lpItem->IsItem() == FALSE || this->IsSocketOption(lpItem) == FALSE)

  03c16	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  03c19	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  03c1e	85 c0		 test	 eax, eax
  03c20	74 13		 je	 SHORT $LN12@ApplySocke@9
  03c22	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  03c25	50		 push	 eax
  03c26	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03c29	e8 00 00 00 00	 call	 ?IsSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsSocketOption
  03c2e	0f b6 c8	 movzx	 ecx, al
  03c31	85 c9		 test	 ecx, ecx
  03c33	75 05		 jne	 SHORT $LN13@ApplySocke@9
$LN12@ApplySocke@9:

; 1473 : 	{
; 1474 : 		return ;

  03c35	e9 7c 01 00 00	 jmp	 $LN15@ApplySocke@9
$LN13@ApplySocke@9:

; 1475 : 	}
; 1476 : 	
; 1477 : 	BYTE loc5 = 0;

  03c3a	c6 45 ef 00	 mov	 BYTE PTR _loc5$[ebp], 0

; 1478 : 	BYTE loc6 = 0;

  03c3e	c6 45 ee 00	 mov	 BYTE PTR _loc6$[ebp], 0

; 1479 : 	BYTE loc7 = 0;

  03c42	c6 45 ed 00	 mov	 BYTE PTR _loc7$[ebp], 0

; 1480 : 	CSeedSphere SeedSphere;

  03c46	8d 4d dc	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  03c49	e8 00 00 00 00	 call	 ??0CSeedSphere@@QAE@XZ	; CSeedSphere::CSeedSphere
  03c4e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1481 : 	int iIncValue = 0;

  03c55	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _iIncValue$[ebp], 0

; 1482 : 
; 1483 : 	for(int i = 0;i < 5; i ++)

  03c5c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$228263[ebp], 0
  03c63	eb 09		 jmp	 SHORT $LN11@ApplySocke@9
$LN10@ApplySocke@9:
  03c65	8b 45 d4	 mov	 eax, DWORD PTR _i$228263[ebp]
  03c68	83 c0 01	 add	 eax, 1
  03c6b	89 45 d4	 mov	 DWORD PTR _i$228263[ebp], eax
$LN11@ApplySocke@9:
  03c6e	83 7d d4 05	 cmp	 DWORD PTR _i$228263[ebp], 5
  03c72	0f 8d 2f 01 00
	00		 jge	 $LN9@ApplySocke@9

; 1484 : 	{
; 1485 : 		if(lpItem->m_SocketOption[i] == 0xFF || lpItem->m_SocketOption[i] == 0xFE)

  03c78	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  03c7b	03 45 d4	 add	 eax, DWORD PTR _i$228263[ebp]
  03c7e	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  03c85	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  03c8b	74 15		 je	 SHORT $LN7@ApplySocke@9
  03c8d	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  03c90	03 45 d4	 add	 eax, DWORD PTR _i$228263[ebp]
  03c93	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  03c9a	81 f9 fe 00 00
	00		 cmp	 ecx, 254		; 000000feH
  03ca0	75 02		 jne	 SHORT $LN8@ApplySocke@9
$LN7@ApplySocke@9:

; 1486 : 		{
; 1487 : 			continue;

  03ca2	eb c1		 jmp	 SHORT $LN10@ApplySocke@9
$LN8@ApplySocke@9:

; 1488 : 		}
; 1489 : 		
; 1490 : 		loc7 = lpItem->m_SocketOption[i];

  03ca4	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  03ca7	03 45 d4	 add	 eax, DWORD PTR _i$228263[ebp]
  03caa	8a 88 cc 00 00
	00		 mov	 cl, BYTE PTR [eax+204]
  03cb0	88 4d ed	 mov	 BYTE PTR _loc7$[ebp], cl

; 1491 : 		loc5 = loc7 % 50;

  03cb3	0f b6 45 ed	 movzx	 eax, BYTE PTR _loc7$[ebp]
  03cb7	99		 cdq
  03cb8	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  03cbd	f7 f9		 idiv	 ecx
  03cbf	88 55 ef	 mov	 BYTE PTR _loc5$[ebp], dl

; 1492 : 		loc6 = (loc7 - loc5) / 50 + 1;

  03cc2	0f b6 45 ed	 movzx	 eax, BYTE PTR _loc7$[ebp]
  03cc6	0f b6 4d ef	 movzx	 ecx, BYTE PTR _loc5$[ebp]
  03cca	2b c1		 sub	 eax, ecx
  03ccc	99		 cdq
  03ccd	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  03cd2	f7 f9		 idiv	 ecx
  03cd4	83 c0 01	 add	 eax, 1
  03cd7	88 45 ee	 mov	 BYTE PTR _loc6$[ebp], al

; 1493 : 		
; 1494 : 		if(this->SetSeedSphereData(&SeedSphere,loc5,loc6) == NULL)

  03cda	0f b6 45 ee	 movzx	 eax, BYTE PTR _loc6$[ebp]
  03cde	50		 push	 eax
  03cdf	0f b6 4d ef	 movzx	 ecx, BYTE PTR _loc5$[ebp]
  03ce3	51		 push	 ecx
  03ce4	8d 55 dc	 lea	 edx, DWORD PTR _SeedSphere$[ebp]
  03ce7	52		 push	 edx
  03ce8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03ceb	e8 00 00 00 00	 call	 ?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z ; CSocketOption::SetSeedSphereData
  03cf0	0f b6 c0	 movzx	 eax, al
  03cf3	85 c0		 test	 eax, eax
  03cf5	75 05		 jne	 SHORT $LN6@ApplySocke@9

; 1495 : 		{
; 1496 : 			continue;

  03cf7	e9 69 ff ff ff	 jmp	 $LN10@ApplySocke@9
$LN6@ApplySocke@9:

; 1497 : 		}
; 1498 : 
; 1499 : 		if(loc5 == 38)

  03cfc	0f b6 45 ef	 movzx	 eax, BYTE PTR _loc5$[ebp]
  03d00	83 f8 26	 cmp	 eax, 38			; 00000026H
  03d03	75 39		 jne	 SHORT $LN5@ApplySocke@9

; 1500 : 		{
; 1501 : 			iIncValue = this->_CalcIncreaseValue(lpItem->m_HJOpStrength,SeedSphere.m_wSocketSlot,SeedSphere.m_btOptionType);

  03d05	0f b6 45 e5	 movzx	 eax, BYTE PTR _SeedSphere$[ebp+9]
  03d09	50		 push	 eax
  03d0a	0f b7 4d e6	 movzx	 ecx, WORD PTR _SeedSphere$[ebp+10]
  03d0e	51		 push	 ecx
  03d0f	8b 55 08	 mov	 edx, DWORD PTR _lpItem$[ebp]
  03d12	0f b7 82 c6 00
	00 00		 movzx	 eax, WORD PTR [edx+198]
  03d19	50		 push	 eax
  03d1a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03d1d	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03d22	89 45 d8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1502 : 			lpItem->m_HJOpStrength += iIncValue;

  03d25	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  03d28	0f b7 88 c6 00
	00 00		 movzx	 ecx, WORD PTR [eax+198]
  03d2f	03 4d d8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03d32	8b 55 08	 mov	 edx, DWORD PTR _lpItem$[ebp]
  03d35	66 89 8a c6 00
	00 00		 mov	 WORD PTR [edx+198], cx
  03d3c	eb 64		 jmp	 SHORT $LN4@ApplySocke@9
$LN5@ApplySocke@9:

; 1503 : 		}
; 1504 : 
; 1505 : 		else if(loc5 == 39)

  03d3e	0f b6 45 ef	 movzx	 eax, BYTE PTR _loc5$[ebp]
  03d42	83 f8 27	 cmp	 eax, 39			; 00000027H
  03d45	75 39		 jne	 SHORT $LN3@ApplySocke@9

; 1506 : 		{
; 1507 : 			iIncValue = this->_CalcIncreaseValue(lpItem->m_HJOpDexterity,SeedSphere.m_wSocketSlot,SeedSphere.m_btOptionType);

  03d47	0f b6 45 e5	 movzx	 eax, BYTE PTR _SeedSphere$[ebp+9]
  03d4b	50		 push	 eax
  03d4c	0f b7 4d e6	 movzx	 ecx, WORD PTR _SeedSphere$[ebp+10]
  03d50	51		 push	 ecx
  03d51	8b 55 08	 mov	 edx, DWORD PTR _lpItem$[ebp]
  03d54	0f b7 82 c8 00
	00 00		 movzx	 eax, WORD PTR [edx+200]
  03d5b	50		 push	 eax
  03d5c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03d5f	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  03d64	89 45 d8	 mov	 DWORD PTR _iIncValue$[ebp], eax

; 1508 : 			lpItem->m_HJOpDexterity += iIncValue;

  03d67	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  03d6a	0f b7 88 c8 00
	00 00		 movzx	 ecx, WORD PTR [eax+200]
  03d71	03 4d d8	 add	 ecx, DWORD PTR _iIncValue$[ebp]
  03d74	8b 55 08	 mov	 edx, DWORD PTR _lpItem$[ebp]
  03d77	66 89 8a c8 00
	00 00		 mov	 WORD PTR [edx+200], cx
  03d7e	eb 22		 jmp	 SHORT $LN4@ApplySocke@9
$LN3@ApplySocke@9:

; 1509 : 		}
; 1510 : 
; 1511 : 		else if(loc5 == 20)

  03d80	0f b6 45 ef	 movzx	 eax, BYTE PTR _loc5$[ebp]
  03d84	83 f8 14	 cmp	 eax, 20			; 00000014H
  03d87	75 19		 jne	 SHORT $LN4@ApplySocke@9

; 1512 : 		{
; 1513 : 			lpItem->m_SocketBonus += SeedSphere.m_wSocketSlot;

  03d89	0f b7 45 e6	 movzx	 eax, WORD PTR _SeedSphere$[ebp+10]
  03d8d	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  03d90	0f b6 91 d1 00
	00 00		 movzx	 edx, BYTE PTR [ecx+209]
  03d97	03 d0		 add	 edx, eax
  03d99	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  03d9c	88 90 d1 00 00
	00		 mov	 BYTE PTR [eax+209], dl
$LN4@ApplySocke@9:

; 1514 : 		}
; 1515 : 	}

  03da2	e9 be fe ff ff	 jmp	 $LN10@ApplySocke@9
$LN9@ApplySocke@9:

; 1516 : }

  03da7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03dae	8d 4d dc	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  03db1	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
$LN15@ApplySocke@9:
  03db6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  03db9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  03dc0	59		 pop	 ecx
  03dc1	5f		 pop	 edi
  03dc2	5e		 pop	 esi
  03dc3	5b		 pop	 ebx
  03dc4	8b e5		 mov	 esp, ebp
  03dc6	5d		 pop	 ebp
  03dc7	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z$0:
  00133	8d 4d dc	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  00136	e9 00 00 00 00	 jmp	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
__ehhandler$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z:
  0013b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0013f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00142	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00145	33 c8		 xor	 ecx, eax
  00147	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z
  00151	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z ENDP ; CSocketOption::ApplySocketEffectforWeapons
PUBLIC	?ClearSlotOption@CSocketOption@@QAEXPAVCItem@@E@Z ; CSocketOption::ClearSlotOption
EXTRN	?ClearSocketOption@CItem@@QAEXE@Z:PROC		; CItem::ClearSocketOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpItem$ = 8						; size = 4
_btSocketSlotCount$ = 12				; size = 1
?ClearSlotOption@CSocketOption@@QAEXPAVCItem@@E@Z PROC	; CSocketOption::ClearSlotOption
; _this$ = ecx

; 1520 : {

  03dd0	55		 push	 ebp
  03dd1	8b ec		 mov	 ebp, esp
  03dd3	83 ec 44	 sub	 esp, 68			; 00000044H
  03dd6	53		 push	 ebx
  03dd7	56		 push	 esi
  03dd8	57		 push	 edi
  03dd9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1521 : 	lpItem->ClearSocketOption(btSocketSlotCount);

  03ddc	0f b6 45 0c	 movzx	 eax, BYTE PTR _btSocketSlotCount$[ebp]
  03de0	50		 push	 eax
  03de1	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  03de4	e8 00 00 00 00	 call	 ?ClearSocketOption@CItem@@QAEXE@Z ; CItem::ClearSocketOption

; 1522 : }

  03de9	5f		 pop	 edi
  03dea	5e		 pop	 esi
  03deb	5b		 pop	 ebx
  03dec	8b e5		 mov	 esp, ebp
  03dee	5d		 pop	 ebp
  03def	c2 08 00	 ret	 8
?ClearSlotOption@CSocketOption@@QAEXPAVCItem@@E@Z ENDP	; CSocketOption::ClearSlotOption
_TEXT	ENDS
PUBLIC	?GetRandomSlotCount@CSocketOption@@QAEEH@Z	; CSocketOption::GetRandomSlotCount
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
_item_num$ = 8						; size = 4
?GetRandomSlotCount@CSocketOption@@QAEEH@Z PROC		; CSocketOption::GetRandomSlotCount
; _this$ = ecx

; 1526 : {

  03e00	55		 push	 ebp
  03e01	8b ec		 mov	 ebp, esp
  03e03	83 ec 48	 sub	 esp, 72			; 00000048H
  03e06	53		 push	 ebx
  03e07	56		 push	 esi
  03e08	57		 push	 edi
  03e09	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1527 : 	int loc2 = 0;

  03e0c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 0

; 1528 : 
; 1529 : 	if(ItemAttribute[item_num].HaveItemInfo == 1)

  03e13	8b 45 08	 mov	 eax, DWORD PTR _item_num$[ebp]
  03e16	6b c0 70	 imul	 eax, 112		; 00000070H
  03e19	0f b6 88 20 00
	00 00		 movzx	 ecx, BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+32]
  03e20	83 f9 01	 cmp	 ecx, 1
  03e23	75 39		 jne	 SHORT $LN3@GetRandomS

; 1530 : 	{
; 1531 : 		if(ItemAttribute[item_num].TwoHand == 0)

  03e25	8b 45 08	 mov	 eax, DWORD PTR _item_num$[ebp]
  03e28	6b c0 70	 imul	 eax, 112		; 00000070H
  03e2b	0f b6 88 21 00
	00 00		 movzx	 ecx, BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+33]
  03e32	85 c9		 test	 ecx, ecx
  03e34	75 15		 jne	 SHORT $LN2@GetRandomS

; 1532 : 		{
; 1533 : 			loc2 = this->SocketSlotRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  03e36	6a 01		 push	 1
  03e38	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e3b	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  03e41	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  03e46	89 45 f8	 mov	 DWORD PTR _loc2$[ebp], eax

; 1534 : 		}
; 1535 : 		else

  03e49	eb 13		 jmp	 SHORT $LN3@GetRandomS
$LN2@GetRandomS:

; 1536 : 		{
; 1537 : 			loc2 = this->TwoHandWeaponSocketSlotRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  03e4b	6a 01		 push	 1
  03e4d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e50	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  03e56	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  03e5b	89 45 f8	 mov	 DWORD PTR _loc2$[ebp], eax
$LN3@GetRandomS:

; 1538 : 		}
; 1539 : 	}
; 1540 : 
; 1541 : 	return loc2;

  03e5e	8a 45 f8	 mov	 al, BYTE PTR _loc2$[ebp]

; 1542 : }

  03e61	5f		 pop	 edi
  03e62	5e		 pop	 esi
  03e63	5b		 pop	 ebx
  03e64	8b e5		 mov	 esp, ebp
  03e66	5d		 pop	 ebp
  03e67	c2 04 00	 ret	 4
?GetRandomSlotCount@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::GetRandomSlotCount
_TEXT	ENDS
PUBLIC	?ClearSocketData@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::ClearSocketData
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?ClearSocketData@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::ClearSocketData
; _this$ = ecx

; 1547 : {

  03e70	55		 push	 ebp
  03e71	8b ec		 mov	 ebp, esp
  03e73	83 ec 48	 sub	 esp, 72			; 00000048H
  03e76	53		 push	 ebx
  03e77	56		 push	 esi
  03e78	57		 push	 edi
  03e79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1548 : 	int i = 0;

  03e7c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 1549 : 
; 1550 : 	if(lpObj == NULL)

  03e83	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  03e87	75 05		 jne	 SHORT $LN11@ClearSocke

; 1551 : 	{
; 1552 : 		return;

  03e89	e9 9e 00 00 00	 jmp	 $LN12@ClearSocke
$LN11@ClearSocke:

; 1553 : 	}
; 1554 : 
; 1555 : 	if(lpObj->Type != 1)

  03e8e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03e91	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  03e95	83 f9 01	 cmp	 ecx, 1
  03e98	74 05		 je	 SHORT $LN10@ClearSocke

; 1556 : 	{
; 1557 : 		return;

  03e9a	e9 8d 00 00 00	 jmp	 $LN12@ClearSocke
$LN10@ClearSocke:

; 1558 : 	}
; 1559 : 
; 1560 : 	for(i = 0;i < 35; i++)

  03e9f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  03ea6	eb 09		 jmp	 SHORT $LN9@ClearSocke
$LN8@ClearSocke:
  03ea8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  03eab	83 c0 01	 add	 eax, 1
  03eae	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN9@ClearSocke:
  03eb1	83 7d f8 23	 cmp	 DWORD PTR _i$[ebp], 35	; 00000023H
  03eb5	7d 17		 jge	 SHORT $LN7@ClearSocke

; 1561 : 	{
; 1562 : 		lpObj->m_SocketSet[i].RESET();

  03eb7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  03eba	6b c0 06	 imul	 eax, 6
  03ebd	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03ec0	8d 8c 01 86 20
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+8326]
  03ec7	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET

; 1563 : 	}

  03ecc	eb da		 jmp	 SHORT $LN8@ClearSocke
$LN7@ClearSocke:

; 1564 : 
; 1565 : 	for(i = 0;i < 7; i++)

  03ece	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  03ed5	eb 09		 jmp	 SHORT $LN6@ClearSocke
$LN5@ClearSocke:
  03ed7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  03eda	83 c0 01	 add	 eax, 1
  03edd	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN6@ClearSocke:
  03ee0	83 7d f8 07	 cmp	 DWORD PTR _i$[ebp], 7
  03ee4	7d 17		 jge	 SHORT $LN4@ClearSocke

; 1566 : 	{
; 1567 : 		lpObj->m_SocketWeapon[i].RESET();

  03ee6	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  03ee9	6b c0 06	 imul	 eax, 6
  03eec	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03eef	8d 8c 01 58 21
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+8536]
  03ef6	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET

; 1568 : 	}

  03efb	eb da		 jmp	 SHORT $LN5@ClearSocke
$LN4@ClearSocke:

; 1569 : 
; 1570 : 	for(i = 0;i < 2; i++)

  03efd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  03f04	eb 09		 jmp	 SHORT $LN3@ClearSocke
$LN2@ClearSocke:
  03f06	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  03f09	83 c0 01	 add	 eax, 1
  03f0c	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN3@ClearSocke:
  03f0f	83 7d f8 02	 cmp	 DWORD PTR _i$[ebp], 2
  03f13	7d 17		 jge	 SHORT $LN12@ClearSocke

; 1571 : 	{
; 1572 : 		lpObj->m_SocketBonus[i].RESET();

  03f15	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  03f18	6b c0 06	 imul	 eax, 6
  03f1b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03f1e	8d 8c 01 82 21
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+8578]
  03f25	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET

; 1573 : 	}

  03f2a	eb da		 jmp	 SHORT $LN2@ClearSocke
$LN12@ClearSocke:

; 1574 : }

  03f2c	5f		 pop	 edi
  03f2d	5e		 pop	 esi
  03f2e	5b		 pop	 ebx
  03f2f	8b e5		 mov	 esp, ebp
  03f31	5d		 pop	 ebp
  03f32	c2 04 00	 ret	 4
?ClearSocketData@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::ClearSocketData
_TEXT	ENDS
PUBLIC	?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption
PUBLIC	?MakeManualOptionbyJewel@CSocketOption@@QAEEPAVCItem@@0E@Z ; CSocketOption::MakeManualOptionbyJewel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc5$ = -8						; size = 1
_loc4$ = -7						; size = 1
_loc3$ = -6						; size = 1
_loc2$ = -5						; size = 1
_this$ = -4						; size = 4
_lpFirstItem$ = 8					; size = 4
_lpSecondItem$ = 12					; size = 4
_btSocketSlot$ = 16					; size = 1
?MakeManualOptionbyJewel@CSocketOption@@QAEEPAVCItem@@0E@Z PROC ; CSocketOption::MakeManualOptionbyJewel
; _this$ = ecx

; 1578 : {

  03f40	55		 push	 ebp
  03f41	8b ec		 mov	 ebp, esp
  03f43	83 ec 48	 sub	 esp, 72			; 00000048H
  03f46	53		 push	 ebx
  03f47	56		 push	 esi
  03f48	57		 push	 edi
  03f49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1579 : 	if(lpFirstItem == 0 || lpSecondItem == 0)

  03f4c	83 7d 08 00	 cmp	 DWORD PTR _lpFirstItem$[ebp], 0
  03f50	74 06		 je	 SHORT $LN6@MakeManual
  03f52	83 7d 0c 00	 cmp	 DWORD PTR _lpSecondItem$[ebp], 0
  03f56	75 07		 jne	 SHORT $LN7@MakeManual
$LN6@MakeManual:

; 1580 : 	{
; 1581 : 		return 0;

  03f58	32 c0		 xor	 al, al
  03f5a	e9 dc 00 00 00	 jmp	 $LN8@MakeManual
$LN7@MakeManual:

; 1582 : 	}
; 1583 : 	
; 1584 : 	if(lpFirstItem->IsItem() == 0 || lpSecondItem->IsItem() == 0 )

  03f5f	8b 4d 08	 mov	 ecx, DWORD PTR _lpFirstItem$[ebp]
  03f62	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  03f67	85 c0		 test	 eax, eax
  03f69	74 0c		 je	 SHORT $LN4@MakeManual
  03f6b	8b 4d 0c	 mov	 ecx, DWORD PTR _lpSecondItem$[ebp]
  03f6e	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  03f73	85 c0		 test	 eax, eax
  03f75	75 07		 jne	 SHORT $LN5@MakeManual
$LN4@MakeManual:

; 1585 : 	{
; 1586 : 		return 0;

  03f77	32 c0		 xor	 al, al
  03f79	e9 bd 00 00 00	 jmp	 $LN8@MakeManual
$LN5@MakeManual:

; 1587 : 	}
; 1588 : 
; 1589 : 	if(this->IsActive(lpFirstItem) == 0)

  03f7e	8b 45 08	 mov	 eax, DWORD PTR _lpFirstItem$[ebp]
  03f81	50		 push	 eax
  03f82	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f85	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  03f8a	0f b6 c8	 movzx	 ecx, al
  03f8d	85 c9		 test	 ecx, ecx
  03f8f	75 07		 jne	 SHORT $LN3@MakeManual

; 1590 : 	{
; 1591 : 		return 0;

  03f91	32 c0		 xor	 al, al
  03f93	e9 a3 00 00 00	 jmp	 $LN8@MakeManual
$LN3@MakeManual:

; 1592 : 	}
; 1593 : 
; 1594 : 	if(btSocketSlot > 5)

  03f98	0f b6 45 10	 movzx	 eax, BYTE PTR _btSocketSlot$[ebp]
  03f9c	83 f8 05	 cmp	 eax, 5
  03f9f	7e 07		 jle	 SHORT $LN2@MakeManual

; 1595 : 	{
; 1596 : 		return 0;

  03fa1	32 c0		 xor	 al, al
  03fa3	e9 93 00 00 00	 jmp	 $LN8@MakeManual
$LN2@MakeManual:

; 1597 : 	}
; 1598 : 	
; 1599 : 	if(lpFirstItem->m_SocketOption[btSocketSlot] != 0xFE)

  03fa8	0f b6 45 10	 movzx	 eax, BYTE PTR _btSocketSlot$[ebp]
  03fac	8b 4d 08	 mov	 ecx, DWORD PTR _lpFirstItem$[ebp]
  03faf	0f b6 94 01 cc
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+204]
  03fb7	81 fa fe 00 00
	00		 cmp	 edx, 254		; 000000feH
  03fbd	74 04		 je	 SHORT $LN1@MakeManual

; 1600 : 	{
; 1601 : 		return 0;

  03fbf	32 c0		 xor	 al, al
  03fc1	eb 78		 jmp	 SHORT $LN8@MakeManual
$LN1@MakeManual:

; 1602 : 	}
; 1603 : 
; 1604 : 	BYTE loc2 = 0;

  03fc3	c6 45 fb 00	 mov	 BYTE PTR _loc2$[ebp], 0

; 1605 : 	BYTE loc3 = 0;

  03fc7	c6 45 fa 00	 mov	 BYTE PTR _loc3$[ebp], 0

; 1606 : 	BYTE loc4 = 0;

  03fcb	c6 45 f9 00	 mov	 BYTE PTR _loc4$[ebp], 0

; 1607 : 	BYTE loc5 = 0;

  03fcf	c6 45 f8 00	 mov	 BYTE PTR _loc5$[ebp], 0

; 1608 : 
; 1609 : 	loc2 = lpSecondItem->m_Type % 512;

  03fd3	8b 45 0c	 mov	 eax, DWORD PTR _lpSecondItem$[ebp]
  03fd6	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  03fda	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  03fe0	79 08		 jns	 SHORT $LN10@MakeManual
  03fe2	49		 dec	 ecx
  03fe3	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  03fe9	41		 inc	 ecx
$LN10@MakeManual:
  03fea	88 4d fb	 mov	 BYTE PTR _loc2$[ebp], cl

; 1610 : 	loc3 = loc2 - 100;

  03fed	0f b6 45 fb	 movzx	 eax, BYTE PTR _loc2$[ebp]
  03ff1	83 e8 64	 sub	 eax, 100		; 00000064H
  03ff4	88 45 fa	 mov	 BYTE PTR _loc3$[ebp], al

; 1611 : 	loc4 = (loc3 - 1) / 6 + 1;

  03ff7	0f b6 45 fa	 movzx	 eax, BYTE PTR _loc3$[ebp]
  03ffb	83 e8 01	 sub	 eax, 1
  03ffe	99		 cdq
  03fff	b9 06 00 00 00	 mov	 ecx, 6
  04004	f7 f9		 idiv	 ecx
  04006	83 c0 01	 add	 eax, 1
  04009	88 45 f9	 mov	 BYTE PTR _loc4$[ebp], al

; 1612 : 	loc5 = loc4 * 50 + loc3;

  0400c	0f b6 45 f9	 movzx	 eax, BYTE PTR _loc4$[ebp]
  04010	6b c0 32	 imul	 eax, 50			; 00000032H
  04013	0f b6 4d fa	 movzx	 ecx, BYTE PTR _loc3$[ebp]
  04017	03 c1		 add	 eax, ecx
  04019	88 45 f8	 mov	 BYTE PTR _loc5$[ebp], al

; 1613 : 
; 1614 : 	lpFirstItem->m_SocketOption[btSocketSlot] = loc5; //SOCKET BYTE ON ITEM BINARY

  0401c	0f b6 45 10	 movzx	 eax, BYTE PTR _btSocketSlot$[ebp]
  04020	8b 4d 08	 mov	 ecx, DWORD PTR _lpFirstItem$[ebp]
  04023	8a 55 f8	 mov	 dl, BYTE PTR _loc5$[ebp]
  04026	88 94 01 cc 00
	00 00		 mov	 BYTE PTR [ecx+eax+204], dl

; 1615 : 
; 1616 : 	this->ManualSetBonusSocketOption(lpFirstItem);

  0402d	8b 45 08	 mov	 eax, DWORD PTR _lpFirstItem$[ebp]
  04030	50		 push	 eax
  04031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04034	e8 00 00 00 00	 call	 ?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption

; 1617 : 
; 1618 : 	return 1;

  04039	b0 01		 mov	 al, 1
$LN8@MakeManual:

; 1619 : }

  0403b	5f		 pop	 edi
  0403c	5e		 pop	 esi
  0403d	5b		 pop	 ebx
  0403e	8b e5		 mov	 esp, ebp
  04040	5d		 pop	 ebp
  04041	c2 0c 00	 ret	 12			; 0000000cH
?MakeManualOptionbyJewel@CSocketOption@@QAEEPAVCItem@@0E@Z ENDP ; CSocketOption::MakeManualOptionbyJewel
_TEXT	ENDS
PUBLIC	?MakeManualOptionbyCalc@CSocketOption@@QAEEPAVCItem@@EEE@Z ; CSocketOption::MakeManualOptionbyCalc
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loc2$ = -5						; size = 1
_this$ = -4						; size = 4
_lpItem$ = 8						; size = 4
_arg2$ = 12						; size = 1
_arg3$ = 16						; size = 1
_btSocketSlot$ = 20					; size = 1
?MakeManualOptionbyCalc@CSocketOption@@QAEEPAVCItem@@EEE@Z PROC ; CSocketOption::MakeManualOptionbyCalc
; _this$ = ecx

; 1623 : {

  04050	55		 push	 ebp
  04051	8b ec		 mov	 ebp, esp
  04053	83 ec 48	 sub	 esp, 72			; 00000048H
  04056	53		 push	 ebx
  04057	56		 push	 esi
  04058	57		 push	 edi
  04059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1624 : 	if(lpItem == NULL)

  0405c	83 7d 08 00	 cmp	 DWORD PTR _lpItem$[ebp], 0
  04060	75 07		 jne	 SHORT $LN5@MakeManual@2

; 1625 : 	{
; 1626 : 		return 0;

  04062	32 c0		 xor	 al, al
  04064	e9 82 00 00 00	 jmp	 $LN6@MakeManual@2
$LN5@MakeManual@2:

; 1627 : 	}
; 1628 : 
; 1629 : 	if(lpItem->IsItem() == FALSE)

  04069	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  0406c	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  04071	85 c0		 test	 eax, eax
  04073	75 04		 jne	 SHORT $LN4@MakeManual@2

; 1630 : 	{
; 1631 : 		return 0;

  04075	32 c0		 xor	 al, al
  04077	eb 72		 jmp	 SHORT $LN6@MakeManual@2
$LN4@MakeManual@2:

; 1632 : 	}
; 1633 : 
; 1634 : 	if(this->IsActive(lpItem) == FALSE)

  04079	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  0407c	50		 push	 eax
  0407d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04080	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  04085	0f b6 c8	 movzx	 ecx, al
  04088	85 c9		 test	 ecx, ecx
  0408a	75 04		 jne	 SHORT $LN3@MakeManual@2

; 1635 : 	{
; 1636 : 		return 0;

  0408c	32 c0		 xor	 al, al
  0408e	eb 5b		 jmp	 SHORT $LN6@MakeManual@2
$LN3@MakeManual@2:

; 1637 : 	}
; 1638 : 
; 1639 : 	if(btSocketSlot > 5)

  04090	0f b6 45 14	 movzx	 eax, BYTE PTR _btSocketSlot$[ebp]
  04094	83 f8 05	 cmp	 eax, 5
  04097	7e 04		 jle	 SHORT $LN2@MakeManual@2

; 1640 : 	{
; 1641 : 		return 0;

  04099	32 c0		 xor	 al, al
  0409b	eb 4e		 jmp	 SHORT $LN6@MakeManual@2
$LN2@MakeManual@2:

; 1642 : 	}
; 1643 : 
; 1644 : 	if(lpItem->m_SocketOption[btSocketSlot] != 0xFE)

  0409d	0f b6 45 14	 movzx	 eax, BYTE PTR _btSocketSlot$[ebp]
  040a1	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  040a4	0f b6 94 01 cc
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+204]
  040ac	81 fa fe 00 00
	00		 cmp	 edx, 254		; 000000feH
  040b2	74 04		 je	 SHORT $LN1@MakeManual@2

; 1645 : 	{
; 1646 : 		return 0;

  040b4	32 c0		 xor	 al, al
  040b6	eb 33		 jmp	 SHORT $LN6@MakeManual@2
$LN1@MakeManual@2:

; 1647 : 	}
; 1648 : 
; 1649 : 	BYTE loc2 = 0;

  040b8	c6 45 fb 00	 mov	 BYTE PTR _loc2$[ebp], 0

; 1650 : 
; 1651 : 	loc2 = 50 * arg3 + arg2;

  040bc	0f b6 45 10	 movzx	 eax, BYTE PTR _arg3$[ebp]
  040c0	6b c0 32	 imul	 eax, 50			; 00000032H
  040c3	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _arg2$[ebp]
  040c7	03 c1		 add	 eax, ecx
  040c9	88 45 fb	 mov	 BYTE PTR _loc2$[ebp], al

; 1652 : 
; 1653 : 	lpItem->m_SocketOption[btSocketSlot] = loc2; //SOCKET BYTE ON ITEM BINARY

  040cc	0f b6 45 14	 movzx	 eax, BYTE PTR _btSocketSlot$[ebp]
  040d0	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  040d3	8a 55 fb	 mov	 dl, BYTE PTR _loc2$[ebp]
  040d6	88 94 01 cc 00
	00 00		 mov	 BYTE PTR [ecx+eax+204], dl

; 1654 : 
; 1655 : 	this->ManualSetBonusSocketOption(lpItem);

  040dd	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  040e0	50		 push	 eax
  040e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  040e4	e8 00 00 00 00	 call	 ?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption

; 1656 : 
; 1657 : 	return 1;

  040e9	b0 01		 mov	 al, 1
$LN6@MakeManual@2:

; 1658 : }

  040eb	5f		 pop	 edi
  040ec	5e		 pop	 esi
  040ed	5b		 pop	 ebx
  040ee	8b e5		 mov	 esp, ebp
  040f0	5d		 pop	 ebp
  040f1	c2 10 00	 ret	 16			; 00000010H
?MakeManualOptionbyCalc@CSocketOption@@QAEEPAVCItem@@EEE@Z ENDP ; CSocketOption::MakeManualOptionbyCalc
_TEXT	ENDS
PUBLIC	?MakeManualOption@CSocketOption@@QAEEPAVCItem@@EE@Z ; CSocketOption::MakeManualOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpItem$ = 8						; size = 4
_arg2$ = 12						; size = 1
_btSocketSlot$ = 16					; size = 1
?MakeManualOption@CSocketOption@@QAEEPAVCItem@@EE@Z PROC ; CSocketOption::MakeManualOption
; _this$ = ecx

; 1662 : {

  04100	55		 push	 ebp
  04101	8b ec		 mov	 ebp, esp
  04103	83 ec 44	 sub	 esp, 68			; 00000044H
  04106	53		 push	 ebx
  04107	56		 push	 esi
  04108	57		 push	 edi
  04109	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1663 : 	if(lpItem == NULL)

  0410c	83 7d 08 00	 cmp	 DWORD PTR _lpItem$[ebp], 0
  04110	75 04		 jne	 SHORT $LN5@MakeManual@3

; 1664 : 	{
; 1665 : 		return 0;

  04112	32 c0		 xor	 al, al
  04114	eb 6e		 jmp	 SHORT $LN6@MakeManual@3
$LN5@MakeManual@3:

; 1666 : 	}
; 1667 : 
; 1668 : 	if(lpItem->IsItem() == FALSE)

  04116	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  04119	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0411e	85 c0		 test	 eax, eax
  04120	75 04		 jne	 SHORT $LN4@MakeManual@3

; 1669 : 	{
; 1670 : 		return 0;

  04122	32 c0		 xor	 al, al
  04124	eb 5e		 jmp	 SHORT $LN6@MakeManual@3
$LN4@MakeManual@3:

; 1671 : 	}
; 1672 : 
; 1673 : 	if(this->IsActive(lpItem) == FALSE)

  04126	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  04129	50		 push	 eax
  0412a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0412d	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  04132	0f b6 c8	 movzx	 ecx, al
  04135	85 c9		 test	 ecx, ecx
  04137	75 04		 jne	 SHORT $LN3@MakeManual@3

; 1674 : 	{
; 1675 : 		return 0;

  04139	32 c0		 xor	 al, al
  0413b	eb 47		 jmp	 SHORT $LN6@MakeManual@3
$LN3@MakeManual@3:

; 1676 : 	}
; 1677 : 
; 1678 : 	if(btSocketSlot > 5)

  0413d	0f b6 45 10	 movzx	 eax, BYTE PTR _btSocketSlot$[ebp]
  04141	83 f8 05	 cmp	 eax, 5
  04144	7e 04		 jle	 SHORT $LN2@MakeManual@3

; 1679 : 	{
; 1680 : 		return 0;

  04146	32 c0		 xor	 al, al
  04148	eb 3a		 jmp	 SHORT $LN6@MakeManual@3
$LN2@MakeManual@3:

; 1681 : 	}
; 1682 : 
; 1683 : 	if(lpItem->m_SocketOption[btSocketSlot] != 0xFE)

  0414a	0f b6 45 10	 movzx	 eax, BYTE PTR _btSocketSlot$[ebp]
  0414e	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  04151	0f b6 94 01 cc
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+204]
  04159	81 fa fe 00 00
	00		 cmp	 edx, 254		; 000000feH
  0415f	74 04		 je	 SHORT $LN1@MakeManual@3

; 1684 : 	{
; 1685 : 		return 0;

  04161	32 c0		 xor	 al, al
  04163	eb 1f		 jmp	 SHORT $LN6@MakeManual@3
$LN1@MakeManual@3:

; 1686 : 	}
; 1687 : 
; 1688 : 	lpItem->m_SocketOption[btSocketSlot] = arg2;

  04165	0f b6 45 10	 movzx	 eax, BYTE PTR _btSocketSlot$[ebp]
  04169	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  0416c	8a 55 0c	 mov	 dl, BYTE PTR _arg2$[ebp]
  0416f	88 94 01 cc 00
	00 00		 mov	 BYTE PTR [ecx+eax+204], dl

; 1689 : 
; 1690 : 	this->ManualSetBonusSocketOption(lpItem);

  04176	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  04179	50		 push	 eax
  0417a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0417d	e8 00 00 00 00	 call	 ?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption

; 1691 : 
; 1692 : 	return 1;

  04182	b0 01		 mov	 al, 1
$LN6@MakeManual@3:

; 1693 : }

  04184	5f		 pop	 edi
  04185	5e		 pop	 esi
  04186	5b		 pop	 ebx
  04187	8b e5		 mov	 esp, ebp
  04189	5d		 pop	 ebp
  0418a	c2 0c 00	 ret	 12			; 0000000cH
?MakeManualOption@CSocketOption@@QAEEPAVCItem@@EE@Z ENDP ; CSocketOption::MakeManualOption
_TEXT	ENDS
PUBLIC	??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_rand:PROC
;	COMDAT ??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@
CONST	SEGMENT
??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@ DB '[Socke'
	DB	'tItem] Set Bonus Socket Option Success - OptionIndex : %d, It'
	DB	'emCode : %d, SocketOption[%d,%d,%d,%d,%d]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_j$228366 = -40						; size = 4
_i$228361 = -36						; size = 4
_loc7$ = -29						; size = 1
_loc6$ = -28						; size = 2
_loc5$ = -21						; size = 1
_n$228353 = -20						; size = 4
_btSocketOption$ = -16					; size = 5
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpItem$ = 8						; size = 4
?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z PROC ; CSocketOption::ManualSetBonusSocketOption
; _this$ = ecx

; 1698 : {

  04190	55		 push	 ebp
  04191	8b ec		 mov	 ebp, esp
  04193	83 ec 68	 sub	 esp, 104		; 00000068H
  04196	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0419b	33 c5		 xor	 eax, ebp
  0419d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  041a0	53		 push	 ebx
  041a1	56		 push	 esi
  041a2	57		 push	 edi
  041a3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1699 : 	BYTE btSocketOption[5];
; 1700 : 
; 1701 : 	if(lpItem == NULL)

  041a6	83 7d 08 00	 cmp	 DWORD PTR _lpItem$[ebp], 0
  041aa	75 07		 jne	 SHORT $LN17@ManualSetB

; 1702 : 	{
; 1703 : 		return 0;

  041ac	32 c0		 xor	 al, al
  041ae	e9 4b 02 00 00	 jmp	 $LN18@ManualSetB
$LN17@ManualSetB:

; 1704 : 	}
; 1705 : 
; 1706 : 	if(lpItem->IsItem() == FALSE || this->IsActive(lpItem) == FALSE)

  041b3	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  041b6	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  041bb	85 c0		 test	 eax, eax
  041bd	74 13		 je	 SHORT $LN15@ManualSetB
  041bf	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  041c2	50		 push	 eax
  041c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  041c6	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  041cb	0f b6 c8	 movzx	 ecx, al
  041ce	85 c9		 test	 ecx, ecx
  041d0	75 07		 jne	 SHORT $LN16@ManualSetB
$LN15@ManualSetB:

; 1707 : 	{
; 1708 : 		return 0;

  041d2	32 c0		 xor	 al, al
  041d4	e9 25 02 00 00	 jmp	 $LN18@ManualSetB
$LN16@ManualSetB:

; 1709 : 	}
; 1710 : 	
; 1711 : 	for(int n = 0; n < 5; n++)

  041d9	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _n$228353[ebp], 0
  041e0	eb 09		 jmp	 SHORT $LN14@ManualSetB
$LN13@ManualSetB:
  041e2	8b 45 ec	 mov	 eax, DWORD PTR _n$228353[ebp]
  041e5	83 c0 01	 add	 eax, 1
  041e8	89 45 ec	 mov	 DWORD PTR _n$228353[ebp], eax
$LN14@ManualSetB:
  041eb	83 7d ec 05	 cmp	 DWORD PTR _n$228353[ebp], 5
  041ef	7d 49		 jge	 SHORT $LN12@ManualSetB

; 1712 : 	{
; 1713 : 		if(lpItem->m_SocketOption[n] != 0xFF && lpItem->m_SocketOption[n] != 0xFE)

  041f1	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  041f4	03 45 ec	 add	 eax, DWORD PTR _n$228353[ebp]
  041f7	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  041fe	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  04204	74 32		 je	 SHORT $LN11@ManualSetB
  04206	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  04209	03 45 ec	 add	 eax, DWORD PTR _n$228353[ebp]
  0420c	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  04213	81 f9 fe 00 00
	00		 cmp	 ecx, 254		; 000000feH
  04219	74 1d		 je	 SHORT $LN11@ManualSetB

; 1714 : 		{
; 1715 : 			btSocketOption[n] = this->GetElementIndex(lpItem->m_SocketOption[n]);

  0421b	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  0421e	03 45 ec	 add	 eax, DWORD PTR _n$228353[ebp]
  04221	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  04228	51		 push	 ecx
  04229	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0422c	e8 00 00 00 00	 call	 ?GetElementIndex@CSocketOption@@QAEEE@Z ; CSocketOption::GetElementIndex
  04231	8b 55 ec	 mov	 edx, DWORD PTR _n$228353[ebp]
  04234	88 44 15 f0	 mov	 BYTE PTR _btSocketOption$[ebp+edx], al
$LN11@ManualSetB:

; 1716 : 		}
; 1717 : 	}

  04238	eb a8		 jmp	 SHORT $LN13@ManualSetB
$LN12@ManualSetB:

; 1718 : 
; 1719 : 	BYTE loc5 = 0;

  0423a	c6 45 eb 00	 mov	 BYTE PTR _loc5$[ebp], 0

; 1720 : 	WORD loc6 = 0;

  0423e	33 c0		 xor	 eax, eax
  04240	66 89 45 e4	 mov	 WORD PTR _loc6$[ebp], ax

; 1721 : 	BYTE loc7 = 0;

  04244	c6 45 e3 00	 mov	 BYTE PTR _loc7$[ebp], 0

; 1722 : 	
; 1723 : 	loc6 = lpItem->m_Type % 512;

  04248	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  0424b	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0424f	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  04255	79 08		 jns	 SHORT $LN20@ManualSetB
  04257	49		 dec	 ecx
  04258	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  0425e	41		 inc	 ecx
$LN20@ManualSetB:
  0425f	66 89 4d e4	 mov	 WORD PTR _loc6$[ebp], cx

; 1724 : 	loc5 = (lpItem->m_Type - loc6) / 512;

  04263	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  04266	0f bf 40 06	 movsx	 eax, WORD PTR [eax+6]
  0426a	0f b7 4d e4	 movzx	 ecx, WORD PTR _loc6$[ebp]
  0426e	2b c1		 sub	 eax, ecx
  04270	99		 cdq
  04271	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  04277	03 c2		 add	 eax, edx
  04279	c1 f8 09	 sar	 eax, 9
  0427c	88 45 eb	 mov	 BYTE PTR _loc5$[ebp], al

; 1725 : 
; 1726 : 	for(int i = 0; i < 6; i++)

  0427f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$228361[ebp], 0
  04286	eb 09		 jmp	 SHORT $LN10@ManualSetB
$LN9@ManualSetB:
  04288	8b 45 dc	 mov	 eax, DWORD PTR _i$228361[ebp]
  0428b	83 c0 01	 add	 eax, 1
  0428e	89 45 dc	 mov	 DWORD PTR _i$228361[ebp], eax
$LN10@ManualSetB:
  04291	83 7d dc 06	 cmp	 DWORD PTR _i$228361[ebp], 6
  04295	0f 8d 57 01 00
	00		 jge	 $LN8@ManualSetB

; 1727 : 	{
; 1728 : 		if(loc5 >= this->SocketSpear[i].m_btElementIndex && loc5 <= this->SocketSpear[i].m_btElementType)

  0429b	0f b6 45 eb	 movzx	 eax, BYTE PTR _loc5$[ebp]
  0429f	8b 4d dc	 mov	 ecx, DWORD PTR _i$228361[ebp]
  042a2	6b c9 14	 imul	 ecx, 20			; 00000014H
  042a5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  042a8	0f b6 8c 0a 2a
	04 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+1066]
  042b0	3b c1		 cmp	 eax, ecx
  042b2	0f 8c 35 01 00
	00		 jl	 $LN7@ManualSetB
  042b8	0f b6 45 eb	 movzx	 eax, BYTE PTR _loc5$[ebp]
  042bc	8b 4d dc	 mov	 ecx, DWORD PTR _i$228361[ebp]
  042bf	6b c9 14	 imul	 ecx, 20			; 00000014H
  042c2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  042c5	0f b6 8c 0a 2b
	04 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+1067]
  042cd	3b c1		 cmp	 eax, ecx
  042cf	0f 8f 18 01 00
	00		 jg	 $LN7@ManualSetB

; 1729 : 		{
; 1730 : 			for(int j = 0;j < 5;j++)

  042d5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _j$228366[ebp], 0
  042dc	eb 09		 jmp	 SHORT $LN6@ManualSetB
$LN5@ManualSetB:
  042de	8b 45 d8	 mov	 eax, DWORD PTR _j$228366[ebp]
  042e1	83 c0 01	 add	 eax, 1
  042e4	89 45 d8	 mov	 DWORD PTR _j$228366[ebp], eax
$LN6@ManualSetB:
  042e7	83 7d d8 05	 cmp	 DWORD PTR _j$228366[ebp], 5
  042eb	0f 8d f8 00 00
	00		 jge	 $LN4@ManualSetB

; 1731 : 			{
; 1732 : 				if(this->SocketSpear[i].m_btSocketSlot[j] == btSocketOption[j] && btSocketOption[j] != 0)

  042f1	8b 45 dc	 mov	 eax, DWORD PTR _i$228361[ebp]
  042f4	6b c0 14	 imul	 eax, 20			; 00000014H
  042f7	03 45 d8	 add	 eax, DWORD PTR _j$228366[ebp]
  042fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  042fd	0f b6 94 01 34
	04 00 00	 movzx	 edx, BYTE PTR [ecx+eax+1076]
  04305	8b 45 d8	 mov	 eax, DWORD PTR _j$228366[ebp]
  04308	0f b6 4c 05 f0	 movzx	 ecx, BYTE PTR _btSocketOption$[ebp+eax]
  0430d	3b d1		 cmp	 edx, ecx
  0430f	75 14		 jne	 SHORT $LN3@ManualSetB
  04311	8b 45 d8	 mov	 eax, DWORD PTR _j$228366[ebp]
  04314	0f b6 4c 05 f0	 movzx	 ecx, BYTE PTR _btSocketOption$[ebp+eax]
  04319	85 c9		 test	 ecx, ecx
  0431b	74 08		 je	 SHORT $LN3@ManualSetB

; 1733 : 				{
; 1734 : 					loc7++;

  0431d	8a 45 e3	 mov	 al, BYTE PTR _loc7$[ebp]
  04320	04 01		 add	 al, 1
  04322	88 45 e3	 mov	 BYTE PTR _loc7$[ebp], al
$LN3@ManualSetB:

; 1735 : 				}
; 1736 : 
; 1737 : 				if(loc7 >= this->SocketSpear[i].m_btSocketSlotCount)

  04325	0f b6 45 e3	 movzx	 eax, BYTE PTR _loc7$[ebp]
  04329	8b 4d dc	 mov	 ecx, DWORD PTR _i$228361[ebp]
  0432c	6b c9 14	 imul	 ecx, 20			; 00000014H
  0432f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  04332	0f b6 8c 0a 39
	04 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+1081]
  0433a	3b c1		 cmp	 eax, ecx
  0433c	0f 8c a2 00 00
	00		 jl	 $LN2@ManualSetB

; 1738 : 				{
; 1739 : 					if(rand() % 100 < this->SocketSpear[i].m_iOptionRate)

  04342	e8 00 00 00 00	 call	 _rand
  04347	99		 cdq
  04348	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0434d	f7 f9		 idiv	 ecx
  0434f	8b 45 dc	 mov	 eax, DWORD PTR _i$228361[ebp]
  04352	6b c0 14	 imul	 eax, 20			; 00000014H
  04355	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  04358	3b 94 01 30 04
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+1072]
  0435f	7d 75		 jge	 SHORT $LN1@ManualSetB

; 1740 : 					{
; 1741 : 						lpItem->m_SocketOptionIndex = this->SocketSpear[i].m_btOptionIndex;

  04361	8b 45 dc	 mov	 eax, DWORD PTR _i$228361[ebp]
  04364	6b c0 14	 imul	 eax, 20			; 00000014H
  04367	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  0436a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0436d	8a 84 02 28 04
	00 00		 mov	 al, BYTE PTR [edx+eax+1064]
  04374	88 81 cb 00 00
	00		 mov	 BYTE PTR [ecx+203], al

; 1742 : 						
; 1743 : 						LogAddTD("[SocketItem] Set Bonus Socket Option Success - OptionIndex : %d, ItemCode : %d, SocketOption[%d,%d,%d,%d,%d]", 
; 1744 : 							lpItem->m_SocketOptionIndex,lpItem->m_Type,
; 1745 : 							lpItem->m_SocketOption[0],
; 1746 : 							lpItem->m_SocketOption[1],
; 1747 : 							lpItem->m_SocketOption[2],
; 1748 : 							lpItem->m_SocketOption[3],
; 1749 : 							lpItem->m_SocketOption[4]);

  0437a	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  0437d	0f b6 88 d0 00
	00 00		 movzx	 ecx, BYTE PTR [eax+208]
  04384	51		 push	 ecx
  04385	8b 55 08	 mov	 edx, DWORD PTR _lpItem$[ebp]
  04388	0f b6 82 cf 00
	00 00		 movzx	 eax, BYTE PTR [edx+207]
  0438f	50		 push	 eax
  04390	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  04393	0f b6 91 ce 00
	00 00		 movzx	 edx, BYTE PTR [ecx+206]
  0439a	52		 push	 edx
  0439b	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  0439e	0f b6 88 cd 00
	00 00		 movzx	 ecx, BYTE PTR [eax+205]
  043a5	51		 push	 ecx
  043a6	8b 55 08	 mov	 edx, DWORD PTR _lpItem$[ebp]
  043a9	0f b6 82 cc 00
	00 00		 movzx	 eax, BYTE PTR [edx+204]
  043b0	50		 push	 eax
  043b1	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  043b4	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  043b8	52		 push	 edx
  043b9	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  043bc	0f b6 88 cb 00
	00 00		 movzx	 ecx, BYTE PTR [eax+203]
  043c3	51		 push	 ecx
  043c4	68 00 00 00 00	 push	 OFFSET ??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@
  043c9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  043cf	83 c4 20	 add	 esp, 32			; 00000020H

; 1750 : 
; 1751 : 						return 1;

  043d2	b0 01		 mov	 al, 1
  043d4	eb 28		 jmp	 SHORT $LN18@ManualSetB
$LN1@ManualSetB:

; 1752 : 					}
; 1753 : 					
; 1754 : 					lpItem->m_SocketOptionIndex = 0xFF;

  043d6	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  043d9	c6 80 cb 00 00
	00 ff		 mov	 BYTE PTR [eax+203], 255	; 000000ffH

; 1755 : 
; 1756 : 					return 0;

  043e0	32 c0		 xor	 al, al
  043e2	eb 1a		 jmp	 SHORT $LN18@ManualSetB
$LN2@ManualSetB:

; 1757 : 				}
; 1758 : 			}

  043e4	e9 f5 fe ff ff	 jmp	 $LN5@ManualSetB
$LN4@ManualSetB:

; 1759 : 
; 1760 : 			loc7 = 0;

  043e9	c6 45 e3 00	 mov	 BYTE PTR _loc7$[ebp], 0
$LN7@ManualSetB:

; 1761 : 		}
; 1762 : 	}

  043ed	e9 96 fe ff ff	 jmp	 $LN9@ManualSetB
$LN8@ManualSetB:

; 1763 : 
; 1764 : 	lpItem->m_SocketOptionIndex = 0xFF;

  043f2	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  043f5	c6 80 cb 00 00
	00 ff		 mov	 BYTE PTR [eax+203], 255	; 000000ffH

; 1765 : 
; 1766 : 	return 0;

  043fc	32 c0		 xor	 al, al
$LN18@ManualSetB:

; 1767 : }

  043fe	5f		 pop	 edi
  043ff	5e		 pop	 esi
  04400	5b		 pop	 ebx
  04401	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  04404	33 cd		 xor	 ecx, ebp
  04406	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0440b	8b e5		 mov	 esp, ebp
  0440d	5d		 pop	 ebp
  0440e	c2 04 00	 ret	 4
?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ENDP ; CSocketOption::ManualSetBonusSocketOption
_TEXT	ENDS
PUBLIC	?RemakeSocketOption@CSocketOption@@QAEEPAVCItem@@E@Z ; CSocketOption::RemakeSocketOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpItem$ = 8						; size = 4
_btSlotIndex$ = 12					; size = 1
?RemakeSocketOption@CSocketOption@@QAEEPAVCItem@@E@Z PROC ; CSocketOption::RemakeSocketOption
; _this$ = ecx

; 1771 : {

  04420	55		 push	 ebp
  04421	8b ec		 mov	 ebp, esp
  04423	83 ec 44	 sub	 esp, 68			; 00000044H
  04426	53		 push	 ebx
  04427	56		 push	 esi
  04428	57		 push	 edi
  04429	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1772 : 	if(lpItem == NULL)

  0442c	83 7d 08 00	 cmp	 DWORD PTR _lpItem$[ebp], 0
  04430	75 04		 jne	 SHORT $LN5@RemakeSock

; 1773 : 	{
; 1774 : 		return 0;

  04432	32 c0		 xor	 al, al
  04434	eb 73		 jmp	 SHORT $LN6@RemakeSock
$LN5@RemakeSock:

; 1775 : 	}
; 1776 : 	
; 1777 : 	if(this->IsActive(lpItem) == FALSE)

  04436	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  04439	50		 push	 eax
  0443a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0443d	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  04442	0f b6 c8	 movzx	 ecx, al
  04445	85 c9		 test	 ecx, ecx
  04447	75 04		 jne	 SHORT $LN4@RemakeSock

; 1778 : 	{
; 1779 : 		return 0;

  04449	32 c0		 xor	 al, al
  0444b	eb 5c		 jmp	 SHORT $LN6@RemakeSock
$LN4@RemakeSock:

; 1780 : 	}
; 1781 : 
; 1782 : 	if(btSlotIndex > 5)

  0444d	0f b6 45 0c	 movzx	 eax, BYTE PTR _btSlotIndex$[ebp]
  04451	83 f8 05	 cmp	 eax, 5
  04454	7e 04		 jle	 SHORT $LN3@RemakeSock

; 1783 : 	{
; 1784 : 		return 0;

  04456	32 c0		 xor	 al, al
  04458	eb 4f		 jmp	 SHORT $LN6@RemakeSock
$LN3@RemakeSock:

; 1785 : 	}
; 1786 : 
; 1787 : 	if(lpItem->m_SocketOption[btSlotIndex] == 0xFF || lpItem->m_SocketOption[btSlotIndex] == 0xFE)

  0445a	0f b6 45 0c	 movzx	 eax, BYTE PTR _btSlotIndex$[ebp]
  0445e	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  04461	0f b6 94 01 cc
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+204]
  04469	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  0446f	74 17		 je	 SHORT $LN1@RemakeSock
  04471	0f b6 45 0c	 movzx	 eax, BYTE PTR _btSlotIndex$[ebp]
  04475	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  04478	0f b6 94 01 cc
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+204]
  04480	81 fa fe 00 00
	00		 cmp	 edx, 254		; 000000feH
  04486	75 04		 jne	 SHORT $LN2@RemakeSock
$LN1@RemakeSock:

; 1788 : 	{
; 1789 : 		return 0;

  04488	32 c0		 xor	 al, al
  0448a	eb 1d		 jmp	 SHORT $LN6@RemakeSock
$LN2@RemakeSock:

; 1790 : 	}
; 1791 : 
; 1792 : 	lpItem->m_SocketOption[btSlotIndex] = 0xFE;

  0448c	0f b6 45 0c	 movzx	 eax, BYTE PTR _btSlotIndex$[ebp]
  04490	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  04493	c6 84 01 cc 00
	00 00 fe	 mov	 BYTE PTR [ecx+eax+204], 254 ; 000000feH

; 1793 : 
; 1794 : 	this->ManualSetBonusSocketOption(lpItem);

  0449b	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  0449e	50		 push	 eax
  0449f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  044a2	e8 00 00 00 00	 call	 ?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption

; 1795 : 
; 1796 : 	return 1;

  044a7	b0 01		 mov	 al, 1
$LN6@RemakeSock:

; 1797 : }

  044a9	5f		 pop	 edi
  044aa	5e		 pop	 esi
  044ab	5b		 pop	 ebx
  044ac	8b e5		 mov	 esp, ebp
  044ae	5d		 pop	 ebp
  044af	c2 08 00	 ret	 8
?RemakeSocketOption@CSocketOption@@QAEEPAVCItem@@E@Z ENDP ; CSocketOption::RemakeSocketOption
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?RESET@SOCKET_ITEM@@QAEXXZ PROC				; SOCKET_ITEM::RESET
; _this$ = ecx

; 1801 : {

  044c0	55		 push	 ebp
  044c1	8b ec		 mov	 ebp, esp
  044c3	83 ec 44	 sub	 esp, 68			; 00000044H
  044c6	53		 push	 ebx
  044c7	56		 push	 esi
  044c8	57		 push	 edi
  044c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1802 : 	this->m_btEffectType = 0xFF;

  044cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  044cf	c6 00 ff	 mov	 BYTE PTR [eax], 255	; 000000ffH

; 1803 : 	this->m_wOptionValue = 0;

  044d2	33 c0		 xor	 eax, eax
  044d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  044d7	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 1804 : 	this->m_btOptionType = 0;

  044db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  044de	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1805 : 	this->m_btOptionCount = 0;

  044e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  044e5	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 1806 : }

  044e9	5f		 pop	 edi
  044ea	5e		 pop	 esi
  044eb	5b		 pop	 ebx
  044ec	8b e5		 mov	 esp, ebp
  044ee	5d		 pop	 ebp
  044ef	c3		 ret	 0
?RESET@SOCKET_ITEM@@QAEXXZ ENDP				; SOCKET_ITEM::RESET
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_SocketOption@@YAXXZ
text$yc	SEGMENT
??__Eg_SocketOption@@YAXXZ PROC				; `dynamic initializer for 'g_SocketOption'', COMDAT

; 26   : CSocketOption g_SocketOption;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  0000e	e8 00 00 00 00	 call	 ??0CSocketOption@@QAE@XZ ; CSocketOption::CSocketOption
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_SocketOption@@YAXXZ ; `dynamic atexit destructor for 'g_SocketOption''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_SocketOption@@YAXXZ ENDP				; `dynamic initializer for 'g_SocketOption''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_SocketOption@@YAXXZ
text$yd	SEGMENT
??__Fg_SocketOption@@YAXXZ PROC				; `dynamic atexit destructor for 'g_SocketOption'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  0000e	e8 00 00 00 00	 call	 ??1CSocketOption@@UAE@XZ ; CSocketOption::~CSocketOption
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_SocketOption@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_SocketOption''
text$yd	ENDS
PUBLIC	?g_SocketOption@@3VCSocketOption@@A		; g_SocketOption
_BSS	SEGMENT
?g_SocketOption@@3VCSocketOption@@A DB 07b8H DUP (?)	; g_SocketOption
_BSS	ENDS
CRT$XCU	SEGMENT
_g_SocketOption$initializer$ DD FLAT:??__Eg_SocketOption@@YAXXZ
CRT$XCU	ENDS
END
