; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\BalanceSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
PUBLIC	?Init@cBalanceSystem@@QAEXXZ			; cBalanceSystem::Init
PUBLIC	??0?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
PUBLIC	??_7cBalanceSystem@@6B@				; cBalanceSystem::`vftable'
PUBLIC	??0cBalanceSystem@@QAE@XZ			; cBalanceSystem::cBalanceSystem
PUBLIC	??_R4cBalanceSystem@@6B@			; cBalanceSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcBalanceSystem@@@8			; cBalanceSystem `RTTI Type Descriptor'
PUBLIC	??_R3cBalanceSystem@@8				; cBalanceSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2cBalanceSystem@@8				; cBalanceSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@cBalanceSystem@@8			; cBalanceSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EcBalanceSystem@@UAEPAXI@Z:PROC		; cBalanceSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@cBalanceSystem@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\balancesystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@cBalanceSystem@@8 DD FLAT:??_R0?AVcBalanceSystem@@@8 ; cBalanceSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3cBalanceSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2cBalanceSystem@@8
rdata$r	SEGMENT
??_R2cBalanceSystem@@8 DD FLAT:??_R1A@?0A@EA@cBalanceSystem@@8 ; cBalanceSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3cBalanceSystem@@8
rdata$r	SEGMENT
??_R3cBalanceSystem@@8 DD 00H				; cBalanceSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2cBalanceSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcBalanceSystem@@@8
_DATA	SEGMENT
??_R0?AVcBalanceSystem@@@8 DD FLAT:??_7type_info@@6B@	; cBalanceSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcBalanceSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4cBalanceSystem@@6B@
rdata$r	SEGMENT
??_R4cBalanceSystem@@6B@ DD 00H				; cBalanceSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcBalanceSystem@@@8
	DD	FLAT:??_R3cBalanceSystem@@8
rdata$r	ENDS
;	COMDAT ??_7cBalanceSystem@@6B@
CONST	SEGMENT
??_7cBalanceSystem@@6B@ DD FLAT:??_R4cBalanceSystem@@6B@ ; cBalanceSystem::`vftable'
	DD	FLAT:??_EcBalanceSystem@@UAEPAXI@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0cBalanceSystem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0cBalanceSystem@@QAE@XZ$0
__ehfuncinfo$??0cBalanceSystem@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0cBalanceSystem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0cBalanceSystem@@QAE@XZ PROC				; cBalanceSystem::cBalanceSystem
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0cBalanceSystem@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7cBalanceSystem@@6B@
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  0003d	e8 00 00 00 00	 call	 ??0?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 17   : 	this->Init();

  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?Init@cBalanceSystem@@QAEXXZ ; cBalanceSystem::Init

; 18   : }

  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0cBalanceSystem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  00009	e9 00 00 00 00	 jmp	 ??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
__ehhandler$??0cBalanceSystem@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0cBalanceSystem@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0cBalanceSystem@@QAE@XZ ENDP				; cBalanceSystem::cBalanceSystem
PUBLIC	??1cBalanceSystem@@UAE@XZ			; cBalanceSystem::~cBalanceSystem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GcBalanceSystem@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GcBalanceSystem@@UAEPAXI@Z PROC			; cBalanceSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1cBalanceSystem@@UAE@XZ ; cBalanceSystem::~cBalanceSystem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GcBalanceSystem@@UAEPAXI@Z ENDP			; cBalanceSystem::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1cBalanceSystem@@UAE@XZ PROC				; cBalanceSystem::~cBalanceSystem
; _this$ = ecx

; 21   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 44	 sub	 esp, 68			; 00000044H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7cBalanceSystem@@6B@

; 22   : }

  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  0008e	e8 00 00 00 00	 call	 ??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??1cBalanceSystem@@UAE@XZ ENDP				; cBalanceSystem::~cBalanceSystem
_TEXT	ENDS
PUBLIC	?clear@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::clear
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@cBalanceSystem@@QAEXXZ PROC			; cBalanceSystem::Init
; _this$ = ecx

; 25   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 44	 sub	 esp, 68			; 00000044H
  000a6	53		 push	 ebx
  000a7	56		 push	 esi
  000a8	57		 push	 edi
  000a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	this->Enable	= true;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000af	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 27   : 
; 28   : 	this->DKvsDK	= 100;

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	c7 40 08 64 00
	00 00		 mov	 DWORD PTR [eax+8], 100	; 00000064H

; 29   : 	this->DKvsDW	= 100;

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	c7 40 0c 64 00
	00 00		 mov	 DWORD PTR [eax+12], 100	; 00000064H

; 30   : 	this->DKvsELF	= 100;

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c7 40 10 64 00
	00 00		 mov	 DWORD PTR [eax+16], 100	; 00000064H

; 31   : 	this->DKvsSUM	= 100;

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	c7 40 14 64 00
	00 00		 mov	 DWORD PTR [eax+20], 100	; 00000064H

; 32   : 	this->DKvsMG	= 100;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000de	c7 40 18 64 00
	00 00		 mov	 DWORD PTR [eax+24], 100	; 00000064H

; 33   : 	this->DKvsDL	= 100;

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	c7 40 1c 64 00
	00 00		 mov	 DWORD PTR [eax+28], 100	; 00000064H

; 34   : 	this->DKvsRF	= 100;

  000ef	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f2	c7 40 20 64 00
	00 00		 mov	 DWORD PTR [eax+32], 100	; 00000064H

; 35   : 
; 36   : 	this->DWvsDW	= 100;

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	c7 40 24 64 00
	00 00		 mov	 DWORD PTR [eax+36], 100	; 00000064H

; 37   : 	this->DWvsDK	= 100;

  00103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00106	c7 40 28 64 00
	00 00		 mov	 DWORD PTR [eax+40], 100	; 00000064H

; 38   : 	this->DWvsELF	= 100;

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00110	c7 40 2c 64 00
	00 00		 mov	 DWORD PTR [eax+44], 100	; 00000064H

; 39   : 	this->DWvsSUM	= 100;

  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	c7 40 30 64 00
	00 00		 mov	 DWORD PTR [eax+48], 100	; 00000064H

; 40   : 	this->DWvsMG	= 100;

  00121	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00124	c7 40 34 64 00
	00 00		 mov	 DWORD PTR [eax+52], 100	; 00000064H

; 41   : 	this->DWvsDL	= 100;

  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	c7 40 38 64 00
	00 00		 mov	 DWORD PTR [eax+56], 100	; 00000064H

; 42   : 	this->DWvsRF	= 100;

  00135	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00138	c7 40 3c 64 00
	00 00		 mov	 DWORD PTR [eax+60], 100	; 00000064H

; 43   : 
; 44   : 	this->ELFvsELF	= 100;

  0013f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00142	c7 40 40 64 00
	00 00		 mov	 DWORD PTR [eax+64], 100	; 00000064H

; 45   : 	this->ELFvsDK	= 100;

  00149	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	c7 40 44 64 00
	00 00		 mov	 DWORD PTR [eax+68], 100	; 00000064H

; 46   : 	this->ELFvsDW	= 100;

  00153	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00156	c7 40 48 64 00
	00 00		 mov	 DWORD PTR [eax+72], 100	; 00000064H

; 47   : 	this->ELFvsSUM	= 100;

  0015d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00160	c7 40 4c 64 00
	00 00		 mov	 DWORD PTR [eax+76], 100	; 00000064H

; 48   : 	this->ELFvsMG	= 100;

  00167	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016a	c7 40 50 64 00
	00 00		 mov	 DWORD PTR [eax+80], 100	; 00000064H

; 49   : 	this->ELFvsDL	= 100;

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00174	c7 40 54 64 00
	00 00		 mov	 DWORD PTR [eax+84], 100	; 00000064H

; 50   : 	this->ELFvsRF	= 100;

  0017b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017e	c7 40 58 64 00
	00 00		 mov	 DWORD PTR [eax+88], 100	; 00000064H

; 51   : 
; 52   : 	this->SUMvsSUM	= 100;

  00185	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00188	c7 40 5c 64 00
	00 00		 mov	 DWORD PTR [eax+92], 100	; 00000064H

; 53   : 	this->SUMvsDK	= 100;

  0018f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00192	c7 40 60 64 00
	00 00		 mov	 DWORD PTR [eax+96], 100	; 00000064H

; 54   : 	this->SUMvsDW	= 100;

  00199	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019c	c7 40 64 64 00
	00 00		 mov	 DWORD PTR [eax+100], 100 ; 00000064H

; 55   : 	this->SUMvsELF	= 100;

  001a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a6	c7 40 68 64 00
	00 00		 mov	 DWORD PTR [eax+104], 100 ; 00000064H

; 56   : 	this->SUMvsMG	= 100;

  001ad	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b0	c7 40 6c 64 00
	00 00		 mov	 DWORD PTR [eax+108], 100 ; 00000064H

; 57   : 	this->SUMvsDL	= 100;

  001b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ba	c7 40 70 64 00
	00 00		 mov	 DWORD PTR [eax+112], 100 ; 00000064H

; 58   : 	this->SUMvsRF	= 100;

  001c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c4	c7 40 74 64 00
	00 00		 mov	 DWORD PTR [eax+116], 100 ; 00000064H

; 59   : 
; 60   : 	this->MGvsMG	= 100;

  001cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ce	c7 40 78 64 00
	00 00		 mov	 DWORD PTR [eax+120], 100 ; 00000064H

; 61   : 	this->MGvsDK	= 100;

  001d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d8	c7 40 7c 64 00
	00 00		 mov	 DWORD PTR [eax+124], 100 ; 00000064H

; 62   : 	this->MGvsDW	= 100;

  001df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e2	c7 80 80 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+128], 100 ; 00000064H

; 63   : 	this->MGvsELF	= 100;

  001ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	c7 80 84 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+132], 100 ; 00000064H

; 64   : 	this->MGvsSUM	= 100;

  001f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001fc	c7 80 88 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+136], 100 ; 00000064H

; 65   : 	this->MGvsDL	= 100;

  00206	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00209	c7 80 8c 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+140], 100 ; 00000064H

; 66   : 	this->MGvsRF	= 100;

  00213	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00216	c7 80 90 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+144], 100 ; 00000064H

; 67   : 
; 68   : 	this->DLvsDL	= 100;

  00220	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00223	c7 80 94 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+148], 100 ; 00000064H

; 69   : 	this->DLvsDK	= 100;

  0022d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00230	c7 80 98 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+152], 100 ; 00000064H

; 70   : 	this->DLvsDW	= 100;

  0023a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0023d	c7 80 9c 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+156], 100 ; 00000064H

; 71   : 	this->DLvsELF	= 100;

  00247	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024a	c7 80 a0 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+160], 100 ; 00000064H

; 72   : 	this->DLvsSUM	= 100;

  00254	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00257	c7 80 a4 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+164], 100 ; 00000064H

; 73   : 	this->DLvsMG	= 100;

  00261	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00264	c7 80 a8 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+168], 100 ; 00000064H

; 74   : 	this->DLvsRF	= 100;

  0026e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00271	c7 80 ac 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+172], 100 ; 00000064H

; 75   : 
; 76   : 	this->RFvsRF	= 100;

  0027b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0027e	c7 80 b0 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+176], 100 ; 00000064H

; 77   : 	this->RFvsDK	= 100;

  00288	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028b	c7 80 b4 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+180], 100 ; 00000064H

; 78   : 	this->RFvsDW	= 100;

  00295	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00298	c7 80 b8 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+184], 100 ; 00000064H

; 79   : 	this->RFvsELF	= 100;

  002a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a5	c7 80 bc 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+188], 100 ; 00000064H

; 80   : 	this->RFvsSUM	= 100;

  002af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b2	c7 80 c0 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+192], 100 ; 00000064H

; 81   : 	this->RFvsMG	= 100;

  002bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002bf	c7 80 c4 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+196], 100 ; 00000064H

; 82   : 	this->RFvsDL	= 100;

  002c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002cc	c7 80 c8 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+200], 100 ; 00000064H

; 83   : 
; 84   : 	this->m_EnableMonster = false;

  002d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d9	c6 80 cc 00 00
	00 00		 mov	 BYTE PTR [eax+204], 0

; 85   : 
; 86   : 	this->m_DKvsMonster = 100;

  002e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002e3	c7 80 d0 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+208], 100 ; 00000064H

; 87   : 	this->m_DWvsMonster = 100;

  002ed	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002f0	c7 80 d4 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+212], 100 ; 00000064H

; 88   : 	this->m_ELFvsMonster = 100;

  002fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002fd	c7 80 d8 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+216], 100 ; 00000064H

; 89   : 	this->m_SUMvsMonster = 100;

  00307	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0030a	c7 80 dc 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+220], 100 ; 00000064H

; 90   : 	this->m_MGvsMonster = 100;

  00314	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00317	c7 80 e0 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+224], 100 ; 00000064H

; 91   : 	this->m_DLvsMonster = 100;

  00321	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00324	c7 80 e4 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+228], 100 ; 00000064H

; 92   : 	this->m_RFvsMonster = 100;

  0032e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00331	c7 80 e8 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+232], 100 ; 00000064H

; 93   : 
; 94   : 	this->m_EnableRefflect = 0;

  0033b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0033e	c6 80 f0 00 00
	00 00		 mov	 BYTE PTR [eax+240], 0

; 95   : 	this->m_DWRefflectPercent = 100;

  00345	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00348	c7 80 f4 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+244], 100 ; 00000064H

; 96   : 	this->m_DKRefflectPercent = 100;

  00352	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00355	c7 80 f8 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+248], 100 ; 00000064H

; 97   : 	this->m_FERefflectPercent = 100;

  0035f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00362	c7 80 fc 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+252], 100 ; 00000064H

; 98   : 	this->m_MGRefflectPercent = 100;

  0036c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0036f	c7 80 00 01 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+256], 100 ; 00000064H

; 99   : 	this->m_DLRefflectPercent = 100;

  00379	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0037c	c7 80 04 01 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+260], 100 ; 00000064H

; 100  : 	this->m_SURefflectPercent = 100;

  00386	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00389	c7 80 08 01 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+264], 100 ; 00000064H

; 101  : 	this->m_RFRefflectPercent = 100;

  00393	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00396	c7 80 0c 01 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+268], 100 ; 00000064H

; 102  : 
; 103  : 	this->m_EnableDamagePercent = false;

  003a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003a3	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0

; 104  : 	this->m_vResetDamage.clear();

  003ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b0	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  003b6	e8 00 00 00 00	 call	 ?clear@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::clear

; 105  : }

  003bb	5f		 pop	 edi
  003bc	5e		 pop	 esi
  003bd	5b		 pop	 ebx
  003be	8b e5		 mov	 esp, ebp
  003c0	5d		 pop	 ebp
  003c1	c3		 ret	 0
?Init@cBalanceSystem@@QAEXXZ ENDP			; cBalanceSystem::Init
_TEXT	ENDS
PUBLIC	?ReadResetDamage@cBalanceSystem@@QAEXPAD@Z	; cBalanceSystem::ReadResetDamage
PUBLIC	??_C@_0BJ@EFMMBLFP@ExData?2BalanceDamage?4dat?$AA@ ; `string'
PUBLIC	??_C@_0BB@NPNFBGBF@RFReflectPercent?$AA@	; `string'
PUBLIC	??_C@_0BB@JHJMFHDK@SUReflectPercent?$AA@	; `string'
PUBLIC	??_C@_0BB@JLADICEM@DLReflectPercent?$AA@	; `string'
PUBLIC	??_C@_0BB@KAGOCNCM@MGReflectPercent?$AA@	; `string'
PUBLIC	??_C@_0BB@JCEEBMFF@FEReflectPercent?$AA@	; `string'
PUBLIC	??_C@_0BB@GGPKHKDJ@DKReflectPercent?$AA@	; `string'
PUBLIC	??_C@_0BB@CHPPJHGP@DWReflectPercent?$AA@	; `string'
PUBLIC	??_C@_07NLAFAPNO@Reflect?$AA@			; `string'
PUBLIC	??_C@_0O@DIPDMJIJ@EnableReflect?$AA@		; `string'
PUBLIC	??_C@_03BAPJJKHI@Pet?$AA@			; `string'
PUBLIC	??_C@_0BG@BDENJGAH@DKFenrirDamagePercent?$AA@	; `string'
PUBLIC	??_C@_0M@KMEMBOBB@RFvsMonster?$AA@		; `string'
PUBLIC	??_C@_0M@KNMGAOIJ@DLvsMonster?$AA@		; `string'
PUBLIC	??_C@_0M@BDEOLDFM@MGvsMonster?$AA@		; `string'
PUBLIC	??_C@_0N@DLBEKLII@SUMvsMonster?$AA@		; `string'
PUBLIC	??_C@_0N@JNGGICKG@ELFvsMonster?$AA@		; `string'
PUBLIC	??_C@_0M@CABBENAG@DWvsMonster?$AA@		; `string'
PUBLIC	??_C@_0M@IEPNBLAK@DKvsMonster?$AA@		; `string'
PUBLIC	??_C@_07GOHPBKOH@Monster?$AA@			; `string'
PUBLIC	??_C@_0O@INIJNMLA@EnableMonster?$AA@		; `string'
PUBLIC	??_C@_06CLJPAOGG@RFvsDL?$AA@			; `string'
PUBLIC	??_C@_06MHLKOMCC@RFvsMG?$AA@			; `string'
PUBLIC	??_C@_07DPBEJNPC@RFvsSUM?$AA@			; `string'
PUBLIC	??_C@_07LKGFNEIF@RFvsELF?$AA@			; `string'
PUBLIC	??_C@_06ICKJMFPM@RFvsDW?$AA@			; `string'
PUBLIC	??_C@_06GENOJIKB@RFvsDK?$AA@			; `string'
PUBLIC	??_C@_06MJNLDJCO@RFvsRF?$AA@			; `string'
PUBLIC	??_C@_06GMEOLDLM@DLvsRF?$AA@			; `string'
PUBLIC	??_C@_06GCCPGGLA@DLvsMG?$AA@			; `string'
PUBLIC	??_C@_07CBLAPKBA@DLvsSUM?$AA@			; `string'
PUBLIC	??_C@_07KEMBLDGH@DLvsELF?$AA@			; `string'
PUBLIC	??_C@_06CHDMEPGO@DLvsDW?$AA@			; `string'
PUBLIC	??_C@_06MBELBCDD@DLvsDK?$AA@			; `string'
PUBLIC	??_C@_06IOAKIEPE@DLvsDL?$AA@			; `string'
PUBLIC	??_C@_06JDBBAGKM@MGvsRF?$AA@			; `string'
PUBLIC	??_C@_06HBFFDBOE@MGvsDL?$AA@			; `string'
PUBLIC	??_C@_07DMPILFMB@MGvsSUM?$AA@			; `string'
PUBLIC	??_C@_07LJIJPMLG@MGvsELF?$AA@			; `string'
PUBLIC	??_C@_06NIGDPKHO@MGvsDW?$AA@			; `string'
PUBLIC	??_C@_06DOBEKHCD@MGvsDK?$AA@			; `string'
PUBLIC	??_C@_06JNHANDKA@MGvsMG?$AA@			; `string'
PUBLIC	??_C@_07EFFMADFB@SUMvsRF?$AA@			; `string'
PUBLIC	??_C@_07KHBIDEBJ@SUMvsDL?$AA@			; `string'
PUBLIC	??_C@_07ELDNNGFN@SUMvsMG?$AA@			; `string'
PUBLIC	??_C@_08HKFDDPBC@SUMvsELF?$AA@			; `string'
PUBLIC	??_C@_07OCOPPID@SUMvsDW?$AA@			; `string'
PUBLIC	??_C@_07OIFJKCNO@SUMvsDK?$AA@			; `string'
PUBLIC	??_C@_08PPCCHGGF@SUMvsSUM?$AA@			; `string'
PUBLIC	??_C@_07GHAJBCCD@ELFvsRF?$AA@			; `string'
PUBLIC	??_C@_07IFENCFGL@ELFvsDL?$AA@			; `string'
PUBLIC	??_C@_08DODMHBDM@ELFvsMG?5?$AA@			; `string'
PUBLIC	??_C@_08EBALDDGE@ELFvsSUM?$AA@			; `string'
PUBLIC	??_C@_07CMHLOOPB@ELFvsDW?$AA@			; `string'
PUBLIC	??_C@_07MKAMLDKM@ELFvsDK?$AA@			; `string'
PUBLIC	??_C@_08MEHKHKBD@ELFvsELF?$AA@			; `string'
PUBLIC	??_C@_06FFPEBOE@DWvsRF?$AA@			; `string'
PUBLIC	??_C@_06OHBLHGKM@DWvsDL?$AA@			; `string'
PUBLIC	??_C@_06LDOJEOI@DWvsMG?$AA@			; `string'
PUBLIC	??_C@_07EEGJDCCE@DWvsSUM?$AA@			; `string'
PUBLIC	??_C@_07MBBIHLFD@DWvsELF?$AA@			; `string'
PUBLIC	??_C@_06KIFKOAGL@DWvsDK?$AA@			; `string'
PUBLIC	??_C@_06EOCNLNDG@DWvsDW?$AA@			; `string'
PUBLIC	??_C@_06HBELIDAE@DKvsRF?$AA@			; `string'
PUBLIC	??_C@_06JDAPLEEM@DKvsDL?$AA@			; `string'
PUBLIC	??_C@_06HPCKFGAI@DKvsMG?$AA@			; `string'
PUBLIC	??_C@_07OEBHMEJO@DKvsSUM?$AA@			; `string'
PUBLIC	??_C@_07GBGGINOJ@DKvsELF?$AA@			; `string'
PUBLIC	??_C@_06DKDJHPNG@DKvsDW?$AA@			; `string'
PUBLIC	??_C@_06NMEOCCIL@DKvsDK?$AA@			; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	?ReadConfigs@cBalanceSystem@@QAEXPAD@Z		; cBalanceSystem::ReadConfigs
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?CheckFile@@YA_NPAD@Z:PROC			; CheckFile
;	COMDAT ??_C@_0BJ@EFMMBLFP@ExData?2BalanceDamage?4dat?$AA@
CONST	SEGMENT
??_C@_0BJ@EFMMBLFP@ExData?2BalanceDamage?4dat?$AA@ DB 'ExData\BalanceDama'
	DB	'ge.dat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NPNFBGBF@RFReflectPercent?$AA@
CONST	SEGMENT
??_C@_0BB@NPNFBGBF@RFReflectPercent?$AA@ DB 'RFReflectPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JHJMFHDK@SUReflectPercent?$AA@
CONST	SEGMENT
??_C@_0BB@JHJMFHDK@SUReflectPercent?$AA@ DB 'SUReflectPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JLADICEM@DLReflectPercent?$AA@
CONST	SEGMENT
??_C@_0BB@JLADICEM@DLReflectPercent?$AA@ DB 'DLReflectPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KAGOCNCM@MGReflectPercent?$AA@
CONST	SEGMENT
??_C@_0BB@KAGOCNCM@MGReflectPercent?$AA@ DB 'MGReflectPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JCEEBMFF@FEReflectPercent?$AA@
CONST	SEGMENT
??_C@_0BB@JCEEBMFF@FEReflectPercent?$AA@ DB 'FEReflectPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGPKHKDJ@DKReflectPercent?$AA@
CONST	SEGMENT
??_C@_0BB@GGPKHKDJ@DKReflectPercent?$AA@ DB 'DKReflectPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CHPPJHGP@DWReflectPercent?$AA@
CONST	SEGMENT
??_C@_0BB@CHPPJHGP@DWReflectPercent?$AA@ DB 'DWReflectPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NLAFAPNO@Reflect?$AA@
CONST	SEGMENT
??_C@_07NLAFAPNO@Reflect?$AA@ DB 'Reflect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DIPDMJIJ@EnableReflect?$AA@
CONST	SEGMENT
??_C@_0O@DIPDMJIJ@EnableReflect?$AA@ DB 'EnableReflect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BAPJJKHI@Pet?$AA@
CONST	SEGMENT
??_C@_03BAPJJKHI@Pet?$AA@ DB 'Pet', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BDENJGAH@DKFenrirDamagePercent?$AA@
CONST	SEGMENT
??_C@_0BG@BDENJGAH@DKFenrirDamagePercent?$AA@ DB 'DKFenrirDamagePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KMEMBOBB@RFvsMonster?$AA@
CONST	SEGMENT
??_C@_0M@KMEMBOBB@RFvsMonster?$AA@ DB 'RFvsMonster', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KNMGAOIJ@DLvsMonster?$AA@
CONST	SEGMENT
??_C@_0M@KNMGAOIJ@DLvsMonster?$AA@ DB 'DLvsMonster', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDEOLDFM@MGvsMonster?$AA@
CONST	SEGMENT
??_C@_0M@BDEOLDFM@MGvsMonster?$AA@ DB 'MGvsMonster', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLBEKLII@SUMvsMonster?$AA@
CONST	SEGMENT
??_C@_0N@DLBEKLII@SUMvsMonster?$AA@ DB 'SUMvsMonster', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JNGGICKG@ELFvsMonster?$AA@
CONST	SEGMENT
??_C@_0N@JNGGICKG@ELFvsMonster?$AA@ DB 'ELFvsMonster', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CABBENAG@DWvsMonster?$AA@
CONST	SEGMENT
??_C@_0M@CABBENAG@DWvsMonster?$AA@ DB 'DWvsMonster', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IEPNBLAK@DKvsMonster?$AA@
CONST	SEGMENT
??_C@_0M@IEPNBLAK@DKvsMonster?$AA@ DB 'DKvsMonster', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GOHPBKOH@Monster?$AA@
CONST	SEGMENT
??_C@_07GOHPBKOH@Monster?$AA@ DB 'Monster', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@INIJNMLA@EnableMonster?$AA@
CONST	SEGMENT
??_C@_0O@INIJNMLA@EnableMonster?$AA@ DB 'EnableMonster', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CLJPAOGG@RFvsDL?$AA@
CONST	SEGMENT
??_C@_06CLJPAOGG@RFvsDL?$AA@ DB 'RFvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MHLKOMCC@RFvsMG?$AA@
CONST	SEGMENT
??_C@_06MHLKOMCC@RFvsMG?$AA@ DB 'RFvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DPBEJNPC@RFvsSUM?$AA@
CONST	SEGMENT
??_C@_07DPBEJNPC@RFvsSUM?$AA@ DB 'RFvsSUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LKGFNEIF@RFvsELF?$AA@
CONST	SEGMENT
??_C@_07LKGFNEIF@RFvsELF?$AA@ DB 'RFvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICKJMFPM@RFvsDW?$AA@
CONST	SEGMENT
??_C@_06ICKJMFPM@RFvsDW?$AA@ DB 'RFvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GENOJIKB@RFvsDK?$AA@
CONST	SEGMENT
??_C@_06GENOJIKB@RFvsDK?$AA@ DB 'RFvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJNLDJCO@RFvsRF?$AA@
CONST	SEGMENT
??_C@_06MJNLDJCO@RFvsRF?$AA@ DB 'RFvsRF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMEOLDLM@DLvsRF?$AA@
CONST	SEGMENT
??_C@_06GMEOLDLM@DLvsRF?$AA@ DB 'DLvsRF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCCPGGLA@DLvsMG?$AA@
CONST	SEGMENT
??_C@_06GCCPGGLA@DLvsMG?$AA@ DB 'DLvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CBLAPKBA@DLvsSUM?$AA@
CONST	SEGMENT
??_C@_07CBLAPKBA@DLvsSUM?$AA@ DB 'DLvsSUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KEMBLDGH@DLvsELF?$AA@
CONST	SEGMENT
??_C@_07KEMBLDGH@DLvsELF?$AA@ DB 'DLvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHDMEPGO@DLvsDW?$AA@
CONST	SEGMENT
??_C@_06CHDMEPGO@DLvsDW?$AA@ DB 'DLvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBELBCDD@DLvsDK?$AA@
CONST	SEGMENT
??_C@_06MBELBCDD@DLvsDK?$AA@ DB 'DLvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IOAKIEPE@DLvsDL?$AA@
CONST	SEGMENT
??_C@_06IOAKIEPE@DLvsDL?$AA@ DB 'DLvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDBBAGKM@MGvsRF?$AA@
CONST	SEGMENT
??_C@_06JDBBAGKM@MGvsRF?$AA@ DB 'MGvsRF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBFFDBOE@MGvsDL?$AA@
CONST	SEGMENT
??_C@_06HBFFDBOE@MGvsDL?$AA@ DB 'MGvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DMPILFMB@MGvsSUM?$AA@
CONST	SEGMENT
??_C@_07DMPILFMB@MGvsSUM?$AA@ DB 'MGvsSUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LJIJPMLG@MGvsELF?$AA@
CONST	SEGMENT
??_C@_07LJIJPMLG@MGvsELF?$AA@ DB 'MGvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIGDPKHO@MGvsDW?$AA@
CONST	SEGMENT
??_C@_06NIGDPKHO@MGvsDW?$AA@ DB 'MGvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOBEKHCD@MGvsDK?$AA@
CONST	SEGMENT
??_C@_06DOBEKHCD@MGvsDK?$AA@ DB 'MGvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNHANDKA@MGvsMG?$AA@
CONST	SEGMENT
??_C@_06JNHANDKA@MGvsMG?$AA@ DB 'MGvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EFFMADFB@SUMvsRF?$AA@
CONST	SEGMENT
??_C@_07EFFMADFB@SUMvsRF?$AA@ DB 'SUMvsRF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KHBIDEBJ@SUMvsDL?$AA@
CONST	SEGMENT
??_C@_07KHBIDEBJ@SUMvsDL?$AA@ DB 'SUMvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELDNNGFN@SUMvsMG?$AA@
CONST	SEGMENT
??_C@_07ELDNNGFN@SUMvsMG?$AA@ DB 'SUMvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HKFDDPBC@SUMvsELF?$AA@
CONST	SEGMENT
??_C@_08HKFDDPBC@SUMvsELF?$AA@ DB 'SUMvsELF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OCOPPID@SUMvsDW?$AA@
CONST	SEGMENT
??_C@_07OCOPPID@SUMvsDW?$AA@ DB 'SUMvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OIFJKCNO@SUMvsDK?$AA@
CONST	SEGMENT
??_C@_07OIFJKCNO@SUMvsDK?$AA@ DB 'SUMvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPCCHGGF@SUMvsSUM?$AA@
CONST	SEGMENT
??_C@_08PPCCHGGF@SUMvsSUM?$AA@ DB 'SUMvsSUM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GHAJBCCD@ELFvsRF?$AA@
CONST	SEGMENT
??_C@_07GHAJBCCD@ELFvsRF?$AA@ DB 'ELFvsRF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IFENCFGL@ELFvsDL?$AA@
CONST	SEGMENT
??_C@_07IFENCFGL@ELFvsDL?$AA@ DB 'ELFvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DODMHBDM@ELFvsMG?5?$AA@
CONST	SEGMENT
??_C@_08DODMHBDM@ELFvsMG?5?$AA@ DB 'ELFvsMG ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EBALDDGE@ELFvsSUM?$AA@
CONST	SEGMENT
??_C@_08EBALDDGE@ELFvsSUM?$AA@ DB 'ELFvsSUM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMHLOOPB@ELFvsDW?$AA@
CONST	SEGMENT
??_C@_07CMHLOOPB@ELFvsDW?$AA@ DB 'ELFvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MKAMLDKM@ELFvsDK?$AA@
CONST	SEGMENT
??_C@_07MKAMLDKM@ELFvsDK?$AA@ DB 'ELFvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MEHKHKBD@ELFvsELF?$AA@
CONST	SEGMENT
??_C@_08MEHKHKBD@ELFvsELF?$AA@ DB 'ELFvsELF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFPEBOE@DWvsRF?$AA@
CONST	SEGMENT
??_C@_06FFPEBOE@DWvsRF?$AA@ DB 'DWvsRF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHBLHGKM@DWvsDL?$AA@
CONST	SEGMENT
??_C@_06OHBLHGKM@DWvsDL?$AA@ DB 'DWvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LDOJEOI@DWvsMG?$AA@
CONST	SEGMENT
??_C@_06LDOJEOI@DWvsMG?$AA@ DB 'DWvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EEGJDCCE@DWvsSUM?$AA@
CONST	SEGMENT
??_C@_07EEGJDCCE@DWvsSUM?$AA@ DB 'DWvsSUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MBBIHLFD@DWvsELF?$AA@
CONST	SEGMENT
??_C@_07MBBIHLFD@DWvsELF?$AA@ DB 'DWvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KIFKOAGL@DWvsDK?$AA@
CONST	SEGMENT
??_C@_06KIFKOAGL@DWvsDK?$AA@ DB 'DWvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOCNLNDG@DWvsDW?$AA@
CONST	SEGMENT
??_C@_06EOCNLNDG@DWvsDW?$AA@ DB 'DWvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBELIDAE@DKvsRF?$AA@
CONST	SEGMENT
??_C@_06HBELIDAE@DKvsRF?$AA@ DB 'DKvsRF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDAPLEEM@DKvsDL?$AA@
CONST	SEGMENT
??_C@_06JDAPLEEM@DKvsDL?$AA@ DB 'DKvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPCKFGAI@DKvsMG?$AA@
CONST	SEGMENT
??_C@_06HPCKFGAI@DKvsMG?$AA@ DB 'DKvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEBHMEJO@DKvsSUM?$AA@
CONST	SEGMENT
??_C@_07OEBHMEJO@DKvsSUM?$AA@ DB 'DKvsSUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GBGGINOJ@DKvsELF?$AA@
CONST	SEGMENT
??_C@_07GBGGINOJ@DKvsELF?$AA@ DB 'DKvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKDJHPNG@DKvsDW?$AA@
CONST	SEGMENT
??_C@_06DKDJHPNG@DKvsDW?$AA@ DB 'DKvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NMEOCCIL@DKvsDK?$AA@
CONST	SEGMENT
??_C@_06NMEOCCIL@DKvsDK?$AA@ DB 'DKvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_File$ = 8						; size = 4
?ReadConfigs@cBalanceSystem@@QAEXPAD@Z PROC		; cBalanceSystem::ReadConfigs
; _this$ = ecx

; 108  : {

  003d0	55		 push	 ebp
  003d1	8b ec		 mov	 ebp, esp
  003d3	83 ec 44	 sub	 esp, 68			; 00000044H
  003d6	53		 push	 ebx
  003d7	56		 push	 esi
  003d8	57		 push	 edi
  003d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 	CheckFile(File);

  003dc	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  003df	50		 push	 eax
  003e0	e8 00 00 00 00	 call	 ?CheckFile@@YA_NPAD@Z	; CheckFile
  003e5	83 c4 04	 add	 esp, 4

; 110  : 
; 111  : 	this->Enable	= GetPrivateProfileInt("Common", "Enable", 0, File);

  003e8	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  003eb	50		 push	 eax
  003ec	6a 00		 push	 0
  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  003f3	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  003f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  003fe	85 c0		 test	 eax, eax
  00400	0f 95 c1	 setne	 cl
  00403	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00406	88 4a 04	 mov	 BYTE PTR [edx+4], cl

; 112  : 
; 113  : 	this->DKvsDK	= GetPrivateProfileInt("Common", "DKvsDK", 100, File);

  00409	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0040c	50		 push	 eax
  0040d	6a 64		 push	 100			; 00000064H
  0040f	68 00 00 00 00	 push	 OFFSET ??_C@_06NMEOCCIL@DKvsDK?$AA@
  00414	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00419	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0041f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00422	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 114  : 	this->DKvsDW	= GetPrivateProfileInt("Common", "DKvsDW", 100, File);

  00425	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00428	50		 push	 eax
  00429	6a 64		 push	 100			; 00000064H
  0042b	68 00 00 00 00	 push	 OFFSET ??_C@_06DKDJHPNG@DKvsDW?$AA@
  00430	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00435	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0043b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0043e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 115  : 	this->DKvsELF	= GetPrivateProfileInt("Common", "DKvsELF", 100, File);

  00441	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00444	50		 push	 eax
  00445	6a 64		 push	 100			; 00000064H
  00447	68 00 00 00 00	 push	 OFFSET ??_C@_07GBGGINOJ@DKvsELF?$AA@
  0044c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00451	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00457	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0045a	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 116  : 	this->DKvsSUM	= GetPrivateProfileInt("Common", "DKvsSUM", 100, File);

  0045d	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00460	50		 push	 eax
  00461	6a 64		 push	 100			; 00000064H
  00463	68 00 00 00 00	 push	 OFFSET ??_C@_07OEBHMEJO@DKvsSUM?$AA@
  00468	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0046d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00473	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00476	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 117  : 	this->DKvsMG	= GetPrivateProfileInt("Common", "DKvsMG", 100, File);

  00479	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0047c	50		 push	 eax
  0047d	6a 64		 push	 100			; 00000064H
  0047f	68 00 00 00 00	 push	 OFFSET ??_C@_06HPCKFGAI@DKvsMG?$AA@
  00484	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00489	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0048f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00492	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 118  : 	this->DKvsDL	= GetPrivateProfileInt("Common", "DKvsDL", 100, File);

  00495	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00498	50		 push	 eax
  00499	6a 64		 push	 100			; 00000064H
  0049b	68 00 00 00 00	 push	 OFFSET ??_C@_06JDAPLEEM@DKvsDL?$AA@
  004a0	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  004ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ae	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 119  : 	this->DKvsRF	= GetPrivateProfileInt("Common", "DKvsRF", 100, File);

  004b1	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  004b4	50		 push	 eax
  004b5	6a 64		 push	 100			; 00000064H
  004b7	68 00 00 00 00	 push	 OFFSET ??_C@_06HBELIDAE@DKvsRF?$AA@
  004bc	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  004c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ca	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 120  : 
; 121  : 	this->DWvsDW	= GetPrivateProfileInt("Common", "DWvsDW", 100, File);

  004cd	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  004d0	50		 push	 eax
  004d1	6a 64		 push	 100			; 00000064H
  004d3	68 00 00 00 00	 push	 OFFSET ??_C@_06EOCNLNDG@DWvsDW?$AA@
  004d8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  004e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004e6	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 122  : 	this->DWvsDK	= GetPrivateProfileInt("Common", "DWvsDK", 100, File);

  004e9	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  004ec	50		 push	 eax
  004ed	6a 64		 push	 100			; 00000064H
  004ef	68 00 00 00 00	 push	 OFFSET ??_C@_06KIFKOAGL@DWvsDK?$AA@
  004f4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  004ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00502	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 123  : 	this->DWvsELF	= GetPrivateProfileInt("Common", "DWvsELF", 100, File);

  00505	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00508	50		 push	 eax
  00509	6a 64		 push	 100			; 00000064H
  0050b	68 00 00 00 00	 push	 OFFSET ??_C@_07MBBIHLFD@DWvsELF?$AA@
  00510	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00515	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0051b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0051e	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 124  : 	this->DWvsSUM	= GetPrivateProfileInt("Common", "DWvsSUM", 100, File);

  00521	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00524	50		 push	 eax
  00525	6a 64		 push	 100			; 00000064H
  00527	68 00 00 00 00	 push	 OFFSET ??_C@_07EEGJDCCE@DWvsSUM?$AA@
  0052c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00531	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00537	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0053a	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 125  : 	this->DWvsMG	= GetPrivateProfileInt("Common", "DWvsMG", 100, File);

  0053d	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00540	50		 push	 eax
  00541	6a 64		 push	 100			; 00000064H
  00543	68 00 00 00 00	 push	 OFFSET ??_C@_06LDOJEOI@DWvsMG?$AA@
  00548	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0054d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00553	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00556	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 126  : 	this->DWvsDL	= GetPrivateProfileInt("Common", "DWvsDL", 100, File);

  00559	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0055c	50		 push	 eax
  0055d	6a 64		 push	 100			; 00000064H
  0055f	68 00 00 00 00	 push	 OFFSET ??_C@_06OHBLHGKM@DWvsDL?$AA@
  00564	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00569	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0056f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00572	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 127  : 	this->DWvsRF	= GetPrivateProfileInt("Common", "DWvsRF", 100, File);

  00575	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00578	50		 push	 eax
  00579	6a 64		 push	 100			; 00000064H
  0057b	68 00 00 00 00	 push	 OFFSET ??_C@_06FFPEBOE@DWvsRF?$AA@
  00580	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00585	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0058b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0058e	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 128  : 
; 129  : 	this->ELFvsELF	= GetPrivateProfileInt("Common", "ELFvsELF", 100, File);

  00591	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00594	50		 push	 eax
  00595	6a 64		 push	 100			; 00000064H
  00597	68 00 00 00 00	 push	 OFFSET ??_C@_08MEHKHKBD@ELFvsELF?$AA@
  0059c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  005a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  005a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005aa	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 130  : 	this->ELFvsDK	= GetPrivateProfileInt("Common", "ELFvsDK", 100, File);

  005ad	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  005b0	50		 push	 eax
  005b1	6a 64		 push	 100			; 00000064H
  005b3	68 00 00 00 00	 push	 OFFSET ??_C@_07MKAMLDKM@ELFvsDK?$AA@
  005b8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  005bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  005c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c6	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 131  : 	this->ELFvsDW	= GetPrivateProfileInt("Common", "ELFvsDW", 100, File);

  005c9	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  005cc	50		 push	 eax
  005cd	6a 64		 push	 100			; 00000064H
  005cf	68 00 00 00 00	 push	 OFFSET ??_C@_07CMHLOOPB@ELFvsDW?$AA@
  005d4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  005d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  005df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005e2	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 132  : 	this->ELFvsSUM	= GetPrivateProfileInt("Common", "ELFvsSUM", 100, File);

  005e5	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  005e8	50		 push	 eax
  005e9	6a 64		 push	 100			; 00000064H
  005eb	68 00 00 00 00	 push	 OFFSET ??_C@_08EBALDDGE@ELFvsSUM?$AA@
  005f0	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  005f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  005fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005fe	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 133  : 	this->ELFvsMG	= GetPrivateProfileInt("Common", "ELFvsMG ", 100, File);

  00601	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00604	50		 push	 eax
  00605	6a 64		 push	 100			; 00000064H
  00607	68 00 00 00 00	 push	 OFFSET ??_C@_08DODMHBDM@ELFvsMG?5?$AA@
  0060c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00611	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00617	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0061a	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 134  : 	this->ELFvsDL	= GetPrivateProfileInt("Common", "ELFvsDL", 100, File);

  0061d	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00620	50		 push	 eax
  00621	6a 64		 push	 100			; 00000064H
  00623	68 00 00 00 00	 push	 OFFSET ??_C@_07IFENCFGL@ELFvsDL?$AA@
  00628	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0062d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00633	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00636	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 135  : 	this->ELFvsRF	= GetPrivateProfileInt("Common", "ELFvsRF", 100, File);

  00639	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0063c	50		 push	 eax
  0063d	6a 64		 push	 100			; 00000064H
  0063f	68 00 00 00 00	 push	 OFFSET ??_C@_07GHAJBCCD@ELFvsRF?$AA@
  00644	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00649	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0064f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00652	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 136  : 
; 137  : 	this->SUMvsSUM	= GetPrivateProfileInt("Common", "SUMvsSUM", 100, File);

  00655	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00658	50		 push	 eax
  00659	6a 64		 push	 100			; 00000064H
  0065b	68 00 00 00 00	 push	 OFFSET ??_C@_08PPCCHGGF@SUMvsSUM?$AA@
  00660	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00665	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0066b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0066e	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 138  : 	this->SUMvsDK	= GetPrivateProfileInt("Common", "SUMvsDK", 100, File);

  00671	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00674	50		 push	 eax
  00675	6a 64		 push	 100			; 00000064H
  00677	68 00 00 00 00	 push	 OFFSET ??_C@_07OIFJKCNO@SUMvsDK?$AA@
  0067c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00681	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00687	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0068a	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 139  : 	this->SUMvsDW	= GetPrivateProfileInt("Common", "SUMvsDW", 100, File);

  0068d	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00690	50		 push	 eax
  00691	6a 64		 push	 100			; 00000064H
  00693	68 00 00 00 00	 push	 OFFSET ??_C@_07OCOPPID@SUMvsDW?$AA@
  00698	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0069d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006a6	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 140  : 	this->SUMvsELF	= GetPrivateProfileInt("Common", "SUMvsELF", 100, File);

  006a9	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  006ac	50		 push	 eax
  006ad	6a 64		 push	 100			; 00000064H
  006af	68 00 00 00 00	 push	 OFFSET ??_C@_08HKFDDPBC@SUMvsELF?$AA@
  006b4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  006b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006c2	89 41 68	 mov	 DWORD PTR [ecx+104], eax

; 141  : 	this->SUMvsMG	= GetPrivateProfileInt("Common", "SUMvsMG", 100, File);

  006c5	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  006c8	50		 push	 eax
  006c9	6a 64		 push	 100			; 00000064H
  006cb	68 00 00 00 00	 push	 OFFSET ??_C@_07ELDNNGFN@SUMvsMG?$AA@
  006d0	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  006d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006de	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 142  : 	this->SUMvsDL	= GetPrivateProfileInt("Common", "SUMvsDL", 100, File);

  006e1	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  006e4	50		 push	 eax
  006e5	6a 64		 push	 100			; 00000064H
  006e7	68 00 00 00 00	 push	 OFFSET ??_C@_07KHBIDEBJ@SUMvsDL?$AA@
  006ec	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  006f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  006f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006fa	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 143  : 	this->SUMvsRF	= GetPrivateProfileInt("Common", "SUMvsRF", 100, File);

  006fd	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00700	50		 push	 eax
  00701	6a 64		 push	 100			; 00000064H
  00703	68 00 00 00 00	 push	 OFFSET ??_C@_07EFFMADFB@SUMvsRF?$AA@
  00708	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0070d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00713	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00716	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 144  : 
; 145  : 	this->MGvsMG	= GetPrivateProfileInt("Common", "MGvsMG", 100, File);

  00719	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0071c	50		 push	 eax
  0071d	6a 64		 push	 100			; 00000064H
  0071f	68 00 00 00 00	 push	 OFFSET ??_C@_06JNHANDKA@MGvsMG?$AA@
  00724	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00729	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0072f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00732	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 146  : 	this->MGvsDK	= GetPrivateProfileInt("Common", "MGvsDK", 100, File);

  00735	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00738	50		 push	 eax
  00739	6a 64		 push	 100			; 00000064H
  0073b	68 00 00 00 00	 push	 OFFSET ??_C@_06DOBEKHCD@MGvsDK?$AA@
  00740	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00745	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0074b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0074e	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 147  : 	this->MGvsDW	= GetPrivateProfileInt("Common", "MGvsDW", 100, File);

  00751	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00754	50		 push	 eax
  00755	6a 64		 push	 100			; 00000064H
  00757	68 00 00 00 00	 push	 OFFSET ??_C@_06NIGDPKHO@MGvsDW?$AA@
  0075c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00761	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00767	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0076a	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 148  : 	this->MGvsELF	= GetPrivateProfileInt("Common", "MGvsELF", 100, File);

  00770	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00773	50		 push	 eax
  00774	6a 64		 push	 100			; 00000064H
  00776	68 00 00 00 00	 push	 OFFSET ??_C@_07LJIJPMLG@MGvsELF?$AA@
  0077b	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00780	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00786	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00789	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 149  : 	this->MGvsSUM	= GetPrivateProfileInt("Common", "MGvsSUM", 100, File);

  0078f	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00792	50		 push	 eax
  00793	6a 64		 push	 100			; 00000064H
  00795	68 00 00 00 00	 push	 OFFSET ??_C@_07DMPILFMB@MGvsSUM?$AA@
  0079a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0079f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  007a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a8	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 150  : 	this->MGvsDL	= GetPrivateProfileInt("Common", "MGvsDL", 100, File);

  007ae	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  007b1	50		 push	 eax
  007b2	6a 64		 push	 100			; 00000064H
  007b4	68 00 00 00 00	 push	 OFFSET ??_C@_06HBFFDBOE@MGvsDL?$AA@
  007b9	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  007be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  007c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007c7	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 151  : 	this->MGvsRF	= GetPrivateProfileInt("Common", "MGvsRF", 100, File);

  007cd	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  007d0	50		 push	 eax
  007d1	6a 64		 push	 100			; 00000064H
  007d3	68 00 00 00 00	 push	 OFFSET ??_C@_06JDBBAGKM@MGvsRF?$AA@
  007d8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  007dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  007e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007e6	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 152  : 
; 153  : 	this->DLvsDL	= GetPrivateProfileInt("Common", "DLvsDL", 100, File);

  007ec	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  007ef	50		 push	 eax
  007f0	6a 64		 push	 100			; 00000064H
  007f2	68 00 00 00 00	 push	 OFFSET ??_C@_06IOAKIEPE@DLvsDL?$AA@
  007f7	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  007fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00802	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00805	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 154  : 	this->DLvsDK	= GetPrivateProfileInt("Common", "DLvsDK", 100, File);

  0080b	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0080e	50		 push	 eax
  0080f	6a 64		 push	 100			; 00000064H
  00811	68 00 00 00 00	 push	 OFFSET ??_C@_06MBELBCDD@DLvsDK?$AA@
  00816	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0081b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00821	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00824	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax

; 155  : 	this->DLvsDW	= GetPrivateProfileInt("Common", "DLvsDW", 100, File);

  0082a	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0082d	50		 push	 eax
  0082e	6a 64		 push	 100			; 00000064H
  00830	68 00 00 00 00	 push	 OFFSET ??_C@_06CHDMEPGO@DLvsDW?$AA@
  00835	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0083a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00840	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00843	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax

; 156  : 	this->DLvsELF	= GetPrivateProfileInt("Common", "DLvsELF", 100, File);

  00849	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0084c	50		 push	 eax
  0084d	6a 64		 push	 100			; 00000064H
  0084f	68 00 00 00 00	 push	 OFFSET ??_C@_07KEMBLDGH@DLvsELF?$AA@
  00854	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00859	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0085f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00862	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 157  : 	this->DLvsSUM	= GetPrivateProfileInt("Common", "DLvsSUM", 100, File);

  00868	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0086b	50		 push	 eax
  0086c	6a 64		 push	 100			; 00000064H
  0086e	68 00 00 00 00	 push	 OFFSET ??_C@_07CBLAPKBA@DLvsSUM?$AA@
  00873	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00878	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0087e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00881	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 158  : 	this->DLvsMG	= GetPrivateProfileInt("Common", "DLvsMG", 100, File);

  00887	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0088a	50		 push	 eax
  0088b	6a 64		 push	 100			; 00000064H
  0088d	68 00 00 00 00	 push	 OFFSET ??_C@_06GCCPGGLA@DLvsMG?$AA@
  00892	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00897	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0089d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008a0	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax

; 159  : 	this->DLvsRF	= GetPrivateProfileInt("Common", "DLvsRF", 100, File);

  008a6	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  008a9	50		 push	 eax
  008aa	6a 64		 push	 100			; 00000064H
  008ac	68 00 00 00 00	 push	 OFFSET ??_C@_06GMEOLDLM@DLvsRF?$AA@
  008b1	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  008b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  008bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008bf	89 81 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], eax

; 160  : 
; 161  : 	this->RFvsRF	= GetPrivateProfileInt("Common", "RFvsRF", 100, File);

  008c5	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  008c8	50		 push	 eax
  008c9	6a 64		 push	 100			; 00000064H
  008cb	68 00 00 00 00	 push	 OFFSET ??_C@_06MJNLDJCO@RFvsRF?$AA@
  008d0	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  008d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  008db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008de	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 162  : 	this->RFvsDK	= GetPrivateProfileInt("Common", "RFvsDK", 100, File);

  008e4	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  008e7	50		 push	 eax
  008e8	6a 64		 push	 100			; 00000064H
  008ea	68 00 00 00 00	 push	 OFFSET ??_C@_06GENOJIKB@RFvsDK?$AA@
  008ef	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  008f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  008fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008fd	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 163  : 	this->RFvsDW	= GetPrivateProfileInt("Common", "RFvsDW", 100, File);

  00903	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00906	50		 push	 eax
  00907	6a 64		 push	 100			; 00000064H
  00909	68 00 00 00 00	 push	 OFFSET ??_C@_06ICKJMFPM@RFvsDW?$AA@
  0090e	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00913	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00919	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0091c	89 81 b8 00 00
	00		 mov	 DWORD PTR [ecx+184], eax

; 164  : 	this->RFvsELF	= GetPrivateProfileInt("Common", "RFvsELF", 100, File);

  00922	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00925	50		 push	 eax
  00926	6a 64		 push	 100			; 00000064H
  00928	68 00 00 00 00	 push	 OFFSET ??_C@_07LKGFNEIF@RFvsELF?$AA@
  0092d	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00932	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00938	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0093b	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax

; 165  : 	this->RFvsSUM	= GetPrivateProfileInt("Common", "RFvsSUM", 100, File);

  00941	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00944	50		 push	 eax
  00945	6a 64		 push	 100			; 00000064H
  00947	68 00 00 00 00	 push	 OFFSET ??_C@_07DPBEJNPC@RFvsSUM?$AA@
  0094c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00951	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00957	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0095a	89 81 c0 00 00
	00		 mov	 DWORD PTR [ecx+192], eax

; 166  : 	this->RFvsMG	= GetPrivateProfileInt("Common", "RFvsMG", 100, File);

  00960	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00963	50		 push	 eax
  00964	6a 64		 push	 100			; 00000064H
  00966	68 00 00 00 00	 push	 OFFSET ??_C@_06MHLKOMCC@RFvsMG?$AA@
  0096b	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00970	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00976	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00979	89 81 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], eax

; 167  : 	this->RFvsDL	= GetPrivateProfileInt("Common", "RFvsDL", 100, File);

  0097f	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00982	50		 push	 eax
  00983	6a 64		 push	 100			; 00000064H
  00985	68 00 00 00 00	 push	 OFFSET ??_C@_06CLJPAOGG@RFvsDL?$AA@
  0098a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0098f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00995	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00998	89 81 c8 00 00
	00		 mov	 DWORD PTR [ecx+200], eax

; 168  : 
; 169  : 	if( g_ExLicense.CheckUser(MedoniAndrei) || 
; 170  : 		g_ExLicense.CheckUser(Gredy) || g_ExLicense.CheckUser(Gredy2) || g_ExLicense.CheckUser(GredyLocal) ||
; 171  : 		g_ExLicense.CheckUser(ulasevich) || g_ExLicense.CheckUser(ulasevich2) ||
; 172  : 		g_ExLicense.CheckUser(eExUB::Artem) || g_ExLicense.CheckUser(eExUB::Artem2))

  0099e	6a 32		 push	 50			; 00000032H
  009a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  009a5	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  009aa	0f b6 c0	 movzx	 eax, al
  009ad	85 c0		 test	 eax, eax
  009af	0f 85 89 00 00
	00		 jne	 $LN5@ReadConfig
  009b5	6a 20		 push	 32			; 00000020H
  009b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  009bc	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  009c1	0f b6 c0	 movzx	 eax, al
  009c4	85 c0		 test	 eax, eax
  009c6	75 76		 jne	 SHORT $LN5@ReadConfig
  009c8	6a 22		 push	 34			; 00000022H
  009ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  009cf	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  009d4	0f b6 c0	 movzx	 eax, al
  009d7	85 c0		 test	 eax, eax
  009d9	75 63		 jne	 SHORT $LN5@ReadConfig
  009db	6a 21		 push	 33			; 00000021H
  009dd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  009e2	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  009e7	0f b6 c0	 movzx	 eax, al
  009ea	85 c0		 test	 eax, eax
  009ec	75 50		 jne	 SHORT $LN5@ReadConfig
  009ee	6a 17		 push	 23			; 00000017H
  009f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  009f5	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  009fa	0f b6 c0	 movzx	 eax, al
  009fd	85 c0		 test	 eax, eax
  009ff	75 3d		 jne	 SHORT $LN5@ReadConfig
  00a01	6a 24		 push	 36			; 00000024H
  00a03	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00a08	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00a0d	0f b6 c0	 movzx	 eax, al
  00a10	85 c0		 test	 eax, eax
  00a12	75 2a		 jne	 SHORT $LN5@ReadConfig
  00a14	6a 30		 push	 48			; 00000030H
  00a16	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00a1b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00a20	0f b6 c0	 movzx	 eax, al
  00a23	85 c0		 test	 eax, eax
  00a25	75 17		 jne	 SHORT $LN5@ReadConfig
  00a27	6a 31		 push	 49			; 00000031H
  00a29	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00a2e	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00a33	0f b6 c0	 movzx	 eax, al
  00a36	85 c0		 test	 eax, eax
  00a38	0f 84 fd 00 00
	00		 je	 $LN6@ReadConfig
$LN5@ReadConfig:

; 173  : 	{
; 174  : 		this->m_EnableMonster = GetPrivateProfileInt("Monster", "EnableMonster", 1, File);

  00a3e	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00a41	50		 push	 eax
  00a42	6a 01		 push	 1
  00a44	68 00 00 00 00	 push	 OFFSET ??_C@_0O@INIJNMLA@EnableMonster?$AA@
  00a49	68 00 00 00 00	 push	 OFFSET ??_C@_07GOHPBKOH@Monster?$AA@
  00a4e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00a54	85 c0		 test	 eax, eax
  00a56	0f 95 c1	 setne	 cl
  00a59	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a5c	88 8a cc 00 00
	00		 mov	 BYTE PTR [edx+204], cl

; 175  : 
; 176  : 		this->m_DKvsMonster = GetPrivateProfileInt("Monster", "DKvsMonster", 100, File);

  00a62	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00a65	50		 push	 eax
  00a66	6a 64		 push	 100			; 00000064H
  00a68	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IEPNBLAK@DKvsMonster?$AA@
  00a6d	68 00 00 00 00	 push	 OFFSET ??_C@_07GOHPBKOH@Monster?$AA@
  00a72	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00a78	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a7b	89 81 d0 00 00
	00		 mov	 DWORD PTR [ecx+208], eax

; 177  : 		this->m_DWvsMonster = GetPrivateProfileInt("Monster", "DWvsMonster", 100, File);

  00a81	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00a84	50		 push	 eax
  00a85	6a 64		 push	 100			; 00000064H
  00a87	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CABBENAG@DWvsMonster?$AA@
  00a8c	68 00 00 00 00	 push	 OFFSET ??_C@_07GOHPBKOH@Monster?$AA@
  00a91	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00a97	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a9a	89 81 d4 00 00
	00		 mov	 DWORD PTR [ecx+212], eax

; 178  : 		this->m_ELFvsMonster = GetPrivateProfileInt("Monster", "ELFvsMonster", 100, File);

  00aa0	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00aa3	50		 push	 eax
  00aa4	6a 64		 push	 100			; 00000064H
  00aa6	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JNGGICKG@ELFvsMonster?$AA@
  00aab	68 00 00 00 00	 push	 OFFSET ??_C@_07GOHPBKOH@Monster?$AA@
  00ab0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00ab6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ab9	89 81 d8 00 00
	00		 mov	 DWORD PTR [ecx+216], eax

; 179  : 		this->m_SUMvsMonster = GetPrivateProfileInt("Monster", "SUMvsMonster", 100, File);

  00abf	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00ac2	50		 push	 eax
  00ac3	6a 64		 push	 100			; 00000064H
  00ac5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DLBEKLII@SUMvsMonster?$AA@
  00aca	68 00 00 00 00	 push	 OFFSET ??_C@_07GOHPBKOH@Monster?$AA@
  00acf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00ad5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad8	89 81 dc 00 00
	00		 mov	 DWORD PTR [ecx+220], eax

; 180  : 		this->m_MGvsMonster = GetPrivateProfileInt("Monster", "MGvsMonster", 100, File);

  00ade	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00ae1	50		 push	 eax
  00ae2	6a 64		 push	 100			; 00000064H
  00ae4	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BDEOLDFM@MGvsMonster?$AA@
  00ae9	68 00 00 00 00	 push	 OFFSET ??_C@_07GOHPBKOH@Monster?$AA@
  00aee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00af4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00af7	89 81 e0 00 00
	00		 mov	 DWORD PTR [ecx+224], eax

; 181  : 		this->m_DLvsMonster = GetPrivateProfileInt("Monster", "DLvsMonster", 100, File);

  00afd	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00b00	50		 push	 eax
  00b01	6a 64		 push	 100			; 00000064H
  00b03	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KNMGAOIJ@DLvsMonster?$AA@
  00b08	68 00 00 00 00	 push	 OFFSET ??_C@_07GOHPBKOH@Monster?$AA@
  00b0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00b13	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b16	89 81 e4 00 00
	00		 mov	 DWORD PTR [ecx+228], eax

; 182  : 		this->m_RFvsMonster = GetPrivateProfileInt("Monster", "RFvsMonster", 100, File);

  00b1c	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00b1f	50		 push	 eax
  00b20	6a 64		 push	 100			; 00000064H
  00b22	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KMEMBOBB@RFvsMonster?$AA@
  00b27	68 00 00 00 00	 push	 OFFSET ??_C@_07GOHPBKOH@Monster?$AA@
  00b2c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00b32	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b35	89 81 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], eax
$LN6@ReadConfig:

; 183  : 	}
; 184  : 
; 185  : 	if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2))

  00b3b	6a 20		 push	 32			; 00000020H
  00b3d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00b42	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00b47	0f b6 c0	 movzx	 eax, al
  00b4a	85 c0		 test	 eax, eax
  00b4c	75 2a		 jne	 SHORT $LN3@ReadConfig
  00b4e	6a 21		 push	 33			; 00000021H
  00b50	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00b55	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00b5a	0f b6 c0	 movzx	 eax, al
  00b5d	85 c0		 test	 eax, eax
  00b5f	75 17		 jne	 SHORT $LN3@ReadConfig
  00b61	6a 22		 push	 34			; 00000022H
  00b63	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00b68	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00b6d	0f b6 c0	 movzx	 eax, al
  00b70	85 c0		 test	 eax, eax
  00b72	0f 84 1c 01 00
	00		 je	 $LN4@ReadConfig
$LN3@ReadConfig:

; 186  : 	{
; 187  : 		this->m_DKFenrirDamagePercent = GetPrivateProfileInt("Pet", "DKFenrirDamagePercent", 100, File);

  00b78	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00b7b	50		 push	 eax
  00b7c	6a 64		 push	 100			; 00000064H
  00b7e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BDENJGAH@DKFenrirDamagePercent?$AA@
  00b83	68 00 00 00 00	 push	 OFFSET ??_C@_03BAPJJKHI@Pet?$AA@
  00b88	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00b8e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b91	89 81 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], eax

; 188  : 
; 189  : 		this->m_EnableRefflect = GetPrivateProfileInt("Reflect", "EnableReflect", 1, File);

  00b97	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00b9a	50		 push	 eax
  00b9b	6a 01		 push	 1
  00b9d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DIPDMJIJ@EnableReflect?$AA@
  00ba2	68 00 00 00 00	 push	 OFFSET ??_C@_07NLAFAPNO@Reflect?$AA@
  00ba7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00bad	85 c0		 test	 eax, eax
  00baf	0f 95 c1	 setne	 cl
  00bb2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00bb5	88 8a f0 00 00
	00		 mov	 BYTE PTR [edx+240], cl

; 190  : 		this->m_DWRefflectPercent = GetPrivateProfileInt("Reflect", "DWReflectPercent", 100, File);

  00bbb	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00bbe	50		 push	 eax
  00bbf	6a 64		 push	 100			; 00000064H
  00bc1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CHPPJHGP@DWReflectPercent?$AA@
  00bc6	68 00 00 00 00	 push	 OFFSET ??_C@_07NLAFAPNO@Reflect?$AA@
  00bcb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00bd1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bd4	89 81 f4 00 00
	00		 mov	 DWORD PTR [ecx+244], eax

; 191  : 		this->m_DKRefflectPercent = GetPrivateProfileInt("Reflect", "DKReflectPercent", 100, File);

  00bda	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00bdd	50		 push	 eax
  00bde	6a 64		 push	 100			; 00000064H
  00be0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GGPKHKDJ@DKReflectPercent?$AA@
  00be5	68 00 00 00 00	 push	 OFFSET ??_C@_07NLAFAPNO@Reflect?$AA@
  00bea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00bf0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bf3	89 81 f8 00 00
	00		 mov	 DWORD PTR [ecx+248], eax

; 192  : 		this->m_FERefflectPercent = GetPrivateProfileInt("Reflect", "FEReflectPercent", 100, File);

  00bf9	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00bfc	50		 push	 eax
  00bfd	6a 64		 push	 100			; 00000064H
  00bff	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JCEEBMFF@FEReflectPercent?$AA@
  00c04	68 00 00 00 00	 push	 OFFSET ??_C@_07NLAFAPNO@Reflect?$AA@
  00c09	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00c0f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c12	89 81 fc 00 00
	00		 mov	 DWORD PTR [ecx+252], eax

; 193  : 		this->m_MGRefflectPercent = GetPrivateProfileInt("Reflect", "MGReflectPercent", 100, File);

  00c18	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00c1b	50		 push	 eax
  00c1c	6a 64		 push	 100			; 00000064H
  00c1e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KAGOCNCM@MGReflectPercent?$AA@
  00c23	68 00 00 00 00	 push	 OFFSET ??_C@_07NLAFAPNO@Reflect?$AA@
  00c28	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00c2e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c31	89 81 00 01 00
	00		 mov	 DWORD PTR [ecx+256], eax

; 194  : 		this->m_DLRefflectPercent = GetPrivateProfileInt("Reflect", "DLReflectPercent", 100, File);

  00c37	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00c3a	50		 push	 eax
  00c3b	6a 64		 push	 100			; 00000064H
  00c3d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JLADICEM@DLReflectPercent?$AA@
  00c42	68 00 00 00 00	 push	 OFFSET ??_C@_07NLAFAPNO@Reflect?$AA@
  00c47	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00c4d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c50	89 81 04 01 00
	00		 mov	 DWORD PTR [ecx+260], eax

; 195  : 		this->m_SURefflectPercent = GetPrivateProfileInt("Reflect", "SUReflectPercent", 100, File);

  00c56	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00c59	50		 push	 eax
  00c5a	6a 64		 push	 100			; 00000064H
  00c5c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JHJMFHDK@SUReflectPercent?$AA@
  00c61	68 00 00 00 00	 push	 OFFSET ??_C@_07NLAFAPNO@Reflect?$AA@
  00c66	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00c6c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c6f	89 81 08 01 00
	00		 mov	 DWORD PTR [ecx+264], eax

; 196  : 		this->m_RFRefflectPercent = GetPrivateProfileInt("Reflect", "RFReflectPercent", 100, File);

  00c75	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00c78	50		 push	 eax
  00c79	6a 64		 push	 100			; 00000064H
  00c7b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NPNFBGBF@RFReflectPercent?$AA@
  00c80	68 00 00 00 00	 push	 OFFSET ??_C@_07NLAFAPNO@Reflect?$AA@
  00c85	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00c8b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c8e	89 81 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], eax
$LN4@ReadConfig:

; 197  : 	}
; 198  : 
; 199  : 	if(g_ExLicense.CheckUser(eExUB::ulasevich) || g_ExLicense.CheckUser(eExUB::ulasevich2))

  00c94	6a 17		 push	 23			; 00000017H
  00c96	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00c9b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00ca0	0f b6 c0	 movzx	 eax, al
  00ca3	85 c0		 test	 eax, eax
  00ca5	75 13		 jne	 SHORT $LN1@ReadConfig
  00ca7	6a 24		 push	 36			; 00000024H
  00ca9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00cae	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00cb3	0f b6 c0	 movzx	 eax, al
  00cb6	85 c0		 test	 eax, eax
  00cb8	74 26		 je	 SHORT $LN7@ReadConfig
$LN1@ReadConfig:

; 200  : 	{
; 201  : 		this->m_vResetDamage.clear();

  00cba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cbd	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  00cc3	e8 00 00 00 00	 call	 ?clear@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::clear

; 202  : 		this->ReadResetDamage(gDirPath.GetNewPath("ExData\\BalanceDamage.dat"));

  00cc8	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EFMMBLFP@ExData?2BalanceDamage?4dat?$AA@
  00ccd	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00cd2	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00cd7	50		 push	 eax
  00cd8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cdb	e8 00 00 00 00	 call	 ?ReadResetDamage@cBalanceSystem@@QAEXPAD@Z ; cBalanceSystem::ReadResetDamage
$LN7@ReadConfig:

; 203  : 	}
; 204  : 
; 205  : }

  00ce0	5f		 pop	 edi
  00ce1	5e		 pop	 esi
  00ce2	5b		 pop	 ebx
  00ce3	8b e5		 mov	 esp, ebp
  00ce5	5d		 pop	 ebp
  00ce6	c2 04 00	 ret	 4
?ReadConfigs@cBalanceSystem@@QAEXPAD@Z ENDP		; cBalanceSystem::ReadConfigs
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	?push_back@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXABUBALANS_RESET_DAMAGE@@@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::push_back
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	_strcmp:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@
CONST	SEGMENT
??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@ DB '['
	DB	'Ancent Drop] %s file not found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_List$227904 = -48					; size = 32
_iType$227891 = -16					; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?ReadResetDamage@cBalanceSystem@@QAEXPAD@Z PROC		; cBalanceSystem::ReadResetDamage
; _this$ = ecx

; 208  : {

  00cf0	55		 push	 ebp
  00cf1	8b ec		 mov	 ebp, esp
  00cf3	83 ec 70	 sub	 esp, 112		; 00000070H
  00cf6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00cfb	33 c5		 xor	 eax, ebp
  00cfd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00d00	53		 push	 ebx
  00d01	56		 push	 esi
  00d02	57		 push	 edi
  00d03	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 209  : 	SMDToken Token;
; 210  : 
; 211  : 	SMDFile = fopen(filename, "r");

  00d06	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00d0b	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00d0e	50		 push	 eax
  00d0f	e8 00 00 00 00	 call	 _fopen
  00d14	83 c4 08	 add	 esp, 8
  00d17	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 212  : 
; 213  : 	if(!SMDFile)

  00d1c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00d23	75 16		 jne	 SHORT $LN12@ReadResetD

; 214  : 	{
; 215  : 		MsgBox("[Ancent Drop] %s file not found", filename);

  00d25	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00d28	50		 push	 eax
  00d29	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@
  00d2e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00d33	83 c4 08	 add	 esp, 8

; 216  : 		return;

  00d36	e9 9f 01 00 00	 jmp	 $LN13@ReadResetD
$LN12@ReadResetD:

; 217  : 	}
; 218  : 
; 219  : 	while(true)

  00d3b	b8 01 00 00 00	 mov	 eax, 1
  00d40	85 c0		 test	 eax, eax
  00d42	0f 84 72 01 00
	00		 je	 $LN10@ReadResetD

; 220  : 	{
; 221  : 		Token = GetToken();

  00d48	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00d4d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 222  : 
; 223  : 		if( Token == END )

  00d50	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00d54	75 05		 jne	 SHORT $LN9@ReadResetD

; 224  : 		{
; 225  : 			break;

  00d56	e9 5f 01 00 00	 jmp	 $LN10@ReadResetD
$LN9@ReadResetD:

; 226  : 		}
; 227  : 
; 228  : 		int iType = (int)TokenNumber;

  00d5b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00d61	e8 00 00 00 00	 call	 __ftol2_sse
  00d66	89 45 f0	 mov	 DWORD PTR _iType$227891[ebp], eax

; 229  : 
; 230  : 		if(iType != 0 && iType != 1)

  00d69	83 7d f0 00	 cmp	 DWORD PTR _iType$227891[ebp], 0
  00d6d	74 0b		 je	 SHORT $LN8@ReadResetD
  00d6f	83 7d f0 01	 cmp	 DWORD PTR _iType$227891[ebp], 1
  00d73	74 05		 je	 SHORT $LN8@ReadResetD

; 231  : 		{
; 232  : 			break;

  00d75	e9 40 01 00 00	 jmp	 $LN10@ReadResetD
$LN8@ReadResetD:

; 233  : 		}
; 234  : 
; 235  : 		while(true)

  00d7a	b8 01 00 00 00	 mov	 eax, 1
  00d7f	85 c0		 test	 eax, eax
  00d81	0f 84 2e 01 00
	00		 je	 $LN6@ReadResetD

; 236  : 		{
; 237  : 			if(iType == 0)

  00d87	83 7d f0 00	 cmp	 DWORD PTR _iType$227891[ebp], 0
  00d8b	75 3c		 jne	 SHORT $LN5@ReadResetD

; 238  : 			{
; 239  : 				Token = GetToken();

  00d8d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00d92	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 240  : 
; 241  : 				if(!strcmp("end", TokenString))

  00d95	68 00 00 00 00	 push	 OFFSET _TokenString
  00d9a	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00d9f	e8 00 00 00 00	 call	 _strcmp
  00da4	83 c4 08	 add	 esp, 8
  00da7	85 c0		 test	 eax, eax
  00da9	75 05		 jne	 SHORT $LN4@ReadResetD

; 242  : 				{
; 243  : 					break;

  00dab	e9 05 01 00 00	 jmp	 $LN6@ReadResetD
$LN4@ReadResetD:

; 244  : 				}
; 245  : 
; 246  : 				this->m_EnableDamagePercent = (int)TokenNumber;

  00db0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00db6	e8 00 00 00 00	 call	 __ftol2_sse
  00dbb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00dbe	89 81 10 01 00
	00		 mov	 DWORD PTR [ecx+272], eax
  00dc4	e9 e7 00 00 00	 jmp	 $LN2@ReadResetD
$LN5@ReadResetD:

; 247  : 			}
; 248  : 			else if(iType == 1)

  00dc9	83 7d f0 01	 cmp	 DWORD PTR _iType$227891[ebp], 1
  00dcd	0f 85 dd 00 00
	00		 jne	 $LN2@ReadResetD

; 249  : 			{
; 250  : 				Token = GetToken();

  00dd3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00dd8	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 251  : 
; 252  : 				if(!strcmp("end", TokenString))

  00ddb	68 00 00 00 00	 push	 OFFSET _TokenString
  00de0	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00de5	e8 00 00 00 00	 call	 _strcmp
  00dea	83 c4 08	 add	 esp, 8
  00ded	85 c0		 test	 eax, eax
  00def	75 05		 jne	 SHORT $LN1@ReadResetD

; 253  : 				{
; 254  : 					break;

  00df1	e9 bf 00 00 00	 jmp	 $LN6@ReadResetD
$LN1@ReadResetD:

; 255  : 				}
; 256  : 
; 257  : 				BALANS_RESET_DAMAGE List;
; 258  : 
; 259  : 				List.ResetNumber = (int)TokenNumber;

  00df6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00dfc	e8 00 00 00 00	 call	 __ftol2_sse
  00e01	89 45 d0	 mov	 DWORD PTR _List$227904[ebp], eax

; 260  : 
; 261  : 				Token = GetToken();

  00e04	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00e09	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 262  : 				List.DWDamagePercent = (int)TokenNumber;

  00e0c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00e12	e8 00 00 00 00	 call	 __ftol2_sse
  00e17	89 45 d4	 mov	 DWORD PTR _List$227904[ebp+4], eax

; 263  : 
; 264  : 				Token = GetToken();

  00e1a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00e1f	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 265  : 				List.DKDamagePercent = (int)TokenNumber;

  00e22	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00e28	e8 00 00 00 00	 call	 __ftol2_sse
  00e2d	89 45 d8	 mov	 DWORD PTR _List$227904[ebp+8], eax

; 266  : 
; 267  : 				Token = GetToken();

  00e30	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00e35	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 268  : 				List.FEDamagePercent = (int)TokenNumber;

  00e38	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00e3e	e8 00 00 00 00	 call	 __ftol2_sse
  00e43	89 45 dc	 mov	 DWORD PTR _List$227904[ebp+12], eax

; 269  : 
; 270  : 				Token = GetToken();

  00e46	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00e4b	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 271  : 				List.MGDamagePercent = (int)TokenNumber;

  00e4e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00e54	e8 00 00 00 00	 call	 __ftol2_sse
  00e59	89 45 e0	 mov	 DWORD PTR _List$227904[ebp+16], eax

; 272  : 
; 273  : 				Token = GetToken();

  00e5c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00e61	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 274  : 				List.DLDamagePercent = (int)TokenNumber;

  00e64	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00e6a	e8 00 00 00 00	 call	 __ftol2_sse
  00e6f	89 45 e4	 mov	 DWORD PTR _List$227904[ebp+20], eax

; 275  : 
; 276  : 				Token = GetToken();

  00e72	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00e77	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 277  : 				List.SUDamagePercent = (int)TokenNumber;

  00e7a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00e80	e8 00 00 00 00	 call	 __ftol2_sse
  00e85	89 45 e8	 mov	 DWORD PTR _List$227904[ebp+24], eax

; 278  : 
; 279  : 				Token = GetToken();

  00e88	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00e8d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 280  : 				List.RFDamagePercent = (int)TokenNumber;

  00e90	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00e96	e8 00 00 00 00	 call	 __ftol2_sse
  00e9b	89 45 ec	 mov	 DWORD PTR _List$227904[ebp+28], eax

; 281  : 
; 282  : 				this->m_vResetDamage.push_back(List);

  00e9e	8d 45 d0	 lea	 eax, DWORD PTR _List$227904[ebp]
  00ea1	50		 push	 eax
  00ea2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ea5	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  00eab	e8 00 00 00 00	 call	 ?push_back@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXABUBALANS_RESET_DAMAGE@@@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::push_back
$LN2@ReadResetD:

; 283  : 			}
; 284  : 		}

  00eb0	e9 c5 fe ff ff	 jmp	 $LN8@ReadResetD
$LN6@ReadResetD:

; 285  : 	}

  00eb5	e9 81 fe ff ff	 jmp	 $LN12@ReadResetD
$LN10@ReadResetD:

; 286  : 
; 287  : 	fclose(SMDFile);

  00eba	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00ebf	50		 push	 eax
  00ec0	e8 00 00 00 00	 call	 _fclose
  00ec5	83 c4 04	 add	 esp, 4

; 288  : 	LogAdd("%s file load!", filename);

  00ec8	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00ecb	50		 push	 eax
  00ecc	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00ed1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00ed7	83 c4 08	 add	 esp, 8
$LN13@ReadResetD:

; 289  : }

  00eda	5f		 pop	 edi
  00edb	5e		 pop	 esi
  00edc	5b		 pop	 ebx
  00edd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ee0	33 cd		 xor	 ecx, ebp
  00ee2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ee7	8b e5		 mov	 esp, ebp
  00ee9	5d		 pop	 ebp
  00eea	c2 04 00	 ret	 4
?ReadResetDamage@cBalanceSystem@@QAEXPAD@Z ENDP		; cBalanceSystem::ReadResetDamage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00ef0	55		 push	 ebp
  00ef1	8b ec		 mov	 ebp, esp
  00ef3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00ef9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00efe	33 c5		 xor	 eax, ebp
  00f00	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00f03	53		 push	 ebx
  00f04	56		 push	 esi
  00f05	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00f06	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00f0d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f12	50		 push	 eax
  00f13	e8 00 00 00 00	 call	 _fgetc
  00f18	83 c4 04	 add	 esp, 4
  00f1b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00f1e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00f22	83 f9 ff	 cmp	 ecx, -1
  00f25	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00f27	b8 02 00 00 00	 mov	 eax, 2
  00f2c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00f31	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00f33	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f37	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00f3a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  00f3c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f41	50		 push	 eax
  00f42	e8 00 00 00 00	 call	 _fgetc
  00f47	83 c4 04	 add	 esp, 4
  00f4a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00f4d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00f51	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00f54	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00f56	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f5a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00f5d	74 1c		 je	 SHORT $LN23@GetToken
  00f5f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f63	83 f8 ff	 cmp	 eax, -1
  00f66	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00f68	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f6d	50		 push	 eax
  00f6e	e8 00 00 00 00	 call	 _fgetc
  00f73	83 c4 04	 add	 esp, 4
  00f76	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00f79	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  00f7b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f7f	83 f8 ff	 cmp	 eax, -1
  00f82	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00f84	b8 02 00 00 00	 mov	 eax, 2
  00f89	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  00f8e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f92	50		 push	 eax
  00f93	e8 00 00 00 00	 call	 _isspace
  00f98	83 c4 04	 add	 esp, 4
  00f9b	85 c0		 test	 eax, eax
  00f9d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00fa3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00fa7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00fad	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00fb3	83 e9 22	 sub	 ecx, 34			; 00000022H
  00fb6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  00fbc	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00fc3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00fc9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  00fcf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00fd6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  00fdd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00fe7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00fec	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00ff1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00ff6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  01000	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01005	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0100a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0100f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  01019	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0101e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  01023	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  01028	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  01032	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01037	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0103c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  01041	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0104b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01050	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  01055	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0105a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0105f	50		 push	 eax
  01060	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01064	51		 push	 ecx
  01065	e8 00 00 00 00	 call	 _ungetc
  0106a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0106d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  01070	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  01073	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  01078	50		 push	 eax
  01079	e8 00 00 00 00	 call	 _getc
  0107e	83 c4 04	 add	 esp, 4
  01081	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  01084	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01088	83 f9 ff	 cmp	 ecx, -1
  0108b	74 36		 je	 SHORT $LN12@GetToken
  0108d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01091	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  01094	74 1a		 je	 SHORT $LN11@GetToken
  01096	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0109a	50		 push	 eax
  0109b	e8 00 00 00 00	 call	 _isdigit
  010a0	83 c4 04	 add	 esp, 4
  010a3	85 c0		 test	 eax, eax
  010a5	75 09		 jne	 SHORT $LN11@GetToken
  010a7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  010ab	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  010ae	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  010b0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010b3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  010b6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  010b8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010bb	83 c0 01	 add	 eax, 1
  010be	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  010c1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  010c3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010c6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  010c9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  010cc	50		 push	 eax
  010cd	e8 00 00 00 00	 call	 _atof
  010d2	83 c4 04	 add	 esp, 4
  010d5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  010db	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  010e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  010ea	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  010ef	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  010f4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  010fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  01100	50		 push	 eax
  01101	e8 00 00 00 00	 call	 _getc
  01106	83 c4 04	 add	 esp, 4
  01109	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0110c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01110	83 f9 ff	 cmp	 ecx, -1
  01113	74 1c		 je	 SHORT $LN8@GetToken
  01115	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01119	83 f8 22	 cmp	 eax, 34			; 00000022H
  0111c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0111e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01121	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  01124	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  01126	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01129	83 c0 01	 add	 eax, 1
  0112c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0112f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  01131	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01135	83 f8 22	 cmp	 eax, 34			; 00000022H
  01138	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0113a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0113f	50		 push	 eax
  01140	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01144	51		 push	 ecx
  01145	e8 00 00 00 00	 call	 _ungetc
  0114a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0114d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01150	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  01153	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0115d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01162	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  01167	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0116c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01170	50		 push	 eax
  01171	e8 00 00 00 00	 call	 _isalpha
  01176	83 c4 04	 add	 esp, 4
  01179	85 c0		 test	 eax, eax
  0117b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  01181	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  01188	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0118b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0118e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  01190	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01193	83 c0 01	 add	 eax, 1
  01196	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  01199	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0119e	50		 push	 eax
  0119f	e8 00 00 00 00	 call	 _getc
  011a4	83 c4 04	 add	 esp, 4
  011a7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  011aa	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  011ae	83 f9 ff	 cmp	 ecx, -1
  011b1	74 36		 je	 SHORT $LN3@GetToken
  011b3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011b7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  011ba	74 1a		 je	 SHORT $LN2@GetToken
  011bc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011c0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  011c3	74 11		 je	 SHORT $LN2@GetToken
  011c5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011c9	50		 push	 eax
  011ca	e8 00 00 00 00	 call	 _isalnum
  011cf	83 c4 04	 add	 esp, 4
  011d2	85 c0		 test	 eax, eax
  011d4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  011d6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011d9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  011dc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  011de	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011e1	83 c0 01	 add	 eax, 1
  011e4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  011e7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  011e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  011ee	50		 push	 eax
  011ef	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  011f3	51		 push	 ecx
  011f4	e8 00 00 00 00	 call	 _ungetc
  011f9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  011fc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011ff	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  01202	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0120c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01211	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  01213	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  01215	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0121f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01224	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  01226	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  01228	5f		 pop	 edi
  01229	5e		 pop	 esi
  0122a	5b		 pop	 ebx
  0122b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0122e	33 cd		 xor	 ecx, ebp
  01230	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01235	8b e5		 mov	 esp, ebp
  01237	5d		 pop	 ebp
  01238	c3		 ret	 0
  01239	8d 49 00	 npad	 3
$LN35@GetToken:
  0123c	00 00 00 00	 DD	 $LN10@GetToken
  01240	00 00 00 00	 DD	 $LN19@GetToken
  01244	00 00 00 00	 DD	 $LN17@GetToken
  01248	00 00 00 00	 DD	 $LN14@GetToken
  0124c	00 00 00 00	 DD	 $LN18@GetToken
  01250	00 00 00 00	 DD	 $LN16@GetToken
  01254	00 00 00 00	 DD	 $LN15@GetToken
  01258	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0125c	00		 DB	 0
  0125d	01		 DB	 1
  0125e	07		 DB	 7
  0125f	07		 DB	 7
  01260	07		 DB	 7
  01261	07		 DB	 7
  01262	07		 DB	 7
  01263	07		 DB	 7
  01264	07		 DB	 7
  01265	07		 DB	 7
  01266	02		 DB	 2
  01267	03		 DB	 3
  01268	03		 DB	 3
  01269	07		 DB	 7
  0126a	03		 DB	 3
  0126b	03		 DB	 3
  0126c	03		 DB	 3
  0126d	03		 DB	 3
  0126e	03		 DB	 3
  0126f	03		 DB	 3
  01270	03		 DB	 3
  01271	03		 DB	 3
  01272	03		 DB	 3
  01273	03		 DB	 3
  01274	07		 DB	 7
  01275	04		 DB	 4
  01276	07		 DB	 7
  01277	07		 DB	 7
  01278	07		 DB	 7
  01279	07		 DB	 7
  0127a	07		 DB	 7
  0127b	07		 DB	 7
  0127c	07		 DB	 7
  0127d	07		 DB	 7
  0127e	07		 DB	 7
  0127f	07		 DB	 7
  01280	07		 DB	 7
  01281	07		 DB	 7
  01282	07		 DB	 7
  01283	07		 DB	 7
  01284	07		 DB	 7
  01285	07		 DB	 7
  01286	07		 DB	 7
  01287	07		 DB	 7
  01288	07		 DB	 7
  01289	07		 DB	 7
  0128a	07		 DB	 7
  0128b	07		 DB	 7
  0128c	07		 DB	 7
  0128d	07		 DB	 7
  0128e	07		 DB	 7
  0128f	07		 DB	 7
  01290	07		 DB	 7
  01291	07		 DB	 7
  01292	07		 DB	 7
  01293	07		 DB	 7
  01294	07		 DB	 7
  01295	07		 DB	 7
  01296	07		 DB	 7
  01297	07		 DB	 7
  01298	07		 DB	 7
  01299	07		 DB	 7
  0129a	07		 DB	 7
  0129b	07		 DB	 7
  0129c	07		 DB	 7
  0129d	07		 DB	 7
  0129e	07		 DB	 7
  0129f	07		 DB	 7
  012a0	07		 DB	 7
  012a1	07		 DB	 7
  012a2	07		 DB	 7
  012a3	07		 DB	 7
  012a4	07		 DB	 7
  012a5	07		 DB	 7
  012a6	07		 DB	 7
  012a7	07		 DB	 7
  012a8	07		 DB	 7
  012a9	07		 DB	 7
  012aa	07		 DB	 7
  012ab	07		 DB	 7
  012ac	07		 DB	 7
  012ad	07		 DB	 7
  012ae	07		 DB	 7
  012af	07		 DB	 7
  012b0	07		 DB	 7
  012b1	07		 DB	 7
  012b2	07		 DB	 7
  012b3	07		 DB	 7
  012b4	07		 DB	 7
  012b5	05		 DB	 5
  012b6	07		 DB	 7
  012b7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0BL@PLAFMLPN@?4?2ExData?2BalanceSystem?4ini?$AA@ ; `string'
PUBLIC	?Load@cBalanceSystem@@QAEXXZ			; cBalanceSystem::Load
;	COMDAT ??_C@_0BL@PLAFMLPN@?4?2ExData?2BalanceSystem?4ini?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\balancesystem.cpp
CONST	SEGMENT
??_C@_0BL@PLAFMLPN@?4?2ExData?2BalanceSystem?4ini?$AA@ DB '.\ExData\Balan'
	DB	'ceSystem.ini', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@cBalanceSystem@@QAEXXZ PROC			; cBalanceSystem::Load
; _this$ = ecx

; 292  : {

  012c0	55		 push	 ebp
  012c1	8b ec		 mov	 ebp, esp
  012c3	83 ec 44	 sub	 esp, 68			; 00000044H
  012c6	53		 push	 ebx
  012c7	56		 push	 esi
  012c8	57		 push	 edi
  012c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 293  : 	this->Init();

  012cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012cf	e8 00 00 00 00	 call	 ?Init@cBalanceSystem@@QAEXXZ ; cBalanceSystem::Init

; 294  : 	this->ReadConfigs(gDirPath.GetNewPath(BALANCESYSTEM_DIR));

  012d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PLAFMLPN@?4?2ExData?2BalanceSystem?4ini?$AA@
  012d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  012de	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  012e3	50		 push	 eax
  012e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012e7	e8 00 00 00 00	 call	 ?ReadConfigs@cBalanceSystem@@QAEXPAD@Z ; cBalanceSystem::ReadConfigs

; 295  : }

  012ec	5f		 pop	 edi
  012ed	5e		 pop	 esi
  012ee	5b		 pop	 ebx
  012ef	8b e5		 mov	 esp, ebp
  012f1	5d		 pop	 ebp
  012f2	c3		 ret	 0
?Load@cBalanceSystem@@QAEXXZ ENDP			; cBalanceSystem::Load
_TEXT	ENDS
PUBLIC	??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
PUBLIC	?size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::size
PUBLIC	?Main@cBalanceSystem@@QAEXPAUOBJECTSTRUCT@@0AAH@Z ; cBalanceSystem::Main
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv382 = -76						; size = 4
tv338 = -76						; size = 4
tv278 = -76						; size = 4
tv250 = -76						; size = 4
tv222 = -76						; size = 4
tv194 = -76						; size = 4
tv166 = -76						; size = 4
tv138 = -76						; size = 4
tv78 = -76						; size = 4
_i$228051 = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTarget$ = 12						; size = 4
_AttackDamage$ = 16					; size = 4
?Main@cBalanceSystem@@QAEXPAUOBJECTSTRUCT@@0AAH@Z PROC	; cBalanceSystem::Main
; _this$ = ecx

; 298  : {

  01300	55		 push	 ebp
  01301	8b ec		 mov	 ebp, esp
  01303	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01306	53		 push	 ebx
  01307	56		 push	 esi
  01308	57		 push	 edi
  01309	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 299  : 	if(this->Enable)

  0130c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0130f	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01313	85 c9		 test	 ecx, ecx
  01315	0f 84 a5 07 00
	00		 je	 $LN108@Main

; 300  : 	{
; 301  : 		if(lpObj->Type == OBJ_USER && lpTarget->Type == OBJ_USER)

  0131b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0131e	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01322	83 f9 01	 cmp	 ecx, 1
  01325	0f 85 95 07 00
	00		 jne	 $LN108@Main
  0132b	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  0132e	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01332	83 f9 01	 cmp	 ecx, 1
  01335	0f 85 85 07 00
	00		 jne	 $LN108@Main

; 302  : 		{
; 303  : 			if(lpObj->Class == CLASS_KNIGHT)

  0133b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0133e	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01345	83 f9 01	 cmp	 ecx, 1
  01348	0f 85 e7 00 00
	00		 jne	 $LN106@Main

; 304  : 			{
; 305  : 				switch(lpTarget->Class)

  0134e	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01351	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01358	89 4d b4	 mov	 DWORD PTR tv78[ebp], ecx
  0135b	83 7d b4 06	 cmp	 DWORD PTR tv78[ebp], 6
  0135f	0f 87 cb 00 00
	00		 ja	 $LN104@Main
  01365	8b 55 b4	 mov	 edx, DWORD PTR tv78[ebp]
  01368	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN111@Main[edx*4]
$LN103@Main:

; 306  : 				{
; 307  : 					case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->DKvsDK ) / 100; break;

  0136f	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01372	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01375	8b 00		 mov	 eax, DWORD PTR [eax]
  01377	0f af 41 08	 imul	 eax, DWORD PTR [ecx+8]
  0137b	99		 cdq
  0137c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01381	f7 f9		 idiv	 ecx
  01383	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01386	89 02		 mov	 DWORD PTR [edx], eax
  01388	e9 a3 00 00 00	 jmp	 $LN104@Main
$LN102@Main:

; 308  : 					case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->DKvsDW ) / 100; break;

  0138d	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01390	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01393	8b 00		 mov	 eax, DWORD PTR [eax]
  01395	0f af 41 0c	 imul	 eax, DWORD PTR [ecx+12]
  01399	99		 cdq
  0139a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0139f	f7 f9		 idiv	 ecx
  013a1	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  013a4	89 02		 mov	 DWORD PTR [edx], eax
  013a6	e9 85 00 00 00	 jmp	 $LN104@Main
$LN101@Main:

; 309  : 					case CLASS_ELF:			AttackDamage = ( AttackDamage * this->DKvsELF) / 100; break;

  013ab	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  013ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013b1	8b 00		 mov	 eax, DWORD PTR [eax]
  013b3	0f af 41 10	 imul	 eax, DWORD PTR [ecx+16]
  013b7	99		 cdq
  013b8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  013bd	f7 f9		 idiv	 ecx
  013bf	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  013c2	89 02		 mov	 DWORD PTR [edx], eax
  013c4	eb 6a		 jmp	 SHORT $LN104@Main
$LN100@Main:

; 310  : 					case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->DKvsSUM) / 100; break;

  013c6	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  013c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013cc	8b 00		 mov	 eax, DWORD PTR [eax]
  013ce	0f af 41 14	 imul	 eax, DWORD PTR [ecx+20]
  013d2	99		 cdq
  013d3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  013d8	f7 f9		 idiv	 ecx
  013da	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  013dd	89 02		 mov	 DWORD PTR [edx], eax
  013df	eb 4f		 jmp	 SHORT $LN104@Main
$LN99@Main:

; 311  : 					case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->DKvsMG ) / 100; break;

  013e1	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  013e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013e7	8b 00		 mov	 eax, DWORD PTR [eax]
  013e9	0f af 41 18	 imul	 eax, DWORD PTR [ecx+24]
  013ed	99		 cdq
  013ee	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  013f3	f7 f9		 idiv	 ecx
  013f5	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  013f8	89 02		 mov	 DWORD PTR [edx], eax
  013fa	eb 34		 jmp	 SHORT $LN104@Main
$LN98@Main:

; 312  : 					case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->DKvsDL ) / 100; break;

  013fc	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  013ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01402	8b 00		 mov	 eax, DWORD PTR [eax]
  01404	0f af 41 1c	 imul	 eax, DWORD PTR [ecx+28]
  01408	99		 cdq
  01409	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0140e	f7 f9		 idiv	 ecx
  01410	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01413	89 02		 mov	 DWORD PTR [edx], eax
  01415	eb 19		 jmp	 SHORT $LN104@Main
$LN97@Main:

; 313  : 					case CLASS_MONK:		AttackDamage = ( AttackDamage * this->DKvsRF ) / 100; break;

  01417	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0141a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0141d	8b 00		 mov	 eax, DWORD PTR [eax]
  0141f	0f af 41 20	 imul	 eax, DWORD PTR [ecx+32]
  01423	99		 cdq
  01424	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01429	f7 f9		 idiv	 ecx
  0142b	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0142e	89 02		 mov	 DWORD PTR [edx], eax
$LN104@Main:

; 314  : 				}
; 315  : 			}
; 316  : 			else if(lpObj->Class == CLASS_WIZARD)

  01430	e9 0f 06 00 00	 jmp	 $LN96@Main
$LN106@Main:
  01435	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01438	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0143f	85 c9		 test	 ecx, ecx
  01441	0f 85 e7 00 00
	00		 jne	 $LN95@Main

; 317  : 			{
; 318  : 				switch(lpTarget->Class)

  01447	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  0144a	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01451	89 4d b4	 mov	 DWORD PTR tv138[ebp], ecx
  01454	83 7d b4 06	 cmp	 DWORD PTR tv138[ebp], 6
  01458	0f 87 cb 00 00
	00		 ja	 $LN93@Main
  0145e	8b 55 b4	 mov	 edx, DWORD PTR tv138[ebp]
  01461	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN112@Main[edx*4]
$LN92@Main:

; 319  : 				{
; 320  : 					case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->DWvsDW ) / 100; break;

  01468	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0146b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0146e	8b 00		 mov	 eax, DWORD PTR [eax]
  01470	0f af 41 24	 imul	 eax, DWORD PTR [ecx+36]
  01474	99		 cdq
  01475	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0147a	f7 f9		 idiv	 ecx
  0147c	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0147f	89 02		 mov	 DWORD PTR [edx], eax
  01481	e9 a3 00 00 00	 jmp	 $LN93@Main
$LN91@Main:

; 321  : 					case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->DWvsDK ) / 100; break;

  01486	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01489	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0148c	8b 00		 mov	 eax, DWORD PTR [eax]
  0148e	0f af 41 28	 imul	 eax, DWORD PTR [ecx+40]
  01492	99		 cdq
  01493	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01498	f7 f9		 idiv	 ecx
  0149a	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0149d	89 02		 mov	 DWORD PTR [edx], eax
  0149f	e9 85 00 00 00	 jmp	 $LN93@Main
$LN90@Main:

; 322  : 					case CLASS_ELF:			AttackDamage = ( AttackDamage * this->DWvsELF) / 100; break;

  014a4	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  014a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014aa	8b 00		 mov	 eax, DWORD PTR [eax]
  014ac	0f af 41 2c	 imul	 eax, DWORD PTR [ecx+44]
  014b0	99		 cdq
  014b1	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  014b6	f7 f9		 idiv	 ecx
  014b8	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  014bb	89 02		 mov	 DWORD PTR [edx], eax
  014bd	eb 6a		 jmp	 SHORT $LN93@Main
$LN89@Main:

; 323  : 					case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->DWvsSUM) / 100; break;

  014bf	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  014c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014c5	8b 00		 mov	 eax, DWORD PTR [eax]
  014c7	0f af 41 30	 imul	 eax, DWORD PTR [ecx+48]
  014cb	99		 cdq
  014cc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  014d1	f7 f9		 idiv	 ecx
  014d3	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  014d6	89 02		 mov	 DWORD PTR [edx], eax
  014d8	eb 4f		 jmp	 SHORT $LN93@Main
$LN88@Main:

; 324  : 					case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->DWvsMG ) / 100; break;

  014da	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  014dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014e0	8b 00		 mov	 eax, DWORD PTR [eax]
  014e2	0f af 41 34	 imul	 eax, DWORD PTR [ecx+52]
  014e6	99		 cdq
  014e7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  014ec	f7 f9		 idiv	 ecx
  014ee	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  014f1	89 02		 mov	 DWORD PTR [edx], eax
  014f3	eb 34		 jmp	 SHORT $LN93@Main
$LN87@Main:

; 325  : 					case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->DWvsDL ) / 100; break;

  014f5	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  014f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014fb	8b 00		 mov	 eax, DWORD PTR [eax]
  014fd	0f af 41 38	 imul	 eax, DWORD PTR [ecx+56]
  01501	99		 cdq
  01502	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01507	f7 f9		 idiv	 ecx
  01509	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0150c	89 02		 mov	 DWORD PTR [edx], eax
  0150e	eb 19		 jmp	 SHORT $LN93@Main
$LN86@Main:

; 326  : 					case CLASS_MONK:		AttackDamage = ( AttackDamage * this->DWvsRF ) / 100; break;

  01510	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01513	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01516	8b 00		 mov	 eax, DWORD PTR [eax]
  01518	0f af 41 3c	 imul	 eax, DWORD PTR [ecx+60]
  0151c	99		 cdq
  0151d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01522	f7 f9		 idiv	 ecx
  01524	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01527	89 02		 mov	 DWORD PTR [edx], eax
$LN93@Main:

; 327  : 				}
; 328  : 			}
; 329  : 			else if(lpObj->Class == CLASS_ELF)

  01529	e9 16 05 00 00	 jmp	 $LN96@Main
$LN95@Main:
  0152e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01531	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01538	83 f9 02	 cmp	 ecx, 2
  0153b	0f 85 e7 00 00
	00		 jne	 $LN84@Main

; 330  : 			{
; 331  : 				switch(lpTarget->Class)

  01541	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01544	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0154b	89 4d b4	 mov	 DWORD PTR tv166[ebp], ecx
  0154e	83 7d b4 06	 cmp	 DWORD PTR tv166[ebp], 6
  01552	0f 87 cb 00 00
	00		 ja	 $LN82@Main
  01558	8b 55 b4	 mov	 edx, DWORD PTR tv166[ebp]
  0155b	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN113@Main[edx*4]
$LN81@Main:

; 332  : 				{
; 333  : 					case CLASS_ELF:			AttackDamage = ( AttackDamage * this->ELFvsELF ) / 100; break;

  01562	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01565	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01568	8b 00		 mov	 eax, DWORD PTR [eax]
  0156a	0f af 41 40	 imul	 eax, DWORD PTR [ecx+64]
  0156e	99		 cdq
  0156f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01574	f7 f9		 idiv	 ecx
  01576	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01579	89 02		 mov	 DWORD PTR [edx], eax
  0157b	e9 a3 00 00 00	 jmp	 $LN82@Main
$LN80@Main:

; 334  : 					case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->ELFvsDK ) / 100; break;

  01580	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01583	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01586	8b 00		 mov	 eax, DWORD PTR [eax]
  01588	0f af 41 44	 imul	 eax, DWORD PTR [ecx+68]
  0158c	99		 cdq
  0158d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01592	f7 f9		 idiv	 ecx
  01594	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01597	89 02		 mov	 DWORD PTR [edx], eax
  01599	e9 85 00 00 00	 jmp	 $LN82@Main
$LN79@Main:

; 335  : 					case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->ELFvsDW ) / 100; break;

  0159e	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  015a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015a4	8b 00		 mov	 eax, DWORD PTR [eax]
  015a6	0f af 41 48	 imul	 eax, DWORD PTR [ecx+72]
  015aa	99		 cdq
  015ab	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  015b0	f7 f9		 idiv	 ecx
  015b2	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  015b5	89 02		 mov	 DWORD PTR [edx], eax
  015b7	eb 6a		 jmp	 SHORT $LN82@Main
$LN78@Main:

; 336  : 					case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->ELFvsSUM) / 100; break;

  015b9	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  015bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015bf	8b 00		 mov	 eax, DWORD PTR [eax]
  015c1	0f af 41 4c	 imul	 eax, DWORD PTR [ecx+76]
  015c5	99		 cdq
  015c6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  015cb	f7 f9		 idiv	 ecx
  015cd	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  015d0	89 02		 mov	 DWORD PTR [edx], eax
  015d2	eb 4f		 jmp	 SHORT $LN82@Main
$LN77@Main:

; 337  : 					case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->ELFvsMG ) / 100; break;

  015d4	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  015d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015da	8b 00		 mov	 eax, DWORD PTR [eax]
  015dc	0f af 41 50	 imul	 eax, DWORD PTR [ecx+80]
  015e0	99		 cdq
  015e1	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  015e6	f7 f9		 idiv	 ecx
  015e8	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  015eb	89 02		 mov	 DWORD PTR [edx], eax
  015ed	eb 34		 jmp	 SHORT $LN82@Main
$LN76@Main:

; 338  : 					case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->ELFvsDL ) / 100; break;

  015ef	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  015f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015f5	8b 00		 mov	 eax, DWORD PTR [eax]
  015f7	0f af 41 54	 imul	 eax, DWORD PTR [ecx+84]
  015fb	99		 cdq
  015fc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01601	f7 f9		 idiv	 ecx
  01603	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01606	89 02		 mov	 DWORD PTR [edx], eax
  01608	eb 19		 jmp	 SHORT $LN82@Main
$LN75@Main:

; 339  : 					case CLASS_MONK:		AttackDamage = ( AttackDamage * this->ELFvsRF ) / 100; break;

  0160a	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0160d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01610	8b 00		 mov	 eax, DWORD PTR [eax]
  01612	0f af 41 58	 imul	 eax, DWORD PTR [ecx+88]
  01616	99		 cdq
  01617	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0161c	f7 f9		 idiv	 ecx
  0161e	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01621	89 02		 mov	 DWORD PTR [edx], eax
$LN82@Main:

; 340  : 				}
; 341  : 			}
; 342  : 			else if(lpObj->Class == CLASS_SUMMONER)

  01623	e9 1c 04 00 00	 jmp	 $LN96@Main
$LN84@Main:
  01628	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0162b	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01632	83 f9 05	 cmp	 ecx, 5
  01635	0f 85 e7 00 00
	00		 jne	 $LN73@Main

; 343  : 			{
; 344  : 				switch(lpTarget->Class)

  0163b	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  0163e	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01645	89 4d b4	 mov	 DWORD PTR tv194[ebp], ecx
  01648	83 7d b4 06	 cmp	 DWORD PTR tv194[ebp], 6
  0164c	0f 87 cb 00 00
	00		 ja	 $LN71@Main
  01652	8b 55 b4	 mov	 edx, DWORD PTR tv194[ebp]
  01655	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN114@Main[edx*4]
$LN70@Main:

; 345  : 				{
; 346  : 					case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->SUMvsSUM ) / 100; break;

  0165c	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0165f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01662	8b 00		 mov	 eax, DWORD PTR [eax]
  01664	0f af 41 5c	 imul	 eax, DWORD PTR [ecx+92]
  01668	99		 cdq
  01669	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0166e	f7 f9		 idiv	 ecx
  01670	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01673	89 02		 mov	 DWORD PTR [edx], eax
  01675	e9 a3 00 00 00	 jmp	 $LN71@Main
$LN69@Main:

; 347  : 					case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->SUMvsDK ) / 100; break;

  0167a	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0167d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01680	8b 00		 mov	 eax, DWORD PTR [eax]
  01682	0f af 41 60	 imul	 eax, DWORD PTR [ecx+96]
  01686	99		 cdq
  01687	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0168c	f7 f9		 idiv	 ecx
  0168e	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01691	89 02		 mov	 DWORD PTR [edx], eax
  01693	e9 85 00 00 00	 jmp	 $LN71@Main
$LN68@Main:

; 348  : 					case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->SUMvsDW ) / 100; break;

  01698	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0169b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0169e	8b 00		 mov	 eax, DWORD PTR [eax]
  016a0	0f af 41 64	 imul	 eax, DWORD PTR [ecx+100]
  016a4	99		 cdq
  016a5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  016aa	f7 f9		 idiv	 ecx
  016ac	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  016af	89 02		 mov	 DWORD PTR [edx], eax
  016b1	eb 6a		 jmp	 SHORT $LN71@Main
$LN67@Main:

; 349  : 					case CLASS_ELF:			AttackDamage = ( AttackDamage * this->SUMvsELF) / 100; break;

  016b3	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  016b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016b9	8b 00		 mov	 eax, DWORD PTR [eax]
  016bb	0f af 41 68	 imul	 eax, DWORD PTR [ecx+104]
  016bf	99		 cdq
  016c0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  016c5	f7 f9		 idiv	 ecx
  016c7	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  016ca	89 02		 mov	 DWORD PTR [edx], eax
  016cc	eb 4f		 jmp	 SHORT $LN71@Main
$LN66@Main:

; 350  : 					case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->SUMvsMG ) / 100; break;

  016ce	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  016d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016d4	8b 00		 mov	 eax, DWORD PTR [eax]
  016d6	0f af 41 6c	 imul	 eax, DWORD PTR [ecx+108]
  016da	99		 cdq
  016db	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  016e0	f7 f9		 idiv	 ecx
  016e2	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  016e5	89 02		 mov	 DWORD PTR [edx], eax
  016e7	eb 34		 jmp	 SHORT $LN71@Main
$LN65@Main:

; 351  : 					case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->SUMvsDL ) / 100; break;

  016e9	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  016ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016ef	8b 00		 mov	 eax, DWORD PTR [eax]
  016f1	0f af 41 70	 imul	 eax, DWORD PTR [ecx+112]
  016f5	99		 cdq
  016f6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  016fb	f7 f9		 idiv	 ecx
  016fd	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01700	89 02		 mov	 DWORD PTR [edx], eax
  01702	eb 19		 jmp	 SHORT $LN71@Main
$LN64@Main:

; 352  : 					case CLASS_MONK:		AttackDamage = ( AttackDamage * this->SUMvsRF ) / 100; break;

  01704	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01707	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0170a	8b 00		 mov	 eax, DWORD PTR [eax]
  0170c	0f af 41 74	 imul	 eax, DWORD PTR [ecx+116]
  01710	99		 cdq
  01711	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01716	f7 f9		 idiv	 ecx
  01718	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0171b	89 02		 mov	 DWORD PTR [edx], eax
$LN71@Main:

; 353  : 				}
; 354  : 			}
; 355  : 			else if(lpObj->Class == CLASS_MAGUMSA)

  0171d	e9 22 03 00 00	 jmp	 $LN96@Main
$LN73@Main:
  01722	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01725	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0172c	83 f9 03	 cmp	 ecx, 3
  0172f	0f 85 f6 00 00
	00		 jne	 $LN62@Main

; 356  : 			{
; 357  : 				switch(lpTarget->Class)

  01735	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01738	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0173f	89 4d b4	 mov	 DWORD PTR tv222[ebp], ecx
  01742	83 7d b4 06	 cmp	 DWORD PTR tv222[ebp], 6
  01746	0f 87 da 00 00
	00		 ja	 $LN60@Main
  0174c	8b 55 b4	 mov	 edx, DWORD PTR tv222[ebp]
  0174f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN115@Main[edx*4]
$LN59@Main:

; 358  : 				{
; 359  : 					case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->MGvsMG ) / 100; break;

  01756	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01759	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0175c	8b 00		 mov	 eax, DWORD PTR [eax]
  0175e	0f af 41 78	 imul	 eax, DWORD PTR [ecx+120]
  01762	99		 cdq
  01763	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01768	f7 f9		 idiv	 ecx
  0176a	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0176d	89 02		 mov	 DWORD PTR [edx], eax
  0176f	e9 b2 00 00 00	 jmp	 $LN60@Main
$LN58@Main:

; 360  : 					case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->MGvsDK ) / 100; break;

  01774	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01777	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0177a	8b 00		 mov	 eax, DWORD PTR [eax]
  0177c	0f af 41 7c	 imul	 eax, DWORD PTR [ecx+124]
  01780	99		 cdq
  01781	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01786	f7 f9		 idiv	 ecx
  01788	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0178b	89 02		 mov	 DWORD PTR [edx], eax
  0178d	e9 94 00 00 00	 jmp	 $LN60@Main
$LN57@Main:

; 361  : 					case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->MGvsDW ) / 100; break;

  01792	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01795	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01798	8b 00		 mov	 eax, DWORD PTR [eax]
  0179a	0f af 81 80 00
	00 00		 imul	 eax, DWORD PTR [ecx+128]
  017a1	99		 cdq
  017a2	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  017a7	f7 f9		 idiv	 ecx
  017a9	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  017ac	89 02		 mov	 DWORD PTR [edx], eax
  017ae	eb 76		 jmp	 SHORT $LN60@Main
$LN56@Main:

; 362  : 					case CLASS_ELF:			AttackDamage = ( AttackDamage * this->MGvsELF) / 100; break;

  017b0	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  017b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017b6	8b 00		 mov	 eax, DWORD PTR [eax]
  017b8	0f af 81 84 00
	00 00		 imul	 eax, DWORD PTR [ecx+132]
  017bf	99		 cdq
  017c0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  017c5	f7 f9		 idiv	 ecx
  017c7	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  017ca	89 02		 mov	 DWORD PTR [edx], eax
  017cc	eb 58		 jmp	 SHORT $LN60@Main
$LN55@Main:

; 363  : 					case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->MGvsSUM) / 100; break;

  017ce	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  017d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017d4	8b 00		 mov	 eax, DWORD PTR [eax]
  017d6	0f af 81 88 00
	00 00		 imul	 eax, DWORD PTR [ecx+136]
  017dd	99		 cdq
  017de	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  017e3	f7 f9		 idiv	 ecx
  017e5	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  017e8	89 02		 mov	 DWORD PTR [edx], eax
  017ea	eb 3a		 jmp	 SHORT $LN60@Main
$LN54@Main:

; 364  : 					case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->MGvsDL ) / 100; break;

  017ec	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  017ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017f2	8b 00		 mov	 eax, DWORD PTR [eax]
  017f4	0f af 81 8c 00
	00 00		 imul	 eax, DWORD PTR [ecx+140]
  017fb	99		 cdq
  017fc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01801	f7 f9		 idiv	 ecx
  01803	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01806	89 02		 mov	 DWORD PTR [edx], eax
  01808	eb 1c		 jmp	 SHORT $LN60@Main
$LN53@Main:

; 365  : 					case CLASS_MONK:		AttackDamage = ( AttackDamage * this->MGvsRF ) / 100; break;

  0180a	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0180d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01810	8b 00		 mov	 eax, DWORD PTR [eax]
  01812	0f af 81 90 00
	00 00		 imul	 eax, DWORD PTR [ecx+144]
  01819	99		 cdq
  0181a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0181f	f7 f9		 idiv	 ecx
  01821	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01824	89 02		 mov	 DWORD PTR [edx], eax
$LN60@Main:

; 366  : 				}
; 367  : 			}
; 368  : 			else if(lpObj->Class == CLASS_DARKLORD)

  01826	e9 19 02 00 00	 jmp	 $LN96@Main
$LN62@Main:
  0182b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0182e	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01835	83 f9 04	 cmp	 ecx, 4
  01838	0f 85 fc 00 00
	00		 jne	 $LN51@Main

; 369  : 			{
; 370  : 				switch(lpTarget->Class)

  0183e	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01841	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01848	89 4d b4	 mov	 DWORD PTR tv250[ebp], ecx
  0184b	83 7d b4 06	 cmp	 DWORD PTR tv250[ebp], 6
  0184f	0f 87 e0 00 00
	00		 ja	 $LN49@Main
  01855	8b 55 b4	 mov	 edx, DWORD PTR tv250[ebp]
  01858	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN116@Main[edx*4]
$LN48@Main:

; 371  : 				{
; 372  : 					case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->DLvsDL ) / 100; break;

  0185f	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01862	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01865	8b 00		 mov	 eax, DWORD PTR [eax]
  01867	0f af 81 94 00
	00 00		 imul	 eax, DWORD PTR [ecx+148]
  0186e	99		 cdq
  0186f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01874	f7 f9		 idiv	 ecx
  01876	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01879	89 02		 mov	 DWORD PTR [edx], eax
  0187b	e9 b5 00 00 00	 jmp	 $LN49@Main
$LN47@Main:

; 373  : 					case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->DLvsDK ) / 100; break;

  01880	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01883	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01886	8b 00		 mov	 eax, DWORD PTR [eax]
  01888	0f af 81 98 00
	00 00		 imul	 eax, DWORD PTR [ecx+152]
  0188f	99		 cdq
  01890	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01895	f7 f9		 idiv	 ecx
  01897	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0189a	89 02		 mov	 DWORD PTR [edx], eax
  0189c	e9 94 00 00 00	 jmp	 $LN49@Main
$LN46@Main:

; 374  : 					case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->DLvsDW ) / 100; break;

  018a1	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  018a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018a7	8b 00		 mov	 eax, DWORD PTR [eax]
  018a9	0f af 81 9c 00
	00 00		 imul	 eax, DWORD PTR [ecx+156]
  018b0	99		 cdq
  018b1	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  018b6	f7 f9		 idiv	 ecx
  018b8	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  018bb	89 02		 mov	 DWORD PTR [edx], eax
  018bd	eb 76		 jmp	 SHORT $LN49@Main
$LN45@Main:

; 375  : 					case CLASS_ELF:			AttackDamage = ( AttackDamage * this->DLvsELF) / 100; break;

  018bf	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  018c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018c5	8b 00		 mov	 eax, DWORD PTR [eax]
  018c7	0f af 81 a0 00
	00 00		 imul	 eax, DWORD PTR [ecx+160]
  018ce	99		 cdq
  018cf	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  018d4	f7 f9		 idiv	 ecx
  018d6	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  018d9	89 02		 mov	 DWORD PTR [edx], eax
  018db	eb 58		 jmp	 SHORT $LN49@Main
$LN44@Main:

; 376  : 					case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->DLvsSUM) / 100; break;

  018dd	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  018e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018e3	8b 00		 mov	 eax, DWORD PTR [eax]
  018e5	0f af 81 a4 00
	00 00		 imul	 eax, DWORD PTR [ecx+164]
  018ec	99		 cdq
  018ed	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  018f2	f7 f9		 idiv	 ecx
  018f4	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  018f7	89 02		 mov	 DWORD PTR [edx], eax
  018f9	eb 3a		 jmp	 SHORT $LN49@Main
$LN43@Main:

; 377  : 					case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->DLvsMG ) / 100; break;

  018fb	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  018fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01901	8b 00		 mov	 eax, DWORD PTR [eax]
  01903	0f af 81 a8 00
	00 00		 imul	 eax, DWORD PTR [ecx+168]
  0190a	99		 cdq
  0190b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01910	f7 f9		 idiv	 ecx
  01912	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01915	89 02		 mov	 DWORD PTR [edx], eax
  01917	eb 1c		 jmp	 SHORT $LN49@Main
$LN42@Main:

; 378  : 					case CLASS_MONK:		AttackDamage = ( AttackDamage * this->DLvsRF ) / 100; break;

  01919	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0191c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0191f	8b 00		 mov	 eax, DWORD PTR [eax]
  01921	0f af 81 ac 00
	00 00		 imul	 eax, DWORD PTR [ecx+172]
  01928	99		 cdq
  01929	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0192e	f7 f9		 idiv	 ecx
  01930	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01933	89 02		 mov	 DWORD PTR [edx], eax
$LN49@Main:

; 379  : 				}
; 380  : 			}
; 381  : 			else if(lpObj->Class == CLASS_MONK)

  01935	e9 0a 01 00 00	 jmp	 $LN96@Main
$LN51@Main:
  0193a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0193d	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01944	83 f9 06	 cmp	 ecx, 6
  01947	0f 85 f7 00 00
	00		 jne	 $LN96@Main

; 382  : 			{
; 383  : 				switch(lpTarget->Class)

  0194d	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01950	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01957	89 4d b4	 mov	 DWORD PTR tv278[ebp], ecx
  0195a	83 7d b4 06	 cmp	 DWORD PTR tv278[ebp], 6
  0195e	0f 87 e0 00 00
	00		 ja	 $LN96@Main
  01964	8b 55 b4	 mov	 edx, DWORD PTR tv278[ebp]
  01967	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN117@Main[edx*4]
$LN37@Main:

; 384  : 				{
; 385  : 					case CLASS_MONK:		AttackDamage = ( AttackDamage * this->RFvsRF ) / 100; break;

  0196e	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01971	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01974	8b 00		 mov	 eax, DWORD PTR [eax]
  01976	0f af 81 b0 00
	00 00		 imul	 eax, DWORD PTR [ecx+176]
  0197d	99		 cdq
  0197e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01983	f7 f9		 idiv	 ecx
  01985	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01988	89 02		 mov	 DWORD PTR [edx], eax
  0198a	e9 b5 00 00 00	 jmp	 $LN96@Main
$LN36@Main:

; 386  : 					case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->RFvsDK ) / 100; break;

  0198f	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01992	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01995	8b 00		 mov	 eax, DWORD PTR [eax]
  01997	0f af 81 b4 00
	00 00		 imul	 eax, DWORD PTR [ecx+180]
  0199e	99		 cdq
  0199f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  019a4	f7 f9		 idiv	 ecx
  019a6	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  019a9	89 02		 mov	 DWORD PTR [edx], eax
  019ab	e9 94 00 00 00	 jmp	 $LN96@Main
$LN35@Main:

; 387  : 					case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->RFvsDW ) / 100; break;

  019b0	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  019b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019b6	8b 00		 mov	 eax, DWORD PTR [eax]
  019b8	0f af 81 b8 00
	00 00		 imul	 eax, DWORD PTR [ecx+184]
  019bf	99		 cdq
  019c0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  019c5	f7 f9		 idiv	 ecx
  019c7	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  019ca	89 02		 mov	 DWORD PTR [edx], eax
  019cc	eb 76		 jmp	 SHORT $LN96@Main
$LN34@Main:

; 388  : 					case CLASS_ELF:			AttackDamage = ( AttackDamage * this->RFvsELF) / 100; break;

  019ce	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  019d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019d4	8b 00		 mov	 eax, DWORD PTR [eax]
  019d6	0f af 81 bc 00
	00 00		 imul	 eax, DWORD PTR [ecx+188]
  019dd	99		 cdq
  019de	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  019e3	f7 f9		 idiv	 ecx
  019e5	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  019e8	89 02		 mov	 DWORD PTR [edx], eax
  019ea	eb 58		 jmp	 SHORT $LN96@Main
$LN33@Main:

; 389  : 					case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->RFvsSUM) / 100; break;

  019ec	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  019ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019f2	8b 00		 mov	 eax, DWORD PTR [eax]
  019f4	0f af 81 c0 00
	00 00		 imul	 eax, DWORD PTR [ecx+192]
  019fb	99		 cdq
  019fc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01a01	f7 f9		 idiv	 ecx
  01a03	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01a06	89 02		 mov	 DWORD PTR [edx], eax
  01a08	eb 3a		 jmp	 SHORT $LN96@Main
$LN32@Main:

; 390  : 					case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->RFvsMG ) / 100; break;

  01a0a	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01a0d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a10	8b 00		 mov	 eax, DWORD PTR [eax]
  01a12	0f af 81 c4 00
	00 00		 imul	 eax, DWORD PTR [ecx+196]
  01a19	99		 cdq
  01a1a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01a1f	f7 f9		 idiv	 ecx
  01a21	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01a24	89 02		 mov	 DWORD PTR [edx], eax
  01a26	eb 1c		 jmp	 SHORT $LN96@Main
$LN31@Main:

; 391  : 					case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->RFvsDL ) / 100; break;

  01a28	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01a2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a2e	8b 00		 mov	 eax, DWORD PTR [eax]
  01a30	0f af 81 c8 00
	00 00		 imul	 eax, DWORD PTR [ecx+200]
  01a37	99		 cdq
  01a38	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01a3d	f7 f9		 idiv	 ecx
  01a3f	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01a42	89 02		 mov	 DWORD PTR [edx], eax
$LN96@Main:

; 392  : 				}
; 393  : 			}
; 394  : 
; 395  : 			if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2))

  01a44	6a 20		 push	 32			; 00000020H
  01a46	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01a4b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01a50	0f b6 c0	 movzx	 eax, al
  01a53	85 c0		 test	 eax, eax
  01a55	75 26		 jne	 SHORT $LN29@Main
  01a57	6a 21		 push	 33			; 00000021H
  01a59	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01a5e	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01a63	0f b6 c0	 movzx	 eax, al
  01a66	85 c0		 test	 eax, eax
  01a68	75 13		 jne	 SHORT $LN29@Main
  01a6a	6a 22		 push	 34			; 00000022H
  01a6c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01a71	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01a76	0f b6 c0	 movzx	 eax, al
  01a79	85 c0		 test	 eax, eax
  01a7b	74 43		 je	 SHORT $LN108@Main
$LN29@Main:

; 396  : 			{
; 397  : 				if(lpObj->Class == CLASS_KNIGHT)

  01a7d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a80	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01a87	83 f9 01	 cmp	 ecx, 1
  01a8a	75 34		 jne	 SHORT $LN108@Main

; 398  : 				{
; 399  : 					if(lpObj->pInventory[8].m_Type == ITEMGET(13,37))

  01a8c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a8f	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  01a95	0f bf 91 a6 06
	00 00		 movsx	 edx, WORD PTR [ecx+1702]
  01a9c	81 fa 25 1a 00
	00		 cmp	 edx, 6693		; 00001a25H
  01aa2	75 1c		 jne	 SHORT $LN108@Main

; 400  : 					{
; 401  : 						AttackDamage = ( AttackDamage * this->m_DKFenrirDamagePercent ) / 100;

  01aa4	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01aa7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01aaa	8b 00		 mov	 eax, DWORD PTR [eax]
  01aac	0f af 81 ec 00
	00 00		 imul	 eax, DWORD PTR [ecx+236]
  01ab3	99		 cdq
  01ab4	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01ab9	f7 f9		 idiv	 ecx
  01abb	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01abe	89 02		 mov	 DWORD PTR [edx], eax
$LN108@Main:

; 402  : 					}
; 403  : 				}
; 404  : 			}
; 405  : 		}
; 406  : 	}
; 407  : 
; 408  : 	if(this->m_EnableMonster)

  01ac0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01ac3	0f b6 88 cc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+204]
  01aca	85 c9		 test	 ecx, ecx
  01acc	0f 84 17 01 00
	00		 je	 $LN26@Main

; 409  : 	{
; 410  : 		if(lpObj->Type == OBJ_USER && lpTarget->Type == OBJ_MONSTER)

  01ad2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ad5	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01ad9	83 f9 01	 cmp	 ecx, 1
  01adc	0f 85 07 01 00
	00		 jne	 $LN26@Main
  01ae2	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01ae5	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01ae9	83 f9 02	 cmp	 ecx, 2
  01aec	0f 85 f7 00 00
	00		 jne	 $LN26@Main

; 411  : 		{
; 412  : 			switch(lpObj->Class)

  01af2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01af5	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01afc	89 4d b4	 mov	 DWORD PTR tv338[ebp], ecx
  01aff	83 7d b4 06	 cmp	 DWORD PTR tv338[ebp], 6
  01b03	0f 87 e0 00 00
	00		 ja	 $LN26@Main
  01b09	8b 55 b4	 mov	 edx, DWORD PTR tv338[ebp]
  01b0c	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN118@Main[edx*4]
$LN22@Main:

; 413  : 			{
; 414  : 				case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->m_DKvsMonster ) / 100; break;

  01b13	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01b16	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b19	8b 00		 mov	 eax, DWORD PTR [eax]
  01b1b	0f af 81 d0 00
	00 00		 imul	 eax, DWORD PTR [ecx+208]
  01b22	99		 cdq
  01b23	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01b28	f7 f9		 idiv	 ecx
  01b2a	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01b2d	89 02		 mov	 DWORD PTR [edx], eax
  01b2f	e9 b5 00 00 00	 jmp	 $LN26@Main
$LN21@Main:

; 415  : 				case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->m_DWvsMonster ) / 100; break;

  01b34	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01b37	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b3a	8b 00		 mov	 eax, DWORD PTR [eax]
  01b3c	0f af 81 d4 00
	00 00		 imul	 eax, DWORD PTR [ecx+212]
  01b43	99		 cdq
  01b44	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01b49	f7 f9		 idiv	 ecx
  01b4b	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01b4e	89 02		 mov	 DWORD PTR [edx], eax
  01b50	e9 94 00 00 00	 jmp	 $LN26@Main
$LN20@Main:

; 416  : 				case CLASS_ELF:			AttackDamage = ( AttackDamage * this->m_ELFvsMonster) / 100; break;

  01b55	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01b58	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b5b	8b 00		 mov	 eax, DWORD PTR [eax]
  01b5d	0f af 81 d8 00
	00 00		 imul	 eax, DWORD PTR [ecx+216]
  01b64	99		 cdq
  01b65	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01b6a	f7 f9		 idiv	 ecx
  01b6c	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01b6f	89 02		 mov	 DWORD PTR [edx], eax
  01b71	eb 76		 jmp	 SHORT $LN26@Main
$LN19@Main:

; 417  : 				case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->m_SUMvsMonster) / 100; break;

  01b73	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01b76	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b79	8b 00		 mov	 eax, DWORD PTR [eax]
  01b7b	0f af 81 dc 00
	00 00		 imul	 eax, DWORD PTR [ecx+220]
  01b82	99		 cdq
  01b83	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01b88	f7 f9		 idiv	 ecx
  01b8a	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01b8d	89 02		 mov	 DWORD PTR [edx], eax
  01b8f	eb 58		 jmp	 SHORT $LN26@Main
$LN18@Main:

; 418  : 				case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->m_MGvsMonster ) / 100; break;

  01b91	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01b94	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b97	8b 00		 mov	 eax, DWORD PTR [eax]
  01b99	0f af 81 e0 00
	00 00		 imul	 eax, DWORD PTR [ecx+224]
  01ba0	99		 cdq
  01ba1	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01ba6	f7 f9		 idiv	 ecx
  01ba8	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01bab	89 02		 mov	 DWORD PTR [edx], eax
  01bad	eb 3a		 jmp	 SHORT $LN26@Main
$LN17@Main:

; 419  : 				case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->m_DLvsMonster ) / 100; break;

  01baf	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01bb2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bb5	8b 00		 mov	 eax, DWORD PTR [eax]
  01bb7	0f af 81 e4 00
	00 00		 imul	 eax, DWORD PTR [ecx+228]
  01bbe	99		 cdq
  01bbf	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01bc4	f7 f9		 idiv	 ecx
  01bc6	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01bc9	89 02		 mov	 DWORD PTR [edx], eax
  01bcb	eb 1c		 jmp	 SHORT $LN26@Main
$LN16@Main:

; 420  : 				case CLASS_MONK:		AttackDamage = ( AttackDamage * this->m_RFvsMonster ) / 100; break;

  01bcd	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01bd0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bd3	8b 00		 mov	 eax, DWORD PTR [eax]
  01bd5	0f af 81 e8 00
	00 00		 imul	 eax, DWORD PTR [ecx+232]
  01bdc	99		 cdq
  01bdd	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01be2	f7 f9		 idiv	 ecx
  01be4	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01be7	89 02		 mov	 DWORD PTR [edx], eax
$LN26@Main:

; 421  : 			}
; 422  : 		}
; 423  : 	}
; 424  : 
; 425  : 	if(this->m_EnableDamagePercent)

  01be9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01bec	83 b8 10 01 00
	00 00		 cmp	 DWORD PTR [eax+272], 0
  01bf3	0f 84 d0 01 00
	00		 je	 $LN109@Main

; 426  : 	{
; 427  : 		if(lpObj->Type == OBJ_USER && lpTarget->Type == OBJ_MONSTER)

  01bf9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01bfc	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01c00	83 f9 01	 cmp	 ecx, 1
  01c03	0f 85 c0 01 00
	00		 jne	 $LN109@Main
  01c09	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  01c0c	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01c10	83 f9 02	 cmp	 ecx, 2
  01c13	0f 85 b0 01 00
	00		 jne	 $LN109@Main

; 428  : 		{
; 429  : 			for(int i = 0; i < this->m_vResetDamage.size(); i++)

  01c19	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$228051[ebp], 0
  01c20	eb 09		 jmp	 SHORT $LN13@Main
$LN12@Main:
  01c22	8b 45 f8	 mov	 eax, DWORD PTR _i$228051[ebp]
  01c25	83 c0 01	 add	 eax, 1
  01c28	89 45 f8	 mov	 DWORD PTR _i$228051[ebp], eax
$LN13@Main:
  01c2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c2e	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  01c34	e8 00 00 00 00	 call	 ?size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::size
  01c39	39 45 f8	 cmp	 DWORD PTR _i$228051[ebp], eax
  01c3c	0f 83 87 01 00
	00		 jae	 $LN109@Main

; 430  : 			{
; 431  : 				if(lpObj->Reset == this->m_vResetDamage[i].ResetNumber)

  01c42	8b 45 f8	 mov	 eax, DWORD PTR _i$228051[ebp]
  01c45	50		 push	 eax
  01c46	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c49	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  01c4f	e8 00 00 00 00	 call	 ??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
  01c54	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01c57	8b 91 90 22 00
	00		 mov	 edx, DWORD PTR [ecx+8848]
  01c5d	3b 10		 cmp	 edx, DWORD PTR [eax]
  01c5f	0f 85 5f 01 00
	00		 jne	 $LN10@Main

; 432  : 				{
; 433  : 					switch(lpObj->Class)

  01c65	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c68	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01c6f	89 4d b4	 mov	 DWORD PTR tv382[ebp], ecx
  01c72	83 7d b4 06	 cmp	 DWORD PTR tv382[ebp], 6
  01c76	0f 87 48 01 00
	00		 ja	 $LN10@Main
  01c7c	8b 55 b4	 mov	 edx, DWORD PTR tv382[ebp]
  01c7f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN119@Main[edx*4]
$LN7@Main:

; 434  : 					{
; 435  : 						case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->m_vResetDamage[i].DWDamagePercent ) / 100; break;

  01c86	8b 45 f8	 mov	 eax, DWORD PTR _i$228051[ebp]
  01c89	50		 push	 eax
  01c8a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c8d	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  01c93	e8 00 00 00 00	 call	 ??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
  01c98	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01c9b	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c9d	0f af 50 04	 imul	 edx, DWORD PTR [eax+4]
  01ca1	8b c2		 mov	 eax, edx
  01ca3	99		 cdq
  01ca4	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01ca9	f7 f9		 idiv	 ecx
  01cab	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01cae	89 02		 mov	 DWORD PTR [edx], eax
  01cb0	e9 0f 01 00 00	 jmp	 $LN10@Main
$LN6@Main:

; 436  : 						case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->m_vResetDamage[i].DKDamagePercent ) / 100; break;

  01cb5	8b 45 f8	 mov	 eax, DWORD PTR _i$228051[ebp]
  01cb8	50		 push	 eax
  01cb9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01cbc	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  01cc2	e8 00 00 00 00	 call	 ??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
  01cc7	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01cca	8b 11		 mov	 edx, DWORD PTR [ecx]
  01ccc	0f af 50 08	 imul	 edx, DWORD PTR [eax+8]
  01cd0	8b c2		 mov	 eax, edx
  01cd2	99		 cdq
  01cd3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01cd8	f7 f9		 idiv	 ecx
  01cda	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01cdd	89 02		 mov	 DWORD PTR [edx], eax
  01cdf	e9 e0 00 00 00	 jmp	 $LN10@Main
$LN5@Main:

; 437  : 						case CLASS_ELF:			AttackDamage = ( AttackDamage * this->m_vResetDamage[i].FEDamagePercent) / 100; break;

  01ce4	8b 45 f8	 mov	 eax, DWORD PTR _i$228051[ebp]
  01ce7	50		 push	 eax
  01ce8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ceb	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  01cf1	e8 00 00 00 00	 call	 ??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
  01cf6	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01cf9	8b 11		 mov	 edx, DWORD PTR [ecx]
  01cfb	0f af 50 0c	 imul	 edx, DWORD PTR [eax+12]
  01cff	8b c2		 mov	 eax, edx
  01d01	99		 cdq
  01d02	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01d07	f7 f9		 idiv	 ecx
  01d09	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01d0c	89 02		 mov	 DWORD PTR [edx], eax
  01d0e	e9 b1 00 00 00	 jmp	 $LN10@Main
$LN4@Main:

; 438  : 						case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->m_vResetDamage[i].SUDamagePercent) / 100; break;

  01d13	8b 45 f8	 mov	 eax, DWORD PTR _i$228051[ebp]
  01d16	50		 push	 eax
  01d17	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d1a	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  01d20	e8 00 00 00 00	 call	 ??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
  01d25	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01d28	8b 11		 mov	 edx, DWORD PTR [ecx]
  01d2a	0f af 50 18	 imul	 edx, DWORD PTR [eax+24]
  01d2e	8b c2		 mov	 eax, edx
  01d30	99		 cdq
  01d31	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01d36	f7 f9		 idiv	 ecx
  01d38	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01d3b	89 02		 mov	 DWORD PTR [edx], eax
  01d3d	e9 82 00 00 00	 jmp	 $LN10@Main
$LN3@Main:

; 439  : 						case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->m_vResetDamage[i].MGDamagePercent ) / 100; break;

  01d42	8b 45 f8	 mov	 eax, DWORD PTR _i$228051[ebp]
  01d45	50		 push	 eax
  01d46	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d49	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  01d4f	e8 00 00 00 00	 call	 ??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
  01d54	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01d57	8b 11		 mov	 edx, DWORD PTR [ecx]
  01d59	0f af 50 10	 imul	 edx, DWORD PTR [eax+16]
  01d5d	8b c2		 mov	 eax, edx
  01d5f	99		 cdq
  01d60	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01d65	f7 f9		 idiv	 ecx
  01d67	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01d6a	89 02		 mov	 DWORD PTR [edx], eax
  01d6c	eb 56		 jmp	 SHORT $LN10@Main
$LN2@Main:

; 440  : 						case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->m_vResetDamage[i].DLDamagePercent ) / 100; break;

  01d6e	8b 45 f8	 mov	 eax, DWORD PTR _i$228051[ebp]
  01d71	50		 push	 eax
  01d72	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d75	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  01d7b	e8 00 00 00 00	 call	 ??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
  01d80	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01d83	8b 11		 mov	 edx, DWORD PTR [ecx]
  01d85	0f af 50 14	 imul	 edx, DWORD PTR [eax+20]
  01d89	8b c2		 mov	 eax, edx
  01d8b	99		 cdq
  01d8c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01d91	f7 f9		 idiv	 ecx
  01d93	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01d96	89 02		 mov	 DWORD PTR [edx], eax
  01d98	eb 2a		 jmp	 SHORT $LN10@Main
$LN1@Main:

; 441  : 						case CLASS_MONK:		AttackDamage = ( AttackDamage * this->m_vResetDamage[i].RFDamagePercent ) / 100; break;

  01d9a	8b 45 f8	 mov	 eax, DWORD PTR _i$228051[ebp]
  01d9d	50		 push	 eax
  01d9e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01da1	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  01da7	e8 00 00 00 00	 call	 ??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
  01dac	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01daf	8b 11		 mov	 edx, DWORD PTR [ecx]
  01db1	0f af 50 1c	 imul	 edx, DWORD PTR [eax+28]
  01db5	8b c2		 mov	 eax, edx
  01db7	99		 cdq
  01db8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01dbd	f7 f9		 idiv	 ecx
  01dbf	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01dc2	89 02		 mov	 DWORD PTR [edx], eax
$LN10@Main:

; 442  : 					}
; 443  : 				}
; 444  : 			}

  01dc4	e9 59 fe ff ff	 jmp	 $LN12@Main
$LN109@Main:

; 445  : 
; 446  : 
; 447  : 		}
; 448  : 	}
; 449  : }

  01dc9	5f		 pop	 edi
  01dca	5e		 pop	 esi
  01dcb	5b		 pop	 ebx
  01dcc	8b e5		 mov	 esp, ebp
  01dce	5d		 pop	 ebp
  01dcf	c2 0c 00	 ret	 12			; 0000000cH
  01dd2	8b ff		 npad	 2
$LN111@Main:
  01dd4	00 00 00 00	 DD	 $LN102@Main
  01dd8	00 00 00 00	 DD	 $LN103@Main
  01ddc	00 00 00 00	 DD	 $LN101@Main
  01de0	00 00 00 00	 DD	 $LN99@Main
  01de4	00 00 00 00	 DD	 $LN98@Main
  01de8	00 00 00 00	 DD	 $LN100@Main
  01dec	00 00 00 00	 DD	 $LN97@Main
$LN112@Main:
  01df0	00 00 00 00	 DD	 $LN92@Main
  01df4	00 00 00 00	 DD	 $LN91@Main
  01df8	00 00 00 00	 DD	 $LN90@Main
  01dfc	00 00 00 00	 DD	 $LN88@Main
  01e00	00 00 00 00	 DD	 $LN87@Main
  01e04	00 00 00 00	 DD	 $LN89@Main
  01e08	00 00 00 00	 DD	 $LN86@Main
$LN113@Main:
  01e0c	00 00 00 00	 DD	 $LN79@Main
  01e10	00 00 00 00	 DD	 $LN80@Main
  01e14	00 00 00 00	 DD	 $LN81@Main
  01e18	00 00 00 00	 DD	 $LN77@Main
  01e1c	00 00 00 00	 DD	 $LN76@Main
  01e20	00 00 00 00	 DD	 $LN78@Main
  01e24	00 00 00 00	 DD	 $LN75@Main
$LN114@Main:
  01e28	00 00 00 00	 DD	 $LN68@Main
  01e2c	00 00 00 00	 DD	 $LN69@Main
  01e30	00 00 00 00	 DD	 $LN67@Main
  01e34	00 00 00 00	 DD	 $LN66@Main
  01e38	00 00 00 00	 DD	 $LN65@Main
  01e3c	00 00 00 00	 DD	 $LN70@Main
  01e40	00 00 00 00	 DD	 $LN64@Main
$LN115@Main:
  01e44	00 00 00 00	 DD	 $LN57@Main
  01e48	00 00 00 00	 DD	 $LN58@Main
  01e4c	00 00 00 00	 DD	 $LN56@Main
  01e50	00 00 00 00	 DD	 $LN59@Main
  01e54	00 00 00 00	 DD	 $LN54@Main
  01e58	00 00 00 00	 DD	 $LN55@Main
  01e5c	00 00 00 00	 DD	 $LN53@Main
$LN116@Main:
  01e60	00 00 00 00	 DD	 $LN46@Main
  01e64	00 00 00 00	 DD	 $LN47@Main
  01e68	00 00 00 00	 DD	 $LN45@Main
  01e6c	00 00 00 00	 DD	 $LN43@Main
  01e70	00 00 00 00	 DD	 $LN48@Main
  01e74	00 00 00 00	 DD	 $LN44@Main
  01e78	00 00 00 00	 DD	 $LN42@Main
$LN117@Main:
  01e7c	00 00 00 00	 DD	 $LN35@Main
  01e80	00 00 00 00	 DD	 $LN36@Main
  01e84	00 00 00 00	 DD	 $LN34@Main
  01e88	00 00 00 00	 DD	 $LN32@Main
  01e8c	00 00 00 00	 DD	 $LN31@Main
  01e90	00 00 00 00	 DD	 $LN33@Main
  01e94	00 00 00 00	 DD	 $LN37@Main
$LN118@Main:
  01e98	00 00 00 00	 DD	 $LN21@Main
  01e9c	00 00 00 00	 DD	 $LN22@Main
  01ea0	00 00 00 00	 DD	 $LN20@Main
  01ea4	00 00 00 00	 DD	 $LN18@Main
  01ea8	00 00 00 00	 DD	 $LN17@Main
  01eac	00 00 00 00	 DD	 $LN19@Main
  01eb0	00 00 00 00	 DD	 $LN16@Main
$LN119@Main:
  01eb4	00 00 00 00	 DD	 $LN7@Main
  01eb8	00 00 00 00	 DD	 $LN6@Main
  01ebc	00 00 00 00	 DD	 $LN5@Main
  01ec0	00 00 00 00	 DD	 $LN3@Main
  01ec4	00 00 00 00	 DD	 $LN2@Main
  01ec8	00 00 00 00	 DD	 $LN4@Main
  01ecc	00 00 00 00	 DD	 $LN1@Main
?Main@cBalanceSystem@@QAEXPAUOBJECTSTRUCT@@0AAH@Z ENDP	; cBalanceSystem::Main
_TEXT	ENDS
PUBLIC	?Refflect@cBalanceSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; cBalanceSystem::Refflect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?Refflect@cBalanceSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; cBalanceSystem::Refflect
; _this$ = ecx

; 452  : {

  01ed0	55		 push	 ebp
  01ed1	8b ec		 mov	 ebp, esp
  01ed3	83 ec 48	 sub	 esp, 72			; 00000048H
  01ed6	53		 push	 ebx
  01ed7	56		 push	 esi
  01ed8	57		 push	 edi
  01ed9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 453  : 	if(this->m_EnableRefflect == true)

  01edc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01edf	0f b6 88 f0 00
	00 00		 movzx	 ecx, BYTE PTR [eax+240]
  01ee6	83 f9 01	 cmp	 ecx, 1
  01ee9	0f 85 49 01 00
	00		 jne	 $LN12@Refflect

; 454  : 	{
; 455  : 		if(lpObj->Type == OBJ_USER)

  01eef	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ef2	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01ef6	83 f9 01	 cmp	 ecx, 1
  01ef9	0f 85 39 01 00
	00		 jne	 $LN12@Refflect

; 456  : 		{
; 457  : 			//switch(lpObj->Class)
; 458  : 			//{
; 459  : 			//	case CLASS_KNIGHT:		AttackDamage = ( AttackDamage * this->m_DKRefflectPercent ) / 100; break;
; 460  : 			//	case CLASS_WIZARD:		AttackDamage = ( AttackDamage * this->m_DWRefflectPercent ) / 100; break;
; 461  : 			//	case CLASS_ELF:			AttackDamage = ( AttackDamage * this->m_FERefflectPercent ) / 100; break;
; 462  : 			//	case CLASS_SUMMONER:	AttackDamage = ( AttackDamage * this->m_SURefflectPercent ) / 100; break;
; 463  : 			//	case CLASS_MAGUMSA:		AttackDamage = ( AttackDamage * this->m_MGRefflectPercent ) / 100; break;
; 464  : 			//	case CLASS_DARKLORD:	AttackDamage = ( AttackDamage * this->m_DLRefflectPercent ) / 100; break;
; 465  : 			//	case CLASS_MONK:		AttackDamage = ( AttackDamage * this->m_RFRefflectPercent ) / 100; break;
; 466  : 			//}
; 467  : 
; 468  : 			switch(lpObj->Class)

  01eff	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01f02	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01f09	89 4d b8	 mov	 DWORD PTR tv72[ebp], ecx
  01f0c	83 7d b8 06	 cmp	 DWORD PTR tv72[ebp], 6
  01f10	0f 87 22 01 00
	00		 ja	 $LN12@Refflect
  01f16	8b 55 b8	 mov	 edx, DWORD PTR tv72[ebp]
  01f19	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN14@Refflect[edx*4]
$LN7@Refflect:

; 469  : 			{
; 470  : 			case CLASS_KNIGHT:		lpObj->DamageReflect = ( lpObj->DamageReflect * this->m_DKRefflectPercent ) / 100; break;

  01f20	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01f23	0f b6 80 71 01
	00 00		 movzx	 eax, BYTE PTR [eax+369]
  01f2a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f2d	0f af 81 f8 00
	00 00		 imul	 eax, DWORD PTR [ecx+248]
  01f34	99		 cdq
  01f35	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01f3a	f7 f9		 idiv	 ecx
  01f3c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01f3f	88 82 71 01 00
	00		 mov	 BYTE PTR [edx+369], al
  01f45	e9 ee 00 00 00	 jmp	 $LN12@Refflect
$LN6@Refflect:

; 471  : 				case CLASS_WIZARD:		lpObj->DamageReflect = ( lpObj->DamageReflect * this->m_DWRefflectPercent ) / 100; break;

  01f4a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01f4d	0f b6 80 71 01
	00 00		 movzx	 eax, BYTE PTR [eax+369]
  01f54	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f57	0f af 81 f4 00
	00 00		 imul	 eax, DWORD PTR [ecx+244]
  01f5e	99		 cdq
  01f5f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01f64	f7 f9		 idiv	 ecx
  01f66	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01f69	88 82 71 01 00
	00		 mov	 BYTE PTR [edx+369], al
  01f6f	e9 c4 00 00 00	 jmp	 $LN12@Refflect
$LN5@Refflect:

; 472  : 				case CLASS_ELF:			lpObj->DamageReflect = ( lpObj->DamageReflect * this->m_FERefflectPercent ) / 100; break;

  01f74	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01f77	0f b6 80 71 01
	00 00		 movzx	 eax, BYTE PTR [eax+369]
  01f7e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f81	0f af 81 fc 00
	00 00		 imul	 eax, DWORD PTR [ecx+252]
  01f88	99		 cdq
  01f89	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01f8e	f7 f9		 idiv	 ecx
  01f90	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01f93	88 82 71 01 00
	00		 mov	 BYTE PTR [edx+369], al
  01f99	e9 9a 00 00 00	 jmp	 $LN12@Refflect
$LN4@Refflect:

; 473  : 				case CLASS_SUMMONER:	lpObj->DamageReflect = ( lpObj->DamageReflect * this->m_SURefflectPercent ) / 100; break;

  01f9e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01fa1	0f b6 80 71 01
	00 00		 movzx	 eax, BYTE PTR [eax+369]
  01fa8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fab	0f af 81 08 01
	00 00		 imul	 eax, DWORD PTR [ecx+264]
  01fb2	99		 cdq
  01fb3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01fb8	f7 f9		 idiv	 ecx
  01fba	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01fbd	88 82 71 01 00
	00		 mov	 BYTE PTR [edx+369], al
  01fc3	eb 73		 jmp	 SHORT $LN12@Refflect
$LN3@Refflect:

; 474  : 				case CLASS_MAGUMSA:		lpObj->DamageReflect = ( lpObj->DamageReflect * this->m_MGRefflectPercent ) / 100; break;

  01fc5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01fc8	0f b6 80 71 01
	00 00		 movzx	 eax, BYTE PTR [eax+369]
  01fcf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fd2	0f af 81 00 01
	00 00		 imul	 eax, DWORD PTR [ecx+256]
  01fd9	99		 cdq
  01fda	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01fdf	f7 f9		 idiv	 ecx
  01fe1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01fe4	88 82 71 01 00
	00		 mov	 BYTE PTR [edx+369], al
  01fea	eb 4c		 jmp	 SHORT $LN12@Refflect
$LN2@Refflect:

; 475  : 				case CLASS_DARKLORD:	lpObj->DamageReflect = ( lpObj->DamageReflect * this->m_DLRefflectPercent ) / 100; break;

  01fec	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01fef	0f b6 80 71 01
	00 00		 movzx	 eax, BYTE PTR [eax+369]
  01ff6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ff9	0f af 81 04 01
	00 00		 imul	 eax, DWORD PTR [ecx+260]
  02000	99		 cdq
  02001	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02006	f7 f9		 idiv	 ecx
  02008	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0200b	88 82 71 01 00
	00		 mov	 BYTE PTR [edx+369], al
  02011	eb 25		 jmp	 SHORT $LN12@Refflect
$LN1@Refflect:

; 476  : 				case CLASS_MONK:		lpObj->DamageReflect = ( lpObj->DamageReflect * this->m_RFRefflectPercent ) / 100; break;

  02013	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02016	0f b6 80 71 01
	00 00		 movzx	 eax, BYTE PTR [eax+369]
  0201d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02020	0f af 81 0c 01
	00 00		 imul	 eax, DWORD PTR [ecx+268]
  02027	99		 cdq
  02028	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0202d	f7 f9		 idiv	 ecx
  0202f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02032	88 82 71 01 00
	00		 mov	 BYTE PTR [edx+369], al
$LN12@Refflect:

; 477  : 			}
; 478  : 		}
; 479  : 	}
; 480  : }

  02038	5f		 pop	 edi
  02039	5e		 pop	 esi
  0203a	5b		 pop	 ebx
  0203b	8b e5		 mov	 esp, ebp
  0203d	5d		 pop	 ebp
  0203e	c2 04 00	 ret	 4
  02041	8d 49 00	 npad	 3
$LN14@Refflect:
  02044	00 00 00 00	 DD	 $LN6@Refflect
  02048	00 00 00 00	 DD	 $LN7@Refflect
  0204c	00 00 00 00	 DD	 $LN5@Refflect
  02050	00 00 00 00	 DD	 $LN3@Refflect
  02054	00 00 00 00	 DD	 $LN2@Refflect
  02058	00 00 00 00	 DD	 $LN4@Refflect
  0205c	00 00 00 00	 DD	 $LN1@Refflect
?Refflect@cBalanceSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; cBalanceSystem::Refflect
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@V?$allocator@UBALANS_RESET_DAMAGE@@@1@@Z ; std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
PUBLIC	??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@XZ ; std::allocator<BALANS_RESET_DAMAGE>::allocator<BALANS_RESET_DAMAGE>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T229190 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T229190[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@XZ ; std::allocator<BALANS_RESET_DAMAGE>::allocator<BALANS_RESET_DAMAGE>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@V?$allocator@UBALANS_RESET_DAMAGE@@@1@@Z ; std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ; std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
PUBLIC	?_Tidy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ; std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ; std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
__ehhandler$??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 05	 sar	 eax, 5

; 880  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0000f	c1 e0 05	 shl	 eax, 5
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEAAUBALANS_RESET_DAMAGE@@I@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@ABU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@ABU2@@Z ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE const &>
PUBLIC	??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@AAU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@AAU2@@Z ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE &>
PUBLIC	?_Orphan_range@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXPAUBALANS_RESET_DAMAGE@@0@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXI@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Reserve
PUBLIC	?_Inside@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBE_NPBUBALANS_RESET_DAMAGE@@@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Inside
PUBLIC	??$addressof@$$CBUBALANS_RESET_DAMAGE@@@std@@YAPBUBALANS_RESET_DAMAGE@@ABU1@@Z ; std::addressof<BALANS_RESET_DAMAGE const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXABUBALANS_RESET_DAMAGE@@@Z
_TEXT	SEGMENT
__Idx$228107 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXABUBALANS_RESET_DAMAGE@@@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUBALANS_RESET_DAMAGE@@@std@@YAPBUBALANS_RESET_DAMAGE@@ABU1@@Z ; std::addressof<BALANS_RESET_DAMAGE const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBE_NPBUBALANS_RESET_DAMAGE@@@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 78		 je	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUBALANS_RESET_DAMAGE@@@std@@YAPBUBALANS_RESET_DAMAGE@@ABU1@@Z ; std::addressof<BALANS_RESET_DAMAGE const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	c1 f8 05	 sar	 eax, 5
  0003c	89 45 f8	 mov	 DWORD PTR __Idx$228107[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00048	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004b	75 0a		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXI@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	51		 push	 ecx
  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00064	50		 push	 eax
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXPAUBALANS_RESET_DAMAGE@@0@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0006d	8b 45 f8	 mov	 eax, DWORD PTR __Idx$228107[ebp]
  00070	c1 e0 05	 shl	 eax, 5
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	03 01		 add	 eax, DWORD PTR [ecx]
  00078	50		 push	 eax
  00079	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007f	50		 push	 eax
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@AAU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@AAU2@@Z ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE &>
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00095	83 c1 20	 add	 ecx, 32			; 00000020H
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  0009e	eb 57		 jmp	 SHORT $LN5@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a9	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000ac	75 0a		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  000ae	6a 01		 push	 1
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXI@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	51		 push	 ecx
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c5	50		 push	 eax
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXPAUBALANS_RESET_DAMAGE@@0@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000ce	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d8	52		 push	 edx
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	83 c0 0c	 add	 eax, 12			; 0000000cH
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@ABU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@ABU2@@Z ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE const &>
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	83 c1 20	 add	 ecx, 32			; 00000020H
  000f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f4	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back:

; 997  : 			}
; 998  : 		}

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?push_back@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXABUBALANS_RESET_DAMAGE@@@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@0@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::erase
PUBLIC	?begin@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::begin
PUBLIC	?end@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T229209 = -88						; size = 4
$T229210 = -84						; size = 4
$T229211 = -80						; size = 4
$T229212 = -76						; size = 4
$T229213 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXXZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T229210[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T229209[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T229212[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T229211[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T229209[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T229211[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T229213[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@0@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXXZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@XZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXPAUBALANS_RESET_DAMAGE@@0@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Destroy
PUBLIC	??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00@Z ; std::_Move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T229220 = -84						; size = 4
__Ptr$228298 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@0@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00@Z ; std::_Move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$228298[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$228298[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXPAUBALANS_RESET_DAMAGE@@0@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$228298[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T229220[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T229220[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@0@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBE_NPBUBALANS_RESET_DAMAGE@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBE_NPBUBALANS_RESET_DAMAGE@@@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBE_NPBUBALANS_RESET_DAMAGE@@@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::reserve
PUBLIC	?_Grow_to@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEII@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Grow_to
PUBLIC	?capacity@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::capacity
PUBLIC	?_Xlen@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Xlen
PUBLIC	?max_size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXI@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEII@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::reserve
$LN6@Reserve:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXI@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@I@Z ; std::allocator<BALANS_RESET_DAMAGE>::deallocate
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXXZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXPAUBALANS_RESET_DAMAGE@@0@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 05	 sar	 edx, 5
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@I@Z ; std::allocator<BALANS_RESET_DAMAGE>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXXZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXPAUBALANS_RESET_DAMAGE@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXPAUBALANS_RESET_DAMAGE@@0@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXPAUBALANS_RESET_DAMAGE@@0@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@ABV01@@Z ; std::allocator<BALANS_RESET_DAMAGE>::allocator<BALANS_RESET_DAMAGE>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@V?$allocator@UBALANS_RESET_DAMAGE@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@V?$allocator@UBALANS_RESET_DAMAGE@@@1@@Z PROC ; std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@ABV01@@Z ; std::allocator<BALANS_RESET_DAMAGE>::allocator<BALANS_RESET_DAMAGE>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@V?$allocator@UBALANS_RESET_DAMAGE@@@1@@Z ENDP ; std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::~_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@XZ PROC	; std::allocator<BALANS_RESET_DAMAGE>::allocator<BALANS_RESET_DAMAGE>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@XZ ENDP	; std::allocator<BALANS_RESET_DAMAGE>::allocator<BALANS_RESET_DAMAGE>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUBALANS_RESET_DAMAGE@@@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEPAUBALANS_RESET_DAMAGE@@PAU2@00@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Umove<BALANS_RESET_DAMAGE *>
PUBLIC	?allocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEPAUBALANS_RESET_DAMAGE@@I@Z ; std::allocator<BALANS_RESET_DAMAGE>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$228340 = -28					; size = 4
__Ptr$228333 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Xlen
  00044	e9 eb 00 00 00	 jmp	 $LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 da 00 00
	00		 jae	 $LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEPAUBALANS_RESET_DAMAGE@@I@Z ; std::allocator<BALANS_RESET_DAMAGE>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$228333[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$228333[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUBALANS_RESET_DAMAGE@@@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEPAUBALANS_RESET_DAMAGE@@PAU2@00@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Umove<BALANS_RESET_DAMAGE *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve
__catch$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228333[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@I@Z ; std::allocator<BALANS_RESET_DAMAGE>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$228340[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 35		 je	 SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXPAUBALANS_RESET_DAMAGE@@0@Z ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ef	2b 11		 sub	 edx, DWORD PTR [ecx]
  000f1	c1 fa 05	 sar	 edx, 5
  000f4	52		 push	 edx
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	51		 push	 ecx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00101	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@I@Z ; std::allocator<BALANS_RESET_DAMAGE>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00111	c1 e0 05	 shl	 eax, 5
  00114	03 45 e8	 add	 eax, DWORD PTR __Ptr$228333[ebp]
  00117	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR __Size$228340[ebp]
  00120	c1 e0 05	 shl	 eax, 5
  00123	03 45 e8	 add	 eax, DWORD PTR __Ptr$228333[ebp]
  00126	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  0012c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228333[ebp]
  00132	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QAEXI@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 05	 sar	 eax, 5

; 778  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?capacity@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@2@@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QBEIXZ ; std::allocator<BALANS_RESET_DAMAGE>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QBEIXZ ; std::allocator<BALANS_RESET_DAMAGE>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z ; std::_Destroy_range<std::allocator<BALANS_RESET_DAMAGE> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXPAUBALANS_RESET_DAMAGE@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXPAUBALANS_RESET_DAMAGE@@0@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z ; std::_Destroy_range<std::allocator<BALANS_RESET_DAMAGE> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEXPAUBALANS_RESET_DAMAGE@@0@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEII@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@QBEIXZ ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEII@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXXZ PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IBEXXZ ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@ABV01@@Z PROC ; std::allocator<BALANS_RESET_DAMAGE>::allocator<BALANS_RESET_DAMAGE>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<BALANS_RESET_DAMAGE>::allocator<BALANS_RESET_DAMAGE>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@I@Z PROC ; std::allocator<BALANS_RESET_DAMAGE>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@I@Z ENDP ; std::allocator<BALANS_RESET_DAMAGE>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Allocate@UBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@IPAU1@@Z ; std::_Allocate<BALANS_RESET_DAMAGE>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEPAUBALANS_RESET_DAMAGE@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEPAUBALANS_RESET_DAMAGE@@I@Z PROC ; std::allocator<BALANS_RESET_DAMAGE>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@IPAU1@@Z ; std::_Allocate<BALANS_RESET_DAMAGE>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEPAUBALANS_RESET_DAMAGE@@I@Z ENDP ; std::allocator<BALANS_RESET_DAMAGE>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QBEIXZ PROC ; std::allocator<BALANS_RESET_DAMAGE>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 07		 mov	 DWORD PTR __Count$[ebp], 134217727 ; 07ffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QBEIXZ ENDP ; std::allocator<BALANS_RESET_DAMAGE>::max_size
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QAE@PAUBALANS_RESET_DAMAGE@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> > >::_Compat
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUBALANS_RESET_DAMAGE@@@std@@YAPBUBALANS_RESET_DAMAGE@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUBALANS_RESET_DAMAGE@@@std@@YAPBUBALANS_RESET_DAMAGE@@ABU1@@Z PROC ; std::addressof<BALANS_RESET_DAMAGE const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUBALANS_RESET_DAMAGE@@@std@@YAPBUBALANS_RESET_DAMAGE@@ABU1@@Z ENDP ; std::addressof<BALANS_RESET_DAMAGE const >
_TEXT	ENDS
PUBLIC	??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z ; std::allocator<BALANS_RESET_DAMAGE>::construct<BALANS_RESET_DAMAGE &>
PUBLIC	??$forward@AAUBALANS_RESET_DAMAGE@@@std@@YAAAUBALANS_RESET_DAMAGE@@AAU1@@Z ; std::forward<BALANS_RESET_DAMAGE &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@AAU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@AAU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUBALANS_RESET_DAMAGE@@@std@@YAAAUBALANS_RESET_DAMAGE@@AAU1@@Z ; std::forward<BALANS_RESET_DAMAGE &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z ; std::allocator<BALANS_RESET_DAMAGE>::construct<BALANS_RESET_DAMAGE &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@AAU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@ABU3@@Z ; std::allocator<BALANS_RESET_DAMAGE>::construct
PUBLIC	??$forward@ABUBALANS_RESET_DAMAGE@@@std@@YAABUBALANS_RESET_DAMAGE@@ABU1@@Z ; std::forward<BALANS_RESET_DAMAGE const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@ABU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@ABU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUBALANS_RESET_DAMAGE@@@std@@YAABUBALANS_RESET_DAMAGE@@ABU1@@Z ; std::forward<BALANS_RESET_DAMAGE const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@ABU3@@Z ; std::allocator<BALANS_RESET_DAMAGE>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@ABU3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *>
PUBLIC	??$_Ptr_cat@UBALANS_RESET_DAMAGE@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBALANS_RESET_DAMAGE@@0@Z ; std::_Ptr_cat<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00@Z
_TEXT	SEGMENT
$T229295 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00@Z PROC ; std::_Move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UBALANS_RESET_DAMAGE@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBALANS_RESET_DAMAGE@@0@Z ; std::_Ptr_cat<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229295[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229295[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00@Z ENDP ; std::_Move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z ; std::_Uninitialized_move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *,std::allocator<BALANS_RESET_DAMAGE> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUBALANS_RESET_DAMAGE@@@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEPAUBALANS_RESET_DAMAGE@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUBALANS_RESET_DAMAGE@@@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEPAUBALANS_RESET_DAMAGE@@PAU2@00@Z PROC ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Umove<BALANS_RESET_DAMAGE *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z ; std::_Uninitialized_move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *,std::allocator<BALANS_RESET_DAMAGE> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUBALANS_RESET_DAMAGE@@@?$vector@UBALANS_RESET_DAMAGE@@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@IAEPAUBALANS_RESET_DAMAGE@@PAU2@00@Z ENDP ; std::vector<BALANS_RESET_DAMAGE,std::allocator<BALANS_RESET_DAMAGE> >::_Umove<BALANS_RESET_DAMAGE *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<BALANS_RESET_DAMAGE> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z
_TEXT	SEGMENT
$T229300 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z PROC ; std::_Destroy_range<std::allocator<BALANS_RESET_DAMAGE> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UBALANS_RESET_DAMAGE@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBALANS_RESET_DAMAGE@@0@Z ; std::_Ptr_cat<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229300[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229300[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<BALANS_RESET_DAMAGE> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<BALANS_RESET_DAMAGE> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@UBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@IPAU1@@Z
_TEXT	SEGMENT
$T229303 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@IPAU1@@Z PROC ; std::_Allocate<BALANS_RESET_DAMAGE>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 ff ff
	ff 07		 cmp	 DWORD PTR __Count$[ebp], 134217727 ; 07ffffffH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	c1 e0 05	 shl	 eax, 5
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T229303[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T229303[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@IPAU1@@Z ENDP ; std::_Allocate<BALANS_RESET_DAMAGE>
_TEXT	ENDS
PUBLIC	??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z ; std::_Construct<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@ABU3@@Z PROC ; std::allocator<BALANS_RESET_DAMAGE>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z ; std::_Construct<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@ABU3@@Z ENDP ; std::allocator<BALANS_RESET_DAMAGE>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUBALANS_RESET_DAMAGE@@@std@@YAAAUBALANS_RESET_DAMAGE@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUBALANS_RESET_DAMAGE@@@std@@YAAAUBALANS_RESET_DAMAGE@@AAU1@@Z PROC ; std::forward<BALANS_RESET_DAMAGE &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUBALANS_RESET_DAMAGE@@@std@@YAAAUBALANS_RESET_DAMAGE@@AAU1@@Z ENDP ; std::forward<BALANS_RESET_DAMAGE &>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229310 = -88						; size = 4
$T229311 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z PROC ; std::allocator<BALANS_RESET_DAMAGE>::construct<BALANS_RESET_DAMAGE &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 20		 push	 32			; 00000020H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T229311[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T229311[ebp], 0
  00047	74 20		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUBALANS_RESET_DAMAGE@@@std@@YAAAUBALANS_RESET_DAMAGE@@AAU1@@Z ; std::forward<BALANS_RESET_DAMAGE &>
  00052	83 c4 04	 add	 esp, 4
  00055	b9 08 00 00 00	 mov	 ecx, 8
  0005a	8b f0		 mov	 esi, eax
  0005c	8b 7d ac	 mov	 edi, DWORD PTR $T229311[ebp]
  0005f	f3 a5		 rep movsd
  00061	8b 55 ac	 mov	 edx, DWORD PTR $T229311[ebp]
  00064	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00067	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00069	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  00070	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00073	89 45 a8	 mov	 DWORD PTR $T229310[ebp], eax
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229311[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUBALANS_RESET_DAMAGE@@@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@AAU2@@Z ENDP ; std::allocator<BALANS_RESET_DAMAGE>::construct<BALANS_RESET_DAMAGE &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUBALANS_RESET_DAMAGE@@@std@@YAABUBALANS_RESET_DAMAGE@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUBALANS_RESET_DAMAGE@@@std@@YAABUBALANS_RESET_DAMAGE@@ABU1@@Z PROC ; std::forward<BALANS_RESET_DAMAGE const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUBALANS_RESET_DAMAGE@@@std@@YAABUBALANS_RESET_DAMAGE@@ABU1@@Z ENDP ; std::forward<BALANS_RESET_DAMAGE const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UBALANS_RESET_DAMAGE@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBALANS_RESET_DAMAGE@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UBALANS_RESET_DAMAGE@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBALANS_RESET_DAMAGE@@0@Z PROC ; std::_Ptr_cat<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UBALANS_RESET_DAMAGE@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBALANS_RESET_DAMAGE@@0@Z ENDP ; std::_Ptr_cat<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>
_TEXT	ENDS
PUBLIC	??$move@AAUBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z ; std::move<BALANS_RESET_DAMAGE &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 20	 add	 eax, 32			; 00000020H
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 20	 add	 ecx, 32			; 00000020H
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 1a		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z ; std::move<BALANS_RESET_DAMAGE &>
  0002e	83 c4 04	 add	 esp, 4
  00031	b9 08 00 00 00	 mov	 ecx, 8
  00036	8b f0		 mov	 esi, eax
  00038	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0003b	f3 a5		 rep movsd
  0003d	eb cc		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  0003f	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Move@PAUBALANS_RESET_DAMAGE@@PAU1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *,std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE>
PUBLIC	??$_Val_type@PAUBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@@Z ; std::_Val_type<BALANS_RESET_DAMAGE *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z
_TEXT	SEGMENT
$T229333 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z PROC ; std::_Uninitialized_move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *,std::allocator<BALANS_RESET_DAMAGE> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UBALANS_RESET_DAMAGE@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBALANS_RESET_DAMAGE@@0@Z ; std::_Ptr_cat<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229333[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229333[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@@Z ; std::_Val_type<BALANS_RESET_DAMAGE *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *,std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@@Z ENDP ; std::_Uninitialized_move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *,std::allocator<BALANS_RESET_DAMAGE> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@@Z ; std::_Dest_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<BALANS_RESET_DAMAGE> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 20	 add	 eax, 32			; 00000020H
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@@Z ; std::_Dest_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@@std@@YAXPAUBALANS_RESET_DAMAGE@@0AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<BALANS_RESET_DAMAGE> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229338 = -88						; size = 4
$T229339 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z PROC ; std::_Construct<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 20		 push	 32			; 00000020H
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T229339[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T229339[ebp], 0
  0004a	74 20		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUBALANS_RESET_DAMAGE@@@std@@YAABUBALANS_RESET_DAMAGE@@ABU1@@Z ; std::forward<BALANS_RESET_DAMAGE const &>
  00055	83 c4 04	 add	 esp, 4
  00058	b9 08 00 00 00	 mov	 ecx, 8
  0005d	8b f0		 mov	 esi, eax
  0005f	8b 7d ac	 mov	 edi, DWORD PTR $T229339[ebp]
  00062	f3 a5		 rep movsd
  00064	8b 55 ac	 mov	 edx, DWORD PTR $T229339[ebp]
  00067	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  0006a	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  0006c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  00073	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00076	89 45 a8	 mov	 DWORD PTR $T229338[ebp], eax
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229339[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UBALANS_RESET_DAMAGE@@ABU1@@std@@YAXPAUBALANS_RESET_DAMAGE@@ABU1@@Z ENDP ; std::_Construct<BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z PROC ; std::move<BALANS_RESET_DAMAGE &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z ENDP ; std::move<BALANS_RESET_DAMAGE &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@@Z PROC ; std::_Val_type<BALANS_RESET_DAMAGE *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUBALANS_RESET_DAMAGE@@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@@Z ENDP ; std::_Val_type<BALANS_RESET_DAMAGE *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@U3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@$$QAU2@@Z ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *,std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 20	 add	 eax, 32			; 00000020H
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 20	 add	 ecx, 32			; 00000020H
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@U3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@$$QAU2@@Z ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 20	 add	 eax, 32			; 00000020H
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@@Z ; std::_Dest_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUBALANS_RESET_DAMAGE@@PAU1@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@U1@@std@@YAPAUBALANS_RESET_DAMAGE@@PAU1@00AAV?$allocator@UBALANS_RESET_DAMAGE@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<BALANS_RESET_DAMAGE *,BALANS_RESET_DAMAGE *,std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE>
PUBLIC	?destroy@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@@Z ; std::allocator<BALANS_RESET_DAMAGE>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@@Z PROC ; std::_Dest_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@@Z ; std::allocator<BALANS_RESET_DAMAGE>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@@Z ENDP ; std::_Dest_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE>
_TEXT	ENDS
PUBLIC	??$_Destroy@UBALANS_RESET_DAMAGE@@@std@@YAXPAUBALANS_RESET_DAMAGE@@@Z ; std::_Destroy<BALANS_RESET_DAMAGE>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@@Z PROC ; std::allocator<BALANS_RESET_DAMAGE>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UBALANS_RESET_DAMAGE@@@std@@YAXPAUBALANS_RESET_DAMAGE@@@Z ; std::_Destroy<BALANS_RESET_DAMAGE>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@@Z ENDP ; std::allocator<BALANS_RESET_DAMAGE>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z ; std::allocator<BALANS_RESET_DAMAGE>::construct
PUBLIC	??$forward@UBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z ; std::forward<BALANS_RESET_DAMAGE>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@U3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@U3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z ; std::forward<BALANS_RESET_DAMAGE>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z ; std::allocator<BALANS_RESET_DAMAGE>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UBALANS_RESET_DAMAGE@@@std@@UBALANS_RESET_DAMAGE@@U3@@std@@YAXAAV?$allocator@UBALANS_RESET_DAMAGE@@@0@PAUBALANS_RESET_DAMAGE@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<BALANS_RESET_DAMAGE>,BALANS_RESET_DAMAGE,BALANS_RESET_DAMAGE>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UBALANS_RESET_DAMAGE@@@std@@YAXPAUBALANS_RESET_DAMAGE@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UBALANS_RESET_DAMAGE@@@std@@YAXPAUBALANS_RESET_DAMAGE@@@Z PROC ; std::_Destroy<BALANS_RESET_DAMAGE>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UBALANS_RESET_DAMAGE@@@std@@YAXPAUBALANS_RESET_DAMAGE@@@Z ENDP ; std::_Destroy<BALANS_RESET_DAMAGE>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229378 = -88						; size = 4
$T229379 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z PROC ; std::allocator<BALANS_RESET_DAMAGE>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 20		 push	 32			; 00000020H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T229379[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T229379[ebp], 0
  00047	74 20		 je	 SHORT $LN3@construct@2
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z ; std::forward<BALANS_RESET_DAMAGE>
  00052	83 c4 04	 add	 esp, 4
  00055	b9 08 00 00 00	 mov	 ecx, 8
  0005a	8b f0		 mov	 esi, eax
  0005c	8b 7d ac	 mov	 edi, DWORD PTR $T229379[ebp]
  0005f	f3 a5		 rep movsd
  00061	8b 55 ac	 mov	 edx, DWORD PTR $T229379[ebp]
  00064	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00067	eb 07		 jmp	 SHORT $LN4@construct@2
$LN3@construct@2:
  00069	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@2:
  00070	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00073	89 45 a8	 mov	 DWORD PTR $T229378[ebp], eax
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229379[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UBALANS_RESET_DAMAGE@@@std@@QAEXPAUBALANS_RESET_DAMAGE@@$$QAU3@@Z ENDP ; std::allocator<BALANS_RESET_DAMAGE>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z PROC ; std::forward<BALANS_RESET_DAMAGE>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UBALANS_RESET_DAMAGE@@@std@@YA$$QAUBALANS_RESET_DAMAGE@@AAU1@@Z ENDP ; std::forward<BALANS_RESET_DAMAGE>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\balancesystem.cpp
;	COMDAT ??__EgBalanceSystem@@YAXXZ
text$yc	SEGMENT
??__EgBalanceSystem@@YAXXZ PROC				; `dynamic initializer for 'gBalanceSystem'', COMDAT

; 13   : cBalanceSystem gBalanceSystem;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gBalanceSystem@@3VcBalanceSystem@@A ; gBalanceSystem
  0000e	e8 00 00 00 00	 call	 ??0cBalanceSystem@@QAE@XZ ; cBalanceSystem::cBalanceSystem
  00013	68 00 00 00 00	 push	 OFFSET ??__FgBalanceSystem@@YAXXZ ; `dynamic atexit destructor for 'gBalanceSystem''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgBalanceSystem@@YAXXZ ENDP				; `dynamic initializer for 'gBalanceSystem''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FgBalanceSystem@@YAXXZ
text$yd	SEGMENT
??__FgBalanceSystem@@YAXXZ PROC				; `dynamic atexit destructor for 'gBalanceSystem'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gBalanceSystem@@3VcBalanceSystem@@A ; gBalanceSystem
  0000e	e8 00 00 00 00	 call	 ??1cBalanceSystem@@UAE@XZ ; cBalanceSystem::~cBalanceSystem
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgBalanceSystem@@YAXXZ ENDP				; `dynamic atexit destructor for 'gBalanceSystem''
text$yd	ENDS
PUBLIC	?gBalanceSystem@@3VcBalanceSystem@@A		; gBalanceSystem
_BSS	SEGMENT
?gBalanceSystem@@3VcBalanceSystem@@A DB 0124H DUP (?)	; gBalanceSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_gBalanceSystem$initializer$ DD FLAT:??__EgBalanceSystem@@YAXXZ
CRT$XCU	ENDS
END
