; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\Gate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CGate@@6B@					; CGate::`vftable'
PUBLIC	??0CGate@@QAE@XZ				; CGate::CGate
PUBLIC	??_R4CGate@@6B@					; CGate::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGate@@@8				; CGate `RTTI Type Descriptor'
PUBLIC	??_R3CGate@@8					; CGate::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGate@@8					; CGate::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGate@@8				; CGate::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECGate@@UAEPAXI@Z:PROC			; CGate::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CGate@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\gate.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CGate@@8 DD FLAT:??_R0?AVCGate@@@8	; CGate::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGate@@8
rdata$r	ENDS
;	COMDAT ??_R2CGate@@8
rdata$r	SEGMENT
??_R2CGate@@8 DD FLAT:??_R1A@?0A@EA@CGate@@8		; CGate::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGate@@8
rdata$r	SEGMENT
??_R3CGate@@8 DD 00H					; CGate::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGate@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGate@@@8
_DATA	SEGMENT
??_R0?AVCGate@@@8 DD FLAT:??_7type_info@@6B@		; CGate `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGate@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CGate@@6B@
rdata$r	SEGMENT
??_R4CGate@@6B@ DD 00H					; CGate::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGate@@@8
	DD	FLAT:??_R3CGate@@8
rdata$r	ENDS
;	COMDAT ??_7CGate@@6B@
CONST	SEGMENT
??_7CGate@@6B@ DD FLAT:??_R4CGate@@6B@			; CGate::`vftable'
	DD	FLAT:??_ECGate@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGate@@QAE@XZ PROC					; CGate::CGate
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGate@@6B@

; 18   : 	return;
; 19   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CGate@@QAE@XZ ENDP					; CGate::CGate
_TEXT	ENDS
PUBLIC	??1CGate@@UAE@XZ				; CGate::~CGate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCGate@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGate@@UAEPAXI@Z PROC				; CGate::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CGate@@UAE@XZ	; CGate::~CGate
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCGate@@UAEPAXI@Z ENDP				; CGate::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CGate@@UAE@XZ PROC					; CGate::~CGate
; _this$ = ecx

; 22   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGate@@6B@

; 23   : 	return;
; 24   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CGate@@UAE@XZ ENDP					; CGate::~CGate
_TEXT	ENDS
PUBLIC	?Init@CGate@@QAEXXZ				; CGate::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$ = -8						; size = 4
_this$ = -4						; size = 4
?Init@CGate@@QAEXXZ PROC				; CGate::Init
; _this$ = ecx

; 27   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 48	 sub	 esp, 72			; 00000048H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	int n;
; 29   : 
; 30   : 	for (n=0;n<MAX_GATES;n++)

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00053	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  00055	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN3@Init:
  0005e	81 7d f8 00 02
	00 00		 cmp	 DWORD PTR _n$[ebp], 512	; 00000200H
  00065	7d 1c		 jge	 SHORT $LN4@Init

; 31   : 	{
; 32   : 		this->m_This[n] = 0xFF;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	03 45 f8	 add	 eax, DWORD PTR _n$[ebp]
  0006d	c6 40 04 ff	 mov	 BYTE PTR [eax+4], 255	; 000000ffH

; 33   : 		this->m_Level[n]=0;

  00071	33 c0		 xor	 eax, eax
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  00076	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00079	66 89 84 4a 04
	14 00 00	 mov	 WORD PTR [edx+ecx*2+5124], ax

; 34   : 	}

  00081	eb d2		 jmp	 SHORT $LN2@Init
$LN4@Init:

; 35   : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?Init@CGate@@QAEXXZ ENDP				; CGate::Init
_TEXT	ENDS
PUBLIC	??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load?5@ ; `string'
PUBLIC	??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5error@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CGate@@QAEXPAD@Z				; CGate::Load
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load?5@
CONST	SEGMENT
??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load?5@ DB '[%'
	DB	's] Gate information data load complete.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5error@
CONST	SEGMENT
??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5error@ DB '[%s'
	DB	'] gate information load error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv241 = -88						; size = 4
tv230 = -88						; size = 4
tv220 = -88						; size = 4
tv210 = -88						; size = 4
tv200 = -88						; size = 4
tv190 = -88						; size = 4
tv180 = -88						; size = 4
tv170 = -88						; size = 4
tv239 = -84						; size = 4
tv228 = -84						; size = 4
tv218 = -84						; size = 4
tv208 = -84						; size = 4
tv198 = -84						; size = 4
tv188 = -84						; size = 4
tv178 = -84						; size = 4
tv168 = -84						; size = 4
tv236 = -78						; size = 2
tv225 = -78						; size = 2
tv215 = -78						; size = 2
tv205 = -78						; size = 2
tv195 = -78						; size = 2
tv185 = -78						; size = 2
tv175 = -78						; size = 2
tv165 = -78						; size = 2
_number$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Load@CGate@@QAEXPAD@Z PROC				; CGate::Load
; _this$ = ecx

; 38   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 58	 sub	 esp, 88			; 00000058H
  00096	53		 push	 ebx
  00097	56		 push	 esi
  00098	57		 push	 edi
  00099	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 	int Token;
; 40   : 	int number;
; 41   : 	
; 42   : 	this->Init();

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?Init@CGate@@QAEXXZ	; CGate::Init

; 43   : 
; 44   : 	SMDFile=fopen(filename, "r");

  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000a9	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 _fopen
  000b2	83 c4 08	 add	 esp, 8
  000b5	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 45   : 	
; 46   : 	if (SMDFile==0)

  000ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  000c1	75 17		 jne	 SHORT $LN6@Load

; 47   : 	{
; 48   : 		LogAdd("[%s] gate information load error", filename);

  000c3	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000c6	50		 push	 eax
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5error@
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000d2	83 c4 08	 add	 esp, 8

; 49   : 		return;

  000d5	e9 3a 02 00 00	 jmp	 $LN7@Load
$LN6@Load:

; 50   : 	}
; 51   : 
; 52   : 	while ( true )

  000da	b8 01 00 00 00	 mov	 eax, 1
  000df	85 c0		 test	 eax, eax
  000e1	0f 84 0d 02 00
	00		 je	 $LN4@Load

; 53   : 	{
; 54   : 		Token = GetToken();

  000e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000ec	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 55   : 
; 56   : 		if ( Token == 2 )

  000ef	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  000f3	75 0a		 jne	 SHORT $LN3@Load

; 57   : 		{
; 58   : 			break;

  000f5	e9 fa 01 00 00	 jmp	 $LN4@Load

; 59   : 		}
; 60   : 		else

  000fa	e9 f0 01 00 00	 jmp	 $LN1@Load
$LN3@Load:

; 61   : 		{
; 62   : 			if ( Token == 1 )

  000ff	83 7d f8 01	 cmp	 DWORD PTR _Token$[ebp], 1
  00103	0f 85 e6 01 00
	00		 jne	 $LN1@Load

; 63   : 			{
; 64   : 
; 65   : 				number=(int)TokenNumber;

  00109	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0010f	e8 00 00 00 00	 call	 __ftol2_sse
  00114	89 45 f4	 mov	 DWORD PTR _number$[ebp], eax

; 66   : 				this->m_This[number]=number;

  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	03 45 f4	 add	 eax, DWORD PTR _number$[ebp]
  0011d	8a 4d f4	 mov	 cl, BYTE PTR _number$[ebp]
  00120	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 67   : 
; 68   : 				Token=GetToken();

  00123	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00128	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 69   : 				this->m_Flag[number]=(BYTE)TokenNumber;

  0012b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00131	d9 7d b2	 fnstcw	 WORD PTR tv165[ebp]
  00134	0f b7 45 b2	 movzx	 eax, WORD PTR tv165[ebp]
  00138	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0013d	89 45 ac	 mov	 DWORD PTR tv168[ebp], eax
  00140	d9 6d ac	 fldcw	 WORD PTR tv168[ebp]
  00143	db 5d a8	 fistp	 DWORD PTR tv170[ebp]
  00146	d9 6d b2	 fldcw	 WORD PTR tv165[ebp]
  00149	8a 45 a8	 mov	 al, BYTE PTR tv170[ebp]
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  00152	88 81 04 02 00
	00		 mov	 BYTE PTR [ecx+516], al

; 70   : 
; 71   : 				Token=GetToken();

  00158	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0015d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 72   : 				this->m_MapNumber[number]=(BYTE)TokenNumber;

  00160	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00166	d9 7d b2	 fnstcw	 WORD PTR tv175[ebp]
  00169	0f b7 45 b2	 movzx	 eax, WORD PTR tv175[ebp]
  0016d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00172	89 45 ac	 mov	 DWORD PTR tv178[ebp], eax
  00175	d9 6d ac	 fldcw	 WORD PTR tv178[ebp]
  00178	db 5d a8	 fistp	 DWORD PTR tv180[ebp]
  0017b	d9 6d b2	 fldcw	 WORD PTR tv175[ebp]
  0017e	8a 45 a8	 mov	 al, BYTE PTR tv180[ebp]
  00181	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00184	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  00187	88 81 04 04 00
	00		 mov	 BYTE PTR [ecx+1028], al

; 73   : 
; 74   : 				Token=GetToken();

  0018d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00192	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 75   : 				this->m_Sx[number]=(BYTE)TokenNumber;

  00195	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0019b	d9 7d b2	 fnstcw	 WORD PTR tv185[ebp]
  0019e	0f b7 45 b2	 movzx	 eax, WORD PTR tv185[ebp]
  001a2	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001a7	89 45 ac	 mov	 DWORD PTR tv188[ebp], eax
  001aa	d9 6d ac	 fldcw	 WORD PTR tv188[ebp]
  001ad	db 5d a8	 fistp	 DWORD PTR tv190[ebp]
  001b0	d9 6d b2	 fldcw	 WORD PTR tv185[ebp]
  001b3	8a 45 a8	 mov	 al, BYTE PTR tv190[ebp]
  001b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b9	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  001bc	88 81 04 06 00
	00		 mov	 BYTE PTR [ecx+1540], al

; 76   : 
; 77   : 				Token=GetToken();

  001c2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001c7	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 78   : 				this->m_Sy[number]=(BYTE)TokenNumber;

  001ca	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001d0	d9 7d b2	 fnstcw	 WORD PTR tv195[ebp]
  001d3	0f b7 45 b2	 movzx	 eax, WORD PTR tv195[ebp]
  001d7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001dc	89 45 ac	 mov	 DWORD PTR tv198[ebp], eax
  001df	d9 6d ac	 fldcw	 WORD PTR tv198[ebp]
  001e2	db 5d a8	 fistp	 DWORD PTR tv200[ebp]
  001e5	d9 6d b2	 fldcw	 WORD PTR tv195[ebp]
  001e8	8a 45 a8	 mov	 al, BYTE PTR tv200[ebp]
  001eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ee	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  001f1	88 81 04 08 00
	00		 mov	 BYTE PTR [ecx+2052], al

; 79   : 
; 80   : 				Token=GetToken();

  001f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001fc	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 81   : 				this->m_Ex[number]=(BYTE)TokenNumber;

  001ff	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00205	d9 7d b2	 fnstcw	 WORD PTR tv205[ebp]
  00208	0f b7 45 b2	 movzx	 eax, WORD PTR tv205[ebp]
  0020c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00211	89 45 ac	 mov	 DWORD PTR tv208[ebp], eax
  00214	d9 6d ac	 fldcw	 WORD PTR tv208[ebp]
  00217	db 5d a8	 fistp	 DWORD PTR tv210[ebp]
  0021a	d9 6d b2	 fldcw	 WORD PTR tv205[ebp]
  0021d	8a 45 a8	 mov	 al, BYTE PTR tv210[ebp]
  00220	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00223	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  00226	88 81 04 0a 00
	00		 mov	 BYTE PTR [ecx+2564], al

; 82   : 
; 83   : 				Token=GetToken();

  0022c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00231	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 84   : 				this->m_Ey[number]=(BYTE)TokenNumber;

  00234	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023a	d9 7d b2	 fnstcw	 WORD PTR tv215[ebp]
  0023d	0f b7 45 b2	 movzx	 eax, WORD PTR tv215[ebp]
  00241	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00246	89 45 ac	 mov	 DWORD PTR tv218[ebp], eax
  00249	d9 6d ac	 fldcw	 WORD PTR tv218[ebp]
  0024c	db 5d a8	 fistp	 DWORD PTR tv220[ebp]
  0024f	d9 6d b2	 fldcw	 WORD PTR tv215[ebp]
  00252	8a 45 a8	 mov	 al, BYTE PTR tv220[ebp]
  00255	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00258	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  0025b	88 81 04 0c 00
	00		 mov	 BYTE PTR [ecx+3076], al

; 85   : 
; 86   : 				Token=GetToken();

  00261	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00266	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 87   : 				this->m_TargetGate[number]=(WORD)TokenNumber;

  00269	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026f	d9 7d b2	 fnstcw	 WORD PTR tv225[ebp]
  00272	0f b7 45 b2	 movzx	 eax, WORD PTR tv225[ebp]
  00276	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0027b	89 45 ac	 mov	 DWORD PTR tv228[ebp], eax
  0027e	d9 6d ac	 fldcw	 WORD PTR tv228[ebp]
  00281	db 5d a8	 fistp	 DWORD PTR tv230[ebp]
  00284	d9 6d b2	 fldcw	 WORD PTR tv225[ebp]
  00287	66 8b 45 a8	 mov	 ax, WORD PTR tv230[ebp]
  0028b	8b 4d f4	 mov	 ecx, DWORD PTR _number$[ebp]
  0028e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00291	66 89 84 4a 04
	0e 00 00	 mov	 WORD PTR [edx+ecx*2+3588], ax

; 88   : 
; 89   : 				Token=GetToken();

  00299	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0029e	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 90   : 				this->m_Dir[number]=(BYTE)TokenNumber;

  002a1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002a7	d9 7d b2	 fnstcw	 WORD PTR tv236[ebp]
  002aa	0f b7 45 b2	 movzx	 eax, WORD PTR tv236[ebp]
  002ae	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002b3	89 45 ac	 mov	 DWORD PTR tv239[ebp], eax
  002b6	d9 6d ac	 fldcw	 WORD PTR tv239[ebp]
  002b9	db 5d a8	 fistp	 DWORD PTR tv241[ebp]
  002bc	d9 6d b2	 fldcw	 WORD PTR tv236[ebp]
  002bf	8a 45 a8	 mov	 al, BYTE PTR tv241[ebp]
  002c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c5	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  002c8	88 81 04 12 00
	00		 mov	 BYTE PTR [ecx+4612], al

; 91   : 
; 92   : 				Token=GetToken();

  002ce	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002d3	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 93   : 				this->m_Level[number]=(short)TokenNumber;

  002d6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002dc	e8 00 00 00 00	 call	 __ftol2_sse
  002e1	8b 4d f4	 mov	 ecx, DWORD PTR _number$[ebp]
  002e4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002e7	66 89 84 4a 04
	14 00 00	 mov	 WORD PTR [edx+ecx*2+5124], ax
$LN1@Load:

; 94   : 			}
; 95   : 		}
; 96   : 	}

  002ef	e9 e6 fd ff ff	 jmp	 $LN6@Load
$LN4@Load:

; 97   : 
; 98   : 	fclose(SMDFile);

  002f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  002f9	50		 push	 eax
  002fa	e8 00 00 00 00	 call	 _fclose
  002ff	83 c4 04	 add	 esp, 4

; 99   : 	LogAdd("[%s] Gate information data load complete.", filename);

  00302	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00305	50		 push	 eax
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load?5@
  0030b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00311	83 c4 08	 add	 esp, 8
$LN7@Load:

; 100  : }

  00314	5f		 pop	 edi
  00315	5e		 pop	 esi
  00316	5b		 pop	 ebx
  00317	8b e5		 mov	 esp, ebp
  00319	5d		 pop	 ebp
  0031a	c2 04 00	 ret	 4
?Load@CGate@@QAEXPAD@Z ENDP				; CGate::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00320	55		 push	 ebp
  00321	8b ec		 mov	 ebp, esp
  00323	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00329	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0032e	33 c5		 xor	 eax, ebp
  00330	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00333	53		 push	 ebx
  00334	56		 push	 esi
  00335	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00336	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 _fgetc
  00348	83 c4 04	 add	 esp, 4
  0034b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0034e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00352	83 f9 ff	 cmp	 ecx, -1
  00355	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00357	b8 02 00 00 00	 mov	 eax, 2
  0035c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00361	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00363	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00367	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0036a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 _fgetc
  00377	83 c4 04	 add	 esp, 4
  0037a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0037d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00381	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00384	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00386	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0038a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0038d	74 1c		 je	 SHORT $LN23@GetToken
  0038f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00393	83 f8 ff	 cmp	 eax, -1
  00396	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00398	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 _fgetc
  003a3	83 c4 04	 add	 esp, 4
  003a6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  003a9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  003ab	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003af	83 f8 ff	 cmp	 eax, -1
  003b2	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  003b4	b8 02 00 00 00	 mov	 eax, 2
  003b9	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  003be	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003c2	50		 push	 eax
  003c3	e8 00 00 00 00	 call	 _isspace
  003c8	83 c4 04	 add	 esp, 4
  003cb	85 c0		 test	 eax, eax
  003cd	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  003d3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003d7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  003dd	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  003e3	83 e9 22	 sub	 ecx, 34			; 00000022H
  003e6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  003ec	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  003f3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  003f9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  003ff	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00406	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0040d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00417	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0041c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00421	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00426	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00430	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00435	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0043a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0043f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00449	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0044e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00453	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00458	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00462	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00467	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0046c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00471	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0047b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00480	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00485	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0048a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0048f	50		 push	 eax
  00490	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00494	51		 push	 ecx
  00495	e8 00 00 00 00	 call	 _ungetc
  0049a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0049d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  004a0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  004a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004a8	50		 push	 eax
  004a9	e8 00 00 00 00	 call	 _getc
  004ae	83 c4 04	 add	 esp, 4
  004b1	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  004b4	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  004b8	83 f9 ff	 cmp	 ecx, -1
  004bb	74 36		 je	 SHORT $LN12@GetToken
  004bd	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004c1	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  004c4	74 1a		 je	 SHORT $LN11@GetToken
  004c6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004ca	50		 push	 eax
  004cb	e8 00 00 00 00	 call	 _isdigit
  004d0	83 c4 04	 add	 esp, 4
  004d3	85 c0		 test	 eax, eax
  004d5	75 09		 jne	 SHORT $LN11@GetToken
  004d7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004db	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  004de	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  004e0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004e3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  004e6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  004e8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004eb	83 c0 01	 add	 eax, 1
  004ee	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  004f1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  004f3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004f6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  004f9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  004fc	50		 push	 eax
  004fd	e8 00 00 00 00	 call	 _atof
  00502	83 c4 04	 add	 esp, 4
  00505	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0050b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00515	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0051a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0051f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00524	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0052b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00530	50		 push	 eax
  00531	e8 00 00 00 00	 call	 _getc
  00536	83 c4 04	 add	 esp, 4
  00539	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0053c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00540	83 f9 ff	 cmp	 ecx, -1
  00543	74 1c		 je	 SHORT $LN8@GetToken
  00545	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00549	83 f8 22	 cmp	 eax, 34			; 00000022H
  0054c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0054e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00551	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00554	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00556	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00559	83 c0 01	 add	 eax, 1
  0055c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0055f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00561	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00565	83 f8 22	 cmp	 eax, 34			; 00000022H
  00568	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0056a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0056f	50		 push	 eax
  00570	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00574	51		 push	 ecx
  00575	e8 00 00 00 00	 call	 _ungetc
  0057a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0057d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00580	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00583	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0058d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00592	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00597	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0059c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005a0	50		 push	 eax
  005a1	e8 00 00 00 00	 call	 _isalpha
  005a6	83 c4 04	 add	 esp, 4
  005a9	85 c0		 test	 eax, eax
  005ab	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  005b1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  005b8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005bb	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  005be	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  005c0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005c3	83 c0 01	 add	 eax, 1
  005c6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  005c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005ce	50		 push	 eax
  005cf	e8 00 00 00 00	 call	 _getc
  005d4	83 c4 04	 add	 esp, 4
  005d7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  005da	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005de	83 f9 ff	 cmp	 ecx, -1
  005e1	74 36		 je	 SHORT $LN3@GetToken
  005e3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005e7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  005ea	74 1a		 je	 SHORT $LN2@GetToken
  005ec	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005f0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  005f3	74 11		 je	 SHORT $LN2@GetToken
  005f5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005f9	50		 push	 eax
  005fa	e8 00 00 00 00	 call	 _isalnum
  005ff	83 c4 04	 add	 esp, 4
  00602	85 c0		 test	 eax, eax
  00604	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00606	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00609	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0060c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0060e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00611	83 c0 01	 add	 eax, 1
  00614	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00617	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00619	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0061e	50		 push	 eax
  0061f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00623	51		 push	 ecx
  00624	e8 00 00 00 00	 call	 _ungetc
  00629	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0062c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0062f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00632	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0063c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00641	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00643	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00645	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0064f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00654	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00656	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00658	5f		 pop	 edi
  00659	5e		 pop	 esi
  0065a	5b		 pop	 ebx
  0065b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0065e	33 cd		 xor	 ecx, ebp
  00660	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00665	8b e5		 mov	 esp, ebp
  00667	5d		 pop	 ebp
  00668	c3		 ret	 0
  00669	8d 49 00	 npad	 3
$LN35@GetToken:
  0066c	00 00 00 00	 DD	 $LN10@GetToken
  00670	00 00 00 00	 DD	 $LN19@GetToken
  00674	00 00 00 00	 DD	 $LN17@GetToken
  00678	00 00 00 00	 DD	 $LN14@GetToken
  0067c	00 00 00 00	 DD	 $LN18@GetToken
  00680	00 00 00 00	 DD	 $LN16@GetToken
  00684	00 00 00 00	 DD	 $LN15@GetToken
  00688	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0068c	00		 DB	 0
  0068d	01		 DB	 1
  0068e	07		 DB	 7
  0068f	07		 DB	 7
  00690	07		 DB	 7
  00691	07		 DB	 7
  00692	07		 DB	 7
  00693	07		 DB	 7
  00694	07		 DB	 7
  00695	07		 DB	 7
  00696	02		 DB	 2
  00697	03		 DB	 3
  00698	03		 DB	 3
  00699	07		 DB	 7
  0069a	03		 DB	 3
  0069b	03		 DB	 3
  0069c	03		 DB	 3
  0069d	03		 DB	 3
  0069e	03		 DB	 3
  0069f	03		 DB	 3
  006a0	03		 DB	 3
  006a1	03		 DB	 3
  006a2	03		 DB	 3
  006a3	03		 DB	 3
  006a4	07		 DB	 7
  006a5	04		 DB	 4
  006a6	07		 DB	 7
  006a7	07		 DB	 7
  006a8	07		 DB	 7
  006a9	07		 DB	 7
  006aa	07		 DB	 7
  006ab	07		 DB	 7
  006ac	07		 DB	 7
  006ad	07		 DB	 7
  006ae	07		 DB	 7
  006af	07		 DB	 7
  006b0	07		 DB	 7
  006b1	07		 DB	 7
  006b2	07		 DB	 7
  006b3	07		 DB	 7
  006b4	07		 DB	 7
  006b5	07		 DB	 7
  006b6	07		 DB	 7
  006b7	07		 DB	 7
  006b8	07		 DB	 7
  006b9	07		 DB	 7
  006ba	07		 DB	 7
  006bb	07		 DB	 7
  006bc	07		 DB	 7
  006bd	07		 DB	 7
  006be	07		 DB	 7
  006bf	07		 DB	 7
  006c0	07		 DB	 7
  006c1	07		 DB	 7
  006c2	07		 DB	 7
  006c3	07		 DB	 7
  006c4	07		 DB	 7
  006c5	07		 DB	 7
  006c6	07		 DB	 7
  006c7	07		 DB	 7
  006c8	07		 DB	 7
  006c9	07		 DB	 7
  006ca	07		 DB	 7
  006cb	07		 DB	 7
  006cc	07		 DB	 7
  006cd	07		 DB	 7
  006ce	07		 DB	 7
  006cf	07		 DB	 7
  006d0	07		 DB	 7
  006d1	07		 DB	 7
  006d2	07		 DB	 7
  006d3	07		 DB	 7
  006d4	07		 DB	 7
  006d5	07		 DB	 7
  006d6	07		 DB	 7
  006d7	07		 DB	 7
  006d8	07		 DB	 7
  006d9	07		 DB	 7
  006da	07		 DB	 7
  006db	07		 DB	 7
  006dc	07		 DB	 7
  006dd	07		 DB	 7
  006de	07		 DB	 7
  006df	07		 DB	 7
  006e0	07		 DB	 7
  006e1	07		 DB	 7
  006e2	07		 DB	 7
  006e3	07		 DB	 7
  006e4	07		 DB	 7
  006e5	05		 DB	 5
  006e6	07		 DB	 7
  006e7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0CF@IKKILBOJ@Gate?5information?5data?5load?5compl@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@CGate@@QAEXPADH@Z				; CGate::Load
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?GetNumber@CWzMemScript@@QAEHXZ:PROC		; CWzMemScript::GetNumber
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_C@_0CF@IKKILBOJ@Gate?5information?5data?5load?5compl@
; File d:\projects\exteam6.3\source\gameserver\gameserver\gate.cpp
CONST	SEGMENT
??_C@_0CF@IKKILBOJ@Gate?5information?5data?5load?5compl@ DB 'Gate informa'
	DB	'tion data load complete.', 00H		; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?Load@CGate@@QAEXPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CGate@@QAEXPADH@Z$0
__ehfuncinfo$?Load@CGate@@QAEXPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CGate@@QAEXPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_number$ = -160						; size = 4
_Token$ = -156						; size = 4
_WzMemScript$ = -152					; size = 132
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?Load@CGate@@QAEXPADH@Z PROC				; CGate::Load
; _this$ = ecx

; 103  : {

  006f0	55		 push	 ebp
  006f1	8b ec		 mov	 ebp, esp
  006f3	6a ff		 push	 -1
  006f5	68 00 00 00 00	 push	 __ehhandler$?Load@CGate@@QAEXPADH@Z
  006fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00700	50		 push	 eax
  00701	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00707	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0070c	33 c5		 xor	 eax, ebp
  0070e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00711	53		 push	 ebx
  00712	56		 push	 esi
  00713	57		 push	 edi
  00714	50		 push	 eax
  00715	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00718	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0071e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 104  : 	CWzMemScript WzMemScript;

  00721	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00727	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript
  0072c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 105  : 	int Token;
; 106  : 	int number;
; 107  : 	
; 108  : 	WzMemScript.SetBuffer(Buffer, iSize);

  00733	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00736	50		 push	 eax
  00737	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  0073a	51		 push	 ecx
  0073b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00741	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 109  : 	this->Init();

  00746	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00749	e8 00 00 00 00	 call	 ?Init@CGate@@QAEXXZ	; CGate::Init
$LN4@Load@2:

; 110  : 
; 111  : 	while ( true )

  0074e	b8 01 00 00 00	 mov	 eax, 1
  00753	85 c0		 test	 eax, eax
  00755	0f 84 db 01 00
	00		 je	 $LN3@Load@2

; 112  : 	{
; 113  : 		Token=WzMemScript.GetToken();

  0075b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00761	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00766	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 114  : 		if ( Token == 2 )

  0076c	83 bd 64 ff ff
	ff 02		 cmp	 DWORD PTR _Token$[ebp], 2
  00773	75 05		 jne	 SHORT $LN2@Load@2

; 115  : 		{
; 116  : 			break;

  00775	e9 bc 01 00 00	 jmp	 $LN3@Load@2
$LN2@Load@2:

; 117  : 		}
; 118  : 
; 119  : 		if ( Token == 1 )

  0077a	83 bd 64 ff ff
	ff 01		 cmp	 DWORD PTR _Token$[ebp], 1
  00781	0f 85 aa 01 00
	00		 jne	 $LN1@Load@2

; 120  : 		{
; 121  : 
; 122  : 			number=WzMemScript.GetNumber();

  00787	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0078d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00792	89 85 60 ff ff
	ff		 mov	 DWORD PTR _number$[ebp], eax

; 123  : 			this->m_This[number]=number;

  00798	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0079b	03 85 60 ff ff
	ff		 add	 eax, DWORD PTR _number$[ebp]
  007a1	8a 8d 60 ff ff
	ff		 mov	 cl, BYTE PTR _number$[ebp]
  007a7	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 124  : 
; 125  : 			Token=WzMemScript.GetToken();

  007aa	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  007b0	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  007b5	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 126  : 			this->m_Flag[number]=WzMemScript.GetNumber();

  007bb	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  007c1	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  007c6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  007c9	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _number$[ebp]
  007cf	88 81 04 02 00
	00		 mov	 BYTE PTR [ecx+516], al

; 127  : 
; 128  : 			Token=WzMemScript.GetToken();

  007d5	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  007db	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  007e0	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 129  : 			this->m_MapNumber[number]=WzMemScript.GetNumber();

  007e6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  007ec	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  007f1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  007f4	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _number$[ebp]
  007fa	88 81 04 04 00
	00		 mov	 BYTE PTR [ecx+1028], al

; 130  : 
; 131  : 			Token=WzMemScript.GetToken();

  00800	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00806	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0080b	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 132  : 			this->m_Sx[number]=WzMemScript.GetNumber();

  00811	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00817	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0081c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0081f	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _number$[ebp]
  00825	88 81 04 06 00
	00		 mov	 BYTE PTR [ecx+1540], al

; 133  : 
; 134  : 			Token=WzMemScript.GetToken();

  0082b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00831	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00836	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 135  : 			this->m_Sy[number]=WzMemScript.GetNumber();

  0083c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00842	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00847	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0084a	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _number$[ebp]
  00850	88 81 04 08 00
	00		 mov	 BYTE PTR [ecx+2052], al

; 136  : 
; 137  : 			Token=WzMemScript.GetToken();

  00856	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0085c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00861	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 138  : 			this->m_Ex[number]=WzMemScript.GetNumber();

  00867	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0086d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00872	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00875	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _number$[ebp]
  0087b	88 81 04 0a 00
	00		 mov	 BYTE PTR [ecx+2564], al

; 139  : 
; 140  : 			Token=WzMemScript.GetToken();

  00881	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00887	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0088c	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 141  : 			this->m_Ey[number]=WzMemScript.GetNumber();

  00892	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00898	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0089d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008a0	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _number$[ebp]
  008a6	88 81 04 0c 00
	00		 mov	 BYTE PTR [ecx+3076], al

; 142  : 
; 143  : 			Token=WzMemScript.GetToken();

  008ac	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  008b2	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  008b7	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 144  : 			this->m_TargetGate[number]=WzMemScript.GetNumber();

  008bd	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  008c3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  008c8	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _number$[ebp]
  008ce	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  008d1	66 89 84 4a 04
	0e 00 00	 mov	 WORD PTR [edx+ecx*2+3588], ax

; 145  : 
; 146  : 			Token=WzMemScript.GetToken();

  008d9	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  008df	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  008e4	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 147  : 			this->m_Dir[number]=WzMemScript.GetNumber();

  008ea	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  008f0	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  008f5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008f8	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _number$[ebp]
  008fe	88 81 04 12 00
	00		 mov	 BYTE PTR [ecx+4612], al

; 148  : 
; 149  : 			Token=WzMemScript.GetToken();

  00904	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0090a	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0090f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 150  : 			this->m_Level[number]=WzMemScript.GetNumber();

  00915	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0091b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00920	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _number$[ebp]
  00926	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00929	66 89 84 4a 04
	14 00 00	 mov	 WORD PTR [edx+ecx*2+5124], ax
$LN1@Load@2:

; 151  : 		}
; 152  : 	}

  00931	e9 18 fe ff ff	 jmp	 $LN4@Load@2
$LN3@Load@2:

; 153  : 
; 154  : 	LogAdd("Gate information data load complete.");

  00936	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IKKILBOJ@Gate?5information?5data?5load?5compl@
  0093b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00941	83 c4 04	 add	 esp, 4

; 155  : }

  00944	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0094b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00951	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  00956	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00959	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00960	59		 pop	 ecx
  00961	5f		 pop	 edi
  00962	5e		 pop	 esi
  00963	5b		 pop	 ebx
  00964	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00967	33 cd		 xor	 ecx, ebp
  00969	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0096e	8b e5		 mov	 esp, ebp
  00970	5d		 pop	 ebp
  00971	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Load@CGate@@QAEXPADH@Z$0:
  00000	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?Load@CGate@@QAEXPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CGate@@QAEXPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CGate@@QAEXPADH@Z ENDP				; CGate::Load
PUBLIC	??_C@_0DM@EPDEGOPC@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??IsGate@CGate@@QAEHH@Z@4JA	; `CGate::IsGate'::`2'::__LINE__Var
PUBLIC	?IsGate@CGate@@QAEHH@Z				; CGate::IsGate
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_0DM@EPDEGOPC@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0DM@EPDEGOPC@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\gate.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??IsGate@CGate@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??IsGate@CGate@@QAEHH@Z@4JA DD 09fH	; `CGate::IsGate'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_GateNumber$ = 8					; size = 4
?IsGate@CGate@@QAEHH@Z PROC				; CGate::IsGate
; _this$ = ecx

; 159  : {

  00980	55		 push	 ebp
  00981	8b ec		 mov	 ebp, esp
  00983	83 ec 44	 sub	 esp, 68			; 00000044H
  00986	53		 push	 ebx
  00987	56		 push	 esi
  00988	57		 push	 edi
  00989	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 160  : 	if ( (GateNumber < 0) || (GateNumber > MAX_GATES-1) )

  0098c	83 7d 08 00	 cmp	 DWORD PTR _GateNumber$[ebp], 0
  00990	7c 09		 jl	 SHORT $LN2@IsGate
  00992	81 7d 08 ff 01
	00 00		 cmp	 DWORD PTR _GateNumber$[ebp], 511 ; 000001ffH
  00999	7e 2f		 jle	 SHORT $LN3@IsGate
$LN2@IsGate:

; 161  : 	{
; 162  : 		LogAdd(lMsg.Get(MSGGET(1, 195)), GateNumber, __FILE__, __LINE__);

  0099b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??IsGate@CGate@@QAEHH@Z@4JA
  009a0	83 c0 03	 add	 eax, 3
  009a3	50		 push	 eax
  009a4	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@EPDEGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  009a9	8b 4d 08	 mov	 ecx, DWORD PTR _GateNumber$[ebp]
  009ac	51		 push	 ecx
  009ad	68 c3 01 00 00	 push	 451			; 000001c3H
  009b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  009b7	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  009bc	50		 push	 eax
  009bd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  009c3	83 c4 10	 add	 esp, 16			; 00000010H

; 163  : 		return 0;

  009c6	33 c0		 xor	 eax, eax
  009c8	eb 42		 jmp	 SHORT $LN4@IsGate
$LN3@IsGate:

; 164  : 	}
; 165  : 
; 166  : 	if ( this->m_This[GateNumber] == (BYTE)-1 )

  009ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009cd	03 45 08	 add	 eax, DWORD PTR _GateNumber$[ebp]
  009d0	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  009d4	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  009da	75 2b		 jne	 SHORT $LN1@IsGate

; 167  : 	{
; 168  : 		LogAdd( lMsg.Get(MSGGET(1, 196)), __FILE__, __LINE__);

  009dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??IsGate@CGate@@QAEHH@Z@4JA
  009e1	83 c0 09	 add	 eax, 9
  009e4	50		 push	 eax
  009e5	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@EPDEGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  009ea	68 c4 01 00 00	 push	 452			; 000001c4H
  009ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  009f4	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  009f9	50		 push	 eax
  009fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00a00	83 c4 0c	 add	 esp, 12			; 0000000cH

; 169  : 		return 0;

  00a03	33 c0		 xor	 eax, eax
  00a05	eb 05		 jmp	 SHORT $LN4@IsGate
$LN1@IsGate:

; 170  : 	}
; 171  : 
; 172  : 	return 1;

  00a07	b8 01 00 00 00	 mov	 eax, 1
$LN4@IsGate:

; 173  : }

  00a0c	5f		 pop	 edi
  00a0d	5e		 pop	 esi
  00a0e	5b		 pop	 ebx
  00a0f	8b e5		 mov	 esp, ebp
  00a11	5d		 pop	 ebp
  00a12	c2 04 00	 ret	 4
?IsGate@CGate@@QAEHH@Z ENDP				; CGate::IsGate
_TEXT	ENDS
PUBLIC	?GetGate@CGate@@QAEHHAAF0AAE10@Z		; CGate::GetGate
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	_rand:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_attr$ = -21						; size = 1
_loopcount$ = -20					; size = 4
_ty$ = -16						; size = 4
_tx$ = -12						; size = 4
_gt$ = -8						; size = 4
_this$ = -4						; size = 4
_mgt$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_MapNumber$ = 20					; size = 4
_dir$ = 24						; size = 4
_Level$ = 28						; size = 4
?GetGate@CGate@@QAEHHAAF0AAE10@Z PROC			; CGate::GetGate
; _this$ = ecx

; 178  : {

  00a20	55		 push	 ebp
  00a21	8b ec		 mov	 ebp, esp
  00a23	83 ec 58	 sub	 esp, 88			; 00000058H
  00a26	53		 push	 ebx
  00a27	56		 push	 esi
  00a28	57		 push	 edi
  00a29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 179  : 	int gt;
; 180  : 	int tx;
; 181  : 	int ty;
; 182  : 	int loopcount;
; 183  : 	BYTE attr;
; 184  : 	
; 185  : 	if (this->IsGate(mgt) == 0)

  00a2c	8b 45 08	 mov	 eax, DWORD PTR _mgt$[ebp]
  00a2f	50		 push	 eax
  00a30	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a33	e8 00 00 00 00	 call	 ?IsGate@CGate@@QAEHH@Z	; CGate::IsGate
  00a38	85 c0		 test	 eax, eax
  00a3a	75 08		 jne	 SHORT $LN9@GetGate

; 186  : 	{
; 187  : 		return -1;

  00a3c	83 c8 ff	 or	 eax, -1
  00a3f	e9 99 01 00 00	 jmp	 $LN10@GetGate
$LN9@GetGate:

; 188  : 	}
; 189  : 
; 190  : 	gt=this->m_TargetGate[mgt];

  00a44	8b 45 08	 mov	 eax, DWORD PTR _mgt$[ebp]
  00a47	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a4a	0f b7 94 41 04
	0e 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+3588]
  00a52	89 55 f8	 mov	 DWORD PTR _gt$[ebp], edx

; 191  : 	if ( gt == 0 )

  00a55	83 7d f8 00	 cmp	 DWORD PTR _gt$[ebp], 0
  00a59	75 06		 jne	 SHORT $LN8@GetGate

; 192  : 	{
; 193  : 		gt=mgt;

  00a5b	8b 45 08	 mov	 eax, DWORD PTR _mgt$[ebp]
  00a5e	89 45 f8	 mov	 DWORD PTR _gt$[ebp], eax
$LN8@GetGate:

; 194  : 	}
; 195  : 	
; 196  : 	loopcount=10;

  00a61	c7 45 ec 0a 00
	00 00		 mov	 DWORD PTR _loopcount$[ebp], 10 ; 0000000aH
$LN7@GetGate:

; 197  : 	while ( loopcount-- != 0 )

  00a68	8b 45 ec	 mov	 eax, DWORD PTR _loopcount$[ebp]
  00a6b	8b 4d ec	 mov	 ecx, DWORD PTR _loopcount$[ebp]
  00a6e	83 e9 01	 sub	 ecx, 1
  00a71	89 4d ec	 mov	 DWORD PTR _loopcount$[ebp], ecx
  00a74	85 c0		 test	 eax, eax
  00a76	0f 84 14 01 00
	00		 je	 $LN6@GetGate

; 198  : 	{
; 199  : 		if ( (this->m_Ex[gt] - this->m_Sx[gt]) > 0 )

  00a7c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a7f	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00a82	0f b6 88 04 0a
	00 00		 movzx	 ecx, BYTE PTR [eax+2564]
  00a89	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a8c	03 55 f8	 add	 edx, DWORD PTR _gt$[ebp]
  00a8f	0f b6 82 04 06
	00 00		 movzx	 eax, BYTE PTR [edx+1540]
  00a96	2b c8		 sub	 ecx, eax
  00a98	85 c9		 test	 ecx, ecx
  00a9a	7e 38		 jle	 SHORT $LN5@GetGate

; 200  : 		{
; 201  : 			tx = this->m_Sx[gt] + ( rand() % ( this->m_Ex[gt] - this->m_Sx[gt] ) );

  00a9c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a9f	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00aa2	0f b6 b0 04 06
	00 00		 movzx	 esi, BYTE PTR [eax+1540]
  00aa9	e8 00 00 00 00	 call	 _rand
  00aae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ab1	03 4d f8	 add	 ecx, DWORD PTR _gt$[ebp]
  00ab4	0f b6 89 04 0a
	00 00		 movzx	 ecx, BYTE PTR [ecx+2564]
  00abb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00abe	03 55 f8	 add	 edx, DWORD PTR _gt$[ebp]
  00ac1	0f b6 92 04 06
	00 00		 movzx	 edx, BYTE PTR [edx+1540]
  00ac8	2b ca		 sub	 ecx, edx
  00aca	99		 cdq
  00acb	f7 f9		 idiv	 ecx
  00acd	03 f2		 add	 esi, edx
  00acf	89 75 f4	 mov	 DWORD PTR _tx$[ebp], esi

; 202  : 		}
; 203  : 		else

  00ad2	eb 10		 jmp	 SHORT $LN4@GetGate
$LN5@GetGate:

; 204  : 		{
; 205  : 			tx = this->m_Sx[gt];

  00ad4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ad7	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00ada	0f b6 88 04 06
	00 00		 movzx	 ecx, BYTE PTR [eax+1540]
  00ae1	89 4d f4	 mov	 DWORD PTR _tx$[ebp], ecx
$LN4@GetGate:

; 206  : 		}
; 207  : 		if ( (this->m_Ey[gt] - this->m_Sy[gt]) > 0 )

  00ae4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ae7	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00aea	0f b6 88 04 0c
	00 00		 movzx	 ecx, BYTE PTR [eax+3076]
  00af1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00af4	03 55 f8	 add	 edx, DWORD PTR _gt$[ebp]
  00af7	0f b6 82 04 08
	00 00		 movzx	 eax, BYTE PTR [edx+2052]
  00afe	2b c8		 sub	 ecx, eax
  00b00	85 c9		 test	 ecx, ecx
  00b02	7e 38		 jle	 SHORT $LN3@GetGate

; 208  : 		{
; 209  : 			ty = this->m_Sy[gt] + ( rand() % ( this->m_Ey[gt] - this->m_Sy[gt] ) );

  00b04	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b07	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00b0a	0f b6 b0 04 08
	00 00		 movzx	 esi, BYTE PTR [eax+2052]
  00b11	e8 00 00 00 00	 call	 _rand
  00b16	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b19	03 4d f8	 add	 ecx, DWORD PTR _gt$[ebp]
  00b1c	0f b6 89 04 0c
	00 00		 movzx	 ecx, BYTE PTR [ecx+3076]
  00b23	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00b26	03 55 f8	 add	 edx, DWORD PTR _gt$[ebp]
  00b29	0f b6 92 04 08
	00 00		 movzx	 edx, BYTE PTR [edx+2052]
  00b30	2b ca		 sub	 ecx, edx
  00b32	99		 cdq
  00b33	f7 f9		 idiv	 ecx
  00b35	03 f2		 add	 esi, edx
  00b37	89 75 f0	 mov	 DWORD PTR _ty$[ebp], esi

; 210  : 		}
; 211  : 		else

  00b3a	eb 10		 jmp	 SHORT $LN2@GetGate
$LN3@GetGate:

; 212  : 		{
; 213  : 			ty = this->m_Sy[gt];

  00b3c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b3f	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00b42	0f b6 88 04 08
	00 00		 movzx	 ecx, BYTE PTR [eax+2052]
  00b49	89 4d f0	 mov	 DWORD PTR _ty$[ebp], ecx
$LN2@GetGate:

; 214  : 		}
; 215  : 
; 216  : 		attr = MapC[MapNumber].GetAttr( tx, ty);

  00b4c	8b 45 f0	 mov	 eax, DWORD PTR _ty$[ebp]
  00b4f	50		 push	 eax
  00b50	8b 4d f4	 mov	 ecx, DWORD PTR _tx$[ebp]
  00b53	51		 push	 ecx
  00b54	8b 55 14	 mov	 edx, DWORD PTR _MapNumber$[ebp]
  00b57	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00b5a	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00b60	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00b66	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00b6b	88 45 eb	 mov	 BYTE PTR _attr$[ebp], al

; 217  : 
; 218  : 		if ( (attr&4) != 4 && (attr&2) != 2 && (attr&8) != 8 )

  00b6e	0f b6 45 eb	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b72	83 e0 04	 and	 eax, 4
  00b75	75 14		 jne	 SHORT $LN1@GetGate
  00b77	0f b6 45 eb	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b7b	83 e0 02	 and	 eax, 2
  00b7e	75 0b		 jne	 SHORT $LN1@GetGate
  00b80	0f b6 45 eb	 movzx	 eax, BYTE PTR _attr$[ebp]
  00b84	83 e0 08	 and	 eax, 8
  00b87	75 02		 jne	 SHORT $LN1@GetGate

; 219  : 		{
; 220  : 			break;

  00b89	eb 05		 jmp	 SHORT $LN6@GetGate
$LN1@GetGate:

; 221  : 		}
; 222  : 	}

  00b8b	e9 d8 fe ff ff	 jmp	 $LN7@GetGate
$LN6@GetGate:

; 223  : 
; 224  : 	x = tx;

  00b90	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00b93	66 8b 4d f4	 mov	 cx, WORD PTR _tx$[ebp]
  00b97	66 89 08	 mov	 WORD PTR [eax], cx

; 225  : 	y = ty;

  00b9a	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00b9d	66 8b 4d f0	 mov	 cx, WORD PTR _ty$[ebp]
  00ba1	66 89 08	 mov	 WORD PTR [eax], cx

; 226  : 	MapNumber = this->m_MapNumber[gt];

  00ba4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ba7	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00baa	8b 4d 14	 mov	 ecx, DWORD PTR _MapNumber$[ebp]
  00bad	8a 90 04 04 00
	00		 mov	 dl, BYTE PTR [eax+1028]
  00bb3	88 11		 mov	 BYTE PTR [ecx], dl

; 227  : 	dir = this->m_Dir[gt];

  00bb5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00bb8	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00bbb	8b 4d 18	 mov	 ecx, DWORD PTR _dir$[ebp]
  00bbe	8a 90 04 12 00
	00		 mov	 dl, BYTE PTR [eax+4612]
  00bc4	88 11		 mov	 BYTE PTR [ecx], dl

; 228  : 	Level = this->m_Level[gt];

  00bc6	8b 45 1c	 mov	 eax, DWORD PTR _Level$[ebp]
  00bc9	8b 4d f8	 mov	 ecx, DWORD PTR _gt$[ebp]
  00bcc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00bcf	66 8b 8c 4a 04
	14 00 00	 mov	 cx, WORD PTR [edx+ecx*2+5124]
  00bd7	66 89 08	 mov	 WORD PTR [eax], cx

; 229  : 	return gt;

  00bda	8b 45 f8	 mov	 eax, DWORD PTR _gt$[ebp]
$LN10@GetGate:

; 230  : 
; 231  : }

  00bdd	5f		 pop	 edi
  00bde	5e		 pop	 esi
  00bdf	5b		 pop	 ebx
  00be0	8b e5		 mov	 esp, ebp
  00be2	5d		 pop	 ebp
  00be3	c2 18 00	 ret	 24			; 00000018H
?GetGate@CGate@@QAEHHAAF0AAE10@Z ENDP			; CGate::GetGate
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetLevel@CGate@@QAEHH@Z@4JA	; `CGate::GetLevel'::`2'::__LINE__Var
PUBLIC	?GetLevel@CGate@@QAEHH@Z			; CGate::GetLevel
;	COMDAT ?__LINE__Var@?1??GetLevel@CGate@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetLevel@CGate@@QAEHH@Z@4JA DD 0eaH	; `CGate::GetLevel'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_GateNumber$ = 8					; size = 4
?GetLevel@CGate@@QAEHH@Z PROC				; CGate::GetLevel
; _this$ = ecx

; 234  : {

  00bf0	55		 push	 ebp
  00bf1	8b ec		 mov	 ebp, esp
  00bf3	83 ec 44	 sub	 esp, 68			; 00000044H
  00bf6	53		 push	 ebx
  00bf7	56		 push	 esi
  00bf8	57		 push	 edi
  00bf9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 	if (GateNumber < 0 || GateNumber > MAX_GATES-1 )

  00bfc	83 7d 08 00	 cmp	 DWORD PTR _GateNumber$[ebp], 0
  00c00	7c 09		 jl	 SHORT $LN1@GetLevel
  00c02	81 7d 08 ff 01
	00 00		 cmp	 DWORD PTR _GateNumber$[ebp], 511 ; 000001ffH
  00c09	7e 30		 jle	 SHORT $LN2@GetLevel
$LN1@GetLevel:

; 236  : 	{
; 237  : 		LogAdd(lMsg.Get(MSGGET(1, 195)), GateNumber, __FILE__, __LINE__);

  00c0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetLevel@CGate@@QAEHH@Z@4JA
  00c10	83 c0 03	 add	 eax, 3
  00c13	50		 push	 eax
  00c14	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@EPDEGOPC@d?3?2projects?2exteam6?43?2source?2gam@
  00c19	8b 4d 08	 mov	 ecx, DWORD PTR _GateNumber$[ebp]
  00c1c	51		 push	 ecx
  00c1d	68 c3 01 00 00	 push	 451			; 000001c3H
  00c22	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00c27	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00c2c	50		 push	 eax
  00c2d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00c33	83 c4 10	 add	 esp, 16			; 00000010H

; 238  : 		return -1;

  00c36	83 c8 ff	 or	 eax, -1
  00c39	eb 0e		 jmp	 SHORT $LN3@GetLevel
$LN2@GetLevel:

; 239  : 	}
; 240  : 
; 241  : 	return this->m_Level[GateNumber];

  00c3b	8b 45 08	 mov	 eax, DWORD PTR _GateNumber$[ebp]
  00c3e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c41	0f bf 84 41 04
	14 00 00	 movsx	 eax, WORD PTR [ecx+eax*2+5124]
$LN3@GetLevel:

; 242  : }

  00c49	5f		 pop	 edi
  00c4a	5e		 pop	 esi
  00c4b	5b		 pop	 ebx
  00c4c	8b e5		 mov	 esp, ebp
  00c4e	5d		 pop	 ebp
  00c4f	c2 04 00	 ret	 4
?GetLevel@CGate@@QAEHH@Z ENDP				; CGate::GetLevel
_TEXT	ENDS
PUBLIC	?IsInGate@CGate@@QAEHHH@Z			; CGate::IsInGate
EXTRN	?DestroyGIocp@@YAXXZ:PROC			; DestroyGIocp
EXTRN	?szAuthKey@@3PADA:BYTE				; szAuthKey
EXTRN	?BlockTeleport@cPandoraBoxEvent@@QAE_NH@Z:PROC	; cPandoraBoxEvent::BlockTeleport
EXTRN	?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A:BYTE	; gPandoraBoxEvent
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_level$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_GateNumber$ = 12					; size = 4
?IsInGate@CGate@@QAEHHH@Z PROC				; CGate::IsInGate
; _this$ = ecx

; 245  : {

  00c60	55		 push	 ebp
  00c61	8b ec		 mov	 ebp, esp
  00c63	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00c66	53		 push	 ebx
  00c67	56		 push	 esi
  00c68	57		 push	 edi
  00c69	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 246  : 	LPOBJ lpObj = &gObj[aIndex];

  00c6c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c6f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00c75	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c7b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 247  : 
; 248  : 	if ( this->IsGate(GateNumber) == FALSE )

  00c7e	8b 45 0c	 mov	 eax, DWORD PTR _GateNumber$[ebp]
  00c81	50		 push	 eax
  00c82	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c85	e8 00 00 00 00	 call	 ?IsGate@CGate@@QAEHH@Z	; CGate::IsGate
  00c8a	85 c0		 test	 eax, eax
  00c8c	75 07		 jne	 SHORT $LN12@IsInGate

; 249  : 	{
; 250  : 		return false;

  00c8e	33 c0		 xor	 eax, eax
  00c90	e9 4e 01 00 00	 jmp	 $LN13@IsInGate
$LN12@IsInGate:

; 251  : 	}
; 252  : #ifdef PANDORA_EVENT
; 253  : 	 if(g_ExLicense.user.PandoraEvent)

  00c95	0f b6 05 d5 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+213
  00c9c	85 c0		 test	 eax, eax
  00c9e	74 1c		 je	 SHORT $LN11@IsInGate

; 254  : 	 {
; 255  : 		if(!gPandoraBoxEvent.BlockTeleport(aIndex))return false;

  00ca0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ca3	50		 push	 eax
  00ca4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A ; gPandoraBoxEvent
  00ca9	e8 00 00 00 00	 call	 ?BlockTeleport@cPandoraBoxEvent@@QAE_NH@Z ; cPandoraBoxEvent::BlockTeleport
  00cae	0f b6 c8	 movzx	 ecx, al
  00cb1	85 c9		 test	 ecx, ecx
  00cb3	75 07		 jne	 SHORT $LN11@IsInGate
  00cb5	33 c0		 xor	 eax, eax
  00cb7	e9 27 01 00 00	 jmp	 $LN13@IsInGate
$LN11@IsInGate:

; 256  : 	 }
; 257  : #endif // PANDORA_BOX
; 258  : 	int level = this->m_Level[GateNumber];

  00cbc	8b 45 0c	 mov	 eax, DWORD PTR _GateNumber$[ebp]
  00cbf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cc2	0f bf 94 41 04
	14 00 00	 movsx	 edx, WORD PTR [ecx+eax*2+5124]
  00cca	89 55 f4	 mov	 DWORD PTR _level$[ebp], edx

; 259  : 
; 260  : 	if(GateNumber != 273) //Season 3.0 add-on

  00ccd	81 7d 0c 11 01
	00 00		 cmp	 DWORD PTR _GateNumber$[ebp], 273 ; 00000111H
  00cd4	74 43		 je	 SHORT $LN9@IsInGate

; 261  : 	{
; 262  : 		if ( lpObj->Class == CLASS_DARKLORD 
; 263  : #ifdef MONK
; 264  : 			|| lpObj->Class == CLASS_MONK
; 265  : #endif
; 266  : 			|| lpObj->Class == CLASS_MAGUMSA )

  00cd6	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cd9	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00ce0	83 f9 04	 cmp	 ecx, 4
  00ce3	74 1e		 je	 SHORT $LN7@IsInGate
  00ce5	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ce8	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00cef	83 f9 06	 cmp	 ecx, 6
  00cf2	74 0f		 je	 SHORT $LN7@IsInGate
  00cf4	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cf7	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00cfe	83 f9 03	 cmp	 ecx, 3
  00d01	75 16		 jne	 SHORT $LN9@IsInGate
$LN7@IsInGate:

; 267  : 		{
; 268  : 			if ( level > 0 )

  00d03	83 7d f4 00	 cmp	 DWORD PTR _level$[ebp], 0
  00d07	7e 10		 jle	 SHORT $LN9@IsInGate

; 269  : 			{
; 270  : 				level = level / 3 * 2;

  00d09	8b 45 f4	 mov	 eax, DWORD PTR _level$[ebp]
  00d0c	99		 cdq
  00d0d	b9 03 00 00 00	 mov	 ecx, 3
  00d12	f7 f9		 idiv	 ecx
  00d14	d1 e0		 shl	 eax, 1
  00d16	89 45 f4	 mov	 DWORD PTR _level$[ebp], eax
$LN9@IsInGate:

; 271  : 			}
; 272  : 		}
; 273  : 	}
; 274  : 
; 275  : 	if (szAuthKey[15] != AUTHKEY15 )

  00d19	0f be 05 0f 00
	00 00		 movsx	 eax, BYTE PTR ?szAuthKey@@3PADA+15
  00d20	83 f8 eb	 cmp	 eax, -21		; ffffffebH
  00d23	74 05		 je	 SHORT $LN5@IsInGate

; 276  : 	{
; 277  : 		DestroyGIocp();

  00d25	e8 00 00 00 00	 call	 ?DestroyGIocp@@YAXXZ	; DestroyGIocp
$LN5@IsInGate:

; 278  : 	}
; 279  : 
; 280  : 	if ( lpObj->Level < level )

  00d2a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d2d	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00d34	3b 4d f4	 cmp	 ecx, DWORD PTR _level$[ebp]
  00d37	7d 07		 jge	 SHORT $LN4@IsInGate

; 281  : 	{
; 282  : 		return FALSE;

  00d39	33 c0		 xor	 eax, eax
  00d3b	e9 a3 00 00 00	 jmp	 $LN13@IsInGate
$LN4@IsInGate:

; 283  : 	}
; 284  : 
; 285  : 	if ( lpObj->MapNumber != this->m_MapNumber[GateNumber] )

  00d40	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d43	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00d4a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00d4d	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  00d50	0f b6 82 04 04
	00 00		 movzx	 eax, BYTE PTR [edx+1028]
  00d57	3b c8		 cmp	 ecx, eax
  00d59	74 07		 je	 SHORT $LN3@IsInGate

; 286  : 	{
; 287  : 		return FALSE;

  00d5b	33 c0		 xor	 eax, eax
  00d5d	e9 81 00 00 00	 jmp	 $LN13@IsInGate
$LN3@IsInGate:

; 288  : 	}
; 289  : 
; 290  : 	if ( lpObj->X < this->m_Sx[GateNumber]-5 || lpObj->X > this->m_Ex[GateNumber]+5 || lpObj->Y < this->m_Sy[GateNumber]-5 || lpObj->Y > this->m_Ey[GateNumber]+5 )

  00d62	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d65	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00d6c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00d6f	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  00d72	0f b6 82 04 06
	00 00		 movzx	 eax, BYTE PTR [edx+1540]
  00d79	83 e8 05	 sub	 eax, 5
  00d7c	3b c8		 cmp	 ecx, eax
  00d7e	7c 5a		 jl	 SHORT $LN1@IsInGate
  00d80	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d83	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00d8a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00d8d	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  00d90	0f b6 82 04 0a
	00 00		 movzx	 eax, BYTE PTR [edx+2564]
  00d97	83 c0 05	 add	 eax, 5
  00d9a	3b c8		 cmp	 ecx, eax
  00d9c	7f 3c		 jg	 SHORT $LN1@IsInGate
  00d9e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00da1	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00da8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00dab	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  00dae	0f b6 82 04 08
	00 00		 movzx	 eax, BYTE PTR [edx+2052]
  00db5	83 e8 05	 sub	 eax, 5
  00db8	3b c8		 cmp	 ecx, eax
  00dba	7c 1e		 jl	 SHORT $LN1@IsInGate
  00dbc	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00dbf	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00dc6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00dc9	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  00dcc	0f b6 82 04 0c
	00 00		 movzx	 eax, BYTE PTR [edx+3076]
  00dd3	83 c0 05	 add	 eax, 5
  00dd6	3b c8		 cmp	 ecx, eax
  00dd8	7e 04		 jle	 SHORT $LN2@IsInGate
$LN1@IsInGate:

; 291  : 	{
; 292  : 		return FALSE;

  00dda	33 c0		 xor	 eax, eax
  00ddc	eb 05		 jmp	 SHORT $LN13@IsInGate
$LN2@IsInGate:

; 293  : 	}
; 294  : 
; 295  : 	return true;

  00dde	b8 01 00 00 00	 mov	 eax, 1
$LN13@IsInGate:

; 296  : }

  00de3	5f		 pop	 edi
  00de4	5e		 pop	 esi
  00de5	5b		 pop	 ebx
  00de6	8b e5		 mov	 esp, ebp
  00de8	5d		 pop	 ebp
  00de9	c2 08 00	 ret	 8
?IsInGate@CGate@@QAEHHH@Z ENDP				; CGate::IsInGate
_TEXT	ENDS
PUBLIC	?CheckGateLevel@CGate@@QAEHHH@Z			; CGate::CheckGateLevel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_level$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_GateNumber$ = 12					; size = 4
?CheckGateLevel@CGate@@QAEHHH@Z PROC			; CGate::CheckGateLevel
; _this$ = ecx

; 299  : {

  00df0	55		 push	 ebp
  00df1	8b ec		 mov	 ebp, esp
  00df3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00df6	53		 push	 ebx
  00df7	56		 push	 esi
  00df8	57		 push	 edi
  00df9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 300  : 	LPOBJ lpObj = &gObj[aIndex];

  00dfc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00dff	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00e05	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00e0b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 301  : 
; 302  : 	if ( this->IsGate(GateNumber) == FALSE )

  00e0e	8b 45 0c	 mov	 eax, DWORD PTR _GateNumber$[ebp]
  00e11	50		 push	 eax
  00e12	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e15	e8 00 00 00 00	 call	 ?IsGate@CGate@@QAEHH@Z	; CGate::IsGate
  00e1a	85 c0		 test	 eax, eax
  00e1c	75 04		 jne	 SHORT $LN6@CheckGateL

; 303  : 	{
; 304  : 		return false;

  00e1e	33 c0		 xor	 eax, eax
  00e20	eb 75		 jmp	 SHORT $LN7@CheckGateL
$LN6@CheckGateL:

; 305  : 	}
; 306  : 
; 307  : 	int level = this->m_Level[GateNumber];

  00e22	8b 45 0c	 mov	 eax, DWORD PTR _GateNumber$[ebp]
  00e25	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e28	0f bf 94 41 04
	14 00 00	 movsx	 edx, WORD PTR [ecx+eax*2+5124]
  00e30	89 55 f4	 mov	 DWORD PTR _level$[ebp], edx

; 308  : 
; 309  : 	if(GateNumber != 273) //Season 3.0 add-on

  00e33	81 7d 0c 11 01
	00 00		 cmp	 DWORD PTR _GateNumber$[ebp], 273 ; 00000111H
  00e3a	74 43		 je	 SHORT $LN5@CheckGateL

; 310  : 	{
; 311  : 		if ( lpObj->Class == CLASS_DARKLORD 
; 312  : #ifdef MONK
; 313  : 			|| lpObj->Class == CLASS_MONK
; 314  : #endif
; 315  : 			|| lpObj->Class == CLASS_MAGUMSA )

  00e3c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e3f	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00e46	83 f9 04	 cmp	 ecx, 4
  00e49	74 1e		 je	 SHORT $LN3@CheckGateL
  00e4b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e4e	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00e55	83 f9 06	 cmp	 ecx, 6
  00e58	74 0f		 je	 SHORT $LN3@CheckGateL
  00e5a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e5d	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00e64	83 f9 03	 cmp	 ecx, 3
  00e67	75 16		 jne	 SHORT $LN5@CheckGateL
$LN3@CheckGateL:

; 316  : 		{
; 317  : 			if ( level > 0 )

  00e69	83 7d f4 00	 cmp	 DWORD PTR _level$[ebp], 0
  00e6d	7e 10		 jle	 SHORT $LN5@CheckGateL

; 318  : 			{
; 319  : 				level = (level/3)*2;

  00e6f	8b 45 f4	 mov	 eax, DWORD PTR _level$[ebp]
  00e72	99		 cdq
  00e73	b9 03 00 00 00	 mov	 ecx, 3
  00e78	f7 f9		 idiv	 ecx
  00e7a	d1 e0		 shl	 eax, 1
  00e7c	89 45 f4	 mov	 DWORD PTR _level$[ebp], eax
$LN5@CheckGateL:

; 320  : 			}
; 321  : 		}
; 322  : 	}
; 323  : 
; 324  : 	if ( lpObj->Level < level )

  00e7f	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e82	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00e89	3b 4d f4	 cmp	 ecx, DWORD PTR _level$[ebp]
  00e8c	7d 04		 jge	 SHORT $LN1@CheckGateL

; 325  : 	{
; 326  : 		return false;

  00e8e	33 c0		 xor	 eax, eax
  00e90	eb 05		 jmp	 SHORT $LN7@CheckGateL
$LN1@CheckGateL:

; 327  : 	}
; 328  : 
; 329  : 	return true;

  00e92	b8 01 00 00 00	 mov	 eax, 1
$LN7@CheckGateL:

; 330  : }

  00e97	5f		 pop	 edi
  00e98	5e		 pop	 esi
  00e99	5b		 pop	 ebx
  00e9a	8b e5		 mov	 esp, ebp
  00e9c	5d		 pop	 ebp
  00e9d	c2 08 00	 ret	 8
?CheckGateLevel@CGate@@QAEHHH@Z ENDP			; CGate::CheckGateLevel
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__EgGateC@@YAXXZ
text$yc	SEGMENT
??__EgGateC@@YAXXZ PROC					; `dynamic initializer for 'gGateC'', COMDAT

; 14   : CGate gGateC;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  0000e	e8 00 00 00 00	 call	 ??0CGate@@QAE@XZ	; CGate::CGate
  00013	68 00 00 00 00	 push	 OFFSET ??__FgGateC@@YAXXZ ; `dynamic atexit destructor for 'gGateC''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgGateC@@YAXXZ ENDP					; `dynamic initializer for 'gGateC''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FgGateC@@YAXXZ
text$yd	SEGMENT
??__FgGateC@@YAXXZ PROC					; `dynamic atexit destructor for 'gGateC'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  0000e	e8 00 00 00 00	 call	 ??1CGate@@UAE@XZ	; CGate::~CGate
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgGateC@@YAXXZ ENDP					; `dynamic atexit destructor for 'gGateC''
text$yd	ENDS
PUBLIC	?gGateC@@3VCGate@@A				; gGateC
_BSS	SEGMENT
?gGateC@@3VCGate@@A DB 01804H DUP (?)			; gGateC
_BSS	ENDS
CRT$XCU	SEGMENT
_gGateC$initializer$ DD FLAT:??__EgGateC@@YAXXZ
CRT$XCU	ENDS
END
