; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\BuffEffect.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CBuffEffect@@6B@				; CBuffEffect::`vftable'
PUBLIC	??0CBuffEffect@@QAE@XZ				; CBuffEffect::CBuffEffect
PUBLIC	??_R4CBuffEffect@@6B@				; CBuffEffect::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBuffEffect@@@8				; CBuffEffect `RTTI Type Descriptor'
PUBLIC	??_R3CBuffEffect@@8				; CBuffEffect::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBuffEffect@@8				; CBuffEffect::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBuffEffect@@8			; CBuffEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECBuffEffect@@UAEPAXI@Z:PROC			; CBuffEffect::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CBuffEffect@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\buffeffect.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CBuffEffect@@8 DD FLAT:??_R0?AVCBuffEffect@@@8 ; CBuffEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBuffEffect@@8
rdata$r	ENDS
;	COMDAT ??_R2CBuffEffect@@8
rdata$r	SEGMENT
??_R2CBuffEffect@@8 DD FLAT:??_R1A@?0A@EA@CBuffEffect@@8 ; CBuffEffect::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBuffEffect@@8
rdata$r	SEGMENT
??_R3CBuffEffect@@8 DD 00H				; CBuffEffect::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBuffEffect@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBuffEffect@@@8
_DATA	SEGMENT
??_R0?AVCBuffEffect@@@8 DD FLAT:??_7type_info@@6B@	; CBuffEffect `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBuffEffect@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBuffEffect@@6B@
rdata$r	SEGMENT
??_R4CBuffEffect@@6B@ DD 00H				; CBuffEffect::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBuffEffect@@@8
	DD	FLAT:??_R3CBuffEffect@@8
rdata$r	ENDS
;	COMDAT ??_7CBuffEffect@@6B@
CONST	SEGMENT
??_7CBuffEffect@@6B@ DD FLAT:??_R4CBuffEffect@@6B@	; CBuffEffect::`vftable'
	DD	FLAT:??_ECBuffEffect@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBuffEffect@@QAE@XZ PROC				; CBuffEffect::CBuffEffect
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CBuffEffect@@6B@

; 19   : 
; 20   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CBuffEffect@@QAE@XZ ENDP				; CBuffEffect::CBuffEffect
_TEXT	ENDS
PUBLIC	??1CBuffEffect@@UAE@XZ				; CBuffEffect::~CBuffEffect
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCBuffEffect@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBuffEffect@@UAEPAXI@Z PROC				; CBuffEffect::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CBuffEffect@@UAE@XZ	; CBuffEffect::~CBuffEffect
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCBuffEffect@@UAEPAXI@Z ENDP				; CBuffEffect::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBuffEffect@@UAE@XZ PROC				; CBuffEffect::~CBuffEffect
; _this$ = ecx

; 23   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CBuffEffect@@6B@

; 24   : 
; 25   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CBuffEffect@@UAE@XZ ENDP				; CBuffEffect::~CBuffEffect
_TEXT	ENDS
PUBLIC	?Init@CBuffEffect@@QAEXXZ			; CBuffEffect::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$205234 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CBuffEffect@@QAEXXZ PROC				; CBuffEffect::Init
; _this$ = ecx

; 29   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 48	 sub	 esp, 72			; 00000048H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	this->iLoadCount = 0;	

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 31   : 
; 32   : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  00056	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$205234[ebp], 0
  0005d	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _i$205234[ebp]
  00062	83 c0 01	 add	 eax, 1
  00065	89 45 f8	 mov	 DWORD PTR _i$205234[ebp], eax
$LN3@Init:
  00068	81 7d f8 fe 00
	00 00		 cmp	 DWORD PTR _i$205234[ebp], 254 ; 000000feH
  0006f	7d 48		 jge	 SHORT $LN4@Init

; 33   : 	{
; 34   : 		this->m_EffectData[i].btIndex			= 0xFF;

  00071	8b 45 f8	 mov	 eax, DWORD PTR _i$205234[ebp]
  00074	6b c0 7f	 imul	 eax, 127		; 0000007fH
  00077	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	c6 44 01 08 ff	 mov	 BYTE PTR [ecx+eax+8], 255 ; 000000ffH

; 35   : 		this->m_EffectData[i].btType			= 0;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _i$205234[ebp]
  00082	6b c0 7f	 imul	 eax, 127		; 0000007fH
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	c6 44 01 20 00	 mov	 BYTE PTR [ecx+eax+32], 0

; 36   : 		this->m_EffectData[i].btClearType		= 0;

  0008d	8b 45 f8	 mov	 eax, DWORD PTR _i$205234[ebp]
  00090	6b c0 7f	 imul	 eax, 127		; 0000007fH
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	c6 44 01 22 00	 mov	 BYTE PTR [ecx+eax+34], 0

; 37   : 		this->m_EffectData[i].btNotification	= 0;

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _i$205234[ebp]
  0009e	6b c0 7f	 imul	 eax, 127		; 0000007fH
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	c6 44 01 21 00	 mov	 BYTE PTR [ecx+eax+33], 0

; 38   : 		this->m_EffectData[i].szBuffInfo[0]		= 0;

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _i$205234[ebp]
  000ac	6b c0 7f	 imul	 eax, 127		; 0000007fH
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	c6 44 01 23 00	 mov	 BYTE PTR [ecx+eax+35], 0

; 39   : 	}

  000b7	eb a6		 jmp	 SHORT $LN2@Init
$LN4@Init:

; 40   : }

  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
?Init@CBuffEffect@@QAEXXZ ENDP				; CBuffEffect::Init
_TEXT	ENDS
PUBLIC	?Insert@CBuffEffect@@QAE_NEEEEPADEEE0@Z		; CBuffEffect::Insert
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@CBuffEffect@@QAE_NPAD@Z			; CBuffEffect::Load
EXTRN	_fclose:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv219 = -220						; size = 4
tv210 = -220						; size = 4
tv201 = -220						; size = 4
tv190 = -220						; size = 4
tv181 = -220						; size = 4
tv172 = -220						; size = 4
tv163 = -220						; size = 4
tv217 = -216						; size = 4
tv208 = -216						; size = 4
tv199 = -216						; size = 4
tv188 = -216						; size = 4
tv179 = -216						; size = 4
tv170 = -216						; size = 4
tv161 = -216						; size = 4
tv214 = -210						; size = 2
tv205 = -210						; size = 2
tv196 = -210						; size = 2
tv185 = -210						; size = 2
tv176 = -210						; size = 2
tv167 = -210						; size = 2
tv158 = -210						; size = 2
_szBuffInfo$ = -144					; size = 100
_szBuffName$ = -44					; size = 20
_btClearType$ = -23					; size = 1
_btNotification$ = -22					; size = 1
_btType$ = -21						; size = 1
_btItemIndex$ = -20					; size = 1
_btItemType$ = -19					; size = 1
_btViewPortIndex$ = -18					; size = 1
_btIndex$ = -17						; size = 1
_iIndex$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Load@CBuffEffect@@QAE_NPAD@Z PROC			; CBuffEffect::Load
; _this$ = ecx

; 44   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp
  000c3	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000ce	33 c5		 xor	 eax, ebp
  000d0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000d3	53		 push	 ebx
  000d4	56		 push	 esi
  000d5	57		 push	 edi
  000d6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 	this->Init();

  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	e8 00 00 00 00	 call	 ?Init@CBuffEffect@@QAEXXZ ; CBuffEffect::Init

; 46   : 
; 47   : 	if ( (SMDFile = fopen(filename, "r")) == NULL )

  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000e6	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _fopen
  000ef	83 c4 08	 add	 esp, 8
  000f2	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  000f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  000fe	75 07		 jne	 SHORT $LN8@Load

; 48   : 	{
; 49   : 		return false;

  00100	32 c0		 xor	 al, al
  00102	e9 d3 02 00 00	 jmp	 $LN9@Load
$LN8@Load:

; 50   : 	}
; 51   : 
; 52   : 	SMDToken Token;
; 53   : 	int iIndex = 0;

  00107	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iIndex$[ebp], 0

; 54   : 	BYTE btIndex = 0;

  0010e	c6 45 ef 00	 mov	 BYTE PTR _btIndex$[ebp], 0

; 55   : 	BYTE btViewPortIndex = 0;

  00112	c6 45 ee 00	 mov	 BYTE PTR _btViewPortIndex$[ebp], 0

; 56   : 	BYTE btItemType = 0;

  00116	c6 45 ed 00	 mov	 BYTE PTR _btItemType$[ebp], 0

; 57   : 	BYTE btItemIndex = 0;

  0011a	c6 45 ec 00	 mov	 BYTE PTR _btItemIndex$[ebp], 0

; 58   : 	BYTE btType = 0;

  0011e	c6 45 eb 00	 mov	 BYTE PTR _btType$[ebp], 0

; 59   : 	BYTE btNotification = 0;

  00122	c6 45 ea 00	 mov	 BYTE PTR _btNotification$[ebp], 0

; 60   : 	BYTE btClearType = 0;

  00126	c6 45 e9 00	 mov	 BYTE PTR _btClearType$[ebp], 0
$LN7@Load:

; 61   : 	char szBuffName[20];
; 62   : 	char szBuffInfo[100];
; 63   : 
; 64   : 	while ( TRUE )

  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	85 c0		 test	 eax, eax
  00131	0f 84 93 02 00
	00		 je	 $LN6@Load

; 65   : 	{
; 66   : 		Token = GetToken();

  00137	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0013c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 67   : 
; 68   : 		if ( Token == END )

  0013f	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00143	75 05		 jne	 SHORT $LN5@Load

; 69   : 		{
; 70   : 			break;

  00145	e9 80 02 00 00	 jmp	 $LN6@Load
$LN5@Load:

; 71   : 		}
; 72   : 		
; 73   : 		if ( Token == NUMBER )

  0014a	83 7d f4 01	 cmp	 DWORD PTR _Token$[ebp], 1
  0014e	0f 85 71 02 00
	00		 jne	 $LN2@Load

; 74   : 		{
; 75   : 			iIndex = (int)TokenNumber;

  00154	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0015a	e8 00 00 00 00	 call	 __ftol2_sse
  0015f	89 45 f0	 mov	 DWORD PTR _iIndex$[ebp], eax
$LN3@Load:

; 76   : 
; 77   : 			while ( TRUE )

  00162	b8 01 00 00 00	 mov	 eax, 1
  00167	85 c0		 test	 eax, eax
  00169	0f 84 56 02 00
	00		 je	 $LN2@Load

; 78   : 			{
; 79   : 				Token = GetToken();

  0016f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00174	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 80   : 
; 81   : 				if ( strcmp("end", TokenString) == 0 )

  00177	68 00 00 00 00	 push	 OFFSET _TokenString
  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00181	e8 00 00 00 00	 call	 _strcmp
  00186	83 c4 08	 add	 esp, 8
  00189	85 c0		 test	 eax, eax
  0018b	75 05		 jne	 SHORT $LN1@Load

; 82   : 				{
; 83   : 					break;

  0018d	e9 33 02 00 00	 jmp	 $LN2@Load
$LN1@Load:

; 84   : 				}
; 85   : 
; 86   : 				btIndex			= (BYTE)TokenNumber; Token = GetToken();

  00192	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00198	d9 bd 2e ff ff
	ff		 fnstcw	 WORD PTR tv158[ebp]
  0019e	0f b7 85 2e ff
	ff ff		 movzx	 eax, WORD PTR tv158[ebp]
  001a5	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001aa	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv161[ebp], eax
  001b0	d9 ad 28 ff ff
	ff		 fldcw	 WORD PTR tv161[ebp]
  001b6	db 9d 24 ff ff
	ff		 fistp	 DWORD PTR tv163[ebp]
  001bc	d9 ad 2e ff ff
	ff		 fldcw	 WORD PTR tv158[ebp]
  001c2	8a 85 24 ff ff
	ff		 mov	 al, BYTE PTR tv163[ebp]
  001c8	88 45 ef	 mov	 BYTE PTR _btIndex$[ebp], al
  001cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001d0	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 87   : 				btViewPortIndex	= (BYTE)TokenNumber; Token = GetToken();

  001d3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001d9	d9 bd 2e ff ff
	ff		 fnstcw	 WORD PTR tv167[ebp]
  001df	0f b7 85 2e ff
	ff ff		 movzx	 eax, WORD PTR tv167[ebp]
  001e6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001eb	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv170[ebp], eax
  001f1	d9 ad 28 ff ff
	ff		 fldcw	 WORD PTR tv170[ebp]
  001f7	db 9d 24 ff ff
	ff		 fistp	 DWORD PTR tv172[ebp]
  001fd	d9 ad 2e ff ff
	ff		 fldcw	 WORD PTR tv167[ebp]
  00203	8a 85 24 ff ff
	ff		 mov	 al, BYTE PTR tv172[ebp]
  00209	88 45 ee	 mov	 BYTE PTR _btViewPortIndex$[ebp], al
  0020c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00211	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 88   : 				btItemType		= (BYTE)TokenNumber; Token = GetToken();

  00214	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0021a	d9 bd 2e ff ff
	ff		 fnstcw	 WORD PTR tv176[ebp]
  00220	0f b7 85 2e ff
	ff ff		 movzx	 eax, WORD PTR tv176[ebp]
  00227	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0022c	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv179[ebp], eax
  00232	d9 ad 28 ff ff
	ff		 fldcw	 WORD PTR tv179[ebp]
  00238	db 9d 24 ff ff
	ff		 fistp	 DWORD PTR tv181[ebp]
  0023e	d9 ad 2e ff ff
	ff		 fldcw	 WORD PTR tv176[ebp]
  00244	8a 85 24 ff ff
	ff		 mov	 al, BYTE PTR tv181[ebp]
  0024a	88 45 ed	 mov	 BYTE PTR _btItemType$[ebp], al
  0024d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00252	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 89   : 				btItemIndex		= (BYTE)TokenNumber; Token = GetToken();

  00255	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0025b	d9 bd 2e ff ff
	ff		 fnstcw	 WORD PTR tv185[ebp]
  00261	0f b7 85 2e ff
	ff ff		 movzx	 eax, WORD PTR tv185[ebp]
  00268	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0026d	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv188[ebp], eax
  00273	d9 ad 28 ff ff
	ff		 fldcw	 WORD PTR tv188[ebp]
  00279	db 9d 24 ff ff
	ff		 fistp	 DWORD PTR tv190[ebp]
  0027f	d9 ad 2e ff ff
	ff		 fldcw	 WORD PTR tv185[ebp]
  00285	8a 85 24 ff ff
	ff		 mov	 al, BYTE PTR tv190[ebp]
  0028b	88 45 ec	 mov	 BYTE PTR _btItemIndex$[ebp], al
  0028e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00293	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 90   : 
; 91   : 				memcpy(szBuffName, TokenString, sizeof(szBuffName));

  00296	6a 14		 push	 20			; 00000014H
  00298	68 00 00 00 00	 push	 OFFSET _TokenString
  0029d	8d 45 d4	 lea	 eax, DWORD PTR _szBuffName$[ebp]
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 _memcpy
  002a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 92   : 
; 93   : 				Token = GetToken();

  002a9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002ae	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 94   : 
; 95   : 				btType			= (BYTE)TokenNumber; Token = GetToken();

  002b1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b7	d9 bd 2e ff ff
	ff		 fnstcw	 WORD PTR tv196[ebp]
  002bd	0f b7 85 2e ff
	ff ff		 movzx	 eax, WORD PTR tv196[ebp]
  002c4	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002c9	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv199[ebp], eax
  002cf	d9 ad 28 ff ff
	ff		 fldcw	 WORD PTR tv199[ebp]
  002d5	db 9d 24 ff ff
	ff		 fistp	 DWORD PTR tv201[ebp]
  002db	d9 ad 2e ff ff
	ff		 fldcw	 WORD PTR tv196[ebp]
  002e1	8a 85 24 ff ff
	ff		 mov	 al, BYTE PTR tv201[ebp]
  002e7	88 45 eb	 mov	 BYTE PTR _btType$[ebp], al
  002ea	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002ef	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 96   : 				btNotification	= (BYTE)TokenNumber; Token = GetToken();

  002f2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002f8	d9 bd 2e ff ff
	ff		 fnstcw	 WORD PTR tv205[ebp]
  002fe	0f b7 85 2e ff
	ff ff		 movzx	 eax, WORD PTR tv205[ebp]
  00305	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0030a	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv208[ebp], eax
  00310	d9 ad 28 ff ff
	ff		 fldcw	 WORD PTR tv208[ebp]
  00316	db 9d 24 ff ff
	ff		 fistp	 DWORD PTR tv210[ebp]
  0031c	d9 ad 2e ff ff
	ff		 fldcw	 WORD PTR tv205[ebp]
  00322	8a 85 24 ff ff
	ff		 mov	 al, BYTE PTR tv210[ebp]
  00328	88 45 ea	 mov	 BYTE PTR _btNotification$[ebp], al
  0032b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00330	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 97   : 				btClearType		= (BYTE)TokenNumber; Token = GetToken();

  00333	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00339	d9 bd 2e ff ff
	ff		 fnstcw	 WORD PTR tv214[ebp]
  0033f	0f b7 85 2e ff
	ff ff		 movzx	 eax, WORD PTR tv214[ebp]
  00346	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0034b	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv217[ebp], eax
  00351	d9 ad 28 ff ff
	ff		 fldcw	 WORD PTR tv217[ebp]
  00357	db 9d 24 ff ff
	ff		 fistp	 DWORD PTR tv219[ebp]
  0035d	d9 ad 2e ff ff
	ff		 fldcw	 WORD PTR tv214[ebp]
  00363	8a 85 24 ff ff
	ff		 mov	 al, BYTE PTR tv219[ebp]
  00369	88 45 e9	 mov	 BYTE PTR _btClearType$[ebp], al
  0036c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00371	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 98   : 
; 99   : 				memcpy(szBuffInfo, TokenString, sizeof(szBuffInfo));

  00374	6a 64		 push	 100			; 00000064H
  00376	68 00 00 00 00	 push	 OFFSET _TokenString
  0037b	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _szBuffInfo$[ebp]
  00381	50		 push	 eax
  00382	e8 00 00 00 00	 call	 _memcpy
  00387	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  : 
; 101  : 				this->Insert(btIndex, btViewPortIndex, btItemType, btItemIndex, szBuffName, btType, btNotification, btClearType, szBuffInfo);

  0038a	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _szBuffInfo$[ebp]
  00390	50		 push	 eax
  00391	0f b6 4d e9	 movzx	 ecx, BYTE PTR _btClearType$[ebp]
  00395	51		 push	 ecx
  00396	0f b6 55 ea	 movzx	 edx, BYTE PTR _btNotification$[ebp]
  0039a	52		 push	 edx
  0039b	0f b6 45 eb	 movzx	 eax, BYTE PTR _btType$[ebp]
  0039f	50		 push	 eax
  003a0	8d 4d d4	 lea	 ecx, DWORD PTR _szBuffName$[ebp]
  003a3	51		 push	 ecx
  003a4	0f b6 55 ec	 movzx	 edx, BYTE PTR _btItemIndex$[ebp]
  003a8	52		 push	 edx
  003a9	0f b6 45 ed	 movzx	 eax, BYTE PTR _btItemType$[ebp]
  003ad	50		 push	 eax
  003ae	0f b6 4d ee	 movzx	 ecx, BYTE PTR _btViewPortIndex$[ebp]
  003b2	51		 push	 ecx
  003b3	0f b6 55 ef	 movzx	 edx, BYTE PTR _btIndex$[ebp]
  003b7	52		 push	 edx
  003b8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003bb	e8 00 00 00 00	 call	 ?Insert@CBuffEffect@@QAE_NEEEEPADEEE0@Z ; CBuffEffect::Insert

; 102  : 			}

  003c0	e9 9d fd ff ff	 jmp	 $LN3@Load
$LN2@Load:

; 103  : 		}
; 104  : 	}

  003c5	e9 60 fd ff ff	 jmp	 $LN7@Load
$LN6@Load:

; 105  : 
; 106  : 	fclose(SMDFile);

  003ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  003cf	50		 push	 eax
  003d0	e8 00 00 00 00	 call	 _fclose
  003d5	83 c4 04	 add	 esp, 4

; 107  : 
; 108  : 	return true;

  003d8	b0 01		 mov	 al, 1
$LN9@Load:

; 109  : }

  003da	5f		 pop	 edi
  003db	5e		 pop	 esi
  003dc	5b		 pop	 ebx
  003dd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003e0	33 cd		 xor	 ecx, ebp
  003e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e7	8b e5		 mov	 esp, ebp
  003e9	5d		 pop	 ebp
  003ea	c2 04 00	 ret	 4
?Load@CBuffEffect@@QAE_NPAD@Z ENDP			; CBuffEffect::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  003f0	55		 push	 ebp
  003f1	8b ec		 mov	 ebp, esp
  003f3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  003f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  003fe	33 c5		 xor	 eax, ebp
  00400	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00403	53		 push	 ebx
  00404	56		 push	 esi
  00405	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00406	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0040d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00412	50		 push	 eax
  00413	e8 00 00 00 00	 call	 _fgetc
  00418	83 c4 04	 add	 esp, 4
  0041b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0041e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00422	83 f9 ff	 cmp	 ecx, -1
  00425	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00427	b8 02 00 00 00	 mov	 eax, 2
  0042c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00431	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00433	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00437	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0043a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0043c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00441	50		 push	 eax
  00442	e8 00 00 00 00	 call	 _fgetc
  00447	83 c4 04	 add	 esp, 4
  0044a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0044d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00451	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00454	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00456	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0045a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0045d	74 1c		 je	 SHORT $LN23@GetToken
  0045f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00463	83 f8 ff	 cmp	 eax, -1
  00466	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00468	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0046d	50		 push	 eax
  0046e	e8 00 00 00 00	 call	 _fgetc
  00473	83 c4 04	 add	 esp, 4
  00476	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00479	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0047b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0047f	83 f8 ff	 cmp	 eax, -1
  00482	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00484	b8 02 00 00 00	 mov	 eax, 2
  00489	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0048e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00492	50		 push	 eax
  00493	e8 00 00 00 00	 call	 _isspace
  00498	83 c4 04	 add	 esp, 4
  0049b	85 c0		 test	 eax, eax
  0049d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  004a3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004a7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  004ad	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  004b3	83 e9 22	 sub	 ecx, 34			; 00000022H
  004b6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  004bc	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  004c3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  004c9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  004cf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  004d6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  004dd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  004e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004ec	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  004f1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  004f6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00500	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00505	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0050a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0050f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00519	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0051e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00523	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00528	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00532	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00537	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0053c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00541	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0054b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00550	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00555	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0055a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0055f	50		 push	 eax
  00560	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00564	51		 push	 ecx
  00565	e8 00 00 00 00	 call	 _ungetc
  0056a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0056d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00570	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00573	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00578	50		 push	 eax
  00579	e8 00 00 00 00	 call	 _getc
  0057e	83 c4 04	 add	 esp, 4
  00581	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00584	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00588	83 f9 ff	 cmp	 ecx, -1
  0058b	74 36		 je	 SHORT $LN12@GetToken
  0058d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00591	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00594	74 1a		 je	 SHORT $LN11@GetToken
  00596	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0059a	50		 push	 eax
  0059b	e8 00 00 00 00	 call	 _isdigit
  005a0	83 c4 04	 add	 esp, 4
  005a3	85 c0		 test	 eax, eax
  005a5	75 09		 jne	 SHORT $LN11@GetToken
  005a7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005ab	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  005ae	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  005b0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005b3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  005b6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  005b8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005bb	83 c0 01	 add	 eax, 1
  005be	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  005c1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  005c3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005c6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  005c9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  005cc	50		 push	 eax
  005cd	e8 00 00 00 00	 call	 _atof
  005d2	83 c4 04	 add	 esp, 4
  005d5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  005db	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  005e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  005ea	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  005ef	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  005f4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  005fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00600	50		 push	 eax
  00601	e8 00 00 00 00	 call	 _getc
  00606	83 c4 04	 add	 esp, 4
  00609	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0060c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00610	83 f9 ff	 cmp	 ecx, -1
  00613	74 1c		 je	 SHORT $LN8@GetToken
  00615	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00619	83 f8 22	 cmp	 eax, 34			; 00000022H
  0061c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0061e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00621	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00624	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00626	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00629	83 c0 01	 add	 eax, 1
  0062c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0062f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00631	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00635	83 f8 22	 cmp	 eax, 34			; 00000022H
  00638	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0063a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0063f	50		 push	 eax
  00640	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00644	51		 push	 ecx
  00645	e8 00 00 00 00	 call	 _ungetc
  0064a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0064d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00650	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00653	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0065d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00662	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00667	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0066c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00670	50		 push	 eax
  00671	e8 00 00 00 00	 call	 _isalpha
  00676	83 c4 04	 add	 esp, 4
  00679	85 c0		 test	 eax, eax
  0067b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00681	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00688	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0068b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0068e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00690	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00693	83 c0 01	 add	 eax, 1
  00696	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00699	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0069e	50		 push	 eax
  0069f	e8 00 00 00 00	 call	 _getc
  006a4	83 c4 04	 add	 esp, 4
  006a7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  006aa	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006ae	83 f9 ff	 cmp	 ecx, -1
  006b1	74 36		 je	 SHORT $LN3@GetToken
  006b3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006b7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  006ba	74 1a		 je	 SHORT $LN2@GetToken
  006bc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006c0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  006c3	74 11		 je	 SHORT $LN2@GetToken
  006c5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006c9	50		 push	 eax
  006ca	e8 00 00 00 00	 call	 _isalnum
  006cf	83 c4 04	 add	 esp, 4
  006d2	85 c0		 test	 eax, eax
  006d4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  006d6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  006d9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  006dc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  006de	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  006e1	83 c0 01	 add	 eax, 1
  006e4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  006e7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  006e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006ee	50		 push	 eax
  006ef	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006f3	51		 push	 ecx
  006f4	e8 00 00 00 00	 call	 _ungetc
  006f9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  006fc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  006ff	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00702	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0070c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00711	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00713	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00715	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0071f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00724	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00726	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00728	5f		 pop	 edi
  00729	5e		 pop	 esi
  0072a	5b		 pop	 ebx
  0072b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0072e	33 cd		 xor	 ecx, ebp
  00730	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00735	8b e5		 mov	 esp, ebp
  00737	5d		 pop	 ebp
  00738	c3		 ret	 0
  00739	8d 49 00	 npad	 3
$LN35@GetToken:
  0073c	00 00 00 00	 DD	 $LN10@GetToken
  00740	00 00 00 00	 DD	 $LN19@GetToken
  00744	00 00 00 00	 DD	 $LN17@GetToken
  00748	00 00 00 00	 DD	 $LN14@GetToken
  0074c	00 00 00 00	 DD	 $LN18@GetToken
  00750	00 00 00 00	 DD	 $LN16@GetToken
  00754	00 00 00 00	 DD	 $LN15@GetToken
  00758	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0075c	00		 DB	 0
  0075d	01		 DB	 1
  0075e	07		 DB	 7
  0075f	07		 DB	 7
  00760	07		 DB	 7
  00761	07		 DB	 7
  00762	07		 DB	 7
  00763	07		 DB	 7
  00764	07		 DB	 7
  00765	07		 DB	 7
  00766	02		 DB	 2
  00767	03		 DB	 3
  00768	03		 DB	 3
  00769	07		 DB	 7
  0076a	03		 DB	 3
  0076b	03		 DB	 3
  0076c	03		 DB	 3
  0076d	03		 DB	 3
  0076e	03		 DB	 3
  0076f	03		 DB	 3
  00770	03		 DB	 3
  00771	03		 DB	 3
  00772	03		 DB	 3
  00773	03		 DB	 3
  00774	07		 DB	 7
  00775	04		 DB	 4
  00776	07		 DB	 7
  00777	07		 DB	 7
  00778	07		 DB	 7
  00779	07		 DB	 7
  0077a	07		 DB	 7
  0077b	07		 DB	 7
  0077c	07		 DB	 7
  0077d	07		 DB	 7
  0077e	07		 DB	 7
  0077f	07		 DB	 7
  00780	07		 DB	 7
  00781	07		 DB	 7
  00782	07		 DB	 7
  00783	07		 DB	 7
  00784	07		 DB	 7
  00785	07		 DB	 7
  00786	07		 DB	 7
  00787	07		 DB	 7
  00788	07		 DB	 7
  00789	07		 DB	 7
  0078a	07		 DB	 7
  0078b	07		 DB	 7
  0078c	07		 DB	 7
  0078d	07		 DB	 7
  0078e	07		 DB	 7
  0078f	07		 DB	 7
  00790	07		 DB	 7
  00791	07		 DB	 7
  00792	07		 DB	 7
  00793	07		 DB	 7
  00794	07		 DB	 7
  00795	07		 DB	 7
  00796	07		 DB	 7
  00797	07		 DB	 7
  00798	07		 DB	 7
  00799	07		 DB	 7
  0079a	07		 DB	 7
  0079b	07		 DB	 7
  0079c	07		 DB	 7
  0079d	07		 DB	 7
  0079e	07		 DB	 7
  0079f	07		 DB	 7
  007a0	07		 DB	 7
  007a1	07		 DB	 7
  007a2	07		 DB	 7
  007a3	07		 DB	 7
  007a4	07		 DB	 7
  007a5	07		 DB	 7
  007a6	07		 DB	 7
  007a7	07		 DB	 7
  007a8	07		 DB	 7
  007a9	07		 DB	 7
  007aa	07		 DB	 7
  007ab	07		 DB	 7
  007ac	07		 DB	 7
  007ad	07		 DB	 7
  007ae	07		 DB	 7
  007af	07		 DB	 7
  007b0	07		 DB	 7
  007b1	07		 DB	 7
  007b2	07		 DB	 7
  007b3	07		 DB	 7
  007b4	07		 DB	 7
  007b5	05		 DB	 5
  007b6	07		 DB	 7
  007b7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\buffeffect.cpp
_this$ = -4						; size = 4
_Index$ = 8						; size = 1
_ViewPortIndex$ = 12					; size = 1
_ItemType$ = 16						; size = 1
_ItemIndex$ = 20					; size = 1
_BuffName$ = 24						; size = 4
_Type$ = 28						; size = 1
_Notification$ = 32					; size = 1
_ClearType$ = 36					; size = 1
_BuffInfo$ = 40						; size = 4
?Insert@CBuffEffect@@QAE_NEEEEPADEEE0@Z PROC		; CBuffEffect::Insert
; _this$ = ecx

; 113  : {

  007c0	55		 push	 ebp
  007c1	8b ec		 mov	 ebp, esp
  007c3	83 ec 44	 sub	 esp, 68			; 00000044H
  007c6	53		 push	 ebx
  007c7	56		 push	 esi
  007c8	57		 push	 edi
  007c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 	this->m_EffectData[this->iLoadCount].btIndex = Index;

  007cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  007d2	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  007d5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007d8	8a 45 08	 mov	 al, BYTE PTR _Index$[ebp]
  007db	88 44 0a 08	 mov	 BYTE PTR [edx+ecx+8], al

; 115  : 	this->m_EffectData[this->iLoadCount].btViewPortIndex = ViewPortIndex;

  007df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  007e5	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  007e8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007eb	8a 45 0c	 mov	 al, BYTE PTR _ViewPortIndex$[ebp]
  007ee	88 44 0a 09	 mov	 BYTE PTR [edx+ecx+9], al

; 116  : 	this->m_EffectData[this->iLoadCount].btItemType = ItemType;

  007f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007f5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  007f8	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  007fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007fe	8a 45 10	 mov	 al, BYTE PTR _ItemType$[ebp]
  00801	88 44 0a 0a	 mov	 BYTE PTR [edx+ecx+10], al

; 117  : 	this->m_EffectData[this->iLoadCount].btItemIndex = ItemIndex;

  00805	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00808	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0080b	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  0080e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00811	8a 45 14	 mov	 al, BYTE PTR _ItemIndex$[ebp]
  00814	88 44 0a 0b	 mov	 BYTE PTR [edx+ecx+11], al

; 118  : 	this->m_EffectData[this->iLoadCount].btType = Type;

  00818	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0081b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0081e	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  00821	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00824	8a 45 1c	 mov	 al, BYTE PTR _Type$[ebp]
  00827	88 44 0a 20	 mov	 BYTE PTR [edx+ecx+32], al

; 119  : 	this->m_EffectData[this->iLoadCount].btNotification = Notification;

  0082b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0082e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00831	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  00834	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00837	8a 45 20	 mov	 al, BYTE PTR _Notification$[ebp]
  0083a	88 44 0a 21	 mov	 BYTE PTR [edx+ecx+33], al

; 120  : 	this->m_EffectData[this->iLoadCount].btClearType = ClearType;

  0083e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00841	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00844	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  00847	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0084a	8a 45 24	 mov	 al, BYTE PTR _ClearType$[ebp]
  0084d	88 44 0a 22	 mov	 BYTE PTR [edx+ecx+34], al

; 121  : 
; 122  : 	memcpy(this->m_EffectData[this->iLoadCount].szBuffName,	BuffName, sizeof(this->m_EffectData[this->iLoadCount].szBuffName));

  00851	6a 14		 push	 20			; 00000014H
  00853	8b 45 18	 mov	 eax, DWORD PTR _BuffName$[ebp]
  00856	50		 push	 eax
  00857	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0085a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0085d	6b d2 7f	 imul	 edx, 127		; 0000007fH
  00860	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00863	8d 4c 10 0c	 lea	 ecx, DWORD PTR [eax+edx+12]
  00867	51		 push	 ecx
  00868	e8 00 00 00 00	 call	 _memcpy
  0086d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 	memcpy(this->m_EffectData[this->iLoadCount].szBuffInfo,	BuffInfo, sizeof(this->m_EffectData[this->iLoadCount].szBuffInfo));

  00870	6a 64		 push	 100			; 00000064H
  00872	8b 45 28	 mov	 eax, DWORD PTR _BuffInfo$[ebp]
  00875	50		 push	 eax
  00876	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00879	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0087c	6b d2 7f	 imul	 edx, 127		; 0000007fH
  0087f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00882	8d 4c 10 23	 lea	 ecx, DWORD PTR [eax+edx+35]
  00886	51		 push	 ecx
  00887	e8 00 00 00 00	 call	 _memcpy
  0088c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 124  : 
; 125  : 	this->iLoadCount++;

  0088f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00892	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00895	83 c1 01	 add	 ecx, 1
  00898	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0089b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 126  : 
; 127  : 	return true;

  0089e	b0 01		 mov	 al, 1

; 128  : }

  008a0	5f		 pop	 edi
  008a1	5e		 pop	 esi
  008a2	5b		 pop	 ebx
  008a3	8b e5		 mov	 esp, ebp
  008a5	5d		 pop	 ebp
  008a6	c2 24 00	 ret	 36			; 00000024H
?Insert@CBuffEffect@@QAE_NEEEEPADEEE0@Z ENDP		; CBuffEffect::Insert
_TEXT	ENDS
PUBLIC	?IsValidIndex@CBuffEffect@@QAE_NE@Z		; CBuffEffect::IsValidIndex
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_btBuffIndex$ = 8					; size = 1
?IsValidIndex@CBuffEffect@@QAE_NE@Z PROC		; CBuffEffect::IsValidIndex
; _this$ = ecx

; 132  : {

  008b0	55		 push	 ebp
  008b1	8b ec		 mov	 ebp, esp
  008b3	83 ec 44	 sub	 esp, 68			; 00000044H
  008b6	53		 push	 ebx
  008b7	56		 push	 esi
  008b8	57		 push	 edi
  008b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : 	if ( btBuffIndex < 0 || btBuffIndex > MAX_BUFF_EFFECT-1 )

  008bc	0f b6 45 08	 movzx	 eax, BYTE PTR _btBuffIndex$[ebp]
  008c0	85 c0		 test	 eax, eax
  008c2	7c 0b		 jl	 SHORT $LN1@IsValidInd
  008c4	0f b6 45 08	 movzx	 eax, BYTE PTR _btBuffIndex$[ebp]
  008c8	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  008cd	7e 04		 jle	 SHORT $LN2@IsValidInd
$LN1@IsValidInd:

; 134  : 	{
; 135  : 		return false;

  008cf	32 c0		 xor	 al, al
  008d1	eb 02		 jmp	 SHORT $LN3@IsValidInd
$LN2@IsValidInd:

; 136  : 	}
; 137  : 
; 138  : 	return true;

  008d3	b0 01		 mov	 al, 1
$LN3@IsValidInd:

; 139  : }

  008d5	5f		 pop	 edi
  008d6	5e		 pop	 esi
  008d7	5b		 pop	 ebx
  008d8	8b e5		 mov	 esp, ebp
  008da	5d		 pop	 ebp
  008db	c2 04 00	 ret	 4
?IsValidIndex@CBuffEffect@@QAE_NE@Z ENDP		; CBuffEffect::IsValidIndex
_TEXT	ENDS
PUBLIC	?GetBuffData@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@E@Z ; CBuffEffect::GetBuffData
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$205297 = -12						; size = 4
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
_btBuffIndex$ = 8					; size = 1
?GetBuffData@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@E@Z PROC ; CBuffEffect::GetBuffData
; _this$ = ecx

; 143  : {

  008e0	55		 push	 ebp
  008e1	8b ec		 mov	 ebp, esp
  008e3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  008e6	53		 push	 ebx
  008e7	56		 push	 esi
  008e8	57		 push	 edi
  008e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 144  : 	int loc2 = 0;

  008ec	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 0

; 145  : 
; 146  : 	if ( this->IsValidIndex(btBuffIndex) == false )

  008f3	0f b6 45 08	 movzx	 eax, BYTE PTR _btBuffIndex$[ebp]
  008f7	50		 push	 eax
  008f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008fb	e8 00 00 00 00	 call	 ?IsValidIndex@CBuffEffect@@QAE_NE@Z ; CBuffEffect::IsValidIndex
  00900	0f b6 c8	 movzx	 ecx, al
  00903	85 c9		 test	 ecx, ecx
  00905	75 04		 jne	 SHORT $LN5@GetBuffDat

; 147  : 	{
; 148  : 		return NULL;

  00907	33 c0		 xor	 eax, eax
  00909	eb 44		 jmp	 SHORT $LN6@GetBuffDat
$LN5@GetBuffDat:

; 149  : 	}
; 150  : 
; 151  : #ifdef DEBUG_CODE
; 152  : 	LogAddC(1,"btBuffIndex: %d",btBuffIndex);
; 153  : #endif
; 154  : 
; 155  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  0090b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$205297[ebp], 0
  00912	eb 09		 jmp	 SHORT $LN4@GetBuffDat
$LN3@GetBuffDat:
  00914	8b 45 f4	 mov	 eax, DWORD PTR _i$205297[ebp]
  00917	83 c0 01	 add	 eax, 1
  0091a	89 45 f4	 mov	 DWORD PTR _i$205297[ebp], eax
$LN4@GetBuffDat:
  0091d	81 7d f4 fe 00
	00 00		 cmp	 DWORD PTR _i$205297[ebp], 254 ; 000000feH
  00924	7d 27		 jge	 SHORT $LN2@GetBuffDat

; 156  : 	{
; 157  : 		if ( this->m_EffectData[i].btIndex == btBuffIndex )

  00926	8b 45 f4	 mov	 eax, DWORD PTR _i$205297[ebp]
  00929	6b c0 7f	 imul	 eax, 127		; 0000007fH
  0092c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0092f	0f b6 54 01 08	 movzx	 edx, BYTE PTR [ecx+eax+8]
  00934	0f b6 45 08	 movzx	 eax, BYTE PTR _btBuffIndex$[ebp]
  00938	3b d0		 cmp	 edx, eax
  0093a	75 0f		 jne	 SHORT $LN1@GetBuffDat

; 158  : 		{
; 159  : 			return &this->m_EffectData[i];

  0093c	8b 45 f4	 mov	 eax, DWORD PTR _i$205297[ebp]
  0093f	6b c0 7f	 imul	 eax, 127		; 0000007fH
  00942	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00945	8d 44 01 08	 lea	 eax, DWORD PTR [ecx+eax+8]
  00949	eb 04		 jmp	 SHORT $LN6@GetBuffDat
$LN1@GetBuffDat:

; 160  : 		}
; 161  : 	}

  0094b	eb c7		 jmp	 SHORT $LN3@GetBuffDat
$LN2@GetBuffDat:

; 162  : 
; 163  : 	return NULL;

  0094d	33 c0		 xor	 eax, eax
$LN6@GetBuffDat:

; 164  : }

  0094f	5f		 pop	 edi
  00950	5e		 pop	 esi
  00951	5b		 pop	 ebx
  00952	8b e5		 mov	 esp, ebp
  00954	5d		 pop	 ebp
  00955	c2 04 00	 ret	 4
?GetBuffData@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@E@Z ENDP ; CBuffEffect::GetBuffData
_TEXT	ENDS
PUBLIC	?GetBuffDataFromItemCode@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@G@Z ; CBuffEffect::GetBuffDataFromItemCode
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$205307 = -12						; size = 4
_lpBuffData$ = -8					; size = 4
_this$ = -4						; size = 4
_wItemCode$ = 8						; size = 2
?GetBuffDataFromItemCode@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@G@Z PROC ; CBuffEffect::GetBuffDataFromItemCode
; _this$ = ecx

; 167  : {

  00960	55		 push	 ebp
  00961	8b ec		 mov	 ebp, esp
  00963	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00966	53		 push	 ebx
  00967	56		 push	 esi
  00968	57		 push	 edi
  00969	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 168  : 	LPBUFF_EFFECT_DATA lpBuffData = 0;

  0096c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lpBuffData$[ebp], 0

; 169  : 
; 170  : #ifdef DEBUG_CODE
; 171  : 	LogAddC(1,"wItemCode: %d",wItemCode);
; 172  : #endif
; 173  : 
; 174  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  00973	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$205307[ebp], 0
  0097a	eb 09		 jmp	 SHORT $LN4@GetBuffDat@2
$LN3@GetBuffDat@2:
  0097c	8b 45 f4	 mov	 eax, DWORD PTR _i$205307[ebp]
  0097f	83 c0 01	 add	 eax, 1
  00982	89 45 f4	 mov	 DWORD PTR _i$205307[ebp], eax
$LN4@GetBuffDat@2:
  00985	81 7d f4 fe 00
	00 00		 cmp	 DWORD PTR _i$205307[ebp], 254 ; 000000feH
  0098c	7d 3a		 jge	 SHORT $LN2@GetBuffDat@2

; 175  : 	{
; 176  : 		if( ITEMGET(this->m_EffectData[i].btItemType,this->m_EffectData[i].btItemIndex) == wItemCode )

  0098e	8b 45 f4	 mov	 eax, DWORD PTR _i$205307[ebp]
  00991	6b c0 7f	 imul	 eax, 127		; 0000007fH
  00994	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00997	0f b6 54 01 0a	 movzx	 edx, BYTE PTR [ecx+eax+10]
  0099c	c1 e2 09	 shl	 edx, 9
  0099f	8b 45 f4	 mov	 eax, DWORD PTR _i$205307[ebp]
  009a2	6b c0 7f	 imul	 eax, 127		; 0000007fH
  009a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009a8	0f b6 44 01 0b	 movzx	 eax, BYTE PTR [ecx+eax+11]
  009ad	03 d0		 add	 edx, eax
  009af	0f b7 4d 08	 movzx	 ecx, WORD PTR _wItemCode$[ebp]
  009b3	3b d1		 cmp	 edx, ecx
  009b5	75 0f		 jne	 SHORT $LN1@GetBuffDat@2

; 177  : 		{
; 178  : 			return &this->m_EffectData[i];

  009b7	8b 45 f4	 mov	 eax, DWORD PTR _i$205307[ebp]
  009ba	6b c0 7f	 imul	 eax, 127		; 0000007fH
  009bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009c0	8d 44 01 08	 lea	 eax, DWORD PTR [ecx+eax+8]
  009c4	eb 04		 jmp	 SHORT $LN5@GetBuffDat@2
$LN1@GetBuffDat@2:

; 179  : 		}
; 180  : 	}

  009c6	eb b4		 jmp	 SHORT $LN3@GetBuffDat@2
$LN2@GetBuffDat@2:

; 181  : 	return NULL;

  009c8	33 c0		 xor	 eax, eax
$LN5@GetBuffDat@2:

; 182  : }

  009ca	5f		 pop	 edi
  009cb	5e		 pop	 esi
  009cc	5b		 pop	 ebx
  009cd	8b e5		 mov	 esp, ebp
  009cf	5d		 pop	 ebp
  009d0	c2 04 00	 ret	 4
?GetBuffDataFromItemCode@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@G@Z ENDP ; CBuffEffect::GetBuffDataFromItemCode
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_BuffEffect@@YAXXZ
text$yc	SEGMENT
??__Eg_BuffEffect@@YAXXZ PROC				; `dynamic initializer for 'g_BuffEffect'', COMDAT

; 15   : CBuffEffect g_BuffEffect;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  0000e	e8 00 00 00 00	 call	 ??0CBuffEffect@@QAE@XZ	; CBuffEffect::CBuffEffect
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_BuffEffect@@YAXXZ ; `dynamic atexit destructor for 'g_BuffEffect''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_BuffEffect@@YAXXZ ENDP				; `dynamic initializer for 'g_BuffEffect''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_BuffEffect@@YAXXZ
text$yd	SEGMENT
??__Fg_BuffEffect@@YAXXZ PROC				; `dynamic atexit destructor for 'g_BuffEffect'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  0000e	e8 00 00 00 00	 call	 ??1CBuffEffect@@UAE@XZ	; CBuffEffect::~CBuffEffect
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_BuffEffect@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_BuffEffect''
text$yd	ENDS
PUBLIC	?g_BuffEffect@@3VCBuffEffect@@A			; g_BuffEffect
_BSS	SEGMENT
?g_BuffEffect@@3VCBuffEffect@@A DB 07e8cH DUP (?)	; g_BuffEffect
_BSS	ENDS
CRT$XCU	SEGMENT
_g_BuffEffect$initializer$ DD FLAT:??__Eg_BuffEffect@@YAXXZ
CRT$XCU	ENDS
END
