; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\WhisperCash.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CWhisperCash@@6B@				; CWhisperCash::`vftable'
PUBLIC	??0CWhisperCash@@QAE@XZ				; CWhisperCash::CWhisperCash
PUBLIC	??_R4CWhisperCash@@6B@				; CWhisperCash::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWhisperCash@@@8			; CWhisperCash `RTTI Type Descriptor'
PUBLIC	??_R3CWhisperCash@@8				; CWhisperCash::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWhisperCash@@8				; CWhisperCash::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWhisperCash@@8			; CWhisperCash::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECWhisperCash@@UAEPAXI@Z:PROC		; CWhisperCash::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CWhisperCash@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\whispercash.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CWhisperCash@@8 DD FLAT:??_R0?AVCWhisperCash@@@8 ; CWhisperCash::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWhisperCash@@8
rdata$r	ENDS
;	COMDAT ??_R2CWhisperCash@@8
rdata$r	SEGMENT
??_R2CWhisperCash@@8 DD FLAT:??_R1A@?0A@EA@CWhisperCash@@8 ; CWhisperCash::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWhisperCash@@8
rdata$r	SEGMENT
??_R3CWhisperCash@@8 DD 00H				; CWhisperCash::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWhisperCash@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWhisperCash@@@8
_DATA	SEGMENT
??_R0?AVCWhisperCash@@@8 DD FLAT:??_7type_info@@6B@	; CWhisperCash `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWhisperCash@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CWhisperCash@@6B@
rdata$r	SEGMENT
??_R4CWhisperCash@@6B@ DD 00H				; CWhisperCash::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWhisperCash@@@8
	DD	FLAT:??_R3CWhisperCash@@8
rdata$r	ENDS
;	COMDAT ??_7CWhisperCash@@6B@
CONST	SEGMENT
??_7CWhisperCash@@6B@ DD FLAT:??_R4CWhisperCash@@6B@	; CWhisperCash::`vftable'
	DD	FLAT:??_ECWhisperCash@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWhisperCash@@QAE@XZ PROC				; CWhisperCash::CWhisperCash
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWhisperCash@@6B@

; 8    : 	return;
; 9    : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CWhisperCash@@QAE@XZ ENDP				; CWhisperCash::CWhisperCash
_TEXT	ENDS
PUBLIC	??1CWhisperCash@@UAE@XZ				; CWhisperCash::~CWhisperCash
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWhisperCash@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWhisperCash@@UAEPAXI@Z PROC			; CWhisperCash::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWhisperCash@@UAE@XZ	; CWhisperCash::~CWhisperCash
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCWhisperCash@@UAEPAXI@Z ENDP			; CWhisperCash::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWhisperCash@@UAE@XZ PROC				; CWhisperCash::~CWhisperCash
; _this$ = ecx

; 13   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWhisperCash@@6B@

; 14   : 	return;
; 15   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CWhisperCash@@UAE@XZ ENDP				; CWhisperCash::~CWhisperCash
_TEXT	ENDS
PUBLIC	?SearchCash@CWhisperCash@@QAEHPAD@Z		; CWhisperCash::SearchCash
PUBLIC	?AddCash@CWhisperCash@@QAEHPAD@Z		; CWhisperCash::AddCash
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_memcpy:PROC
EXTRN	?gObjGetIndex@@YAHPAD@Z:PROC			; gObjGetIndex
EXTRN	?gObjUserIdConnectCheck@@YAHPADH@Z:PROC		; gObjUserIdConnectCheck
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_result$ = -16						; size = 4
_maxcount$ = -12					; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?AddCash@CWhisperCash@@QAEHPAD@Z PROC			; CWhisperCash::AddCash
; _this$ = ecx

; 19   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 50	 sub	 esp, 80			; 00000050H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	int count =0;

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 21   : 	int maxcount = 2;

  00053	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _maxcount$[ebp], 2

; 22   : 	int result;
; 23   : 
; 24   : 	result=this->SearchCash(id);

  0005a	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?SearchCash@CWhisperCash@@QAEHPAD@Z ; CWhisperCash::SearchCash
  00066	89 45 f0	 mov	 DWORD PTR _result$[ebp], eax

; 25   : 
; 26   : 	if (result != -1)

  00069	83 7d f0 ff	 cmp	 DWORD PTR _result$[ebp], -1
  0006d	74 24		 je	 SHORT $LN8@AddCash

; 27   : 	{
; 28   : 		if (gObjUserIdConnectCheck(id,result) == 0)

  0006f	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?gObjUserIdConnectCheck@@YAHPADH@Z ; gObjUserIdConnectCheck
  0007c	83 c4 08	 add	 esp, 8
  0007f	85 c0		 test	 eax, eax
  00081	75 08		 jne	 SHORT $LN7@AddCash

; 29   : 		{
; 30   : 			return -1;

  00083	83 c8 ff	 or	 eax, -1
  00086	e9 e7 00 00 00	 jmp	 $LN9@AddCash
$LN7@AddCash:

; 31   : 		}
; 32   : 		return result;

  0008b	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp]
  0008e	e9 df 00 00 00	 jmp	 $LN9@AddCash
$LN8@AddCash:

; 33   : 	}
; 34   : 
; 35   : 	result=gObjGetIndex(id);

  00093	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?gObjGetIndex@@YAHPAD@Z	; gObjGetIndex
  0009c	83 c4 04	 add	 esp, 4
  0009f	89 45 f0	 mov	 DWORD PTR _result$[ebp], eax

; 36   : 
; 37   : 	if (result == -1)

  000a2	83 7d f0 ff	 cmp	 DWORD PTR _result$[ebp], -1
  000a6	75 08		 jne	 SHORT $LN6@AddCash

; 38   : 	{
; 39   : 		return -1;

  000a8	83 c8 ff	 or	 eax, -1
  000ab	e9 c2 00 00 00	 jmp	 $LN9@AddCash
$LN6@AddCash:

; 40   : 	}
; 41   : 
; 42   : 	count=this->WChashCount ;

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000b6	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$LN5@AddCash:

; 43   : 
; 44   : 	while ( maxcount-- != 0)

  000b9	8b 45 f4	 mov	 eax, DWORD PTR _maxcount$[ebp]
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR _maxcount$[ebp]
  000bf	83 e9 01	 sub	 ecx, 1
  000c2	89 4d f4	 mov	 DWORD PTR _maxcount$[ebp], ecx
  000c5	85 c0		 test	 eax, eax
  000c7	0f 84 a2 00 00
	00		 je	 $LN4@AddCash

; 45   : 	{
; 46   : 		count++;

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000d0	83 c0 01	 add	 eax, 1
  000d3	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax

; 47   : 
; 48   : 		if (count > 1)

  000d6	83 7d f8 01	 cmp	 DWORD PTR _count$[ebp], 1
  000da	7e 07		 jle	 SHORT $LN3@AddCash

; 49   : 		{
; 50   : 			count=0;

  000dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN3@AddCash:

; 51   : 		}
; 52   : 
; 53   : 		if ( this->WChash[count].Live == 0 )

  000e3	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000e6	6b c0 18	 imul	 eax, 24			; 00000018H
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  000f1	75 77		 jne	 SHORT $LN2@AddCash

; 54   : 		{
; 55   : 			memcpy(&this->WChash[count].szId[0], id, 10 );

  000f3	6a 0a		 push	 10			; 0000000aH
  000f5	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  000f8	50		 push	 eax
  000f9	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  000fc	6b c9 18	 imul	 ecx, 24			; 00000018H
  000ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00102	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 _memcpy
  0010c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 56   : 			this->WChash[count].Live = 1;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00112	6b c0 18	 imul	 eax, 24			; 00000018H
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	c7 44 01 04 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 1

; 57   : 			this->WChash[count].m_Index = result;

  00120	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00123	6b c0 18	 imul	 eax, 24			; 00000018H
  00126	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	8b 55 f0	 mov	 edx, DWORD PTR _result$[ebp]
  0012c	89 54 01 14	 mov	 DWORD PTR [ecx+eax+20], edx

; 58   : 			this->WChash[count].m_Time = GetTickCount();

  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00136	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00139	6b c9 18	 imul	 ecx, 24			; 00000018H
  0013c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013f	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax

; 59   : 			this->WChashCount++;

  00143	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00146	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00149	83 c1 01	 add	 ecx, 1
  0014c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014f	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 60   : 
; 61   : 			if ( this->WChashCount > 1)

  00152	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00155	83 78 34 01	 cmp	 DWORD PTR [eax+52], 1
  00159	7e 0a		 jle	 SHORT $LN1@AddCash

; 62   : 			{
; 63   : 				this->WChashCount = 0;

  0015b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015e	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
$LN1@AddCash:

; 64   : 			}
; 65   : 			return result;

  00165	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp]
  00168	eb 08		 jmp	 SHORT $LN9@AddCash
$LN2@AddCash:

; 66   : 		}
; 67   : 	}

  0016a	e9 4a ff ff ff	 jmp	 $LN5@AddCash
$LN4@AddCash:

; 68   : 	return result;

  0016f	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp]
$LN9@AddCash:

; 69   : }

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 04 00	 ret	 4
?AddCash@CWhisperCash@@QAEHPAD@Z ENDP			; CWhisperCash::AddCash
_TEXT	ENDS
PUBLIC	?DelCash@CWhisperCash@@QAEXPAD@Z		; CWhisperCash::DelCash
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$ = -8						; size = 4
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?DelCash@CWhisperCash@@QAEXPAD@Z PROC			; CWhisperCash::DelCash
; _this$ = ecx

; 72   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	83 ec 48	 sub	 esp, 72			; 00000048H
  00186	53		 push	 ebx
  00187	56		 push	 esi
  00188	57		 push	 edi
  00189	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 73   : 	int n = 0;

  0018c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 74   : 
; 75   : 	for ( n=0; n<2;n++)

  00193	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0019a	eb 09		 jmp	 SHORT $LN6@DelCash
$LN5@DelCash:
  0019c	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0019f	83 c0 01	 add	 eax, 1
  001a2	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN6@DelCash:
  001a5	83 7d f8 02	 cmp	 DWORD PTR _n$[ebp], 2
  001a9	7d 5b		 jge	 SHORT $LN7@DelCash

; 76   : 	{
; 77   : 		if ( this->WChash[n].Live == 1 )

  001ab	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  001ae	6b c0 18	 imul	 eax, 24			; 00000018H
  001b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b4	83 7c 01 04 01	 cmp	 DWORD PTR [ecx+eax+4], 1
  001b9	75 49		 jne	 SHORT $LN3@DelCash

; 78   : 		{
; 79   : 			if ( this->WChash[n].szId[0] == id[0] )

  001bb	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  001be	6b c0 18	 imul	 eax, 24			; 00000018H
  001c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c4	0f be 54 01 08	 movsx	 edx, BYTE PTR [ecx+eax+8]
  001c9	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  001cc	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001cf	3b d1		 cmp	 edx, ecx
  001d1	75 31		 jne	 SHORT $LN3@DelCash

; 80   : 			{
; 81   : 				if ( strcmp(&this->WChash[n].szId[0], id) == 0)

  001d3	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  001d6	50		 push	 eax
  001d7	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  001da	6b c9 18	 imul	 ecx, 24			; 00000018H
  001dd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e0	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 _strcmp
  001ea	83 c4 08	 add	 esp, 8
  001ed	85 c0		 test	 eax, eax
  001ef	75 13		 jne	 SHORT $LN3@DelCash

; 82   : 				{
; 83   : 					this->WChash[n].Live = 0;

  001f1	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  001f4	6b c0 18	 imul	 eax, 24			; 00000018H
  001f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fa	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 84   : 					return;

  00202	eb 02		 jmp	 SHORT $LN7@DelCash
$LN3@DelCash:

; 85   : 				}
; 86   : 			}
; 87   : 		}
; 88   : 	}

  00204	eb 96		 jmp	 SHORT $LN5@DelCash
$LN7@DelCash:

; 89   : }

  00206	5f		 pop	 edi
  00207	5e		 pop	 esi
  00208	5b		 pop	 ebx
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c2 04 00	 ret	 4
?DelCash@CWhisperCash@@QAEXPAD@Z ENDP			; CWhisperCash::DelCash
; Function compile flags: /Odtp /ZI
_n$ = -8						; size = 4
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SearchCash@CWhisperCash@@QAEHPAD@Z PROC		; CWhisperCash::SearchCash
; _this$ = ecx

; 92   : {

  00210	55		 push	 ebp
  00211	8b ec		 mov	 ebp, esp
  00213	83 ec 48	 sub	 esp, 72			; 00000048H
  00216	53		 push	 ebx
  00217	56		 push	 esi
  00218	57		 push	 edi
  00219	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 	int n = 0;

  0021c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 94   : 
; 95   : 	for ( n=0; n<2;n++)

  00223	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0022a	eb 09		 jmp	 SHORT $LN6@SearchCash
$LN5@SearchCash:
  0022c	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0022f	83 c0 01	 add	 eax, 1
  00232	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN6@SearchCash:
  00235	83 7d f8 02	 cmp	 DWORD PTR _n$[ebp], 2
  00239	7d 6a		 jge	 SHORT $LN4@SearchCash

; 96   : 	{
; 97   : 		if ( this->WChash[n].Live == 1 )

  0023b	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0023e	6b c0 18	 imul	 eax, 24			; 00000018H
  00241	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00244	83 7c 01 04 01	 cmp	 DWORD PTR [ecx+eax+4], 1
  00249	75 58		 jne	 SHORT $LN3@SearchCash

; 98   : 		{
; 99   : 			if ( this->WChash[n].szId[0] == id[0] )

  0024b	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0024e	6b c0 18	 imul	 eax, 24			; 00000018H
  00251	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00254	0f be 54 01 08	 movsx	 edx, BYTE PTR [ecx+eax+8]
  00259	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0025c	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0025f	3b d1		 cmp	 edx, ecx
  00261	75 40		 jne	 SHORT $LN3@SearchCash

; 100  : 			{
; 101  : 				if ( strcmp(&this->WChash[n].szId[0], id) == 0)

  00263	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  00266	50		 push	 eax
  00267	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  0026a	6b c9 18	 imul	 ecx, 24			; 00000018H
  0026d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00270	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  00274	50		 push	 eax
  00275	e8 00 00 00 00	 call	 _strcmp
  0027a	83 c4 08	 add	 esp, 8
  0027d	85 c0		 test	 eax, eax
  0027f	75 22		 jne	 SHORT $LN3@SearchCash

; 102  : 				{
; 103  : 					this->WChash[n].m_Time = GetTickCount();

  00281	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00287	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  0028a	6b c9 18	 imul	 ecx, 24			; 00000018H
  0028d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00290	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax

; 104  : 					return this->WChash[n].m_Index ;

  00294	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00297	6b c0 18	 imul	 eax, 24			; 00000018H
  0029a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029d	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  002a1	eb 05		 jmp	 SHORT $LN7@SearchCash
$LN3@SearchCash:

; 105  : 				}
; 106  : 			}
; 107  : 		}
; 108  : 	}

  002a3	eb 87		 jmp	 SHORT $LN5@SearchCash
$LN4@SearchCash:

; 109  : 	
; 110  : 	return -1;

  002a5	83 c8 ff	 or	 eax, -1
$LN7@SearchCash:

; 111  : }

  002a8	5f		 pop	 edi
  002a9	5e		 pop	 esi
  002aa	5b		 pop	 ebx
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c2 04 00	 ret	 4
?SearchCash@CWhisperCash@@QAEHPAD@Z ENDP		; CWhisperCash::SearchCash
_TEXT	ENDS
PUBLIC	?TimeCheckCashDelete@CWhisperCash@@QAEXXZ	; CWhisperCash::TimeCheckCashDelete
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_CurTime$ = -12						; size = 4
_n$ = -8						; size = 4
_this$ = -4						; size = 4
?TimeCheckCashDelete@CWhisperCash@@QAEXXZ PROC		; CWhisperCash::TimeCheckCashDelete
; _this$ = ecx

; 114  : {

  002c0	55		 push	 ebp
  002c1	8b ec		 mov	 ebp, esp
  002c3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  002c6	53		 push	 ebx
  002c7	56		 push	 esi
  002c8	57		 push	 edi
  002c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	int n = 0;

  002cc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 116  : 	DWORD CurTime = GetTickCount();

  002d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  002d9	89 45 f4	 mov	 DWORD PTR _CurTime$[ebp], eax

; 117  : 
; 118  : 	for ( n=0;n<2;n++)

  002dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  002e3	eb 09		 jmp	 SHORT $LN5@TimeCheckC
$LN4@TimeCheckC:
  002e5	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  002e8	83 c0 01	 add	 eax, 1
  002eb	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN5@TimeCheckC:
  002ee	83 7d f8 02	 cmp	 DWORD PTR _n$[ebp], 2
  002f2	7d 3b		 jge	 SHORT $LN6@TimeCheckC

; 119  : 	{
; 120  : 		if ( this->WChash[n].Live == 1 )

  002f4	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  002f7	6b c0 18	 imul	 eax, 24			; 00000018H
  002fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002fd	83 7c 01 04 01	 cmp	 DWORD PTR [ecx+eax+4], 1
  00302	75 29		 jne	 SHORT $LN2@TimeCheckC

; 121  : 		{
; 122  : 			if ( (CurTime-this->WChash[n].m_Time ) > 60000)

  00304	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00307	6b c0 18	 imul	 eax, 24			; 00000018H
  0030a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0030d	8b 55 f4	 mov	 edx, DWORD PTR _CurTime$[ebp]
  00310	2b 54 01 18	 sub	 edx, DWORD PTR [ecx+eax+24]
  00314	81 fa 60 ea 00
	00		 cmp	 edx, 60000		; 0000ea60H
  0031a	76 11		 jbe	 SHORT $LN2@TimeCheckC

; 123  : 			{
; 124  : 				this->WChash[n].Live=0;

  0031c	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0031f	6b c0 18	 imul	 eax, 24			; 00000018H
  00322	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00325	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0
$LN2@TimeCheckC:

; 125  : 			}
; 126  : 		}
; 127  : 	}

  0032d	eb b6		 jmp	 SHORT $LN4@TimeCheckC
$LN6@TimeCheckC:

; 128  : }

  0032f	5f		 pop	 edi
  00330	5e		 pop	 esi
  00331	5b		 pop	 ebx
  00332	8b e5		 mov	 esp, ebp
  00334	5d		 pop	 ebp
  00335	c3		 ret	 0
?TimeCheckCashDelete@CWhisperCash@@QAEXXZ ENDP		; CWhisperCash::TimeCheckCashDelete
_TEXT	ENDS
END
