; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\Message.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MsgNormal@@YAXHPADZZ				; MsgNormal
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	_vsprintf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\message.cpp
_TEXT	SEGMENT
_pArguments$ = -1032					; size = 4
_szTemp$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_szMsg$ = 12						; size = 4
?MsgNormal@@YAXHPADZZ PROC				; MsgNormal

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 04 00
	00		 sub	 esp, 1096		; 00000448H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 10   : #if(ENABLE_TEXTCHANGE)
; 11   : 	if(g_ExLicense.CheckUser(eExUB::masonX) || g_ExLicense.CheckUser(eExUB::Local))
; 12   : 	{
; 13   : 		szMsg = g_Text.Change(szMsg);
; 14   : 	}
; 15   : #endif
; 16   : 
; 17   : 	char szTemp[1024];
; 18   : 	va_list pArguments;
; 19   : 	va_start(pArguments,szMsg);

  00016	8d 45 10	 lea	 eax, DWORD PTR _szMsg$[ebp+4]
  00019	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _pArguments$[ebp], eax

; 20   : 	vsprintf(szTemp,szMsg,pArguments);

  0001f	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _pArguments$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _szMsg$[ebp]
  00029	51		 push	 ecx
  0002a	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _szTemp$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _vsprintf
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 21   : 	va_end(pArguments);

  00039	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$[ebp], 0

; 22   : 	
; 23   : 	GCServerMsgStringSend(szTemp, aIndex,1); // 0 = Global MSG; 1 = System information; 2 = Guild notice

  00043	6a 01		 push	 1
  00045	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00048	50		 push	 eax
  00049	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 24   : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005e	33 cd		 xor	 ecx, ebp
  00060	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?MsgNormal@@YAXHPADZZ ENDP				; MsgNormal
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MessageChat@@YAXHPADZZ				; MessageChat
EXTRN	_free:PROC
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memset:PROC
EXTRN	_malloc:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Len$ = -1040						; size = 4
_Packet$ = -1036					; size = 4
_pArguments$ = -1032					; size = 4
_Message$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_szMsg$ = 12						; size = 4
?MessageChat@@YAXHPADZZ PROC				; MessageChat

; 28   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	81 ec 50 04 00
	00		 sub	 esp, 1104		; 00000450H
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0007e	33 c5		 xor	 eax, ebp
  00080	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00083	53		 push	 ebx
  00084	56		 push	 esi
  00085	57		 push	 edi

; 29   : #if(ENABLE_TEXTCHANGE)
; 30   : 	if(g_ExLicense.CheckUser(eExUB::masonX) || g_ExLicense.CheckUser(eExUB::Local))
; 31   : 	{
; 32   : 		szMsg = g_Text.Change(szMsg);
; 33   : 	}
; 34   : #endif
; 35   : 
; 36   : 	char Message[1024];
; 37   : 	va_list pArguments;
; 38   :     va_start(pArguments,szMsg);

  00086	8d 45 10	 lea	 eax, DWORD PTR _szMsg$[ebp+4]
  00089	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _pArguments$[ebp], eax

; 39   : 	//vsprintf_s(Message,sizeof(Message), szMsg, pArguments);
; 40   : 	vsprintf(Message,szMsg,pArguments);

  0008f	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _pArguments$[ebp]
  00095	50		 push	 eax
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _szMsg$[ebp]
  00099	51		 push	 ecx
  0009a	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _Message$[ebp]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 _vsprintf
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   : 	va_end(pArguments);

  000a9	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$[ebp], 0

; 42   : 	BYTE *Packet;
; 43   : 	Packet = (BYTE*) malloc(200);

  000b3	68 c8 00 00 00	 push	 200			; 000000c8H
  000b8	e8 00 00 00 00	 call	 _malloc
  000bd	83 c4 04	 add	 esp, 4
  000c0	89 85 f4 fb ff
	ff		 mov	 DWORD PTR _Packet$[ebp], eax

; 44   : 	memset(Packet, 0x00, 200);

  000c6	68 c8 00 00 00	 push	 200			; 000000c8H
  000cb	6a 00		 push	 0
  000cd	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _memset
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 45   : 	*Packet = 0xC1;

  000dc	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  000e2	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 46   : 	*(Packet+2) = 0x00;

  000e5	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  000eb	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 47   : 	memcpy((Packet+13), Message, strlen(Message));

  000ef	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _Message$[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _strlen
  000fb	83 c4 04	 add	 esp, 4
  000fe	50		 push	 eax
  000ff	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _Message$[ebp]
  00105	51		 push	 ecx
  00106	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _Packet$[ebp]
  0010c	83 c2 0d	 add	 edx, 13			; 0000000dH
  0010f	52		 push	 edx
  00110	e8 00 00 00 00	 call	 _memcpy
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   : 	int Len = (strlen(Message) + 0x13);

  00118	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _Message$[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 _strlen
  00124	83 c4 04	 add	 esp, 4
  00127	83 c0 13	 add	 eax, 19			; 00000013H
  0012a	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _Len$[ebp], eax

; 49   : 	*(Packet+1) = Len;

  00130	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  00136	8a 8d f0 fb ff
	ff		 mov	 cl, BYTE PTR _Len$[ebp]
  0013c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 50   : 	DataSend(aIndex,Packet, Len);

  0013f	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _Len$[ebp]
  00145	50		 push	 eax
  00146	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _Packet$[ebp]
  0014c	51		 push	 ecx
  0014d	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00156	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 	free (Packet);

  00159	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 _free
  00165	83 c4 04	 add	 esp, 4

; 52   : }

  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	5b		 pop	 ebx
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016e	33 cd		 xor	 ecx, ebp
  00170	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c3		 ret	 0
?MessageChat@@YAXHPADZZ ENDP				; MessageChat
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MessageAllChat@@YAXHPADZZ			; MessageAllChat
EXTRN	?DataSendAll@@YAXPAEH@Z:PROC			; DataSendAll
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Len$ = -1040						; size = 4
_Packet$ = -1036					; size = 4
_pArguments$ = -1032					; size = 4
_Message$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_szMsg$ = 12						; size = 4
?MessageAllChat@@YAXHPADZZ PROC				; MessageAllChat

; 56   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	81 ec 50 04 00
	00		 sub	 esp, 1104		; 00000450H
  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0018e	33 c5		 xor	 eax, ebp
  00190	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00193	53		 push	 ebx
  00194	56		 push	 esi
  00195	57		 push	 edi

; 57   : 	char Message[1024];
; 58   : 	va_list pArguments;
; 59   :     va_start(pArguments,szMsg);

  00196	8d 45 10	 lea	 eax, DWORD PTR _szMsg$[ebp+4]
  00199	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _pArguments$[ebp], eax

; 60   : 	//vsprintf_s(Message,sizeof(Message), szMsg, pArguments);
; 61   : 	vsprintf(Message,szMsg,pArguments);

  0019f	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _pArguments$[ebp]
  001a5	50		 push	 eax
  001a6	8b 4d 0c	 mov	 ecx, DWORD PTR _szMsg$[ebp]
  001a9	51		 push	 ecx
  001aa	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _Message$[ebp]
  001b0	52		 push	 edx
  001b1	e8 00 00 00 00	 call	 _vsprintf
  001b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 62   : 	va_end(pArguments);

  001b9	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$[ebp], 0

; 63   : 	BYTE *Packet;
; 64   : 	Packet = (BYTE*) malloc(200);

  001c3	68 c8 00 00 00	 push	 200			; 000000c8H
  001c8	e8 00 00 00 00	 call	 _malloc
  001cd	83 c4 04	 add	 esp, 4
  001d0	89 85 f4 fb ff
	ff		 mov	 DWORD PTR _Packet$[ebp], eax

; 65   : 	memset(Packet, 0x00, 200);

  001d6	68 c8 00 00 00	 push	 200			; 000000c8H
  001db	6a 00		 push	 0
  001dd	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _memset
  001e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   : 	*Packet = 0xC1;

  001ec	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  001f2	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 67   : 	*(Packet+2) = 0x00;

  001f5	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  001fb	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 68   : 	memcpy((Packet+13), Message, strlen(Message));

  001ff	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _Message$[ebp]
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 _strlen
  0020b	83 c4 04	 add	 esp, 4
  0020e	50		 push	 eax
  0020f	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _Message$[ebp]
  00215	51		 push	 ecx
  00216	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _Packet$[ebp]
  0021c	83 c2 0d	 add	 edx, 13			; 0000000dH
  0021f	52		 push	 edx
  00220	e8 00 00 00 00	 call	 _memcpy
  00225	83 c4 0c	 add	 esp, 12			; 0000000cH

; 69   : 	int Len = (strlen(Message) + 0x13);

  00228	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _Message$[ebp]
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 _strlen
  00234	83 c4 04	 add	 esp, 4
  00237	83 c0 13	 add	 eax, 19			; 00000013H
  0023a	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _Len$[ebp], eax

; 70   : 	*(Packet+1) = Len;

  00240	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  00246	8a 8d f0 fb ff
	ff		 mov	 cl, BYTE PTR _Len$[ebp]
  0024c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 71   : 	DataSendAll(Packet, Len);

  0024f	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _Len$[ebp]
  00255	50		 push	 eax
  00256	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _Packet$[ebp]
  0025c	51		 push	 ecx
  0025d	e8 00 00 00 00	 call	 ?DataSendAll@@YAXPAEH@Z	; DataSendAll
  00262	83 c4 08	 add	 esp, 8

; 72   : 	free (Packet);

  00265	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  0026b	50		 push	 eax
  0026c	e8 00 00 00 00	 call	 _free
  00271	83 c4 04	 add	 esp, 4

; 73   : }

  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	5b		 pop	 ebx
  00277	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027a	33 cd		 xor	 ecx, ebp
  0027c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c3		 ret	 0
?MessageAllChat@@YAXHPADZZ ENDP				; MessageAllChat
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MessaageAllGlobal@@YAXPADZZ			; MessaageAllGlobal
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pArguments$ = -1032					; size = 4
_szTemp$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_szMsg$ = 8						; size = 4
?MessaageAllGlobal@@YAXPADZZ PROC			; MessaageAllGlobal

; 77   : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	81 ec 48 04 00
	00		 sub	 esp, 1096		; 00000448H
  00299	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0029e	33 c5		 xor	 eax, ebp
  002a0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  002a3	53		 push	 ebx
  002a4	56		 push	 esi
  002a5	57		 push	 edi

; 78   : #if(ENABLE_TEXTCHANGE)
; 79   : 	if(g_ExLicense.CheckUser(eExUB::masonX) || g_ExLicense.CheckUser(eExUB::Local))
; 80   : 	{
; 81   : 		szMsg = g_Text.Change(szMsg);
; 82   : 	}
; 83   : #endif
; 84   : 	char szTemp[1024];
; 85   : 	va_list pArguments;
; 86   : 	va_start(pArguments,szMsg);

  002a6	8d 45 0c	 lea	 eax, DWORD PTR _szMsg$[ebp+4]
  002a9	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _pArguments$[ebp], eax

; 87   : 	vsprintf(szTemp,szMsg,pArguments);

  002af	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _pArguments$[ebp]
  002b5	50		 push	 eax
  002b6	8b 4d 08	 mov	 ecx, DWORD PTR _szMsg$[ebp]
  002b9	51		 push	 ecx
  002ba	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _szTemp$[ebp]
  002c0	52		 push	 edx
  002c1	e8 00 00 00 00	 call	 _vsprintf
  002c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 88   : 	va_end(pArguments);

  002c9	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$[ebp], 0

; 89   : 	AllSendServerMsg(szTemp);

  002d3	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  002df	83 c4 04	 add	 esp, 4

; 90   : }

  002e2	5f		 pop	 edi
  002e3	5e		 pop	 esi
  002e4	5b		 pop	 ebx
  002e5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e8	33 cd		 xor	 ecx, ebp
  002ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ef	8b e5		 mov	 esp, ebp
  002f1	5d		 pop	 ebp
  002f2	c3		 ret	 0
?MessaageAllGlobal@@YAXPADZZ ENDP			; MessaageAllGlobal
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ChatMessageOne@@YAXHPADZZ			; ChatMessageOne
EXTRN	_strcpy:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_len$ = -112						; size = 4
_pWhisper$ = -108					; size = 102
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_msg$ = 12						; size = 4
?ChatMessageOne@@YAXHPADZZ PROC				; ChatMessageOne

; 93   : {

  00300	55		 push	 ebp
  00301	8b ec		 mov	 ebp, esp
  00303	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00309	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0030e	33 c5		 xor	 eax, ebp
  00310	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00313	53		 push	 ebx
  00314	56		 push	 esi
  00315	57		 push	 edi

; 94   : 	PMSG_CHATDATA pWhisper;
; 95   : 	PHeadSetB((LPBYTE)&pWhisper, 0x00, sizeof(pWhisper));

  00316	6a 66		 push	 102			; 00000066H
  00318	6a 00		 push	 0
  0031a	8d 45 94	 lea	 eax, DWORD PTR _pWhisper$[ebp]
  0031d	50		 push	 eax
  0031e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00323	83 c4 0c	 add	 esp, 12			; 0000000cH

; 96   : 	strcpy(pWhisper.chatid, gObj[aIndex].Name);

  00326	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00329	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0032f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00335	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  00339	52		 push	 edx
  0033a	8d 45 97	 lea	 eax, DWORD PTR _pWhisper$[ebp+3]
  0033d	50		 push	 eax
  0033e	e8 00 00 00 00	 call	 _strcpy
  00343	83 c4 08	 add	 esp, 8

; 97   : 	memcpy(pWhisper.chatmsg, msg, sizeof(pWhisper.chatmsg));

  00346	6a 59		 push	 89			; 00000059H
  00348	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  0034b	50		 push	 eax
  0034c	8d 4d a1	 lea	 ecx, DWORD PTR _pWhisper$[ebp+13]
  0034f	51		 push	 ecx
  00350	e8 00 00 00 00	 call	 _memcpy
  00355	83 c4 0c	 add	 esp, 12			; 0000000cH

; 98   : 	int len = strlen(pWhisper.chatmsg);

  00358	8d 45 a1	 lea	 eax, DWORD PTR _pWhisper$[ebp+13]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 _strlen
  00361	83 c4 04	 add	 esp, 4
  00364	89 45 90	 mov	 DWORD PTR _len$[ebp], eax

; 99   : 
; 100  : 	if ( len > 0 )

  00367	83 7d 90 00	 cmp	 DWORD PTR _len$[ebp], 0
  0036b	7e 29		 jle	 SHORT $LN2@ChatMessag

; 101  : 	{
; 102  : 		pWhisper.h.size -= sizeof(pWhisper.chatmsg);

  0036d	0f b6 45 95	 movzx	 eax, BYTE PTR _pWhisper$[ebp+1]
  00371	83 e8 59	 sub	 eax, 89			; 00000059H
  00374	88 45 95	 mov	 BYTE PTR _pWhisper$[ebp+1], al

; 103  : 		pWhisper.h.size += len + 1;

  00377	0f b6 45 95	 movzx	 eax, BYTE PTR _pWhisper$[ebp+1]
  0037b	8b 4d 90	 mov	 ecx, DWORD PTR _len$[ebp]
  0037e	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  00382	88 55 95	 mov	 BYTE PTR _pWhisper$[ebp+1], dl

; 104  : 
; 105  : 		DataSendAll((LPBYTE)&pWhisper, pWhisper.h.size);

  00385	0f b6 45 95	 movzx	 eax, BYTE PTR _pWhisper$[ebp+1]
  00389	50		 push	 eax
  0038a	8d 4d 94	 lea	 ecx, DWORD PTR _pWhisper$[ebp]
  0038d	51		 push	 ecx
  0038e	e8 00 00 00 00	 call	 ?DataSendAll@@YAXPAEH@Z	; DataSendAll
  00393	83 c4 08	 add	 esp, 8
$LN2@ChatMessag:

; 106  : 	}
; 107  : }

  00396	5f		 pop	 edi
  00397	5e		 pop	 esi
  00398	5b		 pop	 ebx
  00399	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0039c	33 cd		 xor	 ecx, ebp
  0039e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a3	8b e5		 mov	 esp, ebp
  003a5	5d		 pop	 ebp
  003a6	c3		 ret	 0
?ChatMessageOne@@YAXHPADZZ ENDP				; ChatMessageOne
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ChatMessageTwo@@YAXHPADZZ			; ChatMessageTwo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_len$ = -112						; size = 4
_pWhisper$ = -108					; size = 102
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_msg$ = 12						; size = 4
?ChatMessageTwo@@YAXHPADZZ PROC				; ChatMessageTwo

; 110  : {

  003b0	55		 push	 ebp
  003b1	8b ec		 mov	 ebp, esp
  003b3	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  003b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  003be	33 c5		 xor	 eax, ebp
  003c0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  003c3	53		 push	 ebx
  003c4	56		 push	 esi
  003c5	57		 push	 edi

; 111  : 	PMSG_CHATDATA_WHISPER pWhisper;
; 112  : 	PHeadSetB((LPBYTE)&pWhisper, 0x02, sizeof(pWhisper));

  003c6	6a 66		 push	 102			; 00000066H
  003c8	6a 02		 push	 2
  003ca	8d 45 94	 lea	 eax, DWORD PTR _pWhisper$[ebp]
  003cd	50		 push	 eax
  003ce	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  003d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 113  : 	strcpy(pWhisper.id, gObj[aIndex].Name);

  003d6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  003d9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  003df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003e5	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  003e9	52		 push	 edx
  003ea	8d 45 97	 lea	 eax, DWORD PTR _pWhisper$[ebp+3]
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 _strcpy
  003f3	83 c4 08	 add	 esp, 8

; 114  : 	memcpy(pWhisper.chatmsg, msg, sizeof(pWhisper.chatmsg));

  003f6	6a 59		 push	 89			; 00000059H
  003f8	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  003fb	50		 push	 eax
  003fc	8d 4d a1	 lea	 ecx, DWORD PTR _pWhisper$[ebp+13]
  003ff	51		 push	 ecx
  00400	e8 00 00 00 00	 call	 _memcpy
  00405	83 c4 0c	 add	 esp, 12			; 0000000cH

; 115  : 	int len = strlen(pWhisper.chatmsg);

  00408	8d 45 a1	 lea	 eax, DWORD PTR _pWhisper$[ebp+13]
  0040b	50		 push	 eax
  0040c	e8 00 00 00 00	 call	 _strlen
  00411	83 c4 04	 add	 esp, 4
  00414	89 45 90	 mov	 DWORD PTR _len$[ebp], eax

; 116  : 
; 117  : 	if ( len > 0 )

  00417	83 7d 90 00	 cmp	 DWORD PTR _len$[ebp], 0
  0041b	7e 29		 jle	 SHORT $LN2@ChatMessag@2

; 118  : 	{
; 119  : 		pWhisper.h.size -= sizeof(pWhisper.chatmsg);

  0041d	0f b6 45 95	 movzx	 eax, BYTE PTR _pWhisper$[ebp+1]
  00421	83 e8 59	 sub	 eax, 89			; 00000059H
  00424	88 45 95	 mov	 BYTE PTR _pWhisper$[ebp+1], al

; 120  : 		pWhisper.h.size += len + 1;

  00427	0f b6 45 95	 movzx	 eax, BYTE PTR _pWhisper$[ebp+1]
  0042b	8b 4d 90	 mov	 ecx, DWORD PTR _len$[ebp]
  0042e	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  00432	88 55 95	 mov	 BYTE PTR _pWhisper$[ebp+1], dl

; 121  : 
; 122  : 		DataSendAll((LPBYTE)&pWhisper, pWhisper.h.size);

  00435	0f b6 45 95	 movzx	 eax, BYTE PTR _pWhisper$[ebp+1]
  00439	50		 push	 eax
  0043a	8d 4d 94	 lea	 ecx, DWORD PTR _pWhisper$[ebp]
  0043d	51		 push	 ecx
  0043e	e8 00 00 00 00	 call	 ?DataSendAll@@YAXPAEH@Z	; DataSendAll
  00443	83 c4 08	 add	 esp, 8
$LN2@ChatMessag@2:

; 123  : 	}
; 124  : }

  00446	5f		 pop	 edi
  00447	5e		 pop	 esi
  00448	5b		 pop	 ebx
  00449	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044c	33 cd		 xor	 ecx, ebp
  0044e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00453	8b e5		 mov	 esp, ebp
  00455	5d		 pop	 ebp
  00456	c3		 ret	 0
?ChatMessageTwo@@YAXHPADZZ ENDP				; ChatMessageTwo
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD@@QAEXPAEEE@Z			; PBMSG_HEAD::set
PUBLIC	__$ArrayPad$
PUBLIC	?MessageSendEx@@YAXHHPAD0ZZ			; MessageSendEx
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMessage$ = -1132					; size = 104
_szTemp$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_Type$ = 12						; size = 4
_Sender$ = 16						; size = 4
_Message$ = 20						; size = 4
?MessageSendEx@@YAXHHPAD0ZZ PROC			; MessageSendEx

; 137  : {

  00460	55		 push	 ebp
  00461	8b ec		 mov	 ebp, esp
  00463	81 ec ac 04 00
	00		 sub	 esp, 1196		; 000004acH
  00469	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0046e	33 c5		 xor	 eax, ebp
  00470	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00473	53		 push	 ebx
  00474	56		 push	 esi
  00475	57		 push	 edi

; 138  : #if(ENABLE_TEXTCHANGE)
; 139  : 	if(g_ExLicense.CheckUser(eExUB::masonX) || g_ExLicense.CheckUser(eExUB::Local))
; 140  : 	{
; 141  : 		Message = g_Text.Change(Message);
; 142  : 	}
; 143  : #endif
; 144  : 
; 145  : 	char szTemp[1024];
; 146  : 	
; 147  : #ifdef FIX_CRASH_PROCENT_IN_PRIVATE_CHAT
; 148  : 	strcpy(szTemp, Message);

  00476	8b 45 14	 mov	 eax, DWORD PTR _Message$[ebp]
  00479	50		 push	 eax
  0047a	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  00480	51		 push	 ecx
  00481	e8 00 00 00 00	 call	 _strcpy
  00486	83 c4 08	 add	 esp, 8

; 149  : #else
; 150  : 	va_list pArguments;
; 151  : 	va_start(pArguments, Message);
; 152  : 	vsprintf(szTemp, Message, pArguments);
; 153  : 	va_end(pArguments);
; 154  : #endif // FIX_CRASH_PROCENT_IN_PRIVATE_CHAT
; 155  : 
; 156  : 	// ----
; 157  : 	CHAT_WHISPER_EX pMessage;
; 158  : 	memcpy(pMessage.Name, Sender, 10);

  00489	6a 0a		 push	 10			; 0000000aH
  0048b	8b 45 10	 mov	 eax, DWORD PTR _Sender$[ebp]
  0048e	50		 push	 eax
  0048f	8d 8d 97 fb ff
	ff		 lea	 ecx, DWORD PTR _pMessage$[ebp+3]
  00495	51		 push	 ecx
  00496	e8 00 00 00 00	 call	 _memcpy
  0049b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 159  : 	memcpy(pMessage.Message, szTemp, 90);

  0049e	6a 5a		 push	 90			; 0000005aH
  004a0	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  004a6	50		 push	 eax
  004a7	8d 8d a1 fb ff
	ff		 lea	 ecx, DWORD PTR _pMessage$[ebp+13]
  004ad	51		 push	 ecx
  004ae	e8 00 00 00 00	 call	 _memcpy
  004b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 160  : 	pMessage.Type = Type;	//Test na Crash

  004b6	8a 45 0c	 mov	 al, BYTE PTR _Type$[ebp]
  004b9	88 85 fb fb ff
	ff		 mov	 BYTE PTR _pMessage$[ebp+103], al

; 161  : 	pMessage.Head.set((LPBYTE)&pMessage, 2, sizeof(CHAT_WHISPER_EX));

  004bf	6a 68		 push	 104			; 00000068H
  004c1	6a 02		 push	 2
  004c3	8d 85 94 fb ff
	ff		 lea	 eax, DWORD PTR _pMessage$[ebp]
  004c9	50		 push	 eax
  004ca	8d 8d 94 fb ff
	ff		 lea	 ecx, DWORD PTR _pMessage$[ebp]
  004d0	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD@@QAEXPAEEE@Z ; PBMSG_HEAD::set

; 162  : 	DataSend(aIndex,(LPBYTE)&pMessage, pMessage.Head.size);

  004d5	0f b6 85 95 fb
	ff ff		 movzx	 eax, BYTE PTR _pMessage$[ebp+1]
  004dc	50		 push	 eax
  004dd	8d 8d 94 fb ff
	ff		 lea	 ecx, DWORD PTR _pMessage$[ebp]
  004e3	51		 push	 ecx
  004e4	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  004e7	52		 push	 edx
  004e8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  004ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 163  : }

  004f0	5f		 pop	 edi
  004f1	5e		 pop	 esi
  004f2	5b		 pop	 ebx
  004f3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004f6	33 cd		 xor	 ecx, ebp
  004f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004fd	8b e5		 mov	 esp, ebp
  004ff	5d		 pop	 ebp
  00500	c3		 ret	 0
?MessageSendEx@@YAXHHPAD0ZZ ENDP			; MessageSendEx
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD@@QAEXPAEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 1
?set@PBMSG_HEAD@@QAEXPAEEE@Z PROC			; PBMSG_HEAD::set, COMDAT
; _this$ = ecx

; 80   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 82   : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 10	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 83   : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 84   : 	};	// line : 22

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
?set@PBMSG_HEAD@@QAEXPAEEE@Z ENDP			; PBMSG_HEAD::set
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MessageSendAllEx@@YAXHPAD0ZZ			; MessageSendAllEx
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\message.cpp
_TEXT	SEGMENT
_pMessage$ = -1136					; size = 104
_pArguments$ = -1032					; size = 4
_szTemp$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_Type$ = 8						; size = 4
_Sender$ = 12						; size = 4
_Message$ = 16						; size = 4
?MessageSendAllEx@@YAXHPAD0ZZ PROC			; MessageSendAllEx

; 166  : {

  00510	55		 push	 ebp
  00511	8b ec		 mov	 ebp, esp
  00513	81 ec b0 04 00
	00		 sub	 esp, 1200		; 000004b0H
  00519	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0051e	33 c5		 xor	 eax, ebp
  00520	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00523	53		 push	 ebx
  00524	56		 push	 esi
  00525	57		 push	 edi

; 167  : #if(ENABLE_TEXTCHANGE)
; 168  : 	if(g_ExLicense.CheckUser(eExUB::masonX) || g_ExLicense.CheckUser(eExUB::Local))
; 169  : 	{
; 170  : 		Message = g_Text.Change(Message);
; 171  : 	}
; 172  : #endif
; 173  : 
; 174  : 	char szTemp[1024];
; 175  : 	va_list pArguments;
; 176  : 	va_start(pArguments, Message);

  00526	8d 45 14	 lea	 eax, DWORD PTR _Message$[ebp+4]
  00529	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _pArguments$[ebp], eax

; 177  : 	vsprintf(szTemp, Message, pArguments);

  0052f	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _pArguments$[ebp]
  00535	50		 push	 eax
  00536	8b 4d 10	 mov	 ecx, DWORD PTR _Message$[ebp]
  00539	51		 push	 ecx
  0053a	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _szTemp$[ebp]
  00540	52		 push	 edx
  00541	e8 00 00 00 00	 call	 _vsprintf
  00546	83 c4 0c	 add	 esp, 12			; 0000000cH

; 178  : 	va_end(pArguments);

  00549	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$[ebp], 0

; 179  : 	// ----
; 180  : 	CHAT_WHISPER_EX pMessage;
; 181  : 	memcpy(pMessage.Name, Sender, 10);

  00553	6a 0a		 push	 10			; 0000000aH
  00555	8b 45 0c	 mov	 eax, DWORD PTR _Sender$[ebp]
  00558	50		 push	 eax
  00559	8d 8d 93 fb ff
	ff		 lea	 ecx, DWORD PTR _pMessage$[ebp+3]
  0055f	51		 push	 ecx
  00560	e8 00 00 00 00	 call	 _memcpy
  00565	83 c4 0c	 add	 esp, 12			; 0000000cH

; 182  : 	memcpy(pMessage.Message, szTemp, 90);

  00568	6a 5a		 push	 90			; 0000005aH
  0056a	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00570	50		 push	 eax
  00571	8d 8d 9d fb ff
	ff		 lea	 ecx, DWORD PTR _pMessage$[ebp+13]
  00577	51		 push	 ecx
  00578	e8 00 00 00 00	 call	 _memcpy
  0057d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 183  : 	pMessage.Type = Type;	//Test na Crash

  00580	8a 45 08	 mov	 al, BYTE PTR _Type$[ebp]
  00583	88 85 f7 fb ff
	ff		 mov	 BYTE PTR _pMessage$[ebp+103], al

; 184  : 	pMessage.Head.set((LPBYTE)&pMessage, 2, sizeof(CHAT_WHISPER_EX));

  00589	6a 68		 push	 104			; 00000068H
  0058b	6a 02		 push	 2
  0058d	8d 85 90 fb ff
	ff		 lea	 eax, DWORD PTR _pMessage$[ebp]
  00593	50		 push	 eax
  00594	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR _pMessage$[ebp]
  0059a	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD@@QAEXPAEEE@Z ; PBMSG_HEAD::set

; 185  : 	DataSendAll((LPBYTE)&pMessage, pMessage.Head.size);

  0059f	0f b6 85 91 fb
	ff ff		 movzx	 eax, BYTE PTR _pMessage$[ebp+1]
  005a6	50		 push	 eax
  005a7	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR _pMessage$[ebp]
  005ad	51		 push	 ecx
  005ae	e8 00 00 00 00	 call	 ?DataSendAll@@YAXPAEH@Z	; DataSendAll
  005b3	83 c4 08	 add	 esp, 8

; 186  : 
; 187  : #if(EXLICENSE_SERVER)
; 188  : 	//g_ExLicenseProtocol.GLChatMessage(pMessage.Name, pMessage.Message);
; 189  : #endif
; 190  : }

  005b6	5f		 pop	 edi
  005b7	5e		 pop	 esi
  005b8	5b		 pop	 ebx
  005b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005bc	33 cd		 xor	 ecx, ebp
  005be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005c3	8b e5		 mov	 esp, ebp
  005c5	5d		 pop	 ebp
  005c6	c3		 ret	 0
?MessageSendAllEx@@YAXHPAD0ZZ ENDP			; MessageSendAllEx
_TEXT	ENDS
END
