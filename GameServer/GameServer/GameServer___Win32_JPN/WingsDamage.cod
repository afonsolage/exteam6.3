; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\WingsDamage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gWingsDamage@@3VcWingsDamage@@A		; gWingsDamage
_BSS	SEGMENT
?gWingsDamage@@3VcWingsDamage@@A DB 01928H DUP (?)	; gWingsDamage
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@cWingsDamage@@QAEXXZ			; cWingsDamage::Init
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\wingsdamage.cpp
_TEXT	SEGMENT
_n$219264 = -16						; size = 4
_i$219260 = -12						; size = 4
_i$219256 = -8						; size = 4
_this$ = -4						; size = 4
?Init@cWingsDamage@@QAEXXZ PROC				; cWingsDamage::Init
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : 	for (int i = 0; i < MAX_WINGS_ITEM; i++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$219256[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN9@Init
$LN8@Init:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$219256[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$219256[ebp], eax
$LN9@Init:
  0001e	83 7d f8 32	 cmp	 DWORD PTR _i$219256[ebp], 50 ; 00000032H
  00022	7d 45		 jge	 SHORT $LN7@Init

; 13   : 	{
; 14   : 		this->Data[i].Type = 0;

  00024	8b 45 f8	 mov	 eax, DWORD PTR _i$219256[ebp]
  00027	c1 e0 04	 shl	 eax, 4
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 15   : 		this->Data[i].Index = 0;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _i$219256[ebp]
  00037	c1 e0 04	 shl	 eax, 4
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 16   : 		this->Data[i].IncreaseDamage = 0;

  00045	8b 45 f8	 mov	 eax, DWORD PTR _i$219256[ebp]
  00048	c1 e0 04	 shl	 eax, 4
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	c7 44 01 08 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+8], 0

; 17   : 		this->Data[i].IncreaseDefence = 0;

  00056	8b 45 f8	 mov	 eax, DWORD PTR _i$219256[ebp]
  00059	c1 e0 04	 shl	 eax, 4
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	c7 44 01 0c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+12], 0

; 18   : 	}

  00067	eb ac		 jmp	 SHORT $LN8@Init
$LN7@Init:

; 19   : 
; 20   : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  00069	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$219260[ebp], 0
  00070	eb 09		 jmp	 SHORT $LN6@Init
$LN5@Init:
  00072	8b 45 f4	 mov	 eax, DWORD PTR _i$219260[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 f4	 mov	 DWORD PTR _i$219260[ebp], eax
$LN6@Init:
  0007b	83 7d f4 07	 cmp	 DWORD PTR _i$219260[ebp], 7
  0007f	0f 8d ba 00 00
	00		 jge	 $LN4@Init

; 21   : 	{
; 22   : 		for(int n = 0; n < MAX_WINGS_ITEM; n++)

  00085	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$219264[ebp], 0
  0008c	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  0008e	8b 45 f0	 mov	 eax, DWORD PTR _n$219264[ebp]
  00091	83 c0 01	 add	 eax, 1
  00094	89 45 f0	 mov	 DWORD PTR _n$219264[ebp], eax
$LN3@Init:
  00097	83 7d f0 32	 cmp	 DWORD PTR _n$219264[ebp], 50 ; 00000032H
  0009b	0f 8d 88 00 00
	00		 jge	 $LN1@Init

; 23   : 		{
; 24   : 			this->m_Wing[i][n].Type = -1;

  000a1	8b 45 f4	 mov	 eax, DWORD PTR _i$219260[ebp]
  000a4	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  000b4	8b 45 f0	 mov	 eax, DWORD PTR _n$219264[ebp]
  000b7	c1 e0 04	 shl	 eax, 4
  000ba	c7 04 02 ff ff
	ff ff		 mov	 DWORD PTR [edx+eax], -1

; 25   : 			this->m_Wing[i][n].Index = -1;

  000c1	8b 45 f4	 mov	 eax, DWORD PTR _i$219260[ebp]
  000c4	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  000d4	8b 45 f0	 mov	 eax, DWORD PTR _n$219264[ebp]
  000d7	c1 e0 04	 shl	 eax, 4
  000da	c7 44 02 04 ff
	ff ff ff	 mov	 DWORD PTR [edx+eax+4], -1

; 26   : 			this->m_Wing[i][n].AttackPercent = 0;

  000e2	8b 45 f4	 mov	 eax, DWORD PTR _i$219260[ebp]
  000e5	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  000f5	8b 45 f0	 mov	 eax, DWORD PTR _n$219264[ebp]
  000f8	c1 e0 04	 shl	 eax, 4
  000fb	c7 44 02 08 00
	00 00 00	 mov	 DWORD PTR [edx+eax+8], 0

; 27   : 			this->m_Wing[i][n].AbsurdPercent = 0;

  00103	8b 45 f4	 mov	 eax, DWORD PTR _i$219260[ebp]
  00106	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00116	8b 45 f0	 mov	 eax, DWORD PTR _n$219264[ebp]
  00119	c1 e0 04	 shl	 eax, 4
  0011c	c7 44 02 0c 00
	00 00 00	 mov	 DWORD PTR [edx+eax+12], 0

; 28   : 		}

  00124	e9 65 ff ff ff	 jmp	 $LN2@Init
$LN1@Init:

; 29   : 
; 30   : 		this->m_iWingCount[i] = 0;

  00129	8b 45 f4	 mov	 eax, DWORD PTR _i$219260[ebp]
  0012c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	c7 84 81 0c 19
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6412], 0

; 31   : 	}

  0013a	e9 33 ff ff ff	 jmp	 $LN5@Init
$LN4@Init:

; 32   : 
; 33   : 	this->m_bWingsCharacter = false;

  0013f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00142	c6 80 28 03 00
	00 00		 mov	 BYTE PTR [eax+808], 0

; 34   : };

  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
?Init@cWingsDamage@@QAEXXZ ENDP				; cWingsDamage::Init
_TEXT	ENDS
PUBLIC	??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0BP@HEMMCCJP@?4?4?2Data?2ExData?2WingsDamage?4ini?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cWingsDamage@@QAEXXZ			; cWingsDamage::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HEMMCCJP@?4?4?2Data?2ExData?2WingsDamage?4ini?$AA@
CONST	SEGMENT
??_C@_0BP@HEMMCCJP@?4?4?2Data?2ExData?2WingsDamage?4ini?$AA@ DB '..\Data\'
	DB	'ExData\WingsDamage.ini', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$219295 = -312					; size = 16
_iCount$219293 = -296					; size = 4
_iClass$219292 = -292					; size = 4
_n$219288 = -288					; size = 16
_Flag$ = -272						; size = 4
_Buff$ = -268						; size = 256
_file$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Load@cWingsDamage@@QAEXXZ PROC				; cWingsDamage::Load
; _this$ = ecx

; 37   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0015e	33 c5		 xor	 eax, ebp
  00160	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00163	53		 push	 ebx
  00164	56		 push	 esi
  00165	57		 push	 edi
  00166	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	this->Init();

  00169	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?Init@cWingsDamage@@QAEXXZ ; cWingsDamage::Init

; 39   : 
; 40   : 	this->Enable = GetPrivateProfileInt("ExTeam","Enable",0,WingsDamage_DIR);

  00171	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HEMMCCJP@?4?4?2Data?2ExData?2WingsDamage?4ini?$AA@
  00176	6a 00		 push	 0
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00188	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018b	89 81 20 03 00
	00		 mov	 DWORD PTR [ecx+800], eax

; 41   : 	
; 42   : 	if(g_ExLicense.CheckUser(eExUB::Local) || 
; 43   : 	   g_ExLicense.CheckUser(eExUB::ulasevich) || 
; 44   : 	   g_ExLicense.CheckUser(eExUB::ulasevich2) ||
; 45   : 	   g_ExLicense.CheckUser(eExUB::Gredy) ||
; 46   : 	   g_ExLicense.CheckUser(eExUB::Gredy2) ||
; 47   : 	   g_ExLicense.CheckUser(eExUB::GredyLocal) ||
; 48   : 	   g_ExLicense.CheckUser(eExUB::SILVER1) ||
; 49   : 	   g_ExLicense.CheckUser(eExUB::SILVER2) ||
; 50   : 	   g_ExLicense.CheckUser(eExUB::SILVER_Local)
; 51   : 	   )

  00191	6a 00		 push	 0
  00193	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00198	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0019d	0f b6 c0	 movzx	 eax, al
  001a0	85 c0		 test	 eax, eax
  001a2	0f 85 9c 00 00
	00		 jne	 $LN10@Load
  001a8	6a 17		 push	 23			; 00000017H
  001aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  001af	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  001b4	0f b6 c0	 movzx	 eax, al
  001b7	85 c0		 test	 eax, eax
  001b9	0f 85 85 00 00
	00		 jne	 $LN10@Load
  001bf	6a 24		 push	 36			; 00000024H
  001c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  001c6	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  001cb	0f b6 c0	 movzx	 eax, al
  001ce	85 c0		 test	 eax, eax
  001d0	75 72		 jne	 SHORT $LN10@Load
  001d2	6a 20		 push	 32			; 00000020H
  001d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  001d9	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  001de	0f b6 c0	 movzx	 eax, al
  001e1	85 c0		 test	 eax, eax
  001e3	75 5f		 jne	 SHORT $LN10@Load
  001e5	6a 22		 push	 34			; 00000022H
  001e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  001ec	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  001f1	0f b6 c0	 movzx	 eax, al
  001f4	85 c0		 test	 eax, eax
  001f6	75 4c		 jne	 SHORT $LN10@Load
  001f8	6a 21		 push	 33			; 00000021H
  001fa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  001ff	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00204	0f b6 c0	 movzx	 eax, al
  00207	85 c0		 test	 eax, eax
  00209	75 39		 jne	 SHORT $LN10@Load
  0020b	6a 07		 push	 7
  0020d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00212	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00217	0f b6 c0	 movzx	 eax, al
  0021a	85 c0		 test	 eax, eax
  0021c	75 26		 jne	 SHORT $LN10@Load
  0021e	6a 08		 push	 8
  00220	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00225	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0022a	0f b6 c0	 movzx	 eax, al
  0022d	85 c0		 test	 eax, eax
  0022f	75 13		 jne	 SHORT $LN10@Load
  00231	6a 2b		 push	 43			; 0000002bH
  00233	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00238	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0023d	0f b6 c0	 movzx	 eax, al
  00240	85 c0		 test	 eax, eax
  00242	74 0a		 je	 SHORT $LN11@Load
$LN10@Load:

; 52   : 	{
; 53   : 		this->m_bWingsCharacter = true;

  00244	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00247	c6 80 28 03 00
	00 01		 mov	 BYTE PTR [eax+808], 1
$LN11@Load:

; 54   : 	}
; 55   : 
; 56   : 	FILE * file = fopen(WingsDamage_DIR,"r");

  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HEMMCCJP@?4?4?2Data?2ExData?2WingsDamage?4ini?$AA@
  00258	e8 00 00 00 00	 call	 _fopen
  0025d	83 c4 08	 add	 esp, 8
  00260	89 45 f4	 mov	 DWORD PTR _file$[ebp], eax

; 57   : 
; 58   : 	if(file == NULL)

  00263	83 7d f4 00	 cmp	 DWORD PTR _file$[ebp], 0
  00267	75 21		 jne	 SHORT $LN9@Load

; 59   : 	{
; 60   : 		MessageBoxA(0,WingsDamage_DIR,"LOAD FILE ERROR",0);

  00269	6a 00		 push	 0
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HEMMCCJP@?4?4?2Data?2ExData?2WingsDamage?4ini?$AA@
  00275	6a 00		 push	 0
  00277	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 61   : 		this->Enable = false;

  0027d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00280	c7 80 20 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+800], 0
$LN9@Load:

; 62   : 	}
; 63   : 	
; 64   : 	char Buff[256];
; 65   : 	int Flag = 0;

  0028a	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0

; 66   : 
; 67   : 	this->Count = 0;

  00294	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00297	c7 80 24 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+804], 0
$LN8@Load:

; 68   : 
; 69   : 	while(!feof(file))

  002a1	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 _feof
  002aa	83 c4 04	 add	 esp, 4
  002ad	85 c0		 test	 eax, eax
  002af	0f 85 51 02 00
	00		 jne	 $LN7@Load

; 70   : 	{
; 71   : 		fgets(Buff,256,file);

  002b5	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  002b8	50		 push	 eax
  002b9	68 00 01 00 00	 push	 256			; 00000100H
  002be	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  002c4	51		 push	 ecx
  002c5	e8 00 00 00 00	 call	 _fgets
  002ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   : 		if(Ex_IsBadFileLine(Buff, Flag))

  002cd	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  002d3	50		 push	 eax
  002d4	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  002da	51		 push	 ecx
  002db	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  002e0	83 c4 08	 add	 esp, 8
  002e3	0f b6 d0	 movzx	 edx, al
  002e6	85 d2		 test	 edx, edx
  002e8	74 02		 je	 SHORT $LN6@Load

; 73   : 			continue;

  002ea	eb b5		 jmp	 SHORT $LN8@Load
$LN6@Load:

; 74   : 
; 75   : 		if(Flag == 1)

  002ec	83 bd f0 fe ff
	ff 01		 cmp	 DWORD PTR _Flag$[ebp], 1
  002f3	0f 85 bb 00 00
	00		 jne	 $LN5@Load

; 76   : 		{
; 77   : 			if(this->Count >= MAX_WINGS_ITEM)	

  002f9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002fc	83 b8 24 03 00
	00 32		 cmp	 DWORD PTR [eax+804], 50	; 00000032H
  00303	7c 02		 jl	 SHORT $LN4@Load

; 78   : 				continue;

  00305	eb 9a		 jmp	 SHORT $LN8@Load
$LN4@Load:

; 79   : 
; 80   : 			int n[4];
; 81   : 			sscanf(Buff, "%d %d %d %d", &n[0], &n[1], &n[2], &n[3]);

  00307	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$219288[ebp+12]
  0030d	50		 push	 eax
  0030e	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219288[ebp+8]
  00314	51		 push	 ecx
  00315	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$219288[ebp+4]
  0031b	52		 push	 edx
  0031c	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$219288[ebp]
  00322	50		 push	 eax
  00323	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  00328	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0032e	51		 push	 ecx
  0032f	e8 00 00 00 00	 call	 _sscanf
  00334	83 c4 18	 add	 esp, 24			; 00000018H

; 82   : 			this->Data[this->Count].Type				= n[0];

  00337	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0033a	8b 88 24 03 00
	00		 mov	 ecx, DWORD PTR [eax+804]
  00340	c1 e1 04	 shl	 ecx, 4
  00343	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00346	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _n$219288[ebp]
  0034c	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 83   : 			this->Data[this->Count].Index				= n[1];

  0034f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00352	8b 88 24 03 00
	00		 mov	 ecx, DWORD PTR [eax+804]
  00358	c1 e1 04	 shl	 ecx, 4
  0035b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0035e	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _n$219288[ebp+4]
  00364	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 84   : 			this->Data[this->Count].IncreaseDamage		= n[2];

  00368	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0036b	8b 88 24 03 00
	00		 mov	 ecx, DWORD PTR [eax+804]
  00371	c1 e1 04	 shl	 ecx, 4
  00374	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00377	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _n$219288[ebp+8]
  0037d	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 85   : 			this->Data[this->Count].IncreaseDefence		= n[3];

  00381	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00384	8b 88 24 03 00
	00		 mov	 ecx, DWORD PTR [eax+804]
  0038a	c1 e1 04	 shl	 ecx, 4
  0038d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00390	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _n$219288[ebp+12]
  00396	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 86   : 			this->Count++;

  0039a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0039d	8b 88 24 03 00
	00		 mov	 ecx, DWORD PTR [eax+804]
  003a3	83 c1 01	 add	 ecx, 1
  003a6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003a9	89 8a 24 03 00
	00		 mov	 DWORD PTR [edx+804], ecx
  003af	e9 4d 01 00 00	 jmp	 $LN3@Load
$LN5@Load:

; 87   : 		}
; 88   : 		else if(Flag >= 2 && Flag < (MAX_TYPE_PLAYER + 2))

  003b4	83 bd f0 fe ff
	ff 02		 cmp	 DWORD PTR _Flag$[ebp], 2
  003bb	0f 8c 40 01 00
	00		 jl	 $LN3@Load
  003c1	83 bd f0 fe ff
	ff 09		 cmp	 DWORD PTR _Flag$[ebp], 9
  003c8	0f 8d 33 01 00
	00		 jge	 $LN3@Load

; 89   : 		{
; 90   : 			int iClass = Flag - 2;

  003ce	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _Flag$[ebp]
  003d4	83 e8 02	 sub	 eax, 2
  003d7	89 85 dc fe ff
	ff		 mov	 DWORD PTR _iClass$219292[ebp], eax

; 91   : 			int iCount = this->m_iWingCount[iClass];

  003dd	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iClass$219292[ebp]
  003e3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003e6	8b 94 81 0c 19
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+6412]
  003ed	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _iCount$219293[ebp], edx

; 92   : 
; 93   : 			if(this->m_iWingCount[iClass] >= MAX_WINGS_ITEM)

  003f3	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iClass$219292[ebp]
  003f9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003fc	83 bc 81 0c 19
	00 00 32	 cmp	 DWORD PTR [ecx+eax*4+6412], 50 ; 00000032H
  00404	7c 05		 jl	 SHORT $LN1@Load

; 94   : 			{
; 95   : 				continue;

  00406	e9 96 fe ff ff	 jmp	 $LN8@Load
$LN1@Load:

; 96   : 			}
; 97   : 
; 98   : 			int n[4];
; 99   : 
; 100  : 			sscanf(Buff, "%d %d %d %d", &n[0], &n[1], &n[2], &n[3]);

  0040b	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _n$219295[ebp+12]
  00411	50		 push	 eax
  00412	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219295[ebp+8]
  00418	51		 push	 ecx
  00419	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR _n$219295[ebp+4]
  0041f	52		 push	 edx
  00420	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _n$219295[ebp]
  00426	50		 push	 eax
  00427	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  0042c	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00432	51		 push	 ecx
  00433	e8 00 00 00 00	 call	 _sscanf
  00438	83 c4 18	 add	 esp, 24			; 00000018H

; 101  : 
; 102  : 			this->m_Wing[iClass][iCount].Type			= n[0];

  0043b	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iClass$219292[ebp]
  00441	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  00447	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0044a	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00451	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iCount$219293[ebp]
  00457	c1 e0 04	 shl	 eax, 4
  0045a	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _n$219295[ebp]
  00460	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 103  : 			this->m_Wing[iClass][iCount].Index			= n[1];

  00463	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iClass$219292[ebp]
  00469	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  0046f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00472	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00479	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iCount$219293[ebp]
  0047f	c1 e0 04	 shl	 eax, 4
  00482	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _n$219295[ebp+4]
  00488	89 4c 02 04	 mov	 DWORD PTR [edx+eax+4], ecx

; 104  : 			this->m_Wing[iClass][iCount].AttackPercent	= n[2];

  0048c	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iClass$219292[ebp]
  00492	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  00498	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0049b	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  004a2	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iCount$219293[ebp]
  004a8	c1 e0 04	 shl	 eax, 4
  004ab	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _n$219295[ebp+8]
  004b1	89 4c 02 08	 mov	 DWORD PTR [edx+eax+8], ecx

; 105  : 			this->m_Wing[iClass][iCount].AbsurdPercent	= n[3];

  004b5	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iClass$219292[ebp]
  004bb	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  004c1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004c4	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  004cb	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iCount$219293[ebp]
  004d1	c1 e0 04	 shl	 eax, 4
  004d4	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _n$219295[ebp+12]
  004da	89 4c 02 0c	 mov	 DWORD PTR [edx+eax+12], ecx

; 106  : 
; 107  : 			this->m_iWingCount[iClass]++;

  004de	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iClass$219292[ebp]
  004e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004e7	8b 94 81 0c 19
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+6412]
  004ee	83 c2 01	 add	 edx, 1
  004f1	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iClass$219292[ebp]
  004f7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004fa	89 94 81 0c 19
	00 00		 mov	 DWORD PTR [ecx+eax*4+6412], edx
$LN3@Load:

; 108  : 		}
; 109  : 	}

  00501	e9 9b fd ff ff	 jmp	 $LN8@Load
$LN7@Load:

; 110  : 
; 111  : 	fclose(file);

  00506	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00509	50		 push	 eax
  0050a	e8 00 00 00 00	 call	 _fclose
  0050f	83 c4 04	 add	 esp, 4

; 112  : };

  00512	5f		 pop	 edi
  00513	5e		 pop	 esi
  00514	5b		 pop	 ebx
  00515	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00518	33 cd		 xor	 ecx, ebp
  0051a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0051f	8b e5		 mov	 esp, ebp
  00521	5d		 pop	 ebp
  00522	c3		 ret	 0
?Load@cWingsDamage@@QAEXXZ ENDP				; cWingsDamage::Load
_TEXT	ENDS
PUBLIC	?Attack@cWingsDamage@@QAEXHAAH@Z		; cWingsDamage::Attack
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$219302 = -8						; size = 4
_this$ = -4						; size = 4
_Wing$ = 8						; size = 4
_Damage$ = 12						; size = 4
?Attack@cWingsDamage@@QAEXHAAH@Z PROC			; cWingsDamage::Attack
; _this$ = ecx

; 115  : {

  00530	55		 push	 ebp
  00531	8b ec		 mov	 ebp, esp
  00533	83 ec 48	 sub	 esp, 72			; 00000048H
  00536	53		 push	 ebx
  00537	56		 push	 esi
  00538	57		 push	 edi
  00539	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 116  : 	if (!this->Enable)

  0053c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0053f	83 b8 20 03 00
	00 00		 cmp	 DWORD PTR [eax+800], 0
  00546	75 02		 jne	 SHORT $LN5@Attack

; 117  : 	{
; 118  : 		return;

  00548	eb 65		 jmp	 SHORT $LN6@Attack
$LN5@Attack:

; 119  : 	}
; 120  : 	for (int i = 0; i < this->Count; i++)

  0054a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$219302[ebp], 0
  00551	eb 09		 jmp	 SHORT $LN4@Attack
$LN3@Attack:
  00553	8b 45 f8	 mov	 eax, DWORD PTR _i$219302[ebp]
  00556	83 c0 01	 add	 eax, 1
  00559	89 45 f8	 mov	 DWORD PTR _i$219302[ebp], eax
$LN4@Attack:
  0055c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0055f	8b 4d f8	 mov	 ecx, DWORD PTR _i$219302[ebp]
  00562	3b 88 24 03 00
	00		 cmp	 ecx, DWORD PTR [eax+804]
  00568	7d 45		 jge	 SHORT $LN6@Attack

; 121  : 	{
; 122  : 		if ( Wing == ITEMGET(Data[i].Type,Data[i].Index) ) 

  0056a	8b 45 f8	 mov	 eax, DWORD PTR _i$219302[ebp]
  0056d	c1 e0 04	 shl	 eax, 4
  00570	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00573	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00576	c1 e2 09	 shl	 edx, 9
  00579	8b 45 f8	 mov	 eax, DWORD PTR _i$219302[ebp]
  0057c	c1 e0 04	 shl	 eax, 4
  0057f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00582	03 54 01 04	 add	 edx, DWORD PTR [ecx+eax+4]
  00586	39 55 08	 cmp	 DWORD PTR _Wing$[ebp], edx
  00589	75 22		 jne	 SHORT $LN1@Attack

; 123  : 		{
; 124  : 			Damage = Damage * Data[i].IncreaseDamage / 100;

  0058b	8b 45 f8	 mov	 eax, DWORD PTR _i$219302[ebp]
  0058e	c1 e0 04	 shl	 eax, 4
  00591	8b 4d 0c	 mov	 ecx, DWORD PTR _Damage$[ebp]
  00594	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00597	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00599	0f af 4c 02 08	 imul	 ecx, DWORD PTR [edx+eax+8]
  0059e	8b c1		 mov	 eax, ecx
  005a0	99		 cdq
  005a1	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  005a6	f7 f9		 idiv	 ecx
  005a8	8b 55 0c	 mov	 edx, DWORD PTR _Damage$[ebp]
  005ab	89 02		 mov	 DWORD PTR [edx], eax
$LN1@Attack:

; 125  : 		}
; 126  : 	}

  005ad	eb a4		 jmp	 SHORT $LN3@Attack
$LN6@Attack:

; 127  : };

  005af	5f		 pop	 edi
  005b0	5e		 pop	 esi
  005b1	5b		 pop	 ebx
  005b2	8b e5		 mov	 esp, ebp
  005b4	5d		 pop	 ebp
  005b5	c2 08 00	 ret	 8
?Attack@cWingsDamage@@QAEXHAAH@Z ENDP			; cWingsDamage::Attack
_TEXT	ENDS
PUBLIC	?Defence@cWingsDamage@@QAEXHAAH@Z		; cWingsDamage::Defence
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$219313 = -8						; size = 4
_this$ = -4						; size = 4
_Wing$ = 8						; size = 4
_Damage$ = 12						; size = 4
?Defence@cWingsDamage@@QAEXHAAH@Z PROC			; cWingsDamage::Defence
; _this$ = ecx

; 130  : {

  005c0	55		 push	 ebp
  005c1	8b ec		 mov	 ebp, esp
  005c3	83 ec 48	 sub	 esp, 72			; 00000048H
  005c6	53		 push	 ebx
  005c7	56		 push	 esi
  005c8	57		 push	 edi
  005c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 131  : 	if (!this->Enable)

  005cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005cf	83 b8 20 03 00
	00 00		 cmp	 DWORD PTR [eax+800], 0
  005d6	75 02		 jne	 SHORT $LN5@Defence

; 132  : 	{
; 133  : 		return;

  005d8	eb 65		 jmp	 SHORT $LN6@Defence
$LN5@Defence:

; 134  : 	}
; 135  : 	for (int i = 0; i < this->Count; i++)

  005da	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$219313[ebp], 0
  005e1	eb 09		 jmp	 SHORT $LN4@Defence
$LN3@Defence:
  005e3	8b 45 f8	 mov	 eax, DWORD PTR _i$219313[ebp]
  005e6	83 c0 01	 add	 eax, 1
  005e9	89 45 f8	 mov	 DWORD PTR _i$219313[ebp], eax
$LN4@Defence:
  005ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005ef	8b 4d f8	 mov	 ecx, DWORD PTR _i$219313[ebp]
  005f2	3b 88 24 03 00
	00		 cmp	 ecx, DWORD PTR [eax+804]
  005f8	7d 45		 jge	 SHORT $LN6@Defence

; 136  : 	{
; 137  : 		if ( Wing == ITEMGET(Data[i].Type,Data[i].Index) ) 

  005fa	8b 45 f8	 mov	 eax, DWORD PTR _i$219313[ebp]
  005fd	c1 e0 04	 shl	 eax, 4
  00600	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00603	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00606	c1 e2 09	 shl	 edx, 9
  00609	8b 45 f8	 mov	 eax, DWORD PTR _i$219313[ebp]
  0060c	c1 e0 04	 shl	 eax, 4
  0060f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00612	03 54 01 04	 add	 edx, DWORD PTR [ecx+eax+4]
  00616	39 55 08	 cmp	 DWORD PTR _Wing$[ebp], edx
  00619	75 22		 jne	 SHORT $LN1@Defence

; 138  : 		{
; 139  : 			Damage = Damage * Data[i].IncreaseDefence / 100;

  0061b	8b 45 f8	 mov	 eax, DWORD PTR _i$219313[ebp]
  0061e	c1 e0 04	 shl	 eax, 4
  00621	8b 4d 0c	 mov	 ecx, DWORD PTR _Damage$[ebp]
  00624	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00627	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00629	0f af 4c 02 0c	 imul	 ecx, DWORD PTR [edx+eax+12]
  0062e	8b c1		 mov	 eax, ecx
  00630	99		 cdq
  00631	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00636	f7 f9		 idiv	 ecx
  00638	8b 55 0c	 mov	 edx, DWORD PTR _Damage$[ebp]
  0063b	89 02		 mov	 DWORD PTR [edx], eax
$LN1@Defence:

; 140  : 		}
; 141  : 	}

  0063d	eb a4		 jmp	 SHORT $LN3@Defence
$LN6@Defence:

; 142  : }

  0063f	5f		 pop	 edi
  00640	5e		 pop	 esi
  00641	5b		 pop	 ebx
  00642	8b e5		 mov	 esp, ebp
  00644	5d		 pop	 ebp
  00645	c2 08 00	 ret	 8
?Defence@cWingsDamage@@QAEXHAAH@Z ENDP			; cWingsDamage::Defence
_TEXT	ENDS
PUBLIC	?SetCharWingAttack@cWingsDamage@@QAEXHHHAAH@Z	; cWingsDamage::SetCharWingAttack
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv70 = -96						; size = 4
_n$219336 = -28						; size = 4
_i$219331 = -24						; size = 4
_iDamagePercent$ = -20					; size = 4
_iCount$ = -16						; size = 4
_iClass$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_ItemType$ = 12						; size = 4
_ItemLevel$ = 16					; size = 4
_AttackDamage$ = 20					; size = 4
?SetCharWingAttack@cWingsDamage@@QAEXHHHAAH@Z PROC	; cWingsDamage::SetCharWingAttack
; _this$ = ecx

; 145  : {

  00650	55		 push	 ebp
  00651	8b ec		 mov	 ebp, esp
  00653	83 ec 60	 sub	 esp, 96			; 00000060H
  00656	53		 push	 ebx
  00657	56		 push	 esi
  00658	57		 push	 edi
  00659	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  : 	if(this->m_bWingsCharacter)

  0065c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0065f	0f b6 88 28 03
	00 00		 movzx	 ecx, BYTE PTR [eax+808]
  00666	85 c9		 test	 ecx, ecx
  00668	74 05		 je	 SHORT $LN11@SetCharWin

; 147  : 	{
; 148  : 		return;

  0066a	e9 3a 01 00 00	 jmp	 $LN12@SetCharWin
$LN11@SetCharWin:

; 149  : 	}
; 150  : 
; 151  : 	if(!OBJMAX_RANGE(aIndex))

  0066f	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00673	7d 09		 jge	 SHORT $LN14@SetCharWin
  00675	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  0067c	eb 0f		 jmp	 SHORT $LN15@SetCharWin
$LN14@SetCharWin:
  0067e	33 c0		 xor	 eax, eax
  00680	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00687	0f 9e c0	 setle	 al
  0068a	89 45 a0	 mov	 DWORD PTR tv70[ebp], eax
$LN15@SetCharWin:
  0068d	83 7d a0 00	 cmp	 DWORD PTR tv70[ebp], 0
  00691	75 05		 jne	 SHORT $LN10@SetCharWin

; 152  : 	{
; 153  : 		return;

  00693	e9 11 01 00 00	 jmp	 $LN12@SetCharWin
$LN10@SetCharWin:

; 154  : 	}
; 155  : 
; 156  : 	LPOBJ lpUser = &gObj[aIndex];

  00698	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0069b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  006a1	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  006a7	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 157  : 
; 158  : 	int iClass = lpUser->Class;

  006aa	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  006ad	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  006b4	89 4d f4	 mov	 DWORD PTR _iClass$[ebp], ecx

; 159  : 	int iCount = this->m_iWingCount[iClass];

  006b7	8b 45 f4	 mov	 eax, DWORD PTR _iClass$[ebp]
  006ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006bd	8b 94 81 0c 19
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+6412]
  006c4	89 55 f0	 mov	 DWORD PTR _iCount$[ebp], edx

; 160  : 	int iDamagePercent = 100;

  006c7	c7 45 ec 64 00
	00 00		 mov	 DWORD PTR _iDamagePercent$[ebp], 100 ; 00000064H

; 161  : 
; 162  : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  006ce	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$219331[ebp], 0
  006d5	eb 09		 jmp	 SHORT $LN9@SetCharWin
$LN8@SetCharWin:
  006d7	8b 45 e8	 mov	 eax, DWORD PTR _i$219331[ebp]
  006da	83 c0 01	 add	 eax, 1
  006dd	89 45 e8	 mov	 DWORD PTR _i$219331[ebp], eax
$LN9@SetCharWin:
  006e0	83 7d e8 07	 cmp	 DWORD PTR _i$219331[ebp], 7
  006e4	0f 8d 97 00 00
	00		 jge	 $LN7@SetCharWin

; 163  : 	{
; 164  : 		if(iClass = i)

  006ea	8b 45 e8	 mov	 eax, DWORD PTR _i$219331[ebp]
  006ed	89 45 f4	 mov	 DWORD PTR _iClass$[ebp], eax
  006f0	83 7d f4 00	 cmp	 DWORD PTR _iClass$[ebp], 0
  006f4	0f 84 82 00 00
	00		 je	 $LN6@SetCharWin

; 165  : 		{
; 166  : 			for(int n = 0; n < iCount; n++)

  006fa	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$219336[ebp], 0
  00701	eb 09		 jmp	 SHORT $LN5@SetCharWin
$LN4@SetCharWin:
  00703	8b 45 e4	 mov	 eax, DWORD PTR _n$219336[ebp]
  00706	83 c0 01	 add	 eax, 1
  00709	89 45 e4	 mov	 DWORD PTR _n$219336[ebp], eax
$LN5@SetCharWin:
  0070c	8b 45 e4	 mov	 eax, DWORD PTR _n$219336[ebp]
  0070f	3b 45 f0	 cmp	 eax, DWORD PTR _iCount$[ebp]
  00712	7d 68		 jge	 SHORT $LN6@SetCharWin

; 167  : 			{
; 168  : 				if(ItemType == ITEMGET(this->m_Wing[i][n].Type, this->m_Wing[i][n].Index)) 

  00714	8b 45 e8	 mov	 eax, DWORD PTR _i$219331[ebp]
  00717	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  0071d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00720	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00727	8b 45 e4	 mov	 eax, DWORD PTR _n$219336[ebp]
  0072a	c1 e0 04	 shl	 eax, 4
  0072d	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  00730	c1 e1 09	 shl	 ecx, 9
  00733	8b 55 e8	 mov	 edx, DWORD PTR _i$219331[ebp]
  00736	69 d2 20 03 00
	00		 imul	 edx, 800		; 00000320H
  0073c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0073f	8d 94 10 2c 03
	00 00		 lea	 edx, DWORD PTR [eax+edx+812]
  00746	8b 45 e4	 mov	 eax, DWORD PTR _n$219336[ebp]
  00749	c1 e0 04	 shl	 eax, 4
  0074c	03 4c 02 04	 add	 ecx, DWORD PTR [edx+eax+4]
  00750	39 4d 0c	 cmp	 DWORD PTR _ItemType$[ebp], ecx
  00753	75 25		 jne	 SHORT $LN2@SetCharWin

; 169  : 				{
; 170  : 					iDamagePercent += this->m_Wing[i][n].AttackPercent;

  00755	8b 45 e8	 mov	 eax, DWORD PTR _i$219331[ebp]
  00758	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  0075e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00761	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00768	8b 45 e4	 mov	 eax, DWORD PTR _n$219336[ebp]
  0076b	c1 e0 04	 shl	 eax, 4
  0076e	8b 4d ec	 mov	 ecx, DWORD PTR _iDamagePercent$[ebp]
  00771	03 4c 02 08	 add	 ecx, DWORD PTR [edx+eax+8]
  00775	89 4d ec	 mov	 DWORD PTR _iDamagePercent$[ebp], ecx

; 171  : 					break;

  00778	eb 02		 jmp	 SHORT $LN6@SetCharWin
$LN2@SetCharWin:

; 172  : 				}
; 173  : 			}

  0077a	eb 87		 jmp	 SHORT $LN4@SetCharWin
$LN6@SetCharWin:

; 174  : 		}
; 175  : 	}

  0077c	e9 56 ff ff ff	 jmp	 $LN8@SetCharWin
$LN7@SetCharWin:

; 176  : 
; 177  : 	if(iDamagePercent <= 100)

  00781	83 7d ec 64	 cmp	 DWORD PTR _iDamagePercent$[ebp], 100 ; 00000064H
  00785	7f 02		 jg	 SHORT $LN1@SetCharWin

; 178  : 	{
; 179  : 		return;

  00787	eb 20		 jmp	 SHORT $LN12@SetCharWin
$LN1@SetCharWin:

; 180  : 	}
; 181  : 
; 182  : 	AttackDamage = AttackDamage * (ItemLevel * 2 + iDamagePercent) / 100;

  00789	8b 45 10	 mov	 eax, DWORD PTR _ItemLevel$[ebp]
  0078c	8b 4d ec	 mov	 ecx, DWORD PTR _iDamagePercent$[ebp]
  0078f	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00792	8b 45 14	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  00795	8b ca		 mov	 ecx, edx
  00797	0f af 08	 imul	 ecx, DWORD PTR [eax]
  0079a	8b c1		 mov	 eax, ecx
  0079c	99		 cdq
  0079d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  007a2	f7 f9		 idiv	 ecx
  007a4	8b 55 14	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  007a7	89 02		 mov	 DWORD PTR [edx], eax
$LN12@SetCharWin:

; 183  : }

  007a9	5f		 pop	 edi
  007aa	5e		 pop	 esi
  007ab	5b		 pop	 ebx
  007ac	8b e5		 mov	 esp, ebp
  007ae	5d		 pop	 ebp
  007af	c2 10 00	 ret	 16			; 00000010H
?SetCharWingAttack@cWingsDamage@@QAEXHHHAAH@Z ENDP	; cWingsDamage::SetCharWingAttack
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?SetCharWingAbsurd@cWingsDamage@@QAEXHHHAAH@Z	; cWingsDamage::SetCharWingAbsurd
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv174 = -100						; size = 4
tv70 = -100						; size = 4
_iDamage$ = -32						; size = 4
_n$219360 = -28						; size = 4
_i$219355 = -24						; size = 4
_iDefencePercent$ = -20					; size = 4
_iCount$ = -16						; size = 4
_iClass$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_ItemType$ = 12						; size = 4
_ItemLevel$ = 16					; size = 4
_AttackDamage$ = 20					; size = 4
?SetCharWingAbsurd@cWingsDamage@@QAEXHHHAAH@Z PROC	; cWingsDamage::SetCharWingAbsurd
; _this$ = ecx

; 186  : {

  007c0	55		 push	 ebp
  007c1	8b ec		 mov	 ebp, esp
  007c3	83 ec 64	 sub	 esp, 100		; 00000064H
  007c6	53		 push	 ebx
  007c7	56		 push	 esi
  007c8	57		 push	 edi
  007c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 	if(this->m_bWingsCharacter)

  007cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007cf	0f b6 88 28 03
	00 00		 movzx	 ecx, BYTE PTR [eax+808]
  007d6	85 c9		 test	 ecx, ecx
  007d8	74 05		 je	 SHORT $LN12@SetCharWin@2

; 188  : 	{
; 189  : 		return;

  007da	e9 4e 01 00 00	 jmp	 $LN13@SetCharWin@2
$LN12@SetCharWin@2:

; 190  : 	}
; 191  : 
; 192  : 	if(!OBJMAX_RANGE(aIndex))

  007df	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  007e3	7d 09		 jge	 SHORT $LN15@SetCharWin@2
  007e5	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  007ec	eb 0f		 jmp	 SHORT $LN16@SetCharWin@2
$LN15@SetCharWin@2:
  007ee	33 c0		 xor	 eax, eax
  007f0	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  007f7	0f 9e c0	 setle	 al
  007fa	89 45 9c	 mov	 DWORD PTR tv70[ebp], eax
$LN16@SetCharWin@2:
  007fd	83 7d 9c 00	 cmp	 DWORD PTR tv70[ebp], 0
  00801	75 05		 jne	 SHORT $LN11@SetCharWin@2

; 193  : 	{
; 194  : 		return;

  00803	e9 25 01 00 00	 jmp	 $LN13@SetCharWin@2
$LN11@SetCharWin@2:

; 195  : 	}
; 196  : 
; 197  : 	LPOBJ lpUser = &gObj[aIndex];

  00808	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0080b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00811	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00817	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 198  : 
; 199  : 	int iClass = lpUser->Class;

  0081a	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0081d	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00824	89 4d f4	 mov	 DWORD PTR _iClass$[ebp], ecx

; 200  : 	int iCount = this->m_iWingCount[iClass];

  00827	8b 45 f4	 mov	 eax, DWORD PTR _iClass$[ebp]
  0082a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0082d	8b 94 81 0c 19
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+6412]
  00834	89 55 f0	 mov	 DWORD PTR _iCount$[ebp], edx

; 201  : 	int iDefencePercent = 100;

  00837	c7 45 ec 64 00
	00 00		 mov	 DWORD PTR _iDefencePercent$[ebp], 100 ; 00000064H

; 202  : 
; 203  : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  0083e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$219355[ebp], 0
  00845	eb 09		 jmp	 SHORT $LN10@SetCharWin@2
$LN9@SetCharWin@2:
  00847	8b 45 e8	 mov	 eax, DWORD PTR _i$219355[ebp]
  0084a	83 c0 01	 add	 eax, 1
  0084d	89 45 e8	 mov	 DWORD PTR _i$219355[ebp], eax
$LN10@SetCharWin@2:
  00850	83 7d e8 07	 cmp	 DWORD PTR _i$219355[ebp], 7
  00854	0f 8d 97 00 00
	00		 jge	 $LN8@SetCharWin@2

; 204  : 	{
; 205  : 		if(iClass = i)

  0085a	8b 45 e8	 mov	 eax, DWORD PTR _i$219355[ebp]
  0085d	89 45 f4	 mov	 DWORD PTR _iClass$[ebp], eax
  00860	83 7d f4 00	 cmp	 DWORD PTR _iClass$[ebp], 0
  00864	0f 84 82 00 00
	00		 je	 $LN4@SetCharWin@2

; 206  : 		{
; 207  : 			for(int n = 0; n < iCount; n++)

  0086a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$219360[ebp], 0
  00871	eb 09		 jmp	 SHORT $LN6@SetCharWin@2
$LN5@SetCharWin@2:
  00873	8b 45 e4	 mov	 eax, DWORD PTR _n$219360[ebp]
  00876	83 c0 01	 add	 eax, 1
  00879	89 45 e4	 mov	 DWORD PTR _n$219360[ebp], eax
$LN6@SetCharWin@2:
  0087c	8b 45 e4	 mov	 eax, DWORD PTR _n$219360[ebp]
  0087f	3b 45 f0	 cmp	 eax, DWORD PTR _iCount$[ebp]
  00882	7d 68		 jge	 SHORT $LN4@SetCharWin@2

; 208  : 			{
; 209  : 				if(ItemType == ITEMGET(this->m_Wing[i][n].Type, this->m_Wing[i][n].Index)) 

  00884	8b 45 e8	 mov	 eax, DWORD PTR _i$219355[ebp]
  00887	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  0088d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00890	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00897	8b 45 e4	 mov	 eax, DWORD PTR _n$219360[ebp]
  0089a	c1 e0 04	 shl	 eax, 4
  0089d	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  008a0	c1 e1 09	 shl	 ecx, 9
  008a3	8b 55 e8	 mov	 edx, DWORD PTR _i$219355[ebp]
  008a6	69 d2 20 03 00
	00		 imul	 edx, 800		; 00000320H
  008ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008af	8d 94 10 2c 03
	00 00		 lea	 edx, DWORD PTR [eax+edx+812]
  008b6	8b 45 e4	 mov	 eax, DWORD PTR _n$219360[ebp]
  008b9	c1 e0 04	 shl	 eax, 4
  008bc	03 4c 02 04	 add	 ecx, DWORD PTR [edx+eax+4]
  008c0	39 4d 0c	 cmp	 DWORD PTR _ItemType$[ebp], ecx
  008c3	75 25		 jne	 SHORT $LN3@SetCharWin@2

; 210  : 				{
; 211  : 					iDefencePercent -= this->m_Wing[i][n].AbsurdPercent;

  008c5	8b 45 e8	 mov	 eax, DWORD PTR _i$219355[ebp]
  008c8	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  008ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008d1	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  008d8	8b 45 e4	 mov	 eax, DWORD PTR _n$219360[ebp]
  008db	c1 e0 04	 shl	 eax, 4
  008de	8b 4d ec	 mov	 ecx, DWORD PTR _iDefencePercent$[ebp]
  008e1	2b 4c 02 0c	 sub	 ecx, DWORD PTR [edx+eax+12]
  008e5	89 4d ec	 mov	 DWORD PTR _iDefencePercent$[ebp], ecx

; 212  : 					break;

  008e8	eb 02		 jmp	 SHORT $LN4@SetCharWin@2
$LN3@SetCharWin@2:

; 213  : 				}
; 214  : 			}

  008ea	eb 87		 jmp	 SHORT $LN5@SetCharWin@2
$LN4@SetCharWin@2:

; 215  : 		}
; 216  : 	}

  008ec	e9 56 ff ff ff	 jmp	 $LN9@SetCharWin@2
$LN8@SetCharWin@2:

; 217  : 
; 218  : 	if(iDefencePercent >= 100)

  008f1	83 7d ec 64	 cmp	 DWORD PTR _iDefencePercent$[ebp], 100 ; 00000064H
  008f5	7c 02		 jl	 SHORT $LN2@SetCharWin@2

; 219  : 	{
; 220  : 		return;

  008f7	eb 34		 jmp	 SHORT $LN13@SetCharWin@2
$LN2@SetCharWin@2:

; 221  : 	}
; 222  : 
; 223  : 	int iDamage = AttackDamage * (iDefencePercent - (ItemLevel * 2)) / 100.0f;

  008f9	8b 45 10	 mov	 eax, DWORD PTR _ItemLevel$[ebp]
  008fc	d1 e0		 shl	 eax, 1
  008fe	8b 4d ec	 mov	 ecx, DWORD PTR _iDefencePercent$[ebp]
  00901	2b c8		 sub	 ecx, eax
  00903	8b 55 14	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00906	0f af 0a	 imul	 ecx, DWORD PTR [edx]
  00909	89 4d 9c	 mov	 DWORD PTR tv174[ebp], ecx
  0090c	db 45 9c	 fild	 DWORD PTR tv174[ebp]
  0090f	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00915	e8 00 00 00 00	 call	 __ftol2_sse
  0091a	89 45 e0	 mov	 DWORD PTR _iDamage$[ebp], eax

; 224  : 
; 225  : 	if(iDamage < 0)

  0091d	83 7d e0 00	 cmp	 DWORD PTR _iDamage$[ebp], 0
  00921	7d 02		 jge	 SHORT $LN1@SetCharWin@2

; 226  : 	{
; 227  : 		return;

  00923	eb 08		 jmp	 SHORT $LN13@SetCharWin@2
$LN1@SetCharWin@2:

; 228  : 	}
; 229  : 
; 230  : 	AttackDamage = iDamage;

  00925	8b 45 14	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  00928	8b 4d e0	 mov	 ecx, DWORD PTR _iDamage$[ebp]
  0092b	89 08		 mov	 DWORD PTR [eax], ecx
$LN13@SetCharWin@2:

; 231  : }

  0092d	5f		 pop	 edi
  0092e	5e		 pop	 esi
  0092f	5b		 pop	 ebx
  00930	8b e5		 mov	 esp, ebp
  00932	5d		 pop	 ebp
  00933	c2 10 00	 ret	 16			; 00000010H
?SetCharWingAbsurd@cWingsDamage@@QAEXHHHAAH@Z ENDP	; cWingsDamage::SetCharWingAbsurd
_TEXT	ENDS
PUBLIC	?set@PWMSG_HEAD2@@QAEXPAEEEH@Z			; PWMSG_HEAD2::set
PUBLIC	__$ArrayPad$
PUBLIC	?PlayerCalculator@cWingsDamage@@QAEXH@Z		; cWingsDamage::PlayerCalculator
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv129 = -704						; size = 4
_n$219384 = -636					; size = 4
_pMsg$ = -632						; size = 608
_iCount$ = -24						; size = 4
_iClass$ = -20						; size = 4
_Wing$ = -16						; size = 4
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?PlayerCalculator@cWingsDamage@@QAEXH@Z PROC		; cWingsDamage::PlayerCalculator
; _this$ = ecx

; 234  : {

  00940	55		 push	 ebp
  00941	8b ec		 mov	 ebp, esp
  00943	81 ec c0 02 00
	00		 sub	 esp, 704		; 000002c0H
  00949	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0094e	33 c5		 xor	 eax, ebp
  00950	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00953	53		 push	 ebx
  00954	56		 push	 esi
  00955	57		 push	 edi
  00956	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 	if(!g_ExLicense.CheckUser(eExUB::Gredy) &&
; 236  : 	   !g_ExLicense.CheckUser(eExUB::Gredy2) &&
; 237  : 	   !g_ExLicense.CheckUser(eExUB::GredyLocal) &&
; 238  : 	   !g_ExLicense.CheckUser(eExUB::SILVER1) &&
; 239  : 	   !g_ExLicense.CheckUser(eExUB::SILVER2) &&
; 240  : 	   !g_ExLicense.CheckUser(eExUB::SILVER_Local))

  00959	6a 20		 push	 32			; 00000020H
  0095b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00960	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00965	0f b6 c0	 movzx	 eax, al
  00968	85 c0		 test	 eax, eax
  0096a	75 64		 jne	 SHORT $LN10@PlayerCalc
  0096c	6a 22		 push	 34			; 00000022H
  0096e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00973	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00978	0f b6 c0	 movzx	 eax, al
  0097b	85 c0		 test	 eax, eax
  0097d	75 51		 jne	 SHORT $LN10@PlayerCalc
  0097f	6a 21		 push	 33			; 00000021H
  00981	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00986	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0098b	0f b6 c0	 movzx	 eax, al
  0098e	85 c0		 test	 eax, eax
  00990	75 3e		 jne	 SHORT $LN10@PlayerCalc
  00992	6a 07		 push	 7
  00994	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00999	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0099e	0f b6 c0	 movzx	 eax, al
  009a1	85 c0		 test	 eax, eax
  009a3	75 2b		 jne	 SHORT $LN10@PlayerCalc
  009a5	6a 08		 push	 8
  009a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  009ac	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  009b1	0f b6 c0	 movzx	 eax, al
  009b4	85 c0		 test	 eax, eax
  009b6	75 18		 jne	 SHORT $LN10@PlayerCalc
  009b8	6a 2b		 push	 43			; 0000002bH
  009ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  009bf	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  009c4	0f b6 c0	 movzx	 eax, al
  009c7	85 c0		 test	 eax, eax
  009c9	75 05		 jne	 SHORT $LN10@PlayerCalc

; 241  : 	{
; 242  : 		return;

  009cb	e9 d8 01 00 00	 jmp	 $LN11@PlayerCalc
$LN10@PlayerCalc:

; 243  : 	}
; 244  : 
; 245  : 	if(!OBJMAX_RANGE(aIndex))

  009d0	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  009d4	7d 0c		 jge	 SHORT $LN13@PlayerCalc
  009d6	c7 85 40 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
  009e0	eb 12		 jmp	 SHORT $LN14@PlayerCalc
$LN13@PlayerCalc:
  009e2	33 c0		 xor	 eax, eax
  009e4	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  009eb	0f 9e c0	 setle	 al
  009ee	89 85 40 fd ff
	ff		 mov	 DWORD PTR tv129[ebp], eax
$LN14@PlayerCalc:
  009f4	83 bd 40 fd ff
	ff 00		 cmp	 DWORD PTR tv129[ebp], 0
  009fb	75 05		 jne	 SHORT $LN9@PlayerCalc

; 246  : 	{
; 247  : 		return;

  009fd	e9 a6 01 00 00	 jmp	 $LN11@PlayerCalc
$LN9@PlayerCalc:

; 248  : 	}
; 249  : 
; 250  : 	LPOBJ lpUser = &gObj[aIndex];

  00a02	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00a05	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00a0b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00a11	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 251  : 
; 252  : 	if(lpUser->m_OfflineMode)

  00a14	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00a17	0f b6 88 d4 28
	00 00		 movzx	 ecx, BYTE PTR [eax+10452]
  00a1e	85 c9		 test	 ecx, ecx
  00a20	74 05		 je	 SHORT $LN8@PlayerCalc

; 253  : 	{
; 254  : 		return;

  00a22	e9 81 01 00 00	 jmp	 $LN11@PlayerCalc
$LN8@PlayerCalc:

; 255  : 	}
; 256  : 
; 257  : 	if(lpUser->m_iLoadConfigNumber < 4)

  00a27	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00a2a	83 b8 d4 2a 00
	00 04		 cmp	 DWORD PTR [eax+10964], 4
  00a31	7d 05		 jge	 SHORT $LN7@PlayerCalc

; 258  : 	{
; 259  : 		return;

  00a33	e9 70 01 00 00	 jmp	 $LN11@PlayerCalc
$LN7@PlayerCalc:

; 260  : 	}
; 261  : 
; 262  : 	CItem * Wing = &lpUser->pInventory[7];

  00a38	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00a3b	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  00a41	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  00a47	89 4d f0	 mov	 DWORD PTR _Wing$[ebp], ecx

; 263  : 
; 264  : 	int iClass = lpUser->Class;

  00a4a	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00a4d	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00a54	89 4d ec	 mov	 DWORD PTR _iClass$[ebp], ecx

; 265  : 	int iCount = this->m_iWingCount[iClass];

  00a57	8b 45 ec	 mov	 eax, DWORD PTR _iClass$[ebp]
  00a5a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a5d	8b 94 81 0c 19
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+6412]
  00a64	89 55 e8	 mov	 DWORD PTR _iCount$[ebp], edx

; 266  : 
; 267  : 	PMSG_WINGS_INFO pMsg;
; 268  : 	memset(&pMsg, 0, sizeof(pMsg));

  00a67	68 60 02 00 00	 push	 608			; 00000260H
  00a6c	6a 00		 push	 0
  00a6e	8d 85 88 fd ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00a74	50		 push	 eax
  00a75	e8 00 00 00 00	 call	 _memset
  00a7a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 269  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFA, 0xBF, sizeof(pMsg));

  00a7d	68 60 02 00 00	 push	 608			; 00000260H
  00a82	68 bf 00 00 00	 push	 191			; 000000bfH
  00a87	68 fa 00 00 00	 push	 250			; 000000faH
  00a8c	8d 85 88 fd ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00a92	50		 push	 eax
  00a93	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00a99	e8 00 00 00 00	 call	 ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ; PWMSG_HEAD2::set

; 270  : 
; 271  : 
; 272  : 	if(iClass < 0 || iClass > MAX_TYPE_PLAYER)

  00a9e	83 7d ec 00	 cmp	 DWORD PTR _iClass$[ebp], 0
  00aa2	7c 06		 jl	 SHORT $LN5@PlayerCalc
  00aa4	83 7d ec 07	 cmp	 DWORD PTR _iClass$[ebp], 7
  00aa8	7e 05		 jle	 SHORT $LN6@PlayerCalc
$LN5@PlayerCalc:

; 273  : 	{
; 274  : 		return;

  00aaa	e9 f9 00 00 00	 jmp	 $LN11@PlayerCalc
$LN6@PlayerCalc:

; 275  : 	}
; 276  : 	//for(int i = 0; i < MAX_TYPE_PLAYER; i++)
; 277  : 	{
; 278  : 		//if(iClass = i)
; 279  : 		{
; 280  : 			for(int n = 0; n < iCount; n++)

  00aaf	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$219384[ebp], 0
  00ab9	eb 0f		 jmp	 SHORT $LN4@PlayerCalc
$LN3@PlayerCalc:
  00abb	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _n$219384[ebp]
  00ac1	83 c0 01	 add	 eax, 1
  00ac4	89 85 84 fd ff
	ff		 mov	 DWORD PTR _n$219384[ebp], eax
$LN4@PlayerCalc:
  00aca	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _n$219384[ebp]
  00ad0	3b 45 e8	 cmp	 eax, DWORD PTR _iCount$[ebp]
  00ad3	0f 8d b7 00 00
	00		 jge	 $LN2@PlayerCalc

; 281  : 			{
; 282  : 				pMsg.Wing[n].ItemType = ITEMGET(this->m_Wing[iClass][n].Type, this->m_Wing[iClass][n].Index);

  00ad9	8b 45 ec	 mov	 eax, DWORD PTR _iClass$[ebp]
  00adc	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  00ae2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ae5	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00aec	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _n$219384[ebp]
  00af2	c1 e0 04	 shl	 eax, 4
  00af5	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  00af8	c1 e1 09	 shl	 ecx, 9
  00afb	8b 55 ec	 mov	 edx, DWORD PTR _iClass$[ebp]
  00afe	69 d2 20 03 00
	00		 imul	 edx, 800		; 00000320H
  00b04	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b07	8d 94 10 2c 03
	00 00		 lea	 edx, DWORD PTR [eax+edx+812]
  00b0e	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _n$219384[ebp]
  00b14	c1 e0 04	 shl	 eax, 4
  00b17	03 4c 02 04	 add	 ecx, DWORD PTR [edx+eax+4]
  00b1b	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _n$219384[ebp]
  00b21	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00b24	89 8c 15 90 fd
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+edx+8], ecx

; 283  : 				pMsg.Wing[n].Damage = this->m_Wing[iClass][n].AttackPercent;

  00b2b	8b 45 ec	 mov	 eax, DWORD PTR _iClass$[ebp]
  00b2e	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  00b34	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00b37	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00b3e	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _n$219384[ebp]
  00b44	c1 e0 04	 shl	 eax, 4
  00b47	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR _n$219384[ebp]
  00b4d	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00b50	8b 54 02 08	 mov	 edx, DWORD PTR [edx+eax+8]
  00b54	89 94 0d 94 fd
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+ecx+12], edx

; 284  : 				pMsg.Wing[n].Absord = this->m_Wing[iClass][n].AbsurdPercent;

  00b5b	8b 45 ec	 mov	 eax, DWORD PTR _iClass$[ebp]
  00b5e	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  00b64	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00b67	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00b6e	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _n$219384[ebp]
  00b74	c1 e0 04	 shl	 eax, 4
  00b77	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR _n$219384[ebp]
  00b7d	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00b80	8b 54 02 0c	 mov	 edx, DWORD PTR [edx+eax+12]
  00b84	89 94 0d 98 fd
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+ecx+16], edx

; 285  : 
; 286  : 				if(6660 == pMsg.Wing[n].ItemType)
; 287  : 				{
; 288  : 					//CItem * Darkhorse = &lpUser->pInventory[8];
; 289  : 
; 290  : 					//pMsg.Wing[n].Absord = Darkhorse->m_PetItem_Level * this->m_Wing[iClass][n].AbsurdPercent;
; 291  : 				}
; 292  : 				
; 293  : 			}

  00b8b	e9 2b ff ff ff	 jmp	 $LN3@PlayerCalc
$LN2@PlayerCalc:

; 294  : 
; 295  : 			//break;
; 296  : 		}
; 297  : 	}
; 298  : 
; 299  : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  00b90	68 60 02 00 00	 push	 608			; 00000260H
  00b95	8d 85 88 fd ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00b9b	50		 push	 eax
  00b9c	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00b9f	51		 push	 ecx
  00ba0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00ba5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@PlayerCalc:

; 300  : 
; 301  : }

  00ba8	5f		 pop	 edi
  00ba9	5e		 pop	 esi
  00baa	5b		 pop	 ebx
  00bab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bae	33 cd		 xor	 ecx, ebp
  00bb0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bb5	8b e5		 mov	 esp, ebp
  00bb7	5d		 pop	 ebp
  00bb8	c2 04 00	 ret	 4
?PlayerCalculator@cWingsDamage@@QAEXH@Z ENDP		; cWingsDamage::PlayerCalculator
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z PROC			; PWMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 149  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 150  : 		lpBuf[0] = 0xC2;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H

; 151  : 		lpBuf[1] = SET_NUMBERH(size);

  00012	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00015	c1 e8 08	 shr	 eax, 8
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  0001b	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 152  : 		lpBuf[2] = SET_NUMBERL(size);

  0001e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00021	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00029	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 153  : 		lpBuf[3] = head;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0002f	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00032	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 154  : 		lpBuf[4] = sub;

  00035	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00038	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0003b	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 155  : 	}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 10 00	 ret	 16			; 00000010H
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ENDP			; PWMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z	; cWingsDamage::SetCharHorseAttack
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\wingsdamage.cpp
_TEXT	SEGMENT
tv70 = -100						; size = 4
_iDamage$ = -32						; size = 4
_n$219408 = -28						; size = 4
_i$219403 = -24						; size = 4
_iDefencePercent$ = -20					; size = 4
_iCount$ = -16						; size = 4
_iClass$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_ItemType$ = 12						; size = 4
_ItemLevel$ = 16					; size = 4
_AttackDamage$ = 20					; size = 4
?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z PROC	; cWingsDamage::SetCharHorseAttack
; _this$ = ecx

; 304  : {

  00bc0	55		 push	 ebp
  00bc1	8b ec		 mov	 ebp, esp
  00bc3	83 ec 64	 sub	 esp, 100		; 00000064H
  00bc6	53		 push	 ebx
  00bc7	56		 push	 esi
  00bc8	57		 push	 edi
  00bc9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 305  : 	if(this->m_bWingsCharacter)

  00bcc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00bcf	0f b6 88 28 03
	00 00		 movzx	 ecx, BYTE PTR [eax+808]
  00bd6	85 c9		 test	 ecx, ecx
  00bd8	74 05		 je	 SHORT $LN12@SetCharHor

; 306  : 	{
; 307  : 		return;

  00bda	e9 34 01 00 00	 jmp	 $LN13@SetCharHor
$LN12@SetCharHor:

; 308  : 	}
; 309  : 
; 310  : 	if(!OBJMAX_RANGE(aIndex))

  00bdf	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00be3	7d 09		 jge	 SHORT $LN15@SetCharHor
  00be5	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00bec	eb 0f		 jmp	 SHORT $LN16@SetCharHor
$LN15@SetCharHor:
  00bee	33 c0		 xor	 eax, eax
  00bf0	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00bf7	0f 9e c0	 setle	 al
  00bfa	89 45 9c	 mov	 DWORD PTR tv70[ebp], eax
$LN16@SetCharHor:
  00bfd	83 7d 9c 00	 cmp	 DWORD PTR tv70[ebp], 0
  00c01	75 05		 jne	 SHORT $LN11@SetCharHor

; 311  : 	{
; 312  : 		return;

  00c03	e9 0b 01 00 00	 jmp	 $LN13@SetCharHor
$LN11@SetCharHor:

; 313  : 	}
; 314  : 
; 315  : 	LPOBJ lpUser = &gObj[aIndex];

  00c08	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c0b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00c11	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c17	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 316  : 
; 317  : 	int iClass = lpUser->Class;

  00c1a	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c1d	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00c24	89 4d f4	 mov	 DWORD PTR _iClass$[ebp], ecx

; 318  : 	int iCount = this->m_iWingCount[iClass];

  00c27	8b 45 f4	 mov	 eax, DWORD PTR _iClass$[ebp]
  00c2a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c2d	8b 94 81 0c 19
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+6412]
  00c34	89 55 f0	 mov	 DWORD PTR _iCount$[ebp], edx

; 319  : 	int iDefencePercent = 0;

  00c37	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iDefencePercent$[ebp], 0

; 320  : 
; 321  : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  00c3e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$219403[ebp], 0
  00c45	eb 09		 jmp	 SHORT $LN10@SetCharHor
$LN9@SetCharHor:
  00c47	8b 45 e8	 mov	 eax, DWORD PTR _i$219403[ebp]
  00c4a	83 c0 01	 add	 eax, 1
  00c4d	89 45 e8	 mov	 DWORD PTR _i$219403[ebp], eax
$LN10@SetCharHor:
  00c50	83 7d e8 07	 cmp	 DWORD PTR _i$219403[ebp], 7
  00c54	0f 8d 90 00 00
	00		 jge	 $LN8@SetCharHor

; 322  : 	{
; 323  : 		if(iClass = i)

  00c5a	8b 45 e8	 mov	 eax, DWORD PTR _i$219403[ebp]
  00c5d	89 45 f4	 mov	 DWORD PTR _iClass$[ebp], eax
  00c60	83 7d f4 00	 cmp	 DWORD PTR _iClass$[ebp], 0
  00c64	74 7f		 je	 SHORT $LN7@SetCharHor

; 324  : 		{
; 325  : 			for(int n = 0; n < iCount; n++)

  00c66	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$219408[ebp], 0
  00c6d	eb 09		 jmp	 SHORT $LN6@SetCharHor
$LN5@SetCharHor:
  00c6f	8b 45 e4	 mov	 eax, DWORD PTR _n$219408[ebp]
  00c72	83 c0 01	 add	 eax, 1
  00c75	89 45 e4	 mov	 DWORD PTR _n$219408[ebp], eax
$LN6@SetCharHor:
  00c78	8b 45 e4	 mov	 eax, DWORD PTR _n$219408[ebp]
  00c7b	3b 45 f0	 cmp	 eax, DWORD PTR _iCount$[ebp]
  00c7e	7d 65		 jge	 SHORT $LN7@SetCharHor

; 326  : 			{
; 327  : 				if(ItemType == ITEMGET(this->m_Wing[i][n].Type, this->m_Wing[i][n].Index)) 

  00c80	8b 45 e8	 mov	 eax, DWORD PTR _i$219403[ebp]
  00c83	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  00c89	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c8c	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00c93	8b 45 e4	 mov	 eax, DWORD PTR _n$219408[ebp]
  00c96	c1 e0 04	 shl	 eax, 4
  00c99	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  00c9c	c1 e1 09	 shl	 ecx, 9
  00c9f	8b 55 e8	 mov	 edx, DWORD PTR _i$219403[ebp]
  00ca2	69 d2 20 03 00
	00		 imul	 edx, 800		; 00000320H
  00ca8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00cab	8d 94 10 2c 03
	00 00		 lea	 edx, DWORD PTR [eax+edx+812]
  00cb2	8b 45 e4	 mov	 eax, DWORD PTR _n$219408[ebp]
  00cb5	c1 e0 04	 shl	 eax, 4
  00cb8	03 4c 02 04	 add	 ecx, DWORD PTR [edx+eax+4]
  00cbc	39 4d 0c	 cmp	 DWORD PTR _ItemType$[ebp], ecx
  00cbf	75 22		 jne	 SHORT $LN3@SetCharHor

; 328  : 				{
; 329  : 					iDefencePercent = this->m_Wing[i][n].AbsurdPercent;

  00cc1	8b 45 e8	 mov	 eax, DWORD PTR _i$219403[ebp]
  00cc4	69 c0 20 03 00
	00		 imul	 eax, 800		; 00000320H
  00cca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ccd	8d 94 01 2c 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+812]
  00cd4	8b 45 e4	 mov	 eax, DWORD PTR _n$219408[ebp]
  00cd7	c1 e0 04	 shl	 eax, 4
  00cda	8b 4c 02 0c	 mov	 ecx, DWORD PTR [edx+eax+12]
  00cde	89 4d ec	 mov	 DWORD PTR _iDefencePercent$[ebp], ecx

; 330  : 					break;

  00ce1	eb 02		 jmp	 SHORT $LN7@SetCharHor
$LN3@SetCharHor:

; 331  : 				}
; 332  : 			}

  00ce3	eb 8a		 jmp	 SHORT $LN5@SetCharHor
$LN7@SetCharHor:

; 333  : 		}
; 334  : 	}

  00ce5	e9 5d ff ff ff	 jmp	 $LN9@SetCharHor
$LN8@SetCharHor:

; 335  : 
; 336  : 	if(iDefencePercent == 0)

  00cea	83 7d ec 00	 cmp	 DWORD PTR _iDefencePercent$[ebp], 0
  00cee	75 02		 jne	 SHORT $LN2@SetCharHor

; 337  : 	{
; 338  : 		return;

  00cf0	eb 21		 jmp	 SHORT $LN13@SetCharHor
$LN2@SetCharHor:

; 339  : 	}
; 340  : 
; 341  : 	int iDamage = 100 - ((ItemLevel + iDefencePercent) / 2 );

  00cf2	8b 45 10	 mov	 eax, DWORD PTR _ItemLevel$[ebp]
  00cf5	03 45 ec	 add	 eax, DWORD PTR _iDefencePercent$[ebp]
  00cf8	99		 cdq
  00cf9	2b c2		 sub	 eax, edx
  00cfb	d1 f8		 sar	 eax, 1
  00cfd	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00d02	2b c8		 sub	 ecx, eax
  00d04	89 4d e0	 mov	 DWORD PTR _iDamage$[ebp], ecx

; 342  : 
; 343  : 	if(iDamage < 0)

  00d07	79 02		 jns	 SHORT $LN1@SetCharHor

; 344  : 	{
; 345  : 		return;

  00d09	eb 08		 jmp	 SHORT $LN13@SetCharHor
$LN1@SetCharHor:

; 346  : 	}
; 347  : 
; 348  : 	AttackDamage = iDamage;

  00d0b	8b 45 14	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  00d0e	8b 4d e0	 mov	 ecx, DWORD PTR _iDamage$[ebp]
  00d11	89 08		 mov	 DWORD PTR [eax], ecx
$LN13@SetCharHor:

; 349  : }

  00d13	5f		 pop	 edi
  00d14	5e		 pop	 esi
  00d15	5b		 pop	 ebx
  00d16	8b e5		 mov	 esp, ebp
  00d18	5d		 pop	 ebp
  00d19	c2 10 00	 ret	 16			; 00000010H
?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z ENDP	; cWingsDamage::SetCharHorseAttack
_TEXT	ENDS
END
