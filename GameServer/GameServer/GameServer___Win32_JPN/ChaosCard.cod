; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ChaosCard.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CChaosCard@@6B@				; CChaosCard::`vftable'
PUBLIC	??0CChaosCard@@QAE@XZ				; CChaosCard::CChaosCard
PUBLIC	??_R4CChaosCard@@6B@				; CChaosCard::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCChaosCard@@@8				; CChaosCard `RTTI Type Descriptor'
PUBLIC	??_R3CChaosCard@@8				; CChaosCard::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CChaosCard@@8				; CChaosCard::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CChaosCard@@8			; CChaosCard::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECChaosCard@@UAEPAXI@Z:PROC			; CChaosCard::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CChaosCard@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\chaoscard.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CChaosCard@@8 DD FLAT:??_R0?AVCChaosCard@@@8 ; CChaosCard::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CChaosCard@@8
rdata$r	ENDS
;	COMDAT ??_R2CChaosCard@@8
rdata$r	SEGMENT
??_R2CChaosCard@@8 DD FLAT:??_R1A@?0A@EA@CChaosCard@@8	; CChaosCard::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CChaosCard@@8
rdata$r	SEGMENT
??_R3CChaosCard@@8 DD 00H				; CChaosCard::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CChaosCard@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCChaosCard@@@8
_DATA	SEGMENT
??_R0?AVCChaosCard@@@8 DD FLAT:??_7type_info@@6B@	; CChaosCard `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCChaosCard@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CChaosCard@@6B@
rdata$r	SEGMENT
??_R4CChaosCard@@6B@ DD 00H				; CChaosCard::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCChaosCard@@@8
	DD	FLAT:??_R3CChaosCard@@8
rdata$r	ENDS
;	COMDAT ??_7CChaosCard@@6B@
CONST	SEGMENT
??_7CChaosCard@@6B@ DD FLAT:??_R4CChaosCard@@6B@	; CChaosCard::`vftable'
	DD	FLAT:??_ECChaosCard@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CChaosCard@@QAE@XZ PROC				; CChaosCard::CChaosCard
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CChaosCard@@6B@

; 13   : 
; 14   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CChaosCard@@QAE@XZ ENDP				; CChaosCard::CChaosCard
_TEXT	ENDS
PUBLIC	??1CChaosCard@@UAE@XZ				; CChaosCard::~CChaosCard
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCChaosCard@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCChaosCard@@UAEPAXI@Z PROC				; CChaosCard::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CChaosCard@@UAE@XZ	; CChaosCard::~CChaosCard
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCChaosCard@@UAEPAXI@Z ENDP				; CChaosCard::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CChaosCard@@UAE@XZ PROC				; CChaosCard::~CChaosCard
; _this$ = ecx

; 17   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CChaosCard@@6B@

; 18   : 
; 19   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CChaosCard@@UAE@XZ ENDP				; CChaosCard::~CChaosCard
_TEXT	ENDS
PUBLIC	?Initialize@CChaosCard@@QAEXXZ			; CChaosCard::Initialize
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$205813 = -8						; size = 4
_this$ = -4						; size = 4
?Initialize@CChaosCard@@QAEXXZ PROC			; CChaosCard::Initialize
; _this$ = ecx

; 22   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 48	 sub	 esp, 72			; 00000048H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	for(int i = 0; i < MAX_CHAOS_CARD; i++)

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$205813[ebp], 0
  00053	eb 09		 jmp	 SHORT $LN3@Initialize
$LN2@Initialize:
  00055	8b 45 f8	 mov	 eax, DWORD PTR _i$205813[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	89 45 f8	 mov	 DWORD PTR _i$205813[ebp], eax
$LN3@Initialize:
  0005e	83 7d f8 05	 cmp	 DWORD PTR _i$205813[ebp], 5
  00062	7d 2f		 jge	 SHORT $LN4@Initialize

; 24   : 	{
; 25   : 		this->m_ChaosCardList[i].HaveInfo = 0; //0x04

  00064	8b 45 f8	 mov	 eax, DWORD PTR _i$205813[ebp]
  00067	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 26   : 		this->m_ChaosCardList[i].szChaosCardName[0] = NULL; //0x05

  00072	8b 45 f8	 mov	 eax, DWORD PTR _i$205813[ebp]
  00075	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	c6 44 01 05 00	 mov	 BYTE PTR [ecx+eax+5], 0

; 27   : 		this->m_ChaosCardList[i].ChaosCardInfo = 0; //0x1C

  00080	8b 45 f8	 mov	 eax, DWORD PTR _i$205813[ebp]
  00083	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	c7 44 01 1c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+28], 0

; 28   : 	}

  00091	eb c2		 jmp	 SHORT $LN2@Initialize
$LN4@Initialize:

; 29   : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
?Initialize@CChaosCard@@QAEXXZ ENDP			; CChaosCard::Initialize
_TEXT	ENDS
PUBLIC	?Load@CChaosCard@@QAE_NPAD0@Z			; CChaosCard::Load
EXTRN	?Load@CCashLotterySystem@@QAEXPAD@Z:PROC	; CCashLotterySystem::Load
EXTRN	??0CCashLotterySystem@@QAE@XZ:PROC		; CCashLotterySystem::CCashLotterySystem
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_strcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?Load@CChaosCard@@QAE_NPAD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CChaosCard@@QAE_NPAD0@Z$0
__ehfuncinfo$?Load@CChaosCard@@QAE_NPAD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CChaosCard@@QAE_NPAD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv87 = -100						; size = 4
$T205876 = -96						; size = 4
$T205877 = -92						; size = 4
_i$205823 = -24						; size = 4
_ChaosCard$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_szChaosCardName$ = 8					; size = 4
_lpszFileName$ = 12					; size = 4
?Load@CChaosCard@@QAE_NPAD0@Z PROC			; CChaosCard::Load
; _this$ = ecx

; 32   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	6a ff		 push	 -1
  000a5	68 00 00 00 00	 push	 __ehhandler$?Load@CChaosCard@@QAE_NPAD0@Z
  000aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  000b0	50		 push	 eax
  000b1	83 ec 58	 sub	 esp, 88			; 00000058H
  000b4	53		 push	 ebx
  000b5	56		 push	 esi
  000b6	57		 push	 edi
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000bc	33 c5		 xor	 eax, ebp
  000be	50		 push	 eax
  000bf	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  000c2	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  000c8	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 	CCashLotterySystem * ChaosCard = 0; //ebp-14

  000cb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ChaosCard$[ebp], 0

; 34   : 
; 35   : 	for(int i = 0; i < MAX_CHAOS_CARD; i++)

  000d2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$205823[ebp], 0
  000d9	eb 09		 jmp	 SHORT $LN5@Load
$LN4@Load:
  000db	8b 45 e8	 mov	 eax, DWORD PTR _i$205823[ebp]
  000de	83 c0 01	 add	 eax, 1
  000e1	89 45 e8	 mov	 DWORD PTR _i$205823[ebp], eax
$LN5@Load:
  000e4	83 7d e8 05	 cmp	 DWORD PTR _i$205823[ebp], 5
  000e8	0f 8d b1 00 00
	00		 jge	 $LN3@Load

; 36   : 	{
; 37   : 		if(this->m_ChaosCardList[i].HaveInfo == false)

  000ee	8b 45 e8	 mov	 eax, DWORD PTR _i$205823[ebp]
  000f1	6b c0 1c	 imul	 eax, 28			; 0000001cH
  000f4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	0f b6 54 01 04	 movzx	 edx, BYTE PTR [ecx+eax+4]
  000fc	85 d2		 test	 edx, edx
  000fe	0f 85 96 00 00
	00		 jne	 $LN2@Load

; 38   : 		{
; 39   : 			this->m_ChaosCardList[i].HaveInfo = true;

  00104	8b 45 e8	 mov	 eax, DWORD PTR _i$205823[ebp]
  00107	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0010a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010d	c6 44 01 04 01	 mov	 BYTE PTR [ecx+eax+4], 1

; 40   : 			strcpy(this->m_ChaosCardList[i].szChaosCardName, szChaosCardName);

  00112	8b 45 08	 mov	 eax, DWORD PTR _szChaosCardName$[ebp]
  00115	50		 push	 eax
  00116	8b 4d e8	 mov	 ecx, DWORD PTR _i$205823[ebp]
  00119	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0011c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	8d 44 0a 05	 lea	 eax, DWORD PTR [edx+ecx+5]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 _strcpy
  00129	83 c4 08	 add	 esp, 8

; 41   : 
; 42   : 			ChaosCard = new CCashLotterySystem; //good

  0012c	68 ec 76 00 00	 push	 30444			; 000076ecH
  00131	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00136	83 c4 04	 add	 esp, 4
  00139	89 45 a4	 mov	 DWORD PTR $T205877[ebp], eax
  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00143	83 7d a4 00	 cmp	 DWORD PTR $T205877[ebp], 0
  00147	74 0d		 je	 SHORT $LN8@Load
  00149	8b 4d a4	 mov	 ecx, DWORD PTR $T205877[ebp]
  0014c	e8 00 00 00 00	 call	 ??0CCashLotterySystem@@QAE@XZ ; CCashLotterySystem::CCashLotterySystem
  00151	89 45 9c	 mov	 DWORD PTR tv87[ebp], eax
  00154	eb 07		 jmp	 SHORT $LN9@Load
$LN8@Load:
  00156	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN9@Load:
  0015d	8b 45 9c	 mov	 eax, DWORD PTR tv87[ebp]
  00160	89 45 a0	 mov	 DWORD PTR $T205876[ebp], eax
  00163	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016a	8b 4d a0	 mov	 ecx, DWORD PTR $T205876[ebp]
  0016d	89 4d ec	 mov	 DWORD PTR _ChaosCard$[ebp], ecx

; 43   : 
; 44   : 			if(ChaosCard == NULL)

  00170	83 7d ec 00	 cmp	 DWORD PTR _ChaosCard$[ebp], 0
  00174	75 04		 jne	 SHORT $LN1@Load

; 45   : 			{
; 46   : 				return 0;

  00176	32 c0		 xor	 al, al
  00178	eb 27		 jmp	 SHORT $LN6@Load
$LN1@Load:

; 47   : 			}
; 48   : 
; 49   : 			ChaosCard->Load(lpszFileName);

  0017a	8b 45 0c	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  0017d	50		 push	 eax
  0017e	8b 4d ec	 mov	 ecx, DWORD PTR _ChaosCard$[ebp]
  00181	e8 00 00 00 00	 call	 ?Load@CCashLotterySystem@@QAEXPAD@Z ; CCashLotterySystem::Load

; 50   : 
; 51   : 			this->m_ChaosCardList[i].ChaosCardInfo = ChaosCard; //Chaos Card List Insert

  00186	8b 45 e8	 mov	 eax, DWORD PTR _i$205823[ebp]
  00189	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0018c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0018f	8b 55 ec	 mov	 edx, DWORD PTR _ChaosCard$[ebp]
  00192	89 54 01 1c	 mov	 DWORD PTR [ecx+eax+28], edx

; 52   : 
; 53   : 			return 1;

  00196	b0 01		 mov	 al, 1
  00198	eb 07		 jmp	 SHORT $LN6@Load
$LN2@Load:

; 54   : 		}
; 55   : 	}

  0019a	e9 3c ff ff ff	 jmp	 $LN4@Load
$LN3@Load:

; 56   : 
; 57   : 	return 0;

  0019f	32 c0		 xor	 al, al
$LN6@Load:

; 58   : }

  001a1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ab	59		 pop	 ecx
  001ac	5f		 pop	 edi
  001ad	5e		 pop	 esi
  001ae	5b		 pop	 ebx
  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Load@CChaosCard@@QAE_NPAD0@Z$0:
  00000	8b 45 a4	 mov	 eax, DWORD PTR $T205877[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Load@CChaosCard@@QAE_NPAD0@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CChaosCard@@QAE_NPAD0@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CChaosCard@@QAE_NPAD0@Z ENDP			; CChaosCard::Load
PUBLIC	?GetChaosCardData@CChaosCard@@QAEPAVCCashLotterySystem@@PAD@Z ; CChaosCard::GetChaosCardData
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$205837 = -8						; size = 4
_this$ = -4						; size = 4
_szChaosCardName$ = 8					; size = 4
?GetChaosCardData@CChaosCard@@QAEPAVCCashLotterySystem@@PAD@Z PROC ; CChaosCard::GetChaosCardData
; _this$ = ecx

; 61   : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	83 ec 48	 sub	 esp, 72			; 00000048H
  001c6	53		 push	 ebx
  001c7	56		 push	 esi
  001c8	57		 push	 edi
  001c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	for(int i = 0; i < MAX_CHAOS_CARD; i++)

  001cc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$205837[ebp], 0
  001d3	eb 09		 jmp	 SHORT $LN5@GetChaosCa
$LN4@GetChaosCa:
  001d5	8b 45 f8	 mov	 eax, DWORD PTR _i$205837[ebp]
  001d8	83 c0 01	 add	 eax, 1
  001db	89 45 f8	 mov	 DWORD PTR _i$205837[ebp], eax
$LN5@GetChaosCa:
  001de	83 7d f8 05	 cmp	 DWORD PTR _i$205837[ebp], 5
  001e2	7d 43		 jge	 SHORT $LN3@GetChaosCa

; 63   : 	{
; 64   : 		if(this->m_ChaosCardList[i].HaveInfo == false)

  001e4	8b 45 f8	 mov	 eax, DWORD PTR _i$205837[ebp]
  001e7	6b c0 1c	 imul	 eax, 28			; 0000001cH
  001ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ed	0f b6 54 01 04	 movzx	 edx, BYTE PTR [ecx+eax+4]
  001f2	85 d2		 test	 edx, edx
  001f4	75 02		 jne	 SHORT $LN2@GetChaosCa

; 65   : 		{
; 66   : 			continue;

  001f6	eb dd		 jmp	 SHORT $LN4@GetChaosCa
$LN2@GetChaosCa:

; 67   : 		}
; 68   : 
; 69   : 		if( strcmp(this->m_ChaosCardList[i].szChaosCardName, szChaosCardName) == 0) //if success

  001f8	8b 45 08	 mov	 eax, DWORD PTR _szChaosCardName$[ebp]
  001fb	50		 push	 eax
  001fc	8b 4d f8	 mov	 ecx, DWORD PTR _i$205837[ebp]
  001ff	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00202	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00205	8d 44 0a 05	 lea	 eax, DWORD PTR [edx+ecx+5]
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 _strcmp
  0020f	83 c4 08	 add	 esp, 8
  00212	85 c0		 test	 eax, eax
  00214	75 0f		 jne	 SHORT $LN1@GetChaosCa

; 70   : 		{
; 71   : 			return this->m_ChaosCardList[i].ChaosCardInfo;

  00216	8b 45 f8	 mov	 eax, DWORD PTR _i$205837[ebp]
  00219	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0021c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021f	8b 44 01 1c	 mov	 eax, DWORD PTR [ecx+eax+28]
  00223	eb 04		 jmp	 SHORT $LN6@GetChaosCa
$LN1@GetChaosCa:

; 72   : 		}
; 73   : 	}

  00225	eb ae		 jmp	 SHORT $LN4@GetChaosCa
$LN3@GetChaosCa:

; 74   : 
; 75   : 	return NULL;

  00227	33 c0		 xor	 eax, eax
$LN6@GetChaosCa:

; 76   : }

  00229	5f		 pop	 edi
  0022a	5e		 pop	 esi
  0022b	5b		 pop	 ebx
  0022c	8b e5		 mov	 esp, ebp
  0022e	5d		 pop	 ebp
  0022f	c2 04 00	 ret	 4
?GetChaosCardData@CChaosCard@@QAEPAVCCashLotterySystem@@PAD@Z ENDP ; CChaosCard::GetChaosCardData
_TEXT	ENDS
PUBLIC	?CheckChaosCardInfo@CChaosCard@@QAEHPADPAVCItem@@@Z ; CChaosCard::CheckChaosCardInfo
EXTRN	?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z:PROC ; CCashLotterySystem::GetItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_ChaosCard$ = -8					; size = 4
_this$ = -4						; size = 4
_szChaosCardName$ = 8					; size = 4
_lpItem$ = 12						; size = 4
?CheckChaosCardInfo@CChaosCard@@QAEHPADPAVCItem@@@Z PROC ; CChaosCard::CheckChaosCardInfo
; _this$ = ecx

; 79   : {

  00240	55		 push	 ebp
  00241	8b ec		 mov	 ebp, esp
  00243	83 ec 48	 sub	 esp, 72			; 00000048H
  00246	53		 push	 ebx
  00247	56		 push	 esi
  00248	57		 push	 edi
  00249	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 	CCashLotterySystem * ChaosCard = 0;

  0024c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ChaosCard$[ebp], 0

; 81   : 	
; 82   : 	ChaosCard = this->GetChaosCardData(szChaosCardName); //find and get chaos card info by name

  00253	8b 45 08	 mov	 eax, DWORD PTR _szChaosCardName$[ebp]
  00256	50		 push	 eax
  00257	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025a	e8 00 00 00 00	 call	 ?GetChaosCardData@CChaosCard@@QAEPAVCCashLotterySystem@@PAD@Z ; CChaosCard::GetChaosCardData
  0025f	89 45 f8	 mov	 DWORD PTR _ChaosCard$[ebp], eax

; 83   : 
; 84   : 	if(ChaosCard == NULL) //doesn't exist, empty!

  00262	83 7d f8 00	 cmp	 DWORD PTR _ChaosCard$[ebp], 0
  00266	75 04		 jne	 SHORT $LN2@CheckChaos

; 85   : 	{
; 86   : 		return 0;

  00268	33 c0		 xor	 eax, eax
  0026a	eb 1b		 jmp	 SHORT $LN3@CheckChaos
$LN2@CheckChaos:

; 87   : 	}
; 88   : 
; 89   : 	ChaosCard->GetItem(lpItem);

  0026c	8b 45 0c	 mov	 eax, DWORD PTR _lpItem$[ebp]
  0026f	50		 push	 eax
  00270	8b 4d f8	 mov	 ecx, DWORD PTR _ChaosCard$[ebp]
  00273	e8 00 00 00 00	 call	 ?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z ; CCashLotterySystem::GetItem

; 90   : 
; 91   : 	if(lpItem == NULL) //wtf?

  00278	83 7d 0c 00	 cmp	 DWORD PTR _lpItem$[ebp], 0
  0027c	75 04		 jne	 SHORT $LN1@CheckChaos

; 92   : 	{
; 93   : 		return 0;

  0027e	33 c0		 xor	 eax, eax
  00280	eb 05		 jmp	 SHORT $LN3@CheckChaos
$LN1@CheckChaos:

; 94   : 	}
; 95   : 
; 96   : 	return 1;

  00282	b8 01 00 00 00	 mov	 eax, 1
$LN3@CheckChaos:

; 97   : }

  00287	5f		 pop	 edi
  00288	5e		 pop	 esi
  00289	5b		 pop	 ebx
  0028a	8b e5		 mov	 esp, ebp
  0028c	5d		 pop	 ebp
  0028d	c2 08 00	 ret	 8
?CheckChaosCardInfo@CChaosCard@@QAEHPADPAVCItem@@@Z ENDP ; CChaosCard::CheckChaosCardInfo
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_ChaosCard@@YAXXZ
text$yc	SEGMENT
??__Eg_ChaosCard@@YAXXZ PROC				; `dynamic initializer for 'g_ChaosCard'', COMDAT

; 9    : CChaosCard g_ChaosCard;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCard@@3VCChaosCard@@A ; g_ChaosCard
  0000e	e8 00 00 00 00	 call	 ??0CChaosCard@@QAE@XZ	; CChaosCard::CChaosCard
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_ChaosCard@@YAXXZ ; `dynamic atexit destructor for 'g_ChaosCard''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_ChaosCard@@YAXXZ ENDP				; `dynamic initializer for 'g_ChaosCard''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_ChaosCard@@YAXXZ
text$yd	SEGMENT
??__Fg_ChaosCard@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ChaosCard'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCard@@3VCChaosCard@@A ; g_ChaosCard
  0000e	e8 00 00 00 00	 call	 ??1CChaosCard@@UAE@XZ	; CChaosCard::~CChaosCard
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_ChaosCard@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ChaosCard''
text$yd	ENDS
PUBLIC	?g_ChaosCard@@3VCChaosCard@@A			; g_ChaosCard
_BSS	SEGMENT
?g_ChaosCard@@3VCChaosCard@@A DB 090H DUP (?)		; g_ChaosCard
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ChaosCard$initializer$ DD FLAT:??__Eg_ChaosCard@@YAXXZ
CRT$XCU	ENDS
END
