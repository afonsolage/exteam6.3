; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\LuaFun.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@NNLLPGPO@DebugPrint?$AA@		; `string'
PUBLIC	?Debug_AddDebugPrintTemp@@YAXPAUlua_State@@@Z	; Debug_AddDebugPrintTemp
EXTRN	_lua_setfield:PROC
EXTRN	_lua_pushcclosure:PROC
;	COMDAT ??_C@_0L@NNLLPGPO@DebugPrint?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\luafun.cpp
CONST	SEGMENT
??_C@_0L@NNLLPGPO@DebugPrint?$AA@ DB 'DebugPrint', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$205109 = -20						; size = 4
_DebugGlue$ = -16					; size = 16
_L$ = 8							; size = 4
?Debug_AddDebugPrintTemp@@YAXPAUlua_State@@@Z PROC	; Debug_AddDebugPrintTemp

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 24   : 	luaL_reg DebugGlue[] =
; 25   : 	{
; 26   : 		{"DebugPrint", Debug_Print},

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _DebugGlue$[ebp], OFFSET ??_C@_0L@NNLLPGPO@DebugPrint?$AA@
  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _DebugGlue$[ebp+4], OFFSET ?Debug_Print@@YAHPAUlua_State@@@Z ; Debug_Print

; 27   : 		{NULL, NULL}

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _DebugGlue$[ebp+8], 0
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _DebugGlue$[ebp+12], 0

; 28   : 	};
; 29   : 
; 30   : 
; 31   : 	for (int i = 0; DebugGlue[i].name; ++i )

  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$205109[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN3@Debug_AddD
$LN2@Debug_AddD:
  0002e	8b 45 ec	 mov	 eax, DWORD PTR _i$205109[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 ec	 mov	 DWORD PTR _i$205109[ebp], eax
$LN3@Debug_AddD:
  00037	8b 45 ec	 mov	 eax, DWORD PTR _i$205109[ebp]
  0003a	83 7c c5 f0 00	 cmp	 DWORD PTR _DebugGlue$[ebp+eax*8], 0
  0003f	74 31		 je	 SHORT $LN4@Debug_AddD

; 32   : 	{
; 33   : 		lua_pushcclosure(L, DebugGlue[i].func, 0);

  00041	6a 00		 push	 0
  00043	8b 45 ec	 mov	 eax, DWORD PTR _i$205109[ebp]
  00046	8b 4c c5 f4	 mov	 ecx, DWORD PTR _DebugGlue$[ebp+eax*8+4]
  0004a	51		 push	 ecx
  0004b	8b 55 08	 mov	 edx, DWORD PTR _L$[ebp]
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _lua_pushcclosure
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 34   : 		lua_setfield(L, LUA_GLOBALSINDEX, DebugGlue[i].name);

  00057	8b 45 ec	 mov	 eax, DWORD PTR _i$205109[ebp]
  0005a	8b 4c c5 f0	 mov	 ecx, DWORD PTR _DebugGlue$[ebp+eax*8]
  0005e	51		 push	 ecx
  0005f	68 ee d8 ff ff	 push	 -10002			; ffffd8eeH
  00064	8b 55 08	 mov	 edx, DWORD PTR _L$[ebp]
  00067	52		 push	 edx
  00068	e8 00 00 00 00	 call	 _lua_setfield
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 35   : 	}

  00070	eb bc		 jmp	 SHORT $LN2@Debug_AddD
$LN4@Debug_AddD:

; 36   : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?Debug_AddDebugPrintTemp@@YAXPAUlua_State@@@Z ENDP	; Debug_AddDebugPrintTemp
; Function compile flags: /Odtp /ZI
_L$ = 8						; size = 4
?Debug_Print@@YAHPAUlua_State@@@Z PROC			; Debug_Print

; 13   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 40	 sub	 esp, 64			; 00000040H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi

; 14   : #ifdef _DEBUG
; 15   : 	// here must be some code
; 16   : 	// no code in executable, since it was build without _DEBUG
; 17   : #endif
; 18   : 
; 19   : 	return 0;

  00089	33 c0		 xor	 eax, eax

; 20   : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?Debug_Print@@YAHPAUlua_State@@@Z ENDP			; Debug_Print
_TEXT	ENDS
PUBLIC	??_C@_0DF@HDBMEAKM@luacall_Generic_Call?5error?5runni@ ; `string'
PUBLIC	??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@	; `string'
PUBLIC	??_C@_0CJ@EGCCEPHO@luacall_Generic_Call?5invalid?5opt@ ; `string'
PUBLIC	?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ	; g_Generic_Call
EXTRN	_lua_settop:PROC
EXTRN	_lua_isstring:PROC
EXTRN	_lua_tonumber:PROC
EXTRN	_lua_isnumber:PROC
EXTRN	_lua_tolstring:PROC
EXTRN	_lua_pcall:PROC
EXTRN	_luaL_checkstack:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_lua_pushlstring:PROC
EXTRN	_strlen:PROC
EXTRN	_lua_pushnumber:PROC
EXTRN	_lua_getfield:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0DF@HDBMEAKM@luacall_Generic_Call?5error?5runni@
CONST	SEGMENT
??_C@_0DF@HDBMEAKM@luacall_Generic_Call?5error?5runni@ DB 'luacall_Generi'
	DB	'c_Call error running function `%s'': %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@
CONST	SEGMENT
??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@ DB 'too many arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EGCCEPHO@luacall_Generic_Call?5invalid?5opt@
CONST	SEGMENT
??_C@_0CJ@EGCCEPHO@luacall_Generic_Call?5invalid?5opt@ DB 'luacall_Generi'
	DB	'c_Call invalid option (%c)', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv155 = -92						; size = 4
tv74 = -92						; size = 4
tv154 = -88						; size = 4
tv73 = -88						; size = 4
_nRetValCnt$ = -20					; size = 4
_nRes$ = -16						; size = 4
_pszString$205150 = -12					; size = 4
_nArg$ = -8						; size = 4
_VA_LIST$ = -4						; size = 4
_LState$ = 8						; size = 4
_Func$ = 12						; size = 4
_Sig$ = 16						; size = 4
?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ PROC		; g_Generic_Call

; 40   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 5c	 sub	 esp, 92			; 0000005cH
  000a6	53		 push	 ebx
  000a7	56		 push	 esi
  000a8	57		 push	 edi

; 41   : 	if( LState == NULL )

  000a9	83 7d 08 00	 cmp	 DWORD PTR _LState$[ebp], 0
  000ad	75 07		 jne	 SHORT $LN24@g_Generic_

; 42   : 	{
; 43   : 		return false;

  000af	32 c0		 xor	 al, al
  000b1	e9 be 02 00 00	 jmp	 $LN25@g_Generic_
$LN24@g_Generic_:

; 44   : 	}
; 45   : 	// ----
; 46   : 	va_list	VA_LIST;
; 47   : 	// -----
; 48   : 	int nArg = 0;

  000b6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nArg$[ebp], 0

; 49   : 	// -----
; 50   : 	va_start(VA_LIST, Sig);

  000bd	8d 45 14	 lea	 eax, DWORD PTR _Sig$[ebp+4]
  000c0	89 45 fc	 mov	 DWORD PTR _VA_LIST$[ebp], eax

; 51   : 	lua_getglobal(LState, Func);

  000c3	8b 45 0c	 mov	 eax, DWORD PTR _Func$[ebp]
  000c6	50		 push	 eax
  000c7	68 ee d8 ff ff	 push	 -10002			; ffffd8eeH
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _LState$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 _lua_getfield
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@g_Generic_:

; 52   : 	// -----
; 53   : 	while (*Sig)

  000d8	8b 45 10	 mov	 eax, DWORD PTR _Sig$[ebp]
  000db	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000de	85 c9		 test	 ecx, ecx
  000e0	0f 84 f5 00 00
	00		 je	 $LN22@g_Generic_

; 54   : 	{
; 55   : 		switch (*Sig++)

  000e6	8b 45 10	 mov	 eax, DWORD PTR _Sig$[ebp]
  000e9	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000ec	89 4d a8	 mov	 DWORD PTR tv73[ebp], ecx
  000ef	8b 55 10	 mov	 edx, DWORD PTR _Sig$[ebp]
  000f2	83 c2 01	 add	 edx, 1
  000f5	89 55 10	 mov	 DWORD PTR _Sig$[ebp], edx
  000f8	8b 45 a8	 mov	 eax, DWORD PTR tv73[ebp]
  000fb	89 45 a4	 mov	 DWORD PTR tv74[ebp], eax
  000fe	8b 4d a4	 mov	 ecx, DWORD PTR tv74[ebp]
  00101	83 e9 3e	 sub	 ecx, 62			; 0000003eH
  00104	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00107	83 7d a4 35	 cmp	 DWORD PTR tv74[ebp], 53	; 00000035H
  0010b	0f 87 8c 00 00
	00		 ja	 $LN14@g_Generic_
  00111	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00114	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN27@g_Generic_[edx]
  0011b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN28@g_Generic_[eax*4]
$LN19@g_Generic_:

; 56   : 		{
; 57   : 			case 'd':
; 58   : 			{
; 59   : 				lua_pushnumber(LState, va_arg(VA_LIST, double));

  00122	8b 45 fc	 mov	 eax, DWORD PTR _VA_LIST$[ebp]
  00125	83 c0 08	 add	 eax, 8
  00128	89 45 fc	 mov	 DWORD PTR _VA_LIST$[ebp], eax
  0012b	8b 4d fc	 mov	 ecx, DWORD PTR _VA_LIST$[ebp]
  0012e	dd 41 f8	 fld	 QWORD PTR [ecx-8]
  00131	83 ec 08	 sub	 esp, 8
  00134	dd 1c 24	 fstp	 QWORD PTR [esp]
  00137	8b 55 08	 mov	 edx, DWORD PTR _LState$[ebp]
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 _lua_pushnumber
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH

; 60   : 			} break;

  00143	eb 75		 jmp	 SHORT $LN20@g_Generic_
$LN18@g_Generic_:

; 61   : 			// -----
; 62   : 			case 'i':
; 63   : 			{
; 64   : 				lua_pushnumber(LState, va_arg(VA_LIST, int));

  00145	8b 45 fc	 mov	 eax, DWORD PTR _VA_LIST$[ebp]
  00148	83 c0 04	 add	 eax, 4
  0014b	89 45 fc	 mov	 DWORD PTR _VA_LIST$[ebp], eax
  0014e	8b 4d fc	 mov	 ecx, DWORD PTR _VA_LIST$[ebp]
  00151	db 41 fc	 fild	 DWORD PTR [ecx-4]
  00154	83 ec 08	 sub	 esp, 8
  00157	dd 1c 24	 fstp	 QWORD PTR [esp]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _LState$[ebp]
  0015d	52		 push	 edx
  0015e	e8 00 00 00 00	 call	 _lua_pushnumber
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : 			} break;

  00166	eb 52		 jmp	 SHORT $LN20@g_Generic_
$LN17@g_Generic_:

; 66   : 			// -----
; 67   : 			case 's':
; 68   : 			{
; 69   : 				char *pszString = va_arg(VA_LIST, char *);

  00168	8b 45 fc	 mov	 eax, DWORD PTR _VA_LIST$[ebp]
  0016b	83 c0 04	 add	 eax, 4
  0016e	89 45 fc	 mov	 DWORD PTR _VA_LIST$[ebp], eax
  00171	8b 4d fc	 mov	 ecx, DWORD PTR _VA_LIST$[ebp]
  00174	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00177	89 55 f4	 mov	 DWORD PTR _pszString$205150[ebp], edx

; 70   : 				
; 71   : 				lua_pushlstring(LState, pszString, strlen(pszString));

  0017a	8b 45 f4	 mov	 eax, DWORD PTR _pszString$205150[ebp]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 _strlen
  00183	83 c4 04	 add	 esp, 4
  00186	50		 push	 eax
  00187	8b 4d f4	 mov	 ecx, DWORD PTR _pszString$205150[ebp]
  0018a	51		 push	 ecx
  0018b	8b 55 08	 mov	 edx, DWORD PTR _LState$[ebp]
  0018e	52		 push	 edx
  0018f	e8 00 00 00 00	 call	 _lua_pushlstring
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   : 			} break;

  00197	eb 21		 jmp	 SHORT $LN20@g_Generic_
$LN16@g_Generic_:

; 73   : 			// -----
; 74   : 			case '>':
; 75   : 			{
; 76   : 				goto endwhile;

  00199	eb 40		 jmp	 SHORT $LN15@g_Generic_
  0019b	eb 3e		 jmp	 SHORT $endwhile$205159
$LN14@g_Generic_:

; 77   : 			}
; 78   : 			// -----
; 79   : 			default:
; 80   : 			{
; 81   : 				LogAdd("luacall_Generic_Call invalid option (%c)", *(Sig-1));

  0019d	8b 45 10	 mov	 eax, DWORD PTR _Sig$[ebp]
  001a0	0f be 48 ff	 movsx	 ecx, BYTE PTR [eax-1]
  001a4	51		 push	 ecx
  001a5	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@EGCCEPHO@luacall_Generic_Call?5invalid?5opt@
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001b0	83 c4 08	 add	 esp, 8

; 82   : 				return false;

  001b3	32 c0		 xor	 al, al
  001b5	e9 ba 01 00 00	 jmp	 $LN25@g_Generic_
$LN20@g_Generic_:

; 83   : 			}
; 84   : 		}
; 85   : 		// -----
; 86   : 		nArg++;

  001ba	8b 45 f8	 mov	 eax, DWORD PTR _nArg$[ebp]
  001bd	83 c0 01	 add	 eax, 1
  001c0	89 45 f8	 mov	 DWORD PTR _nArg$[ebp], eax

; 87   : 		// -----
; 88   : 		luaL_checkstack(LState, 1, "too many arguments");

  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@
  001c8	6a 01		 push	 1
  001ca	8b 45 08	 mov	 eax, DWORD PTR _LState$[ebp]
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 _luaL_checkstack
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 89   : 		// -----
; 90   : 	} endwhile:

  001d6	e9 fd fe ff ff	 jmp	 $LN23@g_Generic_
$LN22@g_Generic_:
$LN15@g_Generic_:
$endwhile$205159:

; 91   : 	// -----
; 92   : 	int nRes = strlen(Sig);

  001db	8b 45 10	 mov	 eax, DWORD PTR _Sig$[ebp]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 _strlen
  001e4	83 c4 04	 add	 esp, 4
  001e7	89 45 f0	 mov	 DWORD PTR _nRes$[ebp], eax

; 93   : 	// -----
; 94   : 	if (lua_pcall(LState, nArg, nRes, 0) != 0)

  001ea	6a 00		 push	 0
  001ec	8b 45 f0	 mov	 eax, DWORD PTR _nRes$[ebp]
  001ef	50		 push	 eax
  001f0	8b 4d f8	 mov	 ecx, DWORD PTR _nArg$[ebp]
  001f3	51		 push	 ecx
  001f4	8b 55 08	 mov	 edx, DWORD PTR _LState$[ebp]
  001f7	52		 push	 edx
  001f8	e8 00 00 00 00	 call	 _lua_pcall
  001fd	83 c4 10	 add	 esp, 16			; 00000010H
  00200	85 c0		 test	 eax, eax
  00202	74 2a		 je	 SHORT $LN13@g_Generic_

; 95   : 	{
; 96   : 		LogAdd("luacall_Generic_Call error running function `%s': %s", Func, lua_tolstring(LState, -1, 0));

  00204	6a 00		 push	 0
  00206	6a ff		 push	 -1
  00208	8b 45 08	 mov	 eax, DWORD PTR _LState$[ebp]
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 _lua_tolstring
  00211	83 c4 0c	 add	 esp, 12			; 0000000cH
  00214	50		 push	 eax
  00215	8b 4d 0c	 mov	 ecx, DWORD PTR _Func$[ebp]
  00218	51		 push	 ecx
  00219	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@HDBMEAKM@luacall_Generic_Call?5error?5runni@
  0021e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00224	83 c4 0c	 add	 esp, 12			; 0000000cH

; 97   : 		// -----
; 98   : 		return false;

  00227	32 c0		 xor	 al, al
  00229	e9 46 01 00 00	 jmp	 $LN25@g_Generic_
$LN13@g_Generic_:

; 99   : 	}
; 100  : 	// -----
; 101  : 	int nRetValCnt = nRes;

  0022e	8b 45 f0	 mov	 eax, DWORD PTR _nRes$[ebp]
  00231	89 45 ec	 mov	 DWORD PTR _nRetValCnt$[ebp], eax

; 102  : 	// -----
; 103  : 	nRes = -nRes;

  00234	8b 45 f0	 mov	 eax, DWORD PTR _nRes$[ebp]
  00237	f7 d8		 neg	 eax
  00239	89 45 f0	 mov	 DWORD PTR _nRes$[ebp], eax
$LN12@g_Generic_:

; 104  : 	// -----
; 105  : 	while (*Sig)

  0023c	8b 45 10	 mov	 eax, DWORD PTR _Sig$[ebp]
  0023f	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00242	85 c9		 test	 ecx, ecx
  00244	0f 84 06 01 00
	00		 je	 $LN11@g_Generic_

; 106  : 	{
; 107  : 		switch (*Sig++)

  0024a	8b 45 10	 mov	 eax, DWORD PTR _Sig$[ebp]
  0024d	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00250	89 4d a8	 mov	 DWORD PTR tv154[ebp], ecx
  00253	8b 55 10	 mov	 edx, DWORD PTR _Sig$[ebp]
  00256	83 c2 01	 add	 edx, 1
  00259	89 55 10	 mov	 DWORD PTR _Sig$[ebp], edx
  0025c	8b 45 a8	 mov	 eax, DWORD PTR tv154[ebp]
  0025f	89 45 a4	 mov	 DWORD PTR tv155[ebp], eax
  00262	83 7d a4 64	 cmp	 DWORD PTR tv155[ebp], 100 ; 00000064H
  00266	74 15		 je	 SHORT $LN8@g_Generic_
  00268	83 7d a4 69	 cmp	 DWORD PTR tv155[ebp], 105 ; 00000069H
  0026c	74 50		 je	 SHORT $LN6@g_Generic_
  0026e	83 7d a4 73	 cmp	 DWORD PTR tv155[ebp], 115 ; 00000073H
  00272	0f 84 89 00 00
	00		 je	 $LN4@g_Generic_
  00278	e9 c1 00 00 00	 jmp	 $LN2@g_Generic_
$LN8@g_Generic_:

; 108  : 		{
; 109  : 			case 'd':
; 110  : 			{
; 111  : 				if (!lua_isnumber(LState, nRes))

  0027d	8b 45 f0	 mov	 eax, DWORD PTR _nRes$[ebp]
  00280	50		 push	 eax
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _LState$[ebp]
  00284	51		 push	 ecx
  00285	e8 00 00 00 00	 call	 _lua_isnumber
  0028a	83 c4 08	 add	 esp, 8
  0028d	85 c0		 test	 eax, eax
  0028f	75 07		 jne	 SHORT $LN7@g_Generic_

; 112  : 				{
; 113  : 					return false;

  00291	32 c0		 xor	 al, al
  00293	e9 dc 00 00 00	 jmp	 $LN25@g_Generic_
$LN7@g_Generic_:

; 114  : 				}
; 115  : 				// -----
; 116  : 				*va_arg(VA_LIST, double *) = lua_tonumber(LState, nRes);

  00298	8b 45 fc	 mov	 eax, DWORD PTR _VA_LIST$[ebp]
  0029b	83 c0 04	 add	 eax, 4
  0029e	89 45 fc	 mov	 DWORD PTR _VA_LIST$[ebp], eax
  002a1	8b 4d fc	 mov	 ecx, DWORD PTR _VA_LIST$[ebp]
  002a4	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  002a7	8b 55 f0	 mov	 edx, DWORD PTR _nRes$[ebp]
  002aa	52		 push	 edx
  002ab	8b 45 08	 mov	 eax, DWORD PTR _LState$[ebp]
  002ae	50		 push	 eax
  002af	e8 00 00 00 00	 call	 _lua_tonumber
  002b4	83 c4 08	 add	 esp, 8
  002b7	dd 1e		 fstp	 QWORD PTR [esi]

; 117  : 				// -----
; 118  : 			} break;

  002b9	e9 84 00 00 00	 jmp	 $LN9@g_Generic_
$LN6@g_Generic_:

; 119  : 			// -----
; 120  : 			case 'i':
; 121  : 			{
; 122  : 				if (!lua_isnumber(LState, nRes))

  002be	8b 45 f0	 mov	 eax, DWORD PTR _nRes$[ebp]
  002c1	50		 push	 eax
  002c2	8b 4d 08	 mov	 ecx, DWORD PTR _LState$[ebp]
  002c5	51		 push	 ecx
  002c6	e8 00 00 00 00	 call	 _lua_isnumber
  002cb	83 c4 08	 add	 esp, 8
  002ce	85 c0		 test	 eax, eax
  002d0	75 07		 jne	 SHORT $LN5@g_Generic_

; 123  : 				{
; 124  : 					return false;

  002d2	32 c0		 xor	 al, al
  002d4	e9 9b 00 00 00	 jmp	 $LN25@g_Generic_
$LN5@g_Generic_:

; 125  : 				}
; 126  : 				// -----
; 127  : 				*va_arg(VA_LIST, int *) = (int)lua_tonumber(LState, nRes);

  002d9	8b 45 fc	 mov	 eax, DWORD PTR _VA_LIST$[ebp]
  002dc	83 c0 04	 add	 eax, 4
  002df	89 45 fc	 mov	 DWORD PTR _VA_LIST$[ebp], eax
  002e2	8b 4d fc	 mov	 ecx, DWORD PTR _VA_LIST$[ebp]
  002e5	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  002e8	8b 55 f0	 mov	 edx, DWORD PTR _nRes$[ebp]
  002eb	52		 push	 edx
  002ec	8b 45 08	 mov	 eax, DWORD PTR _LState$[ebp]
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 _lua_tonumber
  002f5	83 c4 08	 add	 esp, 8
  002f8	e8 00 00 00 00	 call	 __ftol2_sse
  002fd	89 06		 mov	 DWORD PTR [esi], eax

; 128  : 			} break;

  002ff	eb 41		 jmp	 SHORT $LN9@g_Generic_
$LN4@g_Generic_:

; 129  : 			// -----
; 130  : 			case 's':
; 131  : 			{
; 132  : 				if (!lua_isstring(LState, nRes))

  00301	8b 45 f0	 mov	 eax, DWORD PTR _nRes$[ebp]
  00304	50		 push	 eax
  00305	8b 4d 08	 mov	 ecx, DWORD PTR _LState$[ebp]
  00308	51		 push	 ecx
  00309	e8 00 00 00 00	 call	 _lua_isstring
  0030e	83 c4 08	 add	 esp, 8
  00311	85 c0		 test	 eax, eax
  00313	75 04		 jne	 SHORT $LN3@g_Generic_

; 133  : 				{
; 134  : 					return false;

  00315	32 c0		 xor	 al, al
  00317	eb 5b		 jmp	 SHORT $LN25@g_Generic_
$LN3@g_Generic_:

; 135  : 				}
; 136  : 				// -----
; 137  : 				*va_arg(VA_LIST, const char **) = lua_tostring(LState, nRes);

  00319	8b 45 fc	 mov	 eax, DWORD PTR _VA_LIST$[ebp]
  0031c	83 c0 04	 add	 eax, 4
  0031f	89 45 fc	 mov	 DWORD PTR _VA_LIST$[ebp], eax
  00322	8b 4d fc	 mov	 ecx, DWORD PTR _VA_LIST$[ebp]
  00325	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  00328	6a 00		 push	 0
  0032a	8b 55 f0	 mov	 edx, DWORD PTR _nRes$[ebp]
  0032d	52		 push	 edx
  0032e	8b 45 08	 mov	 eax, DWORD PTR _LState$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 _lua_tolstring
  00337	83 c4 0c	 add	 esp, 12			; 0000000cH
  0033a	89 06		 mov	 DWORD PTR [esi], eax

; 138  : 			} break;

  0033c	eb 04		 jmp	 SHORT $LN9@g_Generic_
$LN2@g_Generic_:

; 139  : 			// -----
; 140  : 			default: return false;	break;

  0033e	32 c0		 xor	 al, al
  00340	eb 32		 jmp	 SHORT $LN25@g_Generic_
$LN9@g_Generic_:

; 141  : 		}
; 142  : 		// -----
; 143  : 		nRes++;

  00342	8b 45 f0	 mov	 eax, DWORD PTR _nRes$[ebp]
  00345	83 c0 01	 add	 eax, 1
  00348	89 45 f0	 mov	 DWORD PTR _nRes$[ebp], eax

; 144  : 	}

  0034b	e9 ec fe ff ff	 jmp	 $LN12@g_Generic_
$LN11@g_Generic_:

; 145  : 	// -----
; 146  : 	va_end(VA_LIST);

  00350	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _VA_LIST$[ebp], 0

; 147  : 	// -----
; 148  : 	if (nRetValCnt)

  00357	83 7d ec 00	 cmp	 DWORD PTR _nRetValCnt$[ebp], 0
  0035b	74 15		 je	 SHORT $LN1@g_Generic_

; 149  : 	{
; 150  : 		lua_pop(LState, nRetValCnt);

  0035d	8b 45 ec	 mov	 eax, DWORD PTR _nRetValCnt$[ebp]
  00360	f7 d8		 neg	 eax
  00362	83 e8 01	 sub	 eax, 1
  00365	50		 push	 eax
  00366	8b 4d 08	 mov	 ecx, DWORD PTR _LState$[ebp]
  00369	51		 push	 ecx
  0036a	e8 00 00 00 00	 call	 _lua_settop
  0036f	83 c4 08	 add	 esp, 8
$LN1@g_Generic_:

; 151  : 	}
; 152  : 	// -----
; 153  : 	return true;

  00372	b0 01		 mov	 al, 1
$LN25@g_Generic_:

; 154  : }

  00374	5f		 pop	 edi
  00375	5e		 pop	 esi
  00376	5b		 pop	 ebx
  00377	8b e5		 mov	 esp, ebp
  00379	5d		 pop	 ebp
  0037a	c3		 ret	 0
  0037b	90		 npad	 1
$LN28@g_Generic_:
  0037c	00 00 00 00	 DD	 $LN16@g_Generic_
  00380	00 00 00 00	 DD	 $LN19@g_Generic_
  00384	00 00 00 00	 DD	 $LN18@g_Generic_
  00388	00 00 00 00	 DD	 $LN17@g_Generic_
  0038c	00 00 00 00	 DD	 $LN14@g_Generic_
$LN27@g_Generic_:
  00390	00		 DB	 0
  00391	04		 DB	 4
  00392	04		 DB	 4
  00393	04		 DB	 4
  00394	04		 DB	 4
  00395	04		 DB	 4
  00396	04		 DB	 4
  00397	04		 DB	 4
  00398	04		 DB	 4
  00399	04		 DB	 4
  0039a	04		 DB	 4
  0039b	04		 DB	 4
  0039c	04		 DB	 4
  0039d	04		 DB	 4
  0039e	04		 DB	 4
  0039f	04		 DB	 4
  003a0	04		 DB	 4
  003a1	04		 DB	 4
  003a2	04		 DB	 4
  003a3	04		 DB	 4
  003a4	04		 DB	 4
  003a5	04		 DB	 4
  003a6	04		 DB	 4
  003a7	04		 DB	 4
  003a8	04		 DB	 4
  003a9	04		 DB	 4
  003aa	04		 DB	 4
  003ab	04		 DB	 4
  003ac	04		 DB	 4
  003ad	04		 DB	 4
  003ae	04		 DB	 4
  003af	04		 DB	 4
  003b0	04		 DB	 4
  003b1	04		 DB	 4
  003b2	04		 DB	 4
  003b3	04		 DB	 4
  003b4	04		 DB	 4
  003b5	04		 DB	 4
  003b6	01		 DB	 1
  003b7	04		 DB	 4
  003b8	04		 DB	 4
  003b9	04		 DB	 4
  003ba	04		 DB	 4
  003bb	02		 DB	 2
  003bc	04		 DB	 4
  003bd	04		 DB	 4
  003be	04		 DB	 4
  003bf	04		 DB	 4
  003c0	04		 DB	 4
  003c1	04		 DB	 4
  003c2	04		 DB	 4
  003c3	04		 DB	 4
  003c4	04		 DB	 4
  003c5	03		 DB	 3
?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ENDP		; g_Generic_Call
_TEXT	ENDS
END
