; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\WzMultiCastSock.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	??0CWzMultiCastSock@@QAE@XZ			; CWzMultiCastSock::CWzMultiCastSock
EXTRN	_memset:PROC
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\wzmulticastsock.cpp
_TEXT	SEGMENT
_wsadata$ = -408					; size = 400
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CWzMultiCastSock@@QAE@XZ PROC			; CWzMultiCastSock::CWzMultiCastSock
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 01 00
	00		 sub	 esp, 472		; 000001d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 8    : 	WSADATA wsadata;
; 9    : 
; 10   : 	WSAStartup(0x101, &wsadata);

  00019	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _wsadata$[ebp]
  0001f	50		 push	 eax
  00020	68 01 01 00 00	 push	 257			; 00000101H
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8

; 11   : 	this->m_skSocket = INVALID_SOCKET;

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 12   : 	this->m_iIPINFO_COUNT = 0;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	c7 80 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+660], 0

; 13   : 	this->m_lpfnCALLBACK_RECVNOTIFY = NULL;

  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 80 a8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+936], 0

; 14   : 	this->m_lpfnCALLBACK_ERRORNOTIFY = NULL;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00051	c7 80 ac 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+940], 0

; 15   : 	memset(this->m_stIPINFO_LIST, 0, sizeof(this->m_stIPINFO_LIST));

  0005b	68 80 02 00 00	 push	 640			; 00000280H
  00060	6a 00		 push	 0
  00062	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00065	83 c0 14	 add	 eax, 20			; 00000014H
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _memset
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16   : }

  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	33 cd		 xor	 ecx, ebp
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??0CWzMultiCastSock@@QAE@XZ ENDP			; CWzMultiCastSock::CWzMultiCastSock
_TEXT	ENDS
PUBLIC	??1CWzMultiCastSock@@QAE@XZ			; CWzMultiCastSock::~CWzMultiCastSock
EXTRN	__imp__WSACleanup@0:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__shutdown@8:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWzMultiCastSock@@QAE@XZ PROC			; CWzMultiCastSock::~CWzMultiCastSock
; _this$ = ecx

; 19   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 44	 sub	 esp, 68			; 00000044H
  00096	53		 push	 ebx
  00097	56		 push	 esi
  00098	57		 push	 edi
  00099	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	shutdown(this->m_skSocket, SD_RECEIVE);

  0009c	6a 00		 push	 0
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	51		 push	 ecx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__shutdown@8

; 21   : 	closesocket(this->m_skSocket);

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	51		 push	 ecx
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 22   : 	WSACleanup();

  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSACleanup@0

; 23   : }

  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
??1CWzMultiCastSock@@QAE@XZ ENDP			; CWzMultiCastSock::~CWzMultiCastSock
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DoEnumIpAddress@CWzMultiCastSock@@QAEHXZ	; CWzMultiCastSock::DoEnumIpAddress
EXTRN	_strcpy:PROC
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	__imp__gethostbyname@4:PROC
EXTRN	__imp__gethostname@8:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv130 = -212						; size = 4
tv75 = -212						; size = 4
_lpaddr$ = -144						; size = 4
_lpHostent$ = -140					; size = 4
_buf$ = -136						; size = 128
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?DoEnumIpAddress@CWzMultiCastSock@@QAEHXZ PROC		; CWzMultiCastSock::DoEnumIpAddress
; _this$ = ecx

; 26   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000de	33 c5		 xor	 eax, ebp
  000e0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000e3	53		 push	 ebx
  000e4	56		 push	 esi
  000e5	57		 push	 edi
  000e6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	this->m_iIPINFO_COUNT = 0;

  000e9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	c7 80 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+660], 0

; 28   : 	memset(this->m_stIPINFO_LIST, 0, sizeof(this->m_stIPINFO_LIST));

  000f6	68 80 02 00 00	 push	 640			; 00000280H
  000fb	6a 00		 push	 0
  000fd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00100	83 c0 14	 add	 eax, 20			; 00000014H
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _memset
  00109	83 c4 0c	 add	 esp, 12			; 0000000cH

; 29   : 
; 30   : 	char buf[128];
; 31   : 	gethostname(buf, sizeof(buf));

  0010c	68 80 00 00 00	 push	 128			; 00000080H
  00111	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00117	50		 push	 eax
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__gethostname@8

; 32   : 	hostent * lpHostent = gethostbyname(buf);

  0011e	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00124	50		 push	 eax
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__gethostbyname@4
  0012b	89 85 74 ff ff
	ff		 mov	 DWORD PTR _lpHostent$[ebp], eax

; 33   : 	in_addr * lpaddr;
; 34   : 
; 35   : 	switch ( lpHostent->h_addrtype )

  00131	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _lpHostent$[ebp]
  00137	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0013b	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  00141	83 bd 2c ff ff
	ff 02		 cmp	 DWORD PTR tv75[ebp], 2
  00148	74 05		 je	 SHORT $LN3@DoEnumIpAd
  0014a	e9 a7 00 00 00	 jmp	 $LN5@DoEnumIpAd
$LN3@DoEnumIpAd:

; 36   : 	{
; 37   : 		case 2:
; 38   : 			while ( lpaddr = (in_addr *)(*lpHostent->h_addr_list++)  )

  0014f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _lpHostent$[ebp]
  00155	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00158	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015a	89 95 70 ff ff
	ff		 mov	 DWORD PTR _lpaddr$[ebp], edx
  00160	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _lpaddr$[ebp]
  00166	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _lpHostent$[ebp]
  0016c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0016f	83 c2 04	 add	 edx, 4
  00172	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _lpHostent$[ebp]
  00178	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0017b	85 c0		 test	 eax, eax
  0017d	74 77		 je	 SHORT $LN5@DoEnumIpAd

; 39   : 			{
; 40   : 				this->m_stIPINFO_LIST[this->m_iIPINFO_COUNT].m_bInUsed = TRUE;

  0017f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00182	8b 88 94 02 00
	00		 mov	 ecx, DWORD PTR [eax+660]
  00188	6b c9 14	 imul	 ecx, 20			; 00000014H
  0018b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0018e	c7 44 0a 14 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+20], 1

; 41   : 				strcpy(this->m_stIPINFO_LIST[this->m_iIPINFO_COUNT++].m_szIPADDR, inet_ntoa(*lpaddr));

  00196	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00199	8b 88 94 02 00
	00		 mov	 ecx, DWORD PTR [eax+660]
  0019f	6b c9 14	 imul	 ecx, 20			; 00000014H
  001a2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001a5	8d 44 0a 18	 lea	 eax, DWORD PTR [edx+ecx+24]
  001a9	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv130[ebp], eax
  001af	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b2	8b 91 94 02 00
	00		 mov	 edx, DWORD PTR [ecx+660]
  001b8	83 c2 01	 add	 edx, 1
  001bb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001be	89 90 94 02 00
	00		 mov	 DWORD PTR [eax+660], edx
  001c4	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _lpaddr$[ebp]
  001ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  001cc	52		 push	 edx
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  001d3	50		 push	 eax
  001d4	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv130[ebp]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 _strcpy
  001e0	83 c4 08	 add	 esp, 8

; 42   : 
; 43   : 				if ( this->m_iIPINFO_COUNT >= MAX_MULTICAST_SOCK )

  001e3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001e6	83 b8 94 02 00
	00 20		 cmp	 DWORD PTR [eax+660], 32	; 00000020H
  001ed	7c 02		 jl	 SHORT $LN1@DoEnumIpAd

; 44   : 				{
; 45   : 					break;

  001ef	eb 05		 jmp	 SHORT $LN5@DoEnumIpAd
$LN1@DoEnumIpAd:

; 46   : 				}
; 47   : 			}

  001f1	e9 59 ff ff ff	 jmp	 $LN3@DoEnumIpAd
$LN5@DoEnumIpAd:

; 48   : 	}
; 49   : 
; 50   : 	return this->m_iIPINFO_COUNT;

  001f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	8b 80 94 02 00
	00		 mov	 eax, DWORD PTR [eax+660]

; 51   : }

  001ff	5f		 pop	 edi
  00200	5e		 pop	 esi
  00201	5b		 pop	 ebx
  00202	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00205	33 cd		 xor	 ecx, ebp
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	8b e5		 mov	 esp, ebp
  0020e	5d		 pop	 ebp
  0020f	c3		 ret	 0
?DoEnumIpAddress@CWzMultiCastSock@@QAEHXZ ENDP		; CWzMultiCastSock::DoEnumIpAddress
_TEXT	ENDS
PUBLIC	?GetEnummedIpAddress@CWzMultiCastSock@@QAEHHPAD@Z ; CWzMultiCastSock::GetEnummedIpAddress
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIPINDEX$ = 8						; size = 4
_lpszOutputIpAddress$ = 12				; size = 4
?GetEnummedIpAddress@CWzMultiCastSock@@QAEHHPAD@Z PROC	; CWzMultiCastSock::GetEnummedIpAddress
; _this$ = ecx

; 54   : {

  00210	55		 push	 ebp
  00211	8b ec		 mov	 ebp, esp
  00213	83 ec 44	 sub	 esp, 68			; 00000044H
  00216	53		 push	 ebx
  00217	56		 push	 esi
  00218	57		 push	 edi
  00219	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	if ( iIPINDEX < 0 || iIPINDEX >= MAX_MULTICAST_SOCK )

  0021c	83 7d 08 00	 cmp	 DWORD PTR _iIPINDEX$[ebp], 0
  00220	7c 06		 jl	 SHORT $LN3@GetEnummed
  00222	83 7d 08 20	 cmp	 DWORD PTR _iIPINDEX$[ebp], 32 ; 00000020H
  00226	7c 04		 jl	 SHORT $LN4@GetEnummed
$LN3@GetEnummed:

; 56   : 	{
; 57   : 		return FALSE;

  00228	33 c0		 xor	 eax, eax
  0022a	eb 3b		 jmp	 SHORT $LN5@GetEnummed
$LN4@GetEnummed:

; 58   : 	}
; 59   : 
; 60   : 	if ( this->m_stIPINFO_LIST[iIPINDEX].m_bInUsed == TRUE )

  0022c	8b 45 08	 mov	 eax, DWORD PTR _iIPINDEX$[ebp]
  0022f	6b c0 14	 imul	 eax, 20			; 00000014H
  00232	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00235	83 7c 01 14 01	 cmp	 DWORD PTR [ecx+eax+20], 1
  0023a	75 29		 jne	 SHORT $LN2@GetEnummed

; 61   : 	{
; 62   : 		if ( lpszOutputIpAddress != NULL )

  0023c	83 7d 0c 00	 cmp	 DWORD PTR _lpszOutputIpAddress$[ebp], 0
  00240	74 23		 je	 SHORT $LN2@GetEnummed

; 63   : 		{
; 64   : 			memcpy(lpszOutputIpAddress, this->m_stIPINFO_LIST[iIPINDEX].m_szIPADDR, sizeof(this->m_stIPINFO_LIST[iIPINDEX].m_szIPADDR));

  00242	6a 10		 push	 16			; 00000010H
  00244	8b 45 08	 mov	 eax, DWORD PTR _iIPINDEX$[ebp]
  00247	6b c0 14	 imul	 eax, 20			; 00000014H
  0024a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024d	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  00251	52		 push	 edx
  00252	8b 45 0c	 mov	 eax, DWORD PTR _lpszOutputIpAddress$[ebp]
  00255	50		 push	 eax
  00256	e8 00 00 00 00	 call	 _memcpy
  0025b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : 			return TRUE;

  0025e	b8 01 00 00 00	 mov	 eax, 1
  00263	eb 02		 jmp	 SHORT $LN5@GetEnummed
$LN2@GetEnummed:

; 66   : 		}
; 67   : 	}
; 68   : 
; 69   : 	return FALSE;

  00265	33 c0		 xor	 eax, eax
$LN5@GetEnummed:

; 70   : }

  00267	5f		 pop	 edi
  00268	5e		 pop	 esi
  00269	5b		 pop	 ebx
  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c2 08 00	 ret	 8
?GetEnummedIpAddress@CWzMultiCastSock@@QAEHHPAD@Z ENDP	; CWzMultiCastSock::GetEnummedIpAddress
_TEXT	ENDS
PUBLIC	?RecvThreadProc@CWzMultiCastSock@@KGIPAX@Z	; CWzMultiCastSock::RecvThreadProc
PUBLIC	??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@	; `string'
PUBLIC	?SaveLastError@CWzMultiCastSock@@IAEXH@Z	; CWzMultiCastSock::SaveLastError
PUBLIC	__$ArrayPad$
PUBLIC	?StartMultiCast@CWzMultiCastSock@@QAEHPAD@Z	; CWzMultiCastSock::StartMultiCast
EXTRN	__beginthreadex:PROC
EXTRN	__imp__setsockopt@20:PROC
EXTRN	__imp__inet_addr@4:PROC
EXTRN	__imp__bind@12:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__htonl@4:PROC
EXTRN	__imp__socket@12:PROC
;	COMDAT ??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@
CONST	SEGMENT
??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@ DB '227.100.100.100', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_addr$ = -64						; size = 4
_mreq$ = -60						; size = 8
_iERR$ = -52						; size = 4
_sockaddr$ = -48					; size = 16
_bRES$205551 = -32					; size = 4
_szText$205550 = -28					; size = 16
_iCOUNT$205548 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpszIPADDR$ = 8					; size = 4
?StartMultiCast@CWzMultiCastSock@@QAEHPAD@Z PROC	; CWzMultiCastSock::StartMultiCast
; _this$ = ecx

; 73   : {

  00270	55		 push	 ebp
  00271	8b ec		 mov	 ebp, esp
  00273	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0027e	33 c5		 xor	 eax, ebp
  00280	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00283	53		 push	 ebx
  00284	56		 push	 esi
  00285	57		 push	 edi
  00286	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	if ( this->m_skSocket != INVALID_SOCKET )

  00289	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0028c	83 38 ff	 cmp	 DWORD PTR [eax], -1
  0028f	74 15		 je	 SHORT $LN11@StartMulti

; 75   : 	{
; 76   : 		closesocket(this->m_skSocket);

  00291	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00294	8b 08		 mov	 ecx, DWORD PTR [eax]
  00296	51		 push	 ecx
  00297	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 77   : 		this->m_skSocket = INVALID_SOCKET;

  0029d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002a0	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN11@StartMulti:

; 78   : 	}
; 79   : 
; 80   : 	if ( !lpszIPADDR )

  002a6	83 7d 08 00	 cmp	 DWORD PTR _lpszIPADDR$[ebp], 0
  002aa	75 5f		 jne	 SHORT $LN10@StartMulti

; 81   : 	{
; 82   : 		int iCOUNT = this->DoEnumIpAddress();

  002ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002af	e8 00 00 00 00	 call	 ?DoEnumIpAddress@CWzMultiCastSock@@QAEHXZ ; CWzMultiCastSock::DoEnumIpAddress
  002b4	89 45 f4	 mov	 DWORD PTR _iCOUNT$205548[ebp], eax

; 83   : 
; 84   : 		if ( iCOUNT > 0 )

  002b7	83 7d f4 00	 cmp	 DWORD PTR _iCOUNT$205548[ebp], 0
  002bb	7e 45		 jle	 SHORT $LN9@StartMulti

; 85   : 		{
; 86   : 			char szText[16];
; 87   : 			BOOL bRES = FALSE;

  002bd	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bRES$205551[ebp], 0

; 88   : 
; 89   : 			bRES = this->GetEnummedIpAddress(0, szText);

  002c4	8d 45 e4	 lea	 eax, DWORD PTR _szText$205550[ebp]
  002c7	50		 push	 eax
  002c8	6a 00		 push	 0
  002ca	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002cd	e8 00 00 00 00	 call	 ?GetEnummedIpAddress@CWzMultiCastSock@@QAEHHPAD@Z ; CWzMultiCastSock::GetEnummedIpAddress
  002d2	89 45 e0	 mov	 DWORD PTR _bRES$205551[ebp], eax

; 90   : 
; 91   : 			if ( bRES )

  002d5	83 7d e0 00	 cmp	 DWORD PTR _bRES$205551[ebp], 0
  002d9	74 1e		 je	 SHORT $LN8@StartMulti

; 92   : 			{
; 93   : 				memcpy(this->m_szIPADDR_JOIN, szText, sizeof(szText));

  002db	6a 10		 push	 16			; 00000010H
  002dd	8d 45 e4	 lea	 eax, DWORD PTR _szText$205550[ebp]
  002e0	50		 push	 eax
  002e1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e4	83 c1 04	 add	 ecx, 4
  002e7	51		 push	 ecx
  002e8	e8 00 00 00 00	 call	 _memcpy
  002ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 94   : 				this->m_szIPADDR_JOIN[15] = 0;

  002f0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002f3	c6 40 13 00	 mov	 BYTE PTR [eax+19], 0

; 95   : 			}
; 96   : 			else

  002f7	eb 07		 jmp	 SHORT $LN7@StartMulti
$LN8@StartMulti:

; 97   : 			{
; 98   : 				return FALSE;

  002f9	33 c0		 xor	 eax, eax
  002fb	e9 a7 01 00 00	 jmp	 $LN12@StartMulti
$LN7@StartMulti:

; 99   : 			}
; 100  : 		}
; 101  : 		else

  00300	eb 07		 jmp	 SHORT $LN6@StartMulti
$LN9@StartMulti:

; 102  : 		{
; 103  : 			return FALSE;

  00302	33 c0		 xor	 eax, eax
  00304	e9 9e 01 00 00	 jmp	 $LN12@StartMulti
$LN6@StartMulti:

; 104  : 		}
; 105  : 	}
; 106  : 	else

  00309	eb 1c		 jmp	 SHORT $LN5@StartMulti
$LN10@StartMulti:

; 107  : 	{
; 108  : 		memcpy(this->m_szIPADDR_JOIN, lpszIPADDR, sizeof(this->m_szIPADDR_JOIN));

  0030b	6a 10		 push	 16			; 00000010H
  0030d	8b 45 08	 mov	 eax, DWORD PTR _lpszIPADDR$[ebp]
  00310	50		 push	 eax
  00311	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00314	83 c1 04	 add	 ecx, 4
  00317	51		 push	 ecx
  00318	e8 00 00 00 00	 call	 _memcpy
  0031d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  : 		this->m_szIPADDR_JOIN[15] = 0;

  00320	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00323	c6 40 13 00	 mov	 BYTE PTR [eax+19], 0
$LN5@StartMulti:

; 110  : 	}
; 111  : 
; 112  : 	this->m_skSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);

  00327	6a 11		 push	 17			; 00000011H
  00329	6a 02		 push	 2
  0032b	6a 02		 push	 2
  0032d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  00333	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00336	89 01		 mov	 DWORD PTR [ecx], eax

; 113  : 
; 114  : 	if ( this->m_skSocket == INVALID_SOCKET )

  00338	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0033b	83 38 ff	 cmp	 DWORD PTR [eax], -1
  0033e	75 10		 jne	 SHORT $LN4@StartMulti

; 115  : 	{
; 116  : 		this->m_skSocket = INVALID_SOCKET;

  00340	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00343	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 117  : 		return FALSE;

  00349	33 c0		 xor	 eax, eax
  0034b	e9 57 01 00 00	 jmp	 $LN12@StartMulti
$LN4@StartMulti:

; 118  : 	}
; 119  : 
; 120  : 	sockaddr_in sockaddr;
; 121  : 
; 122  : 	sockaddr.sin_addr.S_un.S_addr = htonl(0);

  00350	6a 00		 push	 0
  00352	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htonl@4
  00358	89 45 d4	 mov	 DWORD PTR _sockaddr$[ebp+4], eax

; 123  : 	sockaddr.sin_family = AF_INET;

  0035b	b8 02 00 00 00	 mov	 eax, 2
  00360	66 89 45 d0	 mov	 WORD PTR _sockaddr$[ebp], ax

; 124  : 	sockaddr.sin_port = htons(37769);

  00364	68 89 93 00 00	 push	 37769			; 00009389H
  00369	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  0036f	66 89 45 d2	 mov	 WORD PTR _sockaddr$[ebp+2], ax

; 125  : 	
; 126  : 	int iERR = bind(this->m_skSocket, (::sockaddr *)&sockaddr, 16);

  00373	6a 10		 push	 16			; 00000010H
  00375	8d 45 d0	 lea	 eax, DWORD PTR _sockaddr$[ebp]
  00378	50		 push	 eax
  00379	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0037c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0037e	52		 push	 edx
  0037f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12
  00385	89 45 cc	 mov	 DWORD PTR _iERR$[ebp], eax

; 127  : 
; 128  : 	if ( iERR == -1 )

  00388	83 7d cc ff	 cmp	 DWORD PTR _iERR$[ebp], -1
  0038c	75 26		 jne	 SHORT $LN3@StartMulti

; 129  : 	{
; 130  : 		this->SaveLastError(0);

  0038e	6a 00		 push	 0
  00390	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00393	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 131  : 		closesocket(this->m_skSocket);

  00398	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0039b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039d	51		 push	 ecx
  0039e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 132  : 		this->m_skSocket = INVALID_SOCKET;

  003a4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003a7	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 133  : 
; 134  : 		return FALSE;

  003ad	33 c0		 xor	 eax, eax
  003af	e9 f3 00 00 00	 jmp	 $LN12@StartMulti
$LN3@StartMulti:

; 135  : 	}
; 136  : 
; 137  : 	ip_mreq mreq;
; 138  : 	memset(&mreq, 0, sizeof(mreq));

  003b4	6a 08		 push	 8
  003b6	6a 00		 push	 0
  003b8	8d 45 c4	 lea	 eax, DWORD PTR _mreq$[ebp]
  003bb	50		 push	 eax
  003bc	e8 00 00 00 00	 call	 _memset
  003c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 139  : 	mreq.imr_multiaddr.S_un.S_addr = inet_addr("227.100.100.100");

  003c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@
  003c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4
  003cf	89 45 c4	 mov	 DWORD PTR _mreq$[ebp], eax

; 140  : 	mreq.imr_interface.S_un.S_addr = inet_addr(this->m_szIPADDR_JOIN);

  003d2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d5	83 c0 04	 add	 eax, 4
  003d8	50		 push	 eax
  003d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4
  003df	89 45 c8	 mov	 DWORD PTR _mreq$[ebp+4], eax

; 141  : 	iERR = setsockopt(this->m_skSocket, IPPROTO_IP, 12, (char *)&mreq, sizeof(mreq));

  003e2	6a 08		 push	 8
  003e4	8d 45 c4	 lea	 eax, DWORD PTR _mreq$[ebp]
  003e7	50		 push	 eax
  003e8	6a 0c		 push	 12			; 0000000cH
  003ea	6a 00		 push	 0
  003ec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f1	52		 push	 edx
  003f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setsockopt@20
  003f8	89 45 cc	 mov	 DWORD PTR _iERR$[ebp], eax

; 142  : 
; 143  : 	if ( iERR == -1 )

  003fb	83 7d cc ff	 cmp	 DWORD PTR _iERR$[ebp], -1
  003ff	75 26		 jne	 SHORT $LN2@StartMulti

; 144  : 	{
; 145  : 		this->SaveLastError(0);

  00401	6a 00		 push	 0
  00403	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00406	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 146  : 		closesocket(this->m_skSocket);

  0040b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0040e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00410	51		 push	 ecx
  00411	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 147  : 		this->m_skSocket = INVALID_SOCKET;

  00417	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0041a	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 148  : 
; 149  : 		return FALSE;

  00420	33 c0		 xor	 eax, eax
  00422	e9 80 00 00 00	 jmp	 $LN12@StartMulti
$LN2@StartMulti:

; 150  : 	}
; 151  : 
; 152  : 	DWORD addr = inet_addr(this->m_szIPADDR_JOIN);

  00427	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0042a	83 c0 04	 add	 eax, 4
  0042d	50		 push	 eax
  0042e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4
  00434	89 45 c0	 mov	 DWORD PTR _addr$[ebp], eax

; 153  : 	iERR = setsockopt(this->m_skSocket, IPPROTO_IP, 9, (char *)&addr, sizeof(addr));

  00437	6a 04		 push	 4
  00439	8d 45 c0	 lea	 eax, DWORD PTR _addr$[ebp]
  0043c	50		 push	 eax
  0043d	6a 09		 push	 9
  0043f	6a 00		 push	 0
  00441	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00444	8b 11		 mov	 edx, DWORD PTR [ecx]
  00446	52		 push	 edx
  00447	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setsockopt@20
  0044d	89 45 cc	 mov	 DWORD PTR _iERR$[ebp], eax

; 154  : 
; 155  : 	if ( iERR == -1 )

  00450	83 7d cc ff	 cmp	 DWORD PTR _iERR$[ebp], -1
  00454	75 23		 jne	 SHORT $LN1@StartMulti

; 156  : 	{
; 157  : 		this->SaveLastError(0);

  00456	6a 00		 push	 0
  00458	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0045b	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 158  : 		closesocket(this->m_skSocket);

  00460	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00463	8b 08		 mov	 ecx, DWORD PTR [eax]
  00465	51		 push	 ecx
  00466	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 159  : 		this->m_skSocket = INVALID_SOCKET;

  0046c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0046f	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 160  : 
; 161  : 		return FALSE;

  00475	33 c0		 xor	 eax, eax
  00477	eb 2e		 jmp	 SHORT $LN12@StartMulti
$LN1@StartMulti:

; 162  : 	}
; 163  : 
; 164  : 	this->m_hWorkerThread = (HANDLE)_beginthreadex(NULL, 0, CWzMultiCastSock::RecvThreadProc, this, NULL, &this->m_idWorkerThread);

  00479	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0047c	05 a4 03 00 00	 add	 eax, 932		; 000003a4H
  00481	50		 push	 eax
  00482	6a 00		 push	 0
  00484	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00487	51		 push	 ecx
  00488	68 00 00 00 00	 push	 OFFSET ?RecvThreadProc@CWzMultiCastSock@@KGIPAX@Z ; CWzMultiCastSock::RecvThreadProc
  0048d	6a 00		 push	 0
  0048f	6a 00		 push	 0
  00491	e8 00 00 00 00	 call	 __beginthreadex
  00496	83 c4 18	 add	 esp, 24			; 00000018H
  00499	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0049c	89 82 a0 03 00
	00		 mov	 DWORD PTR [edx+928], eax

; 165  : 
; 166  : 	return TRUE;

  004a2	b8 01 00 00 00	 mov	 eax, 1
$LN12@StartMulti:

; 167  : }

  004a7	5f		 pop	 edi
  004a8	5e		 pop	 esi
  004a9	5b		 pop	 ebx
  004aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004ad	33 cd		 xor	 ecx, ebp
  004af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004b4	8b e5		 mov	 esp, ebp
  004b6	5d		 pop	 ebp
  004b7	c2 04 00	 ret	 4
?StartMultiCast@CWzMultiCastSock@@QAEHPAD@Z ENDP	; CWzMultiCastSock::StartMultiCast
_TEXT	ENDS
PUBLIC	?EndMultiCast@CWzMultiCastSock@@QAEXXZ		; CWzMultiCastSock::EndMultiCast
PUBLIC	?ReStartMultiCast@CWzMultiCastSock@@QAEHXZ	; CWzMultiCastSock::ReStartMultiCast
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReStartMultiCast@CWzMultiCastSock@@QAEHXZ PROC		; CWzMultiCastSock::ReStartMultiCast
; _this$ = ecx

; 170  : {

  004c0	55		 push	 ebp
  004c1	8b ec		 mov	 ebp, esp
  004c3	83 ec 44	 sub	 esp, 68			; 00000044H
  004c6	53		 push	 ebx
  004c7	56		 push	 esi
  004c8	57		 push	 edi
  004c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 	this->EndMultiCast();

  004cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004cf	e8 00 00 00 00	 call	 ?EndMultiCast@CWzMultiCastSock@@QAEXXZ ; CWzMultiCastSock::EndMultiCast

; 172  : 	return this->StartMultiCast(this->m_szIPADDR_JOIN);

  004d4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004d7	83 c0 04	 add	 eax, 4
  004da	50		 push	 eax
  004db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004de	e8 00 00 00 00	 call	 ?StartMultiCast@CWzMultiCastSock@@QAEHPAD@Z ; CWzMultiCastSock::StartMultiCast

; 173  : }	

  004e3	5f		 pop	 edi
  004e4	5e		 pop	 esi
  004e5	5b		 pop	 ebx
  004e6	8b e5		 mov	 esp, ebp
  004e8	5d		 pop	 ebp
  004e9	c3		 ret	 0
?ReStartMultiCast@CWzMultiCastSock@@QAEHXZ ENDP		; CWzMultiCastSock::ReStartMultiCast
_TEXT	ENDS
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__TerminateThread@8:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndMultiCast@CWzMultiCastSock@@QAEXXZ PROC		; CWzMultiCastSock::EndMultiCast
; _this$ = ecx

; 176  : {

  004f0	55		 push	 ebp
  004f1	8b ec		 mov	 ebp, esp
  004f3	83 ec 44	 sub	 esp, 68			; 00000044H
  004f6	53		 push	 ebx
  004f7	56		 push	 esi
  004f8	57		 push	 edi
  004f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 	if ( this->m_skSocket != INVALID_SOCKET )

  004fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004ff	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00502	74 15		 je	 SHORT $LN2@EndMultiCa

; 178  : 	{
; 179  : 		closesocket(this->m_skSocket);

  00504	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00507	8b 08		 mov	 ecx, DWORD PTR [eax]
  00509	51		 push	 ecx
  0050a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 180  : 		this->m_skSocket = INVALID_SOCKET;

  00510	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00513	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN2@EndMultiCa:

; 181  : 	}
; 182  : 
; 183  : 	if ( this->m_hWorkerThread != INVALID_HANDLE_VALUE )

  00519	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0051c	83 b8 a0 03 00
	00 ff		 cmp	 DWORD PTR [eax+928], -1
  00523	74 2f		 je	 SHORT $LN3@EndMultiCa

; 184  : 	{
; 185  : 		TerminateThread(this->m_hWorkerThread, 0);

  00525	6a 00		 push	 0
  00527	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0052a	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  00530	51		 push	 ecx
  00531	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TerminateThread@8

; 186  : 		CloseHandle(this->m_hWorkerThread);

  00537	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0053a	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  00540	51		 push	 ecx
  00541	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 187  : 		this->m_hWorkerThread = INVALID_HANDLE_VALUE;

  00547	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0054a	c7 80 a0 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+928], -1
$LN3@EndMultiCa:

; 188  : 	}
; 189  : }

  00554	5f		 pop	 edi
  00555	5e		 pop	 esi
  00556	5b		 pop	 ebx
  00557	8b e5		 mov	 esp, ebp
  00559	5d		 pop	 ebp
  0055a	c3		 ret	 0
?EndMultiCast@CWzMultiCastSock@@QAEXXZ ENDP		; CWzMultiCastSock::EndMultiCast
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendData@CWzMultiCastSock@@QAEHPADH@Z		; CWzMultiCastSock::SendData
EXTRN	__imp__sendto@24:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iSENDBYTES$ = -28					; size = 4
_sockaddr$ = -24					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpBUFFER$ = 8						; size = 4
_iBUFSIZE$ = 12						; size = 4
?SendData@CWzMultiCastSock@@QAEHPADH@Z PROC		; CWzMultiCastSock::SendData
; _this$ = ecx

; 192  : {

  00560	55		 push	 ebp
  00561	8b ec		 mov	 ebp, esp
  00563	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00566	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0056b	33 c5		 xor	 eax, ebp
  0056d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00570	53		 push	 ebx
  00571	56		 push	 esi
  00572	57		 push	 edi
  00573	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 193  : 	if ( !lpBUFFER )

  00576	83 7d 08 00	 cmp	 DWORD PTR _lpBUFFER$[ebp], 0
  0057a	75 07		 jne	 SHORT $LN3@SendData

; 194  : 		return FALSE;

  0057c	33 c0		 xor	 eax, eax
  0057e	e9 9c 00 00 00	 jmp	 $LN4@SendData
$LN3@SendData:

; 195  : 
; 196  : 	sockaddr_in sockaddr;
; 197  : 	
; 198  : 	sockaddr.sin_family = AF_INET;

  00583	b8 02 00 00 00	 mov	 eax, 2
  00588	66 89 45 e8	 mov	 WORD PTR _sockaddr$[ebp], ax

; 199  : 	sockaddr.sin_addr.S_un.S_addr = inet_addr("227.100.100.100");

  0058c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@
  00591	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4
  00597	89 45 ec	 mov	 DWORD PTR _sockaddr$[ebp+4], eax

; 200  : 	sockaddr.sin_port = htons(37769);

  0059a	68 89 93 00 00	 push	 37769			; 00009389H
  0059f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  005a5	66 89 45 ea	 mov	 WORD PTR _sockaddr$[ebp+2], ax

; 201  : 
; 202  : 	int iSENDBYTES = sendto(this->m_skSocket, lpBUFFER, iBUFSIZE, 0, (::sockaddr *)&sockaddr, 16);

  005a9	6a 10		 push	 16			; 00000010H
  005ab	8d 45 e8	 lea	 eax, DWORD PTR _sockaddr$[ebp]
  005ae	50		 push	 eax
  005af	6a 00		 push	 0
  005b1	8b 4d 0c	 mov	 ecx, DWORD PTR _iBUFSIZE$[ebp]
  005b4	51		 push	 ecx
  005b5	8b 55 08	 mov	 edx, DWORD PTR _lpBUFFER$[ebp]
  005b8	52		 push	 edx
  005b9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  005be	51		 push	 ecx
  005bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sendto@24
  005c5	89 45 e4	 mov	 DWORD PTR _iSENDBYTES$[ebp], eax

; 203  : 
; 204  : 	if ( iSENDBYTES == -1 )

  005c8	83 7d e4 ff	 cmp	 DWORD PTR _iSENDBYTES$[ebp], -1
  005cc	75 23		 jne	 SHORT $LN2@SendData

; 205  : 	{
; 206  : 		this->SaveLastError(0);

  005ce	6a 00		 push	 0
  005d0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005d3	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 207  : 		closesocket(this->m_skSocket);

  005d8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005db	8b 08		 mov	 ecx, DWORD PTR [eax]
  005dd	51		 push	 ecx
  005de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 208  : 		this->m_skSocket = INVALID_SOCKET;

  005e4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005e7	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 209  : 		return FALSE;

  005ed	33 c0		 xor	 eax, eax
  005ef	eb 2e		 jmp	 SHORT $LN4@SendData
$LN2@SendData:

; 210  : 	}
; 211  : 
; 212  : 	if ( iSENDBYTES < -1 )

  005f1	83 7d e4 ff	 cmp	 DWORD PTR _iSENDBYTES$[ebp], -1
  005f5	7d 23		 jge	 SHORT $LN1@SendData

; 213  : 	{
; 214  : 		this->SaveLastError(0);

  005f7	6a 00		 push	 0
  005f9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005fc	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 215  : 		closesocket(this->m_skSocket);

  00601	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00604	8b 08		 mov	 ecx, DWORD PTR [eax]
  00606	51		 push	 ecx
  00607	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 216  : 		this->m_skSocket = INVALID_SOCKET;

  0060d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00610	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 217  : 		return FALSE;

  00616	33 c0		 xor	 eax, eax
  00618	eb 05		 jmp	 SHORT $LN4@SendData
$LN1@SendData:

; 218  : 	}
; 219  : 
; 220  : 	return TRUE;

  0061a	b8 01 00 00 00	 mov	 eax, 1
$LN4@SendData:

; 221  : }

  0061f	5f		 pop	 edi
  00620	5e		 pop	 esi
  00621	5b		 pop	 ebx
  00622	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00625	33 cd		 xor	 ecx, ebp
  00627	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0062c	8b e5		 mov	 esp, ebp
  0062e	5d		 pop	 ebp
  0062f	c2 08 00	 ret	 8
?SendData@CWzMultiCastSock@@QAEHPADH@Z ENDP		; CWzMultiCastSock::SendData
_TEXT	ENDS
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iErrorNo$ = 8						; size = 4
?SaveLastError@CWzMultiCastSock@@IAEXH@Z PROC		; CWzMultiCastSock::SaveLastError
; _this$ = ecx

; 225  : {

  00640	55		 push	 ebp
  00641	8b ec		 mov	 ebp, esp
  00643	83 ec 44	 sub	 esp, 68			; 00000044H
  00646	53		 push	 ebx
  00647	56		 push	 esi
  00648	57		 push	 edi
  00649	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  : 	if ( iErrorNo == 0 )

  0064c	83 7d 08 00	 cmp	 DWORD PTR _iErrorNo$[ebp], 0
  00650	75 11		 jne	 SHORT $LN3@SaveLastEr

; 227  : 	{
; 228  : 		this->m_uLastErrorNum = WSAGetLastError();

  00652	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00658	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0065b	89 81 98 02 00
	00		 mov	 DWORD PTR [ecx+664], eax

; 229  : 	}
; 230  : 	else

  00661	eb 0c		 jmp	 SHORT $LN2@SaveLastEr
$LN3@SaveLastEr:

; 231  : 	{
; 232  : 		this->m_uLastErrorNum = iErrorNo;

  00663	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00666	8b 4d 08	 mov	 ecx, DWORD PTR _iErrorNo$[ebp]
  00669	89 88 98 02 00
	00		 mov	 DWORD PTR [eax+664], ecx
$LN2@SaveLastEr:

; 233  : 	}
; 234  : 
; 235  : 	memset(this->m_szLastErrorMessage, 0, sizeof(this->m_szLastErrorMessage));

  0066f	68 04 01 00 00	 push	 260			; 00000104H
  00674	6a 00		 push	 0
  00676	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00679	05 9c 02 00 00	 add	 eax, 668		; 0000029cH
  0067e	50		 push	 eax
  0067f	e8 00 00 00 00	 call	 _memset
  00684	83 c4 0c	 add	 esp, 12			; 0000000cH

; 236  : 	FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, NULL, this->m_uLastErrorNum, LANG_NEUTRAL, this->m_szLastErrorMessage, sizeof(this->m_szLastErrorMessage), NULL);

  00687	6a 00		 push	 0
  00689	68 04 01 00 00	 push	 260			; 00000104H
  0068e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00691	05 9c 02 00 00	 add	 eax, 668		; 0000029cH
  00696	50		 push	 eax
  00697	6a 00		 push	 0
  00699	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0069c	8b 91 98 02 00
	00		 mov	 edx, DWORD PTR [ecx+664]
  006a2	52		 push	 edx
  006a3	6a 00		 push	 0
  006a5	68 00 10 00 00	 push	 4096			; 00001000H
  006aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FormatMessageA@28

; 237  : 
; 238  : 	if ( this->m_lpfnCALLBACK_ERRORNOTIFY )

  006b0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006b3	83 b8 ac 03 00
	00 00		 cmp	 DWORD PTR [eax+940], 0
  006ba	74 25		 je	 SHORT $LN4@SaveLastEr

; 239  : 	{
; 240  : 		this->m_lpfnCALLBACK_ERRORNOTIFY(this, this->m_uLastErrorNum, this->m_szLastErrorMessage);

  006bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006bf	05 9c 02 00 00	 add	 eax, 668		; 0000029cH
  006c4	50		 push	 eax
  006c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006c8	8b 91 98 02 00
	00		 mov	 edx, DWORD PTR [ecx+664]
  006ce	52		 push	 edx
  006cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006d2	50		 push	 eax
  006d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006d6	8b 91 ac 03 00
	00		 mov	 edx, DWORD PTR [ecx+940]
  006dc	ff d2		 call	 edx
  006de	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SaveLastEr:

; 241  : 	}
; 242  : }

  006e1	5f		 pop	 edi
  006e2	5e		 pop	 esi
  006e3	5b		 pop	 ebx
  006e4	8b e5		 mov	 esp, ebp
  006e6	5d		 pop	 ebp
  006e7	c2 04 00	 ret	 4
?SaveLastError@CWzMultiCastSock@@IAEXH@Z ENDP		; CWzMultiCastSock::SaveLastError
_TEXT	ENDS
PUBLIC	?SavePrivateErrorMessage@CWzMultiCastSock@@IAEXPAD@Z ; CWzMultiCastSock::SavePrivateErrorMessage
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpszErrorMessage$ = 8					; size = 4
?SavePrivateErrorMessage@CWzMultiCastSock@@IAEXPAD@Z PROC ; CWzMultiCastSock::SavePrivateErrorMessage
; _this$ = ecx

; 246  : {

  006f0	55		 push	 ebp
  006f1	8b ec		 mov	 ebp, esp
  006f3	83 ec 44	 sub	 esp, 68			; 00000044H
  006f6	53		 push	 ebx
  006f7	56		 push	 esi
  006f8	57		 push	 edi
  006f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 	this->m_uLastErrorNum = 0;

  006fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006ff	c7 80 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+664], 0

; 248  : 	strcpy(this->m_szLastErrorMessage, lpszErrorMessage);

  00709	8b 45 08	 mov	 eax, DWORD PTR _lpszErrorMessage$[ebp]
  0070c	50		 push	 eax
  0070d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00710	81 c1 9c 02 00
	00		 add	 ecx, 668		; 0000029cH
  00716	51		 push	 ecx
  00717	e8 00 00 00 00	 call	 _strcpy
  0071c	83 c4 08	 add	 esp, 8

; 249  : 
; 250  : 	if ( this->m_lpfnCALLBACK_ERRORNOTIFY )

  0071f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00722	83 b8 ac 03 00
	00 00		 cmp	 DWORD PTR [eax+940], 0
  00729	74 25		 je	 SHORT $LN2@SavePrivat

; 251  : 	{
; 252  : 		this->m_lpfnCALLBACK_ERRORNOTIFY(this, this->m_uLastErrorNum, this->m_szLastErrorMessage);

  0072b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0072e	05 9c 02 00 00	 add	 eax, 668		; 0000029cH
  00733	50		 push	 eax
  00734	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00737	8b 91 98 02 00
	00		 mov	 edx, DWORD PTR [ecx+664]
  0073d	52		 push	 edx
  0073e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00741	50		 push	 eax
  00742	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00745	8b 91 ac 03 00
	00		 mov	 edx, DWORD PTR [ecx+940]
  0074b	ff d2		 call	 edx
  0074d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SavePrivat:

; 253  : 	}
; 254  : }

  00750	5f		 pop	 edi
  00751	5e		 pop	 esi
  00752	5b		 pop	 ebx
  00753	8b e5		 mov	 esp, ebp
  00755	5d		 pop	 ebp
  00756	c2 04 00	 ret	 4
?SavePrivateErrorMessage@CWzMultiCastSock@@IAEXPAD@Z ENDP ; CWzMultiCastSock::SavePrivateErrorMessage
_TEXT	ENDS
PUBLIC	??_C@_0CG@POBBELLP@RecvThreadProc?$CI?$CJ?5ERROR?5?3?5iRecvLe@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__recvfrom@24:PROC
;	COMDAT ??_C@_0CG@POBBELLP@RecvThreadProc?$CI?$CJ?5ERROR?5?3?5iRecvLe@
CONST	SEGMENT
??_C@_0CG@POBBELLP@RecvThreadProc?$CI?$CJ?5ERROR?5?3?5iRecvLe@ DB 'RecvTh'
	DB	'readProc() ERROR : iRecvLen < 0', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv81 = -1132						; size = 4
_btSubCode$205633 = -1062				; size = 1
_btHeadCode$205632 = -1061				; size = 1
_iSize$205631 = -1060					; size = 4
_iRecvLen$205624 = -1056				; size = 4
_lpCMSock$ = -1052					; size = 4
_isockaddr_len$ = -1048					; size = 4
_sockaddr$ = -1044					; size = 16
_cBUFFER$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_lpParam$ = 8						; size = 4
?RecvThreadProc@CWzMultiCastSock@@KGIPAX@Z PROC		; CWzMultiCastSock::RecvThreadProc

; 258  : {

  00760	55		 push	 ebp
  00761	8b ec		 mov	 ebp, esp
  00763	81 ec 6c 04 00
	00		 sub	 esp, 1132		; 0000046cH
  00769	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0076e	33 c5		 xor	 eax, ebp
  00770	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00773	53		 push	 ebx
  00774	56		 push	 esi
  00775	57		 push	 edi

; 259  : 	char cBUFFER[1024];
; 260  : 	sockaddr_in sockaddr;
; 261  : 	int isockaddr_len = 16;

  00776	c7 85 e8 fb ff
	ff 10 00 00 00	 mov	 DWORD PTR _isockaddr_len$[ebp], 16 ; 00000010H

; 262  : 	CWzMultiCastSock * lpCMSock = (CWzMultiCastSock *)lpParam;

  00780	8b 45 08	 mov	 eax, DWORD PTR _lpParam$[ebp]
  00783	89 85 e4 fb ff
	ff		 mov	 DWORD PTR _lpCMSock$[ebp], eax
$LN10@RecvThread:

; 263  : 
; 264  : 	while ( true )

  00789	b8 01 00 00 00	 mov	 eax, 1
  0078e	85 c0		 test	 eax, eax
  00790	0f 84 d0 01 00
	00		 je	 $LN9@RecvThread

; 265  : 	{
; 266  : 		int iRecvLen = recvfrom(lpCMSock->m_skSocket, cBUFFER, sizeof(cBUFFER), 0, (::sockaddr *)&sockaddr, &isockaddr_len);

  00796	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _isockaddr_len$[ebp]
  0079c	50		 push	 eax
  0079d	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR _sockaddr$[ebp]
  007a3	51		 push	 ecx
  007a4	6a 00		 push	 0
  007a6	68 00 04 00 00	 push	 1024			; 00000400H
  007ab	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _cBUFFER$[ebp]
  007b1	52		 push	 edx
  007b2	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _lpCMSock$[ebp]
  007b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  007ba	51		 push	 ecx
  007bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recvfrom@24
  007c1	89 85 e0 fb ff
	ff		 mov	 DWORD PTR _iRecvLen$205624[ebp], eax

; 267  : 
; 268  : 		if ( iRecvLen == -1 )

  007c7	83 bd e0 fb ff
	ff ff		 cmp	 DWORD PTR _iRecvLen$205624[ebp], -1
  007ce	75 2d		 jne	 SHORT $LN8@RecvThread

; 269  : 		{
; 270  : 			lpCMSock->SaveLastError(0);

  007d0	6a 00		 push	 0
  007d2	8b 8d e4 fb ff
	ff		 mov	 ecx, DWORD PTR _lpCMSock$[ebp]
  007d8	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 271  : 			closesocket(lpCMSock->m_skSocket);

  007dd	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _lpCMSock$[ebp]
  007e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  007e5	51		 push	 ecx
  007e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 272  : 			lpCMSock->m_skSocket = INVALID_SOCKET;

  007ec	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _lpCMSock$[ebp]
  007f2	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 273  : 			break;

  007f8	e9 69 01 00 00	 jmp	 $LN9@RecvThread
$LN8@RecvThread:

; 274  : 		}
; 275  : 
; 276  : 		if ( iRecvLen < 0 )

  007fd	83 bd e0 fb ff
	ff 00		 cmp	 DWORD PTR _iRecvLen$205624[ebp], 0
  00804	7d 30		 jge	 SHORT $LN7@RecvThread

; 277  : 		{
; 278  : 			lpCMSock->SavePrivateErrorMessage("RecvThreadProc() ERROR : iRecvLen < 0");

  00806	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@POBBELLP@RecvThreadProc?$CI?$CJ?5ERROR?5?3?5iRecvLe@
  0080b	8b 8d e4 fb ff
	ff		 mov	 ecx, DWORD PTR _lpCMSock$[ebp]
  00811	e8 00 00 00 00	 call	 ?SavePrivateErrorMessage@CWzMultiCastSock@@IAEXPAD@Z ; CWzMultiCastSock::SavePrivateErrorMessage

; 279  : 			closesocket(lpCMSock->m_skSocket);

  00816	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _lpCMSock$[ebp]
  0081c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0081e	51		 push	 ecx
  0081f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 280  : 			lpCMSock->m_skSocket = INVALID_SOCKET;

  00825	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _lpCMSock$[ebp]
  0082b	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 281  : 			break;

  00831	e9 30 01 00 00	 jmp	 $LN9@RecvThread
$LN7@RecvThread:

; 282  : 		}
; 283  : 
; 284  : 		int iSize = 0;

  00836	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _iSize$205631[ebp], 0

; 285  : 		BYTE btHeadCode = 0;

  00840	c6 85 db fb ff
	ff 00		 mov	 BYTE PTR _btHeadCode$205632[ebp], 0

; 286  : 		BYTE btSubCode = 0;

  00847	c6 85 da fb ff
	ff 00		 mov	 BYTE PTR _btSubCode$205633[ebp], 0

; 287  : 
; 288  : 		switch ( (BYTE)cBUFFER[0] )

  0084e	8a 85 fc fb ff
	ff		 mov	 al, BYTE PTR _cBUFFER$[ebp]
  00854	88 85 94 fb ff
	ff		 mov	 BYTE PTR tv81[ebp], al
  0085a	80 bd 94 fb ff
	ff c1		 cmp	 BYTE PTR tv81[ebp], 193	; 000000c1H
  00861	74 0e		 je	 SHORT $LN4@RecvThread
  00863	80 bd 94 fb ff
	ff c2		 cmp	 BYTE PTR tv81[ebp], 194	; 000000c2H
  0086a	74 78		 je	 SHORT $LN2@RecvThread
  0086c	e9 f0 00 00 00	 jmp	 $LN5@RecvThread
$LN4@RecvThread:

; 289  : 		{
; 290  : 			case 0xC1:
; 291  : 				iSize = (BYTE)cBUFFER[1];

  00871	0f b6 85 fd fb
	ff ff		 movzx	 eax, BYTE PTR _cBUFFER$[ebp+1]
  00878	89 85 dc fb ff
	ff		 mov	 DWORD PTR _iSize$205631[ebp], eax

; 292  : 				btHeadCode = (BYTE)cBUFFER[2];

  0087e	8a 85 fe fb ff
	ff		 mov	 al, BYTE PTR _cBUFFER$[ebp+2]
  00884	88 85 db fb ff
	ff		 mov	 BYTE PTR _btHeadCode$205632[ebp], al

; 293  : 				btSubCode = (BYTE)cBUFFER[3];

  0088a	8a 85 ff fb ff
	ff		 mov	 al, BYTE PTR _cBUFFER$[ebp+3]
  00890	88 85 da fb ff
	ff		 mov	 BYTE PTR _btSubCode$205633[ebp], al

; 294  : 
; 295  : 				if ( lpCMSock->m_lpfnCALLBACK_RECVNOTIFY )

  00896	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _lpCMSock$[ebp]
  0089c	83 b8 a8 03 00
	00 00		 cmp	 DWORD PTR [eax+936], 0
  008a3	74 3d		 je	 SHORT $LN3@RecvThread

; 296  : 				{
; 297  : 					lpCMSock->m_lpfnCALLBACK_RECVNOTIFY(lpCMSock, sockaddr.sin_addr.S_un.S_addr, btHeadCode, btSubCode, cBUFFER, iRecvLen);

  008a5	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _iRecvLen$205624[ebp]
  008ab	50		 push	 eax
  008ac	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _cBUFFER$[ebp]
  008b2	51		 push	 ecx
  008b3	0f b6 95 da fb
	ff ff		 movzx	 edx, BYTE PTR _btSubCode$205633[ebp]
  008ba	52		 push	 edx
  008bb	0f b6 85 db fb
	ff ff		 movzx	 eax, BYTE PTR _btHeadCode$205632[ebp]
  008c2	50		 push	 eax
  008c3	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _sockaddr$[ebp+4]
  008c9	51		 push	 ecx
  008ca	8b 95 e4 fb ff
	ff		 mov	 edx, DWORD PTR _lpCMSock$[ebp]
  008d0	52		 push	 edx
  008d1	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _lpCMSock$[ebp]
  008d7	8b 88 a8 03 00
	00		 mov	 ecx, DWORD PTR [eax+936]
  008dd	ff d1		 call	 ecx
  008df	83 c4 18	 add	 esp, 24			; 00000018H
$LN3@RecvThread:

; 298  : 				}
; 299  : 				break;

  008e2	eb 7d		 jmp	 SHORT $LN5@RecvThread
$LN2@RecvThread:

; 300  : 			case 0xC2:
; 301  : 				iSize = ((BYTE)cBUFFER[1] << 8 )+ ((BYTE)cBUFFER[2]);

  008e4	0f b6 85 fd fb
	ff ff		 movzx	 eax, BYTE PTR _cBUFFER$[ebp+1]
  008eb	c1 e0 08	 shl	 eax, 8
  008ee	0f b6 8d fe fb
	ff ff		 movzx	 ecx, BYTE PTR _cBUFFER$[ebp+2]
  008f5	03 c1		 add	 eax, ecx
  008f7	89 85 dc fb ff
	ff		 mov	 DWORD PTR _iSize$205631[ebp], eax

; 302  : 				btHeadCode = (BYTE)cBUFFER[3];

  008fd	8a 85 ff fb ff
	ff		 mov	 al, BYTE PTR _cBUFFER$[ebp+3]
  00903	88 85 db fb ff
	ff		 mov	 BYTE PTR _btHeadCode$205632[ebp], al

; 303  : 				btSubCode = (BYTE)cBUFFER[4];

  00909	8a 85 00 fc ff
	ff		 mov	 al, BYTE PTR _cBUFFER$[ebp+4]
  0090f	88 85 da fb ff
	ff		 mov	 BYTE PTR _btSubCode$205633[ebp], al

; 304  : 
; 305  : 				if ( lpCMSock->m_lpfnCALLBACK_RECVNOTIFY )

  00915	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _lpCMSock$[ebp]
  0091b	83 b8 a8 03 00
	00 00		 cmp	 DWORD PTR [eax+936], 0
  00922	74 3d		 je	 SHORT $LN5@RecvThread

; 306  : 				{
; 307  : 					lpCMSock->m_lpfnCALLBACK_RECVNOTIFY(lpCMSock, sockaddr.sin_addr.S_un.S_addr, btHeadCode, btSubCode, cBUFFER, iRecvLen);

  00924	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _iRecvLen$205624[ebp]
  0092a	50		 push	 eax
  0092b	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _cBUFFER$[ebp]
  00931	51		 push	 ecx
  00932	0f b6 95 da fb
	ff ff		 movzx	 edx, BYTE PTR _btSubCode$205633[ebp]
  00939	52		 push	 edx
  0093a	0f b6 85 db fb
	ff ff		 movzx	 eax, BYTE PTR _btHeadCode$205632[ebp]
  00941	50		 push	 eax
  00942	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _sockaddr$[ebp+4]
  00948	51		 push	 ecx
  00949	8b 95 e4 fb ff
	ff		 mov	 edx, DWORD PTR _lpCMSock$[ebp]
  0094f	52		 push	 edx
  00950	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _lpCMSock$[ebp]
  00956	8b 88 a8 03 00
	00		 mov	 ecx, DWORD PTR [eax+936]
  0095c	ff d1		 call	 ecx
  0095e	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@RecvThread:

; 308  : 				}
; 309  : 		}
; 310  : 	}

  00961	e9 23 fe ff ff	 jmp	 $LN10@RecvThread
$LN9@RecvThread:

; 311  : 
; 312  : 	return FALSE;

  00966	33 c0		 xor	 eax, eax

; 313  : }

  00968	5f		 pop	 edi
  00969	5e		 pop	 esi
  0096a	5b		 pop	 ebx
  0096b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0096e	33 cd		 xor	 ecx, ebp
  00970	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00975	8b e5		 mov	 esp, ebp
  00977	5d		 pop	 ebp
  00978	c2 04 00	 ret	 4
?RecvThreadProc@CWzMultiCastSock@@KGIPAX@Z ENDP		; CWzMultiCastSock::RecvThreadProc
_TEXT	ENDS
END
