; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\wsGameServer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CwsGameServer@@6B@				; CwsGameServer::`vftable'
PUBLIC	??0CwsGameServer@@QAE@XZ			; CwsGameServer::CwsGameServer
PUBLIC	??_R4CwsGameServer@@6B@				; CwsGameServer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCwsGameServer@@@8			; CwsGameServer `RTTI Type Descriptor'
PUBLIC	??_R3CwsGameServer@@8				; CwsGameServer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CwsGameServer@@8				; CwsGameServer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CwsGameServer@@8			; CwsGameServer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MyWinsockBase@@8			; MyWinsockBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMyWinsockBase@@@8			; MyWinsockBase `RTTI Type Descriptor'
PUBLIC	??_R3MyWinsockBase@@8				; MyWinsockBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MyWinsockBase@@8				; MyWinsockBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MyWinsockBase@@8			; MyWinsockBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??0MyWinsockBase@@QAE@XZ:PROC			; MyWinsockBase::MyWinsockBase
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECwsGameServer@@UAEPAXI@Z:PROC		; CwsGameServer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@MyWinsockBase@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\wsgameserver.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@MyWinsockBase@@8 DD FLAT:??_R0?AVMyWinsockBase@@@8 ; MyWinsockBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R2MyWinsockBase@@8
rdata$r	SEGMENT
??_R2MyWinsockBase@@8 DD FLAT:??_R1A@?0A@EA@MyWinsockBase@@8 ; MyWinsockBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MyWinsockBase@@8
rdata$r	SEGMENT
??_R3MyWinsockBase@@8 DD 00H				; MyWinsockBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMyWinsockBase@@@8
_DATA	SEGMENT
??_R0?AVMyWinsockBase@@@8 DD FLAT:??_7type_info@@6B@	; MyWinsockBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMyWinsockBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MyWinsockBase@@8
rdata$r	SEGMENT
??_R13?0A@EA@MyWinsockBase@@8 DD FLAT:??_R0?AVMyWinsockBase@@@8 ; MyWinsockBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CwsGameServer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CwsGameServer@@8 DD FLAT:??_R0?AVCwsGameServer@@@8 ; CwsGameServer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CwsGameServer@@8
rdata$r	ENDS
;	COMDAT ??_R2CwsGameServer@@8
rdata$r	SEGMENT
??_R2CwsGameServer@@8 DD FLAT:??_R1A@?0A@EA@CwsGameServer@@8 ; CwsGameServer::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CwsGameServer@@8
rdata$r	SEGMENT
??_R3CwsGameServer@@8 DD 00H				; CwsGameServer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CwsGameServer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCwsGameServer@@@8
_DATA	SEGMENT
??_R0?AVCwsGameServer@@@8 DD FLAT:??_7type_info@@6B@	; CwsGameServer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCwsGameServer@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CwsGameServer@@6B@
rdata$r	SEGMENT
??_R4CwsGameServer@@6B@ DD 00H				; CwsGameServer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCwsGameServer@@@8
	DD	FLAT:??_R3CwsGameServer@@8
rdata$r	ENDS
;	COMDAT ??_7CwsGameServer@@6B@
CONST	SEGMENT
??_7CwsGameServer@@6B@ DD FLAT:??_R4CwsGameServer@@6B@	; CwsGameServer::`vftable'
	DD	FLAT:??_ECwsGameServer@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CwsGameServer@@QAE@XZ PROC				; CwsGameServer::CwsGameServer
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 04	 add	 ecx, 4
  00012	e8 00 00 00 00	 call	 ??0MyWinsockBase@@QAE@XZ ; MyWinsockBase::MyWinsockBase
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CwsGameServer@@6B@

; 9    : 	this->m_SendSec=0;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 10   : 	this->m_SendSecTmp=0;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 11   : }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??0CwsGameServer@@QAE@XZ ENDP				; CwsGameServer::CwsGameServer
_TEXT	ENDS
PUBLIC	??1CwsGameServer@@UAE@XZ			; CwsGameServer::~CwsGameServer
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCwsGameServer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCwsGameServer@@UAEPAXI@Z PROC			; CwsGameServer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CwsGameServer@@UAE@XZ ; CwsGameServer::~CwsGameServer
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCwsGameServer@@UAEPAXI@Z ENDP			; CwsGameServer::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1MyWinsockBase@@QAE@XZ:PROC			; MyWinsockBase::~MyWinsockBase
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CwsGameServer@@UAE@XZ PROC				; CwsGameServer::~CwsGameServer
; _this$ = ecx

; 15   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CwsGameServer@@6B@

; 16   : 	// Empty
; 17   : }

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	83 c1 04	 add	 ecx, 4
  0005b	e8 00 00 00 00	 call	 ??1MyWinsockBase@@QAE@XZ ; MyWinsockBase::~MyWinsockBase
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
??1CwsGameServer@@UAE@XZ ENDP				; CwsGameServer::~CwsGameServer
_TEXT	ENDS
PUBLIC	?SetSocketIndex@CwsGameServer@@QAEHIH@Z		; CwsGameServer::SetSocketIndex
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_socket$ = 8						; size = 4
_index$ = 12						; size = 4
?SetSocketIndex@CwsGameServer@@QAEHIH@Z PROC		; CwsGameServer::SetSocketIndex
; _this$ = ecx

; 20   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 44	 sub	 esp, 68			; 00000044H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	return 1;

  0007c	b8 01 00 00 00	 mov	 eax, 1

; 22   : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
?SetSocketIndex@CwsGameServer@@QAEHIH@Z ENDP		; CwsGameServer::SetSocketIndex
_TEXT	ENDS
PUBLIC	??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CreateServer@CwsGameServer@@QAEHPADGKK@Z	; CwsGameServer::CreateServer
EXTRN	__imp__WSAAsyncSelect@16:PROC
EXTRN	__imp__listen@8:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__imp__bind@12:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__htonl@4:PROC
EXTRN	_memset:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@ DB 'Server WS'
	DB	'AAsyncSelect error %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@ DB 'Server listen er'
	DB	'ror %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@ DB 'Server bind error %'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@
CONST	SEGMENT
??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@ DB 'windows handle error', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_nResult$ = -28						; size = 4
_addr$ = -24						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ip_addr$ = 8						; size = 4
_port$ = 12						; size = 2
_WinServerMsg$ = 16					; size = 4
_WinClientMsg$ = 20					; size = 4
?CreateServer@CwsGameServer@@QAEHPADGKK@Z PROC		; CwsGameServer::CreateServer
; _this$ = ecx

; 25   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0009b	33 c5		 xor	 eax, ebp
  0009d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000a0	53		 push	 ebx
  000a1	56		 push	 esi
  000a2	57		 push	 edi
  000a3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	sockaddr_in addr;
; 27   : 	int nResult;
; 28   : 	
; 29   : 	if (this->m_hWnd == 0 )

  000a6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000ad	75 14		 jne	 SHORT $LN4@CreateServ

; 30   : 	{
; 31   : 		MsgBox("windows handle error");

  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@
  000b4	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000b9	83 c4 04	 add	 esp, 4

; 32   : 		return 0;

  000bc	33 c0		 xor	 eax, eax
  000be	e9 0d 01 00 00	 jmp	 $LN5@CreateServ
$LN4@CreateServ:

; 33   : 	}
; 34   : 
; 35   : 	memset(&addr, 0, sizeof(addr) );

  000c3	6a 10		 push	 16			; 00000010H
  000c5	6a 00		 push	 0
  000c7	8d 45 e8	 lea	 eax, DWORD PTR _addr$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _memset
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 36   : 
; 37   : 	addr.sin_family=AF_INET; // INET

  000d3	b8 02 00 00 00	 mov	 eax, 2
  000d8	66 89 45 e8	 mov	 WORD PTR _addr$[ebp], ax

; 38   : 	addr.sin_addr.S_un.S_addr=htonl(0);

  000dc	6a 00		 push	 0
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htonl@4
  000e4	89 45 ec	 mov	 DWORD PTR _addr$[ebp+4], eax

; 39   : 	addr.sin_port=htons(port);

  000e7	0f b7 45 0c	 movzx	 eax, WORD PTR _port$[ebp]
  000eb	50		 push	 eax
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  000f2	66 89 45 ea	 mov	 WORD PTR _addr$[ebp+2], ax

; 40   : 
; 41   : 	nResult=bind(this->m_socket, (sockaddr*)&addr, 16);

  000f6	6a 10		 push	 16			; 00000010H
  000f8	8d 45 e8	 lea	 eax, DWORD PTR _addr$[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00102	52		 push	 edx
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12
  00109	89 45 e4	 mov	 DWORD PTR _nResult$[ebp], eax

; 42   : 
; 43   : 	if ( nResult == -1 )

  0010c	83 7d e4 ff	 cmp	 DWORD PTR _nResult$[ebp], -1
  00110	75 29		 jne	 SHORT $LN3@CreateServ

; 44   : 	{
; 45   : 		LogAdd("Server bind error %d", WSAGetLastError() );

  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00118	50		 push	 eax
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00124	83 c4 08	 add	 esp, 8

; 46   : 		closesocket(this->m_socket);

  00127	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0012a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0012d	51		 push	 ecx
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 47   : 		return 0;

  00134	33 c0		 xor	 eax, eax
  00136	e9 95 00 00 00	 jmp	 $LN5@CreateServ
$LN3@CreateServ:

; 48   : 	}
; 49   : 
; 50   : 	nResult=listen(this->m_socket , 4);

  0013b	6a 04		 push	 4
  0013d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00140	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00143	51		 push	 ecx
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__listen@8
  0014a	89 45 e4	 mov	 DWORD PTR _nResult$[ebp], eax

; 51   : 
; 52   : 	if (nResult == -1)

  0014d	83 7d e4 ff	 cmp	 DWORD PTR _nResult$[ebp], -1
  00151	75 26		 jne	 SHORT $LN2@CreateServ

; 53   : 	{
; 54   : 		closesocket(this->m_socket );

  00153	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00156	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00159	51		 push	 ecx
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 55   : 		LogAdd("Server listen error %d", WSAGetLastError() );

  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00166	50		 push	 eax
  00167	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00172	83 c4 08	 add	 esp, 8

; 56   : 		return 0;

  00175	33 c0		 xor	 eax, eax
  00177	eb 57		 jmp	 SHORT $LN5@CreateServ
$LN2@CreateServ:

; 57   : 	}
; 58   : 
; 59   : 	nResult=WSAAsyncSelect( this->m_socket , this->m_hWnd , WinServerMsg, FD_ACCEPT);

  00179	6a 08		 push	 8
  0017b	8b 45 10	 mov	 eax, DWORD PTR _WinServerMsg$[ebp]
  0017e	50		 push	 eax
  0017f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00182	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00185	52		 push	 edx
  00186	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00189	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0018c	51		 push	 ecx
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16
  00193	89 45 e4	 mov	 DWORD PTR _nResult$[ebp], eax

; 60   : 
; 61   : 	if (nResult == -1)

  00196	83 7d e4 ff	 cmp	 DWORD PTR _nResult$[ebp], -1
  0019a	75 26		 jne	 SHORT $LN1@CreateServ

; 62   : 	{
; 63   : 		closesocket(this->m_socket);

  0019c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0019f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001a2	51		 push	 ecx
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 64   : 		LogAdd("Server WSAAsyncSelect error %d", WSAGetLastError());

  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  001af	50		 push	 eax
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001bb	83 c4 08	 add	 esp, 8

; 65   : 		return 0;

  001be	33 c0		 xor	 eax, eax
  001c0	eb 0e		 jmp	 SHORT $LN5@CreateServ
$LN1@CreateServ:

; 66   : 	}
; 67   : 
; 68   : 	this->m_WinClientMsg  =WinClientMsg;

  001c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001c5	8b 4d 14	 mov	 ecx, DWORD PTR _WinClientMsg$[ebp]
  001c8	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 69   : 	return 1;

  001cb	b8 01 00 00 00	 mov	 eax, 1
$LN5@CreateServ:

; 70   : }

  001d0	5f		 pop	 edi
  001d1	5e		 pop	 esi
  001d2	5b		 pop	 ebx
  001d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d6	33 cd		 xor	 ecx, ebp
  001d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c2 10 00	 ret	 16			; 00000010H
?CreateServer@CwsGameServer@@QAEHPADGKK@Z ENDP		; CwsGameServer::CreateServer
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z ; CwsGameServer::AcceptSocket
EXTRN	__imp__setsockopt@20:PROC
EXTRN	?AddIp@CIpCache@@QAEHPAD@Z:PROC			; CIpCache::AddIp
EXTRN	?IpCache@@3VCIpCache@@A:BYTE			; IpCache
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__accept@12:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_ling$ = -40						; size = 4
_nResult$ = -36						; size = 4
_Len$ = -32						; size = 4
_cAddr$ = -28						; size = 16
_cSocket$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_clientSocket$ = 8					; size = 4
_cInAddr$ = 12						; size = 4
?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z PROC	; CwsGameServer::AcceptSocket
; _this$ = ecx

; 74   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	83 ec 68	 sub	 esp, 104		; 00000068H
  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001fb	33 c5		 xor	 eax, ebp
  001fd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00200	53		 push	 ebx
  00201	56		 push	 esi
  00202	57		 push	 edi
  00203	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 	SOCKET cSocket;
; 76   : 	sockaddr_in cAddr;
; 77   : 	int Len = 16;

  00206	c7 45 e0 10 00
	00 00		 mov	 DWORD PTR _Len$[ebp], 16 ; 00000010H

; 78   : 	int nResult;
; 79   : 	WORD ling[2];
; 80   : 
; 81   : 	cSocket=accept(this->m_socket , (sockaddr*)&cAddr, &Len);

  0020d	8d 45 e0	 lea	 eax, DWORD PTR _Len$[ebp]
  00210	50		 push	 eax
  00211	8d 4d e4	 lea	 ecx, DWORD PTR _cAddr$[ebp]
  00214	51		 push	 ecx
  00215	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00218	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0021b	50		 push	 eax
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__accept@12
  00222	89 45 f4	 mov	 DWORD PTR _cSocket$[ebp], eax

; 82   : 	
; 83   : 	if (cSocket != INVALID_SOCKET)

  00225	83 7d f4 ff	 cmp	 DWORD PTR _cSocket$[ebp], -1
  00229	74 6c		 je	 SHORT $LN3@AcceptSock

; 84   : 	{
; 85   : 		memcpy(&cInAddr, &cAddr.sin_addr.S_un.S_addr , sizeof(cInAddr));

  0022b	6a 04		 push	 4
  0022d	8d 45 e8	 lea	 eax, DWORD PTR _cAddr$[ebp+4]
  00230	50		 push	 eax
  00231	8b 4d 0c	 mov	 ecx, DWORD PTR _cInAddr$[ebp]
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 _memcpy
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 86   : 
; 87   : 		if (IpCache.AddIp(inet_ntoa( cInAddr)) == 0)

  0023d	8b 45 0c	 mov	 eax, DWORD PTR _cInAddr$[ebp]
  00240	8b 08		 mov	 ecx, DWORD PTR [eax]
  00242	51		 push	 ecx
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  00249	50		 push	 eax
  0024a	b9 00 00 00 00	 mov	 ecx, OFFSET ?IpCache@@3VCIpCache@@A ; IpCache
  0024f	e8 00 00 00 00	 call	 ?AddIp@CIpCache@@QAEHPAD@Z ; CIpCache::AddIp
  00254	85 c0		 test	 eax, eax
  00256	75 0e		 jne	 SHORT $LN2@AcceptSock

; 88   : 		{
; 89   : 			closesocket( cSocket);

  00258	8b 45 f4	 mov	 eax, DWORD PTR _cSocket$[ebp]
  0025b	50		 push	 eax
  0025c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 90   : 			return 0;

  00262	33 c0		 xor	 eax, eax
  00264	eb 66		 jmp	 SHORT $LN4@AcceptSock
$LN2@AcceptSock:

; 91   : 		}
; 92   : 
; 93   : 		nResult=WSAAsyncSelect(cSocket, this->m_hWnd , this->m_WinClientMsg , FD_READ|FD_WRITE|FD_CLOSE);

  00266	6a 23		 push	 35			; 00000023H
  00268	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0026b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0026e	51		 push	 ecx
  0026f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00272	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00275	50		 push	 eax
  00276	8b 4d f4	 mov	 ecx, DWORD PTR _cSocket$[ebp]
  00279	51		 push	 ecx
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16
  00280	89 45 dc	 mov	 DWORD PTR _nResult$[ebp], eax

; 94   : 
; 95   : 		if ( nResult == -1 )

  00283	83 7d dc ff	 cmp	 DWORD PTR _nResult$[ebp], -1
  00287	75 0e		 jne	 SHORT $LN3@AcceptSock

; 96   : 		{
; 97   : 			closesocket(cSocket);

  00289	8b 45 f4	 mov	 eax, DWORD PTR _cSocket$[ebp]
  0028c	50		 push	 eax
  0028d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 98   : 			return 0;

  00293	33 c0		 xor	 eax, eax
  00295	eb 35		 jmp	 SHORT $LN4@AcceptSock
$LN3@AcceptSock:

; 99   : 		}
; 100  : 
; 101  : 	}
; 102  : 
; 103  : 	clientSocket=cSocket;

  00297	8b 45 08	 mov	 eax, DWORD PTR _clientSocket$[ebp]
  0029a	8b 4d f4	 mov	 ecx, DWORD PTR _cSocket$[ebp]
  0029d	89 08		 mov	 DWORD PTR [eax], ecx

; 104  : 
; 105  : 	ling[0]=0;

  0029f	33 c0		 xor	 eax, eax
  002a1	66 89 45 d8	 mov	 WORD PTR _ling$[ebp], ax

; 106  : 	ling[1]=0;

  002a5	33 c0		 xor	 eax, eax
  002a7	66 89 45 da	 mov	 WORD PTR _ling$[ebp+2], ax

; 107  : 
; 108  : 	setsockopt( clientSocket, SOL_SOCKET, 0xFFFFFF7F, (char*)&ling, sizeof(ling));

  002ab	6a 04		 push	 4
  002ad	8d 45 d8	 lea	 eax, DWORD PTR _ling$[ebp]
  002b0	50		 push	 eax
  002b1	68 7f ff ff ff	 push	 -129			; ffffff7fH
  002b6	68 ff ff 00 00	 push	 65535			; 0000ffffH
  002bb	8b 4d 08	 mov	 ecx, DWORD PTR _clientSocket$[ebp]
  002be	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c0	52		 push	 edx
  002c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setsockopt@20

; 109  : 
; 110  : 	return 1;

  002c7	b8 01 00 00 00	 mov	 eax, 1
$LN4@AcceptSock:

; 111  : }

  002cc	5f		 pop	 edi
  002cd	5e		 pop	 esi
  002ce	5b		 pop	 ebx
  002cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d2	33 cd		 xor	 ecx, ebp
  002d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d9	8b e5		 mov	 esp, ebp
  002db	5d		 pop	 ebp
  002dc	c2 08 00	 ret	 8
?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z ENDP	; CwsGameServer::AcceptSocket
_TEXT	ENDS
PUBLIC	?DataSendW@CwsGameServer@@QAEHHPADH@Z		; CwsGameServer::DataSendW
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_uindex$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
?DataSendW@CwsGameServer@@QAEHHPADH@Z PROC		; CwsGameServer::DataSendW
; _this$ = ecx

; 114  : {

  002e0	55		 push	 ebp
  002e1	8b ec		 mov	 ebp, esp
  002e3	83 ec 44	 sub	 esp, 68			; 00000044H
  002e6	53		 push	 ebx
  002e7	56		 push	 esi
  002e8	57		 push	 edi
  002e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return 1;

  002ec	b8 01 00 00 00	 mov	 eax, 1

; 116  : }

  002f1	5f		 pop	 edi
  002f2	5e		 pop	 esi
  002f3	5b		 pop	 ebx
  002f4	8b e5		 mov	 esp, ebp
  002f6	5d		 pop	 ebp
  002f7	c2 0c 00	 ret	 12			; 0000000cH
?DataSendW@CwsGameServer@@QAEHHPADH@Z ENDP		; CwsGameServer::DataSendW
_TEXT	ENDS
PUBLIC	??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0EE@KJFHEGML@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??DataSocketSend@CwsGameServer@@QAEHIPADH@Z@4JA ; `CwsGameServer::DataSocketSend'::`2'::__LINE__Var
PUBLIC	?DataSocketSend@CwsGameServer@@QAEHIPADH@Z	; CwsGameServer::DataSocketSend
EXTRN	__imp__send@16:PROC
;	COMDAT ??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@ DB 'INVALID_SOCKET %'
	DB	's %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@KJFHEGML@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0EE@KJFHEGML@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\wsgameserver.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??DataSocketSend@CwsGameServer@@QAEHIPADH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DataSocketSend@CwsGameServer@@QAEHIPADH@Z@4JA DD 077H ; `CwsGameServer::DataSocketSend'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_nLeft$ = -16						; size = 4
_nDx$ = -12						; size = 4
_nResult$ = -8						; size = 4
_this$ = -4						; size = 4
_socket$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
?DataSocketSend@CwsGameServer@@QAEHIPADH@Z PROC		; CwsGameServer::DataSocketSend
; _this$ = ecx

; 119  : {

  00300	55		 push	 ebp
  00301	8b ec		 mov	 ebp, esp
  00303	83 ec 50	 sub	 esp, 80			; 00000050H
  00306	53		 push	 ebx
  00307	56		 push	 esi
  00308	57		 push	 edi
  00309	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 	int nResult, nDx, nLeft;
; 121  : 
; 122  : 	nDx=0;

  0030c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nDx$[ebp], 0

; 123  : 
; 124  : 	if (socket == INVALID_SOCKET )

  00313	83 7d 08 ff	 cmp	 DWORD PTR _socket$[ebp], -1
  00317	75 20		 jne	 SHORT $LN7@DataSocket

; 125  : 	{
; 126  : 		LogAdd("INVALID_SOCKET %s %d", __FILE__, __LINE__);

  00319	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??DataSocketSend@CwsGameServer@@QAEHIPADH@Z@4JA
  0031e	83 c0 07	 add	 eax, 7
  00321	50		 push	 eax
  00322	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@KJFHEGML@d?3?2projects?2exteam6?43?2source?2gam@
  00327	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@
  0032c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00332	83 c4 0c	 add	 esp, 12			; 0000000cH

; 127  : 		return 0;

  00335	33 c0		 xor	 eax, eax
  00337	eb 63		 jmp	 SHORT $LN8@DataSocket
$LN7@DataSocket:

; 128  : 	}
; 129  : 
; 130  : 	nLeft = len;

  00339	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0033c	89 45 f0	 mov	 DWORD PTR _nLeft$[ebp], eax
$LN6@DataSocket:

; 131  : 
; 132  : 	while (nLeft > 0)

  0033f	83 7d f0 00	 cmp	 DWORD PTR _nLeft$[ebp], 0
  00343	7e 52		 jle	 SHORT $LN5@DataSocket

; 133  : 	{
; 134  : 		nResult=send(socket, &buf[nDx], (len-nDx), 0);

  00345	6a 00		 push	 0
  00347	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0034a	2b 45 f4	 sub	 eax, DWORD PTR _nDx$[ebp]
  0034d	50		 push	 eax
  0034e	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00351	03 4d f4	 add	 ecx, DWORD PTR _nDx$[ebp]
  00354	51		 push	 ecx
  00355	8b 55 08	 mov	 edx, DWORD PTR _socket$[ebp]
  00358	52		 push	 edx
  00359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__send@16
  0035f	89 45 f8	 mov	 DWORD PTR _nResult$[ebp], eax

; 135  : 
; 136  : 		if (nResult == -1)

  00362	83 7d f8 ff	 cmp	 DWORD PTR _nResult$[ebp], -1
  00366	75 13		 jne	 SHORT $LN4@DataSocket

; 137  : 		{
; 138  : 			if (WSAGetLastError() != WSAEWOULDBLOCK)

  00368	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0036e	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00373	74 04		 je	 SHORT $LN3@DataSocket

; 139  : 			{
; 140  : 				return 0;

  00375	33 c0		 xor	 eax, eax
  00377	eb 23		 jmp	 SHORT $LN8@DataSocket
$LN3@DataSocket:

; 141  : 			}
; 142  : 		}
; 143  : 		else

  00379	eb 1a		 jmp	 SHORT $LN2@DataSocket
$LN4@DataSocket:

; 144  : 		{
; 145  : 			nDx += nResult;

  0037b	8b 45 f4	 mov	 eax, DWORD PTR _nDx$[ebp]
  0037e	03 45 f8	 add	 eax, DWORD PTR _nResult$[ebp]
  00381	89 45 f4	 mov	 DWORD PTR _nDx$[ebp], eax

; 146  : 			nLeft -=nResult;

  00384	8b 45 f0	 mov	 eax, DWORD PTR _nLeft$[ebp]
  00387	2b 45 f8	 sub	 eax, DWORD PTR _nResult$[ebp]
  0038a	89 45 f0	 mov	 DWORD PTR _nLeft$[ebp], eax

; 147  : 
; 148  : 			if ( nLeft <= 0)

  0038d	83 7d f0 00	 cmp	 DWORD PTR _nLeft$[ebp], 0
  00391	7f 02		 jg	 SHORT $LN2@DataSocket

; 149  : 			{
; 150  : 				break;

  00393	eb 02		 jmp	 SHORT $LN5@DataSocket
$LN2@DataSocket:

; 151  : 			}
; 152  : 		}
; 153  : 	}

  00395	eb a8		 jmp	 SHORT $LN6@DataSocket
$LN5@DataSocket:

; 154  : 
; 155  : 	return 1;

  00397	b8 01 00 00 00	 mov	 eax, 1
$LN8@DataSocket:

; 156  : }

  0039c	5f		 pop	 edi
  0039d	5e		 pop	 esi
  0039e	5b		 pop	 ebx
  0039f	8b e5		 mov	 esp, ebp
  003a1	5d		 pop	 ebp
  003a2	c2 0c 00	 ret	 12			; 0000000cH
?DataSocketSend@CwsGameServer@@QAEHIPADH@Z ENDP		; CwsGameServer::DataSocketSend
_TEXT	ENDS
PUBLIC	?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z	; CwsGameServer::FDWRITE_MsgDataSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_socket$ = 8						; size = 4
?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z PROC	; CwsGameServer::FDWRITE_MsgDataSend
; _this$ = ecx

; 159  : {

  003b0	55		 push	 ebp
  003b1	8b ec		 mov	 ebp, esp
  003b3	83 ec 44	 sub	 esp, 68			; 00000044H
  003b6	53		 push	 ebx
  003b7	56		 push	 esi
  003b8	57		 push	 edi
  003b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 160  : 	return 0;

  003bc	33 c0		 xor	 eax, eax

; 161  : }

  003be	5f		 pop	 edi
  003bf	5e		 pop	 esi
  003c0	5b		 pop	 ebx
  003c1	8b e5		 mov	 esp, ebp
  003c3	5d		 pop	 ebp
  003c4	c2 04 00	 ret	 4
?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z ENDP	; CwsGameServer::FDWRITE_MsgDataSend
_TEXT	ENDS
PUBLIC	?DataRecv@CwsGameServer@@QAEHI@Z		; CwsGameServer::DataRecv
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_socket$ = 8						; size = 4
?DataRecv@CwsGameServer@@QAEHI@Z PROC			; CwsGameServer::DataRecv
; _this$ = ecx

; 165  : {

  003d0	55		 push	 ebp
  003d1	8b ec		 mov	 ebp, esp
  003d3	83 ec 44	 sub	 esp, 68			; 00000044H
  003d6	53		 push	 ebx
  003d7	56		 push	 esi
  003d8	57		 push	 edi
  003d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 	return 0;

  003dc	33 c0		 xor	 eax, eax

; 167  : }

  003de	5f		 pop	 edi
  003df	5e		 pop	 esi
  003e0	5b		 pop	 ebx
  003e1	8b e5		 mov	 esp, ebp
  003e3	5d		 pop	 ebp
  003e4	c2 04 00	 ret	 4
?DataRecv@CwsGameServer@@QAEHI@Z ENDP			; CwsGameServer::DataRecv
_TEXT	ENDS
PUBLIC	?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z	; CwsGameServer::SetSocketBuffer
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_socket$ = 12						; size = 4
_ip$ = 16						; size = 4
?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z PROC	; CwsGameServer::SetSocketBuffer
; _this$ = ecx

; 170  : {

  003f0	55		 push	 ebp
  003f1	8b ec		 mov	 ebp, esp
  003f3	83 ec 44	 sub	 esp, 68			; 00000044H
  003f6	53		 push	 ebx
  003f7	56		 push	 esi
  003f8	57		 push	 edi
  003f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 	return 1;

  003fc	b8 01 00 00 00	 mov	 eax, 1

; 172  : }

  00401	5f		 pop	 edi
  00402	5e		 pop	 esi
  00403	5b		 pop	 ebx
  00404	8b e5		 mov	 esp, ebp
  00406	5d		 pop	 ebp
  00407	c2 0c 00	 ret	 12			; 0000000cH
?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z ENDP	; CwsGameServer::SetSocketBuffer
_TEXT	ENDS
END
