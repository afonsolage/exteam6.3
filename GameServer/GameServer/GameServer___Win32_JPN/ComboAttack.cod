; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ComboAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CComboAttack@@6B@				; CComboAttack::`vftable'
PUBLIC	??0CComboAttack@@QAE@XZ				; CComboAttack::CComboAttack
PUBLIC	??_R4CComboAttack@@6B@				; CComboAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCComboAttack@@@8			; CComboAttack `RTTI Type Descriptor'
PUBLIC	??_R3CComboAttack@@8				; CComboAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CComboAttack@@8				; CComboAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CComboAttack@@8			; CComboAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECComboAttack@@UAEPAXI@Z:PROC		; CComboAttack::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CComboAttack@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\comboattack.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CComboAttack@@8 DD FLAT:??_R0?AVCComboAttack@@@8 ; CComboAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CComboAttack@@8
rdata$r	SEGMENT
??_R2CComboAttack@@8 DD FLAT:??_R1A@?0A@EA@CComboAttack@@8 ; CComboAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CComboAttack@@8
rdata$r	SEGMENT
??_R3CComboAttack@@8 DD 00H				; CComboAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCComboAttack@@@8
_DATA	SEGMENT
??_R0?AVCComboAttack@@@8 DD FLAT:??_7type_info@@6B@	; CComboAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCComboAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CComboAttack@@6B@
rdata$r	SEGMENT
??_R4CComboAttack@@6B@ DD 00H				; CComboAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCComboAttack@@@8
	DD	FLAT:??_R3CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_7CComboAttack@@6B@
CONST	SEGMENT
??_7CComboAttack@@6B@ DD FLAT:??_R4CComboAttack@@6B@	; CComboAttack::`vftable'
	DD	FLAT:??_ECComboAttack@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CComboAttack@@QAE@XZ PROC				; CComboAttack::CComboAttack
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CComboAttack@@6B@

; 13   : 	return;
; 14   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CComboAttack@@QAE@XZ ENDP				; CComboAttack::CComboAttack
_TEXT	ENDS
PUBLIC	??1CComboAttack@@UAE@XZ				; CComboAttack::~CComboAttack
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCComboAttack@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCComboAttack@@UAEPAXI@Z PROC			; CComboAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CComboAttack@@UAE@XZ	; CComboAttack::~CComboAttack
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCComboAttack@@UAEPAXI@Z ENDP			; CComboAttack::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComboAttack@@UAE@XZ PROC				; CComboAttack::~CComboAttack
; _this$ = ecx

; 17   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CComboAttack@@6B@

; 18   : 	return;
; 19   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CComboAttack@@UAE@XZ ENDP				; CComboAttack::~CComboAttack
_TEXT	ENDS
PUBLIC	?GetSkillPos@CComboAttack@@AAEHHH@Z		; CComboAttack::GetSkillPos
EXTRN	?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	?Main@ComboCustom@@QAEHHH@Z:PROC		; ComboCustom::Main
EXTRN	?g_ComboCustom@@3VComboCustom@@A:BYTE		; g_ComboCustom
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv141 = -76						; size = 4
_Result$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_skillnum$ = 12						; size = 4
?GetSkillPos@CComboAttack@@AAEHHH@Z PROC		; CComboAttack::GetSkillPos
; _this$ = ecx

; 22   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : #if(DEV_COMBO_CUSTOM==TRUE)
; 24   : 	//LogAddC(2, "skillnum: %d", skillnum);
; 25   : 	int Result = g_ComboCustom.Main(aIndex, skillnum);

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00053	51		 push	 ecx
  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ComboCustom@@3VComboCustom@@A ; g_ComboCustom
  00059	e8 00 00 00 00	 call	 ?Main@ComboCustom@@QAEHHH@Z ; ComboCustom::Main
  0005e	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax

; 26   : 	if(Result != -2)

  00061	83 7d f8 fe	 cmp	 DWORD PTR _Result$[ebp], -2 ; fffffffeH
  00065	74 08		 je	 SHORT $LN18@GetSkillPo

; 27   : 	{
; 28   : 		return Result;

  00067	8b 45 f8	 mov	 eax, DWORD PTR _Result$[ebp]
  0006a	e9 3e 01 00 00	 jmp	 $LN19@GetSkillPo
$LN18@GetSkillPo:

; 29   : 	}
; 30   : #endif
; 31   : 
; 32   : 	if(		g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 326	//-> Cyclone
; 33   : 		||	g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 327	//-> Slash
; 34   : 		||	g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 328	//-> Falling Slash
; 35   : 		||	g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 329 )	//-> Lunge	

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  00072	50		 push	 eax
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00078	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  0007d	3d 46 01 00 00	 cmp	 eax, 326		; 00000146H
  00082	74 3f		 je	 SHORT $LN16@GetSkillPo
  00084	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  00087	50		 push	 eax
  00088	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0008d	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00092	3d 47 01 00 00	 cmp	 eax, 327		; 00000147H
  00097	74 2a		 je	 SHORT $LN16@GetSkillPo
  00099	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  0009c	50		 push	 eax
  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000a2	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  000a7	3d 48 01 00 00	 cmp	 eax, 328		; 00000148H
  000ac	74 15		 je	 SHORT $LN16@GetSkillPo
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  000b1	50		 push	 eax
  000b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000b7	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  000bc	3d 49 01 00 00	 cmp	 eax, 329		; 00000149H
  000c1	75 0c		 jne	 SHORT $LN17@GetSkillPo
$LN16@GetSkillPo:

; 36   : 	{
; 37   : 		return 0;

  000c3	33 c0		 xor	 eax, eax
  000c5	e9 e3 00 00 00	 jmp	 $LN19@GetSkillPo

; 38   : 	}
; 39   : 	else if(	g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 330

  000ca	e9 a3 00 00 00	 jmp	 $LN15@GetSkillPo
$LN17@GetSkillPo:

; 40   : 		||		g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 332 )	//-> Twisting

  000cf	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  000d2	50		 push	 eax
  000d3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000d8	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  000dd	3d 4a 01 00 00	 cmp	 eax, 330		; 0000014aH
  000e2	74 15		 je	 SHORT $LN13@GetSkillPo
  000e4	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  000e7	50		 push	 eax
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000ed	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  000f2	3d 4c 01 00 00	 cmp	 eax, 332		; 0000014cH
  000f7	75 0c		 jne	 SHORT $LN14@GetSkillPo
$LN13@GetSkillPo:

; 41   : 	{
; 42   : 		return 1;

  000f9	b8 01 00 00 00	 mov	 eax, 1
  000fe	e9 aa 00 00 00	 jmp	 $LN19@GetSkillPo

; 43   : 	}
; 44   : 	else if( g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 333 

  00103	eb 6d		 jmp	 SHORT $LN15@GetSkillPo
$LN14@GetSkillPo:

; 45   : 		|| g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 331 )	//-> Rageful Blow

  00105	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  00108	50		 push	 eax
  00109	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0010e	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00113	3d 4d 01 00 00	 cmp	 eax, 333		; 0000014dH
  00118	74 15		 je	 SHORT $LN10@GetSkillPo
  0011a	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  0011d	50		 push	 eax
  0011e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00123	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00128	3d 4b 01 00 00	 cmp	 eax, 331		; 0000014bH
  0012d	75 09		 jne	 SHORT $LN11@GetSkillPo
$LN10@GetSkillPo:

; 46   : 	{
; 47   : 		return 1;

  0012f	b8 01 00 00 00	 mov	 eax, 1
  00134	eb 77		 jmp	 SHORT $LN19@GetSkillPo
  00136	eb 3a		 jmp	 SHORT $LN15@GetSkillPo
$LN11@GetSkillPo:

; 48   : 	}
; 49   : 	else if( g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 336 )	//-> Slash *

  00138	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  0013b	50		 push	 eax
  0013c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00141	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00146	3d 50 01 00 00	 cmp	 eax, 336		; 00000150H
  0014b	75 09		 jne	 SHORT $LN8@GetSkillPo

; 50   : 	{
; 51   : 		return 1;

  0014d	b8 01 00 00 00	 mov	 eax, 1
  00152	eb 59		 jmp	 SHORT $LN19@GetSkillPo
  00154	eb 1c		 jmp	 SHORT $LN15@GetSkillPo
$LN8@GetSkillPo:

; 52   : 	}
; 53   : 	else if( g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 337 )	//-> Strike Of Destruction

  00156	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  00159	50		 push	 eax
  0015a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0015f	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00164	3d 51 01 00 00	 cmp	 eax, 337		; 00000151H
  00169	75 07		 jne	 SHORT $LN15@GetSkillPo

; 54   : 	{
; 55   : 		return 1;

  0016b	b8 01 00 00 00	 mov	 eax, 1
  00170	eb 3b		 jmp	 SHORT $LN19@GetSkillPo
$LN15@GetSkillPo:

; 56   : 	}
; 57   : 
; 58   : 	// ----
; 59   : 	switch(skillnum)

  00172	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  00175	89 45 b4	 mov	 DWORD PTR tv141[ebp], eax
  00178	8b 4d b4	 mov	 ecx, DWORD PTR tv141[ebp]
  0017b	83 e9 13	 sub	 ecx, 19			; 00000013H
  0017e	89 4d b4	 mov	 DWORD PTR tv141[ebp], ecx
  00181	81 7d b4 d5 00
	00 00		 cmp	 DWORD PTR tv141[ebp], 213 ; 000000d5H
  00188	77 20		 ja	 SHORT $LN1@GetSkillPo
  0018a	8b 55 b4	 mov	 edx, DWORD PTR tv141[ebp]
  0018d	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN21@GetSkillPo[edx]
  00194	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@GetSkillPo[eax*4]
$LN3@GetSkillPo:

; 60   : 	{
; 61   : 	case 19:
; 62   : 	case 20:
; 63   : 	case 21:
; 64   : 	case 22:
; 65   : 	case 23:
; 66   : 		{
; 67   : 			return 0;

  0019b	33 c0		 xor	 eax, eax
  0019d	eb 0e		 jmp	 SHORT $LN19@GetSkillPo

; 68   : 		}
; 69   : 		break;

  0019f	eb 0c		 jmp	 SHORT $LN19@GetSkillPo
$LN2@GetSkillPo:

; 70   : 		// --
; 71   : 	case 41:
; 72   : 	case 42:
; 73   : 	case 43:
; 74   : 	case 232:
; 75   : 		{
; 76   : 			return 1;

  001a1	b8 01 00 00 00	 mov	 eax, 1
  001a6	eb 05		 jmp	 SHORT $LN19@GetSkillPo

; 77   : 		}
; 78   : 		break;

  001a8	eb 03		 jmp	 SHORT $LN19@GetSkillPo
$LN1@GetSkillPo:

; 79   : 		// --
; 80   : 	default:
; 81   : 		{
; 82   : 			return -1;

  001aa	83 c8 ff	 or	 eax, -1
$LN19@GetSkillPo:

; 83   : 		}
; 84   : 		break;
; 85   : 	}
; 86   : }

  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	5b		 pop	 ebx
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c2 08 00	 ret	 8
  001b6	8b ff		 npad	 2
$LN22@GetSkillPo:
  001b8	00 00 00 00	 DD	 $LN3@GetSkillPo
  001bc	00 00 00 00	 DD	 $LN2@GetSkillPo
  001c0	00 00 00 00	 DD	 $LN1@GetSkillPo
$LN21@GetSkillPo:
  001c4	00		 DB	 0
  001c5	00		 DB	 0
  001c6	00		 DB	 0
  001c7	00		 DB	 0
  001c8	00		 DB	 0
  001c9	02		 DB	 2
  001ca	02		 DB	 2
  001cb	02		 DB	 2
  001cc	02		 DB	 2
  001cd	02		 DB	 2
  001ce	02		 DB	 2
  001cf	02		 DB	 2
  001d0	02		 DB	 2
  001d1	02		 DB	 2
  001d2	02		 DB	 2
  001d3	02		 DB	 2
  001d4	02		 DB	 2
  001d5	02		 DB	 2
  001d6	02		 DB	 2
  001d7	02		 DB	 2
  001d8	02		 DB	 2
  001d9	02		 DB	 2
  001da	01		 DB	 1
  001db	01		 DB	 1
  001dc	01		 DB	 1
  001dd	02		 DB	 2
  001de	02		 DB	 2
  001df	02		 DB	 2
  001e0	02		 DB	 2
  001e1	02		 DB	 2
  001e2	02		 DB	 2
  001e3	02		 DB	 2
  001e4	02		 DB	 2
  001e5	02		 DB	 2
  001e6	02		 DB	 2
  001e7	02		 DB	 2
  001e8	02		 DB	 2
  001e9	02		 DB	 2
  001ea	02		 DB	 2
  001eb	02		 DB	 2
  001ec	02		 DB	 2
  001ed	02		 DB	 2
  001ee	02		 DB	 2
  001ef	02		 DB	 2
  001f0	02		 DB	 2
  001f1	02		 DB	 2
  001f2	02		 DB	 2
  001f3	02		 DB	 2
  001f4	02		 DB	 2
  001f5	02		 DB	 2
  001f6	02		 DB	 2
  001f7	02		 DB	 2
  001f8	02		 DB	 2
  001f9	02		 DB	 2
  001fa	02		 DB	 2
  001fb	02		 DB	 2
  001fc	02		 DB	 2
  001fd	02		 DB	 2
  001fe	02		 DB	 2
  001ff	02		 DB	 2
  00200	02		 DB	 2
  00201	02		 DB	 2
  00202	02		 DB	 2
  00203	02		 DB	 2
  00204	02		 DB	 2
  00205	02		 DB	 2
  00206	02		 DB	 2
  00207	02		 DB	 2
  00208	02		 DB	 2
  00209	02		 DB	 2
  0020a	02		 DB	 2
  0020b	02		 DB	 2
  0020c	02		 DB	 2
  0020d	02		 DB	 2
  0020e	02		 DB	 2
  0020f	02		 DB	 2
  00210	02		 DB	 2
  00211	02		 DB	 2
  00212	02		 DB	 2
  00213	02		 DB	 2
  00214	02		 DB	 2
  00215	02		 DB	 2
  00216	02		 DB	 2
  00217	02		 DB	 2
  00218	02		 DB	 2
  00219	02		 DB	 2
  0021a	02		 DB	 2
  0021b	02		 DB	 2
  0021c	02		 DB	 2
  0021d	02		 DB	 2
  0021e	02		 DB	 2
  0021f	02		 DB	 2
  00220	02		 DB	 2
  00221	02		 DB	 2
  00222	02		 DB	 2
  00223	02		 DB	 2
  00224	02		 DB	 2
  00225	02		 DB	 2
  00226	02		 DB	 2
  00227	02		 DB	 2
  00228	02		 DB	 2
  00229	02		 DB	 2
  0022a	02		 DB	 2
  0022b	02		 DB	 2
  0022c	02		 DB	 2
  0022d	02		 DB	 2
  0022e	02		 DB	 2
  0022f	02		 DB	 2
  00230	02		 DB	 2
  00231	02		 DB	 2
  00232	02		 DB	 2
  00233	02		 DB	 2
  00234	02		 DB	 2
  00235	02		 DB	 2
  00236	02		 DB	 2
  00237	02		 DB	 2
  00238	02		 DB	 2
  00239	02		 DB	 2
  0023a	02		 DB	 2
  0023b	02		 DB	 2
  0023c	02		 DB	 2
  0023d	02		 DB	 2
  0023e	02		 DB	 2
  0023f	02		 DB	 2
  00240	02		 DB	 2
  00241	02		 DB	 2
  00242	02		 DB	 2
  00243	02		 DB	 2
  00244	02		 DB	 2
  00245	02		 DB	 2
  00246	02		 DB	 2
  00247	02		 DB	 2
  00248	02		 DB	 2
  00249	02		 DB	 2
  0024a	02		 DB	 2
  0024b	02		 DB	 2
  0024c	02		 DB	 2
  0024d	02		 DB	 2
  0024e	02		 DB	 2
  0024f	02		 DB	 2
  00250	02		 DB	 2
  00251	02		 DB	 2
  00252	02		 DB	 2
  00253	02		 DB	 2
  00254	02		 DB	 2
  00255	02		 DB	 2
  00256	02		 DB	 2
  00257	02		 DB	 2
  00258	02		 DB	 2
  00259	02		 DB	 2
  0025a	02		 DB	 2
  0025b	02		 DB	 2
  0025c	02		 DB	 2
  0025d	02		 DB	 2
  0025e	02		 DB	 2
  0025f	02		 DB	 2
  00260	02		 DB	 2
  00261	02		 DB	 2
  00262	02		 DB	 2
  00263	02		 DB	 2
  00264	02		 DB	 2
  00265	02		 DB	 2
  00266	02		 DB	 2
  00267	02		 DB	 2
  00268	02		 DB	 2
  00269	02		 DB	 2
  0026a	02		 DB	 2
  0026b	02		 DB	 2
  0026c	02		 DB	 2
  0026d	02		 DB	 2
  0026e	02		 DB	 2
  0026f	02		 DB	 2
  00270	02		 DB	 2
  00271	02		 DB	 2
  00272	02		 DB	 2
  00273	02		 DB	 2
  00274	02		 DB	 2
  00275	02		 DB	 2
  00276	02		 DB	 2
  00277	02		 DB	 2
  00278	02		 DB	 2
  00279	02		 DB	 2
  0027a	02		 DB	 2
  0027b	02		 DB	 2
  0027c	02		 DB	 2
  0027d	02		 DB	 2
  0027e	02		 DB	 2
  0027f	02		 DB	 2
  00280	02		 DB	 2
  00281	02		 DB	 2
  00282	02		 DB	 2
  00283	02		 DB	 2
  00284	02		 DB	 2
  00285	02		 DB	 2
  00286	02		 DB	 2
  00287	02		 DB	 2
  00288	02		 DB	 2
  00289	02		 DB	 2
  0028a	02		 DB	 2
  0028b	02		 DB	 2
  0028c	02		 DB	 2
  0028d	02		 DB	 2
  0028e	02		 DB	 2
  0028f	02		 DB	 2
  00290	02		 DB	 2
  00291	02		 DB	 2
  00292	02		 DB	 2
  00293	02		 DB	 2
  00294	02		 DB	 2
  00295	02		 DB	 2
  00296	02		 DB	 2
  00297	02		 DB	 2
  00298	02		 DB	 2
  00299	01		 DB	 1
?GetSkillPos@CComboAttack@@AAEHHH@Z ENDP		; CComboAttack::GetSkillPos
_TEXT	ENDS
PUBLIC	?CheckCombo@CComboAttack@@QAEHHH@Z		; CComboAttack::CheckCombo
EXTRN	?Init@ComboSkillData@@QAEXXZ:PROC		; ComboSkillData::Init
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Time$220321 = -16					; size = 4
_sp$220316 = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_skillnum$ = 12						; size = 4
?CheckCombo@CComboAttack@@QAEHHH@Z PROC			; CComboAttack::CheckCombo
; _this$ = ecx

; 89   : {

  002a0	55		 push	 ebp
  002a1	8b ec		 mov	 ebp, esp
  002a3	83 ec 50	 sub	 esp, 80			; 00000050H
  002a6	53		 push	 ebx
  002a7	56		 push	 esi
  002a8	57		 push	 edi
  002a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 	LPOBJ lpObj = &gObj[aIndex];

  002ac	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002af	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  002b5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002bb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 91   : 
; 92   : #if(DEV_COMBO_CUSTOM==TRUE)
; 93   : 	if( lpObj->Class == CLASS_KNIGHT && lpObj->ComboSkillquestClear == true || 
; 94   : 		lpObj->Class == CLASS_WIZARD && lpObj->PlusStatQuestClear == true ||
; 95   : 		lpObj->Class == CLASS_ELF && lpObj->PlusStatQuestClear == true ||
; 96   : 		lpObj->Class == CLASS_MAGUMSA ||
; 97   : 		lpObj->Class == CLASS_DARKLORD ||
; 98   : 		lpObj->Class == CLASS_SUMMONER && lpObj->PlusStatQuestClear == true ||
; 99   : 		lpObj->Class == CLASS_MONK )

  002be	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002c1	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  002c8	83 f9 01	 cmp	 ecx, 1
  002cb	75 13		 jne	 SHORT $LN14@CheckCombo
  002cd	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002d0	0f b6 88 a6 00
	00 00		 movzx	 ecx, BYTE PTR [eax+166]
  002d7	83 f9 01	 cmp	 ecx, 1
  002da	0f 84 8a 00 00
	00		 je	 $LN15@CheckCombo
$LN14@CheckCombo:
  002e0	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002e3	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  002ea	85 c9		 test	 ecx, ecx
  002ec	75 0f		 jne	 SHORT $LN13@CheckCombo
  002ee	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002f1	0f b6 88 a5 00
	00 00		 movzx	 ecx, BYTE PTR [eax+165]
  002f8	83 f9 01	 cmp	 ecx, 1
  002fb	74 6d		 je	 SHORT $LN15@CheckCombo
$LN13@CheckCombo:
  002fd	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00300	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00307	83 f9 02	 cmp	 ecx, 2
  0030a	75 0f		 jne	 SHORT $LN12@CheckCombo
  0030c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0030f	0f b6 88 a5 00
	00 00		 movzx	 ecx, BYTE PTR [eax+165]
  00316	83 f9 01	 cmp	 ecx, 1
  00319	74 4f		 je	 SHORT $LN15@CheckCombo
$LN12@CheckCombo:
  0031b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0031e	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00325	83 f9 03	 cmp	 ecx, 3
  00328	74 40		 je	 SHORT $LN15@CheckCombo
  0032a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0032d	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00334	83 f9 04	 cmp	 ecx, 4
  00337	74 31		 je	 SHORT $LN15@CheckCombo
  00339	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0033c	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00343	83 f9 05	 cmp	 ecx, 5
  00346	75 0f		 jne	 SHORT $LN11@CheckCombo
  00348	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0034b	0f b6 88 a5 00
	00 00		 movzx	 ecx, BYTE PTR [eax+165]
  00352	83 f9 01	 cmp	 ecx, 1
  00355	74 13		 je	 SHORT $LN15@CheckCombo
$LN11@CheckCombo:
  00357	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0035a	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00361	83 f9 06	 cmp	 ecx, 6
  00364	0f 85 47 01 00
	00		 jne	 $LN16@CheckCombo
$LN15@CheckCombo:

; 100  : #else
; 101  : 	if ( lpObj->ComboSkillquestClear  != false )
; 102  : #endif
; 103  : 	{
; 104  : 		int sp = this->GetSkillPos(aIndex,skillnum);

  0036a	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  0036d	50		 push	 eax
  0036e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00371	51		 push	 ecx
  00372	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00375	e8 00 00 00 00	 call	 ?GetSkillPos@CComboAttack@@AAEHHH@Z ; CComboAttack::GetSkillPos
  0037a	89 45 f4	 mov	 DWORD PTR _sp$220316[ebp], eax

; 105  : 
; 106  : 		if ( sp == 0 )

  0037d	83 7d f4 00	 cmp	 DWORD PTR _sp$220316[ebp], 0
  00381	75 34		 jne	 SHORT $LN10@CheckCombo

; 107  : 		{
; 108  : 			lpObj->comboSkill.ProgressIndex  = 0;

  00383	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00386	c7 80 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+180], 0

; 109  : 			lpObj->comboSkill.dwTime = GetTickCount() + 3000;

  00390	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00396	05 b8 0b 00 00	 add	 eax, 3000		; 00000bb8H
  0039b	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0039e	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax

; 110  : 			lpObj->comboSkill.Skill[0]  = skillnum;

  003a4	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  003a7	66 8b 4d 0c	 mov	 cx, WORD PTR _skillnum$[ebp]
  003ab	66 89 88 ac 00
	00 00		 mov	 WORD PTR [eax+172], cx
  003b2	e9 fa 00 00 00	 jmp	 $LN16@CheckCombo
$LN10@CheckCombo:

; 111  : 		}
; 112  : 		else if ( sp == 1 )

  003b7	83 7d f4 01	 cmp	 DWORD PTR _sp$220316[ebp], 1
  003bb	0f 85 c9 00 00
	00		 jne	 $LN8@CheckCombo

; 113  : 		{
; 114  : 			if ( lpObj->comboSkill.Skill[0]  == 0xFF )

  003c1	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  003c4	0f bf 88 ac 00
	00 00		 movsx	 ecx, WORD PTR [eax+172]
  003cb	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  003d1	75 15		 jne	 SHORT $LN7@CheckCombo

; 115  : 			{
; 116  : 				lpObj->comboSkill.Init();

  003d3	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  003d6	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  003dc	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init

; 117  : 				return 0;

  003e1	33 c0		 xor	 eax, eax
  003e3	e9 cb 00 00 00	 jmp	 $LN17@CheckCombo
$LN7@CheckCombo:

; 118  : 			}
; 119  : 
; 120  : 			int Time =GetTickCount();

  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  003ee	89 45 f0	 mov	 DWORD PTR _Time$220321[ebp], eax

; 121  : 
; 122  : 			if (lpObj->comboSkill.dwTime < GetTickCount() )

  003f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  003f7	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  003fa	39 81 a8 00 00
	00		 cmp	 DWORD PTR [ecx+168], eax
  00400	73 15		 jae	 SHORT $LN6@CheckCombo

; 123  : 			{
; 124  : 				lpObj->comboSkill.Init();

  00402	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00405	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0040b	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init

; 125  : 				return 0;

  00410	33 c0		 xor	 eax, eax
  00412	e9 9c 00 00 00	 jmp	 $LN17@CheckCombo
$LN6@CheckCombo:

; 126  : 			}
; 127  : 
; 128  : 			if ( lpObj->comboSkill.ProgressIndex == 0 )

  00417	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0041a	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  00421	75 31		 jne	 SHORT $LN5@CheckCombo

; 129  : 			{
; 130  : 				lpObj->comboSkill.ProgressIndex = 1;

  00423	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00426	c7 80 b4 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+180], 1

; 131  : 				lpObj->comboSkill.dwTime = GetTickCount() + 3000;

  00430	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00436	05 b8 0b 00 00	 add	 eax, 3000		; 00000bb8H
  0043b	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0043e	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax

; 132  : 				lpObj->comboSkill.Skill[1] = skillnum;

  00444	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00447	66 8b 4d 0c	 mov	 cx, WORD PTR _skillnum$[ebp]
  0044b	66 89 88 ae 00
	00 00		 mov	 WORD PTR [eax+174], cx
  00452	eb 34		 jmp	 SHORT $LN4@CheckCombo
$LN5@CheckCombo:

; 133  : 			}
; 134  : 			else if ( lpObj->comboSkill.Skill[1]  != skillnum )

  00454	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00457	0f bf 88 ae 00
	00 00		 movsx	 ecx, WORD PTR [eax+174]
  0045e	3b 4d 0c	 cmp	 ecx, DWORD PTR _skillnum$[ebp]
  00461	74 17		 je	 SHORT $LN3@CheckCombo

; 135  : 			{
; 136  : 				lpObj->comboSkill.Init();

  00463	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00466	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0046c	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init

; 137  : 				return 1;

  00471	b8 01 00 00 00	 mov	 eax, 1
  00476	eb 3b		 jmp	 SHORT $LN17@CheckCombo

; 138  : 			}
; 139  : 			else

  00478	eb 0e		 jmp	 SHORT $LN4@CheckCombo
$LN3@CheckCombo:

; 140  : 			{
; 141  : 				lpObj->comboSkill.Init();

  0047a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0047d	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00483	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init
$LN4@CheckCombo:

; 142  : 			}
; 143  : 		}
; 144  : 		else

  00488	eb 27		 jmp	 SHORT $LN16@CheckCombo
$LN8@CheckCombo:

; 145  : 		{
; 146  : 			lpObj->comboSkill.ProgressIndex= -1;

  0048a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0048d	c7 80 b4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+180], -1

; 147  : 			lpObj->comboSkill.dwTime = 0;

  00497	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0049a	c7 80 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+168], 0

; 148  : 			lpObj->comboSkill.Skill[0] = -1;

  004a4	83 c8 ff	 or	 eax, -1
  004a7	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  004aa	66 89 81 ac 00
	00 00		 mov	 WORD PTR [ecx+172], ax
$LN16@CheckCombo:

; 149  : 		}
; 150  : 	}
; 151  : 
; 152  : 	return 0;

  004b1	33 c0		 xor	 eax, eax
$LN17@CheckCombo:

; 153  : }

  004b3	5f		 pop	 edi
  004b4	5e		 pop	 esi
  004b5	5b		 pop	 ebx
  004b6	8b e5		 mov	 esp, ebp
  004b8	5d		 pop	 ebp
  004b9	c2 08 00	 ret	 8
?CheckCombo@CComboAttack@@QAEHHH@Z ENDP			; CComboAttack::CheckCombo
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__EgComboAttack@@YAXXZ
text$yc	SEGMENT
??__EgComboAttack@@YAXXZ PROC				; `dynamic initializer for 'gComboAttack'', COMDAT

; 9    : CComboAttack gComboAttack;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gComboAttack@@3VCComboAttack@@A ; gComboAttack
  0000e	e8 00 00 00 00	 call	 ??0CComboAttack@@QAE@XZ	; CComboAttack::CComboAttack
  00013	68 00 00 00 00	 push	 OFFSET ??__FgComboAttack@@YAXXZ ; `dynamic atexit destructor for 'gComboAttack''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgComboAttack@@YAXXZ ENDP				; `dynamic initializer for 'gComboAttack''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FgComboAttack@@YAXXZ
text$yd	SEGMENT
??__FgComboAttack@@YAXXZ PROC				; `dynamic atexit destructor for 'gComboAttack'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gComboAttack@@3VCComboAttack@@A ; gComboAttack
  0000e	e8 00 00 00 00	 call	 ??1CComboAttack@@UAE@XZ	; CComboAttack::~CComboAttack
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgComboAttack@@YAXXZ ENDP				; `dynamic atexit destructor for 'gComboAttack''
text$yd	ENDS
PUBLIC	?gComboAttack@@3VCComboAttack@@A		; gComboAttack
_BSS	SEGMENT
?gComboAttack@@3VCComboAttack@@A DD 01H DUP (?)		; gComboAttack
_BSS	ENDS
CRT$XCU	SEGMENT
_gComboAttack$initializer$ DD FLAT:??__EgComboAttack@@YAXXZ
CRT$XCU	ENDS
END
