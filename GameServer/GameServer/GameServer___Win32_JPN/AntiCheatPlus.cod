; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\AntiCheatPlus.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?clear@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::clear
PUBLIC	?Init@AntiCheatPlus@@QAEXXZ			; AntiCheatPlus::Init
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\anticheatplus.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@AntiCheatPlus@@QAEXXZ PROC			; AntiCheatPlus::Init
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	ZeroMemory(&this->TitleName, sizeof(this->TitleName));

  0000c	68 00 40 00 00	 push	 16384			; 00004000H
  00011	6a 00		 push	 0
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	83 c0 14	 add	 eax, 20			; 00000014H
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _memset
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 24   : 	ZeroMemory(&this->ClassName, sizeof(this->ClassName));

  00022	68 00 40 00 00	 push	 16384			; 00004000H
  00027	6a 00		 push	 0
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	05 14 40 00 00	 add	 eax, 16404		; 00004014H
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _memset
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 25   : 	ZeroMemory(&this->InjectName, sizeof(this->InjectName));

  0003a	68 00 40 00 00	 push	 16384			; 00004000H
  0003f	6a 00		 push	 0
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	05 14 80 00 00	 add	 eax, 32788		; 00008014H
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _memset
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 26   : 	ZeroMemory(&this->ProcessName, sizeof(this->ProcessName));

  00052	68 00 40 00 00	 push	 16384			; 00004000H
  00057	6a 00		 push	 0
  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	05 14 c0 00 00	 add	 eax, 49172		; 0000c014H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memset
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 27   : 
; 28   : 	//ZeroMemory(&this->blockhdd, sizeof(this->blockhdd));
; 29   : 	this->blockhdd.clear();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	81 c1 2c 00 01
	00		 add	 ecx, 65580		; 0001002cH
  00073	e8 00 00 00 00	 call	 ?clear@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::clear

; 30   : #if(ANTI_CHEAT_PLUS_CRC)
; 31   : 	this->CrcData.clear();
; 32   : #endif
; 33   : 
; 34   : 	this->TitleCount = 0;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	c7 80 14 00 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+65556], 0

; 35   : 	this->ClassCount = 0;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 80 18 00 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+65560], 0

; 36   : 	this->InjectCount = 0;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	c7 80 1c 00 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+65564], 0

; 37   : 	this->ProcessCount = 0;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	c7 80 20 00 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+65568], 0

; 38   : 
; 39   : 	this->Enable = false;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000af	c6 00 00	 mov	 BYTE PTR [eax], 0

; 40   : 
; 41   : 	this->DumpActive = false;

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 42   : 	this->TitleActive = false;

  000b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 43   : 	this->ClassActive = false;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0

; 44   : 	this->InjectActive = false;

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 45   : 	this->ProcessActive = false;

  000ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0

; 46   : 	this->EliteActive = true;

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	c6 40 06 01	 mov	 BYTE PTR [eax+6], 1

; 47   : 	this->MultiWindows = true;

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	c6 40 07 01	 mov	 BYTE PTR [eax+7], 1

; 48   : #if(ANTI_CHEAT_PLUS_CRC)
; 49   : 	this->CRCActive = false;
; 50   : #endif
; 51   : 
; 52   : 	this->DumpTime = 10000;

  000e3	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 53   : 	this->TitleTime = 10000;

  000ef	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 54   : 	this->ClassTime = 10000;

  000fb	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  00100	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	66 89 41 0e	 mov	 WORD PTR [ecx+14], ax

; 55   : 	this->InjectTime = 10000;

  00107	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 56   : 	this->ProcessTime = 10000;

  00113	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H
  00118	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	66 89 41 12	 mov	 WORD PTR [ecx+18], ax

; 57   : }

  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
?Init@AntiCheatPlus@@QAEXXZ ENDP			; AntiCheatPlus::Init
_TEXT	ENDS
PUBLIC	?ReadBlockHdd@AntiCheatPlus@@QAEXPAD@Z		; AntiCheatPlus::ReadBlockHdd
PUBLIC	??_C@_0CE@CGPBJLBI@?4?4?2AntiCheat?2BlackList?2HDD_Data?4@ ; `string'
PUBLIC	??_C@_0CI@IMANMEJK@?4?4?2AntiCheat?2CheatBase?2ProcessCh@ ; `string'
PUBLIC	??_C@_0CH@HGOBGJCL@?4?4?2AntiCheat?2CheatBase?2InjectChe@ ; `string'
PUBLIC	??_C@_0CG@IDFNCNLL@?4?4?2AntiCheat?2CheatBase?2ClassChea@ ; `string'
PUBLIC	?Read@AntiCheatPlus@@QAEXHPAD@Z			; AntiCheatPlus::Read
PUBLIC	??_C@_0CG@EJHKLKEP@?4?4?2AntiCheat?2CheatBase?2TitleChea@ ; `string'
PUBLIC	?ReadConfig@AntiCheatPlus@@QAEXPAD@Z		; AntiCheatPlus::ReadConfig
PUBLIC	??_C@_0BP@FBLBMIMG@?4?4?2AntiCheat?2AntiCheatMain?4ini?$AA@ ; `string'
PUBLIC	?Load@AntiCheatPlus@@QAEXXZ			; AntiCheatPlus::Load
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT ??_C@_0CE@CGPBJLBI@?4?4?2AntiCheat?2BlackList?2HDD_Data?4@
CONST	SEGMENT
??_C@_0CE@CGPBJLBI@?4?4?2AntiCheat?2BlackList?2HDD_Data?4@ DB '..\AntiChe'
	DB	'at\BlackList\HDD_Data.txt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IMANMEJK@?4?4?2AntiCheat?2CheatBase?2ProcessCh@
CONST	SEGMENT
??_C@_0CI@IMANMEJK@?4?4?2AntiCheat?2CheatBase?2ProcessCh@ DB '..\AntiChea'
	DB	't\CheatBase\ProcessCheat.txt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HGOBGJCL@?4?4?2AntiCheat?2CheatBase?2InjectChe@
CONST	SEGMENT
??_C@_0CH@HGOBGJCL@?4?4?2AntiCheat?2CheatBase?2InjectChe@ DB '..\AntiChea'
	DB	't\CheatBase\InjectCheat.txt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IDFNCNLL@?4?4?2AntiCheat?2CheatBase?2ClassChea@
CONST	SEGMENT
??_C@_0CG@IDFNCNLL@?4?4?2AntiCheat?2CheatBase?2ClassChea@ DB '..\AntiChea'
	DB	't\CheatBase\ClassCheat.txt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EJHKLKEP@?4?4?2AntiCheat?2CheatBase?2TitleChea@
CONST	SEGMENT
??_C@_0CG@EJHKLKEP@?4?4?2AntiCheat?2CheatBase?2TitleChea@ DB '..\AntiChea'
	DB	't\CheatBase\TitleCheat.txt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FBLBMIMG@?4?4?2AntiCheat?2AntiCheatMain?4ini?$AA@
CONST	SEGMENT
??_C@_0BP@FBLBMIMG@?4?4?2AntiCheat?2AntiCheatMain?4ini?$AA@ DB '..\AntiCh'
	DB	'eat\AntiCheatMain.ini', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@AntiCheatPlus@@QAEXXZ PROC			; AntiCheatPlus::Load
; _this$ = ecx

; 61   : {

  00130	55		 push	 ebp
  00131	8b ec		 mov	 ebp, esp
  00133	83 ec 44	 sub	 esp, 68			; 00000044H
  00136	53		 push	 ebx
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	this->Init();

  0013c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	e8 00 00 00 00	 call	 ?Init@AntiCheatPlus@@QAEXXZ ; AntiCheatPlus::Init

; 63   : 
; 64   : 	if(!g_ExLicense.user.AntiCheatPlus)

  00144	0f b6 05 d6 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+214
  0014b	85 c0		 test	 eax, eax
  0014d	75 02		 jne	 SHORT $LN1@Load

; 65   : 	{
; 66   : 		return;

  0014f	eb 56		 jmp	 SHORT $LN2@Load
$LN1@Load:

; 67   : 	}
; 68   : 	
; 69   : 	this->ReadConfig("..\\AntiCheat\\AntiCheatMain.ini");

  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@FBLBMIMG@?4?4?2AntiCheat?2AntiCheatMain?4ini?$AA@
  00156	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00159	e8 00 00 00 00	 call	 ?ReadConfig@AntiCheatPlus@@QAEXPAD@Z ; AntiCheatPlus::ReadConfig

; 70   : 	this->Read(eTitleType, "..\\AntiCheat\\CheatBase\\TitleCheat.txt");

  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EJHKLKEP@?4?4?2AntiCheat?2CheatBase?2TitleChea@
  00163	6a 00		 push	 0
  00165	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00168	e8 00 00 00 00	 call	 ?Read@AntiCheatPlus@@QAEXHPAD@Z ; AntiCheatPlus::Read

; 71   : 	this->Read(eClassType, "..\\AntiCheat\\CheatBase\\ClassCheat.txt");

  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IDFNCNLL@?4?4?2AntiCheat?2CheatBase?2ClassChea@
  00172	6a 01		 push	 1
  00174	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	e8 00 00 00 00	 call	 ?Read@AntiCheatPlus@@QAEXHPAD@Z ; AntiCheatPlus::Read

; 72   : 	this->Read(eInjectType, "..\\AntiCheat\\CheatBase\\InjectCheat.txt");

  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@HGOBGJCL@?4?4?2AntiCheat?2CheatBase?2InjectChe@
  00181	6a 02		 push	 2
  00183	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	e8 00 00 00 00	 call	 ?Read@AntiCheatPlus@@QAEXHPAD@Z ; AntiCheatPlus::Read

; 73   : 	this->Read(eProcessType, "..\\AntiCheat\\CheatBase\\ProcessCheat.txt");

  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IMANMEJK@?4?4?2AntiCheat?2CheatBase?2ProcessCh@
  00190	6a 03		 push	 3
  00192	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	e8 00 00 00 00	 call	 ?Read@AntiCheatPlus@@QAEXHPAD@Z ; AntiCheatPlus::Read

; 74   : 
; 75   : 	this->ReadBlockHdd("..\\AntiCheat\\BlackList\\HDD_Data.txt");

  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CGPBJLBI@?4?4?2AntiCheat?2BlackList?2HDD_Data?4@
  0019f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a2	e8 00 00 00 00	 call	 ?ReadBlockHdd@AntiCheatPlus@@QAEXPAD@Z ; AntiCheatPlus::ReadBlockHdd
$LN2@Load:

; 76   : #if(ANTI_CHEAT_PLUS_CRC)
; 77   : 	this->ReadCRC("../AntiCheat/CheckFiles");
; 78   : #endif
; 79   : }

  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi
  001a9	5b		 pop	 ebx
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c3		 ret	 0
?Load@AntiCheatPlus@@QAEXXZ ENDP			; AntiCheatPlus::Load
_TEXT	ENDS
PUBLIC	??_C@_0BD@KCICPOKL@ScanItemDupeActive?$AA@	; `string'
PUBLIC	??_C@_0M@EABIGHCH@ProcessTime?$AA@		; `string'
PUBLIC	??_C@_0L@FOMAPHOD@InjectTime?$AA@		; `string'
PUBLIC	??_C@_09EMOAFKHF@ClassTime?$AA@			; `string'
PUBLIC	??_C@_09LDEHLHEF@TitleTime?$AA@			; `string'
PUBLIC	??_C@_08EMEDBAFJ@DumpTime?$AA@			; `string'
PUBLIC	??_C@_09DLKGEHKE@MaxWindow?$AA@			; `string'
PUBLIC	??_C@_0BA@LMFLAIEE@EnableMaxWindow?$AA@		; `string'
PUBLIC	??_C@_0N@MKAHFHFF@MultiWindows?$AA@		; `string'
PUBLIC	??_C@_0M@EJIIM@EliteActive?$AA@			; `string'
PUBLIC	??_C@_0O@PCLOFHMC@ProcessActive?$AA@		; `string'
PUBLIC	??_C@_0N@KNCHMIBE@InjectActive?$AA@		; `string'
PUBLIC	??_C@_0M@CCFLCIPN@ClassActive?$AA@		; `string'
PUBLIC	??_C@_0M@CDKGHPGM@TitleActive?$AA@		; `string'
PUBLIC	??_C@_0L@INGDOLHO@DumpActive?$AA@		; `string'
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_0BD@KCICPOKL@ScanItemDupeActive?$AA@
CONST	SEGMENT
??_C@_0BD@KCICPOKL@ScanItemDupeActive?$AA@ DB 'ScanItemDupeActive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EABIGHCH@ProcessTime?$AA@
CONST	SEGMENT
??_C@_0M@EABIGHCH@ProcessTime?$AA@ DB 'ProcessTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FOMAPHOD@InjectTime?$AA@
CONST	SEGMENT
??_C@_0L@FOMAPHOD@InjectTime?$AA@ DB 'InjectTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EMOAFKHF@ClassTime?$AA@
CONST	SEGMENT
??_C@_09EMOAFKHF@ClassTime?$AA@ DB 'ClassTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LDEHLHEF@TitleTime?$AA@
CONST	SEGMENT
??_C@_09LDEHLHEF@TitleTime?$AA@ DB 'TitleTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMEDBAFJ@DumpTime?$AA@
CONST	SEGMENT
??_C@_08EMEDBAFJ@DumpTime?$AA@ DB 'DumpTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DLKGEHKE@MaxWindow?$AA@
CONST	SEGMENT
??_C@_09DLKGEHKE@MaxWindow?$AA@ DB 'MaxWindow', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LMFLAIEE@EnableMaxWindow?$AA@
CONST	SEGMENT
??_C@_0BA@LMFLAIEE@EnableMaxWindow?$AA@ DB 'EnableMaxWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKAHFHFF@MultiWindows?$AA@
CONST	SEGMENT
??_C@_0N@MKAHFHFF@MultiWindows?$AA@ DB 'MultiWindows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EJIIM@EliteActive?$AA@
CONST	SEGMENT
??_C@_0M@EJIIM@EliteActive?$AA@ DB 'EliteActive', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PCLOFHMC@ProcessActive?$AA@
CONST	SEGMENT
??_C@_0O@PCLOFHMC@ProcessActive?$AA@ DB 'ProcessActive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KNCHMIBE@InjectActive?$AA@
CONST	SEGMENT
??_C@_0N@KNCHMIBE@InjectActive?$AA@ DB 'InjectActive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CCFLCIPN@ClassActive?$AA@
CONST	SEGMENT
??_C@_0M@CCFLCIPN@ClassActive?$AA@ DB 'ClassActive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CDKGHPGM@TitleActive?$AA@
CONST	SEGMENT
??_C@_0M@CDKGHPGM@TitleActive?$AA@ DB 'TitleActive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@INGDOLHO@DumpActive?$AA@
CONST	SEGMENT
??_C@_0L@INGDOLHO@DumpActive?$AA@ DB 'DumpActive', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_File$ = 8						; size = 4
?ReadConfig@AntiCheatPlus@@QAEXPAD@Z PROC		; AntiCheatPlus::ReadConfig
; _this$ = ecx

; 83   : {

  001b0	55		 push	 ebp
  001b1	8b ec		 mov	 ebp, esp
  001b3	83 ec 44	 sub	 esp, 68			; 00000044H
  001b6	53		 push	 ebx
  001b7	56		 push	 esi
  001b8	57		 push	 edi
  001b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 84   : 	this->Enable = GetPrivateProfileInt("ExTeam", "Enable", 0, File);

  001bc	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  001bf	50		 push	 eax
  001c0	6a 00		 push	 0
  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  001cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  001d2	85 c0		 test	 eax, eax
  001d4	0f 95 c1	 setne	 cl
  001d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001da	88 0a		 mov	 BYTE PTR [edx], cl

; 85   : 
; 86   : 	this->DumpActive = GetPrivateProfileInt("ExTeam", "DumpActive", 0, File);

  001dc	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  001df	50		 push	 eax
  001e0	6a 00		 push	 0
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@INGDOLHO@DumpActive?$AA@
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  001f2	85 c0		 test	 eax, eax
  001f4	0f 95 c1	 setne	 cl
  001f7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001fa	88 4a 01	 mov	 BYTE PTR [edx+1], cl

; 87   : 	this->TitleActive = GetPrivateProfileInt("ExTeam", "TitleActive", 0, File);

  001fd	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00200	50		 push	 eax
  00201	6a 00		 push	 0
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CDKGHPGM@TitleActive?$AA@
  00208	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00213	85 c0		 test	 eax, eax
  00215	0f 95 c1	 setne	 cl
  00218	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0021b	88 4a 02	 mov	 BYTE PTR [edx+2], cl

; 88   : 	this->ClassActive = GetPrivateProfileInt("ExTeam", "ClassActive", 0, File);

  0021e	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00221	50		 push	 eax
  00222	6a 00		 push	 0
  00224	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CCFLCIPN@ClassActive?$AA@
  00229	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00234	85 c0		 test	 eax, eax
  00236	0f 95 c1	 setne	 cl
  00239	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0023c	88 4a 03	 mov	 BYTE PTR [edx+3], cl

; 89   : 	this->InjectActive = GetPrivateProfileInt("ExTeam", "InjectActive", 0, File);

  0023f	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00242	50		 push	 eax
  00243	6a 00		 push	 0
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KNCHMIBE@InjectActive?$AA@
  0024a	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0024f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00255	85 c0		 test	 eax, eax
  00257	0f 95 c1	 setne	 cl
  0025a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0025d	88 4a 04	 mov	 BYTE PTR [edx+4], cl

; 90   : 	this->ProcessActive = GetPrivateProfileInt("ExTeam", "ProcessActive", 0, File);

  00260	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00263	50		 push	 eax
  00264	6a 00		 push	 0
  00266	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PCLOFHMC@ProcessActive?$AA@
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00270	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00276	85 c0		 test	 eax, eax
  00278	0f 95 c1	 setne	 cl
  0027b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0027e	88 4a 05	 mov	 BYTE PTR [edx+5], cl

; 91   : 	this->EliteActive  = GetPrivateProfileInt("ExTeam", "EliteActive", 0, File);

  00281	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00284	50		 push	 eax
  00285	6a 00		 push	 0
  00287	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EJIIM@EliteActive?$AA@
  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00297	85 c0		 test	 eax, eax
  00299	0f 95 c1	 setne	 cl
  0029c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0029f	88 4a 06	 mov	 BYTE PTR [edx+6], cl

; 92   : 	this->MultiWindows = GetPrivateProfileInt("ExTeam", "MultiWindows", 1, File);

  002a2	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  002a5	50		 push	 eax
  002a6	6a 01		 push	 1
  002a8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MKAHFHFF@MultiWindows?$AA@
  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  002b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  002b8	85 c0		 test	 eax, eax
  002ba	0f 95 c1	 setne	 cl
  002bd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002c0	88 4a 07	 mov	 BYTE PTR [edx+7], cl

; 93   : 
; 94   : 	this->m_EnableMaxWindow = GetPrivateProfileInt("ExTeam", "EnableMaxWindow", 0, File);

  002c3	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  002c6	50		 push	 eax
  002c7	6a 00		 push	 0
  002c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LMFLAIEE@EnableMaxWindow?$AA@
  002ce	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  002d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  002d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002dc	89 81 24 00 01
	00		 mov	 DWORD PTR [ecx+65572], eax

; 95   : 	this->m_MaxWindow = GetPrivateProfileInt("ExTeam", "MaxWindow", 100, File);

  002e2	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  002e5	50		 push	 eax
  002e6	6a 64		 push	 100			; 00000064H
  002e8	68 00 00 00 00	 push	 OFFSET ??_C@_09DLKGEHKE@MaxWindow?$AA@
  002ed	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  002f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  002f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002fb	89 81 28 00 01
	00		 mov	 DWORD PTR [ecx+65576], eax

; 96   : 	#if(ANTI_CHEAT_PLUS_CRC)
; 97   : 	this->CRCActive = GetPrivateProfileInt("ExTeam", "CheckFileActive", 0, File);
; 98   : 	#endif
; 99   : 	this->DumpTime = GetPrivateProfileInt("ExTeam", "DumpTime", 10000, File);

  00301	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00304	50		 push	 eax
  00305	68 10 27 00 00	 push	 10000			; 00002710H
  0030a	68 00 00 00 00	 push	 OFFSET ??_C@_08EMEDBAFJ@DumpTime?$AA@
  0030f	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00314	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0031a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0031d	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 100  : 	this->TitleTime = GetPrivateProfileInt("ExTeam", "TitleTime", 10000, File);

  00321	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00324	50		 push	 eax
  00325	68 10 27 00 00	 push	 10000			; 00002710H
  0032a	68 00 00 00 00	 push	 OFFSET ??_C@_09LDEHLHEF@TitleTime?$AA@
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00334	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0033a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033d	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 101  : 	this->ClassTime = GetPrivateProfileInt("ExTeam", "ClassTime", 10000, File);

  00341	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00344	50		 push	 eax
  00345	68 10 27 00 00	 push	 10000			; 00002710H
  0034a	68 00 00 00 00	 push	 OFFSET ??_C@_09EMOAFKHF@ClassTime?$AA@
  0034f	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0035a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035d	66 89 41 0e	 mov	 WORD PTR [ecx+14], ax

; 102  : 	this->InjectTime = GetPrivateProfileInt("ExTeam", "InjectTime", 10000, File);

  00361	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00364	50		 push	 eax
  00365	68 10 27 00 00	 push	 10000			; 00002710H
  0036a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FOMAPHOD@InjectTime?$AA@
  0036f	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00374	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0037a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0037d	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 103  : 	this->ProcessTime = GetPrivateProfileInt("ExTeam", "ProcessTime", 10000, File);

  00381	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00384	50		 push	 eax
  00385	68 10 27 00 00	 push	 10000			; 00002710H
  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EABIGHCH@ProcessTime?$AA@
  0038f	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00394	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0039a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0039d	66 89 41 12	 mov	 WORD PTR [ecx+18], ax

; 104  : 	#if(SCANER_ITEM_DUPE)
; 105  : 	this->ScanItemDupeActive = GetPrivateProfileInt("ExTeam", "ScanItemDupeActive", 0, File);

  003a1	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  003a4	50		 push	 eax
  003a5	6a 00		 push	 0
  003a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KCICPOKL@ScanItemDupeActive?$AA@
  003ac	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  003b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  003b7	85 c0		 test	 eax, eax
  003b9	0f 95 c1	 setne	 cl
  003bc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003bf	88 4a 08	 mov	 BYTE PTR [edx+8], cl

; 106  : 	#endif
; 107  : }

  003c2	5f		 pop	 edi
  003c3	5e		 pop	 esi
  003c4	5b		 pop	 ebx
  003c5	8b e5		 mov	 esp, ebp
  003c7	5d		 pop	 ebp
  003c8	c2 04 00	 ret	 4
?ReadConfig@AntiCheatPlus@@QAEXPAD@Z ENDP		; AntiCheatPlus::ReadConfig
_TEXT	ENDS
PUBLIC	??_C@_0CC@PDLFHDKE@?$FLAnti?9Cheat?$FN?5?$FLProcess?$FN?5Loaded?3?5?$CF@ ; `string'
PUBLIC	??_C@_0CF@IFBIOADN@?$FLAnti?9Cheat?$FN?5?$FLInject?5Dll?$FN?5Loaded@ ; `string'
PUBLIC	??_C@_0CH@IEOLOGBE@?$FLAnti?9Cheat?$FN?5?$FLClass?5Window?$FN?5Load@ ; `string'
PUBLIC	??_C@_0CH@KIGGEOIK@?$FLAnti?9Cheat?$FN?5?$FLTitle?5Window?$FN?5Load@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_fopen:PROC
_BSS	SEGMENT
_TokenString DB	06a4H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CC@PDLFHDKE@?$FLAnti?9Cheat?$FN?5?$FLProcess?$FN?5Loaded?3?5?$CF@
CONST	SEGMENT
??_C@_0CC@PDLFHDKE@?$FLAnti?9Cheat?$FN?5?$FLProcess?$FN?5Loaded?3?5?$CF@ DB '['
	DB	'Anti-Cheat] [Process] Loaded: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IFBIOADN@?$FLAnti?9Cheat?$FN?5?$FLInject?5Dll?$FN?5Loaded@
CONST	SEGMENT
??_C@_0CF@IFBIOADN@?$FLAnti?9Cheat?$FN?5?$FLInject?5Dll?$FN?5Loaded@ DB '['
	DB	'Anti-Cheat] [Inject Dll] Loaded: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IEOLOGBE@?$FLAnti?9Cheat?$FN?5?$FLClass?5Window?$FN?5Load@
CONST	SEGMENT
??_C@_0CH@IEOLOGBE@?$FLAnti?9Cheat?$FN?5?$FLClass?5Window?$FN?5Load@ DB '['
	DB	'Anti-Cheat] [Class Window] Loaded: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KIGGEOIK@?$FLAnti?9Cheat?$FN?5?$FLTitle?5Window?$FN?5Load@
CONST	SEGMENT
??_C@_0CH@KIGGEOIK@?$FLAnti?9Cheat?$FN?5?$FLTitle?5Window?$FN?5Load@ DB '['
	DB	'Anti-Cheat] [Title Window] Loaded: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_Token$227933 = -8					; size = 4
_this$ = -4						; size = 4
_type$ = 8						; size = 4
_File$ = 12						; size = 4
?Read@AntiCheatPlus@@QAEXHPAD@Z PROC			; AntiCheatPlus::Read
; _this$ = ecx

; 111  : {

  003d0	55		 push	 ebp
  003d1	8b ec		 mov	 ebp, esp
  003d3	83 ec 48	 sub	 esp, 72			; 00000048H
  003d6	53		 push	 ebx
  003d7	56		 push	 esi
  003d8	57		 push	 edi
  003d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 	SMDFile = fopen(File, "r");

  003dc	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  003e1	8b 45 0c	 mov	 eax, DWORD PTR _File$[ebp]
  003e4	50		 push	 eax
  003e5	e8 00 00 00 00	 call	 _fopen
  003ea	83 c4 08	 add	 esp, 8
  003ed	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 113  : 	if( SMDFile == NULL )

  003f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  003f9	75 05		 jne	 SHORT $LN16@Read

; 114  : 	{
; 115  : 		return;

  003fb	e9 19 02 00 00	 jmp	 $LN18@Read
$LN16@Read:

; 116  : 	}
; 117  : 	while(true)

  00400	b8 01 00 00 00	 mov	 eax, 1
  00405	85 c0		 test	 eax, eax
  00407	0f 84 7c 01 00
	00		 je	 $LN15@Read

; 118  : 	{
; 119  : 		SMDToken Token = GetToken();

  0040d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00412	89 45 f8	 mov	 DWORD PTR _Token$227933[ebp], eax

; 120  : 		if( Token == END || !strcmp(TokenString, "end") )

  00415	83 7d f8 02	 cmp	 DWORD PTR _Token$227933[ebp], 2
  00419	74 16		 je	 SHORT $LN13@Read
  0041b	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00420	68 00 00 00 00	 push	 OFFSET _TokenString
  00425	e8 00 00 00 00	 call	 _strcmp
  0042a	83 c4 08	 add	 esp, 8
  0042d	85 c0		 test	 eax, eax
  0042f	75 05		 jne	 SHORT $LN14@Read
$LN13@Read:

; 121  : 		{
; 122  : 			break;

  00431	e9 53 01 00 00	 jmp	 $LN15@Read
$LN14@Read:

; 123  : 		}
; 124  : 		if(type==eTitleType)

  00436	83 7d 08 00	 cmp	 DWORD PTR _type$[ebp], 0
  0043a	75 4c		 jne	 SHORT $LN12@Read

; 125  : 		{
; 126  : 			if(this->TitleCount >= MAX_AH_DB)

  0043c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0043f	81 b8 14 00 01
	00 00 01 00 00	 cmp	 DWORD PTR [eax+65556], 256 ; 00000100H
  00449	7c 05		 jl	 SHORT $LN11@Read

; 127  : 			{
; 128  : 				break;

  0044b	e9 39 01 00 00	 jmp	 $LN15@Read
$LN11@Read:

; 129  : 			}
; 130  : 			memcpy(this->TitleName[this->TitleCount],TokenString,sizeof(this->TitleName[this->ClassCount]));

  00450	6a 40		 push	 64			; 00000040H
  00452	68 00 00 00 00	 push	 OFFSET _TokenString
  00457	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0045a	8b 88 14 00 01
	00		 mov	 ecx, DWORD PTR [eax+65556]
  00460	c1 e1 06	 shl	 ecx, 6
  00463	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00466	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  0046a	50		 push	 eax
  0046b	e8 00 00 00 00	 call	 _memcpy
  00470	83 c4 0c	 add	 esp, 12			; 0000000cH

; 131  : 			this->TitleCount++;

  00473	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00476	8b 88 14 00 01
	00		 mov	 ecx, DWORD PTR [eax+65556]
  0047c	83 c1 01	 add	 ecx, 1
  0047f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00482	89 8a 14 00 01
	00		 mov	 DWORD PTR [edx+65556], ecx
$LN12@Read:

; 132  : 		}
; 133  : 		if(type==eClassType)

  00488	83 7d 08 01	 cmp	 DWORD PTR _type$[ebp], 1
  0048c	75 4f		 jne	 SHORT $LN10@Read

; 134  : 		{
; 135  : 			if(this->ClassCount >= MAX_AH_DB)

  0048e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00491	81 b8 18 00 01
	00 00 01 00 00	 cmp	 DWORD PTR [eax+65560], 256 ; 00000100H
  0049b	7c 05		 jl	 SHORT $LN9@Read

; 136  : 			{
; 137  : 				break;

  0049d	e9 e7 00 00 00	 jmp	 $LN15@Read
$LN9@Read:

; 138  : 			}
; 139  : 			memcpy(this->ClassName[this->ClassCount],TokenString,sizeof(this->ClassName[this->ClassCount]));

  004a2	6a 40		 push	 64			; 00000040H
  004a4	68 00 00 00 00	 push	 OFFSET _TokenString
  004a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004ac	8b 88 18 00 01
	00		 mov	 ecx, DWORD PTR [eax+65560]
  004b2	c1 e1 06	 shl	 ecx, 6
  004b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004b8	8d 84 0a 14 40
	00 00		 lea	 eax, DWORD PTR [edx+ecx+16404]
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 _memcpy
  004c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 140  : 			this->ClassCount++;

  004c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004cb	8b 88 18 00 01
	00		 mov	 ecx, DWORD PTR [eax+65560]
  004d1	83 c1 01	 add	 ecx, 1
  004d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004d7	89 8a 18 00 01
	00		 mov	 DWORD PTR [edx+65560], ecx
$LN10@Read:

; 141  : 		}
; 142  : 		if(type==eInjectType)

  004dd	83 7d 08 02	 cmp	 DWORD PTR _type$[ebp], 2
  004e1	75 4f		 jne	 SHORT $LN8@Read

; 143  : 		{
; 144  : 			if(this->InjectCount >= MAX_AH_DB)

  004e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004e6	81 b8 1c 00 01
	00 00 01 00 00	 cmp	 DWORD PTR [eax+65564], 256 ; 00000100H
  004f0	7c 05		 jl	 SHORT $LN7@Read

; 145  : 			{
; 146  : 				break;

  004f2	e9 92 00 00 00	 jmp	 $LN15@Read
$LN7@Read:

; 147  : 			}
; 148  : 			memcpy(this->InjectName[this->InjectCount],TokenString,sizeof(this->InjectName[this->InjectCount]));

  004f7	6a 40		 push	 64			; 00000040H
  004f9	68 00 00 00 00	 push	 OFFSET _TokenString
  004fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00501	8b 88 1c 00 01
	00		 mov	 ecx, DWORD PTR [eax+65564]
  00507	c1 e1 06	 shl	 ecx, 6
  0050a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0050d	8d 84 0a 14 80
	00 00		 lea	 eax, DWORD PTR [edx+ecx+32788]
  00514	50		 push	 eax
  00515	e8 00 00 00 00	 call	 _memcpy
  0051a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 149  : 			this->InjectCount++;

  0051d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00520	8b 88 1c 00 01
	00		 mov	 ecx, DWORD PTR [eax+65564]
  00526	83 c1 01	 add	 ecx, 1
  00529	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0052c	89 8a 1c 00 01
	00		 mov	 DWORD PTR [edx+65564], ecx
$LN8@Read:

; 150  : 		}
; 151  : 		if(type==eProcessType)

  00532	83 7d 08 03	 cmp	 DWORD PTR _type$[ebp], 3
  00536	75 4c		 jne	 SHORT $LN6@Read

; 152  : 		{
; 153  : 			if(this->ProcessCount >= MAX_AH_DB)

  00538	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0053b	81 b8 20 00 01
	00 00 01 00 00	 cmp	 DWORD PTR [eax+65568], 256 ; 00000100H
  00545	7c 02		 jl	 SHORT $LN5@Read

; 154  : 			{
; 155  : 				break;

  00547	eb 40		 jmp	 SHORT $LN15@Read
$LN5@Read:

; 156  : 			}
; 157  : 			memcpy(this->ProcessName[this->ProcessCount],TokenString,sizeof(this->ProcessName[this->ProcessCount]));

  00549	6a 40		 push	 64			; 00000040H
  0054b	68 00 00 00 00	 push	 OFFSET _TokenString
  00550	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00553	8b 88 20 00 01
	00		 mov	 ecx, DWORD PTR [eax+65568]
  00559	c1 e1 06	 shl	 ecx, 6
  0055c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0055f	8d 84 0a 14 c0
	00 00		 lea	 eax, DWORD PTR [edx+ecx+49172]
  00566	50		 push	 eax
  00567	e8 00 00 00 00	 call	 _memcpy
  0056c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 158  : 			this->ProcessCount++;

  0056f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00572	8b 88 20 00 01
	00		 mov	 ecx, DWORD PTR [eax+65568]
  00578	83 c1 01	 add	 ecx, 1
  0057b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0057e	89 8a 20 00 01
	00		 mov	 DWORD PTR [edx+65568], ecx
$LN6@Read:

; 159  : 		}
; 160  : 	}

  00584	e9 77 fe ff ff	 jmp	 $LN16@Read
$LN15@Read:

; 161  : 
; 162  : 	if(type==eTitleType)

  00589	83 7d 08 00	 cmp	 DWORD PTR _type$[ebp], 0
  0058d	75 18		 jne	 SHORT $LN4@Read

; 163  : 	{
; 164  : 		LogAdd("[Anti-Cheat] [Title Window] Loaded: %d", this->TitleCount);

  0058f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00592	8b 88 14 00 01
	00		 mov	 ecx, DWORD PTR [eax+65556]
  00598	51		 push	 ecx
  00599	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KIGGEOIK@?$FLAnti?9Cheat?$FN?5?$FLTitle?5Window?$FN?5Load@
  0059e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  005a4	83 c4 08	 add	 esp, 8
$LN4@Read:

; 165  : 	}
; 166  : 	if(type==eClassType)

  005a7	83 7d 08 01	 cmp	 DWORD PTR _type$[ebp], 1
  005ab	75 18		 jne	 SHORT $LN3@Read

; 167  : 	{
; 168  : 		LogAdd("[Anti-Cheat] [Class Window] Loaded: %d", this->ClassCount);

  005ad	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005b0	8b 88 18 00 01
	00		 mov	 ecx, DWORD PTR [eax+65560]
  005b6	51		 push	 ecx
  005b7	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IEOLOGBE@?$FLAnti?9Cheat?$FN?5?$FLClass?5Window?$FN?5Load@
  005bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  005c2	83 c4 08	 add	 esp, 8
$LN3@Read:

; 169  : 	}
; 170  : 	if(type==eInjectType)

  005c5	83 7d 08 02	 cmp	 DWORD PTR _type$[ebp], 2
  005c9	75 18		 jne	 SHORT $LN2@Read

; 171  : 	{
; 172  : 		LogAdd("[Anti-Cheat] [Inject Dll] Loaded: %d", this->InjectCount);

  005cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005ce	8b 88 1c 00 01
	00		 mov	 ecx, DWORD PTR [eax+65564]
  005d4	51		 push	 ecx
  005d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IFBIOADN@?$FLAnti?9Cheat?$FN?5?$FLInject?5Dll?$FN?5Loaded@
  005da	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  005e0	83 c4 08	 add	 esp, 8
$LN2@Read:

; 173  : 	}
; 174  : 	if(type==eProcessType)

  005e3	83 7d 08 03	 cmp	 DWORD PTR _type$[ebp], 3
  005e7	75 18		 jne	 SHORT $LN1@Read

; 175  : 	{
; 176  : 		LogAdd("[Anti-Cheat] [Process] Loaded: %d", this->ProcessCount);

  005e9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005ec	8b 88 20 00 01
	00		 mov	 ecx, DWORD PTR [eax+65568]
  005f2	51		 push	 ecx
  005f3	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PDLFHDKE@?$FLAnti?9Cheat?$FN?5?$FLProcess?$FN?5Loaded?3?5?$CF@
  005f8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  005fe	83 c4 08	 add	 esp, 8
$LN1@Read:

; 177  : 	}
; 178  : 
; 179  : 	fclose(SMDFile);

  00601	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00606	50		 push	 eax
  00607	e8 00 00 00 00	 call	 _fclose
  0060c	83 c4 04	 add	 esp, 4

; 180  : 	SMDFile = NULL;

  0060f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _SMDFile, 0
$LN18@Read:

; 181  : }

  00619	5f		 pop	 edi
  0061a	5e		 pop	 esi
  0061b	5b		 pop	 ebx
  0061c	8b e5		 mov	 esp, ebp
  0061e	5d		 pop	 ebp
  0061f	c2 08 00	 ret	 8
?Read@AntiCheatPlus@@QAEXHPAD@Z ENDP			; AntiCheatPlus::Read
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atol:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_dwTokenNumber DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript_ex.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -1780						; size = 4
_TempString$ = -1712					; size = 1700
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 27   : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp
  00633	81 ec f4 06 00
	00		 sub	 esp, 1780		; 000006f4H
  00639	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0063e	33 c5		 xor	 eax, ebp
  00640	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00643	53		 push	 ebx
  00644	56		 push	 esi
  00645	57		 push	 edi

; 28   : 	char ch;
; 29   : 	char* p;
; 30   : 	char TempString[1700];
; 31   : 
; 32   : 	TokenString[0]=0;

  00646	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 33   : 
; 34   : 	do
; 35   : 	{
; 36   : 		if ((ch=fgetc(SMDFile)) == -1)

  0064d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 _fgetc
  00658	83 c4 04	 add	 esp, 4
  0065b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0065e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00662	83 f9 ff	 cmp	 ecx, -1
  00665	75 0c		 jne	 SHORT $LN28@GetToken

; 37   : 		{
; 38   : 			return END;	// End of FILE (EOF)

  00667	b8 02 00 00 00	 mov	 eax, 2
  0066c	e9 11 03 00 00	 jmp	 $LN32@GetToken

; 39   : 		}
; 40   : 		else

  00671	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 41   : 		{	
; 42   : 			if (ch=='/')		// this is /

  00673	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00677	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0067a	75 52		 jne	 SHORT $LN22@GetToken

; 43   : 			{
; 44   : 				if((ch=fgetc(SMDFile)) == '/')

  0067c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00681	50		 push	 eax
  00682	e8 00 00 00 00	 call	 _fgetc
  00687	83 c4 04	 add	 esp, 4
  0068a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0068d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00691	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00694	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 45   : 				{
; 46   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00696	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0069a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0069d	74 1c		 je	 SHORT $LN23@GetToken
  0069f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006a3	83 f8 ff	 cmp	 eax, -1
  006a6	74 13		 je	 SHORT $LN23@GetToken

; 47   : 					{
; 48   : 						ch=fgetc(SMDFile);

  006a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006ad	50		 push	 eax
  006ae	e8 00 00 00 00	 call	 _fgetc
  006b3	83 c4 04	 add	 esp, 4
  006b6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 49   : 					}

  006b9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 50   : 	
; 51   : 					if (ch == -1)

  006bb	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006bf	83 f8 ff	 cmp	 eax, -1
  006c2	75 0a		 jne	 SHORT $LN22@GetToken

; 52   : 					{
; 53   : 						return END;	// End of FILE

  006c4	b8 02 00 00 00	 mov	 eax, 2
  006c9	e9 b4 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 54   : 					}
; 55   : 				}
; 56   : 			}
; 57   : 		}
; 58   : 	}
; 59   : 	while (isspace(ch) != 0);

  006ce	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006d2	50		 push	 eax
  006d3	e8 00 00 00 00	 call	 _isspace
  006d8	83 c4 04	 add	 esp, 4
  006db	85 c0		 test	 eax, eax
  006dd	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 60   : 
; 61   : 	
; 62   : 	switch(ch)

  006e3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006e7	89 85 0c f9 ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  006ed	8b 8d 0c f9 ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  006f3	83 e9 22	 sub	 ecx, 34			; 00000022H
  006f6	89 8d 0c f9 ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  006fc	83 bd 0c f9 ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00703	0f 87 bd 01 00
	00		 ja	 $LN6@GetToken
  00709	8b 95 0c f9 ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0070f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00716	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 63   : 	{
; 64   : 
; 65   : 	case 0x23:	// #
; 66   : 		return CurrentToken=COMMAND;

  0071d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00727	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0072c	e9 51 02 00 00	 jmp	 $LN32@GetToken

; 67   : 		break;

  00731	e9 4a 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 68   : 	
; 69   : 	case 0x3B:	// ;
; 70   : 		return CurrentToken=SEMICOLON;

  00736	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00740	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00745	e9 38 02 00 00	 jmp	 $LN32@GetToken

; 71   : 		break;

  0074a	e9 31 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 72   : 	
; 73   : 	case 0x2C:	// ,
; 74   : 
; 75   : 		return CurrentToken=COMMA;

  0074f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00759	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0075e	e9 1f 02 00 00	 jmp	 $LN32@GetToken

; 76   : 		break;

  00763	e9 18 02 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 77   : 	
; 78   : 	case 0x7B:	// {
; 79   : 		return CurrentToken = LP;

  00768	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00772	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00777	e9 06 02 00 00	 jmp	 $LN32@GetToken

; 80   : 		break;

  0077c	e9 ff 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 81   : 
; 82   : 	case 0x7D:	// }
; 83   : 		return CurrentToken = RP;

  00781	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0078b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00790	e9 ed 01 00 00	 jmp	 $LN32@GetToken

; 84   : 		break;

  00795	e9 e6 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 85   : 	// Nice Index Table :)	by Deathway
; 86   : 	// Numbers Case
; 87   : 	case 0x2D:	//-
; 88   : 	case 0x2E:	//.
; 89   : 	case '0':	//0
; 90   : 	case '1':	//1
; 91   : 	case '2':	//2
; 92   : 	case '3':	//3
; 93   : 	case '4':	//4		
; 94   : 	case '5':	//5
; 95   : 	case '6':	//6
; 96   : 	case '7':	//7
; 97   : 	case '8':	//8
; 98   : 	case '9':	//9
; 99   : 		ungetc(ch, SMDFile);

  0079a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0079f	50		 push	 eax
  007a0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007a4	51		 push	 ecx
  007a5	e8 00 00 00 00	 call	 _ungetc
  007aa	83 c4 08	 add	 esp, 8

; 100  : 		p = TempString;

  007ad	8d 85 50 f9 ff
	ff		 lea	 eax, DWORD PTR _TempString$[ebp]
  007b3	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 101  : 		
; 102  : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  007b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007bb	50		 push	 eax
  007bc	e8 00 00 00 00	 call	 _getc
  007c1	83 c4 04	 add	 esp, 4
  007c4	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  007c7	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007cb	83 f9 ff	 cmp	 ecx, -1
  007ce	74 36		 je	 SHORT $LN12@GetToken
  007d0	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007d4	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  007d7	74 1a		 je	 SHORT $LN11@GetToken
  007d9	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007dd	50		 push	 eax
  007de	e8 00 00 00 00	 call	 _isdigit
  007e3	83 c4 04	 add	 esp, 4
  007e6	85 c0		 test	 eax, eax
  007e8	75 09		 jne	 SHORT $LN11@GetToken
  007ea	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007ee	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  007f1	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 103  : 		{
; 104  : 			*p = ch;	// Construct a String

  007f3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007f6	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  007f9	88 08		 mov	 BYTE PTR [eax], cl

; 105  : 			p++;

  007fb	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007fe	83 c0 01	 add	 eax, 1
  00801	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 106  : 		}		

  00804	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 107  : 		*p = 0;

  00806	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00809	c6 00 00	 mov	 BYTE PTR [eax], 0

; 108  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  0080c	8d 85 50 f9 ff
	ff		 lea	 eax, DWORD PTR _TempString$[ebp]
  00812	50		 push	 eax
  00813	e8 00 00 00 00	 call	 _atof
  00818	83 c4 04	 add	 esp, 4
  0081b	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 109  : 		dwTokenNumber = (DWORD)atol(TempString);

  00821	8d 85 50 f9 ff
	ff		 lea	 eax, DWORD PTR _TempString$[ebp]
  00827	50		 push	 eax
  00828	e8 00 00 00 00	 call	 _atol
  0082d	83 c4 04	 add	 esp, 4
  00830	a3 00 00 00 00	 mov	 DWORD PTR _dwTokenNumber, eax

; 110  : 		return CurrentToken  = NUMBER ;

  00835	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  0083f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00844	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 111  : 		break;

  00849	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 112  : 
; 113  : 	case '\"':	// "	String Case
; 114  : 		p=&TokenString[0];

  0084e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 115  : 
; 116  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00855	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0085a	50		 push	 eax
  0085b	e8 00 00 00 00	 call	 _getc
  00860	83 c4 04	 add	 esp, 4
  00863	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00866	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0086a	83 f9 ff	 cmp	 ecx, -1
  0086d	74 1c		 je	 SHORT $LN8@GetToken
  0086f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00873	83 f8 22	 cmp	 eax, 34			; 00000022H
  00876	74 13		 je	 SHORT $LN8@GetToken

; 117  : 		{
; 118  : 			*p = ch;

  00878	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0087b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0087e	88 08		 mov	 BYTE PTR [eax], cl

; 119  : 			p++;

  00880	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00883	83 c0 01	 add	 eax, 1
  00886	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 120  : 		}

  00889	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 121  : 		if (ch != 0x22 )

  0088b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0088f	83 f8 22	 cmp	 eax, 34			; 00000022H
  00892	74 13		 je	 SHORT $LN7@GetToken

; 122  : 		{
; 123  : 			ungetc(ch, SMDFile);

  00894	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00899	50		 push	 eax
  0089a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0089e	51		 push	 ecx
  0089f	e8 00 00 00 00	 call	 _ungetc
  008a4	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 124  : 		}
; 125  : 		*p = 0;

  008a7	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008aa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 126  : 		return CurrentToken = NAME;

  008ad	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  008b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008bc	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 127  : 		break;

  008c1	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 128  : 
; 129  : 	default:	// Others
; 130  : 		if (isalpha(ch))

  008c6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008ca	50		 push	 eax
  008cb	e8 00 00 00 00	 call	 _isalpha
  008d0	83 c4 04	 add	 esp, 4
  008d3	85 c0		 test	 eax, eax
  008d5	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 131  : 		{
; 132  : 			p=&TokenString[0];

  008db	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 133  : 			*p=ch;

  008e2	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008e5	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  008e8	88 08		 mov	 BYTE PTR [eax], cl

; 134  : 			p++;

  008ea	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008ed	83 c0 01	 add	 eax, 1
  008f0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 135  : 
; 136  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  008f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008f8	50		 push	 eax
  008f9	e8 00 00 00 00	 call	 _getc
  008fe	83 c4 04	 add	 esp, 4
  00901	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00904	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00908	83 f9 ff	 cmp	 ecx, -1
  0090b	74 36		 je	 SHORT $LN3@GetToken
  0090d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00911	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00914	74 1a		 je	 SHORT $LN2@GetToken
  00916	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0091a	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  0091d	74 11		 je	 SHORT $LN2@GetToken
  0091f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00923	50		 push	 eax
  00924	e8 00 00 00 00	 call	 _isalnum
  00929	83 c4 04	 add	 esp, 4
  0092c	85 c0		 test	 eax, eax
  0092e	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 137  : 			{
; 138  : 				*p=ch;

  00930	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00933	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00936	88 08		 mov	 BYTE PTR [eax], cl

; 139  : 				p++;

  00938	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0093b	83 c0 01	 add	 eax, 1
  0093e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 140  : 			}

  00941	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 141  : 
; 142  : 			ungetc(ch, SMDFile);

  00943	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00948	50		 push	 eax
  00949	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0094d	51		 push	 ecx
  0094e	e8 00 00 00 00	 call	 _ungetc
  00953	83 c4 08	 add	 esp, 8

; 143  : 			*p=0;

  00956	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00959	c6 00 00	 mov	 BYTE PTR [eax], 0

; 144  : 			CurrentToken=NAME;

  0095c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 145  : 			return CurrentToken;

  00966	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0096b	eb 15		 jmp	 SHORT $LN32@GetToken

; 146  : 		}
; 147  : 		else

  0096d	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 148  : 		{
; 149  : 			return CurrentToken = SMD_ERROR; // '<'

  0096f	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  00979	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0097e	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 150  : 		}
; 151  : 		break;
; 152  : 
; 153  : 	}
; 154  : 
; 155  : 	return NAME;

  00980	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 156  : }

  00982	5f		 pop	 edi
  00983	5e		 pop	 esi
  00984	5b		 pop	 ebx
  00985	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00988	33 cd		 xor	 ecx, ebp
  0098a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0098f	8b e5		 mov	 esp, ebp
  00991	5d		 pop	 ebp
  00992	c3		 ret	 0
  00993	90		 npad	 1
$LN35@GetToken:
  00994	00 00 00 00	 DD	 $LN10@GetToken
  00998	00 00 00 00	 DD	 $LN19@GetToken
  0099c	00 00 00 00	 DD	 $LN17@GetToken
  009a0	00 00 00 00	 DD	 $LN14@GetToken
  009a4	00 00 00 00	 DD	 $LN18@GetToken
  009a8	00 00 00 00	 DD	 $LN16@GetToken
  009ac	00 00 00 00	 DD	 $LN15@GetToken
  009b0	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  009b4	00		 DB	 0
  009b5	01		 DB	 1
  009b6	07		 DB	 7
  009b7	07		 DB	 7
  009b8	07		 DB	 7
  009b9	07		 DB	 7
  009ba	07		 DB	 7
  009bb	07		 DB	 7
  009bc	07		 DB	 7
  009bd	07		 DB	 7
  009be	02		 DB	 2
  009bf	03		 DB	 3
  009c0	03		 DB	 3
  009c1	07		 DB	 7
  009c2	03		 DB	 3
  009c3	03		 DB	 3
  009c4	03		 DB	 3
  009c5	03		 DB	 3
  009c6	03		 DB	 3
  009c7	03		 DB	 3
  009c8	03		 DB	 3
  009c9	03		 DB	 3
  009ca	03		 DB	 3
  009cb	03		 DB	 3
  009cc	07		 DB	 7
  009cd	04		 DB	 4
  009ce	07		 DB	 7
  009cf	07		 DB	 7
  009d0	07		 DB	 7
  009d1	07		 DB	 7
  009d2	07		 DB	 7
  009d3	07		 DB	 7
  009d4	07		 DB	 7
  009d5	07		 DB	 7
  009d6	07		 DB	 7
  009d7	07		 DB	 7
  009d8	07		 DB	 7
  009d9	07		 DB	 7
  009da	07		 DB	 7
  009db	07		 DB	 7
  009dc	07		 DB	 7
  009dd	07		 DB	 7
  009de	07		 DB	 7
  009df	07		 DB	 7
  009e0	07		 DB	 7
  009e1	07		 DB	 7
  009e2	07		 DB	 7
  009e3	07		 DB	 7
  009e4	07		 DB	 7
  009e5	07		 DB	 7
  009e6	07		 DB	 7
  009e7	07		 DB	 7
  009e8	07		 DB	 7
  009e9	07		 DB	 7
  009ea	07		 DB	 7
  009eb	07		 DB	 7
  009ec	07		 DB	 7
  009ed	07		 DB	 7
  009ee	07		 DB	 7
  009ef	07		 DB	 7
  009f0	07		 DB	 7
  009f1	07		 DB	 7
  009f2	07		 DB	 7
  009f3	07		 DB	 7
  009f4	07		 DB	 7
  009f5	07		 DB	 7
  009f6	07		 DB	 7
  009f7	07		 DB	 7
  009f8	07		 DB	 7
  009f9	07		 DB	 7
  009fa	07		 DB	 7
  009fb	07		 DB	 7
  009fc	07		 DB	 7
  009fd	07		 DB	 7
  009fe	07		 DB	 7
  009ff	07		 DB	 7
  00a00	07		 DB	 7
  00a01	07		 DB	 7
  00a02	07		 DB	 7
  00a03	07		 DB	 7
  00a04	07		 DB	 7
  00a05	07		 DB	 7
  00a06	07		 DB	 7
  00a07	07		 DB	 7
  00a08	07		 DB	 7
  00a09	07		 DB	 7
  00a0a	07		 DB	 7
  00a0b	07		 DB	 7
  00a0c	07		 DB	 7
  00a0d	05		 DB	 5
  00a0e	07		 DB	 7
  00a0f	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXABUBlockHDD_DATA@@@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::push_back
PUBLIC	??_C@_02GMHACPFF@?$CFu?$AA@			; `string'
PUBLIC	??0BlockHDD_DATA@@QAE@XZ			; BlockHDD_DATA::BlockHDD_DATA
PUBLIC	__$ArrayPad$
EXTRN	_sscanf_s:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_02GMHACPFF@?$CFu?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\anticheatplus.cpp
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu?$AA@ DB '%u', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_List$227981 = -272					; size = 4
_Token$227978 = -268					; size = 4
_szHwnd$ = -264						; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?ReadBlockHdd@AntiCheatPlus@@QAEXPAD@Z PROC		; AntiCheatPlus::ReadBlockHdd
; _this$ = ecx

; 185  : {

  00a10	55		 push	 ebp
  00a11	8b ec		 mov	 ebp, esp
  00a13	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00a19	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00a1e	33 c5		 xor	 eax, ebp
  00a20	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00a23	53		 push	 ebx
  00a24	56		 push	 esi
  00a25	57		 push	 edi
  00a26	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 186  : 	char szHwnd[256] = { 0 };

  00a29	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _szHwnd$[ebp], 0
  00a30	68 ff 00 00 00	 push	 255			; 000000ffH
  00a35	6a 00		 push	 0
  00a37	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szHwnd$[ebp+1]
  00a3d	50		 push	 eax
  00a3e	e8 00 00 00 00	 call	 _memset
  00a43	83 c4 0c	 add	 esp, 12			; 0000000cH

; 187  : 
; 188  : 	SMDFile = fopen(filename, "r");

  00a46	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00a4b	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00a4e	50		 push	 eax
  00a4f	e8 00 00 00 00	 call	 _fopen
  00a54	83 c4 08	 add	 esp, 8
  00a57	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 189  : 
; 190  : 	if( SMDFile == NULL )

  00a5c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00a63	75 05		 jne	 SHORT $LN4@ReadBlockH

; 191  : 	{
; 192  : 		return;

  00a65	e9 aa 00 00 00	 jmp	 $LN6@ReadBlockH
$LN4@ReadBlockH:

; 193  : 	}
; 194  : 
; 195  : 	while(true)

  00a6a	b8 01 00 00 00	 mov	 eax, 1
  00a6f	85 c0		 test	 eax, eax
  00a71	0f 84 85 00 00
	00		 je	 $LN3@ReadBlockH

; 196  : 	{
; 197  : 		SMDToken Token = GetToken();

  00a77	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a7c	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _Token$227978[ebp], eax

; 198  : 
; 199  : 		if( Token == END || !strcmp(TokenString, "end") )

  00a82	83 bd f4 fe ff
	ff 02		 cmp	 DWORD PTR _Token$227978[ebp], 2
  00a89	74 16		 je	 SHORT $LN1@ReadBlockH
  00a8b	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00a90	68 00 00 00 00	 push	 OFFSET _TokenString
  00a95	e8 00 00 00 00	 call	 _strcmp
  00a9a	83 c4 08	 add	 esp, 8
  00a9d	85 c0		 test	 eax, eax
  00a9f	75 02		 jne	 SHORT $LN2@ReadBlockH
$LN1@ReadBlockH:

; 200  : 		{
; 201  : 			break;

  00aa1	eb 59		 jmp	 SHORT $LN3@ReadBlockH
$LN2@ReadBlockH:

; 202  : 		}
; 203  : 
; 204  : 		BlockHDD_DATA List;

  00aa3	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _List$227981[ebp]
  00aa9	e8 00 00 00 00	 call	 ??0BlockHDD_DATA@@QAE@XZ ; BlockHDD_DATA::BlockHDD_DATA

; 205  : 
; 206  : 		memcpy(szHwnd, TokenString, sizeof(szHwnd));

  00aae	68 00 01 00 00	 push	 256			; 00000100H
  00ab3	68 00 00 00 00	 push	 OFFSET _TokenString
  00ab8	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szHwnd$[ebp]
  00abe	50		 push	 eax
  00abf	e8 00 00 00 00	 call	 _memcpy
  00ac4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 207  : 
; 208  : 		sscanf_s(szHwnd, "%u", &List.hddid);

  00ac7	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _List$227981[ebp]
  00acd	50		 push	 eax
  00ace	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
  00ad3	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szHwnd$[ebp]
  00ad9	51		 push	 ecx
  00ada	e8 00 00 00 00	 call	 _sscanf_s
  00adf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 209  : 
; 210  : 		this->blockhdd.push_back(List);

  00ae2	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _List$227981[ebp]
  00ae8	50		 push	 eax
  00ae9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00aec	81 c1 2c 00 01
	00		 add	 ecx, 65580		; 0001002cH
  00af2	e8 00 00 00 00	 call	 ?push_back@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXABUBlockHDD_DATA@@@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::push_back

; 211  : 	}

  00af7	e9 6e ff ff ff	 jmp	 $LN4@ReadBlockH
$LN3@ReadBlockH:

; 212  : 
; 213  : 	fclose(SMDFile);

  00afc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b01	50		 push	 eax
  00b02	e8 00 00 00 00	 call	 _fclose
  00b07	83 c4 04	 add	 esp, 4

; 214  : 	SMDFile = NULL;

  00b0a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _SMDFile, 0
$LN6@ReadBlockH:

; 215  : }

  00b14	5f		 pop	 edi
  00b15	5e		 pop	 esi
  00b16	5b		 pop	 ebx
  00b17	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b1a	33 cd		 xor	 ecx, ebp
  00b1c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b21	8b e5		 mov	 esp, ebp
  00b23	5d		 pop	 ebp
  00b24	c2 04 00	 ret	 4
?ReadBlockHdd@AntiCheatPlus@@QAEXPAD@Z ENDP		; AntiCheatPlus::ReadBlockHdd
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\anticheatplus.h
_TEXT	ENDS
;	COMDAT ??0BlockHDD_DATA@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BlockHDD_DATA@@QAE@XZ PROC				; BlockHDD_DATA::BlockHDD_DATA, COMDAT
; _this$ = ecx

; 98   : 	BlockHDD_DATA()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	{
; 100  : 		this->hddid = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 101  : 	}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0BlockHDD_DATA@@QAE@XZ ENDP				; BlockHDD_DATA::BlockHDD_DATA
_TEXT	ENDS
PUBLIC	?GC_Process@AntiCheatPlus@@QAEXH@Z		; AntiCheatPlus::GC_Process
PUBLIC	?GC_Inject@AntiCheatPlus@@QAEXH@Z		; AntiCheatPlus::GC_Inject
PUBLIC	?GC_Class@AntiCheatPlus@@QAEXH@Z		; AntiCheatPlus::GC_Class
PUBLIC	?GC_Title@AntiCheatPlus@@QAEXH@Z		; AntiCheatPlus::GC_Title
PUBLIC	?GC_Config@AntiCheatPlus@@QAEXH@Z		; AntiCheatPlus::GC_Config
PUBLIC	?GC_Init@AntiCheatPlus@@QAEXH@Z			; AntiCheatPlus::GC_Init
PUBLIC	?GC_Cheat@AntiCheatPlus@@QAEXH@Z		; AntiCheatPlus::GC_Cheat
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\anticheatplus.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_UserIndex$ = 8						; size = 4
?GC_Cheat@AntiCheatPlus@@QAEXH@Z PROC			; AntiCheatPlus::GC_Cheat
; _this$ = ecx

; 295  : {

  00b30	55		 push	 ebp
  00b31	8b ec		 mov	 ebp, esp
  00b33	83 ec 44	 sub	 esp, 68			; 00000044H
  00b36	53		 push	 ebx
  00b37	56		 push	 esi
  00b38	57		 push	 edi
  00b39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 296  : 	if(!this->Enable)

  00b3c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b3f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00b42	85 c9		 test	 ecx, ecx
  00b44	75 02		 jne	 SHORT $LN1@GC_Cheat

; 297  : 	{
; 298  : 		return;

  00b46	eb 48		 jmp	 SHORT $LN2@GC_Cheat
$LN1@GC_Cheat:

; 299  : 	}
; 300  : 	this->GC_Init(UserIndex);

  00b48	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00b4b	50		 push	 eax
  00b4c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b4f	e8 00 00 00 00	 call	 ?GC_Init@AntiCheatPlus@@QAEXH@Z ; AntiCheatPlus::GC_Init

; 301  : 	this->GC_Config(UserIndex);

  00b54	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00b57	50		 push	 eax
  00b58	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b5b	e8 00 00 00 00	 call	 ?GC_Config@AntiCheatPlus@@QAEXH@Z ; AntiCheatPlus::GC_Config

; 302  : 	this->GC_Title(UserIndex);

  00b60	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00b63	50		 push	 eax
  00b64	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b67	e8 00 00 00 00	 call	 ?GC_Title@AntiCheatPlus@@QAEXH@Z ; AntiCheatPlus::GC_Title

; 303  : 	this->GC_Class(UserIndex);

  00b6c	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00b6f	50		 push	 eax
  00b70	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b73	e8 00 00 00 00	 call	 ?GC_Class@AntiCheatPlus@@QAEXH@Z ; AntiCheatPlus::GC_Class

; 304  : 	this->GC_Inject(UserIndex);

  00b78	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00b7b	50		 push	 eax
  00b7c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b7f	e8 00 00 00 00	 call	 ?GC_Inject@AntiCheatPlus@@QAEXH@Z ; AntiCheatPlus::GC_Inject

; 305  : 	this->GC_Process(UserIndex);

  00b84	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00b87	50		 push	 eax
  00b88	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b8b	e8 00 00 00 00	 call	 ?GC_Process@AntiCheatPlus@@QAEXH@Z ; AntiCheatPlus::GC_Process
$LN2@GC_Cheat:

; 306  : #if(ANTI_CHEAT_PLUS_CRC)
; 307  : 	this->GC_Crc(UserIndex);
; 308  : #endif
; 309  : }

  00b90	5f		 pop	 edi
  00b91	5e		 pop	 esi
  00b92	5b		 pop	 ebx
  00b93	8b e5		 mov	 esp, ebp
  00b95	5d		 pop	 ebp
  00b96	c2 04 00	 ret	 4
?GC_Cheat@AntiCheatPlus@@QAEXH@Z ENDP			; AntiCheatPlus::GC_Cheat
_TEXT	ENDS
PUBLIC	??_C@_0BE@PNIPEAML@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BF@PIPPDFMK@?4?4?3?3?5Anti?9Cheat?5?3?3?4?4?$AA@ ; `string'
PUBLIC	??_C@_0BO@HKOELEB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5ip?$FL?$CFs?$FN?5hdd?$FL?$CFd?$FN?5?9?$DO?5?$CFs?$AA@ ; `string'
PUBLIC	?CG_Cheater@AntiCheatPlus@@QAEXPAUPMST_CheaterUser@@H@Z ; AntiCheatPlus::CG_Cheater
EXTRN	?SendClose@ConnectEx@@QAEXHH@Z:PROC		; ConnectEx::SendClose
EXTRN	?g_ConnectEx@@3VConnectEx@@A:QWORD		; g_ConnectEx
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?Output@CLogToFile@@QAAXPADZZ:PROC		; CLogToFile::Output
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0BE@PNIPEAML@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@PNIPEAML@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?5?$CFs?$AA@ DB '['
	DB	'%s][%s][%s][%d] %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PIPPDFMK@?4?4?3?3?5Anti?9Cheat?5?3?3?4?4?$AA@
CONST	SEGMENT
??_C@_0BF@PIPPDFMK@?4?4?3?3?5Anti?9Cheat?5?3?3?4?4?$AA@ DB '..:: Anti-Che'
	DB	'at ::..', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HKOELEB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5ip?$FL?$CFs?$FN?5hdd?$FL?$CFd?$FN?5?9?$DO?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BO@HKOELEB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5ip?$FL?$CFs?$FN?5hdd?$FL?$CFd?$FN?5?9?$DO?5?$CFs?$AA@ DB '['
	DB	'%s][%s] ip[%s] hdd[%d] -> %s', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
_UserIndex$ = 12					; size = 4
?CG_Cheater@AntiCheatPlus@@QAEXPAUPMST_CheaterUser@@H@Z PROC ; AntiCheatPlus::CG_Cheater
; _this$ = ecx

; 313  : {

  00ba0	55		 push	 ebp
  00ba1	8b ec		 mov	 ebp, esp
  00ba3	83 ec 48	 sub	 esp, 72			; 00000048H
  00ba6	53		 push	 ebx
  00ba7	56		 push	 esi
  00ba8	57		 push	 edi
  00ba9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 314  : 	if (UserIndex < 0 || UserIndex > OBJMAX-1 )

  00bac	83 7d 0c 00	 cmp	 DWORD PTR _UserIndex$[ebp], 0
  00bb0	7c 09		 jl	 SHORT $LN2@CG_Cheater
  00bb2	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _UserIndex$[ebp], 14999 ; 00003a97H
  00bb9	7e 05		 jle	 SHORT $LN3@CG_Cheater
$LN2@CG_Cheater:

; 315  : 	{
; 316  : 		return;

  00bbb	e9 cb 00 00 00	 jmp	 $LN4@CG_Cheater
$LN3@CG_Cheater:

; 317  : 	}
; 318  : 
; 319  : 	LPOBJ lpUser = &gObj[UserIndex];

  00bc0	8b 45 0c	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00bc3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00bc9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00bcf	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 320  : 
; 321  : 	if(aRecv->Result)

  00bd2	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00bd5	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00bd9	85 c9		 test	 ecx, ecx
  00bdb	0f 84 aa 00 00
	00		 je	 $LN4@CG_Cheater

; 322  : 	{
; 323  : 		g_AntiCheatLog.Output("[%s][%s] ip[%s] hdd[%d] -> %s", lpUser->AccountID, lpUser->Name, lpUser->Ip_addr, lpUser->hdd_id, aRecv->CheatText);

  00be1	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00be4	83 c0 05	 add	 eax, 5
  00be7	50		 push	 eax
  00be8	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00beb	8b 91 8c 28 00
	00		 mov	 edx, DWORD PTR [ecx+10380]
  00bf1	52		 push	 edx
  00bf2	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00bf5	83 c0 18	 add	 eax, 24			; 00000018H
  00bf8	50		 push	 eax
  00bf9	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00bfc	83 c1 77	 add	 ecx, 119		; 00000077H
  00bff	51		 push	 ecx
  00c00	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  00c03	83 c2 6c	 add	 edx, 108		; 0000006cH
  00c06	52		 push	 edx
  00c07	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@HKOELEB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5ip?$FL?$CFs?$FN?5hdd?$FL?$CFd?$FN?5?9?$DO?5?$CFs?$AA@
  00c0c	68 00 00 00 00	 push	 OFFSET ?g_AntiCheatLog@@3VCLogToFile@@A ; g_AntiCheatLog
  00c11	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  00c16	83 c4 1c	 add	 esp, 28			; 0000001cH

; 324  : 		GCServerMsgStringSend("..:: Anti-Cheat ::..", lpUser->m_Index, 0);

  00c19	6a 00		 push	 0
  00c1b	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c1e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c20	51		 push	 ecx
  00c21	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PIPPDFMK@?4?4?3?3?5Anti?9Cheat?5?3?3?4?4?$AA@
  00c26	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00c2b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 325  : 		GCServerMsgStringSend(aRecv->CheatText, lpUser->m_Index, 0);

  00c2e	6a 00		 push	 0
  00c30	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c33	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c35	51		 push	 ecx
  00c36	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00c39	83 c2 05	 add	 edx, 5
  00c3c	52		 push	 edx
  00c3d	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00c42	83 c4 0c	 add	 esp, 12			; 0000000cH

; 326  : 		LogAddC(2,"[%s][%s][%s][%d] %s", lpUser->AccountID, lpUser->Name, lpUser->Ip_addr, lpUser->hdd_id, aRecv->CheatText);

  00c45	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00c48	83 c0 05	 add	 eax, 5
  00c4b	50		 push	 eax
  00c4c	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00c4f	8b 91 8c 28 00
	00		 mov	 edx, DWORD PTR [ecx+10380]
  00c55	52		 push	 edx
  00c56	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c59	83 c0 18	 add	 eax, 24			; 00000018H
  00c5c	50		 push	 eax
  00c5d	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00c60	83 c1 77	 add	 ecx, 119		; 00000077H
  00c63	51		 push	 ecx
  00c64	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  00c67	83 c2 6c	 add	 edx, 108		; 0000006cH
  00c6a	52		 push	 edx
  00c6b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PNIPEAML@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?5?$CFs?$AA@
  00c70	6a 02		 push	 2
  00c72	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00c78	83 c4 1c	 add	 esp, 28			; 0000001cH

; 327  : #ifdef _RECONNECT_				
; 328  : 		g_ConnectEx.SendClose(UserIndex,NORM_DC);

  00c7b	6a 00		 push	 0
  00c7d	8b 45 0c	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00c80	50		 push	 eax
  00c81	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectEx@@3VConnectEx@@A ; g_ConnectEx
  00c86	e8 00 00 00 00	 call	 ?SendClose@ConnectEx@@QAEXHH@Z ; ConnectEx::SendClose
$LN4@CG_Cheater:

; 329  : #else
; 330  : 		CloseClient(UserIndex);
; 331  : #endif
; 332  : 	}
; 333  : }

  00c8b	5f		 pop	 edi
  00c8c	5e		 pop	 esi
  00c8d	5b		 pop	 ebx
  00c8e	8b e5		 mov	 esp, ebp
  00c90	5d		 pop	 ebp
  00c91	c2 08 00	 ret	 8
?CG_Cheater@AntiCheatPlus@@QAEXPAUPMST_CheaterUser@@H@Z ENDP ; AntiCheatPlus::CG_Cheater
_TEXT	ENDS
PUBLIC	??A?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEAAUBlockHDD_DATA@@I@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::operator[]
PUBLIC	?size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::size
PUBLIC	?CG_HddSend@AntiCheatPlus@@QAEXPAUCG_PMSG_HDDKEY@@H@Z ; AntiCheatPlus::CG_HddSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv68 = -84						; size = 4
_CheckList$228013 = -16					; size = 4
_i$228009 = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
_UserIndex$ = 12					; size = 4
?CG_HddSend@AntiCheatPlus@@QAEXPAUCG_PMSG_HDDKEY@@H@Z PROC ; AntiCheatPlus::CG_HddSend
; _this$ = ecx

; 337  : {

  00ca0	55		 push	 ebp
  00ca1	8b ec		 mov	 ebp, esp
  00ca3	83 ec 54	 sub	 esp, 84			; 00000054H
  00ca6	53		 push	 ebx
  00ca7	56		 push	 esi
  00ca8	57		 push	 edi
  00ca9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 338  : 	if(!aRecv)

  00cac	83 7d 08 00	 cmp	 DWORD PTR _aRecv$[ebp], 0
  00cb0	75 05		 jne	 SHORT $LN7@CG_HddSend

; 339  : 	{
; 340  : 		return;

  00cb2	e9 b4 00 00 00	 jmp	 $LN8@CG_HddSend
$LN7@CG_HddSend:

; 341  : 	}
; 342  : 
; 343  : 	if(OBJMAX_RANGE(UserIndex) == 0)

  00cb7	83 7d 0c 00	 cmp	 DWORD PTR _UserIndex$[ebp], 0
  00cbb	7d 09		 jge	 SHORT $LN10@CG_HddSend
  00cbd	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  00cc4	eb 0f		 jmp	 SHORT $LN11@CG_HddSend
$LN10@CG_HddSend:
  00cc6	33 c0		 xor	 eax, eax
  00cc8	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _UserIndex$[ebp], 14999 ; 00003a97H
  00ccf	0f 9e c0	 setle	 al
  00cd2	89 45 ac	 mov	 DWORD PTR tv68[ebp], eax
$LN11@CG_HddSend:
  00cd5	83 7d ac 00	 cmp	 DWORD PTR tv68[ebp], 0
  00cd9	75 05		 jne	 SHORT $LN6@CG_HddSend

; 344  : 	{
; 345  : 		return;

  00cdb	e9 8b 00 00 00	 jmp	 $LN8@CG_HddSend
$LN6@CG_HddSend:

; 346  : 	}
; 347  : 
; 348  : 	LPOBJ lpUser = &gObj[UserIndex];

  00ce0	8b 45 0c	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00ce3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00ce9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00cef	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 349  : 
; 350  : 	lpUser->hdd_id = aRecv->hdd_id;

  00cf2	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00cf5	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00cf8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00cfb	89 90 8c 28 00
	00		 mov	 DWORD PTR [eax+10380], edx

; 351  : 
; 352  : 	if(!this->Enable)

  00d01	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d04	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00d07	85 c9		 test	 ecx, ecx
  00d09	75 02		 jne	 SHORT $LN5@CG_HddSend

; 353  : 	{
; 354  : 		return;

  00d0b	eb 5e		 jmp	 SHORT $LN8@CG_HddSend
$LN5@CG_HddSend:

; 355  : 	}
; 356  : 
; 357  : 	for(int i = 0; i < this->blockhdd.size(); i++)

  00d0d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228009[ebp], 0
  00d14	eb 09		 jmp	 SHORT $LN4@CG_HddSend
$LN3@CG_HddSend:
  00d16	8b 45 f4	 mov	 eax, DWORD PTR _i$228009[ebp]
  00d19	83 c0 01	 add	 eax, 1
  00d1c	89 45 f4	 mov	 DWORD PTR _i$228009[ebp], eax
$LN4@CG_HddSend:
  00d1f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d22	81 c1 2c 00 01
	00		 add	 ecx, 65580		; 0001002cH
  00d28	e8 00 00 00 00	 call	 ?size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::size
  00d2d	39 45 f4	 cmp	 DWORD PTR _i$228009[ebp], eax
  00d30	73 39		 jae	 SHORT $LN8@CG_HddSend

; 358  : 	{
; 359  : 		BlockHDD_DATA & CheckList = this->blockhdd[i];

  00d32	8b 45 f4	 mov	 eax, DWORD PTR _i$228009[ebp]
  00d35	50		 push	 eax
  00d36	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d39	81 c1 2c 00 01
	00		 add	 ecx, 65580		; 0001002cH
  00d3f	e8 00 00 00 00	 call	 ??A?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEAAUBlockHDD_DATA@@I@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::operator[]
  00d44	89 45 f0	 mov	 DWORD PTR _CheckList$228013[ebp], eax

; 360  : 		if(CheckList.hddid != lpUser->hdd_id)

  00d47	8b 45 f0	 mov	 eax, DWORD PTR _CheckList$228013[ebp]
  00d4a	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00d4d	8b 10		 mov	 edx, DWORD PTR [eax]
  00d4f	3b 91 8c 28 00
	00		 cmp	 edx, DWORD PTR [ecx+10380]
  00d55	74 02		 je	 SHORT $LN1@CG_HddSend

; 361  : 		{
; 362  : 			continue;

  00d57	eb bd		 jmp	 SHORT $LN3@CG_HddSend
$LN1@CG_HddSend:

; 363  : 		}
; 364  : 		//GCServerMsgStringSend("..:: Anti-Cheat ::..", lpUser->m_Index, 0);
; 365  : 		//GCServerMsgStringSend("PC Block List", lpUser->m_Index, 0);
; 366  : #ifdef _RECONNECT_				
; 367  : 		g_ConnectEx.SendClose(UserIndex,NORM_DC);

  00d59	6a 00		 push	 0
  00d5b	8b 45 0c	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00d5e	50		 push	 eax
  00d5f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectEx@@3VConnectEx@@A ; g_ConnectEx
  00d64	e8 00 00 00 00	 call	 ?SendClose@ConnectEx@@QAEXHH@Z ; ConnectEx::SendClose

; 368  : #else
; 369  : 		CloseClient(UserIndex);
; 370  : #endif
; 371  : 	}

  00d69	eb ab		 jmp	 SHORT $LN3@CG_HddSend
$LN8@CG_HddSend:

; 372  : }

  00d6b	5f		 pop	 edi
  00d6c	5e		 pop	 esi
  00d6d	5b		 pop	 ebx
  00d6e	8b e5		 mov	 esp, ebp
  00d70	5d		 pop	 ebp
  00d71	c2 08 00	 ret	 8
?CG_HddSend@AntiCheatPlus@@QAEXPAUCG_PMSG_HDDKEY@@H@Z ENDP ; AntiCheatPlus::CG_HddSend
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
PUBLIC	__$ArrayPad$
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 22
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
?GC_Config@AntiCheatPlus@@QAEXH@Z PROC			; AntiCheatPlus::GC_Config
; _this$ = ecx

; 376  : {

  00d80	55		 push	 ebp
  00d81	8b ec		 mov	 ebp, esp
  00d83	83 ec 60	 sub	 esp, 96			; 00000060H
  00d86	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00d8b	33 c5		 xor	 eax, ebp
  00d8d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00d90	53		 push	 ebx
  00d91	56		 push	 esi
  00d92	57		 push	 edi
  00d93	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 377  : 	PMSG_AH_CONFIG pMsg;
; 378  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xFF, sizeof(pMsg));

  00d96	6a 16		 push	 22			; 00000016H
  00d98	68 ff 00 00 00	 push	 255			; 000000ffH
  00d9d	68 fb 00 00 00	 push	 251			; 000000fbH
  00da2	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00da5	50		 push	 eax
  00da6	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00da9	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 379  : 	pMsg.type = eAH_Config;

  00dae	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 380  : 
; 381  : 	pMsg.DumpActive = this->DumpActive;

  00db2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00db5	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00db8	88 4d e5	 mov	 BYTE PTR _pMsg$[ebp+5], cl

; 382  : 	pMsg.TitleActive = this->TitleActive;

  00dbb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00dbe	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00dc1	88 4d e6	 mov	 BYTE PTR _pMsg$[ebp+6], cl

; 383  : 	pMsg.ClassActive = this->ClassActive;

  00dc4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00dc7	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00dca	88 4d e7	 mov	 BYTE PTR _pMsg$[ebp+7], cl

; 384  : 	pMsg.InjectActive = this->InjectActive;

  00dcd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00dd0	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00dd3	88 4d e8	 mov	 BYTE PTR _pMsg$[ebp+8], cl

; 385  : 	pMsg.ProcessActive = this->ProcessActive;

  00dd6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00dd9	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00ddc	88 4d e9	 mov	 BYTE PTR _pMsg$[ebp+9], cl

; 386  : 	pMsg.EliteActive = this->EliteActive;

  00ddf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00de2	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00de5	88 4d ea	 mov	 BYTE PTR _pMsg$[ebp+10], cl

; 387  : 	pMsg.MultiWindows = this->MultiWindows;

  00de8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00deb	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00dee	88 4d eb	 mov	 BYTE PTR _pMsg$[ebp+11], cl

; 388  : 
; 389  : 	pMsg.DumpTime = this->DumpTime;

  00df1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00df4	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00df8	66 89 4d ec	 mov	 WORD PTR _pMsg$[ebp+12], cx

; 390  : 	pMsg.TitleTime = this->TitleTime;

  00dfc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00dff	66 8b 48 0c	 mov	 cx, WORD PTR [eax+12]
  00e03	66 89 4d ee	 mov	 WORD PTR _pMsg$[ebp+14], cx

; 391  : 	pMsg.ClassTime = this->ClassTime;

  00e07	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e0a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  00e0e	66 89 4d f0	 mov	 WORD PTR _pMsg$[ebp+16], cx

; 392  : 	pMsg.InjectTime = this->InjectTime;

  00e12	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e15	66 8b 48 10	 mov	 cx, WORD PTR [eax+16]
  00e19	66 89 4d f2	 mov	 WORD PTR _pMsg$[ebp+18], cx

; 393  : 	pMsg.ProcessTime = this->ProcessTime;

  00e1d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e20	66 8b 48 12	 mov	 cx, WORD PTR [eax+18]
  00e24	66 89 4d f4	 mov	 WORD PTR _pMsg$[ebp+20], cx

; 394  : 
; 395  : 	DataSend(UserIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  00e28	6a 16		 push	 22			; 00000016H
  00e2a	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00e2d	50		 push	 eax
  00e2e	8b 4d 08	 mov	 ecx, DWORD PTR _UserIndex$[ebp]
  00e31	51		 push	 ecx
  00e32	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00e37	83 c4 0c	 add	 esp, 12			; 0000000cH

; 396  : }

  00e3a	5f		 pop	 edi
  00e3b	5e		 pop	 esi
  00e3c	5b		 pop	 ebx
  00e3d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e40	33 cd		 xor	 ecx, ebp
  00e42	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e47	8b e5		 mov	 esp, ebp
  00e49	5d		 pop	 ebp
  00e4a	c2 04 00	 ret	 4
?GC_Config@AntiCheatPlus@@QAEXH@Z ENDP			; AntiCheatPlus::GC_Config
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 106  : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 107  : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 108  : 		lpBuf[3] = sub;

  00024	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00027	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0002a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\anticheatplus.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_pMsg$ = -12						; size = 5
_this$ = -4						; size = 4
_UserIndex$ = 8						; size = 4
?GC_Init@AntiCheatPlus@@QAEXH@Z PROC			; AntiCheatPlus::GC_Init
; _this$ = ecx

; 400  : {

  00e50	55		 push	 ebp
  00e51	8b ec		 mov	 ebp, esp
  00e53	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00e56	53		 push	 ebx
  00e57	56		 push	 esi
  00e58	57		 push	 edi
  00e59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 401  : 	PMSG_AH_SUB pMsg;
; 402  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xFF, sizeof(pMsg));

  00e5c	6a 05		 push	 5
  00e5e	68 ff 00 00 00	 push	 255			; 000000ffH
  00e63	68 fb 00 00 00	 push	 251			; 000000fbH
  00e68	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00e6b	50		 push	 eax
  00e6c	8d 4d f4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00e6f	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 403  : 	pMsg.type = eAH_Init;

  00e74	c6 45 f8 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1

; 404  : 	DataSend(UserIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  00e78	6a 05		 push	 5
  00e7a	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00e7d	50		 push	 eax
  00e7e	8b 4d 08	 mov	 ecx, DWORD PTR _UserIndex$[ebp]
  00e81	51		 push	 ecx
  00e82	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00e87	83 c4 0c	 add	 esp, 12			; 0000000cH

; 405  : }

  00e8a	5f		 pop	 edi
  00e8b	5e		 pop	 esi
  00e8c	5b		 pop	 ebx
  00e8d	8b e5		 mov	 esp, ebp
  00e8f	5d		 pop	 ebp
  00e90	c2 04 00	 ret	 4
?GC_Init@AntiCheatPlus@@QAEXH@Z ENDP			; AntiCheatPlus::GC_Init
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$228037 = -84					; size = 69
_i$228033 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
?GC_Title@AntiCheatPlus@@QAEXH@Z PROC			; AntiCheatPlus::GC_Title
; _this$ = ecx

; 409  : {

  00ea0	55		 push	 ebp
  00ea1	8b ec		 mov	 ebp, esp
  00ea3	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00ea9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00eae	33 c5		 xor	 eax, ebp
  00eb0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00eb3	53		 push	 ebx
  00eb4	56		 push	 esi
  00eb5	57		 push	 edi
  00eb6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 410  : 	for(int i = 0; i < this->TitleCount; i++)

  00eb9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228033[ebp], 0
  00ec0	eb 09		 jmp	 SHORT $LN3@GC_Title
$LN2@GC_Title:
  00ec2	8b 45 f4	 mov	 eax, DWORD PTR _i$228033[ebp]
  00ec5	83 c0 01	 add	 eax, 1
  00ec8	89 45 f4	 mov	 DWORD PTR _i$228033[ebp], eax
$LN3@GC_Title:
  00ecb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ece	8b 4d f4	 mov	 ecx, DWORD PTR _i$228033[ebp]
  00ed1	3b 88 14 00 01
	00		 cmp	 ecx, DWORD PTR [eax+65556]
  00ed7	7d 4c		 jge	 SHORT $LN4@GC_Title

; 411  : 	{
; 412  : 		PMSG_CheatBase pMsg;
; 413  : 		pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xFF, sizeof(pMsg));

  00ed9	6a 45		 push	 69			; 00000045H
  00edb	68 ff 00 00 00	 push	 255			; 000000ffH
  00ee0	68 fb 00 00 00	 push	 251			; 000000fbH
  00ee5	8d 45 ac	 lea	 eax, DWORD PTR _pMsg$228037[ebp]
  00ee8	50		 push	 eax
  00ee9	8d 4d ac	 lea	 ecx, DWORD PTR _pMsg$228037[ebp]
  00eec	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 414  : 		pMsg.type = eAH_Title;

  00ef1	c6 45 b0 02	 mov	 BYTE PTR _pMsg$228037[ebp+4], 2

; 415  : 		memcpy(pMsg.Name,this->TitleName[i],sizeof(pMsg.Name));

  00ef5	6a 40		 push	 64			; 00000040H
  00ef7	8b 45 f4	 mov	 eax, DWORD PTR _i$228033[ebp]
  00efa	c1 e0 06	 shl	 eax, 6
  00efd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f00	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00f04	52		 push	 edx
  00f05	8d 45 b1	 lea	 eax, DWORD PTR _pMsg$228037[ebp+5]
  00f08	50		 push	 eax
  00f09	e8 00 00 00 00	 call	 _memcpy
  00f0e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 		DataSend(UserIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  00f11	6a 45		 push	 69			; 00000045H
  00f13	8d 45 ac	 lea	 eax, DWORD PTR _pMsg$228037[ebp]
  00f16	50		 push	 eax
  00f17	8b 4d 08	 mov	 ecx, DWORD PTR _UserIndex$[ebp]
  00f1a	51		 push	 ecx
  00f1b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00f20	83 c4 0c	 add	 esp, 12			; 0000000cH

; 417  : 	}

  00f23	eb 9d		 jmp	 SHORT $LN2@GC_Title
$LN4@GC_Title:

; 418  : }

  00f25	5f		 pop	 edi
  00f26	5e		 pop	 esi
  00f27	5b		 pop	 ebx
  00f28	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f2b	33 cd		 xor	 ecx, ebp
  00f2d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f32	8b e5		 mov	 esp, ebp
  00f34	5d		 pop	 ebp
  00f35	c2 04 00	 ret	 4
?GC_Title@AntiCheatPlus@@QAEXH@Z ENDP			; AntiCheatPlus::GC_Title
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$228048 = -84					; size = 69
_i$228044 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
?GC_Class@AntiCheatPlus@@QAEXH@Z PROC			; AntiCheatPlus::GC_Class
; _this$ = ecx

; 422  : {

  00f40	55		 push	 ebp
  00f41	8b ec		 mov	 ebp, esp
  00f43	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00f49	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00f4e	33 c5		 xor	 eax, ebp
  00f50	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00f53	53		 push	 ebx
  00f54	56		 push	 esi
  00f55	57		 push	 edi
  00f56	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 423  : 	for(int i = 0; i < this->ClassCount; i++)

  00f59	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228044[ebp], 0
  00f60	eb 09		 jmp	 SHORT $LN3@GC_Class
$LN2@GC_Class:
  00f62	8b 45 f4	 mov	 eax, DWORD PTR _i$228044[ebp]
  00f65	83 c0 01	 add	 eax, 1
  00f68	89 45 f4	 mov	 DWORD PTR _i$228044[ebp], eax
$LN3@GC_Class:
  00f6b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f6e	8b 4d f4	 mov	 ecx, DWORD PTR _i$228044[ebp]
  00f71	3b 88 18 00 01
	00		 cmp	 ecx, DWORD PTR [eax+65560]
  00f77	7d 4f		 jge	 SHORT $LN4@GC_Class

; 424  : 	{
; 425  : 		PMSG_CheatBase pMsg;
; 426  : 		pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xFF, sizeof(pMsg));

  00f79	6a 45		 push	 69			; 00000045H
  00f7b	68 ff 00 00 00	 push	 255			; 000000ffH
  00f80	68 fb 00 00 00	 push	 251			; 000000fbH
  00f85	8d 45 ac	 lea	 eax, DWORD PTR _pMsg$228048[ebp]
  00f88	50		 push	 eax
  00f89	8d 4d ac	 lea	 ecx, DWORD PTR _pMsg$228048[ebp]
  00f8c	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 427  : 		pMsg.type = eAH_Class;

  00f91	c6 45 b0 03	 mov	 BYTE PTR _pMsg$228048[ebp+4], 3

; 428  : 		memcpy(pMsg.Name,this->ClassName[i],sizeof(pMsg.Name));

  00f95	6a 40		 push	 64			; 00000040H
  00f97	8b 45 f4	 mov	 eax, DWORD PTR _i$228044[ebp]
  00f9a	c1 e0 06	 shl	 eax, 6
  00f9d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fa0	8d 94 01 14 40
	00 00		 lea	 edx, DWORD PTR [ecx+eax+16404]
  00fa7	52		 push	 edx
  00fa8	8d 45 b1	 lea	 eax, DWORD PTR _pMsg$228048[ebp+5]
  00fab	50		 push	 eax
  00fac	e8 00 00 00 00	 call	 _memcpy
  00fb1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 429  : 		DataSend(UserIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  00fb4	6a 45		 push	 69			; 00000045H
  00fb6	8d 45 ac	 lea	 eax, DWORD PTR _pMsg$228048[ebp]
  00fb9	50		 push	 eax
  00fba	8b 4d 08	 mov	 ecx, DWORD PTR _UserIndex$[ebp]
  00fbd	51		 push	 ecx
  00fbe	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00fc3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 430  : 	}

  00fc6	eb 9a		 jmp	 SHORT $LN2@GC_Class
$LN4@GC_Class:

; 431  : }

  00fc8	5f		 pop	 edi
  00fc9	5e		 pop	 esi
  00fca	5b		 pop	 ebx
  00fcb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00fce	33 cd		 xor	 ecx, ebp
  00fd0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00fd5	8b e5		 mov	 esp, ebp
  00fd7	5d		 pop	 ebp
  00fd8	c2 04 00	 ret	 4
?GC_Class@AntiCheatPlus@@QAEXH@Z ENDP			; AntiCheatPlus::GC_Class
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$228059 = -84					; size = 69
_i$228055 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
?GC_Inject@AntiCheatPlus@@QAEXH@Z PROC			; AntiCheatPlus::GC_Inject
; _this$ = ecx

; 435  : {

  00fe0	55		 push	 ebp
  00fe1	8b ec		 mov	 ebp, esp
  00fe3	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00fe9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00fee	33 c5		 xor	 eax, ebp
  00ff0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00ff3	53		 push	 ebx
  00ff4	56		 push	 esi
  00ff5	57		 push	 edi
  00ff6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 436  : 	for(int i = 0; i < this->InjectCount; i++)

  00ff9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228055[ebp], 0
  01000	eb 09		 jmp	 SHORT $LN3@GC_Inject
$LN2@GC_Inject:
  01002	8b 45 f4	 mov	 eax, DWORD PTR _i$228055[ebp]
  01005	83 c0 01	 add	 eax, 1
  01008	89 45 f4	 mov	 DWORD PTR _i$228055[ebp], eax
$LN3@GC_Inject:
  0100b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0100e	8b 4d f4	 mov	 ecx, DWORD PTR _i$228055[ebp]
  01011	3b 88 1c 00 01
	00		 cmp	 ecx, DWORD PTR [eax+65564]
  01017	7d 4f		 jge	 SHORT $LN4@GC_Inject

; 437  : 	{
; 438  : 		PMSG_CheatBase pMsg;
; 439  : 		pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xFF, sizeof(pMsg));

  01019	6a 45		 push	 69			; 00000045H
  0101b	68 ff 00 00 00	 push	 255			; 000000ffH
  01020	68 fb 00 00 00	 push	 251			; 000000fbH
  01025	8d 45 ac	 lea	 eax, DWORD PTR _pMsg$228059[ebp]
  01028	50		 push	 eax
  01029	8d 4d ac	 lea	 ecx, DWORD PTR _pMsg$228059[ebp]
  0102c	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 440  : 		pMsg.type = eAH_Inject;

  01031	c6 45 b0 04	 mov	 BYTE PTR _pMsg$228059[ebp+4], 4

; 441  : 		memcpy(pMsg.Name,this->InjectName[i],sizeof(pMsg.Name));

  01035	6a 40		 push	 64			; 00000040H
  01037	8b 45 f4	 mov	 eax, DWORD PTR _i$228055[ebp]
  0103a	c1 e0 06	 shl	 eax, 6
  0103d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01040	8d 94 01 14 80
	00 00		 lea	 edx, DWORD PTR [ecx+eax+32788]
  01047	52		 push	 edx
  01048	8d 45 b1	 lea	 eax, DWORD PTR _pMsg$228059[ebp+5]
  0104b	50		 push	 eax
  0104c	e8 00 00 00 00	 call	 _memcpy
  01051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 442  : 		DataSend(UserIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  01054	6a 45		 push	 69			; 00000045H
  01056	8d 45 ac	 lea	 eax, DWORD PTR _pMsg$228059[ebp]
  01059	50		 push	 eax
  0105a	8b 4d 08	 mov	 ecx, DWORD PTR _UserIndex$[ebp]
  0105d	51		 push	 ecx
  0105e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 443  : 	}

  01066	eb 9a		 jmp	 SHORT $LN2@GC_Inject
$LN4@GC_Inject:

; 444  : }

  01068	5f		 pop	 edi
  01069	5e		 pop	 esi
  0106a	5b		 pop	 ebx
  0106b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0106e	33 cd		 xor	 ecx, ebp
  01070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01075	8b e5		 mov	 esp, ebp
  01077	5d		 pop	 ebp
  01078	c2 04 00	 ret	 4
?GC_Inject@AntiCheatPlus@@QAEXH@Z ENDP			; AntiCheatPlus::GC_Inject
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$228070 = -84					; size = 69
_i$228066 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
?GC_Process@AntiCheatPlus@@QAEXH@Z PROC			; AntiCheatPlus::GC_Process
; _this$ = ecx

; 448  : {

  01080	55		 push	 ebp
  01081	8b ec		 mov	 ebp, esp
  01083	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  01089	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0108e	33 c5		 xor	 eax, ebp
  01090	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01093	53		 push	 ebx
  01094	56		 push	 esi
  01095	57		 push	 edi
  01096	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 449  : 	for(int i = 0; i < this->ProcessCount; i++)

  01099	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228066[ebp], 0
  010a0	eb 09		 jmp	 SHORT $LN3@GC_Process
$LN2@GC_Process:
  010a2	8b 45 f4	 mov	 eax, DWORD PTR _i$228066[ebp]
  010a5	83 c0 01	 add	 eax, 1
  010a8	89 45 f4	 mov	 DWORD PTR _i$228066[ebp], eax
$LN3@GC_Process:
  010ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  010ae	8b 4d f4	 mov	 ecx, DWORD PTR _i$228066[ebp]
  010b1	3b 88 20 00 01
	00		 cmp	 ecx, DWORD PTR [eax+65568]
  010b7	7d 4f		 jge	 SHORT $LN4@GC_Process

; 450  : 	{
; 451  : 		PMSG_CheatBase pMsg;
; 452  : 		pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xFF, sizeof(pMsg));

  010b9	6a 45		 push	 69			; 00000045H
  010bb	68 ff 00 00 00	 push	 255			; 000000ffH
  010c0	68 fb 00 00 00	 push	 251			; 000000fbH
  010c5	8d 45 ac	 lea	 eax, DWORD PTR _pMsg$228070[ebp]
  010c8	50		 push	 eax
  010c9	8d 4d ac	 lea	 ecx, DWORD PTR _pMsg$228070[ebp]
  010cc	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 453  : 		pMsg.type = eAH_Process;

  010d1	c6 45 b0 05	 mov	 BYTE PTR _pMsg$228070[ebp+4], 5

; 454  : 		memcpy(pMsg.Name,this->ProcessName[i],sizeof(pMsg.Name));

  010d5	6a 40		 push	 64			; 00000040H
  010d7	8b 45 f4	 mov	 eax, DWORD PTR _i$228066[ebp]
  010da	c1 e0 06	 shl	 eax, 6
  010dd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  010e0	8d 94 01 14 c0
	00 00		 lea	 edx, DWORD PTR [ecx+eax+49172]
  010e7	52		 push	 edx
  010e8	8d 45 b1	 lea	 eax, DWORD PTR _pMsg$228070[ebp+5]
  010eb	50		 push	 eax
  010ec	e8 00 00 00 00	 call	 _memcpy
  010f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 455  : 		DataSend(UserIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  010f4	6a 45		 push	 69			; 00000045H
  010f6	8d 45 ac	 lea	 eax, DWORD PTR _pMsg$228070[ebp]
  010f9	50		 push	 eax
  010fa	8b 4d 08	 mov	 ecx, DWORD PTR _UserIndex$[ebp]
  010fd	51		 push	 ecx
  010fe	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01103	83 c4 0c	 add	 esp, 12			; 0000000cH

; 456  : 	}

  01106	eb 9a		 jmp	 SHORT $LN2@GC_Process
$LN4@GC_Process:

; 457  : }

  01108	5f		 pop	 edi
  01109	5e		 pop	 esi
  0110a	5b		 pop	 ebx
  0110b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0110e	33 cd		 xor	 ecx, ebp
  01110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01115	8b e5		 mov	 esp, ebp
  01117	5d		 pop	 ebp
  01118	c2 04 00	 ret	 4
?GC_Process@AntiCheatPlus@@QAEXH@Z ENDP			; AntiCheatPlus::GC_Process
_TEXT	ENDS
PUBLIC	??_C@_0BG@KPMHEGCJ@Multi?5Windows?5Blocked?$AA@	; `string'
PUBLIC	?CheckMultiWindow@AntiCheatPlus@@QAEXH@Z	; AntiCheatPlus::CheckMultiWindow
;	COMDAT ??_C@_0BG@KPMHEGCJ@Multi?5Windows?5Blocked?$AA@
CONST	SEGMENT
??_C@_0BG@KPMHEGCJ@Multi?5Windows?5Blocked?$AA@ DB 'Multi Windows Blocked'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv72 = -84						; size = 4
_lpTempObj$228086 = -16					; size = 4
_n$228082 = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_UserIndex$ = 8						; size = 4
?CheckMultiWindow@AntiCheatPlus@@QAEXH@Z PROC		; AntiCheatPlus::CheckMultiWindow
; _this$ = ecx

; 482  : {

  01120	55		 push	 ebp
  01121	8b ec		 mov	 ebp, esp
  01123	83 ec 54	 sub	 esp, 84			; 00000054H
  01126	53		 push	 ebx
  01127	56		 push	 esi
  01128	57		 push	 edi
  01129	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 483  : 	if(!this->Enable || this->MultiWindows)

  0112c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0112f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01132	85 c9		 test	 ecx, ecx
  01134	74 0b		 je	 SHORT $LN10@CheckMulti
  01136	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01139	0f b6 48 07	 movzx	 ecx, BYTE PTR [eax+7]
  0113d	85 c9		 test	 ecx, ecx
  0113f	74 05		 je	 SHORT $LN11@CheckMulti
$LN10@CheckMulti:

; 484  : 	{
; 485  : 		return;

  01141	e9 f2 00 00 00	 jmp	 $LN12@CheckMulti
$LN11@CheckMulti:

; 486  : 	}
; 487  : 
; 488  : 	if(OBJMAX_RANGE(UserIndex) == FALSE)

  01146	83 7d 08 00	 cmp	 DWORD PTR _UserIndex$[ebp], 0
  0114a	7d 09		 jge	 SHORT $LN14@CheckMulti
  0114c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  01153	eb 0f		 jmp	 SHORT $LN15@CheckMulti
$LN14@CheckMulti:
  01155	33 c0		 xor	 eax, eax
  01157	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _UserIndex$[ebp], 14999 ; 00003a97H
  0115e	0f 9e c0	 setle	 al
  01161	89 45 ac	 mov	 DWORD PTR tv72[ebp], eax
$LN15@CheckMulti:
  01164	83 7d ac 00	 cmp	 DWORD PTR tv72[ebp], 0
  01168	75 05		 jne	 SHORT $LN9@CheckMulti

; 489  : 	{
; 490  : 		return;

  0116a	e9 c9 00 00 00	 jmp	 $LN12@CheckMulti
$LN9@CheckMulti:

; 491  : 	}
; 492  : 
; 493  : 	LPOBJ lpUser = &gObj[UserIndex];

  0116f	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  01172	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01178	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0117e	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 494  : 
; 495  : 	if(lpUser->Connected < PLAYER_PLAYING)

  01181	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01184	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  01188	7d 05		 jge	 SHORT $LN8@CheckMulti

; 496  : 	{
; 497  : 		return;

  0118a	e9 a9 00 00 00	 jmp	 $LN12@CheckMulti
$LN8@CheckMulti:

; 498  : 	}	
; 499  : 
; 500  : 	for(int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  0118f	c7 45 f4 b0 36
	00 00		 mov	 DWORD PTR _n$228082[ebp], 14000 ; 000036b0H
  01196	eb 09		 jmp	 SHORT $LN7@CheckMulti
$LN6@CheckMulti:
  01198	8b 45 f4	 mov	 eax, DWORD PTR _n$228082[ebp]
  0119b	83 c0 01	 add	 eax, 1
  0119e	89 45 f4	 mov	 DWORD PTR _n$228082[ebp], eax
$LN7@CheckMulti:
  011a1	81 7d f4 98 3a
	00 00		 cmp	 DWORD PTR _n$228082[ebp], 15000 ; 00003a98H
  011a8	0f 8d 8a 00 00
	00		 jge	 $LN12@CheckMulti

; 501  : 	{
; 502  : 		LPOBJ lpTempObj = &gObj[n];

  011ae	8b 45 f4	 mov	 eax, DWORD PTR _n$228082[ebp]
  011b1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  011b7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  011bd	89 45 f0	 mov	 DWORD PTR _lpTempObj$228086[ebp], eax

; 503  : 
; 504  : 		if(lpTempObj->Connected < PLAYER_PLAYING)

  011c0	8b 45 f0	 mov	 eax, DWORD PTR _lpTempObj$228086[ebp]
  011c3	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  011c7	7d 02		 jge	 SHORT $LN4@CheckMulti

; 505  : 		{
; 506  : 			continue;

  011c9	eb cd		 jmp	 SHORT $LN6@CheckMulti
$LN4@CheckMulti:

; 507  : 		}	
; 508  : 
; 509  : 		if(lpTempObj->Type != OBJ_USER)

  011cb	8b 45 f0	 mov	 eax, DWORD PTR _lpTempObj$228086[ebp]
  011ce	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  011d2	83 f9 01	 cmp	 ecx, 1
  011d5	74 02		 je	 SHORT $LN3@CheckMulti

; 510  : 		{
; 511  : 			continue;

  011d7	eb bf		 jmp	 SHORT $LN6@CheckMulti
$LN3@CheckMulti:

; 512  : 		}
; 513  : 
; 514  : 		if(UserIndex == n)

  011d9	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  011dc	3b 45 f4	 cmp	 eax, DWORD PTR _n$228082[ebp]
  011df	75 02		 jne	 SHORT $LN2@CheckMulti

; 515  : 		{
; 516  : 			continue;

  011e1	eb b5		 jmp	 SHORT $LN6@CheckMulti
$LN2@CheckMulti:

; 517  : 		}
; 518  : 
; 519  : 		if(lpUser->hdd_id != lpTempObj->hdd_id)

  011e3	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  011e6	8b 4d f0	 mov	 ecx, DWORD PTR _lpTempObj$228086[ebp]
  011e9	8b 90 8c 28 00
	00		 mov	 edx, DWORD PTR [eax+10380]
  011ef	3b 91 8c 28 00
	00		 cmp	 edx, DWORD PTR [ecx+10380]
  011f5	74 02		 je	 SHORT $LN1@CheckMulti

; 520  : 		{
; 521  : 			continue;

  011f7	eb 9f		 jmp	 SHORT $LN6@CheckMulti
$LN1@CheckMulti:

; 522  : 		}
; 523  : 
; 524  : 		GCServerMsgStringSend("..:: Anti-Cheat ::..", lpUser->m_Index, 0);

  011f9	6a 00		 push	 0
  011fb	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  011fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  01200	51		 push	 ecx
  01201	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PIPPDFMK@?4?4?3?3?5Anti?9Cheat?5?3?3?4?4?$AA@
  01206	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0120b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 525  : 		GCServerMsgStringSend("Multi Windows Blocked", lpUser->m_Index, 0);

  0120e	6a 00		 push	 0
  01210	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01213	8b 08		 mov	 ecx, DWORD PTR [eax]
  01215	51		 push	 ecx
  01216	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KPMHEGCJ@Multi?5Windows?5Blocked?$AA@
  0121b	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01220	83 c4 0c	 add	 esp, 12			; 0000000cH

; 526  : #ifdef _RECONNECT_				
; 527  : 		g_ConnectEx.SendClose(UserIndex,NORM_DC);

  01223	6a 00		 push	 0
  01225	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  01228	50		 push	 eax
  01229	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectEx@@3VConnectEx@@A ; g_ConnectEx
  0122e	e8 00 00 00 00	 call	 ?SendClose@ConnectEx@@QAEXHH@Z ; ConnectEx::SendClose

; 528  : #else
; 529  : 		CloseClient(UserIndex);
; 530  : #endif
; 531  : 	}

  01233	e9 60 ff ff ff	 jmp	 $LN6@CheckMulti
$LN12@CheckMulti:

; 532  : }

  01238	5f		 pop	 edi
  01239	5e		 pop	 esi
  0123a	5b		 pop	 ebx
  0123b	8b e5		 mov	 esp, ebp
  0123d	5d		 pop	 ebp
  0123e	c2 04 00	 ret	 4
?CheckMultiWindow@AntiCheatPlus@@QAEXH@Z ENDP		; AntiCheatPlus::CheckMultiWindow
_TEXT	ENDS
PUBLIC	?WraitLog@AntiCheatPlus@@QAEXPAD@Z		; AntiCheatPlus::WraitLog
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Text$ = 8						; size = 4
?WraitLog@AntiCheatPlus@@QAEXPAD@Z PROC			; AntiCheatPlus::WraitLog
; _this$ = ecx

; 637  : {

  01250	55		 push	 ebp
  01251	8b ec		 mov	 ebp, esp
  01253	83 ec 44	 sub	 esp, 68			; 00000044H
  01256	53		 push	 ebx
  01257	56		 push	 esi
  01258	57		 push	 edi
  01259	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 638  : 	g_AntiCheatLog.Output(Text);

  0125c	8b 45 08	 mov	 eax, DWORD PTR _Text$[ebp]
  0125f	50		 push	 eax
  01260	68 00 00 00 00	 push	 OFFSET ?g_AntiCheatLog@@3VCLogToFile@@A ; g_AntiCheatLog
  01265	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  0126a	83 c4 08	 add	 esp, 8

; 639  : }

  0126d	5f		 pop	 edi
  0126e	5e		 pop	 esi
  0126f	5b		 pop	 ebx
  01270	8b e5		 mov	 esp, ebp
  01272	5d		 pop	 ebp
  01273	c2 04 00	 ret	 4
?WraitLog@AntiCheatPlus@@QAEXPAD@Z ENDP			; AntiCheatPlus::WraitLog
_TEXT	ENDS
PUBLIC	??_C@_0BG@LEABKPHO@Max?5Windows?5Count?3?5?$CFd?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CheckMaxWindow@AntiCheatPlus@@QAEXH@Z		; AntiCheatPlus::CheckMaxWindow
EXTRN	_sprintf:PROC
;	COMDAT ??_C@_0BG@LEABKPHO@Max?5Windows?5Count?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BG@LEABKPHO@Max?5Windows?5Count?3?5?$CFd?$AA@ DB 'Max Windows Coun'
	DB	't: %d', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv71 = -348						; size = 4
_szTemp$228118 = -280					; size = 256
_lpTempObj$228109 = -24					; size = 4
_n$228105 = -20						; size = 4
_iWaxCount$ = -16					; size = 4
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
?CheckMaxWindow@AntiCheatPlus@@QAEXH@Z PROC		; AntiCheatPlus::CheckMaxWindow
; _this$ = ecx

; 643  : {

  01280	55		 push	 ebp
  01281	8b ec		 mov	 ebp, esp
  01283	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  01289	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0128e	33 c5		 xor	 eax, ebp
  01290	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01293	53		 push	 ebx
  01294	56		 push	 esi
  01295	57		 push	 edi
  01296	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 644  : 	//return;
; 645  : 
; 646  : 	if(!this->Enable)

  01299	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0129c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0129f	85 c9		 test	 ecx, ecx
  012a1	75 05		 jne	 SHORT $LN14@CheckMaxWi

; 647  : 	{
; 648  : 		return;

  012a3	e9 87 01 00 00	 jmp	 $LN15@CheckMaxWi
$LN14@CheckMaxWi:

; 649  : 	}
; 650  : 
; 651  : 	if(!this->m_EnableMaxWindow)

  012a8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  012ab	83 b8 24 00 01
	00 00		 cmp	 DWORD PTR [eax+65572], 0
  012b2	75 05		 jne	 SHORT $LN13@CheckMaxWi

; 652  : 	{
; 653  : 		return;

  012b4	e9 76 01 00 00	 jmp	 $LN15@CheckMaxWi
$LN13@CheckMaxWi:

; 654  : 	}
; 655  : 
; 656  : 	if(OBJMAX_RANGE(UserIndex) == FALSE)

  012b9	83 7d 08 00	 cmp	 DWORD PTR _UserIndex$[ebp], 0
  012bd	7d 0c		 jge	 SHORT $LN17@CheckMaxWi
  012bf	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
  012c9	eb 12		 jmp	 SHORT $LN18@CheckMaxWi
$LN17@CheckMaxWi:
  012cb	33 c0		 xor	 eax, eax
  012cd	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _UserIndex$[ebp], 14999 ; 00003a97H
  012d4	0f 9e c0	 setle	 al
  012d7	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
$LN18@CheckMaxWi:
  012dd	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR tv71[ebp], 0
  012e4	75 05		 jne	 SHORT $LN12@CheckMaxWi

; 657  : 	{
; 658  : 		return;

  012e6	e9 44 01 00 00	 jmp	 $LN15@CheckMaxWi
$LN12@CheckMaxWi:

; 659  : 	}
; 660  : 
; 661  : 	LPOBJ lpUser = &gObj[UserIndex];

  012eb	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  012ee	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  012f4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012fa	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 662  : 
; 663  : 	int iWaxCount = 0;

  012fd	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iWaxCount$[ebp], 0

; 664  : 
; 665  : 	for(int n = OBJ_STARTUSERINDEX; n < OBJMAX; n++)

  01304	c7 45 ec b0 36
	00 00		 mov	 DWORD PTR _n$228105[ebp], 14000 ; 000036b0H
  0130b	eb 09		 jmp	 SHORT $LN11@CheckMaxWi
$LN10@CheckMaxWi:
  0130d	8b 45 ec	 mov	 eax, DWORD PTR _n$228105[ebp]
  01310	83 c0 01	 add	 eax, 1
  01313	89 45 ec	 mov	 DWORD PTR _n$228105[ebp], eax
$LN11@CheckMaxWi:
  01316	81 7d ec 98 3a
	00 00		 cmp	 DWORD PTR _n$228105[ebp], 15000 ; 00003a98H
  0131d	0f 8d 87 00 00
	00		 jge	 $LN9@CheckMaxWi

; 666  : 	{
; 667  : 		LPOBJ lpTempObj = &gObj[n];

  01323	8b 45 ec	 mov	 eax, DWORD PTR _n$228105[ebp]
  01326	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0132c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01332	89 45 e8	 mov	 DWORD PTR _lpTempObj$228109[ebp], eax

; 668  : 
; 669  : 		if(lpTempObj->Connected < PLAYER_PLAYING)

  01335	8b 45 e8	 mov	 eax, DWORD PTR _lpTempObj$228109[ebp]
  01338	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0133c	7d 02		 jge	 SHORT $LN8@CheckMaxWi

; 670  : 		{
; 671  : 			continue;

  0133e	eb cd		 jmp	 SHORT $LN10@CheckMaxWi
$LN8@CheckMaxWi:

; 672  : 		}	
; 673  : 
; 674  : 		if(lpTempObj->Type != OBJ_USER)

  01340	8b 45 e8	 mov	 eax, DWORD PTR _lpTempObj$228109[ebp]
  01343	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01347	83 f9 01	 cmp	 ecx, 1
  0134a	74 02		 je	 SHORT $LN7@CheckMaxWi

; 675  : 		{
; 676  : 			continue;

  0134c	eb bf		 jmp	 SHORT $LN10@CheckMaxWi
$LN7@CheckMaxWi:

; 677  : 		}
; 678  : 
; 679  : 		if(lpTempObj->OffTrade != 0)

  0134e	8b 45 e8	 mov	 eax, DWORD PTR _lpTempObj$228109[ebp]
  01351	83 b8 ac 22 00
	00 00		 cmp	 DWORD PTR [eax+8876], 0
  01358	74 02		 je	 SHORT $LN6@CheckMaxWi

; 680  : 		{
; 681  : 			continue;

  0135a	eb b1		 jmp	 SHORT $LN10@CheckMaxWi
$LN6@CheckMaxWi:

; 682  : 		}
; 683  : 
; 684  : 		if(lpTempObj->OffTrade != 0)

  0135c	8b 45 e8	 mov	 eax, DWORD PTR _lpTempObj$228109[ebp]
  0135f	83 b8 ac 22 00
	00 00		 cmp	 DWORD PTR [eax+8876], 0
  01366	74 02		 je	 SHORT $LN5@CheckMaxWi

; 685  : 		{
; 686  : 			continue;

  01368	eb a3		 jmp	 SHORT $LN10@CheckMaxWi
$LN5@CheckMaxWi:

; 687  : 		}
; 688  : 
; 689  : 		if(lpTempObj->OffExp != 0)

  0136a	8b 45 e8	 mov	 eax, DWORD PTR _lpTempObj$228109[ebp]
  0136d	83 b8 98 22 00
	00 00		 cmp	 DWORD PTR [eax+8856], 0
  01374	74 02		 je	 SHORT $LN4@CheckMaxWi

; 690  : 		{
; 691  : 			continue;

  01376	eb 95		 jmp	 SHORT $LN10@CheckMaxWi
$LN4@CheckMaxWi:

; 692  : 		}
; 693  : 
; 694  : 		if(lpTempObj->m_OfflineMode != 0)

  01378	8b 45 e8	 mov	 eax, DWORD PTR _lpTempObj$228109[ebp]
  0137b	0f b6 88 d4 28
	00 00		 movzx	 ecx, BYTE PTR [eax+10452]
  01382	85 c9		 test	 ecx, ecx
  01384	74 02		 je	 SHORT $LN3@CheckMaxWi

; 695  : 		{
; 696  : 			continue;

  01386	eb 85		 jmp	 SHORT $LN10@CheckMaxWi
$LN3@CheckMaxWi:

; 697  : 		}
; 698  : 
; 699  : 		if(lpUser->hdd_id == lpTempObj->hdd_id)

  01388	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0138b	8b 4d e8	 mov	 ecx, DWORD PTR _lpTempObj$228109[ebp]
  0138e	8b 90 8c 28 00
	00		 mov	 edx, DWORD PTR [eax+10380]
  01394	3b 91 8c 28 00
	00		 cmp	 edx, DWORD PTR [ecx+10380]
  0139a	75 09		 jne	 SHORT $LN2@CheckMaxWi

; 700  : 		{
; 701  : 			iWaxCount++;

  0139c	8b 45 f0	 mov	 eax, DWORD PTR _iWaxCount$[ebp]
  0139f	83 c0 01	 add	 eax, 1
  013a2	89 45 f0	 mov	 DWORD PTR _iWaxCount$[ebp], eax
$LN2@CheckMaxWi:

; 702  : 		}
; 703  : 	}

  013a5	e9 63 ff ff ff	 jmp	 $LN10@CheckMaxWi
$LN9@CheckMaxWi:

; 704  : 
; 705  : 	if(iWaxCount > this->m_MaxWindow)

  013aa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  013ad	8b 4d f0	 mov	 ecx, DWORD PTR _iWaxCount$[ebp]
  013b0	3b 88 28 00 01
	00		 cmp	 ecx, DWORD PTR [eax+65576]
  013b6	7e 77		 jle	 SHORT $LN15@CheckMaxWi

; 706  : 	{
; 707  : 		char szTemp[256] = { 0 };

  013b8	c6 85 e8 fe ff
	ff 00		 mov	 BYTE PTR _szTemp$228118[ebp], 0
  013bf	68 ff 00 00 00	 push	 255			; 000000ffH
  013c4	6a 00		 push	 0
  013c6	8d 85 e9 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$228118[ebp+1]
  013cc	50		 push	 eax
  013cd	e8 00 00 00 00	 call	 _memset
  013d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 708  : 		sprintf(szTemp, "Max Windows Count: %d", this->m_MaxWindow);

  013d5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  013d8	8b 88 28 00 01
	00		 mov	 ecx, DWORD PTR [eax+65576]
  013de	51		 push	 ecx
  013df	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@LEABKPHO@Max?5Windows?5Count?3?5?$CFd?$AA@
  013e4	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$228118[ebp]
  013ea	52		 push	 edx
  013eb	e8 00 00 00 00	 call	 _sprintf
  013f0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 709  : 		GCServerMsgStringSend("..:: Anti-Cheat ::..", lpUser->m_Index, 0);

  013f3	6a 00		 push	 0
  013f5	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  013f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  013fa	51		 push	 ecx
  013fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PIPPDFMK@?4?4?3?3?5Anti?9Cheat?5?3?3?4?4?$AA@
  01400	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01405	83 c4 0c	 add	 esp, 12			; 0000000cH

; 710  : 		GCServerMsgStringSend(szTemp, lpUser->m_Index, 0);

  01408	6a 00		 push	 0
  0140a	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0140d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0140f	51		 push	 ecx
  01410	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$228118[ebp]
  01416	52		 push	 edx
  01417	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0141c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 711  : 
; 712  : 		#ifdef _RECONNECT_				
; 713  : 		g_ConnectEx.SendClose(UserIndex,NORM_DC);

  0141f	6a 00		 push	 0
  01421	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  01424	50		 push	 eax
  01425	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectEx@@3VConnectEx@@A ; g_ConnectEx
  0142a	e8 00 00 00 00	 call	 ?SendClose@ConnectEx@@QAEXHH@Z ; ConnectEx::SendClose
$LN15@CheckMaxWi:

; 714  : 		#else
; 715  : 		CloseClient(UserIndex);
; 716  : 		#endif
; 717  : 	}
; 718  : }

  0142f	5f		 pop	 edi
  01430	5e		 pop	 esi
  01431	5b		 pop	 ebx
  01432	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01435	33 cd		 xor	 ecx, ebp
  01437	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0143c	8b e5		 mov	 esp, ebp
  0143e	5d		 pop	 ebp
  0143f	c2 04 00	 ret	 4
?CheckMaxWindow@AntiCheatPlus@@QAEXH@Z ENDP		; AntiCheatPlus::CheckMaxWindow
_TEXT	ENDS
PUBLIC	??_C@_0BE@DHHNDLAO@Warehouse?5Item?5Dupe?$AA@	; `string'
PUBLIC	?CheckWareDupe@AntiCheatPlus@@QAE_NHHH@Z	; AntiCheatPlus::CheckWareDupe
PUBLIC	??_C@_0BE@CPHCFFNO@Inventory?5Item?5Dupe?$AA@	; `string'
PUBLIC	?CheckItemDupe@AntiCheatPlus@@QAE_NHHH@Z	; AntiCheatPlus::CheckItemDupe
PUBLIC	?CheckItemSerial@AntiCheatPlus@@QAE_NH@Z	; AntiCheatPlus::CheckItemSerial
PUBLIC	?RunItemDupe@AntiCheatPlus@@QAEXXZ		; AntiCheatPlus::RunItemDupe
EXTRN	?GetNumber@CItem@@QAEKXZ:PROC			; CItem::GetNumber
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
;	COMDAT ??_C@_0BE@DHHNDLAO@Warehouse?5Item?5Dupe?$AA@
CONST	SEGMENT
??_C@_0BE@DHHNDLAO@Warehouse?5Item?5Dupe?$AA@ DB 'Warehouse Item Dupe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CPHCFFNO@Inventory?5Item?5Dupe?$AA@
CONST	SEGMENT
??_C@_0BE@CPHCFFNO@Inventory?5Item?5Dupe?$AA@ DB 'Inventory Item Dupe', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iNextSerial$228148 = -28				; size = 4
_i$228142 = -24						; size = 4
_iItemSerial$228139 = -20				; size = 4
_i$228133 = -16						; size = 4
_lpUser$228128 = -12					; size = 4
_aIndex$228124 = -8					; size = 4
_this$ = -4						; size = 4
?RunItemDupe@AntiCheatPlus@@QAEXXZ PROC			; AntiCheatPlus::RunItemDupe
; _this$ = ecx

; 724  : {

  01450	55		 push	 ebp
  01451	8b ec		 mov	 ebp, esp
  01453	83 ec 5c	 sub	 esp, 92			; 0000005cH
  01456	53		 push	 ebx
  01457	56		 push	 esi
  01458	57		 push	 edi
  01459	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 725  : 	if(!this->ScanItemDupeActive)

  0145c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0145f	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  01463	85 c9		 test	 ecx, ecx
  01465	75 05		 jne	 SHORT $LN20@RunItemDup

; 726  : 	{
; 727  : 		return;

  01467	e9 1b 02 00 00	 jmp	 $LN21@RunItemDup
$LN20@RunItemDup:

; 728  : 	}
; 729  : 
; 730  : 	for(int aIndex = OBJ_STARTUSERINDEX; aIndex < OBJMAX; aIndex++)

  0146c	c7 45 f8 b0 36
	00 00		 mov	 DWORD PTR _aIndex$228124[ebp], 14000 ; 000036b0H
  01473	eb 09		 jmp	 SHORT $LN19@RunItemDup
$LN18@RunItemDup:
  01475	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$228124[ebp]
  01478	83 c0 01	 add	 eax, 1
  0147b	89 45 f8	 mov	 DWORD PTR _aIndex$228124[ebp], eax
$LN19@RunItemDup:
  0147e	81 7d f8 98 3a
	00 00		 cmp	 DWORD PTR _aIndex$228124[ebp], 15000 ; 00003a98H
  01485	0f 8d fc 01 00
	00		 jge	 $LN21@RunItemDup

; 731  : 	{
; 732  : 		LPOBJ lpUser = &gObj[aIndex];

  0148b	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$228124[ebp]
  0148e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01494	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0149a	89 45 f4	 mov	 DWORD PTR _lpUser$228128[ebp], eax

; 733  : 
; 734  : 		if(lpUser->Connected < PLAYER_PLAYING)

  0149d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$228128[ebp]
  014a0	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  014a4	7d 02		 jge	 SHORT $LN16@RunItemDup

; 735  : 		{
; 736  : 			continue;

  014a6	eb cd		 jmp	 SHORT $LN18@RunItemDup
$LN16@RunItemDup:

; 737  : 		}	
; 738  : 
; 739  : 		if(lpUser->OffTrade != 0)

  014a8	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$228128[ebp]
  014ab	83 b8 ac 22 00
	00 00		 cmp	 DWORD PTR [eax+8876], 0
  014b2	74 02		 je	 SHORT $LN15@RunItemDup

; 740  : 		{
; 741  : 			continue;

  014b4	eb bf		 jmp	 SHORT $LN18@RunItemDup
$LN15@RunItemDup:

; 742  : 		}
; 743  : 
; 744  : 		if(lpUser->OffExp != 0)

  014b6	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$228128[ebp]
  014b9	83 b8 98 22 00
	00 00		 cmp	 DWORD PTR [eax+8856], 0
  014c0	74 02		 je	 SHORT $LN14@RunItemDup

; 745  : 		{
; 746  : 			continue;

  014c2	eb b1		 jmp	 SHORT $LN18@RunItemDup
$LN14@RunItemDup:

; 747  : 		}
; 748  : 
; 749  : 		if(lpUser->m_OfflineMode != 0)

  014c4	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$228128[ebp]
  014c7	0f b6 88 d4 28
	00 00		 movzx	 ecx, BYTE PTR [eax+10452]
  014ce	85 c9		 test	 ecx, ecx
  014d0	74 02		 je	 SHORT $LN13@RunItemDup

; 750  : 		{
; 751  : 			continue;

  014d2	eb a1		 jmp	 SHORT $LN18@RunItemDup
$LN13@RunItemDup:

; 752  : 		}
; 753  : 
; 754  : 		for(int i = 0; i < INVENTORY_SIZE; i++)

  014d4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$228133[ebp], 0
  014db	eb 09		 jmp	 SHORT $LN12@RunItemDup
$LN11@RunItemDup:
  014dd	8b 45 f0	 mov	 eax, DWORD PTR _i$228133[ebp]
  014e0	83 c0 01	 add	 eax, 1
  014e3	89 45 f0	 mov	 DWORD PTR _i$228133[ebp], eax
$LN12@RunItemDup:
  014e6	81 7d f0 ec 00
	00 00		 cmp	 DWORD PTR _i$228133[ebp], 236 ; 000000ecH
  014ed	0f 8d b8 00 00
	00		 jge	 $LN10@RunItemDup

; 755  : 		{
; 756  : 			if(!lpUser->pInventory[i].IsItem())

  014f3	8b 4d f0	 mov	 ecx, DWORD PTR _i$228133[ebp]
  014f6	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  014fc	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$228128[ebp]
  014ff	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  01505	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0150a	85 c0		 test	 eax, eax
  0150c	75 02		 jne	 SHORT $LN9@RunItemDup

; 757  : 			{
; 758  : 				continue;

  0150e	eb cd		 jmp	 SHORT $LN11@RunItemDup
$LN9@RunItemDup:

; 759  : 			}
; 760  : 
; 761  : 			if(!this->CheckItemSerial(lpUser->pInventory[i].m_Type))

  01510	8b 45 f0	 mov	 eax, DWORD PTR _i$228133[ebp]
  01513	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01519	8b 4d f4	 mov	 ecx, DWORD PTR _lpUser$228128[ebp]
  0151c	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01522	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01527	50		 push	 eax
  01528	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0152b	e8 00 00 00 00	 call	 ?CheckItemSerial@AntiCheatPlus@@QAE_NH@Z ; AntiCheatPlus::CheckItemSerial
  01530	0f b6 c8	 movzx	 ecx, al
  01533	85 c9		 test	 ecx, ecx
  01535	75 02		 jne	 SHORT $LN8@RunItemDup

; 762  : 			{
; 763  : 				continue;

  01537	eb a4		 jmp	 SHORT $LN11@RunItemDup
$LN8@RunItemDup:

; 764  : 			}
; 765  : 
; 766  : 			int iItemSerial = lpUser->pInventory[i].GetNumber();

  01539	8b 4d f0	 mov	 ecx, DWORD PTR _i$228133[ebp]
  0153c	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01542	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$228128[ebp]
  01545	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  0154b	e8 00 00 00 00	 call	 ?GetNumber@CItem@@QAEKXZ ; CItem::GetNumber
  01550	89 45 ec	 mov	 DWORD PTR _iItemSerial$228139[ebp], eax

; 767  : 
; 768  : 			if(!this->CheckItemDupe(aIndex, iItemSerial, i))

  01553	8b 45 f0	 mov	 eax, DWORD PTR _i$228133[ebp]
  01556	50		 push	 eax
  01557	8b 4d ec	 mov	 ecx, DWORD PTR _iItemSerial$228139[ebp]
  0155a	51		 push	 ecx
  0155b	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$228124[ebp]
  0155e	52		 push	 edx
  0155f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01562	e8 00 00 00 00	 call	 ?CheckItemDupe@AntiCheatPlus@@QAE_NHHH@Z ; AntiCheatPlus::CheckItemDupe
  01567	0f b6 c0	 movzx	 eax, al
  0156a	85 c0		 test	 eax, eax
  0156c	75 38		 jne	 SHORT $LN7@RunItemDup

; 769  : 			{
; 770  : 				GCServerMsgStringSend("..:: Anti-Cheat ::..", aIndex, 0);

  0156e	6a 00		 push	 0
  01570	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$228124[ebp]
  01573	50		 push	 eax
  01574	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PIPPDFMK@?4?4?3?3?5Anti?9Cheat?5?3?3?4?4?$AA@
  01579	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0157e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 771  : 				GCServerMsgStringSend("Inventory Item Dupe", aIndex, 0);

  01581	6a 00		 push	 0
  01583	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$228124[ebp]
  01586	50		 push	 eax
  01587	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPHCFFNO@Inventory?5Item?5Dupe?$AA@
  0158c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01591	83 c4 0c	 add	 esp, 12			; 0000000cH

; 772  : 
; 773  : 				#ifdef _RECONNECT_				
; 774  : 				g_ConnectEx.SendClose(aIndex,NORM_DC);

  01594	6a 00		 push	 0
  01596	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$228124[ebp]
  01599	50		 push	 eax
  0159a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectEx@@3VConnectEx@@A ; g_ConnectEx
  0159f	e8 00 00 00 00	 call	 ?SendClose@ConnectEx@@QAEXHH@Z ; ConnectEx::SendClose

; 775  : 				#else
; 776  : 				CloseClient(UserIndex);
; 777  : 				#endif		
; 778  : 				
; 779  : 				break;	

  015a4	eb 05		 jmp	 SHORT $LN10@RunItemDup
$LN7@RunItemDup:

; 780  : 			}
; 781  : 		}

  015a6	e9 32 ff ff ff	 jmp	 $LN11@RunItemDup
$LN10@RunItemDup:

; 782  : 
; 783  : 		for(int i = 0; i < WAREHOUSE_SIZE; i++)

  015ab	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$228142[ebp], 0
  015b2	eb 09		 jmp	 SHORT $LN6@RunItemDup
$LN5@RunItemDup:
  015b4	8b 45 e8	 mov	 eax, DWORD PTR _i$228142[ebp]
  015b7	83 c0 01	 add	 eax, 1
  015ba	89 45 e8	 mov	 DWORD PTR _i$228142[ebp], eax
$LN6@RunItemDup:
  015bd	81 7d e8 f0 00
	00 00		 cmp	 DWORD PTR _i$228142[ebp], 240 ; 000000f0H
  015c4	0f 8d b8 00 00
	00		 jge	 $LN4@RunItemDup

; 784  : 		{
; 785  : 			if(!lpUser->pWarehouse[i].IsItem())

  015ca	8b 4d e8	 mov	 ecx, DWORD PTR _i$228142[ebp]
  015cd	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  015d3	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$228128[ebp]
  015d6	03 88 5c 0e 00
	00		 add	 ecx, DWORD PTR [eax+3676]
  015dc	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  015e1	85 c0		 test	 eax, eax
  015e3	75 02		 jne	 SHORT $LN3@RunItemDup

; 786  : 			{
; 787  : 				continue;

  015e5	eb cd		 jmp	 SHORT $LN5@RunItemDup
$LN3@RunItemDup:

; 788  : 			}
; 789  : 
; 790  : 			if(!this->CheckItemSerial(lpUser->pWarehouse[i].m_Type))

  015e7	8b 45 e8	 mov	 eax, DWORD PTR _i$228142[ebp]
  015ea	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  015f0	8b 4d f4	 mov	 ecx, DWORD PTR _lpUser$228128[ebp]
  015f3	8b 91 5c 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3676]
  015f9	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  015fe	50		 push	 eax
  015ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01602	e8 00 00 00 00	 call	 ?CheckItemSerial@AntiCheatPlus@@QAE_NH@Z ; AntiCheatPlus::CheckItemSerial
  01607	0f b6 c8	 movzx	 ecx, al
  0160a	85 c9		 test	 ecx, ecx
  0160c	75 02		 jne	 SHORT $LN2@RunItemDup

; 791  : 			{
; 792  : 				continue;

  0160e	eb a4		 jmp	 SHORT $LN5@RunItemDup
$LN2@RunItemDup:

; 793  : 			}
; 794  : 
; 795  : 			int iNextSerial = lpUser->pWarehouse[i].GetNumber();

  01610	8b 4d e8	 mov	 ecx, DWORD PTR _i$228142[ebp]
  01613	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01619	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$228128[ebp]
  0161c	03 88 5c 0e 00
	00		 add	 ecx, DWORD PTR [eax+3676]
  01622	e8 00 00 00 00	 call	 ?GetNumber@CItem@@QAEKXZ ; CItem::GetNumber
  01627	89 45 e4	 mov	 DWORD PTR _iNextSerial$228148[ebp], eax

; 796  : 
; 797  : 			if(!this->CheckWareDupe(aIndex, iNextSerial, i))

  0162a	8b 45 e8	 mov	 eax, DWORD PTR _i$228142[ebp]
  0162d	50		 push	 eax
  0162e	8b 4d e4	 mov	 ecx, DWORD PTR _iNextSerial$228148[ebp]
  01631	51		 push	 ecx
  01632	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$228124[ebp]
  01635	52		 push	 edx
  01636	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01639	e8 00 00 00 00	 call	 ?CheckWareDupe@AntiCheatPlus@@QAE_NHHH@Z ; AntiCheatPlus::CheckWareDupe
  0163e	0f b6 c0	 movzx	 eax, al
  01641	85 c0		 test	 eax, eax
  01643	75 38		 jne	 SHORT $LN1@RunItemDup

; 798  : 			{
; 799  : 				GCServerMsgStringSend("..:: Anti-Cheat ::..", aIndex, 0);

  01645	6a 00		 push	 0
  01647	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$228124[ebp]
  0164a	50		 push	 eax
  0164b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PIPPDFMK@?4?4?3?3?5Anti?9Cheat?5?3?3?4?4?$AA@
  01650	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01655	83 c4 0c	 add	 esp, 12			; 0000000cH

; 800  : 				GCServerMsgStringSend("Warehouse Item Dupe", aIndex, 0);

  01658	6a 00		 push	 0
  0165a	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$228124[ebp]
  0165d	50		 push	 eax
  0165e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DHHNDLAO@Warehouse?5Item?5Dupe?$AA@
  01663	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  01668	83 c4 0c	 add	 esp, 12			; 0000000cH

; 801  : 
; 802  : 				#ifdef _RECONNECT_				
; 803  : 				g_ConnectEx.SendClose(aIndex,NORM_DC);

  0166b	6a 00		 push	 0
  0166d	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$228124[ebp]
  01670	50		 push	 eax
  01671	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectEx@@3VConnectEx@@A ; g_ConnectEx
  01676	e8 00 00 00 00	 call	 ?SendClose@ConnectEx@@QAEXHH@Z ; ConnectEx::SendClose

; 804  : 				#else
; 805  : 				CloseClient(UserIndex);
; 806  : 				#endif		
; 807  : 				
; 808  : 				break;	

  0167b	eb 05		 jmp	 SHORT $LN4@RunItemDup
$LN1@RunItemDup:

; 809  : 			}
; 810  : 		}

  0167d	e9 32 ff ff ff	 jmp	 $LN5@RunItemDup
$LN4@RunItemDup:

; 811  : 	}

  01682	e9 ee fd ff ff	 jmp	 $LN18@RunItemDup
$LN21@RunItemDup:

; 812  : }

  01687	5f		 pop	 edi
  01688	5e		 pop	 esi
  01689	5b		 pop	 ebx
  0168a	8b e5		 mov	 esp, ebp
  0168c	5d		 pop	 ebp
  0168d	c3		 ret	 0
?RunItemDupe@AntiCheatPlus@@QAEXXZ ENDP			; AntiCheatPlus::RunItemDupe
; Function compile flags: /Odtp /ZI
_iNextSerial$228173 = -24				; size = 4
_n$228167 = -20						; size = 4
_iNextSerial$228165 = -16				; size = 4
_n$228158 = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_UserIndex$ = 8						; size = 4
_ItemSerial$ = 12					; size = 4
_ItemPos$ = 16						; size = 4
?CheckItemDupe@AntiCheatPlus@@QAE_NHHH@Z PROC		; AntiCheatPlus::CheckItemDupe
; _this$ = ecx

; 815  : {

  01690	55		 push	 ebp
  01691	8b ec		 mov	 ebp, esp
  01693	83 ec 58	 sub	 esp, 88			; 00000058H
  01696	53		 push	 ebx
  01697	56		 push	 esi
  01698	57		 push	 edi
  01699	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 816  : 	LPOBJ lpUser = &gObj[UserIndex];

  0169c	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  0169f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  016a5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  016ab	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 817  : 
; 818  : 	for(int n = 0; n < INVENTORY_SIZE; n++)

  016ae	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$228158[ebp], 0
  016b5	eb 09		 jmp	 SHORT $LN13@CheckItemD
$LN12@CheckItemD:
  016b7	8b 45 f4	 mov	 eax, DWORD PTR _n$228158[ebp]
  016ba	83 c0 01	 add	 eax, 1
  016bd	89 45 f4	 mov	 DWORD PTR _n$228158[ebp], eax
$LN13@CheckItemD:
  016c0	81 7d f4 ec 00
	00 00		 cmp	 DWORD PTR _n$228158[ebp], 236 ; 000000ecH
  016c7	7d 7e		 jge	 SHORT $LN11@CheckItemD

; 819  : 	{
; 820  : 		if(ItemPos == n)

  016c9	8b 45 10	 mov	 eax, DWORD PTR _ItemPos$[ebp]
  016cc	3b 45 f4	 cmp	 eax, DWORD PTR _n$228158[ebp]
  016cf	75 02		 jne	 SHORT $LN10@CheckItemD

; 821  : 		{
; 822  : 			continue;

  016d1	eb e4		 jmp	 SHORT $LN12@CheckItemD
$LN10@CheckItemD:

; 823  : 		}
; 824  : 
; 825  : 		if(!lpUser->pInventory[n].IsItem())

  016d3	8b 4d f4	 mov	 ecx, DWORD PTR _n$228158[ebp]
  016d6	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  016dc	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  016df	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  016e5	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  016ea	85 c0		 test	 eax, eax
  016ec	75 02		 jne	 SHORT $LN9@CheckItemD

; 826  : 		{
; 827  : 			continue;

  016ee	eb c7		 jmp	 SHORT $LN12@CheckItemD
$LN9@CheckItemD:

; 828  : 		}
; 829  : 
; 830  : 		if(!this->CheckItemSerial(lpUser->pInventory[n].m_Type))

  016f0	8b 45 f4	 mov	 eax, DWORD PTR _n$228158[ebp]
  016f3	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  016f9	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  016fc	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01702	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01707	50		 push	 eax
  01708	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0170b	e8 00 00 00 00	 call	 ?CheckItemSerial@AntiCheatPlus@@QAE_NH@Z ; AntiCheatPlus::CheckItemSerial
  01710	0f b6 c8	 movzx	 ecx, al
  01713	85 c9		 test	 ecx, ecx
  01715	75 02		 jne	 SHORT $LN8@CheckItemD

; 831  : 		{
; 832  : 			continue;

  01717	eb 9e		 jmp	 SHORT $LN12@CheckItemD
$LN8@CheckItemD:

; 833  : 		}
; 834  : 
; 835  : 		int iNextSerial = lpUser->pInventory[n].GetNumber();

  01719	8b 4d f4	 mov	 ecx, DWORD PTR _n$228158[ebp]
  0171c	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01722	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01725	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  0172b	e8 00 00 00 00	 call	 ?GetNumber@CItem@@QAEKXZ ; CItem::GetNumber
  01730	89 45 f0	 mov	 DWORD PTR _iNextSerial$228165[ebp], eax

; 836  : 
; 837  : 		if(ItemSerial == iNextSerial)

  01733	8b 45 0c	 mov	 eax, DWORD PTR _ItemSerial$[ebp]
  01736	3b 45 f0	 cmp	 eax, DWORD PTR _iNextSerial$228165[ebp]
  01739	75 07		 jne	 SHORT $LN7@CheckItemD

; 838  : 		{
; 839  : 			//MsgOutput(UserIndex, "%d = %d ( %d , %d )", ItemPos, n, ItemSerial, iNextSerial);
; 840  : 
; 841  : 			return false;

  0173b	32 c0		 xor	 al, al
  0173d	e9 90 00 00 00	 jmp	 $LN14@CheckItemD
$LN7@CheckItemD:

; 842  : 		}
; 843  : 	}

  01742	e9 70 ff ff ff	 jmp	 $LN12@CheckItemD
$LN11@CheckItemD:

; 844  : 
; 845  : 	for(int n = 0; n < WAREHOUSE_SIZE; n++)

  01747	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _n$228167[ebp], 0
  0174e	eb 09		 jmp	 SHORT $LN6@CheckItemD
$LN5@CheckItemD:
  01750	8b 45 ec	 mov	 eax, DWORD PTR _n$228167[ebp]
  01753	83 c0 01	 add	 eax, 1
  01756	89 45 ec	 mov	 DWORD PTR _n$228167[ebp], eax
$LN6@CheckItemD:
  01759	81 7d ec f0 00
	00 00		 cmp	 DWORD PTR _n$228167[ebp], 240 ; 000000f0H
  01760	7d 6e		 jge	 SHORT $LN4@CheckItemD

; 846  : 	{
; 847  : 		if(!lpUser->pWarehouse[n].IsItem())

  01762	8b 4d ec	 mov	 ecx, DWORD PTR _n$228167[ebp]
  01765	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0176b	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0176e	03 88 5c 0e 00
	00		 add	 ecx, DWORD PTR [eax+3676]
  01774	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  01779	85 c0		 test	 eax, eax
  0177b	75 02		 jne	 SHORT $LN3@CheckItemD

; 848  : 		{
; 849  : 			continue;

  0177d	eb d1		 jmp	 SHORT $LN5@CheckItemD
$LN3@CheckItemD:

; 850  : 		}
; 851  : 
; 852  : 		if(!this->CheckItemSerial(lpUser->pWarehouse[n].m_Type))

  0177f	8b 45 ec	 mov	 eax, DWORD PTR _n$228167[ebp]
  01782	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  01788	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0178b	8b 91 5c 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3676]
  01791	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  01796	50		 push	 eax
  01797	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0179a	e8 00 00 00 00	 call	 ?CheckItemSerial@AntiCheatPlus@@QAE_NH@Z ; AntiCheatPlus::CheckItemSerial
  0179f	0f b6 c8	 movzx	 ecx, al
  017a2	85 c9		 test	 ecx, ecx
  017a4	75 02		 jne	 SHORT $LN2@CheckItemD

; 853  : 		{
; 854  : 			continue;

  017a6	eb a8		 jmp	 SHORT $LN5@CheckItemD
$LN2@CheckItemD:

; 855  : 		}
; 856  : 
; 857  : 		int iNextSerial = lpUser->pWarehouse[n].GetNumber();

  017a8	8b 4d ec	 mov	 ecx, DWORD PTR _n$228167[ebp]
  017ab	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  017b1	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  017b4	03 88 5c 0e 00
	00		 add	 ecx, DWORD PTR [eax+3676]
  017ba	e8 00 00 00 00	 call	 ?GetNumber@CItem@@QAEKXZ ; CItem::GetNumber
  017bf	89 45 e8	 mov	 DWORD PTR _iNextSerial$228173[ebp], eax

; 858  : 
; 859  : 		if(ItemSerial == iNextSerial)

  017c2	8b 45 0c	 mov	 eax, DWORD PTR _ItemSerial$[ebp]
  017c5	3b 45 e8	 cmp	 eax, DWORD PTR _iNextSerial$228173[ebp]
  017c8	75 04		 jne	 SHORT $LN1@CheckItemD

; 860  : 		{
; 861  : 			return false;

  017ca	32 c0		 xor	 al, al
  017cc	eb 04		 jmp	 SHORT $LN14@CheckItemD
$LN1@CheckItemD:

; 862  : 		}
; 863  : 	}

  017ce	eb 80		 jmp	 SHORT $LN5@CheckItemD
$LN4@CheckItemD:

; 864  : 
; 865  : 	return true;

  017d0	b0 01		 mov	 al, 1
$LN14@CheckItemD:

; 866  : }

  017d2	5f		 pop	 edi
  017d3	5e		 pop	 esi
  017d4	5b		 pop	 ebx
  017d5	8b e5		 mov	 esp, ebp
  017d7	5d		 pop	 ebp
  017d8	c2 0c 00	 ret	 12			; 0000000cH
?CheckItemDupe@AntiCheatPlus@@QAE_NHHH@Z ENDP		; AntiCheatPlus::CheckItemDupe
; Function compile flags: /Odtp /ZI
_iNextSerial$228196 = -24				; size = 4
_n$228190 = -20						; size = 4
_iNextSerial$228188 = -16				; size = 4
_n$228182 = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_UserIndex$ = 8						; size = 4
_ItemSerial$ = 12					; size = 4
_WarePos$ = 16						; size = 4
?CheckWareDupe@AntiCheatPlus@@QAE_NHHH@Z PROC		; AntiCheatPlus::CheckWareDupe
; _this$ = ecx

; 869  : {

  017e0	55		 push	 ebp
  017e1	8b ec		 mov	 ebp, esp
  017e3	83 ec 58	 sub	 esp, 88			; 00000058H
  017e6	53		 push	 ebx
  017e7	56		 push	 esi
  017e8	57		 push	 edi
  017e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 870  : 	LPOBJ lpUser = &gObj[UserIndex];

  017ec	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  017ef	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  017f5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  017fb	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 871  : 
; 872  : 	for(int n = 0; n < INVENTORY_SIZE; n++)

  017fe	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$228182[ebp], 0
  01805	eb 09		 jmp	 SHORT $LN12@CheckWareD
$LN11@CheckWareD:
  01807	8b 45 f4	 mov	 eax, DWORD PTR _n$228182[ebp]
  0180a	83 c0 01	 add	 eax, 1
  0180d	89 45 f4	 mov	 DWORD PTR _n$228182[ebp], eax
$LN12@CheckWareD:
  01810	81 7d f4 ec 00
	00 00		 cmp	 DWORD PTR _n$228182[ebp], 236 ; 000000ecH
  01817	7d 6e		 jge	 SHORT $LN10@CheckWareD

; 873  : 	{
; 874  : 		if(!lpUser->pInventory[n].IsItem())

  01819	8b 4d f4	 mov	 ecx, DWORD PTR _n$228182[ebp]
  0181c	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01822	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01825	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  0182b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  01830	85 c0		 test	 eax, eax
  01832	75 02		 jne	 SHORT $LN9@CheckWareD

; 875  : 		{
; 876  : 			continue;

  01834	eb d1		 jmp	 SHORT $LN11@CheckWareD
$LN9@CheckWareD:

; 877  : 		}
; 878  : 
; 879  : 		if(!this->CheckItemSerial(lpUser->pInventory[n].m_Type))

  01836	8b 45 f4	 mov	 eax, DWORD PTR _n$228182[ebp]
  01839	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0183f	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01842	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  01848	0f bf 44 02 06	 movsx	 eax, WORD PTR [edx+eax+6]
  0184d	50		 push	 eax
  0184e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01851	e8 00 00 00 00	 call	 ?CheckItemSerial@AntiCheatPlus@@QAE_NH@Z ; AntiCheatPlus::CheckItemSerial
  01856	0f b6 c8	 movzx	 ecx, al
  01859	85 c9		 test	 ecx, ecx
  0185b	75 02		 jne	 SHORT $LN8@CheckWareD

; 880  : 		{
; 881  : 			continue;

  0185d	eb a8		 jmp	 SHORT $LN11@CheckWareD
$LN8@CheckWareD:

; 882  : 		}
; 883  : 
; 884  : 		int iNextSerial = lpUser->pInventory[n].GetNumber();

  0185f	8b 4d f4	 mov	 ecx, DWORD PTR _n$228182[ebp]
  01862	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  01868	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0186b	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  01871	e8 00 00 00 00	 call	 ?GetNumber@CItem@@QAEKXZ ; CItem::GetNumber
  01876	89 45 f0	 mov	 DWORD PTR _iNextSerial$228188[ebp], eax

; 885  : 
; 886  : 		if(ItemSerial == iNextSerial)

  01879	8b 45 0c	 mov	 eax, DWORD PTR _ItemSerial$[ebp]
  0187c	3b 45 f0	 cmp	 eax, DWORD PTR _iNextSerial$228188[ebp]
  0187f	75 04		 jne	 SHORT $LN7@CheckWareD

; 887  : 		{
; 888  : 			return false;

  01881	32 c0		 xor	 al, al
  01883	eb 6e		 jmp	 SHORT $LN13@CheckWareD
$LN7@CheckWareD:

; 889  : 		}
; 890  : 	}

  01885	eb 80		 jmp	 SHORT $LN11@CheckWareD
$LN10@CheckWareD:

; 891  : 
; 892  : 	for(int n = 0; n < WAREHOUSE_SIZE; n++)

  01887	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _n$228190[ebp], 0
  0188e	eb 09		 jmp	 SHORT $LN6@CheckWareD
$LN5@CheckWareD:
  01890	8b 45 ec	 mov	 eax, DWORD PTR _n$228190[ebp]
  01893	83 c0 01	 add	 eax, 1
  01896	89 45 ec	 mov	 DWORD PTR _n$228190[ebp], eax
$LN6@CheckWareD:
  01899	81 7d ec f0 00
	00 00		 cmp	 DWORD PTR _n$228190[ebp], 240 ; 000000f0H
  018a0	7d 4f		 jge	 SHORT $LN4@CheckWareD

; 893  : 	{
; 894  : 		if(WarePos == n)

  018a2	8b 45 10	 mov	 eax, DWORD PTR _WarePos$[ebp]
  018a5	3b 45 ec	 cmp	 eax, DWORD PTR _n$228190[ebp]
  018a8	75 02		 jne	 SHORT $LN3@CheckWareD

; 895  : 		{
; 896  : 			continue;

  018aa	eb e4		 jmp	 SHORT $LN5@CheckWareD
$LN3@CheckWareD:

; 897  : 		}
; 898  : 
; 899  : 		if(!lpUser->pWarehouse[n].IsItem())

  018ac	8b 4d ec	 mov	 ecx, DWORD PTR _n$228190[ebp]
  018af	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  018b5	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  018b8	03 88 5c 0e 00
	00		 add	 ecx, DWORD PTR [eax+3676]
  018be	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  018c3	85 c0		 test	 eax, eax
  018c5	75 02		 jne	 SHORT $LN2@CheckWareD

; 900  : 		{
; 901  : 			continue;

  018c7	eb c7		 jmp	 SHORT $LN5@CheckWareD
$LN2@CheckWareD:

; 902  : 		}
; 903  : 
; 904  : 		int iNextSerial = lpUser->pWarehouse[n].GetNumber();

  018c9	8b 4d ec	 mov	 ecx, DWORD PTR _n$228190[ebp]
  018cc	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  018d2	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  018d5	03 88 5c 0e 00
	00		 add	 ecx, DWORD PTR [eax+3676]
  018db	e8 00 00 00 00	 call	 ?GetNumber@CItem@@QAEKXZ ; CItem::GetNumber
  018e0	89 45 e8	 mov	 DWORD PTR _iNextSerial$228196[ebp], eax

; 905  : 
; 906  : 		if(ItemSerial == iNextSerial)

  018e3	8b 45 0c	 mov	 eax, DWORD PTR _ItemSerial$[ebp]
  018e6	3b 45 e8	 cmp	 eax, DWORD PTR _iNextSerial$228196[ebp]
  018e9	75 04		 jne	 SHORT $LN1@CheckWareD

; 907  : 		{
; 908  : 			return false;

  018eb	32 c0		 xor	 al, al
  018ed	eb 04		 jmp	 SHORT $LN13@CheckWareD
$LN1@CheckWareD:

; 909  : 		}
; 910  : 	}

  018ef	eb 9f		 jmp	 SHORT $LN5@CheckWareD
$LN4@CheckWareD:

; 911  : 
; 912  : 	return true;

  018f1	b0 01		 mov	 al, 1
$LN13@CheckWareD:

; 913  : }

  018f3	5f		 pop	 edi
  018f4	5e		 pop	 esi
  018f5	5b		 pop	 ebx
  018f6	8b e5		 mov	 esp, ebp
  018f8	5d		 pop	 ebp
  018f9	c2 0c 00	 ret	 12			; 0000000cH
?CheckWareDupe@AntiCheatPlus@@QAE_NHHH@Z ENDP		; AntiCheatPlus::CheckWareDupe
_TEXT	ENDS
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ItemType$ = 8						; size = 4
?CheckItemSerial@AntiCheatPlus@@QAE_NH@Z PROC		; AntiCheatPlus::CheckItemSerial
; _this$ = ecx

; 916  : {

  01900	55		 push	 ebp
  01901	8b ec		 mov	 ebp, esp
  01903	83 ec 44	 sub	 esp, 68			; 00000044H
  01906	53		 push	 ebx
  01907	56		 push	 esi
  01908	57		 push	 edi
  01909	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 917  : 	if(!ItemAttribute[ItemType].Serial)

  0190c	8b 45 08	 mov	 eax, DWORD PTR _ItemType$[ebp]
  0190f	6b c0 70	 imul	 eax, 112		; 00000070H
  01912	0f be 88 25 00
	00 00		 movsx	 ecx, BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+37]
  01919	85 c9		 test	 ecx, ecx
  0191b	75 04		 jne	 SHORT $LN1@CheckItemS

; 918  : 	{
; 919  : 		return false;

  0191d	32 c0		 xor	 al, al
  0191f	eb 02		 jmp	 SHORT $LN2@CheckItemS
$LN1@CheckItemS:

; 920  : 	}
; 921  : 
; 922  : 	return true;

  01921	b0 01		 mov	 al, 1
$LN2@CheckItemS:

; 923  : }

  01923	5f		 pop	 edi
  01924	5e		 pop	 esi
  01925	5b		 pop	 ebx
  01926	8b e5		 mov	 esp, ebp
  01928	5d		 pop	 ebp
  01929	c2 04 00	 ret	 4
?CheckItemSerial@AntiCheatPlus@@QAE_NH@Z ENDP		; AntiCheatPlus::CheckItemSerial
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEAAUBlockHDD_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEAAUBlockHDD_DATA@@I@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	8b 55 08	 mov	 edx, DWORD PTR __Pos$[ebp]
  00014	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEAAUBlockHDD_DATA@@I@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA const &>
PUBLIC	??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA &>
PUBLIC	?_Orphan_range@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXPAUBlockHDD_DATA@@0@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Reserve
PUBLIC	?_Inside@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBE_NPBUBlockHDD_DATA@@@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Inside
PUBLIC	??$addressof@$$CBUBlockHDD_DATA@@@std@@YAPBUBlockHDD_DATA@@ABU1@@Z ; std::addressof<BlockHDD_DATA const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXABUBlockHDD_DATA@@@Z
_TEXT	SEGMENT
__Idx$228226 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXABUBlockHDD_DATA@@@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUBlockHDD_DATA@@@std@@YAPBUBlockHDD_DATA@@ABU1@@Z ; std::addressof<BlockHDD_DATA const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBE_NPBUBlockHDD_DATA@@@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 78		 je	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUBlockHDD_DATA@@@std@@YAPBUBlockHDD_DATA@@ABU1@@Z ; std::addressof<BlockHDD_DATA const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	c1 f8 02	 sar	 eax, 2
  0003c	89 45 f8	 mov	 DWORD PTR __Idx$228226[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00048	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004b	75 0a		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	51		 push	 ecx
  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00064	50		 push	 eax
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXPAUBlockHDD_DATA@@0@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 f8	 mov	 edx, DWORD PTR __Idx$228226[ebp]
  00075	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00078	50		 push	 eax
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007f	52		 push	 edx
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 0c	 add	 eax, 12			; 0000000cH
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA &>
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00095	83 c1 04	 add	 ecx, 4
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  0009e	eb 57		 jmp	 SHORT $LN5@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a9	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000ac	75 0a		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  000ae	6a 01		 push	 1
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	51		 push	 ecx
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c5	50		 push	 eax
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXPAUBlockHDD_DATA@@0@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000ce	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d8	52		 push	 edx
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	83 c0 0c	 add	 eax, 12			; 0000000cH
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA const &>
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	83 c1 04	 add	 ecx, 4
  000f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f4	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back:

; 997  : 			}
; 998  : 		}

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?push_back@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXABUBlockHDD_DATA@@@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@0@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::erase
PUBLIC	?begin@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::begin
PUBLIC	?end@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T229279 = -88						; size = 4
$T229280 = -84						; size = 4
$T229281 = -80						; size = 4
$T229282 = -76						; size = 4
$T229283 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T229280[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T229279[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T229282[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T229281[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T229279[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T229281[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T229283[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@0@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXPAUBlockHDD_DATA@@0@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Destroy
PUBLIC	??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00@Z ; std::_Move<BlockHDD_DATA *,BlockHDD_DATA *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T229290 = -84						; size = 4
__Ptr$228417 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00@Z ; std::_Move<BlockHDD_DATA *,BlockHDD_DATA *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$228417[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$228417[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXPAUBlockHDD_DATA@@0@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$228417[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T229290[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T229290[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBE_NPBUBlockHDD_DATA@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBE_NPBUBlockHDD_DATA@@@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBE_NPBUBlockHDD_DATA@@@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::reserve
PUBLIC	?_Grow_to@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEII@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Grow_to
PUBLIC	?capacity@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::capacity
PUBLIC	?_Xlen@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Xlen
PUBLIC	?max_size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEII@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::reserve
$LN6@Reserve:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Reserve
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXPAUBlockHDD_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXPAUBlockHDD_DATA@@0@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXPAUBlockHDD_DATA@@0@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?deallocate@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@I@Z ; std::allocator<BlockHDD_DATA>::deallocate
PUBLIC	??$_Umove@PAUBlockHDD_DATA@@@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEPAUBlockHDD_DATA@@PAU2@00@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Umove<BlockHDD_DATA *>
PUBLIC	?allocate@?$allocator@UBlockHDD_DATA@@@std@@QAEPAUBlockHDD_DATA@@I@Z ; std::allocator<BlockHDD_DATA>::allocate
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$228459 = -28					; size = 4
__Ptr$228452 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Xlen
  00044	e9 eb 00 00 00	 jmp	 $LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 da 00 00
	00		 jae	 $LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UBlockHDD_DATA@@@std@@QAEPAUBlockHDD_DATA@@I@Z ; std::allocator<BlockHDD_DATA>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$228452[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$228452[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUBlockHDD_DATA@@@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEPAUBlockHDD_DATA@@PAU2@00@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Umove<BlockHDD_DATA *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve
__catch$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228452[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@I@Z ; std::allocator<BlockHDD_DATA>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$228459[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 35		 je	 SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXPAUBlockHDD_DATA@@0@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ef	2b 11		 sub	 edx, DWORD PTR [ecx]
  000f1	c1 fa 02	 sar	 edx, 2
  000f4	52		 push	 edx
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	51		 push	 ecx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00101	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@I@Z ; std::allocator<BlockHDD_DATA>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00111	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228452[ebp]
  00114	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00117	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR __Size$228459[ebp]
  00120	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228452[ebp]
  00123	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00126	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00129	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  0012c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228452[ebp]
  00132	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?capacity@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UBlockHDD_DATA@@@std@@QBEIXZ ; std::allocator<BlockHDD_DATA>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UBlockHDD_DATA@@@std@@QBEIXZ ; std::allocator<BlockHDD_DATA>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<BlockHDD_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXPAUBlockHDD_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXPAUBlockHDD_DATA@@0@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<BlockHDD_DATA> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXPAUBlockHDD_DATA@@0@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Xlen
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@I@Z PROC ; std::allocator<BlockHDD_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@I@Z ENDP ; std::allocator<BlockHDD_DATA>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Allocate@UBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@IPAU1@@Z ; std::_Allocate<BlockHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UBlockHDD_DATA@@@std@@QAEPAUBlockHDD_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UBlockHDD_DATA@@@std@@QAEPAUBlockHDD_DATA@@I@Z PROC ; std::allocator<BlockHDD_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@IPAU1@@Z ; std::_Allocate<BlockHDD_DATA>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UBlockHDD_DATA@@@std@@QAEPAUBlockHDD_DATA@@I@Z ENDP ; std::allocator<BlockHDD_DATA>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UBlockHDD_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UBlockHDD_DATA@@@std@@QBEIXZ PROC	; std::allocator<BlockHDD_DATA>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 3f		 mov	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UBlockHDD_DATA@@@std@@QBEIXZ ENDP	; std::allocator<BlockHDD_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QAE@PAUBlockHDD_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUBlockHDD_DATA@@@std@@YAPBUBlockHDD_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUBlockHDD_DATA@@@std@@YAPBUBlockHDD_DATA@@ABU1@@Z PROC ; std::addressof<BlockHDD_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUBlockHDD_DATA@@@std@@YAPBUBlockHDD_DATA@@ABU1@@Z ENDP ; std::addressof<BlockHDD_DATA const >
_TEXT	ENDS
PUBLIC	??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z ; std::allocator<BlockHDD_DATA>::construct<BlockHDD_DATA &>
PUBLIC	??$forward@AAUBlockHDD_DATA@@@std@@YAAAUBlockHDD_DATA@@AAU1@@Z ; std::forward<BlockHDD_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUBlockHDD_DATA@@@std@@YAAAUBlockHDD_DATA@@AAU1@@Z ; std::forward<BlockHDD_DATA &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z ; std::allocator<BlockHDD_DATA>::construct<BlockHDD_DATA &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@ABU3@@Z ; std::allocator<BlockHDD_DATA>::construct
PUBLIC	??$forward@ABUBlockHDD_DATA@@@std@@YAABUBlockHDD_DATA@@ABU1@@Z ; std::forward<BlockHDD_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUBlockHDD_DATA@@@std@@YAABUBlockHDD_DATA@@ABU1@@Z ; std::forward<BlockHDD_DATA const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@ABU3@@Z ; std::allocator<BlockHDD_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BlockHDD_DATA *,BlockHDD_DATA *>
PUBLIC	??$_Ptr_cat@UBlockHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBlockHDD_DATA@@0@Z ; std::_Ptr_cat<BlockHDD_DATA,BlockHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00@Z
_TEXT	SEGMENT
$T229358 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00@Z PROC ; std::_Move<BlockHDD_DATA *,BlockHDD_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UBlockHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBlockHDD_DATA@@0@Z ; std::_Ptr_cat<BlockHDD_DATA,BlockHDD_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229358[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229358[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BlockHDD_DATA *,BlockHDD_DATA *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00@Z ENDP ; std::_Move<BlockHDD_DATA *,BlockHDD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@@Z ; std::_Uninitialized_move<BlockHDD_DATA *,BlockHDD_DATA *,std::allocator<BlockHDD_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUBlockHDD_DATA@@@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEPAUBlockHDD_DATA@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUBlockHDD_DATA@@@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEPAUBlockHDD_DATA@@PAU2@00@Z PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Umove<BlockHDD_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@@Z ; std::_Uninitialized_move<BlockHDD_DATA *,BlockHDD_DATA *,std::allocator<BlockHDD_DATA> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUBlockHDD_DATA@@@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEPAUBlockHDD_DATA@@PAU2@00@Z ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Umove<BlockHDD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<BlockHDD_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@@Z
_TEXT	SEGMENT
$T229363 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<BlockHDD_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UBlockHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBlockHDD_DATA@@0@Z ; std::_Ptr_cat<BlockHDD_DATA,BlockHDD_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229363[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229363[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<BlockHDD_DATA> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<BlockHDD_DATA> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@UBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T229366 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@IPAU1@@Z PROC ; std::_Allocate<BlockHDD_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	c1 e0 02	 shl	 eax, 2
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T229366[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T229366[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@IPAU1@@Z ENDP ; std::_Allocate<BlockHDD_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z ; std::_Construct<BlockHDD_DATA,BlockHDD_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@ABU3@@Z PROC ; std::allocator<BlockHDD_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z ; std::_Construct<BlockHDD_DATA,BlockHDD_DATA const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@ABU3@@Z ENDP ; std::allocator<BlockHDD_DATA>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUBlockHDD_DATA@@@std@@YAAAUBlockHDD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUBlockHDD_DATA@@@std@@YAAAUBlockHDD_DATA@@AAU1@@Z PROC ; std::forward<BlockHDD_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUBlockHDD_DATA@@@std@@YAAAUBlockHDD_DATA@@AAU1@@Z ENDP ; std::forward<BlockHDD_DATA &>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229373 = -88						; size = 4
$T229374 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z PROC ; std::allocator<BlockHDD_DATA>::construct<BlockHDD_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T229374[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T229374[ebp], 0
  00047	74 1b		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUBlockHDD_DATA@@@std@@YAAAUBlockHDD_DATA@@AAU1@@Z ; std::forward<BlockHDD_DATA &>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 45 ac	 mov	 eax, DWORD PTR $T229374[ebp]
  0005a	89 10		 mov	 DWORD PTR [eax], edx
  0005c	8b 4d ac	 mov	 ecx, DWORD PTR $T229374[ebp]
  0005f	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00062	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00064	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  0006b	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  0006e	89 55 a8	 mov	 DWORD PTR $T229373[ebp], edx
  00071	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229374[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUBlockHDD_DATA@@@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@AAU2@@Z ENDP ; std::allocator<BlockHDD_DATA>::construct<BlockHDD_DATA &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUBlockHDD_DATA@@@std@@YAABUBlockHDD_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUBlockHDD_DATA@@@std@@YAABUBlockHDD_DATA@@ABU1@@Z PROC ; std::forward<BlockHDD_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUBlockHDD_DATA@@@std@@YAABUBlockHDD_DATA@@ABU1@@Z ENDP ; std::forward<BlockHDD_DATA const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UBlockHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBlockHDD_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UBlockHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBlockHDD_DATA@@0@Z PROC ; std::_Ptr_cat<BlockHDD_DATA,BlockHDD_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UBlockHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBlockHDD_DATA@@0@Z ENDP ; std::_Ptr_cat<BlockHDD_DATA,BlockHDD_DATA>
_TEXT	ENDS
PUBLIC	??$move@AAUBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z ; std::move<BlockHDD_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<BlockHDD_DATA *,BlockHDD_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 04	 add	 eax, 4
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 04	 add	 ecx, 4
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 15		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z ; std::move<BlockHDD_DATA &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00036	89 0a		 mov	 DWORD PTR [edx], ecx
  00038	eb d1		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  0003a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$_Move@PAUBlockHDD_DATA@@PAU1@@std@@YAPAUBlockHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<BlockHDD_DATA *,BlockHDD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BlockHDD_DATA *,BlockHDD_DATA *,std::allocator<BlockHDD_DATA>,BlockHDD_DATA>
PUBLIC	??$_Val_type@PAUBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@PAU1@@Z ; std::_Val_type<BlockHDD_DATA *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@@Z
_TEXT	SEGMENT
$T229396 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@@Z PROC ; std::_Uninitialized_move<BlockHDD_DATA *,BlockHDD_DATA *,std::allocator<BlockHDD_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UBlockHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBlockHDD_DATA@@0@Z ; std::_Ptr_cat<BlockHDD_DATA,BlockHDD_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229396[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229396[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@PAU1@@Z ; std::_Val_type<BlockHDD_DATA *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BlockHDD_DATA *,BlockHDD_DATA *,std::allocator<BlockHDD_DATA>,BlockHDD_DATA>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<BlockHDD_DATA *,BlockHDD_DATA *,std::allocator<BlockHDD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@@Z ; std::_Dest_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<BlockHDD_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 04	 add	 eax, 4
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@@Z ; std::_Dest_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBlockHDD_DATA@@@std@@@std@@YAXPAUBlockHDD_DATA@@0AAV?$allocator@UBlockHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<BlockHDD_DATA> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229401 = -88						; size = 4
$T229402 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z PROC ; std::_Construct<BlockHDD_DATA,BlockHDD_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 04		 push	 4
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T229402[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T229402[ebp], 0
  0004a	74 1b		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUBlockHDD_DATA@@@std@@YAABUBlockHDD_DATA@@ABU1@@Z ; std::forward<BlockHDD_DATA const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	8b 45 ac	 mov	 eax, DWORD PTR $T229402[ebp]
  0005d	89 10		 mov	 DWORD PTR [eax], edx
  0005f	8b 4d ac	 mov	 ecx, DWORD PTR $T229402[ebp]
  00062	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00065	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  00067	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  0006e	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00071	89 55 a8	 mov	 DWORD PTR $T229401[ebp], edx
  00074	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229402[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UBlockHDD_DATA@@ABU1@@std@@YAXPAUBlockHDD_DATA@@ABU1@@Z ENDP ; std::_Construct<BlockHDD_DATA,BlockHDD_DATA const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z PROC ; std::move<BlockHDD_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z ENDP ; std::move<BlockHDD_DATA &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@PAU1@@Z PROC ; std::_Val_type<BlockHDD_DATA *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUBlockHDD_DATA@@@std@@YAPAUBlockHDD_DATA@@PAU1@@Z ENDP ; std::_Val_type<BlockHDD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<BlockHDD_DATA *,BlockHDD_DATA *,std::allocator<BlockHDD_DATA>,BlockHDD_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 04	 add	 eax, 4
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 04	 add	 ecx, 4
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@@Z ; std::_Dest_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUBlockHDD_DATA@@PAU1@V?$allocator@UBlockHDD_DATA@@@std@@U1@@std@@YAPAUBlockHDD_DATA@@PAU1@00AAV?$allocator@UBlockHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<BlockHDD_DATA *,BlockHDD_DATA *,std::allocator<BlockHDD_DATA>,BlockHDD_DATA>
PUBLIC	?destroy@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@@Z ; std::allocator<BlockHDD_DATA>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@@Z PROC ; std::_Dest_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@@Z ; std::allocator<BlockHDD_DATA>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy@UBlockHDD_DATA@@@std@@YAXPAUBlockHDD_DATA@@@Z ; std::_Destroy<BlockHDD_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@@Z PROC ; std::allocator<BlockHDD_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UBlockHDD_DATA@@@std@@YAXPAUBlockHDD_DATA@@@Z ; std::_Destroy<BlockHDD_DATA>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@@Z ENDP ; std::allocator<BlockHDD_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z ; std::allocator<BlockHDD_DATA>::construct
PUBLIC	??$forward@UBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z ; std::forward<BlockHDD_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z ; std::forward<BlockHDD_DATA>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z ; std::allocator<BlockHDD_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UBlockHDD_DATA@@@std@@UBlockHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBlockHDD_DATA@@@0@PAUBlockHDD_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<BlockHDD_DATA>,BlockHDD_DATA,BlockHDD_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UBlockHDD_DATA@@@std@@YAXPAUBlockHDD_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UBlockHDD_DATA@@@std@@YAXPAUBlockHDD_DATA@@@Z PROC ; std::_Destroy<BlockHDD_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UBlockHDD_DATA@@@std@@YAXPAUBlockHDD_DATA@@@Z ENDP ; std::_Destroy<BlockHDD_DATA>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229441 = -88						; size = 4
$T229442 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z PROC ; std::allocator<BlockHDD_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T229442[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T229442[ebp], 0
  00047	74 1b		 je	 SHORT $LN3@construct@2
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z ; std::forward<BlockHDD_DATA>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 45 ac	 mov	 eax, DWORD PTR $T229442[ebp]
  0005a	89 10		 mov	 DWORD PTR [eax], edx
  0005c	8b 4d ac	 mov	 ecx, DWORD PTR $T229442[ebp]
  0005f	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00062	eb 07		 jmp	 SHORT $LN4@construct@2
$LN3@construct@2:
  00064	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@2:
  0006b	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  0006e	89 55 a8	 mov	 DWORD PTR $T229441[ebp], edx
  00071	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229442[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@$$QAU3@@Z ENDP ; std::allocator<BlockHDD_DATA>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z PROC ; std::forward<BlockHDD_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UBlockHDD_DATA@@@std@@YA$$QAUBlockHDD_DATA@@AAU1@@Z ENDP ; std::forward<BlockHDD_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??_C@_09OBKIGJOH@AntiCheat?$AA@			; `string'
PUBLIC	??_C@_0BB@NOKADJEH@?4?4?2AntiCheat?2LOG?$AA@	; `string'
EXTRN	_atexit:PROC
EXTRN	??0CLogToFile@@QAE@QAD0H@Z:PROC			; CLogToFile::CLogToFile
;	COMDAT ??_C@_09OBKIGJOH@AntiCheat?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\anticheatplus.cpp
CONST	SEGMENT
??_C@_09OBKIGJOH@AntiCheat?$AA@ DB 'AntiCheat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NOKADJEH@?4?4?2AntiCheat?2LOG?$AA@
CONST	SEGMENT
??_C@_0BB@NOKADJEH@?4?4?2AntiCheat?2LOG?$AA@ DB '..\AntiCheat\LOG', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??__Eg_AntiCheatLog@@YAXXZ
text$yc	SEGMENT
??__Eg_AntiCheatLog@@YAXXZ PROC				; `dynamic initializer for 'g_AntiCheatLog'', COMDAT

; 15   : CLogToFile g_AntiCheatLog("AntiCheat", "..\\AntiCheat\\LOG", TRUE);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	6a 01		 push	 1
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NOKADJEH@?4?4?2AntiCheat?2LOG?$AA@
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_09OBKIGJOH@AntiCheat?$AA@
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AntiCheatLog@@3VCLogToFile@@A ; g_AntiCheatLog
  0001a	e8 00 00 00 00	 call	 ??0CLogToFile@@QAE@QAD0H@Z ; CLogToFile::CLogToFile
  0001f	68 00 00 00 00	 push	 OFFSET ??__Fg_AntiCheatLog@@YAXXZ ; `dynamic atexit destructor for 'g_AntiCheatLog''
  00024	e8 00 00 00 00	 call	 _atexit
  00029	83 c4 04	 add	 esp, 4
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??__Eg_AntiCheatLog@@YAXXZ ENDP				; `dynamic initializer for 'g_AntiCheatLog''
text$yc	ENDS
PUBLIC	??0AntiCheatPlus@@QAE@XZ			; AntiCheatPlus::AntiCheatPlus
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_AntiCheatPlus@@YAXXZ
text$yc	SEGMENT
??__Eg_AntiCheatPlus@@YAXXZ PROC			; `dynamic initializer for 'g_AntiCheatPlus'', COMDAT

; 18   : AntiCheatPlus g_AntiCheatPlus;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AntiCheatPlus@@3VAntiCheatPlus@@A ; g_AntiCheatPlus
  0000e	e8 00 00 00 00	 call	 ??0AntiCheatPlus@@QAE@XZ
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_AntiCheatPlus@@YAXXZ ; `dynamic atexit destructor for 'g_AntiCheatPlus''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_AntiCheatPlus@@YAXXZ ENDP			; `dynamic initializer for 'g_AntiCheatPlus''
text$yc	ENDS
PUBLIC	??0?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0AntiCheatPlus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0AntiCheatPlus@@QAE@XZ PROC				; AntiCheatPlus::AntiCheatPlus, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	81 c1 2c 00 01
	00		 add	 ecx, 65580		; 0001002cH
  00015	e8 00 00 00 00	 call	 ??0?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??0AntiCheatPlus@@QAE@XZ ENDP				; AntiCheatPlus::AntiCheatPlus
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBlockHDD_DATA@@@1@@Z ; std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
PUBLIC	??0?$allocator@UBlockHDD_DATA@@@std@@QAE@XZ	; std::allocator<BlockHDD_DATA>::allocator<BlockHDD_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T229477 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T229477[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UBlockHDD_DATA@@@std@@QAE@XZ ; std::allocator<BlockHDD_DATA>::allocator<BlockHDD_DATA>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBlockHDD_DATA@@@1@@Z ; std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UBlockHDD_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<BlockHDD_DATA>::allocator<BlockHDD_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBlockHDD_DATA@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBlockHDD_DATA@@@1@@Z PROC ; std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UBlockHDD_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<BlockHDD_DATA>::allocator<BlockHDD_DATA>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBlockHDD_DATA@@@1@@Z ENDP ; std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UBlockHDD_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UBlockHDD_DATA@@@std@@QAE@XZ PROC	; std::allocator<BlockHDD_DATA>::allocator<BlockHDD_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UBlockHDD_DATA@@@std@@QAE@XZ ENDP	; std::allocator<BlockHDD_DATA>::allocator<BlockHDD_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@UBlockHDD_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UBlockHDD_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<BlockHDD_DATA>::allocator<BlockHDD_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UBlockHDD_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<BlockHDD_DATA>::allocator<BlockHDD_DATA>
_TEXT	ENDS
EXTRN	??1CLogToFile@@QAE@XZ:PROC			; CLogToFile::~CLogToFile
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fg_AntiCheatLog@@YAXXZ
text$yd	SEGMENT
??__Fg_AntiCheatLog@@YAXXZ PROC				; `dynamic atexit destructor for 'g_AntiCheatLog'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AntiCheatLog@@3VCLogToFile@@A ; g_AntiCheatLog
  0000e	e8 00 00 00 00	 call	 ??1CLogToFile@@QAE@XZ	; CLogToFile::~CLogToFile
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_AntiCheatLog@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_AntiCheatLog''
text$yd	ENDS
PUBLIC	??1AntiCheatPlus@@QAE@XZ			; AntiCheatPlus::~AntiCheatPlus
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fg_AntiCheatPlus@@YAXXZ
text$yd	SEGMENT
??__Fg_AntiCheatPlus@@YAXXZ PROC			; `dynamic atexit destructor for 'g_AntiCheatPlus'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AntiCheatPlus@@3VAntiCheatPlus@@A ; g_AntiCheatPlus
  0000e	e8 00 00 00 00	 call	 ??1AntiCheatPlus@@QAE@XZ
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_AntiCheatPlus@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_AntiCheatPlus''
text$yd	ENDS
PUBLIC	??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::~vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1AntiCheatPlus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1AntiCheatPlus@@QAE@XZ PROC				; AntiCheatPlus::~AntiCheatPlus, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	81 c1 2c 00 01
	00		 add	 ecx, 65580		; 0001002cH
  00015	e8 00 00 00 00	 call	 ??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::~vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??1AntiCheatPlus@@QAE@XZ ENDP				; AntiCheatPlus::~AntiCheatPlus
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::~_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
PUBLIC	?_Tidy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Tidy
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::~vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXXZ ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::~_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::~_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
__ehhandler$??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::~vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXPAUBlockHDD_DATA@@0@Z ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 02	 sar	 edx, 2
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBlockHDD_DATA@@@std@@QAEXPAUBlockHDD_DATA@@I@Z ; std::allocator<BlockHDD_DATA>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::~_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UBlockHDD_DATA@@V?$allocator@UBlockHDD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >::~_Vector_val<BlockHDD_DATA,std::allocator<BlockHDD_DATA> >
_TEXT	ENDS
PUBLIC	?g_AntiCheatPlus@@3VAntiCheatPlus@@A		; g_AntiCheatPlus
PUBLIC	?g_AntiCheatLog@@3VCLogToFile@@A		; g_AntiCheatLog
_BSS	SEGMENT
?g_AntiCheatPlus@@3VAntiCheatPlus@@A DB 01003cH DUP (?)	; g_AntiCheatPlus
?g_AntiCheatLog@@3VCLogToFile@@A DB 010228H DUP (?)	; g_AntiCheatLog
_BSS	ENDS
CRT$XCU	SEGMENT
_g_AntiCheatLog$initializer$ DD FLAT:??__Eg_AntiCheatLog@@YAXXZ
_g_AntiCheatPlus$initializer$ DD FLAT:??__Eg_AntiCheatPlus@@YAXXZ
CRT$XCU	ENDS
END
