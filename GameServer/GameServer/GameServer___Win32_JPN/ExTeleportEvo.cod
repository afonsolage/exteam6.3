; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ExTeleportEvo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@ExTeleportEvo@@QAEXXZ			; ExTeleportEvo::Init
PUBLIC	??0ExTeleportEvo@@QAE@XZ			; ExTeleportEvo::ExTeleportEvo
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exteleportevo.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ExTeleportEvo@@QAE@XZ PROC				; ExTeleportEvo::ExTeleportEvo
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	this->Init();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Init@ExTeleportEvo@@QAEXXZ ; ExTeleportEvo::Init

; 20   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0ExTeleportEvo@@QAE@XZ ENDP				; ExTeleportEvo::ExTeleportEvo
_TEXT	ENDS
PUBLIC	??1ExTeleportEvo@@QAE@XZ			; ExTeleportEvo::~ExTeleportEvo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ExTeleportEvo@@QAE@XZ PROC				; ExTeleportEvo::~ExTeleportEvo
; _this$ = ecx

; 24   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1ExTeleportEvo@@QAE@XZ ENDP				; ExTeleportEvo::~ExTeleportEvo
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@ExTeleportEvo@@QAEXXZ PROC			; ExTeleportEvo::Init
; _this$ = ecx

; 29   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	ZeroMemory(this->data, sizeof(this->data));

  0004c	68 40 01 00 00	 push	 320			; 00000140H
  00051	6a 00		 push	 0
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	83 c0 18	 add	 eax, 24			; 00000018H
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _memset
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : 	this->Enable = 0;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	c6 00 00	 mov	 BYTE PTR [eax], 0

; 32   : 	this->NPC_Class = 0;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 33   : 	this->NPC_Map = 0;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 34   : 	this->NPC_X = 0;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 35   : 	this->NPC_Y = 0;

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 36   : 	this->iLoadedCount = 0;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 37   : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?Init@ExTeleportEvo@@QAEXXZ ENDP			; ExTeleportEvo::Init
_TEXT	ENDS
PUBLIC	?Read@ExTeleportEvo@@QAEXPAD@Z			; ExTeleportEvo::Read
PUBLIC	??_C@_0BJ@HNFBNPNG@ExData?2ExTeleportEvo?4ini?$AA@ ; `string'
PUBLIC	?Load@ExTeleportEvo@@QAEXXZ			; ExTeleportEvo::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT ??_C@_0BJ@HNFBNPNG@ExData?2ExTeleportEvo?4ini?$AA@
CONST	SEGMENT
??_C@_0BJ@HNFBNPNG@ExData?2ExTeleportEvo?4ini?$AA@ DB 'ExData\ExTeleportE'
	DB	'vo.ini', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@ExTeleportEvo@@QAEXXZ PROC			; ExTeleportEvo::Load
; _this$ = ecx

; 41   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	83 ec 44	 sub	 esp, 68			; 00000044H
  000b6	53		 push	 ebx
  000b7	56		 push	 esi
  000b8	57		 push	 edi
  000b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	this->Init();

  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	e8 00 00 00 00	 call	 ?Init@ExTeleportEvo@@QAEXXZ ; ExTeleportEvo::Init

; 43   : 
; 44   : 	if(g_ExLicense.CheckUser(Local) || g_ExLicense.CheckUser(Gredy) || g_ExLicense.CheckUser(Gredy2) || g_ExLicense.CheckUser(GredyLocal))

  000c4	6a 00		 push	 0
  000c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000cb	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000d0	0f b6 c0	 movzx	 eax, al
  000d3	85 c0		 test	 eax, eax
  000d5	75 39		 jne	 SHORT $LN1@Load
  000d7	6a 20		 push	 32			; 00000020H
  000d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000de	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000e3	0f b6 c0	 movzx	 eax, al
  000e6	85 c0		 test	 eax, eax
  000e8	75 26		 jne	 SHORT $LN1@Load
  000ea	6a 22		 push	 34			; 00000022H
  000ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000f1	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000f6	0f b6 c0	 movzx	 eax, al
  000f9	85 c0		 test	 eax, eax
  000fb	75 13		 jne	 SHORT $LN1@Load
  000fd	6a 21		 push	 33			; 00000021H
  000ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00104	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00109	0f b6 c0	 movzx	 eax, al
  0010c	85 c0		 test	 eax, eax
  0010e	74 18		 je	 SHORT $LN3@Load
$LN1@Load:

; 45   : 	{
; 46   : 		this->Read(gDirPath.GetNewPath("ExData\\ExTeleportEvo.ini"));

  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HNFBNPNG@ExData?2ExTeleportEvo?4ini?$AA@
  00115	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0011a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0011f	50		 push	 eax
  00120	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	e8 00 00 00 00	 call	 ?Read@ExTeleportEvo@@QAEXPAD@Z ; ExTeleportEvo::Read
$LN3@Load:

; 47   : 	}
; 48   : }

  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c3		 ret	 0
?Load@ExTeleportEvo@@QAEXXZ ENDP			; ExTeleportEvo::Load
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
EXTRN	_fclose:PROC
EXTRN	_strcmp:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv424 = -92						; size = 8
tv472 = -88						; size = 4
tv460 = -88						; size = 4
tv448 = -88						; size = 4
tv436 = -88						; size = 4
tv412 = -88						; size = 4
tv400 = -88						; size = 4
tv388 = -88						; size = 4
tv376 = -88						; size = 4
tv364 = -88						; size = 4
tv352 = -88						; size = 4
tv340 = -88						; size = 4
tv328 = -88						; size = 4
tv316 = -88						; size = 4
tv304 = -88						; size = 4
tv470 = -84						; size = 4
tv458 = -84						; size = 4
tv446 = -84						; size = 4
tv434 = -84						; size = 4
tv422 = -84						; size = 4
tv410 = -84						; size = 4
tv398 = -84						; size = 4
tv386 = -84						; size = 4
tv374 = -84						; size = 4
tv362 = -84						; size = 4
tv350 = -84						; size = 4
tv338 = -84						; size = 4
tv326 = -84						; size = 4
tv314 = -84						; size = 4
tv302 = -84						; size = 4
tv467 = -78						; size = 2
tv455 = -78						; size = 2
tv443 = -78						; size = 2
tv431 = -78						; size = 2
tv419 = -78						; size = 2
tv407 = -78						; size = 2
tv395 = -78						; size = 2
tv383 = -78						; size = 2
tv371 = -78						; size = 2
tv359 = -78						; size = 2
tv347 = -78						; size = 2
tv335 = -78						; size = 2
tv323 = -78						; size = 2
tv311 = -78						; size = 2
tv299 = -78						; size = 2
tv86 = -77						; size = 1
_type$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_File$ = 8						; size = 4
?Read@ExTeleportEvo@@QAEXPAD@Z PROC			; ExTeleportEvo::Read
; _this$ = ecx

; 52   : {

  00130	55		 push	 ebp
  00131	8b ec		 mov	 ebp, esp
  00133	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00136	53		 push	 ebx
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : 	SMDFile = fopen(File, "r");

  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00141	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 _fopen
  0014a	83 c4 08	 add	 esp, 8
  0014d	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 54   : 
; 55   : 	if( SMDFile == NULL )

  00152	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00159	75 22		 jne	 SHORT $LN12@Read

; 56   : 	{
; 57   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), File);

  0015b	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0015e	50		 push	 eax
  0015f	68 c6 01 00 00	 push	 454			; 000001c6H
  00164	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00169	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0016e	50		 push	 eax
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00175	83 c4 08	 add	 esp, 8

; 58   : 		return;

  00178	e9 b9 04 00 00	 jmp	 $LN13@Read
$LN12@Read:

; 59   : 	}
; 60   : 
; 61   : 	int Token;
; 62   : 	int type = -1;

  0017d	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _type$[ebp], -1
$LN11@Read:

; 63   : 
; 64   : 	while ( true )

  00184	b8 01 00 00 00	 mov	 eax, 1
  00189	85 c0		 test	 eax, eax
  0018b	0f 84 97 04 00
	00		 je	 $LN10@Read

; 65   : 	{
; 66   : 	    Token = GetToken();

  00191	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00196	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 67   : 
; 68   :         if( Token == END )

  00199	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  0019d	75 05		 jne	 SHORT $LN9@Read

; 69   : 		{
; 70   :             break;

  0019f	e9 84 04 00 00	 jmp	 $LN10@Read
$LN9@Read:

; 71   : 		}
; 72   : 
; 73   : 		//if(this->iLoadedCount >= MAXEXTELEPORT)
; 74   : 		//{
; 75   : 		//	break;
; 76   : 		//}
; 77   : 
; 78   : 		type = (int)TokenNumber;

  001a4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001aa	e8 00 00 00 00	 call	 __ftol2_sse
  001af	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax
$LN8@Read:

; 79   : 
; 80   : 		while ( true )

  001b2	b8 01 00 00 00	 mov	 eax, 1
  001b7	85 c0		 test	 eax, eax
  001b9	0f 84 64 04 00
	00		 je	 $LN7@Read

; 81   : 		{
; 82   : 			if ( type == 0 )

  001bf	83 7d f4 00	 cmp	 DWORD PTR _type$[ebp], 0
  001c3	0f 85 af 00 00
	00		 jne	 $LN6@Read

; 83   : 			{
; 84   : 				Token = GetToken();

  001c9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001ce	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 85   : 
; 86   : 				if ( strcmp("end", TokenString) == 0 )

  001d1	68 00 00 00 00	 push	 OFFSET _TokenString
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001db	e8 00 00 00 00	 call	 _strcmp
  001e0	83 c4 08	 add	 esp, 8
  001e3	85 c0		 test	 eax, eax
  001e5	75 05		 jne	 SHORT $LN5@Read

; 87   : 				{
; 88   : 					break;

  001e7	e9 37 04 00 00	 jmp	 $LN7@Read
$LN5@Read:

; 89   : 				}
; 90   : 
; 91   : 				this->Enable = TokenNumber;

  001ec	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001f2	d9 ee		 fldz
  001f4	da e9		 fucompp
  001f6	df e0		 fnstsw	 ax
  001f8	f6 c4 44	 test	 ah, 68			; 00000044H
  001fb	7b 06		 jnp	 SHORT $LN15@Read
  001fd	c6 45 b3 01	 mov	 BYTE PTR tv86[ebp], 1
  00201	eb 04		 jmp	 SHORT $LN16@Read
$LN15@Read:
  00203	c6 45 b3 00	 mov	 BYTE PTR tv86[ebp], 0
$LN16@Read:
  00207	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0020a	8a 4d b3	 mov	 cl, BYTE PTR tv86[ebp]
  0020d	88 08		 mov	 BYTE PTR [eax], cl

; 92   : 				Token = GetToken();

  0020f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00214	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 93   : 				this->NPC_Class = TokenNumber;

  00217	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0021d	e8 00 00 00 00	 call	 __ftol2_sse
  00222	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00225	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 94   : 				Token = GetToken();

  00228	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0022d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 95   : 				this->NPC_Map = TokenNumber;

  00230	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00236	e8 00 00 00 00	 call	 __ftol2_sse
  0023b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0023e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 96   : 				Token = GetToken();

  00241	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00246	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 97   : 				this->NPC_X = TokenNumber;

  00249	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0024f	e8 00 00 00 00	 call	 __ftol2_sse
  00254	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00257	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 98   : 				Token = GetToken();

  0025a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0025f	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 99   : 				this->NPC_Y = TokenNumber;

  00262	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00268	e8 00 00 00 00	 call	 __ftol2_sse
  0026d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00270	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00273	e9 a6 03 00 00	 jmp	 $LN1@Read
$LN6@Read:

; 100  : 			}
; 101  : 			else if( type == 1 )

  00278	83 7d f4 01	 cmp	 DWORD PTR _type$[ebp], 1
  0027c	0f 85 9c 03 00
	00		 jne	 $LN1@Read

; 102  : 			{
; 103  : 				Token = GetToken();

  00282	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00287	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 104  : 
; 105  : 				if ( strcmp("end", TokenString) == 0 )

  0028a	68 00 00 00 00	 push	 OFFSET _TokenString
  0028f	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00294	e8 00 00 00 00	 call	 _strcmp
  00299	83 c4 08	 add	 esp, 8
  0029c	85 c0		 test	 eax, eax
  0029e	75 05		 jne	 SHORT $LN2@Read

; 106  : 				{
; 107  : 					break;

  002a0	e9 7e 03 00 00	 jmp	 $LN7@Read
$LN2@Read:

; 108  : 				}
; 109  : 
; 110  : 				this->data[this->iLoadedCount].map = TokenNumber;

  002a5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ab	d9 7d b2	 fnstcw	 WORD PTR tv299[ebp]
  002ae	0f b7 45 b2	 movzx	 eax, WORD PTR tv299[ebp]
  002b2	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002b7	89 45 ac	 mov	 DWORD PTR tv302[ebp], eax
  002ba	d9 6d ac	 fldcw	 WORD PTR tv302[ebp]
  002bd	db 5d a8	 fistp	 DWORD PTR tv304[ebp]
  002c0	d9 6d b2	 fldcw	 WORD PTR tv299[ebp]
  002c3	8a 45 a8	 mov	 al, BYTE PTR tv304[ebp]
  002c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002cc	c1 e2 05	 shl	 edx, 5
  002cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d2	88 44 11 18	 mov	 BYTE PTR [ecx+edx+24], al

; 111  : 				Token = GetToken();

  002d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002db	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 112  : 				this->data[this->iLoadedCount].x = TokenNumber;

  002de	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002e4	d9 7d b2	 fnstcw	 WORD PTR tv311[ebp]
  002e7	0f b7 45 b2	 movzx	 eax, WORD PTR tv311[ebp]
  002eb	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002f0	89 45 ac	 mov	 DWORD PTR tv314[ebp], eax
  002f3	d9 6d ac	 fldcw	 WORD PTR tv314[ebp]
  002f6	db 5d a8	 fistp	 DWORD PTR tv316[ebp]
  002f9	d9 6d b2	 fldcw	 WORD PTR tv311[ebp]
  002fc	8a 45 a8	 mov	 al, BYTE PTR tv316[ebp]
  002ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00302	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00305	c1 e2 05	 shl	 edx, 5
  00308	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0030b	88 44 11 19	 mov	 BYTE PTR [ecx+edx+25], al

; 113  : 				Token = GetToken();

  0030f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00314	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 114  : 				this->data[this->iLoadedCount].y = TokenNumber;

  00317	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0031d	d9 7d b2	 fnstcw	 WORD PTR tv323[ebp]
  00320	0f b7 45 b2	 movzx	 eax, WORD PTR tv323[ebp]
  00324	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00329	89 45 ac	 mov	 DWORD PTR tv326[ebp], eax
  0032c	d9 6d ac	 fldcw	 WORD PTR tv326[ebp]
  0032f	db 5d a8	 fistp	 DWORD PTR tv328[ebp]
  00332	d9 6d b2	 fldcw	 WORD PTR tv323[ebp]
  00335	8a 45 a8	 mov	 al, BYTE PTR tv328[ebp]
  00338	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0033e	c1 e2 05	 shl	 edx, 5
  00341	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00344	88 44 11 1a	 mov	 BYTE PTR [ecx+edx+26], al

; 115  : 				Token = GetToken();

  00348	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0034d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 116  : 				this->data[this->iLoadedCount].min_level = TokenNumber;

  00350	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00356	d9 7d b2	 fnstcw	 WORD PTR tv335[ebp]
  00359	0f b7 45 b2	 movzx	 eax, WORD PTR tv335[ebp]
  0035d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00362	89 45 ac	 mov	 DWORD PTR tv338[ebp], eax
  00365	d9 6d ac	 fldcw	 WORD PTR tv338[ebp]
  00368	db 5d a8	 fistp	 DWORD PTR tv340[ebp]
  0036b	d9 6d b2	 fldcw	 WORD PTR tv335[ebp]
  0036e	66 8b 45 a8	 mov	 ax, WORD PTR tv340[ebp]
  00372	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00375	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00378	c1 e2 05	 shl	 edx, 5
  0037b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0037e	66 89 44 11 1c	 mov	 WORD PTR [ecx+edx+28], ax

; 117  : 				Token = GetToken();

  00383	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00388	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 118  : 				this->data[this->iLoadedCount].max_level = TokenNumber;

  0038b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00391	d9 7d b2	 fnstcw	 WORD PTR tv347[ebp]
  00394	0f b7 45 b2	 movzx	 eax, WORD PTR tv347[ebp]
  00398	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0039d	89 45 ac	 mov	 DWORD PTR tv350[ebp], eax
  003a0	d9 6d ac	 fldcw	 WORD PTR tv350[ebp]
  003a3	db 5d a8	 fistp	 DWORD PTR tv352[ebp]
  003a6	d9 6d b2	 fldcw	 WORD PTR tv347[ebp]
  003a9	66 8b 45 a8	 mov	 ax, WORD PTR tv352[ebp]
  003ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  003b3	c1 e2 05	 shl	 edx, 5
  003b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b9	66 89 44 11 1e	 mov	 WORD PTR [ecx+edx+30], ax

; 119  : 				Token = GetToken();

  003be	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003c3	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 120  : 				this->data[this->iLoadedCount].min_reset = TokenNumber;

  003c6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003cc	d9 7d b2	 fnstcw	 WORD PTR tv359[ebp]
  003cf	0f b7 45 b2	 movzx	 eax, WORD PTR tv359[ebp]
  003d3	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003d8	89 45 ac	 mov	 DWORD PTR tv362[ebp], eax
  003db	d9 6d ac	 fldcw	 WORD PTR tv362[ebp]
  003de	db 5d a8	 fistp	 DWORD PTR tv364[ebp]
  003e1	d9 6d b2	 fldcw	 WORD PTR tv359[ebp]
  003e4	66 8b 45 a8	 mov	 ax, WORD PTR tv364[ebp]
  003e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003eb	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  003ee	c1 e2 05	 shl	 edx, 5
  003f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003f4	66 89 44 11 20	 mov	 WORD PTR [ecx+edx+32], ax

; 121  : 				Token = GetToken();

  003f9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003fe	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 122  : 				this->data[this->iLoadedCount].max_reset = TokenNumber;

  00401	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00407	d9 7d b2	 fnstcw	 WORD PTR tv371[ebp]
  0040a	0f b7 45 b2	 movzx	 eax, WORD PTR tv371[ebp]
  0040e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00413	89 45 ac	 mov	 DWORD PTR tv374[ebp], eax
  00416	d9 6d ac	 fldcw	 WORD PTR tv374[ebp]
  00419	db 5d a8	 fistp	 DWORD PTR tv376[ebp]
  0041c	d9 6d b2	 fldcw	 WORD PTR tv371[ebp]
  0041f	66 8b 45 a8	 mov	 ax, WORD PTR tv376[ebp]
  00423	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00426	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00429	c1 e2 05	 shl	 edx, 5
  0042c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0042f	66 89 44 11 22	 mov	 WORD PTR [ecx+edx+34], ax

; 123  : 				Token = GetToken();

  00434	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00439	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 124  : 				this->data[this->iLoadedCount].min_grand = TokenNumber;

  0043c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00442	d9 7d b2	 fnstcw	 WORD PTR tv383[ebp]
  00445	0f b7 45 b2	 movzx	 eax, WORD PTR tv383[ebp]
  00449	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0044e	89 45 ac	 mov	 DWORD PTR tv386[ebp], eax
  00451	d9 6d ac	 fldcw	 WORD PTR tv386[ebp]
  00454	db 5d a8	 fistp	 DWORD PTR tv388[ebp]
  00457	d9 6d b2	 fldcw	 WORD PTR tv383[ebp]
  0045a	66 8b 45 a8	 mov	 ax, WORD PTR tv388[ebp]
  0045e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00461	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00464	c1 e2 05	 shl	 edx, 5
  00467	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0046a	66 89 44 11 24	 mov	 WORD PTR [ecx+edx+36], ax

; 125  : 				Token = GetToken();

  0046f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00474	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 126  : 				this->data[this->iLoadedCount].max_grand = TokenNumber;

  00477	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0047d	d9 7d b2	 fnstcw	 WORD PTR tv395[ebp]
  00480	0f b7 45 b2	 movzx	 eax, WORD PTR tv395[ebp]
  00484	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00489	89 45 ac	 mov	 DWORD PTR tv398[ebp], eax
  0048c	d9 6d ac	 fldcw	 WORD PTR tv398[ebp]
  0048f	db 5d a8	 fistp	 DWORD PTR tv400[ebp]
  00492	d9 6d b2	 fldcw	 WORD PTR tv395[ebp]
  00495	66 8b 45 a8	 mov	 ax, WORD PTR tv400[ebp]
  00499	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0049c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0049f	c1 e2 05	 shl	 edx, 5
  004a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004a5	66 89 44 11 26	 mov	 WORD PTR [ecx+edx+38], ax

; 127  : 				Token = GetToken();

  004aa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004af	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 128  : 				this->data[this->iLoadedCount].premium = TokenNumber;

  004b2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004b8	d9 7d b2	 fnstcw	 WORD PTR tv407[ebp]
  004bb	0f b7 45 b2	 movzx	 eax, WORD PTR tv407[ebp]
  004bf	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004c4	89 45 ac	 mov	 DWORD PTR tv410[ebp], eax
  004c7	d9 6d ac	 fldcw	 WORD PTR tv410[ebp]
  004ca	db 5d a8	 fistp	 DWORD PTR tv412[ebp]
  004cd	d9 6d b2	 fldcw	 WORD PTR tv407[ebp]
  004d0	8a 45 a8	 mov	 al, BYTE PTR tv412[ebp]
  004d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004d6	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004d9	c1 e2 05	 shl	 edx, 5
  004dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004df	88 44 11 28	 mov	 BYTE PTR [ecx+edx+40], al

; 129  : 				Token = GetToken();

  004e3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004e8	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 130  : 				this->data[this->iLoadedCount].zen = TokenNumber;

  004eb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004f1	d9 7d b2	 fnstcw	 WORD PTR tv419[ebp]
  004f4	0f b7 45 b2	 movzx	 eax, WORD PTR tv419[ebp]
  004f8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004fd	89 45 ac	 mov	 DWORD PTR tv422[ebp], eax
  00500	d9 6d ac	 fldcw	 WORD PTR tv422[ebp]
  00503	df 7d a4	 fistp	 QWORD PTR tv424[ebp]
  00506	d9 6d b2	 fldcw	 WORD PTR tv419[ebp]
  00509	8b 45 a4	 mov	 eax, DWORD PTR tv424[ebp]
  0050c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0050f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00512	c1 e2 05	 shl	 edx, 5
  00515	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00518	89 44 11 2c	 mov	 DWORD PTR [ecx+edx+44], eax

; 131  : 				Token = GetToken();

  0051c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00521	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 132  : 				this->data[this->iLoadedCount].bonus = TokenNumber;

  00524	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0052a	d9 7d b2	 fnstcw	 WORD PTR tv431[ebp]
  0052d	0f b7 45 b2	 movzx	 eax, WORD PTR tv431[ebp]
  00531	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00536	89 45 ac	 mov	 DWORD PTR tv434[ebp], eax
  00539	d9 6d ac	 fldcw	 WORD PTR tv434[ebp]
  0053c	db 5d a8	 fistp	 DWORD PTR tv436[ebp]
  0053f	d9 6d b2	 fldcw	 WORD PTR tv431[ebp]
  00542	66 8b 45 a8	 mov	 ax, WORD PTR tv436[ebp]
  00546	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00549	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0054c	c1 e2 05	 shl	 edx, 5
  0054f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00552	66 89 44 11 30	 mov	 WORD PTR [ecx+edx+48], ax

; 133  : 				Token = GetToken();

  00557	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0055c	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 134  : 				this->data[this->iLoadedCount].credit = TokenNumber;

  0055f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00565	d9 7d b2	 fnstcw	 WORD PTR tv443[ebp]
  00568	0f b7 45 b2	 movzx	 eax, WORD PTR tv443[ebp]
  0056c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00571	89 45 ac	 mov	 DWORD PTR tv446[ebp], eax
  00574	d9 6d ac	 fldcw	 WORD PTR tv446[ebp]
  00577	db 5d a8	 fistp	 DWORD PTR tv448[ebp]
  0057a	d9 6d b2	 fldcw	 WORD PTR tv443[ebp]
  0057d	66 8b 45 a8	 mov	 ax, WORD PTR tv448[ebp]
  00581	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00584	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00587	c1 e2 05	 shl	 edx, 5
  0058a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0058d	66 89 44 11 32	 mov	 WORD PTR [ecx+edx+50], ax

; 135  : 				Token = GetToken();

  00592	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00597	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 136  : 				this->data[this->iLoadedCount].Master = TokenNumber;

  0059a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005a0	d9 7d b2	 fnstcw	 WORD PTR tv455[ebp]
  005a3	0f b7 45 b2	 movzx	 eax, WORD PTR tv455[ebp]
  005a7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005ac	89 45 ac	 mov	 DWORD PTR tv458[ebp], eax
  005af	d9 6d ac	 fldcw	 WORD PTR tv458[ebp]
  005b2	db 5d a8	 fistp	 DWORD PTR tv460[ebp]
  005b5	d9 6d b2	 fldcw	 WORD PTR tv455[ebp]
  005b8	8a 45 a8	 mov	 al, BYTE PTR tv460[ebp]
  005bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005be	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005c1	c1 e2 05	 shl	 edx, 5
  005c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c7	88 44 11 34	 mov	 BYTE PTR [ecx+edx+52], al

; 137  : 				Token = GetToken();

  005cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005d0	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 138  : 				this->data[this->iLoadedCount].EmptyInv = TokenNumber;

  005d3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005d9	d9 7d b2	 fnstcw	 WORD PTR tv467[ebp]
  005dc	0f b7 45 b2	 movzx	 eax, WORD PTR tv467[ebp]
  005e0	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005e5	89 45 ac	 mov	 DWORD PTR tv470[ebp], eax
  005e8	d9 6d ac	 fldcw	 WORD PTR tv470[ebp]
  005eb	db 5d a8	 fistp	 DWORD PTR tv472[ebp]
  005ee	d9 6d b2	 fldcw	 WORD PTR tv467[ebp]
  005f1	8a 45 a8	 mov	 al, BYTE PTR tv472[ebp]
  005f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005f7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005fa	c1 e2 05	 shl	 edx, 5
  005fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00600	88 44 11 35	 mov	 BYTE PTR [ecx+edx+53], al

; 139  : 				this->iLoadedCount++;

  00604	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00607	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0060a	83 c1 01	 add	 ecx, 1
  0060d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00610	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 140  : 				if(this->iLoadedCount >= MAXEXTELEPORT)

  00613	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00616	83 78 14 0a	 cmp	 DWORD PTR [eax+20], 10	; 0000000aH
  0061a	7c 02		 jl	 SHORT $LN1@Read

; 141  : 				{
; 142  : 					break;

  0061c	eb 05		 jmp	 SHORT $LN7@Read
$LN1@Read:

; 143  : 				}
; 144  : 			}
; 145  : 		}

  0061e	e9 8f fb ff ff	 jmp	 $LN8@Read
$LN7@Read:

; 146  :     }

  00623	e9 5c fb ff ff	 jmp	 $LN11@Read
$LN10@Read:

; 147  : 
; 148  : 	fclose(SMDFile);

  00628	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0062d	50		 push	 eax
  0062e	e8 00 00 00 00	 call	 _fclose
  00633	83 c4 04	 add	 esp, 4
$LN13@Read:

; 149  : }

  00636	5f		 pop	 edi
  00637	5e		 pop	 esi
  00638	5b		 pop	 ebx
  00639	8b e5		 mov	 esp, ebp
  0063b	5d		 pop	 ebp
  0063c	c2 04 00	 ret	 4
?Read@ExTeleportEvo@@QAEXPAD@Z ENDP			; ExTeleportEvo::Read
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00640	55		 push	 ebp
  00641	8b ec		 mov	 ebp, esp
  00643	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00649	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0064e	33 c5		 xor	 eax, ebp
  00650	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00653	53		 push	 ebx
  00654	56		 push	 esi
  00655	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00656	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0065d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00662	50		 push	 eax
  00663	e8 00 00 00 00	 call	 _fgetc
  00668	83 c4 04	 add	 esp, 4
  0066b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0066e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00672	83 f9 ff	 cmp	 ecx, -1
  00675	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00677	b8 02 00 00 00	 mov	 eax, 2
  0067c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00681	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00683	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00687	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0068a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0068c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00691	50		 push	 eax
  00692	e8 00 00 00 00	 call	 _fgetc
  00697	83 c4 04	 add	 esp, 4
  0069a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0069d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006a1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  006a4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  006a6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006aa	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  006ad	74 1c		 je	 SHORT $LN23@GetToken
  006af	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006b3	83 f8 ff	 cmp	 eax, -1
  006b6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  006b8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006bd	50		 push	 eax
  006be	e8 00 00 00 00	 call	 _fgetc
  006c3	83 c4 04	 add	 esp, 4
  006c6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  006c9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  006cb	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006cf	83 f8 ff	 cmp	 eax, -1
  006d2	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  006d4	b8 02 00 00 00	 mov	 eax, 2
  006d9	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  006de	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006e2	50		 push	 eax
  006e3	e8 00 00 00 00	 call	 _isspace
  006e8	83 c4 04	 add	 esp, 4
  006eb	85 c0		 test	 eax, eax
  006ed	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  006f3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006f7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  006fd	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00703	83 e9 22	 sub	 ecx, 34			; 00000022H
  00706	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0070c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00713	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00719	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0071f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00726	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0072d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00737	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0073c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00741	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00746	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00750	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00755	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0075a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0075f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00769	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0076e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00773	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00778	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00782	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00787	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0078c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00791	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0079b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007a0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  007a5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  007aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007af	50		 push	 eax
  007b0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007b4	51		 push	 ecx
  007b5	e8 00 00 00 00	 call	 _ungetc
  007ba	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  007bd	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  007c0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  007c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007c8	50		 push	 eax
  007c9	e8 00 00 00 00	 call	 _getc
  007ce	83 c4 04	 add	 esp, 4
  007d1	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  007d4	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007d8	83 f9 ff	 cmp	 ecx, -1
  007db	74 36		 je	 SHORT $LN12@GetToken
  007dd	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007e1	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  007e4	74 1a		 je	 SHORT $LN11@GetToken
  007e6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007ea	50		 push	 eax
  007eb	e8 00 00 00 00	 call	 _isdigit
  007f0	83 c4 04	 add	 esp, 4
  007f3	85 c0		 test	 eax, eax
  007f5	75 09		 jne	 SHORT $LN11@GetToken
  007f7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007fb	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  007fe	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00800	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00803	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00806	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00808	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0080b	83 c0 01	 add	 eax, 1
  0080e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00811	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00813	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00816	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00819	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0081c	50		 push	 eax
  0081d	e8 00 00 00 00	 call	 _atof
  00822	83 c4 04	 add	 esp, 4
  00825	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0082b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00835	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0083a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0083f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00844	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0084b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00850	50		 push	 eax
  00851	e8 00 00 00 00	 call	 _getc
  00856	83 c4 04	 add	 esp, 4
  00859	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0085c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00860	83 f9 ff	 cmp	 ecx, -1
  00863	74 1c		 je	 SHORT $LN8@GetToken
  00865	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00869	83 f8 22	 cmp	 eax, 34			; 00000022H
  0086c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0086e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00871	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00874	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00876	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00879	83 c0 01	 add	 eax, 1
  0087c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0087f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00881	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00885	83 f8 22	 cmp	 eax, 34			; 00000022H
  00888	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0088a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0088f	50		 push	 eax
  00890	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00894	51		 push	 ecx
  00895	e8 00 00 00 00	 call	 _ungetc
  0089a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0089d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008a0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  008a3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  008ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008b2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  008b7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  008bc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008c0	50		 push	 eax
  008c1	e8 00 00 00 00	 call	 _isalpha
  008c6	83 c4 04	 add	 esp, 4
  008c9	85 c0		 test	 eax, eax
  008cb	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  008d1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  008d8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008db	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  008de	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  008e0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008e3	83 c0 01	 add	 eax, 1
  008e6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  008e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008ee	50		 push	 eax
  008ef	e8 00 00 00 00	 call	 _getc
  008f4	83 c4 04	 add	 esp, 4
  008f7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  008fa	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008fe	83 f9 ff	 cmp	 ecx, -1
  00901	74 36		 je	 SHORT $LN3@GetToken
  00903	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00907	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0090a	74 1a		 je	 SHORT $LN2@GetToken
  0090c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00910	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00913	74 11		 je	 SHORT $LN2@GetToken
  00915	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00919	50		 push	 eax
  0091a	e8 00 00 00 00	 call	 _isalnum
  0091f	83 c4 04	 add	 esp, 4
  00922	85 c0		 test	 eax, eax
  00924	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00926	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00929	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0092c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0092e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00931	83 c0 01	 add	 eax, 1
  00934	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00937	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00939	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0093e	50		 push	 eax
  0093f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00943	51		 push	 ecx
  00944	e8 00 00 00 00	 call	 _ungetc
  00949	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0094c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0094f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00952	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0095c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00961	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00963	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00965	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0096f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00974	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00976	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00978	5f		 pop	 edi
  00979	5e		 pop	 esi
  0097a	5b		 pop	 ebx
  0097b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0097e	33 cd		 xor	 ecx, ebp
  00980	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00985	8b e5		 mov	 esp, ebp
  00987	5d		 pop	 ebp
  00988	c3		 ret	 0
  00989	8d 49 00	 npad	 3
$LN35@GetToken:
  0098c	00 00 00 00	 DD	 $LN10@GetToken
  00990	00 00 00 00	 DD	 $LN19@GetToken
  00994	00 00 00 00	 DD	 $LN17@GetToken
  00998	00 00 00 00	 DD	 $LN14@GetToken
  0099c	00 00 00 00	 DD	 $LN18@GetToken
  009a0	00 00 00 00	 DD	 $LN16@GetToken
  009a4	00 00 00 00	 DD	 $LN15@GetToken
  009a8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  009ac	00		 DB	 0
  009ad	01		 DB	 1
  009ae	07		 DB	 7
  009af	07		 DB	 7
  009b0	07		 DB	 7
  009b1	07		 DB	 7
  009b2	07		 DB	 7
  009b3	07		 DB	 7
  009b4	07		 DB	 7
  009b5	07		 DB	 7
  009b6	02		 DB	 2
  009b7	03		 DB	 3
  009b8	03		 DB	 3
  009b9	07		 DB	 7
  009ba	03		 DB	 3
  009bb	03		 DB	 3
  009bc	03		 DB	 3
  009bd	03		 DB	 3
  009be	03		 DB	 3
  009bf	03		 DB	 3
  009c0	03		 DB	 3
  009c1	03		 DB	 3
  009c2	03		 DB	 3
  009c3	03		 DB	 3
  009c4	07		 DB	 7
  009c5	04		 DB	 4
  009c6	07		 DB	 7
  009c7	07		 DB	 7
  009c8	07		 DB	 7
  009c9	07		 DB	 7
  009ca	07		 DB	 7
  009cb	07		 DB	 7
  009cc	07		 DB	 7
  009cd	07		 DB	 7
  009ce	07		 DB	 7
  009cf	07		 DB	 7
  009d0	07		 DB	 7
  009d1	07		 DB	 7
  009d2	07		 DB	 7
  009d3	07		 DB	 7
  009d4	07		 DB	 7
  009d5	07		 DB	 7
  009d6	07		 DB	 7
  009d7	07		 DB	 7
  009d8	07		 DB	 7
  009d9	07		 DB	 7
  009da	07		 DB	 7
  009db	07		 DB	 7
  009dc	07		 DB	 7
  009dd	07		 DB	 7
  009de	07		 DB	 7
  009df	07		 DB	 7
  009e0	07		 DB	 7
  009e1	07		 DB	 7
  009e2	07		 DB	 7
  009e3	07		 DB	 7
  009e4	07		 DB	 7
  009e5	07		 DB	 7
  009e6	07		 DB	 7
  009e7	07		 DB	 7
  009e8	07		 DB	 7
  009e9	07		 DB	 7
  009ea	07		 DB	 7
  009eb	07		 DB	 7
  009ec	07		 DB	 7
  009ed	07		 DB	 7
  009ee	07		 DB	 7
  009ef	07		 DB	 7
  009f0	07		 DB	 7
  009f1	07		 DB	 7
  009f2	07		 DB	 7
  009f3	07		 DB	 7
  009f4	07		 DB	 7
  009f5	07		 DB	 7
  009f6	07		 DB	 7
  009f7	07		 DB	 7
  009f8	07		 DB	 7
  009f9	07		 DB	 7
  009fa	07		 DB	 7
  009fb	07		 DB	 7
  009fc	07		 DB	 7
  009fd	07		 DB	 7
  009fe	07		 DB	 7
  009ff	07		 DB	 7
  00a00	07		 DB	 7
  00a01	07		 DB	 7
  00a02	07		 DB	 7
  00a03	07		 DB	 7
  00a04	07		 DB	 7
  00a05	05		 DB	 5
  00a06	07		 DB	 7
  00a07	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?GCWindows@ExTeleportEvo@@QAEXH@Z		; ExTeleportEvo::GCWindows
PUBLIC	?Dialog@ExTeleportEvo@@QAE_NHH@Z		; ExTeleportEvo::Dialog
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnectedEx@@YA_NH@Z:PROC		; gObjIsConnectedEx
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exteleportevo.cpp
_TEXT	SEGMENT
_lpNpc$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aUserIndex$ = 8					; size = 4
_aNpcIndex$ = 12					; size = 4
?Dialog@ExTeleportEvo@@QAE_NHH@Z PROC			; ExTeleportEvo::Dialog
; _this$ = ecx

; 153  : {

  00a10	55		 push	 ebp
  00a11	8b ec		 mov	 ebp, esp
  00a13	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00a16	53		 push	 ebx
  00a17	56		 push	 esi
  00a18	57		 push	 edi
  00a19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	if(!this->Enable)

  00a1c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a1f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00a22	85 c9		 test	 ecx, ecx
  00a24	75 07		 jne	 SHORT $LN3@Dialog

; 155  : 	{
; 156  :  		return false;

  00a26	32 c0		 xor	 al, al
  00a28	e9 95 00 00 00	 jmp	 $LN4@Dialog
$LN3@Dialog:

; 157  : 	}
; 158  : 
; 159  : 	if(!gObjIsConnectedEx(aUserIndex))

  00a2d	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00a30	50		 push	 eax
  00a31	e8 00 00 00 00	 call	 ?gObjIsConnectedEx@@YA_NH@Z ; gObjIsConnectedEx
  00a36	83 c4 04	 add	 esp, 4
  00a39	0f b6 c8	 movzx	 ecx, al
  00a3c	85 c9		 test	 ecx, ecx
  00a3e	75 04		 jne	 SHORT $LN2@Dialog

; 160  : 	{
; 161  : 		return false;

  00a40	32 c0		 xor	 al, al
  00a42	eb 7e		 jmp	 SHORT $LN4@Dialog
$LN2@Dialog:

; 162  : 	}
; 163  : 
; 164  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00a44	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00a47	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00a4d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00a53	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 165  : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  00a56	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  00a59	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00a5f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00a65	89 45 f4	 mov	 DWORD PTR _lpNpc$[ebp], eax

; 166  : 
; 167  : 	if(		lpNpc->Class		== this->NPC_Class 
; 168  : 		&&	lpNpc->MapNumber	== this->NPC_Map
; 169  : 		&&	lpNpc->X			== this->NPC_X
; 170  : 		&&	lpNpc->Y			== this->NPC_Y )

  00a68	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  00a6b	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00a72	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a75	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00a78	75 46		 jne	 SHORT $LN1@Dialog
  00a7a	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  00a7d	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00a84	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a87	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  00a8a	75 34		 jne	 SHORT $LN1@Dialog
  00a8c	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  00a8f	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00a96	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a99	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  00a9c	75 22		 jne	 SHORT $LN1@Dialog
  00a9e	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  00aa1	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00aa8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00aab	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
  00aae	75 10		 jne	 SHORT $LN1@Dialog

; 171  : 	{
; 172  : 		this->GCWindows(aUserIndex);

  00ab0	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00ab3	50		 push	 eax
  00ab4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ab7	e8 00 00 00 00	 call	 ?GCWindows@ExTeleportEvo@@QAEXH@Z ; ExTeleportEvo::GCWindows

; 173  : 		return true;

  00abc	b0 01		 mov	 al, 1
  00abe	eb 02		 jmp	 SHORT $LN4@Dialog
$LN1@Dialog:

; 174  : 	}
; 175  : 	// ----
; 176  : 	return false;

  00ac0	32 c0		 xor	 al, al
$LN4@Dialog:

; 177  : }

  00ac2	5f		 pop	 edi
  00ac3	5e		 pop	 esi
  00ac4	5b		 pop	 ebx
  00ac5	8b e5		 mov	 esp, ebp
  00ac7	5d		 pop	 ebp
  00ac8	c2 08 00	 ret	 8
?Dialog@ExTeleportEvo@@QAE_NHH@Z ENDP			; ExTeleportEvo::Dialog
_TEXT	ENDS
PUBLIC	?Timer@ExTeleportEvo@@QAEXXZ			; ExTeleportEvo::Timer
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Timer@ExTeleportEvo@@QAEXXZ PROC			; ExTeleportEvo::Timer
; _this$ = ecx

; 181  : {

  00ad0	55		 push	 ebp
  00ad1	8b ec		 mov	 ebp, esp
  00ad3	83 ec 44	 sub	 esp, 68			; 00000044H
  00ad6	53		 push	 ebx
  00ad7	56		 push	 esi
  00ad8	57		 push	 edi
  00ad9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 	/*
; 183  : 	for (int aUserIndex = OBJ_STARTUSERINDEX; aUserIndex < OBJMAX; aUserIndex++)
; 184  : 	{
; 185  : 		if(OBJMAX_RANGE(aUserIndex) == 0)
; 186  : 		{
; 187  : 			continue;
; 188  : 		}
; 189  : 
; 190  : 		LPOBJ lpUser = &gObj[aUserIndex];
; 191  : 
; 192  : 		if(lpUser->Connected < PLAYER_PLAYING)
; 193  : 		{
; 194  : 			continue;
; 195  : 		}
; 196  : 		
; 197  : 		for(int i = 0; i < this->iLoadedCount; i++)
; 198  : 		{
; 199  : 			if(this->data[i].map == lpUser->MapNumber)
; 200  : 			{
; 201  : 				if(this->data[i].level > lpUser->Level)
; 202  : 				{
; 203  : 					gObjTeleport(aUserIndex, 0, 123, 123);
; 204  : 				}
; 205  : 				else if(this->data[i].reset > lpUser->Reset)
; 206  : 				{
; 207  : 					gObjTeleport(aUserIndex, 0, 123, 123);
; 208  : 				}
; 209  : 				else if(this->data[i].grand > lpUser->GReset)
; 210  : 				{
; 211  : 					gObjTeleport(aUserIndex, 0, 123, 123);
; 212  : 				}
; 213  : 				else if(this->data[i].Master)
; 214  : 				{
; 215  : 					if(!lpUser->ChangeUP3rd)
; 216  : 					{
; 217  : 						gObjTeleport(aUserIndex, 0, 123, 123);
; 218  : 					}
; 219  : 				}
; 220  : 			}
; 221  : 		}
; 222  : 	}
; 223  : 	*/
; 224  : }

  00adc	5f		 pop	 edi
  00add	5e		 pop	 esi
  00ade	5b		 pop	 ebx
  00adf	8b e5		 mov	 esp, ebp
  00ae1	5d		 pop	 ebp
  00ae2	c3		 ret	 0
?Timer@ExTeleportEvo@@QAEXXZ ENDP			; ExTeleportEvo::Timer
_TEXT	ENDS
PUBLIC	?Check@ExTeleportEvo@@QAE_NH@Z			; ExTeleportEvo::Check
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -80						; size = 4
_i$228514 = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aUserIndex$ = 8					; size = 4
?Check@ExTeleportEvo@@QAE_NH@Z PROC			; ExTeleportEvo::Check
; _this$ = ecx

; 228  : {

  00af0	55		 push	 ebp
  00af1	8b ec		 mov	 ebp, esp
  00af3	83 ec 50	 sub	 esp, 80			; 00000050H
  00af6	53		 push	 ebx
  00af7	56		 push	 esi
  00af8	57		 push	 edi
  00af9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00afc	83 7d 08 00	 cmp	 DWORD PTR _aUserIndex$[ebp], 0
  00b00	7d 09		 jge	 SHORT $LN10@Check
  00b02	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  00b09	eb 0f		 jmp	 SHORT $LN11@Check
$LN10@Check:
  00b0b	33 c0		 xor	 eax, eax
  00b0d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aUserIndex$[ebp], 14999 ; 00003a97H
  00b14	0f 9e c0	 setle	 al
  00b17	89 45 b0	 mov	 DWORD PTR tv67[ebp], eax
$LN11@Check:
  00b1a	83 7d b0 00	 cmp	 DWORD PTR tv67[ebp], 0
  00b1e	75 04		 jne	 SHORT $LN7@Check

; 230  : 	{
; 231  : 		return false;

  00b20	32 c0		 xor	 al, al
  00b22	eb 66		 jmp	 SHORT $LN8@Check
$LN7@Check:

; 232  : 	}
; 233  : 
; 234  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00b24	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00b27	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00b2d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00b33	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 235  : 
; 236  : 	if(!lpUser)

  00b36	75 04		 jne	 SHORT $LN6@Check

; 237  : 	{
; 238  : 		return false;

  00b38	32 c0		 xor	 al, al
  00b3a	eb 4e		 jmp	 SHORT $LN8@Check
$LN6@Check:

; 239  : 	}
; 240  : 
; 241  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00b3c	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00b3f	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00b43	7d 04		 jge	 SHORT $LN5@Check

; 242  : 	{
; 243  : 		return false;

  00b45	32 c0		 xor	 al, al
  00b47	eb 41		 jmp	 SHORT $LN8@Check
$LN5@Check:

; 244  : 	}
; 245  : 
; 246  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00b49	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228514[ebp], 0
  00b50	eb 09		 jmp	 SHORT $LN4@Check
$LN3@Check:
  00b52	8b 45 f4	 mov	 eax, DWORD PTR _i$228514[ebp]
  00b55	83 c0 01	 add	 eax, 1
  00b58	89 45 f4	 mov	 DWORD PTR _i$228514[ebp], eax
$LN4@Check:
  00b5b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b5e	8b 4d f4	 mov	 ecx, DWORD PTR _i$228514[ebp]
  00b61	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00b64	7d 22		 jge	 SHORT $LN2@Check

; 247  : 	{
; 248  : 		if(this->data[i].map == lpUser->MapNumber)

  00b66	8b 45 f4	 mov	 eax, DWORD PTR _i$228514[ebp]
  00b69	c1 e0 05	 shl	 eax, 5
  00b6c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b6f	0f b6 54 01 18	 movzx	 edx, BYTE PTR [ecx+eax+24]
  00b74	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00b77	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00b7e	3b d1		 cmp	 edx, ecx
  00b80	75 04		 jne	 SHORT $LN1@Check

; 249  : 		{
; 250  : 			return false;

  00b82	32 c0		 xor	 al, al
  00b84	eb 04		 jmp	 SHORT $LN8@Check
$LN1@Check:

; 251  : 		}
; 252  : 	}

  00b86	eb ca		 jmp	 SHORT $LN3@Check
$LN2@Check:

; 253  : 
; 254  : 	return true;

  00b88	b0 01		 mov	 al, 1
$LN8@Check:

; 255  : }

  00b8a	5f		 pop	 edi
  00b8b	5e		 pop	 esi
  00b8c	5b		 pop	 ebx
  00b8d	8b e5		 mov	 esp, ebp
  00b8f	5d		 pop	 ebp
  00b90	c2 04 00	 ret	 4
?Check@ExTeleportEvo@@QAE_NH@Z ENDP			; ExTeleportEvo::Check
_TEXT	ENDS
PUBLIC	?set@PWMSG_HEAD2@@QAEXPAEEEH@Z			; PWMSG_HEAD2::set
PUBLIC	__$ArrayPad$
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv526 = -536						; size = 4
tv517 = -536						; size = 4
tv67 = -536						; size = 4
_n$228545 = -468					; size = 4
_i$228528 = -464					; size = 4
_pMsg$ = -460						; size = 448
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aUserIndex$ = 8					; size = 4
?GCWindows@ExTeleportEvo@@QAEXH@Z PROC			; ExTeleportEvo::GCWindows
; _this$ = ecx

; 259  : {

  00ba0	55		 push	 ebp
  00ba1	8b ec		 mov	 ebp, esp
  00ba3	81 ec 18 02 00
	00		 sub	 esp, 536		; 00000218H
  00ba9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00bae	33 c5		 xor	 eax, ebp
  00bb0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00bb3	53		 push	 ebx
  00bb4	56		 push	 esi
  00bb5	57		 push	 edi
  00bb6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 260  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00bb9	83 7d 08 00	 cmp	 DWORD PTR _aUserIndex$[ebp], 0
  00bbd	7d 0c		 jge	 SHORT $LN25@GCWindows
  00bbf	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
  00bc9	eb 12		 jmp	 SHORT $LN26@GCWindows
$LN25@GCWindows:
  00bcb	33 c0		 xor	 eax, eax
  00bcd	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aUserIndex$[ebp], 14999 ; 00003a97H
  00bd4	0f 9e c0	 setle	 al
  00bd7	89 85 e8 fd ff
	ff		 mov	 DWORD PTR tv67[ebp], eax
$LN26@GCWindows:
  00bdd	83 bd e8 fd ff
	ff 00		 cmp	 DWORD PTR tv67[ebp], 0
  00be4	75 05		 jne	 SHORT $LN22@GCWindows

; 261  : 	{
; 262  : 		return;

  00be6	e9 3e 06 00 00	 jmp	 $LN23@GCWindows
$LN22@GCWindows:

; 263  : 	}
; 264  : 
; 265  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00beb	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00bee	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00bf4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00bfa	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 266  : 
; 267  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00bfd	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c00	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00c04	7d 05		 jge	 SHORT $LN21@GCWindows

; 268  : 	{
; 269  : 		return;

  00c06	e9 1e 06 00 00	 jmp	 $LN23@GCWindows
$LN21@GCWindows:

; 270  : 	}
; 271  : 
; 272  : 	PMSG_GC_TELEPORTWINEVO pMsg;
; 273  : 	ZeroMemory(&pMsg, sizeof(pMsg));

  00c0b	68 c0 01 00 00	 push	 448			; 000001c0H
  00c10	6a 00		 push	 0
  00c12	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00c18	50		 push	 eax
  00c19	e8 00 00 00 00	 call	 _memset
  00c1e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 274  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFA, 0x12, sizeof(pMsg));

  00c21	68 c0 01 00 00	 push	 448			; 000001c0H
  00c26	6a 12		 push	 18			; 00000012H
  00c28	68 fa 00 00 00	 push	 250			; 000000faH
  00c2d	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00c33	50		 push	 eax
  00c34	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00c3a	e8 00 00 00 00	 call	 ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ; PWMSG_HEAD2::set

; 275  : 
; 276  : 	pMsg.count = this->iLoadedCount;

  00c3f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c42	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00c45	88 8d 39 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], cl

; 277  : 	
; 278  : 
; 279  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00c4b	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228528[ebp], 0
  00c55	eb 0f		 jmp	 SHORT $LN20@GCWindows
$LN19@GCWindows:
  00c57	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00c5d	83 c0 01	 add	 eax, 1
  00c60	89 85 30 fe ff
	ff		 mov	 DWORD PTR _i$228528[ebp], eax
$LN20@GCWindows:
  00c66	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c69	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00c6f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00c72	0f 8d 97 05 00
	00		 jge	 $LN18@GCWindows

; 280  : 	{
; 281  : 		pMsg.tdata[i].result = 1;

  00c78	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00c7e	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00c81	c6 84 05 3c fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 1

; 282  : 		pMsg.tdata[i].map = this->data[i].map;

  00c89	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00c8f	c1 e0 05	 shl	 eax, 5
  00c92	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00c98	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00c9b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c9e	8a 44 02 18	 mov	 al, BYTE PTR [edx+eax+24]
  00ca2	88 84 0d 3d fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+9], al

; 283  : 		pMsg.tdata[i].x = this->data[i].x;

  00ca9	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00caf	c1 e0 05	 shl	 eax, 5
  00cb2	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00cb8	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00cbb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00cbe	8a 44 02 19	 mov	 al, BYTE PTR [edx+eax+25]
  00cc2	88 84 0d 3e fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+10], al

; 284  : 		pMsg.tdata[i].y = this->data[i].y;

  00cc9	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00ccf	c1 e0 05	 shl	 eax, 5
  00cd2	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00cd8	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00cdb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00cde	8a 44 02 1a	 mov	 al, BYTE PTR [edx+eax+26]
  00ce2	88 84 0d 3f fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+11], al

; 285  : 		pMsg.tdata[i].min_level = this->data[i].min_level;

  00ce9	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00cef	c1 e0 05	 shl	 eax, 5
  00cf2	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00cf8	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00cfb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00cfe	66 8b 44 02 1c	 mov	 ax, WORD PTR [edx+eax+28]
  00d03	66 89 84 0d 40
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+12], ax

; 286  : 		pMsg.tdata[i].max_level = this->data[i].max_level;

  00d0b	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00d11	c1 e0 05	 shl	 eax, 5
  00d14	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00d1a	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00d1d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d20	66 8b 44 02 1e	 mov	 ax, WORD PTR [edx+eax+30]
  00d25	66 89 84 0d 42
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+14], ax

; 287  : 		pMsg.tdata[i].min_reset = this->data[i].min_reset;

  00d2d	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00d33	c1 e0 05	 shl	 eax, 5
  00d36	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00d3c	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00d3f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d42	66 8b 44 02 20	 mov	 ax, WORD PTR [edx+eax+32]
  00d47	66 89 84 0d 46
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+18], ax

; 288  : 		pMsg.tdata[i].max_reset = this->data[i].max_reset;

  00d4f	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00d55	c1 e0 05	 shl	 eax, 5
  00d58	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00d5e	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00d61	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d64	66 8b 44 02 22	 mov	 ax, WORD PTR [edx+eax+34]
  00d69	66 89 84 0d 48
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+20], ax

; 289  : 		pMsg.tdata[i].min_grand = this->data[i].min_grand;

  00d71	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00d77	c1 e0 05	 shl	 eax, 5
  00d7a	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00d80	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00d83	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d86	66 8b 44 02 24	 mov	 ax, WORD PTR [edx+eax+36]
  00d8b	66 89 84 0d 4c
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+24], ax

; 290  : 		pMsg.tdata[i].max_grand = this->data[i].max_grand;

  00d93	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00d99	c1 e0 05	 shl	 eax, 5
  00d9c	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00da2	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00da5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00da8	66 8b 44 02 26	 mov	 ax, WORD PTR [edx+eax+38]
  00dad	66 89 84 0d 4e
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+26], ax

; 291  : 		pMsg.tdata[i].premium = this->data[i].premium;

  00db5	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00dbb	c1 e0 05	 shl	 eax, 5
  00dbe	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00dc4	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00dc7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00dca	8a 44 02 28	 mov	 al, BYTE PTR [edx+eax+40]
  00dce	88 84 0d 51 fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+29], al

; 292  : 		pMsg.tdata[i].zen = this->data[i].zen;

  00dd5	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00ddb	c1 e0 05	 shl	 eax, 5
  00dde	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00de4	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00de7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00dea	8b 44 02 2c	 mov	 eax, DWORD PTR [edx+eax+44]
  00dee	89 84 0d 54 fe
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+ecx+32], eax

; 293  : 		pMsg.tdata[i].bonus = this->data[i].bonus;

  00df5	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00dfb	c1 e0 05	 shl	 eax, 5
  00dfe	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00e04	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00e07	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00e0a	66 8b 44 02 30	 mov	 ax, WORD PTR [edx+eax+48]
  00e0f	66 89 84 0d 5a
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+38], ax

; 294  : 		pMsg.tdata[i].credit = this->data[i].credit;

  00e17	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00e1d	c1 e0 05	 shl	 eax, 5
  00e20	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00e26	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00e29	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00e2c	66 8b 44 02 32	 mov	 ax, WORD PTR [edx+eax+50]
  00e31	66 89 84 0d 5e
	fe ff ff	 mov	 WORD PTR _pMsg$[ebp+ecx+42], ax

; 295  : 		pMsg.tdata[i].Master = this->data[i].Master;

  00e39	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00e3f	c1 e0 05	 shl	 eax, 5
  00e42	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00e48	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00e4b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00e4e	8a 44 02 34	 mov	 al, BYTE PTR [edx+eax+52]
  00e52	88 84 0d 61 fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+45], al

; 296  : 		pMsg.tdata[i].EmptyInv = this->data[i].EmptyInv;

  00e59	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00e5f	c1 e0 05	 shl	 eax, 5
  00e62	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _i$228528[ebp]
  00e68	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00e6b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00e6e	8a 44 02 35	 mov	 al, BYTE PTR [edx+eax+53]
  00e72	88 84 0d 63 fe
	ff ff		 mov	 BYTE PTR _pMsg$[ebp+ecx+47], al

; 297  : 
; 298  : 		pMsg.tdata[i].ok_level = 1;

  00e79	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00e7f	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00e82	c6 84 05 44 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+16], 1

; 299  : 		pMsg.tdata[i].ok_reset = 1;

  00e8a	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00e90	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00e93	c6 84 05 4a fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+22], 1

; 300  : 		pMsg.tdata[i].ok_grand = 1;

  00e9b	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00ea1	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00ea4	c6 84 05 50 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+28], 1

; 301  : 		pMsg.tdata[i].ok_premium = 1;

  00eac	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00eb2	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00eb5	c6 84 05 52 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+30], 1

; 302  : 		pMsg.tdata[i].ok_zen = 1;

  00ebd	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00ec3	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00ec6	c6 84 05 58 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+36], 1

; 303  : 		pMsg.tdata[i].ok_bonus = 1;

  00ece	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00ed4	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00ed7	c6 84 05 5c fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+40], 1

; 304  : 		pMsg.tdata[i].ok_credit = 1;

  00edf	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00ee5	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00ee8	c6 84 05 60 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+44], 1

; 305  : 		pMsg.tdata[i].ok_Master = 1;

  00ef0	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00ef6	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00ef9	c6 84 05 62 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+46], 1

; 306  : 		pMsg.tdata[i].ok_EmptyInv = 1;

  00f01	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00f07	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00f0a	c6 84 05 64 fe
	ff ff 01	 mov	 BYTE PTR _pMsg$[ebp+eax+48], 1

; 307  : 
; 308  : 		if(this->data[i].min_level > lpUser->Level || lpUser->Level > this->data[i].max_level )

  00f12	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00f18	c1 e0 05	 shl	 eax, 5
  00f1b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f1e	0f b7 54 01 1c	 movzx	 edx, WORD PTR [ecx+eax+28]
  00f23	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00f26	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00f2d	3b d1		 cmp	 edx, ecx
  00f2f	7f 1f		 jg	 SHORT $LN16@GCWindows
  00f31	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00f34	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00f3b	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR _i$228528[ebp]
  00f41	c1 e2 05	 shl	 edx, 5
  00f44	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f47	0f b7 54 10 1e	 movzx	 edx, WORD PTR [eax+edx+30]
  00f4c	3b ca		 cmp	 ecx, edx
  00f4e	7e 22		 jle	 SHORT $LN17@GCWindows
$LN16@GCWindows:

; 309  : 		{
; 310  : 			pMsg.tdata[i].result = 0;

  00f50	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00f56	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00f59	c6 84 05 3c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 311  : 			pMsg.tdata[i].ok_level = 0;

  00f61	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00f67	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00f6a	c6 84 05 44 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+16], 0
$LN17@GCWindows:

; 312  : 		}
; 313  : 		if(this->data[i].min_reset > lpUser->Reset || lpUser->Reset > this->data[i].max_reset )

  00f72	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00f78	c1 e0 05	 shl	 eax, 5
  00f7b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f7e	0f b7 54 01 20	 movzx	 edx, WORD PTR [ecx+eax+32]
  00f83	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00f86	3b 90 90 22 00
	00		 cmp	 edx, DWORD PTR [eax+8848]
  00f8c	7f 1c		 jg	 SHORT $LN14@GCWindows
  00f8e	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00f94	c1 e0 05	 shl	 eax, 5
  00f97	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f9a	0f b7 54 01 22	 movzx	 edx, WORD PTR [ecx+eax+34]
  00f9f	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00fa2	39 90 90 22 00
	00		 cmp	 DWORD PTR [eax+8848], edx
  00fa8	7e 22		 jle	 SHORT $LN15@GCWindows
$LN14@GCWindows:

; 314  : 		{
; 315  : 			pMsg.tdata[i].result = 0;

  00faa	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00fb0	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00fb3	c6 84 05 3c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 316  : 			pMsg.tdata[i].ok_reset = 0;

  00fbb	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00fc1	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00fc4	c6 84 05 4a fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+22], 0
$LN15@GCWindows:

; 317  : 		}
; 318  : 		if(this->data[i].min_grand > lpUser->GReset || lpUser->GReset > this->data[i].max_grand )

  00fcc	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00fd2	c1 e0 05	 shl	 eax, 5
  00fd5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fd8	0f b7 54 01 24	 movzx	 edx, WORD PTR [ecx+eax+36]
  00fdd	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00fe0	3b 90 94 22 00
	00		 cmp	 edx, DWORD PTR [eax+8852]
  00fe6	7f 1c		 jg	 SHORT $LN12@GCWindows
  00fe8	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  00fee	c1 e0 05	 shl	 eax, 5
  00ff1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ff4	0f b7 54 01 26	 movzx	 edx, WORD PTR [ecx+eax+38]
  00ff9	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00ffc	39 90 94 22 00
	00		 cmp	 DWORD PTR [eax+8852], edx
  01002	7e 22		 jle	 SHORT $LN13@GCWindows
$LN12@GCWindows:

; 319  : 		{
; 320  : 			pMsg.tdata[i].result = 0;

  01004	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0100a	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0100d	c6 84 05 3c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 321  : 			pMsg.tdata[i].ok_grand = 0;

  01015	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0101b	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0101e	c6 84 05 50 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+28], 0
$LN13@GCWindows:

; 322  : 		}
; 323  : 		if(this->data[i].premium > 0 && lpUser->PremiumTime == 0)

  01026	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0102c	c1 e0 05	 shl	 eax, 5
  0102f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01032	0f b6 54 01 28	 movzx	 edx, BYTE PTR [ecx+eax+40]
  01037	85 d2		 test	 edx, edx
  01039	7e 2e		 jle	 SHORT $LN11@GCWindows
  0103b	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0103e	83 b8 b8 22 00
	00 00		 cmp	 DWORD PTR [eax+8888], 0
  01045	75 22		 jne	 SHORT $LN11@GCWindows

; 324  : 		{
; 325  : 			pMsg.tdata[i].result = 0;

  01047	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0104d	6b c0 2c	 imul	 eax, 44			; 0000002cH
  01050	c6 84 05 3c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 326  : 			pMsg.tdata[i].ok_premium = 0;

  01058	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0105e	6b c0 2c	 imul	 eax, 44			; 0000002cH
  01061	c6 84 05 52 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+30], 0
$LN11@GCWindows:

; 327  : 		}
; 328  : #if(LICENSE_MUEVIL)
; 329  : 		if(this->data[i].premium > lpUser->PremiumTimeType)
; 330  : 		{
; 331  : 			pMsg.tdata[i].result = 0;
; 332  : 			pMsg.tdata[i].ok_premium = 0;
; 333  : 		}
; 334  : #endif
; 335  : 		if(this->data[i].zen > lpUser->Money)

  01069	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0106f	c1 e0 05	 shl	 eax, 5
  01072	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01075	8b 55 f4	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01078	8b 44 01 2c	 mov	 eax, DWORD PTR [ecx+eax+44]
  0107c	3b 82 f0 00 00
	00		 cmp	 eax, DWORD PTR [edx+240]
  01082	76 22		 jbe	 SHORT $LN10@GCWindows

; 336  : 		{
; 337  : 			pMsg.tdata[i].result = 0;

  01084	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0108a	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0108d	c6 84 05 3c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 338  : 			pMsg.tdata[i].ok_zen = 0;

  01095	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0109b	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0109e	c6 84 05 58 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+36], 0
$LN10@GCWindows:

; 339  : 		}
; 340  : 		if(this->data[i].bonus > lpUser->GameShop.WCoinC)

  010a6	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  010ac	c1 e0 05	 shl	 eax, 5
  010af	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  010b2	0f b7 54 01 30	 movzx	 edx, WORD PTR [ecx+eax+48]
  010b7	89 95 e8 fd ff
	ff		 mov	 DWORD PTR tv517[ebp], edx
  010bd	db 85 e8 fd ff
	ff		 fild	 DWORD PTR tv517[ebp]
  010c3	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  010c6	dc 98 00 23 00
	00		 fcomp	 QWORD PTR [eax+8960]
  010cc	df e0		 fnstsw	 ax
  010ce	f6 c4 41	 test	 ah, 65			; 00000041H
  010d1	75 22		 jne	 SHORT $LN9@GCWindows

; 341  : 		{
; 342  : 			pMsg.tdata[i].result = 0;

  010d3	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  010d9	6b c0 2c	 imul	 eax, 44			; 0000002cH
  010dc	c6 84 05 3c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 343  : 			pMsg.tdata[i].ok_bonus = 0;

  010e4	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  010ea	6b c0 2c	 imul	 eax, 44			; 0000002cH
  010ed	c6 84 05 5c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+40], 0
$LN9@GCWindows:

; 344  : 		}
; 345  : 		if(this->data[i].credit > lpUser->ExCred)

  010f5	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  010fb	c1 e0 05	 shl	 eax, 5
  010fe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01101	0f b7 54 01 32	 movzx	 edx, WORD PTR [ecx+eax+50]
  01106	89 95 e8 fd ff
	ff		 mov	 DWORD PTR tv526[ebp], edx
  0110c	db 85 e8 fd ff
	ff		 fild	 DWORD PTR tv526[ebp]
  01112	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01115	d9 80 a8 22 00
	00		 fld	 DWORD PTR [eax+8872]
  0111b	de d9		 fcompp
  0111d	df e0		 fnstsw	 ax
  0111f	f6 c4 05	 test	 ah, 5
  01122	7a 22		 jp	 SHORT $LN8@GCWindows

; 346  : 		{
; 347  : 			pMsg.tdata[i].result = 0;

  01124	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0112a	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0112d	c6 84 05 3c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 348  : 			pMsg.tdata[i].ok_credit = 0;

  01135	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0113b	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0113e	c6 84 05 60 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+44], 0
$LN8@GCWindows:

; 349  : 		}
; 350  : 		if(this->data[i].Master)

  01146	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0114c	c1 e0 05	 shl	 eax, 5
  0114f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01152	0f b6 54 01 34	 movzx	 edx, BYTE PTR [ecx+eax+52]
  01157	85 d2		 test	 edx, edx
  01159	74 30		 je	 SHORT $LN6@GCWindows

; 351  : 		{
; 352  : 			if(!lpUser->ChangeUP3rd)

  0115b	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0115e	0f b6 88 bc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+188]
  01165	85 c9		 test	 ecx, ecx
  01167	75 22		 jne	 SHORT $LN6@GCWindows

; 353  : 			{
; 354  : 				pMsg.tdata[i].result = 0;

  01169	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  0116f	6b c0 2c	 imul	 eax, 44			; 0000002cH
  01172	c6 84 05 3c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 355  : 				pMsg.tdata[i].ok_Master = 0;

  0117a	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  01180	6b c0 2c	 imul	 eax, 44			; 0000002cH
  01183	c6 84 05 62 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+46], 0
$LN6@GCWindows:

; 356  : 			}
; 357  : 		}
; 358  : 		if(this->data[i].EmptyInv)

  0118b	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  01191	c1 e0 05	 shl	 eax, 5
  01194	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01197	0f b6 54 01 35	 movzx	 edx, BYTE PTR [ecx+eax+53]
  0119c	85 d2		 test	 edx, edx
  0119e	74 6a		 je	 SHORT $LN2@GCWindows

; 359  : 		{
; 360  : 			for(int n = 0; n < INVENTORY_SIZE; n++)

  011a0	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$228545[ebp], 0
  011aa	eb 0f		 jmp	 SHORT $LN4@GCWindows
$LN3@GCWindows:
  011ac	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _n$228545[ebp]
  011b2	83 c0 01	 add	 eax, 1
  011b5	89 85 2c fe ff
	ff		 mov	 DWORD PTR _n$228545[ebp], eax
$LN4@GCWindows:
  011bb	81 bd 2c fe ff
	ff ec 00 00 00	 cmp	 DWORD PTR _n$228545[ebp], 236 ; 000000ecH
  011c5	7d 43		 jge	 SHORT $LN2@GCWindows

; 361  : 			{
; 362  : 				if(lpUser->pInventory[n].IsItem() == TRUE)

  011c7	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR _n$228545[ebp]
  011cd	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  011d3	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  011d6	03 88 24 0e 00
	00		 add	 ecx, DWORD PTR [eax+3620]
  011dc	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  011e1	83 f8 01	 cmp	 eax, 1
  011e4	75 22		 jne	 SHORT $LN1@GCWindows

; 363  : 				{
; 364  : 					pMsg.tdata[i].result = 0;

  011e6	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  011ec	6b c0 2c	 imul	 eax, 44			; 0000002cH
  011ef	c6 84 05 3c fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+8], 0

; 365  : 					pMsg.tdata[i].ok_EmptyInv = 0;				

  011f7	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$228528[ebp]
  011fd	6b c0 2c	 imul	 eax, 44			; 0000002cH
  01200	c6 84 05 64 fe
	ff ff 00	 mov	 BYTE PTR _pMsg$[ebp+eax+48], 0
$LN1@GCWindows:

; 366  : 				}
; 367  : 			}

  01208	eb a2		 jmp	 SHORT $LN3@GCWindows
$LN2@GCWindows:

; 368  : 		}
; 369  : 
; 370  : 	}

  0120a	e9 48 fa ff ff	 jmp	 $LN19@GCWindows
$LN18@GCWindows:

; 371  : 
; 372  : 	DataSend(lpUser->m_Index, (LPBYTE)&pMsg, sizeof(pMsg));

  0120f	68 c0 01 00 00	 push	 448			; 000001c0H
  01214	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0121a	50		 push	 eax
  0121b	8b 4d f4	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0121e	8b 11		 mov	 edx, DWORD PTR [ecx]
  01220	52		 push	 edx
  01221	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01226	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@GCWindows:

; 373  : }

  01229	5f		 pop	 edi
  0122a	5e		 pop	 esi
  0122b	5b		 pop	 ebx
  0122c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0122f	33 cd		 xor	 ecx, ebp
  01231	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01236	8b e5		 mov	 esp, ebp
  01238	5d		 pop	 ebp
  01239	c2 04 00	 ret	 4
?GCWindows@ExTeleportEvo@@QAEXH@Z ENDP			; ExTeleportEvo::GCWindows
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z PROC			; PWMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 149  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 150  : 		lpBuf[0] = 0xC2;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H

; 151  : 		lpBuf[1] = SET_NUMBERH(size);

  00012	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00015	c1 e8 08	 shr	 eax, 8
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  0001b	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 152  : 		lpBuf[2] = SET_NUMBERL(size);

  0001e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00021	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00029	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 153  : 		lpBuf[3] = head;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0002f	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00032	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 154  : 		lpBuf[4] = sub;

  00035	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00038	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0003b	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 155  : 	}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 10 00	 ret	 16			; 00000010H
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ENDP			; PWMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?CGResult@ExTeleportEvo@@QAEXPAUPMSG_CG_TELEPORTWINRESEVO@@H@Z ; ExTeleportEvo::CGResult
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?ExUserDataSend@@YAXH@Z:PROC			; ExUserDataSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exteleportevo.cpp
_TEXT	SEGMENT
tv326 = -80						; size = 4
tv317 = -80						; size = 4
tv297 = -80						; size = 4
tv290 = -80						; size = 4
tv67 = -80						; size = 4
_i$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
_aUserIndex$ = 12					; size = 4
?CGResult@ExTeleportEvo@@QAEXPAUPMSG_CG_TELEPORTWINRESEVO@@H@Z PROC ; ExTeleportEvo::CGResult
; _this$ = ecx

; 377  : {

  01240	55		 push	 ebp
  01241	8b ec		 mov	 ebp, esp
  01243	83 ec 50	 sub	 esp, 80			; 00000050H
  01246	53		 push	 ebx
  01247	56		 push	 esi
  01248	57		 push	 edi
  01249	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 378  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  0124c	83 7d 0c 00	 cmp	 DWORD PTR _aUserIndex$[ebp], 0
  01250	7d 09		 jge	 SHORT $LN21@CGResult
  01252	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  01259	eb 0f		 jmp	 SHORT $LN22@CGResult
$LN21@CGResult:
  0125b	33 c0		 xor	 eax, eax
  0125d	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aUserIndex$[ebp], 14999 ; 00003a97H
  01264	0f 9e c0	 setle	 al
  01267	89 45 b0	 mov	 DWORD PTR tv67[ebp], eax
$LN22@CGResult:
  0126a	83 7d b0 00	 cmp	 DWORD PTR tv67[ebp], 0
  0126e	75 05		 jne	 SHORT $LN18@CGResult

; 379  : 	{
; 380  : 		return;

  01270	e9 85 02 00 00	 jmp	 $LN19@CGResult
$LN18@CGResult:

; 381  : 	}
; 382  : 
; 383  : 	LPOBJ lpUser = &gObj[aUserIndex];

  01275	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  01278	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0127e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01284	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 384  : 
; 385  : 	if(lpUser->Connected < PLAYER_PLAYING)

  01287	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0128a	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0128e	7d 05		 jge	 SHORT $LN17@CGResult

; 386  : 	{
; 387  : 		return;

  01290	e9 65 02 00 00	 jmp	 $LN19@CGResult
$LN17@CGResult:

; 388  : 	}
; 389  : 
; 390  : 	int i = aRecv->result;

  01295	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01298	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0129c	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx

; 391  : 
; 392  : 	if(i < 0 || i > this->iLoadedCount)

  0129f	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  012a3	7c 0b		 jl	 SHORT $LN15@CGResult
  012a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012a8	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  012ab	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  012ae	7e 05		 jle	 SHORT $LN16@CGResult
$LN15@CGResult:

; 393  : 	{
; 394  : 		return;

  012b0	e9 45 02 00 00	 jmp	 $LN19@CGResult
$LN16@CGResult:

; 395  : 	}
; 396  : 
; 397  : 	if(this->data[i].min_level > lpUser->Level || lpUser->Level > this->data[i].max_level)

  012b5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  012b8	c1 e0 05	 shl	 eax, 5
  012bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012be	0f b7 54 01 1c	 movzx	 edx, WORD PTR [ecx+eax+28]
  012c3	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  012c6	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  012cd	3b d1		 cmp	 edx, ecx
  012cf	7f 1c		 jg	 SHORT $LN13@CGResult
  012d1	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  012d4	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  012db	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  012de	c1 e2 05	 shl	 edx, 5
  012e1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012e4	0f b7 54 10 1e	 movzx	 edx, WORD PTR [eax+edx+30]
  012e9	3b ca		 cmp	 ecx, edx
  012eb	7e 05		 jle	 SHORT $LN14@CGResult
$LN13@CGResult:

; 398  : 	{
; 399  : 		return;

  012ed	e9 08 02 00 00	 jmp	 $LN19@CGResult
$LN14@CGResult:

; 400  : 	}
; 401  : 	if(this->data[i].min_reset > lpUser->Reset || lpUser->Reset > this->data[i].max_reset)

  012f2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  012f5	c1 e0 05	 shl	 eax, 5
  012f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012fb	0f b7 54 01 20	 movzx	 edx, WORD PTR [ecx+eax+32]
  01300	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01303	3b 90 90 22 00
	00		 cmp	 edx, DWORD PTR [eax+8848]
  01309	7f 19		 jg	 SHORT $LN11@CGResult
  0130b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0130e	c1 e0 05	 shl	 eax, 5
  01311	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01314	0f b7 54 01 22	 movzx	 edx, WORD PTR [ecx+eax+34]
  01319	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0131c	39 90 90 22 00
	00		 cmp	 DWORD PTR [eax+8848], edx
  01322	7e 05		 jle	 SHORT $LN12@CGResult
$LN11@CGResult:

; 402  : 	{
; 403  : 		return;

  01324	e9 d1 01 00 00	 jmp	 $LN19@CGResult
$LN12@CGResult:

; 404  : 	}
; 405  : 	if(this->data[i].min_grand > lpUser->GReset || lpUser->GReset > this->data[i].max_grand)

  01329	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0132c	c1 e0 05	 shl	 eax, 5
  0132f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01332	0f b7 54 01 24	 movzx	 edx, WORD PTR [ecx+eax+36]
  01337	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0133a	3b 90 94 22 00
	00		 cmp	 edx, DWORD PTR [eax+8852]
  01340	7f 19		 jg	 SHORT $LN9@CGResult
  01342	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01345	c1 e0 05	 shl	 eax, 5
  01348	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0134b	0f b7 54 01 26	 movzx	 edx, WORD PTR [ecx+eax+38]
  01350	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01353	39 90 94 22 00
	00		 cmp	 DWORD PTR [eax+8852], edx
  01359	7e 05		 jle	 SHORT $LN10@CGResult
$LN9@CGResult:

; 406  : 	{
; 407  : 		return;

  0135b	e9 9a 01 00 00	 jmp	 $LN19@CGResult
$LN10@CGResult:

; 408  : 	}
; 409  : 	if(this->data[i].premium > 0)

  01360	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01363	c1 e0 05	 shl	 eax, 5
  01366	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01369	0f b6 54 01 28	 movzx	 edx, BYTE PTR [ecx+eax+40]
  0136e	85 d2		 test	 edx, edx
  01370	7e 11		 jle	 SHORT $LN7@CGResult

; 410  : 	{
; 411  : 		#if(LICENSE_MUEVIL)
; 412  : 		if(this->data[i].premium > lpUser->PremiumTimeType)
; 413  : 		{
; 414  : 			return;
; 415  : 		}
; 416  : 		#endif
; 417  : 		if(lpUser->PremiumTime <= 0)

  01372	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01375	83 b8 b8 22 00
	00 00		 cmp	 DWORD PTR [eax+8888], 0
  0137c	7f 05		 jg	 SHORT $LN7@CGResult

; 418  : 		{
; 419  : 			return;

  0137e	e9 77 01 00 00	 jmp	 $LN19@CGResult
$LN7@CGResult:

; 420  : 		}		
; 421  : 	}
; 422  : 	if(this->data[i].zen > lpUser->Money)

  01383	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01386	c1 e0 05	 shl	 eax, 5
  01389	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0138c	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  0138f	8b 44 01 2c	 mov	 eax, DWORD PTR [ecx+eax+44]
  01393	3b 82 f0 00 00
	00		 cmp	 eax, DWORD PTR [edx+240]
  01399	76 05		 jbe	 SHORT $LN6@CGResult

; 423  : 	{
; 424  : 		return;

  0139b	e9 5a 01 00 00	 jmp	 $LN19@CGResult
$LN6@CGResult:

; 425  : 	}
; 426  : 	if(this->data[i].bonus > lpUser->GameShop.WCoinC)

  013a0	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  013a3	c1 e0 05	 shl	 eax, 5
  013a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013a9	0f b7 54 01 30	 movzx	 edx, WORD PTR [ecx+eax+48]
  013ae	89 55 b0	 mov	 DWORD PTR tv290[ebp], edx
  013b1	db 45 b0	 fild	 DWORD PTR tv290[ebp]
  013b4	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  013b7	dc 98 00 23 00
	00		 fcomp	 QWORD PTR [eax+8960]
  013bd	df e0		 fnstsw	 ax
  013bf	f6 c4 41	 test	 ah, 65			; 00000041H
  013c2	75 05		 jne	 SHORT $LN5@CGResult

; 427  : 	{
; 428  : 		return;

  013c4	e9 31 01 00 00	 jmp	 $LN19@CGResult
$LN5@CGResult:

; 429  : 	}
; 430  : 	if(this->data[i].credit > lpUser->ExCred)

  013c9	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  013cc	c1 e0 05	 shl	 eax, 5
  013cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013d2	0f b7 54 01 32	 movzx	 edx, WORD PTR [ecx+eax+50]
  013d7	89 55 b0	 mov	 DWORD PTR tv297[ebp], edx
  013da	db 45 b0	 fild	 DWORD PTR tv297[ebp]
  013dd	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  013e0	d9 80 a8 22 00
	00		 fld	 DWORD PTR [eax+8872]
  013e6	de d9		 fcompp
  013e8	df e0		 fnstsw	 ax
  013ea	f6 c4 05	 test	 ah, 5
  013ed	7a 05		 jp	 SHORT $LN4@CGResult

; 431  : 	{
; 432  : 		return;

  013ef	e9 06 01 00 00	 jmp	 $LN19@CGResult
$LN4@CGResult:

; 433  : 	}
; 434  : 	// ----
; 435  : 	if(this->data[i].zen > 0)

  013f4	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  013f7	c1 e0 05	 shl	 eax, 5
  013fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013fd	83 7c 01 2c 00	 cmp	 DWORD PTR [ecx+eax+44], 0
  01402	76 35		 jbe	 SHORT $LN3@CGResult

; 436  : 	{
; 437  : 		lpUser->Money -= this->data[i].zen;

  01404	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01407	c1 e0 05	 shl	 eax, 5
  0140a	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0140d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01410	8b 89 f0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+240]
  01416	2b 4c 02 2c	 sub	 ecx, DWORD PTR [edx+eax+44]
  0141a	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  0141d	89 8a f0 00 00
	00		 mov	 DWORD PTR [edx+240], ecx

; 438  : 		GCMoneySend(aUserIndex, lpUser->Money);

  01423	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01426	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  0142c	51		 push	 ecx
  0142d	8b 55 0c	 mov	 edx, DWORD PTR _aUserIndex$[ebp]
  01430	52		 push	 edx
  01431	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  01436	83 c4 08	 add	 esp, 8
$LN3@CGResult:

; 439  : 	}
; 440  : 	if(this->data[i].bonus > 0)

  01439	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0143c	c1 e0 05	 shl	 eax, 5
  0143f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01442	0f b7 54 01 30	 movzx	 edx, WORD PTR [ecx+eax+48]
  01447	85 d2		 test	 edx, edx
  01449	7e 32		 jle	 SHORT $LN2@CGResult

; 441  : 	{
; 442  : 		lpUser->GameShop.WCoinC -= this->data[i].bonus;

  0144b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0144e	c1 e0 05	 shl	 eax, 5
  01451	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01454	0f b7 54 01 30	 movzx	 edx, WORD PTR [ecx+eax+48]
  01459	89 55 b0	 mov	 DWORD PTR tv317[ebp], edx
  0145c	db 45 b0	 fild	 DWORD PTR tv317[ebp]
  0145f	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01462	dc a8 00 23 00
	00		 fsubr	 QWORD PTR [eax+8960]
  01468	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0146b	dd 99 00 23 00
	00		 fstp	 QWORD PTR [ecx+8960]

; 443  : 		ExUserDataSend(aUserIndex);

  01471	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  01474	50		 push	 eax
  01475	e8 00 00 00 00	 call	 ?ExUserDataSend@@YAXH@Z	; ExUserDataSend
  0147a	83 c4 04	 add	 esp, 4
$LN2@CGResult:

; 444  : 	}
; 445  : 	if(this->data[i].credit > 0)

  0147d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01480	c1 e0 05	 shl	 eax, 5
  01483	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01486	0f b7 54 01 32	 movzx	 edx, WORD PTR [ecx+eax+50]
  0148b	85 d2		 test	 edx, edx
  0148d	7e 32		 jle	 SHORT $LN1@CGResult

; 446  : 	{
; 447  : 		lpUser->ExCred -= this->data[i].credit;

  0148f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01492	c1 e0 05	 shl	 eax, 5
  01495	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01498	0f b7 54 01 32	 movzx	 edx, WORD PTR [ecx+eax+50]
  0149d	89 55 b0	 mov	 DWORD PTR tv326[ebp], edx
  014a0	db 45 b0	 fild	 DWORD PTR tv326[ebp]
  014a3	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  014a6	d8 a8 a8 22 00
	00		 fsubr	 DWORD PTR [eax+8872]
  014ac	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  014af	d9 99 a8 22 00
	00		 fstp	 DWORD PTR [ecx+8872]

; 448  : 		ExUserDataSend(aUserIndex);

  014b5	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  014b8	50		 push	 eax
  014b9	e8 00 00 00 00	 call	 ?ExUserDataSend@@YAXH@Z	; ExUserDataSend
  014be	83 c4 04	 add	 esp, 4
$LN1@CGResult:

; 449  : 	}
; 450  : 
; 451  : 	gObjTeleport(aUserIndex, this->data[i].map, this->data[i].x, this->data[i].y);

  014c1	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  014c4	c1 e0 05	 shl	 eax, 5
  014c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014ca	0f b6 54 01 1a	 movzx	 edx, BYTE PTR [ecx+eax+26]
  014cf	52		 push	 edx
  014d0	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  014d3	c1 e0 05	 shl	 eax, 5
  014d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014d9	0f b6 54 01 19	 movzx	 edx, BYTE PTR [ecx+eax+25]
  014de	52		 push	 edx
  014df	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  014e2	c1 e0 05	 shl	 eax, 5
  014e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014e8	0f b6 54 01 18	 movzx	 edx, BYTE PTR [ecx+eax+24]
  014ed	52		 push	 edx
  014ee	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  014f1	50		 push	 eax
  014f2	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  014f7	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@CGResult:

; 452  : }

  014fa	5f		 pop	 edi
  014fb	5e		 pop	 esi
  014fc	5b		 pop	 ebx
  014fd	8b e5		 mov	 esp, ebp
  014ff	5d		 pop	 ebp
  01500	c2 08 00	 ret	 8
?CGResult@ExTeleportEvo@@QAEXPAUPMSG_CG_TELEPORTWINRESEVO@@H@Z ENDP ; ExTeleportEvo::CGResult
_TEXT	ENDS
PUBLIC	?CGDialog@ExTeleportEvo@@QAEXPAUPMSG_CG_DIALOGEVO@@H@Z ; ExTeleportEvo::CGDialog
EXTRN	?GCWindows@ExTeleport@@QAEXH@Z:PROC		; ExTeleport::GCWindows
EXTRN	?g_ExTeleport@@3VExTeleport@@A:BYTE		; g_ExTeleport
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_lpMsg$ = 8						; size = 4
_aUserIndex$ = 12					; size = 4
?CGDialog@ExTeleportEvo@@QAEXPAUPMSG_CG_DIALOGEVO@@H@Z PROC ; ExTeleportEvo::CGDialog
; _this$ = ecx

; 456  : {

  01510	55		 push	 ebp
  01511	8b ec		 mov	 ebp, esp
  01513	83 ec 48	 sub	 esp, 72			; 00000048H
  01516	53		 push	 ebx
  01517	56		 push	 esi
  01518	57		 push	 edi
  01519	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 457  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  0151c	83 7d 0c 00	 cmp	 DWORD PTR _aUserIndex$[ebp], 0
  01520	7d 09		 jge	 SHORT $LN7@CGDialog
  01522	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  01529	eb 0f		 jmp	 SHORT $LN8@CGDialog
$LN7@CGDialog:
  0152b	33 c0		 xor	 eax, eax
  0152d	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aUserIndex$[ebp], 14999 ; 00003a97H
  01534	0f 9e c0	 setle	 al
  01537	89 45 b8	 mov	 DWORD PTR tv67[ebp], eax
$LN8@CGDialog:
  0153a	83 7d b8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0153e	75 02		 jne	 SHORT $LN4@CGDialog

; 458  : 	{
; 459  : 		return;

  01540	eb 68		 jmp	 SHORT $LN5@CGDialog
$LN4@CGDialog:

; 460  : 	}
; 461  : 
; 462  : 	if(g_ExLicense.CheckUser(Local) || g_ExLicense.CheckUser(Gredy) || g_ExLicense.CheckUser(Gredy2) || g_ExLicense.CheckUser(GredyLocal))

  01542	6a 00		 push	 0
  01544	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01549	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0154e	0f b6 c0	 movzx	 eax, al
  01551	85 c0		 test	 eax, eax
  01553	75 39		 jne	 SHORT $LN2@CGDialog
  01555	6a 20		 push	 32			; 00000020H
  01557	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0155c	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01561	0f b6 c0	 movzx	 eax, al
  01564	85 c0		 test	 eax, eax
  01566	75 26		 jne	 SHORT $LN2@CGDialog
  01568	6a 22		 push	 34			; 00000022H
  0156a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0156f	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01574	0f b6 c0	 movzx	 eax, al
  01577	85 c0		 test	 eax, eax
  01579	75 13		 jne	 SHORT $LN2@CGDialog
  0157b	6a 21		 push	 33			; 00000021H
  0157d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01582	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01587	0f b6 c0	 movzx	 eax, al
  0158a	85 c0		 test	 eax, eax
  0158c	74 0e		 je	 SHORT $LN3@CGDialog
$LN2@CGDialog:

; 463  : 	{
; 464  : 		this->GCWindows(aUserIndex);

  0158e	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  01591	50		 push	 eax
  01592	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01595	e8 00 00 00 00	 call	 ?GCWindows@ExTeleportEvo@@QAEXH@Z ; ExTeleportEvo::GCWindows

; 465  : 	}
; 466  : 	else

  0159a	eb 0e		 jmp	 SHORT $LN5@CGDialog
$LN3@CGDialog:

; 467  : 	{
; 468  : 		g_ExTeleport.GCWindows(aUserIndex);

  0159c	8b 45 0c	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  0159f	50		 push	 eax
  015a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExTeleport@@3VExTeleport@@A ; g_ExTeleport
  015a5	e8 00 00 00 00	 call	 ?GCWindows@ExTeleport@@QAEXH@Z ; ExTeleport::GCWindows
$LN5@CGDialog:

; 469  : 	}
; 470  : }

  015aa	5f		 pop	 edi
  015ab	5e		 pop	 esi
  015ac	5b		 pop	 ebx
  015ad	8b e5		 mov	 esp, ebp
  015af	5d		 pop	 ebp
  015b0	c2 08 00	 ret	 8
?CGDialog@ExTeleportEvo@@QAEXPAUPMSG_CG_DIALOGEVO@@H@Z ENDP ; ExTeleportEvo::CGDialog
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_ExTeleportEvo@@YAXXZ
text$yc	SEGMENT
??__Eg_ExTeleportEvo@@YAXXZ PROC			; `dynamic initializer for 'g_ExTeleportEvo'', COMDAT

; 14   : ExTeleportEvo g_ExTeleportEvo;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExTeleportEvo@@3VExTeleportEvo@@A ; g_ExTeleportEvo
  0000e	e8 00 00 00 00	 call	 ??0ExTeleportEvo@@QAE@XZ ; ExTeleportEvo::ExTeleportEvo
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_ExTeleportEvo@@YAXXZ ; `dynamic atexit destructor for 'g_ExTeleportEvo''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_ExTeleportEvo@@YAXXZ ENDP			; `dynamic initializer for 'g_ExTeleportEvo''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_ExTeleportEvo@@YAXXZ
text$yd	SEGMENT
??__Fg_ExTeleportEvo@@YAXXZ PROC			; `dynamic atexit destructor for 'g_ExTeleportEvo'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExTeleportEvo@@3VExTeleportEvo@@A ; g_ExTeleportEvo
  0000e	e8 00 00 00 00	 call	 ??1ExTeleportEvo@@QAE@XZ ; ExTeleportEvo::~ExTeleportEvo
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_ExTeleportEvo@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_ExTeleportEvo''
text$yd	ENDS
PUBLIC	?g_ExTeleportEvo@@3VExTeleportEvo@@A		; g_ExTeleportEvo
_BSS	SEGMENT
?g_ExTeleportEvo@@3VExTeleportEvo@@A DB 0158H DUP (?)	; g_ExTeleportEvo
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ExTeleportEvo$initializer$ DD FLAT:??__Eg_ExTeleportEvo@@YAXXZ
CRT$XCU	ENDS
END
