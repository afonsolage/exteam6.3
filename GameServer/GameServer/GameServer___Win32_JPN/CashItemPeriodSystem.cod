; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\CashItemPeriodSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bRunningPeriodCheckThread@@3HA		; g_bRunningPeriodCheckThread
_BSS	SEGMENT
?g_bRunningPeriodCheckThread@@3HA DD 01H DUP (?)	; g_bRunningPeriodCheckThread
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CCashItemPeriodSystem@@6B@			; CCashItemPeriodSystem::`vftable'
PUBLIC	??0CCashItemPeriodSystem@@QAE@XZ		; CCashItemPeriodSystem::CCashItemPeriodSystem
PUBLIC	??_R4CCashItemPeriodSystem@@6B@			; CCashItemPeriodSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCashItemPeriodSystem@@@8		; CCashItemPeriodSystem `RTTI Type Descriptor'
PUBLIC	??_R3CCashItemPeriodSystem@@8			; CCashItemPeriodSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCashItemPeriodSystem@@8			; CCashItemPeriodSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCashItemPeriodSystem@@8		; CCashItemPeriodSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCashItemPeriodSystem@@UAEPAXI@Z:PROC	; CCashItemPeriodSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCashItemPeriodSystem@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\cashitemperiodsystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCashItemPeriodSystem@@8 DD FLAT:??_R0?AVCCashItemPeriodSystem@@@8 ; CCashItemPeriodSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCashItemPeriodSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CCashItemPeriodSystem@@8
rdata$r	SEGMENT
??_R2CCashItemPeriodSystem@@8 DD FLAT:??_R1A@?0A@EA@CCashItemPeriodSystem@@8 ; CCashItemPeriodSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCashItemPeriodSystem@@8
rdata$r	SEGMENT
??_R3CCashItemPeriodSystem@@8 DD 00H			; CCashItemPeriodSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCashItemPeriodSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCashItemPeriodSystem@@@8
_DATA	SEGMENT
??_R0?AVCCashItemPeriodSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CCashItemPeriodSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCashItemPeriodSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCashItemPeriodSystem@@6B@
rdata$r	SEGMENT
??_R4CCashItemPeriodSystem@@6B@ DD 00H			; CCashItemPeriodSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCashItemPeriodSystem@@@8
	DD	FLAT:??_R3CCashItemPeriodSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CCashItemPeriodSystem@@6B@
CONST	SEGMENT
??_7CCashItemPeriodSystem@@6B@ DD FLAT:??_R4CCashItemPeriodSystem@@6B@ ; CCashItemPeriodSystem::`vftable'
	DD	FLAT:??_ECCashItemPeriodSystem@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCashItemPeriodSystem@@QAE@XZ PROC			; CCashItemPeriodSystem::CCashItemPeriodSystem
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCashItemPeriodSystem@@6B@

; 17   : 
; 18   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CCashItemPeriodSystem@@QAE@XZ ENDP			; CCashItemPeriodSystem::CCashItemPeriodSystem
_TEXT	ENDS
PUBLIC	??1CCashItemPeriodSystem@@UAE@XZ		; CCashItemPeriodSystem::~CCashItemPeriodSystem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCCashItemPeriodSystem@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCashItemPeriodSystem@@UAEPAXI@Z PROC		; CCashItemPeriodSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CCashItemPeriodSystem@@UAE@XZ ; CCashItemPeriodSystem::~CCashItemPeriodSystem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCCashItemPeriodSystem@@UAEPAXI@Z ENDP		; CCashItemPeriodSystem::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCashItemPeriodSystem@@UAE@XZ PROC			; CCashItemPeriodSystem::~CCashItemPeriodSystem
; _this$ = ecx

; 21   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCashItemPeriodSystem@@6B@

; 22   : 
; 23   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CCashItemPeriodSystem@@UAE@XZ ENDP			; CCashItemPeriodSystem::~CCashItemPeriodSystem
_TEXT	ENDS
PUBLIC	??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@ ; `string'
PUBLIC	?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z ; CCashItemPeriodSystem::PeriodCheckThread
PUBLIC	?Initialize@CCashItemPeriodSystem@@QAEXXZ	; CCashItemPeriodSystem::Initialize
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__CreateThread@24:PROC
;	COMDAT ??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@
CONST	SEGMENT
??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@ DB 'CreateT'
	DB	'hread() failed with error %d', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_j$228068 = -12						; size = 4
_i$228064 = -8						; size = 4
_this$ = -4						; size = 4
?Initialize@CCashItemPeriodSystem@@QAEXXZ PROC		; CCashItemPeriodSystem::Initialize
; _this$ = ecx

; 26   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	//g_bRunningPeriodCheckThread = FALSE;
; 28   : 	this->iItemPeriodInfoCount = 0;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 29   : 
; 30   : 	for(int i = 0; i < MAX_ITEM_PERIOD_INFO; i++ )

  00056	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$228064[ebp], 0
  0005d	eb 09		 jmp	 SHORT $LN8@Initialize
$LN7@Initialize:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  00062	83 c0 01	 add	 eax, 1
  00065	89 45 f8	 mov	 DWORD PTR _i$228064[ebp], eax
$LN8@Initialize:
  00068	81 7d f8 dc 05
	00 00		 cmp	 DWORD PTR _i$228064[ebp], 1500 ; 000005dcH
  0006f	0f 8d 5a 01 00
	00		 jge	 $LN6@Initialize

; 31   : 	{
; 32   : 		this->ItemPeriodInfo[i].btUsedInfo = 0;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  00078	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	c6 44 01 08 00	 mov	 BYTE PTR [ecx+eax+8], 0

; 33   : 		this->ItemPeriodInfo[i].btCountItems = 0;

  00086	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  00089	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	c6 44 01 09 00	 mov	 BYTE PTR [ecx+eax+9], 0

; 34   : 		this->ItemPeriodInfo[i].wdUserIndex = 0;

  00097	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  0009a	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  000a0	33 c9		 xor	 ecx, ecx
  000a2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a5	66 89 4c 02 0a	 mov	 WORD PTR [edx+eax+10], cx

; 35   : 		this->ItemPeriodInfo[i].iUserGuid = 0;

  000aa	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  000ad	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	c7 44 01 0c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+12], 0

; 36   : 		this->ItemPeriodInfo[i].dwItemCheckTickCount = 0;

  000be	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  000c1	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 0

; 37   : 		this->ItemPeriodInfo[i].chCharacterName[0] = NULL;

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  000d5	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  000db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	c6 44 01 14 00	 mov	 BYTE PTR [ecx+eax+20], 0

; 38   : 
; 39   : 		for( int j = 0; j < MAX_ITEM_PERIOD_EFFECT; j++ )

  000e3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$228068[ebp], 0
  000ea	eb 09		 jmp	 SHORT $LN5@Initialize
$LN4@Initialize:
  000ec	8b 45 f4	 mov	 eax, DWORD PTR _j$228068[ebp]
  000ef	83 c0 01	 add	 eax, 1
  000f2	89 45 f4	 mov	 DWORD PTR _j$228068[ebp], eax
$LN5@Initialize:
  000f5	83 7d f4 0a	 cmp	 DWORD PTR _j$228068[ebp], 10 ; 0000000aH
  000f9	0f 8d cb 00 00
	00		 jge	 $LN3@Initialize

; 40   : 		{
; 41   : 			this->ItemPeriodInfo[i].vItemEffect[j].bInUse = false;

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  00102	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00108	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  0010f	8b 45 f4	 mov	 eax, DWORD PTR _j$228068[ebp]
  00112	c1 e0 04	 shl	 eax, 4
  00115	c6 44 02 18 00	 mov	 BYTE PTR [edx+eax+24], 0

; 42   : 			this->ItemPeriodInfo[i].vItemEffect[j].btOptionType = 0;

  0011a	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  0011d	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00123	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  0012a	8b 45 f4	 mov	 eax, DWORD PTR _j$228068[ebp]
  0012d	c1 e0 04	 shl	 eax, 4
  00130	c6 44 02 19 00	 mov	 BYTE PTR [edx+eax+25], 0

; 43   : 			this->ItemPeriodInfo[i].vItemEffect[j].btEffectType1 = 0;

  00135	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  00138	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0013e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00145	8b 45 f4	 mov	 eax, DWORD PTR _j$228068[ebp]
  00148	c1 e0 04	 shl	 eax, 4
  0014b	c6 44 02 1a 00	 mov	 BYTE PTR [edx+eax+26], 0

; 44   : 			this->ItemPeriodInfo[i].vItemEffect[j].btEffectType2 = 0;

  00150	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  00153	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00159	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00160	8b 45 f4	 mov	 eax, DWORD PTR _j$228068[ebp]
  00163	c1 e0 04	 shl	 eax, 4
  00166	c6 44 02 1b 00	 mov	 BYTE PTR [edx+eax+27], 0

; 45   : 			this->ItemPeriodInfo[i].vItemEffect[j].iItemCode = -1;

  0016b	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  0016e	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00174	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  0017b	8b 45 f4	 mov	 eax, DWORD PTR _j$228068[ebp]
  0017e	c1 e0 04	 shl	 eax, 4
  00181	c7 44 02 1c ff
	ff ff ff	 mov	 DWORD PTR [edx+eax+28], -1

; 46   : 			this->ItemPeriodInfo[i].vItemEffect[j].iItemPeriodUsedTime = 0;

  00189	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  0018c	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00192	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00199	8b 45 f4	 mov	 eax, DWORD PTR _j$228068[ebp]
  0019c	c1 e0 04	 shl	 eax, 4
  0019f	c7 44 02 20 00
	00 00 00	 mov	 DWORD PTR [edx+eax+32], 0

; 47   : 			this->ItemPeriodInfo[i].vItemEffect[j].iItemPeriodLeftTime = 0;

  001a7	8b 45 f8	 mov	 eax, DWORD PTR _i$228064[ebp]
  001aa	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  001b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b3	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  001b7	8b 45 f4	 mov	 eax, DWORD PTR _j$228068[ebp]
  001ba	c1 e0 04	 shl	 eax, 4
  001bd	c7 44 02 24 00
	00 00 00	 mov	 DWORD PTR [edx+eax+36], 0

; 48   : 		}

  001c5	e9 22 ff ff ff	 jmp	 $LN4@Initialize
$LN3@Initialize:

; 49   : 	}

  001ca	e9 90 fe ff ff	 jmp	 $LN7@Initialize
$LN6@Initialize:

; 50   : 
; 51   : 	if (g_bRunningPeriodCheckThread == FALSE )

  001cf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bRunningPeriodCheckThread@@3HA, 0 ; g_bRunningPeriodCheckThread
  001d6	75 60		 jne	 SHORT $LN9@Initialize

; 52   : 	{
; 53   : 		this->hThreadHandle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)CCashItemPeriodSystem::PeriodCheckThread, this->ItemPeriodInfo, 0, NULL);

  001d8	6a 00		 push	 0
  001da	6a 00		 push	 0
  001dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001df	83 c0 08	 add	 eax, 8
  001e2	50		 push	 eax
  001e3	68 00 00 00 00	 push	 OFFSET ?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z ; CCashItemPeriodSystem::PeriodCheckThread
  001e8	6a 00		 push	 0
  001ea	6a 00		 push	 0
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24
  001f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f5	89 81 28 36 04
	00		 mov	 DWORD PTR [ecx+276008], eax

; 54   : 		
; 55   : 		if ( this->hThreadHandle == NULL )

  001fb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001fe	83 b8 28 36 04
	00 00		 cmp	 DWORD PTR [eax+276008], 0
  00205	75 17		 jne	 SHORT $LN1@Initialize

; 56   : 		{
; 57   : 			LogAdd("CreateThread() failed with error %d", GetLastError());

  00207	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0020d	50		 push	 eax
  0020e	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00219	83 c4 08	 add	 esp, 8

; 58   : 			return;

  0021c	eb 1a		 jmp	 SHORT $LN9@Initialize
$LN1@Initialize:

; 59   : 		}
; 60   : 
; 61   : 		g_bRunningPeriodCheckThread = TRUE;

  0021e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bRunningPeriodCheckThread@@3HA, 1 ; g_bRunningPeriodCheckThread

; 62   : 		CloseHandle(this->hThreadHandle);

  00228	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022b	8b 88 28 36 04
	00		 mov	 ecx, DWORD PTR [eax+276008]
  00231	51		 push	 ecx
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN9@Initialize:

; 63   : 	}
; 64   : 
; 65   : 	//g_bRunningPeriodCheckThread = TRUE;
; 66   : 	//CloseHandle(this->hThreadHandle);
; 67   : }

  00238	5f		 pop	 edi
  00239	5e		 pop	 esi
  0023a	5b		 pop	 ebx
  0023b	8b e5		 mov	 esp, ebp
  0023d	5d		 pop	 ebp
  0023e	c3		 ret	 0
?Initialize@CCashItemPeriodSystem@@QAEXXZ ENDP		; CCashItemPeriodSystem::Initialize
_TEXT	ENDS
PUBLIC	?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
PUBLIC	?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::GDReqPeriodItemUpdate
EXTRN	__imp__Sleep@4:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iOptionIndex$ = -24					; size = 4
_iUseTime$ = -20					; size = 4
_lpObj$ = -16						; size = 4
_dwCurrentTick$ = -12					; size = 4
_iIndex$ = -8						; size = 4
_lpPeriodInfoList$ = -4					; size = 4
_lpPeriodInfo$ = 8					; size = 4
?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z PROC	; CCashItemPeriodSystem::PeriodCheckThread

; 70   : {

  00240	55		 push	 ebp
  00241	8b ec		 mov	 ebp, esp
  00243	83 ec 58	 sub	 esp, 88			; 00000058H
  00246	53		 push	 ebx
  00247	56		 push	 esi
  00248	57		 push	 edi

; 71   : 	ITEMPERIOD_INFO* lpPeriodInfoList = (ITEMPERIOD_INFO *)lpPeriodInfo;

  00249	8b 45 08	 mov	 eax, DWORD PTR _lpPeriodInfo$[ebp]
  0024c	89 45 fc	 mov	 DWORD PTR _lpPeriodInfoList$[ebp], eax

; 72   : 	int iIndex = 0;

  0024f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIndex$[ebp], 0

; 73   : 	DWORD dwCurrentTick = 0;

  00256	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwCurrentTick$[ebp], 0

; 74   : 	LPOBJ lpObj = NULL;

  0025d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _lpObj$[ebp], 0

; 75   : 	int iUseTime = 0;

  00264	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iUseTime$[ebp], 0

; 76   : 	int iOptionIndex = 0;

  0026b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$[ebp], 0
$LN14@PeriodChec:

; 77   : 
; 78   : 	while ( true )

  00272	b8 01 00 00 00	 mov	 eax, 1
  00277	85 c0		 test	 eax, eax
  00279	0f 84 b4 01 00
	00		 je	 $LN13@PeriodChec

; 79   : 	{
; 80   : 		if ( (GetTickCount() - dwCurrentTick) > 10000 )

  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00285	2b 45 f4	 sub	 eax, DWORD PTR _dwCurrentTick$[ebp]
  00288	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  0028d	0f 86 93 01 00
	00		 jbe	 $LN12@PeriodChec

; 81   : 		{
; 82   : 			dwCurrentTick = GetTickCount();

  00293	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00299	89 45 f4	 mov	 DWORD PTR _dwCurrentTick$[ebp], eax

; 83   : 
; 84   : 			for ( iIndex=0;iIndex<MAX_ITEM_PERIOD_INFO;iIndex++)

  0029c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iIndex$[ebp], 0
  002a3	eb 09		 jmp	 SHORT $LN11@PeriodChec
$LN10@PeriodChec:
  002a5	8b 45 f8	 mov	 eax, DWORD PTR _iIndex$[ebp]
  002a8	83 c0 01	 add	 eax, 1
  002ab	89 45 f8	 mov	 DWORD PTR _iIndex$[ebp], eax
$LN11@PeriodChec:
  002ae	81 7d f8 dc 05
	00 00		 cmp	 DWORD PTR _iIndex$[ebp], 1500 ; 000005dcH
  002b5	0f 8d 69 01 00
	00		 jge	 $LN9@PeriodChec

; 85   : 			{
; 86   : 				if ( lpPeriodInfoList[iIndex].btUsedInfo == 1 )

  002bb	8b 45 f8	 mov	 eax, DWORD PTR _iIndex$[ebp]
  002be	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  002c4	8b 4d fc	 mov	 ecx, DWORD PTR _lpPeriodInfoList$[ebp]
  002c7	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  002cb	83 fa 01	 cmp	 edx, 1
  002ce	0f 85 4b 01 00
	00		 jne	 $LN8@PeriodChec

; 87   : 				{
; 88   : 					iUseTime = GetTickCount() - lpPeriodInfoList[iIndex].dwItemCheckTickCount;

  002d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  002da	8b 4d f8	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  002dd	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  002e3	8b 55 fc	 mov	 edx, DWORD PTR _lpPeriodInfoList$[ebp]
  002e6	2b 44 0a 08	 sub	 eax, DWORD PTR [edx+ecx+8]
  002ea	89 45 ec	 mov	 DWORD PTR _iUseTime$[ebp], eax

; 89   : 
; 90   : 					if ( iUseTime > 60000 )

  002ed	81 7d ec 60 ea
	00 00		 cmp	 DWORD PTR _iUseTime$[ebp], 60000 ; 0000ea60H
  002f4	0f 8e 25 01 00
	00		 jle	 $LN8@PeriodChec

; 91   : 					{
; 92   : 						lpPeriodInfoList[iIndex].dwItemCheckTickCount = GetTickCount();

  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00300	8b 4d f8	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00303	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  00309	8b 55 fc	 mov	 edx, DWORD PTR _lpPeriodInfoList$[ebp]
  0030c	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 93   : 						
; 94   : 						for( iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00310	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$[ebp], 0
  00317	eb 09		 jmp	 SHORT $LN6@PeriodChec
$LN5@PeriodChec:
  00319	8b 45 e8	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  0031c	83 c0 01	 add	 eax, 1
  0031f	89 45 e8	 mov	 DWORD PTR _iOptionIndex$[ebp], eax
$LN6@PeriodChec:
  00322	83 7d e8 0a	 cmp	 DWORD PTR _iOptionIndex$[ebp], 10 ; 0000000aH
  00326	0f 8d f3 00 00
	00		 jge	 $LN8@PeriodChec

; 95   : 						{
; 96   : 							if( lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].bInUse == true )

  0032c	8b 45 f8	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0032f	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00335	03 45 fc	 add	 eax, DWORD PTR _lpPeriodInfoList$[ebp]
  00338	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$[ebp]
  0033b	c1 e1 04	 shl	 ecx, 4
  0033e	0f b6 54 08 18	 movzx	 edx, BYTE PTR [eax+ecx+24]
  00343	83 fa 01	 cmp	 edx, 1
  00346	0f 85 ce 00 00
	00		 jne	 $LN3@PeriodChec

; 97   : 							{
; 98   : 								lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime--;

  0034c	8b 45 e8	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  0034f	c1 e0 04	 shl	 eax, 4
  00352	8b 4d f8	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00355	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  0035b	03 4d fc	 add	 ecx, DWORD PTR _lpPeriodInfoList$[ebp]
  0035e	8b 54 01 24	 mov	 edx, DWORD PTR [ecx+eax+36]
  00362	83 ea 01	 sub	 edx, 1
  00365	8b 45 e8	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  00368	c1 e0 04	 shl	 eax, 4
  0036b	8b 4d f8	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  0036e	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  00374	03 4d fc	 add	 ecx, DWORD PTR _lpPeriodInfoList$[ebp]
  00377	89 54 01 24	 mov	 DWORD PTR [ecx+eax+36], edx

; 99   : 								lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].iItemPeriodUsedTime++;

  0037b	8b 45 e8	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  0037e	c1 e0 04	 shl	 eax, 4
  00381	8b 4d f8	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00384	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  0038a	03 4d fc	 add	 ecx, DWORD PTR _lpPeriodInfoList$[ebp]
  0038d	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  00391	83 c2 01	 add	 edx, 1
  00394	8b 45 e8	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  00397	c1 e0 04	 shl	 eax, 4
  0039a	8b 4d f8	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  0039d	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  003a3	03 4d fc	 add	 ecx, DWORD PTR _lpPeriodInfoList$[ebp]
  003a6	89 54 01 20	 mov	 DWORD PTR [ecx+eax+32], edx

; 100  : 								
; 101  : 								if ( lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime <= 0 )

  003aa	8b 45 f8	 mov	 eax, DWORD PTR _iIndex$[ebp]
  003ad	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  003b3	03 45 fc	 add	 eax, DWORD PTR _lpPeriodInfoList$[ebp]
  003b6	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$[ebp]
  003b9	c1 e1 04	 shl	 ecx, 4
  003bc	83 7c 08 24 00	 cmp	 DWORD PTR [eax+ecx+36], 0
  003c1	77 57		 ja	 SHORT $LN3@PeriodChec

; 102  : 								{
; 103  : 									lpObj = &gObj[lpPeriodInfoList[iIndex].wdUserIndex];

  003c3	8b 45 f8	 mov	 eax, DWORD PTR _iIndex$[ebp]
  003c6	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  003cc	8b 4d fc	 mov	 ecx, DWORD PTR _lpPeriodInfoList$[ebp]
  003cf	0f b7 54 01 02	 movzx	 edx, WORD PTR [ecx+eax+2]
  003d4	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  003da	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003e0	89 55 f0	 mov	 DWORD PTR _lpObj$[ebp], edx

; 104  : 									g_CashItemPeriodSystem.GDReqPeriodItemUpdate(lpObj, iOptionIndex );

  003e3	8b 45 e8	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  003e6	50		 push	 eax
  003e7	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  003ea	51		 push	 ecx
  003eb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  003f0	e8 00 00 00 00	 call	 ?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::GDReqPeriodItemUpdate

; 105  : 									g_CashItemPeriodSystem.ClearPeriodItemEffect(lpObj, lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].iItemCode );

  003f5	8b 45 f8	 mov	 eax, DWORD PTR _iIndex$[ebp]
  003f8	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  003fe	03 45 fc	 add	 eax, DWORD PTR _lpPeriodInfoList$[ebp]
  00401	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$[ebp]
  00404	c1 e1 04	 shl	 ecx, 4
  00407	8b 54 08 1c	 mov	 edx, DWORD PTR [eax+ecx+28]
  0040b	52		 push	 edx
  0040c	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0040f	50		 push	 eax
  00410	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00415	e8 00 00 00 00	 call	 ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
$LN3@PeriodChec:

; 106  : 								}
; 107  : 							}
; 108  : 						}

  0041a	e9 fa fe ff ff	 jmp	 $LN5@PeriodChec
$LN8@PeriodChec:

; 109  : 					}
; 110  : 				}
; 111  : 			}

  0041f	e9 81 fe ff ff	 jmp	 $LN10@PeriodChec
$LN9@PeriodChec:

; 112  : 		}
; 113  : 		else

  00424	eb 08		 jmp	 SHORT $LN1@PeriodChec
$LN12@PeriodChec:

; 114  : 		{
; 115  : 			Sleep(10);

  00426	6a 0a		 push	 10			; 0000000aH
  00428	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
$LN1@PeriodChec:

; 116  : 		}
; 117  : 	}

  0042e	e9 3f fe ff ff	 jmp	 $LN14@PeriodChec
$LN13@PeriodChec:

; 118  : 
; 119  : 	return 0;

  00433	33 c0		 xor	 eax, eax

; 120  : }

  00435	5f		 pop	 edi
  00436	5e		 pop	 esi
  00437	5b		 pop	 ebx
  00438	8b e5		 mov	 esp, ebp
  0043a	5d		 pop	 ebp
  0043b	c2 04 00	 ret	 4
?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z ENDP	; CCashItemPeriodSystem::PeriodCheckThread
_TEXT	ENDS
PUBLIC	?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GDReqPeriodItemList
PUBLIC	?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GetUserPeriodItemList
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GetUserPeriodItemList
; _this$ = ecx

; 123  : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	83 ec 44	 sub	 esp, 68			; 00000044H
  00446	53		 push	 ebx
  00447	56		 push	 esi
  00448	57		 push	 edi
  00449	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 124  : 	this->GDReqPeriodItemList(lpObj);

  0044c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0044f	50		 push	 eax
  00450	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00453	e8 00 00 00 00	 call	 ?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GDReqPeriodItemList

; 125  : }

  00458	5f		 pop	 edi
  00459	5e		 pop	 esi
  0045a	5b		 pop	 ebx
  0045b	8b e5		 mov	 esp, ebp
  0045d	5d		 pop	 ebp
  0045e	c2 04 00	 ret	 4
?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GetUserPeriodItemList
_TEXT	ENDS
PUBLIC	?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTotalMinutes
PUBLIC	??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z		; ATL::CTime::operator-
PUBLIC	?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z ; CCashItemPeriodSystem::ConvertStringToTime
PUBLIC	??0CTimeSpan@ATL@@QAE@XZ			; ATL::CTimeSpan::CTimeSpan
PUBLIC	??0CTime@ATL@@QAE@XZ				; ATL::CTime::CTime
PUBLIC	?GetTickCount@CTime@ATL@@SG?AV12@XZ		; ATL::CTime::GetTickCount
PUBLIC	?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z ; CCashItemPeriodSystem::CalcItemUseLeftTime
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
$T228610 = -112						; size = 8
$T228611 = -104						; size = 8
_tTimeSpan$ = -32					; size = 8
_tBuyTime$ = -24					; size = 8
_tCurrentTime$ = -16					; size = 8
_iUsedTime$ = -8					; size = 4
_this$ = -4						; size = 4
_pchBuyDate$ = 8					; size = 4
?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z PROC ; CCashItemPeriodSystem::CalcItemUseLeftTime
; _this$ = ecx

; 128  : {

  00470	55		 push	 ebp
  00471	8b ec		 mov	 ebp, esp
  00473	83 ec 70	 sub	 esp, 112		; 00000070H
  00476	53		 push	 ebx
  00477	56		 push	 esi
  00478	57		 push	 edi
  00479	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 129  : 	int iUsedTime = 0;

  0047c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iUsedTime$[ebp], 0

; 130  : 	CTime tCurrentTime = CTime::GetTickCount();

  00483	8d 45 f0	 lea	 eax, DWORD PTR _tCurrentTime$[ebp]
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 131  : 	CTime tBuyTime;

  0048c	8d 4d e8	 lea	 ecx, DWORD PTR _tBuyTime$[ebp]
  0048f	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@XZ	; ATL::CTime::CTime

; 132  : 	CTimeSpan tTimeSpan;

  00494	8d 4d e0	 lea	 ecx, DWORD PTR _tTimeSpan$[ebp]
  00497	e8 00 00 00 00	 call	 ??0CTimeSpan@ATL@@QAE@XZ ; ATL::CTimeSpan::CTimeSpan

; 133  : 
; 134  : 	this->ConvertStringToTime(pchBuyDate, &tBuyTime);

  0049c	8d 45 e8	 lea	 eax, DWORD PTR _tBuyTime$[ebp]
  0049f	50		 push	 eax
  004a0	8b 4d 08	 mov	 ecx, DWORD PTR _pchBuyDate$[ebp]
  004a3	51		 push	 ecx
  004a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004a7	e8 00 00 00 00	 call	 ?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z ; CCashItemPeriodSystem::ConvertStringToTime

; 135  : 	tCurrentTime - tBuyTime;

  004ac	8b 45 ec	 mov	 eax, DWORD PTR _tBuyTime$[ebp+4]
  004af	50		 push	 eax
  004b0	8b 4d e8	 mov	 ecx, DWORD PTR _tBuyTime$[ebp]
  004b3	51		 push	 ecx
  004b4	8d 55 90	 lea	 edx, DWORD PTR $T228610[ebp]
  004b7	52		 push	 edx
  004b8	8d 4d f0	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  004bb	e8 00 00 00 00	 call	 ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ; ATL::CTime::operator-

; 136  : 	tTimeSpan = tBuyTime - tCurrentTime;

  004c0	8b 45 f4	 mov	 eax, DWORD PTR _tCurrentTime$[ebp+4]
  004c3	50		 push	 eax
  004c4	8b 4d f0	 mov	 ecx, DWORD PTR _tCurrentTime$[ebp]
  004c7	51		 push	 ecx
  004c8	8d 55 98	 lea	 edx, DWORD PTR $T228611[ebp]
  004cb	52		 push	 edx
  004cc	8d 4d e8	 lea	 ecx, DWORD PTR _tBuyTime$[ebp]
  004cf	e8 00 00 00 00	 call	 ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ; ATL::CTime::operator-
  004d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004d9	89 4d e0	 mov	 DWORD PTR _tTimeSpan$[ebp], ecx
  004dc	89 55 e4	 mov	 DWORD PTR _tTimeSpan$[ebp+4], edx

; 137  : 	iUsedTime = tTimeSpan.GetTotalMinutes();

  004df	8d 4d e0	 lea	 ecx, DWORD PTR _tTimeSpan$[ebp]
  004e2	e8 00 00 00 00	 call	 ?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetTotalMinutes
  004e7	89 45 f8	 mov	 DWORD PTR _iUsedTime$[ebp], eax

; 138  : 
; 139  : 	return iUsedTime;

  004ea	8b 45 f8	 mov	 eax, DWORD PTR _iUsedTime$[ebp]

; 140  : }

  004ed	5f		 pop	 edi
  004ee	5e		 pop	 esi
  004ef	5b		 pop	 ebx
  004f0	8b e5		 mov	 esp, ebp
  004f2	5d		 pop	 ebp
  004f3	c2 04 00	 ret	 4
?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z ENDP ; CCashItemPeriodSystem::CalcItemUseLeftTime
_TEXT	ENDS
PUBLIC	??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z		; ATL::CTime::operator+
PUBLIC	??0CTimeSpan@ATL@@QAE@JHHH@Z			; ATL::CTimeSpan::CTimeSpan
PUBLIC	?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z ; CCashItemPeriodSystem::CalcItemUseEndTime
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
$T228613 = -100						; size = 8
_tLeftTime$ = -28					; size = 8
_tCurrentTime$ = -20					; size = 8
_tExpireTime$ = -12					; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iLeftTime$ = 12					; size = 4
?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z PROC ; CCashItemPeriodSystem::CalcItemUseEndTime
; _this$ = ecx

; 143  : {

  00500	55		 push	 ebp
  00501	8b ec		 mov	 ebp, esp
  00503	83 ec 64	 sub	 esp, 100		; 00000064H
  00506	53		 push	 ebx
  00507	56		 push	 esi
  00508	57		 push	 edi
  00509	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 144  : 	CTime tExpireTime;

  0050c	8d 4d f4	 lea	 ecx, DWORD PTR _tExpireTime$[ebp]
  0050f	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@XZ	; ATL::CTime::CTime

; 145  : 	CTime tCurrentTime = CTime::GetTickCount();

  00514	8d 45 ec	 lea	 eax, DWORD PTR _tCurrentTime$[ebp]
  00517	50		 push	 eax
  00518	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 146  : 
; 147  : 	CTimeSpan tLeftTime(0, 0, iLeftTime, 0);

  0051d	6a 00		 push	 0
  0051f	8b 45 0c	 mov	 eax, DWORD PTR _iLeftTime$[ebp]
  00522	50		 push	 eax
  00523	6a 00		 push	 0
  00525	6a 00		 push	 0
  00527	8d 4d e4	 lea	 ecx, DWORD PTR _tLeftTime$[ebp]
  0052a	e8 00 00 00 00	 call	 ??0CTimeSpan@ATL@@QAE@JHHH@Z ; ATL::CTimeSpan::CTimeSpan

; 148  : 
; 149  : 	tExpireTime = tCurrentTime + tLeftTime;

  0052f	8b 45 e8	 mov	 eax, DWORD PTR _tLeftTime$[ebp+4]
  00532	50		 push	 eax
  00533	8b 4d e4	 mov	 ecx, DWORD PTR _tLeftTime$[ebp]
  00536	51		 push	 ecx
  00537	8d 55 9c	 lea	 edx, DWORD PTR $T228613[ebp]
  0053a	52		 push	 edx
  0053b	8d 4d ec	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0053e	e8 00 00 00 00	 call	 ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ; ATL::CTime::operator+
  00543	8b 08		 mov	 ecx, DWORD PTR [eax]
  00545	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00548	89 4d f4	 mov	 DWORD PTR _tExpireTime$[ebp], ecx
  0054b	89 55 f8	 mov	 DWORD PTR _tExpireTime$[ebp+4], edx

; 150  : 
; 151  : 	return tExpireTime;

  0054e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00551	8b 4d f4	 mov	 ecx, DWORD PTR _tExpireTime$[ebp]
  00554	89 08		 mov	 DWORD PTR [eax], ecx
  00556	8b 55 f8	 mov	 edx, DWORD PTR _tExpireTime$[ebp+4]
  00559	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0055c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 152  : }

  0055f	5f		 pop	 edi
  00560	5e		 pop	 esi
  00561	5b		 pop	 ebx
  00562	8b e5		 mov	 esp, ebp
  00564	5d		 pop	 ebp
  00565	c2 08 00	 ret	 8
?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z ENDP ; CCashItemPeriodSystem::CalcItemUseEndTime
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
PUBLIC	??_C@_03DAJLBDOE@?9?3?5?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_atoi:PROC
EXTRN	_strtok:PROC
EXTRN	_strlen:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_03DAJLBDOE@?9?3?5?$AA@
CONST	SEGMENT
??_C@_03DAJLBDOE@?9?3?5?$AA@ DB '-: ', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_tReturnTime$ = -68					; size = 8
_seps$ = -60						; size = 4
_Token$ = -56						; size = 4
_chDate$ = -52						; size = 20
_iDateLength$ = -32					; size = 4
_iMinute$ = -28						; size = 4
_iHour$ = -24						; size = 4
_iDay$ = -20						; size = 4
_iMonth$ = -16						; size = 4
_iYear$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pchDate$ = 8						; size = 4
_lpTime$ = 12						; size = 4
?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z PROC ; CCashItemPeriodSystem::ConvertStringToTime
; _this$ = ecx

; 155  : {

  00570	55		 push	 ebp
  00571	8b ec		 mov	 ebp, esp
  00573	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00579	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0057e	33 c5		 xor	 eax, ebp
  00580	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00583	53		 push	 ebx
  00584	56		 push	 esi
  00585	57		 push	 edi
  00586	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 156  : 	int iYear=0;

  00589	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iYear$[ebp], 0

; 157  : 	int iMonth=0;

  00590	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iMonth$[ebp], 0

; 158  : 	int iDay=0;

  00597	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iDay$[ebp], 0

; 159  : 	int iHour=0;

  0059e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iHour$[ebp], 0

; 160  : 	int iMinute=0;

  005a5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iMinute$[ebp], 0

; 161  : 	int iDateLength=0;

  005ac	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iDateLength$[ebp], 0

; 162  : 	char chDate[20];
; 163  : 	char* Token;
; 164  : 	char seps[4]="-: ";

  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03DAJLBDOE@?9?3?5?$AA@
  005b8	89 45 c4	 mov	 DWORD PTR _seps$[ebp], eax

; 165  : 
; 166  : 	if ( pchDate == NULL || lpTime == NULL )

  005bb	83 7d 08 00	 cmp	 DWORD PTR _pchDate$[ebp], 0
  005bf	74 06		 je	 SHORT $LN3@ConvertStr
  005c1	83 7d 0c 00	 cmp	 DWORD PTR _lpTime$[ebp], 0
  005c5	75 05		 jne	 SHORT $LN4@ConvertStr
$LN3@ConvertStr:

; 167  : 		return;

  005c7	e9 02 01 00 00	 jmp	 $LN5@ConvertStr
$LN4@ConvertStr:

; 168  : 
; 169  : 	memcpy(chDate, pchDate, sizeof(chDate));

  005cc	6a 14		 push	 20			; 00000014H
  005ce	8b 45 08	 mov	 eax, DWORD PTR _pchDate$[ebp]
  005d1	50		 push	 eax
  005d2	8d 4d cc	 lea	 ecx, DWORD PTR _chDate$[ebp]
  005d5	51		 push	 ecx
  005d6	e8 00 00 00 00	 call	 _memcpy
  005db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : 	iDateLength = strlen(chDate);

  005de	8d 45 cc	 lea	 eax, DWORD PTR _chDate$[ebp]
  005e1	50		 push	 eax
  005e2	e8 00 00 00 00	 call	 _strlen
  005e7	83 c4 04	 add	 esp, 4
  005ea	89 45 e0	 mov	 DWORD PTR _iDateLength$[ebp], eax

; 171  : 
; 172  : 	if ( iDateLength <= 0 || iDateLength > 20 )

  005ed	83 7d e0 00	 cmp	 DWORD PTR _iDateLength$[ebp], 0
  005f1	7e 06		 jle	 SHORT $LN1@ConvertStr
  005f3	83 7d e0 14	 cmp	 DWORD PTR _iDateLength$[ebp], 20 ; 00000014H
  005f7	7e 05		 jle	 SHORT $LN2@ConvertStr
$LN1@ConvertStr:

; 173  : 	{
; 174  : 		return;

  005f9	e9 d0 00 00 00	 jmp	 $LN5@ConvertStr
$LN2@ConvertStr:

; 175  : 	}
; 176  : 
; 177  : 	Token = strtok( chDate, seps);

  005fe	8d 45 c4	 lea	 eax, DWORD PTR _seps$[ebp]
  00601	50		 push	 eax
  00602	8d 4d cc	 lea	 ecx, DWORD PTR _chDate$[ebp]
  00605	51		 push	 ecx
  00606	e8 00 00 00 00	 call	 _strtok
  0060b	83 c4 08	 add	 esp, 8
  0060e	89 45 c8	 mov	 DWORD PTR _Token$[ebp], eax

; 178  : 	iYear = atoi(Token);

  00611	8b 45 c8	 mov	 eax, DWORD PTR _Token$[ebp]
  00614	50		 push	 eax
  00615	e8 00 00 00 00	 call	 _atoi
  0061a	83 c4 04	 add	 esp, 4
  0061d	89 45 f4	 mov	 DWORD PTR _iYear$[ebp], eax

; 179  : 	Token = strtok( NULL, seps);

  00620	8d 45 c4	 lea	 eax, DWORD PTR _seps$[ebp]
  00623	50		 push	 eax
  00624	6a 00		 push	 0
  00626	e8 00 00 00 00	 call	 _strtok
  0062b	83 c4 08	 add	 esp, 8
  0062e	89 45 c8	 mov	 DWORD PTR _Token$[ebp], eax

; 180  : 	iMonth = atoi(Token);

  00631	8b 45 c8	 mov	 eax, DWORD PTR _Token$[ebp]
  00634	50		 push	 eax
  00635	e8 00 00 00 00	 call	 _atoi
  0063a	83 c4 04	 add	 esp, 4
  0063d	89 45 f0	 mov	 DWORD PTR _iMonth$[ebp], eax

; 181  : 	Token = strtok( NULL, seps);

  00640	8d 45 c4	 lea	 eax, DWORD PTR _seps$[ebp]
  00643	50		 push	 eax
  00644	6a 00		 push	 0
  00646	e8 00 00 00 00	 call	 _strtok
  0064b	83 c4 08	 add	 esp, 8
  0064e	89 45 c8	 mov	 DWORD PTR _Token$[ebp], eax

; 182  : 	iDay = atoi(Token);

  00651	8b 45 c8	 mov	 eax, DWORD PTR _Token$[ebp]
  00654	50		 push	 eax
  00655	e8 00 00 00 00	 call	 _atoi
  0065a	83 c4 04	 add	 esp, 4
  0065d	89 45 ec	 mov	 DWORD PTR _iDay$[ebp], eax

; 183  : 	Token = strtok( NULL, seps);

  00660	8d 45 c4	 lea	 eax, DWORD PTR _seps$[ebp]
  00663	50		 push	 eax
  00664	6a 00		 push	 0
  00666	e8 00 00 00 00	 call	 _strtok
  0066b	83 c4 08	 add	 esp, 8
  0066e	89 45 c8	 mov	 DWORD PTR _Token$[ebp], eax

; 184  : 	iHour = atoi(Token);

  00671	8b 45 c8	 mov	 eax, DWORD PTR _Token$[ebp]
  00674	50		 push	 eax
  00675	e8 00 00 00 00	 call	 _atoi
  0067a	83 c4 04	 add	 esp, 4
  0067d	89 45 e8	 mov	 DWORD PTR _iHour$[ebp], eax

; 185  : 	Token = strtok( NULL, seps);

  00680	8d 45 c4	 lea	 eax, DWORD PTR _seps$[ebp]
  00683	50		 push	 eax
  00684	6a 00		 push	 0
  00686	e8 00 00 00 00	 call	 _strtok
  0068b	83 c4 08	 add	 esp, 8
  0068e	89 45 c8	 mov	 DWORD PTR _Token$[ebp], eax

; 186  : 	iMinute = atoi(Token);

  00691	8b 45 c8	 mov	 eax, DWORD PTR _Token$[ebp]
  00694	50		 push	 eax
  00695	e8 00 00 00 00	 call	 _atoi
  0069a	83 c4 04	 add	 esp, 4
  0069d	89 45 e4	 mov	 DWORD PTR _iMinute$[ebp], eax

; 187  : 
; 188  : 	CTime tReturnTime(iYear, iMonth, iDay, iHour, iMinute, 0, -1);

  006a0	6a ff		 push	 -1
  006a2	6a 00		 push	 0
  006a4	8b 45 e4	 mov	 eax, DWORD PTR _iMinute$[ebp]
  006a7	50		 push	 eax
  006a8	8b 4d e8	 mov	 ecx, DWORD PTR _iHour$[ebp]
  006ab	51		 push	 ecx
  006ac	8b 55 ec	 mov	 edx, DWORD PTR _iDay$[ebp]
  006af	52		 push	 edx
  006b0	8b 45 f0	 mov	 eax, DWORD PTR _iMonth$[ebp]
  006b3	50		 push	 eax
  006b4	8b 4d f4	 mov	 ecx, DWORD PTR _iYear$[ebp]
  006b7	51		 push	 ecx
  006b8	8d 4d bc	 lea	 ecx, DWORD PTR _tReturnTime$[ebp]
  006bb	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 189  : 
; 190  : 	*lpTime = tReturnTime;

  006c0	8b 45 0c	 mov	 eax, DWORD PTR _lpTime$[ebp]
  006c3	8b 4d bc	 mov	 ecx, DWORD PTR _tReturnTime$[ebp]
  006c6	89 08		 mov	 DWORD PTR [eax], ecx
  006c8	8b 55 c0	 mov	 edx, DWORD PTR _tReturnTime$[ebp+4]
  006cb	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN5@ConvertStr:

; 191  : }

  006ce	5f		 pop	 edi
  006cf	5e		 pop	 esi
  006d0	5b		 pop	 ebx
  006d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006d4	33 cd		 xor	 ecx, ebp
  006d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006db	8b e5		 mov	 esp, ebp
  006dd	5d		 pop	 ebp
  006de	c2 08 00	 ret	 8
?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z ENDP ; CCashItemPeriodSystem::ConvertStringToTime
_TEXT	ENDS
PUBLIC	??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@ ; `string'
PUBLIC	?GetMinute@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMinute
PUBLIC	?GetHour@CTime@ATL@@QBEHXZ			; ATL::CTime::GetHour
PUBLIC	?GetDay@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDay
PUBLIC	?GetMonth@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMonth
PUBLIC	?GetYear@CTime@ATL@@QBEHXZ			; ATL::CTime::GetYear
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z ; CCashItemPeriodSystem::ConvertTimeToString
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@ DB '%d-%d-%d %d:'
	DB	'%d', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_chDate$ = -48						; size = 20
_iMinute$ = -28						; size = 4
_iHour$ = -24						; size = 4
_iDay$ = -20						; size = 4
_iMonth$ = -16						; size = 4
_iYear$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpTime$ = 8						; size = 4
_pchDate$ = 12						; size = 4
?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z PROC ; CCashItemPeriodSystem::ConvertTimeToString
; _this$ = ecx

; 194  : {

  006f0	55		 push	 ebp
  006f1	8b ec		 mov	 ebp, esp
  006f3	83 ec 70	 sub	 esp, 112		; 00000070H
  006f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  006fb	33 c5		 xor	 eax, ebp
  006fd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00700	53		 push	 ebx
  00701	56		 push	 esi
  00702	57		 push	 edi
  00703	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 195  : 	int iYear=0;

  00706	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iYear$[ebp], 0

; 196  : 	int iMonth=0;

  0070d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iMonth$[ebp], 0

; 197  : 	int iDay=0;

  00714	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iDay$[ebp], 0

; 198  : 	int iHour=0;

  0071b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iHour$[ebp], 0

; 199  : 	int iMinute=0;

  00722	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iMinute$[ebp], 0

; 200  : 	char chDate[20];
; 201  : 
; 202  : 	iYear = lpTime->GetYear();

  00729	8b 4d 08	 mov	 ecx, DWORD PTR _lpTime$[ebp]
  0072c	e8 00 00 00 00	 call	 ?GetYear@CTime@ATL@@QBEHXZ ; ATL::CTime::GetYear
  00731	89 45 f4	 mov	 DWORD PTR _iYear$[ebp], eax

; 203  : 	iMonth = lpTime->GetMonth();

  00734	8b 4d 08	 mov	 ecx, DWORD PTR _lpTime$[ebp]
  00737	e8 00 00 00 00	 call	 ?GetMonth@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMonth
  0073c	89 45 f0	 mov	 DWORD PTR _iMonth$[ebp], eax

; 204  : 	iDay = lpTime->GetDay();

  0073f	8b 4d 08	 mov	 ecx, DWORD PTR _lpTime$[ebp]
  00742	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  00747	89 45 ec	 mov	 DWORD PTR _iDay$[ebp], eax

; 205  : 	iHour = lpTime->GetHour();

  0074a	8b 4d 08	 mov	 ecx, DWORD PTR _lpTime$[ebp]
  0074d	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00752	89 45 e8	 mov	 DWORD PTR _iHour$[ebp], eax

; 206  : 	iMinute = lpTime->GetMinute();

  00755	8b 4d 08	 mov	 ecx, DWORD PTR _lpTime$[ebp]
  00758	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  0075d	89 45 e4	 mov	 DWORD PTR _iMinute$[ebp], eax

; 207  : 
; 208  : 	wsprintf(chDate, "%d-%d-%d %d:%d", iYear, iMonth, iDay, iHour, iMinute);

  00760	8b 45 e4	 mov	 eax, DWORD PTR _iMinute$[ebp]
  00763	50		 push	 eax
  00764	8b 4d e8	 mov	 ecx, DWORD PTR _iHour$[ebp]
  00767	51		 push	 ecx
  00768	8b 55 ec	 mov	 edx, DWORD PTR _iDay$[ebp]
  0076b	52		 push	 edx
  0076c	8b 45 f0	 mov	 eax, DWORD PTR _iMonth$[ebp]
  0076f	50		 push	 eax
  00770	8b 4d f4	 mov	 ecx, DWORD PTR _iYear$[ebp]
  00773	51		 push	 ecx
  00774	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
  00779	8d 55 d0	 lea	 edx, DWORD PTR _chDate$[ebp]
  0077c	52		 push	 edx
  0077d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00783	83 c4 1c	 add	 esp, 28			; 0000001cH

; 209  : 	memcpy(pchDate, chDate, sizeof(chDate));

  00786	6a 14		 push	 20			; 00000014H
  00788	8d 45 d0	 lea	 eax, DWORD PTR _chDate$[ebp]
  0078b	50		 push	 eax
  0078c	8b 4d 0c	 mov	 ecx, DWORD PTR _pchDate$[ebp]
  0078f	51		 push	 ecx
  00790	e8 00 00 00 00	 call	 _memcpy
  00795	83 c4 0c	 add	 esp, 12			; 0000000cH

; 210  : }

  00798	5f		 pop	 edi
  00799	5e		 pop	 esi
  0079a	5b		 pop	 ebx
  0079b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0079e	33 cd		 xor	 ecx, ebp
  007a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007a5	8b e5		 mov	 esp, ebp
  007a7	5d		 pop	 ebp
  007a8	c2 08 00	 ret	 8
?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z ENDP ; CCashItemPeriodSystem::ConvertTimeToString
_TEXT	ENDS
PUBLIC	?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::ApplyItemPeriodEffect
PUBLIC	?SearchAndDeleteItemPeriodEffect@CCashItemPeriodSystem@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::SearchAndDeleteItemPeriodEffect
PUBLIC	?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ; CCashItemPeriodSystem::SetPeriodItemEffect
EXTRN	?SearchItemOptionType@CItemAddOption@@QAEHH@Z:PROC ; CItemAddOption::SearchItemOptionType
EXTRN	?g_ItemAddOption@@3VCItemAddOption@@A:BYTE	; g_ItemAddOption
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iOptionIndex$ = -20					; size = 4
_iIndex$ = -16						; size = 4
_iOptionEffect$ = -12					; size = 4
_iPeriodItemEffectIndex$ = -8				; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
_btEffectType1$ = 16					; size = 1
_btEffectType2$ = 20					; size = 1
_dwItemPeriod$ = 24					; size = 4
?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z PROC ; CCashItemPeriodSystem::SetPeriodItemEffect
; _this$ = ecx

; 213  : {

  007b0	55		 push	 ebp
  007b1	8b ec		 mov	 ebp, esp
  007b3	83 ec 54	 sub	 esp, 84			; 00000054H
  007b6	53		 push	 ebx
  007b7	56		 push	 esi
  007b8	57		 push	 edi
  007b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 214  : 	int iPeriodItemEffectIndex = - 1;

  007bc	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _iPeriodItemEffectIndex$[ebp], -1

; 215  : 	int iOptionEffect = 0;

  007c3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iOptionEffect$[ebp], 0

; 216  : 	int iIndex = 0;

  007ca	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iIndex$[ebp], 0

; 217  : 	int iOptionIndex = 0;

  007d1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$[ebp], 0

; 218  : 
; 219  : 	iOptionEffect = g_ItemAddOption.SearchItemOptionType(iItemCode);

  007d8	8b 45 0c	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  007db	50		 push	 eax
  007dc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  007e1	e8 00 00 00 00	 call	 ?SearchItemOptionType@CItemAddOption@@QAEHH@Z ; CItemAddOption::SearchItemOptionType
  007e6	89 45 f4	 mov	 DWORD PTR _iOptionEffect$[ebp], eax

; 220  : 
; 221  : 	if( iOptionEffect == -1 )

  007e9	83 7d f4 ff	 cmp	 DWORD PTR _iOptionEffect$[ebp], -1
  007ed	75 07		 jne	 SHORT $LN11@SetPeriodI

; 222  : 		return FALSE;

  007ef	33 c0		 xor	 eax, eax
  007f1	e9 f1 02 00 00	 jmp	 $LN12@SetPeriodI
$LN11@SetPeriodI:

; 223  : 
; 224  : 	this->SearchAndDeleteItemPeriodEffect(lpObj,iItemCode);

  007f6	8b 45 0c	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  007f9	50		 push	 eax
  007fa	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  007fd	51		 push	 ecx
  007fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00801	e8 00 00 00 00	 call	 ?SearchAndDeleteItemPeriodEffect@CCashItemPeriodSystem@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::SearchAndDeleteItemPeriodEffect

; 225  : 
; 226  : 	if ( lpObj->m_iPeriodItemEffectIndex != -1 )

  00806	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00809	83 b8 80 20 00
	00 ff		 cmp	 DWORD PTR [eax+8320], -1
  00810	0f 84 60 01 00
	00		 je	 $LN10@SetPeriodI

; 227  : 	{
; 228  : 		iPeriodItemEffectIndex = lpObj->m_iPeriodItemEffectIndex;

  00816	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00819	8b 88 80 20 00
	00		 mov	 ecx, DWORD PTR [eax+8320]
  0081f	89 4d f8	 mov	 DWORD PTR _iPeriodItemEffectIndex$[ebp], ecx

; 229  : 
; 230  : 		this->ItemPeriodInfo[iPeriodItemEffectIndex].btCountItems++;

  00822	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  00825	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0082b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0082e	8a 54 01 09	 mov	 dl, BYTE PTR [ecx+eax+9]
  00832	80 c2 01	 add	 dl, 1
  00835	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  00838	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0083e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00841	88 54 01 09	 mov	 BYTE PTR [ecx+eax+9], dl

; 231  : 
; 232  : 		for( iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00845	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$[ebp], 0
  0084c	eb 09		 jmp	 SHORT $LN9@SetPeriodI
$LN8@SetPeriodI:
  0084e	8b 45 ec	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  00851	83 c0 01	 add	 eax, 1
  00854	89 45 ec	 mov	 DWORD PTR _iOptionIndex$[ebp], eax
$LN9@SetPeriodI:
  00857	83 7d ec 0a	 cmp	 DWORD PTR _iOptionIndex$[ebp], 10 ; 0000000aH
  0085b	0f 8d 10 01 00
	00		 jge	 $LN7@SetPeriodI

; 233  : 		{
; 234  : 			if( this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].bInUse == false )

  00861	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  00864	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0086a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0086d	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00871	8b 45 ec	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  00874	c1 e0 04	 shl	 eax, 4
  00877	0f b6 4c 02 18	 movzx	 ecx, BYTE PTR [edx+eax+24]
  0087c	85 c9		 test	 ecx, ecx
  0087e	0f 85 e8 00 00
	00		 jne	 $LN6@SetPeriodI

; 235  : 			{
; 236  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].bInUse = true;

  00884	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  00887	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0088d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00890	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00894	8b 45 ec	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  00897	c1 e0 04	 shl	 eax, 4
  0089a	c6 44 02 18 01	 mov	 BYTE PTR [edx+eax+24], 1

; 237  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].iItemCode = iItemCode;

  0089f	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  008a2	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  008a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008ab	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  008af	8b 45 ec	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  008b2	c1 e0 04	 shl	 eax, 4
  008b5	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemCode$[ebp]
  008b8	89 4c 02 1c	 mov	 DWORD PTR [edx+eax+28], ecx

; 238  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].btEffectType1 = btEffectType1;

  008bc	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  008bf	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  008c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008c8	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  008cc	8b 45 ec	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  008cf	c1 e0 04	 shl	 eax, 4
  008d2	8a 4d 10	 mov	 cl, BYTE PTR _btEffectType1$[ebp]
  008d5	88 4c 02 1a	 mov	 BYTE PTR [edx+eax+26], cl

; 239  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].btEffectType2 = btEffectType2;

  008d9	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  008dc	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  008e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008e5	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  008e9	8b 45 ec	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  008ec	c1 e0 04	 shl	 eax, 4
  008ef	8a 4d 14	 mov	 cl, BYTE PTR _btEffectType2$[ebp]
  008f2	88 4c 02 1b	 mov	 BYTE PTR [edx+eax+27], cl

; 240  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].btOptionType = iOptionEffect;

  008f6	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  008f9	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  008ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00902	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00906	8b 45 ec	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  00909	c1 e0 04	 shl	 eax, 4
  0090c	8a 4d f4	 mov	 cl, BYTE PTR _iOptionEffect$[ebp]
  0090f	88 4c 02 19	 mov	 BYTE PTR [edx+eax+25], cl

; 241  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime = dwItemPeriod;

  00913	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  00916	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0091c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0091f	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00923	8b 45 ec	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  00926	c1 e0 04	 shl	 eax, 4
  00929	8b 4d 18	 mov	 ecx, DWORD PTR _dwItemPeriod$[ebp]
  0092c	89 4c 02 24	 mov	 DWORD PTR [edx+eax+36], ecx

; 242  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].iItemPeriodUsedTime = 0;

  00930	8b 45 f8	 mov	 eax, DWORD PTR _iPeriodItemEffectIndex$[ebp]
  00933	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00939	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0093c	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00940	8b 45 ec	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  00943	c1 e0 04	 shl	 eax, 4
  00946	c7 44 02 20 00
	00 00 00	 mov	 DWORD PTR [edx+eax+32], 0

; 243  : 
; 244  : 				this->ApplyItemPeriodEffect(lpObj,iItemCode,dwItemPeriod);

  0094e	8b 45 18	 mov	 eax, DWORD PTR _dwItemPeriod$[ebp]
  00951	50		 push	 eax
  00952	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemCode$[ebp]
  00955	51		 push	 ecx
  00956	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00959	52		 push	 edx
  0095a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0095d	e8 00 00 00 00	 call	 ?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::ApplyItemPeriodEffect

; 245  : 				return TRUE;

  00962	b8 01 00 00 00	 mov	 eax, 1
  00967	e9 7b 01 00 00	 jmp	 $LN12@SetPeriodI
$LN6@SetPeriodI:

; 246  : 			}
; 247  : 		}

  0096c	e9 dd fe ff ff	 jmp	 $LN8@SetPeriodI
$LN7@SetPeriodI:

; 248  : 	}
; 249  : 	else

  00971	e9 6f 01 00 00	 jmp	 $LN5@SetPeriodI
$LN10@SetPeriodI:

; 250  : 	{
; 251  : 		 
; 252  : 		for( iIndex = 0; iIndex < MAX_ITEM_PERIOD_INFO; iIndex++ )

  00976	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iIndex$[ebp], 0
  0097d	eb 09		 jmp	 SHORT $LN4@SetPeriodI
$LN3@SetPeriodI:
  0097f	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00982	83 c0 01	 add	 eax, 1
  00985	89 45 f0	 mov	 DWORD PTR _iIndex$[ebp], eax
$LN4@SetPeriodI:
  00988	81 7d f0 dc 05
	00 00		 cmp	 DWORD PTR _iIndex$[ebp], 1500 ; 000005dcH
  0098f	0f 8d 50 01 00
	00		 jge	 $LN5@SetPeriodI

; 253  : 		{
; 254  : 			if( this->ItemPeriodInfo[iIndex].btUsedInfo == FALSE )

  00995	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00998	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0099e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009a1	0f b6 54 01 08	 movzx	 edx, BYTE PTR [ecx+eax+8]
  009a6	85 d2		 test	 edx, edx
  009a8	0f 85 32 01 00
	00		 jne	 $LN1@SetPeriodI

; 255  : 			{
; 256  : 				lpObj->m_iPeriodItemEffectIndex = iIndex;

  009ae	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009b1	8b 4d f0	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  009b4	89 88 80 20 00
	00		 mov	 DWORD PTR [eax+8320], ecx

; 257  : 				this->ItemPeriodInfo[iIndex].btUsedInfo = TRUE;

  009ba	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  009bd	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  009c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009c6	c6 44 01 08 01	 mov	 BYTE PTR [ecx+eax+8], 1

; 258  : 				this->ItemPeriodInfo[iIndex].iUserGuid = lpObj->DBNumber;

  009cb	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  009ce	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  009d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009d7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  009da	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]
  009dd	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 259  : 				this->ItemPeriodInfo[iIndex].wdUserIndex = lpObj->m_Index;

  009e1	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  009e4	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  009ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009ed	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  009f0	66 8b 12	 mov	 dx, WORD PTR [edx]
  009f3	66 89 54 01 0a	 mov	 WORD PTR [ecx+eax+10], dx

; 260  : 				this->ItemPeriodInfo[iIndex].dwItemCheckTickCount = GetTickCount();

  009f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  009fe	8b 4d f0	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00a01	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  00a07	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a0a	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 261  : 				this->ItemPeriodInfo[iIndex].btCountItems = 1;

  00a0e	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a11	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00a17	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a1a	c6 44 01 09 01	 mov	 BYTE PTR [ecx+eax+9], 1

; 262  : 				memcpy(this->ItemPeriodInfo[iIndex].chCharacterName,lpObj->Name,11);

  00a1f	6a 0b		 push	 11			; 0000000bH
  00a21	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a24	83 c0 77	 add	 eax, 119		; 00000077H
  00a27	50		 push	 eax
  00a28	8b 4d f0	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00a2b	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  00a31	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a34	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00a38	50		 push	 eax
  00a39	e8 00 00 00 00	 call	 _memcpy
  00a3e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 263  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].bInUse = true;

  00a41	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a44	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00a4a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a4d	c6 44 01 20 01	 mov	 BYTE PTR [ecx+eax+32], 1

; 264  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].iItemCode = iItemCode;

  00a52	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a55	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00a5b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a5e	8b 55 0c	 mov	 edx, DWORD PTR _iItemCode$[ebp]
  00a61	89 54 01 24	 mov	 DWORD PTR [ecx+eax+36], edx

; 265  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].btEffectType1 = btEffectType1;

  00a65	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a68	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00a6e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a71	8a 55 10	 mov	 dl, BYTE PTR _btEffectType1$[ebp]
  00a74	88 54 01 22	 mov	 BYTE PTR [ecx+eax+34], dl

; 266  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].btEffectType2 = btEffectType2;

  00a78	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a7b	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00a81	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a84	8a 55 14	 mov	 dl, BYTE PTR _btEffectType2$[ebp]
  00a87	88 54 01 23	 mov	 BYTE PTR [ecx+eax+35], dl

; 267  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].btOptionType = iOptionEffect;

  00a8b	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a8e	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00a94	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a97	8a 55 f4	 mov	 dl, BYTE PTR _iOptionEffect$[ebp]
  00a9a	88 54 01 21	 mov	 BYTE PTR [ecx+eax+33], dl

; 268  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].iItemPeriodLeftTime = dwItemPeriod;

  00a9e	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00aa1	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00aa7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aaa	8b 55 18	 mov	 edx, DWORD PTR _dwItemPeriod$[ebp]
  00aad	89 54 01 2c	 mov	 DWORD PTR [ecx+eax+44], edx

; 269  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].iItemPeriodUsedTime = 0;

  00ab1	8b 45 f0	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00ab4	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00aba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00abd	c7 44 01 28 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+40], 0

; 270  : 
; 271  : 				this->ApplyItemPeriodEffect(lpObj,iItemCode,dwItemPeriod);

  00ac5	8b 45 18	 mov	 eax, DWORD PTR _dwItemPeriod$[ebp]
  00ac8	50		 push	 eax
  00ac9	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemCode$[ebp]
  00acc	51		 push	 ecx
  00acd	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00ad0	52		 push	 edx
  00ad1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad4	e8 00 00 00 00	 call	 ?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::ApplyItemPeriodEffect

; 272  : 				return TRUE;

  00ad9	b8 01 00 00 00	 mov	 eax, 1
  00ade	eb 07		 jmp	 SHORT $LN12@SetPeriodI
$LN1@SetPeriodI:

; 273  : 			}
; 274  : 		}

  00ae0	e9 9a fe ff ff	 jmp	 $LN3@SetPeriodI
$LN5@SetPeriodI:

; 275  : 	}
; 276  : 	return FALSE;

  00ae5	33 c0		 xor	 eax, eax
$LN12@SetPeriodI:

; 277  : }

  00ae7	5f		 pop	 edi
  00ae8	5e		 pop	 esi
  00ae9	5b		 pop	 ebx
  00aea	8b e5		 mov	 esp, ebp
  00aec	5d		 pop	 ebp
  00aed	c2 14 00	 ret	 20			; 00000014H
?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ENDP ; CCashItemPeriodSystem::SetPeriodItemEffect
_TEXT	ENDS
PUBLIC	?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z:PROC ; CItemAddOption::ClearItemEffect2
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv288 = -88						; size = 4
_iEffectIndex$ = -20					; size = 4
_iOptionIndex$228198 = -16				; size = 4
_iOptionIndex$228193 = -12				; size = 4
_iItemInfoIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_ItemCode$ = 12						; size = 4
?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::ClearPeriodItemEffect
; _this$ = ecx

; 281  : {

  00af0	55		 push	 ebp
  00af1	8b ec		 mov	 ebp, esp
  00af3	83 ec 58	 sub	 esp, 88			; 00000058H
  00af6	53		 push	 ebx
  00af7	56		 push	 esi
  00af8	57		 push	 edi
  00af9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 282  : 	int iItemInfoIndex =0 ;

  00afc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iItemInfoIndex$[ebp], 0

; 283  : 	iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;

  00b03	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b06	8b 88 80 20 00
	00		 mov	 ecx, DWORD PTR [eax+8320]
  00b0c	89 4d f8	 mov	 DWORD PTR _iItemInfoIndex$[ebp], ecx

; 284  : 
; 285  : 	if ( iItemInfoIndex < 0 || iItemInfoIndex > MAX_ITEM_PERIOD_INFO )

  00b0f	83 7d f8 00	 cmp	 DWORD PTR _iItemInfoIndex$[ebp], 0
  00b13	7c 09		 jl	 SHORT $LN16@ClearPerio
  00b15	81 7d f8 dc 05
	00 00		 cmp	 DWORD PTR _iItemInfoIndex$[ebp], 1500 ; 000005dcH
  00b1c	7e 07		 jle	 SHORT $LN17@ClearPerio
$LN16@ClearPerio:

; 286  : 		return FALSE;

  00b1e	33 c0		 xor	 eax, eax
  00b20	e9 82 03 00 00	 jmp	 $LN18@ClearPerio
$LN17@ClearPerio:

; 287  : 
; 288  : 	if ( this->ItemPeriodInfo[iItemInfoIndex].btUsedInfo != TRUE )

  00b25	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00b28	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00b2e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b31	0f b6 54 01 08	 movzx	 edx, BYTE PTR [ecx+eax+8]
  00b36	83 fa 01	 cmp	 edx, 1
  00b39	74 1f		 je	 SHORT $LN15@ClearPerio

; 289  : 	{
; 290  : 		if ( this->ItemPeriodInfo[iItemInfoIndex].wdUserIndex != lpObj->m_Index )

  00b3b	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00b3e	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00b44	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b47	0f b7 54 01 0a	 movzx	 edx, WORD PTR [ecx+eax+10]
  00b4c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b4f	3b 10		 cmp	 edx, DWORD PTR [eax]
  00b51	74 07		 je	 SHORT $LN15@ClearPerio

; 291  : 		{
; 292  : 			return FALSE;

  00b53	33 c0		 xor	 eax, eax
  00b55	e9 4d 03 00 00	 jmp	 $LN18@ClearPerio
$LN15@ClearPerio:

; 293  : 		}
; 294  : 	}
; 295  : 
; 296  : 	this->ItemPeriodInfo[iItemInfoIndex].btCountItems--;

  00b5a	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00b5d	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00b63	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b66	8a 54 01 09	 mov	 dl, BYTE PTR [ecx+eax+9]
  00b6a	80 ea 01	 sub	 dl, 1
  00b6d	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00b70	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00b76	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b79	88 54 01 09	 mov	 BYTE PTR [ecx+eax+9], dl

; 297  : 
; 298  : #ifdef DEBUG_CODE2
; 299  : 	LogAddC(2,"%d --- %d",this->ItemPeriodInfo[iItemInfoIndex].btCountItems, ItemCode);
; 300  : #endif
; 301  : 
; 302  : 	if( this->ItemPeriodInfo[iItemInfoIndex].btCountItems == 0 || ItemCode == -1 )

  00b7d	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00b80	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00b86	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b89	0f b6 54 01 09	 movzx	 edx, BYTE PTR [ecx+eax+9]
  00b8e	85 d2		 test	 edx, edx
  00b90	74 0a		 je	 SHORT $LN12@ClearPerio
  00b92	83 7d 0c ff	 cmp	 DWORD PTR _ItemCode$[ebp], -1
  00b96	0f 85 92 01 00
	00		 jne	 $LN13@ClearPerio
$LN12@ClearPerio:

; 303  : 	{
; 304  : 
; 305  : 		this->ItemPeriodInfo[iItemInfoIndex].btUsedInfo = FALSE;

  00b9c	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00b9f	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00ba5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ba8	c6 44 01 08 00	 mov	 BYTE PTR [ecx+eax+8], 0

; 306  : 		this->ItemPeriodInfo[iItemInfoIndex].wdUserIndex = 0;

  00bad	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00bb0	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00bb6	33 c9		 xor	 ecx, ecx
  00bb8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00bbb	66 89 4c 02 0a	 mov	 WORD PTR [edx+eax+10], cx

; 307  : 		this->ItemPeriodInfo[iItemInfoIndex].iUserGuid = 0;

  00bc0	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00bc3	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00bc9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bcc	c7 44 01 0c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+12], 0

; 308  : 		this->ItemPeriodInfo[iItemInfoIndex].btCountItems = 0;

  00bd4	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00bd7	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00bdd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00be0	c6 44 01 09 00	 mov	 BYTE PTR [ecx+eax+9], 0

; 309  : 		this->ItemPeriodInfo[iItemInfoIndex].dwItemCheckTickCount = 0;

  00be5	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00be8	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00bee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bf1	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 0

; 310  : 		this->ItemPeriodInfo[iItemInfoIndex].chCharacterName[0] = NULL;

  00bf9	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00bfc	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00c02	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c05	c6 44 01 14 00	 mov	 BYTE PTR [ecx+eax+20], 0

; 311  : 
; 312  : 		for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00c0a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$228193[ebp], 0
  00c11	eb 09		 jmp	 SHORT $LN11@ClearPerio
$LN10@ClearPerio:
  00c13	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228193[ebp]
  00c16	83 c0 01	 add	 eax, 1
  00c19	89 45 f4	 mov	 DWORD PTR _iOptionIndex$228193[ebp], eax
$LN11@ClearPerio:
  00c1c	83 7d f4 0a	 cmp	 DWORD PTR _iOptionIndex$228193[ebp], 10 ; 0000000aH
  00c20	0f 8d f6 00 00
	00		 jge	 $LN9@ClearPerio

; 313  : 		{
; 314  : 			g_ItemAddOption.ClearItemEffect2(lpObj,this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode,2);

  00c26	6a 02		 push	 2
  00c28	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00c2b	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00c31	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c34	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00c38	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228193[ebp]
  00c3b	c1 e0 04	 shl	 eax, 4
  00c3e	8b 4c 02 1c	 mov	 ecx, DWORD PTR [edx+eax+28]
  00c42	51		 push	 ecx
  00c43	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c46	52		 push	 edx
  00c47	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00c4c	e8 00 00 00 00	 call	 ?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::ClearItemEffect2

; 315  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse = false;

  00c51	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00c54	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00c5a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c5d	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00c61	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228193[ebp]
  00c64	c1 e0 04	 shl	 eax, 4
  00c67	c6 44 02 18 00	 mov	 BYTE PTR [edx+eax+24], 0

; 316  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode = 0;

  00c6c	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00c6f	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00c75	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c78	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00c7c	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228193[ebp]
  00c7f	c1 e0 04	 shl	 eax, 4
  00c82	c7 44 02 1c 00
	00 00 00	 mov	 DWORD PTR [edx+eax+28], 0

; 317  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btOptionType = 0;

  00c8a	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00c8d	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00c93	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c96	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00c9a	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228193[ebp]
  00c9d	c1 e0 04	 shl	 eax, 4
  00ca0	c6 44 02 19 00	 mov	 BYTE PTR [edx+eax+25], 0

; 318  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btEffectType1 = 0;

  00ca5	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00ca8	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00cae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cb1	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00cb5	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228193[ebp]
  00cb8	c1 e0 04	 shl	 eax, 4
  00cbb	c6 44 02 1a 00	 mov	 BYTE PTR [edx+eax+26], 0

; 319  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btEffectType2 = 0;

  00cc0	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00cc3	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00cc9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ccc	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00cd0	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228193[ebp]
  00cd3	c1 e0 04	 shl	 eax, 4
  00cd6	c6 44 02 1b 00	 mov	 BYTE PTR [edx+eax+27], 0

; 320  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime = 0;

  00cdb	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00cde	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00ce4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ce7	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00ceb	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228193[ebp]
  00cee	c1 e0 04	 shl	 eax, 4
  00cf1	c7 44 02 24 00
	00 00 00	 mov	 DWORD PTR [edx+eax+36], 0

; 321  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemPeriodUsedTime = 0;

  00cf9	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00cfc	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00d02	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d05	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00d09	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228193[ebp]
  00d0c	c1 e0 04	 shl	 eax, 4
  00d0f	c7 44 02 20 00
	00 00 00	 mov	 DWORD PTR [edx+eax+32], 0

; 322  : 		}

  00d17	e9 f7 fe ff ff	 jmp	 $LN10@ClearPerio
$LN9@ClearPerio:

; 323  : 		lpObj->m_iPeriodItemEffectIndex = -1;

  00d1c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d1f	c7 80 80 20 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+8320], -1

; 324  : 	}
; 325  : 	else

  00d29	e9 3c 01 00 00	 jmp	 $LN8@ClearPerio
$LN13@ClearPerio:

; 326  : 	{
; 327  : 		int iOptionIndex = 0;//Seasl Of Hellin nado perenesti na if

  00d2e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$228198[ebp], 0

; 328  : 
; 329  : 		for( iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00d35	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$228198[ebp], 0
  00d3c	eb 09		 jmp	 SHORT $LN7@ClearPerio
$LN6@ClearPerio:
  00d3e	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00d41	83 c0 01	 add	 eax, 1
  00d44	89 45 f0	 mov	 DWORD PTR _iOptionIndex$228198[ebp], eax
$LN7@ClearPerio:
  00d47	83 7d f0 0a	 cmp	 DWORD PTR _iOptionIndex$228198[ebp], 10 ; 0000000aH
  00d4b	0f 8d 19 01 00
	00		 jge	 $LN8@ClearPerio

; 330  : 		{
; 331  : //#ifdef DEBUG_CODE2
; 332  : //			LogAddC(2,"%d -> %d",this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode ,ItemCode);
; 333  : //#endif
; 334  : 			if( this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode == ItemCode )

  00d51	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00d54	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00d5a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d5d	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00d61	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00d64	c1 e0 04	 shl	 eax, 4
  00d67	8b 4c 02 1c	 mov	 ecx, DWORD PTR [edx+eax+28]
  00d6b	3b 4d 0c	 cmp	 ecx, DWORD PTR _ItemCode$[ebp]
  00d6e	0f 85 f1 00 00
	00		 jne	 $LN4@ClearPerio

; 335  : 			{
; 336  : 				g_ItemAddOption.ClearItemEffect2(lpObj,this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode,2);

  00d74	6a 02		 push	 2
  00d76	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00d79	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00d7f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d82	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00d86	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00d89	c1 e0 04	 shl	 eax, 4
  00d8c	8b 4c 02 1c	 mov	 ecx, DWORD PTR [edx+eax+28]
  00d90	51		 push	 ecx
  00d91	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00d94	52		 push	 edx
  00d95	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00d9a	e8 00 00 00 00	 call	 ?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::ClearItemEffect2

; 337  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse = false;

  00d9f	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00da2	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00da8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dab	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00daf	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00db2	c1 e0 04	 shl	 eax, 4
  00db5	c6 44 02 18 00	 mov	 BYTE PTR [edx+eax+24], 0

; 338  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode = 0;

  00dba	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00dbd	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00dc3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dc6	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00dca	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00dcd	c1 e0 04	 shl	 eax, 4
  00dd0	c7 44 02 1c 00
	00 00 00	 mov	 DWORD PTR [edx+eax+28], 0

; 339  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btOptionType = 0;

  00dd8	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00ddb	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00de1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00de4	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00de8	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00deb	c1 e0 04	 shl	 eax, 4
  00dee	c6 44 02 19 00	 mov	 BYTE PTR [edx+eax+25], 0

; 340  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btEffectType1 = 0;

  00df3	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00df6	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00dfc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dff	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00e03	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00e06	c1 e0 04	 shl	 eax, 4
  00e09	c6 44 02 1a 00	 mov	 BYTE PTR [edx+eax+26], 0

; 341  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btEffectType2 = 0;

  00e0e	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00e11	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00e17	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e1a	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00e1e	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00e21	c1 e0 04	 shl	 eax, 4
  00e24	c6 44 02 1b 00	 mov	 BYTE PTR [edx+eax+27], 0

; 342  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime = 0;

  00e29	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00e2c	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00e32	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e35	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00e39	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00e3c	c1 e0 04	 shl	 eax, 4
  00e3f	c7 44 02 24 00
	00 00 00	 mov	 DWORD PTR [edx+eax+36], 0

; 343  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemPeriodUsedTime = 0;

  00e47	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  00e4a	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00e50	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e53	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00e57	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228198[ebp]
  00e5a	c1 e0 04	 shl	 eax, 4
  00e5d	c7 44 02 20 00
	00 00 00	 mov	 DWORD PTR [edx+eax+32], 0
$LN4@ClearPerio:

; 344  : 			}
; 345  : 		}

  00e65	e9 d4 fe ff ff	 jmp	 $LN6@ClearPerio
$LN8@ClearPerio:

; 346  : 	}
; 347  : 
; 348  : 	int iEffectIndex = 0;

  00e6a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iEffectIndex$[ebp], 0

; 349  : 
; 350  : 	iEffectIndex = this->GetItemPeriodInfoEffectID(ItemCode);

  00e71	8b 45 0c	 mov	 eax, DWORD PTR _ItemCode$[ebp]
  00e74	50		 push	 eax
  00e75	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e78	e8 00 00 00 00	 call	 ?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID
  00e7d	89 45 ec	 mov	 DWORD PTR _iEffectIndex$[ebp], eax

; 351  : 
; 352  : 	switch(iEffectIndex) //Leaps

  00e80	8b 45 ec	 mov	 eax, DWORD PTR _iEffectIndex$[ebp]
  00e83	89 45 a8	 mov	 DWORD PTR tv288[ebp], eax
  00e86	83 7d a8 32	 cmp	 DWORD PTR tv288[ebp], 50 ; 00000032H
  00e8a	7c 16		 jl	 SHORT $LN2@ClearPerio
  00e8c	83 7d a8 36	 cmp	 DWORD PTR tv288[ebp], 54 ; 00000036H
  00e90	7e 02		 jle	 SHORT $LN1@ClearPerio
  00e92	eb 0e		 jmp	 SHORT $LN2@ClearPerio
$LN1@ClearPerio:

; 353  : 	{
; 354  : 	case AT_CSHOP_LEAP_OF_STRENGTH:
; 355  : 	case AT_CSHOP_LEAP_OF_QUICKNESS:
; 356  : 	case AT_CSHOP_LEAP_OF_HEALTH:
; 357  : 	case AT_CSHOP_LEAP_OF_ENERGY:
; 358  : 	case AT_CSHOP_LEAP_OF_CONTROL:
; 359  : 		gObjCalCharacter(lpObj->m_Index);

  00e94	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e97	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e99	51		 push	 ecx
  00e9a	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00e9f	83 c4 04	 add	 esp, 4
$LN2@ClearPerio:

; 360  : 		break;
; 361  : 	}
; 362  : 
; 363  : 	return TRUE;

  00ea2	b8 01 00 00 00	 mov	 eax, 1
$LN18@ClearPerio:

; 364  : }

  00ea7	5f		 pop	 edi
  00ea8	5e		 pop	 esi
  00ea9	5b		 pop	 ebx
  00eaa	8b e5		 mov	 esp, ebp
  00eac	5d		 pop	 ebp
  00ead	c2 08 00	 ret	 8
?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::ClearPeriodItemEffect
_TEXT	ENDS
PUBLIC	??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::GDReqPeriodItemInsert
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	?MSSQL2008@@3_NA:BYTE				; MSSQL2008
EXTRN	?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z:PROC ; CItemAddOption::SearchItemEffectType
;	COMDAT ??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@
CONST	SEGMENT
??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemInsert Req] - ID : %s, Name : %s, ItemCode '
	DB	': %d, Effect1 : %d, Effect2 : %d, UseTime : %d, ExpireDate : '
	DB	'%s', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
$T228624 = -160						; size = 8
_iOptionType$ = -88					; size = 4
_iEffectTime$ = -84					; size = 4
_tExpireDate$ = -80					; size = 8
_iEffectType2$ = -72					; size = 4
_iEffectType1$ = -68					; size = 4
_pMsg$ = -64						; size = 56
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
_iItemEffectDate$ = 16					; size = 4
?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemInsert
; _this$ = ecx

; 368  : {

  00eb0	55		 push	 ebp
  00eb1	8b ec		 mov	 ebp, esp
  00eb3	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00eb9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00ebe	33 c5		 xor	 eax, ebp
  00ec0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00ec3	53		 push	 ebx
  00ec4	56		 push	 esi
  00ec5	57		 push	 edi
  00ec6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 369  : 	PMSG_REQ_PERIODITEM_INSERT pMsg;
; 370  : 	int iEffectType1 =0;

  00ec9	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _iEffectType1$[ebp], 0

; 371  : 	int iEffectType2 =0;

  00ed0	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _iEffectType2$[ebp], 0

; 372  : 	CTime tExpireDate;

  00ed7	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00eda	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@XZ	; ATL::CTime::CTime

; 373  : 	int iEffectTime = 0;

  00edf	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _iEffectTime$[ebp], 0

; 374  : 
; 375  : 	if ( g_ItemAddOption.SearchItemEffectType(iItemCode, &iEffectType1, &iEffectType2, &iEffectTime) == false )

  00ee6	8d 45 ac	 lea	 eax, DWORD PTR _iEffectTime$[ebp]
  00ee9	50		 push	 eax
  00eea	8d 4d b8	 lea	 ecx, DWORD PTR _iEffectType2$[ebp]
  00eed	51		 push	 ecx
  00eee	8d 55 bc	 lea	 edx, DWORD PTR _iEffectType1$[ebp]
  00ef1	52		 push	 edx
  00ef2	8b 45 0c	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  00ef5	50		 push	 eax
  00ef6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00efb	e8 00 00 00 00	 call	 ?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z ; CItemAddOption::SearchItemEffectType
  00f00	0f b6 c8	 movzx	 ecx, al
  00f03	85 c9		 test	 ecx, ecx
  00f05	75 05		 jne	 SHORT $LN5@GDReqPerio

; 376  : 		return;

  00f07	e9 74 01 00 00	 jmp	 $LN6@GDReqPerio
$LN5@GDReqPerio:

; 377  : 
; 378  : 	if( iItemEffectDate == -1 )

  00f0c	83 7d 10 ff	 cmp	 DWORD PTR _iItemEffectDate$[ebp], -1
  00f10	75 0e		 jne	 SHORT $LN4@GDReqPerio

; 379  : 		iItemEffectDate = iEffectTime / 60;

  00f12	8b 45 ac	 mov	 eax, DWORD PTR _iEffectTime$[ebp]
  00f15	99		 cdq
  00f16	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00f1b	f7 f9		 idiv	 ecx
  00f1d	89 45 10	 mov	 DWORD PTR _iItemEffectDate$[ebp], eax
$LN4@GDReqPerio:

; 380  : 
; 381  : 	int iOptionType = g_ItemAddOption.SearchItemOptionType(iItemCode);

  00f20	8b 45 0c	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  00f23	50		 push	 eax
  00f24	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00f29	e8 00 00 00 00	 call	 ?SearchItemOptionType@CItemAddOption@@QAEHH@Z ; CItemAddOption::SearchItemOptionType
  00f2e	89 45 a8	 mov	 DWORD PTR _iOptionType$[ebp], eax

; 382  : 
; 383  : 	if( iOptionType == -1 )

  00f31	83 7d a8 ff	 cmp	 DWORD PTR _iOptionType$[ebp], -1
  00f35	75 05		 jne	 SHORT $LN3@GDReqPerio

; 384  : 		return;

  00f37	e9 44 01 00 00	 jmp	 $LN6@GDReqPerio
$LN3@GDReqPerio:

; 385  : 
; 386  : 	pMsg.btOptionType = iOptionType;

  00f3c	8a 45 a8	 mov	 al, BYTE PTR _iOptionType$[ebp]
  00f3f	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+53], al

; 387  : 	pMsg.iUserIndex = lpObj->m_Index;

  00f42	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f45	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f47	89 4d c4	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 388  : 	pMsg.iUserGuid = lpObj->DBNumber;

  00f4a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f4d	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00f50	89 4d c8	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 389  : 	pMsg.iItemCode = iItemCode;

  00f53	8b 45 0c	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  00f56	89 45 cc	 mov	 DWORD PTR _pMsg$[ebp+12], eax

; 390  : 	pMsg.btItemEffectType1 = iEffectType1;

  00f59	8a 45 bc	 mov	 al, BYTE PTR _iEffectType1$[ebp]
  00f5c	88 45 d4	 mov	 BYTE PTR _pMsg$[ebp+20], al

; 391  : 	pMsg.btItemEffectType2 = iEffectType2;

  00f5f	8a 45 b8	 mov	 al, BYTE PTR _iEffectType2$[ebp]
  00f62	88 45 d5	 mov	 BYTE PTR _pMsg$[ebp+21], al

; 392  : 	pMsg.iItemPeriodDate = iItemEffectDate;

  00f65	8b 45 10	 mov	 eax, DWORD PTR _iItemEffectDate$[ebp]
  00f68	89 45 d0	 mov	 DWORD PTR _pMsg$[ebp+16], eax

; 393  : 	memcpy(pMsg.chUserID, lpObj->Name, sizeof(pMsg.chUserID));

  00f6b	6a 0b		 push	 11			; 0000000bH
  00f6d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f70	83 c0 77	 add	 eax, 119		; 00000077H
  00f73	50		 push	 eax
  00f74	8d 4d d6	 lea	 ecx, DWORD PTR _pMsg$[ebp+22]
  00f77	51		 push	 ecx
  00f78	e8 00 00 00 00	 call	 _memcpy
  00f7d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 394  : 
; 395  : 	tExpireDate = this->CalcItemUseEndTime(iItemEffectDate);

  00f80	8b 45 10	 mov	 eax, DWORD PTR _iItemEffectDate$[ebp]
  00f83	50		 push	 eax
  00f84	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T228624[ebp]
  00f8a	51		 push	 ecx
  00f8b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f8e	e8 00 00 00 00	 call	 ?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z ; CCashItemPeriodSystem::CalcItemUseEndTime
  00f93	8b 10		 mov	 edx, DWORD PTR [eax]
  00f95	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00f98	89 55 b0	 mov	 DWORD PTR _tExpireDate$[ebp], edx
  00f9b	89 45 b4	 mov	 DWORD PTR _tExpireDate$[ebp+4], eax

; 396  : 
; 397  : 	//wsprintf(pMsg.chExpireDate, "%d-%d-%d %d:%d", tExpireDate.GetYear(), tExpireDate.GetMonth(), tExpireDate.GetDay(), tExpireDate.GetHour(), tExpireDate.GetMinute());
; 398  : //#if(MSSQL2008==1)
; 399  : 	if(MSSQL2008)

  00f9e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?MSSQL2008@@3_NA ; MSSQL2008
  00fa5	85 c0		 test	 eax, eax
  00fa7	74 41		 je	 SHORT $LN2@GDReqPerio

; 400  : 	{
; 401  : 		wsprintf(pMsg.chExpireDate, "%d-%d-%d %d:%d", tExpireDate.GetYear(), tExpireDate.GetDay(), tExpireDate.GetMonth(),  tExpireDate.GetHour(), tExpireDate.GetMinute());

  00fa9	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00fac	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  00fb1	50		 push	 eax
  00fb2	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00fb5	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00fba	50		 push	 eax
  00fbb	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00fbe	e8 00 00 00 00	 call	 ?GetMonth@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMonth
  00fc3	50		 push	 eax
  00fc4	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00fc7	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  00fcc	50		 push	 eax
  00fcd	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00fd0	e8 00 00 00 00	 call	 ?GetYear@CTime@ATL@@QBEHXZ ; ATL::CTime::GetYear
  00fd5	50		 push	 eax
  00fd6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
  00fdb	8d 45 e1	 lea	 eax, DWORD PTR _pMsg$[ebp+33]
  00fde	50		 push	 eax
  00fdf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00fe5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 402  : 	}
; 403  : 	else

  00fe8	eb 3f		 jmp	 SHORT $LN1@GDReqPerio
$LN2@GDReqPerio:

; 404  : 	{
; 405  : 		wsprintf(pMsg.chExpireDate, "%d-%d-%d %d:%d", tExpireDate.GetYear(), tExpireDate.GetMonth(), tExpireDate.GetDay(), tExpireDate.GetHour(), tExpireDate.GetMinute());

  00fea	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00fed	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  00ff2	50		 push	 eax
  00ff3	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00ff6	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00ffb	50		 push	 eax
  00ffc	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00fff	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  01004	50		 push	 eax
  01005	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  01008	e8 00 00 00 00	 call	 ?GetMonth@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMonth
  0100d	50		 push	 eax
  0100e	8d 4d b0	 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  01011	e8 00 00 00 00	 call	 ?GetYear@CTime@ATL@@QBEHXZ ; ATL::CTime::GetYear
  01016	50		 push	 eax
  01017	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
  0101c	8d 45 e1	 lea	 eax, DWORD PTR _pMsg$[ebp+33]
  0101f	50		 push	 eax
  01020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  01026	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@GDReqPerio:

; 406  : 	}
; 407  : //#endif
; 408  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x03, sizeof(PMSG_REQ_PERIODITEM_INSERT));

  01029	6a 38		 push	 56			; 00000038H
  0102b	6a 03		 push	 3
  0102d	68 d0 00 00 00	 push	 208			; 000000d0H
  01032	8d 45 c0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01035	50		 push	 eax
  01036	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0103b	83 c4 10	 add	 esp, 16			; 00000010H

; 409  : 
; 410  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_INSERT));

  0103e	6a 38		 push	 56			; 00000038H
  01040	8d 45 c0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01043	50		 push	 eax
  01044	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01049	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 411  : 
; 412  : 	LogAddTD("[CashShop][PeriodItemInsert Req] - ID : %s, Name : %s, ItemCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d, ExpireDate : %s",
; 413  : 		lpObj->AccountID, lpObj->Name, pMsg.iItemCode, pMsg.btItemEffectType1, pMsg.btItemEffectType2, pMsg.iItemPeriodDate, pMsg.chExpireDate);

  0104e	8d 45 e1	 lea	 eax, DWORD PTR _pMsg$[ebp+33]
  01051	50		 push	 eax
  01052	8b 4d d0	 mov	 ecx, DWORD PTR _pMsg$[ebp+16]
  01055	51		 push	 ecx
  01056	0f b6 55 d5	 movzx	 edx, BYTE PTR _pMsg$[ebp+21]
  0105a	52		 push	 edx
  0105b	0f b6 45 d4	 movzx	 eax, BYTE PTR _pMsg$[ebp+20]
  0105f	50		 push	 eax
  01060	8b 4d cc	 mov	 ecx, DWORD PTR _pMsg$[ebp+12]
  01063	51		 push	 ecx
  01064	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01067	83 c2 77	 add	 edx, 119		; 00000077H
  0106a	52		 push	 edx
  0106b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0106e	83 c0 6c	 add	 eax, 108		; 0000006cH
  01071	50		 push	 eax
  01072	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@
  01077	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0107d	83 c4 20	 add	 esp, 32			; 00000020H
$LN6@GDReqPerio:

; 414  : }

  01080	5f		 pop	 edi
  01081	5e		 pop	 esi
  01082	5b		 pop	 ebx
  01083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01086	33 cd		 xor	 ecx, ebp
  01088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0108d	8b e5		 mov	 esp, ebp
  0108f	5d		 pop	 ebp
  01090	c2 0c 00	 ret	 12			; 0000000cH
?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemInsert
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemList
; _this$ = ecx

; 417  : {

  010a0	55		 push	 ebp
  010a1	8b ec		 mov	 ebp, esp
  010a3	83 ec 60	 sub	 esp, 96			; 00000060H
  010a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  010ab	33 c5		 xor	 eax, ebp
  010ad	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  010b0	53		 push	 ebx
  010b1	56		 push	 esi
  010b2	57		 push	 edi
  010b3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 418  : 	PMSG_REQ_PERIODITEM_LIST pMsg;
; 419  : 
; 420  : 	pMsg.iUserIndex = lpObj->m_Index;

  010b6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  010bb	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 421  : 	pMsg.iUserGuid = lpObj->DBNumber;

  010be	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010c1	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  010c4	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 422  : 	memcpy(pMsg.chCharacterName, lpObj->Name, sizeof(pMsg.chCharacterName));

  010c7	6a 0b		 push	 11			; 0000000bH
  010c9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010cc	83 c0 77	 add	 eax, 119		; 00000077H
  010cf	50		 push	 eax
  010d0	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp+12]
  010d3	51		 push	 ecx
  010d4	e8 00 00 00 00	 call	 _memcpy
  010d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 423  : 
; 424  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x05, sizeof(PMSG_REQ_PERIODITEM_LIST));

  010dc	6a 18		 push	 24			; 00000018H
  010de	6a 05		 push	 5
  010e0	68 d0 00 00 00	 push	 208			; 000000d0H
  010e5	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  010e8	50		 push	 eax
  010e9	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  010ee	83 c4 10	 add	 esp, 16			; 00000010H

; 425  : 
; 426  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_LIST));

  010f1	6a 18		 push	 24			; 00000018H
  010f3	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  010f6	50		 push	 eax
  010f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  010fc	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 427  : }

  01101	5f		 pop	 edi
  01102	5e		 pop	 esi
  01103	5b		 pop	 ebx
  01104	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01107	33 cd		 xor	 ecx, ebp
  01109	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0110e	8b e5		 mov	 esp, ebp
  01110	5d		 pop	 ebp
  01111	c2 04 00	 ret	 4
?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemList
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GDReqPeriodItemInquiry
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemInquiry
; _this$ = ecx

; 430  : {

  01120	55		 push	 ebp
  01121	8b ec		 mov	 ebp, esp
  01123	83 ec 54	 sub	 esp, 84			; 00000054H
  01126	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0112b	33 c5		 xor	 eax, ebp
  0112d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01130	53		 push	 ebx
  01131	56		 push	 esi
  01132	57		 push	 edi
  01133	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 431  : 	PMSG_REQ_PERIODITEM_INQUIRY pMsg;
; 432  : 
; 433  : 	pMsg.iUserIndex = lpObj->m_Index;

  01136	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01139	8b 08		 mov	 ecx, DWORD PTR [eax]
  0113b	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 434  : 	pMsg.iUserGuid = lpObj->DBNumber;

  0113e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01141	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  01144	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 435  : 
; 436  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x01, sizeof(PMSG_REQ_PERIODITEM_INQUIRY));

  01147	6a 0c		 push	 12			; 0000000cH
  01149	6a 01		 push	 1
  0114b	68 d0 00 00 00	 push	 208			; 000000d0H
  01150	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01153	50		 push	 eax
  01154	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01159	83 c4 10	 add	 esp, 16			; 00000010H

; 437  : 
; 438  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_INQUIRY));

  0115c	6a 0c		 push	 12			; 0000000cH
  0115e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01161	50		 push	 eax
  01162	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01167	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 439  : }

  0116c	5f		 pop	 edi
  0116d	5e		 pop	 esi
  0116e	5b		 pop	 ebx
  0116f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01172	33 cd		 xor	 ecx, ebp
  01174	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01179	8b e5		 mov	 esp, ebp
  0117b	5d		 pop	 ebp
  0117c	c2 04 00	 ret	 4
?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemInquiry
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpItemInfo$ = -48					; size = 4
_pMsg$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iOptionIndex$ = 12					; size = 4
?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemUpdate
; _this$ = ecx

; 442  : {

  01180	55		 push	 ebp
  01181	8b ec		 mov	 ebp, esp
  01183	83 ec 70	 sub	 esp, 112		; 00000070H
  01186	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0118b	33 c5		 xor	 eax, ebp
  0118d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01190	53		 push	 ebx
  01191	56		 push	 esi
  01192	57		 push	 edi
  01193	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 443  : 	PMSG_REQ_PERIODITEM_UPDATE pMsg;
; 444  : 	ITEMPERIOD_INFO* lpItemInfo = NULL;

  01196	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _lpItemInfo$[ebp], 0

; 445  : 
; 446  : 	if ( lpObj->m_iPeriodItemEffectIndex < 0 || lpObj->m_iPeriodItemEffectIndex >=MAX_ITEM_PERIOD_INFO )

  0119d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011a0	83 b8 80 20 00
	00 00		 cmp	 DWORD PTR [eax+8320], 0
  011a7	7c 0f		 jl	 SHORT $LN4@GDReqPerio@2
  011a9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011ac	81 b8 80 20 00
	00 dc 05 00 00	 cmp	 DWORD PTR [eax+8320], 1500 ; 000005dcH
  011b6	7c 05		 jl	 SHORT $LN5@GDReqPerio@2
$LN4@GDReqPerio@2:

; 447  : 		return;

  011b8	e9 b1 00 00 00	 jmp	 $LN6@GDReqPerio@2
$LN5@GDReqPerio@2:

; 448  : 
; 449  : 	if( iOptionIndex < 0 || iOptionIndex > MAX_ITEM_PERIOD_EFFECT )

  011bd	83 7d 0c 00	 cmp	 DWORD PTR _iOptionIndex$[ebp], 0
  011c1	7c 06		 jl	 SHORT $LN2@GDReqPerio@2
  011c3	83 7d 0c 0a	 cmp	 DWORD PTR _iOptionIndex$[ebp], 10 ; 0000000aH
  011c7	7e 05		 jle	 SHORT $LN3@GDReqPerio@2
$LN2@GDReqPerio@2:

; 450  : 		return;

  011c9	e9 a0 00 00 00	 jmp	 $LN6@GDReqPerio@2
$LN3@GDReqPerio@2:

; 451  : 
; 452  : 	lpItemInfo = &this->ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];

  011ce	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011d1	8b 88 80 20 00
	00		 mov	 ecx, DWORD PTR [eax+8320]
  011d7	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  011dd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  011e0	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  011e4	89 45 d0	 mov	 DWORD PTR _lpItemInfo$[ebp], eax

; 453  : 
; 454  : 	if( lpItemInfo->btUsedInfo == FALSE )

  011e7	8b 45 d0	 mov	 eax, DWORD PTR _lpItemInfo$[ebp]
  011ea	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  011ed	85 c9		 test	 ecx, ecx
  011ef	75 02		 jne	 SHORT $LN1@GDReqPerio@2

; 455  : 		return;

  011f1	eb 7b		 jmp	 SHORT $LN6@GDReqPerio@2
$LN1@GDReqPerio@2:

; 456  : 
; 457  : 	pMsg.iUserGuid = lpObj->DBNumber;

  011f3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011f6	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  011f9	89 4d dc	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 458  : 	pMsg.iUserIndex = lpObj->m_Index;

  011fc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  01201	89 4d d8	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 459  : 	pMsg.iItemCode = lpItemInfo->vItemEffect[iOptionIndex].iItemCode;

  01204	8b 45 0c	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  01207	c1 e0 04	 shl	 eax, 4
  0120a	8b 4d d0	 mov	 ecx, DWORD PTR _lpItemInfo$[ebp]
  0120d	8b 54 01 1c	 mov	 edx, DWORD PTR [ecx+eax+28]
  01211	89 55 e0	 mov	 DWORD PTR _pMsg$[ebp+12], edx

; 460  : 	pMsg.iLeftTime = lpItemInfo->vItemEffect[iOptionIndex].iItemPeriodLeftTime;

  01214	8b 45 0c	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  01217	c1 e0 04	 shl	 eax, 4
  0121a	8b 4d d0	 mov	 ecx, DWORD PTR _lpItemInfo$[ebp]
  0121d	8b 54 01 24	 mov	 edx, DWORD PTR [ecx+eax+36]
  01221	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+20], edx

; 461  : 	pMsg.iUsedTime = lpItemInfo->vItemEffect[iOptionIndex].iItemPeriodUsedTime;

  01224	8b 45 0c	 mov	 eax, DWORD PTR _iOptionIndex$[ebp]
  01227	c1 e0 04	 shl	 eax, 4
  0122a	8b 4d d0	 mov	 ecx, DWORD PTR _lpItemInfo$[ebp]
  0122d	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  01231	89 55 e4	 mov	 DWORD PTR _pMsg$[ebp+16], edx

; 462  : 	memcpy(pMsg.chCharacterName, lpItemInfo->chCharacterName, sizeof(pMsg.chCharacterName));

  01234	6a 0b		 push	 11			; 0000000bH
  01236	8b 45 d0	 mov	 eax, DWORD PTR _lpItemInfo$[ebp]
  01239	83 c0 0c	 add	 eax, 12			; 0000000cH
  0123c	50		 push	 eax
  0123d	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp+24]
  01240	51		 push	 ecx
  01241	e8 00 00 00 00	 call	 _memcpy
  01246	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 
; 464  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x07, sizeof(PMSG_REQ_PERIODITEM_UPDATE));

  01249	6a 24		 push	 36			; 00000024H
  0124b	6a 07		 push	 7
  0124d	68 d0 00 00 00	 push	 208			; 000000d0H
  01252	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01255	50		 push	 eax
  01256	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0125b	83 c4 10	 add	 esp, 16			; 00000010H

; 465  : 
; 466  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_UPDATE));

  0125e	6a 24		 push	 36			; 00000024H
  01260	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01263	50		 push	 eax
  01264	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01269	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN6@GDReqPerio@2:

; 467  : }

  0126e	5f		 pop	 edi
  0126f	5e		 pop	 esi
  01270	5b		 pop	 ebx
  01271	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01274	33 cd		 xor	 ecx, ebp
  01276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0127b	8b e5		 mov	 esp, ebp
  0127d	5d		 pop	 ebp
  0127e	c2 08 00	 ret	 8
?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemUpdate
_TEXT	ENDS
PUBLIC	?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
PUBLIC	??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@ ; `string'
PUBLIC	??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@ ; `string'
PUBLIC	?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemInsert
;	COMDAT ??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@
CONST	SEGMENT
??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@ DB '[CashS'
	DB	'hop][PeriodItemInserver Ans] Fail - ID : %s, Name : %s, ItemC'
	DB	'ode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d, Result : '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@
CONST	SEGMENT
??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemInsert Ans] Success - ID : %s, Name : %s, I'
	DB	'temCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv69 = -84						; size = 4
_btResult$ = -13					; size = 1
_lpObj$ = -12						; size = 4
_iIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemInsert
; _this$ = ecx

; 471  : {

  01290	55		 push	 ebp
  01291	8b ec		 mov	 ebp, esp
  01293	83 ec 54	 sub	 esp, 84			; 00000054H
  01296	53		 push	 ebx
  01297	56		 push	 esi
  01298	57		 push	 edi
  01299	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 472  : 	int iIndex = aRecv->iUserIndex;

  0129c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0129f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  012a2	89 4d f8	 mov	 DWORD PTR _iIndex$[ebp], ecx

; 473  : 	LPOBJ lpObj = &gObj[iIndex];

  012a5	8b 45 f8	 mov	 eax, DWORD PTR _iIndex$[ebp]
  012a8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  012ae	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012b4	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 474  : 	BYTE btResult = FALSE;

  012b7	c6 45 f3 00	 mov	 BYTE PTR _btResult$[ebp], 0

; 475  : 
; 476  : 	switch ( aRecv->btResult )

  012bb	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  012be	8a 48 12	 mov	 cl, BYTE PTR [eax+18]
  012c1	88 4d ac	 mov	 BYTE PTR tv69[ebp], cl
  012c4	80 7d ac 00	 cmp	 BYTE PTR tv69[ebp], 0
  012c8	74 0e		 je	 SHORT $LN6@DGAnsPerio
  012ca	80 7d ac 01	 cmp	 BYTE PTR tv69[ebp], 1
  012ce	74 0e		 je	 SHORT $LN5@DGAnsPerio
  012d0	80 7d ac 02	 cmp	 BYTE PTR tv69[ebp], 2
  012d4	74 0e		 je	 SHORT $LN4@DGAnsPerio
  012d6	eb 12		 jmp	 SHORT $LN3@DGAnsPerio
$LN6@DGAnsPerio:

; 477  : 	{
; 478  : 		case 0: btResult = 1; break;

  012d8	c6 45 f3 01	 mov	 BYTE PTR _btResult$[ebp], 1
  012dc	eb 10		 jmp	 SHORT $LN7@DGAnsPerio
$LN5@DGAnsPerio:

; 479  : 		case 1: btResult = 1; break;

  012de	c6 45 f3 01	 mov	 BYTE PTR _btResult$[ebp], 1
  012e2	eb 0a		 jmp	 SHORT $LN7@DGAnsPerio
$LN4@DGAnsPerio:

; 480  : 		case 2: btResult = 3; break;

  012e4	c6 45 f3 03	 mov	 BYTE PTR _btResult$[ebp], 3
  012e8	eb 04		 jmp	 SHORT $LN7@DGAnsPerio
$LN3@DGAnsPerio:

; 481  : 		default: btResult = 1;

  012ea	c6 45 f3 01	 mov	 BYTE PTR _btResult$[ebp], 1
$LN7@DGAnsPerio:

; 482  : 	}
; 483  : 
; 484  : 	if ( btResult == 1 )

  012ee	0f b6 45 f3	 movzx	 eax, BYTE PTR _btResult$[ebp]
  012f2	83 f8 01	 cmp	 eax, 1
  012f5	75 66		 jne	 SHORT $LN2@DGAnsPerio

; 485  : 	{
; 486  : 		this->SetPeriodItemEffect(lpObj, aRecv->iItemCode, aRecv->btItemEffectType1, aRecv->btItemEffectType2, aRecv->iItemPeriodDate);

  012f7	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  012fa	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  012fd	51		 push	 ecx
  012fe	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01301	0f b6 42 11	 movzx	 eax, BYTE PTR [edx+17]
  01305	50		 push	 eax
  01306	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01309	0f b6 51 10	 movzx	 edx, BYTE PTR [ecx+16]
  0130d	52		 push	 edx
  0130e	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01311	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01314	51		 push	 ecx
  01315	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01318	52		 push	 edx
  01319	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0131c	e8 00 00 00 00	 call	 ?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ; CCashItemPeriodSystem::SetPeriodItemEffect

; 487  : 
; 488  : 		LogAddTD("[CashShop][PeriodItemInsert Ans] Success - ID : %s, Name : %s, ItemCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d",
; 489  : 			lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btItemEffectType1, aRecv->btItemEffectType2, aRecv->iItemPeriodDate);

  01321	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01324	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01327	51		 push	 ecx
  01328	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  0132b	0f b6 42 11	 movzx	 eax, BYTE PTR [edx+17]
  0132f	50		 push	 eax
  01330	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01333	0f b6 51 10	 movzx	 edx, BYTE PTR [ecx+16]
  01337	52		 push	 edx
  01338	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0133b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0133e	51		 push	 ecx
  0133f	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01342	83 c2 77	 add	 edx, 119		; 00000077H
  01345	52		 push	 edx
  01346	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01349	83 c0 6c	 add	 eax, 108		; 0000006cH
  0134c	50		 push	 eax
  0134d	68 00 00 00 00	 push	 OFFSET ??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@
  01352	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01358	83 c4 1c	 add	 esp, 28			; 0000001cH

; 490  : 	}
; 491  : 	else

  0135b	eb 3f		 jmp	 SHORT $LN1@DGAnsPerio
$LN2@DGAnsPerio:

; 492  : 	{
; 493  : 		LogAddTD("[CashShop][PeriodItemInserver Ans] Fail - ID : %s, Name : %s, ItemCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d, Result : %d",
; 494  : 			lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btItemEffectType1, aRecv->btItemEffectType2, aRecv->iItemPeriodDate, btResult);	

  0135d	0f b6 45 f3	 movzx	 eax, BYTE PTR _btResult$[ebp]
  01361	50		 push	 eax
  01362	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01365	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01368	52		 push	 edx
  01369	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0136c	0f b6 48 11	 movzx	 ecx, BYTE PTR [eax+17]
  01370	51		 push	 ecx
  01371	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01374	0f b6 42 10	 movzx	 eax, BYTE PTR [edx+16]
  01378	50		 push	 eax
  01379	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0137c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0137f	52		 push	 edx
  01380	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01383	83 c0 77	 add	 eax, 119		; 00000077H
  01386	50		 push	 eax
  01387	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0138a	83 c1 6c	 add	 ecx, 108		; 0000006cH
  0138d	51		 push	 ecx
  0138e	68 00 00 00 00	 push	 OFFSET ??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@
  01393	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01399	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@DGAnsPerio:

; 495  : 	}
; 496  : 
; 497  : 	this->GCSendPeriodItemInserResult(lpObj, btResult);

  0139c	0f b6 45 f3	 movzx	 eax, BYTE PTR _btResult$[ebp]
  013a0	50		 push	 eax
  013a1	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  013a4	51		 push	 ecx
  013a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013a8	e8 00 00 00 00	 call	 ?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ; CCashItemPeriodSystem::GCSendPeriodItemInserResult

; 498  : }

  013ad	5f		 pop	 edi
  013ae	5e		 pop	 esi
  013af	5b		 pop	 ebx
  013b0	8b e5		 mov	 esp, ebp
  013b2	5d		 pop	 ebp
  013b3	c2 04 00	 ret	 4
?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemInsert
_TEXT	ENDS
PUBLIC	??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@ ; `string'
PUBLIC	??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@ ; `string'
PUBLIC	??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ ; `string'
PUBLIC	?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemList
;	COMDAT ??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@
CONST	SEGMENT
??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@ DB '[C'
	DB	'ashShop][PeriodItemList Ans] Fail - ID : %s, Name : %s, ItemC'
	DB	'ode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, UseTim'
	DB	'e : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@
CONST	SEGMENT
??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@ DB '[C'
	DB	'ashShop][PeriodItemList Ans] Success - ID : %s, Name : %s, It'
	DB	'emCode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, Use'
	DB	'Time : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
CONST	SEGMENT
??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemSelect Ans] Failed - Item usedtime is over '
	DB	'ID : %s, Name : %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
CONST	SEGMENT
??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemSelect Ans] Failed - Item over 1 item ID : '
	DB	'%s, Name : %s', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iOptionIndex$228301 = -24				; size = 4
_iCountItems$ = -20					; size = 4
_iResult$ = -16						; size = 4
_iItemLeftUseTime$ = -12				; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemList
; _this$ = ecx

; 501  : {

  013c0	55		 push	 ebp
  013c1	8b ec		 mov	 ebp, esp
  013c3	83 ec 58	 sub	 esp, 88			; 00000058H
  013c6	53		 push	 ebx
  013c7	56		 push	 esi
  013c8	57		 push	 edi
  013c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 502  : 	if ( aRecv->iUserIndex <= 0 || aRecv->iUserIndex > OBJMAX )

  013cc	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  013cf	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  013d3	7e 0c		 jle	 SHORT $LN10@DGAnsPerio@2
  013d5	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  013d8	81 78 04 98 3a
	00 00		 cmp	 DWORD PTR [eax+4], 15000 ; 00003a98H
  013df	7e 05		 jle	 SHORT $LN11@DGAnsPerio@2
$LN10@DGAnsPerio@2:

; 503  : 		return;

  013e1	e9 c1 01 00 00	 jmp	 $LN12@DGAnsPerio@2
$LN11@DGAnsPerio@2:

; 504  : 
; 505  : 	LPOBJ lpObj = &gObj[aRecv->iUserIndex];

  013e6	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  013e9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  013ec	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  013f2	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  013f8	89 4d f8	 mov	 DWORD PTR _lpObj$[ebp], ecx

; 506  : 	int iItemLeftUseTime = 0;

  013fb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iItemLeftUseTime$[ebp], 0

; 507  : 	int iResult = 0;

  01402	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iResult$[ebp], 0

; 508  : 	iResult = aRecv->btResult;

  01409	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0140c	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  01410	89 4d f0	 mov	 DWORD PTR _iResult$[ebp], ecx

; 509  : 
; 510  : 	if ( lpObj->DBNumber != aRecv->iUserGuid )

  01413	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01416	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01419	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  0141c	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0141f	74 05		 je	 SHORT $LN9@DGAnsPerio@2

; 511  : 		return;

  01421	e9 81 01 00 00	 jmp	 $LN12@DGAnsPerio@2
$LN9@DGAnsPerio@2:

; 512  : 
; 513  : 	if ( iResult == -1 )

  01426	83 7d f0 ff	 cmp	 DWORD PTR _iResult$[ebp], -1
  0142a	75 1e		 jne	 SHORT $LN8@DGAnsPerio@2

; 514  : 	{
; 515  : 		LogAddTD("[CashShop][PeriodItemSelect Ans] Failed - Item over 1 item ID : %s, Name : %s",
; 516  : 			lpObj->AccountID, lpObj->Name);

  0142c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0142f	83 c0 77	 add	 eax, 119		; 00000077H
  01432	50		 push	 eax
  01433	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01436	83 c1 6c	 add	 ecx, 108		; 0000006cH
  01439	51		 push	 ecx
  0143a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
  0143f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01445	83 c4 0c	 add	 esp, 12			; 0000000cH
  01448	eb 22		 jmp	 SHORT $LN7@DGAnsPerio@2
$LN8@DGAnsPerio@2:

; 517  : 	}
; 518  : 	else if ( iResult == -2 )

  0144a	83 7d f0 fe	 cmp	 DWORD PTR _iResult$[ebp], -2 ; fffffffeH
  0144e	75 1c		 jne	 SHORT $LN7@DGAnsPerio@2

; 519  : 	{
; 520  : 		LogAddTD("[CashShop][PeriodItemSelect Ans] Failed - Item usedtime is over ID : %s, Name : %s",
; 521  : 			lpObj->AccountID, lpObj->Name);

  01450	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01453	83 c0 77	 add	 eax, 119		; 00000077H
  01456	50		 push	 eax
  01457	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0145a	83 c1 6c	 add	 ecx, 108		; 0000006cH
  0145d	51		 push	 ecx
  0145e	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
  01463	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01469	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@DGAnsPerio@2:

; 522  : 	}
; 523  : 	
; 524  : 	int iCountItems = aRecv->btCountItems;

  0146c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0146f	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  01473	89 4d ec	 mov	 DWORD PTR _iCountItems$[ebp], ecx

; 525  : 
; 526  : 	for( int iOptionIndex = 0; iOptionIndex < iCountItems; iOptionIndex++ )

  01476	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$228301[ebp], 0
  0147d	eb 09		 jmp	 SHORT $LN5@DGAnsPerio@2
$LN4@DGAnsPerio@2:
  0147f	8b 45 e8	 mov	 eax, DWORD PTR _iOptionIndex$228301[ebp]
  01482	83 c0 01	 add	 eax, 1
  01485	89 45 e8	 mov	 DWORD PTR _iOptionIndex$228301[ebp], eax
$LN5@DGAnsPerio@2:
  01488	8b 45 e8	 mov	 eax, DWORD PTR _iOptionIndex$228301[ebp]
  0148b	3b 45 ec	 cmp	 eax, DWORD PTR _iCountItems$[ebp]
  0148e	0f 8d 13 01 00
	00		 jge	 $LN12@DGAnsPerio@2

; 527  : 	{
; 528  : 		iItemLeftUseTime = aRecv->m_ListItem[iOptionIndex].iItemPeriodLeftTime;

  01494	8b 45 e8	 mov	 eax, DWORD PTR _iOptionIndex$228301[ebp]
  01497	6b c0 14	 imul	 eax, 20			; 00000014H
  0149a	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0149d	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  014a1	89 55 f4	 mov	 DWORD PTR _iItemLeftUseTime$[ebp], edx

; 529  : 		if ( iItemLeftUseTime > 0 )

  014a4	83 7d f4 00	 cmp	 DWORD PTR _iItemLeftUseTime$[ebp], 0
  014a8	0f 8e 99 00 00
	00		 jle	 $LN2@DGAnsPerio@2

; 530  : 		{
; 531  : 			this->SetPeriodItemEffect(lpObj, aRecv->m_ListItem[iOptionIndex].iItemCode, aRecv->m_ListItem[iOptionIndex].btEffectType1, aRecv->m_ListItem[iOptionIndex].btEffectType2, iItemLeftUseTime);

  014ae	8b 45 f4	 mov	 eax, DWORD PTR _iItemLeftUseTime$[ebp]
  014b1	50		 push	 eax
  014b2	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  014b5	6b c9 14	 imul	 ecx, 20			; 00000014H
  014b8	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  014bb	0f b6 44 0a 1a	 movzx	 eax, BYTE PTR [edx+ecx+26]
  014c0	50		 push	 eax
  014c1	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  014c4	6b c9 14	 imul	 ecx, 20			; 00000014H
  014c7	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  014ca	0f b6 44 0a 19	 movzx	 eax, BYTE PTR [edx+ecx+25]
  014cf	50		 push	 eax
  014d0	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  014d3	6b c9 14	 imul	 ecx, 20			; 00000014H
  014d6	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  014d9	8b 44 0a 14	 mov	 eax, DWORD PTR [edx+ecx+20]
  014dd	50		 push	 eax
  014de	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  014e1	51		 push	 ecx
  014e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014e5	e8 00 00 00 00	 call	 ?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ; CCashItemPeriodSystem::SetPeriodItemEffect

; 532  : 			LogAddTD("[CashShop][PeriodItemList Ans] Success - ID : %s, Name : %s, ItemCode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, UseTime : %d",
; 533  : 			lpObj->AccountID, lpObj->Name, aRecv->m_ListItem[iOptionIndex].iItemCode, aRecv->m_ListItem[iOptionIndex].btOptionType, aRecv->m_ListItem[iOptionIndex].btEffectType1, aRecv->m_ListItem[iOptionIndex].btEffectType2, iItemLeftUseTime);

  014ea	8b 45 f4	 mov	 eax, DWORD PTR _iItemLeftUseTime$[ebp]
  014ed	50		 push	 eax
  014ee	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  014f1	6b c9 14	 imul	 ecx, 20			; 00000014H
  014f4	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  014f7	0f b6 44 0a 1a	 movzx	 eax, BYTE PTR [edx+ecx+26]
  014fc	50		 push	 eax
  014fd	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  01500	6b c9 14	 imul	 ecx, 20			; 00000014H
  01503	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01506	0f b6 44 0a 19	 movzx	 eax, BYTE PTR [edx+ecx+25]
  0150b	50		 push	 eax
  0150c	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  0150f	6b c9 14	 imul	 ecx, 20			; 00000014H
  01512	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01515	0f b6 44 0a 18	 movzx	 eax, BYTE PTR [edx+ecx+24]
  0151a	50		 push	 eax
  0151b	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  0151e	6b c9 14	 imul	 ecx, 20			; 00000014H
  01521	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01524	8b 44 0a 14	 mov	 eax, DWORD PTR [edx+ecx+20]
  01528	50		 push	 eax
  01529	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0152c	83 c1 77	 add	 ecx, 119		; 00000077H
  0152f	51		 push	 ecx
  01530	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01533	83 c2 6c	 add	 edx, 108		; 0000006cH
  01536	52		 push	 edx
  01537	68 00 00 00 00	 push	 OFFSET ??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@
  0153c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01542	83 c4 20	 add	 esp, 32			; 00000020H

; 534  : 		}
; 535  : 		else

  01545	eb 5b		 jmp	 SHORT $LN1@DGAnsPerio@2
$LN2@DGAnsPerio@2:

; 536  : 		{
; 537  : 			LogAddTD("[CashShop][PeriodItemList Ans] Fail - ID : %s, Name : %s, ItemCode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, UseTime : %d",
; 538  : 			lpObj->AccountID, lpObj->Name, aRecv->m_ListItem[iOptionIndex].iItemCode, aRecv->m_ListItem[iOptionIndex].btOptionType, aRecv->m_ListItem[iOptionIndex].btEffectType1, aRecv->m_ListItem[iOptionIndex].btEffectType2, iItemLeftUseTime);

  01547	8b 45 f4	 mov	 eax, DWORD PTR _iItemLeftUseTime$[ebp]
  0154a	50		 push	 eax
  0154b	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  0154e	6b c9 14	 imul	 ecx, 20			; 00000014H
  01551	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01554	0f b6 44 0a 1a	 movzx	 eax, BYTE PTR [edx+ecx+26]
  01559	50		 push	 eax
  0155a	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  0155d	6b c9 14	 imul	 ecx, 20			; 00000014H
  01560	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01563	0f b6 44 0a 19	 movzx	 eax, BYTE PTR [edx+ecx+25]
  01568	50		 push	 eax
  01569	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  0156c	6b c9 14	 imul	 ecx, 20			; 00000014H
  0156f	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01572	0f b6 44 0a 18	 movzx	 eax, BYTE PTR [edx+ecx+24]
  01577	50		 push	 eax
  01578	8b 4d e8	 mov	 ecx, DWORD PTR _iOptionIndex$228301[ebp]
  0157b	6b c9 14	 imul	 ecx, 20			; 00000014H
  0157e	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01581	8b 44 0a 14	 mov	 eax, DWORD PTR [edx+ecx+20]
  01585	50		 push	 eax
  01586	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01589	83 c1 77	 add	 ecx, 119		; 00000077H
  0158c	51		 push	 ecx
  0158d	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01590	83 c2 6c	 add	 edx, 108		; 0000006cH
  01593	52		 push	 edx
  01594	68 00 00 00 00	 push	 OFFSET ??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@
  01599	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0159f	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@DGAnsPerio@2:

; 539  : 		}
; 540  : 	}

  015a2	e9 d8 fe ff ff	 jmp	 $LN4@DGAnsPerio@2
$LN12@DGAnsPerio@2:

; 541  : }

  015a7	5f		 pop	 edi
  015a8	5e		 pop	 esi
  015a9	5b		 pop	 ebx
  015aa	8b e5		 mov	 esp, ebp
  015ac	5d		 pop	 ebp
  015ad	c2 04 00	 ret	 4
?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemList
_TEXT	ENDS
PUBLIC	?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry
; _this$ = ecx

; 544  : {

  015b0	55		 push	 ebp
  015b1	8b ec		 mov	 ebp, esp
  015b3	83 ec 44	 sub	 esp, 68			; 00000044H
  015b6	53		 push	 ebx
  015b7	56		 push	 esi
  015b8	57		 push	 edi
  015b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 545  : 	return;
; 546  : }

  015bc	5f		 pop	 edi
  015bd	5e		 pop	 esi
  015be	5b		 pop	 ebx
  015bf	8b e5		 mov	 esp, ebp
  015c1	5d		 pop	 ebp
  015c2	c2 04 00	 ret	 4
?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry
_TEXT	ENDS
PUBLIC	??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ ; `string'
PUBLIC	?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate
;	COMDAT ??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
CONST	SEGMENT
??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemUpdate Ans] - ID : %s, Name : %s, ItemCode '
	DB	': %d, Result %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
CONST	SEGMENT
??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemUpdate Ans] Remove Item Effect - ID : %s, N'
	DB	'ame : %s, ItemCode : %d, Result : %d', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv83 = -84						; size = 4
_lpItemInfo$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_iUserIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate
; _this$ = ecx

; 549  : {

  015d0	55		 push	 ebp
  015d1	8b ec		 mov	 ebp, esp
  015d3	83 ec 54	 sub	 esp, 84			; 00000054H
  015d6	53		 push	 ebx
  015d7	56		 push	 esi
  015d8	57		 push	 edi
  015d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 550  : 	int iUserIndex = aRecv->iUserIndex;

  015dc	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  015df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  015e2	89 4d f8	 mov	 DWORD PTR _iUserIndex$[ebp], ecx

; 551  : 
; 552  : 	if ( iUserIndex < 0 || iUserIndex > OBJMAX )

  015e5	83 7d f8 00	 cmp	 DWORD PTR _iUserIndex$[ebp], 0
  015e9	7c 09		 jl	 SHORT $LN8@DGAnsPerio@3
  015eb	81 7d f8 98 3a
	00 00		 cmp	 DWORD PTR _iUserIndex$[ebp], 15000 ; 00003a98H
  015f2	7e 05		 jle	 SHORT $LN9@DGAnsPerio@3
$LN8@DGAnsPerio@3:

; 553  : 		return;

  015f4	e9 e5 00 00 00	 jmp	 $LN10@DGAnsPerio@3
$LN9@DGAnsPerio@3:

; 554  : 
; 555  : 	LPOBJ lpObj = &gObj[iUserIndex];

  015f9	8b 45 f8	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  015fc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01602	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01608	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 556  : 	ITEMPERIOD_INFO* lpItemInfo = NULL;

  0160b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _lpItemInfo$[ebp], 0

; 557  : 
; 558  : 	if ( lpObj->m_iPeriodItemEffectIndex < 0 || lpObj->m_iPeriodItemEffectIndex >=MAX_ITEM_PERIOD_INFO )

  01612	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01615	83 b8 80 20 00
	00 00		 cmp	 DWORD PTR [eax+8320], 0
  0161c	7c 0f		 jl	 SHORT $LN6@DGAnsPerio@3
  0161e	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01621	81 b8 80 20 00
	00 dc 05 00 00	 cmp	 DWORD PTR [eax+8320], 1500 ; 000005dcH
  0162b	7c 05		 jl	 SHORT $LN7@DGAnsPerio@3
$LN6@DGAnsPerio@3:

; 559  : 		return;

  0162d	e9 ac 00 00 00	 jmp	 $LN10@DGAnsPerio@3
$LN7@DGAnsPerio@3:

; 560  : 
; 561  : 	lpItemInfo = &this->ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];

  01632	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01635	8b 88 80 20 00
	00		 mov	 ecx, DWORD PTR [eax+8320]
  0163b	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  01641	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01644	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  01648	89 45 f0	 mov	 DWORD PTR _lpItemInfo$[ebp], eax

; 562  : 
; 563  : 	if ( lpObj->m_iPeriodItemEffectIndex != lpItemInfo->wdUserIndex )

  0164b	8b 45 f0	 mov	 eax, DWORD PTR _lpItemInfo$[ebp]
  0164e	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  01652	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01655	39 8a 80 20 00
	00		 cmp	 DWORD PTR [edx+8320], ecx
  0165b	74 02		 je	 SHORT $LN5@DGAnsPerio@3

; 564  : 		return;

  0165d	eb 7f		 jmp	 SHORT $LN10@DGAnsPerio@3
$LN5@DGAnsPerio@3:

; 565  : 
; 566  : 	switch ( aRecv->btResult )

  0165f	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01662	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  01665	88 4d ac	 mov	 BYTE PTR tv83[ebp], cl
  01668	80 7d ac 03	 cmp	 BYTE PTR tv83[ebp], 3
  0166c	74 02		 je	 SHORT $LN2@DGAnsPerio@3
  0166e	eb 43		 jmp	 SHORT $LN3@DGAnsPerio@3
$LN2@DGAnsPerio@3:

; 567  : 	{
; 568  : 		case 3:
; 569  : 			if ( this->ClearPeriodItemEffect(lpObj, aRecv->iItemCode) == TRUE )

  01670	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01673	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01676	51		 push	 ecx
  01677	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0167a	52		 push	 edx
  0167b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0167e	e8 00 00 00 00	 call	 ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
  01683	83 f8 01	 cmp	 eax, 1
  01686	75 2b		 jne	 SHORT $LN3@DGAnsPerio@3

; 570  : 			{		
; 571  : 				LogAddTD("[CashShop][PeriodItemUpdate Ans] Remove Item Effect - ID : %s, Name : %s, ItemCode : %d, Result : %d", lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btResult);

  01688	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0168b	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  0168f	51		 push	 ecx
  01690	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  01693	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01696	50		 push	 eax
  01697	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0169a	83 c1 77	 add	 ecx, 119		; 00000077H
  0169d	51		 push	 ecx
  0169e	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  016a1	83 c2 6c	 add	 edx, 108		; 0000006cH
  016a4	52		 push	 edx
  016a5	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
  016aa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  016b0	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@DGAnsPerio@3:

; 572  : 			}
; 573  : 	}
; 574  : 
; 575  : 	LogAddTD("[CashShop][PeriodItemUpdate Ans] - ID : %s, Name : %s, ItemCode : %d, Result %d",
; 576  : 		lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btResult);

  016b3	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  016b6	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  016ba	51		 push	 ecx
  016bb	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  016be	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  016c1	50		 push	 eax
  016c2	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016c5	83 c1 77	 add	 ecx, 119		; 00000077H
  016c8	51		 push	 ecx
  016c9	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  016cc	83 c2 6c	 add	 edx, 108		; 0000006cH
  016cf	52		 push	 edx
  016d0	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
  016d5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  016db	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@DGAnsPerio@3:

; 577  : }

  016de	5f		 pop	 edi
  016df	5e		 pop	 esi
  016e0	5b		 pop	 ebx
  016e1	8b e5		 mov	 esp, ebp
  016e3	5d		 pop	 ebp
  016e4	c2 04 00	 ret	 4
?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CCashItemPeriodSystem::GDReqPeriodItemDelete
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpItemInfo$ = -36					; size = 4
_pMsg$ = -32						; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_pchCharacterName$ = 12					; size = 4
?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemDelete
; _this$ = ecx

; 580  : {

  016f0	55		 push	 ebp
  016f1	8b ec		 mov	 ebp, esp
  016f3	83 ec 64	 sub	 esp, 100		; 00000064H
  016f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  016fb	33 c5		 xor	 eax, ebp
  016fd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01700	53		 push	 ebx
  01701	56		 push	 esi
  01702	57		 push	 edi
  01703	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 581  : 	PMSG_REQ_PERIODITEM_DELETE pMsg;
; 582  : 	ITEMPERIOD_INFO* lpItemInfo = NULL;

  01706	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _lpItemInfo$[ebp], 0

; 583  : 	
; 584  : 	pMsg.iUserIndex = lpObj->m_Index;

  0170d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01710	8b 08		 mov	 ecx, DWORD PTR [eax]
  01712	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 585  : 	pMsg.iUserGuid = lpObj->DBNumber;

  01715	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01718	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0171b	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 586  : 	memcpy(pMsg.chCharacterName, pchCharacterName, sizeof(pMsg.chCharacterName));

  0171e	6a 0b		 push	 11			; 0000000bH
  01720	8b 45 0c	 mov	 eax, DWORD PTR _pchCharacterName$[ebp]
  01723	50		 push	 eax
  01724	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp+12]
  01727	51		 push	 ecx
  01728	e8 00 00 00 00	 call	 _memcpy
  0172d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 587  : 
; 588  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x09, sizeof(PMSG_REQ_PERIODITEM_DELETE));

  01730	6a 18		 push	 24			; 00000018H
  01732	6a 09		 push	 9
  01734	68 d0 00 00 00	 push	 208			; 000000d0H
  01739	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0173c	50		 push	 eax
  0173d	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01742	83 c4 10	 add	 esp, 16			; 00000010H

; 589  : 
; 590  : 	cDBSMng.Send((char*)&pMsg, sizeof(PMSG_REQ_PERIODITEM_DELETE));

  01745	6a 18		 push	 24			; 00000018H
  01747	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0174a	50		 push	 eax
  0174b	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01750	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 591  : }

  01755	5f		 pop	 edi
  01756	5e		 pop	 esi
  01757	5b		 pop	 ebx
  01758	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0175b	33 cd		 xor	 ecx, ebp
  0175d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01762	8b e5		 mov	 esp, ebp
  01764	5d		 pop	 ebp
  01765	c2 08 00	 ret	 8
?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemDelete
_TEXT	ENDS
PUBLIC	??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@ ; `string'
PUBLIC	?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemDelete
;	COMDAT ??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@
CONST	SEGMENT
??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@ DB '[Cas'
	DB	'hShop][PeriodItemDelete Ans] - ID : %s, Name : %s', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv76 = -76						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemDelete
; _this$ = ecx

; 594  : {

  01770	55		 push	 ebp
  01771	8b ec		 mov	 ebp, esp
  01773	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01776	53		 push	 ebx
  01777	56		 push	 esi
  01778	57		 push	 edi
  01779	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 595  : 	LPOBJ lpObj = NULL;

  0177c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lpObj$[ebp], 0

; 596  : 
; 597  : 	if ( aRecv->iUserIndex < 0 || aRecv->iUserIndex > OBJMAX )

  01783	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01786	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0178a	7c 0c		 jl	 SHORT $LN5@DGAnsPerio@4
  0178c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0178f	81 78 04 98 3a
	00 00		 cmp	 DWORD PTR [eax+4], 15000 ; 00003a98H
  01796	7e 02		 jle	 SHORT $LN6@DGAnsPerio@4
$LN5@DGAnsPerio@4:

; 598  : 		return;

  01798	eb 52		 jmp	 SHORT $LN7@DGAnsPerio@4
$LN6@DGAnsPerio@4:

; 599  : 
; 600  : 	lpObj = &gObj[aRecv->iUserGuid];

  0179a	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0179d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  017a0	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  017a6	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  017ac	89 4d f8	 mov	 DWORD PTR _lpObj$[ebp], ecx

; 601  : 
; 602  : 	if ( lpObj->DBNumber != aRecv->iUserGuid )

  017af	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017b2	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  017b5	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  017b8	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  017bb	74 02		 je	 SHORT $LN4@DGAnsPerio@4

; 603  : 		return;

  017bd	eb 2d		 jmp	 SHORT $LN7@DGAnsPerio@4
$LN4@DGAnsPerio@4:

; 604  : 
; 605  : 	switch ( aRecv->btResult )

  017bf	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  017c2	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  017c5	88 4d b4	 mov	 BYTE PTR tv76[ebp], cl
  017c8	80 7d b4 00	 cmp	 BYTE PTR tv76[ebp], 0
  017cc	74 02		 je	 SHORT $LN1@DGAnsPerio@4
  017ce	eb 1c		 jmp	 SHORT $LN7@DGAnsPerio@4
$LN1@DGAnsPerio@4:

; 606  : 	{
; 607  : 		case 0:
; 608  : 			LogAdd( "[CashShop][PeriodItemDelete Ans] - ID : %s, Name : %s", lpObj->AccountID, lpObj->Name );

  017d0	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017d3	83 c0 77	 add	 eax, 119		; 00000077H
  017d6	50		 push	 eax
  017d7	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  017da	83 c1 6c	 add	 ecx, 108		; 0000006cH
  017dd	51		 push	 ecx
  017de	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@
  017e3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  017e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@DGAnsPerio@4:

; 609  : 			break;
; 610  : 	}
; 611  : }

  017ec	5f		 pop	 edi
  017ed	5e		 pop	 esi
  017ee	5b		 pop	 ebx
  017ef	8b e5		 mov	 esp, ebp
  017f1	5d		 pop	 ebp
  017f2	c2 04 00	 ret	 4
?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemDelete
_TEXT	ENDS
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -12						; size = 5
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btResult$ = 12						; size = 1
?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
; _this$ = ecx

; 614  : {

  01800	55		 push	 ebp
  01801	8b ec		 mov	 ebp, esp
  01803	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01806	53		 push	 ebx
  01807	56		 push	 esi
  01808	57		 push	 edi
  01809	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 615  : 	PMSG_ANS_PERIODITEM_INSERT_RESULT pMsg;
; 616  : 	
; 617  : 	pMsg.btResult = btResult;

  0180c	8a 45 0c	 mov	 al, BYTE PTR _btResult$[ebp]
  0180f	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 618  : 
; 619  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x03, sizeof(PMSG_ANS_PERIODITEM_INSERT_RESULT));

  01812	6a 05		 push	 5
  01814	6a 03		 push	 3
  01816	68 d0 00 00 00	 push	 208			; 000000d0H
  0181b	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0181e	50		 push	 eax
  0181f	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01824	83 c4 10	 add	 esp, 16			; 00000010H

; 620  : 
; 621  : 	DataSend(lpObj->m_Index, (LPBYTE)&pMsg,	sizeof(PMSG_ANS_PERIODITEM_INSERT_RESULT));

  01827	6a 05		 push	 5
  01829	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0182c	50		 push	 eax
  0182d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01830	8b 11		 mov	 edx, DWORD PTR [ecx]
  01832	52		 push	 edx
  01833	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01838	83 c4 0c	 add	 esp, 12			; 0000000cH

; 622  : }

  0183b	5f		 pop	 edi
  0183c	5e		 pop	 esi
  0183d	5b		 pop	 ebx
  0183e	8b e5		 mov	 esp, ebp
  01840	5d		 pop	 ebp
  01841	c2 08 00	 ret	 8
?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
; Function compile flags: /Odtp /ZI
_iOptionIndex$228377 = -16				; size = 4
_iOptionType$ = -12					; size = 4
_iItemInfoIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
?SearchAndDeleteItemPeriodEffect@CCashItemPeriodSystem@@QAE_NPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::SearchAndDeleteItemPeriodEffect
; _this$ = ecx

; 625  : {

  01850	55		 push	 ebp
  01851	8b ec		 mov	 ebp, esp
  01853	83 ec 50	 sub	 esp, 80			; 00000050H
  01856	53		 push	 ebx
  01857	56		 push	 esi
  01858	57		 push	 edi
  01859	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 626  : 	int iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;

  0185c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0185f	8b 88 80 20 00
	00		 mov	 ecx, DWORD PTR [eax+8320]
  01865	89 4d f8	 mov	 DWORD PTR _iItemInfoIndex$[ebp], ecx

; 627  : 	int iOptionType = 0;

  01868	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iOptionType$[ebp], 0

; 628  : 
; 629  : 	iOptionType = g_ItemAddOption.SearchItemOptionType( iItemCode );

  0186f	8b 45 0c	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  01872	50		 push	 eax
  01873	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  01878	e8 00 00 00 00	 call	 ?SearchItemOptionType@CItemAddOption@@QAEHH@Z ; CItemAddOption::SearchItemOptionType
  0187d	89 45 f4	 mov	 DWORD PTR _iOptionType$[ebp], eax

; 630  : 
; 631  : 	if( iItemInfoIndex == -1 )

  01880	83 7d f8 ff	 cmp	 DWORD PTR _iItemInfoIndex$[ebp], -1
  01884	75 07		 jne	 SHORT $LN6@SearchAndD

; 632  : 		return true;

  01886	b0 01		 mov	 al, 1
  01888	e9 a6 00 00 00	 jmp	 $LN7@SearchAndD
$LN6@SearchAndD:

; 633  : 
; 634  : 	if( this->ItemPeriodInfo[iItemInfoIndex].iUserGuid != lpObj->DBNumber )

  0188d	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  01890	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  01896	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01899	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0189c	8b 44 01 0c	 mov	 eax, DWORD PTR [ecx+eax+12]
  018a0	3b 42 2c	 cmp	 eax, DWORD PTR [edx+44]
  018a3	74 07		 je	 SHORT $LN5@SearchAndD

; 635  : 		return false;

  018a5	32 c0		 xor	 al, al
  018a7	e9 87 00 00 00	 jmp	 $LN7@SearchAndD
$LN5@SearchAndD:

; 636  : 
; 637  : 	for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  018ac	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$228377[ebp], 0
  018b3	eb 09		 jmp	 SHORT $LN4@SearchAndD
$LN3@SearchAndD:
  018b5	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228377[ebp]
  018b8	83 c0 01	 add	 eax, 1
  018bb	89 45 f0	 mov	 DWORD PTR _iOptionIndex$228377[ebp], eax
$LN4@SearchAndD:
  018be	83 7d f0 0a	 cmp	 DWORD PTR _iOptionIndex$228377[ebp], 10 ; 0000000aH
  018c2	7d 6d		 jge	 SHORT $LN2@SearchAndD

; 638  : 	{
; 639  : 		if( this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse == true &&
; 640  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btOptionType == iOptionType )

  018c4	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  018c7	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  018cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018d0	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  018d4	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228377[ebp]
  018d7	c1 e0 04	 shl	 eax, 4
  018da	0f b6 4c 02 18	 movzx	 ecx, BYTE PTR [edx+eax+24]
  018df	83 f9 01	 cmp	 ecx, 1
  018e2	75 4b		 jne	 SHORT $LN1@SearchAndD
  018e4	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  018e7	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  018ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018f0	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  018f4	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228377[ebp]
  018f7	c1 e0 04	 shl	 eax, 4
  018fa	0f b6 4c 02 19	 movzx	 ecx, BYTE PTR [edx+eax+25]
  018ff	3b 4d f4	 cmp	 ecx, DWORD PTR _iOptionType$[ebp]
  01902	75 2b		 jne	 SHORT $LN1@SearchAndD

; 641  : 		{
; 642  : 			this->ClearPeriodItemEffect(lpObj,this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode);

  01904	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  01907	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0190d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01910	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  01914	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228377[ebp]
  01917	c1 e0 04	 shl	 eax, 4
  0191a	8b 4c 02 1c	 mov	 ecx, DWORD PTR [edx+eax+28]
  0191e	51		 push	 ecx
  0191f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01922	52		 push	 edx
  01923	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01926	e8 00 00 00 00	 call	 ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect

; 643  : 			return false;

  0192b	32 c0		 xor	 al, al
  0192d	eb 04		 jmp	 SHORT $LN7@SearchAndD
$LN1@SearchAndD:

; 644  : 		}
; 645  : 	}

  0192f	eb 84		 jmp	 SHORT $LN3@SearchAndD
$LN2@SearchAndD:

; 646  : 
; 647  : 	return true;

  01931	b0 01		 mov	 al, 1
$LN7@SearchAndD:

; 648  : }

  01933	5f		 pop	 edi
  01934	5e		 pop	 esi
  01935	5b		 pop	 ebx
  01936	8b e5		 mov	 esp, ebp
  01938	5d		 pop	 ebp
  01939	c2 08 00	 ret	 8
?SearchAndDeleteItemPeriodEffect@CCashItemPeriodSystem@@QAE_NPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::SearchAndDeleteItemPeriodEffect
_TEXT	ENDS
PUBLIC	?CheckHaveItemPeriodSealEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::CheckHaveItemPeriodSealEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv88 = -80						; size = 4
_iOptionIndex$228389 = -12				; size = 4
_iItemInfoIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?CheckHaveItemPeriodSealEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::CheckHaveItemPeriodSealEffect
; _this$ = ecx

; 651  : {

  01940	55		 push	 ebp
  01941	8b ec		 mov	 ebp, esp
  01943	83 ec 50	 sub	 esp, 80			; 00000050H
  01946	53		 push	 ebx
  01947	56		 push	 esi
  01948	57		 push	 edi
  01949	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  : 	int iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;

  0194c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0194f	8b 88 80 20 00
	00		 mov	 ecx, DWORD PTR [eax+8320]
  01955	89 4d f8	 mov	 DWORD PTR _iItemInfoIndex$[ebp], ecx

; 653  : 
; 654  : 	if( iItemInfoIndex == -1 )

  01958	83 7d f8 ff	 cmp	 DWORD PTR _iItemInfoIndex$[ebp], -1
  0195c	75 07		 jne	 SHORT $LN9@CheckHaveI

; 655  : 		return FALSE;

  0195e	33 c0		 xor	 eax, eax
  01960	e9 9f 00 00 00	 jmp	 $LN10@CheckHaveI
$LN9@CheckHaveI:

; 656  : 
; 657  : 	if( this->ItemPeriodInfo[iItemInfoIndex].btUsedInfo == NULL )

  01965	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  01968	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0196e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01971	0f b6 54 01 08	 movzx	 edx, BYTE PTR [ecx+eax+8]
  01976	85 d2		 test	 edx, edx
  01978	75 07		 jne	 SHORT $LN8@CheckHaveI

; 658  : 		return FALSE;

  0197a	33 c0		 xor	 eax, eax
  0197c	e9 83 00 00 00	 jmp	 $LN10@CheckHaveI
$LN8@CheckHaveI:

; 659  : 
; 660  : 	for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  01981	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$228389[ebp], 0
  01988	eb 09		 jmp	 SHORT $LN7@CheckHaveI
$LN6@CheckHaveI:
  0198a	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228389[ebp]
  0198d	83 c0 01	 add	 eax, 1
  01990	89 45 f4	 mov	 DWORD PTR _iOptionIndex$228389[ebp], eax
$LN7@CheckHaveI:
  01993	83 7d f4 0a	 cmp	 DWORD PTR _iOptionIndex$228389[ebp], 10 ; 0000000aH
  01997	7d 69		 jge	 SHORT $LN5@CheckHaveI

; 661  : 	{
; 662  : 		if( this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse == true )

  01999	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  0199c	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  019a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019a5	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  019a9	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228389[ebp]
  019ac	c1 e0 04	 shl	 eax, 4
  019af	0f b6 4c 02 18	 movzx	 ecx, BYTE PTR [edx+eax+24]
  019b4	83 f9 01	 cmp	 ecx, 1
  019b7	75 47		 jne	 SHORT $LN4@CheckHaveI

; 663  : 		{
; 664  : 			switch(	this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode )

  019b9	8b 45 f8	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  019bc	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  019c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019c5	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  019c9	8b 45 f4	 mov	 eax, DWORD PTR _iOptionIndex$228389[ebp]
  019cc	c1 e0 04	 shl	 eax, 4
  019cf	8b 4c 02 1c	 mov	 ecx, DWORD PTR [edx+eax+28]
  019d3	89 4d b0	 mov	 DWORD PTR tv88[ebp], ecx
  019d6	8b 55 b0	 mov	 edx, DWORD PTR tv88[ebp]
  019d9	81 ea 2b 1a 00
	00		 sub	 edx, 6699		; 00001a2bH
  019df	89 55 b0	 mov	 DWORD PTR tv88[ebp], edx
  019e2	83 7d b0 33	 cmp	 DWORD PTR tv88[ebp], 51	; 00000033H
  019e6	77 18		 ja	 SHORT $LN4@CheckHaveI
  019e8	8b 45 b0	 mov	 eax, DWORD PTR tv88[ebp]
  019eb	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN12@CheckHaveI[eax]
  019f2	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@CheckHaveI[ecx*4]
$LN1@CheckHaveI:

; 665  : 			{
; 666  : 				case ITEMGET(13,43)://Seal of Ascension
; 667  : 				case ITEMGET(13,44)://Seal of Wealth
; 668  : 				case ITEMGET(13,45)://Seal of Sustenance
; 669  : 				case ITEMGET(13,52)://Condor Flame lol!!!
; 670  : 				case ITEMGET(13,59)://Seal of Mobility
; 671  : 				case ITEMGET(13,62)://Seal of Healing
; 672  : 				case ITEMGET(13,63)://Seal of Divinity
; 673  : 				case ITEMGET(13,93)://Seal of Master Ascension
; 674  : 				case ITEMGET(13,94)://Seal of Master Wealth
; 675  : 					return TRUE;

  019f9	b8 01 00 00 00	 mov	 eax, 1
  019fe	eb 04		 jmp	 SHORT $LN10@CheckHaveI
$LN4@CheckHaveI:

; 676  : 			}
; 677  : 		}
; 678  : 	}

  01a00	eb 88		 jmp	 SHORT $LN6@CheckHaveI
$LN5@CheckHaveI:

; 679  : 
; 680  : 	return FALSE;

  01a02	33 c0		 xor	 eax, eax
$LN10@CheckHaveI:

; 681  : }

  01a04	5f		 pop	 edi
  01a05	5e		 pop	 esi
  01a06	5b		 pop	 ebx
  01a07	8b e5		 mov	 esp, ebp
  01a09	5d		 pop	 ebp
  01a0a	c2 04 00	 ret	 4
  01a0d	8d 49 00	 npad	 3
$LN13@CheckHaveI:
  01a10	00 00 00 00	 DD	 $LN1@CheckHaveI
  01a14	00 00 00 00	 DD	 $LN4@CheckHaveI
$LN12@CheckHaveI:
  01a18	00		 DB	 0
  01a19	00		 DB	 0
  01a1a	00		 DB	 0
  01a1b	01		 DB	 1
  01a1c	01		 DB	 1
  01a1d	01		 DB	 1
  01a1e	01		 DB	 1
  01a1f	01		 DB	 1
  01a20	01		 DB	 1
  01a21	00		 DB	 0
  01a22	01		 DB	 1
  01a23	01		 DB	 1
  01a24	01		 DB	 1
  01a25	01		 DB	 1
  01a26	01		 DB	 1
  01a27	01		 DB	 1
  01a28	00		 DB	 0
  01a29	01		 DB	 1
  01a2a	01		 DB	 1
  01a2b	00		 DB	 0
  01a2c	00		 DB	 0
  01a2d	01		 DB	 1
  01a2e	01		 DB	 1
  01a2f	01		 DB	 1
  01a30	01		 DB	 1
  01a31	01		 DB	 1
  01a32	01		 DB	 1
  01a33	01		 DB	 1
  01a34	01		 DB	 1
  01a35	01		 DB	 1
  01a36	01		 DB	 1
  01a37	01		 DB	 1
  01a38	01		 DB	 1
  01a39	01		 DB	 1
  01a3a	01		 DB	 1
  01a3b	01		 DB	 1
  01a3c	01		 DB	 1
  01a3d	01		 DB	 1
  01a3e	01		 DB	 1
  01a3f	01		 DB	 1
  01a40	01		 DB	 1
  01a41	01		 DB	 1
  01a42	01		 DB	 1
  01a43	01		 DB	 1
  01a44	01		 DB	 1
  01a45	01		 DB	 1
  01a46	01		 DB	 1
  01a47	01		 DB	 1
  01a48	01		 DB	 1
  01a49	01		 DB	 1
  01a4a	00		 DB	 0
  01a4b	00		 DB	 0
?CheckHaveItemPeriodSealEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::CheckHaveItemPeriodSealEffect
_TEXT	ENDS
PUBLIC	?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GetItemPeriodInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GetItemPeriodInfo
; _this$ = ecx

; 684  : {

  01a50	55		 push	 ebp
  01a51	8b ec		 mov	 ebp, esp
  01a53	83 ec 44	 sub	 esp, 68			; 00000044H
  01a56	53		 push	 ebx
  01a57	56		 push	 esi
  01a58	57		 push	 edi
  01a59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 685  : 	if( lpObj->m_iPeriodItemEffectIndex < 0 )

  01a5c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a5f	83 b8 80 20 00
	00 00		 cmp	 DWORD PTR [eax+8320], 0
  01a66	7d 04		 jge	 SHORT $LN2@GetItemPer

; 686  : 		return NULL;

  01a68	33 c0		 xor	 eax, eax
  01a6a	eb 35		 jmp	 SHORT $LN3@GetItemPer
$LN2@GetItemPer:

; 687  : 
; 688  : 	if( this->ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex].btUsedInfo == NULL )

  01a6c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a6f	8b 88 80 20 00
	00		 mov	 ecx, DWORD PTR [eax+8320]
  01a75	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  01a7b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a7e	0f b6 44 0a 08	 movzx	 eax, BYTE PTR [edx+ecx+8]
  01a83	85 c0		 test	 eax, eax
  01a85	75 04		 jne	 SHORT $LN1@GetItemPer

; 689  : 		return NULL;

  01a87	33 c0		 xor	 eax, eax
  01a89	eb 16		 jmp	 SHORT $LN3@GetItemPer
$LN1@GetItemPer:

; 690  : 
; 691  : 	return &this->ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];

  01a8b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a8e	8b 88 80 20 00
	00		 mov	 ecx, DWORD PTR [eax+8320]
  01a94	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  01a9a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a9d	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
$LN3@GetItemPer:

; 692  : }

  01aa1	5f		 pop	 edi
  01aa2	5e		 pop	 esi
  01aa3	5b		 pop	 ebx
  01aa4	8b e5		 mov	 esp, ebp
  01aa6	5d		 pop	 ebp
  01aa7	c2 04 00	 ret	 4
?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GetItemPeriodInfo
; Function compile flags: /Odtp /ZI
tv64 = -76						; size = 4
_iValue$ = -8						; size = 4
_this$ = -4						; size = 4
_iItemCode$ = 8						; size = 4
?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z PROC ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID
; _this$ = ecx

; 695  : {

  01ab0	55		 push	 ebp
  01ab1	8b ec		 mov	 ebp, esp
  01ab3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01ab6	53		 push	 ebx
  01ab7	56		 push	 esi
  01ab8	57		 push	 edi
  01ab9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 696  : 	int iValue = 0;

  01abc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 0

; 697  : 
; 698  : 	switch(iItemCode)

  01ac3	8b 45 08	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  01ac6	89 45 b4	 mov	 DWORD PTR tv64[ebp], eax
  01ac9	81 7d b4 48 1c
	00 00		 cmp	 DWORD PTR tv64[ebp], 7240 ; 00001c48H
  01ad0	7f 34		 jg	 SHORT $LN29@GetItemPer@2
  01ad2	81 7d b4 48 1c
	00 00		 cmp	 DWORD PTR tv64[ebp], 7240 ; 00001c48H
  01ad9	0f 84 96 00 00
	00		 je	 $LN18@GetItemPer@2
  01adf	8b 4d b4	 mov	 ecx, DWORD PTR tv64[ebp]
  01ae2	81 e9 2b 1a 00
	00		 sub	 ecx, 6699		; 00001a2bH
  01ae8	89 4d b4	 mov	 DWORD PTR tv64[ebp], ecx
  01aeb	83 7d b4 33	 cmp	 DWORD PTR tv64[ebp], 51	; 00000033H
  01aef	0f 87 22 01 00
	00		 ja	 $LN1@GetItemPer@2
  01af5	8b 55 b4	 mov	 edx, DWORD PTR tv64[ebp]
  01af8	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN30@GetItemPer@2[edx]
  01aff	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN32@GetItemPer@2[eax*4]
$LN29@GetItemPer@2:
  01b06	8b 4d b4	 mov	 ecx, DWORD PTR tv64[ebp]
  01b09	81 e9 49 1c 00
	00		 sub	 ecx, 7241		; 00001c49H
  01b0f	89 4d b4	 mov	 DWORD PTR tv64[ebp], ecx
  01b12	83 7d b4 19	 cmp	 DWORD PTR tv64[ebp], 25	; 00000019H
  01b16	0f 87 fb 00 00
	00		 ja	 $LN1@GetItemPer@2
  01b1c	8b 55 b4	 mov	 edx, DWORD PTR tv64[ebp]
  01b1f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN31@GetItemPer@2[edx]
  01b26	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN33@GetItemPer@2[eax*4]
$LN24@GetItemPer@2:

; 699  : 	{
; 700  : 	case ITEMGET(13,43):
; 701  : 		iValue = AT_CSHOP_SEAL_OF_ASCENSION;

  01b2d	c7 45 f8 28 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 40 ; 00000028H

; 702  : 		break;

  01b34	e9 e5 00 00 00	 jmp	 $LN25@GetItemPer@2
$LN23@GetItemPer@2:

; 703  : 	case ITEMGET(13,44):
; 704  : 		iValue = AT_CSHOP_SEAL_OF_WEALTH;

  01b39	c7 45 f8 29 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 41 ; 00000029H

; 705  : 		break;

  01b40	e9 d9 00 00 00	 jmp	 $LN25@GetItemPer@2
$LN22@GetItemPer@2:

; 706  : 	case ITEMGET(13,45):
; 707  : 		iValue = AT_CSHOP_SEAL_OF_SUSTENANCE;

  01b45	c7 45 f8 2a 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 42 ; 0000002aH

; 708  : 		break;

  01b4c	e9 cd 00 00 00	 jmp	 $LN25@GetItemPer@2
$LN21@GetItemPer@2:

; 709  : 	case ITEMGET(13,59):
; 710  : 		iValue = AT_CSHOP_SEAL_OF_MOBILITY;

  01b51	c7 45 f8 2b 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 43 ; 0000002bH

; 711  : 		break;

  01b58	e9 c1 00 00 00	 jmp	 $LN25@GetItemPer@2
$LN20@GetItemPer@2:

; 712  : 	case ITEMGET(13,62): //Season 3.5
; 713  : 		iValue = AT_CSHOP_SEAL_OF_HEALING;

  01b5d	c7 45 f8 57 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 87 ; 00000057H

; 714  : 		break;

  01b64	e9 b5 00 00 00	 jmp	 $LN25@GetItemPer@2
$LN19@GetItemPer@2:

; 715  : 	case ITEMGET(13,63): //Season 3.5
; 716  : 		iValue = AT_CSHOP_SEAL_OF_DIVINITY;

  01b69	c7 45 f8 58 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 88 ; 00000058H

; 717  : 		break;

  01b70	e9 a9 00 00 00	 jmp	 $LN25@GetItemPer@2
$LN18@GetItemPer@2:

; 718  : 	case ITEMGET(14,72):
; 719  : 		iValue = AT_CSHOP_SCROLL_OF_QUICKNESS;

  01b75	c7 45 f8 2c 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 44 ; 0000002cH

; 720  : 		break;

  01b7c	e9 9d 00 00 00	 jmp	 $LN25@GetItemPer@2
$LN17@GetItemPer@2:

; 721  : 	case ITEMGET(14,73):
; 722  : 		iValue = AT_CSHOP_SCROLL_OF_DEFENSE;

  01b81	c7 45 f8 2d 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 45 ; 0000002dH

; 723  : 		break;

  01b88	e9 91 00 00 00	 jmp	 $LN25@GetItemPer@2
$LN16@GetItemPer@2:

; 724  : 	case ITEMGET(14,74):
; 725  : 		iValue = AT_CSHOP_SCROLL_OF_WRATH;

  01b8d	c7 45 f8 2e 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 46 ; 0000002eH

; 726  : 		break;

  01b94	e9 85 00 00 00	 jmp	 $LN25@GetItemPer@2
$LN15@GetItemPer@2:

; 727  : 	case ITEMGET(14,75):
; 728  : 		iValue = AT_CSHOP_SCROLL_OF_WIZARDRY;

  01b99	c7 45 f8 2f 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 47 ; 0000002fH

; 729  : 		break;

  01ba0	eb 7c		 jmp	 SHORT $LN25@GetItemPer@2
$LN14@GetItemPer@2:

; 730  : 	case ITEMGET(14,76):
; 731  : 		iValue = AT_CSHOP_SCROLL_OF_HEALTH;

  01ba2	c7 45 f8 30 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 48 ; 00000030H

; 732  : 		break;

  01ba9	eb 73		 jmp	 SHORT $LN25@GetItemPer@2
$LN13@GetItemPer@2:

; 733  : 	case ITEMGET(14,77):
; 734  : 		iValue = AT_CSHOP_SCROLL_OF_MANA;

  01bab	c7 45 f8 31 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 49 ; 00000031H

; 735  : 		break;

  01bb2	eb 6a		 jmp	 SHORT $LN25@GetItemPer@2
$LN12@GetItemPer@2:

; 736  : 	case ITEMGET(14,97): //Season 3.5
; 737  : 		iValue = AT_CSHOP_SCROLL_OF_BATTLE;

  01bb4	c7 45 f8 59 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 89 ; 00000059H

; 738  : 		break;

  01bbb	eb 61		 jmp	 SHORT $LN25@GetItemPer@2
$LN11@GetItemPer@2:

; 739  : 	case ITEMGET(14,98): //Season 3.5
; 740  : 		iValue = AT_CSHOP_SCROLL_OF_STRENGTHENER;

  01bbd	c7 45 f8 5a 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 90 ; 0000005aH

; 741  : 		break;

  01bc4	eb 58		 jmp	 SHORT $LN25@GetItemPer@2
$LN10@GetItemPer@2:

; 742  : 	case ITEMGET(14,78):
; 743  : 		iValue = AT_CSHOP_LEAP_OF_STRENGTH;

  01bc6	c7 45 f8 32 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 50 ; 00000032H

; 744  : 		break;

  01bcd	eb 4f		 jmp	 SHORT $LN25@GetItemPer@2
$LN9@GetItemPer@2:

; 745  : 	case ITEMGET(14,79):
; 746  : 		iValue = AT_CSHOP_LEAP_OF_QUICKNESS;

  01bcf	c7 45 f8 33 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 51 ; 00000033H

; 747  : 		break;

  01bd6	eb 46		 jmp	 SHORT $LN25@GetItemPer@2
$LN8@GetItemPer@2:

; 748  : 	case ITEMGET(14,80):
; 749  : 		iValue = AT_CSHOP_LEAP_OF_HEALTH;

  01bd8	c7 45 f8 34 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 52 ; 00000034H

; 750  : 		break;

  01bdf	eb 3d		 jmp	 SHORT $LN25@GetItemPer@2
$LN7@GetItemPer@2:

; 751  : 	case ITEMGET(14,81):
; 752  : 		iValue = AT_CSHOP_LEAP_OF_ENERGY;

  01be1	c7 45 f8 35 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 53 ; 00000035H

; 753  : 		break;

  01be8	eb 34		 jmp	 SHORT $LN25@GetItemPer@2
$LN6@GetItemPer@2:

; 754  : 	case ITEMGET(14,82):
; 755  : 		iValue = AT_CSHOP_LEAP_OF_CONTROL;

  01bea	c7 45 f8 36 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 54 ; 00000036H

; 756  : 		break;

  01bf1	eb 2b		 jmp	 SHORT $LN25@GetItemPer@2
$LN5@GetItemPer@2:

; 757  : 	case ITEMGET(13,81): //Season 4.5
; 758  : 		iValue = AT_CSHOP_GUARDIAN_AMULET;

  01bf3	c7 45 f8 63 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 99 ; 00000063H

; 759  : 		break;

  01bfa	eb 22		 jmp	 SHORT $LN25@GetItemPer@2
$LN4@GetItemPer@2:

; 760  : 	case ITEMGET(13,82): //Season 4.5
; 761  : 		iValue = AT_CSHOP_PROTECT_AMULET;

  01bfc	c7 45 f8 64 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 100 ; 00000064H

; 762  : 		break;

  01c03	eb 19		 jmp	 SHORT $LN25@GetItemPer@2
$LN3@GetItemPer@2:

; 763  : 	case ITEMGET(13,93): //Season 4.5
; 764  : 		iValue = AT_CSHOP_MASTER_SEAL_OF_ASCENSION;

  01c05	c7 45 f8 65 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 101 ; 00000065H

; 765  : 		break;

  01c0c	eb 10		 jmp	 SHORT $LN25@GetItemPer@2
$LN2@GetItemPer@2:

; 766  : 	case ITEMGET(13,94): //Season 4.5
; 767  : 		iValue = AT_CSHOP_MASTER_SEAL_OF_WEALTH;

  01c0e	c7 45 f8 66 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 102 ; 00000066H

; 768  : 		break;

  01c15	eb 07		 jmp	 SHORT $LN25@GetItemPer@2
$LN1@GetItemPer@2:

; 769  : 	default:
; 770  : 		iValue = AT_NULL_BUFF_EFFECT;

  01c17	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 0
$LN25@GetItemPer@2:

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;

  01c1e	8b 45 f8	 mov	 eax, DWORD PTR _iValue$[ebp]

; 775  : }

  01c21	5f		 pop	 edi
  01c22	5e		 pop	 esi
  01c23	5b		 pop	 ebx
  01c24	8b e5		 mov	 esp, ebp
  01c26	5d		 pop	 ebp
  01c27	c2 04 00	 ret	 4
  01c2a	8b ff		 npad	 2
$LN32@GetItemPer@2:
  01c2c	00 00 00 00	 DD	 $LN24@GetItemPer@2
  01c30	00 00 00 00	 DD	 $LN23@GetItemPer@2
  01c34	00 00 00 00	 DD	 $LN22@GetItemPer@2
  01c38	00 00 00 00	 DD	 $LN21@GetItemPer@2
  01c3c	00 00 00 00	 DD	 $LN20@GetItemPer@2
  01c40	00 00 00 00	 DD	 $LN19@GetItemPer@2
  01c44	00 00 00 00	 DD	 $LN5@GetItemPer@2
  01c48	00 00 00 00	 DD	 $LN4@GetItemPer@2
  01c4c	00 00 00 00	 DD	 $LN3@GetItemPer@2
  01c50	00 00 00 00	 DD	 $LN2@GetItemPer@2
  01c54	00 00 00 00	 DD	 $LN1@GetItemPer@2
$LN30@GetItemPer@2:
  01c58	00		 DB	 0
  01c59	01		 DB	 1
  01c5a	02		 DB	 2
  01c5b	0a		 DB	 10			; 0000000aH
  01c5c	0a		 DB	 10			; 0000000aH
  01c5d	0a		 DB	 10			; 0000000aH
  01c5e	0a		 DB	 10			; 0000000aH
  01c5f	0a		 DB	 10			; 0000000aH
  01c60	0a		 DB	 10			; 0000000aH
  01c61	0a		 DB	 10			; 0000000aH
  01c62	0a		 DB	 10			; 0000000aH
  01c63	0a		 DB	 10			; 0000000aH
  01c64	0a		 DB	 10			; 0000000aH
  01c65	0a		 DB	 10			; 0000000aH
  01c66	0a		 DB	 10			; 0000000aH
  01c67	0a		 DB	 10			; 0000000aH
  01c68	03		 DB	 3
  01c69	0a		 DB	 10			; 0000000aH
  01c6a	0a		 DB	 10			; 0000000aH
  01c6b	04		 DB	 4
  01c6c	05		 DB	 5
  01c6d	0a		 DB	 10			; 0000000aH
  01c6e	0a		 DB	 10			; 0000000aH
  01c6f	0a		 DB	 10			; 0000000aH
  01c70	0a		 DB	 10			; 0000000aH
  01c71	0a		 DB	 10			; 0000000aH
  01c72	0a		 DB	 10			; 0000000aH
  01c73	0a		 DB	 10			; 0000000aH
  01c74	0a		 DB	 10			; 0000000aH
  01c75	0a		 DB	 10			; 0000000aH
  01c76	0a		 DB	 10			; 0000000aH
  01c77	0a		 DB	 10			; 0000000aH
  01c78	0a		 DB	 10			; 0000000aH
  01c79	0a		 DB	 10			; 0000000aH
  01c7a	0a		 DB	 10			; 0000000aH
  01c7b	0a		 DB	 10			; 0000000aH
  01c7c	0a		 DB	 10			; 0000000aH
  01c7d	0a		 DB	 10			; 0000000aH
  01c7e	06		 DB	 6
  01c7f	07		 DB	 7
  01c80	0a		 DB	 10			; 0000000aH
  01c81	0a		 DB	 10			; 0000000aH
  01c82	0a		 DB	 10			; 0000000aH
  01c83	0a		 DB	 10			; 0000000aH
  01c84	0a		 DB	 10			; 0000000aH
  01c85	0a		 DB	 10			; 0000000aH
  01c86	0a		 DB	 10			; 0000000aH
  01c87	0a		 DB	 10			; 0000000aH
  01c88	0a		 DB	 10			; 0000000aH
  01c89	0a		 DB	 10			; 0000000aH
  01c8a	08		 DB	 8
  01c8b	09		 DB	 9
$LN33@GetItemPer@2:
  01c8c	00 00 00 00	 DD	 $LN17@GetItemPer@2
  01c90	00 00 00 00	 DD	 $LN16@GetItemPer@2
  01c94	00 00 00 00	 DD	 $LN15@GetItemPer@2
  01c98	00 00 00 00	 DD	 $LN14@GetItemPer@2
  01c9c	00 00 00 00	 DD	 $LN13@GetItemPer@2
  01ca0	00 00 00 00	 DD	 $LN10@GetItemPer@2
  01ca4	00 00 00 00	 DD	 $LN9@GetItemPer@2
  01ca8	00 00 00 00	 DD	 $LN8@GetItemPer@2
  01cac	00 00 00 00	 DD	 $LN7@GetItemPer@2
  01cb0	00 00 00 00	 DD	 $LN6@GetItemPer@2
  01cb4	00 00 00 00	 DD	 $LN12@GetItemPer@2
  01cb8	00 00 00 00	 DD	 $LN11@GetItemPer@2
  01cbc	00 00 00 00	 DD	 $LN1@GetItemPer@2
$LN31@GetItemPer@2:
  01cc0	00		 DB	 0
  01cc1	01		 DB	 1
  01cc2	02		 DB	 2
  01cc3	03		 DB	 3
  01cc4	04		 DB	 4
  01cc5	05		 DB	 5
  01cc6	06		 DB	 6
  01cc7	07		 DB	 7
  01cc8	08		 DB	 8
  01cc9	09		 DB	 9
  01cca	0c		 DB	 12			; 0000000cH
  01ccb	0c		 DB	 12			; 0000000cH
  01ccc	0c		 DB	 12			; 0000000cH
  01ccd	0c		 DB	 12			; 0000000cH
  01cce	0c		 DB	 12			; 0000000cH
  01ccf	0c		 DB	 12			; 0000000cH
  01cd0	0c		 DB	 12			; 0000000cH
  01cd1	0c		 DB	 12			; 0000000cH
  01cd2	0c		 DB	 12			; 0000000cH
  01cd3	0c		 DB	 12			; 0000000cH
  01cd4	0c		 DB	 12			; 0000000cH
  01cd5	0c		 DB	 12			; 0000000cH
  01cd6	0c		 DB	 12			; 0000000cH
  01cd7	0c		 DB	 12			; 0000000cH
  01cd8	0a		 DB	 10			; 0000000aH
  01cd9	0b		 DB	 11			; 0000000bH
?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z ENDP ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID
_TEXT	ENDS
EXTRN	?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z:PROC ; CItemAddOption::SetItemEffect
EXTRN	?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z:PROC ; gObjApplyBuffEffectItemPeriod
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv74 = -84						; size = 4
_iUseTime$228447 = -16					; size = 4
_iEffectIndex$ = -12					; size = 4
_bResult$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
_iDuration$ = 16					; size = 4
?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CCashItemPeriodSystem::ApplyItemPeriodEffect
; _this$ = ecx

; 778  : {

  01ce0	55		 push	 ebp
  01ce1	8b ec		 mov	 ebp, esp
  01ce3	83 ec 54	 sub	 esp, 84			; 00000054H
  01ce6	53		 push	 ebx
  01ce7	56		 push	 esi
  01ce8	57		 push	 edi
  01ce9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 779  : 	BOOL bResult = FALSE;

  01cec	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 0

; 780  : 	int iEffectIndex = 0;

  01cf3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iEffectIndex$[ebp], 0

; 781  : 
; 782  : 	iEffectIndex = this->GetItemPeriodInfoEffectID(iItemCode);

  01cfa	8b 45 0c	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  01cfd	50		 push	 eax
  01cfe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d01	e8 00 00 00 00	 call	 ?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID
  01d06	89 45 f4	 mov	 DWORD PTR _iEffectIndex$[ebp], eax

; 783  : 
; 784  : 	if(iEffectIndex != 0)

  01d09	83 7d f4 00	 cmp	 DWORD PTR _iEffectIndex$[ebp], 0
  01d0d	74 47		 je	 SHORT $LN5@ApplyItemP

; 785  : 	{
; 786  : 		int iUseTime = iDuration * 60;

  01d0f	8b 45 10	 mov	 eax, DWORD PTR _iDuration$[ebp]
  01d12	6b c0 3c	 imul	 eax, 60			; 0000003cH
  01d15	89 45 f0	 mov	 DWORD PTR _iUseTime$228447[ebp], eax

; 787  : 
; 788  : 		bResult = gObjApplyBuffEffectItemPeriod(lpObj, iEffectIndex, iUseTime);

  01d18	8b 45 f0	 mov	 eax, DWORD PTR _iUseTime$228447[ebp]
  01d1b	50		 push	 eax
  01d1c	8b 4d f4	 mov	 ecx, DWORD PTR _iEffectIndex$[ebp]
  01d1f	51		 push	 ecx
  01d20	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01d23	52		 push	 edx
  01d24	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z ; gObjApplyBuffEffectItemPeriod
  01d29	83 c4 0c	 add	 esp, 12			; 0000000cH
  01d2c	0f b6 c0	 movzx	 eax, al
  01d2f	89 45 f8	 mov	 DWORD PTR _bResult$[ebp], eax

; 789  : 
; 790  : 		switch(iEffectIndex) //Leaps

  01d32	8b 45 f4	 mov	 eax, DWORD PTR _iEffectIndex$[ebp]
  01d35	89 45 ac	 mov	 DWORD PTR tv74[ebp], eax
  01d38	83 7d ac 32	 cmp	 DWORD PTR tv74[ebp], 50	; 00000032H
  01d3c	7c 16		 jl	 SHORT $LN3@ApplyItemP
  01d3e	83 7d ac 36	 cmp	 DWORD PTR tv74[ebp], 54	; 00000036H
  01d42	7e 02		 jle	 SHORT $LN2@ApplyItemP
  01d44	eb 0e		 jmp	 SHORT $LN3@ApplyItemP
$LN2@ApplyItemP:

; 791  : 		{
; 792  : 		case AT_CSHOP_LEAP_OF_STRENGTH:
; 793  : 		case AT_CSHOP_LEAP_OF_QUICKNESS:
; 794  : 		case AT_CSHOP_LEAP_OF_HEALTH:
; 795  : 		case AT_CSHOP_LEAP_OF_ENERGY:
; 796  : 		case AT_CSHOP_LEAP_OF_CONTROL:
; 797  : 			gObjCalCharacter(lpObj->m_Index);

  01d46	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01d49	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d4b	51		 push	 ecx
  01d4c	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  01d51	83 c4 04	 add	 esp, 4
$LN3@ApplyItemP:

; 798  : 			break;
; 799  : 		}
; 800  : 	}
; 801  : 	else

  01d54	eb 26		 jmp	 SHORT $LN1@ApplyItemP
$LN5@ApplyItemP:

; 802  : 	{
; 803  : 		bResult = g_ItemAddOption.SetItemEffect(lpObj, iItemCode, iDuration) == TRUE; //!( g_ItemAddOption.SetItemEffect(lpObj, iItemCode, iItemTime) - 1 );

  01d56	8b 45 10	 mov	 eax, DWORD PTR _iDuration$[ebp]
  01d59	50		 push	 eax
  01d5a	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemCode$[ebp]
  01d5d	51		 push	 ecx
  01d5e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01d61	52		 push	 edx
  01d62	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  01d67	e8 00 00 00 00	 call	 ?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::SetItemEffect
  01d6c	0f b6 c0	 movzx	 eax, al
  01d6f	83 e8 01	 sub	 eax, 1
  01d72	f7 d8		 neg	 eax
  01d74	1b c0		 sbb	 eax, eax
  01d76	83 c0 01	 add	 eax, 1
  01d79	89 45 f8	 mov	 DWORD PTR _bResult$[ebp], eax
$LN1@ApplyItemP:

; 804  : 	}
; 805  : 
; 806  : 	return bResult;

  01d7c	8b 45 f8	 mov	 eax, DWORD PTR _bResult$[ebp]

; 807  : }

  01d7f	5f		 pop	 edi
  01d80	5e		 pop	 esi
  01d81	5b		 pop	 ebx
  01d82	8b e5		 mov	 esp, ebp
  01d84	5d		 pop	 ebp
  01d85	c2 0c 00	 ret	 12			; 0000000cH
?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CCashItemPeriodSystem::ApplyItemPeriodEffect
_TEXT	ENDS
PUBLIC	?CheckBuffUser@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::CheckBuffUser
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv89 = -84						; size = 4
tv88 = -84						; size = 4
_iOptionIndex$228463 = -16				; size = 4
_iItemInfoIndex$ = -12					; size = 4
_Result$ = -5						; size = 1
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_ItemBuffType$ = 12					; size = 4
?CheckBuffUser@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::CheckBuffUser
; _this$ = ecx

; 811  : {

  01d90	55		 push	 ebp
  01d91	8b ec		 mov	 ebp, esp
  01d93	83 ec 54	 sub	 esp, 84			; 00000054H
  01d96	53		 push	 ebx
  01d97	56		 push	 esi
  01d98	57		 push	 edi
  01d99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 812  : 	bool Result = FALSE;

  01d9c	c6 45 fb 00	 mov	 BYTE PTR _Result$[ebp], 0

; 813  : 
; 814  : 	int iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;

  01da0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01da3	8b 88 80 20 00
	00		 mov	 ecx, DWORD PTR [eax+8320]
  01da9	89 4d f4	 mov	 DWORD PTR _iItemInfoIndex$[ebp], ecx

; 815  : 
; 816  : 	if( iItemInfoIndex == -1 )

  01dac	83 7d f4 ff	 cmp	 DWORD PTR _iItemInfoIndex$[ebp], -1
  01db0	75 07		 jne	 SHORT $LN12@CheckBuffU

; 817  : 		return FALSE;

  01db2	33 c0		 xor	 eax, eax
  01db4	e9 cf 00 00 00	 jmp	 $LN13@CheckBuffU
$LN12@CheckBuffU:

; 818  : 
; 819  : 	if( this->ItemPeriodInfo[iItemInfoIndex].btUsedInfo == NULL )

  01db9	8b 45 f4	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  01dbc	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  01dc2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dc5	0f b6 54 01 08	 movzx	 edx, BYTE PTR [ecx+eax+8]
  01dca	85 d2		 test	 edx, edx
  01dcc	75 07		 jne	 SHORT $LN11@CheckBuffU

; 820  : 		return FALSE;

  01dce	33 c0		 xor	 eax, eax
  01dd0	e9 b3 00 00 00	 jmp	 $LN13@CheckBuffU
$LN11@CheckBuffU:

; 821  : 
; 822  : 	for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  01dd5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iOptionIndex$228463[ebp], 0
  01ddc	eb 09		 jmp	 SHORT $LN10@CheckBuffU
$LN9@CheckBuffU:
  01dde	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228463[ebp]
  01de1	83 c0 01	 add	 eax, 1
  01de4	89 45 f0	 mov	 DWORD PTR _iOptionIndex$228463[ebp], eax
$LN10@CheckBuffU:
  01de7	83 7d f0 0a	 cmp	 DWORD PTR _iOptionIndex$228463[ebp], 10 ; 0000000aH
  01deb	0f 8d 95 00 00
	00		 jge	 $LN8@CheckBuffU

; 823  : 	{
; 824  : 		if( this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse == true )

  01df1	8b 45 f4	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  01df4	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  01dfa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dfd	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  01e01	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228463[ebp]
  01e04	c1 e0 04	 shl	 eax, 4
  01e07	0f b6 4c 02 18	 movzx	 ecx, BYTE PTR [edx+eax+24]
  01e0c	83 f9 01	 cmp	 ecx, 1
  01e0f	75 70		 jne	 SHORT $LN7@CheckBuffU

; 825  : 		{
; 826  : 			//if(ItemBuffType == this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode)
; 827  : 			//{
; 828  : 			//	return TRUE;
; 829  : 			//}
; 830  : #ifdef DEBUG_CODE2
; 831  : 			LogAddC(2,"%d %d", ItemBuffType, this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode);
; 832  : #endif
; 833  : 			//6700
; 834  : 			//6699
; 835  : 			//6750
; 836  : 			//6749
; 837  : 			//6701
; 838  : 			//6718
; 839  : 
; 840  : 			switch(	this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode )

  01e11	8b 45 f4	 mov	 eax, DWORD PTR _iItemInfoIndex$[ebp]
  01e14	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  01e1a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e1d	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  01e21	8b 45 f0	 mov	 eax, DWORD PTR _iOptionIndex$228463[ebp]
  01e24	c1 e0 04	 shl	 eax, 4
  01e27	8b 4c 02 1c	 mov	 ecx, DWORD PTR [edx+eax+28]
  01e2b	89 4d ac	 mov	 DWORD PTR tv88[ebp], ecx
  01e2e	8b 55 ac	 mov	 edx, DWORD PTR tv88[ebp]
  01e31	81 ea 2b 1a 00
	00		 sub	 edx, 6699		; 00001a2bH
  01e37	89 55 ac	 mov	 DWORD PTR tv88[ebp], edx
  01e3a	83 7d ac 33	 cmp	 DWORD PTR tv88[ebp], 51	; 00000033H
  01e3e	77 41		 ja	 SHORT $LN7@CheckBuffU
  01e40	8b 45 ac	 mov	 eax, DWORD PTR tv88[ebp]
  01e43	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN15@CheckBuffU[eax]
  01e4a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN17@CheckBuffU[ecx*4]
$LN4@CheckBuffU:

; 841  : 			{
; 842  : 				case ITEMGET(13,43)://Seal of Ascension
; 843  : 				case ITEMGET(13,44)://Seal of Wealth
; 844  : 				case ITEMGET(13,45)://Seal of Sustenance
; 845  : 				case ITEMGET(13,52)://Condor Flame lol!!!
; 846  : 				case ITEMGET(13,59)://Seal of Mobility
; 847  : 				case ITEMGET(13,62)://Seal of Healing
; 848  : 				case ITEMGET(13,63)://Seal of Divinity
; 849  : 				case ITEMGET(13,93)://Seal of Master Ascension
; 850  : 				case ITEMGET(13,94)://Seal of Master Wealth
; 851  : 				{
; 852  : 					switch(ItemBuffType)

  01e51	8b 45 0c	 mov	 eax, DWORD PTR _ItemBuffType$[ebp]
  01e54	89 45 ac	 mov	 DWORD PTR tv89[ebp], eax
  01e57	8b 4d ac	 mov	 ecx, DWORD PTR tv89[ebp]
  01e5a	81 e9 2b 1a 00
	00		 sub	 ecx, 6699		; 00001a2bH
  01e60	89 4d ac	 mov	 DWORD PTR tv89[ebp], ecx
  01e63	83 7d ac 33	 cmp	 DWORD PTR tv89[ebp], 51	; 00000033H
  01e67	77 18		 ja	 SHORT $LN7@CheckBuffU
  01e69	8b 55 ac	 mov	 edx, DWORD PTR tv89[ebp]
  01e6c	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN16@CheckBuffU[edx]
  01e73	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN18@CheckBuffU[eax*4]
$LN1@CheckBuffU:

; 853  : 					{
; 854  : 						case ITEMGET(13,43)://Seal of Ascension
; 855  : 						case ITEMGET(13,44)://Seal of Wealth
; 856  : 						case ITEMGET(13,45)://Seal of Sustenance
; 857  : 						case ITEMGET(13,52)://Condor Flame lol!!!
; 858  : 						case ITEMGET(13,59)://Seal of Mobility
; 859  : 						case ITEMGET(13,62)://Seal of Healing
; 860  : 						case ITEMGET(13,63)://Seal of Divinity
; 861  : 						case ITEMGET(13,93)://Seal of Master Ascension
; 862  : 						case ITEMGET(13,94)://Seal of Master Wealth
; 863  : 						{
; 864  : 
; 865  : 							return true;

  01e7a	b8 01 00 00 00	 mov	 eax, 1
  01e7f	eb 07		 jmp	 SHORT $LN13@CheckBuffU
$LN7@CheckBuffU:

; 866  : 						}
; 867  : 					}
; 868  : 				}
; 869  : 			}
; 870  : 		}
; 871  : 	}

  01e81	e9 58 ff ff ff	 jmp	 $LN9@CheckBuffU
$LN8@CheckBuffU:

; 872  : 
; 873  : 	return FALSE;

  01e86	33 c0		 xor	 eax, eax
$LN13@CheckBuffU:

; 874  : }

  01e88	5f		 pop	 edi
  01e89	5e		 pop	 esi
  01e8a	5b		 pop	 ebx
  01e8b	8b e5		 mov	 esp, ebp
  01e8d	5d		 pop	 ebp
  01e8e	c2 08 00	 ret	 8
  01e91	8d 49 00	 npad	 3
$LN17@CheckBuffU:
  01e94	00 00 00 00	 DD	 $LN4@CheckBuffU
  01e98	00 00 00 00	 DD	 $LN7@CheckBuffU
$LN15@CheckBuffU:
  01e9c	00		 DB	 0
  01e9d	00		 DB	 0
  01e9e	00		 DB	 0
  01e9f	01		 DB	 1
  01ea0	01		 DB	 1
  01ea1	01		 DB	 1
  01ea2	01		 DB	 1
  01ea3	01		 DB	 1
  01ea4	01		 DB	 1
  01ea5	00		 DB	 0
  01ea6	01		 DB	 1
  01ea7	01		 DB	 1
  01ea8	01		 DB	 1
  01ea9	01		 DB	 1
  01eaa	01		 DB	 1
  01eab	01		 DB	 1
  01eac	00		 DB	 0
  01ead	01		 DB	 1
  01eae	01		 DB	 1
  01eaf	00		 DB	 0
  01eb0	00		 DB	 0
  01eb1	01		 DB	 1
  01eb2	01		 DB	 1
  01eb3	01		 DB	 1
  01eb4	01		 DB	 1
  01eb5	01		 DB	 1
  01eb6	01		 DB	 1
  01eb7	01		 DB	 1
  01eb8	01		 DB	 1
  01eb9	01		 DB	 1
  01eba	01		 DB	 1
  01ebb	01		 DB	 1
  01ebc	01		 DB	 1
  01ebd	01		 DB	 1
  01ebe	01		 DB	 1
  01ebf	01		 DB	 1
  01ec0	01		 DB	 1
  01ec1	01		 DB	 1
  01ec2	01		 DB	 1
  01ec3	01		 DB	 1
  01ec4	01		 DB	 1
  01ec5	01		 DB	 1
  01ec6	01		 DB	 1
  01ec7	01		 DB	 1
  01ec8	01		 DB	 1
  01ec9	01		 DB	 1
  01eca	01		 DB	 1
  01ecb	01		 DB	 1
  01ecc	01		 DB	 1
  01ecd	01		 DB	 1
  01ece	00		 DB	 0
  01ecf	00		 DB	 0
$LN18@CheckBuffU:
  01ed0	00 00 00 00	 DD	 $LN1@CheckBuffU
  01ed4	00 00 00 00	 DD	 $LN7@CheckBuffU
$LN16@CheckBuffU:
  01ed8	00		 DB	 0
  01ed9	00		 DB	 0
  01eda	00		 DB	 0
  01edb	01		 DB	 1
  01edc	01		 DB	 1
  01edd	01		 DB	 1
  01ede	01		 DB	 1
  01edf	01		 DB	 1
  01ee0	01		 DB	 1
  01ee1	00		 DB	 0
  01ee2	01		 DB	 1
  01ee3	01		 DB	 1
  01ee4	01		 DB	 1
  01ee5	01		 DB	 1
  01ee6	01		 DB	 1
  01ee7	01		 DB	 1
  01ee8	00		 DB	 0
  01ee9	01		 DB	 1
  01eea	01		 DB	 1
  01eeb	00		 DB	 0
  01eec	00		 DB	 0
  01eed	01		 DB	 1
  01eee	01		 DB	 1
  01eef	01		 DB	 1
  01ef0	01		 DB	 1
  01ef1	01		 DB	 1
  01ef2	01		 DB	 1
  01ef3	01		 DB	 1
  01ef4	01		 DB	 1
  01ef5	01		 DB	 1
  01ef6	01		 DB	 1
  01ef7	01		 DB	 1
  01ef8	01		 DB	 1
  01ef9	01		 DB	 1
  01efa	01		 DB	 1
  01efb	01		 DB	 1
  01efc	01		 DB	 1
  01efd	01		 DB	 1
  01efe	01		 DB	 1
  01eff	01		 DB	 1
  01f00	01		 DB	 1
  01f01	01		 DB	 1
  01f02	01		 DB	 1
  01f03	01		 DB	 1
  01f04	01		 DB	 1
  01f05	01		 DB	 1
  01f06	01		 DB	 1
  01f07	01		 DB	 1
  01f08	01		 DB	 1
  01f09	01		 DB	 1
  01f0a	00		 DB	 0
  01f0b	00		 DB	 0
?CheckBuffUser@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::CheckBuffUser
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTimeSpan@ATL@@QAE@XZ PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 29   : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??0CTimeSpan@ATL@@QAE@XZ ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CTimeSpan@ATL@@QAE@JHHH@Z
_TEXT	SEGMENT
tv180 = -80						; size = 4
tv178 = -76						; size = 4
tv176 = -72						; size = 4
_this$ = -4						; size = 4
_lDays$ = 8						; size = 4
_nHours$ = 12						; size = 4
_nMins$ = 16						; size = 4
_nSecs$ = 20						; size = 4
??0CTimeSpan@ATL@@QAE@JHHH@Z PROC			; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  0000c	8b 45 14	 mov	 eax, DWORD PTR _nSecs$[ebp]
  0000f	99		 cdq
  00010	8b f0		 mov	 esi, eax
  00012	8b fa		 mov	 edi, edx
  00014	8b 45 10	 mov	 eax, DWORD PTR _nMins$[ebp]
  00017	99		 cdq
  00018	8b d8		 mov	 ebx, eax
  0001a	8b c2		 mov	 eax, edx
  0001c	89 45 b8	 mov	 DWORD PTR tv176[ebp], eax
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _nHours$[ebp]
  00022	99		 cdq
  00023	8b ca		 mov	 ecx, edx
  00025	89 45 b4	 mov	 DWORD PTR tv178[ebp], eax
  00028	8b 45 08	 mov	 eax, DWORD PTR _lDays$[ebp]
  0002b	99		 cdq
  0002c	6a 00		 push	 0
  0002e	6a 18		 push	 24			; 00000018H
  00030	52		 push	 edx
  00031	50		 push	 eax
  00032	89 4d b0	 mov	 DWORD PTR tv180[ebp], ecx
  00035	e8 00 00 00 00	 call	 __allmul
  0003a	8b 4d b4	 mov	 ecx, DWORD PTR tv178[ebp]
  0003d	03 c8		 add	 ecx, eax
  0003f	8b 45 b0	 mov	 eax, DWORD PTR tv180[ebp]
  00042	13 c2		 adc	 eax, edx
  00044	6a 00		 push	 0
  00046	6a 3c		 push	 60			; 0000003cH
  00048	50		 push	 eax
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 __allmul
  0004f	03 d8		 add	 ebx, eax
  00051	8b 45 b8	 mov	 eax, DWORD PTR tv176[ebp]
  00054	13 c2		 adc	 eax, edx
  00056	6a 00		 push	 0
  00058	6a 3c		 push	 60			; 0000003cH
  0005a	50		 push	 eax
  0005b	53		 push	 ebx
  0005c	e8 00 00 00 00	 call	 __allmul
  00061	03 f0		 add	 esi, eax
  00063	13 fa		 adc	 edi, edx
  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	89 30		 mov	 DWORD PTR [eax], esi
  0006a	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 43   : }

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 10 00	 ret	 16			; 00000010H
??0CTimeSpan@ATL@@QAE@JHHH@Z ENDP			; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
EXTRN	__alldiv:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTotalMinutes, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	return( m_timeSpan/60 );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	6a 00		 push	 0
  00011	6a 3c		 push	 60			; 0000003cH
  00013	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00016	51		 push	 ecx
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	52		 push	 edx
  0001a	e8 00 00 00 00	 call	 __alldiv

; 63   : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTotalMinutes
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 	return( CTime( ::_time64( NULL ) ) );

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 __time64
  00010	83 c4 04	 add	 esp, 4
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 144  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTime@ATL@@QAE@XZ PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 167  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??0CTime@ATL@@QAE@XZ ENDP				; ATL::CTime::CTime
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 172  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	__$ArrayPad$
EXTRN	__mktime64:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
tv194 = -136						; size = 4
tv137 = -136						; size = 4
tv129 = -136						; size = 4
tv89 = -136						; size = 4
tv81 = -136						; size = 4
tv73 = -136						; size = 4
_atm$ = -68						; size = 36
___atl_condVal$86718 = -32				; size = 4
___atl_condVal$86705 = -28				; size = 4
___atl_condVal$86692 = -24				; size = 4
___atl_condVal$86679 = -20				; size = 4
___atl_condVal$86666 = -16				; size = 4
___atl_condVal$86653 = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN67@CTime:

; 183  : #pragma warning (push)
; 184  : #pragma warning (disable: 4127)  // conditional expression constant
; 185  : 
; 186  : 	ATLENSURE( nYear >= 1900 );

  00019	33 c0		 xor	 eax, eax
  0001b	81 7d 08 6c 07
	00 00		 cmp	 DWORD PTR _nYear$[ebp], 1900 ; 0000076cH
  00022	0f 9d c0	 setge	 al
  00025	89 45 f4	 mov	 DWORD PTR ___atl_condVal$86653[ebp], eax
$LN60@CTime:
  00028	33 c0		 xor	 eax, eax
  0002a	75 fc		 jne	 SHORT $LN60@CTime
  0002c	33 c0		 xor	 eax, eax
  0002e	75 f8		 jne	 SHORT $LN60@CTime
  00030	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$86653[ebp], 0
  00034	75 0a		 jne	 SHORT $LN66@CTime
  00036	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0003b	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN66@CTime:
  00040	33 c0		 xor	 eax, eax
  00042	75 d5		 jne	 SHORT $LN67@CTime
$LN57@CTime:

; 187  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00044	83 7d 0c 01	 cmp	 DWORD PTR _nMonth$[ebp], 1
  00048	7c 12		 jl	 SHORT $LN70@CTime
  0004a	83 7d 0c 0c	 cmp	 DWORD PTR _nMonth$[ebp], 12 ; 0000000cH
  0004e	7f 0c		 jg	 SHORT $LN70@CTime
  00050	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv73[ebp], 1
  0005a	eb 0a		 jmp	 SHORT $LN71@CTime
$LN70@CTime:
  0005c	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv73[ebp], 0
$LN71@CTime:
  00066	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv73[ebp]
  0006c	89 45 f0	 mov	 DWORD PTR ___atl_condVal$86666[ebp], eax
$LN50@CTime:
  0006f	33 c0		 xor	 eax, eax
  00071	75 fc		 jne	 SHORT $LN50@CTime
  00073	33 c0		 xor	 eax, eax
  00075	75 f8		 jne	 SHORT $LN50@CTime
  00077	83 7d f0 00	 cmp	 DWORD PTR ___atl_condVal$86666[ebp], 0
  0007b	75 0a		 jne	 SHORT $LN56@CTime
  0007d	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00082	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN56@CTime:
  00087	33 c0		 xor	 eax, eax
  00089	75 b9		 jne	 SHORT $LN57@CTime
$LN47@CTime:

; 188  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0008b	83 7d 10 01	 cmp	 DWORD PTR _nDay$[ebp], 1
  0008f	7c 12		 jl	 SHORT $LN72@CTime
  00091	83 7d 10 1f	 cmp	 DWORD PTR _nDay$[ebp], 31 ; 0000001fH
  00095	7f 0c		 jg	 SHORT $LN72@CTime
  00097	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv81[ebp], 1
  000a1	eb 0a		 jmp	 SHORT $LN73@CTime
$LN72@CTime:
  000a3	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN73@CTime:
  000ad	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  000b3	89 45 ec	 mov	 DWORD PTR ___atl_condVal$86679[ebp], eax
$LN40@CTime:
  000b6	33 c0		 xor	 eax, eax
  000b8	75 fc		 jne	 SHORT $LN40@CTime
  000ba	33 c0		 xor	 eax, eax
  000bc	75 f8		 jne	 SHORT $LN40@CTime
  000be	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$86679[ebp], 0
  000c2	75 0a		 jne	 SHORT $LN46@CTime
  000c4	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000c9	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN46@CTime:
  000ce	33 c0		 xor	 eax, eax
  000d0	75 b9		 jne	 SHORT $LN47@CTime
$LN37@CTime:

; 189  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  000d2	83 7d 14 00	 cmp	 DWORD PTR _nHour$[ebp], 0
  000d6	7c 12		 jl	 SHORT $LN74@CTime
  000d8	83 7d 14 17	 cmp	 DWORD PTR _nHour$[ebp], 23 ; 00000017H
  000dc	7f 0c		 jg	 SHORT $LN74@CTime
  000de	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv89[ebp], 1
  000e8	eb 0a		 jmp	 SHORT $LN75@CTime
$LN74@CTime:
  000ea	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN75@CTime:
  000f4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  000fa	89 45 e8	 mov	 DWORD PTR ___atl_condVal$86692[ebp], eax
$LN30@CTime:
  000fd	33 c0		 xor	 eax, eax
  000ff	75 fc		 jne	 SHORT $LN30@CTime
  00101	33 c0		 xor	 eax, eax
  00103	75 f8		 jne	 SHORT $LN30@CTime
  00105	83 7d e8 00	 cmp	 DWORD PTR ___atl_condVal$86692[ebp], 0
  00109	75 0a		 jne	 SHORT $LN36@CTime
  0010b	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00110	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN36@CTime:
  00115	33 c0		 xor	 eax, eax
  00117	75 b9		 jne	 SHORT $LN37@CTime
$LN27@CTime:

; 190  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  00119	83 7d 18 00	 cmp	 DWORD PTR _nMin$[ebp], 0
  0011d	7c 12		 jl	 SHORT $LN76@CTime
  0011f	83 7d 18 3b	 cmp	 DWORD PTR _nMin$[ebp], 59 ; 0000003bH
  00123	7f 0c		 jg	 SHORT $LN76@CTime
  00125	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv129[ebp], 1
  0012f	eb 0a		 jmp	 SHORT $LN77@CTime
$LN76@CTime:
  00131	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN77@CTime:
  0013b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv129[ebp]
  00141	89 45 e4	 mov	 DWORD PTR ___atl_condVal$86705[ebp], eax
$LN20@CTime:
  00144	33 c0		 xor	 eax, eax
  00146	75 fc		 jne	 SHORT $LN20@CTime
  00148	33 c0		 xor	 eax, eax
  0014a	75 f8		 jne	 SHORT $LN20@CTime
  0014c	83 7d e4 00	 cmp	 DWORD PTR ___atl_condVal$86705[ebp], 0
  00150	75 0a		 jne	 SHORT $LN26@CTime
  00152	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00157	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN26@CTime:
  0015c	33 c0		 xor	 eax, eax
  0015e	75 b9		 jne	 SHORT $LN27@CTime
$LN17@CTime:

; 191  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00160	83 7d 1c 00	 cmp	 DWORD PTR _nSec$[ebp], 0
  00164	7c 12		 jl	 SHORT $LN78@CTime
  00166	83 7d 1c 3b	 cmp	 DWORD PTR _nSec$[ebp], 59 ; 0000003bH
  0016a	7f 0c		 jg	 SHORT $LN78@CTime
  0016c	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv137[ebp], 1
  00176	eb 0a		 jmp	 SHORT $LN79@CTime
$LN78@CTime:
  00178	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN79@CTime:
  00182	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00188	89 45 e0	 mov	 DWORD PTR ___atl_condVal$86718[ebp], eax
$LN10@CTime:
  0018b	33 c0		 xor	 eax, eax
  0018d	75 fc		 jne	 SHORT $LN10@CTime
  0018f	33 c0		 xor	 eax, eax
  00191	75 f8		 jne	 SHORT $LN10@CTime
  00193	83 7d e0 00	 cmp	 DWORD PTR ___atl_condVal$86718[ebp], 0
  00197	75 0a		 jne	 SHORT $LN16@CTime
  00199	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0019e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN16@CTime:
  001a3	33 c0		 xor	 eax, eax
  001a5	75 b9		 jne	 SHORT $LN17@CTime

; 192  : 
; 193  : #pragma warning (pop)
; 194  : 
; 195  : 	struct tm atm;
; 196  : 
; 197  : 	atm.tm_sec = nSec;

  001a7	8b 45 1c	 mov	 eax, DWORD PTR _nSec$[ebp]
  001aa	89 45 bc	 mov	 DWORD PTR _atm$[ebp], eax

; 198  : 	atm.tm_min = nMin;

  001ad	8b 45 18	 mov	 eax, DWORD PTR _nMin$[ebp]
  001b0	89 45 c0	 mov	 DWORD PTR _atm$[ebp+4], eax

; 199  : 	atm.tm_hour = nHour;

  001b3	8b 45 14	 mov	 eax, DWORD PTR _nHour$[ebp]
  001b6	89 45 c4	 mov	 DWORD PTR _atm$[ebp+8], eax

; 200  : 	atm.tm_mday = nDay;

  001b9	8b 45 10	 mov	 eax, DWORD PTR _nDay$[ebp]
  001bc	89 45 c8	 mov	 DWORD PTR _atm$[ebp+12], eax

; 201  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based

  001bf	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  001c2	83 e8 01	 sub	 eax, 1
  001c5	89 45 cc	 mov	 DWORD PTR _atm$[ebp+16], eax

; 202  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  001c8	8b 45 08	 mov	 eax, DWORD PTR _nYear$[ebp]
  001cb	2d 6c 07 00 00	 sub	 eax, 1900		; 0000076cH
  001d0	89 45 d0	 mov	 DWORD PTR _atm$[ebp+20], eax

; 203  : 	atm.tm_isdst = nDST;

  001d3	8b 45 20	 mov	 eax, DWORD PTR _nDST$[ebp]
  001d6	89 45 dc	 mov	 DWORD PTR _atm$[ebp+32], eax

; 204  : 
; 205  : 	m_time = _mktime64(&atm);

  001d9	8d 45 bc	 lea	 eax, DWORD PTR _atm$[ebp]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 __mktime64
  001e2	83 c4 04	 add	 esp, 4
  001e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	89 01		 mov	 DWORD PTR [ecx], eax
  001ea	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN3@CTime:

; 206  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time

  001ed	33 c0		 xor	 eax, eax
  001ef	75 fc		 jne	 SHORT $LN3@CTime
  001f1	33 c0		 xor	 eax, eax
  001f3	75 f8		 jne	 SHORT $LN3@CTime

; 207  : 	if(m_time == -1)

  001f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f8	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
  001fe	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  00204	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv194[ebp]
  0020a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0020c	23 42 04	 and	 eax, DWORD PTR [edx+4]
  0020f	83 f8 ff	 cmp	 eax, -1
  00212	75 0a		 jne	 SHORT $LN68@CTime

; 208  : 	{
; 209  : 		AtlThrow(E_INVALIDARG);

  00214	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00219	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN68@CTime:

; 210  : 	}
; 211  : }

  0021e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN69@CTime:
  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	5b		 pop	 ebx
  00224	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00227	33 cd		 xor	 ecx, ebp
  00229	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c2 1c 00	 ret	 28			; 0000001cH
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00009	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00010	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00012	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}
; 72   : 	else

  00017	eb 09		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00019	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
PUBLIC	??0CTimeSpan@ATL@@QAE@_J@Z			; ATL::CTimeSpan::CTimeSpan
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_time$ = 12						; size = 8
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z PROC		; ATL::CTime::operator-, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 305  : 	return( CTimeSpan( m_time-time.m_time ) );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	2b 4d 0c	 sub	 ecx, DWORD PTR _time$[ebp]
  00014	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00017	1b 55 10	 sbb	 edx, DWORD PTR _time$[ebp+4]
  0001a	52		 push	 edx
  0001b	51		 push	 ecx
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0CTimeSpan@ATL@@QAE@_J@Z ; ATL::CTimeSpan::CTimeSpan
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 306  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ENDP		; ATL::CTime::operator-
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??0CTimeSpan@ATL@@QAE@_J@Z PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 34   : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0CTimeSpan@ATL@@QAE@_J@Z ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTimeSpan
; Function compile flags: /Odtp /ZI
;	COMDAT ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_span$ = 12						; size = 8
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z PROC		; ATL::CTime::operator+, COMDAT
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 315  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  0000c	8d 4d 0c	 lea	 ecx, DWORD PTR _span$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetTimeSpan
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	03 01		 add	 eax, DWORD PTR [ecx]
  00019	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  0001c	52		 push	 edx
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 316  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ENDP		; ATL::CTime::operator+
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTimeSpan, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	return( m_timeSpan );

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 83   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTimeSpan
_TEXT	ENDS
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetYear@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetYear@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetYear, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 420  : 	struct tm ttm;
; 421  : 	struct tm * ptm;
; 422  : 
; 423  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 424  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 11		 je	 SHORT $LN3@GetYear
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00031	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  00037	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  0003a	eb 07		 jmp	 SHORT $LN4@GetYear
$LN3@GetYear:
  0003c	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetYear:
  00043	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 425  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004c	33 cd		 xor	 ecx, ebp
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?GetYear@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetYear
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__localtime64_s:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
_err$86876 = -52					; size = 4
_ptmTemp$86875 = -48					; size = 36
___atl_condVal$86864 = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN12@GetLocalTm:

; 370  : 	// Ensure ptm is valid
; 371  : 	ATLENSURE( ptm != NULL );

  00016	33 c0		 xor	 eax, eax
  00018	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  0001c	0f 95 c0	 setne	 al
  0001f	89 45 f4	 mov	 DWORD PTR ___atl_condVal$86864[ebp], eax
$LN5@GetLocalTm:
  00022	33 c0		 xor	 eax, eax
  00024	75 fc		 jne	 SHORT $LN5@GetLocalTm
  00026	33 c0		 xor	 eax, eax
  00028	75 f8		 jne	 SHORT $LN5@GetLocalTm
  0002a	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$86864[ebp], 0
  0002e	75 0a		 jne	 SHORT $LN11@GetLocalTm
  00030	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00035	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN11@GetLocalTm:
  0003a	33 c0		 xor	 eax, eax
  0003c	75 d8		 jne	 SHORT $LN12@GetLocalTm

; 372  : 
; 373  : 	if (ptm != NULL)

  0003e	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00042	74 2f		 je	 SHORT $LN2@GetLocalTm

; 374  : 	{
; 375  : 		struct tm ptmTemp;
; 376  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	50		 push	 eax
  00048	8d 4d d0	 lea	 ecx, DWORD PTR _ptmTemp$86875[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 __localtime64_s
  00051	83 c4 08	 add	 esp, 8
  00054	89 45 cc	 mov	 DWORD PTR _err$86876[ebp], eax

; 377  : 
; 378  : 		if (err != 0)

  00057	83 7d cc 00	 cmp	 DWORD PTR _err$86876[ebp], 0
  0005b	74 04		 je	 SHORT $LN1@GetLocalTm

; 379  : 		{
; 380  : 			return NULL;    // indicates that m_time was not initialized!

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 14		 jmp	 SHORT $LN14@GetLocalTm
$LN1@GetLocalTm:

; 381  : 		}
; 382  : 
; 383  : 		*ptm = ptmTemp;

  00061	b9 09 00 00 00	 mov	 ecx, 9
  00066	8d 75 d0	 lea	 esi, DWORD PTR _ptmTemp$86875[ebp]
  00069	8b 7d 08	 mov	 edi, DWORD PTR _ptm$[ebp]
  0006c	f3 a5		 rep movsd

; 384  : 		return ptm;

  0006e	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  00071	eb 02		 jmp	 SHORT $LN14@GetLocalTm
$LN2@GetLocalTm:

; 385  : 	}
; 386  : 
; 387  : 	return NULL;

  00073	33 c0		 xor	 eax, eax
$LN14@GetLocalTm:

; 388  : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007b	33 cd		 xor	 ecx, ebp
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMonth@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetMonth@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMonth, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 429  : 	struct tm ttm;
; 430  : 	struct tm * ptm;
; 431  : 
; 432  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 433  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0e		 je	 SHORT $LN3@GetMonth
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00031	83 c1 01	 add	 ecx, 1
  00034	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  00037	eb 07		 jmp	 SHORT $LN4@GetMonth
$LN3@GetMonth:
  00039	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetMonth:
  00040	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 434  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetMonth@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMonth
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetDay@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetDay@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetDay, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 438  : 	struct tm ttm;
; 439  : 	struct tm * ptm;
; 440  : 
; 441  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 442  : 	return ptm ? ptm->tm_mday : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetDay
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetDay
$LN3@GetDay:
  00036	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@GetDay:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 443  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetDay@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetDay
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetHour@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 447  : 	struct tm ttm;
; 448  : 	struct tm * ptm;
; 449  : 
; 450  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 451  : 	return ptm ? ptm->tm_hour : -1 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetHour
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetHour
$LN3@GetHour:
  00036	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetHour:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 452  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetMinute@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 	struct tm ttm;
; 457  : 	struct tm * ptm;
; 458  : 
; 459  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 460  : 	return ptm ? ptm->tm_min : -1 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetMinute
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetMinute
$LN3@GetMinute:
  00036	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetMinute:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 461  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\cashitemperiodsystem.cpp
;	COMDAT ??__Eg_CashItemPeriodSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_CashItemPeriodSystem@@YAXXZ PROC			; `dynamic initializer for 'g_CashItemPeriodSystem'', COMDAT

; 12   : CCashItemPeriodSystem g_CashItemPeriodSystem;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  0000e	e8 00 00 00 00	 call	 ??0CCashItemPeriodSystem@@QAE@XZ ; CCashItemPeriodSystem::CCashItemPeriodSystem
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_CashItemPeriodSystem@@YAXXZ ; `dynamic atexit destructor for 'g_CashItemPeriodSystem''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_CashItemPeriodSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_CashItemPeriodSystem''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_CashItemPeriodSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_CashItemPeriodSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CashItemPeriodSystem'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  0000e	e8 00 00 00 00	 call	 ??1CCashItemPeriodSystem@@UAE@XZ ; CCashItemPeriodSystem::~CCashItemPeriodSystem
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_CashItemPeriodSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CashItemPeriodSystem''
text$yd	ENDS
PUBLIC	?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
_BSS	SEGMENT
?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A DB 04362cH DUP (?) ; g_CashItemPeriodSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CashItemPeriodSystem$initializer$ DD FLAT:??__Eg_CashItemPeriodSystem@@YAXXZ
CRT$XCU	ENDS
END
