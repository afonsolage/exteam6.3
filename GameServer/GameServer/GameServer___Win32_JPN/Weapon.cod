; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\Weapon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_WEAPON_CS_ATTACKER DB 03eH
	DB	067H
	DB	048H
	DB	070H
	DB	058H
	DB	068H
	DB	07cH
	DB	06fH
	DB	074H
	DB	069H
	DB	07cH
	DB	070H
	DB	049H
	DB	056H
	DB	069H
	DB	067H
_WEAPON_CS_DEFENSER DB 03dH
	DB	058H
	DB	05dH
	DB	06cH
	DB	05cH
	DB	059H
	DB	07fH
	DB	06fH
	DB	054H
	DB	034H
	DB	066H
	DB	042H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ	; ST_WEAPON_CAL_DAMAGER_INFO::RESET
PUBLIC	?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET
PUBLIC	??_7CWeapon@@6B@				; CWeapon::`vftable'
PUBLIC	??0CWeapon@@QAE@XZ				; CWeapon::CWeapon
PUBLIC	??_R4CWeapon@@6B@				; CWeapon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWeapon@@@8				; CWeapon `RTTI Type Descriptor'
PUBLIC	??_R3CWeapon@@8					; CWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWeapon@@8					; CWeapon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWeapon@@8			; CWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECWeapon@@UAEPAXI@Z:PROC			; CWeapon::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CWeapon@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\weapon.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CWeapon@@8 DD FLAT:??_R0?AVCWeapon@@@8	; CWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R2CWeapon@@8
rdata$r	SEGMENT
??_R2CWeapon@@8 DD FLAT:??_R1A@?0A@EA@CWeapon@@8	; CWeapon::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWeapon@@8
rdata$r	SEGMENT
??_R3CWeapon@@8 DD 00H					; CWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWeapon@@@8
_DATA	SEGMENT
??_R0?AVCWeapon@@@8 DD FLAT:??_7type_info@@6B@		; CWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CWeapon@@6B@
rdata$r	SEGMENT
??_R4CWeapon@@6B@ DD 00H				; CWeapon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWeapon@@@8
	DD	FLAT:??_R3CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_7CWeapon@@6B@
CONST	SEGMENT
??_7CWeapon@@6B@ DD FLAT:??_R4CWeapon@@6B@		; CWeapon::`vftable'
	DD	FLAT:??_ECWeapon@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$219886 = -12						; size = 4
_i$219882 = -8						; size = 4
_this$ = -4						; size = 4
??0CWeapon@@QAE@XZ PROC					; CWeapon::CWeapon
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWeapon@@6B@

; 41   : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$219882[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN6@CWeapon
$LN5@CWeapon:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$219882[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _i$219882[ebp], eax
$LN6@CWeapon:
  00027	83 7d f8 32	 cmp	 DWORD PTR _i$219882[ebp], 50 ; 00000032H
  0002b	7d 14		 jge	 SHORT $LN4@CWeapon

; 42   : 	{
; 43   : 		this->m_WeaponDamagedTargetInfo[i].RESET();

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _i$219882[ebp]
  00030	c1 e0 04	 shl	 eax, 4
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8d 4c 01 04	 lea	 ecx, DWORD PTR [ecx+eax+4]
  0003a	e8 00 00 00 00	 call	 ?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ ; ST_WEAPON_DAMAGED_TARGET_INFO::RESET

; 44   : 	}

  0003f	eb dd		 jmp	 SHORT $LN5@CWeapon
$LN4@CWeapon:

; 45   : 
; 46   : 	for (int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$219886[ebp], 0
  00048	eb 09		 jmp	 SHORT $LN3@CWeapon
$LN2@CWeapon:
  0004a	8b 45 f4	 mov	 eax, DWORD PTR _i$219886[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 f4	 mov	 DWORD PTR _i$219886[ebp], eax
$LN3@CWeapon:
  00053	83 7d f4 64	 cmp	 DWORD PTR _i$219886[ebp], 100 ; 00000064H
  00057	7d 17		 jge	 SHORT $LN7@CWeapon

; 47   : 	{
; 48   : 		this->m_WeaponCalDamageInfo[i].RESET();

  00059	8b 45 f4	 mov	 eax, DWORD PTR _i$219886[ebp]
  0005c	6b c0 14	 imul	 eax, 20			; 00000014H
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	8d 8c 01 44 06
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+1604]
  00069	e8 00 00 00 00	 call	 ?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ ; ST_WEAPON_CAL_DAMAGER_INFO::RESET

; 49   : 	}

  0006e	eb da		 jmp	 SHORT $LN2@CWeapon
$LN7@CWeapon:

; 50   : }

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
??0CWeapon@@QAE@XZ ENDP					; CWeapon::CWeapon
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\weapon.h
_TEXT	ENDS
;	COMDAT ?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ PROC	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET, COMDAT
; _this$ = ecx

; 24   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		this->m_iWeaponObjIndex = -1;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 26   : 		this->m_iTargetObjIndex = -1;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 27   : 		this->m_iDamageDealingTime = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 28   : 		this->m_IsUsed = FALSE;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 29   : 	}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ ENDP	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ PROC		; ST_WEAPON_CAL_DAMAGER_INFO::RESET, COMDAT
; _this$ = ecx

; 41   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 		this->m_iWeaponObjIndex = -1;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 43   : 		this->m_iTargetX = -1;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 44   : 		this->m_iTargetY = -1;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 45   : 		this->m_iLimitTime = -1;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 46   : 		this->m_IsUsed = FALSE;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 47   : 	}

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ ENDP		; ST_WEAPON_CAL_DAMAGER_INFO::RESET
_TEXT	ENDS
PUBLIC	??1CWeapon@@UAE@XZ				; CWeapon::~CWeapon
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWeapon@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWeapon@@UAEPAXI@Z PROC				; CWeapon::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWeapon@@UAE@XZ	; CWeapon::~CWeapon
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCWeapon@@UAEPAXI@Z ENDP				; CWeapon::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\weapon.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWeapon@@UAE@XZ PROC					; CWeapon::~CWeapon
; _this$ = ecx

; 57   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 44	 sub	 esp, 68			; 00000044H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi
  00089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWeapon@@6B@

; 58   : 	return;
; 59   : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
??1CWeapon@@UAE@XZ ENDP					; CWeapon::~CWeapon
_TEXT	ENDS
PUBLIC	?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z	; CWeapon::SetWeaponCalDamageInfo
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$219904 = -8						; size = 4
_this$ = -4						; size = 4
_wObjIndex$ = 8						; size = 2
_btTargetX$ = 12					; size = 1
_btTargetY$ = 16					; size = 1
_iDelayTime$ = 20					; size = 4
?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z PROC	; CWeapon::SetWeaponCalDamageInfo
; _this$ = ecx

; 63   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 48	 sub	 esp, 72			; 00000048H
  000a6	53		 push	 ebx
  000a7	56		 push	 esi
  000a8	57		 push	 edi
  000a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  000ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$219904[ebp], 0
  000b3	eb 09		 jmp	 SHORT $LN4@SetWeaponC
$LN3@SetWeaponC:
  000b5	8b 45 f8	 mov	 eax, DWORD PTR _i$219904[ebp]
  000b8	83 c0 01	 add	 eax, 1
  000bb	89 45 f8	 mov	 DWORD PTR _i$219904[ebp], eax
$LN4@SetWeaponC:
  000be	83 7d f8 32	 cmp	 DWORD PTR _i$219904[ebp], 50 ; 00000032H
  000c2	0f 8d 88 00 00
	00		 jge	 $LN2@SetWeaponC

; 65   : 	{
; 66   : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == FALSE )

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _i$219904[ebp]
  000cb	6b c0 14	 imul	 eax, 20			; 00000014H
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	83 bc 01 54 06
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1620], 0
  000d9	75 70		 jne	 SHORT $LN1@SetWeaponC

; 67   : 		{
; 68   : 			this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex = wObjIndex;

  000db	0f b7 45 08	 movzx	 eax, WORD PTR _wObjIndex$[ebp]
  000df	8b 4d f8	 mov	 ecx, DWORD PTR _i$219904[ebp]
  000e2	6b c9 14	 imul	 ecx, 20			; 00000014H
  000e5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e8	89 84 0a 44 06
	00 00		 mov	 DWORD PTR [edx+ecx+1604], eax

; 69   : 			this->m_WeaponCalDamageInfo[i].m_iTargetX = btTargetX;

  000ef	0f b6 45 0c	 movzx	 eax, BYTE PTR _btTargetX$[ebp]
  000f3	8b 4d f8	 mov	 ecx, DWORD PTR _i$219904[ebp]
  000f6	6b c9 14	 imul	 ecx, 20			; 00000014H
  000f9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000fc	89 84 0a 48 06
	00 00		 mov	 DWORD PTR [edx+ecx+1608], eax

; 70   : 			this->m_WeaponCalDamageInfo[i].m_iTargetY = btTargetY;

  00103	0f b6 45 10	 movzx	 eax, BYTE PTR _btTargetY$[ebp]
  00107	8b 4d f8	 mov	 ecx, DWORD PTR _i$219904[ebp]
  0010a	6b c9 14	 imul	 ecx, 20			; 00000014H
  0010d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00110	89 84 0a 4c 06
	00 00		 mov	 DWORD PTR [edx+ecx+1612], eax

; 71   : 			this->m_WeaponCalDamageInfo[i].m_iLimitTime = GetTickCount() + iDelayTime;

  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0011d	03 45 14	 add	 eax, DWORD PTR _iDelayTime$[ebp]
  00120	8b 4d f8	 mov	 ecx, DWORD PTR _i$219904[ebp]
  00123	6b c9 14	 imul	 ecx, 20			; 00000014H
  00126	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00129	89 84 0a 50 06
	00 00		 mov	 DWORD PTR [edx+ecx+1616], eax

; 72   : 			this->m_WeaponCalDamageInfo[i].m_IsUsed = TRUE;

  00130	8b 45 f8	 mov	 eax, DWORD PTR _i$219904[ebp]
  00133	6b c0 14	 imul	 eax, 20			; 00000014H
  00136	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	c7 84 01 54 06
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+1620], 1

; 73   : 
; 74   : 			return TRUE;

  00144	b8 01 00 00 00	 mov	 eax, 1
  00149	eb 07		 jmp	 SHORT $LN5@SetWeaponC
$LN1@SetWeaponC:

; 75   : 		}
; 76   : 	}

  0014b	e9 65 ff ff ff	 jmp	 $LN3@SetWeaponC
$LN2@SetWeaponC:

; 77   : 
; 78   : 	return FALSE;

  00150	33 c0		 xor	 eax, eax
$LN5@SetWeaponC:

; 79   : }

  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 10 00	 ret	 16			; 00000010H
?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z ENDP	; CWeapon::SetWeaponCalDamageInfo
_TEXT	ENDS
PUBLIC	?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z	; CWeapon::GetWeaponCalDamageInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$219915 = -8						; size = 4
_this$ = -4						; size = 4
_wObjIndex$ = 8						; size = 2
_btTargetX$ = 12					; size = 4
_btTargetY$ = 16					; size = 4
?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z PROC	; CWeapon::GetWeaponCalDamageInfo
; _this$ = ecx

; 83   : {

  00160	55		 push	 ebp
  00161	8b ec		 mov	 ebp, esp
  00163	83 ec 48	 sub	 esp, 72			; 00000048H
  00166	53		 push	 ebx
  00167	56		 push	 esi
  00168	57		 push	 edi
  00169	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 84   : 	for( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  0016c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$219915[ebp], 0
  00173	eb 09		 jmp	 SHORT $LN4@GetWeaponC
$LN3@GetWeaponC:
  00175	8b 45 f8	 mov	 eax, DWORD PTR _i$219915[ebp]
  00178	83 c0 01	 add	 eax, 1
  0017b	89 45 f8	 mov	 DWORD PTR _i$219915[ebp], eax
$LN4@GetWeaponC:
  0017e	83 7d f8 32	 cmp	 DWORD PTR _i$219915[ebp], 50 ; 00000032H
  00182	7d 71		 jge	 SHORT $LN2@GetWeaponC

; 85   : 	{
; 86   : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == TRUE && this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex == wObjIndex)

  00184	8b 45 f8	 mov	 eax, DWORD PTR _i$219915[ebp]
  00187	6b c0 14	 imul	 eax, 20			; 00000014H
  0018a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018d	83 bc 01 54 06
	00 00 01	 cmp	 DWORD PTR [ecx+eax+1620], 1
  00195	75 5c		 jne	 SHORT $LN1@GetWeaponC
  00197	8b 45 f8	 mov	 eax, DWORD PTR _i$219915[ebp]
  0019a	6b c0 14	 imul	 eax, 20			; 00000014H
  0019d	0f b7 4d 08	 movzx	 ecx, WORD PTR _wObjIndex$[ebp]
  001a1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a4	39 8c 02 44 06
	00 00		 cmp	 DWORD PTR [edx+eax+1604], ecx
  001ab	75 46		 jne	 SHORT $LN1@GetWeaponC

; 87   : 		{
; 88   : 			btTargetX = this->m_WeaponCalDamageInfo[i].m_iTargetX;

  001ad	8b 45 f8	 mov	 eax, DWORD PTR _i$219915[ebp]
  001b0	6b c0 14	 imul	 eax, 20			; 00000014H
  001b3	8b 4d 0c	 mov	 ecx, DWORD PTR _btTargetX$[ebp]
  001b6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001b9	8a 84 02 48 06
	00 00		 mov	 al, BYTE PTR [edx+eax+1608]
  001c0	88 01		 mov	 BYTE PTR [ecx], al

; 89   : 			btTargetY = this->m_WeaponCalDamageInfo[i].m_iTargetY;

  001c2	8b 45 f8	 mov	 eax, DWORD PTR _i$219915[ebp]
  001c5	6b c0 14	 imul	 eax, 20			; 00000014H
  001c8	8b 4d 10	 mov	 ecx, DWORD PTR _btTargetY$[ebp]
  001cb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001ce	8a 84 02 4c 06
	00 00		 mov	 al, BYTE PTR [edx+eax+1612]
  001d5	88 01		 mov	 BYTE PTR [ecx], al

; 90   : 
; 91   : 			this->m_WeaponCalDamageInfo[i].RESET();

  001d7	8b 45 f8	 mov	 eax, DWORD PTR _i$219915[ebp]
  001da	6b c0 14	 imul	 eax, 20			; 00000014H
  001dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e0	8d 8c 01 44 06
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+1604]
  001e7	e8 00 00 00 00	 call	 ?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ ; ST_WEAPON_CAL_DAMAGER_INFO::RESET

; 92   : 
; 93   : 			return TRUE;

  001ec	b8 01 00 00 00	 mov	 eax, 1
  001f1	eb 04		 jmp	 SHORT $LN5@GetWeaponC
$LN1@GetWeaponC:

; 94   : 		}
; 95   : 	}

  001f3	eb 80		 jmp	 SHORT $LN3@GetWeaponC
$LN2@GetWeaponC:

; 96   : 
; 97   : 	return FALSE;

  001f5	33 c0		 xor	 eax, eax
$LN5@GetWeaponC:

; 98   : }

  001f7	5f		 pop	 edi
  001f8	5e		 pop	 esi
  001f9	5b		 pop	 ebx
  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c2 0c 00	 ret	 12			; 0000000cH
?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z ENDP	; CWeapon::GetWeaponCalDamageInfo
_TEXT	ENDS
PUBLIC	?GetAttackDamage@CWeapon@@QAEHH@Z		; CWeapon::GetAttackDamage
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iDamage$ = -8						; size = 4
_this$ = -4						; size = 4
_iObjClass$ = 8						; size = 4
?GetAttackDamage@CWeapon@@QAEHH@Z PROC			; CWeapon::GetAttackDamage
; _this$ = ecx

; 103  : {

  00200	55		 push	 ebp
  00201	8b ec		 mov	 ebp, esp
  00203	83 ec 48	 sub	 esp, 72			; 00000048H
  00206	53		 push	 ebx
  00207	56		 push	 esi
  00208	57		 push	 edi
  00209	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 104  : 	int iDamage = 0;

  0020c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iDamage$[ebp], 0

; 105  : 
; 106  : 	if ( iObjClass == 221 )

  00213	81 7d 08 dd 00
	00 00		 cmp	 DWORD PTR _iObjClass$[ebp], 221 ; 000000ddH
  0021a	75 09		 jne	 SHORT $LN3@GetAttackD

; 107  : 	{
; 108  : 		iDamage = 300;

  0021c	c7 45 f8 2c 01
	00 00		 mov	 DWORD PTR _iDamage$[ebp], 300 ; 0000012cH
  00223	eb 10		 jmp	 SHORT $LN2@GetAttackD
$LN3@GetAttackD:

; 109  : 	}
; 110  : 	else if ( iObjClass == 222 )

  00225	81 7d 08 de 00
	00 00		 cmp	 DWORD PTR _iObjClass$[ebp], 222 ; 000000deH
  0022c	75 07		 jne	 SHORT $LN2@GetAttackD

; 111  : 	{
; 112  : 		iDamage = 200;

  0022e	c7 45 f8 c8 00
	00 00		 mov	 DWORD PTR _iDamage$[ebp], 200 ; 000000c8H
$LN2@GetAttackD:

; 113  : 	}
; 114  : 
; 115  : 	return iDamage;

  00235	8b 45 f8	 mov	 eax, DWORD PTR _iDamage$[ebp]

; 116  : }

  00238	5f		 pop	 edi
  00239	5e		 pop	 esi
  0023a	5b		 pop	 ebx
  0023b	8b e5		 mov	 esp, ebp
  0023d	5d		 pop	 ebp
  0023e	c2 04 00	 ret	 4
?GetAttackDamage@CWeapon@@QAEHH@Z ENDP			; CWeapon::GetAttackDamage
_TEXT	ENDS
PUBLIC	?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z	; CWeapon::GetTargetPointXY
EXTRN	_rand:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_ty$219945 = -20					; size = 4
_tx$219944 = -16					; size = 4
_ty$219939 = -12					; size = 4
_tx$219938 = -8						; size = 4
_this$ = -4						; size = 4
_iObjClass$ = 8						; size = 4
_iTargetPointIndex$ = 12				; size = 4
_btX$ = 16						; size = 4
_btY$ = 20						; size = 4
_bRandomPos$ = 24					; size = 4
?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z PROC		; CWeapon::GetTargetPointXY
; _this$ = ecx

; 122  : {

  00250	55		 push	 ebp
  00251	8b ec		 mov	 ebp, esp
  00253	83 ec 54	 sub	 esp, 84			; 00000054H
  00256	53		 push	 ebx
  00257	56		 push	 esi
  00258	57		 push	 edi
  00259	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 123  : 	if ( iObjClass == 221 )

  0025c	81 7d 08 dd 00
	00 00		 cmp	 DWORD PTR _iObjClass$[ebp], 221 ; 000000ddH
  00263	0f 85 bc 00 00
	00		 jne	 $LN8@GetTargetP

; 124  : 	{
; 125  : 		if ( iTargetPointIndex >= 0 && iTargetPointIndex < MAX_ST_CS_WEAPON )

  00269	83 7d 0c 00	 cmp	 DWORD PTR _iTargetPointIndex$[ebp], 0
  0026d	0f 8c b2 00 00
	00		 jl	 $LN8@GetTargetP
  00273	83 7d 0c 04	 cmp	 DWORD PTR _iTargetPointIndex$[ebp], 4
  00277	0f 8d a8 00 00
	00		 jge	 $LN8@GetTargetP

; 126  : 		{
; 127  : 			int tx = WEAPON_CS_ATTACKER[iTargetPointIndex].btXEnd - WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin;

  0027d	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  00280	0f b6 0c 85 02
	00 00 00	 movzx	 ecx, BYTE PTR _WEAPON_CS_ATTACKER[eax*4+2]
  00288	8b 55 0c	 mov	 edx, DWORD PTR _iTargetPointIndex$[ebp]
  0028b	0f b6 04 95 00
	00 00 00	 movzx	 eax, BYTE PTR _WEAPON_CS_ATTACKER[edx*4]
  00293	2b c8		 sub	 ecx, eax
  00295	89 4d f8	 mov	 DWORD PTR _tx$219938[ebp], ecx

; 128  : 			int ty = WEAPON_CS_ATTACKER[iTargetPointIndex].btYEnd - WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin;

  00298	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  0029b	0f b6 0c 85 03
	00 00 00	 movzx	 ecx, BYTE PTR _WEAPON_CS_ATTACKER[eax*4+3]
  002a3	8b 55 0c	 mov	 edx, DWORD PTR _iTargetPointIndex$[ebp]
  002a6	0f b6 04 95 01
	00 00 00	 movzx	 eax, BYTE PTR _WEAPON_CS_ATTACKER[edx*4+1]
  002ae	2b c8		 sub	 ecx, eax
  002b0	89 4d f4	 mov	 DWORD PTR _ty$219939[ebp], ecx

; 129  : 
; 130  : 			if ( bRandomPos != FALSE )

  002b3	83 7d 18 00	 cmp	 DWORD PTR _bRandomPos$[ebp], 0
  002b7	74 38		 je	 SHORT $LN6@GetTargetP

; 131  : 			{
; 132  : 				btX = WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin + rand() % tx;

  002b9	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  002bc	0f b6 1c 85 00
	00 00 00	 movzx	 ebx, BYTE PTR _WEAPON_CS_ATTACKER[eax*4]
  002c4	e8 00 00 00 00	 call	 _rand
  002c9	99		 cdq
  002ca	f7 7d f8	 idiv	 DWORD PTR _tx$219938[ebp]
  002cd	03 da		 add	 ebx, edx
  002cf	8b 4d 10	 mov	 ecx, DWORD PTR _btX$[ebp]
  002d2	88 19		 mov	 BYTE PTR [ecx], bl

; 133  : 				btY = WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin + rand() % ty;

  002d4	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  002d7	0f b6 1c 85 01
	00 00 00	 movzx	 ebx, BYTE PTR _WEAPON_CS_ATTACKER[eax*4+1]
  002df	e8 00 00 00 00	 call	 _rand
  002e4	99		 cdq
  002e5	f7 7d f4	 idiv	 DWORD PTR _ty$219939[ebp]
  002e8	03 da		 add	 ebx, edx
  002ea	8b 4d 14	 mov	 ecx, DWORD PTR _btY$[ebp]
  002ed	88 19		 mov	 BYTE PTR [ecx], bl

; 134  : 			}
; 135  : 			else

  002ef	eb 34		 jmp	 SHORT $LN8@GetTargetP
$LN6@GetTargetP:

; 136  : 			{
; 137  : 				btX = WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin + tx / 2;

  002f1	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  002f4	0f b6 0c 85 00
	00 00 00	 movzx	 ecx, BYTE PTR _WEAPON_CS_ATTACKER[eax*4]
  002fc	8b 45 f8	 mov	 eax, DWORD PTR _tx$219938[ebp]
  002ff	99		 cdq
  00300	2b c2		 sub	 eax, edx
  00302	d1 f8		 sar	 eax, 1
  00304	03 c8		 add	 ecx, eax
  00306	8b 55 10	 mov	 edx, DWORD PTR _btX$[ebp]
  00309	88 0a		 mov	 BYTE PTR [edx], cl

; 138  : 				btY = WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin + ty / 2;

  0030b	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  0030e	0f b6 0c 85 01
	00 00 00	 movzx	 ecx, BYTE PTR _WEAPON_CS_ATTACKER[eax*4+1]
  00316	8b 45 f4	 mov	 eax, DWORD PTR _ty$219939[ebp]
  00319	99		 cdq
  0031a	2b c2		 sub	 eax, edx
  0031c	d1 f8		 sar	 eax, 1
  0031e	03 c8		 add	 ecx, eax
  00320	8b 55 14	 mov	 edx, DWORD PTR _btY$[ebp]
  00323	88 0a		 mov	 BYTE PTR [edx], cl
$LN8@GetTargetP:

; 139  : 			}
; 140  : 		}
; 141  : 	}
; 142  : 
; 143  : 	if ( iObjClass == 222 )

  00325	81 7d 08 de 00
	00 00		 cmp	 DWORD PTR _iObjClass$[ebp], 222 ; 000000deH
  0032c	0f 85 bc 00 00
	00		 jne	 $LN4@GetTargetP

; 144  : 	{
; 145  : 		if ( iTargetPointIndex >= 0 && iTargetPointIndex < MAX_ST_CS_WEAPON )

  00332	83 7d 0c 00	 cmp	 DWORD PTR _iTargetPointIndex$[ebp], 0
  00336	0f 8c b2 00 00
	00		 jl	 $LN4@GetTargetP
  0033c	83 7d 0c 04	 cmp	 DWORD PTR _iTargetPointIndex$[ebp], 4
  00340	0f 8d a8 00 00
	00		 jge	 $LN4@GetTargetP

; 146  : 		{
; 147  : 			int tx = WEAPON_CS_DEFENSER[iTargetPointIndex].btXEnd - WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin;

  00346	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  00349	0f b6 0c 85 02
	00 00 00	 movzx	 ecx, BYTE PTR _WEAPON_CS_DEFENSER[eax*4+2]
  00351	8b 55 0c	 mov	 edx, DWORD PTR _iTargetPointIndex$[ebp]
  00354	0f b6 04 95 00
	00 00 00	 movzx	 eax, BYTE PTR _WEAPON_CS_DEFENSER[edx*4]
  0035c	2b c8		 sub	 ecx, eax
  0035e	89 4d f0	 mov	 DWORD PTR _tx$219944[ebp], ecx

; 148  : 			int ty = WEAPON_CS_DEFENSER[iTargetPointIndex].btYEnd - WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin;

  00361	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  00364	0f b6 0c 85 03
	00 00 00	 movzx	 ecx, BYTE PTR _WEAPON_CS_DEFENSER[eax*4+3]
  0036c	8b 55 0c	 mov	 edx, DWORD PTR _iTargetPointIndex$[ebp]
  0036f	0f b6 04 95 01
	00 00 00	 movzx	 eax, BYTE PTR _WEAPON_CS_DEFENSER[edx*4+1]
  00377	2b c8		 sub	 ecx, eax
  00379	89 4d ec	 mov	 DWORD PTR _ty$219945[ebp], ecx

; 149  : 
; 150  : 			if ( bRandomPos != FALSE )

  0037c	83 7d 18 00	 cmp	 DWORD PTR _bRandomPos$[ebp], 0
  00380	74 38		 je	 SHORT $LN2@GetTargetP

; 151  : 			{
; 152  : 				btX = WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin + rand() % tx;

  00382	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  00385	0f b6 1c 85 00
	00 00 00	 movzx	 ebx, BYTE PTR _WEAPON_CS_DEFENSER[eax*4]
  0038d	e8 00 00 00 00	 call	 _rand
  00392	99		 cdq
  00393	f7 7d f0	 idiv	 DWORD PTR _tx$219944[ebp]
  00396	03 da		 add	 ebx, edx
  00398	8b 4d 10	 mov	 ecx, DWORD PTR _btX$[ebp]
  0039b	88 19		 mov	 BYTE PTR [ecx], bl

; 153  : 				btY = WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin + rand() % ty;

  0039d	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  003a0	0f b6 1c 85 01
	00 00 00	 movzx	 ebx, BYTE PTR _WEAPON_CS_DEFENSER[eax*4+1]
  003a8	e8 00 00 00 00	 call	 _rand
  003ad	99		 cdq
  003ae	f7 7d ec	 idiv	 DWORD PTR _ty$219945[ebp]
  003b1	03 da		 add	 ebx, edx
  003b3	8b 4d 14	 mov	 ecx, DWORD PTR _btY$[ebp]
  003b6	88 19		 mov	 BYTE PTR [ecx], bl

; 154  : 			}
; 155  : 			else

  003b8	eb 34		 jmp	 SHORT $LN4@GetTargetP
$LN2@GetTargetP:

; 156  : 			{
; 157  : 				btX = WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin + tx / 2;

  003ba	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  003bd	0f b6 0c 85 00
	00 00 00	 movzx	 ecx, BYTE PTR _WEAPON_CS_DEFENSER[eax*4]
  003c5	8b 45 f0	 mov	 eax, DWORD PTR _tx$219944[ebp]
  003c8	99		 cdq
  003c9	2b c2		 sub	 eax, edx
  003cb	d1 f8		 sar	 eax, 1
  003cd	03 c8		 add	 ecx, eax
  003cf	8b 55 10	 mov	 edx, DWORD PTR _btX$[ebp]
  003d2	88 0a		 mov	 BYTE PTR [edx], cl

; 158  : 				btY = WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin + ty / 2;

  003d4	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  003d7	0f b6 0c 85 01
	00 00 00	 movzx	 ecx, BYTE PTR _WEAPON_CS_DEFENSER[eax*4+1]
  003df	8b 45 ec	 mov	 eax, DWORD PTR _ty$219945[ebp]
  003e2	99		 cdq
  003e3	2b c2		 sub	 eax, edx
  003e5	d1 f8		 sar	 eax, 1
  003e7	03 c8		 add	 ecx, eax
  003e9	8b 55 14	 mov	 edx, DWORD PTR _btY$[ebp]
  003ec	88 0a		 mov	 BYTE PTR [edx], cl
$LN4@GetTargetP:

; 159  : 			}
; 160  : 		}
; 161  : 	}
; 162  : 
; 163  : 	return TRUE;

  003ee	b8 01 00 00 00	 mov	 eax, 1

; 164  : }

  003f3	5f		 pop	 edi
  003f4	5e		 pop	 esi
  003f5	5b		 pop	 ebx
  003f6	8b e5		 mov	 esp, ebp
  003f8	5d		 pop	 ebp
  003f9	c2 14 00	 ret	 20			; 00000014H
?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z ENDP		; CWeapon::GetTargetPointXY
_TEXT	ENDS
PUBLIC	?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ; CWeapon::MissCheck
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_iSkill$ = 16						; size = 4
_iSkillSuccess$ = 20					; size = 4
_bAllMiss$ = 24						; size = 4
?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z PROC	; CWeapon::MissCheck
; _this$ = ecx

; 169  : {

  00400	55		 push	 ebp
  00401	8b ec		 mov	 ebp, esp
  00403	83 ec 44	 sub	 esp, 68			; 00000044H
  00406	53		 push	 ebx
  00407	56		 push	 esi
  00408	57		 push	 edi
  00409	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 170  : 	return TRUE;

  0040c	b8 01 00 00 00	 mov	 eax, 1

; 171  : }

  00411	5f		 pop	 edi
  00412	5e		 pop	 esi
  00413	5b		 pop	 ebx
  00414	8b e5		 mov	 esp, ebp
  00416	5d		 pop	 ebp
  00417	c2 14 00	 ret	 20			; 00000014H
?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ENDP	; CWeapon::MissCheck
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@4024000000000000
PUBLIC	?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ; CWeapon::Attack
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjUniriaSprite
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z:PROC ; gObjArmorRandomDurDown
EXTRN	?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z:PROC ; gObjUpdateAppliedBuffEffect
EXTRN	?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjSearchActiveEffect
EXTRN	?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z:PROC ; cWingsDamage::SetCharHorseAttack
EXTRN	?gWingsDamage@@3VcWingsDamage@@A:BYTE		; gWingsDamage
EXTRN	?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjDarkHorse
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ:PROC ; CItem::IsDinorantReduceAttackDamaege
EXTRN	?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjDenorantSprite
EXTRN	?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjWingSprite
EXTRN	?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAngelSprite
EXTRN	?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetActiveEffect
EXTRN	?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAttackQ
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv457 = -164						; size = 4
tv446 = -164						; size = 4
tv431 = -164						; size = 4
_decattackdamage$220028 = -96				; size = 4
_replacemana$220024 = -92				; size = 4
_iWizardSkillTime$220023 = -88				; size = 4
_iWizardSkillDefense$220022 = -84			; size = 4
_DHPercent$220016 = -80					; size = 4
_DarkHorse$220015 = -76					; size = 4
_ReduceDamage$220010 = -72				; size = 4
_Dino$220009 = -68					; size = 4
_lc16$220004 = -64					; size = 4
_lc15$219999 = -60					; size = 4
_Wing$219996 = -56					; size = 4
_lc13$219992 = -52					; size = 4
_iTargetLevel$ = -48					; size = 4
_lc11$219984 = -44					; size = 4
_bAllMiss$ = -40					; size = 4
_iSkillMagumReduceDefense$ = -36			; size = 4
_iTargetDefense$ = -32					; size = 4
_iAttackDamage$ = -28					; size = 4
_MSBFlag$ = -24						; size = 4
_ManaChange$ = -20					; size = 4
_MsgDamage$ = -13					; size = 1
_iSkillSuccess$ = -12					; size = 4
_iSkill$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_iCriticalDamage$ = 20					; size = 4
_iActionType$ = 24					; size = 4
?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z PROC ; CWeapon::Attack
; _this$ = ecx

; 177  : {

  00420	55		 push	 ebp
  00421	8b ec		 mov	 ebp, esp
  00423	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00429	53		 push	 ebx
  0042a	56		 push	 esi
  0042b	57		 push	 edi
  0042c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 178  : 	int iSkill = 0;

  0042f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iSkill$[ebp], 0

; 179  : 	int iSkillSuccess = TRUE;

  00436	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _iSkillSuccess$[ebp], 1

; 180  : 	BYTE MsgDamage = 0;

  0043d	c6 45 f3 00	 mov	 BYTE PTR _MsgDamage$[ebp], 0

; 181  : 	int ManaChange = 0;

  00441	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ManaChange$[ebp], 0

; 182  : 
; 183  : 	if ( lpMagic != NULL )

  00448	83 7d 10 00	 cmp	 DWORD PTR _lpMagic$[ebp], 0
  0044c	74 09		 je	 SHORT $LN44@Attack

; 184  : 	{
; 185  : 		iSkill = lpMagic->m_Skill;

  0044e	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00451	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00454	89 4d f8	 mov	 DWORD PTR _iSkill$[ebp], ecx
$LN44@Attack:

; 186  : 	}
; 187  : 
; 188  : 	if ( (lpTargetObj->Authority & 2) == 2 )

  00457	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0045a	8b 88 0c 02 00
	00		 mov	 ecx, DWORD PTR [eax+524]
  00460	83 e1 02	 and	 ecx, 2
  00463	74 07		 je	 SHORT $LN43@Attack

; 189  : 	{
; 190  : 		return FALSE;

  00465	33 c0		 xor	 eax, eax
  00467	e9 2f 06 00 00	 jmp	 $LN45@Attack
$LN43@Attack:

; 191  : 	}
; 192  : 
; 193  : 	if ( lpObj->MapNumber != lpTargetObj->MapNumber )

  0046c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0046f	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00476	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00479	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00480	3b c8		 cmp	 ecx, eax
  00482	74 07		 je	 SHORT $LN42@Attack

; 194  : 	{
; 195  : 		return FALSE;

  00484	33 c0		 xor	 eax, eax
  00486	e9 10 06 00 00	 jmp	 $LN45@Attack
$LN42@Attack:

; 196  : 	}
; 197  : 
; 198  : 	if ( lpTargetObj->Type == OBJ_USER )

  0048b	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0048e	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  00492	83 f9 01	 cmp	 ecx, 1
  00495	75 17		 jne	 SHORT $LN40@Attack

; 199  : 	{
; 200  : 		if ( gObjIsConnected(lpTargetObj) == FALSE )

  00497	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0049a	50		 push	 eax
  0049b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  004a0	83 c4 04	 add	 esp, 4
  004a3	85 c0		 test	 eax, eax
  004a5	75 07		 jne	 SHORT $LN40@Attack

; 201  : 		{
; 202  : 			return FALSE;

  004a7	33 c0		 xor	 eax, eax
  004a9	e9 ed 05 00 00	 jmp	 $LN45@Attack
$LN40@Attack:

; 203  : 		}
; 204  : 	}
; 205  : 
; 206  : 	if ( gObjAttackQ(lpTargetObj) == 0 )

  004ae	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  004b1	50		 push	 eax
  004b2	e8 00 00 00 00	 call	 ?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAttackQ
  004b7	83 c4 04	 add	 esp, 4
  004ba	85 c0		 test	 eax, eax
  004bc	75 07		 jne	 SHORT $LN39@Attack

; 207  : 	{
; 208  : 		return FALSE;

  004be	33 c0		 xor	 eax, eax
  004c0	e9 d6 05 00 00	 jmp	 $LN45@Attack
$LN39@Attack:

; 209  : 	}
; 210  : 
; 211  : 	lpObj->m_TotalAttackCount++;

  004c5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004c8	8b 88 98 03 00
	00		 mov	 ecx, DWORD PTR [eax+920]
  004ce	83 c1 01	 add	 ecx, 1
  004d1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  004d4	89 8a 98 03 00
	00		 mov	 DWORD PTR [edx+920], ecx

; 212  : 
; 213  : 	int MSBFlag = 0;

  004da	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _MSBFlag$[ebp], 0

; 214  : 
; 215  : 	if ( iCriticalDamage != 0 )

  004e1	83 7d 14 00	 cmp	 DWORD PTR _iCriticalDamage$[ebp], 0
  004e5	74 06		 je	 SHORT $LN38@Attack

; 216  : 	{
; 217  : 		MsgDamage = 3;

  004e7	c6 45 f3 03	 mov	 BYTE PTR _MsgDamage$[ebp], 3

; 218  : 	}
; 219  : 	else

  004eb	eb 04		 jmp	 SHORT $LN37@Attack
$LN38@Attack:

; 220  : 	{
; 221  : 		MsgDamage = 0;

  004ed	c6 45 f3 00	 mov	 BYTE PTR _MsgDamage$[ebp], 0
$LN37@Attack:

; 222  : 	}
; 223  : 
; 224  : 	int iAttackDamage = this->GetAttackDamage(lpObj->Class);

  004f1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004f4	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  004fb	51		 push	 ecx
  004fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ff	e8 00 00 00 00	 call	 ?GetAttackDamage@CWeapon@@QAEHH@Z ; CWeapon::GetAttackDamage
  00504	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax

; 225  : 	int iTargetDefense = lpTargetObj->m_Defense;

  00507	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0050a	8b 88 94 04 00
	00		 mov	 ecx, DWORD PTR [eax+1172]
  00510	89 4d e0	 mov	 DWORD PTR _iTargetDefense$[ebp], ecx

; 226  : 	int iSkillMagumReduceDefense = gObjGetActiveEffect(lpObj, 23);

  00513	6a 17		 push	 23			; 00000017H
  00515	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  0051e	83 c4 08	 add	 esp, 8
  00521	89 45 dc	 mov	 DWORD PTR _iSkillMagumReduceDefense$[ebp], eax

; 227  : 
; 228  : 	iTargetDefense -= (iTargetDefense * iSkillMagumReduceDefense)/100;

  00524	8b 45 e0	 mov	 eax, DWORD PTR _iTargetDefense$[ebp]
  00527	0f af 45 dc	 imul	 eax, DWORD PTR _iSkillMagumReduceDefense$[ebp]
  0052b	99		 cdq
  0052c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00531	f7 f9		 idiv	 ecx
  00533	8b 55 e0	 mov	 edx, DWORD PTR _iTargetDefense$[ebp]
  00536	2b d0		 sub	 edx, eax
  00538	89 55 e0	 mov	 DWORD PTR _iTargetDefense$[ebp], edx

; 229  : 
; 230  : 	BOOL bAllMiss = FALSE;

  0053b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _bAllMiss$[ebp], 0

; 231  : 	
; 232  : 	if ( this->MissCheck(lpObj, lpTargetObj, iSkill, iSkillSuccess, bAllMiss) == FALSE )

  00542	8d 45 d8	 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  00545	50		 push	 eax
  00546	8b 4d f4	 mov	 ecx, DWORD PTR _iSkillSuccess$[ebp]
  00549	51		 push	 ecx
  0054a	8b 55 f8	 mov	 edx, DWORD PTR _iSkill$[ebp]
  0054d	52		 push	 edx
  0054e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00551	50		 push	 eax
  00552	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00555	51		 push	 ecx
  00556	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00559	e8 00 00 00 00	 call	 ?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ; CWeapon::MissCheck
  0055e	85 c0		 test	 eax, eax
  00560	75 07		 jne	 SHORT $LN36@Attack

; 233  : 	{
; 234  : 		return FALSE;

  00562	33 c0		 xor	 eax, eax
  00564	e9 32 05 00 00	 jmp	 $LN45@Attack
$LN36@Attack:

; 235  : 	}
; 236  : 
; 237  : 	if ( bAllMiss != FALSE )

  00569	83 7d d8 00	 cmp	 DWORD PTR _bAllMiss$[ebp], 0
  0056d	74 11		 je	 SHORT $LN35@Attack

; 238  : 	{
; 239  : 		iAttackDamage = (iAttackDamage * 30)/100;

  0056f	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  00572	6b c0 1e	 imul	 eax, 30			; 0000001eH
  00575	99		 cdq
  00576	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0057b	f7 f9		 idiv	 ecx
  0057d	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax
$LN35@Attack:

; 240  : 	}
; 241  : 
; 242  : 	if ( lpTargetObj->DamageMinus != 0 )

  00580	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00583	0f b6 88 70 01
	00 00		 movzx	 ecx, BYTE PTR [eax+368]
  0058a	85 c9		 test	 ecx, ecx
  0058c	74 26		 je	 SHORT $LN34@Attack

; 243  : 	{
; 244  : 		int lc11 = iAttackDamage;

  0058e	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  00591	89 45 d4	 mov	 DWORD PTR _lc11$219984[ebp], eax

; 245  : 		iAttackDamage -= (iAttackDamage * lpTargetObj->DamageMinus)/100;

  00594	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00597	0f b6 88 70 01
	00 00		 movzx	 ecx, BYTE PTR [eax+368]
  0059e	8b c1		 mov	 eax, ecx
  005a0	0f af 45 e4	 imul	 eax, DWORD PTR _iAttackDamage$[ebp]
  005a4	99		 cdq
  005a5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  005aa	f7 f9		 idiv	 ecx
  005ac	8b 55 e4	 mov	 edx, DWORD PTR _iAttackDamage$[ebp]
  005af	2b d0		 sub	 edx, eax
  005b1	89 55 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], edx
$LN34@Attack:

; 246  : 	}
; 247  : 
; 248  : 	int iTargetLevel = lpObj->Level / 10;

  005b4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005b7	0f bf 80 be 00
	00 00		 movsx	 eax, WORD PTR [eax+190]
  005be	99		 cdq
  005bf	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  005c4	f7 f9		 idiv	 ecx
  005c6	89 45 d0	 mov	 DWORD PTR _iTargetLevel$[ebp], eax

; 249  : 
; 250  : 	if ( iAttackDamage < iTargetLevel )

  005c9	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  005cc	3b 45 d0	 cmp	 eax, DWORD PTR _iTargetLevel$[ebp]
  005cf	7d 13		 jge	 SHORT $LN33@Attack

; 251  : 	{
; 252  : 		if ( iTargetLevel < 1 )

  005d1	83 7d d0 01	 cmp	 DWORD PTR _iTargetLevel$[ebp], 1
  005d5	7d 07		 jge	 SHORT $LN32@Attack

; 253  : 		{
; 254  : 			iTargetLevel = 1;

  005d7	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _iTargetLevel$[ebp], 1
$LN32@Attack:

; 255  : 		}
; 256  : 
; 257  : 		iAttackDamage = iTargetLevel;

  005de	8b 45 d0	 mov	 eax, DWORD PTR _iTargetLevel$[ebp]
  005e1	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax
$LN33@Attack:

; 258  : 	}
; 259  : 
; 260  : 	if ( lpTargetObj->m_SkillNumber == 18 )

  005e4	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  005e7	0f bf 88 d8 03
	00 00		 movsx	 ecx, WORD PTR [eax+984]
  005ee	83 f9 12	 cmp	 ecx, 18			; 00000012H
  005f1	75 0e		 jne	 SHORT $LN30@Attack

; 261  : 	{
; 262  : 		if ( iAttackDamage > 1 )

  005f3	83 7d e4 01	 cmp	 DWORD PTR _iAttackDamage$[ebp], 1
  005f7	7e 08		 jle	 SHORT $LN30@Attack

; 263  : 		{
; 264  : 			iAttackDamage = iAttackDamage >> 1;

  005f9	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  005fc	d1 f8		 sar	 eax, 1
  005fe	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax
$LN30@Attack:

; 265  : 		}
; 266  : 	}
; 267  : 
; 268  : 	if ( gObjAngelSprite(lpTargetObj) == TRUE )

  00601	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00604	50		 push	 eax
  00605	e8 00 00 00 00	 call	 ?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAngelSprite
  0060a	83 c4 04	 add	 esp, 4
  0060d	83 f8 01	 cmp	 eax, 1
  00610	75 2c		 jne	 SHORT $LN28@Attack

; 269  : 	{
; 270  : 		if ( iAttackDamage > 1 )

  00612	83 7d e4 01	 cmp	 DWORD PTR _iAttackDamage$[ebp], 1
  00616	7e 26		 jle	 SHORT $LN28@Attack

; 271  : 		{
; 272  : 			float lc13 = (float)(iAttackDamage * 8 ) / 10.0f;

  00618	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  0061b	c1 e0 03	 shl	 eax, 3
  0061e	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv431[ebp], eax
  00624	db 85 5c ff ff
	ff		 fild	 DWORD PTR tv431[ebp]
  0062a	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4024000000000000
  00630	d9 5d cc	 fstp	 DWORD PTR _lc13$219992[ebp]

; 273  : 			iAttackDamage = (int)( lc13 );

  00633	d9 45 cc	 fld	 DWORD PTR _lc13$219992[ebp]
  00636	e8 00 00 00 00	 call	 __ftol2_sse
  0063b	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax
$LN28@Attack:

; 274  : 		}
; 275  : 	}
; 276  : 
; 277  : 	if ( gObjWingSprite(lpTargetObj) == TRUE )

  0063e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00641	50		 push	 eax
  00642	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  00647	83 c4 04	 add	 esp, 4
  0064a	83 f8 01	 cmp	 eax, 1
  0064d	0f 85 91 00 00
	00		 jne	 $LN24@Attack

; 278  : 	{
; 279  : 		CItem * Wing = &lpTargetObj->pInventory[7];

  00653	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00656	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  0065c	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  00662	89 4d c8	 mov	 DWORD PTR _Wing$219996[ebp], ecx

; 280  : 
; 281  : 		if ( iAttackDamage > 1 )

  00665	83 7d e4 01	 cmp	 DWORD PTR _iAttackDamage$[ebp], 1
  00669	7e 79		 jle	 SHORT $LN24@Attack

; 282  : 		{
; 283  : 			if ( Wing->m_Type > ITEMGET(12,2) )

  0066b	8b 45 c8	 mov	 eax, DWORD PTR _Wing$219996[ebp]
  0066e	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00672	81 f9 02 18 00
	00		 cmp	 ecx, 6146		; 00001802H
  00678	7e 36		 jle	 SHORT $LN25@Attack

; 284  : 			{
; 285  : 				float lc15 = float((int)iAttackDamage *  (int)(75 - Wing->m_Level * 2) ) / 100.0f;

  0067a	8b 45 c8	 mov	 eax, DWORD PTR _Wing$219996[ebp]
  0067d	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00681	d1 e1		 shl	 ecx, 1
  00683	ba 4b 00 00 00	 mov	 edx, 75			; 0000004bH
  00688	2b d1		 sub	 edx, ecx
  0068a	0f af 55 e4	 imul	 edx, DWORD PTR _iAttackDamage$[ebp]
  0068e	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv446[ebp], edx
  00694	db 85 5c ff ff
	ff		 fild	 DWORD PTR tv446[ebp]
  0069a	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  006a0	d9 5d c4	 fstp	 DWORD PTR _lc15$219999[ebp]

; 286  : 				iAttackDamage = (int )lc15;

  006a3	d9 45 c4	 fld	 DWORD PTR _lc15$219999[ebp]
  006a6	e8 00 00 00 00	 call	 __ftol2_sse
  006ab	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax

; 287  : 			}
; 288  : 			else

  006ae	eb 34		 jmp	 SHORT $LN24@Attack
$LN25@Attack:

; 289  : 			{
; 290  : 				float lc16 = float((int)iAttackDamage *  (int)(88 - Wing->m_Level * 2) ) / 100.0f;

  006b0	8b 45 c8	 mov	 eax, DWORD PTR _Wing$219996[ebp]
  006b3	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  006b7	d1 e1		 shl	 ecx, 1
  006b9	ba 58 00 00 00	 mov	 edx, 88			; 00000058H
  006be	2b d1		 sub	 edx, ecx
  006c0	0f af 55 e4	 imul	 edx, DWORD PTR _iAttackDamage$[ebp]
  006c4	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv457[ebp], edx
  006ca	db 85 5c ff ff
	ff		 fild	 DWORD PTR tv457[ebp]
  006d0	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  006d6	d9 5d c0	 fstp	 DWORD PTR _lc16$220004[ebp]

; 291  : 				iAttackDamage = (int)lc16;

  006d9	d9 45 c0	 fld	 DWORD PTR _lc16$220004[ebp]
  006dc	e8 00 00 00 00	 call	 __ftol2_sse
  006e1	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax
$LN24@Attack:

; 292  : 			}
; 293  : 		}
; 294  : 	}
; 295  : 
; 296  : 	if ( gObjDenorantSprite(lpTargetObj) != FALSE )

  006e4	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  006e7	50		 push	 eax
  006e8	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  006ed	83 c4 04	 add	 esp, 4
  006f0	85 c0		 test	 eax, eax
  006f2	0f 84 9f 00 00
	00		 je	 $LN23@Attack

; 297  : 	{
; 298  : 		CItem * Dino = &lpTargetObj->pInventory[8];

  006f8	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  006fb	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  00701	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  00707	89 4d bc	 mov	 DWORD PTR _Dino$220009[ebp], ecx

; 299  : 
; 300  : 		int ReduceDamage = 90 - Dino->IsDinorantReduceAttackDamaege();

  0070a	8b 4d bc	 mov	 ecx, DWORD PTR _Dino$220009[ebp]
  0070d	e8 00 00 00 00	 call	 ?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ ; CItem::IsDinorantReduceAttackDamaege
  00712	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00717	2b c8		 sub	 ecx, eax
  00719	89 4d b8	 mov	 DWORD PTR _ReduceDamage$220010[ebp], ecx

; 301  : 
; 302  : 		lpObj->Life -= 1.0f;

  0071c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0071f	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  00725	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  0072b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0072e	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 303  : 
; 304  : 		if ( lpObj->Life < 0.0f )

  00734	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00737	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  0073d	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00743	df e0		 fnstsw	 ax
  00745	f6 c4 05	 test	 ah, 5
  00748	7a 0d		 jp	 SHORT $LN22@Attack

; 305  : 		{
; 306  : 			lpObj->Life = 0;

  0074a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0074d	d9 ee		 fldz
  0074f	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]

; 307  : 		}
; 308  : 		else

  00755	eb 12		 jmp	 SHORT $LN21@Attack
$LN22@Attack:

; 309  : 		{
; 310  : 			iAttackDamage = (iAttackDamage * ReduceDamage)/100;

  00757	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  0075a	0f af 45 b8	 imul	 eax, DWORD PTR _ReduceDamage$220010[ebp]
  0075e	99		 cdq
  0075f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00764	f7 f9		 idiv	 ecx
  00766	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax
$LN21@Attack:

; 311  : 		}
; 312  : 
; 313  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, (BYTE)-1, 0, lpObj->iShield);

  00769	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0076c	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00772	51		 push	 ecx
  00773	6a 00		 push	 0
  00775	68 ff 00 00 00	 push	 255			; 000000ffH
  0077a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0077d	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  00783	e8 00 00 00 00	 call	 __ftol2_sse
  00788	50		 push	 eax
  00789	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0078c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0078e	51		 push	 ecx
  0078f	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00794	83 c4 14	 add	 esp, 20			; 00000014H
$LN23@Attack:

; 314  : 	}
; 315  : 
; 316  : 	if ( gObjDarkHorse(lpTargetObj) != FALSE )

  00797	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0079a	50		 push	 eax
  0079b	e8 00 00 00 00	 call	 ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDarkHorse
  007a0	83 c4 04	 add	 esp, 4
  007a3	85 c0		 test	 eax, eax
  007a5	0f 84 ce 00 00
	00		 je	 $LN20@Attack

; 317  : 	{
; 318  : 		CItem * DarkHorse = &lpTargetObj->pInventory[8];

  007ab	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  007ae	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  007b4	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  007ba	89 4d b4	 mov	 DWORD PTR _DarkHorse$220015[ebp], ecx

; 319  : 
; 320  : 		int DHPercent = 100-(DarkHorse->m_PetItem_Level+30)/2;

  007bd	8b 45 b4	 mov	 eax, DWORD PTR _DarkHorse$220015[ebp]
  007c0	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [eax+188]
  007c6	83 c0 1e	 add	 eax, 30			; 0000001eH
  007c9	99		 cdq
  007ca	2b c2		 sub	 eax, edx
  007cc	d1 f8		 sar	 eax, 1
  007ce	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  007d3	2b c8		 sub	 ecx, eax
  007d5	89 4d b0	 mov	 DWORD PTR _DHPercent$220016[ebp], ecx

; 321  : #ifdef _WINGS_DAMAGE_
; 322  : 		gWingsDamage.SetCharHorseAttack(lpTargetObj->m_Index, DarkHorse->m_Type, DarkHorse->m_PetItem_Level, DHPercent);

  007d8	8d 45 b0	 lea	 eax, DWORD PTR _DHPercent$220016[ebp]
  007db	50		 push	 eax
  007dc	8b 4d b4	 mov	 ecx, DWORD PTR _DarkHorse$220015[ebp]
  007df	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  007e5	52		 push	 edx
  007e6	8b 45 b4	 mov	 eax, DWORD PTR _DarkHorse$220015[ebp]
  007e9	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  007ed	51		 push	 ecx
  007ee	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  007f1	8b 02		 mov	 eax, DWORD PTR [edx]
  007f3	50		 push	 eax
  007f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWingsDamage@@3VcWingsDamage@@A ; gWingsDamage
  007f9	e8 00 00 00 00	 call	 ?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z ; cWingsDamage::SetCharHorseAttack

; 323  : #endif
; 324  : 		lpTargetObj->Life -= 1.0f;

  007fe	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00801	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  00807	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  0080d	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00810	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 325  : 
; 326  : 		if ( lpTargetObj->Life < 0.0f )

  00816	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00819	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  0081f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00825	df e0		 fnstsw	 ax
  00827	f6 c4 05	 test	 ah, 5
  0082a	7a 0d		 jp	 SHORT $LN19@Attack

; 327  : 		{
; 328  : 			lpTargetObj->Life = 0;

  0082c	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0082f	d9 ee		 fldz
  00831	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]

; 329  : 		}
; 330  : 		else

  00837	eb 12		 jmp	 SHORT $LN18@Attack
$LN19@Attack:

; 331  : 		{
; 332  : 			iAttackDamage = (iAttackDamage * DHPercent)/100;

  00839	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  0083c	0f af 45 b0	 imul	 eax, DWORD PTR _DHPercent$220016[ebp]
  00840	99		 cdq
  00841	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00846	f7 f9		 idiv	 ecx
  00848	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax
$LN18@Attack:

; 333  : 		}
; 334  : 
; 335  : 		GCReFillSend(lpTargetObj->m_Index, lpTargetObj->Life, (BYTE)-1, 0, lpTargetObj->iShield);

  0084b	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0084e	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00854	51		 push	 ecx
  00855	6a 00		 push	 0
  00857	68 ff 00 00 00	 push	 255			; 000000ffH
  0085c	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  0085f	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  00865	e8 00 00 00 00	 call	 __ftol2_sse
  0086a	50		 push	 eax
  0086b	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0086e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00870	51		 push	 ecx
  00871	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00876	83 c4 14	 add	 esp, 20			; 00000014H
$LN20@Attack:

; 336  : 	}
; 337  : 
; 338  : 	if ( lpTargetObj->Live != FALSE )

  00879	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0087c	0f b6 48 6a	 movzx	 ecx, BYTE PTR [eax+106]
  00880	85 c9		 test	 ecx, ecx
  00882	0f 84 19 01 00
	00		 je	 $LN11@Attack

; 339  : 	{
; 340  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_WIZARD_DEFENSE) == 1 && iAttackDamage > 0)

  00888	6a 04		 push	 4
  0088a	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0088d	50		 push	 eax
  0088e	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00893	83 c4 08	 add	 esp, 8
  00896	0f b6 c8	 movzx	 ecx, al
  00899	83 f9 01	 cmp	 ecx, 1
  0089c	0f 85 c9 00 00
	00		 jne	 $LN13@Attack
  008a2	83 7d e4 00	 cmp	 DWORD PTR _iAttackDamage$[ebp], 0
  008a6	0f 8e bf 00 00
	00		 jle	 $LN13@Attack

; 341  : 		{
; 342  : 			int iWizardSkillDefense = 0;

  008ac	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _iWizardSkillDefense$220022[ebp], 0

; 343  : 			int iWizardSkillTime = 0;

  008b3	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _iWizardSkillTime$220023[ebp], 0

; 344  : 
; 345  : 			gObjUpdateAppliedBuffEffect(lpTargetObj, AT_WIZARD_DEFENSE, &iWizardSkillDefense, &iWizardSkillTime);

  008ba	8d 45 a8	 lea	 eax, DWORD PTR _iWizardSkillTime$220023[ebp]
  008bd	50		 push	 eax
  008be	8d 4d ac	 lea	 ecx, DWORD PTR _iWizardSkillDefense$220022[ebp]
  008c1	51		 push	 ecx
  008c2	6a 04		 push	 4
  008c4	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  008c7	52		 push	 edx
  008c8	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect
  008cd	83 c4 10	 add	 esp, 16			; 00000010H

; 346  : 
; 347  : 			int replacemana = 0;

  008d0	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _replacemana$220024[ebp], 0

; 348  : 
; 349  : 			if(iWizardSkillTime > 0)

  008d7	83 7d a8 00	 cmp	 DWORD PTR _iWizardSkillTime$220023[ebp], 0
  008db	7e 1c		 jle	 SHORT $LN15@Attack

; 350  : 			{
; 351  : 				replacemana = lpTargetObj->Mana * iWizardSkillTime / 1000;

  008dd	db 45 a8	 fild	 DWORD PTR _iWizardSkillTime$220023[ebp]
  008e0	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  008e3	d8 88 10 01 00
	00		 fmul	 DWORD PTR [eax+272]
  008e9	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@408f400000000000
  008ef	e8 00 00 00 00	 call	 __ftol2_sse
  008f4	89 45 a4	 mov	 DWORD PTR _replacemana$220024[ebp], eax

; 352  : 			}
; 353  : 			else

  008f7	eb 19		 jmp	 SHORT $LN14@Attack
$LN15@Attack:

; 354  : 			{
; 355  : 				replacemana = lpTargetObj->Mana * 2 / 100;

  008f9	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  008fc	d9 80 10 01 00
	00		 fld	 DWORD PTR [eax+272]
  00902	dc c0		 fadd	 ST(0), ST(0)
  00904	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0090a	e8 00 00 00 00	 call	 __ftol2_sse
  0090f	89 45 a4	 mov	 DWORD PTR _replacemana$220024[ebp], eax
$LN14@Attack:

; 356  : 			}
; 357  : 
; 358  : 			if ( replacemana < lpTargetObj->Mana )

  00912	db 45 a4	 fild	 DWORD PTR _replacemana$220024[ebp]
  00915	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00918	d9 80 10 01 00
	00		 fld	 DWORD PTR [eax+272]
  0091e	de d9		 fcompp
  00920	df e0		 fnstsw	 ax
  00922	f6 c4 41	 test	 ah, 65			; 00000041H
  00925	75 44		 jne	 SHORT $LN13@Attack

; 359  : 			{
; 360  : 				lpTargetObj->Mana -= replacemana;

  00927	db 45 a4	 fild	 DWORD PTR _replacemana$220024[ebp]
  0092a	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0092d	d8 a8 10 01 00
	00		 fsubr	 DWORD PTR [eax+272]
  00933	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00936	d9 99 10 01 00
	00		 fstp	 DWORD PTR [ecx+272]

; 361  : 
; 362  : 				int decattackdamage = 0;

  0093c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _decattackdamage$220028[ebp], 0

; 363  : 
; 364  : 				if(iWizardSkillDefense > 0)

  00943	83 7d ac 00	 cmp	 DWORD PTR _iWizardSkillDefense$220022[ebp], 0
  00947	7e 12		 jle	 SHORT $LN12@Attack

; 365  : 				{
; 366  : 					decattackdamage = iAttackDamage * iWizardSkillDefense / 100;

  00949	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  0094c	0f af 45 ac	 imul	 eax, DWORD PTR _iWizardSkillDefense$220022[ebp]
  00950	99		 cdq
  00951	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00956	f7 f9		 idiv	 ecx
  00958	89 45 a0	 mov	 DWORD PTR _decattackdamage$220028[ebp], eax
$LN12@Attack:

; 367  : 				}
; 368  : 
; 369  : 				iAttackDamage -= decattackdamage;

  0095b	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  0095e	2b 45 a0	 sub	 eax, DWORD PTR _decattackdamage$220028[ebp]
  00961	89 45 e4	 mov	 DWORD PTR _iAttackDamage$[ebp], eax

; 370  : 				ManaChange = TRUE;

  00964	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _ManaChange$[ebp], 1
$LN13@Attack:

; 371  : 			}
; 372  : 		}
; 373  : 
; 374  : 		lpTargetObj->Life -= iAttackDamage;

  0096b	db 45 e4	 fild	 DWORD PTR _iAttackDamage$[ebp]
  0096e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00971	d8 a8 fc 00 00
	00		 fsubr	 DWORD PTR [eax+252]
  00977	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0097a	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 375  : 
; 376  : 		if ( lpTargetObj->Life < 0.0f )

  00980	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00983	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  00989	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0098f	df e0		 fnstsw	 ax
  00991	f6 c4 05	 test	 ah, 5
  00994	7a 0b		 jp	 SHORT $LN11@Attack

; 377  : 		{
; 378  : 			lpTargetObj->Life = 0;

  00996	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00999	d9 ee		 fldz
  0099b	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]
$LN11@Attack:

; 379  : 		}
; 380  : 	}
; 381  : 
; 382  : 	if ( iAttackDamage >= 1 )

  009a1	83 7d e4 01	 cmp	 DWORD PTR _iAttackDamage$[ebp], 1
  009a5	7c 1c		 jl	 SHORT $LN9@Attack

; 383  : 	{
; 384  : 		if ( lpTargetObj->Type == OBJ_USER )

  009a7	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  009aa	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  009ae	83 f9 01	 cmp	 ecx, 1
  009b1	75 10		 jne	 SHORT $LN9@Attack

; 385  : 		{
; 386  : 			gObjArmorRandomDurDown(lpTargetObj, lpObj);

  009b3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009b6	50		 push	 eax
  009b7	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  009ba	51		 push	 ecx
  009bb	e8 00 00 00 00	 call	 ?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z ; gObjArmorRandomDurDown
  009c0	83 c4 08	 add	 esp, 8
$LN9@Attack:

; 387  : 		}
; 388  : 	}
; 389  : 
; 390  : 	if ( iAttackDamage >= 5 )

  009c3	83 7d e4 05	 cmp	 DWORD PTR _iAttackDamage$[ebp], 5
  009c7	7c 63		 jl	 SHORT $LN3@Attack

; 391  : 	{
; 392  : 		if ( lpTargetObj->Type == OBJ_MONSTER )

  009c9	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  009cc	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  009d0	83 f9 02	 cmp	 ecx, 2
  009d3	75 2b		 jne	 SHORT $LN7@Attack

; 393  : 		{
; 394  : 			if ( (rand()%26) == 0 )

  009d5	e8 00 00 00 00	 call	 _rand
  009da	99		 cdq
  009db	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  009e0	f7 f9		 idiv	 ecx
  009e2	85 d2		 test	 edx, edx
  009e4	75 18		 jne	 SHORT $LN6@Attack

; 395  : 			{
; 396  : 				gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  009e6	6a 00		 push	 0
  009e8	6a 64		 push	 100			; 00000064H
  009ea	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  009ef	51		 push	 ecx
  009f0	6a 04		 push	 4
  009f2	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  009f5	52		 push	 edx
  009f6	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  009fb	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@Attack:

; 397  : 			}
; 398  : 		}

  009fe	eb 2c		 jmp	 SHORT $LN3@Attack
$LN7@Attack:

; 399  : 		else if ( (rand()%4) == 0 )

  00a00	e8 00 00 00 00	 call	 _rand
  00a05	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00a0a	79 05		 jns	 SHORT $LN47@Attack
  00a0c	48		 dec	 eax
  00a0d	83 c8 fc	 or	 eax, -4			; fffffffcH
  00a10	40		 inc	 eax
$LN47@Attack:
  00a11	85 c0		 test	 eax, eax
  00a13	75 17		 jne	 SHORT $LN3@Attack

; 400  : 		{
; 401  : 			if ( gObjUniriaSprite(lpTargetObj) == FALSE )

  00a15	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00a18	50		 push	 eax
  00a19	e8 00 00 00 00	 call	 ?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjUniriaSprite
  00a1e	83 c4 04	 add	 esp, 4
  00a21	85 c0		 test	 eax, eax
  00a23	75 07		 jne	 SHORT $LN3@Attack

; 402  : 			{
; 403  : 				MSBFlag = TRUE;

  00a25	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _MSBFlag$[ebp], 1
$LN3@Attack:

; 404  : 			}
; 405  : 		}
; 406  : 	}
; 407  : 
; 408  : 	if ( ManaChange != FALSE )

  00a2c	83 7d ec 00	 cmp	 DWORD PTR _ManaChange$[ebp], 0
  00a30	74 2e		 je	 SHORT $LN2@Attack

; 409  : 	{
; 410  : 		GCManaSend(lpTargetObj->m_Index, lpTargetObj->Mana, (BYTE)-1, 0, lpTargetObj->BP);

  00a32	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00a35	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  00a3b	51		 push	 ecx
  00a3c	6a 00		 push	 0
  00a3e	68 ff 00 00 00	 push	 255			; 000000ffH
  00a43	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00a46	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  00a4c	e8 00 00 00 00	 call	 __ftol2_sse
  00a51	50		 push	 eax
  00a52	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00a55	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a57	51		 push	 ecx
  00a58	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00a5d	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@Attack:

; 411  : 	}
; 412  : 
; 413  : 	lpObj->m_Rest = 0;

  00a60	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a63	c6 80 25 02 00
	00 00		 mov	 BYTE PTR [eax+549], 0

; 414  : 
; 415  : 	if ( iAttackDamage > 0 )

  00a6a	83 7d e4 00	 cmp	 DWORD PTR _iAttackDamage$[ebp], 0
  00a6e	7e 26		 jle	 SHORT $LN1@Attack

; 416  : 	{
; 417  : 		gObjLifeCheck(lpTargetObj, lpObj, iAttackDamage, 0, MSBFlag, MsgDamage, iSkill, 0);

  00a70	6a 00		 push	 0
  00a72	0f b7 45 f8	 movzx	 eax, WORD PTR _iSkill$[ebp]
  00a76	50		 push	 eax
  00a77	0f b6 4d f3	 movzx	 ecx, BYTE PTR _MsgDamage$[ebp]
  00a7b	51		 push	 ecx
  00a7c	8b 55 e8	 mov	 edx, DWORD PTR _MSBFlag$[ebp]
  00a7f	52		 push	 edx
  00a80	6a 00		 push	 0
  00a82	8b 45 e4	 mov	 eax, DWORD PTR _iAttackDamage$[ebp]
  00a85	50		 push	 eax
  00a86	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00a89	51		 push	 ecx
  00a8a	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00a8d	52		 push	 edx
  00a8e	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  00a93	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@Attack:

; 418  : 	}
; 419  : 
; 420  : 	return TRUE;

  00a96	b8 01 00 00 00	 mov	 eax, 1
$LN45@Attack:

; 421  : }

  00a9b	5f		 pop	 edi
  00a9c	5e		 pop	 esi
  00a9d	5b		 pop	 ebx
  00a9e	8b e5		 mov	 esp, ebp
  00aa0	5d		 pop	 ebp
  00aa1	c2 14 00	 ret	 20			; 00000014H
?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ENDP ; CWeapon::Attack
_TEXT	ENDS
PUBLIC	?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z	; CWeapon::AddWeaponDamagedTargetInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$220048 = -8						; size = 4
_this$ = -4						; size = 4
_iWeaponIndex$ = 8					; size = 4
_iTargetIndex$ = 12					; size = 4
_iDelayTime$ = 16					; size = 4
?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z PROC	; CWeapon::AddWeaponDamagedTargetInfo
; _this$ = ecx

; 426  : {

  00ab0	55		 push	 ebp
  00ab1	8b ec		 mov	 ebp, esp
  00ab3	83 ec 48	 sub	 esp, 72			; 00000048H
  00ab6	53		 push	 ebx
  00ab7	56		 push	 esi
  00ab8	57		 push	 edi
  00ab9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 427  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00abc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$220048[ebp], 0
  00ac3	eb 09		 jmp	 SHORT $LN4@AddWeaponD
$LN3@AddWeaponD:
  00ac5	8b 45 f8	 mov	 eax, DWORD PTR _i$220048[ebp]
  00ac8	83 c0 01	 add	 eax, 1
  00acb	89 45 f8	 mov	 DWORD PTR _i$220048[ebp], eax
$LN4@AddWeaponD:
  00ace	83 7d f8 64	 cmp	 DWORD PTR _i$220048[ebp], 100 ; 00000064H
  00ad2	7d 60		 jge	 SHORT $LN2@AddWeaponD

; 428  : 	{
; 429  : 		if ( this->m_WeaponDamagedTargetInfo[i].m_IsUsed == FALSE )

  00ad4	8b 45 f8	 mov	 eax, DWORD PTR _i$220048[ebp]
  00ad7	c1 e0 04	 shl	 eax, 4
  00ada	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00add	83 7c 01 10 00	 cmp	 DWORD PTR [ecx+eax+16], 0
  00ae2	75 4e		 jne	 SHORT $LN1@AddWeaponD

; 430  : 		{
; 431  : 			this->m_WeaponDamagedTargetInfo[i].m_iWeaponObjIndex = iWeaponIndex;

  00ae4	8b 45 f8	 mov	 eax, DWORD PTR _i$220048[ebp]
  00ae7	c1 e0 04	 shl	 eax, 4
  00aea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aed	8b 55 08	 mov	 edx, DWORD PTR _iWeaponIndex$[ebp]
  00af0	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 432  : 			this->m_WeaponDamagedTargetInfo[i].m_iTargetObjIndex = iTargetIndex;

  00af4	8b 45 f8	 mov	 eax, DWORD PTR _i$220048[ebp]
  00af7	c1 e0 04	 shl	 eax, 4
  00afa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00afd	8b 55 0c	 mov	 edx, DWORD PTR _iTargetIndex$[ebp]
  00b00	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx

; 433  : 			this->m_WeaponDamagedTargetInfo[i].m_iDamageDealingTime = GetTickCount() + iDelayTime;

  00b04	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00b0a	03 45 10	 add	 eax, DWORD PTR _iDelayTime$[ebp]
  00b0d	8b 4d f8	 mov	 ecx, DWORD PTR _i$220048[ebp]
  00b10	c1 e1 04	 shl	 ecx, 4
  00b13	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00b16	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 434  : 			this->m_WeaponDamagedTargetInfo[i].m_IsUsed = TRUE;

  00b1a	8b 45 f8	 mov	 eax, DWORD PTR _i$220048[ebp]
  00b1d	c1 e0 04	 shl	 eax, 4
  00b20	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b23	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 435  : 
; 436  : 			return TRUE;

  00b2b	b8 01 00 00 00	 mov	 eax, 1
  00b30	eb 04		 jmp	 SHORT $LN5@AddWeaponD
$LN1@AddWeaponD:

; 437  : 		}
; 438  : 	}

  00b32	eb 91		 jmp	 SHORT $LN3@AddWeaponD
$LN2@AddWeaponD:

; 439  : 
; 440  : 	return FALSE;

  00b34	33 c0		 xor	 eax, eax
$LN5@AddWeaponD:

; 441  : }

  00b36	5f		 pop	 edi
  00b37	5e		 pop	 esi
  00b38	5b		 pop	 ebx
  00b39	8b e5		 mov	 esp, ebp
  00b3b	5d		 pop	 ebp
  00b3c	c2 0c 00	 ret	 12			; 0000000cH
?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z ENDP	; CWeapon::AddWeaponDamagedTargetInfo
_TEXT	ENDS
PUBLIC	?WeaponAttackProc@CWeapon@@QAEXXZ		; CWeapon::WeaponAttackProc
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv130 = -84						; size = 4
_lpWeaponObj$220063 = -16				; size = 4
_lpTargetObj$220062 = -12				; size = 4
_i$220056 = -8						; size = 4
_this$ = -4						; size = 4
?WeaponAttackProc@CWeapon@@QAEXXZ PROC			; CWeapon::WeaponAttackProc
; _this$ = ecx

; 446  : {

  00b40	55		 push	 ebp
  00b41	8b ec		 mov	 ebp, esp
  00b43	83 ec 54	 sub	 esp, 84			; 00000054H
  00b46	53		 push	 ebx
  00b47	56		 push	 esi
  00b48	57		 push	 edi
  00b49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 447  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00b4c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$220056[ebp], 0
  00b53	eb 09		 jmp	 SHORT $LN7@WeaponAtta
$LN6@WeaponAtta:
  00b55	8b 45 f8	 mov	 eax, DWORD PTR _i$220056[ebp]
  00b58	83 c0 01	 add	 eax, 1
  00b5b	89 45 f8	 mov	 DWORD PTR _i$220056[ebp], eax
$LN7@WeaponAtta:
  00b5e	83 7d f8 64	 cmp	 DWORD PTR _i$220056[ebp], 100 ; 00000064H
  00b62	0f 8d f6 00 00
	00		 jge	 $LN8@WeaponAtta

; 448  : 	{
; 449  : 		if ( this->m_WeaponDamagedTargetInfo[i].m_IsUsed == TRUE )

  00b68	8b 45 f8	 mov	 eax, DWORD PTR _i$220056[ebp]
  00b6b	c1 e0 04	 shl	 eax, 4
  00b6e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b71	83 7c 01 10 01	 cmp	 DWORD PTR [ecx+eax+16], 1
  00b76	0f 85 dd 00 00
	00		 jne	 $LN4@WeaponAtta

; 450  : 		{
; 451  : 			if ( this->m_WeaponDamagedTargetInfo[i].m_iDamageDealingTime > GetTickCount() )

  00b7c	8b 75 f8	 mov	 esi, DWORD PTR _i$220056[ebp]
  00b7f	c1 e6 04	 shl	 esi, 4
  00b82	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00b88	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b8b	39 44 31 0c	 cmp	 DWORD PTR [ecx+esi+12], eax
  00b8f	76 02		 jbe	 SHORT $LN3@WeaponAtta

; 452  : 			{
; 453  : 				continue;

  00b91	eb c2		 jmp	 SHORT $LN6@WeaponAtta
$LN3@WeaponAtta:

; 454  : 			}
; 455  : 
; 456  : 			LPOBJ lpTargetObj = &gObj[this->m_WeaponDamagedTargetInfo[i].m_iTargetObjIndex];

  00b93	8b 45 f8	 mov	 eax, DWORD PTR _i$220056[ebp]
  00b96	c1 e0 04	 shl	 eax, 4
  00b99	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b9c	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  00ba0	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  00ba6	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00bac	89 55 f4	 mov	 DWORD PTR _lpTargetObj$220062[ebp], edx

; 457  : 			LPOBJ lpWeaponObj = & gObj[this->m_WeaponDamagedTargetInfo[i].m_iWeaponObjIndex];

  00baf	8b 45 f8	 mov	 eax, DWORD PTR _i$220056[ebp]
  00bb2	c1 e0 04	 shl	 eax, 4
  00bb5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bb8	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00bbc	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  00bc2	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00bc8	89 55 f0	 mov	 DWORD PTR _lpWeaponObj$220063[ebp], edx

; 458  : 
; 459  : 			if ( gObjIsConnected(lpTargetObj) == FALSE )

  00bcb	8b 45 f4	 mov	 eax, DWORD PTR _lpTargetObj$220062[ebp]
  00bce	50		 push	 eax
  00bcf	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00bd4	83 c4 04	 add	 esp, 4
  00bd7	85 c0		 test	 eax, eax
  00bd9	75 17		 jne	 SHORT $LN2@WeaponAtta

; 460  : 			{
; 461  : 				this->m_WeaponDamagedTargetInfo[i].RESET();

  00bdb	8b 45 f8	 mov	 eax, DWORD PTR _i$220056[ebp]
  00bde	c1 e0 04	 shl	 eax, 4
  00be1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00be4	8d 4c 01 04	 lea	 ecx, DWORD PTR [ecx+eax+4]
  00be8	e8 00 00 00 00	 call	 ?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ ; ST_WEAPON_DAMAGED_TARGET_INFO::RESET

; 462  : 				continue;

  00bed	e9 63 ff ff ff	 jmp	 $LN6@WeaponAtta
$LN2@WeaponAtta:

; 463  : 			}
; 464  : 
; 465  : 			if (  OBJMAX_RANGE(lpWeaponObj->m_Index) == FALSE )

  00bf2	8b 45 f0	 mov	 eax, DWORD PTR _lpWeaponObj$220063[ebp]
  00bf5	83 38 00	 cmp	 DWORD PTR [eax], 0
  00bf8	7d 09		 jge	 SHORT $LN10@WeaponAtta
  00bfa	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
  00c01	eb 11		 jmp	 SHORT $LN11@WeaponAtta
$LN10@WeaponAtta:
  00c03	8b 4d f0	 mov	 ecx, DWORD PTR _lpWeaponObj$220063[ebp]
  00c06	33 d2		 xor	 edx, edx
  00c08	81 39 97 3a 00
	00		 cmp	 DWORD PTR [ecx], 14999	; 00003a97H
  00c0e	0f 9e c2	 setle	 dl
  00c11	89 55 ac	 mov	 DWORD PTR tv130[ebp], edx
$LN11@WeaponAtta:
  00c14	83 7d ac 00	 cmp	 DWORD PTR tv130[ebp], 0
  00c18	75 17		 jne	 SHORT $LN1@WeaponAtta

; 466  : 			{
; 467  : 				this->m_WeaponDamagedTargetInfo[i].RESET();

  00c1a	8b 45 f8	 mov	 eax, DWORD PTR _i$220056[ebp]
  00c1d	c1 e0 04	 shl	 eax, 4
  00c20	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c23	8d 4c 01 04	 lea	 ecx, DWORD PTR [ecx+eax+4]
  00c27	e8 00 00 00 00	 call	 ?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ ; ST_WEAPON_DAMAGED_TARGET_INFO::RESET

; 468  : 				continue;

  00c2c	e9 24 ff ff ff	 jmp	 $LN6@WeaponAtta
$LN1@WeaponAtta:

; 469  : 			}
; 470  : 
; 471  : 			this->Attack(lpWeaponObj, lpTargetObj, NULL, FALSE, 0);

  00c31	6a 00		 push	 0
  00c33	6a 00		 push	 0
  00c35	6a 00		 push	 0
  00c37	8b 45 f4	 mov	 eax, DWORD PTR _lpTargetObj$220062[ebp]
  00c3a	50		 push	 eax
  00c3b	8b 4d f0	 mov	 ecx, DWORD PTR _lpWeaponObj$220063[ebp]
  00c3e	51		 push	 ecx
  00c3f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c42	e8 00 00 00 00	 call	 ?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ; CWeapon::Attack

; 472  : 
; 473  : 			this->m_WeaponDamagedTargetInfo[i].RESET();

  00c47	8b 45 f8	 mov	 eax, DWORD PTR _i$220056[ebp]
  00c4a	c1 e0 04	 shl	 eax, 4
  00c4d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c50	8d 4c 01 04	 lea	 ecx, DWORD PTR [ecx+eax+4]
  00c54	e8 00 00 00 00	 call	 ?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ ; ST_WEAPON_DAMAGED_TARGET_INFO::RESET
$LN4@WeaponAtta:

; 474  : 		}
; 475  : 	}

  00c59	e9 f7 fe ff ff	 jmp	 $LN6@WeaponAtta
$LN8@WeaponAtta:

; 476  : 
; 477  : }

  00c5e	5f		 pop	 edi
  00c5f	5e		 pop	 esi
  00c60	5b		 pop	 ebx
  00c61	8b e5		 mov	 esp, ebp
  00c63	5d		 pop	 ebp
  00c64	c3		 ret	 0
?WeaponAttackProc@CWeapon@@QAEXXZ ENDP			; CWeapon::WeaponAttackProc
_TEXT	ENDS
PUBLIC	?WeaponAct@CWeapon@@QAEXH@Z			; CWeapon::WeaponAct
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$220070 = -8						; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?WeaponAct@CWeapon@@QAEXH@Z PROC			; CWeapon::WeaponAct
; _this$ = ecx

; 482  : {

  00c70	55		 push	 ebp
  00c71	8b ec		 mov	 ebp, esp
  00c73	83 ec 48	 sub	 esp, 72			; 00000048H
  00c76	53		 push	 ebx
  00c77	56		 push	 esi
  00c78	57		 push	 edi
  00c79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 483  : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00c7c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$220070[ebp], 0
  00c83	eb 09		 jmp	 SHORT $LN6@WeaponAct
$LN5@WeaponAct:
  00c85	8b 45 f8	 mov	 eax, DWORD PTR _i$220070[ebp]
  00c88	83 c0 01	 add	 eax, 1
  00c8b	89 45 f8	 mov	 DWORD PTR _i$220070[ebp], eax
$LN6@WeaponAct:
  00c8e	83 7d f8 32	 cmp	 DWORD PTR _i$220070[ebp], 50 ; 00000032H
  00c92	7d 57		 jge	 SHORT $LN7@WeaponAct

; 484  : 	{
; 485  : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == TRUE )

  00c94	8b 45 f8	 mov	 eax, DWORD PTR _i$220070[ebp]
  00c97	6b c0 14	 imul	 eax, 20			; 00000014H
  00c9a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c9d	83 bc 01 54 06
	00 00 01	 cmp	 DWORD PTR [ecx+eax+1620], 1
  00ca5	75 42		 jne	 SHORT $LN3@WeaponAct

; 486  : 		{
; 487  : 			if ( this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex == iIndex )

  00ca7	8b 45 f8	 mov	 eax, DWORD PTR _i$220070[ebp]
  00caa	6b c0 14	 imul	 eax, 20			; 00000014H
  00cad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cb0	8b 94 01 44 06
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1604]
  00cb7	3b 55 08	 cmp	 edx, DWORD PTR _iIndex$[ebp]
  00cba	75 2d		 jne	 SHORT $LN3@WeaponAct

; 488  : 			{
; 489  : 				if ( this->m_WeaponCalDamageInfo[i].m_iLimitTime < GetTickCount() )

  00cbc	8b 75 f8	 mov	 esi, DWORD PTR _i$220070[ebp]
  00cbf	6b f6 14	 imul	 esi, 20			; 00000014H
  00cc2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00cc8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ccb	39 84 31 50 06
	00 00		 cmp	 DWORD PTR [ecx+esi+1616], eax
  00cd2	73 15		 jae	 SHORT $LN3@WeaponAct

; 490  : 				{
; 491  : 					this->m_WeaponCalDamageInfo[i].RESET();

  00cd4	8b 45 f8	 mov	 eax, DWORD PTR _i$220070[ebp]
  00cd7	6b c0 14	 imul	 eax, 20			; 00000014H
  00cda	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cdd	8d 8c 01 44 06
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+1604]
  00ce4	e8 00 00 00 00	 call	 ?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ ; ST_WEAPON_CAL_DAMAGER_INFO::RESET
$LN3@WeaponAct:

; 492  : 				}
; 493  : 			}
; 494  : 		}
; 495  : 	}

  00ce9	eb 9a		 jmp	 SHORT $LN5@WeaponAct
$LN7@WeaponAct:

; 496  : }

  00ceb	5f		 pop	 edi
  00cec	5e		 pop	 esi
  00ced	5b		 pop	 ebx
  00cee	8b e5		 mov	 esp, ebp
  00cf0	5d		 pop	 ebp
  00cf1	c2 04 00	 ret	 4
?WeaponAct@CWeapon@@QAEXH@Z ENDP			; CWeapon::WeaponAct
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_CsNPC_Weapon@@YAXXZ
text$yc	SEGMENT
??__Eg_CsNPC_Weapon@@YAXXZ PROC				; `dynamic initializer for 'g_CsNPC_Weapon'', COMDAT

; 11   : CWeapon g_CsNPC_Weapon;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Weapon@@3VCWeapon@@A ; g_CsNPC_Weapon
  0000e	e8 00 00 00 00	 call	 ??0CWeapon@@QAE@XZ	; CWeapon::CWeapon
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_Weapon@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_Weapon''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_CsNPC_Weapon@@YAXXZ ENDP				; `dynamic initializer for 'g_CsNPC_Weapon''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_CsNPC_Weapon@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_Weapon@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CsNPC_Weapon'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Weapon@@3VCWeapon@@A ; g_CsNPC_Weapon
  0000e	e8 00 00 00 00	 call	 ??1CWeapon@@UAE@XZ	; CWeapon::~CWeapon
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_CsNPC_Weapon@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CsNPC_Weapon''
text$yd	ENDS
PUBLIC	?g_CsNPC_Weapon@@3VCWeapon@@A			; g_CsNPC_Weapon
_BSS	SEGMENT
?g_CsNPC_Weapon@@3VCWeapon@@A DB 0a2cH DUP (?)		; g_CsNPC_Weapon
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CsNPC_Weapon$initializer$ DD FLAT:??__Eg_CsNPC_Weapon@@YAXXZ
CRT$XCU	ENDS
END
