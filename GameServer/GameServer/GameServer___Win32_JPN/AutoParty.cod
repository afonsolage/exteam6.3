; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\AutoParty.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
	DD	0190H
	DD	0257H
	DD	0190H
	DD	0257H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0cAutoParty@@QAE@XZ				; cAutoParty::cAutoParty
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\autoparty.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0cAutoParty@@QAE@XZ PROC				; cAutoParty::cAutoParty
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 
; 23   : }

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0cAutoParty@@QAE@XZ ENDP				; cAutoParty::cAutoParty
_TEXT	ENDS
PUBLIC	??1cAutoParty@@QAE@XZ				; cAutoParty::~cAutoParty
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1cAutoParty@@QAE@XZ PROC				; cAutoParty::~cAutoParty
; _this$ = ecx

; 26   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 
; 28   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1cAutoParty@@QAE@XZ ENDP				; cAutoParty::~cAutoParty
_TEXT	ENDS
PUBLIC	?CheckDistance@cAutoParty@@QAE_NHHH@Z		; cAutoParty::CheckDistance
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_DisViewe$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?CheckDistance@cAutoParty@@QAE_NHHH@Z PROC		; cAutoParty::CheckDistance
; _this$ = ecx

; 31   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	LPOBJ lpObj = &gObj[aIndex];

  0004c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0004f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00055	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 33   : 
; 34   : 	int DisViewe = 2;

  0005e	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _DisViewe$[ebp], 2

; 35   : 
; 36   : 	if(x < lpObj->X - DisViewe  || x > lpObj->X + DisViewe || y < lpObj->Y - DisViewe || y > lpObj->Y + DisViewe)

  00065	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00068	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0006f	2b 4d f4	 sub	 ecx, DWORD PTR _DisViewe$[ebp]
  00072	39 4d 0c	 cmp	 DWORD PTR _x$[ebp], ecx
  00075	7c 36		 jl	 SHORT $LN1@CheckDista
  00077	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0007a	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00081	03 4d f4	 add	 ecx, DWORD PTR _DisViewe$[ebp]
  00084	39 4d 0c	 cmp	 DWORD PTR _x$[ebp], ecx
  00087	7f 24		 jg	 SHORT $LN1@CheckDista
  00089	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0008c	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00093	2b 4d f4	 sub	 ecx, DWORD PTR _DisViewe$[ebp]
  00096	39 4d 10	 cmp	 DWORD PTR _y$[ebp], ecx
  00099	7c 12		 jl	 SHORT $LN1@CheckDista
  0009b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0009e	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  000a5	03 4d f4	 add	 ecx, DWORD PTR _DisViewe$[ebp]
  000a8	39 4d 10	 cmp	 DWORD PTR _y$[ebp], ecx
  000ab	7e 04		 jle	 SHORT $LN2@CheckDista
$LN1@CheckDista:

; 37   : 	{
; 38   : 		return false;

  000ad	32 c0		 xor	 al, al
  000af	eb 02		 jmp	 SHORT $LN3@CheckDista
$LN2@CheckDista:

; 39   : 	}
; 40   : 
; 41   : 	return true;

  000b1	b0 01		 mov	 al, 1
$LN3@CheckDista:

; 42   : }

  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 0c 00	 ret	 12			; 0000000cH
?CheckDistance@cAutoParty@@QAE_NHHH@Z ENDP		; cAutoParty::CheckDistance
_TEXT	ENDS
PUBLIC	?Party@cAutoParty@@QAEXHH@Z			; cAutoParty::Party
PUBLIC	?Work@cAutoParty@@QAEXXZ			; cAutoParty::Work
EXTRN	?ExConfig@@3VcExConfigs@@A:BYTE			; ExConfig
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpTempObj$232697 = -20					; size = 4
_number$232692 = -16					; size = 4
_lpObj$232690 = -12					; size = 4
_aIndex$232686 = -8					; size = 4
_this$ = -4						; size = 4
?Work@cAutoParty@@QAEXXZ PROC				; cAutoParty::Work
; _this$ = ecx

; 45   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp
  000c3	83 ec 54	 sub	 esp, 84			; 00000054H
  000c6	53		 push	 ebx
  000c7	56		 push	 esi
  000c8	57		 push	 edi
  000c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   : 	if(!ExConfig.ExCustom.AutoParty) return;

  000cc	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ?ExConfig@@3VcExConfigs@@A+8
  000d3	85 c0		 test	 eax, eax
  000d5	75 05		 jne	 SHORT $LN12@Work
  000d7	e9 e8 00 00 00	 jmp	 $LN13@Work
$LN12@Work:

; 47   : 	for (int  aIndex=OBJ_STARTUSERINDEX;aIndex<OBJMAX;aIndex++)

  000dc	c7 45 f8 b0 36
	00 00		 mov	 DWORD PTR _aIndex$232686[ebp], 14000 ; 000036b0H
  000e3	eb 09		 jmp	 SHORT $LN11@Work
$LN10@Work:
  000e5	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$232686[ebp]
  000e8	83 c0 01	 add	 eax, 1
  000eb	89 45 f8	 mov	 DWORD PTR _aIndex$232686[ebp], eax
$LN11@Work:
  000ee	81 7d f8 98 3a
	00 00		 cmp	 DWORD PTR _aIndex$232686[ebp], 15000 ; 00003a98H
  000f5	0f 8d c9 00 00
	00		 jge	 $LN13@Work

; 48   : 	{
; 49   : 		LPOBJ lpObj = &gObj[aIndex];

  000fb	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$232686[ebp]
  000fe	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00104	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010a	89 45 f4	 mov	 DWORD PTR _lpObj$232690[ebp], eax

; 50   : 		if(lpObj->Connected < PLAYER_PLAYING) continue;

  0010d	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$232690[ebp]
  00110	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00114	7d 02		 jge	 SHORT $LN8@Work
  00116	eb cd		 jmp	 SHORT $LN10@Work
$LN8@Work:

; 51   : 		for(int number = 0; number < OBJMAX; number++)

  00118	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _number$232692[ebp], 0
  0011f	eb 09		 jmp	 SHORT $LN7@Work
$LN6@Work:
  00121	8b 45 f0	 mov	 eax, DWORD PTR _number$232692[ebp]
  00124	83 c0 01	 add	 eax, 1
  00127	89 45 f0	 mov	 DWORD PTR _number$232692[ebp], eax
$LN7@Work:
  0012a	81 7d f0 98 3a
	00 00		 cmp	 DWORD PTR _number$232692[ebp], 15000 ; 00003a98H
  00131	0f 8d 88 00 00
	00		 jge	 $LN5@Work

; 52   : 		{
; 53   : 			if(aIndex == number) continue;

  00137	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$232686[ebp]
  0013a	3b 45 f0	 cmp	 eax, DWORD PTR _number$232692[ebp]
  0013d	75 02		 jne	 SHORT $LN4@Work
  0013f	eb e0		 jmp	 SHORT $LN6@Work
$LN4@Work:

; 54   : 
; 55   : 			LPOBJ lpTempObj = &gObj[number];

  00141	8b 45 f0	 mov	 eax, DWORD PTR _number$232692[ebp]
  00144	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0014a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00150	89 45 ec	 mov	 DWORD PTR _lpTempObj$232697[ebp], eax

; 56   : 
; 57   : 			if(lpTempObj->Connected == PLAYER_PLAYING && lpTempObj->Type == OBJ_USER)

  00153	8b 45 ec	 mov	 eax, DWORD PTR _lpTempObj$232697[ebp]
  00156	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0015a	75 5e		 jne	 SHORT $LN3@Work
  0015c	8b 45 ec	 mov	 eax, DWORD PTR _lpTempObj$232697[ebp]
  0015f	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  00163	83 f9 01	 cmp	 ecx, 1
  00166	75 52		 jne	 SHORT $LN3@Work

; 58   : 			{
; 59   : 				//if(lpTempObj->m_State == 1 || lpTempObj->m_State == 2)
; 60   : 				{
; 61   : 					if(lpObj->MapNumber == lpTempObj->MapNumber)

  00168	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$232690[ebp]
  0016b	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00172	8b 55 ec	 mov	 edx, DWORD PTR _lpTempObj$232697[ebp]
  00175	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0017c	3b c8		 cmp	 ecx, eax
  0017e	75 3a		 jne	 SHORT $LN3@Work

; 62   : 					{
; 63   : 						if(this->CheckDistance(aIndex,lpTempObj->X,lpTempObj->Y) == 1)

  00180	8b 45 ec	 mov	 eax, DWORD PTR _lpTempObj$232697[ebp]
  00183	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0018a	51		 push	 ecx
  0018b	8b 55 ec	 mov	 edx, DWORD PTR _lpTempObj$232697[ebp]
  0018e	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  00195	50		 push	 eax
  00196	8b 4d f8	 mov	 ecx, DWORD PTR _aIndex$232686[ebp]
  00199	51		 push	 ecx
  0019a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	e8 00 00 00 00	 call	 ?CheckDistance@cAutoParty@@QAE_NHHH@Z ; cAutoParty::CheckDistance
  001a2	0f b6 d0	 movzx	 edx, al
  001a5	83 fa 01	 cmp	 edx, 1
  001a8	75 10		 jne	 SHORT $LN3@Work

; 64   : 						{
; 65   : 							this->Party(aIndex, number);

  001aa	8b 45 f0	 mov	 eax, DWORD PTR _number$232692[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d f8	 mov	 ecx, DWORD PTR _aIndex$232686[ebp]
  001b1	51		 push	 ecx
  001b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b5	e8 00 00 00 00	 call	 ?Party@cAutoParty@@QAEXHH@Z ; cAutoParty::Party
$LN3@Work:

; 66   : 						}
; 67   : 					}
; 68   : 				}
; 69   : 			}
; 70   : 		}

  001ba	e9 62 ff ff ff	 jmp	 $LN6@Work
$LN5@Work:

; 71   : 	}

  001bf	e9 21 ff ff ff	 jmp	 $LN10@Work
$LN13@Work:

; 72   : }

  001c4	5f		 pop	 edi
  001c5	5e		 pop	 esi
  001c6	5b		 pop	 ebx
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c3		 ret	 0
?Work@cAutoParty@@QAEXXZ ENDP				; cAutoParty::Work
_TEXT	ENDS
EXTRN	?CGPartyListAll@@YAXH@Z:PROC			; CGPartyListAll
EXTRN	?Paint@PartyClass@@QAEXH@Z:PROC			; PartyClass::Paint
EXTRN	?Add@PartyClass@@QAEHHHHH@Z:PROC		; PartyClass::Add
EXTRN	?g_MaxPartyMember@@3HA:DWORD			; g_MaxPartyMember
EXTRN	?GetCount@PartyClass@@QAEHH@Z:PROC		; PartyClass::GetCount
EXTRN	?Isleader@PartyClass@@QAEHHHH@Z:PROC		; PartyClass::Isleader
EXTRN	?Create@PartyClass@@QAEHHHH@Z:PROC		; PartyClass::Create
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?CheckTerrain@cOffExp@@QAE_NPAUOBJECTSTRUCT@@@Z:PROC ; cOffExp::CheckTerrain
EXTRN	?OffExp@@3VcOffExp@@A:BYTE			; OffExp
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	?GetGensInfluence@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; GensSystem::GetGensInfluence
EXTRN	?gGensSystem@@3VGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gGENS@@3HA:DWORD				; gGENS
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iPartyPos$232724 = -20					; size = 4
_lpParty$ = -16						; size = 4
_lpObj$ = -12						; size = 4
_pnumber$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_number$ = 12						; size = 4
?Party@cAutoParty@@QAEXHH@Z PROC			; cAutoParty::Party
; _this$ = ecx

; 75   : {

  001d0	55		 push	 ebp
  001d1	8b ec		 mov	 ebp, esp
  001d3	83 ec 54	 sub	 esp, 84			; 00000054H
  001d6	53		 push	 ebx
  001d7	56		 push	 esi
  001d8	57		 push	 edi
  001d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 76   : 	if(gGENS)

  001dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  001e3	74 4a		 je	 SHORT $LN21@Party

; 77   : 	{
; 78   : 		if( gGensSystem.CheckPartyEnter )

  001e5	0f b6 05 ae 00
	00 00		 movzx	 eax, BYTE PTR ?gGensSystem@@3VGensSystem@@A+174
  001ec	85 c0		 test	 eax, eax
  001ee	74 3f		 je	 SHORT $LN21@Party

; 79   : 		{
; 80   : 			if( gGensSystem.GetGensInfluence(&gObj[aIndex]) != gGensSystem.GetGensInfluence(&gObj[number]) )

  001f0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001f3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  001f9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ff	50		 push	 eax
  00200	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  00205	e8 00 00 00 00	 call	 ?GetGensInfluence@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::GetGensInfluence
  0020a	8b f0		 mov	 esi, eax
  0020c	8b 4d 0c	 mov	 ecx, DWORD PTR _number$[ebp]
  0020f	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00215	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0021b	51		 push	 ecx
  0021c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  00221	e8 00 00 00 00	 call	 ?GetGensInfluence@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::GetGensInfluence
  00226	3b f0		 cmp	 esi, eax
  00228	74 05		 je	 SHORT $LN21@Party

; 81   : 			{
; 82   : 				return;

  0022a	e9 db 02 00 00	 jmp	 $LN22@Party
$LN21@Party:

; 83   : 			}
; 84   : 		}
; 85   : 	}
; 86   : 
; 87   : 	int pnumber = -1;

  0022f	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _pnumber$[ebp], -1

; 88   : 
; 89   : 	LPOBJ lpObj = &gObj[aIndex];

  00236	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00239	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0023f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00245	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 90   : 	LPOBJ lpParty = &gObj[number];

  00248	8b 45 0c	 mov	 eax, DWORD PTR _number$[ebp]
  0024b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00251	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00257	89 45 f0	 mov	 DWORD PTR _lpParty$[ebp], eax

; 91   : 
; 92   : 	if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::Gredy2) || g_ExLicense.CheckUser(eExUB::GredyLocal))

  0025a	6a 20		 push	 32			; 00000020H
  0025c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00261	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00266	0f b6 c0	 movzx	 eax, al
  00269	85 c0		 test	 eax, eax
  0026b	75 26		 jne	 SHORT $LN17@Party
  0026d	6a 22		 push	 34			; 00000022H
  0026f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00274	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00279	0f b6 c0	 movzx	 eax, al
  0027c	85 c0		 test	 eax, eax
  0027e	75 13		 jne	 SHORT $LN17@Party
  00280	6a 21		 push	 33			; 00000021H
  00282	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00287	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0028c	0f b6 c0	 movzx	 eax, al
  0028f	85 c0		 test	 eax, eax
  00291	74 13		 je	 SHORT $LN18@Party
$LN17@Party:

; 93   : 	{
; 94   : 		if(!lpParty->bAutoPt)

  00293	8b 45 f0	 mov	 eax, DWORD PTR _lpParty$[ebp]
  00296	0f b6 88 f9 28
	00 00		 movzx	 ecx, BYTE PTR [eax+10489]
  0029d	85 c9		 test	 ecx, ecx
  0029f	75 05		 jne	 SHORT $LN18@Party

; 95   : 		{
; 96   : 			return;

  002a1	e9 64 02 00 00	 jmp	 $LN22@Party
$LN18@Party:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	if(lpObj->AutoPt == 0)

  002a6	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002a9	0f bf 88 0c 28
	00 00		 movsx	 ecx, WORD PTR [eax+10252]
  002b0	85 c9		 test	 ecx, ecx
  002b2	75 05		 jne	 SHORT $LN15@Party

; 101  : 	{
; 102  : 		return;		

  002b4	e9 51 02 00 00	 jmp	 $LN22@Party
$LN15@Party:

; 103  : 	}
; 104  : 
; 105  : 	if(lpParty->AutoPt != 0) return;

  002b9	8b 45 f0	 mov	 eax, DWORD PTR _lpParty$[ebp]
  002bc	0f bf 88 0c 28
	00 00		 movsx	 ecx, WORD PTR [eax+10252]
  002c3	85 c9		 test	 ecx, ecx
  002c5	74 05		 je	 SHORT $LN14@Party
  002c7	e9 3e 02 00 00	 jmp	 $LN22@Party
$LN14@Party:

; 106  : 
; 107  : 	if(lpParty->Level > lpObj->AutoPt) 

  002cc	8b 45 f0	 mov	 eax, DWORD PTR _lpParty$[ebp]
  002cf	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  002d6	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  002d9	0f bf 82 0c 28
	00 00		 movsx	 eax, WORD PTR [edx+10252]
  002e0	3b c8		 cmp	 ecx, eax
  002e2	7e 05		 jle	 SHORT $LN13@Party

; 108  : 	{
; 109  : 		return;

  002e4	e9 21 02 00 00	 jmp	 $LN22@Party
$LN13@Party:

; 110  : 	}
; 111  : 
; 112  : 	if(lpObj->AutoPt && lpParty->AutoPt) return; //fix 2 auto party

  002e9	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002ec	0f bf 88 0c 28
	00 00		 movsx	 ecx, WORD PTR [eax+10252]
  002f3	85 c9		 test	 ecx, ecx
  002f5	74 13		 je	 SHORT $LN12@Party
  002f7	8b 45 f0	 mov	 eax, DWORD PTR _lpParty$[ebp]
  002fa	0f bf 88 0c 28
	00 00		 movsx	 ecx, WORD PTR [eax+10252]
  00301	85 c9		 test	 ecx, ecx
  00303	74 05		 je	 SHORT $LN12@Party
  00305	e9 00 02 00 00	 jmp	 $LN22@Party
$LN12@Party:

; 113  : 
; 114  : 	//BYTE attr = MapC[lpObj->MapNumber].GetAttr(lpObj->X, lpObj->Y);
; 115  : 	//if ( (attr&1) != 1 )
; 116  : 	//{
; 117  : 	//	return true;
; 118  : 	//}
; 119  : 	//else
; 120  : 	//{
; 121  : 	//	return false;
; 122  : 	//}
; 123  : 
; 124  : 	if(!OffExp.CheckTerrain(lpObj))

  0030a	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0030d	50		 push	 eax
  0030e	b9 00 00 00 00	 mov	 ecx, OFFSET ?OffExp@@3VcOffExp@@A ; OffExp
  00313	e8 00 00 00 00	 call	 ?CheckTerrain@cOffExp@@QAE_NPAUOBJECTSTRUCT@@@Z ; cOffExp::CheckTerrain
  00318	0f b6 c8	 movzx	 ecx, al
  0031b	85 c9		 test	 ecx, ecx
  0031d	75 05		 jne	 SHORT $LN11@Party

; 125  : 	{
; 126  : 		return;

  0031f	e9 e6 01 00 00	 jmp	 $LN22@Party
$LN11@Party:

; 127  : 	}
; 128  : 
; 129  : 	if ( gObj[aIndex].PartyNumber < 0 )

  00324	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00327	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0032d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00333	83 bc 01 2c 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1068], 0
  0033b	7d 50		 jge	 SHORT $LN10@Party

; 130  : 	{
; 131  : 		gObj[aIndex].PartyNumber = gParty.Create(aIndex, gObj[aIndex].DBNumber, gObj[aIndex].Level);

  0033d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00340	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00346	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0034c	0f bf 94 01 be
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax+190]
  00354	52		 push	 edx
  00355	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00358	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0035e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00364	8b 54 01 2c	 mov	 edx, DWORD PTR [ecx+eax+44]
  00368	52		 push	 edx
  00369	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0036c	50		 push	 eax
  0036d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00372	e8 00 00 00 00	 call	 ?Create@PartyClass@@QAEHHHH@Z ; PartyClass::Create
  00377	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0037a	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00380	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00386	89 84 0a 2c 04
	00 00		 mov	 DWORD PTR [edx+ecx+1068], eax
$LN10@Party:

; 132  : 	}
; 133  : 
; 134  : 	if ( gObj[aIndex].PartyNumber >= 0  && gObj[number].PartyNumber == -1)

  0038d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00390	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00396	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0039c	83 bc 01 2c 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1068], 0
  003a4	0f 8c 4e 01 00
	00		 jl	 $LN9@Party
  003aa	8b 45 0c	 mov	 eax, DWORD PTR _number$[ebp]
  003ad	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  003b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003b9	83 bc 01 2c 04
	00 00 ff	 cmp	 DWORD PTR [ecx+eax+1068], -1
  003c1	0f 85 31 01 00
	00		 jne	 $LN9@Party

; 135  : 	{
; 136  : 		if( !gParty.Isleader(gObj[aIndex].PartyNumber, aIndex, gObj[aIndex].DBNumber) )

  003c7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  003ca	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  003d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003d6	8b 54 01 2c	 mov	 edx, DWORD PTR [ecx+eax+44]
  003da	52		 push	 edx
  003db	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  003de	50		 push	 eax
  003df	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  003e2	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  003e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003ee	8b 84 0a 2c 04
	00 00		 mov	 eax, DWORD PTR [edx+ecx+1068]
  003f5	50		 push	 eax
  003f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  003fb	e8 00 00 00 00	 call	 ?Isleader@PartyClass@@QAEHHHH@Z ; PartyClass::Isleader
  00400	85 c0		 test	 eax, eax
  00402	75 05		 jne	 SHORT $LN8@Party

; 137  : 		{
; 138  : 			return;

  00404	e9 01 01 00 00	 jmp	 $LN22@Party
$LN8@Party:

; 139  : 		}
; 140  : #if _NEW_PARTY_SYSTEM_ == TRUE
; 141  : 		if( gParty.GetCount(gObj[aIndex].PartyNumber) >= g_MaxPartyMember )

  00409	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0040c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00412	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00418	8b 94 01 2c 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1068]
  0041f	52		 push	 edx
  00420	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00425	e8 00 00 00 00	 call	 ?GetCount@PartyClass@@QAEHH@Z ; PartyClass::GetCount
  0042a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_MaxPartyMember@@3HA ; g_MaxPartyMember
  00430	7c 05		 jl	 SHORT $LN7@Party

; 142  : #else
; 143  : 		if( gParty.GetCount(gObj[aIndex].PartyNumber) => 5 )
; 144  : #endif
; 145  : 		{
; 146  : 			return;

  00432	e9 d3 00 00 00	 jmp	 $LN22@Party
$LN7@Party:

; 147  : 		}
; 148  : 
; 149  : 		pnumber = gObj[aIndex].PartyNumber;

  00437	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0043a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00440	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00446	8b 94 01 2c 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1068]
  0044d	89 55 f8	 mov	 DWORD PTR _pnumber$[ebp], edx

; 150  : 
; 151  : 		int iPartyPos = gParty.Add(gObj[aIndex].PartyNumber, number, gObj[number].DBNumber, gObj[number].Level);

  00450	8b 45 0c	 mov	 eax, DWORD PTR _number$[ebp]
  00453	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00459	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0045f	0f bf 94 01 be
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax+190]
  00467	52		 push	 edx
  00468	8b 45 0c	 mov	 eax, DWORD PTR _number$[ebp]
  0046b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00471	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00477	8b 54 01 2c	 mov	 edx, DWORD PTR [ecx+eax+44]
  0047b	52		 push	 edx
  0047c	8b 45 0c	 mov	 eax, DWORD PTR _number$[ebp]
  0047f	50		 push	 eax
  00480	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00483	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00489	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0048f	8b 84 0a 2c 04
	00 00		 mov	 eax, DWORD PTR [edx+ecx+1068]
  00496	50		 push	 eax
  00497	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0049c	e8 00 00 00 00	 call	 ?Add@PartyClass@@QAEHHHHH@Z ; PartyClass::Add
  004a1	89 45 ec	 mov	 DWORD PTR _iPartyPos$232724[ebp], eax

; 152  : 
; 153  : 		if ( iPartyPos >= 0 )

  004a4	83 7d ec 00	 cmp	 DWORD PTR _iPartyPos$232724[ebp], 0
  004a8	7c 3c		 jl	 SHORT $LN6@Party

; 154  : 		{
; 155  : 			gObj[number].PartyNumber = gObj[aIndex].PartyNumber;

  004aa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  004ad	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  004b3	8b 4d 0c	 mov	 ecx, DWORD PTR _number$[ebp]
  004b6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  004bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004c2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004c8	8b 84 06 2c 04
	00 00		 mov	 eax, DWORD PTR [esi+eax+1068]
  004cf	89 84 0a 2c 04
	00 00		 mov	 DWORD PTR [edx+ecx+1068], eax

; 156  : 
; 157  : 			gParty.Paint(pnumber);

  004d6	8b 45 f8	 mov	 eax, DWORD PTR _pnumber$[ebp]
  004d9	50		 push	 eax
  004da	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  004df	e8 00 00 00 00	 call	 ?Paint@PartyClass@@QAEXH@Z ; PartyClass::Paint
  004e4	eb 12		 jmp	 SHORT $LN9@Party
$LN6@Party:

; 158  : 		}
; 159  : 		else if ( iPartyPos == -1 )

  004e6	83 7d ec ff	 cmp	 DWORD PTR _iPartyPos$232724[ebp], -1
  004ea	75 04		 jne	 SHORT $LN4@Party

; 160  : 		{
; 161  : 			return;

  004ec	eb 1c		 jmp	 SHORT $LN22@Party
  004ee	eb 08		 jmp	 SHORT $LN9@Party
$LN4@Party:

; 162  : 		}
; 163  : 		else if ( iPartyPos == -2 )

  004f0	83 7d ec fe	 cmp	 DWORD PTR _iPartyPos$232724[ebp], -2 ; fffffffeH
  004f4	75 02		 jne	 SHORT $LN9@Party

; 164  : 		{
; 165  : 			return;

  004f6	eb 12		 jmp	 SHORT $LN22@Party
$LN9@Party:

; 166  : 		}
; 167  : 	}
; 168  : 
; 169  : 	if ( pnumber >= 0 )

  004f8	83 7d f8 00	 cmp	 DWORD PTR _pnumber$[ebp], 0
  004fc	7c 0c		 jl	 SHORT $LN22@Party

; 170  : 	{
; 171  : 		CGPartyListAll(pnumber);

  004fe	8b 45 f8	 mov	 eax, DWORD PTR _pnumber$[ebp]
  00501	50		 push	 eax
  00502	e8 00 00 00 00	 call	 ?CGPartyListAll@@YAXH@Z	; CGPartyListAll
  00507	83 c4 04	 add	 esp, 4
$LN22@Party:

; 172  : 	}
; 173  : }

  0050a	5f		 pop	 edi
  0050b	5e		 pop	 esi
  0050c	5b		 pop	 ebx
  0050d	8b e5		 mov	 esp, ebp
  0050f	5d		 pop	 ebp
  00510	c2 08 00	 ret	 8
?Party@cAutoParty@@QAEXHH@Z ENDP			; cAutoParty::Party
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendPartyList@cAutoParty@@QAEXH@Z		; cAutoParty::SendPartyList
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	_strncpy:PROC
EXTRN	?PHeadSubSetW@@YAXPAEEEH@Z:PROC			; PHeadSubSetW
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpTempObj$232745 = -1732				; size = 4
_number$232741 = -1728					; size = 4
_lpObj$ = -1724						; size = 4
_Count$ = -1720						; size = 4
_exSend$ = -1716					; size = 1706
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?SendPartyList@cAutoParty@@QAEXH@Z PROC			; cAutoParty::SendPartyList
; _this$ = ecx

; 176  : {

  00520	55		 push	 ebp
  00521	8b ec		 mov	 ebp, esp
  00523	81 ec 04 07 00
	00		 sub	 esp, 1796		; 00000704H
  00529	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0052e	33 c5		 xor	 eax, ebp
  00530	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00533	53		 push	 ebx
  00534	56		 push	 esi
  00535	57		 push	 edi
  00536	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 	if(!ExConfig.ExCustom.AutoParty) return;

  00539	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ?ExConfig@@3VcExConfigs@@A+8
  00540	85 c0		 test	 eax, eax
  00542	75 05		 jne	 SHORT $LN9@SendPartyL
  00544	e9 19 02 00 00	 jmp	 $LN10@SendPartyL
$LN9@SendPartyL:

; 178  : 
; 179  : 	GCPartyList exSend;
; 180  : 	ZeroMemory(&exSend,sizeof(exSend));

  00549	68 aa 06 00 00	 push	 1706			; 000006aaH
  0054e	6a 00		 push	 0
  00550	8d 85 4c f9 ff
	ff		 lea	 eax, DWORD PTR _exSend$[ebp]
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 _memset
  0055c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 181  : 	PHeadSubSetW((LPBYTE)&exSend, 0xFA, 0x05, sizeof(exSend));

  0055f	68 aa 06 00 00	 push	 1706			; 000006aaH
  00564	6a 05		 push	 5
  00566	68 fa 00 00 00	 push	 250			; 000000faH
  0056b	8d 85 4c f9 ff
	ff		 lea	 eax, DWORD PTR _exSend$[ebp]
  00571	50		 push	 eax
  00572	e8 00 00 00 00	 call	 ?PHeadSubSetW@@YAXPAEEEH@Z ; PHeadSubSetW
  00577	83 c4 10	 add	 esp, 16			; 00000010H

; 182  : 
; 183  : 	int Count = 0;

  0057a	c7 85 48 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Count$[ebp], 0

; 184  : 
; 185  : 	LPOBJ lpObj = &gObj[aIndex];

  00584	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00587	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0058d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00593	89 85 44 f9 ff
	ff		 mov	 DWORD PTR _lpObj$[ebp], eax

; 186  : 	if(lpObj->Connected < PLAYER_PLAYING) return;

  00599	8b 85 44 f9 ff
	ff		 mov	 eax, DWORD PTR _lpObj$[ebp]
  0059f	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  005a3	7d 05		 jge	 SHORT $LN8@SendPartyL
  005a5	e9 b8 01 00 00	 jmp	 $LN10@SendPartyL
$LN8@SendPartyL:

; 187  : 	for (int  number=OBJ_STARTUSERINDEX;number<OBJMAX;number++)

  005aa	c7 85 40 f9 ff
	ff b0 36 00 00	 mov	 DWORD PTR _number$232741[ebp], 14000 ; 000036b0H
  005b4	eb 0f		 jmp	 SHORT $LN7@SendPartyL
$LN6@SendPartyL:
  005b6	8b 85 40 f9 ff
	ff		 mov	 eax, DWORD PTR _number$232741[ebp]
  005bc	83 c0 01	 add	 eax, 1
  005bf	89 85 40 f9 ff
	ff		 mov	 DWORD PTR _number$232741[ebp], eax
$LN7@SendPartyL:
  005c5	81 bd 40 f9 ff
	ff 98 3a 00 00	 cmp	 DWORD PTR _number$232741[ebp], 15000 ; 00003a98H
  005cf	0f 8d 75 01 00
	00		 jge	 $LN5@SendPartyL

; 188  : 	{
; 189  : 		LPOBJ lpTempObj = &gObj[number];

  005d5	8b 85 40 f9 ff
	ff		 mov	 eax, DWORD PTR _number$232741[ebp]
  005db	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  005e1	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005e7	89 85 3c f9 ff
	ff		 mov	 DWORD PTR _lpTempObj$232745[ebp], eax

; 190  : 
; 191  : 		if(lpTempObj->Connected == PLAYER_PLAYING && lpTempObj->Type == OBJ_USER && lpTempObj->AutoPt )

  005ed	8b 85 3c f9 ff
	ff		 mov	 eax, DWORD PTR _lpTempObj$232745[ebp]
  005f3	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  005f7	0f 85 48 01 00
	00		 jne	 $LN4@SendPartyL
  005fd	8b 85 3c f9 ff
	ff		 mov	 eax, DWORD PTR _lpTempObj$232745[ebp]
  00603	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  00607	83 f9 01	 cmp	 ecx, 1
  0060a	0f 85 35 01 00
	00		 jne	 $LN4@SendPartyL
  00610	8b 85 3c f9 ff
	ff		 mov	 eax, DWORD PTR _lpTempObj$232745[ebp]
  00616	0f bf 88 0c 28
	00 00		 movsx	 ecx, WORD PTR [eax+10252]
  0061d	85 c9		 test	 ecx, ecx
  0061f	0f 84 20 01 00
	00		 je	 $LN4@SendPartyL

; 192  : 		{
; 193  : 			if(lpTempObj->PartyNumber >= 0)

  00625	8b 85 3c f9 ff
	ff		 mov	 eax, DWORD PTR _lpTempObj$232745[ebp]
  0062b	83 b8 2c 04 00
	00 00		 cmp	 DWORD PTR [eax+1068], 0
  00632	7c 4b		 jl	 SHORT $LN3@SendPartyL

; 194  : 			{
; 195  : 				if( !gParty.Isleader(gObj[number].PartyNumber, number, gObj[number].DBNumber) )

  00634	8b 85 40 f9 ff
	ff		 mov	 eax, DWORD PTR _number$232741[ebp]
  0063a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00640	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00646	8b 54 01 2c	 mov	 edx, DWORD PTR [ecx+eax+44]
  0064a	52		 push	 edx
  0064b	8b 85 40 f9 ff
	ff		 mov	 eax, DWORD PTR _number$232741[ebp]
  00651	50		 push	 eax
  00652	8b 8d 40 f9 ff
	ff		 mov	 ecx, DWORD PTR _number$232741[ebp]
  00658	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0065e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00664	8b 84 0a 2c 04
	00 00		 mov	 eax, DWORD PTR [edx+ecx+1068]
  0066b	50		 push	 eax
  0066c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00671	e8 00 00 00 00	 call	 ?Isleader@PartyClass@@QAEHHHH@Z ; PartyClass::Isleader
  00676	85 c0		 test	 eax, eax
  00678	75 05		 jne	 SHORT $LN3@SendPartyL

; 196  : 				{
; 197  : 					continue;

  0067a	e9 37 ff ff ff	 jmp	 $LN6@SendPartyL
$LN3@SendPartyL:

; 198  : 				}
; 199  : 			}
; 200  : 
; 201  : 			strncpy(exSend.Name[Count],lpTempObj->Name,10);

  0067f	6a 0a		 push	 10			; 0000000aH
  00681	8b 85 3c f9 ff
	ff		 mov	 eax, DWORD PTR _lpTempObj$232745[ebp]
  00687	83 c0 77	 add	 eax, 119		; 00000077H
  0068a	50		 push	 eax
  0068b	8b 8d 48 f9 ff
	ff		 mov	 ecx, DWORD PTR _Count$[ebp]
  00691	6b c9 0b	 imul	 ecx, 11			; 0000000bH
  00694	8d 94 0d 51 f9
	ff ff		 lea	 edx, DWORD PTR _exSend$[ebp+ecx+5]
  0069b	52		 push	 edx
  0069c	e8 00 00 00 00	 call	 _strncpy
  006a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  : 			exSend.Level[Count] = lpTempObj->AutoPt;

  006a4	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR _Count$[ebp]
  006aa	8b 8d 3c f9 ff
	ff		 mov	 ecx, DWORD PTR _lpTempObj$232745[ebp]
  006b0	66 8b 91 0c 28
	00 00		 mov	 dx, WORD PTR [ecx+10252]
  006b7	66 89 94 45 9e
	fd ff ff	 mov	 WORD PTR _exSend$[ebp+eax*2+1106], dx

; 203  : 			exSend.Map[Count] = lpTempObj->MapNumber;

  006bf	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR _Count$[ebp]
  006c5	8b 8d 3c f9 ff
	ff		 mov	 ecx, DWORD PTR _lpTempObj$232745[ebp]
  006cb	8a 91 49 01 00
	00		 mov	 dl, BYTE PTR [ecx+329]
  006d1	88 94 05 66 fe
	ff ff		 mov	 BYTE PTR _exSend$[ebp+eax+1306], dl

; 204  : 			exSend.X[Count] = lpTempObj->X;

  006d8	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR _Count$[ebp]
  006de	8b 8d 3c f9 ff
	ff		 mov	 ecx, DWORD PTR _lpTempObj$232745[ebp]
  006e4	8a 91 44 01 00
	00		 mov	 dl, BYTE PTR [ecx+324]
  006ea	88 94 05 ca fe
	ff ff		 mov	 BYTE PTR _exSend$[ebp+eax+1406], dl

; 205  : 			exSend.Y[Count] = lpTempObj->Y;

  006f1	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR _Count$[ebp]
  006f7	8b 8d 3c f9 ff
	ff		 mov	 ecx, DWORD PTR _lpTempObj$232745[ebp]
  006fd	8a 91 46 01 00
	00		 mov	 dl, BYTE PTR [ecx+326]
  00703	88 94 05 2e ff
	ff ff		 mov	 BYTE PTR _exSend$[ebp+eax+1506], dl

; 206  : 			exSend.Total[Count]  = gParty.GetCount(lpTempObj->PartyNumber);

  0070a	8b 85 3c f9 ff
	ff		 mov	 eax, DWORD PTR _lpTempObj$232745[ebp]
  00710	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  00716	51		 push	 ecx
  00717	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0071c	e8 00 00 00 00	 call	 ?GetCount@PartyClass@@QAEHH@Z ; PartyClass::GetCount
  00721	8b 95 48 f9 ff
	ff		 mov	 edx, DWORD PTR _Count$[ebp]
  00727	88 44 15 92	 mov	 BYTE PTR _exSend$[ebp+edx+1606], al

; 207  : 			Count++;

  0072b	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR _Count$[ebp]
  00731	83 c0 01	 add	 eax, 1
  00734	89 85 48 f9 ff
	ff		 mov	 DWORD PTR _Count$[ebp], eax

; 208  : 			if(Count == 100) break;

  0073a	83 bd 48 f9 ff
	ff 64		 cmp	 DWORD PTR _Count$[ebp], 100 ; 00000064H
  00741	75 02		 jne	 SHORT $LN4@SendPartyL
  00743	eb 05		 jmp	 SHORT $LN5@SendPartyL
$LN4@SendPartyL:

; 209  : 		}
; 210  : 	}

  00745	e9 6c fe ff ff	 jmp	 $LN6@SendPartyL
$LN5@SendPartyL:

; 211  : 
; 212  : 	DataSend(aIndex,(LPBYTE)&exSend,sizeof(exSend));

  0074a	68 aa 06 00 00	 push	 1706			; 000006aaH
  0074f	8d 85 4c f9 ff
	ff		 lea	 eax, DWORD PTR _exSend$[ebp]
  00755	50		 push	 eax
  00756	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00759	51		 push	 ecx
  0075a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0075f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SendPartyL:

; 213  : }

  00762	5f		 pop	 edi
  00763	5e		 pop	 esi
  00764	5b		 pop	 ebx
  00765	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00768	33 cd		 xor	 ecx, ebp
  0076a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0076f	8b e5		 mov	 esp, ebp
  00771	5d		 pop	 ebp
  00772	c2 04 00	 ret	 4
?SendPartyList@cAutoParty@@QAEXH@Z ENDP			; cAutoParty::SendPartyList
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__EgAutoParty@@YAXXZ
text$yc	SEGMENT
??__EgAutoParty@@YAXXZ PROC				; `dynamic initializer for 'gAutoParty'', COMDAT

; 18   : cAutoParty gAutoParty;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gAutoParty@@3VcAutoParty@@A ; gAutoParty
  0000e	e8 00 00 00 00	 call	 ??0cAutoParty@@QAE@XZ	; cAutoParty::cAutoParty
  00013	68 00 00 00 00	 push	 OFFSET ??__FgAutoParty@@YAXXZ ; `dynamic atexit destructor for 'gAutoParty''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgAutoParty@@YAXXZ ENDP				; `dynamic initializer for 'gAutoParty''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FgAutoParty@@YAXXZ
text$yd	SEGMENT
??__FgAutoParty@@YAXXZ PROC				; `dynamic atexit destructor for 'gAutoParty'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gAutoParty@@3VcAutoParty@@A ; gAutoParty
  0000e	e8 00 00 00 00	 call	 ??1cAutoParty@@QAE@XZ	; cAutoParty::~cAutoParty
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgAutoParty@@YAXXZ ENDP				; `dynamic atexit destructor for 'gAutoParty''
text$yd	ENDS
PUBLIC	?gAutoParty@@3VcAutoParty@@A			; gAutoParty
_BSS	SEGMENT
?gAutoParty@@3VcAutoParty@@A DB 01H DUP (?)		; gAutoParty
_BSS	ENDS
CRT$XCU	SEGMENT
_gAutoParty$initializer$ DD FLAT:??__EgAutoParty@@YAXXZ
CRT$XCU	ENDS
END
