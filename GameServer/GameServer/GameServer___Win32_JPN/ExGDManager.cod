; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ExGDManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CExGDManager@@QAE@XZ				; CExGDManager::CExGDManager
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exgdmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CExGDManager@@QAE@XZ PROC				; CExGDManager::CExGDManager
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : }

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CExGDManager@@QAE@XZ ENDP				; CExGDManager::CExGDManager
_TEXT	ENDS
PUBLIC	??1CExGDManager@@QAE@XZ				; CExGDManager::~CExGDManager
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExGDManager@@QAE@XZ PROC				; CExGDManager::~CExGDManager
; _this$ = ecx

; 25   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CExGDManager@@QAE@XZ ENDP				; CExGDManager::~CExGDManager
_TEXT	ENDS
PUBLIC	?DG_ExQuestSystemLoad@CExGDManager@@QAEXPAUPMSG_ANS_EXQUESTSYSTEM_LOAD@@@Z ; CExGDManager::DG_ExQuestSystemLoad
PUBLIC	?DG_VoteBuffLoad@CExGDManager@@QAEXPAUPMSG_ANS_VOTEBUFF_LOAD@@@Z ; CExGDManager::DG_VoteBuffLoad
PUBLIC	?DG_CreateonBankLoad@CExGDManager@@QAEXPAUPMSG_ANS_CREATEON_LOAD@@@Z ; CExGDManager::DG_CreateonBankLoad
PUBLIC	?DG_RageSystemLoad@CExGDManager@@QAEXPAUPMSG_ANS_RAGESYSTEM_LOAD@@@Z ; CExGDManager::DG_RageSystemLoad
PUBLIC	?DG_MonsterQuestLoad@CExGDManager@@QAEXPAUPMSG_ANS_MONSTERQUEST_LOAD@@@Z ; CExGDManager::DG_MonsterQuestLoad
PUBLIC	?DG_BMQuestLoad@CExGDManager@@QAEXPAUPMSG_ANS_BMQUEST_LOAD@@@Z ; CExGDManager::DG_BMQuestLoad
PUBLIC	?DG_ExBuffLoad@CExGDManager@@QAEXPAUPMSG_ANS_EXBUFF_LOAD@@@Z ; CExGDManager::DG_ExBuffLoad
PUBLIC	?DG_PartySearchLoad@CExGDManager@@QAEXPAUPMSG_ANS_PARTYSEARCH_LOAD@@@Z ; CExGDManager::DG_PartySearchLoad
PUBLIC	?Protocol@CExGDManager@@QAEXEPAE@Z		; CExGDManager::Protocol
EXTRN	?DGPlayerLoad@CAchievements@@QAEXPAUPMSG_DGANS_ACH_LOAD@@@Z:PROC ; CAchievements::DGPlayerLoad
EXTRN	?g_Achievements@@3VCAchievements@@A:BYTE	; g_Achievements
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv65 = -72						; size = 4
_this$ = -4						; size = 4
_protoNum$ = 8						; size = 1
_aRecv$ = 12						; size = 4
?Protocol@CExGDManager@@QAEXEPAE@Z PROC			; CExGDManager::Protocol
; _this$ = ecx

; 29   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 48	 sub	 esp, 72			; 00000048H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	switch(protoNum)

  0004c	0f b6 45 08	 movzx	 eax, BYTE PTR _protoNum$[ebp]
  00050	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  00053	83 7d b8 13	 cmp	 DWORD PTR tv65[ebp], 19	; 00000013H
  00057	0f 87 8f 00 00
	00		 ja	 $LN12@Protocol
  0005d	8b 4d b8	 mov	 ecx, DWORD PTR tv65[ebp]
  00060	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN14@Protocol[ecx]
  00067	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN15@Protocol[edx*4]
$LN9@Protocol:

; 31   : 	{
; 32   : 	case 0x00:
; 33   : 		this->DG_PartySearchLoad((PMSG_ANS_PARTYSEARCH_LOAD *)aRecv);

  0006e	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00071	50		 push	 eax
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?DG_PartySearchLoad@CExGDManager@@QAEXPAUPMSG_ANS_PARTYSEARCH_LOAD@@@Z ; CExGDManager::DG_PartySearchLoad

; 34   : 		break;

  0007a	eb 70		 jmp	 SHORT $LN12@Protocol
$LN8@Protocol:

; 35   : 	case 0x02:
; 36   : 		this->DG_ExBuffLoad((PMSG_ANS_EXBUFF_LOAD *)aRecv);

  0007c	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?DG_ExBuffLoad@CExGDManager@@QAEXPAUPMSG_ANS_EXBUFF_LOAD@@@Z ; CExGDManager::DG_ExBuffLoad

; 37   : 		break;

  00088	eb 62		 jmp	 SHORT $LN12@Protocol
$LN7@Protocol:

; 38   : 	case 0x04:
; 39   : 		this->DG_BMQuestLoad((PMSG_ANS_BMQUEST_LOAD *)aRecv);

  0008a	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ?DG_BMQuestLoad@CExGDManager@@QAEXPAUPMSG_ANS_BMQUEST_LOAD@@@Z ; CExGDManager::DG_BMQuestLoad

; 40   : 		break;

  00096	eb 54		 jmp	 SHORT $LN12@Protocol
$LN6@Protocol:

; 41   : 	case 0x06:
; 42   : 		this->DG_MonsterQuestLoad((PMSG_ANS_MONSTERQUEST_LOAD *)aRecv);

  00098	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?DG_MonsterQuestLoad@CExGDManager@@QAEXPAUPMSG_ANS_MONSTERQUEST_LOAD@@@Z ; CExGDManager::DG_MonsterQuestLoad

; 43   : 		break;

  000a4	eb 46		 jmp	 SHORT $LN12@Protocol
$LN5@Protocol:

; 44   : 	case 0x08:
; 45   : 		this->DG_RageSystemLoad((PMSG_ANS_RAGESYSTEM_LOAD *)aRecv);

  000a6	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000a9	50		 push	 eax
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?DG_RageSystemLoad@CExGDManager@@QAEXPAUPMSG_ANS_RAGESYSTEM_LOAD@@@Z ; CExGDManager::DG_RageSystemLoad

; 46   : 		break;

  000b2	eb 38		 jmp	 SHORT $LN12@Protocol
$LN4@Protocol:

; 47   : 	case 0x0A:
; 48   : 		this->DG_CreateonBankLoad((PMSG_ANS_CREATEON_LOAD *)aRecv);

  000b4	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?DG_CreateonBankLoad@CExGDManager@@QAEXPAUPMSG_ANS_CREATEON_LOAD@@@Z ; CExGDManager::DG_CreateonBankLoad

; 49   : 		break;

  000c0	eb 2a		 jmp	 SHORT $LN12@Protocol
$LN3@Protocol:

; 50   : 	case 0x0C:
; 51   : #if(SYSTEM_ACHIEVEMENTS)
; 52   : 		g_Achievements.DGPlayerLoad((PMSG_DGANS_ACH_LOAD*)aRecv);

  000c2	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000c5	50		 push	 eax
  000c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Achievements@@3VCAchievements@@A ; g_Achievements
  000cb	e8 00 00 00 00	 call	 ?DGPlayerLoad@CAchievements@@QAEXPAUPMSG_DGANS_ACH_LOAD@@@Z ; CAchievements::DGPlayerLoad

; 53   : #endif
; 54   : 		break;

  000d0	eb 1a		 jmp	 SHORT $LN12@Protocol
$LN2@Protocol:

; 55   : 	case 0x0D:
; 56   : 		this->DG_VoteBuffLoad((PMSG_ANS_VOTEBUFF_LOAD *)aRecv);

  000d2	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000d5	50		 push	 eax
  000d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	e8 00 00 00 00	 call	 ?DG_VoteBuffLoad@CExGDManager@@QAEXPAUPMSG_ANS_VOTEBUFF_LOAD@@@Z ; CExGDManager::DG_VoteBuffLoad

; 57   : 		break;

  000de	eb 0c		 jmp	 SHORT $LN12@Protocol
$LN1@Protocol:

; 58   : #if(CUSTOM_EX_QUEST_SYSTEM==TRUE)
; 59   : 	case 0x13:
; 60   : 		this->DG_ExQuestSystemLoad((PMSG_ANS_EXQUESTSYSTEM_LOAD *)aRecv);

  000e0	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	e8 00 00 00 00	 call	 ?DG_ExQuestSystemLoad@CExGDManager@@QAEXPAUPMSG_ANS_EXQUESTSYSTEM_LOAD@@@Z ; CExGDManager::DG_ExQuestSystemLoad
$LN12@Protocol:

; 61   : 		break;
; 62   : #endif
; 63   : 	}
; 64   : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 08 00	 ret	 8
  000f5	8d 49 00	 npad	 3
$LN15@Protocol:
  000f8	00 00 00 00	 DD	 $LN9@Protocol
  000fc	00 00 00 00	 DD	 $LN8@Protocol
  00100	00 00 00 00	 DD	 $LN7@Protocol
  00104	00 00 00 00	 DD	 $LN6@Protocol
  00108	00 00 00 00	 DD	 $LN5@Protocol
  0010c	00 00 00 00	 DD	 $LN4@Protocol
  00110	00 00 00 00	 DD	 $LN3@Protocol
  00114	00 00 00 00	 DD	 $LN2@Protocol
  00118	00 00 00 00	 DD	 $LN1@Protocol
  0011c	00 00 00 00	 DD	 $LN12@Protocol
$LN14@Protocol:
  00120	00		 DB	 0
  00121	09		 DB	 9
  00122	01		 DB	 1
  00123	09		 DB	 9
  00124	02		 DB	 2
  00125	09		 DB	 9
  00126	03		 DB	 3
  00127	09		 DB	 9
  00128	04		 DB	 4
  00129	09		 DB	 9
  0012a	05		 DB	 5
  0012b	09		 DB	 9
  0012c	06		 DB	 6
  0012d	07		 DB	 7
  0012e	09		 DB	 9
  0012f	09		 DB	 9
  00130	09		 DB	 9
  00131	09		 DB	 9
  00132	09		 DB	 9
  00133	08		 DB	 8
?Protocol@CExGDManager@@QAEXEPAE@Z ENDP			; CExGDManager::Protocol
_TEXT	ENDS
PUBLIC	?DB_Start@CExGDManager@@QAEXXZ			; CExGDManager::DB_Start
EXTRN	?GDReqAllPlayer@OfflineMode@@QAEXXZ:PROC	; OfflineMode::GDReqAllPlayer
EXTRN	?g_OfflineMode@@3VOfflineMode@@A:BYTE		; g_OfflineMode
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DB_Start@CExGDManager@@QAEXXZ PROC			; CExGDManager::DB_Start
; _this$ = ecx

; 68   : {

  00140	55		 push	 ebp
  00141	8b ec		 mov	 ebp, esp
  00143	83 ec 44	 sub	 esp, 68			; 00000044H
  00146	53		 push	 ebx
  00147	56		 push	 esi
  00148	57		 push	 edi
  00149	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 69   : 	//PMSG_REQ_SERVERINFO_EX pMsg;
; 70   : 	//pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x08, sizeof(pMsg));
; 71   : 	//cDBSMng.Send((char*)&pMsg, pMsg.h.size);
; 72   : 	
; 73   : 	if(g_ExLicense.user.RestoreOffMode)

  0014c	0f b6 05 e6 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+230
  00153	85 c0		 test	 eax, eax
  00155	74 0a		 je	 SHORT $LN2@DB_Start

; 74   : 	{
; 75   : 		g_OfflineMode.GDReqAllPlayer();

  00157	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_OfflineMode@@3VOfflineMode@@A ; g_OfflineMode
  0015c	e8 00 00 00 00	 call	 ?GDReqAllPlayer@OfflineMode@@QAEXXZ ; OfflineMode::GDReqAllPlayer
$LN2@DB_Start:

; 76   : 	}
; 77   : }

  00161	5f		 pop	 edi
  00162	5e		 pop	 esi
  00163	5b		 pop	 ebx
  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c3		 ret	 0
?DB_Start@CExGDManager@@QAEXXZ ENDP			; CExGDManager::DB_Start
_TEXT	ENDS
PUBLIC	?GD_ExQuestSystemLoad@CExGDManager@@QAEXH@Z	; CExGDManager::GD_ExQuestSystemLoad
PUBLIC	?GD_VoteBuffLoad@CExGDManager@@QAEXH@Z		; CExGDManager::GD_VoteBuffLoad
PUBLIC	?GD_CreateonBankLoad@CExGDManager@@QAEXH@Z	; CExGDManager::GD_CreateonBankLoad
PUBLIC	?GD_RageSystemLoad@CExGDManager@@QAEXH@Z	; CExGDManager::GD_RageSystemLoad
PUBLIC	?GD_MonsterQuestLoad@CExGDManager@@QAEXH@Z	; CExGDManager::GD_MonsterQuestLoad
PUBLIC	?GD_BMQuestLoad@CExGDManager@@QAEXH@Z		; CExGDManager::GD_BMQuestLoad
PUBLIC	?GD_ExBuffLoad@CExGDManager@@QAEXH@Z		; CExGDManager::GD_ExBuffLoad
PUBLIC	?GD_PartySearchLoad@CExGDManager@@QAEXH@Z	; CExGDManager::GD_PartySearchLoad
PUBLIC	?DB_Load@CExGDManager@@QAEXH@Z			; CExGDManager::DB_Load
EXTRN	?GDPlayerLoad@CAchievements@@QAEXH@Z:PROC	; CAchievements::GDPlayerLoad
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?DB_Load@CExGDManager@@QAEXH@Z PROC			; CExGDManager::DB_Load
; _this$ = ecx

; 81   : {

  00170	55		 push	 ebp
  00171	8b ec		 mov	 ebp, esp
  00173	83 ec 48	 sub	 esp, 72			; 00000048H
  00176	53		 push	 ebx
  00177	56		 push	 esi
  00178	57		 push	 edi
  00179	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	if(!OBJMAX_RANGE(aIndex))

  0017c	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00180	7d 09		 jge	 SHORT $LN14@DB_Load
  00182	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  00189	eb 0f		 jmp	 SHORT $LN15@DB_Load
$LN14@DB_Load:
  0018b	33 c0		 xor	 eax, eax
  0018d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00194	0f 9e c0	 setle	 al
  00197	89 45 b8	 mov	 DWORD PTR tv67[ebp], eax
$LN15@DB_Load:
  0019a	83 7d b8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0019e	75 05		 jne	 SHORT $LN11@DB_Load

; 83   : 	{
; 84   : 		return;

  001a0	e9 f8 01 00 00	 jmp	 $LN12@DB_Load
$LN11@DB_Load:

; 85   : 	}
; 86   : 
; 87   : 	if(g_ExLicense.user.PartySearch)

  001a5	0f b6 05 d1 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+209
  001ac	85 c0		 test	 eax, eax
  001ae	74 0c		 je	 SHORT $LN10@DB_Load

; 88   : 	{
; 89   : 		this->GD_PartySearchLoad(aIndex);

  001b0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001b3	50		 push	 eax
  001b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b7	e8 00 00 00 00	 call	 ?GD_PartySearchLoad@CExGDManager@@QAEXH@Z ; CExGDManager::GD_PartySearchLoad
$LN10@DB_Load:

; 90   : 	}
; 91   : 
; 92   : 	if(g_ExLicense.user.NpcBuffer)

  001bc	0f b6 05 d9 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+217
  001c3	85 c0		 test	 eax, eax
  001c5	74 0c		 je	 SHORT $LN9@DB_Load

; 93   : 	{
; 94   : 		this->GD_ExBuffLoad(aIndex);

  001c7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001ca	50		 push	 eax
  001cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ce	e8 00 00 00 00	 call	 ?GD_ExBuffLoad@CExGDManager@@QAEXH@Z ; CExGDManager::GD_ExBuffLoad
$LN9@DB_Load:

; 95   : 	}
; 96   : 
; 97   : 	if(g_ExLicense.user.BMQuest)

  001d3	0f b6 05 da 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+218
  001da	85 c0		 test	 eax, eax
  001dc	74 0c		 je	 SHORT $LN8@DB_Load

; 98   : 	{
; 99   : 		this->GD_BMQuestLoad(aIndex);

  001de	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001e1	50		 push	 eax
  001e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e5	e8 00 00 00 00	 call	 ?GD_BMQuestLoad@CExGDManager@@QAEXH@Z ; CExGDManager::GD_BMQuestLoad
$LN8@DB_Load:

; 100  : 	}
; 101  : 
; 102  : 	if(g_ExLicense.user.MonsterQuest)

  001ea	0f b6 05 cc 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+204
  001f1	85 c0		 test	 eax, eax
  001f3	74 0c		 je	 SHORT $LN7@DB_Load

; 103  : 	{
; 104  : 		this->GD_MonsterQuestLoad(aIndex);

  001f5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001f8	50		 push	 eax
  001f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fc	e8 00 00 00 00	 call	 ?GD_MonsterQuestLoad@CExGDManager@@QAEXH@Z ; CExGDManager::GD_MonsterQuestLoad
$LN7@DB_Load:

; 105  : 	}
; 106  : 
; 107  : 	if(g_ExLicense.user.Rage)

  00201	0f b6 05 c9 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+201
  00208	85 c0		 test	 eax, eax
  0020a	74 0c		 je	 SHORT $LN6@DB_Load

; 108  : 	{
; 109  : 		this->GD_RageSystemLoad(aIndex);

  0020c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0020f	50		 push	 eax
  00210	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00213	e8 00 00 00 00	 call	 ?GD_RageSystemLoad@CExGDManager@@QAEXH@Z ; CExGDManager::GD_RageSystemLoad
$LN6@DB_Load:

; 110  : 	}
; 111  : 
; 112  : #if(ADD_JEWELBANK_CREATEON)
; 113  : 	if(/*g_ExLicense.CheckUser(eExUB::Local) || */g_ExLicense.CheckUser(SILVER1) || g_ExLicense.CheckUser(SILVER2) ||
; 114  : 		g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2) ||
; 115  : 		g_ExLicense.CheckUser(eExUB::mu4you) || g_ExLicense.CheckUser(eExUB::Escalate) || g_ExLicense.CheckUser(eExUB::MedoniAndrei) ||
; 116  : 	    g_ExLicense.CheckUser(eExUB::Escalate) || g_ExLicense.CheckUser(eExUB::Artem) || g_ExLicense.CheckUser(eExUB::Artem2) ||
; 117  : 		g_ExLicense.CheckUser(eExUB::eternalmu) || g_ExLicense.CheckUser(eExUB::NSGames))

  00218	6a 07		 push	 7
  0021a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0021f	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00224	0f b6 c0	 movzx	 eax, al
  00227	85 c0		 test	 eax, eax
  00229	0f 85 f8 00 00
	00		 jne	 $LN4@DB_Load
  0022f	6a 08		 push	 8
  00231	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00236	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0023b	0f b6 c0	 movzx	 eax, al
  0023e	85 c0		 test	 eax, eax
  00240	0f 85 e1 00 00
	00		 jne	 $LN4@DB_Load
  00246	6a 20		 push	 32			; 00000020H
  00248	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0024d	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00252	0f b6 c0	 movzx	 eax, al
  00255	85 c0		 test	 eax, eax
  00257	0f 85 ca 00 00
	00		 jne	 $LN4@DB_Load
  0025d	6a 21		 push	 33			; 00000021H
  0025f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00264	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00269	0f b6 c0	 movzx	 eax, al
  0026c	85 c0		 test	 eax, eax
  0026e	0f 85 b3 00 00
	00		 jne	 $LN4@DB_Load
  00274	6a 22		 push	 34			; 00000022H
  00276	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0027b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00280	0f b6 c0	 movzx	 eax, al
  00283	85 c0		 test	 eax, eax
  00285	0f 85 9c 00 00
	00		 jne	 $LN4@DB_Load
  0028b	6a 4e		 push	 78			; 0000004eH
  0028d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00292	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00297	0f b6 c0	 movzx	 eax, al
  0029a	85 c0		 test	 eax, eax
  0029c	0f 85 85 00 00
	00		 jne	 $LN4@DB_Load
  002a2	6a 40		 push	 64			; 00000040H
  002a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002a9	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  002ae	0f b6 c0	 movzx	 eax, al
  002b1	85 c0		 test	 eax, eax
  002b3	75 72		 jne	 SHORT $LN4@DB_Load
  002b5	6a 32		 push	 50			; 00000032H
  002b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002bc	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  002c1	0f b6 c0	 movzx	 eax, al
  002c4	85 c0		 test	 eax, eax
  002c6	75 5f		 jne	 SHORT $LN4@DB_Load
  002c8	6a 40		 push	 64			; 00000040H
  002ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002cf	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  002d4	0f b6 c0	 movzx	 eax, al
  002d7	85 c0		 test	 eax, eax
  002d9	75 4c		 jne	 SHORT $LN4@DB_Load
  002db	6a 30		 push	 48			; 00000030H
  002dd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002e2	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  002e7	0f b6 c0	 movzx	 eax, al
  002ea	85 c0		 test	 eax, eax
  002ec	75 39		 jne	 SHORT $LN4@DB_Load
  002ee	6a 31		 push	 49			; 00000031H
  002f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002f5	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  002fa	0f b6 c0	 movzx	 eax, al
  002fd	85 c0		 test	 eax, eax
  002ff	75 26		 jne	 SHORT $LN4@DB_Load
  00301	6a 4f		 push	 79			; 0000004fH
  00303	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00308	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0030d	0f b6 c0	 movzx	 eax, al
  00310	85 c0		 test	 eax, eax
  00312	75 13		 jne	 SHORT $LN4@DB_Load
  00314	6a 51		 push	 81			; 00000051H
  00316	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0031b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00320	0f b6 c0	 movzx	 eax, al
  00323	85 c0		 test	 eax, eax
  00325	74 0c		 je	 SHORT $LN5@DB_Load
$LN4@DB_Load:

; 118  : 	{
; 119  : 		this->GD_CreateonBankLoad(aIndex);

  00327	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0032a	50		 push	 eax
  0032b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032e	e8 00 00 00 00	 call	 ?GD_CreateonBankLoad@CExGDManager@@QAEXH@Z ; CExGDManager::GD_CreateonBankLoad
$LN5@DB_Load:

; 120  : 	}
; 121  : #endif
; 122  : #if(SYSTEM_ACHIEVEMENTS)
; 123  : 	if(g_ExLicense.user.bAchievements)

  00333	0f b6 05 e9 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+233
  0033a	85 c0		 test	 eax, eax
  0033c	74 0e		 je	 SHORT $LN3@DB_Load

; 124  : 	{
; 125  : 		g_Achievements.GDPlayerLoad(aIndex);

  0033e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00341	50		 push	 eax
  00342	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Achievements@@3VCAchievements@@A ; g_Achievements
  00347	e8 00 00 00 00	 call	 ?GDPlayerLoad@CAchievements@@QAEXH@Z ; CAchievements::GDPlayerLoad
$LN3@DB_Load:

; 126  : 	}
; 127  : #endif
; 128  : 
; 129  : 	if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2))

  0034c	6a 20		 push	 32			; 00000020H
  0034e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00353	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00358	0f b6 c0	 movzx	 eax, al
  0035b	85 c0		 test	 eax, eax
  0035d	75 26		 jne	 SHORT $LN1@DB_Load
  0035f	6a 21		 push	 33			; 00000021H
  00361	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00366	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0036b	0f b6 c0	 movzx	 eax, al
  0036e	85 c0		 test	 eax, eax
  00370	75 13		 jne	 SHORT $LN1@DB_Load
  00372	6a 22		 push	 34			; 00000022H
  00374	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00379	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0037e	0f b6 c0	 movzx	 eax, al
  00381	85 c0		 test	 eax, eax
  00383	74 0c		 je	 SHORT $LN2@DB_Load
$LN1@DB_Load:

; 130  : 	{
; 131  : 		this->GD_VoteBuffLoad(aIndex);

  00385	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00388	50		 push	 eax
  00389	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0038c	e8 00 00 00 00	 call	 ?GD_VoteBuffLoad@CExGDManager@@QAEXH@Z ; CExGDManager::GD_VoteBuffLoad
$LN2@DB_Load:

; 132  : 	}
; 133  : 
; 134  : #if(CUSTOM_EX_QUEST_SYSTEM==TRUE)
; 135  : 	this->GD_ExQuestSystemLoad(aIndex);

  00391	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00394	50		 push	 eax
  00395	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00398	e8 00 00 00 00	 call	 ?GD_ExQuestSystemLoad@CExGDManager@@QAEXH@Z ; CExGDManager::GD_ExQuestSystemLoad
$LN12@DB_Load:

; 136  : #endif
; 137  : }

  0039d	5f		 pop	 edi
  0039e	5e		 pop	 esi
  0039f	5b		 pop	 ebx
  003a0	8b e5		 mov	 esp, ebp
  003a2	5d		 pop	 ebp
  003a3	c2 04 00	 ret	 4
?DB_Load@CExGDManager@@QAEXH@Z ENDP			; CExGDManager::DB_Load
_TEXT	ENDS
PUBLIC	?GD_ExQuestSystemSave@CExGDManager@@QAEXH@Z	; CExGDManager::GD_ExQuestSystemSave
PUBLIC	?GD_VoteBuffSave@CExGDManager@@QAEXH@Z		; CExGDManager::GD_VoteBuffSave
PUBLIC	?GD_CreateonBankSave@CExGDManager@@QAEXH@Z	; CExGDManager::GD_CreateonBankSave
PUBLIC	?GD_RageSystemSave@CExGDManager@@QAEXH@Z	; CExGDManager::GD_RageSystemSave
PUBLIC	?GD_MonsterQuestSave@CExGDManager@@QAEXH@Z	; CExGDManager::GD_MonsterQuestSave
PUBLIC	?GD_BMQuestSave@CExGDManager@@QAEXH@Z		; CExGDManager::GD_BMQuestSave
PUBLIC	?GD_ExBuffSave@CExGDManager@@QAEXH@Z		; CExGDManager::GD_ExBuffSave
PUBLIC	?GD_PartySearchSave@CExGDManager@@QAEXH@Z	; CExGDManager::GD_PartySearchSave
PUBLIC	?DB_Save@CExGDManager@@QAEXH@Z			; CExGDManager::DB_Save
EXTRN	?GDPlayerSave@CAchievements@@QAEXH@Z:PROC	; CAchievements::GDPlayerSave
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?DB_Save@CExGDManager@@QAEXH@Z PROC			; CExGDManager::DB_Save
; _this$ = ecx

; 140  : {

  003b0	55		 push	 ebp
  003b1	8b ec		 mov	 ebp, esp
  003b3	83 ec 48	 sub	 esp, 72			; 00000048H
  003b6	53		 push	 ebx
  003b7	56		 push	 esi
  003b8	57		 push	 edi
  003b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : 	if(!OBJMAX_RANGE(aIndex))

  003bc	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  003c0	7d 09		 jge	 SHORT $LN14@DB_Save
  003c2	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  003c9	eb 0f		 jmp	 SHORT $LN15@DB_Save
$LN14@DB_Save:
  003cb	33 c0		 xor	 eax, eax
  003cd	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  003d4	0f 9e c0	 setle	 al
  003d7	89 45 b8	 mov	 DWORD PTR tv67[ebp], eax
$LN15@DB_Save:
  003da	83 7d b8 00	 cmp	 DWORD PTR tv67[ebp], 0
  003de	75 05		 jne	 SHORT $LN11@DB_Save

; 142  : 	{
; 143  : 		return;

  003e0	e9 f8 01 00 00	 jmp	 $LN12@DB_Save
$LN11@DB_Save:

; 144  : 	}
; 145  : 
; 146  : 	if(g_ExLicense.user.PartySearch)

  003e5	0f b6 05 d1 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+209
  003ec	85 c0		 test	 eax, eax
  003ee	74 0c		 je	 SHORT $LN10@DB_Save

; 147  : 	{
; 148  : 		this->GD_PartySearchSave(aIndex);

  003f0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  003f3	50		 push	 eax
  003f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003f7	e8 00 00 00 00	 call	 ?GD_PartySearchSave@CExGDManager@@QAEXH@Z ; CExGDManager::GD_PartySearchSave
$LN10@DB_Save:

; 149  : 	}
; 150  : 
; 151  : 	if(g_ExLicense.user.NpcBuffer)

  003fc	0f b6 05 d9 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+217
  00403	85 c0		 test	 eax, eax
  00405	74 0c		 je	 SHORT $LN9@DB_Save

; 152  : 	{
; 153  : 		this->GD_ExBuffSave(aIndex);

  00407	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0040a	50		 push	 eax
  0040b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0040e	e8 00 00 00 00	 call	 ?GD_ExBuffSave@CExGDManager@@QAEXH@Z ; CExGDManager::GD_ExBuffSave
$LN9@DB_Save:

; 154  : 	}
; 155  : 
; 156  : 	if(g_ExLicense.user.BMQuest)

  00413	0f b6 05 da 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+218
  0041a	85 c0		 test	 eax, eax
  0041c	74 0c		 je	 SHORT $LN8@DB_Save

; 157  : 	{
; 158  : 		this->GD_BMQuestSave(aIndex);

  0041e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00421	50		 push	 eax
  00422	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00425	e8 00 00 00 00	 call	 ?GD_BMQuestSave@CExGDManager@@QAEXH@Z ; CExGDManager::GD_BMQuestSave
$LN8@DB_Save:

; 159  : 	}
; 160  : 
; 161  : 	if(g_ExLicense.user.MonsterQuest)

  0042a	0f b6 05 cc 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+204
  00431	85 c0		 test	 eax, eax
  00433	74 0c		 je	 SHORT $LN7@DB_Save

; 162  : 	{
; 163  : 		this->GD_MonsterQuestSave(aIndex);

  00435	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00438	50		 push	 eax
  00439	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0043c	e8 00 00 00 00	 call	 ?GD_MonsterQuestSave@CExGDManager@@QAEXH@Z ; CExGDManager::GD_MonsterQuestSave
$LN7@DB_Save:

; 164  : 	}
; 165  : 
; 166  : 	if(g_ExLicense.user.Rage)

  00441	0f b6 05 c9 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+201
  00448	85 c0		 test	 eax, eax
  0044a	74 0c		 je	 SHORT $LN6@DB_Save

; 167  : 	{
; 168  : 		this->GD_RageSystemSave(aIndex);

  0044c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0044f	50		 push	 eax
  00450	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00453	e8 00 00 00 00	 call	 ?GD_RageSystemSave@CExGDManager@@QAEXH@Z ; CExGDManager::GD_RageSystemSave
$LN6@DB_Save:

; 169  : 	}
; 170  : 
; 171  : #if(ADD_JEWELBANK_CREATEON)
; 172  : 	if(/*g_ExLicense.CheckUser(eExUB::Local) || */g_ExLicense.CheckUser(SILVER1) || g_ExLicense.CheckUser(SILVER2) ||
; 173  : 		g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2) ||
; 174  : 		g_ExLicense.CheckUser(eExUB::mu4you) || g_ExLicense.CheckUser(eExUB::Escalate) || g_ExLicense.CheckUser(eExUB::MedoniAndrei) ||
; 175  : 	    g_ExLicense.CheckUser(eExUB::Escalate) || g_ExLicense.CheckUser(eExUB::Artem) || g_ExLicense.CheckUser(eExUB::Artem2) ||
; 176  : 		g_ExLicense.CheckUser(eExUB::eternalmu) || g_ExLicense.CheckUser(eExUB::NSGames))

  00458	6a 07		 push	 7
  0045a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0045f	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00464	0f b6 c0	 movzx	 eax, al
  00467	85 c0		 test	 eax, eax
  00469	0f 85 f8 00 00
	00		 jne	 $LN4@DB_Save
  0046f	6a 08		 push	 8
  00471	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00476	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0047b	0f b6 c0	 movzx	 eax, al
  0047e	85 c0		 test	 eax, eax
  00480	0f 85 e1 00 00
	00		 jne	 $LN4@DB_Save
  00486	6a 20		 push	 32			; 00000020H
  00488	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0048d	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00492	0f b6 c0	 movzx	 eax, al
  00495	85 c0		 test	 eax, eax
  00497	0f 85 ca 00 00
	00		 jne	 $LN4@DB_Save
  0049d	6a 21		 push	 33			; 00000021H
  0049f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  004a4	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  004a9	0f b6 c0	 movzx	 eax, al
  004ac	85 c0		 test	 eax, eax
  004ae	0f 85 b3 00 00
	00		 jne	 $LN4@DB_Save
  004b4	6a 22		 push	 34			; 00000022H
  004b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  004bb	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  004c0	0f b6 c0	 movzx	 eax, al
  004c3	85 c0		 test	 eax, eax
  004c5	0f 85 9c 00 00
	00		 jne	 $LN4@DB_Save
  004cb	6a 4e		 push	 78			; 0000004eH
  004cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  004d2	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  004d7	0f b6 c0	 movzx	 eax, al
  004da	85 c0		 test	 eax, eax
  004dc	0f 85 85 00 00
	00		 jne	 $LN4@DB_Save
  004e2	6a 40		 push	 64			; 00000040H
  004e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  004e9	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  004ee	0f b6 c0	 movzx	 eax, al
  004f1	85 c0		 test	 eax, eax
  004f3	75 72		 jne	 SHORT $LN4@DB_Save
  004f5	6a 32		 push	 50			; 00000032H
  004f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  004fc	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00501	0f b6 c0	 movzx	 eax, al
  00504	85 c0		 test	 eax, eax
  00506	75 5f		 jne	 SHORT $LN4@DB_Save
  00508	6a 40		 push	 64			; 00000040H
  0050a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0050f	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00514	0f b6 c0	 movzx	 eax, al
  00517	85 c0		 test	 eax, eax
  00519	75 4c		 jne	 SHORT $LN4@DB_Save
  0051b	6a 30		 push	 48			; 00000030H
  0051d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00522	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00527	0f b6 c0	 movzx	 eax, al
  0052a	85 c0		 test	 eax, eax
  0052c	75 39		 jne	 SHORT $LN4@DB_Save
  0052e	6a 31		 push	 49			; 00000031H
  00530	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00535	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0053a	0f b6 c0	 movzx	 eax, al
  0053d	85 c0		 test	 eax, eax
  0053f	75 26		 jne	 SHORT $LN4@DB_Save
  00541	6a 4f		 push	 79			; 0000004fH
  00543	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00548	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0054d	0f b6 c0	 movzx	 eax, al
  00550	85 c0		 test	 eax, eax
  00552	75 13		 jne	 SHORT $LN4@DB_Save
  00554	6a 51		 push	 81			; 00000051H
  00556	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0055b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00560	0f b6 c0	 movzx	 eax, al
  00563	85 c0		 test	 eax, eax
  00565	74 0c		 je	 SHORT $LN5@DB_Save
$LN4@DB_Save:

; 177  : 	{
; 178  : 		this->GD_CreateonBankSave(aIndex);

  00567	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0056a	50		 push	 eax
  0056b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0056e	e8 00 00 00 00	 call	 ?GD_CreateonBankSave@CExGDManager@@QAEXH@Z ; CExGDManager::GD_CreateonBankSave
$LN5@DB_Save:

; 179  : 	}
; 180  : #endif
; 181  : 
; 182  : #if(SYSTEM_ACHIEVEMENTS)
; 183  : 	if(g_ExLicense.user.bAchievements)

  00573	0f b6 05 e9 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+233
  0057a	85 c0		 test	 eax, eax
  0057c	74 0e		 je	 SHORT $LN3@DB_Save

; 184  : 	{
; 185  : 		g_Achievements.GDPlayerSave(aIndex);

  0057e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00581	50		 push	 eax
  00582	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Achievements@@3VCAchievements@@A ; g_Achievements
  00587	e8 00 00 00 00	 call	 ?GDPlayerSave@CAchievements@@QAEXH@Z ; CAchievements::GDPlayerSave
$LN3@DB_Save:

; 186  : 	}
; 187  : #endif
; 188  : 
; 189  : 	if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2))

  0058c	6a 20		 push	 32			; 00000020H
  0058e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00593	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00598	0f b6 c0	 movzx	 eax, al
  0059b	85 c0		 test	 eax, eax
  0059d	75 26		 jne	 SHORT $LN1@DB_Save
  0059f	6a 21		 push	 33			; 00000021H
  005a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  005a6	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  005ab	0f b6 c0	 movzx	 eax, al
  005ae	85 c0		 test	 eax, eax
  005b0	75 13		 jne	 SHORT $LN1@DB_Save
  005b2	6a 22		 push	 34			; 00000022H
  005b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  005b9	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  005be	0f b6 c0	 movzx	 eax, al
  005c1	85 c0		 test	 eax, eax
  005c3	74 0c		 je	 SHORT $LN2@DB_Save
$LN1@DB_Save:

; 190  : 	{
; 191  : 		this->GD_VoteBuffSave(aIndex);

  005c5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  005c8	50		 push	 eax
  005c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005cc	e8 00 00 00 00	 call	 ?GD_VoteBuffSave@CExGDManager@@QAEXH@Z ; CExGDManager::GD_VoteBuffSave
$LN2@DB_Save:

; 192  : 	}
; 193  : 
; 194  : #if(CUSTOM_EX_QUEST_SYSTEM==TRUE)
; 195  : 	this->GD_ExQuestSystemSave(aIndex);

  005d1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  005d4	50		 push	 eax
  005d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005d8	e8 00 00 00 00	 call	 ?GD_ExQuestSystemSave@CExGDManager@@QAEXH@Z ; CExGDManager::GD_ExQuestSystemSave
$LN12@DB_Save:

; 196  : #endif
; 197  : }

  005dd	5f		 pop	 edi
  005de	5e		 pop	 esi
  005df	5b		 pop	 ebx
  005e0	8b e5		 mov	 esp, ebp
  005e2	5d		 pop	 ebp
  005e3	c2 04 00	 ret	 4
?DB_Save@CExGDManager@@QAEXH@Z ENDP			; CExGDManager::DB_Save
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
PUBLIC	__$ArrayPad$
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	_memcpy:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 20
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_PartySearchLoad@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_PartySearchLoad
; _this$ = ecx

; 201  : {

  005f0	55		 push	 ebp
  005f1	8b ec		 mov	 ebp, esp
  005f3	83 ec 60	 sub	 esp, 96			; 00000060H
  005f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  005fb	33 c5		 xor	 eax, ebp
  005fd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00600	53		 push	 ebx
  00601	56		 push	 esi
  00602	57		 push	 edi
  00603	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 	LPOBJ lpUser = &gObj[aIndex];

  00606	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00609	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0060f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00615	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 203  : 	PMSG_REQ_PARTYSEARCH_LOAD pMsg;
; 204  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x00, sizeof(pMsg));

  00618	6a 14		 push	 20			; 00000014H
  0061a	6a 00		 push	 0
  0061c	68 ea 00 00 00	 push	 234			; 000000eaH
  00621	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00624	50		 push	 eax
  00625	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00628	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 205  : 	pMsg.aIndex = aIndex;

  0062d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00630	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 206  : 	pMsg.Name[10] = 0;

  00633	c6 45 f2 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 207  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00637	6a 0a		 push	 10			; 0000000aH
  00639	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0063c	83 c0 77	 add	 eax, 119		; 00000077H
  0063f	50		 push	 eax
  00640	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp+8]
  00643	51		 push	 ecx
  00644	e8 00 00 00 00	 call	 _memcpy
  00649	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0064c	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00650	50		 push	 eax
  00651	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00654	51		 push	 ecx
  00655	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0065a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 209  : }

  0065f	5f		 pop	 edi
  00660	5e		 pop	 esi
  00661	5b		 pop	 ebx
  00662	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00665	33 cd		 xor	 ecx, ebp
  00667	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0066c	8b e5		 mov	 esp, ebp
  0066e	5d		 pop	 ebp
  0066f	c2 04 00	 ret	 4
?GD_PartySearchLoad@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_PartySearchLoad
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 106  : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 107  : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 108  : 		lpBuf[3] = sub;

  00024	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00027	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0002a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
EXTRN	?LoadBinary@PartySearch@@QAEXHPAE@Z:PROC	; PartySearch::LoadBinary
EXTRN	?g_PartySearch@@3VPartySearch@@A:BYTE		; g_PartySearch
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exgdmanager.cpp
_TEXT	SEGMENT
tv68 = -76						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DG_PartySearchLoad@CExGDManager@@QAEXPAUPMSG_ANS_PARTYSEARCH_LOAD@@@Z PROC ; CExGDManager::DG_PartySearchLoad
; _this$ = ecx

; 212  : {

  00680	55		 push	 ebp
  00681	8b ec		 mov	 ebp, esp
  00683	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00686	53		 push	 ebx
  00687	56		 push	 esi
  00688	57		 push	 edi
  00689	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 	int aIndex = aRecv->aIndex;

  0068c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0068f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00692	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 214  : 	if(!OBJMAX_RANGE(aIndex))

  00695	83 7d f8 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00699	7d 09		 jge	 SHORT $LN4@DG_PartySe
  0069b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  006a2	eb 0f		 jmp	 SHORT $LN5@DG_PartySe
$LN4@DG_PartySe:
  006a4	33 c0		 xor	 eax, eax
  006a6	81 7d f8 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  006ad	0f 9e c0	 setle	 al
  006b0	89 45 b4	 mov	 DWORD PTR tv68[ebp], eax
$LN5@DG_PartySe:
  006b3	83 7d b4 00	 cmp	 DWORD PTR tv68[ebp], 0
  006b7	75 02		 jne	 SHORT $LN1@DG_PartySe

; 215  : 	{
; 216  : 		return;

  006b9	eb 15		 jmp	 SHORT $LN2@DG_PartySe
$LN1@DG_PartySe:

; 217  : 	}
; 218  : 	g_PartySearch.LoadBinary(aIndex,aRecv->btPartySearch);

  006bb	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  006be	83 c0 09	 add	 eax, 9
  006c1	50		 push	 eax
  006c2	8b 4d f8	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  006c5	51		 push	 ecx
  006c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PartySearch@@3VPartySearch@@A ; g_PartySearch
  006cb	e8 00 00 00 00	 call	 ?LoadBinary@PartySearch@@QAEXHPAE@Z ; PartySearch::LoadBinary
$LN2@DG_PartySe:

; 219  : }

  006d0	5f		 pop	 edi
  006d1	5e		 pop	 esi
  006d2	5b		 pop	 ebx
  006d3	8b e5		 mov	 esp, ebp
  006d5	5d		 pop	 ebp
  006d6	c2 04 00	 ret	 4
?DG_PartySearchLoad@CExGDManager@@QAEXPAUPMSG_ANS_PARTYSEARCH_LOAD@@@Z ENDP ; CExGDManager::DG_PartySearchLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?SaveBinary@PartySearch@@QAEXHPAE@Z:PROC	; PartySearch::SaveBinary
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -40						; size = 26
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_PartySearchSave@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_PartySearchSave
; _this$ = ecx

; 222  : {

  006e0	55		 push	 ebp
  006e1	8b ec		 mov	 ebp, esp
  006e3	83 ec 68	 sub	 esp, 104		; 00000068H
  006e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  006eb	33 c5		 xor	 eax, ebp
  006ed	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  006f0	53		 push	 ebx
  006f1	56		 push	 esi
  006f2	57		 push	 edi
  006f3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 223  : 	LPOBJ lpUser = &gObj[aIndex];

  006f6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  006f9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  006ff	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00705	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 224  : 	PMSG_REQ_PARTYSEARCH_SAVE pMsg;
; 225  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x01, sizeof(pMsg));

  00708	6a 1a		 push	 26			; 0000001aH
  0070a	6a 01		 push	 1
  0070c	68 ea 00 00 00	 push	 234			; 000000eaH
  00711	8d 45 d8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00714	50		 push	 eax
  00715	8d 4d d8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00718	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 226  : 	pMsg.Name[10] = 0;

  0071d	c6 45 e6 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 227  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00721	6a 0a		 push	 10			; 0000000aH
  00723	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00726	83 c0 77	 add	 eax, 119		; 00000077H
  00729	50		 push	 eax
  0072a	8d 4d dc	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  0072d	51		 push	 ecx
  0072e	e8 00 00 00 00	 call	 _memcpy
  00733	83 c4 0c	 add	 esp, 12			; 0000000cH

; 228  : 	g_PartySearch.SaveBinary(aIndex, pMsg.btPartySearch);

  00736	8d 45 e7	 lea	 eax, DWORD PTR _pMsg$[ebp+15]
  00739	50		 push	 eax
  0073a	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0073d	51		 push	 ecx
  0073e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PartySearch@@3VPartySearch@@A ; g_PartySearch
  00743	e8 00 00 00 00	 call	 ?SaveBinary@PartySearch@@QAEXHPAE@Z ; PartySearch::SaveBinary

; 229  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00748	0f b6 45 d9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0074c	50		 push	 eax
  0074d	8d 4d d8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00750	51		 push	 ecx
  00751	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00756	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 230  : }

  0075b	5f		 pop	 edi
  0075c	5e		 pop	 esi
  0075d	5b		 pop	 ebx
  0075e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00761	33 cd		 xor	 ecx, ebp
  00763	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00768	8b e5		 mov	 esp, ebp
  0076a	5d		 pop	 ebp
  0076b	c2 04 00	 ret	 4
?GD_PartySearchSave@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_PartySearchSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 20
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_ExBuffLoad@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_ExBuffLoad
; _this$ = ecx

; 234  : {

  00770	55		 push	 ebp
  00771	8b ec		 mov	 ebp, esp
  00773	83 ec 60	 sub	 esp, 96			; 00000060H
  00776	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0077b	33 c5		 xor	 eax, ebp
  0077d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00780	53		 push	 ebx
  00781	56		 push	 esi
  00782	57		 push	 edi
  00783	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 	LPOBJ lpUser = &gObj[aIndex];

  00786	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00789	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0078f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00795	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 236  : 	PMSG_REQ_EXBUFF_LOAD pMsg;
; 237  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x02, sizeof(pMsg));

  00798	6a 14		 push	 20			; 00000014H
  0079a	6a 02		 push	 2
  0079c	68 ea 00 00 00	 push	 234			; 000000eaH
  007a1	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  007a4	50		 push	 eax
  007a5	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  007a8	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 238  : 	pMsg.aIndex = aIndex;

  007ad	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  007b0	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 239  : 	pMsg.Name[10] = 0;

  007b3	c6 45 f2 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 240  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  007b7	6a 0a		 push	 10			; 0000000aH
  007b9	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  007bc	83 c0 77	 add	 eax, 119		; 00000077H
  007bf	50		 push	 eax
  007c0	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp+8]
  007c3	51		 push	 ecx
  007c4	e8 00 00 00 00	 call	 _memcpy
  007c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 241  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  007cc	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  007d0	50		 push	 eax
  007d1	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  007d4	51		 push	 ecx
  007d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  007da	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 242  : }

  007df	5f		 pop	 edi
  007e0	5e		 pop	 esi
  007e1	5b		 pop	 ebx
  007e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007e5	33 cd		 xor	 ecx, ebp
  007e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007ec	8b e5		 mov	 esp, ebp
  007ee	5d		 pop	 ebp
  007ef	c2 04 00	 ret	 4
?GD_ExBuffLoad@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_ExBuffLoad
_TEXT	ENDS
EXTRN	?UserConnect@BufferSystem@@QAEXH@Z:PROC		; BufferSystem::UserConnect
EXTRN	?g_BufferSystem@@3VBufferSystem@@A:BYTE		; g_BufferSystem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv71 = -80						; size = 4
_lpUser$ = -12						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DG_ExBuffLoad@CExGDManager@@QAEXPAUPMSG_ANS_EXBUFF_LOAD@@@Z PROC ; CExGDManager::DG_ExBuffLoad
; _this$ = ecx

; 245  : {

  00800	55		 push	 ebp
  00801	8b ec		 mov	 ebp, esp
  00803	83 ec 50	 sub	 esp, 80			; 00000050H
  00806	53		 push	 ebx
  00807	56		 push	 esi
  00808	57		 push	 edi
  00809	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 246  : 	if(!aRecv->bResult)

  0080c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0080f	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00813	85 c9		 test	 ecx, ecx
  00815	75 05		 jne	 SHORT $LN2@DG_ExBuffL

; 247  : 	{
; 248  : 		return;

  00817	e9 a9 00 00 00	 jmp	 $LN3@DG_ExBuffL
$LN2@DG_ExBuffL:

; 249  : 	}
; 250  : 
; 251  : 	int aIndex = aRecv->aIndex;

  0081c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0081f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00822	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 252  : 
; 253  : 	if(!OBJMAX_RANGE(aIndex))

  00825	83 7d f8 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00829	7d 09		 jge	 SHORT $LN5@DG_ExBuffL
  0082b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  00832	eb 0f		 jmp	 SHORT $LN6@DG_ExBuffL
$LN5@DG_ExBuffL:
  00834	33 c0		 xor	 eax, eax
  00836	81 7d f8 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  0083d	0f 9e c0	 setle	 al
  00840	89 45 b0	 mov	 DWORD PTR tv71[ebp], eax
$LN6@DG_ExBuffL:
  00843	83 7d b0 00	 cmp	 DWORD PTR tv71[ebp], 0
  00847	75 02		 jne	 SHORT $LN1@DG_ExBuffL

; 254  : 	{
; 255  : 		return;

  00849	eb 7a		 jmp	 SHORT $LN3@DG_ExBuffL
$LN1@DG_ExBuffL:

; 256  : 	}
; 257  : 
; 258  : 	LPOBJ lpUser = &gObj[aIndex];

  0084b	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0084e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00854	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0085a	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 259  : 
; 260  : 	lpUser->ExpBuffTime = aRecv->ExpBuffTime;

  0085d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00860	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00863	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00866	89 90 90 28 00
	00		 mov	 DWORD PTR [eax+10384], edx

; 261  : 	lpUser->DamageBuffTime = aRecv->DamageBuffTime;

  0086c	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0086f	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00872	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00875	89 90 94 28 00
	00		 mov	 DWORD PTR [eax+10388], edx

; 262  : 	lpUser->DefenceBuffTime = aRecv->DefenceBuffTime;

  0087b	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0087e	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00881	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00884	89 90 98 28 00
	00		 mov	 DWORD PTR [eax+10392], edx

; 263  : 	lpUser->BattleBuffTime = aRecv->BattleBuffTime;

  0088a	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0088d	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00890	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00893	89 90 9c 28 00
	00		 mov	 DWORD PTR [eax+10396], edx

; 264  : 	lpUser->DropBuffTime = aRecv->DropBuffTime;

  00899	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0089c	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0089f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  008a2	89 90 a0 28 00
	00		 mov	 DWORD PTR [eax+10400], edx

; 265  : 	lpUser->DoubleBuffTime = aRecv->DoubleBuffTime;

  008a8	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  008ab	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  008ae	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  008b1	89 90 a4 28 00
	00		 mov	 DWORD PTR [eax+10404], edx

; 266  : 
; 267  : 	g_BufferSystem.UserConnect(aIndex);

  008b7	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  008ba	50		 push	 eax
  008bb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BufferSystem@@3VBufferSystem@@A ; g_BufferSystem
  008c0	e8 00 00 00 00	 call	 ?UserConnect@BufferSystem@@QAEXH@Z ; BufferSystem::UserConnect
$LN3@DG_ExBuffL:

; 268  : }

  008c5	5f		 pop	 edi
  008c6	5e		 pop	 esi
  008c7	5b		 pop	 ebx
  008c8	8b e5		 mov	 esp, ebp
  008ca	5d		 pop	 ebp
  008cb	c2 04 00	 ret	 4
?DG_ExBuffLoad@CExGDManager@@QAEXPAUPMSG_ANS_EXBUFF_LOAD@@@Z ENDP ; CExGDManager::DG_ExBuffLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -120						; size = 4
_lpUser$ = -52						; size = 4
_pMsg$ = -48						; size = 40
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_ExBuffSave@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_ExBuffSave
; _this$ = ecx

; 271  : {

  008d0	55		 push	 ebp
  008d1	8b ec		 mov	 ebp, esp
  008d3	83 ec 78	 sub	 esp, 120		; 00000078H
  008d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  008db	33 c5		 xor	 eax, ebp
  008dd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  008e0	53		 push	 ebx
  008e1	56		 push	 esi
  008e2	57		 push	 edi
  008e3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 272  : 	if(!OBJMAX_RANGE(aIndex))

  008e6	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  008ea	7d 09		 jge	 SHORT $LN4@GD_ExBuffS
  008ec	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  008f3	eb 0f		 jmp	 SHORT $LN5@GD_ExBuffS
$LN4@GD_ExBuffS:
  008f5	33 c0		 xor	 eax, eax
  008f7	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  008fe	0f 9e c0	 setle	 al
  00901	89 45 88	 mov	 DWORD PTR tv67[ebp], eax
$LN5@GD_ExBuffS:
  00904	83 7d 88 00	 cmp	 DWORD PTR tv67[ebp], 0
  00908	75 05		 jne	 SHORT $LN1@GD_ExBuffS

; 273  : 	{
; 274  : 		return;

  0090a	e9 9b 00 00 00	 jmp	 $LN2@GD_ExBuffS
$LN1@GD_ExBuffS:

; 275  : 	}
; 276  : 
; 277  : 	PMSG_REQ_EXBUFF_SAVE pMsg;
; 278  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x03, sizeof(pMsg));

  0090f	6a 28		 push	 40			; 00000028H
  00911	6a 03		 push	 3
  00913	68 ea 00 00 00	 push	 234			; 000000eaH
  00918	8d 45 d0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0091b	50		 push	 eax
  0091c	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0091f	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 279  : 
; 280  : 	LPOBJ lpUser = &gObj[aIndex];

  00924	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00927	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0092d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00933	89 45 cc	 mov	 DWORD PTR _lpUser$[ebp], eax

; 281  : 
; 282  : 	pMsg.Name[10] = 0;

  00936	c6 45 de 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 283  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  0093a	6a 0a		 push	 10			; 0000000aH
  0093c	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0093f	83 c0 77	 add	 eax, 119		; 00000077H
  00942	50		 push	 eax
  00943	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00946	51		 push	 ecx
  00947	e8 00 00 00 00	 call	 _memcpy
  0094c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 284  : 
; 285  : 	pMsg.ExpBuffTime = lpUser->ExpBuffTime;

  0094f	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00952	8b 88 90 28 00
	00		 mov	 ecx, DWORD PTR [eax+10384]
  00958	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 286  : 	pMsg.DamageBuffTime = lpUser->DamageBuffTime;

  0095b	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0095e	8b 88 94 28 00
	00		 mov	 ecx, DWORD PTR [eax+10388]
  00964	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 287  : 	pMsg.DefenceBuffTime = lpUser->DefenceBuffTime;

  00967	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0096a	8b 88 98 28 00
	00		 mov	 ecx, DWORD PTR [eax+10392]
  00970	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+24], ecx

; 288  : 	pMsg.BattleBuffTime = lpUser->BattleBuffTime;

  00973	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00976	8b 88 9c 28 00
	00		 mov	 ecx, DWORD PTR [eax+10396]
  0097c	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 289  : 	pMsg.DropBuffTime = lpUser->DropBuffTime;

  0097f	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00982	8b 88 a0 28 00
	00		 mov	 ecx, DWORD PTR [eax+10400]
  00988	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 290  : 	pMsg.DoubleBuffTime = lpUser->DoubleBuffTime;

  0098b	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0098e	8b 88 a4 28 00
	00		 mov	 ecx, DWORD PTR [eax+10404]
  00994	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+36], ecx

; 291  : 
; 292  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00997	0f b6 45 d1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0099b	50		 push	 eax
  0099c	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0099f	51		 push	 ecx
  009a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  009a5	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_ExBuffS:

; 293  : }

  009aa	5f		 pop	 edi
  009ab	5e		 pop	 esi
  009ac	5b		 pop	 ebx
  009ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009b0	33 cd		 xor	 ecx, ebp
  009b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009b7	8b e5		 mov	 esp, ebp
  009b9	5d		 pop	 ebp
  009ba	c2 04 00	 ret	 4
?GD_ExBuffSave@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_ExBuffSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 20
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_BMQuestLoad@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_BMQuestLoad
; _this$ = ecx

; 297  : {

  009c0	55		 push	 ebp
  009c1	8b ec		 mov	 ebp, esp
  009c3	83 ec 60	 sub	 esp, 96			; 00000060H
  009c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  009cb	33 c5		 xor	 eax, ebp
  009cd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  009d0	53		 push	 ebx
  009d1	56		 push	 esi
  009d2	57		 push	 edi
  009d3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 298  : 	LPOBJ lpUser = &gObj[aIndex];

  009d6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  009d9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  009df	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  009e5	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 299  : 	PMSG_REQ_BMQUEST_LOAD pMsg;
; 300  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x04, sizeof(pMsg));

  009e8	6a 14		 push	 20			; 00000014H
  009ea	6a 04		 push	 4
  009ec	68 ea 00 00 00	 push	 234			; 000000eaH
  009f1	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  009f4	50		 push	 eax
  009f5	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  009f8	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 301  : 	pMsg.aIndex = aIndex;

  009fd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00a00	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 302  : 	pMsg.Name[10] = 0;

  00a03	c6 45 f2 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 303  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00a07	6a 0a		 push	 10			; 0000000aH
  00a09	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00a0c	83 c0 77	 add	 eax, 119		; 00000077H
  00a0f	50		 push	 eax
  00a10	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp+8]
  00a13	51		 push	 ecx
  00a14	e8 00 00 00 00	 call	 _memcpy
  00a19	83 c4 0c	 add	 esp, 12			; 0000000cH

; 304  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00a1c	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00a20	50		 push	 eax
  00a21	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00a24	51		 push	 ecx
  00a25	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00a2a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 305  : }

  00a2f	5f		 pop	 edi
  00a30	5e		 pop	 esi
  00a31	5b		 pop	 ebx
  00a32	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a35	33 cd		 xor	 ecx, ebp
  00a37	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a3c	8b e5		 mov	 esp, ebp
  00a3e	5d		 pop	 ebp
  00a3f	c2 04 00	 ret	 4
?GD_BMQuestLoad@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_BMQuestLoad
; Function compile flags: /Odtp /ZI
tv71 = -80						; size = 4
_lpUser$ = -12						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DG_BMQuestLoad@CExGDManager@@QAEXPAUPMSG_ANS_BMQUEST_LOAD@@@Z PROC ; CExGDManager::DG_BMQuestLoad
; _this$ = ecx

; 308  : {

  00a50	55		 push	 ebp
  00a51	8b ec		 mov	 ebp, esp
  00a53	83 ec 50	 sub	 esp, 80			; 00000050H
  00a56	53		 push	 ebx
  00a57	56		 push	 esi
  00a58	57		 push	 edi
  00a59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 309  : 	if(!aRecv->bResult)

  00a5c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00a5f	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00a63	85 c9		 test	 ecx, ecx
  00a65	75 05		 jne	 SHORT $LN2@DG_BMQuest

; 310  : 	{
; 311  : 		return;

  00a67	e9 cb 00 00 00	 jmp	 $LN3@DG_BMQuest
$LN2@DG_BMQuest:

; 312  : 	}
; 313  : 
; 314  : 	int aIndex = aRecv->aIndex;

  00a6c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00a6f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00a72	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 315  : 
; 316  : 	if(!OBJMAX_RANGE(aIndex))

  00a75	83 7d f8 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00a79	7d 09		 jge	 SHORT $LN5@DG_BMQuest
  00a7b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  00a82	eb 0f		 jmp	 SHORT $LN6@DG_BMQuest
$LN5@DG_BMQuest:
  00a84	33 c0		 xor	 eax, eax
  00a86	81 7d f8 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00a8d	0f 9e c0	 setle	 al
  00a90	89 45 b0	 mov	 DWORD PTR tv71[ebp], eax
$LN6@DG_BMQuest:
  00a93	83 7d b0 00	 cmp	 DWORD PTR tv71[ebp], 0
  00a97	75 05		 jne	 SHORT $LN1@DG_BMQuest

; 317  : 	{
; 318  : 		return;

  00a99	e9 99 00 00 00	 jmp	 $LN3@DG_BMQuest
$LN1@DG_BMQuest:

; 319  : 	}
; 320  : 
; 321  : 	LPOBJ lpUser = &gObj[aIndex];

  00a9e	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00aa1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00aa7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00aad	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 322  : 
; 323  : 	lpUser->BMQuest_num = aRecv->BMQuest_num;

  00ab0	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00ab3	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00ab6	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00ab9	89 90 a8 28 00
	00		 mov	 DWORD PTR [eax+10408], edx

; 324  : 	lpUser->BMQuest_kill = aRecv->BMQuest_kill;

  00abf	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00ac2	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00ac5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00ac8	89 90 ac 28 00
	00		 mov	 DWORD PTR [eax+10412], edx

; 325  : 	lpUser->BMQuest_start = aRecv->BMQuest_start;

  00ace	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00ad1	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00ad4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00ad7	89 90 b0 28 00
	00		 mov	 DWORD PTR [eax+10416], edx

; 326  : 	lpUser->BMDamageReflect = aRecv->BMDamageReflect;

  00add	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00ae0	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00ae3	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00ae6	89 90 b4 28 00
	00		 mov	 DWORD PTR [eax+10420], edx

; 327  : 	lpUser->BMDamage = aRecv->BMDamage;

  00aec	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00aef	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00af2	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00af5	89 90 b8 28 00
	00		 mov	 DWORD PTR [eax+10424], edx

; 328  : 	lpUser->BMDefense = aRecv->BMDefense;

  00afb	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00afe	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00b01	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00b04	89 90 bc 28 00
	00		 mov	 DWORD PTR [eax+10428], edx

; 329  : 	lpUser->BMCriticalDamage = aRecv->BMCriticalDamage;

  00b0a	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00b0d	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00b10	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00b13	89 90 c0 28 00
	00		 mov	 DWORD PTR [eax+10432], edx

; 330  : 	lpUser->BMExcelentDamage = aRecv->BMExcelentDamage;

  00b19	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00b1c	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00b1f	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00b22	89 90 c4 28 00
	00		 mov	 DWORD PTR [eax+10436], edx

; 331  : 	lpUser->BMLife = aRecv->BMLife;

  00b28	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00b2b	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00b2e	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00b31	89 90 c8 28 00
	00		 mov	 DWORD PTR [eax+10440], edx
$LN3@DG_BMQuest:

; 332  : }

  00b37	5f		 pop	 edi
  00b38	5e		 pop	 esi
  00b39	5b		 pop	 ebx
  00b3a	8b e5		 mov	 esp, ebp
  00b3c	5d		 pop	 ebp
  00b3d	c2 04 00	 ret	 4
?DG_BMQuestLoad@CExGDManager@@QAEXPAUPMSG_ANS_BMQUEST_LOAD@@@Z ENDP ; CExGDManager::DG_BMQuestLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -132						; size = 4
_lpUser$ = -64						; size = 4
_pMsg$ = -60						; size = 52
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_BMQuestSave@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_BMQuestSave
; _this$ = ecx

; 335  : {

  00b40	55		 push	 ebp
  00b41	8b ec		 mov	 ebp, esp
  00b43	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00b49	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00b4e	33 c5		 xor	 eax, ebp
  00b50	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00b53	53		 push	 ebx
  00b54	56		 push	 esi
  00b55	57		 push	 edi
  00b56	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 336  : 	if(!OBJMAX_RANGE(aIndex))

  00b59	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00b5d	7d 0c		 jge	 SHORT $LN4@GD_BMQuest
  00b5f	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
  00b69	eb 12		 jmp	 SHORT $LN5@GD_BMQuest
$LN4@GD_BMQuest:
  00b6b	33 c0		 xor	 eax, eax
  00b6d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00b74	0f 9e c0	 setle	 al
  00b77	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv67[ebp], eax
$LN5@GD_BMQuest:
  00b7d	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv67[ebp], 0
  00b84	75 05		 jne	 SHORT $LN1@GD_BMQuest

; 337  : 	{
; 338  : 		return;

  00b86	e9 bf 00 00 00	 jmp	 $LN2@GD_BMQuest
$LN1@GD_BMQuest:

; 339  : 	}
; 340  : 
; 341  : 	PMSG_REQ_BMQUEST_SAVE pMsg;
; 342  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x05, sizeof(pMsg));

  00b8b	6a 34		 push	 52			; 00000034H
  00b8d	6a 05		 push	 5
  00b8f	68 ea 00 00 00	 push	 234			; 000000eaH
  00b94	8d 45 c4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00b97	50		 push	 eax
  00b98	8d 4d c4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00b9b	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 343  : 
; 344  : 	LPOBJ lpUser = &gObj[aIndex];

  00ba0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ba3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00ba9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00baf	89 45 c0	 mov	 DWORD PTR _lpUser$[ebp], eax

; 345  : 
; 346  : 	pMsg.Name[10] = 0;

  00bb2	c6 45 d2 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 347  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00bb6	6a 0a		 push	 10			; 0000000aH
  00bb8	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00bbb	83 c0 77	 add	 eax, 119		; 00000077H
  00bbe	50		 push	 eax
  00bbf	8d 4d c8	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00bc2	51		 push	 ecx
  00bc3	e8 00 00 00 00	 call	 _memcpy
  00bc8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 348  : 
; 349  : 	pMsg.BMQuest_num = lpUser->BMQuest_num;

  00bcb	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00bce	8b 88 a8 28 00
	00		 mov	 ecx, DWORD PTR [eax+10408]
  00bd4	89 4d d4	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 350  : 	pMsg.BMQuest_kill = lpUser->BMQuest_kill;

  00bd7	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00bda	8b 88 ac 28 00
	00		 mov	 ecx, DWORD PTR [eax+10412]
  00be0	89 4d d8	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 351  : 	pMsg.BMQuest_start = lpUser->BMQuest_start;

  00be3	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00be6	8b 88 b0 28 00
	00		 mov	 ecx, DWORD PTR [eax+10416]
  00bec	89 4d dc	 mov	 DWORD PTR _pMsg$[ebp+24], ecx

; 352  : 	pMsg.BMDamageReflect = lpUser->BMDamageReflect;

  00bef	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00bf2	8b 88 b4 28 00
	00		 mov	 ecx, DWORD PTR [eax+10420]
  00bf8	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 353  : 	pMsg.BMDamage = lpUser->BMDamage;

  00bfb	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00bfe	8b 88 b8 28 00
	00		 mov	 ecx, DWORD PTR [eax+10424]
  00c04	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 354  : 	pMsg.BMDefense = lpUser->BMDefense;

  00c07	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c0a	8b 88 bc 28 00
	00		 mov	 ecx, DWORD PTR [eax+10428]
  00c10	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+36], ecx

; 355  : 	pMsg.BMCriticalDamage = lpUser->BMCriticalDamage;

  00c13	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c16	8b 88 c0 28 00
	00		 mov	 ecx, DWORD PTR [eax+10432]
  00c1c	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+40], ecx

; 356  : 	pMsg.BMExcelentDamage = lpUser->BMExcelentDamage;

  00c1f	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c22	8b 88 c4 28 00
	00		 mov	 ecx, DWORD PTR [eax+10436]
  00c28	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+44], ecx

; 357  : 	pMsg.BMLife = lpUser->BMLife;

  00c2b	8b 45 c0	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c2e	8b 88 c8 28 00
	00		 mov	 ecx, DWORD PTR [eax+10440]
  00c34	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+48], ecx

; 358  : 
; 359  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00c37	0f b6 45 c5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00c3b	50		 push	 eax
  00c3c	8d 4d c4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00c3f	51		 push	 ecx
  00c40	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00c45	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_BMQuest:

; 360  : }

  00c4a	5f		 pop	 edi
  00c4b	5e		 pop	 esi
  00c4c	5b		 pop	 ebx
  00c4d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c50	33 cd		 xor	 ecx, ebp
  00c52	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c57	8b e5		 mov	 esp, ebp
  00c59	5d		 pop	 ebp
  00c5a	c2 04 00	 ret	 4
?GD_BMQuestSave@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_BMQuestSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 20
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_MonsterQuestLoad@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_MonsterQuestLoad
; _this$ = ecx

; 364  : {

  00c60	55		 push	 ebp
  00c61	8b ec		 mov	 ebp, esp
  00c63	83 ec 60	 sub	 esp, 96			; 00000060H
  00c66	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00c6b	33 c5		 xor	 eax, ebp
  00c6d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00c70	53		 push	 ebx
  00c71	56		 push	 esi
  00c72	57		 push	 edi
  00c73	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 365  : 	LPOBJ lpUser = &gObj[aIndex];

  00c76	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c79	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00c7f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c85	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 366  : 	PMSG_REQ_MONSTERQUEST_LOAD pMsg;
; 367  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x06, sizeof(pMsg));

  00c88	6a 14		 push	 20			; 00000014H
  00c8a	6a 06		 push	 6
  00c8c	68 ea 00 00 00	 push	 234			; 000000eaH
  00c91	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00c94	50		 push	 eax
  00c95	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00c98	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 368  : 	pMsg.aIndex = aIndex;

  00c9d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ca0	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 369  : 	pMsg.Name[10] = 0;

  00ca3	c6 45 f2 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 370  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00ca7	6a 0a		 push	 10			; 0000000aH
  00ca9	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00cac	83 c0 77	 add	 eax, 119		; 00000077H
  00caf	50		 push	 eax
  00cb0	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp+8]
  00cb3	51		 push	 ecx
  00cb4	e8 00 00 00 00	 call	 _memcpy
  00cb9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 371  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00cbc	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00cc0	50		 push	 eax
  00cc1	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00cc4	51		 push	 ecx
  00cc5	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00cca	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 372  : }

  00ccf	5f		 pop	 edi
  00cd0	5e		 pop	 esi
  00cd1	5b		 pop	 ebx
  00cd2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00cd5	33 cd		 xor	 ecx, ebp
  00cd7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00cdc	8b e5		 mov	 esp, ebp
  00cde	5d		 pop	 ebp
  00cdf	c2 04 00	 ret	 4
?GD_MonsterQuestLoad@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_MonsterQuestLoad
_TEXT	ENDS
EXTRN	?GCConnectUser@MonsterQuest@@QAEXH@Z:PROC	; MonsterQuest::GCConnectUser
EXTRN	?gMonsterQuest@@3VMonsterQuest@@A:BYTE		; gMonsterQuest
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv71 = -80						; size = 4
_lpUser$ = -12						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DG_MonsterQuestLoad@CExGDManager@@QAEXPAUPMSG_ANS_MONSTERQUEST_LOAD@@@Z PROC ; CExGDManager::DG_MonsterQuestLoad
; _this$ = ecx

; 375  : {

  00cf0	55		 push	 ebp
  00cf1	8b ec		 mov	 ebp, esp
  00cf3	83 ec 50	 sub	 esp, 80			; 00000050H
  00cf6	53		 push	 ebx
  00cf7	56		 push	 esi
  00cf8	57		 push	 edi
  00cf9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 376  : 	if(!aRecv->bResult)

  00cfc	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00cff	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00d03	85 c9		 test	 ecx, ecx
  00d05	75 05		 jne	 SHORT $LN2@DG_Monster

; 377  : 	{
; 378  : 		return;

  00d07	e9 ab 00 00 00	 jmp	 $LN3@DG_Monster
$LN2@DG_Monster:

; 379  : 	}
; 380  : 
; 381  : 	int aIndex = aRecv->aIndex;

  00d0c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00d0f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00d12	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 382  : 
; 383  : 	if(!OBJMAX_RANGE(aIndex))

  00d15	83 7d f8 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00d19	7d 09		 jge	 SHORT $LN5@DG_Monster
  00d1b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  00d22	eb 0f		 jmp	 SHORT $LN6@DG_Monster
$LN5@DG_Monster:
  00d24	33 c0		 xor	 eax, eax
  00d26	81 7d f8 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00d2d	0f 9e c0	 setle	 al
  00d30	89 45 b0	 mov	 DWORD PTR tv71[ebp], eax
$LN6@DG_Monster:
  00d33	83 7d b0 00	 cmp	 DWORD PTR tv71[ebp], 0
  00d37	75 02		 jne	 SHORT $LN1@DG_Monster

; 384  : 	{
; 385  : 		return;

  00d39	eb 7c		 jmp	 SHORT $LN3@DG_Monster
$LN1@DG_Monster:

; 386  : 	}
; 387  : 
; 388  : 	LPOBJ lpUser = &gObj[aIndex];

  00d3b	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d3e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00d44	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00d4a	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 389  : 
; 390  : 	lpUser->m_MonsterQuest.QuestNumber = aRecv->QuestNum;

  00d4d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00d50	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00d53	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  00d57	66 89 90 24 28
	00 00		 mov	 WORD PTR [eax+10276], dx

; 391  : 	lpUser->m_MonsterQuest.KillCount[0] = aRecv->QuestKill_1;

  00d5e	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00d61	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00d64	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00d67	89 90 28 28 00
	00		 mov	 DWORD PTR [eax+10280], edx

; 392  : 	lpUser->m_MonsterQuest.KillCount[1] = aRecv->QuestKill_2;

  00d6d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00d70	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00d73	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00d76	89 90 2c 28 00
	00		 mov	 DWORD PTR [eax+10284], edx

; 393  : 	lpUser->m_MonsterQuest.KillCount[2] = aRecv->QuestKill_3;

  00d7c	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00d7f	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00d82	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00d85	89 90 30 28 00
	00		 mov	 DWORD PTR [eax+10288], edx

; 394  : 	lpUser->m_MonsterQuest.KillCount[3] = aRecv->QuestKill_4;

  00d8b	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00d8e	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00d91	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00d94	89 90 34 28 00
	00		 mov	 DWORD PTR [eax+10292], edx

; 395  : 	lpUser->m_MonsterQuest.KillCount[4] = aRecv->QuestKill_5;

  00d9a	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00d9d	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00da0	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00da3	89 90 38 28 00
	00		 mov	 DWORD PTR [eax+10296], edx

; 396  : 
; 397  : 	gMonsterQuest.GCConnectUser(aIndex);

  00da9	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00dac	50		 push	 eax
  00dad	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMonsterQuest@@3VMonsterQuest@@A ; gMonsterQuest
  00db2	e8 00 00 00 00	 call	 ?GCConnectUser@MonsterQuest@@QAEXH@Z ; MonsterQuest::GCConnectUser
$LN3@DG_Monster:

; 398  : }

  00db7	5f		 pop	 edi
  00db8	5e		 pop	 esi
  00db9	5b		 pop	 ebx
  00dba	8b e5		 mov	 esp, ebp
  00dbc	5d		 pop	 ebp
  00dbd	c2 04 00	 ret	 4
?DG_MonsterQuestLoad@CExGDManager@@QAEXPAUPMSG_ANS_MONSTERQUEST_LOAD@@@Z ENDP ; CExGDManager::DG_MonsterQuestLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -120						; size = 4
_lpUser$ = -52						; size = 4
_pMsg$ = -48						; size = 40
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_MonsterQuestSave@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_MonsterQuestSave
; _this$ = ecx

; 401  : {

  00dc0	55		 push	 ebp
  00dc1	8b ec		 mov	 ebp, esp
  00dc3	83 ec 78	 sub	 esp, 120		; 00000078H
  00dc6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00dcb	33 c5		 xor	 eax, ebp
  00dcd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00dd0	53		 push	 ebx
  00dd1	56		 push	 esi
  00dd2	57		 push	 edi
  00dd3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 402  : 	if(!OBJMAX_RANGE(aIndex))

  00dd6	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00dda	7d 09		 jge	 SHORT $LN4@GD_Monster@2
  00ddc	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  00de3	eb 0f		 jmp	 SHORT $LN5@GD_Monster@2
$LN4@GD_Monster@2:
  00de5	33 c0		 xor	 eax, eax
  00de7	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00dee	0f 9e c0	 setle	 al
  00df1	89 45 88	 mov	 DWORD PTR tv67[ebp], eax
$LN5@GD_Monster@2:
  00df4	83 7d 88 00	 cmp	 DWORD PTR tv67[ebp], 0
  00df8	75 05		 jne	 SHORT $LN1@GD_Monster@2

; 403  : 	{
; 404  : 		return;

  00dfa	e9 9d 00 00 00	 jmp	 $LN2@GD_Monster@2
$LN1@GD_Monster@2:

; 405  : 	}
; 406  : 
; 407  : 	PMSG_REQ_MONSTERQUEST_SAVE pMsg;
; 408  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x07, sizeof(pMsg));

  00dff	6a 28		 push	 40			; 00000028H
  00e01	6a 07		 push	 7
  00e03	68 ea 00 00 00	 push	 234			; 000000eaH
  00e08	8d 45 d0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00e0b	50		 push	 eax
  00e0c	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00e0f	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 409  : 
; 410  : 	LPOBJ lpUser = &gObj[aIndex];

  00e14	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00e17	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00e1d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00e23	89 45 cc	 mov	 DWORD PTR _lpUser$[ebp], eax

; 411  : 
; 412  : 	pMsg.Name[10] = 0;

  00e26	c6 45 de 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 413  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00e2a	6a 0a		 push	 10			; 0000000aH
  00e2c	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e2f	83 c0 77	 add	 eax, 119		; 00000077H
  00e32	50		 push	 eax
  00e33	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00e36	51		 push	 ecx
  00e37	e8 00 00 00 00	 call	 _memcpy
  00e3c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 414  : 
; 415  : 	pMsg.QuestNum = lpUser->m_MonsterQuest.QuestNumber;

  00e3f	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e42	66 8b 88 24 28
	00 00		 mov	 cx, WORD PTR [eax+10276]
  00e49	66 89 4d e0	 mov	 WORD PTR _pMsg$[ebp+16], cx

; 416  : 	pMsg.QuestKill_1 = lpUser->m_MonsterQuest.KillCount[0];

  00e4d	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e50	8b 88 28 28 00
	00		 mov	 ecx, DWORD PTR [eax+10280]
  00e56	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 417  : 	pMsg.QuestKill_2 = lpUser->m_MonsterQuest.KillCount[1];

  00e59	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e5c	8b 88 2c 28 00
	00		 mov	 ecx, DWORD PTR [eax+10284]
  00e62	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+24], ecx

; 418  : 	pMsg.QuestKill_3 = lpUser->m_MonsterQuest.KillCount[2];

  00e65	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e68	8b 88 30 28 00
	00		 mov	 ecx, DWORD PTR [eax+10288]
  00e6e	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 419  : 	pMsg.QuestKill_4 = lpUser->m_MonsterQuest.KillCount[3];

  00e71	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e74	8b 88 34 28 00
	00		 mov	 ecx, DWORD PTR [eax+10292]
  00e7a	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 420  : 	pMsg.QuestKill_5 = lpUser->m_MonsterQuest.KillCount[4];

  00e7d	8b 45 cc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e80	8b 88 38 28 00
	00		 mov	 ecx, DWORD PTR [eax+10296]
  00e86	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+36], ecx

; 421  : 
; 422  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00e89	0f b6 45 d1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00e8d	50		 push	 eax
  00e8e	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00e91	51		 push	 ecx
  00e92	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00e97	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_Monster@2:

; 423  : }

  00e9c	5f		 pop	 edi
  00e9d	5e		 pop	 esi
  00e9e	5b		 pop	 ebx
  00e9f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ea2	33 cd		 xor	 ecx, ebp
  00ea4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ea9	8b e5		 mov	 esp, ebp
  00eab	5d		 pop	 ebp
  00eac	c2 04 00	 ret	 4
?GD_MonsterQuestSave@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_MonsterQuestSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -44						; size = 32
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_RageSystemLoad@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_RageSystemLoad
; _this$ = ecx

; 427  : {

  00eb0	55		 push	 ebp
  00eb1	8b ec		 mov	 ebp, esp
  00eb3	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00eb6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00ebb	33 c5		 xor	 eax, ebp
  00ebd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00ec0	53		 push	 ebx
  00ec1	56		 push	 esi
  00ec2	57		 push	 edi
  00ec3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 428  : 	LPOBJ lpUser = &gObj[aIndex];

  00ec6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ec9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00ecf	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00ed5	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 429  : 	PMSG_REQ_RAGESYSTEM_LOAD pMsg;
; 430  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x08, sizeof(pMsg));

  00ed8	6a 20		 push	 32			; 00000020H
  00eda	6a 08		 push	 8
  00edc	68 ea 00 00 00	 push	 234			; 000000eaH
  00ee1	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00ee4	50		 push	 eax
  00ee5	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00ee8	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 431  : 	pMsg.aIndex = aIndex;

  00eed	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ef0	89 45 d8	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 432  : 
; 433  : 	pMsg.AccountID[10] = 0;

  00ef3	c6 45 e6 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 434  : 	memcpy(pMsg.AccountID, lpUser->AccountID, sizeof(pMsg.AccountID)-1);

  00ef7	6a 0a		 push	 10			; 0000000aH
  00ef9	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00efc	83 c0 6c	 add	 eax, 108		; 0000006cH
  00eff	50		 push	 eax
  00f00	8d 4d dc	 lea	 ecx, DWORD PTR _pMsg$[ebp+8]
  00f03	51		 push	 ecx
  00f04	e8 00 00 00 00	 call	 _memcpy
  00f09	83 c4 0c	 add	 esp, 12			; 0000000cH

; 435  : 
; 436  : 	pMsg.Name[10] = 0;

  00f0c	c6 45 f1 00	 mov	 BYTE PTR _pMsg$[ebp+29], 0

; 437  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00f10	6a 0a		 push	 10			; 0000000aH
  00f12	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00f15	83 c0 77	 add	 eax, 119		; 00000077H
  00f18	50		 push	 eax
  00f19	8d 4d e7	 lea	 ecx, DWORD PTR _pMsg$[ebp+19]
  00f1c	51		 push	 ecx
  00f1d	e8 00 00 00 00	 call	 _memcpy
  00f22	83 c4 0c	 add	 esp, 12			; 0000000cH

; 438  : 
; 439  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00f25	0f b6 45 d5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00f29	50		 push	 eax
  00f2a	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00f2d	51		 push	 ecx
  00f2e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00f33	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 440  : }

  00f38	5f		 pop	 edi
  00f39	5e		 pop	 esi
  00f3a	5b		 pop	 ebx
  00f3b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f3e	33 cd		 xor	 ecx, ebp
  00f40	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f45	8b e5		 mov	 esp, ebp
  00f47	5d		 pop	 ebp
  00f48	c2 04 00	 ret	 4
?GD_RageSystemLoad@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_RageSystemLoad
_TEXT	ENDS
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?SendUser@cSystemOfRage@@QAEXH@Z:PROC		; cSystemOfRage::SendUser
EXTRN	?ConfigSend@cSystemOfRage@@QAEXH@Z:PROC		; cSystemOfRage::ConfigSend
EXTRN	?gSystemOfRage@@3VcSystemOfRage@@A:BYTE		; gSystemOfRage
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv68 = -76						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DG_RageSystemLoad@CExGDManager@@QAEXPAUPMSG_ANS_RAGESYSTEM_LOAD@@@Z PROC ; CExGDManager::DG_RageSystemLoad
; _this$ = ecx

; 443  : {

  00f50	55		 push	 ebp
  00f51	8b ec		 mov	 ebp, esp
  00f53	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00f56	53		 push	 ebx
  00f57	56		 push	 esi
  00f58	57		 push	 edi
  00f59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 444  : 	int aIndex = aRecv->aIndex;

  00f5c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00f5f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00f62	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 445  : 
; 446  : 	if(!OBJMAX_RANGE(aIndex))

  00f65	83 7d f8 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  00f69	7d 09		 jge	 SHORT $LN5@DG_RageSys
  00f6b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  00f72	eb 0f		 jmp	 SHORT $LN6@DG_RageSys
$LN5@DG_RageSys:
  00f74	33 c0		 xor	 eax, eax
  00f76	81 7d f8 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00f7d	0f 9e c0	 setle	 al
  00f80	89 45 b4	 mov	 DWORD PTR tv68[ebp], eax
$LN6@DG_RageSys:
  00f83	83 7d b4 00	 cmp	 DWORD PTR tv68[ebp], 0
  00f87	75 05		 jne	 SHORT $LN2@DG_RageSys

; 447  : 	{
; 448  : 		return;

  00f89	e9 8e 03 00 00	 jmp	 $LN3@DG_RageSys
$LN2@DG_RageSys:

; 449  : 	}
; 450  : 
; 451  : 	if(!aRecv->bResult)

  00f8e	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00f91	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00f95	85 c9		 test	 ecx, ecx
  00f97	75 05		 jne	 SHORT $LN1@DG_RageSys

; 452  : 	{
; 453  : 		return;

  00f99	e9 7e 03 00 00	 jmp	 $LN3@DG_RageSys
$LN1@DG_RageSys:

; 454  : 	}
; 455  : 
; 456  : 	//gSystemOfRage.NewDBLoad(aIndex,aRecv->btRage);
; 457  : 
; 458  : 	gSystemOfRage.rUser[aIndex].LoadInfo = 1;

  00f9e	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00fa1	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00fa7	c7 80 30 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+48], 1

; 459  : 
; 460  : 	gSystemOfRage.rUser[aIndex].rLevel = aRecv->rLevel;

  00fb1	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00fb4	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  00fb8	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00fbb	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  00fc1	89 8a 34 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+52], ecx

; 461  : 	gSystemOfRage.rUser[aIndex].rPoints = aRecv->rPoints;

  00fc7	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00fca	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00fce	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00fd1	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  00fd7	89 8a 38 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+56], ecx

; 462  : 	gSystemOfRage.rUser[aIndex].rExperience = aRecv->rExperience;

  00fdd	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00fe0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00fe6	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00fe9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00fec	89 90 3c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+60], edx

; 463  : 	gSystemOfRage.rUser[aIndex].Damage = aRecv->Damage;

  00ff2	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00ff5	0f b6 48 14	 movzx	 ecx, BYTE PTR [eax+20]
  00ff9	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00ffc	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01002	89 8a 44 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+68], ecx

; 464  : 	gSystemOfRage.rUser[aIndex].FreePoints = aRecv->FreePoints;

  01008	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0100b	0f b6 48 15	 movzx	 ecx, BYTE PTR [eax+21]
  0100f	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01012	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01018	89 8a 48 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+72], ecx

; 465  : 	gSystemOfRage.rUser[aIndex].SummonPet = aRecv->SummonPet;

  0101e	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01021	0f b6 48 16	 movzx	 ecx, BYTE PTR [eax+22]
  01025	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01028	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  0102e	89 8a 4c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+76], ecx

; 466  : 	gSystemOfRage.rUser[aIndex].WingsDamagePlus = aRecv->WingsDamagePlus;

  01034	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01037	0f b6 48 17	 movzx	 ecx, BYTE PTR [eax+23]
  0103b	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0103e	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01044	89 8a 50 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+80], ecx

; 467  : 	gSystemOfRage.rUser[aIndex].FinalMana = aRecv->FinalMana;

  0104a	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0104d	0f b6 48 18	 movzx	 ecx, BYTE PTR [eax+24]
  01051	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01054	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  0105a	89 8a 54 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+84], ecx

; 468  : 	gSystemOfRage.rUser[aIndex].IgnoreDefence = aRecv->IgnoreDefence;

  01060	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01063	0f b6 48 19	 movzx	 ecx, BYTE PTR [eax+25]
  01067	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0106a	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01070	89 8a 58 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+88], ecx

; 469  : 	gSystemOfRage.rUser[aIndex].ResetLevel = aRecv->ResetLevel;

  01076	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01079	0f b6 48 1a	 movzx	 ecx, BYTE PTR [eax+26]
  0107d	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01080	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01086	89 8a 5c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+92], ecx

; 470  : 	gSystemOfRage.rUser[aIndex].Teleport = aRecv->Teleport;

  0108c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0108f	0f b6 48 1b	 movzx	 ecx, BYTE PTR [eax+27]
  01093	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01096	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  0109c	89 8a 60 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+96], ecx

; 471  : 	gSystemOfRage.rUser[aIndex].CriticalDamageRate = aRecv->CriticalDamageRate;

  010a2	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  010a5	0f b6 48 1c	 movzx	 ecx, BYTE PTR [eax+28]
  010a9	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  010ac	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  010b2	89 8a 64 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+100], ecx

; 472  : 	gSystemOfRage.rUser[aIndex].AbsordDamage = aRecv->AbsordDamage;

  010b8	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  010bb	0f b6 48 1d	 movzx	 ecx, BYTE PTR [eax+29]
  010bf	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  010c2	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  010c8	89 8a 68 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+104], ecx

; 473  : 	gSystemOfRage.rUser[aIndex].PetDamageBonus = aRecv->PetDamageBonus;

  010ce	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  010d1	0f b6 48 1e	 movzx	 ecx, BYTE PTR [eax+30]
  010d5	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  010d8	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  010de	89 8a 6c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+108], ecx

; 474  : 	gSystemOfRage.rUser[aIndex].FinalLife = aRecv->FinalLife;

  010e4	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  010e7	0f b6 48 1f	 movzx	 ecx, BYTE PTR [eax+31]
  010eb	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  010ee	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  010f4	89 8a 70 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+112], ecx

; 475  : 	gSystemOfRage.rUser[aIndex].Strength = aRecv->Strength;

  010fa	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  010fd	0f b6 48 20	 movzx	 ecx, BYTE PTR [eax+32]
  01101	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01104	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  0110a	89 8a 74 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+116], ecx

; 476  : 	gSystemOfRage.rUser[aIndex].DefenceRate = aRecv->DefenceRate;

  01110	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01113	0f b6 48 21	 movzx	 ecx, BYTE PTR [eax+33]
  01117	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0111a	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01120	89 8a 78 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+120], ecx

; 477  : 	gSystemOfRage.rUser[aIndex].FireDamage = aRecv->FireDamage;

  01126	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01129	0f b6 48 22	 movzx	 ecx, BYTE PTR [eax+34]
  0112d	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01130	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01136	89 8a 7c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+124], ecx

; 478  : 	gSystemOfRage.rUser[aIndex].Energy = aRecv->Energy;

  0113c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0113f	0f b6 48 23	 movzx	 ecx, BYTE PTR [eax+35]
  01143	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01146	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  0114c	89 8a 80 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+128], ecx

; 479  : 	gSystemOfRage.rUser[aIndex].Agility = aRecv->Agility;

  01152	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01155	0f b6 48 24	 movzx	 ecx, BYTE PTR [eax+36]
  01159	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0115c	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01162	89 8a 84 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+132], ecx

; 480  : 	gSystemOfRage.rUser[aIndex].DoubleDamage = aRecv->DoubleDamage;

  01168	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0116b	0f b6 48 25	 movzx	 ecx, BYTE PTR [eax+37]
  0116f	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01172	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01178	89 8a 88 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+136], ecx

; 481  : 	gSystemOfRage.rUser[aIndex].FinalSD = aRecv->FinalSD;

  0117e	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01181	0f b6 48 26	 movzx	 ecx, BYTE PTR [eax+38]
  01185	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01188	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  0118e	89 8a 8c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+140], ecx

; 482  : 	gSystemOfRage.rUser[aIndex].FinalDefence = aRecv->FinalDefence;

  01194	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01197	0f b6 48 27	 movzx	 ecx, BYTE PTR [eax+39]
  0119b	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0119e	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  011a4	89 8a 90 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+144], ecx

; 483  : 	gSystemOfRage.rUser[aIndex].ZenDrop = aRecv->ZenDrop;

  011aa	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  011ad	0f b6 48 28	 movzx	 ecx, BYTE PTR [eax+40]
  011b1	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  011b4	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  011ba	89 8a 94 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+148], ecx

; 484  : 	gSystemOfRage.rUser[aIndex].GuildBonus = aRecv->GuildBonus;

  011c0	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  011c3	0f b6 48 29	 movzx	 ecx, BYTE PTR [eax+41]
  011c7	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  011ca	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  011d0	89 8a 98 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+152], ecx

; 485  : 	gSystemOfRage.rUser[aIndex].ReflectDamage = aRecv->ReflectDamage;

  011d6	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  011d9	0f b6 48 2a	 movzx	 ecx, BYTE PTR [eax+42]
  011dd	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  011e0	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  011e6	89 8a 9c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+156], ecx

; 486  : 	gSystemOfRage.rUser[aIndex].ExellentDamageRate = aRecv->ExellentDamageRate;

  011ec	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  011ef	0f b6 48 2b	 movzx	 ecx, BYTE PTR [eax+43]
  011f3	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  011f6	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  011fc	89 8a a0 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+160], ecx

; 487  : 	gSystemOfRage.rUser[aIndex].PvPBonusPlus = aRecv->PvPBonusPlus;

  01202	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01205	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  01209	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0120c	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01212	89 8a a4 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+164], ecx

; 488  : 	gSystemOfRage.rUser[aIndex].MinDefence = aRecv->MinDefence;

  01218	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0121b	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  0121f	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01222	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01228	89 8a a8 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+168], ecx

; 489  : 	gSystemOfRage.rUser[aIndex].Experience = aRecv->Experience;

  0122e	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01231	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  01235	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01238	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  0123e	89 8a ac 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+172], ecx

; 490  : 	gSystemOfRage.rUser[aIndex].StartSD = aRecv->StartSD;

  01244	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01247	0f b6 48 2f	 movzx	 ecx, BYTE PTR [eax+47]
  0124b	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0124e	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01254	89 8a b0 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+176], ecx

; 491  : 	gSystemOfRage.rUser[aIndex].PartyBonus = aRecv->PartyBonus;

  0125a	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0125d	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  01261	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01264	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  0126a	89 8a b4 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+180], ecx

; 492  : 	gSystemOfRage.rUser[aIndex].IceDamage = aRecv->IceDamage;

  01270	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01273	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  01277	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0127a	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01280	89 8a b8 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+184], ecx

; 493  : 	gSystemOfRage.rUser[aIndex].DistanceAttack = aRecv->DistanceAttack;

  01286	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01289	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0128d	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01290	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  01296	89 8a bc 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+188], ecx

; 494  : 	gSystemOfRage.rUser[aIndex].AttackRate = aRecv->AttackRate;

  0129c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0129f	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  012a3	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  012a6	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  012ac	89 8a c0 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+192], ecx

; 495  : 	gSystemOfRage.rUser[aIndex].WeaponBonus = aRecv->WeaponBonus;

  012b2	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  012b5	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  012b9	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  012bc	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  012c2	89 8a c4 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+196], ecx

; 496  : 	gSystemOfRage.rUser[aIndex].ExellentDamage = aRecv->ExellentDamage;

  012c8	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  012cb	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  012cf	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  012d2	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  012d8	89 8a c8 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+200], ecx

; 497  : 	gSystemOfRage.rUser[aIndex].CriticalDamage = aRecv->CriticalDamage;

  012de	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  012e1	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  012e5	8b 55 f8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  012e8	69 d2 a0 00 00
	00		 imul	 edx, 160		; 000000a0H
  012ee	89 8a cc 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[edx+204], ecx

; 498  : 
; 499  : 	gSystemOfRage.ConfigSend(aIndex);

  012f4	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  012f7	50		 push	 eax
  012f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  012fd	e8 00 00 00 00	 call	 ?ConfigSend@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::ConfigSend

; 500  : 	gSystemOfRage.SendUser(aIndex);

  01302	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01305	50		 push	 eax
  01306	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  0130b	e8 00 00 00 00	 call	 ?SendUser@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SendUser

; 501  : 	gObjCalCharacter(aIndex);

  01310	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01313	50		 push	 eax
  01314	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  01319	83 c4 04	 add	 esp, 4
$LN3@DG_RageSys:

; 502  : }

  0131c	5f		 pop	 edi
  0131d	5e		 pop	 esi
  0131e	5b		 pop	 ebx
  0131f	8b e5		 mov	 esp, ebp
  01321	5d		 pop	 ebp
  01322	c2 04 00	 ret	 4
?DG_RageSystemLoad@CExGDManager@@QAEXPAUPMSG_ANS_RAGESYSTEM_LOAD@@@Z ENDP ; CExGDManager::DG_RageSystemLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -84						; size = 72
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_RageSystemSave@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_RageSystemSave
; _this$ = ecx

; 505  : {

  01330	55		 push	 ebp
  01331	8b ec		 mov	 ebp, esp
  01333	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  01339	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0133e	33 c5		 xor	 eax, ebp
  01340	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01343	53		 push	 ebx
  01344	56		 push	 esi
  01345	57		 push	 edi
  01346	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 506  : 	if(!gSystemOfRage.rUser[aIndex].LoadInfo)

  01349	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0134c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01352	83 b8 30 00 00
	00 00		 cmp	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+48], 0
  01359	75 05		 jne	 SHORT $LN1@GD_RageSys@2

; 507  : 	{
; 508  : 		return;

  0135b	e9 1c 03 00 00	 jmp	 $LN2@GD_RageSys@2
$LN1@GD_RageSys@2:

; 509  : 	}
; 510  : 
; 511  : 	LPOBJ lpUser = &gObj[aIndex];

  01360	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01363	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01369	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0136f	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 512  : 	PMSG_REQ_RAGESYSTEM_SAVE pMsg;
; 513  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x09, sizeof(pMsg));

  01372	6a 48		 push	 72			; 00000048H
  01374	6a 09		 push	 9
  01376	68 ea 00 00 00	 push	 234			; 000000eaH
  0137b	8d 45 ac	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0137e	50		 push	 eax
  0137f	8d 4d ac	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01382	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 514  : 
; 515  : 	pMsg.Name[10] = 0;

  01387	c6 45 c5 00	 mov	 BYTE PTR _pMsg$[ebp+25], 0

; 516  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  0138b	6a 0a		 push	 10			; 0000000aH
  0138d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01390	83 c0 77	 add	 eax, 119		; 00000077H
  01393	50		 push	 eax
  01394	8d 4d bb	 lea	 ecx, DWORD PTR _pMsg$[ebp+15]
  01397	51		 push	 ecx
  01398	e8 00 00 00 00	 call	 _memcpy
  0139d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 517  : 	pMsg.AccountID[10] = 0;

  013a0	c6 45 ba 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 518  : 	memcpy(pMsg.AccountID, lpUser->AccountID, sizeof(pMsg.AccountID)-1);

  013a4	6a 0a		 push	 10			; 0000000aH
  013a6	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  013a9	83 c0 6c	 add	 eax, 108		; 0000006cH
  013ac	50		 push	 eax
  013ad	8d 4d b0	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  013b0	51		 push	 ecx
  013b1	e8 00 00 00 00	 call	 _memcpy
  013b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 519  : 
; 520  : 	//gSystemOfRage.NewDBSave(aIndex, pMsg.btRage);
; 521  : 
; 522  : 	pMsg.rLevel = gSystemOfRage.rUser[aIndex].rLevel;

  013b9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  013bc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  013c2	66 8b 88 34 00
	00 00		 mov	 cx, WORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+52]
  013c9	66 89 4d c6	 mov	 WORD PTR _pMsg$[ebp+26], cx

; 523  : 	pMsg.rPoints = gSystemOfRage.rUser[aIndex].rPoints;

  013cd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  013d0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  013d6	66 8b 88 38 00
	00 00		 mov	 cx, WORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+56]
  013dd	66 89 4d c8	 mov	 WORD PTR _pMsg$[ebp+28], cx

; 524  : 	pMsg.rExperience = gSystemOfRage.rUser[aIndex].rExperience;

  013e1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  013e4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  013ea	8b 88 3c 00 00
	00		 mov	 ecx, DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+60]
  013f0	89 4d cc	 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 525  : 	pMsg.Damage = gSystemOfRage.rUser[aIndex].Damage;

  013f3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  013f6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  013fc	8a 88 44 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+68]
  01402	88 4d d0	 mov	 BYTE PTR _pMsg$[ebp+36], cl

; 526  : 	pMsg.FreePoints = gSystemOfRage.rUser[aIndex].FreePoints;

  01405	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01408	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0140e	8a 88 48 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+72]
  01414	88 4d d1	 mov	 BYTE PTR _pMsg$[ebp+37], cl

; 527  : 	pMsg.SummonPet = gSystemOfRage.rUser[aIndex].SummonPet;

  01417	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0141a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01420	8a 88 4c 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+76]
  01426	88 4d d2	 mov	 BYTE PTR _pMsg$[ebp+38], cl

; 528  : 	pMsg.WingsDamagePlus = gSystemOfRage.rUser[aIndex].WingsDamagePlus;

  01429	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0142c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01432	8a 88 50 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+80]
  01438	88 4d d3	 mov	 BYTE PTR _pMsg$[ebp+39], cl

; 529  : 	pMsg.FinalMana = gSystemOfRage.rUser[aIndex].FinalMana;

  0143b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0143e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01444	8a 88 54 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+84]
  0144a	88 4d d4	 mov	 BYTE PTR _pMsg$[ebp+40], cl

; 530  : 	pMsg.IgnoreDefence = gSystemOfRage.rUser[aIndex].IgnoreDefence;

  0144d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01450	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01456	8a 88 58 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+88]
  0145c	88 4d d5	 mov	 BYTE PTR _pMsg$[ebp+41], cl

; 531  : 	pMsg.ResetLevel = gSystemOfRage.rUser[aIndex].ResetLevel;

  0145f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01462	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01468	8a 88 5c 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+92]
  0146e	88 4d d6	 mov	 BYTE PTR _pMsg$[ebp+42], cl

; 532  : 	pMsg.Teleport = gSystemOfRage.rUser[aIndex].Teleport;

  01471	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01474	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0147a	8a 88 60 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+96]
  01480	88 4d d7	 mov	 BYTE PTR _pMsg$[ebp+43], cl

; 533  : 	pMsg.CriticalDamageRate = gSystemOfRage.rUser[aIndex].CriticalDamageRate;

  01483	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01486	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0148c	8a 88 64 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+100]
  01492	88 4d d8	 mov	 BYTE PTR _pMsg$[ebp+44], cl

; 534  : 	pMsg.AbsordDamage = gSystemOfRage.rUser[aIndex].AbsordDamage;

  01495	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01498	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0149e	8a 88 68 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+104]
  014a4	88 4d d9	 mov	 BYTE PTR _pMsg$[ebp+45], cl

; 535  : 	pMsg.PetDamageBonus = gSystemOfRage.rUser[aIndex].PetDamageBonus;

  014a7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014aa	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  014b0	8a 88 6c 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+108]
  014b6	88 4d da	 mov	 BYTE PTR _pMsg$[ebp+46], cl

; 536  : 	pMsg.FinalLife = gSystemOfRage.rUser[aIndex].FinalLife;

  014b9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014bc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  014c2	8a 88 70 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+112]
  014c8	88 4d db	 mov	 BYTE PTR _pMsg$[ebp+47], cl

; 537  : 	pMsg.Strength = gSystemOfRage.rUser[aIndex].Strength;

  014cb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014ce	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  014d4	8a 88 74 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+116]
  014da	88 4d dc	 mov	 BYTE PTR _pMsg$[ebp+48], cl

; 538  : 	pMsg.DefenceRate = gSystemOfRage.rUser[aIndex].DefenceRate;

  014dd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014e0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  014e6	8a 88 78 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+120]
  014ec	88 4d dd	 mov	 BYTE PTR _pMsg$[ebp+49], cl

; 539  : 	pMsg.FireDamage = gSystemOfRage.rUser[aIndex].FireDamage;

  014ef	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014f2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  014f8	8a 88 7c 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+124]
  014fe	88 4d de	 mov	 BYTE PTR _pMsg$[ebp+50], cl

; 540  : 	pMsg.Energy = gSystemOfRage.rUser[aIndex].Energy;

  01501	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01504	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0150a	8a 88 80 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+128]
  01510	88 4d df	 mov	 BYTE PTR _pMsg$[ebp+51], cl

; 541  : 	pMsg.Agility = gSystemOfRage.rUser[aIndex].Agility;

  01513	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01516	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0151c	8a 88 84 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+132]
  01522	88 4d e0	 mov	 BYTE PTR _pMsg$[ebp+52], cl

; 542  : 	pMsg.DoubleDamage = gSystemOfRage.rUser[aIndex].DoubleDamage;

  01525	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01528	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0152e	8a 88 88 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+136]
  01534	88 4d e1	 mov	 BYTE PTR _pMsg$[ebp+53], cl

; 543  : 	pMsg.FinalSD = gSystemOfRage.rUser[aIndex].FinalSD;

  01537	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0153a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01540	8a 88 8c 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+140]
  01546	88 4d e2	 mov	 BYTE PTR _pMsg$[ebp+54], cl

; 544  : 	pMsg.FinalDefence = gSystemOfRage.rUser[aIndex].FinalDefence;

  01549	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0154c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01552	8a 88 90 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+144]
  01558	88 4d e3	 mov	 BYTE PTR _pMsg$[ebp+55], cl

; 545  : 	pMsg.ZenDrop = gSystemOfRage.rUser[aIndex].ZenDrop;

  0155b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0155e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01564	8a 88 94 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+148]
  0156a	88 4d e4	 mov	 BYTE PTR _pMsg$[ebp+56], cl

; 546  : 	pMsg.GuildBonus = gSystemOfRage.rUser[aIndex].GuildBonus;

  0156d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01570	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01576	8a 88 98 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+152]
  0157c	88 4d e5	 mov	 BYTE PTR _pMsg$[ebp+57], cl

; 547  : 	pMsg.ReflectDamage = gSystemOfRage.rUser[aIndex].ReflectDamage;

  0157f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01582	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01588	8a 88 9c 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+156]
  0158e	88 4d e6	 mov	 BYTE PTR _pMsg$[ebp+58], cl

; 548  : 	pMsg.ExellentDamageRate = gSystemOfRage.rUser[aIndex].ExellentDamageRate;

  01591	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01594	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0159a	8a 88 a0 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+160]
  015a0	88 4d e7	 mov	 BYTE PTR _pMsg$[ebp+59], cl

; 549  : 	pMsg.PvPBonusPlus = gSystemOfRage.rUser[aIndex].PvPBonusPlus;

  015a3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  015a6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  015ac	8a 88 a4 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+164]
  015b2	88 4d e8	 mov	 BYTE PTR _pMsg$[ebp+60], cl

; 550  : 	pMsg.MinDefence = gSystemOfRage.rUser[aIndex].MinDefence;

  015b5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  015b8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  015be	8a 88 a8 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+168]
  015c4	88 4d e9	 mov	 BYTE PTR _pMsg$[ebp+61], cl

; 551  : 	pMsg.Experience = gSystemOfRage.rUser[aIndex].Experience;

  015c7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  015ca	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  015d0	8a 88 ac 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+172]
  015d6	88 4d ea	 mov	 BYTE PTR _pMsg$[ebp+62], cl

; 552  : 	pMsg.StartSD = gSystemOfRage.rUser[aIndex].StartSD;

  015d9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  015dc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  015e2	8a 88 b0 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+176]
  015e8	88 4d eb	 mov	 BYTE PTR _pMsg$[ebp+63], cl

; 553  : 	pMsg.PartyBonus = gSystemOfRage.rUser[aIndex].PartyBonus;

  015eb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  015ee	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  015f4	8a 88 b4 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+180]
  015fa	88 4d ec	 mov	 BYTE PTR _pMsg$[ebp+64], cl

; 554  : 	pMsg.IceDamage = gSystemOfRage.rUser[aIndex].IceDamage;

  015fd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01600	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01606	8a 88 b8 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+184]
  0160c	88 4d ed	 mov	 BYTE PTR _pMsg$[ebp+65], cl

; 555  : 	pMsg.DistanceAttack = gSystemOfRage.rUser[aIndex].DistanceAttack;

  0160f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01612	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01618	8a 88 bc 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+188]
  0161e	88 4d ee	 mov	 BYTE PTR _pMsg$[ebp+66], cl

; 556  : 	pMsg.AttackRate = gSystemOfRage.rUser[aIndex].AttackRate;

  01621	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01624	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0162a	8a 88 c0 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+192]
  01630	88 4d ef	 mov	 BYTE PTR _pMsg$[ebp+67], cl

; 557  : 	pMsg.WeaponBonus = gSystemOfRage.rUser[aIndex].WeaponBonus;

  01633	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01636	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0163c	8a 88 c4 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+196]
  01642	88 4d f0	 mov	 BYTE PTR _pMsg$[ebp+68], cl

; 558  : 	pMsg.ExellentDamage = gSystemOfRage.rUser[aIndex].ExellentDamage;

  01645	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01648	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0164e	8a 88 c8 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+200]
  01654	88 4d f1	 mov	 BYTE PTR _pMsg$[ebp+69], cl

; 559  : 	pMsg.CriticalDamage = gSystemOfRage.rUser[aIndex].CriticalDamage;

  01657	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0165a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01660	8a 88 cc 00 00
	00		 mov	 cl, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+204]
  01666	88 4d f2	 mov	 BYTE PTR _pMsg$[ebp+70], cl

; 560  : 
; 561  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  01669	0f b6 45 ad	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0166d	50		 push	 eax
  0166e	8d 4d ac	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01671	51		 push	 ecx
  01672	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01677	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_RageSys@2:

; 562  : }

  0167c	5f		 pop	 edi
  0167d	5e		 pop	 esi
  0167e	5b		 pop	 ebx
  0167f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01682	33 cd		 xor	 ecx, ebp
  01684	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01689	8b e5		 mov	 esp, ebp
  0168b	5d		 pop	 ebp
  0168c	c2 04 00	 ret	 4
?GD_RageSystemSave@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_RageSystemSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 20
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_CreateonBankLoad@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_CreateonBankLoad
; _this$ = ecx

; 566  : {

  01690	55		 push	 ebp
  01691	8b ec		 mov	 ebp, esp
  01693	83 ec 60	 sub	 esp, 96			; 00000060H
  01696	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0169b	33 c5		 xor	 eax, ebp
  0169d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  016a0	53		 push	 ebx
  016a1	56		 push	 esi
  016a2	57		 push	 edi
  016a3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 567  : 	LPOBJ lpUser = &gObj[aIndex];

  016a6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  016a9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  016af	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  016b5	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 568  : 	PMSG_REQ_CREATEON_LOAD pMsg;
; 569  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x0A, sizeof(pMsg));

  016b8	6a 14		 push	 20			; 00000014H
  016ba	6a 0a		 push	 10			; 0000000aH
  016bc	68 ea 00 00 00	 push	 234			; 000000eaH
  016c1	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  016c4	50		 push	 eax
  016c5	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  016c8	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 570  : 	pMsg.aIndex = aIndex;

  016cd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  016d0	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 571  : 
; 572  : 	pMsg.szName[10] = 0;

  016d3	c6 45 f2 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 573  : 	memcpy(pMsg.szName, lpUser->Name, sizeof(pMsg.szName)-1);

  016d7	6a 0a		 push	 10			; 0000000aH
  016d9	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  016dc	83 c0 77	 add	 eax, 119		; 00000077H
  016df	50		 push	 eax
  016e0	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp+8]
  016e3	51		 push	 ecx
  016e4	e8 00 00 00 00	 call	 _memcpy
  016e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 574  : 
; 575  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  016ec	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  016f0	50		 push	 eax
  016f1	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  016f4	51		 push	 ecx
  016f5	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  016fa	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 576  : }

  016ff	5f		 pop	 edi
  01700	5e		 pop	 esi
  01701	5b		 pop	 ebx
  01702	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01705	33 cd		 xor	 ecx, ebp
  01707	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0170c	8b e5		 mov	 esp, ebp
  0170e	5d		 pop	 ebp
  0170f	c2 04 00	 ret	 4
?GD_CreateonBankLoad@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_CreateonBankLoad
_TEXT	ENDS
EXTRN	?ExUserDataSend@@YAXH@Z:PROC			; ExUserDataSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv68 = -80						; size = 4
_lpUser$ = -12						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DG_CreateonBankLoad@CExGDManager@@QAEXPAUPMSG_ANS_CREATEON_LOAD@@@Z PROC ; CExGDManager::DG_CreateonBankLoad
; _this$ = ecx

; 579  : {

  01720	55		 push	 ebp
  01721	8b ec		 mov	 ebp, esp
  01723	83 ec 50	 sub	 esp, 80			; 00000050H
  01726	53		 push	 ebx
  01727	56		 push	 esi
  01728	57		 push	 edi
  01729	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 580  : 	int aIndex = aRecv->aIndex;

  0172c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0172f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01732	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 581  : 
; 582  : 	if(!OBJMAX_RANGE(aIndex))

  01735	83 7d f8 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  01739	7d 09		 jge	 SHORT $LN4@DG_Createo
  0173b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  01742	eb 0f		 jmp	 SHORT $LN5@DG_Createo
$LN4@DG_Createo:
  01744	33 c0		 xor	 eax, eax
  01746	81 7d f8 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  0174d	0f 9e c0	 setle	 al
  01750	89 45 b0	 mov	 DWORD PTR tv68[ebp], eax
$LN5@DG_Createo:
  01753	83 7d b0 00	 cmp	 DWORD PTR tv68[ebp], 0
  01757	75 02		 jne	 SHORT $LN1@DG_Createo

; 583  : 	{
; 584  : 		return;

  01759	eb 78		 jmp	 SHORT $LN2@DG_Createo
$LN1@DG_Createo:

; 585  : 	}
; 586  : 
; 587  : 	LPOBJ lpUser = &gObj[aIndex];

  0175b	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0175e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01764	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0176a	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 588  : 
; 589  : 	lpUser->CreateonBank = aRecv->iCreateon;

  0176d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01770	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01773	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01776	89 90 f0 27 00
	00		 mov	 DWORD PTR [eax+10224], edx

; 590  : 
; 591  : 	lpUser->GuardianBank = aRecv->iGuardian;

  0177c	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0177f	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01782	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01785	89 90 f4 27 00
	00		 mov	 DWORD PTR [eax+10228], edx

; 592  : 	lpUser->HarmonyBank = aRecv->iHarmony;

  0178b	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0178e	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01791	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01794	89 90 f8 27 00
	00		 mov	 DWORD PTR [eax+10232], edx

; 593  : 	lpUser->LowStoneBank = aRecv->iLowStone;

  0179a	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0179d	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  017a0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  017a3	89 90 fc 27 00
	00		 mov	 DWORD PTR [eax+10236], edx

; 594  : 	lpUser->HighStoneBank = aRecv->iHighStone;

  017a9	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  017ac	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  017af	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  017b2	89 90 00 28 00
	00		 mov	 DWORD PTR [eax+10240], edx

; 595  : 	lpUser->GemStoneBank = aRecv->iGemStone;

  017b8	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  017bb	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  017be	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  017c1	89 90 04 28 00
	00		 mov	 DWORD PTR [eax+10244], edx

; 596  : 	//
; 597  : 
; 598  : 	ExUserDataSend(aIndex);

  017c7	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  017ca	50		 push	 eax
  017cb	e8 00 00 00 00	 call	 ?ExUserDataSend@@YAXH@Z	; ExUserDataSend
  017d0	83 c4 04	 add	 esp, 4
$LN2@DG_Createo:

; 599  : }

  017d3	5f		 pop	 edi
  017d4	5e		 pop	 esi
  017d5	5b		 pop	 ebx
  017d6	8b e5		 mov	 esp, ebp
  017d8	5d		 pop	 ebp
  017d9	c2 04 00	 ret	 4
?DG_CreateonBankLoad@CExGDManager@@QAEXPAUPMSG_ANS_CREATEON_LOAD@@@Z ENDP ; CExGDManager::DG_CreateonBankLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -120						; size = 4
_pMsg$ = -52						; size = 40
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_CreateonBankSave@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_CreateonBankSave
; _this$ = ecx

; 602  : {

  017e0	55		 push	 ebp
  017e1	8b ec		 mov	 ebp, esp
  017e3	83 ec 78	 sub	 esp, 120		; 00000078H
  017e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  017eb	33 c5		 xor	 eax, ebp
  017ed	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  017f0	53		 push	 ebx
  017f1	56		 push	 esi
  017f2	57		 push	 edi
  017f3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 603  : 	if(!OBJMAX_RANGE(aIndex))

  017f6	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  017fa	7d 09		 jge	 SHORT $LN4@GD_Createo
  017fc	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  01803	eb 0f		 jmp	 SHORT $LN5@GD_Createo
$LN4@GD_Createo:
  01805	33 c0		 xor	 eax, eax
  01807	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  0180e	0f 9e c0	 setle	 al
  01811	89 45 88	 mov	 DWORD PTR tv67[ebp], eax
$LN5@GD_Createo:
  01814	83 7d 88 00	 cmp	 DWORD PTR tv67[ebp], 0
  01818	75 05		 jne	 SHORT $LN1@GD_Createo

; 604  : 	{
; 605  : 		return;

  0181a	e9 9b 00 00 00	 jmp	 $LN2@GD_Createo
$LN1@GD_Createo:

; 606  : 	}
; 607  : 
; 608  : 	LPOBJ lpUser = &gObj[aIndex];

  0181f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01822	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01828	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0182e	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 609  : 
; 610  : 	PMSG_REQ_CREATEON_SAVE pMsg;
; 611  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x0B, sizeof(pMsg));

  01831	6a 28		 push	 40			; 00000028H
  01833	6a 0b		 push	 11			; 0000000bH
  01835	68 ea 00 00 00	 push	 234			; 000000eaH
  0183a	8d 45 cc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0183d	50		 push	 eax
  0183e	8d 4d cc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01841	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 612  : 
; 613  : 	pMsg.szName[10] = 0;

  01846	c6 45 da 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 614  : 	memcpy(pMsg.szName, lpUser->Name, sizeof(pMsg.szName)-1);

  0184a	6a 0a		 push	 10			; 0000000aH
  0184c	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0184f	83 c0 77	 add	 eax, 119		; 00000077H
  01852	50		 push	 eax
  01853	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  01856	51		 push	 ecx
  01857	e8 00 00 00 00	 call	 _memcpy
  0185c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 615  : 
; 616  : 	pMsg.iCreateon = lpUser->CreateonBank;

  0185f	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01862	8b 88 f0 27 00
	00		 mov	 ecx, DWORD PTR [eax+10224]
  01868	89 4d dc	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 617  : 
; 618  : 	pMsg.iGuardian = lpUser->GuardianBank;

  0186b	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0186e	8b 88 f4 27 00
	00		 mov	 ecx, DWORD PTR [eax+10228]
  01874	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 619  : 	pMsg.iHarmony = lpUser->HarmonyBank;

  01877	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0187a	8b 88 f8 27 00
	00		 mov	 ecx, DWORD PTR [eax+10232]
  01880	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+24], ecx

; 620  : 	pMsg.iLowStone = lpUser->LowStoneBank;

  01883	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01886	8b 88 fc 27 00
	00		 mov	 ecx, DWORD PTR [eax+10236]
  0188c	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 621  : 	pMsg.iHighStone = lpUser->HighStoneBank;

  0188f	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01892	8b 88 00 28 00
	00		 mov	 ecx, DWORD PTR [eax+10240]
  01898	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 622  : 	pMsg.iGemStone = lpUser->GemStoneBank;

  0189b	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0189e	8b 88 04 28 00
	00		 mov	 ecx, DWORD PTR [eax+10244]
  018a4	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+36], ecx

; 623  : 
; 624  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  018a7	0f b6 45 cd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  018ab	50		 push	 eax
  018ac	8d 4d cc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  018af	51		 push	 ecx
  018b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  018b5	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_Createo:

; 625  : }

  018ba	5f		 pop	 edi
  018bb	5e		 pop	 esi
  018bc	5b		 pop	 ebx
  018bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  018c0	33 cd		 xor	 ecx, ebp
  018c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  018c7	8b e5		 mov	 esp, ebp
  018c9	5d		 pop	 ebp
  018ca	c2 04 00	 ret	 4
?GD_CreateonBankSave@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_CreateonBankSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_OfflineAfk@CExGDManager@@QAEXHEE@Z		; CExGDManager::GD_OfflineAfk
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv72 = -96						; size = 4
_pMsg$ = -28						; size = 17
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_ConnectType$ = 12					; size = 1
_OfflineType$ = 16					; size = 1
?GD_OfflineAfk@CExGDManager@@QAEXHEE@Z PROC		; CExGDManager::GD_OfflineAfk
; _this$ = ecx

; 629  : {

  018d0	55		 push	 ebp
  018d1	8b ec		 mov	 ebp, esp
  018d3	83 ec 60	 sub	 esp, 96			; 00000060H
  018d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  018db	33 c5		 xor	 eax, ebp
  018dd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  018e0	53		 push	 ebx
  018e1	56		 push	 esi
  018e2	57		 push	 edi
  018e3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	if(!g_ExLicense.CheckUser(bassreflexive))

  018e6	6a 35		 push	 53			; 00000035H
  018e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  018ed	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  018f2	0f b6 c0	 movzx	 eax, al
  018f5	85 c0		 test	 eax, eax
  018f7	75 05		 jne	 SHORT $LN2@GD_Offline

; 631  : 	{
; 632  : 		return;

  018f9	e9 92 00 00 00	 jmp	 $LN3@GD_Offline
$LN2@GD_Offline:

; 633  : 	}
; 634  : 
; 635  : 	if(!OBJMAX_RANGE(aIndex))

  018fe	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  01902	7d 09		 jge	 SHORT $LN5@GD_Offline
  01904	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  0190b	eb 0f		 jmp	 SHORT $LN6@GD_Offline
$LN5@GD_Offline:
  0190d	33 c0		 xor	 eax, eax
  0190f	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  01916	0f 9e c0	 setle	 al
  01919	89 45 a0	 mov	 DWORD PTR tv72[ebp], eax
$LN6@GD_Offline:
  0191c	83 7d a0 00	 cmp	 DWORD PTR tv72[ebp], 0
  01920	75 02		 jne	 SHORT $LN1@GD_Offline

; 636  : 	{
; 637  : 		return;

  01922	eb 6c		 jmp	 SHORT $LN3@GD_Offline
$LN1@GD_Offline:

; 638  : 	}
; 639  : 
; 640  : 	PMSG_REQ_OFFLINE_AFK pMsg = { 0 };

  01924	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  01928	33 c0		 xor	 eax, eax
  0192a	89 45 e5	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  0192d	89 45 e9	 mov	 DWORD PTR _pMsg$[ebp+5], eax
  01930	89 45 ed	 mov	 DWORD PTR _pMsg$[ebp+9], eax
  01933	89 45 f1	 mov	 DWORD PTR _pMsg$[ebp+13], eax

; 641  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x0F, sizeof(pMsg));

  01936	6a 11		 push	 17			; 00000011H
  01938	6a 0f		 push	 15			; 0000000fH
  0193a	68 ea 00 00 00	 push	 234			; 000000eaH
  0193f	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01942	50		 push	 eax
  01943	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01946	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 642  : 	pMsg.Name[10] = 0;

  0194b	c6 45 f2 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 643  : 	memcpy(pMsg.Name, gObj[aIndex].Name, sizeof(pMsg.Name)-1);

  0194f	6a 0a		 push	 10			; 0000000aH
  01951	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01954	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0195a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01960	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  01964	52		 push	 edx
  01965	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp+4]
  01968	50		 push	 eax
  01969	e8 00 00 00 00	 call	 _memcpy
  0196e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 644  : 	pMsg.ConnectType = ConnectType;

  01971	8a 45 0c	 mov	 al, BYTE PTR _ConnectType$[ebp]
  01974	88 45 f3	 mov	 BYTE PTR _pMsg$[ebp+15], al

; 645  : 	pMsg.OfflineType = OfflineType;

  01977	8a 45 10	 mov	 al, BYTE PTR _OfflineType$[ebp]
  0197a	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+16], al

; 646  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0197d	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01981	50		 push	 eax
  01982	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01985	51		 push	 ecx
  01986	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0198b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GD_Offline:

; 647  : }

  01990	5f		 pop	 edi
  01991	5e		 pop	 esi
  01992	5b		 pop	 ebx
  01993	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01996	33 cd		 xor	 ecx, ebp
  01998	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0199d	8b e5		 mov	 esp, ebp
  0199f	5d		 pop	 ebp
  019a0	c2 0c 00	 ret	 12			; 0000000cH
?GD_OfflineAfk@CExGDManager@@QAEXHEE@Z ENDP		; CExGDManager::GD_OfflineAfk
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 20
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_VoteBuffLoad@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_VoteBuffLoad
; _this$ = ecx

; 651  : {

  019b0	55		 push	 ebp
  019b1	8b ec		 mov	 ebp, esp
  019b3	83 ec 60	 sub	 esp, 96			; 00000060H
  019b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  019bb	33 c5		 xor	 eax, ebp
  019bd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  019c0	53		 push	 ebx
  019c1	56		 push	 esi
  019c2	57		 push	 edi
  019c3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 652  : 	LPOBJ lpUser = &gObj[aIndex];

  019c6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  019c9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  019cf	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  019d5	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 653  : 	PMSG_REQ_VOTEBUFF_LOAD pMsg;
; 654  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x10, sizeof(pMsg));

  019d8	6a 14		 push	 20			; 00000014H
  019da	6a 10		 push	 16			; 00000010H
  019dc	68 ea 00 00 00	 push	 234			; 000000eaH
  019e1	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  019e4	50		 push	 eax
  019e5	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  019e8	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 655  : 	pMsg.aIndex = aIndex;

  019ed	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  019f0	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 656  : 
; 657  : 	pMsg.szName[10] = 0;

  019f3	c6 45 f2 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 658  : 	memcpy(pMsg.szName, lpUser->Name, sizeof(pMsg.szName)-1);

  019f7	6a 0a		 push	 10			; 0000000aH
  019f9	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  019fc	83 c0 77	 add	 eax, 119		; 00000077H
  019ff	50		 push	 eax
  01a00	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp+8]
  01a03	51		 push	 ecx
  01a04	e8 00 00 00 00	 call	 _memcpy
  01a09	83 c4 0c	 add	 esp, 12			; 0000000cH

; 659  : 
; 660  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  01a0c	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01a10	50		 push	 eax
  01a11	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01a14	51		 push	 ecx
  01a15	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01a1a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 661  : }

  01a1f	5f		 pop	 edi
  01a20	5e		 pop	 esi
  01a21	5b		 pop	 ebx
  01a22	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01a25	33 cd		 xor	 ecx, ebp
  01a27	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01a2c	8b e5		 mov	 esp, ebp
  01a2e	5d		 pop	 ebp
  01a2f	c2 04 00	 ret	 4
?GD_VoteBuffLoad@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_VoteBuffLoad
_TEXT	ENDS
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv68 = -80						; size = 4
_lpUser$ = -12						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DG_VoteBuffLoad@CExGDManager@@QAEXPAUPMSG_ANS_VOTEBUFF_LOAD@@@Z PROC ; CExGDManager::DG_VoteBuffLoad
; _this$ = ecx

; 664  : {

  01a40	55		 push	 ebp
  01a41	8b ec		 mov	 ebp, esp
  01a43	83 ec 50	 sub	 esp, 80			; 00000050H
  01a46	53		 push	 ebx
  01a47	56		 push	 esi
  01a48	57		 push	 edi
  01a49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 665  : 	int aIndex = aRecv->aIndex;

  01a4c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01a4f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01a52	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 666  : 
; 667  : 	if(!OBJMAX_RANGE(aIndex))

  01a55	83 7d f8 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  01a59	7d 09		 jge	 SHORT $LN6@DG_VoteBuf
  01a5b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  01a62	eb 0f		 jmp	 SHORT $LN7@DG_VoteBuf
$LN6@DG_VoteBuf:
  01a64	33 c0		 xor	 eax, eax
  01a66	81 7d f8 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  01a6d	0f 9e c0	 setle	 al
  01a70	89 45 b0	 mov	 DWORD PTR tv68[ebp], eax
$LN7@DG_VoteBuf:
  01a73	83 7d b0 00	 cmp	 DWORD PTR tv68[ebp], 0
  01a77	75 05		 jne	 SHORT $LN3@DG_VoteBuf

; 668  : 	{
; 669  : 		return;

  01a79	e9 8e 00 00 00	 jmp	 $LN4@DG_VoteBuf
$LN3@DG_VoteBuf:

; 670  : 	}
; 671  : 
; 672  : 	LPOBJ lpUser = &gObj[aIndex];

  01a7e	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01a81	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01a87	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01a8d	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 673  : 
; 674  : 	lpUser->MT_BuffTime = aRecv->MTBuffTime;

  01a90	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01a93	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01a96	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01a99	89 90 dc 2a 00
	00		 mov	 DWORD PTR [eax+10972], edx

; 675  : 	lpUser->QT_BuffTime = aRecv->QTBuffTime;

  01a9f	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01aa2	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01aa5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01aa8	89 90 e0 2a 00
	00		 mov	 DWORD PTR [eax+10976], edx

; 676  : 
; 677  : 	if(lpUser->MT_BuffTime > 0)

  01aae	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01ab1	83 b8 dc 2a 00
	00 00		 cmp	 DWORD PTR [eax+10972], 0
  01ab8	7e 23		 jle	 SHORT $LN2@DG_VoteBuf

; 678  : 	{
; 679  : 		gObjApplyBuffEffectDuration(lpUser, AT_MMOTOP_BUFF, 0, 0, 0, 0, lpUser->MT_BuffTime);

  01aba	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01abd	8b 88 dc 2a 00
	00		 mov	 ecx, DWORD PTR [eax+10972]
  01ac3	51		 push	 ecx
  01ac4	6a 00		 push	 0
  01ac6	6a 00		 push	 0
  01ac8	6a 00		 push	 0
  01aca	6a 00		 push	 0
  01acc	68 c2 00 00 00	 push	 194			; 000000c2H
  01ad1	8b 55 f4	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01ad4	52		 push	 edx
  01ad5	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  01ada	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@DG_VoteBuf:

; 680  : 	}
; 681  : 
; 682  : 	if(lpUser->QT_BuffTime > 0)

  01add	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01ae0	83 b8 e0 2a 00
	00 00		 cmp	 DWORD PTR [eax+10976], 0
  01ae7	7e 23		 jle	 SHORT $LN4@DG_VoteBuf

; 683  : 	{
; 684  : 		gObjApplyBuffEffectDuration(lpUser, AT_QTOP_BUFF, 0, 0, 0, 0, lpUser->QT_BuffTime);

  01ae9	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01aec	8b 88 e0 2a 00
	00		 mov	 ecx, DWORD PTR [eax+10976]
  01af2	51		 push	 ecx
  01af3	6a 00		 push	 0
  01af5	6a 00		 push	 0
  01af7	6a 00		 push	 0
  01af9	6a 00		 push	 0
  01afb	68 c3 00 00 00	 push	 195			; 000000c3H
  01b00	8b 55 f4	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01b03	52		 push	 edx
  01b04	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  01b09	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN4@DG_VoteBuf:

; 685  : 	}
; 686  : }

  01b0c	5f		 pop	 edi
  01b0d	5e		 pop	 esi
  01b0e	5b		 pop	 ebx
  01b0f	8b e5		 mov	 esp, ebp
  01b11	5d		 pop	 ebp
  01b12	c2 04 00	 ret	 4
?DG_VoteBuffLoad@CExGDManager@@QAEXPAUPMSG_ANS_VOTEBUFF_LOAD@@@Z ENDP ; CExGDManager::DG_VoteBuffLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -104						; size = 4
_pMsg$ = -36						; size = 24
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_VoteBuffSave@CExGDManager@@QAEXH@Z PROC		; CExGDManager::GD_VoteBuffSave
; _this$ = ecx

; 689  : {

  01b20	55		 push	 ebp
  01b21	8b ec		 mov	 ebp, esp
  01b23	83 ec 68	 sub	 esp, 104		; 00000068H
  01b26	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01b2b	33 c5		 xor	 eax, ebp
  01b2d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01b30	53		 push	 ebx
  01b31	56		 push	 esi
  01b32	57		 push	 edi
  01b33	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 690  : 	if(!OBJMAX_RANGE(aIndex))

  01b36	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  01b3a	7d 09		 jge	 SHORT $LN4@GD_VoteBuf
  01b3c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  01b43	eb 0f		 jmp	 SHORT $LN5@GD_VoteBuf
$LN4@GD_VoteBuf:
  01b45	33 c0		 xor	 eax, eax
  01b47	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  01b4e	0f 9e c0	 setle	 al
  01b51	89 45 98	 mov	 DWORD PTR tv67[ebp], eax
$LN5@GD_VoteBuf:
  01b54	83 7d 98 00	 cmp	 DWORD PTR tv67[ebp], 0
  01b58	75 02		 jne	 SHORT $LN1@GD_VoteBuf

; 691  : 	{
; 692  : 		return;

  01b5a	eb 6b		 jmp	 SHORT $LN2@GD_VoteBuf
$LN1@GD_VoteBuf:

; 693  : 	}
; 694  : 
; 695  : 	LPOBJ lpUser = &gObj[aIndex];

  01b5c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01b5f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01b65	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01b6b	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 696  : 
; 697  : 	PMSG_REQ_VOTEBUFF_SAVE pMsg;
; 698  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x11, sizeof(pMsg));

  01b6e	6a 18		 push	 24			; 00000018H
  01b70	6a 11		 push	 17			; 00000011H
  01b72	68 ea 00 00 00	 push	 234			; 000000eaH
  01b77	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01b7a	50		 push	 eax
  01b7b	8d 4d dc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01b7e	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 699  : 
; 700  : 	pMsg.szName[10] = 0;

  01b83	c6 45 ea 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 701  : 	memcpy(pMsg.szName, lpUser->Name, sizeof(pMsg.szName)-1);

  01b87	6a 0a		 push	 10			; 0000000aH
  01b89	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01b8c	83 c0 77	 add	 eax, 119		; 00000077H
  01b8f	50		 push	 eax
  01b90	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  01b93	51		 push	 ecx
  01b94	e8 00 00 00 00	 call	 _memcpy
  01b99	83 c4 0c	 add	 esp, 12			; 0000000cH

; 702  : 
; 703  : 	pMsg.MTBuffTime = lpUser->MT_BuffTime;

  01b9c	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01b9f	8b 88 dc 2a 00
	00		 mov	 ecx, DWORD PTR [eax+10972]
  01ba5	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 704  : 	pMsg.QTBuffTime = lpUser->QT_BuffTime;

  01ba8	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01bab	8b 88 e0 2a 00
	00		 mov	 ecx, DWORD PTR [eax+10976]
  01bb1	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 705  : 
; 706  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  01bb4	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01bb8	50		 push	 eax
  01bb9	8d 4d dc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01bbc	51		 push	 ecx
  01bbd	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01bc2	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_VoteBuf:

; 707  : }

  01bc7	5f		 pop	 edi
  01bc8	5e		 pop	 esi
  01bc9	5b		 pop	 ebx
  01bca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01bcd	33 cd		 xor	 ecx, ebp
  01bcf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01bd4	8b e5		 mov	 esp, ebp
  01bd6	5d		 pop	 ebp
  01bd7	c2 04 00	 ret	 4
?GD_VoteBuffSave@CExGDManager@@QAEXH@Z ENDP		; CExGDManager::GD_VoteBuffSave
_TEXT	ENDS
PUBLIC	?IsEnabled@CCustomQuestSystem@@QBEHXZ		; CCustomQuestSystem::IsEnabled
PUBLIC	__$ArrayPad$
EXTRN	?g_CustomQuestSystem@@3VCCustomQuestSystem@@A:BYTE ; g_CustomQuestSystem
EXTRN	?g_ExWinQuestSystem@@3VExWinQuestSystem@@A:BYTE	; g_ExWinQuestSystem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -32						; size = 20
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_ExQuestSystemLoad@CExGDManager@@QAEXH@Z PROC	; CExGDManager::GD_ExQuestSystemLoad
; _this$ = ecx

; 711  : {

  01be0	55		 push	 ebp
  01be1	8b ec		 mov	 ebp, esp
  01be3	83 ec 60	 sub	 esp, 96			; 00000060H
  01be6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01beb	33 c5		 xor	 eax, ebp
  01bed	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01bf0	53		 push	 ebx
  01bf1	56		 push	 esi
  01bf2	57		 push	 edi
  01bf3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 712  : 	if(!g_ExWinQuestSystem.Enable && !g_CustomQuestSystem.IsEnabled())

  01bf6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExWinQuestSystem@@3VExWinQuestSystem@@A
  01bfd	85 c0		 test	 eax, eax
  01bff	75 10		 jne	 SHORT $LN1@GD_ExQuest
  01c01	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CustomQuestSystem@@3VCCustomQuestSystem@@A ; g_CustomQuestSystem
  01c06	e8 00 00 00 00	 call	 ?IsEnabled@CCustomQuestSystem@@QBEHXZ ; CCustomQuestSystem::IsEnabled
  01c0b	85 c0		 test	 eax, eax
  01c0d	75 02		 jne	 SHORT $LN1@GD_ExQuest

; 713  : 	{
; 714  : 		return;

  01c0f	eb 59		 jmp	 SHORT $LN2@GD_ExQuest
$LN1@GD_ExQuest:

; 715  : 	}
; 716  : 
; 717  : 	LPOBJ lpUser = &gObj[aIndex];

  01c11	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01c14	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01c1a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01c20	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 718  : 	PMSG_REQ_EXQUESTSYSTEM_LOAD pMsg;
; 719  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x14, sizeof(pMsg));

  01c23	6a 14		 push	 20			; 00000014H
  01c25	6a 14		 push	 20			; 00000014H
  01c27	68 ea 00 00 00	 push	 234			; 000000eaH
  01c2c	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01c2f	50		 push	 eax
  01c30	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01c33	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 720  : 	pMsg.aIndex = aIndex;

  01c38	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01c3b	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 721  : 	pMsg.Name[10] = 0;

  01c3e	c6 45 f2 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 722  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  01c42	6a 0a		 push	 10			; 0000000aH
  01c44	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01c47	83 c0 77	 add	 eax, 119		; 00000077H
  01c4a	50		 push	 eax
  01c4b	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp+8]
  01c4e	51		 push	 ecx
  01c4f	e8 00 00 00 00	 call	 _memcpy
  01c54	83 c4 0c	 add	 esp, 12			; 0000000cH

; 723  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  01c57	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01c5b	50		 push	 eax
  01c5c	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01c5f	51		 push	 ecx
  01c60	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01c65	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_ExQuest:

; 724  : }

  01c6a	5f		 pop	 edi
  01c6b	5e		 pop	 esi
  01c6c	5b		 pop	 ebx
  01c6d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01c70	33 cd		 xor	 ecx, ebp
  01c72	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01c77	8b e5		 mov	 esp, ebp
  01c79	5d		 pop	 ebp
  01c7a	c2 04 00	 ret	 4
?GD_ExQuestSystemLoad@CExGDManager@@QAEXH@Z ENDP	; CExGDManager::GD_ExQuestSystemLoad
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\customquestsystem.h
_TEXT	ENDS
;	COMDAT ?IsEnabled@CCustomQuestSystem@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEnabled@CCustomQuestSystem@@QBEHXZ PROC		; CCustomQuestSystem::IsEnabled, COMDAT
; _this$ = ecx

; 112  : 	BOOL IsEnabled() const {return m_bEnabled;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?IsEnabled@CCustomQuestSystem@@QBEHXZ ENDP		; CCustomQuestSystem::IsEnabled
_TEXT	ENDS
EXTRN	?UserConnect@CCustomQuestSystem@@QAEXH@Z:PROC	; CCustomQuestSystem::UserConnect
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\exgdmanager.cpp
_TEXT	SEGMENT
tv71 = -88						; size = 4
_m$223866 = -20						; size = 4
_a$223862 = -16						; size = 4
_lpUser$ = -12						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DG_ExQuestSystemLoad@CExGDManager@@QAEXPAUPMSG_ANS_EXQUESTSYSTEM_LOAD@@@Z PROC ; CExGDManager::DG_ExQuestSystemLoad
; _this$ = ecx

; 727  : {

  01c80	55		 push	 ebp
  01c81	8b ec		 mov	 ebp, esp
  01c83	83 ec 58	 sub	 esp, 88			; 00000058H
  01c86	53		 push	 ebx
  01c87	56		 push	 esi
  01c88	57		 push	 edi
  01c89	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 728  : 	if(!aRecv->bResult)

  01c8c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01c8f	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  01c93	85 c9		 test	 ecx, ecx
  01c95	75 05		 jne	 SHORT $LN8@DG_ExQuest

; 729  : 	{
; 730  : 		return;

  01c97	e9 e2 00 00 00	 jmp	 $LN9@DG_ExQuest
$LN8@DG_ExQuest:

; 731  : 	}
; 732  : 
; 733  : 	int aIndex = aRecv->aIndex;

  01c9c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01c9f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01ca2	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 734  : 
; 735  : 	if(!OBJMAX_RANGE(aIndex))

  01ca5	83 7d f8 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  01ca9	7d 09		 jge	 SHORT $LN11@DG_ExQuest
  01cab	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  01cb2	eb 0f		 jmp	 SHORT $LN12@DG_ExQuest
$LN11@DG_ExQuest:
  01cb4	33 c0		 xor	 eax, eax
  01cb6	81 7d f8 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  01cbd	0f 9e c0	 setle	 al
  01cc0	89 45 a8	 mov	 DWORD PTR tv71[ebp], eax
$LN12@DG_ExQuest:
  01cc3	83 7d a8 00	 cmp	 DWORD PTR tv71[ebp], 0
  01cc7	75 05		 jne	 SHORT $LN7@DG_ExQuest

; 736  : 	{
; 737  : 		return;

  01cc9	e9 b0 00 00 00	 jmp	 $LN9@DG_ExQuest
$LN7@DG_ExQuest:

; 738  : 	}
; 739  : 
; 740  : 	LPOBJ lpUser = &gObj[aIndex];

  01cce	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01cd1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01cd7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01cdd	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 741  : 
; 742  : 	for(int a = 0; a < EW_MAX_ACT; a++)

  01ce0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$223862[ebp], 0
  01ce7	eb 09		 jmp	 SHORT $LN6@DG_ExQuest
$LN5@DG_ExQuest:
  01ce9	8b 45 f0	 mov	 eax, DWORD PTR _a$223862[ebp]
  01cec	83 c0 01	 add	 eax, 1
  01cef	89 45 f0	 mov	 DWORD PTR _a$223862[ebp], eax
$LN6@DG_ExQuest:
  01cf2	83 7d f0 03	 cmp	 DWORD PTR _a$223862[ebp], 3
  01cf6	7d 78		 jge	 SHORT $LN4@DG_ExQuest

; 743  : 	{
; 744  : 		lpUser->ExWQuestStart[a] = aRecv->ExWQuestStart[a];

  01cf8	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01cfb	03 45 f0	 add	 eax, DWORD PTR _a$223862[ebp]
  01cfe	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01d01	03 4d f0	 add	 ecx, DWORD PTR _a$223862[ebp]
  01d04	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  01d07	88 90 ec 2a 00
	00		 mov	 BYTE PTR [eax+10988], dl

; 745  : 		lpUser->ExWQuestNum[a] = aRecv->ExWQuestNum[a];

  01d0d	8b 45 f0	 mov	 eax, DWORD PTR _a$223862[ebp]
  01d10	8b 4d f4	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01d13	8b 55 f0	 mov	 edx, DWORD PTR _a$223862[ebp]
  01d16	8b 75 08	 mov	 esi, DWORD PTR _aRecv$[ebp]
  01d19	66 8b 54 56 0c	 mov	 dx, WORD PTR [esi+edx*2+12]
  01d1e	66 89 94 41 f0
	2a 00 00	 mov	 WORD PTR [ecx+eax*2+10992], dx

; 746  : 		for(int m = 0; m < EW_MAX_MISSION; m++)

  01d26	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _m$223866[ebp], 0
  01d2d	eb 09		 jmp	 SHORT $LN3@DG_ExQuest
$LN2@DG_ExQuest:
  01d2f	8b 45 ec	 mov	 eax, DWORD PTR _m$223866[ebp]
  01d32	83 c0 01	 add	 eax, 1
  01d35	89 45 ec	 mov	 DWORD PTR _m$223866[ebp], eax
$LN3@DG_ExQuest:
  01d38	83 7d ec 05	 cmp	 DWORD PTR _m$223866[ebp], 5
  01d3c	7d 2d		 jge	 SHORT $LN1@DG_ExQuest

; 747  : 		{
; 748  : 			lpUser->ExWQuestCount[a][m] = aRecv->ExWQuestCount[a][m];

  01d3e	8b 45 f0	 mov	 eax, DWORD PTR _a$223862[ebp]
  01d41	6b c0 0a	 imul	 eax, 10			; 0000000aH
  01d44	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  01d47	8d 54 01 12	 lea	 edx, DWORD PTR [ecx+eax+18]
  01d4b	8b 45 f0	 mov	 eax, DWORD PTR _a$223862[ebp]
  01d4e	6b c0 0a	 imul	 eax, 10			; 0000000aH
  01d51	8b 4d f4	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01d54	8d 84 01 f6 2a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+10998]
  01d5b	8b 4d ec	 mov	 ecx, DWORD PTR _m$223866[ebp]
  01d5e	8b 75 ec	 mov	 esi, DWORD PTR _m$223866[ebp]
  01d61	66 8b 14 72	 mov	 dx, WORD PTR [edx+esi*2]
  01d65	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 749  : 		}

  01d69	eb c4		 jmp	 SHORT $LN2@DG_ExQuest
$LN1@DG_ExQuest:

; 750  : 	}

  01d6b	e9 79 ff ff ff	 jmp	 $LN5@DG_ExQuest
$LN4@DG_ExQuest:

; 751  : 
; 752  : 	g_CustomQuestSystem.UserConnect(aIndex);

  01d70	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01d73	50		 push	 eax
  01d74	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CustomQuestSystem@@3VCCustomQuestSystem@@A ; g_CustomQuestSystem
  01d79	e8 00 00 00 00	 call	 ?UserConnect@CCustomQuestSystem@@QAEXH@Z ; CCustomQuestSystem::UserConnect
$LN9@DG_ExQuest:

; 753  : 	//g_ExWinQuestSystem.UserConnect(aIndex);
; 754  : }

  01d7e	5f		 pop	 edi
  01d7f	5e		 pop	 esi
  01d80	5b		 pop	 ebx
  01d81	8b e5		 mov	 esp, ebp
  01d83	5d		 pop	 ebp
  01d84	c2 04 00	 ret	 4
?DG_ExQuestSystemLoad@CExGDManager@@QAEXPAUPMSG_ANS_EXQUESTSYSTEM_LOAD@@@Z ENDP ; CExGDManager::DG_ExQuestSystemLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv72 = -144						; size = 4
_m$223883 = -76						; size = 4
_a$223879 = -72						; size = 4
_lpUser$ = -68						; size = 4
_pMsg$ = -64						; size = 54
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_ExQuestSystemSave@CExGDManager@@QAEXH@Z PROC	; CExGDManager::GD_ExQuestSystemSave
; _this$ = ecx

; 757  : {

  01d90	55		 push	 ebp
  01d91	8b ec		 mov	 ebp, esp
  01d93	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  01d99	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01d9e	33 c5		 xor	 eax, ebp
  01da0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01da3	53		 push	 ebx
  01da4	56		 push	 esi
  01da5	57		 push	 edi
  01da6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 758  : 	if(!g_ExWinQuestSystem.Enable && !g_CustomQuestSystem.IsEnabled())

  01da9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExWinQuestSystem@@3VExWinQuestSystem@@A
  01db0	85 c0		 test	 eax, eax
  01db2	75 13		 jne	 SHORT $LN8@GD_ExQuest@2
  01db4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CustomQuestSystem@@3VCCustomQuestSystem@@A ; g_CustomQuestSystem
  01db9	e8 00 00 00 00	 call	 ?IsEnabled@CCustomQuestSystem@@QBEHXZ ; CCustomQuestSystem::IsEnabled
  01dbe	85 c0		 test	 eax, eax
  01dc0	75 05		 jne	 SHORT $LN8@GD_ExQuest@2

; 759  : 	{
; 760  : 		return;

  01dc2	e9 0a 01 00 00	 jmp	 $LN9@GD_ExQuest@2
$LN8@GD_ExQuest@2:

; 761  : 	}
; 762  : 
; 763  : 	if(!OBJMAX_RANGE(aIndex))

  01dc7	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  01dcb	7d 0c		 jge	 SHORT $LN11@GD_ExQuest@2
  01dcd	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv72[ebp], 0
  01dd7	eb 12		 jmp	 SHORT $LN12@GD_ExQuest@2
$LN11@GD_ExQuest@2:
  01dd9	33 c0		 xor	 eax, eax
  01ddb	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  01de2	0f 9e c0	 setle	 al
  01de5	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], eax
$LN12@GD_ExQuest@2:
  01deb	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR tv72[ebp], 0
  01df2	75 05		 jne	 SHORT $LN7@GD_ExQuest@2

; 764  : 	{
; 765  : 		return;

  01df4	e9 d8 00 00 00	 jmp	 $LN9@GD_ExQuest@2
$LN7@GD_ExQuest@2:

; 766  : 	}
; 767  : 
; 768  : 	PMSG_REQ_EXQUESTSYSTEM_SAVE pMsg;
; 769  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x15, sizeof(pMsg));

  01df9	6a 36		 push	 54			; 00000036H
  01dfb	6a 15		 push	 21			; 00000015H
  01dfd	68 ea 00 00 00	 push	 234			; 000000eaH
  01e02	8d 45 c0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01e05	50		 push	 eax
  01e06	8d 4d c0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01e09	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 770  : 
; 771  : 	LPOBJ lpUser = &gObj[aIndex];

  01e0e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01e11	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01e17	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01e1d	89 45 bc	 mov	 DWORD PTR _lpUser$[ebp], eax

; 772  : 
; 773  : 	pMsg.Name[10] = 0;

  01e20	c6 45 ce 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 774  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  01e24	6a 0a		 push	 10			; 0000000aH
  01e26	8b 45 bc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01e29	83 c0 77	 add	 eax, 119		; 00000077H
  01e2c	50		 push	 eax
  01e2d	8d 4d c4	 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  01e30	51		 push	 ecx
  01e31	e8 00 00 00 00	 call	 _memcpy
  01e36	83 c4 0c	 add	 esp, 12			; 0000000cH

; 775  : 
; 776  : 	for(int a = 0; a < EW_MAX_ACT; a++)

  01e39	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _a$223879[ebp], 0
  01e40	eb 09		 jmp	 SHORT $LN6@GD_ExQuest@2
$LN5@GD_ExQuest@2:
  01e42	8b 45 b8	 mov	 eax, DWORD PTR _a$223879[ebp]
  01e45	83 c0 01	 add	 eax, 1
  01e48	89 45 b8	 mov	 DWORD PTR _a$223879[ebp], eax
$LN6@GD_ExQuest@2:
  01e4b	83 7d b8 03	 cmp	 DWORD PTR _a$223879[ebp], 3
  01e4f	7d 6d		 jge	 SHORT $LN4@GD_ExQuest@2

; 777  : 	{
; 778  : 		pMsg.ExWQuestStart[a] = lpUser->ExWQuestStart[a];

  01e51	8b 45 bc	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01e54	03 45 b8	 add	 eax, DWORD PTR _a$223879[ebp]
  01e57	8b 4d b8	 mov	 ecx, DWORD PTR _a$223879[ebp]
  01e5a	8a 90 ec 2a 00
	00		 mov	 dl, BYTE PTR [eax+10988]
  01e60	88 54 0d cf	 mov	 BYTE PTR _pMsg$[ebp+ecx+15], dl

; 779  : 		pMsg.ExWQuestNum[a] = lpUser->ExWQuestNum[a];

  01e64	8b 45 b8	 mov	 eax, DWORD PTR _a$223879[ebp]
  01e67	8b 4d b8	 mov	 ecx, DWORD PTR _a$223879[ebp]
  01e6a	8b 55 bc	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01e6d	66 8b 8c 4a f0
	2a 00 00	 mov	 cx, WORD PTR [edx+ecx*2+10992]
  01e75	66 89 4c 45 d2	 mov	 WORD PTR _pMsg$[ebp+eax*2+18], cx

; 780  : 		for(int m = 0; m < EW_MAX_MISSION; m++)

  01e7a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _m$223883[ebp], 0
  01e81	eb 09		 jmp	 SHORT $LN3@GD_ExQuest@2
$LN2@GD_ExQuest@2:
  01e83	8b 45 b4	 mov	 eax, DWORD PTR _m$223883[ebp]
  01e86	83 c0 01	 add	 eax, 1
  01e89	89 45 b4	 mov	 DWORD PTR _m$223883[ebp], eax
$LN3@GD_ExQuest@2:
  01e8c	83 7d b4 05	 cmp	 DWORD PTR _m$223883[ebp], 5
  01e90	7d 2a		 jge	 SHORT $LN1@GD_ExQuest@2

; 781  : 		{
; 782  : 			pMsg.ExWQuestCount[a][m] = lpUser->ExWQuestCount[a][m];

  01e92	8b 45 b8	 mov	 eax, DWORD PTR _a$223879[ebp]
  01e95	6b c0 0a	 imul	 eax, 10			; 0000000aH
  01e98	8b 4d bc	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01e9b	8d 94 01 f6 2a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+10998]
  01ea2	8b 45 b8	 mov	 eax, DWORD PTR _a$223879[ebp]
  01ea5	6b c0 0a	 imul	 eax, 10			; 0000000aH
  01ea8	8d 4c 05 d8	 lea	 ecx, DWORD PTR _pMsg$[ebp+eax+24]
  01eac	8b 45 b4	 mov	 eax, DWORD PTR _m$223883[ebp]
  01eaf	8b 75 b4	 mov	 esi, DWORD PTR _m$223883[ebp]
  01eb2	66 8b 14 72	 mov	 dx, WORD PTR [edx+esi*2]
  01eb6	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 783  : 		}

  01eba	eb c7		 jmp	 SHORT $LN2@GD_ExQuest@2
$LN1@GD_ExQuest@2:

; 784  : 	}

  01ebc	eb 84		 jmp	 SHORT $LN5@GD_ExQuest@2
$LN4@GD_ExQuest@2:

; 785  : 
; 786  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  01ebe	0f b6 45 c1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01ec2	50		 push	 eax
  01ec3	8d 4d c0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01ec6	51		 push	 ecx
  01ec7	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01ecc	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN9@GD_ExQuest@2:

; 787  : }

  01ed1	5f		 pop	 edi
  01ed2	5e		 pop	 esi
  01ed3	5b		 pop	 ebx
  01ed4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01ed7	33 cd		 xor	 ecx, ebp
  01ed9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01ede	8b e5		 mov	 esp, ebp
  01ee0	5d		 pop	 ebp
  01ee1	c2 04 00	 ret	 4
?GD_ExQuestSystemSave@CExGDManager@@QAEXH@Z ENDP	; CExGDManager::GD_ExQuestSystemSave
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_ExGDManager@@YAXXZ
text$yc	SEGMENT
??__Eg_ExGDManager@@YAXXZ PROC				; `dynamic initializer for 'g_ExGDManager'', COMDAT

; 18   : CExGDManager g_ExGDManager;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExGDManager@@3VCExGDManager@@A ; g_ExGDManager
  0000e	e8 00 00 00 00	 call	 ??0CExGDManager@@QAE@XZ	; CExGDManager::CExGDManager
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_ExGDManager@@YAXXZ ; `dynamic atexit destructor for 'g_ExGDManager''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_ExGDManager@@YAXXZ ENDP				; `dynamic initializer for 'g_ExGDManager''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_ExGDManager@@YAXXZ
text$yd	SEGMENT
??__Fg_ExGDManager@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ExGDManager'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExGDManager@@3VCExGDManager@@A ; g_ExGDManager
  0000e	e8 00 00 00 00	 call	 ??1CExGDManager@@QAE@XZ	; CExGDManager::~CExGDManager
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_ExGDManager@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ExGDManager''
text$yd	ENDS
PUBLIC	?g_ExGDManager@@3VCExGDManager@@A		; g_ExGDManager
_BSS	SEGMENT
?g_ExGDManager@@3VCExGDManager@@A DB 01H DUP (?)	; g_ExGDManager
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ExGDManager$initializer$ DD FLAT:??__Eg_ExGDManager@@YAXXZ
CRT$XCU	ENDS
END
