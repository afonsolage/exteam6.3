; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\MonsterAttr.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMonsterAttr@@6B@				; CMonsterAttr::`vftable'
PUBLIC	??0CMonsterAttr@@QAE@XZ				; CMonsterAttr::CMonsterAttr
PUBLIC	??_R4CMonsterAttr@@6B@				; CMonsterAttr::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMonsterAttr@@@8			; CMonsterAttr `RTTI Type Descriptor'
PUBLIC	??_R3CMonsterAttr@@8				; CMonsterAttr::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMonsterAttr@@8				; CMonsterAttr::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMonsterAttr@@8			; CMonsterAttr::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMonsterAttr@@UAEPAXI@Z:PROC		; CMonsterAttr::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMonsterAttr@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\monsterattr.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMonsterAttr@@8 DD FLAT:??_R0?AVCMonsterAttr@@@8 ; CMonsterAttr::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMonsterAttr@@8
rdata$r	ENDS
;	COMDAT ??_R2CMonsterAttr@@8
rdata$r	SEGMENT
??_R2CMonsterAttr@@8 DD FLAT:??_R1A@?0A@EA@CMonsterAttr@@8 ; CMonsterAttr::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMonsterAttr@@8
rdata$r	SEGMENT
??_R3CMonsterAttr@@8 DD 00H				; CMonsterAttr::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMonsterAttr@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMonsterAttr@@@8
_DATA	SEGMENT
??_R0?AVCMonsterAttr@@@8 DD FLAT:??_7type_info@@6B@	; CMonsterAttr `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMonsterAttr@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMonsterAttr@@6B@
rdata$r	SEGMENT
??_R4CMonsterAttr@@6B@ DD 00H				; CMonsterAttr::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMonsterAttr@@@8
	DD	FLAT:??_R3CMonsterAttr@@8
rdata$r	ENDS
;	COMDAT ??_7CMonsterAttr@@6B@
CONST	SEGMENT
??_7CMonsterAttr@@6B@ DD FLAT:??_R4CMonsterAttr@@6B@	; CMonsterAttr::`vftable'
	DD	FLAT:??_ECMonsterAttr@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMonsterAttr@@QAE@XZ PROC				; CMonsterAttr::CMonsterAttr
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMonsterAttr@@6B@

; 21   : 	return;
; 22   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CMonsterAttr@@QAE@XZ ENDP				; CMonsterAttr::CMonsterAttr
_TEXT	ENDS
PUBLIC	??1CMonsterAttr@@UAE@XZ				; CMonsterAttr::~CMonsterAttr
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMonsterAttr@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMonsterAttr@@UAEPAXI@Z PROC			; CMonsterAttr::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMonsterAttr@@UAE@XZ	; CMonsterAttr::~CMonsterAttr
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCMonsterAttr@@UAEPAXI@Z ENDP			; CMonsterAttr::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMonsterAttr@@UAE@XZ PROC				; CMonsterAttr::~CMonsterAttr
; _this$ = ecx

; 25   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMonsterAttr@@6B@

; 26   : 	return;
; 27   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CMonsterAttr@@UAE@XZ ENDP				; CMonsterAttr::~CMonsterAttr
_TEXT	ENDS
PUBLIC	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$227101 = -8						; size = 4
_this$ = -4						; size = 4
_aClass$ = 8						; size = 4
?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z PROC ; CMonsterAttr::GetAttr
; _this$ = ecx

; 30   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 48	 sub	 esp, 72			; 00000048H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	for ( int n = 0; n<MAX_MONSTER_TYPE;n++)

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$227101[ebp], 0
  00053	eb 09		 jmp	 SHORT $LN4@GetAttr
$LN3@GetAttr:
  00055	8b 45 f8	 mov	 eax, DWORD PTR _n$227101[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	89 45 f8	 mov	 DWORD PTR _n$227101[ebp], eax
$LN4@GetAttr:
  0005e	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _n$227101[ebp], 1024 ; 00000400H
  00065	7d 23		 jge	 SHORT $LN2@GetAttr

; 32   : 	{
; 33   : 		if ( this->m_MonsterAttr[n].m_Index == aClass )

  00067	8b 45 f8	 mov	 eax, DWORD PTR _n$227101[ebp]
  0006a	c1 e0 07	 shl	 eax, 7
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00074	3b 55 08	 cmp	 edx, DWORD PTR _aClass$[ebp]
  00077	75 0f		 jne	 SHORT $LN1@GetAttr

; 34   : 		{
; 35   : 			return &this->m_MonsterAttr[n];

  00079	8b 45 f8	 mov	 eax, DWORD PTR _n$227101[ebp]
  0007c	c1 e0 07	 shl	 eax, 7
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	8d 44 01 04	 lea	 eax, DWORD PTR [ecx+eax+4]
  00086	eb 04		 jmp	 SHORT $LN5@GetAttr
$LN1@GetAttr:

; 36   : 		}
; 37   : 	}

  00088	eb cb		 jmp	 SHORT $LN3@GetAttr
$LN2@GetAttr:

; 38   : 
; 39   : 	return NULL;

  0008a	33 c0		 xor	 eax, eax
$LN5@GetAttr:

; 40   : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ENDP ; CMonsterAttr::GetAttr
_TEXT	ENDS
PUBLIC	??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ ; `string'
PUBLIC	??_C@_0ED@DEKCMPMJ@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??LoadAttr@CMonsterAttr@@QAEXPAD@Z@4JA ; `CMonsterAttr::LoadAttr'::`2'::__LINE__Var
PUBLIC	__real@4059000000000000
PUBLIC	??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?LoadAttr@CMonsterAttr@@QAEXPAD@Z		; CMonsterAttr::LoadAttr
EXTRN	_fclose:PROC
EXTRN	?gMonsterHPAdjust@@3HA:DWORD			; gMonsterHPAdjust
EXTRN	?gMonsterHp@@3HA:DWORD				; gMonsterHp
EXTRN	_strcpy:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
CONST	SEGMENT
??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ DB 'Monst'
	DB	'er attribute max over %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@DEKCMPMJ@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0ED@DEKCMPMJ@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\monsterattr.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??LoadAttr@CMonsterAttr@@QAEXPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??LoadAttr@CMonsterAttr@@QAEXPAD@Z@4JA DD 02bH ; `CMonsterAttr::LoadAttr'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@ DB 'load error %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv710 = -120						; size = 8
tv754 = -116						; size = 4
tv743 = -116						; size = 4
tv732 = -116						; size = 4
tv721 = -116						; size = 4
tv752 = -112						; size = 4
tv741 = -112						; size = 4
tv730 = -112						; size = 4
tv719 = -112						; size = 4
tv708 = -112						; size = 4
tv749 = -106						; size = 2
tv738 = -106						; size = 2
tv727 = -106						; size = 2
tv716 = -106						; size = 2
tv705 = -106						; size = 2
_modiryvaluemax$227165 = -40				; size = 4
_modiryvaluemin$227164 = -36				; size = 4
_modiryvaluemax$227162 = -32				; size = 4
_modiryvaluemin$227161 = -28				; size = 4
_modiryvalue$227157 = -24				; size = 4
_modiryvalue$227155 = -20				; size = 4
_modiryvalue$227151 = -16				; size = 4
_n$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadAttr@CMonsterAttr@@QAEXPAD@Z PROC			; CMonsterAttr::LoadAttr
; _this$ = ecx

; 43   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 78	 sub	 esp, 120		; 00000078H
  000a6	53		 push	 ebx
  000a7	56		 push	 esi
  000a8	57		 push	 edi
  000a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 	int Token;
; 45   : 	int n;
; 46   : 
; 47   : 	SMDFile = fopen(filename, "r");

  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000b1	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _fopen
  000ba	83 c4 08	 add	 esp, 8
  000bd	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 48   : 
; 49   : 	if ( SMDFile == NULL )

  000c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  000c9	75 16		 jne	 SHORT $LN17@LoadAttr

; 50   : 	{
; 51   : 		MsgBox("load error %s", filename);

  000cb	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@
  000d4	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000d9	83 c4 08	 add	 esp, 8

; 52   : 		return;

  000dc	e9 1d 08 00 00	 jmp	 $LN18@LoadAttr
$LN17@LoadAttr:

; 53   : 	}
; 54   : 
; 55   : 	n= 0;

  000e1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
$LN16@LoadAttr:

; 56   : 
; 57   : 	while ( true )

  000e8	b8 01 00 00 00	 mov	 eax, 1
  000ed	85 c0		 test	 eax, eax
  000ef	0f 84 fb 07 00
	00		 je	 $LN15@LoadAttr

; 58   : 	{
; 59   : 		Token = GetToken();

  000f5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000fa	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 60   : 
; 61   : 		if ( Token == END )

  000fd	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00101	75 05		 jne	 SHORT $LN14@LoadAttr

; 62   : 		{
; 63   : 			break;

  00103	e9 e8 07 00 00	 jmp	 $LN15@LoadAttr
$LN14@LoadAttr:

; 64   : 		}
; 65   : 
; 66   : 			
; 67   : 		if ( Token == NUMBER )

  00108	83 7d f8 01	 cmp	 DWORD PTR _Token$[ebp], 1
  0010c	0f 85 d9 07 00
	00		 jne	 $LN1@LoadAttr

; 68   : 		{
; 69   : 			this->m_MonsterAttr[n].m_Index = (int)TokenNumber;					Token = GetToken();

  00112	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00118	e8 00 00 00 00	 call	 __ftol2_sse
  0011d	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00120	c1 e1 07	 shl	 ecx, 7
  00123	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00126	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax
  0012a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0012f	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 70   : 			this->m_MonsterAttr[n].m_Rate = (int)TokenNumber;					Token = GetToken();

  00132	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00138	e8 00 00 00 00	 call	 __ftol2_sse
  0013d	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00140	c1 e1 07	 shl	 ecx, 7
  00143	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00146	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
  0014a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0014f	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 71   : 			strcpy(this->m_MonsterAttr[n].m_Name, TokenString);				Token = GetToken();

  00152	68 00 00 00 00	 push	 OFFSET _TokenString
  00157	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0015a	c1 e0 07	 shl	 eax, 7
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00160	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 _strcpy
  0016a	83 c4 08	 add	 esp, 8
  0016d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00172	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 72   : 			this->m_MonsterAttr[n].m_Level = (int)TokenNumber;					Token = GetToken();

  00175	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0017b	e8 00 00 00 00	 call	 __ftol2_sse
  00180	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00183	c1 e1 07	 shl	 ecx, 7
  00186	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00189	89 44 0a 20	 mov	 DWORD PTR [edx+ecx+32], eax
  0018d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00192	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 73   : 			this->m_MonsterAttr[n].m_Hp = (int)TokenNumber;						Token = GetToken();

  00195	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0019b	e8 00 00 00 00	 call	 __ftol2_sse
  001a0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  001a3	c1 e1 07	 shl	 ecx, 7
  001a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a9	89 44 0a 2c	 mov	 DWORD PTR [edx+ecx+44], eax
  001ad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001b2	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 74   : 			this->m_MonsterAttr[n].m_Mp = (int)TokenNumber;						Token = GetToken();

  001b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001bb	e8 00 00 00 00	 call	 __ftol2_sse
  001c0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  001c3	c1 e1 07	 shl	 ecx, 7
  001c6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001c9	89 44 0a 30	 mov	 DWORD PTR [edx+ecx+48], eax
  001cd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001d2	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 75   : 			this->m_MonsterAttr[n].m_DamageMin = (int)TokenNumber;				Token = GetToken();

  001d5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001db	e8 00 00 00 00	 call	 __ftol2_sse
  001e0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  001e3	c1 e1 07	 shl	 ecx, 7
  001e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e9	89 44 0a 34	 mov	 DWORD PTR [edx+ecx+52], eax
  001ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001f2	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 76   : 			this->m_MonsterAttr[n].m_DamageMax = (int)TokenNumber;				Token = GetToken();

  001f5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001fb	e8 00 00 00 00	 call	 __ftol2_sse
  00200	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00203	c1 e1 07	 shl	 ecx, 7
  00206	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00209	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
  0020d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00212	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 77   : 			this->m_MonsterAttr[n].m_Defense = (int)TokenNumber;					Token = GetToken();

  00215	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0021b	e8 00 00 00 00	 call	 __ftol2_sse
  00220	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00223	c1 e1 07	 shl	 ecx, 7
  00226	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00229	89 44 0a 3c	 mov	 DWORD PTR [edx+ecx+60], eax
  0022d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00232	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 78   : 			this->m_MonsterAttr[n].m_MagicDefense = (int)TokenNumber;			Token = GetToken();

  00235	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023b	e8 00 00 00 00	 call	 __ftol2_sse
  00240	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00243	c1 e1 07	 shl	 ecx, 7
  00246	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00249	89 44 0a 40	 mov	 DWORD PTR [edx+ecx+64], eax
  0024d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00252	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 79   : 			this->m_MonsterAttr[n].m_AttackRating = (int)TokenNumber;			Token = GetToken();

  00255	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0025b	e8 00 00 00 00	 call	 __ftol2_sse
  00260	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00263	c1 e1 07	 shl	 ecx, 7
  00266	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00269	89 44 0a 44	 mov	 DWORD PTR [edx+ecx+68], eax
  0026d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00272	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 80   : 			this->m_MonsterAttr[n].m_Successfulblocking = (int)TokenNumber;		Token = GetToken();

  00275	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0027b	e8 00 00 00 00	 call	 __ftol2_sse
  00280	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00283	c1 e1 07	 shl	 ecx, 7
  00286	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00289	89 44 0a 48	 mov	 DWORD PTR [edx+ecx+72], eax
  0028d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00292	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 81   : 			this->m_MonsterAttr[n].m_MoveRange = (int)TokenNumber;				Token = GetToken();

  00295	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029b	e8 00 00 00 00	 call	 __ftol2_sse
  002a0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  002a3	c1 e1 07	 shl	 ecx, 7
  002a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002a9	89 44 0a 4c	 mov	 DWORD PTR [edx+ecx+76], eax
  002ad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002b2	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 82   : 			this->m_MonsterAttr[n].m_AttackType = (int)TokenNumber;				Token = GetToken();

  002b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002bb	e8 00 00 00 00	 call	 __ftol2_sse
  002c0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  002c3	c1 e1 07	 shl	 ecx, 7
  002c6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002c9	89 44 0a 54	 mov	 DWORD PTR [edx+ecx+84], eax
  002cd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002d2	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 83   : 			this->m_MonsterAttr[n].m_AttackRange = (int)TokenNumber;				Token = GetToken();

  002d5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002db	e8 00 00 00 00	 call	 __ftol2_sse
  002e0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  002e3	c1 e1 07	 shl	 ecx, 7
  002e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002e9	89 44 0a 50	 mov	 DWORD PTR [edx+ecx+80], eax
  002ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002f2	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 84   : 			this->m_MonsterAttr[n].m_ViewRange = (int)TokenNumber;				Token = GetToken();

  002f5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002fb	e8 00 00 00 00	 call	 __ftol2_sse
  00300	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00303	c1 e1 07	 shl	 ecx, 7
  00306	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00309	89 44 0a 58	 mov	 DWORD PTR [edx+ecx+88], eax
  0030d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00312	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 85   : 			this->m_MonsterAttr[n].m_MoveSpeed = (int)TokenNumber;				Token = GetToken();

  00315	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0031b	e8 00 00 00 00	 call	 __ftol2_sse
  00320	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00323	c1 e1 07	 shl	 ecx, 7
  00326	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00329	89 44 0a 5c	 mov	 DWORD PTR [edx+ecx+92], eax
  0032d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00332	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 86   : 			this->m_MonsterAttr[n].m_AttackSpeed = (int)TokenNumber;				Token = GetToken();

  00335	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0033b	e8 00 00 00 00	 call	 __ftol2_sse
  00340	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00343	c1 e1 07	 shl	 ecx, 7
  00346	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00349	89 44 0a 60	 mov	 DWORD PTR [edx+ecx+96], eax
  0034d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00352	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 87   : 			this->m_MonsterAttr[n].m_RegenTime = (int)TokenNumber;				Token = GetToken();

  00355	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0035b	e8 00 00 00 00	 call	 __ftol2_sse
  00360	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00363	c1 e1 07	 shl	 ecx, 7
  00366	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00369	89 44 0a 64	 mov	 DWORD PTR [edx+ecx+100], eax
  0036d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00372	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 88   : 			this->m_MonsterAttr[n].m_Attribute = (int)TokenNumber;				Token = GetToken();

  00375	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0037b	e8 00 00 00 00	 call	 __ftol2_sse
  00380	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00383	c1 e1 07	 shl	 ecx, 7
  00386	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00389	89 44 0a 68	 mov	 DWORD PTR [edx+ecx+104], eax
  0038d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00392	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 89   : 			this->m_MonsterAttr[n].m_ItemRate = (int)TokenNumber;				Token = GetToken();

  00395	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0039b	e8 00 00 00 00	 call	 __ftol2_sse
  003a0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  003a3	c1 e1 07	 shl	 ecx, 7
  003a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003a9	89 44 0a 6c	 mov	 DWORD PTR [edx+ecx+108], eax
  003ad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003b2	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 90   : 			this->m_MonsterAttr[n].m_MoneyRate = (int)TokenNumber;				Token = GetToken();

  003b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003bb	e8 00 00 00 00	 call	 __ftol2_sse
  003c0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  003c3	c1 e1 07	 shl	 ecx, 7
  003c6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003c9	89 44 0a 70	 mov	 DWORD PTR [edx+ecx+112], eax
  003cd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003d2	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 91   : 			this->m_MonsterAttr[n].m_MaxItemLevel = (int)TokenNumber;			Token = GetToken();

  003d5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003db	e8 00 00 00 00	 call	 __ftol2_sse
  003e0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  003e3	c1 e1 07	 shl	 ecx, 7
  003e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003e9	89 44 0a 74	 mov	 DWORD PTR [edx+ecx+116], eax
  003ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003f2	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 92   : 			this->m_MonsterAttr[n].m_MonsterSkill = (DWORD)TokenNumber;			Token = GetToken();

  003f5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003fb	d9 7d 96	 fnstcw	 WORD PTR tv705[ebp]
  003fe	0f b7 45 96	 movzx	 eax, WORD PTR tv705[ebp]
  00402	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00407	89 45 90	 mov	 DWORD PTR tv708[ebp], eax
  0040a	d9 6d 90	 fldcw	 WORD PTR tv708[ebp]
  0040d	df 7d 88	 fistp	 QWORD PTR tv710[ebp]
  00410	d9 6d 96	 fldcw	 WORD PTR tv705[ebp]
  00413	8b 45 88	 mov	 eax, DWORD PTR tv710[ebp]
  00416	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00419	c1 e1 07	 shl	 ecx, 7
  0041c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0041f	89 84 0a 80 00
	00 00		 mov	 DWORD PTR [edx+ecx+128], eax
  00426	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0042b	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 93   : 			this->m_MonsterAttr[n].m_Resistance[R_ICE]  = (BYTE)TokenNumber;		Token = GetToken();

  0042e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00434	d9 7d 96	 fnstcw	 WORD PTR tv716[ebp]
  00437	0f b7 45 96	 movzx	 eax, WORD PTR tv716[ebp]
  0043b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00440	89 45 90	 mov	 DWORD PTR tv719[ebp], eax
  00443	d9 6d 90	 fldcw	 WORD PTR tv719[ebp]
  00446	db 5d 8c	 fistp	 DWORD PTR tv721[ebp]
  00449	d9 6d 96	 fldcw	 WORD PTR tv716[ebp]
  0044c	8a 45 8c	 mov	 al, BYTE PTR tv721[ebp]
  0044f	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00452	c1 e1 07	 shl	 ecx, 7
  00455	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00458	88 44 0a 78	 mov	 BYTE PTR [edx+ecx+120], al
  0045c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00461	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 94   : 			this->m_MonsterAttr[n].m_Resistance[R_POISON] = (BYTE)TokenNumber;	Token = GetToken();

  00464	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0046a	d9 7d 96	 fnstcw	 WORD PTR tv727[ebp]
  0046d	0f b7 45 96	 movzx	 eax, WORD PTR tv727[ebp]
  00471	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00476	89 45 90	 mov	 DWORD PTR tv730[ebp], eax
  00479	d9 6d 90	 fldcw	 WORD PTR tv730[ebp]
  0047c	db 5d 8c	 fistp	 DWORD PTR tv732[ebp]
  0047f	d9 6d 96	 fldcw	 WORD PTR tv727[ebp]
  00482	8a 45 8c	 mov	 al, BYTE PTR tv732[ebp]
  00485	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00488	c1 e1 07	 shl	 ecx, 7
  0048b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0048e	88 44 0a 79	 mov	 BYTE PTR [edx+ecx+121], al
  00492	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00497	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 95   : 			this->m_MonsterAttr[n].m_Resistance[R_LIGHTNING] = (BYTE)TokenNumber;	Token = GetToken();

  0049a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004a0	d9 7d 96	 fnstcw	 WORD PTR tv738[ebp]
  004a3	0f b7 45 96	 movzx	 eax, WORD PTR tv738[ebp]
  004a7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004ac	89 45 90	 mov	 DWORD PTR tv741[ebp], eax
  004af	d9 6d 90	 fldcw	 WORD PTR tv741[ebp]
  004b2	db 5d 8c	 fistp	 DWORD PTR tv743[ebp]
  004b5	d9 6d 96	 fldcw	 WORD PTR tv738[ebp]
  004b8	8a 45 8c	 mov	 al, BYTE PTR tv743[ebp]
  004bb	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  004be	c1 e1 07	 shl	 ecx, 7
  004c1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004c4	88 44 0a 7a	 mov	 BYTE PTR [edx+ecx+122], al
  004c8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004cd	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 96   : 			this->m_MonsterAttr[n].m_Resistance[R_FIRE] = (BYTE)TokenNumber;

  004d0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004d6	d9 7d 96	 fnstcw	 WORD PTR tv749[ebp]
  004d9	0f b7 45 96	 movzx	 eax, WORD PTR tv749[ebp]
  004dd	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004e2	89 45 90	 mov	 DWORD PTR tv752[ebp], eax
  004e5	d9 6d 90	 fldcw	 WORD PTR tv752[ebp]
  004e8	db 5d 8c	 fistp	 DWORD PTR tv754[ebp]
  004eb	d9 6d 96	 fldcw	 WORD PTR tv749[ebp]
  004ee	8a 45 8c	 mov	 al, BYTE PTR tv754[ebp]
  004f1	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  004f4	c1 e1 07	 shl	 ecx, 7
  004f7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004fa	88 44 0a 7b	 mov	 BYTE PTR [edx+ecx+123], al

; 97   : 			
; 98   : 			this->m_MonsterAttr[n].m_Hp = this->m_MonsterAttr[n].m_Hp - (INT)(this->m_MonsterAttr[n].m_Hp / 100.0f * gMonsterHp);

  004fe	8b 75 f4	 mov	 esi, DWORD PTR _n$[ebp]
  00501	c1 e6 07	 shl	 esi, 7
  00504	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00507	c1 e0 07	 shl	 eax, 7
  0050a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0050d	db 44 01 2c	 fild	 DWORD PTR [ecx+eax+44]
  00511	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00517	da 0d 00 00 00
	00		 fimul	 DWORD PTR ?gMonsterHp@@3HA ; gMonsterHp
  0051d	e8 00 00 00 00	 call	 __ftol2_sse
  00522	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00525	8b 4c 32 2c	 mov	 ecx, DWORD PTR [edx+esi+44]
  00529	2b c8		 sub	 ecx, eax
  0052b	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  0052e	c1 e2 07	 shl	 edx, 7
  00531	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00534	89 4c 10 2c	 mov	 DWORD PTR [eax+edx+44], ecx

; 99   : 		
; 100  : 			this->m_MonsterAttr[n].m_iScriptHP = this->m_MonsterAttr[n].m_Hp;

  00538	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0053b	c1 e0 07	 shl	 eax, 7
  0053e	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00541	c1 e1 07	 shl	 ecx, 7
  00544	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00547	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0054a	8b 44 06 2c	 mov	 eax, DWORD PTR [esi+eax+44]
  0054e	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 101  : 
; 102  : 			if ( this->m_MonsterAttr[n].m_Level <= 24 && this->m_MonsterAttr[n].m_Index < 50)

  00552	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00555	c1 e0 07	 shl	 eax, 7
  00558	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0055b	83 7c 01 20 18	 cmp	 DWORD PTR [ecx+eax+32], 24 ; 00000018H
  00560	0f 8f 8b 01 00
	00		 jg	 $LN6@LoadAttr
  00566	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00569	c1 e0 07	 shl	 eax, 7
  0056c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0056f	83 7c 01 04 32	 cmp	 DWORD PTR [ecx+eax+4], 50 ; 00000032H
  00574	0f 8d 77 01 00
	00		 jge	 $LN6@LoadAttr

; 103  : 			{
; 104  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 105  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 106  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 107  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 108  : 					 this->m_MonsterAttr[n].m_Level == 19 ||
; 109  : 					 this->m_MonsterAttr[n].m_Level == 24 )

  0057a	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0057d	c1 e0 07	 shl	 eax, 7
  00580	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00583	83 7c 01 20 0d	 cmp	 DWORD PTR [ecx+eax+32], 13 ; 0000000dH
  00588	74 50		 je	 SHORT $LN10@LoadAttr
  0058a	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0058d	c1 e0 07	 shl	 eax, 7
  00590	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00593	83 7c 01 20 0e	 cmp	 DWORD PTR [ecx+eax+32], 14 ; 0000000eH
  00598	74 40		 je	 SHORT $LN10@LoadAttr
  0059a	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0059d	c1 e0 07	 shl	 eax, 7
  005a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005a3	83 7c 01 20 11	 cmp	 DWORD PTR [ecx+eax+32], 17 ; 00000011H
  005a8	74 30		 je	 SHORT $LN10@LoadAttr
  005aa	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  005ad	c1 e0 07	 shl	 eax, 7
  005b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005b3	83 7c 01 20 12	 cmp	 DWORD PTR [ecx+eax+32], 18 ; 00000012H
  005b8	74 20		 je	 SHORT $LN10@LoadAttr
  005ba	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  005bd	c1 e0 07	 shl	 eax, 7
  005c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c3	83 7c 01 20 13	 cmp	 DWORD PTR [ecx+eax+32], 19 ; 00000013H
  005c8	74 10		 je	 SHORT $LN10@LoadAttr
  005ca	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  005cd	c1 e0 07	 shl	 eax, 7
  005d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005d3	83 7c 01 20 18	 cmp	 DWORD PTR [ecx+eax+32], 24 ; 00000018H
  005d8	75 57		 jne	 SHORT $LN11@LoadAttr
$LN10@LoadAttr:

; 110  : 				{
; 111  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*20/100;

  005da	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  005dd	c1 e0 07	 shl	 eax, 7
  005e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005e3	8b 44 01 2c	 mov	 eax, DWORD PTR [ecx+eax+44]
  005e7	6b c0 14	 imul	 eax, 20			; 00000014H
  005ea	99		 cdq
  005eb	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  005f0	f7 f9		 idiv	 ecx
  005f2	89 45 f0	 mov	 DWORD PTR _modiryvalue$227151[ebp], eax

; 112  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;

  005f5	8b 45 f0	 mov	 eax, DWORD PTR _modiryvalue$227151[ebp]
  005f8	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  005ff	99		 cdq
  00600	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00605	f7 f9		 idiv	 ecx
  00607	8b 55 f0	 mov	 edx, DWORD PTR _modiryvalue$227151[ebp]
  0060a	2b d0		 sub	 edx, eax
  0060c	89 55 f0	 mov	 DWORD PTR _modiryvalue$227151[ebp], edx

; 113  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;

  0060f	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00612	c1 e0 07	 shl	 eax, 7
  00615	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00618	8b 54 01 2c	 mov	 edx, DWORD PTR [ecx+eax+44]
  0061c	2b 55 f0	 sub	 edx, DWORD PTR _modiryvalue$227151[ebp]
  0061f	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00622	c1 e0 07	 shl	 eax, 7
  00625	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00628	89 54 01 2c	 mov	 DWORD PTR [ecx+eax+44], edx
  0062c	e9 c0 00 00 00	 jmp	 $LN6@LoadAttr
$LN11@LoadAttr:

; 114  : 				}
; 115  : 				else if ( this->m_MonsterAttr[n].m_Level == 20 || this->m_MonsterAttr[n].m_Level == 22 )

  00631	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00634	c1 e0 07	 shl	 eax, 7
  00637	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0063a	83 7c 01 20 14	 cmp	 DWORD PTR [ecx+eax+32], 20 ; 00000014H
  0063f	74 10		 je	 SHORT $LN7@LoadAttr
  00641	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00644	c1 e0 07	 shl	 eax, 7
  00647	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0064a	83 7c 01 20 16	 cmp	 DWORD PTR [ecx+eax+32], 22 ; 00000016H
  0064f	75 54		 jne	 SHORT $LN8@LoadAttr
$LN7@LoadAttr:

; 116  : 				{
; 117  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*30/100;

  00651	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00654	c1 e0 07	 shl	 eax, 7
  00657	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0065a	8b 44 01 2c	 mov	 eax, DWORD PTR [ecx+eax+44]
  0065e	6b c0 1e	 imul	 eax, 30			; 0000001eH
  00661	99		 cdq
  00662	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00667	f7 f9		 idiv	 ecx
  00669	89 45 ec	 mov	 DWORD PTR _modiryvalue$227155[ebp], eax

; 118  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;

  0066c	8b 45 ec	 mov	 eax, DWORD PTR _modiryvalue$227155[ebp]
  0066f	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  00676	99		 cdq
  00677	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0067c	f7 f9		 idiv	 ecx
  0067e	8b 55 ec	 mov	 edx, DWORD PTR _modiryvalue$227155[ebp]
  00681	2b d0		 sub	 edx, eax
  00683	89 55 ec	 mov	 DWORD PTR _modiryvalue$227155[ebp], edx

; 119  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;

  00686	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00689	c1 e0 07	 shl	 eax, 7
  0068c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0068f	8b 54 01 2c	 mov	 edx, DWORD PTR [ecx+eax+44]
  00693	2b 55 ec	 sub	 edx, DWORD PTR _modiryvalue$227155[ebp]
  00696	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00699	c1 e0 07	 shl	 eax, 7
  0069c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0069f	89 54 01 2c	 mov	 DWORD PTR [ecx+eax+44], edx

; 120  : 				}
; 121  : 				else

  006a3	eb 4c		 jmp	 SHORT $LN6@LoadAttr
$LN8@LoadAttr:

; 122  : 				{
; 123  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp/2;

  006a5	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  006a8	c1 e0 07	 shl	 eax, 7
  006ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ae	8b 44 01 2c	 mov	 eax, DWORD PTR [ecx+eax+44]
  006b2	99		 cdq
  006b3	2b c2		 sub	 eax, edx
  006b5	d1 f8		 sar	 eax, 1
  006b7	89 45 e8	 mov	 DWORD PTR _modiryvalue$227157[ebp], eax

; 124  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;

  006ba	8b 45 e8	 mov	 eax, DWORD PTR _modiryvalue$227157[ebp]
  006bd	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  006c4	99		 cdq
  006c5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  006ca	f7 f9		 idiv	 ecx
  006cc	8b 55 e8	 mov	 edx, DWORD PTR _modiryvalue$227157[ebp]
  006cf	2b d0		 sub	 edx, eax
  006d1	89 55 e8	 mov	 DWORD PTR _modiryvalue$227157[ebp], edx

; 125  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;

  006d4	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  006d7	c1 e0 07	 shl	 eax, 7
  006da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006dd	8b 54 01 2c	 mov	 edx, DWORD PTR [ecx+eax+44]
  006e1	2b 55 e8	 sub	 edx, DWORD PTR _modiryvalue$227157[ebp]
  006e4	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  006e7	c1 e0 07	 shl	 eax, 7
  006ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ed	89 54 01 2c	 mov	 DWORD PTR [ecx+eax+44], edx
$LN6@LoadAttr:

; 126  : 				}
; 127  : 			}
; 128  : 
; 129  : 			if ( this->m_MonsterAttr[n].m_Level  <= 19 && this->m_MonsterAttr[n].m_Index  < 50 )

  006f1	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  006f4	c1 e0 07	 shl	 eax, 7
  006f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006fa	83 7c 01 20 13	 cmp	 DWORD PTR [ecx+eax+32], 19 ; 00000013H
  006ff	0f 8f a9 01 00
	00		 jg	 $LN2@LoadAttr
  00705	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00708	c1 e0 07	 shl	 eax, 7
  0070b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0070e	83 7c 01 04 32	 cmp	 DWORD PTR [ecx+eax+4], 50 ; 00000032H
  00713	0f 8d 95 01 00
	00		 jge	 $LN2@LoadAttr

; 130  : 			{
; 131  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 132  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 133  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 134  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 135  : 					 this->m_MonsterAttr[n].m_Level == 19 )

  00719	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0071c	c1 e0 07	 shl	 eax, 7
  0071f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00722	83 7c 01 20 0d	 cmp	 DWORD PTR [ecx+eax+32], 13 ; 0000000dH
  00727	74 44		 je	 SHORT $LN3@LoadAttr
  00729	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0072c	c1 e0 07	 shl	 eax, 7
  0072f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00732	83 7c 01 20 0e	 cmp	 DWORD PTR [ecx+eax+32], 14 ; 0000000eH
  00737	74 34		 je	 SHORT $LN3@LoadAttr
  00739	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0073c	c1 e0 07	 shl	 eax, 7
  0073f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00742	83 7c 01 20 11	 cmp	 DWORD PTR [ecx+eax+32], 17 ; 00000011H
  00747	74 24		 je	 SHORT $LN3@LoadAttr
  00749	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0074c	c1 e0 07	 shl	 eax, 7
  0074f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00752	83 7c 01 20 12	 cmp	 DWORD PTR [ecx+eax+32], 18 ; 00000012H
  00757	74 14		 je	 SHORT $LN3@LoadAttr
  00759	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0075c	c1 e0 07	 shl	 eax, 7
  0075f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00762	83 7c 01 20 13	 cmp	 DWORD PTR [ecx+eax+32], 19 ; 00000013H
  00767	0f 85 a9 00 00
	00		 jne	 $LN4@LoadAttr
$LN3@LoadAttr:

; 136  : 				 {
; 137  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin*30/100;

  0076d	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00770	c1 e0 07	 shl	 eax, 7
  00773	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00776	8b 44 01 34	 mov	 eax, DWORD PTR [ecx+eax+52]
  0077a	6b c0 1e	 imul	 eax, 30			; 0000001eH
  0077d	99		 cdq
  0077e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00783	f7 f9		 idiv	 ecx
  00785	89 45 e4	 mov	 DWORD PTR _modiryvaluemin$227161[ebp], eax

; 138  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax*30/100;

  00788	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0078b	c1 e0 07	 shl	 eax, 7
  0078e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00791	8b 44 01 38	 mov	 eax, DWORD PTR [ecx+eax+56]
  00795	6b c0 1e	 imul	 eax, 30			; 0000001eH
  00798	99		 cdq
  00799	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0079e	f7 f9		 idiv	 ecx
  007a0	89 45 e0	 mov	 DWORD PTR _modiryvaluemax$227162[ebp], eax

; 139  : 
; 140  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;

  007a3	8b 45 e4	 mov	 eax, DWORD PTR _modiryvaluemin$227161[ebp]
  007a6	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  007ad	99		 cdq
  007ae	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  007b3	f7 f9		 idiv	 ecx
  007b5	8b 55 e4	 mov	 edx, DWORD PTR _modiryvaluemin$227161[ebp]
  007b8	2b d0		 sub	 edx, eax
  007ba	89 55 e4	 mov	 DWORD PTR _modiryvaluemin$227161[ebp], edx

; 141  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;

  007bd	8b 45 e0	 mov	 eax, DWORD PTR _modiryvaluemax$227162[ebp]
  007c0	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  007c7	99		 cdq
  007c8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  007cd	f7 f9		 idiv	 ecx
  007cf	8b 55 e0	 mov	 edx, DWORD PTR _modiryvaluemax$227162[ebp]
  007d2	2b d0		 sub	 edx, eax
  007d4	89 55 e0	 mov	 DWORD PTR _modiryvaluemax$227162[ebp], edx

; 142  : 
; 143  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;

  007d7	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  007da	c1 e0 07	 shl	 eax, 7
  007dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007e0	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  007e4	2b 55 e4	 sub	 edx, DWORD PTR _modiryvaluemin$227161[ebp]
  007e7	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  007ea	c1 e0 07	 shl	 eax, 7
  007ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007f0	89 54 01 34	 mov	 DWORD PTR [ecx+eax+52], edx

; 144  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;

  007f4	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  007f7	c1 e0 07	 shl	 eax, 7
  007fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007fd	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00801	2b 55 e0	 sub	 edx, DWORD PTR _modiryvaluemax$227162[ebp]
  00804	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00807	c1 e0 07	 shl	 eax, 7
  0080a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0080d	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx

; 145  : 				}
; 146  : 				else

  00811	e9 98 00 00 00	 jmp	 $LN2@LoadAttr
$LN4@LoadAttr:

; 147  : 				{
; 148  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin/2;

  00816	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00819	c1 e0 07	 shl	 eax, 7
  0081c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0081f	8b 44 01 34	 mov	 eax, DWORD PTR [ecx+eax+52]
  00823	99		 cdq
  00824	2b c2		 sub	 eax, edx
  00826	d1 f8		 sar	 eax, 1
  00828	89 45 dc	 mov	 DWORD PTR _modiryvaluemin$227164[ebp], eax

; 149  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax/2;

  0082b	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0082e	c1 e0 07	 shl	 eax, 7
  00831	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00834	8b 44 01 38	 mov	 eax, DWORD PTR [ecx+eax+56]
  00838	99		 cdq
  00839	2b c2		 sub	 eax, edx
  0083b	d1 f8		 sar	 eax, 1
  0083d	89 45 d8	 mov	 DWORD PTR _modiryvaluemax$227165[ebp], eax

; 150  : 
; 151  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;

  00840	8b 45 dc	 mov	 eax, DWORD PTR _modiryvaluemin$227164[ebp]
  00843	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  0084a	99		 cdq
  0084b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00850	f7 f9		 idiv	 ecx
  00852	8b 55 dc	 mov	 edx, DWORD PTR _modiryvaluemin$227164[ebp]
  00855	2b d0		 sub	 edx, eax
  00857	89 55 dc	 mov	 DWORD PTR _modiryvaluemin$227164[ebp], edx

; 152  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;

  0085a	8b 45 d8	 mov	 eax, DWORD PTR _modiryvaluemax$227165[ebp]
  0085d	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  00864	99		 cdq
  00865	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0086a	f7 f9		 idiv	 ecx
  0086c	8b 55 d8	 mov	 edx, DWORD PTR _modiryvaluemax$227165[ebp]
  0086f	2b d0		 sub	 edx, eax
  00871	89 55 d8	 mov	 DWORD PTR _modiryvaluemax$227165[ebp], edx

; 153  : 
; 154  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;

  00874	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00877	c1 e0 07	 shl	 eax, 7
  0087a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0087d	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  00881	2b 55 dc	 sub	 edx, DWORD PTR _modiryvaluemin$227164[ebp]
  00884	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00887	c1 e0 07	 shl	 eax, 7
  0088a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0088d	89 54 01 34	 mov	 DWORD PTR [ecx+eax+52], edx

; 155  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;

  00891	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00894	c1 e0 07	 shl	 eax, 7
  00897	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0089a	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  0089e	2b 55 d8	 sub	 edx, DWORD PTR _modiryvaluemax$227165[ebp]
  008a1	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  008a4	c1 e0 07	 shl	 eax, 7
  008a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008aa	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx
$LN2@LoadAttr:

; 156  : 				}
; 157  : 			}	 
; 158  : 
; 159  : 			n++;

  008ae	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  008b1	83 c0 01	 add	 eax, 1
  008b4	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 160  : 
; 161  : 			if ( n> MAX_MONSTER_TYPE-1 )

  008b7	81 7d f4 ff 03
	00 00		 cmp	 DWORD PTR _n$[ebp], 1023 ; 000003ffH
  008be	7e 2b		 jle	 SHORT $LN1@LoadAttr

; 162  : 			{
; 163  : 				MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  008c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??LoadAttr@CMonsterAttr@@QAEXPAD@Z@4JA
  008c5	83 c0 78	 add	 eax, 120		; 00000078H
  008c8	50		 push	 eax
  008c9	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@DEKCMPMJ@d?3?2projects?2exteam6?43?2source?2gam@
  008ce	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  008d3	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  008d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 164  : 				fclose(SMDFile);

  008db	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008e0	50		 push	 eax
  008e1	e8 00 00 00 00	 call	 _fclose
  008e6	83 c4 04	 add	 esp, 4

; 165  : 				return;

  008e9	eb 13		 jmp	 SHORT $LN18@LoadAttr
$LN1@LoadAttr:

; 166  : 			}
; 167  : 		}
; 168  : 	}

  008eb	e9 f8 f7 ff ff	 jmp	 $LN16@LoadAttr
$LN15@LoadAttr:

; 169  : 
; 170  : 	fclose(SMDFile);

  008f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008f5	50		 push	 eax
  008f6	e8 00 00 00 00	 call	 _fclose
  008fb	83 c4 04	 add	 esp, 4
$LN18@LoadAttr:

; 171  : }

  008fe	5f		 pop	 edi
  008ff	5e		 pop	 esi
  00900	5b		 pop	 ebx
  00901	8b e5		 mov	 esp, ebp
  00903	5d		 pop	 ebp
  00904	c2 04 00	 ret	 4
?LoadAttr@CMonsterAttr@@QAEXPAD@Z ENDP			; CMonsterAttr::LoadAttr
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00910	55		 push	 ebp
  00911	8b ec		 mov	 ebp, esp
  00913	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00919	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0091e	33 c5		 xor	 eax, ebp
  00920	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00923	53		 push	 ebx
  00924	56		 push	 esi
  00925	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00926	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0092d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00932	50		 push	 eax
  00933	e8 00 00 00 00	 call	 _fgetc
  00938	83 c4 04	 add	 esp, 4
  0093b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0093e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00942	83 f9 ff	 cmp	 ecx, -1
  00945	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00947	b8 02 00 00 00	 mov	 eax, 2
  0094c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00951	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00953	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00957	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0095a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0095c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00961	50		 push	 eax
  00962	e8 00 00 00 00	 call	 _fgetc
  00967	83 c4 04	 add	 esp, 4
  0096a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0096d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00971	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00974	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00976	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0097a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0097d	74 1c		 je	 SHORT $LN23@GetToken
  0097f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00983	83 f8 ff	 cmp	 eax, -1
  00986	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00988	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0098d	50		 push	 eax
  0098e	e8 00 00 00 00	 call	 _fgetc
  00993	83 c4 04	 add	 esp, 4
  00996	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00999	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0099b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0099f	83 f8 ff	 cmp	 eax, -1
  009a2	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  009a4	b8 02 00 00 00	 mov	 eax, 2
  009a9	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  009ae	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009b2	50		 push	 eax
  009b3	e8 00 00 00 00	 call	 _isspace
  009b8	83 c4 04	 add	 esp, 4
  009bb	85 c0		 test	 eax, eax
  009bd	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  009c3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009c7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  009cd	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  009d3	83 e9 22	 sub	 ecx, 34			; 00000022H
  009d6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  009dc	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  009e3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  009e9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  009ef	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  009f6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  009fd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00a07	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a0c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00a11	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00a16	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00a20	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a25	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  00a2a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  00a2f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00a39	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a3e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00a43	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00a48	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00a52	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a57	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  00a5c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00a61	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  00a6b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a70	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00a75	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00a7a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00a7f	50		 push	 eax
  00a80	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00a84	51		 push	 ecx
  00a85	e8 00 00 00 00	 call	 _ungetc
  00a8a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  00a8d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00a90	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00a93	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00a98	50		 push	 eax
  00a99	e8 00 00 00 00	 call	 _getc
  00a9e	83 c4 04	 add	 esp, 4
  00aa1	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00aa4	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00aa8	83 f9 ff	 cmp	 ecx, -1
  00aab	74 36		 je	 SHORT $LN12@GetToken
  00aad	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ab1	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00ab4	74 1a		 je	 SHORT $LN11@GetToken
  00ab6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00aba	50		 push	 eax
  00abb	e8 00 00 00 00	 call	 _isdigit
  00ac0	83 c4 04	 add	 esp, 4
  00ac3	85 c0		 test	 eax, eax
  00ac5	75 09		 jne	 SHORT $LN11@GetToken
  00ac7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00acb	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00ace	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00ad0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ad3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00ad6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00ad8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00adb	83 c0 01	 add	 eax, 1
  00ade	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00ae1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00ae3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ae6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00ae9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00aec	50		 push	 eax
  00aed	e8 00 00 00 00	 call	 _atof
  00af2	83 c4 04	 add	 esp, 4
  00af5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  00afb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00b05	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00b0a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  00b0f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00b14	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00b1b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b20	50		 push	 eax
  00b21	e8 00 00 00 00	 call	 _getc
  00b26	83 c4 04	 add	 esp, 4
  00b29	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00b2c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00b30	83 f9 ff	 cmp	 ecx, -1
  00b33	74 1c		 je	 SHORT $LN8@GetToken
  00b35	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b39	83 f8 22	 cmp	 eax, 34			; 00000022H
  00b3c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  00b3e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b41	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00b44	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00b46	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b49	83 c0 01	 add	 eax, 1
  00b4c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  00b4f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00b51	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b55	83 f8 22	 cmp	 eax, 34			; 00000022H
  00b58	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00b5a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b5f	50		 push	 eax
  00b60	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00b64	51		 push	 ecx
  00b65	e8 00 00 00 00	 call	 _ungetc
  00b6a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  00b6d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b70	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00b73	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  00b7d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00b82	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00b87	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  00b8c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b90	50		 push	 eax
  00b91	e8 00 00 00 00	 call	 _isalpha
  00b96	83 c4 04	 add	 esp, 4
  00b99	85 c0		 test	 eax, eax
  00b9b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00ba1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00ba8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00bab	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00bae	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00bb0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00bb3	83 c0 01	 add	 eax, 1
  00bb6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00bb9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00bbe	50		 push	 eax
  00bbf	e8 00 00 00 00	 call	 _getc
  00bc4	83 c4 04	 add	 esp, 4
  00bc7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00bca	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00bce	83 f9 ff	 cmp	 ecx, -1
  00bd1	74 36		 je	 SHORT $LN3@GetToken
  00bd3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00bd7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00bda	74 1a		 je	 SHORT $LN2@GetToken
  00bdc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00be0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00be3	74 11		 je	 SHORT $LN2@GetToken
  00be5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00be9	50		 push	 eax
  00bea	e8 00 00 00 00	 call	 _isalnum
  00bef	83 c4 04	 add	 esp, 4
  00bf2	85 c0		 test	 eax, eax
  00bf4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00bf6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00bf9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00bfc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  00bfe	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c01	83 c0 01	 add	 eax, 1
  00c04	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00c07	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00c09	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c0e	50		 push	 eax
  00c0f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c13	51		 push	 ecx
  00c14	e8 00 00 00 00	 call	 _ungetc
  00c19	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  00c1c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c1f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00c22	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  00c2c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00c31	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00c33	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00c35	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  00c3f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00c44	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00c46	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00c48	5f		 pop	 edi
  00c49	5e		 pop	 esi
  00c4a	5b		 pop	 ebx
  00c4b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c4e	33 cd		 xor	 ecx, ebp
  00c50	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c55	8b e5		 mov	 esp, ebp
  00c57	5d		 pop	 ebp
  00c58	c3		 ret	 0
  00c59	8d 49 00	 npad	 3
$LN35@GetToken:
  00c5c	00 00 00 00	 DD	 $LN10@GetToken
  00c60	00 00 00 00	 DD	 $LN19@GetToken
  00c64	00 00 00 00	 DD	 $LN17@GetToken
  00c68	00 00 00 00	 DD	 $LN14@GetToken
  00c6c	00 00 00 00	 DD	 $LN18@GetToken
  00c70	00 00 00 00	 DD	 $LN16@GetToken
  00c74	00 00 00 00	 DD	 $LN15@GetToken
  00c78	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00c7c	00		 DB	 0
  00c7d	01		 DB	 1
  00c7e	07		 DB	 7
  00c7f	07		 DB	 7
  00c80	07		 DB	 7
  00c81	07		 DB	 7
  00c82	07		 DB	 7
  00c83	07		 DB	 7
  00c84	07		 DB	 7
  00c85	07		 DB	 7
  00c86	02		 DB	 2
  00c87	03		 DB	 3
  00c88	03		 DB	 3
  00c89	07		 DB	 7
  00c8a	03		 DB	 3
  00c8b	03		 DB	 3
  00c8c	03		 DB	 3
  00c8d	03		 DB	 3
  00c8e	03		 DB	 3
  00c8f	03		 DB	 3
  00c90	03		 DB	 3
  00c91	03		 DB	 3
  00c92	03		 DB	 3
  00c93	03		 DB	 3
  00c94	07		 DB	 7
  00c95	04		 DB	 4
  00c96	07		 DB	 7
  00c97	07		 DB	 7
  00c98	07		 DB	 7
  00c99	07		 DB	 7
  00c9a	07		 DB	 7
  00c9b	07		 DB	 7
  00c9c	07		 DB	 7
  00c9d	07		 DB	 7
  00c9e	07		 DB	 7
  00c9f	07		 DB	 7
  00ca0	07		 DB	 7
  00ca1	07		 DB	 7
  00ca2	07		 DB	 7
  00ca3	07		 DB	 7
  00ca4	07		 DB	 7
  00ca5	07		 DB	 7
  00ca6	07		 DB	 7
  00ca7	07		 DB	 7
  00ca8	07		 DB	 7
  00ca9	07		 DB	 7
  00caa	07		 DB	 7
  00cab	07		 DB	 7
  00cac	07		 DB	 7
  00cad	07		 DB	 7
  00cae	07		 DB	 7
  00caf	07		 DB	 7
  00cb0	07		 DB	 7
  00cb1	07		 DB	 7
  00cb2	07		 DB	 7
  00cb3	07		 DB	 7
  00cb4	07		 DB	 7
  00cb5	07		 DB	 7
  00cb6	07		 DB	 7
  00cb7	07		 DB	 7
  00cb8	07		 DB	 7
  00cb9	07		 DB	 7
  00cba	07		 DB	 7
  00cbb	07		 DB	 7
  00cbc	07		 DB	 7
  00cbd	07		 DB	 7
  00cbe	07		 DB	 7
  00cbf	07		 DB	 7
  00cc0	07		 DB	 7
  00cc1	07		 DB	 7
  00cc2	07		 DB	 7
  00cc3	07		 DB	 7
  00cc4	07		 DB	 7
  00cc5	07		 DB	 7
  00cc6	07		 DB	 7
  00cc7	07		 DB	 7
  00cc8	07		 DB	 7
  00cc9	07		 DB	 7
  00cca	07		 DB	 7
  00ccb	07		 DB	 7
  00ccc	07		 DB	 7
  00ccd	07		 DB	 7
  00cce	07		 DB	 7
  00ccf	07		 DB	 7
  00cd0	07		 DB	 7
  00cd1	07		 DB	 7
  00cd2	07		 DB	 7
  00cd3	07		 DB	 7
  00cd4	07		 DB	 7
  00cd5	05		 DB	 5
  00cd6	07		 DB	 7
  00cd7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??LoadAttr@CMonsterAttr@@QAEXPADH@Z@4JA ; `CMonsterAttr::LoadAttr'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
PUBLIC	?LoadAttr@CMonsterAttr@@QAEXPADH@Z		; CMonsterAttr::LoadAttr
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?GetString@CWzMemScript@@QAEPADXZ:PROC		; CWzMemScript::GetString
EXTRN	?GetNumber@CWzMemScript@@QAEHXZ:PROC		; CWzMemScript::GetNumber
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ?__LINE__Var@?1??LoadAttr@CMonsterAttr@@QAEXPADH@Z@4JA
; File d:\projects\exteam6.3\source\gameserver\gameserver\monsterattr.cpp
_DATA	SEGMENT
?__LINE__Var@?1??LoadAttr@CMonsterAttr@@QAEXPADH@Z@4JA DD 0aeH ; `CMonsterAttr::LoadAttr'::`2'::__LINE__Var
_DATA	ENDS
xdata$x	SEGMENT
__unwindtable$?LoadAttr@CMonsterAttr@@QAEXPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadAttr@CMonsterAttr@@QAEXPADH@Z$0
__ehfuncinfo$?LoadAttr@CMonsterAttr@@QAEXPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadAttr@CMonsterAttr@@QAEXPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_n$ = -160						; size = 4
_Token$ = -156						; size = 4
_WzMemScript$ = -152					; size = 132
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LoadAttr@CMonsterAttr@@QAEXPADH@Z PROC			; CMonsterAttr::LoadAttr
; _this$ = ecx

; 174  : {

  00ce0	55		 push	 ebp
  00ce1	8b ec		 mov	 ebp, esp
  00ce3	6a ff		 push	 -1
  00ce5	68 00 00 00 00	 push	 __ehhandler$?LoadAttr@CMonsterAttr@@QAEXPADH@Z
  00cea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00cf0	50		 push	 eax
  00cf1	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00cf7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00cfc	33 c5		 xor	 eax, ebp
  00cfe	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00d01	53		 push	 ebx
  00d02	56		 push	 esi
  00d03	57		 push	 edi
  00d04	50		 push	 eax
  00d05	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00d08	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00d0e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 175  : 	CWzMemScript WzMemScript;

  00d11	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d17	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript
  00d1c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 176  : 	
; 177  : 	WzMemScript.SetBuffer(Buffer, iSize);

  00d23	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00d26	50		 push	 eax
  00d27	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  00d2a	51		 push	 ecx
  00d2b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d31	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 178  : 
; 179  : 	int Token;
; 180  : 	int n=0;

  00d36	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$[ebp], 0
$LN5@LoadAttr@2:

; 181  : 
; 182  : 	while ( true )

  00d40	b8 01 00 00 00	 mov	 eax, 1
  00d45	85 c0		 test	 eax, eax
  00d47	0f 84 b8 05 00
	00		 je	 $LN4@LoadAttr@2

; 183  : 	{
; 184  : 		Token = WzMemScript.GetToken();

  00d4d	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d53	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00d58	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 185  : 
; 186  : 		if ( Token == END )

  00d5e	83 bd 64 ff ff
	ff 02		 cmp	 DWORD PTR _Token$[ebp], 2
  00d65	75 05		 jne	 SHORT $LN3@LoadAttr@2

; 187  : 		{
; 188  : 			break;

  00d67	e9 99 05 00 00	 jmp	 $LN4@LoadAttr@2
$LN3@LoadAttr@2:

; 189  : 		}
; 190  : 
; 191  : 		if ( Token == NUMBER )

  00d6c	83 bd 64 ff ff
	ff 01		 cmp	 DWORD PTR _Token$[ebp], 1
  00d73	0f 85 87 05 00
	00		 jne	 $LN1@LoadAttr@2

; 192  : 		{
; 193  : 			this->m_MonsterAttr[n].m_Index = WzMemScript.GetNumber();					Token = WzMemScript.GetToken();

  00d79	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d7f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00d84	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00d8a	c1 e1 07	 shl	 ecx, 7
  00d8d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00d90	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax
  00d94	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d9a	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00d9f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 194  : 			this->m_MonsterAttr[n].m_Rate = WzMemScript.GetNumber();					Token = WzMemScript.GetToken();

  00da5	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00dab	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00db0	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00db6	c1 e1 07	 shl	 ecx, 7
  00db9	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00dbc	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
  00dc0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00dc6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00dcb	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 195  : 			strcpy(this->m_MonsterAttr[n].m_Name, WzMemScript.GetString());				Token = WzMemScript.GetToken();

  00dd1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00dd7	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  00ddc	50		 push	 eax
  00ddd	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  00de3	c1 e0 07	 shl	 eax, 7
  00de6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00de9	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00ded	52		 push	 edx
  00dee	e8 00 00 00 00	 call	 _strcpy
  00df3	83 c4 08	 add	 esp, 8
  00df6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00dfc	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e01	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 196  : 			this->m_MonsterAttr[n].m_Level = WzMemScript.GetNumber();					Token = WzMemScript.GetToken();

  00e07	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e0d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00e12	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00e18	c1 e1 07	 shl	 ecx, 7
  00e1b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00e1e	89 44 0a 20	 mov	 DWORD PTR [edx+ecx+32], eax
  00e22	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e28	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e2d	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 197  : 			this->m_MonsterAttr[n].m_Hp = WzMemScript.GetNumber();						Token = WzMemScript.GetToken();

  00e33	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e39	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00e3e	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00e44	c1 e1 07	 shl	 ecx, 7
  00e47	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00e4a	89 44 0a 2c	 mov	 DWORD PTR [edx+ecx+44], eax
  00e4e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e54	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e59	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 198  : 			this->m_MonsterAttr[n].m_Mp = WzMemScript.GetNumber();						Token = WzMemScript.GetToken();

  00e5f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e65	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00e6a	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00e70	c1 e1 07	 shl	 ecx, 7
  00e73	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00e76	89 44 0a 30	 mov	 DWORD PTR [edx+ecx+48], eax
  00e7a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e80	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e85	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 199  : 			this->m_MonsterAttr[n].m_DamageMin = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00e8b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e91	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00e96	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00e9c	c1 e1 07	 shl	 ecx, 7
  00e9f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00ea2	89 44 0a 34	 mov	 DWORD PTR [edx+ecx+52], eax
  00ea6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00eac	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00eb1	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 200  : 			this->m_MonsterAttr[n].m_DamageMax = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00eb7	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ebd	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00ec2	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00ec8	c1 e1 07	 shl	 ecx, 7
  00ecb	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00ece	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
  00ed2	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ed8	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00edd	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 201  : 			this->m_MonsterAttr[n].m_Defense = WzMemScript.GetNumber();					Token = WzMemScript.GetToken();

  00ee3	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ee9	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00eee	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00ef4	c1 e1 07	 shl	 ecx, 7
  00ef7	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00efa	89 44 0a 3c	 mov	 DWORD PTR [edx+ecx+60], eax
  00efe	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f04	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f09	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 202  : 			this->m_MonsterAttr[n].m_MagicDefense = WzMemScript.GetNumber();			Token = WzMemScript.GetToken();

  00f0f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f15	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f1a	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00f20	c1 e1 07	 shl	 ecx, 7
  00f23	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00f26	89 44 0a 40	 mov	 DWORD PTR [edx+ecx+64], eax
  00f2a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f30	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f35	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 203  : 			this->m_MonsterAttr[n].m_AttackRating = WzMemScript.GetNumber();			Token = WzMemScript.GetToken();

  00f3b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f41	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f46	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00f4c	c1 e1 07	 shl	 ecx, 7
  00f4f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00f52	89 44 0a 44	 mov	 DWORD PTR [edx+ecx+68], eax
  00f56	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f5c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f61	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 204  : 			this->m_MonsterAttr[n].m_Successfulblocking = WzMemScript.GetNumber();		Token = WzMemScript.GetToken();

  00f67	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f6d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f72	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00f78	c1 e1 07	 shl	 ecx, 7
  00f7b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00f7e	89 44 0a 48	 mov	 DWORD PTR [edx+ecx+72], eax
  00f82	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f88	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f8d	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 205  : 			this->m_MonsterAttr[n].m_MoveRange = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00f93	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f99	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f9e	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00fa4	c1 e1 07	 shl	 ecx, 7
  00fa7	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00faa	89 44 0a 4c	 mov	 DWORD PTR [edx+ecx+76], eax
  00fae	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fb4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00fb9	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 206  : 			this->m_MonsterAttr[n].m_AttackType = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00fbf	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fc5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00fca	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00fd0	c1 e1 07	 shl	 ecx, 7
  00fd3	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00fd6	89 44 0a 54	 mov	 DWORD PTR [edx+ecx+84], eax
  00fda	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fe0	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00fe5	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 207  : 			this->m_MonsterAttr[n].m_AttackRange = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00feb	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ff1	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00ff6	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  00ffc	c1 e1 07	 shl	 ecx, 7
  00fff	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01002	89 44 0a 50	 mov	 DWORD PTR [edx+ecx+80], eax
  01006	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0100c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01011	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 208  : 			this->m_MonsterAttr[n].m_ViewRange = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  01017	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0101d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01022	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  01028	c1 e1 07	 shl	 ecx, 7
  0102b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0102e	89 44 0a 58	 mov	 DWORD PTR [edx+ecx+88], eax
  01032	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01038	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0103d	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 209  : 			this->m_MonsterAttr[n].m_MoveSpeed = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  01043	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01049	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0104e	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  01054	c1 e1 07	 shl	 ecx, 7
  01057	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0105a	89 44 0a 5c	 mov	 DWORD PTR [edx+ecx+92], eax
  0105e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01064	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01069	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 210  : 			this->m_MonsterAttr[n].m_AttackSpeed = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  0106f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01075	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0107a	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  01080	c1 e1 07	 shl	 ecx, 7
  01083	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01086	89 44 0a 60	 mov	 DWORD PTR [edx+ecx+96], eax
  0108a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01090	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01095	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 211  : 			this->m_MonsterAttr[n].m_RegenTime = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  0109b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010a1	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  010a6	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  010ac	c1 e1 07	 shl	 ecx, 7
  010af	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  010b2	89 44 0a 64	 mov	 DWORD PTR [edx+ecx+100], eax
  010b6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010bc	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  010c1	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 212  : 			this->m_MonsterAttr[n].m_Attribute = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  010c7	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010cd	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  010d2	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  010d8	c1 e1 07	 shl	 ecx, 7
  010db	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  010de	89 44 0a 68	 mov	 DWORD PTR [edx+ecx+104], eax
  010e2	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010e8	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  010ed	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 213  : 			this->m_MonsterAttr[n].m_ItemRate = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  010f3	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010f9	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  010fe	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  01104	c1 e1 07	 shl	 ecx, 7
  01107	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0110a	89 44 0a 6c	 mov	 DWORD PTR [edx+ecx+108], eax
  0110e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01114	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01119	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 214  : 			this->m_MonsterAttr[n].m_MoneyRate = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  0111f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01125	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0112a	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  01130	c1 e1 07	 shl	 ecx, 7
  01133	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01136	89 44 0a 70	 mov	 DWORD PTR [edx+ecx+112], eax
  0113a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01140	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01145	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 215  : 			this->m_MonsterAttr[n].m_MaxItemLevel = WzMemScript.GetNumber();			Token = WzMemScript.GetToken();

  0114b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01151	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01156	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  0115c	c1 e1 07	 shl	 ecx, 7
  0115f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01162	89 44 0a 74	 mov	 DWORD PTR [edx+ecx+116], eax
  01166	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0116c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01171	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 216  : 			this->m_MonsterAttr[n].m_MonsterSkill = WzMemScript.GetNumber();			Token = WzMemScript.GetToken();

  01177	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0117d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01182	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  01188	c1 e1 07	 shl	 ecx, 7
  0118b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0118e	89 84 0a 80 00
	00 00		 mov	 DWORD PTR [edx+ecx+128], eax
  01195	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0119b	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  011a0	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 217  : 			this->m_MonsterAttr[n].m_Resistance[R_ICE]  = WzMemScript.GetNumber();		Token = WzMemScript.GetToken();

  011a6	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  011ac	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  011b1	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  011b7	c1 e1 07	 shl	 ecx, 7
  011ba	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  011bd	88 44 0a 78	 mov	 BYTE PTR [edx+ecx+120], al
  011c1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  011c7	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  011cc	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 218  : 			this->m_MonsterAttr[n].m_Resistance[R_POISON] = WzMemScript.GetNumber();	Token = WzMemScript.GetToken();

  011d2	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  011d8	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  011dd	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  011e3	c1 e1 07	 shl	 ecx, 7
  011e6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  011e9	88 44 0a 79	 mov	 BYTE PTR [edx+ecx+121], al
  011ed	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  011f3	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  011f8	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 219  : 			this->m_MonsterAttr[n].m_Resistance[R_LIGHTNING] = WzMemScript.GetNumber();	Token = WzMemScript.GetToken();

  011fe	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01204	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01209	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  0120f	c1 e1 07	 shl	 ecx, 7
  01212	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01215	88 44 0a 7a	 mov	 BYTE PTR [edx+ecx+122], al
  01219	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0121f	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01224	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 220  : 			this->m_MonsterAttr[n].m_Resistance[R_FIRE] = WzMemScript.GetNumber();

  0122a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01230	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01235	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  0123b	c1 e1 07	 shl	 ecx, 7
  0123e	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01241	88 44 0a 7b	 mov	 BYTE PTR [edx+ecx+123], al

; 221  : 
; 222  : 			this->m_MonsterAttr[n].m_Hp = this->m_MonsterAttr[n].m_Hp - (INT)(this->m_MonsterAttr[n].m_Hp / 100.0f * gMonsterHp);

  01245	8b b5 60 ff ff
	ff		 mov	 esi, DWORD PTR _n$[ebp]
  0124b	c1 e6 07	 shl	 esi, 7
  0124e	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  01254	c1 e0 07	 shl	 eax, 7
  01257	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0125a	db 44 01 2c	 fild	 DWORD PTR [ecx+eax+44]
  0125e	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01264	da 0d 00 00 00
	00		 fimul	 DWORD PTR ?gMonsterHp@@3HA ; gMonsterHp
  0126a	e8 00 00 00 00	 call	 __ftol2_sse
  0126f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01272	8b 4c 32 2c	 mov	 ecx, DWORD PTR [edx+esi+44]
  01276	2b c8		 sub	 ecx, eax
  01278	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _n$[ebp]
  0127e	c1 e2 07	 shl	 edx, 7
  01281	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01284	89 4c 10 2c	 mov	 DWORD PTR [eax+edx+44], ecx

; 223  : 
; 224  : 			this->m_MonsterAttr[n].m_iScriptHP = this->m_MonsterAttr[n].m_Hp;

  01288	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  0128e	c1 e0 07	 shl	 eax, 7
  01291	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _n$[ebp]
  01297	c1 e1 07	 shl	 ecx, 7
  0129a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0129d	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  012a0	8b 44 06 2c	 mov	 eax, DWORD PTR [esi+eax+44]
  012a4	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 225  : 
; 226  : #if(!FIX_MONSTER_HP)
; 227  : 
; 228  : 			if ( this->m_MonsterAttr[n].m_Level <= 24 && this->m_MonsterAttr[n].m_Index < 50)
; 229  : 			{
; 230  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 231  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 232  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 233  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 234  : 					 this->m_MonsterAttr[n].m_Level == 19 ||
; 235  : 					 this->m_MonsterAttr[n].m_Level == 24 )
; 236  : 				{
; 237  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*20/100;
; 238  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 239  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 240  : 				}
; 241  : 				else if ( this->m_MonsterAttr[n].m_Level == 20 || this->m_MonsterAttr[n].m_Level == 22 )
; 242  : 				{
; 243  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*30/100;
; 244  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 245  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 246  : 				}
; 247  : 				else
; 248  : 				{
; 249  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp/2;
; 250  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 251  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 252  : 				}
; 253  : 			}
; 254  : 
; 255  : 			if ( this->m_MonsterAttr[n].m_Level  <= 19 && this->m_MonsterAttr[n].m_Index  < 50 )
; 256  : 			{
; 257  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 258  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 259  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 260  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 261  : 					 this->m_MonsterAttr[n].m_Level == 19 )
; 262  : 				 {
; 263  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin*30/100;
; 264  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax*30/100;
; 265  : 
; 266  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;
; 267  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;
; 268  : 
; 269  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;
; 270  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;
; 271  : 				}
; 272  : 				else
; 273  : 				{
; 274  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin/2;
; 275  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax/2;
; 276  : 
; 277  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;
; 278  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;
; 279  : 
; 280  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;
; 281  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;
; 282  : 				}
; 283  : 			}
; 284  : 
; 285  : #endif
; 286  : 
; 287  : 			n++;

  012a8	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  012ae	83 c0 01	 add	 eax, 1
  012b1	89 85 60 ff ff
	ff		 mov	 DWORD PTR _n$[ebp], eax

; 288  : 
; 289  : 			if ( n> MAX_MONSTER_TYPE-1 )

  012b7	81 bd 60 ff ff
	ff ff 03 00 00	 cmp	 DWORD PTR _n$[ebp], 1023 ; 000003ffH
  012c1	7e 3d		 jle	 SHORT $LN1@LoadAttr@2

; 290  : 			{
; 291  : 				MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  012c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??LoadAttr@CMonsterAttr@@QAEXPADH@Z@4JA
  012c8	83 c0 75	 add	 eax, 117		; 00000075H
  012cb	50		 push	 eax
  012cc	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@DEKCMPMJ@d?3?2projects?2exteam6?43?2source?2gam@
  012d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  012d6	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  012db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 292  : 				fclose(SMDFile);

  012de	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  012e3	50		 push	 eax
  012e4	e8 00 00 00 00	 call	 _fclose
  012e9	83 c4 04	 add	 esp, 4

; 293  : 				return;

  012ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  012f3	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  012f9	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  012fe	eb 17		 jmp	 SHORT $LN6@LoadAttr@2
$LN1@LoadAttr@2:

; 294  : 			}
; 295  : 		}
; 296  : 	}

  01300	e9 3b fa ff ff	 jmp	 $LN5@LoadAttr@2
$LN4@LoadAttr@2:

; 297  : }

  01305	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0130c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01312	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
$LN6@LoadAttr@2:
  01317	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0131a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01321	59		 pop	 ecx
  01322	5f		 pop	 edi
  01323	5e		 pop	 esi
  01324	5b		 pop	 ebx
  01325	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01328	33 cd		 xor	 ecx, ebp
  0132a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0132f	8b e5		 mov	 esp, ebp
  01331	5d		 pop	 ebp
  01332	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadAttr@CMonsterAttr@@QAEXPADH@Z$0:
  00000	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LoadAttr@CMonsterAttr@@QAEXPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadAttr@CMonsterAttr@@QAEXPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadAttr@CMonsterAttr@@QAEXPADH@Z ENDP			; CMonsterAttr::LoadAttr
PUBLIC	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@PAD@Z ; CMonsterAttr::GetAttr
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$227190 = -8						; size = 4
_this$ = -4						; size = 4
_zsName$ = 8						; size = 4
?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@PAD@Z PROC ; CMonsterAttr::GetAttr
; _this$ = ecx

; 301  : {

  01340	55		 push	 ebp
  01341	8b ec		 mov	 ebp, esp
  01343	83 ec 48	 sub	 esp, 72			; 00000048H
  01346	53		 push	 ebx
  01347	56		 push	 esi
  01348	57		 push	 edi
  01349	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 	for ( int n = 0; n<MAX_MONSTER_TYPE;n++)

  0134c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$227190[ebp], 0
  01353	eb 09		 jmp	 SHORT $LN4@GetAttr@2
$LN3@GetAttr@2:
  01355	8b 45 f8	 mov	 eax, DWORD PTR _n$227190[ebp]
  01358	83 c0 01	 add	 eax, 1
  0135b	89 45 f8	 mov	 DWORD PTR _n$227190[ebp], eax
$LN4@GetAttr@2:
  0135e	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _n$227190[ebp], 1024 ; 00000400H
  01365	7d 2f		 jge	 SHORT $LN2@GetAttr@2

; 303  : 	{
; 304  : 		if ( !strcmp(this->m_MonsterAttr[n].m_Name,zsName) )

  01367	8b 45 08	 mov	 eax, DWORD PTR _zsName$[ebp]
  0136a	50		 push	 eax
  0136b	8b 4d f8	 mov	 ecx, DWORD PTR _n$227190[ebp]
  0136e	c1 e1 07	 shl	 ecx, 7
  01371	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01374	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  01378	50		 push	 eax
  01379	e8 00 00 00 00	 call	 _strcmp
  0137e	83 c4 08	 add	 esp, 8
  01381	85 c0		 test	 eax, eax
  01383	75 0f		 jne	 SHORT $LN1@GetAttr@2

; 305  : 		{
; 306  : 			return &this->m_MonsterAttr[n];

  01385	8b 45 f8	 mov	 eax, DWORD PTR _n$227190[ebp]
  01388	c1 e0 07	 shl	 eax, 7
  0138b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0138e	8d 44 01 04	 lea	 eax, DWORD PTR [ecx+eax+4]
  01392	eb 04		 jmp	 SHORT $LN5@GetAttr@2
$LN1@GetAttr@2:

; 307  : 		}
; 308  : 	}

  01394	eb bf		 jmp	 SHORT $LN3@GetAttr@2
$LN2@GetAttr@2:

; 309  : 
; 310  : 	return NULL;

  01396	33 c0		 xor	 eax, eax
$LN5@GetAttr@2:

; 311  : }

  01398	5f		 pop	 edi
  01399	5e		 pop	 esi
  0139a	5b		 pop	 ebx
  0139b	8b e5		 mov	 esp, ebp
  0139d	5d		 pop	 ebp
  0139e	c2 04 00	 ret	 4
?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@PAD@Z ENDP ; CMonsterAttr::GetAttr
_TEXT	ENDS
END
