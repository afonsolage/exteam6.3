; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\CashLotterySystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CCashLotterySystem@@6B@			; CCashLotterySystem::`vftable'
PUBLIC	??0CCashLotterySystem@@QAE@XZ			; CCashLotterySystem::CCashLotterySystem
PUBLIC	??_R4CCashLotterySystem@@6B@			; CCashLotterySystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCashLotterySystem@@@8			; CCashLotterySystem `RTTI Type Descriptor'
PUBLIC	??_R3CCashLotterySystem@@8			; CCashLotterySystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCashLotterySystem@@8			; CCashLotterySystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCashLotterySystem@@8		; CCashLotterySystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1TRandomPoolMgr@@UAE@XZ:PROC			; TRandomPoolMgr::~TRandomPoolMgr
EXTRN	??0TRandomPoolMgr@@QAE@XZ:PROC			; TRandomPoolMgr::TRandomPoolMgr
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCashLotterySystem@@UAEPAXI@Z:PROC		; CCashLotterySystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCashLotterySystem@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\cashlotterysystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCashLotterySystem@@8 DD FLAT:??_R0?AVCCashLotterySystem@@@8 ; CCashLotterySystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCashLotterySystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CCashLotterySystem@@8
rdata$r	SEGMENT
??_R2CCashLotterySystem@@8 DD FLAT:??_R1A@?0A@EA@CCashLotterySystem@@8 ; CCashLotterySystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCashLotterySystem@@8
rdata$r	SEGMENT
??_R3CCashLotterySystem@@8 DD 00H			; CCashLotterySystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCashLotterySystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCashLotterySystem@@@8
_DATA	SEGMENT
??_R0?AVCCashLotterySystem@@@8 DD FLAT:??_7type_info@@6B@ ; CCashLotterySystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCashLotterySystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCashLotterySystem@@6B@
rdata$r	SEGMENT
??_R4CCashLotterySystem@@6B@ DD 00H			; CCashLotterySystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCashLotterySystem@@@8
	DD	FLAT:??_R3CCashLotterySystem@@8
rdata$r	ENDS
;	COMDAT ??_7CCashLotterySystem@@6B@
CONST	SEGMENT
??_7CCashLotterySystem@@6B@ DD FLAT:??_R4CCashLotterySystem@@6B@ ; CCashLotterySystem::`vftable'
	DD	FLAT:??_ECCashLotterySystem@@UAEPAXI@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CCashLotterySystem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$1
__ehfuncinfo$??0CCashLotterySystem@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCashLotterySystem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCashLotterySystem@@QAE@XZ PROC			; CCashLotterySystem::CCashLotterySystem
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCashLotterySystem@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCashLotterySystem@@6B@
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 04	 add	 ecx, 4
  0003a	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0004c	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00051	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	83 c1 34	 add	 ecx, 52			; 00000034H
  0005b	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr

; 14   : 
; 15   : }

  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00011	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??0CCashLotterySystem@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCashLotterySystem@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCashLotterySystem@@QAE@XZ ENDP			; CCashLotterySystem::CCashLotterySystem
PUBLIC	??1CCashLotterySystem@@UAE@XZ			; CCashLotterySystem::~CCashLotterySystem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCCashLotterySystem@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCashLotterySystem@@UAEPAXI@Z PROC			; CCashLotterySystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CCashLotterySystem@@UAE@XZ ; CCashLotterySystem::~CCashLotterySystem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCCashLotterySystem@@UAEPAXI@Z ENDP			; CCashLotterySystem::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$??1CCashLotterySystem@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCashLotterySystem@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCashLotterySystem@@UAE@XZ$1
__ehfuncinfo$??1CCashLotterySystem@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCashLotterySystem@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCashLotterySystem@@UAE@XZ PROC			; CCashLotterySystem::~CCashLotterySystem
; _this$ = ecx

; 18   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	6a ff		 push	 -1
  00085	68 00 00 00 00	 push	 __ehhandler$??1CCashLotterySystem@@UAE@XZ
  0008a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00090	50		 push	 eax
  00091	83 ec 44	 sub	 esp, 68			; 00000044H
  00094	53		 push	 ebx
  00095	56		 push	 esi
  00096	57		 push	 edi
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0009c	33 c5		 xor	 eax, ebp
  0009e	50		 push	 eax
  0009f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  000a2	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  000a8	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  000ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCashLotterySystem@@6B@
  000b4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 19   : 
; 20   : }

  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	83 c1 34	 add	 ecx, 52			; 00000034H
  000c1	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  000c6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ca	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000d0	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  000d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000dc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	83 c1 04	 add	 ecx, 4
  000e2	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  000e7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f1	59		 pop	 ecx
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CCashLotterySystem@@UAE@XZ$0:
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 04	 add	 ecx, 4
  00037	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??1CCashLotterySystem@@UAE@XZ$1:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00042	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??1CCashLotterySystem@@UAE@XZ:
  00047	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004e	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00051	33 c8		 xor	 ecx, eax
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CCashLotterySystem@@UAE@XZ
  0005d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CCashLotterySystem@@UAE@XZ ENDP			; CCashLotterySystem::~CCashLotterySystem
PUBLIC	?Initialize@CCashLotterySystem@@QAEXXZ		; CCashLotterySystem::Initialize
EXTRN	?InitPool@TRandomPoolMgr@@QAEXXZ:PROC		; TRandomPoolMgr::InitPool
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_j$219268 = -16						; size = 4
_i$219264 = -12						; size = 4
_i$219260 = -8						; size = 4
_this$ = -4						; size = 4
?Initialize@CCashLotterySystem@@QAEXXZ PROC		; CCashLotterySystem::Initialize
; _this$ = ecx

; 23   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	83 ec 50	 sub	 esp, 80			; 00000050H
  00106	53		 push	 ebx
  00107	56		 push	 esi
  00108	57		 push	 edi
  00109	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	for ( int i=0;i<MAX_LOTTERY_ITEM_CATEGORY;i++)

  0010c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$219260[ebp], 0
  00113	eb 09		 jmp	 SHORT $LN9@Initialize
$LN8@Initialize:
  00115	8b 45 f8	 mov	 eax, DWORD PTR _i$219260[ebp]
  00118	83 c0 01	 add	 eax, 1
  0011b	89 45 f8	 mov	 DWORD PTR _i$219260[ebp], eax
$LN9@Initialize:
  0011e	83 7d f8 17	 cmp	 DWORD PTR _i$219260[ebp], 23 ; 00000017H
  00122	7d 60		 jge	 SHORT $LN7@Initialize

; 25   : 	{
; 26   : 		this->LotteryItemListCount[i] = 0;

  00124	8b 45 f8	 mov	 eax, DWORD PTR _i$219260[ebp]
  00127	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	c7 44 81 54 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+84], 0

; 27   : 		this->LotteryItemOptionRate[i].iSkillOptionRate = 0;

  00132	8b 45 f8	 mov	 eax, DWORD PTR _i$219260[ebp]
  00135	c1 e0 04	 shl	 eax, 4
  00138	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	c7 84 01 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+176], 0

; 28   : 		this->LotteryItemOptionRate[i].iLuckOptionRate = 0;

  00146	8b 45 f8	 mov	 eax, DWORD PTR _i$219260[ebp]
  00149	c1 e0 04	 shl	 eax, 4
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	c7 84 01 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+180], 0

; 29   : 		this->LotteryItemOptionRate[i].iAddOptionRate = 0;

  0015a	8b 45 f8	 mov	 eax, DWORD PTR _i$219260[ebp]
  0015d	c1 e0 04	 shl	 eax, 4
  00160	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00163	c7 84 01 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+184], 0

; 30   : 		this->LotteryItemOptionRate[i].iExOptionRate =0 ;

  0016e	8b 45 f8	 mov	 eax, DWORD PTR _i$219260[ebp]
  00171	c1 e0 04	 shl	 eax, 4
  00174	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	c7 84 01 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+188], 0

; 31   : 	}

  00182	eb 91		 jmp	 SHORT $LN8@Initialize
$LN7@Initialize:

; 32   : 
; 33   : 	for (int i=0;i<MAX_LOTTERY_ITEM_CATEGORY;i++)

  00184	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$219264[ebp], 0
  0018b	eb 09		 jmp	 SHORT $LN6@Initialize
$LN5@Initialize:
  0018d	8b 45 f4	 mov	 eax, DWORD PTR _i$219264[ebp]
  00190	83 c0 01	 add	 eax, 1
  00193	89 45 f4	 mov	 DWORD PTR _i$219264[ebp], eax
$LN6@Initialize:
  00196	83 7d f4 17	 cmp	 DWORD PTR _i$219264[ebp], 23 ; 00000017H
  0019a	0f 8d 1d 01 00
	00		 jge	 $LN4@Initialize

; 34   : 	{
; 35   : 		for ( int j=0;j<MAX_LOTTERY_ITEM_COUNT;j++)

  001a0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$219268[ebp], 0
  001a7	eb 09		 jmp	 SHORT $LN3@Initialize
$LN2@Initialize:
  001a9	8b 45 f0	 mov	 eax, DWORD PTR _j$219268[ebp]
  001ac	83 c0 01	 add	 eax, 1
  001af	89 45 f0	 mov	 DWORD PTR _j$219268[ebp], eax
$LN3@Initialize:
  001b2	81 7d f0 82 00
	00 00		 cmp	 DWORD PTR _j$219268[ebp], 130 ; 00000082H
  001b9	0f 8d f9 00 00
	00		 jge	 $LN1@Initialize

; 36   : 		{
; 37   : 			this->LotteryItemList[i][j].btItemType = -1;

  001bf	8b 45 f4	 mov	 eax, DWORD PTR _i$219264[ebp]
  001c2	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  001c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001cb	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  001d2	8b 45 f0	 mov	 eax, DWORD PTR _j$219268[ebp]
  001d5	6b c0 0a	 imul	 eax, 10			; 0000000aH
  001d8	c6 44 02 02 ff	 mov	 BYTE PTR [edx+eax+2], 255 ; 000000ffH

; 38   : 			this->LotteryItemList[i][j].wItemIndex = -1;

  001dd	8b 45 f4	 mov	 eax, DWORD PTR _i$219264[ebp]
  001e0	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  001e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e9	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  001f0	8b 45 f0	 mov	 eax, DWORD PTR _j$219268[ebp]
  001f3	6b c0 0a	 imul	 eax, 10			; 0000000aH
  001f6	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001fb	66 89 0c 02	 mov	 WORD PTR [edx+eax], cx

; 39   : 			this->LotteryItemList[i][j].btItemLevelMin = -1;

  001ff	8b 45 f4	 mov	 eax, DWORD PTR _i$219264[ebp]
  00202	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020b	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00212	8b 45 f0	 mov	 eax, DWORD PTR _j$219268[ebp]
  00215	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00218	c6 44 02 03 ff	 mov	 BYTE PTR [edx+eax+3], 255 ; 000000ffH

; 40   : 			this->LotteryItemList[i][j].btItemLevelMax = -1;

  0021d	8b 45 f4	 mov	 eax, DWORD PTR _i$219264[ebp]
  00220	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00226	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00229	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00230	8b 45 f0	 mov	 eax, DWORD PTR _j$219268[ebp]
  00233	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00236	c6 44 02 04 ff	 mov	 BYTE PTR [edx+eax+4], 255 ; 000000ffH

; 41   : 			this->LotteryItemList[i][j].btSkillOption = -1;

  0023b	8b 45 f4	 mov	 eax, DWORD PTR _i$219264[ebp]
  0023e	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00244	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00247	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  0024e	8b 45 f0	 mov	 eax, DWORD PTR _j$219268[ebp]
  00251	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00254	c6 44 02 05 ff	 mov	 BYTE PTR [edx+eax+5], 255 ; 000000ffH

; 42   : 			this->LotteryItemList[i][j].btLuckOption = -1;

  00259	8b 45 f4	 mov	 eax, DWORD PTR _i$219264[ebp]
  0025c	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00262	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00265	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  0026c	8b 45 f0	 mov	 eax, DWORD PTR _j$219268[ebp]
  0026f	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00272	c6 44 02 06 ff	 mov	 BYTE PTR [edx+eax+6], 255 ; 000000ffH

; 43   : 			this->LotteryItemList[i][j].btAddOption = -1;

  00277	8b 45 f4	 mov	 eax, DWORD PTR _i$219264[ebp]
  0027a	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00280	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00283	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  0028a	8b 45 f0	 mov	 eax, DWORD PTR _j$219268[ebp]
  0028d	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00290	c6 44 02 07 ff	 mov	 BYTE PTR [edx+eax+7], 255 ; 000000ffH

; 44   : 			this->LotteryItemList[i][j].btExOption = -1;

  00295	8b 45 f4	 mov	 eax, DWORD PTR _i$219264[ebp]
  00298	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  0029e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a1	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  002a8	8b 45 f0	 mov	 eax, DWORD PTR _j$219268[ebp]
  002ab	6b c0 0a	 imul	 eax, 10			; 0000000aH
  002ae	c6 44 02 08 ff	 mov	 BYTE PTR [edx+eax+8], 255 ; 000000ffH

; 45   : 		}

  002b3	e9 f1 fe ff ff	 jmp	 $LN2@Initialize
$LN1@Initialize:

; 46   : 	}

  002b8	e9 d0 fe ff ff	 jmp	 $LN5@Initialize
$LN4@Initialize:

; 47   : 
; 48   : 	this->CategoryRandomPool.InitPool();

  002bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c0	83 c1 04	 add	 ecx, 4
  002c3	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 49   : 	this->AddOptionRandomPool.InitPool();

  002c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002cb	83 c1 1c	 add	 ecx, 28			; 0000001cH
  002ce	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 50   : 	this->ExOptionRandomPool.InitPool();

  002d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d6	83 c1 34	 add	 ecx, 52			; 00000034H
  002d9	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 51   : 	this->iItemMaxHeight = 0;

  002de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002e1	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0

; 52   : 	this->iItemMaxWidth = 0;

  002e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002eb	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 53   : }

  002f2	5f		 pop	 edi
  002f3	5e		 pop	 esi
  002f4	5b		 pop	 ebx
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c3		 ret	 0
?Initialize@CCashLotterySystem@@QAEXXZ ENDP		; CCashLotterySystem::Initialize
_TEXT	ENDS
PUBLIC	?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z	; CCashLotterySystem::InsertItem
PUBLIC	?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z ; CCashLotterySystem::SetitemDropRate
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CCashLotterySystem@@QAEXPAD@Z		; CCashLotterySystem::Load
EXTRN	_fclose:PROC
EXTRN	?AddValue@TRandomPoolMgr@@QAE_NHH@Z:PROC	; TRandomPoolMgr::AddValue
EXTRN	_strcmp:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@
CONST	SEGMENT
??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@ DB '[CashLot'
	DB	'errySystem] Lottery Item List load failed. [%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iExOption$ = -84					; size = 4
_iAddOption$ = -80					; size = 4
_iLuckOption$ = -76					; size = 4
_iSkillOption$ = -72					; size = 4
_iItemLevelMax$ = -68					; size = 4
_iItemLevelMin$ = -64					; size = 4
_iItemIndex$ = -60					; size = 4
_iItemType$ = -56					; size = 4
_iItemExOptionRate$ = -52				; size = 4
_iItemExOption$ = -48					; size = 4
_iItemAddOptionRate$ = -44				; size = 4
_iItemAddOption$ = -40					; size = 4
_iExOptionRate$ = -36					; size = 4
_iAddOptionRate$ = -32					; size = 4
_iLuckOptionRate$ = -28					; size = 4
_iSkillOptionRate$ = -24				; size = 4
_iDropRate$ = -20					; size = 4
_iCategory$ = -16					; size = 4
_iType$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_pchFilename$ = 8					; size = 4
?Load@CCashLotterySystem@@QAEXPAD@Z PROC		; CCashLotterySystem::Load
; _this$ = ecx

; 56   : {

  00300	55		 push	 ebp
  00301	8b ec		 mov	 ebp, esp
  00303	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00309	53		 push	 ebx
  0030a	56		 push	 esi
  0030b	57		 push	 edi
  0030c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 57   : 	this->Initialize();

  0030f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00312	e8 00 00 00 00	 call	 ?Initialize@CCashLotterySystem@@QAEXXZ ; CCashLotterySystem::Initialize

; 58   : 
; 59   : 	SMDToken Token;
; 60   : 	SMDFile = fopen(pchFilename, "r");

  00317	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0031c	8b 45 08	 mov	 eax, DWORD PTR _pchFilename$[ebp]
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 _fopen
  00325	83 c4 08	 add	 esp, 8
  00328	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 61   : 
; 62   : 	if ( SMDFile == NULL )

  0032d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00334	75 16		 jne	 SHORT $LN16@Load

; 63   : 	{
; 64   : 		MsgBox("[CashLoterrySystem] Lottery Item List load failed. [%s]", pchFilename);

  00336	8b 45 08	 mov	 eax, DWORD PTR _pchFilename$[ebp]
  00339	50		 push	 eax
  0033a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@
  0033f	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00344	83 c4 08	 add	 esp, 8

; 65   : 		return;

  00347	e9 6a 03 00 00	 jmp	 $LN17@Load
$LN16@Load:

; 66   : 	}
; 67   : 
; 68   : 	int iType = 0;

  0034c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iType$[ebp], 0

; 69   : 	int iCategory = 0;

  00353	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iCategory$[ebp], 0

; 70   : 	int iDropRate = 0;

  0035a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iDropRate$[ebp], 0

; 71   : 	int iSkillOptionRate = 0;

  00361	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iSkillOptionRate$[ebp], 0

; 72   : 	int iLuckOptionRate = 0;

  00368	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iLuckOptionRate$[ebp], 0

; 73   : 	int iAddOptionRate = 0;

  0036f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iAddOptionRate$[ebp], 0

; 74   : 	int iExOptionRate = 0;

  00376	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iExOptionRate$[ebp], 0

; 75   : 	int iItemAddOption = 0;

  0037d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _iItemAddOption$[ebp], 0

; 76   : 	int iItemAddOptionRate = 0;

  00384	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _iItemAddOptionRate$[ebp], 0

; 77   : 	int iItemExOption = 0;

  0038b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _iItemExOption$[ebp], 0

; 78   : 	int iItemExOptionRate = 0;

  00392	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _iItemExOptionRate$[ebp], 0

; 79   : 	int iItemType = 0;

  00399	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _iItemType$[ebp], 0

; 80   : 	int iItemIndex = 0;

  003a0	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _iItemIndex$[ebp], 0

; 81   : 	int iItemLevelMin = 0;

  003a7	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _iItemLevelMin$[ebp], 0

; 82   : 	int iItemLevelMax = 0;

  003ae	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _iItemLevelMax$[ebp], 0

; 83   : 	int iSkillOption = 0;

  003b5	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _iSkillOption$[ebp], 0

; 84   : 	int iLuckOption = 0;

  003bc	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _iLuckOption$[ebp], 0

; 85   : 	int iAddOption = 0;

  003c3	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _iAddOption$[ebp], 0

; 86   : 	int iExOption = 0;

  003ca	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _iExOption$[ebp], 0
$LN15@Load:

; 87   : 
; 88   : 	while ( true )

  003d1	b8 01 00 00 00	 mov	 eax, 1
  003d6	85 c0		 test	 eax, eax
  003d8	0f 84 ca 02 00
	00		 je	 $LN14@Load

; 89   : 	{
; 90   : 		Token = (SMDToken)GetToken();

  003de	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003e3	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 91   : 
; 92   : 		if (Token == END )

  003e6	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  003ea	75 05		 jne	 SHORT $LN13@Load

; 93   : 		{
; 94   : 			break;

  003ec	e9 b7 02 00 00	 jmp	 $LN14@Load
$LN13@Load:

; 95   : 		}
; 96   : 
; 97   : 		iType = (int)TokenNumber;

  003f1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003f7	e8 00 00 00 00	 call	 __ftol2_sse
  003fc	89 45 f4	 mov	 DWORD PTR _iType$[ebp], eax
$LN12@Load:

; 98   : 
; 99   : 		while ( true )

  003ff	b8 01 00 00 00	 mov	 eax, 1
  00404	85 c0		 test	 eax, eax
  00406	0f 84 97 02 00
	00		 je	 $LN11@Load

; 100  : 		{
; 101  : 			Token = (SMDToken)GetToken();

  0040c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00411	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 102  : 
; 103  : 			if ( Token == END )

  00414	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00418	75 05		 jne	 SHORT $LN10@Load

; 104  : 			{
; 105  : 				break;

  0041a	e9 84 02 00 00	 jmp	 $LN11@Load
$LN10@Load:

; 106  : 			}
; 107  : 
; 108  : 			if ( iType == 0 )

  0041f	83 7d f4 00	 cmp	 DWORD PTR _iType$[ebp], 0
  00423	0f 85 ba 00 00
	00		 jne	 $LN9@Load

; 109  : 			{
; 110  : 				if ( strcmp("end", TokenString) == 0 )

  00429	68 00 00 00 00	 push	 OFFSET _TokenString
  0042e	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00433	e8 00 00 00 00	 call	 _strcmp
  00438	83 c4 08	 add	 esp, 8
  0043b	85 c0		 test	 eax, eax
  0043d	75 05		 jne	 SHORT $LN8@Load

; 111  : 				{
; 112  : 					break;

  0043f	e9 5f 02 00 00	 jmp	 $LN11@Load
$LN8@Load:

; 113  : 				}
; 114  : 
; 115  : 				iCategory = (int)TokenNumber;

  00444	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0044a	e8 00 00 00 00	 call	 __ftol2_sse
  0044f	89 45 f0	 mov	 DWORD PTR _iCategory$[ebp], eax

; 116  : 
; 117  : 				Token = (SMDToken)GetToken();

  00452	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00457	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 118  : 				iDropRate = (int)TokenNumber;

  0045a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00460	e8 00 00 00 00	 call	 __ftol2_sse
  00465	89 45 ec	 mov	 DWORD PTR _iDropRate$[ebp], eax

; 119  : 
; 120  : 				Token = (SMDToken)GetToken();

  00468	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0046d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 121  : 				iSkillOptionRate = (int)TokenNumber;

  00470	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00476	e8 00 00 00 00	 call	 __ftol2_sse
  0047b	89 45 e8	 mov	 DWORD PTR _iSkillOptionRate$[ebp], eax

; 122  : 
; 123  : 				Token = (SMDToken)GetToken();

  0047e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00483	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 124  : 				iLuckOptionRate = (int)TokenNumber;

  00486	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0048c	e8 00 00 00 00	 call	 __ftol2_sse
  00491	89 45 e4	 mov	 DWORD PTR _iLuckOptionRate$[ebp], eax

; 125  : 
; 126  : 				Token = (SMDToken)GetToken();

  00494	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00499	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 127  : 				iAddOptionRate = (int)TokenNumber;

  0049c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004a2	e8 00 00 00 00	 call	 __ftol2_sse
  004a7	89 45 e0	 mov	 DWORD PTR _iAddOptionRate$[ebp], eax

; 128  : 
; 129  : 				Token = (SMDToken)GetToken();

  004aa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004af	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 130  : 				iExOptionRate = (int)TokenNumber;

  004b2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004b8	e8 00 00 00 00	 call	 __ftol2_sse
  004bd	89 45 dc	 mov	 DWORD PTR _iExOptionRate$[ebp], eax

; 131  : 
; 132  : 				this->SetitemDropRate(iCategory-3, iDropRate, iSkillOptionRate, iLuckOptionRate, iAddOptionRate, iExOptionRate);

  004c0	8b 45 dc	 mov	 eax, DWORD PTR _iExOptionRate$[ebp]
  004c3	50		 push	 eax
  004c4	8b 4d e0	 mov	 ecx, DWORD PTR _iAddOptionRate$[ebp]
  004c7	51		 push	 ecx
  004c8	8b 55 e4	 mov	 edx, DWORD PTR _iLuckOptionRate$[ebp]
  004cb	52		 push	 edx
  004cc	8b 45 e8	 mov	 eax, DWORD PTR _iSkillOptionRate$[ebp]
  004cf	50		 push	 eax
  004d0	8b 4d ec	 mov	 ecx, DWORD PTR _iDropRate$[ebp]
  004d3	51		 push	 ecx
  004d4	8b 55 f0	 mov	 edx, DWORD PTR _iCategory$[ebp]
  004d7	83 ea 03	 sub	 edx, 3
  004da	52		 push	 edx
  004db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004de	e8 00 00 00 00	 call	 ?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z ; CCashLotterySystem::SetitemDropRate
$LN9@Load:

; 133  : 			}
; 134  : 
; 135  : 			if ( iType == 1 )

  004e3	83 7d f4 01	 cmp	 DWORD PTR _iType$[ebp], 1
  004e7	75 52		 jne	 SHORT $LN7@Load

; 136  : 			{
; 137  : 				if ( strcmp("end", TokenString) == 0 )

  004e9	68 00 00 00 00	 push	 OFFSET _TokenString
  004ee	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  004f3	e8 00 00 00 00	 call	 _strcmp
  004f8	83 c4 08	 add	 esp, 8
  004fb	85 c0		 test	 eax, eax
  004fd	75 05		 jne	 SHORT $LN6@Load

; 138  : 				{
; 139  : 					break;

  004ff	e9 9f 01 00 00	 jmp	 $LN11@Load
$LN6@Load:

; 140  : 				}
; 141  : 
; 142  : 				iItemAddOption = (int)TokenNumber;

  00504	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0050a	e8 00 00 00 00	 call	 __ftol2_sse
  0050f	89 45 d8	 mov	 DWORD PTR _iItemAddOption$[ebp], eax

; 143  : 
; 144  : 				Token = (SMDToken)GetToken();

  00512	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00517	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 145  : 				iItemAddOptionRate = (int)TokenNumber;

  0051a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00520	e8 00 00 00 00	 call	 __ftol2_sse
  00525	89 45 d4	 mov	 DWORD PTR _iItemAddOptionRate$[ebp], eax

; 146  : 
; 147  : 				this->AddOptionRandomPool.AddValue(iItemAddOption, iItemAddOptionRate);

  00528	8b 45 d4	 mov	 eax, DWORD PTR _iItemAddOptionRate$[ebp]
  0052b	50		 push	 eax
  0052c	8b 4d d8	 mov	 ecx, DWORD PTR _iItemAddOption$[ebp]
  0052f	51		 push	 ecx
  00530	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00533	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00536	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue
$LN7@Load:

; 148  : 			}
; 149  : 
; 150  : 			if ( iType == 2 )

  0053b	83 7d f4 02	 cmp	 DWORD PTR _iType$[ebp], 2
  0053f	75 57		 jne	 SHORT $LN5@Load

; 151  : 			{
; 152  : 				if ( strcmp("end", TokenString) == 0 )

  00541	68 00 00 00 00	 push	 OFFSET _TokenString
  00546	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0054b	e8 00 00 00 00	 call	 _strcmp
  00550	83 c4 08	 add	 esp, 8
  00553	85 c0		 test	 eax, eax
  00555	75 05		 jne	 SHORT $LN4@Load

; 153  : 				{
; 154  : 					break;

  00557	e9 47 01 00 00	 jmp	 $LN11@Load
$LN4@Load:

; 155  : 				}
; 156  : 
; 157  : 				iItemExOption = (int)TokenNumber;

  0055c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00562	e8 00 00 00 00	 call	 __ftol2_sse
  00567	89 45 d0	 mov	 DWORD PTR _iItemExOption$[ebp], eax

; 158  : 
; 159  : 				Token = (SMDToken)GetToken();

  0056a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0056f	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 160  : 				iItemExOptionRate = (int)TokenNumber;

  00572	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00578	e8 00 00 00 00	 call	 __ftol2_sse
  0057d	89 45 cc	 mov	 DWORD PTR _iItemExOptionRate$[ebp], eax

; 161  : 
; 162  : 				this->ExOptionRandomPool.AddValue(iItemExOption, iItemExOptionRate);

  00580	8b 45 cc	 mov	 eax, DWORD PTR _iItemExOptionRate$[ebp]
  00583	50		 push	 eax
  00584	8b 4d d0	 mov	 ecx, DWORD PTR _iItemExOption$[ebp]
  00587	51		 push	 ecx
  00588	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0058b	83 c1 34	 add	 ecx, 52			; 00000034H
  0058e	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue
  00593	e9 06 01 00 00	 jmp	 $LN2@Load
$LN5@Load:

; 163  : 			}
; 164  : 			else if ( iType  >= 3 && iType < 23 )

  00598	83 7d f4 03	 cmp	 DWORD PTR _iType$[ebp], 3
  0059c	0f 8c fc 00 00
	00		 jl	 $LN2@Load
  005a2	83 7d f4 17	 cmp	 DWORD PTR _iType$[ebp], 23 ; 00000017H
  005a6	0f 8d f2 00 00
	00		 jge	 $LN2@Load

; 165  : 			{
; 166  : 				if ( strcmp("end", TokenString) == 0 )

  005ac	68 00 00 00 00	 push	 OFFSET _TokenString
  005b1	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  005b6	e8 00 00 00 00	 call	 _strcmp
  005bb	83 c4 08	 add	 esp, 8
  005be	85 c0		 test	 eax, eax
  005c0	75 05		 jne	 SHORT $LN1@Load

; 167  : 				{
; 168  : 					break;

  005c2	e9 dc 00 00 00	 jmp	 $LN11@Load
$LN1@Load:

; 169  : 				}
; 170  : 
; 171  : 				iItemType = (int)TokenNumber;

  005c7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005cd	e8 00 00 00 00	 call	 __ftol2_sse
  005d2	89 45 c8	 mov	 DWORD PTR _iItemType$[ebp], eax

; 172  : 
; 173  : 				Token = (SMDToken)GetToken();

  005d5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005da	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 174  : 				iItemIndex = (int)TokenNumber;

  005dd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005e3	e8 00 00 00 00	 call	 __ftol2_sse
  005e8	89 45 c4	 mov	 DWORD PTR _iItemIndex$[ebp], eax

; 175  : 
; 176  : 				Token = (SMDToken)GetToken();

  005eb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005f0	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 177  : 				iItemLevelMin = (int)TokenNumber;

  005f3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005f9	e8 00 00 00 00	 call	 __ftol2_sse
  005fe	89 45 c0	 mov	 DWORD PTR _iItemLevelMin$[ebp], eax

; 178  : 
; 179  : 				Token = (SMDToken)GetToken();

  00601	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00606	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 180  : 				iItemLevelMax = (int)TokenNumber;

  00609	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0060f	e8 00 00 00 00	 call	 __ftol2_sse
  00614	89 45 bc	 mov	 DWORD PTR _iItemLevelMax$[ebp], eax

; 181  : 
; 182  : 				Token = (SMDToken)GetToken();

  00617	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0061c	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 183  : 				iSkillOption = (int)TokenNumber;

  0061f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00625	e8 00 00 00 00	 call	 __ftol2_sse
  0062a	89 45 b8	 mov	 DWORD PTR _iSkillOption$[ebp], eax

; 184  : 
; 185  : 				Token = (SMDToken)GetToken();

  0062d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00632	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 186  : 				iLuckOption = (int)TokenNumber;

  00635	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0063b	e8 00 00 00 00	 call	 __ftol2_sse
  00640	89 45 b4	 mov	 DWORD PTR _iLuckOption$[ebp], eax

; 187  : 
; 188  : 				Token = (SMDToken)GetToken();

  00643	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00648	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 189  : 				iAddOption = (int)TokenNumber;

  0064b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00651	e8 00 00 00 00	 call	 __ftol2_sse
  00656	89 45 b0	 mov	 DWORD PTR _iAddOption$[ebp], eax

; 190  : 
; 191  : 				Token = (SMDToken)GetToken();

  00659	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0065e	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 192  : 				iExOption = (int)TokenNumber;

  00661	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00667	e8 00 00 00 00	 call	 __ftol2_sse
  0066c	89 45 ac	 mov	 DWORD PTR _iExOption$[ebp], eax

; 193  : 
; 194  : 				this->InsertItem(iType-3, iItemType, iItemIndex, iItemLevelMin, iItemLevelMax, iSkillOption, iLuckOption, iAddOption, iExOption);

  0066f	8b 45 ac	 mov	 eax, DWORD PTR _iExOption$[ebp]
  00672	50		 push	 eax
  00673	8b 4d b0	 mov	 ecx, DWORD PTR _iAddOption$[ebp]
  00676	51		 push	 ecx
  00677	8b 55 b4	 mov	 edx, DWORD PTR _iLuckOption$[ebp]
  0067a	52		 push	 edx
  0067b	8b 45 b8	 mov	 eax, DWORD PTR _iSkillOption$[ebp]
  0067e	50		 push	 eax
  0067f	8b 4d bc	 mov	 ecx, DWORD PTR _iItemLevelMax$[ebp]
  00682	51		 push	 ecx
  00683	8b 55 c0	 mov	 edx, DWORD PTR _iItemLevelMin$[ebp]
  00686	52		 push	 edx
  00687	8b 45 c4	 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  0068a	50		 push	 eax
  0068b	8b 4d c8	 mov	 ecx, DWORD PTR _iItemType$[ebp]
  0068e	51		 push	 ecx
  0068f	8b 55 f4	 mov	 edx, DWORD PTR _iType$[ebp]
  00692	83 ea 03	 sub	 edx, 3
  00695	52		 push	 edx
  00696	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00699	e8 00 00 00 00	 call	 ?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z ; CCashLotterySystem::InsertItem
$LN2@Load:

; 195  : 			}
; 196  : 		}

  0069e	e9 5c fd ff ff	 jmp	 $LN12@Load
$LN11@Load:

; 197  : 
; 198  : 	}

  006a3	e9 29 fd ff ff	 jmp	 $LN15@Load
$LN14@Load:

; 199  : 
; 200  : 	fclose(SMDFile);

  006a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006ad	50		 push	 eax
  006ae	e8 00 00 00 00	 call	 _fclose
  006b3	83 c4 04	 add	 esp, 4
$LN17@Load:

; 201  : 
; 202  : }

  006b6	5f		 pop	 edi
  006b7	5e		 pop	 esi
  006b8	5b		 pop	 ebx
  006b9	8b e5		 mov	 esp, ebp
  006bb	5d		 pop	 ebp
  006bc	c2 04 00	 ret	 4
?Load@CCashLotterySystem@@QAEXPAD@Z ENDP		; CCashLotterySystem::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  006c0	55		 push	 ebp
  006c1	8b ec		 mov	 ebp, esp
  006c3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  006c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  006ce	33 c5		 xor	 eax, ebp
  006d0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  006d3	53		 push	 ebx
  006d4	56		 push	 esi
  006d5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  006d6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  006dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006e2	50		 push	 eax
  006e3	e8 00 00 00 00	 call	 _fgetc
  006e8	83 c4 04	 add	 esp, 4
  006eb	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  006ee	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006f2	83 f9 ff	 cmp	 ecx, -1
  006f5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  006f7	b8 02 00 00 00	 mov	 eax, 2
  006fc	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00701	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00703	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00707	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0070a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0070c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00711	50		 push	 eax
  00712	e8 00 00 00 00	 call	 _fgetc
  00717	83 c4 04	 add	 esp, 4
  0071a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0071d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00721	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00724	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00726	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0072a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0072d	74 1c		 je	 SHORT $LN23@GetToken
  0072f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00733	83 f8 ff	 cmp	 eax, -1
  00736	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00738	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0073d	50		 push	 eax
  0073e	e8 00 00 00 00	 call	 _fgetc
  00743	83 c4 04	 add	 esp, 4
  00746	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00749	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0074b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0074f	83 f8 ff	 cmp	 eax, -1
  00752	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00754	b8 02 00 00 00	 mov	 eax, 2
  00759	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0075e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00762	50		 push	 eax
  00763	e8 00 00 00 00	 call	 _isspace
  00768	83 c4 04	 add	 esp, 4
  0076b	85 c0		 test	 eax, eax
  0076d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00773	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00777	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0077d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00783	83 e9 22	 sub	 ecx, 34			; 00000022H
  00786	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0078c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00793	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00799	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0079f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  007a6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  007ad	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  007b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007bc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  007c1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  007c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  007d0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007d5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  007da	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  007df	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  007e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007ee	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  007f3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  007f8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00802	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00807	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0080c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00811	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0081b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00820	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00825	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0082a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0082f	50		 push	 eax
  00830	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00834	51		 push	 ecx
  00835	e8 00 00 00 00	 call	 _ungetc
  0083a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0083d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00840	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00843	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00848	50		 push	 eax
  00849	e8 00 00 00 00	 call	 _getc
  0084e	83 c4 04	 add	 esp, 4
  00851	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00854	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00858	83 f9 ff	 cmp	 ecx, -1
  0085b	74 36		 je	 SHORT $LN12@GetToken
  0085d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00861	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00864	74 1a		 je	 SHORT $LN11@GetToken
  00866	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0086a	50		 push	 eax
  0086b	e8 00 00 00 00	 call	 _isdigit
  00870	83 c4 04	 add	 esp, 4
  00873	85 c0		 test	 eax, eax
  00875	75 09		 jne	 SHORT $LN11@GetToken
  00877	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0087b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0087e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00880	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00883	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00886	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00888	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0088b	83 c0 01	 add	 eax, 1
  0088e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00891	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00893	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00896	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00899	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0089c	50		 push	 eax
  0089d	e8 00 00 00 00	 call	 _atof
  008a2	83 c4 04	 add	 esp, 4
  008a5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  008ab	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  008b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008ba	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  008bf	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  008c4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  008cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008d0	50		 push	 eax
  008d1	e8 00 00 00 00	 call	 _getc
  008d6	83 c4 04	 add	 esp, 4
  008d9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  008dc	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008e0	83 f9 ff	 cmp	 ecx, -1
  008e3	74 1c		 je	 SHORT $LN8@GetToken
  008e5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008e9	83 f8 22	 cmp	 eax, 34			; 00000022H
  008ec	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  008ee	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008f1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  008f4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  008f6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008f9	83 c0 01	 add	 eax, 1
  008fc	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  008ff	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00901	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00905	83 f8 22	 cmp	 eax, 34			; 00000022H
  00908	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0090a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0090f	50		 push	 eax
  00910	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00914	51		 push	 ecx
  00915	e8 00 00 00 00	 call	 _ungetc
  0091a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0091d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00920	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00923	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0092d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00932	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00937	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0093c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00940	50		 push	 eax
  00941	e8 00 00 00 00	 call	 _isalpha
  00946	83 c4 04	 add	 esp, 4
  00949	85 c0		 test	 eax, eax
  0094b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00951	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00958	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0095b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0095e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00960	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00963	83 c0 01	 add	 eax, 1
  00966	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00969	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0096e	50		 push	 eax
  0096f	e8 00 00 00 00	 call	 _getc
  00974	83 c4 04	 add	 esp, 4
  00977	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0097a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0097e	83 f9 ff	 cmp	 ecx, -1
  00981	74 36		 je	 SHORT $LN3@GetToken
  00983	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00987	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0098a	74 1a		 je	 SHORT $LN2@GetToken
  0098c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00990	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00993	74 11		 je	 SHORT $LN2@GetToken
  00995	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00999	50		 push	 eax
  0099a	e8 00 00 00 00	 call	 _isalnum
  0099f	83 c4 04	 add	 esp, 4
  009a2	85 c0		 test	 eax, eax
  009a4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  009a6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  009a9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  009ac	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  009ae	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  009b1	83 c0 01	 add	 eax, 1
  009b4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  009b7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  009b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009be	50		 push	 eax
  009bf	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  009c3	51		 push	 ecx
  009c4	e8 00 00 00 00	 call	 _ungetc
  009c9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  009cc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  009cf	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  009d2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  009dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  009e1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  009e3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  009e5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  009ef	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  009f4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  009f6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  009f8	5f		 pop	 edi
  009f9	5e		 pop	 esi
  009fa	5b		 pop	 ebx
  009fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009fe	33 cd		 xor	 ecx, ebp
  00a00	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a05	8b e5		 mov	 esp, ebp
  00a07	5d		 pop	 ebp
  00a08	c3		 ret	 0
  00a09	8d 49 00	 npad	 3
$LN35@GetToken:
  00a0c	00 00 00 00	 DD	 $LN10@GetToken
  00a10	00 00 00 00	 DD	 $LN19@GetToken
  00a14	00 00 00 00	 DD	 $LN17@GetToken
  00a18	00 00 00 00	 DD	 $LN14@GetToken
  00a1c	00 00 00 00	 DD	 $LN18@GetToken
  00a20	00 00 00 00	 DD	 $LN16@GetToken
  00a24	00 00 00 00	 DD	 $LN15@GetToken
  00a28	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00a2c	00		 DB	 0
  00a2d	01		 DB	 1
  00a2e	07		 DB	 7
  00a2f	07		 DB	 7
  00a30	07		 DB	 7
  00a31	07		 DB	 7
  00a32	07		 DB	 7
  00a33	07		 DB	 7
  00a34	07		 DB	 7
  00a35	07		 DB	 7
  00a36	02		 DB	 2
  00a37	03		 DB	 3
  00a38	03		 DB	 3
  00a39	07		 DB	 7
  00a3a	03		 DB	 3
  00a3b	03		 DB	 3
  00a3c	03		 DB	 3
  00a3d	03		 DB	 3
  00a3e	03		 DB	 3
  00a3f	03		 DB	 3
  00a40	03		 DB	 3
  00a41	03		 DB	 3
  00a42	03		 DB	 3
  00a43	03		 DB	 3
  00a44	07		 DB	 7
  00a45	04		 DB	 4
  00a46	07		 DB	 7
  00a47	07		 DB	 7
  00a48	07		 DB	 7
  00a49	07		 DB	 7
  00a4a	07		 DB	 7
  00a4b	07		 DB	 7
  00a4c	07		 DB	 7
  00a4d	07		 DB	 7
  00a4e	07		 DB	 7
  00a4f	07		 DB	 7
  00a50	07		 DB	 7
  00a51	07		 DB	 7
  00a52	07		 DB	 7
  00a53	07		 DB	 7
  00a54	07		 DB	 7
  00a55	07		 DB	 7
  00a56	07		 DB	 7
  00a57	07		 DB	 7
  00a58	07		 DB	 7
  00a59	07		 DB	 7
  00a5a	07		 DB	 7
  00a5b	07		 DB	 7
  00a5c	07		 DB	 7
  00a5d	07		 DB	 7
  00a5e	07		 DB	 7
  00a5f	07		 DB	 7
  00a60	07		 DB	 7
  00a61	07		 DB	 7
  00a62	07		 DB	 7
  00a63	07		 DB	 7
  00a64	07		 DB	 7
  00a65	07		 DB	 7
  00a66	07		 DB	 7
  00a67	07		 DB	 7
  00a68	07		 DB	 7
  00a69	07		 DB	 7
  00a6a	07		 DB	 7
  00a6b	07		 DB	 7
  00a6c	07		 DB	 7
  00a6d	07		 DB	 7
  00a6e	07		 DB	 7
  00a6f	07		 DB	 7
  00a70	07		 DB	 7
  00a71	07		 DB	 7
  00a72	07		 DB	 7
  00a73	07		 DB	 7
  00a74	07		 DB	 7
  00a75	07		 DB	 7
  00a76	07		 DB	 7
  00a77	07		 DB	 7
  00a78	07		 DB	 7
  00a79	07		 DB	 7
  00a7a	07		 DB	 7
  00a7b	07		 DB	 7
  00a7c	07		 DB	 7
  00a7d	07		 DB	 7
  00a7e	07		 DB	 7
  00a7f	07		 DB	 7
  00a80	07		 DB	 7
  00a81	07		 DB	 7
  00a82	07		 DB	 7
  00a83	07		 DB	 7
  00a84	07		 DB	 7
  00a85	05		 DB	 5
  00a86	07		 DB	 7
  00a87	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\cashlotterysystem.cpp
_this$ = -4						; size = 4
_iCategory$ = 8						; size = 4
_iDropRate$ = 12					; size = 4
_iSkillOptionRate$ = 16					; size = 4
_iLuckOptionRate$ = 20					; size = 4
_iAddOptionRate$ = 24					; size = 4
_iExOptionRate$ = 28					; size = 4
?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z PROC	; CCashLotterySystem::SetitemDropRate
; _this$ = ecx

; 205  : {

  00a90	55		 push	 ebp
  00a91	8b ec		 mov	 ebp, esp
  00a93	83 ec 44	 sub	 esp, 68			; 00000044H
  00a96	53		 push	 ebx
  00a97	56		 push	 esi
  00a98	57		 push	 edi
  00a99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 206  : 	this->CategoryRandomPool.AddValue(iCategory, iDropRate);

  00a9c	8b 45 0c	 mov	 eax, DWORD PTR _iDropRate$[ebp]
  00a9f	50		 push	 eax
  00aa0	8b 4d 08	 mov	 ecx, DWORD PTR _iCategory$[ebp]
  00aa3	51		 push	 ecx
  00aa4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aa7	83 c1 04	 add	 ecx, 4
  00aaa	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 207  : 
; 208  : 	this->LotteryItemOptionRate[iCategory].iSkillOptionRate = iSkillOptionRate;

  00aaf	8b 45 08	 mov	 eax, DWORD PTR _iCategory$[ebp]
  00ab2	c1 e0 04	 shl	 eax, 4
  00ab5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ab8	8b 55 10	 mov	 edx, DWORD PTR _iSkillOptionRate$[ebp]
  00abb	89 94 01 b0 00
	00 00		 mov	 DWORD PTR [ecx+eax+176], edx

; 209  : 	this->LotteryItemOptionRate[iCategory].iLuckOptionRate = iLuckOptionRate;

  00ac2	8b 45 08	 mov	 eax, DWORD PTR _iCategory$[ebp]
  00ac5	c1 e0 04	 shl	 eax, 4
  00ac8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00acb	8b 55 14	 mov	 edx, DWORD PTR _iLuckOptionRate$[ebp]
  00ace	89 94 01 b4 00
	00 00		 mov	 DWORD PTR [ecx+eax+180], edx

; 210  : 	this->LotteryItemOptionRate[iCategory].iAddOptionRate = iAddOptionRate;

  00ad5	8b 45 08	 mov	 eax, DWORD PTR _iCategory$[ebp]
  00ad8	c1 e0 04	 shl	 eax, 4
  00adb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ade	8b 55 18	 mov	 edx, DWORD PTR _iAddOptionRate$[ebp]
  00ae1	89 94 01 b8 00
	00 00		 mov	 DWORD PTR [ecx+eax+184], edx

; 211  : 	this->LotteryItemOptionRate[iCategory].iExOptionRate = iExOptionRate;

  00ae8	8b 45 08	 mov	 eax, DWORD PTR _iCategory$[ebp]
  00aeb	c1 e0 04	 shl	 eax, 4
  00aee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00af1	8b 55 1c	 mov	 edx, DWORD PTR _iExOptionRate$[ebp]
  00af4	89 94 01 bc 00
	00 00		 mov	 DWORD PTR [ecx+eax+188], edx

; 212  : }

  00afb	5f		 pop	 edi
  00afc	5e		 pop	 esi
  00afd	5b		 pop	 ebx
  00afe	8b e5		 mov	 esp, ebp
  00b00	5d		 pop	 ebp
  00b01	c2 18 00	 ret	 24			; 00000018H
?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z ENDP	; CCashLotterySystem::SetitemDropRate
_TEXT	ENDS
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iItemWidth$ = -20					; size = 4
_iItemHeight$ = -16					; size = 4
_iItemCode$ = -12					; size = 4
_iItemCount$ = -8					; size = 4
_this$ = -4						; size = 4
_iItemCategory$ = 8					; size = 4
_iItemType$ = 12					; size = 4
_iItemIndex$ = 16					; size = 4
_iItemLevelMin$ = 20					; size = 4
_iItemLevelMax$ = 24					; size = 4
_iSkillOption$ = 28					; size = 4
_iLuckOption$ = 32					; size = 4
_iAddOption$ = 36					; size = 4
_iExOption$ = 40					; size = 4
?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z PROC	; CCashLotterySystem::InsertItem
; _this$ = ecx

; 215  : {

  00b10	55		 push	 ebp
  00b11	8b ec		 mov	 ebp, esp
  00b13	83 ec 54	 sub	 esp, 84			; 00000054H
  00b16	53		 push	 ebx
  00b17	56		 push	 esi
  00b18	57		 push	 edi
  00b19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 216  : 	if ( iItemCategory < 0 || iItemCategory > MAX_LOTTERY_ITEM_CATEGORY )

  00b1c	83 7d 08 00	 cmp	 DWORD PTR _iItemCategory$[ebp], 0
  00b20	7c 06		 jl	 SHORT $LN5@InsertItem
  00b22	83 7d 08 17	 cmp	 DWORD PTR _iItemCategory$[ebp], 23 ; 00000017H
  00b26	7e 07		 jle	 SHORT $LN6@InsertItem
$LN5@InsertItem:

; 217  : 		return FALSE;

  00b28	33 c0		 xor	 eax, eax
  00b2a	e9 a9 01 00 00	 jmp	 $LN7@InsertItem
$LN6@InsertItem:

; 218  : 
; 219  : 	int iItemCount = this->LotteryItemListCount[iItemCategory];

  00b2f	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00b32	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b35	8b 54 81 54	 mov	 edx, DWORD PTR [ecx+eax*4+84]
  00b39	89 55 f8	 mov	 DWORD PTR _iItemCount$[ebp], edx

; 220  : 
; 221  : 	if ( iItemCount < 0 || iItemCount > MAX_LOTTERY_ITEM_COUNT )

  00b3c	83 7d f8 00	 cmp	 DWORD PTR _iItemCount$[ebp], 0
  00b40	7c 09		 jl	 SHORT $LN3@InsertItem
  00b42	81 7d f8 82 00
	00 00		 cmp	 DWORD PTR _iItemCount$[ebp], 130 ; 00000082H
  00b49	7e 07		 jle	 SHORT $LN4@InsertItem
$LN3@InsertItem:

; 222  : 		return FALSE;

  00b4b	33 c0		 xor	 eax, eax
  00b4d	e9 86 01 00 00	 jmp	 $LN7@InsertItem
$LN4@InsertItem:

; 223  : 
; 224  : 	this->LotteryItemList[iItemCategory][iItemCount].btItemType = iItemType;

  00b52	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00b55	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00b5b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b5e	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00b65	8b 45 f8	 mov	 eax, DWORD PTR _iItemCount$[ebp]
  00b68	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00b6b	8a 4d 0c	 mov	 cl, BYTE PTR _iItemType$[ebp]
  00b6e	88 4c 02 02	 mov	 BYTE PTR [edx+eax+2], cl

; 225  : 	this->LotteryItemList[iItemCategory][iItemCount].wItemIndex = iItemIndex;

  00b72	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00b75	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00b7b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b7e	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00b85	8b 45 f8	 mov	 eax, DWORD PTR _iItemCount$[ebp]
  00b88	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00b8b	66 8b 4d 10	 mov	 cx, WORD PTR _iItemIndex$[ebp]
  00b8f	66 89 0c 02	 mov	 WORD PTR [edx+eax], cx

; 226  : 	this->LotteryItemList[iItemCategory][iItemCount].btItemLevelMin = iItemLevelMin;

  00b93	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00b96	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00b9c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b9f	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00ba6	8b 45 f8	 mov	 eax, DWORD PTR _iItemCount$[ebp]
  00ba9	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00bac	8a 4d 14	 mov	 cl, BYTE PTR _iItemLevelMin$[ebp]
  00baf	88 4c 02 03	 mov	 BYTE PTR [edx+eax+3], cl

; 227  : 	this->LotteryItemList[iItemCategory][iItemCount].btItemLevelMax = iItemLevelMax;

  00bb3	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00bb6	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00bbc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bbf	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00bc6	8b 45 f8	 mov	 eax, DWORD PTR _iItemCount$[ebp]
  00bc9	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00bcc	8a 4d 18	 mov	 cl, BYTE PTR _iItemLevelMax$[ebp]
  00bcf	88 4c 02 04	 mov	 BYTE PTR [edx+eax+4], cl

; 228  : 	this->LotteryItemList[iItemCategory][iItemCount].btSkillOption = iSkillOption;

  00bd3	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00bd6	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00bdc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bdf	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00be6	8b 45 f8	 mov	 eax, DWORD PTR _iItemCount$[ebp]
  00be9	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00bec	8a 4d 1c	 mov	 cl, BYTE PTR _iSkillOption$[ebp]
  00bef	88 4c 02 05	 mov	 BYTE PTR [edx+eax+5], cl

; 229  : 	this->LotteryItemList[iItemCategory][iItemCount].btLuckOption = iLuckOption;

  00bf3	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00bf6	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00bfc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bff	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00c06	8b 45 f8	 mov	 eax, DWORD PTR _iItemCount$[ebp]
  00c09	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00c0c	8a 4d 20	 mov	 cl, BYTE PTR _iLuckOption$[ebp]
  00c0f	88 4c 02 06	 mov	 BYTE PTR [edx+eax+6], cl

; 230  : 	this->LotteryItemList[iItemCategory][iItemCount].btAddOption = iAddOption;

  00c13	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00c16	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00c1c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c1f	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00c26	8b 45 f8	 mov	 eax, DWORD PTR _iItemCount$[ebp]
  00c29	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00c2c	8a 4d 24	 mov	 cl, BYTE PTR _iAddOption$[ebp]
  00c2f	88 4c 02 07	 mov	 BYTE PTR [edx+eax+7], cl

; 231  : 	this->LotteryItemList[iItemCategory][iItemCount].btExOption = iExOption;

  00c33	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00c36	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00c3c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c3f	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00c46	8b 45 f8	 mov	 eax, DWORD PTR _iItemCount$[ebp]
  00c49	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00c4c	8a 4d 28	 mov	 cl, BYTE PTR _iExOption$[ebp]
  00c4f	88 4c 02 08	 mov	 BYTE PTR [edx+eax+8], cl

; 232  : 
; 233  : 	int iItemCode = 0;

  00c53	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iItemCode$[ebp], 0

; 234  : 	int iItemHeight = 0;

  00c5a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iItemHeight$[ebp], 0

; 235  : 	int iItemWidth = 0;

  00c61	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iItemWidth$[ebp], 0

; 236  : 
; 237  : 	iItemCode = ITEMGET(iItemType, iItemIndex);

  00c68	8b 45 0c	 mov	 eax, DWORD PTR _iItemType$[ebp]
  00c6b	c1 e0 09	 shl	 eax, 9
  00c6e	03 45 10	 add	 eax, DWORD PTR _iItemIndex$[ebp]
  00c71	89 45 f4	 mov	 DWORD PTR _iItemCode$[ebp], eax

; 238  : 	iItemHeight = ItemAttribute[iItemCode].Height;

  00c74	8b 45 f4	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  00c77	6b c0 70	 imul	 eax, 112		; 00000070H
  00c7a	0f b6 88 24 00
	00 00		 movzx	 ecx, BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+36]
  00c81	89 4d f0	 mov	 DWORD PTR _iItemHeight$[ebp], ecx

; 239  : 	iItemWidth = ItemAttribute[iItemCode].Width;

  00c84	8b 45 f4	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  00c87	6b c0 70	 imul	 eax, 112		; 00000070H
  00c8a	0f b6 88 23 00
	00 00		 movzx	 ecx, BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+35]
  00c91	89 4d ec	 mov	 DWORD PTR _iItemWidth$[ebp], ecx

; 240  : 
; 241  : 	if ( iItemWidth > this->iItemMaxWidth )

  00c94	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c97	8b 4d ec	 mov	 ecx, DWORD PTR _iItemWidth$[ebp]
  00c9a	3b 48 50	 cmp	 ecx, DWORD PTR [eax+80]
  00c9d	7e 09		 jle	 SHORT $LN2@InsertItem

; 242  : 		this->iItemMaxWidth = iItemWidth;

  00c9f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ca2	8b 4d ec	 mov	 ecx, DWORD PTR _iItemWidth$[ebp]
  00ca5	89 48 50	 mov	 DWORD PTR [eax+80], ecx
$LN2@InsertItem:

; 243  : 
; 244  : 	if ( iItemHeight > this->iItemMaxHeight )

  00ca8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00cab	8b 4d f0	 mov	 ecx, DWORD PTR _iItemHeight$[ebp]
  00cae	3b 48 4c	 cmp	 ecx, DWORD PTR [eax+76]
  00cb1	7e 09		 jle	 SHORT $LN1@InsertItem

; 245  : 		this->iItemMaxHeight = iItemHeight;

  00cb3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00cb6	8b 4d f0	 mov	 ecx, DWORD PTR _iItemHeight$[ebp]
  00cb9	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
$LN1@InsertItem:

; 246  : 
; 247  : 	this->LotteryItemListCount[iItemCategory]++;

  00cbc	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00cbf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cc2	8b 54 81 54	 mov	 edx, DWORD PTR [ecx+eax*4+84]
  00cc6	83 c2 01	 add	 edx, 1
  00cc9	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00ccc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ccf	89 54 81 54	 mov	 DWORD PTR [ecx+eax*4+84], edx

; 248  : 
; 249  : 	return TRUE;

  00cd3	b8 01 00 00 00	 mov	 eax, 1
$LN7@InsertItem:

; 250  : }

  00cd8	5f		 pop	 edi
  00cd9	5e		 pop	 esi
  00cda	5b		 pop	 ebx
  00cdb	8b e5		 mov	 esp, ebp
  00cdd	5d		 pop	 ebp
  00cde	c2 24 00	 ret	 36			; 00000024H
?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z ENDP	; CCashLotterySystem::InsertItem
_TEXT	ENDS
PUBLIC	??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z	; CCashLotterySystem::GetItem
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z:PROC	; ItemIsBufExOption
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z:PROC	; CItem::Convert
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	?NewOptionRandEx@@YAEHH@Z:PROC			; NewOptionRandEx
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
EXTRN	_rand:PROC
EXTRN	?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z:PROC ; TRandomPoolMgr::GetRandomValue
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
;	COMDAT ??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@
CONST	SEGMENT
??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@ DB '[C'
	DB	'ashItem][LotteryItem] Get Item Category:%d,Index:%d (Name:%s,'
	DB	'Type:%d,Index:%d,Level:%d) Skill:%d,Luck:%d,AddOption:%d,ExOp'
	DB	'tion(%d,%d,%d,%d,%d,%d)', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_ExOption$ = -312					; size = 8
_iRandomKey$ = -304					; size = 4
_iTemp$ = -300						; size = 4
_btExOptionValue2$ = -295				; size = 1
_btExOptionValue1$ = -294				; size = 1
_btExOptionKey$ = -293					; size = 1
_btExOption$ = -292					; size = 1
_btAddOption$ = -291					; size = 1
_btLuckOption$ = -290					; size = 1
_btSkillOption$ = -289					; size = 1
_iExOptionRate$ = -288					; size = 4
_iAddOptionRate$ = -284					; size = 4
_iLuckOptionRate$ = -280				; size = 4
_iSkillOptionRate$ = -276				; size = 4
_iExOption$ = -272					; size = 4
_iAddOption$ = -268					; size = 4
_iLuckOption$ = -264					; size = 4
_iSkillOption$ = -260					; size = 4
_iItemLevelMax$ = -256					; size = 4
_iItemLevelMin$ = -252					; size = 4
_iItemLevel$ = -248					; size = 4
_iItemIndex$ = -244					; size = 4
_iItemType$ = -240					; size = 4
_iItemNumber$ = -236					; size = 4
_ReturnItem$ = -232					; size = 212
_iItemSelectNumber$ = -20				; size = 4
_iMaxItemCountInCategory$ = -16				; size = 4
_iItemCategory$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpItem$ = 8						; size = 4
?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z PROC	; CCashLotterySystem::GetItem
; _this$ = ecx

; 253  : {

  00cf0	55		 push	 ebp
  00cf1	8b ec		 mov	 ebp, esp
  00cf3	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00cf9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00cfe	33 c5		 xor	 eax, ebp
  00d00	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00d03	53		 push	 ebx
  00d04	56		 push	 esi
  00d05	57		 push	 edi
  00d06	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 254  : 	int iItemCategory = 0;

  00d09	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iItemCategory$[ebp], 0

; 255  : 	int iMaxItemCountInCategory = 0;

  00d10	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iMaxItemCountInCategory$[ebp], 0

; 256  : 	int iItemSelectNumber = 0;

  00d17	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iItemSelectNumber$[ebp], 0

; 257  : 	CItem ReturnItem;

  00d1e	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ReturnItem$[ebp]
  00d24	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 258  : 	int iItemNumber = 0;

  00d29	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _iItemNumber$[ebp], 0

; 259  : 	int iItemType = 0;

  00d33	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _iItemType$[ebp], 0

; 260  : 	int iItemIndex = 0;

  00d3d	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _iItemIndex$[ebp], 0

; 261  : 	int iItemLevel = 0;

  00d47	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _iItemLevel$[ebp], 0

; 262  : 	int iItemLevelMin = 0;

  00d51	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _iItemLevelMin$[ebp], 0

; 263  : 	int iItemLevelMax = 0;

  00d5b	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _iItemLevelMax$[ebp], 0

; 264  : 	int iSkillOption = 0;

  00d65	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iSkillOption$[ebp], 0

; 265  : 	int iLuckOption = 0;

  00d6f	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iLuckOption$[ebp], 0

; 266  : 	int iAddOption = 0;

  00d79	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iAddOption$[ebp], 0

; 267  : 	int iExOption = 0;

  00d83	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iExOption$[ebp], 0

; 268  : 	int iSkillOptionRate = 0;

  00d8d	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iSkillOptionRate$[ebp], 0

; 269  : 	int iLuckOptionRate = 0;

  00d97	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iLuckOptionRate$[ebp], 0

; 270  : 	int iAddOptionRate = 0;

  00da1	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iAddOptionRate$[ebp], 0

; 271  : 	int iExOptionRate = 0;

  00dab	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iExOptionRate$[ebp], 0

; 272  : 	BYTE btSkillOption = 0;

  00db5	c6 85 df fe ff
	ff 00		 mov	 BYTE PTR _btSkillOption$[ebp], 0

; 273  : 	BYTE btLuckOption = 0;

  00dbc	c6 85 de fe ff
	ff 00		 mov	 BYTE PTR _btLuckOption$[ebp], 0

; 274  : 	BYTE btAddOption = 0;

  00dc3	c6 85 dd fe ff
	ff 00		 mov	 BYTE PTR _btAddOption$[ebp], 0

; 275  : 	BYTE btExOption = 0;

  00dca	c6 85 dc fe ff
	ff 00		 mov	 BYTE PTR _btExOption$[ebp], 0

; 276  : 	BYTE btExOptionKey = 0;

  00dd1	c6 85 db fe ff
	ff 00		 mov	 BYTE PTR _btExOptionKey$[ebp], 0

; 277  : 	BYTE btExOptionValue1 = 0;

  00dd8	c6 85 da fe ff
	ff 00		 mov	 BYTE PTR _btExOptionValue1$[ebp], 0

; 278  : 	BYTE btExOptionValue2 = 0;

  00ddf	c6 85 d9 fe ff
	ff 00		 mov	 BYTE PTR _btExOptionValue2$[ebp], 0

; 279  : 	int iTemp = 0;

  00de6	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iTemp$[ebp], 0

; 280  : 	int iRandomKey = 0;

  00df0	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iRandomKey$[ebp], 0

; 281  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 282  : 
; 283  : 	if ( lpItem == NULL )

  00dfa	83 7d 08 00	 cmp	 DWORD PTR _lpItem$[ebp], 0
  00dfe	75 08		 jne	 SHORT $LN21@GetItem

; 284  : 		return -1;

  00e00	83 c8 ff	 or	 eax, -1
  00e03	e9 b6 04 00 00	 jmp	 $LN22@GetItem
$LN21@GetItem:

; 285  : 
; 286  : 	iItemCategory = this->CategoryRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  00e08	6a 01		 push	 1
  00e0a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e0d	83 c1 04	 add	 ecx, 4
  00e10	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  00e15	89 45 f4	 mov	 DWORD PTR _iItemCategory$[ebp], eax

; 287  : 
; 288  : 	if ( iItemCategory < 0 || iItemCategory > MAX_LOTTERY_ITEM_CATEGORY )

  00e18	83 7d f4 00	 cmp	 DWORD PTR _iItemCategory$[ebp], 0
  00e1c	7c 06		 jl	 SHORT $LN19@GetItem
  00e1e	83 7d f4 17	 cmp	 DWORD PTR _iItemCategory$[ebp], 23 ; 00000017H
  00e22	7e 08		 jle	 SHORT $LN20@GetItem
$LN19@GetItem:

; 289  : 		return -1;

  00e24	83 c8 ff	 or	 eax, -1
  00e27	e9 92 04 00 00	 jmp	 $LN22@GetItem
$LN20@GetItem:

; 290  : 
; 291  : 	iMaxItemCountInCategory = this->LotteryItemListCount[iItemCategory];

  00e2c	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00e2f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e32	8b 54 81 54	 mov	 edx, DWORD PTR [ecx+eax*4+84]
  00e36	89 55 f0	 mov	 DWORD PTR _iMaxItemCountInCategory$[ebp], edx

; 292  : 
; 293  : 	if ( iMaxItemCountInCategory <= 0 ||  iMaxItemCountInCategory > MAX_LOTTERY_ITEM_COUNT )

  00e39	83 7d f0 00	 cmp	 DWORD PTR _iMaxItemCountInCategory$[ebp], 0
  00e3d	7e 09		 jle	 SHORT $LN17@GetItem
  00e3f	81 7d f0 82 00
	00 00		 cmp	 DWORD PTR _iMaxItemCountInCategory$[ebp], 130 ; 00000082H
  00e46	7e 08		 jle	 SHORT $LN18@GetItem
$LN17@GetItem:

; 294  : 		return -1;

  00e48	83 c8 ff	 or	 eax, -1
  00e4b	e9 6e 04 00 00	 jmp	 $LN22@GetItem
$LN18@GetItem:

; 295  : 
; 296  : 	iItemSelectNumber = rand() % iMaxItemCountInCategory;

  00e50	e8 00 00 00 00	 call	 _rand
  00e55	99		 cdq
  00e56	f7 7d f0	 idiv	 DWORD PTR _iMaxItemCountInCategory$[ebp]
  00e59	89 55 ec	 mov	 DWORD PTR _iItemSelectNumber$[ebp], edx

; 297  : 
; 298  : 	if ( iItemSelectNumber < 0 ||  iItemSelectNumber > MAX_LOTTERY_ITEM_COUNT )

  00e5c	83 7d ec 00	 cmp	 DWORD PTR _iItemSelectNumber$[ebp], 0
  00e60	7c 09		 jl	 SHORT $LN15@GetItem
  00e62	81 7d ec 82 00
	00 00		 cmp	 DWORD PTR _iItemSelectNumber$[ebp], 130 ; 00000082H
  00e69	7e 08		 jle	 SHORT $LN16@GetItem
$LN15@GetItem:

; 299  : 		return -1;

  00e6b	83 c8 ff	 or	 eax, -1
  00e6e	e9 4b 04 00 00	 jmp	 $LN22@GetItem
$LN16@GetItem:

; 300  : 
; 301  : 	iItemType = this->LotteryItemList[iItemCategory][iItemSelectNumber].btItemType;

  00e73	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00e76	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00e7c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e7f	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00e86	8b 45 ec	 mov	 eax, DWORD PTR _iItemSelectNumber$[ebp]
  00e89	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00e8c	0f b6 4c 02 02	 movzx	 ecx, BYTE PTR [edx+eax+2]
  00e91	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _iItemType$[ebp], ecx

; 302  : 	iItemIndex = this->LotteryItemList[iItemCategory][iItemSelectNumber].wItemIndex;

  00e97	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00e9a	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00ea0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ea3	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00eaa	8b 45 ec	 mov	 eax, DWORD PTR _iItemSelectNumber$[ebp]
  00ead	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00eb0	0f b7 0c 02	 movzx	 ecx, WORD PTR [edx+eax]
  00eb4	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _iItemIndex$[ebp], ecx

; 303  : 	iItemLevelMin = this->LotteryItemList[iItemCategory][iItemSelectNumber].btItemLevelMin;

  00eba	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00ebd	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00ec3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ec6	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00ecd	8b 45 ec	 mov	 eax, DWORD PTR _iItemSelectNumber$[ebp]
  00ed0	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00ed3	0f b6 4c 02 03	 movzx	 ecx, BYTE PTR [edx+eax+3]
  00ed8	89 8d 04 ff ff
	ff		 mov	 DWORD PTR _iItemLevelMin$[ebp], ecx

; 304  : 	iItemLevelMax = this->LotteryItemList[iItemCategory][iItemSelectNumber].btItemLevelMax;

  00ede	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00ee1	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00ee7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00eea	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00ef1	8b 45 ec	 mov	 eax, DWORD PTR _iItemSelectNumber$[ebp]
  00ef4	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00ef7	0f b6 4c 02 04	 movzx	 ecx, BYTE PTR [edx+eax+4]
  00efc	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _iItemLevelMax$[ebp], ecx

; 305  : 	iSkillOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btSkillOption;

  00f02	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00f05	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00f0b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f0e	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00f15	8b 45 ec	 mov	 eax, DWORD PTR _iItemSelectNumber$[ebp]
  00f18	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00f1b	0f b6 4c 02 05	 movzx	 ecx, BYTE PTR [edx+eax+5]
  00f20	89 8d fc fe ff
	ff		 mov	 DWORD PTR _iSkillOption$[ebp], ecx

; 306  : 	iLuckOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btLuckOption;

  00f26	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00f29	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00f2f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f32	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00f39	8b 45 ec	 mov	 eax, DWORD PTR _iItemSelectNumber$[ebp]
  00f3c	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00f3f	0f b6 4c 02 06	 movzx	 ecx, BYTE PTR [edx+eax+6]
  00f44	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _iLuckOption$[ebp], ecx

; 307  : 	iAddOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btAddOption;

  00f4a	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00f4d	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00f53	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f56	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00f5d	8b 45 ec	 mov	 eax, DWORD PTR _iItemSelectNumber$[ebp]
  00f60	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00f63	0f b6 4c 02 07	 movzx	 ecx, BYTE PTR [edx+eax+7]
  00f68	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _iAddOption$[ebp], ecx

; 308  : 	iExOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btExOption;

  00f6e	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00f71	69 c0 14 05 00
	00		 imul	 eax, 1300		; 00000514H
  00f77	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f7a	8d 94 01 20 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+544]
  00f81	8b 45 ec	 mov	 eax, DWORD PTR _iItemSelectNumber$[ebp]
  00f84	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00f87	0f b6 4c 02 08	 movzx	 ecx, BYTE PTR [edx+eax+8]
  00f8c	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _iExOption$[ebp], ecx

; 309  : 
; 310  : 	if ( iItemType == -1 || iItemIndex == -1 || iItemLevelMin == -1 || iItemLevelMax == -1 || iItemLevelMin == -1 || iItemLevelMax == -1 || iSkillOption == -1 || iLuckOption == -1 || iAddOption == -1 || iExOption == -1 )

  00f92	83 bd 10 ff ff
	ff ff		 cmp	 DWORD PTR _iItemType$[ebp], -1
  00f99	74 51		 je	 SHORT $LN13@GetItem
  00f9b	83 bd 0c ff ff
	ff ff		 cmp	 DWORD PTR _iItemIndex$[ebp], -1
  00fa2	74 48		 je	 SHORT $LN13@GetItem
  00fa4	83 bd 04 ff ff
	ff ff		 cmp	 DWORD PTR _iItemLevelMin$[ebp], -1
  00fab	74 3f		 je	 SHORT $LN13@GetItem
  00fad	83 bd 00 ff ff
	ff ff		 cmp	 DWORD PTR _iItemLevelMax$[ebp], -1
  00fb4	74 36		 je	 SHORT $LN13@GetItem
  00fb6	83 bd 04 ff ff
	ff ff		 cmp	 DWORD PTR _iItemLevelMin$[ebp], -1
  00fbd	74 2d		 je	 SHORT $LN13@GetItem
  00fbf	83 bd 00 ff ff
	ff ff		 cmp	 DWORD PTR _iItemLevelMax$[ebp], -1
  00fc6	74 24		 je	 SHORT $LN13@GetItem
  00fc8	83 bd fc fe ff
	ff ff		 cmp	 DWORD PTR _iSkillOption$[ebp], -1
  00fcf	74 1b		 je	 SHORT $LN13@GetItem
  00fd1	83 bd f8 fe ff
	ff ff		 cmp	 DWORD PTR _iLuckOption$[ebp], -1
  00fd8	74 12		 je	 SHORT $LN13@GetItem
  00fda	83 bd f4 fe ff
	ff ff		 cmp	 DWORD PTR _iAddOption$[ebp], -1
  00fe1	74 09		 je	 SHORT $LN13@GetItem
  00fe3	83 bd f0 fe ff
	ff ff		 cmp	 DWORD PTR _iExOption$[ebp], -1
  00fea	75 08		 jne	 SHORT $LN14@GetItem
$LN13@GetItem:

; 311  : 		return -1;

  00fec	83 c8 ff	 or	 eax, -1
  00fef	e9 ca 02 00 00	 jmp	 $LN22@GetItem
$LN14@GetItem:

; 312  : 
; 313  : 	iSkillOptionRate = this->LotteryItemOptionRate[iItemCategory].iSkillOptionRate;

  00ff4	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  00ff7	c1 e0 04	 shl	 eax, 4
  00ffa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ffd	8b 94 01 b0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+176]
  01004	89 95 ec fe ff
	ff		 mov	 DWORD PTR _iSkillOptionRate$[ebp], edx

; 314  : 	iLuckOptionRate = this->LotteryItemOptionRate[iItemCategory].iLuckOptionRate;

  0100a	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  0100d	c1 e0 04	 shl	 eax, 4
  01010	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01013	8b 94 01 b4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+180]
  0101a	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _iLuckOptionRate$[ebp], edx

; 315  : 	iAddOptionRate = this->LotteryItemOptionRate[iItemCategory].iAddOptionRate;

  01020	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  01023	c1 e0 04	 shl	 eax, 4
  01026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01029	8b 94 01 b8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+184]
  01030	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _iAddOptionRate$[ebp], edx

; 316  : 	iExOptionRate = this->LotteryItemOptionRate[iItemCategory].iExOptionRate;

  01036	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  01039	c1 e0 04	 shl	 eax, 4
  0103c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0103f	8b 94 01 bc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+188]
  01046	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _iExOptionRate$[ebp], edx

; 317  : 
; 318  : 	iRandomKey = rand() % (iItemLevelMax - iItemLevelMin + 1);

  0104c	e8 00 00 00 00	 call	 _rand
  01051	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _iItemLevelMax$[ebp]
  01057	2b 8d 04 ff ff
	ff		 sub	 ecx, DWORD PTR _iItemLevelMin$[ebp]
  0105d	83 c1 01	 add	 ecx, 1
  01060	99		 cdq
  01061	f7 f9		 idiv	 ecx
  01063	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _iRandomKey$[ebp], edx

; 319  : 	iItemLevel = iItemLevelMin + iRandomKey;

  01069	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _iItemLevelMin$[ebp]
  0106f	03 85 d0 fe ff
	ff		 add	 eax, DWORD PTR _iRandomKey$[ebp]
  01075	89 85 08 ff ff
	ff		 mov	 DWORD PTR _iItemLevel$[ebp], eax

; 320  : 
; 321  : 	if ( iItemLevel > iItemLevelMax || iItemLevel < iItemLevelMin )

  0107b	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _iItemLevel$[ebp]
  01081	3b 85 00 ff ff
	ff		 cmp	 eax, DWORD PTR _iItemLevelMax$[ebp]
  01087	7f 0e		 jg	 SHORT $LN11@GetItem
  01089	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _iItemLevel$[ebp]
  0108f	3b 85 04 ff ff
	ff		 cmp	 eax, DWORD PTR _iItemLevelMin$[ebp]
  01095	7d 0c		 jge	 SHORT $LN12@GetItem
$LN11@GetItem:

; 322  : 		iItemLevel = iItemLevelMin;

  01097	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _iItemLevelMin$[ebp]
  0109d	89 85 08 ff ff
	ff		 mov	 DWORD PTR _iItemLevel$[ebp], eax
$LN12@GetItem:

; 323  : 
; 324  : 	if ( iSkillOption == 1 )

  010a3	83 bd fc fe ff
	ff 01		 cmp	 DWORD PTR _iSkillOption$[ebp], 1
  010aa	75 29		 jne	 SHORT $LN10@GetItem

; 325  : 	{
; 326  : 		iRandomKey = GetLargeRand() % 1000000;

  010ac	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  010b1	33 d2		 xor	 edx, edx
  010b3	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  010b8	f7 f1		 div	 ecx
  010ba	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _iRandomKey$[ebp], edx

; 327  : 
; 328  : 		if ( iRandomKey < iSkillOptionRate )

  010c0	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _iRandomKey$[ebp]
  010c6	3b 85 ec fe ff
	ff		 cmp	 eax, DWORD PTR _iSkillOptionRate$[ebp]
  010cc	7d 07		 jge	 SHORT $LN10@GetItem

; 329  : 			btSkillOption = 1;

  010ce	c6 85 df fe ff
	ff 01		 mov	 BYTE PTR _btSkillOption$[ebp], 1
$LN10@GetItem:

; 330  : 	}
; 331  : 
; 332  : 	if ( iLuckOption == 1 )

  010d5	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _iLuckOption$[ebp], 1
  010dc	75 29		 jne	 SHORT $LN8@GetItem

; 333  : 	{
; 334  : 		iRandomKey = GetLargeRand() % 1000000;

  010de	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  010e3	33 d2		 xor	 edx, edx
  010e5	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  010ea	f7 f1		 div	 ecx
  010ec	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _iRandomKey$[ebp], edx

; 335  : 
; 336  : 		if ( iRandomKey < iLuckOptionRate )

  010f2	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _iRandomKey$[ebp]
  010f8	3b 85 e8 fe ff
	ff		 cmp	 eax, DWORD PTR _iLuckOptionRate$[ebp]
  010fe	7d 07		 jge	 SHORT $LN8@GetItem

; 337  : 			btLuckOption = 1;

  01100	c6 85 de fe ff
	ff 01		 mov	 BYTE PTR _btLuckOption$[ebp], 1
$LN8@GetItem:

; 338  : 	}
; 339  : 
; 340  : 	if ( iAddOption == 1 )

  01107	83 bd f4 fe ff
	ff 01		 cmp	 DWORD PTR _iAddOption$[ebp], 1
  0110e	75 42		 jne	 SHORT $LN6@GetItem

; 341  : 	{
; 342  : 		iRandomKey = GetLargeRand() % 1000000;

  01110	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  01115	33 d2		 xor	 edx, edx
  01117	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0111c	f7 f1		 div	 ecx
  0111e	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _iRandomKey$[ebp], edx

; 343  : 
; 344  : 		if ( iRandomKey < iAddOptionRate )

  01124	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _iRandomKey$[ebp]
  0112a	3b 85 e4 fe ff
	ff		 cmp	 eax, DWORD PTR _iAddOptionRate$[ebp]
  01130	7d 20		 jge	 SHORT $LN6@GetItem

; 345  : 		{
; 346  : 			btAddOption = this->AddOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  01132	6a 01		 push	 1
  01134	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01137	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0113a	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  0113f	88 85 dd fe ff
	ff		 mov	 BYTE PTR _btAddOption$[ebp], al

; 347  : 			iTemp = btAddOption;

  01145	0f b6 85 dd fe
	ff ff		 movzx	 eax, BYTE PTR _btAddOption$[ebp]
  0114c	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _iTemp$[ebp], eax
$LN6@GetItem:

; 348  : 		}
; 349  : 	}
; 350  : 
; 351  : 	/*if ( iExOption == 1 )
; 352  : 	{
; 353  : 		iRandomKey = GetLargeRand() % 1000000;
; 354  : 
; 355  : 		if ( iRandomKey < iExOptionRate )
; 356  : 		{
; 357  : 			btExOptionValue1 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 358  : 			btExOptionKey =  1 << (int)(btExOptionValue1);
; 359  : 			btExOption |= btExOptionKey;
; 360  : 
; 361  : 			iItemLevel = 0;
; 362  : 
; 363  : 			if ( (rand() % 4) == 0 )
; 364  : 			{
; 365  : 				btExOptionValue2 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 366  : 
; 367  : 				if ( btExOptionValue1 != btExOptionValue2 )
; 368  : 				{
; 369  : 					btExOptionKey =  1 << (int)(btExOptionValue2);
; 370  : 					btExOption |= btExOptionKey;
; 371  : 				}
; 372  : 			}
; 373  : 		}
; 374  : 	}
; 375  : 	//else if ( iExOption == 2 )
; 376  : 	else if ( iExOption >= 2)
; 377  : 	{
; 378  : 		btExOptionValue1 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 379  : 		btExOptionKey =  1 << (int)(btExOptionValue1);
; 380  : 		btExOption |= btExOptionKey;
; 381  : 		iItemLevel = 0;
; 382  : 
; 383  : 		if ( (rand() % 4) == 0 )
; 384  : 		{
; 385  : 			btExOptionValue2 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 386  : 
; 387  : 			if ( btExOptionValue1 != btExOptionValue2 )
; 388  : 			{
; 389  : 				btExOptionKey =  1 << (int)(btExOptionValue2);
; 390  : 				btExOption |= btExOptionKey;
; 391  : 			}
; 392  : 		}
; 393  : 	}*/
; 394  : 
; 395  : 	if(iExOption >= 1)

  01152	83 bd f0 fe ff
	ff 01		 cmp	 DWORD PTR _iExOption$[ebp], 1
  01159	7c 39		 jl	 SHORT $LN4@GetItem

; 396  : 	{
; 397  : 		iRandomKey = GetLargeRand() % 1000000;

  0115b	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  01160	33 d2		 xor	 edx, edx
  01162	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  01167	f7 f1		 div	 ecx
  01169	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _iRandomKey$[ebp], edx

; 398  : 
; 399  : 		if ( iRandomKey < iAddOptionRate )

  0116f	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _iRandomKey$[ebp]
  01175	3b 85 e4 fe ff
	ff		 cmp	 eax, DWORD PTR _iAddOptionRate$[ebp]
  0117b	7d 17		 jge	 SHORT $LN4@GetItem

; 400  : 		{
; 401  : 			btExOption = NewOptionRandEx(0, iExOption);

  0117d	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _iExOption$[ebp]
  01183	50		 push	 eax
  01184	6a 00		 push	 0
  01186	e8 00 00 00 00	 call	 ?NewOptionRandEx@@YAEHH@Z ; NewOptionRandEx
  0118b	83 c4 08	 add	 esp, 8
  0118e	88 85 dc fe ff
	ff		 mov	 BYTE PTR _btExOption$[ebp], al
$LN4@GetItem:

; 402  : 		}
; 403  : 	}
; 404  : 
; 405  : 	if ( btAddOption != iTemp )

  01194	0f b6 85 dd fe
	ff ff		 movzx	 eax, BYTE PTR _btAddOption$[ebp]
  0119b	3b 85 d4 fe ff
	ff		 cmp	 eax, DWORD PTR _iTemp$[ebp]
  011a1	74 07		 je	 SHORT $LN2@GetItem

; 406  : 	{
; 407  : 		btAddOption = 0;

  011a3	c6 85 dd fe ff
	ff 00		 mov	 BYTE PTR _btAddOption$[ebp], 0
$LN2@GetItem:

; 408  : 	}
; 409  : 
; 410  : 	iItemNumber = ItemGetNumberMake(iItemType, iItemIndex);

  011aa	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  011b0	50		 push	 eax
  011b1	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _iItemType$[ebp]
  011b7	51		 push	 ecx
  011b8	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  011bd	83 c4 08	 add	 esp, 8
  011c0	89 85 14 ff ff
	ff		 mov	 DWORD PTR _iItemNumber$[ebp], eax

; 411  : 	lpItem->Convert(iItemNumber, btSkillOption, btLuckOption, btAddOption, btExOption, 0, 0, NULL, 0xFF, 0, CURRENT_DB_VERSION);

  011c6	6a 03		 push	 3
  011c8	6a 00		 push	 0
  011ca	68 ff 00 00 00	 push	 255			; 000000ffH
  011cf	6a 00		 push	 0
  011d1	6a 00		 push	 0
  011d3	6a 00		 push	 0
  011d5	0f b6 85 dc fe
	ff ff		 movzx	 eax, BYTE PTR _btExOption$[ebp]
  011dc	50		 push	 eax
  011dd	0f b6 8d dd fe
	ff ff		 movzx	 ecx, BYTE PTR _btAddOption$[ebp]
  011e4	51		 push	 ecx
  011e5	0f b6 95 de fe
	ff ff		 movzx	 edx, BYTE PTR _btLuckOption$[ebp]
  011ec	52		 push	 edx
  011ed	0f b6 85 df fe
	ff ff		 movzx	 eax, BYTE PTR _btSkillOption$[ebp]
  011f4	50		 push	 eax
  011f5	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _iItemNumber$[ebp]
  011fb	51		 push	 ecx
  011fc	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  011ff	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 412  : 	lpItem->m_Level = iItemLevel;

  01204	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  01207	66 8b 8d 08 ff
	ff ff		 mov	 cx, WORD PTR _iItemLevel$[ebp]
  0120e	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 413  : 
; 414  : 	if ( !lpItem->IsItem() )

  01212	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  01215	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0121a	85 c0		 test	 eax, eax
  0121c	75 08		 jne	 SHORT $LN1@GetItem

; 415  : 		return -1;

  0121e	83 c8 ff	 or	 eax, -1
  01221	e9 98 00 00 00	 jmp	 $LN22@GetItem
$LN1@GetItem:

; 416  : 
; 417  : 	ItemIsBufExOption(ExOption, lpItem);

  01226	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  01229	50		 push	 eax
  0122a	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ExOption$[ebp]
  01230	51		 push	 ecx
  01231	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption
  01236	83 c4 08	 add	 esp, 8

; 418  : 
; 419  : 	LogAddTD("[CashItem][LotteryItem] Get Item Category:%d,Index:%d (Name:%s,Type:%d,Index:%d,Level:%d) Skill:%d,Luck:%d,AddOption:%d,ExOption(%d,%d,%d,%d,%d,%d)",
; 420  : 		iItemCategory, iItemSelectNumber, ItemAttribute[iItemNumber].Name, iItemType,
; 421  : 		iItemIndex, iItemLevel, btSkillOption, btLuckOption, btAddOption, 
; 422  : 		ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5]);

  01239	0f b6 85 cd fe
	ff ff		 movzx	 eax, BYTE PTR _ExOption$[ebp+5]
  01240	50		 push	 eax
  01241	0f b6 8d cc fe
	ff ff		 movzx	 ecx, BYTE PTR _ExOption$[ebp+4]
  01248	51		 push	 ecx
  01249	0f b6 95 cb fe
	ff ff		 movzx	 edx, BYTE PTR _ExOption$[ebp+3]
  01250	52		 push	 edx
  01251	0f b6 85 ca fe
	ff ff		 movzx	 eax, BYTE PTR _ExOption$[ebp+2]
  01258	50		 push	 eax
  01259	0f b6 8d c9 fe
	ff ff		 movzx	 ecx, BYTE PTR _ExOption$[ebp+1]
  01260	51		 push	 ecx
  01261	0f b6 95 c8 fe
	ff ff		 movzx	 edx, BYTE PTR _ExOption$[ebp]
  01268	52		 push	 edx
  01269	0f b6 85 dd fe
	ff ff		 movzx	 eax, BYTE PTR _btAddOption$[ebp]
  01270	50		 push	 eax
  01271	0f b6 8d de fe
	ff ff		 movzx	 ecx, BYTE PTR _btLuckOption$[ebp]
  01278	51		 push	 ecx
  01279	0f b6 95 df fe
	ff ff		 movzx	 edx, BYTE PTR _btSkillOption$[ebp]
  01280	52		 push	 edx
  01281	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _iItemLevel$[ebp]
  01287	50		 push	 eax
  01288	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _iItemIndex$[ebp]
  0128e	51		 push	 ecx
  0128f	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _iItemType$[ebp]
  01295	52		 push	 edx
  01296	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _iItemNumber$[ebp]
  0129c	6b c0 70	 imul	 eax, 112		; 00000070H
  0129f	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  012a4	50		 push	 eax
  012a5	8b 4d ec	 mov	 ecx, DWORD PTR _iItemSelectNumber$[ebp]
  012a8	51		 push	 ecx
  012a9	8b 55 f4	 mov	 edx, DWORD PTR _iItemCategory$[ebp]
  012ac	52		 push	 edx
  012ad	68 00 00 00 00	 push	 OFFSET ??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@
  012b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  012b8	83 c4 40	 add	 esp, 64			; 00000040H

; 423  : 
; 424  : 	return iItemCategory;

  012bb	8b 45 f4	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
$LN22@GetItem:

; 425  : }

  012be	5f		 pop	 edi
  012bf	5e		 pop	 esi
  012c0	5b		 pop	 ebx
  012c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  012c4	33 cd		 xor	 ecx, ebp
  012c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  012cb	8b e5		 mov	 esp, ebp
  012cd	5d		 pop	 ebp
  012ce	c2 04 00	 ret	 4
?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z ENDP	; CCashLotterySystem::GetItem
_TEXT	ENDS
PUBLIC	?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z ; CCashLotterySystem::GetRequireInvenSize
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_piHeight$ = 8						; size = 4
_piWidth$ = 12						; size = 4
?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z PROC ; CCashLotterySystem::GetRequireInvenSize
; _this$ = ecx

; 428  : {

  012e0	55		 push	 ebp
  012e1	8b ec		 mov	 ebp, esp
  012e3	83 ec 44	 sub	 esp, 68			; 00000044H
  012e6	53		 push	 ebx
  012e7	56		 push	 esi
  012e8	57		 push	 edi
  012e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 429  : 	*piHeight = this->iItemMaxHeight;

  012ec	8b 45 08	 mov	 eax, DWORD PTR _piHeight$[ebp]
  012ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012f2	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  012f5	89 10		 mov	 DWORD PTR [eax], edx

; 430  : 	*piWidth  = this->iItemMaxWidth;

  012f7	8b 45 0c	 mov	 eax, DWORD PTR _piWidth$[ebp]
  012fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012fd	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  01300	89 10		 mov	 DWORD PTR [eax], edx

; 431  : }

  01302	5f		 pop	 edi
  01303	5e		 pop	 esi
  01304	5b		 pop	 ebx
  01305	8b e5		 mov	 esp, ebp
  01307	5d		 pop	 ebp
  01308	c2 08 00	 ret	 8
?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z ENDP ; CCashLotterySystem::GetRequireInvenSize
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_CashLotterySystem@@YAXXZ
text$yc	SEGMENT
??__Eg_CashLotterySystem@@YAXXZ PROC			; `dynamic initializer for 'g_CashLotterySystem'', COMDAT

; 10   : CCashLotterySystem g_CashLotterySystem;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashLotterySystem@@3VCCashLotterySystem@@A ; g_CashLotterySystem
  0000e	e8 00 00 00 00	 call	 ??0CCashLotterySystem@@QAE@XZ ; CCashLotterySystem::CCashLotterySystem
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_CashLotterySystem@@YAXXZ ; `dynamic atexit destructor for 'g_CashLotterySystem''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_CashLotterySystem@@YAXXZ ENDP			; `dynamic initializer for 'g_CashLotterySystem''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_CashLotterySystem@@YAXXZ
text$yd	SEGMENT
??__Fg_CashLotterySystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CashLotterySystem'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashLotterySystem@@3VCCashLotterySystem@@A ; g_CashLotterySystem
  0000e	e8 00 00 00 00	 call	 ??1CCashLotterySystem@@UAE@XZ ; CCashLotterySystem::~CCashLotterySystem
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_CashLotterySystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CashLotterySystem''
text$yd	ENDS
PUBLIC	?g_CashLotterySystem@@3VCCashLotterySystem@@A	; g_CashLotterySystem
_BSS	SEGMENT
?g_CashLotterySystem@@3VCCashLotterySystem@@A DB 076ecH DUP (?) ; g_CashLotterySystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CashLotterySystem$initializer$ DD FLAT:??__Eg_CashLotterySystem@@YAXXZ
CRT$XCU	ENDS
END
