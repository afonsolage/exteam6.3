; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\LogToFile.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_03MLIHNEFJ@LOG?$AA@			; `string'
PUBLIC	??_C@_07EIPNPBIJ@LOGDATA?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0CLogToFile@@QAE@QAD0H@Z			; CLogToFile::CLogToFile
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcmp:PROC
;	COMDAT ??_C@_03MLIHNEFJ@LOG?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\logtofile.cpp
CONST	SEGMENT
??_C@_03MLIHNEFJ@LOG?$AA@ DB 'LOG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EIPNPBIJ@LOGDATA?$AA@
CONST	SEGMENT
??_C@_07EIPNPBIJ@LOGDATA?$AA@ DB 'LOGDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_LogFileName$ = 8					; size = 4
_LogDirectoryName$ = 12					; size = 4
_bWithDate$ = 16					; size = 4
??0CLogToFile@@QAE@QAD0H@Z PROC				; CLogToFile::CLogToFile
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 8    : 	if (strcmp(LogFileName, "") == 0)

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00011	8b 45 08	 mov	 eax, DWORD PTR _LogFileName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strcmp
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 16		 jne	 SHORT $LN4@CLogToFile

; 9    : 	{
; 10   : 		strcpy(this->m_szLogFileName , "LOGDATA");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_07EIPNPBIJ@LOGDATA?$AA@
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c0 04	 add	 eax, 4
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _strcpy
  00032	83 c4 08	 add	 esp, 8

; 11   : 	}
; 12   : 	else

  00035	eb 13		 jmp	 SHORT $LN3@CLogToFile
$LN4@CLogToFile:

; 13   : 	{
; 14   : 		strcpy(this->m_szLogFileName , LogFileName);

  00037	8b 45 08	 mov	 eax, DWORD PTR _LogFileName$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _strcpy
  00047	83 c4 08	 add	 esp, 8
$LN3@CLogToFile:

; 15   : 	}
; 16   : 
; 17   : 	
; 18   : 	if (!strcmp(LogDirectoryName, ""))

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0004f	8b 45 0c	 mov	 eax, DWORD PTR _LogDirectoryName$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _strcmp
  00058	83 c4 08	 add	 esp, 8
  0005b	85 c0		 test	 eax, eax
  0005d	75 18		 jne	 SHORT $LN2@CLogToFile

; 19   : 	{
; 20   : 		strcpy(this->m_szLogDirectoryName , "LOG");

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_03MLIHNEFJ@LOG?$AA@
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	05 08 01 00 00	 add	 eax, 264		; 00000108H
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _strcpy
  00072	83 c4 08	 add	 esp, 8

; 21   : 	}
; 22   : 	else

  00075	eb 16		 jmp	 SHORT $LN1@CLogToFile
$LN2@CLogToFile:

; 23   : 	{
; 24   : 		strcpy(this->m_szLogDirectoryName  , LogDirectoryName);

  00077	8b 45 0c	 mov	 eax, DWORD PTR _LogDirectoryName$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _strcpy
  0008a	83 c4 08	 add	 esp, 8
$LN1@CLogToFile:

; 25   : 	}
; 26   : 	
; 27   : 	this->m_bWithDate  = bWithDate;	

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00090	8b 4d 10	 mov	 ecx, DWORD PTR _bWithDate$[ebp]
  00093	89 88 0c 02 01
	00		 mov	 DWORD PTR [eax+66060], ecx

; 28   : 
; 29   : 	CreateDirectory(LogDirectoryName, NULL);

  00099	6a 00		 push	 0
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _LogDirectoryName$[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 30   : 
; 31   : 	InitializeCriticalSection(&this->m_critLogToFile );

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  000ad	50		 push	 eax
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 32   : 	
; 33   : }

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 0c 00	 ret	 12			; 0000000cH
??0CLogToFile@@QAE@QAD0H@Z ENDP				; CLogToFile::CLogToFile
_TEXT	ENDS
PUBLIC	??1CLogToFile@@QAE@XZ				; CLogToFile::~CLogToFile
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLogToFile@@QAE@XZ PROC				; CLogToFile::~CLogToFile
; _this$ = ecx

; 37   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp
  000c3	83 ec 44	 sub	 esp, 68			; 00000044H
  000c6	53		 push	 ebx
  000c7	56		 push	 esi
  000c8	57		 push	 edi
  000c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	DeleteCriticalSection(&this->m_critLogToFile );

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  000d4	50		 push	 eax
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 39   : }

  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
??1CLogToFile@@QAE@XZ ENDP				; CLogToFile::~CLogToFile
_TEXT	ENDS
PUBLIC	??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_02DPNLHKJD@a?$CL?$AA@			; `string'
PUBLIC	??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Output@CLogToFile@@QAAXPADZZ			; CLogToFile::Output
EXTRN	_fclose:PROC
EXTRN	_fprintf:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	_vsprintf:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__except_handler4:PROC
;	COMDAT ??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@ DB '%d:%d:%d  %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNLHKJD@a?$CL?$AA@
CONST	SEGMENT
??_C@_02DPNLHKJD@a?$CL?$AA@ DB 'a+', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@
CONST	SEGMENT
??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@ DB '%'
	DB	's\%s %04d-%02d-%02d_%s.txt', 00H		; `string'
CONST	ENDS
xdata$x	SEGMENT
__sehtable$?Output@CLogToFile@@QAAXPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffffe70H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN10@Output
	DD	FLAT:$LN11@Output
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T227104 = -384						; size = 4
_strSystime$226978 = -316				; size = 16
_szLogFileName$226977 = -300				; size = 260
_iChrWritten$226976 = -40				; size = 4
_argptr$226975 = -36					; size = 4
_EntCrit$ = -29						; size = 1
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_this$ = 8						; size = 4
_fmt$ = 12						; size = 4
?Output@CLogToFile@@QAAXPADZZ PROC			; CLogToFile::Output

; 43   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	6a fe		 push	 -2			; fffffffeH
  000f5	68 00 00 00 00	 push	 OFFSET __sehtable$?Output@CLogToFile@@QAAXPADZZ
  000fa	68 00 00 00 00	 push	 OFFSET __except_handler4
  000ff	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00105	50		 push	 eax
  00106	81 c4 90 fe ff
	ff		 add	 esp, -368		; fffffe90H
  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00111	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00114	33 c5		 xor	 eax, ebp
  00116	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00119	53		 push	 ebx
  0011a	56		 push	 esi
  0011b	57		 push	 edi
  0011c	50		 push	 eax
  0011d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00120	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00126	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 44   : 	bool EntCrit = false;

  00129	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 45   : 	__try

  0012d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 46   : 	{
; 47   : 		va_list argptr;
; 48   : 		int iChrWritten;
; 49   : 		char szLogFileName[260]; // Is StringZero Terminated
; 50   : 
; 51   : 		SYSTEMTIME strSystime;
; 52   : 	
; 53   : 		EnterCriticalSection(&this->m_critLogToFile );

  00134	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00137	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  0013c	50		 push	 eax
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 54   : 		EntCrit = true;

  00143	c6 45 e3 01	 mov	 BYTE PTR _EntCrit$[ebp], 1

; 55   : 
; 56   : 		va_start(argptr, fmt);

  00147	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  0014a	89 45 dc	 mov	 DWORD PTR _argptr$226975[ebp], eax

; 57   : 		iChrWritten=vsprintf(this->m_cBUFFER , fmt, argptr);

  0014d	8b 45 dc	 mov	 eax, DWORD PTR _argptr$226975[ebp]
  00150	50		 push	 eax
  00151	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00154	51		 push	 ecx
  00155	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00158	81 c2 0c 02 00
	00		 add	 edx, 524		; 0000020cH
  0015e	52		 push	 edx
  0015f	e8 00 00 00 00	 call	 _vsprintf
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH
  00167	89 45 d8	 mov	 DWORD PTR _iChrWritten$226976[ebp], eax

; 58   : 		va_end(argptr);

  0016a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _argptr$226975[ebp], 0

; 59   : 
; 60   : 		GetLocalTime(&strSystime);

  00171	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _strSystime$226978[ebp]
  00177	50		 push	 eax
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 61   : 
; 62   : 		wsprintf(szLogFileName, "%s\\%s %04d-%02d-%02d_%s.txt",
; 63   : 			&this->m_szLogDirectoryName[0] , &this->m_szLogFileName [0],
; 64   : 			strSystime.wYear, strSystime.wMonth, strSystime.wDay,
; 65   : 			szServerName);

  0017e	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  00183	0f b7 85 ca fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$226978[ebp+6]
  0018a	50		 push	 eax
  0018b	0f b7 8d c6 fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$226978[ebp+2]
  00192	51		 push	 ecx
  00193	0f b7 95 c4 fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$226978[ebp]
  0019a	52		 push	 edx
  0019b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0019e	83 c0 04	 add	 eax, 4
  001a1	50		 push	 eax
  001a2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001a5	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  001ab	51		 push	 ecx
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@
  001b1	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _szLogFileName$226977[ebp]
  001b7	52		 push	 edx
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  001be	83 c4 20	 add	 esp, 32			; 00000020H

; 66   : 
; 67   : 		if ( (this->m_fLogFile = fopen(szLogFileName, "a+"))==0)

  001c1	68 00 00 00 00	 push	 OFFSET ??_C@_02DPNLHKJD@a?$CL?$AA@
  001c6	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szLogFileName$226977[ebp]
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 _fopen
  001d2	83 c4 08	 add	 esp, 8
  001d5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001d8	89 01		 mov	 DWORD PTR [ecx], eax
  001da	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001dd	83 3a 00	 cmp	 DWORD PTR [edx], 0
  001e0	75 15		 jne	 SHORT $LN5@Output

; 68   : 		{
; 69   : 			LeaveCriticalSection(&this->m_critLogToFile );	

  001e2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001e5	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  001ea	50		 push	 eax
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 70   : 			EntCrit = false;

  001f1	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 71   : 		}
; 72   : 		else

  001f5	eb 7f		 jmp	 SHORT $LN6@Output
$LN5@Output:

; 73   : 		{
; 74   : 			if (this->m_bWithDate ==0)

  001f7	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001fa	83 b8 0c 02 01
	00 00		 cmp	 DWORD PTR [eax+66060], 0
  00201	75 1e		 jne	 SHORT $LN3@Output

; 75   : 			{
; 76   : 				fprintf(this->m_fLogFile , "%s\n", this->m_cBUFFER);

  00203	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00206	05 0c 02 00 00	 add	 eax, 524		; 0000020cH
  0020b	50		 push	 eax
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  00211	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00214	8b 11		 mov	 edx, DWORD PTR [ecx]
  00216	52		 push	 edx
  00217	e8 00 00 00 00	 call	 _fprintf
  0021c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 77   : 			}
; 78   : 			else

  0021f	eb 34		 jmp	 SHORT $LN2@Output
$LN3@Output:

; 79   : 			{
; 80   : 				fprintf(this->m_fLogFile , "%d:%d:%d  %s\n", strSystime.wHour, strSystime.wMinute, strSystime.wSecond, this->m_cBUFFER);

  00221	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00224	05 0c 02 00 00	 add	 eax, 524		; 0000020cH
  00229	50		 push	 eax
  0022a	0f b7 8d d0 fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$226978[ebp+12]
  00231	51		 push	 ecx
  00232	0f b7 95 ce fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$226978[ebp+10]
  00239	52		 push	 edx
  0023a	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$226978[ebp+8]
  00241	50		 push	 eax
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@
  00247	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0024a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024c	52		 push	 edx
  0024d	e8 00 00 00 00	 call	 _fprintf
  00252	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@Output:

; 81   : 			}
; 82   : 			fclose(this->m_fLogFile );

  00255	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00258	8b 08		 mov	 ecx, DWORD PTR [eax]
  0025a	51		 push	 ecx
  0025b	e8 00 00 00 00	 call	 _fclose
  00260	83 c4 04	 add	 esp, 4

; 83   : 
; 84   : 			LeaveCriticalSection(&this->m_critLogToFile );

  00263	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00266	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  0026b	50		 push	 eax
  0026c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 85   : 			EntCrit = false;

  00272	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0
$LN6@Output:

; 86   : 		}
; 87   : 	}

  00276	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0027d	eb 42		 jmp	 SHORT $LN9@Output
$LN10@Output:
$LN15@Output:

; 88   : 	__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  0027f	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00282	8b 08		 mov	 ecx, DWORD PTR [eax]
  00284	8b 11		 mov	 edx, DWORD PTR [ecx]
  00286	89 95 80 fe ff
	ff		 mov	 DWORD PTR $T227104[ebp], edx
  0028c	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR $T227104[ebp]
  00292	33 c9		 xor	 ecx, ecx
  00294	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00299	0f 94 c1	 sete	 cl
  0029c	8b c1		 mov	 eax, ecx
$LN12@Output:
$LN14@Output:
  0029e	c3		 ret	 0
$LN11@Output:
  0029f	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 89   : 	{
; 90   : 		if(EntCrit == true)

  002a2	0f b6 45 e3	 movzx	 eax, BYTE PTR _EntCrit$[ebp]
  002a6	83 f8 01	 cmp	 eax, 1
  002a9	75 0f		 jne	 SHORT $LN1@Output

; 91   : 		{
; 92   : 			LeaveCriticalSection(&this->m_critLogToFile);

  002ab	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  002ae	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  002b3	50		 push	 eax
  002b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@Output:

; 93   : 		}
; 94   : 	}

  002ba	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN9@Output:

; 95   : }

  002c1	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  002c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002cb	59		 pop	 ecx
  002cc	5f		 pop	 edi
  002cd	5e		 pop	 esi
  002ce	5b		 pop	 ebx
  002cf	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d2	33 cd		 xor	 ecx, ebp
  002d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d9	8b e5		 mov	 esp, ebp
  002db	5d		 pop	 ebp
  002dc	c3		 ret	 0
?Output@CLogToFile@@QAAXPADZZ ENDP			; CLogToFile::Output
_TEXT	ENDS
END
