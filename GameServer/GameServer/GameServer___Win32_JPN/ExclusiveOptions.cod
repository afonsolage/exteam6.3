; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ExclusiveOptions.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gExclusiveOptions@@3VcExclusiveOptions@@A	; gExclusiveOptions
_BSS	SEGMENT
?gExclusiveOptions@@3VcExclusiveOptions@@A DB 01348H DUP (?) ; gExclusiveOptions
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0L@DBBEOKP@LOAD?5ERROR?$AA@		; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CE@MCCBECFG@?4?4?2Data?2ExData?2ExclusiveOptions?4@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cExclusiveOptions@@QAEXXZ			; cExclusiveOptions::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	_memset:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\exclusiveoptions.cpp
CONST	SEGMENT
??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DBBEOKP@LOAD?5ERROR?$AA@
CONST	SEGMENT
??_C@_0L@DBBEOKP@LOAD?5ERROR?$AA@ DB 'LOAD ERROR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MCCBECFG@?4?4?2Data?2ExData?2ExclusiveOptions?4@
CONST	SEGMENT
??_C@_0CE@MCCBECFG@?4?4?2Data?2ExData?2ExclusiveOptions?4@ DB '..\Data\Ex'
	DB	'Data\ExclusiveOptions.ini', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$219237 = -320					; size = 12
_n$219233 = -304					; size = 12
_n$219230 = -288					; size = 16
_Flag$ = -272						; size = 4
_Buff$ = -268						; size = 256
_file$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Load@cExclusiveOptions@@QAEXXZ PROC			; cExclusiveOptions::Load
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 15   : 	this->Enable = GetPrivateProfileInt("ExTeam","Enable",0,ExclusiveOptions_DIR);

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MCCBECFG@?4?4?2Data?2ExData?2ExclusiveOptions?4@
  0001e	6a 00		 push	 0
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00030	85 c0		 test	 eax, eax
  00032	0f 95 c0	 setne	 al
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	88 01		 mov	 BYTE PTR [ecx], al

; 16   : 
; 17   : 	ZeroMemory(this->Exclusive,sizeof(Exclusive));

  0003a	68 60 09 00 00	 push	 2400			; 00000960H
  0003f	6a 00		 push	 0
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	83 c0 04	 add	 eax, 4
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18   : 	ZeroMemory(this->ExclusiveInv,sizeof(ExclusiveInv));

  00050	68 60 09 00 00	 push	 2400			; 00000960H
  00055	6a 00		 push	 0
  00057	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	05 64 09 00 00	 add	 eax, 2404		; 00000964H
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _memset
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19   : 
; 20   : 	FILE * file = fopen(ExclusiveOptions_DIR,"r");

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MCCBECFG@?4?4?2Data?2ExData?2ExclusiveOptions?4@
  00072	e8 00 00 00 00	 call	 _fopen
  00077	83 c4 08	 add	 esp, 8
  0007a	89 45 f4	 mov	 DWORD PTR _file$[ebp], eax

; 21   : 
; 22   : 	if(file == NULL)

  0007d	83 7d f4 00	 cmp	 DWORD PTR _file$[ebp], 0
  00081	75 1a		 jne	 SHORT $LN12@Load

; 23   : 	{
; 24   : 		MessageBoxA(0,ExclusiveOptions_DIR,"LOAD ERROR",0);

  00083	6a 00		 push	 0
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DBBEOKP@LOAD?5ERROR?$AA@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MCCBECFG@?4?4?2Data?2ExData?2ExclusiveOptions?4@
  0008f	6a 00		 push	 0
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 25   : 		this->Enable = false;

  00097	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN12@Load:

; 26   : 	}
; 27   : 
; 28   : 	if(!this->Enable) return;

  0009d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000a3	85 c9		 test	 ecx, ecx
  000a5	75 05		 jne	 SHORT $LN11@Load
  000a7	e9 75 03 00 00	 jmp	 $LN13@Load
$LN11@Load:

; 29   : 
; 30   : 	char Buff[256];
; 31   : 	int Flag = 0;

  000ac	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0

; 32   : 
; 33   : 	this->Count = 0;

  000b6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	c7 80 40 13 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4928], 0

; 34   : 	this->CountInv = 0;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	c7 80 44 13 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4932], 0

; 35   : #ifdef EXCLUSIVE_AMYLET
; 36   : 	if(g_ExLicense.CheckUser(eExUB::ulasevich) || g_ExLicense.CheckUser(eExUB::Local3) || g_ExLicense.CheckUser(eExUB::Local) || g_ExLicense.CheckUser(eExUB::ulasevich2))

  000d0	6a 17		 push	 23			; 00000017H
  000d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000d7	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000dc	0f b6 c0	 movzx	 eax, al
  000df	85 c0		 test	 eax, eax
  000e1	75 39		 jne	 SHORT $LN9@Load
  000e3	6a 1c		 push	 28			; 0000001cH
  000e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000ea	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000ef	0f b6 c0	 movzx	 eax, al
  000f2	85 c0		 test	 eax, eax
  000f4	75 26		 jne	 SHORT $LN9@Load
  000f6	6a 00		 push	 0
  000f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000fd	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00102	0f b6 c0	 movzx	 eax, al
  00105	85 c0		 test	 eax, eax
  00107	75 13		 jne	 SHORT $LN9@Load
  00109	6a 24		 push	 36			; 00000024H
  0010b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00110	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00115	0f b6 c0	 movzx	 eax, al
  00118	85 c0		 test	 eax, eax
  0011a	74 0d		 je	 SHORT $LN8@Load
$LN9@Load:

; 37   : 	{
; 38   : 		this->CountInvTime = 0;

  0011c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	c7 80 3c 13 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4924], 0
$LN8@Load:

; 39   : 	}
; 40   : #endif
; 41   : 
; 42   : 	while(!feof(file))

  00129	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _feof
  00132	83 c4 04	 add	 esp, 4
  00135	85 c0		 test	 eax, eax
  00137	0f 85 d8 02 00
	00		 jne	 $LN7@Load

; 43   : 	{
; 44   : 		fgets(Buff,256,file);

  0013d	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00140	50		 push	 eax
  00141	68 00 01 00 00	 push	 256			; 00000100H
  00146	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 _fgets
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH

; 45   : 		if(Ex_IsBadFileLine(Buff, Flag))

  00155	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  0015b	50		 push	 eax
  0015c	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  00168	83 c4 08	 add	 esp, 8
  0016b	0f b6 d0	 movzx	 edx, al
  0016e	85 d2		 test	 edx, edx
  00170	74 02		 je	 SHORT $LN6@Load

; 46   : 			continue;

  00172	eb b5		 jmp	 SHORT $LN8@Load
$LN6@Load:

; 47   : 		if(Flag == 1)

  00174	83 bd f0 fe ff
	ff 01		 cmp	 DWORD PTR _Flag$[ebp], 1
  0017b	0f 85 af 00 00
	00		 jne	 $LN5@Load

; 48   : 		{
; 49   : 			int n[4];
; 50   : 			sscanf(Buff, "%d %d %d %d" , &n[0], &n[1], &n[2], &n[3]);

  00181	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$219230[ebp+12]
  00187	50		 push	 eax
  00188	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219230[ebp+8]
  0018e	51		 push	 ecx
  0018f	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$219230[ebp+4]
  00195	52		 push	 edx
  00196	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$219230[ebp]
  0019c	50		 push	 eax
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  001a2	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  001a8	51		 push	 ecx
  001a9	e8 00 00 00 00	 call	 _sscanf
  001ae	83 c4 18	 add	 esp, 24			; 00000018H

; 51   : 			this->Exclusive[this->Count].Type = n[0];

  001b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b4	8b 88 40 13 00
	00		 mov	 ecx, DWORD PTR [eax+4928]
  001ba	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  001bd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001c0	66 8b 85 e0 fe
	ff ff		 mov	 ax, WORD PTR _n$219230[ebp]
  001c7	66 89 44 0a 04	 mov	 WORD PTR [edx+ecx+4], ax

; 52   : 			this->Exclusive[this->Count].Index = n[1];

  001cc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001cf	8b 88 40 13 00
	00		 mov	 ecx, DWORD PTR [eax+4928]
  001d5	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  001d8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001db	66 8b 85 e4 fe
	ff ff		 mov	 ax, WORD PTR _n$219230[ebp+4]
  001e2	66 89 44 0a 06	 mov	 WORD PTR [edx+ecx+6], ax

; 53   : 			this->Exclusive[this->Count].Options = n[2];

  001e7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001ea	8b 88 40 13 00
	00		 mov	 ecx, DWORD PTR [eax+4928]
  001f0	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  001f3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001f6	66 8b 85 e8 fe
	ff ff		 mov	 ax, WORD PTR _n$219230[ebp+8]
  001fd	66 89 44 0a 08	 mov	 WORD PTR [edx+ecx+8], ax

; 54   : 			this->Exclusive[this->Count].Value = n[3];

  00202	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00205	8b 88 40 13 00
	00		 mov	 ecx, DWORD PTR [eax+4928]
  0020b	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0020e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00211	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _n$219230[ebp+12]
  00217	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 55   : 			this->Count++;

  0021b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0021e	8b 88 40 13 00
	00		 mov	 ecx, DWORD PTR [eax+4928]
  00224	83 c1 01	 add	 ecx, 1
  00227	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0022a	89 8a 40 13 00
	00		 mov	 DWORD PTR [edx+4928], ecx
$LN5@Load:

; 56   : 		}
; 57   : 		if(Flag == 2)

  00230	83 bd f0 fe ff
	ff 02		 cmp	 DWORD PTR _Flag$[ebp], 2
  00237	0f 85 bb 00 00
	00		 jne	 $LN4@Load

; 58   : 		{
; 59   : 			int n[3];
; 60   : 			sscanf(Buff, "%d %d %d %d" , &n[0], &n[1], &n[2], &n[3]);

  0023d	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _n$219233[ebp+12]
  00243	50		 push	 eax
  00244	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219233[ebp+8]
  0024a	51		 push	 ecx
  0024b	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _n$219233[ebp+4]
  00251	52		 push	 edx
  00252	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _n$219233[ebp]
  00258	50		 push	 eax
  00259	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  0025e	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00264	51		 push	 ecx
  00265	e8 00 00 00 00	 call	 _sscanf
  0026a	83 c4 18	 add	 esp, 24			; 00000018H

; 61   : 			this->ExclusiveInv[this->CountInv].Type = n[0];

  0026d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00270	8b 88 44 13 00
	00		 mov	 ecx, DWORD PTR [eax+4932]
  00276	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00279	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0027c	66 8b 85 d0 fe
	ff ff		 mov	 ax, WORD PTR _n$219233[ebp]
  00283	66 89 84 0a 64
	09 00 00	 mov	 WORD PTR [edx+ecx+2404], ax

; 62   : 			this->ExclusiveInv[this->CountInv].Index = n[1];

  0028b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0028e	8b 88 44 13 00
	00		 mov	 ecx, DWORD PTR [eax+4932]
  00294	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00297	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0029a	66 8b 85 d4 fe
	ff ff		 mov	 ax, WORD PTR _n$219233[ebp+4]
  002a1	66 89 84 0a 66
	09 00 00	 mov	 WORD PTR [edx+ecx+2406], ax

; 63   : 			this->ExclusiveInv[this->CountInv].Options = n[2];

  002a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002ac	8b 88 44 13 00
	00		 mov	 ecx, DWORD PTR [eax+4932]
  002b2	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  002b5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002b8	66 8b 85 d8 fe
	ff ff		 mov	 ax, WORD PTR _n$219233[ebp+8]
  002bf	66 89 84 0a 68
	09 00 00	 mov	 WORD PTR [edx+ecx+2408], ax

; 64   : 			this->ExclusiveInv[this->CountInv].Value = n[3];

  002c7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002ca	8b 88 44 13 00
	00		 mov	 ecx, DWORD PTR [eax+4932]
  002d0	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  002d3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002d6	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _n$219233[ebp+12]
  002dc	89 84 0a 6c 09
	00 00		 mov	 DWORD PTR [edx+ecx+2412], eax

; 65   : 			this->CountInv++;

  002e3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002e6	8b 88 44 13 00
	00		 mov	 ecx, DWORD PTR [eax+4932]
  002ec	83 c1 01	 add	 ecx, 1
  002ef	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002f2	89 8a 44 13 00
	00		 mov	 DWORD PTR [edx+4932], ecx
$LN4@Load:

; 66   : 		}
; 67   : 		
; 68   : #ifdef EXCLUSIVE_AMYLET
; 69   : 		if(g_ExLicense.CheckUser(eExUB::ulasevich) || g_ExLicense.CheckUser(eExUB::Local3) || g_ExLicense.CheckUser(eExUB::Local) || g_ExLicense.CheckUser(eExUB::ulasevich2))

  002f8	6a 17		 push	 23			; 00000017H
  002fa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  002ff	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00304	0f b6 c0	 movzx	 eax, al
  00307	85 c0		 test	 eax, eax
  00309	75 3d		 jne	 SHORT $LN2@Load
  0030b	6a 1c		 push	 28			; 0000001cH
  0030d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00312	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00317	0f b6 c0	 movzx	 eax, al
  0031a	85 c0		 test	 eax, eax
  0031c	75 2a		 jne	 SHORT $LN2@Load
  0031e	6a 00		 push	 0
  00320	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00325	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0032a	0f b6 c0	 movzx	 eax, al
  0032d	85 c0		 test	 eax, eax
  0032f	75 17		 jne	 SHORT $LN2@Load
  00331	6a 24		 push	 36			; 00000024H
  00333	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00338	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0033d	0f b6 c0	 movzx	 eax, al
  00340	85 c0		 test	 eax, eax
  00342	0f 84 c8 00 00
	00		 je	 $LN3@Load
$LN2@Load:

; 70   : 		{
; 71   : 			if(Flag == 3)

  00348	83 bd f0 fe ff
	ff 03		 cmp	 DWORD PTR _Flag$[ebp], 3
  0034f	0f 85 bb 00 00
	00		 jne	 $LN3@Load

; 72   : 			{
; 73   : 				int n[3];
; 74   : 				sscanf(Buff, "%d %d %d %d" , &n[0], &n[1], &n[2], &n[3]);		

  00355	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _n$219237[ebp+12]
  0035b	50		 push	 eax
  0035c	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219237[ebp+8]
  00362	51		 push	 ecx
  00363	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR _n$219237[ebp+4]
  00369	52		 push	 edx
  0036a	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _n$219237[ebp]
  00370	50		 push	 eax
  00371	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  00376	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0037c	51		 push	 ecx
  0037d	e8 00 00 00 00	 call	 _sscanf
  00382	83 c4 18	 add	 esp, 24			; 00000018H

; 75   : 				this->ExclusiveInvTime[this->CountInvTime].Type = n[0];

  00385	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00388	8b 88 3c 13 00
	00		 mov	 ecx, DWORD PTR [eax+4924]
  0038e	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00391	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00394	66 8b 85 c0 fe
	ff ff		 mov	 ax, WORD PTR _n$219237[ebp]
  0039b	66 89 84 0a c4
	12 00 00	 mov	 WORD PTR [edx+ecx+4804], ax

; 76   : 				this->ExclusiveInvTime[this->CountInvTime].Index = n[1];

  003a3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003a6	8b 88 3c 13 00
	00		 mov	 ecx, DWORD PTR [eax+4924]
  003ac	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  003af	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003b2	66 8b 85 c4 fe
	ff ff		 mov	 ax, WORD PTR _n$219237[ebp+4]
  003b9	66 89 84 0a c6
	12 00 00	 mov	 WORD PTR [edx+ecx+4806], ax

; 77   : 				this->ExclusiveInvTime[this->CountInvTime].Options = n[2];

  003c1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003c4	8b 88 3c 13 00
	00		 mov	 ecx, DWORD PTR [eax+4924]
  003ca	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  003cd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003d0	66 8b 85 c8 fe
	ff ff		 mov	 ax, WORD PTR _n$219237[ebp+8]
  003d7	66 89 84 0a c8
	12 00 00	 mov	 WORD PTR [edx+ecx+4808], ax

; 78   : 				this->ExclusiveInvTime[this->CountInvTime].Value = n[3];

  003df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003e2	8b 88 3c 13 00
	00		 mov	 ecx, DWORD PTR [eax+4924]
  003e8	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  003eb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003ee	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _n$219237[ebp+12]
  003f4	89 84 0a cc 12
	00 00		 mov	 DWORD PTR [edx+ecx+4812], eax

; 79   : 				this->CountInvTime++;

  003fb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003fe	8b 88 3c 13 00
	00		 mov	 ecx, DWORD PTR [eax+4924]
  00404	83 c1 01	 add	 ecx, 1
  00407	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0040a	89 8a 3c 13 00
	00		 mov	 DWORD PTR [edx+4924], ecx
$LN3@Load:

; 80   : 			}
; 81   : 		}
; 82   : 		
; 83   : #endif
; 84   : 	}

  00410	e9 14 fd ff ff	 jmp	 $LN8@Load
$LN7@Load:

; 85   : 	fclose(file);

  00415	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00418	50		 push	 eax
  00419	e8 00 00 00 00	 call	 _fclose
  0041e	83 c4 04	 add	 esp, 4
$LN13@Load:

; 86   : }

  00421	5f		 pop	 edi
  00422	5e		 pop	 esi
  00423	5b		 pop	 ebx
  00424	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00427	33 cd		 xor	 ecx, ebp
  00429	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0042e	8b e5		 mov	 esp, ebp
  00430	5d		 pop	 ebp
  00431	c3		 ret	 0
?Load@cExclusiveOptions@@QAEXXZ ENDP			; cExclusiveOptions::Load
_TEXT	ENDS
PUBLIC	?Options@cExclusiveOptions@@QAEXH@Z		; cExclusiveOptions::Options
EXTRN	?CheckInventoryItem@@YA_NHH@Z:PROC		; CheckInventoryItem
EXTRN	?Max90Procent@@YAXAAH@Z:PROC			; Max90Procent
EXTRN	?CheckInCharacterItem@@YA_NHH@Z:PROC		; CheckInCharacterItem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv275 = -84						; size = 4
tv92 = -84						; size = 4
_a$219270 = -16						; size = 4
_a$219244 = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?Options@cExclusiveOptions@@QAEXH@Z PROC		; cExclusiveOptions::Options
; _this$ = ecx

; 105  : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	83 ec 54	 sub	 esp, 84			; 00000054H
  00446	53		 push	 ebx
  00447	56		 push	 esi
  00448	57		 push	 edi
  00449	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	if(!this->Enable) return;

  0044c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0044f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00452	85 c9		 test	 ecx, ecx
  00454	75 05		 jne	 SHORT $LN35@Options
  00456	e9 68 06 00 00	 jmp	 $LN36@Options
$LN35@Options:

; 107  : 
; 108  : 	LPOBJ lpObj = &gObj[aIndex];

  0045b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0045e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00464	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0046a	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 109  : 
; 110  : 	for(int a = 0; a < this->Count; a++)

  0046d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _a$219244[ebp], 0
  00474	eb 09		 jmp	 SHORT $LN34@Options
$LN33@Options:
  00476	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  00479	83 c0 01	 add	 eax, 1
  0047c	89 45 f4	 mov	 DWORD PTR _a$219244[ebp], eax
$LN34@Options:
  0047f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00482	8b 4d f4	 mov	 ecx, DWORD PTR _a$219244[ebp]
  00485	3b 88 40 13 00
	00		 cmp	 ecx, DWORD PTR [eax+4928]
  0048b	0f 8d ca 02 00
	00		 jge	 $LN32@Options

; 111  : 	{
; 112  : 		if(CheckInCharacterItem(aIndex,ITEMGET(this->Exclusive[a].Type,this->Exclusive[a].Index)))

  00491	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  00494	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00497	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0049a	0f bf 54 01 04	 movsx	 edx, WORD PTR [ecx+eax+4]
  0049f	c1 e2 09	 shl	 edx, 9
  004a2	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  004a5	6b c0 0c	 imul	 eax, 12			; 0000000cH
  004a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ab	0f bf 44 01 06	 movsx	 eax, WORD PTR [ecx+eax+6]
  004b0	03 d0		 add	 edx, eax
  004b2	52		 push	 edx
  004b3	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  004b6	51		 push	 ecx
  004b7	e8 00 00 00 00	 call	 ?CheckInCharacterItem@@YA_NHH@Z ; CheckInCharacterItem
  004bc	83 c4 08	 add	 esp, 8
  004bf	0f b6 d0	 movzx	 edx, al
  004c2	85 d2		 test	 edx, edx
  004c4	0f 84 8c 02 00
	00		 je	 $LN31@Options

; 113  : 		{
; 114  : 			switch(this->Exclusive[a].Options)

  004ca	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  004cd	6b c0 0c	 imul	 eax, 12			; 0000000cH
  004d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004d3	0f bf 54 01 08	 movsx	 edx, WORD PTR [ecx+eax+8]
  004d8	89 55 ac	 mov	 DWORD PTR tv92[ebp], edx
  004db	83 7d ac 0a	 cmp	 DWORD PTR tv92[ebp], 10	; 0000000aH
  004df	0f 87 71 02 00
	00		 ja	 $LN31@Options
  004e5	8b 45 ac	 mov	 eax, DWORD PTR tv92[ebp]
  004e8	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN38@Options[eax*4]
$LN28@Options:

; 115  : 			{
; 116  : 			case eExclusiveOpt::Damage:
; 117  : 				lpObj->m_AttackDamageMinRight += this->Exclusive[a].Value;

  004ef	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  004f2	6b c0 0c	 imul	 eax, 12			; 0000000cH
  004f5	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  004f8	8b 91 84 04 00
	00		 mov	 edx, DWORD PTR [ecx+1156]
  004fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00501	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00505	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00508	89 90 84 04 00
	00		 mov	 DWORD PTR [eax+1156], edx

; 118  : 				lpObj->m_AttackDamageMaxRight += this->Exclusive[a].Value;

  0050e	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  00511	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00514	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00517	8b 91 80 04 00
	00		 mov	 edx, DWORD PTR [ecx+1152]
  0051d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00520	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00524	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00527	89 90 80 04 00
	00		 mov	 DWORD PTR [eax+1152], edx

; 119  : 				lpObj->m_AttackDamageMinLeft += this->Exclusive[a].Value;

  0052d	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  00530	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00533	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00536	8b 91 7c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1148]
  0053c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0053f	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00543	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00546	89 90 7c 04 00
	00		 mov	 DWORD PTR [eax+1148], edx

; 120  : 				lpObj->m_AttackDamageMaxLeft += this->Exclusive[a].Value;

  0054c	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  0054f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00552	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00555	8b 91 78 04 00
	00		 mov	 edx, DWORD PTR [ecx+1144]
  0055b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0055e	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00562	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00565	89 90 78 04 00
	00		 mov	 DWORD PTR [eax+1144], edx

; 121  : /*				lpObj->m_MagicDamageMin += this->Exclusive[a].Value;
; 122  : 				lpObj->m_MagicDamageMax += this->Exclusive[a].Value;	*/	
; 123  : 				break;

  0056b	e9 e6 01 00 00	 jmp	 $LN31@Options
$LN27@Options:

; 124  : 			case eExclusiveOpt::MinDefence:
; 125  : 				lpObj->m_Defense += this->Exclusive[a].Value;

  00570	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  00573	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00576	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00579	8b 91 94 04 00
	00		 mov	 edx, DWORD PTR [ecx+1172]
  0057f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00582	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00586	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00589	89 90 94 04 00
	00		 mov	 DWORD PTR [eax+1172], edx

; 126  : 				break;

  0058f	e9 c2 01 00 00	 jmp	 $LN31@Options
$LN26@Options:

; 127  : 			case eExclusiveOpt::IgnoreDefence:
; 128  : 				lpObj->SetOpIgnoreDefense += this->Exclusive[a].Value;

  00594	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  00597	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0059a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0059d	0f b6 91 3e 11
	00 00		 movzx	 edx, BYTE PTR [ecx+4414]
  005a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005a7	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  005ab	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005ae	88 90 3e 11 00
	00		 mov	 BYTE PTR [eax+4414], dl

; 129  : 				Max90Procent((int&)lpObj->SetOpIgnoreDefense);

  005b4	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005b7	05 3e 11 00 00	 add	 eax, 4414		; 0000113eH
  005bc	50		 push	 eax
  005bd	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  005c2	83 c4 04	 add	 esp, 4

; 130  : 				break;

  005c5	e9 8c 01 00 00	 jmp	 $LN31@Options
$LN25@Options:

; 131  : 			case eExclusiveOpt::CriticalDamageRate:
; 132  : 				lpObj->m_CriticalDamage += this->Exclusive[a].Value;

  005ca	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  005cd	6b c0 0c	 imul	 eax, 12			; 0000000cH
  005d0	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  005d3	8b 91 bc 04 00
	00		 mov	 edx, DWORD PTR [ecx+1212]
  005d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005dc	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  005e0	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005e3	89 90 bc 04 00
	00		 mov	 DWORD PTR [eax+1212], edx

; 133  : 				Max90Procent((int&)lpObj->m_CriticalDamage);

  005e9	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005ec	05 bc 04 00 00	 add	 eax, 1212		; 000004bcH
  005f1	50		 push	 eax
  005f2	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  005f7	83 c4 04	 add	 esp, 4

; 134  : 				break;

  005fa	e9 57 01 00 00	 jmp	 $LN31@Options
$LN24@Options:

; 135  : 			case eExclusiveOpt::ExellentDamageRate:
; 136  : 				lpObj->m_ExcelentDamage += this->Exclusive[a].Value;

  005ff	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  00602	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00605	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00608	8b 91 c0 04 00
	00		 mov	 edx, DWORD PTR [ecx+1216]
  0060e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00611	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00615	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00618	89 90 c0 04 00
	00		 mov	 DWORD PTR [eax+1216], edx

; 137  : 				Max90Procent((int&)lpObj->m_ExcelentDamage);

  0061e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00621	05 c0 04 00 00	 add	 eax, 1216		; 000004c0H
  00626	50		 push	 eax
  00627	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  0062c	83 c4 04	 add	 esp, 4

; 138  : 				break;

  0062f	e9 22 01 00 00	 jmp	 $LN31@Options
$LN23@Options:

; 139  : 			case eExclusiveOpt::DoubleDamage:
; 140  : 				lpObj->SetOpDoubleDamage += this->Exclusive[a].Value;

  00634	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  00637	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0063a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0063d	0f b6 91 3f 11
	00 00		 movzx	 edx, BYTE PTR [ecx+4415]
  00644	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00647	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  0064b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0064e	88 90 3f 11 00
	00		 mov	 BYTE PTR [eax+4415], dl

; 141  : 				Max90Procent((int&)lpObj->SetOpDoubleDamage);

  00654	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00657	05 3f 11 00 00	 add	 eax, 4415		; 0000113fH
  0065c	50		 push	 eax
  0065d	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  00662	83 c4 04	 add	 esp, 4

; 142  : 				break;

  00665	e9 ec 00 00 00	 jmp	 $LN31@Options
$LN22@Options:

; 143  : 			case eExclusiveOpt::AbsordDamage:
; 144  : 				lpObj->DamageMinus += this->Exclusive[a].Value;

  0066a	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  0066d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00670	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00673	0f b6 91 70 01
	00 00		 movzx	 edx, BYTE PTR [ecx+368]
  0067a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0067d	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00681	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00684	88 90 70 01 00
	00		 mov	 BYTE PTR [eax+368], dl

; 145  : 				Max90Procent((int&)lpObj->DamageMinus);

  0068a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0068d	05 70 01 00 00	 add	 eax, 368		; 00000170H
  00692	50		 push	 eax
  00693	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  00698	83 c4 04	 add	 esp, 4

; 146  : 				break;

  0069b	e9 b6 00 00 00	 jmp	 $LN31@Options
$LN21@Options:

; 147  : 			case eExclusiveOpt::ReflectDamage:
; 148  : 				lpObj->DamageReflect += this->Exclusive[a].Value;

  006a0	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  006a3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  006a6	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  006a9	0f b6 91 71 01
	00 00		 movzx	 edx, BYTE PTR [ecx+369]
  006b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006b3	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  006b7	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006ba	88 90 71 01 00
	00		 mov	 BYTE PTR [eax+369], dl

; 149  : 				Max90Procent((int&)lpObj->DamageReflect);

  006c0	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006c3	05 71 01 00 00	 add	 eax, 369		; 00000171H
  006c8	50		 push	 eax
  006c9	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  006ce	83 c4 04	 add	 esp, 4

; 150  : 				break;

  006d1	e9 80 00 00 00	 jmp	 $LN31@Options
$LN20@Options:

; 151  : 			case eExclusiveOpt::SD:
; 152  : 				lpObj->iAddShield += this->Exclusive[a].Value;

  006d6	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  006d9	6b c0 0c	 imul	 eax, 12			; 0000000cH
  006dc	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  006df	8b 91 5c 01 00
	00		 mov	 edx, DWORD PTR [ecx+348]
  006e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e8	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  006ec	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006ef	89 90 5c 01 00
	00		 mov	 DWORD PTR [eax+348], edx

; 153  : 				break;

  006f5	eb 5f		 jmp	 SHORT $LN31@Options
$LN19@Options:

; 154  : 			case eExclusiveOpt::Life:
; 155  : 				lpObj->AddLife += this->Exclusive[a].Value;

  006f7	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  006fa	6b c0 0c	 imul	 eax, 12			; 0000000cH
  006fd	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00700	8b 91 4c 01 00
	00		 mov	 edx, DWORD PTR [ecx+332]
  00706	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00709	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  0070d	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00710	89 90 4c 01 00
	00		 mov	 DWORD PTR [eax+332], edx

; 156  : 				break;

  00716	eb 3e		 jmp	 SHORT $LN31@Options
$LN18@Options:

; 157  : 			case eExclusiveOpt::WizardDamage:
; 158  : 				lpObj->m_MagicDamageMin += this->Exclusive[a].Value;

  00718	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  0071b	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0071e	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00721	8b 91 68 04 00
	00		 mov	 edx, DWORD PTR [ecx+1128]
  00727	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0072a	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  0072e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00731	89 90 68 04 00
	00		 mov	 DWORD PTR [eax+1128], edx

; 159  : 				lpObj->m_MagicDamageMax += this->Exclusive[a].Value;

  00737	8b 45 f4	 mov	 eax, DWORD PTR _a$219244[ebp]
  0073a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0073d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00740	8b 91 6c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1132]
  00746	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00749	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  0074d	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00750	89 90 6c 04 00
	00		 mov	 DWORD PTR [eax+1132], edx
$LN31@Options:

; 160  : 				break;
; 161  : 			}
; 162  : 		}
; 163  : 	}

  00756	e9 1b fd ff ff	 jmp	 $LN33@Options
$LN32@Options:

; 164  : 
; 165  : 	for(int a = 0; a < this->CountInv; a++)

  0075b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$219270[ebp], 0
  00762	eb 09		 jmp	 SHORT $LN17@Options
$LN16@Options:
  00764	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00767	83 c0 01	 add	 eax, 1
  0076a	89 45 f0	 mov	 DWORD PTR _a$219270[ebp], eax
$LN17@Options:
  0076d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00770	8b 4d f0	 mov	 ecx, DWORD PTR _a$219270[ebp]
  00773	3b 88 44 13 00
	00		 cmp	 ecx, DWORD PTR [eax+4932]
  00779	0f 8d 44 03 00
	00		 jge	 $LN36@Options

; 166  : 	{
; 167  : 		if(CheckInventoryItem(aIndex,ITEMGET(this->ExclusiveInv[a].Type,this->ExclusiveInv[a].Index)))

  0077f	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00782	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00785	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00788	0f bf 94 01 64
	09 00 00	 movsx	 edx, WORD PTR [ecx+eax+2404]
  00790	c1 e2 09	 shl	 edx, 9
  00793	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00796	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00799	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0079c	0f bf 84 01 66
	09 00 00	 movsx	 eax, WORD PTR [ecx+eax+2406]
  007a4	03 d0		 add	 edx, eax
  007a6	52		 push	 edx
  007a7	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  007aa	51		 push	 ecx
  007ab	e8 00 00 00 00	 call	 ?CheckInventoryItem@@YA_NHH@Z ; CheckInventoryItem
  007b0	83 c4 08	 add	 esp, 8
  007b3	0f b6 d0	 movzx	 edx, al
  007b6	85 d2		 test	 edx, edx
  007b8	0f 84 00 03 00
	00		 je	 $LN14@Options

; 168  : 		{
; 169  : 			switch(this->ExclusiveInv[a].Options)

  007be	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  007c1	6b c0 0c	 imul	 eax, 12			; 0000000cH
  007c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007c7	0f bf 94 01 68
	09 00 00	 movsx	 edx, WORD PTR [ecx+eax+2408]
  007cf	89 55 ac	 mov	 DWORD PTR tv275[ebp], edx
  007d2	83 7d ac 0a	 cmp	 DWORD PTR tv275[ebp], 10 ; 0000000aH
  007d6	0f 87 e2 02 00
	00		 ja	 $LN14@Options
  007dc	8b 45 ac	 mov	 eax, DWORD PTR tv275[ebp]
  007df	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN39@Options[eax*4]
$LN11@Options:

; 170  : 			{
; 171  : 			case eExclusiveOpt::Damage:
; 172  : 				lpObj->m_AttackDamageMinRight += this->ExclusiveInv[a].Value;

  007e6	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  007e9	6b c0 0c	 imul	 eax, 12			; 0000000cH
  007ec	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  007ef	8b 91 84 04 00
	00		 mov	 edx, DWORD PTR [ecx+1156]
  007f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007f8	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  007ff	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00802	89 90 84 04 00
	00		 mov	 DWORD PTR [eax+1156], edx

; 173  : 				lpObj->m_AttackDamageMaxRight += this->ExclusiveInv[a].Value;

  00808	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  0080b	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0080e	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00811	8b 91 80 04 00
	00		 mov	 edx, DWORD PTR [ecx+1152]
  00817	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0081a	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00821	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00824	89 90 80 04 00
	00		 mov	 DWORD PTR [eax+1152], edx

; 174  : 				lpObj->m_AttackDamageMinLeft += this->ExclusiveInv[a].Value;

  0082a	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  0082d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00830	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00833	8b 91 7c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1148]
  00839	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0083c	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00843	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00846	89 90 7c 04 00
	00		 mov	 DWORD PTR [eax+1148], edx

; 175  : 				lpObj->m_AttackDamageMaxLeft += this->ExclusiveInv[a].Value;

  0084c	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  0084f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00852	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00855	8b 91 78 04 00
	00		 mov	 edx, DWORD PTR [ecx+1144]
  0085b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0085e	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00865	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00868	89 90 78 04 00
	00		 mov	 DWORD PTR [eax+1144], edx

; 176  : 				lpObj->m_MagicDamageMin += this->ExclusiveInv[a].Value;

  0086e	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00871	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00874	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00877	8b 91 68 04 00
	00		 mov	 edx, DWORD PTR [ecx+1128]
  0087d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00880	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00887	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0088a	89 90 68 04 00
	00		 mov	 DWORD PTR [eax+1128], edx

; 177  : 				lpObj->m_MagicDamageMax += this->ExclusiveInv[a].Value;		

  00890	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00893	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00896	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00899	8b 91 6c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1132]
  0089f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008a2	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  008a9	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  008ac	89 90 6c 04 00
	00		 mov	 DWORD PTR [eax+1132], edx

; 178  : 				break;

  008b2	e9 07 02 00 00	 jmp	 $LN14@Options
$LN10@Options:

; 179  : 			case eExclusiveOpt::MinDefence:
; 180  : 				lpObj->m_Defense += this->ExclusiveInv[a].Value;

  008b7	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  008ba	6b c0 0c	 imul	 eax, 12			; 0000000cH
  008bd	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  008c0	8b 91 94 04 00
	00		 mov	 edx, DWORD PTR [ecx+1172]
  008c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008c9	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  008d0	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  008d3	89 90 94 04 00
	00		 mov	 DWORD PTR [eax+1172], edx

; 181  : 				break;

  008d9	e9 e0 01 00 00	 jmp	 $LN14@Options
$LN9@Options:

; 182  : 			case eExclusiveOpt::IgnoreDefence:
; 183  : 				lpObj->SetOpIgnoreDefense += this->ExclusiveInv[a].Value;

  008de	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  008e1	6b c0 0c	 imul	 eax, 12			; 0000000cH
  008e4	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  008e7	0f b6 91 3e 11
	00 00		 movzx	 edx, BYTE PTR [ecx+4414]
  008ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008f1	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  008f8	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  008fb	88 90 3e 11 00
	00		 mov	 BYTE PTR [eax+4414], dl

; 184  : 				Max90Procent((int&)lpObj->SetOpIgnoreDefense);

  00901	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00904	05 3e 11 00 00	 add	 eax, 4414		; 0000113eH
  00909	50		 push	 eax
  0090a	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  0090f	83 c4 04	 add	 esp, 4

; 185  : 				break;

  00912	e9 a7 01 00 00	 jmp	 $LN14@Options
$LN8@Options:

; 186  : 			case eExclusiveOpt::CriticalDamageRate:
; 187  : 				lpObj->m_CriticalDamage += this->ExclusiveInv[a].Value;

  00917	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  0091a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0091d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00920	8b 91 bc 04 00
	00		 mov	 edx, DWORD PTR [ecx+1212]
  00926	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00929	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00930	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00933	89 90 bc 04 00
	00		 mov	 DWORD PTR [eax+1212], edx

; 188  : 				Max90Procent((int&)lpObj->m_CriticalDamage);

  00939	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0093c	05 bc 04 00 00	 add	 eax, 1212		; 000004bcH
  00941	50		 push	 eax
  00942	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  00947	83 c4 04	 add	 esp, 4

; 189  : 				break;

  0094a	e9 6f 01 00 00	 jmp	 $LN14@Options
$LN7@Options:

; 190  : 			case eExclusiveOpt::ExellentDamageRate:
; 191  : 				lpObj->m_ExcelentDamage += this->ExclusiveInv[a].Value;

  0094f	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00952	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00955	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00958	8b 91 c0 04 00
	00		 mov	 edx, DWORD PTR [ecx+1216]
  0095e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00961	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00968	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0096b	89 90 c0 04 00
	00		 mov	 DWORD PTR [eax+1216], edx

; 192  : 				Max90Procent((int&)lpObj->m_ExcelentDamage);

  00971	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00974	05 c0 04 00 00	 add	 eax, 1216		; 000004c0H
  00979	50		 push	 eax
  0097a	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  0097f	83 c4 04	 add	 esp, 4

; 193  : 				break;

  00982	e9 37 01 00 00	 jmp	 $LN14@Options
$LN6@Options:

; 194  : 			case eExclusiveOpt::DoubleDamage:
; 195  : 				lpObj->SetOpDoubleDamage += this->ExclusiveInv[a].Value;

  00987	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  0098a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0098d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00990	0f b6 91 3f 11
	00 00		 movzx	 edx, BYTE PTR [ecx+4415]
  00997	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0099a	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  009a1	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009a4	88 90 3f 11 00
	00		 mov	 BYTE PTR [eax+4415], dl

; 196  : 				Max90Procent((int&)lpObj->SetOpDoubleDamage);

  009aa	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009ad	05 3f 11 00 00	 add	 eax, 4415		; 0000113fH
  009b2	50		 push	 eax
  009b3	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  009b8	83 c4 04	 add	 esp, 4

; 197  : 				break;

  009bb	e9 fe 00 00 00	 jmp	 $LN14@Options
$LN5@Options:

; 198  : 			case eExclusiveOpt::AbsordDamage:
; 199  : 				lpObj->DamageMinus += this->ExclusiveInv[a].Value;

  009c0	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  009c3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  009c6	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  009c9	0f b6 91 70 01
	00 00		 movzx	 edx, BYTE PTR [ecx+368]
  009d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009d3	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  009da	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009dd	88 90 70 01 00
	00		 mov	 BYTE PTR [eax+368], dl

; 200  : 				Max90Procent((int&)lpObj->DamageMinus);

  009e3	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009e6	05 70 01 00 00	 add	 eax, 368		; 00000170H
  009eb	50		 push	 eax
  009ec	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  009f1	83 c4 04	 add	 esp, 4

; 201  : 				break;

  009f4	e9 c5 00 00 00	 jmp	 $LN14@Options
$LN4@Options:

; 202  : 			case eExclusiveOpt::ReflectDamage:
; 203  : 				lpObj->DamageReflect += this->ExclusiveInv[a].Value;

  009f9	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  009fc	6b c0 0c	 imul	 eax, 12			; 0000000cH
  009ff	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00a02	0f b6 91 71 01
	00 00		 movzx	 edx, BYTE PTR [ecx+369]
  00a09	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a0c	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00a13	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a16	88 90 71 01 00
	00		 mov	 BYTE PTR [eax+369], dl

; 204  : 				Max90Procent((int&)lpObj->DamageReflect);

  00a1c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a1f	05 71 01 00 00	 add	 eax, 369		; 00000171H
  00a24	50		 push	 eax
  00a25	e8 00 00 00 00	 call	 ?Max90Procent@@YAXAAH@Z	; Max90Procent
  00a2a	83 c4 04	 add	 esp, 4

; 205  : 				break;

  00a2d	e9 8c 00 00 00	 jmp	 $LN14@Options
$LN3@Options:

; 206  : 			case eExclusiveOpt::SD:
; 207  : 				lpObj->iAddShield += this->ExclusiveInv[a].Value;

  00a32	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00a35	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00a38	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00a3b	8b 91 5c 01 00
	00		 mov	 edx, DWORD PTR [ecx+348]
  00a41	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a44	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00a4b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a4e	89 90 5c 01 00
	00		 mov	 DWORD PTR [eax+348], edx

; 208  : 				break;

  00a54	eb 68		 jmp	 SHORT $LN14@Options
$LN2@Options:

; 209  : 			case eExclusiveOpt::Life:
; 210  : 				lpObj->AddLife += this->ExclusiveInv[a].Value;

  00a56	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00a59	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00a5c	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00a5f	8b 91 4c 01 00
	00		 mov	 edx, DWORD PTR [ecx+332]
  00a65	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a68	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00a6f	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a72	89 90 4c 01 00
	00		 mov	 DWORD PTR [eax+332], edx

; 211  : 				break;

  00a78	eb 44		 jmp	 SHORT $LN14@Options
$LN1@Options:

; 212  : 			case eExclusiveOpt::WizardDamage:
; 213  : 				lpObj->m_MagicDamageMin += this->ExclusiveInv[a].Value;

  00a7a	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00a7d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00a80	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00a83	8b 91 68 04 00
	00		 mov	 edx, DWORD PTR [ecx+1128]
  00a89	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a8c	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00a93	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a96	89 90 68 04 00
	00		 mov	 DWORD PTR [eax+1128], edx

; 214  : 				lpObj->m_MagicDamageMax += this->ExclusiveInv[a].Value;

  00a9c	8b 45 f0	 mov	 eax, DWORD PTR _a$219270[ebp]
  00a9f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00aa2	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00aa5	8b 91 6c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1132]
  00aab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aae	03 94 01 6c 09
	00 00		 add	 edx, DWORD PTR [ecx+eax+2412]
  00ab5	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ab8	89 90 6c 04 00
	00		 mov	 DWORD PTR [eax+1132], edx
$LN14@Options:

; 215  : 				break;
; 216  : 			}
; 217  : 		}
; 218  : 	}

  00abe	e9 a1 fc ff ff	 jmp	 $LN16@Options
$LN36@Options:

; 219  : 
; 220  : }

  00ac3	5f		 pop	 edi
  00ac4	5e		 pop	 esi
  00ac5	5b		 pop	 ebx
  00ac6	8b e5		 mov	 esp, ebp
  00ac8	5d		 pop	 ebp
  00ac9	c2 04 00	 ret	 4
$LN38@Options:
  00acc	00 00 00 00	 DD	 $LN28@Options
  00ad0	00 00 00 00	 DD	 $LN27@Options
  00ad4	00 00 00 00	 DD	 $LN26@Options
  00ad8	00 00 00 00	 DD	 $LN25@Options
  00adc	00 00 00 00	 DD	 $LN24@Options
  00ae0	00 00 00 00	 DD	 $LN23@Options
  00ae4	00 00 00 00	 DD	 $LN22@Options
  00ae8	00 00 00 00	 DD	 $LN21@Options
  00aec	00 00 00 00	 DD	 $LN20@Options
  00af0	00 00 00 00	 DD	 $LN19@Options
  00af4	00 00 00 00	 DD	 $LN18@Options
$LN39@Options:
  00af8	00 00 00 00	 DD	 $LN11@Options
  00afc	00 00 00 00	 DD	 $LN10@Options
  00b00	00 00 00 00	 DD	 $LN9@Options
  00b04	00 00 00 00	 DD	 $LN8@Options
  00b08	00 00 00 00	 DD	 $LN7@Options
  00b0c	00 00 00 00	 DD	 $LN6@Options
  00b10	00 00 00 00	 DD	 $LN5@Options
  00b14	00 00 00 00	 DD	 $LN4@Options
  00b18	00 00 00 00	 DD	 $LN3@Options
  00b1c	00 00 00 00	 DD	 $LN2@Options
  00b20	00 00 00 00	 DD	 $LN1@Options
?Options@cExclusiveOptions@@QAEXH@Z ENDP		; cExclusiveOptions::Options
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?DropZen@cExclusiveOptions@@QAEXHAAM@Z		; cExclusiveOptions::DropZen
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_a$219310 = -12						; size = 4
_a$219302 = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_money$ = 12						; size = 4
?DropZen@cExclusiveOptions@@QAEXHAAM@Z PROC		; cExclusiveOptions::DropZen
; _this$ = ecx

; 223  : {

  00b30	55		 push	 ebp
  00b31	8b ec		 mov	 ebp, esp
  00b33	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00b36	53		 push	 ebx
  00b37	56		 push	 esi
  00b38	57		 push	 edi
  00b39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 224  : 	if(!this->Enable) return;

  00b3c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b3f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00b42	85 c9		 test	 ecx, ecx
  00b44	75 05		 jne	 SHORT $LN15@DropZen
  00b46	e9 c8 01 00 00	 jmp	 $LN16@DropZen
$LN15@DropZen:

; 225  : 
; 226  : 	for(int a = 0; a < this->Count; a++)

  00b4b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _a$219302[ebp], 0
  00b52	eb 09		 jmp	 SHORT $LN14@DropZen
$LN13@DropZen:
  00b54	8b 45 f8	 mov	 eax, DWORD PTR _a$219302[ebp]
  00b57	83 c0 01	 add	 eax, 1
  00b5a	89 45 f8	 mov	 DWORD PTR _a$219302[ebp], eax
$LN14@DropZen:
  00b5d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b60	8b 4d f8	 mov	 ecx, DWORD PTR _a$219302[ebp]
  00b63	3b 88 40 13 00
	00		 cmp	 ecx, DWORD PTR [eax+4928]
  00b69	0f 8d b8 00 00
	00		 jge	 $LN12@DropZen

; 227  : 	{
; 228  : 		if(CheckInCharacterItem(aIndex,ITEMGET(this->Exclusive[a].Type,this->Exclusive[a].Index)) && this->Exclusive[a].Options == eExclusiveOpt::Zen)

  00b6f	8b 45 f8	 mov	 eax, DWORD PTR _a$219302[ebp]
  00b72	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00b75	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b78	0f bf 54 01 04	 movsx	 edx, WORD PTR [ecx+eax+4]
  00b7d	c1 e2 09	 shl	 edx, 9
  00b80	8b 45 f8	 mov	 eax, DWORD PTR _a$219302[ebp]
  00b83	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00b86	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b89	0f bf 44 01 06	 movsx	 eax, WORD PTR [ecx+eax+6]
  00b8e	03 d0		 add	 edx, eax
  00b90	52		 push	 edx
  00b91	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00b94	51		 push	 ecx
  00b95	e8 00 00 00 00	 call	 ?CheckInCharacterItem@@YA_NHH@Z ; CheckInCharacterItem
  00b9a	83 c4 08	 add	 esp, 8
  00b9d	0f b6 d0	 movzx	 edx, al
  00ba0	85 d2		 test	 edx, edx
  00ba2	74 7e		 je	 SHORT $LN8@DropZen
  00ba4	8b 45 f8	 mov	 eax, DWORD PTR _a$219302[ebp]
  00ba7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00baa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bad	0f bf 54 01 08	 movsx	 edx, WORD PTR [ecx+eax+8]
  00bb2	83 fa 0c	 cmp	 edx, 12			; 0000000cH
  00bb5	75 6b		 jne	 SHORT $LN8@DropZen

; 229  : 		{
; 230  : 			if(this->Exclusive[a].Options)

  00bb7	8b 45 f8	 mov	 eax, DWORD PTR _a$219302[ebp]
  00bba	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00bbd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bc0	0f bf 54 01 08	 movsx	 edx, WORD PTR [ecx+eax+8]
  00bc5	85 d2		 test	 edx, edx
  00bc7	74 59		 je	 SHORT $LN8@DropZen

; 231  : 			{
; 232  : 				if (g_ExLicense.CheckUser(eExUB::Cherkashin))

  00bc9	6a 12		 push	 18			; 00000012H
  00bcb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00bd0	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00bd5	0f b6 c0	 movzx	 eax, al
  00bd8	85 c0		 test	 eax, eax
  00bda	74 24		 je	 SHORT $LN9@DropZen

; 233  : 				{
; 234  : 					money += ( money * this->Exclusive[a].Value)/100;

  00bdc	8b 45 f8	 mov	 eax, DWORD PTR _a$219302[ebp]
  00bdf	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00be2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00be5	db 44 01 0c	 fild	 DWORD PTR [ecx+eax+12]
  00be9	8b 55 0c	 mov	 edx, DWORD PTR _money$[ebp]
  00bec	d8 0a		 fmul	 DWORD PTR [edx]
  00bee	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00bf4	8b 45 0c	 mov	 eax, DWORD PTR _money$[ebp]
  00bf7	d8 00		 fadd	 DWORD PTR [eax]
  00bf9	8b 4d 0c	 mov	 ecx, DWORD PTR _money$[ebp]
  00bfc	d9 19		 fstp	 DWORD PTR [ecx]

; 235  : 				}
; 236  : 				else

  00bfe	eb 22		 jmp	 SHORT $LN8@DropZen
$LN9@DropZen:

; 237  : 				{
; 238  : 					money += ( money * 100 ) / this->Exclusive[a].Value;

  00c00	8b 45 0c	 mov	 eax, DWORD PTR _money$[ebp]
  00c03	d9 00		 fld	 DWORD PTR [eax]
  00c05	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00c0b	8b 4d f8	 mov	 ecx, DWORD PTR _a$219302[ebp]
  00c0e	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00c11	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00c14	da 74 0a 0c	 fidiv	 DWORD PTR [edx+ecx+12]
  00c18	8b 45 0c	 mov	 eax, DWORD PTR _money$[ebp]
  00c1b	d8 00		 fadd	 DWORD PTR [eax]
  00c1d	8b 4d 0c	 mov	 ecx, DWORD PTR _money$[ebp]
  00c20	d9 19		 fstp	 DWORD PTR [ecx]
$LN8@DropZen:

; 239  : 				}
; 240  : 				
; 241  : 			}
; 242  : 		}
; 243  : 	}

  00c22	e9 2d ff ff ff	 jmp	 $LN13@DropZen
$LN12@DropZen:

; 244  : 
; 245  : 	for(int a = 0; a < this->CountInv; a++)

  00c27	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _a$219310[ebp], 0
  00c2e	eb 09		 jmp	 SHORT $LN7@DropZen
$LN6@DropZen:
  00c30	8b 45 f4	 mov	 eax, DWORD PTR _a$219310[ebp]
  00c33	83 c0 01	 add	 eax, 1
  00c36	89 45 f4	 mov	 DWORD PTR _a$219310[ebp], eax
$LN7@DropZen:
  00c39	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c3c	8b 4d f4	 mov	 ecx, DWORD PTR _a$219310[ebp]
  00c3f	3b 88 44 13 00
	00		 cmp	 ecx, DWORD PTR [eax+4932]
  00c45	0f 8d c8 00 00
	00		 jge	 $LN5@DropZen

; 246  : 	{
; 247  : 		if(CheckInventoryItem(aIndex,ITEMGET(this->ExclusiveInv[a].Type,this->ExclusiveInv[a].Index)) && this->ExclusiveInv[a].Options == eExclusiveOpt::Zen)

  00c4b	8b 45 f4	 mov	 eax, DWORD PTR _a$219310[ebp]
  00c4e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00c51	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c54	0f bf 94 01 64
	09 00 00	 movsx	 edx, WORD PTR [ecx+eax+2404]
  00c5c	c1 e2 09	 shl	 edx, 9
  00c5f	8b 45 f4	 mov	 eax, DWORD PTR _a$219310[ebp]
  00c62	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00c65	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c68	0f bf 84 01 66
	09 00 00	 movsx	 eax, WORD PTR [ecx+eax+2406]
  00c70	03 d0		 add	 edx, eax
  00c72	52		 push	 edx
  00c73	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00c76	51		 push	 ecx
  00c77	e8 00 00 00 00	 call	 ?CheckInventoryItem@@YA_NHH@Z ; CheckInventoryItem
  00c7c	83 c4 08	 add	 esp, 8
  00c7f	0f b6 d0	 movzx	 edx, al
  00c82	85 d2		 test	 edx, edx
  00c84	0f 84 84 00 00
	00		 je	 $LN1@DropZen
  00c8a	8b 45 f4	 mov	 eax, DWORD PTR _a$219310[ebp]
  00c8d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00c90	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c93	0f bf 94 01 68
	09 00 00	 movsx	 edx, WORD PTR [ecx+eax+2408]
  00c9b	83 fa 0c	 cmp	 edx, 12			; 0000000cH
  00c9e	75 6e		 jne	 SHORT $LN1@DropZen

; 248  : 		{
; 249  : 			if(this->ExclusiveInv[a].Options)

  00ca0	8b 45 f4	 mov	 eax, DWORD PTR _a$219310[ebp]
  00ca3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00ca6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ca9	0f bf 94 01 68
	09 00 00	 movsx	 edx, WORD PTR [ecx+eax+2408]
  00cb1	85 d2		 test	 edx, edx
  00cb3	74 59		 je	 SHORT $LN1@DropZen

; 250  : 			{
; 251  : 				if (g_ExLicense.CheckUser(eExUB::Cherkashin))

  00cb5	6a 12		 push	 18			; 00000012H
  00cb7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00cbc	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00cc1	0f b6 c0	 movzx	 eax, al
  00cc4	85 c0		 test	 eax, eax
  00cc6	74 24		 je	 SHORT $LN2@DropZen

; 252  : 				{
; 253  : 					money += ( money * this->Exclusive[a].Value)/100;

  00cc8	8b 45 f4	 mov	 eax, DWORD PTR _a$219310[ebp]
  00ccb	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00cce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cd1	db 44 01 0c	 fild	 DWORD PTR [ecx+eax+12]
  00cd5	8b 55 0c	 mov	 edx, DWORD PTR _money$[ebp]
  00cd8	d8 0a		 fmul	 DWORD PTR [edx]
  00cda	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00ce0	8b 45 0c	 mov	 eax, DWORD PTR _money$[ebp]
  00ce3	d8 00		 fadd	 DWORD PTR [eax]
  00ce5	8b 4d 0c	 mov	 ecx, DWORD PTR _money$[ebp]
  00ce8	d9 19		 fstp	 DWORD PTR [ecx]

; 254  : 				}
; 255  : 				else

  00cea	eb 22		 jmp	 SHORT $LN1@DropZen
$LN2@DropZen:

; 256  : 				{
; 257  : 					money += ( money * 100 ) / this->Exclusive[a].Value;

  00cec	8b 45 0c	 mov	 eax, DWORD PTR _money$[ebp]
  00cef	d9 00		 fld	 DWORD PTR [eax]
  00cf1	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00cf7	8b 4d f4	 mov	 ecx, DWORD PTR _a$219310[ebp]
  00cfa	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00cfd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00d00	da 74 0a 0c	 fidiv	 DWORD PTR [edx+ecx+12]
  00d04	8b 45 0c	 mov	 eax, DWORD PTR _money$[ebp]
  00d07	d8 00		 fadd	 DWORD PTR [eax]
  00d09	8b 4d 0c	 mov	 ecx, DWORD PTR _money$[ebp]
  00d0c	d9 19		 fstp	 DWORD PTR [ecx]
$LN1@DropZen:

; 258  : 				}
; 259  : 			}
; 260  : 		}
; 261  : 	}

  00d0e	e9 1d ff ff ff	 jmp	 $LN6@DropZen
$LN5@DropZen:
$LN16@DropZen:

; 262  : }

  00d13	5f		 pop	 edi
  00d14	5e		 pop	 esi
  00d15	5b		 pop	 ebx
  00d16	8b e5		 mov	 esp, ebp
  00d18	5d		 pop	 ebp
  00d19	c2 08 00	 ret	 8
?DropZen@cExclusiveOptions@@QAEXHAAM@Z ENDP		; cExclusiveOptions::DropZen
_TEXT	ENDS
PUBLIC	?ExpFunction@cExclusiveOptions@@QAEXHAA_J@Z	; cExclusiveOptions::ExpFunction
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_a$219342 = -16						; size = 4
_a$219332 = -12						; size = 4
_a$219324 = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_exp$ = 12						; size = 4
?ExpFunction@cExclusiveOptions@@QAEXHAA_J@Z PROC	; cExclusiveOptions::ExpFunction
; _this$ = ecx

; 265  : {

  00d20	55		 push	 ebp
  00d21	8b ec		 mov	 ebp, esp
  00d23	83 ec 50	 sub	 esp, 80			; 00000050H
  00d26	53		 push	 ebx
  00d27	56		 push	 esi
  00d28	57		 push	 edi
  00d29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 266  : 	if(!this->Enable) return;

  00d2c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d2f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00d32	85 c9		 test	 ecx, ecx
  00d34	75 05		 jne	 SHORT $LN22@ExpFunctio
  00d36	e9 64 03 00 00	 jmp	 $LN23@ExpFunctio
$LN22@ExpFunctio:

; 267  : 
; 268  : 	for(int a = 0; a < this->Count; a++)

  00d3b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _a$219324[ebp], 0
  00d42	eb 09		 jmp	 SHORT $LN21@ExpFunctio
$LN20@ExpFunctio:
  00d44	8b 45 f8	 mov	 eax, DWORD PTR _a$219324[ebp]
  00d47	83 c0 01	 add	 eax, 1
  00d4a	89 45 f8	 mov	 DWORD PTR _a$219324[ebp], eax
$LN21@ExpFunctio:
  00d4d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d50	8b 4d f8	 mov	 ecx, DWORD PTR _a$219324[ebp]
  00d53	3b 88 40 13 00
	00		 cmp	 ecx, DWORD PTR [eax+4928]
  00d59	0f 8d f8 00 00
	00		 jge	 $LN19@ExpFunctio

; 269  : 	{
; 270  : 		if(CheckInCharacterItem(aIndex,ITEMGET(this->Exclusive[a].Type,this->Exclusive[a].Index)) && this->Exclusive[a].Options == eExclusiveOpt::Exp)

  00d5f	8b 45 f8	 mov	 eax, DWORD PTR _a$219324[ebp]
  00d62	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00d65	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d68	0f bf 54 01 04	 movsx	 edx, WORD PTR [ecx+eax+4]
  00d6d	c1 e2 09	 shl	 edx, 9
  00d70	8b 45 f8	 mov	 eax, DWORD PTR _a$219324[ebp]
  00d73	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00d76	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d79	0f bf 44 01 06	 movsx	 eax, WORD PTR [ecx+eax+6]
  00d7e	03 d0		 add	 edx, eax
  00d80	52		 push	 edx
  00d81	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00d84	51		 push	 ecx
  00d85	e8 00 00 00 00	 call	 ?CheckInCharacterItem@@YA_NHH@Z ; CheckInCharacterItem
  00d8a	83 c4 08	 add	 esp, 8
  00d8d	0f b6 d0	 movzx	 edx, al
  00d90	85 d2		 test	 edx, edx
  00d92	0f 84 ba 00 00
	00		 je	 $LN18@ExpFunctio
  00d98	8b 45 f8	 mov	 eax, DWORD PTR _a$219324[ebp]
  00d9b	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00d9e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00da1	0f bf 54 01 08	 movsx	 edx, WORD PTR [ecx+eax+8]
  00da6	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  00da9	0f 85 a3 00 00
	00		 jne	 $LN18@ExpFunctio

; 271  : 		{
; 272  : 			if(this->Exclusive[a].Options)

  00daf	8b 45 f8	 mov	 eax, DWORD PTR _a$219324[ebp]
  00db2	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00db5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00db8	0f bf 54 01 08	 movsx	 edx, WORD PTR [ecx+eax+8]
  00dbd	85 d2		 test	 edx, edx
  00dbf	0f 84 8d 00 00
	00		 je	 $LN18@ExpFunctio

; 273  : 			{
; 274  : 				if (g_ExLicense.CheckUser(eExUB::Cherkashin))

  00dc5	6a 12		 push	 18			; 00000012H
  00dc7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00dcc	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00dd1	0f b6 c0	 movzx	 eax, al
  00dd4	85 c0		 test	 eax, eax
  00dd6	74 3c		 je	 SHORT $LN16@ExpFunctio

; 275  : 				{
; 276  : 					exp += ( exp * this->Exclusive[a].Value)/100;

  00dd8	8b 45 f8	 mov	 eax, DWORD PTR _a$219324[ebp]
  00ddb	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00dde	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00de1	8b 44 01 0c	 mov	 eax, DWORD PTR [ecx+eax+12]
  00de5	99		 cdq
  00de6	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00de9	52		 push	 edx
  00dea	50		 push	 eax
  00deb	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00dee	52		 push	 edx
  00def	8b 01		 mov	 eax, DWORD PTR [ecx]
  00df1	50		 push	 eax
  00df2	e8 00 00 00 00	 call	 __allmul
  00df7	6a 00		 push	 0
  00df9	6a 64		 push	 100			; 00000064H
  00dfb	52		 push	 edx
  00dfc	50		 push	 eax
  00dfd	e8 00 00 00 00	 call	 __alldiv
  00e02	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00e05	03 01		 add	 eax, DWORD PTR [ecx]
  00e07	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  00e0a	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00e0d	89 01		 mov	 DWORD PTR [ecx], eax
  00e0f	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 277  : 				}
; 278  : 				else

  00e12	eb 3e		 jmp	 SHORT $LN18@ExpFunctio
$LN16@ExpFunctio:

; 279  : 				{
; 280  : 					exp += ( exp * 100 ) / this->Exclusive[a].Value;

  00e14	8b 45 0c	 mov	 eax, DWORD PTR _exp$[ebp]
  00e17	6a 00		 push	 0
  00e19	6a 64		 push	 100			; 00000064H
  00e1b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e1e	51		 push	 ecx
  00e1f	8b 10		 mov	 edx, DWORD PTR [eax]
  00e21	52		 push	 edx
  00e22	e8 00 00 00 00	 call	 __allmul
  00e27	8b c8		 mov	 ecx, eax
  00e29	8b f2		 mov	 esi, edx
  00e2b	8b 55 f8	 mov	 edx, DWORD PTR _a$219324[ebp]
  00e2e	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00e31	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e34	8b 44 10 0c	 mov	 eax, DWORD PTR [eax+edx+12]
  00e38	99		 cdq
  00e39	52		 push	 edx
  00e3a	50		 push	 eax
  00e3b	56		 push	 esi
  00e3c	51		 push	 ecx
  00e3d	e8 00 00 00 00	 call	 __alldiv
  00e42	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00e45	03 01		 add	 eax, DWORD PTR [ecx]
  00e47	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  00e4a	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00e4d	89 01		 mov	 DWORD PTR [ecx], eax
  00e4f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@ExpFunctio:

; 281  : 				}
; 282  : 				
; 283  : 			}
; 284  : 		}
; 285  : 	}

  00e52	e9 ed fe ff ff	 jmp	 $LN20@ExpFunctio
$LN19@ExpFunctio:

; 286  : 
; 287  : 	for(int a = 0; a < this->CountInv; a++)

  00e57	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _a$219332[ebp], 0
  00e5e	eb 09		 jmp	 SHORT $LN14@ExpFunctio
$LN13@ExpFunctio:
  00e60	8b 45 f4	 mov	 eax, DWORD PTR _a$219332[ebp]
  00e63	83 c0 01	 add	 eax, 1
  00e66	89 45 f4	 mov	 DWORD PTR _a$219332[ebp], eax
$LN14@ExpFunctio:
  00e69	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e6c	8b 4d f4	 mov	 ecx, DWORD PTR _a$219332[ebp]
  00e6f	3b 88 44 13 00
	00		 cmp	 ecx, DWORD PTR [eax+4932]
  00e75	0f 8d 04 01 00
	00		 jge	 $LN12@ExpFunctio

; 288  : 	{
; 289  : 		if(CheckInventoryItem(aIndex,ITEMGET(this->ExclusiveInv[a].Type,this->ExclusiveInv[a].Index)) && this->ExclusiveInv[a].Options == eExclusiveOpt::Exp)

  00e7b	8b 45 f4	 mov	 eax, DWORD PTR _a$219332[ebp]
  00e7e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00e81	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e84	0f bf 94 01 64
	09 00 00	 movsx	 edx, WORD PTR [ecx+eax+2404]
  00e8c	c1 e2 09	 shl	 edx, 9
  00e8f	8b 45 f4	 mov	 eax, DWORD PTR _a$219332[ebp]
  00e92	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00e95	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e98	0f bf 84 01 66
	09 00 00	 movsx	 eax, WORD PTR [ecx+eax+2406]
  00ea0	03 d0		 add	 edx, eax
  00ea2	52		 push	 edx
  00ea3	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00ea6	51		 push	 ecx
  00ea7	e8 00 00 00 00	 call	 ?CheckInventoryItem@@YA_NHH@Z ; CheckInventoryItem
  00eac	83 c4 08	 add	 esp, 8
  00eaf	0f b6 d0	 movzx	 edx, al
  00eb2	85 d2		 test	 edx, edx
  00eb4	0f 84 c0 00 00
	00		 je	 $LN11@ExpFunctio
  00eba	8b 45 f4	 mov	 eax, DWORD PTR _a$219332[ebp]
  00ebd	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00ec0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ec3	0f bf 94 01 68
	09 00 00	 movsx	 edx, WORD PTR [ecx+eax+2408]
  00ecb	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  00ece	0f 85 a6 00 00
	00		 jne	 $LN11@ExpFunctio

; 290  : 		{
; 291  : 			if(this->ExclusiveInv[a].Options)

  00ed4	8b 45 f4	 mov	 eax, DWORD PTR _a$219332[ebp]
  00ed7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00eda	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00edd	0f bf 94 01 68
	09 00 00	 movsx	 edx, WORD PTR [ecx+eax+2408]
  00ee5	85 d2		 test	 edx, edx
  00ee7	0f 84 8d 00 00
	00		 je	 $LN11@ExpFunctio

; 292  : 			{
; 293  : 				if (g_ExLicense.CheckUser(eExUB::Cherkashin))

  00eed	6a 12		 push	 18			; 00000012H
  00eef	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00ef4	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00ef9	0f b6 c0	 movzx	 eax, al
  00efc	85 c0		 test	 eax, eax
  00efe	74 3c		 je	 SHORT $LN9@ExpFunctio

; 294  : 				{
; 295  : 					exp += ( exp * this->Exclusive[a].Value)/100;

  00f00	8b 45 f4	 mov	 eax, DWORD PTR _a$219332[ebp]
  00f03	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00f06	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f09	8b 44 01 0c	 mov	 eax, DWORD PTR [ecx+eax+12]
  00f0d	99		 cdq
  00f0e	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00f11	52		 push	 edx
  00f12	50		 push	 eax
  00f13	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00f16	52		 push	 edx
  00f17	8b 01		 mov	 eax, DWORD PTR [ecx]
  00f19	50		 push	 eax
  00f1a	e8 00 00 00 00	 call	 __allmul
  00f1f	6a 00		 push	 0
  00f21	6a 64		 push	 100			; 00000064H
  00f23	52		 push	 edx
  00f24	50		 push	 eax
  00f25	e8 00 00 00 00	 call	 __alldiv
  00f2a	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00f2d	03 01		 add	 eax, DWORD PTR [ecx]
  00f2f	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  00f32	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00f35	89 01		 mov	 DWORD PTR [ecx], eax
  00f37	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 296  : 				}
; 297  : 				else

  00f3a	eb 3e		 jmp	 SHORT $LN11@ExpFunctio
$LN9@ExpFunctio:

; 298  : 				{
; 299  : 					exp += ( exp * 100 ) / this->Exclusive[a].Value;

  00f3c	8b 45 0c	 mov	 eax, DWORD PTR _exp$[ebp]
  00f3f	6a 00		 push	 0
  00f41	6a 64		 push	 100			; 00000064H
  00f43	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00f46	51		 push	 ecx
  00f47	8b 10		 mov	 edx, DWORD PTR [eax]
  00f49	52		 push	 edx
  00f4a	e8 00 00 00 00	 call	 __allmul
  00f4f	8b c8		 mov	 ecx, eax
  00f51	8b f2		 mov	 esi, edx
  00f53	8b 55 f4	 mov	 edx, DWORD PTR _a$219332[ebp]
  00f56	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00f59	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f5c	8b 44 10 0c	 mov	 eax, DWORD PTR [eax+edx+12]
  00f60	99		 cdq
  00f61	52		 push	 edx
  00f62	50		 push	 eax
  00f63	56		 push	 esi
  00f64	51		 push	 ecx
  00f65	e8 00 00 00 00	 call	 __alldiv
  00f6a	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00f6d	03 01		 add	 eax, DWORD PTR [ecx]
  00f6f	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  00f72	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00f75	89 01		 mov	 DWORD PTR [ecx], eax
  00f77	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN11@ExpFunctio:

; 300  : 				}
; 301  : 			}
; 302  : 		}
; 303  : 	}

  00f7a	e9 e1 fe ff ff	 jmp	 $LN13@ExpFunctio
$LN12@ExpFunctio:

; 304  : #ifdef EXCLUSIVE_AMYLET
; 305  : 	if(g_ExLicense.CheckUser(eExUB::ulasevich) || g_ExLicense.CheckUser(eExUB::Local3) || g_ExLicense.CheckUser(eExUB::Local) || g_ExLicense.CheckUser(eExUB::ulasevich2))

  00f7f	6a 17		 push	 23			; 00000017H
  00f81	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00f86	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00f8b	0f b6 c0	 movzx	 eax, al
  00f8e	85 c0		 test	 eax, eax
  00f90	75 3d		 jne	 SHORT $LN6@ExpFunctio
  00f92	6a 1c		 push	 28			; 0000001cH
  00f94	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00f99	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00f9e	0f b6 c0	 movzx	 eax, al
  00fa1	85 c0		 test	 eax, eax
  00fa3	75 2a		 jne	 SHORT $LN6@ExpFunctio
  00fa5	6a 00		 push	 0
  00fa7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00fac	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00fb1	0f b6 c0	 movzx	 eax, al
  00fb4	85 c0		 test	 eax, eax
  00fb6	75 17		 jne	 SHORT $LN6@ExpFunctio
  00fb8	6a 24		 push	 36			; 00000024H
  00fba	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00fbf	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00fc4	0f b6 c0	 movzx	 eax, al
  00fc7	85 c0		 test	 eax, eax
  00fc9	0f 84 d0 00 00
	00		 je	 $LN23@ExpFunctio
$LN6@ExpFunctio:

; 306  : 	{
; 307  : 	for(int a = 0; a < this->CountInvTime; a++)

  00fcf	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$219342[ebp], 0
  00fd6	eb 09		 jmp	 SHORT $LN5@ExpFunctio
$LN4@ExpFunctio:
  00fd8	8b 45 f0	 mov	 eax, DWORD PTR _a$219342[ebp]
  00fdb	83 c0 01	 add	 eax, 1
  00fde	89 45 f0	 mov	 DWORD PTR _a$219342[ebp], eax
$LN5@ExpFunctio:
  00fe1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00fe4	8b 4d f0	 mov	 ecx, DWORD PTR _a$219342[ebp]
  00fe7	3b 88 3c 13 00
	00		 cmp	 ecx, DWORD PTR [eax+4924]
  00fed	0f 8d ac 00 00
	00		 jge	 $LN23@ExpFunctio

; 308  : 	{
; 309  : 		if(CheckInventoryItem(aIndex,ITEMGET(this->ExclusiveInvTime[a].Type,this->ExclusiveInvTime[a].Index)) && this->ExclusiveInvTime[a].Options == eExclusiveOpt::Exp)

  00ff3	8b 45 f0	 mov	 eax, DWORD PTR _a$219342[ebp]
  00ff6	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00ff9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ffc	0f bf 94 01 c4
	12 00 00	 movsx	 edx, WORD PTR [ecx+eax+4804]
  01004	c1 e2 09	 shl	 edx, 9
  01007	8b 45 f0	 mov	 eax, DWORD PTR _a$219342[ebp]
  0100a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0100d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01010	0f bf 84 01 c6
	12 00 00	 movsx	 eax, WORD PTR [ecx+eax+4806]
  01018	03 d0		 add	 edx, eax
  0101a	52		 push	 edx
  0101b	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0101e	51		 push	 ecx
  0101f	e8 00 00 00 00	 call	 ?CheckInventoryItem@@YA_NHH@Z ; CheckInventoryItem
  01024	83 c4 08	 add	 esp, 8
  01027	0f b6 d0	 movzx	 edx, al
  0102a	85 d2		 test	 edx, edx
  0102c	74 6c		 je	 SHORT $LN2@ExpFunctio
  0102e	8b 45 f0	 mov	 eax, DWORD PTR _a$219342[ebp]
  01031	6b c0 0c	 imul	 eax, 12			; 0000000cH
  01034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01037	0f bf 94 01 c8
	12 00 00	 movsx	 edx, WORD PTR [ecx+eax+4808]
  0103f	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  01042	75 56		 jne	 SHORT $LN2@ExpFunctio

; 310  : 		{
; 311  : 			if(this->ExclusiveInvTime[a].Options)

  01044	8b 45 f0	 mov	 eax, DWORD PTR _a$219342[ebp]
  01047	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0104a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0104d	0f bf 94 01 c8
	12 00 00	 movsx	 edx, WORD PTR [ecx+eax+4808]
  01055	85 d2		 test	 edx, edx
  01057	74 41		 je	 SHORT $LN2@ExpFunctio

; 312  : 			{
; 313  : 				exp += ( exp * 100 ) / this->ExclusiveInvTime[a].Value;

  01059	8b 45 0c	 mov	 eax, DWORD PTR _exp$[ebp]
  0105c	6a 00		 push	 0
  0105e	6a 64		 push	 100			; 00000064H
  01060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01063	51		 push	 ecx
  01064	8b 10		 mov	 edx, DWORD PTR [eax]
  01066	52		 push	 edx
  01067	e8 00 00 00 00	 call	 __allmul
  0106c	8b c8		 mov	 ecx, eax
  0106e	8b f2		 mov	 esi, edx
  01070	8b 55 f0	 mov	 edx, DWORD PTR _a$219342[ebp]
  01073	6b d2 0c	 imul	 edx, 12			; 0000000cH
  01076	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01079	8b 84 10 cc 12
	00 00		 mov	 eax, DWORD PTR [eax+edx+4812]
  01080	99		 cdq
  01081	52		 push	 edx
  01082	50		 push	 eax
  01083	56		 push	 esi
  01084	51		 push	 ecx
  01085	e8 00 00 00 00	 call	 __alldiv
  0108a	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  0108d	03 01		 add	 eax, DWORD PTR [ecx]
  0108f	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  01092	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  01095	89 01		 mov	 DWORD PTR [ecx], eax
  01097	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN2@ExpFunctio:

; 314  : 			}
; 315  : 		}
; 316  : 	}

  0109a	e9 39 ff ff ff	 jmp	 $LN4@ExpFunctio
$LN23@ExpFunctio:

; 317  : 	}
; 318  : #endif
; 319  : }

  0109f	5f		 pop	 edi
  010a0	5e		 pop	 esi
  010a1	5b		 pop	 ebx
  010a2	8b e5		 mov	 esp, ebp
  010a4	5d		 pop	 ebp
  010a5	c2 08 00	 ret	 8
?ExpFunction@cExclusiveOptions@@QAEXHAA_J@Z ENDP	; cExclusiveOptions::ExpFunction
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?TickTime@cExclusiveOptions@@QAEXH@Z		; cExclusiveOptions::TickTime
EXTRN	?gObjInventoryDeleteItem@@YAEHH@Z:PROC		; gObjInventoryDeleteItem
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_a$219356 = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?TickTime@cExclusiveOptions@@QAEXH@Z PROC		; cExclusiveOptions::TickTime
; _this$ = ecx

; 324  : {

  010b0	55		 push	 ebp
  010b1	8b ec		 mov	 ebp, esp
  010b3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  010b6	53		 push	 ebx
  010b7	56		 push	 esi
  010b8	57		 push	 edi
  010b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  : 	if(!this->Enable) return;

  010bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010bf	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  010c2	85 c9		 test	 ecx, ecx
  010c4	75 05		 jne	 SHORT $LN11@TickTime
  010c6	e9 9e 01 00 00	 jmp	 $LN12@TickTime
$LN11@TickTime:

; 326  : 	LPOBJ lpObj = &gObj[aIndex];

  010cb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  010ce	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  010d4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  010da	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 327  : 	if(g_ExLicense.CheckUser(eExUB::ulasevich) || g_ExLicense.CheckUser(eExUB::Local3) || g_ExLicense.CheckUser(eExUB::Local) || g_ExLicense.CheckUser(eExUB::ulasevich2))

  010dd	6a 17		 push	 23			; 00000017H
  010df	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  010e4	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  010e9	0f b6 c0	 movzx	 eax, al
  010ec	85 c0		 test	 eax, eax
  010ee	75 3d		 jne	 SHORT $LN9@TickTime
  010f0	6a 1c		 push	 28			; 0000001cH
  010f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  010f7	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  010fc	0f b6 c0	 movzx	 eax, al
  010ff	85 c0		 test	 eax, eax
  01101	75 2a		 jne	 SHORT $LN9@TickTime
  01103	6a 00		 push	 0
  01105	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0110a	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0110f	0f b6 c0	 movzx	 eax, al
  01112	85 c0		 test	 eax, eax
  01114	75 17		 jne	 SHORT $LN9@TickTime
  01116	6a 24		 push	 36			; 00000024H
  01118	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0111d	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01122	0f b6 c0	 movzx	 eax, al
  01125	85 c0		 test	 eax, eax
  01127	0f 84 3c 01 00
	00		 je	 $LN6@TickTime
$LN9@TickTime:

; 328  : 	{
; 329  : 		for(int a = 0; a < this->CountInvTime; a++)

  0112d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _a$219356[ebp], 0
  01134	eb 09		 jmp	 SHORT $LN8@TickTime
$LN7@TickTime:
  01136	8b 45 f4	 mov	 eax, DWORD PTR _a$219356[ebp]
  01139	83 c0 01	 add	 eax, 1
  0113c	89 45 f4	 mov	 DWORD PTR _a$219356[ebp], eax
$LN8@TickTime:
  0113f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01142	8b 4d f4	 mov	 ecx, DWORD PTR _a$219356[ebp]
  01145	3b 88 3c 13 00
	00		 cmp	 ecx, DWORD PTR [eax+4924]
  0114b	0f 8d 18 01 00
	00		 jge	 $LN6@TickTime

; 330  : 		{
; 331  : 			if(CheckInCharacterItem(aIndex,ITEMGET(this->ExclusiveInvTime[a].Type,this->ExclusiveInvTime[a].Index)))

  01151	8b 45 f4	 mov	 eax, DWORD PTR _a$219356[ebp]
  01154	6b c0 0c	 imul	 eax, 12			; 0000000cH
  01157	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0115a	0f bf 94 01 c4
	12 00 00	 movsx	 edx, WORD PTR [ecx+eax+4804]
  01162	c1 e2 09	 shl	 edx, 9
  01165	8b 45 f4	 mov	 eax, DWORD PTR _a$219356[ebp]
  01168	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0116b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0116e	0f bf 84 01 c6
	12 00 00	 movsx	 eax, WORD PTR [ecx+eax+4806]
  01176	03 d0		 add	 edx, eax
  01178	52		 push	 edx
  01179	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0117c	51		 push	 ecx
  0117d	e8 00 00 00 00	 call	 ?CheckInCharacterItem@@YA_NHH@Z ; CheckInCharacterItem
  01182	83 c4 08	 add	 esp, 8
  01185	0f b6 d0	 movzx	 edx, al
  01188	85 d2		 test	 edx, edx
  0118a	0f 84 d4 00 00
	00		 je	 $LN1@TickTime

; 332  : 			{
; 333  : 			//	switch(this->ExclusiveInv[a].Options)
; 334  : 				if(lpObj->pInventory[9].m_Type == ITEMGET(this->ExclusiveInvTime[a].Type,this->ExclusiveInvTime[a].Index))

  01190	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01193	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  01199	0f bf 91 7a 07
	00 00		 movsx	 edx, WORD PTR [ecx+1914]
  011a0	8b 45 f4	 mov	 eax, DWORD PTR _a$219356[ebp]
  011a3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  011a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011a9	0f bf 84 01 c4
	12 00 00	 movsx	 eax, WORD PTR [ecx+eax+4804]
  011b1	c1 e0 09	 shl	 eax, 9
  011b4	8b 4d f4	 mov	 ecx, DWORD PTR _a$219356[ebp]
  011b7	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  011ba	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  011bd	0f bf 8c 0e c6
	12 00 00	 movsx	 ecx, WORD PTR [esi+ecx+4806]
  011c5	03 c1		 add	 eax, ecx
  011c7	3b d0		 cmp	 edx, eax
  011c9	0f 85 95 00 00
	00		 jne	 $LN1@TickTime

; 335  : 				{
; 336  : 					if(lpObj->pInventory[9].m_Durability < 1.0f)

  011cf	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011d2	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  011d8	d9 81 98 07 00
	00		 fld	 DWORD PTR [ecx+1944]
  011de	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  011e4	df e0		 fnstsw	 ax
  011e6	f6 c4 05	 test	 ah, 5
  011e9	7a 12		 jp	 SHORT $LN3@TickTime

; 337  : 					{
; 338  : 						gObjInventoryDeleteItem(lpObj->m_Index,9);

  011eb	6a 09		 push	 9
  011ed	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  011f2	51		 push	 ecx
  011f3	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem
  011f8	83 c4 08	 add	 esp, 8

; 339  : 
; 340  : 						return;

  011fb	eb 6c		 jmp	 SHORT $LN12@TickTime
$LN3@TickTime:

; 341  : 					}	
; 342  : 					if(lpObj->ExclusiveItemTime[a] > 960)//16 minutes

  011fd	8b 45 f4	 mov	 eax, DWORD PTR _a$219356[ebp]
  01200	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01203	81 bc 81 40 28
	00 00 c0 03 00
	00		 cmp	 DWORD PTR [ecx+eax*4+10304], 960 ; 000003c0H
  0120e	7e 37		 jle	 SHORT $LN2@TickTime

; 343  : 					{
; 344  : 						lpObj->pInventory[9].m_Durability--;

  01210	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01213	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  01219	d9 81 98 07 00
	00		 fld	 DWORD PTR [ecx+1944]
  0121f	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  01225	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01228	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  0122e	d9 98 98 07 00
	00		 fstp	 DWORD PTR [eax+1944]

; 345  : 						lpObj->ExclusiveItemTime[a] = 0;

  01234	8b 45 f4	 mov	 eax, DWORD PTR _a$219356[ebp]
  01237	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0123a	c7 84 81 40 28
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+10304], 0

; 346  : 					}
; 347  : 					else

  01245	eb 1d		 jmp	 SHORT $LN1@TickTime
$LN2@TickTime:

; 348  : 					{
; 349  : 						lpObj->ExclusiveItemTime[a]++;

  01247	8b 45 f4	 mov	 eax, DWORD PTR _a$219356[ebp]
  0124a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0124d	8b 94 81 40 28
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+10304]
  01254	83 c2 01	 add	 edx, 1
  01257	8b 45 f4	 mov	 eax, DWORD PTR _a$219356[ebp]
  0125a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0125d	89 94 81 40 28
	00 00		 mov	 DWORD PTR [ecx+eax*4+10304], edx
$LN1@TickTime:

; 350  : 					}
; 351  : 				}
; 352  : 			}
; 353  : 		}

  01264	e9 cd fe ff ff	 jmp	 $LN7@TickTime
$LN6@TickTime:
$LN12@TickTime:

; 354  : 	}
; 355  : }

  01269	5f		 pop	 edi
  0126a	5e		 pop	 esi
  0126b	5b		 pop	 ebx
  0126c	8b e5		 mov	 esp, ebp
  0126e	5d		 pop	 ebp
  0126f	c2 04 00	 ret	 4
?TickTime@cExclusiveOptions@@QAEXH@Z ENDP		; cExclusiveOptions::TickTime
_TEXT	ENDS
END
