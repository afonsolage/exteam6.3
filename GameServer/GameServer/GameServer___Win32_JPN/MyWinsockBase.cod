; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\common\MyWinsockBase.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Startup@MyWinsockBase@@AAEHXZ			; MyWinsockBase::Startup
PUBLIC	??0MyWinsockBase@@QAE@XZ			; MyWinsockBase::MyWinsockBase
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\common\mywinsockbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MyWinsockBase@@QAE@XZ PROC				; MyWinsockBase::MyWinsockBase
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 8    : 	m_socket = INVALID_SOCKET;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 9    : 	Startup();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?Startup@MyWinsockBase@@AAEHXZ ; MyWinsockBase::Startup

; 10   : }

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0MyWinsockBase@@QAE@XZ ENDP				; MyWinsockBase::MyWinsockBase
_TEXT	ENDS
PUBLIC	??1MyWinsockBase@@QAE@XZ			; MyWinsockBase::~MyWinsockBase
EXTRN	__imp__WSACleanup@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MyWinsockBase@@QAE@XZ PROC				; MyWinsockBase::~MyWinsockBase
; _this$ = ecx

; 13   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 14   : 	WSACleanup();

  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSACleanup@0

; 15   : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??1MyWinsockBase@@QAE@XZ ENDP				; MyWinsockBase::~MyWinsockBase
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GGDDBEFH@WINSOCK?5?$LJ?v?$MA?$PM?$MA?L?5?$LD?$LH?$LN?$MA?$LE?O?$LE?Y?4?$AA@ ; `string'
PUBLIC	??_C@_0BE@DMEOAPJM@WINSOCK?5?C?J?$LB?b?H?$KN?5?$LP?$KB?$LH?$KP?$AA@ ; `string'
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BJ@GGDDBEFH@WINSOCK?5?$LJ?v?$MA?$PM?$MA?L?5?$LD?$LH?$LN?$MA?$LE?O?$LE?Y?4?$AA@
CONST	SEGMENT
??_C@_0BJ@GGDDBEFH@WINSOCK?5?$LJ?v?$MA?$PM?$MA?L?5?$LD?$LH?$LN?$MA?$LE?O?$LE?Y?4?$AA@ DB 'W'
	DB	'INSOCK ', 0b9H, 0f6H, 0c0H, 0fcH, 0c0H, 0ccH, ' ', 0b3H, 0b7H
	DB	0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DMEOAPJM@WINSOCK?5?C?J?$LB?b?H?$KN?5?$LP?$KB?$LH?$KP?$AA@
CONST	SEGMENT
??_C@_0BE@DMEOAPJM@WINSOCK?5?C?J?$LB?b?H?$KN?5?$LP?$KB?$LH?$KP?$AA@ DB 'W'
	DB	'INSOCK ', 0c3H, 0caH, 0b1H, 0e2H, 0c8H, 0adH, ' ', 0bfH, 0a1H
	DB	0b7H, 0afH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_err$ = -416						; size = 4
_wsaData$ = -412					; size = 400
_wVersionRequested$ = -12				; size = 2
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Startup@MyWinsockBase@@AAEHXZ PROC			; MyWinsockBase::Startup
; _this$ = ecx

; 18   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	81 ec e0 01 00
	00		 sub	 esp, 480		; 000001e0H
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0005e	33 c5		 xor	 eax, ebp
  00060	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00063	53		 push	 ebx
  00064	56		 push	 esi
  00065	57		 push	 edi
  00066	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	WORD wVersionRequested;
; 20   : 	WSADATA wsaData;
; 21   : 	int err;
; 22   : 
; 23   : 	wVersionRequested = MAKEWORD(2,2);

  00069	b8 02 02 00 00	 mov	 eax, 514		; 00000202H
  0006e	66 89 45 f4	 mov	 WORD PTR _wVersionRequested$[ebp], ax

; 24   : 
; 25   : 	err = WSAStartup( wVersionRequested, &wsaData);

  00072	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR _wsaData$[ebp]
  00078	50		 push	 eax
  00079	0f b7 4d f4	 movzx	 ecx, WORD PTR _wVersionRequested$[ebp]
  0007d	51		 push	 ecx
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8
  00084	89 85 60 fe ff
	ff		 mov	 DWORD PTR _err$[ebp], eax

; 26   : 	if( err != 0)

  0008a	83 bd 60 fe ff
	ff 00		 cmp	 DWORD PTR _err$[ebp], 0
  00091	74 18		 je	 SHORT $LN3@Startup

; 27   : 	{
; 28   : 		MessageBox(NULL,"WINSOCK 초기화 에러","Error",MB_OK);

  00093	6a 00		 push	 0
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_05NAOIJFC@Error?$AA@
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DMEOAPJM@WINSOCK?5?C?J?$LB?b?H?$KN?5?$LP?$KB?$LH?$KP?$AA@
  0009f	6a 00		 push	 0
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 29   : 		return FALSE;

  000a7	33 c0		 xor	 eax, eax
  000a9	eb 61		 jmp	 SHORT $LN4@Startup
$LN3@Startup:

; 30   : 	}
; 31   : 	if ( LOBYTE( wsaData.wVersion ) != 2 ||
; 32   :         HIBYTE( wsaData.wVersion ) != 2 ) {

  000ab	0f b7 85 64 fe
	ff ff		 movzx	 eax, WORD PTR _wsaData$[ebp]
  000b2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000b7	0f b6 c8	 movzx	 ecx, al
  000ba	83 f9 02	 cmp	 ecx, 2
  000bd	75 17		 jne	 SHORT $LN1@Startup
  000bf	0f b7 85 64 fe
	ff ff		 movzx	 eax, WORD PTR _wsaData$[ebp]
  000c6	c1 e8 08	 shr	 eax, 8
  000c9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000ce	0f b6 c8	 movzx	 ecx, al
  000d1	83 f9 02	 cmp	 ecx, 2
  000d4	74 1e		 je	 SHORT $LN2@Startup
$LN1@Startup:

; 33   : 		WSACleanup( );

  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSACleanup@0

; 34   : 		MessageBox(NULL,"WINSOCK 버전이 낮습니다.","Error",MB_OK);

  000dc	6a 00		 push	 0
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_05NAOIJFC@Error?$AA@
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GGDDBEFH@WINSOCK?5?$LJ?v?$MA?$PM?$MA?L?5?$LD?$LH?$LN?$MA?$LE?O?$LE?Y?4?$AA@
  000e8	6a 00		 push	 0
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 35   : 		return FALSE;

  000f0	33 c0		 xor	 eax, eax
  000f2	eb 18		 jmp	 SHORT $LN4@Startup
$LN2@Startup:

; 36   : 	}
; 37   : 	m_socket = INVALID_SOCKET;

  000f4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f7	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 38   : 	m_iMaxSockets = wsaData.iMaxSockets;	

  000fe	0f b7 45 ea	 movzx	 eax, WORD PTR _wsaData$[ebp+390]
  00102	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	89 01		 mov	 DWORD PTR [ecx], eax

; 39   : 	return TRUE;

  00107	b8 01 00 00 00	 mov	 eax, 1
$LN4@Startup:

; 40   : }

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00112	33 cd		 xor	 ecx, ebp
  00114	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
?Startup@MyWinsockBase@@AAEHXZ ENDP			; MyWinsockBase::Startup
_TEXT	ENDS
PUBLIC	?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z	; MyWinsockBase::CreateSocket
EXTRN	__imp__socket@12:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_hWnd$ = 8						; size = 4
?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z PROC	; MyWinsockBase::CreateSocket
; _this$ = ecx

; 43   : {	

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp
  00123	83 ec 48	 sub	 esp, 72			; 00000048H
  00126	53		 push	 ebx
  00127	56		 push	 esi
  00128	57		 push	 edi
  00129	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 	int size = sizeof(int);

  0012c	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _size$[ebp], 4

; 45   : 
; 46   : 	m_socket = socket( PF_INET, SOCK_STREAM, 0);

  00133	6a 00		 push	 0
  00135	6a 01		 push	 1
  00137	6a 02		 push	 2
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  0013f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 47   : 	if( m_socket == INVALID_SOCKET ) 

  00145	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00148	83 78 08 ff	 cmp	 DWORD PTR [eax+8], -1
  0014c	75 04		 jne	 SHORT $LN1@CreateSock

; 48   : 	{
; 49   : 		return FALSE;

  0014e	33 c0		 xor	 eax, eax
  00150	eb 0e		 jmp	 SHORT $LN2@CreateSock
$LN1@CreateSock:

; 50   : 	}
; 51   : 
; 52   : 	m_hWnd = hWnd;

  00152	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00155	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00158	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 53   : 	return TRUE;

  0015b	b8 01 00 00 00	 mov	 eax, 1
$LN2@CreateSock:

; 54   : }

  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 04 00	 ret	 4
?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ENDP	; MyWinsockBase::CreateSocket
_TEXT	ENDS
PUBLIC	?Close@MyWinsockBase@@QAEHXZ			; MyWinsockBase::Close
EXTRN	__imp__closesocket@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@MyWinsockBase@@QAEHXZ PROC			; MyWinsockBase::Close
; _this$ = ecx

; 57   : {	

  00170	55		 push	 ebp
  00171	8b ec		 mov	 ebp, esp
  00173	83 ec 44	 sub	 esp, 68			; 00000044H
  00176	53		 push	 ebx
  00177	56		 push	 esi
  00178	57		 push	 edi
  00179	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 	closesocket(m_socket);

  0017c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00182	51		 push	 ecx
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 59   : 	m_socket = INVALID_SOCKET;

  00189	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018c	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 60   : 	return TRUE;

  00193	b8 01 00 00 00	 mov	 eax, 1

; 61   : }

  00198	5f		 pop	 edi
  00199	5e		 pop	 esi
  0019a	5b		 pop	 ebx
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
?Close@MyWinsockBase@@QAEHXZ ENDP			; MyWinsockBase::Close
_TEXT	ENDS
PUBLIC	?Close@MyWinsockBase@@QAEHI@Z			; MyWinsockBase::Close
EXTRN	__imp__shutdown@8:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_socket$ = 8						; size = 4
?Close@MyWinsockBase@@QAEHI@Z PROC			; MyWinsockBase::Close
; _this$ = ecx

; 65   : {

  001a0	55		 push	 ebp
  001a1	8b ec		 mov	 ebp, esp
  001a3	83 ec 44	 sub	 esp, 68			; 00000044H
  001a6	53		 push	 ebx
  001a7	56		 push	 esi
  001a8	57		 push	 edi
  001a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   : 	shutdown(socket,0);

  001ac	6a 00		 push	 0
  001ae	8b 45 08	 mov	 eax, DWORD PTR _socket$[ebp]
  001b1	50		 push	 eax
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__shutdown@8

; 67   : 	closesocket(socket);

  001b8	8b 45 08	 mov	 eax, DWORD PTR _socket$[ebp]
  001bb	50		 push	 eax
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 68   : 	m_socket = INVALID_SOCKET;

  001c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c5	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 69   : 	return TRUE;

  001cc	b8 01 00 00 00	 mov	 eax, 1

; 70   : }

  001d1	5f		 pop	 edi
  001d2	5e		 pop	 esi
  001d3	5b		 pop	 ebx
  001d4	8b e5		 mov	 esp, ebp
  001d6	5d		 pop	 ebp
  001d7	c2 04 00	 ret	 4
?Close@MyWinsockBase@@QAEHI@Z ENDP			; MyWinsockBase::Close
_TEXT	ENDS
PUBLIC	?Close2@MyWinsockBase@@QAEHI@Z			; MyWinsockBase::Close2
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_socket$ = 8						; size = 4
?Close2@MyWinsockBase@@QAEHI@Z PROC			; MyWinsockBase::Close2
; _this$ = ecx

; 73   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	83 ec 44	 sub	 esp, 68			; 00000044H
  001e6	53		 push	 ebx
  001e7	56		 push	 esi
  001e8	57		 push	 edi
  001e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	shutdown(m_socket,SD_SEND);

  001ec	6a 01		 push	 1
  001ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001f4	51		 push	 ecx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__shutdown@8

; 75   : 	closesocket(socket);

  001fb	8b 45 08	 mov	 eax, DWORD PTR _socket$[ebp]
  001fe	50		 push	 eax
  001ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 76   : 	m_socket = INVALID_SOCKET;

  00205	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00208	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 77   : 	return TRUE;

  0020f	b8 01 00 00 00	 mov	 eax, 1

; 78   : }

  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c2 04 00	 ret	 4
?Close2@MyWinsockBase@@QAEHI@Z ENDP			; MyWinsockBase::Close2
_TEXT	ENDS
PUBLIC	?GetSocket@MyWinsockBase@@QAEIXZ		; MyWinsockBase::GetSocket
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSocket@MyWinsockBase@@QAEIXZ PROC			; MyWinsockBase::GetSocket
; _this$ = ecx

; 82   : {

  00220	55		 push	 ebp
  00221	8b ec		 mov	 ebp, esp
  00223	83 ec 44	 sub	 esp, 68			; 00000044H
  00226	53		 push	 ebx
  00227	56		 push	 esi
  00228	57		 push	 edi
  00229	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	return m_socket;

  0022c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 84   : }

  00232	5f		 pop	 edi
  00233	5e		 pop	 esi
  00234	5b		 pop	 ebx
  00235	8b e5		 mov	 esp, ebp
  00237	5d		 pop	 ebp
  00238	c3		 ret	 0
?GetSocket@MyWinsockBase@@QAEIXZ ENDP			; MyWinsockBase::GetSocket
_TEXT	ENDS
PUBLIC	?GetRecvBuffSize@MyWinsockBase@@QAEHXZ		; MyWinsockBase::GetRecvBuffSize
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRecvBuffSize@MyWinsockBase@@QAEHXZ PROC		; MyWinsockBase::GetRecvBuffSize
; _this$ = ecx

; 87   : {

  00240	55		 push	 ebp
  00241	8b ec		 mov	 ebp, esp
  00243	83 ec 44	 sub	 esp, 68			; 00000044H
  00246	53		 push	 ebx
  00247	56		 push	 esi
  00248	57		 push	 edi
  00249	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 88   : 	return m_recvbufsize;

  0024c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 89   : }

  00252	5f		 pop	 edi
  00253	5e		 pop	 esi
  00254	5b		 pop	 ebx
  00255	8b e5		 mov	 esp, ebp
  00257	5d		 pop	 ebp
  00258	c3		 ret	 0
?GetRecvBuffSize@MyWinsockBase@@QAEHXZ ENDP		; MyWinsockBase::GetRecvBuffSize
_TEXT	ENDS
PUBLIC	?GetSendBuffSize@MyWinsockBase@@QAEHXZ		; MyWinsockBase::GetSendBuffSize
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSendBuffSize@MyWinsockBase@@QAEHXZ PROC		; MyWinsockBase::GetSendBuffSize
; _this$ = ecx

; 92   : {

  00260	55		 push	 ebp
  00261	8b ec		 mov	 ebp, esp
  00263	83 ec 44	 sub	 esp, 68			; 00000044H
  00266	53		 push	 ebx
  00267	56		 push	 esi
  00268	57		 push	 edi
  00269	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 	return m_sendbufsize;

  0026c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 94   : }

  00272	5f		 pop	 edi
  00273	5e		 pop	 esi
  00274	5b		 pop	 ebx
  00275	8b e5		 mov	 esp, ebp
  00277	5d		 pop	 ebp
  00278	c3		 ret	 0
?GetSendBuffSize@MyWinsockBase@@QAEHXZ ENDP		; MyWinsockBase::GetSendBuffSize
_TEXT	ENDS
PUBLIC	?GetConnect@MyWinsockBase@@QAEHXZ		; MyWinsockBase::GetConnect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetConnect@MyWinsockBase@@QAEHXZ PROC			; MyWinsockBase::GetConnect
; _this$ = ecx

; 97   : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 44	 sub	 esp, 68			; 00000044H
  00286	53		 push	 ebx
  00287	56		 push	 esi
  00288	57		 push	 edi
  00289	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 	return this->m_Connect;

  0028c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 99   : }

  00292	5f		 pop	 edi
  00293	5e		 pop	 esi
  00294	5b		 pop	 ebx
  00295	8b e5		 mov	 esp, ebp
  00297	5d		 pop	 ebp
  00298	c3		 ret	 0
?GetConnect@MyWinsockBase@@QAEHXZ ENDP			; MyWinsockBase::GetConnect
_TEXT	ENDS
PUBLIC	?SetConnect@MyWinsockBase@@QAEXH@Z		; MyWinsockBase::SetConnect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_connected$ = 8						; size = 4
?SetConnect@MyWinsockBase@@QAEXH@Z PROC			; MyWinsockBase::SetConnect
; _this$ = ecx

; 102  : {

  002a0	55		 push	 ebp
  002a1	8b ec		 mov	 ebp, esp
  002a3	83 ec 44	 sub	 esp, 68			; 00000044H
  002a6	53		 push	 ebx
  002a7	56		 push	 esi
  002a8	57		 push	 edi
  002a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 	this->m_Connect = connected;

  002ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002af	8b 4d 08	 mov	 ecx, DWORD PTR _connected$[ebp]
  002b2	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 104  : }

  002b5	5f		 pop	 edi
  002b6	5e		 pop	 esi
  002b7	5b		 pop	 ebx
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c2 04 00	 ret	 4
?SetConnect@MyWinsockBase@@QAEXH@Z ENDP			; MyWinsockBase::SetConnect
_TEXT	ENDS
END
