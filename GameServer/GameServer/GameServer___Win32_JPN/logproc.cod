; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\logproc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_cline@@3HA					; m_cline
PUBLIC	?LogText@@3PAY0IM@DA				; LogText
PUBLIC	?LogTextLength@@3PAFA				; LogTextLength
PUBLIC	?LogTextViewType@@3PAEA				; LogTextViewType
PUBLIC	?LogAdd@@3P6AXPADZZA				; LogAdd
PUBLIC	?LogAddC@@3P6AXEPADZZA				; LogAddC
PUBLIC	?LogAddTD@@3P6AXPADZZA				; LogAddTD
PUBLIC	?LogAddHeadHex@@3P6AXPAD0H@ZA			; LogAddHeadHex
PUBLIC	?LogAddL@@3P6AXPADZZA				; LogAddL
PUBLIC	?LogTextPaint@@3P6AXPAUHWND__@@@ZA		; LogTextPaint
PUBLIC	?LogCritical@@3U_RTL_CRITICAL_SECTION@@A	; LogCritical
PUBLIC	?LogMDay@@3HA					; LogMDay
PUBLIC	?LogMonth@@3HA					; LogMonth
PUBLIC	?LogMYear@@3HA					; LogMYear
PUBLIC	?LogMHour@@3HA					; LogMHour
_BSS	SEGMENT
?m_cline@@3HA DD 01H DUP (?)				; m_cline
?LogText@@3PAY0IM@DA DB 01068H DUP (?)			; LogText
?LogTextLength@@3PAFA DW 01eH DUP (?)			; LogTextLength
?LogTextViewType@@3PAEA DB 01eH DUP (?)			; LogTextViewType
	ALIGN	4

?LogAdd@@3P6AXPADZZA DD 01H DUP (?)			; LogAdd
?LogAddC@@3P6AXEPADZZA DD 01H DUP (?)			; LogAddC
?LogAddTD@@3P6AXPADZZA DD 01H DUP (?)			; LogAddTD
?LogAddHeadHex@@3P6AXPAD0H@ZA DD 01H DUP (?)		; LogAddHeadHex
?LogAddL@@3P6AXPADZZA DD 01H DUP (?)			; LogAddL
?LogTextPaint@@3P6AXPAUHWND__@@@ZA DD 01H DUP (?)	; LogTextPaint
?LogCritical@@3U_RTL_CRITICAL_SECTION@@A DB 018H DUP (?) ; LogCritical
?LogMDay@@3HA DD 01H DUP (?)				; LogMDay
?LogMonth@@3HA DD 01H DUP (?)				; LogMonth
?LogMYear@@3HA DD 01H DUP (?)				; LogMYear
?LogMHour@@3HA DD 01H DUP (?)				; LogMHour
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?LogAddLocalFuncVoid@@YAXPADZZ			; LogAddLocalFuncVoid
PUBLIC	?LogAddTimeDateVoid@@YAXPADZZ			; LogAddTimeDateVoid
PUBLIC	?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z		; LogTextPaintProcVoid
PUBLIC	?LogAddHeadHexFuncVoid@@YAXPAD0H@Z		; LogAddHeadHexFuncVoid
PUBLIC	?LogAddFuncVoid@@YAXPADZZ			; LogAddFuncVoid
PUBLIC	?LogDataSet@@YAXXZ				; LogDataSet
PUBLIC	?LogAddLocalFunc@@YAXPADZZ			; LogAddLocalFunc
PUBLIC	?LogTextPaintProc@@YAXPAUHWND__@@@Z		; LogTextPaintProc
PUBLIC	?LogAddStrHexFunc@@YAXPAD0H@Z			; LogAddStrHexFunc
PUBLIC	?LogAddTimeDateFunc@@YAXPADZZ			; LogAddTimeDateFunc
PUBLIC	?LogAddFuncColor@@YAXEPADZZ			; LogAddFuncColor
PUBLIC	?LogAddFunc@@YAXPADZZ				; LogAddFunc
PUBLIC	??_C@_03MLIHNEFJ@LOG?$AA@			; `string'
PUBLIC	?LogInit@@YAXH@Z				; LogInit
EXTRN	_memset:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__except_handler4:PROC
;	COMDAT ??_C@_03MLIHNEFJ@LOG?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\logproc.cpp
CONST	SEGMENT
??_C@_03MLIHNEFJ@LOG?$AA@ DB 'LOG', 00H			; `string'
CONST	ENDS
xdata$x	SEGMENT
__sehtable$?LogInit@@YAXH@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff90H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN12@LogInit
	DD	FLAT:$LN13@LogInit
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231223 = -96						; size = 4
_n$230810 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_logprint$ = 8						; size = 4
?LogInit@@YAXH@Z PROC					; LogInit

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogInit@@YAXH@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 c4 b0	 add	 esp, -80		; ffffffb0H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 35   : 	CreateDirectory("LOG", NULL);

  00033	6a 00		 push	 0
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_03MLIHNEFJ@LOG?$AA@
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 36   : 
; 37   : 	__try

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 38   : 	{
; 39   : 		int n;
; 40   : 		InitializeCriticalSection(&LogCritical);

  00047	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 41   : 
; 42   : 		// Create yes no Log
; 43   : 		if (logprint!=0)		

  00052	83 7d 08 00	 cmp	 DWORD PTR _logprint$[ebp], 0
  00056	0f 84 a6 00 00
	00		 je	 $LN7@LogInit

; 44   : 		{
; 45   : 			LogAdd=LogAddFunc;

  0005c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAdd@@3P6AXPADZZA, OFFSET ?LogAddFunc@@YAXPADZZ ; LogAdd, LogAddFunc

; 46   : 			LogAddC=LogAddFuncColor;

  00066	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddC@@3P6AXEPADZZA, OFFSET ?LogAddFuncColor@@YAXEPADZZ ; LogAddC, LogAddFuncColor

; 47   : 			LogAddTD=LogAddTimeDateFunc;

  00070	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddTD@@3P6AXPADZZA, OFFSET ?LogAddTimeDateFunc@@YAXPADZZ ; LogAddTD, LogAddTimeDateFunc

; 48   : 			LogAddHeadHex=LogAddStrHexFunc;

  0007a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddHeadHex@@3P6AXPAD0H@ZA, OFFSET ?LogAddStrHexFunc@@YAXPAD0H@Z ; LogAddHeadHex, LogAddStrHexFunc

; 49   : 			LogTextPaint=LogTextPaintProc;

  00084	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogTextPaint@@3P6AXPAUHWND__@@@ZA, OFFSET ?LogTextPaintProc@@YAXPAUHWND__@@@Z ; LogTextPaint, LogTextPaintProc

; 50   : 			LogAddL=LogAddLocalFunc;

  0008e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddL@@3P6AXPADZZA, OFFSET ?LogAddLocalFunc@@YAXPADZZ ; LogAddL, LogAddLocalFunc

; 51   : 
; 52   : 			for (n=0;n<LOG_TEXT_LINE;n++)

  00098	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$230810[ebp], 0
  0009f	eb 09		 jmp	 SHORT $LN6@LogInit
$LN5@LogInit:
  000a1	8b 45 e4	 mov	 eax, DWORD PTR _n$230810[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 e4	 mov	 DWORD PTR _n$230810[ebp], eax
$LN6@LogInit:
  000aa	83 7d e4 1e	 cmp	 DWORD PTR _n$230810[ebp], 30 ; 0000001eH
  000ae	7d 37		 jge	 SHORT $LN4@LogInit

; 53   : 			{
; 54   : 				memset(&LogText[n],0, sizeof(LogText[0]));

  000b0	68 8c 00 00 00	 push	 140			; 0000008cH
  000b5	6a 00		 push	 0
  000b7	8b 45 e4	 mov	 eax, DWORD PTR _n$230810[ebp]
  000ba	69 c0 8c 00 00
	00		 imul	 eax, 140		; 0000008cH
  000c0	05 00 00 00 00	 add	 eax, OFFSET ?LogText@@3PAY0IM@DA ; LogText
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _memset
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 				LogTextLength[n]=0;

  000ce	33 c0		 xor	 eax, eax
  000d0	8b 4d e4	 mov	 ecx, DWORD PTR _n$230810[ebp]
  000d3	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?LogTextLength@@3PAFA[ecx*2], ax

; 56   : 				LogTextViewType[n]=0;

  000db	8b 45 e4	 mov	 eax, DWORD PTR _n$230810[ebp]
  000de	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?LogTextViewType@@3PAEA[eax], 0

; 57   : 			}

  000e5	eb ba		 jmp	 SHORT $LN5@LogInit
$LN4@LogInit:

; 58   : 			if (gLogOutType==0)

  000e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  000ee	75 0b		 jne	 SHORT $LN3@LogInit

; 59   : 			{
; 60   : 				return;

  000f0	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000f7	eb 68		 jmp	 SHORT $LN11@LogInit

; 61   : 			}
; 62   : 			else

  000f9	eb 05		 jmp	 SHORT $LN2@LogInit
$LN3@LogInit:

; 63   : 			{
; 64   : 				LogDataSet();

  000fb	e8 00 00 00 00	 call	 ?LogDataSet@@YAXXZ	; LogDataSet
$LN2@LogInit:

; 65   : 			}
; 66   : 		}
; 67   : 		else

  00100	eb 32		 jmp	 SHORT $LN8@LogInit
$LN7@LogInit:

; 68   : 		{
; 69   : 			LogAdd=LogAddFuncVoid;

  00102	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAdd@@3P6AXPADZZA, OFFSET ?LogAddFuncVoid@@YAXPADZZ ; LogAdd, LogAddFuncVoid

; 70   : 			LogAddHeadHex=LogAddHeadHexFuncVoid;

  0010c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddHeadHex@@3P6AXPAD0H@ZA, OFFSET ?LogAddHeadHexFuncVoid@@YAXPAD0H@Z ; LogAddHeadHex, LogAddHeadHexFuncVoid

; 71   : 			LogTextPaint=LogTextPaintProcVoid;

  00116	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogTextPaint@@3P6AXPAUHWND__@@@ZA, OFFSET ?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z ; LogTextPaint, LogTextPaintProcVoid

; 72   : 			LogAddTD=LogAddTimeDateVoid;

  00120	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddTD@@3P6AXPADZZA, OFFSET ?LogAddTimeDateVoid@@YAXPADZZ ; LogAddTD, LogAddTimeDateVoid

; 73   : 			LogAddL=LogAddLocalFuncVoid;

  0012a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddL@@3P6AXPADZZA, OFFSET ?LogAddLocalFuncVoid@@YAXPADZZ ; LogAddL, LogAddLocalFuncVoid
$LN8@LogInit:

; 74   : 		}

  00134	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0013b	eb 24		 jmp	 SHORT $LN11@LogInit
$LN12@LogInit:
$LN17@LogInit:

; 75   : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  0013d	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00140	8b 08		 mov	 ecx, DWORD PTR [eax]
  00142	8b 11		 mov	 edx, DWORD PTR [ecx]
  00144	89 55 a0	 mov	 DWORD PTR $T231223[ebp], edx
  00147	8b 45 a0	 mov	 eax, DWORD PTR $T231223[ebp]
  0014a	33 c9		 xor	 ecx, ecx
  0014c	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00151	0f 94 c1	 sete	 cl
  00154	8b c1		 mov	 eax, ecx
$LN14@LogInit:
$LN16@LogInit:
  00156	c3		 ret	 0
$LN13@LogInit:
  00157	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 76   : 	{
; 77   : 	}

  0015a	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN11@LogInit:

; 78   : }

  00161	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00164	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016b	59		 pop	 ecx
  0016c	5f		 pop	 edi
  0016d	5e		 pop	 esi
  0016e	5b		 pop	 ebx
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c3		 ret	 0
?LogInit@@YAXH@Z ENDP					; LogInit
_TEXT	ENDS
PUBLIC	??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@ ; `string'
PUBLIC	??_C@_02BOGAIONP@ab?$AA@			; `string'
PUBLIC	??_C@_0BK@FELIJBPP@?4?2log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_strcpy:PROC
EXTRN	_fopen:PROC
EXTRN	_fclose:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_m_szLogFileName DB 064H DUP (?)
_logfp	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@
CONST	SEGMENT
??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@ DB 'Log file create erro'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02BOGAIONP@ab?$AA@
CONST	SEGMENT
??_C@_02BOGAIONP@ab?$AA@ DB 'ab', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FELIJBPP@?4?2log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
CONST	SEGMENT
??_C@_0BK@FELIJBPP@?4?2log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ DB '.\l'
	DB	'og\%02d%02d%02d_%s.log', 00H		; `string'
CONST	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogDataSet@@YAXXZ DD 0ffffffe4H
	DD	00H
	DD	0fffffe88H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN7@LogDataSet
	DD	FLAT:$LN8@LogDataSet
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231238 = -360						; size = 4
_ltime$230824 = -292					; size = 8
_today$230823 = -284					; size = 4
_szTemp$230822 = -280					; size = 250
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
?LogDataSet@@YAXXZ PROC					; LogDataSet

; 82   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	6a fe		 push	 -2			; fffffffeH
  00185	68 00 00 00 00	 push	 OFFSET __sehtable$?LogDataSet@@YAXXZ
  0018a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0018f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00195	50		 push	 eax
  00196	81 c4 a8 fe ff
	ff		 add	 esp, -344		; fffffea8H
  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001a1	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  001a4	33 c5		 xor	 eax, ebp
  001a6	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  001a9	53		 push	 ebx
  001aa	56		 push	 esi
  001ab	57		 push	 edi
  001ac	50		 push	 eax
  001ad	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  001b0	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  001b6	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 83   : 	__try

  001b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 84   : 	{
; 85   : 		char szTemp[250];
; 86   : 	
; 87   : 		struct tm *today;
; 88   : 		time_t ltime;	
; 89   : 	
; 90   : 		time(&ltime);

  001c0	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _ltime$230824[ebp]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 _time
  001cc	83 c4 04	 add	 esp, 4

; 91   : 		today=localtime(&ltime);

  001cf	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _ltime$230824[ebp]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 _localtime
  001db	83 c4 04	 add	 esp, 4
  001de	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _today$230823[ebp], eax

; 92   : 	
; 93   : 		today->tm_year=today->tm_year + 1900;

  001e4	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _today$230823[ebp]
  001ea	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001ed	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  001f3	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _today$230823[ebp]
  001f9	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 94   : 		LogMYear=today->tm_year ;

  001fc	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _today$230823[ebp]
  00202	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00205	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMYear@@3HA, ecx ; LogMYear

; 95   : 		LogMonth=today->tm_mon+1;

  0020b	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _today$230823[ebp]
  00211	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00214	83 c1 01	 add	 ecx, 1
  00217	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMonth@@3HA, ecx ; LogMonth

; 96   : 		LogMDay=today->tm_mday;

  0021d	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _today$230823[ebp]
  00223	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00226	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMDay@@3HA, ecx ; LogMDay

; 97   : 
; 98   : 		//wsprintf(szTemp,"log\\%02d%02d%02d_%s.log",LogMYear, LogMonth, LogMDay,&szServerName);
; 99   : 		wsprintf(szTemp,".\\log\\%02d%02d%02d_%s.log",LogMYear, LogMonth, LogMDay,&szServerName);

  0022c	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR ?LogMDay@@3HA ; LogMDay
  00236	50		 push	 eax
  00237	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?LogMonth@@3HA ; LogMonth
  0023d	51		 push	 ecx
  0023e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?LogMYear@@3HA ; LogMYear
  00244	52		 push	 edx
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FELIJBPP@?4?2log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
  0024a	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$230822[ebp]
  00250	50		 push	 eax
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00257	83 c4 18	 add	 esp, 24			; 00000018H

; 100  : 
; 101  : 		if (logfp != 0)

  0025a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _logfp, 0
  00261	74 18		 je	 SHORT $LN2@LogDataSet

; 102  : 		{
; 103  : 			fclose(logfp);

  00263	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 _fclose
  0026e	83 c4 04	 add	 esp, 4

; 104  : 			logfp=0;

  00271	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _logfp, 0
$LN2@LogDataSet:

; 105  : 		}
; 106  : 
; 107  : 		//logfp=fopen(szTemp,"a+t");.
; 108  : 		logfp=fopen(szTemp,"ab");

  0027b	68 00 00 00 00	 push	 OFFSET ??_C@_02BOGAIONP@ab?$AA@
  00280	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$230822[ebp]
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 _fopen
  0028c	83 c4 08	 add	 esp, 8
  0028f	a3 00 00 00 00	 mov	 DWORD PTR _logfp, eax

; 109  : 		if (logfp==0)

  00294	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _logfp, 0
  0029b	75 0e		 jne	 SHORT $LN1@LogDataSet

; 110  : 		{
; 111  : 			LogAdd("Log file create error");

  0029d	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@
  002a2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  002a8	83 c4 04	 add	 esp, 4
$LN1@LogDataSet:

; 112  : 		}
; 113  : 		strcpy(m_szLogFileName,szTemp);

  002ab	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$230822[ebp]
  002b1	50		 push	 eax
  002b2	68 00 00 00 00	 push	 OFFSET _m_szLogFileName
  002b7	e8 00 00 00 00	 call	 _strcpy
  002bc	83 c4 08	 add	 esp, 8

; 114  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  002bf	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  002c6	eb 2a		 jmp	 SHORT $LN6@LogDataSet
$LN7@LogDataSet:
$LN12@LogDataSet:
  002c8	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  002cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  002cf	89 95 98 fe ff
	ff		 mov	 DWORD PTR $T231238[ebp], edx
  002d5	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR $T231238[ebp]
  002db	33 c9		 xor	 ecx, ecx
  002dd	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  002e2	0f 94 c1	 sete	 cl
  002e5	8b c1		 mov	 eax, ecx
$LN9@LogDataSet:
$LN11@LogDataSet:
  002e7	c3		 ret	 0
$LN8@LogDataSet:
  002e8	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 115  : 	{
; 116  : 	}

  002eb	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN6@LogDataSet:

; 117  : }

  002f2	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  002f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002fc	59		 pop	 ecx
  002fd	5f		 pop	 edi
  002fe	5e		 pop	 esi
  002ff	5b		 pop	 ebx
  00300	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00303	33 cd		 xor	 ecx, ebp
  00305	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030a	8b e5		 mov	 esp, ebp
  0030c	5d		 pop	 ebp
  0030d	c3		 ret	 0
?LogDataSet@@YAXXZ ENDP					; LogDataSet
_TEXT	ENDS
EXTRN	__localtime64:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC

; 113  : {

  00310	55		 push	 ebp
  00311	8b ec		 mov	 ebp, esp
  00313	83 ec 40	 sub	 esp, 64			; 00000040H
  00316	53		 push	 ebx
  00317	56		 push	 esi
  00318	57		 push	 edi

; 114  : #pragma warning( push )
; 115  : #pragma warning( disable : 4996 )
; 116  :     return _localtime64(_Time);

  00319	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0031c	50		 push	 eax
  0031d	e8 00 00 00 00	 call	 __localtime64
  00322	83 c4 04	 add	 esp, 4

; 117  : #pragma warning( pop )
; 118  : }

  00325	5f		 pop	 edi
  00326	5e		 pop	 esi
  00327	5b		 pop	 ebx
  00328	8b e5		 mov	 esp, ebp
  0032a	5d		 pop	 ebp
  0032b	c3		 ret	 0
_localtime ENDP
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 132  : {

  00330	55		 push	 ebp
  00331	8b ec		 mov	 ebp, esp
  00333	83 ec 40	 sub	 esp, 64			; 00000040H
  00336	53		 push	 ebx
  00337	56		 push	 esi
  00338	57		 push	 edi

; 133  :     return _time64(_Time);

  00339	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 __time64
  00342	83 c4 04	 add	 esp, 4

; 134  : }

  00345	5f		 pop	 edi
  00346	5e		 pop	 esi
  00347	5b		 pop	 ebx
  00348	8b e5		 mov	 esp, ebp
  0034a	5d		 pop	 ebp
  0034b	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	??_C@_03CCGKKFHG@a?$CLt?$AA@			; `string'
PUBLIC	??_C@_0BI@IJDLMAIK@log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogDateChange@@YAHXZ				; LogDateChange
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
;	COMDAT ??_C@_03CCGKKFHG@a?$CLt?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\logproc.cpp
CONST	SEGMENT
??_C@_03CCGKKFHG@a?$CLt?$AA@ DB 'a+t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IJDLMAIK@log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
CONST	SEGMENT
??_C@_0BI@IJDLMAIK@log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ DB 'log\%02'
	DB	'd%02d%02d_%s.log', 00H			; `string'
CONST	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogDateChange@@YAHXZ DD 0ffffffe4H
	DD	00H
	DD	0fffffe78H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN10@LogDateCha
	DD	FLAT:$LN11@LogDateCha
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231253 = -376						; size = 4
$T231254 = -372						; size = 4
$T231255 = -368						; size = 4
$T231256 = -364						; size = 4
_ltime$230837 = -296					; size = 8
_today$230836 = -288					; size = 4
_szTemp$230835 = -284					; size = 250
_EntCrit$ = -29						; size = 1
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
?LogDateChange@@YAHXZ PROC				; LogDateChange

; 123  : {

  00350	55		 push	 ebp
  00351	8b ec		 mov	 ebp, esp
  00353	6a fe		 push	 -2			; fffffffeH
  00355	68 00 00 00 00	 push	 OFFSET __sehtable$?LogDateChange@@YAHXZ
  0035a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0035f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00365	50		 push	 eax
  00366	81 c4 98 fe ff
	ff		 add	 esp, -360		; fffffe98H
  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00371	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00374	33 c5		 xor	 eax, ebp
  00376	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00379	53		 push	 ebx
  0037a	56		 push	 esi
  0037b	57		 push	 edi
  0037c	50		 push	 eax
  0037d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00380	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00386	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 124  : 	bool EntCrit = false;

  00389	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 125  : 	__try

  0038d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 126  : 	{
; 127  : 		char szTemp[250];
; 128  : 
; 129  : 		tm* today;
; 130  : 		time_t ltime;
; 131  : 		time(&ltime);

  00394	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _ltime$230837[ebp]
  0039a	50		 push	 eax
  0039b	e8 00 00 00 00	 call	 _time
  003a0	83 c4 04	 add	 esp, 4

; 132  : 
; 133  : 		today=localtime(&ltime);

  003a3	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _ltime$230837[ebp]
  003a9	50		 push	 eax
  003aa	e8 00 00 00 00	 call	 _localtime
  003af	83 c4 04	 add	 esp, 4
  003b2	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _today$230836[ebp], eax

; 134  : 		today->tm_year =today->tm_year+1900;

  003b8	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _today$230836[ebp]
  003be	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003c1	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  003c7	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _today$230836[ebp]
  003cd	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 135  : 		today->tm_mon = today->tm_mon +1;

  003d0	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _today$230836[ebp]
  003d6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003d9	83 c1 01	 add	 ecx, 1
  003dc	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _today$230836[ebp]
  003e2	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 136  : 
; 137  : 		if (today->tm_year <= LogMYear)

  003e5	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _today$230836[ebp]
  003eb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003ee	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?LogMYear@@3HA ; LogMYear
  003f4	7f 3e		 jg	 SHORT $LN5@LogDateCha

; 138  : 		{
; 139  : 			if (today->tm_mon <= LogMonth)

  003f6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _today$230836[ebp]
  003fc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003ff	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?LogMonth@@3HA ; LogMonth
  00405	7f 2d		 jg	 SHORT $LN5@LogDateCha

; 140  : 			{
; 141  : 				if (today->tm_mday <= LogMDay)

  00407	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _today$230836[ebp]
  0040d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00410	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?LogMDay@@3HA ; LogMDay
  00416	7f 1c		 jg	 SHORT $LN5@LogDateCha

; 142  : 				{
; 143  : 					return 0;

  00418	c7 85 88 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T231253[ebp], 0
  00422	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00429	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR $T231253[ebp]
  0042f	e9 40 01 00 00	 jmp	 $LN9@LogDateCha
$LN5@LogDateCha:

; 144  : 				}
; 145  : 			}
; 146  : 		}
; 147  : 
; 148  : 		LogMYear = today->tm_year ;

  00434	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _today$230836[ebp]
  0043a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0043d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMYear@@3HA, ecx ; LogMYear

; 149  : 		LogMonth = today->tm_mon ;

  00443	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _today$230836[ebp]
  00449	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0044c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMonth@@3HA, ecx ; LogMonth

; 150  : 		LogMDay = today->tm_mday ;

  00452	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _today$230836[ebp]
  00458	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0045b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMDay@@3HA, ecx ; LogMDay

; 151  : 
; 152  : 		wsprintf(szTemp, "log\\%02d%02d%02d_%s.log", LogMYear, LogMonth, LogMDay, &szServerName);

  00461	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  00466	a1 00 00 00 00	 mov	 eax, DWORD PTR ?LogMDay@@3HA ; LogMDay
  0046b	50		 push	 eax
  0046c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?LogMonth@@3HA ; LogMonth
  00472	51		 push	 ecx
  00473	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?LogMYear@@3HA ; LogMYear
  00479	52		 push	 edx
  0047a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IJDLMAIK@log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
  0047f	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$230835[ebp]
  00485	50		 push	 eax
  00486	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0048c	83 c4 18	 add	 esp, 24			; 00000018H

; 153  : 
; 154  : 		EnterCriticalSection(&LogCritical);

  0048f	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00494	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 155  : 		EntCrit = true;

  0049a	c6 45 e3 01	 mov	 BYTE PTR _EntCrit$[ebp], 1

; 156  : 
; 157  : 		if (logfp!=0)

  0049e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _logfp, 0
  004a5	74 18		 je	 SHORT $LN2@LogDateCha

; 158  : 		{
; 159  : 			fclose(logfp);

  004a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  004ac	50		 push	 eax
  004ad	e8 00 00 00 00	 call	 _fclose
  004b2	83 c4 04	 add	 esp, 4

; 160  : 			logfp=0;

  004b5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _logfp, 0
$LN2@LogDateCha:

; 161  : 		}
; 162  : 		logfp=fopen(szTemp, "a+t");

  004bf	68 00 00 00 00	 push	 OFFSET ??_C@_03CCGKKFHG@a?$CLt?$AA@
  004c4	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$230835[ebp]
  004ca	50		 push	 eax
  004cb	e8 00 00 00 00	 call	 _fopen
  004d0	83 c4 08	 add	 esp, 8
  004d3	a3 00 00 00 00	 mov	 DWORD PTR _logfp, eax

; 163  : 		strcpy(m_szLogFileName, szTemp);

  004d8	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$230835[ebp]
  004de	50		 push	 eax
  004df	68 00 00 00 00	 push	 OFFSET _m_szLogFileName
  004e4	e8 00 00 00 00	 call	 _strcpy
  004e9	83 c4 08	 add	 esp, 8

; 164  : 		LeaveCriticalSection(&LogCritical);

  004ec	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  004f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 165  : 		EntCrit = false;

  004f7	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 166  : 		return 1;

  004fb	c7 85 8c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR $T231254[ebp], 1
  00505	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0050c	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR $T231254[ebp]
  00512	eb 60		 jmp	 SHORT $LN9@LogDateCha

; 167  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00514	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0051b	eb 57		 jmp	 SHORT $LN9@LogDateCha
$LN10@LogDateCha:
$LN15@LogDateCha:
  0051d	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00520	8b 08		 mov	 ecx, DWORD PTR [eax]
  00522	8b 11		 mov	 edx, DWORD PTR [ecx]
  00524	89 95 94 fe ff
	ff		 mov	 DWORD PTR $T231256[ebp], edx
  0052a	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR $T231256[ebp]
  00530	33 c9		 xor	 ecx, ecx
  00532	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00537	0f 94 c1	 sete	 cl
  0053a	8b c1		 mov	 eax, ecx
$LN12@LogDateCha:
$LN14@LogDateCha:
  0053c	c3		 ret	 0
$LN11@LogDateCha:
  0053d	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 168  : 	{
; 169  : 		if(EntCrit == true)

  00540	0f b6 45 e3	 movzx	 eax, BYTE PTR _EntCrit$[ebp]
  00544	83 f8 01	 cmp	 eax, 1
  00547	75 0b		 jne	 SHORT $LN1@LogDateCha

; 170  : 		{
; 171  : 			LeaveCriticalSection(&LogCritical);

  00549	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0054e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogDateCha:

; 172  : 		}
; 173  : 		return 0;

  00554	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T231255[ebp], 0
  0055e	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00565	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR $T231255[ebp]
  0056b	eb 07		 jmp	 SHORT $LN9@LogDateCha

; 174  : 	}

  0056d	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN9@LogDateCha:

; 175  : }

  00574	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00577	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0057e	59		 pop	 ecx
  0057f	5f		 pop	 edi
  00580	5e		 pop	 esi
  00581	5b		 pop	 ebx
  00582	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00585	33 cd		 xor	 ecx, ebp
  00587	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0058c	8b e5		 mov	 esp, ebp
  0058e	5d		 pop	 ebp
  0058f	c3		 ret	 0
?LogDateChange@@YAHXZ ENDP				; LogDateChange
_TEXT	ENDS
PUBLIC	?LogTextAdd@@YAXEPADH@Z				; LogTextAdd
EXTRN	_memcpy:PROC
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogTextAdd@@YAXEPADH@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff94H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN7@LogTextAdd
	DD	FLAT:$LN8@LogTextAdd
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231267 = -92						; size = 4
__$SEHRec$ = -24					; size = 24
_type$ = 8						; size = 1
_msg$ = 12						; size = 4
_len$ = 16						; size = 4
?LogTextAdd@@YAXEPADH@Z PROC				; LogTextAdd

; 186  : {

  00590	55		 push	 ebp
  00591	8b ec		 mov	 ebp, esp
  00593	6a fe		 push	 -2			; fffffffeH
  00595	68 00 00 00 00	 push	 OFFSET __sehtable$?LogTextAdd@@YAXEPADH@Z
  0059a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0059f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  005a5	50		 push	 eax
  005a6	83 c4 b4	 add	 esp, -76		; ffffffb4H
  005a9	53		 push	 ebx
  005aa	56		 push	 esi
  005ab	57		 push	 edi
  005ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  005b1	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  005b4	33 c5		 xor	 eax, ebp
  005b6	50		 push	 eax
  005b7	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  005ba	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  005c0	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 187  : 	__try

  005c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 188  : 	{
; 189  : 		if (len>LOG_TEXT_LENGTH-1)

  005ca	81 7d 10 8b 00
	00 00		 cmp	 DWORD PTR _len$[ebp], 139 ; 0000008bH
  005d1	7e 07		 jle	 SHORT $LN2@LogTextAdd

; 190  : 		{
; 191  : 			len=LOG_TEXT_LENGTH-1;//bilo 80 sdelal 130

  005d3	c7 45 10 8b 00
	00 00		 mov	 DWORD PTR _len$[ebp], 139 ; 0000008bH
$LN2@LogTextAdd:

; 192  : 		}
; 193  : 		m_cline++;

  005da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_cline@@3HA ; m_cline
  005df	83 c0 01	 add	 eax, 1
  005e2	a3 00 00 00 00	 mov	 DWORD PTR ?m_cline@@3HA, eax ; m_cline

; 194  : 		if (m_cline>LOG_TEXT_LINE-1)

  005e7	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?m_cline@@3HA, 29 ; m_cline, 0000001dH
  005ee	7e 0a		 jle	 SHORT $LN1@LogTextAdd

; 195  : 		{
; 196  : 			m_cline=0;

  005f0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_cline@@3HA, 0 ; m_cline
$LN1@LogTextAdd:

; 197  : 		}
; 198  : 		LogText[m_cline][0]=0;

  005fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_cline@@3HA ; m_cline
  005ff	69 c0 8c 00 00
	00		 imul	 eax, 140		; 0000008cH
  00605	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?LogText@@3PAY0IM@DA[eax], 0

; 199  : 		memcpy(&LogText[m_cline], msg, len);

  0060c	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0060f	50		 push	 eax
  00610	8b 4d 0c	 mov	 ecx, DWORD PTR _msg$[ebp]
  00613	51		 push	 ecx
  00614	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_cline@@3HA ; m_cline
  0061a	69 d2 8c 00 00
	00		 imul	 edx, 140		; 0000008cH
  00620	81 c2 00 00 00
	00		 add	 edx, OFFSET ?LogText@@3PAY0IM@DA ; LogText
  00626	52		 push	 edx
  00627	e8 00 00 00 00	 call	 _memcpy
  0062c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 		LogText[m_cline][1+len]=0;

  0062f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_cline@@3HA ; m_cline
  00634	69 c0 8c 00 00
	00		 imul	 eax, 140		; 0000008cH
  0063a	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0063d	c6 84 08 01 00
	00 00 00	 mov	 BYTE PTR ?LogText@@3PAY0IM@DA[eax+ecx+1], 0

; 201  : 		LogText[m_cline][len]=0;

  00645	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_cline@@3HA ; m_cline
  0064a	69 c0 8c 00 00
	00		 imul	 eax, 140		; 0000008cH
  00650	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00653	c6 84 08 00 00
	00 00 00	 mov	 BYTE PTR ?LogText@@3PAY0IM@DA[eax+ecx], 0

; 202  : 		LogTextLength[m_cline]=len;

  0065b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_cline@@3HA ; m_cline
  00660	66 8b 4d 10	 mov	 cx, WORD PTR _len$[ebp]
  00664	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR ?LogTextLength@@3PAFA[eax*2], cx

; 203  : 		LogTextViewType[m_cline]=type;	// Phew, 

  0066c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_cline@@3HA ; m_cline
  00671	8a 4d 08	 mov	 cl, BYTE PTR _type$[ebp]
  00674	88 88 00 00 00
	00		 mov	 BYTE PTR ?LogTextViewType@@3PAEA[eax], cl

; 204  : 
; 205  : #if (LOG_INMEDIATLY==1)
; 206  : 						RECT rect;
; 207  : 						HDC hdc = GetDC(ghWnd);
; 208  : 						GetClientRect(ghWnd, &rect);
; 209  : 						FillRect(hdc, &rect, (HBRUSH)GetStockObject(0));
; 210  : 						ReleaseDC(ghWnd, hdc);
; 211  : 
; 212  : 						if ( gCurPaintType == 0)
; 213  : 						{
; 214  : 							if ( LogTextPaint != NULL )
; 215  : 							{
; 216  : 								LogTextPaint(ghWnd);
; 217  : 							}
; 218  : 						}
; 219  : 						
; 220  : 						gObjViewportPaint(ghWnd, gCurPaintPlayer);
; 221  : 						//g_ServerInfoDisplayer.Run(ghWnd);
; 222  : 						//GJNotifyMaxUserCount();
; 223  : #endif
; 224  : 	}

  0067a	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00681	eb 24		 jmp	 SHORT $LN6@LogTextAdd
$LN7@LogTextAdd:
$LN12@LogTextAdd:

; 225  : 	__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00683	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00686	8b 08		 mov	 ecx, DWORD PTR [eax]
  00688	8b 11		 mov	 edx, DWORD PTR [ecx]
  0068a	89 55 a4	 mov	 DWORD PTR $T231267[ebp], edx
  0068d	8b 45 a4	 mov	 eax, DWORD PTR $T231267[ebp]
  00690	33 c9		 xor	 ecx, ecx
  00692	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00697	0f 94 c1	 sete	 cl
  0069a	8b c1		 mov	 eax, ecx
$LN9@LogTextAdd:
$LN11@LogTextAdd:
  0069c	c3		 ret	 0
$LN8@LogTextAdd:
  0069d	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 226  : 	{
; 227  : 	}

  006a0	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN6@LogTextAdd:

; 228  : }

  006a7	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  006aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006b1	59		 pop	 ecx
  006b2	5f		 pop	 edi
  006b3	5e		 pop	 esi
  006b4	5b		 pop	 ebx
  006b5	8b e5		 mov	 esp, ebp
  006b7	5d		 pop	 ebp
  006b8	c3		 ret	 0
?LogTextAdd@@YAXEPADH@Z ENDP				; LogTextAdd
; Function compile flags: /Odtp /ZI
_szLog$ = 8						; size = 4
?LogAddFuncVoid@@YAXPADZZ PROC				; LogAddFuncVoid

; 233  : {

  006c0	55		 push	 ebp
  006c1	8b ec		 mov	 ebp, esp
  006c3	83 ec 40	 sub	 esp, 64			; 00000040H
  006c6	53		 push	 ebx
  006c7	56		 push	 esi
  006c8	57		 push	 edi

; 234  : 	// Nothing to Add
; 235  : }

  006c9	5f		 pop	 edi
  006ca	5e		 pop	 esi
  006cb	5b		 pop	 ebx
  006cc	8b e5		 mov	 esp, ebp
  006ce	5d		 pop	 ebp
  006cf	c3		 ret	 0
?LogAddFuncVoid@@YAXPADZZ ENDP				; LogAddFuncVoid
; Function compile flags: /Odtp /ZI
_szLog$ = 8						; size = 4
?LogAddTimeDateVoid@@YAXPADZZ PROC			; LogAddTimeDateVoid

; 239  : {

  006d0	55		 push	 ebp
  006d1	8b ec		 mov	 ebp, esp
  006d3	83 ec 40	 sub	 esp, 64			; 00000040H
  006d6	53		 push	 ebx
  006d7	56		 push	 esi
  006d8	57		 push	 edi

; 240  : 	// Log Disabled
; 241  : }

  006d9	5f		 pop	 edi
  006da	5e		 pop	 esi
  006db	5b		 pop	 ebx
  006dc	8b e5		 mov	 esp, ebp
  006de	5d		 pop	 ebp
  006df	c3		 ret	 0
?LogAddTimeDateVoid@@YAXPADZZ ENDP			; LogAddTimeDateVoid
_TEXT	ENDS
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	_fprintf:PROC
EXTRN	_strlen:PROC
EXTRN	_vsprintf:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogAddFunc@@YAXPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffffd88H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@LogAddFunc
	DD	FLAT:$LN9@LogAddFunc
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231281 = -616						; size = 4
_pArguments$230870 = -548				; size = 4
_szBuffer$230869 = -544					; size = 512
_EntCrit$ = -29						; size = 1
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_szLog$ = 8						; size = 4
?LogAddFunc@@YAXPADZZ PROC				; LogAddFunc

; 246  : {

  006e0	55		 push	 ebp
  006e1	8b ec		 mov	 ebp, esp
  006e3	6a fe		 push	 -2			; fffffffeH
  006e5	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddFunc@@YAXPADZZ
  006ea	68 00 00 00 00	 push	 OFFSET __except_handler4
  006ef	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  006f5	50		 push	 eax
  006f6	81 c4 a8 fd ff
	ff		 add	 esp, -600		; fffffda8H
  006fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00701	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00704	33 c5		 xor	 eax, ebp
  00706	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00709	53		 push	 ebx
  0070a	56		 push	 esi
  0070b	57		 push	 edi
  0070c	50		 push	 eax
  0070d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00710	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00716	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 247  : 	bool EntCrit = false;

  00719	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 248  : 	__try

  0071d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 249  : 	{
; 250  : 		char szBuffer[512]="";

  00724	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00729	88 85 e0 fd ff
	ff		 mov	 BYTE PTR _szBuffer$230869[ebp], al
  0072f	68 ff 01 00 00	 push	 511			; 000001ffH
  00734	6a 00		 push	 0
  00736	8d 85 e1 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$230869[ebp+1]
  0073c	50		 push	 eax
  0073d	e8 00 00 00 00	 call	 _memset
  00742	83 c4 0c	 add	 esp, 12			; 0000000cH

; 251  : 
; 252  : 		va_list pArguments;
; 253  : 	
; 254  : 		va_start( pArguments,  szLog);	// review

  00745	8d 45 0c	 lea	 eax, DWORD PTR _szLog$[ebp+4]
  00748	89 85 dc fd ff
	ff		 mov	 DWORD PTR _pArguments$230870[ebp], eax

; 255  : 		vsprintf(szBuffer, szLog, pArguments);

  0074e	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _pArguments$230870[ebp]
  00754	50		 push	 eax
  00755	8b 4d 08	 mov	 ecx, DWORD PTR _szLog$[ebp]
  00758	51		 push	 ecx
  00759	8d 95 e0 fd ff
	ff		 lea	 edx, DWORD PTR _szBuffer$230869[ebp]
  0075f	52		 push	 edx
  00760	e8 00 00 00 00	 call	 _vsprintf
  00765	83 c4 0c	 add	 esp, 12			; 0000000cH

; 256  : 		va_end(pArguments);

  00768	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$230870[ebp], 0

; 257  : 		LogTextAdd(0,szBuffer, strlen(szBuffer));

  00772	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$230869[ebp]
  00778	50		 push	 eax
  00779	e8 00 00 00 00	 call	 _strlen
  0077e	83 c4 04	 add	 esp, 4
  00781	50		 push	 eax
  00782	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$230869[ebp]
  00788	51		 push	 ecx
  00789	6a 00		 push	 0
  0078b	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  00790	83 c4 0c	 add	 esp, 12			; 0000000cH

; 258  : 		if (gLogOutType==0)

  00793	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  0079a	75 0e		 jne	 SHORT $LN3@LogAddFunc

; 259  : 		{
; 260  : 			return;

  0079c	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  007a3	e9 82 00 00 00	 jmp	 $LN7@LogAddFunc

; 261  : 		}
; 262  : 		else

  007a8	eb 39		 jmp	 SHORT $LN4@LogAddFunc
$LN3@LogAddFunc:

; 263  : 		{
; 264  : 			EnterCriticalSection(&LogCritical);

  007aa	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  007af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 265  : 			EntCrit = true;

  007b5	c6 45 e3 01	 mov	 BYTE PTR _EntCrit$[ebp], 1

; 266  : 			fprintf(logfp, "%s\n", szBuffer);

  007b9	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$230869[ebp]
  007bf	50		 push	 eax
  007c0	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  007c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _logfp
  007cb	51		 push	 ecx
  007cc	e8 00 00 00 00	 call	 _fprintf
  007d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 267  : 			LeaveCriticalSection(&LogCritical);

  007d4	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  007d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 268  : 			EntCrit = false;

  007df	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0
$LN4@LogAddFunc:

; 269  : 
; 270  : 		}

  007e3	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  007ea	eb 3e		 jmp	 SHORT $LN7@LogAddFunc
$LN8@LogAddFunc:
$LN13@LogAddFunc:

; 271  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  007ec	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  007ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  007f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  007f3	89 95 98 fd ff
	ff		 mov	 DWORD PTR $T231281[ebp], edx
  007f9	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR $T231281[ebp]
  007ff	33 c9		 xor	 ecx, ecx
  00801	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00806	0f 94 c1	 sete	 cl
  00809	8b c1		 mov	 eax, ecx
$LN10@LogAddFunc:
$LN12@LogAddFunc:
  0080b	c3		 ret	 0
$LN9@LogAddFunc:
  0080c	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 272  : 	{
; 273  : 		if(EntCrit == true)

  0080f	0f b6 45 e3	 movzx	 eax, BYTE PTR _EntCrit$[ebp]
  00813	83 f8 01	 cmp	 eax, 1
  00816	75 0b		 jne	 SHORT $LN1@LogAddFunc

; 274  : 		{
; 275  : 			LeaveCriticalSection(&LogCritical);

  00818	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0081d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddFunc:

; 276  : 		}
; 277  : 	}

  00823	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN7@LogAddFunc:

; 278  : }

  0082a	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0082d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00834	59		 pop	 ecx
  00835	5f		 pop	 edi
  00836	5e		 pop	 esi
  00837	5b		 pop	 ebx
  00838	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0083b	33 cd		 xor	 ecx, ebp
  0083d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00842	8b e5		 mov	 esp, ebp
  00844	5d		 pop	 ebp
  00845	c3		 ret	 0
?LogAddFunc@@YAXPADZZ ENDP				; LogAddFunc
_TEXT	ENDS
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogAddFuncColor@@YAXEPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffffb88H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@LogAddFunc@2
	DD	FLAT:$LN9@LogAddFunc@2
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231294 = -1128					; size = 4
_pArguments$230889 = -1060				; size = 4
_szBuffer$230888 = -1056				; size = 1024
_EntCrit$ = -29						; size = 1
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_Color$ = 8						; size = 1
_szLog$ = 12						; size = 4
?LogAddFuncColor@@YAXEPADZZ PROC			; LogAddFuncColor

; 282  : {

  00850	55		 push	 ebp
  00851	8b ec		 mov	 ebp, esp
  00853	6a fe		 push	 -2			; fffffffeH
  00855	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddFuncColor@@YAXEPADZZ
  0085a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0085f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00865	50		 push	 eax
  00866	81 c4 a8 fb ff
	ff		 add	 esp, -1112		; fffffba8H
  0086c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00871	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00874	33 c5		 xor	 eax, ebp
  00876	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00879	53		 push	 ebx
  0087a	56		 push	 esi
  0087b	57		 push	 edi
  0087c	50		 push	 eax
  0087d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00880	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00886	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 283  : 	bool EntCrit = false;

  00889	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 284  : 	__try

  0088d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 285  : 	{
; 286  : 		char szBuffer[1024]="";

  00894	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00899	88 85 e0 fb ff
	ff		 mov	 BYTE PTR _szBuffer$230888[ebp], al
  0089f	68 ff 03 00 00	 push	 1023			; 000003ffH
  008a4	6a 00		 push	 0
  008a6	8d 85 e1 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$230888[ebp+1]
  008ac	50		 push	 eax
  008ad	e8 00 00 00 00	 call	 _memset
  008b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 287  : 		va_list pArguments;
; 288  : 		
; 289  : 		va_start(pArguments, szLog);

  008b5	8d 45 10	 lea	 eax, DWORD PTR _szLog$[ebp+4]
  008b8	89 85 dc fb ff
	ff		 mov	 DWORD PTR _pArguments$230889[ebp], eax

; 290  : 		vsprintf(szBuffer, szLog, pArguments);

  008be	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR _pArguments$230889[ebp]
  008c4	50		 push	 eax
  008c5	8b 4d 0c	 mov	 ecx, DWORD PTR _szLog$[ebp]
  008c8	51		 push	 ecx
  008c9	8d 95 e0 fb ff
	ff		 lea	 edx, DWORD PTR _szBuffer$230888[ebp]
  008cf	52		 push	 edx
  008d0	e8 00 00 00 00	 call	 _vsprintf
  008d5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 291  : 		va_end(pArguments);

  008d8	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$230889[ebp], 0

; 292  : 		LogTextAdd(Color, szBuffer, strlen(szBuffer));

  008e2	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$230888[ebp]
  008e8	50		 push	 eax
  008e9	e8 00 00 00 00	 call	 _strlen
  008ee	83 c4 04	 add	 esp, 4
  008f1	50		 push	 eax
  008f2	8d 8d e0 fb ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$230888[ebp]
  008f8	51		 push	 ecx
  008f9	0f b6 55 08	 movzx	 edx, BYTE PTR _Color$[ebp]
  008fd	52		 push	 edx
  008fe	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  00903	83 c4 0c	 add	 esp, 12			; 0000000cH

; 293  : 
; 294  : 		if (!gLogOutType)

  00906	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  0090d	75 0e		 jne	 SHORT $LN3@LogAddFunc@2

; 295  : 		{
; 296  : 			return;

  0090f	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00916	e9 82 00 00 00	 jmp	 $LN7@LogAddFunc@2

; 297  : 		}
; 298  : 		else

  0091b	eb 39		 jmp	 SHORT $LN4@LogAddFunc@2
$LN3@LogAddFunc@2:

; 299  : 		{
; 300  : 			EnterCriticalSection(&LogCritical);

  0091d	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00922	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 301  : 			EntCrit = true;

  00928	c6 45 e3 01	 mov	 BYTE PTR _EntCrit$[ebp], 1

; 302  : 			fprintf(logfp, "%s\n", szBuffer);

  0092c	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$230888[ebp]
  00932	50		 push	 eax
  00933	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  00938	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _logfp
  0093e	51		 push	 ecx
  0093f	e8 00 00 00 00	 call	 _fprintf
  00944	83 c4 0c	 add	 esp, 12			; 0000000cH

; 303  : 			LeaveCriticalSection(&LogCritical);

  00947	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0094c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 304  : 			EntCrit = false;

  00952	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0
$LN4@LogAddFunc@2:

; 305  : 		}

  00956	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0095d	eb 3e		 jmp	 SHORT $LN7@LogAddFunc@2
$LN8@LogAddFunc@2:
$LN13@LogAddFunc@2:

; 306  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  0095f	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00962	8b 08		 mov	 ecx, DWORD PTR [eax]
  00964	8b 11		 mov	 edx, DWORD PTR [ecx]
  00966	89 95 98 fb ff
	ff		 mov	 DWORD PTR $T231294[ebp], edx
  0096c	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR $T231294[ebp]
  00972	33 c9		 xor	 ecx, ecx
  00974	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00979	0f 94 c1	 sete	 cl
  0097c	8b c1		 mov	 eax, ecx
$LN10@LogAddFunc@2:
$LN12@LogAddFunc@2:
  0097e	c3		 ret	 0
$LN9@LogAddFunc@2:
  0097f	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 307  : 	{
; 308  : 		if(EntCrit == true)

  00982	0f b6 45 e3	 movzx	 eax, BYTE PTR _EntCrit$[ebp]
  00986	83 f8 01	 cmp	 eax, 1
  00989	75 0b		 jne	 SHORT $LN1@LogAddFunc@2

; 309  : 		{
; 310  : 			LeaveCriticalSection(&LogCritical);

  0098b	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00990	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddFunc@2:

; 311  : 		}
; 312  : 	}

  00996	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN7@LogAddFunc@2:

; 313  : }

  0099d	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  009a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  009a7	59		 pop	 ecx
  009a8	5f		 pop	 edi
  009a9	5e		 pop	 esi
  009aa	5b		 pop	 ebx
  009ab	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009ae	33 cd		 xor	 ecx, ebp
  009b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009b5	8b e5		 mov	 esp, ebp
  009b7	5d		 pop	 ebp
  009b8	c3		 ret	 0
?LogAddFuncColor@@YAXEPADZZ ENDP			; LogAddFuncColor
; Function compile flags: /Odtp /ZI
_szLog$ = 8						; size = 4
?LogAddLocalFunc@@YAXPADZZ PROC				; LogAddLocalFunc

; 317  : {

  009c0	55		 push	 ebp
  009c1	8b ec		 mov	 ebp, esp
  009c3	81 ec 48 02 00
	00		 sub	 esp, 584		; 00000248H
  009c9	53		 push	 ebx
  009ca	56		 push	 esi
  009cb	57		 push	 edi

; 318  : 	char szBuffer[512];
; 319  : 	va_list pArguments;
; 320  : 
; 321  : #if (LOCAL_LOG==1)	
; 322  : 	va_start(pArguments, szLog);
; 323  : 	vsprintf(szBuffer, szLog, pArguments);
; 324  : 	va_end(pArguments);
; 325  : 
; 326  : 	LogTextAdd(5, szBuffer, strlen(szBuffer));
; 327  : 
; 328  : 
; 329  : 	if (!gLogOutType)
; 330  : 	{
; 331  : 		return;
; 332  : 	}
; 333  : 	else
; 334  : 	{
; 335  : 		EnterCriticalSection(&LogCritical);
; 336  : 		fprintf(logfp, "[LOCAL] %s\n", szBuffer);
; 337  : 		LeaveCriticalSection(&LogCritical);
; 338  : 	}
; 339  : 
; 340  : #endif
; 341  : }

  009cc	5f		 pop	 edi
  009cd	5e		 pop	 esi
  009ce	5b		 pop	 ebx
  009cf	8b e5		 mov	 esp, ebp
  009d1	5d		 pop	 ebp
  009d2	c3		 ret	 0
?LogAddLocalFunc@@YAXPADZZ ENDP				; LogAddLocalFunc
; Function compile flags: /Odtp /ZI
_szLog$ = 8						; size = 4
?LogAddLocalFuncVoid@@YAXPADZZ PROC			; LogAddLocalFuncVoid

; 345  : {

  009e0	55		 push	 ebp
  009e1	8b ec		 mov	 ebp, esp
  009e3	83 ec 40	 sub	 esp, 64			; 00000040H
  009e6	53		 push	 ebx
  009e7	56		 push	 esi
  009e8	57		 push	 edi

; 346  : 
; 347  : }

  009e9	5f		 pop	 edi
  009ea	5e		 pop	 esi
  009eb	5b		 pop	 ebx
  009ec	8b e5		 mov	 esp, ebp
  009ee	5d		 pop	 ebp
  009ef	c3		 ret	 0
?LogAddLocalFuncVoid@@YAXPADZZ ENDP			; LogAddLocalFuncVoid
_TEXT	ENDS
PUBLIC	??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0DP@PALFGDJJ@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??LogAddTimeDateFunc@@YAXPADZZ@4JA ; `LogAddTimeDateFunc'::`2'::__LINE__Var
PUBLIC	??_C@_05JBABHJFJ@?$CF?48s?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	_strcat:PROC
EXTRN	_asctime:PROC
;	COMDAT ??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@
CONST	SEGMENT
??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@ DB 'error'
	DB	'-L2 : file create error %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@PALFGDJJ@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0DP@PALFGDJJ@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\logproc.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??LogAddTimeDateFunc@@YAXPADZZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??LogAddTimeDateFunc@@YAXPADZZ@4JA DD 015fH ; `LogAddTimeDateFunc'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05JBABHJFJ@?$CF?48s?5?$AA@
CONST	SEGMENT
??_C@_05JBABHJFJ@?$CF?48s?5?$AA@ DB '%.8s ', 00H	; `string'
CONST	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogAddTimeDateFunc@@YAXPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffff97cH
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN10@LogAddTime
	DD	FLAT:$LN11@LogAddTime
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231309 = -1652					; size = 4
_tmpbuf$230919 = -1584					; size = 512
_ltime$230918 = -1072					; size = 8
_today$230917 = -1064					; size = 4
_pArguments$230916 = -1060				; size = 4
_szBuffer$230915 = -1056				; size = 1024
_EntCrit$ = -29						; size = 1
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_szLog$ = 8						; size = 4
?LogAddTimeDateFunc@@YAXPADZZ PROC			; LogAddTimeDateFunc

; 351  : {

  009f0	55		 push	 ebp
  009f1	8b ec		 mov	 ebp, esp
  009f3	6a fe		 push	 -2			; fffffffeH
  009f5	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddTimeDateFunc@@YAXPADZZ
  009fa	68 00 00 00 00	 push	 OFFSET __except_handler4
  009ff	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00a05	50		 push	 eax
  00a06	81 c4 9c f9 ff
	ff		 add	 esp, -1636		; fffff99cH
  00a0c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00a11	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00a14	33 c5		 xor	 eax, ebp
  00a16	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00a19	53		 push	 ebx
  00a1a	56		 push	 esi
  00a1b	57		 push	 edi
  00a1c	50		 push	 eax
  00a1d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00a20	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00a26	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 352  : 	bool EntCrit = false;

  00a29	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 353  : 	__try

  00a2d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 354  : 	{
; 355  : 		char szBuffer[1024]="";

  00a34	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00a39	88 85 e0 fb ff
	ff		 mov	 BYTE PTR _szBuffer$230915[ebp], al
  00a3f	68 ff 03 00 00	 push	 1023			; 000003ffH
  00a44	6a 00		 push	 0
  00a46	8d 85 e1 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$230915[ebp+1]
  00a4c	50		 push	 eax
  00a4d	e8 00 00 00 00	 call	 _memset
  00a52	83 c4 0c	 add	 esp, 12			; 0000000cH

; 356  : 		va_list pArguments;
; 357  : 		tm * today;
; 358  : 		time_t ltime;
; 359  : 		char tmpbuf[512];
; 360  : 		
; 361  : 		time(&ltime);

  00a55	8d 85 d0 fb ff
	ff		 lea	 eax, DWORD PTR _ltime$230918[ebp]
  00a5b	50		 push	 eax
  00a5c	e8 00 00 00 00	 call	 _time
  00a61	83 c4 04	 add	 esp, 4

; 362  : 		today=localtime(&ltime);

  00a64	8d 85 d0 fb ff
	ff		 lea	 eax, DWORD PTR _ltime$230918[ebp]
  00a6a	50		 push	 eax
  00a6b	e8 00 00 00 00	 call	 _localtime
  00a70	83 c4 04	 add	 esp, 4
  00a73	89 85 d8 fb ff
	ff		 mov	 DWORD PTR _today$230917[ebp], eax

; 363  : 		wsprintf(tmpbuf, "%.8s ", asctime(today)+11 );

  00a79	8b 85 d8 fb ff
	ff		 mov	 eax, DWORD PTR _today$230917[ebp]
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 _asctime
  00a85	83 c4 04	 add	 esp, 4
  00a88	83 c0 0b	 add	 eax, 11			; 0000000bH
  00a8b	50		 push	 eax
  00a8c	68 00 00 00 00	 push	 OFFSET ??_C@_05JBABHJFJ@?$CF?48s?5?$AA@
  00a91	8d 8d d0 f9 ff
	ff		 lea	 ecx, DWORD PTR _tmpbuf$230919[ebp]
  00a97	51		 push	 ecx
  00a98	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00a9e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 364  : 
; 365  : 		va_start( pArguments,szLog );

  00aa1	8d 45 0c	 lea	 eax, DWORD PTR _szLog$[ebp+4]
  00aa4	89 85 dc fb ff
	ff		 mov	 DWORD PTR _pArguments$230916[ebp], eax

; 366  : 		vsprintf(szBuffer, szLog, pArguments);

  00aaa	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR _pArguments$230916[ebp]
  00ab0	50		 push	 eax
  00ab1	8b 4d 08	 mov	 ecx, DWORD PTR _szLog$[ebp]
  00ab4	51		 push	 ecx
  00ab5	8d 95 e0 fb ff
	ff		 lea	 edx, DWORD PTR _szBuffer$230915[ebp]
  00abb	52		 push	 edx
  00abc	e8 00 00 00 00	 call	 _vsprintf
  00ac1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 367  : 		va_end(pArguments);

  00ac4	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$230916[ebp], 0

; 368  : 
; 369  : 		strcat(tmpbuf, szBuffer);

  00ace	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$230915[ebp]
  00ad4	50		 push	 eax
  00ad5	8d 8d d0 f9 ff
	ff		 lea	 ecx, DWORD PTR _tmpbuf$230919[ebp]
  00adb	51		 push	 ecx
  00adc	e8 00 00 00 00	 call	 _strcat
  00ae1	83 c4 08	 add	 esp, 8

; 370  : 
; 371  : 		LogTextAdd(0, tmpbuf, strlen(tmpbuf));

  00ae4	8d 85 d0 f9 ff
	ff		 lea	 eax, DWORD PTR _tmpbuf$230919[ebp]
  00aea	50		 push	 eax
  00aeb	e8 00 00 00 00	 call	 _strlen
  00af0	83 c4 04	 add	 esp, 4
  00af3	50		 push	 eax
  00af4	8d 8d d0 f9 ff
	ff		 lea	 ecx, DWORD PTR _tmpbuf$230919[ebp]
  00afa	51		 push	 ecx
  00afb	6a 00		 push	 0
  00afd	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  00b02	83 c4 0c	 add	 esp, 12			; 0000000cH

; 372  : 
; 373  : 		if (gLogOutType==0)

  00b05	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  00b0c	75 0e		 jne	 SHORT $LN5@LogAddTime

; 374  : 		{
; 375  : 			return;

  00b0e	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00b15	e9 a9 00 00 00	 jmp	 $LN9@LogAddTime

; 376  : 		}
; 377  : 		else

  00b1a	eb 60		 jmp	 SHORT $LN6@LogAddTime
$LN5@LogAddTime:

; 378  : 		{
; 379  : 			if (logfp==0)

  00b1c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _logfp, 0
  00b23	75 1e		 jne	 SHORT $LN3@LogAddTime

; 380  : 			{
; 381  : 				LogAdd("error-L2 : file create error %s %d", __FILE__, __LINE__);

  00b25	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??LogAddTimeDateFunc@@YAXPADZZ@4JA
  00b2a	83 c0 1e	 add	 eax, 30			; 0000001eH
  00b2d	50		 push	 eax
  00b2e	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@PALFGDJJ@d?3?2projects?2exteam6?43?2source?2gam@
  00b33	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@
  00b38	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00b3e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 382  : 			}
; 383  : 			else

  00b41	eb 39		 jmp	 SHORT $LN6@LogAddTime
$LN3@LogAddTime:

; 384  : 			{
; 385  : 				EnterCriticalSection(&LogCritical);

  00b43	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00b48	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 386  : 				EntCrit = true;

  00b4e	c6 45 e3 01	 mov	 BYTE PTR _EntCrit$[ebp], 1

; 387  : 				fprintf(logfp, "%s\n", &tmpbuf);

  00b52	8d 85 d0 f9 ff
	ff		 lea	 eax, DWORD PTR _tmpbuf$230919[ebp]
  00b58	50		 push	 eax
  00b59	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  00b5e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _logfp
  00b64	51		 push	 ecx
  00b65	e8 00 00 00 00	 call	 _fprintf
  00b6a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 388  : 				LeaveCriticalSection(&LogCritical);

  00b6d	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00b72	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 389  : 				EntCrit = false;

  00b78	c6 45 e3 00	 mov	 BYTE PTR _EntCrit$[ebp], 0
$LN6@LogAddTime:

; 390  : 			}
; 391  : 		}

  00b7c	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00b83	eb 3e		 jmp	 SHORT $LN9@LogAddTime
$LN10@LogAddTime:
$LN15@LogAddTime:

; 392  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00b85	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00b88	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b8a	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b8c	89 95 8c f9 ff
	ff		 mov	 DWORD PTR $T231309[ebp], edx
  00b92	8b 85 8c f9 ff
	ff		 mov	 eax, DWORD PTR $T231309[ebp]
  00b98	33 c9		 xor	 ecx, ecx
  00b9a	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00b9f	0f 94 c1	 sete	 cl
  00ba2	8b c1		 mov	 eax, ecx
$LN12@LogAddTime:
$LN14@LogAddTime:
  00ba4	c3		 ret	 0
$LN11@LogAddTime:
  00ba5	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 393  : 	{
; 394  : 		if(EntCrit == true)

  00ba8	0f b6 45 e3	 movzx	 eax, BYTE PTR _EntCrit$[ebp]
  00bac	83 f8 01	 cmp	 eax, 1
  00baf	75 0b		 jne	 SHORT $LN1@LogAddTime

; 395  : 		{
; 396  : 			LeaveCriticalSection(&LogCritical);

  00bb1	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00bb6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddTime:

; 397  : 		}
; 398  : 	}

  00bbc	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN9@LogAddTime:

; 399  : }

  00bc3	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00bc6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00bcd	59		 pop	 ecx
  00bce	5f		 pop	 edi
  00bcf	5e		 pop	 esi
  00bd0	5b		 pop	 ebx
  00bd1	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bd4	33 cd		 xor	 ecx, ebp
  00bd6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bdb	8b e5		 mov	 esp, ebp
  00bdd	5d		 pop	 ebp
  00bde	c3		 ret	 0
?LogAddTimeDateFunc@@YAXPADZZ ENDP			; LogAddTimeDateFunc
; Function compile flags: /Odtp /ZI
_str$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
?LogAddHeadHexFuncVoid@@YAXPAD0H@Z PROC			; LogAddHeadHexFuncVoid

; 403  : {

  00be0	55		 push	 ebp
  00be1	8b ec		 mov	 ebp, esp
  00be3	83 ec 40	 sub	 esp, 64			; 00000040H
  00be6	53		 push	 ebx
  00be7	56		 push	 esi
  00be8	57		 push	 edi

; 404  : 	// Log Disabled
; 405  : }

  00be9	5f		 pop	 edi
  00bea	5e		 pop	 esi
  00beb	5b		 pop	 ebx
  00bec	8b e5		 mov	 esp, ebp
  00bee	5d		 pop	 ebp
  00bef	c3		 ret	 0
?LogAddHeadHexFuncVoid@@YAXPAD0H@Z ENDP			; LogAddHeadHexFuncVoid
_TEXT	ENDS
PUBLIC	??_C@_02MNMNLDAI@?$CJ?6?$AA@			; `string'
PUBLIC	??_C@_07KDJDOMME@0x?$CF02x?5?$AA@		; `string'
PUBLIC	??_C@_0P@MHJNGJHC@UNK?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_0BA@LDLPOFHH@RECV?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_0BA@HOHGBHCM@SEND?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ ; `string'
PUBLIC	?LogAddHeadHexFunc@@YAXPADH0H@Z			; LogAddHeadHexFunc
;	COMDAT ??_C@_02MNMNLDAI@?$CJ?6?$AA@
CONST	SEGMENT
??_C@_02MNMNLDAI@?$CJ?6?$AA@ DB ')', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KDJDOMME@0x?$CF02x?5?$AA@
CONST	SEGMENT
??_C@_07KDJDOMME@0x?$CF02x?5?$AA@ DB '0x%02x ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MHJNGJHC@UNK?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
CONST	SEGMENT
??_C@_0P@MHJNGJHC@UNK?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ DB 'UNK %d[%d] :'
	DB	' (', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LDLPOFHH@RECV?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
CONST	SEGMENT
??_C@_0BA@LDLPOFHH@RECV?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ DB 'RECV %d[%d'
	DB	'] : (', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HOHGBHCM@SEND?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
CONST	SEGMENT
??_C@_0BA@HOHGBHCM@SEND?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ DB 'SEND %d[%d'
	DB	'] : (', 00H					; `string'
CONST	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogAddHeadHexFunc@@YAXPADH0H@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff88H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN18@LogAddHead
	DD	FLAT:$LN19@LogAddHead
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv68 = -104						; size = 4
$T231321 = -100						; size = 4
_n$230963 = -32						; size = 4
_EntCrit$ = -25						; size = 1
__$SEHRec$ = -24					; size = 24
_sT$ = 8						; size = 4
_Type$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
?LogAddHeadHexFunc@@YAXPADH0H@Z PROC			; LogAddHeadHexFunc

; 409  : {

  00bf0	55		 push	 ebp
  00bf1	8b ec		 mov	 ebp, esp
  00bf3	6a fe		 push	 -2			; fffffffeH
  00bf5	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddHeadHexFunc@@YAXPADH0H@Z
  00bfa	68 00 00 00 00	 push	 OFFSET __except_handler4
  00bff	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00c05	50		 push	 eax
  00c06	83 c4 a8	 add	 esp, -88		; ffffffa8H
  00c09	53		 push	 ebx
  00c0a	56		 push	 esi
  00c0b	57		 push	 edi
  00c0c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00c11	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00c14	33 c5		 xor	 eax, ebp
  00c16	50		 push	 eax
  00c17	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00c1a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00c20	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 410  : 	bool EntCrit = false;

  00c23	c6 45 e7 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 411  : 	__try

  00c27	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 412  : 	{
; 413  : 		if ( gLogOutType==0)

  00c2e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  00c35	75 11		 jne	 SHORT $LN13@LogAddHead

; 414  : 		{
; 415  : 			return;

  00c37	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00c3e	e9 39 01 00 00	 jmp	 $LN17@LogAddHead

; 416  : 		}
; 417  : 		else

  00c43	e9 f3 00 00 00	 jmp	 $LN14@LogAddHead
$LN13@LogAddHead:

; 418  : 		{
; 419  : 			if (logfp==0)

  00c48	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _logfp, 0
  00c4f	75 11		 jne	 SHORT $LN11@LogAddHead

; 420  : 			{
; 421  : 				return;

  00c51	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00c58	e9 1f 01 00 00	 jmp	 $LN17@LogAddHead

; 422  : 			}
; 423  : 			else

  00c5d	e9 d9 00 00 00	 jmp	 $LN14@LogAddHead
$LN11@LogAddHead:

; 424  : 			{
; 425  : 				EnterCriticalSection(&LogCritical);

  00c62	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00c67	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 426  : 				EntCrit = true;

  00c6d	c6 45 e7 01	 mov	 BYTE PTR _EntCrit$[ebp], 1

; 427  : 
; 428  : 				switch(sT[0])

  00c71	8b 45 08	 mov	 eax, DWORD PTR _sT$[ebp]
  00c74	8a 08		 mov	 cl, BYTE PTR [eax]
  00c76	88 4d 98	 mov	 BYTE PTR tv68[ebp], cl
  00c79	80 7d 98 52	 cmp	 BYTE PTR tv68[ebp], 82	; 00000052H
  00c7d	74 26		 je	 SHORT $LN6@LogAddHead
  00c7f	80 7d 98 53	 cmp	 BYTE PTR tv68[ebp], 83	; 00000053H
  00c83	74 02		 je	 SHORT $LN7@LogAddHead
  00c85	eb 3c		 jmp	 SHORT $LN5@LogAddHead
$LN7@LogAddHead:

; 429  : 				{
; 430  : 					case 'S':
; 431  : 						fprintf(logfp, "SEND %d[%d] : (", Type ,len);

  00c87	8b 45 14	 mov	 eax, DWORD PTR _len$[ebp]
  00c8a	50		 push	 eax
  00c8b	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  00c8e	51		 push	 ecx
  00c8f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HOHGBHCM@SEND?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
  00c94	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _logfp
  00c9a	52		 push	 edx
  00c9b	e8 00 00 00 00	 call	 _fprintf
  00ca0	83 c4 10	 add	 esp, 16			; 00000010H

; 432  : 					break;

  00ca3	eb 3a		 jmp	 SHORT $LN8@LogAddHead
$LN6@LogAddHead:

; 433  : 					case 'R':
; 434  : 						fprintf(logfp, "RECV %d[%d] : (", Type ,len);

  00ca5	8b 45 14	 mov	 eax, DWORD PTR _len$[ebp]
  00ca8	50		 push	 eax
  00ca9	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  00cac	51		 push	 ecx
  00cad	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LDLPOFHH@RECV?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
  00cb2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _logfp
  00cb8	52		 push	 edx
  00cb9	e8 00 00 00 00	 call	 _fprintf
  00cbe	83 c4 10	 add	 esp, 16			; 00000010H

; 435  : 					break;

  00cc1	eb 1c		 jmp	 SHORT $LN8@LogAddHead
$LN5@LogAddHead:

; 436  : 					default:
; 437  : 						fprintf(logfp, "UNK %d[%d] : (", Type ,len);

  00cc3	8b 45 14	 mov	 eax, DWORD PTR _len$[ebp]
  00cc6	50		 push	 eax
  00cc7	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  00cca	51		 push	 ecx
  00ccb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MHJNGJHC@UNK?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
  00cd0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _logfp
  00cd6	52		 push	 edx
  00cd7	e8 00 00 00 00	 call	 _fprintf
  00cdc	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@LogAddHead:

; 438  : 					break;
; 439  : 				}
; 440  : 				
; 441  : 				for (int n=0; n<len; n++) 

  00cdf	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _n$230963[ebp], 0
  00ce6	eb 09		 jmp	 SHORT $LN4@LogAddHead
$LN3@LogAddHead:
  00ce8	8b 45 e0	 mov	 eax, DWORD PTR _n$230963[ebp]
  00ceb	83 c0 01	 add	 eax, 1
  00cee	89 45 e0	 mov	 DWORD PTR _n$230963[ebp], eax
$LN4@LogAddHead:
  00cf1	8b 45 e0	 mov	 eax, DWORD PTR _n$230963[ebp]
  00cf4	3b 45 14	 cmp	 eax, DWORD PTR _len$[ebp]
  00cf7	7d 20		 jge	 SHORT $LN2@LogAddHead

; 442  : 				{
; 443  : 					fprintf(logfp, "0x%02x ", *(BYTE *)(data+n));

  00cf9	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00cfc	03 45 e0	 add	 eax, DWORD PTR _n$230963[ebp]
  00cff	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00d02	51		 push	 ecx
  00d03	68 00 00 00 00	 push	 OFFSET ??_C@_07KDJDOMME@0x?$CF02x?5?$AA@
  00d08	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _logfp
  00d0e	52		 push	 edx
  00d0f	e8 00 00 00 00	 call	 _fprintf
  00d14	83 c4 0c	 add	 esp, 12			; 0000000cH

; 444  : 				}

  00d17	eb cf		 jmp	 SHORT $LN3@LogAddHead
$LN2@LogAddHead:

; 445  : 
; 446  : 				fprintf(logfp, ")\n");

  00d19	68 00 00 00 00	 push	 OFFSET ??_C@_02MNMNLDAI@?$CJ?6?$AA@
  00d1e	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  00d23	50		 push	 eax
  00d24	e8 00 00 00 00	 call	 _fprintf
  00d29	83 c4 08	 add	 esp, 8

; 447  : 
; 448  : 				LeaveCriticalSection(&LogCritical);

  00d2c	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00d31	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 449  : 				EntCrit = false;

  00d37	c6 45 e7 00	 mov	 BYTE PTR _EntCrit$[ebp], 0
$LN14@LogAddHead:

; 450  : 			}
; 451  : 		}

  00d3b	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00d42	eb 38		 jmp	 SHORT $LN17@LogAddHead
$LN18@LogAddHead:
$LN23@LogAddHead:

; 452  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00d44	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00d47	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d49	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d4b	89 55 9c	 mov	 DWORD PTR $T231321[ebp], edx
  00d4e	8b 45 9c	 mov	 eax, DWORD PTR $T231321[ebp]
  00d51	33 c9		 xor	 ecx, ecx
  00d53	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00d58	0f 94 c1	 sete	 cl
  00d5b	8b c1		 mov	 eax, ecx
$LN20@LogAddHead:
$LN22@LogAddHead:
  00d5d	c3		 ret	 0
$LN19@LogAddHead:
  00d5e	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 453  : 	{
; 454  : 		if(EntCrit == true)

  00d61	0f b6 45 e7	 movzx	 eax, BYTE PTR _EntCrit$[ebp]
  00d65	83 f8 01	 cmp	 eax, 1
  00d68	75 0b		 jne	 SHORT $LN1@LogAddHead

; 455  : 		{
; 456  : 			LeaveCriticalSection(&LogCritical);

  00d6a	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00d6f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddHead:

; 457  : 		}
; 458  : 	}

  00d75	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN17@LogAddHead:

; 459  : }

  00d7c	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00d7f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00d86	59		 pop	 ecx
  00d87	5f		 pop	 edi
  00d88	5e		 pop	 esi
  00d89	5b		 pop	 ebx
  00d8a	8b e5		 mov	 esp, ebp
  00d8c	5d		 pop	 ebp
  00d8d	c3		 ret	 0
?LogAddHeadHexFunc@@YAXPADH0H@Z ENDP			; LogAddHeadHexFunc
_TEXT	ENDS
PUBLIC	??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_05LJOMDNAA@?$CF?408s?$AA@			; `string'
;	COMDAT ??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@
CONST	SEGMENT
??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@ DB '[%s][%d] : '
	DB	'(', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05LJOMDNAA@?$CF?408s?$AA@
CONST	SEGMENT
??_C@_05LJOMDNAA@?$CF?408s?$AA@ DB '%.08s', 00H		; `string'
CONST	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogAddStrHexFunc@@YAXPAD0H@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff80H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN13@LogAddStrH
	DD	FLAT:$LN14@LogAddStrH
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231332 = -112						; size = 4
_n$230981 = -44						; size = 4
_ltime$230980 = -40					; size = 8
_today$230979 = -32					; size = 4
_EntCrit$ = -25						; size = 1
__$SEHRec$ = -24					; size = 24
_str$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
?LogAddStrHexFunc@@YAXPAD0H@Z PROC			; LogAddStrHexFunc

; 463  : {

  00d90	55		 push	 ebp
  00d91	8b ec		 mov	 ebp, esp
  00d93	6a fe		 push	 -2			; fffffffeH
  00d95	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddStrHexFunc@@YAXPAD0H@Z
  00d9a	68 00 00 00 00	 push	 OFFSET __except_handler4
  00d9f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00da5	50		 push	 eax
  00da6	83 c4 a0	 add	 esp, -96		; ffffffa0H
  00da9	53		 push	 ebx
  00daa	56		 push	 esi
  00dab	57		 push	 edi
  00dac	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00db1	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00db4	33 c5		 xor	 eax, ebp
  00db6	50		 push	 eax
  00db7	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00dba	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00dc0	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 464  : 	bool EntCrit = false;

  00dc3	c6 45 e7 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 465  : 	__try

  00dc7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 466  : 	{
; 467  : 		tm* today;
; 468  : 		time_t ltime;
; 469  : 		signed int n;
; 470  : 
; 471  : 		time(&ltime);

  00dce	8d 45 d8	 lea	 eax, DWORD PTR _ltime$230980[ebp]
  00dd1	50		 push	 eax
  00dd2	e8 00 00 00 00	 call	 _time
  00dd7	83 c4 04	 add	 esp, 4

; 472  : 		today=localtime(&ltime);

  00dda	8d 45 d8	 lea	 eax, DWORD PTR _ltime$230980[ebp]
  00ddd	50		 push	 eax
  00dde	e8 00 00 00 00	 call	 _localtime
  00de3	83 c4 04	 add	 esp, 4
  00de6	89 45 e0	 mov	 DWORD PTR _today$230979[ebp], eax

; 473  : 
; 474  : 		if (gLogOutType==0)

  00de9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  00df0	75 11		 jne	 SHORT $LN8@LogAddStrH

; 475  : 		{
; 476  : 			return;

  00df2	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00df9	e9 0b 01 00 00	 jmp	 $LN12@LogAddStrH

; 477  : 		}
; 478  : 		else

  00dfe	e9 c5 00 00 00	 jmp	 $LN9@LogAddStrH
$LN8@LogAddStrH:

; 479  : 		{
; 480  : 			if (logfp==0)

  00e03	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _logfp, 0
  00e0a	75 11		 jne	 SHORT $LN6@LogAddStrH

; 481  : 			{
; 482  : 				return;

  00e0c	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00e13	e9 f1 00 00 00	 jmp	 $LN12@LogAddStrH

; 483  : 			}
; 484  : 			else

  00e18	e9 ab 00 00 00	 jmp	 $LN9@LogAddStrH
$LN6@LogAddStrH:

; 485  : 			{
; 486  : 				EnterCriticalSection(&LogCritical);

  00e1d	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00e22	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 487  : 				EntCrit = true;

  00e28	c6 45 e7 01	 mov	 BYTE PTR _EntCrit$[ebp], 1

; 488  : 				fprintf(logfp, "%.08s", asctime(today)+11);

  00e2c	8b 45 e0	 mov	 eax, DWORD PTR _today$230979[ebp]
  00e2f	50		 push	 eax
  00e30	e8 00 00 00 00	 call	 _asctime
  00e35	83 c4 04	 add	 esp, 4
  00e38	83 c0 0b	 add	 eax, 11			; 0000000bH
  00e3b	50		 push	 eax
  00e3c	68 00 00 00 00	 push	 OFFSET ??_C@_05LJOMDNAA@?$CF?408s?$AA@
  00e41	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _logfp
  00e47	51		 push	 ecx
  00e48	e8 00 00 00 00	 call	 _fprintf
  00e4d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 489  : 				fprintf(logfp, "[%s][%d] : (", str,len);

  00e50	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00e53	50		 push	 eax
  00e54	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00e57	51		 push	 ecx
  00e58	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@
  00e5d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _logfp
  00e63	52		 push	 edx
  00e64	e8 00 00 00 00	 call	 _fprintf
  00e69	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 
; 491  : 				for (n=0; n<len; n++ )

  00e6c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _n$230981[ebp], 0
  00e73	eb 09		 jmp	 SHORT $LN4@LogAddStrH
$LN3@LogAddStrH:
  00e75	8b 45 d4	 mov	 eax, DWORD PTR _n$230981[ebp]
  00e78	83 c0 01	 add	 eax, 1
  00e7b	89 45 d4	 mov	 DWORD PTR _n$230981[ebp], eax
$LN4@LogAddStrH:
  00e7e	8b 45 d4	 mov	 eax, DWORD PTR _n$230981[ebp]
  00e81	3b 45 10	 cmp	 eax, DWORD PTR _len$[ebp]
  00e84	7d 20		 jge	 SHORT $LN2@LogAddStrH

; 492  : 				{
; 493  : 					fprintf(logfp, "0x%02x ", *(BYTE *)(data+n));

  00e86	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00e89	03 45 d4	 add	 eax, DWORD PTR _n$230981[ebp]
  00e8c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00e8f	51		 push	 ecx
  00e90	68 00 00 00 00	 push	 OFFSET ??_C@_07KDJDOMME@0x?$CF02x?5?$AA@
  00e95	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _logfp
  00e9b	52		 push	 edx
  00e9c	e8 00 00 00 00	 call	 _fprintf
  00ea1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 494  : 				}

  00ea4	eb cf		 jmp	 SHORT $LN3@LogAddStrH
$LN2@LogAddStrH:

; 495  : 				fprintf(logfp, ")\n");

  00ea6	68 00 00 00 00	 push	 OFFSET ??_C@_02MNMNLDAI@?$CJ?6?$AA@
  00eab	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  00eb0	50		 push	 eax
  00eb1	e8 00 00 00 00	 call	 _fprintf
  00eb6	83 c4 08	 add	 esp, 8

; 496  : 
; 497  : 				LeaveCriticalSection(&LogCritical);

  00eb9	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00ebe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 498  : 				EntCrit = false;

  00ec4	c6 45 e7 00	 mov	 BYTE PTR _EntCrit$[ebp], 0
$LN9@LogAddStrH:

; 499  : 			}
; 500  : 		}

  00ec8	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00ecf	eb 38		 jmp	 SHORT $LN12@LogAddStrH
$LN13@LogAddStrH:
$LN18@LogAddStrH:

; 501  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00ed1	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00ed4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ed6	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ed8	89 55 90	 mov	 DWORD PTR $T231332[ebp], edx
  00edb	8b 45 90	 mov	 eax, DWORD PTR $T231332[ebp]
  00ede	33 c9		 xor	 ecx, ecx
  00ee0	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00ee5	0f 94 c1	 sete	 cl
  00ee8	8b c1		 mov	 eax, ecx
$LN15@LogAddStrH:
$LN17@LogAddStrH:
  00eea	c3		 ret	 0
$LN14@LogAddStrH:
  00eeb	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 502  : 	{
; 503  : 		if(EntCrit == true)

  00eee	0f b6 45 e7	 movzx	 eax, BYTE PTR _EntCrit$[ebp]
  00ef2	83 f8 01	 cmp	 eax, 1
  00ef5	75 0b		 jne	 SHORT $LN1@LogAddStrH

; 504  : 		{
; 505  : 			LeaveCriticalSection(&LogCritical);

  00ef7	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00efc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddStrH:

; 506  : 		}
; 507  : 	}

  00f02	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN12@LogAddStrH:

; 508  : }

  00f09	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00f0c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00f13	59		 pop	 ecx
  00f14	5f		 pop	 edi
  00f15	5e		 pop	 esi
  00f16	5b		 pop	 ebx
  00f17	8b e5		 mov	 esp, ebp
  00f19	5d		 pop	 ebp
  00f1a	c3		 ret	 0
?LogAddStrHexFunc@@YAXPAD0H@Z ENDP			; LogAddStrHexFunc
_TEXT	ENDS
PUBLIC	?LogTextClear@@YAXXZ				; LogTextClear
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogTextClear@@YAXXZ DD 0fffffffeH
	DD	00H
	DD	0ffffff90H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@LogTextCle
	DD	FLAT:$LN9@LogTextCle
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231343 = -96						; size = 4
_n$230997 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?LogTextClear@@YAXXZ PROC				; LogTextClear

; 511  : {

  00f20	55		 push	 ebp
  00f21	8b ec		 mov	 ebp, esp
  00f23	6a fe		 push	 -2			; fffffffeH
  00f25	68 00 00 00 00	 push	 OFFSET __sehtable$?LogTextClear@@YAXXZ
  00f2a	68 00 00 00 00	 push	 OFFSET __except_handler4
  00f2f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00f35	50		 push	 eax
  00f36	83 c4 b0	 add	 esp, -80		; ffffffb0H
  00f39	53		 push	 ebx
  00f3a	56		 push	 esi
  00f3b	57		 push	 edi
  00f3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00f41	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00f44	33 c5		 xor	 eax, ebp
  00f46	50		 push	 eax
  00f47	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00f4a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00f50	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 512  : 	__try

  00f53	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 513  : 	{
; 514  : 		for (int n=0; n<LOG_TEXT_LINE; n++)

  00f5a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$230997[ebp], 0
  00f61	eb 09		 jmp	 SHORT $LN3@LogTextCle
$LN2@LogTextCle:
  00f63	8b 45 e4	 mov	 eax, DWORD PTR _n$230997[ebp]
  00f66	83 c0 01	 add	 eax, 1
  00f69	89 45 e4	 mov	 DWORD PTR _n$230997[ebp], eax
$LN3@LogTextCle:
  00f6c	83 7d e4 1e	 cmp	 DWORD PTR _n$230997[ebp], 30 ; 0000001eH
  00f70	7d 37		 jge	 SHORT $LN4@LogTextCle

; 515  : 		{
; 516  : 			memset(&LogText[n], 0, LOG_TEXT_LENGTH);

  00f72	68 8c 00 00 00	 push	 140			; 0000008cH
  00f77	6a 00		 push	 0
  00f79	8b 45 e4	 mov	 eax, DWORD PTR _n$230997[ebp]
  00f7c	69 c0 8c 00 00
	00		 imul	 eax, 140		; 0000008cH
  00f82	05 00 00 00 00	 add	 eax, OFFSET ?LogText@@3PAY0IM@DA ; LogText
  00f87	50		 push	 eax
  00f88	e8 00 00 00 00	 call	 _memset
  00f8d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 517  : 			LogTextLength[n]=0;	// WORD

  00f90	33 c0		 xor	 eax, eax
  00f92	8b 4d e4	 mov	 ecx, DWORD PTR _n$230997[ebp]
  00f95	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?LogTextLength@@3PAFA[ecx*2], ax

; 518  : 			LogTextViewType[n]=0;	// BYTE

  00f9d	8b 45 e4	 mov	 eax, DWORD PTR _n$230997[ebp]
  00fa0	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?LogTextViewType@@3PAEA[eax], 0

; 519  : 		}

  00fa7	eb ba		 jmp	 SHORT $LN2@LogTextCle
$LN4@LogTextCle:
  00fa9	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00fb0	eb 24		 jmp	 SHORT $LN7@LogTextCle
$LN8@LogTextCle:
$LN13@LogTextCle:

; 520  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00fb2	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00fb5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fb7	8b 11		 mov	 edx, DWORD PTR [ecx]
  00fb9	89 55 a0	 mov	 DWORD PTR $T231343[ebp], edx
  00fbc	8b 45 a0	 mov	 eax, DWORD PTR $T231343[ebp]
  00fbf	33 c9		 xor	 ecx, ecx
  00fc1	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00fc6	0f 94 c1	 sete	 cl
  00fc9	8b c1		 mov	 eax, ecx
$LN10@LogTextCle:
$LN12@LogTextCle:
  00fcb	c3		 ret	 0
$LN9@LogTextCle:
  00fcc	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 521  : 	{
; 522  : 	}

  00fcf	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN7@LogTextCle:

; 523  : }

  00fd6	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00fd9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00fe0	59		 pop	 ecx
  00fe1	5f		 pop	 edi
  00fe2	5e		 pop	 esi
  00fe3	5b		 pop	 ebx
  00fe4	8b e5		 mov	 esp, ebp
  00fe6	5d		 pop	 ebp
  00fe7	c3		 ret	 0
?LogTextClear@@YAXXZ ENDP				; LogTextClear
; Function compile flags: /Odtp /ZI
_hWnd$ = 8						; size = 4
?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z PROC		; LogTextPaintProcVoid

; 527  : {

  00ff0	55		 push	 ebp
  00ff1	8b ec		 mov	 ebp, esp
  00ff3	83 ec 40	 sub	 esp, 64			; 00000040H
  00ff6	53		 push	 ebx
  00ff7	56		 push	 esi
  00ff8	57		 push	 edi

; 528  : 	// Log Disabled
; 529  : }

  00ff9	5f		 pop	 edi
  00ffa	5e		 pop	 esi
  00ffb	5b		 pop	 ebx
  00ffc	8b e5		 mov	 esp, ebp
  00ffe	5d		 pop	 ebp
  00fff	c3		 ret	 0
?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z ENDP		; LogTextPaintProcVoid
_TEXT	ENDS
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	__imp__GetDC@4:PROC
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogTextPaintProc@@YAXPAUHWND__@@@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff80H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN18@LogTextPai
	DD	FLAT:$LN19@LogTextPai
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv73 = -112						; size = 4
$T231355 = -108						; size = 4
_iOldBkMode$231012 = -40				; size = 4
_n$231011 = -36						; size = 4
_total$231010 = -32					; size = 4
_hdc$231009 = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_hWnd$ = 8						; size = 4
?LogTextPaintProc@@YAXPAUHWND__@@@Z PROC		; LogTextPaintProc

; 533  : {

  01000	55		 push	 ebp
  01001	8b ec		 mov	 ebp, esp
  01003	6a fe		 push	 -2			; fffffffeH
  01005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogTextPaintProc@@YAXPAUHWND__@@@Z
  0100a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0100f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  01015	50		 push	 eax
  01016	83 c4 a0	 add	 esp, -96		; ffffffa0H
  01019	53		 push	 ebx
  0101a	56		 push	 esi
  0101b	57		 push	 edi
  0101c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  01024	33 c5		 xor	 eax, ebp
  01026	50		 push	 eax
  01027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0102a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  01030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 534  : 	__try

  01033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 535  : 	{
; 536  : 		HDC hdc;
; 537  : 		int total;
; 538  : 		int n;
; 539  : 
; 540  : 		hdc=GetDC(hWnd);

  0103a	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0103d	50		 push	 eax
  0103e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  01044	89 45 e4	 mov	 DWORD PTR _hdc$231009[ebp], eax

; 541  : 		total= LOG_TEXT_LINE;

  01047	c7 45 e0 1e 00
	00 00		 mov	 DWORD PTR _total$231010[ebp], 30 ; 0000001eH

; 542  : 
; 543  : 		n=m_cline;

  0104e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_cline@@3HA ; m_cline
  01053	89 45 dc	 mov	 DWORD PTR _n$231011[ebp], eax

; 544  : 
; 545  : #if(NEW_WINDOW==1)	
; 546  : 
; 547  : 		int iOldBkMode = SetBkMode(hdc, TRANSPARENT);

  01056	6a 01		 push	 1
  01058	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  0105b	50		 push	 eax
  0105c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  01062	89 45 d8	 mov	 DWORD PTR _iOldBkMode$231012[ebp], eax
$LN13@LogTextPai:

; 548  : 
; 549  : 		while(total-- != 0)

  01065	8b 45 e0	 mov	 eax, DWORD PTR _total$231010[ebp]
  01068	8b 4d e0	 mov	 ecx, DWORD PTR _total$231010[ebp]
  0106b	83 e9 01	 sub	 ecx, 1
  0106e	89 4d e0	 mov	 DWORD PTR _total$231010[ebp], ecx
  01071	85 c0		 test	 eax, eax
  01073	0f 84 0c 01 00
	00		 je	 $LN12@LogTextPai

; 550  : 		{
; 551  : 			switch (LogTextViewType[n] )

  01079	8b 45 dc	 mov	 eax, DWORD PTR _n$231011[ebp]
  0107c	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?LogTextViewType@@3PAEA[eax]
  01083	89 4d 90	 mov	 DWORD PTR tv73[ebp], ecx
  01086	8b 55 90	 mov	 edx, DWORD PTR tv73[ebp]
  01089	83 ea 02	 sub	 edx, 2
  0108c	89 55 90	 mov	 DWORD PTR tv73[ebp], edx
  0108f	83 7d 90 05	 cmp	 DWORD PTR tv73[ebp], 5
  01093	77 70		 ja	 SHORT $LN3@LogTextPai
  01095	8b 45 90	 mov	 eax, DWORD PTR tv73[ebp]
  01098	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@LogTextPai[eax*4]
$LN9@LogTextPai:

; 552  : 			{
; 553  : 			case 2:
; 554  : 				SetTextColor(hdc, RGB(180, 30, 30));//RGB(180, 140, 180) );	

  0109f	68 b4 1e 1e 00	 push	 1973940			; 001e1eb4H
  010a4	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  010a7	50		 push	 eax
  010a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 555  : 				break;

  010ae	eb 64		 jmp	 SHORT $LN10@LogTextPai
$LN8@LogTextPai:

; 556  : 			case 3:
; 557  : 				SetTextColor(hdc, RGB(0, 100, 0));

  010b0	68 00 64 00 00	 push	 25600			; 00006400H
  010b5	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  010b8	50		 push	 eax
  010b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 558  : 				break;

  010bf	eb 53		 jmp	 SHORT $LN10@LogTextPai
$LN7@LogTextPai:

; 559  : 			case 4:
; 560  : 				SetTextColor(hdc, RGB(130, 170, 190));

  010c1	68 82 aa be 00	 push	 12495490		; 00beaa82H
  010c6	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  010c9	50		 push	 eax
  010ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 561  : 				break;

  010d0	eb 42		 jmp	 SHORT $LN10@LogTextPai
$LN6@LogTextPai:

; 562  : 			case 5:
; 563  : 				SetTextColor(hdc, RGB(155, 0, 0));

  010d2	68 9b 00 00 00	 push	 155			; 0000009bH
  010d7	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  010da	50		 push	 eax
  010db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 564  : 				break;

  010e1	eb 31		 jmp	 SHORT $LN10@LogTextPai
$LN5@LogTextPai:

; 565  : 			case 6:
; 566  : 				SetTextColor(hdc, RGB(0, 0, 100));

  010e3	68 00 00 64 00	 push	 6553600			; 00640000H
  010e8	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  010eb	50		 push	 eax
  010ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 567  : 				break;

  010f2	eb 20		 jmp	 SHORT $LN10@LogTextPai
$LN4@LogTextPai:

; 568  : 			case 7:
; 569  : 				SetTextColor(hdc, RGB(210, 30, 150));

  010f4	68 d2 1e 96 00	 push	 9838290			; 00961ed2H
  010f9	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  010fc	50		 push	 eax
  010fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 570  : 				break;

  01103	eb 0f		 jmp	 SHORT $LN10@LogTextPai
$LN3@LogTextPai:

; 571  : 			default:
; 572  : 				SetTextColor(hdc, RGB(32, 240, 190));

  01105	68 20 f0 be 00	 push	 12513312		; 00bef020H
  0110a	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  0110d	50		 push	 eax
  0110e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8
$LN10@LogTextPai:

; 573  : 				break;
; 574  : 			}
; 575  : 			if (strlen(LogText[n])>1)

  01114	8b 45 dc	 mov	 eax, DWORD PTR _n$231011[ebp]
  01117	69 c0 8c 00 00
	00		 imul	 eax, 140		; 0000008cH
  0111d	05 00 00 00 00	 add	 eax, OFFSET ?LogText@@3PAY0IM@DA ; LogText
  01122	50		 push	 eax
  01123	e8 00 00 00 00	 call	 _strlen
  01128	83 c4 04	 add	 esp, 4
  0112b	83 f8 01	 cmp	 eax, 1
  0112e	76 3e		 jbe	 SHORT $LN2@LogTextPai

; 576  : 			{
; 577  : 				TextOut( hdc, 10, total*15 + 110, LogText[n], strlen(LogText[n])); 

  01130	8b 45 dc	 mov	 eax, DWORD PTR _n$231011[ebp]
  01133	69 c0 8c 00 00
	00		 imul	 eax, 140		; 0000008cH
  01139	05 00 00 00 00	 add	 eax, OFFSET ?LogText@@3PAY0IM@DA ; LogText
  0113e	50		 push	 eax
  0113f	e8 00 00 00 00	 call	 _strlen
  01144	83 c4 04	 add	 esp, 4
  01147	50		 push	 eax
  01148	8b 4d dc	 mov	 ecx, DWORD PTR _n$231011[ebp]
  0114b	69 c9 8c 00 00
	00		 imul	 ecx, 140		; 0000008cH
  01151	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?LogText@@3PAY0IM@DA ; LogText
  01157	51		 push	 ecx
  01158	8b 55 e0	 mov	 edx, DWORD PTR _total$231010[ebp]
  0115b	6b d2 0f	 imul	 edx, 15			; 0000000fH
  0115e	83 c2 6e	 add	 edx, 110		; 0000006eH
  01161	52		 push	 edx
  01162	6a 0a		 push	 10			; 0000000aH
  01164	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  01167	50		 push	 eax
  01168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
$LN2@LogTextPai:

; 578  : 			}
; 579  : 			n--;

  0116e	8b 45 dc	 mov	 eax, DWORD PTR _n$231011[ebp]
  01171	83 e8 01	 sub	 eax, 1
  01174	89 45 dc	 mov	 DWORD PTR _n$231011[ebp], eax

; 580  : 			if (n<0)

  01177	79 07		 jns	 SHORT $LN1@LogTextPai

; 581  : 			{
; 582  : 				n=LOG_TEXT_LINE-1;

  01179	c7 45 dc 1d 00
	00 00		 mov	 DWORD PTR _n$231011[ebp], 29 ; 0000001dH
$LN1@LogTextPai:

; 583  : 			}
; 584  : 		}

  01180	e9 e0 fe ff ff	 jmp	 $LN13@LogTextPai
$LN12@LogTextPai:

; 585  : 
; 586  : 		SetBkMode(hdc, iOldBkMode);

  01185	8b 45 d8	 mov	 eax, DWORD PTR _iOldBkMode$231012[ebp]
  01188	50		 push	 eax
  01189	8b 4d e4	 mov	 ecx, DWORD PTR _hdc$231009[ebp]
  0118c	51		 push	 ecx
  0118d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 587  : #else
; 588  : 
; 589  : 		while(total-- != 0)
; 590  : 		{
; 591  : 			switch (LogTextViewType[n] )
; 592  : 			{
; 593  : 			case 2:
; 594  : 				SetTextColor(hdc, RGB(255, 0, 0) );	
; 595  : 				break;
; 596  : 			case 3:
; 597  : 				SetTextColor(hdc, RGB(0, 100, 0));
; 598  : 				break;
; 599  : 			case 4:
; 600  : 				SetTextColor(hdc, RGB(0, 0, 255));
; 601  : 				break;
; 602  : 			case 5:
; 603  : 				SetTextColor(hdc, RGB(155, 0, 0));
; 604  : 				break;
; 605  : 			case 6:
; 606  : 				SetTextColor(hdc, RGB(0, 0, 100));
; 607  : 				break;
; 608  : 			case 7:
; 609  : 				SetTextColor(hdc, RGB(210, 30, 150));
; 610  : 				break;
; 611  : 			default:
; 612  : 				SetTextColor(hdc, RGB(0, 0, 0));
; 613  : 				break;
; 614  : 			}
; 615  : 			if (strlen(LogText[n])>1)
; 616  : 			{
; 617  : 				TextOut( hdc, 0, total*15 + 100, LogText[n], strlen(LogText[n])); 
; 618  : 			}
; 619  : 			n--;
; 620  : 			if (n<0)
; 621  : 			{
; 622  : 				n=LOG_TEXT_LINE-1;
; 623  : 			}
; 624  : 		}
; 625  : #endif
; 626  : 
; 627  : 	ReleaseDC(hWnd, hdc);

  01193	8b 45 e4	 mov	 eax, DWORD PTR _hdc$231009[ebp]
  01196	50		 push	 eax
  01197	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  0119a	51		 push	 ecx
  0119b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 628  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  011a1	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  011a8	eb 24		 jmp	 SHORT $LN17@LogTextPai
$LN18@LogTextPai:
$LN24@LogTextPai:
  011aa	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  011ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  011af	8b 11		 mov	 edx, DWORD PTR [ecx]
  011b1	89 55 94	 mov	 DWORD PTR $T231355[ebp], edx
  011b4	8b 45 94	 mov	 eax, DWORD PTR $T231355[ebp]
  011b7	33 c9		 xor	 ecx, ecx
  011b9	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  011be	0f 94 c1	 sete	 cl
  011c1	8b c1		 mov	 eax, ecx
$LN20@LogTextPai:
$LN22@LogTextPai:
  011c3	c3		 ret	 0
$LN19@LogTextPai:
  011c4	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 629  : 	{
; 630  : 	}

  011c7	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN17@LogTextPai:

; 631  : }

  011ce	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  011d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  011d8	59		 pop	 ecx
  011d9	5f		 pop	 edi
  011da	5e		 pop	 esi
  011db	5b		 pop	 ebx
  011dc	8b e5		 mov	 esp, ebp
  011de	5d		 pop	 ebp
  011df	c3		 ret	 0
$LN23@LogTextPai:
  011e0	00 00 00 00	 DD	 $LN9@LogTextPai
  011e4	00 00 00 00	 DD	 $LN8@LogTextPai
  011e8	00 00 00 00	 DD	 $LN7@LogTextPai
  011ec	00 00 00 00	 DD	 $LN6@LogTextPai
  011f0	00 00 00 00	 DD	 $LN5@LogTextPai
  011f4	00 00 00 00	 DD	 $LN4@LogTextPai
?LogTextPaintProc@@YAXPAUHWND__@@@Z ENDP		; LogTextPaintProc
_TEXT	ENDS
PUBLIC	?LogGetFileName@@YAHXZ				; LogGetFileName
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
?LogGetFileName@@YAHXZ PROC				; LogGetFileName

; 634  : {

  01200	55		 push	 ebp
  01201	8b ec		 mov	 ebp, esp
  01203	83 ec 40	 sub	 esp, 64			; 00000040H
  01206	53		 push	 ebx
  01207	56		 push	 esi
  01208	57		 push	 edi

; 635  : 	return 0;

  01209	33 c0		 xor	 eax, eax

; 636  : }

  0120b	5f		 pop	 edi
  0120c	5e		 pop	 esi
  0120d	5b		 pop	 ebx
  0120e	8b e5		 mov	 esp, ebp
  01210	5d		 pop	 ebp
  01211	c3		 ret	 0
?LogGetFileName@@YAHXZ ENDP				; LogGetFileName
_TEXT	ENDS
PUBLIC	?LogClose@@YAXXZ				; LogClose
EXTRN	__imp__DeleteCriticalSection@4:PROC
xdata$x	SEGMENT
	ORG $+4
__sehtable$?LogClose@@YAXXZ DD 0fffffffeH
	DD	00H
	DD	0ffffff94H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN6@LogClose
	DD	FLAT:$LN7@LogClose
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231368 = -92						; size = 4
__$SEHRec$ = -24					; size = 24
?LogClose@@YAXXZ PROC					; LogClose

; 639  : {

  01220	55		 push	 ebp
  01221	8b ec		 mov	 ebp, esp
  01223	6a fe		 push	 -2			; fffffffeH
  01225	68 00 00 00 00	 push	 OFFSET __sehtable$?LogClose@@YAXXZ
  0122a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0122f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  01235	50		 push	 eax
  01236	83 c4 b4	 add	 esp, -76		; ffffffb4H
  01239	53		 push	 ebx
  0123a	56		 push	 esi
  0123b	57		 push	 edi
  0123c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01241	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  01244	33 c5		 xor	 eax, ebp
  01246	50		 push	 eax
  01247	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0124a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  01250	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 640  : 	__try

  01253	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 641  : 	{
; 642  : 		if (logfp!=0)

  0125a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _logfp, 0
  01261	74 0e		 je	 SHORT $LN1@LogClose

; 643  : 		{
; 644  : 			fclose(logfp);

  01263	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  01268	50		 push	 eax
  01269	e8 00 00 00 00	 call	 _fclose
  0126e	83 c4 04	 add	 esp, 4
$LN1@LogClose:

; 645  : 		}
; 646  : 		DeleteCriticalSection(&LogCritical);

  01271	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  01276	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 647  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  0127c	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  01283	eb 24		 jmp	 SHORT $LN5@LogClose
$LN6@LogClose:
$LN11@LogClose:
  01285	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  01288	8b 08		 mov	 ecx, DWORD PTR [eax]
  0128a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0128c	89 55 a4	 mov	 DWORD PTR $T231368[ebp], edx
  0128f	8b 45 a4	 mov	 eax, DWORD PTR $T231368[ebp]
  01292	33 c9		 xor	 ecx, ecx
  01294	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  01299	0f 94 c1	 sete	 cl
  0129c	8b c1		 mov	 eax, ecx
$LN8@LogClose:
$LN10@LogClose:
  0129e	c3		 ret	 0
$LN7@LogClose:
  0129f	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 648  : 	{
; 649  : 	}

  012a2	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN5@LogClose:

; 650  : }

  012a9	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  012ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  012b3	59		 pop	 ecx
  012b4	5f		 pop	 edi
  012b5	5e		 pop	 esi
  012b6	5b		 pop	 ebx
  012b7	8b e5		 mov	 esp, ebp
  012b9	5d		 pop	 ebp
  012ba	c3		 ret	 0
?LogClose@@YAXXZ ENDP					; LogClose
_TEXT	ENDS
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?MsgBox@@YAXPADZZ				; MsgBox
EXTRN	__imp__MessageBoxA@16:PROC
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
xdata$x	SEGMENT
	ORG $+4
__sehtable$?MsgBox@@YAXPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffffd8cH
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN5@MsgBox
	DD	FLAT:$LN6@MsgBox
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T231380 = -612						; size = 4
_pArguments$231085 = -544				; size = 4
_szBuffer$231084 = -540					; size = 512
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_szlog$ = 8						; size = 4
?MsgBox@@YAXPADZZ PROC					; MsgBox

; 655  : {

  012c0	55		 push	 ebp
  012c1	8b ec		 mov	 ebp, esp
  012c3	6a fe		 push	 -2			; fffffffeH
  012c5	68 00 00 00 00	 push	 OFFSET __sehtable$?MsgBox@@YAXPADZZ
  012ca	68 00 00 00 00	 push	 OFFSET __except_handler4
  012cf	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  012d5	50		 push	 eax
  012d6	81 c4 ac fd ff
	ff		 add	 esp, -596		; fffffdacH
  012dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  012e1	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  012e4	33 c5		 xor	 eax, ebp
  012e6	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  012e9	53		 push	 ebx
  012ea	56		 push	 esi
  012eb	57		 push	 edi
  012ec	50		 push	 eax
  012ed	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  012f0	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  012f6	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 656  : 	__try

  012f9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 657  : 	{
; 658  : 		char szBuffer[512]="";

  01300	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01305	88 85 e4 fd ff
	ff		 mov	 BYTE PTR _szBuffer$231084[ebp], al
  0130b	68 ff 01 00 00	 push	 511			; 000001ffH
  01310	6a 00		 push	 0
  01312	8d 85 e5 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$231084[ebp+1]
  01318	50		 push	 eax
  01319	e8 00 00 00 00	 call	 _memset
  0131e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 659  : 		va_list pArguments;
; 660  : 		va_start(pArguments, szlog);

  01321	8d 45 0c	 lea	 eax, DWORD PTR _szlog$[ebp+4]
  01324	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _pArguments$231085[ebp], eax

; 661  : 		vsprintf(szBuffer, szlog, pArguments);

  0132a	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _pArguments$231085[ebp]
  01330	50		 push	 eax
  01331	8b 4d 08	 mov	 ecx, DWORD PTR _szlog$[ebp]
  01334	51		 push	 ecx
  01335	8d 95 e4 fd ff
	ff		 lea	 edx, DWORD PTR _szBuffer$231084[ebp]
  0133b	52		 push	 edx
  0133c	e8 00 00 00 00	 call	 _vsprintf
  01341	83 c4 0c	 add	 esp, 12			; 0000000cH

; 662  : 		va_end(pArguments);

  01344	c7 85 e0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$231085[ebp], 0

; 663  : 		MessageBox(NULL, szBuffer, "error", MB_OK|MB_APPLMODAL);

  0134e	6a 00		 push	 0
  01350	68 00 00 00 00	 push	 OFFSET ??_C@_05KKCIMGE@error?$AA@
  01355	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$231084[ebp]
  0135b	50		 push	 eax
  0135c	6a 00		 push	 0
  0135e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 664  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  01364	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0136b	eb 2a		 jmp	 SHORT $LN4@MsgBox
$LN5@MsgBox:
$LN10@MsgBox:
  0136d	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  01370	8b 08		 mov	 ecx, DWORD PTR [eax]
  01372	8b 11		 mov	 edx, DWORD PTR [ecx]
  01374	89 95 9c fd ff
	ff		 mov	 DWORD PTR $T231380[ebp], edx
  0137a	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR $T231380[ebp]
  01380	33 c9		 xor	 ecx, ecx
  01382	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  01387	0f 94 c1	 sete	 cl
  0138a	8b c1		 mov	 eax, ecx
$LN7@MsgBox:
$LN9@MsgBox:
  0138c	c3		 ret	 0
$LN6@MsgBox:
  0138d	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 665  : 	{
; 666  : 	}

  01390	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN4@MsgBox:

; 667  : }

  01397	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0139a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  013a1	59		 pop	 ecx
  013a2	5f		 pop	 edi
  013a3	5e		 pop	 esi
  013a4	5b		 pop	 ebx
  013a5	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  013a8	33 cd		 xor	 ecx, ebp
  013aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  013af	8b e5		 mov	 esp, ebp
  013b1	5d		 pop	 ebp
  013b2	c3		 ret	 0
?MsgBox@@YAXPADZZ ENDP					; MsgBox
_TEXT	ENDS
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_09KBJOJFCH@WriteLogs?$AA@			; `string'
PUBLIC	??_C@_0BK@PCGLKKEC@?4?4?2Data?2ExData?2Common?4ini?$AA@ ; `string'
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KBJOJFCH@WriteLogs?$AA@
CONST	SEGMENT
??_C@_09KBJOJFCH@WriteLogs?$AA@ DB 'WriteLogs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PCGLKKEC@?4?4?2Data?2ExData?2Common?4ini?$AA@
CONST	SEGMENT
??_C@_0BK@PCGLKKEC@?4?4?2Data?2ExData?2Common?4ini?$AA@ DB '..\Data\ExDat'
	DB	'a\Common.ini', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??__EgLogOutType@@YAXXZ
text$yc	SEGMENT
??__EgLogOutType@@YAXXZ PROC				; `dynamic initializer for 'gLogOutType'', COMDAT

; 31   : int gLogOutType = GetPrivateProfileInt("ExTeam","WriteLogs",1,CommonServer_DIR);// 1; // THIS IS NOT THE PLACE OF TTHIS VARIABLE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PCGLKKEC@?4?4?2Data?2ExData?2Common?4ini?$AA@
  0000e	6a 01		 push	 1
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_09KBJOJFCH@WriteLogs?$AA@
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?gLogOutType@@3HA, eax ; gLogOutType
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??__EgLogOutType@@YAXXZ ENDP				; `dynamic initializer for 'gLogOutType''
text$yc	ENDS
PUBLIC	?gLogOutType@@3HA				; gLogOutType
_BSS	SEGMENT
?gLogOutType@@3HA DD 01H DUP (?)			; gLogOutType
_BSS	ENDS
CRT$XCU	SEGMENT
_gLogOutType$initializer$ DD FLAT:??__EgLogOutType@@YAXXZ
CRT$XCU	ENDS
END
