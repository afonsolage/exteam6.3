; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\NewMasterLevelSkillTreeSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?CHARACTER_TABLE@@3PAU_stCharacterTable@@A	; CHARACTER_TABLE
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
	DD	0190H
	DD	0257H
	DD	0190H
	DD	0257H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
?CHARACTER_TABLE@@3PAU_stCharacterTable@@A DD 02H	; CHARACTER_TABLE
	DD	00H
	DD	01H
	DD	01H
	DD	04H
	DD	02H
	DD	010H
	DD	03H
	DD	020H
	DD	04H
	DD	08H
	DD	05H
	DD	040H
	DD	06H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMasterLevelSkillTreeSystem@@6B@		; CMasterLevelSkillTreeSystem::`vftable'
PUBLIC	??0CMasterLevelSkillTreeSystem@@QAE@XZ		; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
PUBLIC	??_R4CMasterLevelSkillTreeSystem@@6B@		; CMasterLevelSkillTreeSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMasterLevelSkillTreeSystem@@@8		; CMasterLevelSkillTreeSystem `RTTI Type Descriptor'
PUBLIC	??_R3CMasterLevelSkillTreeSystem@@8		; CMasterLevelSkillTreeSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMasterLevelSkillTreeSystem@@8		; CMasterLevelSkillTreeSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8	; CMasterLevelSkillTreeSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??0MULua@@QAE@XZ:PROC				; MULua::MULua
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMasterLevelSkillTreeSystem@@UAEPAXI@Z:PROC	; CMasterLevelSkillTreeSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\newmasterlevelskilltreesystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8 DD FLAT:??_R0?AVCMasterLevelSkillTreeSystem@@@8 ; CMasterLevelSkillTreeSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMasterLevelSkillTreeSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CMasterLevelSkillTreeSystem@@8
rdata$r	SEGMENT
??_R2CMasterLevelSkillTreeSystem@@8 DD FLAT:??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8 ; CMasterLevelSkillTreeSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMasterLevelSkillTreeSystem@@8
rdata$r	SEGMENT
??_R3CMasterLevelSkillTreeSystem@@8 DD 00H		; CMasterLevelSkillTreeSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMasterLevelSkillTreeSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMasterLevelSkillTreeSystem@@@8
_DATA	SEGMENT
??_R0?AVCMasterLevelSkillTreeSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CMasterLevelSkillTreeSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMasterLevelSkillTreeSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMasterLevelSkillTreeSystem@@6B@
rdata$r	SEGMENT
??_R4CMasterLevelSkillTreeSystem@@6B@ DD 00H		; CMasterLevelSkillTreeSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMasterLevelSkillTreeSystem@@@8
	DD	FLAT:??_R3CMasterLevelSkillTreeSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CMasterLevelSkillTreeSystem@@6B@
CONST	SEGMENT
??_7CMasterLevelSkillTreeSystem@@6B@ DD FLAT:??_R4CMasterLevelSkillTreeSystem@@6B@ ; CMasterLevelSkillTreeSystem::`vftable'
	DD	FLAT:??_ECMasterLevelSkillTreeSystem@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMasterLevelSkillTreeSystem@@QAE@XZ PROC		; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMasterLevelSkillTreeSystem@@6B@
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	81 c1 c4 55 00
	00		 add	 ecx, 21956		; 000055c4H
  0001e	e8 00 00 00 00	 call	 ??0MULua@@QAE@XZ	; MULua::MULua

; 41   : 	this->IsLoaded = false;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c6 80 c8 55 00
	00 00		 mov	 BYTE PTR [eax+21960], 0

; 42   : }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??0CMasterLevelSkillTreeSystem@@QAE@XZ ENDP		; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
_TEXT	ENDS
PUBLIC	??1CMasterLevelSkillTreeSystem@@UAE@XZ		; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z PROC		; CMasterLevelSkillTreeSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMasterLevelSkillTreeSystem@@UAE@XZ ; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z ENDP		; CMasterLevelSkillTreeSystem::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1MULua@@QAE@XZ:PROC				; MULua::~MULua
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMasterLevelSkillTreeSystem@@UAE@XZ PROC		; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
; _this$ = ecx

; 46   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMasterLevelSkillTreeSystem@@6B@

; 47   : 
; 48   : }

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 c4 55 00
	00		 add	 ecx, 21956		; 000055c4H
  0005e	e8 00 00 00 00	 call	 ??1MULua@@QAE@XZ	; MULua::~MULua
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
??1CMasterLevelSkillTreeSystem@@UAE@XZ ENDP		; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
_TEXT	ENDS
PUBLIC	??_C@_0BA@OJAEHKGE@FN_LuaGetRate_6?$AA@		; `string'
PUBLIC	??_C@_0BB@JDPFBAKN@FN_LuaGetMaxAG_2?$AA@	; `string'
PUBLIC	??_C@_0BD@KJMMMHPN@FN_LuaGetIncStat_2?$AA@	; `string'
PUBLIC	??_C@_0BH@PNBCLGBJ@FN_LuaGetIncBlocking_2?$AA@	; `string'
PUBLIC	??_C@_0BH@FICCLEM@FN_LuaGetMaxLifeMana_2?$AA@	; `string'
PUBLIC	??_C@_0BB@JLGAHLKB@FN_LuaGetMaxSD_2?$AA@	; `string'
PUBLIC	??_C@_0BF@HNJNEHMD@FN_LuaGetManAttack_2?$AA@	; `string'
PUBLIC	??_C@_0BG@GGDFLEKK@FN_LuaGetAttackRate_2?$AA@	; `string'
PUBLIC	??_C@_0BI@IOHMNLHN@FN_LuaGetBlockingRate_2?$AA@	; `string'
PUBLIC	??_C@_0BF@NOFHHNAA@FN_LuaGetIronDefense?$AA@	; `string'
PUBLIC	??_C@_0BF@GDGAGAMG@FN_LuaGetPoisonArrow?$AA@	; `string'
PUBLIC	??_C@_0BF@FKHJAMAB@FN_LuaGetEarthPrison?$AA@	; `string'
PUBLIC	??_C@_0BE@KOKJPKNK@FN_LuaGetBloodStorm?$AA@	; `string'
PUBLIC	??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@	; `string'
PUBLIC	??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@	; `string'
PUBLIC	??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@ ; `string'
PUBLIC	??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@	; `string'
PUBLIC	??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@	; `string'
PUBLIC	??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@	; `string'
PUBLIC	??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@	; `string'
PUBLIC	??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@	; `string'
PUBLIC	??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@ ; `string'
PUBLIC	??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@	; `string'
PUBLIC	??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@	; `string'
PUBLIC	??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@ ; `string'
PUBLIC	??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@	; `string'
PUBLIC	??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@	; `string'
PUBLIC	??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@		; `string'
PUBLIC	??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@	; `string'
PUBLIC	??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@		; `string'
PUBLIC	??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@	; `string'
PUBLIC	??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@	; `string'
PUBLIC	??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@	; `string'
PUBLIC	??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@ ; `string'
PUBLIC	??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@	; `string'
PUBLIC	??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@	; `string'
PUBLIC	?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
PUBLIC	??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@	; `string'
PUBLIC	??_C@_03LHPBPOFD@i?$DOd?$AA@			; `string'
PUBLIC	??_C@_0BE@PAHHDMPF@Lua?2MasterSkill?4lua?$AA@	; `string'
PUBLIC	??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@ ; `string'
PUBLIC	??_C@_0FF@LKIJBIMC@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??Init@CMasterLevelSkillTreeSystem@@QAEXXZ@4JA ; `CMasterLevelSkillTreeSystem::Init'::`2'::__LINE__Var
PUBLIC	?Init@CMasterLevelSkillTreeSystem@@QAEXXZ	; CMasterLevelSkillTreeSystem::Init
EXTRN	?Release@MULua@@QAEXXZ:PROC			; MULua::Release
EXTRN	?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ:PROC	; g_Generic_Call
EXTRN	?DoFile@MULua@@QAE_NPBD@Z:PROC			; MULua::DoFile
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?GetLua@MULua@@QAEPAUlua_State@@XZ:PROC		; MULua::GetLua
EXTRN	_memset:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BA@OJAEHKGE@FN_LuaGetRate_6?$AA@
CONST	SEGMENT
??_C@_0BA@OJAEHKGE@FN_LuaGetRate_6?$AA@ DB 'FN_LuaGetRate_6', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JDPFBAKN@FN_LuaGetMaxAG_2?$AA@
CONST	SEGMENT
??_C@_0BB@JDPFBAKN@FN_LuaGetMaxAG_2?$AA@ DB 'FN_LuaGetMaxAG_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KJMMMHPN@FN_LuaGetIncStat_2?$AA@
CONST	SEGMENT
??_C@_0BD@KJMMMHPN@FN_LuaGetIncStat_2?$AA@ DB 'FN_LuaGetIncStat_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PNBCLGBJ@FN_LuaGetIncBlocking_2?$AA@
CONST	SEGMENT
??_C@_0BH@PNBCLGBJ@FN_LuaGetIncBlocking_2?$AA@ DB 'FN_LuaGetIncBlocking_2'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FICCLEM@FN_LuaGetMaxLifeMana_2?$AA@
CONST	SEGMENT
??_C@_0BH@FICCLEM@FN_LuaGetMaxLifeMana_2?$AA@ DB 'FN_LuaGetMaxLifeMana_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JLGAHLKB@FN_LuaGetMaxSD_2?$AA@
CONST	SEGMENT
??_C@_0BB@JLGAHLKB@FN_LuaGetMaxSD_2?$AA@ DB 'FN_LuaGetMaxSD_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HNJNEHMD@FN_LuaGetManAttack_2?$AA@
CONST	SEGMENT
??_C@_0BF@HNJNEHMD@FN_LuaGetManAttack_2?$AA@ DB 'FN_LuaGetManAttack_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GGDFLEKK@FN_LuaGetAttackRate_2?$AA@
CONST	SEGMENT
??_C@_0BG@GGDFLEKK@FN_LuaGetAttackRate_2?$AA@ DB 'FN_LuaGetAttackRate_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IOHMNLHN@FN_LuaGetBlockingRate_2?$AA@
CONST	SEGMENT
??_C@_0BI@IOHMNLHN@FN_LuaGetBlockingRate_2?$AA@ DB 'FN_LuaGetBlockingRate'
	DB	'_2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NOFHHNAA@FN_LuaGetIronDefense?$AA@
CONST	SEGMENT
??_C@_0BF@NOFHHNAA@FN_LuaGetIronDefense?$AA@ DB 'FN_LuaGetIronDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GDGAGAMG@FN_LuaGetPoisonArrow?$AA@
CONST	SEGMENT
??_C@_0BF@GDGAGAMG@FN_LuaGetPoisonArrow?$AA@ DB 'FN_LuaGetPoisonArrow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FKHJAMAB@FN_LuaGetEarthPrison?$AA@
CONST	SEGMENT
??_C@_0BF@FKHJAMAB@FN_LuaGetEarthPrison?$AA@ DB 'FN_LuaGetEarthPrison', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KOKJPKNK@FN_LuaGetBloodStorm?$AA@
CONST	SEGMENT
??_C@_0BE@KOKJPKNK@FN_LuaGetBloodStorm?$AA@ DB 'FN_LuaGetBloodStorm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@
CONST	SEGMENT
??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@ DB 'FN_LuaGetPercent5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@
CONST	SEGMENT
??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@ DB 'FN_LuaGetAttackSpeed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@
CONST	SEGMENT
??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@ DB 'FN_LuaGetSkillDamage'
	DB	'Min2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@
CONST	SEGMENT
??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@ DB 'FN_LuaGetManaIncRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@
CONST	SEGMENT
??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@ DB 'FN_LuaGetControlAttack'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@
CONST	SEGMENT
??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@ DB 'FN_LuaGetChangeBlocki'
	DB	'ng', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@
CONST	SEGMENT
??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@ DB 'FN_LuaGetDecreaseMana', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@
CONST	SEGMENT
??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@ DB 'FN_LuaGetIncreaseStat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@
CONST	SEGMENT
??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@ DB 'FN_LuaGetIncreaseBl'
	DB	'ocking', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@
CONST	SEGMENT
??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@ DB 'FN_LuaGetPercent4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@
CONST	SEGMENT
??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@ DB 'FN_LuaGetManAttackRate'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@
CONST	SEGMENT
??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@ DB 'FN_LuaGetAttackSuc'
	DB	'cessRate', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@
CONST	SEGMENT
??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@ DB 'FN_LuaGetBlockingRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@
CONST	SEGMENT
??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@ DB 'FN_LuaGetSDMonsterKill'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@
CONST	SEGMENT
??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@ DB 'FN_LuaGetAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@
CONST	SEGMENT
??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@ DB 'FN_LuaGetMaxLifeMana', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@
CONST	SEGMENT
??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@ DB 'FN_LuaGetMaxAG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@
CONST	SEGMENT
??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@ DB 'FN_LuaGetPercent3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@
CONST	SEGMENT
??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@ DB 'FN_LuaGetMonsterKill', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@
CONST	SEGMENT
??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@ DB 'FN_LuaGetSkillDamageM'
	DB	'ax', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@
CONST	SEGMENT
??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@ DB 'FN_LuaGetSkillDama'
	DB	'geMiddle', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@
CONST	SEGMENT
??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@ DB 'FN_LuaGetSkillDamageM'
	DB	'in', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@
CONST	SEGMENT
??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@ DB 'FN_LuaGetPercent2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@
CONST	SEGMENT
??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@ DB 'FN_LuaGetPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHPBPOFD@i?$DOd?$AA@
CONST	SEGMENT
??_C@_03LHPBPOFD@i?$DOd?$AA@ DB 'i>d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PAHHDMPF@Lua?2MasterSkill?4lua?$AA@
CONST	SEGMENT
??_C@_0BE@PAHHDMPF@Lua?2MasterSkill?4lua?$AA@ DB 'Lua\MasterSkill.lua', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@
CONST	SEGMENT
??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@ DB '[Master'
	DB	'LevelSkillTreeSystem] - Error - [%s] [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@LKIJBIMC@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0FF@LKIJBIMC@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\newmasterlevelskillt'
	DB	'reesystem.cpp', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Init@CMasterLevelSkillTreeSystem@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Init@CMasterLevelSkillTreeSystem@@QAEXXZ@4JA DD 033H ; `CMasterLevelSkillTreeSystem::Init'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_i$234297 = -24						; size = 4
_fValue$ = -20						; size = 8
_L$ = -12						; size = 4
_pLuaState$ = -8					; size = 4
_this$ = -4						; size = 4
?Init@CMasterLevelSkillTreeSystem@@QAEXXZ PROC		; CMasterLevelSkillTreeSystem::Init
; _this$ = ecx

; 51   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 58	 sub	 esp, 88			; 00000058H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 	memset(this->m_SkillTreeData, 0, sizeof(this->m_SkillTreeData));

  0007c	68 2c 3b 00 00	 push	 15148			; 00003b2cH
  00081	6a 00		 push	 0
  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	83 c0 04	 add	 eax, 4
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _memset
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 53   : 	memset(this->m_fValue, 0, sizeof(this->m_fValue));

  00092	68 94 1a 00 00	 push	 6804			; 00001a94H
  00097	6a 00		 push	 0
  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	05 30 3b 00 00	 add	 eax, 15152		; 00003b30H
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _memset
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 54   : 
; 55   : #ifdef _LUA_
; 56   : 
; 57   : 	lua_State* pLuaState = this->m_Lua.GetLua();

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	81 c1 c4 55 00
	00		 add	 ecx, 21956		; 000055c4H
  000b3	e8 00 00 00 00	 call	 ?GetLua@MULua@@QAEPAUlua_State@@XZ ; MULua::GetLua
  000b8	89 45 f8	 mov	 DWORD PTR _pLuaState$[ebp], eax

; 58   : 
; 59   : 	if( pLuaState == NULL )

  000bb	83 7d f8 00	 cmp	 DWORD PTR _pLuaState$[ebp], 0
  000bf	75 21		 jne	 SHORT $LN4@Init

; 60   : 	{
; 61   : 		LogAddTD("[MasterLevelSkillTreeSystem] - Error - [%s] [%d]",__FILE__,__LINE__);

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Init@CMasterLevelSkillTreeSystem@@QAEXXZ@4JA
  000c6	83 c0 0a	 add	 eax, 10			; 0000000aH
  000c9	50		 push	 eax
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@LKIJBIMC@d?3?2projects?2exteam6?43?2source?2gam@
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 62   : 		return;

  000dd	e9 54 09 00 00	 jmp	 $LN5@Init
$LN4@Init:

; 63   : 	}
; 64   : 
; 65   : 	this->m_Lua.DoFile(gDirPath.GetNewPath("Lua\\MasterSkill.lua"));

  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PAHHDMPF@Lua?2MasterSkill?4lua?$AA@
  000e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000ec	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000f1	50		 push	 eax
  000f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	81 c1 c4 55 00
	00		 add	 ecx, 21956		; 000055c4H
  000fb	e8 00 00 00 00	 call	 ?DoFile@MULua@@QAE_NPBD@Z ; MULua::DoFile

; 66   : 	lua_State* L = this->m_Lua.GetLua();

  00100	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	81 c1 c4 55 00
	00		 add	 ecx, 21956		; 000055c4H
  00109	e8 00 00 00 00	 call	 ?GetLua@MULua@@QAEPAUlua_State@@XZ ; MULua::GetLua
  0010e	89 45 f4	 mov	 DWORD PTR _L$[ebp], eax

; 67   : 
; 68   : 	double fValue;
; 69   : 
; 70   : 	for(int i = 1; i <= MAX_SKILLTREE_LEVEL; i++)

  00111	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _i$234297[ebp], 1
  00118	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  0011a	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  0011d	83 c0 01	 add	 eax, 1
  00120	89 45 e8	 mov	 DWORD PTR _i$234297[ebp], eax
$LN3@Init:
  00123	83 7d e8 14	 cmp	 DWORD PTR _i$234297[ebp], 20 ; 00000014H
  00127	0f 8f fb 08 00
	00		 jg	 $LN1@Init

; 71   : 	{
; 72   : 		g_Generic_Call(L, "FN_LuaGetPercent", "i>d", i, &fValue);

  0012d	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00130	50		 push	 eax
  00131	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00134	51		 push	 ecx
  00135	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@
  0013f	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00142	52		 push	 edx
  00143	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00148	83 c4 14	 add	 esp, 20			; 00000014H

; 73   : 		this->m_fValue[1][i] = this->RoundValue(fValue,2);

  0014b	6a 02		 push	 2
  0014d	83 ec 08	 sub	 esp, 8
  00150	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00153	dd 1c 24	 fstp	 QWORD PTR [esp]
  00156	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00159	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0015e	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00161	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00164	d9 9c 81 84 3b
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15236]

; 74   : 		
; 75   : 		g_Generic_Call(L,"FN_LuaGetPercent2","i>d",i,&fValue);

  0016b	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  0016e	50		 push	 eax
  0016f	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00172	51		 push	 ecx
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@
  0017d	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00180	52		 push	 edx
  00181	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00186	83 c4 14	 add	 esp, 20			; 00000014H

; 76   : 		this->m_fValue[2][i] = this->RoundValue(fValue,2);

  00189	6a 02		 push	 2
  0018b	83 ec 08	 sub	 esp, 8
  0018e	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00191	dd 1c 24	 fstp	 QWORD PTR [esp]
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0019c	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  0019f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a2	d9 9c 81 d8 3b
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15320]

; 77   : 
; 78   : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMin","i>d",i,&fValue);

  001a9	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  001ac	50		 push	 eax
  001ad	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  001b0	51		 push	 ecx
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@
  001bb	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  001c4	83 c4 14	 add	 esp, 20			; 00000014H

; 79   : 		this->m_fValue[3][i] = this->RoundValue(fValue,2);

  001c7	6a 02		 push	 2
  001c9	83 ec 08	 sub	 esp, 8
  001cc	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  001cf	dd 1c 24	 fstp	 QWORD PTR [esp]
  001d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d5	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  001da	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  001dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e0	d9 9c 81 2c 3c
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15404]

; 80   : 
; 81   : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMiddle","i>d",i,&fValue);

  001e7	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  001ea	50		 push	 eax
  001eb	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  001ee	51		 push	 ecx
  001ef	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  001f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@
  001f9	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  001fc	52		 push	 edx
  001fd	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00202	83 c4 14	 add	 esp, 20			; 00000014H

; 82   : 		this->m_fValue[4][i] = this->RoundValue(fValue,2);

  00205	6a 02		 push	 2
  00207	83 ec 08	 sub	 esp, 8
  0020a	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  0020d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00210	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00213	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00218	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  0021b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021e	d9 9c 81 80 3c
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15488]

; 83   : 
; 84   : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMax","i>d",i,&fValue);

  00225	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00228	50		 push	 eax
  00229	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  0022c	51		 push	 ecx
  0022d	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@
  00237	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  0023a	52		 push	 edx
  0023b	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00240	83 c4 14	 add	 esp, 20			; 00000014H

; 85   : 		this->m_fValue[5][i] = this->RoundValue(fValue,2);

  00243	6a 02		 push	 2
  00245	83 ec 08	 sub	 esp, 8
  00248	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  0024b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0024e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00251	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00256	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00259	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025c	d9 9c 81 d4 3c
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15572]

; 86   : 
; 87   : 		g_Generic_Call(L,"FN_LuaGetMonsterKill","i>d",i,&fValue);

  00263	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00266	50		 push	 eax
  00267	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  0026a	51		 push	 ecx
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@
  00275	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00278	52		 push	 edx
  00279	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  0027e	83 c4 14	 add	 esp, 20			; 00000014H

; 88   : 		this->m_fValue[6][i] = this->RoundValue(fValue,2);

  00281	6a 02		 push	 2
  00283	83 ec 08	 sub	 esp, 8
  00286	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00289	dd 1c 24	 fstp	 QWORD PTR [esp]
  0028c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0028f	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00294	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00297	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029a	d9 9c 81 28 3d
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15656]

; 89   : 
; 90   : 		g_Generic_Call(L,"FN_LuaGetPercent3","i>d",i,&fValue);

  002a1	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  002a4	50		 push	 eax
  002a5	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  002a8	51		 push	 ecx
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  002ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@
  002b3	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  002bc	83 c4 14	 add	 esp, 20			; 00000014H

; 91   : 		this->m_fValue[7][i] = this->RoundValue(fValue,2);

  002bf	6a 02		 push	 2
  002c1	83 ec 08	 sub	 esp, 8
  002c4	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  002c7	dd 1c 24	 fstp	 QWORD PTR [esp]
  002ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002cd	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  002d2	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  002d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d8	d9 9c 81 7c 3d
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15740]

; 92   : 
; 93   : 		g_Generic_Call(L,"FN_LuaGetMaxAG","i>d",i,&fValue);

  002df	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  002e2	50		 push	 eax
  002e3	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  002e6	51		 push	 ecx
  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  002ec	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@
  002f1	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  002f4	52		 push	 edx
  002f5	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  002fa	83 c4 14	 add	 esp, 20			; 00000014H

; 94   : 		this->m_fValue[8][i] = this->RoundValue(fValue,2);

  002fd	6a 02		 push	 2
  002ff	83 ec 08	 sub	 esp, 8
  00302	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00305	dd 1c 24	 fstp	 QWORD PTR [esp]
  00308	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0030b	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00310	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00313	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00316	d9 9c 81 d0 3d
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15824]

; 95   : 
; 96   : 		g_Generic_Call(L,"FN_LuaGetMaxLifeMana","i>d",i,&fValue);

  0031d	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00320	50		 push	 eax
  00321	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00324	51		 push	 ecx
  00325	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0032a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@
  0032f	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00332	52		 push	 edx
  00333	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00338	83 c4 14	 add	 esp, 20			; 00000014H

; 97   : 		this->m_fValue[9][i] = this->RoundValue(fValue,2);

  0033b	6a 02		 push	 2
  0033d	83 ec 08	 sub	 esp, 8
  00340	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00343	dd 1c 24	 fstp	 QWORD PTR [esp]
  00346	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00349	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0034e	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00351	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00354	d9 9c 81 24 3e
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15908]

; 98   : 
; 99   : 		g_Generic_Call(L,"FN_LuaGetAttack","i>d",i,&fValue);

  0035b	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  0035e	50		 push	 eax
  0035f	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00362	51		 push	 ecx
  00363	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00368	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@
  0036d	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00370	52		 push	 edx
  00371	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00376	83 c4 14	 add	 esp, 20			; 00000014H

; 100  : 		this->m_fValue[10][i] = this->RoundValue(fValue,2);

  00379	6a 02		 push	 2
  0037b	83 ec 08	 sub	 esp, 8
  0037e	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00381	dd 1c 24	 fstp	 QWORD PTR [esp]
  00384	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00387	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0038c	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  0038f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00392	d9 9c 81 78 3e
	00 00		 fstp	 DWORD PTR [ecx+eax*4+15992]

; 101  : 
; 102  : 		g_Generic_Call(L,"FN_LuaGetSDMonsterKill","i>d",i,&fValue);

  00399	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  0039c	50		 push	 eax
  0039d	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  003a0	51		 push	 ecx
  003a1	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  003a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@
  003ab	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  003ae	52		 push	 edx
  003af	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  003b4	83 c4 14	 add	 esp, 20			; 00000014H

; 103  : 		this->m_fValue[11][i] = this->RoundValue(fValue,2);

  003b7	6a 02		 push	 2
  003b9	83 ec 08	 sub	 esp, 8
  003bc	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  003bf	dd 1c 24	 fstp	 QWORD PTR [esp]
  003c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003c5	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  003ca	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  003cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003d0	d9 9c 81 cc 3e
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16076]

; 104  : 
; 105  : 		g_Generic_Call(L,"FN_LuaGetBlockingRate","i>d",i,&fValue);

  003d7	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  003da	50		 push	 eax
  003db	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  003de	51		 push	 ecx
  003df	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@
  003e9	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  003ec	52		 push	 edx
  003ed	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  003f2	83 c4 14	 add	 esp, 20			; 00000014H

; 106  : 		this->m_fValue[12][i] = this->RoundValue(fValue,2);

  003f5	6a 02		 push	 2
  003f7	83 ec 08	 sub	 esp, 8
  003fa	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  003fd	dd 1c 24	 fstp	 QWORD PTR [esp]
  00400	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00403	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00408	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  0040b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0040e	d9 9c 81 20 3f
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16160]

; 107  : 
; 108  : 		g_Generic_Call(L,"FN_LuaGetAttackSuccessRate","i>d",i,&fValue);

  00415	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00418	50		 push	 eax
  00419	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  0041c	51		 push	 ecx
  0041d	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00422	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@
  00427	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  0042a	52		 push	 edx
  0042b	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00430	83 c4 14	 add	 esp, 20			; 00000014H

; 109  : 		this->m_fValue[13][i] = this->RoundValue(fValue,2);

  00433	6a 02		 push	 2
  00435	83 ec 08	 sub	 esp, 8
  00438	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  0043b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0043e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00441	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00446	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00449	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0044c	d9 9c 81 74 3f
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16244]

; 110  : 
; 111  : 		g_Generic_Call(L,"FN_LuaGetManAttackRate","i>d",i,&fValue);

  00453	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00456	50		 push	 eax
  00457	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  0045a	51		 push	 ecx
  0045b	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00460	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@
  00465	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00468	52		 push	 edx
  00469	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  0046e	83 c4 14	 add	 esp, 20			; 00000014H

; 112  : 		this->m_fValue[14][i] = this->RoundValue(fValue,2);

  00471	6a 02		 push	 2
  00473	83 ec 08	 sub	 esp, 8
  00476	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00479	dd 1c 24	 fstp	 QWORD PTR [esp]
  0047c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0047f	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00484	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00487	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0048a	d9 9c 81 c8 3f
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16328]

; 113  : 
; 114  : 		g_Generic_Call(L,"FN_LuaGetPercent4","i>d",i,&fValue);

  00491	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00494	50		 push	 eax
  00495	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00498	51		 push	 ecx
  00499	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0049e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@
  004a3	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  004a6	52		 push	 edx
  004a7	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  004ac	83 c4 14	 add	 esp, 20			; 00000014H

; 115  : 		this->m_fValue[15][i] = this->RoundValue(fValue,2);

  004af	6a 02		 push	 2
  004b1	83 ec 08	 sub	 esp, 8
  004b4	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  004b7	dd 1c 24	 fstp	 QWORD PTR [esp]
  004ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004bd	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  004c2	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  004c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004c8	d9 9c 81 1c 40
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16412]

; 116  : 
; 117  : 		g_Generic_Call(L,"FN_LuaGetIncreaseBlocking","i>d",i,&fValue);

  004cf	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  004d2	50		 push	 eax
  004d3	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  004d6	51		 push	 ecx
  004d7	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  004dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@
  004e1	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  004e4	52		 push	 edx
  004e5	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  004ea	83 c4 14	 add	 esp, 20			; 00000014H

; 118  : 		this->m_fValue[16][i] = this->RoundValue(fValue,2);

  004ed	6a 02		 push	 2
  004ef	83 ec 08	 sub	 esp, 8
  004f2	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  004f5	dd 1c 24	 fstp	 QWORD PTR [esp]
  004f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004fb	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00500	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00503	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00506	d9 9c 81 70 40
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16496]

; 119  : 
; 120  : 		g_Generic_Call(L,"FN_LuaGetIncreaseStat","i>d",i,&fValue);

  0050d	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00510	50		 push	 eax
  00511	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00514	51		 push	 ecx
  00515	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0051a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@
  0051f	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00522	52		 push	 edx
  00523	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00528	83 c4 14	 add	 esp, 20			; 00000014H

; 121  : 		this->m_fValue[17][i] = this->RoundValue(fValue,2);

  0052b	6a 02		 push	 2
  0052d	83 ec 08	 sub	 esp, 8
  00530	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00533	dd 1c 24	 fstp	 QWORD PTR [esp]
  00536	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00539	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0053e	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00541	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00544	d9 9c 81 c4 40
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16580]

; 122  : 
; 123  : 		g_Generic_Call(L,"FN_LuaGetDecreaseMana","i>d",i,&fValue);

  0054b	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  0054e	50		 push	 eax
  0054f	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00552	51		 push	 ecx
  00553	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00558	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@
  0055d	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00560	52		 push	 edx
  00561	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00566	83 c4 14	 add	 esp, 20			; 00000014H

; 124  : 		this->m_fValue[18][i] = this->RoundValue(fValue,2);

  00569	6a 02		 push	 2
  0056b	83 ec 08	 sub	 esp, 8
  0056e	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00571	dd 1c 24	 fstp	 QWORD PTR [esp]
  00574	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00577	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0057c	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  0057f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00582	d9 9c 81 18 41
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16664]

; 125  : 
; 126  : 		g_Generic_Call(L,"FN_LuaGetChangeBlocking","i>d",i,&fValue);

  00589	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  0058c	50		 push	 eax
  0058d	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00590	51		 push	 ecx
  00591	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00596	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@
  0059b	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  0059e	52		 push	 edx
  0059f	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  005a4	83 c4 14	 add	 esp, 20			; 00000014H

; 127  : 		this->m_fValue[19][i] = this->RoundValue(fValue,2);

  005a7	6a 02		 push	 2
  005a9	83 ec 08	 sub	 esp, 8
  005ac	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  005af	dd 1c 24	 fstp	 QWORD PTR [esp]
  005b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005b5	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  005ba	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  005bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c0	d9 9c 81 6c 41
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16748]

; 128  : 
; 129  : 		g_Generic_Call(L,"FN_LuaGetControlAttack","i>d",i,&fValue);

  005c7	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  005ca	50		 push	 eax
  005cb	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  005ce	51		 push	 ecx
  005cf	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  005d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@
  005d9	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  005dc	52		 push	 edx
  005dd	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  005e2	83 c4 14	 add	 esp, 20			; 00000014H

; 130  : 		this->m_fValue[20][i] = this->RoundValue(fValue,2);

  005e5	6a 02		 push	 2
  005e7	83 ec 08	 sub	 esp, 8
  005ea	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  005ed	dd 1c 24	 fstp	 QWORD PTR [esp]
  005f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005f3	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  005f8	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  005fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005fe	d9 9c 81 c0 41
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16832]

; 131  : 
; 132  : 		g_Generic_Call(L,"FN_LuaGetManaIncRate","i>d",i,&fValue);

  00605	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00608	50		 push	 eax
  00609	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  0060c	51		 push	 ecx
  0060d	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00612	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@
  00617	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  0061a	52		 push	 edx
  0061b	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00620	83 c4 14	 add	 esp, 20			; 00000014H

; 133  : 		this->m_fValue[21][i] = this->RoundValue(fValue,2);

  00623	6a 02		 push	 2
  00625	83 ec 08	 sub	 esp, 8
  00628	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  0062b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0062e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00631	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00636	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00639	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0063c	d9 9c 81 14 42
	00 00		 fstp	 DWORD PTR [ecx+eax*4+16916]

; 134  : 
; 135  : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMin2","i>d",i,&fValue);

  00643	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00646	50		 push	 eax
  00647	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  0064a	51		 push	 ecx
  0064b	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00650	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@
  00655	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00658	52		 push	 edx
  00659	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  0065e	83 c4 14	 add	 esp, 20			; 00000014H

; 136  : 		this->m_fValue[22][i] = this->RoundValue(fValue,2);

  00661	6a 02		 push	 2
  00663	83 ec 08	 sub	 esp, 8
  00666	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00669	dd 1c 24	 fstp	 QWORD PTR [esp]
  0066c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0066f	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00674	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00677	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0067a	d9 9c 81 68 42
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17000]

; 137  : 
; 138  : 		g_Generic_Call(L,"FN_LuaGetAttackSpeed","i>d",i,&fValue);

  00681	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00684	50		 push	 eax
  00685	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00688	51		 push	 ecx
  00689	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0068e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@
  00693	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00696	52		 push	 edx
  00697	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  0069c	83 c4 14	 add	 esp, 20			; 00000014H

; 139  : 		this->m_fValue[23][i] = this->RoundValue(fValue,2);

  0069f	6a 02		 push	 2
  006a1	83 ec 08	 sub	 esp, 8
  006a4	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  006a7	dd 1c 24	 fstp	 QWORD PTR [esp]
  006aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ad	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  006b2	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  006b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006b8	d9 9c 81 bc 42
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17084]

; 140  : 
; 141  : 		g_Generic_Call(L,"FN_LuaGetPercent5","i>d",i,&fValue);

  006bf	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  006c2	50		 push	 eax
  006c3	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  006c6	51		 push	 ecx
  006c7	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  006cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@
  006d1	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  006d4	52		 push	 edx
  006d5	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  006da	83 c4 14	 add	 esp, 20			; 00000014H

; 142  : 		this->m_fValue[24][i] = this->RoundValue(fValue,2);

  006dd	6a 02		 push	 2
  006df	83 ec 08	 sub	 esp, 8
  006e2	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  006e5	dd 1c 24	 fstp	 QWORD PTR [esp]
  006e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006eb	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  006f0	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  006f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006f6	d9 9c 81 10 43
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17168]

; 143  : 
; 144  : 		g_Generic_Call(L,"FN_LuaGetBloodStorm","i>d",i,&fValue);

  006fd	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00700	50		 push	 eax
  00701	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00704	51		 push	 ecx
  00705	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0070a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KOKJPKNK@FN_LuaGetBloodStorm?$AA@
  0070f	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00712	52		 push	 edx
  00713	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00718	83 c4 14	 add	 esp, 20			; 00000014H

; 145  : 		this->m_fValue[25][i] = this->RoundValue(fValue,2);

  0071b	6a 02		 push	 2
  0071d	83 ec 08	 sub	 esp, 8
  00720	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00723	dd 1c 24	 fstp	 QWORD PTR [esp]
  00726	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00729	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0072e	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00731	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00734	d9 9c 81 64 43
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17252]

; 146  : 
; 147  : 		g_Generic_Call(L,"FN_LuaGetEarthPrison","i>d",i,&fValue);

  0073b	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  0073e	50		 push	 eax
  0073f	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00742	51		 push	 ecx
  00743	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00748	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FKHJAMAB@FN_LuaGetEarthPrison?$AA@
  0074d	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00750	52		 push	 edx
  00751	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00756	83 c4 14	 add	 esp, 20			; 00000014H

; 148  : 		this->m_fValue[26][i] = this->RoundValue(fValue,2);

  00759	6a 02		 push	 2
  0075b	83 ec 08	 sub	 esp, 8
  0075e	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00761	dd 1c 24	 fstp	 QWORD PTR [esp]
  00764	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00767	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0076c	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  0076f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00772	d9 9c 81 b8 43
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17336]

; 149  : 
; 150  : 		g_Generic_Call(L,"FN_LuaGetPoisonArrow","i>d",i,&fValue);

  00779	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  0077c	50		 push	 eax
  0077d	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00780	51		 push	 ecx
  00781	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00786	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GDGAGAMG@FN_LuaGetPoisonArrow?$AA@
  0078b	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  0078e	52		 push	 edx
  0078f	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00794	83 c4 14	 add	 esp, 20			; 00000014H

; 151  : 		this->m_fValue[27][i] = this->RoundValue(fValue,2);

  00797	6a 02		 push	 2
  00799	83 ec 08	 sub	 esp, 8
  0079c	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  0079f	dd 1c 24	 fstp	 QWORD PTR [esp]
  007a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a5	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  007aa	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  007ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007b0	d9 9c 81 0c 44
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17420]

; 152  : 
; 153  : 		g_Generic_Call(L,"FN_LuaGetIronDefense","i>d",i,&fValue);

  007b7	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  007ba	50		 push	 eax
  007bb	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  007be	51		 push	 ecx
  007bf	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  007c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NOFHHNAA@FN_LuaGetIronDefense?$AA@
  007c9	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  007cc	52		 push	 edx
  007cd	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  007d2	83 c4 14	 add	 esp, 20			; 00000014H

; 154  : 		this->m_fValue[28][i] = this->RoundValue(fValue,2);

  007d5	6a 02		 push	 2
  007d7	83 ec 08	 sub	 esp, 8
  007da	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  007dd	dd 1c 24	 fstp	 QWORD PTR [esp]
  007e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007e3	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  007e8	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  007eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007ee	d9 9c 81 60 44
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17504]

; 155  : 
; 156  : 		g_Generic_Call(L,"FN_LuaGetBlockingRate_2","i>d",i,&fValue);

  007f5	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  007f8	50		 push	 eax
  007f9	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  007fc	51		 push	 ecx
  007fd	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00802	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IOHMNLHN@FN_LuaGetBlockingRate_2?$AA@
  00807	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  0080a	52		 push	 edx
  0080b	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00810	83 c4 14	 add	 esp, 20			; 00000014H

; 157  : 		this->m_fValue[29][i] = this->RoundValue(fValue,2);

  00813	6a 02		 push	 2
  00815	83 ec 08	 sub	 esp, 8
  00818	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  0081b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0081e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00821	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00826	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00829	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0082c	d9 9c 81 b4 44
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17588]

; 158  : 
; 159  : 		g_Generic_Call(L,"FN_LuaGetAttackRate_2","i>d",i,&fValue);

  00833	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00836	50		 push	 eax
  00837	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  0083a	51		 push	 ecx
  0083b	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00840	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GGDFLEKK@FN_LuaGetAttackRate_2?$AA@
  00845	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00848	52		 push	 edx
  00849	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  0084e	83 c4 14	 add	 esp, 20			; 00000014H

; 160  : 		this->m_fValue[30][i] = this->RoundValue(fValue,2);

  00851	6a 02		 push	 2
  00853	83 ec 08	 sub	 esp, 8
  00856	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00859	dd 1c 24	 fstp	 QWORD PTR [esp]
  0085c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0085f	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00864	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00867	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0086a	d9 9c 81 08 45
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17672]

; 161  : 
; 162  : 		g_Generic_Call(L,"FN_LuaGetManAttack_2","i>d",i,&fValue);

  00871	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  00874	50		 push	 eax
  00875	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00878	51		 push	 ecx
  00879	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0087e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HNJNEHMD@FN_LuaGetManAttack_2?$AA@
  00883	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00886	52		 push	 edx
  00887	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  0088c	83 c4 14	 add	 esp, 20			; 00000014H

; 163  : 		this->m_fValue[31][i] = this->RoundValue(fValue,2);

  0088f	6a 02		 push	 2
  00891	83 ec 08	 sub	 esp, 8
  00894	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00897	dd 1c 24	 fstp	 QWORD PTR [esp]
  0089a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0089d	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  008a2	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  008a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008a8	d9 9c 81 5c 45
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17756]

; 164  : 
; 165  : 		g_Generic_Call(L,"FN_LuaGetMaxSD_2","i>d",i,&fValue);

  008af	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  008b2	50		 push	 eax
  008b3	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  008b6	51		 push	 ecx
  008b7	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  008bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JLGAHLKB@FN_LuaGetMaxSD_2?$AA@
  008c1	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  008c4	52		 push	 edx
  008c5	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  008ca	83 c4 14	 add	 esp, 20			; 00000014H

; 166  : 		this->m_fValue[33][i] = this->RoundValue(fValue,2);

  008cd	6a 02		 push	 2
  008cf	83 ec 08	 sub	 esp, 8
  008d2	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  008d5	dd 1c 24	 fstp	 QWORD PTR [esp]
  008d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008db	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  008e0	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  008e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008e6	d9 9c 81 04 46
	00 00		 fstp	 DWORD PTR [ecx+eax*4+17924]

; 167  : 
; 168  : 		g_Generic_Call(L,"FN_LuaGetMaxLifeMana_2","i>d",i,&fValue);

  008ed	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  008f0	50		 push	 eax
  008f1	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  008f4	51		 push	 ecx
  008f5	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  008fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FICCLEM@FN_LuaGetMaxLifeMana_2?$AA@
  008ff	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00902	52		 push	 edx
  00903	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00908	83 c4 14	 add	 esp, 20			; 00000014H

; 169  : 		this->m_fValue[34][i] = this->RoundValue(fValue,2);

  0090b	6a 02		 push	 2
  0090d	83 ec 08	 sub	 esp, 8
  00910	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00913	dd 1c 24	 fstp	 QWORD PTR [esp]
  00916	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00919	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0091e	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00921	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00924	d9 9c 81 58 46
	00 00		 fstp	 DWORD PTR [ecx+eax*4+18008]

; 170  : 
; 171  : 		g_Generic_Call(L,"FN_LuaGetIncBlocking_2","i>d",i,&fValue);

  0092b	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  0092e	50		 push	 eax
  0092f	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00932	51		 push	 ecx
  00933	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00938	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PNBCLGBJ@FN_LuaGetIncBlocking_2?$AA@
  0093d	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  00940	52		 push	 edx
  00941	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00946	83 c4 14	 add	 esp, 20			; 00000014H

; 172  : 		this->m_fValue[35][i] = this->RoundValue(fValue,2);

  00949	6a 02		 push	 2
  0094b	83 ec 08	 sub	 esp, 8
  0094e	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00951	dd 1c 24	 fstp	 QWORD PTR [esp]
  00954	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00957	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0095c	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  0095f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00962	d9 9c 81 ac 46
	00 00		 fstp	 DWORD PTR [ecx+eax*4+18092]

; 173  : 
; 174  : 		g_Generic_Call(L,"FN_LuaGetIncStat_2","i>d",i,&fValue);

  00969	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  0096c	50		 push	 eax
  0096d	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  00970	51		 push	 ecx
  00971	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00976	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KJMMMHPN@FN_LuaGetIncStat_2?$AA@
  0097b	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  0097e	52		 push	 edx
  0097f	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00984	83 c4 14	 add	 esp, 20			; 00000014H

; 175  : 		this->m_fValue[36][i] = this->RoundValue(fValue,2);

  00987	6a 02		 push	 2
  00989	83 ec 08	 sub	 esp, 8
  0098c	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  0098f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00992	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00995	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0099a	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  0099d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009a0	d9 9c 81 00 47
	00 00		 fstp	 DWORD PTR [ecx+eax*4+18176]

; 176  : 
; 177  : 		g_Generic_Call(L,"FN_LuaGetMaxAG_2","i>d",i,&fValue);

  009a7	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  009aa	50		 push	 eax
  009ab	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  009ae	51		 push	 ecx
  009af	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  009b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JDPFBAKN@FN_LuaGetMaxAG_2?$AA@
  009b9	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  009bc	52		 push	 edx
  009bd	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  009c2	83 c4 14	 add	 esp, 20			; 00000014H

; 178  : 		this->m_fValue[37][i] = this->RoundValue(fValue,2);

  009c5	6a 02		 push	 2
  009c7	83 ec 08	 sub	 esp, 8
  009ca	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  009cd	dd 1c 24	 fstp	 QWORD PTR [esp]
  009d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009d3	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  009d8	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  009db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009de	d9 9c 81 54 47
	00 00		 fstp	 DWORD PTR [ecx+eax*4+18260]

; 179  : 
; 180  : 		g_Generic_Call(L,"FN_LuaGetRate_6","i>d",i,&fValue);

  009e5	8d 45 ec	 lea	 eax, DWORD PTR _fValue$[ebp]
  009e8	50		 push	 eax
  009e9	8b 4d e8	 mov	 ecx, DWORD PTR _i$234297[ebp]
  009ec	51		 push	 ecx
  009ed	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  009f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OJAEHKGE@FN_LuaGetRate_6?$AA@
  009f7	8b 55 f4	 mov	 edx, DWORD PTR _L$[ebp]
  009fa	52		 push	 edx
  009fb	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00a00	83 c4 14	 add	 esp, 20			; 00000014H

; 181  : 		this->m_fValue[38][i] = this->RoundValue(fValue,2);

  00a03	6a 02		 push	 2
  00a05	83 ec 08	 sub	 esp, 8
  00a08	dd 45 ec	 fld	 QWORD PTR _fValue$[ebp]
  00a0b	dd 1c 24	 fstp	 QWORD PTR [esp]
  00a0e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a11	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00a16	8b 45 e8	 mov	 eax, DWORD PTR _i$234297[ebp]
  00a19	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a1c	d9 9c 81 a8 47
	00 00		 fstp	 DWORD PTR [ecx+eax*4+18344]

; 182  : 	}

  00a23	e9 f2 f6 ff ff	 jmp	 $LN2@Init
$LN1@Init:

; 183  : 
; 184  : 	this->m_Lua.Release();

  00a28	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a2b	81 c1 c4 55 00
	00		 add	 ecx, 21956		; 000055c4H
  00a31	e8 00 00 00 00	 call	 ?Release@MULua@@QAEXXZ	; MULua::Release
$LN5@Init:

; 185  : 
; 186  : #else 
; 187  : 
; 188  : 	//	lua_State* pLuaState = this->m_Lua.GetLua();
; 189  : 
; 190  : 	//if( pLuaState == NULL )
; 191  : 	//{
; 192  : 	//	LogAddTD("[MasterLevelSkillTreeSystem] - Error - [%s] [%d]",__FILE__,__LINE__);
; 193  : 	//	return;
; 194  : 	//}
; 195  : 
; 196  : //	this->m_Lua.DoFile(gDirPath.GetNewPath("Lua\\MasterSkill.lua"));
; 197  : //	lua_State* L = this->m_Lua.GetLua();
; 198  : 
; 199  : 	double fValue;
; 200  : 
; 201  : 	for(int i = 1; i <= MAX_SKILLTREE_LEVEL; i++)
; 202  : 	{
; 203  : 		//g_Generic_Call(L, "FN_LuaGetPercent", "i>d", i, &fValue);
; 204  : 		fValue = 1 + ((((((((i) - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12);
; 205  : 		this->m_fValue[1][i] = this->RoundValue(fValue,2);
; 206  : 		
; 207  : 		//g_Generic_Call(L,"FN_LuaGetPercent2","i>d",i,&fValue);
; 208  : 		fValue = 0.8 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)));
; 209  : 		this->m_fValue[2][i] = this->RoundValue(fValue,2);
; 210  : 
; 211  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMin","i>d",i,&fValue);
; 212  : 		fValue = (0.85 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 6;
; 213  : 		this->m_fValue[3][i] = this->RoundValue(fValue,2);
; 214  : 
; 215  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMiddle","i>d",i,&fValue);
; 216  : 		fValue = (0.9 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 8;
; 217  : 		this->m_fValue[4][i] = this->RoundValue(fValue,2);
; 218  : 
; 219  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMax","i>d",i,&fValue);
; 220  : 		fValue = (0.95 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 10;
; 221  : 		this->m_fValue[5][i] = this->RoundValue(fValue,2);
; 222  : 
; 223  : 		//g_Generic_Call(L,"FN_LuaGetMonsterKill","i>d",i,&fValue);
; 224  : 		fValue =  52 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6))));
; 225  : 		this->m_fValue[6][i] = this->RoundValue(fValue,2);
; 226  : 
; 227  : 		//g_Generic_Call(L,"FN_LuaGetPercent3","i>d",i,&fValue);
; 228  : 		fValue =  (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 1.5;
; 229  : 		this->m_fValue[7][i] = this->RoundValue(fValue,2);
; 230  : 
; 231  : 		//g_Generic_Call(L,"FN_LuaGetMaxAG","i>d",i,&fValue);
; 232  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 23;
; 233  : 		this->m_fValue[8][i] = this->RoundValue(fValue,2);
; 234  : 
; 235  : 		//g_Generic_Call(L,"FN_LuaGetMaxLifeMana","i>d",i,&fValue);
; 236  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85;
; 237  : 		this->m_fValue[9][i] = this->RoundValue(fValue,2);
; 238  : 
; 239  : 		//g_Generic_Call(L,"FN_LuaGetAttack","i>d",i,&fValue);
; 240  : 		fValue = (0.8 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 8;
; 241  : 		this->m_fValue[10][i] = this->RoundValue(fValue,2);
; 242  : 
; 243  : 		//g_Generic_Call(L,"FN_LuaGetSDMonsterKill","i>d",i,&fValue);
; 244  : 		fValue = 11 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12));
; 245  : 		this->m_fValue[11][i] = this->RoundValue(fValue,2);
; 246  : 
; 247  : 		//g_Generic_Call(L,"FN_LuaGetBlockingRate","i>d",i,&fValue);
; 248  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 6;
; 249  : 		this->m_fValue[12][i] = this->RoundValue(fValue,2);
; 250  : 
; 251  : 		//g_Generic_Call(L,"FN_LuaGetAttackSuccessRate","i>d",i,&fValue);
; 252  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 5;
; 253  : 		this->m_fValue[13][i] = this->RoundValue(fValue,2);
; 254  : 
; 255  : 		//g_Generic_Call(L,"FN_LuaGetManAttackRate","i>d",i,&fValue);
; 256  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 8;
; 257  : 		this->m_fValue[14][i] = this->RoundValue(fValue,2);
; 258  : 
; 259  : 		//g_Generic_Call(L,"FN_LuaGetPercent4","i>d",i,&fValue);
; 260  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 15;
; 261  : 		this->m_fValue[15][i] = this->RoundValue(fValue,2);
; 262  : 
; 263  : 		//g_Generic_Call(L,"FN_LuaGetIncreaseBlocking","i>d",i,&fValue);
; 264  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 50;
; 265  : 		this->m_fValue[16][i] = this->RoundValue(fValue,2);
; 266  : 
; 267  : 		//g_Generic_Call(L,"FN_LuaGetIncreaseStat","i>d",i,&fValue);
; 268  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 10;
; 269  : 		this->m_fValue[17][i] = this->RoundValue(fValue,2);
; 270  : 
; 271  : 		//g_Generic_Call(L,"FN_LuaGetDecreaseMana","i>d",i,&fValue);
; 272  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 6;
; 273  : 		this->m_fValue[18][i] = this->RoundValue(fValue,2);
; 274  : 
; 275  : 		//g_Generic_Call(L,"FN_LuaGetChangeBlocking","i>d",i,&fValue);
; 276  : 		fValue = 50 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) + 20;
; 277  : 		this->m_fValue[19][i] = this->RoundValue(fValue,2);
; 278  : 
; 279  : 		//g_Generic_Call(L,"FN_LuaGetControlAttack","i>d",i,&fValue);
; 280  : 		fValue = 40 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) + 5;
; 281  : 		this->m_fValue[20][i] = this->RoundValue(fValue,2);
; 282  : 
; 283  : 		//g_Generic_Call(L,"FN_LuaGetManaIncRate","i>d",i,&fValue);
; 284  : 		fValue = (2 + (((((((i - 30 ) ^ 3) + 25000) / 499 ) / 6)))) * 1.5;
; 285  : 		this->m_fValue[21][i] = this->RoundValue(fValue,2);
; 286  : 
; 287  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMin2","i>d",i,&fValue);
; 288  : 		fValue = (0.8 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 5;
; 289  : 		this->m_fValue[22][i] = this->RoundValue(fValue,2);
; 290  : 
; 291  : 		//g_Generic_Call(L,"FN_LuaGetAttackSpeed","i>d",i,&fValue);
; 292  : 		fValue = i * 1.0;
; 293  : 		this->m_fValue[23][i] = this->RoundValue(fValue,2);
; 294  : 
; 295  : 		//g_Generic_Call(L,"FN_LuaGetPercent5","i>d",i,&fValue);
; 296  : 		fValue = (0.95 + ( ( ( ( (((i - 30) ^ 3) + 25000) / 499) / 6)))) * 7.8;
; 297  : 		this->m_fValue[24][i] = this->RoundValue(fValue,2);
; 298  : 
; 299  : 		//g_Generic_Call(L,"FN_LuaGetBloodStorm","i>d",i,&fValue);
; 300  : 		fValue = 170;
; 301  : 		this->m_fValue[25][i] = this->RoundValue(fValue,2);
; 302  : 
; 303  : 		//g_Generic_Call(L,"FN_LuaGetEarthPrison","i>d",i,&fValue);
; 304  : 		fValue = 150;
; 305  : 		this->m_fValue[26][i] = this->RoundValue(fValue,2);
; 306  : 
; 307  : 		//g_Generic_Call(L,"FN_LuaGetPoisonArrow","i>d",i,&fValue);
; 308  : 		fValue = 130;
; 309  : 		this->m_fValue[27][i] = this->RoundValue(fValue,2);
; 310  : 
; 311  : 		//g_Generic_Call(L,"FN_LuaGetIronDefense","i>d",i,&fValue);
; 312  : 		fValue = 800;
; 313  : 		this->m_fValue[28][i] = this->RoundValue(fValue,2);
; 314  : 
; 315  : 		//g_Generic_Call(L,"FN_LuaGetBlockingRate_2","i>d",i,&fValue);
; 316  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 2.5;
; 317  : 		this->m_fValue[29][i] = this->RoundValue(fValue,2);
; 318  : 
; 319  : 		//g_Generic_Call(L,"FN_LuaGetAttackRate_2","i>d",i,&fValue);
; 320  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12) ) * 85 * 2;
; 321  : 		this->m_fValue[30][i] = this->RoundValue(fValue,2);
; 322  : 
; 323  : 		//g_Generic_Call(L,"FN_LuaGetManAttack_2","i>d",i,&fValue);
; 324  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 3.2;
; 325  : 		this->m_fValue[31][i] = this->RoundValue(fValue,2);
; 326  : 
; 327  : 		//g_Generic_Call(L,"FN_LuaGetMaxSD_2","i>d",i,&fValue);
; 328  : 		fValue = (1 + ( ( ( ( ( ((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 3;
; 329  : 		this->m_fValue[33][i] = this->RoundValue(fValue,2);
; 330  : 
; 331  : 		//g_Generic_Call(L,"FN_LuaGetMaxLifeMana_2","i>d",i,&fValue);
; 332  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 45;
; 333  : 		this->m_fValue[34][i] = this->RoundValue(fValue,2);
; 334  : 
; 335  : 		//g_Generic_Call(L,"FN_LuaGetIncBlocking_2","i>d",i,&fValue);
; 336  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 6) ) ) ) * 28;
; 337  : 		this->m_fValue[35][i] = this->RoundValue(fValue,2);
; 338  : 
; 339  : 		//g_Generic_Call(L,"FN_LuaGetIncStat_2","i>d",i,&fValue);
; 340  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 6) ) ) ) * 8;
; 341  : 		this->m_fValue[36][i] = this->RoundValue(fValue,2);
; 342  : 
; 343  : 		//g_Generic_Call(L,"FN_LuaGetMaxAG_2","i>d",i,&fValue);
; 344  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12) ) * 15;
; 345  : 		this->m_fValue[37][i] = this->RoundValue(fValue,2);
; 346  : 
; 347  : 		//g_Generic_Call(L,"FN_LuaGetRate_6","i>d",i,&fValue);
; 348  : 		fValue = (float) 0.94 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 20) ) );
; 349  : 		this->m_fValue[38][i] = this->RoundValue(fValue,2);
; 350  : 	}
; 351  : 
; 352  : 	//	this->m_Lua.Release();
; 353  : 
; 354  : #endif
; 355  : 
; 356  : 
; 357  : }

  00a36	5f		 pop	 edi
  00a37	5e		 pop	 esi
  00a38	5b		 pop	 ebx
  00a39	8b e5		 mov	 esp, ebp
  00a3b	5d		 pop	 ebp
  00a3c	c3		 ret	 0
?Init@CMasterLevelSkillTreeSystem@@QAEXXZ ENDP		; CMasterLevelSkillTreeSystem::Init
_TEXT	ENDS
PUBLIC	??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@ ; `string'
PUBLIC	??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z	; CMasterLevelSkillTreeSystem::Load
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_strcmp:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenNumber DD	01H DUP (?)
_TokenString DB	064H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_R0H@8
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT ??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@
CONST	SEGMENT
??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@ DB '[Master'
	DB	'LevelSkillTreeSystem] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@
CONST	SEGMENT
??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@ DB '[Mas'
	DB	'terLevelSkillTreeSystem] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@
CONST	SEGMENT
??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@ DB '[Master'
	DB	'LevelSkillTreeSystem] - Can''t Open %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@
CONST	SEGMENT
??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@ DB '[Master'
	DB	'LevelSkillTreeSystem] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
xdata$x	SEGMENT
__catchsym$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$2 DD 00H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	FLAT:__catch$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$0
__unwindtable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$2
__ehfuncinfo$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv291 = -152						; size = 4
tv289 = -148						; size = 4
tv251 = -144						; size = 4
tv250 = -144						; size = 4
tv249 = -144						; size = 4
tv248 = -144						; size = 4
tv247 = -144						; size = 4
tv246 = -144						; size = 4
tv245 = -144						; size = 4
tv244 = -144						; size = 4
tv243 = -144						; size = 4
tv242 = -144						; size = 4
tv286 = -142						; size = 2
_dwError$234382 = -76					; size = 4
_i$234374 = -72						; size = 4
_iSkillID$234373 = -68					; size = 4
_iParentSkill2$234372 = -64				; size = 4
_iParentSkill1$234371 = -60				; size = 4
_iMaxPoint$234370 = -56					; size = 4
_iPoint$234369 = -52					; size = 4
_iTreeKind$234368 = -48					; size = 4
_iClassType$234366 = -44				; size = 4
_iPos$234365 = -40					; size = 4
_iRank$234364 = -36					; size = 4
_iTempIndex$234363 = -32				; size = 4
_iIndex$234352 = -28					; size = 4
_Token$234351 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z PROC	; CMasterLevelSkillTreeSystem::Load
; _this$ = ecx

; 361  : {

  00a40	55		 push	 ebp
  00a41	8b ec		 mov	 ebp, esp
  00a43	6a ff		 push	 -1
  00a45	68 00 00 00 00	 push	 __ehhandler$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
  00a4a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00a50	50		 push	 eax
  00a51	51		 push	 ecx
  00a52	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00a58	53		 push	 ebx
  00a59	56		 push	 esi
  00a5a	57		 push	 edi
  00a5b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00a60	33 c5		 xor	 eax, ebp
  00a62	50		 push	 eax
  00a63	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00a66	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00a6c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00a6f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 362  : 	if( this->IsLoaded )

  00a72	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00a75	0f b6 88 c8 55
	00 00		 movzx	 ecx, BYTE PTR [eax+21960]
  00a7c	85 c9		 test	 ecx, ecx
  00a7e	74 05		 je	 SHORT $LN15@Load

; 363  : 	{
; 364  : 		return;

  00a80	e9 4b 04 00 00	 jmp	 $LN16@Load
$LN15@Load:

; 365  : 	}
; 366  : 
; 367  : 	if( lpszFileName == NULL || !strcmp(lpszFileName,"") )

  00a85	83 7d 08 00	 cmp	 DWORD PTR _lpszFileName$[ebp], 0
  00a89	74 15		 je	 SHORT $LN13@Load
  00a8b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00a90	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00a93	50		 push	 eax
  00a94	e8 00 00 00 00	 call	 _strcmp
  00a99	83 c4 08	 add	 esp, 8
  00a9c	85 c0		 test	 eax, eax
  00a9e	75 12		 jne	 SHORT $LN14@Load
$LN13@Load:

; 368  : 	{
; 369  : 		MsgBox("[MasterLevelSkillTreeSystem] - File load error : File Name Error");

  00aa0	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@
  00aa5	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00aaa	83 c4 04	 add	 esp, 4

; 370  : 		return;

  00aad	e9 1e 04 00 00	 jmp	 $LN16@Load
$LN14@Load:

; 371  : 	}
; 372  : 
; 373  : 	try
; 374  : 	{

  00ab2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 375  : 		SMDFile = fopen(lpszFileName,"r");	//ok

  00ab9	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00abe	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00ac1	50		 push	 eax
  00ac2	e8 00 00 00 00	 call	 _fopen
  00ac7	83 c4 08	 add	 esp, 8
  00aca	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 376  : 
; 377  : 		if( SMDFile == NULL )

  00acf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00ad6	75 16		 jne	 SHORT $LN11@Load

; 378  : 		{
; 379  : 			MsgBox("[MasterLevelSkillTreeSystem] - Can't Open %s ",lpszFileName);

  00ad8	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00adb	50		 push	 eax
  00adc	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@
  00ae1	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00ae6	83 c4 08	 add	 esp, 8

; 380  : 			return;

  00ae9	e9 e2 03 00 00	 jmp	 $LN16@Load
$LN11@Load:

; 381  : 		}
; 382  : 
; 383  : 		this->Init();

  00aee	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00af1	e8 00 00 00 00	 call	 ?Init@CMasterLevelSkillTreeSystem@@QAEXXZ ; CMasterLevelSkillTreeSystem::Init

; 384  : 		SMDToken Token;
; 385  : 		int iIndex = -1;

  00af6	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _iIndex$234352[ebp], -1
$LN10@Load:

; 386  : 
; 387  : 		while( TRUE )

  00afd	b8 01 00 00 00	 mov	 eax, 1
  00b02	85 c0		 test	 eax, eax
  00b04	0f 84 6c 03 00
	00		 je	 $LN9@Load

; 388  : 		{
; 389  : 			if( !strcmp("end",TokenString) )

  00b0a	68 00 00 00 00	 push	 OFFSET _TokenString
  00b0f	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00b14	e8 00 00 00 00	 call	 _strcmp
  00b19	83 c4 08	 add	 esp, 8
  00b1c	85 c0		 test	 eax, eax
  00b1e	75 05		 jne	 SHORT $LN8@Load

; 390  : 				break;

  00b20	e9 51 03 00 00	 jmp	 $LN9@Load
$LN8@Load:

; 391  : 
; 392  : 			while( TRUE )

  00b25	b8 01 00 00 00	 mov	 eax, 1
  00b2a	85 c0		 test	 eax, eax
  00b2c	0f 84 3f 03 00
	00		 je	 $LN6@Load

; 393  : 			{
; 394  : 				Token = GetToken();

  00b32	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00b37	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv242[ebp], eax
  00b3d	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv242[ebp]
  00b43	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 395  : 
; 396  : 				if( !strcmp("end",TokenString) )

  00b46	68 00 00 00 00	 push	 OFFSET _TokenString
  00b4b	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00b50	e8 00 00 00 00	 call	 _strcmp
  00b55	83 c4 08	 add	 esp, 8
  00b58	85 c0		 test	 eax, eax
  00b5a	75 05		 jne	 SHORT $LN5@Load

; 397  : 					break;

  00b5c	e9 10 03 00 00	 jmp	 $LN6@Load
$LN5@Load:

; 398  : 
; 399  : 				//Token = GetToken();	//SkillID
; 400  : 
; 401  : 				iIndex = (int)TokenNumber;

  00b61	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00b67	e8 00 00 00 00	 call	 __ftol2_sse
  00b6c	89 45 e4	 mov	 DWORD PTR _iIndex$234352[ebp], eax

; 402  : 				int iTempIndex = iIndex%36-1;

  00b6f	8b 45 e4	 mov	 eax, DWORD PTR _iIndex$234352[ebp]
  00b72	99		 cdq
  00b73	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00b78	f7 f9		 idiv	 ecx
  00b7a	83 ea 01	 sub	 edx, 1
  00b7d	89 55 e0	 mov	 DWORD PTR _iTempIndex$234363[ebp], edx

; 403  : 				int iRank = iTempIndex/4;

  00b80	8b 45 e0	 mov	 eax, DWORD PTR _iTempIndex$234363[ebp]
  00b83	99		 cdq
  00b84	83 e2 03	 and	 edx, 3
  00b87	03 c2		 add	 eax, edx
  00b89	c1 f8 02	 sar	 eax, 2
  00b8c	89 45 dc	 mov	 DWORD PTR _iRank$234364[ebp], eax

; 404  : 				int iPos = iTempIndex%4;

  00b8f	8b 45 e0	 mov	 eax, DWORD PTR _iTempIndex$234363[ebp]
  00b92	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00b97	79 05		 jns	 SHORT $LN24@Load
  00b99	48		 dec	 eax
  00b9a	83 c8 fc	 or	 eax, -4			; fffffffcH
  00b9d	40		 inc	 eax
$LN24@Load:
  00b9e	89 45 d8	 mov	 DWORD PTR _iPos$234365[ebp], eax

; 405  : 
; 406  : 				Token = GetToken();

  00ba1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00ba6	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv243[ebp], eax
  00bac	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv243[ebp]
  00bb2	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 407  : 				int iClassType = (WORD)TokenNumber;

  00bb5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00bbb	d9 bd 72 ff ff
	ff		 fnstcw	 WORD PTR tv286[ebp]
  00bc1	0f b7 85 72 ff
	ff ff		 movzx	 eax, WORD PTR tv286[ebp]
  00bc8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00bcd	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  00bd3	d9 ad 6c ff ff
	ff		 fldcw	 WORD PTR tv289[ebp]
  00bd9	db 9d 68 ff ff
	ff		 fistp	 DWORD PTR tv291[ebp]
  00bdf	d9 ad 72 ff ff
	ff		 fldcw	 WORD PTR tv286[ebp]
  00be5	0f b7 85 68 ff
	ff ff		 movzx	 eax, WORD PTR tv291[ebp]
  00bec	89 45 d4	 mov	 DWORD PTR _iClassType$234366[ebp], eax

; 408  : 
; 409  : 				Token = GetToken();

  00bef	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00bf4	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv244[ebp], eax
  00bfa	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv244[ebp]
  00c00	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 410  : 				int iTreeKind = TokenNumber;

  00c03	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00c09	e8 00 00 00 00	 call	 __ftol2_sse
  00c0e	89 45 d0	 mov	 DWORD PTR _iTreeKind$234368[ebp], eax

; 411  : 
; 412  : 				Token = GetToken();

  00c11	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00c16	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv245[ebp], eax
  00c1c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv245[ebp]
  00c22	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 413  : 				int iPoint = TokenNumber;

  00c25	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00c2b	e8 00 00 00 00	 call	 __ftol2_sse
  00c30	89 45 cc	 mov	 DWORD PTR _iPoint$234369[ebp], eax

; 414  : 
; 415  : 				Token = GetToken();

  00c33	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00c38	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv246[ebp], eax
  00c3e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv246[ebp]
  00c44	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 416  : 				int iMaxPoint = TokenNumber;

  00c47	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00c4d	e8 00 00 00 00	 call	 __ftol2_sse
  00c52	89 45 c8	 mov	 DWORD PTR _iMaxPoint$234370[ebp], eax

; 417  : 
; 418  : 				Token = GetToken();

  00c55	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00c5a	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv247[ebp], eax
  00c60	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv247[ebp]
  00c66	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 419  : 
; 420  : 				Token = GetToken();

  00c69	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00c6e	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv248[ebp], eax
  00c74	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv248[ebp]
  00c7a	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 421  : 				int iParentSkill1 = TokenNumber;

  00c7d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00c83	e8 00 00 00 00	 call	 __ftol2_sse
  00c88	89 45 c4	 mov	 DWORD PTR _iParentSkill1$234371[ebp], eax

; 422  : 
; 423  : 				Token = GetToken();

  00c8b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00c90	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv249[ebp], eax
  00c96	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv249[ebp]
  00c9c	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 424  : 				int iParentSkill2 = TokenNumber;

  00c9f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00ca5	e8 00 00 00 00	 call	 __ftol2_sse
  00caa	89 45 c0	 mov	 DWORD PTR _iParentSkill2$234372[ebp], eax

; 425  : 
; 426  : 				Token = GetToken();

  00cad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00cb2	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv250[ebp], eax
  00cb8	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv250[ebp]
  00cbe	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 427  : 				int iSkillID = TokenNumber;

  00cc1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00cc7	e8 00 00 00 00	 call	 __ftol2_sse
  00ccc	89 45 bc	 mov	 DWORD PTR _iSkillID$234373[ebp], eax

; 428  : 
; 429  : 				Token = GetToken();

  00ccf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00cd4	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv251[ebp], eax
  00cda	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv251[ebp]
  00ce0	89 45 e8	 mov	 DWORD PTR _Token$234351[ebp], eax

; 430  : 
; 431  : 				for(int i = 0; i < MAX_SKILLTREE_CLASS; i++)

  00ce3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$234374[ebp], 0
  00cea	eb 09		 jmp	 SHORT $LN4@Load
$LN3@Load:
  00cec	8b 45 b8	 mov	 eax, DWORD PTR _i$234374[ebp]
  00cef	83 c0 01	 add	 eax, 1
  00cf2	89 45 b8	 mov	 DWORD PTR _i$234374[ebp], eax
$LN4@Load:
  00cf5	83 7d b8 07	 cmp	 DWORD PTR _i$234374[ebp], 7
  00cf9	0f 8d 6d 01 00
	00		 jge	 $LN2@Load

; 432  : 				{
; 433  : 					if( CHARACTER_TABLE[i].ClassCode&iClassType )

  00cff	8b 45 b8	 mov	 eax, DWORD PTR _i$234374[ebp]
  00d02	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[eax*8]
  00d09	23 4d d4	 and	 ecx, DWORD PTR _iClassType$234366[ebp]
  00d0c	0f 84 55 01 00
	00		 je	 $LN1@Load

; 434  : 					{
; 435  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex = iIndex;

  00d12	8b 45 d8	 mov	 eax, DWORD PTR _iPos$234365[ebp]
  00d15	6b c0 14	 imul	 eax, 20			; 00000014H
  00d18	8b 4d dc	 mov	 ecx, DWORD PTR _iRank$234364[ebp]
  00d1b	6b c9 50	 imul	 ecx, 80			; 00000050H
  00d1e	8b 55 d0	 mov	 edx, DWORD PTR _iTreeKind$234368[ebp]
  00d21	69 d2 d0 02 00
	00		 imul	 edx, 720		; 000002d0H
  00d27	8b 75 b8	 mov	 esi, DWORD PTR _i$234374[ebp]
  00d2a	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[esi*8+4]
  00d31	69 f6 74 08 00
	00		 imul	 esi, 2164		; 00000874H
  00d37	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00d3a	8d 74 37 04	 lea	 esi, DWORD PTR [edi+esi+4]
  00d3e	8d 54 16 04	 lea	 edx, DWORD PTR [esi+edx+4]
  00d42	03 d1		 add	 edx, ecx
  00d44	8b 4d e4	 mov	 ecx, DWORD PTR _iIndex$234352[ebp]
  00d47	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 436  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint = iPoint;

  00d4a	8b 45 d8	 mov	 eax, DWORD PTR _iPos$234365[ebp]
  00d4d	6b c0 14	 imul	 eax, 20			; 00000014H
  00d50	8b 4d dc	 mov	 ecx, DWORD PTR _iRank$234364[ebp]
  00d53	6b c9 50	 imul	 ecx, 80			; 00000050H
  00d56	8b 55 d0	 mov	 edx, DWORD PTR _iTreeKind$234368[ebp]
  00d59	69 d2 d0 02 00
	00		 imul	 edx, 720		; 000002d0H
  00d5f	8b 75 b8	 mov	 esi, DWORD PTR _i$234374[ebp]
  00d62	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[esi*8+4]
  00d69	69 f6 74 08 00
	00		 imul	 esi, 2164		; 00000874H
  00d6f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00d72	8d 74 37 04	 lea	 esi, DWORD PTR [edi+esi+4]
  00d76	8d 54 16 04	 lea	 edx, DWORD PTR [esi+edx+4]
  00d7a	03 d1		 add	 edx, ecx
  00d7c	8a 4d cc	 mov	 cl, BYTE PTR _iPoint$234369[ebp]
  00d7f	88 4c 02 04	 mov	 BYTE PTR [edx+eax+4], cl

; 437  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint = iMaxPoint;

  00d83	8b 45 d8	 mov	 eax, DWORD PTR _iPos$234365[ebp]
  00d86	6b c0 14	 imul	 eax, 20			; 00000014H
  00d89	8b 4d dc	 mov	 ecx, DWORD PTR _iRank$234364[ebp]
  00d8c	6b c9 50	 imul	 ecx, 80			; 00000050H
  00d8f	8b 55 d0	 mov	 edx, DWORD PTR _iTreeKind$234368[ebp]
  00d92	69 d2 d0 02 00
	00		 imul	 edx, 720		; 000002d0H
  00d98	8b 75 b8	 mov	 esi, DWORD PTR _i$234374[ebp]
  00d9b	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[esi*8+4]
  00da2	69 f6 74 08 00
	00		 imul	 esi, 2164		; 00000874H
  00da8	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00dab	8d 74 37 04	 lea	 esi, DWORD PTR [edi+esi+4]
  00daf	8d 54 16 04	 lea	 edx, DWORD PTR [esi+edx+4]
  00db3	03 d1		 add	 edx, ecx
  00db5	8a 4d c8	 mov	 cl, BYTE PTR _iMaxPoint$234370[ebp]
  00db8	88 4c 02 05	 mov	 BYTE PTR [edx+eax+5], cl

; 438  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1 = iParentSkill1;

  00dbc	8b 45 d8	 mov	 eax, DWORD PTR _iPos$234365[ebp]
  00dbf	6b c0 14	 imul	 eax, 20			; 00000014H
  00dc2	8b 4d dc	 mov	 ecx, DWORD PTR _iRank$234364[ebp]
  00dc5	6b c9 50	 imul	 ecx, 80			; 00000050H
  00dc8	8b 55 d0	 mov	 edx, DWORD PTR _iTreeKind$234368[ebp]
  00dcb	69 d2 d0 02 00
	00		 imul	 edx, 720		; 000002d0H
  00dd1	8b 75 b8	 mov	 esi, DWORD PTR _i$234374[ebp]
  00dd4	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[esi*8+4]
  00ddb	69 f6 74 08 00
	00		 imul	 esi, 2164		; 00000874H
  00de1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00de4	8d 74 37 04	 lea	 esi, DWORD PTR [edi+esi+4]
  00de8	8d 54 16 04	 lea	 edx, DWORD PTR [esi+edx+4]
  00dec	03 d1		 add	 edx, ecx
  00dee	8b 4d c4	 mov	 ecx, DWORD PTR _iParentSkill1$234371[ebp]
  00df1	89 4c 02 08	 mov	 DWORD PTR [edx+eax+8], ecx

; 439  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2 = iParentSkill2;

  00df5	8b 45 d8	 mov	 eax, DWORD PTR _iPos$234365[ebp]
  00df8	6b c0 14	 imul	 eax, 20			; 00000014H
  00dfb	8b 4d dc	 mov	 ecx, DWORD PTR _iRank$234364[ebp]
  00dfe	6b c9 50	 imul	 ecx, 80			; 00000050H
  00e01	8b 55 d0	 mov	 edx, DWORD PTR _iTreeKind$234368[ebp]
  00e04	69 d2 d0 02 00
	00		 imul	 edx, 720		; 000002d0H
  00e0a	8b 75 b8	 mov	 esi, DWORD PTR _i$234374[ebp]
  00e0d	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[esi*8+4]
  00e14	69 f6 74 08 00
	00		 imul	 esi, 2164		; 00000874H
  00e1a	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00e1d	8d 74 37 04	 lea	 esi, DWORD PTR [edi+esi+4]
  00e21	8d 54 16 04	 lea	 edx, DWORD PTR [esi+edx+4]
  00e25	03 d1		 add	 edx, ecx
  00e27	8b 4d c0	 mov	 ecx, DWORD PTR _iParentSkill2$234372[ebp]
  00e2a	89 4c 02 0c	 mov	 DWORD PTR [edx+eax+12], ecx

; 440  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID = iSkillID;

  00e2e	8b 45 d8	 mov	 eax, DWORD PTR _iPos$234365[ebp]
  00e31	6b c0 14	 imul	 eax, 20			; 00000014H
  00e34	8b 4d dc	 mov	 ecx, DWORD PTR _iRank$234364[ebp]
  00e37	6b c9 50	 imul	 ecx, 80			; 00000050H
  00e3a	8b 55 d0	 mov	 edx, DWORD PTR _iTreeKind$234368[ebp]
  00e3d	69 d2 d0 02 00
	00		 imul	 edx, 720		; 000002d0H
  00e43	8b 75 b8	 mov	 esi, DWORD PTR _i$234374[ebp]
  00e46	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[esi*8+4]
  00e4d	69 f6 74 08 00
	00		 imul	 esi, 2164		; 00000874H
  00e53	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00e56	8d 74 37 04	 lea	 esi, DWORD PTR [edi+esi+4]
  00e5a	8d 54 16 04	 lea	 edx, DWORD PTR [esi+edx+4]
  00e5e	03 d1		 add	 edx, ecx
  00e60	8b 4d bc	 mov	 ecx, DWORD PTR _iSkillID$234373[ebp]
  00e63	89 4c 02 10	 mov	 DWORD PTR [edx+eax+16], ecx
$LN1@Load:

; 441  : 					}
; 442  : 				}

  00e67	e9 80 fe ff ff	 jmp	 $LN3@Load
$LN2@Load:

; 443  : 			}

  00e6c	e9 b4 fc ff ff	 jmp	 $LN8@Load
$LN6@Load:

; 444  : 		}

  00e71	e9 87 fc ff ff	 jmp	 $LN10@Load
$LN9@Load:

; 445  : 
; 446  : 		fclose(SMDFile);

  00e76	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00e7b	50		 push	 eax
  00e7c	e8 00 00 00 00	 call	 _fclose
  00e81	83 c4 04	 add	 esp, 4

; 447  : 		LogAddTD("[MasterLevelSkillTreeSystem] - %s file is Loaded",lpszFileName);

  00e84	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00e87	50		 push	 eax
  00e88	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@
  00e8d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00e93	83 c4 08	 add	 esp, 8

; 448  : 		this->IsLoaded = true;

  00e96	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00e99	c6 80 c8 55 00
	00 01		 mov	 BYTE PTR [eax+21960], 1

; 449  : 	}

  00ea0	eb 27		 jmp	 SHORT $LN18@Load
__catch$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$0:

; 450  : 	catch(int)
; 451  : 	{
; 452  : 		DWORD dwError = GetLastError();

  00ea2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00ea8	89 45 b4	 mov	 DWORD PTR _dwError$234382[ebp], eax

; 453  : 		MsgBox("[MasterLevelSkillTreeSystem] - Loading Exception Error (%s) File. ",lpszFileName);

  00eab	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00eae	50		 push	 eax
  00eaf	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@
  00eb4	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00eb9	83 c4 08	 add	 esp, 8

; 454  : 	}

  00ebc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00ec3	b8 00 00 00 00	 mov	 eax, $LN21@Load
  00ec8	c3		 ret	 0
$LN18@Load:
  00ec9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN21@Load:
$LN16@Load:

; 455  : }

  00ed0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00ed3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00eda	59		 pop	 ecx
  00edb	5f		 pop	 edi
  00edc	5e		 pop	 esi
  00edd	5b		 pop	 ebx
  00ede	8b e5		 mov	 esp, ebp
  00ee0	5d		 pop	 ebp
  00ee1	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z ENDP	; CMasterLevelSkillTreeSystem::Load
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00ef0	55		 push	 ebp
  00ef1	8b ec		 mov	 ebp, esp
  00ef3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00ef9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00efe	33 c5		 xor	 eax, ebp
  00f00	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00f03	53		 push	 ebx
  00f04	56		 push	 esi
  00f05	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00f06	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00f0d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f12	50		 push	 eax
  00f13	e8 00 00 00 00	 call	 _fgetc
  00f18	83 c4 04	 add	 esp, 4
  00f1b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00f1e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00f22	83 f9 ff	 cmp	 ecx, -1
  00f25	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00f27	b8 02 00 00 00	 mov	 eax, 2
  00f2c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00f31	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00f33	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f37	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00f3a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  00f3c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f41	50		 push	 eax
  00f42	e8 00 00 00 00	 call	 _fgetc
  00f47	83 c4 04	 add	 esp, 4
  00f4a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00f4d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00f51	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00f54	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00f56	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f5a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00f5d	74 1c		 je	 SHORT $LN23@GetToken
  00f5f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f63	83 f8 ff	 cmp	 eax, -1
  00f66	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00f68	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00f6d	50		 push	 eax
  00f6e	e8 00 00 00 00	 call	 _fgetc
  00f73	83 c4 04	 add	 esp, 4
  00f76	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00f79	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  00f7b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f7f	83 f8 ff	 cmp	 eax, -1
  00f82	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00f84	b8 02 00 00 00	 mov	 eax, 2
  00f89	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  00f8e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00f92	50		 push	 eax
  00f93	e8 00 00 00 00	 call	 _isspace
  00f98	83 c4 04	 add	 esp, 4
  00f9b	85 c0		 test	 eax, eax
  00f9d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00fa3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00fa7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00fad	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00fb3	83 e9 22	 sub	 ecx, 34			; 00000022H
  00fb6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  00fbc	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00fc3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00fc9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  00fcf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00fd6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  00fdd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00fe7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00fec	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00ff1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00ff6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  01000	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01005	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0100a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0100f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  01019	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0101e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  01023	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  01028	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  01032	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01037	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0103c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  01041	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0104b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01050	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  01055	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0105a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0105f	50		 push	 eax
  01060	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01064	51		 push	 ecx
  01065	e8 00 00 00 00	 call	 _ungetc
  0106a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0106d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  01070	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  01073	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  01078	50		 push	 eax
  01079	e8 00 00 00 00	 call	 _getc
  0107e	83 c4 04	 add	 esp, 4
  01081	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  01084	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01088	83 f9 ff	 cmp	 ecx, -1
  0108b	74 36		 je	 SHORT $LN12@GetToken
  0108d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01091	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  01094	74 1a		 je	 SHORT $LN11@GetToken
  01096	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0109a	50		 push	 eax
  0109b	e8 00 00 00 00	 call	 _isdigit
  010a0	83 c4 04	 add	 esp, 4
  010a3	85 c0		 test	 eax, eax
  010a5	75 09		 jne	 SHORT $LN11@GetToken
  010a7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  010ab	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  010ae	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  010b0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010b3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  010b6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  010b8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010bb	83 c0 01	 add	 eax, 1
  010be	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  010c1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  010c3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  010c6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  010c9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  010cc	50		 push	 eax
  010cd	e8 00 00 00 00	 call	 _atof
  010d2	83 c4 04	 add	 esp, 4
  010d5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  010db	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  010e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  010ea	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  010ef	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  010f4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  010fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  01100	50		 push	 eax
  01101	e8 00 00 00 00	 call	 _getc
  01106	83 c4 04	 add	 esp, 4
  01109	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0110c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01110	83 f9 ff	 cmp	 ecx, -1
  01113	74 1c		 je	 SHORT $LN8@GetToken
  01115	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01119	83 f8 22	 cmp	 eax, 34			; 00000022H
  0111c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0111e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01121	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  01124	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  01126	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01129	83 c0 01	 add	 eax, 1
  0112c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0112f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  01131	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01135	83 f8 22	 cmp	 eax, 34			; 00000022H
  01138	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0113a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0113f	50		 push	 eax
  01140	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  01144	51		 push	 ecx
  01145	e8 00 00 00 00	 call	 _ungetc
  0114a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0114d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01150	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  01153	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0115d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01162	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  01167	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0116c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  01170	50		 push	 eax
  01171	e8 00 00 00 00	 call	 _isalpha
  01176	83 c4 04	 add	 esp, 4
  01179	85 c0		 test	 eax, eax
  0117b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  01181	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  01188	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0118b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0118e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  01190	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01193	83 c0 01	 add	 eax, 1
  01196	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  01199	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0119e	50		 push	 eax
  0119f	e8 00 00 00 00	 call	 _getc
  011a4	83 c4 04	 add	 esp, 4
  011a7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  011aa	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  011ae	83 f9 ff	 cmp	 ecx, -1
  011b1	74 36		 je	 SHORT $LN3@GetToken
  011b3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011b7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  011ba	74 1a		 je	 SHORT $LN2@GetToken
  011bc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011c0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  011c3	74 11		 je	 SHORT $LN2@GetToken
  011c5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  011c9	50		 push	 eax
  011ca	e8 00 00 00 00	 call	 _isalnum
  011cf	83 c4 04	 add	 esp, 4
  011d2	85 c0		 test	 eax, eax
  011d4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  011d6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011d9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  011dc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  011de	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011e1	83 c0 01	 add	 eax, 1
  011e4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  011e7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  011e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  011ee	50		 push	 eax
  011ef	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  011f3	51		 push	 ecx
  011f4	e8 00 00 00 00	 call	 _ungetc
  011f9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  011fc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  011ff	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  01202	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0120c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01211	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  01213	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  01215	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0121f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  01224	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  01226	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  01228	5f		 pop	 edi
  01229	5e		 pop	 esi
  0122a	5b		 pop	 ebx
  0122b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0122e	33 cd		 xor	 ecx, ebp
  01230	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01235	8b e5		 mov	 esp, ebp
  01237	5d		 pop	 ebp
  01238	c3		 ret	 0
  01239	8d 49 00	 npad	 3
$LN35@GetToken:
  0123c	00 00 00 00	 DD	 $LN10@GetToken
  01240	00 00 00 00	 DD	 $LN19@GetToken
  01244	00 00 00 00	 DD	 $LN17@GetToken
  01248	00 00 00 00	 DD	 $LN14@GetToken
  0124c	00 00 00 00	 DD	 $LN18@GetToken
  01250	00 00 00 00	 DD	 $LN16@GetToken
  01254	00 00 00 00	 DD	 $LN15@GetToken
  01258	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0125c	00		 DB	 0
  0125d	01		 DB	 1
  0125e	07		 DB	 7
  0125f	07		 DB	 7
  01260	07		 DB	 7
  01261	07		 DB	 7
  01262	07		 DB	 7
  01263	07		 DB	 7
  01264	07		 DB	 7
  01265	07		 DB	 7
  01266	02		 DB	 2
  01267	03		 DB	 3
  01268	03		 DB	 3
  01269	07		 DB	 7
  0126a	03		 DB	 3
  0126b	03		 DB	 3
  0126c	03		 DB	 3
  0126d	03		 DB	 3
  0126e	03		 DB	 3
  0126f	03		 DB	 3
  01270	03		 DB	 3
  01271	03		 DB	 3
  01272	03		 DB	 3
  01273	03		 DB	 3
  01274	07		 DB	 7
  01275	04		 DB	 4
  01276	07		 DB	 7
  01277	07		 DB	 7
  01278	07		 DB	 7
  01279	07		 DB	 7
  0127a	07		 DB	 7
  0127b	07		 DB	 7
  0127c	07		 DB	 7
  0127d	07		 DB	 7
  0127e	07		 DB	 7
  0127f	07		 DB	 7
  01280	07		 DB	 7
  01281	07		 DB	 7
  01282	07		 DB	 7
  01283	07		 DB	 7
  01284	07		 DB	 7
  01285	07		 DB	 7
  01286	07		 DB	 7
  01287	07		 DB	 7
  01288	07		 DB	 7
  01289	07		 DB	 7
  0128a	07		 DB	 7
  0128b	07		 DB	 7
  0128c	07		 DB	 7
  0128d	07		 DB	 7
  0128e	07		 DB	 7
  0128f	07		 DB	 7
  01290	07		 DB	 7
  01291	07		 DB	 7
  01292	07		 DB	 7
  01293	07		 DB	 7
  01294	07		 DB	 7
  01295	07		 DB	 7
  01296	07		 DB	 7
  01297	07		 DB	 7
  01298	07		 DB	 7
  01299	07		 DB	 7
  0129a	07		 DB	 7
  0129b	07		 DB	 7
  0129c	07		 DB	 7
  0129d	07		 DB	 7
  0129e	07		 DB	 7
  0129f	07		 DB	 7
  012a0	07		 DB	 7
  012a1	07		 DB	 7
  012a2	07		 DB	 7
  012a3	07		 DB	 7
  012a4	07		 DB	 7
  012a5	07		 DB	 7
  012a6	07		 DB	 7
  012a7	07		 DB	 7
  012a8	07		 DB	 7
  012a9	07		 DB	 7
  012aa	07		 DB	 7
  012ab	07		 DB	 7
  012ac	07		 DB	 7
  012ad	07		 DB	 7
  012ae	07		 DB	 7
  012af	07		 DB	 7
  012b0	07		 DB	 7
  012b1	07		 DB	 7
  012b2	07		 DB	 7
  012b3	07		 DB	 7
  012b4	07		 DB	 7
  012b5	05		 DB	 5
  012b6	07		 DB	 7
  012b7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?ClearPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSkillTreeSystem::ClearPassiveSkill
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\newmasterlevelskilltreesystem.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?ClearPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSkillTreeSystem::ClearPassiveSkill
; _this$ = ecx

; 459  : {

  012c0	55		 push	 ebp
  012c1	8b ec		 mov	 ebp, esp
  012c3	83 ec 44	 sub	 esp, 68			; 00000044H
  012c6	53		 push	 ebx
  012c7	56		 push	 esi
  012c8	57		 push	 edi
  012c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 460  : 	memset(&lpObj->m_MPSkillOpt,0,sizeof(lpObj->m_MPSkillOpt));

  012cc	68 68 01 00 00	 push	 360			; 00000168H
  012d1	6a 00		 push	 0
  012d3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  012d6	05 34 26 00 00	 add	 eax, 9780		; 00002634H
  012db	50		 push	 eax
  012dc	e8 00 00 00 00	 call	 _memset
  012e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 461  : }

  012e4	5f		 pop	 edi
  012e5	5e		 pop	 esi
  012e6	5b		 pop	 ebx
  012e7	8b e5		 mov	 esp, ebp
  012e9	5d		 pop	 ebp
  012ea	c2 04 00	 ret	 4
?ClearPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSkillTreeSystem::ClearPassiveSkill
_TEXT	ENDS
PUBLIC	?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
PUBLIC	?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
PUBLIC	?AddPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::AddPassiveSkill
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
EXTRN	?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z:PROC ; CMagicDamage::GetSkillReqDexterity
EXTRN	?GetSkillReqStrength@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillReqStrength
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv86 = -88						; size = 4
_iBaseMLS$ = -20					; size = 4
_iSkillValue$ = -16					; size = 4
_iReqDex$ = -12						; size = 4
_iReqStr$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iMLSkill$ = 12						; size = 4
_iSkillLevel$ = 16					; size = 4
?AddPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::AddPassiveSkill
; _this$ = ecx

; 465  : {

  012f0	55		 push	 ebp
  012f1	8b ec		 mov	 ebp, esp
  012f3	83 ec 58	 sub	 esp, 88			; 00000058H
  012f6	53		 push	 ebx
  012f7	56		 push	 esi
  012f8	57		 push	 edi
  012f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 466  : 	int iReqStr = MagicDamageC.GetSkillReqStrength(iMLSkill);

  012fc	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  012ff	50		 push	 eax
  01300	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  01305	e8 00 00 00 00	 call	 ?GetSkillReqStrength@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqStrength
  0130a	89 45 f8	 mov	 DWORD PTR _iReqStr$[ebp], eax

; 467  : 
; 468  : 	if( lpObj->Strength < iReqStr )

  0130d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01310	0f b7 88 f4 00
	00 00		 movzx	 ecx, WORD PTR [eax+244]
  01317	3b 4d f8	 cmp	 ecx, DWORD PTR _iReqStr$[ebp]
  0131a	7d 05		 jge	 SHORT $LN80@AddPassive

; 469  : 		return;

  0131c	e9 69 05 00 00	 jmp	 $LN81@AddPassive
$LN80@AddPassive:

; 470  : 
; 471  : 	int iReqDex = MagicDamageC.GetSkillReqDexterity(iMLSkill);

  01321	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01324	50		 push	 eax
  01325	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0132a	e8 00 00 00 00	 call	 ?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqDexterity
  0132f	89 45 f4	 mov	 DWORD PTR _iReqDex$[ebp], eax

; 472  : 
; 473  : 	if( lpObj->Dexterity < iReqDex )

  01332	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01335	0f b7 88 f6 00
	00 00		 movzx	 ecx, WORD PTR [eax+246]
  0133c	3b 4d f4	 cmp	 ecx, DWORD PTR _iReqDex$[ebp]
  0133f	7d 05		 jge	 SHORT $LN79@AddPassive

; 474  : 		return;

  01341	e9 44 05 00 00	 jmp	 $LN81@AddPassive
$LN79@AddPassive:

; 475  : 
; 476  : 	float iSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iMLSkill),iSkillLevel);

  01346	8b 45 10	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  01349	50		 push	 eax
  0134a	8b 4d 0c	 mov	 ecx, DWORD PTR _iMLSkill$[ebp]
  0134d	51		 push	 ecx
  0134e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  01353	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  01358	50		 push	 eax
  01359	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0135c	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  01361	d9 5d f0	 fstp	 DWORD PTR _iSkillValue$[ebp]

; 477  : 
; 478  : 	int iBaseMLS = this->GetBaseMasterLevelSkill(iMLSkill);

  01364	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01367	50		 push	 eax
  01368	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0136b	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  01370	89 45 ec	 mov	 DWORD PTR _iBaseMLS$[ebp], eax

; 479  : 
; 480  : 
; 481  : #ifdef DEBUG_CODE
; 482  : 	LogAddC(2,"iBaseMLS: %d",iBaseMLS);
; 483  : #endif
; 484  : 
; 485  : 	switch( iBaseMLS )

  01373	8b 45 ec	 mov	 eax, DWORD PTR _iBaseMLS$[ebp]
  01376	89 45 a8	 mov	 DWORD PTR tv86[ebp], eax
  01379	8b 4d a8	 mov	 ecx, DWORD PTR tv86[ebp]
  0137c	81 e9 2c 01 00
	00		 sub	 ecx, 300		; 0000012cH
  01382	89 4d a8	 mov	 DWORD PTR tv86[ebp], ecx
  01385	81 7d a8 34 01
	00 00		 cmp	 DWORD PTR tv86[ebp], 308 ; 00000134H
  0138c	0f 87 f8 04 00
	00		 ja	 $LN1@AddPassive
  01392	8b 55 a8	 mov	 edx, DWORD PTR tv86[ebp]
  01395	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN83@AddPassive[edx]
  0139c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN84@AddPassive[eax*4]
$LN76@AddPassive:

; 486  : 	{
; 487  : 	case 325:
; 488  : 	case 599:	//OK
; 489  : 		lpObj->m_MPSkillOpt.MpsAttackSuccessRate = iSkillValue;

  013a3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013a6	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  013a9	d9 98 34 26 00
	00		 fstp	 DWORD PTR [eax+9780]

; 490  : 		break;

  013af	e9 d6 04 00 00	 jmp	 $LN77@AddPassive
$LN75@AddPassive:

; 491  : 	case 347:
; 492  : 	case 603:	//OK
; 493  : 		lpObj->m_MPSkillOpt.MpsPVPAttackDmgRate = iSkillValue;

  013b4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013b7	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  013ba	d9 98 3c 26 00
	00		 fstp	 DWORD PTR [eax+9788]

; 494  : 		break;

  013c0	e9 c5 04 00 00	 jmp	 $LN77@AddPassive
$LN74@AddPassive:

; 495  : 	case 301:
; 496  : 	case 579:	//OK
; 497  : 		lpObj->m_MPSkillOpt.MpsPVPBlockingRate = iSkillValue;

  013c5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013c8	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  013cb	d9 98 40 26 00
	00		 fstp	 DWORD PTR [eax+9792]

; 498  : 		break;

  013d1	e9 b4 04 00 00	 jmp	 $LN77@AddPassive
$LN73@AddPassive:

; 499  : 	case 300:
; 500  : 	case 578:	//OK
; 501  : 		lpObj->m_MPSkillOpt.MpsDownDur1	= iSkillValue;

  013d6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013d9	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  013dc	d9 98 44 26 00
	00		 fstp	 DWORD PTR [eax+9796]

; 502  : 		lpObj->m_MPSkillOpt.btMpsDownDur1Level = iSkillLevel;

  013e2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013e5	8a 4d 10	 mov	 cl, BYTE PTR _iSkillLevel$[ebp]
  013e8	88 88 48 26 00
	00		 mov	 BYTE PTR [eax+9800], cl

; 503  : 		break;

  013ee	e9 97 04 00 00	 jmp	 $LN77@AddPassive
$LN72@AddPassive:

; 504  : 	case 305:
; 505  : 	case 583:	//OK
; 506  : 		lpObj->m_MPSkillOpt.MpsDownDur2 = iSkillValue;

  013f3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013f6	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  013f9	d9 98 4c 26 00
	00		 fstp	 DWORD PTR [eax+9804]

; 507  : 		break;

  013ff	e9 86 04 00 00	 jmp	 $LN77@AddPassive
$LN71@AddPassive:

; 508  : 	case 312:
; 509  : 	case 590:	//Pet dur...
; 510  : 		lpObj->m_MPSkillOpt.MpsDownDur3 = iSkillValue;

  01404	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01407	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0140a	d9 98 50 26 00
	00		 fstp	 DWORD PTR [eax+9808]

; 511  : 		break;

  01410	e9 75 04 00 00	 jmp	 $LN77@AddPassive
$LN70@AddPassive:

; 512  : 	case 304:
; 513  : 	case 582:	//OK
; 514  : 		lpObj->m_MPSkillOpt.MpsResistancePoison = iSkillValue;

  01415	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01418	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0141b	d9 98 54 26 00
	00		 fstp	 DWORD PTR [eax+9812]

; 515  : 		break;

  01421	e9 64 04 00 00	 jmp	 $LN77@AddPassive
$LN69@AddPassive:

; 516  : 	case 308:
; 517  : 	case 586:	//OK
; 518  : 		lpObj->m_MPSkillOpt.MpsResistanceThunder = iSkillValue;

  01426	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01429	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0142c	d9 98 58 26 00
	00		 fstp	 DWORD PTR [eax+9816]

; 519  : 		break;

  01432	e9 53 04 00 00	 jmp	 $LN77@AddPassive
$LN68@AddPassive:

; 520  : 	case 311:
; 521  : 	case 589:	//OK
; 522  : 		lpObj->m_MPSkillOpt.MpsResistanceIce = iSkillValue;

  01437	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0143a	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0143d	d9 98 5c 26 00
	00		 fstp	 DWORD PTR [eax+9820]

; 523  : 		break;

  01443	e9 42 04 00 00	 jmp	 $LN77@AddPassive
$LN67@AddPassive:

; 524  : 	case 307:
; 525  : 	case 585:	//OK
; 526  : 		lpObj->m_MPSkillOpt.MpsAutoRecoverLife = iSkillValue;

  01448	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0144b	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0144e	d9 98 60 26 00
	00		 fstp	 DWORD PTR [eax+9824]

; 527  : 		break;

  01454	e9 31 04 00 00	 jmp	 $LN77@AddPassive
$LN66@AddPassive:

; 528  : 	case 313:
; 529  : 	case 591:	//OK
; 530  : 		lpObj->m_MPSkillOpt.MpsBlockingRate = iSkillValue;

  01459	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0145c	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0145f	d9 98 38 26 00
	00		 fstp	 DWORD PTR [eax+9784]

; 531  : 		break;

  01465	e9 20 04 00 00	 jmp	 $LN77@AddPassive
$LN65@AddPassive:

; 532  : 	case 309:
; 533  : 	case 587:	//OK
; 534  : 		lpObj->m_MPSkillOpt.MpsDefence = iSkillValue;

  0146a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0146d	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01470	d9 98 34 27 00
	00		 fstp	 DWORD PTR [eax+10036]

; 535  : 		break;

  01476	e9 0f 04 00 00	 jmp	 $LN77@AddPassive
$LN64@AddPassive:

; 536  : 	case 334:
; 537  : 	case 600:	//OK
; 538  : 		lpObj->m_MPSkillOpt.MpsMaxHP = iSkillValue;

  0147b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0147e	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01481	d9 98 38 27 00
	00		 fstp	 DWORD PTR [eax+10040]

; 539  : 		break;

  01487	e9 fe 03 00 00	 jmp	 $LN77@AddPassive
$LN63@AddPassive:

; 540  : 	case 338:
; 541  : 	case 601:	//OK
; 542  : 		lpObj->m_MPSkillOpt.MpsMaxMP = iSkillValue;

  0148c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0148f	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01492	d9 98 40 27 00
	00		 fstp	 DWORD PTR [eax+10048]

; 543  : 		break;

  01498	e9 ed 03 00 00	 jmp	 $LN77@AddPassive
$LN62@AddPassive:

; 544  : 	case 341:	//OK
; 545  : 		lpObj->m_MPSkillOpt.MpsMaxBP = iSkillValue;

  0149d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014a0	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  014a3	d9 98 3c 27 00
	00		 fstp	 DWORD PTR [eax+10044]

; 546  : 		break;

  014a9	e9 dc 03 00 00	 jmp	 $LN77@AddPassive
$LN61@AddPassive:

; 547  : 	case 362:
; 548  : 	case 608:	//OK
; 549  : 		lpObj->m_MPSkillOpt.MpsMonsterDieGetMana = iSkillValue;

  014ae	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014b1	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  014b4	d9 98 44 27 00
	00		 fstp	 DWORD PTR [eax+10052]

; 550  : 		break;

  014ba	e9 cb 03 00 00	 jmp	 $LN77@AddPassive
$LN60@AddPassive:

; 551  : 	case 359:
; 552  : 	case 606:	//OK
; 553  : 		lpObj->m_MPSkillOpt.MpsMonsterDieGetLife = iSkillValue;

  014bf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014c2	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  014c5	d9 98 48 27 00
	00		 fstp	 DWORD PTR [eax+10056]

; 554  : 		break;

  014cb	e9 ba 03 00 00	 jmp	 $LN77@AddPassive
$LN59@AddPassive:

; 555  : 	case 358:
; 556  : 	case 605:	//OK
; 557  : 		lpObj->m_MPSkillOpt.MpsMonsterDieGetSD = iSkillValue;

  014d0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014d3	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  014d6	d9 98 4c 27 00
	00		 fstp	 DWORD PTR [eax+10060]

; 558  : 		break;

  014dc	e9 a9 03 00 00	 jmp	 $LN77@AddPassive
$LN58@AddPassive:

; 559  : 	case 303:
; 560  : 	case 581:	//OK
; 561  : 		lpObj->m_MPSkillOpt.MpsAutoRecoverMana = iSkillValue;

  014e1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014e4	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  014e7	d9 98 64 26 00
	00		 fstp	 DWORD PTR [eax+9828]

; 562  : 		break;

  014ed	e9 98 03 00 00	 jmp	 $LN77@AddPassive
$LN57@AddPassive:

; 563  : 	case 310:
; 564  : 	case 588:	//OK
; 565  : 		lpObj->m_MPSkillOpt.MpsAutoRecoverAG = iSkillValue;

  014f2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014f5	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  014f8	d9 98 68 26 00
	00		 fstp	 DWORD PTR [eax+9832]

; 566  : 		break;

  014fe	e9 87 03 00 00	 jmp	 $LN77@AddPassive
$LN56@AddPassive:

; 567  : 	case 302:
; 568  : 	case 580:	//OK
; 569  : 		lpObj->m_MPSkillOpt.MpsMaxSD = iSkillValue;

  01503	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01506	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01509	d9 98 50 27 00
	00		 fstp	 DWORD PTR [eax+10064]

; 570  : 		break;

  0150f	e9 76 03 00 00	 jmp	 $LN77@AddPassive
$LN55@AddPassive:

; 571  : 	case 306:
; 572  : 	case 584:	//OK
; 573  : 		lpObj->m_MPSkillOpt.MpsSDSpeed = iSkillValue;

  01514	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01517	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0151a	d9 98 54 27 00
	00		 fstp	 DWORD PTR [eax+10068]

; 574  : 		break;

  01520	e9 65 03 00 00	 jmp	 $LN77@AddPassive
$LN54@AddPassive:

; 575  : 	/*case 364:
; 576  : 		lpObj->m_MPSkillOpt.MpsMaxAttackDamage = iSkillValue;
; 577  : 		break;
; 578  : 	case 361:
; 579  : 		lpObj->m_MPSkillOpt.MpsMinAttackDamage = iSkillValue;
; 580  : 		break;*/
; 581  : 	case 357:
; 582  : 	case 604:	//OK
; 583  : 		lpObj->m_MPSkillOpt.MpsDecreaseMana = iSkillValue;

  01525	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01528	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0152b	d9 98 60 27 00
	00		 fstp	 DWORD PTR [eax+10080]

; 584  : 		break;

  01531	e9 54 03 00 00	 jmp	 $LN77@AddPassive
$LN53@AddPassive:

; 585  : 	case 407:	//OK
; 586  : 		lpObj->m_MPSkillOpt.MpsMaxMagicDamage = iSkillValue;

  01536	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01539	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0153c	d9 98 64 27 00
	00		 fstp	 DWORD PTR [eax+10084]

; 587  : 		break;

  01542	e9 43 03 00 00	 jmp	 $LN77@AddPassive
$LN52@AddPassive:

; 588  : 	case 405:	//OK
; 589  : 		lpObj->m_MPSkillOpt.MpsMinMagicDamage = iSkillValue;

  01547	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0154a	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0154d	d9 98 68 27 00
	00		 fstp	 DWORD PTR [eax+10088]

; 590  : 		break;

  01553	e9 32 03 00 00	 jmp	 $LN77@AddPassive
$LN51@AddPassive:

; 591  : 	case 535:	//OK
; 592  : 		lpObj->m_MPSkillOpt.MpsPetDurDownSpeed = iSkillValue;

  01558	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0155b	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0155e	d9 98 6c 27 00
	00		 fstp	 DWORD PTR [eax+10092]

; 593  : 		break;

  01564	e9 21 03 00 00	 jmp	 $LN77@AddPassive
$LN50@AddPassive:

; 594  : 	case 335:
; 595  : 	case 485:
; 596  : 	case 513:
; 597  : 	case 557:	//OK
; 598  : 		lpObj->m_MPSkillOpt.MpsWeaponMastery = iSkillValue;

  01569	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0156c	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0156f	d9 98 6c 26 00
	00		 fstp	 DWORD PTR [eax+9836]

; 599  : 		break;

  01575	e9 10 03 00 00	 jmp	 $LN77@AddPassive
$LN49@AddPassive:

; 600  : 	case 348:	//OK
; 601  : 		lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength = iSkillValue;

  0157a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0157d	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01580	d9 98 70 26 00
	00		 fstp	 DWORD PTR [eax+9840]

; 602  : 		break;

  01586	e9 ff 02 00 00	 jmp	 $LN77@AddPassive
$LN48@AddPassive:

; 603  : 	case 349:	//OK
; 604  : 		lpObj->m_MPSkillOpt.MpsOneHandSwordStrength = iSkillValue;

  0158b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0158e	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01591	d9 98 74 26 00
	00		 fstp	 DWORD PTR [eax+9844]

; 605  : 		break;

  01597	e9 ee 02 00 00	 jmp	 $LN77@AddPassive
$LN47@AddPassive:

; 606  : 	case 350:	//OK
; 607  : 		lpObj->m_MPSkillOpt.MpsMaceStrength = iSkillValue;

  0159c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0159f	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  015a2	d9 98 78 26 00
	00		 fstp	 DWORD PTR [eax+9848]

; 608  : 		break;

  015a8	e9 dd 02 00 00	 jmp	 $LN77@AddPassive
$LN46@AddPassive:

; 609  : 	case 351:	//OK
; 610  : 		lpObj->m_MPSkillOpt.MpsSpearStrength = iSkillValue;

  015ad	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015b0	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  015b3	d9 98 7c 26 00
	00		 fstp	 DWORD PTR [eax+9852]

; 611  : 		break;

  015b9	e9 cc 02 00 00	 jmp	 $LN77@AddPassive
$LN45@AddPassive:

; 612  : 	case 352:	//OK
; 613  : 		lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery = iSkillValue;

  015be	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015c1	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  015c4	d9 98 80 26 00
	00		 fstp	 DWORD PTR [eax+9856]

; 614  : 		break;

  015ca	e9 bb 02 00 00	 jmp	 $LN77@AddPassive
$LN44@AddPassive:

; 615  : 	case 353:	//OK
; 616  : 		lpObj->m_MPSkillOpt.MpsOneHandSwordMastery = iSkillValue;

  015cf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015d2	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  015d5	d9 98 84 26 00
	00		 fstp	 DWORD PTR [eax+9860]

; 617  : 		break;

  015db	e9 aa 02 00 00	 jmp	 $LN77@AddPassive
$LN43@AddPassive:

; 618  : 	case 354:	//OK
; 619  : 		lpObj->m_MPSkillOpt.MpsMaceMastery = iSkillValue;

  015e0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015e3	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  015e6	d9 98 8c 26 00
	00		 fstp	 DWORD PTR [eax+9868]

; 620  : 		break;

  015ec	e9 99 02 00 00	 jmp	 $LN77@AddPassive
$LN42@AddPassive:

; 621  : 	case 355:	//OK
; 622  : 		lpObj->m_MPSkillOpt.MpsSpearMastery = iSkillValue;

  015f1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015f4	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  015f7	d9 98 88 26 00
	00		 fstp	 DWORD PTR [eax+9864]

; 623  : 		break;

  015fd	e9 88 02 00 00	 jmp	 $LN77@AddPassive
$LN41@AddPassive:

; 624  : 	case 386:
; 625  : 	case 488:	//OK
; 626  : 		lpObj->m_MPSkillOpt.MpsMagicMastery = iSkillValue;

  01602	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01605	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01608	d9 98 90 26 00
	00		 fstp	 DWORD PTR [eax+9872]

; 627  : 		break;

  0160e	e9 77 02 00 00	 jmp	 $LN77@AddPassive
$LN40@AddPassive:

; 628  : 	case 397:	//OK
; 629  : 		lpObj->m_MPSkillOpt.MpsOneHandStaffStrength = iSkillValue;

  01613	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01616	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01619	d9 98 98 26 00
	00		 fstp	 DWORD PTR [eax+9880]

; 630  : 		break;

  0161f	e9 66 02 00 00	 jmp	 $LN77@AddPassive
$LN39@AddPassive:

; 631  : 	case 398:	//OK
; 632  : 		lpObj->m_MPSkillOpt.MpsTwoHandStaffStrength = iSkillValue;

  01624	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01627	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0162a	d9 98 94 26 00
	00		 fstp	 DWORD PTR [eax+9876]

; 633  : 		break;

  01630	e9 55 02 00 00	 jmp	 $LN77@AddPassive
$LN38@AddPassive:

; 634  : 	case 399:	//OK
; 635  : 		lpObj->m_MPSkillOpt.MpsShieldStrength = iSkillValue;

  01635	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01638	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0163b	d9 98 9c 26 00
	00		 fstp	 DWORD PTR [eax+9884]

; 636  : 		break;

  01641	e9 44 02 00 00	 jmp	 $LN77@AddPassive
$LN37@AddPassive:

; 637  : 	case 400:	//OK
; 638  : 		lpObj->m_MPSkillOpt.MpsOneHandStaffMastery = iSkillValue;

  01646	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01649	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0164c	d9 98 a0 26 00
	00		 fstp	 DWORD PTR [eax+9888]

; 639  : 		break;

  01652	e9 33 02 00 00	 jmp	 $LN77@AddPassive
$LN36@AddPassive:

; 640  : 	case 401:	//OK
; 641  : 		lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery = iSkillValue;

  01657	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0165a	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0165d	d9 98 a4 26 00
	00		 fstp	 DWORD PTR [eax+9892]

; 642  : 		break;

  01663	e9 22 02 00 00	 jmp	 $LN77@AddPassive
$LN35@AddPassive:

; 643  : 	case 402:	//OK
; 644  : 		lpObj->m_MPSkillOpt.MpsShieldMastery = iSkillValue;

  01668	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0166b	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0166e	d9 98 a8 26 00
	00		 fstp	 DWORD PTR [eax+9896]

; 645  : 		break;

  01674	e9 11 02 00 00	 jmp	 $LN77@AddPassive
$LN34@AddPassive:

; 646  : 	case 435:	//OK
; 647  : 		lpObj->m_MPSkillOpt.MpsBowStrength = iSkillValue;

  01679	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0167c	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0167f	d9 98 ac 26 00
	00		 fstp	 DWORD PTR [eax+9900]

; 648  : 		break;

  01685	e9 00 02 00 00	 jmp	 $LN77@AddPassive
$LN33@AddPassive:

; 649  : 	case 438:	//OK
; 650  : 		lpObj->m_MPSkillOpt.MpsBowMastery = iSkillValue;

  0168a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0168d	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01690	d9 98 b0 26 00
	00		 fstp	 DWORD PTR [eax+9904]

; 651  : 		break;

  01696	e9 ef 01 00 00	 jmp	 $LN77@AddPassive
$LN32@AddPassive:

; 652  : 	case 436:	//OK
; 653  : 		lpObj->m_MPSkillOpt.MpsCrossbowStrength = iSkillValue;

  0169b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0169e	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  016a1	d9 98 b4 26 00
	00		 fstp	 DWORD PTR [eax+9908]

; 654  : 		break;

  016a7	e9 de 01 00 00	 jmp	 $LN77@AddPassive
$LN31@AddPassive:

; 655  : 	case 439:	//OK
; 656  : 		lpObj->m_MPSkillOpt.MpsCrossbowMastery = iSkillValue;

  016ac	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016af	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  016b2	d9 98 b8 26 00
	00		 fstp	 DWORD PTR [eax+9912]

; 657  : 		break;

  016b8	e9 cd 01 00 00	 jmp	 $LN77@AddPassive
$LN30@AddPassive:

; 658  : 	case 421:	//OK
; 659  : 		lpObj->m_MPSkillOpt.MpsWeaponMastery2 = iSkillValue;

  016bd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016c0	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  016c3	d9 98 bc 26 00
	00		 fstp	 DWORD PTR [eax+9916]

; 660  : 		break;

  016c9	e9 bc 01 00 00	 jmp	 $LN77@AddPassive
$LN29@AddPassive:

; 661  : 	case 415:	//OK
; 662  : 		lpObj->m_MPSkillOpt.MpsSummonMonster1 = iSkillValue;

  016ce	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016d1	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  016d4	d9 98 c0 26 00
	00		 fstp	 DWORD PTR [eax+9920]

; 663  : 		break;

  016da	e9 ab 01 00 00	 jmp	 $LN77@AddPassive
$LN28@AddPassive:

; 664  : 	case 419:	//OK
; 665  : 		lpObj->m_MPSkillOpt.MpsSummonMonster2 = iSkillValue;

  016df	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016e2	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  016e5	d9 98 c4 26 00
	00		 fstp	 DWORD PTR [eax+9924]

; 666  : 		break;

  016eb	e9 9a 01 00 00	 jmp	 $LN77@AddPassive
$LN27@AddPassive:

; 667  : 	case 428:	//OK
; 668  : 		lpObj->m_MPSkillOpt.MpsSummonMonster3 = iSkillValue;

  016f0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016f3	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  016f6	d9 98 c8 26 00
	00		 fstp	 DWORD PTR [eax+9928]

; 669  : 		break;

  016fc	e9 89 01 00 00	 jmp	 $LN77@AddPassive
$LN26@AddPassive:

; 670  : 	case 361:
; 671  : 	case 442:
; 672  : 	case 607:	//OK
; 673  : 		lpObj->m_MPSkillOpt.MpsMinAttackInc = iSkillValue;

  01701	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01704	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01707	d9 98 28 27 00
	00		 fstp	 DWORD PTR [eax+10024]

; 674  : 		break;

  0170d	e9 78 01 00 00	 jmp	 $LN77@AddPassive
$LN25@AddPassive:

; 675  : 	case 364:
; 676  : 	case 443:	//OK
; 677  : 		lpObj->m_MPSkillOpt.MpsMaxAttackInc = iSkillValue;

  01712	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01715	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01718	d9 98 2c 27 00
	00		 fstp	 DWORD PTR [eax+10028]

; 678  : 		break;

  0171e	e9 67 01 00 00	 jmp	 $LN77@AddPassive
$LN24@AddPassive:

; 679  : 	case 448:	//OK
; 680  : 		lpObj->m_MPSkillOpt.MpsFireTomeStrength = iSkillValue;

  01723	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01726	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01729	d9 98 d0 26 00
	00		 fstp	 DWORD PTR [eax+9936]

; 681  : 		break;

  0172f	e9 56 01 00 00	 jmp	 $LN77@AddPassive
$LN23@AddPassive:

; 682  : 	case 449:	//OK
; 683  : 		lpObj->m_MPSkillOpt.MpsWindTomeStrength = iSkillValue;

  01734	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01737	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0173a	d9 98 d4 26 00
	00		 fstp	 DWORD PTR [eax+9940]

; 684  : 		break;

  01740	e9 45 01 00 00	 jmp	 $LN77@AddPassive
$LN22@AddPassive:

; 685  : 	case 450:	//OK
; 686  : 		lpObj->m_MPSkillOpt.MpsLightTomeStrength = iSkillValue;

  01745	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01748	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0174b	d9 98 d8 26 00
	00		 fstp	 DWORD PTR [eax+9944]

; 687  : 		break;

  01751	e9 34 01 00 00	 jmp	 $LN77@AddPassive
$LN21@AddPassive:

; 688  : 	case 451:	//OK
; 689  : 		lpObj->m_MPSkillOpt.MpsFireTomeMastery = iSkillValue;

  01756	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01759	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0175c	d9 98 dc 26 00
	00		 fstp	 DWORD PTR [eax+9948]

; 690  : 		break;

  01762	e9 23 01 00 00	 jmp	 $LN77@AddPassive
$LN20@AddPassive:

; 691  : 	case 452:	//OK
; 692  : 		lpObj->m_MPSkillOpt.MpsWindTomeMastery = iSkillValue;

  01767	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0176a	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0176d	d9 98 e0 26 00
	00		 fstp	 DWORD PTR [eax+9952]

; 693  : 		break;

  01773	e9 12 01 00 00	 jmp	 $LN77@AddPassive
$LN19@AddPassive:

; 694  : 	case 453:	//OK
; 695  : 		lpObj->m_MPSkillOpt.MpsLightTomeMastery = iSkillValue;

  01778	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0177b	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0177e	d9 98 e4 26 00
	00		 fstp	 DWORD PTR [eax+9956]

; 696  : 		break;

  01784	e9 01 01 00 00	 jmp	 $LN77@AddPassive
$LN18@AddPassive:

; 697  : 	case 457:	//OK
; 698  : 		lpObj->m_MPSkillOpt.MpsMagicMastery2 = iSkillValue;

  01789	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0178c	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0178f	d9 98 cc 26 00
	00		 fstp	 DWORD PTR [eax+9932]

; 699  : 		break;

  01795	e9 f0 00 00 00	 jmp	 $LN77@AddPassive
$LN17@AddPassive:

; 700  : 	case 465:	//OK
; 701  : 		lpObj->m_MPSkillOpt.MpsStickStrength = iSkillValue;

  0179a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0179d	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  017a0	d9 98 e8 26 00
	00		 fstp	 DWORD PTR [eax+9960]

; 702  : 		break;

  017a6	e9 df 00 00 00	 jmp	 $LN77@AddPassive
$LN16@AddPassive:

; 703  : 	case 466:	//OK
; 704  : 		lpObj->m_MPSkillOpt.MpsTomeStrength = iSkillValue;

  017ab	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017ae	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  017b1	d9 98 ec 26 00
	00		 fstp	 DWORD PTR [eax+9964]

; 705  : 		break;

  017b7	e9 ce 00 00 00	 jmp	 $LN77@AddPassive
$LN15@AddPassive:

; 706  : 	case 467:	//OK
; 707  : 		lpObj->m_MPSkillOpt.MpsStickMastery = iSkillValue;

  017bc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017bf	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  017c2	d9 98 f0 26 00
	00		 fstp	 DWORD PTR [eax+9968]

; 708  : 		break;

  017c8	e9 bd 00 00 00	 jmp	 $LN77@AddPassive
$LN14@AddPassive:

; 709  : 	case 468:	//OK
; 710  : 		lpObj->m_MPSkillOpt.MpsTomeMastery = iSkillValue;

  017cd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017d0	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  017d3	d9 98 f4 26 00
	00		 fstp	 DWORD PTR [eax+9972]

; 711  : 		break;

  017d9	e9 ac 00 00 00	 jmp	 $LN77@AddPassive
$LN13@AddPassive:

; 712  : 	case 471:	//OK
; 713  : 		lpObj->m_MPSkillOpt.MpsMinWizCurseInc = iSkillValue;

  017de	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017e1	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  017e4	d9 98 00 27 00
	00		 fstp	 DWORD PTR [eax+9984]

; 714  : 		break;

  017ea	e9 9b 00 00 00	 jmp	 $LN77@AddPassive
$LN12@AddPassive:

; 715  : 	case 526:	//OK
; 716  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr1 = iSkillValue;

  017ef	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  017f2	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  017f5	d9 98 04 27 00
	00		 fstp	 DWORD PTR [eax+9988]

; 717  : 		break;

  017fb	e9 8a 00 00 00	 jmp	 $LN77@AddPassive
$LN11@AddPassive:

; 718  : 	case 530:	//OK
; 719  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr2 = iSkillValue;

  01800	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01803	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01806	d9 98 08 27 00
	00		 fstp	 DWORD PTR [eax+9992]

; 720  : 		break;

  0180c	eb 7c		 jmp	 SHORT $LN77@AddPassive
$LN10@AddPassive:

; 721  : 	case 534:	//OK
; 722  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr3 = iSkillValue;

  0180e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01811	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01814	d9 98 0c 27 00
	00		 fstp	 DWORD PTR [eax+9996]

; 723  : 		break;

  0181a	eb 6e		 jmp	 SHORT $LN77@AddPassive
$LN9@AddPassive:

; 724  : 	case 527:	//OK
; 725  : 		lpObj->m_MPSkillOpt.MpsScepterStrength = iSkillValue;

  0181c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0181f	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01822	d9 98 10 27 00
	00		 fstp	 DWORD PTR [eax+10000]

; 726  : 		break;

  01828	eb 60		 jmp	 SHORT $LN77@AddPassive
$LN8@AddPassive:

; 727  : 	case 531:	//OK
; 728  : 		lpObj->m_MPSkillOpt.MpsScepterMastery = iSkillValue;

  0182a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0182d	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01830	d9 98 14 27 00
	00		 fstp	 DWORD PTR [eax+10004]

; 729  : 		break;

  01836	eb 52		 jmp	 SHORT $LN77@AddPassive
$LN7@AddPassive:

; 730  : 	case 528:	//OK
; 731  : 		lpObj->m_MPSkillOpt.MpsShieldStrength3 = iSkillValue;

  01838	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0183b	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0183e	d9 98 18 27 00
	00		 fstp	 DWORD PTR [eax+10008]

; 732  : 		break;

  01844	eb 44		 jmp	 SHORT $LN77@AddPassive
$LN6@AddPassive:

; 733  : 	case 532:	//OK
; 734  : 		lpObj->m_MPSkillOpt.MpsShieldMastery3 = iSkillValue;

  01846	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01849	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0184c	d9 98 1c 27 00
	00		 fstp	 DWORD PTR [eax+10012]

; 735  : 		break;

  01852	eb 36		 jmp	 SHORT $LN77@AddPassive
$LN5@AddPassive:

; 736  : 	case 529:	//OK
; 737  : 		lpObj->m_MPSkillOpt.MpsUseScepterPetStr = iSkillValue;

  01854	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01857	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  0185a	d9 98 20 27 00
	00		 fstp	 DWORD PTR [eax+10016]

; 738  : 		break;

  01860	eb 28		 jmp	 SHORT $LN77@AddPassive
$LN4@AddPassive:

; 739  : 	case 533:	//OK
; 740  : 		lpObj->m_MPSkillOpt.MpsCommandAttackInc = iSkillValue;

  01862	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01865	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01868	d9 98 24 27 00
	00		 fstp	 DWORD PTR [eax+10020]

; 741  : 		break;

  0186e	eb 1a		 jmp	 SHORT $LN77@AddPassive
$LN3@AddPassive:

; 742  : 	case 568:	//OK
; 743  : 		lpObj->m_MPSkillOpt.MpsFistStrength = iSkillValue;

  01870	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01873	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01876	d9 98 94 27 00
	00		 fstp	 DWORD PTR [eax+10132]

; 744  : 		break;

  0187c	eb 0c		 jmp	 SHORT $LN77@AddPassive
$LN2@AddPassive:

; 745  : 	case 571:	//OK
; 746  : 		lpObj->m_MPSkillOpt.MpsFistMastery = iSkillValue;

  0187e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01881	d9 45 f0	 fld	 DWORD PTR _iSkillValue$[ebp]
  01884	d9 98 98 27 00
	00		 fstp	 DWORD PTR [eax+10136]
$LN1@AddPassive:
$LN77@AddPassive:
$LN81@AddPassive:

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  0188a	5f		 pop	 edi
  0188b	5e		 pop	 esi
  0188c	5b		 pop	 ebx
  0188d	8b e5		 mov	 esp, ebp
  0188f	5d		 pop	 ebp
  01890	c2 0c 00	 ret	 12			; 0000000cH
  01893	90		 npad	 1
$LN84@AddPassive:
  01894	00 00 00 00	 DD	 $LN73@AddPassive
  01898	00 00 00 00	 DD	 $LN74@AddPassive
  0189c	00 00 00 00	 DD	 $LN56@AddPassive
  018a0	00 00 00 00	 DD	 $LN58@AddPassive
  018a4	00 00 00 00	 DD	 $LN70@AddPassive
  018a8	00 00 00 00	 DD	 $LN72@AddPassive
  018ac	00 00 00 00	 DD	 $LN55@AddPassive
  018b0	00 00 00 00	 DD	 $LN67@AddPassive
  018b4	00 00 00 00	 DD	 $LN69@AddPassive
  018b8	00 00 00 00	 DD	 $LN65@AddPassive
  018bc	00 00 00 00	 DD	 $LN57@AddPassive
  018c0	00 00 00 00	 DD	 $LN68@AddPassive
  018c4	00 00 00 00	 DD	 $LN71@AddPassive
  018c8	00 00 00 00	 DD	 $LN66@AddPassive
  018cc	00 00 00 00	 DD	 $LN76@AddPassive
  018d0	00 00 00 00	 DD	 $LN64@AddPassive
  018d4	00 00 00 00	 DD	 $LN50@AddPassive
  018d8	00 00 00 00	 DD	 $LN63@AddPassive
  018dc	00 00 00 00	 DD	 $LN62@AddPassive
  018e0	00 00 00 00	 DD	 $LN75@AddPassive
  018e4	00 00 00 00	 DD	 $LN49@AddPassive
  018e8	00 00 00 00	 DD	 $LN48@AddPassive
  018ec	00 00 00 00	 DD	 $LN47@AddPassive
  018f0	00 00 00 00	 DD	 $LN46@AddPassive
  018f4	00 00 00 00	 DD	 $LN45@AddPassive
  018f8	00 00 00 00	 DD	 $LN44@AddPassive
  018fc	00 00 00 00	 DD	 $LN43@AddPassive
  01900	00 00 00 00	 DD	 $LN42@AddPassive
  01904	00 00 00 00	 DD	 $LN54@AddPassive
  01908	00 00 00 00	 DD	 $LN59@AddPassive
  0190c	00 00 00 00	 DD	 $LN60@AddPassive
  01910	00 00 00 00	 DD	 $LN26@AddPassive
  01914	00 00 00 00	 DD	 $LN61@AddPassive
  01918	00 00 00 00	 DD	 $LN25@AddPassive
  0191c	00 00 00 00	 DD	 $LN41@AddPassive
  01920	00 00 00 00	 DD	 $LN40@AddPassive
  01924	00 00 00 00	 DD	 $LN39@AddPassive
  01928	00 00 00 00	 DD	 $LN38@AddPassive
  0192c	00 00 00 00	 DD	 $LN37@AddPassive
  01930	00 00 00 00	 DD	 $LN36@AddPassive
  01934	00 00 00 00	 DD	 $LN35@AddPassive
  01938	00 00 00 00	 DD	 $LN52@AddPassive
  0193c	00 00 00 00	 DD	 $LN53@AddPassive
  01940	00 00 00 00	 DD	 $LN29@AddPassive
  01944	00 00 00 00	 DD	 $LN28@AddPassive
  01948	00 00 00 00	 DD	 $LN30@AddPassive
  0194c	00 00 00 00	 DD	 $LN27@AddPassive
  01950	00 00 00 00	 DD	 $LN34@AddPassive
  01954	00 00 00 00	 DD	 $LN32@AddPassive
  01958	00 00 00 00	 DD	 $LN33@AddPassive
  0195c	00 00 00 00	 DD	 $LN31@AddPassive
  01960	00 00 00 00	 DD	 $LN24@AddPassive
  01964	00 00 00 00	 DD	 $LN23@AddPassive
  01968	00 00 00 00	 DD	 $LN22@AddPassive
  0196c	00 00 00 00	 DD	 $LN21@AddPassive
  01970	00 00 00 00	 DD	 $LN20@AddPassive
  01974	00 00 00 00	 DD	 $LN19@AddPassive
  01978	00 00 00 00	 DD	 $LN18@AddPassive
  0197c	00 00 00 00	 DD	 $LN17@AddPassive
  01980	00 00 00 00	 DD	 $LN16@AddPassive
  01984	00 00 00 00	 DD	 $LN15@AddPassive
  01988	00 00 00 00	 DD	 $LN14@AddPassive
  0198c	00 00 00 00	 DD	 $LN13@AddPassive
  01990	00 00 00 00	 DD	 $LN12@AddPassive
  01994	00 00 00 00	 DD	 $LN9@AddPassive
  01998	00 00 00 00	 DD	 $LN7@AddPassive
  0199c	00 00 00 00	 DD	 $LN5@AddPassive
  019a0	00 00 00 00	 DD	 $LN11@AddPassive
  019a4	00 00 00 00	 DD	 $LN8@AddPassive
  019a8	00 00 00 00	 DD	 $LN6@AddPassive
  019ac	00 00 00 00	 DD	 $LN4@AddPassive
  019b0	00 00 00 00	 DD	 $LN10@AddPassive
  019b4	00 00 00 00	 DD	 $LN51@AddPassive
  019b8	00 00 00 00	 DD	 $LN3@AddPassive
  019bc	00 00 00 00	 DD	 $LN2@AddPassive
  019c0	00 00 00 00	 DD	 $LN1@AddPassive
$LN83@AddPassive:
  019c4	00		 DB	 0
  019c5	01		 DB	 1
  019c6	02		 DB	 2
  019c7	03		 DB	 3
  019c8	04		 DB	 4
  019c9	05		 DB	 5
  019ca	06		 DB	 6
  019cb	07		 DB	 7
  019cc	08		 DB	 8
  019cd	09		 DB	 9
  019ce	0a		 DB	 10			; 0000000aH
  019cf	0b		 DB	 11			; 0000000bH
  019d0	0c		 DB	 12			; 0000000cH
  019d1	0d		 DB	 13			; 0000000dH
  019d2	4b		 DB	 75			; 0000004bH
  019d3	4b		 DB	 75			; 0000004bH
  019d4	4b		 DB	 75			; 0000004bH
  019d5	4b		 DB	 75			; 0000004bH
  019d6	4b		 DB	 75			; 0000004bH
  019d7	4b		 DB	 75			; 0000004bH
  019d8	4b		 DB	 75			; 0000004bH
  019d9	4b		 DB	 75			; 0000004bH
  019da	4b		 DB	 75			; 0000004bH
  019db	4b		 DB	 75			; 0000004bH
  019dc	4b		 DB	 75			; 0000004bH
  019dd	0e		 DB	 14			; 0000000eH
  019de	4b		 DB	 75			; 0000004bH
  019df	4b		 DB	 75			; 0000004bH
  019e0	4b		 DB	 75			; 0000004bH
  019e1	4b		 DB	 75			; 0000004bH
  019e2	4b		 DB	 75			; 0000004bH
  019e3	4b		 DB	 75			; 0000004bH
  019e4	4b		 DB	 75			; 0000004bH
  019e5	4b		 DB	 75			; 0000004bH
  019e6	0f		 DB	 15			; 0000000fH
  019e7	10		 DB	 16			; 00000010H
  019e8	4b		 DB	 75			; 0000004bH
  019e9	4b		 DB	 75			; 0000004bH
  019ea	11		 DB	 17			; 00000011H
  019eb	4b		 DB	 75			; 0000004bH
  019ec	4b		 DB	 75			; 0000004bH
  019ed	12		 DB	 18			; 00000012H
  019ee	4b		 DB	 75			; 0000004bH
  019ef	4b		 DB	 75			; 0000004bH
  019f0	4b		 DB	 75			; 0000004bH
  019f1	4b		 DB	 75			; 0000004bH
  019f2	4b		 DB	 75			; 0000004bH
  019f3	13		 DB	 19			; 00000013H
  019f4	14		 DB	 20			; 00000014H
  019f5	15		 DB	 21			; 00000015H
  019f6	16		 DB	 22			; 00000016H
  019f7	17		 DB	 23			; 00000017H
  019f8	18		 DB	 24			; 00000018H
  019f9	19		 DB	 25			; 00000019H
  019fa	1a		 DB	 26			; 0000001aH
  019fb	1b		 DB	 27			; 0000001bH
  019fc	4b		 DB	 75			; 0000004bH
  019fd	1c		 DB	 28			; 0000001cH
  019fe	1d		 DB	 29			; 0000001dH
  019ff	1e		 DB	 30			; 0000001eH
  01a00	4b		 DB	 75			; 0000004bH
  01a01	1f		 DB	 31			; 0000001fH
  01a02	20		 DB	 32			; 00000020H
  01a03	4b		 DB	 75			; 0000004bH
  01a04	21		 DB	 33			; 00000021H
  01a05	4b		 DB	 75			; 0000004bH
  01a06	4b		 DB	 75			; 0000004bH
  01a07	4b		 DB	 75			; 0000004bH
  01a08	4b		 DB	 75			; 0000004bH
  01a09	4b		 DB	 75			; 0000004bH
  01a0a	4b		 DB	 75			; 0000004bH
  01a0b	4b		 DB	 75			; 0000004bH
  01a0c	4b		 DB	 75			; 0000004bH
  01a0d	4b		 DB	 75			; 0000004bH
  01a0e	4b		 DB	 75			; 0000004bH
  01a0f	4b		 DB	 75			; 0000004bH
  01a10	4b		 DB	 75			; 0000004bH
  01a11	4b		 DB	 75			; 0000004bH
  01a12	4b		 DB	 75			; 0000004bH
  01a13	4b		 DB	 75			; 0000004bH
  01a14	4b		 DB	 75			; 0000004bH
  01a15	4b		 DB	 75			; 0000004bH
  01a16	4b		 DB	 75			; 0000004bH
  01a17	4b		 DB	 75			; 0000004bH
  01a18	4b		 DB	 75			; 0000004bH
  01a19	4b		 DB	 75			; 0000004bH
  01a1a	22		 DB	 34			; 00000022H
  01a1b	4b		 DB	 75			; 0000004bH
  01a1c	4b		 DB	 75			; 0000004bH
  01a1d	4b		 DB	 75			; 0000004bH
  01a1e	4b		 DB	 75			; 0000004bH
  01a1f	4b		 DB	 75			; 0000004bH
  01a20	4b		 DB	 75			; 0000004bH
  01a21	4b		 DB	 75			; 0000004bH
  01a22	4b		 DB	 75			; 0000004bH
  01a23	4b		 DB	 75			; 0000004bH
  01a24	4b		 DB	 75			; 0000004bH
  01a25	23		 DB	 35			; 00000023H
  01a26	24		 DB	 36			; 00000024H
  01a27	25		 DB	 37			; 00000025H
  01a28	26		 DB	 38			; 00000026H
  01a29	27		 DB	 39			; 00000027H
  01a2a	28		 DB	 40			; 00000028H
  01a2b	4b		 DB	 75			; 0000004bH
  01a2c	4b		 DB	 75			; 0000004bH
  01a2d	29		 DB	 41			; 00000029H
  01a2e	4b		 DB	 75			; 0000004bH
  01a2f	2a		 DB	 42			; 0000002aH
  01a30	4b		 DB	 75			; 0000004bH
  01a31	4b		 DB	 75			; 0000004bH
  01a32	4b		 DB	 75			; 0000004bH
  01a33	4b		 DB	 75			; 0000004bH
  01a34	4b		 DB	 75			; 0000004bH
  01a35	4b		 DB	 75			; 0000004bH
  01a36	4b		 DB	 75			; 0000004bH
  01a37	2b		 DB	 43			; 0000002bH
  01a38	4b		 DB	 75			; 0000004bH
  01a39	4b		 DB	 75			; 0000004bH
  01a3a	4b		 DB	 75			; 0000004bH
  01a3b	2c		 DB	 44			; 0000002cH
  01a3c	4b		 DB	 75			; 0000004bH
  01a3d	2d		 DB	 45			; 0000002dH
  01a3e	4b		 DB	 75			; 0000004bH
  01a3f	4b		 DB	 75			; 0000004bH
  01a40	4b		 DB	 75			; 0000004bH
  01a41	4b		 DB	 75			; 0000004bH
  01a42	4b		 DB	 75			; 0000004bH
  01a43	4b		 DB	 75			; 0000004bH
  01a44	2e		 DB	 46			; 0000002eH
  01a45	4b		 DB	 75			; 0000004bH
  01a46	4b		 DB	 75			; 0000004bH
  01a47	4b		 DB	 75			; 0000004bH
  01a48	4b		 DB	 75			; 0000004bH
  01a49	4b		 DB	 75			; 0000004bH
  01a4a	4b		 DB	 75			; 0000004bH
  01a4b	2f		 DB	 47			; 0000002fH
  01a4c	30		 DB	 48			; 00000030H
  01a4d	4b		 DB	 75			; 0000004bH
  01a4e	31		 DB	 49			; 00000031H
  01a4f	32		 DB	 50			; 00000032H
  01a50	4b		 DB	 75			; 0000004bH
  01a51	4b		 DB	 75			; 0000004bH
  01a52	1f		 DB	 31			; 0000001fH
  01a53	21		 DB	 33			; 00000021H
  01a54	4b		 DB	 75			; 0000004bH
  01a55	4b		 DB	 75			; 0000004bH
  01a56	4b		 DB	 75			; 0000004bH
  01a57	4b		 DB	 75			; 0000004bH
  01a58	33		 DB	 51			; 00000033H
  01a59	34		 DB	 52			; 00000034H
  01a5a	35		 DB	 53			; 00000035H
  01a5b	36		 DB	 54			; 00000036H
  01a5c	37		 DB	 55			; 00000037H
  01a5d	38		 DB	 56			; 00000038H
  01a5e	4b		 DB	 75			; 0000004bH
  01a5f	4b		 DB	 75			; 0000004bH
  01a60	4b		 DB	 75			; 0000004bH
  01a61	39		 DB	 57			; 00000039H
  01a62	4b		 DB	 75			; 0000004bH
  01a63	4b		 DB	 75			; 0000004bH
  01a64	4b		 DB	 75			; 0000004bH
  01a65	4b		 DB	 75			; 0000004bH
  01a66	4b		 DB	 75			; 0000004bH
  01a67	4b		 DB	 75			; 0000004bH
  01a68	4b		 DB	 75			; 0000004bH
  01a69	3a		 DB	 58			; 0000003aH
  01a6a	3b		 DB	 59			; 0000003bH
  01a6b	3c		 DB	 60			; 0000003cH
  01a6c	3d		 DB	 61			; 0000003dH
  01a6d	4b		 DB	 75			; 0000004bH
  01a6e	4b		 DB	 75			; 0000004bH
  01a6f	3e		 DB	 62			; 0000003eH
  01a70	4b		 DB	 75			; 0000004bH
  01a71	4b		 DB	 75			; 0000004bH
  01a72	4b		 DB	 75			; 0000004bH
  01a73	4b		 DB	 75			; 0000004bH
  01a74	4b		 DB	 75			; 0000004bH
  01a75	4b		 DB	 75			; 0000004bH
  01a76	4b		 DB	 75			; 0000004bH
  01a77	4b		 DB	 75			; 0000004bH
  01a78	4b		 DB	 75			; 0000004bH
  01a79	4b		 DB	 75			; 0000004bH
  01a7a	4b		 DB	 75			; 0000004bH
  01a7b	4b		 DB	 75			; 0000004bH
  01a7c	4b		 DB	 75			; 0000004bH
  01a7d	10		 DB	 16			; 00000010H
  01a7e	4b		 DB	 75			; 0000004bH
  01a7f	4b		 DB	 75			; 0000004bH
  01a80	22		 DB	 34			; 00000022H
  01a81	4b		 DB	 75			; 0000004bH
  01a82	4b		 DB	 75			; 0000004bH
  01a83	4b		 DB	 75			; 0000004bH
  01a84	4b		 DB	 75			; 0000004bH
  01a85	4b		 DB	 75			; 0000004bH
  01a86	4b		 DB	 75			; 0000004bH
  01a87	4b		 DB	 75			; 0000004bH
  01a88	4b		 DB	 75			; 0000004bH
  01a89	4b		 DB	 75			; 0000004bH
  01a8a	4b		 DB	 75			; 0000004bH
  01a8b	4b		 DB	 75			; 0000004bH
  01a8c	4b		 DB	 75			; 0000004bH
  01a8d	4b		 DB	 75			; 0000004bH
  01a8e	4b		 DB	 75			; 0000004bH
  01a8f	4b		 DB	 75			; 0000004bH
  01a90	4b		 DB	 75			; 0000004bH
  01a91	4b		 DB	 75			; 0000004bH
  01a92	4b		 DB	 75			; 0000004bH
  01a93	4b		 DB	 75			; 0000004bH
  01a94	4b		 DB	 75			; 0000004bH
  01a95	4b		 DB	 75			; 0000004bH
  01a96	4b		 DB	 75			; 0000004bH
  01a97	4b		 DB	 75			; 0000004bH
  01a98	4b		 DB	 75			; 0000004bH
  01a99	10		 DB	 16			; 00000010H
  01a9a	4b		 DB	 75			; 0000004bH
  01a9b	4b		 DB	 75			; 0000004bH
  01a9c	4b		 DB	 75			; 0000004bH
  01a9d	4b		 DB	 75			; 0000004bH
  01a9e	4b		 DB	 75			; 0000004bH
  01a9f	4b		 DB	 75			; 0000004bH
  01aa0	4b		 DB	 75			; 0000004bH
  01aa1	4b		 DB	 75			; 0000004bH
  01aa2	4b		 DB	 75			; 0000004bH
  01aa3	4b		 DB	 75			; 0000004bH
  01aa4	4b		 DB	 75			; 0000004bH
  01aa5	4b		 DB	 75			; 0000004bH
  01aa6	3f		 DB	 63			; 0000003fH
  01aa7	40		 DB	 64			; 00000040H
  01aa8	41		 DB	 65			; 00000041H
  01aa9	42		 DB	 66			; 00000042H
  01aaa	43		 DB	 67			; 00000043H
  01aab	44		 DB	 68			; 00000044H
  01aac	45		 DB	 69			; 00000045H
  01aad	46		 DB	 70			; 00000046H
  01aae	47		 DB	 71			; 00000047H
  01aaf	48		 DB	 72			; 00000048H
  01ab0	4b		 DB	 75			; 0000004bH
  01ab1	4b		 DB	 75			; 0000004bH
  01ab2	4b		 DB	 75			; 0000004bH
  01ab3	4b		 DB	 75			; 0000004bH
  01ab4	4b		 DB	 75			; 0000004bH
  01ab5	4b		 DB	 75			; 0000004bH
  01ab6	4b		 DB	 75			; 0000004bH
  01ab7	4b		 DB	 75			; 0000004bH
  01ab8	4b		 DB	 75			; 0000004bH
  01ab9	4b		 DB	 75			; 0000004bH
  01aba	4b		 DB	 75			; 0000004bH
  01abb	4b		 DB	 75			; 0000004bH
  01abc	4b		 DB	 75			; 0000004bH
  01abd	4b		 DB	 75			; 0000004bH
  01abe	4b		 DB	 75			; 0000004bH
  01abf	4b		 DB	 75			; 0000004bH
  01ac0	4b		 DB	 75			; 0000004bH
  01ac1	4b		 DB	 75			; 0000004bH
  01ac2	4b		 DB	 75			; 0000004bH
  01ac3	4b		 DB	 75			; 0000004bH
  01ac4	4b		 DB	 75			; 0000004bH
  01ac5	10		 DB	 16			; 00000010H
  01ac6	4b		 DB	 75			; 0000004bH
  01ac7	4b		 DB	 75			; 0000004bH
  01ac8	4b		 DB	 75			; 0000004bH
  01ac9	4b		 DB	 75			; 0000004bH
  01aca	4b		 DB	 75			; 0000004bH
  01acb	4b		 DB	 75			; 0000004bH
  01acc	4b		 DB	 75			; 0000004bH
  01acd	4b		 DB	 75			; 0000004bH
  01ace	4b		 DB	 75			; 0000004bH
  01acf	4b		 DB	 75			; 0000004bH
  01ad0	49		 DB	 73			; 00000049H
  01ad1	4b		 DB	 75			; 0000004bH
  01ad2	4b		 DB	 75			; 0000004bH
  01ad3	4a		 DB	 74			; 0000004aH
  01ad4	4b		 DB	 75			; 0000004bH
  01ad5	4b		 DB	 75			; 0000004bH
  01ad6	4b		 DB	 75			; 0000004bH
  01ad7	4b		 DB	 75			; 0000004bH
  01ad8	4b		 DB	 75			; 0000004bH
  01ad9	4b		 DB	 75			; 0000004bH
  01ada	00		 DB	 0
  01adb	01		 DB	 1
  01adc	02		 DB	 2
  01add	03		 DB	 3
  01ade	04		 DB	 4
  01adf	05		 DB	 5
  01ae0	06		 DB	 6
  01ae1	07		 DB	 7
  01ae2	08		 DB	 8
  01ae3	09		 DB	 9
  01ae4	0a		 DB	 10			; 0000000aH
  01ae5	0b		 DB	 11			; 0000000bH
  01ae6	0c		 DB	 12			; 0000000cH
  01ae7	0d		 DB	 13			; 0000000dH
  01ae8	4b		 DB	 75			; 0000004bH
  01ae9	4b		 DB	 75			; 0000004bH
  01aea	4b		 DB	 75			; 0000004bH
  01aeb	4b		 DB	 75			; 0000004bH
  01aec	4b		 DB	 75			; 0000004bH
  01aed	4b		 DB	 75			; 0000004bH
  01aee	4b		 DB	 75			; 0000004bH
  01aef	0e		 DB	 14			; 0000000eH
  01af0	0f		 DB	 15			; 0000000fH
  01af1	11		 DB	 17			; 00000011H
  01af2	4b		 DB	 75			; 0000004bH
  01af3	13		 DB	 19			; 00000013H
  01af4	1c		 DB	 28			; 0000001cH
  01af5	1d		 DB	 29			; 0000001dH
  01af6	1e		 DB	 30			; 0000001eH
  01af7	1f		 DB	 31			; 0000001fH
  01af8	20		 DB	 32			; 00000020H
?AddPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::AddPassiveSkill
_TEXT	ENDS
PUBLIC	?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
PUBLIC	?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
PUBLIC	?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint
PUBLIC	?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
PUBLIC	?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
PUBLIC	?__LINE__Var@?1??CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z@4JA ; `CMasterLevelSkillTreeSystem::CheckSkillCondition'::`2'::__LINE__Var
PUBLIC	?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckSkillCondition
EXTRN	?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterLevelSystem::CheckIsMasterLevelCharacter
EXTRN	?g_MasterLevelSystem@@3VCMasterLevelSystem@@A:BYTE ; g_MasterLevelSystem
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?GCResultSend@@YAXHEE@Z:PROC			; GCResultSend
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
;	COMDAT ?__LINE__Var@?1??CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z@4JA DD 0336H ; `CMasterLevelSkillTreeSystem::CheckSkillCondition'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_iReqMLPoint$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iMLSkill$ = 12						; size = 4
_iSkillLevel$ = 16					; size = 4
?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::CheckSkillCondition
; _this$ = ecx

; 822  : {

  01b00	55		 push	 ebp
  01b01	8b ec		 mov	 ebp, esp
  01b03	83 ec 48	 sub	 esp, 72			; 00000048H
  01b06	53		 push	 ebx
  01b07	56		 push	 esi
  01b08	57		 push	 edi
  01b09	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 823  : 	if( !gObjIsConnected(lpObj) )

  01b0c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b0f	50		 push	 eax
  01b10	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  01b15	83 c4 04	 add	 esp, 4
  01b18	85 c0		 test	 eax, eax
  01b1a	75 1c		 jne	 SHORT $LN11@CheckSkill

; 824  : 	{
; 825  : 		GCResultSend(lpObj->m_Index,0x51,3);

  01b1c	6a 03		 push	 3
  01b1e	6a 51		 push	 81			; 00000051H
  01b20	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b23	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b25	51		 push	 ecx
  01b26	e8 00 00 00 00	 call	 ?GCResultSend@@YAXHEE@Z	; GCResultSend
  01b2b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 826  : 		return 2;

  01b2e	b8 02 00 00 00	 mov	 eax, 2
  01b33	e9 1c 01 00 00	 jmp	 $LN12@CheckSkill
$LN11@CheckSkill:

; 827  : 	}
; 828  : 
; 829  : 	if ( iMLSkill <0 || iMLSkill > MAX_SKILL -1 )

  01b38	83 7d 0c 00	 cmp	 DWORD PTR _iMLSkill$[ebp], 0
  01b3c	7c 09		 jl	 SHORT $LN9@CheckSkill
  01b3e	81 7d 0c bb 02
	00 00		 cmp	 DWORD PTR _iMLSkill$[ebp], 699 ; 000002bbH
  01b45	7e 30		 jle	 SHORT $LN10@CheckSkill
$LN9@CheckSkill:

; 830  : 	{
; 831  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  01b47	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z@4JA
  01b4c	83 c0 09	 add	 eax, 9
  01b4f	50		 push	 eax
  01b50	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@LKIJBIMC@d?3?2projects?2exteam6?43?2source?2gam@
  01b55	68 c9 01 00 00	 push	 457			; 000001c9H
  01b5a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01b5f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01b64	50		 push	 eax
  01b65	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  01b6a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 832  : 		return 3;

  01b6d	b8 03 00 00 00	 mov	 eax, 3
  01b72	e9 dd 00 00 00	 jmp	 $LN12@CheckSkill
$LN10@CheckSkill:

; 833  : 	}
; 834  : 
; 835  : 	if( !g_MasterLevelSystem.CheckIsMasterLevelCharacter(lpObj) )

  01b77	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b7a	50		 push	 eax
  01b7b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  01b80	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  01b85	85 c0		 test	 eax, eax
  01b87	75 0a		 jne	 SHORT $LN8@CheckSkill

; 836  : 		return 2;

  01b89	b8 02 00 00 00	 mov	 eax, 2
  01b8e	e9 c1 00 00 00	 jmp	 $LN12@CheckSkill
$LN8@CheckSkill:

; 837  : 
; 838  : 	if( !this->CheckRequireStatus(iMLSkill) )

  01b93	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01b96	50		 push	 eax
  01b97	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b9a	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  01b9f	85 c0		 test	 eax, eax
  01ba1	75 0a		 jne	 SHORT $LN7@CheckSkill

; 839  : 		return 4;

  01ba3	b8 04 00 00 00	 mov	 eax, 4
  01ba8	e9 a7 00 00 00	 jmp	 $LN12@CheckSkill
$LN7@CheckSkill:

; 840  : 
; 841  : 	if( this->GetMaxPointOfMasterSkill(lpObj->Class,iMLSkill) < iSkillLevel )

  01bad	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01bb0	50		 push	 eax
  01bb1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01bb4	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  01bbb	52		 push	 edx
  01bbc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bbf	e8 00 00 00 00	 call	 ?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
  01bc4	3b 45 10	 cmp	 eax, DWORD PTR _iSkillLevel$[ebp]
  01bc7	7d 0a		 jge	 SHORT $LN6@CheckSkill

; 842  : 		return 4;

  01bc9	b8 04 00 00 00	 mov	 eax, 4
  01bce	e9 81 00 00 00	 jmp	 $LN12@CheckSkill
$LN6@CheckSkill:

; 843  : 
; 844  : 	int iReqMLPoint = this->GetSkillReqMLPoint(lpObj->Class,iMLSkill);

  01bd3	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01bd6	50		 push	 eax
  01bd7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01bda	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  01be1	52		 push	 edx
  01be2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01be5	e8 00 00 00 00	 call	 ?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint
  01bea	89 45 f8	 mov	 DWORD PTR _iReqMLPoint$[ebp], eax

; 845  : 
; 846  : 	if( iReqMLPoint < 0 )

  01bed	83 7d f8 00	 cmp	 DWORD PTR _iReqMLPoint$[ebp], 0
  01bf1	7d 07		 jge	 SHORT $LN5@CheckSkill

; 847  : 		return 4;

  01bf3	b8 04 00 00 00	 mov	 eax, 4
  01bf8	eb 5a		 jmp	 SHORT $LN12@CheckSkill
$LN5@CheckSkill:

; 848  : 
; 849  : 	if( lpObj->MLPoint < iReqMLPoint )

  01bfa	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01bfd	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  01c03	3b 4d f8	 cmp	 ecx, DWORD PTR _iReqMLPoint$[ebp]
  01c06	7d 07		 jge	 SHORT $LN4@CheckSkill

; 850  : 		return 4;

  01c08	b8 04 00 00 00	 mov	 eax, 4
  01c0d	eb 45		 jmp	 SHORT $LN12@CheckSkill
$LN4@CheckSkill:

; 851  : 
; 852  : 	if( iSkillLevel == 1 )

  01c0f	83 7d 10 01	 cmp	 DWORD PTR _iSkillLevel$[ebp], 1
  01c13	75 3a		 jne	 SHORT $LN3@CheckSkill

; 853  : 	{
; 854  : 		if( !this->CheckCompleteBrandOfSkill(lpObj,iMLSkill) )

  01c15	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01c18	50		 push	 eax
  01c19	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01c1c	51		 push	 ecx
  01c1d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c20	e8 00 00 00 00	 call	 ?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
  01c25	85 c0		 test	 eax, eax
  01c27	75 07		 jne	 SHORT $LN2@CheckSkill

; 855  : 			return 4;

  01c29	b8 04 00 00 00	 mov	 eax, 4
  01c2e	eb 24		 jmp	 SHORT $LN12@CheckSkill
$LN2@CheckSkill:

; 856  : 
; 857  : 		if( !this->CheckPreviousRankSkill(lpObj,iMLSkill,iSkillLevel) )

  01c30	8b 45 10	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  01c33	50		 push	 eax
  01c34	8b 4d 0c	 mov	 ecx, DWORD PTR _iMLSkill$[ebp]
  01c37	51		 push	 ecx
  01c38	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01c3b	52		 push	 edx
  01c3c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c3f	e8 00 00 00 00	 call	 ?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
  01c44	85 c0		 test	 eax, eax
  01c46	75 07		 jne	 SHORT $LN3@CheckSkill

; 858  : 			return 4;

  01c48	b8 04 00 00 00	 mov	 eax, 4
  01c4d	eb 05		 jmp	 SHORT $LN12@CheckSkill
$LN3@CheckSkill:

; 859  : 	}
; 860  : 
; 861  : return 1;

  01c4f	b8 01 00 00 00	 mov	 eax, 1
$LN12@CheckSkill:

; 862  : }

  01c54	5f		 pop	 edi
  01c55	5e		 pop	 esi
  01c56	5b		 pop	 ebx
  01c57	8b e5		 mov	 esp, ebp
  01c59	5d		 pop	 ebp
  01c5a	c2 0c 00	 ret	 12			; 0000000cH
?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckSkillCondition
_TEXT	ENDS
PUBLIC	?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill2
PUBLIC	?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
EXTRN	?IsMagic@CMagicInf@@QAEHXZ:PROC			; CMagicInf::IsMagic
EXTRN	?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z:PROC ; CMagicDamage::GetSkillReqBrandOfSkill
EXTRN	?GetSkillUseType@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillUseType
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iSum$ = -48						; size = 4
_iCount$234529 = -44					; size = 4
_iCompleteSkill2$ = -40					; size = 4
_iCount$234521 = -36					; size = 4
_iCompleteSkill1$ = -32					; size = 4
_iBrandOfSkill2$ = -28					; size = 4
_iBrandOfSkill1$ = -24					; size = 4
_iCount$234509 = -20					; size = 4
_iCompleteSkill$234507 = -16				; size = 4
_iBrandOfSkill$234506 = -12				; size = 2
_iSkillUseType$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iMLSkill$ = 12						; size = 4
?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
; _this$ = ecx

; 866  : {

  01c60	55		 push	 ebp
  01c61	8b ec		 mov	 ebp, esp
  01c63	83 ec 70	 sub	 esp, 112		; 00000070H
  01c66	53		 push	 ebx
  01c67	56		 push	 esi
  01c68	57		 push	 edi
  01c69	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 867  : 	int iSkillUseType = MagicDamageC.GetSkillUseType(iMLSkill);

  01c6c	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01c6f	50		 push	 eax
  01c70	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  01c75	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  01c7a	89 45 f8	 mov	 DWORD PTR _iSkillUseType$[ebp], eax

; 868  : 
; 869  : 	if( iSkillUseType == 4 )

  01c7d	83 7d f8 04	 cmp	 DWORD PTR _iSkillUseType$[ebp], 4
  01c81	0f 85 86 00 00
	00		 jne	 $LN28@CheckCompl

; 870  : 	{
; 871  : 		WORD iBrandOfSkill = MagicDamageC.GetSkillReqBrandOfSkill(iMLSkill);

  01c87	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01c8a	50		 push	 eax
  01c8b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  01c90	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  01c95	66 89 45 f4	 mov	 WORD PTR _iBrandOfSkill$234506[ebp], ax

; 872  : 		int iCompleteSkill = 0;

  01c99	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iCompleteSkill$234507[ebp], 0

; 873  : 
; 874  : 		if( iBrandOfSkill > 0 )

  01ca0	0f b7 45 f4	 movzx	 eax, WORD PTR _iBrandOfSkill$234506[ebp]
  01ca4	85 c0		 test	 eax, eax
  01ca6	7e 58		 jle	 SHORT $LN27@CheckCompl

; 875  : 		{
; 876  : 			for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  01ca8	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iCount$234509[ebp], 0
  01caf	eb 09		 jmp	 SHORT $LN26@CheckCompl
$LN25@CheckCompl:
  01cb1	8b 45 ec	 mov	 eax, DWORD PTR _iCount$234509[ebp]
  01cb4	83 c0 01	 add	 eax, 1
  01cb7	89 45 ec	 mov	 DWORD PTR _iCount$234509[ebp], eax
$LN26@CheckCompl:
  01cba	81 7d ec 96 00
	00 00		 cmp	 DWORD PTR _iCount$234509[ebp], 150 ; 00000096H
  01cc1	7d 3d		 jge	 SHORT $LN27@CheckCompl

; 877  : 			{
; 878  : 				if( lpObj->Magic[iCount].IsMagic() == TRUE )

  01cc3	8b 4d ec	 mov	 ecx, DWORD PTR _iCount$234509[ebp]
  01cc6	6b c9 18	 imul	 ecx, 24			; 00000018H
  01cc9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ccc	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  01cd2	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  01cd7	83 f8 01	 cmp	 eax, 1
  01cda	75 22		 jne	 SHORT $LN23@CheckCompl

; 879  : 				{
; 880  : 					if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill )

  01cdc	8b 45 ec	 mov	 eax, DWORD PTR _iCount$234509[ebp]
  01cdf	6b c0 18	 imul	 eax, 24			; 00000018H
  01ce2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01ce5	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  01ceb	0f b7 4d f4	 movzx	 ecx, WORD PTR _iBrandOfSkill$234506[ebp]
  01cef	39 4c 02 08	 cmp	 DWORD PTR [edx+eax+8], ecx
  01cf3	75 09		 jne	 SHORT $LN23@CheckCompl

; 881  : 					{
; 882  : 						iCompleteSkill = TRUE;

  01cf5	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _iCompleteSkill$234507[ebp], 1

; 883  : 						break;

  01cfc	eb 02		 jmp	 SHORT $LN27@CheckCompl
$LN23@CheckCompl:

; 884  : 					}
; 885  : 				}
; 886  : 			}

  01cfe	eb b1		 jmp	 SHORT $LN25@CheckCompl
$LN27@CheckCompl:

; 887  : 		}
; 888  : 
; 889  : 		if( iCompleteSkill == 0 )

  01d00	83 7d f0 00	 cmp	 DWORD PTR _iCompleteSkill$234507[ebp], 0
  01d04	75 07		 jne	 SHORT $LN28@CheckCompl

; 890  : 			return 0;

  01d06	33 c0		 xor	 eax, eax
  01d08	e9 90 01 00 00	 jmp	 $LN29@CheckCompl
$LN28@CheckCompl:

; 891  : 	}
; 892  : 
; 893  : 	int iBrandOfSkill1 = this->GetParentSkill1(lpObj->Class,iMLSkill);

  01d0d	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01d10	50		 push	 eax
  01d11	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01d14	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  01d1b	52		 push	 edx
  01d1c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d1f	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
  01d24	89 45 e8	 mov	 DWORD PTR _iBrandOfSkill1$[ebp], eax

; 894  : 	int iBrandOfSkill2 = this->GetParentSkill2(lpObj->Class,iMLSkill);

  01d27	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01d2a	50		 push	 eax
  01d2b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01d2e	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  01d35	52		 push	 edx
  01d36	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d39	e8 00 00 00 00	 call	 ?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill2
  01d3e	89 45 e4	 mov	 DWORD PTR _iBrandOfSkill2$[ebp], eax

; 895  : 
; 896  : 	if( iBrandOfSkill1 <= 0 && iBrandOfSkill2 <= 0 )

  01d41	83 7d e8 00	 cmp	 DWORD PTR _iBrandOfSkill1$[ebp], 0
  01d45	7f 10		 jg	 SHORT $LN20@CheckCompl
  01d47	83 7d e4 00	 cmp	 DWORD PTR _iBrandOfSkill2$[ebp], 0
  01d4b	7f 0a		 jg	 SHORT $LN20@CheckCompl

; 897  : 		return true;

  01d4d	b8 01 00 00 00	 mov	 eax, 1
  01d52	e9 46 01 00 00	 jmp	 $LN29@CheckCompl
$LN20@CheckCompl:

; 898  : 
; 899  : 	int iCompleteSkill1 = 0;

  01d57	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iCompleteSkill1$[ebp], 0

; 900  : 
; 901  : 	if( iBrandOfSkill1 > 0 )

  01d5e	83 7d e8 00	 cmp	 DWORD PTR _iBrandOfSkill1$[ebp], 0
  01d62	7e 70		 jle	 SHORT $LN19@CheckCompl

; 902  : 	{
; 903  : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  01d64	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iCount$234521[ebp], 0
  01d6b	eb 09		 jmp	 SHORT $LN18@CheckCompl
$LN17@CheckCompl:
  01d6d	8b 45 dc	 mov	 eax, DWORD PTR _iCount$234521[ebp]
  01d70	83 c0 01	 add	 eax, 1
  01d73	89 45 dc	 mov	 DWORD PTR _iCount$234521[ebp], eax
$LN18@CheckCompl:
  01d76	81 7d dc 96 00
	00 00		 cmp	 DWORD PTR _iCount$234521[ebp], 150 ; 00000096H
  01d7d	7d 55		 jge	 SHORT $LN19@CheckCompl

; 904  : 		{
; 905  : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  01d7f	8b 4d dc	 mov	 ecx, DWORD PTR _iCount$234521[ebp]
  01d82	6b c9 18	 imul	 ecx, 24			; 00000018H
  01d85	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01d88	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  01d8e	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  01d93	83 f8 01	 cmp	 eax, 1
  01d96	75 3a		 jne	 SHORT $LN15@CheckCompl

; 906  : 			{
; 907  : 				if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill1 &&
; 908  : 					lpObj->Magic[iCount].m_Level >= 10 )

  01d98	8b 45 dc	 mov	 eax, DWORD PTR _iCount$234521[ebp]
  01d9b	6b c0 18	 imul	 eax, 24			; 00000018H
  01d9e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01da1	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  01da7	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  01dab	3b 45 e8	 cmp	 eax, DWORD PTR _iBrandOfSkill1$[ebp]
  01dae	75 22		 jne	 SHORT $LN15@CheckCompl
  01db0	8b 45 dc	 mov	 eax, DWORD PTR _iCount$234521[ebp]
  01db3	6b c0 18	 imul	 eax, 24			; 00000018H
  01db6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01db9	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  01dbf	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  01dc4	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  01dc7	7c 09		 jl	 SHORT $LN15@CheckCompl

; 909  : 				{
; 910  : 					iCompleteSkill1 = TRUE;

  01dc9	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _iCompleteSkill1$[ebp], 1

; 911  : 					break;

  01dd0	eb 02		 jmp	 SHORT $LN19@CheckCompl
$LN15@CheckCompl:

; 912  : 				}
; 913  : 			}
; 914  : 		}

  01dd2	eb 99		 jmp	 SHORT $LN17@CheckCompl
$LN19@CheckCompl:

; 915  : 	}
; 916  : 
; 917  : 	int iCompleteSkill2 = 0;

  01dd4	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _iCompleteSkill2$[ebp], 0

; 918  : 
; 919  : 	if( iBrandOfSkill2 > 0 )

  01ddb	83 7d e4 00	 cmp	 DWORD PTR _iBrandOfSkill2$[ebp], 0
  01ddf	7e 70		 jle	 SHORT $LN13@CheckCompl

; 920  : 	{
; 921  : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  01de1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _iCount$234529[ebp], 0
  01de8	eb 09		 jmp	 SHORT $LN12@CheckCompl
$LN11@CheckCompl:
  01dea	8b 45 d4	 mov	 eax, DWORD PTR _iCount$234529[ebp]
  01ded	83 c0 01	 add	 eax, 1
  01df0	89 45 d4	 mov	 DWORD PTR _iCount$234529[ebp], eax
$LN12@CheckCompl:
  01df3	81 7d d4 96 00
	00 00		 cmp	 DWORD PTR _iCount$234529[ebp], 150 ; 00000096H
  01dfa	7d 55		 jge	 SHORT $LN13@CheckCompl

; 922  : 		{
; 923  : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  01dfc	8b 4d d4	 mov	 ecx, DWORD PTR _iCount$234529[ebp]
  01dff	6b c9 18	 imul	 ecx, 24			; 00000018H
  01e02	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01e05	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  01e0b	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  01e10	83 f8 01	 cmp	 eax, 1
  01e13	75 3a		 jne	 SHORT $LN9@CheckCompl

; 924  : 			{
; 925  : 				if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill2 &&
; 926  : 					lpObj->Magic[iCount].m_Level >= 10 )

  01e15	8b 45 d4	 mov	 eax, DWORD PTR _iCount$234529[ebp]
  01e18	6b c0 18	 imul	 eax, 24			; 00000018H
  01e1b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e1e	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  01e24	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  01e28	3b 45 e4	 cmp	 eax, DWORD PTR _iBrandOfSkill2$[ebp]
  01e2b	75 22		 jne	 SHORT $LN9@CheckCompl
  01e2d	8b 45 d4	 mov	 eax, DWORD PTR _iCount$234529[ebp]
  01e30	6b c0 18	 imul	 eax, 24			; 00000018H
  01e33	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e36	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  01e3c	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  01e41	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  01e44	7c 09		 jl	 SHORT $LN9@CheckCompl

; 927  : 				{
; 928  : 					iCompleteSkill2 = TRUE;

  01e46	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _iCompleteSkill2$[ebp], 1

; 929  : 					break;

  01e4d	eb 02		 jmp	 SHORT $LN13@CheckCompl
$LN9@CheckCompl:

; 930  : 				}
; 931  : 			}
; 932  : 		}

  01e4f	eb 99		 jmp	 SHORT $LN11@CheckCompl
$LN13@CheckCompl:

; 933  : 	}
; 934  : 
; 935  : 	int iSum = iBrandOfSkill1+iBrandOfSkill2;

  01e51	8b 45 e8	 mov	 eax, DWORD PTR _iBrandOfSkill1$[ebp]
  01e54	03 45 e4	 add	 eax, DWORD PTR _iBrandOfSkill2$[ebp]
  01e57	89 45 d0	 mov	 DWORD PTR _iSum$[ebp], eax

; 936  : 
; 937  : 	if( iSum == iBrandOfSkill1 )

  01e5a	8b 45 d0	 mov	 eax, DWORD PTR _iSum$[ebp]
  01e5d	3b 45 e8	 cmp	 eax, DWORD PTR _iBrandOfSkill1$[ebp]
  01e60	75 0f		 jne	 SHORT $LN7@CheckCompl

; 938  : 	{
; 939  : 		if( iCompleteSkill1 != 0 )

  01e62	83 7d e0 00	 cmp	 DWORD PTR _iCompleteSkill1$[ebp], 0
  01e66	74 07		 je	 SHORT $LN6@CheckCompl

; 940  : 			return true;

  01e68	b8 01 00 00 00	 mov	 eax, 1
  01e6d	eb 2e		 jmp	 SHORT $LN29@CheckCompl
$LN6@CheckCompl:

; 941  : 	}

  01e6f	eb 2a		 jmp	 SHORT $LN5@CheckCompl
$LN7@CheckCompl:

; 942  : 	else if( iSum == iBrandOfSkill2 )

  01e71	8b 45 d0	 mov	 eax, DWORD PTR _iSum$[ebp]
  01e74	3b 45 e4	 cmp	 eax, DWORD PTR _iBrandOfSkill2$[ebp]
  01e77	75 0f		 jne	 SHORT $LN4@CheckCompl

; 943  : 	{
; 944  : 		if( iCompleteSkill2 != 0 )

  01e79	83 7d d8 00	 cmp	 DWORD PTR _iCompleteSkill2$[ebp], 0
  01e7d	74 07		 je	 SHORT $LN3@CheckCompl

; 945  : 			return true;

  01e7f	b8 01 00 00 00	 mov	 eax, 1
  01e84	eb 17		 jmp	 SHORT $LN29@CheckCompl
$LN3@CheckCompl:

; 946  : 	}

  01e86	eb 13		 jmp	 SHORT $LN5@CheckCompl
$LN4@CheckCompl:

; 947  : 	else if( iCompleteSkill1 != 0 && iCompleteSkill2 != 0 )

  01e88	83 7d e0 00	 cmp	 DWORD PTR _iCompleteSkill1$[ebp], 0
  01e8c	74 0d		 je	 SHORT $LN5@CheckCompl
  01e8e	83 7d d8 00	 cmp	 DWORD PTR _iCompleteSkill2$[ebp], 0
  01e92	74 07		 je	 SHORT $LN5@CheckCompl

; 948  : 	{
; 949  : 		return true;

  01e94	b8 01 00 00 00	 mov	 eax, 1
  01e99	eb 02		 jmp	 SHORT $LN29@CheckCompl
$LN5@CheckCompl:

; 950  : 	}
; 951  : 
; 952  : 	return 0;

  01e9b	33 c0		 xor	 eax, eax
$LN29@CheckCompl:

; 953  : }

  01e9d	5f		 pop	 edi
  01e9e	5e		 pop	 esi
  01e9f	5b		 pop	 ebx
  01ea0	8b e5		 mov	 esp, ebp
  01ea2	5d		 pop	 ebp
  01ea3	c2 08 00	 ret	 8
?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
; Function compile flags: /Odtp /ZI
_iSkillUseType$ = -8					; size = 4
_this$ = -4						; size = 4
_iMLSkill$ = 8						; size = 4
?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z PROC ; CMasterLevelSkillTreeSystem::CheckRequireStatus
; _this$ = ecx

; 957  : {

  01eb0	55		 push	 ebp
  01eb1	8b ec		 mov	 ebp, esp
  01eb3	83 ec 48	 sub	 esp, 72			; 00000048H
  01eb6	53		 push	 ebx
  01eb7	56		 push	 esi
  01eb8	57		 push	 edi
  01eb9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 958  : 	int iSkillUseType = MagicDamageC.GetSkillUseType(iMLSkill);

  01ebc	8b 45 08	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01ebf	50		 push	 eax
  01ec0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  01ec5	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  01eca	89 45 f8	 mov	 DWORD PTR _iSkillUseType$[ebp], eax

; 959  : 
; 960  : 	if( iSkillUseType == 3 || iSkillUseType == 4 )

  01ecd	83 7d f8 03	 cmp	 DWORD PTR _iSkillUseType$[ebp], 3
  01ed1	74 06		 je	 SHORT $LN1@CheckRequi
  01ed3	83 7d f8 04	 cmp	 DWORD PTR _iSkillUseType$[ebp], 4
  01ed7	75 07		 jne	 SHORT $LN2@CheckRequi
$LN1@CheckRequi:

; 961  : 		return true;

  01ed9	b8 01 00 00 00	 mov	 eax, 1
  01ede	eb 02		 jmp	 SHORT $LN3@CheckRequi
$LN2@CheckRequi:

; 962  : 	return false;

  01ee0	33 c0		 xor	 eax, eax
$LN3@CheckRequi:

; 963  : }

  01ee2	5f		 pop	 edi
  01ee3	5e		 pop	 esi
  01ee4	5b		 pop	 ebx
  01ee5	8b e5		 mov	 esp, ebp
  01ee7	5d		 pop	 ebp
  01ee8	c2 04 00	 ret	 4
?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckRequireStatus
_TEXT	ENDS
PUBLIC	?CheckPrimarySkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckPrimarySkill
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iCount$234556 = -12					; size = 4
_iBaseMLS$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?CheckPrimarySkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::CheckPrimarySkill
; _this$ = ecx

; 967  : {

  01ef0	55		 push	 ebp
  01ef1	8b ec		 mov	 ebp, esp
  01ef3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01ef6	53		 push	 ebx
  01ef7	56		 push	 esi
  01ef8	57		 push	 edi
  01ef9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 968  : 	int iBaseMLS = 0;

  01efc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iBaseMLS$[ebp], 0

; 969  : 
; 970  : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  01f03	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iCount$234556[ebp], 0
  01f0a	eb 09		 jmp	 SHORT $LN4@CheckPrima
$LN3@CheckPrima:
  01f0c	8b 45 f4	 mov	 eax, DWORD PTR _iCount$234556[ebp]
  01f0f	83 c0 01	 add	 eax, 1
  01f12	89 45 f4	 mov	 DWORD PTR _iCount$234556[ebp], eax
$LN4@CheckPrima:
  01f15	81 7d f4 96 00
	00 00		 cmp	 DWORD PTR _iCount$234556[ebp], 150 ; 00000096H
  01f1c	7d 65		 jge	 SHORT $LN2@CheckPrima

; 971  : 	{
; 972  : 		if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 973  : 			this->CheckRequireStatus(lpObj->Magic[iCount].m_Skill) &&
; 974  : 			iSkill == MagicDamageC.GetSkillReqBrandOfSkill(lpObj->Magic[iCount].m_Skill))

  01f1e	8b 4d f4	 mov	 ecx, DWORD PTR _iCount$234556[ebp]
  01f21	6b c9 18	 imul	 ecx, 24			; 00000018H
  01f24	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01f27	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  01f2d	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  01f32	83 f8 01	 cmp	 eax, 1
  01f35	75 4a		 jne	 SHORT $LN1@CheckPrima
  01f37	8b 45 f4	 mov	 eax, DWORD PTR _iCount$234556[ebp]
  01f3a	6b c0 18	 imul	 eax, 24			; 00000018H
  01f3d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01f40	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  01f46	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  01f4a	50		 push	 eax
  01f4b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f4e	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  01f53	85 c0		 test	 eax, eax
  01f55	74 2a		 je	 SHORT $LN1@CheckPrima
  01f57	8b 45 f4	 mov	 eax, DWORD PTR _iCount$234556[ebp]
  01f5a	6b c0 18	 imul	 eax, 24			; 00000018H
  01f5d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01f60	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  01f66	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  01f6a	50		 push	 eax
  01f6b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  01f70	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  01f75	39 45 0c	 cmp	 DWORD PTR _iSkill$[ebp], eax
  01f78	75 07		 jne	 SHORT $LN1@CheckPrima

; 975  : 		{
; 976  : 			return true;

  01f7a	b8 01 00 00 00	 mov	 eax, 1
  01f7f	eb 04		 jmp	 SHORT $LN5@CheckPrima
$LN1@CheckPrima:

; 977  : 		}
; 978  : 	}

  01f81	eb 89		 jmp	 SHORT $LN3@CheckPrima
$LN2@CheckPrima:

; 979  : 	return false;

  01f83	33 c0		 xor	 eax, eax
$LN5@CheckPrima:

; 980  : }

  01f85	5f		 pop	 edi
  01f86	5e		 pop	 esi
  01f87	5b		 pop	 ebx
  01f88	8b e5		 mov	 esp, ebp
  01f8a	5d		 pop	 ebp
  01f8b	c2 08 00	 ret	 8
?CheckPrimarySkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CheckPrimarySkill
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
_iMLSkill$ = 8						; size = 4
?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z PROC ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
; _this$ = ecx

; 983  : {

  01f90	55		 push	 ebp
  01f91	8b ec		 mov	 ebp, esp
  01f93	83 ec 44	 sub	 esp, 68			; 00000044H
  01f96	53		 push	 ebx
  01f97	56		 push	 esi
  01f98	57		 push	 edi
  01f99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 984  : 	if( !this->CheckRequireStatus(iMLSkill) )

  01f9c	8b 45 08	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01f9f	50		 push	 eax
  01fa0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fa3	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  01fa8	85 c0		 test	 eax, eax
  01faa	75 05		 jne	 SHORT $LN1@GetBaseMas

; 985  : 		return -1;

  01fac	83 c8 ff	 or	 eax, -1
  01faf	eb 03		 jmp	 SHORT $LN2@GetBaseMas
$LN1@GetBaseMas:

; 986  : 	return iMLSkill;

  01fb1	8b 45 08	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
$LN2@GetBaseMas:

; 987  : }

  01fb4	5f		 pop	 edi
  01fb5	5e		 pop	 esi
  01fb6	5b		 pop	 ebx
  01fb7	8b e5		 mov	 esp, ebp
  01fb9	5d		 pop	 ebp
  01fba	c2 04 00	 ret	 4
?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z@4JA ; `CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS'::`2'::__LINE__Var
PUBLIC	?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS
EXTRN	?GCMagicListOneSend@@YAXHDGEGE@Z:PROC		; GCMagicListOneSend
EXTRN	?Set@CMagicInf@@QAEHHE@Z:PROC			; CMagicInf::Set
EXTRN	?UpdateML@CMagicInf@@QAEHKE@Z:PROC		; CMagicInf::UpdateML
EXTRN	?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z:PROC ; CMagicDamage::SkillGetRequireClass
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z:PROC ; CMagicDamage::SkillGetRequireEnergy
EXTRN	?g_EnergyCheckOff@@3HA:DWORD			; g_EnergyCheckOff
;	COMDAT ?__LINE__Var@?1??gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z@4JA DD 03dfH ; `CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_iBrand$234611 = -20					; size = 2
_reqeng$234575 = -16					; size = 4
_n$ = -12						; size = 4
_skill$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iMLSkill$ = 12						; size = 4
_iSkillLevel$ = 16					; size = 4
?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS
; _this$ = ecx

; 991  : {

  01fc0	55		 push	 ebp
  01fc1	8b ec		 mov	 ebp, esp
  01fc3	83 ec 54	 sub	 esp, 84			; 00000054H
  01fc6	53		 push	 ebx
  01fc7	56		 push	 esi
  01fc8	57		 push	 edi
  01fc9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 992  : 	int skill = -1;

  01fcc	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _skill$[ebp], -1

; 993  : 	int n;
; 994  : 
; 995  : 	if( g_EnergyCheckOff == 1 )

  01fd3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_EnergyCheckOff@@3HA, 1 ; g_EnergyCheckOff
  01fda	0f 85 bc 00 00
	00		 jne	 $LN34@gObjMagicA

; 996  : 	{
; 997  : 		int reqeng = MagicDamageC.SkillGetRequireEnergy(iMLSkill);

  01fe0	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  01fe3	50		 push	 eax
  01fe4	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  01fe9	e8 00 00 00 00	 call	 ?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGetRequireEnergy
  01fee	89 45 f0	 mov	 DWORD PTR _reqeng$234575[ebp], eax

; 998  : 
; 999  : 		if( reqeng < 0 )

  01ff1	83 7d f0 00	 cmp	 DWORD PTR _reqeng$234575[ebp], 0
  01ff5	7d 21		 jge	 SHORT $LN33@gObjMagicA

; 1000 : 		{
; 1001 : 			LogAdd(lMsg.Get(MSGGET(2,37)));

  01ff7	68 25 02 00 00	 push	 549			; 00000225H
  01ffc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02001	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02006	50		 push	 eax
  02007	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0200d	83 c4 04	 add	 esp, 4

; 1002 : 			return -1;

  02010	83 c8 ff	 or	 eax, -1
  02013	e9 59 04 00 00	 jmp	 $LN35@gObjMagicA
$LN33@gObjMagicA:

; 1003 : 		}
; 1004 : 
; 1005 : 		if( lpObj->Class == CLASS_KNIGHT )

  02018	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0201b	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  02022	83 f9 01	 cmp	 ecx, 1
  02025	75 09		 jne	 SHORT $LN32@gObjMagicA

; 1006 : 		{
; 1007 : 			reqeng -= 10;

  02027	8b 45 f0	 mov	 eax, DWORD PTR _reqeng$234575[ebp]
  0202a	83 e8 0a	 sub	 eax, 10			; 0000000aH
  0202d	89 45 f0	 mov	 DWORD PTR _reqeng$234575[ebp], eax
$LN32@gObjMagicA:

; 1008 : 		}
; 1009 : 		
; 1010 : 		if( lpObj->Class == CLASS_ELF )

  02030	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02033	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0203a	83 f9 02	 cmp	 ecx, 2
  0203d	75 09		 jne	 SHORT $LN31@gObjMagicA

; 1011 : 		{
; 1012 : 			reqeng -= 5;

  0203f	8b 45 f0	 mov	 eax, DWORD PTR _reqeng$234575[ebp]
  02042	83 e8 05	 sub	 eax, 5
  02045	89 45 f0	 mov	 DWORD PTR _reqeng$234575[ebp], eax
$LN31@gObjMagicA:

; 1013 : 		}
; 1014 : 		
; 1015 : 		if( lpObj->Class == CLASS_DARKLORD )

  02048	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0204b	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  02052	83 f9 04	 cmp	 ecx, 4
  02055	75 09		 jne	 SHORT $LN30@gObjMagicA

; 1016 : 		{
; 1017 : 			reqeng -= 5;

  02057	8b 45 f0	 mov	 eax, DWORD PTR _reqeng$234575[ebp]
  0205a	83 e8 05	 sub	 eax, 5
  0205d	89 45 f0	 mov	 DWORD PTR _reqeng$234575[ebp], eax
$LN30@gObjMagicA:

; 1018 : 		}
; 1019 : 
; 1020 : 		if( (lpObj->Energy+lpObj->AddEnergy) < reqeng )

  02060	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02063	0f b7 88 fa 00
	00 00		 movzx	 ecx, WORD PTR [eax+250]
  0206a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0206d	0f bf 82 26 01
	00 00		 movsx	 eax, WORD PTR [edx+294]
  02074	03 c8		 add	 ecx, eax
  02076	3b 4d f0	 cmp	 ecx, DWORD PTR _reqeng$234575[ebp]
  02079	7d 21		 jge	 SHORT $LN34@gObjMagicA

; 1021 : 		{
; 1022 : 			LogAdd(lMsg.Get(MSGGET(2,37)));

  0207b	68 25 02 00 00	 push	 549			; 00000225H
  02080	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02085	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0208a	50		 push	 eax
  0208b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  02091	83 c4 04	 add	 esp, 4

; 1023 : 			return -1;

  02094	83 c8 ff	 or	 eax, -1
  02097	e9 d5 03 00 00	 jmp	 $LN35@gObjMagicA
$LN34@gObjMagicA:

; 1024 : 		}
; 1025 : 	}
; 1026 : 
; 1027 : 	if( MagicDamageC.SkillGetRequireClass(lpObj->Class,lpObj->ChangeUP,lpObj->ChangeUP3rd,iMLSkill) < 1 )

  0209c	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  0209f	50		 push	 eax
  020a0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  020a3	0f b6 91 bc 00
	00 00		 movzx	 edx, BYTE PTR [ecx+188]
  020aa	52		 push	 edx
  020ab	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  020ae	0f b6 88 bb 00
	00 00		 movzx	 ecx, BYTE PTR [eax+187]
  020b5	51		 push	 ecx
  020b6	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  020b9	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  020c0	50		 push	 eax
  020c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  020c6	e8 00 00 00 00	 call	 ?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z ; CMagicDamage::SkillGetRequireClass
  020cb	83 f8 01	 cmp	 eax, 1
  020ce	7d 21		 jge	 SHORT $LN28@gObjMagicA

; 1028 : 	{
; 1029 : 		LogAdd(lMsg.Get(MSGGET(2,38)));

  020d0	68 26 02 00 00	 push	 550			; 00000226H
  020d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  020da	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  020df	50		 push	 eax
  020e0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  020e6	83 c4 04	 add	 esp, 4

; 1030 : 		return -1;

  020e9	83 c8 ff	 or	 eax, -1
  020ec	e9 80 03 00 00	 jmp	 $LN35@gObjMagicA
$LN28@gObjMagicA:

; 1031 : 	}
; 1032 : 
; 1033 : 	for( n = 0; n < MAX_MAGIC; n++)

  020f1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  020f8	eb 09		 jmp	 SHORT $LN27@gObjMagicA
$LN26@gObjMagicA:
  020fa	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  020fd	83 c0 01	 add	 eax, 1
  02100	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
$LN27@gObjMagicA:
  02103	81 7d f4 96 00
	00 00		 cmp	 DWORD PTR _n$[ebp], 150	; 00000096H
  0210a	0f 8d 88 00 00
	00		 jge	 $LN25@gObjMagicA

; 1034 : 	{
; 1035 : 		if( lpObj->Magic[n].IsMagic() == TRUE &&
; 1036 : 			lpObj->Magic[n].m_Skill == iMLSkill &&
; 1037 : 			lpObj->Magic[n].m_Level == iSkillLevel )

  02110	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  02113	6b c9 18	 imul	 ecx, 24			; 00000018H
  02116	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02119	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0211f	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  02124	83 f8 01	 cmp	 eax, 1
  02127	75 6a		 jne	 SHORT $LN24@gObjMagicA
  02129	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0212c	6b c0 18	 imul	 eax, 24			; 00000018H
  0212f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02132	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  02138	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  0213c	3b 45 0c	 cmp	 eax, DWORD PTR _iMLSkill$[ebp]
  0213f	75 52		 jne	 SHORT $LN24@gObjMagicA
  02141	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  02144	6b c0 18	 imul	 eax, 24			; 00000018H
  02147	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0214a	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  02150	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  02155	3b 45 10	 cmp	 eax, DWORD PTR _iSkillLevel$[ebp]
  02158	75 39		 jne	 SHORT $LN24@gObjMagicA

; 1038 : 		{
; 1039 : 			LogAdd(lMsg.Get(MSGGET(2,43)),lpObj->Magic[n].m_Skill,iMLSkill);

  0215a	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  0215d	50		 push	 eax
  0215e	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  02161	6b c9 18	 imul	 ecx, 24			; 00000018H
  02164	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02167	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0216d	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  02171	51		 push	 ecx
  02172	68 2b 02 00 00	 push	 555			; 0000022bH
  02177	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0217c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02181	50		 push	 eax
  02182	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  02188	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1040 : 			return -1;

  0218b	83 c8 ff	 or	 eax, -1
  0218e	e9 de 02 00 00	 jmp	 $LN35@gObjMagicA
$LN24@gObjMagicA:

; 1041 : 		}
; 1042 : 	}

  02193	e9 62 ff ff ff	 jmp	 $LN26@gObjMagicA
$LN25@gObjMagicA:

; 1043 : 
; 1044 : 	if( MagicDamageC.GetSkillUseType(iMLSkill) == 3 )

  02198	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  0219b	50		 push	 eax
  0219c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  021a1	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  021a6	83 f8 03	 cmp	 eax, 3
  021a9	0f 85 b8 00 00
	00		 jne	 $LN23@gObjMagicA

; 1045 : 	{
; 1046 : 		if( iSkillLevel > 1 )

  021af	83 7d 10 01	 cmp	 DWORD PTR _iSkillLevel$[ebp], 1
  021b3	0f 8e a9 00 00
	00		 jle	 $LN22@gObjMagicA

; 1047 : 		{
; 1048 : 			for( n = 0; n < MAX_MAGIC; n++)

  021b9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  021c0	eb 09		 jmp	 SHORT $LN21@gObjMagicA
$LN20@gObjMagicA:
  021c2	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  021c5	83 c0 01	 add	 eax, 1
  021c8	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
$LN21@gObjMagicA:
  021cb	81 7d f4 96 00
	00 00		 cmp	 DWORD PTR _n$[ebp], 150	; 00000096H
  021d2	0f 8d 8a 00 00
	00		 jge	 $LN22@gObjMagicA

; 1049 : 			{
; 1050 : 				if( lpObj->Magic[n].IsMagic() == TRUE &&
; 1051 : 					lpObj->Magic[n].m_Skill == iMLSkill &&
; 1052 : 					lpObj->Magic[n].m_Level == iSkillLevel-1 )

  021d8	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  021db	6b c9 18	 imul	 ecx, 24			; 00000018H
  021de	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  021e1	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  021e7	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  021ec	83 f8 01	 cmp	 eax, 1
  021ef	75 6c		 jne	 SHORT $LN18@gObjMagicA
  021f1	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  021f4	6b c0 18	 imul	 eax, 24			; 00000018H
  021f7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  021fa	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  02200	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  02204	3b 45 0c	 cmp	 eax, DWORD PTR _iMLSkill$[ebp]
  02207	75 54		 jne	 SHORT $LN18@gObjMagicA
  02209	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0220c	6b c0 18	 imul	 eax, 24			; 00000018H
  0220f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02212	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  02218	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0221d	8b 4d 10	 mov	 ecx, DWORD PTR _iSkillLevel$[ebp]
  02220	83 e9 01	 sub	 ecx, 1
  02223	3b c1		 cmp	 eax, ecx
  02225	75 36		 jne	 SHORT $LN18@gObjMagicA

; 1053 : 				{
; 1054 : 					skill = lpObj->Magic[n].UpdateML(iMLSkill,iSkillLevel);

  02227	0f b6 45 10	 movzx	 eax, BYTE PTR _iSkillLevel$[ebp]
  0222b	50		 push	 eax
  0222c	8b 4d 0c	 mov	 ecx, DWORD PTR _iMLSkill$[ebp]
  0222f	51		 push	 ecx
  02230	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  02233	6b c9 18	 imul	 ecx, 24			; 00000018H
  02236	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02239	03 8a c8 04 00
	00		 add	 ecx, DWORD PTR [edx+1224]
  0223f	e8 00 00 00 00	 call	 ?UpdateML@CMagicInf@@QAEHKE@Z ; CMagicInf::UpdateML
  02244	89 45 f8	 mov	 DWORD PTR _skill$[ebp], eax

; 1055 : 
; 1056 : 					if( skill < 0 )

  02247	83 7d f8 00	 cmp	 DWORD PTR _skill$[ebp], 0
  0224b	7d 08		 jge	 SHORT $LN17@gObjMagicA

; 1057 : 						return -1;

  0224d	83 c8 ff	 or	 eax, -1
  02250	e9 1c 02 00 00	 jmp	 $LN35@gObjMagicA
$LN17@gObjMagicA:

; 1058 : 
; 1059 : 					return n;

  02255	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  02258	e9 14 02 00 00	 jmp	 $LN35@gObjMagicA
$LN18@gObjMagicA:

; 1060 : 				}
; 1061 : 			}

  0225d	e9 60 ff ff ff	 jmp	 $LN20@gObjMagicA
$LN22@gObjMagicA:

; 1062 : 		}
; 1063 : 	}

  02262	e9 eb 00 00 00	 jmp	 $LN16@gObjMagicA
$LN23@gObjMagicA:

; 1064 : 	else if( MagicDamageC.GetSkillUseType(iMLSkill) == 4 )

  02267	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  0226a	50		 push	 eax
  0226b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  02270	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  02275	83 f8 04	 cmp	 eax, 4
  02278	0f 85 cc 00 00
	00		 jne	 $LN15@gObjMagicA

; 1065 : 	{
; 1066 : 		WORD iBrand = MagicDamageC.GetSkillReqBrandOfSkill(iMLSkill);

  0227e	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  02281	50		 push	 eax
  02282	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  02287	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  0228c	66 89 45 ec	 mov	 WORD PTR _iBrand$234611[ebp], ax

; 1067 : 
; 1068 : 		for( n = 0; n < MAX_MAGIC; n++)

  02290	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  02297	eb 09		 jmp	 SHORT $LN14@gObjMagicA
$LN13@gObjMagicA:
  02299	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0229c	83 c0 01	 add	 eax, 1
  0229f	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
$LN14@gObjMagicA:
  022a2	81 7d f4 96 00
	00 00		 cmp	 DWORD PTR _n$[ebp], 150	; 00000096H
  022a9	0f 8d 99 00 00
	00		 jge	 $LN12@gObjMagicA

; 1069 : 		{
; 1070 : 			if( lpObj->Magic[n].IsMagic() == TRUE )

  022af	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  022b2	6b c9 18	 imul	 ecx, 24			; 00000018H
  022b5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  022b8	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  022be	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  022c3	83 f8 01	 cmp	 eax, 1
  022c6	75 7b		 jne	 SHORT $LN11@gObjMagicA

; 1071 : 			{
; 1072 : 				if( lpObj->Magic[n].m_Skill == iBrand )

  022c8	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  022cb	6b c0 18	 imul	 eax, 24			; 00000018H
  022ce	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  022d1	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  022d7	0f b7 4d ec	 movzx	 ecx, WORD PTR _iBrand$234611[ebp]
  022db	39 4c 02 08	 cmp	 DWORD PTR [edx+eax+8], ecx
  022df	75 14		 jne	 SHORT $LN10@gObjMagicA

; 1073 : 				{
; 1074 : 					lpObj->Magic[n].m_bPass = TRUE;

  022e1	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  022e4	6b c0 18	 imul	 eax, 24			; 00000018H
  022e7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  022ea	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  022f0	c6 44 02 14 01	 mov	 BYTE PTR [edx+eax+20], 1
$LN10@gObjMagicA:

; 1075 : 				}
; 1076 : 
; 1077 : 				if( lpObj->Magic[n].m_Skill == iMLSkill )

  022f5	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  022f8	6b c0 18	 imul	 eax, 24			; 00000018H
  022fb	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  022fe	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  02304	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  02308	3b 45 0c	 cmp	 eax, DWORD PTR _iMLSkill$[ebp]
  0230b	75 36		 jne	 SHORT $LN11@gObjMagicA

; 1078 : 				{
; 1079 : 					skill = lpObj->Magic[n].UpdateML(iMLSkill,iSkillLevel);

  0230d	0f b6 45 10	 movzx	 eax, BYTE PTR _iSkillLevel$[ebp]
  02311	50		 push	 eax
  02312	8b 4d 0c	 mov	 ecx, DWORD PTR _iMLSkill$[ebp]
  02315	51		 push	 ecx
  02316	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  02319	6b c9 18	 imul	 ecx, 24			; 00000018H
  0231c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0231f	03 8a c8 04 00
	00		 add	 ecx, DWORD PTR [edx+1224]
  02325	e8 00 00 00 00	 call	 ?UpdateML@CMagicInf@@QAEHKE@Z ; CMagicInf::UpdateML
  0232a	89 45 f8	 mov	 DWORD PTR _skill$[ebp], eax

; 1080 : 
; 1081 : 					if( skill < 0 )

  0232d	83 7d f8 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02331	7d 08		 jge	 SHORT $LN8@gObjMagicA

; 1082 : 						return -1;

  02333	83 c8 ff	 or	 eax, -1
  02336	e9 36 01 00 00	 jmp	 $LN35@gObjMagicA
$LN8@gObjMagicA:

; 1083 : 
; 1084 : 					return n;

  0233b	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0233e	e9 2e 01 00 00	 jmp	 $LN35@gObjMagicA
$LN11@gObjMagicA:

; 1085 : 				}
; 1086 : 			}
; 1087 : 		}

  02343	e9 51 ff ff ff	 jmp	 $LN13@gObjMagicA
$LN12@gObjMagicA:

; 1088 : 	}
; 1089 : 	else

  02348	eb 08		 jmp	 SHORT $LN16@gObjMagicA
$LN15@gObjMagicA:

; 1090 : 	{
; 1091 : 		return -1;

  0234a	83 c8 ff	 or	 eax, -1
  0234d	e9 1f 01 00 00	 jmp	 $LN35@gObjMagicA
$LN16@gObjMagicA:

; 1092 : 	}
; 1093 : 
; 1094 : 	for( n = 0; n < MAX_MAGIC; n++)

  02352	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  02359	eb 09		 jmp	 SHORT $LN6@gObjMagicA
$LN5@gObjMagicA:
  0235b	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0235e	83 c0 01	 add	 eax, 1
  02361	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
$LN6@gObjMagicA:
  02364	81 7d f4 96 00
	00 00		 cmp	 DWORD PTR _n$[ebp], 150	; 00000096H
  0236b	0f 8d d6 00 00
	00		 jge	 $LN4@gObjMagicA

; 1095 : 	{
; 1096 : 		if( lpObj->Magic[n].IsMagic() == FALSE )

  02371	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  02374	6b c9 18	 imul	 ecx, 24			; 00000018H
  02377	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0237a	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  02380	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  02385	85 c0		 test	 eax, eax
  02387	0f 85 b5 00 00
	00		 jne	 $LN3@gObjMagicA

; 1097 : 		{
; 1098 : 			skill = lpObj->Magic[n].Set(iMLSkill,iSkillLevel);

  0238d	0f b6 45 10	 movzx	 eax, BYTE PTR _iSkillLevel$[ebp]
  02391	50		 push	 eax
  02392	8b 4d 0c	 mov	 ecx, DWORD PTR _iMLSkill$[ebp]
  02395	51		 push	 ecx
  02396	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  02399	6b c9 18	 imul	 ecx, 24			; 00000018H
  0239c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0239f	03 8a c8 04 00
	00		 add	 ecx, DWORD PTR [edx+1224]
  023a5	e8 00 00 00 00	 call	 ?Set@CMagicInf@@QAEHHE@Z ; CMagicInf::Set
  023aa	89 45 f8	 mov	 DWORD PTR _skill$[ebp], eax

; 1099 : 
; 1100 : 			if( skill < 0 )

  023ad	83 7d f8 00	 cmp	 DWORD PTR _skill$[ebp], 0
  023b1	7d 2f		 jge	 SHORT $LN2@gObjMagicA

; 1101 : 			{
; 1102 : 				LogAdd(lMsg.Get(MSGGET(2,41)),__FILE__,__LINE__);

  023b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z@4JA
  023b8	83 c0 6f	 add	 eax, 111		; 0000006fH
  023bb	50		 push	 eax
  023bc	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@LKIJBIMC@d?3?2projects?2exteam6?43?2source?2gam@
  023c1	68 29 02 00 00	 push	 553			; 00000229H
  023c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  023cb	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  023d0	50		 push	 eax
  023d1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  023d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1103 : 				return -1;

  023da	83 c8 ff	 or	 eax, -1
  023dd	e9 8f 00 00 00	 jmp	 $LN35@gObjMagicA
$LN2@gObjMagicA:

; 1104 : 			}
; 1105 : 
; 1106 : 			if( MagicDamageC.GetSkillReqBrandOfSkill(iMLSkill) == 0 &&
; 1107 : 				MagicDamageC.GetSkillUseType(iMLSkill) == 4 )

  023e2	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  023e5	50		 push	 eax
  023e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  023eb	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  023f0	85 c0		 test	 eax, eax
  023f2	75 34		 jne	 SHORT $LN1@gObjMagicA
  023f4	8b 45 0c	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  023f7	50		 push	 eax
  023f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  023fd	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  02402	83 f8 04	 cmp	 eax, 4
  02405	75 21		 jne	 SHORT $LN1@gObjMagicA

; 1108 : 			{
; 1109 : 				GCMagicListOneSend(lpObj->m_Index,n,iMLSkill,iSkillLevel,0,0);

  02407	6a 00		 push	 0
  02409	6a 00		 push	 0
  0240b	0f b6 45 10	 movzx	 eax, BYTE PTR _iSkillLevel$[ebp]
  0240f	50		 push	 eax
  02410	0f b7 4d 0c	 movzx	 ecx, WORD PTR _iMLSkill$[ebp]
  02414	51		 push	 ecx
  02415	0f b6 55 f4	 movzx	 edx, BYTE PTR _n$[ebp]
  02419	52		 push	 edx
  0241a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0241d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0241f	51		 push	 ecx
  02420	e8 00 00 00 00	 call	 ?GCMagicListOneSend@@YAXHDGEGE@Z ; GCMagicListOneSend
  02425	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@gObjMagicA:

; 1110 : 			}
; 1111 : 
; 1112 : 			lpObj->MagicCount++;

  02428	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0242b	8a 88 cc 04 00
	00		 mov	 cl, BYTE PTR [eax+1228]
  02431	80 c1 01	 add	 cl, 1
  02434	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02437	88 8a cc 04 00
	00		 mov	 BYTE PTR [edx+1228], cl

; 1113 : 			return n;

  0243d	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  02440	eb 2f		 jmp	 SHORT $LN35@gObjMagicA
$LN3@gObjMagicA:

; 1114 : 		}
; 1115 : 	}

  02442	e9 14 ff ff ff	 jmp	 $LN5@gObjMagicA
$LN4@gObjMagicA:

; 1116 : 
; 1117 : 	LogAdd(lMsg.Get(MSGGET(2,42)),__FILE__,__LINE__);

  02447	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z@4JA
  0244c	83 c0 7e	 add	 eax, 126		; 0000007eH
  0244f	50		 push	 eax
  02450	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@LKIJBIMC@d?3?2projects?2exteam6?43?2source?2gam@
  02455	68 2a 02 00 00	 push	 554			; 0000022aH
  0245a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0245f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02464	50		 push	 eax
  02465	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0246b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1118 : return -1;

  0246e	83 c8 ff	 or	 eax, -1
$LN35@gObjMagicA:

; 1119 : }

  02471	5f		 pop	 edi
  02472	5e		 pop	 esi
  02473	5b		 pop	 ebx
  02474	8b e5		 mov	 esp, ebp
  02476	5d		 pop	 ebp
  02477	c2 0c 00	 ret	 12			; 0000000cH
?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS
_TEXT	ENDS
PUBLIC	__real@bf800000
PUBLIC	__real@0000000000000000
PUBLIC	?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
PUBLIC	__$ArrayPad$
PUBLIC	?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	_memcpy:PROC
EXTRN	?PHeadSubSetW@@YAXPAEEEH@Z:PROC			; PHeadSubSetW
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$234674 = -1072					; size = 4
_pElementMsg$ = -1068					; size = 12
_lOfs$ = -1056						; size = 4
_sendbuf$ = -1052					; size = 1024
_nCount$ = -28						; size = 4
_pCountMsg$ = -24					; size = 12
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z PROC ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
; _this$ = ecx

; 1153 : {

  02480	55		 push	 ebp
  02481	8b ec		 mov	 ebp, esp
  02483	81 ec 70 04 00
	00		 sub	 esp, 1136		; 00000470H
  02489	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0248e	33 c5		 xor	 eax, ebp
  02490	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02493	53		 push	 ebx
  02494	56		 push	 esi
  02495	57		 push	 edi
  02496	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1154 : 	if( !gObjIsConnected(aIndex) )

  02499	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0249c	50		 push	 eax
  0249d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  024a2	83 c4 04	 add	 esp, 4
  024a5	85 c0		 test	 eax, eax
  024a7	75 11		 jne	 SHORT $LN9@CGReqGetMa

; 1155 : 	{
; 1156 : 		CloseClient(aIndex);

  024a9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  024ac	50		 push	 eax
  024ad	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  024b2	83 c4 04	 add	 esp, 4

; 1157 : 		return;

  024b5	e9 06 03 00 00	 jmp	 $LN10@CGReqGetMa
$LN9@CGReqGetMa:

; 1158 : 	}
; 1159 : 
; 1160 : 	LPOBJ lpObj = &gObj[aIndex];

  024ba	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  024bd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  024c3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  024c9	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1161 : 
; 1162 : 	PMSG_MASTERSKILL_COUNT pCountMsg;
; 1163 : 	PHeadSubSetW((LPBYTE)&pCountMsg,0xF3,0x53,sizeof(pCountMsg));

  024cc	6a 0c		 push	 12			; 0000000cH
  024ce	6a 53		 push	 83			; 00000053H
  024d0	68 f3 00 00 00	 push	 243			; 000000f3H
  024d5	8d 45 e8	 lea	 eax, DWORD PTR _pCountMsg$[ebp]
  024d8	50		 push	 eax
  024d9	e8 00 00 00 00	 call	 ?PHeadSubSetW@@YAXPAEEEH@Z ; PHeadSubSetW
  024de	83 c4 10	 add	 esp, 16			; 00000010H

; 1164 : 	int nCount = 0;

  024e1	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _nCount$[ebp], 0

; 1165 : 
; 1166 : 	BYTE sendbuf[1024];
; 1167 : 	memset(&sendbuf[0],0,sizeof(sendbuf));

  024e8	68 00 04 00 00	 push	 1024			; 00000400H
  024ed	6a 00		 push	 0
  024ef	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _sendbuf$[ebp]
  024f5	50		 push	 eax
  024f6	e8 00 00 00 00	 call	 _memset
  024fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1168 : 
; 1169 : 	int lOfs = sizeof(pCountMsg);

  024fe	c7 85 e0 fb ff
	ff 0c 00 00 00	 mov	 DWORD PTR _lOfs$[ebp], 12 ; 0000000cH

; 1170 : 
; 1171 : 	MASTERSKILL_STRUCT pElementMsg;
; 1172 : 
; 1173 : 	for(int i = 0; i < MAX_MAGIC; i++)

  02508	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$234674[ebp], 0
  02512	eb 0f		 jmp	 SHORT $LN8@CGReqGetMa
$LN7@CGReqGetMa:
  02514	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _i$234674[ebp]
  0251a	83 c0 01	 add	 eax, 1
  0251d	89 85 d0 fb ff
	ff		 mov	 DWORD PTR _i$234674[ebp], eax
$LN8@CGReqGetMa:
  02523	81 bd d0 fb ff
	ff 96 00 00 00	 cmp	 DWORD PTR _i$234674[ebp], 150 ; 00000096H
  0252d	0f 8d 3e 02 00
	00		 jge	 $LN6@CGReqGetMa

; 1174 : 	{
; 1175 : 		if( lpObj->Magic[i].IsMagic() == TRUE &&
; 1176 : 			this->CheckRequireStatus(lpObj->Magic[i].m_Skill) == TRUE )

  02533	8b 8d d0 fb ff
	ff		 mov	 ecx, DWORD PTR _i$234674[ebp]
  02539	6b c9 18	 imul	 ecx, 24			; 00000018H
  0253c	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0253f	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  02545	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0254a	83 f8 01	 cmp	 eax, 1
  0254d	0f 85 19 02 00
	00		 jne	 $LN5@CGReqGetMa
  02553	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _i$234674[ebp]
  02559	6b c0 18	 imul	 eax, 24			; 00000018H
  0255c	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0255f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  02565	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  02569	50		 push	 eax
  0256a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0256d	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  02572	83 f8 01	 cmp	 eax, 1
  02575	0f 85 f1 01 00
	00		 jne	 $LN5@CGReqGetMa

; 1177 : 		{
; 1178 : 			pElementMsg.btMasterSkillId = this->GetMasterSkillUIIndex(lpObj->Class,lpObj->Magic[i].m_Skill);

  0257b	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _i$234674[ebp]
  02581	6b c0 18	 imul	 eax, 24			; 00000018H
  02584	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02587	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0258d	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  02591	50		 push	 eax
  02592	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02595	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  0259c	52		 push	 edx
  0259d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  025a0	e8 00 00 00 00	 call	 ?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
  025a5	88 85 d4 fb ff
	ff		 mov	 BYTE PTR _pElementMsg$[ebp], al

; 1179 : 			pElementMsg.btLevel = lpObj->Magic[i].m_Level;

  025ab	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _i$234674[ebp]
  025b1	6b c0 18	 imul	 eax, 24			; 00000018H
  025b4	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  025b7	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  025bd	8a 44 02 04	 mov	 al, BYTE PTR [edx+eax+4]
  025c1	88 85 d5 fb ff
	ff		 mov	 BYTE PTR _pElementMsg$[ebp+1], al

; 1180 : 
; 1181 : 			if( this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level) > 0.0f )

  025c7	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _i$234674[ebp]
  025cd	6b c0 18	 imul	 eax, 24			; 00000018H
  025d0	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  025d3	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  025d9	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  025de	50		 push	 eax
  025df	8b 8d d0 fb ff
	ff		 mov	 ecx, DWORD PTR _i$234674[ebp]
  025e5	6b c9 18	 imul	 ecx, 24			; 00000018H
  025e8	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  025eb	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  025f1	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  025f5	51		 push	 ecx
  025f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  025fb	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  02600	50		 push	 eax
  02601	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02604	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  02609	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0260f	df e0		 fnstsw	 ax
  02611	f6 c4 41	 test	 ah, 65			; 00000041H
  02614	75 4a		 jne	 SHORT $LN4@CGReqGetMa

; 1182 : 			{
; 1183 : 				pElementMsg.value = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level);

  02616	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _i$234674[ebp]
  0261c	6b c0 18	 imul	 eax, 24			; 00000018H
  0261f	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02622	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  02628	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0262d	50		 push	 eax
  0262e	8b 8d d0 fb ff
	ff		 mov	 ecx, DWORD PTR _i$234674[ebp]
  02634	6b c9 18	 imul	 ecx, 24			; 00000018H
  02637	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0263a	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  02640	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  02644	51		 push	 ecx
  02645	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0264a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0264f	50		 push	 eax
  02650	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02653	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  02658	d9 9d d8 fb ff
	ff		 fstp	 DWORD PTR _pElementMsg$[ebp+4]

; 1184 : 			}
; 1185 : 			else

  0265e	eb 0c		 jmp	 SHORT $LN3@CGReqGetMa
$LN4@CGReqGetMa:

; 1186 : 			{
; 1187 : 				pElementMsg.value = -1.0f;

  02660	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  02666	d9 9d d8 fb ff
	ff		 fstp	 DWORD PTR _pElementMsg$[ebp+4]
$LN3@CGReqGetMa:

; 1188 : 			}
; 1189 : 
; 1190 : 			if( lpObj->Magic[i].m_Level < MAX_SKILLTREE_LEVEL && this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level+1) != 0.0f )

  0266c	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _i$234674[ebp]
  02672	6b c0 18	 imul	 eax, 24			; 00000018H
  02675	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02678	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0267e	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  02683	83 f8 14	 cmp	 eax, 20			; 00000014H
  02686	0f 8d 9d 00 00
	00		 jge	 $LN2@CGReqGetMa
  0268c	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _i$234674[ebp]
  02692	6b c0 18	 imul	 eax, 24			; 00000018H
  02695	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02698	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0269e	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  026a3	83 c0 01	 add	 eax, 1
  026a6	50		 push	 eax
  026a7	8b 8d d0 fb ff
	ff		 mov	 ecx, DWORD PTR _i$234674[ebp]
  026ad	6b c9 18	 imul	 ecx, 24			; 00000018H
  026b0	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  026b3	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  026b9	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  026bd	51		 push	 ecx
  026be	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  026c3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  026c8	50		 push	 eax
  026c9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  026cc	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  026d1	d9 ee		 fldz
  026d3	da e9		 fucompp
  026d5	df e0		 fnstsw	 ax
  026d7	f6 c4 44	 test	 ah, 68			; 00000044H
  026da	7b 4d		 jnp	 SHORT $LN2@CGReqGetMa

; 1191 : 			{
; 1192 : 				pElementMsg.nextvalue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level+1);

  026dc	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _i$234674[ebp]
  026e2	6b c0 18	 imul	 eax, 24			; 00000018H
  026e5	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  026e8	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  026ee	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  026f3	83 c0 01	 add	 eax, 1
  026f6	50		 push	 eax
  026f7	8b 8d d0 fb ff
	ff		 mov	 ecx, DWORD PTR _i$234674[ebp]
  026fd	6b c9 18	 imul	 ecx, 24			; 00000018H
  02700	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02703	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  02709	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0270d	51		 push	 ecx
  0270e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  02713	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  02718	50		 push	 eax
  02719	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0271c	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  02721	d9 9d dc fb ff
	ff		 fstp	 DWORD PTR _pElementMsg$[ebp+8]

; 1193 : 			}
; 1194 : 			else

  02727	eb 0c		 jmp	 SHORT $LN1@CGReqGetMa
$LN2@CGReqGetMa:

; 1195 : 			{
; 1196 : 				pElementMsg.nextvalue = -1.0f;

  02729	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  0272f	d9 9d dc fb ff
	ff		 fstp	 DWORD PTR _pElementMsg$[ebp+8]
$LN1@CGReqGetMa:

; 1197 : 			}
; 1198 : 
; 1199 : 			nCount++;

  02735	8b 45 e4	 mov	 eax, DWORD PTR _nCount$[ebp]
  02738	83 c0 01	 add	 eax, 1
  0273b	89 45 e4	 mov	 DWORD PTR _nCount$[ebp], eax

; 1200 : 			memcpy(&sendbuf[lOfs],&pElementMsg,sizeof(pElementMsg));

  0273e	6a 0c		 push	 12			; 0000000cH
  02740	8d 85 d4 fb ff
	ff		 lea	 eax, DWORD PTR _pElementMsg$[ebp]
  02746	50		 push	 eax
  02747	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _lOfs$[ebp]
  0274d	8d 94 0d e4 fb
	ff ff		 lea	 edx, DWORD PTR _sendbuf$[ebp+ecx]
  02754	52		 push	 edx
  02755	e8 00 00 00 00	 call	 _memcpy
  0275a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1201 : 			lOfs += sizeof(pElementMsg);

  0275d	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]
  02763	83 c0 0c	 add	 eax, 12			; 0000000cH
  02766	89 85 e0 fb ff
	ff		 mov	 DWORD PTR _lOfs$[ebp], eax
$LN5@CGReqGetMa:

; 1202 : 		}
; 1203 : 	}

  0276c	e9 a3 fd ff ff	 jmp	 $LN7@CGReqGetMa
$LN6@CGReqGetMa:

; 1204 : 
; 1205 : 	pCountMsg.count = nCount;

  02771	8b 45 e4	 mov	 eax, DWORD PTR _nCount$[ebp]
  02774	89 45 f0	 mov	 DWORD PTR _pCountMsg$[ebp+8], eax

; 1206 : 	pCountMsg.h.sizeH = SET_NUMBERH(lOfs);

  02777	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]
  0277d	c1 e8 08	 shr	 eax, 8
  02780	88 45 e9	 mov	 BYTE PTR _pCountMsg$[ebp+1], al

; 1207 : 	pCountMsg.h.sizeL = SET_NUMBERL(lOfs);

  02783	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]
  02789	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0278e	88 45 ea	 mov	 BYTE PTR _pCountMsg$[ebp+2], al

; 1208 : 
; 1209 : 	memcpy(&sendbuf[0],&pCountMsg,sizeof(pCountMsg));

  02791	6a 0c		 push	 12			; 0000000cH
  02793	8d 45 e8	 lea	 eax, DWORD PTR _pCountMsg$[ebp]
  02796	50		 push	 eax
  02797	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _sendbuf$[ebp]
  0279d	51		 push	 ecx
  0279e	e8 00 00 00 00	 call	 _memcpy
  027a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1210 : 
; 1211 : 	DataSend(aIndex,(LPBYTE)sendbuf,lOfs);

  027a6	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]
  027ac	50		 push	 eax
  027ad	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _sendbuf$[ebp]
  027b3	51		 push	 ecx
  027b4	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  027b7	52		 push	 edx
  027b8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  027bd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@CGReqGetMa:

; 1212 : }

  027c0	5f		 pop	 edi
  027c1	5e		 pop	 esi
  027c2	5b		 pop	 ebx
  027c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  027c6	33 cd		 xor	 ecx, ebp
  027c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  027cd	8b e5		 mov	 esp, ebp
  027cf	5d		 pop	 ebp
  027d0	c2 04 00	 ret	 4
?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z ENDP ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
_TEXT	ENDS
PUBLIC	??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@ ; `string'
PUBLIC	??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@ ; `string'
PUBLIC	?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckSkillLevel
PUBLIC	??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkill
EXTRN	?gObjCalcMLSkillItemOption@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjCalcMLSkillItemOption
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
;	COMDAT ??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@
CONST	SEGMENT
??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@ DB '['
	DB	'MasterSkill] [%s][%s] Success - Add Magic List, Skill:%d Leve'
	DB	'l:%d MLPoint:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@
CONST	SEGMENT
??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@ DB '['
	DB	'MasterSkill] [%s][%s] Fail - Add Magic List, Skill:%d Level:%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@
CONST	SEGMENT
??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@ DB '['
	DB	'MasterSkill] [%s][%s] Fail(Use Trade Interface) - Add Magic L'
	DB	'ist', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iReqMLPoint$234707 = -52				; size = 4
_iSkillLevel$ = -48					; size = 4
_pMsg$ = -44						; size = 28
_iResult$ = -16						; size = 4
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z PROC ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkill
; _this$ = ecx

; 1215 : {

  027e0	55		 push	 ebp
  027e1	8b ec		 mov	 ebp, esp
  027e3	83 ec 74	 sub	 esp, 116		; 00000074H
  027e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  027eb	33 c5		 xor	 eax, ebp
  027ed	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  027f0	53		 push	 ebx
  027f1	56		 push	 esi
  027f2	57		 push	 edi
  027f3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1216 : 	if( !gObjIsConnected(aIndex) )

  027f6	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  027f9	50		 push	 eax
  027fa	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  027ff	83 c4 04	 add	 esp, 4
  02802	85 c0		 test	 eax, eax
  02804	75 11		 jne	 SHORT $LN11@CGReqGetMa@2

; 1217 : 	{
; 1218 : 		CloseClient(aIndex);

  02806	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02809	50		 push	 eax
  0280a	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  0280f	83 c4 04	 add	 esp, 4

; 1219 : 		return;

  02812	e9 27 03 00 00	 jmp	 $LN12@CGReqGetMa@2
$LN11@CGReqGetMa@2:

; 1220 : 	}
; 1221 : 
; 1222 : #ifdef DEBUG_CODE
; 1223 : 	LogAddC(2,"addskill:%d",lpMsg->AddSkill);
; 1224 : #endif
; 1225 : 
; 1226 : 	LPOBJ lpObj = &gObj[aIndex];

  02817	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0281a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02820	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02826	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 1227 : 	int iResult;
; 1228 : 
; 1229 : 	PMSG_ANS_MASTERLEVEL_SKILL pMsg;
; 1230 : 	PHeadSubSetB((LPBYTE)&pMsg,0xF3,0x52,sizeof(pMsg));

  02829	6a 1c		 push	 28			; 0000001cH
  0282b	6a 52		 push	 82			; 00000052H
  0282d	68 f3 00 00 00	 push	 243			; 000000f3H
  02832	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02835	50		 push	 eax
  02836	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0283b	83 c4 10	 add	 esp, 16			; 00000010H

; 1231 : 	pMsg.btResult = 0;

  0283e	c6 45 d8 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 1232 : 	pMsg.wLevelPoint = lpObj->MLPoint;

  02842	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02845	66 8b 88 e8 00
	00 00		 mov	 cx, WORD PTR [eax+232]
  0284c	66 89 4d da	 mov	 WORD PTR _pMsg$[ebp+6], cx

; 1233 : 	pMsg.dwSkillId = -1;

  02850	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+12], -1

; 1234 : 	pMsg.iLevel = 0;

  02857	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+16], 0

; 1235 : 	
; 1236 : 	if( lpObj->m_IfState.use == TRUE &&
; 1237 : 		lpObj->m_IfState.type == 1 )

  0285e	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02861	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  02867	83 e1 03	 and	 ecx, 3
  0286a	83 f9 01	 cmp	 ecx, 1
  0286d	75 5c		 jne	 SHORT $LN10@CGReqGetMa@2
  0286f	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02872	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  02878	c1 e9 06	 shr	 ecx, 6
  0287b	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  02881	83 f9 01	 cmp	 ecx, 1
  02884	75 45		 jne	 SHORT $LN10@CGReqGetMa@2

; 1238 : 	{
; 1239 : 		iResult = 6;

  02886	c7 45 f0 06 00
	00 00		 mov	 DWORD PTR _iResult$[ebp], 6

; 1240 : 		LogAddTD("[MasterSkill] [%s][%s] Fail(Use Trade Interface) - Add Magic List",lpObj->AccountID,lpObj->Name);

  0288d	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02890	83 c0 77	 add	 eax, 119		; 00000077H
  02893	50		 push	 eax
  02894	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02897	83 c1 6c	 add	 ecx, 108		; 0000006cH
  0289a	51		 push	 ecx
  0289b	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@
  028a0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  028a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1241 : 		pMsg.btResult = iResult;

  028a9	8a 45 f0	 mov	 al, BYTE PTR _iResult$[ebp]
  028ac	88 45 d8	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 1242 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  028af	0f b6 45 d5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  028b3	50		 push	 eax
  028b4	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  028b7	51		 push	 ecx
  028b8	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  028bb	8b 02		 mov	 eax, DWORD PTR [edx]
  028bd	50		 push	 eax
  028be	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  028c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1243 : 		return;

  028c6	e9 73 02 00 00	 jmp	 $LN12@CGReqGetMa@2
$LN10@CGReqGetMa@2:

; 1244 : 	}
; 1245 : 	
; 1246 : 	int iSkillLevel = this->CheckSkillLevel(lpObj,lpMsg->AddSkill) + this->GetSkillReqMLPoint(lpObj->Class,lpMsg->AddSkill);

  028cb	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  028ce	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  028d1	51		 push	 ecx
  028d2	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  028d5	52		 push	 edx
  028d6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  028d9	e8 00 00 00 00	 call	 ?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckSkillLevel
  028de	8b f0		 mov	 esi, eax
  028e0	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  028e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  028e6	51		 push	 ecx
  028e7	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  028ea	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  028f1	50		 push	 eax
  028f2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  028f5	e8 00 00 00 00	 call	 ?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint
  028fa	03 f0		 add	 esi, eax
  028fc	89 75 d0	 mov	 DWORD PTR _iSkillLevel$[ebp], esi

; 1247 : 
; 1248 : 	/*if( lpObj->MLPointSpent+lpObj->MLPoint != lpObj->MasterLevel )
; 1249 : 	{
; 1250 : 		LogAddTD("[MasterSkill] [%s][%s] Fail(levelpoint mismatch) - Add Magic List, Skill:%d Level:%d",
; 1251 : 			lpObj->AccountID,lpObj->Name,lpMsg->AddSkill,iSkillLevel);
; 1252 : 	}*/
; 1253 : 
; 1254 : 	iResult = this->CheckSkillCondition(lpObj,lpMsg->AddSkill,iSkillLevel);

  028ff	8b 45 d0	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  02902	50		 push	 eax
  02903	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  02906	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02909	52		 push	 edx
  0290a	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0290d	50		 push	 eax
  0290e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02911	e8 00 00 00 00	 call	 ?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckSkillCondition
  02916	89 45 f0	 mov	 DWORD PTR _iResult$[ebp], eax

; 1255 : 
; 1256 : 	if( iResult == 1 )

  02919	83 7d f0 01	 cmp	 DWORD PTR _iResult$[ebp], 1
  0291d	0f 85 fe 01 00
	00		 jne	 $LN9@CGReqGetMa@2

; 1257 : 	{
; 1258 : 		if( this->gObjMagicAdd_MLS(lpObj,lpMsg->AddSkill,iSkillLevel) < 0 )

  02923	8b 45 d0	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  02926	50		 push	 eax
  02927	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  0292a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0292d	52		 push	 edx
  0292e	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02931	50		 push	 eax
  02932	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02935	e8 00 00 00 00	 call	 ?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS
  0293a	85 c0		 test	 eax, eax
  0293c	7d 33		 jge	 SHORT $LN8@CGReqGetMa@2

; 1259 : 		{
; 1260 : 			iResult = 5;

  0293e	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _iResult$[ebp], 5

; 1261 : 			LogAddTD("[MasterSkill] [%s][%s] Fail - Add Magic List, Skill:%d Level:%d",
; 1262 : 				lpObj->AccountID,lpObj->Name,lpMsg->AddSkill,iSkillLevel);

  02945	8b 45 d0	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  02948	50		 push	 eax
  02949	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  0294c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0294f	52		 push	 edx
  02950	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02953	83 c0 77	 add	 eax, 119		; 00000077H
  02956	50		 push	 eax
  02957	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0295a	83 c1 6c	 add	 ecx, 108		; 0000006cH
  0295d	51		 push	 ecx
  0295e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@
  02963	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02969	83 c4 14	 add	 esp, 20			; 00000014H

; 1263 : 		}
; 1264 : 		else

  0296c	e9 ae 01 00 00	 jmp	 $LN7@CGReqGetMa@2
$LN8@CGReqGetMa@2:

; 1265 : 		{
; 1266 : 			int iReqMLPoint = this->GetSkillReqMLPoint(lpObj->Class,lpMsg->AddSkill);

  02971	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  02974	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02977	51		 push	 ecx
  02978	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0297b	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  02982	50		 push	 eax
  02983	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02986	e8 00 00 00 00	 call	 ?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint
  0298b	89 45 cc	 mov	 DWORD PTR _iReqMLPoint$234707[ebp], eax

; 1267 : 
; 1268 : 			if( iReqMLPoint < 0 )

  0298e	83 7d cc 00	 cmp	 DWORD PTR _iReqMLPoint$234707[ebp], 0
  02992	7d 05		 jge	 SHORT $LN6@CGReqGetMa@2

; 1269 : 				return;

  02994	e9 a5 01 00 00	 jmp	 $LN12@CGReqGetMa@2
$LN6@CGReqGetMa@2:

; 1270 : 
; 1271 : 			lpObj->MLPoint -= iReqMLPoint;

  02999	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0299c	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  029a2	2b 4d cc	 sub	 ecx, DWORD PTR _iReqMLPoint$234707[ebp]
  029a5	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  029a8	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx

; 1272 : 			lpObj->MLInfoLoad += iReqMLPoint;

  029ae	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029b1	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  029b7	03 4d cc	 add	 ecx, DWORD PTR _iReqMLPoint$234707[ebp]
  029ba	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  029bd	89 8a ec 00 00
	00		 mov	 DWORD PTR [edx+236], ecx

; 1273 : 
; 1274 : 			pMsg.btResult = iResult;

  029c3	8a 45 f0	 mov	 al, BYTE PTR _iResult$[ebp]
  029c6	88 45 d8	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 1275 : 			pMsg.wLevelPoint = lpObj->MLPoint;

  029c9	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029cc	66 8b 88 e8 00
	00 00		 mov	 cx, WORD PTR [eax+232]
  029d3	66 89 4d da	 mov	 WORD PTR _pMsg$[ebp+6], cx

; 1276 : 			pMsg.btMasterSkillId = this->GetMasterSkillUIIndex(lpObj->Class,lpMsg->AddSkill);

  029d7	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  029da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  029dd	51		 push	 ecx
  029de	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  029e1	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  029e8	50		 push	 eax
  029e9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  029ec	e8 00 00 00 00	 call	 ?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
  029f1	88 45 dc	 mov	 BYTE PTR _pMsg$[ebp+8], al

; 1277 : 			pMsg.dwSkillId = lpMsg->AddSkill;

  029f4	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  029f7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  029fa	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+12], ecx

; 1278 : 			pMsg.iLevel = iSkillLevel;

  029fd	8b 45 d0	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  02a00	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+16], eax

; 1279 : 
; 1280 : 			if( this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel) > 0.0f )

  02a03	8b 45 d0	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  02a06	50		 push	 eax
  02a07	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  02a0a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02a0d	52		 push	 edx
  02a0e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  02a13	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  02a18	50		 push	 eax
  02a19	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02a1c	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  02a21	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  02a27	df e0		 fnstsw	 ax
  02a29	f6 c4 41	 test	 ah, 65			; 00000041H
  02a2c	75 23		 jne	 SHORT $LN5@CGReqGetMa@2

; 1281 : 			{
; 1282 : 				pMsg.value = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel);

  02a2e	8b 45 d0	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  02a31	50		 push	 eax
  02a32	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  02a35	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02a38	52		 push	 edx
  02a39	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  02a3e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  02a43	50		 push	 eax
  02a44	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02a47	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  02a4c	d9 5d e8	 fstp	 DWORD PTR _pMsg$[ebp+20]

; 1283 : 			}
; 1284 : 			else

  02a4f	eb 09		 jmp	 SHORT $LN4@CGReqGetMa@2
$LN5@CGReqGetMa@2:

; 1285 : 			{
; 1286 : 				pMsg.value = -1.0f;

  02a51	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  02a57	d9 5d e8	 fstp	 DWORD PTR _pMsg$[ebp+20]
$LN4@CGReqGetMa@2:

; 1287 : 			}
; 1288 : 
; 1289 : 			if( iSkillLevel < MAX_SKILLTREE_LEVEL && this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel+1) > 0.0f )

  02a5a	83 7d d0 14	 cmp	 DWORD PTR _iSkillLevel$[ebp], 20 ; 00000014H
  02a5e	7d 54		 jge	 SHORT $LN3@CGReqGetMa@2
  02a60	8b 45 d0	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  02a63	83 c0 01	 add	 eax, 1
  02a66	50		 push	 eax
  02a67	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  02a6a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02a6d	52		 push	 edx
  02a6e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  02a73	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  02a78	50		 push	 eax
  02a79	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02a7c	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  02a81	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  02a87	df e0		 fnstsw	 ax
  02a89	f6 c4 41	 test	 ah, 65			; 00000041H
  02a8c	75 26		 jne	 SHORT $LN3@CGReqGetMa@2

; 1290 : 			{
; 1291 : 				pMsg.nextvalue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel+1);

  02a8e	8b 45 d0	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  02a91	83 c0 01	 add	 eax, 1
  02a94	50		 push	 eax
  02a95	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  02a98	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02a9b	52		 push	 edx
  02a9c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  02aa1	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  02aa6	50		 push	 eax
  02aa7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02aaa	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  02aaf	d9 5d ec	 fstp	 DWORD PTR _pMsg$[ebp+24]

; 1292 : 			}
; 1293 : 			else

  02ab2	eb 09		 jmp	 SHORT $LN2@CGReqGetMa@2
$LN3@CGReqGetMa@2:

; 1294 : 			{
; 1295 : 				pMsg.nextvalue = -1.0f;

  02ab4	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  02aba	d9 5d ec	 fstp	 DWORD PTR _pMsg$[ebp+24]
$LN2@CGReqGetMa@2:

; 1296 : 			}
; 1297 : 
; 1298 : 			this->AddPassiveSkill(lpObj,lpMsg->AddSkill,iSkillLevel);

  02abd	8b 45 d0	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  02ac0	50		 push	 eax
  02ac1	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  02ac4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02ac7	52		 push	 edx
  02ac8	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02acb	50		 push	 eax
  02acc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02acf	e8 00 00 00 00	 call	 ?AddPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::AddPassiveSkill

; 1299 : 			gObjCalCharacter(lpObj->m_Index);	//not original

  02ad4	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ad7	8b 08		 mov	 ecx, DWORD PTR [eax]
  02ad9	51		 push	 ecx
  02ada	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  02adf	83 c4 04	 add	 esp, 4

; 1300 : 			gObjCalcMLSkillItemOption(lpObj);

  02ae2	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ae5	50		 push	 eax
  02ae6	e8 00 00 00 00	 call	 ?gObjCalcMLSkillItemOption@@YAXPAUOBJECTSTRUCT@@@Z ; gObjCalcMLSkillItemOption
  02aeb	83 c4 04	 add	 esp, 4

; 1301 : 
; 1302 : 			LogAddTD("[MasterSkill] [%s][%s] Success - Add Magic List, Skill:%d Level:%d MLPoint:%d",
; 1303 : 				lpObj->AccountID,lpObj->Name,lpMsg->AddSkill,iSkillLevel,lpObj->MLPoint);

  02aee	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02af1	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  02af7	51		 push	 ecx
  02af8	8b 55 d0	 mov	 edx, DWORD PTR _iSkillLevel$[ebp]
  02afb	52		 push	 edx
  02afc	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  02aff	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02b02	51		 push	 ecx
  02b03	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02b06	83 c2 77	 add	 edx, 119		; 00000077H
  02b09	52		 push	 edx
  02b0a	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02b0d	83 c0 6c	 add	 eax, 108		; 0000006cH
  02b10	50		 push	 eax
  02b11	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@
  02b16	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02b1c	83 c4 18	 add	 esp, 24			; 00000018H
$LN7@CGReqGetMa@2:

; 1304 : 		}
; 1305 : 	}
; 1306 : 	else

  02b1f	eb 06		 jmp	 SHORT $LN1@CGReqGetMa@2
$LN9@CGReqGetMa@2:

; 1307 : 	{
; 1308 : 		pMsg.btResult = iResult;

  02b21	8a 45 f0	 mov	 al, BYTE PTR _iResult$[ebp]
  02b24	88 45 d8	 mov	 BYTE PTR _pMsg$[ebp+4], al
$LN1@CGReqGetMa@2:

; 1309 : 	}
; 1310 : 	
; 1311 : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  02b27	0f b6 45 d5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  02b2b	50		 push	 eax
  02b2c	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  02b2f	51		 push	 ecx
  02b30	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02b33	8b 02		 mov	 eax, DWORD PTR [edx]
  02b35	50		 push	 eax
  02b36	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02b3b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@CGReqGetMa@2:

; 1312 : }

  02b3e	5f		 pop	 edi
  02b3f	5e		 pop	 esi
  02b40	5b		 pop	 ebx
  02b41	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02b44	33 cd		 xor	 ecx, ebp
  02b46	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02b4b	8b e5		 mov	 esp, ebp
  02b4d	5d		 pop	 ebp
  02b4e	c2 08 00	 ret	 8
?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkill
_TEXT	ENDS
PUBLIC	?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
PUBLIC	?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense
PUBLIC	?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier
PUBLIC	?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark
PUBLIC	?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlind
PUBLIC	?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness
PUBLIC	?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation
PUBLIC	?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike
PUBLIC	?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm
PUBLIC	?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBless
PUBLIC	?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot
PUBLIC	?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillCure
PUBLIC	?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery
PUBLIC	?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison
PUBLIC	?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2
PUBLIC	?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit
PUBLIC	?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery
PUBLIC	?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty
PUBLIC	?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack
PUBLIC	??_C@_0GF@MJOPFOM@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@ ; `string'
PUBLIC	?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery
PUBLIC	?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
PUBLIC	?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear
PUBLIC	?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage
PUBLIC	?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage
PUBLIC	?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage
PUBLIC	?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage
PUBLIC	?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker
PUBLIC	?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker
PUBLIC	?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker
PUBLIC	?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow
PUBLIC	?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense
PUBLIC	?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack
PUBLIC	?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense
PUBLIC	?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce
PUBLIC	?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison
PUBLIC	?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison
PUBLIC	?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder
PUBLIC	?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower
PUBLIC	?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower
PUBLIC	?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction
PUBLIC	?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword2
PUBLIC	?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword1
PUBLIC	?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword5
PUBLIC	?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa
PUBLIC	?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4
PUBLIC	?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife
PUBLIC	?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock
PUBLIC	?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning
PUBLIC	?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSleep
PUBLIC	?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z ; CMasterLevelSkillTreeSystem::MLS_PowerSlash
PUBLIC	?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAttack
PUBLIC	?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDefense
PUBLIC	?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury
PUBLIC	?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_KnightBlow
PUBLIC	?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SuddenIce
PUBLIC	?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_FireBurst
PUBLIC	?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack
PUBLIC	?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife
PUBLIC	?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife
PUBLIC	?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife
PUBLIC	?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_Wheel
PUBLIC	?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_Healing
PUBLIC	?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense
PUBLIC	?RunningSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z ; CMasterLevelSkillTreeSystem::RunningSkill
EXTRN	?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z:PROC	; CObjUseSkill::SkillMonsterCall
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
EXTRN	?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z:PROC ; gObjAttack
;	COMDAT ??_C@_0GF@MJOPFOM@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@
CONST	SEGMENT
??_C@_0GF@MJOPFOM@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@ DB '[Invalid'
	DB	'TargetIndex][CMasterLevelSkillTreeSystem::RunningSkill_MLS][5'
	DB	'60] Index :%d , AccountID : %s ', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv346 = -92						; size = 4
tv72 = -92						; size = 4
_i$234793 = -24						; size = 4
_pMsg$234781 = -20					; size = 7
_iBaseMLS$ = -12					; size = 4
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_bCombo$ = 20						; size = 4
_x$ = 24						; size = 1
_y$ = 28						; size = 1
_dir$ = 32						; size = 1
_aTargetPos$ = 36					; size = 1
?RunningSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z PROC ; CMasterLevelSkillTreeSystem::RunningSkill
; _this$ = ecx

; 1315 : {

  02b60	55		 push	 ebp
  02b61	8b ec		 mov	 ebp, esp
  02b63	83 ec 5c	 sub	 esp, 92			; 0000005cH
  02b66	53		 push	 ebx
  02b67	56		 push	 esi
  02b68	57		 push	 edi
  02b69	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1316 : 	if( lpObj == NULL || lpMagic == NULL )

  02b6c	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  02b70	74 06		 je	 SHORT $LN76@RunningSki
  02b72	83 7d 10 00	 cmp	 DWORD PTR _lpMagic$[ebp], 0
  02b76	75 07		 jne	 SHORT $LN77@RunningSki
$LN76@RunningSki:

; 1317 : 		return false;

  02b78	33 c0		 xor	 eax, eax
  02b7a	e9 dd 08 00 00	 jmp	 $LN78@RunningSki
$LN77@RunningSki:

; 1318 : 
; 1319 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  02b7f	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02b82	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b88	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b8e	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 1320 : 
; 1321 : 	int iBaseMLS = this->GetBaseMasterLevelSkill(lpMagic->m_Skill);

  02b91	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02b94	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  02b97	51		 push	 ecx
  02b98	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02b9b	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  02ba0	89 45 f4	 mov	 DWORD PTR _iBaseMLS$[ebp], eax

; 1322 : 
; 1323 : 	switch( iBaseMLS )

  02ba3	8b 45 f4	 mov	 eax, DWORD PTR _iBaseMLS$[ebp]
  02ba6	89 45 a4	 mov	 DWORD PTR tv72[ebp], eax
  02ba9	8b 4d a4	 mov	 ecx, DWORD PTR tv72[ebp]
  02bac	81 e9 46 01 00
	00		 sub	 ecx, 326		; 00000146H
  02bb2	89 4d a4	 mov	 DWORD PTR tv72[ebp], ecx
  02bb5	81 7d a4 f7 00
	00 00		 cmp	 DWORD PTR tv72[ebp], 247 ; 000000f7H
  02bbc	0f 87 95 08 00
	00		 ja	 $LN74@RunningSki
  02bc2	8b 55 a4	 mov	 edx, DWORD PTR tv72[ebp]
  02bc5	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN82@RunningSki[edx]
  02bcc	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN83@RunningSki[eax*4]
$LN73@RunningSki:

; 1324 : 	{
; 1325 : 	case 403:
; 1326 : 		this->MLS_WizardMagicDefense(lpObj,aTargetIndex,lpMagic);

  02bd3	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02bd6	50		 push	 eax
  02bd7	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02bda	51		 push	 ecx
  02bdb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02bde	52		 push	 edx
  02bdf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02be2	e8 00 00 00 00	 call	 ?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense

; 1327 : 		break;

  02be7	e9 6b 08 00 00	 jmp	 $LN74@RunningSki
$LN72@RunningSki:

; 1328 : 	case 413:
; 1329 : 		this->MLS_Healing(lpObj,aTargetIndex,lpMagic);

  02bec	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02bef	50		 push	 eax
  02bf0	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02bf3	51		 push	 ecx
  02bf4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02bf7	52		 push	 edx
  02bf8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02bfb	e8 00 00 00 00	 call	 ?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_Healing

; 1330 : 		break;

  02c00	e9 52 08 00 00	 jmp	 $LN74@RunningSki
$LN71@RunningSki:

; 1331 : 	case 330:
; 1332 : 	case 332:
; 1333 : 	case 481:
; 1334 : 		this->MLS_Wheel(lpObj,lpMagic,aTargetIndex,bCombo);

  02c05	8b 45 14	 mov	 eax, DWORD PTR _bCombo$[ebp]
  02c08	50		 push	 eax
  02c09	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02c0c	51		 push	 ecx
  02c0d	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  02c10	52		 push	 edx
  02c11	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02c14	50		 push	 eax
  02c15	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c18	e8 00 00 00 00	 call	 ?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_Wheel

; 1335 : 		break;

  02c1d	e9 35 08 00 00	 jmp	 $LN74@RunningSki
$LN70@RunningSki:

; 1336 : 	case 360:
; 1337 : 		this->MLS_SkillFulKnightSkillAddLife(lpObj,lpMagic);

  02c22	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02c25	50		 push	 eax
  02c26	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02c29	51		 push	 ecx
  02c2a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c2d	e8 00 00 00 00	 call	 ?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife

; 1338 : 		break;

  02c32	e9 20 08 00 00	 jmp	 $LN74@RunningSki
$LN69@RunningSki:

; 1339 : 	case 356:
; 1340 : 		this->MLS_KnightSkillAddLife(lpObj,lpMagic);

  02c37	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02c3a	50		 push	 eax
  02c3b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02c3e	51		 push	 ecx
  02c3f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c42	e8 00 00 00 00	 call	 ?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife

; 1341 : 		break;

  02c47	e9 0b 08 00 00	 jmp	 $LN74@RunningSki
$LN68@RunningSki:

; 1342 : 	case 363:
; 1343 : 		this->MLS_SkillMasteryKnightSkillAddLife(lpObj,lpMagic);

  02c4c	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02c4f	50		 push	 eax
  02c50	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02c53	51		 push	 ecx
  02c54	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c57	e8 00 00 00 00	 call	 ?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife

; 1344 : 		break;

  02c5c	e9 f6 07 00 00	 jmp	 $LN74@RunningSki
$LN67@RunningSki:

; 1345 : 	case 512:
; 1346 : 	case 516:
; 1347 : 		this->MLS_DarkHorseAttack(lpObj,aTargetIndex,lpMagic);

  02c61	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02c64	50		 push	 eax
  02c65	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02c68	51		 push	 ecx
  02c69	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02c6c	52		 push	 edx
  02c6d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c70	e8 00 00 00 00	 call	 ?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack

; 1348 : 		break;

  02c75	e9 dd 07 00 00	 jmp	 $LN74@RunningSki
$LN66@RunningSki:

; 1349 : 	case 508:
; 1350 : 	case 514:
; 1351 : 		this->MLS_FireBurst(lpObj,aTargetIndex,lpMagic);

  02c7a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02c7d	50		 push	 eax
  02c7e	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02c81	51		 push	 ecx
  02c82	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02c85	52		 push	 edx
  02c86	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c89	e8 00 00 00 00	 call	 ?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_FireBurst

; 1352 : 		break;

  02c8e	e9 c4 07 00 00	 jmp	 $LN74@RunningSki
$LN65@RunningSki:

; 1353 : 	case 391:
; 1354 : 	case 393:
; 1355 : 		this->MLS_SuddenIce(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  02c93	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02c96	50		 push	 eax
  02c97	0f b6 4d 1c	 movzx	 ecx, BYTE PTR _y$[ebp]
  02c9b	51		 push	 ecx
  02c9c	0f b6 55 18	 movzx	 edx, BYTE PTR _x$[ebp]
  02ca0	52		 push	 edx
  02ca1	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02ca4	50		 push	 eax
  02ca5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02ca8	8b 11		 mov	 edx, DWORD PTR [ecx]
  02caa	52		 push	 edx
  02cab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02cae	e8 00 00 00 00	 call	 ?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SuddenIce

; 1356 : 		break;

  02cb3	e9 9f 07 00 00	 jmp	 $LN74@RunningSki
$LN64@RunningSki:

; 1357 : 	case 336:
; 1358 : 	case 339:
; 1359 : 	case 342:
; 1360 : 		this->MLS_KnightBlow(lpObj->m_Index,aTargetIndex,lpMagic,bCombo);

  02cb8	8b 45 14	 mov	 eax, DWORD PTR _bCombo$[ebp]
  02cbb	50		 push	 eax
  02cbc	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02cbf	51		 push	 ecx
  02cc0	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  02cc3	52		 push	 edx
  02cc4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02cc7	8b 08		 mov	 ecx, DWORD PTR [eax]
  02cc9	51		 push	 ecx
  02cca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ccd	e8 00 00 00 00	 call	 ?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_KnightBlow

; 1361 : 		break;

  02cd2	e9 80 07 00 00	 jmp	 $LN74@RunningSki
$LN63@RunningSki:

; 1362 : 	case 331:
; 1363 : 	case 333:
; 1364 : 		this->MLS_SkillBlowOfFury(lpObj->m_Index,lpMagic,x,y,aTargetIndex,bCombo);

  02cd7	8b 45 14	 mov	 eax, DWORD PTR _bCombo$[ebp]
  02cda	50		 push	 eax
  02cdb	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02cde	51		 push	 ecx
  02cdf	0f b6 55 1c	 movzx	 edx, BYTE PTR _y$[ebp]
  02ce3	52		 push	 edx
  02ce4	0f b6 45 18	 movzx	 eax, BYTE PTR _x$[ebp]
  02ce8	50		 push	 eax
  02ce9	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02cec	51		 push	 ecx
  02ced	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02cf0	8b 02		 mov	 eax, DWORD PTR [edx]
  02cf2	50		 push	 eax
  02cf3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02cf6	e8 00 00 00 00	 call	 ?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury

; 1365 : 		break;

  02cfb	e9 57 07 00 00	 jmp	 $LN74@RunningSki
$LN62@RunningSki:

; 1366 : 	case 417:
; 1367 : 		this->MLS_SkillDefense(lpObj->m_Index,aTargetIndex,lpMagic);

  02d00	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02d03	50		 push	 eax
  02d04	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02d07	51		 push	 ecx
  02d08	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02d0b	8b 02		 mov	 eax, DWORD PTR [edx]
  02d0d	50		 push	 eax
  02d0e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d11	e8 00 00 00 00	 call	 ?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDefense

; 1368 : 		break;

  02d16	e9 3c 07 00 00	 jmp	 $LN74@RunningSki
$LN61@RunningSki:

; 1369 : 	case 420:
; 1370 : 		this->MLS_SkillAttack(lpObj->m_Index,aTargetIndex,lpMagic);

  02d1b	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02d1e	50		 push	 eax
  02d1f	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02d22	51		 push	 ecx
  02d23	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02d26	8b 02		 mov	 eax, DWORD PTR [edx]
  02d28	50		 push	 eax
  02d29	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d2c	e8 00 00 00 00	 call	 ?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAttack

; 1371 : 		break;

  02d31	e9 21 07 00 00	 jmp	 $LN74@RunningSki
$LN60@RunningSki:

; 1372 : 	case 482:
; 1373 : 		this->MLS_PowerSlash(lpObj->m_Index,lpMagic,x,y,aTargetPos,aTargetIndex);

  02d36	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02d39	50		 push	 eax
  02d3a	0f b6 4d 24	 movzx	 ecx, BYTE PTR _aTargetPos$[ebp]
  02d3e	51		 push	 ecx
  02d3f	0f b6 55 1c	 movzx	 edx, BYTE PTR _y$[ebp]
  02d43	52		 push	 edx
  02d44	0f b6 45 18	 movzx	 eax, BYTE PTR _x$[ebp]
  02d48	50		 push	 eax
  02d49	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02d4c	51		 push	 ecx
  02d4d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02d50	8b 02		 mov	 eax, DWORD PTR [edx]
  02d52	50		 push	 eax
  02d53	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d56	e8 00 00 00 00	 call	 ?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z ; CMasterLevelSkillTreeSystem::MLS_PowerSlash

; 1374 : 		break;

  02d5b	e9 f7 06 00 00	 jmp	 $LN74@RunningSki
$LN59@RunningSki:

; 1375 : 	case 454:
; 1376 : 		this->MLS_SkillSleep(lpObj->m_Index,aTargetIndex,lpMagic);

  02d60	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02d63	50		 push	 eax
  02d64	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02d67	51		 push	 ecx
  02d68	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02d6b	8b 02		 mov	 eax, DWORD PTR [edx]
  02d6d	50		 push	 eax
  02d6e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d71	e8 00 00 00 00	 call	 ?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSleep

; 1377 : 		break;

  02d76	e9 dc 06 00 00	 jmp	 $LN74@RunningSki
$LN58@RunningSki:

; 1378 : 	case 455:
; 1379 : 		this->MLS_SkillChainLightning(lpObj->m_Index,aTargetIndex,lpMagic);

  02d7b	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02d7e	50		 push	 eax
  02d7f	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02d82	51		 push	 ecx
  02d83	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02d86	8b 02		 mov	 eax, DWORD PTR [edx]
  02d88	50		 push	 eax
  02d89	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d8c	e8 00 00 00 00	 call	 ?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning

; 1380 : 		break;

  02d91	e9 c1 06 00 00	 jmp	 $LN74@RunningSki
$LN57@RunningSki:

; 1381 : 	case 456:
; 1382 : 		this->MLS_SkillLightningShock(lpObj->m_Index,aTargetIndex,lpMagic);

  02d96	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02d99	50		 push	 eax
  02d9a	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02d9d	51		 push	 ecx
  02d9e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02da1	8b 02		 mov	 eax, DWORD PTR [edx]
  02da3	50		 push	 eax
  02da4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02da7	e8 00 00 00 00	 call	 ?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock

; 1383 : 		break;

  02dac	e9 a6 06 00 00	 jmp	 $LN74@RunningSki
$LN56@RunningSki:

; 1384 : 	case 458:
; 1385 : 	case 462:
; 1386 : 		this->MLS_SkillDrainLife(lpObj->m_Index,aTargetIndex,lpMagic);

  02db1	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02db4	50		 push	 eax
  02db5	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02db8	51		 push	 ecx
  02db9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02dbc	8b 02		 mov	 eax, DWORD PTR [edx]
  02dbe	50		 push	 eax
  02dbf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02dc2	e8 00 00 00 00	 call	 ?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife

; 1387 : 		break;

  02dc7	e9 8b 06 00 00	 jmp	 $LN74@RunningSki
$LN55@RunningSki:

; 1388 : 	case 326:
; 1389 : 		this->MLS_SkillSword4(lpObj,lpMagic,aTargetIndex,0);

  02dcc	6a 00		 push	 0
  02dce	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02dd1	50		 push	 eax
  02dd2	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02dd5	51		 push	 ecx
  02dd6	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02dd9	52		 push	 edx
  02dda	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ddd	e8 00 00 00 00	 call	 ?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4

; 1390 : 		break;

  02de2	e9 70 06 00 00	 jmp	 $LN74@RunningSki
$LN54@RunningSki:

; 1391 : 	case 479:
; 1392 : 		this->MLS_SkillSword4_Magumsa(lpObj,lpMagic,aTargetIndex,0);

  02de7	6a 00		 push	 0
  02de9	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02dec	50		 push	 eax
  02ded	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02df0	51		 push	 ecx
  02df1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02df4	52		 push	 edx
  02df5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02df8	e8 00 00 00 00	 call	 ?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa

; 1393 : 		break;

  02dfd	e9 55 06 00 00	 jmp	 $LN74@RunningSki
$LN53@RunningSki:

; 1394 : 	case 327:
; 1395 : 		this->MLS_SkillSword5(lpObj,lpMagic,aTargetIndex,0);

  02e02	6a 00		 push	 0
  02e04	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02e07	50		 push	 eax
  02e08	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02e0b	51		 push	 ecx
  02e0c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e0f	52		 push	 edx
  02e10	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e13	e8 00 00 00 00	 call	 ?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword5

; 1396 : 		break;

  02e18	e9 3a 06 00 00	 jmp	 $LN74@RunningSki
$LN52@RunningSki:

; 1397 : 	case 328:
; 1398 : 		this->MLS_SkillSword1(lpObj,lpMagic,aTargetIndex,0);

  02e1d	6a 00		 push	 0
  02e1f	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02e22	50		 push	 eax
  02e23	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02e26	51		 push	 ecx
  02e27	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e2a	52		 push	 edx
  02e2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e2e	e8 00 00 00 00	 call	 ?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword1

; 1399 : 		break;

  02e33	e9 1f 06 00 00	 jmp	 $LN74@RunningSki
$LN51@RunningSki:

; 1400 : 	case 329:
; 1401 : 		this->MLS_SkillSword2(lpObj,lpMagic,aTargetIndex,0);

  02e38	6a 00		 push	 0
  02e3a	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02e3d	50		 push	 eax
  02e3e	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02e41	51		 push	 ecx
  02e42	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e45	52		 push	 edx
  02e46	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e49	e8 00 00 00 00	 call	 ?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword2

; 1402 : 		break;

  02e4e	e9 04 06 00 00	 jmp	 $LN74@RunningSki
$LN50@RunningSki:

; 1403 : 	case 337:
; 1404 : 	case 340:
; 1405 : 	case 343:
; 1406 : 		this->MLS_SkillStrengthenDesruction(lpObj,lpMagic,x,y,aTargetIndex,0);

  02e53	6a 00		 push	 0
  02e55	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02e58	50		 push	 eax
  02e59	0f b6 4d 1c	 movzx	 ecx, BYTE PTR _y$[ebp]
  02e5d	51		 push	 ecx
  02e5e	0f b6 55 18	 movzx	 edx, BYTE PTR _x$[ebp]
  02e62	52		 push	 edx
  02e63	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02e66	50		 push	 eax
  02e67	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02e6a	51		 push	 ecx
  02e6b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e6e	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction

; 1407 : 		break;

  02e73	e9 df 05 00 00	 jmp	 $LN74@RunningSki
$LN49@RunningSki:

; 1408 : 	case 380:
; 1409 : 		this->MLS_SkillStrengthenMagicPower(lpObj,lpMagic,aTargetIndex);

  02e78	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02e7b	50		 push	 eax
  02e7c	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02e7f	51		 push	 ecx
  02e80	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e83	52		 push	 edx
  02e84	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e87	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower

; 1410 : 		break;

  02e8c	e9 c6 05 00 00	 jmp	 $LN74@RunningSki
$LN48@RunningSki:

; 1411 : 	case 383:
; 1412 : 		this->MLS_SkillSkillfulMagicPower(lpObj,lpMagic,aTargetIndex);

  02e91	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02e94	50		 push	 eax
  02e95	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02e98	51		 push	 ecx
  02e99	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e9c	52		 push	 edx
  02e9d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ea0	e8 00 00 00 00	 call	 ?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower

; 1413 : 		break;

  02ea5	e9 ad 05 00 00	 jmp	 $LN74@RunningSki
$LN47@RunningSki:

; 1414 : 	case 379:
; 1415 : 	case 480:
; 1416 : 		this->MLS_SkillStrengthenThunder(lpObj,lpMagic,aTargetIndex);

  02eaa	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02ead	50		 push	 eax
  02eae	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02eb1	51		 push	 ecx
  02eb2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02eb5	52		 push	 edx
  02eb6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02eb9	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder

; 1417 : 		break;

  02ebe	e9 94 05 00 00	 jmp	 $LN74@RunningSki
$LN46@RunningSki:

; 1418 : 	case 384:
; 1419 : 		this->MLS_SkillStrengthenPoison(lpObj,lpMagic,aTargetIndex);

  02ec3	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02ec6	50		 push	 eax
  02ec7	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02eca	51		 push	 ecx
  02ecb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02ece	52		 push	 edx
  02ecf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ed2	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison

; 1420 : 		break;

  02ed7	e9 7b 05 00 00	 jmp	 $LN74@RunningSki
$LN45@RunningSki:

; 1421 : 	case 387:
; 1422 : 		this->MLS_SkillStrengthenExPoison(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  02edc	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02edf	50		 push	 eax
  02ee0	0f b6 4d 1c	 movzx	 ecx, BYTE PTR _y$[ebp]
  02ee4	51		 push	 ecx
  02ee5	0f b6 55 18	 movzx	 edx, BYTE PTR _x$[ebp]
  02ee9	52		 push	 edx
  02eea	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02eed	50		 push	 eax
  02eee	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02ef1	8b 11		 mov	 edx, DWORD PTR [ecx]
  02ef3	52		 push	 edx
  02ef4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ef7	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison

; 1423 : 		break;

  02efc	e9 56 05 00 00	 jmp	 $LN74@RunningSki
$LN44@RunningSki:

; 1424 : 	case 389:
; 1425 : 	case 489:
; 1426 : 	case 491:
; 1427 : 		this->MLS_SkillStrengthenIce(lpObj,lpMagic,aTargetIndex);

  02f01	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02f04	50		 push	 eax
  02f05	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02f08	51		 push	 ecx
  02f09	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f0c	52		 push	 edx
  02f0d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f10	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce

; 1428 : 		break;

  02f15	e9 3d 05 00 00	 jmp	 $LN74@RunningSki
$LN43@RunningSki:

; 1429 : 	case 404:
; 1430 : 		this->MLS_SkillWizardMagicDefense(lpObj,lpMagic,aTargetIndex);

  02f1a	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  02f1d	50		 push	 eax
  02f1e	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02f21	51		 push	 ecx
  02f22	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f25	52		 push	 edx
  02f26	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f29	e8 00 00 00 00	 call	 ?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense

; 1431 : 		break;

  02f2e	e9 24 05 00 00	 jmp	 $LN74@RunningSki
$LN42@RunningSki:

; 1432 : 	case 422:
; 1433 : 		this->MLS_SkillStrengthenAttack(lpObj->m_Index,aTargetIndex,lpMagic);

  02f33	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02f36	50		 push	 eax
  02f37	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02f3a	51		 push	 ecx
  02f3b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f3e	8b 02		 mov	 eax, DWORD PTR [edx]
  02f40	50		 push	 eax
  02f41	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f44	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack

; 1434 : 		break;

  02f49	e9 09 05 00 00	 jmp	 $LN74@RunningSki
$LN41@RunningSki:

; 1435 : 	case 423:
; 1436 : 		this->MLS_SkillStrengthenDefense(lpObj->m_Index,aTargetIndex,lpMagic);

  02f4e	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02f51	50		 push	 eax
  02f52	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02f55	51		 push	 ecx
  02f56	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f59	8b 02		 mov	 eax, DWORD PTR [edx]
  02f5b	50		 push	 eax
  02f5c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f5f	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense

; 1437 : 		break;

  02f64	e9 ee 04 00 00	 jmp	 $LN74@RunningSki
$LN40@RunningSki:

; 1438 : 	case 441:
; 1439 : 		this->MLS_SkillInfinityArrow(lpObj->m_Index,aTargetIndex,lpMagic);

  02f69	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02f6c	50		 push	 eax
  02f6d	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  02f70	51		 push	 ecx
  02f71	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f74	8b 02		 mov	 eax, DWORD PTR [edx]
  02f76	50		 push	 eax
  02f77	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f7a	e8 00 00 00 00	 call	 ?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow

; 1440 : 		break;

  02f7f	e9 d3 04 00 00	 jmp	 $LN74@RunningSki
$LN39@RunningSki:

; 1441 : 	case 469:
; 1442 : 		this->MLS_SkillStrengthenBerserker(lpObj->m_Index,lpMagic);

  02f84	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02f87	50		 push	 eax
  02f88	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02f8b	8b 11		 mov	 edx, DWORD PTR [ecx]
  02f8d	52		 push	 edx
  02f8e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f91	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker

; 1443 : 		break;

  02f96	e9 bc 04 00 00	 jmp	 $LN74@RunningSki
$LN38@RunningSki:

; 1444 : 	case 470:
; 1445 : 		this->MLS_SkillSkillfulBerserker(lpObj->m_Index,lpMagic);

  02f9b	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02f9e	50		 push	 eax
  02f9f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02fa2	8b 11		 mov	 edx, DWORD PTR [ecx]
  02fa4	52		 push	 edx
  02fa5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fa8	e8 00 00 00 00	 call	 ?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker

; 1446 : 		break;

  02fad	e9 a5 04 00 00	 jmp	 $LN74@RunningSki
$LN37@RunningSki:

; 1447 : 	case 472:
; 1448 : 		this->MLS_SkillMasteryBerserker(lpObj->m_Index,lpMagic);

  02fb2	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02fb5	50		 push	 eax
  02fb6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02fb9	8b 11		 mov	 edx, DWORD PTR [ecx]
  02fbb	52		 push	 edx
  02fbc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fbf	e8 00 00 00 00	 call	 ?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker

; 1449 : 		break;

  02fc4	e9 8e 04 00 00	 jmp	 $LN74@RunningSki
$LN36@RunningSki:

; 1450 : 	case 511:
; 1451 : 		this->MLS_SkillStrendthenAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  02fc9	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02fcc	50		 push	 eax
  02fcd	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02fd0	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  02fd4	52		 push	 edx
  02fd5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02fd8	8b 08		 mov	 ecx, DWORD PTR [eax]
  02fda	51		 push	 ecx
  02fdb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fde	e8 00 00 00 00	 call	 ?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage

; 1452 : 		break;

  02fe3	e9 6f 04 00 00	 jmp	 $LN74@RunningSki
$LN35@RunningSki:

; 1453 : 	case 515:
; 1454 : 		this->MLS_SkillSkillFulAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  02fe8	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  02feb	50		 push	 eax
  02fec	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  02fef	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  02ff3	52		 push	 edx
  02ff4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ff7	8b 08		 mov	 ecx, DWORD PTR [eax]
  02ff9	51		 push	 ecx
  02ffa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ffd	e8 00 00 00 00	 call	 ?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage

; 1455 : 		break;

  03002	e9 50 04 00 00	 jmp	 $LN74@RunningSki
$LN34@RunningSki:

; 1456 : 	case 517:
; 1457 : 		this->MLS_SkillMasteryAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  03007	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0300a	50		 push	 eax
  0300b	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0300e	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  03012	52		 push	 edx
  03013	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03016	8b 08		 mov	 ecx, DWORD PTR [eax]
  03018	51		 push	 ecx
  03019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0301c	e8 00 00 00 00	 call	 ?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage

; 1458 : 		break;

  03021	e9 31 04 00 00	 jmp	 $LN74@RunningSki
$LN33@RunningSki:

; 1459 : 	case 522:
; 1460 : 		this->MLS_SkillFulMasteryAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  03026	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03029	50		 push	 eax
  0302a	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0302d	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  03031	52		 push	 edx
  03032	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03035	8b 08		 mov	 ecx, DWORD PTR [eax]
  03037	51		 push	 ecx
  03038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0303b	e8 00 00 00 00	 call	 ?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage

; 1461 : 		break;

  03040	e9 12 04 00 00	 jmp	 $LN74@RunningSki
$LN32@RunningSki:

; 1462 : 	case 509:
; 1463 : 		this->MLS_SkillStrengthenSpear(lpObj->m_Index,aTargetIndex,lpMagic);

  03045	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03048	50		 push	 eax
  03049	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0304c	51		 push	 ecx
  0304d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03050	8b 02		 mov	 eax, DWORD PTR [edx]
  03052	50		 push	 eax
  03053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03056	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear

; 1464 : 		break;

  0305b	e9 f7 03 00 00	 jmp	 $LN74@RunningSki
$LN31@RunningSki:

; 1465 : 	case 424:
; 1466 : 		gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  03060	6a 00		 push	 0
  03062	6a 00		 push	 0
  03064	6a 00		 push	 0
  03066	6a 00		 push	 0
  03068	6a 00		 push	 0
  0306a	6a 01		 push	 1
  0306c	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0306f	50		 push	 eax
  03070	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  03073	51		 push	 ecx
  03074	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03077	52		 push	 edx
  03078	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0307d	83 c4 24	 add	 esp, 36			; 00000024H

; 1467 : 		break;

  03080	e9 d2 03 00 00	 jmp	 $LN74@RunningSki
$LN30@RunningSki:

; 1468 : 	case 551:
; 1469 : 	case 552:
; 1470 : 	case 558:
; 1471 : 		this->MLS_SkillMonkBarrageJustOneTarget(lpObj->m_Index,lpMagic,aTargetIndex);

  03085	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  03088	50		 push	 eax
  03089	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0308c	51		 push	 ecx
  0308d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03090	8b 02		 mov	 eax, DWORD PTR [edx]
  03092	50		 push	 eax
  03093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03096	e8 00 00 00 00	 call	 ?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget

; 1472 : 		break;

  0309b	e9 b7 03 00 00	 jmp	 $LN74@RunningSki
$LN29@RunningSki:

; 1473 : 	case 554:
; 1474 : 	case 555:
; 1475 : 		this->MLS_SkillMonkBarrageJustOneTargetMastery(lpObj->m_Index,lpMagic,aTargetIndex);

  030a0	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  030a3	50		 push	 eax
  030a4	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  030a7	51		 push	 ecx
  030a8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  030ab	8b 02		 mov	 eax, DWORD PTR [edx]
  030ad	50		 push	 eax
  030ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  030b1	e8 00 00 00 00	 call	 ?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery

; 1476 : 		break;

  030b6	e9 9c 03 00 00	 jmp	 $LN74@RunningSki
$LN28@RunningSki:

; 1477 : 	case 559:
; 1478 : 		{
; 1479 : 			PMSG_MONK_DARKSIDE_RECV pMsg = {0};

  030bb	c6 45 ec 00	 mov	 BYTE PTR _pMsg$234781[ebp], 0
  030bf	33 c0		 xor	 eax, eax
  030c1	89 45 ed	 mov	 DWORD PTR _pMsg$234781[ebp+1], eax
  030c4	66 89 45 f1	 mov	 WORD PTR _pMsg$234781[ebp+5], ax

; 1480 : 			pMsg.TargetNumberH = SET_NUMBERH(aTargetIndex);

  030c8	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  030cb	c1 e8 08	 shr	 eax, 8
  030ce	88 45 f1	 mov	 BYTE PTR _pMsg$234781[ebp+5], al

; 1481 : 			pMsg.TargetNumberL = SET_NUMBERL(aTargetIndex);

  030d1	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  030d4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  030d9	88 45 f2	 mov	 BYTE PTR _pMsg$234781[ebp+6], al

; 1482 : 
; 1483 : 			pMsg.MagicNumberH = SET_NUMBERH(lpMagic->m_Skill);

  030dc	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  030df	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  030e2	c1 e9 08	 shr	 ecx, 8
  030e5	88 4d ef	 mov	 BYTE PTR _pMsg$234781[ebp+3], cl

; 1484 : 			pMsg.MagicNumberL = SET_NUMBERL(lpMagic->m_Skill);

  030e8	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  030eb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  030ee	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  030f4	88 4d f0	 mov	 BYTE PTR _pMsg$234781[ebp+4], cl

; 1485 : 
; 1486 : 			//GCMonkDarkSideTargetSelect(&pMsg,lpObj->m_Index);
; 1487 : 
; 1488 : 			if( lpObj->m_btDarkSideTargetNum )

  030f7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  030fa	0f be 88 26 26
	00 00		 movsx	 ecx, BYTE PTR [eax+9766]
  03101	85 c9		 test	 ecx, ecx
  03103	74 51		 je	 SHORT $LN27@RunningSki

; 1489 : 			{
; 1490 : 				for(int i = 0; i < 5; i++)

  03105	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$234793[ebp], 0
  0310c	eb 09		 jmp	 SHORT $LN26@RunningSki
$LN25@RunningSki:
  0310e	8b 45 e8	 mov	 eax, DWORD PTR _i$234793[ebp]
  03111	83 c0 01	 add	 eax, 1
  03114	89 45 e8	 mov	 DWORD PTR _i$234793[ebp], eax
$LN26@RunningSki:
  03117	83 7d e8 05	 cmp	 DWORD PTR _i$234793[ebp], 5
  0311b	7d 39		 jge	 SHORT $LN27@RunningSki

; 1491 : 				{
; 1492 : 					if( lpObj->m_wDarkSideTargetList[i] != 10000 )

  0311d	8b 45 e8	 mov	 eax, DWORD PTR _i$234793[ebp]
  03120	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03123	0f bf 94 41 28
	26 00 00	 movsx	 edx, WORD PTR [ecx+eax*2+9768]
  0312b	81 fa 10 27 00
	00		 cmp	 edx, 10000		; 00002710H
  03131	74 21		 je	 SHORT $LN23@RunningSki

; 1493 : 						MLS_SkillMonkBarrageJustOneTarget(lpObj->m_Index,lpMagic,lpObj->m_wDarkSideTargetList[i]);

  03133	8b 45 e8	 mov	 eax, DWORD PTR _i$234793[ebp]
  03136	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03139	0f bf 94 41 28
	26 00 00	 movsx	 edx, WORD PTR [ecx+eax*2+9768]
  03141	52		 push	 edx
  03142	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03145	50		 push	 eax
  03146	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03149	8b 11		 mov	 edx, DWORD PTR [ecx]
  0314b	52		 push	 edx
  0314c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0314f	e8 00 00 00 00	 call	 ?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
$LN23@RunningSki:

; 1494 : 				}

  03154	eb b8		 jmp	 SHORT $LN25@RunningSki
$LN27@RunningSki:

; 1495 : 			}
; 1496 : 		}
; 1497 : 		break;

  03156	e9 fc 02 00 00	 jmp	 $LN74@RunningSki
$LN22@RunningSki:

; 1498 : 	case 560:
; 1499 : 		{
; 1500 : 			if( !OBJMAX_RANGE(aTargetIndex) )

  0315b	83 7d 0c 00	 cmp	 DWORD PTR _aTargetIndex$[ebp], 0
  0315f	7d 09		 jge	 SHORT $LN80@RunningSki
  03161	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv346[ebp], 0
  03168	eb 0f		 jmp	 SHORT $LN81@RunningSki
$LN80@RunningSki:
  0316a	33 c0		 xor	 eax, eax
  0316c	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aTargetIndex$[ebp], 14999 ; 00003a97H
  03173	0f 9e c0	 setle	 al
  03176	89 45 a4	 mov	 DWORD PTR tv346[ebp], eax
$LN81@RunningSki:
  03179	83 7d a4 00	 cmp	 DWORD PTR tv346[ebp], 0
  0317d	75 20		 jne	 SHORT $LN21@RunningSki

; 1501 : 			{
; 1502 : 				LogAddTD("[InvalidTargetIndex][CMasterLevelSkillTreeSystem::RunningSkill_MLS][560] Index :%d , AccountID : %s ",
; 1503 : 					lpObj->m_Index,lpObj->AccountID);

  0317f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03182	83 c0 6c	 add	 eax, 108		; 0000006cH
  03185	50		 push	 eax
  03186	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03189	8b 11		 mov	 edx, DWORD PTR [ecx]
  0318b	52		 push	 edx
  0318c	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@MJOPFOM@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@
  03191	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  03197	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1504 : 				break;

  0319a	e9 b8 02 00 00	 jmp	 $LN74@RunningSki
$LN21@RunningSki:

; 1505 : 			}
; 1506 : 
; 1507 : 			this->MLS_SkillAreaMonsterAttack(lpObj->m_Index,lpMagic,gObj[aTargetIndex].X,gObj[aTargetIndex].Y,aTargetIndex,3,1,0,0);

  0319f	6a 00		 push	 0
  031a1	6a 00		 push	 0
  031a3	6a 01		 push	 1
  031a5	6a 03		 push	 3
  031a7	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  031aa	50		 push	 eax
  031ab	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  031ae	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  031b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  031ba	0f b6 84 0a 46
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+326]
  031c2	50		 push	 eax
  031c3	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  031c6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  031cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  031d2	0f b6 84 0a 44
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+324]
  031da	50		 push	 eax
  031db	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  031de	51		 push	 ecx
  031df	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  031e2	8b 02		 mov	 eax, DWORD PTR [edx]
  031e4	50		 push	 eax
  031e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  031e8	e8 00 00 00 00	 call	 ?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack

; 1508 : 		}
; 1509 : 		break;

  031ed	e9 65 02 00 00	 jmp	 $LN74@RunningSki
$LN20@RunningSki:

; 1510 : #pragma message("##### FIX ME #####")
; 1511 : 	case 569:
; 1512 : 	case 573:
; 1513 : 		MLS_SkillMonkBuffApplyParty(lpObj->m_Index,lpMagic);

  031f2	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  031f5	50		 push	 eax
  031f6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  031f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  031fb	52		 push	 edx
  031fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  031ff	e8 00 00 00 00	 call	 ?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty

; 1514 : 		break;

  03204	e9 4e 02 00 00	 jmp	 $LN74@RunningSki
$LN19@RunningSki:

; 1515 : 	case 572:
; 1516 : 		MLS_SkillMonkBuffApplyPartyMastery(lpObj->m_Index,lpMagic);

  03209	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0320c	50		 push	 eax
  0320d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03210	8b 11		 mov	 edx, DWORD PTR [ecx]
  03212	52		 push	 edx
  03213	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03216	e8 00 00 00 00	 call	 ?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery

; 1517 : 		break;

  0321b	e9 37 02 00 00	 jmp	 $LN74@RunningSki
$LN18@RunningSki:

; 1518 : 	//case 344:
; 1519 : 	//case 346:
; 1520 : 	//	gObjUseSkill.SkillBloodStorm(lpObj->m_Index,aTargetIndex,lpMagic,bCombo);
; 1521 : 	//	break;
; 1522 : 	case 390:
; 1523 : 	case 394:
; 1524 : 		this->MLS_SkillMeteorit(lpObj,aTargetIndex,lpMagic);

  03220	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03223	50		 push	 eax
  03224	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  03227	51		 push	 ecx
  03228	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0322b	52		 push	 edx
  0322c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0322f	e8 00 00 00 00	 call	 ?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit

; 1525 : 		break;

  03234	e9 1e 02 00 00	 jmp	 $LN74@RunningSki
$LN17@RunningSki:

; 1526 : 	case 395:
; 1527 : 		this->MLS_SkillHellFire2(lpObj->m_Index,aTargetIndex,lpMagic);

  03239	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0323c	50		 push	 eax
  0323d	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  03240	51		 push	 ecx
  03241	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03244	8b 02		 mov	 eax, DWORD PTR [edx]
  03246	50		 push	 eax
  03247	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0324a	e8 00 00 00 00	 call	 ?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2

; 1528 : 		break;

  0324f	e9 03 02 00 00	 jmp	 $LN74@RunningSki
$LN16@RunningSki:

; 1529 : 	case 495:
; 1530 : 	case 497:
; 1531 : 		this->MLS_SkillEarthPrison(lpObj->m_Index,aTargetIndex,lpMagic);

  03254	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03257	50		 push	 eax
  03258	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0325b	51		 push	 ecx
  0325c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0325f	8b 02		 mov	 eax, DWORD PTR [edx]
  03261	50		 push	 eax
  03262	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03265	e8 00 00 00 00	 call	 ?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison

; 1532 : 		break;

  0326a	e9 e8 01 00 00	 jmp	 $LN74@RunningSki
$LN15@RunningSki:

; 1533 : 	case 406:
; 1534 : 		this->MLS_SkillWizardMagicDefenseMastery(lpObj,lpMagic,aTargetIndex);

  0326f	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  03272	50		 push	 eax
  03273	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  03276	51		 push	 ecx
  03277	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0327a	52		 push	 edx
  0327b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0327e	e8 00 00 00 00	 call	 ?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery

; 1535 : 		break;

  03283	e9 cf 01 00 00	 jmp	 $LN74@RunningSki
$LN14@RunningSki:

; 1536 : 	case 425:
; 1537 : 		this->MLS_SkillCure(lpObj->m_Index,aTargetIndex,lpMagic);

  03288	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0328b	50		 push	 eax
  0328c	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0328f	51		 push	 ecx
  03290	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03293	8b 02		 mov	 eax, DWORD PTR [edx]
  03295	50		 push	 eax
  03296	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03299	e8 00 00 00 00	 call	 ?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillCure

; 1538 : 		break;

  0329e	e9 b4 01 00 00	 jmp	 $LN74@RunningSki
$LN13@RunningSki:

; 1539 : 	case 411:
; 1540 : 	case 431:
; 1541 : 		this->MLS_SkillMultiShot(lpObj->m_Index,lpMagic,aTargetPos,aTargetIndex);

  032a3	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  032a6	50		 push	 eax
  032a7	0f b6 4d 24	 movzx	 ecx, BYTE PTR _aTargetPos$[ebp]
  032ab	51		 push	 ecx
  032ac	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  032af	52		 push	 edx
  032b0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  032b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  032b5	51		 push	 ecx
  032b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  032b9	e8 00 00 00 00	 call	 ?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot

; 1542 : 		break;

  032be	e9 94 01 00 00	 jmp	 $LN74@RunningSki
$LN12@RunningSki:

; 1543 : 	case 432:
; 1544 : 		gObjUseSkill.SkillMonsterCall(lpObj->m_Index,597,lpObj->X-1,lpObj->Y+1);

  032c3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  032c6	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  032cd	83 c1 01	 add	 ecx, 1
  032d0	51		 push	 ecx
  032d1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  032d4	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  032db	83 e8 01	 sub	 eax, 1
  032de	50		 push	 eax
  032df	68 55 02 00 00	 push	 597			; 00000255H
  032e4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  032e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  032e9	52		 push	 edx
  032ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  032ef	e8 00 00 00 00	 call	 ?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z ; CObjUseSkill::SkillMonsterCall

; 1545 : 		break;

  032f4	e9 5e 01 00 00	 jmp	 $LN74@RunningSki
$LN11@RunningSki:

; 1546 : 	case 427:
; 1547 : 	case 434:
; 1548 : 		gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  032f9	6a 00		 push	 0
  032fb	6a 00		 push	 0
  032fd	6a 00		 push	 0
  032ff	6a 00		 push	 0
  03301	6a 00		 push	 0
  03303	6a 01		 push	 1
  03305	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03308	50		 push	 eax
  03309	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0330c	51		 push	 ecx
  0330d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03310	52		 push	 edx
  03311	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  03316	83 c4 24	 add	 esp, 36			; 00000024H

; 1549 : 		break;

  03319	e9 39 01 00 00	 jmp	 $LN74@RunningSki
$LN10@RunningSki:

; 1550 : 	case 430:
; 1551 : 	case 433:
; 1552 : 		this->MLS_SkillBless(lpObj->m_Index,aTargetIndex,lpMagic);

  0331e	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03321	50		 push	 eax
  03322	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  03325	51		 push	 ecx
  03326	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03329	8b 02		 mov	 eax, DWORD PTR [edx]
  0332b	50		 push	 eax
  0332c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0332f	e8 00 00 00 00	 call	 ?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBless

; 1553 : 		break;

  03334	e9 1e 01 00 00	 jmp	 $LN74@RunningSki
$LN9@RunningSki:

; 1554 : 	case 496:
; 1555 : 		this->MLS_SkillGiganticStorm(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  03339	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0333c	50		 push	 eax
  0333d	0f b6 4d 1c	 movzx	 ecx, BYTE PTR _y$[ebp]
  03341	51		 push	 ecx
  03342	0f b6 55 18	 movzx	 edx, BYTE PTR _x$[ebp]
  03346	52		 push	 edx
  03347	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0334a	50		 push	 eax
  0334b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0334e	8b 11		 mov	 edx, DWORD PTR [ecx]
  03350	52		 push	 edx
  03351	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03354	e8 00 00 00 00	 call	 ?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm

; 1556 : 		break;

  03359	e9 f9 00 00 00	 jmp	 $LN74@RunningSki
$LN8@RunningSki:

; 1557 : 	case 492:
; 1558 : 	case 494:
; 1559 : 		this->MLS_SkillFlameStrike(lpObj->m_Index,lpMagic,aTargetPos,aTargetIndex);

  0335e	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  03361	50		 push	 eax
  03362	0f b6 4d 24	 movzx	 ecx, BYTE PTR _aTargetPos$[ebp]
  03366	51		 push	 ecx
  03367	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0336a	52		 push	 edx
  0336b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0336e	8b 08		 mov	 ecx, DWORD PTR [eax]
  03370	51		 push	 ecx
  03371	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03374	e8 00 00 00 00	 call	 ?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike

; 1560 : 		break;

  03379	e9 d9 00 00 00	 jmp	 $LN74@RunningSki
$LN7@RunningSki:

; 1561 : 	case 460:
; 1562 : 		this->MLS_SkillInnovation(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  0337e	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  03381	50		 push	 eax
  03382	0f b6 4d 1c	 movzx	 ecx, BYTE PTR _y$[ebp]
  03386	51		 push	 ecx
  03387	0f b6 55 18	 movzx	 edx, BYTE PTR _x$[ebp]
  0338b	52		 push	 edx
  0338c	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0338f	50		 push	 eax
  03390	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03393	8b 11		 mov	 edx, DWORD PTR [ecx]
  03395	52		 push	 edx
  03396	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03399	e8 00 00 00 00	 call	 ?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation

; 1563 : 		break;

  0339e	e9 b4 00 00 00	 jmp	 $LN74@RunningSki
$LN6@RunningSki:

; 1564 : 	case 459:
; 1565 : 		this->MLS_SkillWeakness(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  033a3	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  033a6	50		 push	 eax
  033a7	0f b6 4d 1c	 movzx	 ecx, BYTE PTR _y$[ebp]
  033ab	51		 push	 ecx
  033ac	0f b6 55 18	 movzx	 edx, BYTE PTR _x$[ebp]
  033b0	52		 push	 edx
  033b1	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  033b4	50		 push	 eax
  033b5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  033b8	8b 11		 mov	 edx, DWORD PTR [ecx]
  033ba	52		 push	 edx
  033bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  033be	e8 00 00 00 00	 call	 ?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness

; 1566 : 		break;

  033c3	e9 8f 00 00 00	 jmp	 $LN74@RunningSki
$LN5@RunningSki:

; 1567 : 	case 461:
; 1568 : 	case 463:
; 1569 : 		this->MLS_SkillBlind(lpObj->m_Index,aTargetIndex,lpMagic);

  033c8	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  033cb	50		 push	 eax
  033cc	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  033cf	51		 push	 ecx
  033d0	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  033d3	8b 02		 mov	 eax, DWORD PTR [edx]
  033d5	50		 push	 eax
  033d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  033d9	e8 00 00 00 00	 call	 ?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlind

; 1570 : 		break;

  033de	eb 77		 jmp	 SHORT $LN74@RunningSki
$LN4@RunningSki:

; 1571 : 	case 519:
; 1572 : 		this->MLS_SkillElectricSpark(lpObj->m_Index,lpMagic,x,y,dir,aTargetPos,aTargetIndex);

  033e0	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  033e3	50		 push	 eax
  033e4	0f b6 4d 24	 movzx	 ecx, BYTE PTR _aTargetPos$[ebp]
  033e8	51		 push	 ecx
  033e9	0f b6 55 20	 movzx	 edx, BYTE PTR _dir$[ebp]
  033ed	52		 push	 edx
  033ee	0f b6 45 1c	 movzx	 eax, BYTE PTR _y$[ebp]
  033f2	50		 push	 eax
  033f3	0f b6 4d 18	 movzx	 ecx, BYTE PTR _x$[ebp]
  033f7	51		 push	 ecx
  033f8	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  033fb	52		 push	 edx
  033fc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  033ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  03401	51		 push	 ecx
  03402	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03405	e8 00 00 00 00	 call	 ?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark

; 1573 : 		break;

  0340a	eb 4b		 jmp	 SHORT $LN74@RunningSki
$LN3@RunningSki:

; 1574 : 	case 523:
; 1575 : 		this->MLS_SkillChaoticDesier(lpObj->m_Index,lpMagic,aTargetPos,aTargetIndex);

  0340c	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0340f	50		 push	 eax
  03410	0f b6 4d 24	 movzx	 ecx, BYTE PTR _aTargetPos$[ebp]
  03414	51		 push	 ecx
  03415	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  03418	52		 push	 edx
  03419	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0341c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0341e	51		 push	 ecx
  0341f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03422	e8 00 00 00 00	 call	 ?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier

; 1576 : 		break;

  03427	eb 2e		 jmp	 SHORT $LN74@RunningSki
$LN2@RunningSki:

; 1577 : 	case 521:
; 1578 : 	case 524:
; 1579 : 		this->MLS_SkillIronDefense(lpObj->m_Index,aTargetIndex,lpMagic);

  03429	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0342c	50		 push	 eax
  0342d	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  03430	51		 push	 ecx
  03431	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03434	8b 02		 mov	 eax, DWORD PTR [edx]
  03436	50		 push	 eax
  03437	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0343a	e8 00 00 00 00	 call	 ?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense

; 1580 : 		break;

  0343f	eb 16		 jmp	 SHORT $LN74@RunningSki
$LN1@RunningSki:

; 1581 : 	case 426:
; 1582 : 	case 429:
; 1583 : 		MLS_SkillPartyHeal(lpObj->m_Index,aTargetIndex,lpMagic);

  03441	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03444	50		 push	 eax
  03445	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  03448	51		 push	 ecx
  03449	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0344c	8b 02		 mov	 eax, DWORD PTR [edx]
  0344e	50		 push	 eax
  0344f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03452	e8 00 00 00 00	 call	 ?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
$LN74@RunningSki:

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  03457	b8 01 00 00 00	 mov	 eax, 1
$LN78@RunningSki:

; 1588 : }

  0345c	5f		 pop	 edi
  0345d	5e		 pop	 esi
  0345e	5b		 pop	 ebx
  0345f	8b e5		 mov	 esp, ebp
  03461	5d		 pop	 ebp
  03462	c2 20 00	 ret	 32			; 00000020H
  03465	8d 49 00	 npad	 3
$LN83@RunningSki:
  03468	00 00 00 00	 DD	 $LN55@RunningSki
  0346c	00 00 00 00	 DD	 $LN53@RunningSki
  03470	00 00 00 00	 DD	 $LN52@RunningSki
  03474	00 00 00 00	 DD	 $LN51@RunningSki
  03478	00 00 00 00	 DD	 $LN71@RunningSki
  0347c	00 00 00 00	 DD	 $LN63@RunningSki
  03480	00 00 00 00	 DD	 $LN64@RunningSki
  03484	00 00 00 00	 DD	 $LN50@RunningSki
  03488	00 00 00 00	 DD	 $LN69@RunningSki
  0348c	00 00 00 00	 DD	 $LN70@RunningSki
  03490	00 00 00 00	 DD	 $LN68@RunningSki
  03494	00 00 00 00	 DD	 $LN47@RunningSki
  03498	00 00 00 00	 DD	 $LN49@RunningSki
  0349c	00 00 00 00	 DD	 $LN48@RunningSki
  034a0	00 00 00 00	 DD	 $LN46@RunningSki
  034a4	00 00 00 00	 DD	 $LN45@RunningSki
  034a8	00 00 00 00	 DD	 $LN44@RunningSki
  034ac	00 00 00 00	 DD	 $LN18@RunningSki
  034b0	00 00 00 00	 DD	 $LN65@RunningSki
  034b4	00 00 00 00	 DD	 $LN17@RunningSki
  034b8	00 00 00 00	 DD	 $LN73@RunningSki
  034bc	00 00 00 00	 DD	 $LN43@RunningSki
  034c0	00 00 00 00	 DD	 $LN15@RunningSki
  034c4	00 00 00 00	 DD	 $LN13@RunningSki
  034c8	00 00 00 00	 DD	 $LN72@RunningSki
  034cc	00 00 00 00	 DD	 $LN62@RunningSki
  034d0	00 00 00 00	 DD	 $LN61@RunningSki
  034d4	00 00 00 00	 DD	 $LN42@RunningSki
  034d8	00 00 00 00	 DD	 $LN41@RunningSki
  034dc	00 00 00 00	 DD	 $LN31@RunningSki
  034e0	00 00 00 00	 DD	 $LN14@RunningSki
  034e4	00 00 00 00	 DD	 $LN1@RunningSki
  034e8	00 00 00 00	 DD	 $LN11@RunningSki
  034ec	00 00 00 00	 DD	 $LN10@RunningSki
  034f0	00 00 00 00	 DD	 $LN12@RunningSki
  034f4	00 00 00 00	 DD	 $LN40@RunningSki
  034f8	00 00 00 00	 DD	 $LN59@RunningSki
  034fc	00 00 00 00	 DD	 $LN58@RunningSki
  03500	00 00 00 00	 DD	 $LN57@RunningSki
  03504	00 00 00 00	 DD	 $LN56@RunningSki
  03508	00 00 00 00	 DD	 $LN6@RunningSki
  0350c	00 00 00 00	 DD	 $LN7@RunningSki
  03510	00 00 00 00	 DD	 $LN5@RunningSki
  03514	00 00 00 00	 DD	 $LN39@RunningSki
  03518	00 00 00 00	 DD	 $LN38@RunningSki
  0351c	00 00 00 00	 DD	 $LN37@RunningSki
  03520	00 00 00 00	 DD	 $LN54@RunningSki
  03524	00 00 00 00	 DD	 $LN60@RunningSki
  03528	00 00 00 00	 DD	 $LN8@RunningSki
  0352c	00 00 00 00	 DD	 $LN16@RunningSki
  03530	00 00 00 00	 DD	 $LN9@RunningSki
  03534	00 00 00 00	 DD	 $LN66@RunningSki
  03538	00 00 00 00	 DD	 $LN32@RunningSki
  0353c	00 00 00 00	 DD	 $LN36@RunningSki
  03540	00 00 00 00	 DD	 $LN67@RunningSki
  03544	00 00 00 00	 DD	 $LN35@RunningSki
  03548	00 00 00 00	 DD	 $LN34@RunningSki
  0354c	00 00 00 00	 DD	 $LN4@RunningSki
  03550	00 00 00 00	 DD	 $LN2@RunningSki
  03554	00 00 00 00	 DD	 $LN33@RunningSki
  03558	00 00 00 00	 DD	 $LN3@RunningSki
  0355c	00 00 00 00	 DD	 $LN30@RunningSki
  03560	00 00 00 00	 DD	 $LN29@RunningSki
  03564	00 00 00 00	 DD	 $LN28@RunningSki
  03568	00 00 00 00	 DD	 $LN22@RunningSki
  0356c	00 00 00 00	 DD	 $LN20@RunningSki
  03570	00 00 00 00	 DD	 $LN19@RunningSki
  03574	00 00 00 00	 DD	 $LN74@RunningSki
$LN82@RunningSki:
  03578	00		 DB	 0
  03579	01		 DB	 1
  0357a	02		 DB	 2
  0357b	03		 DB	 3
  0357c	04		 DB	 4
  0357d	05		 DB	 5
  0357e	04		 DB	 4
  0357f	05		 DB	 5
  03580	43		 DB	 67			; 00000043H
  03581	43		 DB	 67			; 00000043H
  03582	06		 DB	 6
  03583	07		 DB	 7
  03584	43		 DB	 67			; 00000043H
  03585	06		 DB	 6
  03586	07		 DB	 7
  03587	43		 DB	 67			; 00000043H
  03588	06		 DB	 6
  03589	07		 DB	 7
  0358a	43		 DB	 67			; 00000043H
  0358b	43		 DB	 67			; 00000043H
  0358c	43		 DB	 67			; 00000043H
  0358d	43		 DB	 67			; 00000043H
  0358e	43		 DB	 67			; 00000043H
  0358f	43		 DB	 67			; 00000043H
  03590	43		 DB	 67			; 00000043H
  03591	43		 DB	 67			; 00000043H
  03592	43		 DB	 67			; 00000043H
  03593	43		 DB	 67			; 00000043H
  03594	43		 DB	 67			; 00000043H
  03595	43		 DB	 67			; 00000043H
  03596	08		 DB	 8
  03597	43		 DB	 67			; 00000043H
  03598	43		 DB	 67			; 00000043H
  03599	43		 DB	 67			; 00000043H
  0359a	09		 DB	 9
  0359b	43		 DB	 67			; 00000043H
  0359c	43		 DB	 67			; 00000043H
  0359d	0a		 DB	 10			; 0000000aH
  0359e	43		 DB	 67			; 00000043H
  0359f	43		 DB	 67			; 00000043H
  035a0	43		 DB	 67			; 00000043H
  035a1	43		 DB	 67			; 00000043H
  035a2	43		 DB	 67			; 00000043H
  035a3	43		 DB	 67			; 00000043H
  035a4	43		 DB	 67			; 00000043H
  035a5	43		 DB	 67			; 00000043H
  035a6	43		 DB	 67			; 00000043H
  035a7	43		 DB	 67			; 00000043H
  035a8	43		 DB	 67			; 00000043H
  035a9	43		 DB	 67			; 00000043H
  035aa	43		 DB	 67			; 00000043H
  035ab	43		 DB	 67			; 00000043H
  035ac	43		 DB	 67			; 00000043H
  035ad	0b		 DB	 11			; 0000000bH
  035ae	0c		 DB	 12			; 0000000cH
  035af	43		 DB	 67			; 00000043H
  035b0	43		 DB	 67			; 00000043H
  035b1	0d		 DB	 13			; 0000000dH
  035b2	0e		 DB	 14			; 0000000eH
  035b3	43		 DB	 67			; 00000043H
  035b4	43		 DB	 67			; 00000043H
  035b5	0f		 DB	 15			; 0000000fH
  035b6	43		 DB	 67			; 00000043H
  035b7	10		 DB	 16			; 00000010H
  035b8	11		 DB	 17			; 00000011H
  035b9	12		 DB	 18			; 00000012H
  035ba	43		 DB	 67			; 00000043H
  035bb	12		 DB	 18			; 00000012H
  035bc	11		 DB	 17			; 00000011H
  035bd	13		 DB	 19			; 00000013H
  035be	43		 DB	 67			; 00000043H
  035bf	43		 DB	 67			; 00000043H
  035c0	43		 DB	 67			; 00000043H
  035c1	43		 DB	 67			; 00000043H
  035c2	43		 DB	 67			; 00000043H
  035c3	43		 DB	 67			; 00000043H
  035c4	43		 DB	 67			; 00000043H
  035c5	14		 DB	 20			; 00000014H
  035c6	15		 DB	 21			; 00000015H
  035c7	43		 DB	 67			; 00000043H
  035c8	16		 DB	 22			; 00000016H
  035c9	43		 DB	 67			; 00000043H
  035ca	43		 DB	 67			; 00000043H
  035cb	43		 DB	 67			; 00000043H
  035cc	43		 DB	 67			; 00000043H
  035cd	17		 DB	 23			; 00000017H
  035ce	43		 DB	 67			; 00000043H
  035cf	18		 DB	 24			; 00000018H
  035d0	43		 DB	 67			; 00000043H
  035d1	43		 DB	 67			; 00000043H
  035d2	43		 DB	 67			; 00000043H
  035d3	19		 DB	 25			; 00000019H
  035d4	43		 DB	 67			; 00000043H
  035d5	43		 DB	 67			; 00000043H
  035d6	1a		 DB	 26			; 0000001aH
  035d7	43		 DB	 67			; 00000043H
  035d8	1b		 DB	 27			; 0000001bH
  035d9	1c		 DB	 28			; 0000001cH
  035da	1d		 DB	 29			; 0000001dH
  035db	1e		 DB	 30			; 0000001eH
  035dc	1f		 DB	 31			; 0000001fH
  035dd	20		 DB	 32			; 00000020H
  035de	43		 DB	 67			; 00000043H
  035df	1f		 DB	 31			; 0000001fH
  035e0	21		 DB	 33			; 00000021H
  035e1	17		 DB	 23			; 00000017H
  035e2	22		 DB	 34			; 00000022H
  035e3	21		 DB	 33			; 00000021H
  035e4	20		 DB	 32			; 00000020H
  035e5	43		 DB	 67			; 00000043H
  035e6	43		 DB	 67			; 00000043H
  035e7	43		 DB	 67			; 00000043H
  035e8	43		 DB	 67			; 00000043H
  035e9	43		 DB	 67			; 00000043H
  035ea	43		 DB	 67			; 00000043H
  035eb	23		 DB	 35			; 00000023H
  035ec	43		 DB	 67			; 00000043H
  035ed	43		 DB	 67			; 00000043H
  035ee	43		 DB	 67			; 00000043H
  035ef	43		 DB	 67			; 00000043H
  035f0	43		 DB	 67			; 00000043H
  035f1	43		 DB	 67			; 00000043H
  035f2	43		 DB	 67			; 00000043H
  035f3	43		 DB	 67			; 00000043H
  035f4	43		 DB	 67			; 00000043H
  035f5	43		 DB	 67			; 00000043H
  035f6	43		 DB	 67			; 00000043H
  035f7	43		 DB	 67			; 00000043H
  035f8	24		 DB	 36			; 00000024H
  035f9	25		 DB	 37			; 00000025H
  035fa	26		 DB	 38			; 00000026H
  035fb	43		 DB	 67			; 00000043H
  035fc	27		 DB	 39			; 00000027H
  035fd	28		 DB	 40			; 00000028H
  035fe	29		 DB	 41			; 00000029H
  035ff	2a		 DB	 42			; 0000002aH
  03600	27		 DB	 39			; 00000027H
  03601	2a		 DB	 42			; 0000002aH
  03602	43		 DB	 67			; 00000043H
  03603	43		 DB	 67			; 00000043H
  03604	43		 DB	 67			; 00000043H
  03605	43		 DB	 67			; 00000043H
  03606	43		 DB	 67			; 00000043H
  03607	2b		 DB	 43			; 0000002bH
  03608	2c		 DB	 44			; 0000002cH
  03609	43		 DB	 67			; 00000043H
  0360a	2d		 DB	 45			; 0000002dH
  0360b	43		 DB	 67			; 00000043H
  0360c	43		 DB	 67			; 00000043H
  0360d	43		 DB	 67			; 00000043H
  0360e	43		 DB	 67			; 00000043H
  0360f	43		 DB	 67			; 00000043H
  03610	43		 DB	 67			; 00000043H
  03611	2e		 DB	 46			; 0000002eH
  03612	0b		 DB	 11			; 0000000bH
  03613	04		 DB	 4
  03614	2f		 DB	 47			; 0000002fH
  03615	43		 DB	 67			; 00000043H
  03616	43		 DB	 67			; 00000043H
  03617	43		 DB	 67			; 00000043H
  03618	43		 DB	 67			; 00000043H
  03619	43		 DB	 67			; 00000043H
  0361a	43		 DB	 67			; 00000043H
  0361b	10		 DB	 16			; 00000010H
  0361c	43		 DB	 67			; 00000043H
  0361d	10		 DB	 16			; 00000010H
  0361e	30		 DB	 48			; 00000030H
  0361f	43		 DB	 67			; 00000043H
  03620	30		 DB	 48			; 00000030H
  03621	31		 DB	 49			; 00000031H
  03622	32		 DB	 50			; 00000032H
  03623	31		 DB	 49			; 00000031H
  03624	43		 DB	 67			; 00000043H
  03625	43		 DB	 67			; 00000043H
  03626	43		 DB	 67			; 00000043H
  03627	43		 DB	 67			; 00000043H
  03628	43		 DB	 67			; 00000043H
  03629	43		 DB	 67			; 00000043H
  0362a	43		 DB	 67			; 00000043H
  0362b	43		 DB	 67			; 00000043H
  0362c	43		 DB	 67			; 00000043H
  0362d	43		 DB	 67			; 00000043H
  0362e	33		 DB	 51			; 00000033H
  0362f	34		 DB	 52			; 00000034H
  03630	43		 DB	 67			; 00000043H
  03631	35		 DB	 53			; 00000035H
  03632	36		 DB	 54			; 00000036H
  03633	43		 DB	 67			; 00000043H
  03634	33		 DB	 51			; 00000033H
  03635	37		 DB	 55			; 00000037H
  03636	36		 DB	 54			; 00000036H
  03637	38		 DB	 56			; 00000038H
  03638	43		 DB	 67			; 00000043H
  03639	39		 DB	 57			; 00000039H
  0363a	43		 DB	 67			; 00000043H
  0363b	3a		 DB	 58			; 0000003aH
  0363c	3b		 DB	 59			; 0000003bH
  0363d	3c		 DB	 60			; 0000003cH
  0363e	3a		 DB	 58			; 0000003aH
  0363f	43		 DB	 67			; 00000043H
  03640	43		 DB	 67			; 00000043H
  03641	43		 DB	 67			; 00000043H
  03642	43		 DB	 67			; 00000043H
  03643	43		 DB	 67			; 00000043H
  03644	43		 DB	 67			; 00000043H
  03645	43		 DB	 67			; 00000043H
  03646	43		 DB	 67			; 00000043H
  03647	43		 DB	 67			; 00000043H
  03648	43		 DB	 67			; 00000043H
  03649	43		 DB	 67			; 00000043H
  0364a	43		 DB	 67			; 00000043H
  0364b	43		 DB	 67			; 00000043H
  0364c	43		 DB	 67			; 00000043H
  0364d	43		 DB	 67			; 00000043H
  0364e	43		 DB	 67			; 00000043H
  0364f	43		 DB	 67			; 00000043H
  03650	43		 DB	 67			; 00000043H
  03651	43		 DB	 67			; 00000043H
  03652	43		 DB	 67			; 00000043H
  03653	43		 DB	 67			; 00000043H
  03654	43		 DB	 67			; 00000043H
  03655	43		 DB	 67			; 00000043H
  03656	43		 DB	 67			; 00000043H
  03657	43		 DB	 67			; 00000043H
  03658	43		 DB	 67			; 00000043H
  03659	3d		 DB	 61			; 0000003dH
  0365a	3d		 DB	 61			; 0000003dH
  0365b	43		 DB	 67			; 00000043H
  0365c	3e		 DB	 62			; 0000003eH
  0365d	3e		 DB	 62			; 0000003eH
  0365e	43		 DB	 67			; 00000043H
  0365f	43		 DB	 67			; 00000043H
  03660	3d		 DB	 61			; 0000003dH
  03661	3f		 DB	 63			; 0000003fH
  03662	40		 DB	 64			; 00000040H
  03663	43		 DB	 67			; 00000043H
  03664	43		 DB	 67			; 00000043H
  03665	43		 DB	 67			; 00000043H
  03666	43		 DB	 67			; 00000043H
  03667	43		 DB	 67			; 00000043H
  03668	43		 DB	 67			; 00000043H
  03669	43		 DB	 67			; 00000043H
  0366a	43		 DB	 67			; 00000043H
  0366b	41		 DB	 65			; 00000041H
  0366c	43		 DB	 67			; 00000043H
  0366d	43		 DB	 67			; 00000043H
  0366e	42		 DB	 66			; 00000042H
  0366f	41		 DB	 65			; 00000041H
?RunningSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z ENDP ; CMasterLevelSkillTreeSystem::RunningSkill
_TEXT	ENDS
EXTRN	?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z:PROC ; GCMagicAttackNumberSend
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
EXTRN	?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z:PROC ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel
EXTRN	?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A:BYTE ; g_SkillAdditionInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv217 = -100						; size = 8
tv209 = -100						; size = 8
tv200 = -96						; size = 4
_iSkillValidTime$ = -28					; size = 4
_iManaRate$ = -24					; size = 4
_fSkillValue$ = -20					; size = 4
_iDefenseValue$ = -16					; size = 4
_skillSuccess$ = -12					; size = 4
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense
; _this$ = ecx

; 1591 : {

  03670	55		 push	 ebp
  03671	8b ec		 mov	 ebp, esp
  03673	83 ec 64	 sub	 esp, 100		; 00000064H
  03676	53		 push	 ebx
  03677	56		 push	 esi
  03678	57		 push	 edi
  03679	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1592 : 	LPOBJ lpTargetObj	= &gObj[aTargetIndex];

  0367c	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0367f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03685	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0368b	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 1593 : 	int skillSuccess	= TRUE;

  0368e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 1594 : 	// ----
; 1595 : 	if( lpTargetObj->Type != OBJ_USER &&
; 1596 : 		lpTargetObj->m_RecallMon == -1 )

  03695	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03698	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0369c	83 f9 01	 cmp	 ecx, 1
  0369f	74 11		 je	 SHORT $LN5@MLS_Wizard
  036a1	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  036a4	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  036ab	75 05		 jne	 SHORT $LN5@MLS_Wizard

; 1597 : 	{
; 1598 : 		return;

  036ad	e9 9b 01 00 00	 jmp	 $LN6@MLS_Wizard
$LN5@MLS_Wizard:

; 1599 : 	}
; 1600 : 	// ----
; 1601 : 	if( lpObj->Class != CLASS_WIZARD &&
; 1602 : 		lpObj->Class != CLASS_MAGUMSA )

  036b2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  036b5	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  036bc	85 c9		 test	 ecx, ecx
  036be	74 14		 je	 SHORT $LN4@MLS_Wizard
  036c0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  036c3	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  036ca	83 f9 03	 cmp	 ecx, 3
  036cd	74 05		 je	 SHORT $LN4@MLS_Wizard

; 1603 : 	{
; 1604 : 		return;

  036cf	e9 79 01 00 00	 jmp	 $LN6@MLS_Wizard
$LN4@MLS_Wizard:

; 1605 : 	}
; 1606 : 	// ----
; 1607 : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  036d4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  036d7	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  036da	8b 90 2c 04 00
	00		 mov	 edx, DWORD PTR [eax+1068]
  036e0	3b 91 2c 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1068]
  036e6	74 05		 je	 SHORT $LN3@MLS_Wizard

; 1608 : 	{
; 1609 : 		return;

  036e8	e9 60 01 00 00	 jmp	 $LN6@MLS_Wizard
$LN3@MLS_Wizard:

; 1610 : 	}
; 1611 : 	// ----
; 1612 : 	float iDefenseValue	= g_SkillAdditionInfo.m_SoulBarrierDefenseStart + ((lpObj->Dexterity + lpObj->AddDexterity) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv1) + ((lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv2);

  036ed	0f b7 0d 54 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3156
  036f4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  036f7	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  036fe	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03701	0f bf 92 22 01
	00 00		 movsx	 edx, WORD PTR [edx+290]
  03708	03 c2		 add	 eax, edx
  0370a	0f b7 35 56 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3158
  03711	99		 cdq
  03712	f7 fe		 idiv	 esi
  03714	03 c8		 add	 ecx, eax
  03716	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03719	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  03720	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03723	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  0372a	03 c2		 add	 eax, edx
  0372c	0f b7 35 58 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3160
  03733	99		 cdq
  03734	f7 fe		 idiv	 esi
  03736	03 c8		 add	 ecx, eax
  03738	89 4d a0	 mov	 DWORD PTR tv200[ebp], ecx
  0373b	db 45 a0	 fild	 DWORD PTR tv200[ebp]
  0373e	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]

; 1613 : 	float fSkillValue	= this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill), lpMagic->m_Level);

  03741	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03744	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  03748	51		 push	 ecx
  03749	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0374c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0374f	50		 push	 eax
  03750	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  03755	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0375a	50		 push	 eax
  0375b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0375e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  03763	d9 5d ec	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 1614 : 	iDefenseValue		+= fSkillValue;

  03766	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  03769	d8 45 ec	 fadd	 DWORD PTR _fSkillValue$[ebp]
  0376c	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]

; 1615 : 	// ----
; 1616 : 	if( g_SkillAdditionInfo.m_SoulBarrierDefenseMax > 0 && iDefenseValue > g_SkillAdditionInfo.m_SoulBarrierDefenseMax )

  0376f	83 3d 5c 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164, 0
  03776	76 33		 jbe	 SHORT $LN2@MLS_Wizard
  03778	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  0377d	89 45 9c	 mov	 DWORD PTR tv209[ebp], eax
  03780	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv209[ebp+4], 0
  03787	df 6d 9c	 fild	 QWORD PTR tv209[ebp]
  0378a	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  0378d	de d9		 fcompp
  0378f	df e0		 fnstsw	 ax
  03791	f6 c4 41	 test	 ah, 65			; 00000041H
  03794	75 15		 jne	 SHORT $LN2@MLS_Wizard

; 1617 : 	{
; 1618 : 		iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseMax;

  03796	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  0379b	89 45 9c	 mov	 DWORD PTR tv217[ebp], eax
  0379e	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv217[ebp+4], 0
  037a5	df 6d 9c	 fild	 QWORD PTR tv217[ebp]
  037a8	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]
$LN2@MLS_Wizard:

; 1619 : 	}
; 1620 : 	// ----
; 1621 : 	int iManaRate		= g_SkillAdditionInfo.GetSoulBarrierManaRateLevel(lpMagic->m_Level);

  037ab	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  037ae	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  037b2	51		 push	 ecx
  037b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  037b8	e8 00 00 00 00	 call	 ?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel
  037bd	0f bf d0	 movsx	 edx, ax
  037c0	89 55 e8	 mov	 DWORD PTR _iManaRate$[ebp], edx

; 1622 : 	int iSkillValidTime	= g_SkillAdditionInfo.m_SoulBarrierTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierTimeDiv;

  037c3	0f b7 0d 60 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3168
  037ca	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  037cd	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  037d4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  037d7	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  037de	03 c2		 add	 eax, edx
  037e0	0f b7 35 62 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3170
  037e7	99		 cdq
  037e8	f7 fe		 idiv	 esi
  037ea	03 c8		 add	 ecx, eax
  037ec	89 4d e4	 mov	 DWORD PTR _iSkillValidTime$[ebp], ecx

; 1623 : 	// ----
; 1624 : 	if( g_SkillAdditionInfo.m_SoulBarrierTimeMax > 0 && iSkillValidTime > g_SkillAdditionInfo.m_SoulBarrierTimeMax )

  037ef	83 3d 64 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172, 0
  037f6	76 13		 jbe	 SHORT $LN1@MLS_Wizard
  037f8	8b 45 e4	 mov	 eax, DWORD PTR _iSkillValidTime$[ebp]
  037fb	3b 05 64 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172
  03801	76 08		 jbe	 SHORT $LN1@MLS_Wizard

; 1625 : 	{
; 1626 : 		iSkillValidTime = g_SkillAdditionInfo.m_SoulBarrierTimeMax;

  03803	a1 64 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172
  03808	89 45 e4	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax
$LN1@MLS_Wizard:

; 1627 : 	}
; 1628 : 
; 1629 : 	// ----
; 1630 : 	gObjApplyBuffEffectDuration(lpTargetObj, 4, 21, iDefenseValue, 28, iManaRate, iSkillValidTime);

  0380b	8b 45 e4	 mov	 eax, DWORD PTR _iSkillValidTime$[ebp]
  0380e	50		 push	 eax
  0380f	8b 4d e8	 mov	 ecx, DWORD PTR _iManaRate$[ebp]
  03812	51		 push	 ecx
  03813	6a 1c		 push	 28			; 0000001cH
  03815	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  03818	e8 00 00 00 00	 call	 __ftol2_sse
  0381d	50		 push	 eax
  0381e	6a 15		 push	 21			; 00000015H
  03820	6a 04		 push	 4
  03822	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  03825	52		 push	 edx
  03826	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0382b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1631 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  0382e	0f b6 45 f4	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  03832	50		 push	 eax
  03833	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03836	8b 11		 mov	 edx, DWORD PTR [ecx]
  03838	52		 push	 edx
  03839	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0383c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  03840	51		 push	 ecx
  03841	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03844	52		 push	 edx
  03845	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0384a	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_Wizard:

; 1632 : }

  0384d	5f		 pop	 edi
  0384e	5e		 pop	 esi
  0384f	5b		 pop	 ebx
  03850	8b e5		 mov	 esp, ebp
  03852	5d		 pop	 ebp
  03853	c2 0c 00	 ret	 12			; 0000000cH
?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense
_TEXT	ENDS
PUBLIC	__real@4059000000000000
EXTRN	?GCRecallMonLife@@YAXHHH@Z:PROC			; GCRecallMonLife
EXTRN	?IncAgro@TMonsterAIAgro@@QAEHHH@Z:PROC		; TMonsterAIAgro::IncAgro
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv84 = -100						; size = 4
tv247 = -96						; size = 4
tv85 = -96						; size = 4
_lpMonster$234877 = -28					; size = 4
_n$234872 = -24						; size = 4
_fSkillValue$ = -20					; size = 4
_fAddLife$ = -16					; size = 4
_skillSuccess$ = -12					; size = 4
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_Healing
; _this$ = ecx

; 1635 : {

  03860	55		 push	 ebp
  03861	8b ec		 mov	 ebp, esp
  03863	83 ec 64	 sub	 esp, 100		; 00000064H
  03866	53		 push	 ebx
  03867	56		 push	 esi
  03868	57		 push	 edi
  03869	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1636 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0386c	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0386f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03875	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0387b	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 1637 : 	int skillSuccess = TRUE;

  0387e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 1638 : 
; 1639 : 	if( lpTargetObj->Type != OBJ_USER &&
; 1640 : 		lpTargetObj->m_RecallMon == -1 )

  03885	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03888	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0388c	83 f9 01	 cmp	 ecx, 1
  0388f	74 11		 je	 SHORT $LN14@MLS_Healin
  03891	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03894	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  0389b	75 05		 jne	 SHORT $LN14@MLS_Healin

; 1641 : 		return;

  0389d	e9 7b 02 00 00	 jmp	 $LN15@MLS_Healin
$LN14@MLS_Healin:

; 1642 : 
; 1643 : 	if( lpObj->Class != CLASS_ELF )

  038a2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  038a5	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  038ac	83 f9 02	 cmp	 ecx, 2
  038af	74 05		 je	 SHORT $LN13@MLS_Healin

; 1644 : 		return;

  038b1	e9 67 02 00 00	 jmp	 $LN15@MLS_Healin
$LN13@MLS_Healin:

; 1645 : 
; 1646 : 	if( CC_MAP_RANGE(lpObj->MapNumber) )

  038b6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  038b9	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  038c0	83 f9 35	 cmp	 ecx, 53			; 00000035H
  038c3	75 09		 jne	 SHORT $LN19@MLS_Healin
  038c5	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  038cc	eb 33		 jmp	 SHORT $LN20@MLS_Healin
$LN19@MLS_Healin:
  038ce	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  038d1	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  038d8	83 f8 12	 cmp	 eax, 18			; 00000012H
  038db	7d 09		 jge	 SHORT $LN17@MLS_Healin
  038dd	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
  038e4	eb 15		 jmp	 SHORT $LN18@MLS_Healin
$LN17@MLS_Healin:
  038e6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  038e9	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  038f0	33 c0		 xor	 eax, eax
  038f2	83 fa 17	 cmp	 edx, 23			; 00000017H
  038f5	0f 9e c0	 setle	 al
  038f8	89 45 9c	 mov	 DWORD PTR tv84[ebp], eax
$LN18@MLS_Healin:
  038fb	8b 4d 9c	 mov	 ecx, DWORD PTR tv84[ebp]
  038fe	89 4d a0	 mov	 DWORD PTR tv85[ebp], ecx
$LN20@MLS_Healin:
  03901	83 7d a0 00	 cmp	 DWORD PTR tv85[ebp], 0
  03905	74 11		 je	 SHORT $LN11@MLS_Healin

; 1647 : 	{
; 1648 : 		if( lpObj->m_Index != lpTargetObj->m_Index )

  03907	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0390a	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0390d	8b 10		 mov	 edx, DWORD PTR [eax]
  0390f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  03911	74 05		 je	 SHORT $LN11@MLS_Healin

; 1649 : 			return;

  03913	e9 05 02 00 00	 jmp	 $LN15@MLS_Healin
$LN11@MLS_Healin:

; 1650 : 	}
; 1651 : 
; 1652 : 	float fAddLife = 5+(lpObj->Energy+lpObj->AddEnergy)/5;

  03918	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0391b	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  03922	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03925	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  0392c	03 c2		 add	 eax, edx
  0392e	99		 cdq
  0392f	b9 05 00 00 00	 mov	 ecx, 5
  03934	f7 f9		 idiv	 ecx
  03936	83 c0 05	 add	 eax, 5
  03939	89 45 a0	 mov	 DWORD PTR tv247[ebp], eax
  0393c	db 45 a0	 fild	 DWORD PTR tv247[ebp]
  0393f	d9 5d f0	 fstp	 DWORD PTR _fAddLife$[ebp]

; 1653 : 
; 1654 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  03942	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03945	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  03949	51		 push	 ecx
  0394a	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0394d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  03950	50		 push	 eax
  03951	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  03956	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0395b	50		 push	 eax
  0395c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0395f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  03964	d9 5d ec	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 1655 : 	//LogAddTD("MLS_Healing %f + %f",fAddLife,fSkillValue);
; 1656 : 
; 1657 : 	if( fSkillValue != 0.0f )

  03967	d9 45 ec	 fld	 DWORD PTR _fSkillValue$[ebp]
  0396a	d9 ee		 fldz
  0396c	da e9		 fucompp
  0396e	df e0		 fnstsw	 ax
  03970	f6 c4 44	 test	 ah, 68			; 00000044H
  03973	7b 12		 jnp	 SHORT $LN10@MLS_Healin

; 1658 : 	{
; 1659 : 		fAddLife += fAddLife*fSkillValue/100.0f;

  03975	d9 45 f0	 fld	 DWORD PTR _fAddLife$[ebp]
  03978	d8 4d ec	 fmul	 DWORD PTR _fSkillValue$[ebp]
  0397b	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  03981	d8 45 f0	 fadd	 DWORD PTR _fAddLife$[ebp]
  03984	d9 5d f0	 fstp	 DWORD PTR _fAddLife$[ebp]
$LN10@MLS_Healin:

; 1660 : 	}
; 1661 : 
; 1662 : 	//LogAddTD("MLS_Healing %f + %f",lpTargetObj->Life,fAddLife);
; 1663 : 
; 1664 : 	lpTargetObj->Life += fAddLife;

  03987	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0398a	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  03990	d8 45 f0	 fadd	 DWORD PTR _fAddLife$[ebp]
  03993	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  03996	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 1665 : 
; 1666 : 	if( (lpTargetObj->MaxLife+lpTargetObj->AddLife) < lpTargetObj->Life )

  0399c	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0399f	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  039a5	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  039a8	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  039ae	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  039b1	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  039b7	de d9		 fcompp
  039b9	df e0		 fnstsw	 ax
  039bb	f6 c4 41	 test	 ah, 65			; 00000041H
  039be	75 1b		 jne	 SHORT $LN9@MLS_Healin

; 1667 : 		lpTargetObj->Life = lpTargetObj->MaxLife+lpTargetObj->AddLife;

  039c0	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  039c3	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  039c9	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  039cc	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  039d2	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  039d5	d9 9a fc 00 00
	00		 fstp	 DWORD PTR [edx+252]
$LN9@MLS_Healin:

; 1668 : 
; 1669 : 	if(lpTargetObj->Type == OBJ_USER)

  039db	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  039de	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  039e2	83 f9 01	 cmp	 ecx, 1
  039e5	0f 85 d7 00 00
	00		 jne	 $LN8@MLS_Healin

; 1670 : 	{
; 1671 : 		GCReFillSend(lpTargetObj->m_Index,(int)lpTargetObj->Life,0xFF,0,lpTargetObj->iShield);

  039eb	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  039ee	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  039f4	51		 push	 ecx
  039f5	6a 00		 push	 0
  039f7	68 ff 00 00 00	 push	 255			; 000000ffH
  039fc	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  039ff	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  03a05	e8 00 00 00 00	 call	 __ftol2_sse
  03a0a	50		 push	 eax
  03a0b	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03a0e	8b 08		 mov	 ecx, DWORD PTR [eax]
  03a10	51		 push	 ecx
  03a11	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  03a16	83 c4 14	 add	 esp, 20			; 00000014H

; 1672 : 
; 1673 : 		for(int n = 0; n < MAX_VIEWPORT; n++)

  03a19	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _n$234872[ebp], 0
  03a20	eb 09		 jmp	 SHORT $LN7@MLS_Healin
$LN6@MLS_Healin:
  03a22	8b 45 e8	 mov	 eax, DWORD PTR _n$234872[ebp]
  03a25	83 c0 01	 add	 eax, 1
  03a28	89 45 e8	 mov	 DWORD PTR _n$234872[ebp], eax
$LN7@MLS_Healin:
  03a2b	83 7d e8 4b	 cmp	 DWORD PTR _n$234872[ebp], 75 ; 0000004bH
  03a2f	0f 8d 8b 00 00
	00		 jge	 $LN5@MLS_Healin

; 1674 : 		{
; 1675 : 			if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  03a35	8b 45 e8	 mov	 eax, DWORD PTR _n$234872[ebp]
  03a38	6b c0 0c	 imul	 eax, 12			; 0000000cH
  03a3b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03a3e	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  03a46	83 fa 02	 cmp	 edx, 2
  03a49	75 70		 jne	 SHORT $LN3@MLS_Healin
  03a4b	8b 45 e8	 mov	 eax, DWORD PTR _n$234872[ebp]
  03a4e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  03a51	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03a54	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  03a5c	85 d2		 test	 edx, edx
  03a5e	74 5b		 je	 SHORT $LN3@MLS_Healin

; 1676 : 			{
; 1677 : 				LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  03a60	8b 45 e8	 mov	 eax, DWORD PTR _n$234872[ebp]
  03a63	6b c0 0c	 imul	 eax, 12			; 0000000cH
  03a66	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03a69	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  03a71	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  03a77	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03a7d	89 55 e4	 mov	 DWORD PTR _lpMonster$234877[ebp], edx

; 1678 : 				if(lpMonster->m_iCurrentAI != 0)

  03a80	8b 45 e4	 mov	 eax, DWORD PTR _lpMonster$234877[ebp]
  03a83	83 b8 78 1c 00
	00 00		 cmp	 DWORD PTR [eax+7288], 0
  03a8a	74 2f		 je	 SHORT $LN3@MLS_Healin

; 1679 : 				{
; 1680 : 					lpMonster->m_Agro.IncAgro(lpObj->m_Index,(lpObj->Energy / 5)/40);

  03a8c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03a8f	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  03a96	99		 cdq
  03a97	b9 05 00 00 00	 mov	 ecx, 5
  03a9c	f7 f9		 idiv	 ecx
  03a9e	99		 cdq
  03a9f	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  03aa4	f7 f9		 idiv	 ecx
  03aa6	50		 push	 eax
  03aa7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03aaa	8b 02		 mov	 eax, DWORD PTR [edx]
  03aac	50		 push	 eax
  03aad	8b 4d e4	 mov	 ecx, DWORD PTR _lpMonster$234877[ebp]
  03ab0	81 c1 94 1c 00
	00		 add	 ecx, 7316		; 00001c94H
  03ab6	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN3@MLS_Healin:

; 1681 : 				}
; 1682 : 			}
; 1683 : 		}

  03abb	e9 62 ff ff ff	 jmp	 $LN6@MLS_Healin
$LN5@MLS_Healin:

; 1684 : 	}
; 1685 : 	else if(lpTargetObj->m_RecallMon >= 0)

  03ac0	eb 3c		 jmp	 SHORT $LN1@MLS_Healin
$LN8@MLS_Healin:
  03ac2	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03ac5	83 b8 50 04 00
	00 00		 cmp	 DWORD PTR [eax+1104], 0
  03acc	7c 30		 jl	 SHORT $LN1@MLS_Healin

; 1686 : 	{
; 1687 : 		GCRecallMonLife(lpTargetObj->m_RecallMon,(int)lpTargetObj->MaxLife,(int)lpTargetObj->Life);

  03ace	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03ad1	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  03ad7	e8 00 00 00 00	 call	 __ftol2_sse
  03adc	50		 push	 eax
  03add	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  03ae0	d9 81 00 01 00
	00		 fld	 DWORD PTR [ecx+256]
  03ae6	e8 00 00 00 00	 call	 __ftol2_sse
  03aeb	50		 push	 eax
  03aec	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  03aef	8b 82 50 04 00
	00		 mov	 eax, DWORD PTR [edx+1104]
  03af5	50		 push	 eax
  03af6	e8 00 00 00 00	 call	 ?GCRecallMonLife@@YAXHHH@Z ; GCRecallMonLife
  03afb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@MLS_Healin:

; 1688 : 	}
; 1689 : 
; 1690 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  03afe	0f b6 45 f4	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  03b02	50		 push	 eax
  03b03	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  03b06	8b 11		 mov	 edx, DWORD PTR [ecx]
  03b08	52		 push	 edx
  03b09	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03b0c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  03b10	51		 push	 ecx
  03b11	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03b14	52		 push	 edx
  03b15	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  03b1a	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@MLS_Healin:

; 1691 : }

  03b1d	5f		 pop	 edi
  03b1e	5e		 pop	 esi
  03b1f	5b		 pop	 ebx
  03b20	8b e5		 mov	 esp, ebp
  03b22	5d		 pop	 ebp
  03b23	c2 0c 00	 ret	 12			; 0000000cH
?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_Healing
_TEXT	ENDS
PUBLIC	?GetCastleState@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCastleState
EXTRN	_rand:PROC
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?GetSkillDistance@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillDistance
EXTRN	?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjTargetGuildWarCheck
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iSkillDis$234913 = -36					; size = 4
_CallMonIndex$234909 = -32				; size = 4
_EnableAttack$ = -28					; size = 4
_DuelIndex$ = -24					; size = 4
_bAttack$ = -20						; size = 4
_HitCount$ = -16					; size = 4
_count$ = -12						; size = 4
_tObjNum$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_Wheel
; _this$ = ecx

; 1694 : {

  03b30	55		 push	 ebp
  03b31	8b ec		 mov	 ebp, esp
  03b33	83 ec 64	 sub	 esp, 100		; 00000064H
  03b36	53		 push	 ebx
  03b37	56		 push	 esi
  03b38	57		 push	 edi
  03b39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1695 : 	int tObjNum;
; 1696 : 	int count = 0;

  03b3c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 1697 : 	int HitCount = 0;

  03b43	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 1698 : 	int bAttack;
; 1699 : 	int DuelIndex = lpObj->m_iDuelUser;

  03b4a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03b4d	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  03b53	89 4d e8	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN23@MLS_Wheel:

; 1700 : 	int EnableAttack;
; 1701 : 
; 1702 : 	while ( true )

  03b56	b8 01 00 00 00	 mov	 eax, 1
  03b5b	85 c0		 test	 eax, eax
  03b5d	0f 84 91 02 00
	00		 je	 $LN24@MLS_Wheel

; 1703 : 	{
; 1704 : 		if(lpObj->VpPlayer2[count].state != 0)

  03b63	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  03b66	6b c0 0c	 imul	 eax, 12			; 0000000cH
  03b69	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03b6c	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  03b74	85 d2		 test	 edx, edx
  03b76	0f 84 62 02 00
	00		 je	 $LN21@MLS_Wheel

; 1705 : 		{
; 1706 : 			tObjNum = lpObj->VpPlayer2[count].number;

  03b7c	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  03b7f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  03b82	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03b85	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  03b8d	89 55 f8	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 1707 : 
; 1708 : 			if(tObjNum >= 0)

  03b90	83 7d f8 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  03b94	0f 8c 44 02 00
	00		 jl	 $LN21@MLS_Wheel

; 1709 : 			{
; 1710 : 				EnableAttack = 0;

  03b9a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 1711 : 
; 1712 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  03ba1	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  03ba4	6b c0 0c	 imul	 eax, 12			; 0000000cH
  03ba7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03baa	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  03bb2	83 fa 02	 cmp	 edx, 2
  03bb5	75 25		 jne	 SHORT $LN19@MLS_Wheel
  03bb7	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  03bba	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03bc0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03bc6	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  03bce	7d 0c		 jge	 SHORT $LN19@MLS_Wheel

; 1713 : 				{
; 1714 : 					EnableAttack = 1;

  03bd0	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  03bd7	e9 23 01 00 00	 jmp	 $LN18@MLS_Wheel
$LN19@MLS_Wheel:

; 1715 : 				}
; 1716 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  03bdc	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  03bdf	3b 45 10	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  03be2	74 08		 je	 SHORT $LN16@MLS_Wheel
  03be4	8b 45 e8	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  03be7	3b 45 f8	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  03bea	75 0c		 jne	 SHORT $LN17@MLS_Wheel
$LN16@MLS_Wheel:

; 1717 : 				{
; 1718 : 					EnableAttack = 1;

  03bec	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  03bf3	e9 07 01 00 00	 jmp	 $LN18@MLS_Wheel
$LN17@MLS_Wheel:

; 1719 : 				}
; 1720 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  03bf8	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  03bfb	6b c0 0c	 imul	 eax, 12			; 0000000cH
  03bfe	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03c01	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  03c09	83 fa 03	 cmp	 edx, 3
  03c0c	74 5b		 je	 SHORT $LN14@MLS_Wheel
  03c0e	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  03c11	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03c17	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03c1d	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  03c25	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  03c28	75 3f		 jne	 SHORT $LN14@MLS_Wheel
  03c2a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  03c2f	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  03c34	83 f8 07	 cmp	 eax, 7
  03c37	75 30		 jne	 SHORT $LN14@MLS_Wheel

; 1721 : 				{
; 1722 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  03c39	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03c3c	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  03c43	8b 55 f8	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  03c46	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  03c4c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03c51	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  03c59	3b ca		 cmp	 ecx, edx
  03c5b	74 07		 je	 SHORT $LN13@MLS_Wheel

; 1723 : 						EnableAttack = 1;

  03c5d	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN13@MLS_Wheel:

; 1724 : 				}
; 1725 : 				else

  03c64	e9 96 00 00 00	 jmp	 $LN18@MLS_Wheel
$LN14@MLS_Wheel:

; 1726 : 				{
; 1727 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  03c69	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  03c6c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03c72	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03c78	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  03c7b	89 55 e0	 mov	 DWORD PTR _CallMonIndex$234909[ebp], edx

; 1728 : 
; 1729 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  03c7e	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  03c81	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03c87	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03c8d	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  03c92	83 fa 02	 cmp	 edx, 2
  03c95	75 40		 jne	 SHORT $LN11@MLS_Wheel
  03c97	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  03c9a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03ca0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03ca6	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  03cae	7c 27		 jl	 SHORT $LN11@MLS_Wheel

; 1730 : 					{
; 1731 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  03cb0	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  03cb3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03cb9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03cbf	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  03cc6	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  03ccc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03cd1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  03cd4	89 4d e0	 mov	 DWORD PTR _CallMonIndex$234909[ebp], ecx
$LN11@MLS_Wheel:

; 1732 : 					}
; 1733 : 
; 1734 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  03cd7	8b 45 e0	 mov	 eax, DWORD PTR _CallMonIndex$234909[ebp]
  03cda	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03ce0	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03ce6	50		 push	 eax
  03ce7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03cea	51		 push	 ecx
  03ceb	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  03cf0	83 c4 08	 add	 esp, 8
  03cf3	83 f8 01	 cmp	 eax, 1
  03cf6	75 07		 jne	 SHORT $LN18@MLS_Wheel

; 1735 : 					{
; 1736 : 						EnableAttack = 1;

  03cf8	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN18@MLS_Wheel:

; 1737 : 					}
; 1738 : 				}
; 1739 : 
; 1740 : 				if(EnableAttack != 0)

  03cff	83 7d e4 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  03d03	0f 84 d5 00 00
	00		 je	 $LN21@MLS_Wheel

; 1741 : 				{
; 1742 : 					int iSkillDis = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  03d09	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  03d0c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  03d0f	51		 push	 ecx
  03d10	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  03d15	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance
  03d1a	89 45 dc	 mov	 DWORD PTR _iSkillDis$234913[ebp], eax

; 1743 : 
; 1744 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) <= iSkillDis )

  03d1d	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  03d20	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03d26	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03d2c	50		 push	 eax
  03d2d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03d30	51		 push	 ecx
  03d31	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  03d36	83 c4 08	 add	 esp, 8
  03d39	3b 45 dc	 cmp	 eax, DWORD PTR _iSkillDis$234913[ebp]
  03d3c	0f 8f 9c 00 00
	00		 jg	 $LN21@MLS_Wheel

; 1745 : 					{
; 1746 : 						bAttack = 0;

  03d42	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 1747 : 
; 1748 : 						if(HitCount > 15)

  03d49	83 7d f0 0f	 cmp	 DWORD PTR _HitCount$[ebp], 15 ; 0000000fH
  03d4d	7e 07		 jle	 SHORT $LN7@MLS_Wheel

; 1749 : 						{
; 1750 : 							bAttack = 0;

  03d4f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN7@MLS_Wheel:

; 1751 : 						}
; 1752 : 
; 1753 : 						if(HitCount >= 10)

  03d56	83 7d f0 0a	 cmp	 DWORD PTR _HitCount$[ebp], 10 ; 0000000aH
  03d5a	7c 1e		 jl	 SHORT $LN6@MLS_Wheel

; 1754 : 						{
; 1755 : 							if(rand()%2)

  03d5c	e8 00 00 00 00	 call	 _rand
  03d61	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  03d66	79 05		 jns	 SHORT $LN26@MLS_Wheel
  03d68	48		 dec	 eax
  03d69	83 c8 fe	 or	 eax, -2			; fffffffeH
  03d6c	40		 inc	 eax
$LN26@MLS_Wheel:
  03d6d	85 c0		 test	 eax, eax
  03d6f	74 07		 je	 SHORT $LN5@MLS_Wheel

; 1756 : 							{
; 1757 : 								bAttack = 1;

  03d71	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN5@MLS_Wheel:

; 1758 : 							}
; 1759 : 						}
; 1760 : 						else

  03d78	eb 07		 jmp	 SHORT $LN4@MLS_Wheel
$LN6@MLS_Wheel:

; 1761 : 						{
; 1762 : 							bAttack = 1;

  03d7a	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN4@MLS_Wheel:

; 1763 : 						}
; 1764 : 
; 1765 : 						if(bAttack != 0)

  03d81	83 7d ec 00	 cmp	 DWORD PTR _bAttack$[ebp], 0
  03d85	74 57		 je	 SHORT $LN21@MLS_Wheel

; 1766 : 						{
; 1767 : 
; 1768 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,0,1,0,isCombo,0,0);

  03d87	6a 00		 push	 0
  03d89	6a 00		 push	 0
  03d8b	8b 45 14	 mov	 eax, DWORD PTR _isCombo$[ebp]
  03d8e	50		 push	 eax
  03d8f	6a 00		 push	 0
  03d91	6a 01		 push	 1
  03d93	6a 00		 push	 0
  03d95	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  03d98	51		 push	 ecx
  03d99	8b 55 f8	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  03d9c	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  03da2	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03da8	52		 push	 edx
  03da9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03dac	50		 push	 eax
  03dad	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  03db2	83 c4 24	 add	 esp, 36			; 00000024H

; 1769 : 
; 1770 : 							if(isCombo != 0)

  03db5	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  03db9	74 23		 je	 SHORT $LN21@MLS_Wheel

; 1771 : 							{
; 1772 : 								GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,gObj[tObjNum].m_Index,1);

  03dbb	6a 01		 push	 1
  03dbd	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  03dc0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03dc6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03dcc	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  03dcf	52		 push	 edx
  03dd0	6a 3b		 push	 59			; 0000003bH
  03dd2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03dd5	50		 push	 eax
  03dd6	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  03ddb	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@MLS_Wheel:

; 1773 : 							}
; 1774 : 						}
; 1775 : 					}
; 1776 : 				}
; 1777 : 			}
; 1778 : 		}
; 1779 : 
; 1780 : 		count++;

  03dde	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  03de1	83 c0 01	 add	 eax, 1
  03de4	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax

; 1781 : 		if(count > MAX_VIEWPORT -1)

  03de7	83 7d f4 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  03deb	7e 02		 jle	 SHORT $LN1@MLS_Wheel

; 1782 : 		{
; 1783 : 			break;

  03ded	eb 05		 jmp	 SHORT $LN24@MLS_Wheel
$LN1@MLS_Wheel:

; 1784 : 		}
; 1785 : 	}

  03def	e9 62 fd ff ff	 jmp	 $LN23@MLS_Wheel
$LN24@MLS_Wheel:

; 1786 : }

  03df4	5f		 pop	 edi
  03df5	5e		 pop	 esi
  03df6	5b		 pop	 ebx
  03df7	8b e5		 mov	 esp, ebp
  03df9	5d		 pop	 ebp
  03dfa	c2 10 00	 ret	 16			; 00000010H
?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_Wheel
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\castlesiege.h
_TEXT	ENDS
;	COMDAT ?GetCastleState@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCastleState@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCastleState, COMDAT
; _this$ = ecx

; 314  : 	int GetCastleState(){return m_iCastleSiegeState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCastleState@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCastleState
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\newmasterlevelskilltreesystem.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword4
; _this$ = ecx

; 1789 : {

  03e00	55		 push	 ebp
  03e01	8b ec		 mov	 ebp, esp
  03e03	83 ec 48	 sub	 esp, 72			; 00000048H
  03e06	53		 push	 ebx
  03e07	56		 push	 esi
  03e08	57		 push	 edi
  03e09	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1790 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  03e0c	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  03e0f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03e15	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03e1b	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 1791 : 
; 1792 : 	if( !gObjIsConnected(lpObj->m_Index) )

  03e1e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03e21	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e23	51		 push	 ecx
  03e24	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03e29	83 c4 04	 add	 esp, 4
  03e2c	85 c0		 test	 eax, eax
  03e2e	75 02		 jne	 SHORT $LN5@MLS_SkillS

; 1793 : 		return;

  03e30	eb 71		 jmp	 SHORT $LN6@MLS_SkillS
$LN5@MLS_SkillS:

; 1794 : 
; 1795 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  03e32	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03e35	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e37	51		 push	 ecx
  03e38	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03e3d	83 c4 04	 add	 esp, 4
  03e40	85 c0		 test	 eax, eax
  03e42	75 02		 jne	 SHORT $LN4@MLS_SkillS

; 1796 : 		return;

  03e44	eb 5d		 jmp	 SHORT $LN6@MLS_SkillS
$LN4@MLS_SkillS:

; 1797 : 
; 1798 : 	if( lpObj->Type != OBJ_USER )

  03e46	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03e49	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  03e4d	83 f9 01	 cmp	 ecx, 1
  03e50	74 02		 je	 SHORT $LN3@MLS_SkillS

; 1799 : 		return;

  03e52	eb 4f		 jmp	 SHORT $LN6@MLS_SkillS
$LN3@MLS_SkillS:

; 1800 : 
; 1801 : 	if( lpObj->Class != CLASS_KNIGHT )

  03e54	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03e57	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  03e5e	83 f9 01	 cmp	 ecx, 1
  03e61	74 02		 je	 SHORT $LN2@MLS_SkillS

; 1802 : 		return;

  03e63	eb 3e		 jmp	 SHORT $LN6@MLS_SkillS
$LN2@MLS_SkillS:

; 1803 : 
; 1804 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  03e65	6a 00		 push	 0
  03e67	6a 00		 push	 0
  03e69	8b 45 14	 mov	 eax, DWORD PTR _isCombo$[ebp]
  03e6c	50		 push	 eax
  03e6d	6a 00		 push	 0
  03e6f	6a 01		 push	 1
  03e71	6a 00		 push	 0
  03e73	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  03e76	51		 push	 ecx
  03e77	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  03e7a	52		 push	 edx
  03e7b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03e7e	50		 push	 eax
  03e7f	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  03e84	83 c4 24	 add	 esp, 36			; 00000024H

; 1805 : 
; 1806 : 	if(isCombo != 0)

  03e87	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  03e8b	74 16		 je	 SHORT $LN6@MLS_SkillS

; 1807 : 	{
; 1808 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  03e8d	6a 01		 push	 1
  03e8f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03e92	8b 08		 mov	 ecx, DWORD PTR [eax]
  03e94	51		 push	 ecx
  03e95	6a 3b		 push	 59			; 0000003bH
  03e97	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03e9a	52		 push	 edx
  03e9b	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  03ea0	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS:

; 1809 : 	}
; 1810 : }

  03ea3	5f		 pop	 edi
  03ea4	5e		 pop	 esi
  03ea5	5b		 pop	 ebx
  03ea6	8b e5		 mov	 esp, ebp
  03ea8	5d		 pop	 ebp
  03ea9	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword4
; Function compile flags: /Odtp /ZI
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa
; _this$ = ecx

; 1813 : {

  03eb0	55		 push	 ebp
  03eb1	8b ec		 mov	 ebp, esp
  03eb3	83 ec 48	 sub	 esp, 72			; 00000048H
  03eb6	53		 push	 ebx
  03eb7	56		 push	 esi
  03eb8	57		 push	 edi
  03eb9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1814 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  03ebc	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  03ebf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03ec5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03ecb	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 1815 : 
; 1816 : 	if( !gObjIsConnected(lpObj->m_Index) )

  03ece	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03ed1	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ed3	51		 push	 ecx
  03ed4	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03ed9	83 c4 04	 add	 esp, 4
  03edc	85 c0		 test	 eax, eax
  03ede	75 02		 jne	 SHORT $LN5@MLS_SkillS@2

; 1817 : 		return;

  03ee0	eb 71		 jmp	 SHORT $LN6@MLS_SkillS@2
$LN5@MLS_SkillS@2:

; 1818 : 
; 1819 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  03ee2	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03ee5	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ee7	51		 push	 ecx
  03ee8	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03eed	83 c4 04	 add	 esp, 4
  03ef0	85 c0		 test	 eax, eax
  03ef2	75 02		 jne	 SHORT $LN4@MLS_SkillS@2

; 1820 : 		return;

  03ef4	eb 5d		 jmp	 SHORT $LN6@MLS_SkillS@2
$LN4@MLS_SkillS@2:

; 1821 : 
; 1822 : 	if( lpObj->Type != OBJ_USER )

  03ef6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03ef9	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  03efd	83 f9 01	 cmp	 ecx, 1
  03f00	74 02		 je	 SHORT $LN3@MLS_SkillS@2

; 1823 : 		return;

  03f02	eb 4f		 jmp	 SHORT $LN6@MLS_SkillS@2
$LN3@MLS_SkillS@2:

; 1824 : 
; 1825 : 	if( lpObj->Class != CLASS_MAGUMSA )

  03f04	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03f07	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  03f0e	83 f9 03	 cmp	 ecx, 3
  03f11	74 02		 je	 SHORT $LN2@MLS_SkillS@2

; 1826 : 		return;

  03f13	eb 3e		 jmp	 SHORT $LN6@MLS_SkillS@2
$LN2@MLS_SkillS@2:

; 1827 : 
; 1828 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  03f15	6a 00		 push	 0
  03f17	6a 00		 push	 0
  03f19	8b 45 14	 mov	 eax, DWORD PTR _isCombo$[ebp]
  03f1c	50		 push	 eax
  03f1d	6a 00		 push	 0
  03f1f	6a 01		 push	 1
  03f21	6a 00		 push	 0
  03f23	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  03f26	51		 push	 ecx
  03f27	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  03f2a	52		 push	 edx
  03f2b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03f2e	50		 push	 eax
  03f2f	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  03f34	83 c4 24	 add	 esp, 36			; 00000024H

; 1829 : 
; 1830 : 	if(isCombo != 0)

  03f37	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  03f3b	74 16		 je	 SHORT $LN6@MLS_SkillS@2

; 1831 : 	{
; 1832 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  03f3d	6a 01		 push	 1
  03f3f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03f42	8b 08		 mov	 ecx, DWORD PTR [eax]
  03f44	51		 push	 ecx
  03f45	6a 3b		 push	 59			; 0000003bH
  03f47	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03f4a	52		 push	 edx
  03f4b	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  03f50	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS@2:

; 1833 : 	}
; 1834 : }

  03f53	5f		 pop	 edi
  03f54	5e		 pop	 esi
  03f55	5b		 pop	 ebx
  03f56	8b e5		 mov	 esp, ebp
  03f58	5d		 pop	 ebp
  03f59	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa
; Function compile flags: /Odtp /ZI
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword5
; _this$ = ecx

; 1837 : {

  03f60	55		 push	 ebp
  03f61	8b ec		 mov	 ebp, esp
  03f63	83 ec 48	 sub	 esp, 72			; 00000048H
  03f66	53		 push	 ebx
  03f67	56		 push	 esi
  03f68	57		 push	 edi
  03f69	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1838 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  03f6c	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  03f6f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03f75	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03f7b	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 1839 : 
; 1840 : 	if( !gObjIsConnected(lpObj->m_Index) )

  03f7e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03f81	8b 08		 mov	 ecx, DWORD PTR [eax]
  03f83	51		 push	 ecx
  03f84	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03f89	83 c4 04	 add	 esp, 4
  03f8c	85 c0		 test	 eax, eax
  03f8e	75 02		 jne	 SHORT $LN5@MLS_SkillS@3

; 1841 : 		return;

  03f90	eb 71		 jmp	 SHORT $LN6@MLS_SkillS@3
$LN5@MLS_SkillS@3:

; 1842 : 
; 1843 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  03f92	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03f95	8b 08		 mov	 ecx, DWORD PTR [eax]
  03f97	51		 push	 ecx
  03f98	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03f9d	83 c4 04	 add	 esp, 4
  03fa0	85 c0		 test	 eax, eax
  03fa2	75 02		 jne	 SHORT $LN4@MLS_SkillS@3

; 1844 : 		return;

  03fa4	eb 5d		 jmp	 SHORT $LN6@MLS_SkillS@3
$LN4@MLS_SkillS@3:

; 1845 : 
; 1846 : 	if( lpObj->Type != OBJ_USER )

  03fa6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03fa9	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  03fad	83 f9 01	 cmp	 ecx, 1
  03fb0	74 02		 je	 SHORT $LN3@MLS_SkillS@3

; 1847 : 		return;

  03fb2	eb 4f		 jmp	 SHORT $LN6@MLS_SkillS@3
$LN3@MLS_SkillS@3:

; 1848 : 
; 1849 : 	if( lpObj->Class != CLASS_KNIGHT )

  03fb4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03fb7	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  03fbe	83 f9 01	 cmp	 ecx, 1
  03fc1	74 02		 je	 SHORT $LN2@MLS_SkillS@3

; 1850 : 		return;

  03fc3	eb 3e		 jmp	 SHORT $LN6@MLS_SkillS@3
$LN2@MLS_SkillS@3:

; 1851 : 
; 1852 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  03fc5	6a 00		 push	 0
  03fc7	6a 00		 push	 0
  03fc9	8b 45 14	 mov	 eax, DWORD PTR _isCombo$[ebp]
  03fcc	50		 push	 eax
  03fcd	6a 00		 push	 0
  03fcf	6a 01		 push	 1
  03fd1	6a 00		 push	 0
  03fd3	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  03fd6	51		 push	 ecx
  03fd7	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  03fda	52		 push	 edx
  03fdb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03fde	50		 push	 eax
  03fdf	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  03fe4	83 c4 24	 add	 esp, 36			; 00000024H

; 1853 : 
; 1854 : 	if(isCombo != 0)

  03fe7	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  03feb	74 16		 je	 SHORT $LN6@MLS_SkillS@3

; 1855 : 	{
; 1856 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  03fed	6a 01		 push	 1
  03fef	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03ff2	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ff4	51		 push	 ecx
  03ff5	6a 3b		 push	 59			; 0000003bH
  03ff7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  03ffa	52		 push	 edx
  03ffb	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  04000	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS@3:

; 1857 : 	}
; 1858 : }

  04003	5f		 pop	 edi
  04004	5e		 pop	 esi
  04005	5b		 pop	 ebx
  04006	8b e5		 mov	 esp, ebp
  04008	5d		 pop	 ebp
  04009	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword5
; Function compile flags: /Odtp /ZI
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword1
; _this$ = ecx

; 1861 : {

  04010	55		 push	 ebp
  04011	8b ec		 mov	 ebp, esp
  04013	83 ec 48	 sub	 esp, 72			; 00000048H
  04016	53		 push	 ebx
  04017	56		 push	 esi
  04018	57		 push	 edi
  04019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1862 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0401c	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0401f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04025	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0402b	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 1863 : 
; 1864 : 	if( !gObjIsConnected(lpObj->m_Index) )

  0402e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04031	8b 08		 mov	 ecx, DWORD PTR [eax]
  04033	51		 push	 ecx
  04034	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  04039	83 c4 04	 add	 esp, 4
  0403c	85 c0		 test	 eax, eax
  0403e	75 02		 jne	 SHORT $LN5@MLS_SkillS@4

; 1865 : 		return;

  04040	eb 71		 jmp	 SHORT $LN6@MLS_SkillS@4
$LN5@MLS_SkillS@4:

; 1866 : 
; 1867 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  04042	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  04045	8b 08		 mov	 ecx, DWORD PTR [eax]
  04047	51		 push	 ecx
  04048	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0404d	83 c4 04	 add	 esp, 4
  04050	85 c0		 test	 eax, eax
  04052	75 02		 jne	 SHORT $LN4@MLS_SkillS@4

; 1868 : 		return;

  04054	eb 5d		 jmp	 SHORT $LN6@MLS_SkillS@4
$LN4@MLS_SkillS@4:

; 1869 : 
; 1870 : 	if( lpObj->Type != OBJ_USER )

  04056	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04059	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0405d	83 f9 01	 cmp	 ecx, 1
  04060	74 02		 je	 SHORT $LN3@MLS_SkillS@4

; 1871 : 		return;

  04062	eb 4f		 jmp	 SHORT $LN6@MLS_SkillS@4
$LN3@MLS_SkillS@4:

; 1872 : 
; 1873 : 	if( lpObj->Class != CLASS_KNIGHT )

  04064	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04067	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0406e	83 f9 01	 cmp	 ecx, 1
  04071	74 02		 je	 SHORT $LN2@MLS_SkillS@4

; 1874 : 		return;

  04073	eb 3e		 jmp	 SHORT $LN6@MLS_SkillS@4
$LN2@MLS_SkillS@4:

; 1875 : 
; 1876 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  04075	6a 00		 push	 0
  04077	6a 00		 push	 0
  04079	8b 45 14	 mov	 eax, DWORD PTR _isCombo$[ebp]
  0407c	50		 push	 eax
  0407d	6a 00		 push	 0
  0407f	6a 01		 push	 1
  04081	6a 00		 push	 0
  04083	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  04086	51		 push	 ecx
  04087	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  0408a	52		 push	 edx
  0408b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0408e	50		 push	 eax
  0408f	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  04094	83 c4 24	 add	 esp, 36			; 00000024H

; 1877 : 
; 1878 : 	if(isCombo != 0)

  04097	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  0409b	74 16		 je	 SHORT $LN6@MLS_SkillS@4

; 1879 : 	{
; 1880 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  0409d	6a 01		 push	 1
  0409f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  040a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  040a4	51		 push	 ecx
  040a5	6a 3b		 push	 59			; 0000003bH
  040a7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  040aa	52		 push	 edx
  040ab	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  040b0	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS@4:

; 1881 : 	}
; 1882 : }

  040b3	5f		 pop	 edi
  040b4	5e		 pop	 esi
  040b5	5b		 pop	 ebx
  040b6	8b e5		 mov	 esp, ebp
  040b8	5d		 pop	 ebp
  040b9	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword1
; Function compile flags: /Odtp /ZI
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword2
; _this$ = ecx

; 1885 : {

  040c0	55		 push	 ebp
  040c1	8b ec		 mov	 ebp, esp
  040c3	83 ec 48	 sub	 esp, 72			; 00000048H
  040c6	53		 push	 ebx
  040c7	56		 push	 esi
  040c8	57		 push	 edi
  040c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1886 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  040cc	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  040cf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  040d5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  040db	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 1887 : 
; 1888 : 	if( !gObjIsConnected(lpObj->m_Index) )

  040de	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  040e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  040e3	51		 push	 ecx
  040e4	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  040e9	83 c4 04	 add	 esp, 4
  040ec	85 c0		 test	 eax, eax
  040ee	75 02		 jne	 SHORT $LN5@MLS_SkillS@5

; 1889 : 		return;

  040f0	eb 71		 jmp	 SHORT $LN6@MLS_SkillS@5
$LN5@MLS_SkillS@5:

; 1890 : 
; 1891 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  040f2	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  040f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  040f7	51		 push	 ecx
  040f8	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  040fd	83 c4 04	 add	 esp, 4
  04100	85 c0		 test	 eax, eax
  04102	75 02		 jne	 SHORT $LN4@MLS_SkillS@5

; 1892 : 		return;

  04104	eb 5d		 jmp	 SHORT $LN6@MLS_SkillS@5
$LN4@MLS_SkillS@5:

; 1893 : 
; 1894 : 	if( lpObj->Type != OBJ_USER )

  04106	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04109	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0410d	83 f9 01	 cmp	 ecx, 1
  04110	74 02		 je	 SHORT $LN3@MLS_SkillS@5

; 1895 : 		return;

  04112	eb 4f		 jmp	 SHORT $LN6@MLS_SkillS@5
$LN3@MLS_SkillS@5:

; 1896 : 
; 1897 : 	if( lpObj->Class != CLASS_KNIGHT )

  04114	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04117	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0411e	83 f9 01	 cmp	 ecx, 1
  04121	74 02		 je	 SHORT $LN2@MLS_SkillS@5

; 1898 : 		return;

  04123	eb 3e		 jmp	 SHORT $LN6@MLS_SkillS@5
$LN2@MLS_SkillS@5:

; 1899 : 
; 1900 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  04125	6a 00		 push	 0
  04127	6a 00		 push	 0
  04129	8b 45 14	 mov	 eax, DWORD PTR _isCombo$[ebp]
  0412c	50		 push	 eax
  0412d	6a 00		 push	 0
  0412f	6a 01		 push	 1
  04131	6a 00		 push	 0
  04133	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  04136	51		 push	 ecx
  04137	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  0413a	52		 push	 edx
  0413b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0413e	50		 push	 eax
  0413f	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  04144	83 c4 24	 add	 esp, 36			; 00000024H

; 1901 : 
; 1902 : 	if(isCombo != 0)

  04147	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  0414b	74 16		 je	 SHORT $LN6@MLS_SkillS@5

; 1903 : 	{
; 1904 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  0414d	6a 01		 push	 1
  0414f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04152	8b 08		 mov	 ecx, DWORD PTR [eax]
  04154	51		 push	 ecx
  04155	6a 3b		 push	 59			; 0000003bH
  04157	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0415a	52		 push	 edx
  0415b	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  04160	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS@5:

; 1905 : 	}
; 1906 : }

  04163	5f		 pop	 edi
  04164	5e		 pop	 esi
  04165	5b		 pop	 ebx
  04166	8b e5		 mov	 esp, ebp
  04168	5d		 pop	 ebp
  04169	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword2
_TEXT	ENDS
PUBLIC	?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
EXTRN	?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z:PROC ; gObjAddAttackProcMsgSendDelay
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_CallMonIndex$235021 = -52				; size = 4
_EnableAttack$235012 = -48				; size = 4
_iSkillDistance$ = -44					; size = 4
_aDistance$ = -40					; size = 4
_nMaxCount$ = -36					; size = 4
_nMinCount$ = -32					; size = 4
_bAttack$ = -28						; size = 4
_nHitCount$ = -24					; size = 4
_DuelIndex$ = -20					; size = 4
_tObjNum$ = -16						; size = 4
_count$ = -12						; size = 4
_bRet$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
_isCombo$ = 28						; size = 4
?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction
; _this$ = ecx

; 1909 : {

  04170	55		 push	 ebp
  04171	8b ec		 mov	 ebp, esp
  04173	83 ec 74	 sub	 esp, 116		; 00000074H
  04176	53		 push	 ebx
  04177	56		 push	 esi
  04178	57		 push	 edi
  04179	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1910 : 	int bRet = FALSE;

  0417c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 1911 : 	int count = 0;

  04183	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 1912 : 	int tObjNum;
; 1913 : 	int DuelIndex = lpObj->m_iDuelUser;

  0418a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0418d	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  04193	89 4d ec	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 1914 : 	int nHitCount = 0;

  04196	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nHitCount$[ebp], 0

; 1915 : 	int bAttack = 0;

  0419d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 1916 : 	int nMinCount = 4;

  041a4	c7 45 e0 04 00
	00 00		 mov	 DWORD PTR _nMinCount$[ebp], 4

; 1917 : 	int nMaxCount = 8;

  041ab	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR _nMaxCount$[ebp], 8

; 1918 : 	int aDistance = 3;

  041b2	c7 45 d8 03 00
	00 00		 mov	 DWORD PTR _aDistance$[ebp], 3

; 1919 : 
; 1920 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  041b9	6a 01		 push	 1
  041bb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  041be	8b 08		 mov	 ecx, DWORD PTR [eax]
  041c0	51		 push	 ecx
  041c1	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  041c4	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  041c8	50		 push	 eax
  041c9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  041cc	51		 push	 ecx
  041cd	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  041d2	83 c4 10	 add	 esp, 16			; 00000010H

; 1921 : 
; 1922 : 	int iSkillDistance = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  041d5	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  041d8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  041db	51		 push	 ecx
  041dc	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  041e1	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance
  041e6	89 45 d4	 mov	 DWORD PTR _iSkillDistance$[ebp], eax

; 1923 : 
; 1924 : 
; 1925 : 	if( this->MLS_CalDistance(lpObj->X,lpObj->Y,x,y) <= iSkillDistance )

  041e9	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  041ed	50		 push	 eax
  041ee	0f b6 4d 10	 movzx	 ecx, BYTE PTR _x$[ebp]
  041f2	51		 push	 ecx
  041f3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  041f6	0f bf 82 46 01
	00 00		 movsx	 eax, WORD PTR [edx+326]
  041fd	50		 push	 eax
  041fe	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04201	0f bf 91 44 01
	00 00		 movsx	 edx, WORD PTR [ecx+324]
  04208	52		 push	 edx
  04209	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0420c	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  04211	3b 45 d4	 cmp	 eax, DWORD PTR _iSkillDistance$[ebp]
  04214	0f 8f 08 03 00
	00		 jg	 $LN24@MLS_SkillS@6
$LN23@MLS_SkillS@6:

; 1926 : 	{
; 1927 : 		while ( true )

  0421a	b8 01 00 00 00	 mov	 eax, 1
  0421f	85 c0		 test	 eax, eax
  04221	0f 84 fb 02 00
	00		 je	 $LN24@MLS_SkillS@6

; 1928 : 		{
; 1929 : 			if(lpObj->VpPlayer2[count].state != 0)

  04227	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  0422a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0422d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04230	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  04238	85 d2		 test	 edx, edx
  0423a	0f 84 cc 02 00
	00		 je	 $LN21@MLS_SkillS@6

; 1930 : 			{
; 1931 : 				tObjNum = lpObj->VpPlayer2[count].number;	

  04240	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  04243	6b c0 0c	 imul	 eax, 12			; 0000000cH
  04246	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04249	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  04251	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 1932 : 				if(tObjNum >= 0)

  04254	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  04258	0f 8c ae 02 00
	00		 jl	 $LN21@MLS_SkillS@6

; 1933 : 				{
; 1934 : 					int EnableAttack = 0;

  0425e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$235012[ebp], 0

; 1935 : 
; 1936 : 					if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  04265	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  04268	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0426b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0426e	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  04276	83 fa 02	 cmp	 edx, 2
  04279	75 25		 jne	 SHORT $LN19@MLS_SkillS@6
  0427b	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0427e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04284	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0428a	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  04292	7d 0c		 jge	 SHORT $LN19@MLS_SkillS@6

; 1937 : 					{
; 1938 : 						EnableAttack = 1;

  04294	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$235012[ebp], 1
  0429b	e9 23 01 00 00	 jmp	 $LN18@MLS_SkillS@6
$LN19@MLS_SkillS@6:

; 1939 : 					}
; 1940 : 					else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  042a0	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  042a3	3b 45 18	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  042a6	74 08		 je	 SHORT $LN16@MLS_SkillS@6
  042a8	8b 45 ec	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  042ab	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  042ae	75 0c		 jne	 SHORT $LN17@MLS_SkillS@6
$LN16@MLS_SkillS@6:

; 1941 : 					{
; 1942 : 						EnableAttack = 1;

  042b0	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$235012[ebp], 1
  042b7	e9 07 01 00 00	 jmp	 $LN18@MLS_SkillS@6
$LN17@MLS_SkillS@6:

; 1943 : 					}
; 1944 : 
; 1945 : 					else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  042bc	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  042bf	6b c0 0c	 imul	 eax, 12			; 0000000cH
  042c2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  042c5	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  042cd	83 fa 03	 cmp	 edx, 3
  042d0	74 5b		 je	 SHORT $LN14@MLS_SkillS@6
  042d2	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  042d5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  042db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  042e1	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  042e9	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  042ec	75 3f		 jne	 SHORT $LN14@MLS_SkillS@6
  042ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  042f3	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  042f8	83 f8 07	 cmp	 eax, 7
  042fb	75 30		 jne	 SHORT $LN14@MLS_SkillS@6

; 1946 : 					{
; 1947 : 						if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  042fd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04300	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  04307	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0430a	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  04310	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04315	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0431d	3b ca		 cmp	 ecx, edx
  0431f	74 07		 je	 SHORT $LN13@MLS_SkillS@6

; 1948 : 							EnableAttack = 1;

  04321	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$235012[ebp], 1
$LN13@MLS_SkillS@6:

; 1949 : 					}
; 1950 : 
; 1951 : 					else

  04328	e9 96 00 00 00	 jmp	 $LN18@MLS_SkillS@6
$LN14@MLS_SkillS@6:

; 1952 : 					{
; 1953 : 						int CallMonIndex = gObj[tObjNum].m_Index;

  0432d	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  04330	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04336	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0433c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0433f	89 55 cc	 mov	 DWORD PTR _CallMonIndex$235021[ebp], edx

; 1954 : 	
; 1955 : 						if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  04342	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  04345	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0434b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04351	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  04356	83 fa 02	 cmp	 edx, 2
  04359	75 40		 jne	 SHORT $LN11@MLS_SkillS@6
  0435b	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0435e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04364	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0436a	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  04372	7c 27		 jl	 SHORT $LN11@MLS_SkillS@6

; 1956 : 						{
; 1957 : 							CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  04374	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  04377	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0437d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04383	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0438a	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  04390	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04395	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  04398	89 4d cc	 mov	 DWORD PTR _CallMonIndex$235021[ebp], ecx
$LN11@MLS_SkillS@6:

; 1958 : 						}
; 1959 : 	
; 1960 : 						if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0439b	8b 45 cc	 mov	 eax, DWORD PTR _CallMonIndex$235021[ebp]
  0439e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  043a4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  043aa	50		 push	 eax
  043ab	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  043ae	51		 push	 ecx
  043af	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  043b4	83 c4 08	 add	 esp, 8
  043b7	83 f8 01	 cmp	 eax, 1
  043ba	75 07		 jne	 SHORT $LN18@MLS_SkillS@6

; 1961 : 						{
; 1962 : 							EnableAttack = 1;

  043bc	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$235012[ebp], 1
$LN18@MLS_SkillS@6:

; 1963 : 						}
; 1964 : 					}
; 1965 : 
; 1966 : 					if( EnableAttack != 0 )

  043c3	83 7d d0 00	 cmp	 DWORD PTR _EnableAttack$235012[ebp], 0
  043c7	0f 84 3f 01 00
	00		 je	 $LN21@MLS_SkillS@6

; 1967 : 					{
; 1968 : 						if( gObj[tObjNum].X >= (x -aDistance) &&
; 1969 : 						gObj[tObjNum].X <= (x +aDistance) &&
; 1970 : 						gObj[tObjNum].Y >= (y -aDistance) &&
; 1971 : 						gObj[tObjNum].Y <= (y +aDistance) )

  043cd	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  043d0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  043d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  043dc	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  043e4	0f b6 45 10	 movzx	 eax, BYTE PTR _x$[ebp]
  043e8	2b 45 d8	 sub	 eax, DWORD PTR _aDistance$[ebp]
  043eb	3b d0		 cmp	 edx, eax
  043ed	0f 8c 19 01 00
	00		 jl	 $LN21@MLS_SkillS@6
  043f3	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  043f6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  043fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04402	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0440a	0f b6 45 10	 movzx	 eax, BYTE PTR _x$[ebp]
  0440e	03 45 d8	 add	 eax, DWORD PTR _aDistance$[ebp]
  04411	3b d0		 cmp	 edx, eax
  04413	0f 8f f3 00 00
	00		 jg	 $LN21@MLS_SkillS@6
  04419	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0441c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04422	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04428	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  04430	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  04434	2b 45 d8	 sub	 eax, DWORD PTR _aDistance$[ebp]
  04437	3b d0		 cmp	 edx, eax
  04439	0f 8c cd 00 00
	00		 jl	 $LN21@MLS_SkillS@6
  0443f	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  04442	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04448	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0444e	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  04456	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  0445a	03 45 d8	 add	 eax, DWORD PTR _aDistance$[ebp]
  0445d	3b d0		 cmp	 edx, eax
  0445f	0f 8f a7 00 00
	00		 jg	 $LN21@MLS_SkillS@6

; 1972 : 						{
; 1973 : 							gObj[tObjNum].lpAttackObj = lpObj;

  04465	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  04468	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0446e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04474	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04477	89 94 01 d4 03
	00 00		 mov	 DWORD PTR [ecx+eax+980], edx

; 1974 : 							nHitCount++;

  0447e	8b 45 e8	 mov	 eax, DWORD PTR _nHitCount$[ebp]
  04481	83 c0 01	 add	 eax, 1
  04484	89 45 e8	 mov	 DWORD PTR _nHitCount$[ebp], eax

; 1975 : 
; 1976 : 							if( nHitCount > nMinCount )

  04487	8b 45 e8	 mov	 eax, DWORD PTR _nHitCount$[ebp]
  0448a	3b 45 e0	 cmp	 eax, DWORD PTR _nMinCount$[ebp]
  0448d	7e 1e		 jle	 SHORT $LN7@MLS_SkillS@6

; 1977 : 							{
; 1978 : 								if( rand()%2 )

  0448f	e8 00 00 00 00	 call	 _rand
  04494	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  04499	79 05		 jns	 SHORT $LN27@MLS_SkillS@6
  0449b	48		 dec	 eax
  0449c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0449f	40		 inc	 eax
$LN27@MLS_SkillS@6:
  044a0	85 c0		 test	 eax, eax
  044a2	74 07		 je	 SHORT $LN6@MLS_SkillS@6

; 1979 : 									bAttack = TRUE;

  044a4	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN6@MLS_SkillS@6:

; 1980 : 							}
; 1981 : 							else

  044ab	eb 07		 jmp	 SHORT $LN5@MLS_SkillS@6
$LN7@MLS_SkillS@6:

; 1982 : 							{
; 1983 : 								bAttack = TRUE;

  044ad	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN5@MLS_SkillS@6:

; 1984 : 							}
; 1985 : 
; 1986 : 							if( nHitCount > nMaxCount )

  044b4	8b 45 e8	 mov	 eax, DWORD PTR _nHitCount$[ebp]
  044b7	3b 45 dc	 cmp	 eax, DWORD PTR _nMaxCount$[ebp]
  044ba	7e 07		 jle	 SHORT $LN4@MLS_SkillS@6

; 1987 : 								bAttack = FALSE;

  044bc	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN4@MLS_SkillS@6:

; 1988 : 
; 1989 : 							if( bAttack == TRUE )

  044c3	83 7d e4 01	 cmp	 DWORD PTR _bAttack$[ebp], 1
  044c7	75 3c		 jne	 SHORT $LN3@MLS_SkillS@6

; 1990 : 							{
; 1991 : 								gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,500,lpMagic->m_Skill,0);

  044c9	6a 00		 push	 0
  044cb	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  044ce	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  044d1	51		 push	 ecx
  044d2	68 f4 01 00 00	 push	 500			; 000001f4H
  044d7	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  044da	52		 push	 edx
  044db	6a 32		 push	 50			; 00000032H
  044dd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  044e0	50		 push	 eax
  044e1	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  044e6	83 c4 18	 add	 esp, 24			; 00000018H

; 1992 : 
; 1993 : 								if( isCombo != 0 )

  044e9	83 7d 1c 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  044ed	74 16		 je	 SHORT $LN3@MLS_SkillS@6

; 1994 : 								{
; 1995 : 									GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  044ef	6a 01		 push	 1
  044f1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  044f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  044f6	51		 push	 ecx
  044f7	6a 3b		 push	 59			; 0000003bH
  044f9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  044fc	52		 push	 edx
  044fd	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  04502	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@MLS_SkillS@6:

; 1996 : 								}
; 1997 : 							}
; 1998 : 
; 1999 : 							bRet = TRUE;

  04505	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN21@MLS_SkillS@6:

; 2000 : 						}
; 2001 : 					}
; 2002 : 				}
; 2003 : 			}
; 2004 : 
; 2005 : 			count++;

  0450c	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  0450f	83 c0 01	 add	 eax, 1
  04512	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax

; 2006 : 			if(count > MAX_VIEWPORT -1)

  04515	83 7d f4 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  04519	7e 02		 jle	 SHORT $LN1@MLS_SkillS@6

; 2007 : 			{
; 2008 : 				break;

  0451b	eb 05		 jmp	 SHORT $LN24@MLS_SkillS@6
$LN1@MLS_SkillS@6:

; 2009 : 			}
; 2010 : 		}

  0451d	e9 f8 fc ff ff	 jmp	 $LN23@MLS_SkillS@6
$LN24@MLS_SkillS@6:

; 2011 : 	}
; 2012 : 
; 2013 : 	return bRet;

  04522	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2014 : }

  04525	5f		 pop	 edi
  04526	5e		 pop	 esi
  04527	5b		 pop	 ebx
  04528	8b e5		 mov	 esp, ebp
  0452a	5d		 pop	 ebp
  0452b	c2 18 00	 ret	 24			; 00000018H
?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv295 = -180						; size = 8
tv287 = -180						; size = 8
tv282 = -176						; size = 4
_n$235073 = -108					; size = 4
_iaddlife$ = -104					; size = 4
_fSkillValue$ = -100					; size = 4
_iLifeTime$ = -96					; size = 4
_iaddLifepower$ = -92					; size = 4
_n$235051 = -88						; size = 4
_lpPartyObj$ = -84					; size = 4
_viewpercent$ = -80					; size = 4
_viewplayer$ = -76					; size = 4
_ApplyPartyIndex$ = -72					; size = 40
_dis$ = -32						; size = 4
_partycount$ = -28					; size = 4
_totallevel$ = -24					; size = 4
_partynum$ = -20					; size = 4
_number$ = -16						; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife
; _this$ = ecx

; 2017 : {

  04530	55		 push	 ebp
  04531	8b ec		 mov	 ebp, esp
  04533	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  04539	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0453e	33 c5		 xor	 eax, ebp
  04540	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  04543	53		 push	 ebx
  04544	56		 push	 esi
  04545	57		 push	 edi
  04546	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2018 : 	int skillSuccess = TRUE;

  04549	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 2019 : 
; 2020 : 	if( lpObj->Type != OBJ_USER &&
; 2021 : 		lpObj->m_RecallMon == -1 )

  04550	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04553	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  04557	83 f9 01	 cmp	 ecx, 1
  0455a	74 11		 je	 SHORT $LN24@MLS_Knight
  0455c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0455f	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  04566	75 05		 jne	 SHORT $LN24@MLS_Knight

; 2022 : 		return;

  04568	e9 60 03 00 00	 jmp	 $LN25@MLS_Knight
$LN24@MLS_Knight:

; 2023 : 
; 2024 : 	if( lpObj->Class != CLASS_KNIGHT &&
; 2025 : 		lpObj->Class != CLASS_MAGUMSA )

  0456d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04570	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  04577	83 f9 01	 cmp	 ecx, 1
  0457a	74 14		 je	 SHORT $LN23@MLS_Knight
  0457c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0457f	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  04586	83 f9 03	 cmp	 ecx, 3
  04589	74 05		 je	 SHORT $LN23@MLS_Knight

; 2026 : 		return;

  0458b	e9 3d 03 00 00	 jmp	 $LN25@MLS_Knight
$LN23@MLS_Knight:

; 2027 : 
; 2028 : 	int number;
; 2029 : 	int partynum = 0;

  04590	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _partynum$[ebp], 0

; 2030 : 	int totallevel = 0;

  04597	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _totallevel$[ebp], 0

; 2031 : 	int partycount;
; 2032 : 	int dis;
; 2033 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2034 : 	int viewplayer = 0;

  0459e	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _viewplayer$[ebp], 0

; 2035 : 	int viewpercent = 0;

  045a5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 0

; 2036 : 	LPOBJ lpPartyObj;
; 2037 : 
; 2038 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  045ac	6a 28		 push	 40			; 00000028H
  045ae	6a ff		 push	 -1
  045b0	8d 45 b8	 lea	 eax, DWORD PTR _ApplyPartyIndex$[ebp]
  045b3	50		 push	 eax
  045b4	e8 00 00 00 00	 call	 _memset
  045b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2039 : 
; 2040 : 	partynum = lpObj->PartyNumber;

  045bc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  045bf	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  045c5	89 4d ec	 mov	 DWORD PTR _partynum$[ebp], ecx

; 2041 : 
; 2042 : 	if( partynum != -1 )

  045c8	83 7d ec ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  045cc	0f 84 ab 00 00
	00		 je	 $LN19@MLS_Knight

; 2043 : 	{
; 2044 : 		partycount = gParty.m_PartyS[partynum].Count;

  045d2	8b 45 ec	 mov	 eax, DWORD PTR _partynum$[ebp]
  045d5	6b c0 6c	 imul	 eax, 108		; 0000006cH
  045d8	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  045de	89 4d e4	 mov	 DWORD PTR _partycount$[ebp], ecx

; 2045 : 
; 2046 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  045e1	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _n$235051[ebp], 0
  045e8	eb 09		 jmp	 SHORT $LN21@MLS_Knight
$LN20@MLS_Knight:
  045ea	8b 45 a8	 mov	 eax, DWORD PTR _n$235051[ebp]
  045ed	83 c0 01	 add	 eax, 1
  045f0	89 45 a8	 mov	 DWORD PTR _n$235051[ebp], eax
$LN21@MLS_Knight:
  045f3	83 7d a8 0a	 cmp	 DWORD PTR _n$235051[ebp], 10 ; 0000000aH
  045f7	0f 8d 80 00 00
	00		 jge	 $LN19@MLS_Knight

; 2047 : 		{
; 2048 : 			number = gParty.m_PartyS[partynum].Number[n];

  045fd	8b 45 ec	 mov	 eax, DWORD PTR _partynum$[ebp]
  04600	6b c0 6c	 imul	 eax, 108		; 0000006cH
  04603	8b 4d a8	 mov	 ecx, DWORD PTR _n$235051[ebp]
  04606	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  0460d	89 55 f0	 mov	 DWORD PTR _number$[ebp], edx

; 2049 : 
; 2050 : 			if( number >= 0 )

  04610	83 7d f0 00	 cmp	 DWORD PTR _number$[ebp], 0
  04614	7c 62		 jl	 SHORT $LN16@MLS_Knight

; 2051 : 			{
; 2052 : 				lpPartyObj = &gObj[number];

  04616	8b 45 f0	 mov	 eax, DWORD PTR _number$[ebp]
  04619	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0461f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04625	89 45 ac	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 2053 : 
; 2054 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  04628	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0462b	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  04632	8b 55 ac	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  04635	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0463c	3b c8		 cmp	 ecx, eax
  0463e	75 38		 jne	 SHORT $LN16@MLS_Knight

; 2055 : 				{
; 2056 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  04640	8b 45 f0	 mov	 eax, DWORD PTR _number$[ebp]
  04643	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04649	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0464f	50		 push	 eax
  04650	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04653	51		 push	 ecx
  04654	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  04659	83 c4 08	 add	 esp, 8
  0465c	89 45 e0	 mov	 DWORD PTR _dis$[ebp], eax

; 2057 : 
; 2058 : 					if( dis < 10 )

  0465f	83 7d e0 0a	 cmp	 DWORD PTR _dis$[ebp], 10 ; 0000000aH
  04663	7d 13		 jge	 SHORT $LN16@MLS_Knight

; 2059 : 					{
; 2060 : 						ApplyPartyIndex[n] = number;

  04665	8b 45 a8	 mov	 eax, DWORD PTR _n$235051[ebp]
  04668	8b 4d f0	 mov	 ecx, DWORD PTR _number$[ebp]
  0466b	89 4c 85 b8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], ecx

; 2061 : 						viewplayer++;

  0466f	8b 45 b4	 mov	 eax, DWORD PTR _viewplayer$[ebp]
  04672	83 c0 01	 add	 eax, 1
  04675	89 45 b4	 mov	 DWORD PTR _viewplayer$[ebp], eax
$LN16@MLS_Knight:

; 2062 : 					}
; 2063 : 				}
; 2064 : 			}
; 2065 : 		}

  04678	e9 6d ff ff ff	 jmp	 $LN20@MLS_Knight
$LN19@MLS_Knight:

; 2066 : 	}
; 2067 : 
; 2068 : 	if( viewplayer > 1 )

  0467d	83 7d b4 01	 cmp	 DWORD PTR _viewplayer$[ebp], 1
  04681	7e 34		 jle	 SHORT $LN9@MLS_Knight

; 2069 : 	{
; 2070 : 		if( viewplayer == 2 )

  04683	83 7d b4 02	 cmp	 DWORD PTR _viewplayer$[ebp], 2
  04687	75 09		 jne	 SHORT $LN14@MLS_Knight

; 2071 : 		{
; 2072 : 			viewpercent = 1;

  04689	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 1
  04690	eb 25		 jmp	 SHORT $LN9@MLS_Knight
$LN14@MLS_Knight:

; 2073 : 		}
; 2074 : 		else if( viewplayer == 3 )

  04692	83 7d b4 03	 cmp	 DWORD PTR _viewplayer$[ebp], 3
  04696	75 09		 jne	 SHORT $LN12@MLS_Knight

; 2075 : 		{
; 2076 : 			viewpercent = 2;

  04698	c7 45 b0 02 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 2
  0469f	eb 16		 jmp	 SHORT $LN9@MLS_Knight
$LN12@MLS_Knight:

; 2077 : 		}
; 2078 : 		else if( viewplayer == 4 )

  046a1	83 7d b4 04	 cmp	 DWORD PTR _viewplayer$[ebp], 4
  046a5	75 09		 jne	 SHORT $LN10@MLS_Knight

; 2079 : 		{
; 2080 : 			viewpercent = 3;

  046a7	c7 45 b0 03 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 3

; 2081 : 		}
; 2082 : 		else

  046ae	eb 07		 jmp	 SHORT $LN9@MLS_Knight
$LN10@MLS_Knight:

; 2083 : 		{
; 2084 : 			viewpercent = 4;

  046b0	c7 45 b0 04 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 4
$LN9@MLS_Knight:

; 2085 : 		}
; 2086 : 	}
; 2087 : 
; 2088 : 	float iaddLifepower;
; 2089 : 	int iLifeTime;
; 2090 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  046b7	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  046ba	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  046be	51		 push	 ecx
  046bf	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  046c2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  046c5	50		 push	 eax
  046c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  046cb	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  046d0	50		 push	 eax
  046d1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  046d4	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  046d9	d9 5d 9c	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 2091 : 	int iaddlife;
; 2092 : 	// ----
; 2093 : 	iaddLifepower = (g_SkillAdditionInfo.m_SwellLifeEffectStart + (lpObj->Vitality + lpObj->AddVitality) / g_SkillAdditionInfo.m_SwellLifeEffectDiv1 + (lpObj->Energy + lpObj->AddEnergy)/ g_SkillAdditionInfo.m_SwellLifeEffectDiv2 + viewpercent) + fSkillValue;

  046dc	0f b7 0d 78 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3192
  046e3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  046e6	0f b7 82 f8 00
	00 00		 movzx	 eax, WORD PTR [edx+248]
  046ed	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  046f0	0f bf 92 24 01
	00 00		 movsx	 edx, WORD PTR [edx+292]
  046f7	03 c2		 add	 eax, edx
  046f9	0f b7 35 7a 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3194
  04700	99		 cdq
  04701	f7 fe		 idiv	 esi
  04703	03 c8		 add	 ecx, eax
  04705	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04708	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  0470f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04712	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  04719	03 c2		 add	 eax, edx
  0471b	0f b7 35 7c 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3196
  04722	99		 cdq
  04723	f7 fe		 idiv	 esi
  04725	03 4d b0	 add	 ecx, DWORD PTR _viewpercent$[ebp]
  04728	03 c1		 add	 eax, ecx
  0472a	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv282[ebp], eax
  04730	db 85 50 ff ff
	ff		 fild	 DWORD PTR tv282[ebp]
  04736	d8 45 9c	 fadd	 DWORD PTR _fSkillValue$[ebp]
  04739	d9 5d a4	 fstp	 DWORD PTR _iaddLifepower$[ebp]

; 2094 : 	iaddLifepower += fSkillValue;

  0473c	d9 45 a4	 fld	 DWORD PTR _iaddLifepower$[ebp]
  0473f	d8 45 9c	 fadd	 DWORD PTR _fSkillValue$[ebp]
  04742	d9 5d a4	 fstp	 DWORD PTR _iaddLifepower$[ebp]

; 2095 : 	// ----
; 2096 : 	if( g_SkillAdditionInfo.m_SwellLifeEffectMax > 0 && iaddLifepower > g_SkillAdditionInfo.m_SwellLifeEffectMax )

  04745	83 3d 80 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3200, 0
  0474c	76 45		 jbe	 SHORT $LN8@MLS_Knight
  0474e	a1 80 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3200
  04753	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  04759	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv287[ebp+4], 0
  04763	df ad 4c ff ff
	ff		 fild	 QWORD PTR tv287[ebp]
  04769	d9 45 a4	 fld	 DWORD PTR _iaddLifepower$[ebp]
  0476c	de d9		 fcompp
  0476e	df e0		 fnstsw	 ax
  04770	f6 c4 41	 test	 ah, 65			; 00000041H
  04773	75 1e		 jne	 SHORT $LN8@MLS_Knight

; 2097 : 	{
; 2098 : 		iaddLifepower = g_SkillAdditionInfo.m_SwellLifeEffectMax;

  04775	a1 80 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3200
  0477a	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv295[ebp], eax
  04780	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv295[ebp+4], 0
  0478a	df ad 4c ff ff
	ff		 fild	 QWORD PTR tv295[ebp]
  04790	d9 5d a4	 fstp	 DWORD PTR _iaddLifepower$[ebp]
$LN8@MLS_Knight:

; 2099 : 	}
; 2100 : 	// ----
; 2101 : 	iLifeTime = g_SkillAdditionInfo.m_SwellLifeTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SwellLifeTimeDiv;

  04793	0f b7 0d 84 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3204
  0479a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0479d	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  047a4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  047a7	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  047ae	03 c2		 add	 eax, edx
  047b0	0f b7 35 86 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3206
  047b7	99		 cdq
  047b8	f7 fe		 idiv	 esi
  047ba	03 c8		 add	 ecx, eax
  047bc	89 4d a0	 mov	 DWORD PTR _iLifeTime$[ebp], ecx

; 2102 : 	// ----
; 2103 : 	if( g_SkillAdditionInfo.m_SwellLifeTimeMax > 0 && iLifeTime > g_SkillAdditionInfo.m_SwellLifeTimeMax )

  047bf	83 3d 88 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3208, 0
  047c6	76 13		 jbe	 SHORT $LN7@MLS_Knight
  047c8	8b 45 a0	 mov	 eax, DWORD PTR _iLifeTime$[ebp]
  047cb	3b 05 88 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3208
  047d1	76 08		 jbe	 SHORT $LN7@MLS_Knight

; 2104 : 	{
; 2105 : 		iLifeTime = g_SkillAdditionInfo.m_SwellLifeTimeMax;

  047d3	a1 88 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3208
  047d8	89 45 a0	 mov	 DWORD PTR _iLifeTime$[ebp], eax
$LN7@MLS_Knight:

; 2106 : 	}
; 2107 : 	// ----
; 2108 : 	if( partynum == -1 )

  047db	83 7d ec ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  047df	75 5a		 jne	 SHORT $LN6@MLS_Knight

; 2109 : 	{
; 2110 : 		iaddlife = lpObj->MaxLife*iaddLifepower/100;

  047e1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  047e4	d9 80 00 01 00
	00		 fld	 DWORD PTR [eax+256]
  047ea	d8 4d a4	 fmul	 DWORD PTR _iaddLifepower$[ebp]
  047ed	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  047f3	e8 00 00 00 00	 call	 __ftol2_sse
  047f8	89 45 98	 mov	 DWORD PTR _iaddlife$[ebp], eax

; 2111 : 		gObjApplyBuffEffectDuration(lpObj,8,ADD_OPTION_LIFE,iaddlife,0,0,iLifeTime);

  047fb	8b 45 a0	 mov	 eax, DWORD PTR _iLifeTime$[ebp]
  047fe	50		 push	 eax
  047ff	6a 00		 push	 0
  04801	6a 00		 push	 0
  04803	8b 4d 98	 mov	 ecx, DWORD PTR _iaddlife$[ebp]
  04806	51		 push	 ecx
  04807	6a 04		 push	 4
  04809	6a 08		 push	 8
  0480b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0480e	52		 push	 edx
  0480f	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  04814	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2112 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  04817	0f b6 45 f4	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  0481b	50		 push	 eax
  0481c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0481f	8b 11		 mov	 edx, DWORD PTR [ecx]
  04821	52		 push	 edx
  04822	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  04825	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  04829	51		 push	 ecx
  0482a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0482d	52		 push	 edx
  0482e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  04833	83 c4 10	 add	 esp, 16			; 00000010H

; 2113 : 	}
; 2114 : 	else

  04836	e9 92 00 00 00	 jmp	 $LN2@MLS_Knight
$LN6@MLS_Knight:

; 2115 : 	{
; 2116 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  0483b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _n$235073[ebp], 0
  04842	eb 09		 jmp	 SHORT $LN4@MLS_Knight
$LN3@MLS_Knight:
  04844	8b 45 94	 mov	 eax, DWORD PTR _n$235073[ebp]
  04847	83 c0 01	 add	 eax, 1
  0484a	89 45 94	 mov	 DWORD PTR _n$235073[ebp], eax
$LN4@MLS_Knight:
  0484d	83 7d 94 0a	 cmp	 DWORD PTR _n$235073[ebp], 10 ; 0000000aH
  04851	7d 7a		 jge	 SHORT $LN2@MLS_Knight

; 2117 : 		{
; 2118 : 			if( ApplyPartyIndex[n] != -1 )

  04853	8b 45 94	 mov	 eax, DWORD PTR _n$235073[ebp]
  04856	83 7c 85 b8 ff	 cmp	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], -1
  0485b	74 6b		 je	 SHORT $LN1@MLS_Knight

; 2119 : 			{
; 2120 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  0485d	8b 45 94	 mov	 eax, DWORD PTR _n$235073[ebp]
  04860	8b 4c 85 b8	 mov	 ecx, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  04864	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0486a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04870	89 4d ac	 mov	 DWORD PTR _lpPartyObj$[ebp], ecx

; 2121 : 				iaddlife = lpPartyObj->MaxLife*iaddLifepower/100;

  04873	8b 45 ac	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  04876	d9 80 00 01 00
	00		 fld	 DWORD PTR [eax+256]
  0487c	d8 4d a4	 fmul	 DWORD PTR _iaddLifepower$[ebp]
  0487f	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  04885	e8 00 00 00 00	 call	 __ftol2_sse
  0488a	89 45 98	 mov	 DWORD PTR _iaddlife$[ebp], eax

; 2122 : 				gObjApplyBuffEffectDuration(lpPartyObj,8,ADD_OPTION_LIFE,iaddlife,0,0,iLifeTime);

  0488d	8b 45 a0	 mov	 eax, DWORD PTR _iLifeTime$[ebp]
  04890	50		 push	 eax
  04891	6a 00		 push	 0
  04893	6a 00		 push	 0
  04895	8b 4d 98	 mov	 ecx, DWORD PTR _iaddlife$[ebp]
  04898	51		 push	 ecx
  04899	6a 04		 push	 4
  0489b	6a 08		 push	 8
  0489d	8b 55 ac	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  048a0	52		 push	 edx
  048a1	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  048a6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2123 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,skillSuccess);

  048a9	0f b6 45 f4	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  048ad	50		 push	 eax
  048ae	8b 4d ac	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  048b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  048b3	52		 push	 edx
  048b4	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  048b7	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  048bb	51		 push	 ecx
  048bc	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  048bf	52		 push	 edx
  048c0	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  048c5	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_Knight:

; 2124 : 			}
; 2125 : 		}

  048c8	e9 77 ff ff ff	 jmp	 $LN3@MLS_Knight
$LN2@MLS_Knight:
$LN25@MLS_Knight:

; 2126 : 	}
; 2127 : }

  048cd	5f		 pop	 edi
  048ce	5e		 pop	 esi
  048cf	5b		 pop	 ebx
  048d0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  048d3	33 cd		 xor	 ecx, ebp
  048d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  048da	8b e5		 mov	 esp, ebp
  048dc	5d		 pop	 ebp
  048dd	c2 08 00	 ret	 8
?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife
_TEXT	ENDS
PUBLIC	?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv380 = -200						; size = 8
tv372 = -200						; size = 8
tv370 = -196						; size = 4
tv354 = -196						; size = 4
_n$235127 = -128					; size = 4
_iaddMana$ = -124					; size = 4
_iaddlife$ = -120					; size = 4
_fSkillValue$235122 = -116				; size = 4
_iaddManapower$ = -112					; size = 4
_fSkillValue$235117 = -108				; size = 4
_iPreLevel$235115 = -104				; size = 4
_iPreSkill$ = -100					; size = 4
_iLifeTime$ = -96					; size = 4
_iaddLifepower$ = -92					; size = 4
_n$235096 = -88						; size = 4
_lpPartyObj$ = -84					; size = 4
_viewpercent$ = -80					; size = 4
_viewplayer$ = -76					; size = 4
_ApplyPartyIndex$ = -72					; size = 40
_dis$ = -32						; size = 4
_partycount$ = -28					; size = 4
_totallevel$ = -24					; size = 4
_partynum$ = -20					; size = 4
_number$ = -16						; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife
; _this$ = ecx

; 2130 : {

  048e0	55		 push	 ebp
  048e1	8b ec		 mov	 ebp, esp
  048e3	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  048e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  048ee	33 c5		 xor	 eax, ebp
  048f0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  048f3	53		 push	 ebx
  048f4	56		 push	 esi
  048f5	57		 push	 edi
  048f6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2131 : 	int skillSuccess = TRUE;

  048f9	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 2132 : 
; 2133 : 	if( lpObj->Type != OBJ_USER &&
; 2134 : 		lpObj->m_RecallMon == -1 )

  04900	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04903	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  04907	83 f9 01	 cmp	 ecx, 1
  0490a	74 11		 je	 SHORT $LN28@MLS_SkillF
  0490c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0490f	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  04916	75 05		 jne	 SHORT $LN28@MLS_SkillF

; 2135 : 		return;

  04918	e9 7c 04 00 00	 jmp	 $LN29@MLS_SkillF
$LN28@MLS_SkillF:

; 2136 : 
; 2137 : 	if( lpObj->Class != CLASS_KNIGHT &&
; 2138 : 		lpObj->Class != CLASS_MAGUMSA )

  0491d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04920	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  04927	83 f9 01	 cmp	 ecx, 1
  0492a	74 14		 je	 SHORT $LN27@MLS_SkillF
  0492c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0492f	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  04936	83 f9 03	 cmp	 ecx, 3
  04939	74 05		 je	 SHORT $LN27@MLS_SkillF

; 2139 : 		return;

  0493b	e9 59 04 00 00	 jmp	 $LN29@MLS_SkillF
$LN27@MLS_SkillF:

; 2140 : 
; 2141 : 	int number;
; 2142 : 	int partynum = 0;

  04940	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _partynum$[ebp], 0

; 2143 : 	int totallevel = 0;

  04947	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _totallevel$[ebp], 0

; 2144 : 	int partycount;
; 2145 : 	int dis;
; 2146 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2147 : 	int viewplayer = 0;

  0494e	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _viewplayer$[ebp], 0

; 2148 : 	int viewpercent = 0;

  04955	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 0

; 2149 : 	LPOBJ lpPartyObj;
; 2150 : 
; 2151 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  0495c	6a 28		 push	 40			; 00000028H
  0495e	6a ff		 push	 -1
  04960	8d 45 b8	 lea	 eax, DWORD PTR _ApplyPartyIndex$[ebp]
  04963	50		 push	 eax
  04964	e8 00 00 00 00	 call	 _memset
  04969	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2152 : 
; 2153 : 	partynum = lpObj->PartyNumber;

  0496c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0496f	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  04975	89 4d ec	 mov	 DWORD PTR _partynum$[ebp], ecx

; 2154 : 
; 2155 : 	if( partynum != -1 )

  04978	83 7d ec ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  0497c	0f 84 ab 00 00
	00		 je	 $LN23@MLS_SkillF

; 2156 : 	{
; 2157 : 		partycount = gParty.m_PartyS[partynum].Count;

  04982	8b 45 ec	 mov	 eax, DWORD PTR _partynum$[ebp]
  04985	6b c0 6c	 imul	 eax, 108		; 0000006cH
  04988	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  0498e	89 4d e4	 mov	 DWORD PTR _partycount$[ebp], ecx

; 2158 : 
; 2159 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  04991	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _n$235096[ebp], 0
  04998	eb 09		 jmp	 SHORT $LN25@MLS_SkillF
$LN24@MLS_SkillF:
  0499a	8b 45 a8	 mov	 eax, DWORD PTR _n$235096[ebp]
  0499d	83 c0 01	 add	 eax, 1
  049a0	89 45 a8	 mov	 DWORD PTR _n$235096[ebp], eax
$LN25@MLS_SkillF:
  049a3	83 7d a8 0a	 cmp	 DWORD PTR _n$235096[ebp], 10 ; 0000000aH
  049a7	0f 8d 80 00 00
	00		 jge	 $LN23@MLS_SkillF

; 2160 : 		{
; 2161 : 			number = gParty.m_PartyS[partynum].Number[n];

  049ad	8b 45 ec	 mov	 eax, DWORD PTR _partynum$[ebp]
  049b0	6b c0 6c	 imul	 eax, 108		; 0000006cH
  049b3	8b 4d a8	 mov	 ecx, DWORD PTR _n$235096[ebp]
  049b6	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  049bd	89 55 f0	 mov	 DWORD PTR _number$[ebp], edx

; 2162 : 
; 2163 : 			if( number >= 0 )

  049c0	83 7d f0 00	 cmp	 DWORD PTR _number$[ebp], 0
  049c4	7c 62		 jl	 SHORT $LN20@MLS_SkillF

; 2164 : 			{
; 2165 : 				lpPartyObj = &gObj[number];

  049c6	8b 45 f0	 mov	 eax, DWORD PTR _number$[ebp]
  049c9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  049cf	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  049d5	89 45 ac	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 2166 : 
; 2167 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  049d8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  049db	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  049e2	8b 55 ac	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  049e5	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  049ec	3b c8		 cmp	 ecx, eax
  049ee	75 38		 jne	 SHORT $LN20@MLS_SkillF

; 2168 : 				{
; 2169 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  049f0	8b 45 f0	 mov	 eax, DWORD PTR _number$[ebp]
  049f3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  049f9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  049ff	50		 push	 eax
  04a00	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04a03	51		 push	 ecx
  04a04	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  04a09	83 c4 08	 add	 esp, 8
  04a0c	89 45 e0	 mov	 DWORD PTR _dis$[ebp], eax

; 2170 : 
; 2171 : 					if( dis < 10 )

  04a0f	83 7d e0 0a	 cmp	 DWORD PTR _dis$[ebp], 10 ; 0000000aH
  04a13	7d 13		 jge	 SHORT $LN20@MLS_SkillF

; 2172 : 					{
; 2173 : 						ApplyPartyIndex[n] = number;

  04a15	8b 45 a8	 mov	 eax, DWORD PTR _n$235096[ebp]
  04a18	8b 4d f0	 mov	 ecx, DWORD PTR _number$[ebp]
  04a1b	89 4c 85 b8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], ecx

; 2174 : 						viewplayer++;

  04a1f	8b 45 b4	 mov	 eax, DWORD PTR _viewplayer$[ebp]
  04a22	83 c0 01	 add	 eax, 1
  04a25	89 45 b4	 mov	 DWORD PTR _viewplayer$[ebp], eax
$LN20@MLS_SkillF:

; 2175 : 					}
; 2176 : 				}
; 2177 : 			}
; 2178 : 		}

  04a28	e9 6d ff ff ff	 jmp	 $LN24@MLS_SkillF
$LN23@MLS_SkillF:

; 2179 : 	}
; 2180 : 
; 2181 : 	if( viewplayer > 1 )

  04a2d	83 7d b4 01	 cmp	 DWORD PTR _viewplayer$[ebp], 1
  04a31	7e 34		 jle	 SHORT $LN13@MLS_SkillF

; 2182 : 	{
; 2183 : 		if( viewplayer == 2 )

  04a33	83 7d b4 02	 cmp	 DWORD PTR _viewplayer$[ebp], 2
  04a37	75 09		 jne	 SHORT $LN18@MLS_SkillF

; 2184 : 		{
; 2185 : 			viewpercent = 1;

  04a39	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 1
  04a40	eb 25		 jmp	 SHORT $LN13@MLS_SkillF
$LN18@MLS_SkillF:

; 2186 : 		}
; 2187 : 		else if( viewplayer == 3 )

  04a42	83 7d b4 03	 cmp	 DWORD PTR _viewplayer$[ebp], 3
  04a46	75 09		 jne	 SHORT $LN16@MLS_SkillF

; 2188 : 		{
; 2189 : 			viewpercent = 2;

  04a48	c7 45 b0 02 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 2
  04a4f	eb 16		 jmp	 SHORT $LN13@MLS_SkillF
$LN16@MLS_SkillF:

; 2190 : 		}
; 2191 : 		else if( viewplayer == 4 )

  04a51	83 7d b4 04	 cmp	 DWORD PTR _viewplayer$[ebp], 4
  04a55	75 09		 jne	 SHORT $LN14@MLS_SkillF

; 2192 : 		{
; 2193 : 			viewpercent = 3;

  04a57	c7 45 b0 03 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 3

; 2194 : 		}
; 2195 : 		else

  04a5e	eb 07		 jmp	 SHORT $LN13@MLS_SkillF
$LN14@MLS_SkillF:

; 2196 : 		{
; 2197 : 			viewpercent = 4;

  04a60	c7 45 b0 04 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 4
$LN13@MLS_SkillF:

; 2198 : 		}
; 2199 : 	}
; 2200 : 	float iaddLifepower;
; 2201 : 	int iLifeTime		= g_SkillAdditionInfo.m_SwellLifeTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SwellLifeTimeDiv;

  04a67	0f b7 0d 84 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3204
  04a6e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04a71	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  04a78	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04a7b	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  04a82	03 c2		 add	 eax, edx
  04a84	0f b7 35 86 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3206
  04a8b	99		 cdq
  04a8c	f7 fe		 idiv	 esi
  04a8e	03 c8		 add	 ecx, eax
  04a90	89 4d a0	 mov	 DWORD PTR _iLifeTime$[ebp], ecx

; 2202 : 	
; 2203 : 	if( g_SkillAdditionInfo.m_SwellLifeTimeMax > 0 && iLifeTime > g_SkillAdditionInfo.m_SwellLifeTimeMax )

  04a93	83 3d 88 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3208, 0
  04a9a	76 13		 jbe	 SHORT $LN12@MLS_SkillF
  04a9c	8b 45 a0	 mov	 eax, DWORD PTR _iLifeTime$[ebp]
  04a9f	3b 05 88 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3208
  04aa5	76 08		 jbe	 SHORT $LN12@MLS_SkillF

; 2204 : 	{
; 2205 : 		iLifeTime = g_SkillAdditionInfo.m_SwellLifeTimeMax;

  04aa7	a1 88 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3208
  04aac	89 45 a0	 mov	 DWORD PTR _iLifeTime$[ebp], eax
$LN12@MLS_SkillF:

; 2206 : 	}
; 2207 : 
; 2208 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  04aaf	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  04ab2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  04ab5	51		 push	 ecx
  04ab6	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04ab9	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  04ac0	50		 push	 eax
  04ac1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  04ac4	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
  04ac9	89 45 9c	 mov	 DWORD PTR _iPreSkill$[ebp], eax

; 2209 : 
; 2210 : 	if( iPreSkill > 0 )

  04acc	83 7d 9c 00	 cmp	 DWORD PTR _iPreSkill$[ebp], 0
  04ad0	0f 8e a6 00 00
	00		 jle	 $LN11@MLS_SkillF

; 2211 : 	{
; 2212 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  04ad6	8b 45 9c	 mov	 eax, DWORD PTR _iPreSkill$[ebp]
  04ad9	50		 push	 eax
  04ada	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04add	51		 push	 ecx
  04ade	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  04ae1	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
  04ae6	89 45 98	 mov	 DWORD PTR _iPreLevel$235115[ebp], eax

; 2213 : 
; 2214 : 		if( iPreLevel > 0 )

  04ae9	83 7d 98 00	 cmp	 DWORD PTR _iPreLevel$235115[ebp], 0
  04aed	0f 8e 87 00 00
	00		 jle	 $LN10@MLS_SkillF

; 2215 : 		{
; 2216 : 			float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);

  04af3	8b 45 98	 mov	 eax, DWORD PTR _iPreLevel$235115[ebp]
  04af6	50		 push	 eax
  04af7	8b 4d 9c	 mov	 ecx, DWORD PTR _iPreSkill$[ebp]
  04afa	51		 push	 ecx
  04afb	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  04b00	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  04b05	50		 push	 eax
  04b06	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  04b09	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  04b0e	d9 5d 94	 fstp	 DWORD PTR _fSkillValue$235117[ebp]

; 2217 : 			iaddLifepower = (g_SkillAdditionInfo.m_SwellLifeEffectStart + (lpObj->Vitality + lpObj->AddVitality) / g_SkillAdditionInfo.m_SwellLifeEffectDiv1 + (lpObj->Energy + lpObj->AddEnergy)/ g_SkillAdditionInfo.m_SwellLifeEffectDiv2 + viewpercent) + fSkillValue;

  04b11	0f b7 0d 78 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3192
  04b18	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04b1b	0f b7 82 f8 00
	00 00		 movzx	 eax, WORD PTR [edx+248]
  04b22	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04b25	0f bf 92 24 01
	00 00		 movsx	 edx, WORD PTR [edx+292]
  04b2c	03 c2		 add	 eax, edx
  04b2e	0f b7 35 7a 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3194
  04b35	99		 cdq
  04b36	f7 fe		 idiv	 esi
  04b38	03 c8		 add	 ecx, eax
  04b3a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04b3d	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  04b44	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04b47	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  04b4e	03 c2		 add	 eax, edx
  04b50	0f b7 35 7c 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3196
  04b57	99		 cdq
  04b58	f7 fe		 idiv	 esi
  04b5a	03 4d b0	 add	 ecx, DWORD PTR _viewpercent$[ebp]
  04b5d	03 c1		 add	 eax, ecx
  04b5f	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv354[ebp], eax
  04b65	db 85 3c ff ff
	ff		 fild	 DWORD PTR tv354[ebp]
  04b6b	d8 45 94	 fadd	 DWORD PTR _fSkillValue$235117[ebp]
  04b6e	d9 5d a4	 fstp	 DWORD PTR _iaddLifepower$[ebp]

; 2218 : 			iaddLifepower += fSkillValue;

  04b71	d9 45 a4	 fld	 DWORD PTR _iaddLifepower$[ebp]
  04b74	d8 45 94	 fadd	 DWORD PTR _fSkillValue$235117[ebp]
  04b77	d9 5d a4	 fstp	 DWORD PTR _iaddLifepower$[ebp]
$LN10@MLS_SkillF:

; 2219 : 		}
; 2220 : 	}
; 2221 : 	else

  04b7a	eb 5d		 jmp	 SHORT $LN9@MLS_SkillF
$LN11@MLS_SkillF:

; 2222 : 	{
; 2223 : 		iaddLifepower = g_SkillAdditionInfo.m_SwellLifeEffectStart + (lpObj->Vitality + lpObj->AddVitality) / g_SkillAdditionInfo.m_SwellLifeEffectDiv1 + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SwellLifeEffectDiv2 + viewpercent;

  04b7c	0f b7 0d 78 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3192
  04b83	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04b86	0f b7 82 f8 00
	00 00		 movzx	 eax, WORD PTR [edx+248]
  04b8d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04b90	0f bf 92 24 01
	00 00		 movsx	 edx, WORD PTR [edx+292]
  04b97	03 c2		 add	 eax, edx
  04b99	0f b7 35 7a 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3194
  04ba0	99		 cdq
  04ba1	f7 fe		 idiv	 esi
  04ba3	03 c8		 add	 ecx, eax
  04ba5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04ba8	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  04baf	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04bb2	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  04bb9	03 c2		 add	 eax, edx
  04bbb	0f b7 35 7c 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3196
  04bc2	99		 cdq
  04bc3	f7 fe		 idiv	 esi
  04bc5	03 4d b0	 add	 ecx, DWORD PTR _viewpercent$[ebp]
  04bc8	03 c1		 add	 eax, ecx
  04bca	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv370[ebp], eax
  04bd0	db 85 3c ff ff
	ff		 fild	 DWORD PTR tv370[ebp]
  04bd6	d9 5d a4	 fstp	 DWORD PTR _iaddLifepower$[ebp]
$LN9@MLS_SkillF:

; 2224 : 	}
; 2225 : 
; 2226 : 	if( g_SkillAdditionInfo.m_SwellLifeEffectMax > 0 && iaddLifepower > g_SkillAdditionInfo.m_SwellLifeEffectMax )

  04bd9	83 3d 80 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3200, 0
  04be0	76 45		 jbe	 SHORT $LN8@MLS_SkillF
  04be2	a1 80 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3200
  04be7	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv372[ebp], eax
  04bed	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv372[ebp+4], 0
  04bf7	df ad 38 ff ff
	ff		 fild	 QWORD PTR tv372[ebp]
  04bfd	d9 45 a4	 fld	 DWORD PTR _iaddLifepower$[ebp]
  04c00	de d9		 fcompp
  04c02	df e0		 fnstsw	 ax
  04c04	f6 c4 41	 test	 ah, 65			; 00000041H
  04c07	75 1e		 jne	 SHORT $LN8@MLS_SkillF

; 2227 : 	{
; 2228 : 		iaddLifepower = g_SkillAdditionInfo.m_SwellLifeEffectMax;

  04c09	a1 80 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3200
  04c0e	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv380[ebp], eax
  04c14	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv380[ebp+4], 0
  04c1e	df ad 38 ff ff
	ff		 fild	 QWORD PTR tv380[ebp]
  04c24	d9 5d a4	 fstp	 DWORD PTR _iaddLifepower$[ebp]
$LN8@MLS_SkillF:

; 2229 : 	}
; 2230 : 
; 2231 : 	float iaddManapower;
; 2232 : 	
; 2233 : 	if( lpMagic->m_Skill == 360 )

  04c27	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  04c2a	81 78 08 68 01
	00 00		 cmp	 DWORD PTR [eax+8], 360	; 00000168H
  04c31	75 2e		 jne	 SHORT $LN7@MLS_SkillF

; 2234 : 	{
; 2235 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  04c33	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  04c36	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  04c3a	51		 push	 ecx
  04c3b	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  04c3e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  04c41	50		 push	 eax
  04c42	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  04c47	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  04c4c	50		 push	 eax
  04c4d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  04c50	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  04c55	d9 5d 8c	 fstp	 DWORD PTR _fSkillValue$235122[ebp]

; 2236 : 		iaddManapower = fSkillValue+viewpercent;

  04c58	db 45 b0	 fild	 DWORD PTR _viewpercent$[ebp]
  04c5b	d8 45 8c	 fadd	 DWORD PTR _fSkillValue$235122[ebp]
  04c5e	d9 5d 90	 fstp	 DWORD PTR _iaddManapower$[ebp]
$LN7@MLS_SkillF:

; 2237 : 	}
; 2238 : 
; 2239 : 	int iaddlife;
; 2240 : 	int iaddMana;
; 2241 : 
; 2242 : 	if( partynum == -1 )

  04c61	83 7d ec ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  04c65	75 79		 jne	 SHORT $LN6@MLS_SkillF

; 2243 : 	{
; 2244 : 		iaddlife = lpObj->MaxLife*iaddLifepower/100;

  04c67	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04c6a	d9 80 00 01 00
	00		 fld	 DWORD PTR [eax+256]
  04c70	d8 4d a4	 fmul	 DWORD PTR _iaddLifepower$[ebp]
  04c73	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  04c79	e8 00 00 00 00	 call	 __ftol2_sse
  04c7e	89 45 88	 mov	 DWORD PTR _iaddlife$[ebp], eax

; 2245 : 		iaddMana = lpObj->MaxMana*iaddManapower/100;

  04c81	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04c84	d9 80 14 01 00
	00		 fld	 DWORD PTR [eax+276]
  04c8a	d8 4d 90	 fmul	 DWORD PTR _iaddManapower$[ebp]
  04c8d	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  04c93	e8 00 00 00 00	 call	 __ftol2_sse
  04c98	89 45 84	 mov	 DWORD PTR _iaddMana$[ebp], eax

; 2246 : 
; 2247 : 		gObjApplyBuffEffectDuration(lpObj,135,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);

  04c9b	8b 45 a0	 mov	 eax, DWORD PTR _iLifeTime$[ebp]
  04c9e	50		 push	 eax
  04c9f	8b 4d 84	 mov	 ecx, DWORD PTR _iaddMana$[ebp]
  04ca2	51		 push	 ecx
  04ca3	6a 05		 push	 5
  04ca5	8b 55 88	 mov	 edx, DWORD PTR _iaddlife$[ebp]
  04ca8	52		 push	 edx
  04ca9	6a 04		 push	 4
  04cab	68 87 00 00 00	 push	 135			; 00000087H
  04cb0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04cb3	50		 push	 eax
  04cb4	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  04cb9	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2248 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  04cbc	0f b6 45 f4	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  04cc0	50		 push	 eax
  04cc1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04cc4	8b 11		 mov	 edx, DWORD PTR [ecx]
  04cc6	52		 push	 edx
  04cc7	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  04cca	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  04cce	51		 push	 ecx
  04ccf	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04cd2	52		 push	 edx
  04cd3	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  04cd8	83 c4 10	 add	 esp, 16			; 00000010H

; 2249 : 	}
; 2250 : 	else

  04cdb	e9 b9 00 00 00	 jmp	 $LN2@MLS_SkillF
$LN6@MLS_SkillF:

; 2251 : 	{
; 2252 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  04ce0	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _n$235127[ebp], 0
  04ce7	eb 09		 jmp	 SHORT $LN4@MLS_SkillF
$LN3@MLS_SkillF:
  04ce9	8b 45 80	 mov	 eax, DWORD PTR _n$235127[ebp]
  04cec	83 c0 01	 add	 eax, 1
  04cef	89 45 80	 mov	 DWORD PTR _n$235127[ebp], eax
$LN4@MLS_SkillF:
  04cf2	83 7d 80 0a	 cmp	 DWORD PTR _n$235127[ebp], 10 ; 0000000aH
  04cf6	0f 8d 9d 00 00
	00		 jge	 $LN2@MLS_SkillF

; 2253 : 		{
; 2254 : 			if( ApplyPartyIndex[n] != -1 )

  04cfc	8b 45 80	 mov	 eax, DWORD PTR _n$235127[ebp]
  04cff	83 7c 85 b8 ff	 cmp	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], -1
  04d04	0f 84 8a 00 00
	00		 je	 $LN1@MLS_SkillF

; 2255 : 			{
; 2256 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  04d0a	8b 45 80	 mov	 eax, DWORD PTR _n$235127[ebp]
  04d0d	8b 4c 85 b8	 mov	 ecx, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  04d11	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  04d17	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04d1d	89 4d ac	 mov	 DWORD PTR _lpPartyObj$[ebp], ecx

; 2257 : 				iaddlife = lpPartyObj->MaxLife*iaddLifepower/100;

  04d20	8b 45 ac	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  04d23	d9 80 00 01 00
	00		 fld	 DWORD PTR [eax+256]
  04d29	d8 4d a4	 fmul	 DWORD PTR _iaddLifepower$[ebp]
  04d2c	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  04d32	e8 00 00 00 00	 call	 __ftol2_sse
  04d37	89 45 88	 mov	 DWORD PTR _iaddlife$[ebp], eax

; 2258 : 				iaddMana = lpPartyObj->MaxMana*iaddManapower/100;

  04d3a	8b 45 ac	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  04d3d	d9 80 14 01 00
	00		 fld	 DWORD PTR [eax+276]
  04d43	d8 4d 90	 fmul	 DWORD PTR _iaddManapower$[ebp]
  04d46	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  04d4c	e8 00 00 00 00	 call	 __ftol2_sse
  04d51	89 45 84	 mov	 DWORD PTR _iaddMana$[ebp], eax

; 2259 : 
; 2260 : 				gObjApplyBuffEffectDuration(lpPartyObj,135,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);

  04d54	8b 45 a0	 mov	 eax, DWORD PTR _iLifeTime$[ebp]
  04d57	50		 push	 eax
  04d58	8b 4d 84	 mov	 ecx, DWORD PTR _iaddMana$[ebp]
  04d5b	51		 push	 ecx
  04d5c	6a 05		 push	 5
  04d5e	8b 55 88	 mov	 edx, DWORD PTR _iaddlife$[ebp]
  04d61	52		 push	 edx
  04d62	6a 04		 push	 4
  04d64	68 87 00 00 00	 push	 135			; 00000087H
  04d69	8b 45 ac	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  04d6c	50		 push	 eax
  04d6d	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  04d72	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2261 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,skillSuccess);

  04d75	0f b6 45 f4	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  04d79	50		 push	 eax
  04d7a	8b 4d ac	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  04d7d	8b 11		 mov	 edx, DWORD PTR [ecx]
  04d7f	52		 push	 edx
  04d80	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  04d83	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  04d87	51		 push	 ecx
  04d88	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04d8b	52		 push	 edx
  04d8c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  04d91	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillF:

; 2262 : 			}
; 2263 : 		}

  04d94	e9 50 ff ff ff	 jmp	 $LN3@MLS_SkillF
$LN2@MLS_SkillF:
$LN29@MLS_SkillF:

; 2264 : 	}
; 2265 : }

  04d99	5f		 pop	 edi
  04d9a	5e		 pop	 esi
  04d9b	5b		 pop	 ebx
  04d9c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  04d9f	33 cd		 xor	 ecx, ebp
  04da1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  04da6	8b e5		 mov	 esp, ebp
  04da8	5d		 pop	 ebp
  04da9	c2 08 00	 ret	 8
?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife
; _this$ = ecx

; 2268 : {

  04db0	55		 push	 ebp
  04db1	8b ec		 mov	 ebp, esp
  04db3	83 ec 44	 sub	 esp, 68			; 00000044H
  04db6	53		 push	 ebx
  04db7	56		 push	 esi
  04db8	57		 push	 edi
  04db9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2269 : 	/*int skillSuccess = TRUE;
; 2270 : 
; 2271 : 	if( lpObj->Type != OBJ_USER &&
; 2272 : 		lpObj->m_RecallMon == -1 )
; 2273 : 		return;
; 2274 : 
; 2275 : 	if( lpObj->Class != CLASS_KNIGHT &&
; 2276 : 		lpObj->Class != CLASS_MAGUMSA )
; 2277 : 		return;
; 2278 : 
; 2279 : 	int number;
; 2280 : 	int partynum = 0;
; 2281 : 	int totallevel = 0;
; 2282 : 	int partycount;
; 2283 : 	int dis;
; 2284 : 	int ApplyPartyIndex[5];
; 2285 : 	int viewplayer = 0;
; 2286 : 	int viewpercent = 0;
; 2287 : 	LPOBJ lpPartyObj;
; 2288 : 
; 2289 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 2290 : 
; 2291 : 	partynum = lpObj->PartyNumber;
; 2292 : 
; 2293 : 	if( partynum != -1 )
; 2294 : 	{
; 2295 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2296 : 
; 2297 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)
; 2298 : 		{
; 2299 : 			number = gParty.m_PartyS[partynum].Number[n];
; 2300 : 
; 2301 : 			if( number >= 0 )
; 2302 : 			{
; 2303 : 				lpPartyObj = &gObj[number];
; 2304 : 
; 2305 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )
; 2306 : 				{
; 2307 : 					dis = gObjCalDistance(lpObj,&gObj[number]);
; 2308 : 
; 2309 : 					if( dis < 10 )
; 2310 : 					{
; 2311 : 						ApplyPartyIndex[n] = number;
; 2312 : 						viewplayer++;
; 2313 : 					}
; 2314 : 				}
; 2315 : 			}
; 2316 : 		}
; 2317 : 	}
; 2318 : 
; 2319 : 	if( viewplayer > 1 )
; 2320 : 	{
; 2321 : 		if( viewplayer == 2 )
; 2322 : 		{
; 2323 : 			viewpercent = 1;
; 2324 : 		}
; 2325 : 		else if( viewplayer == 3 )
; 2326 : 		{
; 2327 : 			viewpercent = 2;
; 2328 : 		}
; 2329 : 		else if( viewplayer == 4 )
; 2330 : 		{
; 2331 : 			viewpercent = 3;
; 2332 : 		}
; 2333 : 		else
; 2334 : 		{
; 2335 : 			viewpercent = 4;
; 2336 : 		}
; 2337 : 	}
; 2338 : 
; 2339 : 	float iaddLifepower = gc_AddLifeStartVal + (lpObj->Vitality+lpObj->AddVitality)/gc_AddLifeVitDiv + (lpObj->Energy+lpObj->AddEnergy)/gc_AddLifeEneDiv + viewpercent;
; 2340 : 
; 2341 : 	if( iaddLifepower > gc_AddLifeMaxValue)
; 2342 : 		iaddLifepower = gc_AddLifeMaxValue;
; 2343 : 
; 2344 : 	float fSkillValue2 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);
; 2345 : 
; 2346 : 	if( fSkillValue2 > 0.0f )
; 2347 : 	{
; 2348 : 		iaddLifepower += fSkillValue2;
; 2349 : 	}
; 2350 : 
; 2351 : 	float iaddManapower;
; 2352 : 	float fSkillValue1 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);
; 2353 : 
; 2354 : 	if( fSkillValue1 > 0.0f )
; 2355 : 	{
; 2356 : 		iaddManapower = fSkillValue1+viewpercent;
; 2357 : 	}
; 2358 : 
; 2359 : 	float iaddBPpower;
; 2360 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);
; 2361 : 
; 2362 : 	if( fSkillValue > 0.0f )
; 2363 : 	{
; 2364 : 		iaddBPpower = fSkillValue+viewpercent;
; 2365 : 	}
; 2366 : 
; 2367 : 	int iLifeTime = gc_AddLifeTimeStartVal + (lpObj->Energy+lpObj->AddEnergy)/gc_AddLifeTimeEneDiv;
; 2368 : 
; 2369 : 	if( iLifeTime > gc_AddLifeTimeMaxVal )
; 2370 : 		iLifeTime = gc_AddLifeTimeMaxVal;
; 2371 : 
; 2372 : 	int iaddlife;
; 2373 : 	int iaddMana;
; 2374 : 	int iaddBP;
; 2375 : 
; 2376 : 	if( partynum == -1 )
; 2377 : 	{
; 2378 : 		iaddlife = lpObj->MaxLife*iaddLifepower/100;
; 2379 : 		iaddMana = lpObj->MaxMana*iaddManapower/100;
; 2380 : 		iaddBP = lpObj->MaxBP*iaddBPpower/100;
; 2381 : 
; 2382 : 		lpObj->m_MPSkillOpt.MpsSwellLifeAddBP = iaddBP;
; 2383 : 
; 2384 : 		gObjApplyBuffEffectDuration(lpObj,BUFF_SWELL_LIFE3,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);
; 2385 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);
; 2386 : 		gObjCalCharacter(lpObj->m_Index);
; 2387 : 	}
; 2388 : 	else
; 2389 : 	{
; 2390 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)
; 2391 : 		{
; 2392 : 			if( ApplyPartyIndex[n] != -1 )
; 2393 : 			{
; 2394 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 2395 : 				iaddlife = lpPartyObj->MaxLife*iaddLifepower/100;
; 2396 : 				iaddMana = lpPartyObj->MaxMana*iaddManapower/100;
; 2397 : 				iaddBP = lpPartyObj->MaxBP*iaddBPpower/100;
; 2398 : 
; 2399 : 				lpPartyObj->m_MPSkillOpt.MpsSwellLifeAddBP = iaddBP;
; 2400 : 
; 2401 : 				gObjApplyBuffEffectDuration(lpPartyObj,BUFF_SWELL_LIFE3,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);
; 2402 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,skillSuccess);
; 2403 : 				gObjCalCharacter(lpPartyObj->m_Index);
; 2404 : 			}
; 2405 : 		}
; 2406 : 	}*/
; 2407 : }

  04dbc	5f		 pop	 edi
  04dbd	5e		 pop	 esi
  04dbe	5b		 pop	 ebx
  04dbf	8b e5		 mov	 esp, ebp
  04dc1	5d		 pop	 ebp
  04dc2	c2 08 00	 ret	 8
?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife
_TEXT	ENDS
EXTRN	?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjSearchActiveEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv167 = -84						; size = 4
_fMagicDamage$ = -16					; size = 4
_nEffectValue$ = -12					; size = 4
_fSkillValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower
; _this$ = ecx

; 2410 : {

  04dd0	55		 push	 ebp
  04dd1	8b ec		 mov	 ebp, esp
  04dd3	83 ec 54	 sub	 esp, 84			; 00000054H
  04dd6	53		 push	 ebx
  04dd7	56		 push	 esi
  04dd8	57		 push	 edi
  04dd9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2411 : 	if( lpObj->Type != OBJ_USER )

  04ddc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04ddf	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  04de3	83 f9 01	 cmp	 ecx, 1
  04de6	74 07		 je	 SHORT $LN4@MLS_SkillS@7

; 2412 : 		return false;

  04de8	33 c0		 xor	 eax, eax
  04dea	e9 fc 00 00 00	 jmp	 $LN5@MLS_SkillS@7
$LN4@MLS_SkillS@7:

; 2413 : 
; 2414 : 	if( lpObj->Class != CLASS_WIZARD )

  04def	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04df2	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  04df9	85 c9		 test	 ecx, ecx
  04dfb	74 07		 je	 SHORT $LN3@MLS_SkillS@7

; 2415 : 		return false;

  04dfd	33 c0		 xor	 eax, eax
  04dff	e9 e7 00 00 00	 jmp	 $LN5@MLS_SkillS@7
$LN3@MLS_SkillS@7:

; 2416 : 
; 2417 : 	if( gObjSearchActiveEffect(lpObj,138) == TRUE )

  04e04	68 8a 00 00 00	 push	 138			; 0000008aH
  04e09	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04e0c	50		 push	 eax
  04e0d	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  04e12	83 c4 08	 add	 esp, 8
  04e15	0f b6 c8	 movzx	 ecx, al
  04e18	83 f9 01	 cmp	 ecx, 1
  04e1b	75 07		 jne	 SHORT $LN2@MLS_SkillS@7

; 2418 : 		return false;

  04e1d	33 c0		 xor	 eax, eax
  04e1f	e9 c7 00 00 00	 jmp	 $LN5@MLS_SkillS@7
$LN2@MLS_SkillS@7:

; 2419 : 
; 2420 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  04e24	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  04e27	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  04e2b	51		 push	 ecx
  04e2c	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  04e2f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  04e32	50		 push	 eax
  04e33	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  04e38	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  04e3d	50		 push	 eax
  04e3e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04e41	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  04e46	d9 5d f8	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 2421 : 	int nEffectValue = (float)(lpObj->Energy / g_SkillAdditionInfo.m_WizardryEnchantDamageDiv) * (float)g_SkillAdditionInfo.m_WizardryEnchantDamageFact;

  04e49	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04e4c	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  04e53	0f b7 0d 68 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3176
  04e5a	99		 cdq
  04e5b	f7 f9		 idiv	 ecx
  04e5d	89 45 ac	 mov	 DWORD PTR tv167[ebp], eax
  04e60	db 45 ac	 fild	 DWORD PTR tv167[ebp]
  04e63	d8 0d 6c 0c 00
	00		 fmul	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3180
  04e69	e8 00 00 00 00	 call	 __ftol2_sse
  04e6e	89 45 f4	 mov	 DWORD PTR _nEffectValue$[ebp], eax

; 2422 : 	
; 2423 : 	if( g_SkillAdditionInfo.m_WizardryEnchantDamageMax > 0 && nEffectValue > g_SkillAdditionInfo.m_WizardryEnchantDamageMax )

  04e71	83 3d 70 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3184, 0
  04e78	76 13		 jbe	 SHORT $LN1@MLS_SkillS@7
  04e7a	8b 45 f4	 mov	 eax, DWORD PTR _nEffectValue$[ebp]
  04e7d	3b 05 70 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3184
  04e83	76 08		 jbe	 SHORT $LN1@MLS_SkillS@7

; 2424 : 	{
; 2425 : 		nEffectValue = g_SkillAdditionInfo.m_WizardryEnchantDamageMax;

  04e85	a1 70 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3184
  04e8a	89 45 f4	 mov	 DWORD PTR _nEffectValue$[ebp], eax
$LN1@MLS_SkillS@7:

; 2426 : 	}
; 2427 : 	
; 2428 : 	float fMagicDamage = (lpObj->m_MagicDamageMax/100.0f)*fSkillValue;

  04e8d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04e90	db 80 6c 04 00
	00		 fild	 DWORD PTR [eax+1132]
  04e96	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  04e9c	d8 4d f8	 fmul	 DWORD PTR _fSkillValue$[ebp]
  04e9f	d9 5d f0	 fstp	 DWORD PTR _fMagicDamage$[ebp]

; 2429 : 
; 2430 : 	gObjApplyBuffEffectDuration(lpObj,138,ADD_OPTION_MAGICDAMAGEMIN,nEffectValue,ADD_OPTION_MAGICDAMAGEMAX,fMagicDamage,g_SkillAdditionInfo.m_WizardryEnchantTime);

  04ea2	a1 74 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3188
  04ea7	50		 push	 eax
  04ea8	d9 45 f0	 fld	 DWORD PTR _fMagicDamage$[ebp]
  04eab	e8 00 00 00 00	 call	 __ftol2_sse
  04eb0	50		 push	 eax
  04eb1	6a 22		 push	 34			; 00000022H
  04eb3	8b 4d f4	 mov	 ecx, DWORD PTR _nEffectValue$[ebp]
  04eb6	51		 push	 ecx
  04eb7	6a 21		 push	 33			; 00000021H
  04eb9	68 8a 00 00 00	 push	 138			; 0000008aH
  04ebe	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04ec1	52		 push	 edx
  04ec2	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  04ec7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2431 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  04eca	6a 01		 push	 1
  04ecc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04ecf	8b 08		 mov	 ecx, DWORD PTR [eax]
  04ed1	51		 push	 ecx
  04ed2	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  04ed5	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  04ed9	50		 push	 eax
  04eda	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  04edd	51		 push	 ecx
  04ede	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  04ee3	83 c4 10	 add	 esp, 16			; 00000010H

; 2432 : 	return true;

  04ee6	b8 01 00 00 00	 mov	 eax, 1
$LN5@MLS_SkillS@7:

; 2433 : }

  04eeb	5f		 pop	 edi
  04eec	5e		 pop	 esi
  04eed	5b		 pop	 ebx
  04eee	8b e5		 mov	 esp, ebp
  04ef0	5d		 pop	 ebp
  04ef1	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower
_TEXT	ENDS
PUBLIC	?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv174 = -84						; size = 4
_fMagicDamage$ = -16					; size = 4
_nEffectValue$ = -12					; size = 4
_fSkillValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower
; _this$ = ecx

; 2436 : {

  04f00	55		 push	 ebp
  04f01	8b ec		 mov	 ebp, esp
  04f03	83 ec 54	 sub	 esp, 84			; 00000054H
  04f06	53		 push	 ebx
  04f07	56		 push	 esi
  04f08	57		 push	 edi
  04f09	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2437 : 	if( lpObj->Type != OBJ_USER )

  04f0c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04f0f	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  04f13	83 f9 01	 cmp	 ecx, 1
  04f16	74 07		 je	 SHORT $LN4@MLS_SkillS@8

; 2438 : 		return false;

  04f18	33 c0		 xor	 eax, eax
  04f1a	e9 20 01 00 00	 jmp	 $LN5@MLS_SkillS@8
$LN4@MLS_SkillS@8:

; 2439 : 
; 2440 : 	if( lpObj->Class != CLASS_WIZARD )

  04f1f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04f22	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  04f29	85 c9		 test	 ecx, ecx
  04f2b	74 07		 je	 SHORT $LN3@MLS_SkillS@8

; 2441 : 		return false;

  04f2d	33 c0		 xor	 eax, eax
  04f2f	e9 0b 01 00 00	 jmp	 $LN5@MLS_SkillS@8
$LN3@MLS_SkillS@8:

; 2442 : 
; 2443 : 	if( gObjSearchActiveEffect(lpObj,139) == TRUE )

  04f34	68 8b 00 00 00	 push	 139			; 0000008bH
  04f39	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04f3c	50		 push	 eax
  04f3d	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  04f42	83 c4 08	 add	 esp, 8
  04f45	0f b6 c8	 movzx	 ecx, al
  04f48	83 f9 01	 cmp	 ecx, 1
  04f4b	75 07		 jne	 SHORT $LN2@MLS_SkillS@8

; 2444 : 		return false;

  04f4d	33 c0		 xor	 eax, eax
  04f4f	e9 eb 00 00 00	 jmp	 $LN5@MLS_SkillS@8
$LN2@MLS_SkillS@8:

; 2445 : 
; 2446 : 	float fSkillValue = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  04f54	6a 01		 push	 1
  04f56	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  04f59	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  04f5c	51		 push	 ecx
  04f5d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  04f60	52		 push	 edx
  04f61	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04f64	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  04f69	d9 5d f8	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 2447 : 
; 2448 : 	int nEffectValue = (float)(lpObj->Energy / g_SkillAdditionInfo.m_WizardryEnchantDamageDiv) * (float)g_SkillAdditionInfo.m_WizardryEnchantDamageFact;

  04f6c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04f6f	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  04f76	0f b7 0d 68 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3176
  04f7d	99		 cdq
  04f7e	f7 f9		 idiv	 ecx
  04f80	89 45 ac	 mov	 DWORD PTR tv174[ebp], eax
  04f83	db 45 ac	 fild	 DWORD PTR tv174[ebp]
  04f86	d8 0d 6c 0c 00
	00		 fmul	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3180
  04f8c	e8 00 00 00 00	 call	 __ftol2_sse
  04f91	89 45 f4	 mov	 DWORD PTR _nEffectValue$[ebp], eax

; 2449 : 	
; 2450 : 	if( g_SkillAdditionInfo.m_WizardryEnchantDamageMax > 0 && nEffectValue > g_SkillAdditionInfo.m_WizardryEnchantDamageMax )

  04f94	83 3d 70 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3184, 0
  04f9b	76 13		 jbe	 SHORT $LN1@MLS_SkillS@8
  04f9d	8b 45 f4	 mov	 eax, DWORD PTR _nEffectValue$[ebp]
  04fa0	3b 05 70 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3184
  04fa6	76 08		 jbe	 SHORT $LN1@MLS_SkillS@8

; 2451 : 	{
; 2452 : 		nEffectValue = g_SkillAdditionInfo.m_WizardryEnchantDamageMax;

  04fa8	a1 70 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3184
  04fad	89 45 f4	 mov	 DWORD PTR _nEffectValue$[ebp], eax
$LN1@MLS_SkillS@8:

; 2453 : 	}
; 2454 : 	
; 2455 : 	float fMagicDamage = (lpObj->m_MagicDamageMax/100.0f)*fSkillValue;

  04fb0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04fb3	db 80 6c 04 00
	00		 fild	 DWORD PTR [eax+1132]
  04fb9	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  04fbf	d8 4d f8	 fmul	 DWORD PTR _fSkillValue$[ebp]
  04fc2	d9 5d f0	 fstp	 DWORD PTR _fMagicDamage$[ebp]

; 2456 : 	fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  04fc5	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  04fc8	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  04fcc	51		 push	 ecx
  04fcd	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  04fd0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  04fd3	50		 push	 eax
  04fd4	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  04fd9	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  04fde	50		 push	 eax
  04fdf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04fe2	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  04fe7	d9 5d f8	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 2457 : 	lpObj->m_MPSkillOpt.MpsExpWizardryCrit = fSkillValue;

  04fea	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  04fed	d9 45 f8	 fld	 DWORD PTR _fSkillValue$[ebp]
  04ff0	d9 98 74 27 00
	00		 fstp	 DWORD PTR [eax+10100]

; 2458 : 
; 2459 : 	gObjApplyBuffEffectDuration(lpObj,139,ADD_OPTION_MAGICDAMAGEMIN,nEffectValue,ADD_OPTION_MAGICDAMAGEMAX,fMagicDamage,g_SkillAdditionInfo.m_WizardryEnchantTime);

  04ff6	a1 74 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3188
  04ffb	50		 push	 eax
  04ffc	d9 45 f0	 fld	 DWORD PTR _fMagicDamage$[ebp]
  04fff	e8 00 00 00 00	 call	 __ftol2_sse
  05004	50		 push	 eax
  05005	6a 22		 push	 34			; 00000022H
  05007	8b 4d f4	 mov	 ecx, DWORD PTR _nEffectValue$[ebp]
  0500a	51		 push	 ecx
  0500b	6a 21		 push	 33			; 00000021H
  0500d	68 8b 00 00 00	 push	 139			; 0000008bH
  05012	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05015	52		 push	 edx
  05016	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0501b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2460 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0501e	6a 01		 push	 1
  05020	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05023	8b 08		 mov	 ecx, DWORD PTR [eax]
  05025	51		 push	 ecx
  05026	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05029	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0502d	50		 push	 eax
  0502e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05031	51		 push	 ecx
  05032	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  05037	83 c4 10	 add	 esp, 16			; 00000010H

; 2461 : 	return true;

  0503a	b8 01 00 00 00	 mov	 eax, 1
$LN5@MLS_SkillS@8:

; 2462 : }

  0503f	5f		 pop	 edi
  05040	5e		 pop	 esi
  05041	5b		 pop	 ebx
  05042	8b e5		 mov	 esp, ebp
  05044	5d		 pop	 ebp
  05045	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenFlame
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenFlame
; _this$ = ecx

; 2465 : {

  05050	55		 push	 ebp
  05051	8b ec		 mov	 ebp, esp
  05053	83 ec 48	 sub	 esp, 72			; 00000048H
  05056	53		 push	 ebx
  05057	56		 push	 esi
  05058	57		 push	 edi
  05059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2466 : 	if( lpObj->Type != OBJ_USER )

  0505c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0505f	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  05063	83 f9 01	 cmp	 ecx, 1
  05066	74 02		 je	 SHORT $LN1@MLS_SkillS@9

; 2467 : 		return;

  05068	eb 4e		 jmp	 SHORT $LN2@MLS_SkillS@9
$LN1@MLS_SkillS@9:

; 2468 : 
; 2469 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0506a	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0506d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05073	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05079	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 2470 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0507c	6a 01		 push	 1
  0507e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05081	8b 08		 mov	 ecx, DWORD PTR [eax]
  05083	51		 push	 ecx
  05084	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05087	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0508b	50		 push	 eax
  0508c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0508f	51		 push	 ecx
  05090	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  05095	83 c4 10	 add	 esp, 16			; 00000010H

; 2471 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  05098	6a 00		 push	 0
  0509a	6a 00		 push	 0
  0509c	6a 00		 push	 0
  0509e	6a 00		 push	 0
  050a0	6a 00		 push	 0
  050a2	6a 01		 push	 1
  050a4	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  050a7	50		 push	 eax
  050a8	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  050ab	51		 push	 ecx
  050ac	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  050af	52		 push	 edx
  050b0	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  050b5	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_SkillS@9:

; 2472 : }

  050b8	5f		 pop	 edi
  050b9	5e		 pop	 esi
  050ba	5b		 pop	 ebx
  050bb	8b e5		 mov	 esp, ebp
  050bd	5d		 pop	 ebp
  050be	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenFlame
; Function compile flags: /Odtp /ZI
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder
; _this$ = ecx

; 2475 : {

  050d0	55		 push	 ebp
  050d1	8b ec		 mov	 ebp, esp
  050d3	83 ec 48	 sub	 esp, 72			; 00000048H
  050d6	53		 push	 ebx
  050d7	56		 push	 esi
  050d8	57		 push	 edi
  050d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2476 : 	if( lpObj->Type != OBJ_USER )

  050dc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  050df	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  050e3	83 f9 01	 cmp	 ecx, 1
  050e6	74 02		 je	 SHORT $LN1@MLS_SkillS@10

; 2477 : 		return;

  050e8	eb 4e		 jmp	 SHORT $LN2@MLS_SkillS@10
$LN1@MLS_SkillS@10:

; 2478 : 
; 2479 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  050ea	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  050ed	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  050f3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  050f9	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 2480 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  050fc	6a 01		 push	 1
  050fe	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05101	8b 08		 mov	 ecx, DWORD PTR [eax]
  05103	51		 push	 ecx
  05104	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05107	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0510b	50		 push	 eax
  0510c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0510f	51		 push	 ecx
  05110	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  05115	83 c4 10	 add	 esp, 16			; 00000010H

; 2481 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  05118	6a 00		 push	 0
  0511a	6a 00		 push	 0
  0511c	6a 00		 push	 0
  0511e	6a 00		 push	 0
  05120	6a 00		 push	 0
  05122	6a 01		 push	 1
  05124	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05127	50		 push	 eax
  05128	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0512b	51		 push	 ecx
  0512c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0512f	52		 push	 edx
  05130	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  05135	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_SkillS@10:

; 2482 : }

  05138	5f		 pop	 edi
  05139	5e		 pop	 esi
  0513a	5b		 pop	 ebx
  0513b	8b e5		 mov	 esp, ebp
  0513d	5d		 pop	 ebp
  0513e	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder
; Function compile flags: /Odtp /ZI
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison
; _this$ = ecx

; 2485 : {

  05150	55		 push	 ebp
  05151	8b ec		 mov	 ebp, esp
  05153	83 ec 48	 sub	 esp, 72			; 00000048H
  05156	53		 push	 ebx
  05157	56		 push	 esi
  05158	57		 push	 edi
  05159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2486 : 	if( lpObj->Type != OBJ_USER )

  0515c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0515f	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  05163	83 f9 01	 cmp	 ecx, 1
  05166	74 02		 je	 SHORT $LN1@MLS_SkillS@11

; 2487 : 		return;

  05168	eb 4e		 jmp	 SHORT $LN2@MLS_SkillS@11
$LN1@MLS_SkillS@11:

; 2488 : 
; 2489 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0516a	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0516d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05173	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05179	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 2490 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0517c	6a 01		 push	 1
  0517e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05181	8b 08		 mov	 ecx, DWORD PTR [eax]
  05183	51		 push	 ecx
  05184	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05187	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0518b	50		 push	 eax
  0518c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0518f	51		 push	 ecx
  05190	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  05195	83 c4 10	 add	 esp, 16			; 00000010H

; 2491 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  05198	6a 00		 push	 0
  0519a	6a 00		 push	 0
  0519c	6a 00		 push	 0
  0519e	6a 00		 push	 0
  051a0	6a 00		 push	 0
  051a2	6a 01		 push	 1
  051a4	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  051a7	50		 push	 eax
  051a8	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  051ab	51		 push	 ecx
  051ac	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  051af	52		 push	 edx
  051b0	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  051b5	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_SkillS@11:

; 2492 : }

  051b8	5f		 pop	 edi
  051b9	5e		 pop	 esi
  051ba	5b		 pop	 ebx
  051bb	8b e5		 mov	 esp, ebp
  051bd	5d		 pop	 ebp
  051be	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison
; Function compile flags: /Odtp /ZI
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit
; _this$ = ecx

; 2495 : {

  051d0	55		 push	 ebp
  051d1	8b ec		 mov	 ebp, esp
  051d3	83 ec 48	 sub	 esp, 72			; 00000048H
  051d6	53		 push	 ebx
  051d7	56		 push	 esi
  051d8	57		 push	 edi
  051d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2496 : 	if( lpObj->Type != OBJ_USER )

  051dc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  051df	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  051e3	83 f9 01	 cmp	 ecx, 1
  051e6	74 02		 je	 SHORT $LN1@MLS_SkillM

; 2497 : 		return;

  051e8	eb 32		 jmp	 SHORT $LN2@MLS_SkillM
$LN1@MLS_SkillM:

; 2498 : 
; 2499 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  051ea	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  051ed	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  051f3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  051f9	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 2500 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  051fc	6a 00		 push	 0
  051fe	6a 00		 push	 0
  05200	6a 00		 push	 0
  05202	6a 00		 push	 0
  05204	6a 00		 push	 0
  05206	6a 01		 push	 1
  05208	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0520b	50		 push	 eax
  0520c	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0520f	51		 push	 ecx
  05210	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05213	52		 push	 edx
  05214	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  05219	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_SkillM:

; 2501 : }

  0521c	5f		 pop	 edi
  0521d	5e		 pop	 esi
  0521e	5b		 pop	 ebx
  0521f	8b e5		 mov	 esp, ebp
  05221	5d		 pop	 ebp
  05222	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit
; Function compile flags: /Odtp /ZI
_delay$235239 = -44					; size = 4
_CallMonIndex$235229 = -40				; size = 4
_EnableAttack$ = -36					; size = 4
_DuelIndex$ = -32					; size = 4
_bAttack$ = -28						; size = 4
_HitCount$ = -24					; size = 4
_FirstHit$ = -20					; size = 4
_count$ = -16						; size = 4
_tObjNum$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison
; _this$ = ecx

; 2504 : {

  05230	55		 push	 ebp
  05231	8b ec		 mov	 ebp, esp
  05233	83 ec 6c	 sub	 esp, 108		; 0000006cH
  05236	53		 push	 ebx
  05237	56		 push	 esi
  05238	57		 push	 edi
  05239	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2505 : 	LPOBJ lpObj = &gObj[aIndex];

  0523c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0523f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05245	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0524b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 2506 : 
; 2507 : 	if( lpObj->Type != OBJ_USER )

  0524e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05251	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  05255	83 f9 01	 cmp	 ecx, 1
  05258	74 05		 je	 SHORT $LN23@MLS_SkillS@12

; 2508 : 		return;

  0525a	e9 a5 02 00 00	 jmp	 $LN24@MLS_SkillS@12
$LN23@MLS_SkillS@12:

; 2509 : 
; 2510 : 	int tObjNum;
; 2511 : 	int count = 0;

  0525f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 2512 : 
; 2513 : 	int FirstHit = 0;

  05266	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _FirstHit$[ebp], 0

; 2514 : 	int HitCount = 0;

  0526d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 2515 : 	int bAttack;
; 2516 : 	int DuelIndex = lpObj->m_iDuelUser;

  05274	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05277	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0527d	89 4d e0	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN22@MLS_SkillS@12:

; 2517 : 	int EnableAttack;
; 2518 : 
; 2519 : 	while ( true )

  05280	b8 01 00 00 00	 mov	 eax, 1
  05285	85 c0		 test	 eax, eax
  05287	0f 84 77 02 00
	00		 je	 $LN24@MLS_SkillS@12

; 2520 : 	{
; 2521 : 		if(lpObj->VpPlayer2[count].state != 0)

  0528d	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  05290	6b c0 0c	 imul	 eax, 12			; 0000000cH
  05293	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05296	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0529e	85 d2		 test	 edx, edx
  052a0	0f 84 48 02 00
	00		 je	 $LN20@MLS_SkillS@12

; 2522 : 		{
; 2523 : 			tObjNum = lpObj->VpPlayer2[count].number;

  052a6	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  052a9	6b c0 0c	 imul	 eax, 12			; 0000000cH
  052ac	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  052af	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  052b7	89 55 f4	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 2524 : 
; 2525 : 			if(tObjNum >= 0)

  052ba	83 7d f4 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  052be	0f 8c 2a 02 00
	00		 jl	 $LN20@MLS_SkillS@12

; 2526 : 			{
; 2527 : 				EnableAttack = 0;

  052c4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 2528 : 
; 2529 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  052cb	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  052ce	6b c0 0c	 imul	 eax, 12			; 0000000cH
  052d1	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  052d4	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  052dc	83 fa 02	 cmp	 edx, 2
  052df	75 25		 jne	 SHORT $LN18@MLS_SkillS@12
  052e1	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  052e4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  052ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  052f0	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  052f8	7d 0c		 jge	 SHORT $LN18@MLS_SkillS@12

; 2530 : 				{
; 2531 : 					EnableAttack = 1;

  052fa	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  05301	e9 23 01 00 00	 jmp	 $LN17@MLS_SkillS@12
$LN18@MLS_SkillS@12:

; 2532 : 				}
; 2533 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  05306	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  05309	3b 45 18	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0530c	74 08		 je	 SHORT $LN15@MLS_SkillS@12
  0530e	8b 45 e0	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  05311	3b 45 f4	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  05314	75 0c		 jne	 SHORT $LN16@MLS_SkillS@12
$LN15@MLS_SkillS@12:

; 2534 : 				{
; 2535 : 					EnableAttack = 1;

  05316	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0531d	e9 07 01 00 00	 jmp	 $LN17@MLS_SkillS@12
$LN16@MLS_SkillS@12:

; 2536 : 				}
; 2537 : 
; 2538 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  05322	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  05325	6b c0 0c	 imul	 eax, 12			; 0000000cH
  05328	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0532b	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  05333	83 fa 03	 cmp	 edx, 3
  05336	74 5b		 je	 SHORT $LN13@MLS_SkillS@12
  05338	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0533b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05341	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05347	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0534f	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  05352	75 3f		 jne	 SHORT $LN13@MLS_SkillS@12
  05354	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  05359	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0535e	83 f8 07	 cmp	 eax, 7
  05361	75 30		 jne	 SHORT $LN13@MLS_SkillS@12

; 2539 : 				{
; 2540 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  05363	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05366	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0536d	8b 55 f4	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  05370	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  05376	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0537b	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  05383	3b ca		 cmp	 ecx, edx
  05385	74 07		 je	 SHORT $LN12@MLS_SkillS@12

; 2541 : 						EnableAttack = 1;

  05387	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN12@MLS_SkillS@12:

; 2542 : 				}
; 2543 : 
; 2544 : 				else

  0538e	e9 96 00 00 00	 jmp	 $LN17@MLS_SkillS@12
$LN13@MLS_SkillS@12:

; 2545 : 				{
; 2546 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  05393	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  05396	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0539c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  053a2	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  053a5	89 55 d8	 mov	 DWORD PTR _CallMonIndex$235229[ebp], edx

; 2547 : 
; 2548 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  053a8	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  053ab	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  053b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  053b7	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  053bc	83 fa 02	 cmp	 edx, 2
  053bf	75 40		 jne	 SHORT $LN10@MLS_SkillS@12
  053c1	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  053c4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  053ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  053d0	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  053d8	7c 27		 jl	 SHORT $LN10@MLS_SkillS@12

; 2549 : 					{
; 2550 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  053da	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  053dd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  053e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  053e9	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  053f0	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  053f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  053fb	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  053fe	89 4d d8	 mov	 DWORD PTR _CallMonIndex$235229[ebp], ecx
$LN10@MLS_SkillS@12:

; 2551 : 					}
; 2552 : 
; 2553 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  05401	8b 45 d8	 mov	 eax, DWORD PTR _CallMonIndex$235229[ebp]
  05404	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0540a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05410	50		 push	 eax
  05411	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05414	51		 push	 ecx
  05415	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0541a	83 c4 08	 add	 esp, 8
  0541d	83 f8 01	 cmp	 eax, 1
  05420	75 07		 jne	 SHORT $LN17@MLS_SkillS@12

; 2554 : 					{
; 2555 : 						EnableAttack = 1;

  05422	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN17@MLS_SkillS@12:

; 2556 : 					}
; 2557 : 				}
; 2558 : 
; 2559 : 				if(EnableAttack != 0)

  05429	83 7d dc 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0542d	0f 84 bb 00 00
	00		 je	 $LN20@MLS_SkillS@12

; 2560 : 				{
; 2561 : 					if(this->MLS_CalDistance(x,y,gObj[tObjNum].X,gObj[tObjNum].Y) < 4)

  05433	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  05436	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0543c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05442	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0544a	52		 push	 edx
  0544b	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0544e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05454	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0545a	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  05462	52		 push	 edx
  05463	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  05467	50		 push	 eax
  05468	0f b6 4d 10	 movzx	 ecx, BYTE PTR _x$[ebp]
  0546c	51		 push	 ecx
  0546d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05470	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  05475	83 f8 04	 cmp	 eax, 4
  05478	7d 74		 jge	 SHORT $LN20@MLS_SkillS@12

; 2562 : 					{
; 2563 : 						bAttack = 0;

  0547a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 2564 : 
; 2565 : 						if(HitCount > 10)

  05481	83 7d e8 0a	 cmp	 DWORD PTR _HitCount$[ebp], 10 ; 0000000aH
  05485	7e 07		 jle	 SHORT $LN6@MLS_SkillS@12

; 2566 : 						{
; 2567 : 							bAttack = 0;

  05487	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN6@MLS_SkillS@12:

; 2568 : 						}
; 2569 : 						
; 2570 : 						if(HitCount >= 5)

  0548e	83 7d e8 05	 cmp	 DWORD PTR _HitCount$[ebp], 5
  05492	7c 1e		 jl	 SHORT $LN5@MLS_SkillS@12

; 2571 : 						{
; 2572 : 							if(rand()%2)

  05494	e8 00 00 00 00	 call	 _rand
  05499	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0549e	79 05		 jns	 SHORT $LN26@MLS_SkillS@12
  054a0	48		 dec	 eax
  054a1	83 c8 fe	 or	 eax, -2			; fffffffeH
  054a4	40		 inc	 eax
$LN26@MLS_SkillS@12:
  054a5	85 c0		 test	 eax, eax
  054a7	74 07		 je	 SHORT $LN4@MLS_SkillS@12

; 2573 : 							{
; 2574 : 								bAttack = 1;

  054a9	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN4@MLS_SkillS@12:

; 2575 : 							}
; 2576 : 						}
; 2577 : 						else

  054b0	eb 07		 jmp	 SHORT $LN3@MLS_SkillS@12
$LN5@MLS_SkillS@12:

; 2578 : 						{
; 2579 : 							bAttack = 1;

  054b2	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN3@MLS_SkillS@12:

; 2580 : 						}
; 2581 : 
; 2582 : 						if(bAttack != 0)

  054b9	83 7d e4 00	 cmp	 DWORD PTR _bAttack$[ebp], 0
  054bd	74 2f		 je	 SHORT $LN20@MLS_SkillS@12

; 2583 : 						{
; 2584 : 							int delay = rand()%500;

  054bf	e8 00 00 00 00	 call	 _rand
  054c4	99		 cdq
  054c5	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  054ca	f7 f9		 idiv	 ecx
  054cc	89 55 d4	 mov	 DWORD PTR _delay$235239[ebp], edx

; 2585 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,delay,lpMagic->m_Skill,0);

  054cf	6a 00		 push	 0
  054d1	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  054d4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  054d7	51		 push	 ecx
  054d8	8b 55 d4	 mov	 edx, DWORD PTR _delay$235239[ebp]
  054db	52		 push	 edx
  054dc	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  054df	50		 push	 eax
  054e0	6a 32		 push	 50			; 00000032H
  054e2	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  054e5	51		 push	 ecx
  054e6	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  054eb	83 c4 18	 add	 esp, 24			; 00000018H
$LN20@MLS_SkillS@12:

; 2586 : 						}
; 2587 : 					}
; 2588 : 				}
; 2589 : 			}
; 2590 : 		}
; 2591 : 
; 2592 : 		count++;

  054ee	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  054f1	83 c0 01	 add	 eax, 1
  054f4	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 2593 : 		if(count > MAX_VIEWPORT -1)

  054f7	83 7d f0 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  054fb	7e 02		 jle	 SHORT $LN1@MLS_SkillS@12

; 2594 : 		{
; 2595 : 			break;

  054fd	eb 05		 jmp	 SHORT $LN24@MLS_SkillS@12
$LN1@MLS_SkillS@12:

; 2596 : 		}
; 2597 : 	}

  054ff	e9 7c fd ff ff	 jmp	 $LN22@MLS_SkillS@12
$LN24@MLS_SkillS@12:

; 2598 : 	return;
; 2599 : }

  05504	5f		 pop	 edi
  05505	5e		 pop	 esi
  05506	5b		 pop	 ebx
  05507	8b e5		 mov	 esp, ebp
  05509	5d		 pop	 ebp
  0550a	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison
; Function compile flags: /Odtp /ZI
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce
; _this$ = ecx

; 2602 : {

  05510	55		 push	 ebp
  05511	8b ec		 mov	 ebp, esp
  05513	83 ec 48	 sub	 esp, 72			; 00000048H
  05516	53		 push	 ebx
  05517	56		 push	 esi
  05518	57		 push	 edi
  05519	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2603 : 	if( lpObj->Type != OBJ_USER )

  0551c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0551f	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  05523	83 f9 01	 cmp	 ecx, 1
  05526	74 02		 je	 SHORT $LN1@MLS_SkillS@13

; 2604 : 		return;

  05528	eb 4e		 jmp	 SHORT $LN2@MLS_SkillS@13
$LN1@MLS_SkillS@13:

; 2605 : 
; 2606 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0552a	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0552d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05533	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05539	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 2607 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0553c	6a 01		 push	 1
  0553e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05541	8b 08		 mov	 ecx, DWORD PTR [eax]
  05543	51		 push	 ecx
  05544	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05547	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0554b	50		 push	 eax
  0554c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0554f	51		 push	 ecx
  05550	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  05555	83 c4 10	 add	 esp, 16			; 00000010H

; 2608 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  05558	6a 00		 push	 0
  0555a	6a 00		 push	 0
  0555c	6a 00		 push	 0
  0555e	6a 00		 push	 0
  05560	6a 00		 push	 0
  05562	6a 01		 push	 1
  05564	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05567	50		 push	 eax
  05568	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0556b	51		 push	 ecx
  0556c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0556f	52		 push	 edx
  05570	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  05575	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_SkillS@13:

; 2609 : }

  05578	5f		 pop	 edi
  05579	5e		 pop	 esi
  0557a	5b		 pop	 ebx
  0557b	8b e5		 mov	 esp, ebp
  0557d	5d		 pop	 ebp
  0557e	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce
_TEXT	ENDS
PUBLIC	__real@00000000
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv345 = -108						; size = 4
tv324 = -108						; size = 8
tv316 = -108						; size = 8
tv299 = -108						; size = 8
tv291 = -108						; size = 8
tv336 = -104						; size = 4
tv314 = -104						; size = 4
tv282 = -104						; size = 4
_iManaRate$ = -36					; size = 4
_fSkillValue$235266 = -32				; size = 4
_iPreLevel$235264 = -28					; size = 4
_iPreSkill$ = -24					; size = 4
_iSkillValidTime$ = -20					; size = 4
_iDefenseValue$ = -16					; size = 4
_skillSuccess$ = -12					; size = 4
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense
; _this$ = ecx

; 2612 : {

  05590	55		 push	 ebp
  05591	8b ec		 mov	 ebp, esp
  05593	83 ec 6c	 sub	 esp, 108		; 0000006cH
  05596	53		 push	 ebx
  05597	56		 push	 esi
  05598	57		 push	 edi
  05599	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2613 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0559c	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0559f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  055a5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  055ab	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 2614 : 	int skillSuccess = TRUE;

  055ae	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 2615 : 	// ----
; 2616 : 	if( lpTargetObj->Type != OBJ_USER &&
; 2617 : 		lpTargetObj->m_RecallMon == -1 )

  055b5	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  055b8	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  055bc	83 f9 01	 cmp	 ecx, 1
  055bf	74 11		 je	 SHORT $LN9@MLS_SkillW
  055c1	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  055c4	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  055cb	75 05		 jne	 SHORT $LN9@MLS_SkillW

; 2618 : 		return;

  055cd	e9 ee 02 00 00	 jmp	 $LN10@MLS_SkillW
$LN9@MLS_SkillW:

; 2619 : 	// ----
; 2620 : 	if( lpObj->Class != CLASS_WIZARD &&
; 2621 : 		lpObj->Class != CLASS_MAGUMSA )

  055d2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  055d5	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  055dc	85 c9		 test	 ecx, ecx
  055de	74 14		 je	 SHORT $LN8@MLS_SkillW
  055e0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  055e3	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  055ea	83 f9 03	 cmp	 ecx, 3
  055ed	74 05		 je	 SHORT $LN8@MLS_SkillW

; 2622 : 		return;

  055ef	e9 cc 02 00 00	 jmp	 $LN10@MLS_SkillW
$LN8@MLS_SkillW:

; 2623 : 	// ----
; 2624 : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  055f4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  055f7	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  055fa	8b 90 2c 04 00
	00		 mov	 edx, DWORD PTR [eax+1068]
  05600	3b 91 2c 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1068]
  05606	74 05		 je	 SHORT $LN7@MLS_SkillW

; 2625 : 		return;

  05608	e9 b3 02 00 00	 jmp	 $LN10@MLS_SkillW
$LN7@MLS_SkillW:

; 2626 : 	// ----
; 2627 : 	float iDefenseValue = 0;

  0560d	d9 ee		 fldz
  0560f	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]

; 2628 : 	int iSkillValidTime = 0;

  05612	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iSkillValidTime$[ebp], 0

; 2629 : 	// ----
; 2630 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  05619	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0561c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0561f	51		 push	 ecx
  05620	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05623	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  0562a	50		 push	 eax
  0562b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0562e	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
  05633	89 45 e8	 mov	 DWORD PTR _iPreSkill$[ebp], eax

; 2631 : 	// ----
; 2632 : 	if( iPreSkill > 0 )

  05636	83 7d e8 00	 cmp	 DWORD PTR _iPreSkill$[ebp], 0
  0563a	0f 8e e0 00 00
	00		 jle	 $LN6@MLS_SkillW

; 2633 : 	{
; 2634 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  05640	8b 45 e8	 mov	 eax, DWORD PTR _iPreSkill$[ebp]
  05643	50		 push	 eax
  05644	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05647	51		 push	 ecx
  05648	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0564b	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
  05650	89 45 e4	 mov	 DWORD PTR _iPreLevel$235264[ebp], eax

; 2635 : 
; 2636 : 		if( iPreLevel > 0 )

  05653	83 7d e4 00	 cmp	 DWORD PTR _iPreLevel$235264[ebp], 0
  05657	0f 8e be 00 00
	00		 jle	 $LN4@MLS_SkillW

; 2637 : 		{
; 2638 : 			iDefenseValue		= g_SkillAdditionInfo.m_SoulBarrierDefenseStart + ((lpObj->Dexterity + lpObj->AddDexterity) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv1) + ((lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv2);

  0565d	0f b7 0d 54 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3156
  05664	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05667	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  0566e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05671	0f bf 92 22 01
	00 00		 movsx	 edx, WORD PTR [edx+290]
  05678	03 c2		 add	 eax, edx
  0567a	0f b7 35 56 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3158
  05681	99		 cdq
  05682	f7 fe		 idiv	 esi
  05684	03 c8		 add	 ecx, eax
  05686	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05689	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  05690	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05693	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  0569a	03 c2		 add	 eax, edx
  0569c	0f b7 35 58 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3160
  056a3	99		 cdq
  056a4	f7 fe		 idiv	 esi
  056a6	03 c8		 add	 ecx, eax
  056a8	89 4d 98	 mov	 DWORD PTR tv282[ebp], ecx
  056ab	db 45 98	 fild	 DWORD PTR tv282[ebp]
  056ae	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]

; 2639 : 			float fSkillValue	= this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill), lpMagic->m_Level);

  056b1	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  056b4	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  056b8	51		 push	 ecx
  056b9	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  056bc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  056bf	50		 push	 eax
  056c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  056c5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  056ca	50		 push	 eax
  056cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  056ce	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  056d3	d9 5d e0	 fstp	 DWORD PTR _fSkillValue$235266[ebp]

; 2640 : 			iDefenseValue		+= fSkillValue;

  056d6	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  056d9	d8 45 e0	 fadd	 DWORD PTR _fSkillValue$235266[ebp]
  056dc	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]

; 2641 : 			// ----
; 2642 : 			if( g_SkillAdditionInfo.m_SoulBarrierDefenseMax > 0 && iDefenseValue > g_SkillAdditionInfo.m_SoulBarrierDefenseMax )

  056df	83 3d 5c 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164, 0
  056e6	76 33		 jbe	 SHORT $LN4@MLS_SkillW
  056e8	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  056ed	89 45 94	 mov	 DWORD PTR tv291[ebp], eax
  056f0	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv291[ebp+4], 0
  056f7	df 6d 94	 fild	 QWORD PTR tv291[ebp]
  056fa	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  056fd	de d9		 fcompp
  056ff	df e0		 fnstsw	 ax
  05701	f6 c4 41	 test	 ah, 65			; 00000041H
  05704	75 15		 jne	 SHORT $LN4@MLS_SkillW

; 2643 : 			{
; 2644 : 				iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseMax;

  05706	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  0570b	89 45 94	 mov	 DWORD PTR tv299[ebp], eax
  0570e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv299[ebp+4], 0
  05715	df 6d 94	 fild	 QWORD PTR tv299[ebp]
  05718	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]
$LN4@MLS_SkillW:

; 2645 : 			}
; 2646 : 		}
; 2647 : 	}
; 2648 : 	else

  0571b	e9 90 00 00 00	 jmp	 $LN2@MLS_SkillW
$LN6@MLS_SkillW:

; 2649 : 	{
; 2650 : 		iDefenseValue		= g_SkillAdditionInfo.m_SoulBarrierDefenseStart + ((lpObj->Dexterity + lpObj->AddDexterity) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv1) + ((lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv2);

  05720	0f b7 0d 54 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3156
  05727	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0572a	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  05731	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05734	0f bf 92 22 01
	00 00		 movsx	 edx, WORD PTR [edx+290]
  0573b	03 c2		 add	 eax, edx
  0573d	0f b7 35 56 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3158
  05744	99		 cdq
  05745	f7 fe		 idiv	 esi
  05747	03 c8		 add	 ecx, eax
  05749	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0574c	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  05753	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05756	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  0575d	03 c2		 add	 eax, edx
  0575f	0f b7 35 58 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3160
  05766	99		 cdq
  05767	f7 fe		 idiv	 esi
  05769	03 c8		 add	 ecx, eax
  0576b	89 4d 98	 mov	 DWORD PTR tv314[ebp], ecx
  0576e	db 45 98	 fild	 DWORD PTR tv314[ebp]
  05771	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]

; 2651 : 		// ----
; 2652 : 		if( g_SkillAdditionInfo.m_SoulBarrierDefenseMax > 0 && iDefenseValue > g_SkillAdditionInfo.m_SoulBarrierDefenseMax )

  05774	83 3d 5c 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164, 0
  0577b	76 33		 jbe	 SHORT $LN2@MLS_SkillW
  0577d	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  05782	89 45 94	 mov	 DWORD PTR tv316[ebp], eax
  05785	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv316[ebp+4], 0
  0578c	df 6d 94	 fild	 QWORD PTR tv316[ebp]
  0578f	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  05792	de d9		 fcompp
  05794	df e0		 fnstsw	 ax
  05796	f6 c4 41	 test	 ah, 65			; 00000041H
  05799	75 15		 jne	 SHORT $LN2@MLS_SkillW

; 2653 : 		{
; 2654 : 			iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseMax;

  0579b	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  057a0	89 45 94	 mov	 DWORD PTR tv324[ebp], eax
  057a3	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv324[ebp+4], 0
  057aa	df 6d 94	 fild	 QWORD PTR tv324[ebp]
  057ad	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]
$LN2@MLS_SkillW:

; 2655 : 		}
; 2656 : 	}
; 2657 : 	// ----
; 2658 : 	int iManaRate = g_SkillAdditionInfo.GetSoulBarrierManaRateLevel(lpMagic->m_Level);

  057b0	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  057b3	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  057b7	51		 push	 ecx
  057b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  057bd	e8 00 00 00 00	 call	 ?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel
  057c2	0f bf d0	 movsx	 edx, ax
  057c5	89 55 dc	 mov	 DWORD PTR _iManaRate$[ebp], edx

; 2659 : 	// ----
; 2660 : 	iSkillValidTime = (this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill), lpMagic->m_Level)) + g_SkillAdditionInfo.m_SoulBarrierTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierTimeDiv;

  057c8	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  057cb	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  057cf	51		 push	 ecx
  057d0	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  057d3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  057d6	50		 push	 eax
  057d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  057dc	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  057e1	50		 push	 eax
  057e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  057e5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  057ea	0f b7 0d 60 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3168
  057f1	89 4d 98	 mov	 DWORD PTR tv336[ebp], ecx
  057f4	da 45 98	 fiadd	 DWORD PTR tv336[ebp]
  057f7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  057fa	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  05801	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05804	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  0580b	03 c2		 add	 eax, edx
  0580d	0f b7 0d 62 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3170
  05814	99		 cdq
  05815	f7 f9		 idiv	 ecx
  05817	89 45 94	 mov	 DWORD PTR tv345[ebp], eax
  0581a	da 45 94	 fiadd	 DWORD PTR tv345[ebp]
  0581d	e8 00 00 00 00	 call	 __ftol2_sse
  05822	89 45 ec	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax

; 2661 : 	// ----
; 2662 : 	if( g_SkillAdditionInfo.m_SoulBarrierTimeMax > 0 && iSkillValidTime > g_SkillAdditionInfo.m_SoulBarrierTimeMax )

  05825	83 3d 64 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172, 0
  0582c	76 13		 jbe	 SHORT $LN1@MLS_SkillW
  0582e	8b 45 ec	 mov	 eax, DWORD PTR _iSkillValidTime$[ebp]
  05831	3b 05 64 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172
  05837	76 08		 jbe	 SHORT $LN1@MLS_SkillW

; 2663 : 	{
; 2664 : 		iSkillValidTime = g_SkillAdditionInfo.m_SoulBarrierTimeMax;

  05839	a1 64 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172
  0583e	89 45 ec	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax
$LN1@MLS_SkillW:

; 2665 : 	}
; 2666 : 	// ----
; 2667 : 	iSkillValidTime += this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  05841	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05844	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  05848	51		 push	 ecx
  05849	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0584c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0584f	50		 push	 eax
  05850	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  05855	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0585a	50		 push	 eax
  0585b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0585e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  05863	da 45 ec	 fiadd	 DWORD PTR _iSkillValidTime$[ebp]
  05866	e8 00 00 00 00	 call	 __ftol2_sse
  0586b	89 45 ec	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax

; 2668 : 	// ----
; 2669 : 	gObjApplyBuffEffectDuration(lpTargetObj, 4, 21, (int)iDefenseValue, 28, g_SkillAdditionInfo.GetSoulBarrierManaRateLevel(lpMagic->m_Level), iSkillValidTime);

  0586e	8b 45 ec	 mov	 eax, DWORD PTR _iSkillValidTime$[ebp]
  05871	50		 push	 eax
  05872	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  05875	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  05879	52		 push	 edx
  0587a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  0587f	e8 00 00 00 00	 call	 ?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel
  05884	98		 cwde
  05885	50		 push	 eax
  05886	6a 1c		 push	 28			; 0000001cH
  05888	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  0588b	e8 00 00 00 00	 call	 __ftol2_sse
  05890	50		 push	 eax
  05891	6a 15		 push	 21			; 00000015H
  05893	6a 04		 push	 4
  05895	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  05898	51		 push	 ecx
  05899	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0589e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2670 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  058a1	0f b6 45 f4	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  058a5	50		 push	 eax
  058a6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  058a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  058ab	52		 push	 edx
  058ac	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  058af	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  058b3	51		 push	 ecx
  058b4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  058b7	52		 push	 edx
  058b8	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  058bd	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@MLS_SkillW:

; 2671 : }

  058c0	5f		 pop	 edi
  058c1	5e		 pop	 esi
  058c2	5b		 pop	 ebx
  058c3	8b e5		 mov	 esp, ebp
  058c5	5d		 pop	 ebp
  058c6	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense
; Function compile flags: /Odtp /ZI
tv288 = -108						; size = 4
tv267 = -108						; size = 8
tv259 = -108						; size = 8
tv279 = -104						; size = 4
tv248 = -104						; size = 4
_fSkillValue$ = -36					; size = 4
_fSkillValue1$ = -32					; size = 4
_iManaRate$ = -28					; size = 4
_fSkillValue2$ = -24					; size = 4
_iSkillValidTime$ = -20					; size = 4
_iDefenseValue$ = -16					; size = 4
_skillSuccess$ = -12					; size = 4
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery
; _this$ = ecx

; 2674 : {

  058d0	55		 push	 ebp
  058d1	8b ec		 mov	 ebp, esp
  058d3	83 ec 6c	 sub	 esp, 108		; 0000006cH
  058d6	53		 push	 ebx
  058d7	56		 push	 esi
  058d8	57		 push	 edi
  058d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2675 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  058dc	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  058df	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  058e5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  058eb	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 2676 : 	int skillSuccess = TRUE;

  058ee	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 2677 : 
; 2678 : 	if( lpTargetObj->Type != OBJ_USER &&
; 2679 : 		lpTargetObj->m_RecallMon == -1 )

  058f5	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  058f8	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  058fc	83 f9 01	 cmp	 ecx, 1
  058ff	74 11		 je	 SHORT $LN8@MLS_SkillW@2
  05901	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  05904	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  0590b	75 05		 jne	 SHORT $LN8@MLS_SkillW@2

; 2680 : 		return;

  0590d	e9 6d 02 00 00	 jmp	 $LN9@MLS_SkillW@2
$LN8@MLS_SkillW@2:

; 2681 : 
; 2682 : 	if( lpObj->Class != CLASS_WIZARD &&
; 2683 : 		lpObj->Class != CLASS_MAGUMSA )

  05912	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05915	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0591c	85 c9		 test	 ecx, ecx
  0591e	74 14		 je	 SHORT $LN7@MLS_SkillW@2
  05920	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05923	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0592a	83 f9 03	 cmp	 ecx, 3
  0592d	74 05		 je	 SHORT $LN7@MLS_SkillW@2

; 2684 : 		return;

  0592f	e9 4b 02 00 00	 jmp	 $LN9@MLS_SkillW@2
$LN7@MLS_SkillW@2:

; 2685 : 
; 2686 : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  05934	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05937	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0593a	8b 90 2c 04 00
	00		 mov	 edx, DWORD PTR [eax+1068]
  05940	3b 91 2c 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1068]
  05946	74 05		 je	 SHORT $LN6@MLS_SkillW@2

; 2687 : 		return;

  05948	e9 32 02 00 00	 jmp	 $LN9@MLS_SkillW@2
$LN6@MLS_SkillW@2:

; 2688 : 	// ----
; 2689 : 	float iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseStart + ((lpObj->Dexterity + lpObj->AddDexterity) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv1) + ((lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv2);

  0594d	0f b7 0d 54 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3156
  05954	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05957	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  0595e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05961	0f bf 92 22 01
	00 00		 movsx	 edx, WORD PTR [edx+290]
  05968	03 c2		 add	 eax, edx
  0596a	0f b7 35 56 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3158
  05971	99		 cdq
  05972	f7 fe		 idiv	 esi
  05974	03 c8		 add	 ecx, eax
  05976	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05979	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  05980	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05983	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  0598a	03 c2		 add	 eax, edx
  0598c	0f b7 35 58 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3160
  05993	99		 cdq
  05994	f7 fe		 idiv	 esi
  05996	03 c8		 add	 ecx, eax
  05998	89 4d 98	 mov	 DWORD PTR tv248[ebp], ecx
  0599b	db 45 98	 fild	 DWORD PTR tv248[ebp]
  0599e	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]

; 2690 : 	int iSkillValidTime = 0;

  059a1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iSkillValidTime$[ebp], 0

; 2691 : 	float fSkillValue2	= this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  059a8	6a 02		 push	 2
  059aa	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  059ad	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  059b0	51		 push	 ecx
  059b1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  059b4	52		 push	 edx
  059b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  059b8	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  059bd	d9 5d e8	 fstp	 DWORD PTR _fSkillValue2$[ebp]

; 2692 : 	// ----
; 2693 : 	if( fSkillValue2 > 0.0f )

  059c0	d9 45 e8	 fld	 DWORD PTR _fSkillValue2$[ebp]
  059c3	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  059c9	df e0		 fnstsw	 ax
  059cb	f6 c4 41	 test	 ah, 65			; 00000041H
  059ce	75 09		 jne	 SHORT $LN5@MLS_SkillW@2

; 2694 : 	{
; 2695 : 		iDefenseValue += fSkillValue2;

  059d0	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  059d3	d8 45 e8	 fadd	 DWORD PTR _fSkillValue2$[ebp]
  059d6	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]
$LN5@MLS_SkillW@2:

; 2696 : 	}
; 2697 : 	// ----
; 2698 : 	if( g_SkillAdditionInfo.m_SoulBarrierDefenseMax > 0 && iDefenseValue > g_SkillAdditionInfo.m_SoulBarrierDefenseMax )

  059d9	83 3d 5c 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164, 0
  059e0	76 33		 jbe	 SHORT $LN4@MLS_SkillW@2
  059e2	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  059e7	89 45 94	 mov	 DWORD PTR tv259[ebp], eax
  059ea	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv259[ebp+4], 0
  059f1	df 6d 94	 fild	 QWORD PTR tv259[ebp]
  059f4	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  059f7	de d9		 fcompp
  059f9	df e0		 fnstsw	 ax
  059fb	f6 c4 41	 test	 ah, 65			; 00000041H
  059fe	75 15		 jne	 SHORT $LN4@MLS_SkillW@2

; 2699 : 	{
; 2700 : 		iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseMax;

  05a00	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  05a05	89 45 94	 mov	 DWORD PTR tv267[ebp], eax
  05a08	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv267[ebp+4], 0
  05a0f	df 6d 94	 fild	 QWORD PTR tv267[ebp]
  05a12	d9 5d f0	 fstp	 DWORD PTR _iDefenseValue$[ebp]
$LN4@MLS_SkillW@2:

; 2701 : 	}
; 2702 : 	// ----
; 2703 : 	int iManaRate = g_SkillAdditionInfo.GetSoulBarrierManaRateLevel(lpMagic->m_Level);

  05a15	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05a18	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  05a1c	51		 push	 ecx
  05a1d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  05a22	e8 00 00 00 00	 call	 ?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel
  05a27	0f bf d0	 movsx	 edx, ax
  05a2a	89 55 e4	 mov	 DWORD PTR _iManaRate$[ebp], edx

; 2704 : 	iSkillValidTime = (this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill), lpMagic->m_Level)) + g_SkillAdditionInfo.m_SoulBarrierTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierTimeDiv;

  05a2d	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05a30	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  05a34	51		 push	 ecx
  05a35	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05a38	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  05a3b	50		 push	 eax
  05a3c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  05a41	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  05a46	50		 push	 eax
  05a47	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05a4a	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  05a4f	0f b7 0d 60 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3168
  05a56	89 4d 98	 mov	 DWORD PTR tv279[ebp], ecx
  05a59	da 45 98	 fiadd	 DWORD PTR tv279[ebp]
  05a5c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05a5f	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  05a66	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05a69	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  05a70	03 c2		 add	 eax, edx
  05a72	0f b7 0d 62 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3170
  05a79	99		 cdq
  05a7a	f7 f9		 idiv	 ecx
  05a7c	89 45 94	 mov	 DWORD PTR tv288[ebp], eax
  05a7f	da 45 94	 fiadd	 DWORD PTR tv288[ebp]
  05a82	e8 00 00 00 00	 call	 __ftol2_sse
  05a87	89 45 ec	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax

; 2705 : 
; 2706 : 	float fSkillValue1 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  05a8a	6a 01		 push	 1
  05a8c	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05a8f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  05a92	51		 push	 ecx
  05a93	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05a96	52		 push	 edx
  05a97	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05a9a	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  05a9f	d9 5d e0	 fstp	 DWORD PTR _fSkillValue1$[ebp]

; 2707 : 
; 2708 : 	if( fSkillValue1 > 0.0f )

  05aa2	d9 45 e0	 fld	 DWORD PTR _fSkillValue1$[ebp]
  05aa5	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  05aab	df e0		 fnstsw	 ax
  05aad	f6 c4 41	 test	 ah, 65			; 00000041H
  05ab0	75 0e		 jne	 SHORT $LN3@MLS_SkillW@2

; 2709 : 	{
; 2710 : 		iSkillValidTime += fSkillValue1;

  05ab2	db 45 ec	 fild	 DWORD PTR _iSkillValidTime$[ebp]
  05ab5	d8 45 e0	 fadd	 DWORD PTR _fSkillValue1$[ebp]
  05ab8	e8 00 00 00 00	 call	 __ftol2_sse
  05abd	89 45 ec	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax
$LN3@MLS_SkillW@2:

; 2711 : 	}
; 2712 : 
; 2713 : 	if( g_SkillAdditionInfo.m_SoulBarrierTimeMax > 0 && iSkillValidTime > g_SkillAdditionInfo.m_SoulBarrierTimeMax )

  05ac0	83 3d 64 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172, 0
  05ac7	76 13		 jbe	 SHORT $LN2@MLS_SkillW@2
  05ac9	8b 45 ec	 mov	 eax, DWORD PTR _iSkillValidTime$[ebp]
  05acc	3b 05 64 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172
  05ad2	76 08		 jbe	 SHORT $LN2@MLS_SkillW@2

; 2714 : 	{
; 2715 : 		iSkillValidTime = g_SkillAdditionInfo.m_SoulBarrierTimeMax;

  05ad4	a1 64 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172
  05ad9	89 45 ec	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax
$LN2@MLS_SkillW@2:

; 2716 : 	}
; 2717 : 
; 2718 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  05adc	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05adf	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  05ae3	51		 push	 ecx
  05ae4	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05ae7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  05aea	50		 push	 eax
  05aeb	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  05af0	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  05af5	50		 push	 eax
  05af6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05af9	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  05afe	d9 5d dc	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 2719 : 
; 2720 : 	if( fSkillValue > 0.0f )

  05b01	d9 45 dc	 fld	 DWORD PTR _fSkillValue$[ebp]
  05b04	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  05b0a	df e0		 fnstsw	 ax
  05b0c	f6 c4 41	 test	 ah, 65			; 00000041H
  05b0f	75 1b		 jne	 SHORT $LN1@MLS_SkillW@2

; 2721 : 	{
; 2722 : 		lpTargetObj->m_MPSkillOpt.MpsManaShieldAddMana = lpTargetObj->MaxMana*fSkillValue/100.0f;

  05b11	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  05b14	d9 80 14 01 00
	00		 fld	 DWORD PTR [eax+276]
  05b1a	d8 4d dc	 fmul	 DWORD PTR _fSkillValue$[ebp]
  05b1d	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  05b23	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  05b26	d9 99 78 27 00
	00		 fstp	 DWORD PTR [ecx+10104]
$LN1@MLS_SkillW@2:

; 2723 : 	}
; 2724 : 
; 2725 : 	gObjApplyBuffEffectDuration(lpTargetObj,140,21,(int)iDefenseValue,28,iManaRate,iSkillValidTime);

  05b2c	8b 45 ec	 mov	 eax, DWORD PTR _iSkillValidTime$[ebp]
  05b2f	50		 push	 eax
  05b30	8b 4d e4	 mov	 ecx, DWORD PTR _iManaRate$[ebp]
  05b33	51		 push	 ecx
  05b34	6a 1c		 push	 28			; 0000001cH
  05b36	d9 45 f0	 fld	 DWORD PTR _iDefenseValue$[ebp]
  05b39	e8 00 00 00 00	 call	 __ftol2_sse
  05b3e	50		 push	 eax
  05b3f	6a 15		 push	 21			; 00000015H
  05b41	68 8c 00 00 00	 push	 140			; 0000008cH
  05b46	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  05b49	52		 push	 edx
  05b4a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  05b4f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2726 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  05b52	0f b6 45 f4	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  05b56	50		 push	 eax
  05b57	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05b5a	8b 11		 mov	 edx, DWORD PTR [ecx]
  05b5c	52		 push	 edx
  05b5d	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05b60	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  05b64	51		 push	 ecx
  05b65	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05b68	52		 push	 edx
  05b69	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  05b6e	83 c4 10	 add	 esp, 16			; 00000010H

; 2727 : 	gObjCalCharacter(lpTargetObj->m_Index);

  05b71	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  05b74	8b 08		 mov	 ecx, DWORD PTR [eax]
  05b76	51		 push	 ecx
  05b77	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  05b7c	83 c4 04	 add	 esp, 4
$LN9@MLS_SkillW@2:

; 2728 : }

  05b7f	5f		 pop	 edi
  05b80	5e		 pop	 esi
  05b81	5b		 pop	 ebx
  05b82	8b e5		 mov	 esp, ebp
  05b84	5d		 pop	 ebp
  05b85	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery
_TEXT	ENDS
PUBLIC	??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@ ; `string'
PUBLIC	?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ ; CSkillAdditionInfo::GetInfinityArrowSkillTime
;	COMDAT ??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@
CONST	SEGMENT
??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@ DB '['
	DB	'%s][%s] Use Infinity Arrow Skill (Time:%d)(Character Level : '
	DB	'%d)(ChangeUp: %d)', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow
; _this$ = ecx

; 2731 : {

  05b90	55		 push	 ebp
  05b91	8b ec		 mov	 ebp, esp
  05b93	83 ec 48	 sub	 esp, 72			; 00000048H
  05b96	53		 push	 ebx
  05b97	56		 push	 esi
  05b98	57		 push	 edi
  05b99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2732 : 	LPOBJ lpObj = &gObj[aIndex];

  05b9c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05b9f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05ba5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05bab	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 2733 : 
; 2734 : 	if( lpObj->Type != OBJ_USER )

  05bae	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05bb1	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  05bb5	83 f9 01	 cmp	 ecx, 1
  05bb8	74 07		 je	 SHORT $LN5@MLS_SkillI

; 2735 : 		return false;

  05bba	33 c0		 xor	 eax, eax
  05bbc	e9 0b 01 00 00	 jmp	 $LN6@MLS_SkillI
$LN5@MLS_SkillI:

; 2736 : 
; 2737 : 	if( lpObj->Class != CLASS_ELF )

  05bc1	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05bc4	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  05bcb	83 f9 02	 cmp	 ecx, 2
  05bce	74 07		 je	 SHORT $LN4@MLS_SkillI

; 2738 : 		return false;

  05bd0	33 c0		 xor	 eax, eax
  05bd2	e9 f5 00 00 00	 jmp	 $LN6@MLS_SkillI
$LN4@MLS_SkillI:

; 2739 : 
; 2740 : 	if( lpObj->ChangeUP == FALSE )

  05bd7	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05bda	0f b6 88 bb 00
	00 00		 movzx	 ecx, BYTE PTR [eax+187]
  05be1	85 c9		 test	 ecx, ecx
  05be3	75 07		 jne	 SHORT $LN3@MLS_SkillI

; 2741 : 		return false;

  05be5	33 c0		 xor	 eax, eax
  05be7	e9 e0 00 00 00	 jmp	 $LN6@MLS_SkillI
$LN3@MLS_SkillI:

; 2742 : 
; 2743 : 	if( lpObj->m_Index != aTargetIndex )

  05bec	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05bef	8b 08		 mov	 ecx, DWORD PTR [eax]
  05bf1	3b 4d 0c	 cmp	 ecx, DWORD PTR _aTargetIndex$[ebp]
  05bf4	74 07		 je	 SHORT $LN2@MLS_SkillI

; 2744 : 		return false;

  05bf6	33 c0		 xor	 eax, eax
  05bf8	e9 cf 00 00 00	 jmp	 $LN6@MLS_SkillI
$LN2@MLS_SkillI:

; 2745 : 
; 2746 : 	if( gObjSearchActiveEffect(lpObj,143) == TRUE )

  05bfd	68 8f 00 00 00	 push	 143			; 0000008fH
  05c02	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05c05	50		 push	 eax
  05c06	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  05c0b	83 c4 08	 add	 esp, 8
  05c0e	0f b6 c8	 movzx	 ecx, al
  05c11	83 f9 01	 cmp	 ecx, 1
  05c14	75 07		 jne	 SHORT $LN1@MLS_SkillI

; 2747 : 		return false;

  05c16	33 c0		 xor	 eax, eax
  05c18	e9 af 00 00 00	 jmp	 $LN6@MLS_SkillI
$LN1@MLS_SkillI:

; 2748 : 
; 2749 : 	lpObj->m_InfinityArrowDmgMul = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  05c1d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05c20	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  05c24	51		 push	 ecx
  05c25	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05c28	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  05c2b	50		 push	 eax
  05c2c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  05c31	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  05c36	50		 push	 eax
  05c37	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05c3a	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  05c3f	e8 00 00 00 00	 call	 __ftol2_sse
  05c44	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05c47	89 81 9c 27 00
	00		 mov	 DWORD PTR [ecx+10140], eax

; 2750 : 	gObjApplyBuffEffectDuration(lpObj,143,0,0,0,0,g_SkillAdditionInfo.GetInfinityArrowSkillTime());

  05c4d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  05c52	e8 00 00 00 00	 call	 ?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ ; CSkillAdditionInfo::GetInfinityArrowSkillTime
  05c57	50		 push	 eax
  05c58	6a 00		 push	 0
  05c5a	6a 00		 push	 0
  05c5c	6a 00		 push	 0
  05c5e	6a 00		 push	 0
  05c60	68 8f 00 00 00	 push	 143			; 0000008fH
  05c65	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05c68	50		 push	 eax
  05c69	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  05c6e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2751 : 	GCMagicAttackNumberSend(lpObj,441,lpObj->m_Index,TRUE);

  05c71	6a 01		 push	 1
  05c73	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05c76	8b 08		 mov	 ecx, DWORD PTR [eax]
  05c78	51		 push	 ecx
  05c79	68 b9 01 00 00	 push	 441			; 000001b9H
  05c7e	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05c81	52		 push	 edx
  05c82	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  05c87	83 c4 10	 add	 esp, 16			; 00000010H

; 2752 : 
; 2753 : 	LogAddTD("[%s][%s] Use Infinity Arrow Skill (Time:%d)(Character Level : %d)(ChangeUp: %d)",
; 2754 : 		lpObj->AccountID,lpObj->Name,g_SkillAdditionInfo.GetInfinityArrowSkillTime(),lpObj->Level,lpObj->ChangeUP);

  05c8a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05c8d	0f b6 88 bb 00
	00 00		 movzx	 ecx, BYTE PTR [eax+187]
  05c94	51		 push	 ecx
  05c95	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05c98	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  05c9f	50		 push	 eax
  05ca0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  05ca5	e8 00 00 00 00	 call	 ?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ ; CSkillAdditionInfo::GetInfinityArrowSkillTime
  05caa	50		 push	 eax
  05cab	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05cae	83 c1 77	 add	 ecx, 119		; 00000077H
  05cb1	51		 push	 ecx
  05cb2	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05cb5	83 c2 6c	 add	 edx, 108		; 0000006cH
  05cb8	52		 push	 edx
  05cb9	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@
  05cbe	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  05cc4	83 c4 18	 add	 esp, 24			; 00000018H

; 2755 : 
; 2756 : 	return true;

  05cc7	b8 01 00 00 00	 mov	 eax, 1
$LN6@MLS_SkillI:

; 2757 : }

  05ccc	5f		 pop	 edi
  05ccd	5e		 pop	 esi
  05cce	5b		 pop	 ebx
  05ccf	8b e5		 mov	 esp, ebp
  05cd1	5d		 pop	 ebp
  05cd2	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\skilladditioninfo.h
_TEXT	ENDS
;	COMDAT ?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ PROC ; CSkillAdditionInfo::GetInfinityArrowSkillTime, COMDAT
; _this$ = ecx

; 35   : 	int GetInfinityArrowSkillTime(){return this->m_iInfinityArrowSkillTime;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ ENDP ; CSkillAdditionInfo::GetInfinityArrowSkillTime
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\newmasterlevelskilltreesystem.cpp
_TEXT	ENDS
_TEXT	SEGMENT
tv67 = -88						; size = 4
_EffectDownValue$ = -20					; size = 4
_EffectUPValue$ = -16					; size = 4
_iDuration$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker
; _this$ = ecx

; 2760 : {

  05ce0	55		 push	 ebp
  05ce1	8b ec		 mov	 ebp, esp
  05ce3	83 ec 58	 sub	 esp, 88			; 00000058H
  05ce6	53		 push	 ebx
  05ce7	56		 push	 esi
  05ce8	57		 push	 edi
  05ce9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2761 : 	if( !OBJMAX_RANGE(aIndex) )

  05cec	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  05cf0	7d 09		 jge	 SHORT $LN6@MLS_SkillS@14
  05cf2	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  05cf9	eb 0f		 jmp	 SHORT $LN7@MLS_SkillS@14
$LN6@MLS_SkillS@14:
  05cfb	33 c0		 xor	 eax, eax
  05cfd	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  05d04	0f 9e c0	 setle	 al
  05d07	89 45 a8	 mov	 DWORD PTR tv67[ebp], eax
$LN7@MLS_SkillS@14:
  05d0a	83 7d a8 00	 cmp	 DWORD PTR tv67[ebp], 0
  05d0e	75 07		 jne	 SHORT $LN3@MLS_SkillS@14

; 2762 : 		return false;

  05d10	33 c0		 xor	 eax, eax
  05d12	e9 fc 00 00 00	 jmp	 $LN4@MLS_SkillS@14
$LN3@MLS_SkillS@14:

; 2763 : 
; 2764 : 	LPOBJ lpObj = &gObj[aIndex];

  05d17	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05d1a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05d20	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05d26	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 2765 : 
; 2766 : 	int iDuration = g_SkillAdditionInfo.m_BerserkerTimeStart + lpObj->Energy/g_SkillAdditionInfo.m_BerserkerTimeDiv;

  05d29	0f b7 0d b8 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3256
  05d30	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05d33	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  05d3a	0f b7 35 ba 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3258
  05d41	99		 cdq
  05d42	f7 fe		 idiv	 esi
  05d44	03 c8		 add	 ecx, eax
  05d46	89 4d f4	 mov	 DWORD PTR _iDuration$[ebp], ecx

; 2767 : 	
; 2768 : 	if( g_SkillAdditionInfo.m_BerserkerTimeMax > 0 && iDuration > g_SkillAdditionInfo.m_BerserkerTimeMax )

  05d49	83 3d bc 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260, 0
  05d50	76 13		 jbe	 SHORT $LN2@MLS_SkillS@14
  05d52	8b 45 f4	 mov	 eax, DWORD PTR _iDuration$[ebp]
  05d55	3b 05 bc 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260
  05d5b	76 08		 jbe	 SHORT $LN2@MLS_SkillS@14

; 2769 : 	{
; 2770 : 		iDuration = g_SkillAdditionInfo.m_BerserkerTimeMax;

  05d5d	a1 bc 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260
  05d62	89 45 f4	 mov	 DWORD PTR _iDuration$[ebp], eax
$LN2@MLS_SkillS@14:

; 2771 : 	}
; 2772 : 
; 2773 : 	int EffectUPValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerManaIncDiv;

  05d65	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05d68	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  05d6f	0f b7 0d b4 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3252
  05d76	99		 cdq
  05d77	f7 f9		 idiv	 ecx
  05d79	89 45 f0	 mov	 DWORD PTR _EffectUPValue$[ebp], eax

; 2774 : 	int EffectDownValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerLifeDecDiv;

  05d7c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05d7f	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  05d86	0f b7 0d b6 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3254
  05d8d	99		 cdq
  05d8e	f7 f9		 idiv	 ecx
  05d90	89 45 ec	 mov	 DWORD PTR _EffectDownValue$[ebp], eax

; 2775 : 
; 2776 : 	if( lpObj->Type == OBJ_MONSTER )

  05d93	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05d96	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  05d9a	83 f9 02	 cmp	 ecx, 2
  05d9d	75 07		 jne	 SHORT $LN1@MLS_SkillS@14

; 2777 : 		iDuration = 600000;

  05d9f	c7 45 f4 c0 27
	09 00		 mov	 DWORD PTR _iDuration$[ebp], 600000 ; 000927c0H
$LN1@MLS_SkillS@14:

; 2778 : 
; 2779 : 	lpObj->m_MPSkillOpt.MpsBerserkInc1 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  05da6	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05da9	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  05dad	51		 push	 ecx
  05dae	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05db1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  05db4	50		 push	 eax
  05db5	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  05dba	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  05dbf	50		 push	 eax
  05dc0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05dc3	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  05dc8	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05dcb	d9 99 7c 27 00
	00		 fstp	 DWORD PTR [ecx+10108]

; 2780 : 
; 2781 : 	gObjApplyBuffEffectDuration(lpObj,150,31,EffectUPValue,32,EffectDownValue,iDuration);

  05dd1	8b 45 f4	 mov	 eax, DWORD PTR _iDuration$[ebp]
  05dd4	50		 push	 eax
  05dd5	8b 4d ec	 mov	 ecx, DWORD PTR _EffectDownValue$[ebp]
  05dd8	51		 push	 ecx
  05dd9	6a 20		 push	 32			; 00000020H
  05ddb	8b 55 f0	 mov	 edx, DWORD PTR _EffectUPValue$[ebp]
  05dde	52		 push	 edx
  05ddf	6a 1f		 push	 31			; 0000001fH
  05de1	68 96 00 00 00	 push	 150			; 00000096H
  05de6	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05de9	50		 push	 eax
  05dea	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  05def	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2782 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  05df2	6a 01		 push	 1
  05df4	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05df7	8b 08		 mov	 ecx, DWORD PTR [eax]
  05df9	51		 push	 ecx
  05dfa	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05dfd	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  05e01	50		 push	 eax
  05e02	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05e05	51		 push	 ecx
  05e06	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  05e0b	83 c4 10	 add	 esp, 16			; 00000010H

; 2783 : 
; 2784 : 	return true;

  05e0e	b8 01 00 00 00	 mov	 eax, 1
$LN4@MLS_SkillS@14:

; 2785 : }

  05e13	5f		 pop	 edi
  05e14	5e		 pop	 esi
  05e15	5b		 pop	 ebx
  05e16	8b e5		 mov	 esp, ebp
  05e18	5d		 pop	 ebp
  05e19	c2 08 00	 ret	 8
?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker
; Function compile flags: /Odtp /ZI
tv67 = -88						; size = 4
_EffectDownValue$ = -20					; size = 4
_EffectUPValue$ = -16					; size = 4
_iDuration$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker
; _this$ = ecx

; 2788 : {

  05e20	55		 push	 ebp
  05e21	8b ec		 mov	 ebp, esp
  05e23	83 ec 58	 sub	 esp, 88			; 00000058H
  05e26	53		 push	 ebx
  05e27	56		 push	 esi
  05e28	57		 push	 edi
  05e29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2789 : 	if( !OBJMAX_RANGE(aIndex) )

  05e2c	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  05e30	7d 09		 jge	 SHORT $LN6@MLS_SkillS@15
  05e32	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  05e39	eb 0f		 jmp	 SHORT $LN7@MLS_SkillS@15
$LN6@MLS_SkillS@15:
  05e3b	33 c0		 xor	 eax, eax
  05e3d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  05e44	0f 9e c0	 setle	 al
  05e47	89 45 a8	 mov	 DWORD PTR tv67[ebp], eax
$LN7@MLS_SkillS@15:
  05e4a	83 7d a8 00	 cmp	 DWORD PTR tv67[ebp], 0
  05e4e	75 07		 jne	 SHORT $LN3@MLS_SkillS@15

; 2790 : 		return false;

  05e50	33 c0		 xor	 eax, eax
  05e52	e9 ec 00 00 00	 jmp	 $LN4@MLS_SkillS@15
$LN3@MLS_SkillS@15:

; 2791 : 
; 2792 : 	LPOBJ lpObj = &gObj[aIndex];

  05e57	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05e5a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05e60	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05e66	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 2793 : 
; 2794 : 	int iDuration = g_SkillAdditionInfo.m_BerserkerTimeStart + lpObj->Energy/g_SkillAdditionInfo.m_BerserkerTimeDiv;

  05e69	0f b7 0d b8 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3256
  05e70	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05e73	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  05e7a	0f b7 35 ba 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3258
  05e81	99		 cdq
  05e82	f7 fe		 idiv	 esi
  05e84	03 c8		 add	 ecx, eax
  05e86	89 4d f4	 mov	 DWORD PTR _iDuration$[ebp], ecx

; 2795 : 	
; 2796 : 	if( g_SkillAdditionInfo.m_BerserkerTimeMax > 0 && iDuration > g_SkillAdditionInfo.m_BerserkerTimeMax )

  05e89	83 3d bc 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260, 0
  05e90	76 13		 jbe	 SHORT $LN2@MLS_SkillS@15
  05e92	8b 45 f4	 mov	 eax, DWORD PTR _iDuration$[ebp]
  05e95	3b 05 bc 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260
  05e9b	76 08		 jbe	 SHORT $LN2@MLS_SkillS@15

; 2797 : 	{
; 2798 : 		iDuration = g_SkillAdditionInfo.m_BerserkerTimeMax;

  05e9d	a1 bc 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260
  05ea2	89 45 f4	 mov	 DWORD PTR _iDuration$[ebp], eax
$LN2@MLS_SkillS@15:

; 2799 : 	}
; 2800 : 
; 2801 : 	#ifdef FIX_BERSERK_SUM
; 2802 : 	int EffectUPValue = 0;

  05ea5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _EffectUPValue$[ebp], 0

; 2803 : 	#else
; 2804 : 	int EffectUPValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerManaIncDiv;
; 2805 : 	#endif
; 2806 : 	int EffectDownValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerLifeDecDiv;

  05eac	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05eaf	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  05eb6	0f b7 0d b6 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3254
  05ebd	99		 cdq
  05ebe	f7 f9		 idiv	 ecx
  05ec0	89 45 ec	 mov	 DWORD PTR _EffectDownValue$[ebp], eax

; 2807 : 
; 2808 : 	if( lpObj->Type == OBJ_MONSTER )

  05ec3	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05ec6	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  05eca	83 f9 02	 cmp	 ecx, 2
  05ecd	75 07		 jne	 SHORT $LN1@MLS_SkillS@15

; 2809 : 		iDuration = 600000;

  05ecf	c7 45 f4 c0 27
	09 00		 mov	 DWORD PTR _iDuration$[ebp], 600000 ; 000927c0H
$LN1@MLS_SkillS@15:

; 2810 : 
; 2811 : 	lpObj->m_MPSkillOpt.MpsBerserkInc2 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  05ed6	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  05ed9	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  05edd	51		 push	 ecx
  05ede	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05ee1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  05ee4	50		 push	 eax
  05ee5	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  05eea	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  05eef	50		 push	 eax
  05ef0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05ef3	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  05ef8	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05efb	d9 99 80 27 00
	00		 fstp	 DWORD PTR [ecx+10112]

; 2812 : 
; 2813 : 	gObjApplyBuffEffectDuration(lpObj,151,31,EffectUPValue,32,EffectDownValue,iDuration);

  05f01	8b 45 f4	 mov	 eax, DWORD PTR _iDuration$[ebp]
  05f04	50		 push	 eax
  05f05	8b 4d ec	 mov	 ecx, DWORD PTR _EffectDownValue$[ebp]
  05f08	51		 push	 ecx
  05f09	6a 20		 push	 32			; 00000020H
  05f0b	8b 55 f0	 mov	 edx, DWORD PTR _EffectUPValue$[ebp]
  05f0e	52		 push	 edx
  05f0f	6a 1f		 push	 31			; 0000001fH
  05f11	68 97 00 00 00	 push	 151			; 00000097H
  05f16	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05f19	50		 push	 eax
  05f1a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  05f1f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2814 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  05f22	6a 01		 push	 1
  05f24	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05f27	8b 08		 mov	 ecx, DWORD PTR [eax]
  05f29	51		 push	 ecx
  05f2a	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  05f2d	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  05f31	50		 push	 eax
  05f32	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  05f35	51		 push	 ecx
  05f36	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  05f3b	83 c4 10	 add	 esp, 16			; 00000010H

; 2815 : 
; 2816 : 	return true;

  05f3e	b8 01 00 00 00	 mov	 eax, 1
$LN4@MLS_SkillS@15:

; 2817 : }

  05f43	5f		 pop	 edi
  05f44	5e		 pop	 esi
  05f45	5b		 pop	 ebx
  05f46	8b e5		 mov	 esp, ebp
  05f48	5d		 pop	 ebp
  05f49	c2 08 00	 ret	 8
?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker
; Function compile flags: /Odtp /ZI
tv67 = -88						; size = 4
_EffectDownValue$ = -20					; size = 4
_EffectUPValue$ = -16					; size = 4
_iDuration$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker
; _this$ = ecx

; 2820 : {

  05f50	55		 push	 ebp
  05f51	8b ec		 mov	 ebp, esp
  05f53	83 ec 58	 sub	 esp, 88			; 00000058H
  05f56	53		 push	 ebx
  05f57	56		 push	 esi
  05f58	57		 push	 edi
  05f59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2821 : 	if( !OBJMAX_RANGE(aIndex) )

  05f5c	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  05f60	7d 09		 jge	 SHORT $LN6@MLS_SkillM@2
  05f62	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  05f69	eb 0f		 jmp	 SHORT $LN7@MLS_SkillM@2
$LN6@MLS_SkillM@2:
  05f6b	33 c0		 xor	 eax, eax
  05f6d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  05f74	0f 9e c0	 setle	 al
  05f77	89 45 a8	 mov	 DWORD PTR tv67[ebp], eax
$LN7@MLS_SkillM@2:
  05f7a	83 7d a8 00	 cmp	 DWORD PTR tv67[ebp], 0
  05f7e	75 07		 jne	 SHORT $LN3@MLS_SkillM@2

; 2822 : 		return false;

  05f80	33 c0		 xor	 eax, eax
  05f82	e9 ec 00 00 00	 jmp	 $LN4@MLS_SkillM@2
$LN3@MLS_SkillM@2:

; 2823 : 
; 2824 : 	LPOBJ lpObj = &gObj[aIndex];

  05f87	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05f8a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  05f90	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  05f96	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 2825 : 
; 2826 : 	int iDuration = g_SkillAdditionInfo.m_BerserkerTimeStart + lpObj->Energy/g_SkillAdditionInfo.m_BerserkerTimeDiv;

  05f99	0f b7 0d b8 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3256
  05fa0	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  05fa3	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  05faa	0f b7 35 ba 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3258
  05fb1	99		 cdq
  05fb2	f7 fe		 idiv	 esi
  05fb4	03 c8		 add	 ecx, eax
  05fb6	89 4d f4	 mov	 DWORD PTR _iDuration$[ebp], ecx

; 2827 : 	
; 2828 : 	if( g_SkillAdditionInfo.m_BerserkerTimeMax > 0 && iDuration > g_SkillAdditionInfo.m_BerserkerTimeMax )

  05fb9	83 3d bc 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260, 0
  05fc0	76 13		 jbe	 SHORT $LN2@MLS_SkillM@2
  05fc2	8b 45 f4	 mov	 eax, DWORD PTR _iDuration$[ebp]
  05fc5	3b 05 bc 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260
  05fcb	76 08		 jbe	 SHORT $LN2@MLS_SkillM@2

; 2829 : 	{
; 2830 : 		iDuration = g_SkillAdditionInfo.m_BerserkerTimeMax;

  05fcd	a1 bc 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260
  05fd2	89 45 f4	 mov	 DWORD PTR _iDuration$[ebp], eax
$LN2@MLS_SkillM@2:

; 2831 : 	}
; 2832 : 	#ifdef FIX_BERSERK_SUM
; 2833 : 	int EffectUPValue = 0;

  05fd5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _EffectUPValue$[ebp], 0

; 2834 : 	#else
; 2835 : 	int EffectUPValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerManaIncDiv;
; 2836 : 	#endif
; 2837 : 	int EffectDownValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerLifeDecDiv;

  05fdc	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05fdf	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  05fe6	0f b7 0d b6 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3254
  05fed	99		 cdq
  05fee	f7 f9		 idiv	 ecx
  05ff0	89 45 ec	 mov	 DWORD PTR _EffectDownValue$[ebp], eax

; 2838 : 
; 2839 : 	if( lpObj->Type == OBJ_MONSTER )

  05ff3	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  05ff6	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  05ffa	83 f9 02	 cmp	 ecx, 2
  05ffd	75 07		 jne	 SHORT $LN1@MLS_SkillM@2

; 2840 : 		iDuration = 600000;

  05fff	c7 45 f4 c0 27
	09 00		 mov	 DWORD PTR _iDuration$[ebp], 600000 ; 000927c0H
$LN1@MLS_SkillM@2:

; 2841 : 
; 2842 : 	lpObj->m_MPSkillOpt.MpsBerserkInc3 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  06006	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  06009	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0600d	51		 push	 ecx
  0600e	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06011	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  06014	50		 push	 eax
  06015	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0601a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0601f	50		 push	 eax
  06020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  06023	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  06028	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0602b	d9 99 84 27 00
	00		 fstp	 DWORD PTR [ecx+10116]

; 2843 : 
; 2844 : 	gObjApplyBuffEffectDuration(lpObj,152,31,EffectUPValue,32,EffectDownValue,iDuration);

  06031	8b 45 f4	 mov	 eax, DWORD PTR _iDuration$[ebp]
  06034	50		 push	 eax
  06035	8b 4d ec	 mov	 ecx, DWORD PTR _EffectDownValue$[ebp]
  06038	51		 push	 ecx
  06039	6a 20		 push	 32			; 00000020H
  0603b	8b 55 f0	 mov	 edx, DWORD PTR _EffectUPValue$[ebp]
  0603e	52		 push	 edx
  0603f	6a 1f		 push	 31			; 0000001fH
  06041	68 98 00 00 00	 push	 152			; 00000098H
  06046	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06049	50		 push	 eax
  0604a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0604f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2845 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  06052	6a 01		 push	 1
  06054	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06057	8b 08		 mov	 ecx, DWORD PTR [eax]
  06059	51		 push	 ecx
  0605a	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0605d	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  06061	50		 push	 eax
  06062	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06065	51		 push	 ecx
  06066	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0606b	83 c4 10	 add	 esp, 16			; 00000010H

; 2846 : 
; 2847 : 	return true;

  0606e	b8 01 00 00 00	 mov	 eax, 1
$LN4@MLS_SkillM@2:

; 2848 : }

  06073	5f		 pop	 edi
  06074	5e		 pop	 esi
  06075	5b		 pop	 ebx
  06076	8b e5		 mov	 esp, ebp
  06078	5d		 pop	 ebp
  06079	c2 08 00	 ret	 8
?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$235376 = -96						; size = 4
_SkillTime$ = -92					; size = 4
_addcriticaldamagevalue$ = -88				; size = 4
_n$235363 = -84						; size = 4
_lpPartyObj$ = -80					; size = 4
_ApplyPartyIndex$ = -76					; size = 40
_dis$ = -36						; size = 4
_partycount$ = -32					; size = 4
_totallevel$ = -28					; size = 4
_partynum$ = -24					; size = 4
_number$ = -20						; size = 4
_lpObj$ = -16						; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage
; _this$ = ecx

; 2851 : {

  06080	55		 push	 ebp
  06081	8b ec		 mov	 ebp, esp
  06083	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  06089	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0608e	33 c5		 xor	 eax, ebp
  06090	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  06093	53		 push	 ebx
  06094	56		 push	 esi
  06095	57		 push	 edi
  06096	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2852 : 	int skillSuccess = TRUE;

  06099	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 2853 : 	LPOBJ lpObj = &gObj[aIndex];

  060a0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  060a3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  060a9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  060af	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 2854 : 
; 2855 : 	if( lpObj->Type != OBJ_USER &&
; 2856 : 		lpObj->m_RecallMon == -1 )

  060b2	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  060b5	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  060b9	83 f9 01	 cmp	 ecx, 1
  060bc	74 11		 je	 SHORT $LN17@MLS_SkillS@16
  060be	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  060c1	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  060c8	75 05		 jne	 SHORT $LN17@MLS_SkillS@16

; 2857 : 		return;

  060ca	e9 b0 02 00 00	 jmp	 $LN18@MLS_SkillS@16
$LN17@MLS_SkillS@16:

; 2858 : 
; 2859 : 	if( lpObj->Class != CLASS_DARKLORD )

  060cf	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  060d2	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  060d9	83 f9 04	 cmp	 ecx, 4
  060dc	74 05		 je	 SHORT $LN16@MLS_SkillS@16

; 2860 : 		return;

  060de	e9 9c 02 00 00	 jmp	 $LN18@MLS_SkillS@16
$LN16@MLS_SkillS@16:

; 2861 : 
; 2862 : 	int number;
; 2863 : 	int partynum = 0;

  060e3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _partynum$[ebp], 0

; 2864 : 	int totallevel = 0;

  060ea	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _totallevel$[ebp], 0

; 2865 : 	int partycount;
; 2866 : 	int dis;
; 2867 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2868 : 	LPOBJ lpPartyObj;
; 2869 : 
; 2870 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  060f1	6a 28		 push	 40			; 00000028H
  060f3	6a ff		 push	 -1
  060f5	8d 45 b4	 lea	 eax, DWORD PTR _ApplyPartyIndex$[ebp]
  060f8	50		 push	 eax
  060f9	e8 00 00 00 00	 call	 _memset
  060fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2871 : 
; 2872 : 	partynum = lpObj->PartyNumber;

  06101	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06104	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  0610a	89 4d e8	 mov	 DWORD PTR _partynum$[ebp], ecx

; 2873 : 
; 2874 : 	if( partynum != -1 )

  0610d	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  06111	0f 84 91 00 00
	00		 je	 $LN12@MLS_SkillS@16

; 2875 : 	{
; 2876 : 		partycount = gParty.m_PartyS[partynum].Count;

  06117	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  0611a	6b c0 6c	 imul	 eax, 108		; 0000006cH
  0611d	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  06123	89 4d e0	 mov	 DWORD PTR _partycount$[ebp], ecx

; 2877 : 
; 2878 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  06126	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _n$235363[ebp], 0
  0612d	eb 09		 jmp	 SHORT $LN14@MLS_SkillS@16
$LN13@MLS_SkillS@16:
  0612f	8b 45 ac	 mov	 eax, DWORD PTR _n$235363[ebp]
  06132	83 c0 01	 add	 eax, 1
  06135	89 45 ac	 mov	 DWORD PTR _n$235363[ebp], eax
$LN14@MLS_SkillS@16:
  06138	83 7d ac 0a	 cmp	 DWORD PTR _n$235363[ebp], 10 ; 0000000aH
  0613c	7d 6a		 jge	 SHORT $LN12@MLS_SkillS@16

; 2879 : 		{
; 2880 : 			number = gParty.m_PartyS[partynum].Number[n];

  0613e	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  06141	6b c0 6c	 imul	 eax, 108		; 0000006cH
  06144	8b 4d ac	 mov	 ecx, DWORD PTR _n$235363[ebp]
  06147	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  0614e	89 55 ec	 mov	 DWORD PTR _number$[ebp], edx

; 2881 : 
; 2882 : 			if( number >= 0 )

  06151	83 7d ec 00	 cmp	 DWORD PTR _number$[ebp], 0
  06155	7c 4f		 jl	 SHORT $LN9@MLS_SkillS@16

; 2883 : 			{
; 2884 : 				lpPartyObj = &gObj[number];

  06157	8b 45 ec	 mov	 eax, DWORD PTR _number$[ebp]
  0615a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06160	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06166	89 45 b0	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 2885 : 
; 2886 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  06169	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0616c	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  06173	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  06176	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0617d	3b c8		 cmp	 ecx, eax
  0617f	75 25		 jne	 SHORT $LN9@MLS_SkillS@16

; 2887 : 				{
; 2888 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  06181	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  06184	50		 push	 eax
  06185	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06188	51		 push	 ecx
  06189	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0618e	83 c4 08	 add	 esp, 8
  06191	89 45 dc	 mov	 DWORD PTR _dis$[ebp], eax

; 2889 : 
; 2890 : 					if( dis < 10 )

  06194	83 7d dc 0a	 cmp	 DWORD PTR _dis$[ebp], 10 ; 0000000aH
  06198	7d 0c		 jge	 SHORT $LN9@MLS_SkillS@16

; 2891 : 					{
; 2892 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  0619a	8b 45 ac	 mov	 eax, DWORD PTR _n$235363[ebp]
  0619d	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  061a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  061a2	89 54 85 b4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], edx
$LN9@MLS_SkillS@16:

; 2893 : 					}
; 2894 : 				}
; 2895 : 			}
; 2896 : 		}

  061a6	eb 87		 jmp	 SHORT $LN13@MLS_SkillS@16
$LN12@MLS_SkillS@16:

; 2897 : 	}
; 2898 : 
; 2899 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv2 + (lpObj->Leadership+lpObj->AddLeadership)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv1;

  061a8	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  061ab	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  061b2	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  061b5	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  061bc	03 c2		 add	 eax, edx
  061be	0f b7 0d a6 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3238
  061c5	99		 cdq
  061c6	f7 f9		 idiv	 ecx
  061c8	8b c8		 mov	 ecx, eax
  061ca	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  061cd	0f b7 82 18 01
	00 00		 movzx	 eax, WORD PTR [edx+280]
  061d4	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  061d7	0f b7 92 1a 01
	00 00		 movzx	 edx, WORD PTR [edx+282]
  061de	03 c2		 add	 eax, edx
  061e0	0f b7 35 a4 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3236
  061e7	99		 cdq
  061e8	f7 fe		 idiv	 esi
  061ea	03 c8		 add	 ecx, eax
  061ec	89 4d a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx

; 2900 : 	addcriticaldamagevalue += this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  061ef	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  061f2	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  061f6	51		 push	 ecx
  061f7	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  061fa	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  061fd	50		 push	 eax
  061fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  06203	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  06208	50		 push	 eax
  06209	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0620c	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  06211	da 45 a8	 fiadd	 DWORD PTR _addcriticaldamagevalue$[ebp]
  06214	e8 00 00 00 00	 call	 __ftol2_sse
  06219	89 45 a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax

; 2901 : 	
; 2902 : 	if( g_SkillAdditionInfo.m_CriticalDamageEffectMax > 0 && addcriticaldamagevalue > g_SkillAdditionInfo.m_CriticalDamageEffectMax )

  0621c	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  06223	85 c0		 test	 eax, eax
  06225	7e 16		 jle	 SHORT $LN8@MLS_SkillS@16
  06227	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  0622e	39 45 a8	 cmp	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
  06231	7e 0a		 jle	 SHORT $LN8@MLS_SkillS@16

; 2903 : 	{
; 2904 : 		addcriticaldamagevalue = g_SkillAdditionInfo.m_CriticalDamageEffectMax;

  06233	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  0623a	89 45 a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
$LN8@MLS_SkillS@16:

; 2905 : 	}
; 2906 : 	
; 2907 : 	int SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeStart + (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageTimeDiv;

  0623d	0f b7 0d aa 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3242
  06244	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06247	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  0624e	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06251	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  06258	03 c2		 add	 eax, edx
  0625a	0f b7 35 ac 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3244
  06261	99		 cdq
  06262	f7 fe		 idiv	 esi
  06264	03 c8		 add	 ecx, eax
  06266	89 4d a4	 mov	 DWORD PTR _SkillTime$[ebp], ecx

; 2908 : 
; 2909 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  06269	83 3d b0 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248, 0
  06270	76 13		 jbe	 SHORT $LN7@MLS_SkillS@16
  06272	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06275	3b 05 b0 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  0627b	76 08		 jbe	 SHORT $LN7@MLS_SkillS@16

; 2910 : 	{
; 2911 : 		SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeMax;

  0627d	a1 b0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  06282	89 45 a4	 mov	 DWORD PTR _SkillTime$[ebp], eax
$LN7@MLS_SkillS@16:

; 2912 : 	}
; 2913 : 
; 2914 : 	if( partynum == -1 )

  06285	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  06289	75 5d		 jne	 SHORT $LN6@MLS_SkillS@16

; 2915 : 	{
; 2916 : 		gObjApplyBuffEffectDuration(lpObj,AT_INCREASE_CRITICAL_DMG,17,addcriticaldamagevalue,0,0,SkillTime);

  0628b	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  0628e	50		 push	 eax
  0628f	6a 00		 push	 0
  06291	6a 00		 push	 0
  06293	8b 4d a8	 mov	 ecx, DWORD PTR _addcriticaldamagevalue$[ebp]
  06296	51		 push	 ecx
  06297	6a 11		 push	 17			; 00000011H
  06299	6a 05		 push	 5
  0629b	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0629e	52		 push	 edx
  0629f	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  062a4	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2917 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  062a7	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  062aa	50		 push	 eax
  062ab	68 d8 04 00 00	 push	 1240			; 000004d8H
  062b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  062b5	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  062ba	50		 push	 eax
  062bb	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  062be	51		 push	 ecx
  062bf	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  062c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2918 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  062c7	6a 01		 push	 1
  062c9	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  062cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  062ce	51		 push	 ecx
  062cf	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  062d2	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  062d6	50		 push	 eax
  062d7	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  062da	51		 push	 ecx
  062db	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  062e0	83 c4 10	 add	 esp, 16			; 00000010H

; 2919 : 	}
; 2920 : 	else

  062e3	e9 97 00 00 00	 jmp	 $LN2@MLS_SkillS@16
$LN6@MLS_SkillS@16:

; 2921 : 	{
; 2922 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  062e8	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _n$235376[ebp], 0
  062ef	eb 09		 jmp	 SHORT $LN4@MLS_SkillS@16
$LN3@MLS_SkillS@16:
  062f1	8b 45 a0	 mov	 eax, DWORD PTR _n$235376[ebp]
  062f4	83 c0 01	 add	 eax, 1
  062f7	89 45 a0	 mov	 DWORD PTR _n$235376[ebp], eax
$LN4@MLS_SkillS@16:
  062fa	83 7d a0 0a	 cmp	 DWORD PTR _n$235376[ebp], 10 ; 0000000aH
  062fe	7d 7f		 jge	 SHORT $LN2@MLS_SkillS@16

; 2923 : 		{
; 2924 : 			if( ApplyPartyIndex[n] != -1 )

  06300	8b 45 a0	 mov	 eax, DWORD PTR _n$235376[ebp]
  06303	83 7c 85 b4 ff	 cmp	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], -1
  06308	74 70		 je	 SHORT $LN1@MLS_SkillS@16

; 2925 : 			{
; 2926 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  0630a	8b 45 a0	 mov	 eax, DWORD PTR _n$235376[ebp]
  0630d	8b 4c 85 b4	 mov	 ecx, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  06311	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  06317	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0631d	89 4d b0	 mov	 DWORD PTR _lpPartyObj$[ebp], ecx

; 2927 : 
; 2928 : 				gObjApplyBuffEffectDuration(lpPartyObj,AT_INCREASE_CRITICAL_DMG,17,addcriticaldamagevalue,0,0,SkillTime);

  06320	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06323	50		 push	 eax
  06324	6a 00		 push	 0
  06326	6a 00		 push	 0
  06328	8b 4d a8	 mov	 ecx, DWORD PTR _addcriticaldamagevalue$[ebp]
  0632b	51		 push	 ecx
  0632c	6a 11		 push	 17			; 00000011H
  0632e	6a 05		 push	 5
  06330	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  06333	52		 push	 edx
  06334	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  06339	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2929 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  0633c	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  0633f	50		 push	 eax
  06340	68 d8 04 00 00	 push	 1240			; 000004d8H
  06345	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0634a	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0634f	50		 push	 eax
  06350	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  06353	8b 11		 mov	 edx, DWORD PTR [ecx]
  06355	52		 push	 edx
  06356	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0635b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2930 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0635e	6a 01		 push	 1
  06360	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  06363	8b 08		 mov	 ecx, DWORD PTR [eax]
  06365	51		 push	 ecx
  06366	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06369	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0636d	50		 push	 eax
  0636e	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06371	51		 push	 ecx
  06372	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  06377	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillS@16:

; 2931 : 			}
; 2932 : 		}

  0637a	e9 72 ff ff ff	 jmp	 $LN3@MLS_SkillS@16
$LN2@MLS_SkillS@16:
$LN18@MLS_SkillS@16:

; 2933 : 	}
; 2934 : }

  0637f	5f		 pop	 edi
  06380	5e		 pop	 esi
  06381	5b		 pop	 ebx
  06382	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  06385	33 cd		 xor	 ecx, ebp
  06387	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0638c	8b e5		 mov	 esp, ebp
  0638e	5d		 pop	 ebp
  0638f	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv328 = -172						; size = 8
tv284 = -164						; size = 4
_n$235412 = -96						; size = 4
_SkillTime$ = -92					; size = 4
_addcriticaldamagevalue$ = -88				; size = 4
_n$235399 = -84						; size = 4
_lpPartyObj$ = -80					; size = 4
_ApplyPartyIndex$ = -76					; size = 40
_dis$ = -36						; size = 4
_partycount$ = -32					; size = 4
_totallevel$ = -28					; size = 4
_partynum$ = -24					; size = 4
_number$ = -20						; size = 4
_lpObj$ = -16						; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage
; _this$ = ecx

; 2937 : {

  063a0	55		 push	 ebp
  063a1	8b ec		 mov	 ebp, esp
  063a3	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  063a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  063ae	33 c5		 xor	 eax, ebp
  063b0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  063b3	53		 push	 ebx
  063b4	56		 push	 esi
  063b5	57		 push	 edi
  063b6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2938 : 	int skillSuccess = TRUE;

  063b9	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 2939 : 	LPOBJ lpObj = &gObj[aIndex];

  063c0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  063c3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  063c9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  063cf	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 2940 : 
; 2941 : 	if( lpObj->Type != OBJ_USER &&
; 2942 : 		lpObj->m_RecallMon == -1 )

  063d2	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  063d5	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  063d9	83 f9 01	 cmp	 ecx, 1
  063dc	74 11		 je	 SHORT $LN17@MLS_SkillS@17
  063de	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  063e1	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  063e8	75 05		 jne	 SHORT $LN17@MLS_SkillS@17

; 2943 : 		return;

  063ea	e9 e2 02 00 00	 jmp	 $LN18@MLS_SkillS@17
$LN17@MLS_SkillS@17:

; 2944 : 
; 2945 : 	if( lpObj->Class != CLASS_DARKLORD )

  063ef	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  063f2	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  063f9	83 f9 04	 cmp	 ecx, 4
  063fc	74 05		 je	 SHORT $LN16@MLS_SkillS@17

; 2946 : 		return;

  063fe	e9 ce 02 00 00	 jmp	 $LN18@MLS_SkillS@17
$LN16@MLS_SkillS@17:

; 2947 : 
; 2948 : 	int number;
; 2949 : 	int partynum = 0;

  06403	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _partynum$[ebp], 0

; 2950 : 	int totallevel = 0;

  0640a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _totallevel$[ebp], 0

; 2951 : 	int partycount;
; 2952 : 	int dis;
; 2953 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2954 : 	LPOBJ lpPartyObj;
; 2955 : 
; 2956 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  06411	6a 28		 push	 40			; 00000028H
  06413	6a ff		 push	 -1
  06415	8d 45 b4	 lea	 eax, DWORD PTR _ApplyPartyIndex$[ebp]
  06418	50		 push	 eax
  06419	e8 00 00 00 00	 call	 _memset
  0641e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2957 : 
; 2958 : 	partynum = lpObj->PartyNumber;

  06421	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06424	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  0642a	89 4d e8	 mov	 DWORD PTR _partynum$[ebp], ecx

; 2959 : 
; 2960 : 	if( partynum != -1 )

  0642d	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  06431	0f 84 91 00 00
	00		 je	 $LN12@MLS_SkillS@17

; 2961 : 	{
; 2962 : 		partycount = gParty.m_PartyS[partynum].Count;

  06437	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  0643a	6b c0 6c	 imul	 eax, 108		; 0000006cH
  0643d	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  06443	89 4d e0	 mov	 DWORD PTR _partycount$[ebp], ecx

; 2963 : 
; 2964 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  06446	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _n$235399[ebp], 0
  0644d	eb 09		 jmp	 SHORT $LN14@MLS_SkillS@17
$LN13@MLS_SkillS@17:
  0644f	8b 45 ac	 mov	 eax, DWORD PTR _n$235399[ebp]
  06452	83 c0 01	 add	 eax, 1
  06455	89 45 ac	 mov	 DWORD PTR _n$235399[ebp], eax
$LN14@MLS_SkillS@17:
  06458	83 7d ac 0a	 cmp	 DWORD PTR _n$235399[ebp], 10 ; 0000000aH
  0645c	7d 6a		 jge	 SHORT $LN12@MLS_SkillS@17

; 2965 : 		{
; 2966 : 			number = gParty.m_PartyS[partynum].Number[n];

  0645e	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  06461	6b c0 6c	 imul	 eax, 108		; 0000006cH
  06464	8b 4d ac	 mov	 ecx, DWORD PTR _n$235399[ebp]
  06467	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  0646e	89 55 ec	 mov	 DWORD PTR _number$[ebp], edx

; 2967 : 
; 2968 : 			if( number >= 0 )

  06471	83 7d ec 00	 cmp	 DWORD PTR _number$[ebp], 0
  06475	7c 4f		 jl	 SHORT $LN9@MLS_SkillS@17

; 2969 : 			{
; 2970 : 				lpPartyObj = &gObj[number];

  06477	8b 45 ec	 mov	 eax, DWORD PTR _number$[ebp]
  0647a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06480	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06486	89 45 b0	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 2971 : 
; 2972 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  06489	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0648c	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  06493	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  06496	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0649d	3b c8		 cmp	 ecx, eax
  0649f	75 25		 jne	 SHORT $LN9@MLS_SkillS@17

; 2973 : 				{
; 2974 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  064a1	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  064a4	50		 push	 eax
  064a5	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  064a8	51		 push	 ecx
  064a9	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  064ae	83 c4 08	 add	 esp, 8
  064b1	89 45 dc	 mov	 DWORD PTR _dis$[ebp], eax

; 2975 : 
; 2976 : 					if( dis < 10 )

  064b4	83 7d dc 0a	 cmp	 DWORD PTR _dis$[ebp], 10 ; 0000000aH
  064b8	7d 0c		 jge	 SHORT $LN9@MLS_SkillS@17

; 2977 : 					{
; 2978 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  064ba	8b 45 ac	 mov	 eax, DWORD PTR _n$235399[ebp]
  064bd	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  064c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  064c2	89 54 85 b4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], edx
$LN9@MLS_SkillS@17:

; 2979 : 					}
; 2980 : 				}
; 2981 : 			}
; 2982 : 		}

  064c6	eb 87		 jmp	 SHORT $LN13@MLS_SkillS@17
$LN12@MLS_SkillS@17:

; 2983 : 	}
; 2984 : 
; 2985 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv2 + (lpObj->Leadership+lpObj->AddLeadership)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv1;

  064c8	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  064cb	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  064d2	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  064d5	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  064dc	03 c2		 add	 eax, edx
  064de	0f b7 0d a6 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3238
  064e5	99		 cdq
  064e6	f7 f9		 idiv	 ecx
  064e8	8b c8		 mov	 ecx, eax
  064ea	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  064ed	0f b7 82 18 01
	00 00		 movzx	 eax, WORD PTR [edx+280]
  064f4	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  064f7	0f b7 92 1a 01
	00 00		 movzx	 edx, WORD PTR [edx+282]
  064fe	03 c2		 add	 eax, edx
  06500	0f b7 35 a4 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3236
  06507	99		 cdq
  06508	f7 fe		 idiv	 esi
  0650a	03 c8		 add	 ecx, eax
  0650c	89 4d a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx

; 2986 : 	addcriticaldamagevalue += this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  0650f	6a 01		 push	 1
  06511	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  06514	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  06517	51		 push	 ecx
  06518	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0651b	52		 push	 edx
  0651c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0651f	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  06524	da 45 a8	 fiadd	 DWORD PTR _addcriticaldamagevalue$[ebp]
  06527	e8 00 00 00 00	 call	 __ftol2_sse
  0652c	89 45 a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax

; 2987 : 	
; 2988 : 	if( g_SkillAdditionInfo.m_CriticalDamageEffectMax > 0 && addcriticaldamagevalue > g_SkillAdditionInfo.m_CriticalDamageEffectMax )

  0652f	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  06536	85 c0		 test	 eax, eax
  06538	7e 16		 jle	 SHORT $LN8@MLS_SkillS@17
  0653a	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  06541	39 45 a8	 cmp	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
  06544	7e 0a		 jle	 SHORT $LN8@MLS_SkillS@17

; 2989 : 	{
; 2990 : 		addcriticaldamagevalue = g_SkillAdditionInfo.m_CriticalDamageEffectMax;

  06546	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  0654d	89 45 a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
$LN8@MLS_SkillS@17:

; 2991 : 	}
; 2992 : 	
; 2993 : 	int SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeStart + (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageTimeDiv + this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  06550	0f b7 0d aa 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3242
  06557	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0655a	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  06561	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06564	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  0656b	03 c2		 add	 eax, edx
  0656d	0f b7 35 ac 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3244
  06574	99		 cdq
  06575	f7 fe		 idiv	 esi
  06577	03 c8		 add	 ecx, eax
  06579	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv284[ebp], ecx
  0657f	db 85 5c ff ff
	ff		 fild	 DWORD PTR tv284[ebp]
  06585	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  06588	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0658c	51		 push	 ecx
  0658d	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06590	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  06593	50		 push	 eax
  06594	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  06599	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv328[ebp]
  0659f	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  065a4	50		 push	 eax
  065a5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  065a8	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  065ad	dc 85 54 ff ff
	ff		 fadd	 QWORD PTR tv328[ebp]
  065b3	e8 00 00 00 00	 call	 __ftol2_sse
  065b8	89 45 a4	 mov	 DWORD PTR _SkillTime$[ebp], eax

; 2994 : 
; 2995 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  065bb	83 3d b0 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248, 0
  065c2	76 13		 jbe	 SHORT $LN7@MLS_SkillS@17
  065c4	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  065c7	3b 05 b0 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  065cd	76 08		 jbe	 SHORT $LN7@MLS_SkillS@17

; 2996 : 	{
; 2997 : 		SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeMax;

  065cf	a1 b0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  065d4	89 45 a4	 mov	 DWORD PTR _SkillTime$[ebp], eax
$LN7@MLS_SkillS@17:

; 2998 : 	}
; 2999 : 
; 3000 : 	if( partynum == -1 )

  065d7	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  065db	75 5d		 jne	 SHORT $LN6@MLS_SkillS@17

; 3001 : 	{
; 3002 : 		gObjApplyBuffEffectDuration(lpObj,AT_INCREASE_CRITICAL_DMG,17,addcriticaldamagevalue,0,0,SkillTime);

  065dd	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  065e0	50		 push	 eax
  065e1	6a 00		 push	 0
  065e3	6a 00		 push	 0
  065e5	8b 4d a8	 mov	 ecx, DWORD PTR _addcriticaldamagevalue$[ebp]
  065e8	51		 push	 ecx
  065e9	6a 11		 push	 17			; 00000011H
  065eb	6a 05		 push	 5
  065ed	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  065f0	52		 push	 edx
  065f1	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  065f6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3003 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  065f9	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  065fc	50		 push	 eax
  065fd	68 d8 04 00 00	 push	 1240			; 000004d8H
  06602	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  06607	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0660c	50		 push	 eax
  0660d	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  06610	51		 push	 ecx
  06611	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  06616	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3004 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  06619	6a 01		 push	 1
  0661b	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0661e	8b 08		 mov	 ecx, DWORD PTR [eax]
  06620	51		 push	 ecx
  06621	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06624	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  06628	50		 push	 eax
  06629	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0662c	51		 push	 ecx
  0662d	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  06632	83 c4 10	 add	 esp, 16			; 00000010H

; 3005 : 	}
; 3006 : 	else

  06635	e9 97 00 00 00	 jmp	 $LN2@MLS_SkillS@17
$LN6@MLS_SkillS@17:

; 3007 : 	{
; 3008 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0663a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _n$235412[ebp], 0
  06641	eb 09		 jmp	 SHORT $LN4@MLS_SkillS@17
$LN3@MLS_SkillS@17:
  06643	8b 45 a0	 mov	 eax, DWORD PTR _n$235412[ebp]
  06646	83 c0 01	 add	 eax, 1
  06649	89 45 a0	 mov	 DWORD PTR _n$235412[ebp], eax
$LN4@MLS_SkillS@17:
  0664c	83 7d a0 0a	 cmp	 DWORD PTR _n$235412[ebp], 10 ; 0000000aH
  06650	7d 7f		 jge	 SHORT $LN2@MLS_SkillS@17

; 3009 : 		{
; 3010 : 			if( ApplyPartyIndex[n] != -1 )

  06652	8b 45 a0	 mov	 eax, DWORD PTR _n$235412[ebp]
  06655	83 7c 85 b4 ff	 cmp	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], -1
  0665a	74 70		 je	 SHORT $LN1@MLS_SkillS@17

; 3011 : 			{
; 3012 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  0665c	8b 45 a0	 mov	 eax, DWORD PTR _n$235412[ebp]
  0665f	8b 4c 85 b4	 mov	 ecx, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  06663	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  06669	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0666f	89 4d b0	 mov	 DWORD PTR _lpPartyObj$[ebp], ecx

; 3013 : 
; 3014 : 				gObjApplyBuffEffectDuration(lpPartyObj,AT_INCREASE_CRITICAL_DMG,17,addcriticaldamagevalue,0,0,SkillTime);

  06672	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06675	50		 push	 eax
  06676	6a 00		 push	 0
  06678	6a 00		 push	 0
  0667a	8b 4d a8	 mov	 ecx, DWORD PTR _addcriticaldamagevalue$[ebp]
  0667d	51		 push	 ecx
  0667e	6a 11		 push	 17			; 00000011H
  06680	6a 05		 push	 5
  06682	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  06685	52		 push	 edx
  06686	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0668b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3015 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  0668e	8b 45 a4	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06691	50		 push	 eax
  06692	68 d8 04 00 00	 push	 1240			; 000004d8H
  06697	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0669c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  066a1	50		 push	 eax
  066a2	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  066a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  066a7	52		 push	 edx
  066a8	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  066ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3016 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  066b0	6a 01		 push	 1
  066b2	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  066b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  066b7	51		 push	 ecx
  066b8	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  066bb	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  066bf	50		 push	 eax
  066c0	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  066c3	51		 push	 ecx
  066c4	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  066c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillS@17:

; 3017 : 			}
; 3018 : 		}

  066cc	e9 72 ff ff ff	 jmp	 $LN3@MLS_SkillS@17
$LN2@MLS_SkillS@17:
$LN18@MLS_SkillS@17:

; 3019 : 	}
; 3020 : }

  066d1	5f		 pop	 edi
  066d2	5e		 pop	 esi
  066d3	5b		 pop	 ebx
  066d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  066d7	33 cd		 xor	 ecx, ebp
  066d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  066de	8b e5		 mov	 esp, ebp
  066e0	5d		 pop	 ebp
  066e1	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv297 = -172						; size = 4
_n$235450 = -104					; size = 4
_fRate$ = -100						; size = 4
_SkillTime$ = -96					; size = 4
_fSkillValue$ = -92					; size = 4
_addcriticaldamagevalue$ = -88				; size = 4
_n$235435 = -84						; size = 4
_lpPartyObj$ = -80					; size = 4
_ApplyPartyIndex$ = -76					; size = 40
_dis$ = -36						; size = 4
_partycount$ = -32					; size = 4
_totallevel$ = -28					; size = 4
_partynum$ = -24					; size = 4
_number$ = -20						; size = 4
_lpObj$ = -16						; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage
; _this$ = ecx

; 3023 : {

  066f0	55		 push	 ebp
  066f1	8b ec		 mov	 ebp, esp
  066f3	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  066f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  066fe	33 c5		 xor	 eax, ebp
  06700	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  06703	53		 push	 ebx
  06704	56		 push	 esi
  06705	57		 push	 edi
  06706	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3024 : 		int skillSuccess = TRUE;

  06709	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 3025 : 	LPOBJ lpObj = &gObj[aIndex];

  06710	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  06713	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06719	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0671f	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 3026 : 
; 3027 : 	if( lpObj->Type != OBJ_USER &&
; 3028 : 		lpObj->m_RecallMon == -1 )

  06722	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06725	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  06729	83 f9 01	 cmp	 ecx, 1
  0672c	74 11		 je	 SHORT $LN17@MLS_SkillM@3
  0672e	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06731	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  06738	75 05		 jne	 SHORT $LN17@MLS_SkillM@3

; 3029 : 		return;

  0673a	e9 0c 03 00 00	 jmp	 $LN18@MLS_SkillM@3
$LN17@MLS_SkillM@3:

; 3030 : 
; 3031 : 	if( lpObj->Class != CLASS_DARKLORD )

  0673f	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06742	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  06749	83 f9 04	 cmp	 ecx, 4
  0674c	74 05		 je	 SHORT $LN16@MLS_SkillM@3

; 3032 : 		return;

  0674e	e9 f8 02 00 00	 jmp	 $LN18@MLS_SkillM@3
$LN16@MLS_SkillM@3:

; 3033 : 
; 3034 : 	int number;
; 3035 : 	int partynum = 0;

  06753	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _partynum$[ebp], 0

; 3036 : 	int totallevel = 0;

  0675a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _totallevel$[ebp], 0

; 3037 : 	int partycount;
; 3038 : 	int dis;
; 3039 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 3040 : 	LPOBJ lpPartyObj;
; 3041 : 
; 3042 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  06761	6a 28		 push	 40			; 00000028H
  06763	6a ff		 push	 -1
  06765	8d 45 b4	 lea	 eax, DWORD PTR _ApplyPartyIndex$[ebp]
  06768	50		 push	 eax
  06769	e8 00 00 00 00	 call	 _memset
  0676e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3043 : 
; 3044 : 	partynum = lpObj->PartyNumber;

  06771	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06774	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  0677a	89 4d e8	 mov	 DWORD PTR _partynum$[ebp], ecx

; 3045 : 
; 3046 : 	if( partynum != -1 )

  0677d	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  06781	0f 84 91 00 00
	00		 je	 $LN12@MLS_SkillM@3

; 3047 : 	{
; 3048 : 		partycount = gParty.m_PartyS[partynum].Count;

  06787	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  0678a	6b c0 6c	 imul	 eax, 108		; 0000006cH
  0678d	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  06793	89 4d e0	 mov	 DWORD PTR _partycount$[ebp], ecx

; 3049 : 
; 3050 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  06796	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _n$235435[ebp], 0
  0679d	eb 09		 jmp	 SHORT $LN14@MLS_SkillM@3
$LN13@MLS_SkillM@3:
  0679f	8b 45 ac	 mov	 eax, DWORD PTR _n$235435[ebp]
  067a2	83 c0 01	 add	 eax, 1
  067a5	89 45 ac	 mov	 DWORD PTR _n$235435[ebp], eax
$LN14@MLS_SkillM@3:
  067a8	83 7d ac 0a	 cmp	 DWORD PTR _n$235435[ebp], 10 ; 0000000aH
  067ac	7d 6a		 jge	 SHORT $LN12@MLS_SkillM@3

; 3051 : 		{
; 3052 : 			number = gParty.m_PartyS[partynum].Number[n];

  067ae	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  067b1	6b c0 6c	 imul	 eax, 108		; 0000006cH
  067b4	8b 4d ac	 mov	 ecx, DWORD PTR _n$235435[ebp]
  067b7	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  067be	89 55 ec	 mov	 DWORD PTR _number$[ebp], edx

; 3053 : 
; 3054 : 			if( number >= 0 )

  067c1	83 7d ec 00	 cmp	 DWORD PTR _number$[ebp], 0
  067c5	7c 4f		 jl	 SHORT $LN9@MLS_SkillM@3

; 3055 : 			{
; 3056 : 				lpPartyObj = &gObj[number];

  067c7	8b 45 ec	 mov	 eax, DWORD PTR _number$[ebp]
  067ca	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  067d0	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  067d6	89 45 b0	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 3057 : 
; 3058 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  067d9	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  067dc	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  067e3	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  067e6	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  067ed	3b c8		 cmp	 ecx, eax
  067ef	75 25		 jne	 SHORT $LN9@MLS_SkillM@3

; 3059 : 				{
; 3060 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  067f1	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  067f4	50		 push	 eax
  067f5	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  067f8	51		 push	 ecx
  067f9	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  067fe	83 c4 08	 add	 esp, 8
  06801	89 45 dc	 mov	 DWORD PTR _dis$[ebp], eax

; 3061 : 
; 3062 : 					if( dis < 10 )

  06804	83 7d dc 0a	 cmp	 DWORD PTR _dis$[ebp], 10 ; 0000000aH
  06808	7d 0c		 jge	 SHORT $LN9@MLS_SkillM@3

; 3063 : 					{
; 3064 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  0680a	8b 45 ac	 mov	 eax, DWORD PTR _n$235435[ebp]
  0680d	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  06810	8b 11		 mov	 edx, DWORD PTR [ecx]
  06812	89 54 85 b4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], edx
$LN9@MLS_SkillM@3:

; 3065 : 					}
; 3066 : 				}
; 3067 : 			}
; 3068 : 		}

  06816	eb 87		 jmp	 SHORT $LN13@MLS_SkillM@3
$LN12@MLS_SkillM@3:

; 3069 : 	}
; 3070 : 
; 3071 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv2 + (lpObj->Leadership+lpObj->AddLeadership)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv1;

  06818	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0681b	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  06822	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06825	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  0682c	03 c2		 add	 eax, edx
  0682e	0f b7 0d a6 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3238
  06835	99		 cdq
  06836	f7 f9		 idiv	 ecx
  06838	8b c8		 mov	 ecx, eax
  0683a	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0683d	0f b7 82 18 01
	00 00		 movzx	 eax, WORD PTR [edx+280]
  06844	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06847	0f b7 92 1a 01
	00 00		 movzx	 edx, WORD PTR [edx+282]
  0684e	03 c2		 add	 eax, edx
  06850	0f b7 35 a4 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3236
  06857	99		 cdq
  06858	f7 fe		 idiv	 esi
  0685a	03 c8		 add	 ecx, eax
  0685c	89 4d a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx

; 3072 : 	addcriticaldamagevalue += this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  0685f	6a 02		 push	 2
  06861	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  06864	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  06867	51		 push	 ecx
  06868	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0686b	52		 push	 edx
  0686c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0686f	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  06874	da 45 a8	 fiadd	 DWORD PTR _addcriticaldamagevalue$[ebp]
  06877	e8 00 00 00 00	 call	 __ftol2_sse
  0687c	89 45 a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax

; 3073 : 	
; 3074 : 	if( g_SkillAdditionInfo.m_CriticalDamageEffectMax > 0 && addcriticaldamagevalue > g_SkillAdditionInfo.m_CriticalDamageEffectMax )

  0687f	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  06886	85 c0		 test	 eax, eax
  06888	7e 16		 jle	 SHORT $LN8@MLS_SkillM@3
  0688a	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  06891	39 45 a8	 cmp	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
  06894	7e 0a		 jle	 SHORT $LN8@MLS_SkillM@3

; 3075 : 	{
; 3076 : 		addcriticaldamagevalue = g_SkillAdditionInfo.m_CriticalDamageEffectMax;

  06896	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  0689d	89 45 a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
$LN8@MLS_SkillM@3:

; 3077 : 	}
; 3078 : 	
; 3079 : 	float fSkillValue = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  068a0	6a 01		 push	 1
  068a2	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  068a5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  068a8	51		 push	 ecx
  068a9	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  068ac	52		 push	 edx
  068ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  068b0	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  068b5	d9 5d a4	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 3080 : 	int SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeStart + (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageTimeDiv + fSkillValue;

  068b8	0f b7 0d aa 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3242
  068bf	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  068c2	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  068c9	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  068cc	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  068d3	03 c2		 add	 eax, edx
  068d5	0f b7 35 ac 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3244
  068dc	99		 cdq
  068dd	f7 fe		 idiv	 esi
  068df	03 c8		 add	 ecx, eax
  068e1	89 8d 54 ff ff
	ff		 mov	 DWORD PTR tv297[ebp], ecx
  068e7	db 85 54 ff ff
	ff		 fild	 DWORD PTR tv297[ebp]
  068ed	d8 45 a4	 fadd	 DWORD PTR _fSkillValue$[ebp]
  068f0	e8 00 00 00 00	 call	 __ftol2_sse
  068f5	89 45 a0	 mov	 DWORD PTR _SkillTime$[ebp], eax

; 3081 : 
; 3082 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  068f8	83 3d b0 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248, 0
  068ff	76 13		 jbe	 SHORT $LN7@MLS_SkillM@3
  06901	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06904	3b 05 b0 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  0690a	76 08		 jbe	 SHORT $LN7@MLS_SkillM@3

; 3083 : 	{
; 3084 : 		SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeMax;

  0690c	a1 b0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  06911	89 45 a0	 mov	 DWORD PTR _SkillTime$[ebp], eax
$LN7@MLS_SkillM@3:

; 3085 : 	}
; 3086 : 
; 3087 : 	float fRate = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  06914	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  06917	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0691b	51		 push	 ecx
  0691c	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0691f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  06922	50		 push	 eax
  06923	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  06928	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0692d	50		 push	 eax
  0692e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  06931	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  06936	d9 5d 9c	 fstp	 DWORD PTR _fRate$[ebp]

; 3088 : 
; 3089 : 	if( partynum == -1 )

  06939	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  0693d	75 67		 jne	 SHORT $LN6@MLS_SkillM@3

; 3090 : 	{
; 3091 : 		gObjApplyBuffEffectDuration(lpObj,148,17,addcriticaldamagevalue,55,fRate,SkillTime);

  0693f	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06942	50		 push	 eax
  06943	d9 45 9c	 fld	 DWORD PTR _fRate$[ebp]
  06946	e8 00 00 00 00	 call	 __ftol2_sse
  0694b	50		 push	 eax
  0694c	6a 37		 push	 55			; 00000037H
  0694e	8b 4d a8	 mov	 ecx, DWORD PTR _addcriticaldamagevalue$[ebp]
  06951	51		 push	 ecx
  06952	6a 11		 push	 17			; 00000011H
  06954	68 94 00 00 00	 push	 148			; 00000094H
  06959	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0695c	52		 push	 edx
  0695d	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  06962	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3092 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  06965	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06968	50		 push	 eax
  06969	68 d8 04 00 00	 push	 1240			; 000004d8H
  0696e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  06973	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  06978	50		 push	 eax
  06979	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0697c	51		 push	 ecx
  0697d	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  06982	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3093 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  06985	6a 01		 push	 1
  06987	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0698a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0698c	51		 push	 ecx
  0698d	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06990	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  06994	50		 push	 eax
  06995	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06998	51		 push	 ecx
  06999	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0699e	83 c4 10	 add	 esp, 16			; 00000010H

; 3094 : 	}
; 3095 : 	else

  069a1	e9 a5 00 00 00	 jmp	 $LN2@MLS_SkillM@3
$LN6@MLS_SkillM@3:

; 3096 : 	{
; 3097 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  069a6	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _n$235450[ebp], 0
  069ad	eb 09		 jmp	 SHORT $LN4@MLS_SkillM@3
$LN3@MLS_SkillM@3:
  069af	8b 45 98	 mov	 eax, DWORD PTR _n$235450[ebp]
  069b2	83 c0 01	 add	 eax, 1
  069b5	89 45 98	 mov	 DWORD PTR _n$235450[ebp], eax
$LN4@MLS_SkillM@3:
  069b8	83 7d 98 0a	 cmp	 DWORD PTR _n$235450[ebp], 10 ; 0000000aH
  069bc	0f 8d 89 00 00
	00		 jge	 $LN2@MLS_SkillM@3

; 3098 : 		{
; 3099 : 			if( ApplyPartyIndex[n] != -1 )

  069c2	8b 45 98	 mov	 eax, DWORD PTR _n$235450[ebp]
  069c5	83 7c 85 b4 ff	 cmp	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], -1
  069ca	74 7a		 je	 SHORT $LN1@MLS_SkillM@3

; 3100 : 			{
; 3101 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  069cc	8b 45 98	 mov	 eax, DWORD PTR _n$235450[ebp]
  069cf	8b 4c 85 b4	 mov	 ecx, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  069d3	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  069d9	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  069df	89 4d b0	 mov	 DWORD PTR _lpPartyObj$[ebp], ecx

; 3102 : 
; 3103 : 				gObjApplyBuffEffectDuration(lpPartyObj,148,17,addcriticaldamagevalue,55,fRate,SkillTime);

  069e2	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  069e5	50		 push	 eax
  069e6	d9 45 9c	 fld	 DWORD PTR _fRate$[ebp]
  069e9	e8 00 00 00 00	 call	 __ftol2_sse
  069ee	50		 push	 eax
  069ef	6a 37		 push	 55			; 00000037H
  069f1	8b 4d a8	 mov	 ecx, DWORD PTR _addcriticaldamagevalue$[ebp]
  069f4	51		 push	 ecx
  069f5	6a 11		 push	 17			; 00000011H
  069f7	68 94 00 00 00	 push	 148			; 00000094H
  069fc	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  069ff	52		 push	 edx
  06a00	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  06a05	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3104 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  06a08	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06a0b	50		 push	 eax
  06a0c	68 d8 04 00 00	 push	 1240			; 000004d8H
  06a11	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  06a16	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  06a1b	50		 push	 eax
  06a1c	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  06a1f	8b 11		 mov	 edx, DWORD PTR [ecx]
  06a21	52		 push	 edx
  06a22	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  06a27	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3105 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  06a2a	6a 01		 push	 1
  06a2c	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  06a2f	8b 08		 mov	 ecx, DWORD PTR [eax]
  06a31	51		 push	 ecx
  06a32	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06a35	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  06a39	50		 push	 eax
  06a3a	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06a3d	51		 push	 ecx
  06a3e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  06a43	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillM@3:

; 3106 : 			}
; 3107 : 		}

  06a46	e9 64 ff ff ff	 jmp	 $LN3@MLS_SkillM@3
$LN2@MLS_SkillM@3:
$LN18@MLS_SkillM@3:

; 3108 : 	}
; 3109 : }

  06a4b	5f		 pop	 edi
  06a4c	5e		 pop	 esi
  06a4d	5b		 pop	 ebx
  06a4e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  06a51	33 cd		 xor	 ecx, ebp
  06a53	e8 00 00 00 00	 call	 @__security_check_cookie@4
  06a58	8b e5		 mov	 esp, ebp
  06a5a	5d		 pop	 ebp
  06a5b	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv319 = -176						; size = 4
_n$235489 = -108					; size = 4
_fExcRate$ = -104					; size = 4
_fRate$ = -100						; size = 4
_SkillTime$ = -96					; size = 4
_fSkillValue$ = -92					; size = 4
_addcriticaldamagevalue$ = -88				; size = 4
_n$235473 = -84						; size = 4
_lpPartyObj$ = -80					; size = 4
_ApplyPartyIndex$ = -76					; size = 40
_dis$ = -36						; size = 4
_partycount$ = -32					; size = 4
_totallevel$ = -28					; size = 4
_partynum$ = -24					; size = 4
_number$ = -20						; size = 4
_lpObj$ = -16						; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage
; _this$ = ecx

; 3112 : {

  06a60	55		 push	 ebp
  06a61	8b ec		 mov	 ebp, esp
  06a63	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  06a69	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  06a6e	33 c5		 xor	 eax, ebp
  06a70	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  06a73	53		 push	 ebx
  06a74	56		 push	 esi
  06a75	57		 push	 edi
  06a76	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3113 : 	int skillSuccess = TRUE;

  06a79	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 3114 : 	LPOBJ lpObj = &gObj[aIndex];

  06a80	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  06a83	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06a89	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06a8f	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 3115 : 
; 3116 : 	if( lpObj->Type != OBJ_USER &&
; 3117 : 		lpObj->m_RecallMon == -1 )

  06a92	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06a95	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  06a99	83 f9 01	 cmp	 ecx, 1
  06a9c	74 11		 je	 SHORT $LN17@MLS_SkillF@2
  06a9e	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06aa1	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  06aa8	75 05		 jne	 SHORT $LN17@MLS_SkillF@2

; 3118 : 		return;

  06aaa	e9 72 03 00 00	 jmp	 $LN18@MLS_SkillF@2
$LN17@MLS_SkillF@2:

; 3119 : 
; 3120 : 	if( lpObj->Class != CLASS_DARKLORD )

  06aaf	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06ab2	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  06ab9	83 f9 04	 cmp	 ecx, 4
  06abc	74 05		 je	 SHORT $LN16@MLS_SkillF@2

; 3121 : 		return;

  06abe	e9 5e 03 00 00	 jmp	 $LN18@MLS_SkillF@2
$LN16@MLS_SkillF@2:

; 3122 : 
; 3123 : 	int number;
; 3124 : 	int partynum = 0;

  06ac3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _partynum$[ebp], 0

; 3125 : 	int totallevel = 0;

  06aca	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _totallevel$[ebp], 0

; 3126 : 	int partycount;
; 3127 : 	int dis;
; 3128 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 3129 : 	LPOBJ lpPartyObj;
; 3130 : 
; 3131 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  06ad1	6a 28		 push	 40			; 00000028H
  06ad3	6a ff		 push	 -1
  06ad5	8d 45 b4	 lea	 eax, DWORD PTR _ApplyPartyIndex$[ebp]
  06ad8	50		 push	 eax
  06ad9	e8 00 00 00 00	 call	 _memset
  06ade	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3132 : 
; 3133 : 	partynum = lpObj->PartyNumber;

  06ae1	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06ae4	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  06aea	89 4d e8	 mov	 DWORD PTR _partynum$[ebp], ecx

; 3134 : 
; 3135 : 	if( partynum != -1 )

  06aed	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  06af1	0f 84 91 00 00
	00		 je	 $LN12@MLS_SkillF@2

; 3136 : 	{
; 3137 : 		partycount = gParty.m_PartyS[partynum].Count;

  06af7	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  06afa	6b c0 6c	 imul	 eax, 108		; 0000006cH
  06afd	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  06b03	89 4d e0	 mov	 DWORD PTR _partycount$[ebp], ecx

; 3138 : 
; 3139 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  06b06	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _n$235473[ebp], 0
  06b0d	eb 09		 jmp	 SHORT $LN14@MLS_SkillF@2
$LN13@MLS_SkillF@2:
  06b0f	8b 45 ac	 mov	 eax, DWORD PTR _n$235473[ebp]
  06b12	83 c0 01	 add	 eax, 1
  06b15	89 45 ac	 mov	 DWORD PTR _n$235473[ebp], eax
$LN14@MLS_SkillF@2:
  06b18	83 7d ac 0a	 cmp	 DWORD PTR _n$235473[ebp], 10 ; 0000000aH
  06b1c	7d 6a		 jge	 SHORT $LN12@MLS_SkillF@2

; 3140 : 		{
; 3141 : 			number = gParty.m_PartyS[partynum].Number[n];

  06b1e	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  06b21	6b c0 6c	 imul	 eax, 108		; 0000006cH
  06b24	8b 4d ac	 mov	 ecx, DWORD PTR _n$235473[ebp]
  06b27	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  06b2e	89 55 ec	 mov	 DWORD PTR _number$[ebp], edx

; 3142 : 
; 3143 : 			if( number >= 0 )

  06b31	83 7d ec 00	 cmp	 DWORD PTR _number$[ebp], 0
  06b35	7c 4f		 jl	 SHORT $LN9@MLS_SkillF@2

; 3144 : 			{
; 3145 : 				lpPartyObj = &gObj[number];

  06b37	8b 45 ec	 mov	 eax, DWORD PTR _number$[ebp]
  06b3a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06b40	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06b46	89 45 b0	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 3146 : 
; 3147 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  06b49	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06b4c	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  06b53	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  06b56	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  06b5d	3b c8		 cmp	 ecx, eax
  06b5f	75 25		 jne	 SHORT $LN9@MLS_SkillF@2

; 3148 : 				{
; 3149 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  06b61	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  06b64	50		 push	 eax
  06b65	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06b68	51		 push	 ecx
  06b69	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  06b6e	83 c4 08	 add	 esp, 8
  06b71	89 45 dc	 mov	 DWORD PTR _dis$[ebp], eax

; 3150 : 
; 3151 : 					if( dis < 10 )

  06b74	83 7d dc 0a	 cmp	 DWORD PTR _dis$[ebp], 10 ; 0000000aH
  06b78	7d 0c		 jge	 SHORT $LN9@MLS_SkillF@2

; 3152 : 					{
; 3153 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  06b7a	8b 45 ac	 mov	 eax, DWORD PTR _n$235473[ebp]
  06b7d	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  06b80	8b 11		 mov	 edx, DWORD PTR [ecx]
  06b82	89 54 85 b4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], edx
$LN9@MLS_SkillF@2:

; 3154 : 					}
; 3155 : 				}
; 3156 : 			}
; 3157 : 		}

  06b86	eb 87		 jmp	 SHORT $LN13@MLS_SkillF@2
$LN12@MLS_SkillF@2:

; 3158 : 	}
; 3159 : 
; 3160 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv2 + (lpObj->Leadership+lpObj->AddLeadership)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv1;

  06b88	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06b8b	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  06b92	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06b95	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  06b9c	03 c2		 add	 eax, edx
  06b9e	0f b7 0d a6 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3238
  06ba5	99		 cdq
  06ba6	f7 f9		 idiv	 ecx
  06ba8	8b c8		 mov	 ecx, eax
  06baa	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06bad	0f b7 82 18 01
	00 00		 movzx	 eax, WORD PTR [edx+280]
  06bb4	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06bb7	0f b7 92 1a 01
	00 00		 movzx	 edx, WORD PTR [edx+282]
  06bbe	03 c2		 add	 eax, edx
  06bc0	0f b7 35 a4 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3236
  06bc7	99		 cdq
  06bc8	f7 fe		 idiv	 esi
  06bca	03 c8		 add	 ecx, eax
  06bcc	89 4d a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx

; 3161 : 	addcriticaldamagevalue += this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,3);

  06bcf	6a 03		 push	 3
  06bd1	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  06bd4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  06bd7	51		 push	 ecx
  06bd8	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06bdb	52		 push	 edx
  06bdc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  06bdf	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  06be4	da 45 a8	 fiadd	 DWORD PTR _addcriticaldamagevalue$[ebp]
  06be7	e8 00 00 00 00	 call	 __ftol2_sse
  06bec	89 45 a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax

; 3162 : 	
; 3163 : 	if( g_SkillAdditionInfo.m_CriticalDamageEffectMax > 0 && addcriticaldamagevalue > g_SkillAdditionInfo.m_CriticalDamageEffectMax )

  06bef	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  06bf6	85 c0		 test	 eax, eax
  06bf8	7e 16		 jle	 SHORT $LN8@MLS_SkillF@2
  06bfa	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  06c01	39 45 a8	 cmp	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
  06c04	7e 0a		 jle	 SHORT $LN8@MLS_SkillF@2

; 3164 : 	{
; 3165 : 		addcriticaldamagevalue = g_SkillAdditionInfo.m_CriticalDamageEffectMax;

  06c06	0f b7 05 a8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  06c0d	89 45 a8	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
$LN8@MLS_SkillF@2:

; 3166 : 	}
; 3167 : 	
; 3168 : 	float fSkillValue = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  06c10	6a 02		 push	 2
  06c12	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  06c15	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  06c18	51		 push	 ecx
  06c19	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06c1c	52		 push	 edx
  06c1d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  06c20	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  06c25	d9 5d a4	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 3169 : 	int SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeStart + (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageTimeDiv + fSkillValue;

  06c28	0f b7 0d aa 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3242
  06c2f	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06c32	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  06c39	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06c3c	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  06c43	03 c2		 add	 eax, edx
  06c45	0f b7 35 ac 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3244
  06c4c	99		 cdq
  06c4d	f7 fe		 idiv	 esi
  06c4f	03 c8		 add	 ecx, eax
  06c51	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv319[ebp], ecx
  06c57	db 85 50 ff ff
	ff		 fild	 DWORD PTR tv319[ebp]
  06c5d	d8 45 a4	 fadd	 DWORD PTR _fSkillValue$[ebp]
  06c60	e8 00 00 00 00	 call	 __ftol2_sse
  06c65	89 45 a0	 mov	 DWORD PTR _SkillTime$[ebp], eax

; 3170 : 
; 3171 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  06c68	83 3d b0 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248, 0
  06c6f	76 13		 jbe	 SHORT $LN7@MLS_SkillF@2
  06c71	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06c74	3b 05 b0 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  06c7a	76 08		 jbe	 SHORT $LN7@MLS_SkillF@2

; 3172 : 	{
; 3173 : 		SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeMax;

  06c7c	a1 b0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  06c81	89 45 a0	 mov	 DWORD PTR _SkillTime$[ebp], eax
$LN7@MLS_SkillF@2:

; 3174 : 	}
; 3175 : 
; 3176 : 	float fRate = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  06c84	6a 01		 push	 1
  06c86	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  06c89	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  06c8c	51		 push	 ecx
  06c8d	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06c90	52		 push	 edx
  06c91	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  06c94	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  06c99	d9 5d 9c	 fstp	 DWORD PTR _fRate$[ebp]

; 3177 : 	float fExcRate = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  06c9c	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  06c9f	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  06ca3	51		 push	 ecx
  06ca4	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06ca7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  06caa	50		 push	 eax
  06cab	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  06cb0	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  06cb5	50		 push	 eax
  06cb6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  06cb9	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  06cbe	d9 5d 98	 fstp	 DWORD PTR _fExcRate$[ebp]

; 3178 : 
; 3179 : 	if( partynum == -1 )

  06cc1	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  06cc5	0f 85 8a 00 00
	00		 jne	 $LN6@MLS_SkillF@2

; 3180 : 	{
; 3181 : 		gObjApplyBuffEffectDuration(lpObj,149,17,addcriticaldamagevalue,55,fRate,SkillTime);

  06ccb	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06cce	50		 push	 eax
  06ccf	d9 45 9c	 fld	 DWORD PTR _fRate$[ebp]
  06cd2	e8 00 00 00 00	 call	 __ftol2_sse
  06cd7	50		 push	 eax
  06cd8	6a 37		 push	 55			; 00000037H
  06cda	8b 4d a8	 mov	 ecx, DWORD PTR _addcriticaldamagevalue$[ebp]
  06cdd	51		 push	 ecx
  06cde	6a 11		 push	 17			; 00000011H
  06ce0	68 95 00 00 00	 push	 149			; 00000095H
  06ce5	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  06ce8	52		 push	 edx
  06ce9	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  06cee	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3182 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  06cf1	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06cf4	50		 push	 eax
  06cf5	68 d8 04 00 00	 push	 1240			; 000004d8H
  06cfa	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  06cff	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  06d04	50		 push	 eax
  06d05	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  06d08	51		 push	 ecx
  06d09	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  06d0e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3183 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  06d11	6a 01		 push	 1
  06d13	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06d16	8b 08		 mov	 ecx, DWORD PTR [eax]
  06d18	51		 push	 ecx
  06d19	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06d1c	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  06d20	50		 push	 eax
  06d21	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06d24	51		 push	 ecx
  06d25	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  06d2a	83 c4 10	 add	 esp, 16			; 00000010H

; 3184 : 		lpObj->m_MPSkillOpt.MpsCritBuffExcDamage += fExcRate;

  06d2d	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06d30	d9 80 88 27 00
	00		 fld	 DWORD PTR [eax+10120]
  06d36	d8 45 98	 fadd	 DWORD PTR _fExcRate$[ebp]
  06d39	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06d3c	d9 99 88 27 00
	00		 fstp	 DWORD PTR [ecx+10120]

; 3185 : 		gObjCalCharacter(lpObj->m_Index);

  06d42	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06d45	8b 08		 mov	 ecx, DWORD PTR [eax]
  06d47	51		 push	 ecx
  06d48	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  06d4d	83 c4 04	 add	 esp, 4

; 3186 : 	}
; 3187 : 	else

  06d50	e9 cc 00 00 00	 jmp	 $LN2@MLS_SkillF@2
$LN6@MLS_SkillF@2:

; 3188 : 	{
; 3189 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  06d55	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _n$235489[ebp], 0
  06d5c	eb 09		 jmp	 SHORT $LN4@MLS_SkillF@2
$LN3@MLS_SkillF@2:
  06d5e	8b 45 94	 mov	 eax, DWORD PTR _n$235489[ebp]
  06d61	83 c0 01	 add	 eax, 1
  06d64	89 45 94	 mov	 DWORD PTR _n$235489[ebp], eax
$LN4@MLS_SkillF@2:
  06d67	83 7d 94 0a	 cmp	 DWORD PTR _n$235489[ebp], 10 ; 0000000aH
  06d6b	0f 8d b0 00 00
	00		 jge	 $LN2@MLS_SkillF@2

; 3190 : 		{
; 3191 : 			if( ApplyPartyIndex[n] != -1 )

  06d71	8b 45 94	 mov	 eax, DWORD PTR _n$235489[ebp]
  06d74	83 7c 85 b4 ff	 cmp	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], -1
  06d79	0f 84 9d 00 00
	00		 je	 $LN1@MLS_SkillF@2

; 3192 : 			{
; 3193 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  06d7f	8b 45 94	 mov	 eax, DWORD PTR _n$235489[ebp]
  06d82	8b 4c 85 b4	 mov	 ecx, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  06d86	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  06d8c	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06d92	89 4d b0	 mov	 DWORD PTR _lpPartyObj$[ebp], ecx

; 3194 : 
; 3195 : 				gObjApplyBuffEffectDuration(lpPartyObj,149,17,addcriticaldamagevalue,55,fRate,SkillTime);

  06d95	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06d98	50		 push	 eax
  06d99	d9 45 9c	 fld	 DWORD PTR _fRate$[ebp]
  06d9c	e8 00 00 00 00	 call	 __ftol2_sse
  06da1	50		 push	 eax
  06da2	6a 37		 push	 55			; 00000037H
  06da4	8b 4d a8	 mov	 ecx, DWORD PTR _addcriticaldamagevalue$[ebp]
  06da7	51		 push	 ecx
  06da8	6a 11		 push	 17			; 00000011H
  06daa	68 95 00 00 00	 push	 149			; 00000095H
  06daf	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  06db2	52		 push	 edx
  06db3	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  06db8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3196 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  06dbb	8b 45 a0	 mov	 eax, DWORD PTR _SkillTime$[ebp]
  06dbe	50		 push	 eax
  06dbf	68 d8 04 00 00	 push	 1240			; 000004d8H
  06dc4	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  06dc9	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  06dce	50		 push	 eax
  06dcf	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  06dd2	8b 11		 mov	 edx, DWORD PTR [ecx]
  06dd4	52		 push	 edx
  06dd5	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  06dda	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3197 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  06ddd	6a 01		 push	 1
  06ddf	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  06de2	8b 08		 mov	 ecx, DWORD PTR [eax]
  06de4	51		 push	 ecx
  06de5	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06de8	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  06dec	50		 push	 eax
  06ded	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06df0	51		 push	 ecx
  06df1	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  06df6	83 c4 10	 add	 esp, 16			; 00000010H

; 3198 : 				lpPartyObj->m_MPSkillOpt.MpsCritBuffExcDamage += fExcRate;

  06df9	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  06dfc	d9 80 88 27 00
	00		 fld	 DWORD PTR [eax+10120]
  06e02	d8 45 98	 fadd	 DWORD PTR _fExcRate$[ebp]
  06e05	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  06e08	d9 99 88 27 00
	00		 fstp	 DWORD PTR [ecx+10120]

; 3199 : 				gObjCalCharacter(lpPartyObj->m_Index);

  06e0e	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  06e11	8b 08		 mov	 ecx, DWORD PTR [eax]
  06e13	51		 push	 ecx
  06e14	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  06e19	83 c4 04	 add	 esp, 4
$LN1@MLS_SkillF@2:

; 3200 : 			}
; 3201 : 		}

  06e1c	e9 3d ff ff ff	 jmp	 $LN3@MLS_SkillF@2
$LN2@MLS_SkillF@2:
$LN18@MLS_SkillF@2:

; 3202 : 	}
; 3203 : }

  06e21	5f		 pop	 edi
  06e22	5e		 pop	 esi
  06e23	5b		 pop	 ebx
  06e24	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  06e27	33 cd		 xor	 ecx, ebp
  06e29	e8 00 00 00 00	 call	 @__security_check_cookie@4
  06e2e	8b e5		 mov	 esp, ebp
  06e30	5d		 pop	 ebp
  06e31	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage
; Function compile flags: /Odtp /ZI
_CallMonIndex$235521 = -32				; size = 4
_EnableAttack$ = -28					; size = 4
_DuelIndex$ = -24					; size = 4
_bAttack$ = -20						; size = 4
_HitCount$ = -16					; size = 4
_count$ = -12						; size = 4
_tObjNum$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack
; _this$ = ecx

; 3206 : {

  06e40	55		 push	 ebp
  06e41	8b ec		 mov	 ebp, esp
  06e43	83 ec 60	 sub	 esp, 96			; 00000060H
  06e46	53		 push	 ebx
  06e47	56		 push	 esi
  06e48	57		 push	 edi
  06e49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3207 : 	int tObjNum;
; 3208 : 	int count = 0;

  06e4c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3209 : 	int HitCount = 0;

  06e53	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 3210 : 	int bAttack;
; 3211 : 	int DuelIndex = lpObj->m_iDuelUser;

  06e5a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06e5d	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  06e63	89 4d e8	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 3212 : 	int EnableAttack;
; 3213 : 
; 3214 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,1);

  06e66	6a 01		 push	 1
  06e68	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06e6b	8b 08		 mov	 ecx, DWORD PTR [eax]
  06e6d	51		 push	 ecx
  06e6e	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  06e71	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  06e75	50		 push	 eax
  06e76	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06e79	51		 push	 ecx
  06e7a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  06e7f	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@MLS_DarkHo:

; 3215 : 
; 3216 : 	while ( true )

  06e82	b8 01 00 00 00	 mov	 eax, 1
  06e87	85 c0		 test	 eax, eax
  06e89	0f 84 a1 02 00
	00		 je	 $LN23@MLS_DarkHo

; 3217 : 	{
; 3218 : 		if(lpObj->VpPlayer2[count].state != 0)

  06e8f	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  06e92	6b c0 0c	 imul	 eax, 12			; 0000000cH
  06e95	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06e98	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  06ea0	85 d2		 test	 edx, edx
  06ea2	0f 84 72 02 00
	00		 je	 $LN22@MLS_DarkHo

; 3219 : 		{
; 3220 : 			tObjNum = lpObj->VpPlayer2[count].number;

  06ea8	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  06eab	6b c0 0c	 imul	 eax, 12			; 0000000cH
  06eae	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06eb1	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  06eb9	89 55 f8	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 3221 : 
; 3222 : 			if(tObjNum >= 0)

  06ebc	83 7d f8 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  06ec0	0f 8c 54 02 00
	00		 jl	 $LN22@MLS_DarkHo

; 3223 : 			{
; 3224 : 				EnableAttack = 0;

  06ec6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 3225 : 				if( (gObj[tObjNum].Class < 100 || gObj[tObjNum].Class > 110) && gObj[tObjNum].Class != 523 )

  06ecd	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  06ed0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06ed6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06edc	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  06ee4	83 fa 64	 cmp	 edx, 100		; 00000064H
  06ee7	7c 20		 jl	 SHORT $LN19@MLS_DarkHo
  06ee9	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  06eec	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06ef2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06ef8	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  06f00	83 fa 6e	 cmp	 edx, 110		; 0000006eH
  06f03	0f 8e 11 02 00
	00		 jle	 $LN22@MLS_DarkHo
$LN19@MLS_DarkHo:
  06f09	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  06f0c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06f12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06f18	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  06f20	81 fa 0b 02 00
	00		 cmp	 edx, 523		; 0000020bH
  06f26	0f 84 ee 01 00
	00		 je	 $LN22@MLS_DarkHo

; 3226 : 				{
; 3227 : 	
; 3228 : 					if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  06f2c	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  06f2f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  06f32	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06f35	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  06f3d	83 fa 02	 cmp	 edx, 2
  06f40	75 25		 jne	 SHORT $LN18@MLS_DarkHo
  06f42	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  06f45	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06f4b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06f51	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  06f59	7d 0c		 jge	 SHORT $LN18@MLS_DarkHo

; 3229 : 					{
; 3230 : 						EnableAttack = 1;

  06f5b	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  06f62	e9 23 01 00 00	 jmp	 $LN17@MLS_DarkHo
$LN18@MLS_DarkHo:

; 3231 : 					}
; 3232 : 					else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  06f67	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  06f6a	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  06f6d	74 08		 je	 SHORT $LN15@MLS_DarkHo
  06f6f	8b 45 e8	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  06f72	3b 45 f8	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  06f75	75 0c		 jne	 SHORT $LN16@MLS_DarkHo
$LN15@MLS_DarkHo:

; 3233 : 					{
; 3234 : 						EnableAttack = 1;

  06f77	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  06f7e	e9 07 01 00 00	 jmp	 $LN17@MLS_DarkHo
$LN16@MLS_DarkHo:

; 3235 : 					}
; 3236 : 					else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  06f83	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  06f86	6b c0 0c	 imul	 eax, 12			; 0000000cH
  06f89	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  06f8c	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  06f94	83 fa 03	 cmp	 edx, 3
  06f97	74 5b		 je	 SHORT $LN13@MLS_DarkHo
  06f99	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  06f9c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06fa2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06fa8	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  06fb0	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  06fb3	75 3f		 jne	 SHORT $LN13@MLS_DarkHo
  06fb5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  06fba	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  06fbf	83 f8 07	 cmp	 eax, 7
  06fc2	75 30		 jne	 SHORT $LN13@MLS_DarkHo

; 3237 : 					{
; 3238 : 						if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  06fc4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  06fc7	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  06fce	8b 55 f8	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  06fd1	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  06fd7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  06fdc	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  06fe4	3b ca		 cmp	 ecx, edx
  06fe6	74 07		 je	 SHORT $LN12@MLS_DarkHo

; 3239 : 							EnableAttack = 1;

  06fe8	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN12@MLS_DarkHo:

; 3240 : 					}
; 3241 : 					else

  06fef	e9 96 00 00 00	 jmp	 $LN17@MLS_DarkHo
$LN13@MLS_DarkHo:

; 3242 : 					{
; 3243 : 						int CallMonIndex = gObj[tObjNum].m_Index;

  06ff4	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  06ff7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  06ffd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07003	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  07006	89 55 e0	 mov	 DWORD PTR _CallMonIndex$235521[ebp], edx

; 3244 : 	
; 3245 : 						if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  07009	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0700c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07018	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0701d	83 fa 02	 cmp	 edx, 2
  07020	75 40		 jne	 SHORT $LN10@MLS_DarkHo
  07022	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07025	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0702b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07031	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  07039	7c 27		 jl	 SHORT $LN10@MLS_DarkHo

; 3246 : 						{
; 3247 : 							CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0703b	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0703e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0704a	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  07051	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  07057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0705c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0705f	89 4d e0	 mov	 DWORD PTR _CallMonIndex$235521[ebp], ecx
$LN10@MLS_DarkHo:

; 3248 : 						}
; 3249 : 	
; 3250 : 						if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  07062	8b 45 e0	 mov	 eax, DWORD PTR _CallMonIndex$235521[ebp]
  07065	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0706b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07071	50		 push	 eax
  07072	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07075	51		 push	 ecx
  07076	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0707b	83 c4 08	 add	 esp, 8
  0707e	83 f8 01	 cmp	 eax, 1
  07081	75 07		 jne	 SHORT $LN17@MLS_DarkHo

; 3251 : 						{
; 3252 : 							EnableAttack = 1;

  07083	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN17@MLS_DarkHo:

; 3253 : 						}
; 3254 : 					}
; 3255 : 	
; 3256 : 					if(EnableAttack != 0)

  0708a	83 7d e4 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0708e	0f 84 86 00 00
	00		 je	 $LN22@MLS_DarkHo

; 3257 : 					{
; 3258 : 						if(gObjCalDistance(lpObj,&gObj[tObjNum]) < 5)

  07094	8b 45 f8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07097	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0709d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  070a3	50		 push	 eax
  070a4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  070a7	51		 push	 ecx
  070a8	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  070ad	83 c4 08	 add	 esp, 8
  070b0	83 f8 05	 cmp	 eax, 5
  070b3	7d 65		 jge	 SHORT $LN22@MLS_DarkHo

; 3259 : 						{
; 3260 : 							bAttack = 0;

  070b5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 3261 : 	
; 3262 : 							if(HitCount > 15)

  070bc	83 7d f0 0f	 cmp	 DWORD PTR _HitCount$[ebp], 15 ; 0000000fH
  070c0	7e 07		 jle	 SHORT $LN6@MLS_DarkHo

; 3263 : 							{
; 3264 : 								bAttack = 0;

  070c2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN6@MLS_DarkHo:

; 3265 : 							}
; 3266 : 	
; 3267 : 							if(HitCount >= 10)

  070c9	83 7d f0 0a	 cmp	 DWORD PTR _HitCount$[ebp], 10 ; 0000000aH
  070cd	7c 1e		 jl	 SHORT $LN5@MLS_DarkHo

; 3268 : 							{
; 3269 : 								if(rand()%2)

  070cf	e8 00 00 00 00	 call	 _rand
  070d4	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  070d9	79 05		 jns	 SHORT $LN27@MLS_DarkHo
  070db	48		 dec	 eax
  070dc	83 c8 fe	 or	 eax, -2			; fffffffeH
  070df	40		 inc	 eax
$LN27@MLS_DarkHo:
  070e0	85 c0		 test	 eax, eax
  070e2	74 07		 je	 SHORT $LN4@MLS_DarkHo

; 3270 : 								{
; 3271 : 									bAttack = 1;

  070e4	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN4@MLS_DarkHo:

; 3272 : 								}
; 3273 : 							}
; 3274 : 							else

  070eb	eb 07		 jmp	 SHORT $LN3@MLS_DarkHo
$LN5@MLS_DarkHo:

; 3275 : 							{
; 3276 : 								bAttack = 1;

  070ed	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN3@MLS_DarkHo:

; 3277 : 							}
; 3278 : 	
; 3279 : 							if(bAttack != 0)

  070f4	83 7d ec 00	 cmp	 DWORD PTR _bAttack$[ebp], 0
  070f8	74 20		 je	 SHORT $LN22@MLS_DarkHo

; 3280 : 							{
; 3281 : 								gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,500,lpMagic->m_Skill,0);

  070fa	6a 00		 push	 0
  070fc	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  070ff	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  07102	51		 push	 ecx
  07103	68 f4 01 00 00	 push	 500			; 000001f4H
  07108	8b 55 f8	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0710b	52		 push	 edx
  0710c	6a 32		 push	 50			; 00000032H
  0710e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07111	50		 push	 eax
  07112	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  07117	83 c4 18	 add	 esp, 24			; 00000018H
$LN22@MLS_DarkHo:

; 3282 : 							}
; 3283 : 						}
; 3284 : 					}
; 3285 : 				}
; 3286 : 			}
; 3287 : 		}
; 3288 : 	
; 3289 : 		count++;

  0711a	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  0711d	83 c0 01	 add	 eax, 1
  07120	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax

; 3290 : 		if(count > MAX_VIEWPORT -1)

  07123	83 7d f4 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  07127	7e 02		 jle	 SHORT $LN1@MLS_DarkHo

; 3291 : 		{
; 3292 : 			break;

  07129	eb 05		 jmp	 SHORT $LN23@MLS_DarkHo
$LN1@MLS_DarkHo:

; 3293 : 		}
; 3294 : 	}

  0712b	e9 52 fd ff ff	 jmp	 $LN24@MLS_DarkHo
$LN23@MLS_DarkHo:

; 3295 : return true;

  07130	b8 01 00 00 00	 mov	 eax, 1

; 3296 : }

  07135	5f		 pop	 edi
  07136	5e		 pop	 esi
  07137	5b		 pop	 ebx
  07138	8b e5		 mov	 esp, ebp
  0713a	5d		 pop	 ebp
  0713b	c2 0c 00	 ret	 12			; 0000000cH
?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack
; Function compile flags: /Odtp /ZI
_CallMonIndex$235560 = -44				; size = 4
_delaytime$ = -40					; size = 4
_EnableAttack$ = -36					; size = 4
_DuelIndex$ = -32					; size = 4
_attackcheck$ = -28					; size = 4
_loopcount$ = -24					; size = 4
_count$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_StartDis$ = -12					; size = 4
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_FireBurst
; _this$ = ecx

; 3299 : {

  07140	55		 push	 ebp
  07141	8b ec		 mov	 ebp, esp
  07143	83 ec 6c	 sub	 esp, 108		; 0000006cH
  07146	53		 push	 ebx
  07147	56		 push	 esi
  07148	57		 push	 edi
  07149	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3300 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0714c	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0714f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07155	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0715b	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 3301 : 	int StartDis = 1;

  0715e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _StartDis$[ebp], 1

; 3302 : 	int tObjNum;
; 3303 : 	int count = 0;

  07165	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3304 : 	int loopcount = 0;

  0716c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _loopcount$[ebp], 0

; 3305 : 
; 3306 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,1);

  07173	6a 01		 push	 1
  07175	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  07178	8b 08		 mov	 ecx, DWORD PTR [eax]
  0717a	51		 push	 ecx
  0717b	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0717e	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  07182	50		 push	 eax
  07183	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07186	51		 push	 ecx
  07187	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0718c	83 c4 10	 add	 esp, 16			; 00000010H

; 3307 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,0,0,0);

  0718f	6a 00		 push	 0
  07191	6a 00		 push	 0
  07193	6a 00		 push	 0
  07195	6a 00		 push	 0
  07197	6a 01		 push	 1
  07199	6a 00		 push	 0
  0719b	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0719e	50		 push	 eax
  0719f	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  071a2	51		 push	 ecx
  071a3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  071a6	52		 push	 edx
  071a7	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  071ac	83 c4 24	 add	 esp, 36			; 00000024H

; 3308 : 
; 3309 : 	int attackcheck;
; 3310 : 	int DuelIndex = lpObj->m_iDuelUser;

  071af	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  071b2	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  071b8	89 4d e0	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN21@MLS_FireBu:

; 3311 : 	int EnableAttack;
; 3312 : 	int delaytime;
; 3313 : 
; 3314 : 	while ( true )

  071bb	b8 01 00 00 00	 mov	 eax, 1
  071c0	85 c0		 test	 eax, eax
  071c2	0f 84 63 02 00
	00		 je	 $LN20@MLS_FireBu

; 3315 : 	{
; 3316 : 		if(lpObj->VpPlayer2[count].state != 0)

  071c8	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  071cb	6b c0 0c	 imul	 eax, 12			; 0000000cH
  071ce	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  071d1	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  071d9	85 d2		 test	 edx, edx
  071db	0f 84 34 02 00
	00		 je	 $LN19@MLS_FireBu

; 3317 : 		{
; 3318 : 			tObjNum = lpObj->VpPlayer2[count].number;

  071e1	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  071e4	6b c0 0c	 imul	 eax, 12			; 0000000cH
  071e7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  071ea	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  071f2	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 3319 : 
; 3320 : 			if(tObjNum >= 0 && aTargetIndex != tObjNum)

  071f5	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  071f9	0f 8c 16 02 00
	00		 jl	 $LN19@MLS_FireBu
  071ff	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  07202	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  07205	0f 84 0a 02 00
	00		 je	 $LN19@MLS_FireBu

; 3321 : 			{
; 3322 : 				EnableAttack = 0;

  0720b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 3323 : 
; 3324 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  07212	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  07215	6b c0 0c	 imul	 eax, 12			; 0000000cH
  07218	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0721b	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  07223	83 fa 02	 cmp	 edx, 2
  07226	75 25		 jne	 SHORT $LN17@MLS_FireBu
  07228	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0722b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07231	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07237	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0723f	7d 0c		 jge	 SHORT $LN17@MLS_FireBu

; 3325 : 				{
; 3326 : 					EnableAttack = 1;

  07241	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  07248	e9 25 01 00 00	 jmp	 $LN16@MLS_FireBu
$LN17@MLS_FireBu:

; 3327 : 				}
; 3328 : 				else if(tObjNum == lpTargetObj->m_Index || DuelIndex == tObjNum)

  0724d	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  07250	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  07253	3b 08		 cmp	 ecx, DWORD PTR [eax]
  07255	74 08		 je	 SHORT $LN14@MLS_FireBu
  07257	8b 45 e0	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0725a	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0725d	75 0c		 jne	 SHORT $LN15@MLS_FireBu
$LN14@MLS_FireBu:

; 3329 : 				{
; 3330 : 					EnableAttack = 1;

  0725f	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  07266	e9 07 01 00 00	 jmp	 $LN16@MLS_FireBu
$LN15@MLS_FireBu:

; 3331 : 				}
; 3332 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0726b	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0726e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  07271	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07274	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0727c	83 fa 03	 cmp	 edx, 3
  0727f	74 5b		 je	 SHORT $LN12@MLS_FireBu
  07281	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07284	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0728a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07290	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  07298	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0729b	75 3f		 jne	 SHORT $LN12@MLS_FireBu
  0729d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  072a2	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  072a7	83 f8 07	 cmp	 eax, 7
  072aa	75 30		 jne	 SHORT $LN12@MLS_FireBu

; 3333 : 				{
; 3334 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  072ac	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  072af	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  072b6	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  072b9	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  072bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  072c4	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  072cc	3b ca		 cmp	 ecx, edx
  072ce	74 07		 je	 SHORT $LN11@MLS_FireBu

; 3335 : 						EnableAttack = 1;

  072d0	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN11@MLS_FireBu:

; 3336 : 				}
; 3337 : 				else

  072d7	e9 96 00 00 00	 jmp	 $LN16@MLS_FireBu
$LN12@MLS_FireBu:

; 3338 : 				{
; 3339 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  072dc	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  072df	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  072e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  072eb	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  072ee	89 55 d4	 mov	 DWORD PTR _CallMonIndex$235560[ebp], edx

; 3340 : 
; 3341 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  072f1	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  072f4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  072fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07300	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  07305	83 fa 02	 cmp	 edx, 2
  07308	75 40		 jne	 SHORT $LN9@MLS_FireBu
  0730a	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0730d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07313	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07319	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  07321	7c 27		 jl	 SHORT $LN9@MLS_FireBu

; 3342 : 					{
; 3343 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  07323	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07326	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0732c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07332	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  07339	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0733f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07344	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  07347	89 4d d4	 mov	 DWORD PTR _CallMonIndex$235560[ebp], ecx
$LN9@MLS_FireBu:

; 3344 : 					}
; 3345 : 
; 3346 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0734a	8b 45 d4	 mov	 eax, DWORD PTR _CallMonIndex$235560[ebp]
  0734d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07353	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07359	50		 push	 eax
  0735a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0735d	51		 push	 ecx
  0735e	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  07363	83 c4 08	 add	 esp, 8
  07366	83 f8 01	 cmp	 eax, 1
  07369	75 07		 jne	 SHORT $LN16@MLS_FireBu

; 3347 : 					{
; 3348 : 						EnableAttack = 1;

  0736b	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN16@MLS_FireBu:

; 3349 : 					}
; 3350 : 				}
; 3351 : 
; 3352 : 				if(EnableAttack != 0)

  07372	83 7d dc 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  07376	0f 84 99 00 00
	00		 je	 $LN19@MLS_FireBu

; 3353 : 				{
; 3354 : 					attackcheck = 0;

  0737c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 0

; 3355 : 
; 3356 : 					if(loopcount == 0)

  07383	83 7d e8 00	 cmp	 DWORD PTR _loopcount$[ebp], 0
  07387	75 09		 jne	 SHORT $LN6@MLS_FireBu

; 3357 : 					{
; 3358 : 						attackcheck = 1;

  07389	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 1
  07390	eb 18		 jmp	 SHORT $LN5@MLS_FireBu
$LN6@MLS_FireBu:

; 3359 : 					}
; 3360 : 					else if(rand()%3==0)

  07392	e8 00 00 00 00	 call	 _rand
  07397	99		 cdq
  07398	b9 03 00 00 00	 mov	 ecx, 3
  0739d	f7 f9		 idiv	 ecx
  0739f	85 d2		 test	 edx, edx
  073a1	75 07		 jne	 SHORT $LN5@MLS_FireBu

; 3361 : 					{
; 3362 : 						attackcheck = 1;

  073a3	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 1
$LN5@MLS_FireBu:

; 3363 : 					}
; 3364 : 
; 3365 : 					if(attackcheck != 0)

  073aa	83 7d e4 00	 cmp	 DWORD PTR _attackcheck$[ebp], 0
  073ae	74 65		 je	 SHORT $LN19@MLS_FireBu

; 3366 : 					{
; 3367 : 						if(gObjCalDistance(&gObj[aTargetIndex],&gObj[tObjNum]) < 3)

  073b0	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  073b3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  073b9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  073bf	50		 push	 eax
  073c0	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  073c3	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  073c9	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  073cf	51		 push	 ecx
  073d0	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  073d5	83 c4 08	 add	 esp, 8
  073d8	83 f8 03	 cmp	 eax, 3
  073db	7d 38		 jge	 SHORT $LN19@MLS_FireBu

; 3368 : 						{
; 3369 : 							delaytime = (rand()*17)%300 + 500;

  073dd	e8 00 00 00 00	 call	 _rand
  073e2	6b c0 11	 imul	 eax, 17			; 00000011H
  073e5	99		 cdq
  073e6	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  073eb	f7 f9		 idiv	 ecx
  073ed	81 c2 f4 01 00
	00		 add	 edx, 500		; 000001f4H
  073f3	89 55 d8	 mov	 DWORD PTR _delaytime$[ebp], edx

; 3370 : 
; 3371 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,delaytime,lpMagic->m_Skill,0);

  073f6	6a 00		 push	 0
  073f8	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  073fb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  073fe	51		 push	 ecx
  073ff	8b 55 d8	 mov	 edx, DWORD PTR _delaytime$[ebp]
  07402	52		 push	 edx
  07403	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07406	50		 push	 eax
  07407	6a 32		 push	 50			; 00000032H
  07409	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0740c	51		 push	 ecx
  0740d	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  07412	83 c4 18	 add	 esp, 24			; 00000018H
$LN19@MLS_FireBu:

; 3372 : 						}
; 3373 : 					}
; 3374 : 				}
; 3375 : 			}
; 3376 : 		}
; 3377 : 
; 3378 : 		count++;

  07415	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  07418	83 c0 01	 add	 eax, 1
  0741b	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax

; 3379 : 		if(count > MAX_VIEWPORT -1)

  0741e	83 7d ec 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  07422	7e 02		 jle	 SHORT $LN1@MLS_FireBu

; 3380 : 		{
; 3381 : 			break;

  07424	eb 05		 jmp	 SHORT $LN20@MLS_FireBu
$LN1@MLS_FireBu:

; 3382 : 		}
; 3383 : 	}

  07426	e9 90 fd ff ff	 jmp	 $LN21@MLS_FireBu
$LN20@MLS_FireBu:

; 3384 : 	return true;

  0742b	b8 01 00 00 00	 mov	 eax, 1

; 3385 : }

  07430	5f		 pop	 edi
  07431	5e		 pop	 esi
  07432	5b		 pop	 ebx
  07433	8b e5		 mov	 esp, ebp
  07435	5d		 pop	 ebp
  07436	c2 0c 00	 ret	 12			; 0000000cH
?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_FireBurst
_TEXT	ENDS
PUBLIC	?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
EXTRN	?HitCheck@CSkillHitBox@@QAEHHHHHH@Z:PROC	; CSkillHitBox::HitCheck
EXTRN	?SkillSpearHitBox@@3VCSkillHitBox@@A:BYTE	; SkillSpearHitBox
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_CallMonIndex$235599 = -44				; size = 4
_EnableAttack$ = -40					; size = 4
_DuelIndex$ = -36					; size = 4
_attackcheck$ = -32					; size = 4
_loopcount$ = -28					; size = 4
_count$ = -24						; size = 4
_iangle$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_StartDis$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear
; _this$ = ecx

; 3388 : {

  07440	55		 push	 ebp
  07441	8b ec		 mov	 ebp, esp
  07443	83 ec 6c	 sub	 esp, 108		; 0000006cH
  07446	53		 push	 ebx
  07447	56		 push	 esi
  07448	57		 push	 edi
  07449	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3389 : 	LPOBJ lpObj = &gObj[aIndex];

  0744c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0744f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07455	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0745b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 3390 : 	int StartDis = 1;

  0745e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _StartDis$[ebp], 1

; 3391 : 	int tObjNum;
; 3392 : 
; 3393 : 	int iangle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  07465	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  07468	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0746e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07474	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0747c	52		 push	 edx
  0747d	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  07480	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07486	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0748c	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  07494	52		 push	 edx
  07495	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07498	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0749f	51		 push	 ecx
  074a0	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  074a3	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  074aa	50		 push	 eax
  074ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  074ae	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
  074b3	89 45 ec	 mov	 DWORD PTR _iangle$[ebp], eax

; 3394 : 	int count = 0;

  074b6	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3395 : 	int loopcount = 0;

  074bd	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _loopcount$[ebp], 0

; 3396 : 	int attackcheck;
; 3397 : 
; 3398 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  074c4	6a 01		 push	 1
  074c6	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  074c9	50		 push	 eax
  074ca	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  074cd	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  074d1	52		 push	 edx
  074d2	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  074d5	50		 push	 eax
  074d6	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  074db	83 c4 10	 add	 esp, 16			; 00000010H

; 3399 : 
; 3400 : 	if(lpObj->SkillLongSpearChange == 0)

  074de	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  074e1	0f b6 88 7a 12
	00 00		 movzx	 ecx, BYTE PTR [eax+4730]
  074e8	85 c9		 test	 ecx, ecx
  074ea	75 36		 jne	 SHORT $LN22@MLS_SkillS@18

; 3401 : 	{
; 3402 : 		gObjAttack(lpObj,&gObj[aTargetIndex],lpMagic,0,1,0,0,0,0);

  074ec	6a 00		 push	 0
  074ee	6a 00		 push	 0
  074f0	6a 00		 push	 0
  074f2	6a 00		 push	 0
  074f4	6a 01		 push	 1
  074f6	6a 00		 push	 0
  074f8	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  074fb	50		 push	 eax
  074fc	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  074ff	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  07505	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0750b	51		 push	 ecx
  0750c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0750f	52		 push	 edx
  07510	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  07515	83 c4 24	 add	 esp, 36			; 00000024H

; 3403 : 		return true;

  07518	b8 01 00 00 00	 mov	 eax, 1
  0751d	e9 96 02 00 00	 jmp	 $LN23@MLS_SkillS@18
$LN22@MLS_SkillS@18:

; 3404 : 	}
; 3405 : 
; 3406 : 	int DuelIndex = lpObj->m_iDuelUser;

  07522	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07525	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0752b	89 4d dc	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN21@MLS_SkillS@18:

; 3407 : 	int EnableAttack;
; 3408 : 
; 3409 : 	while ( true )

  0752e	b8 01 00 00 00	 mov	 eax, 1
  07533	85 c0		 test	 eax, eax
  07535	0f 84 78 02 00
	00		 je	 $LN20@MLS_SkillS@18

; 3410 : 	{
; 3411 : 		if(lpObj->VpPlayer2[count].state != 0)

  0753b	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0753e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  07541	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07544	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0754c	85 d2		 test	 edx, edx
  0754e	0f 84 49 02 00
	00		 je	 $LN19@MLS_SkillS@18

; 3412 : 		{
; 3413 : 			tObjNum = lpObj->VpPlayer2[count].number;

  07554	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  07557	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0755a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0755d	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  07565	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 3414 : 
; 3415 : 			if(tObjNum >= 0)

  07568	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0756c	0f 8c 2b 02 00
	00		 jl	 $LN19@MLS_SkillS@18

; 3416 : 			{
; 3417 : 				EnableAttack = 0;

  07572	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 3418 : 
; 3419 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  07579	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0757c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0757f	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07582	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0758a	83 fa 02	 cmp	 edx, 2
  0758d	75 25		 jne	 SHORT $LN17@MLS_SkillS@18
  0758f	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07592	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07598	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0759e	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  075a6	7d 0c		 jge	 SHORT $LN17@MLS_SkillS@18

; 3420 : 				{
; 3421 : 					EnableAttack = 1;

  075a8	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  075af	e9 23 01 00 00	 jmp	 $LN16@MLS_SkillS@18
$LN17@MLS_SkillS@18:

; 3422 : 				}
; 3423 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  075b4	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  075b7	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  075ba	74 08		 je	 SHORT $LN14@MLS_SkillS@18
  075bc	8b 45 dc	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  075bf	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  075c2	75 0c		 jne	 SHORT $LN15@MLS_SkillS@18
$LN14@MLS_SkillS@18:

; 3424 : 				{
; 3425 : 					EnableAttack = 1;

  075c4	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  075cb	e9 07 01 00 00	 jmp	 $LN16@MLS_SkillS@18
$LN15@MLS_SkillS@18:

; 3426 : 				}
; 3427 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  075d0	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  075d3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  075d6	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  075d9	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  075e1	83 fa 03	 cmp	 edx, 3
  075e4	74 5b		 je	 SHORT $LN12@MLS_SkillS@18
  075e6	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  075e9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  075ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  075f5	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  075fd	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  07600	75 3f		 jne	 SHORT $LN12@MLS_SkillS@18
  07602	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  07607	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0760c	83 f8 07	 cmp	 eax, 7
  0760f	75 30		 jne	 SHORT $LN12@MLS_SkillS@18

; 3428 : 				{
; 3429 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  07611	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07614	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0761b	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0761e	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  07624	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07629	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  07631	3b ca		 cmp	 ecx, edx
  07633	74 07		 je	 SHORT $LN11@MLS_SkillS@18

; 3430 : 						EnableAttack = 1;

  07635	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN11@MLS_SkillS@18:

; 3431 : 				}
; 3432 : 				else

  0763c	e9 96 00 00 00	 jmp	 $LN16@MLS_SkillS@18
$LN12@MLS_SkillS@18:

; 3433 : 				{
; 3434 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  07641	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07644	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0764a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07650	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  07653	89 55 d4	 mov	 DWORD PTR _CallMonIndex$235599[ebp], edx

; 3435 : 
; 3436 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  07656	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07659	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0765f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07665	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0766a	83 fa 02	 cmp	 edx, 2
  0766d	75 40		 jne	 SHORT $LN9@MLS_SkillS@18
  0766f	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07672	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07678	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0767e	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  07686	7c 27		 jl	 SHORT $LN9@MLS_SkillS@18

; 3437 : 					{
; 3438 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  07688	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0768b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07691	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07697	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0769e	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  076a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  076a9	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  076ac	89 4d d4	 mov	 DWORD PTR _CallMonIndex$235599[ebp], ecx
$LN9@MLS_SkillS@18:

; 3439 : 					}
; 3440 : 
; 3441 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  076af	8b 45 d4	 mov	 eax, DWORD PTR _CallMonIndex$235599[ebp]
  076b2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  076b8	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  076be	50		 push	 eax
  076bf	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  076c2	51		 push	 ecx
  076c3	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  076c8	83 c4 08	 add	 esp, 8
  076cb	83 f8 01	 cmp	 eax, 1
  076ce	75 07		 jne	 SHORT $LN16@MLS_SkillS@18

; 3442 : 					{
; 3443 : 						EnableAttack = 1;

  076d0	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN16@MLS_SkillS@18:

; 3444 : 					}
; 3445 : 				}
; 3446 : 
; 3447 : 				if(EnableAttack != 0)

  076d7	83 7d d8 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  076db	0f 84 bc 00 00
	00		 je	 $LN19@MLS_SkillS@18

; 3448 : 				{
; 3449 : 					attackcheck = 0;

  076e1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 0

; 3450 : 
; 3451 : 					if(loopcount == 0)

  076e8	83 7d e4 00	 cmp	 DWORD PTR _loopcount$[ebp], 0
  076ec	75 09		 jne	 SHORT $LN6@MLS_SkillS@18

; 3452 : 					{
; 3453 : 						attackcheck = 1;

  076ee	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 1
  076f5	eb 18		 jmp	 SHORT $LN5@MLS_SkillS@18
$LN6@MLS_SkillS@18:

; 3454 : 					}
; 3455 : 					else if(rand()%3==0)

  076f7	e8 00 00 00 00	 call	 _rand
  076fc	99		 cdq
  076fd	b9 03 00 00 00	 mov	 ecx, 3
  07702	f7 f9		 idiv	 ecx
  07704	85 d2		 test	 edx, edx
  07706	75 07		 jne	 SHORT $LN5@MLS_SkillS@18

; 3456 : 					{
; 3457 : 						attackcheck = 1;

  07708	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 1
$LN5@MLS_SkillS@18:

; 3458 : 					}
; 3459 : 
; 3460 : 					if(attackcheck != 0)

  0770f	83 7d e0 00	 cmp	 DWORD PTR _attackcheck$[ebp], 0
  07713	0f 84 84 00 00
	00		 je	 $LN19@MLS_SkillS@18

; 3461 : 					{
; 3462 : 						if(SkillSpearHitBox.HitCheck(iangle,lpObj->X,lpObj->Y,gObj[tObjNum].X,gObj[tObjNum].Y))

  07719	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0771c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07722	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07728	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  07730	52		 push	 edx
  07731	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07734	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0773a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07740	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  07748	52		 push	 edx
  07749	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0774c	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  07753	51		 push	 ecx
  07754	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  07757	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  0775e	50		 push	 eax
  0775f	8b 4d ec	 mov	 ecx, DWORD PTR _iangle$[ebp]
  07762	51		 push	 ecx
  07763	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  07768	e8 00 00 00 00	 call	 ?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ; CSkillHitBox::HitCheck
  0776d	85 c0		 test	 eax, eax
  0776f	74 2c		 je	 SHORT $LN19@MLS_SkillS@18

; 3463 : 						{
; 3464 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,0,1,0,0,0,0);

  07771	6a 00		 push	 0
  07773	6a 00		 push	 0
  07775	6a 00		 push	 0
  07777	6a 00		 push	 0
  07779	6a 01		 push	 1
  0777b	6a 00		 push	 0
  0777d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  07780	50		 push	 eax
  07781	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  07784	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0778a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07790	51		 push	 ecx
  07791	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  07794	52		 push	 edx
  07795	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0779a	83 c4 24	 add	 esp, 36			; 00000024H
$LN19@MLS_SkillS@18:

; 3465 : 						}
; 3466 : 					}
; 3467 : 				}
; 3468 : 			}
; 3469 : 		}
; 3470 : 
; 3471 : 		count++;

  0779d	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  077a0	83 c0 01	 add	 eax, 1
  077a3	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax

; 3472 : 		if(count > MAX_VIEWPORT -1)

  077a6	83 7d e8 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  077aa	7e 02		 jle	 SHORT $LN1@MLS_SkillS@18

; 3473 : 		{
; 3474 : 			break;

  077ac	eb 05		 jmp	 SHORT $LN20@MLS_SkillS@18
$LN1@MLS_SkillS@18:

; 3475 : 		}
; 3476 : 	}

  077ae	e9 7b fd ff ff	 jmp	 $LN21@MLS_SkillS@18
$LN20@MLS_SkillS@18:

; 3477 : 	return true;

  077b3	b8 01 00 00 00	 mov	 eax, 1
$LN23@MLS_SkillS@18:

; 3478 : }

  077b8	5f		 pop	 edi
  077b9	5e		 pop	 esi
  077ba	5b		 pop	 ebx
  077bb	8b e5		 mov	 esp, ebp
  077bd	5d		 pop	 ebp
  077be	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear
; Function compile flags: /Odtp /ZI
_i$235665 = -60					; size = 4
_CallMonIndex$235650 = -56				; size = 4
_EnableAttack$235640 = -52				; size = 4
_iSkillDistance$ = -48					; size = 4
_nMaxCount$ = -44					; size = 4
_nMinCount$ = -40					; size = 4
_bAttack$ = -36						; size = 4
_nHitCount$ = -32					; size = 4
_DuelIndex$ = -28					; size = 4
_attackcheck$ = -24					; size = 4
_tObjNum$ = -20						; size = 4
_count$ = -16						; size = 4
_bRet$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
_aDistance$ = 28					; size = 4
_bPVP$ = 32						; size = 4
_nSuccessRate$ = 36					; size = 4
_nDelay$ = 40						; size = 4
?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack
; _this$ = ecx

; 3481 : {

  077d0	55		 push	 ebp
  077d1	8b ec		 mov	 ebp, esp
  077d3	83 ec 7c	 sub	 esp, 124		; 0000007cH
  077d6	53		 push	 ebx
  077d7	56		 push	 esi
  077d8	57		 push	 edi
  077d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3482 : 	LPOBJ lpObj = &gObj[aIndex];

  077dc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  077df	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  077e5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  077eb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 3483 : 	int bRet = FALSE;

  077ee	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 3484 : 	int count = 0;

  077f5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3485 : 	int tObjNum;
; 3486 : 	int attackcheck;
; 3487 : 	int DuelIndex = lpObj->m_iDuelUser;

  077fc	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  077ff	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  07805	89 4d e4	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 3488 : 	int nHitCount = 0;

  07808	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nHitCount$[ebp], 0

; 3489 : 	int bAttack = FALSE;

  0780f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 3490 : 
; 3491 : 	int nMinCount = 4;

  07816	c7 45 d8 04 00
	00 00		 mov	 DWORD PTR _nMinCount$[ebp], 4

; 3492 : 	int nMaxCount = 8;

  0781d	c7 45 d4 08 00
	00 00		 mov	 DWORD PTR _nMaxCount$[ebp], 8

; 3493 : 
; 3494 : 	if( lpMagic->m_Skill == 496 )

  07824	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  07827	81 78 08 f0 01
	00 00		 cmp	 DWORD PTR [eax+8], 496	; 000001f0H
  0782e	75 0e		 jne	 SHORT $LN38@MLS_SkillA

; 3495 : 	{
; 3496 : 		nMinCount = 8;

  07830	c7 45 d8 08 00
	00 00		 mov	 DWORD PTR _nMinCount$[ebp], 8

; 3497 : 		nMaxCount = 12;

  07837	c7 45 d4 0c 00
	00 00		 mov	 DWORD PTR _nMaxCount$[ebp], 12 ; 0000000cH
$LN38@MLS_SkillA:

; 3498 : 	}
; 3499 : 
; 3500 : 	if( x == FALSE &&
; 3501 : 		y == FALSE )

  0783e	0f b6 45 10	 movzx	 eax, BYTE PTR _x$[ebp]
  07842	85 c0		 test	 eax, eax
  07844	75 20		 jne	 SHORT $LN37@MLS_SkillA
  07846	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  0784a	85 c0		 test	 eax, eax
  0784c	75 18		 jne	 SHORT $LN37@MLS_SkillA

; 3502 : 	{
; 3503 : 		x = lpObj->X;

  0784e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07851	8a 88 44 01 00
	00		 mov	 cl, BYTE PTR [eax+324]
  07857	88 4d 10	 mov	 BYTE PTR _x$[ebp], cl

; 3504 : 		y = lpObj->Y;

  0785a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0785d	8a 88 46 01 00
	00		 mov	 cl, BYTE PTR [eax+326]
  07863	88 4d 14	 mov	 BYTE PTR _y$[ebp], cl
$LN37@MLS_SkillA:

; 3505 : 	}
; 3506 : 
; 3507 : 	int iSkillDistance = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  07866	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  07869	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0786c	51		 push	 ecx
  0786d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  07872	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance
  07877	89 45 d0	 mov	 DWORD PTR _iSkillDistance$[ebp], eax

; 3508 : 
; 3509 : 	if( this->MLS_CalDistance(lpObj->X,lpObj->Y,x,y) <= iSkillDistance )

  0787a	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  0787e	50		 push	 eax
  0787f	0f b6 4d 10	 movzx	 ecx, BYTE PTR _x$[ebp]
  07883	51		 push	 ecx
  07884	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  07887	0f bf 82 46 01
	00 00		 movsx	 eax, WORD PTR [edx+326]
  0788e	50		 push	 eax
  0788f	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07892	0f bf 91 44 01
	00 00		 movsx	 edx, WORD PTR [ecx+324]
  07899	52		 push	 edx
  0789a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0789d	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  078a2	3b 45 d0	 cmp	 eax, DWORD PTR _iSkillDistance$[ebp]
  078a5	0f 8f eb 03 00
	00		 jg	 $LN36@MLS_SkillA
$LN35@MLS_SkillA:

; 3510 : 	{
; 3511 : 		while( TRUE )

  078ab	b8 01 00 00 00	 mov	 eax, 1
  078b0	85 c0		 test	 eax, eax
  078b2	0f 84 de 03 00
	00		 je	 $LN36@MLS_SkillA

; 3512 : 		{
; 3513 : 			if(lpObj->VpPlayer2[count].state != 0)

  078b8	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  078bb	6b c0 0c	 imul	 eax, 12			; 0000000cH
  078be	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  078c1	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  078c9	85 d2		 test	 edx, edx
  078cb	0f 84 af 03 00
	00		 je	 $LN33@MLS_SkillA

; 3514 : 			{
; 3515 : 				tObjNum = lpObj->VpPlayer2[count].number;

  078d1	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  078d4	6b c0 0c	 imul	 eax, 12			; 0000000cH
  078d7	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  078da	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  078e2	89 55 ec	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 3516 : 
; 3517 : 				if( tObjNum >= 0 )

  078e5	83 7d ec 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  078e9	0f 8c 91 03 00
	00		 jl	 $LN33@MLS_SkillA

; 3518 : 				{
; 3519 : 					int EnableAttack = 0;

  078ef	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$235640[ebp], 0

; 3520 : 
; 3521 : 					if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  078f6	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  078f9	6b c0 0c	 imul	 eax, 12			; 0000000cH
  078fc	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  078ff	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  07907	83 fa 02	 cmp	 edx, 2
  0790a	75 25		 jne	 SHORT $LN31@MLS_SkillA
  0790c	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0790f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07915	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0791b	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  07923	7d 0c		 jge	 SHORT $LN31@MLS_SkillA

; 3522 : 					{
; 3523 : 						EnableAttack = 1;

  07925	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$235640[ebp], 1
  0792c	e9 29 01 00 00	 jmp	 $LN30@MLS_SkillA
$LN31@MLS_SkillA:

; 3524 : 					}
; 3525 : 					else if( (tObjNum == aTargetIndex && bPVP == 1) || DuelIndex ==tObjNum )

  07931	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07934	3b 45 18	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  07937	75 06		 jne	 SHORT $LN27@MLS_SkillA
  07939	83 7d 20 01	 cmp	 DWORD PTR _bPVP$[ebp], 1
  0793d	74 08		 je	 SHORT $LN28@MLS_SkillA
$LN27@MLS_SkillA:
  0793f	8b 45 e4	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  07942	3b 45 ec	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  07945	75 0c		 jne	 SHORT $LN29@MLS_SkillA
$LN28@MLS_SkillA:

; 3526 : 					{
; 3527 : 						EnableAttack = 1;

  07947	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$235640[ebp], 1
  0794e	e9 07 01 00 00	 jmp	 $LN30@MLS_SkillA
$LN29@MLS_SkillA:

; 3528 : 					}
; 3529 : 					else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  07953	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  07956	6b c0 0c	 imul	 eax, 12			; 0000000cH
  07959	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0795c	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  07964	83 fa 03	 cmp	 edx, 3
  07967	74 5b		 je	 SHORT $LN25@MLS_SkillA
  07969	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0796c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07972	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07978	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  07980	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  07983	75 3f		 jne	 SHORT $LN25@MLS_SkillA
  07985	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0798a	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0798f	83 f8 07	 cmp	 eax, 7
  07992	75 30		 jne	 SHORT $LN25@MLS_SkillA

; 3530 : 					{
; 3531 : 						if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  07994	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07997	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0799e	8b 55 ec	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  079a1	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  079a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  079ac	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  079b4	3b ca		 cmp	 ecx, edx
  079b6	74 07		 je	 SHORT $LN24@MLS_SkillA

; 3532 : 							EnableAttack = 1;

  079b8	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$235640[ebp], 1
$LN24@MLS_SkillA:

; 3533 : 					}	
; 3534 : 					else

  079bf	e9 96 00 00 00	 jmp	 $LN30@MLS_SkillA
$LN25@MLS_SkillA:

; 3535 : 					{
; 3536 : 						int CallMonIndex = gObj[tObjNum].m_Index;

  079c4	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  079c7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  079cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  079d3	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  079d6	89 55 c8	 mov	 DWORD PTR _CallMonIndex$235650[ebp], edx

; 3537 : 	
; 3538 : 						if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  079d9	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  079dc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  079e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  079e8	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  079ed	83 fa 02	 cmp	 edx, 2
  079f0	75 40		 jne	 SHORT $LN22@MLS_SkillA
  079f2	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  079f5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  079fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07a01	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  07a09	7c 27		 jl	 SHORT $LN22@MLS_SkillA

; 3539 : 						{
; 3540 : 							CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  07a0b	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07a0e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07a14	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07a1a	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  07a21	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  07a27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07a2c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  07a2f	89 4d c8	 mov	 DWORD PTR _CallMonIndex$235650[ebp], ecx
$LN22@MLS_SkillA:

; 3541 : 						}
; 3542 : 	
; 3543 : 						if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  07a32	8b 45 c8	 mov	 eax, DWORD PTR _CallMonIndex$235650[ebp]
  07a35	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07a3b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07a41	50		 push	 eax
  07a42	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07a45	51		 push	 ecx
  07a46	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  07a4b	83 c4 08	 add	 esp, 8
  07a4e	83 f8 01	 cmp	 eax, 1
  07a51	75 07		 jne	 SHORT $LN30@MLS_SkillA

; 3544 : 						{
; 3545 : 							EnableAttack = 1;

  07a53	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$235640[ebp], 1
$LN30@MLS_SkillA:

; 3546 : 						}
; 3547 : 					}
; 3548 : 
; 3549 : 					if( EnableAttack != 0 )

  07a5a	83 7d cc 00	 cmp	 DWORD PTR _EnableAttack$235640[ebp], 0
  07a5e	0f 84 1c 02 00
	00		 je	 $LN33@MLS_SkillA

; 3550 : 					{
; 3551 : 						attackcheck = 0;

  07a64	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 0

; 3552 : 
; 3553 : 						if( nSuccessRate == 0 )

  07a6b	83 7d 24 00	 cmp	 DWORD PTR _nSuccessRate$[ebp], 0
  07a6f	75 09		 jne	 SHORT $LN19@MLS_SkillA

; 3554 : 						{
; 3555 : 							attackcheck = 1;

  07a71	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 1

; 3556 : 						}
; 3557 : 						else

  07a78	eb 0c		 jmp	 SHORT $LN18@MLS_SkillA
$LN19@MLS_SkillA:

; 3558 : 						{
; 3559 : 							attackcheck = rand()%nSuccessRate;

  07a7a	e8 00 00 00 00	 call	 _rand
  07a7f	99		 cdq
  07a80	f7 7d 24	 idiv	 DWORD PTR _nSuccessRate$[ebp]
  07a83	89 55 e8	 mov	 DWORD PTR _attackcheck$[ebp], edx
$LN18@MLS_SkillA:

; 3560 : 						}
; 3561 : 						
; 3562 : 						if( attackcheck != 0 )

  07a86	83 7d e8 00	 cmp	 DWORD PTR _attackcheck$[ebp], 0
  07a8a	0f 84 f0 01 00
	00		 je	 $LN33@MLS_SkillA

; 3563 : 						{
; 3564 : 							if( gObj[tObjNum].X >= (x -aDistance) &&
; 3565 : 								gObj[tObjNum].X <= (x +aDistance) &&
; 3566 : 								gObj[tObjNum].Y >= (y -aDistance) &&
; 3567 : 								gObj[tObjNum].Y <= (y +aDistance) )

  07a90	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07a93	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07a99	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07a9f	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  07aa7	0f b6 45 10	 movzx	 eax, BYTE PTR _x$[ebp]
  07aab	2b 45 1c	 sub	 eax, DWORD PTR _aDistance$[ebp]
  07aae	3b d0		 cmp	 edx, eax
  07ab0	0f 8c ca 01 00
	00		 jl	 $LN33@MLS_SkillA
  07ab6	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07ab9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07abf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07ac5	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  07acd	0f b6 45 10	 movzx	 eax, BYTE PTR _x$[ebp]
  07ad1	03 45 1c	 add	 eax, DWORD PTR _aDistance$[ebp]
  07ad4	3b d0		 cmp	 edx, eax
  07ad6	0f 8f a4 01 00
	00		 jg	 $LN33@MLS_SkillA
  07adc	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07adf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07ae5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07aeb	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  07af3	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  07af7	2b 45 1c	 sub	 eax, DWORD PTR _aDistance$[ebp]
  07afa	3b d0		 cmp	 edx, eax
  07afc	0f 8c 7e 01 00
	00		 jl	 $LN33@MLS_SkillA
  07b02	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07b05	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07b0b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07b11	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  07b19	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  07b1d	03 45 1c	 add	 eax, DWORD PTR _aDistance$[ebp]
  07b20	3b d0		 cmp	 edx, eax
  07b22	0f 8f 58 01 00
	00		 jg	 $LN33@MLS_SkillA

; 3568 : 							{
; 3569 : 								gObj[tObjNum].lpAttackObj = lpObj;

  07b28	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07b2b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07b31	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07b37	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  07b3a	89 94 01 d4 03
	00 00		 mov	 DWORD PTR [ecx+eax+980], edx

; 3570 : 								nHitCount++;

  07b41	8b 45 e0	 mov	 eax, DWORD PTR _nHitCount$[ebp]
  07b44	83 c0 01	 add	 eax, 1
  07b47	89 45 e0	 mov	 DWORD PTR _nHitCount$[ebp], eax

; 3571 : 	
; 3572 : 								if( nHitCount > nMinCount )

  07b4a	8b 45 e0	 mov	 eax, DWORD PTR _nHitCount$[ebp]
  07b4d	3b 45 d8	 cmp	 eax, DWORD PTR _nMinCount$[ebp]
  07b50	7e 1e		 jle	 SHORT $LN15@MLS_SkillA

; 3573 : 								{
; 3574 : 									if(rand()%2)

  07b52	e8 00 00 00 00	 call	 _rand
  07b57	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  07b5c	79 05		 jns	 SHORT $LN41@MLS_SkillA
  07b5e	48		 dec	 eax
  07b5f	83 c8 fe	 or	 eax, -2			; fffffffeH
  07b62	40		 inc	 eax
$LN41@MLS_SkillA:
  07b63	85 c0		 test	 eax, eax
  07b65	74 07		 je	 SHORT $LN14@MLS_SkillA

; 3575 : 									{
; 3576 : 										bAttack = TRUE;

  07b67	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN14@MLS_SkillA:

; 3577 : 									}
; 3578 : 								}
; 3579 : 								else

  07b6e	eb 07		 jmp	 SHORT $LN13@MLS_SkillA
$LN15@MLS_SkillA:

; 3580 : 								{
; 3581 : 									bAttack = TRUE;

  07b70	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN13@MLS_SkillA:

; 3582 : 								}
; 3583 : 	
; 3584 : 								if( nHitCount > nMaxCount )

  07b77	8b 45 e0	 mov	 eax, DWORD PTR _nHitCount$[ebp]
  07b7a	3b 45 d4	 cmp	 eax, DWORD PTR _nMaxCount$[ebp]
  07b7d	7e 07		 jle	 SHORT $LN12@MLS_SkillA

; 3585 : 								{
; 3586 : 									bAttack = FALSE;

  07b7f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN12@MLS_SkillA:

; 3587 : 								}
; 3588 : 
; 3589 : 								if( bAttack == TRUE )

  07b86	83 7d dc 01	 cmp	 DWORD PTR _bAttack$[ebp], 1
  07b8a	0f 85 e9 00 00
	00		 jne	 $LN11@MLS_SkillA

; 3590 : 								{
; 3591 : 									if( nDelay == 0 )

  07b90	83 7d 28 00	 cmp	 DWORD PTR _nDelay$[ebp], 0
  07b94	0f 85 c0 00 00
	00		 jne	 $LN10@MLS_SkillA

; 3592 : 									{
; 3593 : 										if( lpMagic->m_Skill == 560 )

  07b9a	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  07b9d	81 78 08 30 02
	00 00		 cmp	 DWORD PTR [eax+8], 560	; 00000230H
  07ba4	0f 85 82 00 00
	00		 jne	 $LN9@MLS_SkillA

; 3594 : 										{
; 3595 : 											for(int i = 1; i <= 4; i++)

  07baa	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _i$235665[ebp], 1
  07bb1	eb 09		 jmp	 SHORT $LN8@MLS_SkillA
$LN7@MLS_SkillA:
  07bb3	8b 45 c4	 mov	 eax, DWORD PTR _i$235665[ebp]
  07bb6	83 c0 01	 add	 eax, 1
  07bb9	89 45 c4	 mov	 DWORD PTR _i$235665[ebp], eax
$LN8@MLS_SkillA:
  07bbc	83 7d c4 04	 cmp	 DWORD PTR _i$235665[ebp], 4
  07bc0	7f 68		 jg	 SHORT $LN6@MLS_SkillA

; 3596 : 											{
; 3597 : 												if( i == 1 )

  07bc2	83 7d c4 01	 cmp	 DWORD PTR _i$235665[ebp], 1
  07bc6	75 31		 jne	 SHORT $LN5@MLS_SkillA

; 3598 : 												{
; 3599 : 													gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,TRUE,0,0,i,0);

  07bc8	6a 00		 push	 0
  07bca	0f b6 45 c4	 movzx	 eax, BYTE PTR _i$235665[ebp]
  07bce	50		 push	 eax
  07bcf	6a 00		 push	 0
  07bd1	6a 00		 push	 0
  07bd3	6a 01		 push	 1
  07bd5	6a 01		 push	 1
  07bd7	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  07bda	51		 push	 ecx
  07bdb	8b 55 ec	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  07bde	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  07be4	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07bea	52		 push	 edx
  07beb	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07bee	50		 push	 eax
  07bef	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  07bf4	83 c4 24	 add	 esp, 36			; 00000024H

; 3600 : 												}
; 3601 : 												else

  07bf7	eb 2f		 jmp	 SHORT $LN4@MLS_SkillA
$LN5@MLS_SkillA:

; 3602 : 												{
; 3603 : 													gObjAttack(lpObj,&gObj[tObjNum],lpMagic,FALSE,TRUE,0,0,i,0);

  07bf9	6a 00		 push	 0
  07bfb	0f b6 45 c4	 movzx	 eax, BYTE PTR _i$235665[ebp]
  07bff	50		 push	 eax
  07c00	6a 00		 push	 0
  07c02	6a 00		 push	 0
  07c04	6a 01		 push	 1
  07c06	6a 00		 push	 0
  07c08	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  07c0b	51		 push	 ecx
  07c0c	8b 55 ec	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  07c0f	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  07c15	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07c1b	52		 push	 edx
  07c1c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07c1f	50		 push	 eax
  07c20	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  07c25	83 c4 24	 add	 esp, 36			; 00000024H
$LN4@MLS_SkillA:

; 3604 : 												}
; 3605 : 											}

  07c28	eb 89		 jmp	 SHORT $LN7@MLS_SkillA
$LN6@MLS_SkillA:

; 3606 : 										}
; 3607 : 										else

  07c2a	eb 2c		 jmp	 SHORT $LN3@MLS_SkillA
$LN9@MLS_SkillA:

; 3608 : 										{
; 3609 : 											gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,FALSE,0,0,0,0);

  07c2c	6a 00		 push	 0
  07c2e	6a 00		 push	 0
  07c30	6a 00		 push	 0
  07c32	6a 00		 push	 0
  07c34	6a 00		 push	 0
  07c36	6a 01		 push	 1
  07c38	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  07c3b	50		 push	 eax
  07c3c	8b 4d ec	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  07c3f	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  07c45	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07c4b	51		 push	 ecx
  07c4c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  07c4f	52		 push	 edx
  07c50	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  07c55	83 c4 24	 add	 esp, 36			; 00000024H
$LN3@MLS_SkillA:

; 3610 : 										}
; 3611 : 									}
; 3612 : 									else

  07c58	eb 1f		 jmp	 SHORT $LN11@MLS_SkillA
$LN10@MLS_SkillA:

; 3613 : 									{
; 3614 : 										gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,nDelay,lpMagic->m_Skill,0);

  07c5a	6a 00		 push	 0
  07c5c	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  07c5f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  07c62	51		 push	 ecx
  07c63	8b 55 28	 mov	 edx, DWORD PTR _nDelay$[ebp]
  07c66	52		 push	 edx
  07c67	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07c6a	50		 push	 eax
  07c6b	6a 32		 push	 50			; 00000032H
  07c6d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07c70	51		 push	 ecx
  07c71	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  07c76	83 c4 18	 add	 esp, 24			; 00000018H
$LN11@MLS_SkillA:

; 3615 : 									}
; 3616 : 								}
; 3617 : 
; 3618 : 								bRet = TRUE;

  07c79	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN33@MLS_SkillA:

; 3619 : 							}
; 3620 : 						}
; 3621 : 					}
; 3622 : 				}
; 3623 : 			}
; 3624 : 
; 3625 : 			count++;

  07c80	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  07c83	83 c0 01	 add	 eax, 1
  07c86	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 3626 : 
; 3627 : 			if( count > (MAX_VIEWPORT-1) )

  07c89	83 7d f0 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  07c8d	7e 02		 jle	 SHORT $LN1@MLS_SkillA

; 3628 : 			{
; 3629 : 				break;

  07c8f	eb 05		 jmp	 SHORT $LN36@MLS_SkillA
$LN1@MLS_SkillA:

; 3630 : 			}
; 3631 : 		}

  07c91	e9 15 fc ff ff	 jmp	 $LN35@MLS_SkillA
$LN36@MLS_SkillA:

; 3632 : 	}
; 3633 : 	return bRet;

  07c96	8b 45 f4	 mov	 eax, DWORD PTR _bRet$[ebp]

; 3634 : }

  07c99	5f		 pop	 edi
  07c9a	5e		 pop	 esi
  07c9b	5b		 pop	 ebx
  07c9c	8b e5		 mov	 esp, ebp
  07c9e	5d		 pop	 ebp
  07c9f	c2 24 00	 ret	 36			; 00000024H
?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack
; Function compile flags: /Odtp /ZI
_delay$235714 = -48					; size = 4
_CallMonIndex$235704 = -44				; size = 4
_EnableAttack$ = -40					; size = 4
_DuelIndex$ = -36					; size = 4
_lpTargetObj$ = -32					; size = 4
_bAttack$ = -28						; size = 4
_HitCount$ = -24					; size = 4
_FirstHit$ = -20					; size = 4
_count$ = -16						; size = 4
_tObjNum$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SuddenIce
; _this$ = ecx

; 3637 : {

  07cb0	55		 push	 ebp
  07cb1	8b ec		 mov	 ebp, esp
  07cb3	83 ec 70	 sub	 esp, 112		; 00000070H
  07cb6	53		 push	 ebx
  07cb7	56		 push	 esi
  07cb8	57		 push	 edi
  07cb9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3638 : 	LPOBJ lpObj = &gObj[aIndex];

  07cbc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  07cbf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07cc5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07ccb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 3639 : 	int tObjNum;
; 3640 : 	int count = 0;

  07cce	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3641 : 	int FirstHit = 0;

  07cd5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _FirstHit$[ebp], 0

; 3642 : 	int HitCount = 0;

  07cdc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 3643 : 	int bAttack;
; 3644 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  07ce3	8b 45 18	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  07ce6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07cec	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07cf2	89 45 e0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 3645 : 	int DuelIndex = lpObj->m_iDuelUser;

  07cf5	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07cf8	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  07cfe	89 4d dc	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN22@MLS_Sudden:

; 3646 : 	int EnableAttack;
; 3647 : 
; 3648 : 	while ( true )

  07d01	b8 01 00 00 00	 mov	 eax, 1
  07d06	85 c0		 test	 eax, eax
  07d08	0f 84 88 02 00
	00		 je	 $LN21@MLS_Sudden

; 3649 : 	{
; 3650 : 		if(lpObj->VpPlayer2[count].state != 0)

  07d0e	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  07d11	6b c0 0c	 imul	 eax, 12			; 0000000cH
  07d14	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07d17	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  07d1f	85 d2		 test	 edx, edx
  07d21	0f 84 59 02 00
	00		 je	 $LN20@MLS_Sudden

; 3651 : 		{
; 3652 : 			tObjNum = lpObj->VpPlayer2[count].number;

  07d27	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  07d2a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  07d2d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07d30	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  07d38	89 55 f4	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 3653 : 
; 3654 : 			if(tObjNum >= 0)

  07d3b	83 7d f4 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  07d3f	0f 8c 3b 02 00
	00		 jl	 $LN20@MLS_Sudden

; 3655 : 			{
; 3656 : 				EnableAttack = 0;

  07d45	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 3657 : 
; 3658 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  07d4c	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  07d4f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  07d52	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07d55	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  07d5d	83 fa 02	 cmp	 edx, 2
  07d60	75 25		 jne	 SHORT $LN18@MLS_Sudden
  07d62	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07d65	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07d6b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07d71	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  07d79	7d 0c		 jge	 SHORT $LN18@MLS_Sudden

; 3659 : 				{
; 3660 : 					EnableAttack = 1;

  07d7b	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  07d82	e9 23 01 00 00	 jmp	 $LN17@MLS_Sudden
$LN18@MLS_Sudden:

; 3661 : 				}
; 3662 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  07d87	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07d8a	3b 45 18	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  07d8d	74 08		 je	 SHORT $LN15@MLS_Sudden
  07d8f	8b 45 dc	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  07d92	3b 45 f4	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  07d95	75 0c		 jne	 SHORT $LN16@MLS_Sudden
$LN15@MLS_Sudden:

; 3663 : 				{
; 3664 : 					EnableAttack = 1;

  07d97	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  07d9e	e9 07 01 00 00	 jmp	 $LN17@MLS_Sudden
$LN16@MLS_Sudden:

; 3665 : 				}
; 3666 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  07da3	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  07da6	6b c0 0c	 imul	 eax, 12			; 0000000cH
  07da9	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07dac	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  07db4	83 fa 03	 cmp	 edx, 3
  07db7	74 5b		 je	 SHORT $LN13@MLS_Sudden
  07db9	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07dbc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07dc2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07dc8	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  07dd0	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  07dd3	75 3f		 jne	 SHORT $LN13@MLS_Sudden
  07dd5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  07dda	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  07ddf	83 f8 07	 cmp	 eax, 7
  07de2	75 30		 jne	 SHORT $LN13@MLS_Sudden

; 3667 : 				{
; 3668 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  07de4	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  07de7	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  07dee	8b 55 f4	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  07df1	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  07df7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07dfc	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  07e04	3b ca		 cmp	 ecx, edx
  07e06	74 07		 je	 SHORT $LN12@MLS_Sudden

; 3669 : 						EnableAttack = 1;

  07e08	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN12@MLS_Sudden:

; 3670 : 				}
; 3671 : 				else

  07e0f	e9 96 00 00 00	 jmp	 $LN17@MLS_Sudden
$LN13@MLS_Sudden:

; 3672 : 				{
; 3673 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  07e14	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07e17	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07e1d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07e23	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  07e26	89 55 d4	 mov	 DWORD PTR _CallMonIndex$235704[ebp], edx

; 3674 : 
; 3675 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  07e29	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07e2c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07e32	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07e38	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  07e3d	83 fa 02	 cmp	 edx, 2
  07e40	75 40		 jne	 SHORT $LN10@MLS_Sudden
  07e42	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07e45	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07e4b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07e51	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  07e59	7c 27		 jl	 SHORT $LN10@MLS_Sudden

; 3676 : 					{
; 3677 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  07e5b	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07e5e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07e64	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07e6a	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  07e71	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  07e77	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07e7c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  07e7f	89 4d d4	 mov	 DWORD PTR _CallMonIndex$235704[ebp], ecx
$LN10@MLS_Sudden:

; 3678 : 					}
; 3679 : 
; 3680 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  07e82	8b 45 d4	 mov	 eax, DWORD PTR _CallMonIndex$235704[ebp]
  07e85	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07e8b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07e91	50		 push	 eax
  07e92	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  07e95	51		 push	 ecx
  07e96	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  07e9b	83 c4 08	 add	 esp, 8
  07e9e	83 f8 01	 cmp	 eax, 1
  07ea1	75 07		 jne	 SHORT $LN17@MLS_Sudden

; 3681 : 					{
; 3682 : 						EnableAttack = 1;

  07ea3	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN17@MLS_Sudden:

; 3683 : 					}
; 3684 : 				}
; 3685 : 
; 3686 : 				if(EnableAttack != 0)

  07eaa	83 7d d8 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  07eae	0f 84 cc 00 00
	00		 je	 $LN20@MLS_Sudden

; 3687 : 				{
; 3688 : 					if( this->MLS_CalDistance(x,y,gObj[tObjNum].X,gObj[tObjNum].Y) < 4)

  07eb4	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07eb7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07ebd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07ec3	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  07ecb	52		 push	 edx
  07ecc	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  07ecf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  07ed5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07edb	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  07ee3	52		 push	 edx
  07ee4	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  07ee8	50		 push	 eax
  07ee9	0f b6 4d 10	 movzx	 ecx, BYTE PTR _x$[ebp]
  07eed	51		 push	 ecx
  07eee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  07ef1	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  07ef6	83 f8 04	 cmp	 eax, 4
  07ef9	0f 8d 81 00 00
	00		 jge	 $LN20@MLS_Sudden

; 3689 : 					{
; 3690 : 						bAttack = 0;

  07eff	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 3691 : 						
; 3692 : 						if(HitCount >= 5)

  07f06	83 7d e8 05	 cmp	 DWORD PTR _HitCount$[ebp], 5
  07f0a	7c 1e		 jl	 SHORT $LN6@MLS_Sudden

; 3693 : 						{
; 3694 : 							if(rand()%2)

  07f0c	e8 00 00 00 00	 call	 _rand
  07f11	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  07f16	79 05		 jns	 SHORT $LN25@MLS_Sudden
  07f18	48		 dec	 eax
  07f19	83 c8 fe	 or	 eax, -2			; fffffffeH
  07f1c	40		 inc	 eax
$LN25@MLS_Sudden:
  07f1d	85 c0		 test	 eax, eax
  07f1f	74 07		 je	 SHORT $LN5@MLS_Sudden

; 3695 : 							{
; 3696 : 								bAttack = 1;

  07f21	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN5@MLS_Sudden:

; 3697 : 							}
; 3698 : 						}
; 3699 : 						else

  07f28	eb 07		 jmp	 SHORT $LN4@MLS_Sudden
$LN6@MLS_Sudden:

; 3700 : 						{
; 3701 : 							bAttack = 1;

  07f2a	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN4@MLS_Sudden:

; 3702 : 						}
; 3703 : 
; 3704 : 						if(HitCount > 10)

  07f31	83 7d e8 0a	 cmp	 DWORD PTR _HitCount$[ebp], 10 ; 0000000aH
  07f35	7e 07		 jle	 SHORT $LN3@MLS_Sudden

; 3705 : 						{
; 3706 : 							bAttack = 0;

  07f37	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN3@MLS_Sudden:

; 3707 : 						}
; 3708 : 
; 3709 : 						if(bAttack != 0)

  07f3e	83 7d e4 00	 cmp	 DWORD PTR _bAttack$[ebp], 0
  07f42	74 3c		 je	 SHORT $LN20@MLS_Sudden

; 3710 : 						{
; 3711 : 							int delay = rand()%500;

  07f44	e8 00 00 00 00	 call	 _rand
  07f49	99		 cdq
  07f4a	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  07f4f	f7 f9		 idiv	 ecx
  07f51	89 55 d0	 mov	 DWORD PTR _delay$235714[ebp], edx

; 3712 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,1,0,0,0,0);

  07f54	6a 00		 push	 0
  07f56	6a 00		 push	 0
  07f58	6a 00		 push	 0
  07f5a	6a 00		 push	 0
  07f5c	6a 01		 push	 1
  07f5e	6a 01		 push	 1
  07f60	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  07f63	50		 push	 eax
  07f64	8b 4d f4	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  07f67	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  07f6d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  07f73	51		 push	 ecx
  07f74	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  07f77	52		 push	 edx
  07f78	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  07f7d	83 c4 24	 add	 esp, 36			; 00000024H
$LN20@MLS_Sudden:

; 3713 : 						}
; 3714 : 					}
; 3715 : 				}
; 3716 : 			}
; 3717 : 		}
; 3718 : 
; 3719 : 		count++;

  07f80	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  07f83	83 c0 01	 add	 eax, 1
  07f86	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 3720 : 		if(count > MAX_VIEWPORT -1)

  07f89	83 7d f0 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  07f8d	7e 02		 jle	 SHORT $LN1@MLS_Sudden

; 3721 : 		{
; 3722 : 			break;

  07f8f	eb 05		 jmp	 SHORT $LN21@MLS_Sudden
$LN1@MLS_Sudden:

; 3723 : 		}
; 3724 : 	}

  07f91	e9 6b fd ff ff	 jmp	 $LN22@MLS_Sudden
$LN21@MLS_Sudden:

; 3725 : 	return true;

  07f96	b8 01 00 00 00	 mov	 eax, 1

; 3726 : }

  07f9b	5f		 pop	 edi
  07f9c	5e		 pop	 esi
  07f9d	5b		 pop	 ebx
  07f9e	8b e5		 mov	 esp, ebp
  07fa0	5d		 pop	 ebp
  07fa1	c2 14 00	 ret	 20			; 00000014H
?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SuddenIce
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv92 = -80						; size = 4
tv89 = -80						; size = 4
tv87 = -80						; size = 4
_ty$ = -12						; size = 4
_tx$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_CalDistance
; _this$ = ecx

; 3729 : {

  07fb0	55		 push	 ebp
  07fb1	8b ec		 mov	 ebp, esp
  07fb3	83 ec 50	 sub	 esp, 80			; 00000050H
  07fb6	53		 push	 ebx
  07fb7	56		 push	 esi
  07fb8	57		 push	 edi
  07fb9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3730 : 	if( x == x1 &&
; 3731 : 		y == y1 )

  07fbc	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  07fbf	3b 45 10	 cmp	 eax, DWORD PTR _x1$[ebp]
  07fc2	75 0c		 jne	 SHORT $LN1@MLS_CalDis
  07fc4	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  07fc7	3b 45 14	 cmp	 eax, DWORD PTR _y1$[ebp]
  07fca	75 04		 jne	 SHORT $LN1@MLS_CalDis

; 3732 : 		return 0;

  07fcc	33 c0		 xor	 eax, eax
  07fce	eb 43		 jmp	 SHORT $LN2@MLS_CalDis
$LN1@MLS_CalDis:

; 3733 : 
; 3734 : 	float tx = x - x1;

  07fd0	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  07fd3	2b 45 10	 sub	 eax, DWORD PTR _x1$[ebp]
  07fd6	89 45 b0	 mov	 DWORD PTR tv87[ebp], eax
  07fd9	db 45 b0	 fild	 DWORD PTR tv87[ebp]
  07fdc	d9 5d f8	 fstp	 DWORD PTR _tx$[ebp]

; 3735 : 	float ty = y - y1;

  07fdf	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  07fe2	2b 45 14	 sub	 eax, DWORD PTR _y1$[ebp]
  07fe5	89 45 b0	 mov	 DWORD PTR tv89[ebp], eax
  07fe8	db 45 b0	 fild	 DWORD PTR tv89[ebp]
  07feb	d9 5d f4	 fstp	 DWORD PTR _ty$[ebp]

; 3736 : 
; 3737 : 	return sqrt((tx*tx)+(ty*ty));

  07fee	d9 45 f8	 fld	 DWORD PTR _tx$[ebp]
  07ff1	d8 4d f8	 fmul	 DWORD PTR _tx$[ebp]
  07ff4	d9 45 f4	 fld	 DWORD PTR _ty$[ebp]
  07ff7	d8 4d f4	 fmul	 DWORD PTR _ty$[ebp]
  07ffa	de c1		 faddp	 ST(1), ST(0)
  07ffc	d9 5d b0	 fstp	 DWORD PTR tv92[ebp]
  07fff	d9 45 b0	 fld	 DWORD PTR tv92[ebp]
  08002	51		 push	 ecx
  08003	d9 1c 24	 fstp	 DWORD PTR [esp]
  08006	e8 00 00 00 00	 call	 ?sqrt@@YAMM@Z		; sqrt
  0800b	83 c4 04	 add	 esp, 4
  0800e	e8 00 00 00 00	 call	 __ftol2_sse
$LN2@MLS_CalDis:

; 3738 : }

  08013	5f		 pop	 edi
  08014	5e		 pop	 esi
  08015	5b		 pop	 ebx
  08016	8b e5		 mov	 esp, ebp
  08018	5d		 pop	 ebp
  08019	c2 10 00	 ret	 16			; 00000010H
?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_CalDistance
_TEXT	ENDS
PUBLIC	__real@4056800000000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@4066800000000000
EXTRN	_atan2:PROC
;	COMDAT __real@4056800000000000
CONST	SEGMENT
__real@4056800000000000 DQ 04056800000000000r	; 90
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv80 = -100						; size = 4
tv78 = -100						; size = 4
_angle$ = -32						; size = 4
_rad$ = -28						; size = 8
_diffY$ = -20						; size = 8
_diffX$ = -12						; size = 8
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_GetAngle
; _this$ = ecx

; 3745 : {

  08020	55		 push	 ebp
  08021	8b ec		 mov	 ebp, esp
  08023	83 ec 64	 sub	 esp, 100		; 00000064H
  08026	53		 push	 ebx
  08027	56		 push	 esi
  08028	57		 push	 edi
  08029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3746 : 	double diffX = x - tx;

  0802c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0802f	2b 45 10	 sub	 eax, DWORD PTR _tx$[ebp]
  08032	89 45 9c	 mov	 DWORD PTR tv78[ebp], eax
  08035	db 45 9c	 fild	 DWORD PTR tv78[ebp]
  08038	dd 5d f4	 fstp	 QWORD PTR _diffX$[ebp]

; 3747 : 	double diffY = y - ty;

  0803b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0803e	2b 45 14	 sub	 eax, DWORD PTR _ty$[ebp]
  08041	89 45 9c	 mov	 DWORD PTR tv80[ebp], eax
  08044	db 45 9c	 fild	 DWORD PTR tv80[ebp]
  08047	dd 5d ec	 fstp	 QWORD PTR _diffY$[ebp]

; 3748 : 
; 3749 : 	double rad = atan2(diffY,diffX);

  0804a	83 ec 08	 sub	 esp, 8
  0804d	dd 45 f4	 fld	 QWORD PTR _diffX$[ebp]
  08050	dd 1c 24	 fstp	 QWORD PTR [esp]
  08053	83 ec 08	 sub	 esp, 8
  08056	dd 45 ec	 fld	 QWORD PTR _diffY$[ebp]
  08059	dd 1c 24	 fstp	 QWORD PTR [esp]
  0805c	e8 00 00 00 00	 call	 _atan2
  08061	83 c4 10	 add	 esp, 16			; 00000010H
  08064	dd 5d e4	 fstp	 QWORD PTR _rad$[ebp]

; 3750 : 
; 3751 : 	int angle  = rad*180/M_PI + 90.0f;

  08067	dd 45 e4	 fld	 QWORD PTR _rad$[ebp]
  0806a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4066800000000000
  08070	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@400921fb60000000
  08076	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4056800000000000
  0807c	e8 00 00 00 00	 call	 __ftol2_sse
  08081	89 45 e0	 mov	 DWORD PTR _angle$[ebp], eax

; 3752 : 
; 3753 : 	if( angle < 0 )

  08084	83 7d e0 00	 cmp	 DWORD PTR _angle$[ebp], 0
  08088	7d 0b		 jge	 SHORT $LN1@MLS_GetAng

; 3754 : 		angle += 360;

  0808a	8b 45 e0	 mov	 eax, DWORD PTR _angle$[ebp]
  0808d	05 68 01 00 00	 add	 eax, 360		; 00000168H
  08092	89 45 e0	 mov	 DWORD PTR _angle$[ebp], eax
$LN1@MLS_GetAng:

; 3755 : 
; 3756 : 	return angle;

  08095	8b 45 e0	 mov	 eax, DWORD PTR _angle$[ebp]

; 3757 : }

  08098	5f		 pop	 edi
  08099	5e		 pop	 esi
  0809a	5b		 pop	 ebx
  0809b	8b e5		 mov	 esp, ebp
  0809d	5d		 pop	 ebp
  0809e	c2 10 00	 ret	 16			; 00000010H
?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_GetAngle
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum
EXTRN	_VectorRotate:PROC
EXTRN	_AngleMatrix:PROC
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$235751 = -172					; size = 4
_vFrustrum$ = -168					; size = 48
_Matrix$ = -120						; size = 48
_Angle$ = -72						; size = 12
_p$ = -60						; size = 48
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_fangle$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum
; _this$ = ecx

; 3760 : {

  080b0	55		 push	 ebp
  080b1	8b ec		 mov	 ebp, esp
  080b3	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  080b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  080be	33 c5		 xor	 eax, ebp
  080c0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  080c3	53		 push	 ebx
  080c4	56		 push	 esi
  080c5	57		 push	 edi
  080c6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3761 : 	LPOBJ lpObj = &gObj[aIndex];

  080c9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  080cc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  080d2	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  080d8	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 3762 : 
; 3763 : 	float p[4][3];
; 3764 : 
; 3765 : 	p[0][0] = -tx;

  080db	d9 45 10	 fld	 DWORD PTR _tx$[ebp]
  080de	d9 e0		 fchs
  080e0	d9 5d c4	 fstp	 DWORD PTR _p$[ebp]

; 3766 : 	p[0][1] = ty;

  080e3	d9 45 14	 fld	 DWORD PTR _ty$[ebp]
  080e6	d9 5d c8	 fstp	 DWORD PTR _p$[ebp+4]

; 3767 : 	p[0][2] = 0;

  080e9	d9 ee		 fldz
  080eb	d9 5d cc	 fstp	 DWORD PTR _p$[ebp+8]

; 3768 : 	p[1][0] = tx;

  080ee	d9 45 10	 fld	 DWORD PTR _tx$[ebp]
  080f1	d9 5d d0	 fstp	 DWORD PTR _p$[ebp+12]

; 3769 : 	p[1][1] = ty;

  080f4	d9 45 14	 fld	 DWORD PTR _ty$[ebp]
  080f7	d9 5d d4	 fstp	 DWORD PTR _p$[ebp+16]

; 3770 : 	p[1][2] = 0;

  080fa	d9 ee		 fldz
  080fc	d9 5d d8	 fstp	 DWORD PTR _p$[ebp+20]

; 3771 : 	p[2][0] = 1.0f;

  080ff	d9 e8		 fld1
  08101	d9 5d dc	 fstp	 DWORD PTR _p$[ebp+24]

; 3772 : 	p[2][1] = 0;

  08104	d9 ee		 fldz
  08106	d9 5d e0	 fstp	 DWORD PTR _p$[ebp+28]

; 3773 : 	p[2][2] = 0;

  08109	d9 ee		 fldz
  0810b	d9 5d e4	 fstp	 DWORD PTR _p$[ebp+32]

; 3774 : 	p[3][0] = -1.0f;

  0810e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  08114	d9 5d e8	 fstp	 DWORD PTR _p$[ebp+36]

; 3775 : 	p[3][1] = 0;

  08117	d9 ee		 fldz
  08119	d9 5d ec	 fstp	 DWORD PTR _p$[ebp+40]

; 3776 : 	p[3][2] = 0;

  0811c	d9 ee		 fldz
  0811e	d9 5d f0	 fstp	 DWORD PTR _p$[ebp+44]

; 3777 : 
; 3778 : 	float Angle[3];
; 3779 : 
; 3780 : 	Angle[0] = 0;

  08121	d9 ee		 fldz
  08123	d9 5d b8	 fstp	 DWORD PTR _Angle$[ebp]

; 3781 : 	Angle[1] = 0;

  08126	d9 ee		 fldz
  08128	d9 5d bc	 fstp	 DWORD PTR _Angle$[ebp+4]

; 3782 : 	Angle[2] = fangle;

  0812b	d9 45 0c	 fld	 DWORD PTR _fangle$[ebp]
  0812e	d9 5d c0	 fstp	 DWORD PTR _Angle$[ebp+8]

; 3783 : 
; 3784 : 	float Matrix[3][4];
; 3785 : 	float vFrustrum[4][3];
; 3786 : 
; 3787 : 	AngleMatrix(Angle,Matrix);

  08131	8d 45 88	 lea	 eax, DWORD PTR _Matrix$[ebp]
  08134	50		 push	 eax
  08135	8d 4d b8	 lea	 ecx, DWORD PTR _Angle$[ebp]
  08138	51		 push	 ecx
  08139	e8 00 00 00 00	 call	 _AngleMatrix
  0813e	83 c4 08	 add	 esp, 8

; 3788 : 
; 3789 : 	for(int i = 0; i < 4; i++)

  08141	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$235751[ebp], 0
  0814b	eb 0f		 jmp	 SHORT $LN3@MLS_SkillF@3
$LN2@MLS_SkillF@3:
  0814d	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$235751[ebp]
  08153	83 c0 01	 add	 eax, 1
  08156	89 85 54 ff ff
	ff		 mov	 DWORD PTR _i$235751[ebp], eax
$LN3@MLS_SkillF@3:
  0815c	83 bd 54 ff ff
	ff 04		 cmp	 DWORD PTR _i$235751[ebp], 4
  08163	0f 8d 92 00 00
	00		 jge	 $LN1@MLS_SkillF@3

; 3790 : 	{
; 3791 : 		VectorRotate((const float *)&p[i],&Matrix[0],(float *)&vFrustrum[i]);

  08169	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$235751[ebp]
  0816f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08172	8d 8c 05 58 ff
	ff ff		 lea	 ecx, DWORD PTR _vFrustrum$[ebp+eax]
  08179	51		 push	 ecx
  0817a	8d 55 88	 lea	 edx, DWORD PTR _Matrix$[ebp]
  0817d	52		 push	 edx
  0817e	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$235751[ebp]
  08184	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08187	8d 4c 05 c4	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  0818b	51		 push	 ecx
  0818c	e8 00 00 00 00	 call	 _VectorRotate
  08191	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3792 : 
; 3793 : 		lpObj->fSkillFrustrumX[i] = (int)vFrustrum[i][0] + lpObj->X;

  08194	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$235751[ebp]
  0819a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0819d	d9 84 05 58 ff
	ff ff		 fld	 DWORD PTR _vFrustrum$[ebp+eax]
  081a4	e8 00 00 00 00	 call	 __ftol2_sse
  081a9	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  081ac	0f bf 91 44 01
	00 00		 movsx	 edx, WORD PTR [ecx+324]
  081b3	03 c2		 add	 eax, edx
  081b5	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _i$235751[ebp]
  081bb	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  081be	89 84 8a f4 10
	00 00		 mov	 DWORD PTR [edx+ecx*4+4340], eax

; 3794 : 		lpObj->fSkillFrustrumY[i] = (int)vFrustrum[i][1] + lpObj->Y;

  081c5	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$235751[ebp]
  081cb	6b c0 0c	 imul	 eax, 12			; 0000000cH
  081ce	d9 84 05 5c ff
	ff ff		 fld	 DWORD PTR _vFrustrum$[ebp+eax+4]
  081d5	e8 00 00 00 00	 call	 __ftol2_sse
  081da	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  081dd	0f bf 91 46 01
	00 00		 movsx	 edx, WORD PTR [ecx+326]
  081e4	03 c2		 add	 eax, edx
  081e6	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _i$235751[ebp]
  081ec	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  081ef	89 84 8a 04 11
	00 00		 mov	 DWORD PTR [edx+ecx*4+4356], eax

; 3795 : 	}

  081f6	e9 52 ff ff ff	 jmp	 $LN2@MLS_SkillF@3
$LN1@MLS_SkillF@3:

; 3796 : }

  081fb	5f		 pop	 edi
  081fc	5e		 pop	 esi
  081fd	5b		 pop	 ebx
  081fe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  08201	33 cd		 xor	 ecx, ebp
  08203	e8 00 00 00 00	 call	 @__security_check_cookie@4
  08208	8b e5		 mov	 esp, ebp
  0820a	5d		 pop	 ebp
  0820b	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum
_TEXT	ENDS
PUBLIC	__real@3fc00000
PUBLIC	__real@3ff0000000000000
EXTRN	?SkillTestFrustrum@@YAHHHH@Z:PROC		; SkillTestFrustrum
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv256 = -116						; size = 4
tv252 = -116						; size = 4
_CallMonIndex$235789 = -48				; size = 4
_EnableAttack$ = -44					; size = 4
_DuelIndex$ = -40					; size = 4
_attackcheck$ = -36					; size = 4
_loopcount$ = -32					; size = 4
_count$ = -28						; size = 4
_fSkillDist$ = -24					; size = 4
_fangle$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_StartDis$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_isCombo$ = 20						; size = 4
?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_KnightBlow
; _this$ = ecx

; 3799 : {

  08210	55		 push	 ebp
  08211	8b ec		 mov	 ebp, esp
  08213	83 ec 74	 sub	 esp, 116		; 00000074H
  08216	53		 push	 ebx
  08217	56		 push	 esi
  08218	57		 push	 edi
  08219	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3800 : 	LPOBJ lpObj = &gObj[aIndex];

  0821c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0821f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08225	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0822b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 3801 : 	int StartDis = 1;

  0822e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _StartDis$[ebp], 1

; 3802 : 	int tObjNum;
; 3803 : 
; 3804 : 	float fangle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  08235	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  08238	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0823e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08244	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0824c	52		 push	 edx
  0824d	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  08250	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08256	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0825c	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  08264	52		 push	 edx
  08265	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08268	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0826f	51		 push	 ecx
  08270	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08273	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  0827a	50		 push	 eax
  0827b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0827e	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
  08283	89 45 8c	 mov	 DWORD PTR tv252[ebp], eax
  08286	db 45 8c	 fild	 DWORD PTR tv252[ebp]
  08289	d9 5d ec	 fstp	 DWORD PTR _fangle$[ebp]

; 3805 : 	float fSkillDist = MagicDamageC.GetSkillDistance(lpMagic->m_Skill)+1.0f;

  0828c	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0828f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  08292	51		 push	 ecx
  08293	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  08298	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance
  0829d	89 45 8c	 mov	 DWORD PTR tv256[ebp], eax
  082a0	db 45 8c	 fild	 DWORD PTR tv256[ebp]
  082a3	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000
  082a9	d9 5d e8	 fstp	 DWORD PTR _fSkillDist$[ebp]

; 3806 : 
; 3807 : 	this->MLS_SkillFrustrum(aIndex,fangle,1.5f,fSkillDist);

  082ac	51		 push	 ecx
  082ad	d9 45 e8	 fld	 DWORD PTR _fSkillDist$[ebp]
  082b0	d9 1c 24	 fstp	 DWORD PTR [esp]
  082b3	51		 push	 ecx
  082b4	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  082ba	d9 1c 24	 fstp	 DWORD PTR [esp]
  082bd	51		 push	 ecx
  082be	d9 45 ec	 fld	 DWORD PTR _fangle$[ebp]
  082c1	d9 1c 24	 fstp	 DWORD PTR [esp]
  082c4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  082c7	50		 push	 eax
  082c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  082cb	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum

; 3808 : 
; 3809 : 	int count = 0;

  082d0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3810 : 	int loopcount = 0;

  082d7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _loopcount$[ebp], 0

; 3811 : 	int attackcheck;
; 3812 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  082de	6a 01		 push	 1
  082e0	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  082e3	50		 push	 eax
  082e4	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  082e7	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  082eb	52		 push	 edx
  082ec	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  082ef	50		 push	 eax
  082f0	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  082f5	83 c4 10	 add	 esp, 16			; 00000010H

; 3813 : 
; 3814 : 	int DuelIndex = lpObj->m_iDuelUser;

  082f8	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  082fb	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  08301	89 4d d8	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN23@MLS_Knight@2:

; 3815 : 	int EnableAttack;
; 3816 : 
; 3817 : 	while ( true )

  08304	b8 01 00 00 00	 mov	 eax, 1
  08309	85 c0		 test	 eax, eax
  0830b	0f 84 a1 02 00
	00		 je	 $LN22@MLS_Knight@2

; 3818 : 	{
; 3819 : 		if(lpObj->VpPlayer2[count].state != 0)

  08311	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  08314	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08317	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0831a	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  08322	85 d2		 test	 edx, edx
  08324	0f 84 5c 02 00
	00		 je	 $LN3@MLS_Knight@2

; 3820 : 		{
; 3821 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0832a	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  0832d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08330	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08333	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0833b	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 3822 : 
; 3823 : 			if(tObjNum >= 0)

  0833e	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  08342	0f 8c 3e 02 00
	00		 jl	 $LN3@MLS_Knight@2

; 3824 : 			{
; 3825 : 				EnableAttack = 0;

  08348	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 3826 : 
; 3827 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0834f	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  08352	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08355	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08358	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  08360	83 fa 02	 cmp	 edx, 2
  08363	75 25		 jne	 SHORT $LN19@MLS_Knight@2
  08365	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  08368	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0836e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08374	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0837c	7d 0c		 jge	 SHORT $LN19@MLS_Knight@2

; 3828 : 				{
; 3829 : 					EnableAttack = 1;

  0837e	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  08385	e9 23 01 00 00	 jmp	 $LN10@MLS_Knight@2
$LN19@MLS_Knight@2:

; 3830 : 				}
; 3831 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0838a	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0838d	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  08390	74 08		 je	 SHORT $LN16@MLS_Knight@2
  08392	8b 45 d8	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  08395	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  08398	75 0c		 jne	 SHORT $LN17@MLS_Knight@2
$LN16@MLS_Knight@2:

; 3832 : 				{
; 3833 : 					EnableAttack = 1;

  0839a	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  083a1	e9 07 01 00 00	 jmp	 $LN10@MLS_Knight@2
$LN17@MLS_Knight@2:

; 3834 : 				}
; 3835 : 
; 3836 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  083a6	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  083a9	6b c0 0c	 imul	 eax, 12			; 0000000cH
  083ac	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  083af	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  083b7	83 fa 03	 cmp	 edx, 3
  083ba	74 5b		 je	 SHORT $LN14@MLS_Knight@2
  083bc	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  083bf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  083c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  083cb	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  083d3	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  083d6	75 3f		 jne	 SHORT $LN14@MLS_Knight@2
  083d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  083dd	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  083e2	83 f8 07	 cmp	 eax, 7
  083e5	75 30		 jne	 SHORT $LN14@MLS_Knight@2

; 3837 : 				{
; 3838 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  083e7	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  083ea	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  083f1	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  083f4	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  083fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  083ff	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  08407	3b ca		 cmp	 ecx, edx
  08409	74 07		 je	 SHORT $LN13@MLS_Knight@2

; 3839 : 						EnableAttack = 1;

  0840b	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN13@MLS_Knight@2:

; 3840 : 				}
; 3841 : 
; 3842 : 				else

  08412	e9 96 00 00 00	 jmp	 $LN10@MLS_Knight@2
$LN14@MLS_Knight@2:

; 3843 : 				{
; 3844 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  08417	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0841a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08420	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08426	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  08429	89 55 d0	 mov	 DWORD PTR _CallMonIndex$235789[ebp], edx

; 3845 : 
; 3846 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0842c	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0842f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08435	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0843b	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  08440	83 fa 02	 cmp	 edx, 2
  08443	75 40		 jne	 SHORT $LN11@MLS_Knight@2
  08445	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  08448	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0844e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08454	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0845c	7c 27		 jl	 SHORT $LN11@MLS_Knight@2

; 3847 : 					{
; 3848 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0845e	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  08461	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08467	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0846d	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  08474	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0847a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0847f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  08482	89 4d d0	 mov	 DWORD PTR _CallMonIndex$235789[ebp], ecx
$LN11@MLS_Knight@2:

; 3849 : 					}
; 3850 : 
; 3851 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  08485	8b 45 d0	 mov	 eax, DWORD PTR _CallMonIndex$235789[ebp]
  08488	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0848e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08494	50		 push	 eax
  08495	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08498	51		 push	 ecx
  08499	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0849e	83 c4 08	 add	 esp, 8
  084a1	83 f8 01	 cmp	 eax, 1
  084a4	75 07		 jne	 SHORT $LN10@MLS_Knight@2

; 3852 : 					{
; 3853 : 						EnableAttack = 1;

  084a6	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN10@MLS_Knight@2:

; 3854 : 					}
; 3855 : 				}
; 3856 : 
; 3857 : 				if(EnableAttack != 0)

  084ad	83 7d d4 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  084b1	0f 84 cf 00 00
	00		 je	 $LN3@MLS_Knight@2

; 3858 : 				{
; 3859 : 					attackcheck = 0;

  084b7	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 0

; 3860 : 
; 3861 : 					if(loopcount == 0)

  084be	83 7d e0 00	 cmp	 DWORD PTR _loopcount$[ebp], 0
  084c2	75 09		 jne	 SHORT $LN8@MLS_Knight@2

; 3862 : 					{
; 3863 : 						attackcheck = 1;

  084c4	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 1
  084cb	eb 18		 jmp	 SHORT $LN6@MLS_Knight@2
$LN8@MLS_Knight@2:

; 3864 : 					}
; 3865 : 					else if(rand()%3==0)

  084cd	e8 00 00 00 00	 call	 _rand
  084d2	99		 cdq
  084d3	b9 03 00 00 00	 mov	 ecx, 3
  084d8	f7 f9		 idiv	 ecx
  084da	85 d2		 test	 edx, edx
  084dc	75 07		 jne	 SHORT $LN6@MLS_Knight@2

; 3866 : 					{
; 3867 : 						attackcheck = 1;

  084de	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _attackcheck$[ebp], 1
$LN6@MLS_Knight@2:

; 3868 : 					}
; 3869 : 
; 3870 : 					if(attackcheck != 0)

  084e5	83 7d dc 00	 cmp	 DWORD PTR _attackcheck$[ebp], 0
  084e9	0f 84 97 00 00
	00		 je	 $LN3@MLS_Knight@2

; 3871 : 					{
; 3872 : 						if(::SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex))

  084ef	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  084f2	50		 push	 eax
  084f3	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  084f6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  084fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08502	0f bf 84 0a 46
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+326]
  0850a	50		 push	 eax
  0850b	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0850e	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  08514	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0851a	0f bf 84 0a 44
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+324]
  08522	50		 push	 eax
  08523	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  08528	83 c4 0c	 add	 esp, 12			; 0000000cH
  0852b	85 c0		 test	 eax, eax
  0852d	74 57		 je	 SHORT $LN3@MLS_Knight@2

; 3873 : 						{
; 3874 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,0,1,0,isCombo,0,0);

  0852f	6a 00		 push	 0
  08531	6a 00		 push	 0
  08533	8b 45 14	 mov	 eax, DWORD PTR _isCombo$[ebp]
  08536	50		 push	 eax
  08537	6a 00		 push	 0
  08539	6a 01		 push	 1
  0853b	6a 00		 push	 0
  0853d	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  08540	51		 push	 ecx
  08541	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  08544	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0854a	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08550	52		 push	 edx
  08551	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08554	50		 push	 eax
  08555	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0855a	83 c4 24	 add	 esp, 36			; 00000024H

; 3875 : 							if(isCombo != 0)

  0855d	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  08561	74 23		 je	 SHORT $LN3@MLS_Knight@2

; 3876 : 							{
; 3877 : 								GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,gObj[tObjNum].m_Index,1);

  08563	6a 01		 push	 1
  08565	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  08568	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0856e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08574	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  08577	52		 push	 edx
  08578	6a 3b		 push	 59			; 0000003bH
  0857a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0857d	50		 push	 eax
  0857e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  08583	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@MLS_Knight@2:

; 3878 : 							}
; 3879 : 						}
; 3880 : 					}
; 3881 : 				}
; 3882 : 			}
; 3883 : 		}
; 3884 : 
; 3885 : 		count++;

  08586	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  08589	83 c0 01	 add	 eax, 1
  0858c	89 45 e4	 mov	 DWORD PTR _count$[ebp], eax

; 3886 : 		if(count > MAX_VIEWPORT -1)

  0858f	83 7d e4 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  08593	7e 18		 jle	 SHORT $LN1@MLS_Knight@2

; 3887 : 		{
; 3888 : 			loopcount++;

  08595	8b 45 e0	 mov	 eax, DWORD PTR _loopcount$[ebp]
  08598	83 c0 01	 add	 eax, 1
  0859b	89 45 e0	 mov	 DWORD PTR _loopcount$[ebp], eax

; 3889 : 			count = 0;

  0859e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3890 : 			if(loopcount >= 3)

  085a5	83 7d e0 03	 cmp	 DWORD PTR _loopcount$[ebp], 3
  085a9	7c 02		 jl	 SHORT $LN1@MLS_Knight@2

; 3891 : 			{
; 3892 : 				break;

  085ab	eb 05		 jmp	 SHORT $LN22@MLS_Knight@2
$LN1@MLS_Knight@2:

; 3893 : 			}
; 3894 : 		}
; 3895 : 	}

  085ad	e9 52 fd ff ff	 jmp	 $LN23@MLS_Knight@2
$LN22@MLS_Knight@2:

; 3896 : 	return true;

  085b2	b8 01 00 00 00	 mov	 eax, 1

; 3897 : }

  085b7	5f		 pop	 edi
  085b8	5e		 pop	 esi
  085b9	5b		 pop	 ebx
  085ba	8b e5		 mov	 esp, ebp
  085bc	5d		 pop	 ebp
  085bd	c2 10 00	 ret	 16			; 00000010H
?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_KnightBlow
; Function compile flags: /Odtp /ZI
_CallMonIndex$235830 = -36				; size = 4
_EnableAttack$ = -32					; size = 4
_bAttack$ = -28						; size = 4
_HitCount$ = -24					; size = 4
_DuelIndex$ = -20					; size = 4
_count$ = -16						; size = 4
_tObjNum$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
_isCombo$ = 28						; size = 4
?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury
; _this$ = ecx

; 3900 : {

  085c0	55		 push	 ebp
  085c1	8b ec		 mov	 ebp, esp
  085c3	83 ec 64	 sub	 esp, 100		; 00000064H
  085c6	53		 push	 ebx
  085c7	56		 push	 esi
  085c8	57		 push	 edi
  085c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3901 : 	LPOBJ lpObj = &gObj[aIndex];

  085cc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  085cf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  085d5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  085db	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 3902 : 	int tObjNum;
; 3903 : 	int count = 0;

  085de	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3904 : 	int DuelIndex = lpObj->m_iDuelUser;

  085e5	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  085e8	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  085ee	89 4d ec	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 3905 : 	int HitCount = 0;

  085f1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 3906 : 	int bAttack = 0;

  085f8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN23@MLS_SkillB:

; 3907 : 	int EnableAttack;
; 3908 : 
; 3909 : 	while ( true )

  085ff	b8 01 00 00 00	 mov	 eax, 1
  08604	85 c0		 test	 eax, eax
  08606	0f 84 62 02 00
	00		 je	 $LN24@MLS_SkillB

; 3910 : 	{
; 3911 : 		if(lpObj->VpPlayer2[count].state != 0)

  0860c	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0860f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08612	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08615	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0861d	85 d2		 test	 edx, edx
  0861f	0f 84 33 02 00
	00		 je	 $LN21@MLS_SkillB

; 3912 : 		{
; 3913 : 			tObjNum = lpObj->VpPlayer2[count].number;

  08625	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  08628	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0862b	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0862e	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  08636	89 55 f4	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 3914 : 
; 3915 : 			if(tObjNum >= 0)

  08639	83 7d f4 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0863d	0f 8c 15 02 00
	00		 jl	 $LN21@MLS_SkillB

; 3916 : 			{
; 3917 : 				EnableAttack = 0;

  08643	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 3918 : 
; 3919 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0864a	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0864d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08650	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08653	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0865b	83 fa 02	 cmp	 edx, 2
  0865e	75 25		 jne	 SHORT $LN19@MLS_SkillB
  08660	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  08663	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08669	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0866f	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  08677	7d 0c		 jge	 SHORT $LN19@MLS_SkillB

; 3920 : 				{
; 3921 : 					EnableAttack = 1;

  08679	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  08680	e9 23 01 00 00	 jmp	 $LN18@MLS_SkillB
$LN19@MLS_SkillB:

; 3922 : 				}
; 3923 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  08685	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  08688	3b 45 18	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0868b	74 08		 je	 SHORT $LN16@MLS_SkillB
  0868d	8b 45 ec	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  08690	3b 45 f4	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  08693	75 0c		 jne	 SHORT $LN17@MLS_SkillB
$LN16@MLS_SkillB:

; 3924 : 				{
; 3925 : 					EnableAttack = 1;

  08695	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0869c	e9 07 01 00 00	 jmp	 $LN18@MLS_SkillB
$LN17@MLS_SkillB:

; 3926 : 				}
; 3927 : 
; 3928 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  086a1	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  086a4	6b c0 0c	 imul	 eax, 12			; 0000000cH
  086a7	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  086aa	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  086b2	83 fa 03	 cmp	 edx, 3
  086b5	74 5b		 je	 SHORT $LN14@MLS_SkillB
  086b7	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  086ba	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  086c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  086c6	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  086ce	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  086d1	75 3f		 jne	 SHORT $LN14@MLS_SkillB
  086d3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  086d8	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  086dd	83 f8 07	 cmp	 eax, 7
  086e0	75 30		 jne	 SHORT $LN14@MLS_SkillB

; 3929 : 				{
; 3930 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  086e2	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  086e5	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  086ec	8b 55 f4	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  086ef	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  086f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  086fa	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  08702	3b ca		 cmp	 ecx, edx
  08704	74 07		 je	 SHORT $LN13@MLS_SkillB

; 3931 : 						EnableAttack = 1;

  08706	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN13@MLS_SkillB:

; 3932 : 				}
; 3933 : 
; 3934 : 				else

  0870d	e9 96 00 00 00	 jmp	 $LN18@MLS_SkillB
$LN14@MLS_SkillB:

; 3935 : 				{
; 3936 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  08712	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  08715	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0871b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08721	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  08724	89 55 dc	 mov	 DWORD PTR _CallMonIndex$235830[ebp], edx

; 3937 : 
; 3938 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  08727	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0872a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08730	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08736	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0873b	83 fa 02	 cmp	 edx, 2
  0873e	75 40		 jne	 SHORT $LN11@MLS_SkillB
  08740	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  08743	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08749	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0874f	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  08757	7c 27		 jl	 SHORT $LN11@MLS_SkillB

; 3939 : 					{
; 3940 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  08759	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0875c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08762	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08768	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0876f	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  08775	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0877a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0877d	89 4d dc	 mov	 DWORD PTR _CallMonIndex$235830[ebp], ecx
$LN11@MLS_SkillB:

; 3941 : 					}
; 3942 : 
; 3943 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  08780	8b 45 dc	 mov	 eax, DWORD PTR _CallMonIndex$235830[ebp]
  08783	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08789	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0878f	50		 push	 eax
  08790	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08793	51		 push	 ecx
  08794	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  08799	83 c4 08	 add	 esp, 8
  0879c	83 f8 01	 cmp	 eax, 1
  0879f	75 07		 jne	 SHORT $LN18@MLS_SkillB

; 3944 : 					{
; 3945 : 						EnableAttack = 1;

  087a1	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN18@MLS_SkillB:

; 3946 : 					}
; 3947 : 				}
; 3948 : 
; 3949 : 				if(EnableAttack != 0)

  087a8	83 7d e0 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  087ac	0f 84 a6 00 00
	00		 je	 $LN21@MLS_SkillB

; 3950 : 				{
; 3951 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) < 4)

  087b2	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  087b5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  087bb	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  087c1	50		 push	 eax
  087c2	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  087c5	51		 push	 ecx
  087c6	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  087cb	83 c4 08	 add	 esp, 8
  087ce	83 f8 04	 cmp	 eax, 4
  087d1	0f 8d 81 00 00
	00		 jge	 $LN21@MLS_SkillB

; 3952 : 					{
; 3953 : 						bAttack = 0;

  087d7	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 3954 : 
; 3955 : 						if(HitCount > 15)

  087de	83 7d e8 0f	 cmp	 DWORD PTR _HitCount$[ebp], 15 ; 0000000fH
  087e2	7e 07		 jle	 SHORT $LN7@MLS_SkillB

; 3956 : 						{
; 3957 : 							bAttack = 0;

  087e4	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN7@MLS_SkillB:

; 3958 : 						}
; 3959 : 
; 3960 : 						if(HitCount >= 10)

  087eb	83 7d e8 0a	 cmp	 DWORD PTR _HitCount$[ebp], 10 ; 0000000aH
  087ef	7c 1e		 jl	 SHORT $LN6@MLS_SkillB

; 3961 : 						{
; 3962 : 							if(rand()%2)

  087f1	e8 00 00 00 00	 call	 _rand
  087f6	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  087fb	79 05		 jns	 SHORT $LN26@MLS_SkillB
  087fd	48		 dec	 eax
  087fe	83 c8 fe	 or	 eax, -2			; fffffffeH
  08801	40		 inc	 eax
$LN26@MLS_SkillB:
  08802	85 c0		 test	 eax, eax
  08804	74 07		 je	 SHORT $LN5@MLS_SkillB

; 3963 : 							{
; 3964 : 								bAttack = 1;

  08806	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN5@MLS_SkillB:

; 3965 : 							}
; 3966 : 						}
; 3967 : 						else

  0880d	eb 07		 jmp	 SHORT $LN4@MLS_SkillB
$LN6@MLS_SkillB:

; 3968 : 						{
; 3969 : 							bAttack = 1;

  0880f	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN4@MLS_SkillB:

; 3970 : 						}
; 3971 : 
; 3972 : 						if(bAttack != 0)

  08816	83 7d e4 00	 cmp	 DWORD PTR _bAttack$[ebp], 0
  0881a	74 3c		 je	 SHORT $LN21@MLS_SkillB

; 3973 : 						{
; 3974 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,500,lpMagic->m_Skill,isCombo);

  0881c	8b 45 1c	 mov	 eax, DWORD PTR _isCombo$[ebp]
  0881f	50		 push	 eax
  08820	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  08823	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  08826	52		 push	 edx
  08827	68 f4 01 00 00	 push	 500			; 000001f4H
  0882c	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0882f	50		 push	 eax
  08830	6a 32		 push	 50			; 00000032H
  08832	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08835	51		 push	 ecx
  08836	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0883b	83 c4 18	 add	 esp, 24			; 00000018H

; 3975 : 
; 3976 : 							if(isCombo != 0)

  0883e	83 7d 1c 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  08842	74 14		 je	 SHORT $LN21@MLS_SkillB

; 3977 : 							{
; 3978 : 								GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,aIndex,1);

  08844	6a 01		 push	 1
  08846	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  08849	50		 push	 eax
  0884a	6a 3b		 push	 59			; 0000003bH
  0884c	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0884f	51		 push	 ecx
  08850	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  08855	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@MLS_SkillB:

; 3979 : 							}
; 3980 : 						}
; 3981 : 					}
; 3982 : 				}
; 3983 : 			}
; 3984 : 		}
; 3985 : 
; 3986 : 		count++;

  08858	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0885b	83 c0 01	 add	 eax, 1
  0885e	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 3987 : 		if(count > MAX_VIEWPORT -1)

  08861	83 7d f0 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  08865	7e 02		 jle	 SHORT $LN1@MLS_SkillB

; 3988 : 		{
; 3989 : 			break;

  08867	eb 05		 jmp	 SHORT $LN24@MLS_SkillB
$LN1@MLS_SkillB:

; 3990 : 		}
; 3991 : 	}

  08869	e9 91 fd ff ff	 jmp	 $LN23@MLS_SkillB
$LN24@MLS_SkillB:

; 3992 : }

  0886e	5f		 pop	 edi
  0886f	5e		 pop	 esi
  08870	5b		 pop	 ebx
  08871	8b e5		 mov	 esp, ebp
  08873	5d		 pop	 ebp
  08874	c2 18 00	 ret	 24			; 00000018H
?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury
; Function compile flags: /Odtp /ZI
tv86 = -104						; size = 4
tv216 = -100						; size = 4
tv87 = -100						; size = 4
_lpMonster$235861 = -32					; size = 4
_n$235856 = -28						; size = 4
_aMLSkillValue$ = -24					; size = 4
_skill_defense$ = -20					; size = 4
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_skillSuccess$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillDefense
; _this$ = ecx

; 3995 : {

  08880	55		 push	 ebp
  08881	8b ec		 mov	 ebp, esp
  08883	83 ec 68	 sub	 esp, 104		; 00000068H
  08886	53		 push	 ebx
  08887	56		 push	 esi
  08888	57		 push	 edi
  08889	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3996 : 	int skillSuccess = true;

  0888c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 3997 : 	LPOBJ lpObj = &gObj[aIndex];

  08893	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  08896	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0889c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  088a2	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 3998 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  088a5	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  088a8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  088ae	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  088b4	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 3999 : 
; 4000 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  088b7	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  088ba	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  088be	83 f9 01	 cmp	 ecx, 1
  088c1	74 11		 je	 SHORT $LN8@MLS_SkillD
  088c3	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  088c6	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  088cd	75 05		 jne	 SHORT $LN8@MLS_SkillD

; 4001 : 	{
; 4002 : 		return;

  088cf	e9 b3 01 00 00	 jmp	 $LN9@MLS_SkillD
$LN8@MLS_SkillD:

; 4003 : 	}
; 4004 : 
; 4005 : 	if(lpObj->Class != CLASS_ELF)

  088d4	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  088d7	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  088de	83 f9 02	 cmp	 ecx, 2
  088e1	74 05		 je	 SHORT $LN7@MLS_SkillD

; 4006 : 	{
; 4007 : 		return;

  088e3	e9 9f 01 00 00	 jmp	 $LN9@MLS_SkillD
$LN7@MLS_SkillD:

; 4008 : 	}
; 4009 : 
; 4010 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  088e8	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  088eb	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  088f2	83 f9 35	 cmp	 ecx, 53			; 00000035H
  088f5	75 09		 jne	 SHORT $LN13@MLS_SkillD
  088f7	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  088fe	eb 33		 jmp	 SHORT $LN14@MLS_SkillD
$LN13@MLS_SkillD:
  08900	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08903	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0890a	83 f8 12	 cmp	 eax, 18			; 00000012H
  0890d	7d 09		 jge	 SHORT $LN11@MLS_SkillD
  0890f	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
  08916	eb 15		 jmp	 SHORT $LN12@MLS_SkillD
$LN11@MLS_SkillD:
  08918	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0891b	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  08922	33 c0		 xor	 eax, eax
  08924	83 fa 17	 cmp	 edx, 23			; 00000017H
  08927	0f 9e c0	 setle	 al
  0892a	89 45 98	 mov	 DWORD PTR tv86[ebp], eax
$LN12@MLS_SkillD:
  0892d	8b 4d 98	 mov	 ecx, DWORD PTR tv86[ebp]
  08930	89 4d 9c	 mov	 DWORD PTR tv87[ebp], ecx
$LN14@MLS_SkillD:
  08933	83 7d 9c 00	 cmp	 DWORD PTR tv87[ebp], 0
  08937	74 11		 je	 SHORT $LN6@MLS_SkillD
  08939	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0893c	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0893f	8b 10		 mov	 edx, DWORD PTR [eax]
  08941	3b 11		 cmp	 edx, DWORD PTR [ecx]
  08943	74 05		 je	 SHORT $LN6@MLS_SkillD

; 4011 : 	{
; 4012 : 		return;

  08945	e9 3d 01 00 00	 jmp	 $LN9@MLS_SkillD
$LN6@MLS_SkillD:

; 4013 : 	}
; 4014 : 
; 4015 : 	float skill_defense;
; 4016 : 	float aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0894a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0894d	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  08951	51		 push	 ecx
  08952	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  08955	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  08958	50		 push	 eax
  08959	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0895e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  08963	50		 push	 eax
  08964	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08967	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0896c	d9 5d e8	 fstp	 DWORD PTR _aMLSkillValue$[ebp]

; 4017 : 
; 4018 : 	skill_defense = 1+ (lpObj->Energy + lpObj->AddEnergy) / 8;

  0896f	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08972	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  08979	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0897c	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  08983	03 c2		 add	 eax, edx
  08985	99		 cdq
  08986	83 e2 07	 and	 edx, 7
  08989	03 c2		 add	 eax, edx
  0898b	c1 f8 03	 sar	 eax, 3
  0898e	83 c0 01	 add	 eax, 1
  08991	89 45 9c	 mov	 DWORD PTR tv216[ebp], eax
  08994	db 45 9c	 fild	 DWORD PTR tv216[ebp]
  08997	d9 5d ec	 fstp	 DWORD PTR _skill_defense$[ebp]

; 4019 : 	skill_defense += skill_defense*aMLSkillValue/100.0f;

  0899a	d9 45 ec	 fld	 DWORD PTR _skill_defense$[ebp]
  0899d	d8 4d e8	 fmul	 DWORD PTR _aMLSkillValue$[ebp]
  089a0	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  089a6	d8 45 ec	 fadd	 DWORD PTR _skill_defense$[ebp]
  089a9	d9 5d ec	 fstp	 DWORD PTR _skill_defense$[ebp]

; 4020 : 
; 4021 : 	/*if( gObjCheckEffect(lpTargetObj,2,skill_defense,0) == TRUE )
; 4022 : 	{
; 4023 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,0);
; 4024 : 		return;
; 4025 : 	}*/
; 4026 : 
; 4027 : 	gObjApplyBuffEffectDuration(lpTargetObj,2,ADD_OPTION_DEFENSE,skill_defense,0,0,60);

  089ac	6a 3c		 push	 60			; 0000003cH
  089ae	6a 00		 push	 0
  089b0	6a 00		 push	 0
  089b2	d9 45 ec	 fld	 DWORD PTR _skill_defense$[ebp]
  089b5	e8 00 00 00 00	 call	 __ftol2_sse
  089ba	50		 push	 eax
  089bb	6a 03		 push	 3
  089bd	6a 02		 push	 2
  089bf	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  089c2	50		 push	 eax
  089c3	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  089c8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4028 : 
; 4029 : 
; 4030 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  089cb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$235856[ebp], 0
  089d2	eb 09		 jmp	 SHORT $LN5@MLS_SkillD
$LN4@MLS_SkillD:
  089d4	8b 45 e4	 mov	 eax, DWORD PTR _n$235856[ebp]
  089d7	83 c0 01	 add	 eax, 1
  089da	89 45 e4	 mov	 DWORD PTR _n$235856[ebp], eax
$LN5@MLS_SkillD:
  089dd	83 7d e4 4b	 cmp	 DWORD PTR _n$235856[ebp], 75 ; 0000004bH
  089e1	0f 8d 81 00 00
	00		 jge	 $LN3@MLS_SkillD

; 4031 : 	{
; 4032 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  089e7	8b 45 e4	 mov	 eax, DWORD PTR _n$235856[ebp]
  089ea	6b c0 0c	 imul	 eax, 12			; 0000000cH
  089ed	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  089f0	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  089f8	83 fa 02	 cmp	 edx, 2
  089fb	75 66		 jne	 SHORT $LN1@MLS_SkillD
  089fd	8b 45 e4	 mov	 eax, DWORD PTR _n$235856[ebp]
  08a00	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08a03	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08a06	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  08a0e	85 d2		 test	 edx, edx
  08a10	74 51		 je	 SHORT $LN1@MLS_SkillD

; 4033 : 		{
; 4034 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  08a12	8b 45 e4	 mov	 eax, DWORD PTR _n$235856[ebp]
  08a15	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08a18	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08a1b	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  08a23	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  08a29	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08a2f	89 55 e0	 mov	 DWORD PTR _lpMonster$235861[ebp], edx

; 4035 : 			if(lpMonster->m_iCurrentAI != 0)

  08a32	8b 45 e0	 mov	 eax, DWORD PTR _lpMonster$235861[ebp]
  08a35	83 b8 78 1c 00
	00 00		 cmp	 DWORD PTR [eax+7288], 0
  08a3c	74 25		 je	 SHORT $LN1@MLS_SkillD

; 4036 : 			{
; 4037 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_defense)/10);

  08a3e	d9 45 ec	 fld	 DWORD PTR _skill_defense$[ebp]
  08a41	e8 00 00 00 00	 call	 __ftol2_sse
  08a46	99		 cdq
  08a47	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  08a4c	f7 f9		 idiv	 ecx
  08a4e	50		 push	 eax
  08a4f	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08a52	8b 02		 mov	 eax, DWORD PTR [edx]
  08a54	50		 push	 eax
  08a55	8b 4d e0	 mov	 ecx, DWORD PTR _lpMonster$235861[ebp]
  08a58	81 c1 94 1c 00
	00		 add	 ecx, 7316		; 00001c94H
  08a5e	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN1@MLS_SkillD:

; 4038 : 			}
; 4039 : 		}
; 4040 : 	}

  08a63	e9 6c ff ff ff	 jmp	 $LN4@MLS_SkillD
$LN3@MLS_SkillD:

; 4041 : 
; 4042 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  08a68	0f b6 45 f8	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  08a6c	50		 push	 eax
  08a6d	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  08a70	8b 11		 mov	 edx, DWORD PTR [ecx]
  08a72	52		 push	 edx
  08a73	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  08a76	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  08a7a	51		 push	 ecx
  08a7b	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08a7e	52		 push	 edx
  08a7f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  08a84	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@MLS_SkillD:

; 4043 : }

  08a87	5f		 pop	 edi
  08a88	5e		 pop	 esi
  08a89	5b		 pop	 ebx
  08a8a	8b e5		 mov	 esp, ebp
  08a8c	5d		 pop	 ebp
  08a8d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillDefense
; Function compile flags: /Odtp /ZI
tv86 = -104						; size = 4
tv215 = -100						; size = 4
tv87 = -100						; size = 4
_lpMonster$235882 = -32					; size = 4
_n$235877 = -28						; size = 4
_aMLSkillValue$ = -24					; size = 4
_skill_attack$ = -20					; size = 4
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_skillSuccess$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillAttack
; _this$ = ecx

; 4046 : {

  08a90	55		 push	 ebp
  08a91	8b ec		 mov	 ebp, esp
  08a93	83 ec 68	 sub	 esp, 104		; 00000068H
  08a96	53		 push	 ebx
  08a97	56		 push	 esi
  08a98	57		 push	 edi
  08a99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4047 : 	int skillSuccess = true;

  08a9c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 4048 : 	LPOBJ lpObj = &gObj[aIndex];

  08aa3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  08aa6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08aac	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08ab2	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4049 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  08ab5	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  08ab8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08abe	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08ac4	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 4050 : 
; 4051 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  08ac7	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  08aca	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  08ace	83 f9 01	 cmp	 ecx, 1
  08ad1	74 11		 je	 SHORT $LN8@MLS_SkillA@2
  08ad3	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  08ad6	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  08add	75 05		 jne	 SHORT $LN8@MLS_SkillA@2

; 4052 : 	{
; 4053 : 		return;

  08adf	e9 b2 01 00 00	 jmp	 $LN9@MLS_SkillA@2
$LN8@MLS_SkillA@2:

; 4054 : 	}
; 4055 : 
; 4056 : 	if(lpObj->Class != CLASS_ELF)

  08ae4	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08ae7	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  08aee	83 f9 02	 cmp	 ecx, 2
  08af1	74 05		 je	 SHORT $LN7@MLS_SkillA@2

; 4057 : 	{
; 4058 : 		return;

  08af3	e9 9e 01 00 00	 jmp	 $LN9@MLS_SkillA@2
$LN7@MLS_SkillA@2:

; 4059 : 	}
; 4060 : 
; 4061 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  08af8	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08afb	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  08b02	83 f9 35	 cmp	 ecx, 53			; 00000035H
  08b05	75 09		 jne	 SHORT $LN13@MLS_SkillA@2
  08b07	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  08b0e	eb 33		 jmp	 SHORT $LN14@MLS_SkillA@2
$LN13@MLS_SkillA@2:
  08b10	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08b13	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  08b1a	83 f8 12	 cmp	 eax, 18			; 00000012H
  08b1d	7d 09		 jge	 SHORT $LN11@MLS_SkillA@2
  08b1f	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
  08b26	eb 15		 jmp	 SHORT $LN12@MLS_SkillA@2
$LN11@MLS_SkillA@2:
  08b28	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08b2b	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  08b32	33 c0		 xor	 eax, eax
  08b34	83 fa 17	 cmp	 edx, 23			; 00000017H
  08b37	0f 9e c0	 setle	 al
  08b3a	89 45 98	 mov	 DWORD PTR tv86[ebp], eax
$LN12@MLS_SkillA@2:
  08b3d	8b 4d 98	 mov	 ecx, DWORD PTR tv86[ebp]
  08b40	89 4d 9c	 mov	 DWORD PTR tv87[ebp], ecx
$LN14@MLS_SkillA@2:
  08b43	83 7d 9c 00	 cmp	 DWORD PTR tv87[ebp], 0
  08b47	74 11		 je	 SHORT $LN6@MLS_SkillA@2
  08b49	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08b4c	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  08b4f	8b 10		 mov	 edx, DWORD PTR [eax]
  08b51	3b 11		 cmp	 edx, DWORD PTR [ecx]
  08b53	74 05		 je	 SHORT $LN6@MLS_SkillA@2

; 4062 : 	{
; 4063 : 		return;

  08b55	e9 3c 01 00 00	 jmp	 $LN9@MLS_SkillA@2
$LN6@MLS_SkillA@2:

; 4064 : 	}
; 4065 : 
; 4066 : 	float skill_attack;
; 4067 : 	float aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  08b5a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  08b5d	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  08b61	51		 push	 ecx
  08b62	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  08b65	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  08b68	50		 push	 eax
  08b69	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  08b6e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  08b73	50		 push	 eax
  08b74	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08b77	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  08b7c	d9 5d e8	 fstp	 DWORD PTR _aMLSkillValue$[ebp]

; 4068 : 
; 4069 : 	skill_attack = 3 + (lpObj->Energy + lpObj->AddEnergy) / 7;

  08b7f	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08b82	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  08b89	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08b8c	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  08b93	03 c2		 add	 eax, edx
  08b95	99		 cdq
  08b96	b9 07 00 00 00	 mov	 ecx, 7
  08b9b	f7 f9		 idiv	 ecx
  08b9d	83 c0 03	 add	 eax, 3
  08ba0	89 45 9c	 mov	 DWORD PTR tv215[ebp], eax
  08ba3	db 45 9c	 fild	 DWORD PTR tv215[ebp]
  08ba6	d9 5d ec	 fstp	 DWORD PTR _skill_attack$[ebp]

; 4070 : 	skill_attack += skill_attack*aMLSkillValue/100.0f;

  08ba9	d9 45 ec	 fld	 DWORD PTR _skill_attack$[ebp]
  08bac	d8 4d e8	 fmul	 DWORD PTR _aMLSkillValue$[ebp]
  08baf	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  08bb5	d8 45 ec	 fadd	 DWORD PTR _skill_attack$[ebp]
  08bb8	d9 5d ec	 fstp	 DWORD PTR _skill_attack$[ebp]

; 4071 : 
; 4072 : 	/*if( gObjCheckEffect(lpTargetObj,1,skill_attack,0,0) == TRUE )
; 4073 : 	{
; 4074 : 		GCMagicAttackNumberSend(lpObj,420,lpTargetObj->m_Index,0);
; 4075 : 		return;
; 4076 : 	}*/
; 4077 : 
; 4078 : 	gObjApplyBuffEffectDuration(lpTargetObj,1,ADD_OPTION_ATTACK_DAMAGE,skill_attack,0,0,60);

  08bbb	6a 3c		 push	 60			; 0000003cH
  08bbd	6a 00		 push	 0
  08bbf	6a 00		 push	 0
  08bc1	d9 45 ec	 fld	 DWORD PTR _skill_attack$[ebp]
  08bc4	e8 00 00 00 00	 call	 __ftol2_sse
  08bc9	50		 push	 eax
  08bca	6a 02		 push	 2
  08bcc	6a 01		 push	 1
  08bce	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  08bd1	50		 push	 eax
  08bd2	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  08bd7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4079 : 
; 4080 : 
; 4081 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  08bda	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$235877[ebp], 0
  08be1	eb 09		 jmp	 SHORT $LN5@MLS_SkillA@2
$LN4@MLS_SkillA@2:
  08be3	8b 45 e4	 mov	 eax, DWORD PTR _n$235877[ebp]
  08be6	83 c0 01	 add	 eax, 1
  08be9	89 45 e4	 mov	 DWORD PTR _n$235877[ebp], eax
$LN5@MLS_SkillA@2:
  08bec	83 7d e4 4b	 cmp	 DWORD PTR _n$235877[ebp], 75 ; 0000004bH
  08bf0	0f 8d 81 00 00
	00		 jge	 $LN3@MLS_SkillA@2

; 4082 : 	{
; 4083 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  08bf6	8b 45 e4	 mov	 eax, DWORD PTR _n$235877[ebp]
  08bf9	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08bfc	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08bff	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  08c07	83 fa 02	 cmp	 edx, 2
  08c0a	75 66		 jne	 SHORT $LN1@MLS_SkillA@2
  08c0c	8b 45 e4	 mov	 eax, DWORD PTR _n$235877[ebp]
  08c0f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08c12	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08c15	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  08c1d	85 d2		 test	 edx, edx
  08c1f	74 51		 je	 SHORT $LN1@MLS_SkillA@2

; 4084 : 		{
; 4085 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  08c21	8b 45 e4	 mov	 eax, DWORD PTR _n$235877[ebp]
  08c24	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08c27	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08c2a	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  08c32	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  08c38	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08c3e	89 55 e0	 mov	 DWORD PTR _lpMonster$235882[ebp], edx

; 4086 : 			if(lpMonster->m_iCurrentAI != 0)

  08c41	8b 45 e0	 mov	 eax, DWORD PTR _lpMonster$235882[ebp]
  08c44	83 b8 78 1c 00
	00 00		 cmp	 DWORD PTR [eax+7288], 0
  08c4b	74 25		 je	 SHORT $LN1@MLS_SkillA@2

; 4087 : 			{
; 4088 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_attack)/10);

  08c4d	d9 45 ec	 fld	 DWORD PTR _skill_attack$[ebp]
  08c50	e8 00 00 00 00	 call	 __ftol2_sse
  08c55	99		 cdq
  08c56	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  08c5b	f7 f9		 idiv	 ecx
  08c5d	50		 push	 eax
  08c5e	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08c61	8b 02		 mov	 eax, DWORD PTR [edx]
  08c63	50		 push	 eax
  08c64	8b 4d e0	 mov	 ecx, DWORD PTR _lpMonster$235882[ebp]
  08c67	81 c1 94 1c 00
	00		 add	 ecx, 7316		; 00001c94H
  08c6d	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN1@MLS_SkillA@2:

; 4089 : 			}
; 4090 : 		}
; 4091 : 	}

  08c72	e9 6c ff ff ff	 jmp	 $LN4@MLS_SkillA@2
$LN3@MLS_SkillA@2:

; 4092 : 
; 4093 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  08c77	0f b6 45 f8	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  08c7b	50		 push	 eax
  08c7c	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  08c7f	8b 11		 mov	 edx, DWORD PTR [ecx]
  08c81	52		 push	 edx
  08c82	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  08c85	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  08c89	51		 push	 ecx
  08c8a	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08c8d	52		 push	 edx
  08c8e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  08c93	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@MLS_SkillA@2:

; 4094 : }

  08c96	5f		 pop	 edi
  08c97	5e		 pop	 esi
  08c98	5b		 pop	 ebx
  08c99	8b e5		 mov	 esp, ebp
  08c9b	5d		 pop	 ebp
  08c9c	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillAttack
; Function compile flags: /Odtp /ZI
tv86 = -108						; size = 4
tv215 = -104						; size = 4
tv87 = -104						; size = 4
_lpMonster$235904 = -36					; size = 4
_n$235899 = -32						; size = 4
_nTime$ = -28						; size = 4
_aMLSkillValue$ = -24					; size = 4
_skill_attack$ = -20					; size = 4
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_skillSuccess$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack
; _this$ = ecx

; 4097 : {

  08ca0	55		 push	 ebp
  08ca1	8b ec		 mov	 ebp, esp
  08ca3	83 ec 6c	 sub	 esp, 108		; 0000006cH
  08ca6	53		 push	 ebx
  08ca7	56		 push	 esi
  08ca8	57		 push	 edi
  08ca9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4098 : 	//int skillSuccess = true;
; 4099 : 	//LPOBJ lpObj = &gObj[aIndex];
; 4100 : 	//LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 4101 : 
; 4102 : 	//if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)
; 4103 : 	//{
; 4104 : 	//	return;
; 4105 : 	//}
; 4106 : 
; 4107 : 	//if(lpObj->Class != CLASS_ELF)
; 4108 : 	//{
; 4109 : 	//	return;
; 4110 : 	//}
; 4111 : 
; 4112 : 	//if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)
; 4113 : 	//{
; 4114 : 	//	return;
; 4115 : 	//}
; 4116 : 
; 4117 : 	//float skill_attack;
; 4118 : 	//float fValue;
; 4119 : 	//float aMLSkillValue = 0;
; 4120 : 	//
; 4121 : 	//int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);
; 4122 : 
; 4123 : 	//if( iPreSkill > 0 )
; 4124 : 	//{
; 4125 : 	//	int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);
; 4126 : 
; 4127 : 	//	if( iPreLevel > 0 )
; 4128 : 	//	{
; 4129 : 	//		aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);
; 4130 : 	//	}
; 4131 : 	//}
; 4132 : 
; 4133 : 	//fValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);
; 4134 : 
; 4135 : 	//skill_attack = 3 + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_ElfAttackEffectDiv;
; 4136 : 	//skill_attack += skill_attack*(aMLSkillValue+fValue)/100.0f;
; 4137 : 
; 4138 : 	//if( g_SkillAdditionInfo.m_ElfAttackEffectMax > 0 && skill_attack > g_SkillAdditionInfo.m_ElfAttackEffectMax )
; 4139 : 	//{
; 4140 : 	//	skill_attack = g_SkillAdditionInfo.m_ElfAttackEffectMax;
; 4141 : 	//}
; 4142 : 
; 4143 : 	///*if( gObjCheckEffect(lpTargetObj,1,skill_attack,0,0) == TRUE )
; 4144 : 	//{
; 4145 : 	//	GCMagicAttackNumberSend(lpObj,420,lpTargetObj->m_Index,0);
; 4146 : 	//	return;
; 4147 : 	//}*/
; 4148 : 
; 4149 : 	//int nTime = g_SkillAdditionInfo.m_ElfAttackTime + fValue;
; 4150 : 
; 4151 : 	//gObjApplyBuffEffectDuration(lpTargetObj,1,ADD_OPTION_ATTACK_DAMAGE,skill_attack,0,0,nTime);
; 4152 : 
; 4153 : 
; 4154 : 	//for(int n = 0; n < MAX_VIEWPORT; n++)
; 4155 : 	//{
; 4156 : 	//	if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)
; 4157 : 	//	{
; 4158 : 	//		LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];
; 4159 : 	//		if(lpMonster->m_iCurrentAI != 0)
; 4160 : 	//		{
; 4161 : 	//			lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_attack)/10);
; 4162 : 	//		}
; 4163 : 	//	}
; 4164 : 	//}
; 4165 : 
; 4166 : 	//GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);
; 4167 : 
; 4168 : 	int skillSuccess = true;

  08cac	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 4169 : 	LPOBJ lpObj = &gObj[aIndex];

  08cb3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  08cb6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08cbc	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08cc2	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4170 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  08cc5	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  08cc8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08cce	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08cd4	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 4171 : 
; 4172 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  08cd7	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  08cda	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  08cde	83 f9 01	 cmp	 ecx, 1
  08ce1	74 11		 je	 SHORT $LN8@MLS_SkillS@19
  08ce3	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  08ce6	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  08ced	75 05		 jne	 SHORT $LN8@MLS_SkillS@19

; 4173 : 	{
; 4174 : 		return;

  08cef	e9 bc 01 00 00	 jmp	 $LN9@MLS_SkillS@19
$LN8@MLS_SkillS@19:

; 4175 : 	}
; 4176 : 
; 4177 : 	if(lpObj->Class != CLASS_ELF)

  08cf4	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08cf7	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  08cfe	83 f9 02	 cmp	 ecx, 2
  08d01	74 05		 je	 SHORT $LN7@MLS_SkillS@19

; 4178 : 	{
; 4179 : 		return;

  08d03	e9 a8 01 00 00	 jmp	 $LN9@MLS_SkillS@19
$LN7@MLS_SkillS@19:

; 4180 : 	}
; 4181 : 
; 4182 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  08d08	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08d0b	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  08d12	83 f9 35	 cmp	 ecx, 53			; 00000035H
  08d15	75 09		 jne	 SHORT $LN13@MLS_SkillS@19
  08d17	c7 45 98 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  08d1e	eb 33		 jmp	 SHORT $LN14@MLS_SkillS@19
$LN13@MLS_SkillS@19:
  08d20	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08d23	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  08d2a	83 f8 12	 cmp	 eax, 18			; 00000012H
  08d2d	7d 09		 jge	 SHORT $LN11@MLS_SkillS@19
  08d2f	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
  08d36	eb 15		 jmp	 SHORT $LN12@MLS_SkillS@19
$LN11@MLS_SkillS@19:
  08d38	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08d3b	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  08d42	33 c0		 xor	 eax, eax
  08d44	83 fa 17	 cmp	 edx, 23			; 00000017H
  08d47	0f 9e c0	 setle	 al
  08d4a	89 45 94	 mov	 DWORD PTR tv86[ebp], eax
$LN12@MLS_SkillS@19:
  08d4d	8b 4d 94	 mov	 ecx, DWORD PTR tv86[ebp]
  08d50	89 4d 98	 mov	 DWORD PTR tv87[ebp], ecx
$LN14@MLS_SkillS@19:
  08d53	83 7d 98 00	 cmp	 DWORD PTR tv87[ebp], 0
  08d57	74 11		 je	 SHORT $LN6@MLS_SkillS@19
  08d59	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08d5c	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  08d5f	8b 10		 mov	 edx, DWORD PTR [eax]
  08d61	3b 11		 cmp	 edx, DWORD PTR [ecx]
  08d63	74 05		 je	 SHORT $LN6@MLS_SkillS@19

; 4183 : 	{
; 4184 : 		return;

  08d65	e9 46 01 00 00	 jmp	 $LN9@MLS_SkillS@19
$LN6@MLS_SkillS@19:

; 4185 : 	}
; 4186 : 
; 4187 : 	float skill_attack;
; 4188 : 	float aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  08d6a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  08d6d	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  08d71	51		 push	 ecx
  08d72	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  08d75	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  08d78	50		 push	 eax
  08d79	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  08d7e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  08d83	50		 push	 eax
  08d84	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08d87	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  08d8c	d9 5d e8	 fstp	 DWORD PTR _aMLSkillValue$[ebp]

; 4189 : 
; 4190 : 	skill_attack = 3 + (lpObj->Energy + lpObj->AddEnergy) / 7;

  08d8f	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08d92	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  08d99	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08d9c	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  08da3	03 c2		 add	 eax, edx
  08da5	99		 cdq
  08da6	b9 07 00 00 00	 mov	 ecx, 7
  08dab	f7 f9		 idiv	 ecx
  08dad	83 c0 03	 add	 eax, 3
  08db0	89 45 98	 mov	 DWORD PTR tv215[ebp], eax
  08db3	db 45 98	 fild	 DWORD PTR tv215[ebp]
  08db6	d9 5d ec	 fstp	 DWORD PTR _skill_attack$[ebp]

; 4191 : 	skill_attack += skill_attack*aMLSkillValue/100.0f;

  08db9	d9 45 ec	 fld	 DWORD PTR _skill_attack$[ebp]
  08dbc	d8 4d e8	 fmul	 DWORD PTR _aMLSkillValue$[ebp]
  08dbf	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  08dc5	d8 45 ec	 fadd	 DWORD PTR _skill_attack$[ebp]
  08dc8	d9 5d ec	 fstp	 DWORD PTR _skill_attack$[ebp]

; 4192 : 
; 4193 : 	/*if( gObjCheckEffect(lpTargetObj,1,skill_attack,0,0) == TRUE )
; 4194 : 	{
; 4195 : 		GCMagicAttackNumberSend(lpObj,420,lpTargetObj->m_Index,0);
; 4196 : 		return;
; 4197 : 	}*/
; 4198 : 
; 4199 : #ifdef SKILL_ELF_ADD_DAMAGE
; 4200 : 	int nTime = g_SkillAdditionInfo.m_ElfAttackTime;

  08dcb	a1 a0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3232
  08dd0	89 45 e4	 mov	 DWORD PTR _nTime$[ebp], eax

; 4201 : 	gObjApplyBuffEffectDuration(lpTargetObj,1,ADD_OPTION_ATTACK_DAMAGE,skill_attack,0,0,nTime);

  08dd3	8b 45 e4	 mov	 eax, DWORD PTR _nTime$[ebp]
  08dd6	50		 push	 eax
  08dd7	6a 00		 push	 0
  08dd9	6a 00		 push	 0
  08ddb	d9 45 ec	 fld	 DWORD PTR _skill_attack$[ebp]
  08dde	e8 00 00 00 00	 call	 __ftol2_sse
  08de3	50		 push	 eax
  08de4	6a 02		 push	 2
  08de6	6a 01		 push	 1
  08de8	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  08deb	51		 push	 ecx
  08dec	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  08df1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4202 : #else
; 4203 : 	gObjApplyBuffEffectDuration(lpTargetObj,1,ADD_OPTION_ATTACK_DAMAGE,skill_attack,0,0,60);
; 4204 : #endif
; 4205 : 
; 4206 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  08df4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _n$235899[ebp], 0
  08dfb	eb 09		 jmp	 SHORT $LN5@MLS_SkillS@19
$LN4@MLS_SkillS@19:
  08dfd	8b 45 e0	 mov	 eax, DWORD PTR _n$235899[ebp]
  08e00	83 c0 01	 add	 eax, 1
  08e03	89 45 e0	 mov	 DWORD PTR _n$235899[ebp], eax
$LN5@MLS_SkillS@19:
  08e06	83 7d e0 4b	 cmp	 DWORD PTR _n$235899[ebp], 75 ; 0000004bH
  08e0a	0f 8d 81 00 00
	00		 jge	 $LN3@MLS_SkillS@19

; 4207 : 	{
; 4208 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  08e10	8b 45 e0	 mov	 eax, DWORD PTR _n$235899[ebp]
  08e13	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08e16	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08e19	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  08e21	83 fa 02	 cmp	 edx, 2
  08e24	75 66		 jne	 SHORT $LN1@MLS_SkillS@19
  08e26	8b 45 e0	 mov	 eax, DWORD PTR _n$235899[ebp]
  08e29	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08e2c	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08e2f	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  08e37	85 d2		 test	 edx, edx
  08e39	74 51		 je	 SHORT $LN1@MLS_SkillS@19

; 4209 : 		{
; 4210 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  08e3b	8b 45 e0	 mov	 eax, DWORD PTR _n$235899[ebp]
  08e3e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  08e41	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08e44	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  08e4c	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  08e52	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08e58	89 55 dc	 mov	 DWORD PTR _lpMonster$235904[ebp], edx

; 4211 : 			if(lpMonster->m_iCurrentAI != 0)

  08e5b	8b 45 dc	 mov	 eax, DWORD PTR _lpMonster$235904[ebp]
  08e5e	83 b8 78 1c 00
	00 00		 cmp	 DWORD PTR [eax+7288], 0
  08e65	74 25		 je	 SHORT $LN1@MLS_SkillS@19

; 4212 : 			{
; 4213 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_attack)/10);

  08e67	d9 45 ec	 fld	 DWORD PTR _skill_attack$[ebp]
  08e6a	e8 00 00 00 00	 call	 __ftol2_sse
  08e6f	99		 cdq
  08e70	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  08e75	f7 f9		 idiv	 ecx
  08e77	50		 push	 eax
  08e78	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08e7b	8b 02		 mov	 eax, DWORD PTR [edx]
  08e7d	50		 push	 eax
  08e7e	8b 4d dc	 mov	 ecx, DWORD PTR _lpMonster$235904[ebp]
  08e81	81 c1 94 1c 00
	00		 add	 ecx, 7316		; 00001c94H
  08e87	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN1@MLS_SkillS@19:

; 4214 : 			}
; 4215 : 		}
; 4216 : 	}

  08e8c	e9 6c ff ff ff	 jmp	 $LN4@MLS_SkillS@19
$LN3@MLS_SkillS@19:

; 4217 : 
; 4218 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  08e91	0f b6 45 f8	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  08e95	50		 push	 eax
  08e96	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  08e99	8b 11		 mov	 edx, DWORD PTR [ecx]
  08e9b	52		 push	 edx
  08e9c	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  08e9f	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  08ea3	51		 push	 ecx
  08ea4	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08ea7	52		 push	 edx
  08ea8	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  08ead	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@MLS_SkillS@19:

; 4219 : 
; 4220 : }

  08eb0	5f		 pop	 edi
  08eb1	5e		 pop	 esi
  08eb2	5b		 pop	 ebx
  08eb3	8b e5		 mov	 esp, ebp
  08eb5	5d		 pop	 ebp
  08eb6	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack
; Function compile flags: /Odtp /ZI
tv277 = -120						; size = 8
tv273 = -120						; size = 8
tv265 = -120						; size = 8
tv86 = -120						; size = 4
tv261 = -116						; size = 4
tv87 = -116						; size = 4
_lpMonster$235932 = -48					; size = 4
_n$235927 = -44						; size = 4
_nTime$ = -40						; size = 4
_iPreLevel$235923 = -36					; size = 4
_iPreSkill$ = -32					; size = 4
_aMLSkillValue$ = -28					; size = 4
_fValue$ = -24						; size = 4
_skill_defense$ = -20					; size = 4
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_skillSuccess$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense
; _this$ = ecx

; 4223 : {

  08ec0	55		 push	 ebp
  08ec1	8b ec		 mov	 ebp, esp
  08ec3	83 ec 78	 sub	 esp, 120		; 00000078H
  08ec6	53		 push	 ebx
  08ec7	56		 push	 esi
  08ec8	57		 push	 edi
  08ec9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4224 : 	int skillSuccess = true;

  08ecc	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 4225 : 	LPOBJ lpObj = &gObj[aIndex];

  08ed3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  08ed6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08edc	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08ee2	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4226 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  08ee5	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  08ee8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  08eee	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  08ef4	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 4227 : 
; 4228 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  08ef7	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  08efa	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  08efe	83 f9 01	 cmp	 ecx, 1
  08f01	74 11		 je	 SHORT $LN11@MLS_SkillS@20
  08f03	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  08f06	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  08f0d	75 05		 jne	 SHORT $LN11@MLS_SkillS@20

; 4229 : 	{
; 4230 : 		return;

  08f0f	e9 6c 02 00 00	 jmp	 $LN12@MLS_SkillS@20
$LN11@MLS_SkillS@20:

; 4231 : 	}
; 4232 : 
; 4233 : 	if(lpObj->Class != CLASS_ELF)

  08f14	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08f17	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  08f1e	83 f9 02	 cmp	 ecx, 2
  08f21	74 05		 je	 SHORT $LN10@MLS_SkillS@20

; 4234 : 	{
; 4235 : 		return;

  08f23	e9 58 02 00 00	 jmp	 $LN12@MLS_SkillS@20
$LN10@MLS_SkillS@20:

; 4236 : 	}
; 4237 : 
; 4238 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  08f28	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08f2b	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  08f32	83 f9 35	 cmp	 ecx, 53			; 00000035H
  08f35	75 09		 jne	 SHORT $LN16@MLS_SkillS@20
  08f37	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  08f3e	eb 33		 jmp	 SHORT $LN17@MLS_SkillS@20
$LN16@MLS_SkillS@20:
  08f40	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08f43	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  08f4a	83 f8 12	 cmp	 eax, 18			; 00000012H
  08f4d	7d 09		 jge	 SHORT $LN14@MLS_SkillS@20
  08f4f	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
  08f56	eb 15		 jmp	 SHORT $LN15@MLS_SkillS@20
$LN14@MLS_SkillS@20:
  08f58	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08f5b	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  08f62	33 c0		 xor	 eax, eax
  08f64	83 fa 17	 cmp	 edx, 23			; 00000017H
  08f67	0f 9e c0	 setle	 al
  08f6a	89 45 88	 mov	 DWORD PTR tv86[ebp], eax
$LN15@MLS_SkillS@20:
  08f6d	8b 4d 88	 mov	 ecx, DWORD PTR tv86[ebp]
  08f70	89 4d 8c	 mov	 DWORD PTR tv87[ebp], ecx
$LN17@MLS_SkillS@20:
  08f73	83 7d 8c 00	 cmp	 DWORD PTR tv87[ebp], 0
  08f77	74 11		 je	 SHORT $LN9@MLS_SkillS@20
  08f79	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  08f7c	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  08f7f	8b 10		 mov	 edx, DWORD PTR [eax]
  08f81	3b 11		 cmp	 edx, DWORD PTR [ecx]
  08f83	74 05		 je	 SHORT $LN9@MLS_SkillS@20

; 4239 : 	{
; 4240 : 		return;

  08f85	e9 f6 01 00 00	 jmp	 $LN12@MLS_SkillS@20
$LN9@MLS_SkillS@20:

; 4241 : 	}
; 4242 : 
; 4243 : 	float skill_defense;
; 4244 : 	float fValue;
; 4245 : 	float aMLSkillValue;
; 4246 : 	
; 4247 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  08f8a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  08f8d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  08f90	51		 push	 ecx
  08f91	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  08f94	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  08f9b	50		 push	 eax
  08f9c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08f9f	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
  08fa4	89 45 e0	 mov	 DWORD PTR _iPreSkill$[ebp], eax

; 4248 : 
; 4249 : 	if( iPreSkill > 0 )

  08fa7	83 7d e0 00	 cmp	 DWORD PTR _iPreSkill$[ebp], 0
  08fab	7e 37		 jle	 SHORT $LN7@MLS_SkillS@20

; 4250 : 	{
; 4251 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  08fad	8b 45 e0	 mov	 eax, DWORD PTR _iPreSkill$[ebp]
  08fb0	50		 push	 eax
  08fb1	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  08fb4	51		 push	 ecx
  08fb5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08fb8	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
  08fbd	89 45 dc	 mov	 DWORD PTR _iPreLevel$235923[ebp], eax

; 4252 : 
; 4253 : 		if( iPreLevel > 0 )

  08fc0	83 7d dc 00	 cmp	 DWORD PTR _iPreLevel$235923[ebp], 0
  08fc4	7e 1e		 jle	 SHORT $LN7@MLS_SkillS@20

; 4254 : 		{
; 4255 : 			aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);

  08fc6	8b 45 dc	 mov	 eax, DWORD PTR _iPreLevel$235923[ebp]
  08fc9	50		 push	 eax
  08fca	8b 4d e0	 mov	 ecx, DWORD PTR _iPreSkill$[ebp]
  08fcd	51		 push	 ecx
  08fce	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  08fd3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  08fd8	50		 push	 eax
  08fd9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08fdc	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  08fe1	d9 5d e4	 fstp	 DWORD PTR _aMLSkillValue$[ebp]
$LN7@MLS_SkillS@20:

; 4256 : 		}
; 4257 : 	}
; 4258 : 	
; 4259 : 	fValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  08fe4	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  08fe7	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  08feb	51		 push	 ecx
  08fec	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  08fef	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  08ff2	50		 push	 eax
  08ff3	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  08ff8	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  08ffd	50		 push	 eax
  08ffe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  09001	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  09006	d9 5d e8	 fstp	 DWORD PTR _fValue$[ebp]

; 4260 : 
; 4261 : 	skill_defense = 1+ (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_ElfDefenseEffectDiv;

  09009	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0900c	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  09013	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09016	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  0901d	03 c2		 add	 eax, edx
  0901f	0f b7 0d 8e 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3214
  09026	99		 cdq
  09027	f7 f9		 idiv	 ecx
  09029	83 c0 01	 add	 eax, 1
  0902c	89 45 8c	 mov	 DWORD PTR tv261[ebp], eax
  0902f	db 45 8c	 fild	 DWORD PTR tv261[ebp]
  09032	d9 5d ec	 fstp	 DWORD PTR _skill_defense$[ebp]

; 4262 : 	skill_defense += skill_defense*(fValue+aMLSkillValue)/100.0f;

  09035	d9 45 e8	 fld	 DWORD PTR _fValue$[ebp]
  09038	d8 45 e4	 fadd	 DWORD PTR _aMLSkillValue$[ebp]
  0903b	d8 4d ec	 fmul	 DWORD PTR _skill_defense$[ebp]
  0903e	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  09044	d8 45 ec	 fadd	 DWORD PTR _skill_defense$[ebp]
  09047	d9 5d ec	 fstp	 DWORD PTR _skill_defense$[ebp]

; 4263 : 
; 4264 : 	if( g_SkillAdditionInfo.m_ElfDefenseEffectMax > 0 && skill_defense > g_SkillAdditionInfo.m_ElfDefenseEffectMax )

  0904a	83 3d 90 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3216, 0
  09051	76 33		 jbe	 SHORT $LN6@MLS_SkillS@20
  09053	a1 90 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3216
  09058	89 45 88	 mov	 DWORD PTR tv265[ebp], eax
  0905b	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv265[ebp+4], 0
  09062	df 6d 88	 fild	 QWORD PTR tv265[ebp]
  09065	d9 45 ec	 fld	 DWORD PTR _skill_defense$[ebp]
  09068	de d9		 fcompp
  0906a	df e0		 fnstsw	 ax
  0906c	f6 c4 41	 test	 ah, 65			; 00000041H
  0906f	75 15		 jne	 SHORT $LN6@MLS_SkillS@20

; 4265 : 	{
; 4266 : 		skill_defense = g_SkillAdditionInfo.m_ElfDefenseEffectMax;

  09071	a1 90 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3216
  09076	89 45 88	 mov	 DWORD PTR tv273[ebp], eax
  09079	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv273[ebp+4], 0
  09080	df 6d 88	 fild	 QWORD PTR tv273[ebp]
  09083	d9 5d ec	 fstp	 DWORD PTR _skill_defense$[ebp]
$LN6@MLS_SkillS@20:

; 4267 : 	}
; 4268 : 
; 4269 : 	/*if( gObjCheckEffect(lpTargetObj,2,skill_defense,0) == TRUE )
; 4270 : 	{
; 4271 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,0);
; 4272 : 		return;
; 4273 : 	}*/
; 4274 : 
; 4275 : 	int nTime = g_SkillAdditionInfo.m_ElfDefenseTime + fValue;

  09086	a1 94 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3220
  0908b	89 45 88	 mov	 DWORD PTR tv277[ebp], eax
  0908e	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv277[ebp+4], 0
  09095	df 6d 88	 fild	 QWORD PTR tv277[ebp]
  09098	d8 45 e8	 fadd	 DWORD PTR _fValue$[ebp]
  0909b	e8 00 00 00 00	 call	 __ftol2_sse
  090a0	89 45 d8	 mov	 DWORD PTR _nTime$[ebp], eax

; 4276 : 	gObjApplyBuffEffectDuration(lpTargetObj,2,ADD_OPTION_DEFENSE,skill_defense,0,0,nTime);

  090a3	8b 45 d8	 mov	 eax, DWORD PTR _nTime$[ebp]
  090a6	50		 push	 eax
  090a7	6a 00		 push	 0
  090a9	6a 00		 push	 0
  090ab	d9 45 ec	 fld	 DWORD PTR _skill_defense$[ebp]
  090ae	e8 00 00 00 00	 call	 __ftol2_sse
  090b3	50		 push	 eax
  090b4	6a 03		 push	 3
  090b6	6a 02		 push	 2
  090b8	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  090bb	51		 push	 ecx
  090bc	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  090c1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4277 : 
; 4278 : 
; 4279 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  090c4	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _n$235927[ebp], 0
  090cb	eb 09		 jmp	 SHORT $LN5@MLS_SkillS@20
$LN4@MLS_SkillS@20:
  090cd	8b 45 d4	 mov	 eax, DWORD PTR _n$235927[ebp]
  090d0	83 c0 01	 add	 eax, 1
  090d3	89 45 d4	 mov	 DWORD PTR _n$235927[ebp], eax
$LN5@MLS_SkillS@20:
  090d6	83 7d d4 4b	 cmp	 DWORD PTR _n$235927[ebp], 75 ; 0000004bH
  090da	0f 8d 81 00 00
	00		 jge	 $LN3@MLS_SkillS@20

; 4280 : 	{
; 4281 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  090e0	8b 45 d4	 mov	 eax, DWORD PTR _n$235927[ebp]
  090e3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  090e6	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  090e9	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  090f1	83 fa 02	 cmp	 edx, 2
  090f4	75 66		 jne	 SHORT $LN1@MLS_SkillS@20
  090f6	8b 45 d4	 mov	 eax, DWORD PTR _n$235927[ebp]
  090f9	6b c0 0c	 imul	 eax, 12			; 0000000cH
  090fc	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  090ff	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  09107	85 d2		 test	 edx, edx
  09109	74 51		 je	 SHORT $LN1@MLS_SkillS@20

; 4282 : 		{
; 4283 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  0910b	8b 45 d4	 mov	 eax, DWORD PTR _n$235927[ebp]
  0910e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09111	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09114	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0911c	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  09122	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09128	89 55 d0	 mov	 DWORD PTR _lpMonster$235932[ebp], edx

; 4284 : 			if(lpMonster->m_iCurrentAI != 0)

  0912b	8b 45 d0	 mov	 eax, DWORD PTR _lpMonster$235932[ebp]
  0912e	83 b8 78 1c 00
	00 00		 cmp	 DWORD PTR [eax+7288], 0
  09135	74 25		 je	 SHORT $LN1@MLS_SkillS@20

; 4285 : 			{
; 4286 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_defense)/10);

  09137	d9 45 ec	 fld	 DWORD PTR _skill_defense$[ebp]
  0913a	e8 00 00 00 00	 call	 __ftol2_sse
  0913f	99		 cdq
  09140	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  09145	f7 f9		 idiv	 ecx
  09147	50		 push	 eax
  09148	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0914b	8b 02		 mov	 eax, DWORD PTR [edx]
  0914d	50		 push	 eax
  0914e	8b 4d d0	 mov	 ecx, DWORD PTR _lpMonster$235932[ebp]
  09151	81 c1 94 1c 00
	00		 add	 ecx, 7316		; 00001c94H
  09157	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN1@MLS_SkillS@20:

; 4287 : 			}
; 4288 : 		}
; 4289 : 	}

  0915c	e9 6c ff ff ff	 jmp	 $LN4@MLS_SkillS@20
$LN3@MLS_SkillS@20:

; 4290 : 
; 4291 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  09161	0f b6 45 f8	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  09165	50		 push	 eax
  09166	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  09169	8b 11		 mov	 edx, DWORD PTR [ecx]
  0916b	52		 push	 edx
  0916c	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0916f	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  09173	51		 push	 ecx
  09174	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  09177	52		 push	 edx
  09178	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0917d	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@MLS_SkillS@20:

; 4292 : }

  09180	5f		 pop	 edi
  09181	5e		 pop	 esi
  09182	5b		 pop	 ebx
  09183	8b e5		 mov	 esp, ebp
  09185	5d		 pop	 ebp
  09186	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense
_TEXT	ENDS
PUBLIC	?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDown
EXTRN	?retCalcSkillResistance@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; retCalcSkillResistance
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_skillSuccess$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDown
; _this$ = ecx

; 4295 : {

  09190	55		 push	 ebp
  09191	8b ec		 mov	 ebp, esp
  09193	83 ec 50	 sub	 esp, 80			; 00000050H
  09196	53		 push	 ebx
  09197	56		 push	 esi
  09198	57		 push	 edi
  09199	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4296 : 	int skillSuccess = 1;

  0919c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 4297 : 	LPOBJ lpObj = &gObj[aIndex];

  091a3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  091a6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  091ac	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  091b2	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4298 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  091b5	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  091b8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  091be	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  091c4	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 4299 : 
; 4300 : 	if(lpObj->Type == OBJ_USER && lpObj->Class != CLASS_MAGUMSA)

  091c7	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  091ca	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  091ce	83 f9 01	 cmp	 ecx, 1
  091d1	75 11		 jne	 SHORT $LN2@MLS_MaGumS
  091d3	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  091d6	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  091dd	83 f9 03	 cmp	 ecx, 3
  091e0	74 02		 je	 SHORT $LN2@MLS_MaGumS

; 4301 : 	{
; 4302 : 		return;

  091e2	eb 46		 jmp	 SHORT $LN3@MLS_MaGumS
$LN2@MLS_MaGumS:

; 4303 : 	}
; 4304 : 
; 4305 : 	if( retCalcSkillResistance(lpTargetObj,R_POISON) )

  091e4	6a 01		 push	 1
  091e6	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  091e9	50		 push	 eax
  091ea	e8 00 00 00 00	 call	 ?retCalcSkillResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retCalcSkillResistance
  091ef	83 c4 08	 add	 esp, 8
  091f2	85 c0		 test	 eax, eax
  091f4	74 34		 je	 SHORT $LN3@MLS_MaGumS

; 4306 : 	{
; 4307 : 		gObjApplyBuffEffectDuration(lpTargetObj,58,23,10,0,0,10);

  091f6	6a 0a		 push	 10			; 0000000aH
  091f8	6a 00		 push	 0
  091fa	6a 00		 push	 0
  091fc	6a 0a		 push	 10			; 0000000aH
  091fe	6a 17		 push	 23			; 00000017H
  09200	6a 3a		 push	 58			; 0000003aH
  09202	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  09205	50		 push	 eax
  09206	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0920b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4308 : 		GCMagicAttackNumberSend(lpObj,490,lpTargetObj->m_Index,skillSuccess);

  0920e	0f b6 45 f8	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  09212	50		 push	 eax
  09213	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  09216	8b 11		 mov	 edx, DWORD PTR [ecx]
  09218	52		 push	 edx
  09219	68 ea 01 00 00	 push	 490			; 000001eaH
  0921e	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09221	50		 push	 eax
  09222	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  09227	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@MLS_MaGumS:

; 4309 : 	}
; 4310 : }

  0922a	5f		 pop	 edi
  0922b	5e		 pop	 esi
  0922c	5b		 pop	 ebx
  0922d	8b e5		 mov	 esp, ebp
  0922f	5d		 pop	 ebp
  09230	c2 08 00	 ret	 8
?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDown
_TEXT	ENDS
PUBLIC	?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDownMastery
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_fSkillValue$235956 = -24				; size = 4
_nEffectValue$235955 = -20				; size = 4
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_skillSuccess$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDownMastery
; _this$ = ecx

; 4313 : {

  09240	55		 push	 ebp
  09241	8b ec		 mov	 ebp, esp
  09243	83 ec 58	 sub	 esp, 88			; 00000058H
  09246	53		 push	 ebx
  09247	56		 push	 esi
  09248	57		 push	 edi
  09249	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4314 : 	int skillSuccess = 1;

  0924c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 4315 : 	LPOBJ lpObj = &gObj[aIndex];

  09253	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  09256	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0925c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09262	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4316 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  09265	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  09268	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0926e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09274	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 4317 : 
; 4318 : 	if(lpObj->Type == OBJ_USER && lpObj->Class != CLASS_MAGUMSA)

  09277	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0927a	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0927e	83 f9 01	 cmp	 ecx, 1
  09281	75 14		 jne	 SHORT $LN3@MLS_MaGumS@2
  09283	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09286	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0928d	83 f9 03	 cmp	 ecx, 3
  09290	74 05		 je	 SHORT $LN3@MLS_MaGumS@2

; 4319 : 	{
; 4320 : 		return;

  09292	e9 96 00 00 00	 jmp	 $LN4@MLS_MaGumS@2
$LN3@MLS_MaGumS@2:

; 4321 : 	}
; 4322 : 
; 4323 : 	if( retCalcSkillResistance(lpTargetObj,R_POISON) )

  09297	6a 01		 push	 1
  09299	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0929c	50		 push	 eax
  0929d	e8 00 00 00 00	 call	 ?retCalcSkillResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retCalcSkillResistance
  092a2	83 c4 08	 add	 esp, 8
  092a5	85 c0		 test	 eax, eax
  092a7	0f 84 80 00 00
	00		 je	 $LN2@MLS_MaGumS@2

; 4324 : 	{
; 4325 : 		int nEffectValue = 10;

  092ad	c7 45 ec 0a 00
	00 00		 mov	 DWORD PTR _nEffectValue$235955[ebp], 10 ; 0000000aH

; 4326 : 		float fSkillValue = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  092b4	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  092b7	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  092bb	51		 push	 ecx
  092bc	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  092bf	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  092c2	50		 push	 eax
  092c3	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  092c8	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  092cd	50		 push	 eax
  092ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  092d1	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  092d6	d9 5d e8	 fstp	 DWORD PTR _fSkillValue$235956[ebp]

; 4327 : 
; 4328 : 		if( fSkillValue > 0.0f )

  092d9	d9 45 e8	 fld	 DWORD PTR _fSkillValue$235956[ebp]
  092dc	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  092e2	df e0		 fnstsw	 ax
  092e4	f6 c4 41	 test	 ah, 65			; 00000041H
  092e7	75 0e		 jne	 SHORT $LN1@MLS_MaGumS@2

; 4329 : 		{
; 4330 : 			nEffectValue += fSkillValue;

  092e9	db 45 ec	 fild	 DWORD PTR _nEffectValue$235955[ebp]
  092ec	d8 45 e8	 fadd	 DWORD PTR _fSkillValue$235956[ebp]
  092ef	e8 00 00 00 00	 call	 __ftol2_sse
  092f4	89 45 ec	 mov	 DWORD PTR _nEffectValue$235955[ebp], eax
$LN1@MLS_MaGumS@2:

; 4331 : 		}
; 4332 : 		gObjApplyBuffEffectDuration(lpTargetObj,58,23,nEffectValue,0,0,10);

  092f7	6a 0a		 push	 10			; 0000000aH
  092f9	6a 00		 push	 0
  092fb	6a 00		 push	 0
  092fd	8b 45 ec	 mov	 eax, DWORD PTR _nEffectValue$235955[ebp]
  09300	50		 push	 eax
  09301	6a 17		 push	 23			; 00000017H
  09303	6a 3a		 push	 58			; 0000003aH
  09305	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  09308	51		 push	 ecx
  09309	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0930e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4333 : 		GCMagicAttackNumberSend(lpObj,493,lpTargetObj->m_Index,skillSuccess);

  09311	0f b6 45 f8	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  09315	50		 push	 eax
  09316	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  09319	8b 11		 mov	 edx, DWORD PTR [ecx]
  0931b	52		 push	 edx
  0931c	68 ed 01 00 00	 push	 493			; 000001edH
  09321	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09324	50		 push	 eax
  09325	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0932a	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@MLS_MaGumS@2:
$LN4@MLS_MaGumS@2:

; 4334 : 	}
; 4335 : }

  0932d	5f		 pop	 edi
  0932e	5e		 pop	 esi
  0932f	5b		 pop	 ebx
  09330	8b e5		 mov	 esp, ebp
  09332	5d		 pop	 ebp
  09333	c2 0c 00	 ret	 12			; 0000000cH
?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDownMastery
; Function compile flags: /Odtp /ZI
tv234 = -120						; size = 4
tv232 = -116						; size = 4
tv230 = -116						; size = 4
_CallMonIndex$235990 = -48				; size = 4
_EnableAttack$ = -44					; size = 4
_DuelIndex$ = -40					; size = 4
_bAttack$ = -36						; size = 4
_HitCount$ = -32					; size = 4
_count$ = -28						; size = 4
_tObjNum$ = -24						; size = 4
_fAngle$ = -20						; size = 4
_iSkillDis$ = -16					; size = 4
_StartDis$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_Targetangle$ = 24					; size = 1
_aTargetIndex$ = 28					; size = 4
?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_PowerSlash
; _this$ = ecx

; 4338 : {

  09340	55		 push	 ebp
  09341	8b ec		 mov	 ebp, esp
  09343	83 ec 78	 sub	 esp, 120		; 00000078H
  09346	53		 push	 ebx
  09347	56		 push	 esi
  09348	57		 push	 edi
  09349	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4339 : 	LPOBJ lpObj = &gObj[aIndex];

  0934c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0934f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09355	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0935b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4340 : 	int StartDis = 1;

  0935e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _StartDis$[ebp], 1

; 4341 : 
; 4342 : 	int iSkillDis = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  09365	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  09368	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0936b	51		 push	 ecx
  0936c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  09371	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance
  09376	89 45 f0	 mov	 DWORD PTR _iSkillDis$[ebp], eax

; 4343 : 	float fAngle = Targetangle*360/255;

  09379	0f b6 45 18	 movzx	 eax, BYTE PTR _Targetangle$[ebp]
  0937d	69 c0 68 01 00
	00		 imul	 eax, 360		; 00000168H
  09383	99		 cdq
  09384	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  09389	f7 f9		 idiv	 ecx
  0938b	89 45 8c	 mov	 DWORD PTR tv230[ebp], eax
  0938e	db 45 8c	 fild	 DWORD PTR tv230[ebp]
  09391	d9 5d ec	 fstp	 DWORD PTR _fAngle$[ebp]

; 4344 : 	this->MLS_SkillFrustrum(aIndex,fAngle,iSkillDis+1.0f,iSkillDis+1.0f);

  09394	db 45 f0	 fild	 DWORD PTR _iSkillDis$[ebp]
  09397	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000
  0939d	d9 5d 8c	 fstp	 DWORD PTR tv232[ebp]
  093a0	d9 45 8c	 fld	 DWORD PTR tv232[ebp]
  093a3	51		 push	 ecx
  093a4	d9 1c 24	 fstp	 DWORD PTR [esp]
  093a7	db 45 f0	 fild	 DWORD PTR _iSkillDis$[ebp]
  093aa	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000
  093b0	d9 5d 88	 fstp	 DWORD PTR tv234[ebp]
  093b3	d9 45 88	 fld	 DWORD PTR tv234[ebp]
  093b6	51		 push	 ecx
  093b7	d9 1c 24	 fstp	 DWORD PTR [esp]
  093ba	51		 push	 ecx
  093bb	d9 45 ec	 fld	 DWORD PTR _fAngle$[ebp]
  093be	d9 1c 24	 fstp	 DWORD PTR [esp]
  093c1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  093c4	50		 push	 eax
  093c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  093c8	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum

; 4345 : 
; 4346 : 	int tObjNum;
; 4347 : 	int count = 0;

  093cd	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 4348 : 	int HitCount = 0;

  093d4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 4349 : 	int bAttack;
; 4350 : 	int DuelIndex = lpObj->m_iDuelUser;

  093db	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  093de	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  093e4	89 4d d8	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN22@MLS_PowerS:

; 4351 : 	int EnableAttack;
; 4352 : 
; 4353 : 	while ( true )

  093e7	b8 01 00 00 00	 mov	 eax, 1
  093ec	85 c0		 test	 eax, eax
  093ee	0f 84 76 02 00
	00		 je	 $LN21@MLS_PowerS

; 4354 : 	{
; 4355 : 		if(lpObj->VpPlayer2[count].state != 0)

  093f4	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  093f7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  093fa	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  093fd	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  09405	85 d2		 test	 edx, edx
  09407	0f 84 47 02 00
	00		 je	 $LN7@MLS_PowerS

; 4356 : 		{
; 4357 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0940d	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  09410	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09413	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09416	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0941e	89 55 e8	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 4358 : 
; 4359 : 			if(tObjNum >= 0)

  09421	83 7d e8 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  09425	0f 8c 29 02 00
	00		 jl	 $LN7@MLS_PowerS

; 4360 : 			{
; 4361 : 				EnableAttack = 0;

  0942b	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 4362 : 
; 4363 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  09432	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  09435	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09438	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0943b	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  09443	83 fa 02	 cmp	 edx, 2
  09446	75 25		 jne	 SHORT $LN18@MLS_PowerS
  09448	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0944b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09451	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09457	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0945f	7d 0c		 jge	 SHORT $LN18@MLS_PowerS

; 4364 : 				{
; 4365 : 					EnableAttack = 1;

  09461	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  09468	e9 23 01 00 00	 jmp	 $LN9@MLS_PowerS
$LN18@MLS_PowerS:

; 4366 : 				}
; 4367 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0946d	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09470	3b 45 1c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  09473	74 08		 je	 SHORT $LN15@MLS_PowerS
  09475	8b 45 d8	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  09478	3b 45 e8	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0947b	75 0c		 jne	 SHORT $LN16@MLS_PowerS
$LN15@MLS_PowerS:

; 4368 : 				{
; 4369 : 					EnableAttack = 1;

  0947d	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  09484	e9 07 01 00 00	 jmp	 $LN9@MLS_PowerS
$LN16@MLS_PowerS:

; 4370 : 				}
; 4371 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  09489	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  0948c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0948f	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09492	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0949a	83 fa 03	 cmp	 edx, 3
  0949d	74 5b		 je	 SHORT $LN13@MLS_PowerS
  0949f	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  094a2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  094a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  094ae	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  094b6	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  094b9	75 3f		 jne	 SHORT $LN13@MLS_PowerS
  094bb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  094c0	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  094c5	83 f8 07	 cmp	 eax, 7
  094c8	75 30		 jne	 SHORT $LN13@MLS_PowerS

; 4372 : 				{
; 4373 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  094ca	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  094cd	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  094d4	8b 55 e8	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  094d7	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  094dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  094e2	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  094ea	3b ca		 cmp	 ecx, edx
  094ec	74 07		 je	 SHORT $LN12@MLS_PowerS

; 4374 : 						EnableAttack = 1;

  094ee	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN12@MLS_PowerS:

; 4375 : 				}
; 4376 : 				else

  094f5	e9 96 00 00 00	 jmp	 $LN9@MLS_PowerS
$LN13@MLS_PowerS:

; 4377 : 				{
; 4378 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  094fa	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  094fd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09503	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09509	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0950c	89 55 d0	 mov	 DWORD PTR _CallMonIndex$235990[ebp], edx

; 4379 : 
; 4380 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0950f	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09512	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09518	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0951e	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  09523	83 fa 02	 cmp	 edx, 2
  09526	75 40		 jne	 SHORT $LN10@MLS_PowerS
  09528	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0952b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09531	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09537	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0953f	7c 27		 jl	 SHORT $LN10@MLS_PowerS

; 4381 : 					{
; 4382 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  09541	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09544	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0954a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09550	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  09557	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0955d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09562	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  09565	89 4d d0	 mov	 DWORD PTR _CallMonIndex$235990[ebp], ecx
$LN10@MLS_PowerS:

; 4383 : 					}
; 4384 : 
; 4385 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  09568	8b 45 d0	 mov	 eax, DWORD PTR _CallMonIndex$235990[ebp]
  0956b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09571	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09577	50		 push	 eax
  09578	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0957b	51		 push	 ecx
  0957c	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  09581	83 c4 08	 add	 esp, 8
  09584	83 f8 01	 cmp	 eax, 1
  09587	75 07		 jne	 SHORT $LN9@MLS_PowerS

; 4386 : 					{
; 4387 : 						EnableAttack = 1;

  09589	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN9@MLS_PowerS:

; 4388 : 					}
; 4389 : 				}
; 4390 : 
; 4391 : 				if(EnableAttack != 0)

  09590	83 7d d4 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  09594	0f 84 ba 00 00
	00		 je	 $LN7@MLS_PowerS

; 4392 : 				{
; 4393 : 					if(SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex))

  0959a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0959d	50		 push	 eax
  0959e	8b 4d e8	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  095a1	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  095a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  095ad	0f bf 84 0a 46
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+326]
  095b5	50		 push	 eax
  095b6	8b 4d e8	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  095b9	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  095bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  095c5	0f bf 84 0a 44
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+324]
  095cd	50		 push	 eax
  095ce	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  095d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  095d6	85 c0		 test	 eax, eax
  095d8	74 7a		 je	 SHORT $LN7@MLS_PowerS

; 4394 : 					{
; 4395 : 						bAttack = 0;

  095da	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 4396 : 
; 4397 : 						if(HitCount > 10)

  095e1	83 7d e0 0a	 cmp	 DWORD PTR _HitCount$[ebp], 10 ; 0000000aH
  095e5	7e 07		 jle	 SHORT $LN6@MLS_PowerS

; 4398 : 						{
; 4399 : 							bAttack = 0;

  095e7	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN6@MLS_PowerS:

; 4400 : 						}
; 4401 : 						
; 4402 : 						if(HitCount >= 5)

  095ee	83 7d e0 05	 cmp	 DWORD PTR _HitCount$[ebp], 5
  095f2	7c 1e		 jl	 SHORT $LN5@MLS_PowerS

; 4403 : 						{
; 4404 : 							if(rand()%2)

  095f4	e8 00 00 00 00	 call	 _rand
  095f9	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  095fe	79 05		 jns	 SHORT $LN25@MLS_PowerS
  09600	48		 dec	 eax
  09601	83 c8 fe	 or	 eax, -2			; fffffffeH
  09604	40		 inc	 eax
$LN25@MLS_PowerS:
  09605	85 c0		 test	 eax, eax
  09607	74 07		 je	 SHORT $LN4@MLS_PowerS

; 4405 : 							{
; 4406 : 								bAttack = 1;

  09609	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN4@MLS_PowerS:

; 4407 : 							}
; 4408 : 						}
; 4409 : 						else

  09610	eb 07		 jmp	 SHORT $LN3@MLS_PowerS
$LN5@MLS_PowerS:

; 4410 : 						{
; 4411 : 							bAttack = 1;

  09612	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN3@MLS_PowerS:

; 4412 : 						}
; 4413 : 
; 4414 : 						if(bAttack != 0)

  09619	83 7d dc 00	 cmp	 DWORD PTR _bAttack$[ebp], 0
  0961d	74 2c		 je	 SHORT $LN2@MLS_PowerS

; 4415 : 						{
; 4416 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,1,0,0,0,0);

  0961f	6a 00		 push	 0
  09621	6a 00		 push	 0
  09623	6a 00		 push	 0
  09625	6a 00		 push	 0
  09627	6a 01		 push	 1
  09629	6a 01		 push	 1
  0962b	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0962e	50		 push	 eax
  0962f	8b 4d e8	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  09632	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  09638	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0963e	51		 push	 ecx
  0963f	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  09642	52		 push	 edx
  09643	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  09648	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_PowerS:

; 4417 : 						}
; 4418 : 
; 4419 : 						HitCount++;

  0964b	8b 45 e0	 mov	 eax, DWORD PTR _HitCount$[ebp]
  0964e	83 c0 01	 add	 eax, 1
  09651	89 45 e0	 mov	 DWORD PTR _HitCount$[ebp], eax
$LN7@MLS_PowerS:

; 4420 : 					}
; 4421 : 				}
; 4422 : 			}
; 4423 : 		}
; 4424 : 
; 4425 : 		count++;

  09654	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  09657	83 c0 01	 add	 eax, 1
  0965a	89 45 e4	 mov	 DWORD PTR _count$[ebp], eax

; 4426 : 		if(count > MAX_VIEWPORT -1)

  0965d	83 7d e4 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  09661	7e 02		 jle	 SHORT $LN1@MLS_PowerS

; 4427 : 		{
; 4428 : 			break;

  09663	eb 05		 jmp	 SHORT $LN21@MLS_PowerS
$LN1@MLS_PowerS:

; 4429 : 		}
; 4430 : 	}

  09665	e9 7d fd ff ff	 jmp	 $LN22@MLS_PowerS
$LN21@MLS_PowerS:

; 4431 : }

  0966a	5f		 pop	 edi
  0966b	5e		 pop	 esi
  0966c	5b		 pop	 ebx
  0966d	8b e5		 mov	 esp, ebp
  0966f	5d		 pop	 ebp
  09670	c2 18 00	 ret	 24			; 00000018H
?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_PowerSlash
_TEXT	ENDS
PUBLIC	?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ	; CSkillAdditionInfo::GetFireScreamSkill
PUBLIC	?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_FireScream
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpTargetObj$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_FireScream
; _this$ = ecx

; 4434 : {

  09680	55		 push	 ebp
  09681	8b ec		 mov	 ebp, esp
  09683	83 ec 4c	 sub	 esp, 76			; 0000004cH
  09686	53		 push	 ebx
  09687	56		 push	 esi
  09688	57		 push	 edi
  09689	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4435 : 	if(g_SkillAdditionInfo.GetFireScreamSkill() == false)

  0968c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  09691	e8 00 00 00 00	 call	 ?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ ; CSkillAdditionInfo::GetFireScreamSkill
  09696	85 c0		 test	 eax, eax
  09698	75 07		 jne	 SHORT $LN4@MLS_FireSc

; 4436 : 	{
; 4437 : 		return false;

  0969a	33 c0		 xor	 eax, eax
  0969c	e9 94 00 00 00	 jmp	 $LN5@MLS_FireSc
$LN4@MLS_FireSc:

; 4438 : 	}
; 4439 : 
; 4440 : 	LPOBJ lpObj = &gObj[aIndex];

  096a1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  096a4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  096aa	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  096b0	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4441 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  096b3	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  096b6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  096bc	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  096c2	89 45 f4	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 4442 : 
; 4443 : 	if(gObjIsConnected(lpObj->m_Index) == false && gObjIsConnected(lpTargetObj->m_Index) == false)

  096c5	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  096c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  096ca	51		 push	 ecx
  096cb	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  096d0	83 c4 04	 add	 esp, 4
  096d3	85 c0		 test	 eax, eax
  096d5	75 16		 jne	 SHORT $LN3@MLS_FireSc
  096d7	8b 45 f4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  096da	8b 08		 mov	 ecx, DWORD PTR [eax]
  096dc	51		 push	 ecx
  096dd	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  096e2	83 c4 04	 add	 esp, 4
  096e5	85 c0		 test	 eax, eax
  096e7	75 04		 jne	 SHORT $LN3@MLS_FireSc

; 4444 : 	{
; 4445 : 		return false;

  096e9	33 c0		 xor	 eax, eax
  096eb	eb 48		 jmp	 SHORT $LN5@MLS_FireSc
$LN3@MLS_FireSc:

; 4446 : 	}
; 4447 : 
; 4448 : 	if(lpObj->Type != OBJ_USER)

  096ed	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  096f0	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  096f4	83 f9 01	 cmp	 ecx, 1
  096f7	74 04		 je	 SHORT $LN2@MLS_FireSc

; 4449 : 	{
; 4450 : 		return false;

  096f9	33 c0		 xor	 eax, eax
  096fb	eb 38		 jmp	 SHORT $LN5@MLS_FireSc
$LN2@MLS_FireSc:

; 4451 : 	}
; 4452 : 
; 4453 : 	if(lpObj->Class != CLASS_DARKLORD)

  096fd	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09700	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  09707	83 f9 04	 cmp	 ecx, 4
  0970a	74 04		 je	 SHORT $LN1@MLS_FireSc

; 4454 : 	{
; 4455 : 		return false;

  0970c	33 c0		 xor	 eax, eax
  0970e	eb 25		 jmp	 SHORT $LN5@MLS_FireSc
$LN1@MLS_FireSc:

; 4456 : 	}
; 4457 : 
; 4458 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,0,0,0,0,0);

  09710	6a 00		 push	 0
  09712	6a 00		 push	 0
  09714	6a 00		 push	 0
  09716	6a 00		 push	 0
  09718	6a 00		 push	 0
  0971a	6a 00		 push	 0
  0971c	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0971f	50		 push	 eax
  09720	8b 4d f4	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  09723	51		 push	 ecx
  09724	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  09727	52		 push	 edx
  09728	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0972d	83 c4 24	 add	 esp, 36			; 00000024H

; 4459 : 	return true;

  09730	b8 01 00 00 00	 mov	 eax, 1
$LN5@MLS_FireSc:

; 4460 : }

  09735	5f		 pop	 edi
  09736	5e		 pop	 esi
  09737	5b		 pop	 ebx
  09738	8b e5		 mov	 esp, ebp
  0973a	5d		 pop	 ebp
  0973b	c2 0c 00	 ret	 12			; 0000000cH
?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_FireScream
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\skilladditioninfo.h
_TEXT	ENDS
;	COMDAT ?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ PROC	; CSkillAdditionInfo::GetFireScreamSkill, COMDAT
; _this$ = ecx

; 47   : 	BOOL GetFireScreamSkill(){return this->m_bFireScreamSkill;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ ENDP	; CSkillAdditionInfo::GetFireScreamSkill
_TEXT	ENDS
PUBLIC	?WeaponMagicDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ; CMasterLevelSkillTreeSystem::WeaponMagicDel
EXTRN	?GCMagicListOneDelSend@@YAXHDGEEE@Z:PROC	; GCMagicListOneDelSend
EXTRN	?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z:PROC	; CMagicDamage::IsItemAttachedSkill
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\newmasterlevelskilltreesystem.cpp
_TEXT	SEGMENT
_byIsItemSkill$236028 = -17				; size = 1
_BrandSkill$236026 = -16				; size = 2
_iCount$236020 = -12					; size = 4
_iBaseMLS$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aSkill$ = 12						; size = 1
_Level$ = 16						; size = 1
?WeaponMagicDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z PROC ; CMasterLevelSkillTreeSystem::WeaponMagicDel
; _this$ = ecx

; 4464 : {

  09740	55		 push	 ebp
  09741	8b ec		 mov	 ebp, esp
  09743	83 ec 54	 sub	 esp, 84			; 00000054H
  09746	53		 push	 ebx
  09747	56		 push	 esi
  09748	57		 push	 edi
  09749	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4465 : 	int iBaseMLS = 0;

  0974c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iBaseMLS$[ebp], 0

; 4466 : 
; 4467 : 	for( int iCount = 0; iCount < MAX_MAGIC; iCount++)

  09753	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iCount$236020[ebp], 0
  0975a	eb 09		 jmp	 SHORT $LN7@WeaponMagi
$LN6@WeaponMagi:
  0975c	8b 45 f4	 mov	 eax, DWORD PTR _iCount$236020[ebp]
  0975f	83 c0 01	 add	 eax, 1
  09762	89 45 f4	 mov	 DWORD PTR _iCount$236020[ebp], eax
$LN7@WeaponMagi:
  09765	81 7d f4 96 00
	00 00		 cmp	 DWORD PTR _iCount$236020[ebp], 150 ; 00000096H
  0976c	0f 8d ef 00 00
	00		 jge	 $LN5@WeaponMagi

; 4468 : 	{
; 4469 : 		if( lpObj->Magic[iCount].IsMagic() == TRUE && 
; 4470 : 			this->CheckRequireStatus(lpObj->Magic[iCount].m_Skill) )

  09772	8b 4d f4	 mov	 ecx, DWORD PTR _iCount$236020[ebp]
  09775	6b c9 18	 imul	 ecx, 24			; 00000018H
  09778	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0977b	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  09781	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  09786	83 f8 01	 cmp	 eax, 1
  09789	0f 85 cd 00 00
	00		 jne	 $LN4@WeaponMagi
  0978f	8b 45 f4	 mov	 eax, DWORD PTR _iCount$236020[ebp]
  09792	6b c0 18	 imul	 eax, 24			; 00000018H
  09795	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09798	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0979e	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  097a2	50		 push	 eax
  097a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  097a6	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  097ab	85 c0		 test	 eax, eax
  097ad	0f 84 a9 00 00
	00		 je	 $LN4@WeaponMagi

; 4471 : 		{
; 4472 : 			iBaseMLS = this->GetBaseMasterLevelSkill(lpObj->Magic[iCount].m_Skill);

  097b3	8b 45 f4	 mov	 eax, DWORD PTR _iCount$236020[ebp]
  097b6	6b c0 18	 imul	 eax, 24			; 00000018H
  097b9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  097bc	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  097c2	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  097c6	50		 push	 eax
  097c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  097ca	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  097cf	89 45 f8	 mov	 DWORD PTR _iBaseMLS$[ebp], eax

; 4473 : 
; 4474 : 			if( iBaseMLS > 0 )

  097d2	83 7d f8 00	 cmp	 DWORD PTR _iBaseMLS$[ebp], 0
  097d6	0f 8e 80 00 00
	00		 jle	 $LN4@WeaponMagi

; 4475 : 			{
; 4476 : 				WORD BrandSkill = MagicDamageC.GetSkillReqBrandOfSkill(iBaseMLS);

  097dc	8b 45 f8	 mov	 eax, DWORD PTR _iBaseMLS$[ebp]
  097df	50		 push	 eax
  097e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  097e5	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  097ea	66 89 45 f0	 mov	 WORD PTR _BrandSkill$236026[ebp], ax

; 4477 : 
; 4478 : 				if( aSkill ==  BrandSkill )

  097ee	0f b6 45 0c	 movzx	 eax, BYTE PTR _aSkill$[ebp]
  097f2	0f b7 4d f0	 movzx	 ecx, WORD PTR _BrandSkill$236026[ebp]
  097f6	3b c1		 cmp	 eax, ecx
  097f8	75 62		 jne	 SHORT $LN4@WeaponMagi

; 4479 : 				{
; 4480 : 					BYTE byIsItemSkill = MagicDamageC.IsItemAttachedSkill(BrandSkill);

  097fa	0f b7 45 f0	 movzx	 eax, WORD PTR _BrandSkill$236026[ebp]
  097fe	50		 push	 eax
  097ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  09804	e8 00 00 00 00	 call	 ?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z ; CMagicDamage::IsItemAttachedSkill
  09809	88 45 ef	 mov	 BYTE PTR _byIsItemSkill$236028[ebp], al

; 4481 : 
; 4482 : 					if( byIsItemSkill )

  0980c	0f b6 45 ef	 movzx	 eax, BYTE PTR _byIsItemSkill$236028[ebp]
  09810	85 c0		 test	 eax, eax
  09812	74 48		 je	 SHORT $LN4@WeaponMagi

; 4483 : 					{
; 4484 : 						GCMagicListOneDelSend(lpObj->m_Index,iCount,lpObj->Magic[iCount].m_Skill,lpObj->Magic[iCount].m_Level,0,0);

  09814	6a 00		 push	 0
  09816	6a 00		 push	 0
  09818	8b 45 f4	 mov	 eax, DWORD PTR _iCount$236020[ebp]
  0981b	6b c0 18	 imul	 eax, 24			; 00000018H
  0981e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09821	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  09827	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0982c	50		 push	 eax
  0982d	8b 4d f4	 mov	 ecx, DWORD PTR _iCount$236020[ebp]
  09830	6b c9 18	 imul	 ecx, 24			; 00000018H
  09833	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  09836	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0983c	0f b7 4c 08 08	 movzx	 ecx, WORD PTR [eax+ecx+8]
  09841	51		 push	 ecx
  09842	0f b6 55 f4	 movzx	 edx, BYTE PTR _iCount$236020[ebp]
  09846	52		 push	 edx
  09847	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0984a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0984c	51		 push	 ecx
  0984d	e8 00 00 00 00	 call	 ?GCMagicListOneDelSend@@YAXHDGEEE@Z ; GCMagicListOneDelSend
  09852	83 c4 18	 add	 esp, 24			; 00000018H

; 4485 : 						return true;

  09855	b8 01 00 00 00	 mov	 eax, 1
  0985a	eb 07		 jmp	 SHORT $LN8@WeaponMagi
$LN4@WeaponMagi:

; 4486 : 					}
; 4487 : 				}
; 4488 : 			}
; 4489 : 		}
; 4490 : 	}

  0985c	e9 fb fe ff ff	 jmp	 $LN6@WeaponMagi
$LN5@WeaponMagi:

; 4491 : 	return 0;

  09861	33 c0		 xor	 eax, eax
$LN8@WeaponMagi:

; 4492 : }

  09863	5f		 pop	 edi
  09864	5e		 pop	 esi
  09865	5b		 pop	 ebx
  09866	8b e5		 mov	 esp, ebp
  09868	5d		 pop	 ebp
  09869	c2 0c 00	 ret	 12			; 0000000cH
?WeaponMagicDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ENDP ; CMasterLevelSkillTreeSystem::WeaponMagicDel
_TEXT	ENDS
PUBLIC	?WeaponMagicAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ; CMasterLevelSkillTreeSystem::WeaponMagicAdd
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iCount$236037 = -12					; size = 4
_iBaseMLS$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aSkill$ = 12						; size = 1
_Level$ = 16						; size = 1
?WeaponMagicAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z PROC ; CMasterLevelSkillTreeSystem::WeaponMagicAdd
; _this$ = ecx

; 4496 : {

  09870	55		 push	 ebp
  09871	8b ec		 mov	 ebp, esp
  09873	83 ec 4c	 sub	 esp, 76			; 0000004cH
  09876	53		 push	 ebx
  09877	56		 push	 esi
  09878	57		 push	 edi
  09879	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4497 : 	int iBaseMLS = 0;

  0987c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iBaseMLS$[ebp], 0

; 4498 : 
; 4499 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  09883	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iCount$236037[ebp], 0
  0988a	eb 09		 jmp	 SHORT $LN5@WeaponMagi@2
$LN4@WeaponMagi@2:
  0988c	8b 45 f4	 mov	 eax, DWORD PTR _iCount$236037[ebp]
  0988f	83 c0 01	 add	 eax, 1
  09892	89 45 f4	 mov	 DWORD PTR _iCount$236037[ebp], eax
$LN5@WeaponMagi@2:
  09895	81 7d f4 96 00
	00 00		 cmp	 DWORD PTR _iCount$236037[ebp], 150 ; 00000096H
  0989c	0f 8d dd 00 00
	00		 jge	 $LN3@WeaponMagi@2

; 4500 : 	{
; 4501 : 		if( lpObj->Magic[iCount].IsMagic() == TRUE && 
; 4502 : 			this->CheckRequireStatus(lpObj->Magic[iCount].m_Skill) )

  098a2	8b 4d f4	 mov	 ecx, DWORD PTR _iCount$236037[ebp]
  098a5	6b c9 18	 imul	 ecx, 24			; 00000018H
  098a8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  098ab	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  098b1	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  098b6	83 f8 01	 cmp	 eax, 1
  098b9	0f 85 bb 00 00
	00		 jne	 $LN2@WeaponMagi@2
  098bf	8b 45 f4	 mov	 eax, DWORD PTR _iCount$236037[ebp]
  098c2	6b c0 18	 imul	 eax, 24			; 00000018H
  098c5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  098c8	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  098ce	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  098d2	50		 push	 eax
  098d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  098d6	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  098db	85 c0		 test	 eax, eax
  098dd	0f 84 97 00 00
	00		 je	 $LN2@WeaponMagi@2

; 4503 : 		{
; 4504 : 			iBaseMLS = this->GetBaseMasterLevelSkill(lpObj->Magic[iCount].m_Skill);

  098e3	8b 45 f4	 mov	 eax, DWORD PTR _iCount$236037[ebp]
  098e6	6b c0 18	 imul	 eax, 24			; 00000018H
  098e9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  098ec	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  098f2	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  098f6	50		 push	 eax
  098f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  098fa	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  098ff	89 45 f8	 mov	 DWORD PTR _iBaseMLS$[ebp], eax

; 4505 : 
; 4506 : 			if( iBaseMLS > 0 
; 4507 : 				&& aSkill == MagicDamageC.GetSkillReqBrandOfSkill(iBaseMLS) 
; 4508 : 				&& !this->CheckPrimarySkill(lpObj, iBaseMLS) )	//1.01.03

  09902	83 7d f8 00	 cmp	 DWORD PTR _iBaseMLS$[ebp], 0
  09906	7e 72		 jle	 SHORT $LN2@WeaponMagi@2
  09908	0f b6 75 0c	 movzx	 esi, BYTE PTR _aSkill$[ebp]
  0990c	8b 45 f8	 mov	 eax, DWORD PTR _iBaseMLS$[ebp]
  0990f	50		 push	 eax
  09910	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  09915	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  0991a	3b f0		 cmp	 esi, eax
  0991c	75 5c		 jne	 SHORT $LN2@WeaponMagi@2
  0991e	8b 45 f8	 mov	 eax, DWORD PTR _iBaseMLS$[ebp]
  09921	50		 push	 eax
  09922	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09925	51		 push	 ecx
  09926	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  09929	e8 00 00 00 00	 call	 ?CheckPrimarySkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckPrimarySkill
  0992e	85 c0		 test	 eax, eax
  09930	75 48		 jne	 SHORT $LN2@WeaponMagi@2

; 4509 : 			{
; 4510 : 				GCMagicListOneSend(lpObj->m_Index,iCount,lpObj->Magic[iCount].m_Skill,lpObj->Magic[iCount].m_Level,0,0);

  09932	6a 00		 push	 0
  09934	6a 00		 push	 0
  09936	8b 45 f4	 mov	 eax, DWORD PTR _iCount$236037[ebp]
  09939	6b c0 18	 imul	 eax, 24			; 00000018H
  0993c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0993f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  09945	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0994a	50		 push	 eax
  0994b	8b 4d f4	 mov	 ecx, DWORD PTR _iCount$236037[ebp]
  0994e	6b c9 18	 imul	 ecx, 24			; 00000018H
  09951	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  09954	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0995a	0f b7 4c 08 08	 movzx	 ecx, WORD PTR [eax+ecx+8]
  0995f	51		 push	 ecx
  09960	0f b6 55 f4	 movzx	 edx, BYTE PTR _iCount$236037[ebp]
  09964	52		 push	 edx
  09965	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09968	8b 08		 mov	 ecx, DWORD PTR [eax]
  0996a	51		 push	 ecx
  0996b	e8 00 00 00 00	 call	 ?GCMagicListOneSend@@YAXHDGEGE@Z ; GCMagicListOneSend
  09970	83 c4 18	 add	 esp, 24			; 00000018H

; 4511 : 				return true;

  09973	b8 01 00 00 00	 mov	 eax, 1
  09978	eb 07		 jmp	 SHORT $LN6@WeaponMagi@2
$LN2@WeaponMagi@2:

; 4512 : 			}
; 4513 : 		}
; 4514 : 	}

  0997a	e9 0d ff ff ff	 jmp	 $LN4@WeaponMagi@2
$LN3@WeaponMagi@2:

; 4515 : 	return 0;

  0997f	33 c0		 xor	 eax, eax
$LN6@WeaponMagi@2:

; 4516 : }

  09981	5f		 pop	 edi
  09982	5e		 pop	 esi
  09983	5b		 pop	 ebx
  09984	8b e5		 mov	 esp, ebp
  09986	5d		 pop	 ebp
  09987	c2 0c 00	 ret	 12			; 0000000cH
?WeaponMagicAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ENDP ; CMasterLevelSkillTreeSystem::WeaponMagicAdd
_TEXT	ENDS
PUBLIC	?GetWeaponMagicSearch@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetWeaponMagicSearch
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?GetSkillType@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillType
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_bUseSkill$236054 = -20					; size = 4
_byIsItemSkill$236052 = -13				; size = 1
_BrandSkill$236051 = -12				; size = 2
_iBaseMLS$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_nCount$ = 12						; size = 4
?GetWeaponMagicSearch@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::GetWeaponMagicSearch
; _this$ = ecx

; 4519 : {

  09990	55		 push	 ebp
  09991	8b ec		 mov	 ebp, esp
  09993	83 ec 54	 sub	 esp, 84			; 00000054H
  09996	53		 push	 ebx
  09997	56		 push	 esi
  09998	57		 push	 edi
  09999	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4520 : 	int iBaseMLS = 0;

  0999c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iBaseMLS$[ebp], 0

; 4521 : 
; 4522 : 	if( this->CheckRequireStatus(lpObj->Magic[nCount].m_Skill) )

  099a3	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  099a6	6b c0 18	 imul	 eax, 24			; 00000018H
  099a9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  099ac	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  099b2	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  099b6	50		 push	 eax
  099b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  099ba	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  099bf	85 c0		 test	 eax, eax
  099c1	0f 84 f3 00 00
	00		 je	 $LN6@GetWeaponM

; 4523 : 	{
; 4524 : 		iBaseMLS = this->GetBaseMasterLevelSkill(lpObj->Magic[nCount].m_Skill);

  099c7	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  099ca	6b c0 18	 imul	 eax, 24			; 00000018H
  099cd	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  099d0	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  099d6	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  099da	50		 push	 eax
  099db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  099de	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  099e3	89 45 f8	 mov	 DWORD PTR _iBaseMLS$[ebp], eax

; 4525 : 
; 4526 : 		if( iBaseMLS > 0 && 
; 4527 : 			MagicDamageC.GetSkillType(iBaseMLS) == 4 )

  099e6	83 7d f8 00	 cmp	 DWORD PTR _iBaseMLS$[ebp], 0
  099ea	0f 8e ca 00 00
	00		 jle	 $LN6@GetWeaponM
  099f0	8b 45 f8	 mov	 eax, DWORD PTR _iBaseMLS$[ebp]
  099f3	50		 push	 eax
  099f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  099f9	e8 00 00 00 00	 call	 ?GetSkillType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillType
  099fe	83 f8 04	 cmp	 eax, 4
  09a01	0f 85 b3 00 00
	00		 jne	 $LN6@GetWeaponM

; 4528 : 		{
; 4529 : 			WORD BrandSkill = MagicDamageC.GetSkillReqBrandOfSkill(iBaseMLS);

  09a07	8b 45 f8	 mov	 eax, DWORD PTR _iBaseMLS$[ebp]
  09a0a	50		 push	 eax
  09a0b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  09a10	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  09a15	66 89 45 f4	 mov	 WORD PTR _BrandSkill$236051[ebp], ax

; 4530 : 			BYTE byIsItemSkill = MagicDamageC.IsItemAttachedSkill(lpObj->Magic[nCount].m_Skill);

  09a19	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  09a1c	6b c0 18	 imul	 eax, 24			; 00000018H
  09a1f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09a22	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  09a28	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  09a2c	50		 push	 eax
  09a2d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  09a32	e8 00 00 00 00	 call	 ?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z ; CMagicDamage::IsItemAttachedSkill
  09a37	88 45 f3	 mov	 BYTE PTR _byIsItemSkill$236052[ebp], al

; 4531 : 
; 4532 : 			if( byIsItemSkill )

  09a3a	0f b6 45 f3	 movzx	 eax, BYTE PTR _byIsItemSkill$236052[ebp]
  09a3e	85 c0		 test	 eax, eax
  09a40	74 78		 je	 SHORT $LN6@GetWeaponM

; 4533 : 			{
; 4534 : 				int bUseSkill = 0;

  09a42	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bUseSkill$236054[ebp], 0

; 4535 : 
; 4536 : 				if( lpObj->pInventory[1].IsItem() == TRUE &&
; 4537 : 					lpObj->pInventory[1].m_Special[0] == BrandSkill )

  09a49	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09a4c	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  09a52	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  09a58	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  09a5d	83 f8 01	 cmp	 eax, 1
  09a60	75 1f		 jne	 SHORT $LN3@GetWeaponM
  09a62	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09a65	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  09a6b	0f b7 91 06 01
	00 00		 movzx	 edx, WORD PTR [ecx+262]
  09a72	0f b7 45 f4	 movzx	 eax, WORD PTR _BrandSkill$236051[ebp]
  09a76	3b d0		 cmp	 edx, eax
  09a78	75 07		 jne	 SHORT $LN3@GetWeaponM

; 4538 : 					bUseSkill = TRUE;

  09a7a	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bUseSkill$236054[ebp], 1
$LN3@GetWeaponM:

; 4539 : 
; 4540 : 				if( lpObj->pInventory[0].IsItem() == TRUE &&
; 4541 : 					lpObj->pInventory[0].m_Special[0] == BrandSkill )

  09a81	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09a84	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  09a8a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  09a8f	83 f8 01	 cmp	 eax, 1
  09a92	75 1c		 jne	 SHORT $LN2@GetWeaponM
  09a94	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09a97	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  09a9d	0f b7 51 32	 movzx	 edx, WORD PTR [ecx+50]
  09aa1	0f b7 45 f4	 movzx	 eax, WORD PTR _BrandSkill$236051[ebp]
  09aa5	3b d0		 cmp	 edx, eax
  09aa7	75 07		 jne	 SHORT $LN2@GetWeaponM

; 4542 : 					bUseSkill = TRUE;

  09aa9	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bUseSkill$236054[ebp], 1
$LN2@GetWeaponM:

; 4543 : 
; 4544 : 				if( bUseSkill == 0 )

  09ab0	83 7d ec 00	 cmp	 DWORD PTR _bUseSkill$236054[ebp], 0
  09ab4	75 04		 jne	 SHORT $LN6@GetWeaponM

; 4545 : 					return false;

  09ab6	33 c0		 xor	 eax, eax
  09ab8	eb 05		 jmp	 SHORT $LN7@GetWeaponM
$LN6@GetWeaponM:

; 4546 : 			}
; 4547 : 		}
; 4548 : 	}
; 4549 : 
; 4550 : return true;

  09aba	b8 01 00 00 00	 mov	 eax, 1
$LN7@GetWeaponM:

; 4551 : }

  09abf	5f		 pop	 edi
  09ac0	5e		 pop	 esi
  09ac1	5b		 pop	 ebx
  09ac2	8b e5		 mov	 esp, ebp
  09ac4	5d		 pop	 ebp
  09ac5	c2 08 00	 ret	 8
?GetWeaponMagicSearch@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::GetWeaponMagicSearch
_TEXT	ENDS
EXTRN	?gCheckSkillDistance@@YAHHHH@Z:PROC		; gCheckSkillDistance
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv156 = -108						; size = 4
tv166 = -104						; size = 4
tv157 = -104						; size = 4
_CallMonIndex$236087 = -36				; size = 4
_EnableAttack$ = -32					; size = 4
_DuelIndex$ = -28					; size = 4
_count$ = -24						; size = 4
_Angle$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_bRet$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSleep
; _this$ = ecx

; 4554 : {

  09ad0	55		 push	 ebp
  09ad1	8b ec		 mov	 ebp, esp
  09ad3	83 ec 6c	 sub	 esp, 108		; 0000006cH
  09ad6	53		 push	 ebx
  09ad7	56		 push	 esi
  09ad8	57		 push	 edi
  09ad9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4555 : 	LPOBJ lpObj = &gObj[aIndex];

  09adc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  09adf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09ae5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09aeb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4556 : 	int bRet = FALSE;

  09aee	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 4557 : 	int tObjNum;
; 4558 : 
; 4559 : 	int Angle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  09af5	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  09af8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09afe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09b04	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  09b0c	52		 push	 edx
  09b0d	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  09b10	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09b16	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09b1c	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  09b24	52		 push	 edx
  09b25	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09b28	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  09b2f	51		 push	 ecx
  09b30	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  09b33	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  09b3a	50		 push	 eax
  09b3b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  09b3e	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
  09b43	89 45 ec	 mov	 DWORD PTR _Angle$[ebp], eax

; 4560 : 	int count = 0;

  09b46	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 4561 : 
; 4562 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  09b4d	6a 01		 push	 1
  09b4f	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  09b52	50		 push	 eax
  09b53	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  09b56	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  09b5a	52		 push	 edx
  09b5b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09b5e	50		 push	 eax
  09b5f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  09b64	83 c4 10	 add	 esp, 16			; 00000010H

; 4563 : 
; 4564 : 	int DuelIndex = lpObj->m_iDuelUser;

  09b67	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09b6a	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  09b70	89 4d e4	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN19@MLS_SkillS@21:

; 4565 : 	int EnableAttack;
; 4566 : 
; 4567 : 	while( TRUE )

  09b73	b8 01 00 00 00	 mov	 eax, 1
  09b78	85 c0		 test	 eax, eax
  09b7a	0f 84 af 02 00
	00		 je	 $LN18@MLS_SkillS@21

; 4568 : 	{
; 4569 : 		if(lpObj->VpPlayer2[count].state != 0)

  09b80	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  09b83	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09b86	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09b89	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  09b91	85 d2		 test	 edx, edx
  09b93	0f 84 80 02 00
	00		 je	 $LN17@MLS_SkillS@21

; 4570 : 		{
; 4571 : 			tObjNum = lpObj->VpPlayer2[count].number;

  09b99	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  09b9c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09b9f	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09ba2	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  09baa	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 4572 : 
; 4573 : 			if( tObjNum >= 0 )

  09bad	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  09bb1	0f 8c 62 02 00
	00		 jl	 $LN17@MLS_SkillS@21

; 4574 : 			{
; 4575 : 				EnableAttack = 0;

  09bb7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 4576 : 
; 4577 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  09bbe	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  09bc1	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09bc4	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09bc7	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  09bcf	83 fa 02	 cmp	 edx, 2
  09bd2	75 25		 jne	 SHORT $LN15@MLS_SkillS@21
  09bd4	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09bd7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09bdd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09be3	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  09beb	7d 0c		 jge	 SHORT $LN15@MLS_SkillS@21

; 4578 : 				{
; 4579 : 					EnableAttack = 1;

  09bed	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  09bf4	e9 c2 01 00 00	 jmp	 $LN14@MLS_SkillS@21
$LN15@MLS_SkillS@21:

; 4580 : 				}
; 4581 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  09bf9	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09bfc	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  09bff	74 08		 je	 SHORT $LN12@MLS_SkillS@21
  09c01	8b 45 e4	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  09c04	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  09c07	75 0c		 jne	 SHORT $LN13@MLS_SkillS@21
$LN12@MLS_SkillS@21:

; 4582 : 				{
; 4583 : 					EnableAttack = 1;

  09c09	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1

; 4584 : 				}
; 4585 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||

  09c10	e9 a6 01 00 00	 jmp	 $LN14@MLS_SkillS@21
$LN13@MLS_SkillS@21:

; 4586 : 						 IT_MAP_RANGE(lpObj->MapNumber) ||
; 4587 : 						 lpObj->MapNumber == MAP_INDEX_VULCAN )

  09c15	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09c18	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  09c1f	83 f9 35	 cmp	 ecx, 53			; 00000035H
  09c22	75 09		 jne	 SHORT $LN24@MLS_SkillS@21
  09c24	c7 45 98 01 00
	00 00		 mov	 DWORD PTR tv157[ebp], 1
  09c2b	eb 33		 jmp	 SHORT $LN25@MLS_SkillS@21
$LN24@MLS_SkillS@21:
  09c2d	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  09c30	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  09c37	83 f8 12	 cmp	 eax, 18			; 00000012H
  09c3a	7d 09		 jge	 SHORT $LN22@MLS_SkillS@21
  09c3c	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv156[ebp], 0
  09c43	eb 15		 jmp	 SHORT $LN23@MLS_SkillS@21
$LN22@MLS_SkillS@21:
  09c45	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09c48	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  09c4f	33 c0		 xor	 eax, eax
  09c51	83 fa 17	 cmp	 edx, 23			; 00000017H
  09c54	0f 9e c0	 setle	 al
  09c57	89 45 94	 mov	 DWORD PTR tv156[ebp], eax
$LN23@MLS_SkillS@21:
  09c5a	8b 4d 94	 mov	 ecx, DWORD PTR tv156[ebp]
  09c5d	89 4d 98	 mov	 DWORD PTR tv157[ebp], ecx
$LN25@MLS_SkillS@21:
  09c60	83 7d 98 00	 cmp	 DWORD PTR tv157[ebp], 0
  09c64	75 42		 jne	 SHORT $LN9@MLS_SkillS@21
  09c66	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09c69	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  09c70	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  09c73	7d 09		 jge	 SHORT $LN26@MLS_SkillS@21
  09c75	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
  09c7c	eb 15		 jmp	 SHORT $LN27@MLS_SkillS@21
$LN26@MLS_SkillS@21:
  09c7e	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  09c81	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  09c88	33 c9		 xor	 ecx, ecx
  09c8a	83 f8 32	 cmp	 eax, 50			; 00000032H
  09c8d	0f 9e c1	 setle	 cl
  09c90	89 4d 98	 mov	 DWORD PTR tv166[ebp], ecx
$LN27@MLS_SkillS@21:
  09c93	83 7d 98 00	 cmp	 DWORD PTR tv166[ebp], 0
  09c97	75 0f		 jne	 SHORT $LN9@MLS_SkillS@21
  09c99	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09c9c	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  09ca3	83 f9 3f	 cmp	 ecx, 63			; 0000003fH
  09ca6	75 0c		 jne	 SHORT $LN10@MLS_SkillS@21
$LN9@MLS_SkillS@21:

; 4588 : 				{
; 4589 : 					EnableAttack = 1;

  09ca8	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  09caf	e9 07 01 00 00	 jmp	 $LN14@MLS_SkillS@21
$LN10@MLS_SkillS@21:

; 4590 : 				}
; 4591 : 
; 4592 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  09cb4	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  09cb7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09cba	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09cbd	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  09cc5	83 fa 03	 cmp	 edx, 3
  09cc8	74 5b		 je	 SHORT $LN7@MLS_SkillS@21
  09cca	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09ccd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09cd3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09cd9	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  09ce1	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  09ce4	75 3f		 jne	 SHORT $LN7@MLS_SkillS@21
  09ce6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  09ceb	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  09cf0	83 f8 07	 cmp	 eax, 7
  09cf3	75 30		 jne	 SHORT $LN7@MLS_SkillS@21

; 4593 : 				{
; 4594 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  09cf5	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09cf8	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  09cff	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  09d02	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  09d08	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09d0d	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  09d15	3b ca		 cmp	 ecx, edx
  09d17	74 07		 je	 SHORT $LN6@MLS_SkillS@21

; 4595 : 						EnableAttack = 1;

  09d19	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN6@MLS_SkillS@21:

; 4596 : 				}
; 4597 : 
; 4598 : 				else

  09d20	e9 96 00 00 00	 jmp	 $LN14@MLS_SkillS@21
$LN7@MLS_SkillS@21:

; 4599 : 				{
; 4600 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  09d25	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09d28	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09d2e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09d34	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  09d37	89 55 dc	 mov	 DWORD PTR _CallMonIndex$236087[ebp], edx

; 4601 : 
; 4602 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  09d3a	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09d3d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09d43	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09d49	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  09d4e	83 fa 02	 cmp	 edx, 2
  09d51	75 40		 jne	 SHORT $LN4@MLS_SkillS@21
  09d53	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09d56	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09d5c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09d62	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  09d6a	7c 27		 jl	 SHORT $LN4@MLS_SkillS@21

; 4603 : 					{
; 4604 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  09d6c	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09d6f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09d75	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09d7b	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  09d82	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  09d88	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09d8d	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  09d90	89 4d dc	 mov	 DWORD PTR _CallMonIndex$236087[ebp], ecx
$LN4@MLS_SkillS@21:

; 4605 : 					}
; 4606 : 
; 4607 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  09d93	8b 45 dc	 mov	 eax, DWORD PTR _CallMonIndex$236087[ebp]
  09d96	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09d9c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09da2	50		 push	 eax
  09da3	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09da6	51		 push	 ecx
  09da7	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  09dac	83 c4 08	 add	 esp, 8
  09daf	83 f8 01	 cmp	 eax, 1
  09db2	75 07		 jne	 SHORT $LN14@MLS_SkillS@21

; 4608 : 					{
; 4609 : 						EnableAttack = 1;

  09db4	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN14@MLS_SkillS@21:

; 4610 : 					}
; 4611 : 				}
; 4612 : 
; 4613 : 				if( EnableAttack != 0 &&
; 4614 : 					tObjNum == aTargetIndex && 
; 4615 : 					gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) != FALSE )

  09dbb	83 7d e0 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  09dbf	74 58		 je	 SHORT $LN17@MLS_SkillS@21
  09dc1	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09dc4	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  09dc7	75 50		 jne	 SHORT $LN17@MLS_SkillS@21
  09dc9	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  09dcc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  09dcf	51		 push	 ecx
  09dd0	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  09dd3	52		 push	 edx
  09dd4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  09dd7	50		 push	 eax
  09dd8	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  09ddd	83 c4 0c	 add	 esp, 12			; 0000000cH
  09de0	85 c0		 test	 eax, eax
  09de2	74 35		 je	 SHORT $LN17@MLS_SkillS@21

; 4616 : 				{
; 4617 : 					gObjAttack(lpObj,&gObj[aTargetIndex],lpMagic,1,0,0,0,0,0);

  09de4	6a 00		 push	 0
  09de6	6a 00		 push	 0
  09de8	6a 00		 push	 0
  09dea	6a 00		 push	 0
  09dec	6a 00		 push	 0
  09dee	6a 01		 push	 1
  09df0	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  09df3	50		 push	 eax
  09df4	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  09df7	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  09dfd	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09e03	51		 push	 ecx
  09e04	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  09e07	52		 push	 edx
  09e08	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  09e0d	83 c4 24	 add	 esp, 36			; 00000024H

; 4618 : 					bRet = TRUE;

  09e10	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1

; 4619 : 					break;

  09e17	eb 16		 jmp	 SHORT $LN18@MLS_SkillS@21
$LN17@MLS_SkillS@21:

; 4620 : 				}
; 4621 : 			}
; 4622 : 		}
; 4623 : 
; 4624 : 		count++;

  09e19	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  09e1c	83 c0 01	 add	 eax, 1
  09e1f	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax

; 4625 : 
; 4626 : 		if( count > MAX_VIEWPORT -1)

  09e22	83 7d e8 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  09e26	7e 02		 jle	 SHORT $LN1@MLS_SkillS@21

; 4627 : 		{
; 4628 : 			break;

  09e28	eb 05		 jmp	 SHORT $LN18@MLS_SkillS@21
$LN1@MLS_SkillS@21:

; 4629 : 		}
; 4630 : 	}

  09e2a	e9 44 fd ff ff	 jmp	 $LN19@MLS_SkillS@21
$LN18@MLS_SkillS@21:

; 4631 : 
; 4632 : return bRet;

  09e2f	8b 45 f4	 mov	 eax, DWORD PTR _bRet$[ebp]

; 4633 : }

  09e32	5f		 pop	 edi
  09e33	5e		 pop	 esi
  09e34	5b		 pop	 ebx
  09e35	8b e5		 mov	 esp, ebp
  09e37	5d		 pop	 ebp
  09e38	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSleep
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z:PROC	; MsgSendV2
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_wIndex$236161 = -332					; size = 2
_i$ = -328						; size = 4
_pMsg$ = -324						; size = 10
_cBUFF$ = -312						; size = 256
_lOfs$ = -56						; size = 4
_CallMonIndex$236137 = -52				; size = 4
_EnableAttack$ = -48					; size = 4
_DuelIndex$ = -44					; size = 4
_Target$ = -40						; size = 12
_count$ = -28						; size = 4
_tObjNum$ = -24						; size = 4
_bSuccess$ = -20					; size = 4
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning
; _this$ = ecx

; 4650 : {

  09e40	55		 push	 ebp
  09e41	8b ec		 mov	 ebp, esp
  09e43	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  09e49	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  09e4e	33 c5		 xor	 eax, ebp
  09e50	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  09e53	53		 push	 ebx
  09e54	56		 push	 esi
  09e55	57		 push	 edi
  09e56	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4651 : 	LPOBJ lpObj = &gObj[aIndex];

  09e59	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  09e5c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09e62	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09e68	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4652 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  09e6b	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  09e6e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09e74	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09e7a	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 4653 : 
; 4654 : 	int bSuccess = TRUE;

  09e7d	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 1

; 4655 : 	int tObjNum;
; 4656 : 	int count = 0;

  09e84	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 4657 : 
; 4658 : 	int Target[3];
; 4659 : 
; 4660 : 	Target[0] = -1;

  09e8b	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _Target$[ebp], -1

; 4661 : 	Target[1] = -1;

  09e92	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _Target$[ebp+4], -1

; 4662 : 	Target[2] = -1;

  09e99	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _Target$[ebp+8], -1

; 4663 : 
; 4664 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  09ea0	6a 01		 push	 1
  09ea2	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  09ea5	50		 push	 eax
  09ea6	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  09ea9	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  09ead	52		 push	 edx
  09eae	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09eb1	50		 push	 eax
  09eb2	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  09eb7	83 c4 10	 add	 esp, 16			; 00000010H

; 4665 : 
; 4666 : 	int DuelIndex = lpObj->m_iDuelUser;

  09eba	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  09ebd	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  09ec3	89 4d d4	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 4667 : 	int EnableAttack;
; 4668 : 
; 4669 : 	if( gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) == FALSE )

  09ec6	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  09ec9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  09ecc	51		 push	 ecx
  09ecd	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  09ed0	52		 push	 edx
  09ed1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  09ed4	50		 push	 eax
  09ed5	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  09eda	83 c4 0c	 add	 esp, 12			; 0000000cH
  09edd	85 c0		 test	 eax, eax
  09edf	75 07		 jne	 SHORT $LN28@MLS_SkillC

; 4670 : 	{
; 4671 : 		return FALSE;

  09ee1	33 c0		 xor	 eax, eax
  09ee3	e9 95 04 00 00	 jmp	 $LN29@MLS_SkillC
$LN28@MLS_SkillC:

; 4672 : 	}
; 4673 : 
; 4674 : 	Target[0] = aTargetIndex;

  09ee8	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  09eeb	89 45 d8	 mov	 DWORD PTR _Target$[ebp], eax
$LN27@MLS_SkillC:

; 4675 : 
; 4676 : 	while( TRUE )

  09eee	b8 01 00 00 00	 mov	 eax, 1
  09ef3	85 c0		 test	 eax, eax
  09ef5	0f 84 e9 02 00
	00		 je	 $LN26@MLS_SkillC

; 4677 : 	{
; 4678 : 		if(lpObj->VpPlayer2[count].state != 0)

  09efb	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  09efe	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09f01	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09f04	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  09f0c	85 d2		 test	 edx, edx
  09f0e	0f 84 ba 02 00
	00		 je	 $LN25@MLS_SkillC

; 4679 : 		{
; 4680 : 			tObjNum = lpObj->VpPlayer2[count].number;

  09f14	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  09f17	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09f1a	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09f1d	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  09f25	89 55 e8	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 4681 : 
; 4682 : 			if( tObjNum >= 0 )

  09f28	83 7d e8 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  09f2c	0f 8c 9c 02 00
	00		 jl	 $LN25@MLS_SkillC

; 4683 : 			{
; 4684 : 				EnableAttack = 0;

  09f32	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 4685 : 
; 4686 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  09f39	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  09f3c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  09f3f	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  09f42	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  09f4a	83 fa 02	 cmp	 edx, 2
  09f4d	75 25		 jne	 SHORT $LN23@MLS_SkillC
  09f4f	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09f52	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09f58	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09f5e	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  09f66	7d 0c		 jge	 SHORT $LN23@MLS_SkillC

; 4687 : 				{
; 4688 : 					EnableAttack = 1;

  09f68	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  09f6f	e9 b2 00 00 00	 jmp	 $LN22@MLS_SkillC
$LN23@MLS_SkillC:

; 4689 : 				}
; 4690 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  09f74	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09f77	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  09f7a	74 08		 je	 SHORT $LN20@MLS_SkillC
  09f7c	8b 45 d4	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  09f7f	3b 45 e8	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  09f82	75 0c		 jne	 SHORT $LN21@MLS_SkillC
$LN20@MLS_SkillC:

; 4691 : 				{
; 4692 : 					EnableAttack = 1;

  09f84	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1

; 4693 : 				}
; 4694 : 				else

  09f8b	e9 96 00 00 00	 jmp	 $LN22@MLS_SkillC
$LN21@MLS_SkillC:

; 4695 : 				{
; 4696 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  09f90	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09f93	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09f99	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09f9f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  09fa2	89 55 cc	 mov	 DWORD PTR _CallMonIndex$236137[ebp], edx

; 4697 : 
; 4698 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  09fa5	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09fa8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09fae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09fb4	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  09fb9	83 fa 02	 cmp	 edx, 2
  09fbc	75 40		 jne	 SHORT $LN18@MLS_SkillC
  09fbe	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09fc1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09fc7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09fcd	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  09fd5	7c 27		 jl	 SHORT $LN18@MLS_SkillC

; 4699 : 					{
; 4700 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  09fd7	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  09fda	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  09fe0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09fe6	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  09fed	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  09ff3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  09ff8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  09ffb	89 4d cc	 mov	 DWORD PTR _CallMonIndex$236137[ebp], ecx
$LN18@MLS_SkillC:

; 4701 : 					}
; 4702 : 
; 4703 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  09ffe	8b 45 cc	 mov	 eax, DWORD PTR _CallMonIndex$236137[ebp]
  0a001	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a007	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a00d	50		 push	 eax
  0a00e	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a011	51		 push	 ecx
  0a012	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0a017	83 c4 08	 add	 esp, 8
  0a01a	83 f8 01	 cmp	 eax, 1
  0a01d	75 07		 jne	 SHORT $LN22@MLS_SkillC

; 4704 : 					{
; 4705 : 						EnableAttack = 1;

  0a01f	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN22@MLS_SkillC:

; 4706 : 					}
; 4707 : 				}
; 4708 : 
; 4709 : 				if( EnableAttack != 0 )

  0a026	83 7d d0 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0a02a	0f 84 9e 01 00
	00		 je	 $LN25@MLS_SkillC

; 4710 : 				{
; 4711 : 					if( gObj[tObjNum].X >= (lpTargetObj->X -1) &&
; 4712 : 						gObj[tObjNum].X <= (lpTargetObj->X +1) &&
; 4713 : 						gObj[tObjNum].Y >= (lpTargetObj->Y -1) &&
; 4714 : 						gObj[tObjNum].Y <= (lpTargetObj->Y +1) &&
; 4715 : 						gObj[tObjNum].Type == OBJ_MONSTER )

  0a030	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a033	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a03f	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0a047	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0a04a	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0a051	83 e9 01	 sub	 ecx, 1
  0a054	3b d1		 cmp	 edx, ecx
  0a056	0f 8c a7 00 00
	00		 jl	 $LN15@MLS_SkillC
  0a05c	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a05f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a06b	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0a073	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0a076	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0a07d	83 c1 01	 add	 ecx, 1
  0a080	3b d1		 cmp	 edx, ecx
  0a082	7f 7f		 jg	 SHORT $LN15@MLS_SkillC
  0a084	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a087	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a08d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a093	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0a09b	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0a09e	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0a0a5	83 e9 01	 sub	 ecx, 1
  0a0a8	3b d1		 cmp	 edx, ecx
  0a0aa	7c 57		 jl	 SHORT $LN15@MLS_SkillC
  0a0ac	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a0af	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a0b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a0bb	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0a0c3	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0a0c6	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0a0cd	83 c1 01	 add	 ecx, 1
  0a0d0	3b d1		 cmp	 edx, ecx
  0a0d2	7f 2f		 jg	 SHORT $LN15@MLS_SkillC
  0a0d4	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a0d7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a0dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a0e3	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0a0e8	83 fa 02	 cmp	 edx, 2
  0a0eb	75 16		 jne	 SHORT $LN15@MLS_SkillC

; 4716 : 					{
; 4717 : 						Target[1] = tObjNum;

  0a0ed	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a0f0	89 45 dc	 mov	 DWORD PTR _Target$[ebp+4], eax

; 4718 : 
; 4719 : 						if(Target[2] != -1)

  0a0f3	83 7d e0 ff	 cmp	 DWORD PTR _Target$[ebp+8], -1
  0a0f7	74 05		 je	 SHORT $LN14@MLS_SkillC

; 4720 : 							break;

  0a0f9	e9 e6 00 00 00	 jmp	 $LN26@MLS_SkillC
$LN14@MLS_SkillC:

; 4721 : 					}
; 4722 : 					else if( gObj[tObjNum].X >= (lpTargetObj->X -2) &&

  0a0fe	e9 cb 00 00 00	 jmp	 $LN25@MLS_SkillC
$LN15@MLS_SkillC:

; 4723 : 						gObj[tObjNum].X <= (lpTargetObj->X +2) &&
; 4724 : 						gObj[tObjNum].Y >= (lpTargetObj->Y -2) &&
; 4725 : 						gObj[tObjNum].Y <= (lpTargetObj->Y +2) &&
; 4726 : 						gObj[tObjNum].Type == OBJ_MONSTER )

  0a103	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a106	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a10c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a112	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0a11a	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0a11d	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0a124	83 e9 02	 sub	 ecx, 2
  0a127	3b d1		 cmp	 edx, ecx
  0a129	0f 8c 9f 00 00
	00		 jl	 $LN25@MLS_SkillC
  0a12f	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a132	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a13e	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0a146	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0a149	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0a150	83 c1 02	 add	 ecx, 2
  0a153	3b d1		 cmp	 edx, ecx
  0a155	7f 77		 jg	 SHORT $LN25@MLS_SkillC
  0a157	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a15a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a160	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a166	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0a16e	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0a171	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0a178	83 e9 02	 sub	 ecx, 2
  0a17b	3b d1		 cmp	 edx, ecx
  0a17d	7c 4f		 jl	 SHORT $LN25@MLS_SkillC
  0a17f	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a182	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a18e	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0a196	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0a199	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0a1a0	83 c1 02	 add	 ecx, 2
  0a1a3	3b d1		 cmp	 edx, ecx
  0a1a5	7f 27		 jg	 SHORT $LN25@MLS_SkillC
  0a1a7	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a1aa	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a1b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a1b6	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0a1bb	83 fa 02	 cmp	 edx, 2
  0a1be	75 0e		 jne	 SHORT $LN25@MLS_SkillC

; 4727 : 					{
; 4728 : 						Target[2] = tObjNum;

  0a1c0	8b 45 e8	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a1c3	89 45 e0	 mov	 DWORD PTR _Target$[ebp+8], eax

; 4729 : 	
; 4730 : 						if(Target[1] != -1)

  0a1c6	83 7d dc ff	 cmp	 DWORD PTR _Target$[ebp+4], -1
  0a1ca	74 02		 je	 SHORT $LN25@MLS_SkillC

; 4731 : 							break;

  0a1cc	eb 16		 jmp	 SHORT $LN26@MLS_SkillC
$LN25@MLS_SkillC:

; 4732 : 					}
; 4733 : 				}
; 4734 : 			}
; 4735 : 		}
; 4736 : 
; 4737 : 		count++;

  0a1ce	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  0a1d1	83 c0 01	 add	 eax, 1
  0a1d4	89 45 e4	 mov	 DWORD PTR _count$[ebp], eax

; 4738 : 
; 4739 : 		if( count > MAX_VIEWPORT -1)

  0a1d7	83 7d e4 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0a1db	7e 02		 jle	 SHORT $LN10@MLS_SkillC

; 4740 : 		{
; 4741 : 			break;

  0a1dd	eb 05		 jmp	 SHORT $LN26@MLS_SkillC
$LN10@MLS_SkillC:

; 4742 : 		}
; 4743 : 	}

  0a1df	e9 0a fd ff ff	 jmp	 $LN27@MLS_SkillC
$LN26@MLS_SkillC:

; 4744 : 
; 4745 : 	if( Target[2] == -1 )

  0a1e4	83 7d e0 ff	 cmp	 DWORD PTR _Target$[ebp+8], -1
  0a1e8	75 06		 jne	 SHORT $LN9@MLS_SkillC

; 4746 : 	{
; 4747 : 		Target[2] = Target[1];

  0a1ea	8b 45 dc	 mov	 eax, DWORD PTR _Target$[ebp+4]
  0a1ed	89 45 e0	 mov	 DWORD PTR _Target$[ebp+8], eax
$LN9@MLS_SkillC:

; 4748 : 	}
; 4749 : 
; 4750 : 	if( Target[1] == -1 )

  0a1f0	83 7d dc ff	 cmp	 DWORD PTR _Target$[ebp+4], -1
  0a1f4	75 0c		 jne	 SHORT $LN8@MLS_SkillC

; 4751 : 	{
; 4752 : 		Target[1] = Target[0];

  0a1f6	8b 45 d8	 mov	 eax, DWORD PTR _Target$[ebp]
  0a1f9	89 45 dc	 mov	 DWORD PTR _Target$[ebp+4], eax

; 4753 : 		Target[2] = Target[1];

  0a1fc	8b 45 dc	 mov	 eax, DWORD PTR _Target$[ebp+4]
  0a1ff	89 45 e0	 mov	 DWORD PTR _Target$[ebp+8], eax
$LN8@MLS_SkillC:

; 4754 : 	}
; 4755 : 
; 4756 : 	int lOfs = 0;

  0a202	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _lOfs$[ebp], 0

; 4757 : 	BYTE cBUFF[256];
; 4758 : 	PMSG_SKILL_TARGET_COUNT pMsg;
; 4759 : 
; 4760 : 	pMsg.MagicNumberH = SET_NUMBERH(lpMagic->m_Skill);

  0a209	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0a20c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0a20f	c1 e9 08	 shr	 ecx, 8
  0a212	88 8d c0 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+4], cl

; 4761 : 	pMsg.MagicNumberL = SET_NUMBERL(lpMagic->m_Skill);

  0a218	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0a21b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0a21e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0a224	88 8d c1 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], cl

; 4762 : 	pMsg.Index = aIndex;

  0a22a	66 8b 45 08	 mov	 ax, WORD PTR _aIndex$[ebp]
  0a22e	66 89 85 c2 fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+6], ax

; 4763 : 	pMsg.Count = 3;

  0a235	c6 85 c4 fe ff
	ff 03		 mov	 BYTE PTR _pMsg$[ebp+8], 3

; 4764 : 
; 4765 : 	lOfs += sizeof(pMsg);

  0a23c	8b 45 c8	 mov	 eax, DWORD PTR _lOfs$[ebp]
  0a23f	83 c0 0a	 add	 eax, 10			; 0000000aH
  0a242	89 45 c8	 mov	 DWORD PTR _lOfs$[ebp], eax

; 4766 : 
; 4767 : 	int i;
; 4768 : 	for(i = 0; i < 3; i++)

  0a245	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0a24f	eb 0f		 jmp	 SHORT $LN7@MLS_SkillC
$LN6@MLS_SkillC:
  0a251	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0a257	83 c0 01	 add	 eax, 1
  0a25a	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN7@MLS_SkillC:
  0a260	83 bd b8 fe ff
	ff 03		 cmp	 DWORD PTR _i$[ebp], 3
  0a267	7d 39		 jge	 SHORT $LN5@MLS_SkillC

; 4769 : 	{
; 4770 : 		WORD wIndex = Target[i];

  0a269	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0a26f	66 8b 4c 85 d8	 mov	 cx, WORD PTR _Target$[ebp+eax*4]
  0a274	66 89 8d b4 fe
	ff ff		 mov	 WORD PTR _wIndex$236161[ebp], cx

; 4771 : 		memcpy(&cBUFF[lOfs],&wIndex,2);

  0a27b	6a 02		 push	 2
  0a27d	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _wIndex$236161[ebp]
  0a283	50		 push	 eax
  0a284	8b 4d c8	 mov	 ecx, DWORD PTR _lOfs$[ebp]
  0a287	8d 94 0d c8 fe
	ff ff		 lea	 edx, DWORD PTR _cBUFF$[ebp+ecx]
  0a28e	52		 push	 edx
  0a28f	e8 00 00 00 00	 call	 _memcpy
  0a294	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4772 : 		lOfs+= 2;

  0a297	8b 45 c8	 mov	 eax, DWORD PTR _lOfs$[ebp]
  0a29a	83 c0 02	 add	 eax, 2
  0a29d	89 45 c8	 mov	 DWORD PTR _lOfs$[ebp], eax

; 4773 : 	}

  0a2a0	eb af		 jmp	 SHORT $LN6@MLS_SkillC
$LN5@MLS_SkillC:

; 4774 : 
; 4775 : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,10,lOfs);

  0a2a2	8b 45 c8	 mov	 eax, DWORD PTR _lOfs$[ebp]
  0a2a5	50		 push	 eax
  0a2a6	6a 0a		 push	 10			; 0000000aH
  0a2a8	68 bf 00 00 00	 push	 191			; 000000bfH
  0a2ad	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0a2b3	51		 push	 ecx
  0a2b4	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0a2b9	83 c4 10	 add	 esp, 16			; 00000010H

; 4776 : 	memcpy(&cBUFF[0],&pMsg,sizeof(pMsg));

  0a2bc	6a 0a		 push	 10			; 0000000aH
  0a2be	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0a2c4	50		 push	 eax
  0a2c5	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _cBUFF$[ebp]
  0a2cb	51		 push	 ecx
  0a2cc	e8 00 00 00 00	 call	 _memcpy
  0a2d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4777 : 
; 4778 : 	if( lpObj->Type == OBJ_USER )

  0a2d4	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a2d7	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0a2db	83 f9 01	 cmp	 ecx, 1
  0a2de	75 1d		 jne	 SHORT $LN4@MLS_SkillC

; 4779 : 	{
; 4780 : 		DataSend(lpObj->m_Index,(LPBYTE)&cBUFF[0],pMsg.h.size);

  0a2e0	0f b6 85 bd fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0a2e7	50		 push	 eax
  0a2e8	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _cBUFF$[ebp]
  0a2ee	51		 push	 ecx
  0a2ef	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0a2f2	8b 02		 mov	 eax, DWORD PTR [edx]
  0a2f4	50		 push	 eax
  0a2f5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0a2fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@MLS_SkillC:

; 4781 : 	}
; 4782 : 
; 4783 : 	MsgSendV2(lpObj,(LPBYTE)&cBUFF[0],pMsg.h.size);

  0a2fd	0f b6 85 bd fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0a304	50		 push	 eax
  0a305	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _cBUFF$[ebp]
  0a30b	51		 push	 ecx
  0a30c	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0a30f	52		 push	 edx
  0a310	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2
  0a315	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4784 : 
; 4785 : 	for(i = 0; i < 3; i++)

  0a318	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0a322	eb 0f		 jmp	 SHORT $LN3@MLS_SkillC
$LN2@MLS_SkillC:
  0a324	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0a32a	83 c0 01	 add	 eax, 1
  0a32d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN3@MLS_SkillC:
  0a333	83 bd b8 fe ff
	ff 03		 cmp	 DWORD PTR _i$[ebp], 3
  0a33a	7d 3e		 jge	 SHORT $LN1@MLS_SkillC

; 4786 : 	{
; 4787 : 		gObjAddAttackProcMsgSendDelay(lpObj,50,Target[i],200 + 200*i,lpMagic->m_Skill,i+1);

  0a33c	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0a342	83 c0 01	 add	 eax, 1
  0a345	50		 push	 eax
  0a346	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0a349	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0a34c	52		 push	 edx
  0a34d	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0a353	69 c0 c8 00 00
	00		 imul	 eax, 200		; 000000c8H
  0a359	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  0a35e	50		 push	 eax
  0a35f	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0a365	8b 54 8d d8	 mov	 edx, DWORD PTR _Target$[ebp+ecx*4]
  0a369	52		 push	 edx
  0a36a	6a 32		 push	 50			; 00000032H
  0a36c	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a36f	50		 push	 eax
  0a370	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0a375	83 c4 18	 add	 esp, 24			; 00000018H

; 4788 : 	}

  0a378	eb aa		 jmp	 SHORT $LN2@MLS_SkillC
$LN1@MLS_SkillC:

; 4789 : return bSuccess;

  0a37a	8b 45 ec	 mov	 eax, DWORD PTR _bSuccess$[ebp]
$LN29@MLS_SkillC:

; 4790 : }

  0a37d	5f		 pop	 edi
  0a37e	5e		 pop	 esi
  0a37f	5b		 pop	 ebx
  0a380	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0a383	33 cd		 xor	 ecx, ebp
  0a385	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0a38a	8b e5		 mov	 esp, ebp
  0a38c	5d		 pop	 ebp
  0a38d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning
; Function compile flags: /Odtp /ZI
tv141 = -124						; size = 4
tv151 = -120						; size = 4
tv142 = -120						; size = 4
_CallMonIndex$236203 = -52				; size = 4
_DuelIndex$ = -48					; size = 4
_bPVP$ = -44						; size = 4
_EnableAttack$ = -40					; size = 4
_nHitCount$ = -36					; size = 4
_iDistance$ = -32					; size = 4
_HitCount$ = -28					; size = 4
_count$ = -24						; size = 4
_tObjNum$ = -20						; size = 4
_bAttack$ = -16						; size = 4
_bRet$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock
; _this$ = ecx

; 4793 : {

  0a390	55		 push	 ebp
  0a391	8b ec		 mov	 ebp, esp
  0a393	83 ec 7c	 sub	 esp, 124		; 0000007cH
  0a396	53		 push	 ebx
  0a397	56		 push	 esi
  0a398	57		 push	 edi
  0a399	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4794 : 	LPOBJ lpObj = &gObj[aIndex];

  0a39c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0a39f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a3a5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a3ab	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4795 : 	int bRet = 0;

  0a3ae	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 4796 : 	int bAttack = 0;

  0a3b5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 4797 : 	int tObjNum;
; 4798 : 	int count = 0;

  0a3bc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 4799 : 	int HitCount = 0;

  0a3c3	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 4800 : 	int iDistance = 7;

  0a3ca	c7 45 e0 07 00
	00 00		 mov	 DWORD PTR _iDistance$[ebp], 7

; 4801 : 	int nHitCount = 0;

  0a3d1	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _nHitCount$[ebp], 0

; 4802 : 
; 4803 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  0a3d8	6a 01		 push	 1
  0a3da	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0a3dd	50		 push	 eax
  0a3de	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0a3e1	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0a3e5	52		 push	 edx
  0a3e6	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a3e9	50		 push	 eax
  0a3ea	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0a3ef	83 c4 10	 add	 esp, 16			; 00000010H

; 4804 : 
; 4805 : 	int EnableAttack;
; 4806 : 	int bPVP = TRUE;

  0a3f2	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _bPVP$[ebp], 1

; 4807 : 	int DuelIndex = lpObj->m_iDuelUser;

  0a3f9	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a3fc	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0a402	89 4d d0	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN26@MLS_SkillL:

; 4808 : 
; 4809 : 	while ( true )

  0a405	b8 01 00 00 00	 mov	 eax, 1
  0a40a	85 c0		 test	 eax, eax
  0a40c	0f 84 f6 02 00
	00		 je	 $LN25@MLS_SkillL

; 4810 : 	{
; 4811 : 		if(lpObj->VpPlayer2[count].state != 0)

  0a412	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0a415	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0a418	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a41b	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0a423	85 d2		 test	 edx, edx
  0a425	0f 84 c7 02 00
	00		 je	 $LN24@MLS_SkillL

; 4812 : 		{
; 4813 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0a42b	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0a42e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0a431	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a434	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0a43c	89 55 ec	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 4814 : 
; 4815 : 			if(tObjNum >= 0 && gObj[tObjNum].Live )

  0a43f	83 7d ec 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0a443	0f 8c a9 02 00
	00		 jl	 $LN24@MLS_SkillL
  0a449	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a44c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a452	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a458	0f b6 54 01 6a	 movzx	 edx, BYTE PTR [ecx+eax+106]
  0a45d	85 d2		 test	 edx, edx
  0a45f	0f 84 8d 02 00
	00		 je	 $LN24@MLS_SkillL

; 4816 : 			{
; 4817 : 				EnableAttack = 0;

  0a465	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 4818 : 
; 4819 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0a46c	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0a46f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0a472	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a475	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0a47d	83 fa 02	 cmp	 edx, 2
  0a480	75 25		 jne	 SHORT $LN22@MLS_SkillL
  0a482	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a485	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a48b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a491	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0a499	7d 0c		 jge	 SHORT $LN22@MLS_SkillL

; 4820 : 				{
; 4821 : 					EnableAttack = 1;

  0a49b	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0a4a2	e9 b9 01 00 00	 jmp	 $LN21@MLS_SkillL
$LN22@MLS_SkillL:

; 4822 : 				}
; 4823 : 				else if( CC_MAP_RANGE( lpObj->MapNumber ) || IT_MAP_RANGE( lpObj->MapNumber ) )

  0a4a7	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a4aa	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0a4b1	83 f9 35	 cmp	 ecx, 53			; 00000035H
  0a4b4	75 09		 jne	 SHORT $LN31@MLS_SkillL
  0a4b6	c7 45 88 01 00
	00 00		 mov	 DWORD PTR tv142[ebp], 1
  0a4bd	eb 33		 jmp	 SHORT $LN32@MLS_SkillL
$LN31@MLS_SkillL:
  0a4bf	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0a4c2	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0a4c9	83 f8 12	 cmp	 eax, 18			; 00000012H
  0a4cc	7d 09		 jge	 SHORT $LN29@MLS_SkillL
  0a4ce	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
  0a4d5	eb 15		 jmp	 SHORT $LN30@MLS_SkillL
$LN29@MLS_SkillL:
  0a4d7	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a4da	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  0a4e1	33 c0		 xor	 eax, eax
  0a4e3	83 fa 17	 cmp	 edx, 23			; 00000017H
  0a4e6	0f 9e c0	 setle	 al
  0a4e9	89 45 84	 mov	 DWORD PTR tv141[ebp], eax
$LN30@MLS_SkillL:
  0a4ec	8b 4d 84	 mov	 ecx, DWORD PTR tv141[ebp]
  0a4ef	89 4d 88	 mov	 DWORD PTR tv142[ebp], ecx
$LN32@MLS_SkillL:
  0a4f2	83 7d 88 00	 cmp	 DWORD PTR tv142[ebp], 0
  0a4f6	75 33		 jne	 SHORT $LN19@MLS_SkillL
  0a4f8	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a4fb	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0a502	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  0a505	7d 09		 jge	 SHORT $LN33@MLS_SkillL
  0a507	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
  0a50e	eb 15		 jmp	 SHORT $LN34@MLS_SkillL
$LN33@MLS_SkillL:
  0a510	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0a513	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0a51a	33 c9		 xor	 ecx, ecx
  0a51c	83 f8 32	 cmp	 eax, 50			; 00000032H
  0a51f	0f 9e c1	 setle	 cl
  0a522	89 4d 88	 mov	 DWORD PTR tv151[ebp], ecx
$LN34@MLS_SkillL:
  0a525	83 7d 88 00	 cmp	 DWORD PTR tv151[ebp], 0
  0a529	74 0c		 je	 SHORT $LN20@MLS_SkillL
$LN19@MLS_SkillL:

; 4824 : 				{
; 4825 : 					EnableAttack = 1;

  0a52b	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0a532	e9 29 01 00 00	 jmp	 $LN21@MLS_SkillL
$LN20@MLS_SkillL:

; 4826 : 				}
; 4827 : 				else if( (tObjNum == aTargetIndex && bPVP == TRUE ) || DuelIndex == tObjNum)

  0a537	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a53a	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0a53d	75 06		 jne	 SHORT $LN15@MLS_SkillL
  0a53f	83 7d d4 01	 cmp	 DWORD PTR _bPVP$[ebp], 1
  0a543	74 08		 je	 SHORT $LN16@MLS_SkillL
$LN15@MLS_SkillL:
  0a545	8b 45 d0	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0a548	3b 45 ec	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0a54b	75 0c		 jne	 SHORT $LN17@MLS_SkillL
$LN16@MLS_SkillL:

; 4828 : 				{
; 4829 : 					EnableAttack = 1;

  0a54d	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0a554	e9 07 01 00 00	 jmp	 $LN21@MLS_SkillL
$LN17@MLS_SkillL:

; 4830 : 				}
; 4831 : 
; 4832 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0a559	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0a55c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0a55f	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a562	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0a56a	83 fa 03	 cmp	 edx, 3
  0a56d	74 5b		 je	 SHORT $LN13@MLS_SkillL
  0a56f	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a572	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a578	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a57e	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0a586	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0a589	75 3f		 jne	 SHORT $LN13@MLS_SkillL
  0a58b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0a590	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0a595	83 f8 07	 cmp	 eax, 7
  0a598	75 30		 jne	 SHORT $LN13@MLS_SkillL

; 4833 : 				{
; 4834 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0a59a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a59d	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0a5a4	8b 55 ec	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0a5a7	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0a5ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a5b2	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0a5ba	3b ca		 cmp	 ecx, edx
  0a5bc	74 07		 je	 SHORT $LN12@MLS_SkillL

; 4835 : 						EnableAttack = 1;

  0a5be	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN12@MLS_SkillL:

; 4836 : 				}
; 4837 : 
; 4838 : 				else

  0a5c5	e9 96 00 00 00	 jmp	 $LN21@MLS_SkillL
$LN13@MLS_SkillL:

; 4839 : 				{
; 4840 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0a5ca	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a5cd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a5d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a5d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0a5dc	89 55 cc	 mov	 DWORD PTR _CallMonIndex$236203[ebp], edx

; 4841 : 
; 4842 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0a5df	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a5e2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a5e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a5ee	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0a5f3	83 fa 02	 cmp	 edx, 2
  0a5f6	75 40		 jne	 SHORT $LN10@MLS_SkillL
  0a5f8	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a5fb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a601	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a607	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0a60f	7c 27		 jl	 SHORT $LN10@MLS_SkillL

; 4843 : 					{
; 4844 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0a611	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a614	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a61a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a620	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0a627	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0a62d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a632	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0a635	89 4d cc	 mov	 DWORD PTR _CallMonIndex$236203[ebp], ecx
$LN10@MLS_SkillL:

; 4845 : 					}
; 4846 : 
; 4847 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0a638	8b 45 cc	 mov	 eax, DWORD PTR _CallMonIndex$236203[ebp]
  0a63b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a641	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a647	50		 push	 eax
  0a648	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a64b	51		 push	 ecx
  0a64c	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0a651	83 c4 08	 add	 esp, 8
  0a654	83 f8 01	 cmp	 eax, 1
  0a657	75 07		 jne	 SHORT $LN21@MLS_SkillL

; 4848 : 					{
; 4849 : 						EnableAttack = 1;

  0a659	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN21@MLS_SkillL:

; 4850 : 					}
; 4851 : 				}
; 4852 : 
; 4853 : 				if(EnableAttack != 0)

  0a660	83 7d d8 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0a664	0f 84 88 00 00
	00		 je	 $LN24@MLS_SkillL

; 4854 : 				{
; 4855 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) < 7)

  0a66a	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a66d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a673	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a679	50		 push	 eax
  0a67a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a67d	51		 push	 ecx
  0a67e	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0a683	83 c4 08	 add	 esp, 8
  0a686	83 f8 07	 cmp	 eax, 7
  0a689	7d 67		 jge	 SHORT $LN24@MLS_SkillL

; 4856 : 					{
; 4857 : 						nHitCount++;

  0a68b	8b 45 dc	 mov	 eax, DWORD PTR _nHitCount$[ebp]
  0a68e	83 c0 01	 add	 eax, 1
  0a691	89 45 dc	 mov	 DWORD PTR _nHitCount$[ebp], eax

; 4858 : 
; 4859 : 						if( nHitCount > 5)

  0a694	83 7d dc 05	 cmp	 DWORD PTR _nHitCount$[ebp], 5
  0a698	7e 1e		 jle	 SHORT $LN6@MLS_SkillL

; 4860 : 						{
; 4861 : 							if( rand()%2 )

  0a69a	e8 00 00 00 00	 call	 _rand
  0a69f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0a6a4	79 05		 jns	 SHORT $LN35@MLS_SkillL
  0a6a6	48		 dec	 eax
  0a6a7	83 c8 fe	 or	 eax, -2			; fffffffeH
  0a6aa	40		 inc	 eax
$LN35@MLS_SkillL:
  0a6ab	85 c0		 test	 eax, eax
  0a6ad	74 07		 je	 SHORT $LN5@MLS_SkillL

; 4862 : 							{
; 4863 : 								bAttack = TRUE;

  0a6af	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN5@MLS_SkillL:

; 4864 : 							}
; 4865 : 						}
; 4866 : 						else

  0a6b6	eb 07		 jmp	 SHORT $LN4@MLS_SkillL
$LN6@MLS_SkillL:

; 4867 : 						{
; 4868 : 							bAttack = TRUE;

  0a6b8	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN4@MLS_SkillL:

; 4869 : 						}
; 4870 : 
; 4871 : 						if( nHitCount > 12)

  0a6bf	83 7d dc 0c	 cmp	 DWORD PTR _nHitCount$[ebp], 12 ; 0000000cH
  0a6c3	7e 07		 jle	 SHORT $LN3@MLS_SkillL

; 4872 : 						{
; 4873 : 							bAttack = FALSE;

  0a6c5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN3@MLS_SkillL:

; 4874 : 						}
; 4875 : 
; 4876 : 						if(bAttack == TRUE)

  0a6cc	83 7d f0 01	 cmp	 DWORD PTR _bAttack$[ebp], 1
  0a6d0	75 20		 jne	 SHORT $LN24@MLS_SkillL

; 4877 : 						{
; 4878 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,250,lpMagic->m_Skill,0);

  0a6d2	6a 00		 push	 0
  0a6d4	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0a6d7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0a6da	51		 push	 ecx
  0a6db	68 fa 00 00 00	 push	 250			; 000000faH
  0a6e0	8b 55 ec	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0a6e3	52		 push	 edx
  0a6e4	6a 32		 push	 50			; 00000032H
  0a6e6	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a6e9	50		 push	 eax
  0a6ea	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0a6ef	83 c4 18	 add	 esp, 24			; 00000018H
$LN24@MLS_SkillL:

; 4879 : 						}
; 4880 : 					}
; 4881 : 				}
; 4882 : 			}
; 4883 : 		}
; 4884 : 
; 4885 : 		count++;

  0a6f2	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0a6f5	83 c0 01	 add	 eax, 1
  0a6f8	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax

; 4886 : 		if(count > MAX_VIEWPORT -1)

  0a6fb	83 7d e8 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0a6ff	7e 02		 jle	 SHORT $LN1@MLS_SkillL

; 4887 : 		{
; 4888 : 			break;

  0a701	eb 05		 jmp	 SHORT $LN25@MLS_SkillL
$LN1@MLS_SkillL:

; 4889 : 		}
; 4890 : 	}

  0a703	e9 fd fc ff ff	 jmp	 $LN26@MLS_SkillL
$LN25@MLS_SkillL:

; 4891 : return TRUE;

  0a708	b8 01 00 00 00	 mov	 eax, 1

; 4892 : }

  0a70d	5f		 pop	 edi
  0a70e	5e		 pop	 esi
  0a70f	5b		 pop	 ebx
  0a710	8b e5		 mov	 esp, ebp
  0a712	5d		 pop	 ebp
  0a713	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock
; Function compile flags: /Odtp /ZI
tv67 = -104						; size = 4
_CallMonIndex$236238 = -36				; size = 4
_EnableAttack$ = -32					; size = 4
_DuelIndex$ = -28					; size = 4
_count$ = -24						; size = 4
_Angle$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_bRet$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife
; _this$ = ecx

; 4895 : {

  0a720	55		 push	 ebp
  0a721	8b ec		 mov	 ebp, esp
  0a723	83 ec 68	 sub	 esp, 104		; 00000068H
  0a726	53		 push	 ebx
  0a727	56		 push	 esi
  0a728	57		 push	 edi
  0a729	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4896 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  0a72c	83 7d 0c 00	 cmp	 DWORD PTR _aTargetIndex$[ebp], 0
  0a730	7d 09		 jge	 SHORT $LN17@MLS_SkillD@2
  0a732	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  0a739	eb 0f		 jmp	 SHORT $LN18@MLS_SkillD@2
$LN17@MLS_SkillD@2:
  0a73b	33 c0		 xor	 eax, eax
  0a73d	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aTargetIndex$[ebp], 14999 ; 00003a97H
  0a744	0f 9e c0	 setle	 al
  0a747	89 45 98	 mov	 DWORD PTR tv67[ebp], eax
$LN18@MLS_SkillD@2:
  0a74a	83 7d 98 00	 cmp	 DWORD PTR tv67[ebp], 0
  0a74e	75 07		 jne	 SHORT $LN14@MLS_SkillD@2

; 4897 : 		return false;

  0a750	33 c0		 xor	 eax, eax
  0a752	e9 3a 02 00 00	 jmp	 $LN15@MLS_SkillD@2
$LN14@MLS_SkillD@2:

; 4898 : 
; 4899 : 	LPOBJ lpObj = &gObj[aIndex];

  0a757	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0a75a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a760	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a766	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 4900 : 	int bRet = FALSE;

  0a769	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 4901 : 	int tObjNum;
; 4902 : 
; 4903 : 	int Angle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  0a770	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0a773	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a779	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a77f	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0a787	52		 push	 edx
  0a788	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0a78b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a791	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a797	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0a79f	52		 push	 edx
  0a7a0	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a7a3	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0a7aa	51		 push	 ecx
  0a7ab	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0a7ae	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  0a7b5	50		 push	 eax
  0a7b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0a7b9	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
  0a7be	89 45 ec	 mov	 DWORD PTR _Angle$[ebp], eax

; 4904 : 	int count = 0;

  0a7c1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 4905 : 
; 4906 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  0a7c8	6a 01		 push	 1
  0a7ca	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0a7cd	50		 push	 eax
  0a7ce	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0a7d1	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0a7d5	52		 push	 edx
  0a7d6	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a7d9	50		 push	 eax
  0a7da	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0a7df	83 c4 10	 add	 esp, 16			; 00000010H

; 4907 : 
; 4908 : 	int DuelIndex = lpObj->m_iDuelUser;

  0a7e2	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a7e5	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0a7eb	89 4d e4	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN13@MLS_SkillD@2:

; 4909 : 	int EnableAttack;
; 4910 : 
; 4911 : 	while( TRUE )

  0a7ee	b8 01 00 00 00	 mov	 eax, 1
  0a7f3	85 c0		 test	 eax, eax
  0a7f5	0f 84 93 01 00
	00		 je	 $LN12@MLS_SkillD@2

; 4912 : 	{
; 4913 : 		if(lpObj->VpPlayer2[count].state != 0)

  0a7fb	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0a7fe	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0a801	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a804	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0a80c	85 d2		 test	 edx, edx
  0a80e	0f 84 64 01 00
	00		 je	 $LN11@MLS_SkillD@2

; 4914 : 		{
; 4915 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0a814	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0a817	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0a81a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a81d	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0a825	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 4916 : 
; 4917 : 			if( tObjNum >= 0 )

  0a828	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0a82c	0f 8c 46 01 00
	00		 jl	 $LN11@MLS_SkillD@2

; 4918 : 			{
; 4919 : 				EnableAttack = 0;

  0a832	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 4920 : 
; 4921 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0a839	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0a83c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0a83f	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a842	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0a84a	83 fa 02	 cmp	 edx, 2
  0a84d	75 25		 jne	 SHORT $LN9@MLS_SkillD@2
  0a84f	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a852	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a858	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a85e	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0a866	7d 0c		 jge	 SHORT $LN9@MLS_SkillD@2

; 4922 : 				{
; 4923 : 					EnableAttack = 1;

  0a868	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0a86f	e9 b2 00 00 00	 jmp	 $LN8@MLS_SkillD@2
$LN9@MLS_SkillD@2:

; 4924 : 				}
; 4925 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0a874	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a877	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0a87a	74 08		 je	 SHORT $LN6@MLS_SkillD@2
  0a87c	8b 45 e4	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0a87f	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0a882	75 0c		 jne	 SHORT $LN7@MLS_SkillD@2
$LN6@MLS_SkillD@2:

; 4926 : 				{
; 4927 : 					EnableAttack = 1;

  0a884	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1

; 4928 : 				}
; 4929 : 				else

  0a88b	e9 96 00 00 00	 jmp	 $LN8@MLS_SkillD@2
$LN7@MLS_SkillD@2:

; 4930 : 				{
; 4931 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0a890	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a893	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a899	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a89f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0a8a2	89 55 dc	 mov	 DWORD PTR _CallMonIndex$236238[ebp], edx

; 4932 : 
; 4933 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0a8a5	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a8a8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a8ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a8b4	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0a8b9	83 fa 02	 cmp	 edx, 2
  0a8bc	75 40		 jne	 SHORT $LN4@MLS_SkillD@2
  0a8be	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a8c1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a8c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a8cd	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0a8d5	7c 27		 jl	 SHORT $LN4@MLS_SkillD@2

; 4934 : 					{
; 4935 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0a8d7	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a8da	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a8e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a8e6	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0a8ed	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0a8f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a8f8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0a8fb	89 4d dc	 mov	 DWORD PTR _CallMonIndex$236238[ebp], ecx
$LN4@MLS_SkillD@2:

; 4936 : 					}
; 4937 : 
; 4938 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0a8fe	8b 45 dc	 mov	 eax, DWORD PTR _CallMonIndex$236238[ebp]
  0a901	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0a907	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0a90d	50		 push	 eax
  0a90e	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0a911	51		 push	 ecx
  0a912	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0a917	83 c4 08	 add	 esp, 8
  0a91a	83 f8 01	 cmp	 eax, 1
  0a91d	75 07		 jne	 SHORT $LN8@MLS_SkillD@2

; 4939 : 					{
; 4940 : 						EnableAttack = 1;

  0a91f	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN8@MLS_SkillD@2:

; 4941 : 					}
; 4942 : 				}
; 4943 : 
; 4944 : 				if( EnableAttack != 0 &&
; 4945 : 					tObjNum == aTargetIndex && 
; 4946 : 					gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) != FALSE )

  0a926	83 7d e0 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0a92a	74 4c		 je	 SHORT $LN11@MLS_SkillD@2
  0a92c	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0a92f	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0a932	75 44		 jne	 SHORT $LN11@MLS_SkillD@2
  0a934	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0a937	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0a93a	51		 push	 ecx
  0a93b	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  0a93e	52		 push	 edx
  0a93f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0a942	50		 push	 eax
  0a943	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  0a948	83 c4 0c	 add	 esp, 12			; 0000000cH
  0a94b	85 c0		 test	 eax, eax
  0a94d	74 29		 je	 SHORT $LN11@MLS_SkillD@2

; 4947 : 				{
; 4948 : 					gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,700,lpMagic->m_Skill,0);

  0a94f	6a 00		 push	 0
  0a951	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0a954	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0a957	51		 push	 ecx
  0a958	68 bc 02 00 00	 push	 700			; 000002bcH
  0a95d	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0a960	52		 push	 edx
  0a961	6a 32		 push	 50			; 00000032H
  0a963	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0a966	50		 push	 eax
  0a967	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0a96c	83 c4 18	 add	 esp, 24			; 00000018H

; 4949 : 					bRet = TRUE;

  0a96f	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1

; 4950 : 					break;

  0a976	eb 16		 jmp	 SHORT $LN12@MLS_SkillD@2
$LN11@MLS_SkillD@2:

; 4951 : 				}
; 4952 : 			}
; 4953 : 		}
; 4954 : 
; 4955 : 		count++;

  0a978	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0a97b	83 c0 01	 add	 eax, 1
  0a97e	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax

; 4956 : 
; 4957 : 		if( count > MAX_VIEWPORT -1)

  0a981	83 7d e8 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0a985	7e 02		 jle	 SHORT $LN1@MLS_SkillD@2

; 4958 : 		{
; 4959 : 			break;

  0a987	eb 05		 jmp	 SHORT $LN12@MLS_SkillD@2
$LN1@MLS_SkillD@2:

; 4960 : 		}
; 4961 : 	}

  0a989	e9 60 fe ff ff	 jmp	 $LN13@MLS_SkillD@2
$LN12@MLS_SkillD@2:

; 4962 : 
; 4963 : return bRet;

  0a98e	8b 45 f4	 mov	 eax, DWORD PTR _bRet$[ebp]
$LN15@MLS_SkillD@2:

; 4964 : }

  0a991	5f		 pop	 edi
  0a992	5e		 pop	 esi
  0a993	5b		 pop	 ebx
  0a994	8b e5		 mov	 esp, ebp
  0a996	5d		 pop	 ebp
  0a997	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife
_TEXT	ENDS
PUBLIC	??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
;	COMDAT ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code :'
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetSkillReqMLPoint - Invalid Class Code  '
	DB	': %d', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iPos$236263 = -20					; size = 4
_iRank$236259 = -16					; size = 4
_iTreeKind$236255 = -12					; size = 4
_nReturn$ = -8						; size = 4
_this$ = -4						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint
; _this$ = ecx

; 4967 : {

  0a9a0	55		 push	 ebp
  0a9a1	8b ec		 mov	 ebp, esp
  0a9a3	83 ec 54	 sub	 esp, 84			; 00000054H
  0a9a6	53		 push	 ebx
  0a9a7	56		 push	 esi
  0a9a8	57		 push	 edi
  0a9a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4968 : 
; 4969 : 	if( iClass < CLASS_WIZARD || iClass > CLASS_MONK )

  0a9ac	83 7d 08 00	 cmp	 DWORD PTR _iClass$[ebp], 0
  0a9b0	7c 06		 jl	 SHORT $LN13@GetSkillRe
  0a9b2	83 7d 08 06	 cmp	 DWORD PTR _iClass$[ebp], 6
  0a9b6	7e 1a		 jle	 SHORT $LN14@GetSkillRe
$LN13@GetSkillRe:

; 4970 : 	{
; 4971 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Class Code  : %d",iClass);

  0a9b8	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0a9bb	50		 push	 eax
  0a9bc	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0a9c1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0a9c7	83 c4 08	 add	 esp, 8

; 4972 : 		return -1;

  0a9ca	83 c8 ff	 or	 eax, -1
  0a9cd	e9 f8 00 00 00	 jmp	 $LN15@GetSkillRe
$LN14@GetSkillRe:

; 4973 : 	}
; 4974 : 
; 4975 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  0a9d2	83 7d 0c 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  0a9d6	7c 09		 jl	 SHORT $LN11@GetSkillRe
  0a9d8	81 7d 0c bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  0a9df	7e 1a		 jle	 SHORT $LN12@GetSkillRe
$LN11@GetSkillRe:

; 4976 : 	{
; 4977 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code : %d",iSkill);

  0a9e1	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0a9e4	50		 push	 eax
  0a9e5	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0a9ea	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0a9f0	83 c4 08	 add	 esp, 8

; 4978 : 		return -1;

  0a9f3	83 c8 ff	 or	 eax, -1
  0a9f6	e9 cf 00 00 00	 jmp	 $LN15@GetSkillRe
$LN12@GetSkillRe:

; 4979 : 	}
; 4980 : 
; 4981 : 	int nReturn = -1;

  0a9fb	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _nReturn$[ebp], -1

; 4982 : 
; 4983 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0aa02	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iTreeKind$236255[ebp], 0
  0aa09	eb 09		 jmp	 SHORT $LN10@GetSkillRe
$LN9@GetSkillRe:
  0aa0b	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236255[ebp]
  0aa0e	83 c0 01	 add	 eax, 1
  0aa11	89 45 f4	 mov	 DWORD PTR _iTreeKind$236255[ebp], eax
$LN10@GetSkillRe:
  0aa14	83 7d f4 03	 cmp	 DWORD PTR _iTreeKind$236255[ebp], 3
  0aa18	0f 8d a9 00 00
	00		 jge	 $LN8@GetSkillRe

; 4984 : 	{
; 4985 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0aa1e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iRank$236259[ebp], 0
  0aa25	eb 09		 jmp	 SHORT $LN7@GetSkillRe
$LN6@GetSkillRe:
  0aa27	8b 45 f0	 mov	 eax, DWORD PTR _iRank$236259[ebp]
  0aa2a	83 c0 01	 add	 eax, 1
  0aa2d	89 45 f0	 mov	 DWORD PTR _iRank$236259[ebp], eax
$LN7@GetSkillRe:
  0aa30	83 7d f0 09	 cmp	 DWORD PTR _iRank$236259[ebp], 9
  0aa34	0f 8d 88 00 00
	00		 jge	 $LN5@GetSkillRe

; 4986 : 		{
; 4987 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  0aa3a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iPos$236263[ebp], 0
  0aa41	eb 09		 jmp	 SHORT $LN4@GetSkillRe
$LN3@GetSkillRe:
  0aa43	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236263[ebp]
  0aa46	83 c0 01	 add	 eax, 1
  0aa49	89 45 ec	 mov	 DWORD PTR _iPos$236263[ebp], eax
$LN4@GetSkillRe:
  0aa4c	83 7d ec 04	 cmp	 DWORD PTR _iPos$236263[ebp], 4
  0aa50	7d 6b		 jge	 SHORT $LN2@GetSkillRe

; 4988 : 			{
; 4989 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  0aa52	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0aa55	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0aa5b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aa5e	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0aa62	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236255[ebp]
  0aa65	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0aa6b	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0aa6f	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236259[ebp]
  0aa72	6b d2 50	 imul	 edx, 80			; 00000050H
  0aa75	03 ca		 add	 ecx, edx
  0aa77	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236263[ebp]
  0aa7a	6b c0 14	 imul	 eax, 20			; 00000014H
  0aa7d	8b 4c 01 10	 mov	 ecx, DWORD PTR [ecx+eax+16]
  0aa81	3b 4d 0c	 cmp	 ecx, DWORD PTR _iSkill$[ebp]
  0aa84	75 35		 jne	 SHORT $LN1@GetSkillRe

; 4990 : 				{
; 4991 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint;

  0aa86	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0aa89	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0aa8f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aa92	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0aa96	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236255[ebp]
  0aa99	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0aa9f	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0aaa3	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236259[ebp]
  0aaa6	6b d2 50	 imul	 edx, 80			; 00000050H
  0aaa9	03 ca		 add	 ecx, edx
  0aaab	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236263[ebp]
  0aaae	6b c0 14	 imul	 eax, 20			; 00000014H
  0aab1	0f b6 4c 01 04	 movzx	 ecx, BYTE PTR [ecx+eax+4]
  0aab6	89 4d f8	 mov	 DWORD PTR _nReturn$[ebp], ecx

; 4992 : 					break;

  0aab9	eb 02		 jmp	 SHORT $LN2@GetSkillRe
$LN1@GetSkillRe:

; 4993 : 				}
; 4994 : 			}

  0aabb	eb 86		 jmp	 SHORT $LN3@GetSkillRe
$LN2@GetSkillRe:

; 4995 : 		}

  0aabd	e9 65 ff ff ff	 jmp	 $LN6@GetSkillRe
$LN5@GetSkillRe:

; 4996 : 	}

  0aac2	e9 44 ff ff ff	 jmp	 $LN9@GetSkillRe
$LN8@GetSkillRe:

; 4997 : return nReturn;

  0aac7	8b 45 f8	 mov	 eax, DWORD PTR _nReturn$[ebp]
$LN15@GetSkillRe:

; 4998 : }

  0aaca	5f		 pop	 edi
  0aacb	5e		 pop	 esi
  0aacc	5b		 pop	 ebx
  0aacd	8b e5		 mov	 esp, ebp
  0aacf	5d		 pop	 ebp
  0aad0	c2 08 00	 ret	 8
?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint
; Function compile flags: /Odtp /ZI
_iPos$236286 = -20					; size = 4
_iRank$236282 = -16					; size = 4
_iTreeKind$236278 = -12					; size = 4
_nReturn$ = -8						; size = 4
_this$ = -4						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
; _this$ = ecx

; 5001 : {

  0aae0	55		 push	 ebp
  0aae1	8b ec		 mov	 ebp, esp
  0aae3	83 ec 54	 sub	 esp, 84			; 00000054H
  0aae6	53		 push	 ebx
  0aae7	56		 push	 esi
  0aae8	57		 push	 edi
  0aae9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5002 : 	if( iClass < CLASS_WIZARD || iClass > CLASS_MONK )

  0aaec	83 7d 08 00	 cmp	 DWORD PTR _iClass$[ebp], 0
  0aaf0	7c 06		 jl	 SHORT $LN13@GetMaxPoin
  0aaf2	83 7d 08 06	 cmp	 DWORD PTR _iClass$[ebp], 6
  0aaf6	7e 1a		 jle	 SHORT $LN14@GetMaxPoin
$LN13@GetMaxPoin:

; 5003 : 	{
; 5004 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Class Code  : %d",iClass);

  0aaf8	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0aafb	50		 push	 eax
  0aafc	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0ab01	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0ab07	83 c4 08	 add	 esp, 8

; 5005 : 		return -1;

  0ab0a	83 c8 ff	 or	 eax, -1
  0ab0d	e9 f8 00 00 00	 jmp	 $LN15@GetMaxPoin
$LN14@GetMaxPoin:

; 5006 : 	}
; 5007 : 
; 5008 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  0ab12	83 7d 0c 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  0ab16	7c 09		 jl	 SHORT $LN11@GetMaxPoin
  0ab18	81 7d 0c bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  0ab1f	7e 1a		 jle	 SHORT $LN12@GetMaxPoin
$LN11@GetMaxPoin:

; 5009 : 	{
; 5010 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code : %d",iSkill);

  0ab21	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0ab24	50		 push	 eax
  0ab25	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0ab2a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0ab30	83 c4 08	 add	 esp, 8

; 5011 : 		return -1;

  0ab33	83 c8 ff	 or	 eax, -1
  0ab36	e9 cf 00 00 00	 jmp	 $LN15@GetMaxPoin
$LN12@GetMaxPoin:

; 5012 : 	}
; 5013 : 
; 5014 : 	int nReturn = -1;

  0ab3b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _nReturn$[ebp], -1

; 5015 : 
; 5016 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0ab42	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iTreeKind$236278[ebp], 0
  0ab49	eb 09		 jmp	 SHORT $LN10@GetMaxPoin
$LN9@GetMaxPoin:
  0ab4b	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236278[ebp]
  0ab4e	83 c0 01	 add	 eax, 1
  0ab51	89 45 f4	 mov	 DWORD PTR _iTreeKind$236278[ebp], eax
$LN10@GetMaxPoin:
  0ab54	83 7d f4 03	 cmp	 DWORD PTR _iTreeKind$236278[ebp], 3
  0ab58	0f 8d a9 00 00
	00		 jge	 $LN8@GetMaxPoin

; 5017 : 	{
; 5018 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0ab5e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iRank$236282[ebp], 0
  0ab65	eb 09		 jmp	 SHORT $LN7@GetMaxPoin
$LN6@GetMaxPoin:
  0ab67	8b 45 f0	 mov	 eax, DWORD PTR _iRank$236282[ebp]
  0ab6a	83 c0 01	 add	 eax, 1
  0ab6d	89 45 f0	 mov	 DWORD PTR _iRank$236282[ebp], eax
$LN7@GetMaxPoin:
  0ab70	83 7d f0 09	 cmp	 DWORD PTR _iRank$236282[ebp], 9
  0ab74	0f 8d 88 00 00
	00		 jge	 $LN5@GetMaxPoin

; 5019 : 		{
; 5020 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  0ab7a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iPos$236286[ebp], 0
  0ab81	eb 09		 jmp	 SHORT $LN4@GetMaxPoin
$LN3@GetMaxPoin:
  0ab83	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236286[ebp]
  0ab86	83 c0 01	 add	 eax, 1
  0ab89	89 45 ec	 mov	 DWORD PTR _iPos$236286[ebp], eax
$LN4@GetMaxPoin:
  0ab8c	83 7d ec 04	 cmp	 DWORD PTR _iPos$236286[ebp], 4
  0ab90	7d 6b		 jge	 SHORT $LN2@GetMaxPoin

; 5021 : 			{
; 5022 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  0ab92	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0ab95	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0ab9b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ab9e	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0aba2	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236278[ebp]
  0aba5	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0abab	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0abaf	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236282[ebp]
  0abb2	6b d2 50	 imul	 edx, 80			; 00000050H
  0abb5	03 ca		 add	 ecx, edx
  0abb7	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236286[ebp]
  0abba	6b c0 14	 imul	 eax, 20			; 00000014H
  0abbd	8b 4c 01 10	 mov	 ecx, DWORD PTR [ecx+eax+16]
  0abc1	3b 4d 0c	 cmp	 ecx, DWORD PTR _iSkill$[ebp]
  0abc4	75 35		 jne	 SHORT $LN1@GetMaxPoin

; 5023 : 				{
; 5024 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint;

  0abc6	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0abc9	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0abcf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0abd2	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0abd6	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236278[ebp]
  0abd9	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0abdf	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0abe3	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236282[ebp]
  0abe6	6b d2 50	 imul	 edx, 80			; 00000050H
  0abe9	03 ca		 add	 ecx, edx
  0abeb	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236286[ebp]
  0abee	6b c0 14	 imul	 eax, 20			; 00000014H
  0abf1	0f b6 4c 01 05	 movzx	 ecx, BYTE PTR [ecx+eax+5]
  0abf6	89 4d f8	 mov	 DWORD PTR _nReturn$[ebp], ecx

; 5025 : 					break;

  0abf9	eb 02		 jmp	 SHORT $LN2@GetMaxPoin
$LN1@GetMaxPoin:

; 5026 : 				}
; 5027 : 			}

  0abfb	eb 86		 jmp	 SHORT $LN3@GetMaxPoin
$LN2@GetMaxPoin:

; 5028 : 		}

  0abfd	e9 65 ff ff ff	 jmp	 $LN6@GetMaxPoin
$LN5@GetMaxPoin:

; 5029 : 	}

  0ac02	e9 44 ff ff ff	 jmp	 $LN9@GetMaxPoin
$LN8@GetMaxPoin:

; 5030 : 	return nReturn;

  0ac07	8b 45 f8	 mov	 eax, DWORD PTR _nReturn$[ebp]
$LN15@GetMaxPoin:

; 5031 : }

  0ac0a	5f		 pop	 edi
  0ac0b	5e		 pop	 esi
  0ac0c	5b		 pop	 ebx
  0ac0d	8b e5		 mov	 esp, ebp
  0ac0f	5d		 pop	 ebp
  0ac10	c2 08 00	 ret	 8
?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
_TEXT	ENDS
PUBLIC	??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	??_C@_0EG@GFHJPJHM@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
;	COMDAT ??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetMasterSkillValue - Invalid Type : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@GFHJPJHM@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EG@GFHJPJHM@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetMasterSkillValue - Invalid Point : %d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iType$ = 8						; size = 4
_iPoint$ = 12						; size = 4
?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
; _this$ = ecx

; 5034 : {

  0ac20	55		 push	 ebp
  0ac21	8b ec		 mov	 ebp, esp
  0ac23	83 ec 44	 sub	 esp, 68			; 00000044H
  0ac26	53		 push	 ebx
  0ac27	56		 push	 esi
  0ac28	57		 push	 edi
  0ac29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5035 : 	if( iPoint < 1 || iPoint > MAX_SKILLTREE_LEVEL )

  0ac2c	83 7d 0c 01	 cmp	 DWORD PTR _iPoint$[ebp], 1
  0ac30	7c 06		 jl	 SHORT $LN3@GetMasterS
  0ac32	83 7d 0c 14	 cmp	 DWORD PTR _iPoint$[ebp], 20 ; 00000014H
  0ac36	7e 16		 jle	 SHORT $LN4@GetMasterS
$LN3@GetMasterS:

; 5036 : 	{
; 5037 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetMasterSkillValue - Invalid Point : %d",iPoint);

  0ac38	8b 45 0c	 mov	 eax, DWORD PTR _iPoint$[ebp]
  0ac3b	50		 push	 eax
  0ac3c	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@GFHJPJHM@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0ac41	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0ac47	83 c4 08	 add	 esp, 8

; 5038 : 		return 0.0f;

  0ac4a	d9 ee		 fldz
  0ac4c	eb 38		 jmp	 SHORT $LN5@GetMasterS
$LN4@GetMasterS:

; 5039 : 	}
; 5040 : 
; 5041 : 	if( iType < 0 || iType > 38 )

  0ac4e	83 7d 08 00	 cmp	 DWORD PTR _iType$[ebp], 0
  0ac52	7c 06		 jl	 SHORT $LN1@GetMasterS
  0ac54	83 7d 08 26	 cmp	 DWORD PTR _iType$[ebp], 38 ; 00000026H
  0ac58	7e 16		 jle	 SHORT $LN2@GetMasterS
$LN1@GetMasterS:

; 5042 : 	{
; 5043 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetMasterSkillValue - Invalid Type : %d",iType);

  0ac5a	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  0ac5d	50		 push	 eax
  0ac5e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0ac63	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0ac69	83 c4 08	 add	 esp, 8

; 5044 : 		return 0.0f;

  0ac6c	d9 ee		 fldz
  0ac6e	eb 16		 jmp	 SHORT $LN5@GetMasterS
$LN2@GetMasterS:

; 5045 : 	}
; 5046 : 
; 5047 : 	return this->m_fValue[iType][iPoint];

  0ac70	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  0ac73	6b c0 54	 imul	 eax, 84			; 00000054H
  0ac76	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ac79	8d 94 01 30 3b
	00 00		 lea	 edx, DWORD PTR [ecx+eax+15152]
  0ac80	8b 45 0c	 mov	 eax, DWORD PTR _iPoint$[ebp]
  0ac83	d9 04 82	 fld	 DWORD PTR [edx+eax*4]
$LN5@GetMasterS:

; 5048 : }

  0ac86	5f		 pop	 edi
  0ac87	5e		 pop	 esi
  0ac88	5b		 pop	 ebx
  0ac89	8b e5		 mov	 esp, ebp
  0ac8b	5d		 pop	 ebp
  0ac8c	c2 08 00	 ret	 8
?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
_TEXT	ENDS
PUBLIC	??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillManaIncRate
;	COMDAT ??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetMasterSkillManaIncRate - Invalid Point'
	DB	' : %d', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iPoint$ = 8						; size = 4
?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillManaIncRate
; _this$ = ecx

; 5051 : {

  0ac90	55		 push	 ebp
  0ac91	8b ec		 mov	 ebp, esp
  0ac93	83 ec 44	 sub	 esp, 68			; 00000044H
  0ac96	53		 push	 ebx
  0ac97	56		 push	 esi
  0ac98	57		 push	 edi
  0ac99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5052 : 	if( iPoint < 1 || iPoint > MAX_SKILLTREE_LEVEL )

  0ac9c	83 7d 08 01	 cmp	 DWORD PTR _iPoint$[ebp], 1
  0aca0	7c 06		 jl	 SHORT $LN1@GetMasterS@2
  0aca2	83 7d 08 14	 cmp	 DWORD PTR _iPoint$[ebp], 20 ; 00000014H
  0aca6	7e 1a		 jle	 SHORT $LN2@GetMasterS@2
$LN1@GetMasterS@2:

; 5053 : 	{
; 5054 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetMasterSkillManaIncRate - Invalid Point : %d",iPoint);

  0aca8	8b 45 08	 mov	 eax, DWORD PTR _iPoint$[ebp]
  0acab	50		 push	 eax
  0acac	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0acb1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0acb7	83 c4 08	 add	 esp, 8

; 5055 : 		return -1.0f;

  0acba	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  0acc0	eb 0d		 jmp	 SHORT $LN3@GetMasterS@2
$LN2@GetMasterS@2:

; 5056 : 	}
; 5057 : 
; 5058 : 	return this->m_fValue[21][iPoint];

  0acc2	8b 45 08	 mov	 eax, DWORD PTR _iPoint$[ebp]
  0acc5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0acc8	d9 84 81 14 42
	00 00		 fld	 DWORD PTR [ecx+eax*4+16916]
$LN3@GetMasterS@2:

; 5059 : }

  0accf	5f		 pop	 edi
  0acd0	5e		 pop	 esi
  0acd1	5b		 pop	 ebx
  0acd2	8b e5		 mov	 esp, ebp
  0acd4	5d		 pop	 ebp
  0acd5	c2 04 00	 ret	 4
?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMasterSkillManaIncRate
; Function compile flags: /Odtp /ZI
_iCount$236325 = -28					; size = 4
_iLevel$ = -24						; size = 4
_iBrandOfSkill$ = -20					; size = 2
_nPrevSkill$ = -16					; size = 4
_nSkill$ = -12						; size = 4
_nStep$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
_iStep$ = 16						; size = 4
?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
; _this$ = ecx

; 5062 : {

  0ace0	55		 push	 ebp
  0ace1	8b ec		 mov	 ebp, esp
  0ace3	83 ec 5c	 sub	 esp, 92			; 0000005cH
  0ace6	53		 push	 ebx
  0ace7	56		 push	 esi
  0ace8	57		 push	 edi
  0ace9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5063 : 	int nStep = iStep;

  0acec	8b 45 10	 mov	 eax, DWORD PTR _iStep$[ebp]
  0acef	89 45 f8	 mov	 DWORD PTR _nStep$[ebp], eax

; 5064 : 	int nSkill = iSkill;

  0acf2	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0acf5	89 45 f4	 mov	 DWORD PTR _nSkill$[ebp], eax

; 5065 : 	int nPrevSkill = nSkill;

  0acf8	8b 45 f4	 mov	 eax, DWORD PTR _nSkill$[ebp]
  0acfb	89 45 f0	 mov	 DWORD PTR _nPrevSkill$[ebp], eax
$LN8@GetBrandOf:

; 5066 : 
; 5067 : 	while( nStep != 0 )

  0acfe	83 7d f8 00	 cmp	 DWORD PTR _nStep$[ebp], 0
  0ad02	74 2a		 je	 SHORT $LN7@GetBrandOf

; 5068 : 	{
; 5069 : 		if( nPrevSkill == 0 )

  0ad04	83 7d f0 00	 cmp	 DWORD PTR _nPrevSkill$[ebp], 0
  0ad08	75 02		 jne	 SHORT $LN6@GetBrandOf

; 5070 : 			break;

  0ad0a	eb 22		 jmp	 SHORT $LN7@GetBrandOf
$LN6@GetBrandOf:

; 5071 : 
; 5072 : 		nPrevSkill = MagicDamageC.GetSkillReqBrandOfSkill(nSkill);

  0ad0c	8b 45 f4	 mov	 eax, DWORD PTR _nSkill$[ebp]
  0ad0f	50		 push	 eax
  0ad10	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0ad15	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  0ad1a	89 45 f0	 mov	 DWORD PTR _nPrevSkill$[ebp], eax

; 5073 : 		nSkill = nPrevSkill;

  0ad1d	8b 45 f0	 mov	 eax, DWORD PTR _nPrevSkill$[ebp]
  0ad20	89 45 f4	 mov	 DWORD PTR _nSkill$[ebp], eax

; 5074 : 		nStep--;

  0ad23	8b 45 f8	 mov	 eax, DWORD PTR _nStep$[ebp]
  0ad26	83 e8 01	 sub	 eax, 1
  0ad29	89 45 f8	 mov	 DWORD PTR _nStep$[ebp], eax

; 5075 : 	}

  0ad2c	eb d0		 jmp	 SHORT $LN8@GetBrandOf
$LN7@GetBrandOf:

; 5076 : 
; 5077 : 	WORD iBrandOfSkill = nSkill;

  0ad2e	66 8b 45 f4	 mov	 ax, WORD PTR _nSkill$[ebp]
  0ad32	66 89 45 ec	 mov	 WORD PTR _iBrandOfSkill$[ebp], ax

; 5078 : 	int iLevel;
; 5079 : 
; 5080 : 	if( this->CheckRequireStatus(iBrandOfSkill) )

  0ad36	0f b7 45 ec	 movzx	 eax, WORD PTR _iBrandOfSkill$[ebp]
  0ad3a	50		 push	 eax
  0ad3b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ad3e	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  0ad43	85 c0		 test	 eax, eax
  0ad45	0f 84 84 00 00
	00		 je	 $LN2@GetBrandOf

; 5081 : 	{
; 5082 : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  0ad4b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iCount$236325[ebp], 0
  0ad52	eb 09		 jmp	 SHORT $LN4@GetBrandOf
$LN3@GetBrandOf:
  0ad54	8b 45 e4	 mov	 eax, DWORD PTR _iCount$236325[ebp]
  0ad57	83 c0 01	 add	 eax, 1
  0ad5a	89 45 e4	 mov	 DWORD PTR _iCount$236325[ebp], eax
$LN4@GetBrandOf:
  0ad5d	81 7d e4 96 00
	00 00		 cmp	 DWORD PTR _iCount$236325[ebp], 150 ; 00000096H
  0ad64	7d 69		 jge	 SHORT $LN2@GetBrandOf

; 5083 : 		{
; 5084 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE && 
; 5085 : 				lpObj->Magic[iCount].m_Skill == iBrandOfSkill )

  0ad66	8b 4d e4	 mov	 ecx, DWORD PTR _iCount$236325[ebp]
  0ad69	6b c9 18	 imul	 ecx, 24			; 00000018H
  0ad6c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ad6f	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0ad75	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0ad7a	83 f8 01	 cmp	 eax, 1
  0ad7d	75 4e		 jne	 SHORT $LN1@GetBrandOf
  0ad7f	8b 45 e4	 mov	 eax, DWORD PTR _iCount$236325[ebp]
  0ad82	6b c0 18	 imul	 eax, 24			; 00000018H
  0ad85	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ad88	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0ad8e	0f b7 4d ec	 movzx	 ecx, WORD PTR _iBrandOfSkill$[ebp]
  0ad92	39 4c 02 08	 cmp	 DWORD PTR [edx+eax+8], ecx
  0ad96	75 35		 jne	 SHORT $LN1@GetBrandOf

; 5086 : 			{
; 5087 : 				iLevel = lpObj->Magic[iCount].m_Level;

  0ad98	8b 45 e4	 mov	 eax, DWORD PTR _iCount$236325[ebp]
  0ad9b	6b c0 18	 imul	 eax, 24			; 00000018H
  0ad9e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ada1	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0ada7	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0adac	89 45 e8	 mov	 DWORD PTR _iLevel$[ebp], eax

; 5088 : 				return this->GetMasterSkillValue(MagicDamageC.SkillGet(iBrandOfSkill),iLevel);

  0adaf	8b 45 e8	 mov	 eax, DWORD PTR _iLevel$[ebp]
  0adb2	50		 push	 eax
  0adb3	0f b7 4d ec	 movzx	 ecx, WORD PTR _iBrandOfSkill$[ebp]
  0adb7	51		 push	 ecx
  0adb8	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0adbd	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0adc2	50		 push	 eax
  0adc3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0adc6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0adcb	eb 04		 jmp	 SHORT $LN9@GetBrandOf
$LN1@GetBrandOf:

; 5089 : 			}
; 5090 : 		}

  0adcd	eb 85		 jmp	 SHORT $LN3@GetBrandOf
$LN2@GetBrandOf:

; 5091 : 	}
; 5092 : 
; 5093 : 	return 0.0f;

  0adcf	d9 ee		 fldz
$LN9@GetBrandOf:

; 5094 : }

  0add1	5f		 pop	 edi
  0add2	5e		 pop	 esi
  0add3	5b		 pop	 ebx
  0add4	8b e5		 mov	 esp, ebp
  0add6	5d		 pop	 ebp
  0add7	c2 0c 00	 ret	 12			; 0000000cH
?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
_TEXT	ENDS
EXTRN	?GetSkillRank@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillRank
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$236361 = -44						; size = 4
_iPos2$236357 = -40					; size = 4
_nPoint$ = -36						; size = 4
_iPos$236351 = -32					; size = 4
_iRank$236347 = -28					; size = 4
_iTreeKind$236343 = -24					; size = 4
_nReturn$ = -20						; size = 4
_iClass$ = -16						; size = 4
_nRank$ = -12						; size = 4
_nTreeKind$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
_iLevel$ = 16						; size = 4
?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
; _this$ = ecx

; 5097 : {

  0ade0	55		 push	 ebp
  0ade1	8b ec		 mov	 ebp, esp
  0ade3	83 ec 6c	 sub	 esp, 108		; 0000006cH
  0ade6	53		 push	 ebx
  0ade7	56		 push	 esi
  0ade8	57		 push	 edi
  0ade9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5098 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  0adec	83 7d 0c 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  0adf0	7c 09		 jl	 SHORT $LN22@CheckPrevi
  0adf2	81 7d 0c bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  0adf9	7e 1a		 jle	 SHORT $LN23@CheckPrevi
$LN22@CheckPrevi:

; 5099 : 	{
; 5100 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code : %d",iSkill);

  0adfb	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0adfe	50		 push	 eax
  0adff	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0ae04	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0ae0a	83 c4 08	 add	 esp, 8

; 5101 : 		return -1;

  0ae0d	83 c8 ff	 or	 eax, -1
  0ae10	e9 d2 01 00 00	 jmp	 $LN24@CheckPrevi
$LN23@CheckPrevi:

; 5102 : 	}
; 5103 : 
; 5104 : 	int nTreeKind = -1;

  0ae15	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _nTreeKind$[ebp], -1

; 5105 : 	int nRank = MagicDamageC.GetSkillRank(iSkill)-1;

  0ae1c	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0ae1f	50		 push	 eax
  0ae20	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0ae25	e8 00 00 00 00	 call	 ?GetSkillRank@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillRank
  0ae2a	83 e8 01	 sub	 eax, 1
  0ae2d	89 45 f4	 mov	 DWORD PTR _nRank$[ebp], eax

; 5106 : 
; 5107 : 	if( nRank < 1 )

  0ae30	83 7d f4 01	 cmp	 DWORD PTR _nRank$[ebp], 1
  0ae34	7d 0a		 jge	 SHORT $LN21@CheckPrevi

; 5108 : 		return 1;

  0ae36	b8 01 00 00 00	 mov	 eax, 1
  0ae3b	e9 a7 01 00 00	 jmp	 $LN24@CheckPrevi
$LN21@CheckPrevi:

; 5109 : 
; 5110 : 	int iClass = lpObj->Class;

  0ae40	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ae43	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0ae4a	89 4d f0	 mov	 DWORD PTR _iClass$[ebp], ecx

; 5111 : 	int nReturn = -1;

  0ae4d	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _nReturn$[ebp], -1

; 5112 : 
; 5113 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0ae54	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iTreeKind$236343[ebp], 0
  0ae5b	eb 09		 jmp	 SHORT $LN20@CheckPrevi
$LN19@CheckPrevi:
  0ae5d	8b 45 e8	 mov	 eax, DWORD PTR _iTreeKind$236343[ebp]
  0ae60	83 c0 01	 add	 eax, 1
  0ae63	89 45 e8	 mov	 DWORD PTR _iTreeKind$236343[ebp], eax
$LN20@CheckPrevi:
  0ae66	83 7d e8 03	 cmp	 DWORD PTR _iTreeKind$236343[ebp], 3
  0ae6a	7d 75		 jge	 SHORT $LN18@CheckPrevi

; 5114 : 	{
; 5115 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0ae6c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iRank$236347[ebp], 0
  0ae73	eb 09		 jmp	 SHORT $LN17@CheckPrevi
$LN16@CheckPrevi:
  0ae75	8b 45 e4	 mov	 eax, DWORD PTR _iRank$236347[ebp]
  0ae78	83 c0 01	 add	 eax, 1
  0ae7b	89 45 e4	 mov	 DWORD PTR _iRank$236347[ebp], eax
$LN17@CheckPrevi:
  0ae7e	83 7d e4 09	 cmp	 DWORD PTR _iRank$236347[ebp], 9
  0ae82	7d 58		 jge	 SHORT $LN15@CheckPrevi

; 5116 : 		{
; 5117 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  0ae84	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iPos$236351[ebp], 0
  0ae8b	eb 09		 jmp	 SHORT $LN14@CheckPrevi
$LN13@CheckPrevi:
  0ae8d	8b 45 e0	 mov	 eax, DWORD PTR _iPos$236351[ebp]
  0ae90	83 c0 01	 add	 eax, 1
  0ae93	89 45 e0	 mov	 DWORD PTR _iPos$236351[ebp], eax
$LN14@CheckPrevi:
  0ae96	83 7d e0 04	 cmp	 DWORD PTR _iPos$236351[ebp], 4
  0ae9a	7d 3e		 jge	 SHORT $LN12@CheckPrevi

; 5118 : 			{
; 5119 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  0ae9c	8b 45 f0	 mov	 eax, DWORD PTR _iClass$[ebp]
  0ae9f	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0aea5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aea8	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0aeac	8b 45 e8	 mov	 eax, DWORD PTR _iTreeKind$236343[ebp]
  0aeaf	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0aeb5	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0aeb9	8b 55 e4	 mov	 edx, DWORD PTR _iRank$236347[ebp]
  0aebc	6b d2 50	 imul	 edx, 80			; 00000050H
  0aebf	03 ca		 add	 ecx, edx
  0aec1	8b 45 e0	 mov	 eax, DWORD PTR _iPos$236351[ebp]
  0aec4	6b c0 14	 imul	 eax, 20			; 00000014H
  0aec7	8b 4c 01 10	 mov	 ecx, DWORD PTR [ecx+eax+16]
  0aecb	3b 4d 0c	 cmp	 ecx, DWORD PTR _iSkill$[ebp]
  0aece	75 08		 jne	 SHORT $LN11@CheckPrevi

; 5120 : 				{
; 5121 : 					nTreeKind = iTreeKind;

  0aed0	8b 45 e8	 mov	 eax, DWORD PTR _iTreeKind$236343[ebp]
  0aed3	89 45 f8	 mov	 DWORD PTR _nTreeKind$[ebp], eax

; 5122 : 					break;

  0aed6	eb 02		 jmp	 SHORT $LN12@CheckPrevi
$LN11@CheckPrevi:

; 5123 : 				}
; 5124 : 			}

  0aed8	eb b3		 jmp	 SHORT $LN13@CheckPrevi
$LN12@CheckPrevi:

; 5125 : 		}

  0aeda	eb 99		 jmp	 SHORT $LN16@CheckPrevi
$LN15@CheckPrevi:

; 5126 : 	}

  0aedc	e9 7c ff ff ff	 jmp	 $LN19@CheckPrevi
$LN18@CheckPrevi:

; 5127 : 
; 5128 : 	int nPoint = 0;

  0aee1	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _nPoint$[ebp], 0

; 5129 : 	nRank -= 1;

  0aee8	8b 45 f4	 mov	 eax, DWORD PTR _nRank$[ebp]
  0aeeb	83 e8 01	 sub	 eax, 1
  0aeee	89 45 f4	 mov	 DWORD PTR _nRank$[ebp], eax

; 5130 : 
; 5131 : 	for(int iPos2 = 0; iPos2 < MAX_SKILLTREE_POS; iPos2++ )

  0aef1	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _iPos2$236357[ebp], 0
  0aef8	eb 09		 jmp	 SHORT $LN10@CheckPrevi
$LN9@CheckPrevi:
  0aefa	8b 45 d8	 mov	 eax, DWORD PTR _iPos2$236357[ebp]
  0aefd	83 c0 01	 add	 eax, 1
  0af00	89 45 d8	 mov	 DWORD PTR _iPos2$236357[ebp], eax
$LN10@CheckPrevi:
  0af03	83 7d d8 04	 cmp	 DWORD PTR _iPos2$236357[ebp], 4
  0af07	0f 8d c1 00 00
	00		 jge	 $LN8@CheckPrevi

; 5132 : 	{
; 5133 : 		for(int i = 0; i < MAX_MAGIC; i++)

  0af0d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$236361[ebp], 0
  0af14	eb 09		 jmp	 SHORT $LN7@CheckPrevi
$LN6@CheckPrevi:
  0af16	8b 45 d4	 mov	 eax, DWORD PTR _i$236361[ebp]
  0af19	83 c0 01	 add	 eax, 1
  0af1c	89 45 d4	 mov	 DWORD PTR _i$236361[ebp], eax
$LN7@CheckPrevi:
  0af1f	81 7d d4 96 00
	00 00		 cmp	 DWORD PTR _i$236361[ebp], 150 ; 00000096H
  0af26	0f 8d 9d 00 00
	00		 jge	 $LN5@CheckPrevi

; 5134 : 		{
; 5135 : 			if( lpObj->Magic[i].IsMagic() == TRUE && this->CheckRequireStatus(lpObj->Magic[i].m_Skill) == TRUE  )

  0af2c	8b 4d d4	 mov	 ecx, DWORD PTR _i$236361[ebp]
  0af2f	6b c9 18	 imul	 ecx, 24			; 00000018H
  0af32	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0af35	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0af3b	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0af40	83 f8 01	 cmp	 eax, 1
  0af43	75 7f		 jne	 SHORT $LN4@CheckPrevi
  0af45	8b 45 d4	 mov	 eax, DWORD PTR _i$236361[ebp]
  0af48	6b c0 18	 imul	 eax, 24			; 00000018H
  0af4b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0af4e	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0af54	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  0af58	50		 push	 eax
  0af59	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0af5c	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  0af61	83 f8 01	 cmp	 eax, 1
  0af64	75 5e		 jne	 SHORT $LN4@CheckPrevi

; 5136 : 			{
; 5137 : 				if( lpObj->Magic[i].m_Skill == this->m_SkillTreeData[iClass].m_SkillInfo[nTreeKind][nRank][iPos2].m_iSkillID )

  0af66	8b 45 d4	 mov	 eax, DWORD PTR _i$236361[ebp]
  0af69	6b c0 18	 imul	 eax, 24			; 00000018H
  0af6c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0af6f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0af75	8b 4d f0	 mov	 ecx, DWORD PTR _iClass$[ebp]
  0af78	69 c9 74 08 00
	00		 imul	 ecx, 2164		; 00000874H
  0af7e	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0af81	8d 4c 0e 04	 lea	 ecx, DWORD PTR [esi+ecx+4]
  0af85	8b 75 f8	 mov	 esi, DWORD PTR _nTreeKind$[ebp]
  0af88	69 f6 d0 02 00
	00		 imul	 esi, 720		; 000002d0H
  0af8e	8d 4c 31 04	 lea	 ecx, DWORD PTR [ecx+esi+4]
  0af92	8b 75 f4	 mov	 esi, DWORD PTR _nRank$[ebp]
  0af95	6b f6 50	 imul	 esi, 80			; 00000050H
  0af98	03 ce		 add	 ecx, esi
  0af9a	8b 75 d8	 mov	 esi, DWORD PTR _iPos2$236357[ebp]
  0af9d	6b f6 14	 imul	 esi, 20			; 00000014H
  0afa0	8b 54 02 08	 mov	 edx, DWORD PTR [edx+eax+8]
  0afa4	3b 54 31 10	 cmp	 edx, DWORD PTR [ecx+esi+16]
  0afa8	75 1a		 jne	 SHORT $LN4@CheckPrevi

; 5138 : 				{
; 5139 : 					nPoint |= lpObj->Magic[i].m_Level;

  0afaa	8b 45 d4	 mov	 eax, DWORD PTR _i$236361[ebp]
  0afad	6b c0 18	 imul	 eax, 24			; 00000018H
  0afb0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0afb3	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0afb9	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0afbe	0b 45 dc	 or	 eax, DWORD PTR _nPoint$[ebp]
  0afc1	89 45 dc	 mov	 DWORD PTR _nPoint$[ebp], eax
$LN4@CheckPrevi:

; 5140 : 				}
; 5141 : 			}
; 5142 : 		}

  0afc4	e9 4d ff ff ff	 jmp	 $LN6@CheckPrevi
$LN5@CheckPrevi:

; 5143 : 	}

  0afc9	e9 2c ff ff ff	 jmp	 $LN9@CheckPrevi
$LN8@CheckPrevi:

; 5144 : 
; 5145 : 	if( nPoint >= 10 )

  0afce	83 7d dc 0a	 cmp	 DWORD PTR _nPoint$[ebp], 10 ; 0000000aH
  0afd2	7c 09		 jl	 SHORT $LN2@CheckPrevi

; 5146 : 		nReturn = TRUE;

  0afd4	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _nReturn$[ebp], 1

; 5147 : 	else

  0afdb	eb 07		 jmp	 SHORT $LN1@CheckPrevi
$LN2@CheckPrevi:

; 5148 : 		nReturn = FALSE;

  0afdd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nReturn$[ebp], 0
$LN1@CheckPrevi:

; 5149 : 
; 5150 : 	return nReturn;

  0afe4	8b 45 ec	 mov	 eax, DWORD PTR _nReturn$[ebp]
$LN24@CheckPrevi:

; 5151 : }

  0afe7	5f		 pop	 edi
  0afe8	5e		 pop	 esi
  0afe9	5b		 pop	 ebx
  0afea	8b e5		 mov	 esp, ebp
  0afec	5d		 pop	 ebp
  0afed	c2 0c 00	 ret	 12			; 0000000cH
?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
; Function compile flags: /Odtp /ZI
_i$236374 = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::CheckSkillLevel
; _this$ = ecx

; 5154 : {

  0aff0	55		 push	 ebp
  0aff1	8b ec		 mov	 ebp, esp
  0aff3	83 ec 48	 sub	 esp, 72			; 00000048H
  0aff6	53		 push	 ebx
  0aff7	56		 push	 esi
  0aff8	57		 push	 edi
  0aff9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5155 : 	for(int i = 0; i < MAX_MAGIC; i++)

  0affc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$236374[ebp], 0
  0b003	eb 09		 jmp	 SHORT $LN4@CheckSkill@2
$LN3@CheckSkill@2:
  0b005	8b 45 f8	 mov	 eax, DWORD PTR _i$236374[ebp]
  0b008	83 c0 01	 add	 eax, 1
  0b00b	89 45 f8	 mov	 DWORD PTR _i$236374[ebp], eax
$LN4@CheckSkill@2:
  0b00e	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _i$236374[ebp], 150 ; 00000096H
  0b015	7d 49		 jge	 SHORT $LN2@CheckSkill@2

; 5156 : 	{
; 5157 : 		if( lpObj->Magic[i].IsMagic() == TRUE &&
; 5158 : 			lpObj->Magic[i].m_Skill == iSkill )

  0b017	8b 4d f8	 mov	 ecx, DWORD PTR _i$236374[ebp]
  0b01a	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b01d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b020	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b026	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b02b	83 f8 01	 cmp	 eax, 1
  0b02e	75 2e		 jne	 SHORT $LN1@CheckSkill@2
  0b030	8b 45 f8	 mov	 eax, DWORD PTR _i$236374[ebp]
  0b033	6b c0 18	 imul	 eax, 24			; 00000018H
  0b036	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b039	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b03f	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  0b043	3b 45 0c	 cmp	 eax, DWORD PTR _iSkill$[ebp]
  0b046	75 16		 jne	 SHORT $LN1@CheckSkill@2

; 5159 : 		{
; 5160 : 			return lpObj->Magic[i].m_Level;

  0b048	8b 45 f8	 mov	 eax, DWORD PTR _i$236374[ebp]
  0b04b	6b c0 18	 imul	 eax, 24			; 00000018H
  0b04e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b051	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b057	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b05c	eb 04		 jmp	 SHORT $LN5@CheckSkill@2
$LN1@CheckSkill@2:

; 5161 : 		}
; 5162 : 	}

  0b05e	eb a5		 jmp	 SHORT $LN3@CheckSkill@2
$LN2@CheckSkill@2:

; 5163 : 
; 5164 : 
; 5165 : return 0;

  0b060	33 c0		 xor	 eax, eax
$LN5@CheckSkill@2:

; 5166 : }

  0b062	5f		 pop	 edi
  0b063	5e		 pop	 esi
  0b064	5b		 pop	 ebx
  0b065	8b e5		 mov	 esp, ebp
  0b067	5d		 pop	 ebp
  0b068	c2 08 00	 ret	 8
?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CheckSkillLevel
; Function compile flags: /Odtp /ZI
_iPos$236397 = -20					; size = 4
_iRank$236393 = -16					; size = 4
_iTreeKind$236389 = -12					; size = 4
_nReturn$ = -8						; size = 4
_this$ = -4						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
; _this$ = ecx

; 5169 : {

  0b070	55		 push	 ebp
  0b071	8b ec		 mov	 ebp, esp
  0b073	83 ec 54	 sub	 esp, 84			; 00000054H
  0b076	53		 push	 ebx
  0b077	56		 push	 esi
  0b078	57		 push	 edi
  0b079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5170 : 	if( iClass < CLASS_WIZARD || iClass > CLASS_MONK )

  0b07c	83 7d 08 00	 cmp	 DWORD PTR _iClass$[ebp], 0
  0b080	7c 06		 jl	 SHORT $LN13@GetMasterS@3
  0b082	83 7d 08 06	 cmp	 DWORD PTR _iClass$[ebp], 6
  0b086	7e 1a		 jle	 SHORT $LN14@GetMasterS@3
$LN13@GetMasterS@3:

; 5171 : 	{
; 5172 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Class Code  : %d",iClass);

  0b088	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0b08b	50		 push	 eax
  0b08c	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0b091	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0b097	83 c4 08	 add	 esp, 8

; 5173 : 		return -1;

  0b09a	83 c8 ff	 or	 eax, -1
  0b09d	e9 f9 00 00 00	 jmp	 $LN15@GetMasterS@3
$LN14@GetMasterS@3:

; 5174 : 	}
; 5175 : 
; 5176 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  0b0a2	83 7d 0c 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  0b0a6	7c 09		 jl	 SHORT $LN11@GetMasterS@3
  0b0a8	81 7d 0c bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  0b0af	7e 1a		 jle	 SHORT $LN12@GetMasterS@3
$LN11@GetMasterS@3:

; 5177 : 	{
; 5178 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code : %d",iSkill);

  0b0b1	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0b0b4	50		 push	 eax
  0b0b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0b0ba	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0b0c0	83 c4 08	 add	 esp, 8

; 5179 : 		return -1;

  0b0c3	83 c8 ff	 or	 eax, -1
  0b0c6	e9 d0 00 00 00	 jmp	 $LN15@GetMasterS@3
$LN12@GetMasterS@3:

; 5180 : 	}
; 5181 : 
; 5182 : 	int nReturn = -1;

  0b0cb	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _nReturn$[ebp], -1

; 5183 : 
; 5184 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0b0d2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iTreeKind$236389[ebp], 0
  0b0d9	eb 09		 jmp	 SHORT $LN10@GetMasterS@3
$LN9@GetMasterS@3:
  0b0db	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236389[ebp]
  0b0de	83 c0 01	 add	 eax, 1
  0b0e1	89 45 f4	 mov	 DWORD PTR _iTreeKind$236389[ebp], eax
$LN10@GetMasterS@3:
  0b0e4	83 7d f4 03	 cmp	 DWORD PTR _iTreeKind$236389[ebp], 3
  0b0e8	0f 8d aa 00 00
	00		 jge	 $LN8@GetMasterS@3

; 5185 : 	{
; 5186 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0b0ee	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iRank$236393[ebp], 0
  0b0f5	eb 09		 jmp	 SHORT $LN7@GetMasterS@3
$LN6@GetMasterS@3:
  0b0f7	8b 45 f0	 mov	 eax, DWORD PTR _iRank$236393[ebp]
  0b0fa	83 c0 01	 add	 eax, 1
  0b0fd	89 45 f0	 mov	 DWORD PTR _iRank$236393[ebp], eax
$LN7@GetMasterS@3:
  0b100	83 7d f0 09	 cmp	 DWORD PTR _iRank$236393[ebp], 9
  0b104	0f 8d 89 00 00
	00		 jge	 $LN5@GetMasterS@3

; 5187 : 		{
; 5188 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  0b10a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iPos$236397[ebp], 0
  0b111	eb 09		 jmp	 SHORT $LN4@GetMasterS@3
$LN3@GetMasterS@3:
  0b113	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236397[ebp]
  0b116	83 c0 01	 add	 eax, 1
  0b119	89 45 ec	 mov	 DWORD PTR _iPos$236397[ebp], eax
$LN4@GetMasterS@3:
  0b11c	83 7d ec 04	 cmp	 DWORD PTR _iPos$236397[ebp], 4
  0b120	7d 6c		 jge	 SHORT $LN2@GetMasterS@3

; 5189 : 			{
; 5190 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  0b122	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0b125	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0b12b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b12e	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0b132	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236389[ebp]
  0b135	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0b13b	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0b13f	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236393[ebp]
  0b142	6b d2 50	 imul	 edx, 80			; 00000050H
  0b145	03 ca		 add	 ecx, edx
  0b147	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236397[ebp]
  0b14a	6b c0 14	 imul	 eax, 20			; 00000014H
  0b14d	8b 4c 01 10	 mov	 ecx, DWORD PTR [ecx+eax+16]
  0b151	3b 4d 0c	 cmp	 ecx, DWORD PTR _iSkill$[ebp]
  0b154	75 36		 jne	 SHORT $LN1@GetMasterS@3

; 5191 : 				{
; 5192 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex;

  0b156	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0b159	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0b15f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b162	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0b166	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236389[ebp]
  0b169	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0b16f	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0b173	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236393[ebp]
  0b176	6b d2 50	 imul	 edx, 80			; 00000050H
  0b179	03 ca		 add	 ecx, edx
  0b17b	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236397[ebp]
  0b17e	6b c0 14	 imul	 eax, 20			; 00000014H
  0b181	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  0b184	89 4d f8	 mov	 DWORD PTR _nReturn$[ebp], ecx

; 5193 : 					return nReturn;

  0b187	8b 45 f8	 mov	 eax, DWORD PTR _nReturn$[ebp]
  0b18a	eb 0f		 jmp	 SHORT $LN15@GetMasterS@3
$LN1@GetMasterS@3:

; 5194 : 				}
; 5195 : 			}

  0b18c	eb 85		 jmp	 SHORT $LN3@GetMasterS@3
$LN2@GetMasterS@3:

; 5196 : 		}

  0b18e	e9 64 ff ff ff	 jmp	 $LN6@GetMasterS@3
$LN5@GetMasterS@3:

; 5197 : 	}

  0b193	e9 43 ff ff ff	 jmp	 $LN9@GetMasterS@3
$LN8@GetMasterS@3:

; 5198 : 
; 5199 : return nReturn;

  0b198	8b 45 f8	 mov	 eax, DWORD PTR _nReturn$[ebp]
$LN15@GetMasterS@3:

; 5200 : }

  0b19b	5f		 pop	 edi
  0b19c	5e		 pop	 esi
  0b19d	5b		 pop	 ebx
  0b19e	8b e5		 mov	 esp, ebp
  0b1a0	5d		 pop	 ebp
  0b1a1	c2 08 00	 ret	 8
?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
; Function compile flags: /Odtp /ZI
_iPos$236416 = -20					; size = 4
_iRank$236412 = -16					; size = 4
_iTreeKind$236408 = -12					; size = 4
_nReturn$ = -8						; size = 4
_this$ = -4						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetParentSkill1
; _this$ = ecx

; 5203 : {

  0b1b0	55		 push	 ebp
  0b1b1	8b ec		 mov	 ebp, esp
  0b1b3	83 ec 54	 sub	 esp, 84			; 00000054H
  0b1b6	53		 push	 ebx
  0b1b7	56		 push	 esi
  0b1b8	57		 push	 edi
  0b1b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5204 : 	int nReturn = 0;

  0b1bc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nReturn$[ebp], 0

; 5205 : 
; 5206 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0b1c3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iTreeKind$236408[ebp], 0
  0b1ca	eb 09		 jmp	 SHORT $LN10@GetParentS
$LN9@GetParentS:
  0b1cc	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236408[ebp]
  0b1cf	83 c0 01	 add	 eax, 1
  0b1d2	89 45 f4	 mov	 DWORD PTR _iTreeKind$236408[ebp], eax
$LN10@GetParentS:
  0b1d5	83 7d f4 03	 cmp	 DWORD PTR _iTreeKind$236408[ebp], 3
  0b1d9	0f 8d ab 00 00
	00		 jge	 $LN8@GetParentS

; 5207 : 	{
; 5208 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0b1df	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iRank$236412[ebp], 0
  0b1e6	eb 09		 jmp	 SHORT $LN7@GetParentS
$LN6@GetParentS:
  0b1e8	8b 45 f0	 mov	 eax, DWORD PTR _iRank$236412[ebp]
  0b1eb	83 c0 01	 add	 eax, 1
  0b1ee	89 45 f0	 mov	 DWORD PTR _iRank$236412[ebp], eax
$LN7@GetParentS:
  0b1f1	83 7d f0 09	 cmp	 DWORD PTR _iRank$236412[ebp], 9
  0b1f5	0f 8d 8a 00 00
	00		 jge	 $LN5@GetParentS

; 5209 : 		{
; 5210 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  0b1fb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iPos$236416[ebp], 0
  0b202	eb 09		 jmp	 SHORT $LN4@GetParentS
$LN3@GetParentS:
  0b204	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236416[ebp]
  0b207	83 c0 01	 add	 eax, 1
  0b20a	89 45 ec	 mov	 DWORD PTR _iPos$236416[ebp], eax
$LN4@GetParentS:
  0b20d	83 7d ec 04	 cmp	 DWORD PTR _iPos$236416[ebp], 4
  0b211	7d 6d		 jge	 SHORT $LN2@GetParentS

; 5211 : 			{
; 5212 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  0b213	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0b216	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0b21c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b21f	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0b223	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236408[ebp]
  0b226	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0b22c	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0b230	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236412[ebp]
  0b233	6b d2 50	 imul	 edx, 80			; 00000050H
  0b236	03 ca		 add	 ecx, edx
  0b238	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236416[ebp]
  0b23b	6b c0 14	 imul	 eax, 20			; 00000014H
  0b23e	8b 4c 01 10	 mov	 ecx, DWORD PTR [ecx+eax+16]
  0b242	3b 4d 0c	 cmp	 ecx, DWORD PTR _iSkill$[ebp]
  0b245	75 37		 jne	 SHORT $LN1@GetParentS

; 5213 : 				{
; 5214 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1;

  0b247	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0b24a	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0b250	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b253	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0b257	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236408[ebp]
  0b25a	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0b260	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0b264	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236412[ebp]
  0b267	6b d2 50	 imul	 edx, 80			; 00000050H
  0b26a	03 ca		 add	 ecx, edx
  0b26c	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236416[ebp]
  0b26f	6b c0 14	 imul	 eax, 20			; 00000014H
  0b272	8b 4c 01 08	 mov	 ecx, DWORD PTR [ecx+eax+8]
  0b276	89 4d f8	 mov	 DWORD PTR _nReturn$[ebp], ecx

; 5215 : 					return nReturn;

  0b279	8b 45 f8	 mov	 eax, DWORD PTR _nReturn$[ebp]
  0b27c	eb 0f		 jmp	 SHORT $LN11@GetParentS
$LN1@GetParentS:

; 5216 : 				}
; 5217 : 			}

  0b27e	eb 84		 jmp	 SHORT $LN3@GetParentS
$LN2@GetParentS:

; 5218 : 		}

  0b280	e9 63 ff ff ff	 jmp	 $LN6@GetParentS
$LN5@GetParentS:

; 5219 : 	}

  0b285	e9 42 ff ff ff	 jmp	 $LN9@GetParentS
$LN8@GetParentS:

; 5220 : 
; 5221 : 	return nReturn;

  0b28a	8b 45 f8	 mov	 eax, DWORD PTR _nReturn$[ebp]
$LN11@GetParentS:

; 5222 : }

  0b28d	5f		 pop	 edi
  0b28e	5e		 pop	 esi
  0b28f	5b		 pop	 ebx
  0b290	8b e5		 mov	 esp, ebp
  0b292	5d		 pop	 ebp
  0b293	c2 08 00	 ret	 8
?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetParentSkill1
; Function compile flags: /Odtp /ZI
_iPos$236435 = -20					; size = 4
_iRank$236431 = -16					; size = 4
_iTreeKind$236427 = -12					; size = 4
_nReturn$ = -8						; size = 4
_this$ = -4						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetParentSkill2
; _this$ = ecx

; 5225 : {

  0b2a0	55		 push	 ebp
  0b2a1	8b ec		 mov	 ebp, esp
  0b2a3	83 ec 54	 sub	 esp, 84			; 00000054H
  0b2a6	53		 push	 ebx
  0b2a7	56		 push	 esi
  0b2a8	57		 push	 edi
  0b2a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5226 : 	int nReturn = 0;

  0b2ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nReturn$[ebp], 0

; 5227 : 
; 5228 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0b2b3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iTreeKind$236427[ebp], 0
  0b2ba	eb 09		 jmp	 SHORT $LN10@GetParentS@2
$LN9@GetParentS@2:
  0b2bc	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236427[ebp]
  0b2bf	83 c0 01	 add	 eax, 1
  0b2c2	89 45 f4	 mov	 DWORD PTR _iTreeKind$236427[ebp], eax
$LN10@GetParentS@2:
  0b2c5	83 7d f4 03	 cmp	 DWORD PTR _iTreeKind$236427[ebp], 3
  0b2c9	0f 8d ab 00 00
	00		 jge	 $LN8@GetParentS@2

; 5229 : 	{
; 5230 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0b2cf	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iRank$236431[ebp], 0
  0b2d6	eb 09		 jmp	 SHORT $LN7@GetParentS@2
$LN6@GetParentS@2:
  0b2d8	8b 45 f0	 mov	 eax, DWORD PTR _iRank$236431[ebp]
  0b2db	83 c0 01	 add	 eax, 1
  0b2de	89 45 f0	 mov	 DWORD PTR _iRank$236431[ebp], eax
$LN7@GetParentS@2:
  0b2e1	83 7d f0 09	 cmp	 DWORD PTR _iRank$236431[ebp], 9
  0b2e5	0f 8d 8a 00 00
	00		 jge	 $LN5@GetParentS@2

; 5231 : 		{
; 5232 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  0b2eb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iPos$236435[ebp], 0
  0b2f2	eb 09		 jmp	 SHORT $LN4@GetParentS@2
$LN3@GetParentS@2:
  0b2f4	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236435[ebp]
  0b2f7	83 c0 01	 add	 eax, 1
  0b2fa	89 45 ec	 mov	 DWORD PTR _iPos$236435[ebp], eax
$LN4@GetParentS@2:
  0b2fd	83 7d ec 04	 cmp	 DWORD PTR _iPos$236435[ebp], 4
  0b301	7d 6d		 jge	 SHORT $LN2@GetParentS@2

; 5233 : 			{
; 5234 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  0b303	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0b306	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0b30c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b30f	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0b313	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236427[ebp]
  0b316	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0b31c	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0b320	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236431[ebp]
  0b323	6b d2 50	 imul	 edx, 80			; 00000050H
  0b326	03 ca		 add	 ecx, edx
  0b328	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236435[ebp]
  0b32b	6b c0 14	 imul	 eax, 20			; 00000014H
  0b32e	8b 4c 01 10	 mov	 ecx, DWORD PTR [ecx+eax+16]
  0b332	3b 4d 0c	 cmp	 ecx, DWORD PTR _iSkill$[ebp]
  0b335	75 37		 jne	 SHORT $LN1@GetParentS@2

; 5235 : 				{
; 5236 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2;

  0b337	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  0b33a	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  0b340	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b343	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0b347	8b 45 f4	 mov	 eax, DWORD PTR _iTreeKind$236427[ebp]
  0b34a	69 c0 d0 02 00
	00		 imul	 eax, 720		; 000002d0H
  0b350	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  0b354	8b 55 f0	 mov	 edx, DWORD PTR _iRank$236431[ebp]
  0b357	6b d2 50	 imul	 edx, 80			; 00000050H
  0b35a	03 ca		 add	 ecx, edx
  0b35c	8b 45 ec	 mov	 eax, DWORD PTR _iPos$236435[ebp]
  0b35f	6b c0 14	 imul	 eax, 20			; 00000014H
  0b362	8b 4c 01 0c	 mov	 ecx, DWORD PTR [ecx+eax+12]
  0b366	89 4d f8	 mov	 DWORD PTR _nReturn$[ebp], ecx

; 5237 : 					return nReturn;

  0b369	8b 45 f8	 mov	 eax, DWORD PTR _nReturn$[ebp]
  0b36c	eb 0f		 jmp	 SHORT $LN11@GetParentS@2
$LN1@GetParentS@2:

; 5238 : 				}
; 5239 : 			}

  0b36e	eb 84		 jmp	 SHORT $LN3@GetParentS@2
$LN2@GetParentS@2:

; 5240 : 		}

  0b370	e9 63 ff ff ff	 jmp	 $LN6@GetParentS@2
$LN5@GetParentS@2:

; 5241 : 	}

  0b375	e9 42 ff ff ff	 jmp	 $LN9@GetParentS@2
$LN8@GetParentS@2:

; 5242 : 
; 5243 : 	return nReturn;

  0b37a	8b 45 f8	 mov	 eax, DWORD PTR _nReturn$[ebp]
$LN11@GetParentS@2:

; 5244 : }

  0b37d	5f		 pop	 edi
  0b37e	5e		 pop	 esi
  0b37f	5b		 pop	 ebx
  0b380	8b e5		 mov	 esp, ebp
  0b382	5d		 pop	 ebp
  0b383	c2 08 00	 ret	 8
?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetParentSkill2
_TEXT	ENDS
PUBLIC	?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::SetItemMLPassiveSkill
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -76						; size = 4
_iCount$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iType$ = 12						; size = 4
?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::SetItemMLPassiveSkill
; _this$ = ecx

; 5247 : {

  0b390	55		 push	 ebp
  0b391	8b ec		 mov	 ebp, esp
  0b393	83 ec 4c	 sub	 esp, 76			; 0000004cH
  0b396	53		 push	 ebx
  0b397	56		 push	 esi
  0b398	57		 push	 edi
  0b399	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5248 : 	int iCount = 0;

  0b39c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0

; 5249 : 
; 5250 : 	switch(iType)

  0b3a3	8b 45 0c	 mov	 eax, DWORD PTR _iType$[ebp]
  0b3a6	89 45 b4	 mov	 DWORD PTR tv64[ebp], eax
  0b3a9	83 7d b4 0c	 cmp	 DWORD PTR tv64[ebp], 12	; 0000000cH
  0b3ad	0f 87 98 12 00
	00		 ja	 $LN132@SetItemMLP
  0b3b3	8b 4d b4	 mov	 ecx, DWORD PTR tv64[ebp]
  0b3b6	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN136@SetItemMLP[ecx*4]
$LN131@SetItemMLP:

; 5251 : 	{
; 5252 : 	case 0:
; 5253 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b3bd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b3c4	eb 09		 jmp	 SHORT $LN130@SetItemMLP
$LN129@SetItemMLP:
  0b3c6	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b3c9	83 c0 01	 add	 eax, 1
  0b3cc	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN130@SetItemMLP:
  0b3cf	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b3d6	7d 7e		 jge	 SHORT $LN128@SetItemMLP

; 5254 : 		{
; 5255 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5256 : 				lpObj->Magic[iCount].m_Skill == 348 )

  0b3d8	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b3db	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b3de	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b3e1	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b3e7	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b3ec	83 f8 01	 cmp	 eax, 1
  0b3ef	75 60		 jne	 SHORT $LN127@SetItemMLP
  0b3f1	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b3f4	6b c0 18	 imul	 eax, 24			; 00000018H
  0b3f7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b3fa	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b400	81 7c 02 08 5c
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 348 ; 0000015cH
  0b408	75 47		 jne	 SHORT $LN127@SetItemMLP

; 5257 : 			{
; 5258 : 				lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b40a	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b40d	6b c0 18	 imul	 eax, 24			; 00000018H
  0b410	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b413	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b419	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b41e	50		 push	 eax
  0b41f	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b422	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b425	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b428	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b42e	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b432	51		 push	 ecx
  0b433	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b438	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b43d	50		 push	 eax
  0b43e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b441	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b446	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b449	d9 9a 70 26 00
	00		 fstp	 DWORD PTR [edx+9840]

; 5259 : 				break;

  0b44f	eb 05		 jmp	 SHORT $LN128@SetItemMLP
$LN127@SetItemMLP:

; 5260 : 			}
; 5261 : 		}

  0b451	e9 70 ff ff ff	 jmp	 $LN129@SetItemMLP
$LN128@SetItemMLP:

; 5262 : 
; 5263 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b456	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b45d	eb 09		 jmp	 SHORT $LN126@SetItemMLP
$LN125@SetItemMLP:
  0b45f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b462	83 c0 01	 add	 eax, 1
  0b465	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN126@SetItemMLP:
  0b468	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b46f	7d 7e		 jge	 SHORT $LN124@SetItemMLP

; 5264 : 		{
; 5265 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5266 : 				lpObj->Magic[iCount].m_Skill == 352 )

  0b471	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b474	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b477	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b47a	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b480	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b485	83 f8 01	 cmp	 eax, 1
  0b488	75 60		 jne	 SHORT $LN123@SetItemMLP
  0b48a	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b48d	6b c0 18	 imul	 eax, 24			; 00000018H
  0b490	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b493	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b499	81 7c 02 08 60
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 352 ; 00000160H
  0b4a1	75 47		 jne	 SHORT $LN123@SetItemMLP

; 5267 : 			{
; 5268 : 				lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b4a3	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b4a6	6b c0 18	 imul	 eax, 24			; 00000018H
  0b4a9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b4ac	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b4b2	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b4b7	50		 push	 eax
  0b4b8	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b4bb	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b4be	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b4c1	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b4c7	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b4cb	51		 push	 ecx
  0b4cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b4d1	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b4d6	50		 push	 eax
  0b4d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b4da	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b4df	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b4e2	d9 9a 80 26 00
	00		 fstp	 DWORD PTR [edx+9856]

; 5269 : 				break;

  0b4e8	eb 05		 jmp	 SHORT $LN124@SetItemMLP
$LN123@SetItemMLP:

; 5270 : 			}
; 5271 : 		}

  0b4ea	e9 70 ff ff ff	 jmp	 $LN125@SetItemMLP
$LN124@SetItemMLP:

; 5272 : 		break;

  0b4ef	e9 57 11 00 00	 jmp	 $LN132@SetItemMLP
$LN122@SetItemMLP:

; 5273 : 	case 1:
; 5274 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b4f4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b4fb	eb 09		 jmp	 SHORT $LN121@SetItemMLP
$LN120@SetItemMLP:
  0b4fd	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b500	83 c0 01	 add	 eax, 1
  0b503	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN121@SetItemMLP:
  0b506	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b50d	7d 7e		 jge	 SHORT $LN119@SetItemMLP

; 5275 : 		{
; 5276 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5277 : 				lpObj->Magic[iCount].m_Skill == 349 )

  0b50f	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b512	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b515	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b518	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b51e	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b523	83 f8 01	 cmp	 eax, 1
  0b526	75 60		 jne	 SHORT $LN118@SetItemMLP
  0b528	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b52b	6b c0 18	 imul	 eax, 24			; 00000018H
  0b52e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b531	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b537	81 7c 02 08 5d
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 349 ; 0000015dH
  0b53f	75 47		 jne	 SHORT $LN118@SetItemMLP

; 5278 : 			{
; 5279 : 				lpObj->m_MPSkillOpt.MpsOneHandSwordStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b541	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b544	6b c0 18	 imul	 eax, 24			; 00000018H
  0b547	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b54a	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b550	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b555	50		 push	 eax
  0b556	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b559	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b55c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b55f	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b565	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b569	51		 push	 ecx
  0b56a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b56f	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b574	50		 push	 eax
  0b575	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b578	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b57d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b580	d9 9a 74 26 00
	00		 fstp	 DWORD PTR [edx+9844]

; 5280 : 				break;

  0b586	eb 05		 jmp	 SHORT $LN119@SetItemMLP
$LN118@SetItemMLP:

; 5281 : 			}
; 5282 : 		}

  0b588	e9 70 ff ff ff	 jmp	 $LN120@SetItemMLP
$LN119@SetItemMLP:

; 5283 : 
; 5284 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b58d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b594	eb 09		 jmp	 SHORT $LN117@SetItemMLP
$LN116@SetItemMLP:
  0b596	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b599	83 c0 01	 add	 eax, 1
  0b59c	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN117@SetItemMLP:
  0b59f	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b5a6	7d 7e		 jge	 SHORT $LN115@SetItemMLP

; 5285 : 		{
; 5286 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5287 : 				lpObj->Magic[iCount].m_Skill == 353 )

  0b5a8	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b5ab	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b5ae	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b5b1	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b5b7	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b5bc	83 f8 01	 cmp	 eax, 1
  0b5bf	75 60		 jne	 SHORT $LN114@SetItemMLP
  0b5c1	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b5c4	6b c0 18	 imul	 eax, 24			; 00000018H
  0b5c7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b5ca	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b5d0	81 7c 02 08 61
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 353 ; 00000161H
  0b5d8	75 47		 jne	 SHORT $LN114@SetItemMLP

; 5288 : 			{
; 5289 : 				lpObj->m_MPSkillOpt.MpsOneHandSwordMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b5da	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b5dd	6b c0 18	 imul	 eax, 24			; 00000018H
  0b5e0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b5e3	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b5e9	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b5ee	50		 push	 eax
  0b5ef	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b5f2	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b5f5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b5f8	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b5fe	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b602	51		 push	 ecx
  0b603	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b608	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b60d	50		 push	 eax
  0b60e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b611	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b616	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b619	d9 9a 84 26 00
	00		 fstp	 DWORD PTR [edx+9860]

; 5290 : 				break;

  0b61f	eb 05		 jmp	 SHORT $LN115@SetItemMLP
$LN114@SetItemMLP:

; 5291 : 			}
; 5292 : 		}

  0b621	e9 70 ff ff ff	 jmp	 $LN116@SetItemMLP
$LN115@SetItemMLP:

; 5293 : 		break;

  0b626	e9 20 10 00 00	 jmp	 $LN132@SetItemMLP
$LN113@SetItemMLP:

; 5294 : 	case 2:
; 5295 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b62b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b632	eb 09		 jmp	 SHORT $LN112@SetItemMLP
$LN111@SetItemMLP:
  0b634	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b637	83 c0 01	 add	 eax, 1
  0b63a	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN112@SetItemMLP:
  0b63d	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b644	7d 7e		 jge	 SHORT $LN110@SetItemMLP

; 5296 : 		{
; 5297 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5298 : 				lpObj->Magic[iCount].m_Skill == 350 )

  0b646	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b649	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b64c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b64f	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b655	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b65a	83 f8 01	 cmp	 eax, 1
  0b65d	75 60		 jne	 SHORT $LN109@SetItemMLP
  0b65f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b662	6b c0 18	 imul	 eax, 24			; 00000018H
  0b665	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b668	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b66e	81 7c 02 08 5e
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 350 ; 0000015eH
  0b676	75 47		 jne	 SHORT $LN109@SetItemMLP

; 5299 : 			{
; 5300 : 				lpObj->m_MPSkillOpt.MpsMaceStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b678	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b67b	6b c0 18	 imul	 eax, 24			; 00000018H
  0b67e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b681	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b687	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b68c	50		 push	 eax
  0b68d	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b690	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b693	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b696	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b69c	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b6a0	51		 push	 ecx
  0b6a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b6a6	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b6ab	50		 push	 eax
  0b6ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b6af	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b6b4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b6b7	d9 9a 78 26 00
	00		 fstp	 DWORD PTR [edx+9848]

; 5301 : 				break;

  0b6bd	eb 05		 jmp	 SHORT $LN110@SetItemMLP
$LN109@SetItemMLP:

; 5302 : 			}
; 5303 : 		}

  0b6bf	e9 70 ff ff ff	 jmp	 $LN111@SetItemMLP
$LN110@SetItemMLP:

; 5304 : 
; 5305 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b6c4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b6cb	eb 09		 jmp	 SHORT $LN108@SetItemMLP
$LN107@SetItemMLP:
  0b6cd	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b6d0	83 c0 01	 add	 eax, 1
  0b6d3	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN108@SetItemMLP:
  0b6d6	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b6dd	7d 7e		 jge	 SHORT $LN106@SetItemMLP

; 5306 : 		{
; 5307 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5308 : 				lpObj->Magic[iCount].m_Skill == 354 )

  0b6df	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b6e2	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b6e5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b6e8	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b6ee	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b6f3	83 f8 01	 cmp	 eax, 1
  0b6f6	75 60		 jne	 SHORT $LN105@SetItemMLP
  0b6f8	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b6fb	6b c0 18	 imul	 eax, 24			; 00000018H
  0b6fe	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b701	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b707	81 7c 02 08 62
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 354 ; 00000162H
  0b70f	75 47		 jne	 SHORT $LN105@SetItemMLP

; 5309 : 			{
; 5310 : 				lpObj->m_MPSkillOpt.MpsMaceMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b711	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b714	6b c0 18	 imul	 eax, 24			; 00000018H
  0b717	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b71a	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b720	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b725	50		 push	 eax
  0b726	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b729	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b72c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b72f	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b735	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b739	51		 push	 ecx
  0b73a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b73f	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b744	50		 push	 eax
  0b745	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b748	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b74d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b750	d9 9a 8c 26 00
	00		 fstp	 DWORD PTR [edx+9868]

; 5311 : 				break;

  0b756	eb 05		 jmp	 SHORT $LN106@SetItemMLP
$LN105@SetItemMLP:

; 5312 : 			}
; 5313 : 		}

  0b758	e9 70 ff ff ff	 jmp	 $LN107@SetItemMLP
$LN106@SetItemMLP:

; 5314 : 		break;

  0b75d	e9 e9 0e 00 00	 jmp	 $LN132@SetItemMLP
$LN104@SetItemMLP:

; 5315 : 	case 3:
; 5316 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b762	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b769	eb 09		 jmp	 SHORT $LN103@SetItemMLP
$LN102@SetItemMLP:
  0b76b	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b76e	83 c0 01	 add	 eax, 1
  0b771	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN103@SetItemMLP:
  0b774	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b77b	7d 7e		 jge	 SHORT $LN101@SetItemMLP

; 5317 : 		{
; 5318 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5319 : 				lpObj->Magic[iCount].m_Skill == 351 )

  0b77d	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b780	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b783	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b786	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b78c	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b791	83 f8 01	 cmp	 eax, 1
  0b794	75 60		 jne	 SHORT $LN100@SetItemMLP
  0b796	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b799	6b c0 18	 imul	 eax, 24			; 00000018H
  0b79c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b79f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b7a5	81 7c 02 08 5f
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 351 ; 0000015fH
  0b7ad	75 47		 jne	 SHORT $LN100@SetItemMLP

; 5320 : 			{
; 5321 : 				lpObj->m_MPSkillOpt.MpsSpearStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b7af	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b7b2	6b c0 18	 imul	 eax, 24			; 00000018H
  0b7b5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b7b8	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b7be	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b7c3	50		 push	 eax
  0b7c4	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b7c7	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b7ca	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b7cd	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b7d3	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b7d7	51		 push	 ecx
  0b7d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b7dd	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b7e2	50		 push	 eax
  0b7e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b7e6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b7eb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b7ee	d9 9a 7c 26 00
	00		 fstp	 DWORD PTR [edx+9852]

; 5322 : 				break;

  0b7f4	eb 05		 jmp	 SHORT $LN101@SetItemMLP
$LN100@SetItemMLP:

; 5323 : 			}
; 5324 : 		}

  0b7f6	e9 70 ff ff ff	 jmp	 $LN102@SetItemMLP
$LN101@SetItemMLP:

; 5325 : 
; 5326 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b7fb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b802	eb 09		 jmp	 SHORT $LN99@SetItemMLP
$LN98@SetItemMLP:
  0b804	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b807	83 c0 01	 add	 eax, 1
  0b80a	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN99@SetItemMLP:
  0b80d	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b814	7d 7e		 jge	 SHORT $LN97@SetItemMLP

; 5327 : 		{
; 5328 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5329 : 				lpObj->Magic[iCount].m_Skill == 355 )

  0b816	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b819	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b81c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b81f	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b825	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b82a	83 f8 01	 cmp	 eax, 1
  0b82d	75 60		 jne	 SHORT $LN96@SetItemMLP
  0b82f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b832	6b c0 18	 imul	 eax, 24			; 00000018H
  0b835	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b838	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b83e	81 7c 02 08 63
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 355 ; 00000163H
  0b846	75 47		 jne	 SHORT $LN96@SetItemMLP

; 5330 : 			{
; 5331 : 				lpObj->m_MPSkillOpt.MpsSpearMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b848	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b84b	6b c0 18	 imul	 eax, 24			; 00000018H
  0b84e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b851	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b857	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b85c	50		 push	 eax
  0b85d	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b860	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b863	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b866	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b86c	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b870	51		 push	 ecx
  0b871	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b876	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b87b	50		 push	 eax
  0b87c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b87f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b884	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b887	d9 9a 88 26 00
	00		 fstp	 DWORD PTR [edx+9864]

; 5332 : 				break;

  0b88d	eb 05		 jmp	 SHORT $LN97@SetItemMLP
$LN96@SetItemMLP:

; 5333 : 			}
; 5334 : 		}

  0b88f	e9 70 ff ff ff	 jmp	 $LN98@SetItemMLP
$LN97@SetItemMLP:

; 5335 : 		break;

  0b894	e9 b2 0d 00 00	 jmp	 $LN132@SetItemMLP
$LN95@SetItemMLP:

; 5336 : 	case 4:
; 5337 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b899	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b8a0	eb 09		 jmp	 SHORT $LN94@SetItemMLP
$LN93@SetItemMLP:
  0b8a2	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b8a5	83 c0 01	 add	 eax, 1
  0b8a8	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN94@SetItemMLP:
  0b8ab	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b8b2	7d 7e		 jge	 SHORT $LN92@SetItemMLP

; 5338 : 		{
; 5339 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5340 : 				lpObj->Magic[iCount].m_Skill == 397 )

  0b8b4	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b8b7	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b8ba	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b8bd	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b8c3	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b8c8	83 f8 01	 cmp	 eax, 1
  0b8cb	75 60		 jne	 SHORT $LN91@SetItemMLP
  0b8cd	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b8d0	6b c0 18	 imul	 eax, 24			; 00000018H
  0b8d3	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b8d6	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b8dc	81 7c 02 08 8d
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 397 ; 0000018dH
  0b8e4	75 47		 jne	 SHORT $LN91@SetItemMLP

; 5341 : 			{
; 5342 : 				lpObj->m_MPSkillOpt.MpsOneHandStaffStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b8e6	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b8e9	6b c0 18	 imul	 eax, 24			; 00000018H
  0b8ec	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b8ef	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b8f5	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b8fa	50		 push	 eax
  0b8fb	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b8fe	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b901	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b904	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b90a	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b90e	51		 push	 ecx
  0b90f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b914	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b919	50		 push	 eax
  0b91a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b91d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b922	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b925	d9 9a 98 26 00
	00		 fstp	 DWORD PTR [edx+9880]

; 5343 : 				break;

  0b92b	eb 05		 jmp	 SHORT $LN92@SetItemMLP
$LN91@SetItemMLP:

; 5344 : 			}
; 5345 : 		}

  0b92d	e9 70 ff ff ff	 jmp	 $LN93@SetItemMLP
$LN92@SetItemMLP:

; 5346 : 
; 5347 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b932	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b939	eb 09		 jmp	 SHORT $LN90@SetItemMLP
$LN89@SetItemMLP:
  0b93b	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b93e	83 c0 01	 add	 eax, 1
  0b941	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN90@SetItemMLP:
  0b944	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b94b	7d 7e		 jge	 SHORT $LN88@SetItemMLP

; 5348 : 		{
; 5349 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5350 : 				lpObj->Magic[iCount].m_Skill == 400 )

  0b94d	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b950	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b953	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b956	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b95c	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b961	83 f8 01	 cmp	 eax, 1
  0b964	75 60		 jne	 SHORT $LN87@SetItemMLP
  0b966	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b969	6b c0 18	 imul	 eax, 24			; 00000018H
  0b96c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b96f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b975	81 7c 02 08 90
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 400 ; 00000190H
  0b97d	75 47		 jne	 SHORT $LN87@SetItemMLP

; 5351 : 			{
; 5352 : 				lpObj->m_MPSkillOpt.MpsOneHandStaffMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0b97f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b982	6b c0 18	 imul	 eax, 24			; 00000018H
  0b985	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0b988	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0b98e	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0b993	50		 push	 eax
  0b994	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b997	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b99a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b99d	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0b9a3	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0b9a7	51		 push	 ecx
  0b9a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0b9ad	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0b9b2	50		 push	 eax
  0b9b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b9b6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0b9bb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0b9be	d9 9a a0 26 00
	00		 fstp	 DWORD PTR [edx+9888]

; 5353 : 				break;

  0b9c4	eb 05		 jmp	 SHORT $LN88@SetItemMLP
$LN87@SetItemMLP:

; 5354 : 			}
; 5355 : 		}

  0b9c6	e9 70 ff ff ff	 jmp	 $LN89@SetItemMLP
$LN88@SetItemMLP:

; 5356 : 		break;

  0b9cb	e9 7b 0c 00 00	 jmp	 $LN132@SetItemMLP
$LN86@SetItemMLP:

; 5357 : 	case 5:
; 5358 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0b9d0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0b9d7	eb 09		 jmp	 SHORT $LN85@SetItemMLP
$LN84@SetItemMLP:
  0b9d9	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0b9dc	83 c0 01	 add	 eax, 1
  0b9df	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN85@SetItemMLP:
  0b9e2	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0b9e9	7d 7e		 jge	 SHORT $LN83@SetItemMLP

; 5359 : 		{
; 5360 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5361 : 				lpObj->Magic[iCount].m_Skill == 398 )

  0b9eb	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0b9ee	6b c9 18	 imul	 ecx, 24			; 00000018H
  0b9f1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0b9f4	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0b9fa	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0b9ff	83 f8 01	 cmp	 eax, 1
  0ba02	75 60		 jne	 SHORT $LN82@SetItemMLP
  0ba04	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0ba07	6b c0 18	 imul	 eax, 24			; 00000018H
  0ba0a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ba0d	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0ba13	81 7c 02 08 8e
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 398 ; 0000018eH
  0ba1b	75 47		 jne	 SHORT $LN82@SetItemMLP

; 5362 : 			{
; 5363 : 				lpObj->m_MPSkillOpt.MpsTwoHandStaffStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0ba1d	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0ba20	6b c0 18	 imul	 eax, 24			; 00000018H
  0ba23	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ba26	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0ba2c	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0ba31	50		 push	 eax
  0ba32	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0ba35	6b c9 18	 imul	 ecx, 24			; 00000018H
  0ba38	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0ba3b	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0ba41	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0ba45	51		 push	 ecx
  0ba46	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0ba4b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0ba50	50		 push	 eax
  0ba51	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ba54	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0ba59	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0ba5c	d9 9a 94 26 00
	00		 fstp	 DWORD PTR [edx+9876]

; 5364 : 				break;

  0ba62	eb 05		 jmp	 SHORT $LN83@SetItemMLP
$LN82@SetItemMLP:

; 5365 : 			}
; 5366 : 		}

  0ba64	e9 70 ff ff ff	 jmp	 $LN84@SetItemMLP
$LN83@SetItemMLP:

; 5367 : 
; 5368 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0ba69	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0ba70	eb 09		 jmp	 SHORT $LN81@SetItemMLP
$LN80@SetItemMLP:
  0ba72	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0ba75	83 c0 01	 add	 eax, 1
  0ba78	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN81@SetItemMLP:
  0ba7b	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0ba82	7d 7e		 jge	 SHORT $LN79@SetItemMLP

; 5369 : 		{
; 5370 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5371 : 				lpObj->Magic[iCount].m_Skill == 401 )

  0ba84	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0ba87	6b c9 18	 imul	 ecx, 24			; 00000018H
  0ba8a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ba8d	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0ba93	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0ba98	83 f8 01	 cmp	 eax, 1
  0ba9b	75 60		 jne	 SHORT $LN78@SetItemMLP
  0ba9d	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0baa0	6b c0 18	 imul	 eax, 24			; 00000018H
  0baa3	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0baa6	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0baac	81 7c 02 08 91
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 401 ; 00000191H
  0bab4	75 47		 jne	 SHORT $LN78@SetItemMLP

; 5372 : 			{
; 5373 : 				lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0bab6	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bab9	6b c0 18	 imul	 eax, 24			; 00000018H
  0babc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0babf	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bac5	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0baca	50		 push	 eax
  0bacb	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bace	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bad1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bad4	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0bada	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0bade	51		 push	 ecx
  0badf	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0bae4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0bae9	50		 push	 eax
  0baea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0baed	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0baf2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0baf5	d9 9a a4 26 00
	00		 fstp	 DWORD PTR [edx+9892]

; 5374 : 				break;

  0bafb	eb 05		 jmp	 SHORT $LN79@SetItemMLP
$LN78@SetItemMLP:

; 5375 : 			}
; 5376 : 		}

  0bafd	e9 70 ff ff ff	 jmp	 $LN80@SetItemMLP
$LN79@SetItemMLP:

; 5377 : 		break;

  0bb02	e9 44 0b 00 00	 jmp	 $LN132@SetItemMLP
$LN77@SetItemMLP:

; 5378 : 	case 6:
; 5379 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0bb07	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0bb0e	eb 09		 jmp	 SHORT $LN76@SetItemMLP
$LN75@SetItemMLP:
  0bb10	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bb13	83 c0 01	 add	 eax, 1
  0bb16	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN76@SetItemMLP:
  0bb19	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0bb20	0f 8d 45 01 00
	00		 jge	 $LN74@SetItemMLP

; 5380 : 		{
; 5381 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  0bb26	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bb29	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bb2c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0bb2f	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0bb35	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0bb3a	83 f8 01	 cmp	 eax, 1
  0bb3d	0f 85 23 01 00
	00		 jne	 $LN70@SetItemMLP

; 5382 : 			{
; 5383 : 				if( lpObj->Magic[iCount].m_Skill == 399 )

  0bb43	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bb46	6b c0 18	 imul	 eax, 24			; 00000018H
  0bb49	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bb4c	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bb52	81 7c 02 08 8f
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 399 ; 0000018fH
  0bb5a	75 4a		 jne	 SHORT $LN72@SetItemMLP

; 5384 : 				{
; 5385 : 					lpObj->m_MPSkillOpt.MpsShieldStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0bb5c	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bb5f	6b c0 18	 imul	 eax, 24			; 00000018H
  0bb62	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bb65	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bb6b	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0bb70	50		 push	 eax
  0bb71	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bb74	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bb77	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bb7a	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0bb80	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0bb84	51		 push	 ecx
  0bb85	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0bb8a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0bb8f	50		 push	 eax
  0bb90	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0bb93	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0bb98	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bb9b	d9 9a 9c 26 00
	00		 fstp	 DWORD PTR [edx+9884]

; 5386 : 					break;

  0bba1	e9 c5 00 00 00	 jmp	 $LN74@SetItemMLP
$LN72@SetItemMLP:

; 5387 : 				}
; 5388 : 
; 5389 : 				if( lpObj->Magic[iCount].m_Skill == 437 )

  0bba6	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bba9	6b c0 18	 imul	 eax, 24			; 00000018H
  0bbac	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bbaf	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bbb5	81 7c 02 08 b5
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 437 ; 000001b5H
  0bbbd	75 47		 jne	 SHORT $LN71@SetItemMLP

; 5390 : 				{
; 5391 : 					lpObj->m_MPSkillOpt.MpsShieldStrength2 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0bbbf	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bbc2	6b c0 18	 imul	 eax, 24			; 00000018H
  0bbc5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bbc8	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bbce	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0bbd3	50		 push	 eax
  0bbd4	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bbd7	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bbda	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bbdd	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0bbe3	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0bbe7	51		 push	 ecx
  0bbe8	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0bbed	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0bbf2	50		 push	 eax
  0bbf3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0bbf6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0bbfb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bbfe	d9 9a 90 27 00
	00		 fstp	 DWORD PTR [edx+10128]

; 5392 : 					break;

  0bc04	eb 65		 jmp	 SHORT $LN74@SetItemMLP
$LN71@SetItemMLP:

; 5393 : 				}
; 5394 : 
; 5395 : 				if( lpObj->Magic[iCount].m_Skill == 528 )

  0bc06	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bc09	6b c0 18	 imul	 eax, 24			; 00000018H
  0bc0c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bc0f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bc15	81 7c 02 08 10
	02 00 00	 cmp	 DWORD PTR [edx+eax+8], 528 ; 00000210H
  0bc1d	75 47		 jne	 SHORT $LN70@SetItemMLP

; 5396 : 				{
; 5397 : 					lpObj->m_MPSkillOpt.MpsShieldStrength3 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0bc1f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bc22	6b c0 18	 imul	 eax, 24			; 00000018H
  0bc25	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bc28	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bc2e	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0bc33	50		 push	 eax
  0bc34	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bc37	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bc3a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bc3d	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0bc43	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0bc47	51		 push	 ecx
  0bc48	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0bc4d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0bc52	50		 push	 eax
  0bc53	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0bc56	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0bc5b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bc5e	d9 9a 18 27 00
	00		 fstp	 DWORD PTR [edx+10008]

; 5398 : 					break;

  0bc64	eb 05		 jmp	 SHORT $LN74@SetItemMLP
$LN70@SetItemMLP:

; 5399 : 				}
; 5400 : 			}
; 5401 : 		}

  0bc66	e9 a5 fe ff ff	 jmp	 $LN75@SetItemMLP
$LN74@SetItemMLP:

; 5402 : 
; 5403 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0bc6b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0bc72	eb 09		 jmp	 SHORT $LN69@SetItemMLP
$LN68@SetItemMLP:
  0bc74	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bc77	83 c0 01	 add	 eax, 1
  0bc7a	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN69@SetItemMLP:
  0bc7d	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0bc84	0f 8d 45 01 00
	00		 jge	 $LN67@SetItemMLP

; 5404 : 		{
; 5405 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  0bc8a	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bc8d	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bc90	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0bc93	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0bc99	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0bc9e	83 f8 01	 cmp	 eax, 1
  0bca1	0f 85 23 01 00
	00		 jne	 $LN63@SetItemMLP

; 5406 : 			{
; 5407 : 				if( lpObj->Magic[iCount].m_Skill == 402 )

  0bca7	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bcaa	6b c0 18	 imul	 eax, 24			; 00000018H
  0bcad	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bcb0	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bcb6	81 7c 02 08 92
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 402 ; 00000192H
  0bcbe	75 4a		 jne	 SHORT $LN65@SetItemMLP

; 5408 : 				{
; 5409 : 					lpObj->m_MPSkillOpt.MpsShieldMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0bcc0	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bcc3	6b c0 18	 imul	 eax, 24			; 00000018H
  0bcc6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bcc9	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bccf	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0bcd4	50		 push	 eax
  0bcd5	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bcd8	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bcdb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bcde	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0bce4	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0bce8	51		 push	 ecx
  0bce9	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0bcee	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0bcf3	50		 push	 eax
  0bcf4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0bcf7	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0bcfc	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bcff	d9 9a a8 26 00
	00		 fstp	 DWORD PTR [edx+9896]

; 5410 : 					break;

  0bd05	e9 c5 00 00 00	 jmp	 $LN67@SetItemMLP
$LN65@SetItemMLP:

; 5411 : 				}
; 5412 : 
; 5413 : 				if( lpObj->Magic[iCount].m_Skill == 440 )

  0bd0a	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bd0d	6b c0 18	 imul	 eax, 24			; 00000018H
  0bd10	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bd13	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bd19	81 7c 02 08 b8
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 440 ; 000001b8H
  0bd21	75 47		 jne	 SHORT $LN64@SetItemMLP

; 5414 : 				{
; 5415 : 					lpObj->m_MPSkillOpt.MpsShieldMastery2 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0bd23	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bd26	6b c0 18	 imul	 eax, 24			; 00000018H
  0bd29	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bd2c	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bd32	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0bd37	50		 push	 eax
  0bd38	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bd3b	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bd3e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bd41	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0bd47	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0bd4b	51		 push	 ecx
  0bd4c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0bd51	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0bd56	50		 push	 eax
  0bd57	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0bd5a	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0bd5f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bd62	d9 9a 8c 27 00
	00		 fstp	 DWORD PTR [edx+10124]

; 5416 : 					break;

  0bd68	eb 65		 jmp	 SHORT $LN67@SetItemMLP
$LN64@SetItemMLP:

; 5417 : 				}
; 5418 : 
; 5419 : 				if( lpObj->Magic[iCount].m_Skill == 532 )

  0bd6a	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bd6d	6b c0 18	 imul	 eax, 24			; 00000018H
  0bd70	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bd73	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bd79	81 7c 02 08 14
	02 00 00	 cmp	 DWORD PTR [edx+eax+8], 532 ; 00000214H
  0bd81	75 47		 jne	 SHORT $LN63@SetItemMLP

; 5420 : 				{
; 5421 : 					lpObj->m_MPSkillOpt.MpsShieldMastery3 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0bd83	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bd86	6b c0 18	 imul	 eax, 24			; 00000018H
  0bd89	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bd8c	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bd92	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0bd97	50		 push	 eax
  0bd98	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bd9b	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bd9e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bda1	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0bda7	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0bdab	51		 push	 ecx
  0bdac	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0bdb1	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0bdb6	50		 push	 eax
  0bdb7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0bdba	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0bdbf	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bdc2	d9 9a 1c 27 00
	00		 fstp	 DWORD PTR [edx+10012]

; 5422 : 					break;

  0bdc8	eb 05		 jmp	 SHORT $LN67@SetItemMLP
$LN63@SetItemMLP:

; 5423 : 				}
; 5424 : 			}
; 5425 : 		}

  0bdca	e9 a5 fe ff ff	 jmp	 $LN68@SetItemMLP
$LN67@SetItemMLP:

; 5426 : 		break;

  0bdcf	e9 77 08 00 00	 jmp	 $LN132@SetItemMLP
$LN62@SetItemMLP:

; 5427 : 	case 7:
; 5428 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0bdd4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0bddb	eb 09		 jmp	 SHORT $LN61@SetItemMLP
$LN60@SetItemMLP:
  0bddd	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bde0	83 c0 01	 add	 eax, 1
  0bde3	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN61@SetItemMLP:
  0bde6	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0bded	7d 7e		 jge	 SHORT $LN59@SetItemMLP

; 5429 : 		{
; 5430 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5431 : 				lpObj->Magic[iCount].m_Skill == 435 )

  0bdef	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bdf2	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bdf5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0bdf8	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0bdfe	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0be03	83 f8 01	 cmp	 eax, 1
  0be06	75 60		 jne	 SHORT $LN58@SetItemMLP
  0be08	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0be0b	6b c0 18	 imul	 eax, 24			; 00000018H
  0be0e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0be11	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0be17	81 7c 02 08 b3
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 435 ; 000001b3H
  0be1f	75 47		 jne	 SHORT $LN58@SetItemMLP

; 5432 : 			{
; 5433 : 				lpObj->m_MPSkillOpt.MpsBowStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0be21	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0be24	6b c0 18	 imul	 eax, 24			; 00000018H
  0be27	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0be2a	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0be30	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0be35	50		 push	 eax
  0be36	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0be39	6b c9 18	 imul	 ecx, 24			; 00000018H
  0be3c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0be3f	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0be45	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0be49	51		 push	 ecx
  0be4a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0be4f	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0be54	50		 push	 eax
  0be55	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0be58	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0be5d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0be60	d9 9a ac 26 00
	00		 fstp	 DWORD PTR [edx+9900]

; 5434 : 				break;

  0be66	eb 05		 jmp	 SHORT $LN59@SetItemMLP
$LN58@SetItemMLP:

; 5435 : 			}
; 5436 : 		}

  0be68	e9 70 ff ff ff	 jmp	 $LN60@SetItemMLP
$LN59@SetItemMLP:

; 5437 : 
; 5438 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0be6d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0be74	eb 09		 jmp	 SHORT $LN57@SetItemMLP
$LN56@SetItemMLP:
  0be76	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0be79	83 c0 01	 add	 eax, 1
  0be7c	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN57@SetItemMLP:
  0be7f	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0be86	7d 7e		 jge	 SHORT $LN55@SetItemMLP

; 5439 : 		{
; 5440 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5441 : 				lpObj->Magic[iCount].m_Skill == 438 )

  0be88	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0be8b	6b c9 18	 imul	 ecx, 24			; 00000018H
  0be8e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0be91	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0be97	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0be9c	83 f8 01	 cmp	 eax, 1
  0be9f	75 60		 jne	 SHORT $LN54@SetItemMLP
  0bea1	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bea4	6b c0 18	 imul	 eax, 24			; 00000018H
  0bea7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0beaa	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0beb0	81 7c 02 08 b6
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 438 ; 000001b6H
  0beb8	75 47		 jne	 SHORT $LN54@SetItemMLP

; 5442 : 			{
; 5443 : 				lpObj->m_MPSkillOpt.MpsBowMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0beba	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bebd	6b c0 18	 imul	 eax, 24			; 00000018H
  0bec0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bec3	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bec9	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0bece	50		 push	 eax
  0becf	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bed2	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bed5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bed8	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0bede	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0bee2	51		 push	 ecx
  0bee3	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0bee8	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0beed	50		 push	 eax
  0beee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0bef1	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0bef6	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bef9	d9 9a b0 26 00
	00		 fstp	 DWORD PTR [edx+9904]

; 5444 : 				break;

  0beff	eb 05		 jmp	 SHORT $LN55@SetItemMLP
$LN54@SetItemMLP:

; 5445 : 			}
; 5446 : 		}

  0bf01	e9 70 ff ff ff	 jmp	 $LN56@SetItemMLP
$LN55@SetItemMLP:

; 5447 : 		break;

  0bf06	e9 40 07 00 00	 jmp	 $LN132@SetItemMLP
$LN53@SetItemMLP:

; 5448 : 	case 8:
; 5449 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0bf0b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0bf12	eb 09		 jmp	 SHORT $LN52@SetItemMLP
$LN51@SetItemMLP:
  0bf14	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bf17	83 c0 01	 add	 eax, 1
  0bf1a	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN52@SetItemMLP:
  0bf1d	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0bf24	7d 7e		 jge	 SHORT $LN50@SetItemMLP

; 5450 : 		{
; 5451 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5452 : 				lpObj->Magic[iCount].m_Skill == 436 )

  0bf26	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bf29	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bf2c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0bf2f	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0bf35	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0bf3a	83 f8 01	 cmp	 eax, 1
  0bf3d	75 60		 jne	 SHORT $LN49@SetItemMLP
  0bf3f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bf42	6b c0 18	 imul	 eax, 24			; 00000018H
  0bf45	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bf48	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bf4e	81 7c 02 08 b4
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 436 ; 000001b4H
  0bf56	75 47		 jne	 SHORT $LN49@SetItemMLP

; 5453 : 			{
; 5454 : 				lpObj->m_MPSkillOpt.MpsCrossbowStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0bf58	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bf5b	6b c0 18	 imul	 eax, 24			; 00000018H
  0bf5e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bf61	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bf67	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0bf6c	50		 push	 eax
  0bf6d	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bf70	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bf73	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bf76	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0bf7c	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0bf80	51		 push	 ecx
  0bf81	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0bf86	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0bf8b	50		 push	 eax
  0bf8c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0bf8f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0bf94	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0bf97	d9 9a b4 26 00
	00		 fstp	 DWORD PTR [edx+9908]

; 5455 : 				break;

  0bf9d	eb 05		 jmp	 SHORT $LN50@SetItemMLP
$LN49@SetItemMLP:

; 5456 : 			}
; 5457 : 		}

  0bf9f	e9 70 ff ff ff	 jmp	 $LN51@SetItemMLP
$LN50@SetItemMLP:

; 5458 : 
; 5459 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0bfa4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0bfab	eb 09		 jmp	 SHORT $LN48@SetItemMLP
$LN47@SetItemMLP:
  0bfad	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bfb0	83 c0 01	 add	 eax, 1
  0bfb3	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN48@SetItemMLP:
  0bfb6	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0bfbd	7d 7e		 jge	 SHORT $LN46@SetItemMLP

; 5460 : 		{
; 5461 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5462 : 				lpObj->Magic[iCount].m_Skill == 439 )

  0bfbf	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0bfc2	6b c9 18	 imul	 ecx, 24			; 00000018H
  0bfc5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0bfc8	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0bfce	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0bfd3	83 f8 01	 cmp	 eax, 1
  0bfd6	75 60		 jne	 SHORT $LN45@SetItemMLP
  0bfd8	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bfdb	6b c0 18	 imul	 eax, 24			; 00000018H
  0bfde	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bfe1	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0bfe7	81 7c 02 08 b7
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 439 ; 000001b7H
  0bfef	75 47		 jne	 SHORT $LN45@SetItemMLP

; 5463 : 			{
; 5464 : 				lpObj->m_MPSkillOpt.MpsCrossbowMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0bff1	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0bff4	6b c0 18	 imul	 eax, 24			; 00000018H
  0bff7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0bffa	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c000	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c005	50		 push	 eax
  0c006	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c009	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c00c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c00f	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c015	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c019	51		 push	 ecx
  0c01a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c01f	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c024	50		 push	 eax
  0c025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c028	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c02d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c030	d9 9a b8 26 00
	00		 fstp	 DWORD PTR [edx+9912]

; 5465 : 				break;

  0c036	eb 05		 jmp	 SHORT $LN46@SetItemMLP
$LN45@SetItemMLP:

; 5466 : 			}
; 5467 : 		}

  0c038	e9 70 ff ff ff	 jmp	 $LN47@SetItemMLP
$LN46@SetItemMLP:

; 5468 : 		break;

  0c03d	e9 09 06 00 00	 jmp	 $LN132@SetItemMLP
$LN44@SetItemMLP:

; 5469 : 	case 9:
; 5470 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c042	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c049	eb 09		 jmp	 SHORT $LN43@SetItemMLP
$LN42@SetItemMLP:
  0c04b	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c04e	83 c0 01	 add	 eax, 1
  0c051	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN43@SetItemMLP:
  0c054	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c05b	7d 7e		 jge	 SHORT $LN41@SetItemMLP

; 5471 : 		{
; 5472 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5473 : 				lpObj->Magic[iCount].m_Skill == 465 )

  0c05d	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c060	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c063	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c066	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c06c	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c071	83 f8 01	 cmp	 eax, 1
  0c074	75 60		 jne	 SHORT $LN40@SetItemMLP
  0c076	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c079	6b c0 18	 imul	 eax, 24			; 00000018H
  0c07c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c07f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c085	81 7c 02 08 d1
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 465 ; 000001d1H
  0c08d	75 47		 jne	 SHORT $LN40@SetItemMLP

; 5474 : 			{
; 5475 : 				lpObj->m_MPSkillOpt.MpsStickStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c08f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c092	6b c0 18	 imul	 eax, 24			; 00000018H
  0c095	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c098	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c09e	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c0a3	50		 push	 eax
  0c0a4	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c0a7	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c0aa	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c0ad	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c0b3	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c0b7	51		 push	 ecx
  0c0b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c0bd	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c0c2	50		 push	 eax
  0c0c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c0c6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c0cb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c0ce	d9 9a e8 26 00
	00		 fstp	 DWORD PTR [edx+9960]

; 5476 : 				break;

  0c0d4	eb 05		 jmp	 SHORT $LN41@SetItemMLP
$LN40@SetItemMLP:

; 5477 : 			}
; 5478 : 		}

  0c0d6	e9 70 ff ff ff	 jmp	 $LN42@SetItemMLP
$LN41@SetItemMLP:

; 5479 : 
; 5480 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c0db	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c0e2	eb 09		 jmp	 SHORT $LN39@SetItemMLP
$LN38@SetItemMLP:
  0c0e4	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c0e7	83 c0 01	 add	 eax, 1
  0c0ea	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN39@SetItemMLP:
  0c0ed	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c0f4	7d 7e		 jge	 SHORT $LN37@SetItemMLP

; 5481 : 		{
; 5482 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5483 : 				lpObj->Magic[iCount].m_Skill == 467 )

  0c0f6	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c0f9	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c0fc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c0ff	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c105	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c10a	83 f8 01	 cmp	 eax, 1
  0c10d	75 60		 jne	 SHORT $LN36@SetItemMLP
  0c10f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c112	6b c0 18	 imul	 eax, 24			; 00000018H
  0c115	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c118	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c11e	81 7c 02 08 d3
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 467 ; 000001d3H
  0c126	75 47		 jne	 SHORT $LN36@SetItemMLP

; 5484 : 			{
; 5485 : 				lpObj->m_MPSkillOpt.MpsStickMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c128	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c12b	6b c0 18	 imul	 eax, 24			; 00000018H
  0c12e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c131	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c137	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c13c	50		 push	 eax
  0c13d	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c140	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c143	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c146	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c14c	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c150	51		 push	 ecx
  0c151	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c156	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c15b	50		 push	 eax
  0c15c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c15f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c164	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c167	d9 9a f0 26 00
	00		 fstp	 DWORD PTR [edx+9968]

; 5486 : 				break;

  0c16d	eb 05		 jmp	 SHORT $LN37@SetItemMLP
$LN36@SetItemMLP:

; 5487 : 			}
; 5488 : 		}

  0c16f	e9 70 ff ff ff	 jmp	 $LN38@SetItemMLP
$LN37@SetItemMLP:

; 5489 : 		break;

  0c174	e9 d2 04 00 00	 jmp	 $LN132@SetItemMLP
$LN35@SetItemMLP:

; 5490 : 	case 10:
; 5491 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c179	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c180	eb 09		 jmp	 SHORT $LN34@SetItemMLP
$LN33@SetItemMLP:
  0c182	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c185	83 c0 01	 add	 eax, 1
  0c188	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN34@SetItemMLP:
  0c18b	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c192	7d 7e		 jge	 SHORT $LN32@SetItemMLP

; 5492 : 		{
; 5493 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5494 : 				lpObj->Magic[iCount].m_Skill == 466 )

  0c194	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c197	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c19a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c19d	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c1a3	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c1a8	83 f8 01	 cmp	 eax, 1
  0c1ab	75 60		 jne	 SHORT $LN31@SetItemMLP
  0c1ad	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c1b0	6b c0 18	 imul	 eax, 24			; 00000018H
  0c1b3	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c1b6	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c1bc	81 7c 02 08 d2
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 466 ; 000001d2H
  0c1c4	75 47		 jne	 SHORT $LN31@SetItemMLP

; 5495 : 			{
; 5496 : 				lpObj->m_MPSkillOpt.MpsTomeStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c1c6	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c1c9	6b c0 18	 imul	 eax, 24			; 00000018H
  0c1cc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c1cf	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c1d5	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c1da	50		 push	 eax
  0c1db	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c1de	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c1e1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c1e4	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c1ea	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c1ee	51		 push	 ecx
  0c1ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c1f4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c1f9	50		 push	 eax
  0c1fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c1fd	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c202	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c205	d9 9a ec 26 00
	00		 fstp	 DWORD PTR [edx+9964]

; 5497 : 				break;

  0c20b	eb 05		 jmp	 SHORT $LN32@SetItemMLP
$LN31@SetItemMLP:

; 5498 : 			}
; 5499 : 		}

  0c20d	e9 70 ff ff ff	 jmp	 $LN33@SetItemMLP
$LN32@SetItemMLP:

; 5500 : 
; 5501 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c212	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c219	eb 09		 jmp	 SHORT $LN30@SetItemMLP
$LN29@SetItemMLP:
  0c21b	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c21e	83 c0 01	 add	 eax, 1
  0c221	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN30@SetItemMLP:
  0c224	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c22b	7d 7e		 jge	 SHORT $LN28@SetItemMLP

; 5502 : 		{
; 5503 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5504 : 				lpObj->Magic[iCount].m_Skill == 468 )

  0c22d	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c230	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c233	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c236	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c23c	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c241	83 f8 01	 cmp	 eax, 1
  0c244	75 60		 jne	 SHORT $LN27@SetItemMLP
  0c246	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c249	6b c0 18	 imul	 eax, 24			; 00000018H
  0c24c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c24f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c255	81 7c 02 08 d4
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 468 ; 000001d4H
  0c25d	75 47		 jne	 SHORT $LN27@SetItemMLP

; 5505 : 			{
; 5506 : 				lpObj->m_MPSkillOpt.MpsTomeMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c25f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c262	6b c0 18	 imul	 eax, 24			; 00000018H
  0c265	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c268	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c26e	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c273	50		 push	 eax
  0c274	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c277	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c27a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c27d	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c283	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c287	51		 push	 ecx
  0c288	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c28d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c292	50		 push	 eax
  0c293	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c296	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c29b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c29e	d9 9a f4 26 00
	00		 fstp	 DWORD PTR [edx+9972]

; 5507 : 				break;

  0c2a4	eb 05		 jmp	 SHORT $LN28@SetItemMLP
$LN27@SetItemMLP:

; 5508 : 			}
; 5509 : 		}

  0c2a6	e9 70 ff ff ff	 jmp	 $LN29@SetItemMLP
$LN28@SetItemMLP:

; 5510 : 		break;

  0c2ab	e9 9b 03 00 00	 jmp	 $LN132@SetItemMLP
$LN26@SetItemMLP:

; 5511 : 	case 11:
; 5512 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c2b0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c2b7	eb 09		 jmp	 SHORT $LN25@SetItemMLP
$LN24@SetItemMLP:
  0c2b9	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c2bc	83 c0 01	 add	 eax, 1
  0c2bf	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN25@SetItemMLP:
  0c2c2	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c2c9	7d 7e		 jge	 SHORT $LN23@SetItemMLP

; 5513 : 		{
; 5514 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5515 : 				lpObj->Magic[iCount].m_Skill == 527 )

  0c2cb	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c2ce	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c2d1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c2d4	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c2da	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c2df	83 f8 01	 cmp	 eax, 1
  0c2e2	75 60		 jne	 SHORT $LN22@SetItemMLP
  0c2e4	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c2e7	6b c0 18	 imul	 eax, 24			; 00000018H
  0c2ea	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c2ed	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c2f3	81 7c 02 08 0f
	02 00 00	 cmp	 DWORD PTR [edx+eax+8], 527 ; 0000020fH
  0c2fb	75 47		 jne	 SHORT $LN22@SetItemMLP

; 5516 : 			{
; 5517 : 				lpObj->m_MPSkillOpt.MpsScepterStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c2fd	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c300	6b c0 18	 imul	 eax, 24			; 00000018H
  0c303	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c306	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c30c	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c311	50		 push	 eax
  0c312	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c315	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c318	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c31b	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c321	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c325	51		 push	 ecx
  0c326	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c32b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c330	50		 push	 eax
  0c331	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c334	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c339	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c33c	d9 9a 10 27 00
	00		 fstp	 DWORD PTR [edx+10000]

; 5518 : 				break;

  0c342	eb 05		 jmp	 SHORT $LN23@SetItemMLP
$LN22@SetItemMLP:

; 5519 : 			}
; 5520 : 		}

  0c344	e9 70 ff ff ff	 jmp	 $LN24@SetItemMLP
$LN23@SetItemMLP:

; 5521 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c349	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c350	eb 09		 jmp	 SHORT $LN21@SetItemMLP
$LN20@SetItemMLP:
  0c352	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c355	83 c0 01	 add	 eax, 1
  0c358	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN21@SetItemMLP:
  0c35b	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c362	7d 7e		 jge	 SHORT $LN19@SetItemMLP

; 5522 : 		{
; 5523 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5524 : 				lpObj->Magic[iCount].m_Skill == 529 )

  0c364	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c367	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c36a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c36d	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c373	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c378	83 f8 01	 cmp	 eax, 1
  0c37b	75 60		 jne	 SHORT $LN18@SetItemMLP
  0c37d	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c380	6b c0 18	 imul	 eax, 24			; 00000018H
  0c383	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c386	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c38c	81 7c 02 08 11
	02 00 00	 cmp	 DWORD PTR [edx+eax+8], 529 ; 00000211H
  0c394	75 47		 jne	 SHORT $LN18@SetItemMLP

; 5525 : 			{
; 5526 : 				lpObj->m_MPSkillOpt.MpsUseScepterPetStr = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c396	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c399	6b c0 18	 imul	 eax, 24			; 00000018H
  0c39c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c39f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c3a5	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c3aa	50		 push	 eax
  0c3ab	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c3ae	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c3b1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c3b4	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c3ba	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c3be	51		 push	 ecx
  0c3bf	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c3c4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c3c9	50		 push	 eax
  0c3ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c3cd	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c3d2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c3d5	d9 9a 20 27 00
	00		 fstp	 DWORD PTR [edx+10016]

; 5527 : 				break;

  0c3db	eb 05		 jmp	 SHORT $LN19@SetItemMLP
$LN18@SetItemMLP:

; 5528 : 			}
; 5529 : 		}

  0c3dd	e9 70 ff ff ff	 jmp	 $LN20@SetItemMLP
$LN19@SetItemMLP:

; 5530 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c3e2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c3e9	eb 09		 jmp	 SHORT $LN17@SetItemMLP
$LN16@SetItemMLP:
  0c3eb	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c3ee	83 c0 01	 add	 eax, 1
  0c3f1	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN17@SetItemMLP:
  0c3f4	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c3fb	7d 7e		 jge	 SHORT $LN15@SetItemMLP

; 5531 : 		{
; 5532 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5533 : 				lpObj->Magic[iCount].m_Skill == 531 )

  0c3fd	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c400	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c403	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c406	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c40c	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c411	83 f8 01	 cmp	 eax, 1
  0c414	75 60		 jne	 SHORT $LN14@SetItemMLP
  0c416	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c419	6b c0 18	 imul	 eax, 24			; 00000018H
  0c41c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c41f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c425	81 7c 02 08 13
	02 00 00	 cmp	 DWORD PTR [edx+eax+8], 531 ; 00000213H
  0c42d	75 47		 jne	 SHORT $LN14@SetItemMLP

; 5534 : 			{
; 5535 : 				lpObj->m_MPSkillOpt.MpsScepterMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c42f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c432	6b c0 18	 imul	 eax, 24			; 00000018H
  0c435	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c438	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c43e	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c443	50		 push	 eax
  0c444	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c447	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c44a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c44d	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c453	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c457	51		 push	 ecx
  0c458	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c45d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c462	50		 push	 eax
  0c463	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c466	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c46b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c46e	d9 9a 14 27 00
	00		 fstp	 DWORD PTR [edx+10004]

; 5536 : 				break;

  0c474	eb 05		 jmp	 SHORT $LN15@SetItemMLP
$LN14@SetItemMLP:

; 5537 : 			}
; 5538 : 		}

  0c476	e9 70 ff ff ff	 jmp	 $LN16@SetItemMLP
$LN15@SetItemMLP:

; 5539 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c47b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c482	eb 09		 jmp	 SHORT $LN13@SetItemMLP
$LN12@SetItemMLP:
  0c484	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c487	83 c0 01	 add	 eax, 1
  0c48a	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN13@SetItemMLP:
  0c48d	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c494	7d 7e		 jge	 SHORT $LN11@SetItemMLP

; 5540 : 		{
; 5541 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5542 : 				lpObj->Magic[iCount].m_Skill == 533 )

  0c496	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c499	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c49c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c49f	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c4a5	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c4aa	83 f8 01	 cmp	 eax, 1
  0c4ad	75 60		 jne	 SHORT $LN10@SetItemMLP
  0c4af	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c4b2	6b c0 18	 imul	 eax, 24			; 00000018H
  0c4b5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c4b8	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c4be	81 7c 02 08 15
	02 00 00	 cmp	 DWORD PTR [edx+eax+8], 533 ; 00000215H
  0c4c6	75 47		 jne	 SHORT $LN10@SetItemMLP

; 5543 : 			{
; 5544 : 				lpObj->m_MPSkillOpt.MpsCommandAttackInc = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c4c8	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c4cb	6b c0 18	 imul	 eax, 24			; 00000018H
  0c4ce	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c4d1	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c4d7	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c4dc	50		 push	 eax
  0c4dd	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c4e0	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c4e3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c4e6	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c4ec	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c4f0	51		 push	 ecx
  0c4f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c4f6	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c4fb	50		 push	 eax
  0c4fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c4ff	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c504	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c507	d9 9a 24 27 00
	00		 fstp	 DWORD PTR [edx+10020]

; 5545 : 				break;

  0c50d	eb 05		 jmp	 SHORT $LN11@SetItemMLP
$LN10@SetItemMLP:

; 5546 : 			}
; 5547 : 		}

  0c50f	e9 70 ff ff ff	 jmp	 $LN12@SetItemMLP
$LN11@SetItemMLP:

; 5548 : 		break;

  0c514	e9 32 01 00 00	 jmp	 $LN132@SetItemMLP
$LN9@SetItemMLP:

; 5549 : 	case 12:
; 5550 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c519	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c520	eb 09		 jmp	 SHORT $LN8@SetItemMLP
$LN7@SetItemMLP:
  0c522	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c525	83 c0 01	 add	 eax, 1
  0c528	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN8@SetItemMLP:
  0c52b	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c532	7d 7e		 jge	 SHORT $LN6@SetItemMLP

; 5551 : 		{
; 5552 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5553 : 				lpObj->Magic[iCount].m_Skill == 568 )

  0c534	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c537	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c53a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c53d	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c543	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c548	83 f8 01	 cmp	 eax, 1
  0c54b	75 60		 jne	 SHORT $LN5@SetItemMLP
  0c54d	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c550	6b c0 18	 imul	 eax, 24			; 00000018H
  0c553	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c556	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c55c	81 7c 02 08 38
	02 00 00	 cmp	 DWORD PTR [edx+eax+8], 568 ; 00000238H
  0c564	75 47		 jne	 SHORT $LN5@SetItemMLP

; 5554 : 			{
; 5555 : 				lpObj->m_MPSkillOpt.MpsFistStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c566	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c569	6b c0 18	 imul	 eax, 24			; 00000018H
  0c56c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c56f	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c575	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c57a	50		 push	 eax
  0c57b	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c57e	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c581	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c584	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c58a	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c58e	51		 push	 ecx
  0c58f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c594	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c599	50		 push	 eax
  0c59a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c59d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c5a2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c5a5	d9 9a 94 27 00
	00		 fstp	 DWORD PTR [edx+10132]

; 5556 : 				break;

  0c5ab	eb 05		 jmp	 SHORT $LN6@SetItemMLP
$LN5@SetItemMLP:

; 5557 : 			}
; 5558 : 		}

  0c5ad	e9 70 ff ff ff	 jmp	 $LN7@SetItemMLP
$LN6@SetItemMLP:

; 5559 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c5b2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0
  0c5b9	eb 09		 jmp	 SHORT $LN4@SetItemMLP
$LN3@SetItemMLP:
  0c5bb	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c5be	83 c0 01	 add	 eax, 1
  0c5c1	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN4@SetItemMLP:
  0c5c4	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$[ebp], 150 ; 00000096H
  0c5cb	7d 7e		 jge	 SHORT $LN2@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  0c5cd	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c5d0	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c5d3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c5d6	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c5dc	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c5e1	83 f8 01	 cmp	 eax, 1
  0c5e4	75 60		 jne	 SHORT $LN1@SetItemMLP
  0c5e6	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c5e9	6b c0 18	 imul	 eax, 24			; 00000018H
  0c5ec	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c5ef	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c5f5	81 7c 02 08 3b
	02 00 00	 cmp	 DWORD PTR [edx+eax+8], 571 ; 0000023bH
  0c5fd	75 47		 jne	 SHORT $LN1@SetItemMLP

; 5563 : 			{
; 5564 : 				lpObj->m_MPSkillOpt.MpsFistMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0c5ff	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  0c602	6b c0 18	 imul	 eax, 24			; 00000018H
  0c605	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c608	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c60e	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c613	50		 push	 eax
  0c614	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$[ebp]
  0c617	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c61a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c61d	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  0c623	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  0c627	51		 push	 ecx
  0c628	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c62d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c632	50		 push	 eax
  0c633	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c636	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c63b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0c63e	d9 9a 98 27 00
	00		 fstp	 DWORD PTR [edx+10136]

; 5565 : 				break;

  0c644	eb 05		 jmp	 SHORT $LN2@SetItemMLP
$LN1@SetItemMLP:

; 5566 : 			}
; 5567 : 		}

  0c646	e9 70 ff ff ff	 jmp	 $LN3@SetItemMLP
$LN2@SetItemMLP:
$LN132@SetItemMLP:

; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  0c64b	5f		 pop	 edi
  0c64c	5e		 pop	 esi
  0c64d	5b		 pop	 ebx
  0c64e	8b e5		 mov	 esp, ebp
  0c650	5d		 pop	 ebp
  0c651	c2 08 00	 ret	 8
$LN136@SetItemMLP:
  0c654	00 00 00 00	 DD	 $LN131@SetItemMLP
  0c658	00 00 00 00	 DD	 $LN122@SetItemMLP
  0c65c	00 00 00 00	 DD	 $LN113@SetItemMLP
  0c660	00 00 00 00	 DD	 $LN104@SetItemMLP
  0c664	00 00 00 00	 DD	 $LN95@SetItemMLP
  0c668	00 00 00 00	 DD	 $LN86@SetItemMLP
  0c66c	00 00 00 00	 DD	 $LN77@SetItemMLP
  0c670	00 00 00 00	 DD	 $LN62@SetItemMLP
  0c674	00 00 00 00	 DD	 $LN53@SetItemMLP
  0c678	00 00 00 00	 DD	 $LN44@SetItemMLP
  0c67c	00 00 00 00	 DD	 $LN35@SetItemMLP
  0c680	00 00 00 00	 DD	 $LN26@SetItemMLP
  0c684	00 00 00 00	 DD	 $LN9@SetItemMLP
?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::SetItemMLPassiveSkill
_TEXT	ENDS
PUBLIC	?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::SetPetItemMLPassiveSkill
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iCount$236587 = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iType$ = 12						; size = 4
?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::SetPetItemMLPassiveSkill
; _this$ = ecx

; 5693 : {

  0c690	55		 push	 ebp
  0c691	8b ec		 mov	 ebp, esp
  0c693	83 ec 48	 sub	 esp, 72			; 00000048H
  0c696	53		 push	 ebx
  0c697	56		 push	 esi
  0c698	57		 push	 edi
  0c699	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5694 : 	if( iType != ITEMGET(13,4) )

  0c69c	81 7d 0c 04 1a
	00 00		 cmp	 DWORD PTR _iType$[ebp], 6660 ; 00001a04H
  0c6a3	74 02		 je	 SHORT $LN5@SetPetItem

; 5695 : 		return;

  0c6a5	eb 51		 jmp	 SHORT $LN6@SetPetItem
$LN5@SetPetItem:

; 5696 : 
; 5697 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c6a7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$236587[ebp], 0
  0c6ae	eb 09		 jmp	 SHORT $LN4@SetPetItem
$LN3@SetPetItem:
  0c6b0	8b 45 f8	 mov	 eax, DWORD PTR _iCount$236587[ebp]
  0c6b3	83 c0 01	 add	 eax, 1
  0c6b6	89 45 f8	 mov	 DWORD PTR _iCount$236587[ebp], eax
$LN4@SetPetItem:
  0c6b9	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$236587[ebp], 150 ; 00000096H
  0c6c0	7d 36		 jge	 SHORT $LN6@SetPetItem

; 5698 : 	{
; 5699 : 		if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5700 : 			lpObj->Magic[iCount].m_Skill == 510 )

  0c6c2	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$236587[ebp]
  0c6c5	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c6c8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c6cb	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c6d1	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c6d6	83 f8 01	 cmp	 eax, 1
  0c6d9	75 1b		 jne	 SHORT $LN1@SetPetItem
  0c6db	8b 45 f8	 mov	 eax, DWORD PTR _iCount$236587[ebp]
  0c6de	6b c0 18	 imul	 eax, 24			; 00000018H
  0c6e1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c6e4	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c6ea	81 7c 02 08 fe
	01 00 00	 cmp	 DWORD PTR [edx+eax+8], 510 ; 000001feH
  0c6f2	75 02		 jne	 SHORT $LN1@SetPetItem

; 5701 : 		{
; 5702 : 			//lpObj->m_MPSkillOpt.MpsDarkHorseStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5703 : 			break;

  0c6f4	eb 02		 jmp	 SHORT $LN6@SetPetItem
$LN1@SetPetItem:

; 5704 : 		}
; 5705 : 	}

  0c6f6	eb b8		 jmp	 SHORT $LN3@SetPetItem
$LN6@SetPetItem:

; 5706 : }

  0c6f8	5f		 pop	 edi
  0c6f9	5e		 pop	 esi
  0c6fa	5b		 pop	 ebx
  0c6fb	8b e5		 mov	 esp, ebp
  0c6fd	5d		 pop	 ebp
  0c6fe	c2 08 00	 ret	 8
?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::SetPetItemMLPassiveSkill
; Function compile flags: /Odtp /ZI
_iCount$236597 = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
; _this$ = ecx

; 5709 : {

  0c710	55		 push	 ebp
  0c711	8b ec		 mov	 ebp, esp
  0c713	83 ec 48	 sub	 esp, 72			; 00000048H
  0c716	53		 push	 ebx
  0c717	56		 push	 esi
  0c718	57		 push	 edi
  0c719	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5710 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  0c71c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$236597[ebp], 0
  0c723	eb 09		 jmp	 SHORT $LN4@GetCurSkil
$LN3@GetCurSkil:
  0c725	8b 45 f8	 mov	 eax, DWORD PTR _iCount$236597[ebp]
  0c728	83 c0 01	 add	 eax, 1
  0c72b	89 45 f8	 mov	 DWORD PTR _iCount$236597[ebp], eax
$LN4@GetCurSkil:
  0c72e	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _iCount$236597[ebp], 150 ; 00000096H
  0c735	7d 48		 jge	 SHORT $LN2@GetCurSkil

; 5711 : 	{
; 5712 : 		if( lpObj->Magic[iCount].IsMagic() &&
; 5713 : 			lpObj->Magic[iCount].m_Skill == iSkill )

  0c737	8b 4d f8	 mov	 ecx, DWORD PTR _iCount$236597[ebp]
  0c73a	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c73d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c740	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c746	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c74b	85 c0		 test	 eax, eax
  0c74d	74 2e		 je	 SHORT $LN1@GetCurSkil
  0c74f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$236597[ebp]
  0c752	6b c0 18	 imul	 eax, 24			; 00000018H
  0c755	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c758	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c75e	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  0c762	3b 45 0c	 cmp	 eax, DWORD PTR _iSkill$[ebp]
  0c765	75 16		 jne	 SHORT $LN1@GetCurSkil

; 5714 : 			return lpObj->Magic[iCount].m_Level;

  0c767	8b 45 f8	 mov	 eax, DWORD PTR _iCount$236597[ebp]
  0c76a	6b c0 18	 imul	 eax, 24			; 00000018H
  0c76d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c770	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c776	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c77b	eb 05		 jmp	 SHORT $LN5@GetCurSkil
$LN1@GetCurSkil:

; 5715 : 	}

  0c77d	eb a6		 jmp	 SHORT $LN3@GetCurSkil
$LN2@GetCurSkil:

; 5716 : 	return -1;

  0c77f	83 c8 ff	 or	 eax, -1
$LN5@GetCurSkil:

; 5717 : }

  0c782	5f		 pop	 edi
  0c783	5e		 pop	 esi
  0c784	5b		 pop	 ebx
  0c785	8b e5		 mov	 esp, ebp
  0c787	5d		 pop	 ebp
  0c788	c2 08 00	 ret	 8
?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
_TEXT	ENDS
PUBLIC	??_C@_01INIBCBCB@f?$AA@				; `string'
PUBLIC	??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	_strcat:PROC
EXTRN	_sprintf:PROC
;	COMDAT ??_C@_01INIBCBCB@f?$AA@
CONST	SEGMENT
??_C@_01INIBCBCB@f?$AA@ DB 'f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@
CONST	SEGMENT
??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@ DB '%%.%d', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv85 = -348						; size = 4
_szPos$ = -280						; size = 16
_szTemp$ = -264						; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dbValue$ = 8						; size = 8
_iPos$ = 16						; size = 4
?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z PROC	; CMasterLevelSkillTreeSystem::RoundValue
; _this$ = ecx

; 5720 : {

  0c790	55		 push	 ebp
  0c791	8b ec		 mov	 ebp, esp
  0c793	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  0c799	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0c79e	33 c5		 xor	 eax, ebp
  0c7a0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0c7a3	53		 push	 ebx
  0c7a4	56		 push	 esi
  0c7a5	57		 push	 edi
  0c7a6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 5721 : 	char szTemp[256];
; 5722 : 	char szPos[16];
; 5723 : 
; 5724 : 	sprintf(szPos,"%%.%d",iPos);

  0c7a9	8b 45 10	 mov	 eax, DWORD PTR _iPos$[ebp]
  0c7ac	50		 push	 eax
  0c7ad	68 00 00 00 00	 push	 OFFSET ??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@
  0c7b2	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _szPos$[ebp]
  0c7b8	51		 push	 ecx
  0c7b9	e8 00 00 00 00	 call	 _sprintf
  0c7be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5725 : 	strcat(szPos,"f");

  0c7c1	68 00 00 00 00	 push	 OFFSET ??_C@_01INIBCBCB@f?$AA@
  0c7c6	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _szPos$[ebp]
  0c7cc	50		 push	 eax
  0c7cd	e8 00 00 00 00	 call	 _strcat
  0c7d2	83 c4 08	 add	 esp, 8

; 5726 : 	sprintf(szTemp,szPos,dbValue);

  0c7d5	83 ec 08	 sub	 esp, 8
  0c7d8	dd 45 08	 fld	 QWORD PTR _dbValue$[ebp]
  0c7db	dd 1c 24	 fstp	 QWORD PTR [esp]
  0c7de	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _szPos$[ebp]
  0c7e4	50		 push	 eax
  0c7e5	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  0c7eb	51		 push	 ecx
  0c7ec	e8 00 00 00 00	 call	 _sprintf
  0c7f1	83 c4 10	 add	 esp, 16			; 00000010H

; 5727 : 	return (float)atof(szTemp);

  0c7f4	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  0c7fa	50		 push	 eax
  0c7fb	e8 00 00 00 00	 call	 _atof
  0c800	83 c4 04	 add	 esp, 4
  0c803	d9 9d a4 fe ff
	ff		 fstp	 DWORD PTR tv85[ebp]
  0c809	d9 85 a4 fe ff
	ff		 fld	 DWORD PTR tv85[ebp]

; 5728 : }

  0c80f	5f		 pop	 edi
  0c810	5e		 pop	 esi
  0c811	5b		 pop	 ebx
  0c812	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0c815	33 cd		 xor	 ecx, ebp
  0c817	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0c81c	8b e5		 mov	 esp, ebp
  0c81e	5d		 pop	 ebp
  0c81f	c2 0c 00	 ret	 12			; 0000000cH
?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ENDP	; CMasterLevelSkillTreeSystem::RoundValue
_TEXT	ENDS
PUBLIC	??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@ ; `string'
PUBLIC	?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
EXTRN	?GetSkillGroup@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillGroup
;	COMDAT ??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@
CONST	SEGMENT
??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@ DB '['
	DB	'GetSkillAttackDamage] fail!!! - %d', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$236633 = -28						; size = 4
_nCnt$ = -24						; size = 4
_iValuType$ = -20					; size = 4
_iBrandOfSkill$ = -16					; size = 2
_nBrandOfSkill$ = -12					; size = 2
_nSkillGroup$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
; _this$ = ecx

; 5731 : {

  0c830	55		 push	 ebp
  0c831	8b ec		 mov	 ebp, esp
  0c833	83 ec 5c	 sub	 esp, 92			; 0000005cH
  0c836	53		 push	 ebx
  0c837	56		 push	 esi
  0c838	57		 push	 edi
  0c839	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5732 : 	if( lpObj == NULL )

  0c83c	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  0c840	75 07		 jne	 SHORT $LN13@GetSkillAt

; 5733 : 		return 0.0f;

  0c842	d9 ee		 fldz
  0c844	e9 59 01 00 00	 jmp	 $LN14@GetSkillAt
$LN13@GetSkillAt:

; 5734 : 
; 5735 : 	if( !this->CheckRequireStatus(iSkill) )

  0c849	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0c84c	50		 push	 eax
  0c84d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c850	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  0c855	85 c0		 test	 eax, eax
  0c857	75 07		 jne	 SHORT $LN12@GetSkillAt

; 5736 : 		return 0.0f;

  0c859	d9 ee		 fldz
  0c85b	e9 42 01 00 00	 jmp	 $LN14@GetSkillAt
$LN12@GetSkillAt:

; 5737 : 
; 5738 : 	int nSkillGroup = MagicDamageC.GetSkillGroup(iSkill);

  0c860	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0c863	50		 push	 eax
  0c864	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c869	e8 00 00 00 00	 call	 ?GetSkillGroup@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillGroup
  0c86e	89 45 f8	 mov	 DWORD PTR _nSkillGroup$[ebp], eax

; 5739 : 	WORD nBrandOfSkill = iSkill;

  0c871	66 8b 45 0c	 mov	 ax, WORD PTR _iSkill$[ebp]
  0c875	66 89 45 f4	 mov	 WORD PTR _nBrandOfSkill$[ebp], ax

; 5740 : 	WORD iBrandOfSkill;
; 5741 : 	int iValuType;
; 5742 : 	int nCnt = 0;

  0c879	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nCnt$[ebp], 0
$LN11@GetSkillAt:

; 5743 : 
; 5744 : 	while( this->CheckRequireStatus(nBrandOfSkill) )

  0c880	0f b7 45 f4	 movzx	 eax, WORD PTR _nBrandOfSkill$[ebp]
  0c884	50		 push	 eax
  0c885	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c888	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  0c88d	85 c0		 test	 eax, eax
  0c88f	0f 84 91 00 00
	00		 je	 $LN10@GetSkillAt

; 5745 : 	{
; 5746 : 		iBrandOfSkill = nBrandOfSkill;

  0c895	66 8b 45 f4	 mov	 ax, WORD PTR _nBrandOfSkill$[ebp]
  0c899	66 89 45 f0	 mov	 WORD PTR _iBrandOfSkill$[ebp], ax

; 5747 : 
; 5748 : 		if( MagicDamageC.GetSkillGroup(iBrandOfSkill) != nSkillGroup )

  0c89d	0f b7 45 f0	 movzx	 eax, WORD PTR _iBrandOfSkill$[ebp]
  0c8a1	50		 push	 eax
  0c8a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c8a7	e8 00 00 00 00	 call	 ?GetSkillGroup@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillGroup
  0c8ac	3b 45 f8	 cmp	 eax, DWORD PTR _nSkillGroup$[ebp]
  0c8af	74 08		 je	 SHORT $LN9@GetSkillAt

; 5749 : 		{
; 5750 : 			iBrandOfSkill = 0;

  0c8b1	33 c0		 xor	 eax, eax
  0c8b3	66 89 45 f0	 mov	 WORD PTR _iBrandOfSkill$[ebp], ax

; 5751 : 			break;

  0c8b7	eb 6d		 jmp	 SHORT $LN10@GetSkillAt
$LN9@GetSkillAt:

; 5752 : 		}
; 5753 : 
; 5754 : 		iValuType = MagicDamageC.SkillGet(iBrandOfSkill);

  0c8b9	0f b7 45 f0	 movzx	 eax, WORD PTR _iBrandOfSkill$[ebp]
  0c8bd	50		 push	 eax
  0c8be	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c8c3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0c8c8	89 45 ec	 mov	 DWORD PTR _iValuType$[ebp], eax

; 5755 : 
; 5756 : 		if( iValuType == 3 ||
; 5757 : 			iValuType == 4 ||
; 5758 : 			iValuType == 5 ||
; 5759 : 			iValuType == 22 )

  0c8cb	83 7d ec 03	 cmp	 DWORD PTR _iValuType$[ebp], 3
  0c8cf	74 12		 je	 SHORT $LN7@GetSkillAt
  0c8d1	83 7d ec 04	 cmp	 DWORD PTR _iValuType$[ebp], 4
  0c8d5	74 0c		 je	 SHORT $LN7@GetSkillAt
  0c8d7	83 7d ec 05	 cmp	 DWORD PTR _iValuType$[ebp], 5
  0c8db	74 06		 je	 SHORT $LN7@GetSkillAt
  0c8dd	83 7d ec 16	 cmp	 DWORD PTR _iValuType$[ebp], 22 ; 00000016H
  0c8e1	75 02		 jne	 SHORT $LN8@GetSkillAt
$LN7@GetSkillAt:

; 5760 : 		{
; 5761 : 			break;

  0c8e3	eb 41		 jmp	 SHORT $LN10@GetSkillAt
$LN8@GetSkillAt:

; 5762 : 		}
; 5763 : 		
; 5764 : 		nBrandOfSkill = MagicDamageC.GetSkillReqBrandOfSkill(iBrandOfSkill);

  0c8e5	0f b7 45 f0	 movzx	 eax, WORD PTR _iBrandOfSkill$[ebp]
  0c8e9	50		 push	 eax
  0c8ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0c8ef	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  0c8f4	66 89 45 f4	 mov	 WORD PTR _nBrandOfSkill$[ebp], ax

; 5765 : 		nCnt++;

  0c8f8	8b 45 e8	 mov	 eax, DWORD PTR _nCnt$[ebp]
  0c8fb	83 c0 01	 add	 eax, 1
  0c8fe	89 45 e8	 mov	 DWORD PTR _nCnt$[ebp], eax

; 5766 : 
; 5767 : 		if( nCnt > 2 )

  0c901	83 7d e8 02	 cmp	 DWORD PTR _nCnt$[ebp], 2
  0c905	7e 1a		 jle	 SHORT $LN6@GetSkillAt

; 5768 : 		{
; 5769 : 			LogAddTD("[GetSkillAttackDamage] fail!!! - %d",iSkill);

  0c907	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0c90a	50		 push	 eax
  0c90b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@
  0c910	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0c916	83 c4 08	 add	 esp, 8

; 5770 : 			iBrandOfSkill = 0;

  0c919	33 c0		 xor	 eax, eax
  0c91b	66 89 45 f0	 mov	 WORD PTR _iBrandOfSkill$[ebp], ax

; 5771 : 			break;

  0c91f	eb 05		 jmp	 SHORT $LN10@GetSkillAt
$LN6@GetSkillAt:

; 5772 : 		}
; 5773 : 	}

  0c921	e9 5a ff ff ff	 jmp	 $LN11@GetSkillAt
$LN10@GetSkillAt:

; 5774 : 
; 5775 : 	if( iBrandOfSkill > 0 )

  0c926	0f b7 45 f0	 movzx	 eax, WORD PTR _iBrandOfSkill$[ebp]
  0c92a	85 c0		 test	 eax, eax
  0c92c	7e 72		 jle	 SHORT $LN2@GetSkillAt

; 5776 : 	{
; 5777 : 		for(int n = 0; n < MAX_MAGIC; n++)

  0c92e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$236633[ebp], 0
  0c935	eb 09		 jmp	 SHORT $LN4@GetSkillAt
$LN3@GetSkillAt:
  0c937	8b 45 e4	 mov	 eax, DWORD PTR _n$236633[ebp]
  0c93a	83 c0 01	 add	 eax, 1
  0c93d	89 45 e4	 mov	 DWORD PTR _n$236633[ebp], eax
$LN4@GetSkillAt:
  0c940	81 7d e4 96 00
	00 00		 cmp	 DWORD PTR _n$236633[ebp], 150 ; 00000096H
  0c947	7d 57		 jge	 SHORT $LN2@GetSkillAt

; 5778 : 		{
; 5779 : 			if( lpObj->Magic[n].IsMagic() == TRUE &&
; 5780 : 				lpObj->Magic[n].m_Skill == iBrandOfSkill )

  0c949	8b 4d e4	 mov	 ecx, DWORD PTR _n$236633[ebp]
  0c94c	6b c9 18	 imul	 ecx, 24			; 00000018H
  0c94f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c952	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  0c958	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0c95d	83 f8 01	 cmp	 eax, 1
  0c960	75 3c		 jne	 SHORT $LN1@GetSkillAt
  0c962	8b 45 e4	 mov	 eax, DWORD PTR _n$236633[ebp]
  0c965	6b c0 18	 imul	 eax, 24			; 00000018H
  0c968	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c96b	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c971	0f b7 4d f0	 movzx	 ecx, WORD PTR _iBrandOfSkill$[ebp]
  0c975	39 4c 02 08	 cmp	 DWORD PTR [edx+eax+8], ecx
  0c979	75 23		 jne	 SHORT $LN1@GetSkillAt

; 5781 : 			{
; 5782 : 				return this->GetMasterSkillValue(iValuType,lpObj->Magic[n].m_Level);	

  0c97b	8b 45 e4	 mov	 eax, DWORD PTR _n$236633[ebp]
  0c97e	6b c0 18	 imul	 eax, 24			; 00000018H
  0c981	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0c984	8b 91 c8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1224]
  0c98a	0f b6 44 02 04	 movzx	 eax, BYTE PTR [edx+eax+4]
  0c98f	50		 push	 eax
  0c990	8b 4d ec	 mov	 ecx, DWORD PTR _iValuType$[ebp]
  0c993	51		 push	 ecx
  0c994	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c997	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0c99c	eb 04		 jmp	 SHORT $LN14@GetSkillAt
$LN1@GetSkillAt:

; 5783 : 			}
; 5784 : 		}

  0c99e	eb 97		 jmp	 SHORT $LN3@GetSkillAt
$LN2@GetSkillAt:

; 5785 : 	}
; 5786 : 	return 0.0f;

  0c9a0	d9 ee		 fldz
$LN14@GetSkillAt:

; 5787 : }

  0c9a2	5f		 pop	 edi
  0c9a3	5e		 pop	 esi
  0c9a4	5b		 pop	 ebx
  0c9a5	8b e5		 mov	 esp, ebp
  0c9a7	5d		 pop	 ebp
  0c9a8	c2 08 00	 ret	 8
?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
_TEXT	ENDS
PUBLIC	??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@ ; `string'
;	COMDAT ??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@
CONST	SEGMENT
??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@ DB '[Invali'
	DB	'dTargetIndex][MLS_SkillMonkBarrageJustOneTarget] Index :%d , '
	DB	'AccountID : %s ', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv70 = -108						; size = 4
_i$236681 = -40						; size = 4
_nMaxBarrageCount$236667 = -36				; size = 4
_CallMonIndex$236663 = -32				; size = 4
_lpTargetObj$ = -28					; size = 4
_EnableAttack$ = -24					; size = 4
_DuelIndex$ = -20					; size = 4
_nViewPortObjectCount$ = -16				; size = 4
_nTargetObjNum$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
; _this$ = ecx

; 5790 : {

  0c9b0	55		 push	 ebp
  0c9b1	8b ec		 mov	 ebp, esp
  0c9b3	83 ec 6c	 sub	 esp, 108		; 0000006cH
  0c9b6	53		 push	 ebx
  0c9b7	56		 push	 esi
  0c9b8	57		 push	 edi
  0c9b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5791 : 	LPOBJ lpObj = &gObj[aIndex];

  0c9bc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0c9bf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0c9c5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0c9cb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 5792 : 	int nTargetObjNum = 0;

  0c9ce	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nTargetObjNum$[ebp], 0

; 5793 : 	int nViewPortObjectCount = 0;

  0c9d5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _nViewPortObjectCount$[ebp], 0

; 5794 : 	int DuelIndex = lpObj->m_iDuelUser;

  0c9dc	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0c9df	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0c9e5	89 4d ec	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 5795 : 
; 5796 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  0c9e8	83 7d 10 00	 cmp	 DWORD PTR _aTargetIndex$[ebp], 0
  0c9ec	7d 09		 jge	 SHORT $LN36@MLS_SkillM@4
  0c9ee	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  0c9f5	eb 0f		 jmp	 SHORT $LN37@MLS_SkillM@4
$LN36@MLS_SkillM@4:
  0c9f7	33 c0		 xor	 eax, eax
  0c9f9	81 7d 10 97 3a
	00 00		 cmp	 DWORD PTR _aTargetIndex$[ebp], 14999 ; 00003a97H
  0ca00	0f 9e c0	 setle	 al
  0ca03	89 45 94	 mov	 DWORD PTR tv70[ebp], eax
$LN37@MLS_SkillM@4:
  0ca06	83 7d 94 00	 cmp	 DWORD PTR tv70[ebp], 0
  0ca0a	75 2b		 jne	 SHORT $LN33@MLS_SkillM@4

; 5797 : 	{
; 5798 : 		LogAddTD("[InvalidTargetIndex][MLS_SkillMonkBarrageJustOneTarget] Index :%d , AccountID : %s ",
; 5799 : 			aIndex,gObj[aIndex].AccountID);

  0ca0c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0ca0f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ca15	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ca1b	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  0ca1f	52		 push	 edx
  0ca20	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0ca23	50		 push	 eax
  0ca24	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@
  0ca29	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0ca2f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5800 : 		return;

  0ca32	e9 9c 03 00 00	 jmp	 $LN34@MLS_SkillM@4
$LN33@MLS_SkillM@4:

; 5801 : 	}
; 5802 : 
; 5803 : 	int EnableAttack;
; 5804 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0ca37	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0ca3a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ca40	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ca46	89 45 e4	 mov	 DWORD PTR _lpTargetObj$[ebp], eax
$LN32@MLS_SkillM@4:

; 5805 : 
; 5806 : 	while( TRUE )

  0ca49	b8 01 00 00 00	 mov	 eax, 1
  0ca4e	85 c0		 test	 eax, eax
  0ca50	0f 84 7d 03 00
	00		 je	 $LN34@MLS_SkillM@4

; 5807 : 	{
; 5808 : 		if( lpObj->VpPlayer2[nViewPortObjectCount].state != 0 )

  0ca56	8b 45 f0	 mov	 eax, DWORD PTR _nViewPortObjectCount$[ebp]
  0ca59	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ca5c	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ca5f	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0ca67	85 d2		 test	 edx, edx
  0ca69	0f 84 4e 03 00
	00		 je	 $LN30@MLS_SkillM@4

; 5809 : 		{
; 5810 : 			nTargetObjNum = lpObj->VpPlayer2[nViewPortObjectCount].number;

  0ca6f	8b 45 f0	 mov	 eax, DWORD PTR _nViewPortObjectCount$[ebp]
  0ca72	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ca75	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ca78	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0ca80	89 55 f4	 mov	 DWORD PTR _nTargetObjNum$[ebp], edx

; 5811 : 
; 5812 : 			if( nTargetObjNum >= 0 && 
; 5813 : 				nTargetObjNum == aTargetIndex )

  0ca83	83 7d f4 00	 cmp	 DWORD PTR _nTargetObjNum$[ebp], 0
  0ca87	0f 8c 30 03 00
	00		 jl	 $LN30@MLS_SkillM@4
  0ca8d	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0ca90	3b 45 10	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0ca93	0f 85 24 03 00
	00		 jne	 $LN30@MLS_SkillM@4

; 5814 : 			{
; 5815 : 				EnableAttack = FALSE;

  0ca99	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 5816 : 
; 5817 : 				if(lpObj->VpPlayer2[nViewPortObjectCount].type == OBJ_USER )

  0caa0	8b 45 f0	 mov	 eax, DWORD PTR _nViewPortObjectCount$[ebp]
  0caa3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0caa6	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0caa9	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0cab1	83 fa 01	 cmp	 edx, 1
  0cab4	75 0c		 jne	 SHORT $LN28@MLS_SkillM@4

; 5818 : 				{
; 5819 : 					EnableAttack = TRUE;

  0cab6	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0cabd	e9 db 00 00 00	 jmp	 $LN27@MLS_SkillM@4
$LN28@MLS_SkillM@4:

; 5820 : 				}
; 5821 : 				else if( lpTargetObj->Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon < 0 )

  0cac2	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0cac5	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0cac9	83 f9 02	 cmp	 ecx, 2
  0cacc	75 25		 jne	 SHORT $LN26@MLS_SkillM@4
  0cace	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cad1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cad7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cadd	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0cae5	7d 0c		 jge	 SHORT $LN26@MLS_SkillM@4

; 5822 : 				{
; 5823 : 					EnableAttack = TRUE;

  0cae7	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0caee	e9 aa 00 00 00	 jmp	 $LN27@MLS_SkillM@4
$LN26@MLS_SkillM@4:

; 5824 : 				}
; 5825 : 				else if( nTargetObjNum == DuelIndex )

  0caf3	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0caf6	3b 45 ec	 cmp	 eax, DWORD PTR _DuelIndex$[ebp]
  0caf9	75 0c		 jne	 SHORT $LN24@MLS_SkillM@4

; 5826 : 				{
; 5827 : 					EnableAttack = TRUE;

  0cafb	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1

; 5828 : 				}
; 5829 : 				else

  0cb02	e9 96 00 00 00	 jmp	 $LN27@MLS_SkillM@4
$LN24@MLS_SkillM@4:

; 5830 : 				{
; 5831 : 					int CallMonIndex = gObj[nTargetObjNum].m_Index;

  0cb07	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cb0a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cb10	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cb16	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0cb19	89 55 e0	 mov	 DWORD PTR _CallMonIndex$236663[ebp], edx

; 5832 : 
; 5833 : 					if(gObj[nTargetObjNum].Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon >= 0)

  0cb1c	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cb1f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cb25	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cb2b	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0cb30	83 fa 02	 cmp	 edx, 2
  0cb33	75 40		 jne	 SHORT $LN22@MLS_SkillM@4
  0cb35	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cb38	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cb3e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cb44	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0cb4c	7c 27		 jl	 SHORT $LN22@MLS_SkillM@4

; 5834 : 					{
; 5835 : 						CallMonIndex = gObj[gObj[nTargetObjNum].m_RecallMon].m_Index;

  0cb4e	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cb51	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cb57	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cb5d	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0cb64	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0cb6a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cb6f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0cb72	89 4d e0	 mov	 DWORD PTR _CallMonIndex$236663[ebp], ecx
$LN22@MLS_SkillM@4:

; 5836 : 					}
; 5837 : 
; 5838 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0cb75	8b 45 e0	 mov	 eax, DWORD PTR _CallMonIndex$236663[ebp]
  0cb78	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cb7e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cb84	50		 push	 eax
  0cb85	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0cb88	51		 push	 ecx
  0cb89	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0cb8e	83 c4 08	 add	 esp, 8
  0cb91	83 f8 01	 cmp	 eax, 1
  0cb94	75 07		 jne	 SHORT $LN27@MLS_SkillM@4

; 5839 : 					{
; 5840 : 						EnableAttack = TRUE;

  0cb96	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN27@MLS_SkillM@4:

; 5841 : 					}
; 5842 : 				}
; 5843 : 
; 5844 : 				if( EnableAttack != FALSE && 
; 5845 : 					MLS_CalDistance(gObj[aTargetIndex].X,gObj[aTargetIndex].Y,gObj[nTargetObjNum].X,gObj[nTargetObjNum].Y) < 4 )

  0cb9d	83 7d e8 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0cba1	0f 84 14 02 00
	00		 je	 $LN20@MLS_SkillM@4
  0cba7	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cbaa	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cbb0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cbb6	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0cbbe	52		 push	 edx
  0cbbf	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cbc2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cbc8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cbce	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0cbd6	52		 push	 edx
  0cbd7	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0cbda	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cbe0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cbe6	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0cbee	52		 push	 edx
  0cbef	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0cbf2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cbf8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cbfe	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0cc06	52		 push	 edx
  0cc07	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0cc0a	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  0cc0f	83 f8 04	 cmp	 eax, 4
  0cc12	0f 8d a3 01 00
	00		 jge	 $LN20@MLS_SkillM@4

; 5846 : 				{
; 5847 : 					int nMaxBarrageCount = 0;

  0cc18	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236667[ebp], 0

; 5848 : 
; 5849 : 					if( lpMagic->m_Skill == 551 )

  0cc1f	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0cc22	81 78 08 27 02
	00 00		 cmp	 DWORD PTR [eax+8], 551	; 00000227H
  0cc29	75 09		 jne	 SHORT $LN19@MLS_SkillM@4

; 5850 : 					{
; 5851 : 						nMaxBarrageCount = 5;

  0cc2b	c7 45 dc 05 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236667[ebp], 5
  0cc32	eb 46		 jmp	 SHORT $LN18@MLS_SkillM@4
$LN19@MLS_SkillM@4:

; 5852 : 					}
; 5853 : 					else if( lpMagic->m_Skill == 552 )

  0cc34	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0cc37	81 78 08 28 02
	00 00		 cmp	 DWORD PTR [eax+8], 552	; 00000228H
  0cc3e	75 09		 jne	 SHORT $LN17@MLS_SkillM@4

; 5854 : 					{
; 5855 : 						nMaxBarrageCount = 3;

  0cc40	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236667[ebp], 3
  0cc47	eb 31		 jmp	 SHORT $LN18@MLS_SkillM@4
$LN17@MLS_SkillM@4:

; 5856 : 					}
; 5857 : 					else if( lpMagic->m_Skill == 558 )

  0cc49	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0cc4c	81 78 08 2e 02
	00 00		 cmp	 DWORD PTR [eax+8], 558	; 0000022eH
  0cc53	75 09		 jne	 SHORT $LN15@MLS_SkillM@4

; 5858 : 					{
; 5859 : 						nMaxBarrageCount = 5;

  0cc55	c7 45 dc 05 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236667[ebp], 5
  0cc5c	eb 1c		 jmp	 SHORT $LN18@MLS_SkillM@4
$LN15@MLS_SkillM@4:

; 5860 : 					}
; 5861 : 					else if( lpMagic->m_Skill == 559 )

  0cc5e	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0cc61	81 78 08 2f 02
	00 00		 cmp	 DWORD PTR [eax+8], 559	; 0000022fH
  0cc68	75 09		 jne	 SHORT $LN13@MLS_SkillM@4

; 5862 : 					{
; 5863 : 						nMaxBarrageCount = 3;

  0cc6a	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236667[ebp], 3

; 5864 : 					}
; 5865 : 					else

  0cc71	eb 07		 jmp	 SHORT $LN18@MLS_SkillM@4
$LN13@MLS_SkillM@4:

; 5866 : 					{
; 5867 : 						nMaxBarrageCount = 0;

  0cc73	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236667[ebp], 0
$LN18@MLS_SkillM@4:

; 5868 : 					}
; 5869 : 
; 5870 : 					if( lpMagic->m_Skill == 551 && 
; 5871 : 						rand()%100 < 10 )

  0cc7a	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0cc7d	81 78 08 27 02
	00 00		 cmp	 DWORD PTR [eax+8], 551	; 00000227H
  0cc84	75 2f		 jne	 SHORT $LN11@MLS_SkillM@4
  0cc86	e8 00 00 00 00	 call	 _rand
  0cc8b	99		 cdq
  0cc8c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0cc91	f7 f9		 idiv	 ecx
  0cc93	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0cc96	7d 1d		 jge	 SHORT $LN11@MLS_SkillM@4

; 5872 : 					{
; 5873 : 						gObjApplyBuffEffectDuration(lpTargetObj,76,29,5,0,0,10);

  0cc98	6a 0a		 push	 10			; 0000000aH
  0cc9a	6a 00		 push	 0
  0cc9c	6a 00		 push	 0
  0cc9e	6a 05		 push	 5
  0cca0	6a 1d		 push	 29			; 0000001dH
  0cca2	6a 4c		 push	 76			; 0000004cH
  0cca4	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0cca7	50		 push	 eax
  0cca8	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0ccad	83 c4 1c	 add	 esp, 28			; 0000001cH

; 5874 : 					}
; 5875 : 					else if( lpMagic->m_Skill == 552 &&

  0ccb0	e9 91 00 00 00	 jmp	 $LN10@MLS_SkillM@4
$LN11@MLS_SkillM@4:

; 5876 : 						rand()%100 < 10 )

  0ccb5	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0ccb8	81 78 08 28 02
	00 00		 cmp	 DWORD PTR [eax+8], 552	; 00000228H
  0ccbf	75 2c		 jne	 SHORT $LN9@MLS_SkillM@4
  0ccc1	e8 00 00 00 00	 call	 _rand
  0ccc6	99		 cdq
  0ccc7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0cccc	f7 f9		 idiv	 ecx
  0ccce	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0ccd1	7d 1a		 jge	 SHORT $LN9@MLS_SkillM@4

; 5877 : 					{
; 5878 : 						gObjApplyBuffEffectDuration(lpTargetObj,58,23,10,0,0,10);

  0ccd3	6a 0a		 push	 10			; 0000000aH
  0ccd5	6a 00		 push	 0
  0ccd7	6a 00		 push	 0
  0ccd9	6a 0a		 push	 10			; 0000000aH
  0ccdb	6a 17		 push	 23			; 00000017H
  0ccdd	6a 3a		 push	 58			; 0000003aH
  0ccdf	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0cce2	50		 push	 eax
  0cce3	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0cce8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 5879 : 					}
; 5880 : 					else if( lpMagic->m_Skill == 558 &&

  0cceb	eb 59		 jmp	 SHORT $LN10@MLS_SkillM@4
$LN9@MLS_SkillM@4:

; 5881 : 						rand()%100 < 40 )

  0cced	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0ccf0	81 78 08 2e 02
	00 00		 cmp	 DWORD PTR [eax+8], 558	; 0000022eH
  0ccf7	75 4d		 jne	 SHORT $LN10@MLS_SkillM@4
  0ccf9	e8 00 00 00 00	 call	 _rand
  0ccfe	99		 cdq
  0ccff	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0cd04	f7 f9		 idiv	 ecx
  0cd06	83 fa 28	 cmp	 edx, 40			; 00000028H
  0cd09	7d 3b		 jge	 SHORT $LN10@MLS_SkillM@4

; 5882 : 					{
; 5883 : 						lpTargetObj->lpAttackObj = lpObj;

  0cd0b	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0cd0e	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0cd11	89 88 d4 03 00
	00		 mov	 DWORD PTR [eax+980], ecx

; 5884 : 						lpTargetObj->DelayActionTime = 1000;

  0cd17	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0cd1a	c7 80 c0 03 00
	00 e8 03 00 00	 mov	 DWORD PTR [eax+960], 1000 ; 000003e8H

; 5885 : 						lpTargetObj->DelayLevel = 1;

  0cd24	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0cd27	c6 80 c4 03 00
	00 01		 mov	 BYTE PTR [eax+964], 1

; 5886 : 
; 5887 : 						gObjApplyBuffEffectDuration(lpTargetObj,86,20,0,0,0,10);

  0cd2e	6a 0a		 push	 10			; 0000000aH
  0cd30	6a 00		 push	 0
  0cd32	6a 00		 push	 0
  0cd34	6a 00		 push	 0
  0cd36	6a 14		 push	 20			; 00000014H
  0cd38	6a 56		 push	 86			; 00000056H
  0cd3a	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0cd3d	50		 push	 eax
  0cd3e	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0cd43	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN10@MLS_SkillM@4:

; 5888 : 					}
; 5889 : 
; 5890 : 					for(int i = 1; i < nMaxBarrageCount; i++)

  0cd46	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _i$236681[ebp], 1
  0cd4d	eb 09		 jmp	 SHORT $LN6@MLS_SkillM@4
$LN5@MLS_SkillM@4:
  0cd4f	8b 45 d8	 mov	 eax, DWORD PTR _i$236681[ebp]
  0cd52	83 c0 01	 add	 eax, 1
  0cd55	89 45 d8	 mov	 DWORD PTR _i$236681[ebp], eax
$LN6@MLS_SkillM@4:
  0cd58	8b 45 d8	 mov	 eax, DWORD PTR _i$236681[ebp]
  0cd5b	3b 45 dc	 cmp	 eax, DWORD PTR _nMaxBarrageCount$236667[ebp]
  0cd5e	7d 5b		 jge	 SHORT $LN20@MLS_SkillM@4

; 5891 : 					{
; 5892 : 						if( (i%(nMaxBarrageCount-1)) == TRUE  )

  0cd60	8b 4d dc	 mov	 ecx, DWORD PTR _nMaxBarrageCount$236667[ebp]
  0cd63	83 e9 01	 sub	 ecx, 1
  0cd66	8b 45 d8	 mov	 eax, DWORD PTR _i$236681[ebp]
  0cd69	99		 cdq
  0cd6a	f7 f9		 idiv	 ecx
  0cd6c	83 fa 01	 cmp	 edx, 1
  0cd6f	75 25		 jne	 SHORT $LN3@MLS_SkillM@4

; 5893 : 						{
; 5894 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,TRUE,0,0,i,0);

  0cd71	6a 00		 push	 0
  0cd73	0f b6 45 d8	 movzx	 eax, BYTE PTR _i$236681[ebp]
  0cd77	50		 push	 eax
  0cd78	6a 00		 push	 0
  0cd7a	6a 00		 push	 0
  0cd7c	6a 01		 push	 1
  0cd7e	6a 01		 push	 1
  0cd80	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0cd83	51		 push	 ecx
  0cd84	8b 55 e4	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  0cd87	52		 push	 edx
  0cd88	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0cd8b	50		 push	 eax
  0cd8c	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0cd91	83 c4 24	 add	 esp, 36			; 00000024H

; 5895 : 						}
; 5896 : 						else

  0cd94	eb 23		 jmp	 SHORT $LN2@MLS_SkillM@4
$LN3@MLS_SkillM@4:

; 5897 : 						{
; 5898 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,FALSE,TRUE,0,0,i,0);

  0cd96	6a 00		 push	 0
  0cd98	0f b6 45 d8	 movzx	 eax, BYTE PTR _i$236681[ebp]
  0cd9c	50		 push	 eax
  0cd9d	6a 00		 push	 0
  0cd9f	6a 00		 push	 0
  0cda1	6a 01		 push	 1
  0cda3	6a 00		 push	 0
  0cda5	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0cda8	51		 push	 ecx
  0cda9	8b 55 e4	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  0cdac	52		 push	 edx
  0cdad	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0cdb0	50		 push	 eax
  0cdb1	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0cdb6	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_SkillM@4:

; 5899 : 						}
; 5900 : 					}

  0cdb9	eb 94		 jmp	 SHORT $LN5@MLS_SkillM@4
$LN20@MLS_SkillM@4:

; 5901 : 				}
; 5902 : 				break;

  0cdbb	eb 16		 jmp	 SHORT $LN34@MLS_SkillM@4
$LN30@MLS_SkillM@4:

; 5903 : 			}
; 5904 : 		}
; 5905 : 
; 5906 : 		nViewPortObjectCount++;

  0cdbd	8b 45 f0	 mov	 eax, DWORD PTR _nViewPortObjectCount$[ebp]
  0cdc0	83 c0 01	 add	 eax, 1
  0cdc3	89 45 f0	 mov	 DWORD PTR _nViewPortObjectCount$[ebp], eax

; 5907 : 
; 5908 : 		if(nViewPortObjectCount > MAX_VIEWPORT -1)

  0cdc6	83 7d f0 4a	 cmp	 DWORD PTR _nViewPortObjectCount$[ebp], 74 ; 0000004aH
  0cdca	7e 02		 jle	 SHORT $LN1@MLS_SkillM@4

; 5909 : 		{
; 5910 : 			break;

  0cdcc	eb 05		 jmp	 SHORT $LN34@MLS_SkillM@4
$LN1@MLS_SkillM@4:

; 5911 : 		}
; 5912 : 	}

  0cdce	e9 76 fc ff ff	 jmp	 $LN32@MLS_SkillM@4
$LN34@MLS_SkillM@4:

; 5913 : }

  0cdd3	5f		 pop	 edi
  0cdd4	5e		 pop	 esi
  0cdd5	5b		 pop	 ebx
  0cdd6	8b e5		 mov	 esp, ebp
  0cdd8	5d		 pop	 ebp
  0cdd9	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	__real@4014000000000000
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv70 = -112						; size = 4
_i$236725 = -44						; size = 4
_nMaxBarrageCount$236717 = -40				; size = 4
_CallMonIndex$236713 = -36				; size = 4
_fSkillValue$ = -32					; size = 4
_lpTargetObj$ = -28					; size = 4
_EnableAttack$ = -24					; size = 4
_DuelIndex$ = -20					; size = 4
_nViewPortObjectCount$ = -16				; size = 4
_nTargetObjNum$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery
; _this$ = ecx

; 5916 : {

  0cde0	55		 push	 ebp
  0cde1	8b ec		 mov	 ebp, esp
  0cde3	83 ec 70	 sub	 esp, 112		; 00000070H
  0cde6	53		 push	 ebx
  0cde7	56		 push	 esi
  0cde8	57		 push	 edi
  0cde9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5917 : 	LPOBJ lpObj = &gObj[aIndex];

  0cdec	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0cdef	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cdf5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cdfb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 5918 : 	int nTargetObjNum = 0;

  0cdfe	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nTargetObjNum$[ebp], 0

; 5919 : 	int nViewPortObjectCount = 0;

  0ce05	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _nViewPortObjectCount$[ebp], 0

; 5920 : 	int DuelIndex = lpObj->m_iDuelUser;

  0ce0c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ce0f	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0ce15	89 4d ec	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 5921 : 
; 5922 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  0ce18	83 7d 10 00	 cmp	 DWORD PTR _aTargetIndex$[ebp], 0
  0ce1c	7d 09		 jge	 SHORT $LN30@MLS_SkillM@5
  0ce1e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  0ce25	eb 0f		 jmp	 SHORT $LN31@MLS_SkillM@5
$LN30@MLS_SkillM@5:
  0ce27	33 c0		 xor	 eax, eax
  0ce29	81 7d 10 97 3a
	00 00		 cmp	 DWORD PTR _aTargetIndex$[ebp], 14999 ; 00003a97H
  0ce30	0f 9e c0	 setle	 al
  0ce33	89 45 90	 mov	 DWORD PTR tv70[ebp], eax
$LN31@MLS_SkillM@5:
  0ce36	83 7d 90 00	 cmp	 DWORD PTR tv70[ebp], 0
  0ce3a	75 2b		 jne	 SHORT $LN27@MLS_SkillM@5

; 5923 : 	{
; 5924 : 		LogAddTD("[InvalidTargetIndex][MLS_SkillMonkBarrageJustOneTarget] Index :%d , AccountID : %s ",
; 5925 : 			aIndex,gObj[aIndex].AccountID);

  0ce3c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0ce3f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ce45	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ce4b	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  0ce4f	52		 push	 edx
  0ce50	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0ce53	50		 push	 eax
  0ce54	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@
  0ce59	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0ce5f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5926 : 		return;

  0ce62	e9 53 03 00 00	 jmp	 $LN28@MLS_SkillM@5
$LN27@MLS_SkillM@5:

; 5927 : 	}
; 5928 : 
; 5929 : 	int EnableAttack;
; 5930 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0ce67	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0ce6a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ce70	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ce76	89 45 e4	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 5931 : 
; 5932 : 	float fSkillValue = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0ce79	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0ce7c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0ce80	51		 push	 ecx
  0ce81	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0ce84	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0ce87	50		 push	 eax
  0ce88	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0ce8d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0ce92	50		 push	 eax
  0ce93	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ce96	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0ce9b	d9 5d e0	 fstp	 DWORD PTR _fSkillValue$[ebp]
$LN26@MLS_SkillM@5:

; 5933 : 
; 5934 : 	while( TRUE )

  0ce9e	b8 01 00 00 00	 mov	 eax, 1
  0cea3	85 c0		 test	 eax, eax
  0cea5	0f 84 0f 03 00
	00		 je	 $LN25@MLS_SkillM@5

; 5935 : 	{
; 5936 : 		if( lpObj->VpPlayer2[nViewPortObjectCount].state != 0 )

  0ceab	8b 45 f0	 mov	 eax, DWORD PTR _nViewPortObjectCount$[ebp]
  0ceae	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ceb1	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ceb4	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0cebc	85 d2		 test	 edx, edx
  0cebe	0f 84 e0 02 00
	00		 je	 $LN23@MLS_SkillM@5

; 5937 : 		{
; 5938 : 			nTargetObjNum = lpObj->VpPlayer2[nViewPortObjectCount].number;

  0cec4	8b 45 f0	 mov	 eax, DWORD PTR _nViewPortObjectCount$[ebp]
  0cec7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ceca	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0cecd	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0ced5	89 55 f4	 mov	 DWORD PTR _nTargetObjNum$[ebp], edx

; 5939 : 
; 5940 : 			if( nTargetObjNum >= 0 && 
; 5941 : 				nTargetObjNum == aTargetIndex )

  0ced8	83 7d f4 00	 cmp	 DWORD PTR _nTargetObjNum$[ebp], 0
  0cedc	0f 8c c2 02 00
	00		 jl	 $LN23@MLS_SkillM@5
  0cee2	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cee5	3b 45 10	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0cee8	0f 85 b6 02 00
	00		 jne	 $LN23@MLS_SkillM@5

; 5942 : 			{
; 5943 : 				EnableAttack = FALSE;

  0ceee	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 5944 : 
; 5945 : 				if(lpObj->VpPlayer2[nViewPortObjectCount].type == OBJ_USER )

  0cef5	8b 45 f0	 mov	 eax, DWORD PTR _nViewPortObjectCount$[ebp]
  0cef8	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0cefb	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0cefe	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0cf06	83 fa 01	 cmp	 edx, 1
  0cf09	75 0c		 jne	 SHORT $LN22@MLS_SkillM@5

; 5946 : 				{
; 5947 : 					EnableAttack = TRUE;

  0cf0b	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0cf12	e9 db 00 00 00	 jmp	 $LN15@MLS_SkillM@5
$LN22@MLS_SkillM@5:

; 5948 : 				}
; 5949 : 				else if( lpTargetObj->Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon < 0 )

  0cf17	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0cf1a	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0cf1e	83 f9 02	 cmp	 ecx, 2
  0cf21	75 25		 jne	 SHORT $LN20@MLS_SkillM@5
  0cf23	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cf26	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cf2c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cf32	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0cf3a	7d 0c		 jge	 SHORT $LN20@MLS_SkillM@5

; 5950 : 				{
; 5951 : 					EnableAttack = TRUE;

  0cf3c	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0cf43	e9 aa 00 00 00	 jmp	 $LN15@MLS_SkillM@5
$LN20@MLS_SkillM@5:

; 5952 : 				}
; 5953 : 				else if( nTargetObjNum == DuelIndex )

  0cf48	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cf4b	3b 45 ec	 cmp	 eax, DWORD PTR _DuelIndex$[ebp]
  0cf4e	75 0c		 jne	 SHORT $LN18@MLS_SkillM@5

; 5954 : 				{
; 5955 : 					EnableAttack = TRUE;

  0cf50	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1

; 5956 : 				}
; 5957 : 				else

  0cf57	e9 96 00 00 00	 jmp	 $LN15@MLS_SkillM@5
$LN18@MLS_SkillM@5:

; 5958 : 				{
; 5959 : 					int CallMonIndex = gObj[nTargetObjNum].m_Index;

  0cf5c	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cf5f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cf65	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cf6b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0cf6e	89 55 dc	 mov	 DWORD PTR _CallMonIndex$236713[ebp], edx

; 5960 : 
; 5961 : 					if(gObj[nTargetObjNum].Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon >= 0)

  0cf71	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cf74	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cf7a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cf80	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0cf85	83 fa 02	 cmp	 edx, 2
  0cf88	75 40		 jne	 SHORT $LN16@MLS_SkillM@5
  0cf8a	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cf8d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cf93	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cf99	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0cfa1	7c 27		 jl	 SHORT $LN16@MLS_SkillM@5

; 5962 : 					{
; 5963 : 						CallMonIndex = gObj[gObj[nTargetObjNum].m_RecallMon].m_Index;

  0cfa3	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cfa6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cfac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cfb2	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0cfb9	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0cfbf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cfc4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0cfc7	89 4d dc	 mov	 DWORD PTR _CallMonIndex$236713[ebp], ecx
$LN16@MLS_SkillM@5:

; 5964 : 					}
; 5965 : 
; 5966 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0cfca	8b 45 dc	 mov	 eax, DWORD PTR _CallMonIndex$236713[ebp]
  0cfcd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0cfd3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0cfd9	50		 push	 eax
  0cfda	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0cfdd	51		 push	 ecx
  0cfde	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0cfe3	83 c4 08	 add	 esp, 8
  0cfe6	83 f8 01	 cmp	 eax, 1
  0cfe9	75 07		 jne	 SHORT $LN15@MLS_SkillM@5

; 5967 : 					{
; 5968 : 						EnableAttack = TRUE;

  0cfeb	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN15@MLS_SkillM@5:

; 5969 : 					}
; 5970 : 				}
; 5971 : 
; 5972 : 				if( EnableAttack != FALSE && 
; 5973 : 					MLS_CalDistance(gObj[aTargetIndex].X,gObj[aTargetIndex].Y,gObj[nTargetObjNum].X,gObj[nTargetObjNum].Y) < 4 )

  0cff2	83 7d e8 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0cff6	0f 84 a6 01 00
	00		 je	 $LN4@MLS_SkillM@5
  0cffc	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0cfff	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d00b	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0d013	52		 push	 edx
  0d014	8b 45 f4	 mov	 eax, DWORD PTR _nTargetObjNum$[ebp]
  0d017	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d01d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d023	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0d02b	52		 push	 edx
  0d02c	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0d02f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d03b	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0d043	52		 push	 edx
  0d044	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0d047	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d04d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d053	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0d05b	52		 push	 edx
  0d05c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0d05f	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  0d064	83 f8 04	 cmp	 eax, 4
  0d067	0f 8d 35 01 00
	00		 jge	 $LN4@MLS_SkillM@5

; 5974 : 				{
; 5975 : 					int nMaxBarrageCount = 0;

  0d06d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236717[ebp], 0

; 5976 : 
; 5977 : 					if( lpMagic->m_Skill == 554 )

  0d074	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d077	81 78 08 2a 02
	00 00		 cmp	 DWORD PTR [eax+8], 554	; 0000022aH
  0d07e	75 09		 jne	 SHORT $LN13@MLS_SkillM@5

; 5978 : 					{
; 5979 : 						nMaxBarrageCount = 5;

  0d080	c7 45 d8 05 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236717[ebp], 5
  0d087	eb 1c		 jmp	 SHORT $LN10@MLS_SkillM@5
$LN13@MLS_SkillM@5:

; 5980 : 					}
; 5981 : 					else if( lpMagic->m_Skill == 555 )

  0d089	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d08c	81 78 08 2b 02
	00 00		 cmp	 DWORD PTR [eax+8], 555	; 0000022bH
  0d093	75 09		 jne	 SHORT $LN11@MLS_SkillM@5

; 5982 : 					{
; 5983 : 						nMaxBarrageCount = 3;

  0d095	c7 45 d8 03 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236717[ebp], 3

; 5984 : 					}
; 5985 : 					else

  0d09c	eb 07		 jmp	 SHORT $LN10@MLS_SkillM@5
$LN11@MLS_SkillM@5:

; 5986 : 					{
; 5987 : 						nMaxBarrageCount = 0;

  0d09e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$236717[ebp], 0
$LN10@MLS_SkillM@5:

; 5988 : 					}
; 5989 : 
; 5990 : 					if( lpMagic->m_Skill == 554 && 
; 5991 : 						rand()%100 < 10 )

  0d0a5	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d0a8	81 78 08 2a 02
	00 00		 cmp	 DWORD PTR [eax+8], 554	; 0000022aH
  0d0af	75 39		 jne	 SHORT $LN9@MLS_SkillM@5
  0d0b1	e8 00 00 00 00	 call	 _rand
  0d0b6	99		 cdq
  0d0b7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0d0bc	f7 f9		 idiv	 ecx
  0d0be	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0d0c1	7d 27		 jge	 SHORT $LN9@MLS_SkillM@5

; 5992 : 					{
; 5993 : 						gObjApplyBuffEffectDuration(lpTargetObj,76,29,5+fSkillValue,0,0,10);

  0d0c3	6a 0a		 push	 10			; 0000000aH
  0d0c5	6a 00		 push	 0
  0d0c7	6a 00		 push	 0
  0d0c9	d9 45 e0	 fld	 DWORD PTR _fSkillValue$[ebp]
  0d0cc	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4014000000000000
  0d0d2	e8 00 00 00 00	 call	 __ftol2_sse
  0d0d7	50		 push	 eax
  0d0d8	6a 1d		 push	 29			; 0000001dH
  0d0da	6a 4c		 push	 76			; 0000004cH
  0d0dc	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0d0df	50		 push	 eax
  0d0e0	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0d0e5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 5994 : 					}
; 5995 : 					else if( lpMagic->m_Skill == 555 &&

  0d0e8	eb 43		 jmp	 SHORT $LN7@MLS_SkillM@5
$LN9@MLS_SkillM@5:

; 5996 : 						rand()%100 < 10 )

  0d0ea	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d0ed	81 78 08 2b 02
	00 00		 cmp	 DWORD PTR [eax+8], 555	; 0000022bH
  0d0f4	75 37		 jne	 SHORT $LN7@MLS_SkillM@5
  0d0f6	e8 00 00 00 00	 call	 _rand
  0d0fb	99		 cdq
  0d0fc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0d101	f7 f9		 idiv	 ecx
  0d103	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0d106	7d 25		 jge	 SHORT $LN7@MLS_SkillM@5

; 5997 : 					{
; 5998 : 						gObjApplyBuffEffectDuration(lpTargetObj,58,23,10+fSkillValue,0,0,10);

  0d108	6a 0a		 push	 10			; 0000000aH
  0d10a	6a 00		 push	 0
  0d10c	6a 00		 push	 0
  0d10e	d9 45 e0	 fld	 DWORD PTR _fSkillValue$[ebp]
  0d111	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4024000000000000
  0d117	e8 00 00 00 00	 call	 __ftol2_sse
  0d11c	50		 push	 eax
  0d11d	6a 17		 push	 23			; 00000017H
  0d11f	6a 3a		 push	 58			; 0000003aH
  0d121	8b 45 e4	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0d124	50		 push	 eax
  0d125	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0d12a	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN7@MLS_SkillM@5:

; 5999 : 					}
; 6000 : 
; 6001 : 					for(int i = 1; i < nMaxBarrageCount; i++)

  0d12d	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _i$236725[ebp], 1
  0d134	eb 09		 jmp	 SHORT $LN6@MLS_SkillM@5
$LN5@MLS_SkillM@5:
  0d136	8b 45 d4	 mov	 eax, DWORD PTR _i$236725[ebp]
  0d139	83 c0 01	 add	 eax, 1
  0d13c	89 45 d4	 mov	 DWORD PTR _i$236725[ebp], eax
$LN6@MLS_SkillM@5:
  0d13f	8b 45 d4	 mov	 eax, DWORD PTR _i$236725[ebp]
  0d142	3b 45 d8	 cmp	 eax, DWORD PTR _nMaxBarrageCount$236717[ebp]
  0d145	7d 5b		 jge	 SHORT $LN4@MLS_SkillM@5

; 6002 : 					{
; 6003 : 						if( (i%(nMaxBarrageCount-1)) == TRUE  )

  0d147	8b 4d d8	 mov	 ecx, DWORD PTR _nMaxBarrageCount$236717[ebp]
  0d14a	83 e9 01	 sub	 ecx, 1
  0d14d	8b 45 d4	 mov	 eax, DWORD PTR _i$236725[ebp]
  0d150	99		 cdq
  0d151	f7 f9		 idiv	 ecx
  0d153	83 fa 01	 cmp	 edx, 1
  0d156	75 25		 jne	 SHORT $LN3@MLS_SkillM@5

; 6004 : 						{
; 6005 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,TRUE,0,0,i,0);

  0d158	6a 00		 push	 0
  0d15a	0f b6 45 d4	 movzx	 eax, BYTE PTR _i$236725[ebp]
  0d15e	50		 push	 eax
  0d15f	6a 00		 push	 0
  0d161	6a 00		 push	 0
  0d163	6a 01		 push	 1
  0d165	6a 01		 push	 1
  0d167	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0d16a	51		 push	 ecx
  0d16b	8b 55 e4	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  0d16e	52		 push	 edx
  0d16f	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d172	50		 push	 eax
  0d173	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0d178	83 c4 24	 add	 esp, 36			; 00000024H

; 6006 : 						}
; 6007 : 						else

  0d17b	eb 23		 jmp	 SHORT $LN2@MLS_SkillM@5
$LN3@MLS_SkillM@5:

; 6008 : 						{
; 6009 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,FALSE,TRUE,0,0,i,0);

  0d17d	6a 00		 push	 0
  0d17f	0f b6 45 d4	 movzx	 eax, BYTE PTR _i$236725[ebp]
  0d183	50		 push	 eax
  0d184	6a 00		 push	 0
  0d186	6a 00		 push	 0
  0d188	6a 01		 push	 1
  0d18a	6a 00		 push	 0
  0d18c	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0d18f	51		 push	 ecx
  0d190	8b 55 e4	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  0d193	52		 push	 edx
  0d194	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d197	50		 push	 eax
  0d198	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0d19d	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_SkillM@5:

; 6010 : 						}
; 6011 : 					}

  0d1a0	eb 94		 jmp	 SHORT $LN5@MLS_SkillM@5
$LN4@MLS_SkillM@5:

; 6012 : 				}
; 6013 : 				break;

  0d1a2	eb 16		 jmp	 SHORT $LN25@MLS_SkillM@5
$LN23@MLS_SkillM@5:

; 6014 : 			}
; 6015 : 		}
; 6016 : 
; 6017 : 		nViewPortObjectCount++;

  0d1a4	8b 45 f0	 mov	 eax, DWORD PTR _nViewPortObjectCount$[ebp]
  0d1a7	83 c0 01	 add	 eax, 1
  0d1aa	89 45 f0	 mov	 DWORD PTR _nViewPortObjectCount$[ebp], eax

; 6018 : 
; 6019 : 		if(nViewPortObjectCount > MAX_VIEWPORT -1)

  0d1ad	83 7d f0 4a	 cmp	 DWORD PTR _nViewPortObjectCount$[ebp], 74 ; 0000004aH
  0d1b1	7e 02		 jle	 SHORT $LN1@MLS_SkillM@5

; 6020 : 		{
; 6021 : 			break;

  0d1b3	eb 05		 jmp	 SHORT $LN25@MLS_SkillM@5
$LN1@MLS_SkillM@5:

; 6022 : 		}
; 6023 : 	}

  0d1b5	e9 e4 fc ff ff	 jmp	 $LN26@MLS_SkillM@5
$LN25@MLS_SkillM@5:
$LN28@MLS_SkillM@5:

; 6024 : }

  0d1ba	5f		 pop	 edi
  0d1bb	5e		 pop	 esi
  0d1bc	5b		 pop	 ebx
  0d1bd	8b e5		 mov	 esp, ebp
  0d1bf	5d		 pop	 ebp
  0d1c0	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv355 = -168						; size = 4
tv352 = -164						; size = 4
_n$236771 = -96						; size = 4
_fSkillValue$ = -92					; size = 4
_Time$ = -88						; size = 4
_n$236749 = -84						; size = 4
_lpPartyObj$ = -80					; size = 4
_nEffectValue$ = -76					; size = 4
_ApplyPartyIndex$ = -72					; size = 40
_dis$ = -32						; size = 4
_partycount$ = -28					; size = 4
_partynum$ = -24					; size = 4
_number$ = -20						; size = 4
_lpObj$ = -16						; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty
; _this$ = ecx

; 6027 : {

  0d1d0	55		 push	 ebp
  0d1d1	8b ec		 mov	 ebp, esp
  0d1d3	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  0d1d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0d1de	33 c5		 xor	 eax, ebp
  0d1e0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0d1e3	53		 push	 ebx
  0d1e4	56		 push	 esi
  0d1e5	57		 push	 edi
  0d1e6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 6028 : 	int skillSuccess = TRUE;

  0d1e9	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 6029 : 	LPOBJ lpObj = &gObj[aIndex];

  0d1f0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0d1f3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d1f9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d1ff	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6030 : 	int number;
; 6031 : 
; 6032 : 	if( lpObj->Type != OBJ_USER && lpObj->m_RecallMon == -1 )

  0d202	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d205	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0d209	83 f9 01	 cmp	 ecx, 1
  0d20c	74 13		 je	 SHORT $LN29@MLS_SkillM@6
  0d20e	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d211	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  0d218	75 07		 jne	 SHORT $LN29@MLS_SkillM@6

; 6033 : 		return FALSE;

  0d21a	33 c0		 xor	 eax, eax
  0d21c	e9 47 04 00 00	 jmp	 $LN30@MLS_SkillM@6
$LN29@MLS_SkillM@6:

; 6034 : 
; 6035 : 	if( lpObj->Class != CLASS_MONK )

  0d221	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d224	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0d22b	83 f9 06	 cmp	 ecx, 6
  0d22e	74 07		 je	 SHORT $LN28@MLS_SkillM@6

; 6036 : 		return FALSE;

  0d230	33 c0		 xor	 eax, eax
  0d232	e9 31 04 00 00	 jmp	 $LN30@MLS_SkillM@6
$LN28@MLS_SkillM@6:

; 6037 : 
; 6038 : 	int partynum = 0;

  0d237	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _partynum$[ebp], 0

; 6039 : 	int partycount;
; 6040 : 	int dis;
; 6041 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 6042 : 	int nEffectValue;
; 6043 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  0d23e	6a 28		 push	 40			; 00000028H
  0d240	6a ff		 push	 -1
  0d242	8d 45 b8	 lea	 eax, DWORD PTR _ApplyPartyIndex$[ebp]
  0d245	50		 push	 eax
  0d246	e8 00 00 00 00	 call	 _memset
  0d24b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6044 : 	LPOBJ lpPartyObj;
; 6045 : 
; 6046 : 	partynum = lpObj->PartyNumber;

  0d24e	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d251	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  0d257	89 4d e8	 mov	 DWORD PTR _partynum$[ebp], ecx

; 6047 : 
; 6048 : 	if( partynum != -1 )

  0d25a	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  0d25e	0f 84 a0 00 00
	00		 je	 $LN24@MLS_SkillM@6

; 6049 : 	{
; 6050 : 		partycount = gParty.m_PartyS[partynum].Count;

  0d264	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  0d267	6b c0 6c	 imul	 eax, 108		; 0000006cH
  0d26a	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  0d270	89 4d e4	 mov	 DWORD PTR _partycount$[ebp], ecx

; 6051 : 
; 6052 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0d273	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _n$236749[ebp], 0
  0d27a	eb 09		 jmp	 SHORT $LN26@MLS_SkillM@6
$LN25@MLS_SkillM@6:
  0d27c	8b 45 ac	 mov	 eax, DWORD PTR _n$236749[ebp]
  0d27f	83 c0 01	 add	 eax, 1
  0d282	89 45 ac	 mov	 DWORD PTR _n$236749[ebp], eax
$LN26@MLS_SkillM@6:
  0d285	83 7d ac 0a	 cmp	 DWORD PTR _n$236749[ebp], 10 ; 0000000aH
  0d289	7d 79		 jge	 SHORT $LN24@MLS_SkillM@6

; 6053 : 		{
; 6054 : 			number = gParty.m_PartyS[partynum].Number[n];

  0d28b	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  0d28e	6b c0 6c	 imul	 eax, 108		; 0000006cH
  0d291	8b 4d ac	 mov	 ecx, DWORD PTR _n$236749[ebp]
  0d294	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  0d29b	89 55 ec	 mov	 DWORD PTR _number$[ebp], edx

; 6055 : 
; 6056 : 			if( number >= 0 )

  0d29e	83 7d ec 00	 cmp	 DWORD PTR _number$[ebp], 0
  0d2a2	7c 5b		 jl	 SHORT $LN21@MLS_SkillM@6

; 6057 : 			{
; 6058 : 				lpPartyObj = &gObj[number];

  0d2a4	8b 45 ec	 mov	 eax, DWORD PTR _number$[ebp]
  0d2a7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d2ad	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d2b3	89 45 b0	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 6059 : 
; 6060 : 
; 6061 : 				if( lpPartyObj->MapNumber == lpObj->MapNumber )

  0d2b6	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  0d2b9	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0d2c0	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d2c3	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0d2ca	3b c8		 cmp	 ecx, eax
  0d2cc	75 31		 jne	 SHORT $LN21@MLS_SkillM@6

; 6062 : 				{
; 6063 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  0d2ce	8b 45 ec	 mov	 eax, DWORD PTR _number$[ebp]
  0d2d1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d2d7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d2dd	50		 push	 eax
  0d2de	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0d2e1	51		 push	 ecx
  0d2e2	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0d2e7	83 c4 08	 add	 esp, 8
  0d2ea	89 45 e0	 mov	 DWORD PTR _dis$[ebp], eax

; 6064 : 					if( dis < 4 )

  0d2ed	83 7d e0 04	 cmp	 DWORD PTR _dis$[ebp], 4
  0d2f1	7d 0c		 jge	 SHORT $LN21@MLS_SkillM@6

; 6065 : 					{
; 6066 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  0d2f3	8b 45 ac	 mov	 eax, DWORD PTR _n$236749[ebp]
  0d2f6	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  0d2f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  0d2fb	89 54 85 b8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], edx
$LN21@MLS_SkillM@6:

; 6067 : 					}
; 6068 : 				}
; 6069 : 			}
; 6070 : 		}

  0d2ff	e9 78 ff ff ff	 jmp	 $LN25@MLS_SkillM@6
$LN24@MLS_SkillM@6:

; 6071 : 	}
; 6072 : 
; 6073 : 	int Time = 0;

  0d304	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _Time$[ebp], 0

; 6074 : 
; 6075 : 	if( lpMagic->m_Skill == 573 )

  0d30b	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d30e	81 78 08 3d 02
	00 00		 cmp	 DWORD PTR [eax+8], 573	; 0000023dH
  0d315	0f 85 ab 00 00
	00		 jne	 $LN20@MLS_SkillM@6

; 6076 : 	{
; 6077 : 		nEffectValue = g_SkillAdditionInfo.m_IncreaseHealthEffectStart + (lpObj->Energy+lpObj->AddEnergy-g_SkillAdditionInfo.m_IncreaseHealthEffectSub)/g_SkillAdditionInfo.m_IncreaseHealthEffectDiv;

  0d31b	0f b7 05 e8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3304
  0d322	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv352[ebp], eax
  0d328	db 85 5c ff ff
	ff		 fild	 DWORD PTR tv352[ebp]
  0d32e	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0d331	0f b7 91 fa 00
	00 00		 movzx	 edx, WORD PTR [ecx+250]
  0d338	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d33b	0f bf 88 26 01
	00 00		 movsx	 ecx, WORD PTR [eax+294]
  0d342	03 d1		 add	 edx, ecx
  0d344	0f b7 05 ea 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3306
  0d34b	2b d0		 sub	 edx, eax
  0d34d	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv355[ebp], edx
  0d353	db 85 58 ff ff
	ff		 fild	 DWORD PTR tv355[ebp]
  0d359	d8 35 ec 0c 00
	00		 fdiv	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3308
  0d35f	de c1		 faddp	 ST(1), ST(0)
  0d361	e8 00 00 00 00	 call	 __ftol2_sse
  0d366	89 45 b4	 mov	 DWORD PTR _nEffectValue$[ebp], eax

; 6078 : 
; 6079 : 		if( g_SkillAdditionInfo.m_IncreaseHealthEffectMax > 0 && nEffectValue > g_SkillAdditionInfo.m_IncreaseHealthEffectMax )

  0d369	83 3d f0 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3312, 0
  0d370	76 13		 jbe	 SHORT $LN19@MLS_SkillM@6
  0d372	8b 45 b4	 mov	 eax, DWORD PTR _nEffectValue$[ebp]
  0d375	3b 05 f0 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3312
  0d37b	76 08		 jbe	 SHORT $LN19@MLS_SkillM@6

; 6080 : 		{
; 6081 : 			nEffectValue = g_SkillAdditionInfo.m_IncreaseHealthEffectMax;

  0d37d	a1 f0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3312
  0d382	89 45 b4	 mov	 DWORD PTR _nEffectValue$[ebp], eax
$LN19@MLS_SkillM@6:

; 6082 : 		}
; 6083 : 
; 6084 : 		Time = g_SkillAdditionInfo.m_IncreaseHealthTimeStart+lpObj->Energy/g_SkillAdditionInfo.m_IncreaseHealthTimeDiv;

  0d385	0f b7 0d f4 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3316
  0d38c	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d38f	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  0d396	0f b7 35 f6 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3318
  0d39d	99		 cdq
  0d39e	f7 fe		 idiv	 esi
  0d3a0	03 c8		 add	 ecx, eax
  0d3a2	89 4d a8	 mov	 DWORD PTR _Time$[ebp], ecx

; 6085 : 		
; 6086 : 		if( g_SkillAdditionInfo.m_IncreaseHealthTimeMax > 0 && Time > g_SkillAdditionInfo.m_IncreaseHealthTimeMax )

  0d3a5	83 3d f8 0c 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3320, 0
  0d3ac	76 13		 jbe	 SHORT $LN18@MLS_SkillM@6
  0d3ae	8b 45 a8	 mov	 eax, DWORD PTR _Time$[ebp]
  0d3b1	3b 05 f8 0c 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3320
  0d3b7	76 08		 jbe	 SHORT $LN18@MLS_SkillM@6

; 6087 : 		{
; 6088 : 			Time = g_SkillAdditionInfo.m_IncreaseHealthTimeMax;

  0d3b9	a1 f8 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3320
  0d3be	89 45 a8	 mov	 DWORD PTR _Time$[ebp], eax
$LN18@MLS_SkillM@6:

; 6089 : 		}
; 6090 : 	}

  0d3c1	e9 a6 00 00 00	 jmp	 $LN13@MLS_SkillM@6
$LN20@MLS_SkillM@6:

; 6091 : 	else if( lpMagic->m_Skill == 569 )

  0d3c6	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d3c9	81 78 08 39 02
	00 00		 cmp	 DWORD PTR [eax+8], 569	; 00000239H
  0d3d0	0f 85 8f 00 00
	00		 jne	 $LN16@MLS_SkillM@6

; 6092 : 	{
; 6093 : 		nEffectValue = g_SkillAdditionInfo.m_IncreaseBlockEffectStart + (lpObj->Energy+lpObj->AddEnergy-g_SkillAdditionInfo.m_IncreaseBlockEffectSub)/g_SkillAdditionInfo.m_IncreaseBlockEffectDiv;

  0d3d6	0f b7 0d fc 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3324
  0d3dd	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d3e0	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  0d3e7	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d3ea	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  0d3f1	03 c2		 add	 eax, edx
  0d3f3	0f b7 15 fe 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3326
  0d3fa	2b c2		 sub	 eax, edx
  0d3fc	0f b7 35 00 0d
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3328
  0d403	99		 cdq
  0d404	f7 fe		 idiv	 esi
  0d406	03 c8		 add	 ecx, eax
  0d408	89 4d b4	 mov	 DWORD PTR _nEffectValue$[ebp], ecx

; 6094 : 
; 6095 : 		if( g_SkillAdditionInfo.m_IncreaseBlockEffectMax > 0 && nEffectValue > g_SkillAdditionInfo.m_IncreaseBlockEffectMax )

  0d40b	83 3d 04 0d 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3332, 0
  0d412	76 13		 jbe	 SHORT $LN15@MLS_SkillM@6
  0d414	8b 45 b4	 mov	 eax, DWORD PTR _nEffectValue$[ebp]
  0d417	3b 05 04 0d 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3332
  0d41d	76 08		 jbe	 SHORT $LN15@MLS_SkillM@6

; 6096 : 		{
; 6097 : 			nEffectValue = g_SkillAdditionInfo.m_IncreaseBlockEffectMax;

  0d41f	a1 04 0d 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3332
  0d424	89 45 b4	 mov	 DWORD PTR _nEffectValue$[ebp], eax
$LN15@MLS_SkillM@6:

; 6098 : 		}
; 6099 : 
; 6100 : 		Time = g_SkillAdditionInfo.m_IncreaseBlockTimeStart+lpObj->Energy/g_SkillAdditionInfo.m_IncreaseBlockTimeDiv;

  0d427	0f b7 0d 08 0d
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3336
  0d42e	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d431	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  0d438	0f b7 35 0a 0d
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3338
  0d43f	99		 cdq
  0d440	f7 fe		 idiv	 esi
  0d442	03 c8		 add	 ecx, eax
  0d444	89 4d a8	 mov	 DWORD PTR _Time$[ebp], ecx

; 6101 : 		
; 6102 : 		if( g_SkillAdditionInfo.m_IncreaseBlockTimeMax > 0 && Time > g_SkillAdditionInfo.m_IncreaseBlockTimeMax )

  0d447	83 3d 0c 0d 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3340, 0
  0d44e	76 13		 jbe	 SHORT $LN14@MLS_SkillM@6
  0d450	8b 45 a8	 mov	 eax, DWORD PTR _Time$[ebp]
  0d453	3b 05 0c 0d 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3340
  0d459	76 08		 jbe	 SHORT $LN14@MLS_SkillM@6

; 6103 : 		{
; 6104 : 			Time = g_SkillAdditionInfo.m_IncreaseBlockTimeMax;

  0d45b	a1 0c 0d 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3340
  0d460	89 45 a8	 mov	 DWORD PTR _Time$[ebp], eax
$LN14@MLS_SkillM@6:

; 6105 : 		}
; 6106 : 	}
; 6107 : 	else

  0d463	eb 07		 jmp	 SHORT $LN13@MLS_SkillM@6
$LN16@MLS_SkillM@6:

; 6108 : 	{
; 6109 : 		return FALSE;

  0d465	33 c0		 xor	 eax, eax
  0d467	e9 fc 01 00 00	 jmp	 $LN30@MLS_SkillM@6
$LN13@MLS_SkillM@6:

; 6110 : 	}
; 6111 : 
; 6112 : 	float fSkillValue = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0d46c	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d46f	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0d473	51		 push	 ecx
  0d474	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0d477	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0d47a	50		 push	 eax
  0d47b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0d480	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0d485	50		 push	 eax
  0d486	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0d489	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0d48e	d9 5d a4	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 6113 : 
; 6114 : 	if( partynum == -1 )

  0d491	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  0d495	0f 85 c4 00 00
	00		 jne	 $LN12@MLS_SkillM@6

; 6115 : 	{
; 6116 : 
; 6117 : 		if( lpMagic->m_Skill == 573 )

  0d49b	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d49e	81 78 08 3d 02
	00 00		 cmp	 DWORD PTR [eax+8], 573	; 0000023dH
  0d4a5	75 53		 jne	 SHORT $LN11@MLS_SkillM@6

; 6118 : 		{
; 6119 : 			gObjApplyBuffEffectDuration(lpObj,155,ADD_OPTION_VITALITY_MONK,nEffectValue+fSkillValue,0,0,Time);

  0d4a7	8b 45 a8	 mov	 eax, DWORD PTR _Time$[ebp]
  0d4aa	50		 push	 eax
  0d4ab	6a 00		 push	 0
  0d4ad	6a 00		 push	 0
  0d4af	db 45 b4	 fild	 DWORD PTR _nEffectValue$[ebp]
  0d4b2	d8 45 a4	 fadd	 DWORD PTR _fSkillValue$[ebp]
  0d4b5	e8 00 00 00 00	 call	 __ftol2_sse
  0d4ba	50		 push	 eax
  0d4bb	6a 0b		 push	 11			; 0000000bH
  0d4bd	68 9b 00 00 00	 push	 155			; 0000009bH
  0d4c2	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0d4c5	51		 push	 ecx
  0d4c6	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0d4cb	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6120 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0d4ce	6a 01		 push	 1
  0d4d0	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d4d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  0d4d5	51		 push	 ecx
  0d4d6	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0d4d9	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0d4dd	50		 push	 eax
  0d4de	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0d4e1	51		 push	 ecx
  0d4e2	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0d4e7	83 c4 10	 add	 esp, 16			; 00000010H

; 6121 : 			gObjCalCharacter(lpObj->m_Index);

  0d4ea	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d4ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  0d4ef	51		 push	 ecx
  0d4f0	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  0d4f5	83 c4 04	 add	 esp, 4
  0d4f8	eb 60		 jmp	 SHORT $LN9@MLS_SkillM@6
$LN11@MLS_SkillM@6:

; 6122 : 		}
; 6123 : 		else if( lpMagic->m_Skill == 569 )

  0d4fa	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d4fd	81 78 08 39 02
	00 00		 cmp	 DWORD PTR [eax+8], 569	; 00000239H
  0d504	75 54		 jne	 SHORT $LN9@MLS_SkillM@6

; 6124 : 		{
; 6125 : 			gObjApplyBuffEffectDuration(lpObj,153,ADD_OPTION_SUCCESSFULBLOCKING,nEffectValue+lpObj->m_SuccessfulBlocking*fSkillValue/100.0f,0,0,Time);

  0d506	8b 45 a8	 mov	 eax, DWORD PTR _Time$[ebp]
  0d509	50		 push	 eax
  0d50a	6a 00		 push	 0
  0d50c	6a 00		 push	 0
  0d50e	db 45 b4	 fild	 DWORD PTR _nEffectValue$[ebp]
  0d511	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0d514	db 81 9c 04 00
	00		 fild	 DWORD PTR [ecx+1180]
  0d51a	d8 4d a4	 fmul	 DWORD PTR _fSkillValue$[ebp]
  0d51d	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0d523	de c1		 faddp	 ST(1), ST(0)
  0d525	e8 00 00 00 00	 call	 __ftol2_sse
  0d52a	50		 push	 eax
  0d52b	6a 4a		 push	 74			; 0000004aH
  0d52d	68 99 00 00 00	 push	 153			; 00000099H
  0d532	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d535	52		 push	 edx
  0d536	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0d53b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6126 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0d53e	6a 01		 push	 1
  0d540	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d543	8b 08		 mov	 ecx, DWORD PTR [eax]
  0d545	51		 push	 ecx
  0d546	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0d549	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0d54d	50		 push	 eax
  0d54e	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0d551	51		 push	 ecx
  0d552	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0d557	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@MLS_SkillM@6:

; 6127 : 		}
; 6128 : 	}
; 6129 : 	else

  0d55a	e9 04 01 00 00	 jmp	 $LN5@MLS_SkillM@6
$LN12@MLS_SkillM@6:

; 6130 : 	{
; 6131 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0d55f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _n$236771[ebp], 0
  0d566	eb 09		 jmp	 SHORT $LN7@MLS_SkillM@6
$LN6@MLS_SkillM@6:
  0d568	8b 45 a0	 mov	 eax, DWORD PTR _n$236771[ebp]
  0d56b	83 c0 01	 add	 eax, 1
  0d56e	89 45 a0	 mov	 DWORD PTR _n$236771[ebp], eax
$LN7@MLS_SkillM@6:
  0d571	83 7d a0 0a	 cmp	 DWORD PTR _n$236771[ebp], 10 ; 0000000aH
  0d575	0f 8d e8 00 00
	00		 jge	 $LN5@MLS_SkillM@6

; 6132 : 		{
; 6133 : 			if( ApplyPartyIndex[n] != -1 )

  0d57b	8b 45 a0	 mov	 eax, DWORD PTR _n$236771[ebp]
  0d57e	83 7c 85 b8 ff	 cmp	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], -1
  0d583	0f 84 d5 00 00
	00		 je	 $LN1@MLS_SkillM@6

; 6134 : 			{
; 6135 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  0d589	8b 45 a0	 mov	 eax, DWORD PTR _n$236771[ebp]
  0d58c	8b 4c 85 b8	 mov	 ecx, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  0d590	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0d596	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d59c	89 4d b0	 mov	 DWORD PTR _lpPartyObj$[ebp], ecx

; 6136 : 
; 6137 : 				if( lpMagic->m_Skill == 573 )

  0d59f	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d5a2	81 78 08 3d 02
	00 00		 cmp	 DWORD PTR [eax+8], 573	; 0000023dH
  0d5a9	75 53		 jne	 SHORT $LN3@MLS_SkillM@6

; 6138 : 				{
; 6139 : 					gObjApplyBuffEffectDuration(lpPartyObj,155,ADD_OPTION_VITALITY_MONK,nEffectValue+fSkillValue,0,0,Time);

  0d5ab	8b 45 a8	 mov	 eax, DWORD PTR _Time$[ebp]
  0d5ae	50		 push	 eax
  0d5af	6a 00		 push	 0
  0d5b1	6a 00		 push	 0
  0d5b3	db 45 b4	 fild	 DWORD PTR _nEffectValue$[ebp]
  0d5b6	d8 45 a4	 fadd	 DWORD PTR _fSkillValue$[ebp]
  0d5b9	e8 00 00 00 00	 call	 __ftol2_sse
  0d5be	50		 push	 eax
  0d5bf	6a 0b		 push	 11			; 0000000bH
  0d5c1	68 9b 00 00 00	 push	 155			; 0000009bH
  0d5c6	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  0d5c9	51		 push	 ecx
  0d5ca	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0d5cf	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6140 : 					GCMagicAttackNumberSend(lpPartyObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0d5d2	6a 01		 push	 1
  0d5d4	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  0d5d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  0d5d9	51		 push	 ecx
  0d5da	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0d5dd	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0d5e1	50		 push	 eax
  0d5e2	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  0d5e5	51		 push	 ecx
  0d5e6	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0d5eb	83 c4 10	 add	 esp, 16			; 00000010H

; 6141 : 					gObjCalCharacter(lpPartyObj->m_Index);

  0d5ee	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  0d5f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  0d5f3	51		 push	 ecx
  0d5f4	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  0d5f9	83 c4 04	 add	 esp, 4
  0d5fc	eb 60		 jmp	 SHORT $LN1@MLS_SkillM@6
$LN3@MLS_SkillM@6:

; 6142 : 				}
; 6143 : 				else if( lpMagic->m_Skill == 569 )

  0d5fe	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d601	81 78 08 39 02
	00 00		 cmp	 DWORD PTR [eax+8], 569	; 00000239H
  0d608	75 54		 jne	 SHORT $LN1@MLS_SkillM@6

; 6144 : 				{
; 6145 : 					gObjApplyBuffEffectDuration(lpPartyObj,153,ADD_OPTION_SUCCESSFULBLOCKING,nEffectValue+lpPartyObj->m_SuccessfulBlocking*fSkillValue/100.0f,0,0,Time);

  0d60a	8b 45 a8	 mov	 eax, DWORD PTR _Time$[ebp]
  0d60d	50		 push	 eax
  0d60e	6a 00		 push	 0
  0d610	6a 00		 push	 0
  0d612	db 45 b4	 fild	 DWORD PTR _nEffectValue$[ebp]
  0d615	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  0d618	db 81 9c 04 00
	00		 fild	 DWORD PTR [ecx+1180]
  0d61e	d8 4d a4	 fmul	 DWORD PTR _fSkillValue$[ebp]
  0d621	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0d627	de c1		 faddp	 ST(1), ST(0)
  0d629	e8 00 00 00 00	 call	 __ftol2_sse
  0d62e	50		 push	 eax
  0d62f	6a 4a		 push	 74			; 0000004aH
  0d631	68 99 00 00 00	 push	 153			; 00000099H
  0d636	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  0d639	52		 push	 edx
  0d63a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0d63f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6146 : 					GCMagicAttackNumberSend(lpPartyObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0d642	6a 01		 push	 1
  0d644	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  0d647	8b 08		 mov	 ecx, DWORD PTR [eax]
  0d649	51		 push	 ecx
  0d64a	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0d64d	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0d651	50		 push	 eax
  0d652	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  0d655	51		 push	 ecx
  0d656	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0d65b	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillM@6:

; 6147 : 				}
; 6148 : 			}
; 6149 : 		}

  0d65e	e9 05 ff ff ff	 jmp	 $LN6@MLS_SkillM@6
$LN5@MLS_SkillM@6:

; 6150 : 	}
; 6151 : 	return TRUE;

  0d663	b8 01 00 00 00	 mov	 eax, 1
$LN30@MLS_SkillM@6:

; 6152 : }

  0d668	5f		 pop	 edi
  0d669	5e		 pop	 esi
  0d66a	5b		 pop	 ebx
  0d66b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0d66e	33 cd		 xor	 ecx, ebp
  0d670	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0d675	8b e5		 mov	 esp, ebp
  0d677	5d		 pop	 ebp
  0d678	c2 08 00	 ret	 8
?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$236813 = -100					; size = 4
_fSkillValue2$ = -96					; size = 4
_fSkillValue$ = -92					; size = 4
_Time$ = -88						; size = 4
_n$236796 = -84						; size = 4
_lpPartyObj$ = -80					; size = 4
_nEffectValue$ = -76					; size = 4
_ApplyPartyIndex$ = -72					; size = 40
_dis$ = -32						; size = 4
_partycount$ = -28					; size = 4
_partynum$ = -24					; size = 4
_number$ = -20						; size = 4
_lpObj$ = -16						; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery
; _this$ = ecx

; 6155 : {

  0d680	55		 push	 ebp
  0d681	8b ec		 mov	 ebp, esp
  0d683	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  0d689	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0d68e	33 c5		 xor	 eax, ebp
  0d690	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0d693	53		 push	 ebx
  0d694	56		 push	 esi
  0d695	57		 push	 edi
  0d696	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 6156 : 	int skillSuccess = TRUE;

  0d699	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 6157 : 	LPOBJ lpObj = &gObj[aIndex];

  0d6a0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0d6a3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d6a9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d6af	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6158 : 	int number;
; 6159 : 
; 6160 : 	if( lpObj->Type != OBJ_USER && lpObj->m_RecallMon == -1 )

  0d6b2	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d6b5	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0d6b9	83 f9 01	 cmp	 ecx, 1
  0d6bc	74 13		 je	 SHORT $LN21@MLS_SkillM@7
  0d6be	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d6c1	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  0d6c8	75 07		 jne	 SHORT $LN21@MLS_SkillM@7

; 6161 : 		return FALSE;

  0d6ca	33 c0		 xor	 eax, eax
  0d6cc	e9 ec 02 00 00	 jmp	 $LN22@MLS_SkillM@7
$LN21@MLS_SkillM@7:

; 6162 : 
; 6163 : 	if( lpObj->Class != CLASS_MONK )

  0d6d1	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d6d4	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0d6db	83 f9 06	 cmp	 ecx, 6
  0d6de	74 07		 je	 SHORT $LN20@MLS_SkillM@7

; 6164 : 		return FALSE;

  0d6e0	33 c0		 xor	 eax, eax
  0d6e2	e9 d6 02 00 00	 jmp	 $LN22@MLS_SkillM@7
$LN20@MLS_SkillM@7:

; 6165 : 
; 6166 : 	int partynum = 0;

  0d6e7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _partynum$[ebp], 0

; 6167 : 	int partycount;
; 6168 : 	int dis;
; 6169 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 6170 : 	int nEffectValue;
; 6171 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  0d6ee	6a 28		 push	 40			; 00000028H
  0d6f0	6a ff		 push	 -1
  0d6f2	8d 45 b8	 lea	 eax, DWORD PTR _ApplyPartyIndex$[ebp]
  0d6f5	50		 push	 eax
  0d6f6	e8 00 00 00 00	 call	 _memset
  0d6fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6172 : 	LPOBJ lpPartyObj;
; 6173 : 
; 6174 : 	partynum = lpObj->PartyNumber;

  0d6fe	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d701	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  0d707	89 4d e8	 mov	 DWORD PTR _partynum$[ebp], ecx

; 6175 : 
; 6176 : 	if( partynum != -1 )

  0d70a	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  0d70e	0f 84 a0 00 00
	00		 je	 $LN16@MLS_SkillM@7

; 6177 : 	{
; 6178 : 		partycount = gParty.m_PartyS[partynum].Count;

  0d714	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  0d717	6b c0 6c	 imul	 eax, 108		; 0000006cH
  0d71a	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  0d720	89 4d e4	 mov	 DWORD PTR _partycount$[ebp], ecx

; 6179 : 
; 6180 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0d723	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _n$236796[ebp], 0
  0d72a	eb 09		 jmp	 SHORT $LN18@MLS_SkillM@7
$LN17@MLS_SkillM@7:
  0d72c	8b 45 ac	 mov	 eax, DWORD PTR _n$236796[ebp]
  0d72f	83 c0 01	 add	 eax, 1
  0d732	89 45 ac	 mov	 DWORD PTR _n$236796[ebp], eax
$LN18@MLS_SkillM@7:
  0d735	83 7d ac 0a	 cmp	 DWORD PTR _n$236796[ebp], 10 ; 0000000aH
  0d739	7d 79		 jge	 SHORT $LN16@MLS_SkillM@7

; 6181 : 		{
; 6182 : 			number = gParty.m_PartyS[partynum].Number[n];

  0d73b	8b 45 e8	 mov	 eax, DWORD PTR _partynum$[ebp]
  0d73e	6b c0 6c	 imul	 eax, 108		; 0000006cH
  0d741	8b 4d ac	 mov	 ecx, DWORD PTR _n$236796[ebp]
  0d744	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  0d74b	89 55 ec	 mov	 DWORD PTR _number$[ebp], edx

; 6183 : 
; 6184 : 			if( number >= 0 )

  0d74e	83 7d ec 00	 cmp	 DWORD PTR _number$[ebp], 0
  0d752	7c 5b		 jl	 SHORT $LN13@MLS_SkillM@7

; 6185 : 			{
; 6186 : 				lpPartyObj = &gObj[number];

  0d754	8b 45 ec	 mov	 eax, DWORD PTR _number$[ebp]
  0d757	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d75d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d763	89 45 b0	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 6187 : 
; 6188 : 
; 6189 : 				if( lpPartyObj->MapNumber == lpObj->MapNumber )

  0d766	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  0d769	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0d770	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d773	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0d77a	3b c8		 cmp	 ecx, eax
  0d77c	75 31		 jne	 SHORT $LN13@MLS_SkillM@7

; 6190 : 				{
; 6191 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  0d77e	8b 45 ec	 mov	 eax, DWORD PTR _number$[ebp]
  0d781	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d787	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d78d	50		 push	 eax
  0d78e	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0d791	51		 push	 ecx
  0d792	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0d797	83 c4 08	 add	 esp, 8
  0d79a	89 45 e0	 mov	 DWORD PTR _dis$[ebp], eax

; 6192 : 					if( dis < 4 )

  0d79d	83 7d e0 04	 cmp	 DWORD PTR _dis$[ebp], 4
  0d7a1	7d 0c		 jge	 SHORT $LN13@MLS_SkillM@7

; 6193 : 					{
; 6194 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  0d7a3	8b 45 ac	 mov	 eax, DWORD PTR _n$236796[ebp]
  0d7a6	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  0d7a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  0d7ab	89 54 85 b8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], edx
$LN13@MLS_SkillM@7:

; 6195 : 					}
; 6196 : 				}
; 6197 : 			}
; 6198 : 		}

  0d7af	e9 78 ff ff ff	 jmp	 $LN17@MLS_SkillM@7
$LN16@MLS_SkillM@7:

; 6199 : 	}
; 6200 : 
; 6201 : 	int Time = 0;

  0d7b4	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _Time$[ebp], 0

; 6202 : 
; 6203 : 	if( lpMagic->m_Skill == 572 )

  0d7bb	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d7be	81 78 08 3c 02
	00 00		 cmp	 DWORD PTR [eax+8], 572	; 0000023cH
  0d7c5	0f 85 8f 00 00
	00		 jne	 $LN12@MLS_SkillM@7

; 6204 : 	{
; 6205 : 		nEffectValue = g_SkillAdditionInfo.m_IncreaseBlockEffectStart + (lpObj->Energy+lpObj->AddEnergy-g_SkillAdditionInfo.m_IncreaseBlockEffectSub)/g_SkillAdditionInfo.m_IncreaseBlockEffectDiv;

  0d7cb	0f b7 0d fc 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3324
  0d7d2	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d7d5	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  0d7dc	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d7df	0f bf 92 26 01
	00 00		 movsx	 edx, WORD PTR [edx+294]
  0d7e6	03 c2		 add	 eax, edx
  0d7e8	0f b7 15 fe 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3326
  0d7ef	2b c2		 sub	 eax, edx
  0d7f1	0f b7 35 00 0d
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3328
  0d7f8	99		 cdq
  0d7f9	f7 fe		 idiv	 esi
  0d7fb	03 c8		 add	 ecx, eax
  0d7fd	89 4d b4	 mov	 DWORD PTR _nEffectValue$[ebp], ecx

; 6206 : 
; 6207 : 		if( g_SkillAdditionInfo.m_IncreaseBlockEffectMax > 0 && nEffectValue > g_SkillAdditionInfo.m_IncreaseBlockEffectMax )

  0d800	83 3d 04 0d 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3332, 0
  0d807	76 13		 jbe	 SHORT $LN11@MLS_SkillM@7
  0d809	8b 45 b4	 mov	 eax, DWORD PTR _nEffectValue$[ebp]
  0d80c	3b 05 04 0d 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3332
  0d812	76 08		 jbe	 SHORT $LN11@MLS_SkillM@7

; 6208 : 		{
; 6209 : 			nEffectValue = g_SkillAdditionInfo.m_IncreaseBlockEffectMax;

  0d814	a1 04 0d 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3332
  0d819	89 45 b4	 mov	 DWORD PTR _nEffectValue$[ebp], eax
$LN11@MLS_SkillM@7:

; 6210 : 		}
; 6211 : 
; 6212 : 		Time = g_SkillAdditionInfo.m_IncreaseBlockTimeStart+lpObj->Energy/g_SkillAdditionInfo.m_IncreaseBlockTimeDiv;

  0d81c	0f b7 0d 08 0d
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3336
  0d823	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d826	0f b7 82 fa 00
	00 00		 movzx	 eax, WORD PTR [edx+250]
  0d82d	0f b7 35 0a 0d
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3338
  0d834	99		 cdq
  0d835	f7 fe		 idiv	 esi
  0d837	03 c8		 add	 ecx, eax
  0d839	89 4d a8	 mov	 DWORD PTR _Time$[ebp], ecx

; 6213 : 		
; 6214 : 		if( g_SkillAdditionInfo.m_IncreaseBlockTimeMax > 0 && Time > g_SkillAdditionInfo.m_IncreaseBlockTimeMax )

  0d83c	83 3d 0c 0d 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3340, 0
  0d843	76 13		 jbe	 SHORT $LN10@MLS_SkillM@7
  0d845	8b 45 a8	 mov	 eax, DWORD PTR _Time$[ebp]
  0d848	3b 05 0c 0d 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3340
  0d84e	76 08		 jbe	 SHORT $LN10@MLS_SkillM@7

; 6215 : 		{
; 6216 : 			Time = g_SkillAdditionInfo.m_IncreaseBlockTimeMax;

  0d850	a1 0c 0d 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3340
  0d855	89 45 a8	 mov	 DWORD PTR _Time$[ebp], eax
$LN10@MLS_SkillM@7:

; 6217 : 		}
; 6218 : 	}
; 6219 : 	else

  0d858	eb 07		 jmp	 SHORT $LN9@MLS_SkillM@7
$LN12@MLS_SkillM@7:

; 6220 : 	{
; 6221 : 		return FALSE;

  0d85a	33 c0		 xor	 eax, eax
  0d85c	e9 5c 01 00 00	 jmp	 $LN22@MLS_SkillM@7
$LN9@MLS_SkillM@7:

; 6222 : 	}
; 6223 : 
; 6224 : 	float fSkillValue = GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  0d861	6a 01		 push	 1
  0d863	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d866	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0d869	51		 push	 ecx
  0d86a	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d86d	52		 push	 edx
  0d86e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0d871	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  0d876	d9 5d a4	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 6225 : 	float fSkillValue2 = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0d879	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d87c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0d880	51		 push	 ecx
  0d881	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0d884	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0d887	50		 push	 eax
  0d888	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0d88d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0d892	50		 push	 eax
  0d893	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0d896	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0d89b	d9 5d a0	 fstp	 DWORD PTR _fSkillValue2$[ebp]

; 6226 : 	
; 6227 : 
; 6228 : 	if( partynum == -1 )

  0d89e	83 7d e8 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  0d8a2	75 6c		 jne	 SHORT $LN8@MLS_SkillM@7

; 6229 : 	{
; 6230 : 		if( lpMagic->m_Skill == 572 )

  0d8a4	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d8a7	81 78 08 3c 02
	00 00		 cmp	 DWORD PTR [eax+8], 572	; 0000023cH
  0d8ae	75 5b		 jne	 SHORT $LN7@MLS_SkillM@7

; 6231 : 		{
; 6232 : 			gObjApplyBuffEffectDuration(lpObj,154,ADD_OPTION_SUCCESSFULBLOCKING,nEffectValue+lpObj->m_SuccessfulBlocking*fSkillValue/100.0f,ADD_OPTION_DEFENSE,fSkillValue2,Time);

  0d8b0	8b 45 a8	 mov	 eax, DWORD PTR _Time$[ebp]
  0d8b3	50		 push	 eax
  0d8b4	d9 45 a0	 fld	 DWORD PTR _fSkillValue2$[ebp]
  0d8b7	e8 00 00 00 00	 call	 __ftol2_sse
  0d8bc	50		 push	 eax
  0d8bd	6a 03		 push	 3
  0d8bf	db 45 b4	 fild	 DWORD PTR _nEffectValue$[ebp]
  0d8c2	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0d8c5	db 81 9c 04 00
	00		 fild	 DWORD PTR [ecx+1180]
  0d8cb	d8 4d a4	 fmul	 DWORD PTR _fSkillValue$[ebp]
  0d8ce	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0d8d4	de c1		 faddp	 ST(1), ST(0)
  0d8d6	e8 00 00 00 00	 call	 __ftol2_sse
  0d8db	50		 push	 eax
  0d8dc	6a 4a		 push	 74			; 0000004aH
  0d8de	68 9a 00 00 00	 push	 154			; 0000009aH
  0d8e3	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0d8e6	52		 push	 edx
  0d8e7	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0d8ec	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6233 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0d8ef	6a 01		 push	 1
  0d8f1	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d8f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  0d8f6	51		 push	 ecx
  0d8f7	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0d8fa	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0d8fe	50		 push	 eax
  0d8ff	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0d902	51		 push	 ecx
  0d903	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0d908	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@MLS_SkillM@7:

; 6234 : 		}
; 6235 : 	}
; 6236 : 	else

  0d90b	e9 a8 00 00 00	 jmp	 $LN3@MLS_SkillM@7
$LN8@MLS_SkillM@7:

; 6237 : 	{
; 6238 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0d910	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _n$236813[ebp], 0
  0d917	eb 09		 jmp	 SHORT $LN5@MLS_SkillM@7
$LN4@MLS_SkillM@7:
  0d919	8b 45 9c	 mov	 eax, DWORD PTR _n$236813[ebp]
  0d91c	83 c0 01	 add	 eax, 1
  0d91f	89 45 9c	 mov	 DWORD PTR _n$236813[ebp], eax
$LN5@MLS_SkillM@7:
  0d922	83 7d 9c 0a	 cmp	 DWORD PTR _n$236813[ebp], 10 ; 0000000aH
  0d926	0f 8d 8c 00 00
	00		 jge	 $LN3@MLS_SkillM@7

; 6239 : 		{
; 6240 : 			if( ApplyPartyIndex[n] != -1 )

  0d92c	8b 45 9c	 mov	 eax, DWORD PTR _n$236813[ebp]
  0d92f	83 7c 85 b8 ff	 cmp	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], -1
  0d934	74 7d		 je	 SHORT $LN1@MLS_SkillM@7

; 6241 : 			{
; 6242 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  0d936	8b 45 9c	 mov	 eax, DWORD PTR _n$236813[ebp]
  0d939	8b 4c 85 b8	 mov	 ecx, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  0d93d	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0d943	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d949	89 4d b0	 mov	 DWORD PTR _lpPartyObj$[ebp], ecx

; 6243 : 
; 6244 : 				if( lpMagic->m_Skill == 572 )

  0d94c	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d94f	81 78 08 3c 02
	00 00		 cmp	 DWORD PTR [eax+8], 572	; 0000023cH
  0d956	75 5b		 jne	 SHORT $LN1@MLS_SkillM@7

; 6245 : 				{
; 6246 : 					gObjApplyBuffEffectDuration(lpPartyObj,154,ADD_OPTION_SUCCESSFULBLOCKING,nEffectValue+lpPartyObj->m_SuccessfulBlocking*fSkillValue/100.0f,ADD_OPTION_DEFENSE,fSkillValue2,Time);

  0d958	8b 45 a8	 mov	 eax, DWORD PTR _Time$[ebp]
  0d95b	50		 push	 eax
  0d95c	d9 45 a0	 fld	 DWORD PTR _fSkillValue2$[ebp]
  0d95f	e8 00 00 00 00	 call	 __ftol2_sse
  0d964	50		 push	 eax
  0d965	6a 03		 push	 3
  0d967	db 45 b4	 fild	 DWORD PTR _nEffectValue$[ebp]
  0d96a	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  0d96d	db 81 9c 04 00
	00		 fild	 DWORD PTR [ecx+1180]
  0d973	d8 4d a4	 fmul	 DWORD PTR _fSkillValue$[ebp]
  0d976	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0d97c	de c1		 faddp	 ST(1), ST(0)
  0d97e	e8 00 00 00 00	 call	 __ftol2_sse
  0d983	50		 push	 eax
  0d984	6a 4a		 push	 74			; 0000004aH
  0d986	68 9a 00 00 00	 push	 154			; 0000009aH
  0d98b	8b 55 b0	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  0d98e	52		 push	 edx
  0d98f	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0d994	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6247 : 					GCMagicAttackNumberSend(lpPartyObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0d997	6a 01		 push	 1
  0d999	8b 45 b0	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  0d99c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0d99e	51		 push	 ecx
  0d99f	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0d9a2	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0d9a6	50		 push	 eax
  0d9a7	8b 4d b0	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  0d9aa	51		 push	 ecx
  0d9ab	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0d9b0	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillM@7:

; 6248 : 				}
; 6249 : 			}
; 6250 : 		}

  0d9b3	e9 61 ff ff ff	 jmp	 $LN4@MLS_SkillM@7
$LN3@MLS_SkillM@7:

; 6251 : 	}
; 6252 : 	return TRUE;

  0d9b8	b8 01 00 00 00	 mov	 eax, 1
$LN22@MLS_SkillM@7:

; 6253 : }

  0d9bd	5f		 pop	 edi
  0d9be	5e		 pop	 esi
  0d9bf	5b		 pop	 ebx
  0d9c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0d9c3	33 cd		 xor	 ecx, ebp
  0d9c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0d9ca	8b e5		 mov	 esp, ebp
  0d9cc	5d		 pop	 ebp
  0d9cd	c2 08 00	 ret	 8
?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery
_TEXT	ENDS
PUBLIC	?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_CallMonIndex$236845 = -32				; size = 4
_EnableAttack$ = -28					; size = 4
_DuelIndex$ = -24					; size = 4
_lpTargetObj$ = -20					; size = 4
_count$ = -16						; size = 4
_tObjNum$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2
; _this$ = ecx

; 6256 : {

  0d9d0	55		 push	 ebp
  0d9d1	8b ec		 mov	 ebp, esp
  0d9d3	83 ec 60	 sub	 esp, 96			; 00000060H
  0d9d6	53		 push	 ebx
  0d9d7	56		 push	 esi
  0d9d8	57		 push	 edi
  0d9d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6257 : 	LPOBJ lpObj = &gObj[aIndex];

  0d9dc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0d9df	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0d9e5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0d9eb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6258 : 	int tObjNum;
; 6259 : 
; 6260 : 	if(lpObj->SkillHellFire2State == 0)

  0d9ee	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0d9f1	0f b6 88 14 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4372]
  0d9f8	85 c9		 test	 ecx, ecx
  0d9fa	75 15		 jne	 SHORT $LN18@MLS_SkillH

; 6261 : 	{
; 6262 : 		return MLS_SkillHellFire2Start(aIndex,lpMagic);

  0d9fc	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0d9ff	50		 push	 eax
  0da00	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0da03	51		 push	 ecx
  0da04	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0da07	e8 00 00 00 00	 call	 ?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
  0da0c	e9 63 02 00 00	 jmp	 $LN19@MLS_SkillH
$LN18@MLS_SkillH:

; 6263 : 	}
; 6264 : 
; 6265 : 	lpObj->SkillHellFire2State = 0;

  0da11	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0da14	c6 80 14 11 00
	00 00		 mov	 BYTE PTR [eax+4372], 0

; 6266 : 	int count = 0;

  0da1b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 6267 : 	lpObj->SkillHellFire2Time = 0;

  0da22	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0da25	c7 80 18 11 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4376], 0

; 6268 : 
; 6269 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0da2f	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0da32	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0da38	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0da3e	89 45 ec	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 6270 : 	int DuelIndex = lpObj->m_iDuelUser;

  0da41	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0da44	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0da4a	89 4d e8	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN17@MLS_SkillH:

; 6271 : 	int EnableAttack;
; 6272 : 
; 6273 : 	while ( true )

  0da4d	b8 01 00 00 00	 mov	 eax, 1
  0da52	85 c0		 test	 eax, eax
  0da54	0f 84 f9 01 00
	00		 je	 $LN16@MLS_SkillH

; 6274 : 	{
; 6275 : 		if(lpObj->VpPlayer2[count].state != 0)

  0da5a	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0da5d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0da60	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0da63	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0da6b	85 d2		 test	 edx, edx
  0da6d	0f 84 ca 01 00
	00		 je	 $LN15@MLS_SkillH

; 6276 : 		{
; 6277 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0da73	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0da76	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0da79	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0da7c	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0da84	89 55 f4	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 6278 : 
; 6279 : 			if(tObjNum >= 0)

  0da87	83 7d f4 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0da8b	0f 8c ac 01 00
	00		 jl	 $LN15@MLS_SkillH

; 6280 : 			{
; 6281 : 				EnableAttack = 0;

  0da91	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 6282 : 
; 6283 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0da98	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0da9b	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0da9e	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0daa1	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0daa9	83 fa 02	 cmp	 edx, 2
  0daac	75 25		 jne	 SHORT $LN13@MLS_SkillH
  0daae	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0dab1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0dab7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dabd	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0dac5	7d 0c		 jge	 SHORT $LN13@MLS_SkillH

; 6284 : 				{
; 6285 : 					EnableAttack = 1;

  0dac7	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0dace	e9 23 01 00 00	 jmp	 $LN12@MLS_SkillH
$LN13@MLS_SkillH:

; 6286 : 				}
; 6287 : 				else if(aTargetIndex == tObjNum || DuelIndex == tObjNum)

  0dad3	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0dad6	3b 45 f4	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0dad9	74 08		 je	 SHORT $LN10@MLS_SkillH
  0dadb	8b 45 e8	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0dade	3b 45 f4	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0dae1	75 0c		 jne	 SHORT $LN11@MLS_SkillH
$LN10@MLS_SkillH:

; 6288 : 				{
; 6289 : 					EnableAttack = 1;

  0dae3	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0daea	e9 07 01 00 00	 jmp	 $LN12@MLS_SkillH
$LN11@MLS_SkillH:

; 6290 : 				}
; 6291 : 
; 6292 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0daef	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0daf2	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0daf5	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0daf8	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0db00	83 fa 03	 cmp	 edx, 3
  0db03	74 5b		 je	 SHORT $LN8@MLS_SkillH
  0db05	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0db08	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0db0e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0db14	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0db1c	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0db1f	75 3f		 jne	 SHORT $LN8@MLS_SkillH
  0db21	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0db26	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0db2b	83 f8 07	 cmp	 eax, 7
  0db2e	75 30		 jne	 SHORT $LN8@MLS_SkillH

; 6293 : 				{
; 6294 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0db30	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0db33	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0db3a	8b 55 f4	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0db3d	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0db43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0db48	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0db50	3b ca		 cmp	 ecx, edx
  0db52	74 07		 je	 SHORT $LN7@MLS_SkillH

; 6295 : 						EnableAttack = 1;

  0db54	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN7@MLS_SkillH:

; 6296 : 				}
; 6297 : 
; 6298 : 				else

  0db5b	e9 96 00 00 00	 jmp	 $LN12@MLS_SkillH
$LN8@MLS_SkillH:

; 6299 : 				{
; 6300 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0db60	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0db63	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0db69	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0db6f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0db72	89 55 e0	 mov	 DWORD PTR _CallMonIndex$236845[ebp], edx

; 6301 : 
; 6302 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0db75	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0db78	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0db7e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0db84	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0db89	83 fa 02	 cmp	 edx, 2
  0db8c	75 40		 jne	 SHORT $LN5@MLS_SkillH
  0db8e	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0db91	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0db97	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0db9d	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0dba5	7c 27		 jl	 SHORT $LN5@MLS_SkillH

; 6303 : 					{
; 6304 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0dba7	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0dbaa	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0dbb0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dbb6	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0dbbd	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0dbc3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dbc8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0dbcb	89 4d e0	 mov	 DWORD PTR _CallMonIndex$236845[ebp], ecx
$LN5@MLS_SkillH:

; 6305 : 					}
; 6306 : 
; 6307 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0dbce	8b 45 e0	 mov	 eax, DWORD PTR _CallMonIndex$236845[ebp]
  0dbd1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0dbd7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dbdd	50		 push	 eax
  0dbde	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dbe1	51		 push	 ecx
  0dbe2	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0dbe7	83 c4 08	 add	 esp, 8
  0dbea	83 f8 01	 cmp	 eax, 1
  0dbed	75 07		 jne	 SHORT $LN12@MLS_SkillH

; 6308 : 					{
; 6309 : 						EnableAttack = 1;

  0dbef	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN12@MLS_SkillH:

; 6310 : 					}
; 6311 : 				}
; 6312 : 
; 6313 : 				if(EnableAttack != 0)

  0dbf6	83 7d e4 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0dbfa	74 41		 je	 SHORT $LN15@MLS_SkillH

; 6314 : 				{
; 6315 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) <= 6)

  0dbfc	8b 45 f4	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0dbff	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0dc05	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dc0b	50		 push	 eax
  0dc0c	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dc0f	51		 push	 ecx
  0dc10	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0dc15	83 c4 08	 add	 esp, 8
  0dc18	83 f8 06	 cmp	 eax, 6
  0dc1b	7f 20		 jg	 SHORT $LN15@MLS_SkillH

; 6316 : 					{
; 6317 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,600,lpMagic->m_Skill,0);

  0dc1d	6a 00		 push	 0
  0dc1f	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0dc22	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0dc25	51		 push	 ecx
  0dc26	68 58 02 00 00	 push	 600			; 00000258H
  0dc2b	8b 55 f4	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0dc2e	52		 push	 edx
  0dc2f	6a 32		 push	 50			; 00000032H
  0dc31	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0dc34	50		 push	 eax
  0dc35	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0dc3a	83 c4 18	 add	 esp, 24			; 00000018H
$LN15@MLS_SkillH:

; 6318 : 					}
; 6319 : 				}
; 6320 : 			}
; 6321 : 		}
; 6322 : 
; 6323 : 		count++;

  0dc3d	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0dc40	83 c0 01	 add	 eax, 1
  0dc43	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 6324 : 		if(count > MAX_VIEWPORT -1)

  0dc46	83 7d f0 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0dc4a	7e 02		 jle	 SHORT $LN1@MLS_SkillH

; 6325 : 		{
; 6326 : 			break;

  0dc4c	eb 05		 jmp	 SHORT $LN16@MLS_SkillH
$LN1@MLS_SkillH:

; 6327 : 		}
; 6328 : 	}

  0dc4e	e9 fa fd ff ff	 jmp	 $LN17@MLS_SkillH
$LN16@MLS_SkillH:

; 6329 : 
; 6330 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,1);

  0dc53	6a 01		 push	 1
  0dc55	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0dc58	8b 08		 mov	 ecx, DWORD PTR [eax]
  0dc5a	51		 push	 ecx
  0dc5b	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0dc5e	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0dc62	50		 push	 eax
  0dc63	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dc66	51		 push	 ecx
  0dc67	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0dc6c	83 c4 10	 add	 esp, 16			; 00000010H

; 6331 : 	return true;

  0dc6f	b8 01 00 00 00	 mov	 eax, 1
$LN19@MLS_SkillH:

; 6332 : }

  0dc74	5f		 pop	 edi
  0dc75	5e		 pop	 esi
  0dc76	5b		 pop	 ebx
  0dc77	8b e5		 mov	 esp, ebp
  0dc79	5d		 pop	 ebp
  0dc7a	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2
_TEXT	ENDS
PUBLIC	??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@ ; `string'
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@
CONST	SEGMENT
??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@ DB '['
	DB	'%s][%s] SkillHellFire2 error on start', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
; _this$ = ecx

; 6338 : {

  0dc80	55		 push	 ebp
  0dc81	8b ec		 mov	 ebp, esp
  0dc83	83 ec 48	 sub	 esp, 72			; 00000048H
  0dc86	53		 push	 ebx
  0dc87	56		 push	 esi
  0dc88	57		 push	 edi
  0dc89	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6339 : 	LPOBJ lpObj = &gObj[aIndex];

  0dc8c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0dc8f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0dc95	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dc9b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6340 : 
; 6341 : 	if(lpObj->SkillHellFire2State != 0)

  0dc9e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0dca1	0f b6 88 14 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4372]
  0dca8	85 c9		 test	 ecx, ecx
  0dcaa	74 20		 je	 SHORT $LN1@MLS_SkillH@2

; 6342 : 	{
; 6343 : 		LogAddTD("[%s][%s] SkillHellFire2 error on start",lpObj->AccountID,lpObj->Name);

  0dcac	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0dcaf	83 c0 77	 add	 eax, 119		; 00000077H
  0dcb2	50		 push	 eax
  0dcb3	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dcb6	83 c1 6c	 add	 ecx, 108		; 0000006cH
  0dcb9	51		 push	 ecx
  0dcba	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@
  0dcbf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0dcc5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6344 : 		return false;

  0dcc8	33 c0		 xor	 eax, eax
  0dcca	eb 3f		 jmp	 SHORT $LN2@MLS_SkillH@2
$LN1@MLS_SkillH@2:

; 6345 : 	}
; 6346 : 
; 6347 : 	lpObj->SkillHellFire2Time = GetTickCount();

  0dccc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0dcd2	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dcd5	89 81 18 11 00
	00		 mov	 DWORD PTR [ecx+4376], eax

; 6348 : 	lpObj->SkillHellFire2State = 1;

  0dcdb	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0dcde	c6 80 14 11 00
	00 01		 mov	 BYTE PTR [eax+4372], 1

; 6349 : 	lpObj->SkillHellFire2Count = 0;

  0dce5	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0dce8	c6 80 15 11 00
	00 00		 mov	 BYTE PTR [eax+4373], 0

; 6350 : 
; 6351 : 	GCMagicAttackNumberSend(lpObj,395,aIndex,1);

  0dcef	6a 01		 push	 1
  0dcf1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0dcf4	50		 push	 eax
  0dcf5	68 8b 01 00 00	 push	 395			; 0000018bH
  0dcfa	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dcfd	51		 push	 ecx
  0dcfe	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0dd03	83 c4 10	 add	 esp, 16			; 00000010H

; 6352 : 	return true;

  0dd06	b8 01 00 00 00	 mov	 eax, 1
$LN2@MLS_SkillH@2:

; 6353 : }

  0dd0b	5f		 pop	 edi
  0dd0c	5e		 pop	 esi
  0dd0d	5b		 pop	 ebx
  0dd0e	8b e5		 mov	 esp, ebp
  0dd10	5d		 pop	 ebp
  0dd11	c2 08 00	 ret	 8
?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
; Function compile flags: /Odtp /ZI
tv136 = -116						; size = 4
tv146 = -112						; size = 4
tv137 = -112						; size = 4
_CallMonIndex$236891 = -44				; size = 4
_DuelIndex$ = -40					; size = 4
_bForceAttack$ = -36					; size = 4
_EnableAttack$ = -32					; size = 4
_HitCount$ = -28					; size = 4
_count$ = -24						; size = 4
_tObjNum$ = -20						; size = 4
_bAttack$ = -16						; size = 4
_tmpvar$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison
; _this$ = ecx

; 6356 : {

  0dd20	55		 push	 ebp
  0dd21	8b ec		 mov	 ebp, esp
  0dd23	83 ec 74	 sub	 esp, 116		; 00000074H
  0dd26	53		 push	 ebx
  0dd27	56		 push	 esi
  0dd28	57		 push	 edi
  0dd29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6357 : 	LPOBJ lpObj = &gObj[aIndex];

  0dd2c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0dd2f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0dd35	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dd3b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6358 : 	int tmpvar = 0;

  0dd3e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _tmpvar$[ebp], 0

; 6359 : 	int bAttack = 0;

  0dd45	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 6360 : 	int tObjNum;
; 6361 : 	int count = 0;

  0dd4c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 6362 : 	int HitCount = 0;

  0dd53	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 6363 : 
; 6364 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  0dd5a	6a 01		 push	 1
  0dd5c	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0dd5f	50		 push	 eax
  0dd60	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0dd63	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0dd67	52		 push	 edx
  0dd68	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0dd6b	50		 push	 eax
  0dd6c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0dd71	83 c4 10	 add	 esp, 16			; 00000010H

; 6365 : 
; 6366 : 	int EnableAttack;
; 6367 : 	int bForceAttack = TRUE;

  0dd74	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _bForceAttack$[ebp], 1

; 6368 : 	int DuelIndex = lpObj->m_iDuelUser;

  0dd7b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0dd7e	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0dd84	89 4d d8	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN26@MLS_SkillE:

; 6369 : 
; 6370 : 	while ( true )

  0dd87	b8 01 00 00 00	 mov	 eax, 1
  0dd8c	85 c0		 test	 eax, eax
  0dd8e	0f 84 0a 03 00
	00		 je	 $LN27@MLS_SkillE

; 6371 : 	{
; 6372 : 		if(lpObj->VpPlayer2[count].state != 0)

  0dd94	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0dd97	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0dd9a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dd9d	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0dda5	85 d2		 test	 edx, edx
  0dda7	0f 84 db 02 00
	00		 je	 $LN24@MLS_SkillE

; 6373 : 		{
; 6374 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0ddad	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0ddb0	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ddb3	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ddb6	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0ddbe	89 55 ec	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 6375 : 
; 6376 : 			if(tObjNum >= 0)

  0ddc1	83 7d ec 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0ddc5	0f 8c bd 02 00
	00		 jl	 $LN24@MLS_SkillE

; 6377 : 			{
; 6378 : 				EnableAttack = 0;

  0ddcb	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 6379 : 
; 6380 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0ddd2	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0ddd5	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ddd8	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dddb	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0dde3	83 fa 02	 cmp	 edx, 2
  0dde6	75 25		 jne	 SHORT $LN22@MLS_SkillE
  0dde8	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ddeb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ddf1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ddf7	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0ddff	7d 0c		 jge	 SHORT $LN22@MLS_SkillE

; 6381 : 				{
; 6382 : 					EnableAttack = 1;

  0de01	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0de08	e9 b9 01 00 00	 jmp	 $LN21@MLS_SkillE
$LN22@MLS_SkillE:

; 6383 : 				}
; 6384 : 				else if( CC_MAP_RANGE( lpObj->MapNumber ) || IT_MAP_RANGE( lpObj->MapNumber ) )

  0de0d	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0de10	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0de17	83 f9 35	 cmp	 ecx, 53			; 00000035H
  0de1a	75 09		 jne	 SHORT $LN31@MLS_SkillE
  0de1c	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv137[ebp], 1
  0de23	eb 33		 jmp	 SHORT $LN32@MLS_SkillE
$LN31@MLS_SkillE:
  0de25	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0de28	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0de2f	83 f8 12	 cmp	 eax, 18			; 00000012H
  0de32	7d 09		 jge	 SHORT $LN29@MLS_SkillE
  0de34	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
  0de3b	eb 15		 jmp	 SHORT $LN30@MLS_SkillE
$LN29@MLS_SkillE:
  0de3d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0de40	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  0de47	33 c0		 xor	 eax, eax
  0de49	83 fa 17	 cmp	 edx, 23			; 00000017H
  0de4c	0f 9e c0	 setle	 al
  0de4f	89 45 8c	 mov	 DWORD PTR tv136[ebp], eax
$LN30@MLS_SkillE:
  0de52	8b 4d 8c	 mov	 ecx, DWORD PTR tv136[ebp]
  0de55	89 4d 90	 mov	 DWORD PTR tv137[ebp], ecx
$LN32@MLS_SkillE:
  0de58	83 7d 90 00	 cmp	 DWORD PTR tv137[ebp], 0
  0de5c	75 33		 jne	 SHORT $LN19@MLS_SkillE
  0de5e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0de61	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0de68	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  0de6b	7d 09		 jge	 SHORT $LN33@MLS_SkillE
  0de6d	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
  0de74	eb 15		 jmp	 SHORT $LN34@MLS_SkillE
$LN33@MLS_SkillE:
  0de76	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0de79	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0de80	33 c9		 xor	 ecx, ecx
  0de82	83 f8 32	 cmp	 eax, 50			; 00000032H
  0de85	0f 9e c1	 setle	 cl
  0de88	89 4d 90	 mov	 DWORD PTR tv146[ebp], ecx
$LN34@MLS_SkillE:
  0de8b	83 7d 90 00	 cmp	 DWORD PTR tv146[ebp], 0
  0de8f	74 0c		 je	 SHORT $LN20@MLS_SkillE
$LN19@MLS_SkillE:

; 6385 : 				{
; 6386 : 					EnableAttack = 1;

  0de91	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0de98	e9 29 01 00 00	 jmp	 $LN21@MLS_SkillE
$LN20@MLS_SkillE:

; 6387 : 				}
; 6388 : 				else if( (tObjNum == aTargetIndex && bForceAttack == TRUE ) || DuelIndex == tObjNum)

  0de9d	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0dea0	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0dea3	75 06		 jne	 SHORT $LN15@MLS_SkillE
  0dea5	83 7d dc 01	 cmp	 DWORD PTR _bForceAttack$[ebp], 1
  0dea9	74 08		 je	 SHORT $LN16@MLS_SkillE
$LN15@MLS_SkillE:
  0deab	8b 45 d8	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0deae	3b 45 ec	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0deb1	75 0c		 jne	 SHORT $LN17@MLS_SkillE
$LN16@MLS_SkillE:

; 6389 : 				{
; 6390 : 					EnableAttack = 1;

  0deb3	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0deba	e9 07 01 00 00	 jmp	 $LN21@MLS_SkillE
$LN17@MLS_SkillE:

; 6391 : 				}
; 6392 : 
; 6393 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0debf	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0dec2	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0dec5	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dec8	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0ded0	83 fa 03	 cmp	 edx, 3
  0ded3	74 5b		 je	 SHORT $LN13@MLS_SkillE
  0ded5	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ded8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0dede	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dee4	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0deec	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0deef	75 3f		 jne	 SHORT $LN13@MLS_SkillE
  0def1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0def6	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0defb	83 f8 07	 cmp	 eax, 7
  0defe	75 30		 jne	 SHORT $LN13@MLS_SkillE

; 6394 : 				{
; 6395 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0df00	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0df03	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0df0a	8b 55 ec	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0df0d	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0df13	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0df18	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0df20	3b ca		 cmp	 ecx, edx
  0df22	74 07		 je	 SHORT $LN12@MLS_SkillE

; 6396 : 						EnableAttack = 1;

  0df24	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN12@MLS_SkillE:

; 6397 : 				}
; 6398 : 
; 6399 : 				else

  0df2b	e9 96 00 00 00	 jmp	 $LN21@MLS_SkillE
$LN13@MLS_SkillE:

; 6400 : 				{
; 6401 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0df30	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0df33	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0df39	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0df3f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0df42	89 55 d4	 mov	 DWORD PTR _CallMonIndex$236891[ebp], edx

; 6402 : 
; 6403 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0df45	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0df48	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0df4e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0df54	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0df59	83 fa 02	 cmp	 edx, 2
  0df5c	75 40		 jne	 SHORT $LN10@MLS_SkillE
  0df5e	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0df61	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0df67	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0df6d	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0df75	7c 27		 jl	 SHORT $LN10@MLS_SkillE

; 6404 : 					{
; 6405 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0df77	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0df7a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0df80	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0df86	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0df8d	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0df93	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0df98	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0df9b	89 4d d4	 mov	 DWORD PTR _CallMonIndex$236891[ebp], ecx
$LN10@MLS_SkillE:

; 6406 : 					}
; 6407 : 
; 6408 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0df9e	8b 45 d4	 mov	 eax, DWORD PTR _CallMonIndex$236891[ebp]
  0dfa1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0dfa7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dfad	50		 push	 eax
  0dfae	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dfb1	51		 push	 ecx
  0dfb2	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0dfb7	83 c4 08	 add	 esp, 8
  0dfba	83 f8 01	 cmp	 eax, 1
  0dfbd	75 07		 jne	 SHORT $LN21@MLS_SkillE

; 6409 : 					{
; 6410 : 						EnableAttack = 1;

  0dfbf	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN21@MLS_SkillE:

; 6411 : 					}
; 6412 : 				}
; 6413 : 
; 6414 : 				if(EnableAttack != 0)

  0dfc6	83 7d e0 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0dfca	0f 84 b8 00 00
	00		 je	 $LN24@MLS_SkillE

; 6415 : 				{
; 6416 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) <= 3)

  0dfd0	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0dfd3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0dfd9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0dfdf	50		 push	 eax
  0dfe0	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0dfe3	51		 push	 ecx
  0dfe4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0dfe9	83 c4 08	 add	 esp, 8
  0dfec	83 f8 03	 cmp	 eax, 3
  0dfef	0f 8f 93 00 00
	00		 jg	 $LN24@MLS_SkillE

; 6417 : 					{
; 6418 : 						HitCount++;

  0dff5	8b 45 e4	 mov	 eax, DWORD PTR _HitCount$[ebp]
  0dff8	83 c0 01	 add	 eax, 1
  0dffb	89 45 e4	 mov	 DWORD PTR _HitCount$[ebp], eax

; 6419 : 
; 6420 : 						if(HitCount > 5)

  0dffe	83 7d e4 05	 cmp	 DWORD PTR _HitCount$[ebp], 5
  0e002	7e 1e		 jle	 SHORT $LN6@MLS_SkillE

; 6421 : 						{
; 6422 : 							if( rand()%2 )

  0e004	e8 00 00 00 00	 call	 _rand
  0e009	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0e00e	79 05		 jns	 SHORT $LN35@MLS_SkillE
  0e010	48		 dec	 eax
  0e011	83 c8 fe	 or	 eax, -2			; fffffffeH
  0e014	40		 inc	 eax
$LN35@MLS_SkillE:
  0e015	85 c0		 test	 eax, eax
  0e017	74 07		 je	 SHORT $LN5@MLS_SkillE

; 6423 : 							{
; 6424 : 								bAttack = TRUE;

  0e019	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN5@MLS_SkillE:

; 6425 : 							}
; 6426 : 						}
; 6427 : 						else

  0e020	eb 07		 jmp	 SHORT $LN4@MLS_SkillE
$LN6@MLS_SkillE:

; 6428 : 						{
; 6429 : 							bAttack = TRUE;

  0e022	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN4@MLS_SkillE:

; 6430 : 						}
; 6431 : 
; 6432 : 						if(HitCount > 12)

  0e029	83 7d e4 0c	 cmp	 DWORD PTR _HitCount$[ebp], 12 ; 0000000cH
  0e02d	7e 07		 jle	 SHORT $LN3@MLS_SkillE

; 6433 : 						{
; 6434 : 							bAttack = FALSE;

  0e02f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0
$LN3@MLS_SkillE:

; 6435 : 						}
; 6436 : 
; 6437 : 						if(bAttack == TRUE)

  0e036	83 7d f0 01	 cmp	 DWORD PTR _bAttack$[ebp], 1
  0e03a	75 4c		 jne	 SHORT $LN24@MLS_SkillE

; 6438 : 						{
; 6439 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  0e03c	6a 00		 push	 0
  0e03e	6a 00		 push	 0
  0e040	6a 00		 push	 0
  0e042	6a 00		 push	 0
  0e044	6a 00		 push	 0
  0e046	6a 01		 push	 1
  0e048	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0e04b	50		 push	 eax
  0e04c	8b 4d ec	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0e04f	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0e055	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e05b	51		 push	 ecx
  0e05c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0e05f	52		 push	 edx
  0e060	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0e065	83 c4 24	 add	 esp, 36			; 00000024H

; 6440 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,800,lpMagic->m_Skill,0);

  0e068	6a 00		 push	 0
  0e06a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0e06d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0e070	51		 push	 ecx
  0e071	68 20 03 00 00	 push	 800			; 00000320H
  0e076	8b 55 ec	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0e079	52		 push	 edx
  0e07a	6a 32		 push	 50			; 00000032H
  0e07c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0e07f	50		 push	 eax
  0e080	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0e085	83 c4 18	 add	 esp, 24			; 00000018H
$LN24@MLS_SkillE:

; 6441 : 						}
; 6442 : 					}
; 6443 : 				}
; 6444 : 			}
; 6445 : 		}
; 6446 : 
; 6447 : 		count++;

  0e088	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0e08b	83 c0 01	 add	 eax, 1
  0e08e	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax

; 6448 : 		if(count > MAX_VIEWPORT -1)

  0e091	83 7d e8 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0e095	7e 02		 jle	 SHORT $LN1@MLS_SkillE

; 6449 : 		{
; 6450 : 			break;

  0e097	eb 05		 jmp	 SHORT $LN27@MLS_SkillE
$LN1@MLS_SkillE:

; 6451 : 		}
; 6452 : 	}

  0e099	e9 e9 fc ff ff	 jmp	 $LN26@MLS_SkillE
$LN27@MLS_SkillE:

; 6453 : }

  0e09e	5f		 pop	 edi
  0e09f	5e		 pop	 esi
  0e0a0	5b		 pop	 ebx
  0e0a1	8b e5		 mov	 esp, ebp
  0e0a3	5d		 pop	 ebp
  0e0a4	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison
; Function compile flags: /Odtp /ZI
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_skillSuccess$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillCure
; _this$ = ecx

; 6456 : {

  0e0b0	55		 push	 ebp
  0e0b1	8b ec		 mov	 ebp, esp
  0e0b3	83 ec 50	 sub	 esp, 80			; 00000050H
  0e0b6	53		 push	 ebx
  0e0b7	56		 push	 esi
  0e0b8	57		 push	 edi
  0e0b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6457 : 	int skillSuccess = true;

  0e0bc	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 6458 : 
; 6459 : 	LPOBJ lpObj = &gObj[aIndex];

  0e0c3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0e0c6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e0cc	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e0d2	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6460 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0e0d5	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0e0d8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e0de	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e0e4	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 6461 : 
; 6462 : 	if( lpObj->Type != OBJ_USER )

  0e0e7	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0e0ea	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0e0ee	83 f9 01	 cmp	 ecx, 1
  0e0f1	74 07		 je	 SHORT $LN1@MLS_SkillC@2

; 6463 : 	{
; 6464 : 		return true;

  0e0f3	b8 01 00 00 00	 mov	 eax, 1
  0e0f8	eb 24		 jmp	 SHORT $LN2@MLS_SkillC@2
$LN1@MLS_SkillC@2:

; 6465 : 	}
; 6466 : 	#pragma message("fix me")
; 6467 : //	gObjClearBuffEffect(lpObj,AT_CURE);
; 6468 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  0e0fa	0f b6 45 f8	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  0e0fe	50		 push	 eax
  0e0ff	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0e102	8b 11		 mov	 edx, DWORD PTR [ecx]
  0e104	52		 push	 edx
  0e105	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0e108	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0e10c	51		 push	 ecx
  0e10d	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0e110	52		 push	 edx
  0e111	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0e116	83 c4 10	 add	 esp, 16			; 00000010H

; 6469 : 	return true;

  0e119	b8 01 00 00 00	 mov	 eax, 1
$LN2@MLS_SkillC@2:

; 6470 : }

  0e11e	5f		 pop	 edi
  0e11f	5e		 pop	 esi
  0e120	5b		 pop	 ebx
  0e121	8b e5		 mov	 esp, ebp
  0e123	5d		 pop	 ebp
  0e124	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillCure
_TEXT	ENDS
PUBLIC	__real@c014000000000000
PUBLIC	__real@43a00000
PUBLIC	__real@43aa0000
PUBLIC	__real@41a00000
PUBLIC	__real@42200000
PUBLIC	?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3
PUBLIC	__real@40c00000
PUBLIC	__real@40e00000
PUBLIC	__$ArrayPad$
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT __real@c014000000000000
CONST	SEGMENT
__real@c014000000000000 DQ 0c014000000000000r	; -5
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43aa0000
CONST	SEGMENT
__real@43aa0000 DD 043aa0000r			; 340
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv556 = -392						; size = 4
tv530 = -392						; size = 4
tv447 = -392						; size = 4
_Dis$236976 = -324					; size = 4
_i$236972 = -320					; size = 4
_fpercent$236969 = -316					; size = 4
_fSkillValue$236967 = -312				; size = 4
_CallMonIndex$236961 = -308				; size = 4
_EnableAttack$ = -304					; size = 4
_DuelIndex$ = -300					; size = 4
_tmpvar$ = -296						; size = 4
_count$ = -292						; size = 4
_tObjNum$ = -288					; size = 4
_i$236939 = -284					; size = 4
_vFrustrum2$ = -280					; size = 60
_fSkillFrustrumY$ = -220				; size = 20
_fSkillFrustrumX$ = -200				; size = 20
_vFrustrum$ = -180					; size = 60
_Matrix$ = -120						; size = 48
_p$ = -72						; size = 60
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_targetpos$ = 16					; size = 1
_aTargetIndex$ = 20					; size = 4
?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot
; _this$ = ecx

; 6473 : {

  0e130	55		 push	 ebp
  0e131	8b ec		 mov	 ebp, esp
  0e133	81 ec 88 01 00
	00		 sub	 esp, 392		; 00000188H
  0e139	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0e13e	33 c5		 xor	 eax, ebp
  0e140	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0e143	53		 push	 ebx
  0e144	56		 push	 esi
  0e145	57		 push	 edi
  0e146	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 6474 : 	LPOBJ lpObj = &gObj[aIndex];

  0e149	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0e14c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e152	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e158	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6475 : 
; 6476 : 	this->MLS_SkillFrustrum3(aIndex,targetpos,6.0f,7.0f,1.0f,0);

  0e15b	51		 push	 ecx
  0e15c	d9 ee		 fldz
  0e15e	d9 1c 24	 fstp	 DWORD PTR [esp]
  0e161	51		 push	 ecx
  0e162	d9 e8		 fld1
  0e164	d9 1c 24	 fstp	 DWORD PTR [esp]
  0e167	51		 push	 ecx
  0e168	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40e00000
  0e16e	d9 1c 24	 fstp	 DWORD PTR [esp]
  0e171	51		 push	 ecx
  0e172	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40c00000
  0e178	d9 1c 24	 fstp	 DWORD PTR [esp]
  0e17b	0f b6 45 10	 movzx	 eax, BYTE PTR _targetpos$[ebp]
  0e17f	50		 push	 eax
  0e180	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0e183	51		 push	 ecx
  0e184	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0e187	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3

; 6477 : 
; 6478 : 	float p[5][3];
; 6479 : 	float Matrix[3][4];
; 6480 : 	float vFrustrum[5][3];
; 6481 : 
; 6482 : 	p[4][0] = 0;

  0e18c	d9 ee		 fldz
  0e18e	d9 5d e8	 fstp	 DWORD PTR _p$[ebp+48]

; 6483 : 	p[4][1] = 6.0f;

  0e191	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40c00000
  0e197	d9 5d ec	 fstp	 DWORD PTR _p$[ebp+52]

; 6484 : 	p[4][2] = 0;

  0e19a	d9 ee		 fldz
  0e19c	d9 5d f0	 fstp	 DWORD PTR _p$[ebp+56]

; 6485 : 
; 6486 : 	p[0][0] = 0;

  0e19f	d9 ee		 fldz
  0e1a1	d9 5d b8	 fstp	 DWORD PTR _p$[ebp]

; 6487 : 	p[0][1] = 0;

  0e1a4	d9 ee		 fldz
  0e1a6	d9 5d bc	 fstp	 DWORD PTR _p$[ebp+4]

; 6488 : 	p[0][2] = 40.0f;

  0e1a9	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42200000
  0e1af	d9 5d c0	 fstp	 DWORD PTR _p$[ebp+8]

; 6489 : 
; 6490 : 	p[1][0] = 0;

  0e1b2	d9 ee		 fldz
  0e1b4	d9 5d c4	 fstp	 DWORD PTR _p$[ebp+12]

; 6491 : 	p[1][1] = 0;

  0e1b7	d9 ee		 fldz
  0e1b9	d9 5d c8	 fstp	 DWORD PTR _p$[ebp+16]

; 6492 : 	p[1][2] = 20.0f;

  0e1bc	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41a00000
  0e1c2	d9 5d cc	 fstp	 DWORD PTR _p$[ebp+20]

; 6493 : 
; 6494 : 	p[2][0] = 0;

  0e1c5	d9 ee		 fldz
  0e1c7	d9 5d d0	 fstp	 DWORD PTR _p$[ebp+24]

; 6495 : 	p[2][1] = 0;

  0e1ca	d9 ee		 fldz
  0e1cc	d9 5d d4	 fstp	 DWORD PTR _p$[ebp+28]

; 6496 : 	p[2][2] = 340.0f;

  0e1cf	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@43aa0000
  0e1d5	d9 5d d8	 fstp	 DWORD PTR _p$[ebp+32]

; 6497 : 
; 6498 : 	p[3][0] = 0;

  0e1d8	d9 ee		 fldz
  0e1da	d9 5d dc	 fstp	 DWORD PTR _p$[ebp+36]

; 6499 : 	p[3][1] = 0;

  0e1dd	d9 ee		 fldz
  0e1df	d9 5d e0	 fstp	 DWORD PTR _p$[ebp+40]

; 6500 : 	p[3][2] = 320.0f;

  0e1e2	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@43a00000
  0e1e8	d9 5d e4	 fstp	 DWORD PTR _p$[ebp+44]

; 6501 : 
; 6502 : 	AngleMatrix((const float *)&p[0],Matrix);

  0e1eb	8d 45 88	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0e1ee	50		 push	 eax
  0e1ef	8d 4d b8	 lea	 ecx, DWORD PTR _p$[ebp]
  0e1f2	51		 push	 ecx
  0e1f3	e8 00 00 00 00	 call	 _AngleMatrix
  0e1f8	83 c4 08	 add	 esp, 8

; 6503 : 	VectorRotate((const float *)&p[4],&Matrix[0],(float *)&vFrustrum[0]);

  0e1fb	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _vFrustrum$[ebp]
  0e201	50		 push	 eax
  0e202	8d 4d 88	 lea	 ecx, DWORD PTR _Matrix$[ebp]
  0e205	51		 push	 ecx
  0e206	8d 55 e8	 lea	 edx, DWORD PTR _p$[ebp+48]
  0e209	52		 push	 edx
  0e20a	e8 00 00 00 00	 call	 _VectorRotate
  0e20f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6504 : 
; 6505 : 	AngleMatrix((const float *)&p[1],Matrix);

  0e212	8d 45 88	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0e215	50		 push	 eax
  0e216	8d 4d c4	 lea	 ecx, DWORD PTR _p$[ebp+12]
  0e219	51		 push	 ecx
  0e21a	e8 00 00 00 00	 call	 _AngleMatrix
  0e21f	83 c4 08	 add	 esp, 8

; 6506 : 	VectorRotate((const float *)&p[4],&Matrix[0],(float *)&vFrustrum[1]);

  0e222	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _vFrustrum$[ebp+12]
  0e228	50		 push	 eax
  0e229	8d 4d 88	 lea	 ecx, DWORD PTR _Matrix$[ebp]
  0e22c	51		 push	 ecx
  0e22d	8d 55 e8	 lea	 edx, DWORD PTR _p$[ebp+48]
  0e230	52		 push	 edx
  0e231	e8 00 00 00 00	 call	 _VectorRotate
  0e236	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6507 : 
; 6508 : 	vFrustrum[2][0] = 0;

  0e239	d9 ee		 fldz
  0e23b	d9 9d 64 ff ff
	ff		 fstp	 DWORD PTR _vFrustrum$[ebp+24]

; 6509 : 	vFrustrum[2][1] = 6.0f;

  0e241	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40c00000
  0e247	d9 9d 68 ff ff
	ff		 fstp	 DWORD PTR _vFrustrum$[ebp+28]

; 6510 : 	vFrustrum[2][2] = 0;

  0e24d	d9 ee		 fldz
  0e24f	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR _vFrustrum$[ebp+32]

; 6511 : 
; 6512 : 	AngleMatrix((const float *)&p[2],Matrix);

  0e255	8d 45 88	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0e258	50		 push	 eax
  0e259	8d 4d d0	 lea	 ecx, DWORD PTR _p$[ebp+24]
  0e25c	51		 push	 ecx
  0e25d	e8 00 00 00 00	 call	 _AngleMatrix
  0e262	83 c4 08	 add	 esp, 8

; 6513 : 	VectorRotate((const float *)&p[4],&Matrix[0],(float *)&vFrustrum[3]);

  0e265	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _vFrustrum$[ebp+36]
  0e26b	50		 push	 eax
  0e26c	8d 4d 88	 lea	 ecx, DWORD PTR _Matrix$[ebp]
  0e26f	51		 push	 ecx
  0e270	8d 55 e8	 lea	 edx, DWORD PTR _p$[ebp+48]
  0e273	52		 push	 edx
  0e274	e8 00 00 00 00	 call	 _VectorRotate
  0e279	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6514 : 
; 6515 : 	AngleMatrix((const float *)&p[3],Matrix);

  0e27c	8d 45 88	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0e27f	50		 push	 eax
  0e280	8d 4d dc	 lea	 ecx, DWORD PTR _p$[ebp+36]
  0e283	51		 push	 ecx
  0e284	e8 00 00 00 00	 call	 _AngleMatrix
  0e289	83 c4 08	 add	 esp, 8

; 6516 : 	VectorRotate((const float *)&p[4],&Matrix[0],(float *)&vFrustrum[4]);

  0e28c	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _vFrustrum$[ebp+48]
  0e292	50		 push	 eax
  0e293	8d 4d 88	 lea	 ecx, DWORD PTR _Matrix$[ebp]
  0e296	51		 push	 ecx
  0e297	8d 55 e8	 lea	 edx, DWORD PTR _p$[ebp+48]
  0e29a	52		 push	 edx
  0e29b	e8 00 00 00 00	 call	 _VectorRotate
  0e2a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6517 : 
; 6518 : 	p[0][0] = 0;

  0e2a3	d9 ee		 fldz
  0e2a5	d9 5d b8	 fstp	 DWORD PTR _p$[ebp]

; 6519 : 	p[0][1] = 0;

  0e2a8	d9 ee		 fldz
  0e2aa	d9 5d bc	 fstp	 DWORD PTR _p$[ebp+4]

; 6520 : 	p[0][2] = targetpos*360/255;

  0e2ad	0f b6 45 10	 movzx	 eax, BYTE PTR _targetpos$[ebp]
  0e2b1	69 c0 68 01 00
	00		 imul	 eax, 360		; 00000168H
  0e2b7	99		 cdq
  0e2b8	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0e2bd	f7 f9		 idiv	 ecx
  0e2bf	89 85 78 fe ff
	ff		 mov	 DWORD PTR tv447[ebp], eax
  0e2c5	db 85 78 fe ff
	ff		 fild	 DWORD PTR tv447[ebp]
  0e2cb	d9 5d c0	 fstp	 DWORD PTR _p$[ebp+8]

; 6521 : 
; 6522 : 	AngleMatrix((const float *)&p[0],Matrix);

  0e2ce	8d 45 88	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0e2d1	50		 push	 eax
  0e2d2	8d 4d b8	 lea	 ecx, DWORD PTR _p$[ebp]
  0e2d5	51		 push	 ecx
  0e2d6	e8 00 00 00 00	 call	 _AngleMatrix
  0e2db	83 c4 08	 add	 esp, 8

; 6523 : 
; 6524 : 	int fSkillFrustrumX[5];
; 6525 : 	int fSkillFrustrumY[5];
; 6526 : 
; 6527 : 	float vFrustrum2[5][3];
; 6528 : 
; 6529 : 	for(int i = 0; i < 5; i++)

  0e2de	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$236939[ebp], 0
  0e2e8	eb 0f		 jmp	 SHORT $LN30@MLS_SkillM@8
$LN29@MLS_SkillM@8:
  0e2ea	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _i$236939[ebp]
  0e2f0	83 c0 01	 add	 eax, 1
  0e2f3	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _i$236939[ebp], eax
$LN30@MLS_SkillM@8:
  0e2f9	83 bd e4 fe ff
	ff 05		 cmp	 DWORD PTR _i$236939[ebp], 5
  0e300	0f 8d 8f 00 00
	00		 jge	 $LN28@MLS_SkillM@8

; 6530 : 	{
; 6531 : 		VectorRotate(vFrustrum[i],&Matrix[0],vFrustrum2[i]);

  0e306	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _i$236939[ebp]
  0e30c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e30f	8d 8c 05 e8 fe
	ff ff		 lea	 ecx, DWORD PTR _vFrustrum2$[ebp+eax]
  0e316	51		 push	 ecx
  0e317	8d 55 88	 lea	 edx, DWORD PTR _Matrix$[ebp]
  0e31a	52		 push	 edx
  0e31b	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _i$236939[ebp]
  0e321	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e324	8d 8c 05 4c ff
	ff ff		 lea	 ecx, DWORD PTR _vFrustrum$[ebp+eax]
  0e32b	51		 push	 ecx
  0e32c	e8 00 00 00 00	 call	 _VectorRotate
  0e331	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6532 : 
; 6533 : 		fSkillFrustrumX[i] = int(vFrustrum2[i][0]) + lpObj->X;

  0e334	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _i$236939[ebp]
  0e33a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e33d	d9 84 05 e8 fe
	ff ff		 fld	 DWORD PTR _vFrustrum2$[ebp+eax]
  0e344	e8 00 00 00 00	 call	 __ftol2_sse
  0e349	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e34c	0f bf 91 44 01
	00 00		 movsx	 edx, WORD PTR [ecx+324]
  0e353	03 c2		 add	 eax, edx
  0e355	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$236939[ebp]
  0e35b	89 84 8d 38 ff
	ff ff		 mov	 DWORD PTR _fSkillFrustrumX$[ebp+ecx*4], eax

; 6534 : 		fSkillFrustrumY[i] = int(vFrustrum2[i][1]) + lpObj->Y;

  0e362	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _i$236939[ebp]
  0e368	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e36b	d9 84 05 ec fe
	ff ff		 fld	 DWORD PTR _vFrustrum2$[ebp+eax+4]
  0e372	e8 00 00 00 00	 call	 __ftol2_sse
  0e377	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e37a	0f bf 91 46 01
	00 00		 movsx	 edx, WORD PTR [ecx+326]
  0e381	03 c2		 add	 eax, edx
  0e383	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$236939[ebp]
  0e389	89 84 8d 24 ff
	ff ff		 mov	 DWORD PTR _fSkillFrustrumY$[ebp+ecx*4], eax

; 6535 : 	}

  0e390	e9 55 ff ff ff	 jmp	 $LN29@MLS_SkillM@8
$LN28@MLS_SkillM@8:

; 6536 : 
; 6537 : 	int tObjNum;
; 6538 : 	int count = 0;

  0e395	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$[ebp], 0

; 6539 : 	int tmpvar = 0;

  0e39f	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmpvar$[ebp], 0

; 6540 : 	int DuelIndex = lpObj->m_iDuelUser;

  0e3a9	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0e3ac	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0e3b2	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN27@MLS_SkillM@8:

; 6541 : 	int EnableAttack;
; 6542 : 
; 6543 : 	while ( true )

  0e3b8	b8 01 00 00 00	 mov	 eax, 1
  0e3bd	85 c0		 test	 eax, eax
  0e3bf	0f 84 b3 04 00
	00		 je	 $LN26@MLS_SkillM@8

; 6544 : 	{
; 6545 : 		if(lpObj->VpPlayer2[count].state != 0)

  0e3c5	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  0e3cb	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e3ce	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e3d1	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0e3d9	85 d2		 test	 edx, edx
  0e3db	0f 84 78 04 00
	00		 je	 $LN5@MLS_SkillM@8

; 6546 : 		{
; 6547 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0e3e1	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  0e3e7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e3ea	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e3ed	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0e3f5	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _tObjNum$[ebp], edx

; 6548 : 
; 6549 : 			if(tObjNum >= 0 && gObj[tObjNum].Live)

  0e3fb	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0e402	0f 8c 51 04 00
	00		 jl	 $LN5@MLS_SkillM@8
  0e408	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e40e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e414	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e41a	0f b6 54 01 6a	 movzx	 edx, BYTE PTR [ecx+eax+106]
  0e41f	85 d2		 test	 edx, edx
  0e421	0f 84 32 04 00
	00		 je	 $LN5@MLS_SkillM@8

; 6550 : 			{
; 6551 : 				EnableAttack = 0;

  0e427	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 6552 : 
; 6553 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0e431	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  0e437	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e43a	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e43d	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0e445	83 fa 02	 cmp	 edx, 2
  0e448	75 2b		 jne	 SHORT $LN23@MLS_SkillM@8
  0e44a	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e450	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e456	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e45c	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0e464	7d 0f		 jge	 SHORT $LN23@MLS_SkillM@8

; 6554 : 				{
; 6555 : 					EnableAttack = 1;

  0e466	c7 85 d0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0e470	e9 53 01 00 00	 jmp	 $LN14@MLS_SkillM@8
$LN23@MLS_SkillM@8:

; 6556 : 				}
; 6557 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0e475	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e47b	3b 45 14	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0e47e	74 0e		 je	 SHORT $LN20@MLS_SkillM@8
  0e480	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0e486	3b 85 e0 fe ff
	ff		 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0e48c	75 0f		 jne	 SHORT $LN21@MLS_SkillM@8
$LN20@MLS_SkillM@8:

; 6558 : 				{
; 6559 : 					EnableAttack = 1;

  0e48e	c7 85 d0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0e498	e9 2b 01 00 00	 jmp	 $LN14@MLS_SkillM@8
$LN21@MLS_SkillM@8:

; 6560 : 				}
; 6561 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0e49d	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  0e4a3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e4a6	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e4a9	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0e4b1	83 fa 03	 cmp	 edx, 3
  0e4b4	74 64		 je	 SHORT $LN18@MLS_SkillM@8
  0e4b6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e4bc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e4c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e4c8	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0e4d0	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0e4d3	75 45		 jne	 SHORT $LN18@MLS_SkillM@8
  0e4d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0e4da	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0e4df	83 f8 07	 cmp	 eax, 7
  0e4e2	75 36		 jne	 SHORT $LN18@MLS_SkillM@8

; 6562 : 				{
; 6563 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0e4e4	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0e4e7	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0e4ee	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0e4f4	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0e4fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e4ff	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0e507	3b ca		 cmp	 ecx, edx
  0e509	74 0a		 je	 SHORT $LN17@MLS_SkillM@8

; 6564 : 						EnableAttack = 1;

  0e50b	c7 85 d0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN17@MLS_SkillM@8:

; 6565 : 				}
; 6566 : 				else

  0e515	e9 ae 00 00 00	 jmp	 $LN14@MLS_SkillM@8
$LN18@MLS_SkillM@8:

; 6567 : 				{
; 6568 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0e51a	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e520	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e526	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e52c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0e52f	89 95 cc fe ff
	ff		 mov	 DWORD PTR _CallMonIndex$236961[ebp], edx

; 6569 : 
; 6570 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0e535	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e53b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e541	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e547	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0e54c	83 fa 02	 cmp	 edx, 2
  0e54f	75 49		 jne	 SHORT $LN15@MLS_SkillM@8
  0e551	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e557	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e55d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e563	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0e56b	7c 2d		 jl	 SHORT $LN15@MLS_SkillM@8

; 6571 : 					{
; 6572 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0e56d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e573	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e579	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e57f	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0e586	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0e58c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e591	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0e594	89 8d cc fe ff
	ff		 mov	 DWORD PTR _CallMonIndex$236961[ebp], ecx
$LN15@MLS_SkillM@8:

; 6573 : 					}
; 6574 : 
; 6575 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0e59a	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _CallMonIndex$236961[ebp]
  0e5a0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e5a6	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e5ac	50		 push	 eax
  0e5ad	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e5b0	51		 push	 ecx
  0e5b1	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0e5b6	83 c4 08	 add	 esp, 8
  0e5b9	83 f8 01	 cmp	 eax, 1
  0e5bc	75 0a		 jne	 SHORT $LN14@MLS_SkillM@8

; 6576 : 					{
; 6577 : 						EnableAttack = 1;

  0e5be	c7 85 d0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN14@MLS_SkillM@8:

; 6578 : 					}
; 6579 : 				}
; 6580 : 
; 6581 : 				if( EnableAttack != FALSE )

  0e5c8	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0e5cf	0f 84 84 02 00
	00		 je	 $LN5@MLS_SkillM@8

; 6582 : 				{
; 6583 : 					if( SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex) )

  0e5d5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0e5d8	50		 push	 eax
  0e5d9	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0e5df	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0e5e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e5eb	0f bf 84 0a 46
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+326]
  0e5f3	50		 push	 eax
  0e5f4	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0e5fa	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0e600	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e606	0f bf 84 0a 44
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+324]
  0e60e	50		 push	 eax
  0e60f	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  0e614	83 c4 0c	 add	 esp, 12			; 0000000cH
  0e617	85 c0		 test	 eax, eax
  0e619	0f 84 3a 02 00
	00		 je	 $LN5@MLS_SkillM@8

; 6584 : 					{
; 6585 : 
; 6586 : 						if( lpMagic->m_Skill == 431 )

  0e61f	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0e622	81 78 08 af 01
	00 00		 cmp	 DWORD PTR [eax+8], 431	; 000001afH
  0e629	0f 85 05 01 00
	00		 jne	 $LN9@MLS_SkillM@8

; 6587 : 						{
; 6588 : 							float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0e62f	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0e632	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0e636	51		 push	 ecx
  0e637	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0e63a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0e63d	50		 push	 eax
  0e63e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0e643	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0e648	50		 push	 eax
  0e649	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0e64c	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0e651	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR _fSkillValue$236967[ebp]

; 6589 : 
; 6590 : 							if( fSkillValue > 0.0f )

  0e657	d9 85 c8 fe ff
	ff		 fld	 DWORD PTR _fSkillValue$236967[ebp]
  0e65d	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0e663	df e0		 fnstsw	 ax
  0e665	f6 c4 41	 test	 ah, 65			; 00000041H
  0e668	0f 85 c6 00 00
	00		 jne	 $LN9@MLS_SkillM@8

; 6591 : 							{
; 6592 : 								float fpercent = rand()%100;

  0e66e	e8 00 00 00 00	 call	 _rand
  0e673	99		 cdq
  0e674	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0e679	f7 f9		 idiv	 ecx
  0e67b	89 95 78 fe ff
	ff		 mov	 DWORD PTR tv530[ebp], edx
  0e681	db 85 78 fe ff
	ff		 fild	 DWORD PTR tv530[ebp]
  0e687	d9 9d c4 fe ff
	ff		 fstp	 DWORD PTR _fpercent$236969[ebp]

; 6593 : 
; 6594 : 								if( fpercent < fSkillValue )

  0e68d	d9 85 c4 fe ff
	ff		 fld	 DWORD PTR _fpercent$236969[ebp]
  0e693	d9 85 c8 fe ff
	ff		 fld	 DWORD PTR _fSkillValue$236967[ebp]
  0e699	de d9		 fcompp
  0e69b	df e0		 fnstsw	 ax
  0e69d	f6 c4 41	 test	 ah, 65			; 00000041H
  0e6a0	0f 85 8e 00 00
	00		 jne	 $LN9@MLS_SkillM@8

; 6595 : 								{
; 6596 : 									if(!g_ExLicense.CheckUser(eExUB::Stone))

  0e6a6	6a 37		 push	 55			; 00000037H
  0e6a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0e6ad	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0e6b2	0f b6 c0	 movzx	 eax, al
  0e6b5	85 c0		 test	 eax, eax
  0e6b7	75 27		 jne	 SHORT $LN8@MLS_SkillM@8

; 6597 : 									{
; 6598 : 										gObjApplyBuffEffectDuration(&gObj[tObjNum],AT_STUN,0,0,0,0,1);

  0e6b9	6a 01		 push	 1
  0e6bb	6a 00		 push	 0
  0e6bd	6a 00		 push	 0
  0e6bf	6a 00		 push	 0
  0e6c1	6a 00		 push	 0
  0e6c3	6a 3d		 push	 61			; 0000003dH
  0e6c5	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e6cb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e6d1	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e6d7	50		 push	 eax
  0e6d8	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0e6dd	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN8@MLS_SkillM@8:

; 6599 : 									}
; 6600 : 									gObjSetPosition(gObj[tObjNum].m_Index,gObj[tObjNum].X,gObj[tObjNum].Y);

  0e6e0	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e6e6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e6ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e6f2	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0e6fa	52		 push	 edx
  0e6fb	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e701	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e707	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e70d	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0e715	52		 push	 edx
  0e716	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e71c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e722	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e728	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0e72b	52		 push	 edx
  0e72c	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  0e731	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@MLS_SkillM@8:

; 6601 : 								}
; 6602 : 							}
; 6603 : 						}
; 6604 : 
; 6605 : 						for(int i = 0; i < 5; i++)

  0e734	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$236972[ebp], 0
  0e73e	eb 0f		 jmp	 SHORT $LN7@MLS_SkillM@8
$LN6@MLS_SkillM@8:
  0e740	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _i$236972[ebp]
  0e746	83 c0 01	 add	 eax, 1
  0e749	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _i$236972[ebp], eax
$LN7@MLS_SkillM@8:
  0e74f	83 bd c0 fe ff
	ff 05		 cmp	 DWORD PTR _i$236972[ebp], 5
  0e756	0f 8d fd 00 00
	00		 jge	 $LN5@MLS_SkillM@8

; 6606 : 						{
; 6607 : 							float Dis = (fSkillFrustrumY[i] - lpObj->Y)*(gObj[tObjNum].Y - lpObj->Y) - (fSkillFrustrumX[i] - lpObj->X)*(gObj[tObjNum].X - lpObj->X);

  0e75c	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0e75f	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0e766	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _i$236972[ebp]
  0e76c	8b 84 95 24 ff
	ff ff		 mov	 eax, DWORD PTR _fSkillFrustrumY$[ebp+edx*4]
  0e773	2b c1		 sub	 eax, ecx
  0e775	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0e77b	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0e781	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e787	0f bf 8c 0a 46
	01 00 00	 movsx	 ecx, WORD PTR [edx+ecx+326]
  0e78f	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0e792	0f bf 92 46 01
	00 00		 movsx	 edx, WORD PTR [edx+326]
  0e799	2b ca		 sub	 ecx, edx
  0e79b	0f af c1	 imul	 eax, ecx
  0e79e	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e7a1	0f bf 91 44 01
	00 00		 movsx	 edx, WORD PTR [ecx+324]
  0e7a8	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$236972[ebp]
  0e7ae	8b 8c 8d 38 ff
	ff ff		 mov	 ecx, DWORD PTR _fSkillFrustrumX$[ebp+ecx*4]
  0e7b5	2b ca		 sub	 ecx, edx
  0e7b7	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0e7bd	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0e7c3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e7c9	0f bf 94 16 44
	01 00 00	 movsx	 edx, WORD PTR [esi+edx+324]
  0e7d1	8b 75 f4	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0e7d4	0f bf b6 44 01
	00 00		 movsx	 esi, WORD PTR [esi+324]
  0e7db	2b d6		 sub	 edx, esi
  0e7dd	0f af ca	 imul	 ecx, edx
  0e7e0	2b c1		 sub	 eax, ecx
  0e7e2	89 85 78 fe ff
	ff		 mov	 DWORD PTR tv556[ebp], eax
  0e7e8	db 85 78 fe ff
	ff		 fild	 DWORD PTR tv556[ebp]
  0e7ee	d9 9d bc fe ff
	ff		 fstp	 DWORD PTR _Dis$236976[ebp]

; 6608 : 						
; 6609 : 							if( (Dis >= -5 && Dis <= 5) || tObjNum == aTargetIndex )

  0e7f4	d9 85 bc fe ff
	ff		 fld	 DWORD PTR _Dis$236976[ebp]
  0e7fa	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@c014000000000000
  0e800	df e0		 fnstsw	 ax
  0e802	f6 c4 01	 test	 ah, 1
  0e805	75 13		 jne	 SHORT $LN2@MLS_SkillM@8
  0e807	d9 85 bc fe ff
	ff		 fld	 DWORD PTR _Dis$236976[ebp]
  0e80d	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@4014000000000000
  0e813	df e0		 fnstsw	 ax
  0e815	f6 c4 41	 test	 ah, 65			; 00000041H
  0e818	7b 0b		 jnp	 SHORT $LN3@MLS_SkillM@8
$LN2@MLS_SkillM@8:
  0e81a	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0e820	3b 45 14	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0e823	75 2f		 jne	 SHORT $LN4@MLS_SkillM@8
$LN3@MLS_SkillM@8:

; 6610 : 							{
; 6611 : 								gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  0e825	6a 00		 push	 0
  0e827	6a 00		 push	 0
  0e829	6a 00		 push	 0
  0e82b	6a 00		 push	 0
  0e82d	6a 00		 push	 0
  0e82f	6a 01		 push	 1
  0e831	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0e834	50		 push	 eax
  0e835	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0e83b	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0e841	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e847	51		 push	 ecx
  0e848	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0e84b	52		 push	 edx
  0e84c	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0e851	83 c4 24	 add	 esp, 36			; 00000024H
$LN4@MLS_SkillM@8:

; 6612 : 							}
; 6613 : 						}

  0e854	e9 e7 fe ff ff	 jmp	 $LN6@MLS_SkillM@8
$LN5@MLS_SkillM@8:

; 6614 : 					}
; 6615 : 				}
; 6616 : 			}
; 6617 : 		}
; 6618 : 
; 6619 : 		count++;

  0e859	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  0e85f	83 c0 01	 add	 eax, 1
  0e862	89 85 dc fe ff
	ff		 mov	 DWORD PTR _count$[ebp], eax

; 6620 : 
; 6621 : 		if( count > (MAX_VIEWPORT-1) )

  0e868	83 bd dc fe ff
	ff 4a		 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0e86f	7e 02		 jle	 SHORT $LN1@MLS_SkillM@8

; 6622 : 		{
; 6623 : 			break;

  0e871	eb 05		 jmp	 SHORT $LN26@MLS_SkillM@8
$LN1@MLS_SkillM@8:

; 6624 : 		}
; 6625 : 	}

  0e873	e9 40 fb ff ff	 jmp	 $LN27@MLS_SkillM@8
$LN26@MLS_SkillM@8:

; 6626 : }

  0e878	5f		 pop	 edi
  0e879	5e		 pop	 esi
  0e87a	5b		 pop	 ebx
  0e87b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0e87e	33 cd		 xor	 ecx, ebp
  0e880	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0e885	8b e5		 mov	 esp, ebp
  0e887	5d		 pop	 ebp
  0e888	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv167 = -240						; size = 4
_i$236996 = -172					; size = 4
_vFrustrum$ = -168					; size = 48
_Matrix$ = -120						; size = 48
_Angle$ = -72						; size = 12
_p$ = -60						; size = 48
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetPos$ = 12					; size = 1
_f1$ = 16						; size = 4
_f2$ = 20						; size = 4
_f3$ = 24						; size = 4
_f4$ = 28						; size = 4
?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3
; _this$ = ecx

; 6629 : {

  0e890	55		 push	 ebp
  0e891	8b ec		 mov	 ebp, esp
  0e893	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  0e899	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0e89e	33 c5		 xor	 eax, ebp
  0e8a0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0e8a3	53		 push	 ebx
  0e8a4	56		 push	 esi
  0e8a5	57		 push	 edi
  0e8a6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 6630 : 	LPOBJ lpObj = &gObj[aIndex];

  0e8a9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0e8ac	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0e8b2	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0e8b8	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6631 : 
; 6632 : 	float p[4][3];
; 6633 : 
; 6634 : 	p[0][0] = -f1;

  0e8bb	d9 45 10	 fld	 DWORD PTR _f1$[ebp]
  0e8be	d9 e0		 fchs
  0e8c0	d9 5d c4	 fstp	 DWORD PTR _p$[ebp]

; 6635 : 	p[0][1] = f2;

  0e8c3	d9 45 14	 fld	 DWORD PTR _f2$[ebp]
  0e8c6	d9 5d c8	 fstp	 DWORD PTR _p$[ebp+4]

; 6636 : 	p[0][2] = 0;

  0e8c9	d9 ee		 fldz
  0e8cb	d9 5d cc	 fstp	 DWORD PTR _p$[ebp+8]

; 6637 : 	p[1][0] = f1;

  0e8ce	d9 45 10	 fld	 DWORD PTR _f1$[ebp]
  0e8d1	d9 5d d0	 fstp	 DWORD PTR _p$[ebp+12]

; 6638 : 	p[1][1] = f2;

  0e8d4	d9 45 14	 fld	 DWORD PTR _f2$[ebp]
  0e8d7	d9 5d d4	 fstp	 DWORD PTR _p$[ebp+16]

; 6639 : 	p[1][2] = 0;

  0e8da	d9 ee		 fldz
  0e8dc	d9 5d d8	 fstp	 DWORD PTR _p$[ebp+20]

; 6640 : 	p[2][0] = f3;

  0e8df	d9 45 18	 fld	 DWORD PTR _f3$[ebp]
  0e8e2	d9 5d dc	 fstp	 DWORD PTR _p$[ebp+24]

; 6641 : 	p[2][1] = f4;

  0e8e5	d9 45 1c	 fld	 DWORD PTR _f4$[ebp]
  0e8e8	d9 5d e0	 fstp	 DWORD PTR _p$[ebp+28]

; 6642 : 	p[2][2] = 0;

  0e8eb	d9 ee		 fldz
  0e8ed	d9 5d e4	 fstp	 DWORD PTR _p$[ebp+32]

; 6643 : 	p[3][0] = -f3;

  0e8f0	d9 45 18	 fld	 DWORD PTR _f3$[ebp]
  0e8f3	d9 e0		 fchs
  0e8f5	d9 5d e8	 fstp	 DWORD PTR _p$[ebp+36]

; 6644 : 	p[3][1] = f4;

  0e8f8	d9 45 1c	 fld	 DWORD PTR _f4$[ebp]
  0e8fb	d9 5d ec	 fstp	 DWORD PTR _p$[ebp+40]

; 6645 : 	p[3][2] = 0;

  0e8fe	d9 ee		 fldz
  0e900	d9 5d f0	 fstp	 DWORD PTR _p$[ebp+44]

; 6646 : 
; 6647 : 	float Angle[3];
; 6648 : 
; 6649 : 	Angle[0] = 0;

  0e903	d9 ee		 fldz
  0e905	d9 5d b8	 fstp	 DWORD PTR _Angle$[ebp]

; 6650 : 	Angle[1] = 0;

  0e908	d9 ee		 fldz
  0e90a	d9 5d bc	 fstp	 DWORD PTR _Angle$[ebp+4]

; 6651 : 	Angle[2] = (float)(aTargetPos * 360 / 255);

  0e90d	0f b6 45 0c	 movzx	 eax, BYTE PTR _aTargetPos$[ebp]
  0e911	69 c0 68 01 00
	00		 imul	 eax, 360		; 00000168H
  0e917	99		 cdq
  0e918	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0e91d	f7 f9		 idiv	 ecx
  0e91f	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv167[ebp], eax
  0e925	db 85 10 ff ff
	ff		 fild	 DWORD PTR tv167[ebp]
  0e92b	d9 5d c0	 fstp	 DWORD PTR _Angle$[ebp+8]

; 6652 : 
; 6653 : 	float Matrix[3][4];
; 6654 : 	float vFrustrum[4][3];
; 6655 : 
; 6656 : 	AngleMatrix(Angle,Matrix);

  0e92e	8d 45 88	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0e931	50		 push	 eax
  0e932	8d 4d b8	 lea	 ecx, DWORD PTR _Angle$[ebp]
  0e935	51		 push	 ecx
  0e936	e8 00 00 00 00	 call	 _AngleMatrix
  0e93b	83 c4 08	 add	 esp, 8

; 6657 : 
; 6658 : 	for(int i = 0; i < 4; i++)

  0e93e	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$236996[ebp], 0
  0e948	eb 0f		 jmp	 SHORT $LN3@MLS_SkillF@4
$LN2@MLS_SkillF@4:
  0e94a	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$236996[ebp]
  0e950	83 c0 01	 add	 eax, 1
  0e953	89 85 54 ff ff
	ff		 mov	 DWORD PTR _i$236996[ebp], eax
$LN3@MLS_SkillF@4:
  0e959	83 bd 54 ff ff
	ff 04		 cmp	 DWORD PTR _i$236996[ebp], 4
  0e960	0f 8d 92 00 00
	00		 jge	 $LN1@MLS_SkillF@4

; 6659 : 	{
; 6660 : 		VectorRotate((const float *)&p[i],&Matrix[0],(float *)&vFrustrum[i]);

  0e966	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$236996[ebp]
  0e96c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e96f	8d 8c 05 58 ff
	ff ff		 lea	 ecx, DWORD PTR _vFrustrum$[ebp+eax]
  0e976	51		 push	 ecx
  0e977	8d 55 88	 lea	 edx, DWORD PTR _Matrix$[ebp]
  0e97a	52		 push	 edx
  0e97b	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$236996[ebp]
  0e981	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e984	8d 4c 05 c4	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  0e988	51		 push	 ecx
  0e989	e8 00 00 00 00	 call	 _VectorRotate
  0e98e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6661 : 
; 6662 : 		lpObj->fSkillFrustrumX[i] = (int)vFrustrum[i][0] + lpObj->X;

  0e991	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$236996[ebp]
  0e997	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e99a	d9 84 05 58 ff
	ff ff		 fld	 DWORD PTR _vFrustrum$[ebp+eax]
  0e9a1	e8 00 00 00 00	 call	 __ftol2_sse
  0e9a6	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e9a9	0f bf 91 44 01
	00 00		 movsx	 edx, WORD PTR [ecx+324]
  0e9b0	03 c2		 add	 eax, edx
  0e9b2	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _i$236996[ebp]
  0e9b8	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0e9bb	89 84 8a f4 10
	00 00		 mov	 DWORD PTR [edx+ecx*4+4340], eax

; 6663 : 		lpObj->fSkillFrustrumY[i] = (int)vFrustrum[i][1] + lpObj->Y;

  0e9c2	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$236996[ebp]
  0e9c8	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0e9cb	d9 84 05 5c ff
	ff ff		 fld	 DWORD PTR _vFrustrum$[ebp+eax+4]
  0e9d2	e8 00 00 00 00	 call	 __ftol2_sse
  0e9d7	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0e9da	0f bf 91 46 01
	00 00		 movsx	 edx, WORD PTR [ecx+326]
  0e9e1	03 c2		 add	 eax, edx
  0e9e3	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _i$236996[ebp]
  0e9e9	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0e9ec	89 84 8a 04 11
	00 00		 mov	 DWORD PTR [edx+ecx*4+4356], eax

; 6664 : 	}

  0e9f3	e9 52 ff ff ff	 jmp	 $LN2@MLS_SkillF@4
$LN1@MLS_SkillF@4:

; 6665 : }

  0e9f8	5f		 pop	 edi
  0e9f9	5e		 pop	 esi
  0e9fa	5b		 pop	 ebx
  0e9fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0e9fe	33 cd		 xor	 ecx, ebp
  0ea00	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0ea05	8b e5		 mov	 esp, ebp
  0ea07	5d		 pop	 ebp
  0ea08	c2 18 00	 ret	 24			; 00000018H
?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3
_TEXT	ENDS
EXTRN	?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z:PROC ; gObjCheckBuffEffectValue
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_fSkillValue$237017 = -24				; size = 4
_iAddStats$ = -20					; size = 4
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_skillSuccess$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillBless
; _this$ = ecx

; 6668 : {

  0ea10	55		 push	 ebp
  0ea11	8b ec		 mov	 ebp, esp
  0ea13	83 ec 58	 sub	 esp, 88			; 00000058H
  0ea16	53		 push	 ebx
  0ea17	56		 push	 esi
  0ea18	57		 push	 edi
  0ea19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6669 : 	int skillSuccess = true;

  0ea1c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 6670 : 
; 6671 : 	LPOBJ lpObj = &gObj[aIndex];

  0ea23	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0ea26	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ea2c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ea32	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6672 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0ea35	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0ea38	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ea3e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ea44	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 6673 : 
; 6674 : 	if( lpObj->Type != OBJ_USER )

  0ea47	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ea4a	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0ea4e	83 f9 01	 cmp	 ecx, 1
  0ea51	74 0a		 je	 SHORT $LN5@MLS_SkillB@2

; 6675 : 	{
; 6676 : 		return true;

  0ea53	b8 01 00 00 00	 mov	 eax, 1
  0ea58	e9 d7 00 00 00	 jmp	 $LN6@MLS_SkillB@2
$LN5@MLS_SkillB@2:

; 6677 : 	}
; 6678 : 
; 6679 : 	int iAddStats = lpObj->Energy/100;

  0ea5d	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ea60	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  0ea67	99		 cdq
  0ea68	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0ea6d	f7 f9		 idiv	 ecx
  0ea6f	89 45 ec	 mov	 DWORD PTR _iAddStats$[ebp], eax

; 6680 : 
; 6681 : 	if( gObjCheckBuffEffectValue(lpTargetObj,161,iAddStats,0) )

  0ea72	6a 00		 push	 0
  0ea74	8b 45 ec	 mov	 eax, DWORD PTR _iAddStats$[ebp]
  0ea77	50		 push	 eax
  0ea78	68 a1 00 00 00	 push	 161			; 000000a1H
  0ea7d	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0ea80	51		 push	 ecx
  0ea81	e8 00 00 00 00	 call	 ?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckBuffEffectValue
  0ea86	83 c4 10	 add	 esp, 16			; 00000010H
  0ea89	0f b6 d0	 movzx	 edx, al
  0ea8c	85 d2		 test	 edx, edx
  0ea8e	74 23		 je	 SHORT $LN4@MLS_SkillB@2

; 6682 : 	{
; 6683 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,0);

  0ea90	6a 00		 push	 0
  0ea92	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0ea95	8b 08		 mov	 ecx, DWORD PTR [eax]
  0ea97	51		 push	 ecx
  0ea98	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0ea9b	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0ea9f	50		 push	 eax
  0eaa0	8b 4d f4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0eaa3	51		 push	 ecx
  0eaa4	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0eaa9	83 c4 10	 add	 esp, 16			; 00000010H

; 6684 : 		return false;

  0eaac	33 c0		 xor	 eax, eax
  0eaae	e9 81 00 00 00	 jmp	 $LN6@MLS_SkillB@2
$LN4@MLS_SkillB@2:

; 6685 : 	}
; 6686 : 
; 6687 : 	if( lpMagic->m_Skill == 433 )

  0eab3	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0eab6	81 78 08 b1 01
	00 00		 cmp	 DWORD PTR [eax+8], 433	; 000001b1H
  0eabd	75 43		 jne	 SHORT $LN3@MLS_SkillB@2

; 6688 : 	{
; 6689 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0eabf	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0eac2	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0eac6	51		 push	 ecx
  0eac7	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0eaca	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0eacd	50		 push	 eax
  0eace	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0ead3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0ead8	50		 push	 eax
  0ead9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0eadc	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0eae1	d9 5d e8	 fstp	 DWORD PTR _fSkillValue$237017[ebp]

; 6690 : 
; 6691 : 		if( fSkillValue > 0.0f )

  0eae4	d9 45 e8	 fld	 DWORD PTR _fSkillValue$237017[ebp]
  0eae7	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0eaed	df e0		 fnstsw	 ax
  0eaef	f6 c4 41	 test	 ah, 65			; 00000041H
  0eaf2	75 0e		 jne	 SHORT $LN2@MLS_SkillB@2

; 6692 : 		{
; 6693 : 			iAddStats += fSkillValue;

  0eaf4	db 45 ec	 fild	 DWORD PTR _iAddStats$[ebp]
  0eaf7	d8 45 e8	 fadd	 DWORD PTR _fSkillValue$237017[ebp]
  0eafa	e8 00 00 00 00	 call	 __ftol2_sse
  0eaff	89 45 ec	 mov	 DWORD PTR _iAddStats$[ebp], eax
$LN2@MLS_SkillB@2:
$LN3@MLS_SkillB@2:

; 6694 : 		}
; 6695 : #pragma message("fix me")
; 6696 : 		//gObjApplyBuffEffectDuration(lpTargetObj,BUFF_BLESS2,ADD_OPTION_ALLSTATS,iAddStats,0,0,300);
; 6697 : 	}
; 6698 : 	else
; 6699 : 	{
; 6700 : 		//gObjApplyBuffEffectDuration(lpTargetObj,161,ADD_OPTION_ALLSTATS,iAddStats,0,0,300);
; 6701 : 	}
; 6702 : 
; 6703 : 	
; 6704 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  0eb02	0f b6 45 f8	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  0eb06	50		 push	 eax
  0eb07	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0eb0a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0eb0c	52		 push	 edx
  0eb0d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0eb10	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0eb14	51		 push	 ecx
  0eb15	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0eb18	52		 push	 edx
  0eb19	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0eb1e	83 c4 10	 add	 esp, 16			; 00000010H

; 6705 : 	gObjCalCharacter(lpTargetObj->m_Index);

  0eb21	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0eb24	8b 08		 mov	 ecx, DWORD PTR [eax]
  0eb26	51		 push	 ecx
  0eb27	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  0eb2c	83 c4 04	 add	 esp, 4

; 6706 : 	return true;

  0eb2f	b8 01 00 00 00	 mov	 eax, 1
$LN6@MLS_SkillB@2:

; 6707 : }

  0eb34	5f		 pop	 edi
  0eb35	5e		 pop	 esi
  0eb36	5b		 pop	 ebx
  0eb37	8b e5		 mov	 esp, ebp
  0eb39	5d		 pop	 ebp
  0eb3a	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillBless
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm
; _this$ = ecx

; 6710 : {

  0eb40	55		 push	 ebp
  0eb41	8b ec		 mov	 ebp, esp
  0eb43	83 ec 44	 sub	 esp, 68			; 00000044H
  0eb46	53		 push	 ebx
  0eb47	56		 push	 esi
  0eb48	57		 push	 edi
  0eb49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6711 : 	MLS_SkillAreaMonsterAttack(aIndex,lpMagic,x,y,aTargetIndex,6,1,0,400);

  0eb4c	68 90 01 00 00	 push	 400			; 00000190H
  0eb51	6a 00		 push	 0
  0eb53	6a 01		 push	 1
  0eb55	6a 06		 push	 6
  0eb57	8b 45 18	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0eb5a	50		 push	 eax
  0eb5b	0f b6 4d 14	 movzx	 ecx, BYTE PTR _y$[ebp]
  0eb5f	51		 push	 ecx
  0eb60	0f b6 55 10	 movzx	 edx, BYTE PTR _x$[ebp]
  0eb64	52		 push	 edx
  0eb65	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0eb68	50		 push	 eax
  0eb69	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0eb6c	51		 push	 ecx
  0eb6d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0eb70	e8 00 00 00 00	 call	 ?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack

; 6712 : }

  0eb75	5f		 pop	 edi
  0eb76	5e		 pop	 esi
  0eb77	5b		 pop	 ebx
  0eb78	8b e5		 mov	 esp, ebp
  0eb7a	5d		 pop	 ebp
  0eb7b	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm
_TEXT	ENDS
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv314 = -116						; size = 4
_fpercent$237068 = -48					; size = 4
_fSkillValue$237066 = -44				; size = 4
_CallMonIndex$237056 = -40				; size = 4
_EnableAttack$ = -36					; size = 4
_DuelIndex$ = -32					; size = 4
_bAttack$ = -28						; size = 4
_HitCount$ = -24					; size = 4
_count$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_bSuccess$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_targetangle$ = 16					; size = 1
_aTargetIndex$ = 20					; size = 4
?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike
; _this$ = ecx

; 6715 : {

  0eb80	55		 push	 ebp
  0eb81	8b ec		 mov	 ebp, esp
  0eb83	83 ec 74	 sub	 esp, 116		; 00000074H
  0eb86	53		 push	 ebx
  0eb87	56		 push	 esi
  0eb88	57		 push	 edi
  0eb89	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6716 : 	LPOBJ lpObj = &gObj[aIndex];

  0eb8c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0eb8f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0eb95	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0eb9b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6717 : 	int bSuccess = TRUE;

  0eb9e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 1

; 6718 : 	int tObjNum;
; 6719 : 
; 6720 : 	MLS_SkillFrustrum3(aIndex,targetangle,2.0f,4.0f,5.0f,0);

  0eba5	51		 push	 ecx
  0eba6	d9 ee		 fldz
  0eba8	d9 1c 24	 fstp	 DWORD PTR [esp]
  0ebab	51		 push	 ecx
  0ebac	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40a00000
  0ebb2	d9 1c 24	 fstp	 DWORD PTR [esp]
  0ebb5	51		 push	 ecx
  0ebb6	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40800000
  0ebbc	d9 1c 24	 fstp	 DWORD PTR [esp]
  0ebbf	51		 push	 ecx
  0ebc0	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  0ebc6	d9 1c 24	 fstp	 DWORD PTR [esp]
  0ebc9	0f b6 45 10	 movzx	 eax, BYTE PTR _targetangle$[ebp]
  0ebcd	50		 push	 eax
  0ebce	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0ebd1	51		 push	 ecx
  0ebd2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ebd5	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3

; 6721 : 
; 6722 : 	int count = 0;

  0ebda	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 6723 : 	int HitCount = 0;

  0ebe1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 6724 : 	int bAttack;
; 6725 : 	int DuelIndex = lpObj->m_iDuelUser;

  0ebe8	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ebeb	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0ebf1	89 4d e0	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN24@MLS_SkillF@5:

; 6726 : 	int EnableAttack;
; 6727 : 
; 6728 : 	while ( true )

  0ebf4	b8 01 00 00 00	 mov	 eax, 1
  0ebf9	85 c0		 test	 eax, eax
  0ebfb	0f 84 21 03 00
	00		 je	 $LN23@MLS_SkillF@5

; 6729 : 	{
; 6730 : 		if(lpObj->VpPlayer2[count].state != 0)

  0ec01	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0ec04	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ec07	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ec0a	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0ec12	85 d2		 test	 edx, edx
  0ec14	0f 84 f2 02 00
	00		 je	 $LN9@MLS_SkillF@5

; 6731 : 		{
; 6732 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0ec1a	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0ec1d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ec20	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ec23	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0ec2b	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 6733 : 
; 6734 : 			if(tObjNum >= 0)

  0ec2e	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0ec32	0f 8c d4 02 00
	00		 jl	 $LN9@MLS_SkillF@5

; 6735 : 			{
; 6736 : 				EnableAttack = 0;

  0ec38	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 6737 : 
; 6738 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0ec3f	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0ec42	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ec45	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ec48	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0ec50	83 fa 02	 cmp	 edx, 2
  0ec53	75 25		 jne	 SHORT $LN20@MLS_SkillF@5
  0ec55	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ec58	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ec5e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ec64	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0ec6c	7d 0c		 jge	 SHORT $LN20@MLS_SkillF@5

; 6739 : 				{
; 6740 : 					EnableAttack = 1;

  0ec6e	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0ec75	e9 23 01 00 00	 jmp	 $LN11@MLS_SkillF@5
$LN20@MLS_SkillF@5:

; 6741 : 				}
; 6742 : 				else if( tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0ec7a	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ec7d	3b 45 14	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0ec80	74 08		 je	 SHORT $LN17@MLS_SkillF@5
  0ec82	8b 45 e0	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0ec85	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0ec88	75 0c		 jne	 SHORT $LN18@MLS_SkillF@5
$LN17@MLS_SkillF@5:

; 6743 : 				{
; 6744 : 					EnableAttack = 1;

  0ec8a	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0ec91	e9 07 01 00 00	 jmp	 $LN11@MLS_SkillF@5
$LN18@MLS_SkillF@5:

; 6745 : 				}
; 6746 : 
; 6747 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0ec96	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0ec99	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ec9c	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ec9f	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0eca7	83 fa 03	 cmp	 edx, 3
  0ecaa	74 5b		 je	 SHORT $LN15@MLS_SkillF@5
  0ecac	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ecaf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ecb5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ecbb	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0ecc3	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0ecc6	75 3f		 jne	 SHORT $LN15@MLS_SkillF@5
  0ecc8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0eccd	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0ecd2	83 f8 07	 cmp	 eax, 7
  0ecd5	75 30		 jne	 SHORT $LN15@MLS_SkillF@5

; 6748 : 				{
; 6749 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0ecd7	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ecda	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0ece1	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0ece4	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0ecea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ecef	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0ecf7	3b ca		 cmp	 ecx, edx
  0ecf9	74 07		 je	 SHORT $LN14@MLS_SkillF@5

; 6750 : 						EnableAttack = 1;

  0ecfb	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN14@MLS_SkillF@5:

; 6751 : 				}
; 6752 : 
; 6753 : 				else

  0ed02	e9 96 00 00 00	 jmp	 $LN11@MLS_SkillF@5
$LN15@MLS_SkillF@5:

; 6754 : 				{
; 6755 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0ed07	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ed0a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ed10	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ed16	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0ed19	89 55 d8	 mov	 DWORD PTR _CallMonIndex$237056[ebp], edx

; 6756 : 
; 6757 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0ed1c	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ed1f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ed25	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ed2b	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0ed30	83 fa 02	 cmp	 edx, 2
  0ed33	75 40		 jne	 SHORT $LN12@MLS_SkillF@5
  0ed35	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ed38	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ed3e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ed44	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0ed4c	7c 27		 jl	 SHORT $LN12@MLS_SkillF@5

; 6758 : 					{
; 6759 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0ed4e	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ed51	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ed57	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ed5d	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0ed64	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0ed6a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ed6f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0ed72	89 4d d8	 mov	 DWORD PTR _CallMonIndex$237056[ebp], ecx
$LN12@MLS_SkillF@5:

; 6760 : 					}
; 6761 : 
; 6762 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0ed75	8b 45 d8	 mov	 eax, DWORD PTR _CallMonIndex$237056[ebp]
  0ed78	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ed7e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ed84	50		 push	 eax
  0ed85	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ed88	51		 push	 ecx
  0ed89	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0ed8e	83 c4 08	 add	 esp, 8
  0ed91	83 f8 01	 cmp	 eax, 1
  0ed94	75 07		 jne	 SHORT $LN11@MLS_SkillF@5

; 6763 : 					{
; 6764 : 						EnableAttack = 1;

  0ed96	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN11@MLS_SkillF@5:

; 6765 : 					}
; 6766 : 				}
; 6767 : 
; 6768 : 				if(EnableAttack != 0)

  0ed9d	83 7d dc 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0eda1	0f 84 65 01 00
	00		 je	 $LN9@MLS_SkillF@5

; 6769 : 				{
; 6770 : 					if( SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex) )

  0eda7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0edaa	50		 push	 eax
  0edab	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0edae	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0edb4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0edba	0f bf 84 0a 46
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+326]
  0edc2	50		 push	 eax
  0edc3	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0edc6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0edcc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0edd2	0f bf 84 0a 44
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+324]
  0edda	50		 push	 eax
  0eddb	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  0ede0	83 c4 0c	 add	 esp, 12			; 0000000cH
  0ede3	85 c0		 test	 eax, eax
  0ede5	0f 84 21 01 00
	00		 je	 $LN9@MLS_SkillF@5

; 6771 : 					{
; 6772 : 						bAttack = FALSE;

  0edeb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 6773 : 
; 6774 : 						if(HitCount > 8)

  0edf2	83 7d e8 08	 cmp	 DWORD PTR _HitCount$[ebp], 8
  0edf6	7e 1e		 jle	 SHORT $LN8@MLS_SkillF@5

; 6775 : 						{
; 6776 : 							if( rand()%2 )

  0edf8	e8 00 00 00 00	 call	 _rand
  0edfd	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0ee02	79 05		 jns	 SHORT $LN27@MLS_SkillF@5
  0ee04	48		 dec	 eax
  0ee05	83 c8 fe	 or	 eax, -2			; fffffffeH
  0ee08	40		 inc	 eax
$LN27@MLS_SkillF@5:
  0ee09	85 c0		 test	 eax, eax
  0ee0b	74 07		 je	 SHORT $LN7@MLS_SkillF@5

; 6777 : 							{
; 6778 : 								bAttack = TRUE;

  0ee0d	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN7@MLS_SkillF@5:

; 6779 : 							}
; 6780 : 						}
; 6781 : 						else

  0ee14	eb 07		 jmp	 SHORT $LN6@MLS_SkillF@5
$LN8@MLS_SkillF@5:

; 6782 : 						{
; 6783 : 							bAttack = TRUE;

  0ee16	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN6@MLS_SkillF@5:

; 6784 : 						}
; 6785 : 
; 6786 : 						if(bAttack != FALSE)

  0ee1d	83 7d e4 00	 cmp	 DWORD PTR _bAttack$[ebp], 0
  0ee21	0f 84 dc 00 00
	00		 je	 $LN5@MLS_SkillF@5

; 6787 : 						{
; 6788 : 							if( lpMagic->m_Skill == 494 )

  0ee27	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0ee2a	81 78 08 ee 01
	00 00		 cmp	 DWORD PTR [eax+8], 494	; 000001eeH
  0ee31	75 78		 jne	 SHORT $LN2@MLS_SkillF@5

; 6789 : 							{
; 6790 : 								float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0ee33	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0ee36	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0ee3a	51		 push	 ecx
  0ee3b	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0ee3e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0ee41	50		 push	 eax
  0ee42	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0ee47	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0ee4c	50		 push	 eax
  0ee4d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ee50	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0ee55	d9 5d d4	 fstp	 DWORD PTR _fSkillValue$237066[ebp]

; 6791 : 
; 6792 : 								if( fSkillValue > 0.0f )

  0ee58	d9 45 d4	 fld	 DWORD PTR _fSkillValue$237066[ebp]
  0ee5b	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0ee61	df e0		 fnstsw	 ax
  0ee63	f6 c4 41	 test	 ah, 65			; 00000041H
  0ee66	75 43		 jne	 SHORT $LN2@MLS_SkillF@5

; 6793 : 								{
; 6794 : 									float fpercent = rand()%100;

  0ee68	e8 00 00 00 00	 call	 _rand
  0ee6d	99		 cdq
  0ee6e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0ee73	f7 f9		 idiv	 ecx
  0ee75	89 55 8c	 mov	 DWORD PTR tv314[ebp], edx
  0ee78	db 45 8c	 fild	 DWORD PTR tv314[ebp]
  0ee7b	d9 5d d0	 fstp	 DWORD PTR _fpercent$237068[ebp]

; 6795 : 
; 6796 : 									if( fpercent < fSkillValue )

  0ee7e	d9 45 d0	 fld	 DWORD PTR _fpercent$237068[ebp]
  0ee81	d9 45 d4	 fld	 DWORD PTR _fSkillValue$237066[ebp]
  0ee84	de d9		 fcompp
  0ee86	df e0		 fnstsw	 ax
  0ee88	f6 c4 41	 test	 ah, 65			; 00000041H
  0ee8b	75 1e		 jne	 SHORT $LN2@MLS_SkillF@5

; 6797 : 									{
; 6798 : 										gObjBackSpring2(&gObj[tObjNum],lpObj,2);

  0ee8d	6a 02		 push	 2
  0ee8f	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ee92	50		 push	 eax
  0ee93	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0ee96	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0ee9c	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0eea2	51		 push	 ecx
  0eea3	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  0eea8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@MLS_SkillF@5:

; 6799 : 									}
; 6800 : 								}
; 6801 : 							}
; 6802 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  0eeab	6a 00		 push	 0
  0eead	6a 00		 push	 0
  0eeaf	6a 00		 push	 0
  0eeb1	6a 00		 push	 0
  0eeb3	6a 00		 push	 0
  0eeb5	6a 01		 push	 1
  0eeb7	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0eeba	50		 push	 eax
  0eebb	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0eebe	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0eec4	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0eeca	51		 push	 ecx
  0eecb	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0eece	52		 push	 edx
  0eecf	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0eed4	83 c4 24	 add	 esp, 36			; 00000024H

; 6803 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  0eed7	6a 00		 push	 0
  0eed9	6a 00		 push	 0
  0eedb	6a 00		 push	 0
  0eedd	6a 00		 push	 0
  0eedf	6a 00		 push	 0
  0eee1	6a 01		 push	 1
  0eee3	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0eee6	50		 push	 eax
  0eee7	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  0eeea	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0eef0	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0eef6	51		 push	 ecx
  0eef7	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0eefa	52		 push	 edx
  0eefb	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0ef00	83 c4 24	 add	 esp, 36			; 00000024H
$LN5@MLS_SkillF@5:

; 6804 : 						}
; 6805 : 
; 6806 : 						HitCount++;

  0ef03	8b 45 e8	 mov	 eax, DWORD PTR _HitCount$[ebp]
  0ef06	83 c0 01	 add	 eax, 1
  0ef09	89 45 e8	 mov	 DWORD PTR _HitCount$[ebp], eax
$LN9@MLS_SkillF@5:

; 6807 : 					}
; 6808 : 				}
; 6809 : 			}
; 6810 : 		}
; 6811 : 
; 6812 : 		count++;

  0ef0c	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0ef0f	83 c0 01	 add	 eax, 1
  0ef12	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax

; 6813 : 		if(count > MAX_VIEWPORT -1)

  0ef15	83 7d ec 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0ef19	7e 02		 jle	 SHORT $LN1@MLS_SkillF@5

; 6814 : 		{
; 6815 : 			break;

  0ef1b	eb 05		 jmp	 SHORT $LN23@MLS_SkillF@5
$LN1@MLS_SkillF@5:

; 6816 : 		}
; 6817 : 	}

  0ef1d	e9 d2 fc ff ff	 jmp	 $LN24@MLS_SkillF@5
$LN23@MLS_SkillF@5:

; 6818 : 
; 6819 : }

  0ef22	5f		 pop	 edi
  0ef23	5e		 pop	 esi
  0ef24	5b		 pop	 ebx
  0ef25	8b e5		 mov	 esp, ebp
  0ef27	5d		 pop	 ebp
  0ef28	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike
; Function compile flags: /Odtp /ZI
tv137 = -108						; size = 4
tv147 = -104						; size = 4
tv138 = -104						; size = 4
_CallMonIndex$237102 = -36				; size = 4
_EnableAttack$ = -32					; size = 4
_DuelIndex$ = -28					; size = 4
_HitCount$ = -24					; size = 4
_count$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_bSuccess$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness
; _this$ = ecx

; 6824 : {

  0ef30	55		 push	 ebp
  0ef31	8b ec		 mov	 ebp, esp
  0ef33	83 ec 6c	 sub	 esp, 108		; 0000006cH
  0ef36	53		 push	 ebx
  0ef37	56		 push	 esi
  0ef38	57		 push	 edi
  0ef39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6825 : 	LPOBJ lpObj = &gObj[aIndex];

  0ef3c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0ef3f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ef45	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ef4b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6826 : 	int bSuccess = FALSE;

  0ef4e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 0

; 6827 : 	int tObjNum;
; 6828 : 	int count = 0;

  0ef55	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 6829 : 	int HitCount = 0;

  0ef5c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 6830 : 	int DuelIndex = lpObj->m_iDuelUser;

  0ef63	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ef66	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0ef6c	89 4d e4	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 6831 : 	int EnableAttack;
; 6832 : 
; 6833 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  0ef6f	6a 01		 push	 1
  0ef71	8b 45 18	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0ef74	50		 push	 eax
  0ef75	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0ef78	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0ef7c	52		 push	 edx
  0ef7d	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ef80	50		 push	 eax
  0ef81	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0ef86	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@MLS_SkillW@3:

; 6834 : 
; 6835 : 	while( TRUE )

  0ef89	b8 01 00 00 00	 mov	 eax, 1
  0ef8e	85 c0		 test	 eax, eax
  0ef90	0f 84 e3 02 00
	00		 je	 $LN19@MLS_SkillW@3

; 6836 : 	{
; 6837 : 		if(lpObj->VpPlayer2[count].state != 0)

  0ef96	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0ef99	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0ef9c	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ef9f	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0efa7	85 d2		 test	 edx, edx
  0efa9	0f 84 b4 02 00
	00		 je	 $LN18@MLS_SkillW@3

; 6838 : 		{
; 6839 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0efaf	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0efb2	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0efb5	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0efb8	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0efc0	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 6840 : 
; 6841 : 			if( tObjNum >= 0 )

  0efc3	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0efc7	0f 8c 96 02 00
	00		 jl	 $LN18@MLS_SkillW@3

; 6842 : 			{
; 6843 : 				EnableAttack = 0;

  0efcd	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 6844 : 
; 6845 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0efd4	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0efd7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0efda	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0efdd	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0efe5	83 fa 02	 cmp	 edx, 2
  0efe8	75 25		 jne	 SHORT $LN16@MLS_SkillW@3
  0efea	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0efed	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0eff3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0eff9	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0f001	7d 0c		 jge	 SHORT $LN16@MLS_SkillW@3

; 6846 : 				{
; 6847 : 					EnableAttack = 1;

  0f003	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0f00a	e9 fc 01 00 00	 jmp	 $LN15@MLS_SkillW@3
$LN16@MLS_SkillW@3:

; 6848 : 				}
; 6849 : 				else if(DuelIndex == tObjNum)

  0f00f	8b 45 e4	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0f012	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0f015	75 0c		 jne	 SHORT $LN14@MLS_SkillW@3

; 6850 : 				{
; 6851 : 					EnableAttack = 1;

  0f017	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1

; 6852 : 				}
; 6853 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||

  0f01e	e9 e8 01 00 00	 jmp	 $LN15@MLS_SkillW@3
$LN14@MLS_SkillW@3:

; 6854 : 						 IT_MAP_RANGE(lpObj->MapNumber) ||
; 6855 : 						 lpObj->MapNumber == MAP_INDEX_VULCAN)

  0f023	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f026	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0f02d	83 f9 35	 cmp	 ecx, 53			; 00000035H
  0f030	75 09		 jne	 SHORT $LN25@MLS_SkillW@3
  0f032	c7 45 98 01 00
	00 00		 mov	 DWORD PTR tv138[ebp], 1
  0f039	eb 33		 jmp	 SHORT $LN26@MLS_SkillW@3
$LN25@MLS_SkillW@3:
  0f03b	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0f03e	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0f045	83 f8 12	 cmp	 eax, 18			; 00000012H
  0f048	7d 09		 jge	 SHORT $LN23@MLS_SkillW@3
  0f04a	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
  0f051	eb 15		 jmp	 SHORT $LN24@MLS_SkillW@3
$LN23@MLS_SkillW@3:
  0f053	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f056	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  0f05d	33 c0		 xor	 eax, eax
  0f05f	83 fa 17	 cmp	 edx, 23			; 00000017H
  0f062	0f 9e c0	 setle	 al
  0f065	89 45 94	 mov	 DWORD PTR tv137[ebp], eax
$LN24@MLS_SkillW@3:
  0f068	8b 4d 94	 mov	 ecx, DWORD PTR tv137[ebp]
  0f06b	89 4d 98	 mov	 DWORD PTR tv138[ebp], ecx
$LN26@MLS_SkillW@3:
  0f06e	83 7d 98 00	 cmp	 DWORD PTR tv138[ebp], 0
  0f072	75 42		 jne	 SHORT $LN11@MLS_SkillW@3
  0f074	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f077	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0f07e	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  0f081	7d 09		 jge	 SHORT $LN27@MLS_SkillW@3
  0f083	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv147[ebp], 0
  0f08a	eb 15		 jmp	 SHORT $LN28@MLS_SkillW@3
$LN27@MLS_SkillW@3:
  0f08c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0f08f	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0f096	33 c9		 xor	 ecx, ecx
  0f098	83 f8 32	 cmp	 eax, 50			; 00000032H
  0f09b	0f 9e c1	 setle	 cl
  0f09e	89 4d 98	 mov	 DWORD PTR tv147[ebp], ecx
$LN28@MLS_SkillW@3:
  0f0a1	83 7d 98 00	 cmp	 DWORD PTR tv147[ebp], 0
  0f0a5	75 0f		 jne	 SHORT $LN11@MLS_SkillW@3
  0f0a7	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f0aa	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0f0b1	83 f9 3f	 cmp	 ecx, 63			; 0000003fH
  0f0b4	75 0c		 jne	 SHORT $LN12@MLS_SkillW@3
$LN11@MLS_SkillW@3:

; 6856 : 				{
; 6857 : 					EnableAttack = 1;

  0f0b6	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0f0bd	e9 49 01 00 00	 jmp	 $LN15@MLS_SkillW@3
$LN12@MLS_SkillW@3:

; 6858 : 				}
; 6859 : 
; 6860 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0f0c2	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0f0c5	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0f0c8	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f0cb	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0f0d3	83 fa 03	 cmp	 edx, 3
  0f0d6	0f 84 99 00 00
	00		 je	 $LN9@MLS_SkillW@3
  0f0dc	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f0df	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f0e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f0eb	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0f0f3	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0f0f6	75 7d		 jne	 SHORT $LN9@MLS_SkillW@3
  0f0f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0f0fd	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0f102	83 f8 07	 cmp	 eax, 7
  0f105	75 6e		 jne	 SHORT $LN9@MLS_SkillW@3

; 6861 : 				{
; 6862 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0f107	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f10a	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0f111	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0f114	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0f11a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f11f	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0f127	3b ca		 cmp	 ecx, edx
  0f129	74 45		 je	 SHORT $LN8@MLS_SkillW@3

; 6863 : 					{
; 6864 : 						if( gObj[tObjNum].Class != 283 &&
; 6865 : 							gObj[tObjNum].Class != 277 )

  0f12b	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f12e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f13a	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  0f142	81 fa 1b 01 00
	00		 cmp	 edx, 283		; 0000011bH
  0f148	74 26		 je	 SHORT $LN8@MLS_SkillW@3
  0f14a	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f14d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f153	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f159	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  0f161	81 fa 15 01 00
	00		 cmp	 edx, 277		; 00000115H
  0f167	74 07		 je	 SHORT $LN8@MLS_SkillW@3

; 6866 : 							EnableAttack = 1;

  0f169	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN8@MLS_SkillW@3:

; 6867 : 					}
; 6868 : 				}
; 6869 : 
; 6870 : 				else

  0f170	e9 96 00 00 00	 jmp	 $LN15@MLS_SkillW@3
$LN9@MLS_SkillW@3:

; 6871 : 				{
; 6872 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0f175	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f178	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f17e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f184	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0f187	89 55 dc	 mov	 DWORD PTR _CallMonIndex$237102[ebp], edx

; 6873 : 
; 6874 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0f18a	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f18d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f199	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0f19e	83 fa 02	 cmp	 edx, 2
  0f1a1	75 40		 jne	 SHORT $LN5@MLS_SkillW@3
  0f1a3	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f1a6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f1ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f1b2	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0f1ba	7c 27		 jl	 SHORT $LN5@MLS_SkillW@3

; 6875 : 					{
; 6876 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0f1bc	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f1bf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f1c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f1cb	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0f1d2	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0f1d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f1dd	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0f1e0	89 4d dc	 mov	 DWORD PTR _CallMonIndex$237102[ebp], ecx
$LN5@MLS_SkillW@3:

; 6877 : 					}
; 6878 : 
; 6879 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0f1e3	8b 45 dc	 mov	 eax, DWORD PTR _CallMonIndex$237102[ebp]
  0f1e6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f1ec	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f1f2	50		 push	 eax
  0f1f3	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f1f6	51		 push	 ecx
  0f1f7	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0f1fc	83 c4 08	 add	 esp, 8
  0f1ff	83 f8 01	 cmp	 eax, 1
  0f202	75 07		 jne	 SHORT $LN15@MLS_SkillW@3

; 6880 : 					{
; 6881 : 						EnableAttack = 1;

  0f204	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN15@MLS_SkillW@3:

; 6882 : 					}
; 6883 : 				}
; 6884 : 
; 6885 : 				if( EnableAttack != 0 &&
; 6886 : 					gObjCalDistance(lpObj,&gObj[tObjNum]) < 5 )

  0f20b	83 7d e0 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0f20f	74 52		 je	 SHORT $LN18@MLS_SkillW@3
  0f211	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f214	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f21a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f220	50		 push	 eax
  0f221	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f224	51		 push	 ecx
  0f225	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0f22a	83 c4 08	 add	 esp, 8
  0f22d	83 f8 05	 cmp	 eax, 5
  0f230	7d 31		 jge	 SHORT $LN18@MLS_SkillW@3

; 6887 : 				{
; 6888 : 					gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,700,lpMagic->m_Skill,0);

  0f232	6a 00		 push	 0
  0f234	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0f237	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0f23a	51		 push	 ecx
  0f23b	68 bc 02 00 00	 push	 700			; 000002bcH
  0f240	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0f243	52		 push	 edx
  0f244	6a 32		 push	 50			; 00000032H
  0f246	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f249	50		 push	 eax
  0f24a	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0f24f	83 c4 18	 add	 esp, 24			; 00000018H

; 6889 : 					HitCount++;

  0f252	8b 45 e8	 mov	 eax, DWORD PTR _HitCount$[ebp]
  0f255	83 c0 01	 add	 eax, 1
  0f258	89 45 e8	 mov	 DWORD PTR _HitCount$[ebp], eax

; 6890 : 
; 6891 : 					if(HitCount >= 5)

  0f25b	83 7d e8 05	 cmp	 DWORD PTR _HitCount$[ebp], 5
  0f25f	7c 02		 jl	 SHORT $LN18@MLS_SkillW@3

; 6892 : 					{
; 6893 : 						break;

  0f261	eb 16		 jmp	 SHORT $LN19@MLS_SkillW@3
$LN18@MLS_SkillW@3:

; 6894 : 					}
; 6895 : 				}
; 6896 : 			}
; 6897 : 		}
; 6898 : 
; 6899 : 		count++;

  0f263	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0f266	83 c0 01	 add	 eax, 1
  0f269	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax

; 6900 : 
; 6901 : 		if( count > MAX_VIEWPORT -1)

  0f26c	83 7d ec 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0f270	7e 02		 jle	 SHORT $LN1@MLS_SkillW@3

; 6902 : 		{
; 6903 : 			break;

  0f272	eb 05		 jmp	 SHORT $LN19@MLS_SkillW@3
$LN1@MLS_SkillW@3:

; 6904 : 		}
; 6905 : 	}

  0f274	e9 10 fd ff ff	 jmp	 $LN20@MLS_SkillW@3
$LN19@MLS_SkillW@3:

; 6906 : 
; 6907 : return bSuccess;

  0f279	8b 45 f4	 mov	 eax, DWORD PTR _bSuccess$[ebp]

; 6908 : }

  0f27c	5f		 pop	 edi
  0f27d	5e		 pop	 esi
  0f27e	5b		 pop	 ebx
  0f27f	8b e5		 mov	 esp, ebp
  0f281	5d		 pop	 ebp
  0f282	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness
; Function compile flags: /Odtp /ZI
tv137 = -108						; size = 4
tv147 = -104						; size = 4
tv138 = -104						; size = 4
_CallMonIndex$237139 = -36				; size = 4
_EnableAttack$ = -32					; size = 4
_DuelIndex$ = -28					; size = 4
_HitCount$ = -24					; size = 4
_count$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_bSuccess$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation
; _this$ = ecx

; 6911 : {

  0f290	55		 push	 ebp
  0f291	8b ec		 mov	 ebp, esp
  0f293	83 ec 6c	 sub	 esp, 108		; 0000006cH
  0f296	53		 push	 ebx
  0f297	56		 push	 esi
  0f298	57		 push	 edi
  0f299	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6912 : 	LPOBJ lpObj = &gObj[aIndex];

  0f29c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0f29f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f2a5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f2ab	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 6913 : 	int bSuccess = FALSE;

  0f2ae	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 0

; 6914 : 	int tObjNum;
; 6915 : 	int count = 0;

  0f2b5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 6916 : 	int HitCount = 0;

  0f2bc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 6917 : 	int DuelIndex = lpObj->m_iDuelUser;

  0f2c3	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f2c6	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0f2cc	89 4d e4	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 6918 : 	int EnableAttack;
; 6919 : 
; 6920 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  0f2cf	6a 01		 push	 1
  0f2d1	8b 45 18	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0f2d4	50		 push	 eax
  0f2d5	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0f2d8	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0f2dc	52		 push	 edx
  0f2dd	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f2e0	50		 push	 eax
  0f2e1	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0f2e6	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@MLS_SkillI@2:

; 6921 : 
; 6922 : 	while( TRUE )

  0f2e9	b8 01 00 00 00	 mov	 eax, 1
  0f2ee	85 c0		 test	 eax, eax
  0f2f0	0f 84 e3 02 00
	00		 je	 $LN19@MLS_SkillI@2

; 6923 : 	{
; 6924 : 		if(lpObj->VpPlayer2[count].state != 0)

  0f2f6	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0f2f9	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0f2fc	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f2ff	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0f307	85 d2		 test	 edx, edx
  0f309	0f 84 b4 02 00
	00		 je	 $LN18@MLS_SkillI@2

; 6925 : 		{
; 6926 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0f30f	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0f312	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0f315	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f318	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0f320	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 6927 : 
; 6928 : 			if( tObjNum >= 0 )

  0f323	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0f327	0f 8c 96 02 00
	00		 jl	 $LN18@MLS_SkillI@2

; 6929 : 			{
; 6930 : 				EnableAttack = 0;

  0f32d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 6931 : 
; 6932 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0f334	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0f337	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0f33a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f33d	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0f345	83 fa 02	 cmp	 edx, 2
  0f348	75 25		 jne	 SHORT $LN16@MLS_SkillI@2
  0f34a	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f34d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f353	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f359	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0f361	7d 0c		 jge	 SHORT $LN16@MLS_SkillI@2

; 6933 : 				{
; 6934 : 					EnableAttack = 1;

  0f363	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0f36a	e9 fc 01 00 00	 jmp	 $LN15@MLS_SkillI@2
$LN16@MLS_SkillI@2:

; 6935 : 				}
; 6936 : 				else if(DuelIndex == tObjNum)

  0f36f	8b 45 e4	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0f372	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0f375	75 0c		 jne	 SHORT $LN14@MLS_SkillI@2

; 6937 : 				{
; 6938 : 					EnableAttack = 1;

  0f377	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1

; 6939 : 				}
; 6940 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||

  0f37e	e9 e8 01 00 00	 jmp	 $LN15@MLS_SkillI@2
$LN14@MLS_SkillI@2:

; 6941 : 						 IT_MAP_RANGE(lpObj->MapNumber) ||
; 6942 : 						 lpObj->MapNumber == MAP_INDEX_VULCAN)

  0f383	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f386	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0f38d	83 f9 35	 cmp	 ecx, 53			; 00000035H
  0f390	75 09		 jne	 SHORT $LN25@MLS_SkillI@2
  0f392	c7 45 98 01 00
	00 00		 mov	 DWORD PTR tv138[ebp], 1
  0f399	eb 33		 jmp	 SHORT $LN26@MLS_SkillI@2
$LN25@MLS_SkillI@2:
  0f39b	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0f39e	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0f3a5	83 f8 12	 cmp	 eax, 18			; 00000012H
  0f3a8	7d 09		 jge	 SHORT $LN23@MLS_SkillI@2
  0f3aa	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
  0f3b1	eb 15		 jmp	 SHORT $LN24@MLS_SkillI@2
$LN23@MLS_SkillI@2:
  0f3b3	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f3b6	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  0f3bd	33 c0		 xor	 eax, eax
  0f3bf	83 fa 17	 cmp	 edx, 23			; 00000017H
  0f3c2	0f 9e c0	 setle	 al
  0f3c5	89 45 94	 mov	 DWORD PTR tv137[ebp], eax
$LN24@MLS_SkillI@2:
  0f3c8	8b 4d 94	 mov	 ecx, DWORD PTR tv137[ebp]
  0f3cb	89 4d 98	 mov	 DWORD PTR tv138[ebp], ecx
$LN26@MLS_SkillI@2:
  0f3ce	83 7d 98 00	 cmp	 DWORD PTR tv138[ebp], 0
  0f3d2	75 42		 jne	 SHORT $LN11@MLS_SkillI@2
  0f3d4	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f3d7	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0f3de	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  0f3e1	7d 09		 jge	 SHORT $LN27@MLS_SkillI@2
  0f3e3	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv147[ebp], 0
  0f3ea	eb 15		 jmp	 SHORT $LN28@MLS_SkillI@2
$LN27@MLS_SkillI@2:
  0f3ec	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0f3ef	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0f3f6	33 c9		 xor	 ecx, ecx
  0f3f8	83 f8 32	 cmp	 eax, 50			; 00000032H
  0f3fb	0f 9e c1	 setle	 cl
  0f3fe	89 4d 98	 mov	 DWORD PTR tv147[ebp], ecx
$LN28@MLS_SkillI@2:
  0f401	83 7d 98 00	 cmp	 DWORD PTR tv147[ebp], 0
  0f405	75 0f		 jne	 SHORT $LN11@MLS_SkillI@2
  0f407	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f40a	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0f411	83 f9 3f	 cmp	 ecx, 63			; 0000003fH
  0f414	75 0c		 jne	 SHORT $LN12@MLS_SkillI@2
$LN11@MLS_SkillI@2:

; 6943 : 				{
; 6944 : 					EnableAttack = 1;

  0f416	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0f41d	e9 49 01 00 00	 jmp	 $LN15@MLS_SkillI@2
$LN12@MLS_SkillI@2:

; 6945 : 				}
; 6946 : 
; 6947 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0f422	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0f425	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0f428	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f42b	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0f433	83 fa 03	 cmp	 edx, 3
  0f436	0f 84 99 00 00
	00		 je	 $LN9@MLS_SkillI@2
  0f43c	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f43f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f445	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f44b	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0f453	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0f456	75 7d		 jne	 SHORT $LN9@MLS_SkillI@2
  0f458	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0f45d	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0f462	83 f8 07	 cmp	 eax, 7
  0f465	75 6e		 jne	 SHORT $LN9@MLS_SkillI@2

; 6948 : 				{
; 6949 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0f467	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f46a	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0f471	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0f474	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0f47a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f47f	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0f487	3b ca		 cmp	 ecx, edx
  0f489	74 45		 je	 SHORT $LN8@MLS_SkillI@2

; 6950 : 					{
; 6951 : 						if( gObj[tObjNum].Class != 283 &&
; 6952 : 							gObj[tObjNum].Class != 277 )

  0f48b	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f48e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f494	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f49a	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  0f4a2	81 fa 1b 01 00
	00		 cmp	 edx, 283		; 0000011bH
  0f4a8	74 26		 je	 SHORT $LN8@MLS_SkillI@2
  0f4aa	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f4ad	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f4b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f4b9	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  0f4c1	81 fa 15 01 00
	00		 cmp	 edx, 277		; 00000115H
  0f4c7	74 07		 je	 SHORT $LN8@MLS_SkillI@2

; 6953 : 							EnableAttack = 1;

  0f4c9	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN8@MLS_SkillI@2:

; 6954 : 					}
; 6955 : 				}
; 6956 : 
; 6957 : 				else

  0f4d0	e9 96 00 00 00	 jmp	 $LN15@MLS_SkillI@2
$LN9@MLS_SkillI@2:

; 6958 : 				{
; 6959 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0f4d5	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f4d8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f4de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f4e4	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0f4e7	89 55 dc	 mov	 DWORD PTR _CallMonIndex$237139[ebp], edx

; 6960 : 
; 6961 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0f4ea	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f4ed	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f4f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f4f9	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0f4fe	83 fa 02	 cmp	 edx, 2
  0f501	75 40		 jne	 SHORT $LN5@MLS_SkillI@2
  0f503	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f506	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f50c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f512	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0f51a	7c 27		 jl	 SHORT $LN5@MLS_SkillI@2

; 6962 : 					{
; 6963 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0f51c	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f51f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f525	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f52b	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0f532	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0f538	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f53d	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0f540	89 4d dc	 mov	 DWORD PTR _CallMonIndex$237139[ebp], ecx
$LN5@MLS_SkillI@2:

; 6964 : 					}
; 6965 : 
; 6966 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0f543	8b 45 dc	 mov	 eax, DWORD PTR _CallMonIndex$237139[ebp]
  0f546	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f54c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f552	50		 push	 eax
  0f553	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f556	51		 push	 ecx
  0f557	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0f55c	83 c4 08	 add	 esp, 8
  0f55f	83 f8 01	 cmp	 eax, 1
  0f562	75 07		 jne	 SHORT $LN15@MLS_SkillI@2

; 6967 : 					{
; 6968 : 						EnableAttack = 1;

  0f564	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN15@MLS_SkillI@2:

; 6969 : 					}
; 6970 : 				}
; 6971 : 
; 6972 : 				if( EnableAttack != 0 &&
; 6973 : 					gObjCalDistance(lpObj,&gObj[tObjNum]) < 5 )

  0f56b	83 7d e0 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0f56f	74 52		 je	 SHORT $LN18@MLS_SkillI@2
  0f571	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f574	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f57a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f580	50		 push	 eax
  0f581	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f584	51		 push	 ecx
  0f585	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0f58a	83 c4 08	 add	 esp, 8
  0f58d	83 f8 05	 cmp	 eax, 5
  0f590	7d 31		 jge	 SHORT $LN18@MLS_SkillI@2

; 6974 : 				{
; 6975 : 					gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,700,lpMagic->m_Skill,0);

  0f592	6a 00		 push	 0
  0f594	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0f597	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0f59a	51		 push	 ecx
  0f59b	68 bc 02 00 00	 push	 700			; 000002bcH
  0f5a0	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0f5a3	52		 push	 edx
  0f5a4	6a 32		 push	 50			; 00000032H
  0f5a6	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f5a9	50		 push	 eax
  0f5aa	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0f5af	83 c4 18	 add	 esp, 24			; 00000018H

; 6976 : 					HitCount++;

  0f5b2	8b 45 e8	 mov	 eax, DWORD PTR _HitCount$[ebp]
  0f5b5	83 c0 01	 add	 eax, 1
  0f5b8	89 45 e8	 mov	 DWORD PTR _HitCount$[ebp], eax

; 6977 : 
; 6978 : 					if(HitCount >= 5)

  0f5bb	83 7d e8 05	 cmp	 DWORD PTR _HitCount$[ebp], 5
  0f5bf	7c 02		 jl	 SHORT $LN18@MLS_SkillI@2

; 6979 : 					{
; 6980 : 						break;

  0f5c1	eb 16		 jmp	 SHORT $LN19@MLS_SkillI@2
$LN18@MLS_SkillI@2:

; 6981 : 					}
; 6982 : 				}
; 6983 : 			}
; 6984 : 		}
; 6985 : 
; 6986 : 		count++;

  0f5c3	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0f5c6	83 c0 01	 add	 eax, 1
  0f5c9	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax

; 6987 : 
; 6988 : 		if( count > MAX_VIEWPORT -1)

  0f5cc	83 7d ec 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0f5d0	7e 02		 jle	 SHORT $LN1@MLS_SkillI@2

; 6989 : 		{
; 6990 : 			break;

  0f5d2	eb 05		 jmp	 SHORT $LN19@MLS_SkillI@2
$LN1@MLS_SkillI@2:

; 6991 : 		}
; 6992 : 	}

  0f5d4	e9 10 fd ff ff	 jmp	 $LN20@MLS_SkillI@2
$LN19@MLS_SkillI@2:

; 6993 : 
; 6994 : return bSuccess;

  0f5d9	8b 45 f4	 mov	 eax, DWORD PTR _bSuccess$[ebp]

; 6995 : }

  0f5dc	5f		 pop	 edi
  0f5dd	5e		 pop	 esi
  0f5de	5b		 pop	 ebx
  0f5df	8b e5		 mov	 esp, ebp
  0f5e1	5d		 pop	 ebp
  0f5e2	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation
_TEXT	ENDS
EXTRN	?GCDamageSend@@YAXHHHHHH@Z:PROC			; GCDamageSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv193 = -136						; size = 4
tv542 = -132						; size = 4
tv203 = -132						; size = 4
tv194 = -132						; size = 4
_fpercent$237192 = -64					; size = 4
_fSkillValue$237190 = -60				; size = 4
_Time$237185 = -56					; size = 4
_Value$237183 = -52					; size = 4
_BuffNumber$237182 = -48				; size = 4
_CallMonIndex$237178 = -44				; size = 4
_EnableAttack$ = -40					; size = 4
_Tmp$237160 = -36					; size = 4
_Rate$ = -32						; size = 4
_DuelIndex$ = -28					; size = 4
_count$ = -24						; size = 4
_Angle$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_bSuccess$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillBlind
; _this$ = ecx

; 6998 : {

  0f5f0	55		 push	 ebp
  0f5f1	8b ec		 mov	 ebp, esp
  0f5f3	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  0f5f9	53		 push	 ebx
  0f5fa	56		 push	 esi
  0f5fb	57		 push	 edi
  0f5fc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6999 : 	LPOBJ lpObj = &gObj[aIndex];

  0f5ff	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0f602	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f608	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f60e	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 7000 : 	int bSuccess = FALSE;

  0f611	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 0

; 7001 : 	int tObjNum;
; 7002 : 
; 7003 : 	int Angle = MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  0f618	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0f61b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f621	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f627	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0f62f	52		 push	 edx
  0f630	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0f633	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f639	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f63f	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0f647	52		 push	 edx
  0f648	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f64b	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0f652	51		 push	 ecx
  0f653	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0f656	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  0f65d	50		 push	 eax
  0f65e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0f661	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
  0f666	89 45 ec	 mov	 DWORD PTR _Angle$[ebp], eax

; 7004 : 	int count = 0;

  0f669	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 7005 : 
; 7006 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  0f670	6a 01		 push	 1
  0f672	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0f675	50		 push	 eax
  0f676	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0f679	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0f67d	52		 push	 edx
  0f67e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f681	50		 push	 eax
  0f682	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0f687	83 c4 10	 add	 esp, 16			; 00000010H

; 7007 : 
; 7008 : 	int DuelIndex = lpObj->m_iDuelUser;

  0f68a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f68d	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0f693	89 4d e4	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 7009 : 	int Rate = 0;

  0f696	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Rate$[ebp], 0

; 7010 : 
; 7011 : 	if( gObj[aTargetIndex].Type == OBJ_MONSTER )

  0f69d	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0f6a0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f6a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f6ac	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0f6b1	83 fa 02	 cmp	 edx, 2
  0f6b4	75 2c		 jne	 SHORT $LN30@MLS_SkillB@3

; 7012 : 	{
; 7013 : 		Rate = lpObj->m_AttackRating * (20 + lpObj->Energy / 50) / 100;

  0f6b6	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f6b9	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  0f6c0	99		 cdq
  0f6c1	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0f6c6	f7 f9		 idiv	 ecx
  0f6c8	83 c0 14	 add	 eax, 20			; 00000014H
  0f6cb	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0f6ce	0f af 82 88 04
	00 00		 imul	 eax, DWORD PTR [edx+1160]
  0f6d5	99		 cdq
  0f6d6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0f6db	f7 f9		 idiv	 ecx
  0f6dd	89 45 e0	 mov	 DWORD PTR _Rate$[ebp], eax

; 7014 : 	}
; 7015 : 	else

  0f6e0	eb 4b		 jmp	 SHORT $LN29@MLS_SkillB@3
$LN30@MLS_SkillB@3:

; 7016 : 	{
; 7017 : 		int Tmp = lpObj->Level * 3 + lpObj->Dexterity * 35 / 10;

  0f6e2	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f6e5	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0f6ec	6b c9 03	 imul	 ecx, 3
  0f6ef	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0f6f2	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  0f6f9	6b c0 23	 imul	 eax, 35			; 00000023H
  0f6fc	99		 cdq
  0f6fd	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  0f702	f7 fe		 idiv	 esi
  0f704	03 c8		 add	 ecx, eax
  0f706	89 4d dc	 mov	 DWORD PTR _Tmp$237160[ebp], ecx

; 7018 : 		Rate = Tmp * (20 + lpObj->Energy / 50) / 100;

  0f709	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f70c	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  0f713	99		 cdq
  0f714	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0f719	f7 f9		 idiv	 ecx
  0f71b	83 c0 14	 add	 eax, 20			; 00000014H
  0f71e	0f af 45 dc	 imul	 eax, DWORD PTR _Tmp$237160[ebp]
  0f722	99		 cdq
  0f723	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0f728	f7 f9		 idiv	 ecx
  0f72a	89 45 e0	 mov	 DWORD PTR _Rate$[ebp], eax
$LN29@MLS_SkillB@3:

; 7019 : 	}
; 7020 : 
; 7021 : 	if( Rate < rand()%100 )

  0f72d	e8 00 00 00 00	 call	 _rand
  0f732	99		 cdq
  0f733	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0f738	f7 f9		 idiv	 ecx
  0f73a	39 55 e0	 cmp	 DWORD PTR _Rate$[ebp], edx
  0f73d	7d 30		 jge	 SHORT $LN28@MLS_SkillB@3

; 7022 : 	{
; 7023 : 		GCDamageSend(lpObj->m_Index,gObj[aTargetIndex].m_Index,0,0,0,0);

  0f73f	6a 00		 push	 0
  0f741	6a 00		 push	 0
  0f743	6a 00		 push	 0
  0f745	6a 00		 push	 0
  0f747	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0f74a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f750	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f756	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0f759	52		 push	 edx
  0f75a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f75d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0f75f	51		 push	 ecx
  0f760	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0f765	83 c4 18	 add	 esp, 24			; 00000018H

; 7024 : 		return false;

  0f768	33 c0		 xor	 eax, eax
  0f76a	e9 18 05 00 00	 jmp	 $LN31@MLS_SkillB@3
$LN28@MLS_SkillB@3:

; 7025 : 	}
; 7026 : 
; 7027 : 	int EnableAttack;
; 7028 : 
; 7029 : 	while( TRUE )

  0f76f	b8 01 00 00 00	 mov	 eax, 1
  0f774	85 c0		 test	 eax, eax
  0f776	0f 84 08 05 00
	00		 je	 $LN26@MLS_SkillB@3

; 7030 : 	{
; 7031 : 		if(lpObj->VpPlayer2[count].state != 0)

  0f77c	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0f77f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0f782	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f785	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0f78d	85 d2		 test	 edx, edx
  0f78f	0f 84 d9 04 00
	00		 je	 $LN11@MLS_SkillB@3

; 7032 : 		{
; 7033 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0f795	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0f798	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0f79b	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f79e	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0f7a6	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 7034 : 
; 7035 : 			if( tObjNum >= 0 )

  0f7a9	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0f7ad	0f 8c bb 04 00
	00		 jl	 $LN11@MLS_SkillB@3

; 7036 : 			{
; 7037 : 				EnableAttack = 0;

  0f7b3	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 7038 : 
; 7039 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0f7ba	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0f7bd	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0f7c0	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f7c3	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0f7cb	83 fa 02	 cmp	 edx, 2
  0f7ce	75 25		 jne	 SHORT $LN23@MLS_SkillB@3
  0f7d0	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f7d3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f7d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f7df	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0f7e7	7d 0c		 jge	 SHORT $LN23@MLS_SkillB@3

; 7040 : 				{
; 7041 : 					EnableAttack = 1;

  0f7e9	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0f7f0	e9 dd 01 00 00	 jmp	 $LN12@MLS_SkillB@3
$LN23@MLS_SkillB@3:

; 7042 : 				}
; 7043 : 				else if(tObjNum == aTargetIndex && DuelIndex == tObjNum)

  0f7f5	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f7f8	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0f7fb	75 14		 jne	 SHORT $LN21@MLS_SkillB@3
  0f7fd	8b 45 e4	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0f800	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0f803	75 0c		 jne	 SHORT $LN21@MLS_SkillB@3

; 7044 : 				{
; 7045 : 					EnableAttack = 1;

  0f805	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1

; 7046 : 				}
; 7047 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||

  0f80c	e9 c1 01 00 00	 jmp	 $LN12@MLS_SkillB@3
$LN21@MLS_SkillB@3:

; 7048 : 						 IT_MAP_RANGE(lpObj->MapNumber) || 
; 7049 : 						 lpObj->MapNumber == MAP_INDEX_VULCAN )

  0f811	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f814	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0f81b	83 f9 35	 cmp	 ecx, 53			; 00000035H
  0f81e	75 0c		 jne	 SHORT $LN35@MLS_SkillB@3
  0f820	c7 85 7c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv194[ebp], 1
  0f82a	eb 3f		 jmp	 SHORT $LN36@MLS_SkillB@3
$LN35@MLS_SkillB@3:
  0f82c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0f82f	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0f836	83 f8 12	 cmp	 eax, 18			; 00000012H
  0f839	7d 0c		 jge	 SHORT $LN33@MLS_SkillB@3
  0f83b	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv193[ebp], 0
  0f845	eb 18		 jmp	 SHORT $LN34@MLS_SkillB@3
$LN33@MLS_SkillB@3:
  0f847	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f84a	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  0f851	33 c0		 xor	 eax, eax
  0f853	83 fa 17	 cmp	 edx, 23			; 00000017H
  0f856	0f 9e c0	 setle	 al
  0f859	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv193[ebp], eax
$LN34@MLS_SkillB@3:
  0f85f	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv193[ebp]
  0f865	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv194[ebp], ecx
$LN36@MLS_SkillB@3:
  0f86b	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv194[ebp], 0
  0f872	75 4b		 jne	 SHORT $LN18@MLS_SkillB@3
  0f874	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f877	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0f87e	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  0f881	7d 0c		 jge	 SHORT $LN37@MLS_SkillB@3
  0f883	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv203[ebp], 0
  0f88d	eb 18		 jmp	 SHORT $LN38@MLS_SkillB@3
$LN37@MLS_SkillB@3:
  0f88f	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0f892	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0f899	33 c9		 xor	 ecx, ecx
  0f89b	83 f8 32	 cmp	 eax, 50			; 00000032H
  0f89e	0f 9e c1	 setle	 cl
  0f8a1	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv203[ebp], ecx
$LN38@MLS_SkillB@3:
  0f8a7	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv203[ebp], 0
  0f8ae	75 0f		 jne	 SHORT $LN18@MLS_SkillB@3
  0f8b0	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f8b3	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0f8ba	83 f9 3f	 cmp	 ecx, 63			; 0000003fH
  0f8bd	75 0c		 jne	 SHORT $LN19@MLS_SkillB@3
$LN18@MLS_SkillB@3:

; 7050 : 				{
; 7051 : 					EnableAttack = 1;

  0f8bf	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0f8c6	e9 07 01 00 00	 jmp	 $LN12@MLS_SkillB@3
$LN19@MLS_SkillB@3:

; 7052 : 				}
; 7053 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0f8cb	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0f8ce	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0f8d1	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f8d4	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0f8dc	83 fa 03	 cmp	 edx, 3
  0f8df	74 5b		 je	 SHORT $LN16@MLS_SkillB@3
  0f8e1	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f8e4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f8ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f8f0	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0f8f8	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0f8fb	75 3f		 jne	 SHORT $LN16@MLS_SkillB@3
  0f8fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0f902	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0f907	83 f8 07	 cmp	 eax, 7
  0f90a	75 30		 jne	 SHORT $LN16@MLS_SkillB@3

; 7054 : 				{
; 7055 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0f90c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0f90f	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0f916	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0f919	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0f91f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f924	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0f92c	3b ca		 cmp	 ecx, edx
  0f92e	74 07		 je	 SHORT $LN15@MLS_SkillB@3

; 7056 : 						EnableAttack = 1;

  0f930	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN15@MLS_SkillB@3:

; 7057 : 				}
; 7058 : 				else

  0f937	e9 96 00 00 00	 jmp	 $LN12@MLS_SkillB@3
$LN16@MLS_SkillB@3:

; 7059 : 				{
; 7060 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0f93c	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f93f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f945	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f94b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0f94e	89 55 d4	 mov	 DWORD PTR _CallMonIndex$237178[ebp], edx

; 7061 : 
; 7062 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0f951	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f954	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f95a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f960	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0f965	83 fa 02	 cmp	 edx, 2
  0f968	75 40		 jne	 SHORT $LN13@MLS_SkillB@3
  0f96a	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f96d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f973	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f979	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0f981	7c 27		 jl	 SHORT $LN13@MLS_SkillB@3

; 7063 : 					{
; 7064 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0f983	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f986	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f98c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f992	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0f999	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0f99f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f9a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0f9a7	89 4d d4	 mov	 DWORD PTR _CallMonIndex$237178[ebp], ecx
$LN13@MLS_SkillB@3:

; 7065 : 					}
; 7066 : 
; 7067 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0f9aa	8b 45 d4	 mov	 eax, DWORD PTR _CallMonIndex$237178[ebp]
  0f9ad	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0f9b3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0f9b9	50		 push	 eax
  0f9ba	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0f9bd	51		 push	 ecx
  0f9be	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0f9c3	83 c4 08	 add	 esp, 8
  0f9c6	83 f8 01	 cmp	 eax, 1
  0f9c9	75 07		 jne	 SHORT $LN12@MLS_SkillB@3

; 7068 : 					{
; 7069 : 						EnableAttack = 1;

  0f9cb	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN12@MLS_SkillB@3:

; 7070 : 					}
; 7071 : 				}
; 7072 : 
; 7073 : 				if( EnableAttack != 0 &&
; 7074 : 					tObjNum == aTargetIndex && 
; 7075 : 					gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) != FALSE )

  0f9d2	83 7d d8 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0f9d6	0f 84 92 02 00
	00		 je	 $LN11@MLS_SkillB@3
  0f9dc	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0f9df	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0f9e2	0f 85 86 02 00
	00		 jne	 $LN11@MLS_SkillB@3
  0f9e8	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0f9eb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0f9ee	51		 push	 ecx
  0f9ef	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  0f9f2	52		 push	 edx
  0f9f3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0f9f6	50		 push	 eax
  0f9f7	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  0f9fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  0f9ff	85 c0		 test	 eax, eax
  0fa01	0f 84 67 02 00
	00		 je	 $LN11@MLS_SkillB@3

; 7076 : 				{
; 7077 : 					int BuffNumber = (lpMagic->m_Skill==463) ? 144 : 73;

  0fa07	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0fa0a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0fa0d	81 e9 cf 01 00
	00		 sub	 ecx, 463		; 000001cfH
  0fa13	f7 d9		 neg	 ecx
  0fa15	1b c9		 sbb	 ecx, ecx
  0fa17	83 e1 b9	 and	 ecx, -71		; ffffffb9H
  0fa1a	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0fa20	89 4d d0	 mov	 DWORD PTR _BuffNumber$237182[ebp], ecx

; 7078 : 					int Value = 20 + lpObj->Energy / 50;

  0fa23	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0fa26	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  0fa2d	99		 cdq
  0fa2e	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0fa33	f7 f9		 idiv	 ecx
  0fa35	83 c0 14	 add	 eax, 20			; 00000014H
  0fa38	89 45 cc	 mov	 DWORD PTR _Value$237183[ebp], eax

; 7079 : 
; 7080 : 					if( Value > 100 )

  0fa3b	83 7d cc 64	 cmp	 DWORD PTR _Value$237183[ebp], 100 ; 00000064H
  0fa3f	7e 07		 jle	 SHORT $LN10@MLS_SkillB@3

; 7081 : 						Value = 100;

  0fa41	c7 45 cc 64 00
	00 00		 mov	 DWORD PTR _Value$237183[ebp], 100 ; 00000064H
$LN10@MLS_SkillB@3:

; 7082 : 
; 7083 : 					int Time = 0;

  0fa48	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _Time$237185[ebp], 0

; 7084 : 
; 7085 : 					if( gObj[aTargetIndex].Type == OBJ_MONSTER )

  0fa4f	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0fa52	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fa58	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fa5e	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0fa63	83 fa 02	 cmp	 edx, 2
  0fa66	75 3c		 jne	 SHORT $LN9@MLS_SkillB@3

; 7086 : 					{
; 7087 : 						Time = (9 + lpObj->Energy/46) - (gObj[aTargetIndex].Level / 15);

  0fa68	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0fa6b	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  0fa72	99		 cdq
  0fa73	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  0fa78	f7 f9		 idiv	 ecx
  0fa7a	8b c8		 mov	 ecx, eax
  0fa7c	83 c1 09	 add	 ecx, 9
  0fa7f	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  0fa82	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0fa88	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fa8d	0f bf 84 10 be
	00 00 00	 movsx	 eax, WORD PTR [eax+edx+190]
  0fa95	99		 cdq
  0fa96	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  0fa9b	f7 fe		 idiv	 esi
  0fa9d	2b c8		 sub	 ecx, eax
  0fa9f	89 4d c8	 mov	 DWORD PTR _Time$237185[ebp], ecx
  0faa2	eb 6b		 jmp	 SHORT $LN7@MLS_SkillB@3
$LN9@MLS_SkillB@3:

; 7088 : 					}
; 7089 : 					else if( gObj[aTargetIndex].Type == OBJ_USER )

  0faa4	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0faa7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0faad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fab3	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0fab8	83 fa 01	 cmp	 edx, 1
  0fabb	75 52		 jne	 SHORT $LN7@MLS_SkillB@3

; 7090 : 					{
; 7091 : 						Time = 3 + (lpObj->Energy/210) + (gObj[aTargetIndex].Level-gObj[aTargetIndex].Level) / 100;

  0fabd	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0fac0	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  0fac7	99		 cdq
  0fac8	b9 d2 00 00 00	 mov	 ecx, 210		; 000000d2H
  0facd	f7 f9		 idiv	 ecx
  0facf	8b c8		 mov	 ecx, eax
  0fad1	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  0fad4	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0fada	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fadf	0f bf 84 10 be
	00 00 00	 movsx	 eax, WORD PTR [eax+edx+190]
  0fae7	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  0faea	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0faf0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0faf6	0f bf 94 16 be
	00 00 00	 movsx	 edx, WORD PTR [esi+edx+190]
  0fafe	2b c2		 sub	 eax, edx
  0fb00	99		 cdq
  0fb01	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  0fb06	f7 fe		 idiv	 esi
  0fb08	8d 44 01 03	 lea	 eax, DWORD PTR [ecx+eax+3]
  0fb0c	89 45 c8	 mov	 DWORD PTR _Time$237185[ebp], eax
$LN7@MLS_SkillB@3:

; 7092 : 					}
; 7093 : 					if( BuffNumber == 144 )

  0fb0f	81 7d d0 90 00
	00 00		 cmp	 DWORD PTR _BuffNumber$237182[ebp], 144 ; 00000090H
  0fb16	0f 85 d7 00 00
	00		 jne	 $LN4@MLS_SkillB@3

; 7094 : 					{
; 7095 : 						float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0fb1c	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0fb1f	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0fb23	51		 push	 ecx
  0fb24	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0fb27	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0fb2a	50		 push	 eax
  0fb2b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0fb30	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0fb35	50		 push	 eax
  0fb36	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0fb39	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0fb3e	d9 5d c4	 fstp	 DWORD PTR _fSkillValue$237190[ebp]

; 7096 : 
; 7097 : 						if( fSkillValue > 0.0f )

  0fb41	d9 45 c4	 fld	 DWORD PTR _fSkillValue$237190[ebp]
  0fb44	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0fb4a	df e0		 fnstsw	 ax
  0fb4c	f6 c4 41	 test	 ah, 65			; 00000041H
  0fb4f	0f 85 9e 00 00
	00		 jne	 $LN4@MLS_SkillB@3

; 7098 : 						{
; 7099 : 							float fpercent = rand()%100;

  0fb55	e8 00 00 00 00	 call	 _rand
  0fb5a	99		 cdq
  0fb5b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0fb60	f7 f9		 idiv	 ecx
  0fb62	89 95 7c ff ff
	ff		 mov	 DWORD PTR tv542[ebp], edx
  0fb68	db 85 7c ff ff
	ff		 fild	 DWORD PTR tv542[ebp]
  0fb6e	d9 5d c0	 fstp	 DWORD PTR _fpercent$237192[ebp]

; 7100 : 
; 7101 : 							if( fpercent < fSkillValue )

  0fb71	d9 45 c0	 fld	 DWORD PTR _fpercent$237192[ebp]
  0fb74	d9 45 c4	 fld	 DWORD PTR _fSkillValue$237190[ebp]
  0fb77	de d9		 fcompp
  0fb79	df e0		 fnstsw	 ax
  0fb7b	f6 c4 41	 test	 ah, 65			; 00000041H
  0fb7e	75 73		 jne	 SHORT $LN4@MLS_SkillB@3

; 7102 : 							{
; 7103 : 								if(!g_ExLicense.CheckUser(eExUB::Stone))

  0fb80	6a 37		 push	 55			; 00000037H
  0fb82	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0fb87	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0fb8c	0f b6 c0	 movzx	 eax, al
  0fb8f	85 c0		 test	 eax, eax
  0fb91	75 24		 jne	 SHORT $LN3@MLS_SkillB@3

; 7104 : 								{
; 7105 : 									gObjApplyBuffEffectDuration(&gObj[aTargetIndex],AT_STUN,0,0,0,0,1);

  0fb93	6a 01		 push	 1
  0fb95	6a 00		 push	 0
  0fb97	6a 00		 push	 0
  0fb99	6a 00		 push	 0
  0fb9b	6a 00		 push	 0
  0fb9d	6a 3d		 push	 61			; 0000003dH
  0fb9f	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0fba2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fba8	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fbae	50		 push	 eax
  0fbaf	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0fbb4	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@MLS_SkillB@3:

; 7106 : 								}
; 7107 : 								gObjSetPosition(aTargetIndex,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  0fbb7	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0fbba	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fbc0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fbc6	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0fbce	52		 push	 edx
  0fbcf	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0fbd2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fbd8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fbde	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0fbe6	52		 push	 edx
  0fbe7	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0fbea	50		 push	 eax
  0fbeb	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  0fbf0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@MLS_SkillB@3:

; 7108 : 							}
; 7109 : 						}
; 7110 : 					}
; 7111 : 
; 7112 : 					if( gObjCheckBuffEffectValue(&gObj[aTargetIndex],BuffNumber,Value,0) == TRUE )

  0fbf3	6a 00		 push	 0
  0fbf5	8b 45 cc	 mov	 eax, DWORD PTR _Value$237183[ebp]
  0fbf8	50		 push	 eax
  0fbf9	8b 4d d0	 mov	 ecx, DWORD PTR _BuffNumber$237182[ebp]
  0fbfc	51		 push	 ecx
  0fbfd	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  0fc00	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0fc06	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fc0c	52		 push	 edx
  0fc0d	e8 00 00 00 00	 call	 ?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckBuffEffectValue
  0fc12	83 c4 10	 add	 esp, 16			; 00000010H
  0fc15	0f b6 c0	 movzx	 eax, al
  0fc18	83 f8 01	 cmp	 eax, 1
  0fc1b	75 1e		 jne	 SHORT $LN2@MLS_SkillB@3

; 7113 : 					{
; 7114 : 						GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,0);

  0fc1d	6a 00		 push	 0
  0fc1f	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0fc22	50		 push	 eax
  0fc23	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0fc26	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0fc2a	52		 push	 edx
  0fc2b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0fc2e	50		 push	 eax
  0fc2f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0fc34	83 c4 10	 add	 esp, 16			; 00000010H

; 7115 : 						return FALSE;

  0fc37	33 c0		 xor	 eax, eax
  0fc39	eb 4c		 jmp	 SHORT $LN31@MLS_SkillB@3
$LN2@MLS_SkillB@3:

; 7116 : 					}
; 7117 : 
; 7118 : 					gObjApplyBuffEffectDuration(&gObj[aTargetIndex],BuffNumber,26,Value,0,0,Time);

  0fc3b	8b 45 c8	 mov	 eax, DWORD PTR _Time$237185[ebp]
  0fc3e	50		 push	 eax
  0fc3f	6a 00		 push	 0
  0fc41	6a 00		 push	 0
  0fc43	8b 4d cc	 mov	 ecx, DWORD PTR _Value$237183[ebp]
  0fc46	51		 push	 ecx
  0fc47	6a 1a		 push	 26			; 0000001aH
  0fc49	8b 55 d0	 mov	 edx, DWORD PTR _BuffNumber$237182[ebp]
  0fc4c	52		 push	 edx
  0fc4d	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0fc50	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fc56	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fc5c	50		 push	 eax
  0fc5d	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0fc62	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7119 : 					bSuccess = TRUE;

  0fc65	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 1

; 7120 : 					break;

  0fc6c	eb 16		 jmp	 SHORT $LN26@MLS_SkillB@3
$LN11@MLS_SkillB@3:

; 7121 : 				}
; 7122 : 			}
; 7123 : 		}
; 7124 : 
; 7125 : 		count++;

  0fc6e	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0fc71	83 c0 01	 add	 eax, 1
  0fc74	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax

; 7126 : 
; 7127 : 		if( count > MAX_VIEWPORT -1)

  0fc77	83 7d e8 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0fc7b	7e 02		 jle	 SHORT $LN1@MLS_SkillB@3

; 7128 : 		{
; 7129 : 			break;

  0fc7d	eb 05		 jmp	 SHORT $LN26@MLS_SkillB@3
$LN1@MLS_SkillB@3:

; 7130 : 		}
; 7131 : 	}

  0fc7f	e9 eb fa ff ff	 jmp	 $LN28@MLS_SkillB@3
$LN26@MLS_SkillB@3:

; 7132 : 
; 7133 : return bSuccess;

  0fc84	8b 45 f4	 mov	 eax, DWORD PTR _bSuccess$[ebp]
$LN31@MLS_SkillB@3:

; 7134 : }

  0fc87	5f		 pop	 edi
  0fc88	5e		 pop	 esi
  0fc89	5b		 pop	 ebx
  0fc8a	8b e5		 mov	 esp, ebp
  0fc8c	5d		 pop	 ebp
  0fc8d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillBlind
_TEXT	ENDS
EXTRN	?DecPartyMemberHPandMP@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; DecPartyMemberHPandMP
EXTRN	?SkillElectricSparkHitBox@@3VCSkillHitBox@@A:BYTE ; SkillElectricSparkHitBox
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_CallMonIndex$237230 = -48				; size = 4
_EnableAttack$ = -44					; size = 4
_Hit$ = -40						; size = 4
_delaytime$ = -36					; size = 4
_iangle$ = -32						; size = 4
_DuelIndex$ = -28					; size = 4
_count$ = -24						; size = 4
_tObjNum$ = -20						; size = 4
_TargePosy$ = -16					; size = 4
_TargePosx$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_dir$ = 24						; size = 1
_TargetPos$ = 28					; size = 1
_aTargetIndex$ = 32					; size = 4
?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark
; _this$ = ecx

; 7137 : {

  0fc90	55		 push	 ebp
  0fc91	8b ec		 mov	 ebp, esp
  0fc93	83 ec 70	 sub	 esp, 112		; 00000070H
  0fc96	53		 push	 ebx
  0fc97	56		 push	 esi
  0fc98	57		 push	 edi
  0fc99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 7138 : 	LPOBJ lpObj = &gObj[aIndex];

  0fc9c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0fc9f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fca5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fcab	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 7139 : 
; 7140 : 	int TargePosx = lpObj->X - (8 - (TargetPos & 15));

  0fcae	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0fcb1	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0fcb8	0f b6 55 1c	 movzx	 edx, BYTE PTR _TargetPos$[ebp]
  0fcbc	83 e2 0f	 and	 edx, 15			; 0000000fH
  0fcbf	b8 08 00 00 00	 mov	 eax, 8
  0fcc4	2b c2		 sub	 eax, edx
  0fcc6	2b c8		 sub	 ecx, eax
  0fcc8	89 4d f4	 mov	 DWORD PTR _TargePosx$[ebp], ecx

; 7141 : 	int TargePosy = lpObj->Y - (8 - ((TargetPos & 240) >> 4));

  0fccb	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0fcce	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0fcd5	0f b6 55 1c	 movzx	 edx, BYTE PTR _TargetPos$[ebp]
  0fcd9	81 e2 f0 00 00
	00		 and	 edx, 240		; 000000f0H
  0fcdf	c1 fa 04	 sar	 edx, 4
  0fce2	b8 08 00 00 00	 mov	 eax, 8
  0fce7	2b c2		 sub	 eax, edx
  0fce9	2b c8		 sub	 ecx, eax
  0fceb	89 4d f0	 mov	 DWORD PTR _TargePosy$[ebp], ecx

; 7142 : 
; 7143 : 	int tObjNum;
; 7144 : 	int count = 0;

  0fcee	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 7145 : 	int DuelIndex = lpObj->m_iDuelUser;

  0fcf5	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0fcf8	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  0fcfe	89 4d e4	 mov	 DWORD PTR _DuelIndex$[ebp], ecx

; 7146 : 	int iangle = MLS_GetAngle(lpObj->X,lpObj->Y,TargePosx,TargePosy);

  0fd01	8b 45 f0	 mov	 eax, DWORD PTR _TargePosy$[ebp]
  0fd04	50		 push	 eax
  0fd05	8b 4d f4	 mov	 ecx, DWORD PTR _TargePosx$[ebp]
  0fd08	51		 push	 ecx
  0fd09	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0fd0c	0f bf 82 46 01
	00 00		 movsx	 eax, WORD PTR [edx+326]
  0fd13	50		 push	 eax
  0fd14	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0fd17	0f bf 91 44 01
	00 00		 movsx	 edx, WORD PTR [ecx+324]
  0fd1e	52		 push	 edx
  0fd1f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0fd22	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
  0fd27	89 45 e0	 mov	 DWORD PTR _iangle$[ebp], eax

; 7147 : 	int delaytime;
; 7148 : 	int Hit = 0;

  0fd2a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _Hit$[ebp], 0
$LN18@MLS_SkillE@2:

; 7149 : 	int EnableAttack;
; 7150 : 
; 7151 : 	while ( true )

  0fd31	b8 01 00 00 00	 mov	 eax, 1
  0fd36	85 c0		 test	 eax, eax
  0fd38	0f 84 5b 02 00
	00		 je	 $LN17@MLS_SkillE@2

; 7152 : 	{
; 7153 : 		if(lpObj->VpPlayer2[count].state != 0)

  0fd3e	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0fd41	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0fd44	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0fd47	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  0fd4f	85 d2		 test	 edx, edx
  0fd51	0f 84 2c 02 00
	00		 je	 $LN16@MLS_SkillE@2

; 7154 : 		{
; 7155 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0fd57	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0fd5a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0fd5d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0fd60	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  0fd68	89 55 ec	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 7156 : 
; 7157 : 			if(tObjNum >= 0)

  0fd6b	83 7d ec 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  0fd6f	0f 8c 0e 02 00
	00		 jl	 $LN16@MLS_SkillE@2

; 7158 : 			{
; 7159 : 				EnableAttack = 0;

  0fd75	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 7160 : 
; 7161 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0fd7c	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0fd7f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0fd82	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0fd85	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0fd8d	83 fa 02	 cmp	 edx, 2
  0fd90	75 25		 jne	 SHORT $LN14@MLS_SkillE@2
  0fd92	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0fd95	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fd9b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fda1	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0fda9	7d 0c		 jge	 SHORT $LN14@MLS_SkillE@2

; 7162 : 				{
; 7163 : 					EnableAttack = 1;

  0fdab	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0fdb2	e9 23 01 00 00	 jmp	 $LN13@MLS_SkillE@2
$LN14@MLS_SkillE@2:

; 7164 : 				}
; 7165 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0fdb7	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0fdba	3b 45 20	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0fdbd	74 08		 je	 SHORT $LN11@MLS_SkillE@2
  0fdbf	8b 45 e4	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  0fdc2	3b 45 ec	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  0fdc5	75 0c		 jne	 SHORT $LN12@MLS_SkillE@2
$LN11@MLS_SkillE@2:

; 7166 : 				{
; 7167 : 					EnableAttack = 1;

  0fdc7	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  0fdce	e9 07 01 00 00	 jmp	 $LN13@MLS_SkillE@2
$LN12@MLS_SkillE@2:

; 7168 : 				}
; 7169 : 
; 7170 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0fdd3	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0fdd6	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0fdd9	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0fddc	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  0fde4	83 fa 03	 cmp	 edx, 3
  0fde7	74 5b		 je	 SHORT $LN9@MLS_SkillE@2
  0fde9	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0fdec	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fdf2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fdf8	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0fe00	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0fe03	75 3f		 jne	 SHORT $LN9@MLS_SkillE@2
  0fe05	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0fe0a	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  0fe0f	83 f8 07	 cmp	 eax, 7
  0fe12	75 30		 jne	 SHORT $LN9@MLS_SkillE@2

; 7171 : 				{
; 7172 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0fe14	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0fe17	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  0fe1e	8b 55 ec	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  0fe21	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0fe27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fe2c	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  0fe34	3b ca		 cmp	 ecx, edx
  0fe36	74 07		 je	 SHORT $LN8@MLS_SkillE@2

; 7173 : 						EnableAttack = 1;

  0fe38	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN8@MLS_SkillE@2:

; 7174 : 				}
; 7175 : 
; 7176 : 				else

  0fe3f	e9 96 00 00 00	 jmp	 $LN13@MLS_SkillE@2
$LN9@MLS_SkillE@2:

; 7177 : 				{
; 7178 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0fe44	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0fe47	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fe4d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fe53	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0fe56	89 55 d0	 mov	 DWORD PTR _CallMonIndex$237230[ebp], edx

; 7179 : 
; 7180 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0fe59	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0fe5c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fe62	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fe68	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0fe6d	83 fa 02	 cmp	 edx, 2
  0fe70	75 40		 jne	 SHORT $LN6@MLS_SkillE@2
  0fe72	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0fe75	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fe7b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fe81	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  0fe89	7c 27		 jl	 SHORT $LN6@MLS_SkillE@2

; 7181 : 					{
; 7182 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0fe8b	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0fe8e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0fe94	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fe9a	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  0fea1	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0fea7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0feac	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0feaf	89 4d d0	 mov	 DWORD PTR _CallMonIndex$237230[ebp], ecx
$LN6@MLS_SkillE@2:

; 7183 : 					}
; 7184 : 
; 7185 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0feb2	8b 45 d0	 mov	 eax, DWORD PTR _CallMonIndex$237230[ebp]
  0feb5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0febb	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fec1	50		 push	 eax
  0fec2	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0fec5	51		 push	 ecx
  0fec6	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0fecb	83 c4 08	 add	 esp, 8
  0fece	83 f8 01	 cmp	 eax, 1
  0fed1	75 07		 jne	 SHORT $LN13@MLS_SkillE@2

; 7186 : 					{
; 7187 : 						EnableAttack = 1;

  0fed3	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN13@MLS_SkillE@2:

; 7188 : 					}
; 7189 : 				}
; 7190 : 
; 7191 : 				if(EnableAttack != 0)

  0feda	83 7d d4 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  0fede	0f 84 9f 00 00
	00		 je	 $LN16@MLS_SkillE@2

; 7192 : 				{
; 7193 : 					if(SkillElectricSparkHitBox.HitCheck(iangle,gObj[aIndex].X,gObj[aIndex].Y,gObj[tObjNum].X,gObj[tObjNum].Y))

  0fee4	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0fee7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0feed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0fef3	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0fefb	52		 push	 edx
  0fefc	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0feff	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ff05	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ff0b	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0ff13	52		 push	 edx
  0ff14	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0ff17	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ff1d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ff23	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0ff2b	52		 push	 edx
  0ff2c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0ff2f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ff35	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ff3b	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  0ff43	52		 push	 edx
  0ff44	8b 45 e0	 mov	 eax, DWORD PTR _iangle$[ebp]
  0ff47	50		 push	 eax
  0ff48	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  0ff4d	e8 00 00 00 00	 call	 ?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ; CSkillHitBox::HitCheck
  0ff52	85 c0		 test	 eax, eax
  0ff54	74 2d		 je	 SHORT $LN16@MLS_SkillE@2

; 7194 : 					{
; 7195 : 						delaytime = 500;

  0ff56	c7 45 dc f4 01
	00 00		 mov	 DWORD PTR _delaytime$[ebp], 500 ; 000001f4H

; 7196 : 						Hit = 1;

  0ff5d	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _Hit$[ebp], 1

; 7197 : 
; 7198 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,delaytime,lpMagic->m_Skill,0);

  0ff64	6a 00		 push	 0
  0ff66	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0ff69	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0ff6c	51		 push	 ecx
  0ff6d	8b 55 dc	 mov	 edx, DWORD PTR _delaytime$[ebp]
  0ff70	52		 push	 edx
  0ff71	8b 45 ec	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  0ff74	50		 push	 eax
  0ff75	6a 32		 push	 50			; 00000032H
  0ff77	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0ff7a	51		 push	 ecx
  0ff7b	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0ff80	83 c4 18	 add	 esp, 24			; 00000018H
$LN16@MLS_SkillE@2:

; 7199 : 					}
; 7200 : 				}
; 7201 : 			}
; 7202 : 		}
; 7203 : 
; 7204 : 		count++;

  0ff83	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  0ff86	83 c0 01	 add	 eax, 1
  0ff89	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax

; 7205 : 		if(count > MAX_VIEWPORT -1)

  0ff8c	83 7d e8 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  0ff90	7e 02		 jle	 SHORT $LN2@MLS_SkillE@2

; 7206 : 		{
; 7207 : 			break;

  0ff92	eb 05		 jmp	 SHORT $LN17@MLS_SkillE@2
$LN2@MLS_SkillE@2:

; 7208 : 		}
; 7209 : 	}

  0ff94	e9 98 fd ff ff	 jmp	 $LN18@MLS_SkillE@2
$LN17@MLS_SkillE@2:

; 7210 : 
; 7211 : 	if(Hit != 0)

  0ff99	83 7d d8 00	 cmp	 DWORD PTR _Hit$[ebp], 0
  0ff9d	74 0c		 je	 SHORT $LN19@MLS_SkillE@2

; 7212 : 	{
; 7213 : 		DecPartyMemberHPandMP(lpObj);

  0ff9f	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0ffa2	50		 push	 eax
  0ffa3	e8 00 00 00 00	 call	 ?DecPartyMemberHPandMP@@YAHPAUOBJECTSTRUCT@@@Z ; DecPartyMemberHPandMP
  0ffa8	83 c4 04	 add	 esp, 4
$LN19@MLS_SkillE@2:

; 7214 : 	}
; 7215 : }

  0ffab	5f		 pop	 edi
  0ffac	5e		 pop	 esi
  0ffad	5b		 pop	 ebx
  0ffae	8b e5		 mov	 esp, ebp
  0ffb0	5d		 pop	 ebp
  0ffb1	c2 1c 00	 ret	 28			; 0000001cH
?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark
; Function compile flags: /Odtp /ZI
tv243 = -108						; size = 4
_CallMonIndex$237265 = -40				; size = 4
_EnableAttack$ = -36					; size = 4
_DuelIndex$ = -32					; size = 4
_bAttack$ = -28						; size = 4
_HitCount$ = -24					; size = 4
_count$ = -20						; size = 4
_tObjNum$ = -16						; size = 4
_bSuccess$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_TargetPos$ = 16					; size = 1
_aTargetIndex$ = 20					; size = 4
?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier
; _this$ = ecx

; 7218 : {

  0ffc0	55		 push	 ebp
  0ffc1	8b ec		 mov	 ebp, esp
  0ffc3	83 ec 6c	 sub	 esp, 108		; 0000006cH
  0ffc6	53		 push	 ebx
  0ffc7	56		 push	 esi
  0ffc8	57		 push	 edi
  0ffc9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 7219 : 	LPOBJ lpObj = &gObj[aIndex];

  0ffcc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0ffcf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0ffd5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0ffdb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 7220 : 	int bSuccess = TRUE;

  0ffde	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 1

; 7221 : 
; 7222 : 	MLS_SkillFrustrum3(aIndex,TargetPos,1.5f,6.0f,1.5f,0);

  0ffe5	51		 push	 ecx
  0ffe6	d9 ee		 fldz
  0ffe8	d9 1c 24	 fstp	 DWORD PTR [esp]
  0ffeb	51		 push	 ecx
  0ffec	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  0fff2	d9 1c 24	 fstp	 DWORD PTR [esp]
  0fff5	51		 push	 ecx
  0fff6	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40c00000
  0fffc	d9 1c 24	 fstp	 DWORD PTR [esp]
  0ffff	51		 push	 ecx
  10000	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  10006	d9 1c 24	 fstp	 DWORD PTR [esp]
  10009	0f b6 45 10	 movzx	 eax, BYTE PTR _TargetPos$[ebp]
  1000d	50		 push	 eax
  1000e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  10011	51		 push	 ecx
  10012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  10015	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3

; 7223 : 
; 7224 : 	int tObjNum;
; 7225 : 	int count = 0;

  1001a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 7226 : 	int HitCount = 0;

  10021	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0

; 7227 : 	int bAttack;
; 7228 : 	int DuelIndex = lpObj->m_iDuelUser;

  10028	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  1002b	8b 88 b8 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3768]
  10031	89 4d e0	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
$LN27@MLS_SkillC@3:

; 7229 : 	int EnableAttack;
; 7230 : 
; 7231 : 	while ( true )

  10034	b8 01 00 00 00	 mov	 eax, 1
  10039	85 c0		 test	 eax, eax
  1003b	0f 84 f9 03 00
	00		 je	 $LN26@MLS_SkillC@3

; 7232 : 	{
; 7233 : 		if(lpObj->VpPlayer2[count].state != 0)

  10041	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  10044	6b c0 0c	 imul	 eax, 12			; 0000000cH
  10047	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  1004a	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  10052	85 d2		 test	 edx, edx
  10054	0f 84 ca 03 00
	00		 je	 $LN13@MLS_SkillC@3

; 7234 : 		{
; 7235 : 			tObjNum = lpObj->VpPlayer2[count].number;

  1005a	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  1005d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  10060	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  10063	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  1006b	89 55 f0	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 7236 : 
; 7237 : 			if(tObjNum >= 0)

  1006e	83 7d f0 00	 cmp	 DWORD PTR _tObjNum$[ebp], 0
  10072	0f 8c ac 03 00
	00		 jl	 $LN13@MLS_SkillC@3

; 7238 : 			{
; 7239 : 				EnableAttack = 0;

  10078	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 0

; 7240 : 
; 7241 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  1007f	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  10082	6b c0 0c	 imul	 eax, 12			; 0000000cH
  10085	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  10088	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  10090	83 fa 02	 cmp	 edx, 2
  10093	75 25		 jne	 SHORT $LN23@MLS_SkillC@3
  10095	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  10098	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  1009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  100a4	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  100ac	7d 0c		 jge	 SHORT $LN23@MLS_SkillC@3

; 7242 : 				{
; 7243 : 					EnableAttack = 1;

  100ae	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  100b5	e9 23 01 00 00	 jmp	 $LN14@MLS_SkillC@3
$LN23@MLS_SkillC@3:

; 7244 : 				}
; 7245 : 				else if( tObjNum == aTargetIndex || DuelIndex == tObjNum)

  100ba	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  100bd	3b 45 14	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  100c0	74 08		 je	 SHORT $LN20@MLS_SkillC@3
  100c2	8b 45 e0	 mov	 eax, DWORD PTR _DuelIndex$[ebp]
  100c5	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  100c8	75 0c		 jne	 SHORT $LN21@MLS_SkillC@3
$LN20@MLS_SkillC@3:

; 7246 : 				{
; 7247 : 					EnableAttack = 1;

  100ca	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
  100d1	e9 07 01 00 00	 jmp	 $LN14@MLS_SkillC@3
$LN21@MLS_SkillC@3:

; 7248 : 				}
; 7249 : 
; 7250 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  100d6	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  100d9	6b c0 0c	 imul	 eax, 12			; 0000000cH
  100dc	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  100df	0f b6 94 01 b0
	08 00 00	 movzx	 edx, BYTE PTR [ecx+eax+2224]
  100e7	83 fa 03	 cmp	 edx, 3
  100ea	74 5b		 je	 SHORT $LN18@MLS_SkillC@3
  100ec	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  100ef	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  100f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  100fb	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  10103	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  10106	75 3f		 jne	 SHORT $LN18@MLS_SkillC@3
  10108	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  1010d	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  10112	83 f8 07	 cmp	 eax, 7
  10115	75 30		 jne	 SHORT $LN18@MLS_SkillC@3

; 7251 : 				{
; 7252 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  10117	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  1011a	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  10121	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  10124	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  1012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  1012f	0f b6 94 10 02
	1c 00 00	 movzx	 edx, BYTE PTR [eax+edx+7170]
  10137	3b ca		 cmp	 ecx, edx
  10139	74 07		 je	 SHORT $LN17@MLS_SkillC@3

; 7253 : 						EnableAttack = 1;

  1013b	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN17@MLS_SkillC@3:

; 7254 : 				}
; 7255 : 
; 7256 : 				else

  10142	e9 96 00 00 00	 jmp	 $LN14@MLS_SkillC@3
$LN18@MLS_SkillC@3:

; 7257 : 				{
; 7258 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  10147	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  1014a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  10150	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  10156	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  10159	89 55 d8	 mov	 DWORD PTR _CallMonIndex$237265[ebp], edx

; 7259 : 
; 7260 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  1015c	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  1015f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  10165	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  1016b	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  10170	83 fa 02	 cmp	 edx, 2
  10173	75 40		 jne	 SHORT $LN15@MLS_SkillC@3
  10175	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  10178	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  1017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  10184	83 bc 01 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1104], 0
  1018c	7c 27		 jl	 SHORT $LN15@MLS_SkillC@3

; 7261 : 					{
; 7262 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  1018e	8b 45 f0	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  10191	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  10197	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  1019d	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  101a4	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  101aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  101af	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  101b2	89 4d d8	 mov	 DWORD PTR _CallMonIndex$237265[ebp], ecx
$LN15@MLS_SkillC@3:

; 7263 : 					}
; 7264 : 
; 7265 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  101b5	8b 45 d8	 mov	 eax, DWORD PTR _CallMonIndex$237265[ebp]
  101b8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  101be	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  101c4	50		 push	 eax
  101c5	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  101c8	51		 push	 ecx
  101c9	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  101ce	83 c4 08	 add	 esp, 8
  101d1	83 f8 01	 cmp	 eax, 1
  101d4	75 07		 jne	 SHORT $LN14@MLS_SkillC@3

; 7266 : 					{
; 7267 : 						EnableAttack = 1;

  101d6	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _EnableAttack$[ebp], 1
$LN14@MLS_SkillC@3:

; 7268 : 					}
; 7269 : 				}
; 7270 : 
; 7271 : 				if( EnableAttack != FALSE && SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex) )

  101dd	83 7d dc 00	 cmp	 DWORD PTR _EnableAttack$[ebp], 0
  101e1	0f 84 3d 02 00
	00		 je	 $LN13@MLS_SkillC@3
  101e7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  101ea	50		 push	 eax
  101eb	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  101ee	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  101f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  101fa	0f bf 84 0a 46
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+326]
  10202	50		 push	 eax
  10203	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  10206	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  1020c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  10212	0f bf 84 0a 44
	01 00 00	 movsx	 eax, WORD PTR [edx+ecx+324]
  1021a	50		 push	 eax
  1021b	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  10220	83 c4 0c	 add	 esp, 12			; 0000000cH
  10223	85 c0		 test	 eax, eax
  10225	0f 84 f9 01 00
	00		 je	 $LN13@MLS_SkillC@3

; 7272 : 				{
; 7273 : 					bAttack = FALSE;

  1022b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 7274 : 
; 7275 : 					if( HitCount > 8 )

  10232	83 7d e8 08	 cmp	 DWORD PTR _HitCount$[ebp], 8
  10236	7e 1e		 jle	 SHORT $LN12@MLS_SkillC@3

; 7276 : 					{
; 7277 : 						if(rand()%2)

  10238	e8 00 00 00 00	 call	 _rand
  1023d	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  10242	79 05		 jns	 SHORT $LN32@MLS_SkillC@3
  10244	48		 dec	 eax
  10245	83 c8 fe	 or	 eax, -2			; fffffffeH
  10248	40		 inc	 eax
$LN32@MLS_SkillC@3:
  10249	85 c0		 test	 eax, eax
  1024b	74 07		 je	 SHORT $LN11@MLS_SkillC@3

; 7278 : 						{
; 7279 : 							bAttack = TRUE;

  1024d	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN11@MLS_SkillC@3:

; 7280 : 						}
; 7281 : 					}
; 7282 : 					else

  10254	eb 07		 jmp	 SHORT $LN10@MLS_SkillC@3
$LN12@MLS_SkillC@3:

; 7283 : 					{
; 7284 : 						bAttack = TRUE;

  10256	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN10@MLS_SkillC@3:

; 7285 : 					}
; 7286 : 
; 7287 : 					if( bAttack != FALSE )

  1025d	83 7d e4 00	 cmp	 DWORD PTR _bAttack$[ebp], 0
  10261	0f 84 c0 00 00
	00		 je	 $LN6@MLS_SkillC@3

; 7288 : 					{
; 7289 : #if(EVOMU_DLSKILLCHANGE==TRUE)
; 7290 : 						if(	g_ExLicense.CheckUser(eExUB::Gredy)			|| 
; 7291 : 							g_ExLicense.CheckUser(eExUB::GredyLocal)	|| 
; 7292 : 							g_ExLicense.CheckUser(eExUB::Gredy2)		||
; 7293 : 							g_ExLicense.CheckUser(eExUB::SILVER1)		||
; 7294 : 							g_ExLicense.CheckUser(eExUB::SILVER2)		||
; 7295 : 							g_ExLicense.CheckUser(eExUB::SILVER_Local)	)

  10267	6a 20		 push	 32			; 00000020H
  10269	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  1026e	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  10273	0f b6 c0	 movzx	 eax, al
  10276	85 c0		 test	 eax, eax
  10278	75 5f		 jne	 SHORT $LN7@MLS_SkillC@3
  1027a	6a 21		 push	 33			; 00000021H
  1027c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  10281	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  10286	0f b6 c0	 movzx	 eax, al
  10289	85 c0		 test	 eax, eax
  1028b	75 4c		 jne	 SHORT $LN7@MLS_SkillC@3
  1028d	6a 22		 push	 34			; 00000022H
  1028f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  10294	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  10299	0f b6 c0	 movzx	 eax, al
  1029c	85 c0		 test	 eax, eax
  1029e	75 39		 jne	 SHORT $LN7@MLS_SkillC@3
  102a0	6a 07		 push	 7
  102a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  102a7	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  102ac	0f b6 c0	 movzx	 eax, al
  102af	85 c0		 test	 eax, eax
  102b1	75 26		 jne	 SHORT $LN7@MLS_SkillC@3
  102b3	6a 08		 push	 8
  102b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  102ba	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  102bf	0f b6 c0	 movzx	 eax, al
  102c2	85 c0		 test	 eax, eax
  102c4	75 13		 jne	 SHORT $LN7@MLS_SkillC@3
  102c6	6a 2b		 push	 43			; 0000002bH
  102c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  102cd	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  102d2	0f b6 c0	 movzx	 eax, al
  102d5	85 c0		 test	 eax, eax
  102d7	74 2e		 je	 SHORT $LN8@MLS_SkillC@3
$LN7@MLS_SkillC@3:

; 7296 : 						{
; 7297 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,0,0,0,0,0);

  102d9	6a 00		 push	 0
  102db	6a 00		 push	 0
  102dd	6a 00		 push	 0
  102df	6a 00		 push	 0
  102e1	6a 00		 push	 0
  102e3	6a 01		 push	 1
  102e5	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  102e8	50		 push	 eax
  102e9	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  102ec	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  102f2	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  102f8	51		 push	 ecx
  102f9	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  102fc	52		 push	 edx
  102fd	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  10302	83 c4 24	 add	 esp, 36			; 00000024H

; 7298 : 						}
; 7299 : 						else

  10305	eb 20		 jmp	 SHORT $LN6@MLS_SkillC@3
$LN8@MLS_SkillC@3:

; 7300 : 						{
; 7301 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,250,lpMagic->m_Skill,0);

  10307	6a 00		 push	 0
  10309	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  1030c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  1030f	51		 push	 ecx
  10310	68 fa 00 00 00	 push	 250			; 000000faH
  10315	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  10318	52		 push	 edx
  10319	6a 32		 push	 50			; 00000032H
  1031b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  1031e	50		 push	 eax
  1031f	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  10324	83 c4 18	 add	 esp, 24			; 00000018H
$LN6@MLS_SkillC@3:

; 7302 : 						}
; 7303 : #else
; 7304 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,250,lpMagic->m_Skill,0);
; 7305 : #endif
; 7306 : 					}
; 7307 : 
; 7308 : 					if( OBJMAX_RANGE(aTargetIndex) && aTargetIndex == tObjNum)

  10327	83 7d 14 00	 cmp	 DWORD PTR _aTargetIndex$[ebp], 0
  1032b	7d 09		 jge	 SHORT $LN30@MLS_SkillC@3
  1032d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv243[ebp], 0
  10334	eb 0f		 jmp	 SHORT $LN31@MLS_SkillC@3
$LN30@MLS_SkillC@3:
  10336	33 c0		 xor	 eax, eax
  10338	81 7d 14 97 3a
	00 00		 cmp	 DWORD PTR _aTargetIndex$[ebp], 14999 ; 00003a97H
  1033f	0f 9e c0	 setle	 al
  10342	89 45 94	 mov	 DWORD PTR tv243[ebp], eax
$LN31@MLS_SkillC@3:
  10345	83 7d 94 00	 cmp	 DWORD PTR tv243[ebp], 0
  10349	0f 84 cc 00 00
	00		 je	 $LN2@MLS_SkillC@3
  1034f	8b 45 14	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  10352	3b 45 f0	 cmp	 eax, DWORD PTR _tObjNum$[ebp]
  10355	0f 85 c0 00 00
	00		 jne	 $LN2@MLS_SkillC@3

; 7309 : 					{
; 7310 : #if(EVOMU_DLSKILLCHANGE==TRUE)
; 7311 : 						if(	g_ExLicense.CheckUser(eExUB::Gredy)			|| 
; 7312 : 							g_ExLicense.CheckUser(eExUB::GredyLocal)	|| 
; 7313 : 							g_ExLicense.CheckUser(eExUB::Gredy2)		||
; 7314 : 							g_ExLicense.CheckUser(eExUB::SILVER1)		||
; 7315 : 							g_ExLicense.CheckUser(eExUB::SILVER2)		||
; 7316 : 							g_ExLicense.CheckUser(eExUB::SILVER_Local)	)

  1035b	6a 20		 push	 32			; 00000020H
  1035d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  10362	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  10367	0f b6 c0	 movzx	 eax, al
  1036a	85 c0		 test	 eax, eax
  1036c	75 5f		 jne	 SHORT $LN3@MLS_SkillC@3
  1036e	6a 21		 push	 33			; 00000021H
  10370	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  10375	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  1037a	0f b6 c0	 movzx	 eax, al
  1037d	85 c0		 test	 eax, eax
  1037f	75 4c		 jne	 SHORT $LN3@MLS_SkillC@3
  10381	6a 22		 push	 34			; 00000022H
  10383	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  10388	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  1038d	0f b6 c0	 movzx	 eax, al
  10390	85 c0		 test	 eax, eax
  10392	75 39		 jne	 SHORT $LN3@MLS_SkillC@3
  10394	6a 07		 push	 7
  10396	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  1039b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  103a0	0f b6 c0	 movzx	 eax, al
  103a3	85 c0		 test	 eax, eax
  103a5	75 26		 jne	 SHORT $LN3@MLS_SkillC@3
  103a7	6a 08		 push	 8
  103a9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  103ae	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  103b3	0f b6 c0	 movzx	 eax, al
  103b6	85 c0		 test	 eax, eax
  103b8	75 13		 jne	 SHORT $LN3@MLS_SkillC@3
  103ba	6a 2b		 push	 43			; 0000002bH
  103bc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  103c1	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  103c6	0f b6 c0	 movzx	 eax, al
  103c9	85 c0		 test	 eax, eax
  103cb	74 2e		 je	 SHORT $LN4@MLS_SkillC@3
$LN3@MLS_SkillC@3:

; 7317 : 						{
; 7318 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,0,0,0,0,0);

  103cd	6a 00		 push	 0
  103cf	6a 00		 push	 0
  103d1	6a 00		 push	 0
  103d3	6a 00		 push	 0
  103d5	6a 00		 push	 0
  103d7	6a 01		 push	 1
  103d9	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  103dc	50		 push	 eax
  103dd	8b 4d f0	 mov	 ecx, DWORD PTR _tObjNum$[ebp]
  103e0	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  103e6	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  103ec	51		 push	 ecx
  103ed	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  103f0	52		 push	 edx
  103f1	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  103f6	83 c4 24	 add	 esp, 36			; 00000024H

; 7319 : 						}
; 7320 : 						else

  103f9	eb 20		 jmp	 SHORT $LN2@MLS_SkillC@3
$LN4@MLS_SkillC@3:

; 7321 : 						{
; 7322 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,300,lpMagic->m_Skill,0);

  103fb	6a 00		 push	 0
  103fd	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  10400	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  10403	51		 push	 ecx
  10404	68 2c 01 00 00	 push	 300			; 0000012cH
  10409	8b 55 f0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  1040c	52		 push	 edx
  1040d	6a 32		 push	 50			; 00000032H
  1040f	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  10412	50		 push	 eax
  10413	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  10418	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@MLS_SkillC@3:

; 7323 : 						}
; 7324 : #else
; 7325 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,300,lpMagic->m_Skill,0);
; 7326 : #endif
; 7327 : 					}
; 7328 : 
; 7329 : 					HitCount++;

  1041b	8b 45 e8	 mov	 eax, DWORD PTR _HitCount$[ebp]
  1041e	83 c0 01	 add	 eax, 1
  10421	89 45 e8	 mov	 DWORD PTR _HitCount$[ebp], eax
$LN13@MLS_SkillC@3:

; 7330 : 				}
; 7331 : 			}
; 7332 : 		}
; 7333 : 
; 7334 : 		count++;

  10424	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  10427	83 c0 01	 add	 eax, 1
  1042a	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax

; 7335 : 		if(count > MAX_VIEWPORT -1)

  1042d	83 7d ec 4a	 cmp	 DWORD PTR _count$[ebp], 74 ; 0000004aH
  10431	7e 02		 jle	 SHORT $LN1@MLS_SkillC@3

; 7336 : 		{
; 7337 : 			break;

  10433	eb 05		 jmp	 SHORT $LN26@MLS_SkillC@3
$LN1@MLS_SkillC@3:

; 7338 : 		}
; 7339 : 	}

  10435	e9 fa fb ff ff	 jmp	 $LN27@MLS_SkillC@3
$LN26@MLS_SkillC@3:

; 7340 : }

  1043a	5f		 pop	 edi
  1043b	5e		 pop	 esi
  1043c	5b		 pop	 ebx
  1043d	8b e5		 mov	 esp, ebp
  1043f	5d		 pop	 ebp
  10440	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier
; Function compile flags: /Odtp /ZI
_fSkillValue$237296 = -32				; size = 4
_BuffNumber$ = -28					; size = 4
_AddLife$ = -24						; size = 4
_AddDefense$ = -20					; size = 4
_lpTargetObj$ = -16					; size = 4
_lpObj$ = -12						; size = 4
_skillSuccess$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense
; _this$ = ecx

; 7343 : {

  10450	55		 push	 ebp
  10451	8b ec		 mov	 ebp, esp
  10453	83 ec 60	 sub	 esp, 96			; 00000060H
  10456	53		 push	 ebx
  10457	56		 push	 esi
  10458	57		 push	 edi
  10459	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 7344 : 	int skillSuccess = true;

  1045c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 7345 : 
; 7346 : 	LPOBJ lpObj = &gObj[aIndex];

  10463	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  10466	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  1046c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  10472	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 7347 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  10475	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  10478	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  1047e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  10484	89 45 f0	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 7348 : 
; 7349 : 	if( lpObj->Type != OBJ_USER || lpObj->Class != CLASS_DARKLORD)

  10487	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  1048a	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  1048e	83 f9 01	 cmp	 ecx, 1
  10491	75 0f		 jne	 SHORT $LN2@MLS_SkillI@3
  10493	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  10496	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  1049d	83 f9 04	 cmp	 ecx, 4
  104a0	74 05		 je	 SHORT $LN3@MLS_SkillI@3
$LN2@MLS_SkillI@3:

; 7350 : 	{
; 7351 : 		return;

  104a2	e9 b7 00 00 00	 jmp	 $LN4@MLS_SkillI@3
$LN3@MLS_SkillI@3:

; 7352 : 	}
; 7353 : 
; 7354 : 	int AddDefense = 800;

  104a7	c7 45 ec 20 03
	00 00		 mov	 DWORD PTR _AddDefense$[ebp], 800 ; 00000320H

; 7355 : 	int AddLife = 800;

  104ae	c7 45 e8 20 03
	00 00		 mov	 DWORD PTR _AddLife$[ebp], 800 ; 00000320H

; 7356 : 
; 7357 : 	int BuffNumber = 165;

  104b5	c7 45 e4 a5 00
	00 00		 mov	 DWORD PTR _BuffNumber$[ebp], 165 ; 000000a5H

; 7358 : 
; 7359 : 	if( lpMagic->m_Skill == 524 )

  104bc	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  104bf	81 78 08 0c 02
	00 00		 cmp	 DWORD PTR [eax+8], 524	; 0000020cH
  104c6	75 48		 jne	 SHORT $LN1@MLS_SkillI@3

; 7360 : 	{
; 7361 : 		BuffNumber = 165;

  104c8	c7 45 e4 a5 00
	00 00		 mov	 DWORD PTR _BuffNumber$[ebp], 165 ; 000000a5H

; 7362 : 
; 7363 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  104cf	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  104d2	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  104d6	51		 push	 ecx
  104d7	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  104da	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  104dd	50		 push	 eax
  104de	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  104e3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  104e8	50		 push	 eax
  104e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  104ec	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  104f1	d9 5d e0	 fstp	 DWORD PTR _fSkillValue$237296[ebp]

; 7364 : 
; 7365 : 		AddDefense += fSkillValue;

  104f4	db 45 ec	 fild	 DWORD PTR _AddDefense$[ebp]
  104f7	d8 45 e0	 fadd	 DWORD PTR _fSkillValue$237296[ebp]
  104fa	e8 00 00 00 00	 call	 __ftol2_sse
  104ff	89 45 ec	 mov	 DWORD PTR _AddDefense$[ebp], eax

; 7366 : 		AddLife += fSkillValue;

  10502	db 45 e8	 fild	 DWORD PTR _AddLife$[ebp]
  10505	d8 45 e0	 fadd	 DWORD PTR _fSkillValue$237296[ebp]
  10508	e8 00 00 00 00	 call	 __ftol2_sse
  1050d	89 45 e8	 mov	 DWORD PTR _AddLife$[ebp], eax
$LN1@MLS_SkillI@3:

; 7367 : 	}
; 7368 : 
; 7369 : 	AddDefense = (AddDefense*10)/20;

  10510	8b 45 ec	 mov	 eax, DWORD PTR _AddDefense$[ebp]
  10513	6b c0 0a	 imul	 eax, 10			; 0000000aH
  10516	99		 cdq
  10517	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  1051c	f7 f9		 idiv	 ecx
  1051e	89 45 ec	 mov	 DWORD PTR _AddDefense$[ebp], eax

; 7370 : 
; 7371 : 	gObjApplyBuffEffectDuration(lpTargetObj,BuffNumber,ADD_OPTION_DEFENSE,AddDefense,ADD_OPTION_LIFE,AddLife,10);

  10521	6a 0a		 push	 10			; 0000000aH
  10523	8b 45 e8	 mov	 eax, DWORD PTR _AddLife$[ebp]
  10526	50		 push	 eax
  10527	6a 04		 push	 4
  10529	8b 4d ec	 mov	 ecx, DWORD PTR _AddDefense$[ebp]
  1052c	51		 push	 ecx
  1052d	6a 03		 push	 3
  1052f	8b 55 e4	 mov	 edx, DWORD PTR _BuffNumber$[ebp]
  10532	52		 push	 edx
  10533	8b 45 f0	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  10536	50		 push	 eax
  10537	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  1053c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7372 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  1053f	0f b6 45 f8	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  10543	50		 push	 eax
  10544	8b 4d f0	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  10547	8b 11		 mov	 edx, DWORD PTR [ecx]
  10549	52		 push	 edx
  1054a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  1054d	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  10551	51		 push	 ecx
  10552	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  10555	52		 push	 edx
  10556	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  1055b	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@MLS_SkillI@3:

; 7373 : }

  1055e	5f		 pop	 edi
  1055f	5e		 pop	 esi
  10560	5b		 pop	 ebx
  10561	8b e5		 mov	 esp, ebp
  10563	5d		 pop	 ebp
  10564	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv72 = -196						; size = 4
_lpHealObj$237338 = -128				; size = 4
_dis$237324 = -124					; size = 4
_number$237321 = -120					; size = 4
_i$ = -116						; size = 4
_iApplyHealDistance$ = -112				; size = 40
_iApplyHealIndex$ = -72					; size = 40
_fSkillValue$237313 = -32				; size = 4
_addlife$ = -28						; size = 4
_partynumber$ = -24					; size = 4
_lpTargetObj$ = -20					; size = 4
_lpObj$ = -16						; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
; _this$ = ecx

; 7376 : {

  10570	55		 push	 ebp
  10571	8b ec		 mov	 ebp, esp
  10573	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  10579	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  1057e	33 c5		 xor	 eax, ebp
  10580	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  10583	53		 push	 ebx
  10584	56		 push	 esi
  10585	57		 push	 edi
  10586	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 7377 : 	int skillSuccess = TRUE;

  10589	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1

; 7378 : 	LPOBJ lpObj = &gObj[aIndex];

  10590	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  10593	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  10599	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  1059f	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 7379 : 
; 7380 : 	if(lpObj->Class != CLASS_ELF)

  105a2	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  105a5	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  105ac	83 f9 02	 cmp	 ecx, 2
  105af	74 05		 je	 SHORT $LN25@MLS_SkillP

; 7381 : 	{
; 7382 : 		return;

  105b1	e9 fc 02 00 00	 jmp	 $LN26@MLS_SkillP
$LN25@MLS_SkillP:

; 7383 : 	}
; 7384 : 
; 7385 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  105b6	83 7d 0c 00	 cmp	 DWORD PTR _aTargetIndex$[ebp], 0
  105ba	7d 0c		 jge	 SHORT $LN28@MLS_SkillP
  105bc	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv72[ebp], 0
  105c6	eb 12		 jmp	 SHORT $LN29@MLS_SkillP
$LN28@MLS_SkillP:
  105c8	33 c0		 xor	 eax, eax
  105ca	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aTargetIndex$[ebp], 14999 ; 00003a97H
  105d1	0f 9e c0	 setle	 al
  105d4	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv72[ebp], eax
$LN29@MLS_SkillP:
  105da	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv72[ebp], 0
  105e1	75 06		 jne	 SHORT $LN24@MLS_SkillP

; 7386 : 	{
; 7387 : 		aTargetIndex = aIndex;

  105e3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  105e6	89 45 0c	 mov	 DWORD PTR _aTargetIndex$[ebp], eax
$LN24@MLS_SkillP:

; 7388 : 	}
; 7389 : 	
; 7390 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  105e9	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  105ec	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  105f2	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  105f8	89 45 ec	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 7391 : 
; 7392 : 	if( lpObj->PartyNumber == -1 || lpObj->PartyNumber != lpTargetObj->PartyNumber )

  105fb	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  105fe	83 b8 2c 04 00
	00 ff		 cmp	 DWORD PTR [eax+1068], -1
  10605	74 14		 je	 SHORT $LN22@MLS_SkillP
  10607	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  1060a	8b 4d ec	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  1060d	8b 90 2c 04 00
	00		 mov	 edx, DWORD PTR [eax+1068]
  10613	3b 91 2c 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1068]
  10619	74 1f		 je	 SHORT $LN23@MLS_SkillP
$LN22@MLS_SkillP:

; 7393 : 	{
; 7394 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aIndex,FALSE);

  1061b	6a 00		 push	 0
  1061d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  10620	50		 push	 eax
  10621	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  10624	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  10628	52		 push	 edx
  10629	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  1062c	50		 push	 eax
  1062d	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  10632	83 c4 10	 add	 esp, 16			; 00000010H

; 7395 : 		return;

  10635	e9 78 02 00 00	 jmp	 $LN26@MLS_SkillP
$LN23@MLS_SkillP:

; 7396 : 	}	
; 7397 : 
; 7398 : 	int partynumber = lpObj->PartyNumber;

  1063a	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  1063d	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  10643	89 4d e8	 mov	 DWORD PTR _partynumber$[ebp], ecx

; 7399 : 	int addlife = (5 + (lpObj->Energy + lpObj->AddEnergy) / 5);

  10646	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  10649	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  10650	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  10653	0f bf 91 26 01
	00 00		 movsx	 edx, WORD PTR [ecx+294]
  1065a	03 c2		 add	 eax, edx
  1065c	99		 cdq
  1065d	b9 05 00 00 00	 mov	 ecx, 5
  10662	f7 f9		 idiv	 ecx
  10664	83 c0 05	 add	 eax, 5
  10667	89 45 e4	 mov	 DWORD PTR _addlife$[ebp], eax

; 7400 : 
; 7401 : 	if( lpMagic->m_Skill == 429 )

  1066a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  1066d	81 78 08 ad 01
	00 00		 cmp	 DWORD PTR [eax+8], 429	; 000001adH
  10674	75 4c		 jne	 SHORT $LN20@MLS_SkillP

; 7402 : 	{
; 7403 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  10676	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  10679	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  1067d	51		 push	 ecx
  1067e	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  10681	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  10684	50		 push	 eax
  10685	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  1068a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  1068f	50		 push	 eax
  10690	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  10693	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  10698	d9 5d e0	 fstp	 DWORD PTR _fSkillValue$237313[ebp]

; 7404 : 
; 7405 : 		if( fSkillValue > 0.0f )

  1069b	d9 45 e0	 fld	 DWORD PTR _fSkillValue$237313[ebp]
  1069e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  106a4	df e0		 fnstsw	 ax
  106a6	f6 c4 41	 test	 ah, 65			; 00000041H
  106a9	75 17		 jne	 SHORT $LN20@MLS_SkillP

; 7406 : 		{
; 7407 : 			addlife += addlife*fSkillValue/100.0f;

  106ab	db 45 e4	 fild	 DWORD PTR _addlife$[ebp]
  106ae	d8 4d e0	 fmul	 DWORD PTR _fSkillValue$237313[ebp]
  106b1	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  106b7	da 45 e4	 fiadd	 DWORD PTR _addlife$[ebp]
  106ba	e8 00 00 00 00	 call	 __ftol2_sse
  106bf	89 45 e4	 mov	 DWORD PTR _addlife$[ebp], eax
$LN20@MLS_SkillP:

; 7408 : 		}
; 7409 : 	}
; 7410 : 
; 7411 : 	int iApplyHealIndex[MAX_USER_IN_PARTY];	//4
; 7412 : 	int iApplyHealDistance[MAX_USER_IN_PARTY];	//4
; 7413 : 	memset(iApplyHealIndex,-1,sizeof(iApplyHealIndex));

  106c2	6a 28		 push	 40			; 00000028H
  106c4	6a ff		 push	 -1
  106c6	8d 45 b8	 lea	 eax, DWORD PTR _iApplyHealIndex$[ebp]
  106c9	50		 push	 eax
  106ca	e8 00 00 00 00	 call	 _memset
  106cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7414 : 	memset(iApplyHealDistance,-1,sizeof(iApplyHealDistance));

  106d2	6a 28		 push	 40			; 00000028H
  106d4	6a ff		 push	 -1
  106d6	8d 45 90	 lea	 eax, DWORD PTR _iApplyHealDistance$[ebp]
  106d9	50		 push	 eax
  106da	e8 00 00 00 00	 call	 _memset
  106df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7415 : 
; 7416 : 	iApplyHealIndex[0] = aTargetIndex;

  106e2	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  106e5	89 45 b8	 mov	 DWORD PTR _iApplyHealIndex$[ebp], eax

; 7417 : 	iApplyHealDistance[0] = 0;

  106e8	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _iApplyHealDistance$[ebp], 0

; 7418 : 
; 7419 : 	int i;
; 7420 : 
; 7421 : 	for( i = 0; i < MAX_USER_IN_PARTY; i++)

  106ef	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  106f6	eb 09		 jmp	 SHORT $LN19@MLS_SkillP
$LN18@MLS_SkillP:
  106f8	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  106fb	83 c0 01	 add	 eax, 1
  106fe	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax
$LN19@MLS_SkillP:
  10701	83 7d 8c 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  10705	0f 8d c1 00 00
	00		 jge	 $LN17@MLS_SkillP

; 7422 : 	{
; 7423 : 		int number = gParty.m_PartyS[partynumber].Number[i];

  1070b	8b 45 e8	 mov	 eax, DWORD PTR _partynumber$[ebp]
  1070e	6b c0 6c	 imul	 eax, 108		; 0000006cH
  10711	8b 4d 8c	 mov	 ecx, DWORD PTR _i$[ebp]
  10714	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  1071b	89 55 88	 mov	 DWORD PTR _number$237321[ebp], edx

; 7424 : 
; 7425 : 		if( number >= 0 )

  1071e	83 7d 88 00	 cmp	 DWORD PTR _number$237321[ebp], 0
  10722	0f 8c 9f 00 00
	00		 jl	 $LN7@MLS_SkillP

; 7426 : 		{
; 7427 : 			if( lpTargetObj->MapNumber != gObj[number].MapNumber )

  10728	8b 45 ec	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  1072b	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  10732	8b 55 88	 mov	 edx, DWORD PTR _number$237321[ebp]
  10735	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  1073b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  10740	0f b6 94 10 49
	01 00 00	 movzx	 edx, BYTE PTR [eax+edx+329]
  10748	3b ca		 cmp	 ecx, edx
  1074a	74 02		 je	 SHORT $LN15@MLS_SkillP

; 7428 : 				continue;

  1074c	eb aa		 jmp	 SHORT $LN18@MLS_SkillP
$LN15@MLS_SkillP:

; 7429 : 
; 7430 : 			int dis = gObjCalDistance(lpTargetObj,&gObj[number]);

  1074e	8b 45 88	 mov	 eax, DWORD PTR _number$237321[ebp]
  10751	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  10757	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  1075d	50		 push	 eax
  1075e	8b 4d ec	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  10761	51		 push	 ecx
  10762	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  10767	83 c4 08	 add	 esp, 8
  1076a	89 45 84	 mov	 DWORD PTR _dis$237324[ebp], eax

; 7431 : 
; 7432 : 			if( dis >= 10 )

  1076d	83 7d 84 0a	 cmp	 DWORD PTR _dis$237324[ebp], 10 ; 0000000aH
  10771	7c 02		 jl	 SHORT $LN14@MLS_SkillP

; 7433 : 				continue;

  10773	eb 83		 jmp	 SHORT $LN18@MLS_SkillP
$LN14@MLS_SkillP:

; 7434 : 
; 7435 : 			if( iApplyHealIndex[1] == -1 || iApplyHealDistance[1] > dis )

  10775	83 7d bc ff	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+4], -1
  10779	74 08		 je	 SHORT $LN12@MLS_SkillP
  1077b	8b 45 94	 mov	 eax, DWORD PTR _iApplyHealDistance$[ebp+4]
  1077e	3b 45 84	 cmp	 eax, DWORD PTR _dis$237324[ebp]
  10781	7e 0e		 jle	 SHORT $LN13@MLS_SkillP
$LN12@MLS_SkillP:

; 7436 : 			{
; 7437 : 				iApplyHealIndex[1] = number;

  10783	8b 45 88	 mov	 eax, DWORD PTR _number$237321[ebp]
  10786	89 45 bc	 mov	 DWORD PTR _iApplyHealIndex$[ebp+4], eax

; 7438 : 				iApplyHealDistance[1] = dis;

  10789	8b 45 84	 mov	 eax, DWORD PTR _dis$237324[ebp]
  1078c	89 45 94	 mov	 DWORD PTR _iApplyHealDistance$[ebp+4], eax
  1078f	eb 36		 jmp	 SHORT $LN7@MLS_SkillP
$LN13@MLS_SkillP:

; 7439 : 			}
; 7440 : 			else if( iApplyHealIndex[2] == -1 || iApplyHealDistance[2] > dis )

  10791	83 7d c0 ff	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+8], -1
  10795	74 08		 je	 SHORT $LN9@MLS_SkillP
  10797	8b 45 98	 mov	 eax, DWORD PTR _iApplyHealDistance$[ebp+8]
  1079a	3b 45 84	 cmp	 eax, DWORD PTR _dis$237324[ebp]
  1079d	7e 0e		 jle	 SHORT $LN10@MLS_SkillP
$LN9@MLS_SkillP:

; 7441 : 			{
; 7442 : 				iApplyHealIndex[2] = number;

  1079f	8b 45 88	 mov	 eax, DWORD PTR _number$237321[ebp]
  107a2	89 45 c0	 mov	 DWORD PTR _iApplyHealIndex$[ebp+8], eax

; 7443 : 				iApplyHealDistance[2] = dis;

  107a5	8b 45 84	 mov	 eax, DWORD PTR _dis$237324[ebp]
  107a8	89 45 98	 mov	 DWORD PTR _iApplyHealDistance$[ebp+8], eax
  107ab	eb 1a		 jmp	 SHORT $LN7@MLS_SkillP
$LN10@MLS_SkillP:

; 7444 : 			}
; 7445 : 			else if( iApplyHealIndex[3] == -1 || iApplyHealDistance[3] > dis )

  107ad	83 7d c4 ff	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+12], -1
  107b1	74 08		 je	 SHORT $LN6@MLS_SkillP
  107b3	8b 45 9c	 mov	 eax, DWORD PTR _iApplyHealDistance$[ebp+12]
  107b6	3b 45 84	 cmp	 eax, DWORD PTR _dis$237324[ebp]
  107b9	7e 0c		 jle	 SHORT $LN7@MLS_SkillP
$LN6@MLS_SkillP:

; 7446 : 			{
; 7447 : 				iApplyHealIndex[3] = number;

  107bb	8b 45 88	 mov	 eax, DWORD PTR _number$237321[ebp]
  107be	89 45 c4	 mov	 DWORD PTR _iApplyHealIndex$[ebp+12], eax

; 7448 : 				iApplyHealDistance[3] = dis;

  107c1	8b 45 84	 mov	 eax, DWORD PTR _dis$237324[ebp]
  107c4	89 45 9c	 mov	 DWORD PTR _iApplyHealDistance$[ebp+12], eax
$LN7@MLS_SkillP:

; 7449 : 			}
; 7450 : 		}
; 7451 : 	}

  107c7	e9 2c ff ff ff	 jmp	 $LN18@MLS_SkillP
$LN17@MLS_SkillP:

; 7452 : 
; 7453 : 	for( i = 0; i < 4; i++)

  107cc	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  107d3	eb 09		 jmp	 SHORT $LN5@MLS_SkillP
$LN4@MLS_SkillP:
  107d5	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  107d8	83 c0 01	 add	 eax, 1
  107db	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax
$LN5@MLS_SkillP:
  107de	83 7d 8c 04	 cmp	 DWORD PTR _i$[ebp], 4
  107e2	0f 8d ca 00 00
	00		 jge	 $LN3@MLS_SkillP

; 7454 : 	{
; 7455 : 		if( iApplyHealIndex[i] != -1 )

  107e8	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  107eb	83 7c 85 b8 ff	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+eax*4], -1
  107f0	0f 84 b7 00 00
	00		 je	 $LN2@MLS_SkillP

; 7456 : 		{
; 7457 : 			LPOBJ lpHealObj = &gObj[iApplyHealIndex[i]];

  107f6	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  107f9	8b 4c 85 b8	 mov	 ecx, DWORD PTR _iApplyHealIndex$[ebp+eax*4]
  107fd	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  10803	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  10809	89 4d 80	 mov	 DWORD PTR _lpHealObj$237338[ebp], ecx

; 7458 : 			lpHealObj->Life += addlife;

  1080c	db 45 e4	 fild	 DWORD PTR _addlife$[ebp]
  1080f	8b 45 80	 mov	 eax, DWORD PTR _lpHealObj$237338[ebp]
  10812	d8 80 fc 00 00
	00		 fadd	 DWORD PTR [eax+252]
  10818	8b 4d 80	 mov	 ecx, DWORD PTR _lpHealObj$237338[ebp]
  1081b	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 7459 : 
; 7460 : 			if( lpHealObj->Life > lpHealObj->MaxLife+lpHealObj->AddLife )

  10821	8b 45 80	 mov	 eax, DWORD PTR _lpHealObj$237338[ebp]
  10824	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  1082a	8b 4d 80	 mov	 ecx, DWORD PTR _lpHealObj$237338[ebp]
  1082d	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  10833	8b 55 80	 mov	 edx, DWORD PTR _lpHealObj$237338[ebp]
  10836	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  1083c	de d9		 fcompp
  1083e	df e0		 fnstsw	 ax
  10840	f6 c4 41	 test	 ah, 65			; 00000041H
  10843	75 1b		 jne	 SHORT $LN1@MLS_SkillP

; 7461 : 				lpHealObj->Life = lpHealObj->MaxLife+lpHealObj->AddLife;

  10845	8b 45 80	 mov	 eax, DWORD PTR _lpHealObj$237338[ebp]
  10848	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  1084e	8b 4d 80	 mov	 ecx, DWORD PTR _lpHealObj$237338[ebp]
  10851	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  10857	8b 55 80	 mov	 edx, DWORD PTR _lpHealObj$237338[ebp]
  1085a	d9 9a fc 00 00
	00		 fstp	 DWORD PTR [edx+252]
$LN1@MLS_SkillP:

; 7462 : 
; 7463 : 			GCReFillSend(lpTargetObj->m_Index,(int)lpTargetObj->Life,0xFF,0,lpTargetObj->iShield);

  10860	8b 45 ec	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  10863	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  10869	51		 push	 ecx
  1086a	6a 00		 push	 0
  1086c	68 ff 00 00 00	 push	 255			; 000000ffH
  10871	8b 55 ec	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  10874	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  1087a	e8 00 00 00 00	 call	 __ftol2_sse
  1087f	50		 push	 eax
  10880	8b 45 ec	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  10883	8b 08		 mov	 ecx, DWORD PTR [eax]
  10885	51		 push	 ecx
  10886	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  1088b	83 c4 14	 add	 esp, 20			; 00000014H

; 7464 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpHealObj->m_Index,skillSuccess);

  1088e	0f b6 45 f4	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  10892	50		 push	 eax
  10893	8b 4d 80	 mov	 ecx, DWORD PTR _lpHealObj$237338[ebp]
  10896	8b 11		 mov	 edx, DWORD PTR [ecx]
  10898	52		 push	 edx
  10899	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  1089c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  108a0	51		 push	 ecx
  108a1	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  108a4	52		 push	 edx
  108a5	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  108aa	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@MLS_SkillP:

; 7465 : 		}
; 7466 : 	}

  108ad	e9 23 ff ff ff	 jmp	 $LN4@MLS_SkillP
$LN3@MLS_SkillP:
$LN26@MLS_SkillP:

; 7467 : }

  108b2	5f		 pop	 edi
  108b3	5e		 pop	 esi
  108b4	5b		 pop	 ebx
  108b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  108b8	33 cd		 xor	 ecx, ebp
  108ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  108bf	8b e5		 mov	 esp, ebp
  108c1	5d		 pop	 ebp
  108c2	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	51		 push	 ecx
  0000a	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00010	e8 00 00 00 00	 call	 _sqrtf
  00015	83 c4 04	 add	 esp, 4
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00012	e8 00 00 00 00	 call	 _sqrt
  00017	83 c4 08	 add	 esp, 8
  0001a	d9 5d bc	 fstp	 DWORD PTR tv73[ebp]
  0001d	d9 45 bc	 fld	 DWORD PTR tv73[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\newmasterlevelskilltreesystem.cpp
;	COMDAT ??__Eg_MasterSkillSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_MasterSkillSystem@@YAXXZ PROC			; `dynamic initializer for 'g_MasterSkillSystem'', COMDAT

; 37   : CMasterLevelSkillTreeSystem g_MasterSkillSystem;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0000e	e8 00 00 00 00	 call	 ??0CMasterLevelSkillTreeSystem@@QAE@XZ ; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_MasterSkillSystem@@YAXXZ ; `dynamic atexit destructor for 'g_MasterSkillSystem''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_MasterSkillSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_MasterSkillSystem''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_MasterSkillSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_MasterSkillSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MasterSkillSystem'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0000e	e8 00 00 00 00	 call	 ??1CMasterLevelSkillTreeSystem@@UAE@XZ ; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_MasterSkillSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MasterSkillSystem''
text$yd	ENDS
PUBLIC	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
_BSS	SEGMENT
?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A DB 055ccH DUP (?) ; g_MasterSkillSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MasterSkillSystem$initializer$ DD FLAT:??__Eg_MasterSkillSystem@@YAXXZ
CRT$XCU	ENDS
END
