; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\CWhatsUpDummyServer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA ; CWhatsUpDummyServer::m_lpOldProc
_BSS	SEGMENT
?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA DD 01H DUP (?) ; CWhatsUpDummyServer::m_lpOldProc
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0CWhatsUpDummyServer@@QAE@XZ			; CWhatsUpDummyServer::CWhatsUpDummyServer
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\cwhatsupdummyserver.cpp
_TEXT	SEGMENT
_wsaVer$ = -408						; size = 400
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CWhatsUpDummyServer@@QAE@XZ PROC			; CWhatsUpDummyServer::CWhatsUpDummyServer
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 01 00
	00		 sub	 esp, 472		; 000001d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 10   : 	WSADATA wsaVer;
; 11   : 	this->m_sckDUMMY = INVALID_SOCKET;

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 12   : 	this->m_hParentWnd = NULL;

  00022	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 13   : 	CWhatsUpDummyServer::m_lpOldProc=0;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA, 0 ; CWhatsUpDummyServer::m_lpOldProc

; 14   : 	WSAStartup(WINSOCK_REQUESTED_VERSION, &wsaVer);

  00036	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _wsaVer$[ebp]
  0003c	50		 push	 eax
  0003d	68 02 02 00 00	 push	 514			; 00000202H
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8

; 15   : }

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	33 cd		 xor	 ecx, ebp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??0CWhatsUpDummyServer@@QAE@XZ ENDP			; CWhatsUpDummyServer::CWhatsUpDummyServer
_TEXT	ENDS
PUBLIC	??1CWhatsUpDummyServer@@QAE@XZ			; CWhatsUpDummyServer::~CWhatsUpDummyServer
EXTRN	__imp__closesocket@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWhatsUpDummyServer@@QAE@XZ PROC			; CWhatsUpDummyServer::~CWhatsUpDummyServer
; _this$ = ecx

; 18   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	83 ec 44	 sub	 esp, 68			; 00000044H
  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	if ( this->m_sckDUMMY != INVALID_SOCKET )

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00072	74 0c		 je	 SHORT $LN2@CWhatsUpDu

; 20   : 	{
; 21   : 		closesocket(this->m_sckDUMMY );

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 08		 mov	 ecx, DWORD PTR [eax]
  00079	51		 push	 ecx
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$LN2@CWhatsUpDu:

; 22   : 	}
; 23   : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1CWhatsUpDummyServer@@QAE@XZ ENDP			; CWhatsUpDummyServer::~CWhatsUpDummyServer
_TEXT	ENDS
PUBLIC	?ParentWndProc@CWhatsUpDummyServer@@SAJPAUHWND__@@IIJ@Z ; CWhatsUpDummyServer::ParentWndProc
PUBLIC	__$ArrayPad$
PUBLIC	?Start@CWhatsUpDummyServer@@QAEHPAUHWND__@@G@Z	; CWhatsUpDummyServer::Start
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__WSAAsyncSelect@16:PROC
EXTRN	__imp__listen@8:PROC
EXTRN	__imp__bind@12:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__socket@12:PROC
EXTRN	__imp__IsWindow@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iRetVal$ = -28						; size = 4
_sockinfo$ = -24					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_wPort$ = 12						; size = 2
?Start@CWhatsUpDummyServer@@QAEHPAUHWND__@@G@Z PROC	; CWhatsUpDummyServer::Start
; _this$ = ecx

; 26   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0009b	33 c5		 xor	 eax, ebp
  0009d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000a0	53		 push	 ebx
  000a1	56		 push	 esi
  000a2	57		 push	 edi
  000a3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	sockaddr_in sockinfo;
; 28   : 	int iRetVal;
; 29   : 
; 30   : 	if ( hWnd == 0 )

  000a6	83 7d 08 00	 cmp	 DWORD PTR _hWnd$[ebp], 0
  000aa	75 07		 jne	 SHORT $LN6@Start

; 31   : 	{
; 32   : 		return 0;

  000ac	33 c0		 xor	 eax, eax
  000ae	e9 22 01 00 00	 jmp	 $LN7@Start
$LN6@Start:

; 33   : 	}
; 34   : 
; 35   : 	if ( !IsWindow(hWnd) )

  000b3	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  000b6	50		 push	 eax
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  000bd	85 c0		 test	 eax, eax
  000bf	75 07		 jne	 SHORT $LN5@Start

; 36   : 	{
; 37   : 		return 0;

  000c1	33 c0		 xor	 eax, eax
  000c3	e9 0d 01 00 00	 jmp	 $LN7@Start
$LN5@Start:

; 38   : 	}
; 39   : 
; 40   : 	this->m_hParentWnd = hWnd;

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  000ce	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 41   : 
; 42   : 	this->m_sckDUMMY=socket(AF_INET, SOCK_STREAM, IPPROTO_IP);

  000d1	6a 00		 push	 0
  000d3	6a 01		 push	 1
  000d5	6a 02		 push	 2
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  000dd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	89 01		 mov	 DWORD PTR [ecx], eax

; 43   : 	
; 44   : 	if ( this->m_sckDUMMY == INVALID_SOCKET )

  000e2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	83 38 ff	 cmp	 DWORD PTR [eax], -1
  000e8	75 07		 jne	 SHORT $LN4@Start

; 45   : 	{
; 46   : 		return 0;

  000ea	33 c0		 xor	 eax, eax
  000ec	e9 e4 00 00 00	 jmp	 $LN7@Start
$LN4@Start:

; 47   : 	}
; 48   : 
; 49   : 	sockinfo.sin_family =AF_INET;

  000f1	b8 02 00 00 00	 mov	 eax, 2
  000f6	66 89 45 e8	 mov	 WORD PTR _sockinfo$[ebp], ax

; 50   : 	sockinfo.sin_addr.S_un.S_addr=0;

  000fa	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _sockinfo$[ebp+4], 0

; 51   : 	sockinfo.sin_port=htons(wPort);

  00101	0f b7 45 0c	 movzx	 eax, WORD PTR _wPort$[ebp]
  00105	50		 push	 eax
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  0010c	66 89 45 ea	 mov	 WORD PTR _sockinfo$[ebp+2], ax

; 52   : 	
; 53   : 	iRetVal=0;

  00110	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iRetVal$[ebp], 0

; 54   : 	iRetVal=bind(this->m_sckDUMMY , (sockaddr*)&sockinfo,16);

  00117	6a 10		 push	 16			; 00000010H
  00119	8d 45 e8	 lea	 eax, DWORD PTR _sockinfo$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	8b 11		 mov	 edx, DWORD PTR [ecx]
  00122	52		 push	 edx
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12
  00129	89 45 e4	 mov	 DWORD PTR _iRetVal$[ebp], eax

; 55   : 
; 56   : 	if (iRetVal == -1)

  0012c	83 7d e4 ff	 cmp	 DWORD PTR _iRetVal$[ebp], -1
  00130	75 1c		 jne	 SHORT $LN3@Start

; 57   : 	{
; 58   : 		closesocket(this->m_sckDUMMY);

  00132	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00135	8b 08		 mov	 ecx, DWORD PTR [eax]
  00137	51		 push	 ecx
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 59   : 		this->m_sckDUMMY = INVALID_SOCKET;

  0013e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00141	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 60   : 		return 0;

  00147	33 c0		 xor	 eax, eax
  00149	e9 87 00 00 00	 jmp	 $LN7@Start
$LN3@Start:

; 61   : 	}
; 62   : 
; 63   : 	iRetVal=listen(this->m_sckDUMMY, 2147483647 );

  0014e	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00153	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00156	8b 08		 mov	 ecx, DWORD PTR [eax]
  00158	51		 push	 ecx
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__listen@8
  0015f	89 45 e4	 mov	 DWORD PTR _iRetVal$[ebp], eax

; 64   : 
; 65   : 	if (iRetVal == -1 )

  00162	83 7d e4 ff	 cmp	 DWORD PTR _iRetVal$[ebp], -1
  00166	75 19		 jne	 SHORT $LN2@Start

; 66   : 	{
; 67   : 		closesocket(this->m_sckDUMMY);

  00168	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0016b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016d	51		 push	 ecx
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 68   : 		this->m_sckDUMMY = INVALID_SOCKET;

  00174	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00177	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 69   : 		return 0;

  0017d	33 c0		 xor	 eax, eax
  0017f	eb 54		 jmp	 SHORT $LN7@Start
$LN2@Start:

; 70   : 	}
; 71   : 
; 72   : 	iRetVal=WSAAsyncSelect(this->m_sckDUMMY , hWnd, WM_GM_CONNECT_SERVER_MSG, FD_ACCEPT);

  00181	6a 08		 push	 8
  00183	68 0f 04 00 00	 push	 1039			; 0000040fH
  00188	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0018b	50		 push	 eax
  0018c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00191	52		 push	 edx
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16
  00198	89 45 e4	 mov	 DWORD PTR _iRetVal$[ebp], eax

; 73   : 
; 74   : 	if (iRetVal == -1 )

  0019b	83 7d e4 ff	 cmp	 DWORD PTR _iRetVal$[ebp], -1
  0019f	75 19		 jne	 SHORT $LN1@Start

; 75   : 	{
; 76   : 		closesocket(this->m_sckDUMMY);

  001a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	51		 push	 ecx
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 77   : 		this->m_sckDUMMY = INVALID_SOCKET;

  001ad	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b0	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 78   : 		return 0;

  001b6	33 c0		 xor	 eax, eax
  001b8	eb 1b		 jmp	 SHORT $LN7@Start
$LN1@Start:

; 79   : 	}
; 80   : 
; 81   : 	CWhatsUpDummyServer::m_lpOldProc=(WNDPROC)SetWindowLong(hWnd, GWL_WNDPROC, (LONG)ParentWndProc  );

  001ba	68 00 00 00 00	 push	 OFFSET ?ParentWndProc@CWhatsUpDummyServer@@SAJPAUHWND__@@IIJ@Z ; CWhatsUpDummyServer::ParentWndProc
  001bf	6a fc		 push	 -4			; fffffffcH
  001c1	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  001c4	50		 push	 eax
  001c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  001cb	a3 00 00 00 00	 mov	 DWORD PTR ?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA, eax ; CWhatsUpDummyServer::m_lpOldProc

; 82   : 	return 1;

  001d0	b8 01 00 00 00	 mov	 eax, 1
$LN7@Start:

; 83   : }

  001d5	5f		 pop	 edi
  001d6	5e		 pop	 esi
  001d7	5b		 pop	 ebx
  001d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001db	33 cd		 xor	 ecx, ebp
  001dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c2 08 00	 ret	 8
?Start@CWhatsUpDummyServer@@QAEHPAUHWND__@@G@Z ENDP	; CWhatsUpDummyServer::Start
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__CallWindowProcA@20:PROC
EXTRN	__imp__recv@16:PROC
EXTRN	__imp__accept@12:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -360						; size = 4
tv64 = -360						; size = 4
_iRecvBytes$222013 = -292				; size = 4
_cBUFFER$222012 = -288					; size = 256
_iRetVal$222006 = -32					; size = 4
_sckTemp$222005 = -28					; size = 4
_isockinfolen$222004 = -24				; size = 4
_sockinfo$222003 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_iMessage$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?ParentWndProc@CWhatsUpDummyServer@@SAJPAUHWND__@@IIJ@Z PROC ; CWhatsUpDummyServer::ParentWndProc

; 86   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001fe	33 c5		 xor	 eax, ebp
  00200	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00203	53		 push	 ebx
  00204	56		 push	 esi
  00205	57		 push	 edi

; 87   : 	switch ( iMessage )

  00206	8b 45 0c	 mov	 eax, DWORD PTR _iMessage$[ebp]
  00209	89 85 98 fe ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  0020f	81 bd 98 fe ff
	ff 0f 04 00 00	 cmp	 DWORD PTR tv64[ebp], 1039 ; 0000040fH
  00219	74 05		 je	 SHORT $LN11@ParentWndP
  0021b	e9 0c 01 00 00	 jmp	 $LN1@ParentWndP
$LN11@ParentWndP:

; 88   : 	{
; 89   : 		case WM_GM_CONNECT_SERVER_MSG:
; 90   : 			switch ( lParam & 0xFFFF & 0xFFFF )

  00220	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00223	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00228	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0022d	89 85 98 fe ff
	ff		 mov	 DWORD PTR tv67[ebp], eax
  00233	83 bd 98 fe ff
	ff 01		 cmp	 DWORD PTR tv67[ebp], 1
  0023a	0f 84 81 00 00
	00		 je	 $LN5@ParentWndP
  00240	83 bd 98 fe ff
	ff 08		 cmp	 DWORD PTR tv67[ebp], 8
  00247	74 12		 je	 SHORT $LN8@ParentWndP
  00249	83 bd 98 fe ff
	ff 20		 cmp	 DWORD PTR tv67[ebp], 32	; 00000020H
  00250	0f 84 b8 00 00
	00		 je	 $LN3@ParentWndP
  00256	e9 cb 00 00 00	 jmp	 $LN2@ParentWndP
$LN8@ParentWndP:

; 91   : 			{
; 92   : 				case FD_ACCEPT:
; 93   : 					{
; 94   : 						sockaddr_in sockinfo;
; 95   : 						int isockinfolen=16;

  0025b	c7 45 e8 10 00
	00 00		 mov	 DWORD PTR _isockinfolen$222004[ebp], 16 ; 00000010H

; 96   : 						SOCKET sckTemp;
; 97   : 						int iRetVal;
; 98   : 
; 99   : 						sckTemp = accept(wParam & 0xFFFF & 0xFFFF, (sockaddr *)&sockinfo, &isockinfolen);

  00262	8d 45 e8	 lea	 eax, DWORD PTR _isockinfolen$222004[ebp]
  00265	50		 push	 eax
  00266	8d 4d ec	 lea	 ecx, DWORD PTR _sockinfo$222003[ebp]
  00269	51		 push	 ecx
  0026a	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  0026d	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00273	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00279	52		 push	 edx
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__accept@12
  00280	89 45 e4	 mov	 DWORD PTR _sckTemp$222005[ebp], eax

; 100  : 
; 101  : 						if ( sckTemp == INVALID_SOCKET )

  00283	83 7d e4 ff	 cmp	 DWORD PTR _sckTemp$222005[ebp], -1
  00287	75 07		 jne	 SHORT $LN7@ParentWndP

; 102  : 							return FALSE;

  00289	33 c0		 xor	 eax, eax
  0028b	e9 b9 00 00 00	 jmp	 $LN14@ParentWndP
$LN7@ParentWndP:

; 103  : 
; 104  : 						iRetVal = WSAAsyncSelect(sckTemp, hWnd, WM_GM_CONNECT_SERVER_MSG, FD_READ|FD_CLOSE);

  00290	6a 21		 push	 33			; 00000021H
  00292	68 0f 04 00 00	 push	 1039			; 0000040fH
  00297	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0029a	50		 push	 eax
  0029b	8b 4d e4	 mov	 ecx, DWORD PTR _sckTemp$222005[ebp]
  0029e	51		 push	 ecx
  0029f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16
  002a5	89 45 e0	 mov	 DWORD PTR _iRetVal$222006[ebp], eax

; 105  : 
; 106  : 						if ( iRetVal == -1 )

  002a8	83 7d e0 ff	 cmp	 DWORD PTR _iRetVal$222006[ebp], -1
  002ac	75 0a		 jne	 SHORT $LN6@ParentWndP

; 107  : 						{
; 108  : 							closesocket(sckTemp);

  002ae	8b 45 e4	 mov	 eax, DWORD PTR _sckTemp$222005[ebp]
  002b1	50		 push	 eax
  002b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$LN6@ParentWndP:

; 109  : 						}
; 110  : 						return FALSE;

  002b8	33 c0		 xor	 eax, eax
  002ba	e9 8a 00 00 00	 jmp	 $LN14@ParentWndP

; 111  : 					}
; 112  : 					break;

  002bf	eb 69		 jmp	 SHORT $LN9@ParentWndP
$LN5@ParentWndP:

; 113  : 				case FD_READ:
; 114  : 					{
; 115  : 						char cBUFFER[256];
; 116  : 						int iRecvBytes = recv(wParam & 0xFFFF & 0xFFFF, cBUFFER, sizeof(cBUFFER), 0);

  002c1	6a 00		 push	 0
  002c3	68 00 01 00 00	 push	 256			; 00000100H
  002c8	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$222012[ebp]
  002ce	50		 push	 eax
  002cf	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  002d2	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002d8	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002de	51		 push	 ecx
  002df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recv@16
  002e5	89 85 dc fe ff
	ff		 mov	 DWORD PTR _iRecvBytes$222013[ebp], eax

; 117  : 
; 118  : 						if ( iRecvBytes <= 0 )

  002eb	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _iRecvBytes$222013[ebp], 0
  002f2	7f 14		 jg	 SHORT $LN4@ParentWndP

; 119  : 						{
; 120  : 							closesocket(wParam & 0xFFFF & 0xFFFF);

  002f4	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  002f7	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  002fc	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00301	50		 push	 eax
  00302	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$LN4@ParentWndP:

; 121  : 						}
; 122  : 						return FALSE;

  00308	33 c0		 xor	 eax, eax
  0030a	eb 3d		 jmp	 SHORT $LN14@ParentWndP

; 123  : 					}
; 124  : 					break;

  0030c	eb 1c		 jmp	 SHORT $LN9@ParentWndP
$LN3@ParentWndP:

; 125  : 				case FD_CLOSE:
; 126  : 					closesocket(wParam & 0xFFFF & 0xFFFF);

  0030e	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  00311	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00316	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0031b	50		 push	 eax
  0031c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 127  : 					return FALSE;

  00322	33 c0		 xor	 eax, eax
  00324	eb 23		 jmp	 SHORT $LN14@ParentWndP
$LN2@ParentWndP:

; 128  : 				default:
; 129  : 					return FALSE;

  00326	33 c0		 xor	 eax, eax
  00328	eb 1f		 jmp	 SHORT $LN14@ParentWndP
$LN9@ParentWndP:

; 130  : 			}
; 131  : 			break;

  0032a	eb 1d		 jmp	 SHORT $LN14@ParentWndP
$LN1@ParentWndP:

; 132  : 		default:
; 133  : 			return CallWindowProcA(CWhatsUpDummyServer::m_lpOldProc, hWnd, iMessage, wParam, lParam);

  0032c	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0032f	50		 push	 eax
  00330	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00333	51		 push	 ecx
  00334	8b 55 0c	 mov	 edx, DWORD PTR _iMessage$[ebp]
  00337	52		 push	 edx
  00338	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0033b	50		 push	 eax
  0033c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA ; CWhatsUpDummyServer::m_lpOldProc
  00342	51		 push	 ecx
  00343	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
$LN14@ParentWndP:

; 134  : 	}
; 135  : }

  00349	5f		 pop	 edi
  0034a	5e		 pop	 esi
  0034b	5b		 pop	 ebx
  0034c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0034f	33 cd		 xor	 ecx, ebp
  00351	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00356	8b e5		 mov	 esp, ebp
  00358	5d		 pop	 ebp
  00359	c3		 ret	 0
?ParentWndProc@CWhatsUpDummyServer@@SAJPAUHWND__@@IIJ@Z ENDP ; CWhatsUpDummyServer::ParentWndProc
_TEXT	ENDS
END
