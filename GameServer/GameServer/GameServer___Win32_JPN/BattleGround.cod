; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\BattleGround.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CBattleGround@@6B@				; CBattleGround::`vftable'
PUBLIC	??0CBattleGround@@QAE@XZ			; CBattleGround::CBattleGround
PUBLIC	??_R4CBattleGround@@6B@				; CBattleGround::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBattleGround@@@8			; CBattleGround `RTTI Type Descriptor'
PUBLIC	??_R3CBattleGround@@8				; CBattleGround::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBattleGround@@8				; CBattleGround::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBattleGround@@8			; CBattleGround::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECBattleGround@@UAEPAXI@Z:PROC		; CBattleGround::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CBattleGround@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\battleground.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CBattleGround@@8 DD FLAT:??_R0?AVCBattleGround@@@8 ; CBattleGround::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBattleGround@@8
rdata$r	ENDS
;	COMDAT ??_R2CBattleGround@@8
rdata$r	SEGMENT
??_R2CBattleGround@@8 DD FLAT:??_R1A@?0A@EA@CBattleGround@@8 ; CBattleGround::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBattleGround@@8
rdata$r	SEGMENT
??_R3CBattleGround@@8 DD 00H				; CBattleGround::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBattleGround@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBattleGround@@@8
_DATA	SEGMENT
??_R0?AVCBattleGround@@@8 DD FLAT:??_7type_info@@6B@	; CBattleGround `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBattleGround@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBattleGround@@6B@
rdata$r	SEGMENT
??_R4CBattleGround@@6B@ DD 00H				; CBattleGround::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBattleGround@@@8
	DD	FLAT:??_R3CBattleGround@@8
rdata$r	ENDS
;	COMDAT ??_7CBattleGround@@6B@
CONST	SEGMENT
??_7CBattleGround@@6B@ DD FLAT:??_R4CBattleGround@@6B@	; CBattleGround::`vftable'
	DD	FLAT:??_ECBattleGround@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBattleGround@@QAE@XZ PROC				; CBattleGround::CBattleGround
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CBattleGround@@6B@

; 7    : 	this->m_Used = FALSE;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 8    : 	this->m_Set = FALSE;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 9    : }

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??0CBattleGround@@QAE@XZ ENDP				; CBattleGround::CBattleGround
_TEXT	ENDS
PUBLIC	??1CBattleGround@@UAE@XZ			; CBattleGround::~CBattleGround
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCBattleGround@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBattleGround@@UAEPAXI@Z PROC			; CBattleGround::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CBattleGround@@UAE@XZ ; CBattleGround::~CBattleGround
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCBattleGround@@UAEPAXI@Z ENDP			; CBattleGround::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBattleGround@@UAE@XZ PROC				; CBattleGround::~CBattleGround
; _this$ = ecx

; 12   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CBattleGround@@6B@

; 13   : 	return;
; 14   : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??1CBattleGround@@UAE@XZ ENDP				; CBattleGround::~CBattleGround
_TEXT	ENDS
PUBLIC	?SetGroundRect@CBattleGround@@QAEXHHHHH@Z	; CBattleGround::SetGroundRect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_map$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_xl$ = 20						; size = 4
_yl$ = 24						; size = 4
?SetGroundRect@CBattleGround@@QAEXHHHHH@Z PROC		; CBattleGround::SetGroundRect
; _this$ = ecx

; 17   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	83 ec 44	 sub	 esp, 68			; 00000044H
  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : 	this->m_MapNumber = map;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _map$[ebp]
  00072	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 19   : 	this->m_rect.left = x;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0007b	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 20   : 	this->m_rect.top = y;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00084	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 21   : 	this->m_rect.right = xl;

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 4d 14	 mov	 ecx, DWORD PTR _xl$[ebp]
  0008d	89 48 40	 mov	 DWORD PTR [eax+64], ecx

; 22   : 	this->m_rect.bottom = yl;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 4d 18	 mov	 ecx, DWORD PTR _yl$[ebp]
  00096	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 23   : 	this->m_Set = true;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [eax+72], 1

; 24   : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 14 00	 ret	 20			; 00000014H
?SetGroundRect@CBattleGround@@QAEXHHHHH@Z ENDP		; CBattleGround::SetGroundRect
_TEXT	ENDS
PUBLIC	?SetBattleType@CBattleGround@@QAEXH@Z		; CBattleGround::SetBattleType
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
?SetBattleType@CBattleGround@@QAEXH@Z PROC		; CBattleGround::SetBattleType
; _this$ = ecx

; 28   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	83 ec 44	 sub	 esp, 68			; 00000044H
  000b6	53		 push	 ebx
  000b7	56		 push	 esi
  000b8	57		 push	 edi
  000b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 	this->m_Type = type;

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _type$[ebp]
  000c2	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 30   : }

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
?SetBattleType@CBattleGround@@QAEXH@Z ENDP		; CBattleGround::SetBattleType
_TEXT	ENDS
PUBLIC	?GetUsed@CBattleGround@@QAEHXZ			; CBattleGround::GetUsed
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUsed@CBattleGround@@QAEHXZ PROC			; CBattleGround::GetUsed
; _this$ = ecx

; 34   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	83 ec 44	 sub	 esp, 68			; 00000044H
  000d6	53		 push	 ebx
  000d7	56		 push	 esi
  000d8	57		 push	 edi
  000d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	return this->m_Used;

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8b 40 50	 mov	 eax, DWORD PTR [eax+80]

; 36   : }

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
?GetUsed@CBattleGround@@QAEHXZ ENDP			; CBattleGround::GetUsed
_TEXT	ENDS
PUBLIC	?Enable@CBattleGround@@QAEXH@Z			; CBattleGround::Enable
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_enable$ = 8						; size = 4
?Enable@CBattleGround@@QAEXH@Z PROC			; CBattleGround::Enable
; _this$ = ecx

; 40   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	83 ec 44	 sub	 esp, 68			; 00000044H
  000f6	53		 push	 ebx
  000f7	56		 push	 esi
  000f8	57		 push	 edi
  000f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	this->m_Used = enable;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 4d 08	 mov	 ecx, DWORD PTR _enable$[ebp]
  00102	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 42   : 
; 43   : 	if ( this->m_Used == TRUE)

  00105	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00108	83 78 50 01	 cmp	 DWORD PTR [eax+80], 1
  0010c	75 14		 jne	 SHORT $LN2@Enable

; 44   : 	{
; 45   : 		this->m_Score1 = 0;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00111	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 46   : 		this->m_Score2 = 0;

  00118	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
$LN2@Enable:

; 47   : 	}
; 48   : }

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 04 00	 ret	 4
?Enable@CBattleGround@@QAEXH@Z ENDP			; CBattleGround::Enable
_TEXT	ENDS
PUBLIC	?SetTeamMaster@CBattleGround@@QAEXHPAD@Z	; CBattleGround::SetTeamMaster
EXTRN	_strcpy:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_szId$ = 12						; size = 4
?SetTeamMaster@CBattleGround@@QAEXHPAD@Z PROC		; CBattleGround::SetTeamMaster
; _this$ = ecx

; 52   : {

  00130	55		 push	 ebp
  00131	8b ec		 mov	 ebp, esp
  00133	83 ec 44	 sub	 esp, 68			; 00000044H
  00136	53		 push	 ebx
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : 	if ( n == 0 )

  0013c	83 7d 08 00	 cmp	 DWORD PTR _n$[ebp], 0
  00140	75 15		 jne	 SHORT $LN2@SetTeamMas

; 54   : 	{
; 55   : 		strcpy(this->m_szID1 , szId );

  00142	8b 45 0c	 mov	 eax, DWORD PTR _szId$[ebp]
  00145	50		 push	 eax
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	83 c1 20	 add	 ecx, 32			; 00000020H
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 _strcpy
  00152	83 c4 08	 add	 esp, 8

; 56   : 	}
; 57   : 	else

  00155	eb 13		 jmp	 SHORT $LN3@SetTeamMas
$LN2@SetTeamMas:

; 58   : 	{
; 59   : 		strcpy( this->m_szID2 , szId);

  00157	8b 45 0c	 mov	 eax, DWORD PTR _szId$[ebp]
  0015a	50		 push	 eax
  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	83 c1 2b	 add	 ecx, 43			; 0000002bH
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 _strcpy
  00167	83 c4 08	 add	 esp, 8
$LN3@SetTeamMas:

; 60   : 	}
; 61   : }

  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 08 00	 ret	 8
?SetTeamMaster@CBattleGround@@QAEXHPAD@Z ENDP		; CBattleGround::SetTeamMaster
_TEXT	ENDS
PUBLIC	?SetTeamName@CBattleGround@@QAEXHPAD@Z		; CBattleGround::SetTeamName
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_szName$ = 12						; size = 4
?SetTeamName@CBattleGround@@QAEXHPAD@Z PROC		; CBattleGround::SetTeamName
; _this$ = ecx

; 64   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	83 ec 44	 sub	 esp, 68			; 00000044H
  00186	53		 push	 ebx
  00187	56		 push	 esi
  00188	57		 push	 edi
  00189	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	if ( n == 0 )

  0018c	83 7d 08 00	 cmp	 DWORD PTR _n$[ebp], 0
  00190	75 15		 jne	 SHORT $LN2@SetTeamNam

; 66   : 	{
; 67   : 		strcpy(this->m_szTeamName1 , szName );

  00192	8b 45 0c	 mov	 eax, DWORD PTR _szName$[ebp]
  00195	50		 push	 eax
  00196	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00199	83 c1 04	 add	 ecx, 4
  0019c	51		 push	 ecx
  0019d	e8 00 00 00 00	 call	 _strcpy
  001a2	83 c4 08	 add	 esp, 8

; 68   : 	}
; 69   : 	else

  001a5	eb 13		 jmp	 SHORT $LN3@SetTeamNam
$LN2@SetTeamNam:

; 70   : 	{
; 71   : 		strcpy( this->m_szTeamName2 , szName);

  001a7	8b 45 0c	 mov	 eax, DWORD PTR _szName$[ebp]
  001aa	50		 push	 eax
  001ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ae	83 c1 0d	 add	 ecx, 13			; 0000000dH
  001b1	51		 push	 ecx
  001b2	e8 00 00 00 00	 call	 _strcpy
  001b7	83 c4 08	 add	 esp, 8
$LN3@SetTeamNam:

; 72   : 	}
; 73   : }

  001ba	5f		 pop	 edi
  001bb	5e		 pop	 esi
  001bc	5b		 pop	 ebx
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c2 08 00	 ret	 8
?SetTeamName@CBattleGround@@QAEXHPAD@Z ENDP		; CBattleGround::SetTeamName
_TEXT	ENDS
PUBLIC	?GetTeamName@CBattleGround@@QAEPADH@Z		; CBattleGround::GetTeamName
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?GetTeamName@CBattleGround@@QAEPADH@Z PROC		; CBattleGround::GetTeamName
; _this$ = ecx

; 76   : {

  001d0	55		 push	 ebp
  001d1	8b ec		 mov	 ebp, esp
  001d3	83 ec 44	 sub	 esp, 68			; 00000044H
  001d6	53		 push	 ebx
  001d7	56		 push	 esi
  001d8	57		 push	 edi
  001d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 77   : 	if ( n==0)

  001dc	83 7d 08 00	 cmp	 DWORD PTR _n$[ebp], 0
  001e0	75 0a		 jne	 SHORT $LN2@GetTeamNam

; 78   : 	{
; 79   : 		return this->m_szTeamName1;

  001e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e5	83 c0 04	 add	 eax, 4
  001e8	eb 08		 jmp	 SHORT $LN3@GetTeamNam

; 80   : 	}
; 81   : 	else

  001ea	eb 06		 jmp	 SHORT $LN3@GetTeamNam
$LN2@GetTeamNam:

; 82   : 	{
; 83   : 		return this->m_szTeamName2;

  001ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	83 c0 0d	 add	 eax, 13			; 0000000dH
$LN3@GetTeamNam:

; 84   : 	}
; 85   : }

  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
  001f5	8b e5		 mov	 esp, ebp
  001f7	5d		 pop	 ebp
  001f8	c2 04 00	 ret	 4
?GetTeamName@CBattleGround@@QAEPADH@Z ENDP		; CBattleGround::GetTeamName
_TEXT	ENDS
PUBLIC	?GetScore@CBattleGround@@QAEHH@Z		; CBattleGround::GetScore
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_team$ = 8						; size = 4
?GetScore@CBattleGround@@QAEHH@Z PROC			; CBattleGround::GetScore
; _this$ = ecx

; 88   : {

  00200	55		 push	 ebp
  00201	8b ec		 mov	 ebp, esp
  00203	83 ec 44	 sub	 esp, 68			; 00000044H
  00206	53		 push	 ebx
  00207	56		 push	 esi
  00208	57		 push	 edi
  00209	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   : 	if ( team == 0 )

  0020c	83 7d 08 00	 cmp	 DWORD PTR _team$[ebp], 0
  00210	75 0a		 jne	 SHORT $LN2@GetScore

; 90   : 	{
; 91   : 		return this->m_Score1;

  00212	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00215	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00218	eb 08		 jmp	 SHORT $LN3@GetScore

; 92   : 	}
; 93   : 	else

  0021a	eb 06		 jmp	 SHORT $LN3@GetScore
$LN2@GetScore:

; 94   : 	{
; 95   : 		return this->m_Score2;

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0021f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
$LN3@GetScore:

; 96   : 	}
; 97   : }

  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5b		 pop	 ebx
  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c2 04 00	 ret	 4
?GetScore@CBattleGround@@QAEHH@Z ENDP			; CBattleGround::GetScore
_TEXT	ENDS
PUBLIC	?SetScore@CBattleGround@@QAEXHH@Z		; CBattleGround::SetScore
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_team$ = 8						; size = 4
_score$ = 12						; size = 4
?SetScore@CBattleGround@@QAEXHH@Z PROC			; CBattleGround::SetScore
; _this$ = ecx

; 101  : {

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	83 ec 44	 sub	 esp, 68			; 00000044H
  00236	53		 push	 ebx
  00237	56		 push	 esi
  00238	57		 push	 edi
  00239	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 	if ( team == 0 )

  0023c	83 7d 08 00	 cmp	 DWORD PTR _team$[ebp], 0
  00240	75 0b		 jne	 SHORT $LN2@SetScore

; 103  : 	{
; 104  : 		this->m_Score1 = score;

  00242	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00245	8b 4d 0c	 mov	 ecx, DWORD PTR _score$[ebp]
  00248	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 105  : 	}
; 106  : 	else

  0024b	eb 09		 jmp	 SHORT $LN3@SetScore
$LN2@SetScore:

; 107  : 	{
; 108  : 		this->m_Score2 = score;

  0024d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00250	8b 4d 0c	 mov	 ecx, DWORD PTR _score$[ebp]
  00253	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN3@SetScore:

; 109  : 	}
; 110  : }

  00256	5f		 pop	 edi
  00257	5e		 pop	 esi
  00258	5b		 pop	 ebx
  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c2 08 00	 ret	 8
?SetScore@CBattleGround@@QAEXHH@Z ENDP			; CBattleGround::SetScore
_TEXT	ENDS
PUBLIC	?SetTimer@CBattleGround@@QAEXH@Z		; CBattleGround::SetTimer
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_g_time$ = 8						; size = 4
?SetTimer@CBattleGround@@QAEXH@Z PROC			; CBattleGround::SetTimer
; _this$ = ecx

; 113  : {

  00260	55		 push	 ebp
  00261	8b ec		 mov	 ebp, esp
  00263	83 ec 44	 sub	 esp, 68			; 00000044H
  00266	53		 push	 ebx
  00267	56		 push	 esi
  00268	57		 push	 edi
  00269	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 	this->m_nTimer = g_time;

  0026c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026f	8b 4d 08	 mov	 ecx, DWORD PTR _g_time$[ebp]
  00272	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 115  : 	this->m_dwCurTimer = GetTickCount();

  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0027b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0027e	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 116  : }

  00281	5f		 pop	 edi
  00282	5e		 pop	 esi
  00283	5b		 pop	 ebx
  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c2 04 00	 ret	 4
?SetTimer@CBattleGround@@QAEXH@Z ENDP			; CBattleGround::SetTimer
_TEXT	ENDS
PUBLIC	?GetTimer@CBattleGround@@QAEHXZ			; CBattleGround::GetTimer
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTimer@CBattleGround@@QAEHXZ PROC			; CBattleGround::GetTimer
; _this$ = ecx

; 119  : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	83 ec 44	 sub	 esp, 68			; 00000044H
  00296	53		 push	 ebx
  00297	56		 push	 esi
  00298	57		 push	 edi
  00299	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 	return (GetTickCount() - this->m_dwCurTimer) / 1000;

  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  002a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a5	2b 41 5c	 sub	 eax, DWORD PTR [ecx+92]
  002a8	33 d2		 xor	 edx, edx
  002aa	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  002af	f7 f1		 div	 ecx

; 121  : }

  002b1	5f		 pop	 edi
  002b2	5e		 pop	 esi
  002b3	5b		 pop	 ebx
  002b4	8b e5		 mov	 esp, ebp
  002b6	5d		 pop	 ebp
  002b7	c3		 ret	 0
?GetTimer@CBattleGround@@QAEHXZ ENDP			; CBattleGround::GetTimer
_TEXT	ENDS
END
