; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\DevilSquare.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	070H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
	DD	010eH
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
	DD	0190H
	DD	0257H
	DD	0190H
	DD	0257H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	ORG $+4
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Run@CDevilSquare@@QAEHXZ			; CDevilSquare::Run
PUBLIC	?DevilSquareThreadFunc@@YGIPAX@Z		; DevilSquareThreadFunc
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\devilsquare.cpp
_TEXT	SEGMENT
_pDevilSquare$ = -4					; size = 4
_p$ = 8							; size = 4
?DevilSquareThreadFunc@@YGIPAX@Z PROC			; DevilSquareThreadFunc

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 30   : 	CDevilSquare * pDevilSquare = (CDevilSquare *)p;

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _pDevilSquare$[ebp], eax

; 31   : 	return pDevilSquare->Run();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _pDevilSquare$[ebp]
  00012	e8 00 00 00 00	 call	 ?Run@CDevilSquare@@QAEHXZ ; CDevilSquare::Run

; 32   : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?DevilSquareThreadFunc@@YGIPAX@Z ENDP			; DevilSquareThreadFunc
_TEXT	ENDS
PUBLIC	?DevilSquareProtocolCore@@YAXEPAEH@Z		; DevilSquareProtocolCore
EXTRN	?EGAnsIllusionTempleEnterCount@CIllusionTempleEvent@@QAEXPAUPMSG_ANS_ILLUSIONTEMPLE_ENTERCOUNT@@@Z:PROC ; CIllusionTempleEvent::EGAnsIllusionTempleEnterCount
EXTRN	?EGAnsIllusionTempleEnter@CIllusionTempleEvent@@QAEXPAUPMSG_ANS_ILLUSIONTEMPLE_ENTER_RESULT@@@Z:PROC ; CIllusionTempleEvent::EGAnsIllusionTempleEnter
EXTRN	?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A:BYTE ; g_IllusionTempleEvent
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv65 = -68						; size = 4
_protoNum$ = 8						; size = 1
_aRecv$ = 12						; size = 4
_aLen$ = 16						; size = 4
?DevilSquareProtocolCore@@YAXEPAEH@Z PROC		; DevilSquareProtocolCore

; 35   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi

; 36   : 	switch ( protoNum )

  00029	8a 45 08	 mov	 al, BYTE PTR _protoNum$[ebp]
  0002c	88 45 bc	 mov	 BYTE PTR tv65[ebp], al
  0002f	80 7d bc 12	 cmp	 BYTE PTR tv65[ebp], 18	; 00000012H
  00033	74 08		 je	 SHORT $LN2@DevilSquar
  00035	80 7d bc 14	 cmp	 BYTE PTR tv65[ebp], 20	; 00000014H
  00039	74 12		 je	 SHORT $LN1@DevilSquar
  0003b	eb 1e		 jmp	 SHORT $LN5@DevilSquar
$LN2@DevilSquar:

; 37   : 	{
; 38   : #if(DEBUG_EVENT_COUNTER == 1)
; 39   : 		case 11: //Receive the EnterCount for BloodCastle on T Key
; 40   : 			EGAnsBloodCastleEnterCount((PMSG_ANS_BLOODCASTLE_ENTERCOUNT *)aRecv);
; 41   : 			break;
; 42   : #endif
; 43   : 		case 18: //To enter Illusion Temple Increasing the EnterCount thru Ranking Server
; 44   : 			g_IllusionTempleEvent.EGAnsIllusionTempleEnter((PMSG_ANS_ILLUSIONTEMPLE_ENTER_RESULT *)aRecv);

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00040	50		 push	 eax
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  00046	e8 00 00 00 00	 call	 ?EGAnsIllusionTempleEnter@CIllusionTempleEvent@@QAEXPAUPMSG_ANS_ILLUSIONTEMPLE_ENTER_RESULT@@@Z ; CIllusionTempleEvent::EGAnsIllusionTempleEnter

; 45   : 			break;

  0004b	eb 0e		 jmp	 SHORT $LN5@DevilSquar
$LN1@DevilSquar:

; 46   : 		case 20: //Receive the EnterCount for IllusionTemple on T Key
; 47   : 			g_IllusionTempleEvent.EGAnsIllusionTempleEnterCount((PMSG_ANS_ILLUSIONTEMPLE_ENTERCOUNT *)aRecv);

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00050	50		 push	 eax
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  00056	e8 00 00 00 00	 call	 ?EGAnsIllusionTempleEnterCount@CIllusionTempleEvent@@QAEXPAUPMSG_ANS_ILLUSIONTEMPLE_ENTERCOUNT@@@Z ; CIllusionTempleEvent::EGAnsIllusionTempleEnterCount
$LN5@DevilSquar:

; 48   : 			break;
; 49   : 
; 50   : 	}
; 51   : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?DevilSquareProtocolCore@@YAXEPAEH@Z ENDP		; DevilSquareProtocolCore
_TEXT	ENDS
PUBLIC	??_C@_0BP@EMDINEAJ@Can?5not?5connect?5Ranking?5Server?$AA@ ; `string'
PUBLIC	?DataSendRank@@YAXPADH@Z			; DataSendRank
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?GMRankingServerConnect@@YAHPADK@Z:PROC		; GMRankingServerConnect
EXTRN	?gDevilSquareEventServerIp@@3PADA:BYTE		; gDevilSquareEventServerIp
EXTRN	?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z:PROC ; MyWinsockBase::CreateSocket
EXTRN	?ghWnd@@3PAUHWND__@@A:DWORD			; ghWnd
EXTRN	?Close@MyWinsockBase@@QAEHXZ:PROC		; MyWinsockBase::Close
EXTRN	?wsRServerCli@@3VwsJoinServerCli@@A:BYTE	; wsRServerCli
EXTRN	?DevilSquareEventConnect@@3HA:DWORD		; DevilSquareEventConnect
EXTRN	?IsDevilSquareEventConnected@@3HA:DWORD		; IsDevilSquareEventConnected
;	COMDAT ??_C@_0BP@EMDINEAJ@Can?5not?5connect?5Ranking?5Server?$AA@
CONST	SEGMENT
??_C@_0BP@EMDINEAJ@Can?5not?5connect?5Ranking?5Server?$AA@ DB 'Can not co'
	DB	'nnect Ranking Server', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pMsg$ = 8						; size = 4
_size$ = 12						; size = 4
?DataSendRank@@YAXPADH@Z PROC				; DataSendRank

; 54   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 40	 sub	 esp, 64			; 00000040H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi

; 55   : 	if ( IsDevilSquareEventConnected == FALSE && DevilSquareEventConnect == FALSE )

  00079	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, 0 ; IsDevilSquareEventConnected
  00080	75 5d		 jne	 SHORT $LN3@DataSendRa
  00082	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DevilSquareEventConnect@@3HA, 0 ; DevilSquareEventConnect
  00089	75 54		 jne	 SHORT $LN3@DataSendRa

; 56   : 	{
; 57   : 		wsRServerCli.Close();

  0008b	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsRServerCli@@3VwsJoinServerCli@@A+4
  00090	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close

; 58   : 		wsRServerCli.CreateSocket(ghWnd);

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  0009a	50		 push	 eax
  0009b	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsRServerCli@@3VwsJoinServerCli@@A+4
  000a0	e8 00 00 00 00	 call	 ?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ; MyWinsockBase::CreateSocket

; 59   : 
; 60   : 		if ( GMRankingServerConnect(gDevilSquareEventServerIp, WM_GM_RANKING_CLIENT_MSG_PROC) == FALSE )

  000a5	68 0c 04 00 00	 push	 1036			; 0000040cH
  000aa	68 00 00 00 00	 push	 OFFSET ?gDevilSquareEventServerIp@@3PADA ; gDevilSquareEventServerIp
  000af	e8 00 00 00 00	 call	 ?GMRankingServerConnect@@YAHPADK@Z ; GMRankingServerConnect
  000b4	83 c4 08	 add	 esp, 8
  000b7	85 c0		 test	 eax, eax
  000b9	75 1a		 jne	 SHORT $LN2@DataSendRa

; 61   : 		{
; 62   : 			IsDevilSquareEventConnected = FALSE;

  000bb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, 0 ; IsDevilSquareEventConnected

; 63   : 			LogAddTD("Can not connect Ranking Server");

  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EMDINEAJ@Can?5not?5connect?5Ranking?5Server?$AA@
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d0	83 c4 04	 add	 esp, 4

; 64   : 
; 65   : 			return;

  000d3	eb 2e		 jmp	 SHORT $LN4@DataSendRa
$LN2@DataSendRa:

; 66   : 		}
; 67   : 
; 68   : 		IsDevilSquareEventConnected = TRUE;

  000d5	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, 1 ; IsDevilSquareEventConnected
$LN3@DataSendRa:

; 69   : 	}
; 70   : 
; 71   : 	if ( DevilSquareEventConnect == FALSE && IsDevilSquareEventConnected != FALSE )

  000df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DevilSquareEventConnect@@3HA, 0 ; DevilSquareEventConnect
  000e6	75 1b		 jne	 SHORT $LN4@DataSendRa
  000e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, 0 ; IsDevilSquareEventConnected
  000ef	74 12		 je	 SHORT $LN4@DataSendRa

; 72   : 	{
; 73   : 		wsRServerCli.DataSend(pMsg, size);

  000f1	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  000f4	50		 push	 eax
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  000f8	51		 push	 ecx
  000f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsRServerCli@@3VwsJoinServerCli@@A ; wsRServerCli
  000fe	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
$LN4@DataSendRa:

; 74   : 	}
; 75   : }

  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
?DataSendRank@@YAXPADH@Z ENDP				; DataSendRank
_TEXT	ENDS
PUBLIC	??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
PUBLIC	__real@3f800000
PUBLIC	??0?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
PUBLIC	??_7CDevilSquare@@6B@				; CDevilSquare::`vftable'
PUBLIC	??0CDevilSquare@@QAE@XZ				; CDevilSquare::CDevilSquare
PUBLIC	??_R4CDevilSquare@@6B@				; CDevilSquare::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDevilSquare@@@8			; CDevilSquare `RTTI Type Descriptor'
PUBLIC	??_R3CDevilSquare@@8				; CDevilSquare::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDevilSquare@@8				; CDevilSquare::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDevilSquare@@8			; CDevilSquare::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0CDevilSquareGround@@QAE@XZ:PROC		; CDevilSquareGround::CDevilSquareGround
EXTRN	??1CDevilSquareGround@@UAE@XZ:PROC		; CDevilSquareGround::~CDevilSquareGround
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECDevilSquare@@UAEPAXI@Z:PROC		; CDevilSquare::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CDevilSquare@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDevilSquare@@8 DD FLAT:??_R0?AVCDevilSquare@@@8 ; CDevilSquare::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDevilSquare@@8
rdata$r	ENDS
;	COMDAT ??_R2CDevilSquare@@8
rdata$r	SEGMENT
??_R2CDevilSquare@@8 DD FLAT:??_R1A@?0A@EA@CDevilSquare@@8 ; CDevilSquare::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDevilSquare@@8
rdata$r	SEGMENT
??_R3CDevilSquare@@8 DD 00H				; CDevilSquare::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDevilSquare@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDevilSquare@@@8
_DATA	SEGMENT
??_R0?AVCDevilSquare@@@8 DD FLAT:??_7type_info@@6B@	; CDevilSquare `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDevilSquare@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDevilSquare@@6B@
rdata$r	SEGMENT
??_R4CDevilSquare@@6B@ DD 00H				; CDevilSquare::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDevilSquare@@@8
	DD	FLAT:??_R3CDevilSquare@@8
rdata$r	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_7CDevilSquare@@6B@
CONST	SEGMENT
??_7CDevilSquare@@6B@ DD FLAT:??_R4CDevilSquare@@6B@	; CDevilSquare::`vftable'
	DD	FLAT:??_ECDevilSquare@@UAEPAXI@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CDevilSquare@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDevilSquare@@QAE@XZ$0
__ehfuncinfo$??0CDevilSquare@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CDevilSquare@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_i$240072 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDevilSquare@@QAE@XZ PROC				; CDevilSquare::CDevilSquare
; _this$ = ecx

; 78   : {

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	6a ff		 push	 -1
  00115	68 00 00 00 00	 push	 __ehhandler$??0CDevilSquare@@QAE@XZ
  0011a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00120	50		 push	 eax
  00121	83 ec 48	 sub	 esp, 72			; 00000048H
  00124	53		 push	 ebx
  00125	56		 push	 esi
  00126	57		 push	 edi
  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0012c	33 c5		 xor	 eax, ebp
  0012e	50		 push	 eax
  0012f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00132	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00138	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0013b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0013e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDevilSquare@@6B@
  00144	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	83 c1 24	 add	 ecx, 36			; 00000024H
  0014a	e8 00 00 00 00	 call	 ??0?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
  0014f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00156	68 00 00 00 00	 push	 OFFSET ??1CDevilSquareGround@@UAE@XZ ; CDevilSquareGround::~CDevilSquareGround
  0015b	68 00 00 00 00	 push	 OFFSET ??0CDevilSquareGround@@QAE@XZ ; CDevilSquareGround::CDevilSquareGround
  00160	6a 07		 push	 7
  00162	68 a8 04 00 00	 push	 1192			; 000004a8H
  00167	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0016a	83 c0 3c	 add	 eax, 60			; 0000003cH
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z

; 79   : 	this->m_bQuit = FALSE;

  00173	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00176	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 80   : 	this->m_iCloseTime = 2; //30

  0017d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00180	c7 40 30 02 00
	00 00		 mov	 DWORD PTR [eax+48], 2

; 81   : 	this->m_iOpenTime = 2; //34

  00187	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0018a	c7 40 34 02 00
	00 00		 mov	 DWORD PTR [eax+52], 2

; 82   : 	this->m_iPlaytime = 10;

  00191	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00194	c7 40 38 0a 00
	00 00		 mov	 DWORD PTR [eax+56], 10	; 0000000aH

; 83   : 
; 84   : 	//Dark Wizard until 4th Floor
; 85   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_1] = 0;

  0019b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0019e	c7 80 d4 20 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8404], 0

; 86   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_2] = 0;

  001a8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001ab	c7 80 d8 20 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8408], 0

; 87   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_3] = 0;

  001b5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001b8	c7 80 dc 20 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8412], 0

; 88   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_4] = 170;

  001c2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001c5	c7 80 e0 20 00
	00 aa 00 00 00	 mov	 DWORD PTR [eax+8416], 170 ; 000000aaH

; 89   : 	
; 90   : 	//Dark Knight until 4th Floor
; 91   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_1] = 20;

  001cf	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001d2	c7 80 f0 20 00
	00 14 00 00 00	 mov	 DWORD PTR [eax+8432], 20 ; 00000014H

; 92   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_2] = 90;

  001dc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001df	c7 80 f4 20 00
	00 5a 00 00 00	 mov	 DWORD PTR [eax+8436], 90 ; 0000005aH

; 93   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_3] = 120;

  001e9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001ec	c7 80 f8 20 00
	00 78 00 00 00	 mov	 DWORD PTR [eax+8440], 120 ; 00000078H

; 94   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_4] = 400;

  001f6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	c7 80 fc 20 00
	00 90 01 00 00	 mov	 DWORD PTR [eax+8444], 400 ; 00000190H

; 95   : 
; 96   : 	//Elf until 4th Floor
; 97   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_1] = 10;

  00203	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00206	c7 80 0c 21 00
	00 0a 00 00 00	 mov	 DWORD PTR [eax+8460], 10 ; 0000000aH

; 98   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_2] = 10;

  00210	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00213	c7 80 10 21 00
	00 0a 00 00 00	 mov	 DWORD PTR [eax+8464], 10 ; 0000000aH

; 99   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_3] = 10;

  0021d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00220	c7 80 14 21 00
	00 0a 00 00 00	 mov	 DWORD PTR [eax+8468], 10 ; 0000000aH

; 100  : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_4] = 200;

  0022a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0022d	c7 80 18 21 00
	00 c8 00 00 00	 mov	 DWORD PTR [eax+8472], 200 ; 000000c8H

; 101  : 
; 102  : 	//Magumsa until 4th Floor
; 103  : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_1] = 0;

  00237	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0023a	c7 80 28 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8488], 0

; 104  : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_2] = 0;

  00244	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00247	c7 80 2c 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8492], 0

; 105  : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_3] = 0;

  00251	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00254	c7 80 30 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8496], 0

; 106  : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_4] = 0;

  0025e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00261	c7 80 34 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8500], 0

; 107  : 
; 108  : 	//Dark Wizard 5th & 6th Floor
; 109  : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_5] = 170;

  0026b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0026e	c7 80 e4 20 00
	00 aa 00 00 00	 mov	 DWORD PTR [eax+8420], 170 ; 000000aaH

; 110  : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_6] = 170;

  00278	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0027b	c7 80 e8 20 00
	00 aa 00 00 00	 mov	 DWORD PTR [eax+8424], 170 ; 000000aaH

; 111  : 
; 112  : 	//Dark Knight 5th & 6th Floor
; 113  : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_5] = 400;

  00285	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00288	c7 80 00 21 00
	00 90 01 00 00	 mov	 DWORD PTR [eax+8448], 400 ; 00000190H

; 114  : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_6] = 400;

  00292	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00295	c7 80 04 21 00
	00 90 01 00 00	 mov	 DWORD PTR [eax+8452], 400 ; 00000190H

; 115  : 
; 116  : 	//Elf 5th & 6th Floor
; 117  : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_5] = 200;

  0029f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002a2	c7 80 1c 21 00
	00 c8 00 00 00	 mov	 DWORD PTR [eax+8476], 200 ; 000000c8H

; 118  : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_6] = 200;

  002ac	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002af	c7 80 20 21 00
	00 c8 00 00 00	 mov	 DWORD PTR [eax+8480], 200 ; 000000c8H

; 119  : 
; 120  : 	//Magumsa 5th & 6th Floor
; 121  : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_5] = 0;

  002b9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002bc	c7 80 38 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8504], 0

; 122  : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_6] = 0;

  002c6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002c9	c7 80 3c 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8508], 0

; 123  : 
; 124  : 	//Dark Lord All Floors
; 125  : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_1] = 0;

  002d3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002d6	c7 80 44 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8516], 0

; 126  : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_2] = 0;

  002e0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002e3	c7 80 48 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8520], 0

; 127  : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_3] = 0;

  002ed	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002f0	c7 80 4c 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8524], 0

; 128  : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_4] = 0;

  002fa	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002fd	c7 80 50 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8528], 0

; 129  : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_5] = 0;

  00307	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0030a	c7 80 54 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8532], 0

; 130  : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_6] = 0;

  00314	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00317	c7 80 58 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8536], 0

; 131  : 
; 132  : 	//Season3 add-on (All Classes 7th Floor)
; 133  : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_7] = 170;

  00321	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00324	c7 80 ec 20 00
	00 aa 00 00 00	 mov	 DWORD PTR [eax+8428], 170 ; 000000aaH

; 134  : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_7] = 400;

  0032e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00331	c7 80 08 21 00
	00 90 01 00 00	 mov	 DWORD PTR [eax+8456], 400 ; 00000190H

; 135  : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_7] = 200;

  0033b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0033e	c7 80 24 21 00
	00 c8 00 00 00	 mov	 DWORD PTR [eax+8484], 200 ; 000000c8H

; 136  : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_7] = 0;

  00348	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0034b	c7 80 40 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8512], 0

; 137  : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_7] = 0;

  00355	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00358	c7 80 5c 21 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8540], 0

; 138  : 
; 139  : 	//Season4.5 add-on
; 140  : 	for( int i = 0; i < MAX_DEVILSQUARE_GROUND; i++)

  00362	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$240072[ebp], 0
  00369	eb 09		 jmp	 SHORT $LN3@CDevilSqua
$LN2@CDevilSqua:
  0036b	8b 45 ec	 mov	 eax, DWORD PTR _i$240072[ebp]
  0036e	83 c0 01	 add	 eax, 1
  00371	89 45 ec	 mov	 DWORD PTR _i$240072[ebp], eax
$LN3@CDevilSqua:
  00374	83 7d ec 07	 cmp	 DWORD PTR _i$240072[ebp], 7
  00378	7d 11		 jge	 SHORT $LN1@CDevilSqua

; 141  : 	{
; 142  : 		(float&)this->m_BonusScoreTable[CLASS_SUMMONER][i] = 1.0f;

  0037a	8b 45 ec	 mov	 eax, DWORD PTR _i$240072[ebp]
  0037d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00380	d9 e8		 fld1
  00382	d9 9c 81 60 21
	00 00		 fstp	 DWORD PTR [ecx+eax*4+8544]

; 143  : 	}

  00389	eb e0		 jmp	 SHORT $LN2@CDevilSqua
$LN1@CDevilSqua:

; 144  : }

  0038b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00392	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00395	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00398	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0039f	59		 pop	 ecx
  003a0	5f		 pop	 edi
  003a1	5e		 pop	 esi
  003a2	5b		 pop	 ebx
  003a3	8b e5		 mov	 esp, ebp
  003a5	5d		 pop	 ebp
  003a6	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CDevilSquare@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 24	 add	 ecx, 36			; 00000024H
  00006	e9 00 00 00 00	 jmp	 ??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
__ehhandler$??0CDevilSquare@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDevilSquare@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDevilSquare@@QAE@XZ ENDP				; CDevilSquare::CDevilSquare
PUBLIC	??1CDevilSquare@@UAE@XZ				; CDevilSquare::~CDevilSquare
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCDevilSquare@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDevilSquare@@UAEPAXI@Z PROC			; CDevilSquare::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CDevilSquare@@UAE@XZ	; CDevilSquare::~CDevilSquare
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCDevilSquare@@UAEPAXI@Z ENDP			; CDevilSquare::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
xdata$x	SEGMENT
__unwindtable$??1CDevilSquare@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDevilSquare@@UAE@XZ$0
__ehfuncinfo$??1CDevilSquare@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDevilSquare@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDevilSquare@@UAE@XZ PROC				; CDevilSquare::~CDevilSquare
; _this$ = ecx

; 147  : {

  003b0	55		 push	 ebp
  003b1	8b ec		 mov	 ebp, esp
  003b3	6a ff		 push	 -1
  003b5	68 00 00 00 00	 push	 __ehhandler$??1CDevilSquare@@UAE@XZ
  003ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  003c0	50		 push	 eax
  003c1	83 ec 44	 sub	 esp, 68			; 00000044H
  003c4	53		 push	 ebx
  003c5	56		 push	 esi
  003c6	57		 push	 edi
  003c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  003cc	33 c5		 xor	 eax, ebp
  003ce	50		 push	 eax
  003cf	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  003d2	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  003d8	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  003db	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  003de	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDevilSquare@@6B@
  003e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 148  : 	this->m_bQuit = TRUE;

  003eb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  003ee	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1

; 149  : }

  003f5	68 00 00 00 00	 push	 OFFSET ??1CDevilSquareGround@@UAE@XZ ; CDevilSquareGround::~CDevilSquareGround
  003fa	6a 07		 push	 7
  003fc	68 a8 04 00 00	 push	 1192			; 000004a8H
  00401	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00404	83 c0 3c	 add	 eax, 60			; 0000003cH
  00407	50		 push	 eax
  00408	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0040d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00414	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00417	83 c1 24	 add	 ecx, 36			; 00000024H
  0041a	e8 00 00 00 00	 call	 ??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
  0041f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00422	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00429	59		 pop	 ecx
  0042a	5f		 pop	 edi
  0042b	5e		 pop	 esi
  0042c	5b		 pop	 ebx
  0042d	8b e5		 mov	 esp, ebp
  0042f	5d		 pop	 ebp
  00430	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CDevilSquare@@UAE@XZ$0:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 c1 24	 add	 ecx, 36			; 00000024H
  0002c	e9 00 00 00 00	 jmp	 ??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
__ehhandler$??1CDevilSquare@@UAE@XZ:
  00031	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00035	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00038	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDevilSquare@@UAE@XZ
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDevilSquare@@UAE@XZ ENDP				; CDevilSquare::~CDevilSquare
PUBLIC	?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
PUBLIC	?Init@CDevilSquare@@QAEXXZ			; CDevilSquare::Init
EXTRN	__beginthreadex:PROC
EXTRN	__imp__Sleep@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_dwThreadId$ = -8					; size = 4
_this$ = -4						; size = 4
?Init@CDevilSquare@@QAEXXZ PROC				; CDevilSquare::Init
; _this$ = ecx

; 152  : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	83 ec 48	 sub	 esp, 72			; 00000048H
  00446	53		 push	 ebx
  00447	56		 push	 esi
  00448	57		 push	 edi
  00449	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 153  : 	this->m_bQuit = TRUE;

  0044c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0044f	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1

; 154  : 	Sleep(500);

  00456	68 f4 01 00 00	 push	 500			; 000001f4H
  0045b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 155  : 
; 156  : 	this->SetState(DevilSquare_CLOSE);

  00461	6a 00		 push	 0
  00463	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00466	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState

; 157  : 	this->m_bQuit = FALSE;

  0046b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0046e	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 158  : 
; 159  : 	DWORD dwThreadId;
; 160  : 
; 161  : 	this->m_hThread = (UINT)_beginthreadex( 0, 0, DevilSquareThreadFunc, this, 0, (LPUINT)&dwThreadId);

  00475	8d 45 f8	 lea	 eax, DWORD PTR _dwThreadId$[ebp]
  00478	50		 push	 eax
  00479	6a 00		 push	 0
  0047b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0047e	51		 push	 ecx
  0047f	68 00 00 00 00	 push	 OFFSET ?DevilSquareThreadFunc@@YGIPAX@Z ; DevilSquareThreadFunc
  00484	6a 00		 push	 0
  00486	6a 00		 push	 0
  00488	e8 00 00 00 00	 call	 __beginthreadex
  0048d	83 c4 18	 add	 esp, 24			; 00000018H
  00490	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00493	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 162  : }

  00496	5f		 pop	 edi
  00497	5e		 pop	 esi
  00498	5b		 pop	 ebx
  00499	8b e5		 mov	 esp, ebp
  0049b	5d		 pop	 ebp
  0049c	c3		 ret	 0
?Init@CDevilSquare@@QAEXXZ ENDP				; CDevilSquare::Init
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	?push_back@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXABUDEVILSQUARE_START_TIME@@@Z ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::push_back
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CDevilSquare@@QAEXPAD@Z			; CDevilSquare::Load
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	?IncExp@CDevilSquareGround@@QAEXM@Z:PROC	; CDevilSquareGround::IncExp
EXTRN	?SetBonus@CDevilSquareGround@@QAEXHHH@Z:PROC	; CDevilSquareGround::SetBonus
EXTRN	?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z:PROC	; CDevilSquareGround::SetBoss
EXTRN	?Set@CDevilSquareGround@@QAEXGHH@Z:PROC		; CDevilSquareGround::Set
EXTRN	_strcmp:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	?Init@CDevilSquareGround@@QAEXH@Z:PROC		; CDevilSquareGround::Init
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@
CONST	SEGMENT
??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@ DB '[Devil'
	DB	'Square] Info file Load Fail [%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv230 = -148						; size = 4
_iLevel$240168 = -80					; size = 4
_i$240163 = -76						; size = 4
_Schedule$240157 = -72					; size = 8
_exp$240149 = -64					; size = 4
_zen$240148 = -60					; size = 4
_rank$240147 = -56					; size = 4
_index$240146 = -52					; size = 4
_ty$ = -48						; size = 4
_tx$ = -44						; size = 4
_y$ = -40						; size = 4
_x$ = -36						; size = 4
_endtime$ = -32						; size = 4
_starttime$ = -28					; size = 4
_monstertype$ = -24					; size = 4
_type$ = -20						; size = 4
_number$ = -16						; size = 4
_Token$ = -12						; size = 4
_i$240095 = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Load@CDevilSquare@@QAEXPAD@Z PROC			; CDevilSquare::Load
; _this$ = ecx

; 165  : {

  004a0	55		 push	 ebp
  004a1	8b ec		 mov	 ebp, esp
  004a3	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  004a9	53		 push	 ebx
  004aa	56		 push	 esi
  004ab	57		 push	 edi
  004ac	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 	for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)

  004af	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$240095[ebp], 0
  004b6	eb 09		 jmp	 SHORT $LN31@Load
$LN30@Load:
  004b8	8b 45 f8	 mov	 eax, DWORD PTR _i$240095[ebp]
  004bb	83 c0 01	 add	 eax, 1
  004be	89 45 f8	 mov	 DWORD PTR _i$240095[ebp], eax
$LN31@Load:
  004c1	83 7d f8 07	 cmp	 DWORD PTR _i$240095[ebp], 7
  004c5	7d 1b		 jge	 SHORT $LN29@Load

; 167  : 	{
; 168  : 		this->m_DevilSquareGround[i].Init(i);

  004c7	8b 45 f8	 mov	 eax, DWORD PTR _i$240095[ebp]
  004ca	50		 push	 eax
  004cb	8b 4d f8	 mov	 ecx, DWORD PTR _i$240095[ebp]
  004ce	69 c9 a8 04 00
	00		 imul	 ecx, 1192		; 000004a8H
  004d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004d7	8d 4c 0a 3c	 lea	 ecx, DWORD PTR [edx+ecx+60]
  004db	e8 00 00 00 00	 call	 ?Init@CDevilSquareGround@@QAEXH@Z ; CDevilSquareGround::Init

; 169  : 	}

  004e0	eb d6		 jmp	 SHORT $LN30@Load
$LN29@Load:

; 170  : 
; 171  : 	int Token;
; 172  : 	int number;
; 173  : 	int type;
; 174  : 	int monstertype;
; 175  : 	int starttime;
; 176  : 	int endtime;
; 177  : 	int x;
; 178  : 	int y;
; 179  : 	int tx;
; 180  : 	int ty;
; 181  : 
; 182  : 	SMDFile = fopen(filename, "r");

  004e2	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  004e7	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 _fopen
  004f0	83 c4 08	 add	 esp, 8
  004f3	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 183  : 
; 184  : 	if ( SMDFile == NULL )

  004f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  004ff	75 16		 jne	 SHORT $LN28@Load

; 185  : 	{
; 186  : 		MsgBox("[DevilSquare] Info file Load Fail [%s]", filename);

  00501	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00504	50		 push	 eax
  00505	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@
  0050a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0050f	83 c4 08	 add	 esp, 8

; 187  : 		return;

  00512	e9 37 04 00 00	 jmp	 $LN32@Load
$LN28@Load:

; 188  : 	}
; 189  : 
; 190  : 	while ( true )

  00517	b8 01 00 00 00	 mov	 eax, 1
  0051c	85 c0		 test	 eax, eax
  0051e	0f 84 0a 04 00
	00		 je	 $LN26@Load

; 191  : 	{
; 192  : 		Token = GetToken();

  00524	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00529	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 193  : 
; 194  : 		if ( Token == 2 )

  0052c	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00530	75 05		 jne	 SHORT $LN25@Load

; 195  : 		{
; 196  : 			break;

  00532	e9 f7 03 00 00	 jmp	 $LN26@Load
$LN25@Load:

; 197  : 		}
; 198  : 
; 199  : 		type = (int)TokenNumber;

  00537	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0053d	e8 00 00 00 00	 call	 __ftol2_sse
  00542	89 45 ec	 mov	 DWORD PTR _type$[ebp], eax
$LN24@Load:

; 200  : 
; 201  : 		while ( true )

  00545	b8 01 00 00 00	 mov	 eax, 1
  0054a	85 c0		 test	 eax, eax
  0054c	0f 84 d7 03 00
	00		 je	 $LN23@Load

; 202  : 		{
; 203  : 			if ( type == 0 )	// Time Sync

  00552	83 7d ec 00	 cmp	 DWORD PTR _type$[ebp], 0
  00556	75 6b		 jne	 SHORT $LN22@Load

; 204  : 			{
; 205  : 				Token = GetToken();

  00558	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0055d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 206  : 
; 207  : 				if ( strcmp("end", TokenString) == 0 )

  00560	68 00 00 00 00	 push	 OFFSET _TokenString
  00565	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0056a	e8 00 00 00 00	 call	 _strcmp
  0056f	83 c4 08	 add	 esp, 8
  00572	85 c0		 test	 eax, eax
  00574	75 05		 jne	 SHORT $LN21@Load

; 208  : 				{
; 209  : 					break;

  00576	e9 ae 03 00 00	 jmp	 $LN23@Load
$LN21@Load:

; 210  : 				}
; 211  : 
; 212  : 				this->m_iCloseTime = (int)TokenNumber;

  0057b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00581	e8 00 00 00 00	 call	 __ftol2_sse
  00586	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00589	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 213  : 
; 214  : 				Token = GetToken();

  0058c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00591	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 215  : 				this->m_iOpenTime = (int)TokenNumber;

  00594	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0059a	e8 00 00 00 00	 call	 __ftol2_sse
  0059f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005a2	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 216  : 
; 217  : 				Token = GetToken();

  005a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005aa	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 218  : 				this->m_iPlaytime = (int)TokenNumber;

  005ad	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005b3	e8 00 00 00 00	 call	 __ftol2_sse
  005b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005bb	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  005be	e9 61 03 00 00	 jmp	 $LN1@Load
$LN22@Load:

; 219  : 			}
; 220  : 			else if ( type == 1 )	// Normal Monster Settings

  005c3	83 7d ec 01	 cmp	 DWORD PTR _type$[ebp], 1
  005c7	0f 85 9a 00 00
	00		 jne	 $LN19@Load

; 221  : 			{
; 222  : 				Token = GetToken();

  005cd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005d2	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 223  : 
; 224  : 				if ( strcmp("end", TokenString) == 0 )

  005d5	68 00 00 00 00	 push	 OFFSET _TokenString
  005da	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  005df	e8 00 00 00 00	 call	 _strcmp
  005e4	83 c4 08	 add	 esp, 8
  005e7	85 c0		 test	 eax, eax
  005e9	75 05		 jne	 SHORT $LN18@Load

; 225  : 				{
; 226  : 					break;

  005eb	e9 39 03 00 00	 jmp	 $LN23@Load
$LN18@Load:

; 227  : 				}
; 228  : 
; 229  : 				number = (int)TokenNumber;	// Devils Square Index;

  005f0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005f6	e8 00 00 00 00	 call	 __ftol2_sse
  005fb	89 45 f0	 mov	 DWORD PTR _number$[ebp], eax

; 230  : 
; 231  : 				Token = GetToken();

  005fe	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00603	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 232  : 				monstertype = (int)TokenNumber;

  00606	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0060c	e8 00 00 00 00	 call	 __ftol2_sse
  00611	89 45 e8	 mov	 DWORD PTR _monstertype$[ebp], eax

; 233  : 
; 234  : 				Token = GetToken();

  00614	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00619	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 235  : 				starttime = (int)TokenNumber;

  0061c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00622	e8 00 00 00 00	 call	 __ftol2_sse
  00627	89 45 e4	 mov	 DWORD PTR _starttime$[ebp], eax

; 236  : 
; 237  : 				Token = GetToken();

  0062a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0062f	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 238  : 				endtime = (int)TokenNumber;

  00632	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00638	e8 00 00 00 00	 call	 __ftol2_sse
  0063d	89 45 e0	 mov	 DWORD PTR _endtime$[ebp], eax

; 239  : 
; 240  : 				this->m_DevilSquareGround[number].Set(monstertype, starttime, endtime);

  00640	8b 45 e0	 mov	 eax, DWORD PTR _endtime$[ebp]
  00643	50		 push	 eax
  00644	8b 4d e4	 mov	 ecx, DWORD PTR _starttime$[ebp]
  00647	51		 push	 ecx
  00648	0f b7 55 e8	 movzx	 edx, WORD PTR _monstertype$[ebp]
  0064c	52		 push	 edx
  0064d	8b 45 f0	 mov	 eax, DWORD PTR _number$[ebp]
  00650	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  00656	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00659	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  0065d	e8 00 00 00 00	 call	 ?Set@CDevilSquareGround@@QAEXGHH@Z ; CDevilSquareGround::Set
  00662	e9 bd 02 00 00	 jmp	 $LN1@Load
$LN19@Load:

; 241  : 			}
; 242  : 			else if ( type == 2 )	// Boss Monster Set

  00667	83 7d ec 02	 cmp	 DWORD PTR _type$[ebp], 2
  0066b	0f 85 e8 00 00
	00		 jne	 $LN16@Load

; 243  : 			{
; 244  : 				Token = GetToken();

  00671	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00676	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 245  : 
; 246  : 				if ( strcmp("end", TokenString) == 0 )

  00679	68 00 00 00 00	 push	 OFFSET _TokenString
  0067e	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00683	e8 00 00 00 00	 call	 _strcmp
  00688	83 c4 08	 add	 esp, 8
  0068b	85 c0		 test	 eax, eax
  0068d	75 05		 jne	 SHORT $LN15@Load

; 247  : 				{
; 248  : 					break;

  0068f	e9 95 02 00 00	 jmp	 $LN23@Load
$LN15@Load:

; 249  : 				}
; 250  : 
; 251  : 				number = (int)TokenNumber;	// Devils Square Index;

  00694	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0069a	e8 00 00 00 00	 call	 __ftol2_sse
  0069f	89 45 f0	 mov	 DWORD PTR _number$[ebp], eax

; 252  : 
; 253  : 				Token = GetToken();

  006a2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006a7	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 254  : 				monstertype = (int)TokenNumber;

  006aa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006b0	e8 00 00 00 00	 call	 __ftol2_sse
  006b5	89 45 e8	 mov	 DWORD PTR _monstertype$[ebp], eax

; 255  : 
; 256  : 				Token = GetToken();

  006b8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006bd	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 257  : 				starttime = (int)TokenNumber;

  006c0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006c6	e8 00 00 00 00	 call	 __ftol2_sse
  006cb	89 45 e4	 mov	 DWORD PTR _starttime$[ebp], eax

; 258  : 
; 259  : 				Token = GetToken();

  006ce	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006d3	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 260  : 				x = (int)TokenNumber;

  006d6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006dc	e8 00 00 00 00	 call	 __ftol2_sse
  006e1	89 45 dc	 mov	 DWORD PTR _x$[ebp], eax

; 261  : 
; 262  : 				Token = GetToken();

  006e4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006e9	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 263  : 				y = (int)TokenNumber;

  006ec	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006f2	e8 00 00 00 00	 call	 __ftol2_sse
  006f7	89 45 d8	 mov	 DWORD PTR _y$[ebp], eax

; 264  : 
; 265  : 				Token = GetToken();

  006fa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006ff	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 266  : 				tx = (int)TokenNumber;

  00702	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00708	e8 00 00 00 00	 call	 __ftol2_sse
  0070d	89 45 d4	 mov	 DWORD PTR _tx$[ebp], eax

; 267  : 
; 268  : 				Token = GetToken();

  00710	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00715	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 269  : 				ty = (int)TokenNumber;

  00718	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0071e	e8 00 00 00 00	 call	 __ftol2_sse
  00723	89 45 d0	 mov	 DWORD PTR _ty$[ebp], eax

; 270  : 
; 271  : 				this->m_DevilSquareGround[number].SetBoss(monstertype, starttime, x, y, tx, ty);

  00726	8b 45 d0	 mov	 eax, DWORD PTR _ty$[ebp]
  00729	50		 push	 eax
  0072a	8b 4d d4	 mov	 ecx, DWORD PTR _tx$[ebp]
  0072d	51		 push	 ecx
  0072e	8b 55 d8	 mov	 edx, DWORD PTR _y$[ebp]
  00731	52		 push	 edx
  00732	8b 45 dc	 mov	 eax, DWORD PTR _x$[ebp]
  00735	50		 push	 eax
  00736	8b 4d e4	 mov	 ecx, DWORD PTR _starttime$[ebp]
  00739	51		 push	 ecx
  0073a	0f b7 55 e8	 movzx	 edx, WORD PTR _monstertype$[ebp]
  0073e	52		 push	 edx
  0073f	8b 45 f0	 mov	 eax, DWORD PTR _number$[ebp]
  00742	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  00748	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0074b	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  0074f	e8 00 00 00 00	 call	 ?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z ; CDevilSquareGround::SetBoss
  00754	e9 cb 01 00 00	 jmp	 $LN1@Load
$LN16@Load:

; 272  : 			}
; 273  : 			else if ( type == 3 ) // Bonus Sttings

  00759	83 7d ec 03	 cmp	 DWORD PTR _type$[ebp], 3
  0075d	0f 85 99 00 00
	00		 jne	 $LN13@Load

; 274  : 			{
; 275  : 				Token = GetToken();

  00763	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00768	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 276  : 
; 277  : 				if ( strcmp("end", TokenString) == 0 )

  0076b	68 00 00 00 00	 push	 OFFSET _TokenString
  00770	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00775	e8 00 00 00 00	 call	 _strcmp
  0077a	83 c4 08	 add	 esp, 8
  0077d	85 c0		 test	 eax, eax
  0077f	75 05		 jne	 SHORT $LN12@Load

; 278  : 				{
; 279  : 					break;

  00781	e9 a3 01 00 00	 jmp	 $LN23@Load
$LN12@Load:

; 280  : 				}
; 281  : 
; 282  : 				int index; //loc13
; 283  : 				int rank; //loc14
; 284  : 				int zen; //loc15
; 285  : 				int exp; //1oc16
; 286  : 
; 287  : 				index = (int)TokenNumber;

  00786	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0078c	e8 00 00 00 00	 call	 __ftol2_sse
  00791	89 45 cc	 mov	 DWORD PTR _index$240146[ebp], eax

; 288  : 
; 289  : 				Token = GetToken();

  00794	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00799	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 290  : 				rank = (int)TokenNumber;

  0079c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007a2	e8 00 00 00 00	 call	 __ftol2_sse
  007a7	89 45 c8	 mov	 DWORD PTR _rank$240147[ebp], eax

; 291  : 
; 292  : 				Token = GetToken();

  007aa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007af	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 293  : 				exp = (int)TokenNumber;

  007b2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007b8	e8 00 00 00 00	 call	 __ftol2_sse
  007bd	89 45 c0	 mov	 DWORD PTR _exp$240149[ebp], eax

; 294  : 
; 295  : 				Token = GetToken();

  007c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007c5	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 296  : 				zen = (int)TokenNumber;

  007c8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007ce	e8 00 00 00 00	 call	 __ftol2_sse
  007d3	89 45 c4	 mov	 DWORD PTR _zen$240148[ebp], eax

; 297  : 
; 298  : 				this->m_DevilSquareGround[index].SetBonus(rank, exp, zen);

  007d6	8b 45 c4	 mov	 eax, DWORD PTR _zen$240148[ebp]
  007d9	50		 push	 eax
  007da	8b 4d c0	 mov	 ecx, DWORD PTR _exp$240149[ebp]
  007dd	51		 push	 ecx
  007de	8b 55 c8	 mov	 edx, DWORD PTR _rank$240147[ebp]
  007e1	52		 push	 edx
  007e2	8b 45 cc	 mov	 eax, DWORD PTR _index$240146[ebp]
  007e5	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  007eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007ee	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  007f2	e8 00 00 00 00	 call	 ?SetBonus@CDevilSquareGround@@QAEXHHH@Z ; CDevilSquareGround::SetBonus
  007f7	e9 28 01 00 00	 jmp	 $LN1@Load
$LN13@Load:

; 299  : 			}
; 300  : 			//season 2.5 add-on
; 301  : 			else if ( type == 4 ) // Timer Settings (webzen stupid??) -> Identical

  007fc	83 7d ec 04	 cmp	 DWORD PTR _type$[ebp], 4
  00800	75 5b		 jne	 SHORT $LN10@Load

; 302  : 			{
; 303  : 				Token = GetToken();

  00802	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00807	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 304  : 
; 305  : 				if ( strcmp("end", TokenString) == 0 )

  0080a	68 00 00 00 00	 push	 OFFSET _TokenString
  0080f	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00814	e8 00 00 00 00	 call	 _strcmp
  00819	83 c4 08	 add	 esp, 8
  0081c	85 c0		 test	 eax, eax
  0081e	75 05		 jne	 SHORT $LN9@Load

; 306  : 				{
; 307  : 					break;

  00820	e9 04 01 00 00	 jmp	 $LN23@Load
$LN9@Load:

; 308  : 				}
; 309  : 
; 310  : 				DEVILSQUARE_START_TIME Schedule;
; 311  : 
; 312  : 				Schedule.m_iHour = (int)TokenNumber;

  00825	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0082b	e8 00 00 00 00	 call	 __ftol2_sse
  00830	89 45 b8	 mov	 DWORD PTR _Schedule$240157[ebp], eax

; 313  : 
; 314  : 				Token = GetToken();

  00833	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00838	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 315  : 				Schedule.m_iMinute = (int)TokenNumber;

  0083b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00841	e8 00 00 00 00	 call	 __ftol2_sse
  00846	89 45 bc	 mov	 DWORD PTR _Schedule$240157[ebp+4], eax

; 316  : 
; 317  : 				this->m_listDevilSquareOpenTime.push_back(Schedule);

  00849	8d 45 b8	 lea	 eax, DWORD PTR _Schedule$240157[ebp]
  0084c	50		 push	 eax
  0084d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00850	83 c1 24	 add	 ecx, 36			; 00000024H
  00853	e8 00 00 00 00	 call	 ?push_back@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXABUDEVILSQUARE_START_TIME@@@Z ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::push_back
  00858	e9 c7 00 00 00	 jmp	 $LN1@Load
$LN10@Load:

; 318  : 			}
; 319  : 			//season4.5 add-on
; 320  : 			else if ( type == 5 )

  0085d	83 7d ec 05	 cmp	 DWORD PTR _type$[ebp], 5
  00861	0f 85 bd 00 00
	00		 jne	 $LN1@Load

; 321  : 			{
; 322  : 				Token = GetToken();

  00867	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0086c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 323  : 
; 324  : 				if (strcmp("end", TokenString) == 0)

  0086f	68 00 00 00 00	 push	 OFFSET _TokenString
  00874	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00879	e8 00 00 00 00	 call	 _strcmp
  0087e	83 c4 08	 add	 esp, 8
  00881	85 c0		 test	 eax, eax
  00883	75 42		 jne	 SHORT $LN6@Load

; 325  : 				{
; 326  : 					for( int i = 0; i < MAX_DEVILSQUARE_GROUND; i++) //clear

  00885	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _i$240163[ebp], 0
  0088c	eb 09		 jmp	 SHORT $LN5@Load
$LN4@Load:
  0088e	8b 45 b4	 mov	 eax, DWORD PTR _i$240163[ebp]
  00891	83 c0 01	 add	 eax, 1
  00894	89 45 b4	 mov	 DWORD PTR _i$240163[ebp], eax
$LN5@Load:
  00897	83 7d b4 07	 cmp	 DWORD PTR _i$240163[ebp], 7
  0089b	7d 28		 jge	 SHORT $LN3@Load

; 327  : 					{
; 328  : 						this->m_DevilSquareGround[i].IncExp((float&)this->m_BonusScoreTable[CLASS_SUMMONER][i]);

  0089d	8b 45 b4	 mov	 eax, DWORD PTR _i$240163[ebp]
  008a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008a3	51		 push	 ecx
  008a4	d9 84 81 60 21
	00 00		 fld	 DWORD PTR [ecx+eax*4+8544]
  008ab	d9 1c 24	 fstp	 DWORD PTR [esp]
  008ae	8b 55 b4	 mov	 edx, DWORD PTR _i$240163[ebp]
  008b1	69 d2 a8 04 00
	00		 imul	 edx, 1192		; 000004a8H
  008b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008ba	8d 4c 10 3c	 lea	 ecx, DWORD PTR [eax+edx+60]
  008be	e8 00 00 00 00	 call	 ?IncExp@CDevilSquareGround@@QAEXM@Z ; CDevilSquareGround::IncExp

; 329  : 					}

  008c3	eb c9		 jmp	 SHORT $LN4@Load
$LN3@Load:

; 330  : 
; 331  : 					break;

  008c5	eb 62		 jmp	 SHORT $LN23@Load
$LN6@Load:

; 332  : 				}
; 333  : 
; 334  : 				int iLevel = (int)TokenNumber;

  008c7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008cd	e8 00 00 00 00	 call	 __ftol2_sse
  008d2	89 45 b0	 mov	 DWORD PTR _iLevel$240168[ebp], eax

; 335  : 
; 336  : 				if ( DS_LEVEL_RANGE(iLevel) != FALSE )

  008d5	83 7d b0 00	 cmp	 DWORD PTR _iLevel$240168[ebp], 0
  008d9	7d 0c		 jge	 SHORT $LN34@Load
  008db	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv230[ebp], 0
  008e5	eb 0f		 jmp	 SHORT $LN35@Load
$LN34@Load:
  008e7	33 c0		 xor	 eax, eax
  008e9	83 7d b0 06	 cmp	 DWORD PTR _iLevel$240168[ebp], 6
  008ed	0f 9e c0	 setle	 al
  008f0	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv230[ebp], eax
$LN35@Load:
  008f6	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR tv230[ebp], 0
  008fd	74 1d		 je	 SHORT $LN2@Load

; 337  : 				{
; 338  : 					Token = GetToken();

  008ff	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00904	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 339  : 					this->m_BonusScoreTable[CLASS_SUMMONER][iLevel] = (int&)TokenNumber;

  00907	8b 45 b0	 mov	 eax, DWORD PTR _iLevel$240168[ebp]
  0090a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0090d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _TokenNumber
  00913	89 94 81 60 21
	00 00		 mov	 DWORD PTR [ecx+eax*4+8544], edx

; 340  : 				}
; 341  : 				else

  0091a	eb 08		 jmp	 SHORT $LN1@Load
$LN2@Load:

; 342  : 				{
; 343  : 					Token = GetToken();

  0091c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00921	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax
$LN1@Load:

; 344  : 				}
; 345  : 			}
; 346  : 		}

  00924	e9 1c fc ff ff	 jmp	 $LN24@Load
$LN23@Load:

; 347  : 	}

  00929	e9 e9 fb ff ff	 jmp	 $LN28@Load
$LN26@Load:

; 348  : 
; 349  : 	fclose (SMDFile );

  0092e	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00933	50		 push	 eax
  00934	e8 00 00 00 00	 call	 _fclose
  00939	83 c4 04	 add	 esp, 4

; 350  : 
; 351  : 	LogAdd("%s file load!", filename);

  0093c	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0093f	50		 push	 eax
  00940	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00945	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0094b	83 c4 08	 add	 esp, 8
$LN32@Load:

; 352  : }

  0094e	5f		 pop	 edi
  0094f	5e		 pop	 esi
  00950	5b		 pop	 ebx
  00951	8b e5		 mov	 esp, ebp
  00953	5d		 pop	 ebp
  00954	c2 04 00	 ret	 4
?Load@CDevilSquare@@QAEXPAD@Z ENDP			; CDevilSquare::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00960	55		 push	 ebp
  00961	8b ec		 mov	 ebp, esp
  00963	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00969	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0096e	33 c5		 xor	 eax, ebp
  00970	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00973	53		 push	 ebx
  00974	56		 push	 esi
  00975	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00976	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0097d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00982	50		 push	 eax
  00983	e8 00 00 00 00	 call	 _fgetc
  00988	83 c4 04	 add	 esp, 4
  0098b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0098e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00992	83 f9 ff	 cmp	 ecx, -1
  00995	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00997	b8 02 00 00 00	 mov	 eax, 2
  0099c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  009a1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  009a3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009a7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  009aa	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  009ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009b1	50		 push	 eax
  009b2	e8 00 00 00 00	 call	 _fgetc
  009b7	83 c4 04	 add	 esp, 4
  009ba	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  009bd	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  009c1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  009c4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  009c6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009ca	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  009cd	74 1c		 je	 SHORT $LN23@GetToken
  009cf	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009d3	83 f8 ff	 cmp	 eax, -1
  009d6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  009d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009dd	50		 push	 eax
  009de	e8 00 00 00 00	 call	 _fgetc
  009e3	83 c4 04	 add	 esp, 4
  009e6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  009e9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  009eb	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009ef	83 f8 ff	 cmp	 eax, -1
  009f2	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  009f4	b8 02 00 00 00	 mov	 eax, 2
  009f9	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  009fe	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a02	50		 push	 eax
  00a03	e8 00 00 00 00	 call	 _isspace
  00a08	83 c4 04	 add	 esp, 4
  00a0b	85 c0		 test	 eax, eax
  00a0d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00a13	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a17	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00a1d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00a23	83 e9 22	 sub	 ecx, 34			; 00000022H
  00a26	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  00a2c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00a33	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00a39	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  00a3f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00a46	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  00a4d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00a57	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a5c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00a61	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00a66	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00a70	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a75	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  00a7a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  00a7f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00a89	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a8e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00a93	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00a98	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00aa2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00aa7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  00aac	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00ab1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  00abb	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ac0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00ac5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00aca	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00acf	50		 push	 eax
  00ad0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00ad4	51		 push	 ecx
  00ad5	e8 00 00 00 00	 call	 _ungetc
  00ada	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  00add	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00ae0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00ae3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00ae8	50		 push	 eax
  00ae9	e8 00 00 00 00	 call	 _getc
  00aee	83 c4 04	 add	 esp, 4
  00af1	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00af4	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00af8	83 f9 ff	 cmp	 ecx, -1
  00afb	74 36		 je	 SHORT $LN12@GetToken
  00afd	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b01	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00b04	74 1a		 je	 SHORT $LN11@GetToken
  00b06	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b0a	50		 push	 eax
  00b0b	e8 00 00 00 00	 call	 _isdigit
  00b10	83 c4 04	 add	 esp, 4
  00b13	85 c0		 test	 eax, eax
  00b15	75 09		 jne	 SHORT $LN11@GetToken
  00b17	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b1b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00b1e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00b20	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b23	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00b26	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00b28	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b2b	83 c0 01	 add	 eax, 1
  00b2e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00b31	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00b33	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b36	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00b39	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00b3c	50		 push	 eax
  00b3d	e8 00 00 00 00	 call	 _atof
  00b42	83 c4 04	 add	 esp, 4
  00b45	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  00b4b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00b55	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00b5a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  00b5f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00b64	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00b6b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b70	50		 push	 eax
  00b71	e8 00 00 00 00	 call	 _getc
  00b76	83 c4 04	 add	 esp, 4
  00b79	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00b7c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00b80	83 f9 ff	 cmp	 ecx, -1
  00b83	74 1c		 je	 SHORT $LN8@GetToken
  00b85	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b89	83 f8 22	 cmp	 eax, 34			; 00000022H
  00b8c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  00b8e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b91	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00b94	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00b96	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b99	83 c0 01	 add	 eax, 1
  00b9c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  00b9f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00ba1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ba5	83 f8 22	 cmp	 eax, 34			; 00000022H
  00ba8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00baa	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00baf	50		 push	 eax
  00bb0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00bb4	51		 push	 ecx
  00bb5	e8 00 00 00 00	 call	 _ungetc
  00bba	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  00bbd	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00bc0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00bc3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  00bcd	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00bd2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00bd7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  00bdc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00be0	50		 push	 eax
  00be1	e8 00 00 00 00	 call	 _isalpha
  00be6	83 c4 04	 add	 esp, 4
  00be9	85 c0		 test	 eax, eax
  00beb	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00bf1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00bf8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00bfb	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00bfe	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00c00	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c03	83 c0 01	 add	 eax, 1
  00c06	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00c09	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c0e	50		 push	 eax
  00c0f	e8 00 00 00 00	 call	 _getc
  00c14	83 c4 04	 add	 esp, 4
  00c17	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00c1a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c1e	83 f9 ff	 cmp	 ecx, -1
  00c21	74 36		 je	 SHORT $LN3@GetToken
  00c23	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c27	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00c2a	74 1a		 je	 SHORT $LN2@GetToken
  00c2c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c30	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00c33	74 11		 je	 SHORT $LN2@GetToken
  00c35	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c39	50		 push	 eax
  00c3a	e8 00 00 00 00	 call	 _isalnum
  00c3f	83 c4 04	 add	 esp, 4
  00c42	85 c0		 test	 eax, eax
  00c44	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00c46	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c49	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00c4c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  00c4e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c51	83 c0 01	 add	 eax, 1
  00c54	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00c57	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00c59	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c5e	50		 push	 eax
  00c5f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c63	51		 push	 ecx
  00c64	e8 00 00 00 00	 call	 _ungetc
  00c69	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  00c6c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c6f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00c72	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  00c7c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00c81	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00c83	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00c85	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  00c8f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00c94	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00c96	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00c98	5f		 pop	 edi
  00c99	5e		 pop	 esi
  00c9a	5b		 pop	 ebx
  00c9b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c9e	33 cd		 xor	 ecx, ebp
  00ca0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ca5	8b e5		 mov	 esp, ebp
  00ca7	5d		 pop	 ebp
  00ca8	c3		 ret	 0
  00ca9	8d 49 00	 npad	 3
$LN35@GetToken:
  00cac	00 00 00 00	 DD	 $LN10@GetToken
  00cb0	00 00 00 00	 DD	 $LN19@GetToken
  00cb4	00 00 00 00	 DD	 $LN17@GetToken
  00cb8	00 00 00 00	 DD	 $LN14@GetToken
  00cbc	00 00 00 00	 DD	 $LN18@GetToken
  00cc0	00 00 00 00	 DD	 $LN16@GetToken
  00cc4	00 00 00 00	 DD	 $LN15@GetToken
  00cc8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00ccc	00		 DB	 0
  00ccd	01		 DB	 1
  00cce	07		 DB	 7
  00ccf	07		 DB	 7
  00cd0	07		 DB	 7
  00cd1	07		 DB	 7
  00cd2	07		 DB	 7
  00cd3	07		 DB	 7
  00cd4	07		 DB	 7
  00cd5	07		 DB	 7
  00cd6	02		 DB	 2
  00cd7	03		 DB	 3
  00cd8	03		 DB	 3
  00cd9	07		 DB	 7
  00cda	03		 DB	 3
  00cdb	03		 DB	 3
  00cdc	03		 DB	 3
  00cdd	03		 DB	 3
  00cde	03		 DB	 3
  00cdf	03		 DB	 3
  00ce0	03		 DB	 3
  00ce1	03		 DB	 3
  00ce2	03		 DB	 3
  00ce3	03		 DB	 3
  00ce4	07		 DB	 7
  00ce5	04		 DB	 4
  00ce6	07		 DB	 7
  00ce7	07		 DB	 7
  00ce8	07		 DB	 7
  00ce9	07		 DB	 7
  00cea	07		 DB	 7
  00ceb	07		 DB	 7
  00cec	07		 DB	 7
  00ced	07		 DB	 7
  00cee	07		 DB	 7
  00cef	07		 DB	 7
  00cf0	07		 DB	 7
  00cf1	07		 DB	 7
  00cf2	07		 DB	 7
  00cf3	07		 DB	 7
  00cf4	07		 DB	 7
  00cf5	07		 DB	 7
  00cf6	07		 DB	 7
  00cf7	07		 DB	 7
  00cf8	07		 DB	 7
  00cf9	07		 DB	 7
  00cfa	07		 DB	 7
  00cfb	07		 DB	 7
  00cfc	07		 DB	 7
  00cfd	07		 DB	 7
  00cfe	07		 DB	 7
  00cff	07		 DB	 7
  00d00	07		 DB	 7
  00d01	07		 DB	 7
  00d02	07		 DB	 7
  00d03	07		 DB	 7
  00d04	07		 DB	 7
  00d05	07		 DB	 7
  00d06	07		 DB	 7
  00d07	07		 DB	 7
  00d08	07		 DB	 7
  00d09	07		 DB	 7
  00d0a	07		 DB	 7
  00d0b	07		 DB	 7
  00d0c	07		 DB	 7
  00d0d	07		 DB	 7
  00d0e	07		 DB	 7
  00d0f	07		 DB	 7
  00d10	07		 DB	 7
  00d11	07		 DB	 7
  00d12	07		 DB	 7
  00d13	07		 DB	 7
  00d14	07		 DB	 7
  00d15	07		 DB	 7
  00d16	07		 DB	 7
  00d17	07		 DB	 7
  00d18	07		 DB	 7
  00d19	07		 DB	 7
  00d1a	07		 DB	 7
  00d1b	07		 DB	 7
  00d1c	07		 DB	 7
  00d1d	07		 DB	 7
  00d1e	07		 DB	 7
  00d1f	07		 DB	 7
  00d20	07		 DB	 7
  00d21	07		 DB	 7
  00d22	07		 DB	 7
  00d23	07		 DB	 7
  00d24	07		 DB	 7
  00d25	05		 DB	 5
  00d26	07		 DB	 7
  00d27	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?SetPlaying@CDevilSquare@@AAEXXZ		; CDevilSquare::SetPlaying
PUBLIC	?SetOpen@CDevilSquare@@AAEXXZ			; CDevilSquare::SetOpen
PUBLIC	?SetClose@CDevilSquare@@QAEXXZ			; CDevilSquare::SetClose
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\devilsquare.cpp
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
_eState$ = 8						; size = 4
?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z PROC ; CDevilSquare::SetState
; _this$ = ecx

; 355  : {

  00d30	55		 push	 ebp
  00d31	8b ec		 mov	 ebp, esp
  00d33	83 ec 48	 sub	 esp, 72			; 00000048H
  00d36	53		 push	 ebx
  00d37	56		 push	 esi
  00d38	57		 push	 edi
  00d39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 356  : 	this->m_eState = eState;

  00d3c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d3f	8b 4d 08	 mov	 ecx, DWORD PTR _eState$[ebp]
  00d42	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 357  : 
; 358  : 	switch ( this->m_eState )

  00d45	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d48	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00d4b	89 4d b8	 mov	 DWORD PTR tv66[ebp], ecx
  00d4e	83 7d b8 00	 cmp	 DWORD PTR tv66[ebp], 0
  00d52	74 0e		 je	 SHORT $LN3@SetState
  00d54	83 7d b8 01	 cmp	 DWORD PTR tv66[ebp], 1
  00d58	74 12		 je	 SHORT $LN2@SetState
  00d5a	83 7d b8 02	 cmp	 DWORD PTR tv66[ebp], 2
  00d5e	74 16		 je	 SHORT $LN1@SetState
  00d60	eb 1c		 jmp	 SHORT $LN6@SetState
$LN3@SetState:

; 359  : 	{
; 360  : 		case DevilSquare_CLOSE:	this->SetClose();	break;

  00d62	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d65	e8 00 00 00 00	 call	 ?SetClose@CDevilSquare@@QAEXXZ ; CDevilSquare::SetClose
  00d6a	eb 12		 jmp	 SHORT $LN6@SetState
$LN2@SetState:

; 361  : 		case DevilSquare_OPEN:		this->SetOpen();	break;

  00d6c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d6f	e8 00 00 00 00	 call	 ?SetOpen@CDevilSquare@@AAEXXZ ; CDevilSquare::SetOpen
  00d74	eb 08		 jmp	 SHORT $LN6@SetState
$LN1@SetState:

; 362  : 		case DevilSquare_PLAYING:	this->SetPlaying();	break;

  00d76	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d79	e8 00 00 00 00	 call	 ?SetPlaying@CDevilSquare@@AAEXXZ ; CDevilSquare::SetPlaying
$LN6@SetState:

; 363  : 	}
; 364  : }

  00d7e	5f		 pop	 edi
  00d7f	5e		 pop	 esi
  00d80	5b		 pop	 ebx
  00d81	8b e5		 mov	 esp, ebp
  00d83	5d		 pop	 ebp
  00d84	c2 04 00	 ret	 4
?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ENDP ; CDevilSquare::SetState
_TEXT	ENDS
PUBLIC	?CheckSync@CDevilSquare@@AAEXXZ			; CDevilSquare::CheckSync
PUBLIC	?CalcScore@CDevilSquare@@QAEXXZ			; CDevilSquare::CalcScore
PUBLIC	?ClearMonstr@CDevilSquare@@QAEXXZ		; CDevilSquare::ClearMonstr
PUBLIC	??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@ ; `string'
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?Clear@CDevilSquareGround@@QAEXXZ:PROC		; CDevilSquareGround::Clear
;	COMDAT ??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@
CONST	SEGMENT
??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@ DB '[DevilSquare] Clos'
	DB	'e', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$240190 = -8						; size = 4
_this$ = -4						; size = 4
?SetClose@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::SetClose
; _this$ = ecx

; 367  : {

  00d90	55		 push	 ebp
  00d91	8b ec		 mov	 ebp, esp
  00d93	83 ec 48	 sub	 esp, 72			; 00000048H
  00d96	53		 push	 ebx
  00d97	56		 push	 esi
  00d98	57		 push	 edi
  00d99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 368  : 	if ( LogAdd != NULL )

  00d9c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?LogAdd@@3P6AXPADZZA, 0 ; LogAdd
  00da3	74 0e		 je	 SHORT $LN6@SetClose

; 369  : 	{
; 370  : 		LogAddTD("[DevilSquare] Close");

  00da5	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@
  00daa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00db0	83 c4 04	 add	 esp, 4
$LN6@SetClose:

; 371  : 	}
; 372  : 
; 373  : 	this->ClearMonstr();

  00db3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00db6	e8 00 00 00 00	 call	 ?ClearMonstr@CDevilSquare@@QAEXXZ ; CDevilSquare::ClearMonstr

; 374  : 	this->CalcScore();

  00dbb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dbe	e8 00 00 00 00	 call	 ?CalcScore@CDevilSquare@@QAEXXZ ; CDevilSquare::CalcScore

; 375  : 
; 376  : 	for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)

  00dc3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$240190[ebp], 0
  00dca	eb 09		 jmp	 SHORT $LN5@SetClose
$LN4@SetClose:
  00dcc	8b 45 f8	 mov	 eax, DWORD PTR _i$240190[ebp]
  00dcf	83 c0 01	 add	 eax, 1
  00dd2	89 45 f8	 mov	 DWORD PTR _i$240190[ebp], eax
$LN5@SetClose:
  00dd5	83 7d f8 07	 cmp	 DWORD PTR _i$240190[ebp], 7
  00dd9	7d 17		 jge	 SHORT $LN3@SetClose

; 377  : 	{
; 378  : 		this->m_DevilSquareGround[i].Clear();

  00ddb	8b 45 f8	 mov	 eax, DWORD PTR _i$240190[ebp]
  00dde	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  00de4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00de7	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  00deb	e8 00 00 00 00	 call	 ?Clear@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::Clear

; 379  : 	}

  00df0	eb da		 jmp	 SHORT $LN4@SetClose
$LN3@SetClose:

; 380  : 
; 381  : 	this->m_iRemainTime = this->m_iCloseTime;

  00df2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00df5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00df8	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00dfb	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 382  : 	this->CheckSync();

  00dfe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e01	e8 00 00 00 00	 call	 ?CheckSync@CDevilSquare@@AAEXXZ ; CDevilSquare::CheckSync

; 383  : 	this->m_bFlag = 0;

  00e06	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e09	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 384  : 
; 385  : 	if ( this->m_iRemainTime <= 1 )

  00e10	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e13	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  00e17	7f 18		 jg	 SHORT $LN2@SetClose

; 386  : 	{
; 387  : 		this->m_iTime = GetTickCount();

  00e19	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00e1f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e22	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 388  : 		this->m_iremainTimeSec = 60;

  00e25	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e28	c7 40 10 3c 00
	00 00		 mov	 DWORD PTR [eax+16], 60	; 0000003cH

; 389  : 	}
; 390  : 	else

  00e2f	eb 1b		 jmp	 SHORT $LN1@SetClose
$LN2@SetClose:

; 391  : 	{
; 392  : 		this->m_iTime = GetTickCount() + 60000;

  00e31	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00e37	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  00e3c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e3f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 393  : 		this->m_iremainTimeSec = -1;

  00e42	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e45	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1
$LN1@SetClose:

; 394  : 	}
; 395  : 	
; 396  : 	this->m_bSendTimeCount = FALSE;

  00e4c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e4f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 397  : }

  00e56	5f		 pop	 edi
  00e57	5e		 pop	 esi
  00e58	5b		 pop	 ebx
  00e59	8b e5		 mov	 esp, ebp
  00e5b	5d		 pop	 ebp
  00e5c	c3		 ret	 0
?SetClose@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::SetClose
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?SetOpen@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::SetOpen
; _this$ = ecx

; 400  : {

  00e60	55		 push	 ebp
  00e61	8b ec		 mov	 ebp, esp
  00e63	83 ec 44	 sub	 esp, 68			; 00000044H
  00e66	53		 push	 ebx
  00e67	56		 push	 esi
  00e68	57		 push	 edi
  00e69	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 401  : 	this->m_iRemainTime = this->m_iOpenTime;

  00e6c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e6f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e72	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00e75	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 402  : 
; 403  : 	if ( this->m_iOpenTime <= 1 )

  00e78	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e7b	83 78 34 01	 cmp	 DWORD PTR [eax+52], 1
  00e7f	7f 18		 jg	 SHORT $LN2@SetOpen

; 404  : 	{
; 405  : 		this->m_iTime = GetTickCount();

  00e81	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00e87	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e8a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 406  : 		this->m_iremainTimeSec = 60;

  00e8d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e90	c7 40 10 3c 00
	00 00		 mov	 DWORD PTR [eax+16], 60	; 0000003cH

; 407  : 	}
; 408  : 	else

  00e97	eb 1b		 jmp	 SHORT $LN1@SetOpen
$LN2@SetOpen:

; 409  : 	{
; 410  : 		this->m_iTime = GetTickCount() + 60000;

  00e99	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00e9f	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  00ea4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ea7	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 411  : 		this->m_iremainTimeSec = -1;

  00eaa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ead	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1
$LN1@SetOpen:

; 412  : 	}
; 413  : 
; 414  : 	this->m_bSendTimeCount = FALSE;

  00eb4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00eb7	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 415  : }

  00ebe	5f		 pop	 edi
  00ebf	5e		 pop	 esi
  00ec0	5b		 pop	 ebx
  00ec1	8b e5		 mov	 esp, ebp
  00ec3	5d		 pop	 ebp
  00ec4	c3		 ret	 0
?SetOpen@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::SetOpen
_TEXT	ENDS
PUBLIC	?SetMonster@CDevilSquare@@QAEXXZ		; CDevilSquare::SetMonster
PUBLIC	?gObjScoreClear@CDevilSquare@@AAEXXZ		; CDevilSquare::gObjScoreClear
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetPlaying@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::SetPlaying
; _this$ = ecx

; 418  : {

  00ed0	55		 push	 ebp
  00ed1	8b ec		 mov	 ebp, esp
  00ed3	83 ec 44	 sub	 esp, 68			; 00000044H
  00ed6	53		 push	 ebx
  00ed7	56		 push	 esi
  00ed8	57		 push	 edi
  00ed9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 419  : 	this->gObjScoreClear();

  00edc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00edf	e8 00 00 00 00	 call	 ?gObjScoreClear@CDevilSquare@@AAEXXZ ; CDevilSquare::gObjScoreClear

; 420  : 	this->SetMonster();

  00ee4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ee7	e8 00 00 00 00	 call	 ?SetMonster@CDevilSquare@@QAEXXZ ; CDevilSquare::SetMonster

; 421  : 
; 422  : 	this->m_iRemainTime = this->m_iPlaytime;

  00eec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00eef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ef2	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00ef5	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 423  : 
; 424  : 	if ( this->m_iPlaytime <= 1 )

  00ef8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00efb	83 78 38 01	 cmp	 DWORD PTR [eax+56], 1
  00eff	7f 18		 jg	 SHORT $LN2@SetPlaying

; 425  : 	{
; 426  : 		this->m_iTime = GetTickCount();

  00f01	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00f07	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f0a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 427  : 		this->m_iremainTimeSec = 60;

  00f0d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f10	c7 40 10 3c 00
	00 00		 mov	 DWORD PTR [eax+16], 60	; 0000003cH

; 428  : 	}
; 429  : 	else

  00f17	eb 1b		 jmp	 SHORT $LN1@SetPlaying
$LN2@SetPlaying:

; 430  : 	{
; 431  : 		this->m_iTime = GetTickCount() + 60000;

  00f19	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00f1f	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  00f24	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f27	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 432  : 		this->m_iremainTimeSec = -1;

  00f2a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f2d	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1
$LN1@SetPlaying:

; 433  : 	}
; 434  : 	
; 435  : 	this->m_bSendTimeCount = FALSE;

  00f34	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f37	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 436  : }

  00f3e	5f		 pop	 edi
  00f3f	5e		 pop	 esi
  00f40	5b		 pop	 ebx
  00f41	8b e5		 mov	 esp, ebp
  00f43	5d		 pop	 ebp
  00f44	c3		 ret	 0
?SetPlaying@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::SetPlaying
_TEXT	ENDS
PUBLIC	?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z	; CDevilSquare::GetDevilSquareIndex
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_iGateNumber$ = 8					; size = 4
?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z PROC		; CDevilSquare::GetDevilSquareIndex
; _this$ = ecx

; 439  : {

  00f50	55		 push	 ebp
  00f51	8b ec		 mov	 ebp, esp
  00f53	83 ec 48	 sub	 esp, 72			; 00000048H
  00f56	53		 push	 ebx
  00f57	56		 push	 esi
  00f58	57		 push	 edi
  00f59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 440  : 	switch ( iGateNumber )

  00f5c	8b 45 08	 mov	 eax, DWORD PTR _iGateNumber$[ebp]
  00f5f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00f62	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00f65	83 e9 3a	 sub	 ecx, 58			; 0000003aH
  00f68	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  00f6b	81 7d b8 d4 00
	00 00		 cmp	 DWORD PTR tv64[ebp], 212 ; 000000d4H
  00f72	77 2e		 ja	 SHORT $LN1@GetDevilSq
  00f74	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00f77	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN9@GetDevilSq[edx]
  00f7e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@GetDevilSq[eax*4]
$LN4@GetDevilSq:

; 441  : 	{
; 442  : 		case 58:
; 443  : 		case 59:
; 444  : 		case 60:
; 445  : 		case 61:
; 446  : 			return iGateNumber - 58;	// Devil 1 - 4

  00f85	8b 45 08	 mov	 eax, DWORD PTR _iGateNumber$[ebp]
  00f88	83 e8 3a	 sub	 eax, 58			; 0000003aH
  00f8b	eb 18		 jmp	 SHORT $LN7@GetDevilSq

; 447  : 			break;

  00f8d	eb 16		 jmp	 SHORT $LN7@GetDevilSq
$LN3@GetDevilSq:

; 448  : 
; 449  : 		case 111:
; 450  : 		case 112:
; 451  : 			return iGateNumber - 107;	// Devil 5 - 6

  00f8f	8b 45 08	 mov	 eax, DWORD PTR _iGateNumber$[ebp]
  00f92	83 e8 6b	 sub	 eax, 107		; 0000006bH
  00f95	eb 0e		 jmp	 SHORT $LN7@GetDevilSq

; 452  : 			break;

  00f97	eb 0c		 jmp	 SHORT $LN7@GetDevilSq
$LN2@GetDevilSq:

; 453  : 
; 454  : 		case 270:
; 455  : 			return ( MAX_DEVILSQUARE_GROUND - 1 ); // Devil 7

  00f99	b8 06 00 00 00	 mov	 eax, 6
  00f9e	eb 05		 jmp	 SHORT $LN7@GetDevilSq

; 456  : 			break;

  00fa0	eb 03		 jmp	 SHORT $LN7@GetDevilSq
$LN1@GetDevilSq:

; 457  : 
; 458  : 		default:
; 459  : 			return -1;

  00fa2	83 c8 ff	 or	 eax, -1
$LN7@GetDevilSq:

; 460  : 			break;
; 461  : 	}
; 462  : }

  00fa5	5f		 pop	 edi
  00fa6	5e		 pop	 esi
  00fa7	5b		 pop	 ebx
  00fa8	8b e5		 mov	 esp, ebp
  00faa	5d		 pop	 ebp
  00fab	c2 04 00	 ret	 4
  00fae	8b ff		 npad	 2
$LN10@GetDevilSq:
  00fb0	00 00 00 00	 DD	 $LN4@GetDevilSq
  00fb4	00 00 00 00	 DD	 $LN3@GetDevilSq
  00fb8	00 00 00 00	 DD	 $LN2@GetDevilSq
  00fbc	00 00 00 00	 DD	 $LN1@GetDevilSq
$LN9@GetDevilSq:
  00fc0	00		 DB	 0
  00fc1	00		 DB	 0
  00fc2	00		 DB	 0
  00fc3	00		 DB	 0
  00fc4	03		 DB	 3
  00fc5	03		 DB	 3
  00fc6	03		 DB	 3
  00fc7	03		 DB	 3
  00fc8	03		 DB	 3
  00fc9	03		 DB	 3
  00fca	03		 DB	 3
  00fcb	03		 DB	 3
  00fcc	03		 DB	 3
  00fcd	03		 DB	 3
  00fce	03		 DB	 3
  00fcf	03		 DB	 3
  00fd0	03		 DB	 3
  00fd1	03		 DB	 3
  00fd2	03		 DB	 3
  00fd3	03		 DB	 3
  00fd4	03		 DB	 3
  00fd5	03		 DB	 3
  00fd6	03		 DB	 3
  00fd7	03		 DB	 3
  00fd8	03		 DB	 3
  00fd9	03		 DB	 3
  00fda	03		 DB	 3
  00fdb	03		 DB	 3
  00fdc	03		 DB	 3
  00fdd	03		 DB	 3
  00fde	03		 DB	 3
  00fdf	03		 DB	 3
  00fe0	03		 DB	 3
  00fe1	03		 DB	 3
  00fe2	03		 DB	 3
  00fe3	03		 DB	 3
  00fe4	03		 DB	 3
  00fe5	03		 DB	 3
  00fe6	03		 DB	 3
  00fe7	03		 DB	 3
  00fe8	03		 DB	 3
  00fe9	03		 DB	 3
  00fea	03		 DB	 3
  00feb	03		 DB	 3
  00fec	03		 DB	 3
  00fed	03		 DB	 3
  00fee	03		 DB	 3
  00fef	03		 DB	 3
  00ff0	03		 DB	 3
  00ff1	03		 DB	 3
  00ff2	03		 DB	 3
  00ff3	03		 DB	 3
  00ff4	03		 DB	 3
  00ff5	01		 DB	 1
  00ff6	01		 DB	 1
  00ff7	03		 DB	 3
  00ff8	03		 DB	 3
  00ff9	03		 DB	 3
  00ffa	03		 DB	 3
  00ffb	03		 DB	 3
  00ffc	03		 DB	 3
  00ffd	03		 DB	 3
  00ffe	03		 DB	 3
  00fff	03		 DB	 3
  01000	03		 DB	 3
  01001	03		 DB	 3
  01002	03		 DB	 3
  01003	03		 DB	 3
  01004	03		 DB	 3
  01005	03		 DB	 3
  01006	03		 DB	 3
  01007	03		 DB	 3
  01008	03		 DB	 3
  01009	03		 DB	 3
  0100a	03		 DB	 3
  0100b	03		 DB	 3
  0100c	03		 DB	 3
  0100d	03		 DB	 3
  0100e	03		 DB	 3
  0100f	03		 DB	 3
  01010	03		 DB	 3
  01011	03		 DB	 3
  01012	03		 DB	 3
  01013	03		 DB	 3
  01014	03		 DB	 3
  01015	03		 DB	 3
  01016	03		 DB	 3
  01017	03		 DB	 3
  01018	03		 DB	 3
  01019	03		 DB	 3
  0101a	03		 DB	 3
  0101b	03		 DB	 3
  0101c	03		 DB	 3
  0101d	03		 DB	 3
  0101e	03		 DB	 3
  0101f	03		 DB	 3
  01020	03		 DB	 3
  01021	03		 DB	 3
  01022	03		 DB	 3
  01023	03		 DB	 3
  01024	03		 DB	 3
  01025	03		 DB	 3
  01026	03		 DB	 3
  01027	03		 DB	 3
  01028	03		 DB	 3
  01029	03		 DB	 3
  0102a	03		 DB	 3
  0102b	03		 DB	 3
  0102c	03		 DB	 3
  0102d	03		 DB	 3
  0102e	03		 DB	 3
  0102f	03		 DB	 3
  01030	03		 DB	 3
  01031	03		 DB	 3
  01032	03		 DB	 3
  01033	03		 DB	 3
  01034	03		 DB	 3
  01035	03		 DB	 3
  01036	03		 DB	 3
  01037	03		 DB	 3
  01038	03		 DB	 3
  01039	03		 DB	 3
  0103a	03		 DB	 3
  0103b	03		 DB	 3
  0103c	03		 DB	 3
  0103d	03		 DB	 3
  0103e	03		 DB	 3
  0103f	03		 DB	 3
  01040	03		 DB	 3
  01041	03		 DB	 3
  01042	03		 DB	 3
  01043	03		 DB	 3
  01044	03		 DB	 3
  01045	03		 DB	 3
  01046	03		 DB	 3
  01047	03		 DB	 3
  01048	03		 DB	 3
  01049	03		 DB	 3
  0104a	03		 DB	 3
  0104b	03		 DB	 3
  0104c	03		 DB	 3
  0104d	03		 DB	 3
  0104e	03		 DB	 3
  0104f	03		 DB	 3
  01050	03		 DB	 3
  01051	03		 DB	 3
  01052	03		 DB	 3
  01053	03		 DB	 3
  01054	03		 DB	 3
  01055	03		 DB	 3
  01056	03		 DB	 3
  01057	03		 DB	 3
  01058	03		 DB	 3
  01059	03		 DB	 3
  0105a	03		 DB	 3
  0105b	03		 DB	 3
  0105c	03		 DB	 3
  0105d	03		 DB	 3
  0105e	03		 DB	 3
  0105f	03		 DB	 3
  01060	03		 DB	 3
  01061	03		 DB	 3
  01062	03		 DB	 3
  01063	03		 DB	 3
  01064	03		 DB	 3
  01065	03		 DB	 3
  01066	03		 DB	 3
  01067	03		 DB	 3
  01068	03		 DB	 3
  01069	03		 DB	 3
  0106a	03		 DB	 3
  0106b	03		 DB	 3
  0106c	03		 DB	 3
  0106d	03		 DB	 3
  0106e	03		 DB	 3
  0106f	03		 DB	 3
  01070	03		 DB	 3
  01071	03		 DB	 3
  01072	03		 DB	 3
  01073	03		 DB	 3
  01074	03		 DB	 3
  01075	03		 DB	 3
  01076	03		 DB	 3
  01077	03		 DB	 3
  01078	03		 DB	 3
  01079	03		 DB	 3
  0107a	03		 DB	 3
  0107b	03		 DB	 3
  0107c	03		 DB	 3
  0107d	03		 DB	 3
  0107e	03		 DB	 3
  0107f	03		 DB	 3
  01080	03		 DB	 3
  01081	03		 DB	 3
  01082	03		 DB	 3
  01083	03		 DB	 3
  01084	03		 DB	 3
  01085	03		 DB	 3
  01086	03		 DB	 3
  01087	03		 DB	 3
  01088	03		 DB	 3
  01089	03		 DB	 3
  0108a	03		 DB	 3
  0108b	03		 DB	 3
  0108c	03		 DB	 3
  0108d	03		 DB	 3
  0108e	03		 DB	 3
  0108f	03		 DB	 3
  01090	03		 DB	 3
  01091	03		 DB	 3
  01092	03		 DB	 3
  01093	03		 DB	 3
  01094	02		 DB	 2
?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z ENDP		; CDevilSquare::GetDevilSquareIndex
_TEXT	ENDS
PUBLIC	?GetUserLevelToEnter@CDevilSquare@@QAEHHAAH@Z	; CDevilSquare::GetUserLevelToEnter
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$240228 = -12						; size = 4
_iENTER_LEVEL$ = -8					; size = 4
_this$ = -4						; size = 4
_iUserIndex$ = 8					; size = 4
_iMoveGate$ = 12					; size = 4
?GetUserLevelToEnter@CDevilSquare@@QAEHHAAH@Z PROC	; CDevilSquare::GetUserLevelToEnter
; _this$ = ecx

; 465  : {

  010a0	55		 push	 ebp
  010a1	8b ec		 mov	 ebp, esp
  010a3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  010a6	53		 push	 ebx
  010a7	56		 push	 esi
  010a8	57		 push	 edi
  010a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 466  : 	iMoveGate = (BYTE)-1;

  010ac	8b 45 0c	 mov	 eax, DWORD PTR _iMoveGate$[ebp]
  010af	c7 00 ff 00 00
	00		 mov	 DWORD PTR [eax], 255	; 000000ffH

; 467  : 
; 468  : 	if ( gObjIsConnected(iUserIndex) == FALSE )

  010b5	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  010b8	50		 push	 eax
  010b9	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  010be	83 c4 04	 add	 esp, 4
  010c1	85 c0		 test	 eax, eax
  010c3	75 08		 jne	 SHORT $LN11@GetUserLev

; 469  : 	{
; 470  : 		return -1;

  010c5	83 c8 ff	 or	 eax, -1
  010c8	e9 80 01 00 00	 jmp	 $LN12@GetUserLev
$LN11@GetUserLev:

; 471  : 	}
; 472  : 
; 473  : 	int iENTER_LEVEL = -1;

  010cd	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _iENTER_LEVEL$[ebp], -1

; 474  : 
; 475  : 	//if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(&gObj[iUserIndex]) != FALSE)
; 476  : 	if(gObj[iUserIndex].ChangeUP3rd == 1)

  010d4	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  010d7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  010dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  010e3	0f b6 94 01 bc
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+188]
  010eb	83 fa 01	 cmp	 edx, 1
  010ee	75 1d		 jne	 SHORT $LN10@GetUserLev

; 477  : 	{
; 478  : 		iENTER_LEVEL = MAX_DEVILSQUARE_GROUND - 1;

  010f0	c7 45 f8 06 00
	00 00		 mov	 DWORD PTR _iENTER_LEVEL$[ebp], 6

; 479  : 		iMoveGate = g_sttDEVILSQUARE_LEVEL[iENTER_LEVEL].MoveGate;

  010f7	8b 45 f8	 mov	 eax, DWORD PTR _iENTER_LEVEL$[ebp]
  010fa	6b c0 14	 imul	 eax, 20			; 00000014H
  010fd	8b 4d 0c	 mov	 ecx, DWORD PTR _iMoveGate$[ebp]
  01100	8b 90 10 00 00
	00		 mov	 edx, DWORD PTR _g_sttDEVILSQUARE_LEVEL[eax+16]
  01106	89 11		 mov	 DWORD PTR [ecx], edx

; 480  : 	}
; 481  : 	else

  01108	e9 3d 01 00 00	 jmp	 $LN9@GetUserLev
$LN10@GetUserLev:

; 482  : 	{
; 483  : 		for ( int i=0;i<MAX_DEVILSQUARE_GROUND-1;i++)

  0110d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$240228[ebp], 0
  01114	eb 09		 jmp	 SHORT $LN8@GetUserLev
$LN7@GetUserLev:
  01116	8b 45 f4	 mov	 eax, DWORD PTR _i$240228[ebp]
  01119	83 c0 01	 add	 eax, 1
  0111c	89 45 f4	 mov	 DWORD PTR _i$240228[ebp], eax
$LN8@GetUserLev:
  0111f	83 7d f4 06	 cmp	 DWORD PTR _i$240228[ebp], 6
  01123	0f 8d 21 01 00
	00		 jge	 $LN9@GetUserLev

; 484  : 		{
; 485  : 			if ( gObj[iUserIndex].Class == CLASS_DARKLORD
; 486  : #ifdef MONK
; 487  : 				|| gObj[iUserIndex].Class == CLASS_MONK
; 488  : #endif
; 489  : 				|| gObj[iUserIndex].Class == CLASS_MAGUMSA )

  01129	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  0112c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01132	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01138	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  01140	83 fa 04	 cmp	 edx, 4
  01143	74 38		 je	 SHORT $LN4@GetUserLev
  01145	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  01148	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0114e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01154	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  0115c	83 fa 06	 cmp	 edx, 6
  0115f	74 1c		 je	 SHORT $LN4@GetUserLev
  01161	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  01164	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0116a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01170	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  01178	83 fa 03	 cmp	 edx, 3
  0117b	75 65		 jne	 SHORT $LN5@GetUserLev
$LN4@GetUserLev:

; 490  : 			{
; 491  : 				if ( gObj[iUserIndex].Level >= g_sttDEVILSQUARE_LEVEL[i].SpecialCharacterMinLevel  && gObj[iUserIndex].Level <= g_sttDEVILSQUARE_LEVEL[i].SpecialCharacterMaxLevel )

  0117d	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  01180	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01186	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0118c	0f bf 94 01 be
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax+190]
  01194	8b 45 f4	 mov	 eax, DWORD PTR _i$240228[ebp]
  01197	6b c0 14	 imul	 eax, 20			; 00000014H
  0119a	3b 90 08 00 00
	00		 cmp	 edx, DWORD PTR _g_sttDEVILSQUARE_LEVEL[eax+8]
  011a0	7c 3e		 jl	 SHORT $LN3@GetUserLev
  011a2	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  011a5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  011ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  011b1	0f bf 94 01 be
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax+190]
  011b9	8b 45 f4	 mov	 eax, DWORD PTR _i$240228[ebp]
  011bc	6b c0 14	 imul	 eax, 20			; 00000014H
  011bf	3b 90 0c 00 00
	00		 cmp	 edx, DWORD PTR _g_sttDEVILSQUARE_LEVEL[eax+12]
  011c5	7f 19		 jg	 SHORT $LN3@GetUserLev

; 492  : 				{
; 493  : 					iENTER_LEVEL = i;

  011c7	8b 45 f4	 mov	 eax, DWORD PTR _i$240228[ebp]
  011ca	89 45 f8	 mov	 DWORD PTR _iENTER_LEVEL$[ebp], eax

; 494  : 					iMoveGate = g_sttDEVILSQUARE_LEVEL[i].MoveGate;

  011cd	8b 45 f4	 mov	 eax, DWORD PTR _i$240228[ebp]
  011d0	6b c0 14	 imul	 eax, 20			; 00000014H
  011d3	8b 4d 0c	 mov	 ecx, DWORD PTR _iMoveGate$[ebp]
  011d6	8b 90 10 00 00
	00		 mov	 edx, DWORD PTR _g_sttDEVILSQUARE_LEVEL[eax+16]
  011dc	89 11		 mov	 DWORD PTR [ecx], edx

; 495  : 					break;

  011de	eb 6a		 jmp	 SHORT $LN9@GetUserLev
$LN3@GetUserLev:

; 496  : 				}
; 497  : 			}
; 498  : 			else

  011e0	eb 63		 jmp	 SHORT $LN2@GetUserLev
$LN5@GetUserLev:

; 499  : 			{
; 500  : 				if ( gObj[iUserIndex].Level >= g_sttDEVILSQUARE_LEVEL[i].NormalCharacterMinLevel  && gObj[iUserIndex].Level <= g_sttDEVILSQUARE_LEVEL[i].NormalCharacterMaxLevel )

  011e2	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  011e5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  011eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  011f1	0f bf 94 01 be
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax+190]
  011f9	8b 45 f4	 mov	 eax, DWORD PTR _i$240228[ebp]
  011fc	6b c0 14	 imul	 eax, 20			; 00000014H
  011ff	3b 90 00 00 00
	00		 cmp	 edx, DWORD PTR _g_sttDEVILSQUARE_LEVEL[eax]
  01205	7c 3e		 jl	 SHORT $LN2@GetUserLev
  01207	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  0120a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01210	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01216	0f bf 94 01 be
	00 00 00	 movsx	 edx, WORD PTR [ecx+eax+190]
  0121e	8b 45 f4	 mov	 eax, DWORD PTR _i$240228[ebp]
  01221	6b c0 14	 imul	 eax, 20			; 00000014H
  01224	3b 90 04 00 00
	00		 cmp	 edx, DWORD PTR _g_sttDEVILSQUARE_LEVEL[eax+4]
  0122a	7f 19		 jg	 SHORT $LN2@GetUserLev

; 501  : 				{
; 502  : 					iENTER_LEVEL = i;

  0122c	8b 45 f4	 mov	 eax, DWORD PTR _i$240228[ebp]
  0122f	89 45 f8	 mov	 DWORD PTR _iENTER_LEVEL$[ebp], eax

; 503  : 					iMoveGate = g_sttDEVILSQUARE_LEVEL[i].MoveGate;

  01232	8b 45 f4	 mov	 eax, DWORD PTR _i$240228[ebp]
  01235	6b c0 14	 imul	 eax, 20			; 00000014H
  01238	8b 4d 0c	 mov	 ecx, DWORD PTR _iMoveGate$[ebp]
  0123b	8b 90 10 00 00
	00		 mov	 edx, DWORD PTR _g_sttDEVILSQUARE_LEVEL[eax+16]
  01241	89 11		 mov	 DWORD PTR [ecx], edx

; 504  : 					break;

  01243	eb 05		 jmp	 SHORT $LN9@GetUserLev
$LN2@GetUserLev:

; 505  : 				}
; 506  : 			}
; 507  : 		}

  01245	e9 cc fe ff ff	 jmp	 $LN7@GetUserLev
$LN9@GetUserLev:

; 508  : 	}
; 509  : 
; 510  : 	return iENTER_LEVEL;

  0124a	8b 45 f8	 mov	 eax, DWORD PTR _iENTER_LEVEL$[ebp]
$LN12@GetUserLev:

; 511  : }

  0124d	5f		 pop	 edi
  0124e	5e		 pop	 esi
  0124f	5b		 pop	 ebx
  01250	8b e5		 mov	 esp, ebp
  01252	5d		 pop	 ebp
  01253	c2 08 00	 ret	 8
?GetUserLevelToEnter@CDevilSquare@@QAEHHAAH@Z ENDP	; CDevilSquare::GetUserLevelToEnter
_TEXT	ENDS
PUBLIC	?SendLiveCall@CDevilSquare@@AAEXXZ		; CDevilSquare::SendLiveCall
PUBLIC	?ProcPlaying@CDevilSquare@@AAEXXZ		; CDevilSquare::ProcPlaying
PUBLIC	?ProcOpen@CDevilSquare@@AAEXXZ			; CDevilSquare::ProcOpen
PUBLIC	?ProcClose@CDevilSquare@@AAEXXZ			; CDevilSquare::ProcClose
EXTRN	?DestroyGIocp@@YAXXZ:PROC			; DestroyGIocp
EXTRN	?szAuthKey@@3PADA:BYTE				; szAuthKey
EXTRN	?gDevilSquareEvent@@3HA:DWORD			; gDevilSquareEvent
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv68 = -76						; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
?Run@CDevilSquare@@QAEHXZ PROC				; CDevilSquare::Run
; _this$ = ecx

; 514  : {

  01260	55		 push	 ebp
  01261	8b ec		 mov	 ebp, esp
  01263	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01266	53		 push	 ebx
  01267	56		 push	 esi
  01268	57		 push	 edi
  01269	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 515  : 	int count = 0;

  0126c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN10@Run:

; 516  : 
; 517  : 	while ( this->m_bQuit == FALSE )

  01273	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01276	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0127a	0f 85 81 00 00
	00		 jne	 $LN9@Run

; 518  : 	{
; 519  : 		if ( gDevilSquareEvent != FALSE )

  01280	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  01287	74 39		 je	 SHORT $LN8@Run

; 520  : 		{
; 521  : 			switch ( this->m_eState )

  01289	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0128c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0128f	89 4d b4	 mov	 DWORD PTR tv68[ebp], ecx
  01292	83 7d b4 00	 cmp	 DWORD PTR tv68[ebp], 0
  01296	74 0e		 je	 SHORT $LN5@Run
  01298	83 7d b4 01	 cmp	 DWORD PTR tv68[ebp], 1
  0129c	74 12		 je	 SHORT $LN4@Run
  0129e	83 7d b4 02	 cmp	 DWORD PTR tv68[ebp], 2
  012a2	74 16		 je	 SHORT $LN3@Run
  012a4	eb 1c		 jmp	 SHORT $LN8@Run
$LN5@Run:

; 522  : 			{
; 523  : 				case DevilSquare_CLOSE:	this->ProcClose();		break;

  012a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012a9	e8 00 00 00 00	 call	 ?ProcClose@CDevilSquare@@AAEXXZ ; CDevilSquare::ProcClose
  012ae	eb 12		 jmp	 SHORT $LN8@Run
$LN4@Run:

; 524  : 				case DevilSquare_OPEN:		this->ProcOpen();		break;

  012b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012b3	e8 00 00 00 00	 call	 ?ProcOpen@CDevilSquare@@AAEXXZ ; CDevilSquare::ProcOpen
  012b8	eb 08		 jmp	 SHORT $LN8@Run
$LN3@Run:

; 525  : 				case DevilSquare_PLAYING:	this->ProcPlaying();	break;

  012ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012bd	e8 00 00 00 00	 call	 ?ProcPlaying@CDevilSquare@@AAEXXZ ; CDevilSquare::ProcPlaying
$LN8@Run:

; 526  : 			}
; 527  : 		}
; 528  : 
; 529  : 		Sleep(100);

  012c2	6a 64		 push	 100			; 00000064H
  012c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 530  : 		count++;

  012ca	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  012cd	83 c0 01	 add	 eax, 1
  012d0	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax

; 531  : 
; 532  : 		if ( count > 600 )

  012d3	81 7d f8 58 02
	00 00		 cmp	 DWORD PTR _count$[ebp], 600 ; 00000258H
  012da	7e 20		 jle	 SHORT $LN2@Run

; 533  : 		{
; 534  : 			this->SendLiveCall();

  012dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012df	e8 00 00 00 00	 call	 ?SendLiveCall@CDevilSquare@@AAEXXZ ; CDevilSquare::SendLiveCall

; 535  : 			count = 0;

  012e4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 536  : 
; 537  : 			if ( szAuthKey[12] != AUTHKEY12 )

  012eb	0f be 05 0c 00
	00 00		 movsx	 eax, BYTE PTR ?szAuthKey@@3PADA+12
  012f2	83 f8 f1	 cmp	 eax, -15		; fffffff1H
  012f5	74 05		 je	 SHORT $LN2@Run

; 538  : 			{
; 539  : 				DestroyGIocp();

  012f7	e8 00 00 00 00	 call	 ?DestroyGIocp@@YAXXZ	; DestroyGIocp
$LN2@Run:

; 540  : 			}
; 541  : 		}
; 542  : 	}

  012fc	e9 72 ff ff ff	 jmp	 $LN10@Run
$LN9@Run:

; 543  : 
; 544  : 	return TRUE;

  01301	b8 01 00 00 00	 mov	 eax, 1

; 545  : }

  01306	5f		 pop	 edi
  01307	5e		 pop	 esi
  01308	5b		 pop	 ebx
  01309	8b e5		 mov	 esp, ebp
  0130b	5d		 pop	 ebp
  0130c	c3		 ret	 0
?Run@CDevilSquare@@QAEHXZ ENDP				; CDevilSquare::Run
_TEXT	ENDS
PUBLIC	??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@ ; `string'
PUBLIC	??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++
PUBLIC	??8?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator!=
PUBLIC	?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end
PUBLIC	??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++
PUBLIC	??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
PUBLIC	?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::begin
PUBLIC	?size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::size
PUBLIC	??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
;	COMDAT ??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@
CONST	SEGMENT
??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@ DB '['
	DB	'DevilSquare] Sync Open Time. [%d]min remain', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
$T241631 = -144						; size = 4
$T241632 = -140						; size = 4
$T241633 = -136						; size = 4
$T241634 = -132						; size = 4
$T241635 = -128						; size = 4
$T241636 = -124						; size = 4
$T241637 = -120						; size = 4
_loc12$ = -52						; size = 4
_ltime$ = -48						; size = 8
_today$ = -40						; size = 4
_CurrentTime$ = -36					; size = 4
_CheckTime$ = -32					; size = 4
_BaseTime$ = -28					; size = 4
_WebzenVar2$ = -24					; size = 8
_WebzenVar1$ = -16					; size = 8
_it$ = -8						; size = 4
_this$ = -4						; size = 4
?CheckSync@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::CheckSync
; _this$ = ecx

; 548  : {

  01310	55		 push	 ebp
  01311	8b ec		 mov	 ebp, esp
  01313	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  01319	53		 push	 ebx
  0131a	56		 push	 esi
  0131b	57		 push	 edi
  0131c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 549  : 	std::list<DEVILSQUARE_START_TIME>::iterator it; //loc2 -> ebp 4

  0131f	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  01322	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >

; 550  : 	DEVILSQUARE_START_TIME WebzenVar1; //loc 3-4 -> ebp C
; 551  : 	DEVILSQUARE_START_TIME WebzenVar2; //loc 5-6 -> epb 14
; 552  : 	int BaseTime = 0; // loc7 -> ebp 18

  01327	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _BaseTime$[ebp], 0

; 553  : 	int CheckTime = 0; // loc8 -> ebp 1C

  0132e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _CheckTime$[ebp], 0

; 554  : 	DWORD CurrentTime = 0;	// loc9 -> ebp 20

  01335	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _CurrentTime$[ebp], 0

; 555  : 
; 556  : 	if(this->m_listDevilSquareOpenTime.size() == 0)

  0133c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0133f	83 c1 24	 add	 ecx, 36			; 00000024H
  01342	e8 00 00 00 00	 call	 ?size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::size
  01347	85 c0		 test	 eax, eax
  01349	75 05		 jne	 SHORT $LN16@CheckSync

; 557  : 	{
; 558  : 		return;

  0134b	e9 2a 02 00 00	 jmp	 $LN17@CheckSync
$LN16@CheckSync:

; 559  : 	}
; 560  : 
; 561  : 	tm * today; //loc10 -> ebp 24
; 562  : 	time_t ltime; //loc11 -> ebp 28
; 563  : 
; 564  : 	time(&ltime); //

  01350	8d 45 d0	 lea	 eax, DWORD PTR _ltime$[ebp]
  01353	50		 push	 eax
  01354	e8 00 00 00 00	 call	 _time
  01359	83 c4 04	 add	 esp, 4

; 565  : 	today = localtime(&ltime); //

  0135c	8d 45 d0	 lea	 eax, DWORD PTR _ltime$[ebp]
  0135f	50		 push	 eax
  01360	e8 00 00 00 00	 call	 _localtime
  01365	83 c4 04	 add	 esp, 4
  01368	89 45 d8	 mov	 DWORD PTR _today$[ebp], eax

; 566  : 
; 567  : 	int loc12; //loc12 -> ebp 30
; 568  : 	CurrentTime = (today->tm_hour * 60) + today->tm_min;

  0136b	8b 45 d8	 mov	 eax, DWORD PTR _today$[ebp]
  0136e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01371	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  01374	8b 55 d8	 mov	 edx, DWORD PTR _today$[ebp]
  01377	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0137a	89 4d dc	 mov	 DWORD PTR _CurrentTime$[ebp], ecx

; 569  : 	WebzenVar1 = *m_listDevilSquareOpenTime.begin();

  0137d	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T241631[ebp]
  01383	50		 push	 eax
  01384	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01387	83 c1 24	 add	 ecx, 36			; 00000024H
  0138a	e8 00 00 00 00	 call	 ?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::begin
  0138f	8b c8		 mov	 ecx, eax
  01391	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  01396	8b 08		 mov	 ecx, DWORD PTR [eax]
  01398	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0139b	89 4d f0	 mov	 DWORD PTR _WebzenVar1$[ebp], ecx
  0139e	89 55 f4	 mov	 DWORD PTR _WebzenVar1$[ebp+4], edx

; 570  : 
; 571  : 	for( it = m_listDevilSquareOpenTime.begin(); it != m_listDevilSquareOpenTime.end(); ++it ) //for identical

  013a1	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR $T241632[ebp]
  013a7	50		 push	 eax
  013a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013ab	83 c1 24	 add	 ecx, 36			; 00000024H
  013ae	e8 00 00 00 00	 call	 ?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::begin
  013b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  013b5	89 4d f8	 mov	 DWORD PTR _it$[ebp], ecx
  013b8	eb 08		 jmp	 SHORT $LN15@CheckSync
$LN14@CheckSync:
  013ba	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  013bd	e8 00 00 00 00	 call	 ??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++
$LN15@CheckSync:
  013c2	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T241633[ebp]
  013c8	50		 push	 eax
  013c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013cc	83 c1 24	 add	 ecx, 36			; 00000024H
  013cf	e8 00 00 00 00	 call	 ?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end
  013d4	50		 push	 eax
  013d5	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  013d8	e8 00 00 00 00	 call	 ??9?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator!=
  013dd	0f b6 c8	 movzx	 ecx, al
  013e0	85 c9		 test	 ecx, ecx
  013e2	74 7e		 je	 SHORT $LN13@CheckSync

; 572  : 	{
; 573  : 		WebzenVar2 = *it; // loc5-6

  013e4	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  013e7	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  013ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  013ee	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  013f1	89 4d e8	 mov	 DWORD PTR _WebzenVar2$[ebp], ecx
  013f4	89 55 ec	 mov	 DWORD PTR _WebzenVar2$[ebp+4], edx

; 574  : 		BaseTime = (WebzenVar1.m_iHour * 60) + WebzenVar1.m_iMinute;

  013f7	8b 45 f0	 mov	 eax, DWORD PTR _WebzenVar1$[ebp]
  013fa	6b c0 3c	 imul	 eax, 60			; 0000003cH
  013fd	03 45 f4	 add	 eax, DWORD PTR _WebzenVar1$[ebp+4]
  01400	89 45 e4	 mov	 DWORD PTR _BaseTime$[ebp], eax

; 575  : 		CheckTime =	(WebzenVar2.m_iHour * 60) + WebzenVar2.m_iMinute;

  01403	8b 45 e8	 mov	 eax, DWORD PTR _WebzenVar2$[ebp]
  01406	6b c0 3c	 imul	 eax, 60			; 0000003cH
  01409	03 45 ec	 add	 eax, DWORD PTR _WebzenVar2$[ebp+4]
  0140c	89 45 e0	 mov	 DWORD PTR _CheckTime$[ebp], eax

; 576  : 
; 577  : 		if( BaseTime == CheckTime )

  0140f	8b 45 e4	 mov	 eax, DWORD PTR _BaseTime$[ebp]
  01412	3b 45 e0	 cmp	 eax, DWORD PTR _CheckTime$[ebp]
  01415	75 1f		 jne	 SHORT $LN12@CheckSync

; 578  : 		{
; 579  : 			if( CurrentTime < CheckTime )

  01417	8b 45 dc	 mov	 eax, DWORD PTR _CurrentTime$[ebp]
  0141a	3b 45 e0	 cmp	 eax, DWORD PTR _CheckTime$[ebp]
  0141d	73 15		 jae	 SHORT $LN11@CheckSync

; 580  : 			{
; 581  : 				WebzenVar2 = *it;

  0141f	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  01422	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  01427	8b 08		 mov	 ecx, DWORD PTR [eax]
  01429	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0142c	89 4d e8	 mov	 DWORD PTR _WebzenVar2$[ebp], ecx
  0142f	89 55 ec	 mov	 DWORD PTR _WebzenVar2$[ebp+4], edx

; 582  : 				break;

  01432	eb 2e		 jmp	 SHORT $LN13@CheckSync
$LN11@CheckSync:

; 583  : 			}
; 584  : 			continue;

  01434	eb 84		 jmp	 SHORT $LN14@CheckSync
$LN12@CheckSync:

; 585  : 		}
; 586  : 		
; 587  : 		if( CurrentTime >= BaseTime && CurrentTime < CheckTime )

  01436	8b 45 dc	 mov	 eax, DWORD PTR _CurrentTime$[ebp]
  01439	3b 45 e4	 cmp	 eax, DWORD PTR _BaseTime$[ebp]
  0143c	72 0c		 jb	 SHORT $LN10@CheckSync
  0143e	8b 45 dc	 mov	 eax, DWORD PTR _CurrentTime$[ebp]
  01441	3b 45 e0	 cmp	 eax, DWORD PTR _CheckTime$[ebp]
  01444	73 04		 jae	 SHORT $LN10@CheckSync

; 588  : 		{
; 589  : 			break;

  01446	eb 1a		 jmp	 SHORT $LN13@CheckSync

; 590  : 		}
; 591  : 		else

  01448	eb 13		 jmp	 SHORT $LN9@CheckSync
$LN10@CheckSync:

; 592  : 		{
; 593  : 			WebzenVar1 = *it;

  0144a	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  0144d	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  01452	8b 08		 mov	 ecx, DWORD PTR [eax]
  01454	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01457	89 4d f0	 mov	 DWORD PTR _WebzenVar1$[ebp], ecx
  0145a	89 55 f4	 mov	 DWORD PTR _WebzenVar1$[ebp+4], edx
$LN9@CheckSync:

; 594  : 		}
; 595  : 	}

  0145d	e9 58 ff ff ff	 jmp	 $LN14@CheckSync
$LN13@CheckSync:

; 596  : 
; 597  : 	for(loc12 = 2;loc12--;) //good ->func identical so far

  01462	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 2
$LN8@CheckSync:
  01469	8b 45 cc	 mov	 eax, DWORD PTR _loc12$[ebp]
  0146c	8b 4d cc	 mov	 ecx, DWORD PTR _loc12$[ebp]
  0146f	83 e9 01	 sub	 ecx, 1
  01472	89 4d cc	 mov	 DWORD PTR _loc12$[ebp], ecx
  01475	85 c0		 test	 eax, eax
  01477	0f 84 e8 00 00
	00		 je	 $LN7@CheckSync

; 598  : 	{
; 599  : 		if(it == m_listDevilSquareOpenTime.end())

  0147d	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T241634[ebp]
  01483	50		 push	 eax
  01484	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01487	83 c1 24	 add	 ecx, 36			; 00000024H
  0148a	e8 00 00 00 00	 call	 ?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end
  0148f	50		 push	 eax
  01490	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  01493	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator==
  01498	0f b6 c8	 movzx	 ecx, al
  0149b	85 c9		 test	 ecx, ecx
  0149d	74 27		 je	 SHORT $LN6@CheckSync

; 600  : 		{
; 601  : 			it = m_listDevilSquareOpenTime.begin();

  0149f	8d 45 80	 lea	 eax, DWORD PTR $T241635[ebp]
  014a2	50		 push	 eax
  014a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014a6	83 c1 24	 add	 ecx, 36			; 00000024H
  014a9	e8 00 00 00 00	 call	 ?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::begin
  014ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  014b0	89 4d f8	 mov	 DWORD PTR _it$[ebp], ecx

; 602  : 
; 603  : 			WebzenVar2 = (*it);

  014b3	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  014b6	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  014bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  014bd	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  014c0	89 4d e8	 mov	 DWORD PTR _WebzenVar2$[ebp], ecx
  014c3	89 55 ec	 mov	 DWORD PTR _WebzenVar2$[ebp+4], edx
$LN6@CheckSync:

; 604  : 		}
; 605  : 
; 606  : 		CheckTime = WebzenVar2.m_iHour*60+WebzenVar2.m_iMinute;

  014c6	8b 45 e8	 mov	 eax, DWORD PTR _WebzenVar2$[ebp]
  014c9	6b c0 3c	 imul	 eax, 60			; 0000003cH
  014cc	03 45 ec	 add	 eax, DWORD PTR _WebzenVar2$[ebp+4]
  014cf	89 45 e0	 mov	 DWORD PTR _CheckTime$[ebp], eax

; 607  : 
; 608  : 		if(today->tm_hour <= WebzenVar2.m_iHour)

  014d2	8b 45 d8	 mov	 eax, DWORD PTR _today$[ebp]
  014d5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  014d8	3b 4d e8	 cmp	 ecx, DWORD PTR _WebzenVar2$[ebp]
  014db	7f 0e		 jg	 SHORT $LN5@CheckSync

; 609  : 		{
; 610  : 			this->m_iRemainTime = CheckTime - CurrentTime;

  014dd	8b 45 e0	 mov	 eax, DWORD PTR _CheckTime$[ebp]
  014e0	2b 45 dc	 sub	 eax, DWORD PTR _CurrentTime$[ebp]
  014e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014e6	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 611  : 		}
; 612  : 		else

  014e9	eb 11		 jmp	 SHORT $LN4@CheckSync
$LN5@CheckSync:

; 613  : 		{
; 614  : 			this->m_iRemainTime = 1440-CurrentTime+CheckTime;

  014eb	b8 a0 05 00 00	 mov	 eax, 1440		; 000005a0H
  014f0	2b 45 dc	 sub	 eax, DWORD PTR _CurrentTime$[ebp]
  014f3	03 45 e0	 add	 eax, DWORD PTR _CheckTime$[ebp]
  014f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014f9	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN4@CheckSync:

; 615  : 		}
; 616  : 
; 617  : 		if(this->m_iRemainTime <= this->m_iOpenTime)

  014fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  014ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01502	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  01505	3b 51 34	 cmp	 edx, DWORD PTR [ecx+52]
  01508	7f 42		 jg	 SHORT $LN3@CheckSync

; 618  : 		{
; 619  : 			it++;

  0150a	6a 00		 push	 0
  0150c	8d 45 84	 lea	 eax, DWORD PTR $T241636[ebp]
  0150f	50		 push	 eax
  01510	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  01513	e8 00 00 00 00	 call	 ??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++

; 620  : 
; 621  : 			if(it != this->m_listDevilSquareOpenTime.end())

  01518	8d 45 88	 lea	 eax, DWORD PTR $T241637[ebp]
  0151b	50		 push	 eax
  0151c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0151f	83 c1 24	 add	 ecx, 36			; 00000024H
  01522	e8 00 00 00 00	 call	 ?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end
  01527	50		 push	 eax
  01528	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  0152b	e8 00 00 00 00	 call	 ??9?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator!=
  01530	0f b6 c8	 movzx	 ecx, al
  01533	85 c9		 test	 ecx, ecx
  01535	74 13		 je	 SHORT $LN2@CheckSync

; 622  : 			{
; 623  : 				WebzenVar2 = (*it);

  01537	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  0153a	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  0153f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01541	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01544	89 4d e8	 mov	 DWORD PTR _WebzenVar2$[ebp], ecx
  01547	89 55 ec	 mov	 DWORD PTR _WebzenVar2$[ebp+4], edx
$LN2@CheckSync:

; 624  : 			}
; 625  : 		}
; 626  : 		else

  0154a	eb 14		 jmp	 SHORT $LN1@CheckSync
$LN3@CheckSync:

; 627  : 		{
; 628  : 			this->m_iRemainTime -= this->m_iOpenTime;

  0154c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0154f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01552	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  01555	2b 51 34	 sub	 edx, DWORD PTR [ecx+52]
  01558	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0155b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 629  : 			break;

  0155e	eb 05		 jmp	 SHORT $LN7@CheckSync
$LN1@CheckSync:

; 630  : 		}
; 631  : 	}

  01560	e9 04 ff ff ff	 jmp	 $LN8@CheckSync
$LN7@CheckSync:

; 632  : 
; 633  : 	LogAdd("[DevilSquare] Sync Open Time. [%d]min remain", m_iRemainTime);

  01565	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01568	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0156b	51		 push	 ecx
  0156c	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@
  01571	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01577	83 c4 08	 add	 esp, 8
$LN17@CheckSync:

; 634  : }

  0157a	5f		 pop	 edi
  0157b	5e		 pop	 esi
  0157c	5b		 pop	 ebx
  0157d	8b e5		 mov	 esp, ebp
  0157f	5d		 pop	 ebp
  01580	c3		 ret	 0
?CheckSync@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::CheckSync
_TEXT	ENDS
EXTRN	__localtime64:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC

; 113  : {

  01590	55		 push	 ebp
  01591	8b ec		 mov	 ebp, esp
  01593	83 ec 40	 sub	 esp, 64			; 00000040H
  01596	53		 push	 ebx
  01597	56		 push	 esi
  01598	57		 push	 edi

; 114  : #pragma warning( push )
; 115  : #pragma warning( disable : 4996 )
; 116  :     return _localtime64(_Time);

  01599	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0159c	50		 push	 eax
  0159d	e8 00 00 00 00	 call	 __localtime64
  015a2	83 c4 04	 add	 esp, 4

; 117  : #pragma warning( pop )
; 118  : }

  015a5	5f		 pop	 edi
  015a6	5e		 pop	 esi
  015a7	5b		 pop	 ebx
  015a8	8b e5		 mov	 esp, ebp
  015aa	5d		 pop	 ebp
  015ab	c3		 ret	 0
_localtime ENDP
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 132  : {

  015b0	55		 push	 ebp
  015b1	8b ec		 mov	 ebp, esp
  015b3	83 ec 40	 sub	 esp, 64			; 00000040H
  015b6	53		 push	 ebx
  015b7	56		 push	 esi
  015b8	57		 push	 edi

; 133  :     return _time64(_Time);

  015b9	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  015bc	50		 push	 eax
  015bd	e8 00 00 00 00	 call	 __time64
  015c2	83 c4 04	 add	 esp, 4

; 134  : }

  015c5	5f		 pop	 edi
  015c6	5e		 pop	 esi
  015c7	5b		 pop	 ebx
  015c8	8b e5		 mov	 esp, ebp
  015ca	5d		 pop	 ebp
  015cb	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	?CheckCloseTime@CDevilSquare@@QAEHXZ		; CDevilSquare::CheckCloseTime
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\devilsquare.cpp
_TEXT	SEGMENT
$T241641 = -148						; size = 4
$T241642 = -144						; size = 4
$T241643 = -140						; size = 4
$T241644 = -136						; size = 4
$T241645 = -132						; size = 4
$T241646 = -128						; size = 4
$T241647 = -124						; size = 4
_loc13$ = -56						; size = 4
_loc12$ = -52						; size = 4
_ltime$ = -48						; size = 8
_today$ = -40						; size = 4
_CurrentTime$ = -36					; size = 4
_CheckTime$ = -32					; size = 4
_BaseTime$ = -28					; size = 4
_WebzenVar2$ = -24					; size = 8
_WebzenVar1$ = -16					; size = 8
_it$ = -8						; size = 4
_this$ = -4						; size = 4
?CheckCloseTime@CDevilSquare@@QAEHXZ PROC		; CDevilSquare::CheckCloseTime
; _this$ = ecx

; 637  : {

  015d0	55		 push	 ebp
  015d1	8b ec		 mov	 ebp, esp
  015d3	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  015d9	53		 push	 ebx
  015da	56		 push	 esi
  015db	57		 push	 edi
  015dc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 638  : 	std::list<DEVILSQUARE_START_TIME>::iterator it; //loc2 -> ebp 4

  015df	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  015e2	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >

; 639  : 	DEVILSQUARE_START_TIME WebzenVar1; //loc 3-4 -> ebp C
; 640  : 	DEVILSQUARE_START_TIME WebzenVar2; //loc 5-6 -> epb 14
; 641  : 	int BaseTime = 0; // loc7 -> ebp 18

  015e7	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _BaseTime$[ebp], 0

; 642  : 	int CheckTime = 0; // loc8 -> ebp 1C

  015ee	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _CheckTime$[ebp], 0

; 643  : 	DWORD CurrentTime = 0;	// loc9 -> ebp 20

  015f5	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _CurrentTime$[ebp], 0

; 644  : 	
; 645  : 	tm * today; //loc10 -> ebp 24
; 646  : 	time_t ltime; //loc11 -> ebp 28
; 647  : 
; 648  : 	int loc12 = 0; //loc12 -> ebp 30

  015fc	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _loc12$[ebp], 0

; 649  : 	int loc13;
; 650  : 
; 651  : 	if(this->m_listDevilSquareOpenTime.size() == 0)

  01603	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01606	83 c1 24	 add	 ecx, 36			; 00000024H
  01609	e8 00 00 00 00	 call	 ?size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::size
  0160e	85 c0		 test	 eax, eax
  01610	75 07		 jne	 SHORT $LN16@CheckClose

; 652  : 	{
; 653  : 		return 0;

  01612	33 c0		 xor	 eax, eax
  01614	e9 0c 02 00 00	 jmp	 $LN17@CheckClose
$LN16@CheckClose:

; 654  : 	}
; 655  : 
; 656  : 	time(&ltime); //

  01619	8d 45 d0	 lea	 eax, DWORD PTR _ltime$[ebp]
  0161c	50		 push	 eax
  0161d	e8 00 00 00 00	 call	 _time
  01622	83 c4 04	 add	 esp, 4

; 657  : 	today = localtime(&ltime); //

  01625	8d 45 d0	 lea	 eax, DWORD PTR _ltime$[ebp]
  01628	50		 push	 eax
  01629	e8 00 00 00 00	 call	 _localtime
  0162e	83 c4 04	 add	 esp, 4
  01631	89 45 d8	 mov	 DWORD PTR _today$[ebp], eax

; 658  : 
; 659  : 	
; 660  : 	CurrentTime = (today->tm_hour * 60) + today->tm_min;

  01634	8b 45 d8	 mov	 eax, DWORD PTR _today$[ebp]
  01637	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0163a	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  0163d	8b 55 d8	 mov	 edx, DWORD PTR _today$[ebp]
  01640	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  01643	89 4d dc	 mov	 DWORD PTR _CurrentTime$[ebp], ecx

; 661  : 	WebzenVar1 = *m_listDevilSquareOpenTime.begin();

  01646	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T241641[ebp]
  0164c	50		 push	 eax
  0164d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01650	83 c1 24	 add	 ecx, 36			; 00000024H
  01653	e8 00 00 00 00	 call	 ?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::begin
  01658	8b c8		 mov	 ecx, eax
  0165a	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  0165f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01661	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01664	89 4d f0	 mov	 DWORD PTR _WebzenVar1$[ebp], ecx
  01667	89 55 f4	 mov	 DWORD PTR _WebzenVar1$[ebp+4], edx

; 662  : 
; 663  : 	for( it = m_listDevilSquareOpenTime.begin(); it != m_listDevilSquareOpenTime.end(); ++it ) //for identical

  0166a	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T241642[ebp]
  01670	50		 push	 eax
  01671	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01674	83 c1 24	 add	 ecx, 36			; 00000024H
  01677	e8 00 00 00 00	 call	 ?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::begin
  0167c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0167e	89 4d f8	 mov	 DWORD PTR _it$[ebp], ecx
  01681	eb 08		 jmp	 SHORT $LN15@CheckClose
$LN14@CheckClose:
  01683	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  01686	e8 00 00 00 00	 call	 ??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++
$LN15@CheckClose:
  0168b	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR $T241643[ebp]
  01691	50		 push	 eax
  01692	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01695	83 c1 24	 add	 ecx, 36			; 00000024H
  01698	e8 00 00 00 00	 call	 ?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end
  0169d	50		 push	 eax
  0169e	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  016a1	e8 00 00 00 00	 call	 ??9?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator!=
  016a6	0f b6 c8	 movzx	 ecx, al
  016a9	85 c9		 test	 ecx, ecx
  016ab	74 7e		 je	 SHORT $LN13@CheckClose

; 664  : 	{
; 665  : 		WebzenVar2 = *it; // loc5-6

  016ad	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  016b0	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  016b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  016b7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  016ba	89 4d e8	 mov	 DWORD PTR _WebzenVar2$[ebp], ecx
  016bd	89 55 ec	 mov	 DWORD PTR _WebzenVar2$[ebp+4], edx

; 666  : 		BaseTime = (WebzenVar1.m_iHour * 60) + WebzenVar1.m_iMinute;

  016c0	8b 45 f0	 mov	 eax, DWORD PTR _WebzenVar1$[ebp]
  016c3	6b c0 3c	 imul	 eax, 60			; 0000003cH
  016c6	03 45 f4	 add	 eax, DWORD PTR _WebzenVar1$[ebp+4]
  016c9	89 45 e4	 mov	 DWORD PTR _BaseTime$[ebp], eax

; 667  : 		CheckTime =	(WebzenVar2.m_iHour * 60) + WebzenVar2.m_iMinute;

  016cc	8b 45 e8	 mov	 eax, DWORD PTR _WebzenVar2$[ebp]
  016cf	6b c0 3c	 imul	 eax, 60			; 0000003cH
  016d2	03 45 ec	 add	 eax, DWORD PTR _WebzenVar2$[ebp+4]
  016d5	89 45 e0	 mov	 DWORD PTR _CheckTime$[ebp], eax

; 668  : 
; 669  : 		if( BaseTime == CheckTime )

  016d8	8b 45 e4	 mov	 eax, DWORD PTR _BaseTime$[ebp]
  016db	3b 45 e0	 cmp	 eax, DWORD PTR _CheckTime$[ebp]
  016de	75 1f		 jne	 SHORT $LN12@CheckClose

; 670  : 		{
; 671  : 			if( CurrentTime < CheckTime )

  016e0	8b 45 dc	 mov	 eax, DWORD PTR _CurrentTime$[ebp]
  016e3	3b 45 e0	 cmp	 eax, DWORD PTR _CheckTime$[ebp]
  016e6	73 15		 jae	 SHORT $LN11@CheckClose

; 672  : 			{
; 673  : 				WebzenVar2 = *it;

  016e8	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  016eb	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  016f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  016f2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  016f5	89 4d e8	 mov	 DWORD PTR _WebzenVar2$[ebp], ecx
  016f8	89 55 ec	 mov	 DWORD PTR _WebzenVar2$[ebp+4], edx

; 674  : 				break;

  016fb	eb 2e		 jmp	 SHORT $LN13@CheckClose
$LN11@CheckClose:

; 675  : 			}
; 676  : 			continue;

  016fd	eb 84		 jmp	 SHORT $LN14@CheckClose
$LN12@CheckClose:

; 677  : 		}
; 678  : 		
; 679  : 		if( CurrentTime >= BaseTime && CurrentTime < CheckTime )

  016ff	8b 45 dc	 mov	 eax, DWORD PTR _CurrentTime$[ebp]
  01702	3b 45 e4	 cmp	 eax, DWORD PTR _BaseTime$[ebp]
  01705	72 0c		 jb	 SHORT $LN10@CheckClose
  01707	8b 45 dc	 mov	 eax, DWORD PTR _CurrentTime$[ebp]
  0170a	3b 45 e0	 cmp	 eax, DWORD PTR _CheckTime$[ebp]
  0170d	73 04		 jae	 SHORT $LN10@CheckClose

; 680  : 		{
; 681  : 			break;

  0170f	eb 1a		 jmp	 SHORT $LN13@CheckClose

; 682  : 		}
; 683  : 		else

  01711	eb 13		 jmp	 SHORT $LN9@CheckClose
$LN10@CheckClose:

; 684  : 		{
; 685  : 			WebzenVar1 = *it;

  01713	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  01716	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  0171b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0171d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01720	89 4d f0	 mov	 DWORD PTR _WebzenVar1$[ebp], ecx
  01723	89 55 f4	 mov	 DWORD PTR _WebzenVar1$[ebp+4], edx
$LN9@CheckClose:

; 686  : 		}
; 687  : 	}

  01726	e9 58 ff ff ff	 jmp	 $LN14@CheckClose
$LN13@CheckClose:

; 688  : 
; 689  : 	for(loc13 = 2;loc13--;) //good ->func identical so far

  0172b	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR _loc13$[ebp], 2
$LN8@CheckClose:
  01732	8b 45 c8	 mov	 eax, DWORD PTR _loc13$[ebp]
  01735	8b 4d c8	 mov	 ecx, DWORD PTR _loc13$[ebp]
  01738	83 e9 01	 sub	 ecx, 1
  0173b	89 4d c8	 mov	 DWORD PTR _loc13$[ebp], ecx
  0173e	85 c0		 test	 eax, eax
  01740	0f 84 dc 00 00
	00		 je	 $LN7@CheckClose

; 690  : 	{
; 691  : 		if(it == m_listDevilSquareOpenTime.end())

  01746	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T241644[ebp]
  0174c	50		 push	 eax
  0174d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01750	83 c1 24	 add	 ecx, 36			; 00000024H
  01753	e8 00 00 00 00	 call	 ?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end
  01758	50		 push	 eax
  01759	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  0175c	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator==
  01761	0f b6 c8	 movzx	 ecx, al
  01764	85 c9		 test	 ecx, ecx
  01766	74 2a		 je	 SHORT $LN6@CheckClose

; 692  : 		{
; 693  : 			it = m_listDevilSquareOpenTime.begin();

  01768	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T241645[ebp]
  0176e	50		 push	 eax
  0176f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01772	83 c1 24	 add	 ecx, 36			; 00000024H
  01775	e8 00 00 00 00	 call	 ?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::begin
  0177a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0177c	89 4d f8	 mov	 DWORD PTR _it$[ebp], ecx

; 694  : 
; 695  : 			WebzenVar2 = (*it);

  0177f	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  01782	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  01787	8b 08		 mov	 ecx, DWORD PTR [eax]
  01789	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0178c	89 4d e8	 mov	 DWORD PTR _WebzenVar2$[ebp], ecx
  0178f	89 55 ec	 mov	 DWORD PTR _WebzenVar2$[ebp+4], edx
$LN6@CheckClose:

; 696  : 		}
; 697  : 
; 698  : 		CheckTime = WebzenVar2.m_iHour*60+WebzenVar2.m_iMinute;

  01792	8b 45 e8	 mov	 eax, DWORD PTR _WebzenVar2$[ebp]
  01795	6b c0 3c	 imul	 eax, 60			; 0000003cH
  01798	03 45 ec	 add	 eax, DWORD PTR _WebzenVar2$[ebp+4]
  0179b	89 45 e0	 mov	 DWORD PTR _CheckTime$[ebp], eax

; 699  : 
; 700  : 		if(today->tm_hour <= WebzenVar2.m_iHour)

  0179e	8b 45 d8	 mov	 eax, DWORD PTR _today$[ebp]
  017a1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  017a4	3b 4d e8	 cmp	 ecx, DWORD PTR _WebzenVar2$[ebp]
  017a7	7f 0b		 jg	 SHORT $LN5@CheckClose

; 701  : 		{
; 702  : 			loc12 = CheckTime - CurrentTime;

  017a9	8b 45 e0	 mov	 eax, DWORD PTR _CheckTime$[ebp]
  017ac	2b 45 dc	 sub	 eax, DWORD PTR _CurrentTime$[ebp]
  017af	89 45 cc	 mov	 DWORD PTR _loc12$[ebp], eax

; 703  : 		}
; 704  : 		else

  017b2	eb 0e		 jmp	 SHORT $LN4@CheckClose
$LN5@CheckClose:

; 705  : 		{
; 706  : 			loc12 = 1440-CurrentTime+CheckTime;

  017b4	b8 a0 05 00 00	 mov	 eax, 1440		; 000005a0H
  017b9	2b 45 dc	 sub	 eax, DWORD PTR _CurrentTime$[ebp]
  017bc	03 45 e0	 add	 eax, DWORD PTR _CheckTime$[ebp]
  017bf	89 45 cc	 mov	 DWORD PTR _loc12$[ebp], eax
$LN4@CheckClose:

; 707  : 		}
; 708  : 
; 709  : 		if(loc12 <= this->m_iOpenTime)

  017c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  017c5	8b 4d cc	 mov	 ecx, DWORD PTR _loc12$[ebp]
  017c8	3b 48 34	 cmp	 ecx, DWORD PTR [eax+52]
  017cb	7f 42		 jg	 SHORT $LN3@CheckClose

; 710  : 		{
; 711  : 			it++;

  017cd	6a 00		 push	 0
  017cf	8d 45 80	 lea	 eax, DWORD PTR $T241646[ebp]
  017d2	50		 push	 eax
  017d3	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  017d6	e8 00 00 00 00	 call	 ??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++

; 712  : 
; 713  : 			if(it != this->m_listDevilSquareOpenTime.end())

  017db	8d 45 84	 lea	 eax, DWORD PTR $T241647[ebp]
  017de	50		 push	 eax
  017df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017e2	83 c1 24	 add	 ecx, 36			; 00000024H
  017e5	e8 00 00 00 00	 call	 ?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end
  017ea	50		 push	 eax
  017eb	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  017ee	e8 00 00 00 00	 call	 ??9?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator!=
  017f3	0f b6 c8	 movzx	 ecx, al
  017f6	85 c9		 test	 ecx, ecx
  017f8	74 13		 je	 SHORT $LN2@CheckClose

; 714  : 			{
; 715  : 				WebzenVar2 = (*it);

  017fa	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  017fd	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
  01802	8b 08		 mov	 ecx, DWORD PTR [eax]
  01804	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01807	89 4d e8	 mov	 DWORD PTR _WebzenVar2$[ebp], ecx
  0180a	89 55 ec	 mov	 DWORD PTR _WebzenVar2$[ebp+4], edx
$LN2@CheckClose:

; 716  : 			}
; 717  : 		}
; 718  : 		else

  0180d	eb 0e		 jmp	 SHORT $LN1@CheckClose
$LN3@CheckClose:

; 719  : 		{
; 720  : 			loc12 -= this->m_iOpenTime;

  0180f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01812	8b 4d cc	 mov	 ecx, DWORD PTR _loc12$[ebp]
  01815	2b 48 34	 sub	 ecx, DWORD PTR [eax+52]
  01818	89 4d cc	 mov	 DWORD PTR _loc12$[ebp], ecx

; 721  : 			break;

  0181b	eb 05		 jmp	 SHORT $LN7@CheckClose
$LN1@CheckClose:

; 722  : 		}
; 723  : 	}

  0181d	e9 10 ff ff ff	 jmp	 $LN8@CheckClose
$LN7@CheckClose:

; 724  : 
; 725  : 	return loc12;

  01822	8b 45 cc	 mov	 eax, DWORD PTR _loc12$[ebp]
$LN17@CheckClose:

; 726  : }

  01825	5f		 pop	 edi
  01826	5e		 pop	 esi
  01827	5b		 pop	 ebx
  01828	8b e5		 mov	 esp, ebp
  0182a	5d		 pop	 ebp
  0182b	c3		 ret	 0
?CheckCloseTime@CDevilSquare@@QAEHXZ ENDP		; CDevilSquare::CheckCloseTime
_TEXT	ENDS
PUBLIC	?CheckInvalidUser@CDevilSquare@@AAEXXZ		; CDevilSquare::CheckInvalidUser
PUBLIC	?ItemClear@CDevilSquare@@AAEXXZ			; CDevilSquare::ItemClear
PUBLIC	__$ArrayPad$
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z:PROC	; TNotice::MakeNoticeMsg
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv327 = -648						; size = 4
tv308 = -648						; size = 4
tv225 = -648						; size = 4
tv206 = -648						; size = 4
tv163 = -648						; size = 4
tv144 = -648						; size = 4
tv328 = -644						; size = 4
tv309 = -644						; size = 4
tv262 = -644						; size = 4
tv226 = -644						; size = 4
tv207 = -644						; size = 4
tv164 = -644						; size = 4
tv145 = -644						; size = 4
_i$240562 = -576					; size = 4
_pNotice$240560 = -572					; size = 272
_i$240551 = -300					; size = 4
_i$240540 = -296					; size = 4
_pNotice$240538 = -292					; size = 272
_i$240513 = -20						; size = 4
_pMsg$240511 = -16					; size = 4
_lc2$240508 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcClose@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ProcClose
; _this$ = ecx

; 729  : {

  01830	55		 push	 ebp
  01831	8b ec		 mov	 ebp, esp
  01833	81 ec 88 02 00
	00		 sub	 esp, 648		; 00000288H
  01839	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0183e	33 c5		 xor	 eax, ebp
  01840	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01843	53		 push	 ebx
  01844	56		 push	 esi
  01845	57		 push	 edi
  01846	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 730  : 	if ( this->m_iremainTimeSec != -1 )

  01849	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0184c	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  01850	0f 84 0b 04 00
	00		 je	 $LN35@ProcClose

; 731  : 	{
; 732  : 		int lc2 = (GetTickCount() - this->m_iTime)/1000;

  01856	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0185c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0185f	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  01862	33 d2		 xor	 edx, edx
  01864	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  01869	f7 f1		 div	 ecx
  0186b	89 45 f4	 mov	 DWORD PTR _lc2$240508[ebp], eax

; 733  : 
; 734  : 		if ( lc2 != 0 )

  0186e	83 7d f4 00	 cmp	 DWORD PTR _lc2$240508[ebp], 0
  01872	0f 84 e4 03 00
	00		 je	 $LN34@ProcClose

; 735  : 		{
; 736  : 			this->m_iremainTimeSec -= lc2;

  01878	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0187b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0187e	2b 4d f4	 sub	 ecx, DWORD PTR _lc2$240508[ebp]
  01881	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01884	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 737  : 			this->m_iTime += lc2 * 1000;

  01887	8b 45 f4	 mov	 eax, DWORD PTR _lc2$240508[ebp]
  0188a	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  01890	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01893	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  01896	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01899	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 738  : 
; 739  : 			if ( this->m_iremainTimeSec <= 30 && this->m_bSendTimeCount == FALSE )

  0189c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0189f	83 78 10 1e	 cmp	 DWORD PTR [eax+16], 30	; 0000001eH
  018a3	0f 8f b6 01 00
	00		 jg	 $LN33@ProcClose
  018a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  018ac	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  018b0	0f 85 a9 01 00
	00		 jne	 $LN33@ProcClose

; 740  : 			{
; 741  : 				PMSG_SET_DEVILSQUARE pMsg;
; 742  : 
; 743  : 				PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  018b6	6a 04		 push	 4
  018b8	68 92 00 00 00	 push	 146			; 00000092H
  018bd	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$240511[ebp]
  018c0	50		 push	 eax
  018c1	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  018c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 744  : 				pMsg.Type = DevilSquare_CLOSE;

  018c9	c6 45 f3 00	 mov	 BYTE PTR _pMsg$240511[ebp+3], 0

; 745  : 
; 746  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  018cd	c7 45 ec b0 36
	00 00		 mov	 DWORD PTR _i$240513[ebp], 14000 ; 000036b0H
  018d4	eb 09		 jmp	 SHORT $LN32@ProcClose
$LN31@ProcClose:
  018d6	8b 45 ec	 mov	 eax, DWORD PTR _i$240513[ebp]
  018d9	83 c0 01	 add	 eax, 1
  018dc	89 45 ec	 mov	 DWORD PTR _i$240513[ebp], eax
$LN32@ProcClose:
  018df	81 7d ec 98 3a
	00 00		 cmp	 DWORD PTR _i$240513[ebp], 15000 ; 00003a98H
  018e6	0f 8d 69 01 00
	00		 jge	 $LN30@ProcClose

; 747  : 				{
; 748  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  018ec	8b 45 ec	 mov	 eax, DWORD PTR _i$240513[ebp]
  018ef	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  018f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  018fb	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  01900	0f 85 4a 01 00
	00		 jne	 $LN29@ProcClose
  01906	8b 45 ec	 mov	 eax, DWORD PTR _i$240513[ebp]
  01909	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0190f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01915	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0191a	83 fa 01	 cmp	 edx, 1
  0191d	0f 85 2d 01 00
	00		 jne	 $LN29@ProcClose

; 749  : 					{
; 750  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  01923	8b 45 ec	 mov	 eax, DWORD PTR _i$240513[ebp]
  01926	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0192c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01932	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0193a	83 fa 34	 cmp	 edx, 52			; 00000034H
  0193d	75 0c		 jne	 SHORT $LN40@ProcClose
  0193f	c7 85 7c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv145[ebp], 1
  01949	eb 59		 jmp	 SHORT $LN41@ProcClose
$LN40@ProcClose:
  0194b	8b 45 ec	 mov	 eax, DWORD PTR _i$240513[ebp]
  0194e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01954	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0195a	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01962	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  01965	7d 0c		 jge	 SHORT $LN38@ProcClose
  01967	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv144[ebp], 0
  01971	eb 25		 jmp	 SHORT $LN39@ProcClose
$LN38@ProcClose:
  01973	8b 45 ec	 mov	 eax, DWORD PTR _i$240513[ebp]
  01976	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0197c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01982	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0198a	33 c0		 xor	 eax, eax
  0198c	83 fa 11	 cmp	 edx, 17			; 00000011H
  0198f	0f 9e c0	 setle	 al
  01992	89 85 78 fd ff
	ff		 mov	 DWORD PTR tv144[ebp], eax
$LN39@ProcClose:
  01998	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR tv144[ebp]
  0199e	89 8d 7c fd ff
	ff		 mov	 DWORD PTR tv145[ebp], ecx
$LN41@ProcClose:
  019a4	83 bd 7c fd ff
	ff 00		 cmp	 DWORD PTR tv145[ebp], 0
  019ab	0f 85 9f 00 00
	00		 jne	 $LN29@ProcClose

; 751  : 						{
; 752  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  019b1	8b 45 ec	 mov	 eax, DWORD PTR _i$240513[ebp]
  019b4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  019ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  019c0	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  019c8	83 fa 35	 cmp	 edx, 53			; 00000035H
  019cb	75 0c		 jne	 SHORT $LN44@ProcClose
  019cd	c7 85 7c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv164[ebp], 1
  019d7	eb 59		 jmp	 SHORT $LN45@ProcClose
$LN44@ProcClose:
  019d9	8b 45 ec	 mov	 eax, DWORD PTR _i$240513[ebp]
  019dc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  019e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  019e8	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  019f0	83 fa 12	 cmp	 edx, 18			; 00000012H
  019f3	7d 0c		 jge	 SHORT $LN42@ProcClose
  019f5	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv163[ebp], 0
  019ff	eb 25		 jmp	 SHORT $LN43@ProcClose
$LN42@ProcClose:
  01a01	8b 45 ec	 mov	 eax, DWORD PTR _i$240513[ebp]
  01a04	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01a0a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01a10	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01a18	33 c0		 xor	 eax, eax
  01a1a	83 fa 17	 cmp	 edx, 23			; 00000017H
  01a1d	0f 9e c0	 setle	 al
  01a20	89 85 78 fd ff
	ff		 mov	 DWORD PTR tv163[ebp], eax
$LN43@ProcClose:
  01a26	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR tv163[ebp]
  01a2c	89 8d 7c fd ff
	ff		 mov	 DWORD PTR tv164[ebp], ecx
$LN45@ProcClose:
  01a32	83 bd 7c fd ff
	ff 00		 cmp	 DWORD PTR tv164[ebp], 0
  01a39	75 15		 jne	 SHORT $LN29@ProcClose

; 753  : 							{
; 754  : 								DataSend(i, (LPBYTE)&pMsg, pMsg.h.size);

  01a3b	0f b6 45 f1	 movzx	 eax, BYTE PTR _pMsg$240511[ebp+1]
  01a3f	50		 push	 eax
  01a40	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$240511[ebp]
  01a43	51		 push	 ecx
  01a44	8b 55 ec	 mov	 edx, DWORD PTR _i$240513[ebp]
  01a47	52		 push	 edx
  01a48	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01a4d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@ProcClose:

; 755  : 							}
; 756  : 						}
; 757  : 					}
; 758  : 				}

  01a50	e9 81 fe ff ff	 jmp	 $LN31@ProcClose
$LN30@ProcClose:

; 759  : 
; 760  : 				this->m_bSendTimeCount = TRUE;

  01a55	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01a58	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1
$LN33@ProcClose:

; 761  : 			}		
; 762  : 
; 763  : 			if (this->m_iremainTimeSec < 1 )

  01a5f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01a62	83 78 10 01	 cmp	 DWORD PTR [eax+16], 1
  01a66	0f 8d f0 01 00
	00		 jge	 $LN34@ProcClose

; 764  : 			{
; 765  : 				PMSG_NOTICE pNotice;
; 766  : 
; 767  : 				TNotice::MakeNoticeMsg((TNotice *)&pNotice, 0, lMsg.Get(MSGGET(2, 191)));

  01a6c	68 bf 02 00 00	 push	 703			; 000002bfH
  01a71	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01a76	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01a7b	50		 push	 eax
  01a7c	6a 00		 push	 0
  01a7e	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$240538[ebp]
  01a84	50		 push	 eax
  01a85	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  01a8a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 768  : 
; 769  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  01a8d	c7 85 d8 fe ff
	ff b0 36 00 00	 mov	 DWORD PTR _i$240540[ebp], 14000 ; 000036b0H
  01a97	eb 0f		 jmp	 SHORT $LN25@ProcClose
$LN24@ProcClose:
  01a99	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240540[ebp]
  01a9f	83 c0 01	 add	 eax, 1
  01aa2	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _i$240540[ebp], eax
$LN25@ProcClose:
  01aa8	81 bd d8 fe ff
	ff 98 3a 00 00	 cmp	 DWORD PTR _i$240540[ebp], 15000 ; 00003a98H
  01ab2	0f 8d 8a 01 00
	00		 jge	 $LN23@ProcClose

; 770  : 				{
; 771  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  01ab8	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240540[ebp]
  01abe	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01ac4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01aca	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  01acf	0f 85 68 01 00
	00		 jne	 $LN22@ProcClose
  01ad5	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240540[ebp]
  01adb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01ae1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01ae7	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  01aec	83 fa 01	 cmp	 edx, 1
  01aef	0f 85 48 01 00
	00		 jne	 $LN22@ProcClose

; 772  : 					{
; 773  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  01af5	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240540[ebp]
  01afb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01b01	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01b07	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01b0f	83 fa 34	 cmp	 edx, 52			; 00000034H
  01b12	75 0c		 jne	 SHORT $LN48@ProcClose
  01b14	c7 85 7c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv207[ebp], 1
  01b1e	eb 5f		 jmp	 SHORT $LN49@ProcClose
$LN48@ProcClose:
  01b20	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240540[ebp]
  01b26	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01b2c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01b32	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01b3a	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  01b3d	7d 0c		 jge	 SHORT $LN46@ProcClose
  01b3f	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv206[ebp], 0
  01b49	eb 28		 jmp	 SHORT $LN47@ProcClose
$LN46@ProcClose:
  01b4b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240540[ebp]
  01b51	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01b57	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01b5d	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01b65	33 c0		 xor	 eax, eax
  01b67	83 fa 11	 cmp	 edx, 17			; 00000011H
  01b6a	0f 9e c0	 setle	 al
  01b6d	89 85 78 fd ff
	ff		 mov	 DWORD PTR tv206[ebp], eax
$LN47@ProcClose:
  01b73	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR tv206[ebp]
  01b79	89 8d 7c fd ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
$LN49@ProcClose:
  01b7f	83 bd 7c fd ff
	ff 00		 cmp	 DWORD PTR tv207[ebp], 0
  01b86	0f 85 b1 00 00
	00		 jne	 $LN22@ProcClose

; 774  : 						{
; 775  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  01b8c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240540[ebp]
  01b92	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01b98	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01b9e	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01ba6	83 fa 35	 cmp	 edx, 53			; 00000035H
  01ba9	75 0c		 jne	 SHORT $LN52@ProcClose
  01bab	c7 85 7c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv226[ebp], 1
  01bb5	eb 5f		 jmp	 SHORT $LN53@ProcClose
$LN52@ProcClose:
  01bb7	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240540[ebp]
  01bbd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01bc3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01bc9	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01bd1	83 fa 12	 cmp	 edx, 18			; 00000012H
  01bd4	7d 0c		 jge	 SHORT $LN50@ProcClose
  01bd6	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
  01be0	eb 28		 jmp	 SHORT $LN51@ProcClose
$LN50@ProcClose:
  01be2	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240540[ebp]
  01be8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01bee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01bf4	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01bfc	33 c0		 xor	 eax, eax
  01bfe	83 fa 17	 cmp	 edx, 23			; 00000017H
  01c01	0f 9e c0	 setle	 al
  01c04	89 85 78 fd ff
	ff		 mov	 DWORD PTR tv225[ebp], eax
$LN51@ProcClose:
  01c0a	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR tv225[ebp]
  01c10	89 8d 7c fd ff
	ff		 mov	 DWORD PTR tv226[ebp], ecx
$LN53@ProcClose:
  01c16	83 bd 7c fd ff
	ff 00		 cmp	 DWORD PTR tv226[ebp], 0
  01c1d	75 1e		 jne	 SHORT $LN22@ProcClose

; 776  : 							{
; 777  : 								DataSend(i, (LPBYTE)&pNotice, pNotice.h.size);

  01c1f	0f b6 85 dd fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$240538[ebp+1]
  01c26	50		 push	 eax
  01c27	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$240538[ebp]
  01c2d	51		 push	 ecx
  01c2e	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _i$240540[ebp]
  01c34	52		 push	 edx
  01c35	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01c3a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN22@ProcClose:

; 778  : 							}
; 779  : 						}
; 780  : 					}
; 781  : 				}

  01c3d	e9 57 fe ff ff	 jmp	 $LN24@ProcClose
$LN23@ProcClose:

; 782  : 
; 783  : 				LogAddTD(pNotice.Notice);

  01c42	8d 85 e9 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$240538[ebp+13]
  01c48	50		 push	 eax
  01c49	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01c4f	83 c4 04	 add	 esp, 4

; 784  : 				this->SetState(DevilSquare_OPEN);

  01c52	6a 01		 push	 1
  01c54	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c57	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
$LN34@ProcClose:

; 785  : 			}
; 786  : 		
; 787  : 		}
; 788  : 	}

  01c5c	e9 49 03 00 00	 jmp	 $LN36@ProcClose
$LN35@ProcClose:

; 789  : 	else if ( this->m_iTime < GetTickCount() )

  01c61	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01c67	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c6a	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  01c6d	0f 83 37 03 00
	00		 jae	 $LN36@ProcClose

; 790  : 	{
; 791  : 		this->ClearMonstr();

  01c73	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c76	e8 00 00 00 00	 call	 ?ClearMonstr@CDevilSquare@@QAEXXZ ; CDevilSquare::ClearMonstr

; 792  : 		this->m_iRemainTime--;

  01c7b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01c7e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01c81	83 e9 01	 sub	 ecx, 1
  01c84	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01c87	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 793  : 
; 794  : 		if ( this->m_bFlag == 0 )

  01c8a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01c8d	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  01c91	0f 85 c0 00 00
	00		 jne	 $LN17@ProcClose

; 795  : 		{
; 796  : 			for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  01c97	c7 85 d4 fe ff
	ff b0 36 00 00	 mov	 DWORD PTR _i$240551[ebp], 14000 ; 000036b0H
  01ca1	eb 0f		 jmp	 SHORT $LN16@ProcClose
$LN15@ProcClose:
  01ca3	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _i$240551[ebp]
  01ca9	83 c0 01	 add	 eax, 1
  01cac	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _i$240551[ebp], eax
$LN16@ProcClose:
  01cb2	81 bd d4 fe ff
	ff 98 3a 00 00	 cmp	 DWORD PTR _i$240551[ebp], 15000 ; 00003a98H
  01cbc	0f 8d 8b 00 00
	00		 jge	 $LN14@ProcClose

; 797  : 			{
; 798  : 				if ( gObj[i].Connected == PLAYER_PLAYING )

  01cc2	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _i$240551[ebp]
  01cc8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01cce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01cd4	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  01cd9	75 6d		 jne	 SHORT $LN13@ProcClose

; 799  : 				{
; 800  : 					if ( DS_MAP_RANGE(gObj[i].MapNumber) != FALSE )

  01cdb	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _i$240551[ebp]
  01ce1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01ce7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01ced	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01cf5	83 fa 09	 cmp	 edx, 9
  01cf8	75 0c		 jne	 SHORT $LN54@ProcClose
  01cfa	c7 85 7c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv262[ebp], 1
  01d04	eb 28		 jmp	 SHORT $LN55@ProcClose
$LN54@ProcClose:
  01d06	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _i$240551[ebp]
  01d0c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01d12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01d18	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01d20	33 c0		 xor	 eax, eax
  01d22	83 fa 20	 cmp	 edx, 32			; 00000020H
  01d25	0f 94 c0	 sete	 al
  01d28	89 85 7c fd ff
	ff		 mov	 DWORD PTR tv262[ebp], eax
$LN55@ProcClose:
  01d2e	83 bd 7c fd ff
	ff 00		 cmp	 DWORD PTR tv262[ebp], 0
  01d35	74 11		 je	 SHORT $LN13@ProcClose

; 801  : 					{
; 802  : 						gObjMoveGate(i, 27);

  01d37	6a 1b		 push	 27			; 0000001bH
  01d39	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _i$240551[ebp]
  01d3f	50		 push	 eax
  01d40	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  01d45	83 c4 08	 add	 esp, 8
$LN13@ProcClose:

; 803  : 					}
; 804  : 				}
; 805  : 			}

  01d48	e9 56 ff ff ff	 jmp	 $LN15@ProcClose
$LN14@ProcClose:

; 806  : 
; 807  : 			this->ItemClear();

  01d4d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01d50	e8 00 00 00 00	 call	 ?ItemClear@CDevilSquare@@AAEXXZ ; CDevilSquare::ItemClear

; 808  : 		}
; 809  : 		else

  01d55	eb 08		 jmp	 SHORT $LN11@ProcClose
$LN17@ProcClose:

; 810  : 		{
; 811  : 			this->CheckInvalidUser();

  01d57	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01d5a	e8 00 00 00 00	 call	 ?CheckInvalidUser@CDevilSquare@@AAEXXZ ; CDevilSquare::CheckInvalidUser
$LN11@ProcClose:

; 812  : 		}
; 813  : 
; 814  : 		if ( this->m_iRemainTime <= 15 )

  01d5f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01d62	83 78 0c 0f	 cmp	 DWORD PTR [eax+12], 15	; 0000000fH
  01d66	0f 8f 03 02 00
	00		 jg	 $LN10@ProcClose

; 815  : 		{
; 816  : 			if ( (this->m_iRemainTime%5)== 0 )

  01d6c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01d6f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01d72	99		 cdq
  01d73	b9 05 00 00 00	 mov	 ecx, 5
  01d78	f7 f9		 idiv	 ecx
  01d7a	85 d2		 test	 edx, edx
  01d7c	0f 85 ed 01 00
	00		 jne	 $LN10@ProcClose

; 817  : 			{
; 818  : 				PMSG_NOTICE pNotice;
; 819  : 
; 820  : 				TNotice::MakeNoticeMsgEx((TNotice *)&pNotice, 0, lMsg.Get(MSGGET(2, 192)), this->m_iRemainTime);

  01d82	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01d85	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01d88	51		 push	 ecx
  01d89	68 c0 02 00 00	 push	 704			; 000002c0H
  01d8e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01d93	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01d98	50		 push	 eax
  01d99	6a 00		 push	 0
  01d9b	8d 95 c4 fd ff
	ff		 lea	 edx, DWORD PTR _pNotice$240560[ebp]
  01da1	52		 push	 edx
  01da2	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  01da7	83 c4 10	 add	 esp, 16			; 00000010H

; 821  : 
; 822  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  01daa	c7 85 c0 fd ff
	ff b0 36 00 00	 mov	 DWORD PTR _i$240562[ebp], 14000 ; 000036b0H
  01db4	eb 0f		 jmp	 SHORT $LN8@ProcClose
$LN7@ProcClose:
  01db6	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _i$240562[ebp]
  01dbc	83 c0 01	 add	 eax, 1
  01dbf	89 85 c0 fd ff
	ff		 mov	 DWORD PTR _i$240562[ebp], eax
$LN8@ProcClose:
  01dc5	81 bd c0 fd ff
	ff 98 3a 00 00	 cmp	 DWORD PTR _i$240562[ebp], 15000 ; 00003a98H
  01dcf	0f 8d 8a 01 00
	00		 jge	 $LN6@ProcClose

; 823  : 				{
; 824  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  01dd5	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _i$240562[ebp]
  01ddb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01de1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01de7	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  01dec	0f 85 68 01 00
	00		 jne	 $LN5@ProcClose
  01df2	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _i$240562[ebp]
  01df8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01dfe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01e04	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  01e09	83 fa 01	 cmp	 edx, 1
  01e0c	0f 85 48 01 00
	00		 jne	 $LN5@ProcClose

; 825  : 					{
; 826  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  01e12	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _i$240562[ebp]
  01e18	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01e1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01e24	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01e2c	83 fa 34	 cmp	 edx, 52			; 00000034H
  01e2f	75 0c		 jne	 SHORT $LN58@ProcClose
  01e31	c7 85 7c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv309[ebp], 1
  01e3b	eb 5f		 jmp	 SHORT $LN59@ProcClose
$LN58@ProcClose:
  01e3d	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _i$240562[ebp]
  01e43	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01e49	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01e4f	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01e57	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  01e5a	7d 0c		 jge	 SHORT $LN56@ProcClose
  01e5c	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
  01e66	eb 28		 jmp	 SHORT $LN57@ProcClose
$LN56@ProcClose:
  01e68	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _i$240562[ebp]
  01e6e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01e74	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01e7a	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01e82	33 c0		 xor	 eax, eax
  01e84	83 fa 11	 cmp	 edx, 17			; 00000011H
  01e87	0f 9e c0	 setle	 al
  01e8a	89 85 78 fd ff
	ff		 mov	 DWORD PTR tv308[ebp], eax
$LN57@ProcClose:
  01e90	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR tv308[ebp]
  01e96	89 8d 7c fd ff
	ff		 mov	 DWORD PTR tv309[ebp], ecx
$LN59@ProcClose:
  01e9c	83 bd 7c fd ff
	ff 00		 cmp	 DWORD PTR tv309[ebp], 0
  01ea3	0f 85 b1 00 00
	00		 jne	 $LN5@ProcClose

; 827  : 						{
; 828  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  01ea9	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _i$240562[ebp]
  01eaf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01eb5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01ebb	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01ec3	83 fa 35	 cmp	 edx, 53			; 00000035H
  01ec6	75 0c		 jne	 SHORT $LN62@ProcClose
  01ec8	c7 85 7c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv328[ebp], 1
  01ed2	eb 5f		 jmp	 SHORT $LN63@ProcClose
$LN62@ProcClose:
  01ed4	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _i$240562[ebp]
  01eda	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01ee0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01ee6	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01eee	83 fa 12	 cmp	 edx, 18			; 00000012H
  01ef1	7d 0c		 jge	 SHORT $LN60@ProcClose
  01ef3	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], 0
  01efd	eb 28		 jmp	 SHORT $LN61@ProcClose
$LN60@ProcClose:
  01eff	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _i$240562[ebp]
  01f05	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01f0b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01f11	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  01f19	33 c0		 xor	 eax, eax
  01f1b	83 fa 17	 cmp	 edx, 23			; 00000017H
  01f1e	0f 9e c0	 setle	 al
  01f21	89 85 78 fd ff
	ff		 mov	 DWORD PTR tv327[ebp], eax
$LN61@ProcClose:
  01f27	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR tv327[ebp]
  01f2d	89 8d 7c fd ff
	ff		 mov	 DWORD PTR tv328[ebp], ecx
$LN63@ProcClose:
  01f33	83 bd 7c fd ff
	ff 00		 cmp	 DWORD PTR tv328[ebp], 0
  01f3a	75 1e		 jne	 SHORT $LN5@ProcClose

; 829  : 							{
; 830  : 								DataSend(i, (LPBYTE)&pNotice, pNotice.h.size);

  01f3c	0f b6 85 c5 fd
	ff ff		 movzx	 eax, BYTE PTR _pNotice$240560[ebp+1]
  01f43	50		 push	 eax
  01f44	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR _pNotice$240560[ebp]
  01f4a	51		 push	 ecx
  01f4b	8b 95 c0 fd ff
	ff		 mov	 edx, DWORD PTR _i$240562[ebp]
  01f51	52		 push	 edx
  01f52	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01f57	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@ProcClose:

; 831  : 							}
; 832  : 						}
; 833  : 					}
; 834  : 				}

  01f5a	e9 57 fe ff ff	 jmp	 $LN7@ProcClose
$LN6@ProcClose:

; 835  : 
; 836  : 				LogAddTD((char*)pNotice.Notice);

  01f5f	8d 85 d1 fd ff
	ff		 lea	 eax, DWORD PTR _pNotice$240560[ebp+13]
  01f65	50		 push	 eax
  01f66	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01f6c	83 c4 04	 add	 esp, 4
$LN10@ProcClose:

; 837  : 			}
; 838  : 		}
; 839  : 
; 840  : 		if ( this->m_iRemainTime == 1 && this->m_iremainTimeSec == -1 )

  01f6f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01f72	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  01f76	75 21		 jne	 SHORT $LN2@ProcClose
  01f78	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01f7b	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  01f7f	75 18		 jne	 SHORT $LN2@ProcClose

; 841  : 		{
; 842  : 			this->m_iremainTimeSec = 60;

  01f81	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01f84	c7 40 10 3c 00
	00 00		 mov	 DWORD PTR [eax+16], 60	; 0000003cH

; 843  : 			this->m_iTime = GetTickCount();

  01f8b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01f91	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f94	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 844  : 		}
; 845  : 		else

  01f97	eb 11		 jmp	 SHORT $LN36@ProcClose
$LN2@ProcClose:

; 846  : 		{
; 847  : 			this->m_iTime = GetTickCount() + 60000;

  01f99	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01f9f	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  01fa4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fa7	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN36@ProcClose:

; 848  : 		}
; 849  : 	}
; 850  : }

  01faa	5f		 pop	 edi
  01fab	5e		 pop	 esi
  01fac	5b		 pop	 ebx
  01fad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01fb0	33 cd		 xor	 ecx, ebp
  01fb2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01fb7	8b e5		 mov	 esp, ebp
  01fb9	5d		 pop	 ebp
  01fba	c3		 ret	 0
?ProcClose@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ProcClose
_TEXT	ENDS
PUBLIC	?SendEventStartMsg@CDevilSquare@@AAEXXZ		; CDevilSquare::SendEventStartMsg
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv240 = -368						; size = 4
tv221 = -368						; size = 4
tv163 = -368						; size = 4
tv144 = -368						; size = 4
tv241 = -364						; size = 4
tv222 = -364						; size = 4
tv164 = -364						; size = 4
tv145 = -364						; size = 4
_i$240595 = -296					; size = 4
_pNotice$240594 = -292					; size = 272
_i$240582 = -20						; size = 4
_pMsg$240580 = -16					; size = 4
_lc2$240577 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcOpen@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ProcOpen
; _this$ = ecx

; 853  : {

  01fc0	55		 push	 ebp
  01fc1	8b ec		 mov	 ebp, esp
  01fc3	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  01fc9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01fce	33 c5		 xor	 eax, ebp
  01fd0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01fd3	53		 push	 ebx
  01fd4	56		 push	 esi
  01fd5	57		 push	 edi
  01fd6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 854  : 	if ( this->m_iremainTimeSec != -1 )

  01fd9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01fdc	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  01fe0	0f 84 29 02 00
	00		 je	 $LN21@ProcOpen@2

; 855  : 	{
; 856  : 
; 857  : 		int lc2 = (GetTickCount() - this->m_iTime)/1000;

  01fe6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01fec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fef	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  01ff2	33 d2		 xor	 edx, edx
  01ff4	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  01ff9	f7 f1		 div	 ecx
  01ffb	89 45 f4	 mov	 DWORD PTR _lc2$240577[ebp], eax

; 858  : 
; 859  : 		if ( lc2 != 0 )

  01ffe	83 7d f4 00	 cmp	 DWORD PTR _lc2$240577[ebp], 0
  02002	0f 84 02 02 00
	00		 je	 $LN20@ProcOpen@2

; 860  : 		{
; 861  : 			this->m_iremainTimeSec -= lc2;

  02008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0200b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0200e	2b 4d f4	 sub	 ecx, DWORD PTR _lc2$240577[ebp]
  02011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02014	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 862  : 			this->m_iTime += lc2 * 1000;

  02017	8b 45 f4	 mov	 eax, DWORD PTR _lc2$240577[ebp]
  0201a	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  02020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02023	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  02026	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02029	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 863  : 
; 864  : 			if ( this->m_iremainTimeSec <= 30 && this->m_bSendTimeCount == FALSE )

  0202c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0202f	83 78 10 1e	 cmp	 DWORD PTR [eax+16], 30	; 0000001eH
  02033	0f 8f b6 01 00
	00		 jg	 $LN19@ProcOpen@2
  02039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0203c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  02040	0f 85 a9 01 00
	00		 jne	 $LN19@ProcOpen@2

; 865  : 			{
; 866  : 				PMSG_SET_DEVILSQUARE pMsg;
; 867  : 
; 868  : 				PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  02046	6a 04		 push	 4
  02048	68 92 00 00 00	 push	 146			; 00000092H
  0204d	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$240580[ebp]
  02050	50		 push	 eax
  02051	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  02056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 869  : 				pMsg.Type = DevilSquare_OPEN;

  02059	c6 45 f3 01	 mov	 BYTE PTR _pMsg$240580[ebp+3], 1

; 870  : 
; 871  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0205d	c7 45 ec b0 36
	00 00		 mov	 DWORD PTR _i$240582[ebp], 14000 ; 000036b0H
  02064	eb 09		 jmp	 SHORT $LN18@ProcOpen@2
$LN17@ProcOpen@2:
  02066	8b 45 ec	 mov	 eax, DWORD PTR _i$240582[ebp]
  02069	83 c0 01	 add	 eax, 1
  0206c	89 45 ec	 mov	 DWORD PTR _i$240582[ebp], eax
$LN18@ProcOpen@2:
  0206f	81 7d ec 98 3a
	00 00		 cmp	 DWORD PTR _i$240582[ebp], 15000 ; 00003a98H
  02076	0f 8d 69 01 00
	00		 jge	 $LN16@ProcOpen@2

; 872  : 				{
; 873  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  0207c	8b 45 ec	 mov	 eax, DWORD PTR _i$240582[ebp]
  0207f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0208b	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  02090	0f 85 4a 01 00
	00		 jne	 $LN15@ProcOpen@2
  02096	8b 45 ec	 mov	 eax, DWORD PTR _i$240582[ebp]
  02099	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0209f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  020a5	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  020aa	83 fa 01	 cmp	 edx, 1
  020ad	0f 85 2d 01 00
	00		 jne	 $LN15@ProcOpen@2

; 874  : 					{
; 875  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  020b3	8b 45 ec	 mov	 eax, DWORD PTR _i$240582[ebp]
  020b6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  020bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  020c2	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  020ca	83 fa 34	 cmp	 edx, 52			; 00000034H
  020cd	75 0c		 jne	 SHORT $LN26@ProcOpen@2
  020cf	c7 85 94 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv145[ebp], 1
  020d9	eb 59		 jmp	 SHORT $LN27@ProcOpen@2
$LN26@ProcOpen@2:
  020db	8b 45 ec	 mov	 eax, DWORD PTR _i$240582[ebp]
  020de	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  020e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  020ea	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  020f2	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  020f5	7d 0c		 jge	 SHORT $LN24@ProcOpen@2
  020f7	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv144[ebp], 0
  02101	eb 25		 jmp	 SHORT $LN25@ProcOpen@2
$LN24@ProcOpen@2:
  02103	8b 45 ec	 mov	 eax, DWORD PTR _i$240582[ebp]
  02106	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0210c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02112	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0211a	33 c0		 xor	 eax, eax
  0211c	83 fa 11	 cmp	 edx, 17			; 00000011H
  0211f	0f 9e c0	 setle	 al
  02122	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv144[ebp], eax
$LN25@ProcOpen@2:
  02128	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR tv144[ebp]
  0212e	89 8d 94 fe ff
	ff		 mov	 DWORD PTR tv145[ebp], ecx
$LN27@ProcOpen@2:
  02134	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR tv145[ebp], 0
  0213b	0f 85 9f 00 00
	00		 jne	 $LN15@ProcOpen@2

; 876  : 						{
; 877  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  02141	8b 45 ec	 mov	 eax, DWORD PTR _i$240582[ebp]
  02144	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0214a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02150	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02158	83 fa 35	 cmp	 edx, 53			; 00000035H
  0215b	75 0c		 jne	 SHORT $LN30@ProcOpen@2
  0215d	c7 85 94 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv164[ebp], 1
  02167	eb 59		 jmp	 SHORT $LN31@ProcOpen@2
$LN30@ProcOpen@2:
  02169	8b 45 ec	 mov	 eax, DWORD PTR _i$240582[ebp]
  0216c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02172	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02178	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02180	83 fa 12	 cmp	 edx, 18			; 00000012H
  02183	7d 0c		 jge	 SHORT $LN28@ProcOpen@2
  02185	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv163[ebp], 0
  0218f	eb 25		 jmp	 SHORT $LN29@ProcOpen@2
$LN28@ProcOpen@2:
  02191	8b 45 ec	 mov	 eax, DWORD PTR _i$240582[ebp]
  02194	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0219a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  021a0	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  021a8	33 c0		 xor	 eax, eax
  021aa	83 fa 17	 cmp	 edx, 23			; 00000017H
  021ad	0f 9e c0	 setle	 al
  021b0	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv163[ebp], eax
$LN29@ProcOpen@2:
  021b6	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR tv163[ebp]
  021bc	89 8d 94 fe ff
	ff		 mov	 DWORD PTR tv164[ebp], ecx
$LN31@ProcOpen@2:
  021c2	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR tv164[ebp], 0
  021c9	75 15		 jne	 SHORT $LN15@ProcOpen@2

; 878  : 							{
; 879  : 								DataSend(i, (LPBYTE)&pMsg, pMsg.h.size);

  021cb	0f b6 45 f1	 movzx	 eax, BYTE PTR _pMsg$240580[ebp+1]
  021cf	50		 push	 eax
  021d0	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$240580[ebp]
  021d3	51		 push	 ecx
  021d4	8b 55 ec	 mov	 edx, DWORD PTR _i$240582[ebp]
  021d7	52		 push	 edx
  021d8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  021dd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@ProcOpen@2:

; 880  : 							}
; 881  : 						}
; 882  : 					}
; 883  : 				}

  021e0	e9 81 fe ff ff	 jmp	 $LN17@ProcOpen@2
$LN16@ProcOpen@2:

; 884  : 
; 885  : 				this->m_bSendTimeCount = TRUE;

  021e5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  021e8	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1
$LN19@ProcOpen@2:

; 886  : 			}
; 887  : 
; 888  : 			if (this->m_iremainTimeSec < 1 )

  021ef	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  021f2	83 78 10 01	 cmp	 DWORD PTR [eax+16], 1
  021f6	7d 12		 jge	 SHORT $LN20@ProcOpen@2

; 889  : 			{
; 890  : 				this->SendEventStartMsg();

  021f8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  021fb	e8 00 00 00 00	 call	 ?SendEventStartMsg@CDevilSquare@@AAEXXZ ; CDevilSquare::SendEventStartMsg

; 891  : 				this->SetState(DevilSquare_PLAYING);

  02200	6a 02		 push	 2
  02202	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02205	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
$LN20@ProcOpen@2:

; 892  : 			}
; 893  : 		
; 894  : 		}
; 895  : 	}
; 896  : 	else

  0220a	e9 6a 02 00 00	 jmp	 $LN22@ProcOpen@2
$LN21@ProcOpen@2:

; 897  : 	{
; 898  : 		if ( this->m_iTime < GetTickCount() )

  0220f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02215	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02218	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  0221b	0f 83 58 02 00
	00		 jae	 $LN22@ProcOpen@2

; 899  : 		{
; 900  : 			this->ClearMonstr();

  02221	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02224	e8 00 00 00 00	 call	 ?ClearMonstr@CDevilSquare@@QAEXXZ ; CDevilSquare::ClearMonstr

; 901  : 			this->m_iRemainTime--;

  02229	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0222c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0222f	83 e9 01	 sub	 ecx, 1
  02232	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02235	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 902  : 
; 903  : 			if ( this->m_iRemainTime > 0 )

  02238	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0223b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0223f	0f 8e f9 01 00
	00		 jle	 $LN9@ProcOpen@2

; 904  : 			{
; 905  : 				PMSG_NOTICE pNotice;
; 906  : 
; 907  : 				TNotice::MakeNoticeMsgEx(&pNotice, 0, lMsg.Get(MSGGET(2, 193)), this->m_iRemainTime);

  02245	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02248	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0224b	51		 push	 ecx
  0224c	68 c1 02 00 00	 push	 705			; 000002c1H
  02251	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02256	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0225b	50		 push	 eax
  0225c	6a 00		 push	 0
  0225e	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$240594[ebp]
  02264	52		 push	 edx
  02265	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  0226a	83 c4 10	 add	 esp, 16			; 00000010H

; 908  : 
; 909  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0226d	c7 85 d8 fe ff
	ff b0 36 00 00	 mov	 DWORD PTR _i$240595[ebp], 14000 ; 000036b0H
  02277	eb 0f		 jmp	 SHORT $LN8@ProcOpen@2
$LN7@ProcOpen@2:
  02279	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240595[ebp]
  0227f	83 c0 01	 add	 eax, 1
  02282	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _i$240595[ebp], eax
$LN8@ProcOpen@2:
  02288	81 bd d8 fe ff
	ff 98 3a 00 00	 cmp	 DWORD PTR _i$240595[ebp], 15000 ; 00003a98H
  02292	0f 8d 8a 01 00
	00		 jge	 $LN6@ProcOpen@2

; 910  : 				{
; 911  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  02298	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240595[ebp]
  0229e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  022a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  022aa	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  022af	0f 85 68 01 00
	00		 jne	 $LN5@ProcOpen@2
  022b5	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240595[ebp]
  022bb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  022c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  022c7	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  022cc	83 fa 01	 cmp	 edx, 1
  022cf	0f 85 48 01 00
	00		 jne	 $LN5@ProcOpen@2

; 912  : 					{
; 913  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  022d5	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240595[ebp]
  022db	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  022e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  022e7	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  022ef	83 fa 34	 cmp	 edx, 52			; 00000034H
  022f2	75 0c		 jne	 SHORT $LN34@ProcOpen@2
  022f4	c7 85 94 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv222[ebp], 1
  022fe	eb 5f		 jmp	 SHORT $LN35@ProcOpen@2
$LN34@ProcOpen@2:
  02300	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240595[ebp]
  02306	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0230c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02312	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0231a	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  0231d	7d 0c		 jge	 SHORT $LN32@ProcOpen@2
  0231f	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv221[ebp], 0
  02329	eb 28		 jmp	 SHORT $LN33@ProcOpen@2
$LN32@ProcOpen@2:
  0232b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240595[ebp]
  02331	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02337	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0233d	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02345	33 c0		 xor	 eax, eax
  02347	83 fa 11	 cmp	 edx, 17			; 00000011H
  0234a	0f 9e c0	 setle	 al
  0234d	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv221[ebp], eax
$LN33@ProcOpen@2:
  02353	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR tv221[ebp]
  02359	89 8d 94 fe ff
	ff		 mov	 DWORD PTR tv222[ebp], ecx
$LN35@ProcOpen@2:
  0235f	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR tv222[ebp], 0
  02366	0f 85 b1 00 00
	00		 jne	 $LN5@ProcOpen@2

; 914  : 						{
; 915  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  0236c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240595[ebp]
  02372	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02378	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0237e	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02386	83 fa 35	 cmp	 edx, 53			; 00000035H
  02389	75 0c		 jne	 SHORT $LN38@ProcOpen@2
  0238b	c7 85 94 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv241[ebp], 1
  02395	eb 5f		 jmp	 SHORT $LN39@ProcOpen@2
$LN38@ProcOpen@2:
  02397	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240595[ebp]
  0239d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  023a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  023a9	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  023b1	83 fa 12	 cmp	 edx, 18			; 00000012H
  023b4	7d 0c		 jge	 SHORT $LN36@ProcOpen@2
  023b6	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv240[ebp], 0
  023c0	eb 28		 jmp	 SHORT $LN37@ProcOpen@2
$LN36@ProcOpen@2:
  023c2	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240595[ebp]
  023c8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  023ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  023d4	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  023dc	33 c0		 xor	 eax, eax
  023de	83 fa 17	 cmp	 edx, 23			; 00000017H
  023e1	0f 9e c0	 setle	 al
  023e4	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv240[ebp], eax
$LN37@ProcOpen@2:
  023ea	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR tv240[ebp]
  023f0	89 8d 94 fe ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
$LN39@ProcOpen@2:
  023f6	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR tv241[ebp], 0
  023fd	75 1e		 jne	 SHORT $LN5@ProcOpen@2

; 916  : 							{
; 917  : 								DataSend(i, (LPBYTE)&pNotice, pNotice.h.size);

  023ff	0f b6 85 dd fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$240594[ebp+1]
  02406	50		 push	 eax
  02407	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$240594[ebp]
  0240d	51		 push	 ecx
  0240e	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _i$240595[ebp]
  02414	52		 push	 edx
  02415	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0241a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@ProcOpen@2:

; 918  : 							}
; 919  : 						}
; 920  : 					}
; 921  : 				}

  0241d	e9 57 fe ff ff	 jmp	 $LN7@ProcOpen@2
$LN6@ProcOpen@2:

; 922  : 
; 923  : 				LogAddTD((char*)pNotice.Notice);

  02422	8d 85 e9 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$240594[ebp+13]
  02428	50		 push	 eax
  02429	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0242f	83 c4 04	 add	 esp, 4

; 924  : 
; 925  : 				this->m_iTime = GetTickCount();

  02432	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02438	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0243b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN9@ProcOpen@2:

; 926  : 			}
; 927  : 
; 928  : 			if (this->m_iRemainTime == 1 && this->m_iremainTimeSec == -1)

  0243e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02441	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  02445	75 21		 jne	 SHORT $LN2@ProcOpen@2
  02447	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0244a	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  0244e	75 18		 jne	 SHORT $LN2@ProcOpen@2

; 929  : 			{
; 930  : 				this->m_iremainTimeSec = 60;

  02450	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02453	c7 40 10 3c 00
	00 00		 mov	 DWORD PTR [eax+16], 60	; 0000003cH

; 931  : 				this->m_iTime = GetTickCount();

  0245a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02460	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02463	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 932  : 			}
; 933  : 			else

  02466	eb 11		 jmp	 SHORT $LN22@ProcOpen@2
$LN2@ProcOpen@2:

; 934  : 			{
; 935  : 				this->m_iTime = GetTickCount() + 60000;

  02468	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0246e	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  02473	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02476	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN22@ProcOpen@2:

; 936  : 			}
; 937  : 		}
; 938  : 	}
; 939  : }

  02479	5f		 pop	 edi
  0247a	5e		 pop	 esi
  0247b	5b		 pop	 ebx
  0247c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0247f	33 cd		 xor	 ecx, ebp
  02481	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02486	8b e5		 mov	 esp, ebp
  02488	5d		 pop	 ebp
  02489	c3		 ret	 0
?ProcOpen@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ProcOpen
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?RegenBossMonster@CDevilSquareGround@@QAEXH@Z:PROC ; CDevilSquareGround::RegenBossMonster
EXTRN	?AllSendSameMapMsg@@YAXPAEHE@Z:PROC		; AllSendSameMapMsg
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv139 = -364						; size = 4
_i$240631 = -296					; size = 4
_pNotice$240627 = -292					; size = 272
_i$240615 = -20						; size = 4
_pMsg$240613 = -16					; size = 4
_lc2$240610 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcPlaying@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ProcPlaying
; _this$ = ecx

; 942  : {

  02490	55		 push	 ebp
  02491	8b ec		 mov	 ebp, esp
  02493	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  02499	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0249e	33 c5		 xor	 eax, ebp
  024a0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  024a3	53		 push	 ebx
  024a4	56		 push	 esi
  024a5	57		 push	 edi
  024a6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 943  : 	if ( this->m_iremainTimeSec != -1 )

  024a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  024ac	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  024b0	0f 84 58 01 00
	00		 je	 $LN18@ProcPlayin

; 944  : 	{
; 945  : 		int lc2 = (GetTickCount() - this->m_iTime)/1000;

  024b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  024bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  024bf	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  024c2	33 d2		 xor	 edx, edx
  024c4	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  024c9	f7 f1		 div	 ecx
  024cb	89 45 f4	 mov	 DWORD PTR _lc2$240610[ebp], eax

; 946  : 
; 947  : 		if ( lc2 != 0 )

  024ce	83 7d f4 00	 cmp	 DWORD PTR _lc2$240610[ebp], 0
  024d2	0f 84 31 01 00
	00		 je	 $LN17@ProcPlayin

; 948  : 		{
; 949  : 			this->m_iremainTimeSec -= lc2;

  024d8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  024db	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  024de	2b 4d f4	 sub	 ecx, DWORD PTR _lc2$240610[ebp]
  024e1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  024e4	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 950  : 			this->m_iTime += lc2 * 1000;

  024e7	8b 45 f4	 mov	 eax, DWORD PTR _lc2$240610[ebp]
  024ea	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  024f0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  024f3	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  024f6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  024f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 951  : 
; 952  : 			if ( this->m_iremainTimeSec <= 30 && this->m_bSendTimeCount == FALSE )

  024fc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  024ff	83 78 10 1e	 cmp	 DWORD PTR [eax+16], 30	; 0000001eH
  02503	0f 8f ed 00 00
	00		 jg	 $LN16@ProcPlayin
  02509	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0250c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  02510	0f 85 e0 00 00
	00		 jne	 $LN16@ProcPlayin

; 953  : 			{
; 954  : 				PMSG_SET_DEVILSQUARE pMsg;
; 955  : 
; 956  : 				PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  02516	6a 04		 push	 4
  02518	68 92 00 00 00	 push	 146			; 00000092H
  0251d	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$240613[ebp]
  02520	50		 push	 eax
  02521	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  02526	83 c4 0c	 add	 esp, 12			; 0000000cH

; 957  : 				pMsg.Type = DevilSquare_PLAYING;

  02529	c6 45 f3 02	 mov	 BYTE PTR _pMsg$240613[ebp+3], 2

; 958  : 
; 959  : 				for(int i = 0; i < OBJMAX; i++)

  0252d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$240615[ebp], 0
  02534	eb 09		 jmp	 SHORT $LN15@ProcPlayin
$LN14@ProcPlayin:
  02536	8b 45 ec	 mov	 eax, DWORD PTR _i$240615[ebp]
  02539	83 c0 01	 add	 eax, 1
  0253c	89 45 ec	 mov	 DWORD PTR _i$240615[ebp], eax
$LN15@ProcPlayin:
  0253f	81 7d ec 98 3a
	00 00		 cmp	 DWORD PTR _i$240615[ebp], 15000 ; 00003a98H
  02546	0f 8d a0 00 00
	00		 jge	 $LN13@ProcPlayin

; 960  : 				{
; 961  : 					if(gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  0254c	8b 45 ec	 mov	 eax, DWORD PTR _i$240615[ebp]
  0254f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02555	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0255b	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  02560	0f 85 81 00 00
	00		 jne	 $LN12@ProcPlayin
  02566	8b 45 ec	 mov	 eax, DWORD PTR _i$240615[ebp]
  02569	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0256f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02575	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0257a	83 fa 01	 cmp	 edx, 1
  0257d	75 68		 jne	 SHORT $LN12@ProcPlayin

; 962  : 					{
; 963  : 						if(DS_MAP_RANGE(gObj[i].MapNumber) != FALSE)

  0257f	8b 45 ec	 mov	 eax, DWORD PTR _i$240615[ebp]
  02582	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02588	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0258e	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02596	83 fa 09	 cmp	 edx, 9
  02599	75 0c		 jne	 SHORT $LN21@ProcPlayin
  0259b	c7 85 94 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv139[ebp], 1
  025a5	eb 25		 jmp	 SHORT $LN22@ProcPlayin
$LN21@ProcPlayin:
  025a7	8b 45 ec	 mov	 eax, DWORD PTR _i$240615[ebp]
  025aa	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  025b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  025b6	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  025be	33 c0		 xor	 eax, eax
  025c0	83 fa 20	 cmp	 edx, 32			; 00000020H
  025c3	0f 94 c0	 sete	 al
  025c6	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
$LN22@ProcPlayin:
  025cc	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR tv139[ebp], 0
  025d3	74 12		 je	 SHORT $LN12@ProcPlayin

; 964  : 						{
; 965  : 							DataSend(i, (LPBYTE)&pMsg, sizeof(pMsg));

  025d5	6a 04		 push	 4
  025d7	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$240613[ebp]
  025da	50		 push	 eax
  025db	8b 4d ec	 mov	 ecx, DWORD PTR _i$240615[ebp]
  025de	51		 push	 ecx
  025df	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  025e4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@ProcPlayin:

; 966  : 						}
; 967  : 					}
; 968  : 				}

  025e7	e9 4a ff ff ff	 jmp	 $LN14@ProcPlayin
$LN13@ProcPlayin:

; 969  : 				
; 970  : 				this->m_bSendTimeCount = TRUE;

  025ec	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  025ef	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1
$LN16@ProcPlayin:

; 971  : 			}
; 972  : 
; 973  : 			if ( this->m_iremainTimeSec < 1 )

  025f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  025f9	83 78 10 01	 cmp	 DWORD PTR [eax+16], 1
  025fd	7d 0a		 jge	 SHORT $LN17@ProcPlayin

; 974  : 			{
; 975  : 				this->SetState(DevilSquare_CLOSE);

  025ff	6a 00		 push	 0
  02601	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02604	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
$LN17@ProcPlayin:

; 976  : 			}
; 977  : 		}
; 978  : 	}
; 979  : 	else

  02609	e9 17 01 00 00	 jmp	 $LN19@ProcPlayin
$LN18@ProcPlayin:

; 980  : 	{
; 981  : 		if ( this->m_iTime < GetTickCount() )

  0260e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02614	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02617	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  0261a	0f 83 05 01 00
	00		 jae	 $LN19@ProcPlayin

; 982  : 		{
; 983  : 			this->m_iRemainTime--;

  02620	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02623	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02626	83 e9 01	 sub	 ecx, 1
  02629	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0262c	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 984  : 
; 985  : 			if ( this->m_iRemainTime > 0 )

  0262f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02632	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  02636	0f 8e e9 00 00
	00		 jle	 $LN19@ProcPlayin

; 986  : 			{
; 987  : 				if ( (this->m_iRemainTime%5) == 0 )

  0263c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0263f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  02642	99		 cdq
  02643	b9 05 00 00 00	 mov	 ecx, 5
  02648	f7 f9		 idiv	 ecx
  0264a	85 d2		 test	 edx, edx
  0264c	75 51		 jne	 SHORT $LN6@ProcPlayin

; 988  : 				{
; 989  : 					PMSG_NOTICE pNotice;
; 990  : 
; 991  : 					TNotice::MakeNoticeMsgEx((TNotice *)&pNotice, 0, lMsg.Get(MSGGET(2, 194)), this->m_iRemainTime);

  0264e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02651	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02654	51		 push	 ecx
  02655	68 c2 02 00 00	 push	 706			; 000002c2H
  0265a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0265f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02664	50		 push	 eax
  02665	6a 00		 push	 0
  02667	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$240627[ebp]
  0266d	52		 push	 edx
  0266e	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  02673	83 c4 10	 add	 esp, 16			; 00000010H

; 992  : 					LogAddTD((char*)pNotice.Notice);

  02676	8d 85 e9 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$240627[ebp+13]
  0267c	50		 push	 eax
  0267d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02683	83 c4 04	 add	 esp, 4

; 993  : 					AllSendSameMapMsg((LPBYTE)&pNotice, pNotice.h.size, MAP_INDEX_DEVILSQUARE);

  02686	6a 09		 push	 9
  02688	0f b6 85 dd fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$240627[ebp+1]
  0268f	50		 push	 eax
  02690	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$240627[ebp]
  02696	51		 push	 ecx
  02697	e8 00 00 00 00	 call	 ?AllSendSameMapMsg@@YAXPAEHE@Z ; AllSendSameMapMsg
  0269c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@ProcPlayin:

; 994  : 				}
; 995  : 
; 996  : 				for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)

  0269f	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$240631[ebp], 0
  026a9	eb 0f		 jmp	 SHORT $LN5@ProcPlayin
$LN4@ProcPlayin:
  026ab	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240631[ebp]
  026b1	83 c0 01	 add	 eax, 1
  026b4	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _i$240631[ebp], eax
$LN5@ProcPlayin:
  026ba	83 bd d8 fe ff
	ff 07		 cmp	 DWORD PTR _i$240631[ebp], 7
  026c1	7d 27		 jge	 SHORT $LN3@ProcPlayin

; 997  : 				{
; 998  : 					this->m_DevilSquareGround[i].RegenBossMonster(this->m_iPlaytime - this->m_iRemainTime);

  026c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  026c9	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  026cc	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  026cf	52		 push	 edx
  026d0	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$240631[ebp]
  026d6	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  026dc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  026df	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  026e3	e8 00 00 00 00	 call	 ?RegenBossMonster@CDevilSquareGround@@QAEXH@Z ; CDevilSquareGround::RegenBossMonster

; 999  : 				}

  026e8	eb c1		 jmp	 SHORT $LN4@ProcPlayin
$LN3@ProcPlayin:

; 1000 : 
; 1001 : 				if ( this->m_iRemainTime == 1 && this->m_iremainTimeSec == -1 )

  026ea	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026ed	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  026f1	75 21		 jne	 SHORT $LN2@ProcPlayin
  026f3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026f6	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  026fa	75 18		 jne	 SHORT $LN2@ProcPlayin

; 1002 : 				{
; 1003 : 					this->m_iremainTimeSec = 60;

  026fc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026ff	c7 40 10 3c 00
	00 00		 mov	 DWORD PTR [eax+16], 60	; 0000003cH

; 1004 : 					this->m_iTime = GetTickCount();

  02706	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0270c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0270f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1005 : 				}
; 1006 : 				else

  02712	eb 11		 jmp	 SHORT $LN19@ProcPlayin
$LN2@ProcPlayin:

; 1007 : 				{
; 1008 : 					this->m_iTime = GetTickCount() + 60000;

  02714	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0271a	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  0271f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02722	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN19@ProcPlayin:

; 1009 : 				}
; 1010 : 			}
; 1011 : 		}
; 1012 : 	}
; 1013 : }

  02725	5f		 pop	 edi
  02726	5e		 pop	 esi
  02727	5b		 pop	 ebx
  02728	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0272b	33 cd		 xor	 ecx, ebp
  0272d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02732	8b e5		 mov	 esp, ebp
  02734	5d		 pop	 ebp
  02735	c3		 ret	 0
?ProcPlaying@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ProcPlaying
_TEXT	ENDS
PUBLIC	??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@ ; `string'
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
;	COMDAT ??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@
CONST	SEGMENT
??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@ DB '['
	DB	'DevilSquare] [%d] Invalid MonterType', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv77 = -88						; size = 4
_btDSIndex$240647 = -17					; size = 1
_wMonIndex$240646 = -16					; size = 2
_n$240641 = -12						; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
?SetMonster@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::SetMonster
; _this$ = ecx

; 1016 : {

  02740	55		 push	 ebp
  02741	8b ec		 mov	 ebp, esp
  02743	83 ec 58	 sub	 esp, 88			; 00000058H
  02746	53		 push	 ebx
  02747	56		 push	 esi
  02748	57		 push	 edi
  02749	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1017 : 	int result;
; 1018 : 
; 1019 : 	for ( int n=0;n<gMSetBase.m_Count;n++)

  0274c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$240641[ebp], 0
  02753	eb 09		 jmp	 SHORT $LN19@SetMonster
$LN18@SetMonster:
  02755	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  02758	83 c0 01	 add	 eax, 1
  0275b	89 45 f4	 mov	 DWORD PTR _n$240641[ebp], eax
$LN19@SetMonster:
  0275e	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  02761	3b 05 84 2c 03
	00		 cmp	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  02767	0f 8d 99 01 00
	00		 jge	 $LN20@SetMonster

; 1020 : 	{
; 1021 : 		if ( DS_MAP_RANGE(gMSetBase.m_Mp[n].m_MapNumber) != FALSE )

  0276d	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  02770	c1 e0 04	 shl	 eax, 4
  02773	0f b6 88 08 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+8]
  0277a	83 f9 09	 cmp	 ecx, 9
  0277d	75 09		 jne	 SHORT $LN22@SetMonster
  0277f	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  02786	eb 18		 jmp	 SHORT $LN23@SetMonster
$LN22@SetMonster:
  02788	8b 55 f4	 mov	 edx, DWORD PTR _n$240641[ebp]
  0278b	c1 e2 04	 shl	 edx, 4
  0278e	0f b6 82 08 00
	00 00		 movzx	 eax, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+8]
  02795	33 c9		 xor	 ecx, ecx
  02797	83 f8 20	 cmp	 eax, 32			; 00000020H
  0279a	0f 94 c1	 sete	 cl
  0279d	89 4d a8	 mov	 DWORD PTR tv77[ebp], ecx
$LN23@SetMonster:
  027a0	83 7d a8 00	 cmp	 DWORD PTR tv77[ebp], 0
  027a4	0f 84 57 01 00
	00		 je	 $LN16@SetMonster

; 1022 : 		{
; 1023 : 			WORD wMonIndex = gMSetBase.m_Mp[n].m_Type;

  027aa	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  027ad	c1 e0 04	 shl	 eax, 4
  027b0	66 8b 88 06 00
	00 00		 mov	 cx, WORD PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+6]
  027b7	66 89 4d f0	 mov	 WORD PTR _wMonIndex$240646[ebp], cx

; 1024 : 			BYTE btDSIndex = -1;

  027bb	c6 45 ef ff	 mov	 BYTE PTR _btDSIndex$240647[ebp], 255 ; 000000ffH

; 1025 : 
; 1026 : 			if ( gMSetBase.m_Mp[n].m_X == 119 )

  027bf	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  027c2	c1 e0 04	 shl	 eax, 4
  027c5	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+10]
  027cc	83 f9 77	 cmp	 ecx, 119		; 00000077H
  027cf	75 09		 jne	 SHORT $LN15@SetMonster

; 1027 : 			{
; 1028 : 				btDSIndex = DEVIL_SQUARE_GROUND_1;

  027d1	c6 45 ef 00	 mov	 BYTE PTR _btDSIndex$240647[ebp], 0
  027d5	e9 8e 00 00 00	 jmp	 $LN14@SetMonster
$LN15@SetMonster:

; 1029 : 			}
; 1030 : 			else if ( gMSetBase.m_Mp[n].m_X == 121 )

  027da	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  027dd	c1 e0 04	 shl	 eax, 4
  027e0	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+10]
  027e7	83 f9 79	 cmp	 ecx, 121		; 00000079H
  027ea	75 06		 jne	 SHORT $LN13@SetMonster

; 1031 : 			{
; 1032 : 				btDSIndex = DEVIL_SQUARE_GROUND_2;

  027ec	c6 45 ef 01	 mov	 BYTE PTR _btDSIndex$240647[ebp], 1
  027f0	eb 76		 jmp	 SHORT $LN14@SetMonster
$LN13@SetMonster:

; 1033 : 			}
; 1034 : 			else if ( gMSetBase.m_Mp[n].m_X == 49 )

  027f2	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  027f5	c1 e0 04	 shl	 eax, 4
  027f8	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+10]
  027ff	83 f9 31	 cmp	 ecx, 49			; 00000031H
  02802	75 06		 jne	 SHORT $LN11@SetMonster

; 1035 : 			{
; 1036 : 				btDSIndex = DEVIL_SQUARE_GROUND_3;

  02804	c6 45 ef 02	 mov	 BYTE PTR _btDSIndex$240647[ebp], 2
  02808	eb 5e		 jmp	 SHORT $LN14@SetMonster
$LN11@SetMonster:

; 1037 : 			}
; 1038 : 			else if ( gMSetBase.m_Mp[n].m_X == 53 )

  0280a	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  0280d	c1 e0 04	 shl	 eax, 4
  02810	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+10]
  02817	83 f9 35	 cmp	 ecx, 53			; 00000035H
  0281a	75 06		 jne	 SHORT $LN9@SetMonster

; 1039 : 			{
; 1040 : 				btDSIndex = DEVIL_SQUARE_GROUND_4;

  0281c	c6 45 ef 03	 mov	 BYTE PTR _btDSIndex$240647[ebp], 3
  02820	eb 46		 jmp	 SHORT $LN14@SetMonster
$LN9@SetMonster:

; 1041 : 			}
; 1042 : 			else if ( gMSetBase.m_Mp[n].m_X == 120 )

  02822	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  02825	c1 e0 04	 shl	 eax, 4
  02828	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+10]
  0282f	83 f9 78	 cmp	 ecx, 120		; 00000078H
  02832	75 06		 jne	 SHORT $LN7@SetMonster

; 1043 : 			{
; 1044 : 				btDSIndex = DEVIL_SQUARE_GROUND_5;

  02834	c6 45 ef 04	 mov	 BYTE PTR _btDSIndex$240647[ebp], 4
  02838	eb 2e		 jmp	 SHORT $LN14@SetMonster
$LN7@SetMonster:

; 1045 : 			}
; 1046 : 			else if ( gMSetBase.m_Mp[n].m_X == 122 )

  0283a	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  0283d	c1 e0 04	 shl	 eax, 4
  02840	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+10]
  02847	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  0284a	75 06		 jne	 SHORT $LN5@SetMonster

; 1047 : 			{
; 1048 : 				btDSIndex = DEVIL_SQUARE_GROUND_6;

  0284c	c6 45 ef 05	 mov	 BYTE PTR _btDSIndex$240647[ebp], 5
  02850	eb 16		 jmp	 SHORT $LN14@SetMonster
$LN5@SetMonster:

; 1049 : 			}
; 1050 : 			else if ( gMSetBase.m_Mp[n].m_X == 50 )

  02852	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  02855	c1 e0 04	 shl	 eax, 4
  02858	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+10]
  0285f	83 f9 32	 cmp	 ecx, 50			; 00000032H
  02862	75 04		 jne	 SHORT $LN14@SetMonster

; 1051 : 			{
; 1052 : 				btDSIndex = DEVIL_SQUARE_GROUND_7;

  02864	c6 45 ef 06	 mov	 BYTE PTR _btDSIndex$240647[ebp], 6
$LN14@SetMonster:

; 1053 : 			}
; 1054 : 
; 1055 : 			if ( btDSIndex == 0xFF )

  02868	0f b6 45 ef	 movzx	 eax, BYTE PTR _btDSIndex$240647[ebp]
  0286c	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  02871	75 18		 jne	 SHORT $LN2@SetMonster

; 1056 : 			{
; 1057 : 				LogAddTD("[DevilSquare] [%d] Invalid MonterType", wMonIndex);

  02873	0f b7 45 f0	 movzx	 eax, WORD PTR _wMonIndex$240646[ebp]
  02877	50		 push	 eax
  02878	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@
  0287d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02883	83 c4 08	 add	 esp, 8

; 1058 : 				continue;

  02886	e9 ca fe ff ff	 jmp	 $LN18@SetMonster
$LN2@SetMonster:

; 1059 : 			}
; 1060 : 
; 1061 : 			result = gObjAddMonster(gMSetBase.m_Mp[n].m_MapNumber);

  0288b	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  0288e	c1 e0 04	 shl	 eax, 4
  02891	0f b6 88 08 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+8]
  02898	51		 push	 ecx
  02899	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0289e	83 c4 04	 add	 esp, 4
  028a1	0f bf d0	 movsx	 edx, ax
  028a4	89 55 f8	 mov	 DWORD PTR _result$[ebp], edx

; 1062 : 
; 1063 : 			if ( result >= 0 )

  028a7	83 7d f8 00	 cmp	 DWORD PTR _result$[ebp], 0
  028ab	7c 54		 jl	 SHORT $LN16@SetMonster

; 1064 : 			{
; 1065 : 				gObjSetPosMonster(result, n);

  028ad	8b 45 f4	 mov	 eax, DWORD PTR _n$240641[ebp]
  028b0	50		 push	 eax
  028b1	8b 4d f8	 mov	 ecx, DWORD PTR _result$[ebp]
  028b4	51		 push	 ecx
  028b5	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster
  028ba	83 c4 08	 add	 esp, 8

; 1066 : 				gObjSetMonster(result, wMonIndex); 

  028bd	0f b7 45 f0	 movzx	 eax, WORD PTR _wMonIndex$240646[ebp]
  028c1	50		 push	 eax
  028c2	8b 4d f8	 mov	 ecx, DWORD PTR _result$[ebp]
  028c5	51		 push	 ecx
  028c6	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  028cb	83 c4 08	 add	 esp, 8

; 1067 : 				gObj[result].MaxRegenTime = 1000;	// Rgeneration in 1 second

  028ce	8b 45 f8	 mov	 eax, DWORD PTR _result$[ebp]
  028d1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  028d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  028dd	c7 84 01 ac 03
	00 00 e8 03 00
	00		 mov	 DWORD PTR [ecx+eax+940], 1000 ; 000003e8H

; 1068 : 				gObj[result].m_bDevilSquareIndex = btDSIndex;

  028e8	8b 45 f8	 mov	 eax, DWORD PTR _result$[ebp]
  028eb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  028f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  028f7	8a 55 ef	 mov	 dl, BYTE PTR _btDSIndex$240647[ebp]
  028fa	88 94 01 9c 0e
	00 00		 mov	 BYTE PTR [ecx+eax+3740], dl
$LN16@SetMonster:

; 1069 : 			}
; 1070 : 		}
; 1071 : 	}

  02901	e9 4f fe ff ff	 jmp	 $LN18@SetMonster
$LN20@SetMonster:

; 1072 : }

  02906	5f		 pop	 edi
  02907	5e		 pop	 esi
  02908	5b		 pop	 ebx
  02909	8b e5		 mov	 esp, ebp
  0290b	5d		 pop	 ebp
  0290c	c3		 ret	 0
?SetMonster@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::SetMonster
_TEXT	ENDS
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv77 = -76						; size = 4
_n$240667 = -8						; size = 4
_this$ = -4						; size = 4
?ClearMonstr@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::ClearMonstr
; _this$ = ecx

; 1075 : {

  02910	55		 push	 ebp
  02911	8b ec		 mov	 ebp, esp
  02913	83 ec 4c	 sub	 esp, 76			; 0000004cH
  02916	53		 push	 ebx
  02917	56		 push	 esi
  02918	57		 push	 edi
  02919	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1076 : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  0291c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$240667[ebp], 0
  02923	eb 09		 jmp	 SHORT $LN4@ClearMonst
$LN3@ClearMonst:
  02925	8b 45 f8	 mov	 eax, DWORD PTR _n$240667[ebp]
  02928	83 c0 01	 add	 eax, 1
  0292b	89 45 f8	 mov	 DWORD PTR _n$240667[ebp], eax
$LN4@ClearMonst:
  0292e	81 7d f8 c8 32
	00 00		 cmp	 DWORD PTR _n$240667[ebp], 13000 ; 000032c8H
  02935	7d 5b		 jge	 SHORT $LN5@ClearMonst

; 1077 : 	{
; 1078 : 		if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  02937	8b 45 f8	 mov	 eax, DWORD PTR _n$240667[ebp]
  0293a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02940	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02946	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0294e	83 fa 09	 cmp	 edx, 9
  02951	75 09		 jne	 SHORT $LN7@ClearMonst
  02953	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0295a	eb 22		 jmp	 SHORT $LN8@ClearMonst
$LN7@ClearMonst:
  0295c	8b 45 f8	 mov	 eax, DWORD PTR _n$240667[ebp]
  0295f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02965	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0296b	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02973	33 c0		 xor	 eax, eax
  02975	83 fa 20	 cmp	 edx, 32			; 00000020H
  02978	0f 94 c0	 sete	 al
  0297b	89 45 b4	 mov	 DWORD PTR tv77[ebp], eax
$LN8@ClearMonst:
  0297e	83 7d b4 00	 cmp	 DWORD PTR tv77[ebp], 0
  02982	74 0c		 je	 SHORT $LN1@ClearMonst

; 1079 : 		{
; 1080 : 			gObjDel(n);

  02984	8b 45 f8	 mov	 eax, DWORD PTR _n$240667[ebp]
  02987	50		 push	 eax
  02988	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0298d	83 c4 04	 add	 esp, 4
$LN1@ClearMonst:

; 1081 : 		}
; 1082 : 	}

  02990	eb 93		 jmp	 SHORT $LN3@ClearMonst
$LN5@ClearMonst:

; 1083 : }

  02992	5f		 pop	 edi
  02993	5e		 pop	 esi
  02994	5b		 pop	 ebx
  02995	8b e5		 mov	 esp, ebp
  02997	5d		 pop	 ebp
  02998	c3		 ret	 0
?ClearMonstr@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::ClearMonstr
_TEXT	ENDS
PUBLIC	??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@ ; `string'
PUBLIC	??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@ ; `string'
PUBLIC	?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquare::gDevilSquareMonsterRegen
EXTRN	?CreateFrustrum@@YAXHHH@Z:PROC			; CreateFrustrum
EXTRN	?gObjMonsterRegen@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjMonsterRegen
EXTRN	?Clear@CMagicInf@@QAEXXZ:PROC			; CMagicInf::Clear
EXTRN	?GetMonsterType@CDevilSquareGround@@QAEGH@Z:PROC ; CDevilSquareGround::GetMonsterType
;	COMDAT ??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@
CONST	SEGMENT
??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@ DB '['
	DB	'DevilSquare] Monter Regen [%d][%d][%d,%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@
CONST	SEGMENT
??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@ DB '[DevilSq'
	DB	'uare] Invalid DevilSquareIndex [%d]', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$240684 = -16						; size = 4
_monstertype$ = -12					; size = 2
_devilsquareindex$ = -5					; size = 1
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquare::gDevilSquareMonsterRegen
; _this$ = ecx

; 1086 : {

  029a0	55		 push	 ebp
  029a1	8b ec		 mov	 ebp, esp
  029a3	83 ec 50	 sub	 esp, 80			; 00000050H
  029a6	53		 push	 ebx
  029a7	56		 push	 esi
  029a8	57		 push	 edi
  029a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1087 : 	BYTE devilsquareindex = lpObj->m_bDevilSquareIndex;

  029ac	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029af	8a 88 9c 0e 00
	00		 mov	 cl, BYTE PTR [eax+3740]
  029b5	88 4d fb	 mov	 BYTE PTR _devilsquareindex$[ebp], cl

; 1088 : 
; 1089 : 	if ( devilsquareindex < 0 || devilsquareindex >= MAX_DEVILSQUARE_GROUND )

  029b8	0f b6 45 fb	 movzx	 eax, BYTE PTR _devilsquareindex$[ebp]
  029bc	85 c0		 test	 eax, eax
  029be	7c 09		 jl	 SHORT $LN6@gDevilSqua
  029c0	0f b6 45 fb	 movzx	 eax, BYTE PTR _devilsquareindex$[ebp]
  029c4	83 f8 07	 cmp	 eax, 7
  029c7	7c 18		 jl	 SHORT $LN7@gDevilSqua
$LN6@gDevilSqua:

; 1090 : 	{
; 1091 : 		LogAddTD("[DevilSquare] Invalid DevilSquareIndex [%d]", devilsquareindex);

  029c9	0f b6 45 fb	 movzx	 eax, BYTE PTR _devilsquareindex$[ebp]
  029cd	50		 push	 eax
  029ce	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@
  029d3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  029d9	83 c4 08	 add	 esp, 8

; 1092 : 		return;

  029dc	e9 31 01 00 00	 jmp	 $LN8@gDevilSqua
$LN7@gDevilSqua:

; 1093 : 	}
; 1094 : 
; 1095 : 	if ( lpObj->m_PosNum == -1 )

  029e1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029e4	0f bf 88 b0 03
	00 00		 movsx	 ecx, WORD PTR [eax+944]
  029eb	83 f9 ff	 cmp	 ecx, -1
  029ee	75 13		 jne	 SHORT $LN5@gDevilSqua

; 1096 : 	{
; 1097 : 		gObjDel(lpObj->m_Index);

  029f0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  029f5	51		 push	 ecx
  029f6	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  029fb	83 c4 04	 add	 esp, 4

; 1098 : 		return;

  029fe	e9 0f 01 00 00	 jmp	 $LN8@gDevilSqua
$LN5@gDevilSqua:

; 1099 : 	}
; 1100 : 
; 1101 : 	WORD monstertype = this->m_DevilSquareGround[devilsquareindex].GetMonsterType(this->m_iPlaytime - this->m_iRemainTime );

  02a03	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02a06	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a09	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  02a0c	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  02a0f	52		 push	 edx
  02a10	0f b6 45 fb	 movzx	 eax, BYTE PTR _devilsquareindex$[ebp]
  02a14	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  02a1a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a1d	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  02a21	e8 00 00 00 00	 call	 ?GetMonsterType@CDevilSquareGround@@QAEGH@Z ; CDevilSquareGround::GetMonsterType
  02a26	66 89 45 f4	 mov	 WORD PTR _monstertype$[ebp], ax

; 1102 : 
; 1103 : 	if ( monstertype == (BYTE)-1 )

  02a2a	0f b7 45 f4	 movzx	 eax, WORD PTR _monstertype$[ebp]
  02a2e	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  02a33	75 18		 jne	 SHORT $LN4@gDevilSqua

; 1104 : 	{
; 1105 : 		LogAddTD("[DevilSquare] [%d] Invalid MonterType", monstertype);

  02a35	0f b7 45 f4	 movzx	 eax, WORD PTR _monstertype$[ebp]
  02a39	50		 push	 eax
  02a3a	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@
  02a3f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02a45	83 c4 08	 add	 esp, 8

; 1106 : 		return;

  02a48	e9 c5 00 00 00	 jmp	 $LN8@gDevilSqua
$LN4@gDevilSqua:

; 1107 : 	}
; 1108 : 
; 1109 : 	for ( int n=0;n<MAX_MAGIC;n++)

  02a4d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$240684[ebp], 0
  02a54	eb 09		 jmp	 SHORT $LN3@gDevilSqua
$LN2@gDevilSqua:
  02a56	8b 45 f0	 mov	 eax, DWORD PTR _n$240684[ebp]
  02a59	83 c0 01	 add	 eax, 1
  02a5c	89 45 f0	 mov	 DWORD PTR _n$240684[ebp], eax
$LN3@gDevilSqua:
  02a5f	81 7d f0 96 00
	00 00		 cmp	 DWORD PTR _n$240684[ebp], 150 ; 00000096H
  02a66	7d 16		 jge	 SHORT $LN1@gDevilSqua

; 1110 : 	{
; 1111 : 		lpObj->Magic[n].Clear();

  02a68	8b 4d f0	 mov	 ecx, DWORD PTR _n$240684[ebp]
  02a6b	6b c9 18	 imul	 ecx, 24			; 00000018H
  02a6e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a71	03 88 c8 04 00
	00		 add	 ecx, DWORD PTR [eax+1224]
  02a77	e8 00 00 00 00	 call	 ?Clear@CMagicInf@@QAEXXZ ; CMagicInf::Clear

; 1112 : 	}

  02a7c	eb d8		 jmp	 SHORT $LN2@gDevilSqua
$LN1@gDevilSqua:

; 1113 : 
; 1114 : 	gObjSetMonster(lpObj->m_Index, monstertype);

  02a7e	0f b7 45 f4	 movzx	 eax, WORD PTR _monstertype$[ebp]
  02a82	50		 push	 eax
  02a83	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a86	8b 11		 mov	 edx, DWORD PTR [ecx]
  02a88	52		 push	 edx
  02a89	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  02a8e	83 c4 08	 add	 esp, 8

; 1115 : 	lpObj->DieRegen = FALSE;

  02a91	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a94	c6 80 a2 03 00
	00 00		 mov	 BYTE PTR [eax+930], 0

; 1116 : 	gObjMonsterRegen(lpObj);

  02a9b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02a9e	50		 push	 eax
  02a9f	e8 00 00 00 00	 call	 ?gObjMonsterRegen@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterRegen
  02aa4	83 c4 04	 add	 esp, 4

; 1117 : 	CreateFrustrum(lpObj->X, lpObj->Y, lpObj->m_Index);

  02aa7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02aaa	8b 08		 mov	 ecx, DWORD PTR [eax]
  02aac	51		 push	 ecx
  02aad	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02ab0	0f bf 82 46 01
	00 00		 movsx	 eax, WORD PTR [edx+326]
  02ab7	50		 push	 eax
  02ab8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02abb	0f bf 91 44 01
	00 00		 movsx	 edx, WORD PTR [ecx+324]
  02ac2	52		 push	 edx
  02ac3	e8 00 00 00 00	 call	 ?CreateFrustrum@@YAXHHH@Z ; CreateFrustrum
  02ac8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1118 : 	lpObj->m_bDevilSquareIndex = devilsquareindex;

  02acb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ace	8a 4d fb	 mov	 cl, BYTE PTR _devilsquareindex$[ebp]
  02ad1	88 88 9c 0e 00
	00		 mov	 BYTE PTR [eax+3740], cl

; 1119 : 	lpObj->MaxRegenTime = 1000;

  02ad7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ada	c7 80 ac 03 00
	00 e8 03 00 00	 mov	 DWORD PTR [eax+940], 1000 ; 000003e8H

; 1120 : 
; 1121 : 	LogAddTD("[DevilSquare] Monter Regen [%d][%d][%d,%d]", monstertype, devilsquareindex, lpObj->X, lpObj->Y);

  02ae4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ae7	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  02aee	51		 push	 ecx
  02aef	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02af2	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  02af9	50		 push	 eax
  02afa	0f b6 4d fb	 movzx	 ecx, BYTE PTR _devilsquareindex$[ebp]
  02afe	51		 push	 ecx
  02aff	0f b7 55 f4	 movzx	 edx, WORD PTR _monstertype$[ebp]
  02b03	52		 push	 edx
  02b04	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@
  02b09	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02b0f	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@gDevilSqua:

; 1122 : }

  02b12	5f		 pop	 edi
  02b13	5e		 pop	 esi
  02b14	5b		 pop	 ebx
  02b15	8b e5		 mov	 esp, ebp
  02b17	5d		 pop	 ebp
  02b18	c2 04 00	 ret	 4
?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquare::gDevilSquareMonsterRegen
_TEXT	ENDS
PUBLIC	??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@
CONST	SEGMENT
??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@ DB '[DevilSquar'
	DB	'e] Start Event', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv93 = -624						; size = 4
_n$240694 = -556					; size = 4
_pWithOutEvneter$ = -552				; size = 272
_pToEventer$ = -280					; size = 272
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?SendEventStartMsg@CDevilSquare@@AAEXXZ PROC		; CDevilSquare::SendEventStartMsg
; _this$ = ecx

; 1125 : {

  02b20	55		 push	 ebp
  02b21	8b ec		 mov	 ebp, esp
  02b23	81 ec 70 02 00
	00		 sub	 esp, 624		; 00000270H
  02b29	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  02b2e	33 c5		 xor	 eax, ebp
  02b30	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02b33	53		 push	 ebx
  02b34	56		 push	 esi
  02b35	57		 push	 edi
  02b36	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1126 : 	PMSG_NOTICE pToEventer;
; 1127 : 	PMSG_NOTICE pWithOutEvneter;
; 1128 : 
; 1129 : 	TNotice::MakeNoticeMsg(&pToEventer, 0, lMsg.Get(MSGGET(2, 195)));

  02b39	68 c3 02 00 00	 push	 707			; 000002c3H
  02b3e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02b43	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02b48	50		 push	 eax
  02b49	6a 00		 push	 0
  02b4b	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pToEventer$[ebp]
  02b51	50		 push	 eax
  02b52	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  02b57	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1130 : 	TNotice::MakeNoticeMsg(&pWithOutEvneter, 0, lMsg.Get(MSGGET(2, 196)));

  02b5a	68 c4 02 00 00	 push	 708			; 000002c4H
  02b5f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02b64	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02b69	50		 push	 eax
  02b6a	6a 00		 push	 0
  02b6c	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _pWithOutEvneter$[ebp]
  02b72	50		 push	 eax
  02b73	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  02b78	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1131 : 
; 1132 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  02b7b	c7 85 d4 fd ff
	ff b0 36 00 00	 mov	 DWORD PTR _n$240694[ebp], 14000 ; 000036b0H
  02b85	eb 0f		 jmp	 SHORT $LN6@SendEventS
$LN5@SendEventS:
  02b87	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _n$240694[ebp]
  02b8d	83 c0 01	 add	 eax, 1
  02b90	89 85 d4 fd ff
	ff		 mov	 DWORD PTR _n$240694[ebp], eax
$LN6@SendEventS:
  02b96	81 bd d4 fd ff
	ff 98 3a 00 00	 cmp	 DWORD PTR _n$240694[ebp], 15000 ; 00003a98H
  02ba0	0f 8d bc 00 00
	00		 jge	 $LN4@SendEventS

; 1133 : 	{
; 1134 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  02ba6	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _n$240694[ebp]
  02bac	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02bb2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02bb8	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  02bbd	0f 85 9a 00 00
	00		 jne	 $LN3@SendEventS

; 1135 : 		{
; 1136 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  02bc3	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _n$240694[ebp]
  02bc9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02bcf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02bd5	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02bdd	83 fa 09	 cmp	 edx, 9
  02be0	75 0c		 jne	 SHORT $LN9@SendEventS
  02be2	c7 85 90 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv93[ebp], 1
  02bec	eb 28		 jmp	 SHORT $LN10@SendEventS
$LN9@SendEventS:
  02bee	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _n$240694[ebp]
  02bf4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02bfa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02c00	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02c08	33 c0		 xor	 eax, eax
  02c0a	83 fa 20	 cmp	 edx, 32			; 00000020H
  02c0d	0f 94 c0	 sete	 al
  02c10	89 85 90 fd ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
$LN10@SendEventS:
  02c16	83 bd 90 fd ff
	ff 00		 cmp	 DWORD PTR tv93[ebp], 0
  02c1d	74 20		 je	 SHORT $LN2@SendEventS

; 1137 : 			{
; 1138 : 				DataSend(n, (LPBYTE)&pToEventer, pToEventer.h.size);

  02c1f	0f b6 85 e9 fe
	ff ff		 movzx	 eax, BYTE PTR _pToEventer$[ebp+1]
  02c26	50		 push	 eax
  02c27	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _pToEventer$[ebp]
  02c2d	51		 push	 ecx
  02c2e	8b 95 d4 fd ff
	ff		 mov	 edx, DWORD PTR _n$240694[ebp]
  02c34	52		 push	 edx
  02c35	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02c3a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1139 : 			}
; 1140 : 			else

  02c3d	eb 1e		 jmp	 SHORT $LN3@SendEventS
$LN2@SendEventS:

; 1141 : 			{
; 1142 : 				DataSend(n, (LPBYTE)&pWithOutEvneter, pWithOutEvneter.h.size);

  02c3f	0f b6 85 d9 fd
	ff ff		 movzx	 eax, BYTE PTR _pWithOutEvneter$[ebp+1]
  02c46	50		 push	 eax
  02c47	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _pWithOutEvneter$[ebp]
  02c4d	51		 push	 ecx
  02c4e	8b 95 d4 fd ff
	ff		 mov	 edx, DWORD PTR _n$240694[ebp]
  02c54	52		 push	 edx
  02c55	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02c5a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendEventS:

; 1143 : 			}
; 1144 : 		}
; 1145 : 	}

  02c5d	e9 25 ff ff ff	 jmp	 $LN5@SendEventS
$LN4@SendEventS:

; 1146 : 
; 1147 : 	LogAddTD("[DevilSquare] Start Event");

  02c62	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@
  02c67	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02c6d	83 c4 04	 add	 esp, 4

; 1148 : }

  02c70	5f		 pop	 edi
  02c71	5e		 pop	 esi
  02c72	5b		 pop	 ebx
  02c73	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02c76	33 cd		 xor	 ecx, ebp
  02c78	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02c7d	8b e5		 mov	 esp, ebp
  02c7f	5d		 pop	 ebp
  02c80	c3		 ret	 0
?SendEventStartMsg@CDevilSquare@@AAEXXZ ENDP		; CDevilSquare::SendEventStartMsg
_TEXT	ENDS
PUBLIC	??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquare::DieProcDevilSquare
EXTRN	_memcpy:PROC
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@
CONST	SEGMENT
??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@ DB '['
	DB	'DevilSquare] Dead [%s][%s][%d][%d]', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv128 = -372						; size = 4
_pMsg$ = -304						; size = 40
_msg$ = -264						; size = 255
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquare::DieProcDevilSquare
; _this$ = ecx

; 1151 : {

  02c90	55		 push	 ebp
  02c91	8b ec		 mov	 ebp, esp
  02c93	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  02c99	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  02c9e	33 c5		 xor	 eax, ebp
  02ca0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02ca3	53		 push	 ebx
  02ca4	56		 push	 esi
  02ca5	57		 push	 edi
  02ca6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1152 : 	char msg[255];
; 1153 : 
; 1154 : 	wsprintf(msg, lMsg.Get(MSGGET(2, 197)), lpObj->m_nEventScore);

  02ca9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02cac	8b 88 90 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3728]
  02cb2	51		 push	 ecx
  02cb3	68 c5 02 00 00	 push	 709			; 000002c5H
  02cb8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02cbd	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02cc2	50		 push	 eax
  02cc3	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _msg$[ebp]
  02cc9	52		 push	 edx
  02cca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  02cd0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1155 : 	GCServerMsgStringSend(msg, lpObj->m_Index, 1);

  02cd3	6a 01		 push	 1
  02cd5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02cd8	8b 08		 mov	 ecx, DWORD PTR [eax]
  02cda	51		 push	 ecx
  02cdb	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _msg$[ebp]
  02ce1	52		 push	 edx
  02ce2	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  02ce7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1156 : 
; 1157 : 	if ( lpObj->m_nEventScore <= 0 )

  02cea	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ced	83 b8 90 0e 00
	00 00		 cmp	 DWORD PTR [eax+3728], 0
  02cf4	7f 05		 jg	 SHORT $LN5@DieProcDev

; 1158 : 	{
; 1159 : 		return;

  02cf6	e9 ad 01 00 00	 jmp	 $LN6@DieProcDev
$LN5@DieProcDev:

; 1160 : 	}
; 1161 : 
; 1162 : 	PMSG_ANS_EVENTUSERSCORE pMsg;
; 1163 : 
; 1164 : 	pMsg.h.c = 0xC1;

  02cfb	c6 85 d0 fe ff
	ff c1		 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 1165 : 	pMsg.h.headcode = 0x01;

  02d02	c6 85 d2 fe ff
	ff 01		 mov	 BYTE PTR _pMsg$[ebp+2], 1

; 1166 : 	pMsg.h.size = sizeof(pMsg);

  02d09	c6 85 d1 fe ff
	ff 28		 mov	 BYTE PTR _pMsg$[ebp+1], 40 ; 00000028H

; 1167 : 	pMsg.SquareNum = lpObj->m_bDevilSquareIndex;

  02d10	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02d13	0f b6 88 9c 0e
	00 00		 movzx	 ecx, BYTE PTR [eax+3740]
  02d1a	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+36], ecx

; 1168 : 	pMsg.Class = lpObj->Class;

  02d20	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02d23	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  02d2a	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 1169 : 
; 1170 : 	if ( lpObj->Class == 1 )

  02d30	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02d33	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  02d3a	83 f9 01	 cmp	 ecx, 1
  02d3d	0f 85 ab 00 00
	00		 jne	 $LN4@DieProcDev

; 1171 : 	{
; 1172 : 		if ( lpObj->Class >= 0 && lpObj->Class < MAX_TYPE_PLAYER )

  02d43	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02d46	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  02d4d	85 c9		 test	 ecx, ecx
  02d4f	0f 8c 88 00 00
	00		 jl	 $LN3@DieProcDev
  02d55	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02d58	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  02d5f	83 f9 07	 cmp	 ecx, 7
  02d62	7d 79		 jge	 SHORT $LN3@DieProcDev

; 1173 : 		{
; 1174 : 			if ( DS_LEVEL_RANGE(lpObj->m_bDevilSquareIndex) != FALSE )

  02d64	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02d67	0f b6 88 9c 0e
	00 00		 movzx	 ecx, BYTE PTR [eax+3740]
  02d6e	85 c9		 test	 ecx, ecx
  02d70	7d 0c		 jge	 SHORT $LN8@DieProcDev
  02d72	c7 85 8c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
  02d7c	eb 18		 jmp	 SHORT $LN9@DieProcDev
$LN8@DieProcDev:
  02d7e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02d81	0f b6 82 9c 0e
	00 00		 movzx	 eax, BYTE PTR [edx+3740]
  02d88	33 c9		 xor	 ecx, ecx
  02d8a	83 f8 06	 cmp	 eax, 6
  02d8d	0f 9e c1	 setle	 cl
  02d90	89 8d 8c fe ff
	ff		 mov	 DWORD PTR tv128[ebp], ecx
$LN9@DieProcDev:
  02d96	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR tv128[ebp], 0
  02d9d	74 3e		 je	 SHORT $LN3@DieProcDev

; 1175 : 			{
; 1176 : 				lpObj->m_nEventScore+= this->m_BonusScoreTable[lpObj->Class][lpObj->m_bDevilSquareIndex]/100;

  02d9f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02da2	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  02da9	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  02dac	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02daf	8d 84 0a d4 20
	00 00		 lea	 eax, DWORD PTR [edx+ecx+8404]
  02db6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02db9	0f b6 91 9c 0e
	00 00		 movzx	 edx, BYTE PTR [ecx+3740]
  02dc0	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  02dc3	99		 cdq
  02dc4	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02dc9	f7 f9		 idiv	 ecx
  02dcb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02dce	03 82 90 0e 00
	00		 add	 eax, DWORD PTR [edx+3728]
  02dd4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02dd7	89 81 90 0e 00
	00		 mov	 DWORD PTR [ecx+3728], eax
$LN3@DieProcDev:

; 1177 : 
; 1178 : 
; 1179 : 				
; 1180 : 			}
; 1181 : 		}
; 1182 : 
; 1183 : 		pMsg.Score = lpObj->m_nEventScore;

  02ddd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02de0	8b 88 90 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3728]
  02de6	89 8d ec fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 1184 : 	}
; 1185 : 	else

  02dec	eb 0f		 jmp	 SHORT $LN1@DieProcDev
$LN4@DieProcDev:

; 1186 : 	{
; 1187 : 		pMsg.Score = lpObj->m_nEventScore;

  02dee	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02df1	8b 88 90 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3728]
  02df7	89 8d ec fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+28], ecx
$LN1@DieProcDev:

; 1188 : 	}
; 1189 : 
; 1190 : 	pMsg.ServerCode = gGameServerCode;

  02dfd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  02e04	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+24], eax

; 1191 : 	memcpy(pMsg.AccountID, lpObj->AccountID, sizeof(pMsg.AccountID));

  02e0a	6a 0a		 push	 10			; 0000000aH
  02e0c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e0f	83 c0 6c	 add	 eax, 108		; 0000006cH
  02e12	50		 push	 eax
  02e13	8d 8d d3 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+3]
  02e19	51		 push	 ecx
  02e1a	e8 00 00 00 00	 call	 _memcpy
  02e1f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1192 : 	memcpy(pMsg.GameID, lpObj->Name, sizeof(pMsg.GameID));

  02e22	6a 0a		 push	 10			; 0000000aH
  02e24	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e27	83 c0 77	 add	 eax, 119		; 00000077H
  02e2a	50		 push	 eax
  02e2b	8d 8d dd fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+13]
  02e31	51		 push	 ecx
  02e32	e8 00 00 00 00	 call	 _memcpy
  02e37	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1193 : 
; 1194 : 	DataSendRank((char*)&pMsg, pMsg.h.size);

  02e3a	0f b6 85 d1 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  02e41	50		 push	 eax
  02e42	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  02e48	51		 push	 ecx
  02e49	e8 00 00 00 00	 call	 ?DataSendRank@@YAXPADH@Z ; DataSendRank
  02e4e	83 c4 08	 add	 esp, 8

; 1195 : 
; 1196 : 	LogAddTD("[DevilSquare] Dead [%s][%s][%d][%d]", lpObj->AccountID, lpObj->Name, lpObj->m_nEventExp, lpObj->m_nEventScore);

  02e51	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e54	8b 88 90 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3728]
  02e5a	51		 push	 ecx
  02e5b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e5e	8b 82 94 0e 00
	00		 mov	 eax, DWORD PTR [edx+3732]
  02e64	50		 push	 eax
  02e65	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02e68	83 c1 77	 add	 ecx, 119		; 00000077H
  02e6b	51		 push	 ecx
  02e6c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02e6f	83 c2 6c	 add	 edx, 108		; 0000006cH
  02e72	52		 push	 edx
  02e73	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@
  02e78	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02e7e	83 c4 14	 add	 esp, 20			; 00000014H

; 1197 : 
; 1198 : 	lpObj->m_nEventScore = 0;

  02e81	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e84	c7 80 90 0e 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+3728], 0

; 1199 : 	lpObj->m_nEventMoney = 0;

  02e8e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e91	c7 80 98 0e 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+3736], 0

; 1200 : 	lpObj->m_nEventExp = 0;

  02e9b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02e9e	c7 80 94 0e 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+3732], 0
$LN6@DieProcDev:

; 1201 : 
; 1202 : }

  02ea8	5f		 pop	 edi
  02ea9	5e		 pop	 esi
  02eaa	5b		 pop	 ebx
  02eab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02eae	33 cd		 xor	 ecx, ebp
  02eb0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02eb5	8b e5		 mov	 esp, ebp
  02eb7	5d		 pop	 ebp
  02eb8	c2 04 00	 ret	 4
?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquare::DieProcDevilSquare
_TEXT	ENDS
PUBLIC	?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z ; CDevilSquare::gObjMonsterExpSingle
EXTRN	?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@AA_JHH@Z:PROC ; gObjLevelUp
EXTRN	?gObjUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_J@Z:PROC ; gObjUserSetExp
EXTRN	?gObjSealUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_JH@Z:PROC ; gObjSealUserSetExp
EXTRN	?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ:PROC ; CCrywolfSync::GetGettingExpPenaltyRate
EXTRN	?g_iCrywolfApplyMvpPenalty@@3HA:DWORD		; g_iCrywolfApplyMvpPenalty
EXTRN	?GetOccupationState@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetOccupationState
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
EXTRN	?DinamicExp@cGrandReset@@QAEHHH@Z:PROC		; cGrandReset::DinamicExp
EXTRN	?gGrandReset@@3VcGrandReset@@A:BYTE		; gGrandReset
EXTRN	?Main@cResetSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; cResetSystem::Main
EXTRN	?gResetSystem@@3VcResetSystem@@A:BYTE		; gResetSystem
EXTRN	?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterLevelSystem::CheckIsMasterLevelCharacter
EXTRN	?g_MasterLevelSystem@@3VCMasterLevelSystem@@A:BYTE ; g_MasterLevelSystem
EXTRN	?gLevelExperience@@3PAKA:BYTE			; gLevelExperience
EXTRN	_rand:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	__allrem:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv320 = -104						; size = 8
_NewExp$240736 = -32					; size = 4
_mymaxexp$ = -28					; size = 4
_level$ = -24						; size = 4
_maxexp$ = -20						; size = 8
_exp$ = -12						; size = 8
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_dmg$ = 16						; size = 4
_tot_dmg$ = 20						; size = 4
?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z PROC ; CDevilSquare::gObjMonsterExpSingle
; _this$ = ecx

; 1205 : {

  02ec0	55		 push	 ebp
  02ec1	8b ec		 mov	 ebp, esp
  02ec3	83 ec 68	 sub	 esp, 104		; 00000068H
  02ec6	53		 push	 ebx
  02ec7	56		 push	 esi
  02ec8	57		 push	 edi
  02ec9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1206 : 	__int64 exp;
; 1207 : 	__int64 maxexp = 0;

  02ecc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _maxexp$[ebp], 0
  02ed3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _maxexp$[ebp+4], 0

; 1208 : 
; 1209 : 	int level = ((lpTargetObj->Level + 25) * lpTargetObj->Level) / 3;

  02eda	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  02edd	0f bf 80 be 00
	00 00		 movsx	 eax, WORD PTR [eax+190]
  02ee4	83 c0 19	 add	 eax, 25			; 00000019H
  02ee7	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  02eea	0f bf 91 be 00
	00 00		 movsx	 edx, WORD PTR [ecx+190]
  02ef1	0f af c2	 imul	 eax, edx
  02ef4	99		 cdq
  02ef5	b9 03 00 00 00	 mov	 ecx, 3
  02efa	f7 f9		 idiv	 ecx
  02efc	89 45 e8	 mov	 DWORD PTR _level$[ebp], eax

; 1210 : 
; 1211 : 	if ( (lpTargetObj->Level + 10) < lpObj->Level )

  02eff	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  02f02	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  02f09	83 c1 0a	 add	 ecx, 10			; 0000000aH
  02f0c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f0f	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  02f16	3b c8		 cmp	 ecx, eax
  02f18	7d 23		 jge	 SHORT $LN15@gObjMonste

; 1212 : 	{
; 1213 : 		level = (level*(lpTargetObj->Level + 10))/lpObj->Level;

  02f1a	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  02f1d	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  02f24	83 c1 0a	 add	 ecx, 10			; 0000000aH
  02f27	8b c1		 mov	 eax, ecx
  02f29	0f af 45 e8	 imul	 eax, DWORD PTR _level$[ebp]
  02f2d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02f30	0f bf 8a be 00
	00 00		 movsx	 ecx, WORD PTR [edx+190]
  02f37	99		 cdq
  02f38	f7 f9		 idiv	 ecx
  02f3a	89 45 e8	 mov	 DWORD PTR _level$[ebp], eax
$LN15@gObjMonste:

; 1214 : 	}
; 1215 : 
; 1216 : 	if ( lpTargetObj->Level >= 65 )

  02f3d	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  02f40	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  02f47	83 f9 41	 cmp	 ecx, 65			; 00000041H
  02f4a	7c 29		 jl	 SHORT $LN14@gObjMonste

; 1217 : 	{
; 1218 : 		level += (lpTargetObj->Level-64)*(lpTargetObj->Level / 4);

  02f4c	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  02f4f	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  02f56	83 e9 40	 sub	 ecx, 64			; 00000040H
  02f59	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  02f5c	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  02f63	99		 cdq
  02f64	83 e2 03	 and	 edx, 3
  02f67	03 c2		 add	 eax, edx
  02f69	c1 f8 02	 sar	 eax, 2
  02f6c	0f af c8	 imul	 ecx, eax
  02f6f	03 4d e8	 add	 ecx, DWORD PTR _level$[ebp]
  02f72	89 4d e8	 mov	 DWORD PTR _level$[ebp], ecx
$LN14@gObjMonste:

; 1219 : 	}
; 1220 : 
; 1221 : 	if ( level > 0 )

  02f75	83 7d e8 00	 cmp	 DWORD PTR _level$[ebp], 0
  02f79	7e 11		 jle	 SHORT $LN13@gObjMonste

; 1222 : 	{
; 1223 : 		maxexp = level / 2;

  02f7b	8b 45 e8	 mov	 eax, DWORD PTR _level$[ebp]
  02f7e	99		 cdq
  02f7f	2b c2		 sub	 eax, edx
  02f81	d1 f8		 sar	 eax, 1
  02f83	99		 cdq
  02f84	89 45 ec	 mov	 DWORD PTR _maxexp$[ebp], eax
  02f87	89 55 f0	 mov	 DWORD PTR _maxexp$[ebp+4], edx

; 1224 : 	}
; 1225 : 	else

  02f8a	eb 07		 jmp	 SHORT $LN12@gObjMonste
$LN13@gObjMonste:

; 1226 : 	{
; 1227 : 		level = 0;

  02f8c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN12@gObjMonste:

; 1228 : 	}
; 1229 : 
; 1230 : 	if ( maxexp < 1 )

  02f93	83 7d f0 00	 cmp	 DWORD PTR _maxexp$[ebp+4], 0
  02f97	7f 14		 jg	 SHORT $LN11@gObjMonste
  02f99	7c 06		 jl	 SHORT $LN18@gObjMonste
  02f9b	83 7d ec 01	 cmp	 DWORD PTR _maxexp$[ebp], 1
  02f9f	73 0c		 jae	 SHORT $LN11@gObjMonste
$LN18@gObjMonste:

; 1231 : 	{
; 1232 : 		exp = level;

  02fa1	8b 45 e8	 mov	 eax, DWORD PTR _level$[ebp]
  02fa4	99		 cdq
  02fa5	89 45 f4	 mov	 DWORD PTR _exp$[ebp], eax
  02fa8	89 55 f8	 mov	 DWORD PTR _exp$[ebp+4], edx

; 1233 : 	}
; 1234 : 	else

  02fab	eb 27		 jmp	 SHORT $LN10@gObjMonste
$LN11@gObjMonste:

; 1235 : 	{
; 1236 : 		exp = level + rand()%maxexp;

  02fad	8b 45 e8	 mov	 eax, DWORD PTR _level$[ebp]
  02fb0	99		 cdq
  02fb1	8b f0		 mov	 esi, eax
  02fb3	8b fa		 mov	 edi, edx
  02fb5	e8 00 00 00 00	 call	 _rand
  02fba	99		 cdq
  02fbb	8b 4d f0	 mov	 ecx, DWORD PTR _maxexp$[ebp+4]
  02fbe	51		 push	 ecx
  02fbf	8b 4d ec	 mov	 ecx, DWORD PTR _maxexp$[ebp]
  02fc2	51		 push	 ecx
  02fc3	52		 push	 edx
  02fc4	50		 push	 eax
  02fc5	e8 00 00 00 00	 call	 __allrem
  02fca	03 f0		 add	 esi, eax
  02fcc	13 fa		 adc	 edi, edx
  02fce	89 75 f4	 mov	 DWORD PTR _exp$[ebp], esi
  02fd1	89 7d f8	 mov	 DWORD PTR _exp$[ebp+4], edi
$LN10@gObjMonste:

; 1237 : 	}
; 1238 : 
; 1239 : 	exp = (dmg * exp)/tot_dmg;

  02fd4	8b 45 10	 mov	 eax, DWORD PTR _dmg$[ebp]
  02fd7	99		 cdq
  02fd8	8b 4d f8	 mov	 ecx, DWORD PTR _exp$[ebp+4]
  02fdb	51		 push	 ecx
  02fdc	8b 4d f4	 mov	 ecx, DWORD PTR _exp$[ebp]
  02fdf	51		 push	 ecx
  02fe0	52		 push	 edx
  02fe1	50		 push	 eax
  02fe2	e8 00 00 00 00	 call	 __allmul
  02fe7	8b c8		 mov	 ecx, eax
  02fe9	8b f2		 mov	 esi, edx
  02feb	8b 45 14	 mov	 eax, DWORD PTR _tot_dmg$[ebp]
  02fee	99		 cdq
  02fef	52		 push	 edx
  02ff0	50		 push	 eax
  02ff1	56		 push	 esi
  02ff2	51		 push	 ecx
  02ff3	e8 00 00 00 00	 call	 __alldiv
  02ff8	89 45 f4	 mov	 DWORD PTR _exp$[ebp], eax
  02ffb	89 55 f8	 mov	 DWORD PTR _exp$[ebp+4], edx

; 1240 : 	DWORD mymaxexp = gLevelExperience[lpObj->Level];

  02ffe	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03001	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  03008	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?gLevelExperience@@3PAKA[ecx*4]
  0300f	89 55 e4	 mov	 DWORD PTR _mymaxexp$[ebp], edx

; 1241 : 
; 1242 : 	if ( exp > mymaxexp )

  03012	8b 45 e4	 mov	 eax, DWORD PTR _mymaxexp$[ebp]
  03015	33 c9		 xor	 ecx, ecx
  03017	89 45 98	 mov	 DWORD PTR tv320[ebp], eax
  0301a	89 4d 9c	 mov	 DWORD PTR tv320[ebp+4], ecx
  0301d	8b 55 f8	 mov	 edx, DWORD PTR _exp$[ebp+4]
  03020	3b 55 9c	 cmp	 edx, DWORD PTR tv320[ebp+4]
  03023	7c 15		 jl	 SHORT $LN9@gObjMonste
  03025	7f 08		 jg	 SHORT $LN19@gObjMonste
  03027	8b 45 f4	 mov	 eax, DWORD PTR _exp$[ebp]
  0302a	3b 45 98	 cmp	 eax, DWORD PTR tv320[ebp]
  0302d	76 0b		 jbe	 SHORT $LN9@gObjMonste
$LN19@gObjMonste:

; 1243 : 	{
; 1244 : 		exp = mymaxexp;

  0302f	8b 45 e4	 mov	 eax, DWORD PTR _mymaxexp$[ebp]
  03032	33 c9		 xor	 ecx, ecx
  03034	89 45 f4	 mov	 DWORD PTR _exp$[ebp], eax
  03037	89 4d f8	 mov	 DWORD PTR _exp$[ebp+4], ecx
$LN9@gObjMonste:

; 1245 : 	}
; 1246 : 
; 1247 : 	if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(lpObj) == FALSE)

  0303a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0303d	50		 push	 eax
  0303e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  03043	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  03048	85 c0		 test	 eax, eax
  0304a	75 47		 jne	 SHORT $LN8@gObjMonste

; 1248 : 	{
; 1249 : 		int NewExp = exp;

  0304c	8b 45 f4	 mov	 eax, DWORD PTR _exp$[ebp]
  0304f	89 45 e0	 mov	 DWORD PTR _NewExp$240736[ebp], eax

; 1250 : 		NewExp = gResetSystem.Main(lpObj);

  03052	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03055	50		 push	 eax
  03056	b9 00 00 00 00	 mov	 ecx, OFFSET ?gResetSystem@@3VcResetSystem@@A ; gResetSystem
  0305b	e8 00 00 00 00	 call	 ?Main@cResetSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; cResetSystem::Main
  03060	89 45 e0	 mov	 DWORD PTR _NewExp$240736[ebp], eax

; 1251 : 		NewExp = gGrandReset.DinamicExp(lpObj->m_Index, NewExp);

  03063	8b 45 e0	 mov	 eax, DWORD PTR _NewExp$240736[ebp]
  03066	50		 push	 eax
  03067	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0306a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0306c	52		 push	 edx
  0306d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGrandReset@@3VcGrandReset@@A ; gGrandReset
  03072	e8 00 00 00 00	 call	 ?DinamicExp@cGrandReset@@QAEHHH@Z ; cGrandReset::DinamicExp
  03077	89 45 e0	 mov	 DWORD PTR _NewExp$240736[ebp], eax

; 1252 : 		exp *= NewExp;

  0307a	8b 45 e0	 mov	 eax, DWORD PTR _NewExp$240736[ebp]
  0307d	99		 cdq
  0307e	52		 push	 edx
  0307f	50		 push	 eax
  03080	8b 45 f8	 mov	 eax, DWORD PTR _exp$[ebp+4]
  03083	50		 push	 eax
  03084	8b 4d f4	 mov	 ecx, DWORD PTR _exp$[ebp]
  03087	51		 push	 ecx
  03088	e8 00 00 00 00	 call	 __allmul
  0308d	89 45 f4	 mov	 DWORD PTR _exp$[ebp], eax
  03090	89 55 f8	 mov	 DWORD PTR _exp$[ebp+4], edx
$LN8@gObjMonste:

; 1253 : 		//exp = int(exp * gResetSystem.Main(lpObj));
; 1254 : 		//exp = int(exp * gAddExperience);
; 1255 : 	}
; 1256 : #if(PC_BANG_POINT_SYSTEM==1)
; 1257 : 	if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(lpObj) == FALSE)//Season 4.5 addon
; 1258 : 	{
; 1259 : 		g_PCBangPointSystem.AddExperience(lpObj,exp);
; 1260 : 	}
; 1261 : #endif
; 1262 : 
; 1263 : 	if ( g_CrywolfSync.GetOccupationState() == 1 && g_iCrywolfApplyMvpPenalty != FALSE)

  03093	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  03098	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  0309d	83 f8 01	 cmp	 eax, 1
  030a0	75 34		 jne	 SHORT $LN7@gObjMonste
  030a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpPenalty@@3HA, 0 ; g_iCrywolfApplyMvpPenalty
  030a9	74 2b		 je	 SHORT $LN7@gObjMonste

; 1264 : 	{
; 1265 : 		exp =  (exp * g_CrywolfSync.GetGettingExpPenaltyRate()) / 100;

  030ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  030b0	e8 00 00 00 00	 call	 ?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetGettingExpPenaltyRate
  030b5	99		 cdq
  030b6	52		 push	 edx
  030b7	50		 push	 eax
  030b8	8b 45 f8	 mov	 eax, DWORD PTR _exp$[ebp+4]
  030bb	50		 push	 eax
  030bc	8b 4d f4	 mov	 ecx, DWORD PTR _exp$[ebp]
  030bf	51		 push	 ecx
  030c0	e8 00 00 00 00	 call	 __allmul
  030c5	6a 00		 push	 0
  030c7	6a 64		 push	 100			; 00000064H
  030c9	52		 push	 edx
  030ca	50		 push	 eax
  030cb	e8 00 00 00 00	 call	 __alldiv
  030d0	89 45 f4	 mov	 DWORD PTR _exp$[ebp], eax
  030d3	89 55 f8	 mov	 DWORD PTR _exp$[ebp+4], edx
$LN7@gObjMonste:

; 1266 : 	}
; 1267 : 
; 1268 : 	if ( exp > 0 )

  030d6	83 7d f8 00	 cmp	 DWORD PTR _exp$[ebp+4], 0
  030da	0f 8c d1 00 00
	00		 jl	 $LN6@gObjMonste
  030e0	7f 0a		 jg	 SHORT $LN20@gObjMonste
  030e2	83 7d f4 00	 cmp	 DWORD PTR _exp$[ebp], 0
  030e6	0f 86 c5 00 00
	00		 jbe	 $LN6@gObjMonste
$LN20@gObjMonste:

; 1269 : 	{
; 1270 : 		if ( lpObj->Type == OBJ_USER )

  030ec	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  030ef	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  030f3	83 f9 01	 cmp	 ecx, 1
  030f6	0f 85 b5 00 00
	00		 jne	 $LN6@gObjMonste

; 1271 : 		{
; 1272 : 			gObjSealUserSetExp(lpObj, exp, FALSE); //Seal Exp (Season3 add-on)

  030fc	6a 00		 push	 0
  030fe	8d 45 f4	 lea	 eax, DWORD PTR _exp$[ebp]
  03101	50		 push	 eax
  03102	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03105	51		 push	 ecx
  03106	e8 00 00 00 00	 call	 ?gObjSealUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; gObjSealUserSetExp
  0310b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1273 : 			gObjUserSetExp(lpObj,exp);	//Panda Use

  0310e	8d 45 f4	 lea	 eax, DWORD PTR _exp$[ebp]
  03111	50		 push	 eax
  03112	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  03115	51		 push	 ecx
  03116	e8 00 00 00 00	 call	 ?gObjUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_J@Z ; gObjUserSetExp
  0311b	83 c4 08	 add	 esp, 8

; 1274 : 
; 1275 : 			lpObj->Experience += exp;

  0311e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03121	8b 88 c8 00 00
	00		 mov	 ecx, DWORD PTR [eax+200]
  03127	33 d2		 xor	 edx, edx
  03129	03 4d f4	 add	 ecx, DWORD PTR _exp$[ebp]
  0312c	13 55 f8	 adc	 edx, DWORD PTR _exp$[ebp+4]
  0312f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03132	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx

; 1276 : 			lpObj->m_nEventExp += exp;

  03138	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0313b	8b 80 94 0e 00
	00		 mov	 eax, DWORD PTR [eax+3732]
  03141	99		 cdq
  03142	03 45 f4	 add	 eax, DWORD PTR _exp$[ebp]
  03145	13 55 f8	 adc	 edx, DWORD PTR _exp$[ebp+4]
  03148	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0314b	89 81 94 0e 00
	00		 mov	 DWORD PTR [ecx+3732], eax

; 1277 : 
; 1278 : #if(PARTY_ZEN_DROP==TRUE)
; 1279 : 			if(lpTargetObj->Type == OBJ_MONSTER)

  03151	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03154	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  03158	83 f9 02	 cmp	 ecx, 2
  0315b	75 2c		 jne	 SHORT $LN4@gObjMonste

; 1280 : 			{
; 1281 : 				if (exp > MAX_ZEN)

  0315d	83 7d f8 00	 cmp	 DWORD PTR _exp$[ebp+4], 0
  03161	7c 1a		 jl	 SHORT $LN3@gObjMonste
  03163	7f 09		 jg	 SHORT $LN21@gObjMonste
  03165	81 7d f4 00 94
	35 77		 cmp	 DWORD PTR _exp$[ebp], 2000000000 ; 77359400H
  0316c	76 0f		 jbe	 SHORT $LN3@gObjMonste
$LN21@gObjMonste:

; 1282 : 				{
; 1283 : 					lpTargetObj->Money = MAX_ZEN;

  0316e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03171	c7 80 f0 00 00
	00 00 94 35 77	 mov	 DWORD PTR [eax+240], 2000000000 ; 77359400H

; 1284 : 				}
; 1285 : 				else

  0317b	eb 0c		 jmp	 SHORT $LN4@gObjMonste
$LN3@gObjMonste:

; 1286 : 				{
; 1287 : 					lpTargetObj->Money = exp;

  0317d	8b 45 f4	 mov	 eax, DWORD PTR _exp$[ebp]
  03180	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  03183	89 81 f0 00 00
	00		 mov	 DWORD PTR [ecx+240], eax
$LN4@gObjMonste:

; 1288 : 				}
; 1289 : 			}
; 1290 : #endif
; 1291 : 
; 1292 : 			if ( gObjLevelUp(lpObj, exp, lpTargetObj->Class, 0) == false )

  03189	6a 00		 push	 0
  0318b	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0318e	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  03195	51		 push	 ecx
  03196	8d 55 f4	 lea	 edx, DWORD PTR _exp$[ebp]
  03199	52		 push	 edx
  0319a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0319d	50		 push	 eax
  0319e	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@AA_JHH@Z ; gObjLevelUp
  031a3	83 c4 10	 add	 esp, 16			; 00000010H
  031a6	0f b6 c8	 movzx	 ecx, al
  031a9	85 c9		 test	 ecx, ecx
  031ab	75 04		 jne	 SHORT $LN6@gObjMonste

; 1293 : 			{
; 1294 : 				return 0;

  031ad	33 c0		 xor	 eax, eax
  031af	eb 03		 jmp	 SHORT $LN16@gObjMonste
$LN6@gObjMonste:

; 1295 : 			}
; 1296 : 		}
; 1297 : 	}
; 1298 : 
; 1299 : 	return exp;

  031b1	8b 45 f4	 mov	 eax, DWORD PTR _exp$[ebp]
$LN16@gObjMonste:

; 1300 : }

  031b4	5f		 pop	 edi
  031b5	5e		 pop	 esi
  031b6	5b		 pop	 ebx
  031b7	8b e5		 mov	 esp, ebp
  031b9	5d		 pop	 ebp
  031ba	c2 10 00	 ret	 16			; 00000010H
?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z ENDP ; CDevilSquare::gObjMonsterExpSingle
_TEXT	ENDS
PUBLIC	__real@4069000000000000
PUBLIC	__real@3fc999999999999a
PUBLIC	??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0ED@EKHBFLAF@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z@4JA ; `CDevilSquare::gObjExpParty'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
PUBLIC	?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ; CDevilSquare::gObjExpParty
EXTRN	?GCKillPlayerExpSend@@YAXHHHHH@Z:PROC		; GCKillPlayerExpSend
EXTRN	?CheckExp@CDonateManager@@QAEXHAA_J@Z:PROC	; CDonateManager::CheckExp
EXTRN	?g_DonateManager@@3VCDonateManager@@A:BYTE	; g_DonateManager
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	?CheckMinMonsterLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@0@Z:PROC ; CMasterLevelSystem::CheckMinMonsterLevel
EXTRN	?ExConfig@@3VcExConfigs@@A:BYTE			; ExConfig
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@ DB 'error : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@EKHBFLAF@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0ED@EKHBFLAF@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\devilsquare.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z@4JA DD 0517H ; `CDevilSquare::gObjExpParty'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
tv809 = -220						; size = 8
tv543 = -216						; size = 4
tv132 = -216						; size = 4
_NewExp$240833 = -148					; size = 4
_myexp$240824 = -144					; size = 8
_dis$240773 = -136					; size = 4
_toplevel$ = -132					; size = 4
_lpPartyObj$ = -128					; size = 4
_bCheckSetParty$ = -124					; size = 7
_bApplaySetParty$ = -116				; size = 4
_viewpercent$ = -112					; size = 4
_viewplayer$ = -108					; size = 4
_dis$ = -104						; size = 40
_partycount$ = -64					; size = 4
_partylevel$ = -60					; size = 4
_totallevel$ = -56					; size = 4
_partynum$ = -52					; size = 4
_number$ = -48						; size = 4
_level$ = -44						; size = 4
_expMoney$ = -40					; size = 4
_totalexp$ = -36					; size = 8
_maxexp$ = -28						; size = 8
_exp$ = -20						; size = 8
_n$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_AttackDamage$ = 16					; size = 4
_MSBFlag$ = 20						; size = 4
?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z PROC ; CDevilSquare::gObjExpParty
; _this$ = ecx

; 1303 : {

  031c0	55		 push	 ebp
  031c1	8b ec		 mov	 ebp, esp
  031c3	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  031c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  031ce	33 c5		 xor	 eax, ebp
  031d0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  031d3	53		 push	 ebx
  031d4	56		 push	 esi
  031d5	57		 push	 edi
  031d6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1304 : 	int n;
; 1305 : 
; 1306 : 	__int64 exp;
; 1307 : 	__int64 maxexp = 0;

  031d9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _maxexp$[ebp], 0
  031e0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _maxexp$[ebp+4], 0

; 1308 : 	__int64 totalexp;
; 1309 : #if(PARTY_ZEN_DROP==TRUE)
; 1310 : 	unsigned int expMoney = 0;

  031e7	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _expMoney$[ebp], 0

; 1311 : #endif
; 1312 : 
; 1313 : 	int level = ((lpTargetObj->Level + 25) * lpTargetObj->Level) / 3;

  031ee	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  031f1	0f bf 80 be 00
	00 00		 movsx	 eax, WORD PTR [eax+190]
  031f8	83 c0 19	 add	 eax, 25			; 00000019H
  031fb	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  031fe	0f bf 91 be 00
	00 00		 movsx	 edx, WORD PTR [ecx+190]
  03205	0f af c2	 imul	 eax, edx
  03208	99		 cdq
  03209	b9 03 00 00 00	 mov	 ecx, 3
  0320e	f7 f9		 idiv	 ecx
  03210	89 45 d4	 mov	 DWORD PTR _level$[ebp], eax

; 1314 : 	int number;
; 1315 : 	int partynum = 0;

  03213	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _partynum$[ebp], 0

; 1316 : 	int totallevel = 0;

  0321a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _totallevel$[ebp], 0

; 1317 : 	int partylevel;
; 1318 : 	int partycount;
; 1319 : 	int dis[MAX_USER_IN_PARTY];
; 1320 : 	int viewplayer = 0;

  03221	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _viewplayer$[ebp], 0

; 1321 : 	int viewpercent = 100;

  03228	c7 45 90 64 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 100 ; 00000064H

; 1322 : 	BOOL bApplaySetParty = FALSE;

  0322f	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _bApplaySetParty$[ebp], 0

; 1323 : 	bool bCheckSetParty[MAX_TYPE_PLAYER];
; 1324 : 	partynum = lpObj->PartyNumber;

  03236	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03239	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  0323f	89 4d cc	 mov	 DWORD PTR _partynum$[ebp], ecx

; 1325 : 	LPOBJ lpPartyObj;
; 1326 : 	
; 1327 : 	int toplevel = 0;

  03242	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _toplevel$[ebp], 0

; 1328 : 
; 1329 : 	for (n=0;n<MAX_USER_IN_PARTY;n++)

  0324c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  03253	eb 09		 jmp	 SHORT $LN70@gObjExpPar
$LN69@gObjExpPar:
  03255	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  03258	83 c0 01	 add	 eax, 1
  0325b	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
$LN70@gObjExpPar:
  0325e	83 7d f4 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  03262	0f 8d 89 00 00
	00		 jge	 $LN68@gObjExpPar

; 1330 : 	{
; 1331 : 		number = gParty.m_PartyS[partynum].Number[n];

  03268	8b 45 cc	 mov	 eax, DWORD PTR _partynum$[ebp]
  0326b	6b c0 6c	 imul	 eax, 108		; 0000006cH
  0326e	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  03271	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  03278	89 55 d0	 mov	 DWORD PTR _number$[ebp], edx

; 1332 : 
; 1333 : 		if ( number >= 0 )

  0327b	83 7d d0 00	 cmp	 DWORD PTR _number$[ebp], 0
  0327f	7c 6b		 jl	 SHORT $LN65@gObjExpPar

; 1334 : 		{
; 1335 : 			lpPartyObj = &gObj[number];

  03281	8b 45 d0	 mov	 eax, DWORD PTR _number$[ebp]
  03284	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0328a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03290	89 45 80	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 1336 : 
; 1337 : 			int dis = gObjCalDistance(lpTargetObj,lpPartyObj); //Season 2.5 add-on

  03293	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03296	50		 push	 eax
  03297	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0329a	51		 push	 ecx
  0329b	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  032a0	83 c4 08	 add	 esp, 8
  032a3	89 85 78 ff ff
	ff		 mov	 DWORD PTR _dis$240773[ebp], eax

; 1338 : 
; 1339 : 			if(dis < 10) //Season 2.5 add-on

  032a9	83 bd 78 ff ff
	ff 0a		 cmp	 DWORD PTR _dis$240773[ebp], 10 ; 0000000aH
  032b0	7d 3a		 jge	 SHORT $LN65@gObjExpPar

; 1340 : 			{
; 1341 : 				if ( lpPartyObj->Level+lpPartyObj->MLevel > toplevel )//Season 4.5 fix

  032b2	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  032b5	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  032bc	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  032bf	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  032c6	03 c8		 add	 ecx, eax
  032c8	3b 8d 7c ff ff
	ff		 cmp	 ecx, DWORD PTR _toplevel$[ebp]
  032ce	7e 1c		 jle	 SHORT $LN65@gObjExpPar

; 1342 : 				{
; 1343 : 					toplevel = lpPartyObj->Level+lpPartyObj->MLevel;//Season 4.5 fix

  032d0	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  032d3	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  032da	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  032dd	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  032e4	03 c8		 add	 ecx, eax
  032e6	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _toplevel$[ebp], ecx
$LN65@gObjExpPar:

; 1344 : 				}
; 1345 : 			}
; 1346 : 		}
; 1347 : 	}

  032ec	e9 64 ff ff ff	 jmp	 $LN69@gObjExpPar
$LN68@gObjExpPar:

; 1348 : 
; 1349 : 	if ( OBJMAX_RANGE(partynum) == FALSE )

  032f1	83 7d cc 00	 cmp	 DWORD PTR _partynum$[ebp], 0
  032f5	7d 0c		 jge	 SHORT $LN73@gObjExpPar
  032f7	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
  03301	eb 12		 jmp	 SHORT $LN74@gObjExpPar
$LN73@gObjExpPar:
  03303	33 c0		 xor	 eax, eax
  03305	81 7d cc 97 3a
	00 00		 cmp	 DWORD PTR _partynum$[ebp], 14999 ; 00003a97H
  0330c	0f 9e c0	 setle	 al
  0330f	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv132[ebp], eax
$LN74@gObjExpPar:
  03315	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR tv132[ebp], 0
  0331c	75 21		 jne	 SHORT $LN64@gObjExpPar

; 1350 : 	{
; 1351 : 		LogAdd("error : %s %d", __FILE__, __LINE__);

  0331e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z@4JA
  03323	83 c0 30	 add	 eax, 48			; 00000030H
  03326	50		 push	 eax
  03327	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@EKHBFLAF@d?3?2projects?2exteam6?43?2source?2gam@
  0332c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  03331	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  03337	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1352 : 		return;

  0333a	e9 0f 07 00 00	 jmp	 $LN71@gObjExpPar
$LN64@gObjExpPar:

; 1353 : 	}
; 1354 : 
; 1355 : 	partycount = gParty.m_PartyS[partynum].Count;

  0333f	8b 45 cc	 mov	 eax, DWORD PTR _partynum$[ebp]
  03342	6b c0 6c	 imul	 eax, 108		; 0000006cH
  03345	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  0334b	89 4d c0	 mov	 DWORD PTR _partycount$[ebp], ecx

; 1356 : 
; 1357 : 	for ( n =0;n<MAX_USER_IN_PARTY;n++)

  0334e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  03355	eb 09		 jmp	 SHORT $LN63@gObjExpPar
$LN62@gObjExpPar:
  03357	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0335a	83 c0 01	 add	 eax, 1
  0335d	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
$LN63@gObjExpPar:
  03360	83 7d f4 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  03364	0f 8d 0d 01 00
	00		 jge	 $LN61@gObjExpPar

; 1358 : 	{
; 1359 : 		number = gParty.m_PartyS[partynum].Number[n];

  0336a	8b 45 cc	 mov	 eax, DWORD PTR _partynum$[ebp]
  0336d	6b c0 6c	 imul	 eax, 108		; 0000006cH
  03370	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  03373	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  0337a	89 55 d0	 mov	 DWORD PTR _number$[ebp], edx

; 1360 : 
; 1361 : 		if ( number >= 0 )

  0337d	83 7d d0 00	 cmp	 DWORD PTR _number$[ebp], 0
  03381	0f 8c eb 00 00
	00		 jl	 $LN58@gObjExpPar

; 1362 : 		{
; 1363 : 			lpPartyObj = &gObj[number];

  03387	8b 45 d0	 mov	 eax, DWORD PTR _number$[ebp]
  0338a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03390	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03396	89 45 80	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 1364 : 
; 1365 : 			if ( lpTargetObj->MapNumber ==lpPartyObj->MapNumber )

  03399	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0339c	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  033a3	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  033a6	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  033ad	3b c8		 cmp	 ecx, eax
  033af	0f 85 bd 00 00
	00		 jne	 $LN58@gObjExpPar

; 1366 : 			{
; 1367 : 				dis[n] = gObjCalDistance(lpTargetObj, &gObj[number]);

  033b5	8b 45 d0	 mov	 eax, DWORD PTR _number$[ebp]
  033b8	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  033be	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  033c4	50		 push	 eax
  033c5	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  033c8	51		 push	 ecx
  033c9	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  033ce	83 c4 08	 add	 esp, 8
  033d1	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  033d4	89 44 95 98	 mov	 DWORD PTR _dis$[ebp+edx*4], eax

; 1368 : 
; 1369 : 				if ( dis[n] < 10 )

  033d8	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  033db	83 7c 85 98 0a	 cmp	 DWORD PTR _dis$[ebp+eax*4], 10 ; 0000000aH
  033e0	0f 8d 8c 00 00
	00		 jge	 $LN58@gObjExpPar

; 1370 : 				{
; 1371 : 					lpPartyObj = &gObj[number];

  033e6	8b 45 d0	 mov	 eax, DWORD PTR _number$[ebp]
  033e9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  033ef	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  033f5	89 45 80	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 1372 : 
; 1373 : 					if ( toplevel >= (lpPartyObj->Level + lpPartyObj->MLevel + 200 ) ) // Season 4.5 fix

  033f8	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  033fb	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  03402	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  03405	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  0340c	8d 8c 01 c8 00
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+200]
  03413	39 8d 7c ff ff
	ff		 cmp	 DWORD PTR _toplevel$[ebp], ecx
  03419	7c 23		 jl	 SHORT $LN57@gObjExpPar

; 1374 : 					{
; 1375 : 						totallevel += lpPartyObj->Level + lpPartyObj->MLevel + 200;//Season 4.5 fix

  0341b	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  0341e	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  03425	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  03428	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  0342f	03 45 c8	 add	 eax, DWORD PTR _totallevel$[ebp]
  03432	8d 8c 08 c8 00
	00 00		 lea	 ecx, DWORD PTR [eax+ecx+200]
  03439	89 4d c8	 mov	 DWORD PTR _totallevel$[ebp], ecx

; 1376 : 					}
; 1377 : 					else

  0343c	eb 1c		 jmp	 SHORT $LN56@gObjExpPar
$LN57@gObjExpPar:

; 1378 : 					{
; 1379 : 						totallevel += lpPartyObj->Level + lpPartyObj->MLevel; // Season 4.5 fix

  0343e	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03441	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  03448	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  0344b	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  03452	03 45 c8	 add	 eax, DWORD PTR _totallevel$[ebp]
  03455	03 c1		 add	 eax, ecx
  03457	89 45 c8	 mov	 DWORD PTR _totallevel$[ebp], eax
$LN56@gObjExpPar:

; 1380 : 					}
; 1381 : 
; 1382 : 					viewplayer++;

  0345a	8b 45 94	 mov	 eax, DWORD PTR _viewplayer$[ebp]
  0345d	83 c0 01	 add	 eax, 1
  03460	89 45 94	 mov	 DWORD PTR _viewplayer$[ebp], eax

; 1383 : 					bCheckSetParty[lpPartyObj->Class] = true;

  03463	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03466	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0346d	c6 44 0d 84 01	 mov	 BYTE PTR _bCheckSetParty$[ebp+ecx], 1
$LN58@gObjExpPar:

; 1384 : 				}
; 1385 : 			}
; 1386 : 		}
; 1387 : 	}

  03472	e9 e0 fe ff ff	 jmp	 $LN62@gObjExpPar
$LN61@gObjExpPar:

; 1388 : 
; 1389 : 	if ( bCheckSetParty[0] != false && bCheckSetParty[1] != false && bCheckSetParty[2] != false 
; 1390 : 		|| bCheckSetParty[3] != false && bCheckSetParty[4] != false && bCheckSetParty[5] != false )//Season 4.5 addon

  03477	0f b6 45 84	 movzx	 eax, BYTE PTR _bCheckSetParty$[ebp]
  0347b	85 c0		 test	 eax, eax
  0347d	74 10		 je	 SHORT $LN53@gObjExpPar
  0347f	0f b6 45 85	 movzx	 eax, BYTE PTR _bCheckSetParty$[ebp+1]
  03483	85 c0		 test	 eax, eax
  03485	74 08		 je	 SHORT $LN53@gObjExpPar
  03487	0f b6 45 86	 movzx	 eax, BYTE PTR _bCheckSetParty$[ebp+2]
  0348b	85 c0		 test	 eax, eax
  0348d	75 18		 jne	 SHORT $LN54@gObjExpPar
$LN53@gObjExpPar:
  0348f	0f b6 45 87	 movzx	 eax, BYTE PTR _bCheckSetParty$[ebp+3]
  03493	85 c0		 test	 eax, eax
  03495	74 17		 je	 SHORT $LN55@gObjExpPar
  03497	0f b6 45 88	 movzx	 eax, BYTE PTR _bCheckSetParty$[ebp+4]
  0349b	85 c0		 test	 eax, eax
  0349d	74 0f		 je	 SHORT $LN55@gObjExpPar
  0349f	0f b6 45 89	 movzx	 eax, BYTE PTR _bCheckSetParty$[ebp+5]
  034a3	85 c0		 test	 eax, eax
  034a5	74 07		 je	 SHORT $LN55@gObjExpPar
$LN54@gObjExpPar:

; 1391 : 	{
; 1392 : 		bApplaySetParty = TRUE;

  034a7	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR _bApplaySetParty$[ebp], 1
$LN55@gObjExpPar:

; 1393 : 	}
; 1394 : 
; 1395 : 	if ( viewplayer > 1 )

  034ae	83 7d 94 01	 cmp	 DWORD PTR _viewplayer$[ebp], 1
  034b2	0f 8e 94 00 00
	00		 jle	 $LN52@gObjExpPar

; 1396 : 	{
; 1397 : 		if ( bApplaySetParty != FALSE )

  034b8	83 7d 8c 00	 cmp	 DWORD PTR _bApplaySetParty$[ebp], 0
  034bc	74 3a		 je	 SHORT $LN51@gObjExpPar

; 1398 : 		{
; 1399 : 			if ( viewplayer == 3 )

  034be	83 7d 94 03	 cmp	 DWORD PTR _viewplayer$[ebp], 3
  034c2	75 0a		 jne	 SHORT $LN50@gObjExpPar

; 1400 : 			{
; 1401 : 				viewpercent = ExConfig.Event.DSParty3ExpPercent;//230;

  034c4	a1 10 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2064
  034c9	89 45 90	 mov	 DWORD PTR _viewpercent$[ebp], eax
  034cc	eb 28		 jmp	 SHORT $LN45@gObjExpPar
$LN50@gObjExpPar:

; 1402 : 			}
; 1403 : 			else if ( viewplayer == 4 )

  034ce	83 7d 94 04	 cmp	 DWORD PTR _viewplayer$[ebp], 4
  034d2	75 0a		 jne	 SHORT $LN48@gObjExpPar

; 1404 : 			{
; 1405 : 				viewpercent = ExConfig.Event.DSParty4ExpPercent;//270;

  034d4	a1 14 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2068
  034d9	89 45 90	 mov	 DWORD PTR _viewpercent$[ebp], eax
  034dc	eb 18		 jmp	 SHORT $LN45@gObjExpPar
$LN48@gObjExpPar:

; 1406 : 			}
; 1407 : 			else if ( viewplayer >= 5 )

  034de	83 7d 94 05	 cmp	 DWORD PTR _viewplayer$[ebp], 5
  034e2	7c 0a		 jl	 SHORT $LN46@gObjExpPar

; 1408 : 			{
; 1409 : 				viewpercent = ExConfig.Event.DSParty5ExpPercent;//300;

  034e4	a1 18 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2072
  034e9	89 45 90	 mov	 DWORD PTR _viewpercent$[ebp], eax

; 1410 : 			}
; 1411 : 			else

  034ec	eb 08		 jmp	 SHORT $LN45@gObjExpPar
$LN46@gObjExpPar:

; 1412 : 			{
; 1413 : 				viewpercent = ExConfig.Event.DSPartyExpPercentOther;//120;

  034ee	a1 1c 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2076
  034f3	89 45 90	 mov	 DWORD PTR _viewpercent$[ebp], eax
$LN45@gObjExpPar:

; 1414 : 			}
; 1415 : 		}
; 1416 : 		else

  034f6	eb 48		 jmp	 SHORT $LN36@gObjExpPar
$LN51@gObjExpPar:

; 1417 : 		{
; 1418 : 			if ( viewplayer == 2 )

  034f8	83 7d 94 02	 cmp	 DWORD PTR _viewplayer$[ebp], 2
  034fc	75 0a		 jne	 SHORT $LN43@gObjExpPar

; 1419 : 			{
; 1420 : 				viewpercent = ExConfig.Event.DSParty2ExpSetPercent;//160;

  034fe	a1 20 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2080
  03503	89 45 90	 mov	 DWORD PTR _viewpercent$[ebp], eax
  03506	eb 38		 jmp	 SHORT $LN36@gObjExpPar
$LN43@gObjExpPar:

; 1421 : 			}
; 1422 : 			else if ( viewplayer == 3 )

  03508	83 7d 94 03	 cmp	 DWORD PTR _viewplayer$[ebp], 3
  0350c	75 0a		 jne	 SHORT $LN41@gObjExpPar

; 1423 : 			{
; 1424 : 				viewpercent = ExConfig.Event.DSParty3ExpSetPercent;//180;

  0350e	a1 24 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2084
  03513	89 45 90	 mov	 DWORD PTR _viewpercent$[ebp], eax
  03516	eb 28		 jmp	 SHORT $LN36@gObjExpPar
$LN41@gObjExpPar:

; 1425 : 			}
; 1426 : 			else if ( viewplayer == 4 )

  03518	83 7d 94 04	 cmp	 DWORD PTR _viewplayer$[ebp], 4
  0351c	75 0a		 jne	 SHORT $LN39@gObjExpPar

; 1427 : 			{
; 1428 : 				viewpercent = ExConfig.Event.DSParty4ExpSetPercent;//200;

  0351e	a1 28 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2088
  03523	89 45 90	 mov	 DWORD PTR _viewpercent$[ebp], eax
  03526	eb 18		 jmp	 SHORT $LN36@gObjExpPar
$LN39@gObjExpPar:

; 1429 : 			}
; 1430 : 			else if ( viewplayer >= 5 )

  03528	83 7d 94 05	 cmp	 DWORD PTR _viewplayer$[ebp], 5
  0352c	7c 0a		 jl	 SHORT $LN37@gObjExpPar

; 1431 : 			{
; 1432 : 				viewpercent = ExConfig.Event.DSParty5ExpSetPercent;//220;

  0352e	a1 2c 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2092
  03533	89 45 90	 mov	 DWORD PTR _viewpercent$[ebp], eax

; 1433 : 			}
; 1434 : 			else

  03536	eb 08		 jmp	 SHORT $LN36@gObjExpPar
$LN37@gObjExpPar:

; 1435 : 			{
; 1436 : 				viewpercent = ExConfig.Event.DSParty1ExpSetPercent;//120;

  03538	a1 30 08 00 00	 mov	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2096
  0353d	89 45 90	 mov	 DWORD PTR _viewpercent$[ebp], eax
$LN36@gObjExpPar:

; 1437 : 			}
; 1438 : 		}
; 1439 : 
; 1440 : 		partylevel = totallevel / viewplayer;

  03540	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  03543	99		 cdq
  03544	f7 7d 94	 idiv	 DWORD PTR _viewplayer$[ebp]
  03547	89 45 c4	 mov	 DWORD PTR _partylevel$[ebp], eax

; 1441 : 	}
; 1442 : 	else

  0354a	eb 06		 jmp	 SHORT $LN35@gObjExpPar
$LN52@gObjExpPar:

; 1443 : 	{
; 1444 : 		partylevel = totallevel;

  0354c	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  0354f	89 45 c4	 mov	 DWORD PTR _partylevel$[ebp], eax
$LN35@gObjExpPar:

; 1445 : 	}
; 1446 : 
; 1447 : 	if ( (lpTargetObj->Level +10) < partylevel )

  03552	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03555	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0355c	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0355f	3b 4d c4	 cmp	 ecx, DWORD PTR _partylevel$[ebp]
  03562	7d 1a		 jge	 SHORT $LN34@gObjExpPar

; 1448 : 	{
; 1449 : 		level = (level * (lpTargetObj->Level+10) ) / partylevel;

  03564	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03567	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0356e	83 c1 0a	 add	 ecx, 10			; 0000000aH
  03571	8b c1		 mov	 eax, ecx
  03573	0f af 45 d4	 imul	 eax, DWORD PTR _level$[ebp]
  03577	99		 cdq
  03578	f7 7d c4	 idiv	 DWORD PTR _partylevel$[ebp]
  0357b	89 45 d4	 mov	 DWORD PTR _level$[ebp], eax
$LN34@gObjExpPar:

; 1450 : 	}
; 1451 : 
; 1452 : 	if ( lpTargetObj->Level >= 65 )

  0357e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03581	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  03588	83 f9 41	 cmp	 ecx, 65			; 00000041H
  0358b	7c 75		 jl	 SHORT $LN31@gObjExpPar

; 1453 : 	{
; 1454 : 		if ( viewplayer == 1 )

  0358d	83 7d 94 01	 cmp	 DWORD PTR _viewplayer$[ebp], 1
  03591	75 36		 jne	 SHORT $LN32@gObjExpPar

; 1455 : 		{
; 1456 : 			level += ((lpTargetObj->Level+lpTargetObj->MLevel) - 64) * (lpTargetObj->Level/ 4);

  03593	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03596	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0359d	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  035a0	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  035a7	8d 4c 01 c0	 lea	 ecx, DWORD PTR [ecx+eax-64]
  035ab	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  035ae	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  035b5	99		 cdq
  035b6	83 e2 03	 and	 edx, 3
  035b9	03 c2		 add	 eax, edx
  035bb	c1 f8 02	 sar	 eax, 2
  035be	0f af c8	 imul	 ecx, eax
  035c1	03 4d d4	 add	 ecx, DWORD PTR _level$[ebp]
  035c4	89 4d d4	 mov	 DWORD PTR _level$[ebp], ecx

; 1457 : 		}
; 1458 : 		else

  035c7	eb 39		 jmp	 SHORT $LN31@gObjExpPar
$LN32@gObjExpPar:

; 1459 : 		{
; 1460 : 			level += (int)(200.0 - ((lpObj->Level + lpObj->MLevel) * 0.2));

  035c9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  035cc	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  035d3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  035d6	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  035dd	03 c8		 add	 ecx, eax
  035df	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv543[ebp], ecx
  035e5	db 85 28 ff ff
	ff		 fild	 DWORD PTR tv543[ebp]
  035eb	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fc999999999999a
  035f1	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4069000000000000
  035f7	e8 00 00 00 00	 call	 __ftol2_sse
  035fc	03 45 d4	 add	 eax, DWORD PTR _level$[ebp]
  035ff	89 45 d4	 mov	 DWORD PTR _level$[ebp], eax
$LN31@gObjExpPar:

; 1461 : 		}
; 1462 : 	}
; 1463 : 
; 1464 : 	if ( level > 0 )

  03602	83 7d d4 00	 cmp	 DWORD PTR _level$[ebp], 0
  03606	7e 11		 jle	 SHORT $LN30@gObjExpPar

; 1465 : 	{
; 1466 : 		maxexp = level / 2;

  03608	8b 45 d4	 mov	 eax, DWORD PTR _level$[ebp]
  0360b	99		 cdq
  0360c	2b c2		 sub	 eax, edx
  0360e	d1 f8		 sar	 eax, 1
  03610	99		 cdq
  03611	89 45 e4	 mov	 DWORD PTR _maxexp$[ebp], eax
  03614	89 55 e8	 mov	 DWORD PTR _maxexp$[ebp+4], edx

; 1467 : 	}
; 1468 : 	else

  03617	eb 07		 jmp	 SHORT $LN29@gObjExpPar
$LN30@gObjExpPar:

; 1469 : 	{
; 1470 : 		level = 0;

  03619	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN29@gObjExpPar:

; 1471 : 	}
; 1472 : 
; 1473 : 	if ( maxexp < 1 )

  03620	83 7d e8 00	 cmp	 DWORD PTR _maxexp$[ebp+4], 0
  03624	7f 14		 jg	 SHORT $LN28@gObjExpPar
  03626	7c 06		 jl	 SHORT $LN75@gObjExpPar
  03628	83 7d e4 01	 cmp	 DWORD PTR _maxexp$[ebp], 1
  0362c	73 0c		 jae	 SHORT $LN28@gObjExpPar
$LN75@gObjExpPar:

; 1474 : 	{
; 1475 : 		totalexp = level;

  0362e	8b 45 d4	 mov	 eax, DWORD PTR _level$[ebp]
  03631	99		 cdq
  03632	89 45 dc	 mov	 DWORD PTR _totalexp$[ebp], eax
  03635	89 55 e0	 mov	 DWORD PTR _totalexp$[ebp+4], edx

; 1476 : 	}
; 1477 : 	else

  03638	eb 27		 jmp	 SHORT $LN27@gObjExpPar
$LN28@gObjExpPar:

; 1478 : 	{
; 1479 : 		totalexp = level + rand()%maxexp;

  0363a	8b 45 d4	 mov	 eax, DWORD PTR _level$[ebp]
  0363d	99		 cdq
  0363e	8b f0		 mov	 esi, eax
  03640	8b fa		 mov	 edi, edx
  03642	e8 00 00 00 00	 call	 _rand
  03647	99		 cdq
  03648	8b 4d e8	 mov	 ecx, DWORD PTR _maxexp$[ebp+4]
  0364b	51		 push	 ecx
  0364c	8b 4d e4	 mov	 ecx, DWORD PTR _maxexp$[ebp]
  0364f	51		 push	 ecx
  03650	52		 push	 edx
  03651	50		 push	 eax
  03652	e8 00 00 00 00	 call	 __allrem
  03657	03 f0		 add	 esi, eax
  03659	13 fa		 adc	 edi, edx
  0365b	89 75 dc	 mov	 DWORD PTR _totalexp$[ebp], esi
  0365e	89 7d e0	 mov	 DWORD PTR _totalexp$[ebp+4], edi
$LN27@gObjExpPar:

; 1480 : 	}
; 1481 : #if(PARTY_ZEN_DROP==FALSE)
; 1482 : 	if ( lpTargetObj->Type == OBJ_MONSTER )
; 1483 : 	{
; 1484 : 		lpTargetObj->Money = totalexp;
; 1485 : 	}
; 1486 : #endif
; 1487 : 	for ( n=0;n<MAX_USER_IN_PARTY;n++)

  03661	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  03668	eb 09		 jmp	 SHORT $LN26@gObjExpPar
$LN25@gObjExpPar:
  0366a	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0366d	83 c0 01	 add	 eax, 1
  03670	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
$LN26@gObjExpPar:
  03673	83 7d f4 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  03677	0f 8d 9b 03 00
	00		 jge	 $LN24@gObjExpPar

; 1488 : 	{
; 1489 : 		number = gParty.m_PartyS[partynum].Number[n];

  0367d	8b 45 cc	 mov	 eax, DWORD PTR _partynum$[ebp]
  03680	6b c0 6c	 imul	 eax, 108		; 0000006cH
  03683	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  03686	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  0368d	89 55 d0	 mov	 DWORD PTR _number$[ebp], edx

; 1490 : 
; 1491 : 		if ( number >= 0 )

  03690	83 7d d0 00	 cmp	 DWORD PTR _number$[ebp], 0
  03694	0f 8c 79 03 00
	00		 jl	 $LN4@gObjExpPar

; 1492 : 		{
; 1493 : 			lpPartyObj = &gObj[number];

  0369a	8b 45 d0	 mov	 eax, DWORD PTR _number$[ebp]
  0369d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  036a3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  036a9	89 45 80	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 1494 : 
; 1495 : 			if ( lpTargetObj->MapNumber == lpPartyObj->MapNumber )

  036ac	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  036af	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  036b6	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  036b9	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  036c0	3b c8		 cmp	 ecx, eax
  036c2	0f 85 4b 03 00
	00		 jne	 $LN4@gObjExpPar

; 1496 : 			{
; 1497 : 				if ( dis[n] < 10 )

  036c8	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  036cb	83 7c 85 98 0a	 cmp	 DWORD PTR _dis$[ebp+eax*4], 10 ; 0000000aH
  036d0	0f 8d 3d 03 00
	00		 jge	 $LN4@gObjExpPar

; 1498 : 				{
; 1499 : 					__int64 myexp = 0;//Season 4.5 changed

  036d6	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _myexp$240824[ebp], 0
  036e0	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _myexp$240824[ebp+4], 0

; 1500 : 					
; 1501 : 					//Season 4.5 addon start
; 1502 : 					if(g_MasterLevelSystem.CheckMinMonsterLevel(lpPartyObj,lpTargetObj) == 0)

  036ea	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  036ed	50		 push	 eax
  036ee	8b 4d 80	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  036f1	51		 push	 ecx
  036f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  036f7	e8 00 00 00 00	 call	 ?CheckMinMonsterLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@0@Z ; CMasterLevelSystem::CheckMinMonsterLevel
  036fc	85 c0		 test	 eax, eax
  036fe	75 13		 jne	 SHORT $LN20@gObjExpPar

; 1503 : 					{
; 1504 : 						exp = 0;

  03700	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _exp$[ebp], 0
  03707	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _exp$[ebp+4], 0

; 1505 : 					}
; 1506 : 					else 

  0370e	e9 a7 00 00 00	 jmp	 $LN19@gObjExpPar
$LN20@gObjExpPar:

; 1507 : 					{
; 1508 : 						if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(lpPartyObj) != 0)

  03713	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03716	50		 push	 eax
  03717	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  0371c	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  03721	85 c0		 test	 eax, eax
  03723	74 1d		 je	 SHORT $LN18@gObjExpPar

; 1509 : 						{
; 1510 : 							myexp = lpPartyObj->MLNextExp;

  03725	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03728	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  0372e	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _myexp$240824[ebp], ecx
  03734	8b 90 e4 00 00
	00		 mov	 edx, DWORD PTR [eax+228]
  0373a	89 95 74 ff ff
	ff		 mov	 DWORD PTR _myexp$240824[ebp+4], edx

; 1511 : 						}
; 1512 : 						else

  03740	eb 1f		 jmp	 SHORT $LN17@gObjExpPar
$LN18@gObjExpPar:

; 1513 : 						{
; 1514 : 							myexp = gLevelExperience[lpPartyObj->Level];

  03742	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03745	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0374c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?gLevelExperience@@3PAKA[ecx*4]
  03753	33 c0		 xor	 eax, eax
  03755	89 95 70 ff ff
	ff		 mov	 DWORD PTR _myexp$240824[ebp], edx
  0375b	89 85 74 ff ff
	ff		 mov	 DWORD PTR _myexp$240824[ebp+4], eax
$LN17@gObjExpPar:

; 1515 : 						}
; 1516 : 
; 1517 : 						exp = ((totalexp * viewpercent* (lpPartyObj->Level + lpPartyObj->MLevel) ) / totallevel ) / 100;

  03761	8b 45 90	 mov	 eax, DWORD PTR _viewpercent$[ebp]
  03764	99		 cdq
  03765	52		 push	 edx
  03766	50		 push	 eax
  03767	8b 45 e0	 mov	 eax, DWORD PTR _totalexp$[ebp+4]
  0376a	50		 push	 eax
  0376b	8b 4d dc	 mov	 ecx, DWORD PTR _totalexp$[ebp]
  0376e	51		 push	 ecx
  0376f	e8 00 00 00 00	 call	 __allmul
  03774	8b c8		 mov	 ecx, eax
  03776	8b f2		 mov	 esi, edx
  03778	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  0377b	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  03782	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  03785	0f bf 92 d0 00
	00 00		 movsx	 edx, WORD PTR [edx+208]
  0378c	03 c2		 add	 eax, edx
  0378e	99		 cdq
  0378f	52		 push	 edx
  03790	50		 push	 eax
  03791	56		 push	 esi
  03792	51		 push	 ecx
  03793	e8 00 00 00 00	 call	 __allmul
  03798	8b c8		 mov	 ecx, eax
  0379a	8b f2		 mov	 esi, edx
  0379c	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  0379f	99		 cdq
  037a0	52		 push	 edx
  037a1	50		 push	 eax
  037a2	56		 push	 esi
  037a3	51		 push	 ecx
  037a4	e8 00 00 00 00	 call	 __alldiv
  037a9	6a 00		 push	 0
  037ab	6a 64		 push	 100			; 00000064H
  037ad	52		 push	 edx
  037ae	50		 push	 eax
  037af	e8 00 00 00 00	 call	 __alldiv
  037b4	89 45 ec	 mov	 DWORD PTR _exp$[ebp], eax
  037b7	89 55 f0	 mov	 DWORD PTR _exp$[ebp+4], edx
$LN19@gObjExpPar:

; 1518 : 					}
; 1519 : 					//Season 4.5 addon end
; 1520 : 
; 1521 : 					if ( exp > myexp  )

  037ba	8b 45 f0	 mov	 eax, DWORD PTR _exp$[ebp+4]
  037bd	3b 85 74 ff ff
	ff		 cmp	 eax, DWORD PTR _myexp$240824[ebp+4]
  037c3	7c 1f		 jl	 SHORT $LN16@gObjExpPar
  037c5	7f 0b		 jg	 SHORT $LN76@gObjExpPar
  037c7	8b 4d ec	 mov	 ecx, DWORD PTR _exp$[ebp]
  037ca	3b 8d 70 ff ff
	ff		 cmp	 ecx, DWORD PTR _myexp$240824[ebp]
  037d0	76 12		 jbe	 SHORT $LN16@gObjExpPar
$LN76@gObjExpPar:

; 1522 : 					{
; 1523 : 						exp = myexp;

  037d2	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _myexp$240824[ebp]
  037d8	89 45 ec	 mov	 DWORD PTR _exp$[ebp], eax
  037db	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _myexp$240824[ebp+4]
  037e1	89 4d f0	 mov	 DWORD PTR _exp$[ebp+4], ecx
$LN16@gObjExpPar:

; 1524 : 					}
; 1525 : 
; 1526 : 					if( lpPartyObj->Type == OBJ_USER )

  037e4	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  037e7	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  037eb	83 f9 01	 cmp	 ecx, 1
  037ee	75 1a		 jne	 SHORT $LN14@gObjExpPar

; 1527 : 					{
; 1528 : 						if ( lpTargetObj->Type == OBJ_USER )

  037f0	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  037f3	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  037f7	83 f9 01	 cmp	 ecx, 1
  037fa	75 0e		 jne	 SHORT $LN14@gObjExpPar

; 1529 : 						{
; 1530 : 							exp = 0;

  037fc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _exp$[ebp], 0
  03803	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _exp$[ebp+4], 0
$LN14@gObjExpPar:

; 1531 : 						}
; 1532 : 					}
; 1533 : 
; 1534 : 					if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(lpPartyObj) == FALSE)

  0380a	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  0380d	50		 push	 eax
  0380e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  03813	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  03818	85 c0		 test	 eax, eax
  0381a	75 56		 jne	 SHORT $LN13@gObjExpPar

; 1535 : 					{
; 1536 : 						int NewExp = exp;

  0381c	8b 45 ec	 mov	 eax, DWORD PTR _exp$[ebp]
  0381f	89 85 6c ff ff
	ff		 mov	 DWORD PTR _NewExp$240833[ebp], eax

; 1537 : 						NewExp = gResetSystem.Main(lpPartyObj);

  03825	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03828	50		 push	 eax
  03829	b9 00 00 00 00	 mov	 ecx, OFFSET ?gResetSystem@@3VcResetSystem@@A ; gResetSystem
  0382e	e8 00 00 00 00	 call	 ?Main@cResetSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; cResetSystem::Main
  03833	89 85 6c ff ff
	ff		 mov	 DWORD PTR _NewExp$240833[ebp], eax

; 1538 : 						NewExp = gGrandReset.DinamicExp(lpPartyObj->m_Index, NewExp);

  03839	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _NewExp$240833[ebp]
  0383f	50		 push	 eax
  03840	8b 4d 80	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  03843	8b 11		 mov	 edx, DWORD PTR [ecx]
  03845	52		 push	 edx
  03846	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGrandReset@@3VcGrandReset@@A ; gGrandReset
  0384b	e8 00 00 00 00	 call	 ?DinamicExp@cGrandReset@@QAEHHH@Z ; cGrandReset::DinamicExp
  03850	89 85 6c ff ff
	ff		 mov	 DWORD PTR _NewExp$240833[ebp], eax

; 1539 : 						exp *= NewExp;

  03856	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _NewExp$240833[ebp]
  0385c	99		 cdq
  0385d	52		 push	 edx
  0385e	50		 push	 eax
  0385f	8b 45 f0	 mov	 eax, DWORD PTR _exp$[ebp+4]
  03862	50		 push	 eax
  03863	8b 4d ec	 mov	 ecx, DWORD PTR _exp$[ebp]
  03866	51		 push	 ecx
  03867	e8 00 00 00 00	 call	 __allmul
  0386c	89 45 ec	 mov	 DWORD PTR _exp$[ebp], eax
  0386f	89 55 f0	 mov	 DWORD PTR _exp$[ebp+4], edx
$LN13@gObjExpPar:

; 1540 : 						//exp = int(exp * gResetSystem.Main(lpPartyObj));
; 1541 : 						//exp = int(exp * gAddExperience);
; 1542 : 					}
; 1543 : #if(PC_BANG_POINT_SYSTEM==1)
; 1544 : 					if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(lpPartyObj) == FALSE)//Season 4.5 addon
; 1545 : 					{
; 1546 : 						g_PCBangPointSystem.AddExperience(lpPartyObj,exp);
; 1547 : 					}
; 1548 : #endif
; 1549 : 					if ( g_CrywolfSync.GetOccupationState() == 1 && g_iCrywolfApplyMvpPenalty != FALSE)

  03872	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  03877	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  0387c	83 f8 01	 cmp	 eax, 1
  0387f	75 34		 jne	 SHORT $LN12@gObjExpPar
  03881	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpPenalty@@3HA, 0 ; g_iCrywolfApplyMvpPenalty
  03888	74 2b		 je	 SHORT $LN12@gObjExpPar

; 1550 : 					{
; 1551 : 						exp =  (exp * g_CrywolfSync.GetGettingExpPenaltyRate()) / 100;

  0388a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0388f	e8 00 00 00 00	 call	 ?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetGettingExpPenaltyRate
  03894	99		 cdq
  03895	52		 push	 edx
  03896	50		 push	 eax
  03897	8b 45 f0	 mov	 eax, DWORD PTR _exp$[ebp+4]
  0389a	50		 push	 eax
  0389b	8b 4d ec	 mov	 ecx, DWORD PTR _exp$[ebp]
  0389e	51		 push	 ecx
  0389f	e8 00 00 00 00	 call	 __allmul
  038a4	6a 00		 push	 0
  038a6	6a 64		 push	 100			; 00000064H
  038a8	52		 push	 edx
  038a9	50		 push	 eax
  038aa	e8 00 00 00 00	 call	 __alldiv
  038af	89 45 ec	 mov	 DWORD PTR _exp$[ebp], eax
  038b2	89 55 f0	 mov	 DWORD PTR _exp$[ebp+4], edx
$LN12@gObjExpPar:

; 1552 : 					}
; 1553 : 
; 1554 : #if(CUSTOM_NPC_BUFFER==TRUE)
; 1555 : 					if(g_ExLicense.user.NpcBuffer)

  038b5	0f b6 05 d9 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+217
  038bc	85 c0		 test	 eax, eax
  038be	74 34		 je	 SHORT $LN10@gObjExpPar

; 1556 : 					{
; 1557 : 						if(lpPartyObj->ExpBuffTime > 0)

  038c0	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  038c3	83 b8 90 28 00
	00 00		 cmp	 DWORD PTR [eax+10384], 0
  038ca	76 28		 jbe	 SHORT $LN10@gObjExpPar

; 1558 : 						{
; 1559 : 							exp += ( exp * 15 ) / 100;

  038cc	6a 00		 push	 0
  038ce	6a 0f		 push	 15			; 0000000fH
  038d0	8b 45 f0	 mov	 eax, DWORD PTR _exp$[ebp+4]
  038d3	50		 push	 eax
  038d4	8b 4d ec	 mov	 ecx, DWORD PTR _exp$[ebp]
  038d7	51		 push	 ecx
  038d8	e8 00 00 00 00	 call	 __allmul
  038dd	6a 00		 push	 0
  038df	6a 64		 push	 100			; 00000064H
  038e1	52		 push	 edx
  038e2	50		 push	 eax
  038e3	e8 00 00 00 00	 call	 __alldiv
  038e8	03 45 ec	 add	 eax, DWORD PTR _exp$[ebp]
  038eb	13 55 f0	 adc	 edx, DWORD PTR _exp$[ebp+4]
  038ee	89 45 ec	 mov	 DWORD PTR _exp$[ebp], eax
  038f1	89 55 f0	 mov	 DWORD PTR _exp$[ebp+4], edx
$LN10@gObjExpPar:

; 1560 : 						}
; 1561 : 					}
; 1562 : #endif
; 1563 : 
; 1564 : #if(CUSTOM_DONATEMANAGER)
; 1565 : 				g_DonateManager.CheckExp(lpObj->m_Index, exp);

  038f4	8d 45 ec	 lea	 eax, DWORD PTR _exp$[ebp]
  038f7	50		 push	 eax
  038f8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  038fb	8b 11		 mov	 edx, DWORD PTR [ecx]
  038fd	52		 push	 edx
  038fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DonateManager@@3VCDonateManager@@A ; g_DonateManager
  03903	e8 00 00 00 00	 call	 ?CheckExp@CDonateManager@@QAEXHAA_J@Z ; CDonateManager::CheckExp

; 1566 : #endif
; 1567 : 
; 1568 : 					if ( exp > 0 )

  03908	83 7d f0 00	 cmp	 DWORD PTR _exp$[ebp+4], 0
  0390c	0f 8c d5 00 00
	00		 jl	 $LN5@gObjExpPar
  03912	7f 0a		 jg	 SHORT $LN77@gObjExpPar
  03914	83 7d ec 00	 cmp	 DWORD PTR _exp$[ebp], 0
  03918	0f 86 c9 00 00
	00		 jbe	 $LN5@gObjExpPar
$LN77@gObjExpPar:

; 1569 : 					{
; 1570 : 						if ( lpPartyObj->Type == OBJ_USER )

  0391e	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03921	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  03925	83 f9 01	 cmp	 ecx, 1
  03928	0f 85 b9 00 00
	00		 jne	 $LN5@gObjExpPar

; 1571 : 						{
; 1572 : 							gObjSealUserSetExp(lpPartyObj, exp, FALSE); //Seal Exp (Season3 add-on)

  0392e	6a 00		 push	 0
  03930	8d 45 ec	 lea	 eax, DWORD PTR _exp$[ebp]
  03933	50		 push	 eax
  03934	8b 4d 80	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  03937	51		 push	 ecx
  03938	e8 00 00 00 00	 call	 ?gObjSealUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; gObjSealUserSetExp
  0393d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1573 : 							gObjUserSetExp(lpPartyObj,exp);	//Panda Use

  03940	8d 45 ec	 lea	 eax, DWORD PTR _exp$[ebp]
  03943	50		 push	 eax
  03944	8b 4d 80	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  03947	51		 push	 ecx
  03948	e8 00 00 00 00	 call	 ?gObjUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_J@Z ; gObjUserSetExp
  0394d	83 c4 08	 add	 esp, 8

; 1574 : 
; 1575 : 							lpPartyObj->Experience += exp;

  03950	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03953	8b 88 c8 00 00
	00		 mov	 ecx, DWORD PTR [eax+200]
  03959	33 d2		 xor	 edx, edx
  0395b	03 4d ec	 add	 ecx, DWORD PTR _exp$[ebp]
  0395e	13 55 f0	 adc	 edx, DWORD PTR _exp$[ebp+4]
  03961	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  03964	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx

; 1576 : 							lpPartyObj->m_nEventExp += exp;

  0396a	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  0396d	8b 80 94 0e 00
	00		 mov	 eax, DWORD PTR [eax+3732]
  03973	99		 cdq
  03974	03 45 ec	 add	 eax, DWORD PTR _exp$[ebp]
  03977	13 55 f0	 adc	 edx, DWORD PTR _exp$[ebp+4]
  0397a	8b 4d 80	 mov	 ecx, DWORD PTR _lpPartyObj$[ebp]
  0397d	89 81 94 0e 00
	00		 mov	 DWORD PTR [ecx+3732], eax

; 1577 : 
; 1578 : #if(PARTY_ZEN_DROP==TRUE)
; 1579 : 							if(lpTargetObj->Type == OBJ_MONSTER)

  03983	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03986	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0398a	83 f9 02	 cmp	 ecx, 2
  0398d	75 2f		 jne	 SHORT $LN6@gObjExpPar

; 1580 : 							{
; 1581 : 								if (expMoney < exp)

  0398f	8b 45 d8	 mov	 eax, DWORD PTR _expMoney$[ebp]
  03992	33 c9		 xor	 ecx, ecx
  03994	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv809[ebp], eax
  0399a	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv809[ebp+4], ecx
  039a0	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR tv809[ebp+4]
  039a6	3b 55 f0	 cmp	 edx, DWORD PTR _exp$[ebp+4]
  039a9	7f 13		 jg	 SHORT $LN6@gObjExpPar
  039ab	7c 0b		 jl	 SHORT $LN78@gObjExpPar
  039ad	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv809[ebp]
  039b3	3b 45 ec	 cmp	 eax, DWORD PTR _exp$[ebp]
  039b6	73 06		 jae	 SHORT $LN6@gObjExpPar
$LN78@gObjExpPar:

; 1582 : 								{
; 1583 : 									expMoney = exp;

  039b8	8b 45 ec	 mov	 eax, DWORD PTR _exp$[ebp]
  039bb	89 45 d8	 mov	 DWORD PTR _expMoney$[ebp], eax
$LN6@gObjExpPar:

; 1584 : 								}
; 1585 : 							}
; 1586 : #endif
; 1587 : 
; 1588 : 							if ( gObjLevelUp(lpPartyObj, exp, lpTargetObj->Class, EVENT_TYPE_PARTY) == false )

  039be	6a 01		 push	 1
  039c0	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  039c3	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  039ca	51		 push	 ecx
  039cb	8d 55 ec	 lea	 edx, DWORD PTR _exp$[ebp]
  039ce	52		 push	 edx
  039cf	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  039d2	50		 push	 eax
  039d3	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@AA_JHH@Z ; gObjLevelUp
  039d8	83 c4 10	 add	 esp, 16			; 00000010H
  039db	0f b6 c8	 movzx	 ecx, al
  039de	85 c9		 test	 ecx, ecx
  039e0	75 05		 jne	 SHORT $LN5@gObjExpPar

; 1589 : 							{
; 1590 : 								continue;

  039e2	e9 83 fc ff ff	 jmp	 $LN25@gObjExpPar
$LN5@gObjExpPar:

; 1591 : 							}
; 1592 : 						}
; 1593 : 					}
; 1594 : 
; 1595 : 					if ( lpPartyObj->Type == OBJ_USER )

  039e7	8b 45 80	 mov	 eax, DWORD PTR _lpPartyObj$[ebp]
  039ea	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  039ee	83 f9 01	 cmp	 ecx, 1
  039f1	75 20		 jne	 SHORT $LN4@gObjExpPar

; 1596 : 					{
; 1597 : 						GCKillPlayerExpSend(lpPartyObj->m_Index, lpTargetObj->m_Index, exp, AttackDamage, MSBFlag);

  039f3	8b 45 14	 mov	 eax, DWORD PTR _MSBFlag$[ebp]
  039f6	50		 push	 eax
  039f7	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  039fa	51		 push	 ecx
  039fb	8b 55 ec	 mov	 edx, DWORD PTR _exp$[ebp]
  039fe	52		 push	 edx
  039ff	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03a02	8b 08		 mov	 ecx, DWORD PTR [eax]
  03a04	51		 push	 ecx
  03a05	8b 55 80	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  03a08	8b 02		 mov	 eax, DWORD PTR [edx]
  03a0a	50		 push	 eax
  03a0b	e8 00 00 00 00	 call	 ?GCKillPlayerExpSend@@YAXHHHHH@Z ; GCKillPlayerExpSend
  03a10	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@gObjExpPar:

; 1598 : 					}
; 1599 : 				}
; 1600 : 			}
; 1601 : 		}
; 1602 : 	}

  03a13	e9 52 fc ff ff	 jmp	 $LN25@gObjExpPar
$LN24@gObjExpPar:

; 1603 : 
; 1604 : #if(PARTY_ZEN_DROP==TRUE)
; 1605 : 	if(lpTargetObj->Type == OBJ_MONSTER && expMoney > 0)

  03a18	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03a1b	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  03a1f	83 f9 02	 cmp	 ecx, 2
  03a22	75 2a		 jne	 SHORT $LN1@gObjExpPar
  03a24	83 7d d8 00	 cmp	 DWORD PTR _expMoney$[ebp], 0
  03a28	76 24		 jbe	 SHORT $LN1@gObjExpPar

; 1606 : 	{
; 1607 : 		if (expMoney > MAX_ZEN)

  03a2a	81 7d d8 00 94
	35 77		 cmp	 DWORD PTR _expMoney$[ebp], 2000000000 ; 77359400H
  03a31	76 0f		 jbe	 SHORT $LN2@gObjExpPar

; 1608 : 		{
; 1609 : 			lpTargetObj->Money = MAX_ZEN;

  03a33	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03a36	c7 80 f0 00 00
	00 00 94 35 77	 mov	 DWORD PTR [eax+240], 2000000000 ; 77359400H

; 1610 : 		}
; 1611 : 		else

  03a40	eb 0c		 jmp	 SHORT $LN1@gObjExpPar
$LN2@gObjExpPar:

; 1612 : 		{
; 1613 : 			lpTargetObj->Money = expMoney;

  03a42	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03a45	8b 4d d8	 mov	 ecx, DWORD PTR _expMoney$[ebp]
  03a48	89 88 f0 00 00
	00		 mov	 DWORD PTR [eax+240], ecx
$LN1@gObjExpPar:
$LN71@gObjExpPar:

; 1614 : 		}
; 1615 : 	}	
; 1616 : #endif
; 1617 : }

  03a4e	5f		 pop	 edi
  03a4f	5e		 pop	 esi
  03a50	5b		 pop	 ebx
  03a51	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03a54	33 cd		 xor	 ecx, ebp
  03a56	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03a5b	8b e5		 mov	 esp, ebp
  03a5d	5d		 pop	 ebp
  03a5e	c2 10 00	 ret	 16			; 00000010H
?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ENDP ; CDevilSquare::gObjExpParty
_TEXT	ENDS
PUBLIC	?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ; CDevilSquare::gObjMonsterScoreDivision
EXTRN	?gObjMonsterLastHitDamageUser@@YAHPAUOBJECTSTRUCT@@AAH@Z:PROC ; gObjMonsterLastHitDamageUser
EXTRN	?gObjMonsterHitDamageUserDel@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterHitDamageUserDel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv139 = -88						; size = 4
_lc5$240857 = -20					; size = 4
_LastHitObjNum$ = -16					; size = 4
_HitIndex$ = -12					; size = 4
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpMonObj$ = 8						; size = 4
_lpObj$ = 12						; size = 4
_AttackDamage$ = 16					; size = 4
_MSBFlag$ = 20						; size = 4
?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z PROC ; CDevilSquare::gObjMonsterScoreDivision
; _this$ = ecx

; 1620 : {

  03a70	55		 push	 ebp
  03a71	8b ec		 mov	 ebp, esp
  03a73	83 ec 58	 sub	 esp, 88			; 00000058H
  03a76	53		 push	 ebx
  03a77	56		 push	 esi
  03a78	57		 push	 edi
  03a79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1621 : 	::gObjMonsterHitDamageUserDel(lpMonObj);

  03a7c	8b 45 08	 mov	 eax, DWORD PTR _lpMonObj$[ebp]
  03a7f	50		 push	 eax
  03a80	e8 00 00 00 00	 call	 ?gObjMonsterHitDamageUserDel@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterHitDamageUserDel
  03a85	83 c4 04	 add	 esp, 4

; 1622 : 	lpMonObj->Money = 0;

  03a88	8b 45 08	 mov	 eax, DWORD PTR _lpMonObj$[ebp]
  03a8b	c7 80 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+240], 0

; 1623 : 
; 1624 : 	LPOBJ lpTargetObj;
; 1625 : 	int HitIndex;
; 1626 : 	int LastHitObjNum = ::gObjMonsterLastHitDamageUser(lpMonObj, HitIndex);

  03a95	8d 45 f4	 lea	 eax, DWORD PTR _HitIndex$[ebp]
  03a98	50		 push	 eax
  03a99	8b 4d 08	 mov	 ecx, DWORD PTR _lpMonObj$[ebp]
  03a9c	51		 push	 ecx
  03a9d	e8 00 00 00 00	 call	 ?gObjMonsterLastHitDamageUser@@YAHPAUOBJECTSTRUCT@@AAH@Z ; gObjMonsterLastHitDamageUser
  03aa2	83 c4 08	 add	 esp, 8
  03aa5	89 45 f0	 mov	 DWORD PTR _LastHitObjNum$[ebp], eax

; 1627 : 
; 1628 : 	if ( LastHitObjNum != -1 )

  03aa8	83 7d f0 ff	 cmp	 DWORD PTR _LastHitObjNum$[ebp], -1
  03aac	74 6c		 je	 SHORT $LN1@gObjMonste@2

; 1629 : 	{
; 1630 : 		lpTargetObj = &gObj[LastHitObjNum];

  03aae	8b 45 f0	 mov	 eax, DWORD PTR _LastHitObjNum$[ebp]
  03ab1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03ab7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03abd	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 1631 : 		int lc5 = (int)(lpMonObj->sHD[HitIndex].HitDamage / lpMonObj->MaxLife * lpMonObj->Level);

  03ac0	8b 45 f4	 mov	 eax, DWORD PTR _HitIndex$[ebp]
  03ac3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  03ac6	8b 4d 08	 mov	 ecx, DWORD PTR _lpMonObj$[ebp]
  03ac9	db 84 01 3c 0c
	00 00		 fild	 DWORD PTR [ecx+eax+3132]
  03ad0	8b 55 08	 mov	 edx, DWORD PTR _lpMonObj$[ebp]
  03ad3	d8 b2 00 01 00
	00		 fdiv	 DWORD PTR [edx+256]
  03ad9	8b 45 08	 mov	 eax, DWORD PTR _lpMonObj$[ebp]
  03adc	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  03ae3	89 4d a8	 mov	 DWORD PTR tv139[ebp], ecx
  03ae6	da 4d a8	 fimul	 DWORD PTR tv139[ebp]
  03ae9	e8 00 00 00 00	 call	 __ftol2_sse
  03aee	89 45 ec	 mov	 DWORD PTR _lc5$240857[ebp], eax

; 1632 : 		lc5 *= lpTargetObj->m_bDevilSquareIndex + 1;

  03af1	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03af4	0f b6 88 9c 0e
	00 00		 movzx	 ecx, BYTE PTR [eax+3740]
  03afb	83 c1 01	 add	 ecx, 1
  03afe	0f af 4d ec	 imul	 ecx, DWORD PTR _lc5$240857[ebp]
  03b02	89 4d ec	 mov	 DWORD PTR _lc5$240857[ebp], ecx

; 1633 : 		lpTargetObj->m_nEventScore += lc5;

  03b05	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  03b08	8b 88 90 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3728]
  03b0e	03 4d ec	 add	 ecx, DWORD PTR _lc5$240857[ebp]
  03b11	8b 55 f8	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  03b14	89 8a 90 0e 00
	00		 mov	 DWORD PTR [edx+3728], ecx
$LN1@gObjMonste@2:

; 1634 : 	}
; 1635 : }

  03b1a	5f		 pop	 edi
  03b1b	5e		 pop	 esi
  03b1c	5b		 pop	 ebx
  03b1d	8b e5		 mov	 esp, ebp
  03b1f	5d		 pop	 ebp
  03b20	c2 10 00	 ret	 16			; 00000010H
?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ENDP ; CDevilSquare::gObjMonsterScoreDivision
_TEXT	ENDS
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$240863 = -12						; size = 4
_CurTime$ = -8						; size = 4
_this$ = -4						; size = 4
?ItemClear@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ItemClear
; _this$ = ecx

; 1638 : {

  03b30	55		 push	 ebp
  03b31	8b ec		 mov	 ebp, esp
  03b33	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03b36	53		 push	 ebx
  03b37	56		 push	 esi
  03b38	57		 push	 edi
  03b39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1639 : 	int CurTime = GetTickCount();

  03b3c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  03b42	89 45 f8	 mov	 DWORD PTR _CurTime$[ebp], eax

; 1640 : 
; 1641 : 	for ( int i=0;i<MAX_MAPITEM;i++)

  03b45	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$240863[ebp], 0
  03b4c	eb 09		 jmp	 SHORT $LN3@ItemClear
$LN2@ItemClear:
  03b4e	8b 45 f4	 mov	 eax, DWORD PTR _i$240863[ebp]
  03b51	83 c0 01	 add	 eax, 1
  03b54	89 45 f4	 mov	 DWORD PTR _i$240863[ebp], eax
$LN3@ItemClear:
  03b57	81 7d f4 2c 01
	00 00		 cmp	 DWORD PTR _i$240863[ebp], 300 ; 0000012cH
  03b5e	7d 15		 jge	 SHORT $LN4@ItemClear

; 1642 : 	{
; 1643 : 		MapC[MAP_INDEX_DEVILSQUARE].m_cItem[i].m_State = 8;

  03b60	8b 45 f4	 mov	 eax, DWORD PTR _i$240863[ebp]
  03b63	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  03b69	c7 80 74 2c 2f
	00 08 00 00 00	 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[eax+3091572], 8

; 1644 : 	}

  03b73	eb d9		 jmp	 SHORT $LN2@ItemClear
$LN4@ItemClear:

; 1645 : }

  03b75	5f		 pop	 edi
  03b76	5e		 pop	 esi
  03b77	5b		 pop	 ebx
  03b78	8b e5		 mov	 esp, ebp
  03b7a	5d		 pop	 ebp
  03b7b	c3		 ret	 0
?ItemClear@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ItemClear
_TEXT	ENDS
EXTRN	?SendScore@CDevilSquareGround@@QAEXXZ:PROC	; CDevilSquareGround::SendScore
EXTRN	?SortScore@CDevilSquareGround@@QAEXXZ:PROC	; CDevilSquareGround::SortScore
EXTRN	?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CDevilSquareGround::InsertObj
EXTRN	?ClearScore@CDevilSquareGround@@QAEXXZ:PROC	; CDevilSquareGround::ClearScore
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv132 = -84						; size = 4
tv87 = -84						; size = 4
_n$240881 = -16						; size = 4
_n$240874 = -12						; size = 4
_n$240870 = -8						; size = 4
_this$ = -4						; size = 4
?CalcScore@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::CalcScore
; _this$ = ecx

; 1648 : {

  03b80	55		 push	 ebp
  03b81	8b ec		 mov	 ebp, esp
  03b83	83 ec 54	 sub	 esp, 84			; 00000054H
  03b86	53		 push	 ebx
  03b87	56		 push	 esi
  03b88	57		 push	 edi
  03b89	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1649 : 	for ( int n=0;n<MAX_DEVILSQUARE_GROUND;n++)

  03b8c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$240870[ebp], 0
  03b93	eb 09		 jmp	 SHORT $LN12@CalcScore
$LN11@CalcScore:
  03b95	8b 45 f8	 mov	 eax, DWORD PTR _n$240870[ebp]
  03b98	83 c0 01	 add	 eax, 1
  03b9b	89 45 f8	 mov	 DWORD PTR _n$240870[ebp], eax
$LN12@CalcScore:
  03b9e	83 7d f8 07	 cmp	 DWORD PTR _n$240870[ebp], 7
  03ba2	7d 17		 jge	 SHORT $LN10@CalcScore

; 1650 : 	{
; 1651 : 		this->m_DevilSquareGround[n].ClearScore();

  03ba4	8b 45 f8	 mov	 eax, DWORD PTR _n$240870[ebp]
  03ba7	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  03bad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03bb0	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  03bb4	e8 00 00 00 00	 call	 ?ClearScore@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::ClearScore

; 1652 : 	}

  03bb9	eb da		 jmp	 SHORT $LN11@CalcScore
$LN10@CalcScore:

; 1653 : 
; 1654 : 	for (int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  03bbb	c7 45 f4 b0 36
	00 00		 mov	 DWORD PTR _n$240874[ebp], 14000 ; 000036b0H
  03bc2	eb 09		 jmp	 SHORT $LN9@CalcScore
$LN8@CalcScore:
  03bc4	8b 45 f4	 mov	 eax, DWORD PTR _n$240874[ebp]
  03bc7	83 c0 01	 add	 eax, 1
  03bca	89 45 f4	 mov	 DWORD PTR _n$240874[ebp], eax
$LN9@CalcScore:
  03bcd	81 7d f4 98 3a
	00 00		 cmp	 DWORD PTR _n$240874[ebp], 15000 ; 00003a98H
  03bd4	0f 8d f5 00 00
	00		 jge	 $LN7@CalcScore

; 1655 : 	{
; 1656 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  03bda	8b 45 f4	 mov	 eax, DWORD PTR _n$240874[ebp]
  03bdd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03be3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03be9	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  03bee	0f 85 d6 00 00
	00		 jne	 $LN6@CalcScore

; 1657 : 		{
; 1658 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  03bf4	8b 45 f4	 mov	 eax, DWORD PTR _n$240874[ebp]
  03bf7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03bfd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03c03	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  03c0b	83 fa 09	 cmp	 edx, 9
  03c0e	75 09		 jne	 SHORT $LN15@CalcScore
  03c10	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  03c17	eb 22		 jmp	 SHORT $LN16@CalcScore
$LN15@CalcScore:
  03c19	8b 45 f4	 mov	 eax, DWORD PTR _n$240874[ebp]
  03c1c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03c22	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03c28	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  03c30	33 c0		 xor	 eax, eax
  03c32	83 fa 20	 cmp	 edx, 32			; 00000020H
  03c35	0f 94 c0	 sete	 al
  03c38	89 45 ac	 mov	 DWORD PTR tv87[ebp], eax
$LN16@CalcScore:
  03c3b	83 7d ac 00	 cmp	 DWORD PTR tv87[ebp], 0
  03c3f	0f 84 85 00 00
	00		 je	 $LN6@CalcScore

; 1659 : 			{
; 1660 : 				if ( DS_LEVEL_RANGE(gObj[n].m_bDevilSquareIndex) != FALSE )

  03c45	8b 45 f4	 mov	 eax, DWORD PTR _n$240874[ebp]
  03c48	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03c4e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03c54	0f b6 94 01 9c
	0e 00 00	 movzx	 edx, BYTE PTR [ecx+eax+3740]
  03c5c	85 d2		 test	 edx, edx
  03c5e	7d 09		 jge	 SHORT $LN17@CalcScore
  03c60	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
  03c67	eb 22		 jmp	 SHORT $LN18@CalcScore
$LN17@CalcScore:
  03c69	8b 45 f4	 mov	 eax, DWORD PTR _n$240874[ebp]
  03c6c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03c72	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03c78	0f b6 94 01 9c
	0e 00 00	 movzx	 edx, BYTE PTR [ecx+eax+3740]
  03c80	33 c0		 xor	 eax, eax
  03c82	83 fa 06	 cmp	 edx, 6
  03c85	0f 9e c0	 setle	 al
  03c88	89 45 ac	 mov	 DWORD PTR tv132[ebp], eax
$LN18@CalcScore:
  03c8b	83 7d ac 00	 cmp	 DWORD PTR tv132[ebp], 0
  03c8f	74 39		 je	 SHORT $LN6@CalcScore

; 1661 : 				{
; 1662 : 					this->m_DevilSquareGround[gObj[n].m_bDevilSquareIndex].InsertObj(&gObj[n]);

  03c91	8b 45 f4	 mov	 eax, DWORD PTR _n$240874[ebp]
  03c94	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03c9a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03ca0	50		 push	 eax
  03ca1	8b 4d f4	 mov	 ecx, DWORD PTR _n$240874[ebp]
  03ca4	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  03caa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03cb0	0f b6 84 0a 9c
	0e 00 00	 movzx	 eax, BYTE PTR [edx+ecx+3740]
  03cb8	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  03cbe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03cc1	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  03cc5	e8 00 00 00 00	 call	 ?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquareGround::InsertObj
$LN6@CalcScore:

; 1663 : 				}
; 1664 : 			}
; 1665 : 		}
; 1666 : 	}

  03cca	e9 f5 fe ff ff	 jmp	 $LN8@CalcScore
$LN7@CalcScore:

; 1667 : 
; 1668 : 	for (int  n=0;n<MAX_DEVILSQUARE_GROUND;n++)

  03ccf	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$240881[ebp], 0
  03cd6	eb 09		 jmp	 SHORT $LN3@CalcScore
$LN2@CalcScore:
  03cd8	8b 45 f0	 mov	 eax, DWORD PTR _n$240881[ebp]
  03cdb	83 c0 01	 add	 eax, 1
  03cde	89 45 f0	 mov	 DWORD PTR _n$240881[ebp], eax
$LN3@CalcScore:
  03ce1	83 7d f0 07	 cmp	 DWORD PTR _n$240881[ebp], 7
  03ce5	7d 2c		 jge	 SHORT $LN13@CalcScore

; 1669 : 	{
; 1670 : 		this->m_DevilSquareGround[n].SortScore();

  03ce7	8b 45 f0	 mov	 eax, DWORD PTR _n$240881[ebp]
  03cea	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  03cf0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03cf3	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  03cf7	e8 00 00 00 00	 call	 ?SortScore@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::SortScore

; 1671 : 		this->m_DevilSquareGround[n].SendScore();

  03cfc	8b 45 f0	 mov	 eax, DWORD PTR _n$240881[ebp]
  03cff	69 c0 a8 04 00
	00		 imul	 eax, 1192		; 000004a8H
  03d05	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d08	8d 4c 01 3c	 lea	 ecx, DWORD PTR [ecx+eax+60]
  03d0c	e8 00 00 00 00	 call	 ?SendScore@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::SendScore

; 1672 : 	}

  03d11	eb c5		 jmp	 SHORT $LN2@CalcScore
$LN13@CalcScore:

; 1673 : }

  03d13	5f		 pop	 edi
  03d14	5e		 pop	 esi
  03d15	5b		 pop	 ebx
  03d16	8b e5		 mov	 esp, ebp
  03d18	5d		 pop	 ebp
  03d19	c3		 ret	 0
?CalcScore@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::CalcScore
; Function compile flags: /Odtp /ZI
_pMsg$ = -8						; size = 3
_this$ = -4						; size = 4
?SendLiveCall@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::SendLiveCall
; _this$ = ecx

; 1681 : {

  03d20	55		 push	 ebp
  03d21	8b ec		 mov	 ebp, esp
  03d23	83 ec 48	 sub	 esp, 72			; 00000048H
  03d26	53		 push	 ebx
  03d27	56		 push	 esi
  03d28	57		 push	 edi
  03d29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1682 : 	PMSG_ANS_EVENTLIVE pMsg;
; 1683 : 	
; 1684 : 	pMsg.h.c = 0xC1;

  03d2c	c6 45 f8 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H

; 1685 : 	pMsg.h.headcode = 0x03;

  03d30	c6 45 fa 03	 mov	 BYTE PTR _pMsg$[ebp+2], 3

; 1686 : 	pMsg.h.size = sizeof(pMsg);

  03d34	c6 45 f9 03	 mov	 BYTE PTR _pMsg$[ebp+1], 3

; 1687 : 
; 1688 : 	DataSendRank((char *)&pMsg, pMsg.h.size);

  03d38	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  03d3c	50		 push	 eax
  03d3d	8d 4d f8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  03d40	51		 push	 ecx
  03d41	e8 00 00 00 00	 call	 ?DataSendRank@@YAXPADH@Z ; DataSendRank
  03d46	83 c4 08	 add	 esp, 8

; 1689 : }

  03d49	5f		 pop	 edi
  03d4a	5e		 pop	 esi
  03d4b	5b		 pop	 ebx
  03d4c	8b e5		 mov	 esp, ebp
  03d4e	5d		 pop	 ebp
  03d4f	c3		 ret	 0
?SendLiveCall@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::SendLiveCall
; Function compile flags: /Odtp /ZI
tv81 = -76						; size = 4
_n$240901 = -8						; size = 4
_this$ = -4						; size = 4
?gObjScoreClear@CDevilSquare@@AAEXXZ PROC		; CDevilSquare::gObjScoreClear
; _this$ = ecx

; 1692 : {

  03d50	55		 push	 ebp
  03d51	8b ec		 mov	 ebp, esp
  03d53	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03d56	53		 push	 ebx
  03d57	56		 push	 esi
  03d58	57		 push	 edi
  03d59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  03d5c	c7 45 f8 b0 36
	00 00		 mov	 DWORD PTR _n$240901[ebp], 14000 ; 000036b0H
  03d63	eb 09		 jmp	 SHORT $LN5@gObjScoreC
$LN4@gObjScoreC:
  03d65	8b 45 f8	 mov	 eax, DWORD PTR _n$240901[ebp]
  03d68	83 c0 01	 add	 eax, 1
  03d6b	89 45 f8	 mov	 DWORD PTR _n$240901[ebp], eax
$LN5@gObjScoreC:
  03d6e	81 7d f8 98 3a
	00 00		 cmp	 DWORD PTR _n$240901[ebp], 15000 ; 00003a98H
  03d75	0f 8d ba 00 00
	00		 jge	 $LN6@gObjScoreC

; 1694 : 	{
; 1695 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  03d7b	8b 45 f8	 mov	 eax, DWORD PTR _n$240901[ebp]
  03d7e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03d84	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03d8a	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  03d8f	0f 85 9b 00 00
	00		 jne	 $LN2@gObjScoreC

; 1696 : 		{
; 1697 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  03d95	8b 45 f8	 mov	 eax, DWORD PTR _n$240901[ebp]
  03d98	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03d9e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03da4	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  03dac	83 fa 09	 cmp	 edx, 9
  03daf	75 09		 jne	 SHORT $LN8@gObjScoreC
  03db1	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  03db8	eb 22		 jmp	 SHORT $LN9@gObjScoreC
$LN8@gObjScoreC:
  03dba	8b 45 f8	 mov	 eax, DWORD PTR _n$240901[ebp]
  03dbd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03dc3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03dc9	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  03dd1	33 c0		 xor	 eax, eax
  03dd3	83 fa 20	 cmp	 edx, 32			; 00000020H
  03dd6	0f 94 c0	 sete	 al
  03dd9	89 45 b4	 mov	 DWORD PTR tv81[ebp], eax
$LN9@gObjScoreC:
  03ddc	83 7d b4 00	 cmp	 DWORD PTR tv81[ebp], 0
  03de0	74 4e		 je	 SHORT $LN2@gObjScoreC

; 1698 : 			{
; 1699 : 				gObj[n].m_nEventScore = 0;

  03de2	8b 45 f8	 mov	 eax, DWORD PTR _n$240901[ebp]
  03de5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03deb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03df1	c7 84 01 90 0e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+3728], 0

; 1700 : 				gObj[n].m_nEventMoney = 0;

  03dfc	8b 45 f8	 mov	 eax, DWORD PTR _n$240901[ebp]
  03dff	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03e05	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03e0b	c7 84 01 98 0e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+3736], 0

; 1701 : 				gObj[n].m_nEventExp = 0;

  03e16	8b 45 f8	 mov	 eax, DWORD PTR _n$240901[ebp]
  03e19	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03e1f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03e25	c7 84 01 94 0e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+3732], 0
$LN2@gObjScoreC:

; 1702 : 			}
; 1703 : 		}
; 1704 : 	}

  03e30	e9 30 ff ff ff	 jmp	 $LN4@gObjScoreC
$LN6@gObjScoreC:

; 1705 : }

  03e35	5f		 pop	 edi
  03e36	5e		 pop	 esi
  03e37	5b		 pop	 ebx
  03e38	8b e5		 mov	 esp, ebp
  03e3a	5d		 pop	 ebp
  03e3b	c3		 ret	 0
?gObjScoreClear@CDevilSquare@@AAEXXZ ENDP		; CDevilSquare::gObjScoreClear
_TEXT	ENDS
PUBLIC	??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@ ; `string'
EXTRN	?gObjUserKill@@YAXH@Z:PROC			; gObjUserKill
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
;	COMDAT ??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@
CONST	SEGMENT
??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@ DB '['
	DB	'DevilSquare] [%s][%s] Found user in DevilSquare [State:Close]'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv81 = -76						; size = 4
_n$240910 = -8						; size = 4
_this$ = -4						; size = 4
?CheckInvalidUser@CDevilSquare@@AAEXXZ PROC		; CDevilSquare::CheckInvalidUser
; _this$ = ecx

; 1708 : {

  03e40	55		 push	 ebp
  03e41	8b ec		 mov	 ebp, esp
  03e43	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03e46	53		 push	 ebx
  03e47	56		 push	 esi
  03e48	57		 push	 edi
  03e49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1709 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  03e4c	c7 45 f8 b0 36
	00 00		 mov	 DWORD PTR _n$240910[ebp], 14000 ; 000036b0H
  03e53	eb 09		 jmp	 SHORT $LN6@CheckInval
$LN5@CheckInval:
  03e55	8b 45 f8	 mov	 eax, DWORD PTR _n$240910[ebp]
  03e58	83 c0 01	 add	 eax, 1
  03e5b	89 45 f8	 mov	 DWORD PTR _n$240910[ebp], eax
$LN6@CheckInval:
  03e5e	81 7d f8 98 3a
	00 00		 cmp	 DWORD PTR _n$240910[ebp], 15000 ; 00003a98H
  03e65	0f 8d c8 00 00
	00		 jge	 $LN7@CheckInval

; 1710 : 	{
; 1711 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  03e6b	8b 45 f8	 mov	 eax, DWORD PTR _n$240910[ebp]
  03e6e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03e74	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03e7a	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  03e7f	0f 85 a9 00 00
	00		 jne	 $LN3@CheckInval

; 1712 : 		{
; 1713 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  03e85	8b 45 f8	 mov	 eax, DWORD PTR _n$240910[ebp]
  03e88	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03e8e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03e94	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  03e9c	83 fa 09	 cmp	 edx, 9
  03e9f	75 09		 jne	 SHORT $LN9@CheckInval
  03ea1	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  03ea8	eb 22		 jmp	 SHORT $LN10@CheckInval
$LN9@CheckInval:
  03eaa	8b 45 f8	 mov	 eax, DWORD PTR _n$240910[ebp]
  03ead	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03eb3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03eb9	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  03ec1	33 c0		 xor	 eax, eax
  03ec3	83 fa 20	 cmp	 edx, 32			; 00000020H
  03ec6	0f 94 c0	 sete	 al
  03ec9	89 45 b4	 mov	 DWORD PTR tv81[ebp], eax
$LN10@CheckInval:
  03ecc	83 7d b4 00	 cmp	 DWORD PTR tv81[ebp], 0
  03ed0	74 5c		 je	 SHORT $LN3@CheckInval

; 1714 : 			{
; 1715 : 				if ( this->m_eState == DevilSquare_CLOSE )

  03ed2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03ed5	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  03ed9	75 53		 jne	 SHORT $LN3@CheckInval

; 1716 : 				{
; 1717 : 					LogAddC(2, "[DevilSquare] [%s][%s] Found user in DevilSquare [State:Close]", gObj[n].AccountID, gObj[n].Name);

  03edb	8b 45 f8	 mov	 eax, DWORD PTR _n$240910[ebp]
  03ede	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03ee4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03eea	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  03eee	52		 push	 edx
  03eef	8b 45 f8	 mov	 eax, DWORD PTR _n$240910[ebp]
  03ef2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03ef8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03efe	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  03f02	52		 push	 edx
  03f03	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@
  03f08	6a 02		 push	 2
  03f0a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  03f10	83 c4 10	 add	 esp, 16			; 00000010H

; 1718 : 					gObjUserKill(gObj[n].m_Index);

  03f13	8b 45 f8	 mov	 eax, DWORD PTR _n$240910[ebp]
  03f16	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03f1c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03f22	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  03f25	52		 push	 edx
  03f26	e8 00 00 00 00	 call	 ?gObjUserKill@@YAXH@Z	; gObjUserKill
  03f2b	83 c4 04	 add	 esp, 4
$LN3@CheckInval:

; 1719 : 				}
; 1720 : 			}
; 1721 : 		}
; 1722 : 	}

  03f2e	e9 22 ff ff ff	 jmp	 $LN5@CheckInval
$LN7@CheckInval:

; 1723 : }

  03f33	5f		 pop	 edi
  03f34	5e		 pop	 esi
  03f35	5b		 pop	 ebx
  03f36	8b e5		 mov	 esp, ebp
  03f38	5d		 pop	 ebp
  03f39	c3		 ret	 0
?CheckInvalidUser@CDevilSquare@@AAEXXZ ENDP		; CDevilSquare::CheckInvalidUser
_TEXT	ENDS
PUBLIC	??0?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
PUBLIC	??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@XZ ; std::allocator<DEVILSQUARE_START_TIME>::allocator<DEVILSQUARE_START_TIME>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T241748 = -72						; size = 4
_this$ = -4						; size = 4
??0?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >, COMDAT
; _this$ = ecx

; 607  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T241748[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@XZ ; std::allocator<DEVILSQUARE_START_TIME>::allocator<DEVILSQUARE_START_TIME>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >

; 608  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
_TEXT	ENDS
PUBLIC	??1?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
PUBLIC	?_Tidy@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >, COMDAT
; _this$ = ecx

; 769  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 770  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Tidy

; 771  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
__ehhandler$??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
PUBLIC	??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
PUBLIC	?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Nextnode(this->_Myhead), this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
  0001b	83 c4 04	 add	 esp, 4
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	50		 push	 eax
  00021	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00024	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
  00029	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?begin@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Myhead, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::size, COMDAT
; _this$ = ecx

; 876  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 877  : 		return (this->_Mysize);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 878  : 		}

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::size
_TEXT	ENDS
PUBLIC	?_Insert@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@ABUDEVILSQUARE_START_TIME@@@Z ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Insert
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXABUDEVILSQUARE_START_TIME@@@Z
_TEXT	SEGMENT
$T241767 = -76						; size = 4
$T241768 = -72						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXABUDEVILSQUARE_START_TIME@@@Z PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::push_back, COMDAT
; _this$ = ecx

; 926  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 927  : 		_Insert(end(), _Val);

  0000c	8d 45 b8	 lea	 eax, DWORD PTR $T241768[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@XZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d b4	 mov	 DWORD PTR $T241767[ebp], ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00020	52		 push	 edx
  00021	8b 45 b4	 mov	 eax, DWORD PTR $T241767[ebp]
  00024	50		 push	 eax
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?_Insert@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@ABUDEVILSQUARE_START_TIME@@@Z ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Insert

; 928  : 		}

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?push_back@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXABUDEVILSQUARE_START_TIME@@@Z ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::push_back
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >, COMDAT
; _this$ = ecx

; 336  : 	_List_iterator()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >

; 337  : 		{	// construct with null node
; 338  : 		}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEABUDEVILSQUARE_START_TIME@@XZ ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
; Function compile flags: /Odtp /ZI
;	COMDAT ??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ PROC ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 359  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 360  : 		return ((reference)**(_Mybase *)this);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??D?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEABUDEVILSQUARE_START_TIME@@XZ ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*

; 361  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEAAUDEVILSQUARE_START_TIME@@XZ ENDP ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++
; Function compile flags: /Odtp /ZI
;	COMDAT ??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 369  : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 		++(*(_Mybase *)this);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??E?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++

; 371  : 		return (*this);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 372  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 375  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 376  : 		_Myiter _Tmp = *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 377  : 		++*this;

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++

; 378  : 		return (_Tmp);

  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Tmp$[ebp]
  00022	89 08		 mov	 DWORD PTR [eax], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 379  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
??E?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator==, COMDAT
; _this$ = ecx

; 281  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	33 c0		 xor	 eax, eax
  00016	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00018	0f 94 c0	 sete	 al

; 296  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator!=, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 300  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 301  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Incsize@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXI@Z ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Incsize
PUBLIC	?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Buynode
PUBLIC	?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Prevnode
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Insert@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@ABUDEVILSQUARE_START_TIME@@@Z
_TEXT	SEGMENT
__Newnode$ = -12					; size = 4
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@ABUDEVILSQUARE_START_TIME@@@Z PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Insert, COMDAT
; _this$ = ecx

; 967  : 		{	// insert _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 968  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 969  : 		if (_Where._Getcont() != this)
; 970  : 			_DEBUG_ERROR("list insert iterator outside range");
; 971  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 972  : 
; 973  : 		_Nodeptr _Pnode = _Where._Mynode();

  0000c	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_Mynode
  00014	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 974  : 		_Nodeptr _Newnode =
; 975  : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode), _Val);

  00017	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Prevnode
  00024	83 c4 04	 add	 esp, 4
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	52		 push	 edx
  0002a	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Buynode
  00036	89 45 f4	 mov	 DWORD PTR __Newnode$[ebp], eax

; 976  : 		_Incsize(1);

  00039	6a 01		 push	 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?_Incsize@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXI@Z ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Incsize

; 977  : 		this->_Prevnode(_Pnode) = _Newnode;

  00043	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Prevnode
  0004c	83 c4 04	 add	 esp, 4
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00052	89 08		 mov	 DWORD PTR [eax], ecx

; 978  : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  00054	8b 45 f4	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Prevnode
  0005d	83 c4 04	 add	 esp, 4
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
  00068	83 c4 04	 add	 esp, 4
  0006b	8b 55 f4	 mov	 edx, DWORD PTR __Newnode$[ebp]
  0006e	89 10		 mov	 DWORD PTR [eax], edx

; 979  : 		}

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
?_Insert@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@2@ABUDEVILSQUARE_START_TIME@@@Z ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Insert
_TEXT	ENDS
PUBLIC	?clear@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::clear
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1496 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1497 : 		clear();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?clear@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::clear

; 1498 : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Tidy@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Tidy
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::allocate
PUBLIC	??0?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z ; std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
PUBLIC	??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@ABV01@@Z ; std::allocator<DEVILSQUARE_START_TIME>::allocator<DEVILSQUARE_START_TIME>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z PROC ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >, COMDAT
; _this$ = ecx

; 493  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@ABV01@@Z ; std::allocator<DEVILSQUARE_START_TIME>::allocator<DEVILSQUARE_START_TIME>
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z ; std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >

; 494  : 		this->_Mysize = 0;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

  0002a	6a 01		 push	 1
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 08	 add	 ecx, 8
  00032	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::allocate
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	89 01		 mov	 DWORD PTR [ecx], eax

; 496  : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
  00047	83 c4 04	 add	 esp, 4
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0004f	89 08		 mov	 DWORD PTR [eax], ecx

; 497  : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Prevnode
  0005c	83 c4 04	 add	 esp, 4
  0005f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00062	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00064	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 		}

  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
??0?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z ENDP ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::deallocate
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ PROC ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >, COMDAT
; _this$ = ecx

; 501  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 502  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  0000c	6a 01		 push	 1
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 08	 add	 ecx, 8
  0001a	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::deallocate

; 503  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::~_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z PROC ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@XZ PROC ; std::allocator<DEVILSQUARE_START_TIME>::allocator<DEVILSQUARE_START_TIME>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@XZ ENDP ; std::allocator<DEVILSQUARE_START_TIME>::allocator<DEVILSQUARE_START_TIME>
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >, COMDAT
; _this$ = ecx

; 342  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >

; 343  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >, COMDAT
; _this$ = ecx

; 179  : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>

; 180  : 		}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAUDEVILSQUARE_START_TIME@@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Myval
; Function compile flags: /Odtp /ZI
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEABUDEVILSQUARE_START_TIME@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEABUDEVILSQUARE_START_TIME@@XZ PROC ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 201  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?_Myval@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAUDEVILSQUARE_START_TIME@@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Myval
  00017	83 c4 04	 add	 esp, 4

; 218  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QBEABUDEVILSQUARE_START_TIME@@XZ ENDP ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator*
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 221  : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	89 02		 mov	 DWORD PTR [edx], eax

; 238  : 		return (*this);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 239  : 		}

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@0@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>,std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Pnode$ = -12						; size = 4
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
?clear@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::clear, COMDAT
; _this$ = ecx

; 1096 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1097 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1098 : 		this->_Orphan_ptr(*this, 0);
; 1099 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1100 : 
; 1101 : 		_Nodeptr _Pnext;
; 1102 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	89 55 f4	 mov	 DWORD PTR __Pnode$[ebp], edx

; 1103 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00032	89 08		 mov	 DWORD PTR [eax], ecx

; 1104 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Prevnode
  0003f	83 c4 04	 add	 esp, 4
  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00047	89 08		 mov	 DWORD PTR [eax], ecx

; 1105 : 		this->_Mysize = 0;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00053	eb 06		 jmp	 SHORT $LN3@clear
$LN2@clear:

; 1106 : 
; 1107 : 		for (; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00055	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00058	89 45 f4	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN3@clear:
  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00061	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00063	74 37		 je	 SHORT $LN4@clear

; 1108 : 			{	// delete an element
; 1109 : 			_Pnext = this->_Nextnode(_Pnode);

  00065	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
  0006e	83 c4 04	 add	 esp, 4
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	89 4d f8	 mov	 DWORD PTR __Pnext$[ebp], ecx

; 1110 : 
; 1111 : 			_Dest_val(this->_Alnod, _Pnode);

  00076	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	83 c1 08	 add	 ecx, 8
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@0@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>,std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>
  00086	83 c4 08	 add	 esp, 8

; 1112 : 			this->_Alnod.deallocate(_Pnode, 1);

  00089	6a 01		 push	 1
  0008b	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	83 c1 08	 add	 ecx, 8
  00095	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::deallocate

; 1113 : 			}

  0009a	eb b9		 jmp	 SHORT $LN2@clear
$LN4@clear:

; 1114 : 		}

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
?clear@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXXZ ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::clear
_TEXT	ENDS
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?max_size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::max_size
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Incsize@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Incsize@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXI@Z PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Incsize, COMDAT
; _this$ = ecx

; 1519 : 		{	// alter element count, with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1520 : 		if (max_size() - this->_Mysize - 1 < _Count)

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?max_size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::max_size
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  0001a	83 e8 01	 sub	 eax, 1
  0001d	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00020	73 0a		 jae	 SHORT $LN1@Incsize

; 1521 : 			_Xlength_error("list<T> too long");

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00027	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN1@Incsize:

; 1522 : 		this->_Mysize += _Count;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00032	03 4d 08	 add	 ecx, DWORD PTR __Count$[ebp]
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN3@Incsize:

; 1523 : 		}

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?_Incsize@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEXI@Z ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Incsize
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@UDEVILSQUARE_START_TIME@@ABU3@@std@@YAXAAV?$allocator@UDEVILSQUARE_START_TIME@@@0@PAUDEVILSQUARE_START_TIME@@ABU2@@Z ; std::_Cons_val<std::allocator<DEVILSQUARE_START_TIME>,DEVILSQUARE_START_TIME,DEVILSQUARE_START_TIME const &>
PUBLIC	??$addressof@UDEVILSQUARE_START_TIME@@@std@@YAPAUDEVILSQUARE_START_TIME@@AAU1@@Z ; std::addressof<DEVILSQUARE_START_TIME>
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z$0
__unwindtable$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z$2
__ehfuncinfo$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv133 = -92						; size = 4
tv132 = -92						; size = 4
tv131 = -92						; size = 4
__Pnode$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z PROC ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Buynode, COMDAT
; _this$ = ecx

; 507  : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 50	 sub	 esp, 80			; 00000050H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 508  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  0002f	6a 01		 push	 1
  00031	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 08	 add	 ecx, 8
  00037	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::allocate
  0003c	89 45 e8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 509  : 
; 510  : 		_TRY_BEGIN

  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 511  : 		this->_Nextnode(_Pnode) = _Next;

  00046	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Nextnode
  0004f	83 c4 04	 add	 esp, 4
  00052	89 45 a4	 mov	 DWORD PTR tv131[ebp], eax
  00055	8b 4d a4	 mov	 ecx, DWORD PTR tv131[ebp]
  00058	8b 55 08	 mov	 edx, DWORD PTR __Next$[ebp]
  0005b	89 11		 mov	 DWORD PTR [ecx], edx

; 512  : 		this->_Prevnode(_Pnode) = _Prev;

  0005d	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Prevnode
  00066	83 c4 04	 add	 esp, 4
  00069	89 45 a4	 mov	 DWORD PTR tv132[ebp], eax
  0006c	8b 4d a4	 mov	 ecx, DWORD PTR tv132[ebp]
  0006f	8b 55 0c	 mov	 edx, DWORD PTR __Prev$[ebp]
  00072	89 11		 mov	 DWORD PTR [ecx], edx

; 513  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Pnode)), _Val);

  00074	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?_Myval@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAUDEVILSQUARE_START_TIME@@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Myval
  0007d	83 c4 04	 add	 esp, 4
  00080	89 45 a4	 mov	 DWORD PTR tv133[ebp], eax
  00083	8b 4d a4	 mov	 ecx, DWORD PTR tv133[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ??$addressof@UDEVILSQUARE_START_TIME@@@std@@YAPAUDEVILSQUARE_START_TIME@@AAU1@@Z ; std::addressof<DEVILSQUARE_START_TIME>
  0008c	83 c4 04	 add	 esp, 4
  0008f	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00092	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00095	52		 push	 edx
  00096	8b 45 a0	 mov	 eax, DWORD PTR tv134[ebp]
  00099	50		 push	 eax
  0009a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	83 c1 09	 add	 ecx, 9
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@UDEVILSQUARE_START_TIME@@ABU3@@std@@YAXAAV?$allocator@UDEVILSQUARE_START_TIME@@@0@PAUDEVILSQUARE_START_TIME@@ABU2@@Z ; std::_Cons_val<std::allocator<DEVILSQUARE_START_TIME>,DEVILSQUARE_START_TIME,DEVILSQUARE_START_TIME const &>
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	eb 27		 jmp	 SHORT $LN4@Buynode
__catch$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z$0:

; 514  : 		_CATCH_ALL
; 515  : 		this->_Alnod.deallocate(_Pnode, 1);

  000ab	6a 01		 push	 1
  000ad	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	83 c1 08	 add	 ecx, 8
  000b7	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::deallocate

; 516  : 		_RERAISE;

  000bc	6a 00		 push	 0
  000be	6a 00		 push	 0
  000c0	e8 00 00 00 00	 call	 __CxxThrowException@8

; 517  : 		_CATCH_END

  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000cc	b8 00 00 00 00	 mov	 eax, __tryend$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z$1
  000d1	c3		 ret	 0
$LN4@Buynode:
  000d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z$1:

; 518  : 
; 519  : 		return (_Pnode);

  000d9	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:

; 520  : 		}

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e6	59		 pop	 ecx
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@0ABUDEVILSQUARE_START_TIME@@@Z ENDP ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Buynode
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z PROC ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Prevnode, COMDAT

; 565  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	83 c0 04	 add	 eax, 4

; 567  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Prevnode@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Prevnode
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myval@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAUDEVILSQUARE_START_TIME@@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAUDEVILSQUARE_START_TIME@@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z PROC ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Myval, COMDAT

; 570  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 571  : 		return ((reference)(*_Pnode)._Myval);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	83 c0 08	 add	 eax, 8

; 572  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Myval@?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@SAAAUDEVILSQUARE_START_TIME@@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z ENDP ; std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Myval
_TEXT	ENDS
PUBLIC	??$?0UDEVILSQUARE_START_TIME@@@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node><DEVILSQUARE_START_TIME>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z PROC ; std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >, COMDAT
; _this$ = ecx

; 438  : 		{	// construct allocators from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e8 00 00 00 00	 call	 ??$?0UDEVILSQUARE_START_TIME@@@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node><DEVILSQUARE_START_TIME>
  0001b	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 09	 add	 ecx, 9
  00025	e8 00 00 00 00	 call	 ??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@ABV01@@Z ; std::allocator<DEVILSQUARE_START_TIME>::allocator<DEVILSQUARE_START_TIME>

; 439  : 		}

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QAE@V?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z ENDP ; std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@ABV01@@Z PROC ; std::allocator<DEVILSQUARE_START_TIME>::allocator<DEVILSQUARE_START_TIME>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<DEVILSQUARE_START_TIME>::allocator<DEVILSQUARE_START_TIME>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>
; Function compile flags: /Odtp /ZI
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >, COMDAT
; _this$ = ecx

; 184  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>

; 185  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >::_List_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 36   : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 37   : 		}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 92   : 		{	// return node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 		return (_Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 94   : 		}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QBEIXZ ; std::allocator<DEVILSQUARE_START_TIME>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ PROC ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::max_size, COMDAT
; _this$ = ecx

; 881  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 882  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 09	 add	 ecx, 9
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QBEIXZ ; std::allocator<DEVILSQUARE_START_TIME>::max_size

; 883  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$list@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@QBEIXZ ENDP ; std::list<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::max_size
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 42   : 		this->_Adopt(_Plist);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 43   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@PBV?$_List_val@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >,std::_Iterator_base0>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QBEIXZ PROC ; std::allocator<DEVILSQUARE_START_TIME>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QBEIXZ ENDP ; std::allocator<DEVILSQUARE_START_TIME>::max_size
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::destroy
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@0@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@0@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>,std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@0@PAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>,std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$addressof@UDEVILSQUARE_START_TIME@@@std@@YAPAUDEVILSQUARE_START_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UDEVILSQUARE_START_TIME@@@std@@YAPAUDEVILSQUARE_START_TIME@@AAU1@@Z PROC ; std::addressof<DEVILSQUARE_START_TIME>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@UDEVILSQUARE_START_TIME@@@std@@YAPAUDEVILSQUARE_START_TIME@@AAU1@@Z ENDP ; std::addressof<DEVILSQUARE_START_TIME>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAEXPAUDEVILSQUARE_START_TIME@@ABU3@@Z ; std::allocator<DEVILSQUARE_START_TIME>::construct
PUBLIC	??$forward@ABUDEVILSQUARE_START_TIME@@@std@@YAABUDEVILSQUARE_START_TIME@@ABU1@@Z ; std::forward<DEVILSQUARE_START_TIME const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@UDEVILSQUARE_START_TIME@@ABU3@@std@@YAXAAV?$allocator@UDEVILSQUARE_START_TIME@@@0@PAUDEVILSQUARE_START_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@UDEVILSQUARE_START_TIME@@ABU3@@std@@YAXAAV?$allocator@UDEVILSQUARE_START_TIME@@@0@PAUDEVILSQUARE_START_TIME@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<DEVILSQUARE_START_TIME>,DEVILSQUARE_START_TIME,DEVILSQUARE_START_TIME const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUDEVILSQUARE_START_TIME@@@std@@YAABUDEVILSQUARE_START_TIME@@ABU1@@Z ; std::forward<DEVILSQUARE_START_TIME const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAEXPAUDEVILSQUARE_START_TIME@@ABU3@@Z ; std::allocator<DEVILSQUARE_START_TIME>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@UDEVILSQUARE_START_TIME@@ABU3@@std@@YAXAAV?$allocator@UDEVILSQUARE_START_TIME@@@0@PAUDEVILSQUARE_START_TIME@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<DEVILSQUARE_START_TIME>,DEVILSQUARE_START_TIME,DEVILSQUARE_START_TIME const &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$?0UDEVILSQUARE_START_TIME@@@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UDEVILSQUARE_START_TIME@@@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z PROC ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node><DEVILSQUARE_START_TIME>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??$?0UDEVILSQUARE_START_TIME@@@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UDEVILSQUARE_START_TIME@@@1@@Z ENDP ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node><DEVILSQUARE_START_TIME>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T241858 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 ff ff
	ff 0f		 cmp	 DWORD PTR __Count$[ebp], 268435455 ; 0fffffffH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	c1 e0 04	 shl	 eax, 4
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T241858[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T241858[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z ; std::_Construct<DEVILSQUARE_START_TIME,DEVILSQUARE_START_TIME const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAEXPAUDEVILSQUARE_START_TIME@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAEXPAUDEVILSQUARE_START_TIME@@ABU3@@Z PROC ; std::allocator<DEVILSQUARE_START_TIME>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z ; std::_Construct<DEVILSQUARE_START_TIME,DEVILSQUARE_START_TIME const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UDEVILSQUARE_START_TIME@@@std@@QAEXPAUDEVILSQUARE_START_TIME@@ABU3@@Z ENDP ; std::allocator<DEVILSQUARE_START_TIME>::construct
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUDEVILSQUARE_START_TIME@@@std@@YAABUDEVILSQUARE_START_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUDEVILSQUARE_START_TIME@@@std@@YAABUDEVILSQUARE_START_TIME@@ABU1@@Z PROC ; std::forward<DEVILSQUARE_START_TIME const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUDEVILSQUARE_START_TIME@@@std@@YAABUDEVILSQUARE_START_TIME@@ABU1@@Z ENDP ; std::forward<DEVILSQUARE_START_TIME const &>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T241867 = -88						; size = 4
$T241868 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z PROC ; std::_Construct<DEVILSQUARE_START_TIME,DEVILSQUARE_START_TIME const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 08		 push	 8
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T241868[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T241868[ebp], 0
  0004a	74 21		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUDEVILSQUARE_START_TIME@@@std@@YAABUDEVILSQUARE_START_TIME@@ABU1@@Z ; std::forward<DEVILSQUARE_START_TIME const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005d	8b 4d ac	 mov	 ecx, DWORD PTR $T241868[ebp]
  00060	89 11		 mov	 DWORD PTR [ecx], edx
  00062	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00065	8b 55 ac	 mov	 edx, DWORD PTR $T241868[ebp]
  00068	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  0006b	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  0006d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  00074	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00077	89 45 a8	 mov	 DWORD PTR $T241867[ebp], eax
  0007a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T241868[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UDEVILSQUARE_START_TIME@@ABU1@@std@@YAXPAUDEVILSQUARE_START_TIME@@ABU1@@Z ENDP ; std::_Construct<DEVILSQUARE_START_TIME,DEVILSQUARE_START_TIME const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UDEVILSQUARE_START_TIME@@V?$allocator@UDEVILSQUARE_START_TIME@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<DEVILSQUARE_START_TIME,std::allocator<DEVILSQUARE_START_TIME> >::_Node>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\devilsquare.cpp
;	COMDAT ??__Eg_DevilSquare@@YAXXZ
text$yc	SEGMENT
??__Eg_DevilSquare@@YAXXZ PROC				; `dynamic initializer for 'g_DevilSquare'', COMDAT

; 26   : CDevilSquare g_DevilSquare;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DevilSquare@@3VCDevilSquare@@A ; g_DevilSquare
  0000e	e8 00 00 00 00	 call	 ??0CDevilSquare@@QAE@XZ	; CDevilSquare::CDevilSquare
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_DevilSquare@@YAXXZ ; `dynamic atexit destructor for 'g_DevilSquare''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_DevilSquare@@YAXXZ ENDP				; `dynamic initializer for 'g_DevilSquare''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_DevilSquare@@YAXXZ
text$yd	SEGMENT
??__Fg_DevilSquare@@YAXXZ PROC				; `dynamic atexit destructor for 'g_DevilSquare'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DevilSquare@@3VCDevilSquare@@A ; g_DevilSquare
  0000e	e8 00 00 00 00	 call	 ??1CDevilSquare@@UAE@XZ	; CDevilSquare::~CDevilSquare
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_DevilSquare@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_DevilSquare''
text$yd	ENDS
PUBLIC	?g_DevilSquare@@3VCDevilSquare@@A		; g_DevilSquare
_BSS	SEGMENT
?g_DevilSquare@@3VCDevilSquare@@A DB 02198H DUP (?)	; g_DevilSquare
_BSS	ENDS
CRT$XCU	SEGMENT
_g_DevilSquare$initializer$ DD FLAT:??__Eg_DevilSquare@@YAXXZ
CRT$XCU	ENDS
END
