; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ObjBaseAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	070H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
	DD	010eH
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
	DD	0190H
	DD	0257H
	DD	0190H
	DD	0257H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	ORG $+4
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CObjBaseAttack@@6B@				; CObjBaseAttack::`vftable'
PUBLIC	??0CObjBaseAttack@@QAE@XZ			; CObjBaseAttack::CObjBaseAttack
PUBLIC	??_R4CObjBaseAttack@@6B@			; CObjBaseAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCObjBaseAttack@@@8			; CObjBaseAttack `RTTI Type Descriptor'
PUBLIC	??_R3CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObjBaseAttack@@8			; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheck
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECObjBaseAttack@@UAEPAXI@Z:PROC		; CObjBaseAttack::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CObjBaseAttack@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\objbaseattack.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjBaseAttack@@8 DD FLAT:??_R0?AVCObjBaseAttack@@@8 ; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CObjBaseAttack@@8
rdata$r	SEGMENT
??_R2CObjBaseAttack@@8 DD FLAT:??_R1A@?0A@EA@CObjBaseAttack@@8 ; CObjBaseAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObjBaseAttack@@8
rdata$r	SEGMENT
??_R3CObjBaseAttack@@8 DD 00H				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjBaseAttack@@@8
_DATA	SEGMENT
??_R0?AVCObjBaseAttack@@@8 DD FLAT:??_7type_info@@6B@	; CObjBaseAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjBaseAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CObjBaseAttack@@6B@
rdata$r	SEGMENT
??_R4CObjBaseAttack@@6B@ DD 00H				; CObjBaseAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCObjBaseAttack@@@8
	DD	FLAT:??_R3CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_7CObjBaseAttack@@6B@
CONST	SEGMENT
??_7CObjBaseAttack@@6B@ DD FLAT:??_R4CObjBaseAttack@@6B@ ; CObjBaseAttack::`vftable'
	DD	FLAT:??_ECObjBaseAttack@@UAEPAXI@Z
	DD	FLAT:?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CObjBaseAttack@@QAE@XZ PROC				; CObjBaseAttack::CObjBaseAttack
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CObjBaseAttack@@6B@

; 30   : 	return;
; 31   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CObjBaseAttack@@QAE@XZ ENDP				; CObjBaseAttack::CObjBaseAttack
_TEXT	ENDS
PUBLIC	??1CObjBaseAttack@@UAE@XZ			; CObjBaseAttack::~CObjBaseAttack
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCObjBaseAttack@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCObjBaseAttack@@UAEPAXI@Z PROC			; CObjBaseAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CObjBaseAttack@@UAE@XZ ; CObjBaseAttack::~CObjBaseAttack
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCObjBaseAttack@@UAEPAXI@Z ENDP			; CObjBaseAttack::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CObjBaseAttack@@UAE@XZ PROC				; CObjBaseAttack::~CObjBaseAttack
; _this$ = ecx

; 34   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CObjBaseAttack@@6B@

; 35   : 	return;
; 36   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CObjBaseAttack@@UAE@XZ ENDP				; CObjBaseAttack::~CObjBaseAttack
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::DecreaseArrow
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
EXTRN	?GCItemDurSend@@YAXHEEE@Z:PROC			; GCItemDurSend
EXTRN	?ExConfig@@3VcExConfigs@@A:BYTE			; ExConfig
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv258 = -88						; size = 4
tv222 = -88						; size = 4
tv256 = -84						; size = 4
tv220 = -84						; size = 4
tv253 = -78						; size = 2
tv217 = -78						; size = 2
_Left$236206 = -12					; size = 4
_Right$236205 = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CObjBaseAttack::DecreaseArrow
; _this$ = ecx

; 39   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 58	 sub	 esp, 88			; 00000058H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 	if (lpObj->Class == CLASS_ELF && lpObj->Type == OBJ_USER )

  0004c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0004f	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00056	83 f9 02	 cmp	 ecx, 2
  00059	0f 85 64 02 00
	00		 jne	 $LN1@DecreaseAr
  0005f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00062	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  00066	83 f9 01	 cmp	 ecx, 1
  00069	0f 85 54 02 00
	00		 jne	 $LN1@DecreaseAr

; 41   : 	{
; 42   : 		CItem * Right = &lpObj->pInventory[0];

  0006f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00072	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  00078	89 4d f8	 mov	 DWORD PTR _Right$236205[ebp], ecx

; 43   : 		CItem * Left  = &lpObj->pInventory[1];

  0007b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0007e	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  00084	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  0008a	89 4d f4	 mov	 DWORD PTR _Left$236206[ebp], ecx

; 44   : 
; 45   : 		if ( (Right->m_Type >= ITEMGET(4,8) && Right->m_Type <= ITEMGET(4,14)) ||
; 46   : 			  Right->m_Type == ITEMGET(4,16) || Right->m_Type == ITEMGET(4,18) ||
; 47   : 			  Right->m_Type == ITEMGET(4,19) )

  0008d	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  00090	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00094	81 f9 08 08 00
	00		 cmp	 ecx, 2056		; 00000808H
  0009a	7c 0f		 jl	 SHORT $LN15@DecreaseAr
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  0009f	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  000a3	81 f9 0e 08 00
	00		 cmp	 ecx, 2062		; 0000080eH
  000a9	7e 31		 jle	 SHORT $LN16@DecreaseAr
$LN15@DecreaseAr:
  000ab	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  000ae	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  000b2	81 f9 10 08 00
	00		 cmp	 ecx, 2064		; 00000810H
  000b8	74 22		 je	 SHORT $LN16@DecreaseAr
  000ba	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  000bd	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  000c1	81 f9 12 08 00
	00		 cmp	 ecx, 2066		; 00000812H
  000c7	74 13		 je	 SHORT $LN16@DecreaseAr
  000c9	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  000cc	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  000d0	81 f9 13 08 00
	00		 cmp	 ecx, 2067		; 00000813H
  000d6	0f 85 c4 00 00
	00		 jne	 $LN17@DecreaseAr
$LN16@DecreaseAr:

; 48   : 		{
; 49   : 			if ( Left->m_Type == ITEMGET(4,7) )

  000dc	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  000df	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  000e3	81 f9 07 08 00
	00		 cmp	 ecx, 2055		; 00000807H
  000e9	0f 85 a5 00 00
	00		 jne	 $LN14@DecreaseAr

; 50   : 			{
; 51   : 				if ( Left->m_Durability < 1.0f )

  000ef	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  000f2	d9 40 24	 fld	 DWORD PTR [eax+36]
  000f5	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  000fb	df e0		 fnstsw	 ax
  000fd	f6 c4 05	 test	 ah, 5
  00100	7a 07		 jp	 SHORT $LN13@DecreaseAr

; 52   : 				{
; 53   : 					return FALSE;

  00102	33 c0		 xor	 eax, eax
  00104	e9 bf 01 00 00	 jmp	 $LN19@DecreaseAr
$LN13@DecreaseAr:

; 54   : 				}
; 55   : 
; 56   : 				if(ExConfig.Character.NeedArrow) Left->m_Durability -= 1.0f;

  00109	83 3d 38 01 00
	00 00		 cmp	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+312, 0
  00110	74 12		 je	 SHORT $LN12@DecreaseAr
  00112	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  00115	d9 40 24	 fld	 DWORD PTR [eax+36]
  00118	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  0011e	8b 4d f4	 mov	 ecx, DWORD PTR _Left$236206[ebp]
  00121	d9 59 24	 fstp	 DWORD PTR [ecx+36]
$LN12@DecreaseAr:

; 57   : 				GCItemDurSend(lpObj->m_Index, 1, (BYTE)Left->m_Durability, 0);

  00124	6a 00		 push	 0
  00126	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  00129	d9 40 24	 fld	 DWORD PTR [eax+36]
  0012c	d9 7d b2	 fnstcw	 WORD PTR tv217[ebp]
  0012f	0f b7 45 b2	 movzx	 eax, WORD PTR tv217[ebp]
  00133	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00138	89 45 ac	 mov	 DWORD PTR tv220[ebp], eax
  0013b	d9 6d ac	 fldcw	 WORD PTR tv220[ebp]
  0013e	db 5d a8	 fistp	 DWORD PTR tv222[ebp]
  00141	d9 6d b2	 fldcw	 WORD PTR tv217[ebp]
  00144	0f b6 4d a8	 movzx	 ecx, BYTE PTR tv222[ebp]
  00148	51		 push	 ecx
  00149	6a 01		 push	 1
  0014b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0014e	8b 02		 mov	 eax, DWORD PTR [edx]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  00156	83 c4 10	 add	 esp, 16			; 00000010H

; 58   : 
; 59   : 				if ( Left->m_Durability < 1.0f )

  00159	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  0015c	d9 40 24	 fld	 DWORD PTR [eax+36]
  0015f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  00165	df e0		 fnstsw	 ax
  00167	f6 c4 05	 test	 ah, 5
  0016a	7a 26		 jp	 SHORT $LN11@DecreaseAr

; 60   : 				{
; 61   : 					lpObj->pInventory[1].Clear();

  0016c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0016f	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  00175	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  0017b	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 62   : 					GCInventoryItemDeleteSend(lpObj->m_Index, 1, 0);

  00180	6a 00		 push	 0
  00182	6a 01		 push	 1
  00184	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00187	8b 08		 mov	 ecx, DWORD PTR [eax]
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@DecreaseAr:

; 63   : 				}
; 64   : 			}
; 65   : 			else

  00192	eb 07		 jmp	 SHORT $LN10@DecreaseAr
$LN14@DecreaseAr:

; 66   : 			{
; 67   : 				return FALSE;

  00194	33 c0		 xor	 eax, eax
  00196	e9 2d 01 00 00	 jmp	 $LN19@DecreaseAr
$LN10@DecreaseAr:

; 68   : 			}
; 69   : 		}
; 70   : 		else if ( (Left->m_Type >= ITEMGET(4,0) && Left->m_Type <= ITEMGET(4,6) ) ||

  0019b	e9 23 01 00 00	 jmp	 $LN1@DecreaseAr
$LN17@DecreaseAr:

; 71   : 				   Left->m_Type == ITEMGET(4,17) ||
; 72   : 				   Left->m_Type == ITEMGET(4,20) ||
; 73   : 				   Left->m_Type == ITEMGET(4,21) ||
; 74   : 				   Left->m_Type == ITEMGET(4,22) ||
; 75   : 				   Left->m_Type == ITEMGET(4,23)) //season4 add-on

  001a0	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  001a3	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  001a7	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  001ad	7c 0f		 jl	 SHORT $LN6@DecreaseAr
  001af	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  001b2	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  001b6	81 f9 06 08 00
	00		 cmp	 ecx, 2054		; 00000806H
  001bc	7e 4f		 jle	 SHORT $LN7@DecreaseAr
$LN6@DecreaseAr:
  001be	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  001c1	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  001c5	81 f9 11 08 00
	00		 cmp	 ecx, 2065		; 00000811H
  001cb	74 40		 je	 SHORT $LN7@DecreaseAr
  001cd	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  001d0	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  001d4	81 f9 14 08 00
	00		 cmp	 ecx, 2068		; 00000814H
  001da	74 31		 je	 SHORT $LN7@DecreaseAr
  001dc	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  001df	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  001e3	81 f9 15 08 00
	00		 cmp	 ecx, 2069		; 00000815H
  001e9	74 22		 je	 SHORT $LN7@DecreaseAr
  001eb	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  001ee	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  001f2	81 f9 16 08 00
	00		 cmp	 ecx, 2070		; 00000816H
  001f8	74 13		 je	 SHORT $LN7@DecreaseAr
  001fa	8b 45 f4	 mov	 eax, DWORD PTR _Left$236206[ebp]
  001fd	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00201	81 f9 17 08 00
	00		 cmp	 ecx, 2071		; 00000817H
  00207	0f 85 b6 00 00
	00		 jne	 $LN1@DecreaseAr
$LN7@DecreaseAr:

; 76   : 		{
; 77   : 			if ( Right->m_Type == ITEMGET(4,15) )

  0020d	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  00210	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00214	81 f9 0f 08 00
	00		 cmp	 ecx, 2063		; 0000080fH
  0021a	0f 85 9f 00 00
	00		 jne	 $LN5@DecreaseAr

; 78   : 			{
; 79   : 				if ( Right->m_Durability < 1.0f )

  00220	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  00223	d9 40 24	 fld	 DWORD PTR [eax+36]
  00226	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  0022c	df e0		 fnstsw	 ax
  0022e	f6 c4 05	 test	 ah, 5
  00231	7a 07		 jp	 SHORT $LN4@DecreaseAr

; 80   : 				{
; 81   : 					return FALSE;

  00233	33 c0		 xor	 eax, eax
  00235	e9 8e 00 00 00	 jmp	 $LN19@DecreaseAr
$LN4@DecreaseAr:

; 82   : 				}
; 83   : 
; 84   : 				if(ExConfig.Character.NeedArrow) Right->m_Durability -= 1.0f;

  0023a	83 3d 38 01 00
	00 00		 cmp	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+312, 0
  00241	74 12		 je	 SHORT $LN3@DecreaseAr
  00243	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  00246	d9 40 24	 fld	 DWORD PTR [eax+36]
  00249	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  0024f	8b 4d f8	 mov	 ecx, DWORD PTR _Right$236205[ebp]
  00252	d9 59 24	 fstp	 DWORD PTR [ecx+36]
$LN3@DecreaseAr:

; 85   : 				GCItemDurSend(lpObj->m_Index, 0, (BYTE)Right->m_Durability, 0);

  00255	6a 00		 push	 0
  00257	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  0025a	d9 40 24	 fld	 DWORD PTR [eax+36]
  0025d	d9 7d b2	 fnstcw	 WORD PTR tv253[ebp]
  00260	0f b7 45 b2	 movzx	 eax, WORD PTR tv253[ebp]
  00264	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00269	89 45 ac	 mov	 DWORD PTR tv256[ebp], eax
  0026c	d9 6d ac	 fldcw	 WORD PTR tv256[ebp]
  0026f	db 5d a8	 fistp	 DWORD PTR tv258[ebp]
  00272	d9 6d b2	 fldcw	 WORD PTR tv253[ebp]
  00275	0f b6 4d a8	 movzx	 ecx, BYTE PTR tv258[ebp]
  00279	51		 push	 ecx
  0027a	6a 00		 push	 0
  0027c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0027f	8b 02		 mov	 eax, DWORD PTR [edx]
  00281	50		 push	 eax
  00282	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  00287	83 c4 10	 add	 esp, 16			; 00000010H

; 86   : 
; 87   : 				if ( Right->m_Durability < 1.0f )

  0028a	8b 45 f8	 mov	 eax, DWORD PTR _Right$236205[ebp]
  0028d	d9 40 24	 fld	 DWORD PTR [eax+36]
  00290	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  00296	df e0		 fnstsw	 ax
  00298	f6 c4 05	 test	 ah, 5
  0029b	7a 20		 jp	 SHORT $LN2@DecreaseAr

; 88   : 				{
; 89   : 					lpObj->pInventory[0].Clear();

  0029d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002a0	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  002a6	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 90   : 					GCInventoryItemDeleteSend(lpObj->m_Index, 0, 0);

  002ab	6a 00		 push	 0
  002ad	6a 00		 push	 0
  002af	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  002b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b4	51		 push	 ecx
  002b5	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  002ba	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@DecreaseAr:

; 91   : 				}
; 92   : 			}
; 93   : 			else

  002bd	eb 04		 jmp	 SHORT $LN1@DecreaseAr
$LN5@DecreaseAr:

; 94   : 			{
; 95   : 				return FALSE;

  002bf	33 c0		 xor	 eax, eax
  002c1	eb 05		 jmp	 SHORT $LN19@DecreaseAr
$LN1@DecreaseAr:

; 96   : 			}
; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return TRUE;

  002c3	b8 01 00 00 00	 mov	 eax, 1
$LN19@DecreaseAr:

; 101  : }

  002c8	5f		 pop	 edi
  002c9	5e		 pop	 esi
  002ca	5b		 pop	 ebx
  002cb	8b e5		 mov	 esp, ebp
  002cd	5d		 pop	 ebp
  002ce	c2 04 00	 ret	 4
?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CObjBaseAttack::DecreaseArrow
_TEXT	ENDS
PUBLIC	??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@ ; `string'
PUBLIC	?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::CheckAttackArea
EXTRN	?bIsIgnorePacketSpeedHackDetect@@3HA:DWORD	; bIsIgnorePacketSpeedHackDetect
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?gObjCheckAttackArea@@YAHHH@Z:PROC		; gObjCheckAttackArea
EXTRN	?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A:BYTE	; gPandoraBoxEvent
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
;	COMDAT ??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@
CONST	SEGMENT
??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@ DB '['
	DB	'%s][%s] Try Attack In Not Attack Area (%s,%d,%d) errortype = '
	DB	'%d', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iRet$236238 = -12					; size = 4
_attr$236233 = -5					; size = 1
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z PROC ; CObjBaseAttack::CheckAttackArea
; _this$ = ecx

; 104  : {

  002e0	55		 push	 ebp
  002e1	8b ec		 mov	 ebp, esp
  002e3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  002e6	53		 push	 ebx
  002e7	56		 push	 esi
  002e8	57		 push	 edi
  002e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 	if ( lpTargetObj->Type == OBJ_USER || lpTargetObj->m_RecallMon >= 0 )

  002ec	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  002ef	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  002f3	83 f9 01	 cmp	 ecx, 1
  002f6	74 0c		 je	 SHORT $LN7@CheckAttac
  002f8	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  002fb	83 b8 50 04 00
	00 00		 cmp	 DWORD PTR [eax+1104], 0
  00302	7c 71		 jl	 SHORT $LN8@CheckAttac
$LN7@CheckAttac:

; 106  : 	{
; 107  : 		BYTE attr = MapC[lpTargetObj->MapNumber].GetAttr(lpTargetObj->X, lpTargetObj->Y);

  00304	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00307	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0030e	51		 push	 ecx
  0030f	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00312	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  00319	50		 push	 eax
  0031a	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0031d	0f b6 89 49 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+329]
  00324	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  0032a	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00330	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00335	88 45 fb	 mov	 BYTE PTR _attr$236233[ebp], al

; 108  : 
; 109  : #ifdef PANDORA_EVENT
; 110  : 	  if (gPandoraBoxEvent.Started && lpTargetObj->m_Index == gPandoraBoxEvent.ActivePlayer && (attr&1) == 1)

  00338	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A+4
  0033f	85 c0		 test	 eax, eax
  00341	74 22		 je	 SHORT $LN6@CheckAttac
  00343	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00346	8b 08		 mov	 ecx, DWORD PTR [eax]
  00348	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A
  0034e	75 15		 jne	 SHORT $LN6@CheckAttac
  00350	0f b6 45 fb	 movzx	 eax, BYTE PTR _attr$236233[ebp]
  00354	83 e0 01	 and	 eax, 1
  00357	74 0c		 je	 SHORT $LN6@CheckAttac

; 111  : 	  {
; 112  : 		return TRUE;

  00359	b8 01 00 00 00	 mov	 eax, 1
  0035e	e9 9e 00 00 00	 jmp	 $LN9@CheckAttac
  00363	eb 10		 jmp	 SHORT $LN8@CheckAttac
$LN6@CheckAttac:

; 113  : 	  }
; 114  : 	  else if ( (attr&1) == 1 )

  00365	0f b6 45 fb	 movzx	 eax, BYTE PTR _attr$236233[ebp]
  00369	83 e0 01	 and	 eax, 1
  0036c	74 07		 je	 SHORT $LN8@CheckAttac

; 115  : 	  {
; 116  : 		 return FALSE;

  0036e	33 c0		 xor	 eax, eax
  00370	e9 8c 00 00 00	 jmp	 $LN9@CheckAttac
$LN8@CheckAttac:

; 117  : 	  }
; 118  : #else
; 119  : 	  if ( (attr&1) == 1 )
; 120  : 	  {
; 121  : 		return FALSE;
; 122  : 	  }
; 123  : #endif
; 124  : 	}
; 125  : 
; 126  : 	if ( lpObj->Type == OBJ_USER )

  00375	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00378	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  0037c	83 f9 01	 cmp	 ecx, 1
  0037f	75 7b		 jne	 SHORT $LN3@CheckAttac

; 127  : 	{
; 128  : 		int iRet = gObjCheckAttackArea(lpObj->m_Index, lpTargetObj->m_Index);

  00381	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00384	8b 08		 mov	 ecx, DWORD PTR [eax]
  00386	51		 push	 ecx
  00387	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0038a	8b 02		 mov	 eax, DWORD PTR [edx]
  0038c	50		 push	 eax
  0038d	e8 00 00 00 00	 call	 ?gObjCheckAttackArea@@YAHHH@Z ; gObjCheckAttackArea
  00392	83 c4 08	 add	 esp, 8
  00395	89 45 f4	 mov	 DWORD PTR _iRet$236238[ebp], eax

; 129  : 
; 130  : 		if ( iRet != 0 )

  00398	83 7d f4 00	 cmp	 DWORD PTR _iRet$236238[ebp], 0
  0039c	74 5e		 je	 SHORT $LN3@CheckAttac

; 131  : 		{
; 132  : 			LogAddTD("[%s][%s] Try Attack In Not Attack Area (%s,%d,%d) errortype = %d", lpObj->AccountID, lpObj->Name, lMsg.Get(MSGGET(7, 208) + lpObj->MapNumber), lpObj->X, lpObj->Y, iRet);

  0039e	8b 45 f4	 mov	 eax, DWORD PTR _iRet$236238[ebp]
  003a1	50		 push	 eax
  003a2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  003a5	0f bf 91 46 01
	00 00		 movsx	 edx, WORD PTR [ecx+326]
  003ac	52		 push	 edx
  003ad	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  003b0	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  003b7	51		 push	 ecx
  003b8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  003bb	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  003c2	05 d0 07 00 00	 add	 eax, 2000		; 000007d0H
  003c7	50		 push	 eax
  003c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  003cd	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  003d2	50		 push	 eax
  003d3	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  003d6	83 c1 77	 add	 ecx, 119		; 00000077H
  003d9	51		 push	 ecx
  003da	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  003dd	83 c2 6c	 add	 edx, 108		; 0000006cH
  003e0	52		 push	 edx
  003e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@
  003e6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003ec	83 c4 1c	 add	 esp, 28			; 0000001cH

; 133  : 
; 134  : 			if ( bIsIgnorePacketSpeedHackDetect != FALSE )

  003ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bIsIgnorePacketSpeedHackDetect@@3HA, 0 ; bIsIgnorePacketSpeedHackDetect
  003f6	74 04		 je	 SHORT $LN3@CheckAttac

; 135  : 			{
; 136  : 				return FALSE;

  003f8	33 c0		 xor	 eax, eax
  003fa	eb 05		 jmp	 SHORT $LN9@CheckAttac
$LN3@CheckAttac:

; 137  : 			}
; 138  : 		}
; 139  : 	}
; 140  : 
; 141  : 	return TRUE;

  003fc	b8 01 00 00 00	 mov	 eax, 1
$LN9@CheckAttac:

; 142  : }

  00401	5f		 pop	 edi
  00402	5e		 pop	 esi
  00403	5b		 pop	 ebx
  00404	8b e5		 mov	 esp, ebp
  00406	5d		 pop	 ebp
  00407	c2 08 00	 ret	 8
?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP ; CObjBaseAttack::CheckAttackArea
_TEXT	ENDS
PUBLIC	?GetCastleState@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCastleState
PUBLIC	?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::PkCheck
EXTRN	?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjDuelCheck
EXTRN	?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjDuelCheck
EXTRN	?GetCurrentState@CChaosCastle@@QAEHH@Z:PROC	; CChaosCastle::GetCurrentState
EXTRN	?GetChaosCastleIndex@CChaosCastle@@QAEHH@Z:PROC	; CChaosCastle::GetChaosCastleIndex
EXTRN	?g_ChaosCastle@@3VCChaosCastle@@A:BYTE		; g_ChaosCastle
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjTargetGuildWarCheck
EXTRN	?gNonPK@@3HA:DWORD				; gNonPK
EXTRN	?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjGetRelationShip
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	?gPkLimitFree@@3HA:DWORD			; gPkLimitFree
EXTRN	?GetPkLevel@PartyClass@@QAEDH@Z:PROC		; PartyClass::GetPkLevel
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?gLanguage@@3HA:DWORD				; gLanguage
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv272 = -84						; size = 4
tv240 = -84						; size = 4
tv218 = -84						; size = 4
tv282 = -80						; size = 4
tv273 = -80						; size = 4
tv260 = -80						; size = 4
tv241 = -80						; size = 4
tv228 = -80						; size = 4
tv219 = -80						; size = 4
_bPlayerKiller$236307 = -12				; size = 4
_bPlayerKiller$236250 = -8				; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z PROC	; CObjBaseAttack::PkCheck
; _this$ = ecx

; 145  : {

  00410	55		 push	 ebp
  00411	8b ec		 mov	 ebp, esp
  00413	83 ec 54	 sub	 esp, 84			; 00000054H
  00416	53		 push	 ebx
  00417	56		 push	 esi
  00418	57		 push	 edi
  00419	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  : 	if ( gLanguage == 0 || gLanguage == 2 || gLanguage == 4)

  0041c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLanguage@@3HA, 0 ; gLanguage
  00423	74 16		 je	 SHORT $LN62@PkCheck
  00425	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?gLanguage@@3HA, 2 ; gLanguage
  0042c	74 0d		 je	 SHORT $LN62@PkCheck
  0042e	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?gLanguage@@3HA, 4 ; gLanguage
  00435	0f 85 ae 00 00
	00		 jne	 $LN63@PkCheck
$LN62@PkCheck:

; 147  : 	{
; 148  : 		if ( lpObj->Type == OBJ_USER )

  0043b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0043e	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  00442	83 f9 01	 cmp	 ecx, 1
  00445	0f 85 9e 00 00
	00		 jne	 $LN63@PkCheck

; 149  : 		{
; 150  : 			BOOL bPlayerKiller = FALSE; //Season 2.5 add-on

  0044b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bPlayerKiller$236250[ebp], 0

; 151  : 			
; 152  : 			if(ExConfig.PvP.ExPkPartySystem && lpObj->PartyNumber >= 0) //Season 2.5 add-on

  00452	83 3d d4 08 00
	00 00		 cmp	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+2260, 0
  00459	74 32		 je	 SHORT $LN60@PkCheck
  0045b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0045e	83 b8 2c 04 00
	00 00		 cmp	 DWORD PTR [eax+1068], 0
  00465	7c 26		 jl	 SHORT $LN60@PkCheck

; 153  : 			{
; 154  : 				if(gParty.GetPkLevel(lpObj->PartyNumber) >= ExConfig.PvP.ExPkLimit)

  00467	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0046a	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  00470	51		 push	 ecx
  00471	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00476	e8 00 00 00 00	 call	 ?GetPkLevel@PartyClass@@QAEDH@Z ; PartyClass::GetPkLevel
  0047b	0f be d0	 movsx	 edx, al
  0047e	3b 15 d8 08 00
	00		 cmp	 edx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2264
  00484	7c 07		 jl	 SHORT $LN60@PkCheck

; 155  : 				{
; 156  : 					bPlayerKiller = TRUE;

  00486	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bPlayerKiller$236250[ebp], 1
$LN60@PkCheck:

; 157  : 				}
; 158  : 			}
; 159  : 
; 160  : 			if(lpObj->m_PK_Level >= ExConfig.PvP.ExPkLimit) //6

  0048d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00490	0f be 88 3d 01
	00 00		 movsx	 ecx, BYTE PTR [eax+317]
  00497	3b 0d d8 08 00
	00		 cmp	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2264
  0049d	7c 07		 jl	 SHORT $LN58@PkCheck

; 161  : 			{
; 162  : 				bPlayerKiller = TRUE;

  0049f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bPlayerKiller$236250[ebp], 1
$LN58@PkCheck:

; 163  : 			}
; 164  : 
; 165  : 			if(bPlayerKiller == TRUE) //Season 2.5 add-on

  004a6	83 7d f8 01	 cmp	 DWORD PTR _bPlayerKiller$236250[ebp], 1
  004aa	75 3d		 jne	 SHORT $LN63@PkCheck

; 166  : 			{
; 167  : 				if (lpObj->PartyNumber >= 0 )

  004ac	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004af	83 b8 2c 04 00
	00 00		 cmp	 DWORD PTR [eax+1068], 0
  004b6	7c 12		 jl	 SHORT $LN56@PkCheck

; 168  : 				{
; 169  : 					if ( gPkLimitFree == FALSE )

  004b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  004bf	75 07		 jne	 SHORT $LN55@PkCheck

; 170  : 					{
; 171  : 						return FALSE;

  004c1	33 c0		 xor	 eax, eax
  004c3	e9 83 05 00 00	 jmp	 $LN64@PkCheck
$LN55@PkCheck:

; 172  : 					}
; 173  : 				}

  004c8	eb 1f		 jmp	 SHORT $LN63@PkCheck
$LN56@PkCheck:

; 174  : 				else if ( lpObj->m_PK_Count >= 3 )

  004ca	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004cd	0f be 88 3c 01
	00 00		 movsx	 ecx, BYTE PTR [eax+316]
  004d4	83 f9 03	 cmp	 ecx, 3
  004d7	7c 10		 jl	 SHORT $LN63@PkCheck

; 175  : 				{
; 176  : 					if ( gPkLimitFree == FALSE )

  004d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  004e0	75 07		 jne	 SHORT $LN63@PkCheck

; 177  : 					{
; 178  : 						return FALSE;

  004e2	33 c0		 xor	 eax, eax
  004e4	e9 62 05 00 00	 jmp	 $LN64@PkCheck
$LN63@PkCheck:

; 179  : 					}
; 180  : 				}
; 181  : 			}
; 182  : 		}
; 183  : 	}
; 184  : 
; 185  : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER)

  004e9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004ec	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  004f0	83 f9 01	 cmp	 ecx, 1
  004f3	0f 85 4d 05 00
	00		 jne	 $LN51@PkCheck
  004f9	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  004fc	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  00500	83 f9 01	 cmp	 ecx, 1
  00503	0f 85 3d 05 00
	00		 jne	 $LN51@PkCheck

; 186  : 	{
; 187  : #ifdef PRIVATE_MODULE
; 188  : 		if( g_ExLicense.CheckUser(eExUB::Encode)	 || 
; 189  : 			g_ExLicense.CheckUser(eExUB::Gredy)		 || 
; 190  : 			g_ExLicense.CheckUser(eExUB::GredyLocal) || 
; 191  : 			g_ExLicense.CheckUser(eExUB::Gredy2)	 ||
; 192  : 			g_ExLicense.CheckUser(eExUB::Local) ) 

  00509	6a 0f		 push	 15			; 0000000fH
  0050b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00510	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00515	0f b6 c0	 movzx	 eax, al
  00518	85 c0		 test	 eax, eax
  0051a	75 4c		 jne	 SHORT $LN49@PkCheck
  0051c	6a 20		 push	 32			; 00000020H
  0051e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00523	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00528	0f b6 c0	 movzx	 eax, al
  0052b	85 c0		 test	 eax, eax
  0052d	75 39		 jne	 SHORT $LN49@PkCheck
  0052f	6a 21		 push	 33			; 00000021H
  00531	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00536	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0053b	0f b6 c0	 movzx	 eax, al
  0053e	85 c0		 test	 eax, eax
  00540	75 26		 jne	 SHORT $LN49@PkCheck
  00542	6a 22		 push	 34			; 00000022H
  00544	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00549	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0054e	0f b6 c0	 movzx	 eax, al
  00551	85 c0		 test	 eax, eax
  00553	75 13		 jne	 SHORT $LN49@PkCheck
  00555	6a 00		 push	 0
  00557	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0055c	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00561	0f b6 c0	 movzx	 eax, al
  00564	85 c0		 test	 eax, eax
  00566	74 02		 je	 SHORT $LN50@PkCheck
$LN49@PkCheck:

; 193  : 		{
; 194  : 			// ----
; 195  : 		}
; 196  : 		else

  00568	eb 25		 jmp	 SHORT $LN48@PkCheck
$LN50@PkCheck:

; 197  : 		{
; 198  : 			if ( lpTargetObj->Level <= 5 || lpObj->Level <= 5 )

  0056a	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0056d	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00574	83 f9 05	 cmp	 ecx, 5
  00577	7e 0f		 jle	 SHORT $LN46@PkCheck
  00579	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0057c	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00583	83 f9 05	 cmp	 ecx, 5
  00586	7f 07		 jg	 SHORT $LN48@PkCheck
$LN46@PkCheck:

; 199  : 			{
; 200  : 				return FALSE;

  00588	33 c0		 xor	 eax, eax
  0058a	e9 bc 04 00 00	 jmp	 $LN64@PkCheck
$LN48@PkCheck:

; 201  : 			}
; 202  : 		}
; 203  : 
; 204  : #else
; 205  : 		if ( lpTargetObj->Level <= 5 || lpObj->Level <= 5 )
; 206  : 		{
; 207  : 			return FALSE;
; 208  : 		}
; 209  : #endif
; 210  : 
; 211  : 		if ( gObjGetRelationShip(lpObj, lpTargetObj) == 2 ) // Rivals

  0058f	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00592	50		 push	 eax
  00593	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00596	51		 push	 ecx
  00597	e8 00 00 00 00	 call	 ?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjGetRelationShip
  0059c	83 c4 08	 add	 esp, 8
  0059f	83 f8 02	 cmp	 eax, 2
  005a2	75 13		 jne	 SHORT $LN45@PkCheck

; 212  : 		{
; 213  : 			if ( gNonPK == FALSE )

  005a4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gNonPK@@3HA, 0 ; gNonPK
  005ab	75 0a		 jne	 SHORT $LN45@PkCheck

; 214  : 			{
; 215  : 				return TRUE;

  005ad	b8 01 00 00 00	 mov	 eax, 1
  005b2	e9 94 04 00 00	 jmp	 $LN64@PkCheck
$LN45@PkCheck:

; 216  : 			}
; 217  : 		}
; 218  : 
; 219  : 		if ( lpObj->lpGuild != NULL && lpTargetObj->lpGuild != NULL )

  005b7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005ba	83 b8 38 04 00
	00 00		 cmp	 DWORD PTR [eax+1080], 0
  005c1	74 55		 je	 SHORT $LN43@PkCheck
  005c3	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  005c6	83 b8 38 04 00
	00 00		 cmp	 DWORD PTR [eax+1080], 0
  005cd	74 49		 je	 SHORT $LN43@PkCheck

; 220  : 		{
; 221  : 			if ( lpObj->lpGuild->WarState == 1 && lpTargetObj->lpGuild->WarState == 1 )

  005cf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005d2	8b 88 38 04 00
	00		 mov	 ecx, DWORD PTR [eax+1080]
  005d8	0f b6 91 91 05
	00 00		 movzx	 edx, BYTE PTR [ecx+1425]
  005df	83 fa 01	 cmp	 edx, 1
  005e2	75 34		 jne	 SHORT $LN43@PkCheck
  005e4	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  005e7	8b 88 38 04 00
	00		 mov	 ecx, DWORD PTR [eax+1080]
  005ed	0f b6 91 91 05
	00 00		 movzx	 edx, BYTE PTR [ecx+1425]
  005f4	83 fa 01	 cmp	 edx, 1
  005f7	75 1f		 jne	 SHORT $LN43@PkCheck

; 222  : 			{
; 223  : 				if ( lpObj->lpGuild->Number == lpTargetObj->lpGuild->Number )

  005f9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005fc	8b 88 38 04 00
	00		 mov	 ecx, DWORD PTR [eax+1080]
  00602	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00605	8b 82 38 04 00
	00		 mov	 eax, DWORD PTR [edx+1080]
  0060b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0060d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0060f	75 07		 jne	 SHORT $LN43@PkCheck

; 224  : 				{
; 225  : 					return FALSE;

  00611	33 c0		 xor	 eax, eax
  00613	e9 33 04 00 00	 jmp	 $LN64@PkCheck
$LN43@PkCheck:

; 226  : 				}
; 227  : 			}
; 228  : 		}
; 229  : 
; 230  : 		if ( gObjTargetGuildWarCheck(lpObj, lpTargetObj) == FALSE && lpTargetObj->lpGuild != NULL && lpTargetObj->lpGuild->WarState != 0)

  00618	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0061b	50		 push	 eax
  0061c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0061f	51		 push	 ecx
  00620	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00625	83 c4 08	 add	 esp, 8
  00628	85 c0		 test	 eax, eax
  0062a	0f 85 ee 00 00
	00		 jne	 $LN40@PkCheck
  00630	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00633	83 b8 38 04 00
	00 00		 cmp	 DWORD PTR [eax+1080], 0
  0063a	0f 84 de 00 00
	00		 je	 $LN40@PkCheck
  00640	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00643	8b 88 38 04 00
	00		 mov	 ecx, DWORD PTR [eax+1080]
  00649	0f b6 91 91 05
	00 00		 movzx	 edx, BYTE PTR [ecx+1425]
  00650	85 d2		 test	 edx, edx
  00652	0f 84 c6 00 00
	00		 je	 $LN40@PkCheck

; 231  : 		{
; 232  : 			if ( lpTargetObj->lpGuild->WarType == 1 )

  00658	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0065b	8b 88 38 04 00
	00		 mov	 ecx, DWORD PTR [eax+1080]
  00661	0f b6 91 92 05
	00 00		 movzx	 edx, BYTE PTR [ecx+1426]
  00668	83 fa 01	 cmp	 edx, 1
  0066b	75 22		 jne	 SHORT $LN39@PkCheck

; 233  : 			{
; 234  : 				if ( lpTargetObj->MapNumber != 6 )

  0066d	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00670	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00677	83 f9 06	 cmp	 ecx, 6
  0067a	74 13		 je	 SHORT $LN39@PkCheck

; 235  : 				{
; 236  : 					if ( !gNonPK )

  0067c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gNonPK@@3HA, 0 ; gNonPK
  00683	75 0a		 jne	 SHORT $LN39@PkCheck

; 237  : 					{
; 238  : 						return TRUE;

  00685	b8 01 00 00 00	 mov	 eax, 1
  0068a	e9 bc 03 00 00	 jmp	 $LN64@PkCheck
$LN39@PkCheck:

; 239  : 					}
; 240  : 				}
; 241  : 			}
; 242  : 
; 243  : #if(FIX_CASTLE_SIEGE_WAR)
; 244  : 			if ( g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE)

  0068f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00694	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  00699	83 f8 07	 cmp	 eax, 7
  0069c	75 28		 jne	 SHORT $LN36@PkCheck

; 245  : 			{
; 246  : 				if ( lpObj->MapNumber == MAP_INDEX_CASTLESIEGE && lpTargetObj->MapNumber == MAP_INDEX_CASTLESIEGE )

  0069e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  006a1	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  006a8	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  006ab	75 19		 jne	 SHORT $LN36@PkCheck
  006ad	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  006b0	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  006b7	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  006ba	75 0a		 jne	 SHORT $LN36@PkCheck

; 247  : 				{
; 248  : 					return true;

  006bc	b8 01 00 00 00	 mov	 eax, 1
  006c1	e9 85 03 00 00	 jmp	 $LN64@PkCheck
$LN36@PkCheck:

; 249  : 				}
; 250  : 			}
; 251  : #endif
; 252  : 
; 253  : 			if ( CC_MAP_RANGE(lpTargetObj->MapNumber) == FALSE )

  006c6	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  006c9	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  006d0	83 f9 35	 cmp	 ecx, 53			; 00000035H
  006d3	75 09		 jne	 SHORT $LN68@PkCheck
  006d5	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv219[ebp], 1
  006dc	eb 33		 jmp	 SHORT $LN69@PkCheck
$LN68@PkCheck:
  006de	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  006e1	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  006e8	83 f8 12	 cmp	 eax, 18			; 00000012H
  006eb	7d 09		 jge	 SHORT $LN66@PkCheck
  006ed	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv218[ebp], 0
  006f4	eb 15		 jmp	 SHORT $LN67@PkCheck
$LN66@PkCheck:
  006f6	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  006f9	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  00700	33 c0		 xor	 eax, eax
  00702	83 fa 17	 cmp	 edx, 23			; 00000017H
  00705	0f 9e c0	 setle	 al
  00708	89 45 ac	 mov	 DWORD PTR tv218[ebp], eax
$LN67@PkCheck:
  0070b	8b 4d ac	 mov	 ecx, DWORD PTR tv218[ebp]
  0070e	89 4d b0	 mov	 DWORD PTR tv219[ebp], ecx
$LN69@PkCheck:
  00711	83 7d b0 00	 cmp	 DWORD PTR tv219[ebp], 0
  00715	75 07		 jne	 SHORT $LN40@PkCheck

; 254  : 			{
; 255  : 				return FALSE;

  00717	33 c0		 xor	 eax, eax
  00719	e9 2d 03 00 00	 jmp	 $LN64@PkCheck
$LN40@PkCheck:

; 256  : 			}
; 257  : 		}
; 258  : 
; 259  : 		if ( IT_MAP_RANGE(lpObj->MapNumber) != FALSE ) //season2.5 add-on

  0071e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00721	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00728	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  0072b	7d 09		 jge	 SHORT $LN70@PkCheck
  0072d	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv228[ebp], 0
  00734	eb 15		 jmp	 SHORT $LN71@PkCheck
$LN70@PkCheck:
  00736	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00739	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00740	33 c9		 xor	 ecx, ecx
  00742	83 f8 32	 cmp	 eax, 50			; 00000032H
  00745	0f 9e c1	 setle	 cl
  00748	89 4d b0	 mov	 DWORD PTR tv228[ebp], ecx
$LN71@PkCheck:
  0074b	83 7d b0 00	 cmp	 DWORD PTR tv228[ebp], 0
  0074f	74 05		 je	 SHORT $LN33@PkCheck
  00751	e9 8f 00 00 00	 jmp	 $LN32@PkCheck
$LN33@PkCheck:

; 260  : 		{
; 261  : 			//
; 262  : 		}
; 263  : 		else if ( CC_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00756	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00759	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00760	83 f9 35	 cmp	 ecx, 53			; 00000035H
  00763	75 09		 jne	 SHORT $LN74@PkCheck
  00765	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv241[ebp], 1
  0076c	eb 33		 jmp	 SHORT $LN75@PkCheck
$LN74@PkCheck:
  0076e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00771	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00778	83 f8 12	 cmp	 eax, 18			; 00000012H
  0077b	7d 09		 jge	 SHORT $LN72@PkCheck
  0077d	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv240[ebp], 0
  00784	eb 15		 jmp	 SHORT $LN73@PkCheck
$LN72@PkCheck:
  00786	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00789	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  00790	33 c0		 xor	 eax, eax
  00792	83 fa 17	 cmp	 edx, 23			; 00000017H
  00795	0f 9e c0	 setle	 al
  00798	89 45 ac	 mov	 DWORD PTR tv240[ebp], eax
$LN73@PkCheck:
  0079b	8b 4d ac	 mov	 ecx, DWORD PTR tv240[ebp]
  0079e	89 4d b0	 mov	 DWORD PTR tv241[ebp], ecx
$LN75@PkCheck:
  007a1	83 7d b0 00	 cmp	 DWORD PTR tv241[ebp], 0
  007a5	74 2e		 je	 SHORT $LN31@PkCheck

; 264  : 		{
; 265  : 			if ( g_ChaosCastle.GetCurrentState(g_ChaosCastle.GetChaosCastleIndex(lpObj->MapNumber)) != 2 )

  007a7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007aa	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  007b1	51		 push	 ecx
  007b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCastle@@3VCChaosCastle@@A ; g_ChaosCastle
  007b7	e8 00 00 00 00	 call	 ?GetChaosCastleIndex@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetChaosCastleIndex
  007bc	50		 push	 eax
  007bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCastle@@3VCChaosCastle@@A ; g_ChaosCastle
  007c2	e8 00 00 00 00	 call	 ?GetCurrentState@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurrentState
  007c7	83 f8 02	 cmp	 eax, 2
  007ca	74 07		 je	 SHORT $LN30@PkCheck

; 266  : 			{
; 267  : 				return FALSE;

  007cc	33 c0		 xor	 eax, eax
  007ce	e9 78 02 00 00	 jmp	 $LN64@PkCheck
$LN30@PkCheck:

; 268  : 			}
; 269  : 		}

  007d3	eb 10		 jmp	 SHORT $LN32@PkCheck
$LN31@PkCheck:

; 270  : 		else if ( gNonPK != FALSE )

  007d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gNonPK@@3HA, 0 ; gNonPK
  007dc	74 07		 je	 SHORT $LN32@PkCheck

; 271  : 		{
; 272  : 			return FALSE;

  007de	33 c0		 xor	 eax, eax
  007e0	e9 66 02 00 00	 jmp	 $LN64@PkCheck
$LN32@PkCheck:

; 273  : 		}
; 274  : 
; 275  : 		if ( DS_MAP_RANGE(lpObj->MapNumber) ) // DEvil

  007e5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007e8	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  007ef	83 f9 09	 cmp	 ecx, 9
  007f2	75 09		 jne	 SHORT $LN76@PkCheck
  007f4	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv260[ebp], 1
  007fb	eb 15		 jmp	 SHORT $LN77@PkCheck
$LN76@PkCheck:
  007fd	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00800	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00807	33 c9		 xor	 ecx, ecx
  00809	83 f8 20	 cmp	 eax, 32			; 00000020H
  0080c	0f 94 c1	 sete	 cl
  0080f	89 4d b0	 mov	 DWORD PTR tv260[ebp], ecx
$LN77@PkCheck:
  00812	83 7d b0 00	 cmp	 DWORD PTR tv260[ebp], 0
  00816	74 07		 je	 SHORT $LN27@PkCheck

; 276  : 		{
; 277  : 			return FALSE;

  00818	33 c0		 xor	 eax, eax
  0081a	e9 2c 02 00 00	 jmp	 $LN64@PkCheck
$LN27@PkCheck:

; 278  : 		}
; 279  : 
; 280  : 		if ( BC_MAP_RANGE(lpObj->MapNumber) )

  0081f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00822	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00829	83 f9 34	 cmp	 ecx, 52			; 00000034H
  0082c	75 09		 jne	 SHORT $LN80@PkCheck
  0082e	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv273[ebp], 1
  00835	eb 33		 jmp	 SHORT $LN81@PkCheck
$LN80@PkCheck:
  00837	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0083a	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00841	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00844	7d 09		 jge	 SHORT $LN78@PkCheck
  00846	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv272[ebp], 0
  0084d	eb 15		 jmp	 SHORT $LN79@PkCheck
$LN78@PkCheck:
  0084f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00852	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  00859	33 c0		 xor	 eax, eax
  0085b	83 fa 11	 cmp	 edx, 17			; 00000011H
  0085e	0f 9e c0	 setle	 al
  00861	89 45 ac	 mov	 DWORD PTR tv272[ebp], eax
$LN79@PkCheck:
  00864	8b 4d ac	 mov	 ecx, DWORD PTR tv272[ebp]
  00867	89 4d b0	 mov	 DWORD PTR tv273[ebp], ecx
$LN81@PkCheck:
  0086a	83 7d b0 00	 cmp	 DWORD PTR tv273[ebp], 0
  0086e	74 07		 je	 SHORT $LN26@PkCheck

; 281  : 		{
; 282  : 			return FALSE;

  00870	33 c0		 xor	 eax, eax
  00872	e9 d4 01 00 00	 jmp	 $LN64@PkCheck
$LN26@PkCheck:

; 283  : 		}
; 284  : 
; 285  : 		if ( DG_MAP_RANGE(lpObj->MapNumber))	//Season 5 DoppelGanger

  00877	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0087a	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00881	83 f9 41	 cmp	 ecx, 65			; 00000041H
  00884	7d 09		 jge	 SHORT $LN82@PkCheck
  00886	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv282[ebp], 0
  0088d	eb 15		 jmp	 SHORT $LN83@PkCheck
$LN82@PkCheck:
  0088f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00892	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00899	33 c9		 xor	 ecx, ecx
  0089b	83 f8 44	 cmp	 eax, 68			; 00000044H
  0089e	0f 9e c1	 setle	 cl
  008a1	89 4d b0	 mov	 DWORD PTR tv282[ebp], ecx
$LN83@PkCheck:
  008a4	83 7d b0 00	 cmp	 DWORD PTR tv282[ebp], 0
  008a8	74 07		 je	 SHORT $LN25@PkCheck

; 286  : 		{
; 287  : 			return FALSE;

  008aa	33 c0		 xor	 eax, eax
  008ac	e9 9a 01 00 00	 jmp	 $LN64@PkCheck
$LN25@PkCheck:

; 288  : 		}
; 289  : 
; 290  : 		if ( gObjDuelCheck(lpObj, lpTargetObj) == FALSE )

  008b1	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  008b4	50		 push	 eax
  008b5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  008b8	51		 push	 ecx
  008b9	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjDuelCheck
  008be	83 c4 08	 add	 esp, 8
  008c1	85 c0		 test	 eax, eax
  008c3	75 17		 jne	 SHORT $LN24@PkCheck

; 291  : 		{
; 292  : 			if ( gObjDuelCheck(lpTargetObj) )

  008c5	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  008c8	50		 push	 eax
  008c9	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDuelCheck
  008ce	83 c4 04	 add	 esp, 4
  008d1	85 c0		 test	 eax, eax
  008d3	74 07		 je	 SHORT $LN24@PkCheck

; 293  : 			{
; 294  : 				return FALSE;

  008d5	33 c0		 xor	 eax, eax
  008d7	e9 6f 01 00 00	 jmp	 $LN64@PkCheck
$LN24@PkCheck:

; 295  : 			}
; 296  : 		}
; 297  : 
; 298  : 		if ( gLanguage == 0 || gLanguage == 2 )

  008dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLanguage@@3HA, 0 ; gLanguage
  008e3	74 0d		 je	 SHORT $LN21@PkCheck
  008e5	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?gLanguage@@3HA, 2 ; gLanguage
  008ec	0f 85 54 01 00
	00		 jne	 $LN51@PkCheck
$LN21@PkCheck:

; 299  : 		{
; 300  : 			BOOL bPlayerKiller = FALSE; //Season 2.5 add-on

  008f2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bPlayerKiller$236307[ebp], 0

; 301  : 
; 302  : 			if(ExConfig.PvP.ExPkPartySystem && lpObj->PartyNumber >= 0) //Season 2.5 add-on

  008f9	83 3d d4 08 00
	00 00		 cmp	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+2260, 0
  00900	74 32		 je	 SHORT $LN20@PkCheck
  00902	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00905	83 b8 2c 04 00
	00 00		 cmp	 DWORD PTR [eax+1068], 0
  0090c	7c 26		 jl	 SHORT $LN20@PkCheck

; 303  : 			{
; 304  : 				if(gParty.GetPkLevel(lpObj->PartyNumber) >= ExConfig.PvP.ExPkLimit)

  0090e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00911	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  00917	51		 push	 ecx
  00918	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0091d	e8 00 00 00 00	 call	 ?GetPkLevel@PartyClass@@QAEDH@Z ; PartyClass::GetPkLevel
  00922	0f be d0	 movsx	 edx, al
  00925	3b 15 d8 08 00
	00		 cmp	 edx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2264
  0092b	7c 07		 jl	 SHORT $LN20@PkCheck

; 305  : 				{
; 306  : 					bPlayerKiller = TRUE;

  0092d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bPlayerKiller$236307[ebp], 1
$LN20@PkCheck:

; 307  : 				}
; 308  : 			}
; 309  : 
; 310  : 			if(lpObj->m_PK_Level >= ExConfig.PvP.ExPkLimit)

  00934	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00937	0f be 88 3d 01
	00 00		 movsx	 ecx, BYTE PTR [eax+317]
  0093e	3b 0d d8 08 00
	00		 cmp	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2264
  00944	7c 07		 jl	 SHORT $LN18@PkCheck

; 311  : 			{
; 312  : 				bPlayerKiller = TRUE;

  00946	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bPlayerKiller$236307[ebp], 1
$LN18@PkCheck:

; 313  : 			}
; 314  : 
; 315  : 			if(bPlayerKiller == TRUE) //Season 2.5 add-on

  0094d	83 7d f4 01	 cmp	 DWORD PTR _bPlayerKiller$236307[ebp], 1
  00951	75 3d		 jne	 SHORT $LN17@PkCheck

; 316  : 			{
; 317  : 				if (lpObj->PartyNumber >= 0 )

  00953	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00956	83 b8 2c 04 00
	00 00		 cmp	 DWORD PTR [eax+1068], 0
  0095d	7c 12		 jl	 SHORT $LN16@PkCheck

; 318  : 				{
; 319  : 					if ( gPkLimitFree == FALSE )

  0095f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  00966	75 07		 jne	 SHORT $LN15@PkCheck

; 320  : 					{
; 321  : 						return FALSE;

  00968	33 c0		 xor	 eax, eax
  0096a	e9 dc 00 00 00	 jmp	 $LN64@PkCheck
$LN15@PkCheck:

; 322  : 					}
; 323  : 				}

  0096f	eb 1f		 jmp	 SHORT $LN17@PkCheck
$LN16@PkCheck:

; 324  : 				else if ( lpObj->m_PK_Count >= 3 )

  00971	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00974	0f be 88 3c 01
	00 00		 movsx	 ecx, BYTE PTR [eax+316]
  0097b	83 f9 03	 cmp	 ecx, 3
  0097e	7c 10		 jl	 SHORT $LN17@PkCheck

; 325  : 				{
; 326  : 					if ( gPkLimitFree == FALSE )

  00980	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  00987	75 07		 jne	 SHORT $LN17@PkCheck

; 327  : 					{
; 328  : 						return FALSE;

  00989	33 c0		 xor	 eax, eax
  0098b	e9 bb 00 00 00	 jmp	 $LN64@PkCheck
$LN17@PkCheck:

; 329  : 					}
; 330  : 				}
; 331  : 			}
; 332  : 
; 333  : 			bPlayerKiller = FALSE; //Season 2.5 add-on

  00990	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bPlayerKiller$236307[ebp], 0

; 334  : 
; 335  : 			if(ExConfig.PvP.ExPkPartySystem && lpTargetObj->PartyNumber >= 0) //Season 2.5 add-on

  00997	83 3d d4 08 00
	00 00		 cmp	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+2260, 0
  0099e	74 32		 je	 SHORT $LN11@PkCheck
  009a0	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  009a3	83 b8 2c 04 00
	00 00		 cmp	 DWORD PTR [eax+1068], 0
  009aa	7c 26		 jl	 SHORT $LN11@PkCheck

; 336  : 			{
; 337  : 				if(gParty.GetPkLevel(lpTargetObj->PartyNumber) >= ExConfig.PvP.ExPkLimit)

  009ac	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  009af	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  009b5	51		 push	 ecx
  009b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  009bb	e8 00 00 00 00	 call	 ?GetPkLevel@PartyClass@@QAEDH@Z ; PartyClass::GetPkLevel
  009c0	0f be d0	 movsx	 edx, al
  009c3	3b 15 d8 08 00
	00		 cmp	 edx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2264
  009c9	7c 07		 jl	 SHORT $LN11@PkCheck

; 338  : 				{
; 339  : 					bPlayerKiller = TRUE;

  009cb	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bPlayerKiller$236307[ebp], 1
$LN11@PkCheck:

; 340  : 				}
; 341  : 			}
; 342  : 
; 343  : 			if(lpTargetObj->m_PK_Level >= ExConfig.PvP.ExPkLimit)

  009d2	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  009d5	0f be 88 3d 01
	00 00		 movsx	 ecx, BYTE PTR [eax+317]
  009dc	3b 0d d8 08 00
	00		 cmp	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+2264
  009e2	7c 07		 jl	 SHORT $LN9@PkCheck

; 344  : 			{
; 345  : 				bPlayerKiller = TRUE;

  009e4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bPlayerKiller$236307[ebp], 1
$LN9@PkCheck:

; 346  : 			}
; 347  : 
; 348  : 			if(bPlayerKiller == 1) //Season 2.5 add-on

  009eb	83 7d f4 01	 cmp	 DWORD PTR _bPlayerKiller$236307[ebp], 1
  009ef	75 55		 jne	 SHORT $LN51@PkCheck

; 349  : 			{
; 350  : 				if (lpTargetObj->PartyNumber >= 0 )

  009f1	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  009f4	83 b8 2c 04 00
	00 00		 cmp	 DWORD PTR [eax+1068], 0
  009fb	7c 1e		 jl	 SHORT $LN7@PkCheck

; 351  : 				{
; 352  : 					if ( gPkLimitFree == FALSE )

  009fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  00a04	75 13		 jne	 SHORT $LN6@PkCheck

; 353  : 					{
; 354  : //#if(GS_CASTLE==1) //---------------------------------------------------
; 355  : 						if(g_CastleSiege.GetCastleState() != CASTLESIEGE_STATE_STARTSIEGE)

  00a06	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00a0b	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  00a10	83 f8 07	 cmp	 eax, 7
  00a13	74 04		 je	 SHORT $LN6@PkCheck

; 356  : 						{
; 357  : 							return FALSE;

  00a15	33 c0		 xor	 eax, eax
  00a17	eb 32		 jmp	 SHORT $LN64@PkCheck
$LN6@PkCheck:

; 358  : 						}
; 359  : //#else //---------------------------------------------------------------
; 360  : //						return FALSE;
; 361  : //#endif //--------------------------------------------------------------
; 362  : 					}
; 363  : 				}

  00a19	eb 2b		 jmp	 SHORT $LN51@PkCheck
$LN7@PkCheck:

; 364  : 				else if ( lpTargetObj->m_PK_Count >= 3 )

  00a1b	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00a1e	0f be 88 3c 01
	00 00		 movsx	 ecx, BYTE PTR [eax+316]
  00a25	83 f9 03	 cmp	 ecx, 3
  00a28	7c 1c		 jl	 SHORT $LN51@PkCheck

; 365  : 				{
; 366  : 					if ( gPkLimitFree == FALSE )

  00a2a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  00a31	75 13		 jne	 SHORT $LN51@PkCheck

; 367  : 					{
; 368  : //#if(GS_CASTLE==1) //---------------------------------------------------
; 369  : 						if(g_CastleSiege.GetCastleState() != CASTLESIEGE_STATE_STARTSIEGE)

  00a33	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00a38	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  00a3d	83 f8 07	 cmp	 eax, 7
  00a40	74 04		 je	 SHORT $LN51@PkCheck

; 370  : 						{
; 371  : 							return FALSE;

  00a42	33 c0		 xor	 eax, eax
  00a44	eb 05		 jmp	 SHORT $LN64@PkCheck
$LN51@PkCheck:

; 372  : 						}
; 373  : //#else //---------------------------------------------------------------
; 374  : //						return FALSE;
; 375  : //#endif //--------------------------------------------------------------
; 376  : 					}
; 377  : 				}
; 378  : 			}
; 379  : 
; 380  : 
; 381  : 		}
; 382  : 	}
; 383  : 	return TRUE;

  00a46	b8 01 00 00 00	 mov	 eax, 1
$LN64@PkCheck:

; 384  : }

  00a4b	5f		 pop	 edi
  00a4c	5e		 pop	 esi
  00a4d	5b		 pop	 ebx
  00a4e	8b e5		 mov	 esp, ebp
  00a50	5d		 pop	 ebp
  00a51	c2 08 00	 ret	 8
?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP	; CObjBaseAttack::PkCheck
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\castlesiege.h
_TEXT	ENDS
;	COMDAT ?GetCastleState@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCastleState@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCastleState, COMDAT
; _this$ = ecx

; 314  : 	int GetCastleState(){return m_iCastleSiegeState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCastleState@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCastleState
_TEXT	ENDS
PUBLIC	?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjBaseAttack::ResistanceCheck
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
EXTRN	?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjSearchActiveEffect
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
EXTRN	?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z:PROC	; retResistance
EXTRN	?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\objbaseattack.cpp
_TEXT	SEGMENT
tv136 = -72						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_skill$ = 16						; size = 4
?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z PROC ; CObjBaseAttack::ResistanceCheck
; _this$ = ecx

; 387  : {

  00a60	55		 push	 ebp
  00a61	8b ec		 mov	 ebp, esp
  00a63	83 ec 48	 sub	 esp, 72			; 00000048H
  00a66	53		 push	 ebx
  00a67	56		 push	 esi
  00a68	57		 push	 edi
  00a69	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 388  : //#if(GS_CASTLE==1) //HermeX Decompilation
; 389  : 	if( lpTargetObj->Type != OBJ_USER)

  00a6c	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00a6f	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  00a73	83 f9 01	 cmp	 ecx, 1
  00a76	0f 84 ad 00 00
	00		 je	 $LN43@Resistance

; 390  : 	{
; 391  : 		if(lpTargetObj->Class == 277 || lpTargetObj->Class == 283 || lpTargetObj->Class == 288 || lpTargetObj->Class == 278 || lpTargetObj->Class == 215 || lpTargetObj->Class == 216 || lpTargetObj->Class == 217 || lpTargetObj->Class == 218 || lpTargetObj->Class == 219)

  00a7c	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00a7f	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00a86	81 f9 15 01 00
	00		 cmp	 ecx, 277		; 00000115H
  00a8c	0f 84 90 00 00
	00		 je	 $LN41@Resistance
  00a92	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00a95	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00a9c	81 f9 1b 01 00
	00		 cmp	 ecx, 283		; 0000011bH
  00aa2	74 7e		 je	 SHORT $LN41@Resistance
  00aa4	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00aa7	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00aae	81 f9 20 01 00
	00		 cmp	 ecx, 288		; 00000120H
  00ab4	74 6c		 je	 SHORT $LN41@Resistance
  00ab6	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00ab9	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00ac0	81 f9 16 01 00
	00		 cmp	 ecx, 278		; 00000116H
  00ac6	74 5a		 je	 SHORT $LN41@Resistance
  00ac8	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00acb	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00ad2	81 f9 d7 00 00
	00		 cmp	 ecx, 215		; 000000d7H
  00ad8	74 48		 je	 SHORT $LN41@Resistance
  00ada	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00add	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00ae4	81 f9 d8 00 00
	00		 cmp	 ecx, 216		; 000000d8H
  00aea	74 36		 je	 SHORT $LN41@Resistance
  00aec	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00aef	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00af6	81 f9 d9 00 00
	00		 cmp	 ecx, 217		; 000000d9H
  00afc	74 24		 je	 SHORT $LN41@Resistance
  00afe	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00b01	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00b08	81 f9 da 00 00
	00		 cmp	 ecx, 218		; 000000daH
  00b0e	74 12		 je	 SHORT $LN41@Resistance
  00b10	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00b13	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00b1a	81 f9 db 00 00
	00		 cmp	 ecx, 219		; 000000dbH
  00b20	75 07		 jne	 SHORT $LN43@Resistance
$LN41@Resistance:

; 392  : 		{
; 393  : 			return FALSE;

  00b22	33 c0		 xor	 eax, eax
  00b24	e9 ee 03 00 00	 jmp	 $LN44@Resistance
$LN43@Resistance:

; 394  : 		}
; 395  : 	}
; 396  : 
; 397  : 	if( lpTargetObj->Type != OBJ_USER)

  00b29	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00b2c	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  00b30	83 f9 01	 cmp	 ecx, 1
  00b33	74 58		 je	 SHORT $LN40@Resistance

; 398  : 	{
; 399  : 		if( CRYWOLF_ALTAR_CLASS_RANGE(lpTargetObj->Class) != FALSE || CRYWOLF_STATUE_CHECK(lpTargetObj->Class) != FALSE ) //HermeX Fix @28/01/2010

  00b35	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00b38	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00b3f	81 f9 cd 00 00
	00		 cmp	 ecx, 205		; 000000cdH
  00b45	7d 09		 jge	 SHORT $LN46@Resistance
  00b47	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
  00b4e	eb 17		 jmp	 SHORT $LN47@Resistance
$LN46@Resistance:
  00b50	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00b53	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  00b5a	33 c9		 xor	 ecx, ecx
  00b5c	3d d1 00 00 00	 cmp	 eax, 209		; 000000d1H
  00b61	0f 9e c1	 setle	 cl
  00b64	89 4d b8	 mov	 DWORD PTR tv136[ebp], ecx
$LN47@Resistance:
  00b67	83 7d b8 00	 cmp	 DWORD PTR tv136[ebp], 0
  00b6b	75 19		 jne	 SHORT $LN38@Resistance
  00b6d	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00b70	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00b77	33 d2		 xor	 edx, edx
  00b79	81 f9 cc 00 00
	00		 cmp	 ecx, 204		; 000000ccH
  00b7f	0f 94 c2	 sete	 dl
  00b82	85 d2		 test	 edx, edx
  00b84	74 07		 je	 SHORT $LN40@Resistance
$LN38@Resistance:

; 400  : 		{
; 401  : 			return FALSE;

  00b86	33 c0		 xor	 eax, eax
  00b88	e9 8a 03 00 00	 jmp	 $LN44@Resistance
$LN40@Resistance:

; 402  : 		}
; 403  : 	}
; 404  : //#endif
; 405  : 
; 406  : 	if ( skill == 62 || g_MasterSkillSystem.GetBaseMasterLevelSkill(skill) == 515)

  00b8d	83 7d 10 3e	 cmp	 DWORD PTR _skill$[ebp], 62 ; 0000003eH
  00b91	74 15		 je	 SHORT $LN36@Resistance
  00b93	8b 45 10	 mov	 eax, DWORD PTR _skill$[ebp]
  00b96	50		 push	 eax
  00b97	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00b9c	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00ba1	3d 03 02 00 00	 cmp	 eax, 515		; 00000203H
  00ba6	75 71		 jne	 SHORT $LN37@Resistance
$LN36@Resistance:

; 407  : 	{
; 408  : 		if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2))

  00ba8	6a 20		 push	 32			; 00000020H
  00baa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00baf	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00bb4	0f b6 c0	 movzx	 eax, al
  00bb7	85 c0		 test	 eax, eax
  00bb9	75 26		 jne	 SHORT $LN34@Resistance
  00bbb	6a 21		 push	 33			; 00000021H
  00bbd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00bc2	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00bc7	0f b6 c0	 movzx	 eax, al
  00bca	85 c0		 test	 eax, eax
  00bcc	75 13		 jne	 SHORT $LN34@Resistance
  00bce	6a 22		 push	 34			; 00000022H
  00bd0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00bd5	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00bda	0f b6 c0	 movzx	 eax, al
  00bdd	85 c0		 test	 eax, eax
  00bdf	74 26		 je	 SHORT $LN35@Resistance
$LN34@Resistance:

; 409  : 		{
; 410  : 			if ( retResistance(lpTargetObj, R_EARTH) == 0 )

  00be1	6a 04		 push	 4
  00be3	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00be6	50		 push	 eax
  00be7	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00bec	83 c4 08	 add	 esp, 8
  00bef	85 c0		 test	 eax, eax
  00bf1	75 12		 jne	 SHORT $LN33@Resistance

; 411  : 			{
; 412  : 				gObjBackSpring2(lpTargetObj, lpObj, 3);

  00bf3	6a 03		 push	 3
  00bf5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bf8	50		 push	 eax
  00bf9	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00bfc	51		 push	 ecx
  00bfd	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  00c02	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN33@Resistance:

; 413  : 			}
; 414  : 		}
; 415  : 		else

  00c05	eb 12		 jmp	 SHORT $LN37@Resistance
$LN35@Resistance:

; 416  : 		{
; 417  : 			gObjBackSpring2(lpTargetObj, lpObj, 3);

  00c07	6a 03		 push	 3
  00c09	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c0c	50		 push	 eax
  00c0d	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00c10	51		 push	 ecx
  00c11	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  00c16	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN37@Resistance:

; 418  : 		}
; 419  : 	}
; 420  : 
; 421  : 	if ( skill == 19
; 422  : 		|| skill == 20
; 423  : 		|| skill == 21
; 424  : 		|| skill == 22
; 425  : 		|| skill == 23
; 426  : 
; 427  : 		|| skill == 260
; 428  : 		|| skill == 261
; 429  : 		|| skill == 262
; 430  : 		|| skill == 270
; 431  : 		|| skill == 326
; 432  : 		|| skill == 327
; 433  : 		|| skill == 328
; 434  : 		|| skill == 329
; 435  : 		|| skill == 479
; 436  : 		)

  00c19	83 7d 10 13	 cmp	 DWORD PTR _skill$[ebp], 19 ; 00000013H
  00c1d	74 69		 je	 SHORT $LN30@Resistance
  00c1f	83 7d 10 14	 cmp	 DWORD PTR _skill$[ebp], 20 ; 00000014H
  00c23	74 63		 je	 SHORT $LN30@Resistance
  00c25	83 7d 10 15	 cmp	 DWORD PTR _skill$[ebp], 21 ; 00000015H
  00c29	74 5d		 je	 SHORT $LN30@Resistance
  00c2b	83 7d 10 16	 cmp	 DWORD PTR _skill$[ebp], 22 ; 00000016H
  00c2f	74 57		 je	 SHORT $LN30@Resistance
  00c31	83 7d 10 17	 cmp	 DWORD PTR _skill$[ebp], 23 ; 00000017H
  00c35	74 51		 je	 SHORT $LN30@Resistance
  00c37	81 7d 10 04 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 260 ; 00000104H
  00c3e	74 48		 je	 SHORT $LN30@Resistance
  00c40	81 7d 10 05 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 261 ; 00000105H
  00c47	74 3f		 je	 SHORT $LN30@Resistance
  00c49	81 7d 10 06 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 262 ; 00000106H
  00c50	74 36		 je	 SHORT $LN30@Resistance
  00c52	81 7d 10 0e 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 270 ; 0000010eH
  00c59	74 2d		 je	 SHORT $LN30@Resistance
  00c5b	81 7d 10 46 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 326 ; 00000146H
  00c62	74 24		 je	 SHORT $LN30@Resistance
  00c64	81 7d 10 47 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 327 ; 00000147H
  00c6b	74 1b		 je	 SHORT $LN30@Resistance
  00c6d	81 7d 10 48 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 328 ; 00000148H
  00c74	74 12		 je	 SHORT $LN30@Resistance
  00c76	81 7d 10 49 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 329 ; 00000149H
  00c7d	74 09		 je	 SHORT $LN30@Resistance
  00c7f	81 7d 10 df 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 479 ; 000001dfH
  00c86	75 20		 jne	 SHORT $LN31@Resistance
$LN30@Resistance:

; 437  : 	{
; 438  : 		gObjAddMsgSendDelay(lpTargetObj, 2, lpObj->m_Index, 150, 0);

  00c88	6a 00		 push	 0
  00c8a	68 96 00 00 00	 push	 150			; 00000096H
  00c8f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c92	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c94	51		 push	 ecx
  00c95	6a 02		 push	 2
  00c97	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00c9a	52		 push	 edx
  00c9b	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  00ca0	83 c4 14	 add	 esp, 20			; 00000014H
  00ca3	e9 6a 02 00 00	 jmp	 $LN29@Resistance
$LN31@Resistance:

; 439  : 	}
; 440  : 	else if ( skill == 3 )	// Poison

  00ca8	83 7d 10 03	 cmp	 DWORD PTR _skill$[ebp], 3
  00cac	75 43		 jne	 SHORT $LN28@Resistance

; 441  : 	{
; 442  : 		if ( retResistance(lpTargetObj, 2) == 0 )

  00cae	6a 02		 push	 2
  00cb0	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00cb3	50		 push	 eax
  00cb4	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00cb9	83 c4 08	 add	 esp, 8
  00cbc	85 c0		 test	 eax, eax
  00cbe	75 25		 jne	 SHORT $LN27@Resistance

; 443  : 		{
; 444  : 			gObjAddMsgSendDelay(lpTargetObj, 2, lpObj->m_Index, 150, 0);

  00cc0	6a 00		 push	 0
  00cc2	68 96 00 00 00	 push	 150			; 00000096H
  00cc7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cca	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ccc	51		 push	 ecx
  00ccd	6a 02		 push	 2
  00ccf	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00cd2	52		 push	 edx
  00cd3	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  00cd8	83 c4 14	 add	 esp, 20			; 00000014H

; 445  : 			return TRUE;

  00cdb	b8 01 00 00 00	 mov	 eax, 1
  00ce0	e9 32 02 00 00	 jmp	 $LN44@Resistance
$LN27@Resistance:

; 446  : 		}
; 447  : 		return FALSE;

  00ce5	33 c0		 xor	 eax, eax
  00ce7	e9 2b 02 00 00	 jmp	 $LN44@Resistance
  00cec	e9 21 02 00 00	 jmp	 $LN29@Resistance
$LN28@Resistance:

; 448  : 	}
; 449  : 	else if ( skill == 1 )

  00cf1	83 7d 10 01	 cmp	 DWORD PTR _skill$[ebp], 1
  00cf5	75 6c		 jne	 SHORT $LN25@Resistance

; 450  : 	{
; 451  : 		if(gObjSearchActiveEffect(lpObj, AT_POISON) == 0)

  00cf7	6a 37		 push	 55			; 00000037H
  00cf9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cfc	50		 push	 eax
  00cfd	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00d02	83 c4 08	 add	 esp, 8
  00d05	0f b6 c8	 movzx	 ecx, al
  00d08	85 c9		 test	 ecx, ecx
  00d0a	75 4b		 jne	 SHORT $LN24@Resistance

; 452  : 		{
; 453  : 			if ( retResistance(lpTargetObj, 1) == 0 )

  00d0c	6a 01		 push	 1
  00d0e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00d11	50		 push	 eax
  00d12	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00d17	83 c4 08	 add	 esp, 8
  00d1a	85 c0		 test	 eax, eax
  00d1c	75 30		 jne	 SHORT $LN23@Resistance

; 454  : 			{
; 455  : 				lpTargetObj->lpAttackObj = lpObj;

  00d1e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00d21	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00d24	89 88 d4 03 00
	00		 mov	 DWORD PTR [eax+980], ecx

; 456  : 				gObjApplyBuffEffectDuration(lpTargetObj, AT_POISON, 19, 3, 0, 0, 20);

  00d2a	6a 14		 push	 20			; 00000014H
  00d2c	6a 00		 push	 0
  00d2e	6a 00		 push	 0
  00d30	6a 03		 push	 3
  00d32	6a 13		 push	 19			; 00000013H
  00d34	6a 37		 push	 55			; 00000037H
  00d36	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00d39	50		 push	 eax
  00d3a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00d3f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 457  : 				return TRUE;

  00d42	b8 01 00 00 00	 mov	 eax, 1
  00d47	e9 cb 01 00 00	 jmp	 $LN44@Resistance

; 458  : 			}
; 459  : 			else

  00d4c	eb 07		 jmp	 SHORT $LN22@Resistance
$LN23@Resistance:

; 460  : 			{
; 461  : 				return FALSE;

  00d4e	33 c0		 xor	 eax, eax
  00d50	e9 c2 01 00 00	 jmp	 $LN44@Resistance
$LN22@Resistance:

; 462  : 			}	
; 463  : 		}
; 464  : 		else

  00d55	eb 07		 jmp	 SHORT $LN21@Resistance
$LN24@Resistance:

; 465  : 		{
; 466  : 			return FALSE;

  00d57	33 c0		 xor	 eax, eax
  00d59	e9 b9 01 00 00	 jmp	 $LN44@Resistance
$LN21@Resistance:

; 467  : 		}

  00d5e	e9 af 01 00 00	 jmp	 $LN29@Resistance
$LN25@Resistance:

; 468  : 	}
; 469  : 	else if ( skill == 38 ) // Death Poison

  00d63	83 7d 10 26	 cmp	 DWORD PTR _skill$[ebp], 38 ; 00000026H
  00d67	75 76		 jne	 SHORT $LN19@Resistance

; 470  : 	{
; 471  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_POISON) == 0)

  00d69	6a 37		 push	 55			; 00000037H
  00d6b	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00d6e	50		 push	 eax
  00d6f	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00d74	83 c4 08	 add	 esp, 8
  00d77	0f b6 c8	 movzx	 ecx, al
  00d7a	85 c9		 test	 ecx, ecx
  00d7c	75 4b		 jne	 SHORT $LN18@Resistance

; 472  : 		{
; 473  : 			if ( retResistance(lpTargetObj, 1) == 0 )

  00d7e	6a 01		 push	 1
  00d80	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00d83	50		 push	 eax
  00d84	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00d89	83 c4 08	 add	 esp, 8
  00d8c	85 c0		 test	 eax, eax
  00d8e	75 30		 jne	 SHORT $LN17@Resistance

; 474  : 			{
; 475  : 				lpTargetObj->lpAttackObj = lpObj;

  00d90	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00d93	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00d96	89 88 d4 03 00
	00		 mov	 DWORD PTR [eax+980], ecx

; 476  : 				gObjApplyBuffEffectDuration(lpTargetObj, AT_POISON, 19, 3, 0, 0, 10);

  00d9c	6a 0a		 push	 10			; 0000000aH
  00d9e	6a 00		 push	 0
  00da0	6a 00		 push	 0
  00da2	6a 03		 push	 3
  00da4	6a 13		 push	 19			; 00000013H
  00da6	6a 37		 push	 55			; 00000037H
  00da8	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00dab	50		 push	 eax
  00dac	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00db1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 477  : 				return TRUE;

  00db4	b8 01 00 00 00	 mov	 eax, 1
  00db9	e9 59 01 00 00	 jmp	 $LN44@Resistance

; 478  : 			}
; 479  : 			else

  00dbe	eb 07		 jmp	 SHORT $LN16@Resistance
$LN17@Resistance:

; 480  : 			{
; 481  : 				return FALSE;

  00dc0	33 c0		 xor	 eax, eax
  00dc2	e9 50 01 00 00	 jmp	 $LN44@Resistance
$LN16@Resistance:

; 482  : 			}
; 483  : 		}
; 484  : 		else

  00dc7	eb 07		 jmp	 SHORT $LN15@Resistance
$LN18@Resistance:

; 485  : 		{
; 486  : 			return FALSE;

  00dc9	33 c0		 xor	 eax, eax
  00dcb	e9 47 01 00 00	 jmp	 $LN44@Resistance
$LN15@Resistance:

; 487  : 		}
; 488  : 
; 489  : 		return TRUE;

  00dd0	b8 01 00 00 00	 mov	 eax, 1
  00dd5	e9 3d 01 00 00	 jmp	 $LN44@Resistance

; 490  : 	}
; 491  : 	else if ( skill == 7 || skill == 39 || 

  00dda	e9 33 01 00 00	 jmp	 $LN29@Resistance
$LN19@Resistance:

; 492  : 		g_MasterSkillSystem.GetBaseMasterLevelSkill(skill) == 450 ) //Season4 add-on

  00ddf	83 7d 10 07	 cmp	 DWORD PTR _skill$[ebp], 7
  00de3	74 1b		 je	 SHORT $LN12@Resistance
  00de5	83 7d 10 27	 cmp	 DWORD PTR _skill$[ebp], 39 ; 00000027H
  00de9	74 15		 je	 SHORT $LN12@Resistance
  00deb	8b 45 10	 mov	 eax, DWORD PTR _skill$[ebp]
  00dee	50		 push	 eax
  00def	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00df4	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00df9	3d c2 01 00 00	 cmp	 eax, 450		; 000001c2H
  00dfe	75 79		 jne	 SHORT $LN13@Resistance
$LN12@Resistance:

; 493  : 	{
; 494  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_ICE) == 0)

  00e00	6a 38		 push	 56			; 00000038H
  00e02	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00e05	50		 push	 eax
  00e06	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00e0b	83 c4 08	 add	 esp, 8
  00e0e	0f b6 c8	 movzx	 ecx, al
  00e11	85 c9		 test	 ecx, ecx
  00e13	75 58		 jne	 SHORT $LN11@Resistance

; 495  : 		{
; 496  : 			if ( retResistance(lpTargetObj, 0) == 0 )

  00e15	6a 00		 push	 0
  00e17	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00e1a	50		 push	 eax
  00e1b	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00e20	83 c4 08	 add	 esp, 8
  00e23	85 c0		 test	 eax, eax
  00e25	75 3d		 jne	 SHORT $LN10@Resistance

; 497  : 			{
; 498  : 				lpTargetObj->lpAttackObj = lpObj;

  00e27	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00e2a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00e2d	89 88 d4 03 00
	00		 mov	 DWORD PTR [eax+980], ecx

; 499  : 				lpTargetObj->DelayActionTime = 800;

  00e33	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00e36	c7 80 c0 03 00
	00 20 03 00 00	 mov	 DWORD PTR [eax+960], 800 ; 00000320H

; 500  : 				lpTargetObj->DelayLevel = 1;

  00e40	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00e43	c6 80 c4 03 00
	00 01		 mov	 BYTE PTR [eax+964], 1

; 501  : 				gObjApplyBuffEffectDuration(lpTargetObj, AT_ICE, 20, 0, 0, 0, 10);

  00e4a	6a 0a		 push	 10			; 0000000aH
  00e4c	6a 00		 push	 0
  00e4e	6a 00		 push	 0
  00e50	6a 00		 push	 0
  00e52	6a 14		 push	 20			; 00000014H
  00e54	6a 38		 push	 56			; 00000038H
  00e56	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00e59	50		 push	 eax
  00e5a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00e5f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 502  : 			}
; 503  : 			else

  00e62	eb 07		 jmp	 SHORT $LN9@Resistance
$LN10@Resistance:

; 504  : 			{
; 505  : 				return FALSE;

  00e64	33 c0		 xor	 eax, eax
  00e66	e9 ac 00 00 00	 jmp	 $LN44@Resistance
$LN9@Resistance:

; 506  : 			}
; 507  : 		}
; 508  : 		else

  00e6b	eb 07		 jmp	 SHORT $LN8@Resistance
$LN11@Resistance:

; 509  : 		{
; 510  : 			return FALSE;

  00e6d	33 c0		 xor	 eax, eax
  00e6f	e9 a3 00 00 00	 jmp	 $LN44@Resistance
$LN8@Resistance:

; 511  : 		}

  00e74	e9 99 00 00 00	 jmp	 $LN29@Resistance
$LN13@Resistance:

; 512  : 	}
; 513  : 	else if ( skill == 51 || skill == 424 ) // Ice Arrow

  00e79	83 7d 10 33	 cmp	 DWORD PTR _skill$[ebp], 51 ; 00000033H
  00e7d	74 0d		 je	 SHORT $LN5@Resistance
  00e7f	81 7d 10 a8 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 424 ; 000001a8H
  00e86	0f 85 86 00 00
	00		 jne	 $LN29@Resistance
$LN5@Resistance:

; 514  : 	{
; 515  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_ICE_ARROW) == 0)

  00e8c	6a 39		 push	 57			; 00000039H
  00e8e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00e91	50		 push	 eax
  00e92	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00e97	83 c4 08	 add	 esp, 8
  00e9a	0f b6 c8	 movzx	 ecx, al
  00e9d	85 c9		 test	 ecx, ecx
  00e9f	75 6d		 jne	 SHORT $LN4@Resistance

; 516  : 		{
; 517  : 			if ( retResistance(lpTargetObj, 0) == 0 )

  00ea1	6a 00		 push	 0
  00ea3	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00ea6	50		 push	 eax
  00ea7	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00eac	83 c4 08	 add	 esp, 8
  00eaf	85 c0		 test	 eax, eax
  00eb1	75 55		 jne	 SHORT $LN3@Resistance

; 518  : 			{
; 519  : 				gObjApplyBuffEffectDuration(lpTargetObj, AT_ICE_ARROW, 0, 0, 0, 0, 7);

  00eb3	6a 07		 push	 7
  00eb5	6a 00		 push	 0
  00eb7	6a 00		 push	 0
  00eb9	6a 00		 push	 0
  00ebb	6a 00		 push	 0
  00ebd	6a 39		 push	 57			; 00000039H
  00ebf	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00ec2	50		 push	 eax
  00ec3	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00ec8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 520  : 				lpTargetObj->PathCount = 0;

  00ecb	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00ece	c7 80 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+388], 0

; 521  : 				lpTargetObj->PathStartEnd = 0; //Season3 add-on

  00ed8	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00edb	c6 80 8c 01 00
	00 00		 mov	 BYTE PTR [eax+396], 0

; 522  : 				gObjSetPosition(lpTargetObj->m_Index, lpTargetObj->X, lpTargetObj->Y);

  00ee2	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00ee5	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00eec	51		 push	 ecx
  00eed	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00ef0	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  00ef7	50		 push	 eax
  00ef8	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00efb	8b 11		 mov	 edx, DWORD PTR [ecx]
  00efd	52		 push	 edx
  00efe	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  00f03	83 c4 0c	 add	 esp, 12			; 0000000cH

; 523  : 			}
; 524  : 			else

  00f06	eb 04		 jmp	 SHORT $LN2@Resistance
$LN3@Resistance:

; 525  : 			{
; 526  : 				return FALSE;

  00f08	33 c0		 xor	 eax, eax
  00f0a	eb 0b		 jmp	 SHORT $LN44@Resistance
$LN2@Resistance:

; 527  : 			}
; 528  : 		}
; 529  : 		else

  00f0c	eb 04		 jmp	 SHORT $LN29@Resistance
$LN4@Resistance:

; 530  : 		{
; 531  : 			return FALSE;

  00f0e	33 c0		 xor	 eax, eax
  00f10	eb 05		 jmp	 SHORT $LN44@Resistance
$LN29@Resistance:

; 532  : 		}
; 533  : 	}
; 534  : 
; 535  : 	return TRUE;

  00f12	b8 01 00 00 00	 mov	 eax, 1
$LN44@Resistance:

; 536  : }

  00f17	5f		 pop	 edi
  00f18	5e		 pop	 esi
  00f19	5b		 pop	 ebx
  00f1a	8b e5		 mov	 esp, ebp
  00f1c	5d		 pop	 ebp
  00f1d	c2 0c 00	 ret	 12			; 0000000cH
?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ENDP ; CObjBaseAttack::ResistanceCheck
_TEXT	ENDS
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z:PROC ; GCMagicAttackNumberSend
EXTRN	_rand:PROC
EXTRN	?GCDamageSend@@YAXHHHHHH@Z:PROC			; GCDamageSend
EXTRN	?GetShieldSpellStatus@CIllusionTempleEvent@@QAEHHE@Z:PROC ; CIllusionTempleEvent::GetShieldSpellStatus
EXTRN	?GetState@CIllusionTempleEvent@@QAEEE@Z:PROC	; CIllusionTempleEvent::GetState
EXTRN	?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A:BYTE ; g_IllusionTempleEvent
EXTRN	___security_cookie:DWORD
EXTRN	__except_handler4:PROC
EXTRN	__ftol2_sse:PROC
xdata$x	SEGMENT
__sehtable$?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff6cH
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN37@MissCheck
	DD	FLAT:$LN38@MissCheck
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv72 = -132						; size = 4
$T236918 = -128						; size = 4
$T236919 = -124						; size = 4
$T236920 = -120						; size = 4
$T236921 = -116						; size = 4
$T236922 = -112						; size = 4
_iBaseLevel$236397 = -44				; size = 4
_iMSBDamage$236390 = -40				; size = 4
_iDefenseRate$236389 = -36				; size = 4
_iAttackRate$236388 = -32				; size = 4
_this$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_skill$ = 16						; size = 4
_skillSuccess$ = 20					; size = 4
_magicsend$ = 24					; size = 4
_bAllMiss$ = 28						; size = 4
_byBarrageCount$ = 32					; size = 1
?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z PROC ; CObjBaseAttack::MissCheck
; _this$ = ecx

; 540  : {

  00f20	55		 push	 ebp
  00f21	8b ec		 mov	 ebp, esp
  00f23	6a fe		 push	 -2			; fffffffeH
  00f25	68 00 00 00 00	 push	 OFFSET __sehtable$?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
  00f2a	68 00 00 00 00	 push	 OFFSET __except_handler4
  00f2f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00f35	50		 push	 eax
  00f36	83 c4 8c	 add	 esp, -116		; ffffff8cH
  00f39	53		 push	 ebx
  00f3a	56		 push	 esi
  00f3b	57		 push	 edi
  00f3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00f41	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00f44	33 c5		 xor	 eax, ebp
  00f46	50		 push	 eax
  00f47	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00f4a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00f50	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00f53	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 541  : 	__try

  00f56	9b		 fwait
  00f57	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 542  : 	{
; 543  : 		int iAttackRate = 0;	// lc20

  00f5e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iAttackRate$236388[ebp], 0

; 544  : 		int iDefenseRate = lpTargetObj->m_SuccessfulBlocking;	// lc24

  00f65	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00f68	8b 88 9c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1180]
  00f6e	89 4d dc	 mov	 DWORD PTR _iDefenseRate$236389[ebp], ecx

; 545  : 		int iMSBDamage = 0;	// MonsterSetBasse Damage

  00f71	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _iMSBDamage$236390[ebp], 0

; 546  : 
; 547  : 		if(IT_MAP_RANGE(lpTargetObj->MapNumber) != FALSE) //Season2.5 add-on Illusion

  00f78	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00f7b	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00f82	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  00f85	7d 0c		 jge	 SHORT $LN34@MissCheck
  00f87	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv72[ebp], 0
  00f91	eb 18		 jmp	 SHORT $LN35@MissCheck
$LN34@MissCheck:
  00f93	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00f96	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  00f9d	33 c9		 xor	 ecx, ecx
  00f9f	83 f8 32	 cmp	 eax, 50			; 00000032H
  00fa2	0f 9e c1	 setle	 cl
  00fa5	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
$LN35@MissCheck:
  00fab	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv72[ebp], 0
  00fb2	0f 84 ca 00 00
	00		 je	 $LN26@MissCheck

; 548  : 		{
; 549  : 			if(g_IllusionTempleEvent.GetState(lpTargetObj->MapNumber) == 2)

  00fb8	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00fbb	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00fc2	51		 push	 ecx
  00fc3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  00fc8	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleEvent@@QAEEE@Z ; CIllusionTempleEvent::GetState
  00fcd	0f b6 d0	 movzx	 edx, al
  00fd0	83 fa 02	 cmp	 edx, 2
  00fd3	0f 85 a9 00 00
	00		 jne	 $LN26@MissCheck

; 550  : 			{
; 551  : 				if ( lpTargetObj->Type == OBJ_USER )

  00fd9	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00fdc	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  00fe0	83 f9 01	 cmp	 ecx, 1
  00fe3	75 56		 jne	 SHORT $LN27@MissCheck

; 552  : 				{
; 553  : 					if(g_IllusionTempleEvent.GetShieldSpellStatus(lpTargetObj->m_iIllusionTempleIndex, lpTargetObj->MapNumber) != FALSE)

  00fe5	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00fe8	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00fef	51		 push	 ecx
  00ff0	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00ff3	8b 82 78 20 00
	00		 mov	 eax, DWORD PTR [edx+8312]
  00ff9	50		 push	 eax
  00ffa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  00fff	e8 00 00 00 00	 call	 ?GetShieldSpellStatus@CIllusionTempleEvent@@QAEHHE@Z ; CIllusionTempleEvent::GetShieldSpellStatus
  01004	85 c0		 test	 eax, eax
  01006	74 33		 je	 SHORT $LN27@MissCheck

; 554  : 					{
; 555  : 						GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  01008	6a 00		 push	 0
  0100a	6a 00		 push	 0
  0100c	6a 00		 push	 0
  0100e	6a 00		 push	 0
  01010	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01013	8b 08		 mov	 ecx, DWORD PTR [eax]
  01015	51		 push	 ecx
  01016	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01019	8b 02		 mov	 eax, DWORD PTR [edx]
  0101b	50		 push	 eax
  0101c	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  01021	83 c4 18	 add	 esp, 24			; 00000018H

; 556  : 						return FALSE;

  01024	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T236918[ebp], 0
  0102b	9b		 fwait
  0102c	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  01033	8b 45 80	 mov	 eax, DWORD PTR $T236918[ebp]
  01036	e9 e2 03 00 00	 jmp	 $LN32@MissCheck
$LN27@MissCheck:

; 557  : 					}	
; 558  : 				}
; 559  : 				if(lpObj->PartyNumber == lpTargetObj->PartyNumber)

  0103b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0103e	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  01041	8b 90 2c 04 00
	00		 mov	 edx, DWORD PTR [eax+1068]
  01047	3b 91 2c 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1068]
  0104d	75 33		 jne	 SHORT $LN26@MissCheck

; 560  : 				{
; 561  : 					GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  0104f	6a 00		 push	 0
  01051	6a 00		 push	 0
  01053	6a 00		 push	 0
  01055	6a 00		 push	 0
  01057	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0105a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0105c	51		 push	 ecx
  0105d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01060	8b 02		 mov	 eax, DWORD PTR [edx]
  01062	50		 push	 eax
  01063	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  01068	83 c4 18	 add	 esp, 24			; 00000018H

; 562  : 					return FALSE;

  0106b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR $T236919[ebp], 0
  01072	9b		 fwait
  01073	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0107a	8b 45 84	 mov	 eax, DWORD PTR $T236919[ebp]
  0107d	e9 9b 03 00 00	 jmp	 $LN32@MissCheck
$LN26@MissCheck:

; 563  : 				}
; 564  : 			}
; 565  : 		}
; 566  : 
; 567  : 		if ( lpObj->Type == OBJ_USER )	// Miss for Uses

  01082	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01085	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01089	83 f9 01	 cmp	 ecx, 1
  0108c	0f 85 20 01 00
	00		 jne	 $LN25@MissCheck

; 568  : 		{
; 569  : 			int iBaseLevel = lpObj->Level + lpObj->MLevel;

  01092	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01095	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0109c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0109f	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  010a6	03 c8		 add	 ecx, eax
  010a8	89 4d d4	 mov	 DWORD PTR _iBaseLevel$236397[ebp], ecx

; 570  : 
; 571  : 			if ( lpObj->Class == CLASS_DARKLORD ) // DL

  010ab	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010ae	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  010b5	83 f9 04	 cmp	 ecx, 4
  010b8	0f 85 8a 00 00
	00		 jne	 $LN24@MissCheck

; 572  : 			{
; 573  : 				iAttackRate = iBaseLevel * 5 + ((lpObj->Dexterity + lpObj->AddDexterity) * 6) / 2 + ( lpObj->Strength + lpObj->AddStrength) / 4  + ((lpObj->Leadership + lpObj->AddLeadership)/10);

  010be	8b 4d d4	 mov	 ecx, DWORD PTR _iBaseLevel$236397[ebp]
  010c1	6b c9 05	 imul	 ecx, 5
  010c4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  010c7	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  010ce	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  010d1	0f bf 92 22 01
	00 00		 movsx	 edx, WORD PTR [edx+290]
  010d8	03 c2		 add	 eax, edx
  010da	6b c0 06	 imul	 eax, 6
  010dd	99		 cdq
  010de	2b c2		 sub	 eax, edx
  010e0	d1 f8		 sar	 eax, 1
  010e2	03 c8		 add	 ecx, eax
  010e4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010e7	0f b7 80 f4 00
	00 00		 movzx	 eax, WORD PTR [eax+244]
  010ee	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  010f1	0f bf 92 20 01
	00 00		 movsx	 edx, WORD PTR [edx+288]
  010f8	03 c2		 add	 eax, edx
  010fa	99		 cdq
  010fb	83 e2 03	 and	 edx, 3
  010fe	03 c2		 add	 eax, edx
  01100	c1 f8 02	 sar	 eax, 2
  01103	03 c8		 add	 ecx, eax
  01105	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01108	0f b7 80 18 01
	00 00		 movzx	 eax, WORD PTR [eax+280]
  0110f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01112	0f b7 92 1a 01
	00 00		 movzx	 edx, WORD PTR [edx+282]
  01119	03 c2		 add	 eax, edx
  0111b	99		 cdq
  0111c	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  01121	f7 fe		 idiv	 esi
  01123	03 c8		 add	 ecx, eax
  01125	89 4d e0	 mov	 DWORD PTR _iAttackRate$236388[ebp], ecx

; 574  : 				iAttackRate += iAttackRate * lpObj->SetOpImproveSuccessAttackRate / 100;

  01128	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0112b	0f b6 88 41 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4417]
  01132	8b c1		 mov	 eax, ecx
  01134	0f af 45 e0	 imul	 eax, DWORD PTR _iAttackRate$236388[ebp]
  01138	99		 cdq
  01139	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0113e	f7 f9		 idiv	 ecx
  01140	03 45 e0	 add	 eax, DWORD PTR _iAttackRate$236388[ebp]
  01143	89 45 e0	 mov	 DWORD PTR _iAttackRate$236388[ebp], eax

; 575  : 			}
; 576  : 			else

  01146	eb 68		 jmp	 SHORT $LN23@MissCheck
$LN24@MissCheck:

; 577  : 			{
; 578  : 				iAttackRate = iBaseLevel * 5 + ((lpObj->Dexterity + lpObj->AddDexterity) * 3) / 2 + ( lpObj->Strength + lpObj->AddStrength) / 4 ;

  01148	8b 4d d4	 mov	 ecx, DWORD PTR _iBaseLevel$236397[ebp]
  0114b	6b c9 05	 imul	 ecx, 5
  0114e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01151	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  01158	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0115b	0f bf 92 22 01
	00 00		 movsx	 edx, WORD PTR [edx+290]
  01162	03 c2		 add	 eax, edx
  01164	6b c0 03	 imul	 eax, 3
  01167	99		 cdq
  01168	2b c2		 sub	 eax, edx
  0116a	d1 f8		 sar	 eax, 1
  0116c	03 c8		 add	 ecx, eax
  0116e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01171	0f b7 80 f4 00
	00 00		 movzx	 eax, WORD PTR [eax+244]
  01178	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0117b	0f bf 92 20 01
	00 00		 movsx	 edx, WORD PTR [edx+288]
  01182	03 c2		 add	 eax, edx
  01184	99		 cdq
  01185	83 e2 03	 and	 edx, 3
  01188	03 c2		 add	 eax, edx
  0118a	c1 f8 02	 sar	 eax, 2
  0118d	03 c8		 add	 ecx, eax
  0118f	89 4d e0	 mov	 DWORD PTR _iAttackRate$236388[ebp], ecx

; 579  : 				iAttackRate += iAttackRate * lpObj->SetOpImproveSuccessAttackRate / 100;

  01192	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01195	0f b6 88 41 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4417]
  0119c	8b c1		 mov	 eax, ecx
  0119e	0f af 45 e0	 imul	 eax, DWORD PTR _iAttackRate$236388[ebp]
  011a2	99		 cdq
  011a3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  011a8	f7 f9		 idiv	 ecx
  011aa	03 45 e0	 add	 eax, DWORD PTR _iAttackRate$236388[ebp]
  011ad	89 45 e0	 mov	 DWORD PTR _iAttackRate$236388[ebp], eax
$LN23@MissCheck:

; 580  : 			}
; 581  : 		}
; 582  : 		else	// Miss for Monsters

  011b0	eb 0c		 jmp	 SHORT $LN22@MissCheck
$LN25@MissCheck:

; 583  : 		{
; 584  : 			iAttackRate = lpObj->m_AttackRating;

  011b2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011b5	8b 88 88 04 00
	00		 mov	 ecx, DWORD PTR [eax+1160]
  011bb	89 4d e0	 mov	 DWORD PTR _iAttackRate$236388[ebp], ecx
$LN22@MissCheck:

; 585  : 		}
; 586  : 
; 587  : 		iAttackRate += lpObj->m_MPSkillOpt.MpsAttackSuccessRate;

  011be	db 45 e0	 fild	 DWORD PTR _iAttackRate$236388[ebp]
  011c1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011c4	d8 80 34 26 00
	00		 fadd	 DWORD PTR [eax+9780]
  011ca	e8 00 00 00 00	 call	 __ftol2_sse
  011cf	89 45 e0	 mov	 DWORD PTR _iAttackRate$236388[ebp], eax

; 588  : 
; 589  : 		if ( iAttackRate < iDefenseRate )

  011d2	8b 45 e0	 mov	 eax, DWORD PTR _iAttackRate$236388[ebp]
  011d5	3b 45 dc	 cmp	 eax, DWORD PTR _iDefenseRate$236389[ebp]
  011d8	7d 09		 jge	 SHORT $LN21@MissCheck

; 590  : 		{
; 591  : 			bAllMiss = TRUE;

  011da	8b 45 1c	 mov	 eax, DWORD PTR _bAllMiss$[ebp]
  011dd	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN21@MissCheck:

; 592  : 		}
; 593  : 
; 594  : 		if ( bAllMiss != FALSE )	// When All Miss

  011e3	8b 45 1c	 mov	 eax, DWORD PTR _bAllMiss$[ebp]
  011e6	83 38 00	 cmp	 DWORD PTR [eax], 0
  011e9	0f 84 ed 00 00
	00		 je	 $LN20@MissCheck

; 595  : 		{
; 596  : 			if ( (rand()%100) >= 5 )

  011ef	e8 00 00 00 00	 call	 _rand
  011f4	99		 cdq
  011f5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  011fa	f7 f9		 idiv	 ecx
  011fc	83 fa 05	 cmp	 edx, 5
  011ff	0f 8c d2 00 00
	00		 jl	 $LN19@MissCheck

; 597  : 			{
; 598  : #ifdef MONK
; 599  : 				if( lpObj->Class == CLASS_MONK && byBarrageCount )

  01205	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01208	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0120f	83 f9 06	 cmp	 ecx, 6
  01212	75 6c		 jne	 SHORT $LN12@MissCheck
  01214	0f b6 45 20	 movzx	 eax, BYTE PTR _byBarrageCount$[ebp]
  01218	85 c0		 test	 eax, eax
  0121a	74 64		 je	 SHORT $LN12@MissCheck

; 600  : 				{
; 601  : 					if( skill != 261 && skill != 263 )

  0121c	81 7d 10 05 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 261 ; 00000105H
  01223	74 33		 je	 SHORT $LN17@MissCheck
  01225	81 7d 10 07 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 263 ; 00000107H
  0122c	74 2a		 je	 SHORT $LN17@MissCheck

; 602  : 					{
; 603  : 						if( byBarrageCount % 4 )

  0122e	0f b6 45 20	 movzx	 eax, BYTE PTR _byBarrageCount$[ebp]
  01232	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  01237	79 05		 jns	 SHORT $LN41@MissCheck
  01239	48		 dec	 eax
  0123a	83 c8 fc	 or	 eax, -4			; fffffffcH
  0123d	40		 inc	 eax
$LN41@MissCheck:
  0123e	85 c0		 test	 eax, eax
  01240	74 0b		 je	 SHORT $LN16@MissCheck

; 604  : 						{
; 605  : 							iMSBDamage |= 0x10u;

  01242	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  01245	83 c8 10	 or	 eax, 16			; 00000010H
  01248	89 45 d8	 mov	 DWORD PTR _iMSBDamage$236390[ebp], eax

; 606  : 						}
; 607  : 						else

  0124b	eb 09		 jmp	 SHORT $LN15@MissCheck
$LN16@MissCheck:

; 608  : 						{
; 609  : 							iMSBDamage |= 0x20;

  0124d	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  01250	83 c8 20	 or	 eax, 32			; 00000020H
  01253	89 45 d8	 mov	 DWORD PTR _iMSBDamage$236390[ebp], eax
$LN15@MissCheck:

; 610  : 						}
; 611  : 					}
; 612  : 					else

  01256	eb 28		 jmp	 SHORT $LN12@MissCheck
$LN17@MissCheck:

; 613  : 					{
; 614  : 						if( byBarrageCount % 2 )

  01258	0f b6 45 20	 movzx	 eax, BYTE PTR _byBarrageCount$[ebp]
  0125c	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  01261	79 05		 jns	 SHORT $LN42@MissCheck
  01263	48		 dec	 eax
  01264	83 c8 fe	 or	 eax, -2			; fffffffeH
  01267	40		 inc	 eax
$LN42@MissCheck:
  01268	85 c0		 test	 eax, eax
  0126a	74 0b		 je	 SHORT $LN13@MissCheck

; 615  : 						{
; 616  : 							iMSBDamage |= 0x10u;

  0126c	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  0126f	83 c8 10	 or	 eax, 16			; 00000010H
  01272	89 45 d8	 mov	 DWORD PTR _iMSBDamage$236390[ebp], eax

; 617  : 						}
; 618  : 						else

  01275	eb 09		 jmp	 SHORT $LN12@MissCheck
$LN13@MissCheck:

; 619  : 						{
; 620  : 							iMSBDamage |= 0x20;

  01277	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  0127a	83 c8 20	 or	 eax, 32			; 00000020H
  0127d	89 45 d8	 mov	 DWORD PTR _iMSBDamage$236390[ebp], eax
$LN12@MissCheck:

; 621  : 						}
; 622  : 					}
; 623  : 				}
; 624  : #endif
; 625  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, iMSBDamage, 0);

  01280	6a 00		 push	 0
  01282	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  01285	50		 push	 eax
  01286	6a 00		 push	 0
  01288	6a 00		 push	 0
  0128a	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0128d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0128f	52		 push	 edx
  01290	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01293	8b 08		 mov	 ecx, DWORD PTR [eax]
  01295	51		 push	 ecx
  01296	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0129b	83 c4 18	 add	 esp, 24			; 00000018H

; 626  : 
; 627  : 				if (magicsend != 0 )

  0129e	83 7d 18 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  012a2	74 1c		 je	 SHORT $LN11@MissCheck

; 628  : 				{
; 629  : 					GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, skillSuccess);

  012a4	0f b6 45 14	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  012a8	50		 push	 eax
  012a9	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  012ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  012ae	52		 push	 edx
  012af	0f b7 45 10	 movzx	 eax, WORD PTR _skill$[ebp]
  012b3	50		 push	 eax
  012b4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  012b7	51		 push	 ecx
  012b8	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  012bd	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@MissCheck:

; 630  : 				}
; 631  : 
; 632  : 				return FALSE;

  012c0	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T236920[ebp], 0
  012c7	9b		 fwait
  012c8	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  012cf	8b 45 88	 mov	 eax, DWORD PTR $T236920[ebp]
  012d2	e9 46 01 00 00	 jmp	 $LN32@MissCheck
$LN19@MissCheck:

; 633  : 			}
; 634  : 		}
; 635  : 		else	// if the is a chance  ot hit the target

  012d7	e9 e1 00 00 00	 jmp	 $LN9@MissCheck
$LN20@MissCheck:

; 636  : 		{
; 637  : 			if ( (rand()%iAttackRate) < iDefenseRate)

  012dc	e8 00 00 00 00	 call	 _rand
  012e1	99		 cdq
  012e2	f7 7d e0	 idiv	 DWORD PTR _iAttackRate$236388[ebp]
  012e5	3b 55 dc	 cmp	 edx, DWORD PTR _iDefenseRate$236389[ebp]
  012e8	0f 8d cf 00 00
	00		 jge	 $LN9@MissCheck

; 638  : 			{
; 639  : #ifdef MONK
; 640  : 				if( lpObj->Class == CLASS_MONK && byBarrageCount )

  012ee	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  012f1	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  012f8	83 f9 06	 cmp	 ecx, 6
  012fb	75 6c		 jne	 SHORT $LN2@MissCheck
  012fd	0f b6 45 20	 movzx	 eax, BYTE PTR _byBarrageCount$[ebp]
  01301	85 c0		 test	 eax, eax
  01303	74 64		 je	 SHORT $LN2@MissCheck

; 641  : 				{
; 642  : 					if( skill != 261 && skill != 263 )

  01305	81 7d 10 05 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 261 ; 00000105H
  0130c	74 33		 je	 SHORT $LN7@MissCheck
  0130e	81 7d 10 07 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 263 ; 00000107H
  01315	74 2a		 je	 SHORT $LN7@MissCheck

; 643  : 					{
; 644  : 						if( byBarrageCount % 4 )

  01317	0f b6 45 20	 movzx	 eax, BYTE PTR _byBarrageCount$[ebp]
  0131b	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  01320	79 05		 jns	 SHORT $LN43@MissCheck
  01322	48		 dec	 eax
  01323	83 c8 fc	 or	 eax, -4			; fffffffcH
  01326	40		 inc	 eax
$LN43@MissCheck:
  01327	85 c0		 test	 eax, eax
  01329	74 0b		 je	 SHORT $LN6@MissCheck

; 645  : 						{
; 646  : 							iMSBDamage |= 0x10u;

  0132b	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  0132e	83 c8 10	 or	 eax, 16			; 00000010H
  01331	89 45 d8	 mov	 DWORD PTR _iMSBDamage$236390[ebp], eax

; 647  : 						}
; 648  : 						else

  01334	eb 09		 jmp	 SHORT $LN5@MissCheck
$LN6@MissCheck:

; 649  : 						{
; 650  : 							iMSBDamage |= 0x20;

  01336	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  01339	83 c8 20	 or	 eax, 32			; 00000020H
  0133c	89 45 d8	 mov	 DWORD PTR _iMSBDamage$236390[ebp], eax
$LN5@MissCheck:

; 651  : 						}
; 652  : 					}
; 653  : 					else

  0133f	eb 28		 jmp	 SHORT $LN2@MissCheck
$LN7@MissCheck:

; 654  : 					{
; 655  : 						if( byBarrageCount % 2 )

  01341	0f b6 45 20	 movzx	 eax, BYTE PTR _byBarrageCount$[ebp]
  01345	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0134a	79 05		 jns	 SHORT $LN44@MissCheck
  0134c	48		 dec	 eax
  0134d	83 c8 fe	 or	 eax, -2			; fffffffeH
  01350	40		 inc	 eax
$LN44@MissCheck:
  01351	85 c0		 test	 eax, eax
  01353	74 0b		 je	 SHORT $LN3@MissCheck

; 656  : 						{
; 657  : 							iMSBDamage |= 0x10u;

  01355	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  01358	83 c8 10	 or	 eax, 16			; 00000010H
  0135b	89 45 d8	 mov	 DWORD PTR _iMSBDamage$236390[ebp], eax

; 658  : 						}
; 659  : 						else

  0135e	eb 09		 jmp	 SHORT $LN2@MissCheck
$LN3@MissCheck:

; 660  : 						{
; 661  : 							iMSBDamage |= 0x20;

  01360	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  01363	83 c8 20	 or	 eax, 32			; 00000020H
  01366	89 45 d8	 mov	 DWORD PTR _iMSBDamage$236390[ebp], eax
$LN2@MissCheck:

; 662  : 						}
; 663  : 					}
; 664  : 				}
; 665  : #endif
; 666  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, iMSBDamage, 0);

  01369	6a 00		 push	 0
  0136b	8b 45 d8	 mov	 eax, DWORD PTR _iMSBDamage$236390[ebp]
  0136e	50		 push	 eax
  0136f	6a 00		 push	 0
  01371	6a 00		 push	 0
  01373	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  01376	8b 11		 mov	 edx, DWORD PTR [ecx]
  01378	52		 push	 edx
  01379	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0137c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0137e	51		 push	 ecx
  0137f	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  01384	83 c4 18	 add	 esp, 24			; 00000018H

; 667  : 
; 668  : 				if ( magicsend != 0 )

  01387	83 7d 18 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  0138b	74 1c		 je	 SHORT $LN1@MissCheck

; 669  : 				{
; 670  : 					GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index,  skillSuccess);

  0138d	0f b6 45 14	 movzx	 eax, BYTE PTR _skillSuccess$[ebp]
  01391	50		 push	 eax
  01392	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  01395	8b 11		 mov	 edx, DWORD PTR [ecx]
  01397	52		 push	 edx
  01398	0f b7 45 10	 movzx	 eax, WORD PTR _skill$[ebp]
  0139c	50		 push	 eax
  0139d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  013a0	51		 push	 ecx
  013a1	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  013a6	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MissCheck:

; 671  : 				}
; 672  : 
; 673  : 				return FALSE;

  013a9	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T236921[ebp], 0
  013b0	9b		 fwait
  013b1	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  013b8	8b 45 8c	 mov	 eax, DWORD PTR $T236921[ebp]
  013bb	eb 60		 jmp	 SHORT $LN32@MissCheck
$LN9@MissCheck:

; 674  : 			}
; 675  : 		}
; 676  : 	}

  013bd	9b		 fwait
  013be	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  013c5	eb 51		 jmp	 SHORT $LN40@MissCheck
$LN37@MissCheck:
$LN46@MissCheck:

; 677  : 	__except (lpObj->Level=1,-1)

  013c7	b8 01 00 00 00	 mov	 eax, 1
  013cc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  013cf	66 89 81 be 00
	00 00		 mov	 WORD PTR [ecx+190], ax
  013d6	83 c8 ff	 or	 eax, -1
$LN39@MissCheck:
$LN45@MissCheck:
  013d9	c3		 ret	 0
$LN38@MissCheck:
  013da	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 678  : 	{
; 679  : 		LogAdd(lMsg.Get(MSGGET(2, 12)), lpObj->Name);

  013dd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013e0	83 c0 77	 add	 eax, 119		; 00000077H
  013e3	50		 push	 eax
  013e4	68 0c 02 00 00	 push	 524			; 0000020cH
  013e9	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  013ee	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  013f3	50		 push	 eax
  013f4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  013fa	83 c4 08	 add	 esp, 8

; 680  : 		return FALSE;

  013fd	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T236922[ebp], 0
  01404	9b		 fwait
  01405	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0140c	8b 45 90	 mov	 eax, DWORD PTR $T236922[ebp]
  0140f	eb 0c		 jmp	 SHORT $LN32@MissCheck

; 681  : 	}

  01411	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN40@MissCheck:

; 682  : 
; 683  : 	return TRUE;

  01418	b8 01 00 00 00	 mov	 eax, 1
$LN32@MissCheck:

; 684  : }

  0141d	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  01420	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01427	59		 pop	 ecx
  01428	5f		 pop	 edi
  01429	5e		 pop	 esi
  0142a	5b		 pop	 ebx
  0142b	8b e5		 mov	 esp, ebp
  0142d	5d		 pop	 ebp
  0142e	c2 1c 00	 ret	 28			; 0000001cH
?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ENDP ; CObjBaseAttack::MissCheck
_TEXT	ENDS
PUBLIC	?Init@ComboSkillData@@QAEXXZ			; ComboSkillData::Init
PUBLIC	??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	__real@4059000000000000
PUBLIC	__real@40c3880000000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@00000000
PUBLIC	?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheckPvP
EXTRN	?g_bShieldComboMissOptionOn@@3HA:DWORD		; g_bShieldComboMissOptionOn
EXTRN	?g_fSuccessAttackRateOption@@3MA:DWORD		; g_fSuccessAttackRateOption
;	COMDAT ??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@ DB '['
	DB	'Shield] ComboSkill Cancel! [%s][%s]', 00H	; `string'
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@40c3880000000000
CONST	SEGMENT
__real@40c3880000000000 DQ 040c3880000000000r	; 10000
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv631 = -108						; size = 4
tv615 = -108						; size = 4
tv611 = -108						; size = 4
tv607 = -108						; size = 4
tv603 = -108						; size = 4
tv590 = -108						; size = 4
tv580 = -108						; size = 4
tv571 = -108						; size = 4
tv561 = -108						; size = 4
tv551 = -108						; size = 4
tv542 = -108						; size = 4
tv533 = -108						; size = 4
tv522 = -108						; size = 4
tv514 = -108						; size = 4
tv506 = -108						; size = 4
tv502 = -108						; size = 4
tv494 = -108						; size = 4
tv486 = -108						; size = 4
tv482 = -108						; size = 4
tv71 = -108						; size = 4
_MsgDamage$236495 = -40					; size = 4
_dwRate$ = -36						; size = 4
_iExpressionB$ = -32					; size = 4
_iExpressionA$ = -28					; size = 4
_iTargetBaseLevel$ = -24				; size = 4
_iBaseLevel$ = -20					; size = 4
_iAttackSuccessRate$ = -16				; size = 4
_iDefenseRate$ = -12					; size = 4
_iAttackRate$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_skill$ = 16						; size = 4
_skillSuccess$ = 20					; size = 4
_magicsend$ = 24					; size = 4
_bAllMiss$ = 28						; size = 4
_byBarrageCount$ = 32					; size = 1
?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z PROC ; CObjBaseAttack::MissCheckPvP
; _this$ = ecx

; 688  : {

  01440	55		 push	 ebp
  01441	8b ec		 mov	 ebp, esp
  01443	83 ec 6c	 sub	 esp, 108		; 0000006cH
  01446	53		 push	 ebx
  01447	56		 push	 esi
  01448	57		 push	 edi
  01449	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 689  : 	float iAttackRate = 0;

  0144c	d9 ee		 fldz
  0144e	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]

; 690  : 	float iDefenseRate = 0;

  01451	d9 ee		 fldz
  01453	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]

; 691  : 	int iAttackSuccessRate = 0; 

  01456	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iAttackSuccessRate$[ebp], 0

; 692  : 
; 693  : 	if(IT_MAP_RANGE(lpTargetObj->MapNumber) != FALSE) //Season2.5 add-on Illusion

  0145d	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01460	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  01467	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  0146a	7d 09		 jge	 SHORT $LN52@MissCheckP
  0146c	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  01473	eb 15		 jmp	 SHORT $LN53@MissCheckP
$LN52@MissCheckP:
  01475	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  01478	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0147f	33 c9		 xor	 ecx, ecx
  01481	83 f8 32	 cmp	 eax, 50			; 00000032H
  01484	0f 9e c1	 setle	 cl
  01487	89 4d 94	 mov	 DWORD PTR tv71[ebp], ecx
$LN53@MissCheckP:
  0148a	83 7d 94 00	 cmp	 DWORD PTR tv71[ebp], 0
  0148e	0f 84 aa 00 00
	00		 je	 $LN45@MissCheckP

; 694  : 	{
; 695  : 		if(g_IllusionTempleEvent.GetState(lpTargetObj->MapNumber) == 2)

  01494	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01497	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0149e	51		 push	 ecx
  0149f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  014a4	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleEvent@@QAEEE@Z ; CIllusionTempleEvent::GetState
  014a9	0f b6 d0	 movzx	 edx, al
  014ac	83 fa 02	 cmp	 edx, 2
  014af	0f 85 89 00 00
	00		 jne	 $LN45@MissCheckP

; 696  : 		{
; 697  : 			if ( lpTargetObj->Type == OBJ_USER )

  014b5	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  014b8	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  014bc	83 f9 01	 cmp	 ecx, 1
  014bf	75 46		 jne	 SHORT $LN46@MissCheckP

; 698  : 			{
; 699  : 				if(g_IllusionTempleEvent.GetShieldSpellStatus(lpTargetObj->m_iIllusionTempleIndex, lpTargetObj->MapNumber) != FALSE)

  014c1	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  014c4	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  014cb	51		 push	 ecx
  014cc	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  014cf	8b 82 78 20 00
	00		 mov	 eax, DWORD PTR [edx+8312]
  014d5	50		 push	 eax
  014d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  014db	e8 00 00 00 00	 call	 ?GetShieldSpellStatus@CIllusionTempleEvent@@QAEHHE@Z ; CIllusionTempleEvent::GetShieldSpellStatus
  014e0	85 c0		 test	 eax, eax
  014e2	74 23		 je	 SHORT $LN46@MissCheckP

; 700  : 				{
; 701  : 					GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  014e4	6a 00		 push	 0
  014e6	6a 00		 push	 0
  014e8	6a 00		 push	 0
  014ea	6a 00		 push	 0
  014ec	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  014ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  014f1	51		 push	 ecx
  014f2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  014f5	8b 02		 mov	 eax, DWORD PTR [edx]
  014f7	50		 push	 eax
  014f8	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  014fd	83 c4 18	 add	 esp, 24			; 00000018H

; 702  : 					return FALSE;

  01500	33 c0		 xor	 eax, eax
  01502	e9 d9 05 00 00	 jmp	 $LN50@MissCheckP
$LN46@MissCheckP:

; 703  : 				}	
; 704  : 			}
; 705  : 			if(lpObj->PartyNumber == lpTargetObj->PartyNumber)

  01507	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0150a	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0150d	8b 90 2c 04 00
	00		 mov	 edx, DWORD PTR [eax+1068]
  01513	3b 91 2c 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1068]
  01519	75 23		 jne	 SHORT $LN45@MissCheckP

; 706  : 			{
; 707  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  0151b	6a 00		 push	 0
  0151d	6a 00		 push	 0
  0151f	6a 00		 push	 0
  01521	6a 00		 push	 0
  01523	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01526	8b 08		 mov	 ecx, DWORD PTR [eax]
  01528	51		 push	 ecx
  01529	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0152c	8b 02		 mov	 eax, DWORD PTR [edx]
  0152e	50		 push	 eax
  0152f	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  01534	83 c4 18	 add	 esp, 24			; 00000018H

; 708  : 				return FALSE;

  01537	33 c0		 xor	 eax, eax
  01539	e9 a2 05 00 00	 jmp	 $LN50@MissCheckP
$LN45@MissCheckP:

; 709  : 			}
; 710  : 		}
; 711  : 	}
; 712  : 
; 713  : 	int iBaseLevel = lpObj->Level + lpObj->MLevel;

  0153e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01541	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  01548	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0154b	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  01552	03 c8		 add	 ecx, eax
  01554	89 4d ec	 mov	 DWORD PTR _iBaseLevel$[ebp], ecx

; 714  : 
; 715  : 	//if( Class == CLASS_WIZARD || Class == CLASS_DARKLORD )
; 716  : 	//{
; 717  : 	//	AttackRate = (float)(Level * this->m_Data[Class].PvPAttackRateFact1 + lpUser->Dexterity * this->m_Data[Class].PvPAttackRateFact2);
; 718  : 	//}
; 719  : 	//else if( Class == CLASS_KNIGHT || Class == CLASS_ELF || Class == CLASS_MAGUMSA || Class == CLASS_SUMMONER )
; 720  : 	//{
; 721  : 	//	AttackRate = (float)(Level * this->m_Data[Class].PvPAttackRateFact1  + (lpUser->Dexterity * this->m_Data[Class].PvPAttackRateFact2) / this->m_Data[Class].PvPAttackRateDiv);
; 722  : 	//}
; 723  : 	//else if( Class == CLASS_FIGHTER )
; 724  : 	//{
; 725  : 	//	AttackRate = (float)(Level * this->m_Data[Class].PvPAttackRateFact1RF + (lpUser->Dexterity * this->m_Data[Class].PvPAttackRateFact2) / this->m_Data[Class].PvPAttackRateDiv);
; 726  : 	//}
; 727  : 
; 728  : 	if ( lpObj->Class == CLASS_KNIGHT )

  01557	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0155a	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01561	83 f9 01	 cmp	 ecx, 1
  01564	75 32		 jne	 SHORT $LN44@MissCheckP

; 729  : 	{
; 730  : 		iAttackRate = (float)(iBaseLevel * ExConfig.Character.DKPvPAttackRateFact1 + ( lpObj->Dexterity * ExConfig.Character.DKPvPAttackRateFact2) / ExConfig.Character.DKPvPAttackRateDiv);	// #formula

  01566	8b 4d ec	 mov	 ecx, DWORD PTR _iBaseLevel$[ebp]
  01569	0f af 0d 94 02
	00 00		 imul	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+660
  01570	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01573	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  0157a	0f af 05 98 02
	00 00		 imul	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+664
  01581	99		 cdq
  01582	f7 3d 9c 02 00
	00		 idiv	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+668
  01588	03 c8		 add	 ecx, eax
  0158a	89 4d 94	 mov	 DWORD PTR tv482[ebp], ecx
  0158d	db 45 94	 fild	 DWORD PTR tv482[ebp]
  01590	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]
  01593	e9 6c 01 00 00	 jmp	 $LN32@MissCheckP
$LN44@MissCheckP:

; 731  : 	}
; 732  : 	else if ( lpObj->Class == CLASS_DARKLORD )

  01598	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0159b	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  015a2	83 f9 04	 cmp	 ecx, 4
  015a5	75 2b		 jne	 SHORT $LN42@MissCheckP

; 733  : 	{
; 734  : 		iAttackRate = (float)(iBaseLevel * ExConfig.Character.DLPvPAttackRateFact1 + ( lpObj->Dexterity * ExConfig.Character.DLPvPAttackRateFact2 ));	// #formula

  015a7	8b 45 ec	 mov	 eax, DWORD PTR _iBaseLevel$[ebp]
  015aa	0f af 05 c0 02
	00 00		 imul	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+704
  015b1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  015b4	0f b7 91 f6 00
	00 00		 movzx	 edx, WORD PTR [ecx+246]
  015bb	0f af 15 c4 02
	00 00		 imul	 edx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+708
  015c2	03 c2		 add	 eax, edx
  015c4	89 45 94	 mov	 DWORD PTR tv486[ebp], eax
  015c7	db 45 94	 fild	 DWORD PTR tv486[ebp]
  015ca	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]
  015cd	e9 32 01 00 00	 jmp	 $LN32@MissCheckP
$LN42@MissCheckP:

; 735  : 	}
; 736  : 	else if ( lpObj->Class == CLASS_ELF )

  015d2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015d5	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  015dc	83 f9 02	 cmp	 ecx, 2
  015df	75 32		 jne	 SHORT $LN40@MissCheckP

; 737  : 	{
; 738  : 		iAttackRate = (float)(iBaseLevel * ExConfig.Character.EEPvPAttackRateFact1 + ( lpObj->Dexterity * ExConfig.Character.EEPvPAttackRateFact2 ) / ExConfig.Character.EEPvPAttackRateDiv);	// #formula

  015e1	8b 4d ec	 mov	 ecx, DWORD PTR _iBaseLevel$[ebp]
  015e4	0f af 0d a8 02
	00 00		 imul	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+680
  015eb	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  015ee	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  015f5	0f af 05 ac 02
	00 00		 imul	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+684
  015fc	99		 cdq
  015fd	f7 3d b0 02 00
	00		 idiv	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+688
  01603	03 c8		 add	 ecx, eax
  01605	89 4d 94	 mov	 DWORD PTR tv494[ebp], ecx
  01608	db 45 94	 fild	 DWORD PTR tv494[ebp]
  0160b	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]
  0160e	e9 f1 00 00 00	 jmp	 $LN32@MissCheckP
$LN40@MissCheckP:

; 739  : 	}
; 740  : 	else if ( lpObj->Class == CLASS_MAGUMSA )

  01613	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01616	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0161d	83 f9 03	 cmp	 ecx, 3
  01620	75 32		 jne	 SHORT $LN38@MissCheckP

; 741  : 	{
; 742  : 		iAttackRate = (float)(iBaseLevel * ExConfig.Character.MGPvPAttackRateFact1 + ( lpObj->Dexterity * ExConfig.Character.MGPvPAttackRateFact2 ) / ExConfig.Character.MGPvPAttackRateDiv);	// #formula

  01622	8b 4d ec	 mov	 ecx, DWORD PTR _iBaseLevel$[ebp]
  01625	0f af 0d b4 02
	00 00		 imul	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+692
  0162c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0162f	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  01636	0f af 05 b8 02
	00 00		 imul	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+696
  0163d	99		 cdq
  0163e	f7 3d bc 02 00
	00		 idiv	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+700
  01644	03 c8		 add	 ecx, eax
  01646	89 4d 94	 mov	 DWORD PTR tv502[ebp], ecx
  01649	db 45 94	 fild	 DWORD PTR tv502[ebp]
  0164c	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]
  0164f	e9 b0 00 00 00	 jmp	 $LN32@MissCheckP
$LN38@MissCheckP:

; 743  : 	}
; 744  : 	else if ( lpObj->Class == CLASS_WIZARD )

  01654	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01657	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0165e	85 c9		 test	 ecx, ecx
  01660	75 28		 jne	 SHORT $LN36@MissCheckP

; 745  : 	{
; 746  : 		iAttackRate = (float)(iBaseLevel * ExConfig.Character.DWPvPAttackRateFact1 + ( lpObj->Dexterity * ExConfig.Character.DWPvPAttackRateFact2 ));	// #formula

  01662	8b 45 ec	 mov	 eax, DWORD PTR _iBaseLevel$[ebp]
  01665	0f af 05 a0 02
	00 00		 imul	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+672
  0166c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0166f	0f b7 91 f6 00
	00 00		 movzx	 edx, WORD PTR [ecx+246]
  01676	0f af 15 a4 02
	00 00		 imul	 edx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+676
  0167d	03 c2		 add	 eax, edx
  0167f	89 45 94	 mov	 DWORD PTR tv506[ebp], eax
  01682	db 45 94	 fild	 DWORD PTR tv506[ebp]
  01685	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]
  01688	eb 7a		 jmp	 SHORT $LN32@MissCheckP
$LN36@MissCheckP:

; 747  : 	}
; 748  : 	else if ( lpObj->Class == CLASS_SUMMONER )

  0168a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0168d	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01694	83 f9 05	 cmp	 ecx, 5
  01697	75 2f		 jne	 SHORT $LN34@MissCheckP

; 749  : 	{
; 750  : 		iAttackRate = (float)(iBaseLevel * ExConfig.Character.SUPvPAttackRateFact1 + ( lpObj->Dexterity * ExConfig.Character.SUPvPAttackRateFact2 ) / ExConfig.Character.SUPvPAttackRateDiv);	// #formula

  01699	8b 4d ec	 mov	 ecx, DWORD PTR _iBaseLevel$[ebp]
  0169c	0f af 0d c8 02
	00 00		 imul	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+712
  016a3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  016a6	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  016ad	0f af 05 cc 02
	00 00		 imul	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+716
  016b4	99		 cdq
  016b5	f7 3d d0 02 00
	00		 idiv	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+720
  016bb	03 c8		 add	 ecx, eax
  016bd	89 4d 94	 mov	 DWORD PTR tv514[ebp], ecx
  016c0	db 45 94	 fild	 DWORD PTR tv514[ebp]
  016c3	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]
  016c6	eb 3c		 jmp	 SHORT $LN32@MissCheckP
$LN34@MissCheckP:

; 751  : 	}
; 752  : 	else if( lpObj->Class == CLASS_MONK )

  016c8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  016cb	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  016d2	83 f9 06	 cmp	 ecx, 6
  016d5	75 2d		 jne	 SHORT $LN32@MissCheckP

; 753  : 	{
; 754  : 		iAttackRate = (float)(iBaseLevel * ExConfig.Character.RFPvPAttackRateFact1 + ( lpObj->Dexterity * ExConfig.Character.RFPvPAttackRateFact2 ) / ExConfig.Character.RFPvPAttackRateDiv);

  016d7	8b 4d ec	 mov	 ecx, DWORD PTR _iBaseLevel$[ebp]
  016da	0f af 0d d4 02
	00 00		 imul	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+724
  016e1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  016e4	0f b7 82 f6 00
	00 00		 movzx	 eax, WORD PTR [edx+246]
  016eb	0f af 05 d8 02
	00 00		 imul	 eax, DWORD PTR ?ExConfig@@3VcExConfigs@@A+728
  016f2	99		 cdq
  016f3	f7 3d dc 02 00
	00		 idiv	 DWORD PTR ?ExConfig@@3VcExConfigs@@A+732
  016f9	03 c8		 add	 ecx, eax
  016fb	89 4d 94	 mov	 DWORD PTR tv522[ebp], ecx
  016fe	db 45 94	 fild	 DWORD PTR tv522[ebp]
  01701	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]
$LN32@MissCheckP:

; 755  : 	}
; 756  : 
; 757  : 	//if ( lpObj->Class == CLASS_KNIGHT )
; 758  : 	//{
; 759  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 45) / 10);	// #formula
; 760  : 	//}
; 761  : 	//else if ( lpObj->Class == CLASS_DARKLORD )
; 762  : 	//{
; 763  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 4 ));	// #formula
; 764  : 	//}
; 765  : 	//else if ( lpObj->Class == CLASS_ELF )
; 766  : 	//{
; 767  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 6 ) / 10);	// #formula
; 768  : 	//}
; 769  : 	//else if ( lpObj->Class == CLASS_MAGUMSA )
; 770  : 	//{
; 771  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 35 ) / 10);	// #formula
; 772  : 	//}
; 773  : 	//else if ( lpObj->Class == CLASS_WIZARD )
; 774  : 	//{
; 775  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 4 ));	// #formula
; 776  : 	//}
; 777  : 	//else if ( lpObj->Class == CLASS_SUMMONER )
; 778  : 	//{
; 779  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 35 ) / 10);	// #formula
; 780  : 	//}
; 781  : 	//else if( lpObj->Class == CLASS_MONK )
; 782  : 	//{
; 783  : 	//	iAttackRate = (float)(iBaseLevel * 2.6f + ( lpObj->Dexterity * 36 ) / 10);
; 784  : 	//}
; 785  : 
; 786  : 
; 787  : 
; 788  : 	int iTargetBaseLevel = lpTargetObj->Level + lpTargetObj->MLevel;

  01704	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01707	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0170e	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  01711	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  01718	03 c8		 add	 ecx, eax
  0171a	89 4d e8	 mov	 DWORD PTR _iTargetBaseLevel$[ebp], ecx

; 789  : 
; 790  : 	if ( lpTargetObj->Class == CLASS_KNIGHT )

  0171d	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01720	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01727	83 f9 01	 cmp	 ecx, 1
  0172a	75 23		 jne	 SHORT $LN31@MissCheckP

; 791  : 	{
; 792  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 2);	// #formula

  0172c	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0172f	0f b7 80 f6 00
	00 00		 movzx	 eax, WORD PTR [eax+246]
  01736	99		 cdq
  01737	2b c2		 sub	 eax, edx
  01739	d1 f8		 sar	 eax, 1
  0173b	8b 4d e8	 mov	 ecx, DWORD PTR _iTargetBaseLevel$[ebp]
  0173e	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  01741	89 55 94	 mov	 DWORD PTR tv533[ebp], edx
  01744	db 45 94	 fild	 DWORD PTR tv533[ebp]
  01747	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]
  0174a	e9 31 01 00 00	 jmp	 $LN19@MissCheckP
$LN31@MissCheckP:

; 793  : 	}
; 794  : 	else if ( lpTargetObj->Class == CLASS_DARKLORD )

  0174f	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01752	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01759	83 f9 04	 cmp	 ecx, 4
  0175c	75 23		 jne	 SHORT $LN29@MissCheckP

; 795  : 	{
; 796  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 2);	// #formula

  0175e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01761	0f b7 80 f6 00
	00 00		 movzx	 eax, WORD PTR [eax+246]
  01768	99		 cdq
  01769	2b c2		 sub	 eax, edx
  0176b	d1 f8		 sar	 eax, 1
  0176d	8b 4d e8	 mov	 ecx, DWORD PTR _iTargetBaseLevel$[ebp]
  01770	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  01773	89 55 94	 mov	 DWORD PTR tv542[ebp], edx
  01776	db 45 94	 fild	 DWORD PTR tv542[ebp]
  01779	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]
  0177c	e9 ff 00 00 00	 jmp	 $LN19@MissCheckP
$LN29@MissCheckP:

; 797  : 	}
; 798  : 	else if ( lpTargetObj->Class == CLASS_ELF )

  01781	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01784	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0178b	83 f9 02	 cmp	 ecx, 2
  0178e	75 26		 jne	 SHORT $LN27@MissCheckP

; 799  : 	{
; 800  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 10);	// #formula

  01790	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01793	0f b7 80 f6 00
	00 00		 movzx	 eax, WORD PTR [eax+246]
  0179a	99		 cdq
  0179b	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  017a0	f7 f9		 idiv	 ecx
  017a2	8b 55 e8	 mov	 edx, DWORD PTR _iTargetBaseLevel$[ebp]
  017a5	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  017a8	89 45 94	 mov	 DWORD PTR tv551[ebp], eax
  017ab	db 45 94	 fild	 DWORD PTR tv551[ebp]
  017ae	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]
  017b1	e9 ca 00 00 00	 jmp	 $LN19@MissCheckP
$LN27@MissCheckP:

; 801  : 	}
; 802  : 	else if ( lpTargetObj->Class == CLASS_MAGUMSA )

  017b6	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  017b9	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  017c0	83 f9 03	 cmp	 ecx, 3
  017c3	75 27		 jne	 SHORT $LN25@MissCheckP

; 803  : 	{
; 804  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 4);	// #formula

  017c5	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  017c8	0f b7 80 f6 00
	00 00		 movzx	 eax, WORD PTR [eax+246]
  017cf	99		 cdq
  017d0	83 e2 03	 and	 edx, 3
  017d3	03 c2		 add	 eax, edx
  017d5	c1 f8 02	 sar	 eax, 2
  017d8	8b 4d e8	 mov	 ecx, DWORD PTR _iTargetBaseLevel$[ebp]
  017db	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  017de	89 55 94	 mov	 DWORD PTR tv561[ebp], edx
  017e1	db 45 94	 fild	 DWORD PTR tv561[ebp]
  017e4	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]
  017e7	e9 94 00 00 00	 jmp	 $LN19@MissCheckP
$LN25@MissCheckP:

; 805  : 	}
; 806  : 	else if ( lpTargetObj->Class == CLASS_WIZARD )

  017ec	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  017ef	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  017f6	85 c9		 test	 ecx, ecx
  017f8	75 24		 jne	 SHORT $LN23@MissCheckP

; 807  : 	{
; 808  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 4);	// #formula

  017fa	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  017fd	0f b7 80 f6 00
	00 00		 movzx	 eax, WORD PTR [eax+246]
  01804	99		 cdq
  01805	83 e2 03	 and	 edx, 3
  01808	03 c2		 add	 eax, edx
  0180a	c1 f8 02	 sar	 eax, 2
  0180d	8b 4d e8	 mov	 ecx, DWORD PTR _iTargetBaseLevel$[ebp]
  01810	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  01813	89 55 94	 mov	 DWORD PTR tv571[ebp], edx
  01816	db 45 94	 fild	 DWORD PTR tv571[ebp]
  01819	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]
  0181c	eb 62		 jmp	 SHORT $LN19@MissCheckP
$LN23@MissCheckP:

; 809  : 	}
; 810  : 	else if ( lpTargetObj->Class == CLASS_SUMMONER )

  0181e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01821	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01828	83 f9 05	 cmp	 ecx, 5
  0182b	75 20		 jne	 SHORT $LN21@MissCheckP

; 811  : 	{
; 812  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 2);	// #formula

  0182d	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01830	0f b7 80 f6 00
	00 00		 movzx	 eax, WORD PTR [eax+246]
  01837	99		 cdq
  01838	2b c2		 sub	 eax, edx
  0183a	d1 f8		 sar	 eax, 1
  0183c	8b 4d e8	 mov	 ecx, DWORD PTR _iTargetBaseLevel$[ebp]
  0183f	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  01842	89 55 94	 mov	 DWORD PTR tv580[ebp], edx
  01845	db 45 94	 fild	 DWORD PTR tv580[ebp]
  01848	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]
  0184b	eb 33		 jmp	 SHORT $LN19@MissCheckP
$LN21@MissCheckP:

; 813  : 	}
; 814  : 	else if( lpTargetObj->Class == CLASS_MONK )

  0184d	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01850	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01857	83 f9 06	 cmp	 ecx, 6
  0185a	75 24		 jne	 SHORT $LN19@MissCheckP

; 815  : 	{
; 816  : 		iDefenseRate = (iTargetBaseLevel * 1.5f) + lpTargetObj->Dexterity / 5;

  0185c	db 45 e8	 fild	 DWORD PTR _iTargetBaseLevel$[ebp]
  0185f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ff8000000000000
  01865	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01868	0f b7 80 f6 00
	00 00		 movzx	 eax, WORD PTR [eax+246]
  0186f	99		 cdq
  01870	b9 05 00 00 00	 mov	 ecx, 5
  01875	f7 f9		 idiv	 ecx
  01877	89 45 94	 mov	 DWORD PTR tv590[ebp], eax
  0187a	da 45 94	 fiadd	 DWORD PTR tv590[ebp]
  0187d	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]
$LN19@MissCheckP:

; 817  : 	}
; 818  : 	if ( iAttackRate <= 0.0f || iDefenseRate <= 0.0f || lpObj->Level <= 0 || lpTargetObj->Level <= 0 )

  01880	d9 45 f8	 fld	 DWORD PTR _iAttackRate$[ebp]
  01883	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  01889	df e0		 fnstsw	 ax
  0188b	f6 c4 41	 test	 ah, 65			; 00000041H
  0188e	7b 2c		 jnp	 SHORT $LN17@MissCheckP
  01890	d9 45 f4	 fld	 DWORD PTR _iDefenseRate$[ebp]
  01893	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  01899	df e0		 fnstsw	 ax
  0189b	f6 c4 41	 test	 ah, 65			; 00000041H
  0189e	7b 1c		 jnp	 SHORT $LN17@MissCheckP
  018a0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  018a3	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  018aa	85 c9		 test	 ecx, ecx
  018ac	7e 0e		 jle	 SHORT $LN17@MissCheckP
  018ae	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  018b1	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  018b8	85 c9		 test	 ecx, ecx
  018ba	7f 07		 jg	 SHORT $LN18@MissCheckP
$LN17@MissCheckP:

; 819  : 	{
; 820  : 		return FALSE;

  018bc	33 c0		 xor	 eax, eax
  018be	e9 1d 02 00 00	 jmp	 $LN50@MissCheckP
$LN18@MissCheckP:

; 821  : 	}
; 822  : 
; 823  : 	iAttackRate += lpObj->m_ItemOptionExFor380.OpAddAttackSuccessRatePVP;

  018c3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  018c6	0f bf 88 fe 1f
	00 00		 movsx	 ecx, WORD PTR [eax+8190]
  018cd	89 4d 94	 mov	 DWORD PTR tv603[ebp], ecx
  018d0	db 45 94	 fild	 DWORD PTR tv603[ebp]
  018d3	d8 45 f8	 fadd	 DWORD PTR _iAttackRate$[ebp]
  018d6	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]

; 824  : 	iDefenseRate += lpTargetObj->m_ItemOptionExFor380.OpAddDefenseSuccessRatePvP;

  018d9	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  018dc	0f bf 88 02 20
	00 00		 movsx	 ecx, WORD PTR [eax+8194]
  018e3	89 4d 94	 mov	 DWORD PTR tv607[ebp], ecx
  018e6	db 45 94	 fild	 DWORD PTR tv607[ebp]
  018e9	d8 45 f4	 fadd	 DWORD PTR _iDefenseRate$[ebp]
  018ec	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]

; 825  : 
; 826  : 	iAttackRate += lpObj->m_JewelOfHarmonyEffect.HJOpAddAttackSuccessRatePVP;

  018ef	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  018f2	0f bf 88 e6 1f
	00 00		 movsx	 ecx, WORD PTR [eax+8166]
  018f9	89 4d 94	 mov	 DWORD PTR tv611[ebp], ecx
  018fc	db 45 94	 fild	 DWORD PTR tv611[ebp]
  018ff	d8 45 f8	 fadd	 DWORD PTR _iAttackRate$[ebp]
  01902	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]

; 827  : 	iDefenseRate += lpTargetObj->m_JewelOfHarmonyEffect.HJOpAddDefenseSuccessRatePvP;

  01905	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01908	0f bf 88 f8 1f
	00 00		 movsx	 ecx, WORD PTR [eax+8184]
  0190f	89 4d 94	 mov	 DWORD PTR tv615[ebp], ecx
  01912	db 45 94	 fild	 DWORD PTR tv615[ebp]
  01915	d8 45 f4	 fadd	 DWORD PTR _iDefenseRate$[ebp]
  01918	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]

; 828  : 
; 829  : 	iAttackRate		+= lpObj->m_MPSkillOpt.MpsPVPAttackDmgRate;

  0191b	d9 45 f8	 fld	 DWORD PTR _iAttackRate$[ebp]
  0191e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01921	d8 80 3c 26 00
	00		 fadd	 DWORD PTR [eax+9788]
  01927	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]

; 830  : 	iDefenseRate	+= lpTargetObj->m_MPSkillOpt.MpsPVPBlockingRate;

  0192a	d9 45 f4	 fld	 DWORD PTR _iDefenseRate$[ebp]
  0192d	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01930	d8 80 40 26 00
	00		 fadd	 DWORD PTR [eax+9792]
  01936	d9 5d f4	 fstp	 DWORD PTR _iDefenseRate$[ebp]

; 831  : 
; 832  : 	if(g_ExLicense.user.Rage)
; 833  : 	{
; 834  : 		//LogAddC(2,"lpObj->m_Index: %d",lpObj->m_Index);
; 835  : 		//gSystemOfRage.AttackDefenceRate(lpObj->m_Index,lpTargetObj->m_Index, iAttackRate, iDefenseRate);
; 836  : 	}
; 837  : 
; 838  : 
; 839  : 	float iExpressionA = ( iAttackRate * 10000.0f ) / ( iAttackRate + iDefenseRate );

  01939	d9 45 f8	 fld	 DWORD PTR _iAttackRate$[ebp]
  0193c	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@40c3880000000000
  01942	d9 45 f8	 fld	 DWORD PTR _iAttackRate$[ebp]
  01945	d8 45 f4	 fadd	 DWORD PTR _iDefenseRate$[ebp]
  01948	de f9		 fdivp	 ST(1), ST(0)
  0194a	d9 5d e4	 fstp	 DWORD PTR _iExpressionA$[ebp]

; 840  : 	float iExpressionB = (float)(( iBaseLevel * 10000 ) / ( iBaseLevel + iTargetBaseLevel ));

  0194d	8b 45 ec	 mov	 eax, DWORD PTR _iBaseLevel$[ebp]
  01950	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H
  01956	8b 4d ec	 mov	 ecx, DWORD PTR _iBaseLevel$[ebp]
  01959	03 4d e8	 add	 ecx, DWORD PTR _iTargetBaseLevel$[ebp]
  0195c	99		 cdq
  0195d	f7 f9		 idiv	 ecx
  0195f	89 45 94	 mov	 DWORD PTR tv631[ebp], eax
  01962	db 45 94	 fild	 DWORD PTR tv631[ebp]
  01965	d9 5d e0	 fstp	 DWORD PTR _iExpressionB$[ebp]

; 841  : 
; 842  : 	iExpressionA /= 10000.0f;

  01968	d9 45 e4	 fld	 DWORD PTR _iExpressionA$[ebp]
  0196b	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@40c3880000000000
  01971	d9 5d e4	 fstp	 DWORD PTR _iExpressionA$[ebp]

; 843  : 	iExpressionB /= 10000.0f;

  01974	d9 45 e0	 fld	 DWORD PTR _iExpressionB$[ebp]
  01977	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@40c3880000000000
  0197d	d9 5d e0	 fstp	 DWORD PTR _iExpressionB$[ebp]

; 844  : 
; 845  : 	iAttackSuccessRate = (int)(100.0f * iExpressionA * g_fSuccessAttackRateOption * iExpressionB);

  01980	d9 45 e4	 fld	 DWORD PTR _iExpressionA$[ebp]
  01983	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  01989	d8 0d 00 00 00
	00		 fmul	 DWORD PTR ?g_fSuccessAttackRateOption@@3MA ; g_fSuccessAttackRateOption
  0198f	d8 4d e0	 fmul	 DWORD PTR _iExpressionB$[ebp]
  01992	e8 00 00 00 00	 call	 __ftol2_sse
  01997	89 45 f0	 mov	 DWORD PTR _iAttackSuccessRate$[ebp], eax

; 846  : 
; 847  : 	if ( (iTargetBaseLevel - iBaseLevel) >= 100 )

  0199a	8b 45 e8	 mov	 eax, DWORD PTR _iTargetBaseLevel$[ebp]
  0199d	2b 45 ec	 sub	 eax, DWORD PTR _iBaseLevel$[ebp]
  019a0	83 f8 64	 cmp	 eax, 100		; 00000064H
  019a3	7c 0b		 jl	 SHORT $LN15@MissCheckP

; 848  : 	{
; 849  : 		iAttackSuccessRate -= 5;

  019a5	8b 45 f0	 mov	 eax, DWORD PTR _iAttackSuccessRate$[ebp]
  019a8	83 e8 05	 sub	 eax, 5
  019ab	89 45 f0	 mov	 DWORD PTR _iAttackSuccessRate$[ebp], eax
  019ae	eb 2e		 jmp	 SHORT $LN11@MissCheckP
$LN15@MissCheckP:

; 850  : 	}
; 851  : 	else if ( (iTargetBaseLevel - iBaseLevel) >= 200 )

  019b0	8b 45 e8	 mov	 eax, DWORD PTR _iTargetBaseLevel$[ebp]
  019b3	2b 45 ec	 sub	 eax, DWORD PTR _iBaseLevel$[ebp]
  019b6	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  019bb	7c 0b		 jl	 SHORT $LN13@MissCheckP

; 852  : 	{
; 853  : 		iAttackSuccessRate -= 10;

  019bd	8b 45 f0	 mov	 eax, DWORD PTR _iAttackSuccessRate$[ebp]
  019c0	83 e8 0a	 sub	 eax, 10			; 0000000aH
  019c3	89 45 f0	 mov	 DWORD PTR _iAttackSuccessRate$[ebp], eax
  019c6	eb 16		 jmp	 SHORT $LN11@MissCheckP
$LN13@MissCheckP:

; 854  : 	}
; 855  : 	else if ( (iTargetBaseLevel - iBaseLevel) >= 300 )

  019c8	8b 45 e8	 mov	 eax, DWORD PTR _iTargetBaseLevel$[ebp]
  019cb	2b 45 ec	 sub	 eax, DWORD PTR _iBaseLevel$[ebp]
  019ce	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  019d3	7c 09		 jl	 SHORT $LN11@MissCheckP

; 856  : 	{
; 857  : 		iAttackSuccessRate -= 15;

  019d5	8b 45 f0	 mov	 eax, DWORD PTR _iAttackSuccessRate$[ebp]
  019d8	83 e8 0f	 sub	 eax, 15			; 0000000fH
  019db	89 45 f0	 mov	 DWORD PTR _iAttackSuccessRate$[ebp], eax
$LN11@MissCheckP:

; 858  : 	}
; 859  : 
; 860  : 	DWORD dwRate = rand() % 100;

  019de	e8 00 00 00 00	 call	 _rand
  019e3	99		 cdq
  019e4	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  019e9	f7 f9		 idiv	 ecx
  019eb	89 55 dc	 mov	 DWORD PTR _dwRate$[ebp], edx

; 861  : 
; 862  : 	if ( dwRate > iAttackSuccessRate )

  019ee	8b 45 dc	 mov	 eax, DWORD PTR _dwRate$[ebp]
  019f1	3b 45 f0	 cmp	 eax, DWORD PTR _iAttackSuccessRate$[ebp]
  019f4	0f 86 e1 00 00
	00		 jbe	 $LN10@MissCheckP

; 863  : 	{
; 864  : 		int MsgDamage = 0;	//1.01.00 update

  019fa	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _MsgDamage$236495[ebp], 0

; 865  : 		// ----
; 866  : 		if( lpObj->Class == CLASS_MONK && byBarrageCount )

  01a01	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a04	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  01a0b	83 f9 06	 cmp	 ecx, 6
  01a0e	75 6c		 jne	 SHORT $LN3@MissCheckP
  01a10	0f b6 45 20	 movzx	 eax, BYTE PTR _byBarrageCount$[ebp]
  01a14	85 c0		 test	 eax, eax
  01a16	74 64		 je	 SHORT $LN3@MissCheckP

; 867  : 		{
; 868  : 			if( skill != 261 && skill != 263 )

  01a18	81 7d 10 05 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 261 ; 00000105H
  01a1f	74 33		 je	 SHORT $LN8@MissCheckP
  01a21	81 7d 10 07 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 263 ; 00000107H
  01a28	74 2a		 je	 SHORT $LN8@MissCheckP

; 869  : 			{
; 870  : 				if( byBarrageCount % 4 )

  01a2a	0f b6 45 20	 movzx	 eax, BYTE PTR _byBarrageCount$[ebp]
  01a2e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  01a33	79 05		 jns	 SHORT $LN54@MissCheckP
  01a35	48		 dec	 eax
  01a36	83 c8 fc	 or	 eax, -4			; fffffffcH
  01a39	40		 inc	 eax
$LN54@MissCheckP:
  01a3a	85 c0		 test	 eax, eax
  01a3c	74 0b		 je	 SHORT $LN7@MissCheckP

; 871  : 				{
; 872  : 					MsgDamage |= 0x10;

  01a3e	8b 45 d8	 mov	 eax, DWORD PTR _MsgDamage$236495[ebp]
  01a41	83 c8 10	 or	 eax, 16			; 00000010H
  01a44	89 45 d8	 mov	 DWORD PTR _MsgDamage$236495[ebp], eax

; 873  : 				}
; 874  : 				else

  01a47	eb 09		 jmp	 SHORT $LN6@MissCheckP
$LN7@MissCheckP:

; 875  : 				{
; 876  : 					MsgDamage |= 0x20;

  01a49	8b 45 d8	 mov	 eax, DWORD PTR _MsgDamage$236495[ebp]
  01a4c	83 c8 20	 or	 eax, 32			; 00000020H
  01a4f	89 45 d8	 mov	 DWORD PTR _MsgDamage$236495[ebp], eax
$LN6@MissCheckP:

; 877  : 				}
; 878  : 			}
; 879  : 			else

  01a52	eb 28		 jmp	 SHORT $LN3@MissCheckP
$LN8@MissCheckP:

; 880  : 			{
; 881  : 				if( byBarrageCount % 2 )

  01a54	0f b6 45 20	 movzx	 eax, BYTE PTR _byBarrageCount$[ebp]
  01a58	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  01a5d	79 05		 jns	 SHORT $LN55@MissCheckP
  01a5f	48		 dec	 eax
  01a60	83 c8 fe	 or	 eax, -2			; fffffffeH
  01a63	40		 inc	 eax
$LN55@MissCheckP:
  01a64	85 c0		 test	 eax, eax
  01a66	74 0b		 je	 SHORT $LN4@MissCheckP

; 882  : 				{
; 883  : 					MsgDamage |= 0x10;

  01a68	8b 45 d8	 mov	 eax, DWORD PTR _MsgDamage$236495[ebp]
  01a6b	83 c8 10	 or	 eax, 16			; 00000010H
  01a6e	89 45 d8	 mov	 DWORD PTR _MsgDamage$236495[ebp], eax

; 884  : 				}
; 885  : 				else

  01a71	eb 09		 jmp	 SHORT $LN3@MissCheckP
$LN4@MissCheckP:

; 886  : 				{
; 887  : 					MsgDamage |= 0x20;

  01a73	8b 45 d8	 mov	 eax, DWORD PTR _MsgDamage$236495[ebp]
  01a76	83 c8 20	 or	 eax, 32			; 00000020H
  01a79	89 45 d8	 mov	 DWORD PTR _MsgDamage$236495[ebp], eax
$LN3@MissCheckP:

; 888  : 				}
; 889  : 			}
; 890  : 		}
; 891  : 
; 892  : 		GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  01a7c	6a 00		 push	 0
  01a7e	6a 00		 push	 0
  01a80	6a 00		 push	 0
  01a82	6a 00		 push	 0
  01a84	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01a87	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a89	51		 push	 ecx
  01a8a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01a8d	8b 02		 mov	 eax, DWORD PTR [edx]
  01a8f	50		 push	 eax
  01a90	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  01a95	83 c4 18	 add	 esp, 24			; 00000018H

; 893  : 
; 894  : 		if ( g_bShieldComboMissOptionOn == TRUE )

  01a98	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_bShieldComboMissOptionOn@@3HA, 1 ; g_bShieldComboMissOptionOn
  01a9f	75 36		 jne	 SHORT $LN1@MissCheckP

; 895  : 		{
; 896  : 			if ( lpObj->comboSkill.ProgressIndex >= 0 )

  01aa1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01aa4	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  01aab	7c 2a		 jl	 SHORT $LN1@MissCheckP

; 897  : 			{
; 898  : 				LogAddTD("[Shield] ComboSkill Cancel! [%s][%s]", lpObj->AccountID, lpObj->Name);

  01aad	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ab0	83 c0 77	 add	 eax, 119		; 00000077H
  01ab3	50		 push	 eax
  01ab4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01ab7	83 c1 6c	 add	 ecx, 108		; 0000006cH
  01aba	51		 push	 ecx
  01abb	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@
  01ac0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01ac6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 899  : 				lpObj->comboSkill.Init();

  01ac9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01acc	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  01ad2	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init
$LN1@MissCheckP:

; 900  : 			}
; 901  : 		}
; 902  : 
; 903  : 		return FALSE;

  01ad7	33 c0		 xor	 eax, eax
  01ad9	eb 05		 jmp	 SHORT $LN50@MissCheckP
$LN10@MissCheckP:

; 904  : 	}
; 905  : 
; 906  : 	return TRUE;

  01adb	b8 01 00 00 00	 mov	 eax, 1
$LN50@MissCheckP:

; 907  : }

  01ae0	5f		 pop	 edi
  01ae1	5e		 pop	 esi
  01ae2	5b		 pop	 ebx
  01ae3	8b e5		 mov	 esp, ebp
  01ae5	5d		 pop	 ebp
  01ae6	c2 1c 00	 ret	 28			; 0000001cH
?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ENDP ; CObjBaseAttack::MissCheckPvP
_TEXT	ENDS
PUBLIC	?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ; CObjBaseAttack::GetTargetDefense
EXTRN	?IsThirdWingOpGetOnePercentDamage@CItem@@QAEHXZ:PROC ; CItem::IsThirdWingOpGetOnePercentDamage
EXTRN	?IsWingOpGetOnePercentDamage@CItem@@QAEHXZ:PROC	; CItem::IsWingOpGetOnePercentDamage
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetActiveEffect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_percentdamage$ = -16					; size = 4
_iSkillMagumReduceDefense$ = -12			; size = 4
_targetdefense$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_MsgDamage$ = 16					; size = 4
?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z PROC ; CObjBaseAttack::GetTargetDefense
; _this$ = ecx

; 910  : {

  01af0	55		 push	 ebp
  01af1	8b ec		 mov	 ebp, esp
  01af3	83 ec 50	 sub	 esp, 80			; 00000050H
  01af6	53		 push	 ebx
  01af7	56		 push	 esi
  01af8	57		 push	 edi
  01af9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 911  : 	int targetdefense = lpTargetObj->m_Defense;

  01afc	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01aff	8b 88 94 04 00
	00		 mov	 ecx, DWORD PTR [eax+1172]
  01b05	89 4d f8	 mov	 DWORD PTR _targetdefense$[ebp], ecx

; 912  : 
; 913  : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  01b08	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b0b	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01b0f	83 f9 01	 cmp	 ecx, 1
  01b12	75 21		 jne	 SHORT $LN6@GetTargetD
  01b14	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01b17	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  01b1b	83 f9 01	 cmp	 ecx, 1
  01b1e	75 15		 jne	 SHORT $LN6@GetTargetD

; 914  : 	{
; 915  : 		targetdefense += lpTargetObj->m_ItemOptionExFor380.OpAddDefense / 2;

  01b20	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01b23	0f bf 80 04 20
	00 00		 movsx	 eax, WORD PTR [eax+8196]
  01b2a	99		 cdq
  01b2b	2b c2		 sub	 eax, edx
  01b2d	d1 f8		 sar	 eax, 1
  01b2f	03 45 f8	 add	 eax, DWORD PTR _targetdefense$[ebp]
  01b32	89 45 f8	 mov	 DWORD PTR _targetdefense$[ebp], eax
$LN6@GetTargetD:

; 916  : 	}
; 917  : 
; 918  : 	int iSkillMagumReduceDefense = 0;

  01b35	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iSkillMagumReduceDefense$[ebp], 0

; 919  : 	iSkillMagumReduceDefense = gObjGetActiveEffect(lpTargetObj, ADD_OPTION_REDUCE_DEFENSE);

  01b3c	6a 17		 push	 23			; 00000017H
  01b3e	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  01b41	50		 push	 eax
  01b42	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  01b47	83 c4 08	 add	 esp, 8
  01b4a	89 45 f4	 mov	 DWORD PTR _iSkillMagumReduceDefense$[ebp], eax

; 920  : 	targetdefense -= (targetdefense * iSkillMagumReduceDefense)/100;

  01b4d	8b 45 f8	 mov	 eax, DWORD PTR _targetdefense$[ebp]
  01b50	0f af 45 f4	 imul	 eax, DWORD PTR _iSkillMagumReduceDefense$[ebp]
  01b54	99		 cdq
  01b55	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01b5a	f7 f9		 idiv	 ecx
  01b5c	8b 55 f8	 mov	 edx, DWORD PTR _targetdefense$[ebp]
  01b5f	2b d0		 sub	 edx, eax
  01b61	89 55 f8	 mov	 DWORD PTR _targetdefense$[ebp], edx

; 921  : 	
; 922  : 	if ( lpObj->m_MonsterSkillElementInfo.m_iSkillElementDefenseTime > 0 )

  01b64	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b67	83 b8 24 1c 00
	00 00		 cmp	 DWORD PTR [eax+7204], 0
  01b6e	7e 18		 jle	 SHORT $LN5@GetTargetD

; 923  : 	{
; 924  : 		targetdefense += lpObj->m_MonsterSkillElementInfo.m_iSkillElementDefense;

  01b70	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b73	8b 4d f8	 mov	 ecx, DWORD PTR _targetdefense$[ebp]
  01b76	03 88 20 1c 00
	00		 add	 ecx, DWORD PTR [eax+7200]
  01b7c	89 4d f8	 mov	 DWORD PTR _targetdefense$[ebp], ecx

; 925  : 
; 926  : 		if ( targetdefense <0 )

  01b7f	79 07		 jns	 SHORT $LN5@GetTargetD

; 927  : 		{
; 928  : 			targetdefense = 0;

  01b81	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _targetdefense$[ebp], 0
$LN5@GetTargetD:

; 929  : 		}
; 930  : 	}
; 931  : 
; 932  : 	int percentdamage = 0; //loc4

  01b88	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _percentdamage$[ebp], 0

; 933  : 
; 934  : 	if ( lpObj->pInventory[7].IsItem() != FALSE )

  01b8f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b92	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  01b98	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  01b9e	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  01ba3	85 c0		 test	 eax, eax
  01ba5	74 31		 je	 SHORT $LN3@GetTargetD

; 935  : 	{
; 936  : 		percentdamage = lpObj->pInventory[7].IsWingOpGetOnePercentDamage();

  01ba7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01baa	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  01bb0	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  01bb6	e8 00 00 00 00	 call	 ?IsWingOpGetOnePercentDamage@CItem@@QAEHXZ ; CItem::IsWingOpGetOnePercentDamage
  01bbb	89 45 f0	 mov	 DWORD PTR _percentdamage$[ebp], eax

; 937  : 		percentdamage += lpObj->pInventory[7].IsThirdWingOpGetOnePercentDamage();

  01bbe	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01bc1	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  01bc7	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  01bcd	e8 00 00 00 00	 call	 ?IsThirdWingOpGetOnePercentDamage@CItem@@QAEHXZ ; CItem::IsThirdWingOpGetOnePercentDamage
  01bd2	03 45 f0	 add	 eax, DWORD PTR _percentdamage$[ebp]
  01bd5	89 45 f0	 mov	 DWORD PTR _percentdamage$[ebp], eax
$LN3@GetTargetD:

; 938  : 	}
; 939  : 
; 940  : 	percentdamage += lpObj->SetOpIgnoreDefense;

  01bd8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01bdb	0f b6 88 3e 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4414]
  01be2	03 4d f0	 add	 ecx, DWORD PTR _percentdamage$[ebp]
  01be5	89 4d f0	 mov	 DWORD PTR _percentdamage$[ebp], ecx

; 941  : 
; 942  : 	if ( percentdamage != 0)

  01be8	74 1f		 je	 SHORT $LN2@GetTargetD

; 943  : 	{
; 944  : 		if ( (rand()%100) <= percentdamage)

  01bea	e8 00 00 00 00	 call	 _rand
  01bef	99		 cdq
  01bf0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01bf5	f7 f9		 idiv	 ecx
  01bf7	3b 55 f0	 cmp	 edx, DWORD PTR _percentdamage$[ebp]
  01bfa	7f 0d		 jg	 SHORT $LN2@GetTargetD

; 945  : 		{
; 946  : 			targetdefense = 0;

  01bfc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _targetdefense$[ebp], 0

; 947  : 			MsgDamage = 1;

  01c03	8b 45 10	 mov	 eax, DWORD PTR _MsgDamage$[ebp]
  01c06	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN2@GetTargetD:

; 948  : 		}
; 949  : 	}
; 950  : 
; 951  : 	return targetdefense;

  01c09	8b 45 f8	 mov	 eax, DWORD PTR _targetdefense$[ebp]

; 952  : }

  01c0c	5f		 pop	 edi
  01c0d	5e		 pop	 esi
  01c0e	5b		 pop	 ebx
  01c0f	8b e5		 mov	 esp, ebp
  01c11	5d		 pop	 ebp
  01c12	c2 0c 00	 ret	 12			; 0000000cH
?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ENDP ; CObjBaseAttack::GetTargetDefense
_TEXT	ENDS
PUBLIC	??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@ ; `string'
PUBLIC	??_C@_0EF@CEKIFACB@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z@4JA ; `CObjBaseAttack::GetPartyMemberCount'::`2'::__LINE__Var
PUBLIC	?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::GetPartyMemberCount
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@
CONST	SEGMENT
??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@ DB 'error : De'
	DB	'cPartyMemberHPandMP %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@CEKIFACB@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0EF@CEKIFACB@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\objbaseattack.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z@4JA DD 03bbH ; `CObjBaseAttack::GetPartyMemberCount'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
tv68 = -100						; size = 4
_dis$236540 = -32					; size = 4
_memberindex$236537 = -28				; size = 4
_n$236533 = -24						; size = 4
_retcount$ = -20					; size = 4
_partycount$ = -16					; size = 4
_partynum$ = -12					; size = 4
_lpPartyObj$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CObjBaseAttack::GetPartyMemberCount
; _this$ = ecx

; 955  : {

  01c20	55		 push	 ebp
  01c21	8b ec		 mov	 ebp, esp
  01c23	83 ec 64	 sub	 esp, 100		; 00000064H
  01c26	53		 push	 ebx
  01c27	56		 push	 esi
  01c28	57		 push	 edi
  01c29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 956  : 	LPOBJ lpPartyObj;
; 957  : 	int partynum = lpObj->PartyNumber;

  01c2c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01c2f	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  01c35	89 4d f4	 mov	 DWORD PTR _partynum$[ebp], ecx

; 958  : 
; 959  : 	if ( OBJMAX_RANGE(partynum) == FALSE )

  01c38	83 7d f4 00	 cmp	 DWORD PTR _partynum$[ebp], 0
  01c3c	7d 09		 jge	 SHORT $LN10@GetPartyMe
  01c3e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  01c45	eb 0f		 jmp	 SHORT $LN11@GetPartyMe
$LN10@GetPartyMe:
  01c47	33 c0		 xor	 eax, eax
  01c49	81 7d f4 97 3a
	00 00		 cmp	 DWORD PTR _partynum$[ebp], 14999 ; 00003a97H
  01c50	0f 9e c0	 setle	 al
  01c53	89 45 9c	 mov	 DWORD PTR tv68[ebp], eax
$LN11@GetPartyMe:
  01c56	83 7d 9c 00	 cmp	 DWORD PTR tv68[ebp], 0
  01c5a	75 23		 jne	 SHORT $LN7@GetPartyMe

; 960  : 	{
; 961  : 		LogAdd("error : DecPartyMemberHPandMP %s %d", __FILE__, __LINE__);

  01c5c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z@4JA
  01c61	83 c0 06	 add	 eax, 6
  01c64	50		 push	 eax
  01c65	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@CEKIFACB@d?3?2projects?2exteam6?43?2source?2gam@
  01c6a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@
  01c6f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  01c75	83 c4 0c	 add	 esp, 12			; 0000000cH

; 962  : 		return 0;

  01c78	33 c0		 xor	 eax, eax
  01c7a	e9 a7 00 00 00	 jmp	 $LN8@GetPartyMe
$LN7@GetPartyMe:

; 963  : 	}
; 964  : 
; 965  : 	int partycount = gParty.m_PartyS[partynum].Count;

  01c7f	8b 45 f4	 mov	 eax, DWORD PTR _partynum$[ebp]
  01c82	6b c0 6c	 imul	 eax, 108		; 0000006cH
  01c85	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+8]
  01c8b	89 4d f0	 mov	 DWORD PTR _partycount$[ebp], ecx

; 966  : 	int retcount = 0;

  01c8e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _retcount$[ebp], 0

; 967  : 
; 968  : 	for ( int n=0;n<MAX_USER_IN_PARTY;n++)

  01c95	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _n$236533[ebp], 0
  01c9c	eb 09		 jmp	 SHORT $LN6@GetPartyMe
$LN5@GetPartyMe:
  01c9e	8b 45 e8	 mov	 eax, DWORD PTR _n$236533[ebp]
  01ca1	83 c0 01	 add	 eax, 1
  01ca4	89 45 e8	 mov	 DWORD PTR _n$236533[ebp], eax
$LN6@GetPartyMe:
  01ca7	83 7d e8 0a	 cmp	 DWORD PTR _n$236533[ebp], 10 ; 0000000aH
  01cab	7d 76		 jge	 SHORT $LN4@GetPartyMe

; 969  : 	{
; 970  : 		int memberindex = gParty.m_PartyS[partynum].Number[n];

  01cad	8b 45 f4	 mov	 eax, DWORD PTR _partynum$[ebp]
  01cb0	6b c0 6c	 imul	 eax, 108		; 0000006cH
  01cb3	8b 4d e8	 mov	 ecx, DWORD PTR _n$236533[ebp]
  01cb6	8b 94 88 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+ecx*4+12]
  01cbd	89 55 e4	 mov	 DWORD PTR _memberindex$236537[ebp], edx

; 971  : 
; 972  : 		if ( memberindex >= 0 )

  01cc0	83 7d e4 00	 cmp	 DWORD PTR _memberindex$236537[ebp], 0
  01cc4	7c 58		 jl	 SHORT $LN3@GetPartyMe

; 973  : 		{
; 974  : 			lpPartyObj = &gObj[memberindex];

  01cc6	8b 45 e4	 mov	 eax, DWORD PTR _memberindex$236537[ebp]
  01cc9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01ccf	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01cd5	89 45 f8	 mov	 DWORD PTR _lpPartyObj$[ebp], eax

; 975  : 
; 976  : 			if ( lpObj->MapNumber == lpPartyObj->MapNumber )

  01cd8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01cdb	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  01ce2	8b 55 f8	 mov	 edx, DWORD PTR _lpPartyObj$[ebp]
  01ce5	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  01cec	3b c8		 cmp	 ecx, eax
  01cee	75 2e		 jne	 SHORT $LN3@GetPartyMe

; 977  : 			{
; 978  : 				int dis = gObjCalDistance(lpObj, &gObj[memberindex]);

  01cf0	8b 45 e4	 mov	 eax, DWORD PTR _memberindex$236537[ebp]
  01cf3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01cf9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01cff	50		 push	 eax
  01d00	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01d03	51		 push	 ecx
  01d04	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  01d09	83 c4 08	 add	 esp, 8
  01d0c	89 45 e0	 mov	 DWORD PTR _dis$236540[ebp], eax

; 979  : 				
; 980  : 				if ( dis < MAX_PARTY_DISTANCE_EFFECT )

  01d0f	83 7d e0 0a	 cmp	 DWORD PTR _dis$236540[ebp], 10 ; 0000000aH
  01d13	7d 09		 jge	 SHORT $LN3@GetPartyMe

; 981  : 				{
; 982  : 					retcount++;

  01d15	8b 45 ec	 mov	 eax, DWORD PTR _retcount$[ebp]
  01d18	83 c0 01	 add	 eax, 1
  01d1b	89 45 ec	 mov	 DWORD PTR _retcount$[ebp], eax
$LN3@GetPartyMe:

; 983  : 				}
; 984  : 			}
; 985  : 		}
; 986  : 	}

  01d1e	e9 7b ff ff ff	 jmp	 $LN5@GetPartyMe
$LN4@GetPartyMe:

; 987  : 
; 988  : 	return retcount;

  01d23	8b 45 ec	 mov	 eax, DWORD PTR _retcount$[ebp]
$LN8@GetPartyMe:

; 989  : }

  01d26	5f		 pop	 edi
  01d27	5e		 pop	 esi
  01d28	5b		 pop	 ebx
  01d29	8b e5		 mov	 esp, ebp
  01d2b	5d		 pop	 ebp
  01d2c	c2 04 00	 ret	 4
?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CObjBaseAttack::GetPartyMemberCount
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?Init@ComboSkillData@@QAEXXZ PROC			; ComboSkillData::Init
; _this$ = ecx

; 996  : {

  01d30	55		 push	 ebp
  01d31	8b ec		 mov	 ebp, esp
  01d33	83 ec 44	 sub	 esp, 68			; 00000044H
  01d36	53		 push	 ebx
  01d37	56		 push	 esi
  01d38	57		 push	 edi
  01d39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 997  : 	this->dwTime = 0;

  01d3c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d3f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 998  : 	this->Skill[0] = -1;

  01d45	83 c8 ff	 or	 eax, -1
  01d48	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d4b	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 999  : 	this->Skill[1] = -1;

  01d4f	83 c8 ff	 or	 eax, -1
  01d52	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d55	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 1000 : 	this->Skill[2] = -1;

  01d59	83 c8 ff	 or	 eax, -1
  01d5c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d5f	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 1001 : 	this->ProgressIndex = -1;

  01d63	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d66	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 1002 : }

  01d6d	5f		 pop	 edi
  01d6e	5e		 pop	 esi
  01d6f	5b		 pop	 ebx
  01d70	8b e5		 mov	 esp, ebp
  01d72	5d		 pop	 ebp
  01d73	c3		 ret	 0
?Init@ComboSkillData@@QAEXXZ ENDP			; ComboSkillData::Init
_TEXT	ENDS
END
