; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ItemDropManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXABUMAP_DROPRATE_DATA@@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::push_back
PUBLIC	??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0DJ@GPAKNOIP@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ ; `string'
PUBLIC	?clear@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::clear
PUBLIC	??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@		; `string'
PUBLIC	??_C@_0CD@JKBNDCGJ@?4?4?2Data?2ExData?2ItemDropManager?4i@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadAnc@CItemDropManager@@QAEXPAD@Z		; CItemDropManager::ReadAnc
PUBLIC	??_C@_0BG@FKFNNJEE@ExData?2AncentDrop?4ini?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Init@CItemDropManager@@QAEXXZ			; CItemDropManager::Init
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\itemdropmanager.cpp
CONST	SEGMENT
??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@ DB '%d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GPAKNOIP@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
CONST	SEGMENT
??_C@_0DJ@GPAKNOIP@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ DB '%'
	DB	'd %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
CONST	SEGMENT
??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@ DB 'CRITICAL ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JKBNDCGJ@?4?4?2Data?2ExData?2ItemDropManager?4i@
CONST	SEGMENT
??_C@_0CD@JKBNDCGJ@?4?4?2Data?2ExData?2ItemDropManager?4i@ DB '..\Data\Ex'
	DB	'Data\ItemDropManager.ini', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FKFNNJEE@ExData?2AncentDrop?4ini?$AA@
CONST	SEGMENT
??_C@_0BG@FKFNNJEE@ExData?2AncentDrop?4ini?$AA@ DB 'ExData\AncentDrop.ini'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_List$228989 = -388					; size = 8
_n$228988 = -380					; size = 8
_n$228985 = -372					; size = 12
_n$228982 = -360					; size = 8
_n$228979 = -352					; size = 76
_Flag$ = -276						; size = 4
_Buff$ = -272						; size = 256
_file$ = -16						; size = 4
_i$228962 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Init@CItemDropManager@@QAEXXZ PROC			; CItemDropManager::Init
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 01 00
	00		 sub	 esp, 452		; 000001c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : 	ZeroMemory(&this->Drop,sizeof(this->Drop));

  00019	68 e0 28 01 00	 push	 76000			; 000128e0H
  0001e	6a 00		 push	 0
  00020	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00023	05 9c 3a 00 00	 add	 eax, 15004		; 00003a9cH
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _memset
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18   : 
; 19   : 	this->MapBlockCount = 0;

  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c7 80 c0 82 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+99008], 0

; 20   : 	ZeroMemory(&this->MapBlockDrop,sizeof(this->MapBlockDrop));

  0003e	68 e0 2e 00 00	 push	 12000			; 00002ee0H
  00043	6a 00		 push	 0
  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	05 c4 82 01 00	 add	 eax, 99012		; 000182c4H
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _memset
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 21   : 
; 22   : 	for(int i = 0; i > OBJMAX; i++)

  00056	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228962[ebp], 0
  0005d	eb 09		 jmp	 SHORT $LN11@Init
$LN10@Init:
  0005f	8b 45 f4	 mov	 eax, DWORD PTR _i$228962[ebp]
  00062	83 c0 01	 add	 eax, 1
  00065	89 45 f4	 mov	 DWORD PTR _i$228962[ebp], eax
$LN11@Init:
  00068	81 7d f4 98 3a
	00 00		 cmp	 DWORD PTR _i$228962[ebp], 15000 ; 00003a98H
  0006f	7e 0b		 jle	 SHORT $LN9@Init

; 23   : 	{
; 24   : 		this->iUser[i]	= false;

  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	03 45 f4	 add	 eax, DWORD PTR _i$228962[ebp]
  00077	c6 00 00	 mov	 BYTE PTR [eax], 0

; 25   : 	}

  0007a	eb e3		 jmp	 SHORT $LN10@Init
$LN9@Init:

; 26   : 
; 27   : 	this->ReadAnc(gDirPath.GetNewPath("ExData\\AncentDrop.ini"));

  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FKFNNJEE@ExData?2AncentDrop?4ini?$AA@
  00081	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00086	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0008b	50		 push	 eax
  0008c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?ReadAnc@CItemDropManager@@QAEXPAD@Z ; CItemDropManager::ReadAnc

; 28   : 
; 29   : 	FILE *file = fopen(ITEM_DROP_DIR,"r");

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JKBNDCGJ@?4?4?2Data?2ExData?2ItemDropManager?4i@
  0009e	e8 00 00 00 00	 call	 _fopen
  000a3	83 c4 08	 add	 esp, 8
  000a6	89 45 f0	 mov	 DWORD PTR _file$[ebp], eax

; 30   : 
; 31   : 	if (file == NULL)

  000a9	83 7d f0 00	 cmp	 DWORD PTR _file$[ebp], 0
  000ad	75 21		 jne	 SHORT $LN8@Init

; 32   : 	{
; 33   : 		MessageBoxA(0,ITEM_DROP_DIR,"CRITICAL ERROR",0);

  000af	6a 00		 push	 0
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JKBNDCGJ@?4?4?2Data?2ExData?2ItemDropManager?4i@
  000bb	6a 00		 push	 0
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 34   : 		ExitProcess(1);

  000c3	6a 01		 push	 1
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4

; 35   : 		return;

  000cb	e9 c6 04 00 00	 jmp	 $LN13@Init
$LN8@Init:

; 36   : 	}
; 37   : 
; 38   : 	this->DropCount = 0;

  000d0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	c7 80 98 3a 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+15000], 0

; 39   : 	this->BlockCount = 0;

  000dd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	c7 80 7c 63 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+91004], 0

; 40   : 
; 41   : 	this->m_MapDropRate.clear();

  000ea	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	81 c1 e8 0f 04
	00		 add	 ecx, 266216		; 00040fe8H
  000f3	e8 00 00 00 00	 call	 ?clear@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::clear

; 42   : 
; 43   : 	char Buff[256];
; 44   : 	int Flag = 0;

  000f8	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0
$LN7@Init:

; 45   : 	while (!feof(file))

  00102	8b 45 f0	 mov	 eax, DWORD PTR _file$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _feof
  0010b	83 c4 04	 add	 esp, 4
  0010e	85 c0		 test	 eax, eax
  00110	0f 85 74 04 00
	00		 jne	 $LN6@Init

; 46   : 	{
; 47   : 		fgets(Buff,256,file);

  00116	8b 45 f0	 mov	 eax, DWORD PTR _file$[ebp]
  00119	50		 push	 eax
  0011a	68 00 01 00 00	 push	 256			; 00000100H
  0011f	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 _fgets
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   : 
; 49   : 		if(Ex_IsBadFileLine(Buff, Flag))

  0012e	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  00134	50		 push	 eax
  00135	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  00141	83 c4 08	 add	 esp, 8
  00144	0f b6 d0	 movzx	 edx, al
  00147	85 d2		 test	 edx, edx
  00149	74 02		 je	 SHORT $LN5@Init

; 50   : 			continue;

  0014b	eb b5		 jmp	 SHORT $LN7@Init
$LN5@Init:

; 51   : 
; 52   : 		if (Flag == 1)

  0014d	83 bd ec fe ff
	ff 01		 cmp	 DWORD PTR _Flag$[ebp], 1
  00154	0f 85 c2 02 00
	00		 jne	 $LN4@Init

; 53   : 		{
; 54   : 			int n[19];
; 55   : 			sscanf(Buff,"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", &n[0],&n[1],&n[2],&n[3],&n[4],&n[5],&n[6],&n[7],&n[8],&n[9],&n[10],&n[11],&n[12],&n[13],&n[14],&n[15],&n[16],&n[17],&n[18]);

  0015a	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _n$228979[ebp+72]
  00160	50		 push	 eax
  00161	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$228979[ebp+68]
  00167	51		 push	 ecx
  00168	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR _n$228979[ebp+64]
  0016e	52		 push	 edx
  0016f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _n$228979[ebp+60]
  00175	50		 push	 eax
  00176	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$228979[ebp+56]
  0017c	51		 push	 ecx
  0017d	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _n$228979[ebp+52]
  00183	52		 push	 edx
  00184	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _n$228979[ebp+48]
  0018a	50		 push	 eax
  0018b	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _n$228979[ebp+44]
  00191	51		 push	 ecx
  00192	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _n$228979[ebp+40]
  00198	52		 push	 edx
  00199	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _n$228979[ebp+36]
  0019f	50		 push	 eax
  001a0	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$228979[ebp+32]
  001a6	51		 push	 ecx
  001a7	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR _n$228979[ebp+28]
  001ad	52		 push	 edx
  001ae	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _n$228979[ebp+24]
  001b4	50		 push	 eax
  001b5	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$228979[ebp+20]
  001bb	51		 push	 ecx
  001bc	8d 95 b0 fe ff
	ff		 lea	 edx, DWORD PTR _n$228979[ebp+16]
  001c2	52		 push	 edx
  001c3	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _n$228979[ebp+12]
  001c9	50		 push	 eax
  001ca	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$228979[ebp+8]
  001d0	51		 push	 ecx
  001d1	8d 95 a4 fe ff
	ff		 lea	 edx, DWORD PTR _n$228979[ebp+4]
  001d7	52		 push	 edx
  001d8	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR _n$228979[ebp]
  001de	50		 push	 eax
  001df	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@GPAKNOIP@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
  001e4	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  001ea	51		 push	 ecx
  001eb	e8 00 00 00 00	 call	 _sscanf
  001f0	83 c4 54	 add	 esp, 84			; 00000054H

; 56   : 			this->Drop[this->DropCount].Type			= n[0];

  001f3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f6	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  001fc	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  001ff	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00202	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp]
  00208	89 84 0a 9c 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15004], eax

; 57   : 			this->Drop[this->DropCount].Index			= n[1];

  0020f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00212	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  00218	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0021b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0021e	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+4]
  00224	89 84 0a a0 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15008], eax

; 58   : 			this->Drop[this->DropCount].MinLevel		= n[2];

  0022b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0022e	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  00234	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00237	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0023a	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+8]
  00240	89 84 0a a4 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15012], eax

; 59   : 			this->Drop[this->DropCount].MaxLevel		= n[3];

  00247	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0024a	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  00250	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00253	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00256	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+12]
  0025c	89 84 0a a8 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15016], eax

; 60   : 			this->Drop[this->DropCount].Dur				= n[4];

  00263	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00266	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  0026c	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0026f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00272	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+16]
  00278	89 84 0a ac 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15020], eax

; 61   : 			this->Drop[this->DropCount].OptionRate		= n[5];

  0027f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00282	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  00288	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0028b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0028e	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+20]
  00294	89 84 0a b0 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15024], eax

; 62   : 			this->Drop[this->DropCount].MaxOption		= n[6];

  0029b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0029e	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  002a4	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  002a7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002aa	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+24]
  002b0	89 84 0a b4 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15028], eax

; 63   : 			this->Drop[this->DropCount].LuckRate		= n[7];

  002b7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002ba	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  002c0	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  002c3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002c6	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+28]
  002cc	89 84 0a b8 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15032], eax

; 64   : 			this->Drop[this->DropCount].LuckOption		= n[8];

  002d3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002d6	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  002dc	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  002df	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002e2	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+32]
  002e8	89 84 0a bc 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15036], eax

; 65   : 			this->Drop[this->DropCount].SkillRate		= n[9];

  002ef	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002f2	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  002f8	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  002fb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002fe	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+36]
  00304	89 84 0a c0 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15040], eax

; 66   : 			this->Drop[this->DropCount].SkillOption		= n[10];

  0030b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0030e	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  00314	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00317	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0031a	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+40]
  00320	89 84 0a c4 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15044], eax

; 67   : 			this->Drop[this->DropCount].ExlRate			= n[11];

  00327	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0032a	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  00330	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00333	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00336	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+44]
  0033c	89 84 0a c8 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15048], eax

; 68   : 			this->Drop[this->DropCount].ExlOption		= n[12];

  00343	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00346	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  0034c	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0034f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00352	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+48]
  00358	89 84 0a cc 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15052], eax

; 69   : 			this->Drop[this->DropCount].AncRate			= n[13];

  0035f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00362	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  00368	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0036b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0036e	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+52]
  00374	89 84 0a d0 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15056], eax

; 70   : 			this->Drop[this->DropCount].AncOption		= n[14];

  0037b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0037e	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  00384	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00387	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0038a	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+56]
  00390	89 84 0a d4 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15060], eax

; 71   : 			this->Drop[this->DropCount].MonsterMinLevel = n[15];

  00397	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0039a	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  003a0	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  003a3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003a6	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+60]
  003ac	89 84 0a d8 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15064], eax

; 72   : 			this->Drop[this->DropCount].MonsterMaxLevel = n[16];

  003b3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003b6	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  003bc	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  003bf	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003c2	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+64]
  003c8	89 84 0a dc 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15068], eax

; 73   : 			this->Drop[this->DropCount].MonsterMap		= n[17];

  003cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d2	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  003d8	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  003db	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003de	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+68]
  003e4	89 84 0a e0 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15072], eax

; 74   : 			this->Drop[this->DropCount].ItemDropRate	= n[18];

  003eb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003ee	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  003f4	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  003f7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003fa	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _n$228979[ebp+72]
  00400	89 84 0a e4 3a
	00 00		 mov	 DWORD PTR [edx+ecx+15076], eax

; 75   : 			this->DropCount++;

  00407	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0040a	8b 88 98 3a 00
	00		 mov	 ecx, DWORD PTR [eax+15000]
  00410	83 c1 01	 add	 ecx, 1
  00413	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00416	89 8a 98 3a 00
	00		 mov	 DWORD PTR [edx+15000], ecx
$LN4@Init:

; 76   : 		}
; 77   : 
; 78   : 		if(Flag == 2)

  0041c	83 bd ec fe ff
	ff 02		 cmp	 DWORD PTR _Flag$[ebp], 2
  00423	75 69		 jne	 SHORT $LN3@Init

; 79   : 		{
; 80   : 			int n[2];
; 81   : 			sscanf(Buff,"%d %d", &n[0],&n[1]);

  00425	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _n$228982[ebp+4]
  0042b	50		 push	 eax
  0042c	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _n$228982[ebp]
  00432	51		 push	 ecx
  00433	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  00438	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0043e	52		 push	 edx
  0043f	e8 00 00 00 00	 call	 _sscanf
  00444	83 c4 10	 add	 esp, 16			; 00000010H

; 82   : 			this->Block[this->BlockCount].Type	= n[0];

  00447	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0044a	8b 88 7c 63 01
	00		 mov	 ecx, DWORD PTR [eax+91004]
  00450	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00453	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _n$228982[ebp]
  00459	89 84 ca 80 63
	01 00		 mov	 DWORD PTR [edx+ecx*8+91008], eax

; 83   : 			this->Block[this->BlockCount].Index = n[1];

  00460	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00463	8b 88 7c 63 01
	00		 mov	 ecx, DWORD PTR [eax+91004]
  00469	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0046c	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _n$228982[ebp+4]
  00472	89 84 ca 84 63
	01 00		 mov	 DWORD PTR [edx+ecx*8+91012], eax

; 84   : 			this->BlockCount++;

  00479	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0047c	8b 88 7c 63 01
	00		 mov	 ecx, DWORD PTR [eax+91004]
  00482	83 c1 01	 add	 ecx, 1
  00485	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00488	89 8a 7c 63 01
	00		 mov	 DWORD PTR [edx+91004], ecx
$LN3@Init:

; 85   : 		}
; 86   : 
; 87   : 		//if(g_ExLicense.CheckUser(Local) || g_ExLicense.CheckUser(ulasevich) || g_ExLicense.CheckUser(ulasevich2))
; 88   : 		//{
; 89   : 		if(Flag == 3)

  0048e	83 bd ec fe ff
	ff 03		 cmp	 DWORD PTR _Flag$[ebp], 3
  00495	0f 85 92 00 00
	00		 jne	 $LN2@Init

; 90   : 		{
; 91   : 			int n[3];
; 92   : 			sscanf(Buff,"%d %d %d", &n[0], &n[1], &n[2]);

  0049b	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _n$228985[ebp+8]
  004a1	50		 push	 eax
  004a2	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _n$228985[ebp+4]
  004a8	51		 push	 ecx
  004a9	8d 95 8c fe ff
	ff		 lea	 edx, DWORD PTR _n$228985[ebp]
  004af	52		 push	 edx
  004b0	68 00 00 00 00	 push	 OFFSET ??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@
  004b5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  004bb	50		 push	 eax
  004bc	e8 00 00 00 00	 call	 _sscanf
  004c1	83 c4 14	 add	 esp, 20			; 00000014H

; 93   : 			this->MapBlockDrop[this->MapBlockCount].Map	= n[0];

  004c4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004c7	8b 88 c0 82 01
	00		 mov	 ecx, DWORD PTR [eax+99008]
  004cd	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  004d0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004d3	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _n$228985[ebp]
  004d9	89 84 0a c4 82
	01 00		 mov	 DWORD PTR [edx+ecx+99012], eax

; 94   : 			this->MapBlockDrop[this->MapBlockCount].Type	= n[1];

  004e0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004e3	8b 88 c0 82 01
	00		 mov	 ecx, DWORD PTR [eax+99008]
  004e9	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  004ec	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004ef	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _n$228985[ebp+4]
  004f5	89 84 0a c8 82
	01 00		 mov	 DWORD PTR [edx+ecx+99016], eax

; 95   : 			this->MapBlockDrop[this->MapBlockCount].Index	= n[2];

  004fc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004ff	8b 88 c0 82 01
	00		 mov	 ecx, DWORD PTR [eax+99008]
  00505	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00508	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0050b	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _n$228985[ebp+8]
  00511	89 84 0a cc 82
	01 00		 mov	 DWORD PTR [edx+ecx+99020], eax

; 96   : 			this->MapBlockCount++;

  00518	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0051b	8b 88 c0 82 01
	00		 mov	 ecx, DWORD PTR [eax+99008]
  00521	83 c1 01	 add	 ecx, 1
  00524	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00527	89 8a c0 82 01
	00		 mov	 DWORD PTR [edx+99008], ecx
$LN2@Init:

; 97   : 		}
; 98   : 		//}
; 99   : 
; 100  : 		if(Flag == 4)

  0052d	83 bd ec fe ff
	ff 04		 cmp	 DWORD PTR _Flag$[ebp], 4
  00534	75 4f		 jne	 SHORT $LN1@Init

; 101  : 		{
; 102  : 			int n[2];
; 103  : 			sscanf(Buff,"%d %d", &n[0], &n[1]);

  00536	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _n$228988[ebp+4]
  0053c	50		 push	 eax
  0053d	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _n$228988[ebp]
  00543	51		 push	 ecx
  00544	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  00549	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0054f	52		 push	 edx
  00550	e8 00 00 00 00	 call	 _sscanf
  00555	83 c4 10	 add	 esp, 16			; 00000010H

; 104  : 
; 105  : 			MAP_DROPRATE_DATA List;
; 106  : 			List.MapNum = n[0];

  00558	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _n$228988[ebp]
  0055e	89 85 7c fe ff
	ff		 mov	 DWORD PTR _List$228989[ebp], eax

; 107  : 			List.Rate = n[1];

  00564	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _n$228988[ebp+4]
  0056a	89 85 80 fe ff
	ff		 mov	 DWORD PTR _List$228989[ebp+4], eax

; 108  : 
; 109  : 			this->m_MapDropRate.push_back(List);

  00570	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _List$228989[ebp]
  00576	50		 push	 eax
  00577	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0057a	81 c1 e8 0f 04
	00		 add	 ecx, 266216		; 00040fe8H
  00580	e8 00 00 00 00	 call	 ?push_back@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXABUMAP_DROPRATE_DATA@@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::push_back
$LN1@Init:

; 110  : 		}
; 111  : 	}

  00585	e9 78 fb ff ff	 jmp	 $LN7@Init
$LN6@Init:

; 112  : 
; 113  : 	fclose(file);

  0058a	8b 45 f0	 mov	 eax, DWORD PTR _file$[ebp]
  0058d	50		 push	 eax
  0058e	e8 00 00 00 00	 call	 _fclose
  00593	83 c4 04	 add	 esp, 4
$LN13@Init:

; 114  : 
; 115  : 
; 116  : 	//-> Anc Read
; 117  : }

  00596	5f		 pop	 edi
  00597	5e		 pop	 esi
  00598	5b		 pop	 ebx
  00599	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0059c	33 cd		 xor	 ecx, ebp
  0059e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005a3	8b e5		 mov	 esp, ebp
  005a5	5d		 pop	 ebp
  005a6	c3		 ret	 0
?Init@CItemDropManager@@QAEXXZ ENDP			; CItemDropManager::Init
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@ ; `string'
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_strcmp:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@
CONST	SEGMENT
??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@ DB '['
	DB	'Ancent Drop] %s file not found', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$229027 = -24						; size = 4
_a$229026 = -20						; size = 4
_Token$ = -16						; size = 4
_j$228999 = -12						; size = 4
_i$228995 = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?ReadAnc@CItemDropManager@@QAEXPAD@Z PROC		; CItemDropManager::ReadAnc
; _this$ = ecx

; 120  : {

  005b0	55		 push	 ebp
  005b1	8b ec		 mov	 ebp, esp
  005b3	83 ec 58	 sub	 esp, 88			; 00000058H
  005b6	53		 push	 ebx
  005b7	56		 push	 esi
  005b8	57		 push	 edi
  005b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 	if( //!g_ExLicense.CheckUser(eExUB::Local) && 
; 122  : 		!g_ExLicense.CheckUser(eExUB::Gredy) &&
; 123  : 		!g_ExLicense.CheckUser(eExUB::Gredy2) && 
; 124  : 		!g_ExLicense.CheckUser(eExUB::GredyLocal) &&
; 125  : 		!g_ExLicense.CheckUser(eExUB::MedoniAndrei)&&
; 126  : 		!g_ExLicense.CheckUser(eExUB::EpicMU) &&
; 127  : 		!g_ExLicense.CheckUser(eExUB::masonX))

  005bc	6a 20		 push	 32			; 00000020H
  005be	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  005c3	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  005c8	0f b6 c0	 movzx	 eax, al
  005cb	85 c0		 test	 eax, eax
  005cd	75 64		 jne	 SHORT $LN14@ReadAnc
  005cf	6a 22		 push	 34			; 00000022H
  005d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  005d6	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  005db	0f b6 c0	 movzx	 eax, al
  005de	85 c0		 test	 eax, eax
  005e0	75 51		 jne	 SHORT $LN14@ReadAnc
  005e2	6a 21		 push	 33			; 00000021H
  005e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  005e9	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  005ee	0f b6 c0	 movzx	 eax, al
  005f1	85 c0		 test	 eax, eax
  005f3	75 3e		 jne	 SHORT $LN14@ReadAnc
  005f5	6a 32		 push	 50			; 00000032H
  005f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  005fc	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00601	0f b6 c0	 movzx	 eax, al
  00604	85 c0		 test	 eax, eax
  00606	75 2b		 jne	 SHORT $LN14@ReadAnc
  00608	6a 3b		 push	 59			; 0000003bH
  0060a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0060f	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00614	0f b6 c0	 movzx	 eax, al
  00617	85 c0		 test	 eax, eax
  00619	75 18		 jne	 SHORT $LN14@ReadAnc
  0061b	6a 3c		 push	 60			; 0000003cH
  0061d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00622	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00627	0f b6 c0	 movzx	 eax, al
  0062a	85 c0		 test	 eax, eax
  0062c	75 05		 jne	 SHORT $LN14@ReadAnc

; 128  : 	{
; 129  : 		return;

  0062e	e9 35 03 00 00	 jmp	 $LN15@ReadAnc
$LN14@ReadAnc:

; 130  : 	}
; 131  : 
; 132  : 	for(int i = 0; i < 100; i++)

  00633	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$228995[ebp], 0
  0063a	eb 09		 jmp	 SHORT $LN13@ReadAnc
$LN12@ReadAnc:
  0063c	8b 45 f8	 mov	 eax, DWORD PTR _i$228995[ebp]
  0063f	83 c0 01	 add	 eax, 1
  00642	89 45 f8	 mov	 DWORD PTR _i$228995[ebp], eax
$LN13@ReadAnc:
  00645	83 7d f8 64	 cmp	 DWORD PTR _i$228995[ebp], 100 ; 00000064H
  00649	0f 8d f2 00 00
	00		 jge	 $LN11@ReadAnc

; 133  : 	{
; 134  : 		this->m_AncData[i].sMap = 0; 

  0064f	8b 45 f8	 mov	 eax, DWORD PTR _i$228995[ebp]
  00652	69 c0 10 06 00
	00		 imul	 eax, 1552		; 00000610H
  00658	33 c9		 xor	 ecx, ecx
  0065a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0065d	66 89 8c 02 a4
	b1 01 00	 mov	 WORD PTR [edx+eax+111012], cx

; 135  : 		this->m_AncData[i].sMinLvlMob = 0;

  00665	8b 45 f8	 mov	 eax, DWORD PTR _i$228995[ebp]
  00668	69 c0 10 06 00
	00		 imul	 eax, 1552		; 00000610H
  0066e	33 c9		 xor	 ecx, ecx
  00670	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00673	66 89 8c 02 a6
	b1 01 00	 mov	 WORD PTR [edx+eax+111014], cx

; 136  : 		this->m_AncData[i].sMaxLvlMob = 0;

  0067b	8b 45 f8	 mov	 eax, DWORD PTR _i$228995[ebp]
  0067e	69 c0 10 06 00
	00		 imul	 eax, 1552		; 00000610H
  00684	33 c9		 xor	 ecx, ecx
  00686	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00689	66 89 8c 02 a8
	b1 01 00	 mov	 WORD PTR [edx+eax+111016], cx

; 137  : 		this->m_AncData[i].iRate = 0;

  00691	8b 45 f8	 mov	 eax, DWORD PTR _i$228995[ebp]
  00694	69 c0 10 06 00
	00		 imul	 eax, 1552		; 00000610H
  0069a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0069d	c7 84 01 ac b1
	01 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+111020], 0

; 138  : 		this->m_AncData[i].ItemCount = 0;

  006a8	8b 45 f8	 mov	 eax, DWORD PTR _i$228995[ebp]
  006ab	69 c0 10 06 00
	00		 imul	 eax, 1552		; 00000610H
  006b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006b4	c7 84 01 b0 b1
	01 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+111024], 0

; 139  : 		for(int j = 0; j < 256; j++)

  006bf	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$228999[ebp], 0
  006c6	eb 09		 jmp	 SHORT $LN10@ReadAnc
$LN9@ReadAnc:
  006c8	8b 45 f4	 mov	 eax, DWORD PTR _j$228999[ebp]
  006cb	83 c0 01	 add	 eax, 1
  006ce	89 45 f4	 mov	 DWORD PTR _j$228999[ebp], eax
$LN10@ReadAnc:
  006d1	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _j$228999[ebp], 256 ; 00000100H
  006d8	7d 62		 jge	 SHORT $LN8@ReadAnc

; 140  : 		{
; 141  : 			this->m_AncData[i].m_item[j].sType = 0;

  006da	8b 45 f8	 mov	 eax, DWORD PTR _i$228995[ebp]
  006dd	69 c0 10 06 00
	00		 imul	 eax, 1552		; 00000610H
  006e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e6	8d 94 01 a4 b1
	01 00		 lea	 edx, DWORD PTR [ecx+eax+111012]
  006ed	8b 45 f4	 mov	 eax, DWORD PTR _j$228999[ebp]
  006f0	6b c0 06	 imul	 eax, 6
  006f3	33 c9		 xor	 ecx, ecx
  006f5	66 89 4c 02 10	 mov	 WORD PTR [edx+eax+16], cx

; 142  : 			this->m_AncData[i].m_item[j].sIndex = 0;

  006fa	8b 45 f8	 mov	 eax, DWORD PTR _i$228995[ebp]
  006fd	69 c0 10 06 00
	00		 imul	 eax, 1552		; 00000610H
  00703	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00706	8d 94 01 a4 b1
	01 00		 lea	 edx, DWORD PTR [ecx+eax+111012]
  0070d	8b 45 f4	 mov	 eax, DWORD PTR _j$228999[ebp]
  00710	6b c0 06	 imul	 eax, 6
  00713	33 c9		 xor	 ecx, ecx
  00715	66 89 4c 02 12	 mov	 WORD PTR [edx+eax+18], cx

; 143  : 			this->m_AncData[i].m_item[j].sOpt = 0;

  0071a	8b 45 f8	 mov	 eax, DWORD PTR _i$228995[ebp]
  0071d	69 c0 10 06 00
	00		 imul	 eax, 1552		; 00000610H
  00723	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00726	8d 94 01 a4 b1
	01 00		 lea	 edx, DWORD PTR [ecx+eax+111012]
  0072d	8b 45 f4	 mov	 eax, DWORD PTR _j$228999[ebp]
  00730	6b c0 06	 imul	 eax, 6
  00733	33 c9		 xor	 ecx, ecx
  00735	66 89 4c 02 14	 mov	 WORD PTR [edx+eax+20], cx

; 144  : 		}

  0073a	eb 8c		 jmp	 SHORT $LN9@ReadAnc
$LN8@ReadAnc:

; 145  : 	}

  0073c	e9 fb fe ff ff	 jmp	 $LN12@ReadAnc
$LN11@ReadAnc:

; 146  : 
; 147  : 	this->iAncCount = 0;

  00741	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00744	c7 80 e4 0f 04
	00 00 00 00 00	 mov	 DWORD PTR [eax+266212], 0

; 148  : 
; 149  : 	SMDToken Token;
; 150  : 
; 151  : 	SMDFile = fopen(filename, "r");

  0074e	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00753	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00756	50		 push	 eax
  00757	e8 00 00 00 00	 call	 _fopen
  0075c	83 c4 08	 add	 esp, 8
  0075f	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 152  : 
; 153  : 	if(!SMDFile)

  00764	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  0076b	75 16		 jne	 SHORT $LN7@ReadAnc

; 154  : 	{
; 155  : 		MsgBox("[Ancent Drop] %s file not found", filename);

  0076d	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00770	50		 push	 eax
  00771	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@
  00776	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0077b	83 c4 08	 add	 esp, 8

; 156  : 		return;

  0077e	e9 e5 01 00 00	 jmp	 $LN15@ReadAnc
$LN7@ReadAnc:

; 157  : 	}
; 158  : 
; 159  : 	while(true)

  00783	b8 01 00 00 00	 mov	 eax, 1
  00788	85 c0		 test	 eax, eax
  0078a	0f 84 b8 01 00
	00		 je	 $LN5@ReadAnc

; 160  : 	{
; 161  : 		Token = GetToken();

  00790	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00795	89 45 f0	 mov	 DWORD PTR _Token$[ebp], eax

; 162  : 
; 163  : 		if( Token == END )

  00798	83 7d f0 02	 cmp	 DWORD PTR _Token$[ebp], 2
  0079c	75 05		 jne	 SHORT $LN4@ReadAnc

; 164  : 		{
; 165  : 			break;

  0079e	e9 a5 01 00 00	 jmp	 $LN5@ReadAnc
$LN4@ReadAnc:

; 166  : 		}
; 167  : 
; 168  : 		int a = this->iAncCount;

  007a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007a6	8b 88 e4 0f 04
	00		 mov	 ecx, DWORD PTR [eax+266212]
  007ac	89 4d ec	 mov	 DWORD PTR _a$229026[ebp], ecx

; 169  : 		int n = 0;

  007af	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _n$229027[ebp], 0

; 170  : 
; 171  : 		this->m_AncData[a].sMap = (int)TokenNumber;

  007b6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007bc	e8 00 00 00 00	 call	 __ftol2_sse
  007c1	8b 4d ec	 mov	 ecx, DWORD PTR _a$229026[ebp]
  007c4	69 c9 10 06 00
	00		 imul	 ecx, 1552		; 00000610H
  007ca	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007cd	66 89 84 0a a4
	b1 01 00	 mov	 WORD PTR [edx+ecx+111012], ax

; 172  : 		Token = GetToken();

  007d5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007da	89 45 f0	 mov	 DWORD PTR _Token$[ebp], eax

; 173  : 
; 174  : 		this->m_AncData[a].sMinLvlMob = (int)TokenNumber;

  007dd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007e3	e8 00 00 00 00	 call	 __ftol2_sse
  007e8	8b 4d ec	 mov	 ecx, DWORD PTR _a$229026[ebp]
  007eb	69 c9 10 06 00
	00		 imul	 ecx, 1552		; 00000610H
  007f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007f4	66 89 84 0a a6
	b1 01 00	 mov	 WORD PTR [edx+ecx+111014], ax

; 175  : 		Token = GetToken();

  007fc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00801	89 45 f0	 mov	 DWORD PTR _Token$[ebp], eax

; 176  : 
; 177  : 		this->m_AncData[a].sMaxLvlMob = (int)TokenNumber;

  00804	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0080a	e8 00 00 00 00	 call	 __ftol2_sse
  0080f	8b 4d ec	 mov	 ecx, DWORD PTR _a$229026[ebp]
  00812	69 c9 10 06 00
	00		 imul	 ecx, 1552		; 00000610H
  00818	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0081b	66 89 84 0a a8
	b1 01 00	 mov	 WORD PTR [edx+ecx+111016], ax

; 178  : 		Token = GetToken();

  00823	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00828	89 45 f0	 mov	 DWORD PTR _Token$[ebp], eax

; 179  : 
; 180  : 		this->m_AncData[a].iRate = (int)TokenNumber;

  0082b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00831	e8 00 00 00 00	 call	 __ftol2_sse
  00836	8b 4d ec	 mov	 ecx, DWORD PTR _a$229026[ebp]
  00839	69 c9 10 06 00
	00		 imul	 ecx, 1552		; 00000610H
  0083f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00842	89 84 0a ac b1
	01 00		 mov	 DWORD PTR [edx+ecx+111020], eax
$LN3@ReadAnc:

; 181  : 
; 182  : 		while(true)

  00849	b8 01 00 00 00	 mov	 eax, 1
  0084e	85 c0		 test	 eax, eax
  00850	0f 84 bc 00 00
	00		 je	 $LN2@ReadAnc

; 183  : 		{
; 184  : 			Token = GetToken();

  00856	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0085b	89 45 f0	 mov	 DWORD PTR _Token$[ebp], eax

; 185  : 
; 186  : 			if(!strcmp("end", TokenString))

  0085e	68 00 00 00 00	 push	 OFFSET _TokenString
  00863	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00868	e8 00 00 00 00	 call	 _strcmp
  0086d	83 c4 08	 add	 esp, 8
  00870	85 c0		 test	 eax, eax
  00872	75 05		 jne	 SHORT $LN1@ReadAnc

; 187  : 			{
; 188  : 				break;

  00874	e9 99 00 00 00	 jmp	 $LN2@ReadAnc
$LN1@ReadAnc:

; 189  : 			}
; 190  : 
; 191  : 			this->m_AncData[a].m_item[n].sType = (int)TokenNumber;

  00879	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0087f	e8 00 00 00 00	 call	 __ftol2_sse
  00884	8b 4d ec	 mov	 ecx, DWORD PTR _a$229026[ebp]
  00887	69 c9 10 06 00
	00		 imul	 ecx, 1552		; 00000610H
  0088d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00890	8d 8c 0a a4 b1
	01 00		 lea	 ecx, DWORD PTR [edx+ecx+111012]
  00897	8b 55 e8	 mov	 edx, DWORD PTR _n$229027[ebp]
  0089a	6b d2 06	 imul	 edx, 6
  0089d	66 89 44 11 10	 mov	 WORD PTR [ecx+edx+16], ax

; 192  : 
; 193  : 			Token = GetToken();

  008a2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008a7	89 45 f0	 mov	 DWORD PTR _Token$[ebp], eax

; 194  : 			this->m_AncData[a].m_item[n].sIndex = (int)TokenNumber;

  008aa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008b0	e8 00 00 00 00	 call	 __ftol2_sse
  008b5	8b 4d ec	 mov	 ecx, DWORD PTR _a$229026[ebp]
  008b8	69 c9 10 06 00
	00		 imul	 ecx, 1552		; 00000610H
  008be	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  008c1	8d 8c 0a a4 b1
	01 00		 lea	 ecx, DWORD PTR [edx+ecx+111012]
  008c8	8b 55 e8	 mov	 edx, DWORD PTR _n$229027[ebp]
  008cb	6b d2 06	 imul	 edx, 6
  008ce	66 89 44 11 12	 mov	 WORD PTR [ecx+edx+18], ax

; 195  : 
; 196  : 			//if(g_ExLicense.CheckUser(eExUB::masonX))
; 197  : 			{
; 198  : 				Token = GetToken();

  008d3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008d8	89 45 f0	 mov	 DWORD PTR _Token$[ebp], eax

; 199  : 				this->m_AncData[a].m_item[n].sOpt = (int)TokenNumber;

  008db	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008e1	e8 00 00 00 00	 call	 __ftol2_sse
  008e6	8b 4d ec	 mov	 ecx, DWORD PTR _a$229026[ebp]
  008e9	69 c9 10 06 00
	00		 imul	 ecx, 1552		; 00000610H
  008ef	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  008f2	8d 8c 0a a4 b1
	01 00		 lea	 ecx, DWORD PTR [edx+ecx+111012]
  008f9	8b 55 e8	 mov	 edx, DWORD PTR _n$229027[ebp]
  008fc	6b d2 06	 imul	 edx, 6
  008ff	66 89 44 11 14	 mov	 WORD PTR [ecx+edx+20], ax

; 200  : 			}
; 201  : 
; 202  : 			n++;

  00904	8b 45 e8	 mov	 eax, DWORD PTR _n$229027[ebp]
  00907	83 c0 01	 add	 eax, 1
  0090a	89 45 e8	 mov	 DWORD PTR _n$229027[ebp], eax

; 203  : 		}

  0090d	e9 37 ff ff ff	 jmp	 $LN3@ReadAnc
$LN2@ReadAnc:

; 204  : 
; 205  : 		this->m_AncData[this->iAncCount].ItemCount = n;

  00912	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00915	8b 88 e4 0f 04
	00		 mov	 ecx, DWORD PTR [eax+266212]
  0091b	69 c9 10 06 00
	00		 imul	 ecx, 1552		; 00000610H
  00921	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00924	8b 45 e8	 mov	 eax, DWORD PTR _n$229027[ebp]
  00927	89 84 0a b0 b1
	01 00		 mov	 DWORD PTR [edx+ecx+111024], eax

; 206  : 		this->iAncCount++;

  0092e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00931	8b 88 e4 0f 04
	00		 mov	 ecx, DWORD PTR [eax+266212]
  00937	83 c1 01	 add	 ecx, 1
  0093a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0093d	89 8a e4 0f 04
	00		 mov	 DWORD PTR [edx+266212], ecx

; 207  : 	}

  00943	e9 3b fe ff ff	 jmp	 $LN7@ReadAnc
$LN5@ReadAnc:

; 208  : 
; 209  : 	fclose(SMDFile);

  00948	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0094d	50		 push	 eax
  0094e	e8 00 00 00 00	 call	 _fclose
  00953	83 c4 04	 add	 esp, 4

; 210  : 	LogAdd("%s file load!", filename);

  00956	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00959	50		 push	 eax
  0095a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  0095f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00965	83 c4 08	 add	 esp, 8
$LN15@ReadAnc:

; 211  : }

  00968	5f		 pop	 edi
  00969	5e		 pop	 esi
  0096a	5b		 pop	 ebx
  0096b	8b e5		 mov	 esp, ebp
  0096d	5d		 pop	 ebp
  0096e	c2 04 00	 ret	 4
?ReadAnc@CItemDropManager@@QAEXPAD@Z ENDP		; CItemDropManager::ReadAnc
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00980	55		 push	 ebp
  00981	8b ec		 mov	 ebp, esp
  00983	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00989	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0098e	33 c5		 xor	 eax, ebp
  00990	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00993	53		 push	 ebx
  00994	56		 push	 esi
  00995	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00996	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0099d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009a2	50		 push	 eax
  009a3	e8 00 00 00 00	 call	 _fgetc
  009a8	83 c4 04	 add	 esp, 4
  009ab	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  009ae	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  009b2	83 f9 ff	 cmp	 ecx, -1
  009b5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  009b7	b8 02 00 00 00	 mov	 eax, 2
  009bc	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  009c1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  009c3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009c7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  009ca	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  009cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009d1	50		 push	 eax
  009d2	e8 00 00 00 00	 call	 _fgetc
  009d7	83 c4 04	 add	 esp, 4
  009da	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  009dd	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  009e1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  009e4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  009e6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009ea	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  009ed	74 1c		 je	 SHORT $LN23@GetToken
  009ef	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009f3	83 f8 ff	 cmp	 eax, -1
  009f6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  009f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009fd	50		 push	 eax
  009fe	e8 00 00 00 00	 call	 _fgetc
  00a03	83 c4 04	 add	 esp, 4
  00a06	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00a09	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  00a0b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a0f	83 f8 ff	 cmp	 eax, -1
  00a12	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00a14	b8 02 00 00 00	 mov	 eax, 2
  00a19	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  00a1e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a22	50		 push	 eax
  00a23	e8 00 00 00 00	 call	 _isspace
  00a28	83 c4 04	 add	 esp, 4
  00a2b	85 c0		 test	 eax, eax
  00a2d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00a33	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00a37	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00a3d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00a43	83 e9 22	 sub	 ecx, 34			; 00000022H
  00a46	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  00a4c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00a53	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00a59	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  00a5f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00a66	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  00a6d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00a77	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a7c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00a81	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00a86	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00a90	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a95	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  00a9a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  00a9f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00aa9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00aae	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00ab3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00ab8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00ac2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ac7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  00acc	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00ad1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  00adb	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ae0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00ae5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00aea	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00aef	50		 push	 eax
  00af0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00af4	51		 push	 ecx
  00af5	e8 00 00 00 00	 call	 _ungetc
  00afa	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  00afd	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00b00	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00b03	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b08	50		 push	 eax
  00b09	e8 00 00 00 00	 call	 _getc
  00b0e	83 c4 04	 add	 esp, 4
  00b11	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00b14	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00b18	83 f9 ff	 cmp	 ecx, -1
  00b1b	74 36		 je	 SHORT $LN12@GetToken
  00b1d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b21	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00b24	74 1a		 je	 SHORT $LN11@GetToken
  00b26	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b2a	50		 push	 eax
  00b2b	e8 00 00 00 00	 call	 _isdigit
  00b30	83 c4 04	 add	 esp, 4
  00b33	85 c0		 test	 eax, eax
  00b35	75 09		 jne	 SHORT $LN11@GetToken
  00b37	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00b3b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00b3e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00b40	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b43	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00b46	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00b48	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b4b	83 c0 01	 add	 eax, 1
  00b4e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00b51	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00b53	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00b56	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00b59	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00b5c	50		 push	 eax
  00b5d	e8 00 00 00 00	 call	 _atof
  00b62	83 c4 04	 add	 esp, 4
  00b65	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  00b6b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00b75	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00b7a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  00b7f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00b84	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00b8b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b90	50		 push	 eax
  00b91	e8 00 00 00 00	 call	 _getc
  00b96	83 c4 04	 add	 esp, 4
  00b99	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00b9c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00ba0	83 f9 ff	 cmp	 ecx, -1
  00ba3	74 1c		 je	 SHORT $LN8@GetToken
  00ba5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ba9	83 f8 22	 cmp	 eax, 34			; 00000022H
  00bac	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  00bae	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00bb1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00bb4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00bb6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00bb9	83 c0 01	 add	 eax, 1
  00bbc	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  00bbf	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00bc1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00bc5	83 f8 22	 cmp	 eax, 34			; 00000022H
  00bc8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00bca	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00bcf	50		 push	 eax
  00bd0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00bd4	51		 push	 ecx
  00bd5	e8 00 00 00 00	 call	 _ungetc
  00bda	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  00bdd	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00be0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00be3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  00bed	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00bf2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00bf7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  00bfc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c00	50		 push	 eax
  00c01	e8 00 00 00 00	 call	 _isalpha
  00c06	83 c4 04	 add	 esp, 4
  00c09	85 c0		 test	 eax, eax
  00c0b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00c11	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00c18	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c1b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00c1e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00c20	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c23	83 c0 01	 add	 eax, 1
  00c26	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00c29	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c2e	50		 push	 eax
  00c2f	e8 00 00 00 00	 call	 _getc
  00c34	83 c4 04	 add	 esp, 4
  00c37	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00c3a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c3e	83 f9 ff	 cmp	 ecx, -1
  00c41	74 36		 je	 SHORT $LN3@GetToken
  00c43	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c47	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00c4a	74 1a		 je	 SHORT $LN2@GetToken
  00c4c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c50	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00c53	74 11		 je	 SHORT $LN2@GetToken
  00c55	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c59	50		 push	 eax
  00c5a	e8 00 00 00 00	 call	 _isalnum
  00c5f	83 c4 04	 add	 esp, 4
  00c62	85 c0		 test	 eax, eax
  00c64	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00c66	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c69	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00c6c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  00c6e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c71	83 c0 01	 add	 eax, 1
  00c74	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00c77	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00c79	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c7e	50		 push	 eax
  00c7f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c83	51		 push	 ecx
  00c84	e8 00 00 00 00	 call	 _ungetc
  00c89	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  00c8c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00c8f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00c92	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  00c9c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ca1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00ca3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00ca5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  00caf	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00cb4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00cb6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00cb8	5f		 pop	 edi
  00cb9	5e		 pop	 esi
  00cba	5b		 pop	 ebx
  00cbb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00cbe	33 cd		 xor	 ecx, ebp
  00cc0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00cc5	8b e5		 mov	 esp, ebp
  00cc7	5d		 pop	 ebp
  00cc8	c3		 ret	 0
  00cc9	8d 49 00	 npad	 3
$LN35@GetToken:
  00ccc	00 00 00 00	 DD	 $LN10@GetToken
  00cd0	00 00 00 00	 DD	 $LN19@GetToken
  00cd4	00 00 00 00	 DD	 $LN17@GetToken
  00cd8	00 00 00 00	 DD	 $LN14@GetToken
  00cdc	00 00 00 00	 DD	 $LN18@GetToken
  00ce0	00 00 00 00	 DD	 $LN16@GetToken
  00ce4	00 00 00 00	 DD	 $LN15@GetToken
  00ce8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00cec	00		 DB	 0
  00ced	01		 DB	 1
  00cee	07		 DB	 7
  00cef	07		 DB	 7
  00cf0	07		 DB	 7
  00cf1	07		 DB	 7
  00cf2	07		 DB	 7
  00cf3	07		 DB	 7
  00cf4	07		 DB	 7
  00cf5	07		 DB	 7
  00cf6	02		 DB	 2
  00cf7	03		 DB	 3
  00cf8	03		 DB	 3
  00cf9	07		 DB	 7
  00cfa	03		 DB	 3
  00cfb	03		 DB	 3
  00cfc	03		 DB	 3
  00cfd	03		 DB	 3
  00cfe	03		 DB	 3
  00cff	03		 DB	 3
  00d00	03		 DB	 3
  00d01	03		 DB	 3
  00d02	03		 DB	 3
  00d03	03		 DB	 3
  00d04	07		 DB	 7
  00d05	04		 DB	 4
  00d06	07		 DB	 7
  00d07	07		 DB	 7
  00d08	07		 DB	 7
  00d09	07		 DB	 7
  00d0a	07		 DB	 7
  00d0b	07		 DB	 7
  00d0c	07		 DB	 7
  00d0d	07		 DB	 7
  00d0e	07		 DB	 7
  00d0f	07		 DB	 7
  00d10	07		 DB	 7
  00d11	07		 DB	 7
  00d12	07		 DB	 7
  00d13	07		 DB	 7
  00d14	07		 DB	 7
  00d15	07		 DB	 7
  00d16	07		 DB	 7
  00d17	07		 DB	 7
  00d18	07		 DB	 7
  00d19	07		 DB	 7
  00d1a	07		 DB	 7
  00d1b	07		 DB	 7
  00d1c	07		 DB	 7
  00d1d	07		 DB	 7
  00d1e	07		 DB	 7
  00d1f	07		 DB	 7
  00d20	07		 DB	 7
  00d21	07		 DB	 7
  00d22	07		 DB	 7
  00d23	07		 DB	 7
  00d24	07		 DB	 7
  00d25	07		 DB	 7
  00d26	07		 DB	 7
  00d27	07		 DB	 7
  00d28	07		 DB	 7
  00d29	07		 DB	 7
  00d2a	07		 DB	 7
  00d2b	07		 DB	 7
  00d2c	07		 DB	 7
  00d2d	07		 DB	 7
  00d2e	07		 DB	 7
  00d2f	07		 DB	 7
  00d30	07		 DB	 7
  00d31	07		 DB	 7
  00d32	07		 DB	 7
  00d33	07		 DB	 7
  00d34	07		 DB	 7
  00d35	07		 DB	 7
  00d36	07		 DB	 7
  00d37	07		 DB	 7
  00d38	07		 DB	 7
  00d39	07		 DB	 7
  00d3a	07		 DB	 7
  00d3b	07		 DB	 7
  00d3c	07		 DB	 7
  00d3d	07		 DB	 7
  00d3e	07		 DB	 7
  00d3f	07		 DB	 7
  00d40	07		 DB	 7
  00d41	07		 DB	 7
  00d42	07		 DB	 7
  00d43	07		 DB	 7
  00d44	07		 DB	 7
  00d45	05		 DB	 5
  00d46	07		 DB	 7
  00d47	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?ProccessItemDrop@CItemDropManager@@QAE_NPAUOBJECTSTRUCT@@0@Z ; CItemDropManager::ProccessItemDrop
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterTopHitDamageUser
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
EXTRN	_rand:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\itemdropmanager.cpp
_TEXT	SEGMENT
tv66 = -104						; size = 4
_iRandExl$229076 = -36					; size = 4
_iAncOpt$229064 = -32					; size = 4
_iExlOpt$229063 = -28					; size = 4
_iSkill$229062 = -24					; size = 4
_iLuck$229061 = -20					; size = 4
_iOption$229060 = -16					; size = 4
_iLevel$229059 = -12					; size = 4
_i$229051 = -8						; size = 4
_this$ = -4						; size = 4
_lpMobObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?ProccessItemDrop@CItemDropManager@@QAE_NPAUOBJECTSTRUCT@@0@Z PROC ; CItemDropManager::ProccessItemDrop
; _this$ = ecx

; 214  : {

  00d50	55		 push	 ebp
  00d51	8b ec		 mov	 ebp, esp
  00d53	83 ec 68	 sub	 esp, 104		; 00000068H
  00d56	53		 push	 ebx
  00d57	56		 push	 esi
  00d58	57		 push	 edi
  00d59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 215  : 
; 216  : 	switch(lpMobObj->Class)

  00d5c	8b 45 08	 mov	 eax, DWORD PTR _lpMobObj$[ebp]
  00d5f	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00d66	89 4d 98	 mov	 DWORD PTR tv66[ebp], ecx
  00d69	83 7d 98 52	 cmp	 DWORD PTR tv66[ebp], 82	; 00000052H
  00d6d	7f 1a		 jg	 SHORT $LN28@ProccessIt
  00d6f	83 7d 98 52	 cmp	 DWORD PTR tv66[ebp], 82	; 00000052H
  00d73	74 28		 je	 SHORT $LN23@ProccessIt
  00d75	83 7d 98 35	 cmp	 DWORD PTR tv66[ebp], 53	; 00000035H
  00d79	74 22		 je	 SHORT $LN23@ProccessIt
  00d7b	83 7d 98 4d	 cmp	 DWORD PTR tv66[ebp], 77	; 0000004dH
  00d7f	7e 23		 jle	 SHORT $LN24@ProccessIt
  00d81	83 7d 98 50	 cmp	 DWORD PTR tv66[ebp], 80	; 00000050H
  00d85	7e 16		 jle	 SHORT $LN23@ProccessIt
  00d87	eb 1b		 jmp	 SHORT $LN24@ProccessIt
$LN28@ProccessIt:
  00d89	81 7d 98 ed 01
	00 00		 cmp	 DWORD PTR tv66[ebp], 493 ; 000001edH
  00d90	7c 12		 jl	 SHORT $LN24@ProccessIt
  00d92	81 7d 98 f6 01
	00 00		 cmp	 DWORD PTR tv66[ebp], 502 ; 000001f6H
  00d99	7e 02		 jle	 SHORT $LN23@ProccessIt
  00d9b	eb 07		 jmp	 SHORT $LN24@ProccessIt
$LN23@ProccessIt:

; 217  : 	{
; 218  : 	case 78:	//-> Golden Goblin
; 219  : 	case 53:	//-> Golden Titan
; 220  : 	case 79:	//-> Golden Dragon
; 221  : 	case 80:	//-> Golden Lizard
; 222  : 	case 82:	//-> Golden Tantalos
; 223  : 	case 502:	//-> Golden Rabbit
; 224  : 	case 493:	//-> Golden Dark Knight
; 225  : 	case 494:	//-> Golden Devil
; 226  : 	case 495:	//-> ???
; 227  : 	case 496:	//-> Golden Crust
; 228  : 	case 497:	//-> Golden Satiros
; 229  : 	case 498:	//-> Golden Twintail
; 230  : 	case 499:	//-> Golden Iron Knight
; 231  : 	case 500:	//-> Golden Neipin
; 232  : 	case 501:	//-> Golden Great Dragon
; 233  : 		{
; 234  : 			return false;

  00d9d	32 c0		 xor	 al, al
  00d9f	e9 a6 03 00 00	 jmp	 $LN26@ProccessIt
$LN24@ProccessIt:

; 235  : 		}
; 236  : 		break;
; 237  : 	}
; 238  : 
; 239  : 	//this->DropAncent(lpTargetObj->m_Index, lpMobObj->m_Index);
; 240  : 
; 241  : 	for (int i=0; i < this->DropCount; i++)

  00da4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$229051[ebp], 0
  00dab	eb 09		 jmp	 SHORT $LN22@ProccessIt
$LN21@ProccessIt:
  00dad	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00db0	83 c0 01	 add	 eax, 1
  00db3	89 45 f8	 mov	 DWORD PTR _i$229051[ebp], eax
$LN22@ProccessIt:
  00db6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00db9	8b 4d f8	 mov	 ecx, DWORD PTR _i$229051[ebp]
  00dbc	3b 88 98 3a 00
	00		 cmp	 ecx, DWORD PTR [eax+15000]
  00dc2	0f 8d 80 03 00
	00		 jge	 $LN20@ProccessIt

; 242  : 	{
; 243  : 		if ( lpMobObj->MapNumber == this->Drop[i].MonsterMap || this->Drop[i].MonsterMap == -1 )

  00dc8	8b 45 08	 mov	 eax, DWORD PTR _lpMobObj$[ebp]
  00dcb	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00dd2	8b 55 f8	 mov	 edx, DWORD PTR _i$229051[ebp]
  00dd5	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00dd8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ddb	3b 8c 10 e0 3a
	00 00		 cmp	 ecx, DWORD PTR [eax+edx+15072]
  00de2	74 17		 je	 SHORT $LN18@ProccessIt
  00de4	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00de7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00dea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ded	83 bc 01 e0 3a
	00 00 ff	 cmp	 DWORD PTR [ecx+eax+15072], -1
  00df5	0f 85 48 03 00
	00		 jne	 $LN19@ProccessIt
$LN18@ProccessIt:

; 244  : 		{
; 245  : 			if ( lpMobObj->Level >= this->Drop[i].MonsterMinLevel && lpMobObj->Level <= this->Drop[i].MonsterMaxLevel )

  00dfb	8b 45 08	 mov	 eax, DWORD PTR _lpMobObj$[ebp]
  00dfe	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00e05	8b 55 f8	 mov	 edx, DWORD PTR _i$229051[ebp]
  00e08	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00e0b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e0e	3b 8c 10 d8 3a
	00 00		 cmp	 ecx, DWORD PTR [eax+edx+15064]
  00e15	0f 8c 28 03 00
	00		 jl	 $LN19@ProccessIt
  00e1b	8b 45 08	 mov	 eax, DWORD PTR _lpMobObj$[ebp]
  00e1e	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00e25	8b 55 f8	 mov	 edx, DWORD PTR _i$229051[ebp]
  00e28	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00e2b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e2e	3b 8c 10 dc 3a
	00 00		 cmp	 ecx, DWORD PTR [eax+edx+15068]
  00e35	0f 8f 08 03 00
	00		 jg	 $LN19@ProccessIt

; 246  : 			{
; 247  : 				if ( (rand()%10000) < this->Drop[i].ItemDropRate )

  00e3b	e8 00 00 00 00	 call	 _rand
  00e40	99		 cdq
  00e41	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00e46	f7 f9		 idiv	 ecx
  00e48	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00e4b	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00e4e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e51	3b 94 01 e4 3a
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+15076]
  00e58	0f 8d e5 02 00
	00		 jge	 $LN19@ProccessIt

; 248  : 				{
; 249  : 					int iLevel	= 0;

  00e5e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iLevel$229059[ebp], 0

; 250  : 					int iOption	= 0;

  00e65	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iOption$229060[ebp], 0

; 251  : 					int iLuck	= 0;

  00e6c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iLuck$229061[ebp], 0

; 252  : 					int iSkill	= 0;

  00e73	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iSkill$229062[ebp], 0

; 253  : 					int iExlOpt	= 0;

  00e7a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iExlOpt$229063[ebp], 0

; 254  : 					int iAncOpt	= 0;

  00e81	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iAncOpt$229064[ebp], 0

; 255  : 					
; 256  : 					if( this->Drop[i].MaxLevel == this->Drop[i].MinLevel )

  00e88	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00e8b	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00e8e	8b 4d f8	 mov	 ecx, DWORD PTR _i$229051[ebp]
  00e91	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00e94	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e97	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00e9a	8b 84 02 a8 3a
	00 00		 mov	 eax, DWORD PTR [edx+eax+15016]
  00ea1	3b 84 0e a4 3a
	00 00		 cmp	 eax, DWORD PTR [esi+ecx+15012]
  00ea8	75 15		 jne	 SHORT $LN15@ProccessIt

; 257  : 					{
; 258  : 						iLevel = this->Drop[i].MinLevel;

  00eaa	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00ead	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00eb0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00eb3	8b 94 01 a4 3a
	00 00		 mov	 edx, DWORD PTR [ecx+eax+15012]
  00eba	89 55 f4	 mov	 DWORD PTR _iLevel$229059[ebp], edx

; 259  : 					}
; 260  : 					else

  00ebd	eb 3e		 jmp	 SHORT $LN14@ProccessIt
$LN15@ProccessIt:

; 261  : 					{
; 262  : 						iLevel = this->Drop[i].MinLevel + (rand() % (this->Drop[i].MaxLevel - this->Drop[i].MinLevel + 1));

  00ebf	8b 75 f8	 mov	 esi, DWORD PTR _i$229051[ebp]
  00ec2	6b f6 4c	 imul	 esi, 76			; 0000004cH
  00ec5	e8 00 00 00 00	 call	 _rand
  00eca	8b 4d f8	 mov	 ecx, DWORD PTR _i$229051[ebp]
  00ecd	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00ed0	8b 55 f8	 mov	 edx, DWORD PTR _i$229051[ebp]
  00ed3	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00ed6	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00ed9	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
  00edc	8b 8c 0f a8 3a
	00 00		 mov	 ecx, DWORD PTR [edi+ecx+15016]
  00ee3	2b 8c 13 a4 3a
	00 00		 sub	 ecx, DWORD PTR [ebx+edx+15012]
  00eea	83 c1 01	 add	 ecx, 1
  00eed	99		 cdq
  00eee	f7 f9		 idiv	 ecx
  00ef0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ef3	03 94 30 a4 3a
	00 00		 add	 edx, DWORD PTR [eax+esi+15012]
  00efa	89 55 f4	 mov	 DWORD PTR _iLevel$229059[ebp], edx
$LN14@ProccessIt:

; 263  : 					}	
; 264  : 
; 265  : 					if( this->Drop[i].MaxOption != 0 )

  00efd	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00f00	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00f03	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f06	83 bc 01 b4 3a
	00 00 00	 cmp	 DWORD PTR [ecx+eax+15028], 0
  00f0e	74 3b		 je	 SHORT $LN13@ProccessIt

; 266  : 					{
; 267  : 						if( rand() % 100 < this->Drop[i].OptionRate )

  00f10	e8 00 00 00 00	 call	 _rand
  00f15	99		 cdq
  00f16	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00f1b	f7 f9		 idiv	 ecx
  00f1d	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00f20	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00f23	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f26	3b 94 01 b0 3a
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+15024]
  00f2d	7d 1c		 jge	 SHORT $LN13@ProccessIt

; 268  : 						{
; 269  : 							iOption = rand() % this->Drop[i].MaxOption + 1;

  00f2f	e8 00 00 00 00	 call	 _rand
  00f34	8b 4d f8	 mov	 ecx, DWORD PTR _i$229051[ebp]
  00f37	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00f3a	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00f3d	99		 cdq
  00f3e	f7 bc 0e b4 3a
	00 00		 idiv	 DWORD PTR [esi+ecx+15028]
  00f45	83 c2 01	 add	 edx, 1
  00f48	89 55 f0	 mov	 DWORD PTR _iOption$229060[ebp], edx
$LN13@ProccessIt:

; 270  : 						}
; 271  : 					}
; 272  : 
; 273  : 					if( this->Drop[i].LuckOption == 1 )

  00f4b	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00f4e	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00f51	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f54	83 bc 01 bc 3a
	00 00 01	 cmp	 DWORD PTR [ecx+eax+15036], 1
  00f5c	75 26		 jne	 SHORT $LN11@ProccessIt

; 274  : 					{
; 275  : 						if( rand() % 100 < this->Drop[i].LuckRate )

  00f5e	e8 00 00 00 00	 call	 _rand
  00f63	99		 cdq
  00f64	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00f69	f7 f9		 idiv	 ecx
  00f6b	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00f6e	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00f71	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f74	3b 94 01 b8 3a
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+15032]
  00f7b	7d 07		 jge	 SHORT $LN11@ProccessIt

; 276  : 						{
; 277  : 							iLuck = 1;

  00f7d	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _iLuck$229061[ebp], 1
$LN11@ProccessIt:

; 278  : 						}
; 279  : 					}
; 280  : 
; 281  : 					if( this->Drop[i].SkillOption == 1 )

  00f84	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00f87	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00f8a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f8d	83 bc 01 c4 3a
	00 00 01	 cmp	 DWORD PTR [ecx+eax+15044], 1
  00f95	75 26		 jne	 SHORT $LN9@ProccessIt

; 282  : 					{
; 283  : 						if( rand() % 100 < this->Drop[i].SkillRate )

  00f97	e8 00 00 00 00	 call	 _rand
  00f9c	99		 cdq
  00f9d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00fa2	f7 f9		 idiv	 ecx
  00fa4	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00fa7	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00faa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fad	3b 94 01 c0 3a
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+15040]
  00fb4	7d 07		 jge	 SHORT $LN9@ProccessIt

; 284  : 						{
; 285  : 							iSkill = 1;

  00fb6	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _iSkill$229062[ebp], 1
$LN9@ProccessIt:

; 286  : 						}
; 287  : 					}
; 288  : 
; 289  : 					if(this->Drop[i].ExlOption)

  00fbd	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00fc0	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00fc3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fc6	83 bc 01 cc 3a
	00 00 00	 cmp	 DWORD PTR [ecx+eax+15052], 0
  00fce	74 7b		 je	 SHORT $LN7@ProccessIt

; 290  : 					{
; 291  : 						if( rand() % 100 < this->Drop[i].ExlRate )

  00fd0	e8 00 00 00 00	 call	 _rand
  00fd5	99		 cdq
  00fd6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00fdb	f7 f9		 idiv	 ecx
  00fdd	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  00fe0	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00fe3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fe6	3b 94 01 c8 3a
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+15048]
  00fed	7d 5c		 jge	 SHORT $LN7@ProccessIt

; 292  : 						{
; 293  : 							if(g_ExLicense.CheckUser(eExUB::masonX))

  00fef	6a 3c		 push	 60			; 0000003cH
  00ff1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00ff6	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00ffb	0f b6 c0	 movzx	 eax, al
  00ffe	85 c0		 test	 eax, eax
  01000	74 2d		 je	 SHORT $LN5@ProccessIt

; 294  : 							{
; 295  : 								int iRandExl = rand() % this->Drop[i].ExlOption + 1;

  01002	e8 00 00 00 00	 call	 _rand
  01007	8b 4d f8	 mov	 ecx, DWORD PTR _i$229051[ebp]
  0100a	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0100d	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01010	99		 cdq
  01011	f7 bc 0e cc 3a
	00 00		 idiv	 DWORD PTR [esi+ecx+15052]
  01018	83 c2 01	 add	 edx, 1
  0101b	89 55 dc	 mov	 DWORD PTR _iRandExl$229076[ebp], edx

; 296  : 
; 297  : 								iExlOpt = GenExcOpt(iRandExl);

  0101e	8b 45 dc	 mov	 eax, DWORD PTR _iRandExl$229076[ebp]
  01021	50		 push	 eax
  01022	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  01027	83 c4 04	 add	 esp, 4
  0102a	89 45 e4	 mov	 DWORD PTR _iExlOpt$229063[ebp], eax

; 298  : 							}
; 299  : 							else

  0102d	eb 1c		 jmp	 SHORT $LN7@ProccessIt
$LN5@ProccessIt:

; 300  : 							{
; 301  : 								iExlOpt = GenExcOpt(this->Drop[i].ExlOption);

  0102f	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  01032	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01038	8b 94 01 cc 3a
	00 00		 mov	 edx, DWORD PTR [ecx+eax+15052]
  0103f	52		 push	 edx
  01040	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  01045	83 c4 04	 add	 esp, 4
  01048	89 45 e4	 mov	 DWORD PTR _iExlOpt$229063[ebp], eax
$LN7@ProccessIt:

; 302  : 							}
; 303  : 						}
; 304  : 					}
; 305  : 
; 306  : 					if(this->Drop[i].AncOption == 5 || this->Drop[i].AncOption == 10)

  0104b	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  0104e	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01054	83 bc 01 d4 3a
	00 00 05	 cmp	 DWORD PTR [ecx+eax+15060], 5
  0105c	74 13		 je	 SHORT $LN2@ProccessIt
  0105e	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  01061	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01067	83 bc 01 d4 3a
	00 00 0a	 cmp	 DWORD PTR [ecx+eax+15060], 10 ; 0000000aH
  0106f	75 32		 jne	 SHORT $LN3@ProccessIt
$LN2@ProccessIt:

; 307  : 					{
; 308  : 						if( rand() % 100 < this->Drop[i].AncRate )

  01071	e8 00 00 00 00	 call	 _rand
  01076	99		 cdq
  01077	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0107c	f7 f9		 idiv	 ecx
  0107e	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  01081	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01087	3b 94 01 d0 3a
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+15056]
  0108e	7d 13		 jge	 SHORT $LN3@ProccessIt

; 309  : 						{
; 310  : 							iAncOpt = this->Drop[i].AncOption;

  01090	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  01093	6b c0 4c	 imul	 eax, 76			; 0000004cH
  01096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01099	8b 94 01 d4 3a
	00 00		 mov	 edx, DWORD PTR [ecx+eax+15060]
  010a0	89 55 e0	 mov	 DWORD PTR _iAncOpt$229064[ebp], edx
$LN3@ProccessIt:

; 311  : 						}
; 312  : 					}
; 313  : 
; 314  : 					this->iUser[lpMobObj->m_Index] = true;

  010a3	8b 45 08	 mov	 eax, DWORD PTR _lpMobObj$[ebp]
  010a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  010a8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  010ab	c6 04 0a 01	 mov	 BYTE PTR [edx+ecx], 1

; 315  : 
; 316  : 					ItemSerialCreateSend(lpMobObj->m_Index,lpMobObj->MapNumber,lpMobObj->X,lpMobObj->Y,ITEMGET(this->Drop[i].Type,this->Drop[i].Index),iLevel,this->Drop[i].Dur,iSkill,iLuck,iOption,gObjMonsterTopHitDamageUser(lpMobObj),iExlOpt,iAncOpt);	

  010af	0f b6 45 e0	 movzx	 eax, BYTE PTR _iAncOpt$229064[ebp]
  010b3	50		 push	 eax
  010b4	0f b6 4d e4	 movzx	 ecx, BYTE PTR _iExlOpt$229063[ebp]
  010b8	51		 push	 ecx
  010b9	8b 55 08	 mov	 edx, DWORD PTR _lpMobObj$[ebp]
  010bc	52		 push	 edx
  010bd	e8 00 00 00 00	 call	 ?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterTopHitDamageUser
  010c2	83 c4 04	 add	 esp, 4
  010c5	50		 push	 eax
  010c6	0f b6 45 f0	 movzx	 eax, BYTE PTR _iOption$229060[ebp]
  010ca	50		 push	 eax
  010cb	0f b6 4d ec	 movzx	 ecx, BYTE PTR _iLuck$229061[ebp]
  010cf	51		 push	 ecx
  010d0	0f b6 55 e8	 movzx	 edx, BYTE PTR _iSkill$229062[ebp]
  010d4	52		 push	 edx
  010d5	8b 45 f8	 mov	 eax, DWORD PTR _i$229051[ebp]
  010d8	6b c0 4c	 imul	 eax, 76			; 0000004cH
  010db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010de	0f b6 94 01 ac
	3a 00 00	 movzx	 edx, BYTE PTR [ecx+eax+15020]
  010e6	52		 push	 edx
  010e7	0f b6 45 f4	 movzx	 eax, BYTE PTR _iLevel$229059[ebp]
  010eb	50		 push	 eax
  010ec	8b 4d f8	 mov	 ecx, DWORD PTR _i$229051[ebp]
  010ef	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  010f2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  010f5	8b 84 0a 9c 3a
	00 00		 mov	 eax, DWORD PTR [edx+ecx+15004]
  010fc	c1 e0 09	 shl	 eax, 9
  010ff	8b 4d f8	 mov	 ecx, DWORD PTR _i$229051[ebp]
  01102	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  01105	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01108	03 84 0a a0 3a
	00 00		 add	 eax, DWORD PTR [edx+ecx+15008]
  0110f	50		 push	 eax
  01110	8b 45 08	 mov	 eax, DWORD PTR _lpMobObj$[ebp]
  01113	0f b6 88 46 01
	00 00		 movzx	 ecx, BYTE PTR [eax+326]
  0111a	51		 push	 ecx
  0111b	8b 55 08	 mov	 edx, DWORD PTR _lpMobObj$[ebp]
  0111e	0f b6 82 44 01
	00 00		 movzx	 eax, BYTE PTR [edx+324]
  01125	50		 push	 eax
  01126	8b 4d 08	 mov	 ecx, DWORD PTR _lpMobObj$[ebp]
  01129	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  01130	52		 push	 edx
  01131	8b 45 08	 mov	 eax, DWORD PTR _lpMobObj$[ebp]
  01134	8b 08		 mov	 ecx, DWORD PTR [eax]
  01136	51		 push	 ecx
  01137	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  0113c	83 c4 34	 add	 esp, 52			; 00000034H

; 317  : 
; 318  : 					return true;

  0113f	b0 01		 mov	 al, 1
  01141	eb 07		 jmp	 SHORT $LN26@ProccessIt
$LN19@ProccessIt:

; 319  : 				}
; 320  : 			}
; 321  : 		}
; 322  : 	}

  01143	e9 65 fc ff ff	 jmp	 $LN21@ProccessIt
$LN20@ProccessIt:

; 323  : 
; 324  : 	return false;

  01148	32 c0		 xor	 al, al
$LN26@ProccessIt:

; 325  : }

  0114a	5f		 pop	 edi
  0114b	5e		 pop	 esi
  0114c	5b		 pop	 ebx
  0114d	8b e5		 mov	 esp, ebp
  0114f	5d		 pop	 ebp
  01150	c2 08 00	 ret	 8
?ProccessItemDrop@CItemDropManager@@QAE_NPAUOBJECTSTRUCT@@0@Z ENDP ; CItemDropManager::ProccessItemDrop
_TEXT	ENDS
PUBLIC	??_C@_0CF@KBOLHJLA@?$FLDropBlock?$FN?5Item?5?$CFd?5has?5been?5blo@ ; `string'
PUBLIC	?BlockItemDrop@CItemDropManager@@QAE_NHHH@Z	; CItemDropManager::BlockItemDrop
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0CF@KBOLHJLA@?$FLDropBlock?$FN?5Item?5?$CFd?5has?5been?5blo@
CONST	SEGMENT
??_C@_0CF@KBOLHJLA@?$FLDropBlock?$FN?5Item?5?$CFd?5has?5been?5blo@ DB '[D'
	DB	'ropBlock] Item %d has been blocked', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$229101 = -16						; size = 4
_i$229096 = -12						; size = 4
_i$229090 = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_ItemID$ = 12						; size = 4
_MapNumber$ = 16					; size = 4
?BlockItemDrop@CItemDropManager@@QAE_NHHH@Z PROC	; CItemDropManager::BlockItemDrop
; _this$ = ecx

; 328  : {

  01160	55		 push	 ebp
  01161	8b ec		 mov	 ebp, esp
  01163	83 ec 50	 sub	 esp, 80			; 00000050H
  01166	53		 push	 ebx
  01167	56		 push	 esi
  01168	57		 push	 edi
  01169	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  : 	if( MapNumber >= 0 && MapNumber <= MAX_NUMBER_MAP )

  0116c	83 7d 10 00	 cmp	 DWORD PTR _MapNumber$[ebp], 0
  01170	0f 8c 68 01 00
	00		 jl	 $LN16@BlockItemD
  01176	83 7d 10 5a	 cmp	 DWORD PTR _MapNumber$[ebp], 90 ; 0000005aH
  0117a	0f 8f 5e 01 00
	00		 jg	 $LN16@BlockItemD

; 330  : 	{
; 331  : 		if(g_ExLicense.CheckUser(Local) || g_ExLicense.CheckUser(ulasevich) || g_ExLicense.CheckUser(ulasevich2))

  01180	6a 00		 push	 0
  01182	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01187	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0118c	0f b6 c0	 movzx	 eax, al
  0118f	85 c0		 test	 eax, eax
  01191	75 26		 jne	 SHORT $LN14@BlockItemD
  01193	6a 17		 push	 23			; 00000017H
  01195	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0119a	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0119f	0f b6 c0	 movzx	 eax, al
  011a2	85 c0		 test	 eax, eax
  011a4	75 13		 jne	 SHORT $LN14@BlockItemD
  011a6	6a 24		 push	 36			; 00000024H
  011a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  011ad	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  011b2	0f b6 c0	 movzx	 eax, al
  011b5	85 c0		 test	 eax, eax
  011b7	74 66		 je	 SHORT $LN15@BlockItemD
$LN14@BlockItemD:

; 332  : 		{
; 333  : 			for(int i = 0; i< this->MapBlockCount; i++)

  011b9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$229090[ebp], 0
  011c0	eb 09		 jmp	 SHORT $LN13@BlockItemD
$LN12@BlockItemD:
  011c2	8b 45 f8	 mov	 eax, DWORD PTR _i$229090[ebp]
  011c5	83 c0 01	 add	 eax, 1
  011c8	89 45 f8	 mov	 DWORD PTR _i$229090[ebp], eax
$LN13@BlockItemD:
  011cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011ce	8b 4d f8	 mov	 ecx, DWORD PTR _i$229090[ebp]
  011d1	3b 88 c0 82 01
	00		 cmp	 ecx, DWORD PTR [eax+99008]
  011d7	7d 46		 jge	 SHORT $LN15@BlockItemD

; 334  : 			{
; 335  : 				if(this->MapBlockDrop[i].Map == MapNumber && ItemID == ITEMGET(this->MapBlockDrop[i].Type,this->MapBlockDrop[i].Index))

  011d9	8b 45 f8	 mov	 eax, DWORD PTR _i$229090[ebp]
  011dc	6b c0 0c	 imul	 eax, 12			; 0000000cH
  011df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011e2	8b 94 01 c4 82
	01 00		 mov	 edx, DWORD PTR [ecx+eax+99012]
  011e9	3b 55 10	 cmp	 edx, DWORD PTR _MapNumber$[ebp]
  011ec	75 2f		 jne	 SHORT $LN10@BlockItemD
  011ee	8b 45 f8	 mov	 eax, DWORD PTR _i$229090[ebp]
  011f1	6b c0 0c	 imul	 eax, 12			; 0000000cH
  011f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011f7	8b 94 01 c8 82
	01 00		 mov	 edx, DWORD PTR [ecx+eax+99016]
  011fe	c1 e2 09	 shl	 edx, 9
  01201	8b 45 f8	 mov	 eax, DWORD PTR _i$229090[ebp]
  01204	6b c0 0c	 imul	 eax, 12			; 0000000cH
  01207	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0120a	03 94 01 cc 82
	01 00		 add	 edx, DWORD PTR [ecx+eax+99020]
  01211	39 55 0c	 cmp	 DWORD PTR _ItemID$[ebp], edx
  01214	75 07		 jne	 SHORT $LN10@BlockItemD

; 336  : 				{
; 337  : 					return false;

  01216	32 c0		 xor	 al, al
  01218	e9 c3 00 00 00	 jmp	 $LN17@BlockItemD
$LN10@BlockItemD:

; 338  : 				}
; 339  : 			}

  0121d	eb a3		 jmp	 SHORT $LN12@BlockItemD
$LN15@BlockItemD:

; 340  : 		}
; 341  : 
; 342  : 		if(this->iUser[aIndex] == true)

  0121f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01222	03 45 08	 add	 eax, DWORD PTR _aIndex$[ebp]
  01225	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01228	83 f9 01	 cmp	 ecx, 1
  0122b	75 57		 jne	 SHORT $LN9@BlockItemD

; 343  : 		{
; 344  : 			this->iUser[aIndex] = false;

  0122d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01230	03 45 08	 add	 eax, DWORD PTR _aIndex$[ebp]
  01233	c6 00 00	 mov	 BYTE PTR [eax], 0

; 345  : 			for(int i = 0; i< this->DropCount; i++)

  01236	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$229096[ebp], 0
  0123d	eb 09		 jmp	 SHORT $LN8@BlockItemD
$LN7@BlockItemD:
  0123f	8b 45 f4	 mov	 eax, DWORD PTR _i$229096[ebp]
  01242	83 c0 01	 add	 eax, 1
  01245	89 45 f4	 mov	 DWORD PTR _i$229096[ebp], eax
$LN8@BlockItemD:
  01248	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0124b	8b 4d f4	 mov	 ecx, DWORD PTR _i$229096[ebp]
  0124e	3b 88 98 3a 00
	00		 cmp	 ecx, DWORD PTR [eax+15000]
  01254	7d 2e		 jge	 SHORT $LN9@BlockItemD

; 346  : 			{
; 347  : 				if(ItemID == ITEMGET(this->Drop[i].Type,this->Drop[i].Index) )

  01256	8b 45 f4	 mov	 eax, DWORD PTR _i$229096[ebp]
  01259	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0125c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0125f	8b 94 01 9c 3a
	00 00		 mov	 edx, DWORD PTR [ecx+eax+15004]
  01266	c1 e2 09	 shl	 edx, 9
  01269	8b 45 f4	 mov	 eax, DWORD PTR _i$229096[ebp]
  0126c	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0126f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01272	03 94 01 a0 3a
	00 00		 add	 edx, DWORD PTR [ecx+eax+15008]
  01279	39 55 0c	 cmp	 DWORD PTR _ItemID$[ebp], edx
  0127c	75 04		 jne	 SHORT $LN5@BlockItemD

; 348  : 				{
; 349  : 					return true;

  0127e	b0 01		 mov	 al, 1
  01280	eb 5e		 jmp	 SHORT $LN17@BlockItemD
$LN5@BlockItemD:

; 350  : 				}
; 351  : 			}

  01282	eb bb		 jmp	 SHORT $LN7@BlockItemD
$LN9@BlockItemD:

; 352  : 		}
; 353  : 
; 354  : 		for(int i = 0; i< this->BlockCount; i++)

  01284	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$229101[ebp], 0
  0128b	eb 09		 jmp	 SHORT $LN4@BlockItemD
$LN3@BlockItemD:
  0128d	8b 45 f0	 mov	 eax, DWORD PTR _i$229101[ebp]
  01290	83 c0 01	 add	 eax, 1
  01293	89 45 f0	 mov	 DWORD PTR _i$229101[ebp], eax
$LN4@BlockItemD:
  01296	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01299	8b 4d f0	 mov	 ecx, DWORD PTR _i$229101[ebp]
  0129c	3b 88 7c 63 01
	00		 cmp	 ecx, DWORD PTR [eax+91004]
  012a2	7d 3a		 jge	 SHORT $LN16@BlockItemD

; 355  : 		{
; 356  : 			if(ItemID == ITEMGET(this->Block[i].Type,this->Block[i].Index))

  012a4	8b 45 f0	 mov	 eax, DWORD PTR _i$229101[ebp]
  012a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012aa	8b 94 c1 80 63
	01 00		 mov	 edx, DWORD PTR [ecx+eax*8+91008]
  012b1	c1 e2 09	 shl	 edx, 9
  012b4	8b 45 f0	 mov	 eax, DWORD PTR _i$229101[ebp]
  012b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012ba	03 94 c1 84 63
	01 00		 add	 edx, DWORD PTR [ecx+eax*8+91012]
  012c1	39 55 0c	 cmp	 DWORD PTR _ItemID$[ebp], edx
  012c4	75 16		 jne	 SHORT $LN1@BlockItemD

; 357  : 			{
; 358  : 				LogAddTD("[DropBlock] Item %d has been blocked", ItemID);

  012c6	8b 45 0c	 mov	 eax, DWORD PTR _ItemID$[ebp]
  012c9	50		 push	 eax
  012ca	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KBOLHJLA@?$FLDropBlock?$FN?5Item?5?$CFd?5has?5been?5blo@
  012cf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  012d5	83 c4 08	 add	 esp, 8

; 359  : 				return false;

  012d8	32 c0		 xor	 al, al
  012da	eb 04		 jmp	 SHORT $LN17@BlockItemD
$LN1@BlockItemD:

; 360  : 			}
; 361  : 		}

  012dc	eb af		 jmp	 SHORT $LN3@BlockItemD
$LN16@BlockItemD:

; 362  : 	}
; 363  : 
; 364  : 	//for(int i = 0; i < this->m_MapDropRate.size(); i++)
; 365  : 	//{
; 366  : 	//	if(this->m_MapDropRate[i].MapNum == MapNumber)
; 367  : 	//	{
; 368  : 	//		if(this->m_MapDropRate[i].Rate < rand()%100)
; 369  : 	//		{
; 370  : 	//			return false;
; 371  : 	//		}
; 372  : 	//	}
; 373  : 	//}
; 374  : 
; 375  : 	return true;

  012de	b0 01		 mov	 al, 1
$LN17@BlockItemD:

; 376  : }

  012e0	5f		 pop	 edi
  012e1	5e		 pop	 esi
  012e2	5b		 pop	 ebx
  012e3	8b e5		 mov	 esp, ebp
  012e5	5d		 pop	 ebp
  012e6	c2 0c 00	 ret	 12			; 0000000cH
?BlockItemDrop@CItemDropManager@@QAE_NHHH@Z ENDP	; CItemDropManager::BlockItemDrop
_TEXT	ENDS
PUBLIC	?DropAncent@CItemDropManager@@QAEXHH@Z		; CItemDropManager::DropAncent
EXTRN	?GenSetOption@CSetItemOption@@QAEHH@Z:PROC	; CSetItemOption::GenSetOption
EXTRN	?IsSetItem@CSetItemOption@@QAEHH@Z:PROC		; CSetItemOption::IsSetItem
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv217 = -132						; size = 4
tv139 = -132						; size = 4
tv134 = -132						; size = 4
_Option3$229140 = -64					; size = 4
_Option2$229139 = -60					; size = 4
_Option1$229138 = -56					; size = 4
_optionc$229137 = -52					; size = 4
_option3rand$229136 = -48				; size = 4
_option2rand$229135 = -44				; size = 4
_option1rand$229134 = -40				; size = 4
_SetOption$229131 = -36					; size = 4
_itemnum$229129 = -32					; size = 4
_iRand$229128 = -28					; size = 4
_icount$229126 = -24					; size = 4
_lpDrop$229121 = -20					; size = 4
_i$229117 = -16						; size = 4
_lpMonster$ = -12					; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_iMobIndex$ = 12					; size = 4
?DropAncent@CItemDropManager@@QAEXHH@Z PROC		; CItemDropManager::DropAncent
; _this$ = ecx

; 379  : {

  012f0	55		 push	 ebp
  012f1	8b ec		 mov	 ebp, esp
  012f3	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  012f9	53		 push	 ebx
  012fa	56		 push	 esi
  012fb	57		 push	 edi
  012fc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	if( //!g_ExLicense.CheckUser(eExUB::Local)	&& 
; 381  : 		!g_ExLicense.CheckUser(eExUB::Gredy)	&&
; 382  : 		!g_ExLicense.CheckUser(eExUB::Gredy2)	&& 
; 383  : 		!g_ExLicense.CheckUser(eExUB::GredyLocal) &&
; 384  : 		!g_ExLicense.CheckUser(eExUB::MedoniAndrei) &&
; 385  : 		!g_ExLicense.CheckUser(eExUB::EpicMU) &&
; 386  : 		!g_ExLicense.CheckUser(eExUB::masonX) &&
; 387  : 		!g_ExLicense.CheckUser(eExUB::MedoniAndrei))

  012ff	6a 20		 push	 32			; 00000020H
  01301	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01306	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0130b	0f b6 c0	 movzx	 eax, al
  0130e	85 c0		 test	 eax, eax
  01310	75 77		 jne	 SHORT $LN24@DropAncent
  01312	6a 22		 push	 34			; 00000022H
  01314	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01319	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0131e	0f b6 c0	 movzx	 eax, al
  01321	85 c0		 test	 eax, eax
  01323	75 64		 jne	 SHORT $LN24@DropAncent
  01325	6a 21		 push	 33			; 00000021H
  01327	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0132c	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01331	0f b6 c0	 movzx	 eax, al
  01334	85 c0		 test	 eax, eax
  01336	75 51		 jne	 SHORT $LN24@DropAncent
  01338	6a 32		 push	 50			; 00000032H
  0133a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0133f	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01344	0f b6 c0	 movzx	 eax, al
  01347	85 c0		 test	 eax, eax
  01349	75 3e		 jne	 SHORT $LN24@DropAncent
  0134b	6a 3b		 push	 59			; 0000003bH
  0134d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01352	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  01357	0f b6 c0	 movzx	 eax, al
  0135a	85 c0		 test	 eax, eax
  0135c	75 2b		 jne	 SHORT $LN24@DropAncent
  0135e	6a 3c		 push	 60			; 0000003cH
  01360	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01365	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0136a	0f b6 c0	 movzx	 eax, al
  0136d	85 c0		 test	 eax, eax
  0136f	75 18		 jne	 SHORT $LN24@DropAncent
  01371	6a 32		 push	 50			; 00000032H
  01373	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  01378	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0137d	0f b6 c0	 movzx	 eax, al
  01380	85 c0		 test	 eax, eax
  01382	75 05		 jne	 SHORT $LN24@DropAncent

; 388  : 	{
; 389  : 		return;

  01384	e9 d8 02 00 00	 jmp	 $LN25@DropAncent
$LN24@DropAncent:

; 390  : 	}
; 391  : 
; 392  : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(iMobIndex))

  01389	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  0138d	7d 0c		 jge	 SHORT $LN27@DropAncent
  0138f	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv134[ebp], 0
  01399	eb 12		 jmp	 SHORT $LN28@DropAncent
$LN27@DropAncent:
  0139b	33 c0		 xor	 eax, eax
  0139d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  013a4	0f 9e c0	 setle	 al
  013a7	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv134[ebp], eax
$LN28@DropAncent:
  013ad	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv134[ebp], 0
  013b4	74 2d		 je	 SHORT $LN22@DropAncent
  013b6	83 7d 0c 00	 cmp	 DWORD PTR _iMobIndex$[ebp], 0
  013ba	7d 0c		 jge	 SHORT $LN29@DropAncent
  013bc	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv139[ebp], 0
  013c6	eb 12		 jmp	 SHORT $LN30@DropAncent
$LN29@DropAncent:
  013c8	33 c0		 xor	 eax, eax
  013ca	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _iMobIndex$[ebp], 14999 ; 00003a97H
  013d1	0f 9e c0	 setle	 al
  013d4	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
$LN30@DropAncent:
  013da	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv139[ebp], 0
  013e1	75 05		 jne	 SHORT $LN23@DropAncent
$LN22@DropAncent:

; 393  : 	{
; 394  : 		return;

  013e3	e9 79 02 00 00	 jmp	 $LN25@DropAncent
$LN23@DropAncent:

; 395  : 	}
; 396  : 
; 397  : 	LPOBJ lpUser = &gObj[aIndex];

  013e8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  013eb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  013f1	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  013f7	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 398  : 	LPOBJ lpMonster = &gObj[iMobIndex];

  013fa	8b 45 0c	 mov	 eax, DWORD PTR _iMobIndex$[ebp]
  013fd	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01403	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01409	89 45 f4	 mov	 DWORD PTR _lpMonster$[ebp], eax

; 399  : 	
; 400  : 	for(int i = 0; i < this->iAncCount; i++)

  0140c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$229117[ebp], 0
  01413	eb 09		 jmp	 SHORT $LN21@DropAncent
$LN20@DropAncent:
  01415	8b 45 f0	 mov	 eax, DWORD PTR _i$229117[ebp]
  01418	83 c0 01	 add	 eax, 1
  0141b	89 45 f0	 mov	 DWORD PTR _i$229117[ebp], eax
$LN21@DropAncent:
  0141e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01421	8b 4d f0	 mov	 ecx, DWORD PTR _i$229117[ebp]
  01424	3b 88 e4 0f 04
	00		 cmp	 ecx, DWORD PTR [eax+266212]
  0142a	0f 8d 31 02 00
	00		 jge	 $LN25@DropAncent

; 401  : 	{
; 402  : 		ANCENT_GROUP_DATA* lpDrop = &this->m_AncData[i];

  01430	8b 45 f0	 mov	 eax, DWORD PTR _i$229117[ebp]
  01433	69 c0 10 06 00
	00		 imul	 eax, 1552		; 00000610H
  01439	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0143c	8d 94 01 a4 b1
	01 00		 lea	 edx, DWORD PTR [ecx+eax+111012]
  01443	89 55 ec	 mov	 DWORD PTR _lpDrop$229121[ebp], edx

; 403  : 
; 404  : 		if(lpDrop->sMap == lpMonster->MapNumber || lpDrop->sMap == -1)

  01446	8b 45 ec	 mov	 eax, DWORD PTR _lpDrop$229121[ebp]
  01449	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0144c	8b 55 f4	 mov	 edx, DWORD PTR _lpMonster$[ebp]
  0144f	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  01456	3b c8		 cmp	 ecx, eax
  01458	74 0f		 je	 SHORT $LN17@DropAncent
  0145a	8b 45 ec	 mov	 eax, DWORD PTR _lpDrop$229121[ebp]
  0145d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  01460	83 f9 ff	 cmp	 ecx, -1
  01463	0f 85 f3 01 00
	00		 jne	 $LN18@DropAncent
$LN17@DropAncent:

; 405  : 		{
; 406  : 			if(lpMonster->Level >= lpDrop->sMinLvlMob && lpMonster->Level <= lpDrop->sMaxLvlMob)

  01469	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  0146c	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  01473	8b 55 ec	 mov	 edx, DWORD PTR _lpDrop$229121[ebp]
  01476	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  0147a	3b c8		 cmp	 ecx, eax
  0147c	0f 8c da 01 00
	00		 jl	 $LN18@DropAncent
  01482	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  01485	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0148c	8b 55 ec	 mov	 edx, DWORD PTR _lpDrop$229121[ebp]
  0148f	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  01493	3b c8		 cmp	 ecx, eax
  01495	0f 8f c1 01 00
	00		 jg	 $LN18@DropAncent

; 407  : 			{
; 408  : 				if(lpDrop->iRate > (rand()%10000))

  0149b	e8 00 00 00 00	 call	 _rand
  014a0	99		 cdq
  014a1	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  014a6	f7 f9		 idiv	 ecx
  014a8	8b 45 ec	 mov	 eax, DWORD PTR _lpDrop$229121[ebp]
  014ab	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  014ae	0f 8e a8 01 00
	00		 jle	 $LN18@DropAncent

; 409  : 				{
; 410  : 					int icount = lpDrop->ItemCount;

  014b4	8b 45 ec	 mov	 eax, DWORD PTR _lpDrop$229121[ebp]
  014b7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  014ba	89 4d e8	 mov	 DWORD PTR _icount$229126[ebp], ecx

; 411  : 
; 412  : 					if(icount <= 0)

  014bd	83 7d e8 00	 cmp	 DWORD PTR _icount$229126[ebp], 0
  014c1	7f 05		 jg	 SHORT $LN14@DropAncent

; 413  : 					{
; 414  : 						continue;

  014c3	e9 4d ff ff ff	 jmp	 $LN20@DropAncent
$LN14@DropAncent:

; 415  : 					}
; 416  : 
; 417  : 					int iRand = rand()%icount;

  014c8	e8 00 00 00 00	 call	 _rand
  014cd	99		 cdq
  014ce	f7 7d e8	 idiv	 DWORD PTR _icount$229126[ebp]
  014d1	89 55 e4	 mov	 DWORD PTR _iRand$229128[ebp], edx

; 418  : 
; 419  : 					int itemnum = ITEMGET(lpDrop->m_item[iRand].sType, lpDrop->m_item[iRand].sIndex); 

  014d4	8b 45 e4	 mov	 eax, DWORD PTR _iRand$229128[ebp]
  014d7	6b c0 06	 imul	 eax, 6
  014da	8b 4d ec	 mov	 ecx, DWORD PTR _lpDrop$229121[ebp]
  014dd	0f bf 54 01 10	 movsx	 edx, WORD PTR [ecx+eax+16]
  014e2	c1 e2 09	 shl	 edx, 9
  014e5	8b 45 e4	 mov	 eax, DWORD PTR _iRand$229128[ebp]
  014e8	6b c0 06	 imul	 eax, 6
  014eb	8b 4d ec	 mov	 ecx, DWORD PTR _lpDrop$229121[ebp]
  014ee	0f bf 44 01 12	 movsx	 eax, WORD PTR [ecx+eax+18]
  014f3	03 d0		 add	 edx, eax
  014f5	89 55 e0	 mov	 DWORD PTR _itemnum$229129[ebp], edx

; 420  : 
; 421  : 					if(!gSetItemOption.IsSetItem(itemnum))

  014f8	8b 45 e0	 mov	 eax, DWORD PTR _itemnum$229129[ebp]
  014fb	50		 push	 eax
  014fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  01501	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem
  01506	85 c0		 test	 eax, eax
  01508	75 05		 jne	 SHORT $LN13@DropAncent

; 422  : 					{
; 423  : 						continue;

  0150a	e9 06 ff ff ff	 jmp	 $LN20@DropAncent
$LN13@DropAncent:

; 424  : 					}
; 425  : 
; 426  : 					int SetOption = gSetItemOption.GenSetOption(itemnum);

  0150f	8b 45 e0	 mov	 eax, DWORD PTR _itemnum$229129[ebp]
  01512	50		 push	 eax
  01513	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  01518	e8 00 00 00 00	 call	 ?GenSetOption@CSetItemOption@@QAEHH@Z ; CSetItemOption::GenSetOption
  0151d	89 45 dc	 mov	 DWORD PTR _SetOption$229131[ebp], eax

; 427  : 
; 428  : 					//if(g_ExLicense.CheckUser(eExUB::masonX))
; 429  : 					{
; 430  : 						if(lpDrop->m_item[iRand].sOpt == 5 || lpDrop->m_item[iRand].sOpt == 10)

  01520	8b 45 e4	 mov	 eax, DWORD PTR _iRand$229128[ebp]
  01523	6b c0 06	 imul	 eax, 6
  01526	8b 4d ec	 mov	 ecx, DWORD PTR _lpDrop$229121[ebp]
  01529	0f bf 54 01 14	 movsx	 edx, WORD PTR [ecx+eax+20]
  0152e	83 fa 05	 cmp	 edx, 5
  01531	74 13		 je	 SHORT $LN11@DropAncent
  01533	8b 45 e4	 mov	 eax, DWORD PTR _iRand$229128[ebp]
  01536	6b c0 06	 imul	 eax, 6
  01539	8b 4d ec	 mov	 ecx, DWORD PTR _lpDrop$229121[ebp]
  0153c	0f bf 54 01 14	 movsx	 edx, WORD PTR [ecx+eax+20]
  01541	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  01544	75 11		 jne	 SHORT $LN12@DropAncent
$LN11@DropAncent:

; 431  : 						{
; 432  : 							SetOption = lpDrop->m_item[iRand].sOpt;

  01546	8b 45 e4	 mov	 eax, DWORD PTR _iRand$229128[ebp]
  01549	6b c0 06	 imul	 eax, 6
  0154c	8b 4d ec	 mov	 ecx, DWORD PTR _lpDrop$229121[ebp]
  0154f	0f bf 54 01 14	 movsx	 edx, WORD PTR [ecx+eax+20]
  01554	89 55 dc	 mov	 DWORD PTR _SetOption$229131[ebp], edx
$LN12@DropAncent:

; 433  : 						}
; 434  : 					}
; 435  : 
; 436  : 					int option1rand = 6;

  01557	c7 45 d8 06 00
	00 00		 mov	 DWORD PTR _option1rand$229134[ebp], 6

; 437  : 					int option2rand = 4;

  0155e	c7 45 d4 04 00
	00 00		 mov	 DWORD PTR _option2rand$229135[ebp], 4

; 438  : 					int option3rand = rand()%100;

  01565	e8 00 00 00 00	 call	 _rand
  0156a	99		 cdq
  0156b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01570	f7 f9		 idiv	 ecx
  01572	89 55 d0	 mov	 DWORD PTR _option3rand$229136[ebp], edx

; 439  : 					int optionc = rand()%3;

  01575	e8 00 00 00 00	 call	 _rand
  0157a	99		 cdq
  0157b	b9 03 00 00 00	 mov	 ecx, 3
  01580	f7 f9		 idiv	 ecx
  01582	89 55 cc	 mov	 DWORD PTR _optionc$229137[ebp], edx

; 440  : 					int Option1 = 0;

  01585	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _Option1$229138[ebp], 0

; 441  : 					int Option2 = 0;

  0158c	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _Option2$229139[ebp], 0

; 442  : 					int Option3 = 0;

  01593	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _Option3$229140[ebp], 0

; 443  : 
; 444  : 					if(rand()%100 < option2rand)

  0159a	e8 00 00 00 00	 call	 _rand
  0159f	99		 cdq
  015a0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  015a5	f7 f9		 idiv	 ecx
  015a7	3b 55 d4	 cmp	 edx, DWORD PTR _option2rand$229135[ebp]
  015aa	7d 07		 jge	 SHORT $LN10@DropAncent

; 445  : 					{
; 446  : 						Option2 = 1;

  015ac	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _Option2$229139[ebp], 1
$LN10@DropAncent:

; 447  : 					}
; 448  : 
; 449  : 					switch(optionc)

  015b3	8b 45 cc	 mov	 eax, DWORD PTR _optionc$229137[ebp]
  015b6	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv217[ebp], eax
  015bc	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv217[ebp], 0
  015c3	74 14		 je	 SHORT $LN7@DropAncent
  015c5	83 bd 7c ff ff
	ff 01		 cmp	 DWORD PTR tv217[ebp], 1
  015cc	74 1a		 je	 SHORT $LN5@DropAncent
  015ce	83 bd 7c ff ff
	ff 02		 cmp	 DWORD PTR tv217[ebp], 2
  015d5	74 20		 je	 SHORT $LN3@DropAncent
  015d7	eb 2b		 jmp	 SHORT $LN8@DropAncent
$LN7@DropAncent:

; 450  : 					{
; 451  : 					case 0: 
; 452  : 						if(option3rand < 4)

  015d9	83 7d d0 04	 cmp	 DWORD PTR _option3rand$229136[ebp], 4
  015dd	7d 07		 jge	 SHORT $LN6@DropAncent

; 453  : 						{
; 454  : 							Option3 = 3;

  015df	c7 45 c0 03 00
	00 00		 mov	 DWORD PTR _Option3$229140[ebp], 3
$LN6@DropAncent:

; 455  : 						}
; 456  : 						break;

  015e6	eb 1c		 jmp	 SHORT $LN8@DropAncent
$LN5@DropAncent:

; 457  : 					case 1:
; 458  : 						if(option3rand < 8)

  015e8	83 7d d0 08	 cmp	 DWORD PTR _option3rand$229136[ebp], 8
  015ec	7d 07		 jge	 SHORT $LN4@DropAncent

; 459  : 						{
; 460  : 							Option3 = 2;

  015ee	c7 45 c0 02 00
	00 00		 mov	 DWORD PTR _Option3$229140[ebp], 2
$LN4@DropAncent:

; 461  : 						}
; 462  : 						break;

  015f5	eb 0d		 jmp	 SHORT $LN8@DropAncent
$LN3@DropAncent:

; 463  : 					case 2: 
; 464  : 						if(option3rand < 12)

  015f7	83 7d d0 0c	 cmp	 DWORD PTR _option3rand$229136[ebp], 12 ; 0000000cH
  015fb	7d 07		 jge	 SHORT $LN8@DropAncent

; 465  : 						{
; 466  : 							Option3 = 1;

  015fd	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR _Option3$229140[ebp], 1
$LN8@DropAncent:

; 467  : 						}
; 468  : 						break;
; 469  : 					default: break;
; 470  : 					}
; 471  : 
; 472  : 					Option1 = 1;

  01604	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _Option1$229138[ebp], 1

; 473  : 
; 474  : 					ItemSerialCreateSend(aIndex,lpMonster->MapNumber,(BYTE)lpMonster->X,(BYTE)lpMonster->Y,itemnum,0,0,(BYTE)Option1,(BYTE)Option2,(BYTE)Option3,aIndex,0,(BYTE)SetOption);

  0160b	0f b6 45 dc	 movzx	 eax, BYTE PTR _SetOption$229131[ebp]
  0160f	50		 push	 eax
  01610	6a 00		 push	 0
  01612	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01615	51		 push	 ecx
  01616	0f b6 55 c0	 movzx	 edx, BYTE PTR _Option3$229140[ebp]
  0161a	52		 push	 edx
  0161b	0f b6 45 c4	 movzx	 eax, BYTE PTR _Option2$229139[ebp]
  0161f	50		 push	 eax
  01620	0f b6 4d c8	 movzx	 ecx, BYTE PTR _Option1$229138[ebp]
  01624	51		 push	 ecx
  01625	6a 00		 push	 0
  01627	6a 00		 push	 0
  01629	8b 55 e0	 mov	 edx, DWORD PTR _itemnum$229129[ebp]
  0162c	52		 push	 edx
  0162d	8b 45 f4	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  01630	0f b6 88 46 01
	00 00		 movzx	 ecx, BYTE PTR [eax+326]
  01637	51		 push	 ecx
  01638	8b 55 f4	 mov	 edx, DWORD PTR _lpMonster$[ebp]
  0163b	0f b6 82 44 01
	00 00		 movzx	 eax, BYTE PTR [edx+324]
  01642	50		 push	 eax
  01643	8b 4d f4	 mov	 ecx, DWORD PTR _lpMonster$[ebp]
  01646	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  0164d	52		 push	 edx
  0164e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01651	50		 push	 eax
  01652	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  01657	83 c4 34	 add	 esp, 52			; 00000034H

; 475  : 					return;

  0165a	eb 05		 jmp	 SHORT $LN25@DropAncent
$LN18@DropAncent:

; 476  : 				}
; 477  : 			}
; 478  : 		}
; 479  : 	}

  0165c	e9 b4 fd ff ff	 jmp	 $LN20@DropAncent
$LN25@DropAncent:

; 480  : 	
; 481  : }

  01661	5f		 pop	 edi
  01662	5e		 pop	 esi
  01663	5b		 pop	 ebx
  01664	8b e5		 mov	 esp, ebp
  01666	5d		 pop	 ebp
  01667	c2 08 00	 ret	 8
?DropAncent@CItemDropManager@@QAEXHH@Z ENDP		; CItemDropManager::DropAncent
_TEXT	ENDS
PUBLIC	??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::operator[]
PUBLIC	?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::size
PUBLIC	?GetMapDropRate@CItemDropManager@@QAEHH@Z	; CItemDropManager::GetMapDropRate
EXTRN	?gItemDropPer@@3HA:DWORD			; gItemDropPer
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$229163 = -8						; size = 4
_this$ = -4						; size = 4
_Map$ = 8						; size = 4
?GetMapDropRate@CItemDropManager@@QAEHH@Z PROC		; CItemDropManager::GetMapDropRate
; _this$ = ecx

; 484  : {

  01670	55		 push	 ebp
  01671	8b ec		 mov	 ebp, esp
  01673	83 ec 48	 sub	 esp, 72			; 00000048H
  01676	53		 push	 ebx
  01677	56		 push	 esi
  01678	57		 push	 edi
  01679	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 485  : 	for(int i = 0; i < this->m_MapDropRate.size(); i++)

  0167c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$229163[ebp], 0
  01683	eb 09		 jmp	 SHORT $LN4@GetMapDrop
$LN3@GetMapDrop:
  01685	8b 45 f8	 mov	 eax, DWORD PTR _i$229163[ebp]
  01688	83 c0 01	 add	 eax, 1
  0168b	89 45 f8	 mov	 DWORD PTR _i$229163[ebp], eax
$LN4@GetMapDrop:
  0168e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01691	81 c1 e8 0f 04
	00		 add	 ecx, 266216		; 00040fe8H
  01697	e8 00 00 00 00	 call	 ?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::size
  0169c	39 45 f8	 cmp	 DWORD PTR _i$229163[ebp], eax
  0169f	73 32		 jae	 SHORT $LN2@GetMapDrop

; 486  : 	{
; 487  : 		if(this->m_MapDropRate[i].MapNum == Map)

  016a1	8b 45 f8	 mov	 eax, DWORD PTR _i$229163[ebp]
  016a4	50		 push	 eax
  016a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016a8	81 c1 e8 0f 04
	00		 add	 ecx, 266216		; 00040fe8H
  016ae	e8 00 00 00 00	 call	 ??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::operator[]
  016b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  016b5	3b 4d 08	 cmp	 ecx, DWORD PTR _Map$[ebp]
  016b8	75 17		 jne	 SHORT $LN1@GetMapDrop

; 488  : 		{
; 489  : 			return this->m_MapDropRate[i].Rate;

  016ba	8b 45 f8	 mov	 eax, DWORD PTR _i$229163[ebp]
  016bd	50		 push	 eax
  016be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016c1	81 c1 e8 0f 04
	00		 add	 ecx, 266216		; 00040fe8H
  016c7	e8 00 00 00 00	 call	 ??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::operator[]
  016cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  016cf	eb 07		 jmp	 SHORT $LN5@GetMapDrop
$LN1@GetMapDrop:

; 490  : 		}
; 491  : 	}

  016d1	eb b2		 jmp	 SHORT $LN3@GetMapDrop
$LN2@GetMapDrop:

; 492  : 
; 493  : 	return gItemDropPer;

  016d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gItemDropPer@@3HA ; gItemDropPer
$LN5@GetMapDrop:

; 494  : }

  016d8	5f		 pop	 edi
  016d9	5e		 pop	 esi
  016da	5b		 pop	 ebx
  016db	8b e5		 mov	 esp, ebp
  016dd	5d		 pop	 ebp
  016de	c2 04 00	 ret	 4
?GetMapDropRate@CItemDropManager@@QAEHH@Z ENDP		; CItemDropManager::GetMapDropRate
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	8b 55 08	 mov	 edx, DWORD PTR __Pos$[ebp]
  00014	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
PUBLIC	??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA &>
PUBLIC	?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve
PUBLIC	?_Inside@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBE_NPBUMAP_DROPRATE_DATA@@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Inside
PUBLIC	??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z ; std::addressof<MAP_DROPRATE_DATA const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXABUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
__Idx$229191 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXABUMAP_DROPRATE_DATA@@@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z ; std::addressof<MAP_DROPRATE_DATA const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBE_NPBUMAP_DROPRATE_DATA@@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 78		 je	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z ; std::addressof<MAP_DROPRATE_DATA const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	c1 f8 03	 sar	 eax, 3
  0003c	89 45 f8	 mov	 DWORD PTR __Idx$229191[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00048	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004b	75 0a		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	51		 push	 ecx
  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00064	50		 push	 eax
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 f8	 mov	 edx, DWORD PTR __Idx$229191[ebp]
  00075	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00078	50		 push	 eax
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007f	52		 push	 edx
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 0c	 add	 eax, 12			; 0000000cH
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA &>
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00095	83 c1 08	 add	 ecx, 8
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  0009e	eb 57		 jmp	 SHORT $LN5@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a9	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000ac	75 0a		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  000ae	6a 01		 push	 1
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	51		 push	 ecx
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c5	50		 push	 eax
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000ce	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d8	52		 push	 edx
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	83 c0 0c	 add	 eax, 12			; 0000000cH
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	83 c1 08	 add	 ecx, 8
  000f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f4	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back:

; 997  : 			}
; 998  : 		}

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?push_back@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXABUMAP_DROPRATE_DATA@@@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::erase
PUBLIC	?begin@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::begin
PUBLIC	?end@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T230194 = -88						; size = 4
$T230195 = -84						; size = 4
$T230196 = -80						; size = 4
$T230197 = -76						; size = 4
$T230198 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T230195[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T230194[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T230197[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T230196[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T230194[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T230196[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T230198[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Destroy
PUBLIC	??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00@Z ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T230205 = -84						; size = 4
__Ptr$229382 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00@Z ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$229382[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$229382[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$229382[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T230205[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T230205[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBE_NPBUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBE_NPBUMAP_DROPRATE_DATA@@@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBE_NPBUMAP_DROPRATE_DATA@@@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve
PUBLIC	?_Grow_to@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEII@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Grow_to
PUBLIC	?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::capacity
PUBLIC	?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Xlen
PUBLIC	?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEII@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve
$LN6@Reserve:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z ; std::allocator<MAP_DROPRATE_DATA>::deallocate
PUBLIC	??$_Umove@PAUMAP_DROPRATE_DATA@@@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEPAUMAP_DROPRATE_DATA@@PAU2@00@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Umove<MAP_DROPRATE_DATA *>
PUBLIC	?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z ; std::allocator<MAP_DROPRATE_DATA>::allocate
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$229424 = -28					; size = 4
__Ptr$229417 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Xlen
  00044	e9 eb 00 00 00	 jmp	 $LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 da 00 00
	00		 jae	 $LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z ; std::allocator<MAP_DROPRATE_DATA>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$229417[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$229417[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUMAP_DROPRATE_DATA@@@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEPAUMAP_DROPRATE_DATA@@PAU2@00@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Umove<MAP_DROPRATE_DATA *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve
__catch$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$229417[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z ; std::allocator<MAP_DROPRATE_DATA>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$229424[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 35		 je	 SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ef	2b 11		 sub	 edx, DWORD PTR [ecx]
  000f1	c1 fa 03	 sar	 edx, 3
  000f4	52		 push	 edx
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	51		 push	 ecx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00101	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z ; std::allocator<MAP_DROPRATE_DATA>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00111	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$229417[ebp]
  00114	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00117	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR __Size$229424[ebp]
  00120	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$229417[ebp]
  00123	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00126	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00129	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  0012c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$229417[ebp]
  00132	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UMAP_DROPRATE_DATA@@@std@@QBEIXZ ; std::allocator<MAP_DROPRATE_DATA>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UMAP_DROPRATE_DATA@@@std@@QBEIXZ ; std::allocator<MAP_DROPRATE_DATA>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Xlen
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Allocate@UMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@IPAU1@@Z ; std::_Allocate<MAP_DROPRATE_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@IPAU1@@Z ; std::_Allocate<MAP_DROPRATE_DATA>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UMAP_DROPRATE_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UMAP_DROPRATE_DATA@@@std@@QBEIXZ PROC ; std::allocator<MAP_DROPRATE_DATA>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UMAP_DROPRATE_DATA@@@std@@QBEIXZ ENDP ; std::allocator<MAP_DROPRATE_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z PROC ; std::addressof<MAP_DROPRATE_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z ENDP ; std::addressof<MAP_DROPRATE_DATA const >
_TEXT	ENDS
PUBLIC	??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z ; std::allocator<MAP_DROPRATE_DATA>::construct<MAP_DROPRATE_DATA &>
PUBLIC	??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::forward<MAP_DROPRATE_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::forward<MAP_DROPRATE_DATA &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z ; std::allocator<MAP_DROPRATE_DATA>::construct<MAP_DROPRATE_DATA &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@ABU3@@Z ; std::allocator<MAP_DROPRATE_DATA>::construct
PUBLIC	??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z ; std::forward<MAP_DROPRATE_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z ; std::forward<MAP_DROPRATE_DATA const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@ABU3@@Z ; std::allocator<MAP_DROPRATE_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
PUBLIC	??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z ; std::_Ptr_cat<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00@Z
_TEXT	SEGMENT
$T230273 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00@Z PROC ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z ; std::_Ptr_cat<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T230273[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T230273[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00@Z ENDP ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ; std::_Uninitialized_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUMAP_DROPRATE_DATA@@@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEPAUMAP_DROPRATE_DATA@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUMAP_DROPRATE_DATA@@@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEPAUMAP_DROPRATE_DATA@@PAU2@00@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Umove<MAP_DROPRATE_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ; std::_Uninitialized_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUMAP_DROPRATE_DATA@@@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEPAUMAP_DROPRATE_DATA@@PAU2@00@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Umove<MAP_DROPRATE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z
_TEXT	SEGMENT
$T230278 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z ; std::_Ptr_cat<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T230278[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T230278[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@UMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T230281 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@IPAU1@@Z PROC ; std::_Allocate<MAP_DROPRATE_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	c1 e0 03	 shl	 eax, 3
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T230281[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T230281[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@IPAU1@@Z ENDP ; std::_Allocate<MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z ; std::_Construct<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@ABU3@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z ; std::_Construct<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@ABU3@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z PROC ; std::forward<MAP_DROPRATE_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z ENDP ; std::forward<MAP_DROPRATE_DATA &>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T230288 = -88						; size = 4
$T230289 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::construct<MAP_DROPRATE_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 08		 push	 8
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T230289[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T230289[ebp], 0
  00047	74 21		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::forward<MAP_DROPRATE_DATA &>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005a	8b 4d ac	 mov	 ecx, DWORD PTR $T230289[ebp]
  0005d	89 11		 mov	 DWORD PTR [ecx], edx
  0005f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00062	8b 55 ac	 mov	 edx, DWORD PTR $T230289[ebp]
  00065	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00068	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0006a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  00071	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00074	89 45 a8	 mov	 DWORD PTR $T230288[ebp], eax
  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T230289[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::construct<MAP_DROPRATE_DATA &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z PROC ; std::forward<MAP_DROPRATE_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z ENDP ; std::forward<MAP_DROPRATE_DATA const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z PROC ; std::_Ptr_cat<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z ENDP ; std::_Ptr_cat<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??$move@AAUMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::move<MAP_DROPRATE_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 08	 add	 eax, 8
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 08	 add	 ecx, 8
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 1b		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::move<MAP_DROPRATE_DATA &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00036	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00039	89 08		 mov	 DWORD PTR [eax], ecx
  0003b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003e	eb cb		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  00040	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
PUBLIC	??$_Val_type@PAUMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@@Z ; std::_Val_type<MAP_DROPRATE_DATA *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z
_TEXT	SEGMENT
$T230311 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z PROC ; std::_Uninitialized_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z ; std::_Ptr_cat<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T230311[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T230311[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@@Z ; std::_Val_type<MAP_DROPRATE_DATA *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z ; std::_Dest_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 08	 add	 eax, 8
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z ; std::_Dest_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T230316 = -88						; size = 4
$T230317 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z PROC ; std::_Construct<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 08		 push	 8
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T230317[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T230317[ebp], 0
  0004a	74 21		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z ; std::forward<MAP_DROPRATE_DATA const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005d	8b 4d ac	 mov	 ecx, DWORD PTR $T230317[ebp]
  00060	89 11		 mov	 DWORD PTR [ecx], edx
  00062	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00065	8b 55 ac	 mov	 edx, DWORD PTR $T230317[ebp]
  00068	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  0006b	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  0006d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  00074	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00077	89 45 a8	 mov	 DWORD PTR $T230316[ebp], eax
  0007a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T230317[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z ENDP ; std::_Construct<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z PROC ; std::move<MAP_DROPRATE_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ENDP ; std::move<MAP_DROPRATE_DATA &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@@Z PROC ; std::_Val_type<MAP_DROPRATE_DATA *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@@Z ENDP ; std::_Val_type<MAP_DROPRATE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 08	 add	 eax, 8
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 08	 add	 ecx, 8
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 08	 add	 eax, 8
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z ; std::_Dest_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
PUBLIC	?destroy@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@@Z ; std::allocator<MAP_DROPRATE_DATA>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z PROC ; std::_Dest_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@@Z ; std::allocator<MAP_DROPRATE_DATA>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy@UMAP_DROPRATE_DATA@@@std@@YAXPAUMAP_DROPRATE_DATA@@@Z ; std::_Destroy<MAP_DROPRATE_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UMAP_DROPRATE_DATA@@@std@@YAXPAUMAP_DROPRATE_DATA@@@Z ; std::_Destroy<MAP_DROPRATE_DATA>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z ; std::allocator<MAP_DROPRATE_DATA>::construct
PUBLIC	??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::forward<MAP_DROPRATE_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::forward<MAP_DROPRATE_DATA>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z ; std::allocator<MAP_DROPRATE_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UMAP_DROPRATE_DATA@@@std@@YAXPAUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UMAP_DROPRATE_DATA@@@std@@YAXPAUMAP_DROPRATE_DATA@@@Z PROC ; std::_Destroy<MAP_DROPRATE_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UMAP_DROPRATE_DATA@@@std@@YAXPAUMAP_DROPRATE_DATA@@@Z ENDP ; std::_Destroy<MAP_DROPRATE_DATA>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T230356 = -88						; size = 4
$T230357 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 08		 push	 8
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T230357[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T230357[ebp], 0
  00047	74 21		 je	 SHORT $LN3@construct@2
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::forward<MAP_DROPRATE_DATA>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005a	8b 4d ac	 mov	 ecx, DWORD PTR $T230357[ebp]
  0005d	89 11		 mov	 DWORD PTR [ecx], edx
  0005f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00062	8b 55 ac	 mov	 edx, DWORD PTR $T230357[ebp]
  00065	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00068	eb 07		 jmp	 SHORT $LN4@construct@2
$LN3@construct@2:
  0006a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@2:
  00071	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00074	89 45 a8	 mov	 DWORD PTR $T230356[ebp], eax
  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T230357[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z PROC ; std::forward<MAP_DROPRATE_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ENDP ; std::forward<MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??0CItemDropManager@@QAE@XZ			; CItemDropManager::CItemDropManager
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\itemdropmanager.cpp
;	COMDAT ??__EgItemDropManager@@YAXXZ
text$yc	SEGMENT
??__EgItemDropManager@@YAXXZ PROC			; `dynamic initializer for 'gItemDropManager'', COMDAT

; 13   : CItemDropManager gItemDropManager;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gItemDropManager@@3VCItemDropManager@@A ; gItemDropManager
  0000e	e8 00 00 00 00	 call	 ??0CItemDropManager@@QAE@XZ
  00013	68 00 00 00 00	 push	 OFFSET ??__FgItemDropManager@@YAXXZ ; `dynamic atexit destructor for 'gItemDropManager''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgItemDropManager@@YAXXZ ENDP			; `dynamic initializer for 'gItemDropManager''
text$yc	ENDS
PUBLIC	??0?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CItemDropManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CItemDropManager@@QAE@XZ PROC			; CItemDropManager::CItemDropManager, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	81 c1 e8 0f 04
	00		 add	 ecx, 266216		; 00040fe8H
  00015	e8 00 00 00 00	 call	 ??0?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??0CItemDropManager@@QAE@XZ ENDP			; CItemDropManager::CItemDropManager
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@V?$allocator@UMAP_DROPRATE_DATA@@@1@@Z ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
PUBLIC	??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@XZ	; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T230390 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T230390[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@XZ ; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@V?$allocator@UMAP_DROPRATE_DATA@@@1@@Z ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@V?$allocator@UMAP_DROPRATE_DATA@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@V?$allocator@UMAP_DROPRATE_DATA@@@1@@Z PROC ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@V?$allocator@UMAP_DROPRATE_DATA@@@1@@Z ENDP ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@XZ PROC	; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@XZ ENDP	; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??1CItemDropManager@@QAE@XZ			; CItemDropManager::~CItemDropManager
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FgItemDropManager@@YAXXZ
text$yd	SEGMENT
??__FgItemDropManager@@YAXXZ PROC			; `dynamic atexit destructor for 'gItemDropManager'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gItemDropManager@@3VCItemDropManager@@A ; gItemDropManager
  0000e	e8 00 00 00 00	 call	 ??1CItemDropManager@@QAE@XZ
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgItemDropManager@@YAXXZ ENDP			; `dynamic atexit destructor for 'gItemDropManager''
text$yd	ENDS
PUBLIC	??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1CItemDropManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CItemDropManager@@QAE@XZ PROC			; CItemDropManager::~CItemDropManager, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	81 c1 e8 0f 04
	00		 add	 ecx, 266216		; 00040fe8H
  00015	e8 00 00 00 00	 call	 ??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??1CItemDropManager@@QAE@XZ ENDP			; CItemDropManager::~CItemDropManager
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
PUBLIC	?_Tidy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Tidy
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
__ehhandler$??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 03	 sar	 edx, 3
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z ; std::allocator<MAP_DROPRATE_DATA>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	?gItemDropManager@@3VCItemDropManager@@A	; gItemDropManager
_BSS	SEGMENT
?gItemDropManager@@3VCItemDropManager@@A DB 040ff8H DUP (?) ; gItemDropManager
_BSS	ENDS
CRT$XCU	SEGMENT
_gItemDropManager$initializer$ DD FLAT:??__EgItemDropManager@@YAXXZ
CRT$XCU	ENDS
END
