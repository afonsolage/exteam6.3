; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\BloodCastleRewardItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gBloodCastleRewardItem@@3VcBloodCastleRewardItem@@A ; gBloodCastleRewardItem
_BSS	SEGMENT
?gBloodCastleRewardItem@@3VcBloodCastleRewardItem@@A DB 0e12cH DUP (?) ; gBloodCastleRewardItem
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0BA@CDGAONCL@RewardItemCount?$AA@		; `string'
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CJ@JHDLIDKN@?4?4?2Data?2ExData?2BloodCastleReward@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cBloodCastleRewardItem@@QAEXXZ		; cBloodCastleRewardItem::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\bloodcastlerewarditem.cpp
CONST	SEGMENT
??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB ' '
	DB	'%d %d %d %d %d %d %d %d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CDGAONCL@RewardItemCount?$AA@
CONST	SEGMENT
??_C@_0BA@CDGAONCL@RewardItemCount?$AA@ DB 'RewardItemCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JHDLIDKN@?4?4?2Data?2ExData?2BloodCastleReward@
CONST	SEGMENT
??_C@_0CJ@JHDLIDKN@?4?4?2Data?2ExData?2BloodCastleReward@ DB '..\Data\ExD'
	DB	'ata\BloodCastleRewardItem.ini', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$219993 = -320					; size = 32
_j$219988 = -288					; size = 4
_j$219980 = -284					; size = 4
_Flag$ = -280						; size = 4
_Buff$ = -276						; size = 256
_file$ = -20						; size = 4
_i$219971 = -16						; size = 4
_j$219967 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Load@cBloodCastleRewardItem@@QAEXXZ PROC		; cBloodCastleRewardItem::Load
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 13   : 	this->Enable = GetPrivateProfileInt("ExTeam","Enable",0,BC_REWARD_ITEM_DIR);

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JHDLIDKN@?4?4?2Data?2ExData?2BloodCastleReward@
  0001e	6a 00		 push	 0
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 01		 mov	 DWORD PTR [ecx], eax

; 14   : 	this->m_iRewardItemCount = GetPrivateProfileInt("ExTeam","RewardItemCount",0,BC_REWARD_ITEM_DIR);

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JHDLIDKN@?4?4?2Data?2ExData?2BloodCastleReward@
  0003a	6a 00		 push	 0
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDGAONCL@RewardItemCount?$AA@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 81 28 e1 00
	00		 mov	 DWORD PTR [ecx+57640], eax

; 15   : 
; 16   : 	for (int j = 1; j < 9; j++)

  00055	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _j$219967[ebp], 1
  0005c	eb 09		 jmp	 SHORT $LN18@Load
$LN17@Load:
  0005e	8b 45 f4	 mov	 eax, DWORD PTR _j$219967[ebp]
  00061	83 c0 01	 add	 eax, 1
  00064	89 45 f4	 mov	 DWORD PTR _j$219967[ebp], eax
$LN18@Load:
  00067	83 7d f4 09	 cmp	 DWORD PTR _j$219967[ebp], 9
  0006b	0f 8d 18 01 00
	00		 jge	 $LN16@Load

; 17   : 	{
; 18   : 		for(int i=0;i<MAX_BC_REWARD_ITEM;i++)

  00071	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$219971[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN15@Load
$LN14@Load:
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _i$219971[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 f0	 mov	 DWORD PTR _i$219971[ebp], eax
$LN15@Load:
  00083	81 7d f0 c8 00
	00 00		 cmp	 DWORD PTR _i$219971[ebp], 200 ; 000000c8H
  0008a	0f 8d f4 00 00
	00		 jge	 $LN13@Load

; 19   : 		{
; 20   : 			this->Reward[i][j].Type	= 0;

  00090	8b 45 f0	 mov	 eax, DWORD PTR _i$219971[ebp]
  00093	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000a0	8b 45 f4	 mov	 eax, DWORD PTR _j$219967[ebp]
  000a3	c1 e0 05	 shl	 eax, 5
  000a6	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], 0

; 21   : 			this->Reward[i][j].Index	= 0;

  000ad	8b 45 f0	 mov	 eax, DWORD PTR _i$219971[ebp]
  000b0	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000bd	8b 45 f4	 mov	 eax, DWORD PTR _j$219967[ebp]
  000c0	c1 e0 05	 shl	 eax, 5
  000c3	c7 44 02 04 00
	00 00 00	 mov	 DWORD PTR [edx+eax+4], 0

; 22   : 			this->Reward[i][j].Level	= 0;

  000cb	8b 45 f0	 mov	 eax, DWORD PTR _i$219971[ebp]
  000ce	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000db	8b 45 f4	 mov	 eax, DWORD PTR _j$219967[ebp]
  000de	c1 e0 05	 shl	 eax, 5
  000e1	c7 44 02 08 00
	00 00 00	 mov	 DWORD PTR [edx+eax+8], 0

; 23   : 			this->Reward[i][j].Skill	= 0;

  000e9	8b 45 f0	 mov	 eax, DWORD PTR _i$219971[ebp]
  000ec	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000f9	8b 45 f4	 mov	 eax, DWORD PTR _j$219967[ebp]
  000fc	c1 e0 05	 shl	 eax, 5
  000ff	c7 44 02 0c 00
	00 00 00	 mov	 DWORD PTR [edx+eax+12], 0

; 24   : 			this->Reward[i][j].Luck	= 0;

  00107	8b 45 f0	 mov	 eax, DWORD PTR _i$219971[ebp]
  0010a	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  00110	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00117	8b 45 f4	 mov	 eax, DWORD PTR _j$219967[ebp]
  0011a	c1 e0 05	 shl	 eax, 5
  0011d	c7 44 02 10 00
	00 00 00	 mov	 DWORD PTR [edx+eax+16], 0

; 25   : 			this->Reward[i][j].Opt		= 0;

  00125	8b 45 f0	 mov	 eax, DWORD PTR _i$219971[ebp]
  00128	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  0012e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00135	8b 45 f4	 mov	 eax, DWORD PTR _j$219967[ebp]
  00138	c1 e0 05	 shl	 eax, 5
  0013b	c7 44 02 14 00
	00 00 00	 mov	 DWORD PTR [edx+eax+20], 0

; 26   : 			this->Reward[i][j].Exl		= 0;

  00143	8b 45 f0	 mov	 eax, DWORD PTR _i$219971[ebp]
  00146	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  0014c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00153	8b 45 f4	 mov	 eax, DWORD PTR _j$219967[ebp]
  00156	c1 e0 05	 shl	 eax, 5
  00159	c7 44 02 18 00
	00 00 00	 mov	 DWORD PTR [edx+eax+24], 0

; 27   : 			this->Reward[i][j].Anc		= 0;

  00161	8b 45 f0	 mov	 eax, DWORD PTR _i$219971[ebp]
  00164	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  0016a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016d	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00171	8b 45 f4	 mov	 eax, DWORD PTR _j$219967[ebp]
  00174	c1 e0 05	 shl	 eax, 5
  00177	c7 44 02 1c 00
	00 00 00	 mov	 DWORD PTR [edx+eax+28], 0

; 28   : 		}

  0017f	e9 f6 fe ff ff	 jmp	 $LN14@Load
$LN13@Load:

; 29   : 	}

  00184	e9 d5 fe ff ff	 jmp	 $LN17@Load
$LN16@Load:

; 30   : 
; 31   : 	//CheckFile(BC_REWARD_ITEM_DIR);
; 32   : 
; 33   : 	FILE *file = fopen(BC_REWARD_ITEM_DIR,"r");

  00189	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JHDLIDKN@?4?4?2Data?2ExData?2BloodCastleReward@
  00193	e8 00 00 00 00	 call	 _fopen
  00198	83 c4 08	 add	 esp, 8
  0019b	89 45 ec	 mov	 DWORD PTR _file$[ebp], eax

; 34   : 
; 35   : 	if(file == NULL)

  0019e	83 7d ec 00	 cmp	 DWORD PTR _file$[ebp], 0
  001a2	75 0e		 jne	 SHORT $LN12@Load

; 36   : 	{
; 37   : 		this->Enable = 0;

  001a4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 38   : 		return;

  001ad	e9 e5 02 00 00	 jmp	 $LN19@Load
$LN12@Load:

; 39   : 	}
; 40   : 
; 41   : 	char Buff[256];
; 42   : 	int Flag = 0;

  001b2	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0

; 43   : 	for (int j = 1; j < 9; j++)

  001bc	c7 85 e4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _j$219980[ebp], 1
  001c6	eb 0f		 jmp	 SHORT $LN11@Load
$LN10@Load:
  001c8	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _j$219980[ebp]
  001ce	83 c0 01	 add	 eax, 1
  001d1	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _j$219980[ebp], eax
$LN11@Load:
  001d7	83 bd e4 fe ff
	ff 09		 cmp	 DWORD PTR _j$219980[ebp], 9
  001de	7d 16		 jge	 SHORT $LN8@Load

; 44   : 	{
; 45   : 		this->Count[j] = 0;

  001e0	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _j$219980[ebp]
  001e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e9	c7 84 81 04 e1
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+57604], 0

; 46   : 	}

  001f4	eb d2		 jmp	 SHORT $LN10@Load
$LN8@Load:

; 47   : 	
; 48   : 	while(!feof(file))

  001f6	8b 45 ec	 mov	 eax, DWORD PTR _file$[ebp]
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 _feof
  001ff	83 c4 04	 add	 esp, 4
  00202	85 c0		 test	 eax, eax
  00204	0f 85 81 02 00
	00		 jne	 $LN7@Load

; 49   : 	{
; 50   : 		fgets(Buff,256,file);	

  0020a	8b 45 ec	 mov	 eax, DWORD PTR _file$[ebp]
  0020d	50		 push	 eax
  0020e	68 00 01 00 00	 push	 256			; 00000100H
  00213	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00219	51		 push	 ecx
  0021a	e8 00 00 00 00	 call	 _fgets
  0021f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 		if(Ex_IsBadFileLine(Buff, Flag))	

  00222	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  00228	50		 push	 eax
  00229	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0022f	51		 push	 ecx
  00230	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  00235	83 c4 08	 add	 esp, 8
  00238	0f b6 d0	 movzx	 edx, al
  0023b	85 d2		 test	 edx, edx
  0023d	74 02		 je	 SHORT $LN6@Load

; 52   : 			continue;

  0023f	eb b5		 jmp	 SHORT $LN8@Load
$LN6@Load:

; 53   : 		for (int j = 1; j < 9; j++)

  00241	c7 85 e0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _j$219988[ebp], 1
  0024b	eb 0f		 jmp	 SHORT $LN5@Load
$LN4@Load:
  0024d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  00253	83 c0 01	 add	 eax, 1
  00256	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _j$219988[ebp], eax
$LN5@Load:
  0025c	83 bd e0 fe ff
	ff 09		 cmp	 DWORD PTR _j$219988[ebp], 9
  00263	0f 8d 1d 02 00
	00		 jge	 $LN3@Load

; 54   : 		{
; 55   : 			if(Flag == j)

  00269	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _Flag$[ebp]
  0026f	3b 85 e0 fe ff
	ff		 cmp	 eax, DWORD PTR _j$219988[ebp]
  00275	0f 85 06 02 00
	00		 jne	 $LN2@Load

; 56   : 			{
; 57   : 				int n[8];
; 58   : 
; 59   : 				sscanf(Buff," %d %d %d %d %d %d %d %d %d",&n[0],&n[1],&n[2],&n[3],&n[4],&n[5],&n[6],&n[7]);

  0027b	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _n$219993[ebp+28]
  00281	50		 push	 eax
  00282	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219993[ebp+24]
  00288	51		 push	 ecx
  00289	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _n$219993[ebp+20]
  0028f	52		 push	 edx
  00290	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _n$219993[ebp+16]
  00296	50		 push	 eax
  00297	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _n$219993[ebp+12]
  0029d	51		 push	 ecx
  0029e	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _n$219993[ebp+8]
  002a4	52		 push	 edx
  002a5	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _n$219993[ebp+4]
  002ab	50		 push	 eax
  002ac	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$219993[ebp]
  002b2	51		 push	 ecx
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  002b8	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  002be	52		 push	 edx
  002bf	e8 00 00 00 00	 call	 _sscanf
  002c4	83 c4 28	 add	 esp, 40			; 00000028H

; 60   : 
; 61   : 				this->Reward[this->Count[j]][j].Type		= n[0];

  002c7	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  002cd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002d0	8b 94 81 04 e1
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+57604]
  002d7	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  002dd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002e0	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  002e4	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219988[ebp]
  002ea	c1 e2 05	 shl	 edx, 5
  002ed	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _n$219993[ebp]
  002f3	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 62   : 				this->Reward[this->Count[j]][j].Index		= n[1];

  002f6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  002fc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002ff	8b 94 81 04 e1
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+57604]
  00306	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  0030c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0030f	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00313	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219988[ebp]
  00319	c1 e2 05	 shl	 edx, 5
  0031c	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _n$219993[ebp+4]
  00322	89 44 11 04	 mov	 DWORD PTR [ecx+edx+4], eax

; 63   : 				this->Reward[this->Count[j]][j].Level		= n[2];

  00326	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  0032c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0032f	8b 94 81 04 e1
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+57604]
  00336	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  0033c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0033f	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00343	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219988[ebp]
  00349	c1 e2 05	 shl	 edx, 5
  0034c	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _n$219993[ebp+8]
  00352	89 44 11 08	 mov	 DWORD PTR [ecx+edx+8], eax

; 64   : 				this->Reward[this->Count[j]][j].Skill		= n[3];

  00356	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  0035c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0035f	8b 94 81 04 e1
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+57604]
  00366	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  0036c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0036f	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00373	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219988[ebp]
  00379	c1 e2 05	 shl	 edx, 5
  0037c	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _n$219993[ebp+12]
  00382	89 44 11 0c	 mov	 DWORD PTR [ecx+edx+12], eax

; 65   : 				this->Reward[this->Count[j]][j].Luck		= n[4];

  00386	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  0038c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0038f	8b 94 81 04 e1
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+57604]
  00396	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  0039c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0039f	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  003a3	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219988[ebp]
  003a9	c1 e2 05	 shl	 edx, 5
  003ac	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _n$219993[ebp+16]
  003b2	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 66   : 				this->Reward[this->Count[j]][j].Opt		= n[5];

  003b6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  003bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003bf	8b 94 81 04 e1
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+57604]
  003c6	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  003cc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003cf	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  003d3	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219988[ebp]
  003d9	c1 e2 05	 shl	 edx, 5
  003dc	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _n$219993[ebp+20]
  003e2	89 44 11 14	 mov	 DWORD PTR [ecx+edx+20], eax

; 67   : 				this->Reward[this->Count[j]][j].Exl		= n[6];

  003e6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  003ec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003ef	8b 94 81 04 e1
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+57604]
  003f6	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  003fc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003ff	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00403	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219988[ebp]
  00409	c1 e2 05	 shl	 edx, 5
  0040c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _n$219993[ebp+24]
  00412	89 44 11 18	 mov	 DWORD PTR [ecx+edx+24], eax

; 68   : 				this->Reward[this->Count[j]][j].Anc		= n[7];

  00416	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  0041c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0041f	8b 94 81 04 e1
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+57604]
  00426	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  0042c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0042f	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00433	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$219988[ebp]
  00439	c1 e2 05	 shl	 edx, 5
  0043c	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _n$219993[ebp+28]
  00442	89 44 11 1c	 mov	 DWORD PTR [ecx+edx+28], eax

; 69   : 
; 70   : 				this->Count[j]++;

  00446	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  0044c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0044f	8b 94 81 04 e1
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+57604]
  00456	83 c2 01	 add	 edx, 1
  00459	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  0045f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00462	89 94 81 04 e1
	00 00		 mov	 DWORD PTR [ecx+eax*4+57604], edx

; 71   : 
; 72   : 				if (this->Count[j]>=MAX_BC_REWARD_ITEM)

  00469	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$219988[ebp]
  0046f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00472	81 bc 81 04 e1
	00 00 c8 00 00
	00		 cmp	 DWORD PTR [ecx+eax*4+57604], 200 ; 000000c8H
  0047d	7c 02		 jl	 SHORT $LN2@Load

; 73   : 				{
; 74   : 					break;

  0047f	eb 05		 jmp	 SHORT $LN3@Load
$LN2@Load:

; 75   : 				}
; 76   : 			}
; 77   : 		
; 78   : 		}

  00481	e9 c7 fd ff ff	 jmp	 $LN4@Load
$LN3@Load:

; 79   : 	}

  00486	e9 6b fd ff ff	 jmp	 $LN8@Load
$LN7@Load:

; 80   : 	fclose(file);

  0048b	8b 45 ec	 mov	 eax, DWORD PTR _file$[ebp]
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 _fclose
  00494	83 c4 04	 add	 esp, 4
$LN19@Load:

; 81   : }

  00497	5f		 pop	 edi
  00498	5e		 pop	 esi
  00499	5b		 pop	 ebx
  0049a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0049d	33 cd		 xor	 ecx, ebp
  0049f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004a4	8b e5		 mov	 esp, ebp
  004a6	5d		 pop	 ebp
  004a7	c3		 ret	 0
?Load@cBloodCastleRewardItem@@QAEXXZ ENDP		; cBloodCastleRewardItem::Load
_TEXT	ENDS
PUBLIC	?Main@cBloodCastleRewardItem@@QAE_NH@Z		; cBloodCastleRewardItem::Main
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	_rand:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_itemId$220015 = -24					; size = 4
_itemId$220013 = -20					; size = 4
_i$220009 = -16						; size = 4
_j$220002 = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?Main@cBloodCastleRewardItem@@QAE_NH@Z PROC		; cBloodCastleRewardItem::Main
; _this$ = ecx

; 84   : {

  004b0	55		 push	 ebp
  004b1	8b ec		 mov	 ebp, esp
  004b3	83 ec 58	 sub	 esp, 88			; 00000058H
  004b6	53		 push	 ebx
  004b7	56		 push	 esi
  004b8	57		 push	 edi
  004b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 85   : 	
; 86   : 	if(!this->Enable) return false;

  004bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004bf	83 38 00	 cmp	 DWORD PTR [eax], 0
  004c2	75 07		 jne	 SHORT $LN11@Main
  004c4	32 c0		 xor	 al, al
  004c6	e9 ec 02 00 00	 jmp	 $LN12@Main
$LN11@Main:

; 87   : 	LPOBJ lpObj = &gObj[aIndex];

  004cb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  004ce	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  004d4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004da	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 88   : 	
; 89   : 	for (int j = 1; j < 9; j++)

  004dd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _j$220002[ebp], 1
  004e4	eb 09		 jmp	 SHORT $LN10@Main
$LN9@Main:
  004e6	8b 45 f4	 mov	 eax, DWORD PTR _j$220002[ebp]
  004e9	83 c0 01	 add	 eax, 1
  004ec	89 45 f4	 mov	 DWORD PTR _j$220002[ebp], eax
$LN10@Main:
  004ef	83 7d f4 09	 cmp	 DWORD PTR _j$220002[ebp], 9
  004f3	0f 8d bc 02 00
	00		 jge	 $LN8@Main

; 90   : 	{
; 91   : 		if ((lpObj->m_cBloodCastleIndex+1) == j)

  004f9	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004fc	0f be 88 9e 0e
	00 00		 movsx	 ecx, BYTE PTR [eax+3742]
  00503	83 c1 01	 add	 ecx, 1
  00506	3b 4d f4	 cmp	 ecx, DWORD PTR _j$220002[ebp]
  00509	0f 85 a1 02 00
	00		 jne	 $LN7@Main

; 92   : 		{
; 93   : 			//srand(time(NULL));
; 94   : 			if (this->Count[j] == 0)

  0050f	8b 45 f4	 mov	 eax, DWORD PTR _j$220002[ebp]
  00512	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00515	83 bc 81 04 e1
	00 00 00	 cmp	 DWORD PTR [ecx+eax*4+57604], 0
  0051d	75 07		 jne	 SHORT $LN6@Main

; 95   : 			{
; 96   : 				return false;

  0051f	32 c0		 xor	 al, al
  00521	e9 91 02 00 00	 jmp	 $LN12@Main
$LN6@Main:

; 97   : 			}
; 98   : 
; 99   : 			if(THINNAKORN_MAC)

  00526	33 c0		 xor	 eax, eax
  00528	0f 84 56 01 00
	00		 je	 $LN5@Main

; 100  : 			{
; 101  : 				for(int i = 0; i < this->m_iRewardItemCount; i++)

  0052e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$220009[ebp], 0
  00535	eb 09		 jmp	 SHORT $LN4@Main
$LN3@Main:
  00537	8b 45 f0	 mov	 eax, DWORD PTR _i$220009[ebp]
  0053a	83 c0 01	 add	 eax, 1
  0053d	89 45 f0	 mov	 DWORD PTR _i$220009[ebp], eax
$LN4@Main:
  00540	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00543	8b 4d f0	 mov	 ecx, DWORD PTR _i$220009[ebp]
  00546	3b 88 28 e1 00
	00		 cmp	 ecx, DWORD PTR [eax+57640]
  0054c	0f 8d 2d 01 00
	00		 jge	 $LN2@Main

; 102  : 				{
; 103  : 					int itemId = rand()%this->Count[j];

  00552	e8 00 00 00 00	 call	 _rand
  00557	8b 4d f4	 mov	 ecx, DWORD PTR _j$220002[ebp]
  0055a	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0055d	99		 cdq
  0055e	f7 bc 8e 04 e1
	00 00		 idiv	 DWORD PTR [esi+ecx*4+57604]
  00565	89 55 ec	 mov	 DWORD PTR _itemId$220013[ebp], edx

; 104  : 					ItemSerialCreateSend(aIndex,lpObj->MapNumber,lpObj->X,lpObj->Y,ITEMGET(this->Reward[itemId][j].Type,this->Reward[itemId][j].Index),this->Reward[itemId][j].Level,0,this->Reward[itemId][j].Skill,this->Reward[itemId][j].Luck,this->Reward[itemId][j].Opt,aIndex,this->Reward[itemId][j].Exl,this->Reward[itemId][j].Anc);

  00568	8b 45 ec	 mov	 eax, DWORD PTR _itemId$220013[ebp]
  0056b	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  00571	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00574	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00578	8b 45 f4	 mov	 eax, DWORD PTR _j$220002[ebp]
  0057b	c1 e0 05	 shl	 eax, 5
  0057e	0f b6 4c 02 1c	 movzx	 ecx, BYTE PTR [edx+eax+28]
  00583	51		 push	 ecx
  00584	8b 55 ec	 mov	 edx, DWORD PTR _itemId$220013[ebp]
  00587	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  0058d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00590	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00594	8b 55 f4	 mov	 edx, DWORD PTR _j$220002[ebp]
  00597	c1 e2 05	 shl	 edx, 5
  0059a	0f b6 44 11 18	 movzx	 eax, BYTE PTR [ecx+edx+24]
  0059f	50		 push	 eax
  005a0	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  005a3	51		 push	 ecx
  005a4	8b 55 ec	 mov	 edx, DWORD PTR _itemId$220013[ebp]
  005a7	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  005ad	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005b0	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  005b4	8b 55 f4	 mov	 edx, DWORD PTR _j$220002[ebp]
  005b7	c1 e2 05	 shl	 edx, 5
  005ba	0f b6 44 11 14	 movzx	 eax, BYTE PTR [ecx+edx+20]
  005bf	50		 push	 eax
  005c0	8b 4d ec	 mov	 ecx, DWORD PTR _itemId$220013[ebp]
  005c3	69 c9 20 01 00
	00		 imul	 ecx, 288		; 00000120H
  005c9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005cc	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  005d0	8b 4d f4	 mov	 ecx, DWORD PTR _j$220002[ebp]
  005d3	c1 e1 05	 shl	 ecx, 5
  005d6	0f b6 54 08 10	 movzx	 edx, BYTE PTR [eax+ecx+16]
  005db	52		 push	 edx
  005dc	8b 45 ec	 mov	 eax, DWORD PTR _itemId$220013[ebp]
  005df	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  005e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005e8	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  005ec	8b 45 f4	 mov	 eax, DWORD PTR _j$220002[ebp]
  005ef	c1 e0 05	 shl	 eax, 5
  005f2	0f b6 4c 02 0c	 movzx	 ecx, BYTE PTR [edx+eax+12]
  005f7	51		 push	 ecx
  005f8	6a 00		 push	 0
  005fa	8b 55 ec	 mov	 edx, DWORD PTR _itemId$220013[ebp]
  005fd	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  00603	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00606	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0060a	8b 55 f4	 mov	 edx, DWORD PTR _j$220002[ebp]
  0060d	c1 e2 05	 shl	 edx, 5
  00610	0f b6 44 11 08	 movzx	 eax, BYTE PTR [ecx+edx+8]
  00615	50		 push	 eax
  00616	8b 4d ec	 mov	 ecx, DWORD PTR _itemId$220013[ebp]
  00619	69 c9 20 01 00
	00		 imul	 ecx, 288		; 00000120H
  0061f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00622	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00626	8b 4d f4	 mov	 ecx, DWORD PTR _j$220002[ebp]
  00629	c1 e1 05	 shl	 ecx, 5
  0062c	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  0062f	c1 e2 09	 shl	 edx, 9
  00632	8b 45 ec	 mov	 eax, DWORD PTR _itemId$220013[ebp]
  00635	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  0063b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0063e	8d 44 01 04	 lea	 eax, DWORD PTR [ecx+eax+4]
  00642	8b 4d f4	 mov	 ecx, DWORD PTR _j$220002[ebp]
  00645	c1 e1 05	 shl	 ecx, 5
  00648	03 54 08 04	 add	 edx, DWORD PTR [eax+ecx+4]
  0064c	52		 push	 edx
  0064d	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00650	0f b6 82 46 01
	00 00		 movzx	 eax, BYTE PTR [edx+326]
  00657	50		 push	 eax
  00658	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0065b	0f b6 91 44 01
	00 00		 movzx	 edx, BYTE PTR [ecx+324]
  00662	52		 push	 edx
  00663	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00666	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0066d	51		 push	 ecx
  0066e	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00671	52		 push	 edx
  00672	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00677	83 c4 34	 add	 esp, 52			; 00000034H

; 105  : 				}

  0067a	e9 b8 fe ff ff	 jmp	 $LN3@Main
$LN2@Main:

; 106  : 			}
; 107  : 			else

  0067f	e9 28 01 00 00	 jmp	 $LN1@Main
$LN5@Main:

; 108  : 			{
; 109  : 				int itemId = rand()%this->Count[j];

  00684	e8 00 00 00 00	 call	 _rand
  00689	8b 4d f4	 mov	 ecx, DWORD PTR _j$220002[ebp]
  0068c	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0068f	99		 cdq
  00690	f7 bc 8e 04 e1
	00 00		 idiv	 DWORD PTR [esi+ecx*4+57604]
  00697	89 55 e8	 mov	 DWORD PTR _itemId$220015[ebp], edx

; 110  : 				ItemSerialCreateSend(aIndex,lpObj->MapNumber,lpObj->X,lpObj->Y,ITEMGET(this->Reward[itemId][j].Type,this->Reward[itemId][j].Index),this->Reward[itemId][j].Level,0,this->Reward[itemId][j].Skill,this->Reward[itemId][j].Luck,this->Reward[itemId][j].Opt,aIndex,this->Reward[itemId][j].Exl,this->Reward[itemId][j].Anc);

  0069a	8b 45 e8	 mov	 eax, DWORD PTR _itemId$220015[ebp]
  0069d	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  006a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006a6	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  006aa	8b 45 f4	 mov	 eax, DWORD PTR _j$220002[ebp]
  006ad	c1 e0 05	 shl	 eax, 5
  006b0	0f b6 4c 02 1c	 movzx	 ecx, BYTE PTR [edx+eax+28]
  006b5	51		 push	 ecx
  006b6	8b 55 e8	 mov	 edx, DWORD PTR _itemId$220015[ebp]
  006b9	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  006bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006c2	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  006c6	8b 55 f4	 mov	 edx, DWORD PTR _j$220002[ebp]
  006c9	c1 e2 05	 shl	 edx, 5
  006cc	0f b6 44 11 18	 movzx	 eax, BYTE PTR [ecx+edx+24]
  006d1	50		 push	 eax
  006d2	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  006d5	51		 push	 ecx
  006d6	8b 55 e8	 mov	 edx, DWORD PTR _itemId$220015[ebp]
  006d9	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  006df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006e2	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  006e6	8b 55 f4	 mov	 edx, DWORD PTR _j$220002[ebp]
  006e9	c1 e2 05	 shl	 edx, 5
  006ec	0f b6 44 11 14	 movzx	 eax, BYTE PTR [ecx+edx+20]
  006f1	50		 push	 eax
  006f2	8b 4d e8	 mov	 ecx, DWORD PTR _itemId$220015[ebp]
  006f5	69 c9 20 01 00
	00		 imul	 ecx, 288		; 00000120H
  006fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006fe	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00702	8b 4d f4	 mov	 ecx, DWORD PTR _j$220002[ebp]
  00705	c1 e1 05	 shl	 ecx, 5
  00708	0f b6 54 08 10	 movzx	 edx, BYTE PTR [eax+ecx+16]
  0070d	52		 push	 edx
  0070e	8b 45 e8	 mov	 eax, DWORD PTR _itemId$220015[ebp]
  00711	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  00717	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0071a	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0071e	8b 45 f4	 mov	 eax, DWORD PTR _j$220002[ebp]
  00721	c1 e0 05	 shl	 eax, 5
  00724	0f b6 4c 02 0c	 movzx	 ecx, BYTE PTR [edx+eax+12]
  00729	51		 push	 ecx
  0072a	6a 00		 push	 0
  0072c	8b 55 e8	 mov	 edx, DWORD PTR _itemId$220015[ebp]
  0072f	69 d2 20 01 00
	00		 imul	 edx, 288		; 00000120H
  00735	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00738	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0073c	8b 55 f4	 mov	 edx, DWORD PTR _j$220002[ebp]
  0073f	c1 e2 05	 shl	 edx, 5
  00742	0f b6 44 11 08	 movzx	 eax, BYTE PTR [ecx+edx+8]
  00747	50		 push	 eax
  00748	8b 4d e8	 mov	 ecx, DWORD PTR _itemId$220015[ebp]
  0074b	69 c9 20 01 00
	00		 imul	 ecx, 288		; 00000120H
  00751	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00754	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00758	8b 4d f4	 mov	 ecx, DWORD PTR _j$220002[ebp]
  0075b	c1 e1 05	 shl	 ecx, 5
  0075e	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00761	c1 e2 09	 shl	 edx, 9
  00764	8b 45 e8	 mov	 eax, DWORD PTR _itemId$220015[ebp]
  00767	69 c0 20 01 00
	00		 imul	 eax, 288		; 00000120H
  0076d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00770	8d 44 01 04	 lea	 eax, DWORD PTR [ecx+eax+4]
  00774	8b 4d f4	 mov	 ecx, DWORD PTR _j$220002[ebp]
  00777	c1 e1 05	 shl	 ecx, 5
  0077a	03 54 08 04	 add	 edx, DWORD PTR [eax+ecx+4]
  0077e	52		 push	 edx
  0077f	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00782	0f b6 82 46 01
	00 00		 movzx	 eax, BYTE PTR [edx+326]
  00789	50		 push	 eax
  0078a	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0078d	0f b6 91 44 01
	00 00		 movzx	 edx, BYTE PTR [ecx+324]
  00794	52		 push	 edx
  00795	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00798	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0079f	51		 push	 ecx
  007a0	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  007a3	52		 push	 edx
  007a4	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  007a9	83 c4 34	 add	 esp, 52			; 00000034H
$LN1@Main:

; 111  : 			}
; 112  : 
; 113  : 			return true;	

  007ac	b0 01		 mov	 al, 1
  007ae	eb 07		 jmp	 SHORT $LN12@Main
$LN7@Main:

; 114  : 		}
; 115  : 	}

  007b0	e9 31 fd ff ff	 jmp	 $LN9@Main
$LN8@Main:

; 116  : 	return false;

  007b5	32 c0		 xor	 al, al
$LN12@Main:

; 117  : }

  007b7	5f		 pop	 edi
  007b8	5e		 pop	 esi
  007b9	5b		 pop	 ebx
  007ba	8b e5		 mov	 esp, ebp
  007bc	5d		 pop	 ebp
  007bd	c2 04 00	 ret	 4
?Main@cBloodCastleRewardItem@@QAE_NH@Z ENDP		; cBloodCastleRewardItem::Main
_TEXT	ENDS
END
