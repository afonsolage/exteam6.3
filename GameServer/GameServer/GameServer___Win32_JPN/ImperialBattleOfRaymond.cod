; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ImperialBattleOfRaymond.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_DATA	ENDS
CONST	SEGMENT
_g_KatoGate DD	020dH
	DD	092H
	DD	0bfH
	DD	03H
	DD	020fH
	DD	077H
	DD	0c0H
	DD	03H
	DD	020dH
	DD	059H
	DD	0c3H
	DD	03H
	DD	0210H
	DD	0deH
	DD	086H
	DD	01H
	DD	020cH
	DD	0deH
	DD	0a0H
	DD	01H
	DD	020fH
	DD	0dfH
	DD	0c1H
	DD	01H
	DD	020dH
	DD	0a7H
	DD	0d9H
	DD	01H
	ORG $+32
_g_KatoMapAttr DD 08eH
	DD	0beH
	DD	093H
	DD	0c0H
	DD	073H
	DD	0bfH
	DD	078H
	DD	0c1H
	DD	055H
	DD	0c3H
	DD	05aH
	DD	0c5H
	DD	0deH
	DD	085H
	DD	0e0H
	DD	08aH
	DD	0deH
	DD	09fH
	DD	0e0H
	DD	0a4H
	DD	0deH
	DD	0c0H
	DD	0e0H
	DD	0c5H
	DD	0a6H
	DD	0d8H
	DD	0a8H
	DD	0ddH
	ORG $+32
_g_KatoTrap DD	071H
	DD	0c2H
	DD	070H
	DD	077H
	DD	06cH
	DD	0cbH
	DD	062H
	DD	0ccH
	DD	05dH
	DD	0cbH
	DD	05dH
	DD	0c6H
	DD	05eH
	DD	0c2H
	DD	05dH
	DD	0beH
	DD	061H
	DD	0bbH
	DD	06dH
	DD	057H
	DD	072H
	DD	059H
	DD	0dfH
	DD	0a5H
	DD	0deH
	DD	0a9H
	DD	0dfH
	DD	0aeH
	ORG $+8
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?ResetData@CImperialBattleOfRaymond@@QAEXXZ	; CImperialBattleOfRaymond::ResetData
PUBLIC	??_7CImperialBattleOfRaymond@@6B@		; CImperialBattleOfRaymond::`vftable'
PUBLIC	??0CImperialBattleOfRaymond@@QAE@XZ		; CImperialBattleOfRaymond::CImperialBattleOfRaymond
PUBLIC	??_R4CImperialBattleOfRaymond@@6B@		; CImperialBattleOfRaymond::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImperialBattleOfRaymond@@@8		; CImperialBattleOfRaymond `RTTI Type Descriptor'
PUBLIC	??_R3CImperialBattleOfRaymond@@8		; CImperialBattleOfRaymond::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImperialBattleOfRaymond@@8		; CImperialBattleOfRaymond::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImperialBattleOfRaymond@@8	; CImperialBattleOfRaymond::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECImperialBattleOfRaymond@@UAEPAXI@Z:PROC	; CImperialBattleOfRaymond::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CImperialBattleOfRaymond@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\imperialbattleofraymond.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CImperialBattleOfRaymond@@8 DD FLAT:??_R0?AVCImperialBattleOfRaymond@@@8 ; CImperialBattleOfRaymond::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImperialBattleOfRaymond@@8
rdata$r	ENDS
;	COMDAT ??_R2CImperialBattleOfRaymond@@8
rdata$r	SEGMENT
??_R2CImperialBattleOfRaymond@@8 DD FLAT:??_R1A@?0A@EA@CImperialBattleOfRaymond@@8 ; CImperialBattleOfRaymond::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CImperialBattleOfRaymond@@8
rdata$r	SEGMENT
??_R3CImperialBattleOfRaymond@@8 DD 00H			; CImperialBattleOfRaymond::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CImperialBattleOfRaymond@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImperialBattleOfRaymond@@@8
_DATA	SEGMENT
??_R0?AVCImperialBattleOfRaymond@@@8 DD FLAT:??_7type_info@@6B@ ; CImperialBattleOfRaymond `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImperialBattleOfRaymond@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CImperialBattleOfRaymond@@6B@
rdata$r	SEGMENT
??_R4CImperialBattleOfRaymond@@6B@ DD 00H		; CImperialBattleOfRaymond::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImperialBattleOfRaymond@@@8
	DD	FLAT:??_R3CImperialBattleOfRaymond@@8
rdata$r	ENDS
;	COMDAT ??_7CImperialBattleOfRaymond@@6B@
CONST	SEGMENT
??_7CImperialBattleOfRaymond@@6B@ DD FLAT:??_R4CImperialBattleOfRaymond@@6B@ ; CImperialBattleOfRaymond::`vftable'
	DD	FLAT:??_ECImperialBattleOfRaymond@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CImperialBattleOfRaymond@@QAE@XZ PROC		; CImperialBattleOfRaymond::CImperialBattleOfRaymond
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CImperialBattleOfRaymond@@6B@

; 15   : 	this->ResetData();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?ResetData@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ResetData

; 16   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CImperialBattleOfRaymond@@QAE@XZ ENDP		; CImperialBattleOfRaymond::CImperialBattleOfRaymond
_TEXT	ENDS
PUBLIC	??1CImperialBattleOfRaymond@@UAE@XZ		; CImperialBattleOfRaymond::~CImperialBattleOfRaymond
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCImperialBattleOfRaymond@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCImperialBattleOfRaymond@@UAEPAXI@Z PROC		; CImperialBattleOfRaymond::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CImperialBattleOfRaymond@@UAE@XZ ; CImperialBattleOfRaymond::~CImperialBattleOfRaymond
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCImperialBattleOfRaymond@@UAEPAXI@Z ENDP		; CImperialBattleOfRaymond::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CImperialBattleOfRaymond@@UAE@XZ PROC		; CImperialBattleOfRaymond::~CImperialBattleOfRaymond
; _this$ = ecx

; 19   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CImperialBattleOfRaymond@@6B@

; 20   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??1CImperialBattleOfRaymond@@UAE@XZ ENDP		; CImperialBattleOfRaymond::~CImperialBattleOfRaymond
_TEXT	ENDS
PUBLIC	?Reset@BATTLEOFRAYMOND_DATA@@QAEXXZ		; BATTLEOFRAYMOND_DATA::Reset
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetData@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::ResetData
; _this$ = ecx

; 23   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 44	 sub	 esp, 68			; 00000044H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	this->m_BattleData.Reset();

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	83 c1 04	 add	 ecx, 4
  00062	e8 00 00 00 00	 call	 ?Reset@BATTLEOFRAYMOND_DATA@@QAEXXZ ; BATTLEOFRAYMOND_DATA::Reset

; 25   : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?ResetData@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::ResetData
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\imperialbattleofraymond.h
_TEXT	ENDS
;	COMDAT ?Reset@BATTLEOFRAYMOND_DATA@@QAEXXZ
_TEXT	SEGMENT
_n$218879 = -8						; size = 4
_this$ = -4						; size = 4
?Reset@BATTLEOFRAYMOND_DATA@@QAEXXZ PROC		; BATTLEOFRAYMOND_DATA::Reset, COMDAT
; _this$ = ecx

; 17   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : 		for(int n=0;n<9;++n)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$218879[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN3@Reset
$LN2@Reset:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _n$218879[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _n$218879[ebp], eax
$LN3@Reset:
  0001e	83 7d f8 09	 cmp	 DWORD PTR _n$218879[ebp], 9
  00022	7d 10		 jge	 SHORT $LN1@Reset

; 19   : 		{
; 20   : 			this->GateIndex[n] = -1;

  00024	8b 45 f8	 mov	 eax, DWORD PTR _n$218879[ebp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	c7 44 81 04 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+4], -1

; 21   : 		}

  00032	eb e1		 jmp	 SHORT $LN2@Reset
$LN1@Reset:

; 22   : 		this->CurrentLeaderIndex = -1;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 23   : 		this->MonsterCount = 0;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 24   : 		this->TrapIndex = -1;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 3c ff ff
	ff ff		 mov	 DWORD PTR [eax+60], -1

; 25   : 		this->NotifyCount = -1;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c6 40 44 ff	 mov	 BYTE PTR [eax+68], 255	; 000000ffH

; 26   : 	}

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?Reset@BATTLEOFRAYMOND_DATA@@QAEXXZ ENDP		; BATTLEOFRAYMOND_DATA::Reset
_TEXT	ENDS
PUBLIC	?SetState_END@CImperialBattleOfRaymond@@QAEXXZ	; CImperialBattleOfRaymond::SetState_END
PUBLIC	?SetState_PHAZE3@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_PHAZE3
PUBLIC	?SetState_STANDBY3@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_STANDBY3
PUBLIC	?SetState_PHAZE2@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_PHAZE2
PUBLIC	?SetState_STANDBY2@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_STANDBY2
PUBLIC	?SetState_PHAZE1@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_PHAZE1
PUBLIC	?SetState_STANDBY1@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_STANDBY1
PUBLIC	?SetState_NONE@CImperialBattleOfRaymond@@QAEXXZ	; CImperialBattleOfRaymond::SetState_NONE
PUBLIC	?SetState@CImperialBattleOfRaymond@@QAEXH@Z	; CImperialBattleOfRaymond::SetState
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\imperialbattleofraymond.cpp
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_iState$ = 8						; size = 4
?SetState@CImperialBattleOfRaymond@@QAEXH@Z PROC	; CImperialBattleOfRaymond::SetState
; _this$ = ecx

; 28   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 48	 sub	 esp, 72			; 00000048H
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	57		 push	 edi
  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 	switch ( iState )

  0007c	8b 45 08	 mov	 eax, DWORD PTR _iState$[ebp]
  0007f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00082	83 7d b8 07	 cmp	 DWORD PTR tv64[ebp], 7
  00086	77 58		 ja	 SHORT $LN11@SetState
  00088	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  0008b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@SetState[ecx*4]
$LN8@SetState:

; 30   : 	{
; 31   : 		case 0:
; 32   : 			this->SetState_NONE();

  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	e8 00 00 00 00	 call	 ?SetState_NONE@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_NONE

; 33   : 			break;

  0009a	eb 44		 jmp	 SHORT $LN11@SetState
$LN7@SetState:

; 34   : 		case 1:
; 35   : 			this->SetState_STANDBY1();

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?SetState_STANDBY1@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_STANDBY1

; 36   : 			break;

  000a4	eb 3a		 jmp	 SHORT $LN11@SetState
$LN6@SetState:

; 37   : 		case 2:
; 38   : 			this->SetState_PHAZE1();

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?SetState_PHAZE1@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_PHAZE1

; 39   : 			break;

  000ae	eb 30		 jmp	 SHORT $LN11@SetState
$LN5@SetState:

; 40   : 		case 3:
; 41   : 			this->SetState_STANDBY2();

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	e8 00 00 00 00	 call	 ?SetState_STANDBY2@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_STANDBY2

; 42   : 			break;

  000b8	eb 26		 jmp	 SHORT $LN11@SetState
$LN4@SetState:

; 43   : 		case 4:
; 44   : 			this->SetState_PHAZE2();

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?SetState_PHAZE2@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_PHAZE2

; 45   : 			break;

  000c2	eb 1c		 jmp	 SHORT $LN11@SetState
$LN3@SetState:

; 46   : 		case 5: 
; 47   : 			this->SetState_STANDBY3();

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	e8 00 00 00 00	 call	 ?SetState_STANDBY3@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_STANDBY3

; 48   : 			break;

  000cc	eb 12		 jmp	 SHORT $LN11@SetState
$LN2@SetState:

; 49   : 		case 6:
; 50   : 			this->SetState_PHAZE3();

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	e8 00 00 00 00	 call	 ?SetState_PHAZE3@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_PHAZE3

; 51   : 			break;

  000d6	eb 08		 jmp	 SHORT $LN11@SetState
$LN1@SetState:

; 52   : 		case 7:
; 53   : 			this->SetState_END();

  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	e8 00 00 00 00	 call	 ?SetState_END@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetState_END
$LN11@SetState:

; 54   : 			break;
; 55   : 	}
; 56   : }

  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
  000e9	8d 49 00	 npad	 3
$LN13@SetState:
  000ec	00 00 00 00	 DD	 $LN8@SetState
  000f0	00 00 00 00	 DD	 $LN7@SetState
  000f4	00 00 00 00	 DD	 $LN6@SetState
  000f8	00 00 00 00	 DD	 $LN5@SetState
  000fc	00 00 00 00	 DD	 $LN4@SetState
  00100	00 00 00 00	 DD	 $LN3@SetState
  00104	00 00 00 00	 DD	 $LN2@SetState
  00108	00 00 00 00	 DD	 $LN1@SetState
?SetState@CImperialBattleOfRaymond@@QAEXH@Z ENDP	; CImperialBattleOfRaymond::SetState
_TEXT	ENDS
PUBLIC	??_C@_0DI@BJPFEGJL@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ ; `string'
EXTRN	?DelGroupInstance@TMonsterAIGroup@@SAHH@Z:PROC	; TMonsterAIGroup::DelGroupInstance
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
;	COMDAT ??_C@_0DI@BJPFEGJL@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
CONST	SEGMENT
??_C@_0DI@BJPFEGJL@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ DB '[ '
	DB	'IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> NONE', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetState_NONE@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::SetState_NONE
; _this$ = ecx

; 59   : {

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	83 ec 44	 sub	 esp, 68			; 00000044H
  00116	53		 push	 ebx
  00117	56		 push	 esi
  00118	57		 push	 edi
  00119	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 60   : 	LogAddC(2, "[ IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> NONE", this->m_BattleData.CurrentState);

  0011c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00122	51		 push	 ecx
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@BJPFEGJL@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
  00128	6a 02		 push	 2
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH

; 61   : 	this->ResetData();

  00133	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	e8 00 00 00 00	 call	 ?ResetData@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ResetData

; 62   : 	TMonsterAIGroup::DelGroupInstance(30);

  0013b	6a 1e		 push	 30			; 0000001eH
  0013d	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  00142	83 c4 04	 add	 esp, 4

; 63   : 	TMonsterAIGroup::DelGroupInstance(31);

  00145	6a 1f		 push	 31			; 0000001fH
  00147	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  0014c	83 c4 04	 add	 esp, 4

; 64   : 	TMonsterAIGroup::DelGroupInstance(35);

  0014f	6a 23		 push	 35			; 00000023H
  00151	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  00156	83 c4 04	 add	 esp, 4

; 65   : 	this->m_BattleData.CurrentState = BATTLEOFRAYMOND_STATE_NONE;

  00159	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 66   : }

  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
?SetState_NONE@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::SetState_NONE
_TEXT	ENDS
PUBLIC	?SendEventState@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventState
PUBLIC	??_C@_0EG@EAOKJCJB@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ ; `string'
PUBLIC	??_C@_0DM@MKHJFOCM@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ ; `string'
EXTRN	?Init@TMonsterAIGroup@@SAXH@Z:PROC		; TMonsterAIGroup::Init
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT ??_C@_0EG@EAOKJCJB@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
CONST	SEGMENT
??_C@_0EG@EAOKJCJB@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ DB '[ '
	DB	'IMPERIAL FORT ] [ BattleOfRaymond ] Create Gate Index: %d Cla'
	DB	'ss: %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@MKHJFOCM@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
CONST	SEGMENT
??_C@_0DM@MKHJFOCM@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ DB '[ '
	DB	'IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> STANDBY1', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$221115 = -8						; size = 4
_this$ = -4						; size = 4
?SetState_STANDBY1@CImperialBattleOfRaymond@@QAEXXZ PROC ; CImperialBattleOfRaymond::SetState_STANDBY1
; _this$ = ecx

; 70   : {

  00170	55		 push	 ebp
  00171	8b ec		 mov	 ebp, esp
  00173	83 ec 48	 sub	 esp, 72			; 00000048H
  00176	53		 push	 ebx
  00177	56		 push	 esi
  00178	57		 push	 edi
  00179	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 71   : 	LogAddC(2, "[ IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> STANDBY1", this->m_BattleData.CurrentState);

  0017c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00182	51		 push	 ecx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@MKHJFOCM@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
  00188	6a 02		 push	 2
  0018a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   : 	for(int i=0;i<7;++i)

  00193	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$221115[ebp], 0
  0019a	eb 09		 jmp	 SHORT $LN4@SetState_S
$LN3@SetState_S:
  0019c	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  0019f	83 c0 01	 add	 eax, 1
  001a2	89 45 f8	 mov	 DWORD PTR _i$221115[ebp], eax
$LN4@SetState_S:
  001a5	83 7d f8 07	 cmp	 DWORD PTR _i$221115[ebp], 7
  001a9	0f 8d 51 02 00
	00		 jge	 $LN2@SetState_S

; 73   : 	{
; 74   : 		this->m_BattleData.GateIndex[i] = gObjAddMonster(71);

  001af	6a 47		 push	 71			; 00000047H
  001b1	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  001b6	83 c4 04	 add	 esp, 4
  001b9	98		 cwde
  001ba	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  001bd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001c0	89 44 8a 08	 mov	 DWORD PTR [edx+ecx*4+8], eax

; 75   : 		if(this->m_BattleData.GateIndex[i] >= 0)

  001c4	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  001c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ca	83 7c 81 08 00	 cmp	 DWORD PTR [ecx+eax*4+8], 0
  001cf	0f 8c 26 02 00
	00		 jl	 $LN1@SetState_S

; 76   : 		{
; 77   : 			gObj[this->m_BattleData.GateIndex[i]].MapNumber = 71;

  001d5	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  001d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001db	8b 54 81 08	 mov	 edx, DWORD PTR [ecx+eax*4+8]
  001df	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  001e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ea	c6 84 10 49 01
	00 00 47	 mov	 BYTE PTR [eax+edx+329], 71 ; 00000047H

; 78   : 			gObj[this->m_BattleData.GateIndex[i]].X = g_KatoGate[i].X;

  001f2	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  001f5	c1 e0 04	 shl	 eax, 4
  001f8	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  001fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001fe	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  00202	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00208	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0020e	66 8b 80 04 00
	00 00		 mov	 ax, WORD PTR _g_KatoGate[eax+4]
  00215	66 89 84 0a 44
	01 00 00	 mov	 WORD PTR [edx+ecx+324], ax

; 79   : 			gObj[this->m_BattleData.GateIndex[i]].Y = g_KatoGate[i].Y;

  0021d	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  00220	c1 e0 04	 shl	 eax, 4
  00223	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  00226	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00229	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  0022d	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00233	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00239	66 8b 80 08 00
	00 00		 mov	 ax, WORD PTR _g_KatoGate[eax+8]
  00240	66 89 84 0a 46
	01 00 00	 mov	 WORD PTR [edx+ecx+326], ax

; 80   : 			gObj[this->m_BattleData.GateIndex[i]].Dir = g_KatoGate[i].Dir;

  00248	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  0024b	c1 e0 04	 shl	 eax, 4
  0024e	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  00251	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00254	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  00258	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0025e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00264	8a 80 0c 00 00
	00		 mov	 al, BYTE PTR _g_KatoGate[eax+12]
  0026a	88 84 0a 48 01
	00 00		 mov	 BYTE PTR [edx+ecx+328], al

; 81   : 			gObj[this->m_BattleData.GateIndex[i]].TX = g_KatoGate[i].X;

  00271	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  00274	c1 e0 04	 shl	 eax, 4
  00277	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  0027a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0027d	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  00281	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00287	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0028d	66 8b 80 04 00
	00 00		 mov	 ax, WORD PTR _g_KatoGate[eax+4]
  00294	66 89 84 0a 7c
	01 00 00	 mov	 WORD PTR [edx+ecx+380], ax

; 82   : 			gObj[this->m_BattleData.GateIndex[i]].TY = g_KatoGate[i].Y;

  0029c	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  0029f	c1 e0 04	 shl	 eax, 4
  002a2	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  002a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002a8	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  002ac	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  002b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002b8	66 8b 80 08 00
	00 00		 mov	 ax, WORD PTR _g_KatoGate[eax+8]
  002bf	66 89 84 0a 7e
	01 00 00	 mov	 WORD PTR [edx+ecx+382], ax

; 83   : 			gObj[this->m_BattleData.GateIndex[i]].StartX = g_KatoGate[i].X;

  002c7	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  002ca	c1 e0 04	 shl	 eax, 4
  002cd	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  002d0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002d3	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  002d7	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  002dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002e3	8a 80 04 00 00
	00		 mov	 al, BYTE PTR _g_KatoGate[eax+4]
  002e9	88 84 0a 76 01
	00 00		 mov	 BYTE PTR [edx+ecx+374], al

; 84   : 			gObj[this->m_BattleData.GateIndex[i]].StartY = g_KatoGate[i].Y;

  002f0	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  002f3	c1 e0 04	 shl	 eax, 4
  002f6	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  002f9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002fc	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  00300	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00306	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0030c	8a 80 08 00 00
	00		 mov	 al, BYTE PTR _g_KatoGate[eax+8]
  00312	88 84 0a 77 01
	00 00		 mov	 BYTE PTR [edx+ecx+375], al

; 85   : 			gObj[this->m_BattleData.GateIndex[i]].m_OldX = g_KatoGate[i].X;

  00319	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  0031c	c1 e0 04	 shl	 eax, 4
  0031f	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  00322	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00325	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  00329	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0032f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00335	66 8b 80 04 00
	00 00		 mov	 ax, WORD PTR _g_KatoGate[eax+4]
  0033c	66 89 84 0a 78
	01 00 00	 mov	 WORD PTR [edx+ecx+376], ax

; 86   : 			gObj[this->m_BattleData.GateIndex[i]].m_OldY = g_KatoGate[i].Y;

  00344	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  00347	c1 e0 04	 shl	 eax, 4
  0034a	8b 4d f8	 mov	 ecx, DWORD PTR _i$221115[ebp]
  0034d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00350	8b 4c 8a 08	 mov	 ecx, DWORD PTR [edx+ecx*4+8]
  00354	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0035a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00360	66 8b 80 08 00
	00 00		 mov	 ax, WORD PTR _g_KatoGate[eax+8]
  00367	66 89 84 0a 7a
	01 00 00	 mov	 WORD PTR [edx+ecx+378], ax

; 87   : 			gObjSetMonster(this->m_BattleData.GateIndex[i], g_KatoGate[i].Class);

  0036f	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  00372	c1 e0 04	 shl	 eax, 4
  00375	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _g_KatoGate[eax]
  0037b	51		 push	 ecx
  0037c	8b 55 f8	 mov	 edx, DWORD PTR _i$221115[ebp]
  0037f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00382	8b 4c 90 08	 mov	 ecx, DWORD PTR [eax+edx*4+8]
  00386	51		 push	 ecx
  00387	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  0038c	83 c4 08	 add	 esp, 8

; 88   : 			gObj[this->m_BattleData.GateIndex[i]].m_ImmuneToHarmCount = 3600; // IMMUNITY FOR GATES

  0038f	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00395	8b 54 81 08	 mov	 edx, DWORD PTR [ecx+eax*4+8]
  00399	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0039f	b8 10 0e 00 00	 mov	 eax, 3600		; 00000e10H
  003a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003aa	66 89 84 11 84
	22 00 00	 mov	 WORD PTR [ecx+edx+8836], ax

; 89   : 			gObj[this->m_BattleData.GateIndex[i]].m_ImmuneToMagicCount = 3600; // IMMUNITY FOR GATES

  003b2	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  003b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b8	8b 54 81 08	 mov	 edx, DWORD PTR [ecx+eax*4+8]
  003bc	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  003c2	b8 10 0e 00 00	 mov	 eax, 3600		; 00000e10H
  003c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003cd	66 89 84 11 82
	22 00 00	 mov	 WORD PTR [ecx+edx+8834], ax

; 90   : 
; 91   : 			LogAddTD("[ IMPERIAL FORT ] [ BattleOfRaymond ] Create Gate Index: %d Class: %d",
; 92   : 				this->m_BattleData.GateIndex[i], g_KatoGate[i].Class);

  003d5	8b 45 f8	 mov	 eax, DWORD PTR _i$221115[ebp]
  003d8	c1 e0 04	 shl	 eax, 4
  003db	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _g_KatoGate[eax]
  003e1	51		 push	 ecx
  003e2	8b 55 f8	 mov	 edx, DWORD PTR _i$221115[ebp]
  003e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e8	8b 4c 90 08	 mov	 ecx, DWORD PTR [eax+edx*4+8]
  003ec	51		 push	 ecx
  003ed	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@EAOKJCJB@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
  003f2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003f8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SetState_S:

; 93   : 		}
; 94   : 	}

  003fb	e9 9c fd ff ff	 jmp	 $LN3@SetState_S
$LN2@SetState_S:

; 95   : 	this->m_BattleData.Time = 60000;

  00400	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00403	c7 40 2c 60 ea
	00 00		 mov	 DWORD PTR [eax+44], 60000 ; 0000ea60H

; 96   : 	this->m_BattleData.TickCount = GetTickCount();

  0040a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00410	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00413	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 97   : 	TMonsterAIGroup::Init(30);

  00416	6a 1e		 push	 30			; 0000001eH
  00418	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init
  0041d	83 c4 04	 add	 esp, 4

; 98   : 	this->m_BattleData.MonsterCount = 0;

  00420	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00423	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 99   : 	this->m_BattleData.CurrentAIGroup = 30;

  0042a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0042d	c7 40 3c 1e 00
	00 00		 mov	 DWORD PTR [eax+60], 30	; 0000001eH

; 100  : 	this->m_BattleData.CurrentState = BATTLEOFRAYMOND_STATE_STANDBY1;

  00434	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00437	c7 40 34 01 00
	00 00		 mov	 DWORD PTR [eax+52], 1

; 101  : 	this->SendEventState();

  0043e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00441	e8 00 00 00 00	 call	 ?SendEventState@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventState

; 102  : }

  00446	5f		 pop	 edi
  00447	5e		 pop	 esi
  00448	5b		 pop	 ebx
  00449	8b e5		 mov	 esp, ebp
  0044b	5d		 pop	 ebp
  0044c	c3		 ret	 0
?SetState_STANDBY1@CImperialBattleOfRaymond@@QAEXXZ ENDP ; CImperialBattleOfRaymond::SetState_STANDBY1
_TEXT	ENDS
PUBLIC	??_C@_0DM@OBFEANOP@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ ; `string'
;	COMDAT ??_C@_0DM@OBFEANOP@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
CONST	SEGMENT
??_C@_0DM@OBFEANOP@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ DB '[ '
	DB	'IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> STANDBY2', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetState_STANDBY2@CImperialBattleOfRaymond@@QAEXXZ PROC ; CImperialBattleOfRaymond::SetState_STANDBY2
; _this$ = ecx

; 105  : {

  00450	55		 push	 ebp
  00451	8b ec		 mov	 ebp, esp
  00453	83 ec 44	 sub	 esp, 68			; 00000044H
  00456	53		 push	 ebx
  00457	56		 push	 esi
  00458	57		 push	 edi
  00459	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	LogAddC(2, "[ IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> STANDBY2", this->m_BattleData.CurrentState);

  0045c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0045f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00462	51		 push	 ecx
  00463	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@OBFEANOP@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
  00468	6a 02		 push	 2
  0046a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00470	83 c4 0c	 add	 esp, 12			; 0000000cH

; 107  : 	this->m_BattleData.Time = 60000;

  00473	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00476	c7 40 2c 60 ea
	00 00		 mov	 DWORD PTR [eax+44], 60000 ; 0000ea60H

; 108  : 	this->m_BattleData.TickCount = GetTickCount();

  0047d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00483	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00486	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 109  : 	TMonsterAIGroup::DelGroupInstance(30);

  00489	6a 1e		 push	 30			; 0000001eH
  0048b	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  00490	83 c4 04	 add	 esp, 4

; 110  : 	TMonsterAIGroup::Init(31);

  00493	6a 1f		 push	 31			; 0000001fH
  00495	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init
  0049a	83 c4 04	 add	 esp, 4

; 111  : 	this->m_BattleData.MonsterCount = 0;

  0049d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004a0	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 112  : 	this->m_BattleData.CurrentAIGroup = 31;

  004a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004aa	c7 40 3c 1f 00
	00 00		 mov	 DWORD PTR [eax+60], 31	; 0000001fH

; 113  : 	this->m_BattleData.CurrentState = BATTLEOFRAYMOND_STATE_STANDBY2;

  004b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004b4	c7 40 34 03 00
	00 00		 mov	 DWORD PTR [eax+52], 3

; 114  : 	this->SendEventState();

  004bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004be	e8 00 00 00 00	 call	 ?SendEventState@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventState

; 115  : }

  004c3	5f		 pop	 edi
  004c4	5e		 pop	 esi
  004c5	5b		 pop	 ebx
  004c6	8b e5		 mov	 esp, ebp
  004c8	5d		 pop	 ebp
  004c9	c3		 ret	 0
?SetState_STANDBY2@CImperialBattleOfRaymond@@QAEXXZ ENDP ; CImperialBattleOfRaymond::SetState_STANDBY2
_TEXT	ENDS
PUBLIC	??_C@_0CL@KEAFHCPG@?$FL?5IMPERIAL?5FORT?5?$FN?5Create?5BOSS?5?$CFs@ ; `string'
PUBLIC	??_C@_0DM@PIEPDMKO@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ ; `string'
EXTRN	?FindGroupLeader@TMonsterAIGroup@@SAHH@Z:PROC	; TMonsterAIGroup::FindGroupLeader
;	COMDAT ??_C@_0CL@KEAFHCPG@?$FL?5IMPERIAL?5FORT?5?$FN?5Create?5BOSS?5?$CFs@
CONST	SEGMENT
??_C@_0CL@KEAFHCPG@?$FL?5IMPERIAL?5FORT?5?$FN?5Create?5BOSS?5?$CFs@ DB '['
	DB	' IMPERIAL FORT ] Create BOSS %s Index: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@PIEPDMKO@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
CONST	SEGMENT
??_C@_0DM@PIEPDMKO@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ DB '[ '
	DB	'IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> STANDBY3', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetState_STANDBY3@CImperialBattleOfRaymond@@QAEXXZ PROC ; CImperialBattleOfRaymond::SetState_STANDBY3
; _this$ = ecx

; 118  : {

  004d0	55		 push	 ebp
  004d1	8b ec		 mov	 ebp, esp
  004d3	83 ec 44	 sub	 esp, 68			; 00000044H
  004d6	53		 push	 ebx
  004d7	56		 push	 esi
  004d8	57		 push	 edi
  004d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 	LogAddC(2, "[ IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> STANDBY3", this->m_BattleData.CurrentState);

  004dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004df	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  004e2	51		 push	 ecx
  004e3	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@PIEPDMKO@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
  004e8	6a 02		 push	 2
  004ea	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  004f0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 120  : 
; 121  : 	this->m_BattleData.Time = 60000;

  004f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004f6	c7 40 2c 60 ea
	00 00		 mov	 DWORD PTR [eax+44], 60000 ; 0000ea60H

; 122  : 	this->m_BattleData.TickCount = GetTickCount();

  004fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00503	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00506	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 123  : 	TMonsterAIGroup::DelGroupInstance(31);

  00509	6a 1f		 push	 31			; 0000001fH
  0050b	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  00510	83 c4 04	 add	 esp, 4

; 124  : 	TMonsterAIGroup::Init(35);

  00513	6a 23		 push	 35			; 00000023H
  00515	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init
  0051a	83 c4 04	 add	 esp, 4

; 125  : 	this->m_BattleData.MonsterCount = 0;

  0051d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00520	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 126  : 	this->m_BattleData.CurrentLeaderIndex = TMonsterAIGroup::FindGroupLeader(35);

  00527	6a 23		 push	 35			; 00000023H
  00529	e8 00 00 00 00	 call	 ?FindGroupLeader@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::FindGroupLeader
  0052e	83 c4 04	 add	 esp, 4
  00531	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00534	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 127  : 	LogAddTD("[ IMPERIAL FORT ] Create BOSS %s Index: %d", gObj[this->m_BattleData.CurrentLeaderIndex].Name, this->m_BattleData.CurrentLeaderIndex);

  00537	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0053a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0053d	51		 push	 ecx
  0053e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00541	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00544	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0054a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00550	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  00554	52		 push	 edx
  00555	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KEAFHCPG@?$FL?5IMPERIAL?5FORT?5?$FN?5Create?5BOSS?5?$CFs@
  0055a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00560	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 	this->m_BattleData.CurrentAIGroup = 35;

  00563	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00566	c7 40 3c 23 00
	00 00		 mov	 DWORD PTR [eax+60], 35	; 00000023H

; 129  : 	this->m_BattleData.CurrentState = BATTLEOFRAYMOND_STATE_STANDBY3;

  0056d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00570	c7 40 34 05 00
	00 00		 mov	 DWORD PTR [eax+52], 5

; 130  : 	this->SendEventState();

  00577	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0057a	e8 00 00 00 00	 call	 ?SendEventState@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventState

; 131  : }

  0057f	5f		 pop	 edi
  00580	5e		 pop	 esi
  00581	5b		 pop	 ebx
  00582	8b e5		 mov	 esp, ebp
  00584	5d		 pop	 ebp
  00585	c3		 ret	 0
?SetState_STANDBY3@CImperialBattleOfRaymond@@QAEXXZ ENDP ; CImperialBattleOfRaymond::SetState_STANDBY3
_TEXT	ENDS
PUBLIC	?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers
PUBLIC	??_C@_0P@PLCJDIGB@Quest?5Started?$CB?$AA@	; `string'
PUBLIC	??_C@_0DK@BNMIOBCL@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z:PROC	; TNotice::MakeNoticeMsg
EXTRN	?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA:BYTE ; TMonsterAIGroup::s_iMonsterAIGroupMemberCount
EXTRN	?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z:PROC	; TMonsterAIGroup::ChangeAIOrder
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0P@PLCJDIGB@Quest?5Started?$CB?$AA@
CONST	SEGMENT
??_C@_0P@PLCJDIGB@Quest?5Started?$CB?$AA@ DB 'Quest Started!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@BNMIOBCL@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
CONST	SEGMENT
??_C@_0DK@BNMIOBCL@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ DB '[ '
	DB	'IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> PHAZE1', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pNotice$ = -280					; size = 272
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?SetState_PHAZE1@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::SetState_PHAZE1
; _this$ = ecx

; 134  : {

  00590	55		 push	 ebp
  00591	8b ec		 mov	 ebp, esp
  00593	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00599	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0059e	33 c5		 xor	 eax, ebp
  005a0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  005a3	53		 push	 ebx
  005a4	56		 push	 esi
  005a5	57		 push	 edi
  005a6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 135  : 	LogAddC(2, "[ IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> PHAZE1", this->m_BattleData.CurrentState);

  005a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005ac	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  005af	51		 push	 ecx
  005b0	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@BNMIOBCL@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
  005b5	6a 02		 push	 2
  005b7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  005bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 136  : 	gObj[this->m_BattleData.GateIndex[0]].m_ImmuneToHarmCount = 0;

  005c0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005c3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  005c6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  005cc	33 d2		 xor	 edx, edx
  005ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005d3	66 89 94 08 84
	22 00 00	 mov	 WORD PTR [eax+ecx+8836], dx

; 137  : 	gObj[this->m_BattleData.GateIndex[0]].m_ImmuneToMagicCount = 0; // REMOVE IMMUNITY

  005db	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005de	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  005e1	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  005e7	33 d2		 xor	 edx, edx
  005e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005ee	66 89 94 08 82
	22 00 00	 mov	 WORD PTR [eax+ecx+8834], dx

; 138  : 	this->m_BattleData.Time = 600000;

  005f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005f9	c7 40 2c c0 27
	09 00		 mov	 DWORD PTR [eax+44], 600000 ; 000927c0H

; 139  : 	this->m_BattleData.TickCount = GetTickCount();

  00600	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00606	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00609	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 140  : 	TMonsterAIGroup::ChangeAIOrder(30, 1);

  0060c	6a 01		 push	 1
  0060e	6a 1e		 push	 30			; 0000001eH
  00610	e8 00 00 00 00	 call	 ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ; TMonsterAIGroup::ChangeAIOrder
  00615	83 c4 08	 add	 esp, 8

; 141  : 	this->m_BattleData.MonsterCount = TMonsterAIGroup::s_iMonsterAIGroupMemberCount[30];

  00618	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0061b	8b 0d 78 00 00
	00		 mov	 ecx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA+120
  00621	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 142  : 	this->m_BattleData.PhazeStep = 0;

  00624	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00627	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 143  : 	this->m_BattleData.NotifyCount = -1;

  0062e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00631	c6 40 48 ff	 mov	 BYTE PTR [eax+72], 255	; 000000ffH

; 144  : 	PMSG_NOTICE pNotice;
; 145  : 	TNotice::MakeNoticeMsg(&pNotice, 0, "Quest Started!");

  00635	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLCJDIGB@Quest?5Started?$CB?$AA@
  0063a	6a 00		 push	 0
  0063c	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  00642	50		 push	 eax
  00643	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  00648	83 c4 0c	 add	 esp, 12			; 0000000cH

; 146  : 	this->SendImperialPlayers((LPBYTE)&pNotice, pNotice.h.size);

  0064b	0f b6 85 e9 fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$[ebp+1]
  00652	50		 push	 eax
  00653	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$[ebp]
  00659	51		 push	 ecx
  0065a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0065d	e8 00 00 00 00	 call	 ?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers

; 147  : 	this->m_BattleData.CurrentState = BATTLEOFRAYMOND_STATE_PHAZE1;

  00662	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00665	c7 40 34 02 00
	00 00		 mov	 DWORD PTR [eax+52], 2

; 148  : }

  0066c	5f		 pop	 edi
  0066d	5e		 pop	 esi
  0066e	5b		 pop	 ebx
  0066f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00672	33 cd		 xor	 ecx, ebp
  00674	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00679	8b e5		 mov	 esp, ebp
  0067b	5d		 pop	 ebp
  0067c	c3		 ret	 0
?SetState_PHAZE1@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::SetState_PHAZE1
_TEXT	ENDS
PUBLIC	??_C@_0DK@DGOFLCOI@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0DK@DGOFLCOI@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
CONST	SEGMENT
??_C@_0DK@DGOFLCOI@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ DB '[ '
	DB	'IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> PHAZE2', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pNotice$ = -280					; size = 272
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?SetState_PHAZE2@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::SetState_PHAZE2
; _this$ = ecx

; 151  : {

  00680	55		 push	 ebp
  00681	8b ec		 mov	 ebp, esp
  00683	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00689	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0068e	33 c5		 xor	 eax, ebp
  00690	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00693	53		 push	 ebx
  00694	56		 push	 esi
  00695	57		 push	 edi
  00696	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 152  : 	LogAddC(2, "[ IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> PHAZE2", this->m_BattleData.CurrentState);

  00699	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0069c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0069f	51		 push	 ecx
  006a0	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@DGOFLCOI@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
  006a5	6a 02		 push	 2
  006a7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  006ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 153  : 	gObj[this->m_BattleData.GateIndex[3]].m_ImmuneToHarmCount = 0;

  006b0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  006b3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  006b6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  006bc	33 d2		 xor	 edx, edx
  006be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  006c3	66 89 94 08 84
	22 00 00	 mov	 WORD PTR [eax+ecx+8836], dx

; 154  : 	gObj[this->m_BattleData.GateIndex[3]].m_ImmuneToMagicCount = 0; // REMOVE IMMUNITY

  006cb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  006ce	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  006d1	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  006d7	33 d2		 xor	 edx, edx
  006d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  006de	66 89 94 08 82
	22 00 00	 mov	 WORD PTR [eax+ecx+8834], dx

; 155  : 	this->m_BattleData.Time = 600000;

  006e6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  006e9	c7 40 2c c0 27
	09 00		 mov	 DWORD PTR [eax+44], 600000 ; 000927c0H

; 156  : 	this->m_BattleData.TickCount = GetTickCount();

  006f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  006f6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006f9	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 157  : 	TMonsterAIGroup::ChangeAIOrder(31, 1);

  006fc	6a 01		 push	 1
  006fe	6a 1f		 push	 31			; 0000001fH
  00700	e8 00 00 00 00	 call	 ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ; TMonsterAIGroup::ChangeAIOrder
  00705	83 c4 08	 add	 esp, 8

; 158  : 	this->m_BattleData.MonsterCount = TMonsterAIGroup::s_iMonsterAIGroupMemberCount[31];

  00708	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0070b	8b 0d 7c 00 00
	00		 mov	 ecx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA+124
  00711	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 159  : 	this->m_BattleData.PhazeStep = 0;

  00714	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00717	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 160  : 	this->m_BattleData.NotifyCount = -1;

  0071e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00721	c6 40 48 ff	 mov	 BYTE PTR [eax+72], 255	; 000000ffH

; 161  : 	PMSG_NOTICE pNotice;
; 162  : 	TNotice::MakeNoticeMsg(&pNotice, 0, "Quest Started!");

  00725	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLCJDIGB@Quest?5Started?$CB?$AA@
  0072a	6a 00		 push	 0
  0072c	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  00732	50		 push	 eax
  00733	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  00738	83 c4 0c	 add	 esp, 12			; 0000000cH

; 163  : 	this->SendImperialPlayers((LPBYTE)&pNotice, pNotice.h.size);

  0073b	0f b6 85 e9 fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$[ebp+1]
  00742	50		 push	 eax
  00743	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$[ebp]
  00749	51		 push	 ecx
  0074a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0074d	e8 00 00 00 00	 call	 ?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers

; 164  : 	this->m_BattleData.CurrentState = BATTLEOFRAYMOND_STATE_PHAZE2;

  00752	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00755	c7 40 34 04 00
	00 00		 mov	 DWORD PTR [eax+52], 4

; 165  : }

  0075c	5f		 pop	 edi
  0075d	5e		 pop	 esi
  0075e	5b		 pop	 ebx
  0075f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00762	33 cd		 xor	 ecx, ebp
  00764	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00769	8b e5		 mov	 esp, ebp
  0076b	5d		 pop	 ebp
  0076c	c3		 ret	 0
?SetState_PHAZE2@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::SetState_PHAZE2
_TEXT	ENDS
PUBLIC	??_C@_0DK@CPPOIDKJ@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0DK@CPPOIDKJ@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
CONST	SEGMENT
??_C@_0DK@CPPOIDKJ@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ DB '[ '
	DB	'IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> PHAZE3', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pNotice$ = -280					; size = 272
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?SetState_PHAZE3@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::SetState_PHAZE3
; _this$ = ecx

; 168  : {

  00770	55		 push	 ebp
  00771	8b ec		 mov	 ebp, esp
  00773	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00779	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0077e	33 c5		 xor	 eax, ebp
  00780	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00783	53		 push	 ebx
  00784	56		 push	 esi
  00785	57		 push	 edi
  00786	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 169  : 	LogAddC(2, "[ IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> PHAZE3", this->m_BattleData.CurrentState);

  00789	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0078c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0078f	51		 push	 ecx
  00790	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CPPOIDKJ@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
  00795	6a 02		 push	 2
  00797	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0079d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : 	gObj[this->m_BattleData.GateIndex[6]].m_ImmuneToHarmCount = 0;

  007a0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  007a3	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  007a6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  007ac	33 d2		 xor	 edx, edx
  007ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  007b3	66 89 94 08 84
	22 00 00	 mov	 WORD PTR [eax+ecx+8836], dx

; 171  : 	gObj[this->m_BattleData.GateIndex[6]].m_ImmuneToMagicCount = 0; // REMOVE IMMUNITY

  007bb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  007be	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  007c1	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  007c7	33 d2		 xor	 edx, edx
  007c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  007ce	66 89 94 08 82
	22 00 00	 mov	 WORD PTR [eax+ecx+8834], dx

; 172  : 	this->m_BattleData.Time = 600000;

  007d6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  007d9	c7 40 2c c0 27
	09 00		 mov	 DWORD PTR [eax+44], 600000 ; 000927c0H

; 173  : 	this->m_BattleData.TickCount = GetTickCount();

  007e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  007e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  007e9	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 174  : 	TMonsterAIGroup::ChangeAIOrder(35, 1);

  007ec	6a 01		 push	 1
  007ee	6a 23		 push	 35			; 00000023H
  007f0	e8 00 00 00 00	 call	 ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ; TMonsterAIGroup::ChangeAIOrder
  007f5	83 c4 08	 add	 esp, 8

; 175  : 	this->m_BattleData.MonsterCount = TMonsterAIGroup::s_iMonsterAIGroupMemberCount[35];

  007f8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  007fb	8b 0d 8c 00 00
	00		 mov	 ecx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA+140
  00801	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 176  : 	this->m_BattleData.PhazeStep = 0;

  00804	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00807	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 177  : 	this->m_BattleData.NotifyCount = -1;

  0080e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00811	c6 40 48 ff	 mov	 BYTE PTR [eax+72], 255	; 000000ffH

; 178  : 	PMSG_NOTICE pNotice;
; 179  : 	TNotice::MakeNoticeMsg(&pNotice, 0, "Quest Started!");

  00815	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLCJDIGB@Quest?5Started?$CB?$AA@
  0081a	6a 00		 push	 0
  0081c	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  00822	50		 push	 eax
  00823	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  00828	83 c4 0c	 add	 esp, 12			; 0000000cH

; 180  : 	this->SendImperialPlayers((LPBYTE)&pNotice, pNotice.h.size);

  0082b	0f b6 85 e9 fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$[ebp+1]
  00832	50		 push	 eax
  00833	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$[ebp]
  00839	51		 push	 ecx
  0083a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0083d	e8 00 00 00 00	 call	 ?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers

; 181  : 	this->m_BattleData.CurrentState = BATTLEOFRAYMOND_STATE_PHAZE3;

  00842	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00845	c7 40 34 06 00
	00 00		 mov	 DWORD PTR [eax+52], 6

; 182  : }

  0084c	5f		 pop	 edi
  0084d	5e		 pop	 esi
  0084e	5b		 pop	 ebx
  0084f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00852	33 cd		 xor	 ecx, ebp
  00854	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00859	8b e5		 mov	 esp, ebp
  0085b	5d		 pop	 ebp
  0085c	c3		 ret	 0
?SetState_PHAZE3@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::SetState_PHAZE3
_TEXT	ENDS
PUBLIC	??_C@_0DH@LDOKFKDF@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ ; `string'
;	COMDAT ??_C@_0DH@LDOKFKDF@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
CONST	SEGMENT
??_C@_0DH@LDOKFKDF@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@ DB '[ '
	DB	'IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> END', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetState_END@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::SetState_END
; _this$ = ecx

; 185  : {

  00860	55		 push	 ebp
  00861	8b ec		 mov	 ebp, esp
  00863	83 ec 44	 sub	 esp, 68			; 00000044H
  00866	53		 push	 ebx
  00867	56		 push	 esi
  00868	57		 push	 edi
  00869	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 186  : 	LogAddC(2, "[ IMPERIAL FORT ] [ BattleOfRaymond ] State(%d) -> END", this->m_BattleData.CurrentState);

  0086c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0086f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00872	51		 push	 ecx
  00873	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LDOKFKDF@?$FL?5IMPERIAL?5FORT?5?$FN?5?$FL?5BattleOfRaym@
  00878	6a 02		 push	 2
  0087a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00880	83 c4 0c	 add	 esp, 12			; 0000000cH

; 187  : 	this->m_BattleData.CurrentState = BATTLEOFRAYMOND_STATE_END;

  00883	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00886	c7 40 34 07 00
	00 00		 mov	 DWORD PTR [eax+52], 7

; 188  : 	return;
; 189  : }

  0088d	5f		 pop	 edi
  0088e	5e		 pop	 esi
  0088f	5b		 pop	 ebx
  00890	8b e5		 mov	 esp, ebp
  00892	5d		 pop	 ebp
  00893	c3		 ret	 0
?SetState_END@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::SetState_END
_TEXT	ENDS
PUBLIC	?ProcState_END@CImperialBattleOfRaymond@@QAEXXZ	; CImperialBattleOfRaymond::ProcState_END
PUBLIC	?ProcState_PHAZE3@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_PHAZE3
PUBLIC	?ProcState_STANDBY3@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_STANDBY3
PUBLIC	?ProcState_PHAZE2@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_PHAZE2
PUBLIC	?ProcState_STANDBY2@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_STANDBY2
PUBLIC	?ProcState_PHAZE1@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_PHAZE1
PUBLIC	?ProcState_STANDBY1@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_STANDBY1
PUBLIC	?Run@CImperialBattleOfRaymond@@QAEXXZ		; CImperialBattleOfRaymond::Run
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Run@CImperialBattleOfRaymond@@QAEXXZ PROC		; CImperialBattleOfRaymond::Run
; _this$ = ecx

; 194  : {

  008a0	55		 push	 ebp
  008a1	8b ec		 mov	 ebp, esp
  008a3	83 ec 48	 sub	 esp, 72			; 00000048H
  008a6	53		 push	 ebx
  008a7	56		 push	 esi
  008a8	57		 push	 edi
  008a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 195  : 	switch ( this->m_BattleData.CurrentState )

  008ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008af	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  008b2	89 4d b8	 mov	 DWORD PTR tv66[ebp], ecx
  008b5	83 7d b8 07	 cmp	 DWORD PTR tv66[ebp], 7
  008b9	77 50		 ja	 SHORT $LN11@Run
  008bb	8b 55 b8	 mov	 edx, DWORD PTR tv66[ebp]
  008be	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN13@Run[edx*4]
$LN8@Run:

; 196  : 	{
; 197  : 		case 0:
; 198  : 			return;

  008c5	eb 44		 jmp	 SHORT $LN11@Run
$LN7@Run:

; 199  : 		case 1:
; 200  : 			this->ProcState_STANDBY1();

  008c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008ca	e8 00 00 00 00	 call	 ?ProcState_STANDBY1@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_STANDBY1

; 201  : 			break;

  008cf	eb 3a		 jmp	 SHORT $LN11@Run
$LN6@Run:

; 202  : 		case 2:
; 203  : 			this->ProcState_PHAZE1();

  008d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008d4	e8 00 00 00 00	 call	 ?ProcState_PHAZE1@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_PHAZE1

; 204  : 			break;

  008d9	eb 30		 jmp	 SHORT $LN11@Run
$LN5@Run:

; 205  : 		case 3:
; 206  : 			this->ProcState_STANDBY2();

  008db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008de	e8 00 00 00 00	 call	 ?ProcState_STANDBY2@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_STANDBY2

; 207  : 			break;

  008e3	eb 26		 jmp	 SHORT $LN11@Run
$LN4@Run:

; 208  : 		case 4:
; 209  : 			this->ProcState_PHAZE2();

  008e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008e8	e8 00 00 00 00	 call	 ?ProcState_PHAZE2@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_PHAZE2

; 210  : 			break;

  008ed	eb 1c		 jmp	 SHORT $LN11@Run
$LN3@Run:

; 211  : 		case 5:
; 212  : 			this->ProcState_STANDBY3();

  008ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008f2	e8 00 00 00 00	 call	 ?ProcState_STANDBY3@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_STANDBY3

; 213  : 			break;

  008f7	eb 12		 jmp	 SHORT $LN11@Run
$LN2@Run:

; 214  : 		case 6:
; 215  : 			this->ProcState_PHAZE3();

  008f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008fc	e8 00 00 00 00	 call	 ?ProcState_PHAZE3@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_PHAZE3

; 216  : 			break;

  00901	eb 08		 jmp	 SHORT $LN11@Run
$LN1@Run:

; 217  : 		case 7:
; 218  : 			this->ProcState_END();

  00903	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00906	e8 00 00 00 00	 call	 ?ProcState_END@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::ProcState_END
$LN11@Run:

; 219  : 			break;
; 220  : 	}
; 221  : }

  0090b	5f		 pop	 edi
  0090c	5e		 pop	 esi
  0090d	5b		 pop	 ebx
  0090e	8b e5		 mov	 esp, ebp
  00910	5d		 pop	 ebp
  00911	c3		 ret	 0
  00912	8b ff		 npad	 2
$LN13@Run:
  00914	00 00 00 00	 DD	 $LN8@Run
  00918	00 00 00 00	 DD	 $LN7@Run
  0091c	00 00 00 00	 DD	 $LN6@Run
  00920	00 00 00 00	 DD	 $LN5@Run
  00924	00 00 00 00	 DD	 $LN4@Run
  00928	00 00 00 00	 DD	 $LN3@Run
  0092c	00 00 00 00	 DD	 $LN2@Run
  00930	00 00 00 00	 DD	 $LN1@Run
?Run@CImperialBattleOfRaymond@@QAEXXZ ENDP		; CImperialBattleOfRaymond::Run
_TEXT	ENDS
PUBLIC	?SendEventInterface@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventInterface
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Tick$ = -8						; size = 4
_this$ = -4						; size = 4
?ProcState_STANDBY1@CImperialBattleOfRaymond@@QAEXXZ PROC ; CImperialBattleOfRaymond::ProcState_STANDBY1
; _this$ = ecx

; 224  : {

  00940	55		 push	 ebp
  00941	8b ec		 mov	 ebp, esp
  00943	83 ec 48	 sub	 esp, 72			; 00000048H
  00946	53		 push	 ebx
  00947	56		 push	 esi
  00948	57		 push	 edi
  00949	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 225  : 	int Tick = GetTickCount() - this->m_BattleData.TickCount;

  0094c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00952	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00955	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  00958	89 45 f8	 mov	 DWORD PTR _Tick$[ebp], eax

; 226  : 	if(Tick >= 1000)

  0095b	81 7d f8 e8 03
	00 00		 cmp	 DWORD PTR _Tick$[ebp], 1000 ; 000003e8H
  00962	7c 36		 jl	 SHORT $LN3@ProcState_

; 227  : 	{
; 228  : 		this->m_BattleData.Time -= Tick;

  00964	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00967	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0096a	2b 4d f8	 sub	 ecx, DWORD PTR _Tick$[ebp]
  0096d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00970	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 229  : 		this->m_BattleData.TickCount = GetTickCount();

  00973	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00979	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0097c	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 230  : 
; 231  : 		this->SendEventInterface();

  0097f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00982	e8 00 00 00 00	 call	 ?SendEventInterface@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventInterface

; 232  : 
; 233  : 		if(this->m_BattleData.Time <= 0)

  00987	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0098a	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0098e	7f 0a		 jg	 SHORT $LN3@ProcState_

; 234  : 		{
; 235  : 			this->SetState(BATTLEOFRAYMOND_STATE_PHAZE1);

  00990	6a 02		 push	 2
  00992	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00995	e8 00 00 00 00	 call	 ?SetState@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetState
$LN3@ProcState_:

; 236  : 		}
; 237  : 	}
; 238  : }

  0099a	5f		 pop	 edi
  0099b	5e		 pop	 esi
  0099c	5b		 pop	 ebx
  0099d	8b e5		 mov	 esp, ebp
  0099f	5d		 pop	 ebp
  009a0	c3		 ret	 0
?ProcState_STANDBY1@CImperialBattleOfRaymond@@QAEXXZ ENDP ; CImperialBattleOfRaymond::ProcState_STANDBY1
_TEXT	ENDS
PUBLIC	?SetSuccessValue@CImperialBattleOfRaymond@@QAEX_N@Z ; CImperialBattleOfRaymond::SetSuccessValue
PUBLIC	?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z	; CImperialBattleOfRaymond::SetMapAttr
PUBLIC	??_C@_0CH@LFMFLPDA@Portal?5will?5be?5closed?5after?5?$CFd?5m@ ; `string'
PUBLIC	?GetIndex@CImperialBattleUser@@QAEHXZ		; CImperialBattleUser::GetIndex
PUBLIC	?MonsterProc@CImperialBattleOfRaymond@@QAEXXZ	; CImperialBattleOfRaymond::MonsterProc
PUBLIC	__$ArrayPad$
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z:PROC ; gObjAttack
EXTRN	?GetUserCount@CImperialBattleUserMng@@QAEHXZ:PROC ; CImperialBattleUserMng::GetUserCount
EXTRN	?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A:BYTE ; g_ImperialBattleUserMng
;	COMDAT ??_C@_0CH@LFMFLPDA@Portal?5will?5be?5closed?5after?5?$CFd?5m@
CONST	SEGMENT
??_C@_0CH@LFMFLPDA@Portal?5will?5be?5closed?5after?5?$CFd?5m@ DB 'Portal '
	DB	'will be closed after %d minutes', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pNotice$221189 = -292					; size = 272
_n$221183 = -20						; size = 4
_i$221179 = -16						; size = 4
_Tick$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcState_PHAZE1@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::ProcState_PHAZE1
; _this$ = ecx

; 241  : {

  009b0	55		 push	 ebp
  009b1	8b ec		 mov	 ebp, esp
  009b3	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  009b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  009be	33 c5		 xor	 eax, ebp
  009c0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  009c3	53		 push	 ebx
  009c4	56		 push	 esi
  009c5	57		 push	 edi
  009c6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 242  : 	int Tick = GetTickCount() - this->m_BattleData.TickCount;

  009c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  009cf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009d2	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  009d5	89 45 f4	 mov	 DWORD PTR _Tick$[ebp], eax

; 243  : 	if(Tick >= 1000)

  009d8	81 7d f4 e8 03
	00 00		 cmp	 DWORD PTR _Tick$[ebp], 1000 ; 000003e8H
  009df	0f 8c 73 03 00
	00		 jl	 $LN15@ProcState_@2

; 244  : 	{
; 245  : 		this->m_BattleData.Time -= Tick;

  009e5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  009e8	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  009eb	2b 4d f4	 sub	 ecx, DWORD PTR _Tick$[ebp]
  009ee	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  009f1	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 246  : 		this->m_BattleData.TickCount = GetTickCount();

  009f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  009fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009fd	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 247  : 
; 248  : 		this->SendEventInterface();

  00a00	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a03	e8 00 00 00 00	 call	 ?SendEventInterface@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventInterface

; 249  : 		this->MonsterProc();

  00a08	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a0b	e8 00 00 00 00	 call	 ?MonsterProc@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::MonsterProc

; 250  : 
; 251  : 		for(int i=0;i<12;++i)

  00a10	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$221179[ebp], 0
  00a17	eb 09		 jmp	 SHORT $LN13@ProcState_@2
$LN12@ProcState_@2:
  00a19	8b 45 f0	 mov	 eax, DWORD PTR _i$221179[ebp]
  00a1c	83 c0 01	 add	 eax, 1
  00a1f	89 45 f0	 mov	 DWORD PTR _i$221179[ebp], eax
$LN13@ProcState_@2:
  00a22	83 7d f0 0c	 cmp	 DWORD PTR _i$221179[ebp], 12 ; 0000000cH
  00a26	0f 8d 56 01 00
	00		 jge	 $LN11@ProcState_@2

; 252  : 		{
; 253  : 			for(int n=0;n<g_ImperialBattleUserMng.GetUserCount();++n)

  00a2c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _n$221183[ebp], 0
  00a33	eb 09		 jmp	 SHORT $LN10@ProcState_@2
$LN9@ProcState_@2:
  00a35	8b 45 ec	 mov	 eax, DWORD PTR _n$221183[ebp]
  00a38	83 c0 01	 add	 eax, 1
  00a3b	89 45 ec	 mov	 DWORD PTR _n$221183[ebp], eax
$LN10@ProcState_@2:
  00a3e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A ; g_ImperialBattleUserMng
  00a43	e8 00 00 00 00	 call	 ?GetUserCount@CImperialBattleUserMng@@QAEHXZ ; CImperialBattleUserMng::GetUserCount
  00a48	39 45 ec	 cmp	 DWORD PTR _n$221183[ebp], eax
  00a4b	0f 8d 2c 01 00
	00		 jge	 $LN8@ProcState_@2

; 254  : 			{
; 255  : 
; 256  : 				if(gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()].X >= g_KatoTrap[i].X-5 && gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()].X <= g_KatoTrap[i].X+5
; 257  : 					&& gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()].Y >= g_KatoTrap[i].Y-5 && gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()].Y <= g_KatoTrap[i].Y+5)

  00a51	8b 4d ec	 mov	 ecx, DWORD PTR _n$221183[ebp]
  00a54	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00a57	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00a5d	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00a62	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00a68	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00a6e	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  00a76	8b 45 f0	 mov	 eax, DWORD PTR _i$221179[ebp]
  00a79	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _g_KatoTrap[eax*8]
  00a80	83 e9 05	 sub	 ecx, 5
  00a83	3b d1		 cmp	 edx, ecx
  00a85	0f 8c ed 00 00
	00		 jl	 $LN7@ProcState_@2
  00a8b	8b 4d ec	 mov	 ecx, DWORD PTR _n$221183[ebp]
  00a8e	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00a91	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00a97	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00a9c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00aa2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00aa8	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  00ab0	8b 45 f0	 mov	 eax, DWORD PTR _i$221179[ebp]
  00ab3	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _g_KatoTrap[eax*8]
  00aba	83 c1 05	 add	 ecx, 5
  00abd	3b d1		 cmp	 edx, ecx
  00abf	0f 8f b3 00 00
	00		 jg	 $LN7@ProcState_@2
  00ac5	8b 4d ec	 mov	 ecx, DWORD PTR _n$221183[ebp]
  00ac8	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00acb	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00ad1	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00ad6	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00adc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00ae2	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  00aea	8b 45 f0	 mov	 eax, DWORD PTR _i$221179[ebp]
  00aed	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _g_KatoTrap[eax*8+4]
  00af4	83 e9 05	 sub	 ecx, 5
  00af7	3b d1		 cmp	 edx, ecx
  00af9	7c 7d		 jl	 SHORT $LN7@ProcState_@2
  00afb	8b 4d ec	 mov	 ecx, DWORD PTR _n$221183[ebp]
  00afe	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00b01	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00b07	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00b0c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00b12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00b18	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  00b20	8b 45 f0	 mov	 eax, DWORD PTR _i$221179[ebp]
  00b23	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _g_KatoTrap[eax*8+4]
  00b2a	83 c1 05	 add	 ecx, 5
  00b2d	3b d1		 cmp	 edx, ecx
  00b2f	7f 47		 jg	 SHORT $LN7@ProcState_@2

; 258  : 				{
; 259  : 					gObjAttack(&gObj[this->m_BattleData.TrapIndex], &gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()], NULL, 0, 0, 0, 0,0,0);

  00b31	6a 00		 push	 0
  00b33	6a 00		 push	 0
  00b35	6a 00		 push	 0
  00b37	6a 00		 push	 0
  00b39	6a 00		 push	 0
  00b3b	6a 00		 push	 0
  00b3d	6a 00		 push	 0
  00b3f	8b 4d ec	 mov	 ecx, DWORD PTR _n$221183[ebp]
  00b42	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00b45	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00b4b	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00b50	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00b56	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00b5c	50		 push	 eax
  00b5d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b60	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00b63	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00b69	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00b6f	51		 push	 ecx
  00b70	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00b75	83 c4 24	 add	 esp, 36			; 00000024H
$LN7@ProcState_@2:

; 260  : 				}
; 261  : 			}

  00b78	e9 b8 fe ff ff	 jmp	 $LN9@ProcState_@2
$LN8@ProcState_@2:

; 262  : 		}

  00b7d	e9 97 fe ff ff	 jmp	 $LN12@ProcState_@2
$LN11@ProcState_@2:

; 263  : 
; 264  : 		if(this->m_BattleData.Time > 0 && (this->m_BattleData.Time/60000) !=this->m_BattleData.NotifyCount)

  00b82	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b85	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00b89	7e 65		 jle	 SHORT $LN6@ProcState_@2
  00b8b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b8e	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00b91	99		 cdq
  00b92	b9 60 ea 00 00	 mov	 ecx, 60000		; 0000ea60H
  00b97	f7 f9		 idiv	 ecx
  00b99	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00b9c	0f b6 4a 48	 movzx	 ecx, BYTE PTR [edx+72]
  00ba0	3b c1		 cmp	 eax, ecx
  00ba2	74 4c		 je	 SHORT $LN6@ProcState_@2

; 265  : 		{
; 266  : 			this->m_BattleData.NotifyCount = this->m_BattleData.Time / 60000;

  00ba4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ba7	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00baa	99		 cdq
  00bab	b9 60 ea 00 00	 mov	 ecx, 60000		; 0000ea60H
  00bb0	f7 f9		 idiv	 ecx
  00bb2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00bb5	88 42 48	 mov	 BYTE PTR [edx+72], al

; 267  : 			PMSG_NOTICE pNotice;
; 268  : 			TNotice::MakeNoticeMsgEx(&pNotice, 0, "Portal will be closed after %d minutes", this->m_BattleData.NotifyCount+1);

  00bb8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00bbb	0f b6 48 48	 movzx	 ecx, BYTE PTR [eax+72]
  00bbf	83 c1 01	 add	 ecx, 1
  00bc2	51		 push	 ecx
  00bc3	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@LFMFLPDA@Portal?5will?5be?5closed?5after?5?$CFd?5m@
  00bc8	6a 00		 push	 0
  00bca	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$221189[ebp]
  00bd0	52		 push	 edx
  00bd1	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  00bd6	83 c4 10	 add	 esp, 16			; 00000010H

; 269  : 			this->SendImperialPlayers((LPBYTE)&pNotice, pNotice.h.size);

  00bd9	0f b6 85 dd fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$221189[ebp+1]
  00be0	50		 push	 eax
  00be1	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$221189[ebp]
  00be7	51		 push	 ecx
  00be8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00beb	e8 00 00 00 00	 call	 ?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers
$LN6@ProcState_@2:

; 270  : 		}
; 271  : 
; 272  : 		if(gObj[this->m_BattleData.GateIndex[0]].Live == false && this->m_BattleData.PhazeStep == 0)

  00bf0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00bf3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00bf6	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00bfc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c02	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  00c07	85 c0		 test	 eax, eax
  00c09	75 22		 jne	 SHORT $LN5@ProcState_@2
  00c0b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c0e	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00c12	75 19		 jne	 SHORT $LN5@ProcState_@2

; 273  : 		{
; 274  : 			this->SetMapAttr(0);

  00c14	6a 00		 push	 0
  00c16	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c19	e8 00 00 00 00	 call	 ?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetMapAttr

; 275  : 			this->m_BattleData.PhazeStep++;

  00c1e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c21	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00c24	83 c1 01	 add	 ecx, 1
  00c27	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c2a	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
$LN5@ProcState_@2:

; 276  : 		}
; 277  : 
; 278  : 		if(this->m_BattleData.MonsterCount <= 0 && this->m_BattleData.PhazeStep == 1)

  00c2d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c30	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00c34	7f 4e		 jg	 SHORT $LN4@ProcState_@2
  00c36	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c39	83 78 44 01	 cmp	 DWORD PTR [eax+68], 1
  00c3d	75 45		 jne	 SHORT $LN4@ProcState_@2

; 279  : 		{
; 280  : 			gObj[this->m_BattleData.GateIndex[1]].m_ImmuneToHarmCount = 0;

  00c3f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c42	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c45	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00c4b	33 d2		 xor	 edx, edx
  00c4d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c52	66 89 94 08 84
	22 00 00	 mov	 WORD PTR [eax+ecx+8836], dx

; 281  : 			gObj[this->m_BattleData.GateIndex[1]].m_ImmuneToMagicCount = 0;

  00c5a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c5d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c60	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00c66	33 d2		 xor	 edx, edx
  00c68	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c6d	66 89 94 08 82
	22 00 00	 mov	 WORD PTR [eax+ecx+8834], dx

; 282  : 			this->m_BattleData.PhazeStep++;

  00c75	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c78	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00c7b	83 c1 01	 add	 ecx, 1
  00c7e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c81	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
$LN4@ProcState_@2:

; 283  : 		}
; 284  : 		if(gObj[this->m_BattleData.GateIndex[1]].Live == false && this->m_BattleData.PhazeStep == 2)

  00c84	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c87	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c8a	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00c90	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c96	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  00c9b	85 c0		 test	 eax, eax
  00c9d	75 58		 jne	 SHORT $LN3@ProcState_@2
  00c9f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ca2	83 78 44 02	 cmp	 DWORD PTR [eax+68], 2
  00ca6	75 4f		 jne	 SHORT $LN3@ProcState_@2

; 285  : 		{
; 286  : 			gObj[this->m_BattleData.GateIndex[2]].m_ImmuneToHarmCount = 0;

  00ca8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00cab	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00cae	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00cb4	33 d2		 xor	 edx, edx
  00cb6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00cbb	66 89 94 08 84
	22 00 00	 mov	 WORD PTR [eax+ecx+8836], dx

; 287  : 			gObj[this->m_BattleData.GateIndex[2]].m_ImmuneToMagicCount = 0;

  00cc3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00cc6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00cc9	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00ccf	33 d2		 xor	 edx, edx
  00cd1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00cd6	66 89 94 08 82
	22 00 00	 mov	 WORD PTR [eax+ecx+8834], dx

; 288  : 			this->SetMapAttr(1);

  00cde	6a 01		 push	 1
  00ce0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ce3	e8 00 00 00 00	 call	 ?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetMapAttr

; 289  : 			this->m_BattleData.PhazeStep++;

  00ce8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ceb	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00cee	83 c1 01	 add	 ecx, 1
  00cf1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00cf4	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
$LN3@ProcState_@2:

; 290  : 		}
; 291  : 		if(gObj[this->m_BattleData.GateIndex[2]].Live == false && this->m_BattleData.PhazeStep == 3)

  00cf7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00cfa	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00cfd	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00d03	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00d09	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  00d0e	85 c0		 test	 eax, eax
  00d10	75 29		 jne	 SHORT $LN2@ProcState_@2
  00d12	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d15	83 78 44 03	 cmp	 DWORD PTR [eax+68], 3
  00d19	75 20		 jne	 SHORT $LN2@ProcState_@2

; 292  : 		{
; 293  : 			this->SetMapAttr(2);

  00d1b	6a 02		 push	 2
  00d1d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d20	e8 00 00 00 00	 call	 ?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetMapAttr

; 294  : 			this->PortalSetState = false;

  00d25	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d28	c6 40 4c 00	 mov	 BYTE PTR [eax+76], 0

; 295  : 			this->m_BattleData.PhazeStep++;

  00d2c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d2f	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00d32	83 c1 01	 add	 ecx, 1
  00d35	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d38	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
$LN2@ProcState_@2:

; 296  : 		}
; 297  : 
; 298  : 		if(this->m_BattleData.Time <= 0)

  00d3b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d3e	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00d42	7f 14		 jg	 SHORT $LN15@ProcState_@2

; 299  : 		{
; 300  : 			this->SetSuccessValue(false);

  00d44	6a 00		 push	 0
  00d46	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d49	e8 00 00 00 00	 call	 ?SetSuccessValue@CImperialBattleOfRaymond@@QAEX_N@Z ; CImperialBattleOfRaymond::SetSuccessValue

; 301  : 			this->SetState(BATTLEOFRAYMOND_STATE_END);

  00d4e	6a 07		 push	 7
  00d50	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d53	e8 00 00 00 00	 call	 ?SetState@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetState
$LN15@ProcState_@2:

; 302  : 		}
; 303  : 	}
; 304  : }

  00d58	5f		 pop	 edi
  00d59	5e		 pop	 esi
  00d5a	5b		 pop	 ebx
  00d5b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00d5e	33 cd		 xor	 ecx, ebp
  00d60	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00d65	8b e5		 mov	 esp, ebp
  00d67	5d		 pop	 ebp
  00d68	c3		 ret	 0
?ProcState_PHAZE1@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::ProcState_PHAZE1
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\imperialbattleofraymond.h
_TEXT	ENDS
;	COMDAT ?SetSuccessValue@CImperialBattleOfRaymond@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_SuccessValue$ = 8					; size = 1
?SetSuccessValue@CImperialBattleOfRaymond@@QAEX_N@Z PROC ; CImperialBattleOfRaymond::SetSuccessValue, COMDAT
; _this$ = ecx

; 75   : 	void SetSuccessValue(bool SuccessValue) { this->SuccessValue = SuccessValue; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _SuccessValue$[ebp]
  00012	88 48 4d	 mov	 BYTE PTR [eax+77], cl
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetSuccessValue@CImperialBattleOfRaymond@@QAEX_N@Z ENDP ; CImperialBattleOfRaymond::SetSuccessValue
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\imperialbattleuser.h
_TEXT	ENDS
;	COMDAT ?GetIndex@CImperialBattleUser@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIndex@CImperialBattleUser@@QAEHXZ PROC		; CImperialBattleUser::GetIndex, COMDAT
; _this$ = ecx

; 22   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 		return this->m_iIndex;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 24   : 	}

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetIndex@CImperialBattleUser@@QAEHXZ ENDP		; CImperialBattleUser::GetIndex
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\imperialbattleofraymond.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_Tick$ = -8						; size = 4
_this$ = -4						; size = 4
?ProcState_STANDBY2@CImperialBattleOfRaymond@@QAEXXZ PROC ; CImperialBattleOfRaymond::ProcState_STANDBY2
; _this$ = ecx

; 307  : {

  00d70	55		 push	 ebp
  00d71	8b ec		 mov	 ebp, esp
  00d73	83 ec 48	 sub	 esp, 72			; 00000048H
  00d76	53		 push	 ebx
  00d77	56		 push	 esi
  00d78	57		 push	 edi
  00d79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 308  : 	int Tick = GetTickCount() - this->m_BattleData.TickCount;

  00d7c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00d82	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d85	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  00d88	89 45 f8	 mov	 DWORD PTR _Tick$[ebp], eax

; 309  : 	if(Tick >= 1000)

  00d8b	81 7d f8 e8 03
	00 00		 cmp	 DWORD PTR _Tick$[ebp], 1000 ; 000003e8H
  00d92	7c 36		 jl	 SHORT $LN3@ProcState_@3

; 310  : 	{
; 311  : 		this->m_BattleData.Time -= Tick;

  00d94	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d97	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00d9a	2b 4d f8	 sub	 ecx, DWORD PTR _Tick$[ebp]
  00d9d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00da0	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 312  : 		this->m_BattleData.TickCount = GetTickCount();

  00da3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00da9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dac	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 313  : 
; 314  : 		this->SendEventInterface();

  00daf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00db2	e8 00 00 00 00	 call	 ?SendEventInterface@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventInterface

; 315  : 
; 316  : 		if(this->m_BattleData.Time <= 0)

  00db7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00dba	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00dbe	7f 0a		 jg	 SHORT $LN3@ProcState_@3

; 317  : 		{
; 318  : 			this->SetState(BATTLEOFRAYMOND_STATE_PHAZE2);

  00dc0	6a 04		 push	 4
  00dc2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dc5	e8 00 00 00 00	 call	 ?SetState@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetState
$LN3@ProcState_@3:

; 319  : 		}
; 320  : 	}
; 321  : }

  00dca	5f		 pop	 edi
  00dcb	5e		 pop	 esi
  00dcc	5b		 pop	 ebx
  00dcd	8b e5		 mov	 esp, ebp
  00dcf	5d		 pop	 ebp
  00dd0	c3		 ret	 0
?ProcState_STANDBY2@CImperialBattleOfRaymond@@QAEXXZ ENDP ; CImperialBattleOfRaymond::ProcState_STANDBY2
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pNotice$221218 = -292					; size = 272
_n$221212 = -20						; size = 4
_i$221208 = -16						; size = 4
_Tick$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcState_PHAZE2@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::ProcState_PHAZE2
; _this$ = ecx

; 324  : {

  00de0	55		 push	 ebp
  00de1	8b ec		 mov	 ebp, esp
  00de3	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00de9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00dee	33 c5		 xor	 eax, ebp
  00df0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00df3	53		 push	 ebx
  00df4	56		 push	 esi
  00df5	57		 push	 edi
  00df6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 325  : 	int Tick = GetTickCount() - this->m_BattleData.TickCount;

  00df9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00dff	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e02	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  00e05	89 45 f4	 mov	 DWORD PTR _Tick$[ebp], eax

; 326  : 	if(Tick >= 1000)

  00e08	81 7d f4 e8 03
	00 00		 cmp	 DWORD PTR _Tick$[ebp], 1000 ; 000003e8H
  00e0f	0f 8c 73 03 00
	00		 jl	 $LN15@ProcState_@4

; 327  : 	{
; 328  : 		this->m_BattleData.Time -= Tick;

  00e15	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e18	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00e1b	2b 4d f4	 sub	 ecx, DWORD PTR _Tick$[ebp]
  00e1e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00e21	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 329  : 		this->m_BattleData.TickCount = GetTickCount();

  00e24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00e2a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e2d	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 330  : 
; 331  : 		this->SendEventInterface();

  00e30	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e33	e8 00 00 00 00	 call	 ?SendEventInterface@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventInterface

; 332  : 		this->MonsterProc();

  00e38	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e3b	e8 00 00 00 00	 call	 ?MonsterProc@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::MonsterProc

; 333  : 
; 334  : 		for(int i=0;i<12;++i)

  00e40	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$221208[ebp], 0
  00e47	eb 09		 jmp	 SHORT $LN13@ProcState_@4
$LN12@ProcState_@4:
  00e49	8b 45 f0	 mov	 eax, DWORD PTR _i$221208[ebp]
  00e4c	83 c0 01	 add	 eax, 1
  00e4f	89 45 f0	 mov	 DWORD PTR _i$221208[ebp], eax
$LN13@ProcState_@4:
  00e52	83 7d f0 0c	 cmp	 DWORD PTR _i$221208[ebp], 12 ; 0000000cH
  00e56	0f 8d 56 01 00
	00		 jge	 $LN11@ProcState_@4

; 335  : 		{
; 336  : 			for(int n=0;n<g_ImperialBattleUserMng.GetUserCount();++n)

  00e5c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _n$221212[ebp], 0
  00e63	eb 09		 jmp	 SHORT $LN10@ProcState_@4
$LN9@ProcState_@4:
  00e65	8b 45 ec	 mov	 eax, DWORD PTR _n$221212[ebp]
  00e68	83 c0 01	 add	 eax, 1
  00e6b	89 45 ec	 mov	 DWORD PTR _n$221212[ebp], eax
$LN10@ProcState_@4:
  00e6e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A ; g_ImperialBattleUserMng
  00e73	e8 00 00 00 00	 call	 ?GetUserCount@CImperialBattleUserMng@@QAEHXZ ; CImperialBattleUserMng::GetUserCount
  00e78	39 45 ec	 cmp	 DWORD PTR _n$221212[ebp], eax
  00e7b	0f 8d 2c 01 00
	00		 jge	 $LN8@ProcState_@4

; 337  : 			{
; 338  : 
; 339  : 				if(gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()].X >= g_KatoTrap[i].X-5 && gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()].X <= g_KatoTrap[i].X+5
; 340  : 					&& gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()].Y >= g_KatoTrap[i].Y-5 && gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()].Y <= g_KatoTrap[i].Y+5)

  00e81	8b 4d ec	 mov	 ecx, DWORD PTR _n$221212[ebp]
  00e84	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00e87	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00e8d	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00e92	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00e98	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00e9e	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  00ea6	8b 45 f0	 mov	 eax, DWORD PTR _i$221208[ebp]
  00ea9	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _g_KatoTrap[eax*8]
  00eb0	83 e9 05	 sub	 ecx, 5
  00eb3	3b d1		 cmp	 edx, ecx
  00eb5	0f 8c ed 00 00
	00		 jl	 $LN7@ProcState_@4
  00ebb	8b 4d ec	 mov	 ecx, DWORD PTR _n$221212[ebp]
  00ebe	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00ec1	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00ec7	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00ecc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00ed2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00ed8	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  00ee0	8b 45 f0	 mov	 eax, DWORD PTR _i$221208[ebp]
  00ee3	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _g_KatoTrap[eax*8]
  00eea	83 c1 05	 add	 ecx, 5
  00eed	3b d1		 cmp	 edx, ecx
  00eef	0f 8f b3 00 00
	00		 jg	 $LN7@ProcState_@4
  00ef5	8b 4d ec	 mov	 ecx, DWORD PTR _n$221212[ebp]
  00ef8	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00efb	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00f01	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00f06	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00f0c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00f12	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  00f1a	8b 45 f0	 mov	 eax, DWORD PTR _i$221208[ebp]
  00f1d	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _g_KatoTrap[eax*8+4]
  00f24	83 e9 05	 sub	 ecx, 5
  00f27	3b d1		 cmp	 edx, ecx
  00f29	7c 7d		 jl	 SHORT $LN7@ProcState_@4
  00f2b	8b 4d ec	 mov	 ecx, DWORD PTR _n$221212[ebp]
  00f2e	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00f31	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00f37	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00f3c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00f42	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00f48	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  00f50	8b 45 f0	 mov	 eax, DWORD PTR _i$221208[ebp]
  00f53	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _g_KatoTrap[eax*8+4]
  00f5a	83 c1 05	 add	 ecx, 5
  00f5d	3b d1		 cmp	 edx, ecx
  00f5f	7f 47		 jg	 SHORT $LN7@ProcState_@4

; 341  : 				{
; 342  : 					gObjAttack(&gObj[this->m_BattleData.TrapIndex], &gObj[g_ImperialBattleUserMng.m_BattleUser[n].GetIndex()], NULL, 0, 0, 0, 0,0,0);

  00f61	6a 00		 push	 0
  00f63	6a 00		 push	 0
  00f65	6a 00		 push	 0
  00f67	6a 00		 push	 0
  00f69	6a 00		 push	 0
  00f6b	6a 00		 push	 0
  00f6d	6a 00		 push	 0
  00f6f	8b 4d ec	 mov	 ecx, DWORD PTR _n$221212[ebp]
  00f72	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00f75	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  00f7b	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  00f80	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00f86	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00f8c	50		 push	 eax
  00f8d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f90	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00f93	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00f99	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00f9f	51		 push	 ecx
  00fa0	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00fa5	83 c4 24	 add	 esp, 36			; 00000024H
$LN7@ProcState_@4:

; 343  : 				}
; 344  : 			}

  00fa8	e9 b8 fe ff ff	 jmp	 $LN9@ProcState_@4
$LN8@ProcState_@4:

; 345  : 		}

  00fad	e9 97 fe ff ff	 jmp	 $LN12@ProcState_@4
$LN11@ProcState_@4:

; 346  : 
; 347  : 		if(this->m_BattleData.Time > 0 && (this->m_BattleData.Time/60000) !=this->m_BattleData.NotifyCount)

  00fb2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00fb5	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00fb9	7e 65		 jle	 SHORT $LN6@ProcState_@4
  00fbb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00fbe	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00fc1	99		 cdq
  00fc2	b9 60 ea 00 00	 mov	 ecx, 60000		; 0000ea60H
  00fc7	f7 f9		 idiv	 ecx
  00fc9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00fcc	0f b6 4a 48	 movzx	 ecx, BYTE PTR [edx+72]
  00fd0	3b c1		 cmp	 eax, ecx
  00fd2	74 4c		 je	 SHORT $LN6@ProcState_@4

; 348  : 		{
; 349  : 			this->m_BattleData.NotifyCount = this->m_BattleData.Time / 60000;

  00fd4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00fd7	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00fda	99		 cdq
  00fdb	b9 60 ea 00 00	 mov	 ecx, 60000		; 0000ea60H
  00fe0	f7 f9		 idiv	 ecx
  00fe2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00fe5	88 42 48	 mov	 BYTE PTR [edx+72], al

; 350  : 			PMSG_NOTICE pNotice;
; 351  : 			TNotice::MakeNoticeMsgEx(&pNotice, 0, "Portal will be closed after %d minutes", this->m_BattleData.NotifyCount+1);

  00fe8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00feb	0f b6 48 48	 movzx	 ecx, BYTE PTR [eax+72]
  00fef	83 c1 01	 add	 ecx, 1
  00ff2	51		 push	 ecx
  00ff3	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@LFMFLPDA@Portal?5will?5be?5closed?5after?5?$CFd?5m@
  00ff8	6a 00		 push	 0
  00ffa	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$221218[ebp]
  01000	52		 push	 edx
  01001	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  01006	83 c4 10	 add	 esp, 16			; 00000010H

; 352  : 			this->SendImperialPlayers((LPBYTE)&pNotice, pNotice.h.size);

  01009	0f b6 85 dd fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$221218[ebp+1]
  01010	50		 push	 eax
  01011	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$221218[ebp]
  01017	51		 push	 ecx
  01018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0101b	e8 00 00 00 00	 call	 ?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers
$LN6@ProcState_@4:

; 353  : 		}
; 354  : 
; 355  : 		if(gObj[this->m_BattleData.GateIndex[3]].Live == false && this->m_BattleData.PhazeStep == 0)

  01020	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01023	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01026	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0102c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01032	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  01037	85 c0		 test	 eax, eax
  01039	75 22		 jne	 SHORT $LN5@ProcState_@4
  0103b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0103e	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  01042	75 19		 jne	 SHORT $LN5@ProcState_@4

; 356  : 		{
; 357  : 			this->SetMapAttr(3);

  01044	6a 03		 push	 3
  01046	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01049	e8 00 00 00 00	 call	 ?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetMapAttr

; 358  : 			this->m_BattleData.PhazeStep++;

  0104e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01051	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  01054	83 c1 01	 add	 ecx, 1
  01057	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0105a	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
$LN5@ProcState_@4:

; 359  : 		}
; 360  : 
; 361  : 		if(this->m_BattleData.MonsterCount <= 0 && this->m_BattleData.PhazeStep == 1)

  0105d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01060	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  01064	7f 4e		 jg	 SHORT $LN4@ProcState_@4
  01066	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01069	83 78 44 01	 cmp	 DWORD PTR [eax+68], 1
  0106d	75 45		 jne	 SHORT $LN4@ProcState_@4

; 362  : 		{
; 363  : 			gObj[this->m_BattleData.GateIndex[4]].m_ImmuneToHarmCount = 0;

  0106f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01072	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01075	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0107b	33 d2		 xor	 edx, edx
  0107d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01082	66 89 94 08 84
	22 00 00	 mov	 WORD PTR [eax+ecx+8836], dx

; 364  : 			gObj[this->m_BattleData.GateIndex[4]].m_ImmuneToMagicCount = 0;

  0108a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0108d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01090	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01096	33 d2		 xor	 edx, edx
  01098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0109d	66 89 94 08 82
	22 00 00	 mov	 WORD PTR [eax+ecx+8834], dx

; 365  : 			this->m_BattleData.PhazeStep++;

  010a5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  010a8	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  010ab	83 c1 01	 add	 ecx, 1
  010ae	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  010b1	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
$LN4@ProcState_@4:

; 366  : 		}
; 367  : 		if(gObj[this->m_BattleData.GateIndex[4]].Live == false && this->m_BattleData.PhazeStep == 2)

  010b4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  010b7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  010ba	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  010c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  010c6	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  010cb	85 c0		 test	 eax, eax
  010cd	75 58		 jne	 SHORT $LN3@ProcState_@4
  010cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  010d2	83 78 44 02	 cmp	 DWORD PTR [eax+68], 2
  010d6	75 4f		 jne	 SHORT $LN3@ProcState_@4

; 368  : 		{
; 369  : 			gObj[this->m_BattleData.GateIndex[5]].m_ImmuneToHarmCount = 0;

  010d8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  010db	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  010de	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  010e4	33 d2		 xor	 edx, edx
  010e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  010eb	66 89 94 08 84
	22 00 00	 mov	 WORD PTR [eax+ecx+8836], dx

; 370  : 			gObj[this->m_BattleData.GateIndex[5]].m_ImmuneToMagicCount = 0;

  010f3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  010f6	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  010f9	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  010ff	33 d2		 xor	 edx, edx
  01101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01106	66 89 94 08 82
	22 00 00	 mov	 WORD PTR [eax+ecx+8834], dx

; 371  : 			this->SetMapAttr(4);

  0110e	6a 04		 push	 4
  01110	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01113	e8 00 00 00 00	 call	 ?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetMapAttr

; 372  : 			this->m_BattleData.PhazeStep++;

  01118	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0111b	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0111e	83 c1 01	 add	 ecx, 1
  01121	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01124	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
$LN3@ProcState_@4:

; 373  : 		}
; 374  : 		if(gObj[this->m_BattleData.GateIndex[5]].Live == false && this->m_BattleData.PhazeStep == 3)

  01127	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0112a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0112d	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01133	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01139	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  0113e	85 c0		 test	 eax, eax
  01140	75 29		 jne	 SHORT $LN2@ProcState_@4
  01142	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01145	83 78 44 03	 cmp	 DWORD PTR [eax+68], 3
  01149	75 20		 jne	 SHORT $LN2@ProcState_@4

; 375  : 		{
; 376  : 			this->SetMapAttr(5);

  0114b	6a 05		 push	 5
  0114d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01150	e8 00 00 00 00	 call	 ?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetMapAttr

; 377  : 			this->PortalSetState = false;

  01155	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01158	c6 40 4c 00	 mov	 BYTE PTR [eax+76], 0

; 378  : 			this->m_BattleData.PhazeStep++;

  0115c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0115f	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  01162	83 c1 01	 add	 ecx, 1
  01165	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01168	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
$LN2@ProcState_@4:

; 379  : 		}
; 380  : 
; 381  : 		if(this->m_BattleData.Time <= 0)

  0116b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0116e	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  01172	7f 14		 jg	 SHORT $LN15@ProcState_@4

; 382  : 		{
; 383  : 			this->SetSuccessValue(false);

  01174	6a 00		 push	 0
  01176	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01179	e8 00 00 00 00	 call	 ?SetSuccessValue@CImperialBattleOfRaymond@@QAEX_N@Z ; CImperialBattleOfRaymond::SetSuccessValue

; 384  : 			this->SetState(BATTLEOFRAYMOND_STATE_END);

  0117e	6a 07		 push	 7
  01180	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01183	e8 00 00 00 00	 call	 ?SetState@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetState
$LN15@ProcState_@4:

; 385  : 		}
; 386  : 	}
; 387  : }

  01188	5f		 pop	 edi
  01189	5e		 pop	 esi
  0118a	5b		 pop	 ebx
  0118b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0118e	33 cd		 xor	 ecx, ebp
  01190	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01195	8b e5		 mov	 esp, ebp
  01197	5d		 pop	 ebp
  01198	c3		 ret	 0
?ProcState_PHAZE2@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::ProcState_PHAZE2
; Function compile flags: /Odtp /ZI
_Tick$ = -8						; size = 4
_this$ = -4						; size = 4
?ProcState_STANDBY3@CImperialBattleOfRaymond@@QAEXXZ PROC ; CImperialBattleOfRaymond::ProcState_STANDBY3
; _this$ = ecx

; 390  : {

  011a0	55		 push	 ebp
  011a1	8b ec		 mov	 ebp, esp
  011a3	83 ec 48	 sub	 esp, 72			; 00000048H
  011a6	53		 push	 ebx
  011a7	56		 push	 esi
  011a8	57		 push	 edi
  011a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 391  : 	int Tick = GetTickCount() - this->m_BattleData.TickCount;

  011ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  011b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011b5	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  011b8	89 45 f8	 mov	 DWORD PTR _Tick$[ebp], eax

; 392  : 	if(Tick >= 1000)

  011bb	81 7d f8 e8 03
	00 00		 cmp	 DWORD PTR _Tick$[ebp], 1000 ; 000003e8H
  011c2	7c 36		 jl	 SHORT $LN3@ProcState_@5

; 393  : 	{
; 394  : 		this->m_BattleData.Time -= Tick;

  011c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011c7	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  011ca	2b 4d f8	 sub	 ecx, DWORD PTR _Tick$[ebp]
  011cd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  011d0	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 395  : 		this->m_BattleData.TickCount = GetTickCount();

  011d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  011d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011dc	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 396  : 
; 397  : 		this->SendEventInterface();

  011df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011e2	e8 00 00 00 00	 call	 ?SendEventInterface@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventInterface

; 398  : 
; 399  : 		if(this->m_BattleData.Time <= 0)

  011e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011ea	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  011ee	7f 0a		 jg	 SHORT $LN3@ProcState_@5

; 400  : 		{
; 401  : 			this->SetState(BATTLEOFRAYMOND_STATE_PHAZE3);

  011f0	6a 06		 push	 6
  011f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011f5	e8 00 00 00 00	 call	 ?SetState@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetState
$LN3@ProcState_@5:

; 402  : 		}
; 403  : 	}
; 404  : }

  011fa	5f		 pop	 edi
  011fb	5e		 pop	 esi
  011fc	5b		 pop	 ebx
  011fd	8b e5		 mov	 esp, ebp
  011ff	5d		 pop	 ebp
  01200	c3		 ret	 0
?ProcState_STANDBY3@CImperialBattleOfRaymond@@QAEXXZ ENDP ; CImperialBattleOfRaymond::ProcState_STANDBY3
_TEXT	ENDS
PUBLIC	??_C@_0BJ@NGPECLFD@?$CFd?5minutes?5to?5escape?5?$CFs?$CB?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BJ@NGPECLFD@?$CFd?5minutes?5to?5escape?5?$CFs?$CB?$AA@
CONST	SEGMENT
??_C@_0BJ@NGPECLFD@?$CFd?5minutes?5to?5escape?5?$CFs?$CB?$AA@ DB '%d minu'
	DB	'tes to escape %s!', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pNotice$221237 = -284					; size = 272
_Tick$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcState_PHAZE3@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::ProcState_PHAZE3
; _this$ = ecx

; 407  : {

  01210	55		 push	 ebp
  01211	8b ec		 mov	 ebp, esp
  01213	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  01219	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0121e	33 c5		 xor	 eax, ebp
  01220	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01223	53		 push	 ebx
  01224	56		 push	 esi
  01225	57		 push	 edi
  01226	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 	int Tick = GetTickCount() - this->m_BattleData.TickCount;

  01229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0122f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01232	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  01235	89 45 f4	 mov	 DWORD PTR _Tick$[ebp], eax

; 409  : 	if(Tick >= 1000)

  01238	81 7d f4 e8 03
	00 00		 cmp	 DWORD PTR _Tick$[ebp], 1000 ; 000003e8H
  0123f	0f 8c 55 01 00
	00		 jl	 $LN6@ProcState_@6

; 410  : 	{
; 411  : 		this->m_BattleData.Time -= Tick;

  01245	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01248	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0124b	2b 4d f4	 sub	 ecx, DWORD PTR _Tick$[ebp]
  0124e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01251	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 412  : 		this->m_BattleData.TickCount = GetTickCount();

  01254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0125a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0125d	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 413  : 
; 414  : 		this->SendEventInterface();

  01260	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01263	e8 00 00 00 00	 call	 ?SendEventInterface@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SendEventInterface

; 415  : 		this->MonsterProc();

  01268	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0126b	e8 00 00 00 00	 call	 ?MonsterProc@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::MonsterProc

; 416  : 
; 417  : 		if(this->m_BattleData.Time > 0 && (this->m_BattleData.Time/60000) !=this->m_BattleData.NotifyCount)

  01270	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01273	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  01277	7e 7c		 jle	 SHORT $LN4@ProcState_@6
  01279	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0127c	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0127f	99		 cdq
  01280	b9 60 ea 00 00	 mov	 ecx, 60000		; 0000ea60H
  01285	f7 f9		 idiv	 ecx
  01287	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0128a	0f b6 4a 48	 movzx	 ecx, BYTE PTR [edx+72]
  0128e	3b c1		 cmp	 eax, ecx
  01290	74 63		 je	 SHORT $LN4@ProcState_@6

; 418  : 		{
; 419  : 			this->m_BattleData.NotifyCount = this->m_BattleData.Time / 60000;

  01292	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01295	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  01298	99		 cdq
  01299	b9 60 ea 00 00	 mov	 ecx, 60000		; 0000ea60H
  0129e	f7 f9		 idiv	 ecx
  012a0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  012a3	88 42 48	 mov	 BYTE PTR [edx+72], al

; 420  : 			PMSG_NOTICE pNotice;
; 421  : 			TNotice::MakeNoticeMsgEx(&pNotice, 0, "%d minutes to escape %s!", this->m_BattleData.NotifyCount+1, gObj[this->m_BattleData.CurrentLeaderIndex].Name);

  012a6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  012a9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  012ac	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  012b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012b8	8d 44 0a 77	 lea	 eax, DWORD PTR [edx+ecx+119]
  012bc	50		 push	 eax
  012bd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012c0	0f b6 51 48	 movzx	 edx, BYTE PTR [ecx+72]
  012c4	83 c2 01	 add	 edx, 1
  012c7	52		 push	 edx
  012c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NGPECLFD@?$CFd?5minutes?5to?5escape?5?$CFs?$CB?$AA@
  012cd	6a 00		 push	 0
  012cf	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$221237[ebp]
  012d5	50		 push	 eax
  012d6	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  012db	83 c4 14	 add	 esp, 20			; 00000014H

; 422  : 			this->SendImperialPlayers((LPBYTE)&pNotice, pNotice.h.size);

  012de	0f b6 85 e5 fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$221237[ebp+1]
  012e5	50		 push	 eax
  012e6	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$221237[ebp]
  012ec	51		 push	 ecx
  012ed	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012f0	e8 00 00 00 00	 call	 ?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers
$LN4@ProcState_@6:

; 423  : 		}
; 424  : 
; 425  : 		if(gObj[this->m_BattleData.GateIndex[6]].Live == false && this->m_BattleData.PhazeStep == 0)

  012f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  012f8	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  012fb	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01301	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01307	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  0130c	85 c0		 test	 eax, eax
  0130e	75 22		 jne	 SHORT $LN3@ProcState_@6
  01310	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01313	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  01317	75 19		 jne	 SHORT $LN3@ProcState_@6

; 426  : 		{
; 427  : 			this->SetMapAttr(6);

  01319	6a 06		 push	 6
  0131b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0131e	e8 00 00 00 00	 call	 ?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetMapAttr

; 428  : 			this->m_BattleData.PhazeStep++;

  01323	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01326	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  01329	83 c1 01	 add	 ecx, 1
  0132c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0132f	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
$LN3@ProcState_@6:

; 429  : 		}
; 430  : 
; 431  : 		if(gObj[this->m_BattleData.CurrentLeaderIndex].Live == false)

  01332	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01335	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01338	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0133e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01344	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  01349	85 c0		 test	 eax, eax
  0134b	75 14		 jne	 SHORT $LN2@ProcState_@6

; 432  : 		{
; 433  : 			this->SetSuccessValue(true);

  0134d	6a 01		 push	 1
  0134f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01352	e8 00 00 00 00	 call	 ?SetSuccessValue@CImperialBattleOfRaymond@@QAEX_N@Z ; CImperialBattleOfRaymond::SetSuccessValue

; 434  : 			this->SetState(BATTLEOFRAYMOND_STATE_END);

  01357	6a 07		 push	 7
  01359	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0135c	e8 00 00 00 00	 call	 ?SetState@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetState
$LN2@ProcState_@6:

; 435  : 		}
; 436  : 		if(this->m_BattleData.Time <= 0 && gObj[this->m_BattleData.CurrentLeaderIndex].Live == true)

  01361	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01364	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  01368	7f 30		 jg	 SHORT $LN6@ProcState_@6
  0136a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0136d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01370	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01376	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0137c	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  01381	83 f8 01	 cmp	 eax, 1
  01384	75 14		 jne	 SHORT $LN6@ProcState_@6

; 437  : 		{
; 438  : 			this->SetSuccessValue(false);

  01386	6a 00		 push	 0
  01388	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0138b	e8 00 00 00 00	 call	 ?SetSuccessValue@CImperialBattleOfRaymond@@QAEX_N@Z ; CImperialBattleOfRaymond::SetSuccessValue

; 439  : 			this->SetState(BATTLEOFRAYMOND_STATE_END);

  01390	6a 07		 push	 7
  01392	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01395	e8 00 00 00 00	 call	 ?SetState@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetState
$LN6@ProcState_@6:

; 440  : 		}
; 441  : 	}
; 442  : }

  0139a	5f		 pop	 edi
  0139b	5e		 pop	 esi
  0139c	5b		 pop	 ebx
  0139d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  013a0	33 cd		 xor	 ecx, ebp
  013a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  013a7	8b e5		 mov	 esp, ebp
  013a9	5d		 pop	 ebp
  013aa	c3		 ret	 0
?ProcState_PHAZE3@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::ProcState_PHAZE3
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ProcState_END@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::ProcState_END
; _this$ = ecx

; 445  : {

  013b0	55		 push	 ebp
  013b1	8b ec		 mov	 ebp, esp
  013b3	83 ec 44	 sub	 esp, 68			; 00000044H
  013b6	53		 push	 ebx
  013b7	56		 push	 esi
  013b8	57		 push	 edi
  013b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 446  : 	return;
; 447  : }

  013bc	5f		 pop	 edi
  013bd	5e		 pop	 esi
  013be	5b		 pop	 ebx
  013bf	8b e5		 mov	 esp, ebp
  013c1	5d		 pop	 ebp
  013c2	c3		 ret	 0
?ProcState_END@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::ProcState_END
_TEXT	ENDS
PUBLIC	?GetEventTime@CImperialBattleOfRaymond@@QAEHXZ	; CImperialBattleOfRaymond::GetEventTime
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEventTime@CImperialBattleOfRaymond@@QAEHXZ PROC	; CImperialBattleOfRaymond::GetEventTime
; _this$ = ecx

; 450  : {

  013d0	55		 push	 ebp
  013d1	8b ec		 mov	 ebp, esp
  013d3	83 ec 44	 sub	 esp, 68			; 00000044H
  013d6	53		 push	 ebx
  013d7	56		 push	 esi
  013d8	57		 push	 edi
  013d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 451  : 	return this->m_BattleData.Time / 1000;

  013dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013df	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  013e2	99		 cdq
  013e3	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  013e8	f7 f9		 idiv	 ecx

; 452  : }

  013ea	5f		 pop	 edi
  013eb	5e		 pop	 esi
  013ec	5b		 pop	 ebx
  013ed	8b e5		 mov	 esp, ebp
  013ef	5d		 pop	 ebp
  013f0	c3		 ret	 0
?GetEventTime@CImperialBattleOfRaymond@@QAEHXZ ENDP	; CImperialBattleOfRaymond::GetEventTime
_TEXT	ENDS
PUBLIC	?GetEventState@CImperialBattleOfRaymond@@QAEHXZ	; CImperialBattleOfRaymond::GetEventState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_CurrState$ = -8					; size = 4
_this$ = -4						; size = 4
?GetEventState@CImperialBattleOfRaymond@@QAEHXZ PROC	; CImperialBattleOfRaymond::GetEventState
; _this$ = ecx

; 455  : {

  01400	55		 push	 ebp
  01401	8b ec		 mov	 ebp, esp
  01403	83 ec 48	 sub	 esp, 72			; 00000048H
  01406	53		 push	 ebx
  01407	56		 push	 esi
  01408	57		 push	 edi
  01409	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 	int CurrState = this->m_BattleData.CurrentState;

  0140c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0140f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01412	89 4d f8	 mov	 DWORD PTR _CurrState$[ebp], ecx

; 457  : 	if(CurrState == 1 || CurrState == 3 || CurrState == 5)

  01415	83 7d f8 01	 cmp	 DWORD PTR _CurrState$[ebp], 1
  01419	74 0c		 je	 SHORT $LN6@GetEventSt
  0141b	83 7d f8 03	 cmp	 DWORD PTR _CurrState$[ebp], 3
  0141f	74 06		 je	 SHORT $LN6@GetEventSt
  01421	83 7d f8 05	 cmp	 DWORD PTR _CurrState$[ebp], 5
  01425	75 09		 jne	 SHORT $LN7@GetEventSt
$LN6@GetEventSt:

; 458  : 	{
; 459  : 		return 1;

  01427	b8 01 00 00 00	 mov	 eax, 1
  0142c	eb 2c		 jmp	 SHORT $LN8@GetEventSt
  0142e	eb 25		 jmp	 SHORT $LN5@GetEventSt
$LN7@GetEventSt:

; 460  : 	}
; 461  : 	else if(CurrState == 2 || CurrState == 4 || CurrState == 6)

  01430	83 7d f8 02	 cmp	 DWORD PTR _CurrState$[ebp], 2
  01434	74 0c		 je	 SHORT $LN3@GetEventSt
  01436	83 7d f8 04	 cmp	 DWORD PTR _CurrState$[ebp], 4
  0143a	74 06		 je	 SHORT $LN3@GetEventSt
  0143c	83 7d f8 06	 cmp	 DWORD PTR _CurrState$[ebp], 6
  01440	75 09		 jne	 SHORT $LN4@GetEventSt
$LN3@GetEventSt:

; 462  : 	{
; 463  : 		return 2;

  01442	b8 02 00 00 00	 mov	 eax, 2
  01447	eb 11		 jmp	 SHORT $LN8@GetEventSt
  01449	eb 0a		 jmp	 SHORT $LN5@GetEventSt
$LN4@GetEventSt:

; 464  : 	}
; 465  : 	else if(CurrState == 7)

  0144b	83 7d f8 07	 cmp	 DWORD PTR _CurrState$[ebp], 7
  0144f	75 04		 jne	 SHORT $LN5@GetEventSt

; 466  : 	{
; 467  : 		return 0;

  01451	33 c0		 xor	 eax, eax
  01453	eb 05		 jmp	 SHORT $LN8@GetEventSt
$LN5@GetEventSt:

; 468  : 	}
; 469  : 	return 3;

  01455	b8 03 00 00 00	 mov	 eax, 3
$LN8@GetEventSt:

; 470  : }

  0145a	5f		 pop	 edi
  0145b	5e		 pop	 esi
  0145c	5b		 pop	 ebx
  0145d	8b e5		 mov	 esp, ebp
  0145f	5d		 pop	 ebp
  01460	c3		 ret	 0
?GetEventState@CImperialBattleOfRaymond@@QAEHXZ ENDP	; CImperialBattleOfRaymond::GetEventState
_TEXT	ENDS
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv83 = -80						; size = 4
_i$221266 = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_lpMsg$ = 8						; size = 4
_iSize$ = 12						; size = 4
?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z PROC ; CImperialBattleOfRaymond::SendImperialPlayers
; _this$ = ecx

; 473  : {

  01470	55		 push	 ebp
  01471	8b ec		 mov	 ebp, esp
  01473	83 ec 50	 sub	 esp, 80			; 00000050H
  01476	53		 push	 ebx
  01477	56		 push	 esi
  01478	57		 push	 edi
  01479	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 474  : 	int index;
; 475  : 	for(int i=0; i < g_ImperialBattleUserMng.GetUserCount();++i)

  0147c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$221266[ebp], 0
  01483	eb 09		 jmp	 SHORT $LN4@SendImperi
$LN3@SendImperi:
  01485	8b 45 f4	 mov	 eax, DWORD PTR _i$221266[ebp]
  01488	83 c0 01	 add	 eax, 1
  0148b	89 45 f4	 mov	 DWORD PTR _i$221266[ebp], eax
$LN4@SendImperi:
  0148e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A ; g_ImperialBattleUserMng
  01493	e8 00 00 00 00	 call	 ?GetUserCount@CImperialBattleUserMng@@QAEHXZ ; CImperialBattleUserMng::GetUserCount
  01498	39 45 f4	 cmp	 DWORD PTR _i$221266[ebp], eax
  0149b	7d 7a		 jge	 SHORT $LN5@SendImperi

; 476  : 	{
; 477  : 		index = g_ImperialBattleUserMng.m_BattleUser[i].GetIndex();

  0149d	8b 4d f4	 mov	 ecx, DWORD PTR _i$221266[ebp]
  014a0	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  014a3	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?g_ImperialBattleUserMng@@3VCImperialBattleUserMng@@A+4
  014a9	e8 00 00 00 00	 call	 ?GetIndex@CImperialBattleUser@@QAEHXZ ; CImperialBattleUser::GetIndex
  014ae	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax

; 478  : 
; 479  : 		if(IMPERIAL_MAP_RANGE(gObj[index].MapNumber))

  014b1	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  014b4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  014ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  014c0	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  014c8	83 fa 45	 cmp	 edx, 69			; 00000045H
  014cb	7d 09		 jge	 SHORT $LN7@SendImperi
  014cd	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
  014d4	eb 22		 jmp	 SHORT $LN8@SendImperi
$LN7@SendImperi:
  014d6	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  014d9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  014df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  014e5	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  014ed	33 c0		 xor	 eax, eax
  014ef	83 fa 48	 cmp	 edx, 72			; 00000048H
  014f2	0f 9e c0	 setle	 al
  014f5	89 45 b0	 mov	 DWORD PTR tv83[ebp], eax
$LN8@SendImperi:
  014f8	83 7d b0 00	 cmp	 DWORD PTR tv83[ebp], 0
  014fc	74 14		 je	 SHORT $LN1@SendImperi

; 480  : 		{
; 481  : 			DataSend(index, lpMsg, iSize);

  014fe	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  01501	50		 push	 eax
  01502	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  01505	51		 push	 ecx
  01506	8b 55 f8	 mov	 edx, DWORD PTR _index$[ebp]
  01509	52		 push	 edx
  0150a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0150f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SendImperi:

; 482  : 		}	
; 483  : 	}

  01512	e9 6e ff ff ff	 jmp	 $LN3@SendImperi
$LN5@SendImperi:

; 484  : }

  01517	5f		 pop	 edi
  01518	5e		 pop	 esi
  01519	5b		 pop	 ebx
  0151a	8b e5		 mov	 esp, ebp
  0151c	5d		 pop	 ebp
  0151d	c2 08 00	 ret	 8
?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ENDP ; CImperialBattleOfRaymond::SendImperialPlayers
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Time$ = -28						; size = 4
_pMsg$ = -24						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?SendEventInterface@CImperialBattleOfRaymond@@QAEXXZ PROC ; CImperialBattleOfRaymond::SendEventInterface
; _this$ = ecx

; 487  : {

  01520	55		 push	 ebp
  01521	8b ec		 mov	 ebp, esp
  01523	83 ec 5c	 sub	 esp, 92			; 0000005cH
  01526	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0152b	33 c5		 xor	 eax, ebp
  0152d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01530	53		 push	 ebx
  01531	56		 push	 esi
  01532	57		 push	 edi
  01533	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 488  : 	PMSG_FORT_TIMER pMsg;
; 489  : 
; 490  : 	PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x04,sizeof(pMsg));

  01536	6a 10		 push	 16			; 00000010H
  01538	6a 04		 push	 4
  0153a	68 f7 00 00 00	 push	 247			; 000000f7H
  0153f	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01542	50		 push	 eax
  01543	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01548	83 c4 10	 add	 esp, 16			; 00000010H

; 491  : 
; 492  : 	int Time = this->GetEventTime() * 4;

  0154b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0154e	e8 00 00 00 00	 call	 ?GetEventTime@CImperialBattleOfRaymond@@QAEHXZ ; CImperialBattleOfRaymond::GetEventTime
  01553	c1 e0 02	 shl	 eax, 2
  01556	89 45 e4	 mov	 DWORD PTR _Time$[ebp], eax

; 493  : 
; 494  : 	pMsg.Status = this->GetEventState();

  01559	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0155c	e8 00 00 00 00	 call	 ?GetEventState@CImperialBattleOfRaymond@@QAEHXZ ; CImperialBattleOfRaymond::GetEventState
  01561	88 45 ec	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 495  : 	pMsg.Unk1 = 1;

  01564	c6 45 ed 01	 mov	 BYTE PTR _pMsg$[ebp+5], 1

; 496  : 	pMsg.Unk2 = 1;

  01568	c6 45 ee 01	 mov	 BYTE PTR _pMsg$[ebp+6], 1

; 497  : 	pMsg.Unk3 = 0;

  0156c	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+7], 0

; 498  : 	pMsg.Unk5 = 0;

  01570	c6 45 f0 00	 mov	 BYTE PTR _pMsg$[ebp+8], 0

; 499  : 	pMsg.TimerH = HIBYTE(Time);

  01574	8b 45 e4	 mov	 eax, DWORD PTR _Time$[ebp]
  01577	c1 e8 08	 shr	 eax, 8
  0157a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0157f	88 45 f2	 mov	 BYTE PTR _pMsg$[ebp+10], al

; 500  : 	pMsg.TimerL = LOBYTE(Time);

  01582	8b 45 e4	 mov	 eax, DWORD PTR _Time$[ebp]
  01585	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0158a	88 45 f1	 mov	 BYTE PTR _pMsg$[ebp+9], al

; 501  : 	pMsg.Unk4 = 0;

  0158d	c6 45 f3 00	 mov	 BYTE PTR _pMsg$[ebp+11], 0

; 502  : 	pMsg.Monster = this->m_BattleData.MonsterCount;

  01591	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01594	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  01597	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+12], ecx

; 503  : 
; 504  : 	this->SendImperialPlayers((LPBYTE)&pMsg, pMsg.h.size);

  0159a	0f b6 45 e9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0159e	50		 push	 eax
  0159f	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  015a2	51		 push	 ecx
  015a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  015a6	e8 00 00 00 00	 call	 ?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers

; 505  : }

  015ab	5f		 pop	 edi
  015ac	5e		 pop	 esi
  015ad	5b		 pop	 ebx
  015ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  015b1	33 cd		 xor	 ecx, ebp
  015b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  015b8	8b e5		 mov	 esp, ebp
  015ba	5d		 pop	 ebp
  015bb	c3		 ret	 0
?SendEventInterface@CImperialBattleOfRaymond@@QAEXXZ ENDP ; CImperialBattleOfRaymond::SendEventInterface
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpMsgBody$ = -276					; size = 4
_lpMsg$ = -272						; size = 4
_PacketSize$ = -268					; size = 2
_Buff$ = -264						; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Gate$ = 8						; size = 4
?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z PROC	; CImperialBattleOfRaymond::SetMapAttr
; _this$ = ecx

; 508  : {

  015c0	55		 push	 ebp
  015c1	8b ec		 mov	 ebp, esp
  015c3	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  015c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  015ce	33 c5		 xor	 eax, ebp
  015d0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  015d3	53		 push	 ebx
  015d4	56		 push	 esi
  015d5	57		 push	 edi
  015d6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 509  : 	char Buff[256];
; 510  : 	short PacketSize = 0;

  015d9	33 c0		 xor	 eax, eax
  015db	66 89 85 f4 fe
	ff ff		 mov	 WORD PTR _PacketSize$[ebp], ax

; 511  : 	PMSG_SETMAPATTR_COUNT * lpMsg = (PMSG_SETMAPATTR_COUNT *)(Buff);

  015e2	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  015e8	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _lpMsg$[ebp], eax

; 512  : 	PMSG_SETMAPATTR * lpMsgBody = (PMSG_SETMAPATTR *)(Buff + sizeof(PMSG_SETMAPATTR_COUNT));

  015ee	8d 85 ff fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp+7]
  015f4	89 85 ec fe ff
	ff		 mov	 DWORD PTR _lpMsgBody$[ebp], eax

; 513  : 
; 514  : 	lpMsgBody[0].btX = g_KatoMapAttr[Gate].StartX;

  015fa	8b 45 08	 mov	 eax, DWORD PTR _Gate$[ebp]
  015fd	c1 e0 04	 shl	 eax, 4
  01600	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _lpMsgBody$[ebp]
  01606	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR _g_KatoMapAttr[eax]
  0160c	88 11		 mov	 BYTE PTR [ecx], dl

; 515  : 	lpMsgBody[0].btY = g_KatoMapAttr[Gate].StartY;

  0160e	8b 45 08	 mov	 eax, DWORD PTR _Gate$[ebp]
  01611	c1 e0 04	 shl	 eax, 4
  01614	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _lpMsgBody$[ebp]
  0161a	8a 90 04 00 00
	00		 mov	 dl, BYTE PTR _g_KatoMapAttr[eax+4]
  01620	88 51 01	 mov	 BYTE PTR [ecx+1], dl

; 516  : 	lpMsgBody[1].btX = g_KatoMapAttr[Gate].EndX;

  01623	8b 45 08	 mov	 eax, DWORD PTR _Gate$[ebp]
  01626	c1 e0 04	 shl	 eax, 4
  01629	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _lpMsgBody$[ebp]
  0162f	8a 90 08 00 00
	00		 mov	 dl, BYTE PTR _g_KatoMapAttr[eax+8]
  01635	88 51 02	 mov	 BYTE PTR [ecx+2], dl

; 517  : 	lpMsgBody[1].btY = g_KatoMapAttr[Gate].EndY;

  01638	8b 45 08	 mov	 eax, DWORD PTR _Gate$[ebp]
  0163b	c1 e0 04	 shl	 eax, 4
  0163e	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _lpMsgBody$[ebp]
  01644	8a 90 0c 00 00
	00		 mov	 dl, BYTE PTR _g_KatoMapAttr[eax+12]
  0164a	88 51 03	 mov	 BYTE PTR [ecx+3], dl

; 518  : 
; 519  : 	PacketSize = (sizeof(PMSG_SETMAPATTR_COUNT)+6*sizeof(PMSG_SETMAPATTR));

  0164d	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
  01652	66 89 85 f4 fe
	ff ff		 mov	 WORD PTR _PacketSize$[ebp], ax

; 520  : 
; 521  : 	lpMsg->btMapAttr = 16;

  01659	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _lpMsg$[ebp]
  0165f	c6 40 04 10	 mov	 BYTE PTR [eax+4], 16	; 00000010H

; 522  : 	lpMsg->btMapSetType = 1;

  01663	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01669	c6 40 05 01	 mov	 BYTE PTR [eax+5], 1

; 523  : 	lpMsg->btCount = 1;

  0166d	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01673	c6 40 06 01	 mov	 BYTE PTR [eax+6], 1

; 524  : 	lpMsg->btType = 0;

  01677	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _lpMsg$[ebp]
  0167d	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0

; 525  : 
; 526  : 	lpMsg->h.c = 0xC1;

  01681	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01687	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 527  : 	lpMsg->h.headcode = 0x46;

  0168a	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _lpMsg$[ebp]
  01690	c6 40 02 46	 mov	 BYTE PTR [eax+2], 70	; 00000046H

; 528  : 	lpMsg->h.size = PacketSize;

  01694	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _lpMsg$[ebp]
  0169a	8a 8d f4 fe ff
	ff		 mov	 cl, BYTE PTR _PacketSize$[ebp]
  016a0	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 529  : 
; 530  : 	this->SendImperialPlayers((LPBYTE)Buff, PacketSize);

  016a3	0f bf 85 f4 fe
	ff ff		 movsx	 eax, WORD PTR _PacketSize$[ebp]
  016aa	50		 push	 eax
  016ab	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  016b1	51		 push	 ecx
  016b2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  016b5	e8 00 00 00 00	 call	 ?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers

; 531  : }

  016ba	5f		 pop	 edi
  016bb	5e		 pop	 esi
  016bc	5b		 pop	 ebx
  016bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  016c0	33 cd		 xor	 ecx, ebp
  016c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  016c7	8b e5		 mov	 esp, ebp
  016c9	5d		 pop	 ebp
  016ca	c2 04 00	 ret	 4
?SetMapAttr@CImperialBattleOfRaymond@@QAEXH@Z ENDP	; CImperialBattleOfRaymond::SetMapAttr
_TEXT	ENDS
EXTRN	?FindGroupMemberObjectIndex@TMonsterAIGroup@@SAHHH@Z:PROC ; TMonsterAIGroup::FindGroupMemberObjectIndex
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$221300 = -12						; size = 4
_alivecount$ = -8					; size = 2
_this$ = -4						; size = 4
?MonsterProc@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::MonsterProc
; _this$ = ecx

; 534  : {

  016d0	55		 push	 ebp
  016d1	8b ec		 mov	 ebp, esp
  016d3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  016d6	53		 push	 ebx
  016d7	56		 push	 esi
  016d8	57		 push	 edi
  016d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 535  : 	short alivecount = 0;

  016dc	33 c0		 xor	 eax, eax
  016de	66 89 45 f8	 mov	 WORD PTR _alivecount$[ebp], ax

; 536  : 	for(int i=0;i<TMonsterAIGroup::s_iMonsterAIGroupMemberCount[this->m_BattleData.CurrentAIGroup];++i)

  016e2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$221300[ebp], 0
  016e9	eb 09		 jmp	 SHORT $LN4@MonsterPro
$LN3@MonsterPro:
  016eb	8b 45 f4	 mov	 eax, DWORD PTR _i$221300[ebp]
  016ee	83 c0 01	 add	 eax, 1
  016f1	89 45 f4	 mov	 DWORD PTR _i$221300[ebp], eax
$LN4@MonsterPro:
  016f4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  016f7	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  016fa	8b 55 f4	 mov	 edx, DWORD PTR _i$221300[ebp]
  016fd	3b 14 8d 00 00
	00 00		 cmp	 edx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[ecx*4]
  01704	7d 37		 jge	 SHORT $LN2@MonsterPro

; 537  : 	{
; 538  : 		if(gObj[TMonsterAIGroup::FindGroupMemberObjectIndex(this->m_BattleData.CurrentAIGroup, i)].Live == true)

  01706	8b 45 f4	 mov	 eax, DWORD PTR _i$221300[ebp]
  01709	50		 push	 eax
  0170a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0170d	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  01710	52		 push	 edx
  01711	e8 00 00 00 00	 call	 ?FindGroupMemberObjectIndex@TMonsterAIGroup@@SAHHH@Z ; TMonsterAIGroup::FindGroupMemberObjectIndex
  01716	83 c4 08	 add	 esp, 8
  01719	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0171f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01725	0f b6 54 01 6a	 movzx	 edx, BYTE PTR [ecx+eax+106]
  0172a	83 fa 01	 cmp	 edx, 1
  0172d	75 0c		 jne	 SHORT $LN1@MonsterPro

; 539  : 		{
; 540  : 			++alivecount;

  0172f	66 8b 45 f8	 mov	 ax, WORD PTR _alivecount$[ebp]
  01733	66 83 c0 01	 add	 ax, 1
  01737	66 89 45 f8	 mov	 WORD PTR _alivecount$[ebp], ax
$LN1@MonsterPro:

; 541  : 		}
; 542  : 	}

  0173b	eb ae		 jmp	 SHORT $LN3@MonsterPro
$LN2@MonsterPro:

; 543  : 	this->m_BattleData.MonsterCount = alivecount;

  0173d	0f bf 45 f8	 movsx	 eax, WORD PTR _alivecount$[ebp]
  01741	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01744	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 544  : }

  01747	5f		 pop	 edi
  01748	5e		 pop	 esi
  01749	5b		 pop	 ebx
  0174a	8b e5		 mov	 esp, ebp
  0174c	5d		 pop	 ebp
  0174d	c3		 ret	 0
?MonsterProc@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::MonsterProc
_TEXT	ENDS
PUBLIC	?OperatePortalGate@CImperialBattleOfRaymond@@QAEX_N0H@Z ; CImperialBattleOfRaymond::OperatePortalGate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Block$ = 8						; size = 1
_ForAll$ = 12						; size = 1
_aIndex$ = 16						; size = 4
?OperatePortalGate@CImperialBattleOfRaymond@@QAEX_N0H@Z PROC ; CImperialBattleOfRaymond::OperatePortalGate
; _this$ = ecx

; 547  : {

  01750	55		 push	 ebp
  01751	8b ec		 mov	 ebp, esp
  01753	83 ec 44	 sub	 esp, 68			; 00000044H
  01756	53		 push	 ebx
  01757	56		 push	 esi
  01758	57		 push	 edi
  01759	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 548  : 	return;
; 549  : }

  0175c	5f		 pop	 edi
  0175d	5e		 pop	 esi
  0175e	5b		 pop	 ebx
  0175f	8b e5		 mov	 esp, ebp
  01761	5d		 pop	 ebp
  01762	c2 0c 00	 ret	 12			; 0000000cH
?OperatePortalGate@CImperialBattleOfRaymond@@QAEX_N0H@Z ENDP ; CImperialBattleOfRaymond::OperatePortalGate
_TEXT	ENDS
PUBLIC	?SetNextState@CImperialBattleOfRaymond@@QAEXXZ	; CImperialBattleOfRaymond::SetNextState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iNextState$ = -8					; size = 4
_this$ = -4						; size = 4
?SetNextState@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::SetNextState
; _this$ = ecx

; 552  : {

  01770	55		 push	 ebp
  01771	8b ec		 mov	 ebp, esp
  01773	83 ec 48	 sub	 esp, 72			; 00000048H
  01776	53		 push	 ebx
  01777	56		 push	 esi
  01778	57		 push	 edi
  01779	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 553  : 	int iNextState = this->m_BattleData.CurrentState + 1;

  0177c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0177f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01782	83 c1 01	 add	 ecx, 1
  01785	89 4d f8	 mov	 DWORD PTR _iNextState$[ebp], ecx

; 554  : 
; 555  : 	if ( iNextState >= BATTLEOFRAYMOND_STATE_END )

  01788	83 7d f8 07	 cmp	 DWORD PTR _iNextState$[ebp], 7
  0178c	7c 07		 jl	 SHORT $LN1@SetNextSta

; 556  : 	{
; 557  : 		iNextState = BATTLEOFRAYMOND_STATE_NONE;

  0178e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iNextState$[ebp], 0
$LN1@SetNextSta:

; 558  : 	}
; 559  : 
; 560  : 	this->SetState(iNextState);

  01795	8b 45 f8	 mov	 eax, DWORD PTR _iNextState$[ebp]
  01798	50		 push	 eax
  01799	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0179c	e8 00 00 00 00	 call	 ?SetState@CImperialBattleOfRaymond@@QAEXH@Z ; CImperialBattleOfRaymond::SetState

; 561  : }

  017a1	5f		 pop	 edi
  017a2	5e		 pop	 esi
  017a3	5b		 pop	 ebx
  017a4	8b e5		 mov	 esp, ebp
  017a6	5d		 pop	 ebp
  017a7	c3		 ret	 0
?SetNextState@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::SetNextState
_TEXT	ENDS
PUBLIC	?EnterPortal@CImperialBattleOfRaymond@@QAE_NPAUOBJECTSTRUCT@@@Z ; CImperialBattleOfRaymond::EnterPortal
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?EnterPortal@CImperialBattleOfRaymond@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CImperialBattleOfRaymond::EnterPortal
; _this$ = ecx

; 564  : {

  017b0	55		 push	 ebp
  017b1	8b ec		 mov	 ebp, esp
  017b3	83 ec 44	 sub	 esp, 68			; 00000044H
  017b6	53		 push	 ebx
  017b7	56		 push	 esi
  017b8	57		 push	 edi
  017b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 565  : 	if(this->m_BattleData.MonsterCount > 0)

  017bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  017bf	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  017c3	7e 04		 jle	 SHORT $LN2@EnterPorta

; 566  : 		return false;

  017c5	32 c0		 xor	 al, al
  017c7	eb 1c		 jmp	 SHORT $LN3@EnterPorta
$LN2@EnterPorta:

; 567  : 	
; 568  : 	//if(this->m_BattleData.PhazeStep != 4)	//DeBug
; 569  : 	//	return false;
; 570  : 
; 571  : 	if(!this->PortalSetState)

  017c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  017cc	0f b6 48 4c	 movzx	 ecx, BYTE PTR [eax+76]
  017d0	85 c9		 test	 ecx, ecx
  017d2	75 0f		 jne	 SHORT $LN1@EnterPorta

; 572  : 	{
; 573  : 		this->SetNextState();

  017d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017d7	e8 00 00 00 00	 call	 ?SetNextState@CImperialBattleOfRaymond@@QAEXXZ ; CImperialBattleOfRaymond::SetNextState

; 574  : 		this->PortalSetState = true;

  017dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  017df	c6 40 4c 01	 mov	 BYTE PTR [eax+76], 1
$LN1@EnterPorta:

; 575  : 	}
; 576  : 
; 577  : 	return true;

  017e3	b0 01		 mov	 al, 1
$LN3@EnterPorta:

; 578  : }

  017e5	5f		 pop	 edi
  017e6	5e		 pop	 esi
  017e7	5b		 pop	 ebx
  017e8	8b e5		 mov	 esp, ebp
  017ea	5d		 pop	 ebp
  017eb	c2 04 00	 ret	 4
?EnterPortal@CImperialBattleOfRaymond@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CImperialBattleOfRaymond::EnterPortal
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_State$ = -24						; size = 4
_pMsg$ = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?SendEventState@CImperialBattleOfRaymond@@QAEXXZ PROC	; CImperialBattleOfRaymond::SendEventState
; _this$ = ecx

; 581  : {

  017f0	55		 push	 ebp
  017f1	8b ec		 mov	 ebp, esp
  017f3	83 ec 58	 sub	 esp, 88			; 00000058H
  017f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  017fb	33 c5		 xor	 eax, ebp
  017fd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01800	53		 push	 ebx
  01801	56		 push	 esi
  01802	57		 push	 edi
  01803	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 582  : 	PMSG_FORT_ENTER_RESULT pMsg;
; 583  : 
; 584  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xF7, 0x02, sizeof(pMsg));

  01806	6a 0c		 push	 12			; 0000000cH
  01808	6a 02		 push	 2
  0180a	68 f7 00 00 00	 push	 247			; 000000f7H
  0180f	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  01812	50		 push	 eax
  01813	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01818	83 c4 10	 add	 esp, 16			; 00000010H

; 585  : 
; 586  : 	pMsg.EntryTime = 0;

  0181b	33 c0		 xor	 eax, eax
  0181d	66 89 45 f6	 mov	 WORD PTR _pMsg$[ebp+10], ax

; 587  : 	pMsg.Day = 6;

  01821	c6 45 f1 06	 mov	 BYTE PTR _pMsg$[ebp+5], 6

; 588  : 	pMsg.Result = 0;

  01825	c6 45 f0 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 589  : 	
; 590  : 	int State;
; 591  : 
; 592  : 	if(this->m_BattleData.CurrentState == 1 || this->m_BattleData.CurrentState == 2)

  01829	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0182c	83 78 34 01	 cmp	 DWORD PTR [eax+52], 1
  01830	74 09		 je	 SHORT $LN7@SendEventS
  01832	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01835	83 78 34 02	 cmp	 DWORD PTR [eax+52], 2
  01839	75 09		 jne	 SHORT $LN8@SendEventS
$LN7@SendEventS:

; 593  : 	{
; 594  : 		State = 1;

  0183b	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _State$[ebp], 1
  01842	eb 34		 jmp	 SHORT $LN6@SendEventS
$LN8@SendEventS:

; 595  : 	}
; 596  : 	else if(this->m_BattleData.CurrentState == 3 || this->m_BattleData.CurrentState == 4)

  01844	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01847	83 78 34 03	 cmp	 DWORD PTR [eax+52], 3
  0184b	74 09		 je	 SHORT $LN4@SendEventS
  0184d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01850	83 78 34 04	 cmp	 DWORD PTR [eax+52], 4
  01854	75 09		 jne	 SHORT $LN5@SendEventS
$LN4@SendEventS:

; 597  : 	{
; 598  : 		State = 2;

  01856	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _State$[ebp], 2
  0185d	eb 19		 jmp	 SHORT $LN6@SendEventS
$LN5@SendEventS:

; 599  : 	}
; 600  : 	else if(this->m_BattleData.CurrentState == 5 || this->m_BattleData.CurrentState == 6)

  0185f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01862	83 78 34 05	 cmp	 DWORD PTR [eax+52], 5
  01866	74 09		 je	 SHORT $LN1@SendEventS
  01868	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0186b	83 78 34 06	 cmp	 DWORD PTR [eax+52], 6
  0186f	75 07		 jne	 SHORT $LN6@SendEventS
$LN1@SendEventS:

; 601  : 	{
; 602  : 		State = 3;

  01871	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _State$[ebp], 3
$LN6@SendEventS:

; 603  : 	}
; 604  : 
; 605  : 	pMsg.State = State;

  01878	8a 45 e8	 mov	 al, BYTE PTR _State$[ebp]
  0187b	88 45 f2	 mov	 BYTE PTR _pMsg$[ebp+6], al

; 606  : 	pMsg.Unk = 3;

  0187e	c6 45 f3 03	 mov	 BYTE PTR _pMsg$[ebp+7], 3

; 607  : 
; 608  : 	this->SendImperialPlayers((LPBYTE)&pMsg, pMsg.h.size);

  01882	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01886	50		 push	 eax
  01887	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0188a	51		 push	 ecx
  0188b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0188e	e8 00 00 00 00	 call	 ?SendImperialPlayers@CImperialBattleOfRaymond@@QAEXPAEH@Z ; CImperialBattleOfRaymond::SendImperialPlayers

; 609  : }

  01893	5f		 pop	 edi
  01894	5e		 pop	 esi
  01895	5b		 pop	 ebx
  01896	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01899	33 cd		 xor	 ecx, ebp
  0189b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  018a0	8b e5		 mov	 esp, ebp
  018a2	5d		 pop	 ebp
  018a3	c3		 ret	 0
?SendEventState@CImperialBattleOfRaymond@@QAEXXZ ENDP	; CImperialBattleOfRaymond::SendEventState
_TEXT	ENDS
END
