; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\Crywolf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bDBCrywolfOccupied@@3HA			; g_bDBCrywolfOccupied
_BSS	SEGMENT
?g_bDBCrywolfOccupied@@3HA DD 01H DUP (?)		; g_bDBCrywolfOccupied
?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA DD 01H DUP (?) ; `CCrywolf::NotifyCrywolfStateLeftTime'::`2'::dwTickCount
?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA DD 01H DUP (?) ; `CCrywolf::NotifyCrywolfStatueAndAltarInfo'::`2'::dwTickCount
?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA DD 01H DUP (?) ; `CCrywolf::NotifyCrywolfBossMonsterInfo'::`2'::dwTickCount
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CCrywolfStateTimeInfo@@QAE@XZ		; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo
PUBLIC	??0CCrywolfObjInfo@@QAE@XZ			; CCrywolfObjInfo::CCrywolfObjInfo
PUBLIC	??_7CCrywolf@@6B@				; CCrywolf::`vftable'
PUBLIC	??0CCrywolf@@QAE@XZ				; CCrywolf::CCrywolf
PUBLIC	??_R4CCrywolf@@6B@				; CCrywolf::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCrywolf@@@8				; CCrywolf `RTTI Type Descriptor'
PUBLIC	??_R3CCrywolf@@8				; CCrywolf::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCrywolf@@8				; CCrywolf::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCrywolf@@8			; CCrywolf::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	_memset:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0MapClass@@QAE@XZ:PROC			; MapClass::MapClass
EXTRN	??1MapClass@@UAE@XZ:PROC			; MapClass::~MapClass
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCrywolf@@UAEPAXI@Z:PROC			; CCrywolf::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCrywolf@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCrywolf@@8 DD FLAT:??_R0?AVCCrywolf@@@8	; CCrywolf::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCrywolf@@8
rdata$r	ENDS
;	COMDAT ??_R2CCrywolf@@8
rdata$r	SEGMENT
??_R2CCrywolf@@8 DD FLAT:??_R1A@?0A@EA@CCrywolf@@8	; CCrywolf::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCrywolf@@8
rdata$r	SEGMENT
??_R3CCrywolf@@8 DD 00H					; CCrywolf::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCrywolf@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCrywolf@@@8
_DATA	SEGMENT
??_R0?AVCCrywolf@@@8 DD FLAT:??_7type_info@@6B@		; CCrywolf `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCrywolf@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCrywolf@@6B@
rdata$r	SEGMENT
??_R4CCrywolf@@6B@ DD 00H				; CCrywolf::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCrywolf@@@8
	DD	FLAT:??_R3CCrywolf@@8
rdata$r	ENDS
;	COMDAT ??_7CCrywolf@@6B@
CONST	SEGMENT
??_7CCrywolf@@6B@ DD FLAT:??_R4CCrywolf@@6B@		; CCrywolf::`vftable'
	DD	FLAT:??_ECCrywolf@@UAEPAXI@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CCrywolf@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCrywolf@@QAE@XZ$0
__ehfuncinfo$??0CCrywolf@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCrywolf@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCrywolf@@QAE@XZ PROC				; CCrywolf::CCrywolf
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCrywolf@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCrywolf@@6B@
  00034	68 00 00 00 00	 push	 OFFSET ??1MapClass@@UAE@XZ ; MapClass::~MapClass
  00039	68 00 00 00 00	 push	 OFFSET ??0MapClass@@QAE@XZ ; MapClass::MapClass
  0003e	6a 03		 push	 3
  00040	68 b8 3d 05 00	 push	 343480			; 00053db8H
  00045	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 c0 14	 add	 eax, 20			; 00000014H
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00058	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	81 c1 44 b9 0f
	00		 add	 ecx, 1030468		; 000fb944H
  00061	e8 00 00 00 00	 call	 ??0CCrywolfObjInfo@@QAE@XZ ; CCrywolfObjInfo::CCrywolfObjInfo
  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	81 c1 f8 bd 0f
	00		 add	 ecx, 1031672		; 000fbdf8H
  0006f	e8 00 00 00 00	 call	 ??0CCrywolfObjInfo@@QAE@XZ ; CCrywolfObjInfo::CCrywolfObjInfo
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	81 c1 ac c2 0f
	00		 add	 ecx, 1032876		; 000fc2acH
  0007d	e8 00 00 00 00	 call	 ??0CCrywolfObjInfo@@QAE@XZ ; CCrywolfObjInfo::CCrywolfObjInfo
  00082	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	81 c1 60 c7 0f
	00		 add	 ecx, 1034080		; 000fc760H
  0008b	e8 00 00 00 00	 call	 ??0CCrywolfObjInfo@@QAE@XZ ; CCrywolfObjInfo::CCrywolfObjInfo
  00090	68 00 00 00 00	 push	 OFFSET ??0CCrywolfStateTimeInfo@@QAE@XZ ; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo
  00095	6a 14		 push	 20			; 00000014H
  00097	6a 2c		 push	 44			; 0000002cH
  00099	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	05 14 cc 0f 00	 add	 eax, 1035284		; 000fcc14H
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  000a7	68 00 00 00 00	 push	 OFFSET ??0CCrywolfStateTimeInfo@@QAE@XZ ; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo
  000ac	6a 07		 push	 7
  000ae	6a 2c		 push	 44			; 0000002cH
  000b0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	05 88 cf 0f 00	 add	 eax, 1036168		; 000fcf88H
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z

; 34   : 	this->m_bFileDataLoad = FALSE;

  000be	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 35   : 	this->m_bDBDataLoadOK = FALSE;

  000c8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 36   : 	this->m_bDBDataLoading = FALSE;

  000d2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 37   : 	this->m_iCrywolfState = 0;

  000dc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000df	c7 80 3c b9 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1030460], 0

; 38   : 	this->m_iScheduleMode =0;

  000e9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 39   : 	this->m_dwCrywolfNotifyMsgStartTick = 0;

  000f3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	c7 80 bc d0 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036476], 0

; 40   : 	this->m_dwCrywolfStartProcTick = 0;	

  00100	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00103	c7 80 c0 d0 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036480], 0

; 41   : 	this->m_bTurnUpBoss = FALSE;

  0010d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00110	c7 80 c4 d0 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036484], 0

; 42   : 	this->m_bChangeAI = FALSE ;	

  0011a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	c7 80 c8 d0 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036488], 0

; 43   : 	this->m_iBossIndex = -1;

  00127	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0012a	c7 80 24 d1 0f
	00 ff ff ff ff	 mov	 DWORD PTR [eax+1036580], -1

; 44   : 	this->m_iBossGroupNumber = 0;

  00134	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00137	c7 80 28 d1 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036584], 0

; 45   : 	memset(this->m_iMonsterGroupNumberArray, 0, MAX_CRYWOLF_MONSTER_GROUP);

  00141	6a 14		 push	 20			; 00000014H
  00143	6a 00		 push	 0
  00145	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00148	05 cc d0 0f 00	 add	 eax, 1036492		; 000fd0ccH
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _memset
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH

; 46   : }

  00156	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00160	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00163	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016a	59		 pop	 ecx
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CCrywolf@@QAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1MapClass@@UAE@XZ ; MapClass::~MapClass
  00005	6a 03		 push	 3
  00007	68 b8 3d 05 00	 push	 343480			; 00053db8H
  0000c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 14	 add	 eax, 20			; 00000014H
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00018	c3		 ret	 0
__ehhandler$??0CCrywolf@@QAE@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCrywolf@@QAE@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCrywolf@@QAE@XZ ENDP				; CCrywolf::CCrywolf
PUBLIC	?Reset@CCrywolfObjInfo@@QAEXXZ			; CCrywolfObjInfo::Reset
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolfobjinfo.h
;	COMDAT ??0CCrywolfObjInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCrywolfObjInfo@@QAE@XZ PROC				; CCrywolfObjInfo::CCrywolfObjInfo, COMDAT
; _this$ = ecx

; 20   : 	CCrywolfObjInfo()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	{
; 22   : 		this->Reset();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Reset@CCrywolfObjInfo@@QAEXXZ ; CCrywolfObjInfo::Reset

; 23   : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CCrywolfObjInfo@@QAE@XZ ENDP				; CCrywolfObjInfo::CCrywolfObjInfo
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?Reset@CCrywolfObjInfo@@QAEXXZ
_TEXT	SEGMENT
_i$218871 = -8						; size = 4
_this$ = -4						; size = 4
?Reset@CCrywolfObjInfo@@QAEXXZ PROC			; CCrywolfObjInfo::Reset, COMDAT
; _this$ = ecx

; 26   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 		for ( int i=0;i<MAX_CRYWOLF_OBJ_INFO;i++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$218871[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN3@Reset
$LN2@Reset:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$218871[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$218871[ebp], eax
$LN3@Reset:
  0001e	81 7d f8 2c 01
	00 00		 cmp	 DWORD PTR _i$218871[ebp], 300 ; 0000012cH
  00025	7d 10		 jge	 SHORT $LN1@Reset

; 28   : 		{
; 29   : 			this->m_iObjIndex[i] = -1;

  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$218871[ebp]
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	c7 44 81 04 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+4], -1

; 30   : 		}

  00035	eb de		 jmp	 SHORT $LN2@Reset
$LN1@Reset:

; 31   : 
; 32   : 		this->m_iObjCount = 0;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 33   : 	}

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?Reset@CCrywolfObjInfo@@QAEXXZ ENDP			; CCrywolfObjInfo::Reset
_TEXT	ENDS
PUBLIC	?Reset@CCrywolfStateTimeInfo@@QAEXXZ		; CCrywolfStateTimeInfo::Reset
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolfstatetimeinfo.h
;	COMDAT ??0CCrywolfStateTimeInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCrywolfStateTimeInfo@@QAE@XZ PROC			; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo, COMDAT
; _this$ = ecx

; 15   : 	CCrywolfStateTimeInfo()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 16   : 	{
; 17   : 		this->Reset();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Reset@CCrywolfStateTimeInfo@@QAEXXZ ; CCrywolfStateTimeInfo::Reset

; 18   : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CCrywolfStateTimeInfo@@QAE@XZ ENDP			; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?Reset@CCrywolfStateTimeInfo@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@CCrywolfStateTimeInfo@@QAEXXZ PROC		; CCrywolfStateTimeInfo::Reset, COMDAT
; _this$ = ecx

; 21   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 		this->m_bUsed = FALSE;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 23   : 		this->m_iStateNumber = -1;	

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 24   : 		this->m_iYear = -1;	

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 25   : 		this->m_iMonth = -1;	

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 26   : 		this->m_iDay = -1;	

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1

; 27   : 		this->m_iDayOfWeek = -1;	

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c7 40 14 ff ff
	ff ff		 mov	 DWORD PTR [eax+20], -1

; 28   : 		this->m_iHour = -1;	

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 18 ff ff
	ff ff		 mov	 DWORD PTR [eax+24], -1

; 29   : 		this->m_iMinute = -1;	

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 30   : 		this->m_iSecond = -1;	

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1

; 31   : 		this->m_iContinuanceTime = 0;	

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 32   : 		this->m_dwAppliedTickCount = 0;	

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 33   : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
?Reset@CCrywolfStateTimeInfo@@QAEXXZ ENDP		; CCrywolfStateTimeInfo::Reset
_TEXT	ENDS
PUBLIC	??1CCrywolf@@UAE@XZ				; CCrywolf::~CCrywolf
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCCrywolf@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCrywolf@@UAEPAXI@Z PROC				; CCrywolf::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CCrywolf@@UAE@XZ	; CCrywolf::~CCrywolf
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCCrywolf@@UAEPAXI@Z ENDP				; CCrywolf::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCrywolf@@UAE@XZ PROC				; CCrywolf::~CCrywolf
; _this$ = ecx

; 49   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	83 ec 44	 sub	 esp, 68			; 00000044H
  00186	53		 push	 ebx
  00187	56		 push	 esi
  00188	57		 push	 edi
  00189	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0018c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCrywolf@@6B@

; 50   : 	return;
; 51   : }

  00195	68 00 00 00 00	 push	 OFFSET ??1MapClass@@UAE@XZ ; MapClass::~MapClass
  0019a	6a 03		 push	 3
  0019c	68 b8 3d 05 00	 push	 343480			; 00053db8H
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a4	83 c0 14	 add	 eax, 20			; 00000014H
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	5b		 pop	 ebx
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
??1CCrywolf@@UAE@XZ ENDP				; CCrywolf::~CCrywolf
_TEXT	ENDS
PUBLIC	??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@ ; `string'
PUBLIC	??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@ ; `string'
PUBLIC	??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ ; `string'
PUBLIC	??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ ; `string'
PUBLIC	??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	?DelAllData@CCrywolf@@QAEXXZ			; CCrywolf::DelAllData
PUBLIC	??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?LoadData@CCrywolf@@QAEHPAD@Z			; CCrywolf::LoadData
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_strcmp:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@
CONST	SEGMENT
??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@ DB '[Cry'
	DB	'wolf Main Job] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@
CONST	SEGMENT
??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@ DB '['
	DB	'Crywolf Main Job] - %s file is Loaded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
CONST	SEGMENT
??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ DB '[Cry'
	DB	'wolf Main Job] - Invalid Monster Boss Group Number (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
CONST	SEGMENT
??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ DB '[Cry'
	DB	'wolf Main Job] - Invalid Monster Group Number (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@
CONST	SEGMENT
??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@ DB '[Cr'
	DB	'ywolf Main Job] - Excced MAX StartTime (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@
CONST	SEGMENT
??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@ DB '[C'
	DB	'rywolf Main Job] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@
CONST	SEGMENT
??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@ DB '[Cry'
	DB	'wolf Main Job] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
xdata$x	SEGMENT
__catchsym$?LoadData@CCrywolf@@QAEHPAD@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadData@CCrywolf@@QAEHPAD@Z$0
__unwindtable$?LoadData@CCrywolf@@QAEHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@CCrywolf@@QAEHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@CCrywolf@@QAEHPAD@Z$2
__ehfuncinfo$?LoadData@CCrywolf@@QAEHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@CCrywolf@@QAEHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@CCrywolf@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv398 = -160						; size = 4
tv397 = -160						; size = 4
tv396 = -160						; size = 4
tv395 = -160						; size = 4
tv394 = -160						; size = 4
tv393 = -160						; size = 4
tv392 = -160						; size = 4
tv391 = -160						; size = 4
tv390 = -160						; size = 4
tv389 = -160						; size = 4
tv388 = -160						; size = 4
tv387 = -160						; size = 4
tv386 = -160						; size = 4
tv385 = -160						; size = 4
tv384 = -160						; size = 4
tv383 = -160						; size = 4
tv382 = -160						; size = 4
tv381 = -160						; size = 4
tv380 = -160						; size = 4
tv379 = -160						; size = 4
tv378 = -160						; size = 4
tv377 = -160						; size = 4
tv376 = -160						; size = 4
tv375 = -160						; size = 4
tv374 = -160						; size = 4
tv373 = -160						; size = 4
tv372 = -160						; size = 4
tv371 = -160						; size = 4
tv370 = -160						; size = 4
tv369 = -160						; size = 4
tv368 = -160						; size = 4
tv367 = -160						; size = 4
tv366 = -160						; size = 4
tv365 = -160						; size = 4
_iChangeAITime$229635 = -92				; size = 4
_iTurnUpTime$229628 = -88				; size = 4
_iGroupNumber$229627 = -84				; size = 4
_iGroupNumber$229621 = -80				; size = 4
_iSecond$229614 = -76					; size = 4
_iMinute$229613 = -72					; size = 4
_iHour$229612 = -68					; size = 4
_iStateNumber$229611 = -64				; size = 4
_iContinuanceTime$229596 = -60				; size = 4
_iMinute$229595 = -56					; size = 4
_iHour$229594 = -52					; size = 4
_iDayOfWeek$229593 = -48				; size = 4
_iDay$229592 = -44					; size = 4
_iMonth$229591 = -40					; size = 4
_iStateNumber$229590 = -36				; size = 4
_iScheduleMode$229589 = -32				; size = 4
_iType$229563 = -28					; size = 4
_Token$229559 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@CCrywolf@@QAEHPAD@Z PROC			; CCrywolf::LoadData
; _this$ = ecx

; 54   : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	6a ff		 push	 -1
  001c5	68 00 00 00 00	 push	 __ehhandler$?LoadData@CCrywolf@@QAEHPAD@Z
  001ca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  001d0	50		 push	 eax
  001d1	51		 push	 ecx
  001d2	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  001d8	53		 push	 ebx
  001d9	56		 push	 esi
  001da	57		 push	 edi
  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001e0	33 c5		 xor	 eax, ebp
  001e2	50		 push	 eax
  001e3	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  001e6	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  001ec	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  001ef	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	this->m_bFileDataLoad = FALSE;

  001f2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001f5	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 56   : 
; 57   : 	if ( !lpszFileName || !strcmp(lpszFileName, "") )

  001fc	83 7d 08 00	 cmp	 DWORD PTR _lpszFileName$[ebp], 0
  00200	74 15		 je	 SHORT $LN28@LoadData
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00207	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  0020a	50		 push	 eax
  0020b	e8 00 00 00 00	 call	 _strcmp
  00210	83 c4 08	 add	 esp, 8
  00213	85 c0		 test	 eax, eax
  00215	75 14		 jne	 SHORT $LN29@LoadData
$LN28@LoadData:

; 58   : 	{
; 59   : 		MsgBox("[Crywolf Main Job] - File load error : File Name Error");

  00217	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@
  0021c	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00221	83 c4 04	 add	 esp, 4

; 60   : 		return FALSE;

  00224	33 c0		 xor	 eax, eax
  00226	e9 8a 09 00 00	 jmp	 $LN30@LoadData
$LN29@LoadData:

; 61   : 	}
; 62   : 
; 63   : 	try
; 64   : 	{

  0022b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 65   : 		SMDToken Token;
; 66   : 		SMDFile = fopen(lpszFileName, "r");

  00232	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00237	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 _fopen
  00240	83 c4 08	 add	 esp, 8
  00243	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 67   : 
; 68   : 		if ( SMDFile == NULL )

  00248	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  0024f	75 18		 jne	 SHORT $LN26@LoadData

; 69   : 		{
; 70   : 			MsgBox("[Crywolf Main Job] - Can't Open %s ", lpszFileName);

  00251	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00254	50		 push	 eax
  00255	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@
  0025a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0025f	83 c4 08	 add	 esp, 8

; 71   : 			return FALSE;

  00262	33 c0		 xor	 eax, eax
  00264	e9 4c 09 00 00	 jmp	 $LN30@LoadData
$LN26@LoadData:

; 72   : 		}
; 73   : 
; 74   : 		this->DelAllData();

  00269	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0026c	e8 00 00 00 00	 call	 ?DelAllData@CCrywolf@@QAEXXZ ; CCrywolf::DelAllData

; 75   : 		int iType = -1;

  00271	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _iType$229563[ebp], -1
$LN25@LoadData:

; 76   : 
; 77   : 		while ( true )

  00278	b8 01 00 00 00	 mov	 eax, 1
  0027d	85 c0		 test	 eax, eax
  0027f	0f 84 d7 08 00
	00		 je	 $LN24@LoadData

; 78   : 		{
; 79   : 			Token = GetToken();

  00285	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0028a	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv365[ebp], eax
  00290	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv365[ebp]
  00296	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 80   : 
; 81   : 			if ( Token == END )

  00299	83 7d e8 02	 cmp	 DWORD PTR _Token$229559[ebp], 2
  0029d	75 05		 jne	 SHORT $LN23@LoadData

; 82   : 				break;

  0029f	e9 b8 08 00 00	 jmp	 $LN24@LoadData
$LN23@LoadData:

; 83   : 
; 84   : 			iType = (int)TokenNumber;

  002a4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002aa	e8 00 00 00 00	 call	 __ftol2_sse
  002af	89 45 e4	 mov	 DWORD PTR _iType$229563[ebp], eax
$LN22@LoadData:

; 85   : 
; 86   : 			while ( true )

  002b2	b8 01 00 00 00	 mov	 eax, 1
  002b7	85 c0		 test	 eax, eax
  002b9	0f 84 98 08 00
	00		 je	 $LN21@LoadData

; 87   : 			{
; 88   : 				if ( iType == 0 )

  002bf	83 7d e4 00	 cmp	 DWORD PTR _iType$229563[ebp], 0
  002c3	0f 85 79 02 00
	00		 jne	 $LN20@LoadData

; 89   : 				{
; 90   : 					int iScheduleMode = 0;

  002c9	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iScheduleMode$229589[ebp], 0

; 91   : 					int iStateNumber = -1;

  002d0	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _iStateNumber$229590[ebp], -1

; 92   : 					int iMonth = -1;

  002d7	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _iMonth$229591[ebp], -1

; 93   : 					int iDay = -1;

  002de	c7 45 d4 ff ff
	ff ff		 mov	 DWORD PTR _iDay$229592[ebp], -1

; 94   : 					int iDayOfWeek = -1;

  002e5	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _iDayOfWeek$229593[ebp], -1

; 95   : 					int iHour = -1;

  002ec	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _iHour$229594[ebp], -1

; 96   : 					int iMinute = -1;

  002f3	c7 45 c8 ff ff
	ff ff		 mov	 DWORD PTR _iMinute$229595[ebp], -1

; 97   : 					int iContinuanceTime = 0;

  002fa	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _iContinuanceTime$229596[ebp], 0

; 98   : 
; 99   : 					Token = GetToken();

  00301	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00306	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv366[ebp], eax
  0030c	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv366[ebp]
  00312	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 100  : 
; 101  : 					if ( !strcmp("end", TokenString))

  00315	68 00 00 00 00	 push	 OFFSET _TokenString
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0031f	e8 00 00 00 00	 call	 _strcmp
  00324	83 c4 08	 add	 esp, 8
  00327	85 c0		 test	 eax, eax
  00329	75 05		 jne	 SHORT $LN19@LoadData

; 102  : 						break;

  0032b	e9 27 08 00 00	 jmp	 $LN21@LoadData
$LN19@LoadData:

; 103  : 
; 104  : 					iScheduleMode = (int)TokenNumber;

  00330	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00336	e8 00 00 00 00	 call	 __ftol2_sse
  0033b	89 45 e0	 mov	 DWORD PTR _iScheduleMode$229589[ebp], eax

; 105  : 
; 106  : 					Token = GetToken();

  0033e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00343	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv367[ebp], eax
  00349	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv367[ebp]
  0034f	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 107  : 					iStateNumber = (int)TokenNumber;

  00352	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00358	e8 00 00 00 00	 call	 __ftol2_sse
  0035d	89 45 dc	 mov	 DWORD PTR _iStateNumber$229590[ebp], eax

; 108  : 
; 109  : 					Token = GetToken();

  00360	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00365	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv368[ebp], eax
  0036b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv368[ebp]
  00371	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 110  : 					iMonth = (int)TokenNumber;

  00374	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0037a	e8 00 00 00 00	 call	 __ftol2_sse
  0037f	89 45 d8	 mov	 DWORD PTR _iMonth$229591[ebp], eax

; 111  : 
; 112  : 					Token = GetToken();

  00382	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00387	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv369[ebp], eax
  0038d	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv369[ebp]
  00393	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 113  : 					iDay = (int)TokenNumber;

  00396	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0039c	e8 00 00 00 00	 call	 __ftol2_sse
  003a1	89 45 d4	 mov	 DWORD PTR _iDay$229592[ebp], eax

; 114  : 
; 115  : 					Token = GetToken();

  003a4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003a9	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv370[ebp], eax
  003af	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv370[ebp]
  003b5	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 116  : 					iDayOfWeek = (int)TokenNumber;

  003b8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003be	e8 00 00 00 00	 call	 __ftol2_sse
  003c3	89 45 d0	 mov	 DWORD PTR _iDayOfWeek$229593[ebp], eax

; 117  : 
; 118  : 					Token = GetToken();

  003c6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003cb	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv371[ebp], eax
  003d1	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv371[ebp]
  003d7	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 119  : 					iHour = (int)TokenNumber;

  003da	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003e0	e8 00 00 00 00	 call	 __ftol2_sse
  003e5	89 45 cc	 mov	 DWORD PTR _iHour$229594[ebp], eax

; 120  : 
; 121  : 					Token = GetToken();

  003e8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003ed	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv372[ebp], eax
  003f3	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv372[ebp]
  003f9	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 122  : 					iMinute = (int)TokenNumber;

  003fc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00402	e8 00 00 00 00	 call	 __ftol2_sse
  00407	89 45 c8	 mov	 DWORD PTR _iMinute$229595[ebp], eax

; 123  : 
; 124  : 					Token = GetToken();

  0040a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0040f	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv373[ebp], eax
  00415	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv373[ebp]
  0041b	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 125  : 					iContinuanceTime = (int)TokenNumber;

  0041e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00424	e8 00 00 00 00	 call	 __ftol2_sse
  00429	89 45 c4	 mov	 DWORD PTR _iContinuanceTime$229596[ebp], eax

; 126  : 
; 127  : 					if ( this->m_StartTimeInfoCount <= -1 || this->m_StartTimeInfoCount >= MAX_CRYWOLF_STATE_TIME )

  0042c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0042f	83 b8 84 cf 0f
	00 ff		 cmp	 DWORD PTR [eax+1036164], -1
  00436	7e 0c		 jle	 SHORT $LN17@LoadData
  00438	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0043b	83 b8 84 cf 0f
	00 14		 cmp	 DWORD PTR [eax+1036164], 20 ; 00000014H
  00442	7c 17		 jl	 SHORT $LN18@LoadData
$LN17@LoadData:

; 128  : 					{
; 129  : 						MsgBox("[Crywolf Main Job] - Excced MAX StartTime (%d)", this->m_StartTimeInfoCount);

  00444	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00447	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  0044d	51		 push	 ecx
  0044e	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@
  00453	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00458	83 c4 08	 add	 esp, 8
$LN18@LoadData:

; 130  : 					}
; 131  : 
; 132  : 					this->m_iScheduleMode = iScheduleMode;

  0045b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0045e	8b 4d e0	 mov	 ecx, DWORD PTR _iScheduleMode$229589[ebp]
  00461	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 133  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iStateNumber = iStateNumber;

  00464	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00467	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  0046d	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00470	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00473	8b 45 dc	 mov	 eax, DWORD PTR _iStateNumber$229590[ebp]
  00476	89 84 0a 18 cc
	0f 00		 mov	 DWORD PTR [edx+ecx+1035288], eax

; 134  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iMonth = iMonth;

  0047d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00480	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  00486	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00489	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0048c	8b 45 d8	 mov	 eax, DWORD PTR _iMonth$229591[ebp]
  0048f	89 84 0a 20 cc
	0f 00		 mov	 DWORD PTR [edx+ecx+1035296], eax

; 135  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iDay = iDay;

  00496	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00499	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  0049f	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  004a2	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  004a5	8b 45 d4	 mov	 eax, DWORD PTR _iDay$229592[ebp]
  004a8	89 84 0a 24 cc
	0f 00		 mov	 DWORD PTR [edx+ecx+1035300], eax

; 136  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iDayOfWeek = iDayOfWeek;

  004af	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  004b2	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  004b8	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  004bb	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  004be	8b 45 d0	 mov	 eax, DWORD PTR _iDayOfWeek$229593[ebp]
  004c1	89 84 0a 28 cc
	0f 00		 mov	 DWORD PTR [edx+ecx+1035304], eax

; 137  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iHour = iHour;

  004c8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  004cb	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  004d1	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  004d4	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  004d7	8b 45 cc	 mov	 eax, DWORD PTR _iHour$229594[ebp]
  004da	89 84 0a 2c cc
	0f 00		 mov	 DWORD PTR [edx+ecx+1035308], eax

; 138  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iMinute = iMinute;

  004e1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  004e4	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  004ea	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  004ed	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  004f0	8b 45 c8	 mov	 eax, DWORD PTR _iMinute$229595[ebp]
  004f3	89 84 0a 30 cc
	0f 00		 mov	 DWORD PTR [edx+ecx+1035312], eax

; 139  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iContinuanceTime = iContinuanceTime;

  004fa	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  004fd	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  00503	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00506	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00509	8b 45 c4	 mov	 eax, DWORD PTR _iContinuanceTime$229596[ebp]
  0050c	89 84 0a 38 cc
	0f 00		 mov	 DWORD PTR [edx+ecx+1035320], eax

; 140  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_bUsed = TRUE;

  00513	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00516	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  0051c	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0051f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00522	c7 84 0a 14 cc
	0f 00 01 00 00
	00		 mov	 DWORD PTR [edx+ecx+1035284], 1

; 141  : 					this->m_StartTimeInfoCount++;

  0052d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00530	8b 88 84 cf 0f
	00		 mov	 ecx, DWORD PTR [eax+1036164]
  00536	83 c1 01	 add	 ecx, 1
  00539	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0053c	89 8a 84 cf 0f
	00		 mov	 DWORD PTR [edx+1036164], ecx
$LN20@LoadData:

; 142  : 				}
; 143  : 
; 144  : 				if ( iType == 1 )

  00542	83 7d e4 01	 cmp	 DWORD PTR _iType$229563[ebp], 1
  00546	0f 85 57 01 00
	00		 jne	 $LN16@LoadData

; 145  : 				{
; 146  : 					int iStateNumber = -1;

  0054c	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _iStateNumber$229611[ebp], -1

; 147  : 					int iHour = 0;

  00553	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _iHour$229612[ebp], 0

; 148  : 					int iMinute = 0;

  0055a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _iMinute$229613[ebp], 0

; 149  : 					int iSecond = 0;

  00561	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _iSecond$229614[ebp], 0

; 150  : 
; 151  : 					Token = GetToken();

  00568	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0056d	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv374[ebp], eax
  00573	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv374[ebp]
  00579	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 152  : 
; 153  : 					if ( !strcmp("end", TokenString))

  0057c	68 00 00 00 00	 push	 OFFSET _TokenString
  00581	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00586	e8 00 00 00 00	 call	 _strcmp
  0058b	83 c4 08	 add	 esp, 8
  0058e	85 c0		 test	 eax, eax
  00590	75 05		 jne	 SHORT $LN15@LoadData

; 154  : 						break;

  00592	e9 c0 05 00 00	 jmp	 $LN21@LoadData
$LN15@LoadData:

; 155  : 
; 156  : 					iStateNumber = (int)TokenNumber;

  00597	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0059d	e8 00 00 00 00	 call	 __ftol2_sse
  005a2	89 45 c0	 mov	 DWORD PTR _iStateNumber$229611[ebp], eax

; 157  : 					
; 158  : 					Token = GetToken();

  005a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005aa	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv375[ebp], eax
  005b0	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv375[ebp]
  005b6	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 159  : 					iHour = (int)TokenNumber;

  005b9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005bf	e8 00 00 00 00	 call	 __ftol2_sse
  005c4	89 45 bc	 mov	 DWORD PTR _iHour$229612[ebp], eax

; 160  : 
; 161  : 					Token = GetToken();

  005c7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005cc	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv376[ebp], eax
  005d2	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv376[ebp]
  005d8	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 162  : 					iMinute = (int)TokenNumber;

  005db	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005e1	e8 00 00 00 00	 call	 __ftol2_sse
  005e6	89 45 b8	 mov	 DWORD PTR _iMinute$229613[ebp], eax

; 163  : 
; 164  : 					Token = GetToken();

  005e9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005ee	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv377[ebp], eax
  005f4	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv377[ebp]
  005fa	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 165  : 					iSecond = (int)TokenNumber;

  005fd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00603	e8 00 00 00 00	 call	 __ftol2_sse
  00608	89 45 b4	 mov	 DWORD PTR _iSecond$229614[ebp], eax

; 166  : 
; 167  : 					this->m_StateTimeInfo[iStateNumber].m_iStateNumber = iStateNumber;

  0060b	8b 45 c0	 mov	 eax, DWORD PTR _iStateNumber$229611[ebp]
  0060e	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00611	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00614	8b 55 c0	 mov	 edx, DWORD PTR _iStateNumber$229611[ebp]
  00617	89 94 01 8c cf
	0f 00		 mov	 DWORD PTR [ecx+eax+1036172], edx

; 168  : 					this->m_StateTimeInfo[iStateNumber].m_iHour = iHour;

  0061e	8b 45 c0	 mov	 eax, DWORD PTR _iStateNumber$229611[ebp]
  00621	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00624	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00627	8b 55 bc	 mov	 edx, DWORD PTR _iHour$229612[ebp]
  0062a	89 94 01 a0 cf
	0f 00		 mov	 DWORD PTR [ecx+eax+1036192], edx

; 169  : 					this->m_StateTimeInfo[iStateNumber].m_iMinute = iMinute;

  00631	8b 45 c0	 mov	 eax, DWORD PTR _iStateNumber$229611[ebp]
  00634	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00637	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0063a	8b 55 b8	 mov	 edx, DWORD PTR _iMinute$229613[ebp]
  0063d	89 94 01 a4 cf
	0f 00		 mov	 DWORD PTR [ecx+eax+1036196], edx

; 170  : 					this->m_StateTimeInfo[iStateNumber].m_iSecond = iSecond;

  00644	8b 45 c0	 mov	 eax, DWORD PTR _iStateNumber$229611[ebp]
  00647	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0064a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0064d	8b 55 b4	 mov	 edx, DWORD PTR _iSecond$229614[ebp]
  00650	89 94 01 a8 cf
	0f 00		 mov	 DWORD PTR [ecx+eax+1036200], edx

; 171  : 					this->m_StateTimeInfo[iStateNumber].m_iContinuanceTime = iHour * 60 * 60 * 1000 + iMinute * 60 * 1000 + iSecond * 1000;

  00657	8b 45 c0	 mov	 eax, DWORD PTR _iStateNumber$229611[ebp]
  0065a	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0065d	8b 4d b4	 mov	 ecx, DWORD PTR _iSecond$229614[ebp]
  00660	69 c9 e8 03 00
	00		 imul	 ecx, 1000		; 000003e8H
  00666	8b 55 b8	 mov	 edx, DWORD PTR _iMinute$229613[ebp]
  00669	6b d2 3c	 imul	 edx, 60			; 0000003cH
  0066c	69 d2 e8 03 00
	00		 imul	 edx, 1000		; 000003e8H
  00672	8b 75 bc	 mov	 esi, DWORD PTR _iHour$229612[ebp]
  00675	6b f6 3c	 imul	 esi, 60			; 0000003cH
  00678	6b f6 3c	 imul	 esi, 60			; 0000003cH
  0067b	69 f6 e8 03 00
	00		 imul	 esi, 1000		; 000003e8H
  00681	03 f2		 add	 esi, edx
  00683	03 f1		 add	 esi, ecx
  00685	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00688	89 b4 01 ac cf
	0f 00		 mov	 DWORD PTR [ecx+eax+1036204], esi

; 172  : 					this->m_StateTimeInfo[iStateNumber].m_bUsed = TRUE;

  0068f	8b 45 c0	 mov	 eax, DWORD PTR _iStateNumber$229611[ebp]
  00692	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00695	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00698	c7 84 01 88 cf
	0f 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+1036168], 1
$LN16@LoadData:

; 173  : 				}
; 174  : 
; 175  : 				if ( iType == 2 )

  006a3	83 7d e4 02	 cmp	 DWORD PTR _iType$229563[ebp], 2
  006a7	0f 85 8c 00 00
	00		 jne	 $LN14@LoadData

; 176  : 				{
; 177  : 					int iGroupNumber = -1;

  006ad	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _iGroupNumber$229621[ebp], -1

; 178  : 
; 179  : 					Token = GetToken();

  006b4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006b9	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv378[ebp], eax
  006bf	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv378[ebp]
  006c5	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 180  : 
; 181  : 					if ( !strcmp("end", TokenString))

  006c8	68 00 00 00 00	 push	 OFFSET _TokenString
  006cd	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  006d2	e8 00 00 00 00	 call	 _strcmp
  006d7	83 c4 08	 add	 esp, 8
  006da	85 c0		 test	 eax, eax
  006dc	75 05		 jne	 SHORT $LN13@LoadData

; 182  : 						break;

  006de	e9 74 04 00 00	 jmp	 $LN21@LoadData
$LN13@LoadData:

; 183  : 
; 184  : 					iGroupNumber = (int)TokenNumber;

  006e3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006e9	e8 00 00 00 00	 call	 __ftol2_sse
  006ee	89 45 b0	 mov	 DWORD PTR _iGroupNumber$229621[ebp], eax

; 185  : 
; 186  : 					if ( iGroupNumber <= -1 && iGroupNumber >= MAX_CRYWOLF_MONSTER_GROUP )

  006f1	83 7d b0 ff	 cmp	 DWORD PTR _iGroupNumber$229621[ebp], -1
  006f5	7f 17		 jg	 SHORT $LN12@LoadData
  006f7	83 7d b0 14	 cmp	 DWORD PTR _iGroupNumber$229621[ebp], 20 ; 00000014H
  006fb	7c 11		 jl	 SHORT $LN12@LoadData

; 187  : 					{
; 188  : 						MsgBox("[Crywolf Main Job] - Invalid Monster Group Number (%d)", iGroupNumber);

  006fd	8b 45 b0	 mov	 eax, DWORD PTR _iGroupNumber$229621[ebp]
  00700	50		 push	 eax
  00701	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
  00706	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0070b	83 c4 08	 add	 esp, 8
$LN12@LoadData:

; 189  : 					}
; 190  : 
; 191  : 					this->m_iMonsterGroupNumberArray[this->m_iMonsterGroupNumberCount] = iGroupNumber;

  0070e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00711	8b 88 1c d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036572]
  00717	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0071a	8b 45 b0	 mov	 eax, DWORD PTR _iGroupNumber$229621[ebp]
  0071d	89 84 8a cc d0
	0f 00		 mov	 DWORD PTR [edx+ecx*4+1036492], eax

; 192  : 					this->m_iMonsterGroupNumberCount++;

  00724	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00727	8b 88 1c d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036572]
  0072d	83 c1 01	 add	 ecx, 1
  00730	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00733	89 8a 1c d1 0f
	00		 mov	 DWORD PTR [edx+1036572], ecx
$LN14@LoadData:

; 193  : 				}
; 194  : 
; 195  : 				if ( iType == 3 )

  00739	83 7d e4 03	 cmp	 DWORD PTR _iType$229563[ebp], 3
  0073d	0f 85 a2 00 00
	00		 jne	 $LN11@LoadData

; 196  : 				{
; 197  : 					int iGroupNumber = -1;

  00743	c7 45 ac ff ff
	ff ff		 mov	 DWORD PTR _iGroupNumber$229627[ebp], -1

; 198  : 					int iTurnUpTime = 0;

  0074a	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _iTurnUpTime$229628[ebp], 0

; 199  : 
; 200  : 					Token = GetToken();

  00751	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00756	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv379[ebp], eax
  0075c	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv379[ebp]
  00762	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 201  : 
; 202  : 					if ( !strcmp("end", TokenString))

  00765	68 00 00 00 00	 push	 OFFSET _TokenString
  0076a	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0076f	e8 00 00 00 00	 call	 _strcmp
  00774	83 c4 08	 add	 esp, 8
  00777	85 c0		 test	 eax, eax
  00779	75 05		 jne	 SHORT $LN10@LoadData

; 203  : 						break;

  0077b	e9 d7 03 00 00	 jmp	 $LN21@LoadData
$LN10@LoadData:

; 204  : 
; 205  : 					iGroupNumber = (int)TokenNumber;

  00780	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00786	e8 00 00 00 00	 call	 __ftol2_sse
  0078b	89 45 ac	 mov	 DWORD PTR _iGroupNumber$229627[ebp], eax

; 206  : 					
; 207  : 					Token = GetToken();

  0078e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00793	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv380[ebp], eax
  00799	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv380[ebp]
  0079f	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 208  : 					iTurnUpTime = (int)TokenNumber;

  007a2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  007a8	e8 00 00 00 00	 call	 __ftol2_sse
  007ad	89 45 a8	 mov	 DWORD PTR _iTurnUpTime$229628[ebp], eax

; 209  : 
; 210  : 					if ( iGroupNumber <= -1 && iGroupNumber >= MAX_CRYWOLF_MONSTER_GROUP )

  007b0	83 7d ac ff	 cmp	 DWORD PTR _iGroupNumber$229627[ebp], -1
  007b4	7f 17		 jg	 SHORT $LN9@LoadData
  007b6	83 7d ac 14	 cmp	 DWORD PTR _iGroupNumber$229627[ebp], 20 ; 00000014H
  007ba	7c 11		 jl	 SHORT $LN9@LoadData

; 211  : 					{
; 212  : 						MsgBox("[Crywolf Main Job] - Invalid Monster Boss Group Number (%d)", iGroupNumber);

  007bc	8b 45 ac	 mov	 eax, DWORD PTR _iGroupNumber$229627[ebp]
  007bf	50		 push	 eax
  007c0	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
  007c5	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  007ca	83 c4 08	 add	 esp, 8
$LN9@LoadData:

; 213  : 					}
; 214  : 
; 215  : 					this->m_iBossGroupNumber = iGroupNumber;

  007cd	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  007d0	8b 4d ac	 mov	 ecx, DWORD PTR _iGroupNumber$229627[ebp]
  007d3	89 88 28 d1 0f
	00		 mov	 DWORD PTR [eax+1036584], ecx

; 216  : 					this->m_iBossTurnUpTime = iTurnUpTime;

  007d9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  007dc	8b 4d a8	 mov	 ecx, DWORD PTR _iTurnUpTime$229628[ebp]
  007df	89 88 2c d1 0f
	00		 mov	 DWORD PTR [eax+1036588], ecx
$LN11@LoadData:

; 217  : 				}
; 218  : 
; 219  : 				if ( iType == 4 )

  007e5	83 7d e4 04	 cmp	 DWORD PTR _iType$229563[ebp], 4
  007e9	75 50		 jne	 SHORT $LN8@LoadData

; 220  : 				{
; 221  : 					int iChangeAITime = 0;

  007eb	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _iChangeAITime$229635[ebp], 0

; 222  : 
; 223  : 					Token = GetToken();

  007f2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007f7	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv381[ebp], eax
  007fd	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv381[ebp]
  00803	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 224  : 
; 225  : 					if ( !strcmp("end", TokenString))

  00806	68 00 00 00 00	 push	 OFFSET _TokenString
  0080b	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00810	e8 00 00 00 00	 call	 _strcmp
  00815	83 c4 08	 add	 esp, 8
  00818	85 c0		 test	 eax, eax
  0081a	75 05		 jne	 SHORT $LN7@LoadData

; 226  : 						break;

  0081c	e9 36 03 00 00	 jmp	 $LN21@LoadData
$LN7@LoadData:

; 227  : 
; 228  : 					iChangeAITime = (int)TokenNumber;

  00821	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00827	e8 00 00 00 00	 call	 __ftol2_sse
  0082c	89 45 a4	 mov	 DWORD PTR _iChangeAITime$229635[ebp], eax

; 229  : 					this->m_iMonsterGroupChangeAITime = iChangeAITime;

  0082f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00832	8b 4d a4	 mov	 ecx, DWORD PTR _iChangeAITime$229635[ebp]
  00835	89 88 20 d1 0f
	00		 mov	 DWORD PTR [eax+1036576], ecx
$LN8@LoadData:

; 230  : 				}
; 231  : 
; 232  : 				if ( iType == 5 )

  0083b	83 7d e4 05	 cmp	 DWORD PTR _iType$229563[ebp], 5
  0083f	0f 85 33 01 00
	00		 jne	 $LN6@LoadData

; 233  : 				{
; 234  : 					Token = GetToken();

  00845	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0084a	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv382[ebp], eax
  00850	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv382[ebp]
  00856	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 235  : 
; 236  : 					if ( !strcmp("end", TokenString))

  00859	68 00 00 00 00	 push	 OFFSET _TokenString
  0085e	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00863	e8 00 00 00 00	 call	 _strcmp
  00868	83 c4 08	 add	 esp, 8
  0086b	85 c0		 test	 eax, eax
  0086d	75 05		 jne	 SHORT $LN5@LoadData

; 237  : 						break;

  0086f	e9 e3 02 00 00	 jmp	 $LN21@LoadData
$LN5@LoadData:

; 238  : 
; 239  : 					this->m_iMVPScoreTable[0] = (int)TokenNumber;

  00874	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0087a	e8 00 00 00 00	 call	 __ftol2_sse
  0087f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00882	89 81 30 d1 0f
	00		 mov	 DWORD PTR [ecx+1036592], eax

; 240  : 
; 241  : 					Token = GetToken();

  00888	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0088d	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv383[ebp], eax
  00893	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv383[ebp]
  00899	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 242  : 					this->m_iMVPScoreTable[1] = (int)TokenNumber;

  0089c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008a2	e8 00 00 00 00	 call	 __ftol2_sse
  008a7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008aa	89 81 34 d1 0f
	00		 mov	 DWORD PTR [ecx+1036596], eax

; 243  : 
; 244  : 					Token = GetToken();

  008b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008b5	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv384[ebp], eax
  008bb	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv384[ebp]
  008c1	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 245  : 					this->m_iMVPScoreTable[2] = (int)TokenNumber;

  008c4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008ca	e8 00 00 00 00	 call	 __ftol2_sse
  008cf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008d2	89 81 38 d1 0f
	00		 mov	 DWORD PTR [ecx+1036600], eax

; 246  : 
; 247  : 					Token = GetToken();

  008d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  008dd	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv385[ebp], eax
  008e3	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv385[ebp]
  008e9	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 248  : 					this->m_iMVPScoreTable[3] = (int)TokenNumber;

  008ec	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008f2	e8 00 00 00 00	 call	 __ftol2_sse
  008f7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008fa	89 81 3c d1 0f
	00		 mov	 DWORD PTR [ecx+1036604], eax

; 249  : 
; 250  : 					Token = GetToken();

  00900	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00905	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv386[ebp], eax
  0090b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv386[ebp]
  00911	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 251  : 					this->m_iMVPScoreTable[4] = (int)TokenNumber;

  00914	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0091a	e8 00 00 00 00	 call	 __ftol2_sse
  0091f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00922	89 81 40 d1 0f
	00		 mov	 DWORD PTR [ecx+1036608], eax

; 252  : 
; 253  : 					Token = GetToken();

  00928	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0092d	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv387[ebp], eax
  00933	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv387[ebp]
  00939	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 254  : 					this->m_iMVPScoreTable[5] = (int)TokenNumber;

  0093c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00942	e8 00 00 00 00	 call	 __ftol2_sse
  00947	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0094a	89 81 44 d1 0f
	00		 mov	 DWORD PTR [ecx+1036612], eax

; 255  : 
; 256  : 					Token = GetToken();

  00950	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00955	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv388[ebp], eax
  0095b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv388[ebp]
  00961	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 257  : 					this->m_iMVPScoreTable[6] = (int)TokenNumber;

  00964	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0096a	e8 00 00 00 00	 call	 __ftol2_sse
  0096f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00972	89 81 48 d1 0f
	00		 mov	 DWORD PTR [ecx+1036616], eax
$LN6@LoadData:

; 258  : 				}
; 259  : 
; 260  : 				if ( iType == 6 )

  00978	83 7d e4 06	 cmp	 DWORD PTR _iType$229563[ebp], 6
  0097c	0f 85 e3 00 00
	00		 jne	 $LN4@LoadData

; 261  : 				{
; 262  : 					Token = GetToken();

  00982	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00987	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv389[ebp], eax
  0098d	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv389[ebp]
  00993	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 263  : 
; 264  : 					if ( !strcmp("end", TokenString))

  00996	68 00 00 00 00	 push	 OFFSET _TokenString
  0099b	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  009a0	e8 00 00 00 00	 call	 _strcmp
  009a5	83 c4 08	 add	 esp, 8
  009a8	85 c0		 test	 eax, eax
  009aa	75 05		 jne	 SHORT $LN3@LoadData

; 265  : 						break;

  009ac	e9 a6 01 00 00	 jmp	 $LN21@LoadData
$LN3@LoadData:

; 266  : 
; 267  : 					this->m_iMVPRankScoreTable[0] = (int)TokenNumber;

  009b1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  009b7	e8 00 00 00 00	 call	 __ftol2_sse
  009bc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009bf	89 81 4c d1 0f
	00		 mov	 DWORD PTR [ecx+1036620], eax

; 268  : 
; 269  : 					Token = GetToken();

  009c5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  009ca	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv390[ebp], eax
  009d0	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv390[ebp]
  009d6	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 270  : 					this->m_iMVPRankScoreTable[1] = (int)TokenNumber;

  009d9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  009df	e8 00 00 00 00	 call	 __ftol2_sse
  009e4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009e7	89 81 50 d1 0f
	00		 mov	 DWORD PTR [ecx+1036624], eax

; 271  : 
; 272  : 					Token = GetToken();

  009ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  009f2	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv391[ebp], eax
  009f8	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv391[ebp]
  009fe	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 273  : 					this->m_iMVPRankScoreTable[2] = (int)TokenNumber;

  00a01	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a07	e8 00 00 00 00	 call	 __ftol2_sse
  00a0c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a0f	89 81 54 d1 0f
	00		 mov	 DWORD PTR [ecx+1036628], eax

; 274  : 
; 275  : 					Token = GetToken();

  00a15	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a1a	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv392[ebp], eax
  00a20	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv392[ebp]
  00a26	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 276  : 					this->m_iMVPRankScoreTable[3] = (int)TokenNumber;

  00a29	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a2f	e8 00 00 00 00	 call	 __ftol2_sse
  00a34	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a37	89 81 58 d1 0f
	00		 mov	 DWORD PTR [ecx+1036632], eax

; 277  : 
; 278  : 					Token = GetToken();

  00a3d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a42	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv393[ebp], eax
  00a48	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv393[ebp]
  00a4e	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 279  : 					this->m_iMVPRankScoreTable[4] = (int)TokenNumber;

  00a51	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a57	e8 00 00 00 00	 call	 __ftol2_sse
  00a5c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a5f	89 81 5c d1 0f
	00		 mov	 DWORD PTR [ecx+1036636], eax
$LN4@LoadData:

; 280  : 				}
; 281  : 
; 282  : 				if ( iType == 7 )

  00a65	83 7d e4 07	 cmp	 DWORD PTR _iType$229563[ebp], 7
  00a69	0f 85 e3 00 00
	00		 jne	 $LN2@LoadData

; 283  : 				{
; 284  : 					Token = GetToken();

  00a6f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00a74	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv394[ebp], eax
  00a7a	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv394[ebp]
  00a80	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 285  : 
; 286  : 					if ( !strcmp("end", TokenString))

  00a83	68 00 00 00 00	 push	 OFFSET _TokenString
  00a88	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00a8d	e8 00 00 00 00	 call	 _strcmp
  00a92	83 c4 08	 add	 esp, 8
  00a95	85 c0		 test	 eax, eax
  00a97	75 05		 jne	 SHORT $LN1@LoadData

; 287  : 						break;

  00a99	e9 b9 00 00 00	 jmp	 $LN21@LoadData
$LN1@LoadData:

; 288  : 
; 289  : 					this->m_iMVPRankExpTable[0] = (int)TokenNumber;

  00a9e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00aa4	e8 00 00 00 00	 call	 __ftol2_sse
  00aa9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00aac	89 81 60 d1 0f
	00		 mov	 DWORD PTR [ecx+1036640], eax

; 290  : 
; 291  : 					Token = GetToken();

  00ab2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00ab7	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv395[ebp], eax
  00abd	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv395[ebp]
  00ac3	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 292  : 					this->m_iMVPRankExpTable[1] = (int)TokenNumber;

  00ac6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00acc	e8 00 00 00 00	 call	 __ftol2_sse
  00ad1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad4	89 81 64 d1 0f
	00		 mov	 DWORD PTR [ecx+1036644], eax

; 293  : 
; 294  : 					Token = GetToken();

  00ada	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00adf	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv396[ebp], eax
  00ae5	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv396[ebp]
  00aeb	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 295  : 					this->m_iMVPRankExpTable[2] = (int)TokenNumber;

  00aee	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00af4	e8 00 00 00 00	 call	 __ftol2_sse
  00af9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00afc	89 81 68 d1 0f
	00		 mov	 DWORD PTR [ecx+1036648], eax

; 296  : 
; 297  : 					Token = GetToken();

  00b02	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00b07	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv397[ebp], eax
  00b0d	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv397[ebp]
  00b13	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 298  : 					this->m_iMVPRankExpTable[3] = (int)TokenNumber;

  00b16	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00b1c	e8 00 00 00 00	 call	 __ftol2_sse
  00b21	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b24	89 81 6c d1 0f
	00		 mov	 DWORD PTR [ecx+1036652], eax

; 299  : 
; 300  : 					Token = GetToken();

  00b2a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00b2f	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv398[ebp], eax
  00b35	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv398[ebp]
  00b3b	89 45 e8	 mov	 DWORD PTR _Token$229559[ebp], eax

; 301  : 					this->m_iMVPRankExpTable[4] = (int)TokenNumber;

  00b3e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00b44	e8 00 00 00 00	 call	 __ftol2_sse
  00b49	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b4c	89 81 70 d1 0f
	00		 mov	 DWORD PTR [ecx+1036656], eax
$LN2@LoadData:

; 302  : 				}
; 303  : 			}

  00b52	e9 5b f7 ff ff	 jmp	 $LN22@LoadData
$LN21@LoadData:

; 304  : 		}

  00b57	e9 1c f7 ff ff	 jmp	 $LN25@LoadData
$LN24@LoadData:

; 305  : 
; 306  : 		fclose(SMDFile);

  00b5c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b61	50		 push	 eax
  00b62	e8 00 00 00 00	 call	 _fclose
  00b67	83 c4 04	 add	 esp, 4

; 307  : 		LogAddC(2, "[Crywolf Main Job] - %s file is Loaded", lpszFileName);

  00b6a	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00b6d	50		 push	 eax
  00b6e	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@
  00b73	6a 02		 push	 2
  00b75	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00b7b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 308  : 		this->m_bFileDataLoad = TRUE;

  00b7e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00b81	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1

; 309  : 	}

  00b88	eb 1e		 jmp	 SHORT $LN32@LoadData
__catch$?LoadData@CCrywolf@@QAEHPAD@Z$0:

; 310  : 	catch(...)
; 311  : 	{
; 312  : 		MsgBox("[Crywolf Main Job] - Loading Exception Error (%s) File. ", lpszFileName);

  00b8a	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  00b8d	50		 push	 eax
  00b8e	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@
  00b93	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00b98	83 c4 08	 add	 esp, 8

; 313  : 	}

  00b9b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00ba2	b8 00 00 00 00	 mov	 eax, $LN35@LoadData
  00ba7	c3		 ret	 0
$LN32@LoadData:
  00ba8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN35@LoadData:

; 314  : 
; 315  : 	return this->m_bFileDataLoad;

  00baf	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00bb2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$LN30@LoadData:

; 316  : }

  00bb5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00bb8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00bbf	59		 pop	 ecx
  00bc0	5f		 pop	 edi
  00bc1	5e		 pop	 esi
  00bc2	5b		 pop	 ebx
  00bc3	8b e5		 mov	 esp, ebp
  00bc5	5d		 pop	 ebp
  00bc6	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?LoadData@CCrywolf@@QAEHPAD@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 8a 5c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-164]
  00041	33 c8		 xor	 ecx, eax
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@CCrywolf@@QAEHPAD@Z
  0004d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@CCrywolf@@QAEHPAD@Z ENDP			; CCrywolf::LoadData
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00bd0	55		 push	 ebp
  00bd1	8b ec		 mov	 ebp, esp
  00bd3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00bd9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00bde	33 c5		 xor	 eax, ebp
  00be0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00be3	53		 push	 ebx
  00be4	56		 push	 esi
  00be5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00be6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00bed	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00bf2	50		 push	 eax
  00bf3	e8 00 00 00 00	 call	 _fgetc
  00bf8	83 c4 04	 add	 esp, 4
  00bfb	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00bfe	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c02	83 f9 ff	 cmp	 ecx, -1
  00c05	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00c07	b8 02 00 00 00	 mov	 eax, 2
  00c0c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00c11	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00c13	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c17	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00c1a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  00c1c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c21	50		 push	 eax
  00c22	e8 00 00 00 00	 call	 _fgetc
  00c27	83 c4 04	 add	 esp, 4
  00c2a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00c2d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00c31	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00c34	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00c36	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c3a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00c3d	74 1c		 je	 SHORT $LN23@GetToken
  00c3f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c43	83 f8 ff	 cmp	 eax, -1
  00c46	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00c48	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00c4d	50		 push	 eax
  00c4e	e8 00 00 00 00	 call	 _fgetc
  00c53	83 c4 04	 add	 esp, 4
  00c56	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00c59	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  00c5b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c5f	83 f8 ff	 cmp	 eax, -1
  00c62	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00c64	b8 02 00 00 00	 mov	 eax, 2
  00c69	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  00c6e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c72	50		 push	 eax
  00c73	e8 00 00 00 00	 call	 _isspace
  00c78	83 c4 04	 add	 esp, 4
  00c7b	85 c0		 test	 eax, eax
  00c7d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00c83	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00c87	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00c8d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00c93	83 e9 22	 sub	 ecx, 34			; 00000022H
  00c96	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  00c9c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00ca3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00ca9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  00caf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00cb6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  00cbd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00cc7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ccc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00cd1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00cd6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00ce0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ce5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  00cea	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  00cef	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00cf9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00cfe	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00d03	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00d08	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00d12	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00d17	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  00d1c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00d21	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  00d2b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00d30	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00d35	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00d3a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00d3f	50		 push	 eax
  00d40	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00d44	51		 push	 ecx
  00d45	e8 00 00 00 00	 call	 _ungetc
  00d4a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  00d4d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00d50	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00d53	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00d58	50		 push	 eax
  00d59	e8 00 00 00 00	 call	 _getc
  00d5e	83 c4 04	 add	 esp, 4
  00d61	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00d64	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00d68	83 f9 ff	 cmp	 ecx, -1
  00d6b	74 36		 je	 SHORT $LN12@GetToken
  00d6d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00d71	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00d74	74 1a		 je	 SHORT $LN11@GetToken
  00d76	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00d7a	50		 push	 eax
  00d7b	e8 00 00 00 00	 call	 _isdigit
  00d80	83 c4 04	 add	 esp, 4
  00d83	85 c0		 test	 eax, eax
  00d85	75 09		 jne	 SHORT $LN11@GetToken
  00d87	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00d8b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00d8e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00d90	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00d93	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00d96	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00d98	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00d9b	83 c0 01	 add	 eax, 1
  00d9e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00da1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00da3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00da6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00da9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00dac	50		 push	 eax
  00dad	e8 00 00 00 00	 call	 _atof
  00db2	83 c4 04	 add	 esp, 4
  00db5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  00dbb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00dc5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00dca	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  00dcf	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00dd4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00ddb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00de0	50		 push	 eax
  00de1	e8 00 00 00 00	 call	 _getc
  00de6	83 c4 04	 add	 esp, 4
  00de9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00dec	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00df0	83 f9 ff	 cmp	 ecx, -1
  00df3	74 1c		 je	 SHORT $LN8@GetToken
  00df5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00df9	83 f8 22	 cmp	 eax, 34			; 00000022H
  00dfc	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  00dfe	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00e01	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00e04	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00e06	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00e09	83 c0 01	 add	 eax, 1
  00e0c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  00e0f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00e11	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00e15	83 f8 22	 cmp	 eax, 34			; 00000022H
  00e18	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00e1a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00e1f	50		 push	 eax
  00e20	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00e24	51		 push	 ecx
  00e25	e8 00 00 00 00	 call	 _ungetc
  00e2a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  00e2d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00e30	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00e33	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  00e3d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00e42	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00e47	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  00e4c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00e50	50		 push	 eax
  00e51	e8 00 00 00 00	 call	 _isalpha
  00e56	83 c4 04	 add	 esp, 4
  00e59	85 c0		 test	 eax, eax
  00e5b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00e61	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00e68	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00e6b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00e6e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00e70	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00e73	83 c0 01	 add	 eax, 1
  00e76	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00e79	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00e7e	50		 push	 eax
  00e7f	e8 00 00 00 00	 call	 _getc
  00e84	83 c4 04	 add	 esp, 4
  00e87	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00e8a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00e8e	83 f9 ff	 cmp	 ecx, -1
  00e91	74 36		 je	 SHORT $LN3@GetToken
  00e93	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00e97	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00e9a	74 1a		 je	 SHORT $LN2@GetToken
  00e9c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ea0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00ea3	74 11		 je	 SHORT $LN2@GetToken
  00ea5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00ea9	50		 push	 eax
  00eaa	e8 00 00 00 00	 call	 _isalnum
  00eaf	83 c4 04	 add	 esp, 4
  00eb2	85 c0		 test	 eax, eax
  00eb4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00eb6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00eb9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00ebc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  00ebe	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00ec1	83 c0 01	 add	 eax, 1
  00ec4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00ec7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00ec9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00ece	50		 push	 eax
  00ecf	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00ed3	51		 push	 ecx
  00ed4	e8 00 00 00 00	 call	 _ungetc
  00ed9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  00edc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00edf	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00ee2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  00eec	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00ef1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00ef3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00ef5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  00eff	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00f04	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00f06	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00f08	5f		 pop	 edi
  00f09	5e		 pop	 esi
  00f0a	5b		 pop	 ebx
  00f0b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f0e	33 cd		 xor	 ecx, ebp
  00f10	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f15	8b e5		 mov	 esp, ebp
  00f17	5d		 pop	 ebp
  00f18	c3		 ret	 0
  00f19	8d 49 00	 npad	 3
$LN35@GetToken:
  00f1c	00 00 00 00	 DD	 $LN10@GetToken
  00f20	00 00 00 00	 DD	 $LN19@GetToken
  00f24	00 00 00 00	 DD	 $LN17@GetToken
  00f28	00 00 00 00	 DD	 $LN14@GetToken
  00f2c	00 00 00 00	 DD	 $LN18@GetToken
  00f30	00 00 00 00	 DD	 $LN16@GetToken
  00f34	00 00 00 00	 DD	 $LN15@GetToken
  00f38	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00f3c	00		 DB	 0
  00f3d	01		 DB	 1
  00f3e	07		 DB	 7
  00f3f	07		 DB	 7
  00f40	07		 DB	 7
  00f41	07		 DB	 7
  00f42	07		 DB	 7
  00f43	07		 DB	 7
  00f44	07		 DB	 7
  00f45	07		 DB	 7
  00f46	02		 DB	 2
  00f47	03		 DB	 3
  00f48	03		 DB	 3
  00f49	07		 DB	 7
  00f4a	03		 DB	 3
  00f4b	03		 DB	 3
  00f4c	03		 DB	 3
  00f4d	03		 DB	 3
  00f4e	03		 DB	 3
  00f4f	03		 DB	 3
  00f50	03		 DB	 3
  00f51	03		 DB	 3
  00f52	03		 DB	 3
  00f53	03		 DB	 3
  00f54	07		 DB	 7
  00f55	04		 DB	 4
  00f56	07		 DB	 7
  00f57	07		 DB	 7
  00f58	07		 DB	 7
  00f59	07		 DB	 7
  00f5a	07		 DB	 7
  00f5b	07		 DB	 7
  00f5c	07		 DB	 7
  00f5d	07		 DB	 7
  00f5e	07		 DB	 7
  00f5f	07		 DB	 7
  00f60	07		 DB	 7
  00f61	07		 DB	 7
  00f62	07		 DB	 7
  00f63	07		 DB	 7
  00f64	07		 DB	 7
  00f65	07		 DB	 7
  00f66	07		 DB	 7
  00f67	07		 DB	 7
  00f68	07		 DB	 7
  00f69	07		 DB	 7
  00f6a	07		 DB	 7
  00f6b	07		 DB	 7
  00f6c	07		 DB	 7
  00f6d	07		 DB	 7
  00f6e	07		 DB	 7
  00f6f	07		 DB	 7
  00f70	07		 DB	 7
  00f71	07		 DB	 7
  00f72	07		 DB	 7
  00f73	07		 DB	 7
  00f74	07		 DB	 7
  00f75	07		 DB	 7
  00f76	07		 DB	 7
  00f77	07		 DB	 7
  00f78	07		 DB	 7
  00f79	07		 DB	 7
  00f7a	07		 DB	 7
  00f7b	07		 DB	 7
  00f7c	07		 DB	 7
  00f7d	07		 DB	 7
  00f7e	07		 DB	 7
  00f7f	07		 DB	 7
  00f80	07		 DB	 7
  00f81	07		 DB	 7
  00f82	07		 DB	 7
  00f83	07		 DB	 7
  00f84	07		 DB	 7
  00f85	07		 DB	 7
  00f86	07		 DB	 7
  00f87	07		 DB	 7
  00f88	07		 DB	 7
  00f89	07		 DB	 7
  00f8a	07		 DB	 7
  00f8b	07		 DB	 7
  00f8c	07		 DB	 7
  00f8d	07		 DB	 7
  00f8e	07		 DB	 7
  00f8f	07		 DB	 7
  00f90	07		 DB	 7
  00f91	07		 DB	 7
  00f92	07		 DB	 7
  00f93	07		 DB	 7
  00f94	07		 DB	 7
  00f95	05		 DB	 5
  00f96	07		 DB	 7
  00f97	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?SetState@CCrywolf@@QAEXH@Z			; CCrywolf::SetState
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
_TEXT	SEGMENT
_k$229674 = -16						; size = 4
_j$229670 = -12						; size = 4
_i$229666 = -8						; size = 4
_this$ = -4						; size = 4
?DelAllData@CCrywolf@@QAEXXZ PROC			; CCrywolf::DelAllData
; _this$ = ecx

; 319  : {

  00fa0	55		 push	 ebp
  00fa1	8b ec		 mov	 ebp, esp
  00fa3	83 ec 50	 sub	 esp, 80			; 00000050H
  00fa6	53		 push	 ebx
  00fa7	56		 push	 esi
  00fa8	57		 push	 edi
  00fa9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 320  : 	for ( int i=0;i<MAX_CRYWOLF_STATE;i++)

  00fac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$229666[ebp], 0
  00fb3	eb 09		 jmp	 SHORT $LN9@DelAllData
$LN8@DelAllData:
  00fb5	8b 45 f8	 mov	 eax, DWORD PTR _i$229666[ebp]
  00fb8	83 c0 01	 add	 eax, 1
  00fbb	89 45 f8	 mov	 DWORD PTR _i$229666[ebp], eax
$LN9@DelAllData:
  00fbe	83 7d f8 07	 cmp	 DWORD PTR _i$229666[ebp], 7
  00fc2	7d 17		 jge	 SHORT $LN7@DelAllData

; 321  : 	{
; 322  : 		this->m_StateTimeInfo[i].Reset();

  00fc4	8b 45 f8	 mov	 eax, DWORD PTR _i$229666[ebp]
  00fc7	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00fca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fcd	8d 8c 01 88 cf
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1036168]
  00fd4	e8 00 00 00 00	 call	 ?Reset@CCrywolfStateTimeInfo@@QAEXXZ ; CCrywolfStateTimeInfo::Reset

; 323  : 	}

  00fd9	eb da		 jmp	 SHORT $LN8@DelAllData
$LN7@DelAllData:

; 324  : 
; 325  : 	for ( int j=0;j<MAX_CRYWOLF_STATE_TIME;j++)

  00fdb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$229670[ebp], 0
  00fe2	eb 09		 jmp	 SHORT $LN6@DelAllData
$LN5@DelAllData:
  00fe4	8b 45 f4	 mov	 eax, DWORD PTR _j$229670[ebp]
  00fe7	83 c0 01	 add	 eax, 1
  00fea	89 45 f4	 mov	 DWORD PTR _j$229670[ebp], eax
$LN6@DelAllData:
  00fed	83 7d f4 14	 cmp	 DWORD PTR _j$229670[ebp], 20 ; 00000014H
  00ff1	7d 17		 jge	 SHORT $LN4@DelAllData

; 326  : 	{
; 327  : 		this->m_StartTimeInfo[j].Reset();

  00ff3	8b 45 f4	 mov	 eax, DWORD PTR _j$229670[ebp]
  00ff6	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00ff9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ffc	8d 8c 01 14 cc
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1035284]
  01003	e8 00 00 00 00	 call	 ?Reset@CCrywolfStateTimeInfo@@QAEXXZ ; CCrywolfStateTimeInfo::Reset

; 328  : 	}

  01008	eb da		 jmp	 SHORT $LN5@DelAllData
$LN4@DelAllData:

; 329  : 
; 330  : 	this->m_StartTimeInfoCount = 0;

  0100a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0100d	c7 80 84 cf 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036164], 0

; 331  : 
; 332  : 	for ( int k=0;k<MAX_CRYWOLF_MONSTER_GROUP;k++)

  01017	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _k$229674[ebp], 0
  0101e	eb 09		 jmp	 SHORT $LN3@DelAllData
$LN2@DelAllData:
  01020	8b 45 f0	 mov	 eax, DWORD PTR _k$229674[ebp]
  01023	83 c0 01	 add	 eax, 1
  01026	89 45 f0	 mov	 DWORD PTR _k$229674[ebp], eax
$LN3@DelAllData:
  01029	83 7d f0 14	 cmp	 DWORD PTR _k$229674[ebp], 20 ; 00000014H
  0102d	7d 13		 jge	 SHORT $LN1@DelAllData

; 333  : 	{
; 334  : 		this->m_iMonsterGroupNumberArray[k] = -1;

  0102f	8b 45 f0	 mov	 eax, DWORD PTR _k$229674[ebp]
  01032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01035	c7 84 81 cc d0
	0f 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax*4+1036492], -1

; 335  : 	}

  01040	eb de		 jmp	 SHORT $LN2@DelAllData
$LN1@DelAllData:

; 336  : 
; 337  : 	this->m_iMonsterGroupNumberCount = 0;

  01042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01045	c7 80 1c d1 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036572], 0

; 338  : 	this->m_iBossGroupNumber = 0;

  0104f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01052	c7 80 28 d1 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036584], 0

; 339  : 	this->m_iBossTurnUpTime = 0;

  0105c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0105f	c7 80 2c d1 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036588], 0

; 340  : 	this->m_iMonsterGroupChangeAITime  = 0;

  01069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0106c	c7 80 20 d1 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036576], 0

; 341  : 	this->m_bDBDataLoadOK = FALSE;

  01076	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01079	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 342  : 	this->m_bDBDataLoading = FALSE;

  01080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01083	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 343  : 
; 344  : 	memset(this->m_iMVPScoreTable, 0, 7);

  0108a	6a 07		 push	 7
  0108c	6a 00		 push	 0
  0108e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01091	05 30 d1 0f 00	 add	 eax, 1036592		; 000fd130H
  01096	50		 push	 eax
  01097	e8 00 00 00 00	 call	 _memset
  0109c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 345  : 	memset(this->m_iMVPRankScoreTable, 0, 5);

  0109f	6a 05		 push	 5
  010a1	6a 00		 push	 0
  010a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010a6	05 4c d1 0f 00	 add	 eax, 1036620		; 000fd14cH
  010ab	50		 push	 eax
  010ac	e8 00 00 00 00	 call	 _memset
  010b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : 	memset(this->m_iMVPRankExpTable, 0, 5);

  010b4	6a 05		 push	 5
  010b6	6a 00		 push	 0
  010b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010bb	05 60 d1 0f 00	 add	 eax, 1036640		; 000fd160H
  010c0	50		 push	 eax
  010c1	e8 00 00 00 00	 call	 _memset
  010c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 347  : 
; 348  : 	this->SetState(CRYWOLF_STATE_NONE);

  010c9	6a 00		 push	 0
  010cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010ce	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState

; 349  : }

  010d3	5f		 pop	 edi
  010d4	5e		 pop	 esi
  010d5	5b		 pop	 ebx
  010d6	8b e5		 mov	 esp, ebp
  010d8	5d		 pop	 ebp
  010d9	c3		 ret	 0
?DelAllData@CCrywolf@@QAEXXZ ENDP			; CCrywolf::DelAllData
_TEXT	ENDS
PUBLIC	?Init@CCrywolf@@QAEXXZ				; CCrywolf::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CCrywolf@@QAEXXZ PROC				; CCrywolf::Init
; _this$ = ecx

; 352  : {

  010e0	55		 push	 ebp
  010e1	8b ec		 mov	 ebp, esp
  010e3	83 ec 44	 sub	 esp, 68			; 00000044H
  010e6	53		 push	 ebx
  010e7	56		 push	 esi
  010e8	57		 push	 edi
  010e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 353  : 	return;
; 354  : }

  010ec	5f		 pop	 edi
  010ed	5e		 pop	 esi
  010ee	5b		 pop	 ebx
  010ef	8b e5		 mov	 esp, ebp
  010f1	5d		 pop	 ebp
  010f2	c3		 ret	 0
?Init@CCrywolf@@QAEXXZ ENDP				; CCrywolf::Init
_TEXT	ENDS
PUBLIC	?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z	; CCrywolf::LoadCrywolfMapAttr
EXTRN	?LoadMapAttr@MapClass@@QAEXPADH@Z:PROC		; MapClass::LoadMapAttr
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpszFileName$ = 8					; size = 4
_iOccupationState$ = 12					; size = 4
?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z PROC		; CCrywolf::LoadCrywolfMapAttr
; _this$ = ecx

; 357  : {

  01100	55		 push	 ebp
  01101	8b ec		 mov	 ebp, esp
  01103	83 ec 44	 sub	 esp, 68			; 00000044H
  01106	53		 push	 ebx
  01107	56		 push	 esi
  01108	57		 push	 edi
  01109	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 358  : 	if ( !lpszFileName )

  0110c	83 7d 08 00	 cmp	 DWORD PTR _lpszFileName$[ebp], 0
  01110	75 02		 jne	 SHORT $LN3@LoadCrywol

; 359  : 		return;

  01112	eb 29		 jmp	 SHORT $LN4@LoadCrywol
$LN3@LoadCrywol:

; 360  : 
; 361  : 	if ( iOccupationState < 0 || iOccupationState >= 3 )

  01114	83 7d 0c 00	 cmp	 DWORD PTR _iOccupationState$[ebp], 0
  01118	7c 06		 jl	 SHORT $LN1@LoadCrywol
  0111a	83 7d 0c 03	 cmp	 DWORD PTR _iOccupationState$[ebp], 3
  0111e	7c 02		 jl	 SHORT $LN2@LoadCrywol
$LN1@LoadCrywol:

; 362  : 		return;

  01120	eb 1b		 jmp	 SHORT $LN4@LoadCrywol
$LN2@LoadCrywol:

; 363  : 
; 364  : 	this->m_CrywolfMapAttr[iOccupationState].LoadMapAttr(lpszFileName, MAP_INDEX_CRYWOLF_FIRSTZONE);

  01122	6a 22		 push	 34			; 00000022H
  01124	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  01127	50		 push	 eax
  01128	8b 4d 0c	 mov	 ecx, DWORD PTR _iOccupationState$[ebp]
  0112b	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  01131	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01134	8d 4c 0a 14	 lea	 ecx, DWORD PTR [edx+ecx+20]
  01138	e8 00 00 00 00	 call	 ?LoadMapAttr@MapClass@@QAEXPADH@Z ; MapClass::LoadMapAttr
$LN4@LoadCrywol:

; 365  : }

  0113d	5f		 pop	 edi
  0113e	5e		 pop	 esi
  0113f	5b		 pop	 ebx
  01140	8b e5		 mov	 esp, ebp
  01142	5d		 pop	 ebp
  01143	c2 08 00	 ret	 8
?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z ENDP		; CCrywolf::LoadCrywolfMapAttr
_TEXT	ENDS
PUBLIC	??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@ ; `string'
PUBLIC	?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfMapAttr
EXTRN	_memcpy:PROC
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
;	COMDAT ??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@
CONST	SEGMENT
??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@ DB '[ '
	DB	'Crywolf ] Fail - Chang Map Attribute (State:%d) ', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_CrywolfMap$ = -8					; size = 4
_this$ = -4						; size = 4
_iOccupationState$ = 8					; size = 4
?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetCrywolfMapAttr
; _this$ = ecx

; 369  : {

  01150	55		 push	 ebp
  01151	8b ec		 mov	 ebp, esp
  01153	83 ec 48	 sub	 esp, 72			; 00000048H
  01156	53		 push	 ebx
  01157	56		 push	 esi
  01158	57		 push	 edi
  01159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 	if ( iOccupationState < 0 || iOccupationState >= 3 )

  0115c	83 7d 08 00	 cmp	 DWORD PTR _iOccupationState$[ebp], 0
  01160	7c 06		 jl	 SHORT $LN2@SetCrywolf
  01162	83 7d 08 03	 cmp	 DWORD PTR _iOccupationState$[ebp], 3
  01166	7c 02		 jl	 SHORT $LN3@SetCrywolf
$LN2@SetCrywolf:

; 371  : 		return;

  01168	eb 57		 jmp	 SHORT $LN4@SetCrywolf
$LN3@SetCrywolf:

; 372  : 
; 373  : 	MapClass * CrywolfMap = &this->m_CrywolfMapAttr[iOccupationState];

  0116a	8b 45 08	 mov	 eax, DWORD PTR _iOccupationState$[ebp]
  0116d	69 c0 b8 3d 05
	00		 imul	 eax, 343480		; 00053db8H
  01173	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01176	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  0117a	89 55 f8	 mov	 DWORD PTR _CrywolfMap$[ebp], edx

; 374  : 
; 375  : 	if ( CHECK_CLASS(CrywolfMap->thisMapNumber, MAP_INDEX_CRYWOLF_FIRSTZONE) == FALSE )

  0117d	8b 45 f8	 mov	 eax, DWORD PTR _CrywolfMap$[ebp]
  01180	33 c9		 xor	 ecx, ecx
  01182	83 b8 b4 3d 05
	00 22		 cmp	 DWORD PTR [eax+343476], 34 ; 00000022H
  01189	0f 94 c1	 sete	 cl
  0118c	85 c9		 test	 ecx, ecx
  0118e	75 16		 jne	 SHORT $LN1@SetCrywolf

; 376  : 	{
; 377  : 		LogAddC(2, "[ Crywolf ] Fail - Chang Map Attribute (State:%d) ", iOccupationState);

  01190	8b 45 08	 mov	 eax, DWORD PTR _iOccupationState$[ebp]
  01193	50		 push	 eax
  01194	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@
  01199	6a 02		 push	 2
  0119b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  011a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 378  : 		return;

  011a4	eb 1b		 jmp	 SHORT $LN4@SetCrywolf
$LN1@SetCrywolf:

; 379  : 	}
; 380  : 
; 381  : 	memcpy(MapC[MAP_INDEX_CRYWOLF_FIRSTZONE].m_attrbuf, CrywolfMap->m_attrbuf, 256*256);

  011a6	68 00 00 01 00	 push	 65536			; 00010000H
  011ab	8b 45 f8	 mov	 eax, DWORD PTR _CrywolfMap$[ebp]
  011ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  011b1	51		 push	 ecx
  011b2	8b 15 80 32 b2
	00		 mov	 edx, DWORD PTR ?MapC@@3PAVMapClass@@A+11678336
  011b8	52		 push	 edx
  011b9	e8 00 00 00 00	 call	 _memcpy
  011be	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SetCrywolf:

; 382  : }

  011c1	5f		 pop	 edi
  011c2	5e		 pop	 esi
  011c3	5b		 pop	 ebx
  011c4	8b e5		 mov	 esp, ebp
  011c6	5d		 pop	 ebp
  011c7	c2 04 00	 ret	 4
?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetCrywolfMapAttr
_TEXT	ENDS
PUBLIC	?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfCommonNPC
EXTRN	?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpObj$229707 = -12					; size = 4
_i$229702 = -8						; size = 4
_this$ = -4						; size = 4
_iOccupationState$ = 8					; size = 4
?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetCrywolfCommonNPC
; _this$ = ecx

; 386  : {

  011d0	55		 push	 ebp
  011d1	8b ec		 mov	 ebp, esp
  011d3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  011d6	53		 push	 ebx
  011d7	56		 push	 esi
  011d8	57		 push	 edi
  011d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 387  : 	for ( int i=0;i<this->m_ObjCommonNPC.m_iObjCount ; i++)

  011dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$229702[ebp], 0
  011e3	eb 09		 jmp	 SHORT $LN8@SetCrywolf@2
$LN7@SetCrywolf@2:
  011e5	8b 45 f8	 mov	 eax, DWORD PTR _i$229702[ebp]
  011e8	83 c0 01	 add	 eax, 1
  011eb	89 45 f8	 mov	 DWORD PTR _i$229702[ebp], eax
$LN8@SetCrywolf@2:
  011ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011f1	8b 4d f8	 mov	 ecx, DWORD PTR _i$229702[ebp]
  011f4	3b 88 44 b9 0f
	00		 cmp	 ecx, DWORD PTR [eax+1030468]
  011fa	7d 77		 jge	 SHORT $LN9@SetCrywolf@2

; 388  : 	{
; 389  : 		if ( !gObjIsConnected(this->m_ObjCommonNPC.m_iObjIndex[i]) )

  011fc	8b 45 f8	 mov	 eax, DWORD PTR _i$229702[ebp]
  011ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01202	8b 94 81 48 b9
	0f 00		 mov	 edx, DWORD PTR [ecx+eax*4+1030472]
  01209	52		 push	 edx
  0120a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0120f	83 c4 04	 add	 esp, 4
  01212	85 c0		 test	 eax, eax
  01214	75 02		 jne	 SHORT $LN5@SetCrywolf@2

; 390  : 			break;

  01216	eb 5b		 jmp	 SHORT $LN9@SetCrywolf@2
$LN5@SetCrywolf@2:

; 391  : 
; 392  : 		LPOBJ lpObj = &gObj[this->m_ObjCommonNPC.m_iObjIndex[i]];

  01218	8b 45 f8	 mov	 eax, DWORD PTR _i$229702[ebp]
  0121b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0121e	8b 94 81 48 b9
	0f 00		 mov	 edx, DWORD PTR [ecx+eax*4+1030472]
  01225	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0122b	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01231	89 55 f4	 mov	 DWORD PTR _lpObj$229707[ebp], edx

; 393  : 
; 394  : 		if ( iOccupationState == 2 || iOccupationState == 1)

  01234	83 7d 08 02	 cmp	 DWORD PTR _iOccupationState$[ebp], 2
  01238	74 06		 je	 SHORT $LN3@SetCrywolf@2
  0123a	83 7d 08 01	 cmp	 DWORD PTR _iOccupationState$[ebp], 1
  0123e	75 1a		 jne	 SHORT $LN4@SetCrywolf@2
$LN3@SetCrywolf@2:

; 395  : 		{
; 396  : 			gObjApplyBuffEffectDuration(lpObj, AT_CW_NPC_TRANSPARENCY, 0, 0, 0, 0, -10);

  01240	6a f6		 push	 -10			; fffffff6H
  01242	6a 00		 push	 0
  01244	6a 00		 push	 0
  01246	6a 00		 push	 0
  01248	6a 00		 push	 0
  0124a	6a 1b		 push	 27			; 0000001bH
  0124c	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$229707[ebp]
  0124f	50		 push	 eax
  01250	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  01255	83 c4 1c	 add	 esp, 28			; 0000001cH
  01258	eb 14		 jmp	 SHORT $LN2@SetCrywolf@2
$LN4@SetCrywolf@2:

; 397  : 		}
; 398  : 		else if ( iOccupationState == 0 )

  0125a	83 7d 08 00	 cmp	 DWORD PTR _iOccupationState$[ebp], 0
  0125e	75 0e		 jne	 SHORT $LN2@SetCrywolf@2

; 399  : 		{
; 400  : 			gObjRemoveBuffEffect(lpObj, AT_CW_NPC_TRANSPARENCY);

  01260	6a 1b		 push	 27			; 0000001bH
  01262	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$229707[ebp]
  01265	50		 push	 eax
  01266	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  0126b	83 c4 08	 add	 esp, 8
$LN2@SetCrywolf@2:

; 401  : 		}
; 402  : 	}

  0126e	e9 72 ff ff ff	 jmp	 $LN7@SetCrywolf@2
$LN9@SetCrywolf@2:

; 403  : }

  01273	5f		 pop	 edi
  01274	5e		 pop	 esi
  01275	5b		 pop	 ebx
  01276	8b e5		 mov	 esp, ebp
  01278	5d		 pop	 ebp
  01279	c2 04 00	 ret	 4
?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetCrywolfCommonNPC
_TEXT	ENDS
PUBLIC	?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z ; CCrywolf::SetCrywolfAllCommonMonsterState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpObj$229722 = -12					; size = 4
_i$229717 = -8						; size = 4
_this$ = -4						; size = 4
_iMonsterState$ = 8					; size = 4
_iMode$ = 12						; size = 4
?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z PROC ; CCrywolf::SetCrywolfAllCommonMonsterState
; _this$ = ecx

; 406  : {

  01280	55		 push	 ebp
  01281	8b ec		 mov	 ebp, esp
  01283	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01286	53		 push	 ebx
  01287	56		 push	 esi
  01288	57		 push	 edi
  01289	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 407  : 	for ( int i=0;i<this->m_ObjCommonMonster.m_iObjCount ; i++)

  0128c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$229717[ebp], 0
  01293	eb 09		 jmp	 SHORT $LN7@SetCrywolf@3
$LN6@SetCrywolf@3:
  01295	8b 45 f8	 mov	 eax, DWORD PTR _i$229717[ebp]
  01298	83 c0 01	 add	 eax, 1
  0129b	89 45 f8	 mov	 DWORD PTR _i$229717[ebp], eax
$LN7@SetCrywolf@3:
  0129e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012a1	8b 4d f8	 mov	 ecx, DWORD PTR _i$229717[ebp]
  012a4	3b 88 ac c2 0f
	00		 cmp	 ecx, DWORD PTR [eax+1032876]
  012aa	7d 3a		 jge	 SHORT $LN8@SetCrywolf@3

; 408  : 	{
; 409  : 		if ( !gObjIsConnected(this->m_ObjCommonMonster.m_iObjIndex[i]) )

  012ac	8b 45 f8	 mov	 eax, DWORD PTR _i$229717[ebp]
  012af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012b2	8b 94 81 b0 c2
	0f 00		 mov	 edx, DWORD PTR [ecx+eax*4+1032880]
  012b9	52		 push	 edx
  012ba	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  012bf	83 c4 04	 add	 esp, 4
  012c2	85 c0		 test	 eax, eax
  012c4	75 02		 jne	 SHORT $LN4@SetCrywolf@3

; 410  : 			break;

  012c6	eb 1e		 jmp	 SHORT $LN8@SetCrywolf@3
$LN4@SetCrywolf@3:

; 411  : 
; 412  : 		LPOBJ lpObj = &gObj[this->m_ObjCommonMonster.m_iObjIndex[i]];

  012c8	8b 45 f8	 mov	 eax, DWORD PTR _i$229717[ebp]
  012cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012ce	8b 94 81 b0 c2
	0f 00		 mov	 edx, DWORD PTR [ecx+eax*4+1032880]
  012d5	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  012db	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  012e1	89 55 f4	 mov	 DWORD PTR _lpObj$229722[ebp], edx

; 413  : 
; 414  : 		if ( iMode == 0 )
; 415  : 		{
; 416  : 		}
; 417  : 		else if ( iMode == 1 )
; 418  : 		{
; 419  : 		}
; 420  : 	}

  012e4	eb af		 jmp	 SHORT $LN6@SetCrywolf@3
$LN8@SetCrywolf@3:

; 421  : }

  012e6	5f		 pop	 edi
  012e7	5e		 pop	 esi
  012e8	5b		 pop	 ebx
  012e9	8b e5		 mov	 esp, ebp
  012eb	5d		 pop	 ebp
  012ec	c2 08 00	 ret	 8
?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z ENDP ; CCrywolf::SetCrywolfAllCommonMonsterState
_TEXT	ENDS
PUBLIC	?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ	; CCrywolf::RemoveCrywolfCommonMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$229729 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ PROC	; CCrywolf::RemoveCrywolfCommonMonster
; _this$ = ecx

; 424  : {

  012f0	55		 push	 ebp
  012f1	8b ec		 mov	 ebp, esp
  012f3	83 ec 48	 sub	 esp, 72			; 00000048H
  012f6	53		 push	 ebx
  012f7	56		 push	 esi
  012f8	57		 push	 edi
  012f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 425  : 	for ( int i=0;i<this->m_ObjCommonMonster.m_iObjCount ; i++)

  012fc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$229729[ebp], 0
  01303	eb 09		 jmp	 SHORT $LN3@RemoveCryw
$LN2@RemoveCryw:
  01305	8b 45 f8	 mov	 eax, DWORD PTR _i$229729[ebp]
  01308	83 c0 01	 add	 eax, 1
  0130b	89 45 f8	 mov	 DWORD PTR _i$229729[ebp], eax
$LN3@RemoveCryw:
  0130e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01311	8b 4d f8	 mov	 ecx, DWORD PTR _i$229729[ebp]
  01314	3b 88 ac c2 0f
	00		 cmp	 ecx, DWORD PTR [eax+1032876]
  0131a	7d 18		 jge	 SHORT $LN1@RemoveCryw

; 426  : 	{
; 427  : 		gObjDel(this->m_ObjCommonMonster.m_iObjIndex[i]);

  0131c	8b 45 f8	 mov	 eax, DWORD PTR _i$229729[ebp]
  0131f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01322	8b 94 81 b0 c2
	0f 00		 mov	 edx, DWORD PTR [ecx+eax*4+1032880]
  01329	52		 push	 edx
  0132a	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0132f	83 c4 04	 add	 esp, 4

; 428  : 	}

  01332	eb d1		 jmp	 SHORT $LN2@RemoveCryw
$LN1@RemoveCryw:

; 429  : 
; 430  : 	this->m_ObjCommonMonster.Reset();

  01334	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01337	81 c1 ac c2 0f
	00		 add	 ecx, 1032876		; 000fc2acH
  0133d	e8 00 00 00 00	 call	 ?Reset@CCrywolfObjInfo@@QAEXXZ ; CCrywolfObjInfo::Reset

; 431  : }

  01342	5f		 pop	 edi
  01343	5e		 pop	 esi
  01344	5b		 pop	 ebx
  01345	8b e5		 mov	 esp, ebp
  01347	5d		 pop	 ebp
  01348	c3		 ret	 0
?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ ENDP	; CCrywolf::RemoveCrywolfCommonMonster
_TEXT	ENDS
PUBLIC	?AddObj@CCrywolfObjInfo@@QAEHH@Z		; CCrywolfObjInfo::AddObj
PUBLIC	?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ	; CCrywolf::CreateCrywolfCommonMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iIndex$229758 = -12					; size = 4
_n$229736 = -8						; size = 4
_this$ = -4						; size = 4
?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ PROC	; CCrywolf::CreateCrywolfCommonMonster
; _this$ = ecx

; 434  : {

  01350	55		 push	 ebp
  01351	8b ec		 mov	 ebp, esp
  01353	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01356	53		 push	 ebx
  01357	56		 push	 esi
  01358	57		 push	 edi
  01359	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	for ( int n=0;n<gMSetBase.m_Count;n++)

  0135c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$229736[ebp], 0
  01363	eb 09		 jmp	 SHORT $LN9@CreateCryw
$LN8@CreateCryw:
  01365	8b 45 f8	 mov	 eax, DWORD PTR _n$229736[ebp]
  01368	83 c0 01	 add	 eax, 1
  0136b	89 45 f8	 mov	 DWORD PTR _n$229736[ebp], eax
$LN9@CreateCryw:
  0136e	8b 45 f8	 mov	 eax, DWORD PTR _n$229736[ebp]
  01371	3b 05 84 2c 03
	00		 cmp	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  01377	0f 8d eb 00 00
	00		 jge	 $LN10@CreateCryw

; 436  : 	{
; 437  : 		if ( CHECK_CLASS(gMSetBase.m_Mp[n].m_MapNumber, MAP_INDEX_CRYWOLF_FIRSTZONE) )

  0137d	8b 45 f8	 mov	 eax, DWORD PTR _n$229736[ebp]
  01380	c1 e0 04	 shl	 eax, 4
  01383	0f b6 88 08 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+8]
  0138a	33 d2		 xor	 edx, edx
  0138c	83 f9 22	 cmp	 ecx, 34			; 00000022H
  0138f	0f 94 c2	 sete	 dl
  01392	85 d2		 test	 edx, edx
  01394	0f 84 c9 00 00
	00		 je	 $LN6@CreateCryw

; 438  : 		{
; 439  : 			if ( gMSetBase.m_Mp[n].m_Type >= 204 && gMSetBase.m_Mp[n].m_Type <= 257 )

  0139a	8b 45 f8	 mov	 eax, DWORD PTR _n$229736[ebp]
  0139d	c1 e0 04	 shl	 eax, 4
  013a0	0f b7 88 06 00
	00 00		 movzx	 ecx, WORD PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+6]
  013a7	81 f9 cc 00 00
	00		 cmp	 ecx, 204		; 000000ccH
  013ad	7c 17		 jl	 SHORT $LN5@CreateCryw
  013af	8b 45 f8	 mov	 eax, DWORD PTR _n$229736[ebp]
  013b2	c1 e0 04	 shl	 eax, 4
  013b5	0f b7 88 06 00
	00 00		 movzx	 ecx, WORD PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+6]
  013bc	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  013c2	7f 02		 jg	 SHORT $LN5@CreateCryw

; 440  : 				continue;

  013c4	eb 9f		 jmp	 SHORT $LN8@CreateCryw
$LN5@CreateCryw:

; 441  : 
; 442  : 			int iIndex = gObjAddMonster(gMSetBase.m_Mp[n].m_MapNumber);

  013c6	8b 45 f8	 mov	 eax, DWORD PTR _n$229736[ebp]
  013c9	c1 e0 04	 shl	 eax, 4
  013cc	0f b6 88 08 00
	00 00		 movzx	 ecx, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+8]
  013d3	51		 push	 ecx
  013d4	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  013d9	83 c4 04	 add	 esp, 4
  013dc	0f bf d0	 movsx	 edx, ax
  013df	89 55 f4	 mov	 DWORD PTR _iIndex$229758[ebp], edx

; 443  : 
; 444  : 			if ( iIndex >= 0 )

  013e2	83 7d f4 00	 cmp	 DWORD PTR _iIndex$229758[ebp], 0
  013e6	7c 7b		 jl	 SHORT $LN6@CreateCryw

; 445  : 			{
; 446  : 				if ( gObjSetPosMonster(iIndex, n) == FALSE )

  013e8	8b 45 f8	 mov	 eax, DWORD PTR _n$229736[ebp]
  013eb	50		 push	 eax
  013ec	8b 4d f4	 mov	 ecx, DWORD PTR _iIndex$229758[ebp]
  013ef	51		 push	 ecx
  013f0	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster
  013f5	83 c4 08	 add	 esp, 8
  013f8	85 c0		 test	 eax, eax
  013fa	75 11		 jne	 SHORT $LN3@CreateCryw

; 447  : 				{
; 448  : 					gObjDel(iIndex);

  013fc	8b 45 f4	 mov	 eax, DWORD PTR _iIndex$229758[ebp]
  013ff	50		 push	 eax
  01400	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  01405	83 c4 04	 add	 esp, 4

; 449  : 					continue;

  01408	e9 58 ff ff ff	 jmp	 $LN8@CreateCryw
$LN3@CreateCryw:

; 450  : 				}
; 451  : 				
; 452  : 				if ( gObjSetMonster(iIndex, gMSetBase.m_Mp[n].m_Type) == FALSE )

  0140d	8b 45 f8	 mov	 eax, DWORD PTR _n$229736[ebp]
  01410	c1 e0 04	 shl	 eax, 4
  01413	0f b7 88 06 00
	00 00		 movzx	 ecx, WORD PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+6]
  0141a	51		 push	 ecx
  0141b	8b 55 f4	 mov	 edx, DWORD PTR _iIndex$229758[ebp]
  0141e	52		 push	 edx
  0141f	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  01424	83 c4 08	 add	 esp, 8
  01427	85 c0		 test	 eax, eax
  01429	75 11		 jne	 SHORT $LN2@CreateCryw

; 453  : 				{
; 454  : 					gObjDel(iIndex);

  0142b	8b 45 f4	 mov	 eax, DWORD PTR _iIndex$229758[ebp]
  0142e	50		 push	 eax
  0142f	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  01434	83 c4 04	 add	 esp, 4

; 455  : 					continue;

  01437	e9 29 ff ff ff	 jmp	 $LN8@CreateCryw
$LN2@CreateCryw:

; 456  : 				}
; 457  : 
; 458  : 				if ( gObj[iIndex].Type == OBJ_MONSTER )

  0143c	8b 45 f4	 mov	 eax, DWORD PTR _iIndex$229758[ebp]
  0143f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01445	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0144b	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  01450	83 fa 02	 cmp	 edx, 2
  01453	75 0e		 jne	 SHORT $LN6@CreateCryw

; 459  : 				{
; 460  : 					g_Crywolf.m_ObjCommonMonster.AddObj(iIndex);

  01455	8b 45 f4	 mov	 eax, DWORD PTR _iIndex$229758[ebp]
  01458	50		 push	 eax
  01459	b9 ac c2 0f 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A+1032876
  0145e	e8 00 00 00 00	 call	 ?AddObj@CCrywolfObjInfo@@QAEHH@Z ; CCrywolfObjInfo::AddObj
$LN6@CreateCryw:

; 461  : 				}
; 462  : 			}
; 463  : 		}
; 464  : 	}

  01463	e9 fd fe ff ff	 jmp	 $LN8@CreateCryw
$LN10@CreateCryw:

; 465  : }

  01468	5f		 pop	 edi
  01469	5e		 pop	 esi
  0146a	5b		 pop	 ebx
  0146b	8b e5		 mov	 esp, ebp
  0146d	5d		 pop	 ebp
  0146e	c3		 ret	 0
?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ ENDP	; CCrywolf::CreateCrywolfCommonMonster
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolfobjinfo.h
_TEXT	ENDS
;	COMDAT ?AddObj@CCrywolfObjInfo@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?AddObj@CCrywolfObjInfo@@QAEHH@Z PROC			; CCrywolfObjInfo::AddObj, COMDAT
; _this$ = ecx

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 		if ( this->m_iObjCount >= MAX_CRYWOLF_OBJ_INFO )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	81 38 2c 01 00
	00		 cmp	 DWORD PTR [eax], 300	; 0000012cH
  00015	7c 04		 jl	 SHORT $LN1@AddObj

; 38   : 		{
; 39   : 			return FALSE;

  00017	33 c0		 xor	 eax, eax
  00019	eb 21		 jmp	 SHORT $LN2@AddObj
$LN1@AddObj:

; 40   : 		}
; 41   : 
; 42   : 		this->m_iObjIndex[this->m_iObjCount] = iIndex;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00026	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax

; 43   : 		this->m_iObjCount++;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	83 c1 01	 add	 ecx, 1
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	89 0a		 mov	 DWORD PTR [edx], ecx

; 44   : 		
; 45   : 		return TRUE;

  00037	b8 01 00 00 00	 mov	 eax, 1
$LN2@AddObj:

; 46   : 	}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?AddObj@CCrywolfObjInfo@@QAEHH@Z ENDP			; CCrywolfObjInfo::AddObj
_TEXT	ENDS
PUBLIC	?ChangeAI@CCrywolf@@QAEXH@Z			; CCrywolf::ChangeAI
EXTRN	?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z:PROC	; TMonsterAIGroup::ChangeAIOrder
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
_TEXT	SEGMENT
_n$229767 = -8						; size = 4
_this$ = -4						; size = 4
_iAIOrder$ = 8						; size = 4
?ChangeAI@CCrywolf@@QAEXH@Z PROC			; CCrywolf::ChangeAI
; _this$ = ecx

; 468  : {

  01470	55		 push	 ebp
  01471	8b ec		 mov	 ebp, esp
  01473	83 ec 48	 sub	 esp, 72			; 00000048H
  01476	53		 push	 ebx
  01477	56		 push	 esi
  01478	57		 push	 edi
  01479	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 469  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  0147c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$229767[ebp], 0
  01483	eb 09		 jmp	 SHORT $LN3@ChangeAI
$LN2@ChangeAI:
  01485	8b 45 f8	 mov	 eax, DWORD PTR _n$229767[ebp]
  01488	83 c0 01	 add	 eax, 1
  0148b	89 45 f8	 mov	 DWORD PTR _n$229767[ebp], eax
$LN3@ChangeAI:
  0148e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01491	8b 4d f8	 mov	 ecx, DWORD PTR _n$229767[ebp]
  01494	3b 88 1c d1 0f
	00		 cmp	 ecx, DWORD PTR [eax+1036572]
  0149a	7d 1c		 jge	 SHORT $LN4@ChangeAI

; 470  : 	{
; 471  : 		TMonsterAIGroup::ChangeAIOrder(this->m_iMonsterGroupNumberArray[n], iAIOrder);

  0149c	8b 45 08	 mov	 eax, DWORD PTR _iAIOrder$[ebp]
  0149f	50		 push	 eax
  014a0	8b 4d f8	 mov	 ecx, DWORD PTR _n$229767[ebp]
  014a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  014a6	8b 84 8a cc d0
	0f 00		 mov	 eax, DWORD PTR [edx+ecx*4+1036492]
  014ad	50		 push	 eax
  014ae	e8 00 00 00 00	 call	 ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ; TMonsterAIGroup::ChangeAIOrder
  014b3	83 c4 08	 add	 esp, 8

; 472  : 	}

  014b6	eb cd		 jmp	 SHORT $LN2@ChangeAI
$LN4@ChangeAI:

; 473  : }

  014b8	5f		 pop	 edi
  014b9	5e		 pop	 esi
  014ba	5b		 pop	 ebx
  014bb	8b e5		 mov	 esp, ebp
  014bd	5d		 pop	 ebp
  014be	c2 04 00	 ret	 4
?ChangeAI@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::ChangeAI
_TEXT	ENDS
PUBLIC	?TurnUpBoss@CCrywolf@@QAEXXZ			; CCrywolf::TurnUpBoss
EXTRN	?FindGroupLeader@TMonsterAIGroup@@SAHH@Z:PROC	; TMonsterAIGroup::FindGroupLeader
EXTRN	?Init@TMonsterAIGroup@@SAXH@Z:PROC		; TMonsterAIGroup::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TurnUpBoss@CCrywolf@@QAEXXZ PROC			; CCrywolf::TurnUpBoss
; _this$ = ecx

; 476  : {

  014d0	55		 push	 ebp
  014d1	8b ec		 mov	 ebp, esp
  014d3	83 ec 44	 sub	 esp, 68			; 00000044H
  014d6	53		 push	 ebx
  014d7	56		 push	 esi
  014d8	57		 push	 edi
  014d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 477  : 	TMonsterAIGroup::Init(this->m_iBossGroupNumber);

  014dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  014df	8b 88 28 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036584]
  014e5	51		 push	 ecx
  014e6	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init
  014eb	83 c4 04	 add	 esp, 4

; 478  : 	TMonsterAIGroup::ChangeAIOrder(this->m_iBossGroupNumber, 1);

  014ee	6a 01		 push	 1
  014f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  014f3	8b 88 28 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036584]
  014f9	51		 push	 ecx
  014fa	e8 00 00 00 00	 call	 ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ; TMonsterAIGroup::ChangeAIOrder
  014ff	83 c4 08	 add	 esp, 8

; 479  : 	this->m_iBossIndex = TMonsterAIGroup::FindGroupLeader(this->m_iBossGroupNumber);

  01502	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01505	8b 88 28 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036584]
  0150b	51		 push	 ecx
  0150c	e8 00 00 00 00	 call	 ?FindGroupLeader@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::FindGroupLeader
  01511	83 c4 04	 add	 esp, 4
  01514	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01517	89 82 24 d1 0f
	00		 mov	 DWORD PTR [edx+1036580], eax

; 480  : }

  0151d	5f		 pop	 edi
  0151e	5e		 pop	 esi
  0151f	5b		 pop	 ebx
  01520	8b e5		 mov	 esp, ebp
  01522	5d		 pop	 ebp
  01523	c3		 ret	 0
?TurnUpBoss@CCrywolf@@QAEXXZ ENDP			; CCrywolf::TurnUpBoss
_TEXT	ENDS
PUBLIC	??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@ ; `string'
PUBLIC	?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckScheduleTime
PUBLIC	?SetNextState@CCrywolf@@QAEXH@Z			; CCrywolf::SetNextState
PUBLIC	?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ	; CCrywolfStateTimeInfo::ResetAppliedTime
PUBLIC	?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckContinuanceTime
PUBLIC	?CheckStateTimeSync@CCrywolf@@QAEHXZ		; CCrywolf::CheckStateTimeSync
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@
CONST	SEGMENT
??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@ DB '[ Crywolf '
	DB	'] Start Crywolf', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$229785 = -12						; size = 4
_dwTime$229779 = -8					; size = 4
_this$ = -4						; size = 4
?CheckStateTimeSync@CCrywolf@@QAEHXZ PROC		; CCrywolf::CheckStateTimeSync
; _this$ = ecx

; 483  : {

  01530	55		 push	 ebp
  01531	8b ec		 mov	 ebp, esp
  01533	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01536	53		 push	 ebx
  01537	56		 push	 esi
  01538	57		 push	 edi
  01539	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 484  : 	if (this->m_iCrywolfState != CRYWOLF_STATE_NONE )

  0153c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0153f	83 b8 3c b9 0f
	00 00		 cmp	 DWORD PTR [eax+1030460], 0
  01546	0f 84 aa 00 00
	00		 je	 $LN11@CheckState

; 485  : 	{
; 486  : 		if ( this->m_StateTimeInfo[this->m_iCrywolfState].m_bUsed == FALSE )

  0154c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0154f	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  01555	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  01558	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0155b	83 bc 0a 88 cf
	0f 00 00	 cmp	 DWORD PTR [edx+ecx+1036168], 0
  01563	75 08		 jne	 SHORT $LN10@CheckState

; 487  : 		{
; 488  : 			return -1;

  01565	83 c8 ff	 or	 eax, -1
  01568	e9 ed 00 00 00	 jmp	 $LN12@CheckState
$LN10@CheckState:

; 489  : 		}
; 490  : 
; 491  : 		DWORD dwTime = GetTickCount();

  0156d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01573	89 45 f8	 mov	 DWORD PTR _dwTime$229779[ebp], eax

; 492  : 
; 493  : 		if ( this->m_StateTimeInfo[this->m_iCrywolfState].CheckContinuanceTime() == FALSE )

  01576	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01579	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  0157f	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  01582	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01585	8d 8c 0a 88 cf
	0f 00		 lea	 ecx, DWORD PTR [edx+ecx+1036168]
  0158c	e8 00 00 00 00	 call	 ?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckContinuanceTime
  01591	85 c0		 test	 eax, eax
  01593	75 5a		 jne	 SHORT $LN9@CheckState

; 494  : 		{
; 495  : 			this->m_StateTimeInfo[this->m_iCrywolfState].ResetAppliedTime();

  01595	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01598	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  0159e	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  015a1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  015a4	8d 8c 0a 88 cf
	0f 00		 lea	 ecx, DWORD PTR [edx+ecx+1036168]
  015ab	e8 00 00 00 00	 call	 ?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ ; CCrywolfStateTimeInfo::ResetAppliedTime

; 496  : 
; 497  : 			if ( this->m_iCrywolfState == CRYWOLF_STATE_ENDCYCLE )

  015b0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015b3	83 b8 3c b9 0f
	00 06		 cmp	 DWORD PTR [eax+1030460], 6
  015ba	75 21		 jne	 SHORT $LN8@CheckState

; 498  : 			{
; 499  : 				if ( this->m_iScheduleMode == 1 )

  015bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015bf	83 78 10 01	 cmp	 DWORD PTR [eax+16], 1
  015c3	75 0c		 jne	 SHORT $LN7@CheckState

; 500  : 				{
; 501  : 					this->SetState(CRYWOLF_STATE_NOTIFY_1);

  015c5	6a 01		 push	 1
  015c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015ca	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState

; 502  : 				}
; 503  : 				else

  015cf	eb 0a		 jmp	 SHORT $LN6@CheckState
$LN7@CheckState:

; 504  : 				{
; 505  : 					this->SetState(CRYWOLF_STATE_NONE);

  015d1	6a 00		 push	 0
  015d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015d6	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN6@CheckState:

; 506  : 				}
; 507  : 			}
; 508  : 			else

  015db	eb 12		 jmp	 SHORT $LN9@CheckState
$LN8@CheckState:

; 509  : 			{
; 510  : 				this->SetNextState(this->m_iCrywolfState);

  015dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015e0	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  015e6	51		 push	 ecx
  015e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015ea	e8 00 00 00 00	 call	 ?SetNextState@CCrywolf@@QAEXH@Z ; CCrywolf::SetNextState
$LN9@CheckState:

; 511  : 			}
; 512  : 		}
; 513  : 		return 1;

  015ef	b8 01 00 00 00	 mov	 eax, 1
  015f4	eb 64		 jmp	 SHORT $LN12@CheckState
$LN11@CheckState:

; 514  : 	}
; 515  : 
; 516  : 	for ( int i=0;i<m_StartTimeInfoCount;i++)

  015f6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$229785[ebp], 0
  015fd	eb 09		 jmp	 SHORT $LN4@CheckState
$LN3@CheckState:
  015ff	8b 45 f4	 mov	 eax, DWORD PTR _i$229785[ebp]
  01602	83 c0 01	 add	 eax, 1
  01605	89 45 f4	 mov	 DWORD PTR _i$229785[ebp], eax
$LN4@CheckState:
  01608	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0160b	8b 4d f4	 mov	 ecx, DWORD PTR _i$229785[ebp]
  0160e	3b 88 84 cf 0f
	00		 cmp	 ecx, DWORD PTR [eax+1036164]
  01614	7d 42		 jge	 SHORT $LN2@CheckState

; 517  : 	{
; 518  : 		if ( this->m_StartTimeInfo[i].CheckScheduleTime() != FALSE )

  01616	8b 45 f4	 mov	 eax, DWORD PTR _i$229785[ebp]
  01619	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0161c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0161f	8d 8c 01 14 cc
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1035284]
  01626	e8 00 00 00 00	 call	 ?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckScheduleTime
  0162b	85 c0		 test	 eax, eax
  0162d	74 27		 je	 SHORT $LN1@CheckState

; 519  : 		{
; 520  : 			LogAddTD("[ Crywolf ] Start Crywolf");

  0162f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@
  01634	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0163a	83 c4 04	 add	 esp, 4

; 521  : 			this->SetState(this->m_StartTimeInfo[i].m_iStateNumber);

  0163d	8b 45 f4	 mov	 eax, DWORD PTR _i$229785[ebp]
  01640	6b c0 2c	 imul	 eax, 44			; 0000002cH
  01643	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01646	8b 94 01 18 cc
	0f 00		 mov	 edx, DWORD PTR [ecx+eax+1035288]
  0164d	52		 push	 edx
  0164e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01651	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN1@CheckState:

; 522  : 		}
; 523  : 	}

  01656	eb a7		 jmp	 SHORT $LN3@CheckState
$LN2@CheckState:

; 524  : 
; 525  : 	return 0;

  01658	33 c0		 xor	 eax, eax
$LN12@CheckState:

; 526  : }

  0165a	5f		 pop	 edi
  0165b	5e		 pop	 esi
  0165c	5b		 pop	 ebx
  0165d	8b e5		 mov	 esp, ebp
  0165f	5d		 pop	 ebp
  01660	c3		 ret	 0
?CheckStateTimeSync@CCrywolf@@QAEHXZ ENDP		; CCrywolf::CheckStateTimeSync
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolfstatetimeinfo.h
_TEXT	ENDS
;	COMDAT ?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ PROC	; CCrywolfStateTimeInfo::ResetAppliedTime, COMDAT
; _this$ = ecx

; 41   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 		this->m_dwAppliedTickCount = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 43   : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ ENDP	; CCrywolfStateTimeInfo::ResetAppliedTime
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ PROC ; CCrywolfStateTimeInfo::CheckContinuanceTime, COMDAT
; _this$ = ecx

; 46   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	2b 41 28	 sub	 eax, DWORD PTR [ecx+40]
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	3b 42 24	 cmp	 eax, DWORD PTR [edx+36]
  0001e	76 04		 jbe	 SHORT $LN1@CheckConti

; 48   : 		{
; 49   : 			return FALSE;

  00020	33 c0		 xor	 eax, eax
  00022	eb 05		 jmp	 SHORT $LN2@CheckConti
$LN1@CheckConti:

; 50   : 		}
; 51   : 
; 52   : 		return TRUE;

  00024	b8 01 00 00 00	 mov	 eax, 1
$LN2@CheckConti:

; 53   : 	}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ ENDP ; CCrywolfStateTimeInfo::CheckContinuanceTime
_TEXT	ENDS
PUBLIC	??OCTime@ATL@@QBE_NV01@@Z			; ATL::CTime::operator>
PUBLIC	??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z		; ATL::CTime::operator+
PUBLIC	??MCTime@ATL@@QBE_NV01@@Z			; ATL::CTime::operator<
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
PUBLIC	??0CTimeSpan@ATL@@QAE@JHHH@Z			; ATL::CTimeSpan::CTimeSpan
PUBLIC	?GetMinute@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMinute
PUBLIC	?GetHour@CTime@ATL@@QBEHXZ			; ATL::CTime::GetHour
PUBLIC	?GetDayOfWeek@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDayOfWeek
PUBLIC	?GetDay@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDay
PUBLIC	?GetMonth@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMonth
PUBLIC	?GetYear@CTime@ATL@@QBEHXZ			; ATL::CTime::GetYear
PUBLIC	?GetTickCount@CTime@ATL@@SG?AV12@XZ		; ATL::CTime::GetTickCount
; Function compile flags: /Odtp /ZI
;	COMDAT ?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ
_TEXT	SEGMENT
tv235 = -188						; size = 4
tv230 = -184						; size = 4
tv196 = -184						; size = 4
tv225 = -180						; size = 4
tv191 = -180						; size = 4
tv157 = -180						; size = 4
$T231935 = -176						; size = 8
$T231938 = -168						; size = 8
$T231943 = -160						; size = 8
$T231950 = -152						; size = 8
_tCheckTime$218944 = -80				; size = 8
_tCheckTime$218939 = -72				; size = 8
_tCheckTime$218933 = -64				; size = 8
_tCheckTime$218928 = -56				; size = 8
_tTimeRange$ = -48					; size = 8
_iCrywolfState$ = -40					; size = 4
_iMinute$ = -36						; size = 4
_iHour$ = -32						; size = 4
_iDayOfWeek$ = -28					; size = 4
_iDay$ = -24						; size = 4
_iMonth$ = -20						; size = 4
_iYear$ = -16						; size = 4
_tCurrentTime$ = -12					; size = 8
_this$ = -4						; size = 4
?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ PROC	; CCrywolfStateTimeInfo::CheckScheduleTime, COMDAT
; _this$ = ecx

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 57   : 		CTime tCurrentTime = CTime::GetTickCount();

  0000f	8d 45 f4	 lea	 eax, DWORD PTR _tCurrentTime$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 58   : 
; 59   : 		int iYear = tCurrentTime.GetYear();

  00018	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0001b	e8 00 00 00 00	 call	 ?GetYear@CTime@ATL@@QBEHXZ ; ATL::CTime::GetYear
  00020	89 45 f0	 mov	 DWORD PTR _iYear$[ebp], eax

; 60   : 		int iMonth = tCurrentTime.GetMonth();

  00023	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetMonth@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMonth
  0002b	89 45 ec	 mov	 DWORD PTR _iMonth$[ebp], eax

; 61   : 		int iDay = tCurrentTime.GetDay();

  0002e	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  00036	89 45 e8	 mov	 DWORD PTR _iDay$[ebp], eax

; 62   : 		int iDayOfWeek = tCurrentTime.GetDayOfWeek();

  00039	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0003c	e8 00 00 00 00	 call	 ?GetDayOfWeek@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDayOfWeek
  00041	89 45 e4	 mov	 DWORD PTR _iDayOfWeek$[ebp], eax

; 63   : 		int iHour = tCurrentTime.GetHour();

  00044	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00047	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  0004c	89 45 e0	 mov	 DWORD PTR _iHour$[ebp], eax

; 64   : 		int iMinute = tCurrentTime.GetMinute();

  0004f	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00052	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  00057	89 45 dc	 mov	 DWORD PTR _iMinute$[ebp], eax

; 65   : 
; 66   : 		int iCrywolfState = -1;

  0005a	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _iCrywolfState$[ebp], -1

; 67   : 
; 68   : 		CTimeSpan tTimeRange(0,0,this->m_iContinuanceTime,0);

  00061	6a 00		 push	 0
  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00069	51		 push	 ecx
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	8d 4d d0	 lea	 ecx, DWORD PTR _tTimeRange$[ebp]
  00071	e8 00 00 00 00	 call	 ??0CTimeSpan@ATL@@QAE@JHHH@Z ; ATL::CTimeSpan::CTimeSpan

; 69   : 
; 70   : 		if(m_iMonth != -1 && m_iMonth != iMonth)

  00076	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00079	83 78 0c ff	 cmp	 DWORD PTR [eax+12], -1
  0007d	74 73		 je	 SHORT $LN13@CheckSched
  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00085	3b 4d ec	 cmp	 ecx, DWORD PTR _iMonth$[ebp]
  00088	74 68		 je	 SHORT $LN13@CheckSched

; 71   : 		{
; 72   : 			CTime tCheckTime(iYear,m_iMonth,0,0,0,0,-1);

  0008a	6a ff		 push	 -1
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	6a 00		 push	 0
  00092	6a 00		 push	 0
  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0009a	51		 push	 ecx
  0009b	8b 55 f0	 mov	 edx, DWORD PTR _iYear$[ebp]
  0009e	52		 push	 edx
  0009f	8d 4d c8	 lea	 ecx, DWORD PTR _tCheckTime$218928[ebp]
  000a2	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 73   : 
; 74   : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))

  000a7	8b 45 cc	 mov	 eax, DWORD PTR _tCheckTime$218928[ebp+4]
  000aa	50		 push	 eax
  000ab	8b 4d c8	 mov	 ecx, DWORD PTR _tCheckTime$218928[ebp]
  000ae	51		 push	 ecx
  000af	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  000b2	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  000b7	0f b6 d0	 movzx	 edx, al
  000ba	85 d2		 test	 edx, edx
  000bc	75 2d		 jne	 SHORT $LN11@CheckSched
  000be	8b 45 d4	 mov	 eax, DWORD PTR _tTimeRange$[ebp+4]
  000c1	50		 push	 eax
  000c2	8b 4d d0	 mov	 ecx, DWORD PTR _tTimeRange$[ebp]
  000c5	51		 push	 ecx
  000c6	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR $T231935[ebp]
  000cc	52		 push	 edx
  000cd	8d 4d c8	 lea	 ecx, DWORD PTR _tCheckTime$218928[ebp]
  000d0	e8 00 00 00 00	 call	 ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ; ATL::CTime::operator+
  000d5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d8	51		 push	 ecx
  000d9	8b 10		 mov	 edx, DWORD PTR [eax]
  000db	52		 push	 edx
  000dc	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  000df	e8 00 00 00 00	 call	 ??OCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>
  000e4	0f b6 c0	 movzx	 eax, al
  000e7	85 c0		 test	 eax, eax
  000e9	74 07		 je	 SHORT $LN13@CheckSched
$LN11@CheckSched:

; 75   : 			{
; 76   : 				return FALSE;

  000eb	33 c0		 xor	 eax, eax
  000ed	e9 87 02 00 00	 jmp	 $LN14@CheckSched
$LN13@CheckSched:

; 77   : 			}
; 78   : 		}
; 79   : 
; 80   : 		if(m_iDay != -1 && m_iDay != iDay)

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  000f9	0f 84 9c 00 00
	00		 je	 $LN10@CheckSched
  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00105	3b 4d e8	 cmp	 ecx, DWORD PTR _iDay$[ebp]
  00108	0f 84 8d 00 00
	00		 je	 $LN10@CheckSched

; 81   : 		{
; 82   : 			CTime tCheckTime(iYear,(m_iMonth == -1 ? iMonth : m_iMonth),m_iDay,0,0,0,-1);

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00111	83 78 0c ff	 cmp	 DWORD PTR [eax+12], -1
  00115	75 0b		 jne	 SHORT $LN16@CheckSched
  00117	8b 4d ec	 mov	 ecx, DWORD PTR _iMonth$[ebp]
  0011a	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv157[ebp], ecx
  00120	eb 0c		 jmp	 SHORT $LN17@CheckSched
$LN16@CheckSched:
  00122	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00125	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00128	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
$LN17@CheckSched:
  0012e	6a ff		 push	 -1
  00130	6a 00		 push	 0
  00132	6a 00		 push	 0
  00134	6a 00		 push	 0
  00136	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0013c	52		 push	 edx
  0013d	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv157[ebp]
  00143	50		 push	 eax
  00144	8b 4d f0	 mov	 ecx, DWORD PTR _iYear$[ebp]
  00147	51		 push	 ecx
  00148	8d 4d c0	 lea	 ecx, DWORD PTR _tCheckTime$218933[ebp]
  0014b	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 83   : 			
; 84   : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))

  00150	8b 45 c4	 mov	 eax, DWORD PTR _tCheckTime$218933[ebp+4]
  00153	50		 push	 eax
  00154	8b 4d c0	 mov	 ecx, DWORD PTR _tCheckTime$218933[ebp]
  00157	51		 push	 ecx
  00158	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0015b	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  00160	0f b6 d0	 movzx	 edx, al
  00163	85 d2		 test	 edx, edx
  00165	75 2d		 jne	 SHORT $LN8@CheckSched
  00167	8b 45 d4	 mov	 eax, DWORD PTR _tTimeRange$[ebp+4]
  0016a	50		 push	 eax
  0016b	8b 4d d0	 mov	 ecx, DWORD PTR _tTimeRange$[ebp]
  0016e	51		 push	 ecx
  0016f	8d 95 58 ff ff
	ff		 lea	 edx, DWORD PTR $T231938[ebp]
  00175	52		 push	 edx
  00176	8d 4d c0	 lea	 ecx, DWORD PTR _tCheckTime$218933[ebp]
  00179	e8 00 00 00 00	 call	 ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ; ATL::CTime::operator+
  0017e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00181	51		 push	 ecx
  00182	8b 10		 mov	 edx, DWORD PTR [eax]
  00184	52		 push	 edx
  00185	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00188	e8 00 00 00 00	 call	 ??OCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>
  0018d	0f b6 c0	 movzx	 eax, al
  00190	85 c0		 test	 eax, eax
  00192	74 07		 je	 SHORT $LN10@CheckSched
$LN8@CheckSched:

; 85   : 			{
; 86   : 				return FALSE;

  00194	33 c0		 xor	 eax, eax
  00196	e9 de 01 00 00	 jmp	 $LN14@CheckSched
$LN10@CheckSched:

; 87   : 			}
; 88   : 		}
; 89   : 
; 90   : 		if(m_iDayOfWeek != -1 && m_iDayOfWeek != iDayOfWeek)

  0019b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019e	83 78 14 ff	 cmp	 DWORD PTR [eax+20], -1
  001a2	74 12		 je	 SHORT $LN7@CheckSched
  001a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001aa	3b 4d e4	 cmp	 ecx, DWORD PTR _iDayOfWeek$[ebp]
  001ad	74 07		 je	 SHORT $LN7@CheckSched

; 91   : 			return FALSE;

  001af	33 c0		 xor	 eax, eax
  001b1	e9 c3 01 00 00	 jmp	 $LN14@CheckSched
$LN7@CheckSched:

; 92   : 
; 93   : 		if(m_iHour != -1 && m_iHour != iHour)

  001b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b9	83 78 18 ff	 cmp	 DWORD PTR [eax+24], -1
  001bd	0f 84 c1 00 00
	00		 je	 $LN6@CheckSched
  001c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001c9	3b 4d e0	 cmp	 ecx, DWORD PTR _iHour$[ebp]
  001cc	0f 84 b2 00 00
	00		 je	 $LN6@CheckSched

; 94   : 		{
; 95   : 			CTime tCheckTime(iYear,(m_iMonth == -1 ? iMonth : m_iMonth),(m_iDay == -1 ? iDay : m_iDay),m_iHour,0,0,-1);

  001d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d5	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  001d9	75 0b		 jne	 SHORT $LN18@CheckSched
  001db	8b 4d e8	 mov	 ecx, DWORD PTR _iDay$[ebp]
  001de	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv191[ebp], ecx
  001e4	eb 0c		 jmp	 SHORT $LN19@CheckSched
$LN18@CheckSched:
  001e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001ec	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv191[ebp], eax
$LN19@CheckSched:
  001f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f5	83 79 0c ff	 cmp	 DWORD PTR [ecx+12], -1
  001f9	75 0b		 jne	 SHORT $LN20@CheckSched
  001fb	8b 55 ec	 mov	 edx, DWORD PTR _iMonth$[ebp]
  001fe	89 95 48 ff ff
	ff		 mov	 DWORD PTR tv196[ebp], edx
  00204	eb 0c		 jmp	 SHORT $LN21@CheckSched
$LN20@CheckSched:
  00206	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00209	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0020c	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv196[ebp], ecx
$LN21@CheckSched:
  00212	6a ff		 push	 -1
  00214	6a 00		 push	 0
  00216	6a 00		 push	 0
  00218	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0021b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0021e	50		 push	 eax
  0021f	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv191[ebp]
  00225	51		 push	 ecx
  00226	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv196[ebp]
  0022c	52		 push	 edx
  0022d	8b 45 f0	 mov	 eax, DWORD PTR _iYear$[ebp]
  00230	50		 push	 eax
  00231	8d 4d b8	 lea	 ecx, DWORD PTR _tCheckTime$218939[ebp]
  00234	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 96   : 
; 97   : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))

  00239	8b 45 bc	 mov	 eax, DWORD PTR _tCheckTime$218939[ebp+4]
  0023c	50		 push	 eax
  0023d	8b 4d b8	 mov	 ecx, DWORD PTR _tCheckTime$218939[ebp]
  00240	51		 push	 ecx
  00241	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00244	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  00249	0f b6 d0	 movzx	 edx, al
  0024c	85 d2		 test	 edx, edx
  0024e	75 2d		 jne	 SHORT $LN4@CheckSched
  00250	8b 45 d4	 mov	 eax, DWORD PTR _tTimeRange$[ebp+4]
  00253	50		 push	 eax
  00254	8b 4d d0	 mov	 ecx, DWORD PTR _tTimeRange$[ebp]
  00257	51		 push	 ecx
  00258	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR $T231943[ebp]
  0025e	52		 push	 edx
  0025f	8d 4d b8	 lea	 ecx, DWORD PTR _tCheckTime$218939[ebp]
  00262	e8 00 00 00 00	 call	 ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ; ATL::CTime::operator+
  00267	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0026a	51		 push	 ecx
  0026b	8b 10		 mov	 edx, DWORD PTR [eax]
  0026d	52		 push	 edx
  0026e	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00271	e8 00 00 00 00	 call	 ??OCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>
  00276	0f b6 c0	 movzx	 eax, al
  00279	85 c0		 test	 eax, eax
  0027b	74 07		 je	 SHORT $LN6@CheckSched
$LN4@CheckSched:

; 98   : 			{
; 99   : 				return FALSE;

  0027d	33 c0		 xor	 eax, eax
  0027f	e9 f5 00 00 00	 jmp	 $LN14@CheckSched
$LN6@CheckSched:

; 100  : 			}
; 101  : 		}
; 102  : 
; 103  : 		if(m_iMinute != -1 && m_iMinute != iMinute)

  00284	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00287	83 78 1c ff	 cmp	 DWORD PTR [eax+28], -1
  0028b	0f 84 e3 00 00
	00		 je	 $LN3@CheckSched
  00291	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00294	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00297	3b 4d dc	 cmp	 ecx, DWORD PTR _iMinute$[ebp]
  0029a	0f 84 d4 00 00
	00		 je	 $LN3@CheckSched

; 104  : 		{
; 105  : 			CTime tCheckTime(iYear,(m_iMonth == -1 ? iMonth : m_iMonth),(m_iDay == -1 ? iDay : m_iDay),(m_iHour == -1 ? iHour : m_iHour),m_iMinute,0,-1);

  002a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a3	83 78 18 ff	 cmp	 DWORD PTR [eax+24], -1
  002a7	75 0b		 jne	 SHORT $LN22@CheckSched
  002a9	8b 4d e0	 mov	 ecx, DWORD PTR _iHour$[ebp]
  002ac	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv225[ebp], ecx
  002b2	eb 0c		 jmp	 SHORT $LN23@CheckSched
$LN22@CheckSched:
  002b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002b7	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  002ba	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv225[ebp], eax
$LN23@CheckSched:
  002c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c3	83 79 10 ff	 cmp	 DWORD PTR [ecx+16], -1
  002c7	75 0b		 jne	 SHORT $LN24@CheckSched
  002c9	8b 55 e8	 mov	 edx, DWORD PTR _iDay$[ebp]
  002cc	89 95 48 ff ff
	ff		 mov	 DWORD PTR tv230[ebp], edx
  002d2	eb 0c		 jmp	 SHORT $LN25@CheckSched
$LN24@CheckSched:
  002d4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d7	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002da	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv230[ebp], ecx
$LN25@CheckSched:
  002e0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002e3	83 7a 0c ff	 cmp	 DWORD PTR [edx+12], -1
  002e7	75 0b		 jne	 SHORT $LN26@CheckSched
  002e9	8b 45 ec	 mov	 eax, DWORD PTR _iMonth$[ebp]
  002ec	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv235[ebp], eax
  002f2	eb 0c		 jmp	 SHORT $LN27@CheckSched
$LN26@CheckSched:
  002f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f7	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002fa	89 95 44 ff ff
	ff		 mov	 DWORD PTR tv235[ebp], edx
$LN27@CheckSched:
  00300	6a ff		 push	 -1
  00302	6a 00		 push	 0
  00304	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00307	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0030a	51		 push	 ecx
  0030b	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv225[ebp]
  00311	52		 push	 edx
  00312	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR tv230[ebp]
  00318	50		 push	 eax
  00319	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv235[ebp]
  0031f	51		 push	 ecx
  00320	8b 55 f0	 mov	 edx, DWORD PTR _iYear$[ebp]
  00323	52		 push	 edx
  00324	8d 4d b0	 lea	 ecx, DWORD PTR _tCheckTime$218944[ebp]
  00327	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 106  : 
; 107  : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))

  0032c	8b 45 b4	 mov	 eax, DWORD PTR _tCheckTime$218944[ebp+4]
  0032f	50		 push	 eax
  00330	8b 4d b0	 mov	 ecx, DWORD PTR _tCheckTime$218944[ebp]
  00333	51		 push	 ecx
  00334	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00337	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  0033c	0f b6 d0	 movzx	 edx, al
  0033f	85 d2		 test	 edx, edx
  00341	75 2d		 jne	 SHORT $LN1@CheckSched
  00343	8b 45 d4	 mov	 eax, DWORD PTR _tTimeRange$[ebp+4]
  00346	50		 push	 eax
  00347	8b 4d d0	 mov	 ecx, DWORD PTR _tTimeRange$[ebp]
  0034a	51		 push	 ecx
  0034b	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR $T231950[ebp]
  00351	52		 push	 edx
  00352	8d 4d b0	 lea	 ecx, DWORD PTR _tCheckTime$218944[ebp]
  00355	e8 00 00 00 00	 call	 ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ; ATL::CTime::operator+
  0035a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0035d	51		 push	 ecx
  0035e	8b 10		 mov	 edx, DWORD PTR [eax]
  00360	52		 push	 edx
  00361	8d 4d f4	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00364	e8 00 00 00 00	 call	 ??OCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>
  00369	0f b6 c0	 movzx	 eax, al
  0036c	85 c0		 test	 eax, eax
  0036e	74 04		 je	 SHORT $LN3@CheckSched
$LN1@CheckSched:

; 108  : 			{
; 109  : 				return FALSE;

  00370	33 c0		 xor	 eax, eax
  00372	eb 05		 jmp	 SHORT $LN14@CheckSched
$LN3@CheckSched:

; 110  : 			}
; 111  : 		}
; 112  : 
; 113  : 		return TRUE;

  00374	b8 01 00 00 00	 mov	 eax, 1
$LN14@CheckSched:

; 114  : 	}

  00379	5f		 pop	 edi
  0037a	5e		 pop	 esi
  0037b	5b		 pop	 ebx
  0037c	8b e5		 mov	 esp, ebp
  0037e	5d		 pop	 ebp
  0037f	c3		 ret	 0
?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ ENDP	; CCrywolfStateTimeInfo::CheckScheduleTime
_TEXT	ENDS
PUBLIC	?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_ENDCYCLE
PUBLIC	?ProcState_END@CCrywolf@@QAEXXZ			; CCrywolf::ProcState_END
PUBLIC	?ProcState_START@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_START
PUBLIC	?ProcState_READY@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_READY
PUBLIC	?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_NOTIFY_2
PUBLIC	?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_NOTIFY_1
PUBLIC	?ProcState_NONE@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_NONE
PUBLIC	?Run@CCrywolf@@QAEXXZ				; CCrywolf::Run
EXTRN	?CheckEnableCrywolf@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::CheckEnableCrywolf
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
_TEXT	SEGMENT
tv73 = -72						; size = 4
_this$ = -4						; size = 4
?Run@CCrywolf@@QAEXXZ PROC				; CCrywolf::Run
; _this$ = ecx

; 529  : {

  01670	55		 push	 ebp
  01671	8b ec		 mov	 ebp, esp
  01673	83 ec 48	 sub	 esp, 72			; 00000048H
  01676	53		 push	 ebx
  01677	56		 push	 esi
  01678	57		 push	 edi
  01679	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 530  : 	if ( !g_CrywolfSync.CheckEnableCrywolf())

  0167c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  01681	e8 00 00 00 00	 call	 ?CheckEnableCrywolf@CCrywolfSync@@QAEHXZ ; CCrywolfSync::CheckEnableCrywolf
  01686	85 c0		 test	 eax, eax
  01688	75 02		 jne	 SHORT $LN11@Run

; 531  : 		return;

  0168a	eb 76		 jmp	 SHORT $LN12@Run
$LN11@Run:

; 532  : 
; 533  : 	if ( this->m_StartTimeInfo[0].m_bUsed == FALSE )

  0168c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0168f	83 b8 14 cc 0f
	00 00		 cmp	 DWORD PTR [eax+1035284], 0
  01696	75 02		 jne	 SHORT $LN10@Run

; 534  : 		return;

  01698	eb 68		 jmp	 SHORT $LN12@Run
$LN10@Run:

; 535  : 
; 536  : 	this->CheckStateTimeSync();

  0169a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0169d	e8 00 00 00 00	 call	 ?CheckStateTimeSync@CCrywolf@@QAEHXZ ; CCrywolf::CheckStateTimeSync

; 537  : 
; 538  : 	switch ( this->m_iCrywolfState )

  016a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  016a5	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  016ab	89 4d b8	 mov	 DWORD PTR tv73[ebp], ecx
  016ae	83 7d b8 06	 cmp	 DWORD PTR tv73[ebp], 6
  016b2	77 4e		 ja	 SHORT $LN12@Run
  016b4	8b 55 b8	 mov	 edx, DWORD PTR tv73[ebp]
  016b7	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN14@Run[edx*4]
$LN7@Run:

; 539  : 	{
; 540  : 		case CRYWOLF_STATE_NONE:
; 541  : 			this->ProcState_NONE();

  016be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016c1	e8 00 00 00 00	 call	 ?ProcState_NONE@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_NONE

; 542  : 			break;

  016c6	eb 3a		 jmp	 SHORT $LN12@Run
$LN6@Run:

; 543  : 		case CRYWOLF_STATE_NOTIFY_1:
; 544  : 			this->ProcState_NOTIFY_1();

  016c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016cb	e8 00 00 00 00	 call	 ?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_NOTIFY_1

; 545  : 			break;

  016d0	eb 30		 jmp	 SHORT $LN12@Run
$LN5@Run:

; 546  : 		case CRYWOLF_STATE_NOTIFY_2:
; 547  : 			this->ProcState_NOTIFY_2();

  016d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016d5	e8 00 00 00 00	 call	 ?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_NOTIFY_2

; 548  : 			break;

  016da	eb 26		 jmp	 SHORT $LN12@Run
$LN4@Run:

; 549  : 		case CRYWOLF_STATE_READY:
; 550  : 			this->ProcState_READY();

  016dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016df	e8 00 00 00 00	 call	 ?ProcState_READY@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_READY

; 551  : 			break;

  016e4	eb 1c		 jmp	 SHORT $LN12@Run
$LN3@Run:

; 552  : 		case CRYWOLF_STATE_START:
; 553  : 			this->ProcState_START();

  016e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016e9	e8 00 00 00 00	 call	 ?ProcState_START@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_START

; 554  : 			break;

  016ee	eb 12		 jmp	 SHORT $LN12@Run
$LN2@Run:

; 555  : 		case CRYWOLF_STATE_END:
; 556  : 			this->ProcState_END();

  016f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016f3	e8 00 00 00 00	 call	 ?ProcState_END@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_END

; 557  : 			break;

  016f8	eb 08		 jmp	 SHORT $LN12@Run
$LN1@Run:

; 558  : 		case CRYWOLF_STATE_ENDCYCLE:
; 559  : 			this->ProcState_ENDCYCLE();

  016fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016fd	e8 00 00 00 00	 call	 ?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_ENDCYCLE
$LN12@Run:

; 560  : 			break;
; 561  : 	}
; 562  : }

  01702	5f		 pop	 edi
  01703	5e		 pop	 esi
  01704	5b		 pop	 ebx
  01705	8b e5		 mov	 esp, ebp
  01707	5d		 pop	 ebp
  01708	c3		 ret	 0
  01709	8d 49 00	 npad	 3
$LN14@Run:
  0170c	00 00 00 00	 DD	 $LN7@Run
  01710	00 00 00 00	 DD	 $LN6@Run
  01714	00 00 00 00	 DD	 $LN5@Run
  01718	00 00 00 00	 DD	 $LN4@Run
  0171c	00 00 00 00	 DD	 $LN3@Run
  01720	00 00 00 00	 DD	 $LN2@Run
  01724	00 00 00 00	 DD	 $LN1@Run
?Run@CCrywolf@@QAEXXZ ENDP				; CCrywolf::Run
_TEXT	ENDS
PUBLIC	?CrywolfInfoDBSave@CCrywolf@@QAEXXZ		; CCrywolf::CrywolfInfoDBSave
PUBLIC	?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfCurrentState
PUBLIC	?SetState_ENDCYCLE@CCrywolf@@QAEXXZ		; CCrywolf::SetState_ENDCYCLE
PUBLIC	?SetState_END@CCrywolf@@QAEXXZ			; CCrywolf::SetState_END
PUBLIC	?SetState_START@CCrywolf@@QAEXXZ		; CCrywolf::SetState_START
PUBLIC	?SetState_READY@CCrywolf@@QAEXXZ		; CCrywolf::SetState_READY
PUBLIC	?SetState_NOTIFY_2@CCrywolf@@QAEXXZ		; CCrywolf::SetState_NOTIFY_2
PUBLIC	?SetState_NOTIFY_1@CCrywolf@@QAEXXZ		; CCrywolf::SetState_NOTIFY_1
PUBLIC	?SetState_NONE@CCrywolf@@QAEXXZ			; CCrywolf::SetState_NONE
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_iCrywolfState$ = 8					; size = 4
?SetState@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetState
; _this$ = ecx

; 565  : {

  01730	55		 push	 ebp
  01731	8b ec		 mov	 ebp, esp
  01733	83 ec 48	 sub	 esp, 72			; 00000048H
  01736	53		 push	 ebx
  01737	56		 push	 esi
  01738	57		 push	 edi
  01739	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 566  : 	switch ( iCrywolfState )

  0173c	8b 45 08	 mov	 eax, DWORD PTR _iCrywolfState$[ebp]
  0173f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  01742	83 7d b8 06	 cmp	 DWORD PTR tv64[ebp], 6
  01746	77 4e		 ja	 SHORT $LN8@SetState
  01748	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  0174b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN12@SetState[ecx*4]
$LN7@SetState:

; 567  : 	{
; 568  : 		case CRYWOLF_STATE_NONE:
; 569  : 			this->SetState_NONE();

  01752	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01755	e8 00 00 00 00	 call	 ?SetState_NONE@CCrywolf@@QAEXXZ ; CCrywolf::SetState_NONE

; 570  : 			break;

  0175a	eb 3a		 jmp	 SHORT $LN8@SetState
$LN6@SetState:

; 571  : 		case CRYWOLF_STATE_NOTIFY_1:
; 572  : 			this->SetState_NOTIFY_1();

  0175c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0175f	e8 00 00 00 00	 call	 ?SetState_NOTIFY_1@CCrywolf@@QAEXXZ ; CCrywolf::SetState_NOTIFY_1

; 573  : 			break;

  01764	eb 30		 jmp	 SHORT $LN8@SetState
$LN5@SetState:

; 574  : 		case CRYWOLF_STATE_NOTIFY_2:
; 575  : 			this->SetState_NOTIFY_2();

  01766	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01769	e8 00 00 00 00	 call	 ?SetState_NOTIFY_2@CCrywolf@@QAEXXZ ; CCrywolf::SetState_NOTIFY_2

; 576  : 			break;

  0176e	eb 26		 jmp	 SHORT $LN8@SetState
$LN4@SetState:

; 577  : 		case CRYWOLF_STATE_READY:
; 578  : 			this->SetState_READY();

  01770	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01773	e8 00 00 00 00	 call	 ?SetState_READY@CCrywolf@@QAEXXZ ; CCrywolf::SetState_READY

; 579  : 			break;

  01778	eb 1c		 jmp	 SHORT $LN8@SetState
$LN3@SetState:

; 580  : 		case CRYWOLF_STATE_START:
; 581  : 			this->SetState_START();

  0177a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0177d	e8 00 00 00 00	 call	 ?SetState_START@CCrywolf@@QAEXXZ ; CCrywolf::SetState_START

; 582  : 			break;

  01782	eb 12		 jmp	 SHORT $LN8@SetState
$LN2@SetState:

; 583  : 		case CRYWOLF_STATE_END:
; 584  : 			this->SetState_END();

  01784	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01787	e8 00 00 00 00	 call	 ?SetState_END@CCrywolf@@QAEXXZ ; CCrywolf::SetState_END

; 585  : 			break;

  0178c	eb 08		 jmp	 SHORT $LN8@SetState
$LN1@SetState:

; 586  : 		case CRYWOLF_STATE_ENDCYCLE:
; 587  : 			this->SetState_ENDCYCLE();

  0178e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01791	e8 00 00 00 00	 call	 ?SetState_ENDCYCLE@CCrywolf@@QAEXXZ ; CCrywolf::SetState_ENDCYCLE
$LN8@SetState:

; 588  : 			break;
; 589  : 	}
; 590  : 
; 591  : 	this->NotifyCrywolfCurrentState();

  01796	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01799	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 592  : 	this->CrywolfInfoDBSave();

  0179e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017a1	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave

; 593  : }

  017a6	5f		 pop	 edi
  017a7	5e		 pop	 esi
  017a8	5b		 pop	 ebx
  017a9	8b e5		 mov	 esp, ebp
  017ab	5d		 pop	 ebp
  017ac	c2 04 00	 ret	 4
  017af	90		 npad	 1
$LN12@SetState:
  017b0	00 00 00 00	 DD	 $LN7@SetState
  017b4	00 00 00 00	 DD	 $LN6@SetState
  017b8	00 00 00 00	 DD	 $LN5@SetState
  017bc	00 00 00 00	 DD	 $LN4@SetState
  017c0	00 00 00 00	 DD	 $LN3@SetState
  017c4	00 00 00 00	 DD	 $LN2@SetState
  017c8	00 00 00 00	 DD	 $LN1@SetState
?SetState@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetState
; Function compile flags: /Odtp /ZI
_iNextState$ = -8					; size = 4
_this$ = -4						; size = 4
_iCurrentState$ = 8					; size = 4
?SetNextState@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetNextState
; _this$ = ecx

; 596  : {

  017d0	55		 push	 ebp
  017d1	8b ec		 mov	 ebp, esp
  017d3	83 ec 48	 sub	 esp, 72			; 00000048H
  017d6	53		 push	 ebx
  017d7	56		 push	 esi
  017d8	57		 push	 edi
  017d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 597  : 	int iNextState = iCurrentState + 1;

  017dc	8b 45 08	 mov	 eax, DWORD PTR _iCurrentState$[ebp]
  017df	83 c0 01	 add	 eax, 1
  017e2	89 45 f8	 mov	 DWORD PTR _iNextState$[ebp], eax

; 598  : 	this->SetState(iNextState);

  017e5	8b 45 f8	 mov	 eax, DWORD PTR _iNextState$[ebp]
  017e8	50		 push	 eax
  017e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017ec	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState

; 599  : }

  017f1	5f		 pop	 edi
  017f2	5e		 pop	 esi
  017f3	5b		 pop	 ebx
  017f4	8b e5		 mov	 esp, ebp
  017f6	5d		 pop	 ebp
  017f7	c2 04 00	 ret	 4
?SetNextState@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetNextState
_TEXT	ENDS
PUBLIC	?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z	; CCrywolf::SetCrywolfStateAppliedTime
PUBLIC	?SetCrywolfState@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfState
PUBLIC	??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@ ; `string'
;	COMDAT ??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@
CONST	SEGMENT
??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> NONE', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetState_NONE@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_NONE
; _this$ = ecx

; 602  : {

  01800	55		 push	 ebp
  01801	8b ec		 mov	 ebp, esp
  01803	83 ec 44	 sub	 esp, 68			; 00000044H
  01806	53		 push	 ebx
  01807	56		 push	 esi
  01808	57		 push	 edi
  01809	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 603  : 	LogAddC(4, "[ Crywolf ] State (%d) -> NONE", this->m_iCrywolfState);

  0180c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0180f	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  01815	51		 push	 ecx
  01816	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@
  0181b	6a 04		 push	 4
  0181d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01823	83 c4 0c	 add	 esp, 12			; 0000000cH

; 604  : 
; 605  : 	this->SetCrywolfState(CRYWOLF_STATE_NONE);

  01826	6a 00		 push	 0
  01828	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0182b	e8 00 00 00 00	 call	 ?SetCrywolfState@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfState

; 606  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_NONE);

  01830	6a 00		 push	 0
  01832	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01835	e8 00 00 00 00	 call	 ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfStateAppliedTime

; 607  : }

  0183a	5f		 pop	 edi
  0183b	5e		 pop	 esi
  0183c	5b		 pop	 ebx
  0183d	8b e5		 mov	 esp, ebp
  0183f	5d		 pop	 ebp
  01840	c3		 ret	 0
?SetState_NONE@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_NONE
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.h
_TEXT	ENDS
;	COMDAT ?SetCrywolfState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iCrywolfState$ = 8					; size = 4
?SetCrywolfState@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetCrywolfState, COMDAT
; _this$ = ecx

; 94   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _iCrywolfState$[ebp]
  00012	89 88 3c b9 0f
	00		 mov	 DWORD PTR [eax+1030460], ecx
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetCrywolfState@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetCrywolfState
_TEXT	ENDS
PUBLIC	?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ	; CCrywolfStateTimeInfo::SetAppliedTime
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iCrywolfState$ = 8					; size = 4
?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z PROC	; CCrywolf::SetCrywolfStateAppliedTime, COMDAT
; _this$ = ecx

; 95   : 	void SetCrywolfStateAppliedTime(int iCrywolfState){this->m_StateTimeInfo[iCrywolfState].SetAppliedTime();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _iCrywolfState$[ebp]
  0000f	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8d 8c 01 88 cf
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1036168]
  0001c	e8 00 00 00 00	 call	 ?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ ; CCrywolfStateTimeInfo::SetAppliedTime
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ENDP	; CCrywolf::SetCrywolfStateAppliedTime
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolfstatetimeinfo.h
_TEXT	ENDS
;	COMDAT ?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ PROC	; CCrywolfStateTimeInfo::SetAppliedTime, COMDAT
; _this$ = ecx

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 		this->m_dwAppliedTickCount = GetTickCount();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 38   : 	}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ ENDP	; CCrywolfStateTimeInfo::SetAppliedTime
_TEXT	ENDS
PUBLIC	??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ ; `string'
EXTRN	?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ:PROC ; CCrywolfUtil::SendMapServerGroupMsg
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
CONST	SEGMENT
??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ DB '['
	DB	' Crywolf ] State (%d) -> NOTIFY_1', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetState_NOTIFY_1@CCrywolf@@QAEXXZ PROC		; CCrywolf::SetState_NOTIFY_1
; _this$ = ecx

; 610  : {

  01850	55		 push	 ebp
  01851	8b ec		 mov	 ebp, esp
  01853	83 ec 44	 sub	 esp, 68			; 00000044H
  01856	53		 push	 ebx
  01857	56		 push	 esi
  01858	57		 push	 edi
  01859	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 611  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 228)));

  0185c	68 e4 0c 00 00	 push	 3300			; 00000ce4H
  01861	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01866	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0186b	50		 push	 eax
  0186c	68 00 00 00 00	 push	 OFFSET _UTIL
  01871	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  01876	83 c4 08	 add	 esp, 8

; 612  : 	LogAddC(4, "[ Crywolf ] State (%d) -> NOTIFY_1", this->m_iCrywolfState);

  01879	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0187c	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  01882	51		 push	 ecx
  01883	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
  01888	6a 04		 push	 4
  0188a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01890	83 c4 0c	 add	 esp, 12			; 0000000cH

; 613  : 
; 614  : 	this->SetCrywolfState(CRYWOLF_STATE_NOTIFY_1);

  01893	6a 01		 push	 1
  01895	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01898	e8 00 00 00 00	 call	 ?SetCrywolfState@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfState

; 615  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_NOTIFY_1);

  0189d	6a 01		 push	 1
  0189f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018a2	e8 00 00 00 00	 call	 ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfStateAppliedTime

; 616  : 	this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  018a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  018ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018b0	89 81 bc d0 0f
	00		 mov	 DWORD PTR [ecx+1036476], eax

; 617  : }

  018b6	5f		 pop	 edi
  018b7	5e		 pop	 esi
  018b8	5b		 pop	 ebx
  018b9	8b e5		 mov	 esp, ebp
  018bb	5d		 pop	 ebp
  018bc	c3		 ret	 0
?SetState_NOTIFY_1@CCrywolf@@QAEXXZ ENDP		; CCrywolf::SetState_NOTIFY_1
_TEXT	ENDS
PUBLIC	?SetOccupationState@CCrywolf@@QAEXH@Z		; CCrywolf::SetOccupationState
PUBLIC	??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ ; `string'
;	COMDAT ??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
CONST	SEGMENT
??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ DB '['
	DB	' Crywolf ] State (%d) -> NOTIFY_2', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetState_NOTIFY_2@CCrywolf@@QAEXXZ PROC		; CCrywolf::SetState_NOTIFY_2
; _this$ = ecx

; 620  : {

  018c0	55		 push	 ebp
  018c1	8b ec		 mov	 ebp, esp
  018c3	83 ec 44	 sub	 esp, 68			; 00000044H
  018c6	53		 push	 ebx
  018c7	56		 push	 esi
  018c8	57		 push	 edi
  018c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 621  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 229)));

  018cc	68 e5 0c 00 00	 push	 3301			; 00000ce5H
  018d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  018d6	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  018db	50		 push	 eax
  018dc	68 00 00 00 00	 push	 OFFSET _UTIL
  018e1	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  018e6	83 c4 08	 add	 esp, 8

; 622  : 	LogAddC(4, "[ Crywolf ] State (%d) -> NOTIFY_2", this->m_iCrywolfState);

  018e9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  018ec	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  018f2	51		 push	 ecx
  018f3	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
  018f8	6a 04		 push	 4
  018fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01900	83 c4 0c	 add	 esp, 12			; 0000000cH

; 623  : 
; 624  : 	this->SetCrywolfState(CRYWOLF_STATE_NOTIFY_2);

  01903	6a 02		 push	 2
  01905	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01908	e8 00 00 00 00	 call	 ?SetCrywolfState@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfState

; 625  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_NOTIFY_2);

  0190d	6a 02		 push	 2
  0190f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01912	e8 00 00 00 00	 call	 ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfStateAppliedTime

; 626  : 	this->SetOccupationState(2);

  01917	6a 02		 push	 2
  01919	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0191c	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolf@@QAEXH@Z ; CCrywolf::SetOccupationState

; 627  : 	this->SetCrywolfCommonNPC(2);

  01921	6a 02		 push	 2
  01923	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01926	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 628  : 	this->SetCrywolfMapAttr(2);

  0192b	6a 02		 push	 2
  0192d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01930	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 629  : 	this->RemoveCrywolfCommonMonster();

  01935	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01938	e8 00 00 00 00	 call	 ?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ ; CCrywolf::RemoveCrywolfCommonMonster

; 630  : 	this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  0193d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01943	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01946	89 81 bc d0 0f
	00		 mov	 DWORD PTR [ecx+1036476], eax

; 631  : }

  0194c	5f		 pop	 edi
  0194d	5e		 pop	 esi
  0194e	5b		 pop	 ebx
  0194f	8b e5		 mov	 esp, ebp
  01951	5d		 pop	 ebp
  01952	c3		 ret	 0
?SetState_NOTIFY_2@CCrywolf@@QAEXXZ ENDP		; CCrywolf::SetState_NOTIFY_2
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.h
_TEXT	ENDS
;	COMDAT ?SetOccupationState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iOccupationState$ = 8					; size = 4
?SetOccupationState@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetOccupationState, COMDAT
; _this$ = ecx

; 96   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _iOccupationState$[ebp]
  00012	89 88 40 b9 0f
	00		 mov	 DWORD PTR [eax+1030464], ecx
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetOccupationState@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetOccupationState
_TEXT	ENDS
PUBLIC	?ResetAllUserMVPScore@CCrywolf@@QAEXXZ		; CCrywolf::ResetAllUserMVPScore
PUBLIC	??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@ ; `string'
EXTRN	?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z:PROC ; CCrywolfAltar::SetAllAltarViewState
EXTRN	?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ:PROC ; CCrywolfAltar::SetAllAltarObjectIndex
EXTRN	?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A:BYTE	; g_CrywolfNPC_Altar
;	COMDAT ??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
CONST	SEGMENT
??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> READY', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$229843 = -8						; size = 4
_this$ = -4						; size = 4
?SetState_READY@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_READY
; _this$ = ecx

; 634  : {

  01960	55		 push	 ebp
  01961	8b ec		 mov	 ebp, esp
  01963	83 ec 48	 sub	 esp, 72			; 00000048H
  01966	53		 push	 ebx
  01967	56		 push	 esi
  01968	57		 push	 edi
  01969	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 635  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 230)));

  0196c	68 e6 0c 00 00	 push	 3302			; 00000ce6H
  01971	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01976	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0197b	50		 push	 eax
  0197c	68 00 00 00 00	 push	 OFFSET _UTIL
  01981	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  01986	83 c4 08	 add	 esp, 8

; 636  : 	LogAddC(4, "[ Crywolf ] State (%d) -> READY", this->m_iCrywolfState);

  01989	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0198c	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  01992	51		 push	 ecx
  01993	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@
  01998	6a 04		 push	 4
  0199a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  019a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 637  : 
; 638  : 	this->SetCrywolfState(CRYWOLF_STATE_READY);

  019a3	6a 03		 push	 3
  019a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019a8	e8 00 00 00 00	 call	 ?SetCrywolfState@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfState

; 639  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_READY);

  019ad	6a 03		 push	 3
  019af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019b2	e8 00 00 00 00	 call	 ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfStateAppliedTime

; 640  : 	this->SetOccupationState(2);

  019b7	6a 02		 push	 2
  019b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019bc	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolf@@QAEXH@Z ; CCrywolf::SetOccupationState

; 641  : 	this->SetCrywolfCommonNPC(2);

  019c1	6a 02		 push	 2
  019c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019c6	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 642  : 	this->SetCrywolfMapAttr(2);

  019cb	6a 02		 push	 2
  019cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019d0	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 643  : 	this->RemoveCrywolfCommonMonster();

  019d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019d8	e8 00 00 00 00	 call	 ?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ ; CCrywolf::RemoveCrywolfCommonMonster

; 644  : 	g_CrywolfNPC_Altar.SetAllAltarObjectIndex();

  019dd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  019e2	e8 00 00 00 00	 call	 ?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ ; CCrywolfAltar::SetAllAltarObjectIndex

; 645  : 	g_CrywolfNPC_Altar.SetAllAltarViewState(0x10000);

  019e7	68 00 00 01 00	 push	 65536			; 00010000H
  019ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  019f1	e8 00 00 00 00	 call	 ?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::SetAllAltarViewState

; 646  : 
; 647  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  019f6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$229843[ebp], 0
  019fd	eb 09		 jmp	 SHORT $LN3@SetState_R
$LN2@SetState_R:
  019ff	8b 45 f8	 mov	 eax, DWORD PTR _n$229843[ebp]
  01a02	83 c0 01	 add	 eax, 1
  01a05	89 45 f8	 mov	 DWORD PTR _n$229843[ebp], eax
$LN3@SetState_R:
  01a08	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a0b	8b 4d f8	 mov	 ecx, DWORD PTR _n$229843[ebp]
  01a0e	3b 88 1c d1 0f
	00		 cmp	 ecx, DWORD PTR [eax+1036572]
  01a14	7d 18		 jge	 SHORT $LN1@SetState_R

; 648  : 	{
; 649  : 		TMonsterAIGroup::Init(this->m_iMonsterGroupNumberArray[n]);

  01a16	8b 45 f8	 mov	 eax, DWORD PTR _n$229843[ebp]
  01a19	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a1c	8b 94 81 cc d0
	0f 00		 mov	 edx, DWORD PTR [ecx+eax*4+1036492]
  01a23	52		 push	 edx
  01a24	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init
  01a29	83 c4 04	 add	 esp, 4

; 650  : 	}

  01a2c	eb d1		 jmp	 SHORT $LN2@SetState_R
$LN1@SetState_R:

; 651  : 
; 652  : 	this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  01a2e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01a34	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a37	89 81 bc d0 0f
	00		 mov	 DWORD PTR [ecx+1036476], eax

; 653  : 	this->ResetAllUserMVPScore();

  01a3d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a40	e8 00 00 00 00	 call	 ?ResetAllUserMVPScore@CCrywolf@@QAEXXZ ; CCrywolf::ResetAllUserMVPScore

; 654  : }

  01a45	5f		 pop	 edi
  01a46	5e		 pop	 esi
  01a47	5b		 pop	 ebx
  01a48	8b e5		 mov	 esp, ebp
  01a4a	5d		 pop	 ebp
  01a4b	c3		 ret	 0
?SetState_READY@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_READY
_TEXT	ENDS
PUBLIC	??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@ ; `string'
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
EXTRN	?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ:PROC ; CCrywolfUtil::SendCrywolfUserAnyMsg
EXTRN	?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ:PROC ; CCrywolfAltar::GetContractedAltarCount
;	COMDAT ??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@
CONST	SEGMENT
??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> START', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv157 = -92						; size = 4
tv133 = -92						; size = 4
_number$229865 = -24					; size = 4
_i$229860 = -20						; size = 4
_lpObj$229859 = -16					; size = 4
_iLeaderIndex$229856 = -12				; size = 4
_n$229852 = -8						; size = 4
_this$ = -4						; size = 4
?SetState_START@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_START
; _this$ = ecx

; 657  : {

  01a50	55		 push	 ebp
  01a51	8b ec		 mov	 ebp, esp
  01a53	83 ec 5c	 sub	 esp, 92			; 0000005cH
  01a56	53		 push	 ebx
  01a57	56		 push	 esi
  01a58	57		 push	 edi
  01a59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 658  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 231)));

  01a5c	68 e7 0c 00 00	 push	 3303			; 00000ce7H
  01a61	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01a66	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01a6b	50		 push	 eax
  01a6c	68 00 00 00 00	 push	 OFFSET _UTIL
  01a71	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  01a76	83 c4 08	 add	 esp, 8

; 659  : 	LogAddC(4, "[ Crywolf ] State (%d) -> START", this->m_iCrywolfState);

  01a79	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a7c	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  01a82	51		 push	 ecx
  01a83	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@
  01a88	6a 04		 push	 4
  01a8a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01a90	83 c4 0c	 add	 esp, 12			; 0000000cH

; 660  : 
; 661  : 	this->SetCrywolfState(CRYWOLF_STATE_START);

  01a93	6a 04		 push	 4
  01a95	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a98	e8 00 00 00 00	 call	 ?SetCrywolfState@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfState

; 662  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_START);

  01a9d	6a 04		 push	 4
  01a9f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01aa2	e8 00 00 00 00	 call	 ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfStateAppliedTime

; 663  : 
; 664  : 	if ( g_CrywolfNPC_Altar.GetContractedAltarCount() == 0 )

  01aa7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  01aac	e8 00 00 00 00	 call	 ?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ ; CCrywolfAltar::GetContractedAltarCount
  01ab1	85 c0		 test	 eax, eax
  01ab3	75 38		 jne	 SHORT $LN12@SetState_S

; 665  : 	{
; 666  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 232)));

  01ab5	68 e8 0c 00 00	 push	 3304			; 00000ce8H
  01aba	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01abf	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01ac4	50		 push	 eax
  01ac5	6a 02		 push	 2
  01ac7	68 00 00 00 00	 push	 OFFSET _UTIL
  01acc	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  01ad1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 667  : 		this->SetOccupationState(1);

  01ad4	6a 01		 push	 1
  01ad6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ad9	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolf@@QAEXH@Z ; CCrywolf::SetOccupationState

; 668  : 		this->SetState(CRYWOLF_STATE_END);

  01ade	6a 05		 push	 5
  01ae0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ae3	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState

; 669  : 
; 670  : 		return;

  01ae8	e9 73 01 00 00	 jmp	 $LN13@SetState_S
$LN12@SetState_S:

; 671  : 	}
; 672  : 
; 673  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  01aed	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$229852[ebp], 0
  01af4	eb 09		 jmp	 SHORT $LN11@SetState_S
$LN10@SetState_S:
  01af6	8b 45 f8	 mov	 eax, DWORD PTR _n$229852[ebp]
  01af9	83 c0 01	 add	 eax, 1
  01afc	89 45 f8	 mov	 DWORD PTR _n$229852[ebp], eax
$LN11@SetState_S:
  01aff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b02	8b 4d f8	 mov	 ecx, DWORD PTR _n$229852[ebp]
  01b05	3b 88 1c d1 0f
	00		 cmp	 ecx, DWORD PTR [eax+1036572]
  01b0b	0f 8d 1c 01 00
	00		 jge	 $LN9@SetState_S

; 674  : 	{
; 675  : 		int iLeaderIndex = TMonsterAIGroup::FindGroupLeader(this->m_iMonsterGroupNumberArray[n]);

  01b11	8b 45 f8	 mov	 eax, DWORD PTR _n$229852[ebp]
  01b14	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b17	8b 94 81 cc d0
	0f 00		 mov	 edx, DWORD PTR [ecx+eax*4+1036492]
  01b1e	52		 push	 edx
  01b1f	e8 00 00 00 00	 call	 ?FindGroupLeader@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::FindGroupLeader
  01b24	83 c4 04	 add	 esp, 4
  01b27	89 45 f4	 mov	 DWORD PTR _iLeaderIndex$229856[ebp], eax

; 676  : 
; 677  : 		if ( !CHECK_LIMIT(iLeaderIndex, OBJ_MAXMONSTER) )

  01b2a	83 7d f4 00	 cmp	 DWORD PTR _iLeaderIndex$229856[ebp], 0
  01b2e	7d 09		 jge	 SHORT $LN15@SetState_S
  01b30	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
  01b37	eb 0f		 jmp	 SHORT $LN16@SetState_S
$LN15@SetState_S:
  01b39	33 c0		 xor	 eax, eax
  01b3b	81 7d f4 c7 32
	00 00		 cmp	 DWORD PTR _iLeaderIndex$229856[ebp], 12999 ; 000032c7H
  01b42	0f 9e c0	 setle	 al
  01b45	89 45 a4	 mov	 DWORD PTR tv133[ebp], eax
$LN16@SetState_S:
  01b48	83 7d a4 00	 cmp	 DWORD PTR tv133[ebp], 0
  01b4c	75 02		 jne	 SHORT $LN8@SetState_S

; 678  : 			continue;

  01b4e	eb a6		 jmp	 SHORT $LN10@SetState_S
$LN8@SetState_S:

; 679  : 
; 680  : 		if ( gObj[iLeaderIndex].Class != 340 )

  01b50	8b 45 f4	 mov	 eax, DWORD PTR _iLeaderIndex$229856[ebp]
  01b53	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01b59	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01b5f	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  01b67	81 fa 54 01 00
	00		 cmp	 edx, 340		; 00000154H
  01b6d	74 02		 je	 SHORT $LN7@SetState_S

; 681  : 			continue;

  01b6f	eb 85		 jmp	 SHORT $LN10@SetState_S
$LN7@SetState_S:

; 682  : 
; 683  : 		LPOBJ lpObj = &gObj[iLeaderIndex];

  01b71	8b 45 f4	 mov	 eax, DWORD PTR _iLeaderIndex$229856[ebp]
  01b74	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01b7a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01b80	89 45 f0	 mov	 DWORD PTR _lpObj$229859[ebp], eax

; 684  : 
; 685  : 		for ( int i=0;i<MAX_VIEWPORT_MONSTER;i++)

  01b83	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$229860[ebp], 0
  01b8a	eb 09		 jmp	 SHORT $LN6@SetState_S
$LN5@SetState_S:
  01b8c	8b 45 ec	 mov	 eax, DWORD PTR _i$229860[ebp]
  01b8f	83 c0 01	 add	 eax, 1
  01b92	89 45 ec	 mov	 DWORD PTR _i$229860[ebp], eax
$LN6@SetState_S:
  01b95	83 7d ec 4b	 cmp	 DWORD PTR _i$229860[ebp], 75 ; 0000004bH
  01b99	0f 8d 89 00 00
	00		 jge	 $LN4@SetState_S

; 686  : 		{
; 687  : 			if ( lpObj->VpPlayer2[i].state )

  01b9f	8b 45 ec	 mov	 eax, DWORD PTR _i$229860[ebp]
  01ba2	6b c0 0c	 imul	 eax, 12			; 0000000cH
  01ba5	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$229859[ebp]
  01ba8	0f be 94 01 ac
	08 00 00	 movsx	 edx, BYTE PTR [ecx+eax+2220]
  01bb0	85 d2		 test	 edx, edx
  01bb2	74 6f		 je	 SHORT $LN3@SetState_S

; 688  : 			{
; 689  : 				int number = lpObj->VpPlayer2[i].number;

  01bb4	8b 45 ec	 mov	 eax, DWORD PTR _i$229860[ebp]
  01bb7	6b c0 0c	 imul	 eax, 12			; 0000000cH
  01bba	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$229859[ebp]
  01bbd	0f bf 94 01 ae
	08 00 00	 movsx	 edx, WORD PTR [ecx+eax+2222]
  01bc5	89 55 e8	 mov	 DWORD PTR _number$229865[ebp], edx

; 690  : 
; 691  : 				if ( OBJMAX_RANGE(number) != FALSE )

  01bc8	83 7d e8 00	 cmp	 DWORD PTR _number$229865[ebp], 0
  01bcc	7d 09		 jge	 SHORT $LN17@SetState_S
  01bce	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
  01bd5	eb 0f		 jmp	 SHORT $LN18@SetState_S
$LN17@SetState_S:
  01bd7	33 c0		 xor	 eax, eax
  01bd9	81 7d e8 97 3a
	00 00		 cmp	 DWORD PTR _number$229865[ebp], 14999 ; 00003a97H
  01be0	0f 9e c0	 setle	 al
  01be3	89 45 a4	 mov	 DWORD PTR tv157[ebp], eax
$LN18@SetState_S:
  01be6	83 7d a4 00	 cmp	 DWORD PTR tv157[ebp], 0
  01bea	74 37		 je	 SHORT $LN3@SetState_S

; 692  : 				{
; 693  : 					if ( gObj[number].Type == OBJ_USER )

  01bec	8b 45 e8	 mov	 eax, DWORD PTR _number$229865[ebp]
  01bef	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01bf5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01bfb	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  01c00	83 fa 01	 cmp	 edx, 1
  01c03	75 1e		 jne	 SHORT $LN3@SetState_S

; 694  : 					{
; 695  : 						gObjBackSpring2(&gObj[number], lpObj, 3);

  01c05	6a 03		 push	 3
  01c07	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$229859[ebp]
  01c0a	50		 push	 eax
  01c0b	8b 4d e8	 mov	 ecx, DWORD PTR _number$229865[ebp]
  01c0e	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01c14	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01c1a	51		 push	 ecx
  01c1b	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  01c20	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SetState_S:

; 696  : 					}
; 697  : 				}
; 698  : 			}
; 699  : 		}

  01c23	e9 64 ff ff ff	 jmp	 $LN5@SetState_S
$LN4@SetState_S:

; 700  : 	}

  01c28	e9 c9 fe ff ff	 jmp	 $LN10@SetState_S
$LN9@SetState_S:

; 701  : 
; 702  : 	this->ChangeAI(1);

  01c2d	6a 01		 push	 1
  01c2f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c32	e8 00 00 00 00	 call	 ?ChangeAI@CCrywolf@@QAEXH@Z ; CCrywolf::ChangeAI

; 703  : 	this->m_dwCrywolfStartProcTick = GetTickCount();

  01c37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01c3d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c40	89 81 c0 d0 0f
	00		 mov	 DWORD PTR [ecx+1036480], eax

; 704  : 	this->m_bTurnUpBoss = FALSE;

  01c46	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c49	c7 80 c4 d0 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036484], 0

; 705  : 	this->m_bChangeAI = FALSE;

  01c53	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c56	c7 80 c8 d0 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036488], 0
$LN13@SetState_S:

; 706  : }

  01c60	5f		 pop	 edi
  01c61	5e		 pop	 esi
  01c62	5b		 pop	 ebx
  01c63	8b e5		 mov	 esp, ebp
  01c65	5d		 pop	 ebp
  01c66	c3		 ret	 0
?SetState_START@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_START
_TEXT	ENDS
PUBLIC	?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfPersonalRank
PUBLIC	?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z	; CCrywolf::MakeRewardForAltarElf
PUBLIC	?CalcGettingScore@CCrywolf@@QAEHHHH@Z		; CCrywolf::CalcGettingScore
PUBLIC	??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@ ; `string'
PUBLIC	??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@ ; `string'
PUBLIC	?GetOccupationState@CCrywolf@@QAEHXZ		; CCrywolf::GetOccupationState
PUBLIC	?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfBossIndex
PUBLIC	??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@ ; `string'
EXTRN	?ResetAllAltar@CCrywolfAltar@@QAEXXZ:PROC	; CCrywolfAltar::ResetAllAltar
EXTRN	?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z:PROC	; CCrywolfAltar::GetAltarUserIndex
;	COMDAT ??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@
CONST	SEGMENT
??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@ DB '['
	DB	' Crywolf ][MVP] SUCCESS.......!!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@
CONST	SEGMENT
??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@ DB '['
	DB	' Crywolf ][MVP] FAIL.......!!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@
CONST	SEGMENT
??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> END', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv77 = -80						; size = 4
_iUserIndex$229882 = -12				; size = 4
_iAltar$229878 = -8					; size = 4
_this$ = -4						; size = 4
?SetState_END@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_END
; _this$ = ecx

; 709  : {

  01c70	55		 push	 ebp
  01c71	8b ec		 mov	 ebp, esp
  01c73	83 ec 50	 sub	 esp, 80			; 00000050H
  01c76	53		 push	 ebx
  01c77	56		 push	 esi
  01c78	57		 push	 edi
  01c79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 710  : 	this->m_dwCrywolfStartProcTick = 0;

  01c7c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c7f	c7 80 c0 d0 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036480], 0

; 711  : 	this->m_bChangeAI = FALSE;

  01c89	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c8c	c7 80 c8 d0 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036488], 0

; 712  : 
; 713  : 	LogAddC(4, "[ Crywolf ] State (%d) -> END", this->m_iCrywolfState);

  01c96	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c99	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  01c9f	51		 push	 ecx
  01ca0	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@
  01ca5	6a 04		 push	 4
  01ca7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01cad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 714  : 
; 715  : 	if ( this->m_bTurnUpBoss != FALSE && CHECK_LIMIT(this->m_iBossIndex, OBJ_MAXMONSTER) )

  01cb0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01cb3	83 b8 c4 d0 0f
	00 00		 cmp	 DWORD PTR [eax+1036484], 0
  01cba	74 77		 je	 SHORT $LN9@SetState_E
  01cbc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01cbf	83 b8 24 d1 0f
	00 00		 cmp	 DWORD PTR [eax+1036580], 0
  01cc6	7d 09		 jge	 SHORT $LN12@SetState_E
  01cc8	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
  01ccf	eb 15		 jmp	 SHORT $LN13@SetState_E
$LN12@SetState_E:
  01cd1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01cd4	33 d2		 xor	 edx, edx
  01cd6	81 b9 24 d1 0f
	00 c7 32 00 00	 cmp	 DWORD PTR [ecx+1036580], 12999 ; 000032c7H
  01ce0	0f 9e c2	 setle	 dl
  01ce3	89 55 b0	 mov	 DWORD PTR tv77[ebp], edx
$LN13@SetState_E:
  01ce6	83 7d b0 00	 cmp	 DWORD PTR tv77[ebp], 0
  01cea	74 47		 je	 SHORT $LN9@SetState_E

; 716  : 	{
; 717  : 		if ( gObj[this->m_iBossIndex].Live != FALSE )

  01cec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01cef	8b 88 24 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036580]
  01cf5	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  01cfb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01d01	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  01d06	85 c0		 test	 eax, eax
  01d08	74 29		 je	 SHORT $LN9@SetState_E

; 718  : 		{
; 719  : 			UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 233)));

  01d0a	68 e9 0c 00 00	 push	 3305			; 00000ce9H
  01d0f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01d14	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01d19	50		 push	 eax
  01d1a	6a 02		 push	 2
  01d1c	68 00 00 00 00	 push	 OFFSET _UTIL
  01d21	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  01d26	83 c4 0c	 add	 esp, 12			; 0000000cH

; 720  : 			this->SetOccupationState(1);

  01d29	6a 01		 push	 1
  01d2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d2e	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolf@@QAEXH@Z ; CCrywolf::SetOccupationState
$LN9@SetState_E:

; 721  : 		}
; 722  : 	}
; 723  : 
; 724  : 	this->m_bTurnUpBoss = FALSE;

  01d33	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d36	c7 80 c4 d0 0f
	00 00 00 00 00	 mov	 DWORD PTR [eax+1036484], 0

; 725  : 	this->SetCrywolfBossIndex(-1);

  01d40	6a ff		 push	 -1
  01d42	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d45	e8 00 00 00 00	 call	 ?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfBossIndex

; 726  : 
; 727  : 	if ( this->GetOccupationState() == 1 )

  01d4a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d4d	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  01d52	83 f8 01	 cmp	 eax, 1
  01d55	75 37		 jne	 SHORT $LN7@SetState_E

; 728  : 	{
; 729  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 234)));

  01d57	68 ea 0c 00 00	 push	 3306			; 00000ceaH
  01d5c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01d61	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01d66	50		 push	 eax
  01d67	68 00 00 00 00	 push	 OFFSET _UTIL
  01d6c	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  01d71	83 c4 08	 add	 esp, 8

; 730  : 		this->SetOccupationState(1);

  01d74	6a 01		 push	 1
  01d76	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d79	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolf@@QAEXH@Z ; CCrywolf::SetOccupationState

; 731  : 
; 732  : 		LogAddTD("[ Crywolf ][MVP] FAIL.......!!");

  01d7e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@
  01d83	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01d89	83 c4 04	 add	 esp, 4

; 733  : 	}
; 734  : 	else

  01d8c	eb 35		 jmp	 SHORT $LN6@SetState_E
$LN7@SetState_E:

; 735  : 	{
; 736  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 235)));

  01d8e	68 eb 0c 00 00	 push	 3307			; 00000cebH
  01d93	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01d98	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01d9d	50		 push	 eax
  01d9e	68 00 00 00 00	 push	 OFFSET _UTIL
  01da3	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  01da8	83 c4 08	 add	 esp, 8

; 737  : 		this->SetOccupationState(0);

  01dab	6a 00		 push	 0
  01dad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01db0	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolf@@QAEXH@Z ; CCrywolf::SetOccupationState

; 738  : 
; 739  : 		LogAddTD("[ Crywolf ][MVP] SUCCESS.......!!");

  01db5	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@
  01dba	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01dc0	83 c4 04	 add	 esp, 4
$LN6@SetState_E:

; 740  : 	}
; 741  : 
; 742  : 	this->SetCrywolfState(CRYWOLF_STATE_END);

  01dc3	6a 05		 push	 5
  01dc5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dc8	e8 00 00 00 00	 call	 ?SetCrywolfState@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfState

; 743  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_END);

  01dcd	6a 05		 push	 5
  01dcf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dd2	e8 00 00 00 00	 call	 ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfStateAppliedTime

; 744  : 	this->NotifyCrywolfCurrentState();

  01dd7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dda	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 745  : 	this->ChangeAI(0);

  01ddf	6a 00		 push	 0
  01de1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01de4	e8 00 00 00 00	 call	 ?ChangeAI@CCrywolf@@QAEXH@Z ; CCrywolf::ChangeAI

; 746  : 	
; 747  : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar++)

  01de9	c7 45 f8 cd 00
	00 00		 mov	 DWORD PTR _iAltar$229878[ebp], 205 ; 000000cdH
  01df0	eb 09		 jmp	 SHORT $LN5@SetState_E
$LN4@SetState_E:
  01df2	8b 45 f8	 mov	 eax, DWORD PTR _iAltar$229878[ebp]
  01df5	83 c0 01	 add	 eax, 1
  01df8	89 45 f8	 mov	 DWORD PTR _iAltar$229878[ebp], eax
$LN5@SetState_E:
  01dfb	81 7d f8 d1 00
	00 00		 cmp	 DWORD PTR _iAltar$229878[ebp], 209 ; 000000d1H
  01e02	7f 42		 jg	 SHORT $LN3@SetState_E

; 748  : 	{
; 749  : 		int iUserIndex = g_CrywolfNPC_Altar.GetAltarUserIndex(iAltar);

  01e04	8b 45 f8	 mov	 eax, DWORD PTR _iAltar$229878[ebp]
  01e07	50		 push	 eax
  01e08	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  01e0d	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex
  01e12	89 45 f4	 mov	 DWORD PTR _iUserIndex$229882[ebp], eax

; 750  : 
; 751  : 		if ( iUserIndex != -1 )

  01e15	83 7d f4 ff	 cmp	 DWORD PTR _iUserIndex$229882[ebp], -1
  01e19	74 29		 je	 SHORT $LN2@SetState_E

; 752  : 		{
; 753  : 			this->CalcGettingScore(iUserIndex, -1, 6);

  01e1b	6a 06		 push	 6
  01e1d	6a ff		 push	 -1
  01e1f	8b 45 f4	 mov	 eax, DWORD PTR _iUserIndex$229882[ebp]
  01e22	50		 push	 eax
  01e23	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e26	e8 00 00 00 00	 call	 ?CalcGettingScore@CCrywolf@@QAEHHHH@Z ; CCrywolf::CalcGettingScore

; 754  : 
; 755  : 			if ( this->GetOccupationState() != 1 )

  01e2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e2e	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  01e33	83 f8 01	 cmp	 eax, 1
  01e36	74 0c		 je	 SHORT $LN2@SetState_E

; 756  : 			{
; 757  : 				this->MakeRewardForAltarElf(iUserIndex);

  01e38	8b 45 f4	 mov	 eax, DWORD PTR _iUserIndex$229882[ebp]
  01e3b	50		 push	 eax
  01e3c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e3f	e8 00 00 00 00	 call	 ?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z ; CCrywolf::MakeRewardForAltarElf
$LN2@SetState_E:

; 758  : 			}
; 759  : 		}
; 760  : 	}

  01e44	eb ac		 jmp	 SHORT $LN4@SetState_E
$LN3@SetState_E:

; 761  : 
; 762  : 	g_CrywolfNPC_Altar.ResetAllAltar();

  01e46	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  01e4b	e8 00 00 00 00	 call	 ?ResetAllAltar@CCrywolfAltar@@QAEXXZ ; CCrywolfAltar::ResetAllAltar

; 763  : 	this->NotifyCrywolfPersonalRank();

  01e50	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e53	e8 00 00 00 00	 call	 ?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfPersonalRank

; 764  : }

  01e58	5f		 pop	 edi
  01e59	5e		 pop	 esi
  01e5a	5b		 pop	 ebx
  01e5b	8b e5		 mov	 esp, ebp
  01e5d	5d		 pop	 ebp
  01e5e	c3		 ret	 0
?SetState_END@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_END
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.h
_TEXT	ENDS
;	COMDAT ?GetOccupationState@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOccupationState@CCrywolf@@QAEHXZ PROC		; CCrywolf::GetOccupationState, COMDAT
; _this$ = ecx

; 92   : 	int GetOccupationState(){return this->m_iOccupationState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 40 b9 0f
	00		 mov	 eax, DWORD PTR [eax+1030464]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetOccupationState@CCrywolf@@QAEHXZ ENDP		; CCrywolf::GetOccupationState
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iBossIndex$ = 8					; size = 4
?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetCrywolfBossIndex, COMDAT
; _this$ = ecx

; 97   : 	void SetCrywolfBossIndex(int iBossIndex){this->m_iBossIndex = iBossIndex;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _iBossIndex$[ebp]
  00012	89 88 24 d1 0f
	00		 mov	 DWORD PTR [eax+1036580], ecx
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetCrywolfBossIndex
_TEXT	ENDS
PUBLIC	?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ		; CCrywolf::NotifyCrywolfHeroList
PUBLIC	??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@ ; `string'
EXTRN	?DelGroupInstance@TMonsterAIGroup@@SAHH@Z:PROC	; TMonsterAIGroup::DelGroupInstance
;	COMDAT ??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
CONST	SEGMENT
??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@ DB '['
	DB	' Crywolf ] State (%d) -> ENDCYCLE', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$229889 = -8						; size = 4
_this$ = -4						; size = 4
?SetState_ENDCYCLE@CCrywolf@@QAEXXZ PROC		; CCrywolf::SetState_ENDCYCLE
; _this$ = ecx

; 767  : {

  01e60	55		 push	 ebp
  01e61	8b ec		 mov	 ebp, esp
  01e63	83 ec 48	 sub	 esp, 72			; 00000048H
  01e66	53		 push	 ebx
  01e67	56		 push	 esi
  01e68	57		 push	 edi
  01e69	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 768  : 	LogAddC(4, "[ Crywolf ] State (%d) -> ENDCYCLE", this->m_iCrywolfState);

  01e6c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01e6f	8b 88 3c b9 0f
	00		 mov	 ecx, DWORD PTR [eax+1030460]
  01e75	51		 push	 ecx
  01e76	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@
  01e7b	6a 04		 push	 4
  01e7d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01e83	83 c4 0c	 add	 esp, 12			; 0000000cH

; 769  : 
; 770  : 	this->SetCrywolfState(CRYWOLF_STATE_ENDCYCLE);

  01e86	6a 06		 push	 6
  01e88	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e8b	e8 00 00 00 00	 call	 ?SetCrywolfState@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfState

; 771  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_ENDCYCLE);

  01e90	6a 06		 push	 6
  01e92	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e95	e8 00 00 00 00	 call	 ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfStateAppliedTime

; 772  : 	this->SetCrywolfMapAttr(this->GetOccupationState());

  01e9a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e9d	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  01ea2	50		 push	 eax
  01ea3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ea6	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 773  : 	this->SetCrywolfCommonNPC(this->GetOccupationState());

  01eab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01eae	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  01eb3	50		 push	 eax
  01eb4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01eb7	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 774  : 
; 775  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  01ebc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$229889[ebp], 0
  01ec3	eb 09		 jmp	 SHORT $LN3@SetState_E@2
$LN2@SetState_E@2:
  01ec5	8b 45 f8	 mov	 eax, DWORD PTR _n$229889[ebp]
  01ec8	83 c0 01	 add	 eax, 1
  01ecb	89 45 f8	 mov	 DWORD PTR _n$229889[ebp], eax
$LN3@SetState_E@2:
  01ece	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01ed1	8b 4d f8	 mov	 ecx, DWORD PTR _n$229889[ebp]
  01ed4	3b 88 1c d1 0f
	00		 cmp	 ecx, DWORD PTR [eax+1036572]
  01eda	7d 18		 jge	 SHORT $LN1@SetState_E@2

; 776  : 	{
; 777  : 		TMonsterAIGroup::DelGroupInstance(this->m_iMonsterGroupNumberArray[n]);

  01edc	8b 45 f8	 mov	 eax, DWORD PTR _n$229889[ebp]
  01edf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ee2	8b 94 81 cc d0
	0f 00		 mov	 edx, DWORD PTR [ecx+eax*4+1036492]
  01ee9	52		 push	 edx
  01eea	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  01eef	83 c4 04	 add	 esp, 4

; 778  : 	}

  01ef2	eb d1		 jmp	 SHORT $LN2@SetState_E@2
$LN1@SetState_E@2:

; 779  : 
; 780  : 	TMonsterAIGroup::DelGroupInstance(this->m_iBossGroupNumber);

  01ef4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01ef7	8b 88 28 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036584]
  01efd	51		 push	 ecx
  01efe	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  01f03	83 c4 04	 add	 esp, 4

; 781  : 
; 782  : 	this->CreateCrywolfCommonMonster();

  01f06	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f09	e8 00 00 00 00	 call	 ?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ ; CCrywolf::CreateCrywolfCommonMonster

; 783  : 	this->NotifyCrywolfHeroList();

  01f0e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f11	e8 00 00 00 00	 call	 ?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfHeroList

; 784  : 	this->ResetAllUserMVPScore();

  01f16	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f19	e8 00 00 00 00	 call	 ?ResetAllUserMVPScore@CCrywolf@@QAEXXZ ; CCrywolf::ResetAllUserMVPScore

; 785  : }

  01f1e	5f		 pop	 edi
  01f1f	5e		 pop	 esi
  01f20	5b		 pop	 ebx
  01f21	8b e5		 mov	 esp, ebp
  01f23	5d		 pop	 ebp
  01f24	c3		 ret	 0
?SetState_ENDCYCLE@CCrywolf@@QAEXXZ ENDP		; CCrywolf::SetState_ENDCYCLE
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ProcState_NONE@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_NONE
; _this$ = ecx

; 788  : {

  01f30	55		 push	 ebp
  01f31	8b ec		 mov	 ebp, esp
  01f33	83 ec 44	 sub	 esp, 68			; 00000044H
  01f36	53		 push	 ebx
  01f37	56		 push	 esi
  01f38	57		 push	 edi
  01f39	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 789  : 	return;
; 790  : }

  01f3c	5f		 pop	 edi
  01f3d	5e		 pop	 esi
  01f3e	5b		 pop	 ebx
  01f3f	8b e5		 mov	 esp, ebp
  01f41	5d		 pop	 ebp
  01f42	c3		 ret	 0
?ProcState_NONE@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_NONE
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ PROC		; CCrywolf::ProcState_NOTIFY_1
; _this$ = ecx

; 793  : {

  01f50	55		 push	 ebp
  01f51	8b ec		 mov	 ebp, esp
  01f53	83 ec 44	 sub	 esp, 68			; 00000044H
  01f56	53		 push	 ebx
  01f57	56		 push	 esi
  01f58	57		 push	 edi
  01f59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 794  : 	if ( (GetTickCount() - this->m_dwCrywolfNotifyMsgStartTick) > 70000 )

  01f5c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01f62	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f65	2b 81 bc d0 0f
	00		 sub	 eax, DWORD PTR [ecx+1036476]
  01f6b	3d 70 11 01 00	 cmp	 eax, 70000		; 00011170H
  01f70	76 2c		 jbe	 SHORT $LN2@ProcState_

; 795  : 	{
; 796  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 228)));

  01f72	68 e4 0c 00 00	 push	 3300			; 00000ce4H
  01f77	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01f7c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01f81	50		 push	 eax
  01f82	68 00 00 00 00	 push	 OFFSET _UTIL
  01f87	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  01f8c	83 c4 08	 add	 esp, 8

; 797  : 		this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  01f8f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01f95	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f98	89 81 bc d0 0f
	00		 mov	 DWORD PTR [ecx+1036476], eax
$LN2@ProcState_:

; 798  : 	}
; 799  : }

  01f9e	5f		 pop	 edi
  01f9f	5e		 pop	 esi
  01fa0	5b		 pop	 ebx
  01fa1	8b e5		 mov	 esp, ebp
  01fa3	5d		 pop	 ebp
  01fa4	c3		 ret	 0
?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ProcState_NOTIFY_1
_TEXT	ENDS
PUBLIC	?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ	; CCrywolfStateTimeInfo::GetLeftTime
PUBLIC	?GetCrywolfState@CCrywolf@@QAEHXZ		; CCrywolf::GetCrywolfState
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iTime$229904 = -8					; size = 4
_this$ = -4						; size = 4
?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ PROC		; CCrywolf::ProcState_NOTIFY_2
; _this$ = ecx

; 802  : {

  01fb0	55		 push	 ebp
  01fb1	8b ec		 mov	 ebp, esp
  01fb3	83 ec 48	 sub	 esp, 72			; 00000048H
  01fb6	53		 push	 ebx
  01fb7	56		 push	 esi
  01fb8	57		 push	 edi
  01fb9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 803  : 	if ( (GetTickCount() - this->m_dwCrywolfNotifyMsgStartTick) > 70000 )

  01fbc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  01fc2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fc5	2b 81 bc d0 0f
	00		 sub	 eax, DWORD PTR [ecx+1036476]
  01fcb	3d 70 11 01 00	 cmp	 eax, 70000		; 00011170H
  01fd0	0f 86 ab 00 00
	00		 jbe	 $LN4@ProcState_@2

; 804  : 	{
; 805  : 		int iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60;

  01fd6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fd9	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  01fde	6b c0 2c	 imul	 eax, 44			; 0000002cH
  01fe1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fe4	8d 8c 01 88 cf
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1036168]
  01feb	e8 00 00 00 00	 call	 ?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::GetLeftTime
  01ff0	99		 cdq
  01ff1	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  01ff6	f7 f9		 idiv	 ecx
  01ff8	99		 cdq
  01ff9	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  01ffe	f7 f9		 idiv	 ecx
  02000	89 45 f8	 mov	 DWORD PTR _iTime$229904[ebp], eax

; 806  : 
; 807  : 		if ( iTime == 0 )

  02003	83 7d f8 00	 cmp	 DWORD PTR _iTime$229904[ebp], 0
  02007	75 48		 jne	 SHORT $LN2@ProcState_@2

; 808  : 		{
; 809  : 			iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 );

  02009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0200c	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  02011	6b c0 2c	 imul	 eax, 44			; 0000002cH
  02014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02017	8d 8c 01 88 cf
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1036168]
  0201e	e8 00 00 00 00	 call	 ?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::GetLeftTime
  02023	99		 cdq
  02024	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  02029	f7 f9		 idiv	 ecx
  0202b	89 45 f8	 mov	 DWORD PTR _iTime$229904[ebp], eax

; 810  : 
; 811  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 236)), iTime);

  0202e	8b 45 f8	 mov	 eax, DWORD PTR _iTime$229904[ebp]
  02031	50		 push	 eax
  02032	68 ec 0c 00 00	 push	 3308			; 00000cecH
  02037	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0203c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02041	50		 push	 eax
  02042	68 00 00 00 00	 push	 OFFSET _UTIL
  02047	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  0204c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 812  : 		}
; 813  : 		else

  0204f	eb 21		 jmp	 SHORT $LN1@ProcState_@2
$LN2@ProcState_@2:

; 814  : 		{
; 815  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 237)), iTime);

  02051	8b 45 f8	 mov	 eax, DWORD PTR _iTime$229904[ebp]
  02054	50		 push	 eax
  02055	68 ed 0c 00 00	 push	 3309			; 00000cedH
  0205a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0205f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02064	50		 push	 eax
  02065	68 00 00 00 00	 push	 OFFSET _UTIL
  0206a	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  0206f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ProcState_@2:

; 816  : 		}
; 817  : 
; 818  : 		this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  02072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0207b	89 81 bc d0 0f
	00		 mov	 DWORD PTR [ecx+1036476], eax
$LN4@ProcState_@2:

; 819  : 	}
; 820  : }

  02081	5f		 pop	 edi
  02082	5e		 pop	 esi
  02083	5b		 pop	 ebx
  02084	8b e5		 mov	 esp, ebp
  02086	5d		 pop	 ebp
  02087	c3		 ret	 0
?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ProcState_NOTIFY_2
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolfstatetimeinfo.h
_TEXT	ENDS
;	COMDAT ?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ
_TEXT	SEGMENT
_iLeftTime$218951 = -8					; size = 4
_this$ = -4						; size = 4
?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ PROC		; CCrywolfStateTimeInfo::GetLeftTime, COMDAT
; _this$ = ecx

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		if ( this->CheckContinuanceTime() )

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckContinuanceTime
  00014	85 c0		 test	 eax, eax
  00016	74 25		 je	 SHORT $LN2@GetLeftTim

; 119  : 		{
; 120  : 			int iLeftTime = this->m_iContinuanceTime - (GetTickCount() - this->m_dwAppliedTickCount);

  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	2b 41 28	 sub	 eax, DWORD PTR [ecx+40]
  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  0002a	2b c8		 sub	 ecx, eax
  0002c	89 4d f8	 mov	 DWORD PTR _iLeftTime$218951[ebp], ecx

; 121  : 
; 122  : 			if ( iLeftTime < 0 )

  0002f	79 07		 jns	 SHORT $LN1@GetLeftTim

; 123  : 			{
; 124  : 				iLeftTime = 0;

  00031	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iLeftTime$218951[ebp], 0
$LN1@GetLeftTim:

; 125  : 			}
; 126  : 
; 127  : 			return iLeftTime;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _iLeftTime$218951[ebp]
  0003b	eb 02		 jmp	 SHORT $LN3@GetLeftTim
$LN2@GetLeftTim:

; 128  : 		}
; 129  : 
; 130  : 		return 0;

  0003d	33 c0		 xor	 eax, eax
$LN3@GetLeftTim:

; 131  : 	}

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ ENDP		; CCrywolfStateTimeInfo::GetLeftTime
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.h
_TEXT	ENDS
;	COMDAT ?GetCrywolfState@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCrywolfState@CCrywolf@@QAEHXZ PROC			; CCrywolf::GetCrywolfState, COMDAT
; _this$ = ecx

; 91   : 	int GetCrywolfState(){return this->m_iCrywolfState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 3c b9 0f
	00		 mov	 eax, DWORD PTR [eax+1030460]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetCrywolfState@CCrywolf@@QAEHXZ ENDP			; CCrywolf::GetCrywolfState
_TEXT	ENDS
PUBLIC	?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStatueAndAltarInfo
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
_TEXT	SEGMENT
_iTime$229911 = -8					; size = 4
_this$ = -4						; size = 4
?ProcState_READY@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_READY
; _this$ = ecx

; 823  : {

  02090	55		 push	 ebp
  02091	8b ec		 mov	 ebp, esp
  02093	83 ec 48	 sub	 esp, 72			; 00000048H
  02096	53		 push	 ebx
  02097	56		 push	 esi
  02098	57		 push	 edi
  02099	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 824  : 	this->NotifyCrywolfStatueAndAltarInfo();

  0209c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0209f	e8 00 00 00 00	 call	 ?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStatueAndAltarInfo

; 825  : 
; 826  : 	if ( (GetTickCount() - this->m_dwCrywolfNotifyMsgStartTick) > 70000 )

  020a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  020aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020ad	2b 81 bc d0 0f
	00		 sub	 eax, DWORD PTR [ecx+1036476]
  020b3	3d 70 11 01 00	 cmp	 eax, 70000		; 00011170H
  020b8	0f 86 ab 00 00
	00		 jbe	 $LN4@ProcState_@3

; 827  : 	{
; 828  : 		int iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60;

  020be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020c1	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  020c6	6b c0 2c	 imul	 eax, 44			; 0000002cH
  020c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020cc	8d 8c 01 88 cf
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1036168]
  020d3	e8 00 00 00 00	 call	 ?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::GetLeftTime
  020d8	99		 cdq
  020d9	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  020de	f7 f9		 idiv	 ecx
  020e0	99		 cdq
  020e1	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  020e6	f7 f9		 idiv	 ecx
  020e8	89 45 f8	 mov	 DWORD PTR _iTime$229911[ebp], eax

; 829  : 
; 830  : 		if ( iTime == 0 )

  020eb	83 7d f8 00	 cmp	 DWORD PTR _iTime$229911[ebp], 0
  020ef	75 48		 jne	 SHORT $LN2@ProcState_@3

; 831  : 		{
; 832  : 			iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 );

  020f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020f4	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  020f9	6b c0 2c	 imul	 eax, 44			; 0000002cH
  020fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020ff	8d 8c 01 88 cf
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1036168]
  02106	e8 00 00 00 00	 call	 ?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::GetLeftTime
  0210b	99		 cdq
  0210c	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  02111	f7 f9		 idiv	 ecx
  02113	89 45 f8	 mov	 DWORD PTR _iTime$229911[ebp], eax

; 833  : 
; 834  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 238)), iTime);

  02116	8b 45 f8	 mov	 eax, DWORD PTR _iTime$229911[ebp]
  02119	50		 push	 eax
  0211a	68 ee 0c 00 00	 push	 3310			; 00000ceeH
  0211f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02124	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02129	50		 push	 eax
  0212a	68 00 00 00 00	 push	 OFFSET _UTIL
  0212f	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  02134	83 c4 0c	 add	 esp, 12			; 0000000cH

; 835  : 		}
; 836  : 		else

  02137	eb 21		 jmp	 SHORT $LN1@ProcState_@3
$LN2@ProcState_@3:

; 837  : 		{
; 838  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 239)), iTime);

  02139	8b 45 f8	 mov	 eax, DWORD PTR _iTime$229911[ebp]
  0213c	50		 push	 eax
  0213d	68 ef 0c 00 00	 push	 3311			; 00000cefH
  02142	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02147	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0214c	50		 push	 eax
  0214d	68 00 00 00 00	 push	 OFFSET _UTIL
  02152	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  02157	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ProcState_@3:

; 839  : 		}
; 840  : 
; 841  : 		this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  0215a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02160	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02163	89 81 bc d0 0f
	00		 mov	 DWORD PTR [ecx+1036476], eax
$LN4@ProcState_@3:

; 842  : 	}
; 843  : }

  02169	5f		 pop	 edi
  0216a	5e		 pop	 esi
  0216b	5b		 pop	 ebx
  0216c	8b e5		 mov	 esp, ebp
  0216e	5d		 pop	 ebp
  0216f	c3		 ret	 0
?ProcState_READY@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_READY
_TEXT	ENDS
PUBLIC	??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@ ; `string'
PUBLIC	??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@ ; `string'
PUBLIC	?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfStateLeftTime
PUBLIC	?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfBossMonsterInfo
;	COMDAT ??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@
CONST	SEGMENT
??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@ DB '['
	DB	' Crywolf ][MVP] Start Monster Rush !!!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@
CONST	SEGMENT
??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@ DB '['
	DB	' Crywolf ][MVP] Barlgars TurnUp !!!', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv154 = -72						; size = 4
_this$ = -4						; size = 4
?ProcState_START@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_START
; _this$ = ecx

; 846  : {

  02170	55		 push	 ebp
  02171	8b ec		 mov	 ebp, esp
  02173	83 ec 48	 sub	 esp, 72			; 00000048H
  02176	53		 push	 ebx
  02177	56		 push	 esi
  02178	57		 push	 edi
  02179	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 847  : 	if ( g_CrywolfNPC_Altar.GetContractedAltarCount() == 0 )

  0217c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  02181	e8 00 00 00 00	 call	 ?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ ; CCrywolfAltar::GetContractedAltarCount
  02186	85 c0		 test	 eax, eax
  02188	75 38		 jne	 SHORT $LN5@ProcState_@4

; 848  : 	{
; 849  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 240)));

  0218a	68 f0 0c 00 00	 push	 3312			; 00000cf0H
  0218f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02194	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02199	50		 push	 eax
  0219a	6a 02		 push	 2
  0219c	68 00 00 00 00	 push	 OFFSET _UTIL
  021a1	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  021a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 850  : 
; 851  : 		this->SetOccupationState(1);

  021a9	6a 01		 push	 1
  021ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021ae	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolf@@QAEXH@Z ; CCrywolf::SetOccupationState

; 852  : 		this->SetState(CRYWOLF_STATE_END);

  021b3	6a 05		 push	 5
  021b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021b8	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState

; 853  : 
; 854  : 		return;

  021bd	e9 8b 01 00 00	 jmp	 $LN6@ProcState_@4
$LN5@ProcState_@4:

; 855  : 	}
; 856  : 
; 857  : 	this->NotifyCrywolfStatueAndAltarInfo();

  021c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021c5	e8 00 00 00 00	 call	 ?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStatueAndAltarInfo

; 858  : 	this->NotifyCrywolfBossMonsterInfo();

  021ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021cd	e8 00 00 00 00	 call	 ?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfBossMonsterInfo

; 859  : 	this->NotifyCrywolfStateLeftTime();

  021d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021d5	e8 00 00 00 00	 call	 ?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStateLeftTime

; 860  : 
; 861  : 	if ( (GetTickCount() - this->m_dwCrywolfStartProcTick) > (this->m_iBossTurnUpTime * 1000) &&
; 862  : 		 !this->m_bTurnUpBoss )

  021da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  021e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021e3	2b 81 c0 d0 0f
	00		 sub	 eax, DWORD PTR [ecx+1036480]
  021e9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  021ec	8b 8a 2c d1 0f
	00		 mov	 ecx, DWORD PTR [edx+1036588]
  021f2	69 c9 e8 03 00
	00		 imul	 ecx, 1000		; 000003e8H
  021f8	3b c1		 cmp	 eax, ecx
  021fa	76 4e		 jbe	 SHORT $LN4@ProcState_@4
  021fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021ff	83 b8 c4 d0 0f
	00 00		 cmp	 DWORD PTR [eax+1036484], 0
  02206	75 42		 jne	 SHORT $LN4@ProcState_@4

; 863  : 	{
; 864  : 		this->m_bTurnUpBoss = TRUE;

  02208	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0220b	c7 80 c4 d0 0f
	00 01 00 00 00	 mov	 DWORD PTR [eax+1036484], 1

; 865  : 		
; 866  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 241)));

  02215	68 f1 0c 00 00	 push	 3313			; 00000cf1H
  0221a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0221f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02224	50		 push	 eax
  02225	6a 02		 push	 2
  02227	68 00 00 00 00	 push	 OFFSET _UTIL
  0222c	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  02231	83 c4 0c	 add	 esp, 12			; 0000000cH

; 867  : 
; 868  : 		this->TurnUpBoss();

  02234	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02237	e8 00 00 00 00	 call	 ?TurnUpBoss@CCrywolf@@QAEXXZ ; CCrywolf::TurnUpBoss

; 869  : 		
; 870  : 		LogAddTD("[ Crywolf ][MVP] Barlgars TurnUp !!!");

  0223c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@
  02241	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02247	83 c4 04	 add	 esp, 4
$LN4@ProcState_@4:

; 871  : 	}
; 872  : 
; 873  : 	if ( (GetTickCount() - this->m_dwCrywolfStartProcTick) > (this->m_iMonsterGroupChangeAITime * 1000) &&
; 874  : 		 !this->m_bChangeAI )

  0224a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02250	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02253	2b 81 c0 d0 0f
	00		 sub	 eax, DWORD PTR [ecx+1036480]
  02259	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0225c	8b 8a 20 d1 0f
	00		 mov	 ecx, DWORD PTR [edx+1036576]
  02262	69 c9 e8 03 00
	00		 imul	 ecx, 1000		; 000003e8H
  02268	3b c1		 cmp	 eax, ecx
  0226a	76 50		 jbe	 SHORT $LN3@ProcState_@4
  0226c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0226f	83 b8 c8 d0 0f
	00 00		 cmp	 DWORD PTR [eax+1036488], 0
  02276	75 44		 jne	 SHORT $LN3@ProcState_@4

; 875  : 	{
; 876  : 		this->m_bChangeAI = TRUE;

  02278	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0227b	c7 80 c8 d0 0f
	00 01 00 00 00	 mov	 DWORD PTR [eax+1036488], 1

; 877  : 		
; 878  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 242)));

  02285	68 f2 0c 00 00	 push	 3314			; 00000cf2H
  0228a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0228f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02294	50		 push	 eax
  02295	6a 02		 push	 2
  02297	68 00 00 00 00	 push	 OFFSET _UTIL
  0229c	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  022a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 879  : 
; 880  : 		this->ChangeAI(2);

  022a4	6a 02		 push	 2
  022a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  022a9	e8 00 00 00 00	 call	 ?ChangeAI@CCrywolf@@QAEXH@Z ; CCrywolf::ChangeAI

; 881  : 		
; 882  : 		LogAddTD("[ Crywolf ][MVP] Start Monster Rush !!!");

  022ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@
  022b3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  022b9	83 c4 04	 add	 esp, 4
$LN3@ProcState_@4:

; 883  : 	}
; 884  : 
; 885  : 	if ( this->m_bTurnUpBoss != FALSE && CHECK_LIMIT(this->m_iBossIndex, OBJ_MAXMONSTER) != FALSE )

  022bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  022bf	83 b8 c4 d0 0f
	00 00		 cmp	 DWORD PTR [eax+1036484], 0
  022c6	0f 84 81 00 00
	00		 je	 $LN6@ProcState_@4
  022cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  022cf	83 b8 24 d1 0f
	00 00		 cmp	 DWORD PTR [eax+1036580], 0
  022d6	7d 09		 jge	 SHORT $LN8@ProcState_@4
  022d8	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv154[ebp], 0
  022df	eb 15		 jmp	 SHORT $LN9@ProcState_@4
$LN8@ProcState_@4:
  022e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  022e4	33 d2		 xor	 edx, edx
  022e6	81 b9 24 d1 0f
	00 c7 32 00 00	 cmp	 DWORD PTR [ecx+1036580], 12999 ; 000032c7H
  022f0	0f 9e c2	 setle	 dl
  022f3	89 55 b8	 mov	 DWORD PTR tv154[ebp], edx
$LN9@ProcState_@4:
  022f6	83 7d b8 00	 cmp	 DWORD PTR tv154[ebp], 0
  022fa	74 51		 je	 SHORT $LN6@ProcState_@4

; 886  : 	{
; 887  : 		if ( gObj[this->m_iBossIndex].Live == FALSE )

  022fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  022ff	8b 88 24 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036580]
  02305	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0230b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02311	0f b6 44 0a 6a	 movzx	 eax, BYTE PTR [edx+ecx+106]
  02316	85 c0		 test	 eax, eax
  02318	75 33		 jne	 SHORT $LN6@ProcState_@4

; 888  : 		{
; 889  : 			UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 243)));	

  0231a	68 f3 0c 00 00	 push	 3315			; 00000cf3H
  0231f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02324	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02329	50		 push	 eax
  0232a	6a 02		 push	 2
  0232c	68 00 00 00 00	 push	 OFFSET _UTIL
  02331	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  02336	83 c4 0c	 add	 esp, 12			; 0000000cH

; 890  : 
; 891  : 			this->SetOccupationState(0);

  02339	6a 00		 push	 0
  0233b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0233e	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolf@@QAEXH@Z ; CCrywolf::SetOccupationState

; 892  : 			this->SetState(CRYWOLF_STATE_END);

  02343	6a 05		 push	 5
  02345	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02348	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN6@ProcState_@4:

; 893  : 		}
; 894  : 	}
; 895  : }

  0234d	5f		 pop	 edi
  0234e	5e		 pop	 esi
  0234f	5b		 pop	 ebx
  02350	8b e5		 mov	 esp, ebp
  02352	5d		 pop	 ebp
  02353	c3		 ret	 0
?ProcState_START@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_START
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ProcState_END@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_END
; _this$ = ecx

; 898  : {

  02360	55		 push	 ebp
  02361	8b ec		 mov	 ebp, esp
  02363	83 ec 44	 sub	 esp, 68			; 00000044H
  02366	53		 push	 ebx
  02367	56		 push	 esi
  02368	57		 push	 edi
  02369	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 899  : 	return;
; 900  : }

  0236c	5f		 pop	 edi
  0236d	5e		 pop	 esi
  0236e	5b		 pop	 ebx
  0236f	8b e5		 mov	 esp, ebp
  02371	5d		 pop	 ebp
  02372	c3		 ret	 0
?ProcState_END@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_END
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ PROC		; CCrywolf::ProcState_ENDCYCLE
; _this$ = ecx

; 903  : {

  02380	55		 push	 ebp
  02381	8b ec		 mov	 ebp, esp
  02383	83 ec 44	 sub	 esp, 68			; 00000044H
  02386	53		 push	 ebx
  02387	56		 push	 esi
  02388	57		 push	 edi
  02389	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 904  : 	return;
; 905  : }

  0238c	5f		 pop	 edi
  0238d	5e		 pop	 esi
  0238e	5b		 pop	 ebx
  0238f	8b e5		 mov	 esp, ebp
  02391	5d		 pop	 ebp
  02392	c3		 ret	 0
?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ProcState_ENDCYCLE
_TEXT	ENDS
PUBLIC	??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@ ; `string'
EXTRN	?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z:PROC ; CCrywolfUtil::SendCrywolfUserAnyData
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
;	COMDAT ??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@
CONST	SEGMENT
??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@ DB '[ Cr'
	DB	'ywolf ] SetState - StateInfo : Occupation/%d, State/%d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pMsg$ = -12						; size = 6
_this$ = -4						; size = 4
?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfCurrentState
; _this$ = ecx

; 908  : {

  023a0	55		 push	 ebp
  023a1	8b ec		 mov	 ebp, esp
  023a3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  023a6	53		 push	 ebx
  023a7	56		 push	 esi
  023a8	57		 push	 edi
  023a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 909  : 	PMSG_ANS_CRYWOLF_INFO pMsg = {0};

  023ac	c6 45 f4 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  023b0	33 c0		 xor	 eax, eax
  023b2	89 45 f5	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  023b5	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 910  : 
; 911  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x00, sizeof(pMsg));

  023b8	6a 06		 push	 6
  023ba	6a 00		 push	 0
  023bc	68 bd 00 00 00	 push	 189			; 000000bdH
  023c1	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  023c4	50		 push	 eax
  023c5	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  023ca	83 c4 10	 add	 esp, 16			; 00000010H

; 912  : 	pMsg.btOccupationState = this->GetOccupationState();

  023cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  023d0	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  023d5	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 913  : 	pMsg.btCrywolfState = this->GetCrywolfState();

  023d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  023db	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  023e0	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 914  : 
; 915  : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  023e3	6a 06		 push	 6
  023e5	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  023e8	50		 push	 eax
  023e9	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  023ee	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 916  : 
; 917  : 	LogAddC(3, "[ Crywolf ] SetState - StateInfo : Occupation/%d, State/%d",
; 918  : 		pMsg.btOccupationState, pMsg.btCrywolfState);

  023f3	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$[ebp+5]
  023f7	50		 push	 eax
  023f8	0f b6 4d f8	 movzx	 ecx, BYTE PTR _pMsg$[ebp+4]
  023fc	51		 push	 ecx
  023fd	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@
  02402	6a 03		 push	 3
  02404	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0240a	83 c4 10	 add	 esp, 16			; 00000010H

; 919  : }

  0240d	5f		 pop	 edi
  0240e	5e		 pop	 esi
  0240f	5b		 pop	 ebx
  02410	8b e5		 mov	 esp, ebp
  02412	5d		 pop	 ebp
  02413	c3		 ret	 0
?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfCurrentState
_TEXT	ENDS
PUBLIC	??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@ ; `string'
;	COMDAT ??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@
CONST	SEGMENT
??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@ DB '['
	DB	' Crywolf ] War LeftTime - (%02d:%02d)', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pMsg$ = -12						; size = 6
_this$ = -4						; size = 4
?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfStateLeftTime
; _this$ = ecx

; 922  : {

  02420	55		 push	 ebp
  02421	8b ec		 mov	 ebp, esp
  02423	83 ec 4c	 sub	 esp, 76			; 0000004cH
  02426	53		 push	 ebx
  02427	56		 push	 esi
  02428	57		 push	 edi
  02429	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 923  : 	static DWORD dwTickCount = 0;
; 924  : 
; 925  : 	if ( (GetTickCount() - dwTickCount) < 20000 )

  0242c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02432	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA
  02438	3d 20 4e 00 00	 cmp	 eax, 20000		; 00004e20H
  0243d	73 05		 jae	 SHORT $LN1@NotifyCryw

; 926  : 		return;

  0243f	e9 b8 00 00 00	 jmp	 $LN2@NotifyCryw
$LN1@NotifyCryw:

; 927  : 
; 928  : 	dwTickCount = GetTickCount();

  02444	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0244a	a3 00 00 00 00	 mov	 DWORD PTR ?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA, eax

; 929  : 
; 930  : 	PMSG_ANS_CRYWOLF_LEFTTIME pMsg = {0};

  0244f	c6 45 f4 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  02453	33 c0		 xor	 eax, eax
  02455	89 45 f5	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  02458	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 931  : 
; 932  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x04, sizeof(pMsg));

  0245b	6a 06		 push	 6
  0245d	6a 04		 push	 4
  0245f	68 bd 00 00 00	 push	 189			; 000000bdH
  02464	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02467	50		 push	 eax
  02468	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0246d	83 c4 10	 add	 esp, 16			; 00000010H

; 933  : 	pMsg.btHour = ( ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60 ) / 24;

  02470	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02473	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  02478	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0247b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0247e	8d 8c 01 88 cf
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1036168]
  02485	e8 00 00 00 00	 call	 ?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::GetLeftTime
  0248a	99		 cdq
  0248b	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  02490	f7 f9		 idiv	 ecx
  02492	99		 cdq
  02493	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  02498	f7 f9		 idiv	 ecx
  0249a	99		 cdq
  0249b	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  024a0	f7 f9		 idiv	 ecx
  024a2	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 934  : 	pMsg.btMinute = ( ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60 );

  024a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  024a8	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  024ad	6b c0 2c	 imul	 eax, 44			; 0000002cH
  024b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  024b3	8d 8c 01 88 cf
	0f 00		 lea	 ecx, DWORD PTR [ecx+eax+1036168]
  024ba	e8 00 00 00 00	 call	 ?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::GetLeftTime
  024bf	99		 cdq
  024c0	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  024c5	f7 f9		 idiv	 ecx
  024c7	99		 cdq
  024c8	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  024cd	f7 f9		 idiv	 ecx
  024cf	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 935  : 
; 936  : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  024d2	6a 06		 push	 6
  024d4	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  024d7	50		 push	 eax
  024d8	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  024dd	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 937  : 
; 938  : 	LogAddC(3, "[ Crywolf ] War LeftTime - (%02d:%02d)", pMsg.btHour, pMsg.btMinute);

  024e2	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$[ebp+5]
  024e6	50		 push	 eax
  024e7	0f b6 4d f8	 movzx	 ecx, BYTE PTR _pMsg$[ebp+4]
  024eb	51		 push	 ecx
  024ec	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@
  024f1	6a 03		 push	 3
  024f3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  024f9	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@NotifyCryw:

; 939  : }

  024fc	5f		 pop	 edi
  024fd	5e		 pop	 esi
  024fe	5b		 pop	 ebx
  024ff	8b e5		 mov	 esp, ebp
  02501	5d		 pop	 ebp
  02502	c3		 ret	 0
?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfStateLeftTime
_TEXT	ENDS
PUBLIC	??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@ ; `string'
PUBLIC	?GetHPPercentage@CCrywolfShield@@QAEHXZ		; CCrywolfShield::GetHPPercentage
PUBLIC	__$ArrayPad$
EXTRN	?GetAltarState@CCrywolfAltar@@QAEHH@Z:PROC	; CCrywolfAltar::GetAltarState
EXTRN	?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z:PROC ; CCrywolfAltar::GetAltarRemainContractCount
EXTRN	?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A:BYTE	; g_CrywolfNPC_Statue
;	COMDAT ??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@
CONST	SEGMENT
??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@ DB '['
	DB	' Crywolf ][Altar Info] Altar(%d) Contractor: [%s][%s] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@
CONST	SEGMENT
??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@ DB '['
	DB	' Crywolf ][Statue Info] Statue HP : %d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iUserIndex$229961 = -32				; size = 4
_iAltar$229957 = -28					; size = 4
_pMsg$ = -24						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfStatueAndAltarInfo
; _this$ = ecx

; 942  : {

  02510	55		 push	 ebp
  02511	8b ec		 mov	 ebp, esp
  02513	83 ec 60	 sub	 esp, 96			; 00000060H
  02516	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0251b	33 c5		 xor	 eax, ebp
  0251d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02520	53		 push	 ebx
  02521	56		 push	 esi
  02522	57		 push	 edi
  02523	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 943  : 	static DWORD dwTickCount = 0;
; 944  : 
; 945  : 	if ( (GetTickCount() - dwTickCount) < 2000 )

  02526	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0252c	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA
  02532	3d d0 07 00 00	 cmp	 eax, 2000		; 000007d0H
  02537	73 05		 jae	 SHORT $LN5@NotifyCryw@2

; 946  : 		return;

  02539	e9 9e 01 00 00	 jmp	 $LN6@NotifyCryw@2
$LN5@NotifyCryw@2:

; 947  : 
; 948  : 	dwTickCount = GetTickCount();

  0253e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02544	a3 00 00 00 00	 mov	 DWORD PTR ?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA, eax

; 949  : 
; 950  : 	PMSG_ANS_CRYWOLF_STATUE_ALTAR_INFO pMsg;
; 951  : 	
; 952  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x02, sizeof(pMsg));

  02549	6a 10		 push	 16			; 00000010H
  0254b	6a 02		 push	 2
  0254d	68 bd 00 00 00	 push	 189			; 000000bdH
  02552	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02555	50		 push	 eax
  02556	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0255b	83 c4 10	 add	 esp, 16			; 00000010H

; 953  : 
; 954  : 	pMsg.iCrywolfStatueHP = g_CrywolfNPC_Statue.m_Shield.GetHPPercentage();

  0255e	b9 04 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A+4
  02563	e8 00 00 00 00	 call	 ?GetHPPercentage@CCrywolfShield@@QAEHXZ ; CCrywolfShield::GetHPPercentage
  02568	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 955  : 	pMsg.btAltarState1 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(205);

  0256b	68 cd 00 00 00	 push	 205			; 000000cdH
  02570	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  02575	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount
  0257a	88 45 f0	 mov	 BYTE PTR _pMsg$[ebp+8], al

; 956  : 	pMsg.btAltarState2 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(206);

  0257d	68 ce 00 00 00	 push	 206			; 000000ceH
  02582	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  02587	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount
  0258c	88 45 f1	 mov	 BYTE PTR _pMsg$[ebp+9], al

; 957  : 	pMsg.btAltarState3 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(207);

  0258f	68 cf 00 00 00	 push	 207			; 000000cfH
  02594	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  02599	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount
  0259e	88 45 f2	 mov	 BYTE PTR _pMsg$[ebp+10], al

; 958  : 	pMsg.btAltarState4 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(208);

  025a1	68 d0 00 00 00	 push	 208			; 000000d0H
  025a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  025ab	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount
  025b0	88 45 f3	 mov	 BYTE PTR _pMsg$[ebp+11], al

; 959  : 	pMsg.btAltarState5 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(209);

  025b3	68 d1 00 00 00	 push	 209			; 000000d1H
  025b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  025bd	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount
  025c2	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+12], al

; 960  : 	pMsg.btAltarState1 |= g_CrywolfNPC_Altar.GetAltarState(205) << 4;

  025c5	68 cd 00 00 00	 push	 205			; 000000cdH
  025ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  025cf	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  025d4	c1 e0 04	 shl	 eax, 4
  025d7	0f b6 4d f0	 movzx	 ecx, BYTE PTR _pMsg$[ebp+8]
  025db	0b c8		 or	 ecx, eax
  025dd	88 4d f0	 mov	 BYTE PTR _pMsg$[ebp+8], cl

; 961  : 	pMsg.btAltarState2 |= g_CrywolfNPC_Altar.GetAltarState(206) << 4;

  025e0	68 ce 00 00 00	 push	 206			; 000000ceH
  025e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  025ea	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  025ef	c1 e0 04	 shl	 eax, 4
  025f2	0f b6 4d f1	 movzx	 ecx, BYTE PTR _pMsg$[ebp+9]
  025f6	0b c8		 or	 ecx, eax
  025f8	88 4d f1	 mov	 BYTE PTR _pMsg$[ebp+9], cl

; 962  : 	pMsg.btAltarState3 |= g_CrywolfNPC_Altar.GetAltarState(207) << 4;

  025fb	68 cf 00 00 00	 push	 207			; 000000cfH
  02600	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  02605	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  0260a	c1 e0 04	 shl	 eax, 4
  0260d	0f b6 4d f2	 movzx	 ecx, BYTE PTR _pMsg$[ebp+10]
  02611	0b c8		 or	 ecx, eax
  02613	88 4d f2	 mov	 BYTE PTR _pMsg$[ebp+10], cl

; 963  : 	pMsg.btAltarState4 |= g_CrywolfNPC_Altar.GetAltarState(208) << 4;

  02616	68 d0 00 00 00	 push	 208			; 000000d0H
  0261b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  02620	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  02625	c1 e0 04	 shl	 eax, 4
  02628	0f b6 4d f3	 movzx	 ecx, BYTE PTR _pMsg$[ebp+11]
  0262c	0b c8		 or	 ecx, eax
  0262e	88 4d f3	 mov	 BYTE PTR _pMsg$[ebp+11], cl

; 964  : 	pMsg.btAltarState5 |= g_CrywolfNPC_Altar.GetAltarState(209) << 4;

  02631	68 d1 00 00 00	 push	 209			; 000000d1H
  02636	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0263b	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  02640	c1 e0 04	 shl	 eax, 4
  02643	0f b6 4d f4	 movzx	 ecx, BYTE PTR _pMsg$[ebp+12]
  02647	0b c8		 or	 ecx, eax
  02649	88 4d f4	 mov	 BYTE PTR _pMsg$[ebp+12], cl

; 965  : 
; 966  : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  0264c	6a 10		 push	 16			; 00000010H
  0264e	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02651	50		 push	 eax
  02652	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  02657	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 967  : 
; 968  : 	LogAddTD("[ Crywolf ][Statue Info] Statue HP : %d",
; 969  : 		pMsg.iCrywolfStatueHP);

  0265c	8b 45 ec	 mov	 eax, DWORD PTR _pMsg$[ebp+4]
  0265f	50		 push	 eax
  02660	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@
  02665	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0266b	83 c4 08	 add	 esp, 8

; 970  : 
; 971  : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar ++ )

  0266e	c7 45 e4 cd 00
	00 00		 mov	 DWORD PTR _iAltar$229957[ebp], 205 ; 000000cdH
  02675	eb 09		 jmp	 SHORT $LN4@NotifyCryw@2
$LN3@NotifyCryw@2:
  02677	8b 45 e4	 mov	 eax, DWORD PTR _iAltar$229957[ebp]
  0267a	83 c0 01	 add	 eax, 1
  0267d	89 45 e4	 mov	 DWORD PTR _iAltar$229957[ebp], eax
$LN4@NotifyCryw@2:
  02680	81 7d e4 d1 00
	00 00		 cmp	 DWORD PTR _iAltar$229957[ebp], 209 ; 000000d1H
  02687	7f 53		 jg	 SHORT $LN6@NotifyCryw@2

; 972  : 	{
; 973  : 		int iUserIndex = g_CrywolfNPC_Altar.GetAltarUserIndex(iAltar);

  02689	8b 45 e4	 mov	 eax, DWORD PTR _iAltar$229957[ebp]
  0268c	50		 push	 eax
  0268d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  02692	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex
  02697	89 45 e0	 mov	 DWORD PTR _iUserIndex$229961[ebp], eax

; 974  : 
; 975  : 		if ( iUserIndex != -1 )

  0269a	83 7d e0 ff	 cmp	 DWORD PTR _iUserIndex$229961[ebp], -1
  0269e	74 3a		 je	 SHORT $LN1@NotifyCryw@2

; 976  : 		{
; 977  : 			LogAddTD("[ Crywolf ][Altar Info] Altar(%d) Contractor: [%s][%s] ",	iAltar, gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);

  026a0	8b 45 e0	 mov	 eax, DWORD PTR _iUserIndex$229961[ebp]
  026a3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  026a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  026af	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  026b3	52		 push	 edx
  026b4	8b 45 e0	 mov	 eax, DWORD PTR _iUserIndex$229961[ebp]
  026b7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  026bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  026c3	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  026c7	52		 push	 edx
  026c8	8b 45 e4	 mov	 eax, DWORD PTR _iAltar$229957[ebp]
  026cb	50		 push	 eax
  026cc	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@
  026d1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  026d7	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@NotifyCryw@2:

; 978  : 		}
; 979  : 	}

  026da	eb 9b		 jmp	 SHORT $LN3@NotifyCryw@2
$LN6@NotifyCryw@2:

; 980  : }

  026dc	5f		 pop	 edi
  026dd	5e		 pop	 esi
  026de	5b		 pop	 ebx
  026df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  026e2	33 cd		 xor	 ecx, ebp
  026e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  026e9	8b e5		 mov	 esp, ebp
  026eb	5d		 pop	 ebp
  026ec	c3		 ret	 0
?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfStatueAndAltarInfo
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolfstatue.h
_TEXT	ENDS
;	COMDAT ?GetHPPercentage@CCrywolfShield@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHPPercentage@CCrywolfShield@@QAEHXZ PROC		; CCrywolfShield::GetHPPercentage, COMDAT
; _this$ = ecx

; 33   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 34   : 		if ( this->m_iShieldMaxHP )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 11		 je	 SHORT $LN1@GetHPPerce

; 35   : 		{
; 36   : 			return (this->m_iShieldHP * 100) / this->m_iShieldMaxHP;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001a	6b c0 64	 imul	 eax, 100		; 00000064H
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	99		 cdq
  00021	f7 39		 idiv	 DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN2@GetHPPerce
$LN1@GetHPPerce:

; 37   : 		}
; 38   : 
; 39   : 		return 0;

  00025	33 c0		 xor	 eax, eax
$LN2@GetHPPerce:

; 40   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?GetHPPercentage@CCrywolfShield@@QAEHXZ ENDP		; CCrywolfShield::GetHPPercentage
_TEXT	ENDS
PUBLIC	??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@ ; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
CONST	SEGMENT
??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@ DB '['
	DB	' Crywolf ][Boss Monster Info] Balgars HP:%d, DarkElf:%d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv91 = -92						; size = 4
_i$229982 = -24						; size = 4
_pMsg$ = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfBossMonsterInfo
; _this$ = ecx

; 990  : {

  026f0	55		 push	 ebp
  026f1	8b ec		 mov	 ebp, esp
  026f3	83 ec 5c	 sub	 esp, 92			; 0000005cH
  026f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  026fb	33 c5		 xor	 eax, ebp
  026fd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02700	53		 push	 ebx
  02701	56		 push	 esi
  02702	57		 push	 edi
  02703	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 991  : 	static DWORD dwTickCount = 0;
; 992  : 
; 993  : 	if ( (GetTickCount() - dwTickCount) < 5000 )

  02706	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0270c	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA
  02712	3d 88 13 00 00	 cmp	 eax, 5000		; 00001388H
  02717	73 05		 jae	 SHORT $LN11@NotifyCryw@3

; 994  : 		return;

  02719	e9 39 01 00 00	 jmp	 $LN12@NotifyCryw@3
$LN11@NotifyCryw@3:

; 995  : 
; 996  : 	dwTickCount = GetTickCount();

  0271e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  02724	a3 00 00 00 00	 mov	 DWORD PTR ?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA, eax

; 997  : 
; 998  : 	PMSG_ANS_CRYWOLF_BOSSMONSTER_INFO pMsg;
; 999  : 
; 1000 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x05, sizeof(pMsg));

  02729	6a 0c		 push	 12			; 0000000cH
  0272b	6a 05		 push	 5
  0272d	68 bd 00 00 00	 push	 189			; 000000bdH
  02732	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02735	50		 push	 eax
  02736	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0273b	83 c4 10	 add	 esp, 16			; 00000010H

; 1001 : 	pMsg.iMonster1HP = -1;

  0273e	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+4], -1

; 1002 : 	pMsg.btMonster2 = 0;

  02745	c6 45 f4 00	 mov	 BYTE PTR _pMsg$[ebp+8], 0

; 1003 : 
; 1004 : 	for ( int i=0;i<OBJ_MAXMONSTER;i++)

  02749	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$229982[ebp], 0
  02750	eb 09		 jmp	 SHORT $LN10@NotifyCryw@3
$LN9@NotifyCryw@3:
  02752	8b 45 e8	 mov	 eax, DWORD PTR _i$229982[ebp]
  02755	83 c0 01	 add	 eax, 1
  02758	89 45 e8	 mov	 DWORD PTR _i$229982[ebp], eax
$LN10@NotifyCryw@3:
  0275b	81 7d e8 c8 32
	00 00		 cmp	 DWORD PTR _i$229982[ebp], 13000 ; 000032c8H
  02762	0f 8d c8 00 00
	00		 jge	 $LN8@NotifyCryw@3

; 1005 : 	{
; 1006 : 		if (!gObjIsConnected(i))

  02768	8b 45 e8	 mov	 eax, DWORD PTR _i$229982[ebp]
  0276b	50		 push	 eax
  0276c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  02771	83 c4 04	 add	 esp, 4
  02774	85 c0		 test	 eax, eax
  02776	75 02		 jne	 SHORT $LN7@NotifyCryw@3

; 1007 : 			continue;

  02778	eb d8		 jmp	 SHORT $LN9@NotifyCryw@3
$LN7@NotifyCryw@3:

; 1008 : 
; 1009 : 		if ( gObj[i].MapNumber != MAP_INDEX_CRYWOLF_FIRSTZONE )

  0277a	8b 45 e8	 mov	 eax, DWORD PTR _i$229982[ebp]
  0277d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02783	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02789	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02791	83 fa 22	 cmp	 edx, 34			; 00000022H
  02794	74 02		 je	 SHORT $LN6@NotifyCryw@3

; 1010 : 			continue;

  02796	eb ba		 jmp	 SHORT $LN9@NotifyCryw@3
$LN6@NotifyCryw@3:

; 1011 : 
; 1012 : 		if ( !gObj[i].Live )

  02798	8b 45 e8	 mov	 eax, DWORD PTR _i$229982[ebp]
  0279b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  027a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  027a7	0f b6 54 01 6a	 movzx	 edx, BYTE PTR [ecx+eax+106]
  027ac	85 d2		 test	 edx, edx
  027ae	75 02		 jne	 SHORT $LN5@NotifyCryw@3

; 1013 : 			continue;

  027b0	eb a0		 jmp	 SHORT $LN9@NotifyCryw@3
$LN5@NotifyCryw@3:

; 1014 : 
; 1015 : 		switch ( gObj[i].Class )

  027b2	8b 45 e8	 mov	 eax, DWORD PTR _i$229982[ebp]
  027b5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  027bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  027c1	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  027c9	89 55 a4	 mov	 DWORD PTR tv91[ebp], edx
  027cc	81 7d a4 54 01
	00 00		 cmp	 DWORD PTR tv91[ebp], 340 ; 00000154H
  027d3	74 0b		 je	 SHORT $LN2@NotifyCryw@3
  027d5	81 7d a4 5d 01
	00 00		 cmp	 DWORD PTR tv91[ebp], 349 ; 0000015dH
  027dc	74 0c		 je	 SHORT $LN1@NotifyCryw@3
  027de	eb 4b		 jmp	 SHORT $LN3@NotifyCryw@3
$LN2@NotifyCryw@3:

; 1016 : 		{
; 1017 : 			case 340:
; 1018 : 				pMsg.btMonster2++;

  027e0	8a 45 f4	 mov	 al, BYTE PTR _pMsg$[ebp+8]
  027e3	04 01		 add	 al, 1
  027e5	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+8], al

; 1019 : 				break;

  027e8	eb 41		 jmp	 SHORT $LN3@NotifyCryw@3
$LN1@NotifyCryw@3:

; 1020 : 			case 349:
; 1021 : 				pMsg.iMonster1HP = (int)((gObj[i].Life * 100.0f) / (gObj[i].MaxLife + 1.0f));

  027ea	8b 45 e8	 mov	 eax, DWORD PTR _i$229982[ebp]
  027ed	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  027f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  027f9	d9 84 01 fc 00
	00 00		 fld	 DWORD PTR [ecx+eax+252]
  02800	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  02806	8b 55 e8	 mov	 edx, DWORD PTR _i$229982[ebp]
  02809	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0280f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02814	d9 84 10 00 01
	00 00		 fld	 DWORD PTR [eax+edx+256]
  0281b	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000
  02821	de f9		 fdivp	 ST(1), ST(0)
  02823	e8 00 00 00 00	 call	 __ftol2_sse
  02828	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+4], eax
$LN3@NotifyCryw@3:

; 1022 : 				break;
; 1023 : 		}
; 1024 : 	}

  0282b	e9 22 ff ff ff	 jmp	 $LN9@NotifyCryw@3
$LN8@NotifyCryw@3:

; 1025 : 
; 1026 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  02830	6a 0c		 push	 12			; 0000000cH
  02832	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02835	50		 push	 eax
  02836	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  0283b	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 1027 : 
; 1028 : 	LogAddTD("[ Crywolf ][Boss Monster Info] Balgars HP:%d, DarkElf:%d", pMsg.iMonster1HP, pMsg.btMonster2);

  02840	0f b6 45 f4	 movzx	 eax, BYTE PTR _pMsg$[ebp+8]
  02844	50		 push	 eax
  02845	8b 4d f0	 mov	 ecx, DWORD PTR _pMsg$[ebp+4]
  02848	51		 push	 ecx
  02849	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@
  0284e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02854	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@NotifyCryw@3:

; 1029 : }

  02857	5f		 pop	 edi
  02858	5e		 pop	 esi
  02859	5b		 pop	 ebx
  0285a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0285d	33 cd		 xor	 ecx, ebp
  0285f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02864	8b e5		 mov	 esp, ebp
  02866	5d		 pop	 ebp
  02867	c3		 ret	 0
?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfBossMonsterInfo
_TEXT	ENDS
PUBLIC	?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z ; CCrywolf::NotifyCrywolfStageEffectOnOff
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pMsg$ = -12						; size = 5
_this$ = -4						; size = 4
_btOnOff$ = 8						; size = 1
?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z PROC	; CCrywolf::NotifyCrywolfStageEffectOnOff
; _this$ = ecx

; 1038 : {

  02870	55		 push	 ebp
  02871	8b ec		 mov	 ebp, esp
  02873	83 ec 4c	 sub	 esp, 76			; 0000004cH
  02876	53		 push	 ebx
  02877	56		 push	 esi
  02878	57		 push	 edi
  02879	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1039 : 	PMSG_ANS_CRYWOLF_STAGE_EFFECT_ONOFF pMsg = {0};

  0287c	c6 45 f4 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  02880	33 c0		 xor	 eax, eax
  02882	89 45 f5	 mov	 DWORD PTR _pMsg$[ebp+1], eax

; 1040 : 
; 1041 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x06, sizeof(pMsg));

  02885	6a 05		 push	 5
  02887	6a 06		 push	 6
  02889	68 bd 00 00 00	 push	 189			; 000000bdH
  0288e	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02891	50		 push	 eax
  02892	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  02897	83 c4 10	 add	 esp, 16			; 00000010H

; 1042 : 	pMsg.btStageEffectOnOff = btOnOff;

  0289a	8a 45 08	 mov	 al, BYTE PTR _btOnOff$[ebp]
  0289d	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 1043 : 
; 1044 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  028a0	6a 05		 push	 5
  028a2	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  028a5	50		 push	 eax
  028a6	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  028ab	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 1045 : }

  028b0	5f		 pop	 edi
  028b1	5e		 pop	 esi
  028b2	5b		 pop	 ebx
  028b3	8b e5		 mov	 esp, ebp
  028b5	5d		 pop	 ebp
  028b6	c2 04 00	 ret	 4
?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z ENDP	; CCrywolf::NotifyCrywolfStageEffectOnOff
_TEXT	ENDS
PUBLIC	??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@ ; `string'
PUBLIC	?GiveRewardExp@CCrywolf@@QAEXHH@Z		; CCrywolf::GiveRewardExp
PUBLIC	?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z	; CCrywolf::CalcGettingRewardExp
PUBLIC	?CalcGettingRank@CCrywolf@@QAEHH@Z		; CCrywolf::CalcGettingRank
PUBLIC	__$ArrayPad$
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
;	COMDAT ??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@
CONST	SEGMENT
??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@ DB '['
	DB	' Crywolf ][Personal Rank & Exp.] [%s][%s] Score(%d) Rank(%d) '
	DB	'Exp(%d)', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$230029 = -24						; size = 4
_pMsg$ = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfPersonalRank
; _this$ = ecx

; 1055 : {

  028c0	55		 push	 ebp
  028c1	8b ec		 mov	 ebp, esp
  028c3	83 ec 58	 sub	 esp, 88			; 00000058H
  028c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  028cb	33 c5		 xor	 eax, ebp
  028cd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  028d0	53		 push	 ebx
  028d1	56		 push	 esi
  028d2	57		 push	 edi
  028d3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1056 : 	PMSG_ANS_CRYWOLF_PERSONAL_RANK pMsg;
; 1057 : 
; 1058 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x07, sizeof(pMsg));

  028d6	6a 0c		 push	 12			; 0000000cH
  028d8	6a 07		 push	 7
  028da	68 bd 00 00 00	 push	 189			; 000000bdH
  028df	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  028e2	50		 push	 eax
  028e3	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  028e8	83 c4 10	 add	 esp, 16			; 00000010H

; 1059 : 	pMsg.btRank = 0;

  028eb	c6 45 f0 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 1060 : 
; 1061 : 	for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  028ef	c7 45 e8 b0 36
	00 00		 mov	 DWORD PTR _i$230029[ebp], 14000 ; 000036b0H
  028f6	eb 09		 jmp	 SHORT $LN4@NotifyCryw@4
$LN3@NotifyCryw@4:
  028f8	8b 45 e8	 mov	 eax, DWORD PTR _i$230029[ebp]
  028fb	83 c0 01	 add	 eax, 1
  028fe	89 45 e8	 mov	 DWORD PTR _i$230029[ebp], eax
$LN4@NotifyCryw@4:
  02901	81 7d e8 98 3a
	00 00		 cmp	 DWORD PTR _i$230029[ebp], 15000 ; 00003a98H
  02908	0f 8d 35 01 00
	00		 jge	 $LN5@NotifyCryw@4

; 1062 : 	{
; 1063 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  0290e	8b 45 e8	 mov	 eax, DWORD PTR _i$230029[ebp]
  02911	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02917	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0291d	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  02922	0f 85 16 01 00
	00		 jne	 $LN1@NotifyCryw@4
  02928	8b 45 e8	 mov	 eax, DWORD PTR _i$230029[ebp]
  0292b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02931	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02937	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0293c	83 fa 01	 cmp	 edx, 1
  0293f	0f 85 f9 00 00
	00		 jne	 $LN1@NotifyCryw@4
  02945	8b 45 e8	 mov	 eax, DWORD PTR _i$230029[ebp]
  02948	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0294e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02954	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  0295c	83 fa 22	 cmp	 edx, 34			; 00000022H
  0295f	0f 85 d9 00 00
	00		 jne	 $LN1@NotifyCryw@4

; 1064 : 		{
; 1065 : 			pMsg.btRank = this->CalcGettingRank(i);

  02965	8b 45 e8	 mov	 eax, DWORD PTR _i$230029[ebp]
  02968	50		 push	 eax
  02969	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0296c	e8 00 00 00 00	 call	 ?CalcGettingRank@CCrywolf@@QAEHH@Z ; CCrywolf::CalcGettingRank
  02971	88 45 f0	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 1066 : 			pMsg.iGettingExp = this->CalcGettingRewardExp(i, pMsg.btRank);

  02974	0f b6 45 f0	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  02978	50		 push	 eax
  02979	8b 4d e8	 mov	 ecx, DWORD PTR _i$230029[ebp]
  0297c	51		 push	 ecx
  0297d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02980	e8 00 00 00 00	 call	 ?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z ; CCrywolf::CalcGettingRewardExp
  02985	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+8], eax

; 1067 : 
; 1068 : 			this->GiveRewardExp(i, pMsg.iGettingExp);

  02988	8b 45 f4	 mov	 eax, DWORD PTR _pMsg$[ebp+8]
  0298b	50		 push	 eax
  0298c	8b 4d e8	 mov	 ecx, DWORD PTR _i$230029[ebp]
  0298f	51		 push	 ecx
  02990	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02993	e8 00 00 00 00	 call	 ?GiveRewardExp@CCrywolf@@QAEXHH@Z ; CCrywolf::GiveRewardExp

; 1069 : 
; 1070 : 			MsgOutput(i, lMsg.Get(MSGGET(12, 244)), pMsg.btRank);

  02998	0f b6 45 f0	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  0299c	50		 push	 eax
  0299d	68 f4 0c 00 00	 push	 3316			; 00000cf4H
  029a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  029a7	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  029ac	50		 push	 eax
  029ad	8b 4d e8	 mov	 ecx, DWORD PTR _i$230029[ebp]
  029b0	51		 push	 ecx
  029b1	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  029b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1071 : 			MsgOutput(i, lMsg.Get(MSGGET(12, 245)), pMsg.iGettingExp);

  029b9	8b 45 f4	 mov	 eax, DWORD PTR _pMsg$[ebp+8]
  029bc	50		 push	 eax
  029bd	68 f5 0c 00 00	 push	 3317			; 00000cf5H
  029c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  029c7	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  029cc	50		 push	 eax
  029cd	8b 4d e8	 mov	 ecx, DWORD PTR _i$230029[ebp]
  029d0	51		 push	 ecx
  029d1	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  029d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1072 : 
; 1073 : 			LogAddTD("[ Crywolf ][Personal Rank & Exp.] [%s][%s] Score(%d) Rank(%d) Exp(%d)", gObj[i].AccountID, gObj[i].Name, gObj[i].m_iCrywolfMVPScore, pMsg.btRank, pMsg.iGettingExp);

  029d9	8b 45 f4	 mov	 eax, DWORD PTR _pMsg$[ebp+8]
  029dc	50		 push	 eax
  029dd	0f b6 4d f0	 movzx	 ecx, BYTE PTR _pMsg$[ebp+4]
  029e1	51		 push	 ecx
  029e2	8b 55 e8	 mov	 edx, DWORD PTR _i$230029[ebp]
  029e5	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  029eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  029f0	8b 8c 10 c0 1f
	00 00		 mov	 ecx, DWORD PTR [eax+edx+8128]
  029f7	51		 push	 ecx
  029f8	8b 55 e8	 mov	 edx, DWORD PTR _i$230029[ebp]
  029fb	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  02a01	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02a06	8d 4c 10 77	 lea	 ecx, DWORD PTR [eax+edx+119]
  02a0a	51		 push	 ecx
  02a0b	8b 55 e8	 mov	 edx, DWORD PTR _i$230029[ebp]
  02a0e	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  02a14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02a19	8d 4c 10 6c	 lea	 ecx, DWORD PTR [eax+edx+108]
  02a1d	51		 push	 ecx
  02a1e	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@
  02a23	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02a29	83 c4 18	 add	 esp, 24			; 00000018H

; 1074 : 			DataSend(i, (LPBYTE)&pMsg, sizeof(pMsg));

  02a2c	6a 0c		 push	 12			; 0000000cH
  02a2e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  02a31	50		 push	 eax
  02a32	8b 4d e8	 mov	 ecx, DWORD PTR _i$230029[ebp]
  02a35	51		 push	 ecx
  02a36	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02a3b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@NotifyCryw@4:

; 1075 : 		}
; 1076 : 	}

  02a3e	e9 b5 fe ff ff	 jmp	 $LN3@NotifyCryw@4
$LN5@NotifyCryw@4:

; 1077 : }

  02a43	5f		 pop	 edi
  02a44	5e		 pop	 esi
  02a45	5b		 pop	 ebx
  02a46	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02a49	33 cd		 xor	 ecx, ebp
  02a4b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02a50	8b e5		 mov	 esp, ebp
  02a52	5d		 pop	 ebp
  02a53	c3		 ret	 0
?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfPersonalRank
_TEXT	ENDS
PUBLIC	??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::~set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
PUBLIC	?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z	; CCrywolf::MakeRewardForHeroListTop5
PUBLIC	??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator*
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator!=
PUBLIC	?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
PUBLIC	?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin
PUBLIC	??$insert@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::insert<OBJECTSTRUCT *>
PUBLIC	??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
PUBLIC	__$ArrayPad$
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	' Crywolf ][Hero List] [%s][%s] Score(%d) Ranking(%d)', 00H ; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ$0
__ehfuncinfo$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T232012 = -6148					; size = 4
$T232013 = -6144					; size = 8
$T232014 = -6136					; size = 4
$T232015 = -6132					; size = 4
_lpHeroObj$230907 = -6064				; size = 4
_j$230885 = -6060					; size = 4
__Itor$ = -6056						; size = 4
_i$230614 = -6052					; size = 4
_HeroSet$ = -6048					; size = 16
_lpMsgBody$ = -6032					; size = 4
_lpMsg$ = -6028						; size = 4
_iHeroCount$ = -6024					; size = 4
_cBUFFER$ = -6020					; size = 6000
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ PROC		; CCrywolf::NotifyCrywolfHeroList
; _this$ = ecx

; 1094 : {

  02a60	55		 push	 ebp
  02a61	8b ec		 mov	 ebp, esp
  02a63	6a ff		 push	 -1
  02a65	68 00 00 00 00	 push	 __ehhandler$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
  02a6a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  02a70	50		 push	 eax
  02a71	b8 f8 17 00 00	 mov	 eax, 6136		; 000017f8H
  02a76	e8 00 00 00 00	 call	 __chkstk
  02a7b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  02a80	33 c5		 xor	 eax, ebp
  02a82	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02a85	53		 push	 ebx
  02a86	56		 push	 esi
  02a87	57		 push	 edi
  02a88	50		 push	 eax
  02a89	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  02a8c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  02a92	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1095 : 
; 1096 : 	char cBUFFER[6000];
; 1097 : 	int iHeroCount = 0;

  02a95	c7 85 78 e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _iHeroCount$[ebp], 0

; 1098 : 	memset(cBUFFER, 0, sizeof(cBUFFER));

  02a9f	68 70 17 00 00	 push	 6000			; 00001770H
  02aa4	6a 00		 push	 0
  02aa6	8d 85 7c e8 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  02aac	50		 push	 eax
  02aad	e8 00 00 00 00	 call	 _memset
  02ab2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1099 : 	PMSG_ANS_CRYWOLF_HERO_LIST_INFO_COUNT * lpMsg = (PMSG_ANS_CRYWOLF_HERO_LIST_INFO_COUNT *)cBUFFER;

  02ab5	8d 85 7c e8 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  02abb	89 85 74 e8 ff
	ff		 mov	 DWORD PTR _lpMsg$[ebp], eax

; 1100 : 	PMSG_ANS_CRYWOLF_HERO_LIST_INFO * lpMsgBody = (PMSG_ANS_CRYWOLF_HERO_LIST_INFO *)(cBUFFER + 5);

  02ac1	8d 85 81 e8 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp+5]
  02ac7	89 85 70 e8 ff
	ff		 mov	 DWORD PTR _lpMsgBody$[ebp], eax

; 1101 : 	std::set<LPOBJ,CCrywolfScoreSort> HeroSet;

  02acd	8d 8d 60 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  02ad3	e8 00 00 00 00	 call	 ??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
  02ad8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1102 : 	
; 1103 : 	for (int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  02adf	c7 85 5c e8 ff
	ff b0 36 00 00	 mov	 DWORD PTR _i$230614[ebp], 14000 ; 000036b0H
  02ae9	eb 0f		 jmp	 SHORT $LN9@NotifyCryw@5
$LN8@NotifyCryw@5:
  02aeb	8b 85 5c e8 ff
	ff		 mov	 eax, DWORD PTR _i$230614[ebp]
  02af1	83 c0 01	 add	 eax, 1
  02af4	89 85 5c e8 ff
	ff		 mov	 DWORD PTR _i$230614[ebp], eax
$LN9@NotifyCryw@5:
  02afa	81 bd 5c e8 ff
	ff 98 3a 00 00	 cmp	 DWORD PTR _i$230614[ebp], 15000 ; 00003a98H
  02b04	0f 8d 8a 00 00
	00		 jge	 $LN7@NotifyCryw@5

; 1104 : 	{
; 1105 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  02b0a	8b 85 5c e8 ff
	ff		 mov	 eax, DWORD PTR _i$230614[ebp]
  02b10	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b16	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b1c	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  02b21	75 6c		 jne	 SHORT $LN6@NotifyCryw@5
  02b23	8b 85 5c e8 ff
	ff		 mov	 eax, DWORD PTR _i$230614[ebp]
  02b29	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b2f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b35	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  02b3a	83 fa 01	 cmp	 edx, 1
  02b3d	75 50		 jne	 SHORT $LN6@NotifyCryw@5
  02b3f	8b 85 5c e8 ff
	ff		 mov	 eax, DWORD PTR _i$230614[ebp]
  02b45	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b4b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b51	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  02b59	83 fa 22	 cmp	 edx, 34			; 00000022H
  02b5c	75 31		 jne	 SHORT $LN6@NotifyCryw@5

; 1106 : 		{
; 1107 : 			HeroSet.insert(&gObj[i]);

  02b5e	8b 85 5c e8 ff
	ff		 mov	 eax, DWORD PTR _i$230614[ebp]
  02b64	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b6a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b70	89 85 fc e7 ff
	ff		 mov	 DWORD PTR $T232012[ebp], eax
  02b76	8d 8d fc e7 ff
	ff		 lea	 ecx, DWORD PTR $T232012[ebp]
  02b7c	51		 push	 ecx
  02b7d	8d 95 00 e8 ff
	ff		 lea	 edx, DWORD PTR $T232013[ebp]
  02b83	52		 push	 edx
  02b84	8d 8d 60 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  02b8a	e8 00 00 00 00	 call	 ??$insert@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::insert<OBJECTSTRUCT *>
$LN6@NotifyCryw@5:

; 1108 : 		}
; 1109 : 	}

  02b8f	e9 57 ff ff ff	 jmp	 $LN8@NotifyCryw@5
$LN7@NotifyCryw@5:

; 1110 : 
; 1111 : 	std::set<LPOBJ, CCrywolfScoreSort>::iterator _Itor = HeroSet.begin();

  02b94	8d 85 58 e8 ff
	ff		 lea	 eax, DWORD PTR __Itor$[ebp]
  02b9a	50		 push	 eax
  02b9b	8d 8d 60 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  02ba1	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin

; 1112 : 	
; 1113 : 	for(int j=0;j<5&& _Itor != HeroSet.end();j++, _Itor++)

  02ba6	c7 85 54 e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$230885[ebp], 0
  02bb0	eb 23		 jmp	 SHORT $LN5@NotifyCryw@5
$LN4@NotifyCryw@5:
  02bb2	8b 85 54 e8 ff
	ff		 mov	 eax, DWORD PTR _j$230885[ebp]
  02bb8	83 c0 01	 add	 eax, 1
  02bbb	89 85 54 e8 ff
	ff		 mov	 DWORD PTR _j$230885[ebp], eax
  02bc1	6a 00		 push	 0
  02bc3	8d 8d 08 e8 ff
	ff		 lea	 ecx, DWORD PTR $T232014[ebp]
  02bc9	51		 push	 ecx
  02bca	8d 8d 58 e8 ff
	ff		 lea	 ecx, DWORD PTR __Itor$[ebp]
  02bd0	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
$LN5@NotifyCryw@5:
  02bd5	83 bd 54 e8 ff
	ff 05		 cmp	 DWORD PTR _j$230885[ebp], 5
  02bdc	0f 8d 3a 01 00
	00		 jge	 $LN3@NotifyCryw@5
  02be2	8d 85 0c e8 ff
	ff		 lea	 eax, DWORD PTR $T232015[ebp]
  02be8	50		 push	 eax
  02be9	8d 8d 60 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  02bef	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end
  02bf4	50		 push	 eax
  02bf5	8d 8d 58 e8 ff
	ff		 lea	 ecx, DWORD PTR __Itor$[ebp]
  02bfb	e8 00 00 00 00	 call	 ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator!=
  02c00	0f b6 c8	 movzx	 ecx, al
  02c03	85 c9		 test	 ecx, ecx
  02c05	0f 84 11 01 00
	00		 je	 $LN3@NotifyCryw@5

; 1114 : 	{
; 1115 : 		LPOBJ lpHeroObj = (*(_Itor));

  02c0b	8d 8d 58 e8 ff
	ff		 lea	 ecx, DWORD PTR __Itor$[ebp]
  02c11	e8 00 00 00 00	 call	 ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator*
  02c16	8b 00		 mov	 eax, DWORD PTR [eax]
  02c18	89 85 50 e8 ff
	ff		 mov	 DWORD PTR _lpHeroObj$230907[ebp], eax

; 1116 : 
; 1117 : 		lpMsgBody[j].iRank = iHeroCount;

  02c1e	8b 85 54 e8 ff
	ff		 mov	 eax, DWORD PTR _j$230885[ebp]
  02c24	6b c0 14	 imul	 eax, 20			; 00000014H
  02c27	8b 8d 70 e8 ff
	ff		 mov	 ecx, DWORD PTR _lpMsgBody$[ebp]
  02c2d	8a 95 78 e8 ff
	ff		 mov	 dl, BYTE PTR _iHeroCount$[ebp]
  02c33	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 1118 : 		lpMsgBody[j].btHeroClass = lpHeroObj->Class;

  02c36	8b 85 54 e8 ff
	ff		 mov	 eax, DWORD PTR _j$230885[ebp]
  02c3c	6b c0 14	 imul	 eax, 20			; 00000014H
  02c3f	8b 8d 70 e8 ff
	ff		 mov	 ecx, DWORD PTR _lpMsgBody$[ebp]
  02c45	8b 95 50 e8 ff
	ff		 mov	 edx, DWORD PTR _lpHeroObj$230907[ebp]
  02c4b	8a 92 b8 00 00
	00		 mov	 dl, BYTE PTR [edx+184]
  02c51	88 54 01 10	 mov	 BYTE PTR [ecx+eax+16], dl

; 1119 : 		lpMsgBody[j].iHeroScore = lpHeroObj->m_iCrywolfMVPScore;

  02c55	8b 85 54 e8 ff
	ff		 mov	 eax, DWORD PTR _j$230885[ebp]
  02c5b	6b c0 14	 imul	 eax, 20			; 00000014H
  02c5e	8b 8d 70 e8 ff
	ff		 mov	 ecx, DWORD PTR _lpMsgBody$[ebp]
  02c64	8b 95 50 e8 ff
	ff		 mov	 edx, DWORD PTR _lpHeroObj$230907[ebp]
  02c6a	8b 92 c0 1f 00
	00		 mov	 edx, DWORD PTR [edx+8128]
  02c70	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1120 : 		memcpy(lpMsgBody[j].szHeroName, lpHeroObj->Name, MAX_ACCOUNT_LEN);

  02c74	6a 0a		 push	 10			; 0000000aH
  02c76	8b 85 50 e8 ff
	ff		 mov	 eax, DWORD PTR _lpHeroObj$230907[ebp]
  02c7c	83 c0 77	 add	 eax, 119		; 00000077H
  02c7f	50		 push	 eax
  02c80	8b 8d 54 e8 ff
	ff		 mov	 ecx, DWORD PTR _j$230885[ebp]
  02c86	6b c9 14	 imul	 ecx, 20			; 00000014H
  02c89	8b 95 70 e8 ff
	ff		 mov	 edx, DWORD PTR _lpMsgBody$[ebp]
  02c8f	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  02c93	50		 push	 eax
  02c94	e8 00 00 00 00	 call	 _memcpy
  02c99	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1121 : 		iHeroCount++;

  02c9c	8b 85 78 e8 ff
	ff		 mov	 eax, DWORD PTR _iHeroCount$[ebp]
  02ca2	83 c0 01	 add	 eax, 1
  02ca5	89 85 78 e8 ff
	ff		 mov	 DWORD PTR _iHeroCount$[ebp], eax

; 1122 : 
; 1123 : 		LogAddTD("[ Crywolf ][Hero List] [%s][%s] Score(%d) Ranking(%d)",
; 1124 : 			lpHeroObj->AccountID, lpHeroObj->Name, lpHeroObj->m_iCrywolfMVPScore, iHeroCount);

  02cab	8b 85 78 e8 ff
	ff		 mov	 eax, DWORD PTR _iHeroCount$[ebp]
  02cb1	50		 push	 eax
  02cb2	8b 8d 50 e8 ff
	ff		 mov	 ecx, DWORD PTR _lpHeroObj$230907[ebp]
  02cb8	8b 91 c0 1f 00
	00		 mov	 edx, DWORD PTR [ecx+8128]
  02cbe	52		 push	 edx
  02cbf	8b 85 50 e8 ff
	ff		 mov	 eax, DWORD PTR _lpHeroObj$230907[ebp]
  02cc5	83 c0 77	 add	 eax, 119		; 00000077H
  02cc8	50		 push	 eax
  02cc9	8b 8d 50 e8 ff
	ff		 mov	 ecx, DWORD PTR _lpHeroObj$230907[ebp]
  02ccf	83 c1 6c	 add	 ecx, 108		; 0000006cH
  02cd2	51		 push	 ecx
  02cd3	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  02cd8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02cde	83 c4 14	 add	 esp, 20			; 00000014H

; 1125 : 
; 1126 : 		if ( this->GetOccupationState() != 1 )

  02ce1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02ce4	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  02ce9	83 f8 01	 cmp	 eax, 1
  02cec	74 29		 je	 SHORT $LN2@NotifyCryw@5

; 1127 : 		{
; 1128 : 			if ( lpMsgBody[j].iRank <= 5 )

  02cee	8b 85 54 e8 ff
	ff		 mov	 eax, DWORD PTR _j$230885[ebp]
  02cf4	6b c0 14	 imul	 eax, 20			; 00000014H
  02cf7	8b 8d 70 e8 ff
	ff		 mov	 ecx, DWORD PTR _lpMsgBody$[ebp]
  02cfd	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  02d01	83 fa 05	 cmp	 edx, 5
  02d04	7f 11		 jg	 SHORT $LN2@NotifyCryw@5

; 1129 : 			{
; 1130 : 				this->MakeRewardForHeroListTop5(lpHeroObj->m_Index);

  02d06	8b 85 50 e8 ff
	ff		 mov	 eax, DWORD PTR _lpHeroObj$230907[ebp]
  02d0c	8b 08		 mov	 ecx, DWORD PTR [eax]
  02d0e	51		 push	 ecx
  02d0f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02d12	e8 00 00 00 00	 call	 ?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z ; CCrywolf::MakeRewardForHeroListTop5
$LN2@NotifyCryw@5:

; 1131 : 			}
; 1132 : 		}
; 1133 : 	}

  02d17	e9 96 fe ff ff	 jmp	 $LN4@NotifyCryw@5
$LN3@NotifyCryw@5:

; 1134 : 
; 1135 : 	lpMsg->btCount = iHeroCount;

  02d1c	8b 85 74 e8 ff
	ff		 mov	 eax, DWORD PTR _lpMsg$[ebp]
  02d22	8a 8d 78 e8 ff
	ff		 mov	 cl, BYTE PTR _iHeroCount$[ebp]
  02d28	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 1136 : 
; 1137 : 	PHeadSubSetB((LPBYTE)lpMsg, 0xBD, 0x08, iHeroCount*sizeof(PMSG_ANS_CRYWOLF_HERO_LIST_INFO) + sizeof(PMSG_ANS_CRYWOLF_HERO_LIST_INFO_COUNT));

  02d2b	8b 85 78 e8 ff
	ff		 mov	 eax, DWORD PTR _iHeroCount$[ebp]
  02d31	6b c0 14	 imul	 eax, 20			; 00000014H
  02d34	83 c0 05	 add	 eax, 5
  02d37	50		 push	 eax
  02d38	6a 08		 push	 8
  02d3a	68 bd 00 00 00	 push	 189			; 000000bdH
  02d3f	8b 8d 74 e8 ff
	ff		 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  02d45	51		 push	 ecx
  02d46	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  02d4b	83 c4 10	 add	 esp, 16			; 00000010H

; 1138 : 
; 1139 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)lpMsg, lpMsg->h.size);

  02d4e	8b 85 74 e8 ff
	ff		 mov	 eax, DWORD PTR _lpMsg$[ebp]
  02d54	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  02d58	51		 push	 ecx
  02d59	8b 95 74 e8 ff
	ff		 mov	 edx, DWORD PTR _lpMsg$[ebp]
  02d5f	52		 push	 edx
  02d60	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  02d65	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 1140 : }

  02d6a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02d71	8d 8d 60 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  02d77	e8 00 00 00 00	 call	 ??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
  02d7c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02d7f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  02d86	59		 pop	 ecx
  02d87	5f		 pop	 edi
  02d88	5e		 pop	 esi
  02d89	5b		 pop	 ebx
  02d8a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02d8d	33 cd		 xor	 ecx, ebp
  02d8f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02d94	8b e5		 mov	 esp, ebp
  02d96	5d		 pop	 ebp
  02d97	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ$0:
  00052	8d 8d 60 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  00058	e9 00 00 00 00	 jmp	 ??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
__ehhandler$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ:
  0005d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00061	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00064	8b 8a f8 e7 ff
	ff		 mov	 ecx, DWORD PTR [edx-6152]
  0006a	33 c8		 xor	 ecx, eax
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00074	33 c8		 xor	 ecx, eax
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
  00080	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ ENDP		; CCrywolf::NotifyCrywolfHeroList
PUBLIC	??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::~set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::~set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	?OperateGmCommand@CCrywolf@@QAEXHH@Z		; CCrywolf::OperateGmCommand
;	COMDAT ??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@ DB '['
	DB	' Crywolf ][Use GM Command] [%s][%s] Command : %d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv82 = -72						; size = 4
_this$ = -4						; size = 4
_iUserIndex$ = 8					; size = 4
_iCommand$ = 12						; size = 4
?OperateGmCommand@CCrywolf@@QAEXHH@Z PROC		; CCrywolf::OperateGmCommand
; _this$ = ecx

; 1143 : {

  02da0	55		 push	 ebp
  02da1	8b ec		 mov	 ebp, esp
  02da3	83 ec 48	 sub	 esp, 72			; 00000048H
  02da6	53		 push	 ebx
  02da7	56		 push	 esi
  02da8	57		 push	 edi
  02da9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1144 : 	if ( !gObjIsConnected(iUserIndex))

  02dac	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  02daf	50		 push	 eax
  02db0	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  02db5	83 c4 04	 add	 esp, 4
  02db8	85 c0		 test	 eax, eax
  02dba	75 05		 jne	 SHORT $LN10@OperateGmC

; 1145 : 		return;

  02dbc	e9 c9 00 00 00	 jmp	 $LN11@OperateGmC
$LN10@OperateGmC:

; 1146 : 
; 1147 : 	if ( (gObj[iUserIndex].Authority & 0x02) != 0x02 )

  02dc1	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  02dc4	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02dca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02dd0	8b 94 01 0c 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax+524]
  02dd7	83 e2 02	 and	 edx, 2
  02dda	75 05		 jne	 SHORT $LN9@OperateGmC

; 1148 : 		return;

  02ddc	e9 a9 00 00 00	 jmp	 $LN11@OperateGmC
$LN9@OperateGmC:

; 1149 : 
; 1150 : 	LogAddTD("[ Crywolf ][Use GM Command] [%s][%s] Command : %d", gObj[iUserIndex].AccountID, gObj[iUserIndex].Name, iCommand);

  02de1	8b 45 0c	 mov	 eax, DWORD PTR _iCommand$[ebp]
  02de4	50		 push	 eax
  02de5	8b 4d 08	 mov	 ecx, DWORD PTR _iUserIndex$[ebp]
  02de8	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  02dee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02df4	8d 44 0a 77	 lea	 eax, DWORD PTR [edx+ecx+119]
  02df8	50		 push	 eax
  02df9	8b 4d 08	 mov	 ecx, DWORD PTR _iUserIndex$[ebp]
  02dfc	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  02e02	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02e08	8d 44 0a 6c	 lea	 eax, DWORD PTR [edx+ecx+108]
  02e0c	50		 push	 eax
  02e0d	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@
  02e12	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02e18	83 c4 10	 add	 esp, 16			; 00000010H

; 1151 : 
; 1152 : 	switch ( iCommand )

  02e1b	8b 45 0c	 mov	 eax, DWORD PTR _iCommand$[ebp]
  02e1e	89 45 b8	 mov	 DWORD PTR tv82[ebp], eax
  02e21	83 7d b8 03	 cmp	 DWORD PTR tv82[ebp], 3
  02e25	77 63		 ja	 SHORT $LN11@OperateGmC
  02e27	8b 4d b8	 mov	 ecx, DWORD PTR tv82[ebp]
  02e2a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@OperateGmC[ecx*4]
$LN6@OperateGmC:

; 1153 : 	{
; 1154 : 		case 0:
; 1155 : 			this->SetState(CRYWOLF_STATE_NOTIFY_2);

  02e31	6a 02		 push	 2
  02e33	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e36	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState

; 1156 : 			break;

  02e3b	eb 4d		 jmp	 SHORT $LN11@OperateGmC
$LN5@OperateGmC:

; 1157 : 
; 1158 : 		case 1:
; 1159 : 			this->SetState(CRYWOLF_STATE_READY);

  02e3d	6a 03		 push	 3
  02e3f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e42	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState

; 1160 : 			break;

  02e47	eb 41		 jmp	 SHORT $LN11@OperateGmC
$LN4@OperateGmC:

; 1161 : 
; 1162 : 		case 2:
; 1163 : 			if ( this->GetCrywolfState() == CRYWOLF_STATE_READY )

  02e49	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e4c	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  02e51	83 f8 03	 cmp	 eax, 3
  02e54	75 0c		 jne	 SHORT $LN3@OperateGmC

; 1164 : 			{
; 1165 : 				this->SetState(CRYWOLF_STATE_START);

  02e56	6a 04		 push	 4
  02e58	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e5b	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState

; 1166 : 			}
; 1167 : 			else

  02e60	eb 1c		 jmp	 SHORT $LN2@OperateGmC
$LN3@OperateGmC:

; 1168 : 			{
; 1169 : 				MsgOutput(iUserIndex, lMsg.Get(MSGGET(12, 246)));

  02e62	68 f6 0c 00 00	 push	 3318			; 00000cf6H
  02e67	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02e6c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02e71	50		 push	 eax
  02e72	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  02e75	50		 push	 eax
  02e76	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  02e7b	83 c4 08	 add	 esp, 8
$LN2@OperateGmC:

; 1170 : 			}
; 1171 : 			break;

  02e7e	eb 0a		 jmp	 SHORT $LN11@OperateGmC
$LN1@OperateGmC:

; 1172 : 
; 1173 : 		case 3:
; 1174 : 			this->SetState(CRYWOLF_STATE_END);

  02e80	6a 05		 push	 5
  02e82	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e85	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN11@OperateGmC:

; 1175 : 			break;
; 1176 : 	}
; 1177 : }

  02e8a	5f		 pop	 edi
  02e8b	5e		 pop	 esi
  02e8c	5b		 pop	 ebx
  02e8d	8b e5		 mov	 esp, ebp
  02e8f	5d		 pop	 ebp
  02e90	c2 08 00	 ret	 8
  02e93	90		 npad	 1
$LN13@OperateGmC:
  02e94	00 00 00 00	 DD	 $LN6@OperateGmC
  02e98	00 00 00 00	 DD	 $LN5@OperateGmC
  02e9c	00 00 00 00	 DD	 $LN4@OperateGmC
  02ea0	00 00 00 00	 DD	 $LN1@OperateGmC
?OperateGmCommand@CCrywolf@@QAEXHH@Z ENDP		; CCrywolf::OperateGmCommand
_TEXT	ENDS
PUBLIC	?GetMapSvrGroup@CMapServerManager@@QAEHXZ	; CMapServerManager::GetMapSvrGroup
PUBLIC	?CrywolfServerGroupSync@CCrywolf@@QAEXXZ	; CCrywolf::CrywolfServerGroupSync
EXTRN	?GDReqCrywolfSync@@YAXHHH@Z:PROC		; GDReqCrywolfSync
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CrywolfServerGroupSync@CCrywolf@@QAEXXZ PROC		; CCrywolf::CrywolfServerGroupSync
; _this$ = ecx

; 1180 : {

  02eb0	55		 push	 ebp
  02eb1	8b ec		 mov	 ebp, esp
  02eb3	83 ec 44	 sub	 esp, 68			; 00000044H
  02eb6	53		 push	 ebx
  02eb7	56		 push	 esi
  02eb8	57		 push	 edi
  02eb9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1181 : 	GDReqCrywolfSync(g_MapServerManager.GetMapSvrGroup(), g_Crywolf.GetCrywolfState(), g_Crywolf.GetOccupationState());

  02ebc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  02ec1	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  02ec6	50		 push	 eax
  02ec7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  02ecc	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  02ed1	50		 push	 eax
  02ed2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  02ed7	e8 00 00 00 00	 call	 ?GetMapSvrGroup@CMapServerManager@@QAEHXZ ; CMapServerManager::GetMapSvrGroup
  02edc	50		 push	 eax
  02edd	e8 00 00 00 00	 call	 ?GDReqCrywolfSync@@YAXHHH@Z ; GDReqCrywolfSync
  02ee2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1182 : }

  02ee5	5f		 pop	 edi
  02ee6	5e		 pop	 esi
  02ee7	5b		 pop	 ebx
  02ee8	8b e5		 mov	 esp, ebp
  02eea	5d		 pop	 ebp
  02eeb	c3		 ret	 0
?CrywolfServerGroupSync@CCrywolf@@QAEXXZ ENDP		; CCrywolf::CrywolfServerGroupSync
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapservermanager.h
_TEXT	ENDS
;	COMDAT ?GetMapSvrGroup@CMapServerManager@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMapSvrGroup@CMapServerManager@@QAEHXZ PROC		; CMapServerManager::GetMapSvrGroup, COMDAT
; _this$ = ecx

; 49   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 		if ( this->m_lpThisMapSvrData != NULL )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 c0 4b 01
	00 00		 cmp	 DWORD PTR [eax+84928], 0
  00016	74 0f		 je	 SHORT $LN1@GetMapSvrG

; 51   : 		{
; 52   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 88 c0 4b 01
	00		 mov	 ecx, DWORD PTR [eax+84928]
  00021	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]
  00025	eb 03		 jmp	 SHORT $LN2@GetMapSvrG
$LN1@GetMapSvrG:

; 53   : 		}
; 54   : 		return -1;

  00027	83 c8 ff	 or	 eax, -1
$LN2@GetMapSvrG:

; 55   : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?GetMapSvrGroup@CMapServerManager@@QAEHXZ ENDP		; CMapServerManager::GetMapSvrGroup
_TEXT	ENDS
EXTRN	?GDReqCrywolfInfoSave@@YAXHHH@Z:PROC		; GDReqCrywolfInfoSave
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CrywolfInfoDBSave@CCrywolf@@QAEXXZ PROC		; CCrywolf::CrywolfInfoDBSave
; _this$ = ecx

; 1185 : {

  02ef0	55		 push	 ebp
  02ef1	8b ec		 mov	 ebp, esp
  02ef3	83 ec 44	 sub	 esp, 68			; 00000044H
  02ef6	53		 push	 ebx
  02ef7	56		 push	 esi
  02ef8	57		 push	 edi
  02ef9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1186 : 	if ( this->m_bDBDataLoadOK != FALSE )

  02efc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02eff	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  02f03	74 25		 je	 SHORT $LN2@CrywolfInf

; 1187 : 	{
; 1188 : 		GDReqCrywolfInfoSave(g_MapServerManager.GetMapSvrGroup(), this->GetCrywolfState(), this->GetOccupationState());

  02f05	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f08	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  02f0d	50		 push	 eax
  02f0e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f11	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  02f16	50		 push	 eax
  02f17	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  02f1c	e8 00 00 00 00	 call	 ?GetMapSvrGroup@CMapServerManager@@QAEHXZ ; CMapServerManager::GetMapSvrGroup
  02f21	50		 push	 eax
  02f22	e8 00 00 00 00	 call	 ?GDReqCrywolfInfoSave@@YAXHHH@Z ; GDReqCrywolfInfoSave
  02f27	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@CrywolfInf:

; 1189 : 	}
; 1190 : }

  02f2a	5f		 pop	 edi
  02f2b	5e		 pop	 esi
  02f2c	5b		 pop	 ebx
  02f2d	8b e5		 mov	 esp, ebp
  02f2f	5d		 pop	 ebp
  02f30	c3		 ret	 0
?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ENDP		; CCrywolf::CrywolfInfoDBSave
_TEXT	ENDS
PUBLIC	?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ		; CCrywolf::CrywolfInfoDBLoad
EXTRN	?GDReqCrywolfInfoLoad@@YAXH@Z:PROC		; GDReqCrywolfInfoLoad
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ PROC		; CCrywolf::CrywolfInfoDBLoad
; _this$ = ecx

; 1193 : {

  02f40	55		 push	 ebp
  02f41	8b ec		 mov	 ebp, esp
  02f43	83 ec 44	 sub	 esp, 68			; 00000044H
  02f46	53		 push	 ebx
  02f47	56		 push	 esi
  02f48	57		 push	 edi
  02f49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1194 : 	this->m_bDBDataLoading = TRUE;

  02f4c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02f4f	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1

; 1195 : 
; 1196 : 	GDReqCrywolfInfoLoad(g_MapServerManager.GetMapSvrGroup());

  02f56	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  02f5b	e8 00 00 00 00	 call	 ?GetMapSvrGroup@CMapServerManager@@QAEHXZ ; CMapServerManager::GetMapSvrGroup
  02f60	50		 push	 eax
  02f61	e8 00 00 00 00	 call	 ?GDReqCrywolfInfoLoad@@YAXH@Z ; GDReqCrywolfInfoLoad
  02f66	83 c4 04	 add	 esp, 4

; 1197 : }

  02f69	5f		 pop	 edi
  02f6a	5e		 pop	 esi
  02f6b	5b		 pop	 ebx
  02f6c	8b e5		 mov	 esp, ebp
  02f6e	5d		 pop	 ebp
  02f6f	c3		 ret	 0
?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ ENDP		; CCrywolf::CrywolfInfoDBLoad
_TEXT	ENDS
PUBLIC	??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@ ; `string'
PUBLIC	?SetDBDataLoad@CCrywolf@@QAEXH@Z		; CCrywolf::SetDBDataLoad
PUBLIC	?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z		; CCrywolf::ApplyCrywolfDBInfo
;	COMDAT ??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@
CONST	SEGMENT
??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@ DB '['
	DB	' Crywolf ][ ApplyDBInfo] OccupationState : %d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iCrywolfState$ = 8					; size = 4
_iOccupationState$ = 12					; size = 4
?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z PROC		; CCrywolf::ApplyCrywolfDBInfo
; _this$ = ecx

; 1200 : {

  02f70	55		 push	 ebp
  02f71	8b ec		 mov	 ebp, esp
  02f73	83 ec 44	 sub	 esp, 68			; 00000044H
  02f76	53		 push	 ebx
  02f77	56		 push	 esi
  02f78	57		 push	 edi
  02f79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1201 : 	this->SetDBDataLoad(TRUE);

  02f7c	6a 01		 push	 1
  02f7e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f81	e8 00 00 00 00	 call	 ?SetDBDataLoad@CCrywolf@@QAEXH@Z ; CCrywolf::SetDBDataLoad

; 1202 : 	this->SetOccupationState(iOccupationState);

  02f86	8b 45 0c	 mov	 eax, DWORD PTR _iOccupationState$[ebp]
  02f89	50		 push	 eax
  02f8a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f8d	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolf@@QAEXH@Z ; CCrywolf::SetOccupationState

; 1203 : 	this->SetCrywolfCommonNPC(this->GetOccupationState());

  02f92	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f95	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  02f9a	50		 push	 eax
  02f9b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f9e	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 1204 : 	this->SetCrywolfMapAttr(this->GetOccupationState());

  02fa3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fa6	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  02fab	50		 push	 eax
  02fac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02faf	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 1205 : 
; 1206 : 	LogAddTD("[ Crywolf ][ ApplyDBInfo] OccupationState : %d", iOccupationState);

  02fb4	8b 45 0c	 mov	 eax, DWORD PTR _iOccupationState$[ebp]
  02fb7	50		 push	 eax
  02fb8	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@
  02fbd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  02fc3	83 c4 08	 add	 esp, 8

; 1207 : }

  02fc6	5f		 pop	 edi
  02fc7	5e		 pop	 esi
  02fc8	5b		 pop	 ebx
  02fc9	8b e5		 mov	 esp, ebp
  02fcb	5d		 pop	 ebp
  02fcc	c2 08 00	 ret	 8
?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z ENDP		; CCrywolf::ApplyCrywolfDBInfo
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.h
_TEXT	ENDS
;	COMDAT ?SetDBDataLoad@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bIsLoaded$ = 8						; size = 4
?SetDBDataLoad@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetDBDataLoad, COMDAT
; _this$ = ecx

; 93   : 	void SetDBDataLoad(BOOL bIsLoaded){this->m_bDBDataLoadOK = bIsLoaded;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _bIsLoaded$[ebp]
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetDBDataLoad@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetDBDataLoad
_TEXT	ENDS
PUBLIC	??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@ ; `string'
PUBLIC	??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ ; `string'
PUBLIC	??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ ; `string'
PUBLIC	?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z	; CCrywolf::CrywolfMonsterDieProc
;	COMDAT ??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
CONST	SEGMENT
??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@ DB '['
	DB	' Crywolf ][MVP] [DarkElf Dead] by [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
CONST	SEGMENT
??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ DB '['
	DB	' Crywolf ][MVP] [Balgars Dead] by Unknown User', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
CONST	SEGMENT
??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ DB '['
	DB	' Crywolf ][MVP] [Balgars Dead] by [%s][%s]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iScore$230970 = -20					; size = 4
_bExistKiller$ = -16					; size = 4
_lpKillerObj$ = -12					; size = 4
_lpMonObj$ = -8						; size = 4
_this$ = -4						; size = 4
_iMonIndex$ = 8						; size = 4
_iKillerIndex$ = 12					; size = 4
?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z PROC		; CCrywolf::CrywolfMonsterDieProc
; _this$ = ecx

; 1210 : {

  02fd0	55		 push	 ebp
  02fd1	8b ec		 mov	 ebp, esp
  02fd3	83 ec 54	 sub	 esp, 84			; 00000054H
  02fd6	53		 push	 ebx
  02fd7	56		 push	 esi
  02fd8	57		 push	 edi
  02fd9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1211 : 	LPOBJ lpMonObj = &gObj[iMonIndex];

  02fdc	8b 45 08	 mov	 eax, DWORD PTR _iMonIndex$[ebp]
  02fdf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02fe5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02feb	89 45 f8	 mov	 DWORD PTR _lpMonObj$[ebp], eax

; 1212 : 	LPOBJ lpKillerObj = &gObj[iKillerIndex];

  02fee	8b 45 0c	 mov	 eax, DWORD PTR _iKillerIndex$[ebp]
  02ff1	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02ff7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02ffd	89 45 f4	 mov	 DWORD PTR _lpKillerObj$[ebp], eax

; 1213 : 	BOOL bExistKiller = gObjIsConnected(iKillerIndex);

  03000	8b 45 0c	 mov	 eax, DWORD PTR _iKillerIndex$[ebp]
  03003	50		 push	 eax
  03004	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03009	83 c4 04	 add	 esp, 4
  0300c	89 45 f0	 mov	 DWORD PTR _bExistKiller$[ebp], eax

; 1214 : 
; 1215 : 	if ( g_Crywolf.GetCrywolfState() == CRYWOLF_STATE_START )

  0300f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  03014	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  03019	83 f8 04	 cmp	 eax, 4
  0301c	0f 85 4b 01 00
	00		 jne	 $LN10@CrywolfMon

; 1216 : 	{
; 1217 : 		if ( lpMonObj->MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE )

  03022	8b 45 f8	 mov	 eax, DWORD PTR _lpMonObj$[ebp]
  03025	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  0302c	83 f9 22	 cmp	 ecx, 34			; 00000022H
  0302f	0f 85 38 01 00
	00		 jne	 $LN10@CrywolfMon

; 1218 : 		{
; 1219 : 			if ( lpMonObj->m_iCurrentAI != 0 )

  03035	8b 45 f8	 mov	 eax, DWORD PTR _lpMonObj$[ebp]
  03038	83 b8 78 1c 00
	00 00		 cmp	 DWORD PTR [eax+7288], 0
  0303f	0f 84 28 01 00
	00		 je	 $LN10@CrywolfMon

; 1220 : 			{
; 1221 : 				if ( lpMonObj->Class == 349 )

  03045	8b 45 f8	 mov	 eax, DWORD PTR _lpMonObj$[ebp]
  03048	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0304f	81 f9 5d 01 00
	00		 cmp	 ecx, 349		; 0000015dH
  03055	75 77		 jne	 SHORT $LN6@CrywolfMon

; 1222 : 				{
; 1223 : 					if ( bExistKiller )

  03057	83 7d f0 00	 cmp	 DWORD PTR _bExistKiller$[ebp], 0
  0305b	74 44		 je	 SHORT $LN5@CrywolfMon

; 1224 : 					{
; 1225 : 						UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 247)), lpKillerObj->Name);

  0305d	8b 45 f4	 mov	 eax, DWORD PTR _lpKillerObj$[ebp]
  03060	83 c0 77	 add	 eax, 119		; 00000077H
  03063	50		 push	 eax
  03064	68 f7 0c 00 00	 push	 3319			; 00000cf7H
  03069	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0306e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  03073	50		 push	 eax
  03074	6a 02		 push	 2
  03076	68 00 00 00 00	 push	 OFFSET _UTIL
  0307b	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  03080	83 c4 10	 add	 esp, 16			; 00000010H

; 1226 : 
; 1227 : 						LogAddTD("[ Crywolf ][MVP] [Balgars Dead] by [%s][%s]",	lpKillerObj->AccountID, lpKillerObj->Name);

  03083	8b 45 f4	 mov	 eax, DWORD PTR _lpKillerObj$[ebp]
  03086	83 c0 77	 add	 eax, 119		; 00000077H
  03089	50		 push	 eax
  0308a	8b 4d f4	 mov	 ecx, DWORD PTR _lpKillerObj$[ebp]
  0308d	83 c1 6c	 add	 ecx, 108		; 0000006cH
  03090	51		 push	 ecx
  03091	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
  03096	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0309c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1228 : 					}
; 1229 : 					else

  0309f	eb 2d		 jmp	 SHORT $LN6@CrywolfMon
$LN5@CrywolfMon:

; 1230 : 					{
; 1231 : 						UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 248)));

  030a1	68 f8 0c 00 00	 push	 3320			; 00000cf8H
  030a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  030ab	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  030b0	50		 push	 eax
  030b1	6a 02		 push	 2
  030b3	68 00 00 00 00	 push	 OFFSET _UTIL
  030b8	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  030bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 
; 1233 : 						LogAddTD("[ Crywolf ][MVP] [Balgars Dead] by Unknown User");

  030c0	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
  030c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  030cb	83 c4 04	 add	 esp, 4
$LN6@CrywolfMon:

; 1234 : 					}
; 1235 : 				}
; 1236 : 
; 1237 : 				if ( lpMonObj->Class == 340 )

  030ce	8b 45 f8	 mov	 eax, DWORD PTR _lpMonObj$[ebp]
  030d1	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  030d8	81 f9 54 01 00
	00		 cmp	 ecx, 340		; 00000154H
  030de	75 52		 jne	 SHORT $LN3@CrywolfMon

; 1238 : 				{
; 1239 : 					if ( bExistKiller )

  030e0	83 7d f0 00	 cmp	 DWORD PTR _bExistKiller$[ebp], 0
  030e4	74 4c		 je	 SHORT $LN3@CrywolfMon

; 1240 : 					{
; 1241 : 						UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 249)), lpMonObj->m_iGroupNumber, lpKillerObj->Name);

  030e6	8b 45 f4	 mov	 eax, DWORD PTR _lpKillerObj$[ebp]
  030e9	83 c0 77	 add	 eax, 119		; 00000077H
  030ec	50		 push	 eax
  030ed	8b 4d f8	 mov	 ecx, DWORD PTR _lpMonObj$[ebp]
  030f0	8b 91 84 1c 00
	00		 mov	 edx, DWORD PTR [ecx+7300]
  030f6	52		 push	 edx
  030f7	68 f9 0c 00 00	 push	 3321			; 00000cf9H
  030fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  03101	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  03106	50		 push	 eax
  03107	6a 02		 push	 2
  03109	68 00 00 00 00	 push	 OFFSET _UTIL
  0310e	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  03113	83 c4 14	 add	 esp, 20			; 00000014H

; 1242 : 
; 1243 : 						LogAddTD("[ Crywolf ][MVP] [DarkElf Dead] by [%s][%s]",	lpKillerObj->AccountID, lpKillerObj->Name);

  03116	8b 45 f4	 mov	 eax, DWORD PTR _lpKillerObj$[ebp]
  03119	83 c0 77	 add	 eax, 119		; 00000077H
  0311c	50		 push	 eax
  0311d	8b 4d f4	 mov	 ecx, DWORD PTR _lpKillerObj$[ebp]
  03120	83 c1 6c	 add	 ecx, 108		; 0000006cH
  03123	51		 push	 ecx
  03124	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@
  03129	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0312f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@CrywolfMon:

; 1244 : 					}
; 1245 : 				}
; 1246 : 		
; 1247 : 				int iScore = this->CalcGettingScore(iKillerIndex, iMonIndex, 100);

  03132	6a 64		 push	 100			; 00000064H
  03134	8b 45 08	 mov	 eax, DWORD PTR _iMonIndex$[ebp]
  03137	50		 push	 eax
  03138	8b 4d 0c	 mov	 ecx, DWORD PTR _iKillerIndex$[ebp]
  0313b	51		 push	 ecx
  0313c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0313f	e8 00 00 00 00	 call	 ?CalcGettingScore@CCrywolf@@QAEHHHH@Z ; CCrywolf::CalcGettingScore
  03144	89 45 ec	 mov	 DWORD PTR _iScore$230970[ebp], eax

; 1248 : 
; 1249 : 				if ( iScore != -1 )

  03147	83 7d ec ff	 cmp	 DWORD PTR _iScore$230970[ebp], -1
  0314b	74 20		 je	 SHORT $LN10@CrywolfMon

; 1250 : 				{
; 1251 : 					MsgOutput(iKillerIndex, lMsg.Get(MSGGET(12, 250)), iScore);

  0314d	8b 45 ec	 mov	 eax, DWORD PTR _iScore$230970[ebp]
  03150	50		 push	 eax
  03151	68 fa 0c 00 00	 push	 3322			; 00000cfaH
  03156	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0315b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  03160	50		 push	 eax
  03161	8b 4d 0c	 mov	 ecx, DWORD PTR _iKillerIndex$[ebp]
  03164	51		 push	 ecx
  03165	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0316a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@CrywolfMon:

; 1252 : 				}
; 1253 : 			}
; 1254 : 		}
; 1255 : 	}
; 1256 : }

  0316d	5f		 pop	 edi
  0316e	5e		 pop	 esi
  0316f	5b		 pop	 ebx
  03170	8b e5		 mov	 esp, ebp
  03172	5d		 pop	 ebp
  03173	c2 08 00	 ret	 8
?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z ENDP		; CCrywolf::CrywolfMonsterDieProc
_TEXT	ENDS
PUBLIC	??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@ ; `string'
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
;	COMDAT ??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@
CONST	SEGMENT
??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@ DB '['
	DB	' Crywolf ][Reward] [Altar Elf] [%s][%s] Success Reward - Gem '
	DB	'Of Bless', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iItemNumber$ = -8					; size = 4
_this$ = -4						; size = 4
_iAltarUserIndex$ = 8					; size = 4
?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z PROC		; CCrywolf::MakeRewardForAltarElf
; _this$ = ecx

; 1259 : {

  03180	55		 push	 ebp
  03181	8b ec		 mov	 ebp, esp
  03183	83 ec 48	 sub	 esp, 72			; 00000048H
  03186	53		 push	 ebx
  03187	56		 push	 esi
  03188	57		 push	 edi
  03189	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1260 : 	int iItemNumber = ITEMGET(14,13);

  0318c	c7 45 f8 0d 1c
	00 00		 mov	 DWORD PTR _iItemNumber$[ebp], 7181 ; 00001c0dH

; 1261 : 	ItemSerialCreateSend(gObj[iAltarUserIndex].m_Index, (BYTE)gObj[iAltarUserIndex].MapNumber, (BYTE)gObj[iAltarUserIndex].X, (BYTE)gObj[iAltarUserIndex].Y, iItemNumber, 0, 0, 0, 0, 0, iAltarUserIndex, 0, 0);

  03193	6a 00		 push	 0
  03195	6a 00		 push	 0
  03197	8b 45 08	 mov	 eax, DWORD PTR _iAltarUserIndex$[ebp]
  0319a	50		 push	 eax
  0319b	6a 00		 push	 0
  0319d	6a 00		 push	 0
  0319f	6a 00		 push	 0
  031a1	6a 00		 push	 0
  031a3	6a 00		 push	 0
  031a5	8b 4d f8	 mov	 ecx, DWORD PTR _iItemNumber$[ebp]
  031a8	51		 push	 ecx
  031a9	8b 55 08	 mov	 edx, DWORD PTR _iAltarUserIndex$[ebp]
  031ac	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  031b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  031b7	0f b6 8c 10 46
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+326]
  031bf	51		 push	 ecx
  031c0	8b 55 08	 mov	 edx, DWORD PTR _iAltarUserIndex$[ebp]
  031c3	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  031c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  031ce	0f b6 8c 10 44
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+324]
  031d6	51		 push	 ecx
  031d7	8b 55 08	 mov	 edx, DWORD PTR _iAltarUserIndex$[ebp]
  031da	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  031e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  031e5	0f b6 8c 10 49
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+329]
  031ed	51		 push	 ecx
  031ee	8b 55 08	 mov	 edx, DWORD PTR _iAltarUserIndex$[ebp]
  031f1	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  031f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  031fc	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  031ff	51		 push	 ecx
  03200	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  03205	83 c4 34	 add	 esp, 52			; 00000034H

; 1262 : 	LogAddTD("[ Crywolf ][Reward] [Altar Elf] [%s][%s] Success Reward - Gem Of Bless", gObj[iAltarUserIndex].AccountID, gObj[iAltarUserIndex].Name);

  03208	8b 45 08	 mov	 eax, DWORD PTR _iAltarUserIndex$[ebp]
  0320b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03211	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03217	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  0321b	52		 push	 edx
  0321c	8b 45 08	 mov	 eax, DWORD PTR _iAltarUserIndex$[ebp]
  0321f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03225	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0322b	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  0322f	52		 push	 edx
  03230	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@
  03235	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0323b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1263 : }

  0323e	5f		 pop	 edi
  0323f	5e		 pop	 esi
  03240	5b		 pop	 ebx
  03241	8b e5		 mov	 esp, ebp
  03243	5d		 pop	 ebp
  03244	c2 04 00	 ret	 4
?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::MakeRewardForAltarElf
_TEXT	ENDS
PUBLIC	??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@ ; `string'
;	COMDAT ??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@
CONST	SEGMENT
??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@ DB '['
	DB	' Crywolf ][Reward] [Hero List Top 5] [%s][%s] Success Reward '
	DB	'- Gem Of Bless', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iItemNumber$ = -8					; size = 4
_this$ = -4						; size = 4
_iUserIndex$ = 8					; size = 4
?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z PROC	; CCrywolf::MakeRewardForHeroListTop5
; _this$ = ecx

; 1266 : {

  03250	55		 push	 ebp
  03251	8b ec		 mov	 ebp, esp
  03253	83 ec 48	 sub	 esp, 72			; 00000048H
  03256	53		 push	 ebx
  03257	56		 push	 esi
  03258	57		 push	 edi
  03259	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1267 : 	int iItemNumber = ITEMGET(14,13);

  0325c	c7 45 f8 0d 1c
	00 00		 mov	 DWORD PTR _iItemNumber$[ebp], 7181 ; 00001c0dH

; 1268 : 	ItemSerialCreateSend(gObj[iUserIndex].m_Index, (BYTE)gObj[iUserIndex].MapNumber, (BYTE)gObj[iUserIndex].X, (BYTE)gObj[iUserIndex].Y, iItemNumber, 0, 0, 0, 0, 0, iUserIndex, 0, 0);

  03263	6a 00		 push	 0
  03265	6a 00		 push	 0
  03267	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  0326a	50		 push	 eax
  0326b	6a 00		 push	 0
  0326d	6a 00		 push	 0
  0326f	6a 00		 push	 0
  03271	6a 00		 push	 0
  03273	6a 00		 push	 0
  03275	8b 4d f8	 mov	 ecx, DWORD PTR _iItemNumber$[ebp]
  03278	51		 push	 ecx
  03279	8b 55 08	 mov	 edx, DWORD PTR _iUserIndex$[ebp]
  0327c	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  03282	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03287	0f b6 8c 10 46
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+326]
  0328f	51		 push	 ecx
  03290	8b 55 08	 mov	 edx, DWORD PTR _iUserIndex$[ebp]
  03293	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  03299	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0329e	0f b6 8c 10 44
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+324]
  032a6	51		 push	 ecx
  032a7	8b 55 08	 mov	 edx, DWORD PTR _iUserIndex$[ebp]
  032aa	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  032b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  032b5	0f b6 8c 10 49
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+329]
  032bd	51		 push	 ecx
  032be	8b 55 08	 mov	 edx, DWORD PTR _iUserIndex$[ebp]
  032c1	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  032c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  032cc	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  032cf	51		 push	 ecx
  032d0	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  032d5	83 c4 34	 add	 esp, 52			; 00000034H

; 1269 : 	LogAddTD("[ Crywolf ][Reward] [Hero List Top 5] [%s][%s] Success Reward - Gem Of Bless", gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);

  032d8	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  032db	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  032e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  032e7	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  032eb	52		 push	 edx
  032ec	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  032ef	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  032f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  032fb	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  032ff	52		 push	 edx
  03300	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@
  03305	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0330b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1270 : }

  0330e	5f		 pop	 edi
  0330f	5e		 pop	 esi
  03310	5b		 pop	 ebx
  03311	8b e5		 mov	 esp, ebp
  03313	5d		 pop	 ebp
  03314	c2 04 00	 ret	 4
?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z ENDP	; CCrywolf::MakeRewardForHeroListTop5
_TEXT	ENDS
PUBLIC	??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@ ; `string'
;	COMDAT ??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@
CONST	SEGMENT
??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@ DB '['
	DB	' Crywolf ][MVP] Plus MVP Score : %d, Accumulated : %d [%s][%s'
	DB	']', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv70 = -76						; size = 4
_iAddMVPScore$ = -8					; size = 4
_this$ = -4						; size = 4
_iUserIndex$ = 8					; size = 4
_iMonIndex$ = 12					; size = 4
_iScoreType$ = 16					; size = 4
?CalcGettingScore@CCrywolf@@QAEHHHH@Z PROC		; CCrywolf::CalcGettingScore
; _this$ = ecx

; 1273 : {

  03320	55		 push	 ebp
  03321	8b ec		 mov	 ebp, esp
  03323	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03326	53		 push	 ebx
  03327	56		 push	 esi
  03328	57		 push	 edi
  03329	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1274 : 	if ( !gObjIsConnected(iUserIndex))

  0332c	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  0332f	50		 push	 eax
  03330	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03335	83 c4 04	 add	 esp, 4
  03338	85 c0		 test	 eax, eax
  0333a	75 08		 jne	 SHORT $LN11@CalcGettin

; 1275 : 		return -1;

  0333c	83 c8 ff	 or	 eax, -1
  0333f	e9 5e 01 00 00	 jmp	 $LN12@CalcGettin
$LN11@CalcGettin:

; 1276 : 
; 1277 : 	int iAddMVPScore = 0;

  03344	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iAddMVPScore$[ebp], 0

; 1278 : 
; 1279 : 	if ( CHECK_LIMIT(iMonIndex, OBJ_MAXMONSTER) != FALSE )

  0334b	83 7d 0c 00	 cmp	 DWORD PTR _iMonIndex$[ebp], 0
  0334f	7d 09		 jge	 SHORT $LN14@CalcGettin
  03351	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  03358	eb 0f		 jmp	 SHORT $LN15@CalcGettin
$LN14@CalcGettin:
  0335a	33 c0		 xor	 eax, eax
  0335c	81 7d 0c c7 32
	00 00		 cmp	 DWORD PTR _iMonIndex$[ebp], 12999 ; 000032c7H
  03363	0f 9e c0	 setle	 al
  03366	89 45 b4	 mov	 DWORD PTR tv70[ebp], eax
$LN15@CalcGettin:
  03369	83 7d b4 00	 cmp	 DWORD PTR tv70[ebp], 0
  0336d	0f 84 87 00 00
	00		 je	 $LN10@CalcGettin

; 1280 : 	{
; 1281 : 		switch ( gObj[iMonIndex].Class )

  03373	8b 45 0c	 mov	 eax, DWORD PTR _iMonIndex$[ebp]
  03376	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0337c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03382	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  0338a	89 55 b4	 mov	 DWORD PTR tv76[ebp], edx
  0338d	8b 45 b4	 mov	 eax, DWORD PTR tv76[ebp]
  03390	2d 54 01 00 00	 sub	 eax, 340		; 00000154H
  03395	89 45 b4	 mov	 DWORD PTR tv76[ebp], eax
  03398	83 7d b4 09	 cmp	 DWORD PTR tv76[ebp], 9
  0339c	77 5c		 ja	 SHORT $LN10@CalcGettin
  0339e	8b 4d b4	 mov	 ecx, DWORD PTR tv76[ebp]
  033a1	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN16@CalcGettin[ecx*4]
$LN7@CalcGettin:

; 1282 : 		{
; 1283 : 			case 349:
; 1284 : 				iAddMVPScore = this->m_iMVPScoreTable[0];

  033a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  033ab	8b 88 30 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036592]
  033b1	89 4d f8	 mov	 DWORD PTR _iAddMVPScore$[ebp], ecx

; 1285 : 				break;

  033b4	eb 44		 jmp	 SHORT $LN10@CalcGettin
$LN6@CalcGettin:

; 1286 : 			case 340:
; 1287 : 				iAddMVPScore = this->m_iMVPScoreTable[1];

  033b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  033b9	8b 88 34 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036596]
  033bf	89 4d f8	 mov	 DWORD PTR _iAddMVPScore$[ebp], ecx

; 1288 : 				break;

  033c2	eb 36		 jmp	 SHORT $LN10@CalcGettin
$LN5@CalcGettin:

; 1289 : 			case 344:
; 1290 : 				iAddMVPScore = this->m_iMVPScoreTable[2];

  033c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  033c7	8b 88 38 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036600]
  033cd	89 4d f8	 mov	 DWORD PTR _iAddMVPScore$[ebp], ecx

; 1291 : 				break;

  033d0	eb 28		 jmp	 SHORT $LN10@CalcGettin
$LN4@CalcGettin:

; 1292 : 			case 341:
; 1293 : 				iAddMVPScore = this->m_iMVPScoreTable[3];

  033d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  033d5	8b 88 3c d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036604]
  033db	89 4d f8	 mov	 DWORD PTR _iAddMVPScore$[ebp], ecx

; 1294 : 				break;

  033de	eb 1a		 jmp	 SHORT $LN10@CalcGettin
$LN3@CalcGettin:

; 1295 : 			case 345:
; 1296 : 				iAddMVPScore = this->m_iMVPScoreTable[4];

  033e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  033e3	8b 88 40 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036608]
  033e9	89 4d f8	 mov	 DWORD PTR _iAddMVPScore$[ebp], ecx

; 1297 : 				break;

  033ec	eb 0c		 jmp	 SHORT $LN10@CalcGettin
$LN2@CalcGettin:

; 1298 : 			case 348:
; 1299 : 				iAddMVPScore = this->m_iMVPScoreTable[5];

  033ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  033f1	8b 88 44 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036612]
  033f7	89 4d f8	 mov	 DWORD PTR _iAddMVPScore$[ebp], ecx
$LN10@CalcGettin:

; 1300 : 				break;
; 1301 : 		}
; 1302 : 	}
; 1303 : 
; 1304 : 	if ( iScoreType == 6 )

  033fa	83 7d 10 06	 cmp	 DWORD PTR _iScoreType$[ebp], 6
  033fe	75 0c		 jne	 SHORT $LN1@CalcGettin

; 1305 : 	{
; 1306 : 		iAddMVPScore = this->m_iMVPScoreTable[6];

  03400	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03403	8b 88 48 d1 0f
	00		 mov	 ecx, DWORD PTR [eax+1036616]
  03409	89 4d f8	 mov	 DWORD PTR _iAddMVPScore$[ebp], ecx
$LN1@CalcGettin:

; 1307 : 	}
; 1308 : 
; 1309 : 	gObj[iUserIndex].m_iCrywolfMVPScore += iAddMVPScore;

  0340c	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  0340f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03415	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0341b	8b 94 01 c0 1f
	00 00		 mov	 edx, DWORD PTR [ecx+eax+8128]
  03422	03 55 f8	 add	 edx, DWORD PTR _iAddMVPScore$[ebp]
  03425	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  03428	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0342e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03434	89 94 01 c0 1f
	00 00		 mov	 DWORD PTR [ecx+eax+8128], edx

; 1310 : 	LogAddTD("[ Crywolf ][MVP] Plus MVP Score : %d, Accumulated : %d [%s][%s]",	iAddMVPScore, gObj[iUserIndex].m_iCrywolfMVPScore,	gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);

  0343b	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  0343e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03444	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0344a	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  0344e	52		 push	 edx
  0344f	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  03452	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03458	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0345e	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  03462	52		 push	 edx
  03463	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  03466	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0346c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03472	8b 94 01 c0 1f
	00 00		 mov	 edx, DWORD PTR [ecx+eax+8128]
  03479	52		 push	 edx
  0347a	8b 45 f8	 mov	 eax, DWORD PTR _iAddMVPScore$[ebp]
  0347d	50		 push	 eax
  0347e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@
  03483	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  03489	83 c4 14	 add	 esp, 20			; 00000014H

; 1311 : 	return gObj[iUserIndex].m_iCrywolfMVPScore;

  0348c	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  0348f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03495	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0349b	8b 84 01 c0 1f
	00 00		 mov	 eax, DWORD PTR [ecx+eax+8128]
$LN12@CalcGettin:

; 1312 : }

  034a2	5f		 pop	 edi
  034a3	5e		 pop	 esi
  034a4	5b		 pop	 ebx
  034a5	8b e5		 mov	 esp, ebp
  034a7	5d		 pop	 ebp
  034a8	c2 0c 00	 ret	 12			; 0000000cH
  034ab	90		 npad	 1
$LN16@CalcGettin:
  034ac	00 00 00 00	 DD	 $LN6@CalcGettin
  034b0	00 00 00 00	 DD	 $LN4@CalcGettin
  034b4	00 00 00 00	 DD	 $LN10@CalcGettin
  034b8	00 00 00 00	 DD	 $LN10@CalcGettin
  034bc	00 00 00 00	 DD	 $LN5@CalcGettin
  034c0	00 00 00 00	 DD	 $LN3@CalcGettin
  034c4	00 00 00 00	 DD	 $LN10@CalcGettin
  034c8	00 00 00 00	 DD	 $LN10@CalcGettin
  034cc	00 00 00 00	 DD	 $LN2@CalcGettin
  034d0	00 00 00 00	 DD	 $LN7@CalcGettin
?CalcGettingScore@CCrywolf@@QAEHHHH@Z ENDP		; CCrywolf::CalcGettingScore
_TEXT	ENDS
EXTRN	?gObjSealUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_JH@Z:PROC ; gObjSealUserSetExp
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv70 = -80						; size = 4
_iRewardExp$ = -12					; size = 8
_this$ = -4						; size = 4
_iUserIndex$ = 8					; size = 4
_iMVPRank$ = 12						; size = 4
?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z PROC		; CCrywolf::CalcGettingRewardExp
; _this$ = ecx

; 1315 : {

  034e0	55		 push	 ebp
  034e1	8b ec		 mov	 ebp, esp
  034e3	83 ec 50	 sub	 esp, 80			; 00000050H
  034e6	53		 push	 ebx
  034e7	56		 push	 esi
  034e8	57		 push	 edi
  034e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1316 : 	if ( !gObjIsConnected(iUserIndex))

  034ec	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  034ef	50		 push	 eax
  034f0	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  034f5	83 c4 04	 add	 esp, 4
  034f8	85 c0		 test	 eax, eax
  034fa	75 07		 jne	 SHORT $LN3@CalcGettin@2

; 1317 : 		return 0;

  034fc	33 c0		 xor	 eax, eax
  034fe	e9 89 00 00 00	 jmp	 $LN4@CalcGettin@2
$LN3@CalcGettin@2:

; 1318 : 
; 1319 : 	if ( CHECK_LIMIT(iMVPRank, 5) == FALSE )

  03503	83 7d 0c 00	 cmp	 DWORD PTR _iMVPRank$[ebp], 0
  03507	7d 09		 jge	 SHORT $LN6@CalcGettin@2
  03509	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  03510	eb 0c		 jmp	 SHORT $LN7@CalcGettin@2
$LN6@CalcGettin@2:
  03512	33 c0		 xor	 eax, eax
  03514	83 7d 0c 04	 cmp	 DWORD PTR _iMVPRank$[ebp], 4
  03518	0f 9e c0	 setle	 al
  0351b	89 45 b0	 mov	 DWORD PTR tv70[ebp], eax
$LN7@CalcGettin@2:
  0351e	83 7d b0 00	 cmp	 DWORD PTR tv70[ebp], 0
  03522	75 04		 jne	 SHORT $LN2@CalcGettin@2

; 1320 : 		return 0;

  03524	33 c0		 xor	 eax, eax
  03526	eb 64		 jmp	 SHORT $LN4@CalcGettin@2
$LN2@CalcGettin@2:

; 1321 : 
; 1322 : 	__int64 iRewardExp = this->m_iMVPRankExpTable[iMVPRank];

  03528	8b 45 0c	 mov	 eax, DWORD PTR _iMVPRank$[ebp]
  0352b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0352e	8b 84 81 60 d1
	0f 00		 mov	 eax, DWORD PTR [ecx+eax*4+1036640]
  03535	99		 cdq
  03536	89 45 f4	 mov	 DWORD PTR _iRewardExp$[ebp], eax
  03539	89 55 f8	 mov	 DWORD PTR _iRewardExp$[ebp+4], edx

; 1323 : 
; 1324 : 	if ( this->GetOccupationState() == 1 )

  0353c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0353f	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolf@@QAEHXZ ; CCrywolf::GetOccupationState
  03544	83 f8 01	 cmp	 eax, 1
  03547	75 22		 jne	 SHORT $LN1@CalcGettin@2

; 1325 : 	{
; 1326 : 		iRewardExp = (iRewardExp * 10) / 100;

  03549	6a 00		 push	 0
  0354b	6a 0a		 push	 10			; 0000000aH
  0354d	8b 45 f8	 mov	 eax, DWORD PTR _iRewardExp$[ebp+4]
  03550	50		 push	 eax
  03551	8b 4d f4	 mov	 ecx, DWORD PTR _iRewardExp$[ebp]
  03554	51		 push	 ecx
  03555	e8 00 00 00 00	 call	 __allmul
  0355a	6a 00		 push	 0
  0355c	6a 64		 push	 100			; 00000064H
  0355e	52		 push	 edx
  0355f	50		 push	 eax
  03560	e8 00 00 00 00	 call	 __alldiv
  03565	89 45 f4	 mov	 DWORD PTR _iRewardExp$[ebp], eax
  03568	89 55 f8	 mov	 DWORD PTR _iRewardExp$[ebp+4], edx
$LN1@CalcGettin@2:

; 1327 : 	}
; 1328 : 
; 1329 : 	gObjSealUserSetExp(&gObj[iUserIndex], iRewardExp, TRUE); //Seal Exp

  0356b	6a 01		 push	 1
  0356d	8d 45 f4	 lea	 eax, DWORD PTR _iRewardExp$[ebp]
  03570	50		 push	 eax
  03571	8b 4d 08	 mov	 ecx, DWORD PTR _iUserIndex$[ebp]
  03574	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0357a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03580	51		 push	 ecx
  03581	e8 00 00 00 00	 call	 ?gObjSealUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; gObjSealUserSetExp
  03586	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1330 : 
; 1331 : 	return iRewardExp;

  03589	8b 45 f4	 mov	 eax, DWORD PTR _iRewardExp$[ebp]
$LN4@CalcGettin@2:

; 1332 : }

  0358c	5f		 pop	 edi
  0358d	5e		 pop	 esi
  0358e	5b		 pop	 ebx
  0358f	8b e5		 mov	 esp, ebp
  03591	5d		 pop	 ebp
  03592	c2 08 00	 ret	 8
?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z ENDP		; CCrywolf::CalcGettingRewardExp
; Function compile flags: /Odtp /ZI
_i$231025 = -12					; size = 4
_iRank$ = -8						; size = 4
_this$ = -4						; size = 4
_iUserIndex$ = 8					; size = 4
?CalcGettingRank@CCrywolf@@QAEHH@Z PROC			; CCrywolf::CalcGettingRank
; _this$ = ecx

; 1335 : {

  035a0	55		 push	 ebp
  035a1	8b ec		 mov	 ebp, esp
  035a3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  035a6	53		 push	 ebx
  035a7	56		 push	 esi
  035a8	57		 push	 edi
  035a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1336 : 	int iRank = 0;

  035ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iRank$[ebp], 0

; 1337 : 
; 1338 : 	for ( int i=0;i<=4;i++)

  035b3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$231025[ebp], 0
  035ba	eb 09		 jmp	 SHORT $LN4@CalcGettin@3
$LN3@CalcGettin@3:
  035bc	8b 45 f4	 mov	 eax, DWORD PTR _i$231025[ebp]
  035bf	83 c0 01	 add	 eax, 1
  035c2	89 45 f4	 mov	 DWORD PTR _i$231025[ebp], eax
$LN4@CalcGettin@3:
  035c5	83 7d f4 04	 cmp	 DWORD PTR _i$231025[ebp], 4
  035c9	7f 2f		 jg	 SHORT $LN2@CalcGettin@3

; 1339 : 	{
; 1340 : 		if ( gObj[iUserIndex].m_iCrywolfMVPScore < this->m_iMVPRankScoreTable[i] )

  035cb	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  035ce	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  035d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  035da	8b 55 f4	 mov	 edx, DWORD PTR _i$231025[ebp]
  035dd	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  035e0	8b 84 01 c0 1f
	00 00		 mov	 eax, DWORD PTR [ecx+eax+8128]
  035e7	3b 84 96 4c d1
	0f 00		 cmp	 eax, DWORD PTR [esi+edx*4+1036620]
  035ee	7d 02		 jge	 SHORT $LN1@CalcGettin@3

; 1341 : 			break;

  035f0	eb 08		 jmp	 SHORT $LN2@CalcGettin@3
$LN1@CalcGettin@3:

; 1342 : 
; 1343 : 		iRank = i;

  035f2	8b 45 f4	 mov	 eax, DWORD PTR _i$231025[ebp]
  035f5	89 45 f8	 mov	 DWORD PTR _iRank$[ebp], eax

; 1344 : 	}

  035f8	eb c2		 jmp	 SHORT $LN3@CalcGettin@3
$LN2@CalcGettin@3:

; 1345 : 
; 1346 : 	return iRank;

  035fa	8b 45 f8	 mov	 eax, DWORD PTR _iRank$[ebp]

; 1347 : }

  035fd	5f		 pop	 edi
  035fe	5e		 pop	 esi
  035ff	5b		 pop	 ebx
  03600	8b e5		 mov	 esp, ebp
  03602	5d		 pop	 ebp
  03603	c2 04 00	 ret	 4
?CalcGettingRank@CCrywolf@@QAEHH@Z ENDP			; CCrywolf::CalcGettingRank
_TEXT	ENDS
PUBLIC	??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@ ; `string'
EXTRN	?GCKillPlayerExtSend@@YAXHH_JHH@Z:PROC		; GCKillPlayerExtSend
EXTRN	?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterLevelSystem::CheckIsMasterLevelCharacter
EXTRN	?g_MasterLevelSystem@@3VCMasterLevelSystem@@A:BYTE ; g_MasterLevelSystem
EXTRN	?CrywolfMVPLevelUp@CCrywolfUtil@@QAEHHH@Z:PROC	; CCrywolfUtil::CrywolfMVPLevelUp
;	COMDAT ??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@
CONST	SEGMENT
??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@ DB '['
	DB	' Crywolf ][GiveRewardExp] LevelUp Error [%s][%s]', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iMAX_LEVCOUNT$ = -16					; size = 4
_iCAL_EXP$ = -12					; size = 4
_iRET_EXP$ = -8						; size = 4
_this$ = -4						; size = 4
_iUserIndex$ = 8					; size = 4
_iRewardExp$ = 12					; size = 4
?GiveRewardExp@CCrywolf@@QAEXHH@Z PROC			; CCrywolf::GiveRewardExp
; _this$ = ecx

; 1350 : {

  03610	55		 push	 ebp
  03611	8b ec		 mov	 ebp, esp
  03613	83 ec 50	 sub	 esp, 80			; 00000050H
  03616	53		 push	 ebx
  03617	56		 push	 esi
  03618	57		 push	 edi
  03619	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1351 : 	if ( !gObjIsConnected(iUserIndex))

  0361c	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  0361f	50		 push	 eax
  03620	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03625	83 c4 04	 add	 esp, 4
  03628	85 c0		 test	 eax, eax
  0362a	75 05		 jne	 SHORT $LN9@GiveReward

; 1352 : 		return;

  0362c	e9 fa 00 00 00	 jmp	 $LN10@GiveReward
$LN9@GiveReward:

; 1353 : 
; 1354 : 	if ( iRewardExp <= -1 )

  03631	83 7d 0c ff	 cmp	 DWORD PTR _iRewardExp$[ebp], -1
  03635	7f 05		 jg	 SHORT $LN8@GiveReward

; 1355 : 		return;

  03637	e9 ef 00 00 00	 jmp	 $LN10@GiveReward
$LN8@GiveReward:

; 1356 : 
; 1357 : 	int iRET_EXP = 0;

  0363c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iRET_EXP$[ebp], 0

; 1358 : 	int iCAL_EXP = iRewardExp;

  03643	8b 45 0c	 mov	 eax, DWORD PTR _iRewardExp$[ebp]
  03646	89 45 f4	 mov	 DWORD PTR _iCAL_EXP$[ebp], eax

; 1359 : 	int iMAX_LEVCOUNT = 0;

  03649	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iMAX_LEVCOUNT$[ebp], 0

; 1360 : 
; 1361 : 	if ( !gObjIsConnected(iUserIndex))

  03650	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  03653	50		 push	 eax
  03654	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  03659	83 c4 04	 add	 esp, 4
  0365c	85 c0		 test	 eax, eax
  0365e	75 05		 jne	 SHORT $LN7@GiveReward

; 1362 : 		return;

  03660	e9 c6 00 00 00	 jmp	 $LN10@GiveReward
$LN7@GiveReward:

; 1363 : 
; 1364 : 	iRET_EXP = iCAL_EXP;

  03665	8b 45 f4	 mov	 eax, DWORD PTR _iCAL_EXP$[ebp]
  03668	89 45 f8	 mov	 DWORD PTR _iRET_EXP$[ebp], eax

; 1365 : 
; 1366 : 	if ( gObj[iUserIndex].Type == OBJ_USER )

  0366b	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  0366e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03674	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0367a	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  0367f	83 fa 01	 cmp	 edx, 1
  03682	0f 85 a3 00 00
	00		 jne	 $LN10@GiveReward
$LN5@GiveReward:

; 1367 : 	{
; 1368 : 		while ( iCAL_EXP > 0 )

  03688	83 7d f4 00	 cmp	 DWORD PTR _iCAL_EXP$[ebp], 0
  0368c	7e 64		 jle	 SHORT $LN4@GiveReward

; 1369 : 		{
; 1370 : 			if ( iCAL_EXP > 0 )

  0368e	83 7d f4 00	 cmp	 DWORD PTR _iCAL_EXP$[ebp], 0
  03692	7e 15		 jle	 SHORT $LN3@GiveReward

; 1371 : 			{
; 1372 : 				iCAL_EXP = UTIL.CrywolfMVPLevelUp(iUserIndex, iCAL_EXP);

  03694	8b 45 f4	 mov	 eax, DWORD PTR _iCAL_EXP$[ebp]
  03697	50		 push	 eax
  03698	8b 4d 08	 mov	 ecx, DWORD PTR _iUserIndex$[ebp]
  0369b	51		 push	 ecx
  0369c	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  036a1	e8 00 00 00 00	 call	 ?CrywolfMVPLevelUp@CCrywolfUtil@@QAEHHH@Z ; CCrywolfUtil::CrywolfMVPLevelUp
  036a6	89 45 f4	 mov	 DWORD PTR _iCAL_EXP$[ebp], eax
$LN3@GiveReward:

; 1373 : 			}
; 1374 : 
; 1375 : 			iMAX_LEVCOUNT++;

  036a9	8b 45 f0	 mov	 eax, DWORD PTR _iMAX_LEVCOUNT$[ebp]
  036ac	83 c0 01	 add	 eax, 1
  036af	89 45 f0	 mov	 DWORD PTR _iMAX_LEVCOUNT$[ebp], eax

; 1376 : 
; 1377 : 			if ( iMAX_LEVCOUNT > 5 )

  036b2	83 7d f0 05	 cmp	 DWORD PTR _iMAX_LEVCOUNT$[ebp], 5
  036b6	7e 38		 jle	 SHORT $LN2@GiveReward

; 1378 : 			{
; 1379 : 				LogAddTD("[ Crywolf ][GiveRewardExp] LevelUp Error [%s][%s]", gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);

  036b8	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  036bb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  036c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  036c7	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  036cb	52		 push	 edx
  036cc	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  036cf	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  036d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  036db	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  036df	52		 push	 edx
  036e0	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@
  036e5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  036eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1380 : 				break;

  036ee	eb 02		 jmp	 SHORT $LN4@GiveReward
$LN2@GiveReward:

; 1381 : 			}
; 1382 : 		}

  036f0	eb 96		 jmp	 SHORT $LN5@GiveReward
$LN4@GiveReward:

; 1383 : 
; 1384 : 		if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(&gObj[iUserIndex]) == FALSE) //season3 add-on

  036f2	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  036f5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  036fb	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03701	50		 push	 eax
  03702	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  03707	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  0370c	85 c0		 test	 eax, eax
  0370e	75 1b		 jne	 SHORT $LN10@GiveReward

; 1385 : 		{
; 1386 : 			GCKillPlayerExtSend(iUserIndex, (WORD)-1, iRewardExp, 0, 0);

  03710	6a 00		 push	 0
  03712	6a 00		 push	 0
  03714	8b 45 0c	 mov	 eax, DWORD PTR _iRewardExp$[ebp]
  03717	99		 cdq
  03718	52		 push	 edx
  03719	50		 push	 eax
  0371a	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0371f	8b 45 08	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  03722	50		 push	 eax
  03723	e8 00 00 00 00	 call	 ?GCKillPlayerExtSend@@YAXHH_JHH@Z ; GCKillPlayerExtSend
  03728	83 c4 18	 add	 esp, 24			; 00000018H
$LN10@GiveReward:

; 1387 : 		}
; 1388 : 	}
; 1389 : }

  0372b	5f		 pop	 edi
  0372c	5e		 pop	 esi
  0372d	5b		 pop	 ebx
  0372e	8b e5		 mov	 esp, ebp
  03730	5d		 pop	 ebp
  03731	c2 08 00	 ret	 8
?GiveRewardExp@CCrywolf@@QAEXHH@Z ENDP			; CCrywolf::GiveRewardExp
; Function compile flags: /Odtp /ZI
_i$231053 = -8						; size = 4
_this$ = -4						; size = 4
?ResetAllUserMVPScore@CCrywolf@@QAEXXZ PROC		; CCrywolf::ResetAllUserMVPScore
; _this$ = ecx

; 1392 : {

  03740	55		 push	 ebp
  03741	8b ec		 mov	 ebp, esp
  03743	83 ec 48	 sub	 esp, 72			; 00000048H
  03746	53		 push	 ebx
  03747	56		 push	 esi
  03748	57		 push	 edi
  03749	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1393 : 	for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0374c	c7 45 f8 b0 36
	00 00		 mov	 DWORD PTR _i$231053[ebp], 14000 ; 000036b0H
  03753	eb 09		 jmp	 SHORT $LN4@ResetAllUs
$LN3@ResetAllUs:
  03755	8b 45 f8	 mov	 eax, DWORD PTR _i$231053[ebp]
  03758	83 c0 01	 add	 eax, 1
  0375b	89 45 f8	 mov	 DWORD PTR _i$231053[ebp], eax
$LN4@ResetAllUs:
  0375e	81 7d f8 98 3a
	00 00		 cmp	 DWORD PTR _i$231053[ebp], 15000 ; 00003a98H
  03765	7d 67		 jge	 SHORT $LN5@ResetAllUs

; 1394 : 	{
; 1395 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  03767	8b 45 f8	 mov	 eax, DWORD PTR _i$231053[ebp]
  0376a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03770	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03776	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0377b	75 4f		 jne	 SHORT $LN1@ResetAllUs
  0377d	8b 45 f8	 mov	 eax, DWORD PTR _i$231053[ebp]
  03780	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03786	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0378c	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  03791	83 fa 01	 cmp	 edx, 1
  03794	75 36		 jne	 SHORT $LN1@ResetAllUs
  03796	8b 45 f8	 mov	 eax, DWORD PTR _i$231053[ebp]
  03799	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0379f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  037a5	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  037ad	83 fa 22	 cmp	 edx, 34			; 00000022H
  037b0	75 1a		 jne	 SHORT $LN1@ResetAllUs

; 1396 : 		{
; 1397 : 			gObj[i].m_iCrywolfMVPScore = 0;

  037b2	8b 45 f8	 mov	 eax, DWORD PTR _i$231053[ebp]
  037b5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  037bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  037c1	c7 84 01 c0 1f
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+8128], 0
$LN1@ResetAllUs:

; 1398 : 		}
; 1399 : 	}

  037cc	eb 87		 jmp	 SHORT $LN3@ResetAllUs
$LN5@ResetAllUs:

; 1400 : }

  037ce	5f		 pop	 edi
  037cf	5e		 pop	 esi
  037d0	5b		 pop	 ebx
  037d1	8b e5		 mov	 esp, ebp
  037d3	5d		 pop	 ebp
  037d4	c3		 ret	 0
?ResetAllUserMVPScore@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ResetAllUserMVPScore
_TEXT	ENDS
PUBLIC	?CrywolfNpcAct@CCrywolf@@QAEXH@Z		; CCrywolf::CrywolfNpcAct
EXTRN	?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z:PROC	; CCrywolfAltar::CrywolfAltarAct
EXTRN	?CrywolfStatueAct@CCrywolfStatue@@QAEXH@Z:PROC	; CCrywolfStatue::CrywolfStatueAct
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?CrywolfNpcAct@CCrywolf@@QAEXH@Z PROC			; CCrywolf::CrywolfNpcAct
; _this$ = ecx

; 1403 : {

  037e0	55		 push	 ebp
  037e1	8b ec		 mov	 ebp, esp
  037e3	83 ec 44	 sub	 esp, 68			; 00000044H
  037e6	53		 push	 ebx
  037e7	56		 push	 esi
  037e8	57		 push	 edi
  037e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1404 : 	if ( this->GetCrywolfState() == CRYWOLF_STATE_READY || this->GetCrywolfState() == CRYWOLF_STATE_START )

  037ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  037ef	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  037f4	83 f8 03	 cmp	 eax, 3
  037f7	74 0d		 je	 SHORT $LN1@CrywolfNpc
  037f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  037fc	e8 00 00 00 00	 call	 ?GetCrywolfState@CCrywolf@@QAEHXZ ; CCrywolf::GetCrywolfState
  03801	83 f8 04	 cmp	 eax, 4
  03804	75 1c		 jne	 SHORT $LN3@CrywolfNpc
$LN1@CrywolfNpc:

; 1405 : 	{
; 1406 : 		g_CrywolfNPC_Statue.CrywolfStatueAct(iIndex);

  03806	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  03809	50		 push	 eax
  0380a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A ; g_CrywolfNPC_Statue
  0380f	e8 00 00 00 00	 call	 ?CrywolfStatueAct@CCrywolfStatue@@QAEXH@Z ; CCrywolfStatue::CrywolfStatueAct

; 1407 : 		g_CrywolfNPC_Altar.CrywolfAltarAct(iIndex);

  03814	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  03817	50		 push	 eax
  03818	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0381d	e8 00 00 00 00	 call	 ?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::CrywolfAltarAct
$LN3@CrywolfNpc:

; 1408 : 	}
; 1409 : }

  03822	5f		 pop	 edi
  03823	5e		 pop	 esi
  03824	5b		 pop	 ebx
  03825	8b e5		 mov	 esp, ebp
  03827	5d		 pop	 ebp
  03828	c2 04 00	 ret	 4
?CrywolfNpcAct@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::CrywolfNpcAct
_TEXT	ENDS
PUBLIC	?CrywolfMonsterAct@CCrywolf@@QAEXH@Z		; CCrywolf::CrywolfMonsterAct
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?CrywolfMonsterAct@CCrywolf@@QAEXH@Z PROC		; CCrywolf::CrywolfMonsterAct
; _this$ = ecx

; 1412 : {

  03830	55		 push	 ebp
  03831	8b ec		 mov	 ebp, esp
  03833	83 ec 44	 sub	 esp, 68			; 00000044H
  03836	53		 push	 ebx
  03837	56		 push	 esi
  03838	57		 push	 edi
  03839	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1413 : 	return;
; 1414 : }

  0383c	5f		 pop	 edi
  0383d	5e		 pop	 esi
  0383e	5b		 pop	 ebx
  0383f	8b e5		 mov	 esp, ebp
  03841	5d		 pop	 ebp
  03842	c2 04 00	 ret	 4
?CrywolfMonsterAct@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::CrywolfMonsterAct
_TEXT	ENDS
PUBLIC	?CrywolfSecondAct@CCrywolf@@QAEXXZ		; CCrywolf::CrywolfSecondAct
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CrywolfSecondAct@CCrywolf@@QAEXXZ PROC			; CCrywolf::CrywolfSecondAct
; _this$ = ecx

; 1417 : {

  03850	55		 push	 ebp
  03851	8b ec		 mov	 ebp, esp
  03853	83 ec 44	 sub	 esp, 68			; 00000044H
  03856	53		 push	 ebx
  03857	56		 push	 esi
  03858	57		 push	 edi
  03859	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1418 : 	this->CrywolfServerGroupSync();

  0385c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0385f	e8 00 00 00 00	 call	 ?CrywolfServerGroupSync@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfServerGroupSync

; 1419 : 
; 1420 : 	if ( this->m_bDBDataLoadOK == FALSE && this->m_bDBDataLoading == FALSE )

  03864	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03867	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0386b	75 11		 jne	 SHORT $LN2@CrywolfSec
  0386d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03870	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  03874	75 08		 jne	 SHORT $LN2@CrywolfSec

; 1421 : 	{
; 1422 : 		this->CrywolfInfoDBLoad();

  03876	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03879	e8 00 00 00 00	 call	 ?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBLoad
$LN2@CrywolfSec:

; 1423 : 	}
; 1424 : }

  0387e	5f		 pop	 edi
  0387f	5e		 pop	 esi
  03880	5b		 pop	 ebx
  03881	8b e5		 mov	 esp, ebp
  03883	5d		 pop	 ebp
  03884	c3		 ret	 0
?CrywolfSecondAct@CCrywolf@@QAEXXZ ENDP			; CCrywolf::CrywolfSecondAct
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
PUBLIC	??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\set
;	COMDAT ??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T232054 = -70						; size = 1
$T232055 = -69						; size = 1
_this$ = -4						; size = 4
??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 81   : 		{	// construct empty set from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	33 c0		 xor	 eax, eax
  0000e	88 45 bb	 mov	 BYTE PTR $T232055[ebp], al
  00011	8d 4d ba	 lea	 ecx, DWORD PTR $T232054[ebp]
  00014	e8 00 00 00 00	 call	 ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ ; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
  00019	50		 push	 eax
  0001a	8d 4d bb	 lea	 ecx, DWORD PTR $T232055[ebp]
  0001d	51		 push	 ecx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >

; 82   : 		}

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
PUBLIC	?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tidy
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 791  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tidy

; 792  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
__ehhandler$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >
PUBLIC	?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 807  : 		return (iterator(_Lmost(), this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	51		 push	 ecx
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >
  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 808  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 817  : 		return (iterator(this->_Myhead, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 818  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
; Function compile flags: /Odtp /ZI
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator*, COMDAT
; _this$ = ecx

; 230  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 231  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 232  : 		if (this->_Getcont() == 0
; 233  : 			|| this->_Ptr == 0
; 234  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 235  : 			{	// report error
; 236  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 237  : 			_SCL_SECURE_OUT_OF_RANGE;
; 238  : 			}
; 239  : 
; 240  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 241  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 242  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 243  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 244  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 245  : 
; 246  : 		return (_Mytree::_Myval(this->_Ptr));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
  00017	83 c4 04	 add	 esp, 4

; 247  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
; Function compile flags: /Odtp /ZI
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  : 		_Myiter _Tmp = *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 272  : 		++*this;

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++

; 273  : 		return (_Tmp);

  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Tmp$[ebp]
  00022	89 08		 mov	 DWORD PTR [eax], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 274  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 336  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
PUBLIC	??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
$T232078 = -72						; size = 4
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T232078[ebp], esp
  00012	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ??0?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >

; 699  : 		}

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1758 : 		{	// return leftmost node in nonmutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00018	83 c4 04	 add	 esp, 4

; 1760 : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T232084 = -80						; size = 4
$T232085 = -76						; size = 4
$T232086 = -72						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1866 : 		erase(begin(), end());

  0000c	8d 45 b0	 lea	 eax, DWORD PTR $T232084[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	51		 push	 ecx
  0001b	8d 55 b4	 lea	 edx, DWORD PTR $T232085[ebp]
  0001e	52		 push	 edx
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin
  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	50		 push	 eax
  0002a	8d 4d b8	 lea	 ecx, DWORD PTR $T232086[ebp]
  0002d	51		 push	 ecx
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase

; 1867 : 		}

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 554  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  0000c	6a 01		 push	 1
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001b	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate

; 556  : 		}

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ PROC	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ ENDP	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>

; 214  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Odtp /ZI
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 267  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	33 c0		 xor	 eax, eax
  00016	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00018	0f 94 c0	 sete	 al

; 331  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z
_TEXT	SEGMENT
$T232101 = -84						; size = 4
$T232102 = -80						; size = 4
$T232103 = -76						; size = 4
$T232104 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1380 : 		if (_First == begin() && _Last == end())

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T232101[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin
  00018	50		 push	 eax
  00019	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0001c	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 37		 je	 SHORT $LN2@erase
  00028	8d 45 b0	 lea	 eax, DWORD PTR $T232102[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end
  00034	50		 push	 eax
  00035	8d 4d 10	 lea	 ecx, DWORD PTR __Last$[ebp]
  00038	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==
  0003d	0f b6 c8	 movzx	 ecx, al
  00040	85 c9		 test	 ecx, ecx
  00042	74 1b		 je	 SHORT $LN2@erase

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear

; 1383 : 			return (begin());

  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin
  00058	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005b	eb 47		 jmp	 SHORT $LN5@erase

; 1384 : 			}
; 1385 : 		else

  0005d	eb 45		 jmp	 SHORT $LN5@erase
$LN2@erase:

; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  0005f	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  00062	50		 push	 eax
  00063	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00066	e8 00 00 00 00	 call	 ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator!=
  0006b	0f b6 c8	 movzx	 ecx, al
  0006e	85 c9		 test	 ecx, ecx
  00070	74 1f		 je	 SHORT $LN1@erase

; 1388 : 				erase(_First++);

  00072	6a 00		 push	 0
  00074	8d 45 b4	 lea	 eax, DWORD PTR $T232103[ebp]
  00077	50		 push	 eax
  00078	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0007b	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
  00080	8b 08		 mov	 ecx, DWORD PTR [eax]
  00082	51		 push	 ecx
  00083	8d 55 b8	 lea	 edx, DWORD PTR $T232104[ebp]
  00086	52		 push	 edx
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
  0008f	eb ce		 jmp	 SHORT $LN2@erase
$LN1@erase:

; 1389 : 			return (iterator(_First._Ptr, this));

  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	50		 push	 eax
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00098	51		 push	 ecx
  00099	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0009c	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@erase:

; 1390 : 			}
; 1391 : 		}

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
PUBLIC	?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
PUBLIC	?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
PUBLIC	?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocate
PUBLIC	??0?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	8d 45 0c	 lea	 eax, DWORD PTR __Al$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >

; 543  : 		this->_Mysize = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  0002e	6a 01		 push	 1
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00036	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocate
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00056	89 08		 mov	 DWORD PTR [eax], ecx

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00064	83 c4 04	 add	 esp, 4
  00067	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  0007b	83 c4 04	 add	 esp, 4
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00084	89 08		 mov	 DWORD PTR [eax], ecx

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00092	83 c4 04	 add	 esp, 4
  00095	c6 00 01	 mov	 BYTE PTR [eax], 1

; 550  : 		this->_Isnil(this->_Myhead) = true;

  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  000a4	83 c4 04	 add	 esp, 4
  000a7	c6 00 01	 mov	 BYTE PTR [eax], 1

; 551  : 		}

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
??0?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z PROC	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 45   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min
; Function compile flags: /Odtp /ZI
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$231171 = -8					; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  00017	83 c4 04	 add	 esp, 4
  0001a	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0001d	85 d2		 test	 edx, edx
  0001f	74 05		 je	 SHORT $LN6@operator
  00021	e9 8d 00 00 00	 jmp	 $LN5@operator
$LN6@operator:

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00031	83 c4 04	 add	 esp, 4
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0003c	83 c4 04	 add	 esp, 4
  0003f	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00042	85 c0		 test	 eax, eax
  00044	75 20		 jne	 SHORT $LN2@operator

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00051	83 c4 04	 add	 esp, 4
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min
  0005c	83 c4 04	 add	 esp, 4
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	89 01		 mov	 DWORD PTR [ecx], eax

; 64   : 		else

  00064	eb 4d		 jmp	 SHORT $LN5@operator
$LN2@operator:

; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00071	83 c4 04	 add	 esp, 4
  00074	8b 10		 mov	 edx, DWORD PTR [eax]
  00076	89 55 f8	 mov	 DWORD PTR __Pnode$231171[ebp], edx
  00079	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231171[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  00082	83 c4 04	 add	 esp, 4
  00085	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00088	85 c9		 test	 ecx, ecx
  0008a	75 1f		 jne	 SHORT $LN1@operator
  0008c	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231171[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00095	83 c4 04	 add	 esp, 4
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009d	3b 10		 cmp	 edx, DWORD PTR [eax]
  0009f	75 0a		 jne	 SHORT $LN1@operator

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$231171[ebp]
  000a7	89 08		 mov	 DWORD PTR [eax], ecx
  000a9	eb bb		 jmp	 SHORT $LN2@operator
$LN1@operator:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$231171[ebp]
  000b1	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@operator:

; 71   : 			}
; 72   : 		return (*this);

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 73   : 		}

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>
PUBLIC	??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::addressof<OBJECTSTRUCT *>
PUBLIC	?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
PUBLIC	?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
PUBLIC	?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max
PUBLIC	?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
PUBLIC	?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z
_TEXT	SEGMENT
tv182 = -88						; size = 4
tv170 = -88						; size = 4
__Pnode$ = -20						; size = 4
__Fixnodeparent$ = -16					; size = 4
__Fixnode$ = -12					; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  0000c	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0001a	83 c4 04	 add	 esp, 4
  0001d	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00020	85 c0		 test	 eax, eax
  00022	74 0a		 je	 SHORT $LN40@erase@2

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  00029	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN40@erase@2:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

  0002e	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode
  00036	89 45 f8	 mov	 DWORD PTR __Erasednode$[ebp], eax

; 1207 : 		++_Where;	// save successor iterator for return

  00039	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0003c	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00044	89 45 ec	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  00047	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00050	83 c4 04	 add	 esp, 4
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0005b	83 c4 04	 add	 esp, 4
  0005e	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00061	85 d2		 test	 edx, edx
  00063	74 13		 je	 SHORT $LN39@erase@2

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00065	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  0006e	83 c4 04	 add	 esp, 4
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	89 4d f4	 mov	 DWORD PTR __Fixnode$[ebp], ecx
  00076	eb 4d		 jmp	 SHORT $LN38@erase@2
$LN39@erase@2:

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00078	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00081	83 c4 04	 add	 esp, 4
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0008c	83 c4 04	 add	 esp, 4
  0008f	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00092	85 d2		 test	 edx, edx
  00094	74 13		 je	 SHORT $LN37@erase@2

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00096	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  0009f	83 c4 04	 add	 esp, 4
  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a4	89 4d f4	 mov	 DWORD PTR __Fixnode$[ebp], ecx

; 1218 : 		else

  000a7	eb 1c		 jmp	 SHORT $LN38@erase@2
$LN37@erase@2:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  000a9	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  000ac	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode
  000b1	89 45 ec	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  000b4	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  000bd	83 c4 04	 add	 esp, 4
  000c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c2	89 4d f4	 mov	 DWORD PTR __Fixnode$[ebp], ecx
$LN38@erase@2:

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  000c5	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000c8	3b 45 f8	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  000cb	0f 85 1b 01 00
	00		 jne	 $LN35@erase@2

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);

  000d1	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  000da	83 c4 04	 add	 esp, 4
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	89 4d f0	 mov	 DWORD PTR __Fixnodeparent$[ebp], ecx

; 1227 : 			if (!this->_Isnil(_Fixnode))

  000e2	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  000eb	83 c4 04	 add	 esp, 4
  000ee	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000f1	85 c9		 test	 ecx, ecx
  000f3	75 11		 jne	 SHORT $LN34@erase@2

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  000f5	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  000fe	83 c4 04	 add	 esp, 4
  00101	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  00104	89 08		 mov	 DWORD PTR [eax], ecx
$LN34@erase@2:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  00106	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  0010e	8b 00		 mov	 eax, DWORD PTR [eax]
  00110	3b 45 f8	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00113	75 0f		 jne	 SHORT $LN33@erase@2

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00115	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  0011d	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  00120	89 08		 mov	 DWORD PTR [eax], ecx
  00122	eb 37		 jmp	 SHORT $LN32@erase@2
$LN33@erase@2:

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00124	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  0012d	83 c4 04	 add	 esp, 4
  00130	8b 08		 mov	 ecx, DWORD PTR [eax]
  00132	3b 4d f8	 cmp	 ecx, DWORD PTR __Erasednode$[ebp]
  00135	75 13		 jne	 SHORT $LN31@erase@2

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  00137	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00140	83 c4 04	 add	 esp, 4
  00143	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  00146	89 08		 mov	 DWORD PTR [eax], ecx

; 1234 : 			else

  00148	eb 11		 jmp	 SHORT $LN32@erase@2
$LN31@erase@2:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  0014a	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00153	83 c4 04	 add	 esp, 4
  00156	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  00159	89 08		 mov	 DWORD PTR [eax], ecx
$LN32@erase@2:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
  00163	8b 00		 mov	 eax, DWORD PTR [eax]
  00165	3b 45 f8	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00168	75 37		 jne	 SHORT $LN29@erase@2

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0016a	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  00173	83 c4 04	 add	 esp, 4
  00176	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00179	85 c9		 test	 ecx, ecx
  0017b	74 08		 je	 SHORT $LN43@erase@2
  0017d	8b 55 f0	 mov	 edx, DWORD PTR __Fixnodeparent$[ebp]
  00180	89 55 a8	 mov	 DWORD PTR tv170[ebp], edx
  00183	eb 0f		 jmp	 SHORT $LN44@erase@2
$LN43@erase@2:
  00185	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min
  0018e	83 c4 04	 add	 esp, 4
  00191	89 45 a8	 mov	 DWORD PTR tv170[ebp], eax
$LN44@erase@2:
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
  0019c	8b 4d a8	 mov	 ecx, DWORD PTR tv170[ebp]
  0019f	89 08		 mov	 DWORD PTR [eax], ecx
$LN29@erase@2:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  001a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a4	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
  001a9	8b 00		 mov	 eax, DWORD PTR [eax]
  001ab	3b 45 f8	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  001ae	75 37		 jne	 SHORT $LN28@erase@2

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  001b0	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  001b9	83 c4 04	 add	 esp, 4
  001bc	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001bf	85 c9		 test	 ecx, ecx
  001c1	74 08		 je	 SHORT $LN45@erase@2
  001c3	8b 55 f0	 mov	 edx, DWORD PTR __Fixnodeparent$[ebp]
  001c6	89 55 a8	 mov	 DWORD PTR tv182[ebp], edx
  001c9	eb 0f		 jmp	 SHORT $LN46@erase@2
$LN45@erase@2:
  001cb	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max
  001d4	83 c4 04	 add	 esp, 4
  001d7	89 45 a8	 mov	 DWORD PTR tv182[ebp], eax
$LN46@erase@2:
  001da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001dd	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
  001e2	8b 4d a8	 mov	 ecx, DWORD PTR tv182[ebp]
  001e5	89 08		 mov	 DWORD PTR [eax], ecx
$LN28@erase@2:

; 1247 : 			}
; 1248 : 		else

  001e7	e9 8e 01 00 00	 jmp	 $LN27@erase@2
$LN35@erase@2:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  001ec	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  001f5	83 c4 04	 add	 esp, 4
  001f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fa	51		 push	 ecx
  001fb	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00200	83 c4 04	 add	 esp, 4
  00203	8b 55 ec	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00206	89 10		 mov	 DWORD PTR [eax], edx

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  00208	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00211	83 c4 04	 add	 esp, 4
  00214	8b f0		 mov	 esi, eax
  00216	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00219	51		 push	 ecx
  0021a	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  0021f	83 c4 04	 add	 esp, 4
  00222	8b 16		 mov	 edx, DWORD PTR [esi]
  00224	89 10		 mov	 DWORD PTR [eax], edx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  00226	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  0022f	83 c4 04	 add	 esp, 4
  00232	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00235	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00237	75 0b		 jne	 SHORT $LN26@erase@2

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  00239	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0023c	89 45 f0	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax

; 1257 : 			else

  0023f	e9 80 00 00 00	 jmp	 $LN25@erase@2
$LN26@erase@2:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's

  00244	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0024d	83 c4 04	 add	 esp, 4
  00250	8b 08		 mov	 ecx, DWORD PTR [eax]
  00252	89 4d f0	 mov	 DWORD PTR __Fixnodeparent$[ebp], ecx

; 1261 : 				if (!this->_Isnil(_Fixnode))

  00255	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0025e	83 c4 04	 add	 esp, 4
  00261	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00264	85 c9		 test	 ecx, ecx
  00266	75 11		 jne	 SHORT $LN24@erase@2

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  00268	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0026b	50		 push	 eax
  0026c	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00271	83 c4 04	 add	 esp, 4
  00274	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  00277	89 08		 mov	 DWORD PTR [eax], ecx
$LN24@erase@2:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  00279	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00282	83 c4 04	 add	 esp, 4
  00285	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  00288	89 08		 mov	 DWORD PTR [eax], ecx

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  0028a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0028d	50		 push	 eax
  0028e	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00293	83 c4 04	 add	 esp, 4
  00296	8b f0		 mov	 esi, eax
  00298	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0029b	51		 push	 ecx
  0029c	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  002a1	83 c4 04	 add	 esp, 4
  002a4	8b 16		 mov	 edx, DWORD PTR [esi]
  002a6	89 10		 mov	 DWORD PTR [eax], edx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  002a8	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  002b1	83 c4 04	 add	 esp, 4
  002b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b6	51		 push	 ecx
  002b7	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  002bc	83 c4 04	 add	 esp, 4
  002bf	8b 55 ec	 mov	 edx, DWORD PTR __Pnode$[ebp]
  002c2	89 10		 mov	 DWORD PTR [eax], edx
$LN25@erase@2:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  002c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c7	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  002cc	8b 00		 mov	 eax, DWORD PTR [eax]
  002ce	3b 45 f8	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  002d1	75 0f		 jne	 SHORT $LN23@erase@2

; 1271 : 				_Root() = _Pnode;	// link down from root

  002d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d6	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  002db	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  002de	89 08		 mov	 DWORD PTR [eax], ecx
  002e0	eb 58		 jmp	 SHORT $LN22@erase@2
$LN23@erase@2:

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  002e2	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  002eb	83 c4 04	 add	 esp, 4
  002ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  002f6	83 c4 04	 add	 esp, 4
  002f9	8b 10		 mov	 edx, DWORD PTR [eax]
  002fb	3b 55 f8	 cmp	 edx, DWORD PTR __Erasednode$[ebp]
  002fe	75 1e		 jne	 SHORT $LN21@erase@2

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  00300	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00309	83 c4 04	 add	 esp, 4
  0030c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030e	51		 push	 ecx
  0030f	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00314	83 c4 04	 add	 esp, 4
  00317	8b 55 ec	 mov	 edx, DWORD PTR __Pnode$[ebp]
  0031a	89 10		 mov	 DWORD PTR [eax], edx

; 1275 : 			else

  0031c	eb 1c		 jmp	 SHORT $LN22@erase@2
$LN21@erase@2:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  0031e	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00327	83 c4 04	 add	 esp, 4
  0032a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032c	51		 push	 ecx
  0032d	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00332	83 c4 04	 add	 esp, 4
  00335	8b 55 ec	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00338	89 10		 mov	 DWORD PTR [eax], edx
$LN22@erase@2:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  0033a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0033d	50		 push	 eax
  0033e	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00343	83 c4 04	 add	 esp, 4
  00346	8b f0		 mov	 esi, eax
  00348	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0034b	51		 push	 ecx
  0034c	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00351	83 c4 04	 add	 esp, 4
  00354	8b 16		 mov	 edx, DWORD PTR [esi]
  00356	89 10		 mov	 DWORD PTR [eax], edx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  00358	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00361	83 c4 04	 add	 esp, 4
  00364	50		 push	 eax
  00365	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00368	51		 push	 ecx
  00369	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  0036e	83 c4 04	 add	 esp, 4
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 ??$swap@D@std@@YAXAAD0@Z ; std::swap<char>
  00377	83 c4 08	 add	 esp, 8
$LN27@erase@2:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  0037a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0037d	50		 push	 eax
  0037e	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00383	83 c4 04	 add	 esp, 4
  00386	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00389	83 f9 01	 cmp	 ecx, 1
  0038c	0f 85 8f 03 00
	00		 jne	 $LN19@erase@2
  00392	eb 11		 jmp	 SHORT $LN18@erase@2
$LN17@erase@2:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00394	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00397	50		 push	 eax
  00398	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0039d	83 c4 04	 add	 esp, 4
  003a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a2	89 4d f0	 mov	 DWORD PTR __Fixnodeparent$[ebp], ecx
$LN18@erase@2:
  003a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a8	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  003ad	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  003b0	3b 08		 cmp	 ecx, DWORD PTR [eax]
  003b2	0f 84 5a 03 00
	00		 je	 $LN16@erase@2
  003b8	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  003bb	50		 push	 eax
  003bc	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  003c1	83 c4 04	 add	 esp, 4
  003c4	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  003c7	83 f9 01	 cmp	 ecx, 1
  003ca	0f 85 42 03 00
	00		 jne	 $LN16@erase@2

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  003d0	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003d3	50		 push	 eax
  003d4	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  003d9	83 c4 04	 add	 esp, 4
  003dc	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  003df	3b 08		 cmp	 ecx, DWORD PTR [eax]
  003e1	0f 85 97 01 00
	00		 jne	 $LN15@erase@2

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  003e7	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003ea	50		 push	 eax
  003eb	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  003f0	83 c4 04	 add	 esp, 4
  003f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f5	89 4d ec	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  003f8	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003fb	50		 push	 eax
  003fc	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00401	83 c4 04	 add	 esp, 4
  00404	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00407	85 c9		 test	 ecx, ecx
  00409	75 3b		 jne	 SHORT $LN14@erase@2

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  0040b	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0040e	50		 push	 eax
  0040f	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00414	83 c4 04	 add	 esp, 4
  00417	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;

  0041a	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00423	83 c4 04	 add	 esp, 4
  00426	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1297 : 						_Lrotate(_Fixnodeparent);

  00429	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0042c	50		 push	 eax
  0042d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00430	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  00435	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00438	50		 push	 eax
  00439	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  0043e	83 c4 04	 add	 esp, 4
  00441	8b 08		 mov	 ecx, DWORD PTR [eax]
  00443	89 4d ec	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN14@erase@2:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  00446	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00449	50		 push	 eax
  0044a	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0044f	83 c4 04	 add	 esp, 4
  00452	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00455	85 c9		 test	 ecx, ecx
  00457	74 0b		 je	 SHORT $LN13@erase@2

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

  00459	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0045c	89 45 f4	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  0045f	e9 15 01 00 00	 jmp	 $LN12@erase@2
$LN13@erase@2:

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00464	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00467	50		 push	 eax
  00468	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  0046d	83 c4 04	 add	 esp, 4
  00470	8b 08		 mov	 ecx, DWORD PTR [eax]
  00472	51		 push	 ecx
  00473	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00478	83 c4 04	 add	 esp, 4
  0047b	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0047e	83 fa 01	 cmp	 edx, 1
  00481	75 39		 jne	 SHORT $LN11@erase@2
  00483	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  0048c	83 c4 04	 add	 esp, 4
  0048f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00491	51		 push	 ecx
  00492	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00497	83 c4 04	 add	 esp, 4
  0049a	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0049d	83 fa 01	 cmp	 edx, 1
  004a0	75 1a		 jne	 SHORT $LN11@erase@2

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;

  004a2	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  004a5	50		 push	 eax
  004a6	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  004ab	83 c4 04	 add	 esp, 4
  004ae	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1307 : 						_Fixnode = _Fixnodeparent;

  004b1	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  004b4	89 45 f4	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 1308 : 						}
; 1309 : 					else

  004b7	e9 bd 00 00 00	 jmp	 $LN12@erase@2
$LN11@erase@2:

; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  004bc	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  004c5	83 c4 04	 add	 esp, 4
  004c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ca	51		 push	 ecx
  004cb	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  004d0	83 c4 04	 add	 esp, 4
  004d3	0f be 10	 movsx	 edx, BYTE PTR [eax]
  004d6	83 fa 01	 cmp	 edx, 1
  004d9	75 46		 jne	 SHORT $LN9@erase@2

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  004db	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  004de	50		 push	 eax
  004df	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  004e4	83 c4 04	 add	 esp, 4
  004e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  004e9	51		 push	 ecx
  004ea	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  004ef	83 c4 04	 add	 esp, 4
  004f2	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1315 : 							this->_Color(_Pnode) = this->_Red;

  004f5	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  004f8	50		 push	 eax
  004f9	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  004fe	83 c4 04	 add	 esp, 4
  00501	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1316 : 							_Rrotate(_Pnode);

  00504	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00507	50		 push	 eax
  00508	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0050b	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  00510	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00513	50		 push	 eax
  00514	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00519	83 c4 04	 add	 esp, 4
  0051c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0051e	89 4d ec	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN9@erase@2:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00521	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00524	50		 push	 eax
  00525	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  0052a	83 c4 04	 add	 esp, 4
  0052d	8b f0		 mov	 esi, eax
  0052f	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00532	51		 push	 ecx
  00533	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00538	83 c4 04	 add	 esp, 4
  0053b	8a 16		 mov	 dl, BYTE PTR [esi]
  0053d	88 10		 mov	 BYTE PTR [eax], dl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;

  0053f	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00542	50		 push	 eax
  00543	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00548	83 c4 04	 add	 esp, 4
  0054b	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  0054e	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00551	50		 push	 eax
  00552	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00557	83 c4 04	 add	 esp, 4
  0055a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0055c	51		 push	 ecx
  0055d	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00562	83 c4 04	 add	 esp, 4
  00565	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1323 : 						_Lrotate(_Fixnodeparent);

  00568	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0056b	50		 push	 eax
  0056c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0056f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  00574	e9 99 01 00 00	 jmp	 $LN16@erase@2
$LN12@erase@2:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else

  00579	e9 8f 01 00 00	 jmp	 $LN8@erase@2
$LN15@erase@2:

; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);

  0057e	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00581	50		 push	 eax
  00582	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00587	83 c4 04	 add	 esp, 4
  0058a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0058c	89 4d ec	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  0058f	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00592	50		 push	 eax
  00593	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00598	83 c4 04	 add	 esp, 4
  0059b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0059e	85 c9		 test	 ecx, ecx
  005a0	75 3b		 jne	 SHORT $LN7@erase@2

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  005a2	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  005a5	50		 push	 eax
  005a6	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  005ab	83 c4 04	 add	 esp, 4
  005ae	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;

  005b1	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  005b4	50		 push	 eax
  005b5	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  005ba	83 c4 04	 add	 esp, 4
  005bd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1334 : 						_Rrotate(_Fixnodeparent);

  005c0	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  005c3	50		 push	 eax
  005c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c7	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  005cc	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  005cf	50		 push	 eax
  005d0	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  005d5	83 c4 04	 add	 esp, 4
  005d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  005da	89 4d ec	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN7@erase@2:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  005dd	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  005e0	50		 push	 eax
  005e1	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  005e6	83 c4 04	 add	 esp, 4
  005e9	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  005ec	85 c9		 test	 ecx, ecx
  005ee	74 0b		 je	 SHORT $LN6@erase@2

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

  005f0	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  005f3	89 45 f4	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  005f6	e9 12 01 00 00	 jmp	 $LN8@erase@2
$LN6@erase@2:

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  005fb	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  005fe	50		 push	 eax
  005ff	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00604	83 c4 04	 add	 esp, 4
  00607	8b 08		 mov	 ecx, DWORD PTR [eax]
  00609	51		 push	 ecx
  0060a	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  0060f	83 c4 04	 add	 esp, 4
  00612	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00615	83 fa 01	 cmp	 edx, 1
  00618	75 39		 jne	 SHORT $LN4@erase@2
  0061a	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0061d	50		 push	 eax
  0061e	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00623	83 c4 04	 add	 esp, 4
  00626	8b 08		 mov	 ecx, DWORD PTR [eax]
  00628	51		 push	 ecx
  00629	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  0062e	83 c4 04	 add	 esp, 4
  00631	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00634	83 fa 01	 cmp	 edx, 1
  00637	75 1a		 jne	 SHORT $LN4@erase@2

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  00639	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0063c	50		 push	 eax
  0063d	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00642	83 c4 04	 add	 esp, 4
  00645	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1344 : 						_Fixnode = _Fixnodeparent;

  00648	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0064b	89 45 f4	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 1345 : 						}
; 1346 : 					else

  0064e	e9 ba 00 00 00	 jmp	 $LN8@erase@2
$LN4@erase@2:

; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  00653	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00656	50		 push	 eax
  00657	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  0065c	83 c4 04	 add	 esp, 4
  0065f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00661	51		 push	 ecx
  00662	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00667	83 c4 04	 add	 esp, 4
  0066a	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0066d	83 fa 01	 cmp	 edx, 1
  00670	75 46		 jne	 SHORT $LN2@erase@2

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  00672	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00675	50		 push	 eax
  00676	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  0067b	83 c4 04	 add	 esp, 4
  0067e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00680	51		 push	 ecx
  00681	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00686	83 c4 04	 add	 esp, 4
  00689	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1351 : 							this->_Color(_Pnode) = this->_Red;

  0068c	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0068f	50		 push	 eax
  00690	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00695	83 c4 04	 add	 esp, 4
  00698	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1352 : 							_Lrotate(_Pnode);

  0069b	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0069e	50		 push	 eax
  0069f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006a2	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  006a7	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  006aa	50		 push	 eax
  006ab	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  006b0	83 c4 04	 add	 esp, 4
  006b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  006b5	89 4d ec	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN2@erase@2:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  006b8	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  006bb	50		 push	 eax
  006bc	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  006c1	83 c4 04	 add	 esp, 4
  006c4	8b f0		 mov	 esi, eax
  006c6	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  006c9	51		 push	 ecx
  006ca	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  006cf	83 c4 04	 add	 esp, 4
  006d2	8a 16		 mov	 dl, BYTE PTR [esi]
  006d4	88 10		 mov	 BYTE PTR [eax], dl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;

  006d6	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  006d9	50		 push	 eax
  006da	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  006df	83 c4 04	 add	 esp, 4
  006e2	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  006e5	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  006e8	50		 push	 eax
  006e9	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  006ee	83 c4 04	 add	 esp, 4
  006f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f3	51		 push	 ecx
  006f4	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  006f9	83 c4 04	 add	 esp, 4
  006fc	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1359 : 						_Rrotate(_Fixnodeparent);

  006ff	8b 45 f0	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00702	50		 push	 eax
  00703	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00706	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate

; 1360 : 						break;	// tree now recolored/rebalanced

  0070b	eb 05		 jmp	 SHORT $LN16@erase@2
$LN8@erase@2:

; 1361 : 						}
; 1362 : 					}

  0070d	e9 82 fc ff ff	 jmp	 $LN17@erase@2
$LN16@erase@2:

; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  00712	8b 45 f4	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00715	50		 push	 eax
  00716	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  0071b	83 c4 04	 add	 esp, 4
  0071e	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN19@erase@2:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node

  00721	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00724	50		 push	 eax
  00725	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
  0072a	83 c4 04	 add	 esp, 4
  0072d	50		 push	 eax
  0072e	e8 00 00 00 00	 call	 ??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::addressof<OBJECTSTRUCT *>
  00733	83 c4 04	 add	 esp, 4
  00736	50		 push	 eax
  00737	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0073a	83 c1 0d	 add	 ecx, 13			; 0000000dH
  0073d	51		 push	 ecx
  0073e	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>
  00743	83 c4 08	 add	 esp, 8

; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  00746	6a 01		 push	 1
  00748	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0074b	50		 push	 eax
  0074c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0074f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00752	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  00757	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0075a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0075e	76 0f		 jbe	 SHORT $LN1@erase@2

; 1373 : 			--this->_Mysize;

  00760	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00763	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00766	83 e9 01	 sub	 ecx, 1
  00769	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0076c	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN1@erase@2:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  0076f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00772	50		 push	 eax
  00773	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00776	51		 push	 ecx
  00777	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0077a	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >
  0077f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN42@erase@2:

; 1376 : 		}

  00782	5f		 pop	 edi
  00783	5e		 pop	 esi
  00784	5b		 pop	 ebx
  00785	8b e5		 mov	 esp, ebp
  00787	5d		 pop	 ebp
  00788	c2 08 00	 ret	 8
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase

; 1416 : 		_Root() = this->_Myhead;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002d	89 10		 mov	 DWORD PTR [eax], edx

; 1417 : 		_Lmost() = this->_Myhead;

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003d	89 10		 mov	 DWORD PTR [eax], edx

; 1418 : 		_Rmost() = this->_Myhead;

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004d	89 10		 mov	 DWORD PTR [eax], edx

; 1419 : 		this->_Mysize = 0;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1420 : 		}

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 607  : 		return ((char&)(*_Pnode)._Color);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	83 c0 10	 add	 eax, 16			; 00000010H

; 608  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	83 c0 11	 add	 eax, 17			; 00000011H

; 613  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	83 c0 04	 add	 eax, 4

; 628  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	83 c0 08	 add	 eax, 8

; 633  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@Min:

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00012	83 c4 04	 add	 esp, 4
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0001d	83 c4 04	 add	 esp, 4
  00020	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00023	85 d2		 test	 edx, edx
  00025	75 13		 jne	 SHORT $LN1@Min

; 650  : 			_Pnode = _Left(_Pnode);

  00027	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00030	83 c4 04	 add	 esp, 4
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 4d 08	 mov	 DWORD PTR __Pnode$[ebp], ecx
  00038	eb cf		 jmp	 SHORT $LN2@Min
$LN1@Min:

; 651  : 		return (_Pnode);

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 652  : 		}

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min
_TEXT	ENDS
PUBLIC	??$?0PAUOBJECTSTRUCT@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node><OBJECTSTRUCT *>
PUBLIC	??0?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@QAE@VCCrywolfScoreSort@@@Z ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  0000f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00012	51		 push	 ecx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??0?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@QAE@VCCrywolfScoreSort@@@Z ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>
  0001b	8d 45 0c	 lea	 eax, DWORD PTR __Al$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00025	e8 00 00 00 00	 call	 ??$?0PAUOBJECTSTRUCT@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node><OBJECTSTRUCT *>
  0002a	8d 45 0c	 lea	 eax, DWORD PTR __Al$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 0d	 add	 ecx, 13			; 0000000dH
  00034	e8 00 00 00 00	 call	 ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>

; 483  : 		}

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocate
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$231286 = -8					; size = 4
_this$ = -4						; size = 4
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __Pnode$231286[ebp], eax
  00012	eb 06		 jmp	 SHORT $LN3@Erase
$LN2@Erase:

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00014	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231286[ebp]
  00017	89 45 08	 mov	 DWORD PTR __Rootnode$[ebp], eax
$LN3@Erase:
  0001a	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231286[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  00023	83 c4 04	 add	 esp, 4
  00026	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00029	85 c9		 test	 ecx, ecx
  0002b	75 60		 jne	 SHORT $LN4@Erase

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  0002d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231286[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00036	83 c4 04	 add	 esp, 4
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231286[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	89 4d f8	 mov	 DWORD PTR __Pnode$231286[ebp], ecx

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));

  00055	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
  0005e	83 c4 04	 add	 esp, 4
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::addressof<OBJECTSTRUCT *>
  00067	83 c4 04	 add	 esp, 4
  0006a	50		 push	 eax
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	83 c1 0d	 add	 ecx, 13			; 0000000dH
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>
  00077	83 c4 08	 add	 esp, 8

; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  0007a	6a 01		 push	 1
  0007c	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00086	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate

; 1620 : 			}

  0008b	eb 87		 jmp	 SHORT $LN2@Erase
$LN4@Erase:

; 1621 : 		}

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00015	83 c4 04	 add	 esp, 4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d f8	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0001d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00026	83 c4 04	 add	 esp, 4
  00029	8b f0		 mov	 esi, eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00034	83 c4 04	 add	 esp, 4
  00037	8b 16		 mov	 edx, DWORD PTR [esi]
  00039	89 10		 mov	 DWORD PTR [eax], edx

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0003b	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00044	83 c4 04	 add	 esp, 4
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0004f	83 c4 04	 add	 esp, 4
  00052	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00055	85 d2		 test	 edx, edx
  00057	75 1c		 jne	 SHORT $LN5@Lrotate

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00059	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00062	83 c4 04	 add	 esp, 4
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0006d	83 c4 04	 add	 esp, 4
  00070	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00073	89 10		 mov	 DWORD PTR [eax], edx
$LN5@Lrotate:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  00075	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0007e	83 c4 04	 add	 esp, 4
  00081	8b f0		 mov	 esi, eax
  00083	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0008c	83 c4 04	 add	 esp, 4
  0008f	8b 16		 mov	 edx, DWORD PTR [esi]
  00091	89 10		 mov	 DWORD PTR [eax], edx

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0009e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000a0	75 0f		 jne	 SHORT $LN4@Lrotate

; 1772 : 			_Root() = _Pnode;

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  000aa	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  000ad	89 08		 mov	 DWORD PTR [eax], ecx
  000af	eb 58		 jmp	 SHORT $LN3@Lrotate
$LN4@Lrotate:

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  000b1	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  000ba	83 c4 04	 add	 esp, 4
  000bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  000c5	83 c4 04	 add	 esp, 4
  000c8	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  000cb	3b 10		 cmp	 edx, DWORD PTR [eax]
  000cd	75 1e		 jne	 SHORT $LN2@Lrotate

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  000cf	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  000d8	83 c4 04	 add	 esp, 4
  000db	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dd	51		 push	 ecx
  000de	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  000e3	83 c4 04	 add	 esp, 4
  000e6	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  000e9	89 10		 mov	 DWORD PTR [eax], edx

; 1775 : 		else

  000eb	eb 1c		 jmp	 SHORT $LN3@Lrotate
$LN2@Lrotate:

; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  000ed	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  000f6	83 c4 04	 add	 esp, 4
  000f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00101	83 c4 04	 add	 esp, 4
  00104	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00107	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Lrotate:

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  00109	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00112	83 c4 04	 add	 esp, 4
  00115	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00118	89 08		 mov	 DWORD PTR [eax], ecx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0011a	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00123	83 c4 04	 add	 esp, 4
  00126	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00129	89 08		 mov	 DWORD PTR [eax], ecx

; 1780 : 		}

  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1783 : 		{	// return rightmost node in nonmutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00018	83 c4 04	 add	 esp, 4

; 1785 : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root, COMDAT
; _this$ = ecx

; 1788 : 		{	// return root of nonmutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00018	83 c4 04	 add	 esp, 4

; 1790 : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00015	83 c4 04	 add	 esp, 4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d f8	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  0001d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00026	83 c4 04	 add	 esp, 4
  00029	8b f0		 mov	 esi, eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00034	83 c4 04	 add	 esp, 4
  00037	8b 16		 mov	 edx, DWORD PTR [esi]
  00039	89 10		 mov	 DWORD PTR [eax], edx

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0003b	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00044	83 c4 04	 add	 esp, 4
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0004f	83 c4 04	 add	 esp, 4
  00052	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00055	85 d2		 test	 edx, edx
  00057	75 1c		 jne	 SHORT $LN5@Rrotate

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00059	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00062	83 c4 04	 add	 esp, 4
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0006d	83 c4 04	 add	 esp, 4
  00070	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00073	89 10		 mov	 DWORD PTR [eax], edx
$LN5@Rrotate:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  00075	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0007e	83 c4 04	 add	 esp, 4
  00081	8b f0		 mov	 esi, eax
  00083	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0008c	83 c4 04	 add	 esp, 4
  0008f	8b 16		 mov	 edx, DWORD PTR [esi]
  00091	89 10		 mov	 DWORD PTR [eax], edx

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0009e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000a0	75 0f		 jne	 SHORT $LN4@Rrotate

; 1802 : 			_Root() = _Pnode;

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  000aa	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  000ad	89 08		 mov	 DWORD PTR [eax], ecx
  000af	eb 58		 jmp	 SHORT $LN3@Rrotate
$LN4@Rrotate:

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  000b1	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  000ba	83 c4 04	 add	 esp, 4
  000bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  000c5	83 c4 04	 add	 esp, 4
  000c8	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  000cb	3b 10		 cmp	 edx, DWORD PTR [eax]
  000cd	75 1e		 jne	 SHORT $LN2@Rrotate

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  000cf	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  000d8	83 c4 04	 add	 esp, 4
  000db	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dd	51		 push	 ecx
  000de	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  000e3	83 c4 04	 add	 esp, 4
  000e6	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  000e9	89 10		 mov	 DWORD PTR [eax], edx

; 1805 : 		else

  000eb	eb 1c		 jmp	 SHORT $LN3@Rrotate
$LN2@Rrotate:

; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  000ed	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  000f6	83 c4 04	 add	 esp, 4
  000f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00101	83 c4 04	 add	 esp, 4
  00104	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00107	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Rrotate:

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00109	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00112	83 c4 04	 add	 esp, 4
  00115	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00118	89 08		 mov	 DWORD PTR [eax], ecx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  0011a	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00123	83 c4 04	 add	 esp, 4
  00126	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00129	89 08		 mov	 DWORD PTR [eax], ecx

; 1810 : 		}

  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@Max:

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00012	83 c4 04	 add	 esp, 4
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0001d	83 c4 04	 add	 esp, 4
  00020	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00023	85 d2		 test	 edx, edx
  00025	75 13		 jne	 SHORT $LN1@Max

; 643  : 			_Pnode = _Right(_Pnode);

  00027	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00030	83 c4 04	 add	 esp, 4
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 4d 08	 mov	 DWORD PTR __Pnode$[ebp], ecx
  00038	eb cf		 jmp	 SHORT $LN2@Max
$LN1@Max:

; 644  : 		return (_Pnode);

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 645  : 		}

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\set
_TEXT	ENDS
;	COMDAT ??0?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@QAE@VCCrywolfScoreSort@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 1
??0?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@QAE@VCCrywolfScoreSort@@@Z PROC ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with specified comparator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@QAE@VCCrywolfScoreSort@@@Z ENDP ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 121  : 		{	// return node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 122  : 		return (_Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 123  : 		}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Linsert
PUBLIC	??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>
PUBLIC	??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::forward<OBJECTSTRUCT *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$insert@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@1@$$QAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@1@$$QAPAUOBJECTSTRUCT@@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::insert<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 753  : 		_Pairib insert(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 754  : 		{	// try to insert node with value _Val, favoring right side
; 755  : 		return (_Linsert(this->_Buynode(_STD forward<_Valty>(_Val)),
; 756  : 			false));

  0000c	6a 00		 push	 0
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::forward<OBJECTSTRUCT *>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Linsert
  00030	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 757  : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
??$insert@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@1@$$QAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::insert<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Tmp$ = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 102  : 	_Ty _Tmp = _Move(_Left);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$_Move@AAD@std@@YA$$QADAAD@Z ; std::_Move<char &>
  00012	83 c4 04	 add	 esp, 4
  00015	8a 08		 mov	 cl, BYTE PTR [eax]
  00017	88 4d ff	 mov	 BYTE PTR __Tmp$[ebp], cl

; 103  : 	_Left = _Move(_Right);

  0001a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$_Move@AAD@std@@YA$$QADAAD@Z ; std::_Move<char &>
  00023	83 c4 04	 add	 esp, 4
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00029	8a 10		 mov	 dl, BYTE PTR [eax]
  0002b	88 11		 mov	 BYTE PTR [ecx], dl

; 104  : 	_Right = _Move(_Tmp);

  0002d	8d 45 ff	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Move@AAD@std@@YA$$QADAAD@Z ; std::_Move<char &>
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003c	8a 10		 mov	 dl, BYTE PTR [eax]
  0003e	88 11		 mov	 BYTE PTR [ecx], dl

; 105  : 	}

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::addressof<OBJECTSTRUCT *>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::addressof<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z ; std::allocator<OBJECTSTRUCT *>::destroy
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z PROC ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z ; std::allocator<OBJECTSTRUCT *>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$?0PAUOBJECTSTRUCT@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAUOBJECTSTRUCT@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node><OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??$?0PAUOBJECTSTRUCT@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node><OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T232168 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 cc cc
	cc 0c		 cmp	 DWORD PTR __Count$[ebp], 214748364 ; 0cccccccH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	6b c0 14	 imul	 eax, 20			; 00000014H
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T232168[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T232168[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator--
PUBLIC	??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
PUBLIC	?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert
PUBLIC	??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z	; CCrywolfScoreSort::operator()
PUBLIC	?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key
PUBLIC	?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
tv147 = -124						; size = 4
$T232174 = -117						; size = 1
$T232175 = -116						; size = 4
$T232176 = -112						; size = 4
$T232177 = -105						; size = 1
$T232178 = -104						; size = 4
$T232179 = -97						; size = 1
$T232180 = -96						; size = 4
$T232181 = -89						; size = 1
__Where$231429 = -24					; size = 4
__Addleft$ = -17					; size = 1
__Wherenode$ = -16					; size = 4
__Trynode$ = -12					; size = 4
__Val$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 945  : 		const value_type& _Val = this->_Myval(_Node);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Node$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
  00015	83 c4 04	 add	 esp, 4
  00018	89 45 f8	 mov	 DWORD PTR __Val$[ebp], eax

; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
  00025	89 45 f4	 mov	 DWORD PTR __Trynode$[ebp], eax

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002e	89 4d f0	 mov	 DWORD PTR __Wherenode$[ebp], ecx

; 949  : 		bool _Addleft = true;	// add to left of head if tree empty

  00031	c6 45 ef 01	 mov	 BYTE PTR __Addleft$[ebp], 1
$LN12@Linsert:

; 950  : 		while (!this->_Isnil(_Trynode))

  00035	8b 45 f4	 mov	 eax, DWORD PTR __Trynode$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  0003e	83 c4 04	 add	 esp, 4
  00041	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00044	85 c9		 test	 ecx, ecx
  00046	0f 85 a3 00 00
	00		 jne	 $LN11@Linsert

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;

  0004c	8b 45 f4	 mov	 eax, DWORD PTR __Trynode$[ebp]
  0004f	89 45 f0	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 953  : 			if (_Leftish)

  00052	0f b6 45 10	 movzx	 eax, BYTE PTR __Leftish$[ebp]
  00056	85 c0		 test	 eax, eax
  00058	74 35		 je	 SHORT $LN10@Linsert

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  0005a	8b 45 f8	 mov	 eax, DWORD PTR __Val$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn
  00063	83 c4 04	 add	 esp, 4
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	51		 push	 ecx
  00069	8b 55 f4	 mov	 edx, DWORD PTR __Trynode$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key
  00072	83 c4 04	 add	 esp, 4
  00075	8b 00		 mov	 eax, DWORD PTR [eax]
  00077	50		 push	 eax
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z ; CCrywolfScoreSort::operator()
  00080	0f b6 c8	 movzx	 ecx, al
  00083	f7 d9		 neg	 ecx
  00085	1b c9		 sbb	 ecx, ecx
  00087	83 c1 01	 add	 ecx, 1
  0008a	88 4d ef	 mov	 BYTE PTR __Addleft$[ebp], cl

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  0008d	eb 29		 jmp	 SHORT $LN9@Linsert
$LN10@Linsert:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  0008f	8b 45 f4	 mov	 eax, DWORD PTR __Trynode$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key
  00098	83 c4 04	 add	 esp, 4
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	51		 push	 ecx
  0009e	8b 55 f8	 mov	 edx, DWORD PTR __Val$[ebp]
  000a1	52		 push	 edx
  000a2	e8 00 00 00 00	 call	 ?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn
  000a7	83 c4 04	 add	 esp, 4
  000aa	8b 00		 mov	 eax, DWORD PTR [eax]
  000ac	50		 push	 eax
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	e8 00 00 00 00	 call	 ??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z ; CCrywolfScoreSort::operator()
  000b5	88 45 ef	 mov	 BYTE PTR __Addleft$[ebp], al
$LN9@Linsert:

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  000b8	0f b6 45 ef	 movzx	 eax, BYTE PTR __Addleft$[ebp]
  000bc	85 c0		 test	 eax, eax
  000be	74 13		 je	 SHORT $LN15@Linsert
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __Trynode$[ebp]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  000c9	83 c4 04	 add	 esp, 4
  000cc	8b 10		 mov	 edx, DWORD PTR [eax]
  000ce	89 55 84	 mov	 DWORD PTR tv147[ebp], edx
  000d1	eb 11		 jmp	 SHORT $LN16@Linsert
$LN15@Linsert:
  000d3	8b 45 f4	 mov	 eax, DWORD PTR __Trynode$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  000dc	83 c4 04	 add	 esp, 4
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	89 4d 84	 mov	 DWORD PTR tv147[ebp], ecx
$LN16@Linsert:
  000e4	8b 55 84	 mov	 edx, DWORD PTR tv147[ebp]
  000e7	89 55 f4	 mov	 DWORD PTR __Trynode$[ebp], edx

; 963  : 			}

  000ea	e9 46 ff ff ff	 jmp	 $LN12@Linsert
$LN11@Linsert:

; 964  : 
; 965  : 		if (this->_Multi)

  000ef	33 c0		 xor	 eax, eax
  000f1	74 37		 je	 SHORT $LN8@Linsert

; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  000f3	c6 45 8b 01	 mov	 BYTE PTR $T232174[ebp], 1
  000f7	8d 45 8b	 lea	 eax, DWORD PTR $T232174[ebp]
  000fa	50		 push	 eax
  000fb	8b 4d 0c	 mov	 ecx, DWORD PTR __Node$[ebp]
  000fe	51		 push	 ecx
  000ff	8b 55 f0	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00102	52		 push	 edx
  00103	0f b6 45 ef	 movzx	 eax, BYTE PTR __Addleft$[ebp]
  00107	50		 push	 eax
  00108	8d 4d 8c	 lea	 ecx, DWORD PTR $T232175[ebp]
  0010b	51		 push	 ecx
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert
  00114	50		 push	 eax
  00115	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00118	e8 00 00 00 00	 call	 ??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
  0011d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00120	e9 24 01 00 00	 jmp	 $LN13@Linsert

; 967  : 		else

  00125	e9 1f 01 00 00	 jmp	 $LN13@Linsert
$LN8@Linsert:

; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	50		 push	 eax
  0012e	8b 4d f0	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00131	51		 push	 ecx
  00132	8d 4d e8	 lea	 ecx, DWORD PTR __Where$231429[ebp]
  00135	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >

; 970  : 			if (!_Addleft)

  0013a	0f b6 45 ef	 movzx	 eax, BYTE PTR __Addleft$[ebp]
  0013e	85 c0		 test	 eax, eax
  00140	75 02		 jne	 SHORT $LN6@Linsert
  00142	eb 55		 jmp	 SHORT $LN5@Linsert
$LN6@Linsert:

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  00144	8d 45 90	 lea	 eax, DWORD PTR $T232176[ebp]
  00147	50		 push	 eax
  00148	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin
  00150	50		 push	 eax
  00151	8d 4d e8	 lea	 ecx, DWORD PTR __Where$231429[ebp]
  00154	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==
  00159	0f b6 c8	 movzx	 ecx, al
  0015c	85 c9		 test	 ecx, ecx
  0015e	74 31		 je	 SHORT $LN4@Linsert

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  00160	c6 45 97 01	 mov	 BYTE PTR $T232177[ebp], 1
  00164	8d 45 97	 lea	 eax, DWORD PTR $T232177[ebp]
  00167	50		 push	 eax
  00168	8b 4d 0c	 mov	 ecx, DWORD PTR __Node$[ebp]
  0016b	51		 push	 ecx
  0016c	8b 55 f0	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  0016f	52		 push	 edx
  00170	6a 01		 push	 1
  00172	8d 45 98	 lea	 eax, DWORD PTR $T232178[ebp]
  00175	50		 push	 eax
  00176	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00179	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert
  0017e	50		 push	 eax
  0017f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00182	e8 00 00 00 00	 call	 ??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
  00187	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0018a	e9 ba 00 00 00	 jmp	 $LN13@Linsert

; 974  : 			else

  0018f	eb 08		 jmp	 SHORT $LN5@Linsert
$LN4@Linsert:

; 975  : 				--_Where;	// need to test if insert before is okay

  00191	8d 4d e8	 lea	 ecx, DWORD PTR __Where$231429[ebp]
  00194	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator--
$LN5@Linsert:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  00199	8b 45 f8	 mov	 eax, DWORD PTR __Val$[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 ?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn
  001a2	83 c4 04	 add	 esp, 4
  001a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a7	51		 push	 ecx
  001a8	8d 4d e8	 lea	 ecx, DWORD PTR __Where$231429[ebp]
  001ab	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key
  001b6	83 c4 04	 add	 esp, 4
  001b9	8b 10		 mov	 edx, DWORD PTR [eax]
  001bb	52		 push	 edx
  001bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bf	e8 00 00 00 00	 call	 ??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z ; CCrywolfScoreSort::operator()
  001c4	0f b6 c0	 movzx	 eax, al
  001c7	85 c0		 test	 eax, eax
  001c9	74 31		 je	 SHORT $LN2@Linsert

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  001cb	c6 45 9f 01	 mov	 BYTE PTR $T232179[ebp], 1
  001cf	8d 45 9f	 lea	 eax, DWORD PTR $T232179[ebp]
  001d2	50		 push	 eax
  001d3	8b 4d 0c	 mov	 ecx, DWORD PTR __Node$[ebp]
  001d6	51		 push	 ecx
  001d7	8b 55 f0	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  001da	52		 push	 edx
  001db	0f b6 45 ef	 movzx	 eax, BYTE PTR __Addleft$[ebp]
  001df	50		 push	 eax
  001e0	8d 4d a0	 lea	 ecx, DWORD PTR $T232180[ebp]
  001e3	51		 push	 ecx
  001e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e7	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert
  001ec	50		 push	 eax
  001ed	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001f0	e8 00 00 00 00	 call	 ??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
  001f5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001f8	eb 4f		 jmp	 SHORT $LN13@Linsert

; 981  : 			else

  001fa	eb 4d		 jmp	 SHORT $LN13@Linsert
$LN2@Linsert:

; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));

  001fc	8b 45 0c	 mov	 eax, DWORD PTR __Node$[ebp]
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
  00205	83 c4 04	 add	 esp, 4
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::addressof<OBJECTSTRUCT *>
  0020e	83 c4 04	 add	 esp, 4
  00211	50		 push	 eax
  00212	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00215	83 c1 0d	 add	 ecx, 13			; 0000000dH
  00218	51		 push	 ecx
  00219	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>
  0021e	83 c4 08	 add	 esp, 8

; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  00221	6a 01		 push	 1
  00223	8b 45 0c	 mov	 eax, DWORD PTR __Node$[ebp]
  00226	50		 push	 eax
  00227	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0022d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  00232	c6 45 a7 00	 mov	 BYTE PTR $T232181[ebp], 0
  00236	8d 45 a7	 lea	 eax, DWORD PTR $T232181[ebp]
  00239	50		 push	 eax
  0023a	8d 4d e8	 lea	 ecx, DWORD PTR __Where$231429[ebp]
  0023d	51		 push	 ecx
  0023e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00241	e8 00 00 00 00	 call	 ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>
  00246	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN13@Linsert:

; 989  : 				}
; 990  : 			}
; 991  : 		}

  00249	5f		 pop	 edi
  0024a	5e		 pop	 esi
  0024b	5b		 pop	 ebx
  0024c	8b e5		 mov	 esp, ebp
  0024e	5d		 pop	 ebp
  0024f	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Linsert
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolfutil.h
_TEXT	ENDS
;	COMDAT ??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_bResult$ = -5						; size = 1
_this$ = -4						; size = 4
_lpObj1$ = 8						; size = 4
_lpObj2$ = 12						; size = 4
??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z PROC	; CCrywolfScoreSort::operator(), COMDAT
; _this$ = ecx

; 20   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 		bool bResult = ( lpObj1->m_iCrywolfMVPScore >= lpObj2->m_iCrywolfMVPScore ) ? TRUE : FALSE;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpObj1$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _lpObj2$[ebp]
  00012	8b 90 c0 1f 00
	00		 mov	 edx, DWORD PTR [eax+8128]
  00018	33 c0		 xor	 eax, eax
  0001a	3b 91 c0 1f 00
	00		 cmp	 edx, DWORD PTR [ecx+8128]
  00020	0f 9d c0	 setge	 al
  00023	88 45 fb	 mov	 BYTE PTR _bResult$[ebp], al

; 22   : 
; 23   : 		if ( lpObj1->m_iCrywolfMVPScore == lpObj2->m_iCrywolfMVPScore )

  00026	8b 45 08	 mov	 eax, DWORD PTR _lpObj1$[ebp]
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _lpObj2$[ebp]
  0002c	8b 90 c0 1f 00
	00		 mov	 edx, DWORD PTR [eax+8128]
  00032	3b 91 c0 1f 00
	00		 cmp	 edx, DWORD PTR [ecx+8128]
  00038	75 19		 jne	 SHORT $LN1@operator@2

; 24   : 			bResult = ( lpObj1->Experience < lpObj2->Experience ) ? TRUE : FALSE;

  0003a	8b 45 08	 mov	 eax, DWORD PTR _lpObj1$[ebp]
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _lpObj2$[ebp]
  00040	8b 90 c8 00 00
	00		 mov	 edx, DWORD PTR [eax+200]
  00046	3b 91 c8 00 00
	00		 cmp	 edx, DWORD PTR [ecx+200]
  0004c	1b c0		 sbb	 eax, eax
  0004e	f7 d8		 neg	 eax
  00050	88 45 fb	 mov	 BYTE PTR _bResult$[ebp], al
$LN1@operator@2:

; 25   : 
; 26   : 		return bResult;

  00053	8a 45 fb	 mov	 al, BYTE PTR _bResult$[ebp]

; 27   : 	}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z ENDP	; CCrywolfScoreSort::operator()
_TEXT	ENDS
PUBLIC	??$_Destroy@PAUOBJECTSTRUCT@@@std@@YAXPAPAUOBJECTSTRUCT@@@Z ; std::_Destroy<OBJECTSTRUCT *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z PROC ; std::allocator<OBJECTSTRUCT *>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@PAUOBJECTSTRUCT@@@std@@YAXPAPAUOBJECTSTRUCT@@@Z ; std::_Destroy<OBJECTSTRUCT *>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z ENDP ; std::allocator<OBJECTSTRUCT *>::destroy
_TEXT	ENDS
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::max_size
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
; File d:\microsoft visual studio 10.0\vc\include\xtree
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
__Pnode$231468 = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::max_size
  00014	83 e8 01	 sub	 eax, 1
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0001d	77 40		 ja	 SHORT $LN17@Insert

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));

  0001f	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
  00028	83 c4 04	 add	 esp, 4
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::addressof<OBJECTSTRUCT *>
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 0d	 add	 ecx, 13			; 0000000dH
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>
  00041	83 c4 08	 add	 esp, 8

; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  00044	6a 01		 push	 1
  00046	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00050	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0005a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN17@Insert:

; 1640 : 			}
; 1641 : 		++this->_Mysize;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	83 c1 01	 add	 ecx, 1
  00068	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006b	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1642 : 		_Newnode->_Parent = _Wherenode;

  0006e	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00071	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00074	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0007d	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00080	75 29		 jne	 SHORT $LN16@Insert

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  0008a	8b 4d 14	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0008d	89 08		 mov	 DWORD PTR [eax], ecx

; 1647 : 			_Lmost() = _Newnode;

  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
  00097	8b 4d 14	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0009a	89 08		 mov	 DWORD PTR [eax], ecx

; 1648 : 			_Rmost() = _Newnode;

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
  000a4	8b 4d 14	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000a7	89 08		 mov	 DWORD PTR [eax], ecx
  000a9	eb 64		 jmp	 SHORT $LN15@Insert
$LN16@Insert:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  000ab	0f b6 45 0c	 movzx	 eax, BYTE PTR __Addleft$[ebp]
  000af	85 c0		 test	 eax, eax
  000b1	74 2f		 je	 SHORT $LN14@Insert

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  000b3	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  000bc	83 c4 04	 add	 esp, 4
  000bf	8b 4d 14	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000c2	89 08		 mov	 DWORD PTR [eax], ecx

; 1653 : 			if (_Wherenode == _Lmost())

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  000cf	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000d1	75 0d		 jne	 SHORT $LN13@Insert

; 1654 : 				_Lmost() = _Newnode;

  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
  000db	8b 4d 14	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000de	89 08		 mov	 DWORD PTR [eax], ecx
$LN13@Insert:

; 1655 : 			}
; 1656 : 		else

  000e0	eb 2d		 jmp	 SHORT $LN15@Insert
$LN14@Insert:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  000e2	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  000eb	83 c4 04	 add	 esp, 4
  000ee	8b 4d 14	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000f1	89 08		 mov	 DWORD PTR [eax], ecx

; 1659 : 			if (_Wherenode == _Rmost())

  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
  000fb	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  000fe	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00100	75 0d		 jne	 SHORT $LN15@Insert

; 1660 : 				_Rmost() = _Newnode;

  00102	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
  0010a	8b 4d 14	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0010d	89 08		 mov	 DWORD PTR [eax], ecx
$LN15@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;

  0010f	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00112	89 45 f8	 mov	 DWORD PTR __Pnode$231468[ebp], eax
$LN10@Insert:

; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00115	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0011e	83 c4 04	 add	 esp, 4
  00121	8b 08		 mov	 ecx, DWORD PTR [eax]
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00129	83 c4 04	 add	 esp, 4
  0012c	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0012f	85 d2		 test	 edx, edx
  00131	0f 85 ce 02 00
	00		 jne	 $LN9@Insert

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00137	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00140	83 c4 04	 add	 esp, 4
  00143	8b f0		 mov	 esi, eax
  00145	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$231468[ebp]
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0014e	83 c4 04	 add	 esp, 4
  00151	8b 10		 mov	 edx, DWORD PTR [eax]
  00153	52		 push	 edx
  00154	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00159	83 c4 04	 add	 esp, 4
  0015c	8b 00		 mov	 eax, DWORD PTR [eax]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00164	83 c4 04	 add	 esp, 4
  00167	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00169	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0016b	0f 85 4a 01 00
	00		 jne	 $LN8@Insert

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  00171	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0017a	83 c4 04	 add	 esp, 4
  0017d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017f	51		 push	 ecx
  00180	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00185	83 c4 04	 add	 esp, 4
  00188	8b 10		 mov	 edx, DWORD PTR [eax]
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  00190	83 c4 04	 add	 esp, 4
  00193	8b 00		 mov	 eax, DWORD PTR [eax]
  00195	89 45 10	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  00198	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  001a1	83 c4 04	 add	 esp, 4
  001a4	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001a7	85 c9		 test	 ecx, ecx
  001a9	75 6f		 jne	 SHORT $LN7@Insert

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  001ab	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  001b4	83 c4 04	 add	 esp, 4
  001b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b9	51		 push	 ecx
  001ba	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  001bf	83 c4 04	 add	 esp, 4
  001c2	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1673 : 					this->_Color(_Wherenode) = this->_Black;

  001c5	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  001ce	83 c4 04	 add	 esp, 4
  001d1	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;

  001d4	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  001dd	83 c4 04	 add	 esp, 4
  001e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e2	51		 push	 ecx
  001e3	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  001e8	83 c4 04	 add	 esp, 4
  001eb	8b 10		 mov	 edx, DWORD PTR [eax]
  001ed	52		 push	 edx
  001ee	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  001f3	83 c4 04	 add	 esp, 4
  001f6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  001f9	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00202	83 c4 04	 add	 esp, 4
  00205	8b 08		 mov	 ecx, DWORD PTR [eax]
  00207	51		 push	 ecx
  00208	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0020d	83 c4 04	 add	 esp, 4
  00210	8b 10		 mov	 edx, DWORD PTR [eax]
  00212	89 55 f8	 mov	 DWORD PTR __Pnode$231468[ebp], edx

; 1677 : 					}
; 1678 : 				else

  00215	e9 9c 00 00 00	 jmp	 $LN6@Insert
$LN7@Insert:

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  0021a	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  0021d	50		 push	 eax
  0021e	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00223	83 c4 04	 add	 esp, 4
  00226	8b 08		 mov	 ecx, DWORD PTR [eax]
  00228	51		 push	 ecx
  00229	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  0022e	83 c4 04	 add	 esp, 4
  00231	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$231468[ebp]
  00234	3b 10		 cmp	 edx, DWORD PTR [eax]
  00236	75 1d		 jne	 SHORT $LN5@Insert

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  00238	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00241	83 c4 04	 add	 esp, 4
  00244	8b 08		 mov	 ecx, DWORD PTR [eax]
  00246	89 4d f8	 mov	 DWORD PTR __Pnode$231468[ebp], ecx

; 1683 : 						_Lrotate(_Pnode);

  00249	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  0024c	50		 push	 eax
  0024d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00250	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate
$LN5@Insert:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  00255	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0025e	83 c4 04	 add	 esp, 4
  00261	8b 08		 mov	 ecx, DWORD PTR [eax]
  00263	51		 push	 ecx
  00264	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00269	83 c4 04	 add	 esp, 4
  0026c	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  0026f	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00272	50		 push	 eax
  00273	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00278	83 c4 04	 add	 esp, 4
  0027b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00283	83 c4 04	 add	 esp, 4
  00286	8b 10		 mov	 edx, DWORD PTR [eax]
  00288	52		 push	 edx
  00289	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  0028e	83 c4 04	 add	 esp, 4
  00291	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  00294	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00297	50		 push	 eax
  00298	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0029d	83 c4 04	 add	 esp, 4
  002a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a2	51		 push	 ecx
  002a3	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  002a8	83 c4 04	 add	 esp, 4
  002ab	8b 10		 mov	 edx, DWORD PTR [eax]
  002ad	52		 push	 edx
  002ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b1	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
$LN6@Insert:

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  002b6	e9 45 01 00 00	 jmp	 $LN4@Insert
$LN8@Insert:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  002bb	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  002c4	83 c4 04	 add	 esp, 4
  002c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c9	51		 push	 ecx
  002ca	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  002cf	83 c4 04	 add	 esp, 4
  002d2	8b 10		 mov	 edx, DWORD PTR [eax]
  002d4	52		 push	 edx
  002d5	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  002da	83 c4 04	 add	 esp, 4
  002dd	8b 00		 mov	 eax, DWORD PTR [eax]
  002df	89 45 10	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  002e2	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  002eb	83 c4 04	 add	 esp, 4
  002ee	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002f1	85 c9		 test	 ecx, ecx
  002f3	75 6f		 jne	 SHORT $LN3@Insert

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  002f5	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  002f8	50		 push	 eax
  002f9	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  002fe	83 c4 04	 add	 esp, 4
  00301	8b 08		 mov	 ecx, DWORD PTR [eax]
  00303	51		 push	 ecx
  00304	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00309	83 c4 04	 add	 esp, 4
  0030c	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  0030f	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00312	50		 push	 eax
  00313	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00318	83 c4 04	 add	 esp, 4
  0031b	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  0031e	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00327	83 c4 04	 add	 esp, 4
  0032a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032c	51		 push	 ecx
  0032d	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00332	83 c4 04	 add	 esp, 4
  00335	8b 10		 mov	 edx, DWORD PTR [eax]
  00337	52		 push	 edx
  00338	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  0033d	83 c4 04	 add	 esp, 4
  00340	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  00343	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00346	50		 push	 eax
  00347	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0034c	83 c4 04	 add	 esp, 4
  0034f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00351	51		 push	 ecx
  00352	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00357	83 c4 04	 add	 esp, 4
  0035a	8b 10		 mov	 edx, DWORD PTR [eax]
  0035c	89 55 f8	 mov	 DWORD PTR __Pnode$231468[ebp], edx

; 1703 : 					}
; 1704 : 				else

  0035f	e9 9c 00 00 00	 jmp	 $LN4@Insert
$LN3@Insert:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00364	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00367	50		 push	 eax
  00368	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0036d	83 c4 04	 add	 esp, 4
  00370	8b 08		 mov	 ecx, DWORD PTR [eax]
  00372	51		 push	 ecx
  00373	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00378	83 c4 04	 add	 esp, 4
  0037b	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$231468[ebp]
  0037e	3b 10		 cmp	 edx, DWORD PTR [eax]
  00380	75 1d		 jne	 SHORT $LN1@Insert

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  00382	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  0038b	83 c4 04	 add	 esp, 4
  0038e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00390	89 4d f8	 mov	 DWORD PTR __Pnode$231468[ebp], ecx

; 1709 : 						_Rrotate(_Pnode);

  00393	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  00396	50		 push	 eax
  00397	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0039a	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
$LN1@Insert:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  0039f	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  003a8	83 c4 04	 add	 esp, 4
  003ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ad	51		 push	 ecx
  003ae	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  003b3	83 c4 04	 add	 esp, 4
  003b6	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  003b9	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  003c2	83 c4 04	 add	 esp, 4
  003c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c7	51		 push	 ecx
  003c8	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  003cd	83 c4 04	 add	 esp, 4
  003d0	8b 10		 mov	 edx, DWORD PTR [eax]
  003d2	52		 push	 edx
  003d3	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  003d8	83 c4 04	 add	 esp, 4
  003db	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  003de	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231468[ebp]
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  003e7	83 c4 04	 add	 esp, 4
  003ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ec	51		 push	 ecx
  003ed	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  003f2	83 c4 04	 add	 esp, 4
  003f5	8b 10		 mov	 edx, DWORD PTR [eax]
  003f7	52		 push	 edx
  003f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fb	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate
$LN4@Insert:

; 1716 : 					}
; 1717 : 				}

  00400	e9 10 fd ff ff	 jmp	 $LN10@Insert
$LN9@Insert:

; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  00405	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00408	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
  0040d	8b 00		 mov	 eax, DWORD PTR [eax]
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00415	83 c4 04	 add	 esp, 4
  00418	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1720 : 		return (iterator(_Newnode, this));

  0041b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0041e	50		 push	 eax
  0041f	8b 4d 14	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00422	51		 push	 ecx
  00423	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00426	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >
  0042b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN19@Insert:

; 1721 : 		}

  0042e	5f		 pop	 edi
  0042f	5e		 pop	 esi
  00430	5b		 pop	 ebx
  00431	8b e5		 mov	 esp, ebp
  00433	5d		 pop	 ebp
  00434	c2 10 00	 ret	 16			; 00000010H
?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn
  0001b	83 c4 04	 add	 esp, 4

; 618  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\set
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z PROC ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn, COMDAT

; 45   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 46   : 		return (_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 47   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z ENDP ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
PUBLIC	??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
PUBLIC	??$move@AA_N@std@@YA$$QA_NAA_N@Z		; std::move<bool &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$move@AA_N@std@@YA$$QA_NAA_N@Z ; std::move<bool &>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
  00022	83 c4 04	 add	 esp, 4
  00025	50		 push	 eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>

; 228  : 		}

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 306  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator--
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ ; std::allocator<OBJECTSTRUCT *>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::max_size, COMDAT
; _this$ = ecx

; 873  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 874  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0d	 add	 ecx, 13			; 0000000dH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ ; std::allocator<OBJECTSTRUCT *>::max_size

; 875  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::max_size
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??0?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
  00015	83 c4 04	 add	 esp, 4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	89 0a		 mov	 DWORD PTR [edx], ecx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$move@AA_N@std@@YA$$QA_NAA_N@Z ; std::move<bool &>
  00028	83 c4 04	 add	 esp, 4
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8a 10		 mov	 dl, BYTE PTR [eax]
  00030	88 51 04	 mov	 BYTE PTR [ecx+4], dl

; 146  : 		}

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$231532 = -8					; size = 4
_this$ = -4						; size = 4
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  00017	83 c4 04	 add	 esp, 4
  0001a	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0001d	85 d2		 test	 edx, edx
  0001f	74 1a		 je	 SHORT $LN8@operator@3

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  0002c	83 c4 04	 add	 esp, 4
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 02		 mov	 DWORD PTR [edx], eax
  00036	e9 a4 00 00 00	 jmp	 $LN7@operator@3
$LN8@operator@3:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00046	83 c4 04	 add	 esp, 4
  00049	8b 10		 mov	 edx, DWORD PTR [eax]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  00051	83 c4 04	 add	 esp, 4
  00054	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00057	85 c0		 test	 eax, eax
  00059	75 20		 jne	 SHORT $LN4@operator@3

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00066	83 c4 04	 add	 esp, 4
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max
  00071	83 c4 04	 add	 esp, 4
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	89 01		 mov	 DWORD PTR [ecx], eax

; 89   : 		else

  00079	eb 64		 jmp	 SHORT $LN7@operator@3
$LN4@operator@3:

; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00086	83 c4 04	 add	 esp, 4
  00089	8b 10		 mov	 edx, DWORD PTR [eax]
  0008b	89 55 f8	 mov	 DWORD PTR __Pnode$231532[ebp], edx
  0008e	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231532[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  00097	83 c4 04	 add	 esp, 4
  0009a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0009d	85 c9		 test	 ecx, ecx
  0009f	75 1f		 jne	 SHORT $LN3@operator@3
  000a1	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$231532[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b2	3b 10		 cmp	 edx, DWORD PTR [eax]
  000b4	75 0a		 jne	 SHORT $LN3@operator@3

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$231532[ebp]
  000bc	89 08		 mov	 DWORD PTR [eax], ecx
  000be	eb bb		 jmp	 SHORT $LN4@operator@3
$LN3@operator@3:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  000cb	83 c4 04	 add	 esp, 4
  000ce	0f be 10	 movsx	 edx, BYTE PTR [eax]
  000d1	85 d2		 test	 edx, edx
  000d3	74 02		 je	 SHORT $LN2@operator@3

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else

  000d5	eb 08		 jmp	 SHORT $LN7@operator@3
$LN2@operator@3:

; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$231532[ebp]
  000dd	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@operator@3:

; 99   : 			}
; 100  : 		return (*this);

  000df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 101  : 		}

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ PROC ; std::allocator<OBJECTSTRUCT *>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 3f		 mov	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ ENDP ; std::allocator<OBJECTSTRUCT *>::max_size
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::forward<OBJECTSTRUCT *>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::forward<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT *>
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__catchsym$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z$0
__unwindtable$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z$2
__ehfuncinfo$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv93 = -100						; size = 4
tv92 = -96						; size = 4
tv91 = -92						; size = 4
__Wherenode$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 54	 sub	 esp, 84			; 00000054H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode
  00037	89 45 e8	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 589  : 
; 590  : 		_TRY_BEGIN

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  00041	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::forward<OBJECTSTRUCT *>
  0004a	83 c4 04	 add	 esp, 4
  0004d	89 45 a4	 mov	 DWORD PTR tv91[ebp], eax
  00050	8b 4d e8	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
  00059	83 c4 04	 add	 esp, 4
  0005c	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  0005f	8b 55 a0	 mov	 edx, DWORD PTR tv92[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::addressof<OBJECTSTRUCT *>
  00068	83 c4 04	 add	 esp, 4
  0006b	89 45 9c	 mov	 DWORD PTR tv93[ebp], eax
  0006e	8b 45 a4	 mov	 eax, DWORD PTR tv91[ebp]
  00071	50		 push	 eax
  00072	8b 4d 9c	 mov	 ecx, DWORD PTR tv93[ebp]
  00075	51		 push	 ecx
  00076	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00079	83 c2 0d	 add	 edx, 13			; 0000000dH
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT *>
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH
  00085	eb 27		 jmp	 SHORT $LN4@Buynode
__catch$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z$0:

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);

  00087	6a 01		 push	 1
  00089	8b 45 e8	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00093	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate

; 595  : 		_RERAISE;

  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
  0009c	e8 00 00 00 00	 call	 __CxxThrowException@8

; 596  : 		_CATCH_END

  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a8	b8 00 00 00 00	 mov	 eax, __tryend$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z$1
  000ad	c3		 ret	 0
$LN4@Buynode:
  000ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z$1:

; 597  : 
; 598  : 		return (_Wherenode);

  000b5	8b 45 e8	 mov	 eax, DWORD PTR __Wherenode$[ebp]
$LN3@Buynode:

; 599  : 		}

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>
PUBLIC	??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@_N@std@@YA$$QA_NAA_N@Z ; std::forward<bool>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
  00022	83 c4 04	 add	 esp, 4
  00025	50		 push	 eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>

; 248  : 		}

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAUOBJECTSTRUCT@@@std@@YAXPAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAUOBJECTSTRUCT@@@std@@YAXPAPAUOBJECTSTRUCT@@@Z PROC ; std::_Destroy<OBJECTSTRUCT *>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@PAUOBJECTSTRUCT@@@std@@YAXPAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Destroy<OBJECTSTRUCT *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$move@AA_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AA_N@std@@YA$$QA_NAA_N@Z PROC			; std::move<bool &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AA_N@std@@YA$$QA_NAA_N@Z ENDP			; std::move<bool &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
__Wherenode$ = -8					; size = 4
_this$ = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  0000c	6a 01		 push	 1
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00014	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocate
  00019	89 45 f8	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  0001c	8b 45 f8	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
  00025	83 c4 04	 add	 esp, 4
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002e	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
  00039	83 c4 04	 add	 esp, 4
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00042	89 10		 mov	 DWORD PTR [eax], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	89 10		 mov	 DWORD PTR [eax], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  00058	8b 45 f8	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
  00061	83 c4 04	 add	 esp, 4
  00064	c6 00 00	 mov	 BYTE PTR [eax], 0

; 566  : 		this->_Isnil(_Wherenode) = false;

  00067	8b 45 f8	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
  00070	83 c4 04	 add	 esp, 4
  00073	c6 00 00	 mov	 BYTE PTR [eax], 0

; 567  : 		return (_Wherenode);

  00076	8b 45 f8	 mov	 eax, DWORD PTR __Wherenode$[ebp]

; 568  : 		}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
?_Buynode@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z ; std::allocator<OBJECTSTRUCT *>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z PROC ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT *>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::forward<OBJECTSTRUCT *>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z ; std::allocator<OBJECTSTRUCT *>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z ENDP ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
  00015	83 c4 04	 add	 esp, 4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	89 0a		 mov	 DWORD PTR [edx], ecx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$forward@_N@std@@YA$$QA_NAA_N@Z ; std::forward<bool>
  00028	83 c4 04	 add	 esp, 4
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8a 10		 mov	 dl, BYTE PTR [eax]
  00030	88 51 04	 mov	 BYTE PTR [ecx+4], dl

; 164  : 		}

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z
_TEXT	SEGMENT
tv73 = -92						; size = 4
$T232245 = -88						; size = 4
$T232246 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z PROC ; std::allocator<OBJECTSTRUCT *>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T232246[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T232246[ebp], 0
  00047	74 1b		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::forward<OBJECTSTRUCT *>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 ac	 mov	 edx, DWORD PTR $T232246[ebp]
  00058	8b 00		 mov	 eax, DWORD PTR [eax]
  0005a	89 02		 mov	 DWORD PTR [edx], eax
  0005c	8b 4d ac	 mov	 ecx, DWORD PTR $T232246[ebp]
  0005f	89 4d a4	 mov	 DWORD PTR tv73[ebp], ecx
  00062	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00064	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@construct:
  0006b	8b 55 a4	 mov	 edx, DWORD PTR tv73[ebp]
  0006e	89 55 a8	 mov	 DWORD PTR $T232245[ebp], edx
  00071	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T232246[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z ENDP ; std::allocator<OBJECTSTRUCT *>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@ATL@@QAE@JHHH@Z
_TEXT	SEGMENT
tv180 = -80						; size = 4
tv178 = -76						; size = 4
tv176 = -72						; size = 4
_this$ = -4						; size = 4
_lDays$ = 8						; size = 4
_nHours$ = 12						; size = 4
_nMins$ = 16						; size = 4
_nSecs$ = 20						; size = 4
??0CTimeSpan@ATL@@QAE@JHHH@Z PROC			; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  0000c	8b 45 14	 mov	 eax, DWORD PTR _nSecs$[ebp]
  0000f	99		 cdq
  00010	8b f0		 mov	 esi, eax
  00012	8b fa		 mov	 edi, edx
  00014	8b 45 10	 mov	 eax, DWORD PTR _nMins$[ebp]
  00017	99		 cdq
  00018	8b d8		 mov	 ebx, eax
  0001a	8b c2		 mov	 eax, edx
  0001c	89 45 b8	 mov	 DWORD PTR tv176[ebp], eax
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _nHours$[ebp]
  00022	99		 cdq
  00023	8b ca		 mov	 ecx, edx
  00025	89 45 b4	 mov	 DWORD PTR tv178[ebp], eax
  00028	8b 45 08	 mov	 eax, DWORD PTR _lDays$[ebp]
  0002b	99		 cdq
  0002c	6a 00		 push	 0
  0002e	6a 18		 push	 24			; 00000018H
  00030	52		 push	 edx
  00031	50		 push	 eax
  00032	89 4d b0	 mov	 DWORD PTR tv180[ebp], ecx
  00035	e8 00 00 00 00	 call	 __allmul
  0003a	8b 4d b4	 mov	 ecx, DWORD PTR tv178[ebp]
  0003d	03 c8		 add	 ecx, eax
  0003f	8b 45 b0	 mov	 eax, DWORD PTR tv180[ebp]
  00042	13 c2		 adc	 eax, edx
  00044	6a 00		 push	 0
  00046	6a 3c		 push	 60			; 0000003cH
  00048	50		 push	 eax
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 __allmul
  0004f	03 d8		 add	 ebx, eax
  00051	8b 45 b8	 mov	 eax, DWORD PTR tv176[ebp]
  00054	13 c2		 adc	 eax, edx
  00056	6a 00		 push	 0
  00058	6a 3c		 push	 60			; 0000003cH
  0005a	50		 push	 eax
  0005b	53		 push	 ebx
  0005c	e8 00 00 00 00	 call	 __allmul
  00061	03 f0		 add	 esi, eax
  00063	13 fa		 adc	 edi, edx
  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	89 30		 mov	 DWORD PTR [eax], esi
  0006a	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 43   : }

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 10 00	 ret	 16			; 00000010H
??0CTimeSpan@ATL@@QAE@JHHH@Z ENDP			; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 	return( CTime( ::_time64( NULL ) ) );

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 __time64
  00010	83 c4 04	 add	 esp, 4
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 144  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 172  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	__$ArrayPad$
EXTRN	__mktime64:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
tv194 = -136						; size = 4
tv137 = -136						; size = 4
tv129 = -136						; size = 4
tv89 = -136						; size = 4
tv81 = -136						; size = 4
tv73 = -136						; size = 4
_atm$ = -68						; size = 36
___atl_condVal$86718 = -32				; size = 4
___atl_condVal$86705 = -28				; size = 4
___atl_condVal$86692 = -24				; size = 4
___atl_condVal$86679 = -20				; size = 4
___atl_condVal$86666 = -16				; size = 4
___atl_condVal$86653 = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN67@CTime:

; 183  : #pragma warning (push)
; 184  : #pragma warning (disable: 4127)  // conditional expression constant
; 185  : 
; 186  : 	ATLENSURE( nYear >= 1900 );

  00019	33 c0		 xor	 eax, eax
  0001b	81 7d 08 6c 07
	00 00		 cmp	 DWORD PTR _nYear$[ebp], 1900 ; 0000076cH
  00022	0f 9d c0	 setge	 al
  00025	89 45 f4	 mov	 DWORD PTR ___atl_condVal$86653[ebp], eax
$LN60@CTime:
  00028	33 c0		 xor	 eax, eax
  0002a	75 fc		 jne	 SHORT $LN60@CTime
  0002c	33 c0		 xor	 eax, eax
  0002e	75 f8		 jne	 SHORT $LN60@CTime
  00030	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$86653[ebp], 0
  00034	75 0a		 jne	 SHORT $LN66@CTime
  00036	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0003b	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN66@CTime:
  00040	33 c0		 xor	 eax, eax
  00042	75 d5		 jne	 SHORT $LN67@CTime
$LN57@CTime:

; 187  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00044	83 7d 0c 01	 cmp	 DWORD PTR _nMonth$[ebp], 1
  00048	7c 12		 jl	 SHORT $LN70@CTime
  0004a	83 7d 0c 0c	 cmp	 DWORD PTR _nMonth$[ebp], 12 ; 0000000cH
  0004e	7f 0c		 jg	 SHORT $LN70@CTime
  00050	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv73[ebp], 1
  0005a	eb 0a		 jmp	 SHORT $LN71@CTime
$LN70@CTime:
  0005c	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv73[ebp], 0
$LN71@CTime:
  00066	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv73[ebp]
  0006c	89 45 f0	 mov	 DWORD PTR ___atl_condVal$86666[ebp], eax
$LN50@CTime:
  0006f	33 c0		 xor	 eax, eax
  00071	75 fc		 jne	 SHORT $LN50@CTime
  00073	33 c0		 xor	 eax, eax
  00075	75 f8		 jne	 SHORT $LN50@CTime
  00077	83 7d f0 00	 cmp	 DWORD PTR ___atl_condVal$86666[ebp], 0
  0007b	75 0a		 jne	 SHORT $LN56@CTime
  0007d	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00082	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN56@CTime:
  00087	33 c0		 xor	 eax, eax
  00089	75 b9		 jne	 SHORT $LN57@CTime
$LN47@CTime:

; 188  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0008b	83 7d 10 01	 cmp	 DWORD PTR _nDay$[ebp], 1
  0008f	7c 12		 jl	 SHORT $LN72@CTime
  00091	83 7d 10 1f	 cmp	 DWORD PTR _nDay$[ebp], 31 ; 0000001fH
  00095	7f 0c		 jg	 SHORT $LN72@CTime
  00097	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv81[ebp], 1
  000a1	eb 0a		 jmp	 SHORT $LN73@CTime
$LN72@CTime:
  000a3	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN73@CTime:
  000ad	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  000b3	89 45 ec	 mov	 DWORD PTR ___atl_condVal$86679[ebp], eax
$LN40@CTime:
  000b6	33 c0		 xor	 eax, eax
  000b8	75 fc		 jne	 SHORT $LN40@CTime
  000ba	33 c0		 xor	 eax, eax
  000bc	75 f8		 jne	 SHORT $LN40@CTime
  000be	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$86679[ebp], 0
  000c2	75 0a		 jne	 SHORT $LN46@CTime
  000c4	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000c9	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN46@CTime:
  000ce	33 c0		 xor	 eax, eax
  000d0	75 b9		 jne	 SHORT $LN47@CTime
$LN37@CTime:

; 189  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  000d2	83 7d 14 00	 cmp	 DWORD PTR _nHour$[ebp], 0
  000d6	7c 12		 jl	 SHORT $LN74@CTime
  000d8	83 7d 14 17	 cmp	 DWORD PTR _nHour$[ebp], 23 ; 00000017H
  000dc	7f 0c		 jg	 SHORT $LN74@CTime
  000de	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv89[ebp], 1
  000e8	eb 0a		 jmp	 SHORT $LN75@CTime
$LN74@CTime:
  000ea	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN75@CTime:
  000f4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  000fa	89 45 e8	 mov	 DWORD PTR ___atl_condVal$86692[ebp], eax
$LN30@CTime:
  000fd	33 c0		 xor	 eax, eax
  000ff	75 fc		 jne	 SHORT $LN30@CTime
  00101	33 c0		 xor	 eax, eax
  00103	75 f8		 jne	 SHORT $LN30@CTime
  00105	83 7d e8 00	 cmp	 DWORD PTR ___atl_condVal$86692[ebp], 0
  00109	75 0a		 jne	 SHORT $LN36@CTime
  0010b	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00110	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN36@CTime:
  00115	33 c0		 xor	 eax, eax
  00117	75 b9		 jne	 SHORT $LN37@CTime
$LN27@CTime:

; 190  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  00119	83 7d 18 00	 cmp	 DWORD PTR _nMin$[ebp], 0
  0011d	7c 12		 jl	 SHORT $LN76@CTime
  0011f	83 7d 18 3b	 cmp	 DWORD PTR _nMin$[ebp], 59 ; 0000003bH
  00123	7f 0c		 jg	 SHORT $LN76@CTime
  00125	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv129[ebp], 1
  0012f	eb 0a		 jmp	 SHORT $LN77@CTime
$LN76@CTime:
  00131	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN77@CTime:
  0013b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv129[ebp]
  00141	89 45 e4	 mov	 DWORD PTR ___atl_condVal$86705[ebp], eax
$LN20@CTime:
  00144	33 c0		 xor	 eax, eax
  00146	75 fc		 jne	 SHORT $LN20@CTime
  00148	33 c0		 xor	 eax, eax
  0014a	75 f8		 jne	 SHORT $LN20@CTime
  0014c	83 7d e4 00	 cmp	 DWORD PTR ___atl_condVal$86705[ebp], 0
  00150	75 0a		 jne	 SHORT $LN26@CTime
  00152	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00157	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN26@CTime:
  0015c	33 c0		 xor	 eax, eax
  0015e	75 b9		 jne	 SHORT $LN27@CTime
$LN17@CTime:

; 191  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00160	83 7d 1c 00	 cmp	 DWORD PTR _nSec$[ebp], 0
  00164	7c 12		 jl	 SHORT $LN78@CTime
  00166	83 7d 1c 3b	 cmp	 DWORD PTR _nSec$[ebp], 59 ; 0000003bH
  0016a	7f 0c		 jg	 SHORT $LN78@CTime
  0016c	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv137[ebp], 1
  00176	eb 0a		 jmp	 SHORT $LN79@CTime
$LN78@CTime:
  00178	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN79@CTime:
  00182	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00188	89 45 e0	 mov	 DWORD PTR ___atl_condVal$86718[ebp], eax
$LN10@CTime:
  0018b	33 c0		 xor	 eax, eax
  0018d	75 fc		 jne	 SHORT $LN10@CTime
  0018f	33 c0		 xor	 eax, eax
  00191	75 f8		 jne	 SHORT $LN10@CTime
  00193	83 7d e0 00	 cmp	 DWORD PTR ___atl_condVal$86718[ebp], 0
  00197	75 0a		 jne	 SHORT $LN16@CTime
  00199	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0019e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN16@CTime:
  001a3	33 c0		 xor	 eax, eax
  001a5	75 b9		 jne	 SHORT $LN17@CTime

; 192  : 
; 193  : #pragma warning (pop)
; 194  : 
; 195  : 	struct tm atm;
; 196  : 
; 197  : 	atm.tm_sec = nSec;

  001a7	8b 45 1c	 mov	 eax, DWORD PTR _nSec$[ebp]
  001aa	89 45 bc	 mov	 DWORD PTR _atm$[ebp], eax

; 198  : 	atm.tm_min = nMin;

  001ad	8b 45 18	 mov	 eax, DWORD PTR _nMin$[ebp]
  001b0	89 45 c0	 mov	 DWORD PTR _atm$[ebp+4], eax

; 199  : 	atm.tm_hour = nHour;

  001b3	8b 45 14	 mov	 eax, DWORD PTR _nHour$[ebp]
  001b6	89 45 c4	 mov	 DWORD PTR _atm$[ebp+8], eax

; 200  : 	atm.tm_mday = nDay;

  001b9	8b 45 10	 mov	 eax, DWORD PTR _nDay$[ebp]
  001bc	89 45 c8	 mov	 DWORD PTR _atm$[ebp+12], eax

; 201  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based

  001bf	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  001c2	83 e8 01	 sub	 eax, 1
  001c5	89 45 cc	 mov	 DWORD PTR _atm$[ebp+16], eax

; 202  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  001c8	8b 45 08	 mov	 eax, DWORD PTR _nYear$[ebp]
  001cb	2d 6c 07 00 00	 sub	 eax, 1900		; 0000076cH
  001d0	89 45 d0	 mov	 DWORD PTR _atm$[ebp+20], eax

; 203  : 	atm.tm_isdst = nDST;

  001d3	8b 45 20	 mov	 eax, DWORD PTR _nDST$[ebp]
  001d6	89 45 dc	 mov	 DWORD PTR _atm$[ebp+32], eax

; 204  : 
; 205  : 	m_time = _mktime64(&atm);

  001d9	8d 45 bc	 lea	 eax, DWORD PTR _atm$[ebp]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 __mktime64
  001e2	83 c4 04	 add	 esp, 4
  001e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	89 01		 mov	 DWORD PTR [ecx], eax
  001ea	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN3@CTime:

; 206  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time

  001ed	33 c0		 xor	 eax, eax
  001ef	75 fc		 jne	 SHORT $LN3@CTime
  001f1	33 c0		 xor	 eax, eax
  001f3	75 f8		 jne	 SHORT $LN3@CTime

; 207  : 	if(m_time == -1)

  001f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f8	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
  001fe	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  00204	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv194[ebp]
  0020a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0020c	23 42 04	 and	 eax, DWORD PTR [edx+4]
  0020f	83 f8 ff	 cmp	 eax, -1
  00212	75 0a		 jne	 SHORT $LN68@CTime

; 208  : 	{
; 209  : 		AtlThrow(E_INVALIDARG);

  00214	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00219	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN68@CTime:

; 210  : 	}
; 211  : }

  0021e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN69@CTime:
  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	5b		 pop	 ebx
  00224	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00227	33 cd		 xor	 ecx, ebp
  00229	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c2 1c 00	 ret	 28			; 0000001cH
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00009	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00010	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00012	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}
; 72   : 	else

  00017	eb 09		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00019	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
PUBLIC	?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTimeSpan
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_span$ = 12						; size = 8
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z PROC		; ATL::CTime::operator+, COMDAT
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 315  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  0000c	8d 4d 0c	 lea	 ecx, DWORD PTR _span$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetTimeSpan
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	03 01		 add	 eax, DWORD PTR [ecx]
  00019	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  0001c	52		 push	 edx
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 316  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ENDP		; ATL::CTime::operator+
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTimeSpan, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	return( m_timeSpan );

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 83   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTimeSpan
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??MCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
tv65 = -76						; size = 4
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??MCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator<, COMDAT
; _this$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 330  : 	return( m_time < time.m_time );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv68[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv68[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	3b 55 0c	 cmp	 edx, DWORD PTR _time$[ebp+4]
  0001b	7f 15		 jg	 SHORT $LN3@operator@4
  0001d	7c 0a		 jl	 SHORT $LN5@operator@4
  0001f	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	3b 4d 08	 cmp	 ecx, DWORD PTR _time$[ebp]
  00027	73 09		 jae	 SHORT $LN3@operator@4
$LN5@operator@4:
  00029	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00030	eb 07		 jmp	 SHORT $LN4@operator@4
$LN3@operator@4:
  00032	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator@4:
  00039	8a 45 b4	 mov	 al, BYTE PTR tv65[ebp]

; 331  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
??MCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator<
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??OCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
tv65 = -76						; size = 4
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??OCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator>, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 	return( m_time > time.m_time );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv68[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv68[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	3b 55 0c	 cmp	 edx, DWORD PTR _time$[ebp+4]
  0001b	7c 15		 jl	 SHORT $LN3@operator@5
  0001d	7f 0a		 jg	 SHORT $LN5@operator@5
  0001f	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	3b 4d 08	 cmp	 ecx, DWORD PTR _time$[ebp]
  00027	76 09		 jbe	 SHORT $LN3@operator@5
$LN5@operator@5:
  00029	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00030	eb 07		 jmp	 SHORT $LN4@operator@5
$LN3@operator@5:
  00032	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator@5:
  00039	8a 45 b4	 mov	 al, BYTE PTR tv65[ebp]

; 336  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
??OCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator>
_TEXT	ENDS
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetYear@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetYear@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetYear, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 420  : 	struct tm ttm;
; 421  : 	struct tm * ptm;
; 422  : 
; 423  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 424  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 11		 je	 SHORT $LN3@GetYear
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00031	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  00037	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  0003a	eb 07		 jmp	 SHORT $LN4@GetYear
$LN3@GetYear:
  0003c	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetYear:
  00043	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 425  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004c	33 cd		 xor	 ecx, ebp
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?GetYear@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetYear
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__localtime64_s:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
_err$86876 = -52					; size = 4
_ptmTemp$86875 = -48					; size = 36
___atl_condVal$86864 = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN12@GetLocalTm:

; 370  : 	// Ensure ptm is valid
; 371  : 	ATLENSURE( ptm != NULL );

  00016	33 c0		 xor	 eax, eax
  00018	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  0001c	0f 95 c0	 setne	 al
  0001f	89 45 f4	 mov	 DWORD PTR ___atl_condVal$86864[ebp], eax
$LN5@GetLocalTm:
  00022	33 c0		 xor	 eax, eax
  00024	75 fc		 jne	 SHORT $LN5@GetLocalTm
  00026	33 c0		 xor	 eax, eax
  00028	75 f8		 jne	 SHORT $LN5@GetLocalTm
  0002a	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$86864[ebp], 0
  0002e	75 0a		 jne	 SHORT $LN11@GetLocalTm
  00030	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00035	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN11@GetLocalTm:
  0003a	33 c0		 xor	 eax, eax
  0003c	75 d8		 jne	 SHORT $LN12@GetLocalTm

; 372  : 
; 373  : 	if (ptm != NULL)

  0003e	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00042	74 2f		 je	 SHORT $LN2@GetLocalTm

; 374  : 	{
; 375  : 		struct tm ptmTemp;
; 376  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	50		 push	 eax
  00048	8d 4d d0	 lea	 ecx, DWORD PTR _ptmTemp$86875[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 __localtime64_s
  00051	83 c4 08	 add	 esp, 8
  00054	89 45 cc	 mov	 DWORD PTR _err$86876[ebp], eax

; 377  : 
; 378  : 		if (err != 0)

  00057	83 7d cc 00	 cmp	 DWORD PTR _err$86876[ebp], 0
  0005b	74 04		 je	 SHORT $LN1@GetLocalTm

; 379  : 		{
; 380  : 			return NULL;    // indicates that m_time was not initialized!

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 14		 jmp	 SHORT $LN14@GetLocalTm
$LN1@GetLocalTm:

; 381  : 		}
; 382  : 
; 383  : 		*ptm = ptmTemp;

  00061	b9 09 00 00 00	 mov	 ecx, 9
  00066	8d 75 d0	 lea	 esi, DWORD PTR _ptmTemp$86875[ebp]
  00069	8b 7d 08	 mov	 edi, DWORD PTR _ptm$[ebp]
  0006c	f3 a5		 rep movsd

; 384  : 		return ptm;

  0006e	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  00071	eb 02		 jmp	 SHORT $LN14@GetLocalTm
$LN2@GetLocalTm:

; 385  : 	}
; 386  : 
; 387  : 	return NULL;

  00073	33 c0		 xor	 eax, eax
$LN14@GetLocalTm:

; 388  : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007b	33 cd		 xor	 ecx, ebp
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMonth@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetMonth@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMonth, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 429  : 	struct tm ttm;
; 430  : 	struct tm * ptm;
; 431  : 
; 432  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 433  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0e		 je	 SHORT $LN3@GetMonth
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00031	83 c1 01	 add	 ecx, 1
  00034	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  00037	eb 07		 jmp	 SHORT $LN4@GetMonth
$LN3@GetMonth:
  00039	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetMonth:
  00040	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 434  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetMonth@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMonth
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetDay@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetDay@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetDay, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 438  : 	struct tm ttm;
; 439  : 	struct tm * ptm;
; 440  : 
; 441  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 442  : 	return ptm ? ptm->tm_mday : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetDay
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetDay
$LN3@GetDay:
  00036	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@GetDay:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 443  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetDay@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetDay
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetHour@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 447  : 	struct tm ttm;
; 448  : 	struct tm * ptm;
; 449  : 
; 450  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 451  : 	return ptm ? ptm->tm_hour : -1 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetHour
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetHour
$LN3@GetHour:
  00036	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetHour:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 452  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetMinute@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 	struct tm ttm;
; 457  : 	struct tm * ptm;
; 458  : 
; 459  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 460  : 	return ptm ? ptm->tm_min : -1 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetMinute
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetMinute
$LN3@GetMinute:
  00036	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetMinute:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 461  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetDayOfWeek@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetDayOfWeek@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetDayOfWeek, COMDAT
; _this$ = ecx

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 474  : 	struct tm ttm;
; 475  : 	struct tm * ptm;
; 476  : 
; 477  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 478  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0e		 je	 SHORT $LN3@GetDayOfWe
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00031	83 c1 01	 add	 ecx, 1
  00034	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  00037	eb 07		 jmp	 SHORT $LN4@GetDayOfWe
$LN3@GetDayOfWe:
  00039	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetDayOfWe:
  00040	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 479  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetDayOfWeek@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetDayOfWeek
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
EXTRN	??0CCrywolfUtil@@QAE@XZ:PROC			; CCrywolfUtil::CCrywolfUtil
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\crywolf.cpp
;	COMDAT ??__EUTIL@@YAXXZ
text$yc	SEGMENT
??__EUTIL@@YAXXZ PROC					; `dynamic initializer for 'UTIL'', COMDAT

; 24   : static CCrywolfUtil UTIL;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  0000e	e8 00 00 00 00	 call	 ??0CCrywolfUtil@@QAE@XZ	; CCrywolfUtil::CCrywolfUtil
  00013	68 00 00 00 00	 push	 OFFSET ??__FUTIL@@YAXXZ	; `dynamic atexit destructor for 'UTIL''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EUTIL@@YAXXZ ENDP					; `dynamic initializer for 'UTIL''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Eg_Crywolf@@YAXXZ
text$yc	SEGMENT
??__Eg_Crywolf@@YAXXZ PROC				; `dynamic initializer for 'g_Crywolf'', COMDAT

; 25   : CCrywolf g_Crywolf;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  0000e	e8 00 00 00 00	 call	 ??0CCrywolf@@QAE@XZ	; CCrywolf::CCrywolf
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_Crywolf@@YAXXZ ; `dynamic atexit destructor for 'g_Crywolf''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_Crywolf@@YAXXZ ENDP				; `dynamic initializer for 'g_Crywolf''
text$yc	ENDS
EXTRN	??1CCrywolfUtil@@UAE@XZ:PROC			; CCrywolfUtil::~CCrywolfUtil
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FUTIL@@YAXXZ
text$yd	SEGMENT
??__FUTIL@@YAXXZ PROC					; `dynamic atexit destructor for 'UTIL'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  0000e	e8 00 00 00 00	 call	 ??1CCrywolfUtil@@UAE@XZ	; CCrywolfUtil::~CCrywolfUtil
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FUTIL@@YAXXZ ENDP					; `dynamic atexit destructor for 'UTIL''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__Fg_Crywolf@@YAXXZ
text$yd	SEGMENT
??__Fg_Crywolf@@YAXXZ PROC				; `dynamic atexit destructor for 'g_Crywolf'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  0000e	e8 00 00 00 00	 call	 ??1CCrywolf@@UAE@XZ	; CCrywolf::~CCrywolf
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_Crywolf@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_Crywolf''
text$yd	ENDS
PUBLIC	?g_Crywolf@@3VCCrywolf@@A			; g_Crywolf
_BSS	SEGMENT
?g_Crywolf@@3VCCrywolf@@A DB 0fd174H DUP (?)		; g_Crywolf
_UTIL	DD	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_UTIL$initializer$ DD FLAT:??__EUTIL@@YAXXZ
_g_Crywolf$initializer$ DD FLAT:??__Eg_Crywolf@@YAXXZ
CRT$XCU	ENDS
END
